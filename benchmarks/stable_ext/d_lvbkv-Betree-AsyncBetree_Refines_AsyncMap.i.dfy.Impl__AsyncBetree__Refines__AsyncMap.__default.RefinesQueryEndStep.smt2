(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TORDINAL () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun TagORDINAL () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagISet () T@U)
(declare-fun TagMultiSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun TagIMap () T@U)
(declare-fun TagClass () T@U)
(declare-fun class._System.int () T@U)
(declare-fun class._System.bool () T@U)
(declare-fun class._System.set () T@U)
(declare-fun class._System.seq () T@U)
(declare-fun class._System.multiset () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun class._System.object? () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun class._System.array? () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun Tagclass._System.___hFunc0 () T@U)
(declare-fun Tagclass._System.___hPartialFunc0 () T@U)
(declare-fun Tagclass._System.___hTotalFunc0 () T@U)
(declare-fun class._System.__default () T@U)
(declare-fun Tagclass._System.__default () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tagclass._System.___hPartialFunc2 () T@U)
(declare-fun Tagclass._System.___hTotalFunc2 () T@U)
(declare-fun Tagclass._System.___hFunc4 () T@U)
(declare-fun Tagclass._System.___hPartialFunc4 () T@U)
(declare-fun Tagclass._System.___hTotalFunc4 () T@U)
(declare-fun Tagclass._System.___hFunc3 () T@U)
(declare-fun Tagclass._System.___hPartialFunc3 () T@U)
(declare-fun Tagclass._System.___hTotalFunc3 () T@U)
(declare-fun Tagclass._System.___hFunc5 () T@U)
(declare-fun Tagclass._System.___hPartialFunc5 () T@U)
(declare-fun Tagclass._System.___hTotalFunc5 () T@U)
(declare-fun Tagclass._System.___hFunc6 () T@U)
(declare-fun Tagclass._System.___hPartialFunc6 () T@U)
(declare-fun Tagclass._System.___hTotalFunc6 () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun class._System.Tuple2 () T@U)
(declare-fun Tagclass._System.___hFunc2OSO () T@U)
(declare-fun Tagclass._System.___hPartialFunc2OSO () T@U)
(declare-fun Tagclass._System.___hTotalFunc2OSO () T@U)
(declare-fun Tagclass._System.___hFunc3LLOO () T@U)
(declare-fun Tagclass._System.___hPartialFunc3LLOO () T@U)
(declare-fun Tagclass._System.___hTotalFunc3LLOO () T@U)
(declare-fun Tagclass._System.___hFunc1OS () T@U)
(declare-fun Tagclass._System.___hPartialFunc1OS () T@U)
(declare-fun Tagclass._System.___hTotalFunc1OS () T@U)
(declare-fun Tagclass._System.___hFunc0L () T@U)
(declare-fun Tagclass._System.___hPartialFunc0L () T@U)
(declare-fun Tagclass._System.___hTotalFunc0L () T@U)
(declare-fun Tagclass._System.___hFunc2LOO () T@U)
(declare-fun Tagclass._System.___hPartialFunc2LOO () T@U)
(declare-fun Tagclass._System.___hTotalFunc2LOO () T@U)
(declare-fun |##_System._tuple#0._#Make0| () T@U)
(declare-fun Tagclass._System.Tuple0 () T@U)
(declare-fun class._System.Tuple0 () T@U)
(declare-fun Tagclass._System.___hFunc1OL () T@U)
(declare-fun Tagclass._System.___hPartialFunc1OL () T@U)
(declare-fun Tagclass._System.___hTotalFunc1OL () T@U)
(declare-fun Tagclass._System.___hFunc1LO () T@U)
(declare-fun Tagclass._System.___hPartialFunc1LO () T@U)
(declare-fun Tagclass._System.___hTotalFunc1LO () T@U)
(declare-fun |##_System._tuple#2OLL._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2OLL () T@U)
(declare-fun class._System.Tuple2OLL () T@U)
(declare-fun Tagclass._System.___hFunc3LLOL () T@U)
(declare-fun Tagclass._System.___hPartialFunc3LLOL () T@U)
(declare-fun Tagclass._System.___hTotalFunc3LLOL () T@U)
(declare-fun Tagclass._System.___hFunc2SSO () T@U)
(declare-fun Tagclass._System.___hPartialFunc2SSO () T@U)
(declare-fun Tagclass._System.___hTotalFunc2SSO () T@U)
(declare-fun Tagclass._System.___hFunc1SS () T@U)
(declare-fun Tagclass._System.___hPartialFunc1SS () T@U)
(declare-fun Tagclass._System.___hTotalFunc1SS () T@U)
(declare-fun Tagclass._System.___hFunc1LL () T@U)
(declare-fun Tagclass._System.___hPartialFunc1LL () T@U)
(declare-fun Tagclass._System.___hTotalFunc1LL () T@U)
(declare-fun class.AsyncBetree__Refines__AsyncMap.__default () T@U)
(declare-fun Tagclass.AsyncBetree__Refines__AsyncMap.__default () T@U)
(declare-fun Tagclass.Betree.Variables () T@U)
(declare-fun Tagclass.QueryStates.QueryState () T@U)
(declare-fun Tagclass.ValueType.Value () T@U)
(declare-fun Tagclass.KeyType.Key () T@U)
(declare-fun Tagclass.NativeTypes.byte () T@U)
(declare-fun Tagclass.ValueMessage.Delta () T@U)
(declare-fun Tagclass.ReferenceType.Reference () T@U)
(declare-fun Tagclass.BetreeGraph.Node () T@U)
(declare-fun Tagclass.BetreeGraph.ReadOp () T@U)
(declare-fun Tagclass.AsyncBetree.Variables () T@U)
(declare-fun Tagclass.AsyncMapSpec.Variables () T@U)
(declare-fun Tagclass.UI.Op () T@U)
(declare-fun Tagclass.AsyncMapSpec.Step () T@U)
(declare-fun Tagclass.QueryStates.QueryDescent () T@U)
(declare-fun Tagclass.Betree__Refines__Map.LookupResult () T@U)
(declare-fun Tagclass.Betree.Step () T@U)
(declare-fun Tagclass.BetreeSpec.BetreeStep () T@U)
(declare-fun Tagclass.BetreeSpec.Redirect () T@U)
(declare-fun Tagclass.BetreeSpec.RootGrowth () T@U)
(declare-fun Tagclass.BetreeSpec.NodeFlush () T@U)
(declare-fun Tagclass.BetreeSpec.MessageInsertion () T@U)
(declare-fun Tagclass.BetreeSpec.SuccQuery () T@U)
(declare-fun Tagclass.BetreeSpec.LookupQuery () T@U)
(declare-fun Tagclass.AsyncBetree.Step () T@U)
(declare-fun Tagclass.MapSpec.Step () T@U)
(declare-fun Tagclass.MapSpec.Variables () T@U)
(declare-fun Tagclass.UI.RangeStart () T@U)
(declare-fun Tagclass.UI.SuccResult () T@U)
(declare-fun Tagclass.UI.RangeEnd () T@U)
(declare-fun Tagclass.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.byte () T@U)
(declare-fun Tagclass.NativeTypes.int16 () T@U)
(declare-fun class.NativeTypes.int16 () T@U)
(declare-fun Tagclass.NativeTypes.uint16 () T@U)
(declare-fun class.NativeTypes.uint16 () T@U)
(declare-fun Tagclass.NativeTypes.int32 () T@U)
(declare-fun class.NativeTypes.int32 () T@U)
(declare-fun Tagclass.NativeTypes.uint32 () T@U)
(declare-fun class.NativeTypes.uint32 () T@U)
(declare-fun Tagclass.NativeTypes.int64 () T@U)
(declare-fun class.NativeTypes.int64 () T@U)
(declare-fun Tagclass.NativeTypes.uint64 () T@U)
(declare-fun class.NativeTypes.uint64 () T@U)
(declare-fun Tagclass.NativeTypes.nat8 () T@U)
(declare-fun class.NativeTypes.nat8 () T@U)
(declare-fun Tagclass.NativeTypes.nat16 () T@U)
(declare-fun class.NativeTypes.nat16 () T@U)
(declare-fun Tagclass.NativeTypes.nat32 () T@U)
(declare-fun class.NativeTypes.nat32 () T@U)
(declare-fun Tagclass.NativeTypes.nat64 () T@U)
(declare-fun class.NativeTypes.nat64 () T@U)
(declare-fun Tagclass.NativeTypes.uint128 () T@U)
(declare-fun class.NativeTypes.uint128 () T@U)
(declare-fun class.NativeTypes.__default () T@U)
(declare-fun Tagclass.NativeTypes.__default () T@U)
(declare-fun class.ValueType.__default () T@U)
(declare-fun Tagclass.ValueType.__default () T@U)
(declare-fun class.KeyType.__default () T@U)
(declare-fun Tagclass.KeyType.__default () T@U)
(declare-fun |##UI.RangeStart.SInclusive| () T@U)
(declare-fun |##UI.RangeStart.SExclusive| () T@U)
(declare-fun |##UI.RangeStart.NegativeInf| () T@U)
(declare-fun class.UI.RangeStart () T@U)
(declare-fun |##UI.RangeEnd.EInclusive| () T@U)
(declare-fun |##UI.RangeEnd.EExclusive| () T@U)
(declare-fun |##UI.RangeEnd.PositiveInf| () T@U)
(declare-fun class.UI.RangeEnd () T@U)
(declare-fun |##UI.SuccResult.SuccResult| () T@U)
(declare-fun class.UI.SuccResult () T@U)
(declare-fun |##UI.SuccResultList.SuccResultList| () T@U)
(declare-fun Tagclass.UI.SuccResultList () T@U)
(declare-fun class.UI.SuccResultList () T@U)
(declare-fun |##UI.Op.NoOp| () T@U)
(declare-fun |##UI.Op.SyncOp| () T@U)
(declare-fun |##UI.Op.CrashOp| () T@U)
(declare-fun |##UI.Op.PushSyncOp| () T@U)
(declare-fun |##UI.Op.PopSyncOp| () T@U)
(declare-fun |##UI.Op.GetOp| () T@U)
(declare-fun |##UI.Op.GetBeginOp| () T@U)
(declare-fun |##UI.Op.GetEndOp| () T@U)
(declare-fun |##UI.Op.PutOp| () T@U)
(declare-fun |##UI.Op.SuccOp| () T@U)
(declare-fun class.UI.Op () T@U)
(declare-fun class.UI.__default () T@U)
(declare-fun Tagclass.UI.__default () T@U)
(declare-fun class.SeqComparison.__default () T@U)
(declare-fun Tagclass.SeqComparison.__default () T@U)
(declare-fun |##Options.Option.None| () T@U)
(declare-fun Tagclass.Options.Option () T@U)
(declare-fun |##Options.Option.Some| () T@U)
(declare-fun class.Options.Option () T@U)
(declare-fun class.Options.__default () T@U)
(declare-fun Tagclass.Options.__default () T@U)
(declare-fun |##MapSpec.Variables.Variables| () T@U)
(declare-fun class.MapSpec.Variables () T@U)
(declare-fun |##MapSpec.Step.QueryStep| () T@U)
(declare-fun |##MapSpec.Step.WriteStep| () T@U)
(declare-fun |##MapSpec.Step.SuccStep| () T@U)
(declare-fun |##MapSpec.Step.StutterStep| () T@U)
(declare-fun class.MapSpec.Step () T@U)
(declare-fun class.MapSpec.__default () T@U)
(declare-fun Tagclass.MapSpec.__default () T@U)
(declare-fun class.MapRemove_s.__default () T@U)
(declare-fun Tagclass.MapRemove_s.__default () T@U)
(declare-fun class.Maps.__default () T@U)
(declare-fun Tagclass.Maps.__default () T@U)
(declare-fun |##AsyncMapSpec.Variables.Variables| () T@U)
(declare-fun class.AsyncMapSpec.Variables () T@U)
(declare-fun |##AsyncMapSpec.Step.QueryBeginStep| () T@U)
(declare-fun |##AsyncMapSpec.Step.QueryEndStep| () T@U)
(declare-fun |##AsyncMapSpec.Step.QueryStep| () T@U)
(declare-fun |##AsyncMapSpec.Step.WriteStep| () T@U)
(declare-fun |##AsyncMapSpec.Step.SuccStep| () T@U)
(declare-fun |##AsyncMapSpec.Step.StutterStep| () T@U)
(declare-fun class.AsyncMapSpec.Step () T@U)
(declare-fun class.AsyncMapSpec.__default () T@U)
(declare-fun Tagclass.AsyncMapSpec.__default () T@U)
(declare-fun class.SequencesLite.__default () T@U)
(declare-fun Tagclass.SequencesLite.__default () T@U)
(declare-fun class.Mathematics.__default () T@U)
(declare-fun Tagclass.Mathematics.__default () T@U)
(declare-fun class.Sequences.__default () T@U)
(declare-fun Tagclass.Sequences.__default () T@U)
(declare-fun class.ReferenceType.__default () T@U)
(declare-fun Tagclass.ReferenceType.__default () T@U)
(declare-fun class.LinearMaybe.predefined () T@U)
(declare-fun class.LinearMaybe.__default () T@U)
(declare-fun Tagclass.LinearMaybe.__default () T@U)
(declare-fun class.LinearExtern.predefined () T@U)
(declare-fun class.LinearExtern.__default () T@U)
(declare-fun Tagclass.LinearExtern.__default () T@U)
(declare-fun |##ValueMessage.Delta.NoDelta| () T@U)
(declare-fun class.ValueMessage.Delta () T@U)
(declare-fun class.ValueMessage.__default () T@U)
(declare-fun Tagclass.ValueMessage.__default () T@U)
(declare-fun Tagclass.ValueMessage.Message () T@U)
(declare-fun |##ValueMessage.Message.Define| () T@U)
(declare-fun |##ValueMessage.Message.Update| () T@U)
(declare-fun class.ValueMessage.Message () T@U)
(declare-fun |##BetreeGraph.Node.Node| () T@U)
(declare-fun class.BetreeGraph.Node () T@U)
(declare-fun class.BetreeGraph.__default () T@U)
(declare-fun Tagclass.BetreeGraph.__default () T@U)
(declare-fun |##BetreeGraph.Op.AllocOp| () T@U)
(declare-fun Tagclass.BetreeGraph.Op () T@U)
(declare-fun |##BetreeGraph.Op.WriteOp| () T@U)
(declare-fun class.BetreeGraph.Op () T@U)
(declare-fun |##BetreeGraph.ReadOp.ReadOp| () T@U)
(declare-fun class.BetreeGraph.ReadOp () T@U)
(declare-fun class.Sets.__default () T@U)
(declare-fun Tagclass.Sets.__default () T@U)
(declare-fun class.NativeArrays.__default () T@U)
(declare-fun Tagclass.NativeArrays.__default () T@U)
(declare-fun class.Byte__Order.__default () T@U)
(declare-fun Tagclass.Byte__Order.__default () T@U)
(declare-fun class.Lexicographic__Byte__Order.__default () T@U)
(declare-fun Tagclass.Lexicographic__Byte__Order.__default () T@U)
(declare-fun |##BetreeSpec.LookupQuery.LookupQuery| () T@U)
(declare-fun class.BetreeSpec.LookupQuery () T@U)
(declare-fun |##BetreeSpec.SuccQuery.SuccQuery| () T@U)
(declare-fun class.BetreeSpec.SuccQuery () T@U)
(declare-fun |##BetreeSpec.MessageInsertion.MessageInsertion| () T@U)
(declare-fun class.BetreeSpec.MessageInsertion () T@U)
(declare-fun |##BetreeSpec.NodeFlush.NodeFlush| () T@U)
(declare-fun class.BetreeSpec.NodeFlush () T@U)
(declare-fun |##BetreeSpec.RootGrowth.RootGrowth| () T@U)
(declare-fun class.BetreeSpec.RootGrowth () T@U)
(declare-fun |##BetreeSpec.Redirect.Redirect| () T@U)
(declare-fun class.BetreeSpec.Redirect () T@U)
(declare-fun |##BetreeSpec.BetreeStep.BetreeQuery| () T@U)
(declare-fun |##BetreeSpec.BetreeStep.BetreeSuccQuery| () T@U)
(declare-fun |##BetreeSpec.BetreeStep.BetreeInsert| () T@U)
(declare-fun |##BetreeSpec.BetreeStep.BetreeFlush| () T@U)
(declare-fun |##BetreeSpec.BetreeStep.BetreeGrow| () T@U)
(declare-fun |##BetreeSpec.BetreeStep.BetreeRedirect| () T@U)
(declare-fun class.BetreeSpec.BetreeStep () T@U)
(declare-fun class.BetreeSpec.__default () T@U)
(declare-fun Tagclass.BetreeSpec.__default () T@U)
(declare-fun class.BetreeBlockInterface.__default () T@U)
(declare-fun Tagclass.BetreeBlockInterface.__default () T@U)
(declare-fun Tagclass.BetreeBlockInterface.Variables () T@U)
(declare-fun Tagclass.BetreeBlockInterface.Step () T@U)
(declare-fun |##BetreeBlockInterface.Variables.Variables| () T@U)
(declare-fun class.BetreeBlockInterface.Variables () T@U)
(declare-fun |##BetreeBlockInterface.Step.TransactionStep| () T@U)
(declare-fun |##BetreeBlockInterface.Step.GCStep| () T@U)
(declare-fun |##BetreeBlockInterface.Step.StutterStep| () T@U)
(declare-fun class.BetreeBlockInterface.Step () T@U)
(declare-fun |##Betree.Variables.Variables| () T@U)
(declare-fun class.Betree.Variables () T@U)
(declare-fun |##Betree.Step.BetreeStep| () T@U)
(declare-fun |##Betree.Step.GCStep| () T@U)
(declare-fun |##Betree.Step.StutterStep| () T@U)
(declare-fun class.Betree.Step () T@U)
(declare-fun class.Betree.__default () T@U)
(declare-fun Tagclass.Betree.__default () T@U)
(declare-fun |##QueryStates.QueryState.InProgress| () T@U)
(declare-fun |##QueryStates.QueryState.Finished| () T@U)
(declare-fun class.QueryStates.QueryState () T@U)
(declare-fun |##QueryStates.QueryDescent.QueryDescent| () T@U)
(declare-fun class.QueryStates.QueryDescent () T@U)
(declare-fun class.QueryStates.__default () T@U)
(declare-fun Tagclass.QueryStates.__default () T@U)
(declare-fun class.BetreeInv.__default () T@U)
(declare-fun Tagclass.BetreeInv.__default () T@U)
(declare-fun |##AsyncBetree.Variables.Variables| () T@U)
(declare-fun class.AsyncBetree.Variables () T@U)
(declare-fun |##AsyncBetree.Step.BasicStep| () T@U)
(declare-fun |##AsyncBetree.Step.QueryBeginStep| () T@U)
(declare-fun |##AsyncBetree.Step.QueryEndStep| () T@U)
(declare-fun |##AsyncBetree.Step.QueryAdvanceStep| () T@U)
(declare-fun |##AsyncBetree.Step.StutterStep| () T@U)
(declare-fun class.AsyncBetree.Step () T@U)
(declare-fun class.AsyncBetree.__default () T@U)
(declare-fun Tagclass.AsyncBetree.__default () T@U)
(declare-fun |##Betree_Refines_Map.LookupResult.LookupResult| () T@U)
(declare-fun class.Betree__Refines__Map.LookupResult () T@U)
(declare-fun class.Betree__Refines__Map.__default () T@U)
(declare-fun Tagclass.Betree__Refines__Map.__default () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$array () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1| () T@U)
(declare-fun |tytagFamily$_#Func0| () T@U)
(declare-fun |tytagFamily$_#PartialFunc0| () T@U)
(declare-fun |tytagFamily$_#TotalFunc0| () T@U)
(declare-fun tytagFamily$_default () T@U)
(declare-fun |tytagFamily$_#Func2| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2| () T@U)
(declare-fun |tytagFamily$_#Func4| () T@U)
(declare-fun |tytagFamily$_#PartialFunc4| () T@U)
(declare-fun |tytagFamily$_#TotalFunc4| () T@U)
(declare-fun |tytagFamily$_#Func3| () T@U)
(declare-fun |tytagFamily$_#PartialFunc3| () T@U)
(declare-fun |tytagFamily$_#TotalFunc3| () T@U)
(declare-fun |tytagFamily$_#Func5| () T@U)
(declare-fun |tytagFamily$_#PartialFunc5| () T@U)
(declare-fun |tytagFamily$_#TotalFunc5| () T@U)
(declare-fun |tytagFamily$_#Func6| () T@U)
(declare-fun |tytagFamily$_#PartialFunc6| () T@U)
(declare-fun |tytagFamily$_#TotalFunc6| () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun |tytagFamily$_#Func2OSO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2OSO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2OSO| () T@U)
(declare-fun |tytagFamily$_#Func3LLOO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc3LLOO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc3LLOO| () T@U)
(declare-fun |tytagFamily$_#Func1OS| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1OS| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1OS| () T@U)
(declare-fun |tytagFamily$_#Func0L| () T@U)
(declare-fun |tytagFamily$_#PartialFunc0L| () T@U)
(declare-fun |tytagFamily$_#TotalFunc0L| () T@U)
(declare-fun |tytagFamily$_#Func2LOO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2LOO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2LOO| () T@U)
(declare-fun |tytagFamily$_tuple#0| () T@U)
(declare-fun |tytagFamily$_#Func1OL| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1OL| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1OL| () T@U)
(declare-fun |tytagFamily$_#Func1LO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1LO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1LO| () T@U)
(declare-fun |tytagFamily$_tuple#2OLL| () T@U)
(declare-fun |tytagFamily$_#Func3LLOL| () T@U)
(declare-fun |tytagFamily$_#PartialFunc3LLOL| () T@U)
(declare-fun |tytagFamily$_#TotalFunc3LLOL| () T@U)
(declare-fun |tytagFamily$_#Func2SSO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2SSO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2SSO| () T@U)
(declare-fun |tytagFamily$_#Func1SS| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1SS| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1SS| () T@U)
(declare-fun |tytagFamily$_#Func1LL| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1LL| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1LL| () T@U)
(declare-fun tytagFamily$Variables () T@U)
(declare-fun tytagFamily$QueryState () T@U)
(declare-fun tytagFamily$Value () T@U)
(declare-fun tytagFamily$Key () T@U)
(declare-fun tytagFamily$byte () T@U)
(declare-fun tytagFamily$Delta () T@U)
(declare-fun tytagFamily$Reference () T@U)
(declare-fun tytagFamily$Node () T@U)
(declare-fun tytagFamily$ReadOp () T@U)
(declare-fun tytagFamily$Op () T@U)
(declare-fun tytagFamily$Step () T@U)
(declare-fun tytagFamily$QueryDescent () T@U)
(declare-fun tytagFamily$LookupResult () T@U)
(declare-fun tytagFamily$BetreeStep () T@U)
(declare-fun tytagFamily$Redirect () T@U)
(declare-fun tytagFamily$RootGrowth () T@U)
(declare-fun tytagFamily$NodeFlush () T@U)
(declare-fun tytagFamily$MessageInsertion () T@U)
(declare-fun tytagFamily$SuccQuery () T@U)
(declare-fun tytagFamily$LookupQuery () T@U)
(declare-fun tytagFamily$RangeStart () T@U)
(declare-fun tytagFamily$SuccResult () T@U)
(declare-fun tytagFamily$RangeEnd () T@U)
(declare-fun tytagFamily$sbyte () T@U)
(declare-fun tytagFamily$int16 () T@U)
(declare-fun tytagFamily$uint16 () T@U)
(declare-fun tytagFamily$int32 () T@U)
(declare-fun tytagFamily$uint32 () T@U)
(declare-fun tytagFamily$int64 () T@U)
(declare-fun tytagFamily$uint64 () T@U)
(declare-fun tytagFamily$nat8 () T@U)
(declare-fun tytagFamily$nat16 () T@U)
(declare-fun tytagFamily$nat32 () T@U)
(declare-fun tytagFamily$nat64 () T@U)
(declare-fun tytagFamily$uint128 () T@U)
(declare-fun tytagFamily$SuccResultList () T@U)
(declare-fun tytagFamily$Option () T@U)
(declare-fun tytagFamily$Message () T@U)
(declare-fun TyType () T@T)
(declare-fun TyTagType () T@T)
(declare-fun ClassNameType () T@T)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun NameFamilyType () T@T)
(declare-fun DtCtorIdType () T@T)
(declare-fun TyTagFamilyType () T@T)
(declare-fun $$Language$Dafny () Bool)
(declare-fun TBitvector (Int) T@U)
(declare-fun Inv0_TBitvector (T@U) Int)
(declare-fun TSet (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun TISet (T@U) T@U)
(declare-fun Inv0_TISet (T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun TMultiSet (T@U) T@U)
(declare-fun Inv0_TMultiSet (T@U) T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun TIMap (T@U T@U) T@U)
(declare-fun Inv0_TIMap (T@U) T@U)
(declare-fun Inv1_TIMap (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun Lit (T@U) T@U)
(declare-fun $Box (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun LitInt (Int) Int)
(declare-fun LitReal (Real) Real)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun charType () T@T)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun |char#Plus| (T@U T@U) T@U)
(declare-fun |char#Minus| (T@U T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $Is (T@U T@U) Bool)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U) T@U)
(declare-fun SeqType (T@T) T@T)
(declare-fun SeqTypeInv0 (T@T) T@T)
(declare-fun MapType (T@T T@T) T@T)
(declare-fun MapTypeInv0 (T@T) T@T)
(declare-fun MapTypeInv1 (T@T) T@T)
(declare-fun IMapType (T@T T@T) T@T)
(declare-fun IMapTypeInv0 (T@T) T@T)
(declare-fun IMapTypeInv1 (T@T) T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun MapType1Type () T@T)
(declare-fun $IsAlloc (T@U T@U T@U) Bool)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun $IsGoodMultiSet (T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |IMap#Elements| (T@U) T@U)
(declare-fun |IMap#Domain| (T@U) T@U)
(declare-fun |IMap#Values| (T@U) T@U)
(declare-fun |IMap#Items| (T@U) T@U)
(declare-fun TypeTuple (T@U T@U) T@U)
(declare-fun TypeTupleCar (T@U) T@U)
(declare-fun TypeTupleCdr (T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DatatypeTypeType () T@T)
(declare-fun DtRank (T@U) Int)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun |ORD#LessThanLimit| (T@U T@U) Bool)
(declare-fun |ORD#Plus| (T@U T@U) T@U)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun AtLayer (T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun $LS (T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun FDim (T@U) Int)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun MultiIndexField (T@U Int) T@U)
(declare-fun MultiIndexField_Inverse0 (T@U) T@U)
(declare-fun MultiIndexField_Inverse1 (T@U) Int)
(declare-fun FieldOfDecl (T@T T@U T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun q@Int (Real) Int)
(declare-fun q@Real (Int) Real)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $OneHeap () T@U)
(declare-fun $HeapSuccGhost (T@U T@U) Bool)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun |Set#Empty| (T@T) T@U)
(declare-fun |Set#Singleton| (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Intersection| (T@U T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |ISet#Empty| (T@T) T@U)
(declare-fun |ISet#UnionOne| (T@U T@U) T@U)
(declare-fun |ISet#Union| (T@U T@U) T@U)
(declare-fun |ISet#Disjoint| (T@U T@U) Bool)
(declare-fun |ISet#Difference| (T@U T@U) T@U)
(declare-fun |ISet#Intersection| (T@U T@U) T@U)
(declare-fun |ISet#Subset| (T@U T@U) Bool)
(declare-fun |ISet#Equal| (T@U T@U) Bool)
(declare-fun |Math#min| (Int Int) Int)
(declare-fun |Math#clip| (Int) Int)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun |MultiSet#Empty| (T@T) T@U)
(declare-fun |MultiSet#Singleton| (T@U) T@U)
(declare-fun |MultiSet#UnionOne| (T@U T@U) T@U)
(declare-fun |MultiSet#Union| (T@U T@U) T@U)
(declare-fun |MultiSet#Intersection| (T@U T@U) T@U)
(declare-fun |MultiSet#Difference| (T@U T@U) T@U)
(declare-fun |MultiSet#Subset| (T@U T@U) Bool)
(declare-fun |MultiSet#Equal| (T@U T@U) Bool)
(declare-fun |MultiSet#Disjoint| (T@U T@U) Bool)
(declare-fun |MultiSet#FromSet| (T@U) T@U)
(declare-fun |MultiSet#FromSeq| (T@U) T@U)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |Seq#Empty| (T@T) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun |Seq#Singleton| (T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun |Seq#Create| (T@U T@U Int T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Seq#SameUntil| (T@U T@U Int) Bool)
(declare-fun |Seq#FromArray| (T@U T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun |Map#Card| (T@U) Int)
(declare-fun |Map#Empty| (T@T T@T) T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(declare-fun |Map#Merge| (T@U T@U) T@U)
(declare-fun |Map#Subtract| (T@U T@U) T@U)
(declare-fun |Map#Equal| (T@U T@U) Bool)
(declare-fun |Map#Disjoint| (T@U T@U) Bool)
(declare-fun |IMap#Empty| (T@T T@T) T@U)
(declare-fun |IMap#Glue| (T@U T@U T@U) T@U)
(declare-fun |IMap#Build| (T@U T@U T@U) T@U)
(declare-fun |IMap#Equal| (T@U T@U) Bool)
(declare-fun |IMap#Merge| (T@U T@U) T@U)
(declare-fun |IMap#Subtract| (T@U T@U) T@U)
(declare-fun INTERNAL_add_boogie (Int Int) Int)
(declare-fun INTERNAL_sub_boogie (Int Int) Int)
(declare-fun INTERNAL_mul_boogie (Int Int) Int)
(declare-fun INTERNAL_div_boogie (Int Int) Int)
(declare-fun INTERNAL_mod_boogie (Int Int) Int)
(declare-fun INTERNAL_lt_boogie (Int Int) Bool)
(declare-fun INTERNAL_le_boogie (Int Int) Bool)
(declare-fun INTERNAL_gt_boogie (Int Int) Bool)
(declare-fun INTERNAL_ge_boogie (Int Int) Bool)
(declare-fun Mul (Int Int) Int)
(declare-fun Div (Int Int) Int)
(declare-fun Mod (Int Int) Int)
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun _System.__default.rank__is__less__than (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun null () T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun MapType2Type (T@T T@T T@T) T@T)
(declare-fun MapType2Select (T@U T@U T@U) T@U)
(declare-fun MapType2TypeInv0 (T@T) T@T)
(declare-fun MapType2TypeInv1 (T@T) T@T)
(declare-fun MapType2TypeInv2 (T@T) T@T)
(declare-fun MapType2Store (T@U T@U T@U T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0_0 (T@U) T@U)
(declare-fun Apply0 (T@U T@U T@U) T@U)
(declare-fun Handle0 (T@U T@U T@U) T@U)
(declare-fun Requires0 (T@U T@U T@U) Bool)
(declare-fun Reads0 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.__default () T@U)
(declare-fun |_System.__default.rank__is__less__than#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |_System.__default.rank__is__less__than#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle2 (T@U T@U T@U) T@U)
(declare-fun MapType3Type (T@T T@T T@T T@T) T@T)
(declare-fun MapType3Select (T@U T@U T@U T@U) T@U)
(declare-fun MapType3TypeInv0 (T@T) T@T)
(declare-fun MapType3TypeInv1 (T@T) T@T)
(declare-fun MapType3TypeInv2 (T@T) T@T)
(declare-fun MapType3TypeInv3 (T@T) T@T)
(declare-fun MapType3Store (T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_4 (T@U) T@U)
(declare-fun Apply4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle4 (T@U T@U T@U) T@U)
(declare-fun MapType4Type (T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType4Select (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType4TypeInv0 (T@T) T@T)
(declare-fun MapType4TypeInv1 (T@T) T@T)
(declare-fun MapType4TypeInv2 (T@T) T@T)
(declare-fun MapType4TypeInv3 (T@T) T@T)
(declare-fun MapType4TypeInv4 (T@T) T@T)
(declare-fun MapType4TypeInv5 (T@T) T@T)
(declare-fun MapType4Store (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_4 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_3 (T@U) T@U)
(declare-fun Apply3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle3 (T@U T@U T@U) T@U)
(declare-fun MapType5Type (T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType5Select (T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType5TypeInv0 (T@T) T@T)
(declare-fun MapType5TypeInv1 (T@T) T@T)
(declare-fun MapType5TypeInv2 (T@T) T@T)
(declare-fun MapType5TypeInv3 (T@T) T@T)
(declare-fun MapType5TypeInv4 (T@T) T@T)
(declare-fun MapType5Store (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc5_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_4 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_5 (T@U) T@U)
(declare-fun Apply5 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle5 (T@U T@U T@U) T@U)
(declare-fun MapType6Type (T@T T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType6Select (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType6TypeInv0 (T@T) T@T)
(declare-fun MapType6TypeInv1 (T@T) T@T)
(declare-fun MapType6TypeInv2 (T@T) T@T)
(declare-fun MapType6TypeInv3 (T@T) T@T)
(declare-fun MapType6TypeInv4 (T@T) T@T)
(declare-fun MapType6TypeInv5 (T@T) T@T)
(declare-fun MapType6TypeInv6 (T@T) T@T)
(declare-fun MapType6Store (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires5 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads5 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_4 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_5 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_5 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc6_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_4 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_5 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_6 (T@U) T@U)
(declare-fun Apply6 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle6 (T@U T@U T@U) T@U)
(declare-fun MapType7Type (T@T T@T T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType7Select (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType7TypeInv0 (T@T) T@T)
(declare-fun MapType7TypeInv1 (T@T) T@T)
(declare-fun MapType7TypeInv2 (T@T) T@T)
(declare-fun MapType7TypeInv3 (T@T) T@T)
(declare-fun MapType7TypeInv4 (T@T) T@T)
(declare-fun MapType7TypeInv5 (T@T) T@T)
(declare-fun MapType7TypeInv6 (T@T) T@T)
(declare-fun MapType7TypeInv7 (T@T) T@T)
(declare-fun MapType7Store (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires6 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads6 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_4 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_5 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_6 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_5 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_6 (T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple2| (T@U) Bool)
(declare-fun |_System.Tuple2#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc2OSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2OSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2OSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2OSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2OSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2OSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2OSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2OSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2OSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2OSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2OSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2OSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1OS (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1OS_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1OS_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OS (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OS_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OS_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OS (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OS_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OS_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0L (T@U) T@U)
(declare-fun Tclass._System.___hFunc0L_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0L (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0L_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0L (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0L_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2LOO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2LOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2LOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2LOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LOO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LOO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LOO_2 (T@U) T@U)
(declare-fun |#_System._tuple#0._#Make0| () T@U)
(declare-fun _System.Tuple0.___hMake0_q (T@U) Bool)
(declare-fun Tclass._System.Tuple0 () T@U)
(declare-fun |$IsA#_System.Tuple0| (T@U) Bool)
(declare-fun |_System.Tuple0#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc1OL (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1OL_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1OL_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OL (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OL_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OL_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OL (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OL_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OL_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1LO (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1LO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1LO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LO (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LO (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LO_1 (T@U) T@U)
(declare-fun |#_System._tuple#2OLL._#Make2| (T@U T@U) T@U)
(declare-fun _System.Tuple2OLL.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2OLL (T@U T@U) T@U)
(declare-fun Tclass._System.Tuple2OLL_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2OLL_1 (T@U) T@U)
(declare-fun _System.Tuple2OLL._0 (T@U) T@U)
(declare-fun _System.Tuple2OLL._1 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple2OLL| (T@U) Bool)
(declare-fun |_System.Tuple2OLL#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc3LLOL (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOL_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOL_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOL_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOL_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2SSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2SSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2SSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2SSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2SSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2SSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2SSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2SSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2SSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2SSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2SSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2SSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1SS (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1SS_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1SS_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1SS (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1SS_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1SS_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1SS (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1SS_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1SS_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1LL (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1LL_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1LL_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LL (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LL_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LL_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LL (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LL_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LL_1 (T@U) T@U)
(declare-fun Tclass.AsyncBetree__Refines__AsyncMap.__default () T@U)
(declare-fun Tclass.Betree.Variables () T@U)
(declare-fun Tclass.QueryStates.QueryState () T@U)
(declare-fun Tclass.ValueType.Value () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun AsyncBetree__Refines__AsyncMap.__default.QueryAnswer (T@U T@U) T@U)
(declare-fun |AsyncBetree__Refines__AsyncMap.__default.QueryAnswer#canCall| (T@U T@U) Bool)
(declare-fun AsyncBetree.__default.QueryInv (T@U T@U) Bool)
(declare-fun |AsyncBetree__Refines__AsyncMap.__default.QueryAnswer#requires| (T@U T@U) Bool)
(declare-fun QueryStates.QueryState.InProgress_q (T@U) Bool)
(declare-fun QueryStates.QueryState.ref (T@U) T@U)
(declare-fun QueryStates.QueryState.delta (T@U) T@U)
(declare-fun QueryStates.QueryState.Finished_q (T@U) Bool)
(declare-fun Betree.Variables.Variables_q (T@U) Bool)
(declare-fun BetreeBlockInterface.Variables.Variables_q (T@U) Bool)
(declare-fun Betree.Variables.bcv (T@U) T@U)
(declare-fun |Betree__Refines__Map.__default.GetLookup#canCall| (T@U T@U T@U) Bool)
(declare-fun BetreeBlockInterface.Variables.view (T@U) T@U)
(declare-fun QueryStates.QueryState.key (T@U) T@U)
(declare-fun Betree__Refines__Map.LookupResult.LookupResult_q (T@U) Bool)
(declare-fun Betree__Refines__Map.__default.GetLookup (T@U T@U T@U) T@U)
(declare-fun |ValueMessage.__default.ApplyDelta#canCall| (T@U T@U) Bool)
(declare-fun Betree__Refines__Map.LookupResult.result (T@U) T@U)
(declare-fun ValueMessage.__default.ApplyDelta (T@U T@U) T@U)
(declare-fun QueryStates.QueryState.answer (T@U) T@U)
(declare-fun Tclass.KeyType.Key () T@U)
(declare-fun Tclass.NativeTypes.byte () T@U)
(declare-fun Tclass.ValueMessage.Delta () T@U)
(declare-fun Tclass.ReferenceType.Reference () T@U)
(declare-fun Tclass.BetreeGraph.Node () T@U)
(declare-fun Tclass.BetreeGraph.ReadOp () T@U)
(declare-fun Tclass.AsyncBetree.Variables () T@U)
(declare-fun AsyncBetree__Refines__AsyncMap.__default.IQueries (T@U) T@U)
(declare-fun |AsyncBetree__Refines__AsyncMap.__default.IQueries#canCall| (T@U) Bool)
(declare-fun AsyncBetree.Variables.queries (T@U) T@U)
(declare-fun AsyncBetree.Variables.betree (T@U) T@U)
(declare-fun |AsyncBetree__Refines__AsyncMap.__default.IQueries#requires| (T@U) Bool)
(declare-fun AsyncBetree.Variables.Variables_q (T@U) Bool)
(declare-fun |lambda#2| (T@U T@U) T@U)
(declare-fun |lambda#3| (T@U T@U) T@U)
(declare-fun Tclass.AsyncMapSpec.Variables () T@U)
(declare-fun AsyncBetree__Refines__AsyncMap.__default.I (T@U) T@U)
(declare-fun |AsyncBetree__Refines__AsyncMap.__default.I#canCall| (T@U) Bool)
(declare-fun AsyncBetree.__default.Inv (T@U) Bool)
(declare-fun |AsyncBetree__Refines__AsyncMap.__default.I#requires| (T@U) Bool)
(declare-fun |Betree__Refines__Map.__default.I#canCall| (T@U) Bool)
(declare-fun |#AsyncMapSpec.Variables.Variables| (T@U T@U) T@U)
(declare-fun Betree__Refines__Map.__default.I (T@U) T@U)
(declare-fun Tclass.UI.Op () T@U)
(declare-fun Tclass.AsyncMapSpec.Step () T@U)
(declare-fun Tclass.QueryStates.QueryDescent () T@U)
(declare-fun Tclass.Betree__Refines__Map.LookupResult () T@U)
(declare-fun Tclass.Betree.Step () T@U)
(declare-fun Tclass.BetreeSpec.BetreeStep () T@U)
(declare-fun Tclass.BetreeSpec.Redirect () T@U)
(declare-fun Tclass.BetreeSpec.RootGrowth () T@U)
(declare-fun Tclass.BetreeSpec.NodeFlush () T@U)
(declare-fun Tclass.BetreeSpec.MessageInsertion () T@U)
(declare-fun Tclass.BetreeSpec.SuccQuery () T@U)
(declare-fun Tclass.BetreeSpec.LookupQuery () T@U)
(declare-fun Tclass.AsyncBetree.Step () T@U)
(declare-fun Tclass.MapSpec.Step () T@U)
(declare-fun Tclass.MapSpec.Variables () T@U)
(declare-fun Tclass.UI.RangeStart () T@U)
(declare-fun Tclass.UI.SuccResult () T@U)
(declare-fun Tclass.UI.RangeEnd () T@U)
(declare-fun Tclass.NativeTypes.sbyte () T@U)
(declare-fun Tclass.NativeTypes.int16 () T@U)
(declare-fun Tclass.NativeTypes.uint16 () T@U)
(declare-fun Tclass.NativeTypes.int32 () T@U)
(declare-fun Tclass.NativeTypes.uint32 () T@U)
(declare-fun Tclass.NativeTypes.int64 () T@U)
(declare-fun Tclass.NativeTypes.uint64 () T@U)
(declare-fun Tclass.NativeTypes.nat8 () T@U)
(declare-fun Tclass.NativeTypes.nat16 () T@U)
(declare-fun Tclass.NativeTypes.nat32 () T@U)
(declare-fun Tclass.NativeTypes.nat64 () T@U)
(declare-fun Tclass.NativeTypes.uint128 () T@U)
(declare-fun Tclass.NativeTypes.__default () T@U)
(declare-fun NativeTypes.__default.Uint64Size () Int)
(declare-fun |NativeTypes.__default.Uint64Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32Size () Int)
(declare-fun |NativeTypes.__default.Uint32Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint16Size () Int)
(declare-fun |NativeTypes.__default.Uint16Size#requires| () Bool)
(declare-fun |NativeTypes.__default.Uint64UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint64UpperBound () Int)
(declare-fun |NativeTypes.__default.Uint32UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32UpperBound () Int)
(declare-fun Tclass.ValueType.__default () T@U)
(declare-fun ValueType.__default.MaxLen () Int)
(declare-fun |ValueType.__default.MaxLen#requires| () Bool)
(declare-fun ValueType.__default.DefaultValue () T@U)
(declare-fun |ValueType.__default.DefaultValue#requires| () Bool)
(declare-fun ValueType.__default.Len (T@U) Int)
(declare-fun |ValueType.__default.Len#canCall| (T@U) Bool)
(declare-fun |ValueType.__default.Len#requires| (T@U) Bool)
(declare-fun ValueType.__default.ValidMessageBytestring (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestring#canCall| (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestring#requires| (T@U) Bool)
(declare-fun |ValueType.__default.MaxLen#canCall| () Bool)
(declare-fun ValueType.__default.ValidMessageBytestrings (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestrings#canCall| (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestrings#requires| (T@U) Bool)
(declare-fun Tclass.KeyType.__default () T@U)
(declare-fun KeyType.__default.MaxLen () Int)
(declare-fun |KeyType.__default.MaxLen#requires| () Bool)
(declare-fun |#UI.RangeStart.SInclusive| (T@U) T@U)
(declare-fun UI.RangeStart.SInclusive_q (T@U) Bool)
(declare-fun UI.RangeStart.key (T@U) T@U)
(declare-fun |#UI.RangeStart.SExclusive| (T@U) T@U)
(declare-fun UI.RangeStart.SExclusive_q (T@U) Bool)
(declare-fun |#UI.RangeStart.NegativeInf| () T@U)
(declare-fun UI.RangeStart.NegativeInf_q (T@U) Bool)
(declare-fun |$IsA#UI.RangeStart| (T@U) Bool)
(declare-fun |UI.RangeStart#Equal| (T@U T@U) Bool)
(declare-fun |#UI.RangeEnd.EInclusive| (T@U) T@U)
(declare-fun UI.RangeEnd.EInclusive_q (T@U) Bool)
(declare-fun UI.RangeEnd.key (T@U) T@U)
(declare-fun |#UI.RangeEnd.EExclusive| (T@U) T@U)
(declare-fun UI.RangeEnd.EExclusive_q (T@U) Bool)
(declare-fun |#UI.RangeEnd.PositiveInf| () T@U)
(declare-fun UI.RangeEnd.PositiveInf_q (T@U) Bool)
(declare-fun |$IsA#UI.RangeEnd| (T@U) Bool)
(declare-fun |UI.RangeEnd#Equal| (T@U T@U) Bool)
(declare-fun |#UI.SuccResult.SuccResult| (T@U T@U) T@U)
(declare-fun UI.SuccResult.SuccResult_q (T@U) Bool)
(declare-fun UI.SuccResult.key (T@U) T@U)
(declare-fun UI.SuccResult.value (T@U) T@U)
(declare-fun |$IsA#UI.SuccResult| (T@U) Bool)
(declare-fun |UI.SuccResult#Equal| (T@U T@U) Bool)
(declare-fun |#UI.SuccResultList.SuccResultList| (T@U T@U) T@U)
(declare-fun UI.SuccResultList.SuccResultList_q (T@U) Bool)
(declare-fun Tclass.UI.SuccResultList () T@U)
(declare-fun UI.SuccResultList.results (T@U) T@U)
(declare-fun UI.SuccResultList.end (T@U) T@U)
(declare-fun |$IsA#UI.SuccResultList| (T@U) Bool)
(declare-fun |UI.SuccResultList#Equal| (T@U T@U) Bool)
(declare-fun |#UI.Op.NoOp| () T@U)
(declare-fun UI.Op.NoOp_q (T@U) Bool)
(declare-fun |#UI.Op.SyncOp| () T@U)
(declare-fun UI.Op.SyncOp_q (T@U) Bool)
(declare-fun |#UI.Op.CrashOp| () T@U)
(declare-fun UI.Op.CrashOp_q (T@U) Bool)
(declare-fun |#UI.Op.PushSyncOp| (Int) T@U)
(declare-fun UI.Op.PushSyncOp_q (T@U) Bool)
(declare-fun UI.Op.id (T@U) Int)
(declare-fun |#UI.Op.PopSyncOp| (Int) T@U)
(declare-fun UI.Op.PopSyncOp_q (T@U) Bool)
(declare-fun |#UI.Op.GetOp| (T@U T@U) T@U)
(declare-fun UI.Op.GetOp_q (T@U) Bool)
(declare-fun UI.Op.key (T@U) T@U)
(declare-fun UI.Op.value (T@U) T@U)
(declare-fun |#UI.Op.GetBeginOp| (T@U Int) T@U)
(declare-fun UI.Op.GetBeginOp_q (T@U) Bool)
(declare-fun |#UI.Op.GetEndOp| (T@U Int) T@U)
(declare-fun UI.Op.GetEndOp_q (T@U) Bool)
(declare-fun |#UI.Op.PutOp| (T@U T@U) T@U)
(declare-fun UI.Op.PutOp_q (T@U) Bool)
(declare-fun |#UI.Op.SuccOp| (T@U T@U T@U) T@U)
(declare-fun UI.Op.SuccOp_q (T@U) Bool)
(declare-fun UI.Op.start (T@U) T@U)
(declare-fun UI.Op.results (T@U) T@U)
(declare-fun UI.Op.end (T@U) T@U)
(declare-fun |$IsA#UI.Op| (T@U) Bool)
(declare-fun |UI.Op#Equal| (T@U T@U) Bool)
(declare-fun Tclass.UI.__default () T@U)
(declare-fun Tclass.SeqComparison.__default () T@U)
(declare-fun SeqComparison.__default.lte (T@U T@U T@U) Bool)
(declare-fun AsFuelBottom (T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun |SeqComparison.__default.lte#canCall| (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lte#requires| (T@U T@U T@U) Bool)
(declare-fun SeqComparison.__default.lt (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lt#canCall| (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_SeqComparison._default.lte () T@U)
(declare-fun |#Options.Option.None| () T@U)
(declare-fun Options.Option.None_q (T@U) Bool)
(declare-fun Tclass.Options.Option (T@U) T@U)
(declare-fun Tclass.Options.Option_0 (T@U) T@U)
(declare-fun |#Options.Option.Some| (T@U) T@U)
(declare-fun Options.Option.Some_q (T@U) Bool)
(declare-fun Options.Option.value (T@U) T@U)
(declare-fun |$IsA#Options.Option| (T@U) Bool)
(declare-fun |Options.Option#Equal| (T@U T@U) Bool)
(declare-fun Tclass.Options.__default () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun Options.__default.MapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.MapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.MapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Options.__default.FlatMapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.FlatMapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.FlatMapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |#MapSpec.Variables.Variables| (T@U) T@U)
(declare-fun MapSpec.Variables.Variables_q (T@U) Bool)
(declare-fun MapSpec.Variables.view (T@U) T@U)
(declare-fun |$IsA#MapSpec.Variables| (T@U) Bool)
(declare-fun |MapSpec.Variables#Equal| (T@U T@U) Bool)
(declare-fun |#MapSpec.Step.QueryStep| (T@U T@U) T@U)
(declare-fun MapSpec.Step.QueryStep_q (T@U) Bool)
(declare-fun MapSpec.Step.key (T@U) T@U)
(declare-fun MapSpec.Step.result (T@U) T@U)
(declare-fun |#MapSpec.Step.WriteStep| (T@U T@U) T@U)
(declare-fun MapSpec.Step.WriteStep_q (T@U) Bool)
(declare-fun MapSpec.Step.new__value (T@U) T@U)
(declare-fun |#MapSpec.Step.SuccStep| (T@U T@U T@U) T@U)
(declare-fun MapSpec.Step.SuccStep_q (T@U) Bool)
(declare-fun MapSpec.Step.start (T@U) T@U)
(declare-fun MapSpec.Step.results (T@U) T@U)
(declare-fun MapSpec.Step.end (T@U) T@U)
(declare-fun |#MapSpec.Step.StutterStep| () T@U)
(declare-fun MapSpec.Step.StutterStep_q (T@U) Bool)
(declare-fun |$IsA#MapSpec.Step| (T@U) Bool)
(declare-fun |MapSpec.Step#Equal| (T@U T@U) Bool)
(declare-fun Tclass.MapSpec.__default () T@U)
(declare-fun MapSpec.__default.EmptyValue () T@U)
(declare-fun |MapSpec.__default.EmptyValue#requires| () Bool)
(declare-fun |ValueType.__default.DefaultValue#canCall| () Bool)
(declare-fun MapSpec.__default.ViewComplete (T@U) Bool)
(declare-fun |MapSpec.__default.ViewComplete#canCall| (T@U) Bool)
(declare-fun |MapSpec.__default.ViewComplete#requires| (T@U) Bool)
(declare-fun MapSpec.__default.WF (T@U) Bool)
(declare-fun |MapSpec.__default.WF#canCall| (T@U) Bool)
(declare-fun |MapSpec.__default.WF#requires| (T@U) Bool)
(declare-fun MapSpec.__default.InDomain (T@U) Bool)
(declare-fun |MapSpec.__default.InDomain#canCall| (T@U) Bool)
(declare-fun |MapSpec.__default.InDomain#requires| (T@U) Bool)
(declare-fun MapSpec.__default.EmptyMap () T@U)
(declare-fun |MapSpec.__default.EmptyMap#requires| () Bool)
(declare-fun |MapSpec.__default.EmptyValue#canCall| () Bool)
(declare-fun |lambda#26| (T@U) T@U)
(declare-fun |lambda#27| (T@U) T@U)
(declare-fun MapSpec.__default.Init (T@U) Bool)
(declare-fun |MapSpec.__default.Init#canCall| (T@U) Bool)
(declare-fun |MapSpec.__default.Init#requires| (T@U) Bool)
(declare-fun |MapSpec.__default.EmptyMap#canCall| () Bool)
(declare-fun MapSpec.__default.Query (T@U T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Query#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Query#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun MapSpec.__default.LowerBound (T@U T@U) Bool)
(declare-fun |MapSpec.__default.LowerBound#canCall| (T@U T@U) Bool)
(declare-fun |MapSpec.__default.LowerBound#requires| (T@U T@U) Bool)
(declare-fun MapSpec.__default.UpperBound (T@U T@U) Bool)
(declare-fun |MapSpec.__default.UpperBound#canCall| (T@U T@U) Bool)
(declare-fun |MapSpec.__default.UpperBound#requires| (T@U T@U) Bool)
(declare-fun MapSpec.__default.InRange (T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.InRange#canCall| (T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.InRange#requires| (T@U T@U T@U) Bool)
(declare-fun MapSpec.__default.NonEmptyRange (T@U T@U) Bool)
(declare-fun |MapSpec.__default.NonEmptyRange#canCall| (T@U T@U) Bool)
(declare-fun |MapSpec.__default.NonEmptyRange#requires| (T@U T@U) Bool)
(declare-fun MapSpec.__default.Succ (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Succ#canCall| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Succ#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun MapSpec.__default.Write (T@U T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Write#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Write#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun MapSpec.__default.Stutter (T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Stutter#canCall| (T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Stutter#requires| (T@U T@U T@U) Bool)
(declare-fun MapSpec.__default.NextStep (T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.NextStep#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.NextStep#requires| (T@U T@U T@U T@U) Bool)
(declare-fun MapSpec.__default.Next (T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Next#canCall| (T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Next#requires| (T@U T@U T@U) Bool)
(declare-fun MapSpec.__default.Inv (T@U) Bool)
(declare-fun |MapSpec.__default.Inv#canCall| (T@U) Bool)
(declare-fun |MapSpec.__default.Inv#requires| (T@U) Bool)
(declare-fun Tclass.MapRemove_s.__default () T@U)
(declare-fun MapRemove_s.__default.MapRemove1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |MapRemove_s.__default.MapRemove1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |MapRemove_s.__default.MapRemove1#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#30| (T@U T@U T@U) T@U)
(declare-fun |lambda#31| (T@U) T@U)
(declare-fun Tclass.Maps.__default () T@U)
(declare-fun Maps.__default.IMapsTo (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsTo#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsTo#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapsTo (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsTo#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsTo#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapsAgreeOnKey (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsAgreeOnKey#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsAgreeOnKey#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapsAgreeOnKey (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsAgreeOnKey#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsAgreeOnKey#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IsSubIMap (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubIMap#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubIMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IsSubMap (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubMap#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapRemove (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#36| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapRemoveStrong (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemoveStrong#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemoveStrong#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapRemove () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove0 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove1 () T@U)
(declare-fun Maps.__default.MapRemove1 (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove1#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_MapRemove_s._default.MapRemove1 () T@U)
(declare-fun Maps.__default.MapRemove1Strong (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove1Strong#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove1Strong#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun MoreFuel_MapRemove_s._default.MapRemove10 () T@U)
(declare-fun StartFuelAssert_MapRemove_s._default.MapRemove1 () T@U)
(declare-fun MoreFuel_MapRemove_s._default.MapRemove11 () T@U)
(declare-fun MoreFuel_MapRemove_s._default.MapRemove12 () T@U)
(declare-fun Maps.__default.IMapRemove (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRemove#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRemove#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapRemove1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRemove1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRemove1#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |lambda#48| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapIRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapIRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapIRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapDisjointUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapDisjointUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapDisjointUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#63| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapUnionPreferA (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnionPreferA#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnionPreferA#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapUnionPreferB (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnionPreferB#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnionPreferB#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapUnionPreferA () T@U)
(declare-fun Maps.__default.IMapUnionPreferA (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnionPreferA#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnionPreferA#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapUnionPreferB (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnionPreferB#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnionPreferB#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.IMapUnionPreferA () T@U)
(declare-fun Maps.__default.MapDisjointUnion3 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapDisjointUnion3#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapDisjointUnion () T@U)
(declare-fun |Maps.__default.MapDisjointUnion3#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#83| (T@U T@U T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapToImap (T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapToImap#canCall| (T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapToImap#requires| (T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapLookupOption (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapLookupOption#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapLookupOption#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.ImapLookupOption (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.ImapLookupOption#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.ImapLookupOption#requires| (T@U T@U T@U T@U) Bool)
(declare-fun AsyncMapSpec.Variables.Variables_q (T@U) Bool)
(declare-fun AsyncMapSpec.Variables.dict (T@U) T@U)
(declare-fun AsyncMapSpec.Variables.queries (T@U) T@U)
(declare-fun |$IsA#AsyncMapSpec.Variables| (T@U) Bool)
(declare-fun |AsyncMapSpec.Variables#Equal| (T@U T@U) Bool)
(declare-fun |#AsyncMapSpec.Step.QueryBeginStep| (T@U) T@U)
(declare-fun AsyncMapSpec.Step.QueryBeginStep_q (T@U) Bool)
(declare-fun AsyncMapSpec.Step.key (T@U) T@U)
(declare-fun |#AsyncMapSpec.Step.QueryEndStep| (T@U) T@U)
(declare-fun AsyncMapSpec.Step.QueryEndStep_q (T@U) Bool)
(declare-fun AsyncMapSpec.Step.result (T@U) T@U)
(declare-fun |#AsyncMapSpec.Step.QueryStep| (T@U T@U) T@U)
(declare-fun AsyncMapSpec.Step.QueryStep_q (T@U) Bool)
(declare-fun |#AsyncMapSpec.Step.WriteStep| (T@U T@U) T@U)
(declare-fun AsyncMapSpec.Step.WriteStep_q (T@U) Bool)
(declare-fun AsyncMapSpec.Step.new__value (T@U) T@U)
(declare-fun |#AsyncMapSpec.Step.SuccStep| (T@U T@U T@U) T@U)
(declare-fun AsyncMapSpec.Step.SuccStep_q (T@U) Bool)
(declare-fun AsyncMapSpec.Step.start (T@U) T@U)
(declare-fun AsyncMapSpec.Step.results (T@U) T@U)
(declare-fun AsyncMapSpec.Step.end (T@U) T@U)
(declare-fun |#AsyncMapSpec.Step.StutterStep| () T@U)
(declare-fun AsyncMapSpec.Step.StutterStep_q (T@U) Bool)
(declare-fun |$IsA#AsyncMapSpec.Step| (T@U) Bool)
(declare-fun |AsyncMapSpec.Step#Equal| (T@U T@U) Bool)
(declare-fun Tclass.AsyncMapSpec.__default () T@U)
(declare-fun AsyncMapSpec.__default.Init (T@U) Bool)
(declare-fun |AsyncMapSpec.__default.Init#canCall| (T@U) Bool)
(declare-fun |AsyncMapSpec.__default.Init#requires| (T@U) Bool)
(declare-fun AsyncMapSpec.__default.QueryBegin (T@U T@U T@U T@U) Bool)
(declare-fun |AsyncMapSpec.__default.QueryBegin#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |AsyncMapSpec.__default.QueryBegin#requires| (T@U T@U T@U T@U) Bool)
(declare-fun AsyncMapSpec.__default.QueryEnd (T@U T@U T@U T@U) Bool)
(declare-fun |AsyncMapSpec.__default.QueryEnd#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |AsyncMapSpec.__default.QueryEnd#requires| (T@U T@U T@U T@U) Bool)
(declare-fun AsyncMapSpec.__default.Query (T@U T@U T@U T@U T@U) Bool)
(declare-fun |AsyncMapSpec.__default.Query#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |AsyncMapSpec.__default.Query#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun AsyncMapSpec.__default.Write (T@U T@U T@U T@U T@U) Bool)
(declare-fun |AsyncMapSpec.__default.Write#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |AsyncMapSpec.__default.Write#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun AsyncMapSpec.__default.Succ (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |AsyncMapSpec.__default.Succ#canCall| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |AsyncMapSpec.__default.Succ#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun AsyncMapSpec.__default.NextStep (T@U T@U T@U T@U) Bool)
(declare-fun |AsyncMapSpec.__default.NextStep#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |AsyncMapSpec.__default.NextStep#requires| (T@U T@U T@U T@U) Bool)
(declare-fun AsyncMapSpec.__default.Next (T@U T@U T@U) Bool)
(declare-fun |AsyncMapSpec.__default.Next#canCall| (T@U T@U T@U) Bool)
(declare-fun |AsyncMapSpec.__default.Next#requires| (T@U T@U T@U) Bool)
(declare-fun Tclass.SequencesLite.__default () T@U)
(declare-fun SequencesLite.__default.Last (T@U T@U) T@U)
(declare-fun |SequencesLite.__default.Last#canCall| (T@U T@U) Bool)
(declare-fun |SequencesLite.__default.Last#requires| (T@U T@U) Bool)
(declare-fun SequencesLite.__default.DropLast (T@U T@U) T@U)
(declare-fun |SequencesLite.__default.DropLast#canCall| (T@U T@U) Bool)
(declare-fun |SequencesLite.__default.DropLast#requires| (T@U T@U) Bool)
(declare-fun Tclass.Mathematics.__default () T@U)
(declare-fun Mathematics.__default.min (Int Int) Int)
(declare-fun |Mathematics.__default.min#requires| (Int Int) Bool)
(declare-fun Mathematics.__default.max (Int Int) Int)
(declare-fun |Mathematics.__default.max#requires| (Int Int) Bool)
(declare-fun Mathematics.__default.Set (T@U T@U) T@U)
(declare-fun |Mathematics.__default.Set#canCall| (T@U T@U) Bool)
(declare-fun |Mathematics.__default.Set#requires| (T@U T@U) Bool)
(declare-fun |lambda#90| (T@U T@U Int) T@U)
(declare-fun Mathematics.__default.ISet (T@U T@U) T@U)
(declare-fun |Mathematics.__default.ISet#canCall| (T@U T@U) Bool)
(declare-fun |Mathematics.__default.ISet#requires| (T@U T@U) Bool)
(declare-fun Tclass.Sequences.__default () T@U)
(declare-fun Sequences.__default.Last (T@U T@U) T@U)
(declare-fun |Sequences.__default.Last#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Last#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.FirstOpt (T@U T@U) T@U)
(declare-fun |Sequences.__default.FirstOpt#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.FirstOpt#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.DropLast (T@U T@U) T@U)
(declare-fun |Sequences.__default.DropLast#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.DropLast#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Set (T@U T@U) T@U)
(declare-fun |Sequences.__default.Set#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Set#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.ISet (T@U T@U) T@U)
(declare-fun |Sequences.__default.ISet#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.ISet#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.NoDupes (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IndexOf (T@U T@U T@U) Int)
(declare-fun |Sequences.__default.IndexOf#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IndexOf#requires| (T@U T@U T@U) Bool)
(declare-fun |$let#0_i| (T@U T@U T@U) Int)
(declare-fun |$let#0$canCall| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Range (T@U Int) T@U)
(declare-fun |Sequences.__default.Range#canCall| (Int) Bool)
(declare-fun |Sequences.__default.Range#requires| (T@U Int) Bool)
(declare-fun Sequences.__default.Apply (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Apply#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Apply#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.ApplyOpaque (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.ApplyOpaque#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.ApplyOpaque#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Filter (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Filter#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Filter#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldLeft (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldLeft#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldLeft#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldFromRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldFromRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldFromRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.remove (T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.remove#canCall| (T@U T@U Int) Bool)
(declare-fun |Sequences.__default.remove#requires| (T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.RemoveOneValue (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.RemoveOneValue#canCall| (T@U T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.NoDupes () T@U)
(declare-fun |Sequences.__default.RemoveOneValue#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |$let#4_i| (T@U T@U T@U) Int)
(declare-fun |$let#4$canCall| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Sequences._default.NoDupes0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.NoDupes () T@U)
(declare-fun MoreFuel_Sequences._default.NoDupes1 () T@U)
(declare-fun MoreFuel_Sequences._default.NoDupes2 () T@U)
(declare-fun Sequences.__default.insert (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.insert#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.insert#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace1with2 (T@U T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace1with2#canCall| (T@U T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace1with2#requires| (T@U T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace2with1 (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace2with1#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace2with1#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.concat (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concat3 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat3#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat3#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concatSeq (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concatSeq#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.concatSeq#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsPrefix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsSuffix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.SeqIndexIterate (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.SeqIndexIterate#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.SeqIndexIterate#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.SeqIndex (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.SeqIndex#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.SeqIndex#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.SeqIndexIterate () T@U)
(declare-fun Sequences.__default.SeqOfLength (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqOfLength#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqOfLength#requires| (T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.SeqIndexUpdate (T@U T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqIndexUpdate#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqIndexUpdate#requires| (T@U T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.Zip (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Zip#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Zip#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Unzip (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Unzip#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Unzip#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenShape (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FlattenShape#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.FlattenShape#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenLength (T@U T@U) Int)
(declare-fun |Sequences.__default.FlattenLength#canCall| (T@U) Bool)
(declare-fun |Sequences.__default.FlattenLength#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Flatten (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Flatten#canCall| (T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.FlattenLength () T@U)
(declare-fun StartFuel_Sequences._default.FlattenShape () T@U)
(declare-fun |Sequences.__default.Flatten#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenShape0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenShape () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenShape1 () T@U)
(declare-fun Sequences.__default.FlattenIndex (T@U Int Int) Int)
(declare-fun |Sequences.__default.FlattenIndex#canCall| (T@U Int Int) Bool)
(declare-fun |Sequences.__default.FlattenIndex#requires| (T@U Int Int) Bool)
(declare-fun Sequences.__default.UnflattenIndex (T@U T@U Int) T@U)
(declare-fun |Sequences.__default.UnflattenIndex#canCall| (T@U Int) Bool)
(declare-fun |Sequences.__default.UnflattenIndex#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenLength0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenLength () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenLength1 () T@U)
(declare-fun Sequences.__default.seqMax (T@U T@U) Int)
(declare-fun |Sequences.__default.seqMax#canCall| (T@U) Bool)
(declare-fun |Sequences.__default.seqMax#requires| (T@U T@U) Bool)
(declare-fun |Mathematics.__default.max#canCall| (Int Int) Bool)
(declare-fun Sequences.__default.fill (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.fill#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.fill#requires| (T@U T@U Int T@U) Bool)
(declare-fun Tclass.ReferenceType.__default () T@U)
(declare-fun ReferenceType.__default.Root () T@U)
(declare-fun |ReferenceType.__default.Root#requires| () Bool)
(declare-fun ReferenceType.__default.toRef (Int) T@U)
(declare-fun |ReferenceType.__default.toRef#canCall| (Int) Bool)
(declare-fun |ReferenceType.__default.toRef#requires| (Int) Bool)
(declare-fun ReferenceType.__default.toUint64 (T@U) Int)
(declare-fun |ReferenceType.__default.toUint64#canCall| (T@U) Bool)
(declare-fun |ReferenceType.__default.toUint64#requires| (T@U) Bool)
(declare-fun Tclass.LinearMaybe.__default () T@U)
(declare-fun LinearMaybe.__default.has (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.has#canCall| (T@U T@U) Bool)
(declare-fun |#$maybe| (T@U) T@U)
(declare-fun |LinearMaybe.__default.has#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.read (T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.read#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.read#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.peek (T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.peek#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.peek#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.unwrap (T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.unwrap#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.unwrap#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.give (T@U T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.give#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.give#requires| (T@U T@U T@U) Bool)
(declare-fun LinearMaybe.__default.empty (T@U) T@U)
(declare-fun |LinearMaybe.__default.empty#requires| (T@U) Bool)
(declare-fun LinearMaybe.__default.discard (T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.discard#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.discard#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.imagine (T@U Bool T@U) T@U)
(declare-fun |LinearMaybe.__default.imagine#canCall| (T@U Bool T@U) Bool)
(declare-fun |LinearMaybe.__default.imagine#requires| (T@U Bool T@U) Bool)
(declare-fun Tclass.LinearExtern.__default () T@U)
(declare-fun LinearExtern.__default.seq_get (T@U T@U Int) T@U)
(declare-fun |LinearExtern.__default.seq_get#canCall| (T@U T@U Int) Bool)
(declare-fun |LinearExtern.__default.seq_get#requires| (T@U T@U Int) Bool)
(declare-fun LinearExtern.__default.seq_set (T@U T@U Int T@U) T@U)
(declare-fun |LinearExtern.__default.seq_set#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |LinearExtern.__default.seq_set#requires| (T@U T@U Int T@U) Bool)
(declare-fun LinearExtern.__default.seq_length (T@U T@U) Int)
(declare-fun |LinearExtern.__default.seq_length#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.seq_length#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.seq_empty (T@U) T@U)
(declare-fun |LinearExtern.__default.seq_empty#requires| (T@U) Bool)
(declare-fun LinearExtern.__default.seq_alloc (T@U Int T@U) T@U)
(declare-fun |LinearExtern.__default.seq_alloc#canCall| (T@U Int T@U) Bool)
(declare-fun |LinearExtern.__default.seq_alloc#requires| (T@U Int T@U) Bool)
(declare-fun LinearExtern.__default.seq_free (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.seq_free#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.seq_free#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.seq_unleash (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.seq_unleash#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.seq_unleash#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseqs__raw (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.lseqs__raw#canCall| (T@U T@U) Bool)
(declare-fun |#$lseq| (T@U) T@U)
(declare-fun |LinearExtern.__default.lseqs__raw#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseq__has (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.lseq__has#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.lseq__has#requires| (T@U T@U) Bool)
(declare-fun |lambda#102| (T@U) T@U)
(declare-fun |lambda#98| (T@U T@U) T@U)
(declare-fun |lambda#99| (T@U Int Int) T@U)
(declare-fun |lambda#101| (T@U) T@U)
(declare-fun |lambda#100| (Bool) T@U)
(declare-fun LinearExtern.__default.imagine__lseq__raw (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.imagine__lseq__raw#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.imagine__lseq__raw#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseq_length_raw (T@U T@U) Int)
(declare-fun |LinearExtern.__default.lseq_length_raw#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.lseq_length_raw#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseq_alloc_raw (T@U Int) T@U)
(declare-fun |LinearExtern.__default.lseq_alloc_raw#canCall| (T@U Int) Bool)
(declare-fun |LinearExtern.__default.lseq_alloc_raw#requires| (T@U Int) Bool)
(declare-fun LinearExtern.__default.lseq_free_raw (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.lseq_free_raw#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.lseq_free_raw#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseq_swap_raw_fun (T@U T@U Int T@U) T@U)
(declare-fun |LinearExtern.__default.lseq_swap_raw_fun#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |LinearExtern.__default.lseq_swap_raw_fun#requires| (T@U T@U Int T@U) Bool)
(declare-fun LinearExtern.__default.lseq_share_raw (T@U T@U Int) T@U)
(declare-fun |LinearExtern.__default.lseq_share_raw#canCall| (T@U T@U Int) Bool)
(declare-fun |LinearExtern.__default.lseq_share_raw#requires| (T@U T@U Int) Bool)
(declare-fun |#ValueMessage.Delta.NoDelta| () T@U)
(declare-fun ValueMessage.Delta.NoDelta_q (T@U) Bool)
(declare-fun |$IsA#ValueMessage.Delta| (T@U) Bool)
(declare-fun |ValueMessage.Delta#Equal| (T@U T@U) Bool)
(declare-fun Tclass.ValueMessage.__default () T@U)
(declare-fun ValueMessage.__default.NopDelta () T@U)
(declare-fun |ValueMessage.__default.NopDelta#requires| () Bool)
(declare-fun ValueMessage.__default.DefaultValue () T@U)
(declare-fun |ValueMessage.__default.DefaultValue#requires| () Bool)
(declare-fun ValueMessage.__default.CombineDeltas (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.CombineDeltas#canCall| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.CombineDeltas#requires| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.ApplyDelta#requires| (T@U T@U) Bool)
(declare-fun Tclass.ValueMessage.Message () T@U)
(declare-fun ValueMessage.__default.bytestring__to__Message (T@U) T@U)
(declare-fun |ValueMessage.__default.bytestring__to__Message#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.bytestring__to__Message#requires| (T@U) Bool)
(declare-fun |#ValueMessage.Message.Define| (T@U) T@U)
(declare-fun ValueMessage.__default.EncodableMessage (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessage#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessage#requires| (T@U) Bool)
(declare-fun ValueMessage.Message.Define_q (T@U) Bool)
(declare-fun ValueMessage.__default.EncodableMessageSeq (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessageSeq#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessageSeq#requires| (T@U) Bool)
(declare-fun ValueMessage.__default.Message__to__bytestring (T@U) T@U)
(declare-fun |ValueMessage.__default.Message__to__bytestring#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.Message__to__bytestring#requires| (T@U) Bool)
(declare-fun ValueMessage.Message.value (T@U) T@U)
(declare-fun ValueMessage.__default.messageSeq__to__bytestringSeq (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.messageSeq__to__bytestringSeq#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.__default.bytestringSeq__to__MessageSeq (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| (T@U) Bool)
(declare-fun |ValueMessage.Message#Equal| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.__default.Merge (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.Merge#canCall| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.Merge#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.Message.delta (T@U) T@U)
(declare-fun |#ValueMessage.Message.Update| (T@U) T@U)
(declare-fun ValueMessage.__default.IdentityMessage () T@U)
(declare-fun |ValueMessage.__default.IdentityMessage#requires| () Bool)
(declare-fun |ValueMessage.__default.NopDelta#canCall| () Bool)
(declare-fun ValueMessage.__default.DefineDefault () T@U)
(declare-fun |ValueMessage.__default.DefineDefault#requires| () Bool)
(declare-fun |ValueMessage.__default.DefaultValue#canCall| () Bool)
(declare-fun ValueMessage.Message.Update_q (T@U) Bool)
(declare-fun |$IsA#ValueMessage.Message| (T@U) Bool)
(declare-fun |#BetreeGraph.Node.Node| (T@U T@U) T@U)
(declare-fun BetreeGraph.Node.Node_q (T@U) Bool)
(declare-fun BetreeGraph.Node.children (T@U) T@U)
(declare-fun BetreeGraph.Node.buffer (T@U) T@U)
(declare-fun |$IsA#BetreeGraph.Node| (T@U) Bool)
(declare-fun |BetreeGraph.Node#Equal| (T@U T@U) Bool)
(declare-fun Tclass.BetreeGraph.__default () T@U)
(declare-fun BetreeGraph.__default.Successors (T@U) T@U)
(declare-fun |BetreeGraph.__default.Successors#canCall| (T@U) Bool)
(declare-fun |BetreeGraph.__default.Successors#requires| (T@U) Bool)
(declare-fun |lambda#108| (T@U T@U T@U T@U T@U) T@U)
(declare-fun BetreeGraph.__default.Root () T@U)
(declare-fun |BetreeGraph.__default.Root#requires| () Bool)
(declare-fun |ReferenceType.__default.Root#canCall| () Bool)
(declare-fun BetreeGraph.__default.IsClosed (T@U) Bool)
(declare-fun |BetreeGraph.__default.IsClosed#canCall| (T@U) Bool)
(declare-fun |BetreeGraph.__default.IsClosed#requires| (T@U) Bool)
(declare-fun BetreeGraph.__default.IsPath (T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.IsPath#canCall| (T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.IsPath#requires| (T@U T@U) Bool)
(declare-fun BetreeGraph.__default.IsCycle (T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.IsCycle#canCall| (T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.IsCycle#requires| (T@U T@U) Bool)
(declare-fun BetreeGraph.__default.IsSimple (T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.IsSimple#canCall| (T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.IsSimple#requires| (T@U T@U) Bool)
(declare-fun BetreeGraph.__default.IsAcyclic (T@U) Bool)
(declare-fun |BetreeGraph.__default.IsAcyclic#canCall| (T@U) Bool)
(declare-fun |BetreeGraph.__default.IsAcyclic#requires| (T@U) Bool)
(declare-fun BetreeGraph.__default.IsPathFromTo (T@U T@U T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.IsPathFromTo#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.IsPathFromTo#requires| (T@U T@U T@U T@U) Bool)
(declare-fun BetreeGraph.__default.ReachableReferences (T@U T@U) T@U)
(declare-fun |BetreeGraph.__default.ReachableReferences#canCall| (T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.ReachableReferences#requires| (T@U T@U) Bool)
(declare-fun |lambda#110| (T@U T@U Int Int T@U T@U T@U Int T@U) T@U)
(declare-fun BetreeGraph.__default.NewPath (T@U T@U T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.NewPath#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.NewPath#requires| (T@U T@U T@U T@U) Bool)
(declare-fun BetreeGraph.__default.NewlyReachableReferences (T@U T@U T@U) T@U)
(declare-fun |BetreeGraph.__default.NewlyReachableReferences#canCall| (T@U T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.NewlyReachableReferences#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#112| (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun BetreeGraph.__default.EditIsLocal (T@U T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.EditIsLocal#canCall| (T@U T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.EditIsLocal#requires| (T@U T@U T@U) Bool)
(declare-fun BetreeGraph.__default.NewNodesAreCycleFree (T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.NewNodesAreCycleFree#canCall| (T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.NewNodesAreCycleFree#requires| (T@U T@U) Bool)
(declare-fun BetreeGraph.__default.FirstInGraph (T@U T@U T@U) Int)
(declare-fun |BetreeGraph.__default.FirstInGraph#canCall| (T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.FirstInGraph#requires| (T@U T@U T@U) Bool)
(declare-fun BetreeGraph.__default.UndoLocalEdit (T@U T@U T@U T@U T@U) T@U)
(declare-fun |BetreeGraph.__default.UndoLocalEdit#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.UndoLocalEdit#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |$let#8_replacement| (T@U T@U T@U) T@U)
(declare-fun |$let#8$canCall| (T@U T@U T@U) Bool)
(declare-fun |#BetreeGraph.Op.AllocOp| (T@U T@U) T@U)
(declare-fun BetreeGraph.Op.AllocOp_q (T@U) Bool)
(declare-fun Tclass.BetreeGraph.Op () T@U)
(declare-fun BetreeGraph.Op.ref (T@U) T@U)
(declare-fun BetreeGraph.Op.node (T@U) T@U)
(declare-fun |#BetreeGraph.Op.WriteOp| (T@U T@U) T@U)
(declare-fun BetreeGraph.Op.WriteOp_q (T@U) Bool)
(declare-fun |$IsA#BetreeGraph.Op| (T@U) Bool)
(declare-fun |BetreeGraph.Op#Equal| (T@U T@U) Bool)
(declare-fun |#BetreeGraph.ReadOp.ReadOp| (T@U T@U) T@U)
(declare-fun BetreeGraph.ReadOp.ReadOp_q (T@U) Bool)
(declare-fun BetreeGraph.ReadOp.ref (T@U) T@U)
(declare-fun BetreeGraph.ReadOp.node (T@U) T@U)
(declare-fun |$IsA#BetreeGraph.ReadOp| (T@U) Bool)
(declare-fun |BetreeGraph.ReadOp#Equal| (T@U T@U) Bool)
(declare-fun Tclass.Sets.__default () T@U)
(declare-fun Sets.__default.SetRange (Int) T@U)
(declare-fun |Sets.__default.SetRange#requires| (Int) Bool)
(declare-fun |lambda#114| (T@U Int Int) T@U)
(declare-fun Tclass.NativeArrays.__default () T@U)
(declare-fun Tclass.Byte__Order.__default () T@U)
(declare-fun Byte__Order.__default.SomeElement () Int)
(declare-fun |Byte__Order.__default.SomeElement#requires| () Bool)
(declare-fun Byte__Order.__default.lte (T@U Int Int) Bool)
(declare-fun |Byte__Order.__default.lte#canCall| (Int Int) Bool)
(declare-fun Byte__Order.__default.ltedef (T@U Int Int) Bool)
(declare-fun StartFuel_Byte_Order._default.ltedef () T@U)
(declare-fun |Byte__Order.__default.lte#requires| (T@U Int Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.ltedef0 () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.ltedef () T@U)
(declare-fun MoreFuel_Byte_Order._default.ltedef1 () T@U)
(declare-fun |Byte__Order.__default.ltedef#canCall| (Int Int) Bool)
(declare-fun |Byte__Order.__default.ltedef#requires| (T@U Int Int) Bool)
(declare-fun Byte__Order.__default.LargestLte (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.LargestLte#canCall| (T@U Int) Bool)
(declare-fun Byte__Order.__default.IsSorted (T@U T@U) Bool)
(declare-fun StartFuel_Byte_Order._default.IsSorted () T@U)
(declare-fun StartFuel_Byte_Order._default.lte () T@U)
(declare-fun Byte__Order.__default.lt (Int Int) Bool)
(declare-fun |Byte__Order.__default.LargestLte#requires| (T@U T@U Int) Bool)
(declare-fun |Byte__Order.__default.lt#canCall| (Int Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.IsSorted0 () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.IsSorted () T@U)
(declare-fun MoreFuel_Byte_Order._default.IsSorted1 () T@U)
(declare-fun Byte__Order.__default.LargestLt (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.LargestLt#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.LargestLt#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.IsSorted2 () T@U)
(declare-fun MoreFuel_Byte_Order._default.IsSorted3 () T@U)
(declare-fun Byte__Order.__default.IndexOfFirstGte (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.IndexOfFirstGte#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.IndexOfFirstGte#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.IsSorted4 () T@U)
(declare-fun MoreFuel_Byte_Order._default.IsSorted5 () T@U)
(declare-fun Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter (T@U T@U Int Int Int) Int)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (T@U Int Int Int) Bool)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| (T@U T@U Int Int Int) Bool)
(declare-fun Byte__Order.__default.binarySearchIndexOfFirstKeyGte (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| (T@U T@U Int) Bool)
(declare-fun Byte__Order.__default.IndexOfFirstGt (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.IndexOfFirstGt#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.IndexOfFirstGt#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.IsSorted6 () T@U)
(declare-fun MoreFuel_Byte_Order._default.IsSorted7 () T@U)
(declare-fun Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter (T@U T@U Int Int Int) Int)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (T@U Int Int Int) Bool)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| (T@U T@U Int Int Int) Bool)
(declare-fun Byte__Order.__default.binarySearchIndexOfFirstKeyGt (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| (T@U T@U Int) Bool)
(declare-fun Byte__Order.__default.SetAllLte (T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SetAllLte#canCall| (T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SetAllLte#requires| (T@U T@U) Bool)
(declare-fun Byte__Order.__default.SetAllLt (T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SetAllLt#canCall| (T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SetAllLt#requires| (T@U T@U) Bool)
(declare-fun Byte__Order.__default.NotMinimum (T@U Int) Bool)
(declare-fun |Byte__Order.__default.NotMinimum#canCall| (Int) Bool)
(declare-fun |Byte__Order.__default.NotMinimum#requires| (T@U Int) Bool)
(declare-fun Byte__Order.__default.MapPivotedUnion (T@U T@U Int T@U) T@U)
(declare-fun |Byte__Order.__default.MapPivotedUnion#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |Byte__Order.__default.MapPivotedUnion#requires| (T@U T@U Int T@U) Bool)
(declare-fun |lambda#116| (T@U Int) T@U)
(declare-fun |lambda#118| (T@U T@U Int) T@U)
(declare-fun Byte__Order.__default.SetSuccessor (T@U Int) T@U)
(declare-fun |Byte__Order.__default.SetSuccessor#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.SetSuccessor#requires| (T@U Int) Bool)
(declare-fun |$let#12_next| (T@U Int) Int)
(declare-fun |$let#12$canCall| (T@U Int) Bool)
(declare-fun Byte__Order.__default.MapSuccessor (T@U T@U Int) T@U)
(declare-fun |Byte__Order.__default.MapSuccessor#canCall| (T@U T@U Int) Bool)
(declare-fun |Byte__Order.__default.MapSuccessor#requires| (T@U T@U Int) Bool)
(declare-fun Byte__Order.__default.SeqSuccessor (T@U Int) T@U)
(declare-fun |Byte__Order.__default.SeqSuccessor#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.SeqSuccessor#requires| (T@U Int) Bool)
(declare-fun |lambda#128| (T@U T@U) T@U)
(declare-fun Byte__Order.__default.SortedSeqForMap (T@U T@U T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SortedSeqForMap#canCall| (T@U T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SortedSeqForMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.Unzip () T@U)
(declare-fun |Byte__Order.__default.IsStrictlySorted#canCall| (T@U) Bool)
(declare-fun Byte__Order.__default.IsStrictlySorted (T@U T@U) Bool)
(declare-fun StartFuel_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun Byte__Order.__default.minimum (T@U T@U) Int)
(declare-fun |Byte__Order.__default.minimum#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.minimum#requires| (T@U T@U) Bool)
(declare-fun |$let#15_a| (T@U) Int)
(declare-fun |$let#15$canCall| (T@U) Bool)
(declare-fun Byte__Order.__default.minimumOpt (T@U T@U) T@U)
(declare-fun |Byte__Order.__default.minimumOpt#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.minimumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Byte_Order._default.minimum () T@U)
(declare-fun Byte__Order.__default.maximum (T@U T@U) Int)
(declare-fun |Byte__Order.__default.maximum#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.maximum#requires| (T@U T@U) Bool)
(declare-fun |$let#18_a| (T@U) Int)
(declare-fun |$let#18$canCall| (T@U) Bool)
(declare-fun Byte__Order.__default.maximumOpt (T@U T@U) T@U)
(declare-fun |Byte__Order.__default.maximumOpt#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.maximumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Byte_Order._default.maximum () T@U)
(declare-fun |Byte__Order.__default.lt#requires| (Int Int) Bool)
(declare-fun Byte__Order.__default.Min (Int Int) Int)
(declare-fun |Byte__Order.__default.Min#canCall| (Int Int) Bool)
(declare-fun |Byte__Order.__default.Min#requires| (Int Int) Bool)
(declare-fun Byte__Order.__default.Max (Int Int) Int)
(declare-fun |Byte__Order.__default.Max#canCall| (Int Int) Bool)
(declare-fun |Byte__Order.__default.Max#requires| (Int Int) Bool)
(declare-fun |Byte__Order.__default.IsSorted#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.IsSorted#requires| (T@U T@U) Bool)
(declare-fun Byte__Order.__default.IsStrictlySortedInternal (T@U) Bool)
(declare-fun |Byte__Order.__default.IsStrictlySortedInternal#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.IsStrictlySortedInternal#requires| (T@U) Bool)
(declare-fun |Byte__Order.__default.IsStrictlySorted#requires| (T@U T@U) Bool)
(declare-fun Byte__Order.__default.BiggestInSet (Int T@U) Bool)
(declare-fun |Byte__Order.__default.BiggestInSet#canCall| (Int T@U) Bool)
(declare-fun |Byte__Order.__default.BiggestInSet#requires| (Int T@U) Bool)
(declare-fun Byte__Order.__default.SortSet (T@U T@U) T@U)
(declare-fun |Byte__Order.__default.SortSet#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.SortSet#requires| (T@U T@U) Bool)
(declare-fun |$let#21_e| (T@U) Int)
(declare-fun |$let#21$canCall| (T@U) Bool)
(declare-fun MoreFuel_Byte_Order._default.IsSorted8 () T@U)
(declare-fun MoreFuel_Byte_Order._default.IsSorted9 () T@U)
(declare-fun Tclass.Lexicographic__Byte__Order.__default () T@U)
(declare-fun Lexicographic__Byte__Order.__default.SomeElement () T@U)
(declare-fun |Lexicographic__Byte__Order.__default.SomeElement#requires| () Bool)
(declare-fun Lexicographic__Byte__Order.__default.lte (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.lte#canCall| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.ltedef (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.lte#requires| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.ltedef#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.ltedef#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.LargestLte (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.LargestLte#canCall| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.IsSorted (T@U T@U) Bool)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.IsSorted () T@U)
(declare-fun Lexicographic__Byte__Order.__default.lt (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.LargestLte#requires| (T@U T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.lt#canCall| (T@U T@U) Bool)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted0 () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted () T@U)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted1 () T@U)
(declare-fun Lexicographic__Byte__Order.__default.LargestLt (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.LargestLt#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.LargestLt#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted2 () T@U)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted3 () T@U)
(declare-fun Lexicographic__Byte__Order.__default.IndexOfFirstGte (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IndexOfFirstGte#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted4 () T@U)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted5 () T@U)
(declare-fun Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter (T@U T@U T@U Int Int) Int)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (T@U T@U Int Int) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| (T@U T@U T@U Int Int) Bool)
(declare-fun Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| (T@U T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.IndexOfFirstGt (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IndexOfFirstGt#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted6 () T@U)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted7 () T@U)
(declare-fun Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter (T@U T@U T@U Int Int) Int)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (T@U T@U Int Int) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| (T@U T@U T@U Int Int) Bool)
(declare-fun Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| (T@U T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.SetAllLte (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SetAllLte#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SetAllLte#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.SetAllLt (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SetAllLt#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SetAllLt#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.NotMinimum (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.NotMinimum#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.NotMinimum#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.MapPivotedUnion (T@U T@U T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.MapPivotedUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.MapPivotedUnion#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |lambda#132| (T@U T@U) T@U)
(declare-fun |lambda#134| (T@U T@U) T@U)
(declare-fun Lexicographic__Byte__Order.__default.SetSuccessor (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SetSuccessor#requires| (T@U T@U) Bool)
(declare-fun |$let#24_next| (T@U T@U) T@U)
(declare-fun |$let#24$canCall| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.MapSuccessor (T@U T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.MapSuccessor#canCall| (T@U T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.MapSuccessor#requires| (T@U T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.SeqSuccessor (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.SeqSuccessor#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SeqSuccessor#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.SortedSeqForMap (T@U T@U T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SortedSeqForMap#canCall| (T@U T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SortedSeqForMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.IsStrictlySorted (T@U T@U) Bool)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun Lexicographic__Byte__Order.__default.minimum (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.minimum#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.minimum#requires| (T@U T@U) Bool)
(declare-fun |$let#27_a| (T@U) T@U)
(declare-fun |$let#27$canCall| (T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.minimumOpt (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.minimumOpt#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.minimumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.minimum () T@U)
(declare-fun Lexicographic__Byte__Order.__default.maximum (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.maximum#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.maximum#requires| (T@U T@U) Bool)
(declare-fun |$let#30_a| (T@U) T@U)
(declare-fun |$let#30$canCall| (T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.maximumOpt (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.maximumOpt#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.maximumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.maximum () T@U)
(declare-fun |Lexicographic__Byte__Order.__default.lt#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.Min (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.Min#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.Min#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.Max (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.Max#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.Max#requires| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsSorted#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsSorted#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#requires| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsStrictlySorted#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.BiggestInSet (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.BiggestInSet#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.BiggestInSet#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.SortSet (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.SortSet#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SortSet#requires| (T@U T@U) Bool)
(declare-fun |$let#33_e| (T@U) T@U)
(declare-fun |$let#33$canCall| (T@U) Bool)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted8 () T@U)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted9 () T@U)
(declare-fun |#BetreeSpec.LookupQuery.LookupQuery| (T@U T@U T@U) T@U)
(declare-fun BetreeSpec.LookupQuery.LookupQuery_q (T@U) Bool)
(declare-fun BetreeSpec.LookupQuery.key (T@U) T@U)
(declare-fun BetreeSpec.LookupQuery.value (T@U) T@U)
(declare-fun BetreeSpec.LookupQuery.lookup (T@U) T@U)
(declare-fun |$IsA#BetreeSpec.LookupQuery| (T@U) Bool)
(declare-fun |BetreeSpec.LookupQuery#Equal| (T@U T@U) Bool)
(declare-fun |#BetreeSpec.SuccQuery.SuccQuery| (T@U T@U T@U T@U) T@U)
(declare-fun BetreeSpec.SuccQuery.SuccQuery_q (T@U) Bool)
(declare-fun BetreeSpec.SuccQuery.start (T@U) T@U)
(declare-fun BetreeSpec.SuccQuery.results (T@U) T@U)
(declare-fun BetreeSpec.SuccQuery.end (T@U) T@U)
(declare-fun BetreeSpec.SuccQuery.lookup (T@U) T@U)
(declare-fun |$IsA#BetreeSpec.SuccQuery| (T@U) Bool)
(declare-fun |BetreeSpec.SuccQuery#Equal| (T@U T@U) Bool)
(declare-fun |#BetreeSpec.MessageInsertion.MessageInsertion| (T@U T@U T@U) T@U)
(declare-fun BetreeSpec.MessageInsertion.MessageInsertion_q (T@U) Bool)
(declare-fun BetreeSpec.MessageInsertion.key (T@U) T@U)
(declare-fun BetreeSpec.MessageInsertion.msg (T@U) T@U)
(declare-fun BetreeSpec.MessageInsertion.oldroot (T@U) T@U)
(declare-fun |$IsA#BetreeSpec.MessageInsertion| (T@U) Bool)
(declare-fun |BetreeSpec.MessageInsertion#Equal| (T@U T@U) Bool)
(declare-fun |#BetreeSpec.NodeFlush.NodeFlush| (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun BetreeSpec.NodeFlush.NodeFlush_q (T@U) Bool)
(declare-fun BetreeSpec.NodeFlush.parentref (T@U) T@U)
(declare-fun BetreeSpec.NodeFlush.parent (T@U) T@U)
(declare-fun BetreeSpec.NodeFlush.newparent (T@U) T@U)
(declare-fun BetreeSpec.NodeFlush.childref (T@U) T@U)
(declare-fun BetreeSpec.NodeFlush.child (T@U) T@U)
(declare-fun BetreeSpec.NodeFlush.newchildref (T@U) T@U)
(declare-fun BetreeSpec.NodeFlush.newchild (T@U) T@U)
(declare-fun BetreeSpec.NodeFlush.movedKeys (T@U) T@U)
(declare-fun BetreeSpec.NodeFlush.flushedKeys (T@U) T@U)
(declare-fun |$IsA#BetreeSpec.NodeFlush| (T@U) Bool)
(declare-fun |BetreeSpec.NodeFlush#Equal| (T@U T@U) Bool)
(declare-fun |#BetreeSpec.RootGrowth.RootGrowth| (T@U T@U) T@U)
(declare-fun BetreeSpec.RootGrowth.RootGrowth_q (T@U) Bool)
(declare-fun BetreeSpec.RootGrowth.oldroot (T@U) T@U)
(declare-fun BetreeSpec.RootGrowth.newchildref (T@U) T@U)
(declare-fun |$IsA#BetreeSpec.RootGrowth| (T@U) Bool)
(declare-fun |BetreeSpec.RootGrowth#Equal| (T@U T@U) Bool)
(declare-fun |#BetreeSpec.Redirect.Redirect| (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun BetreeSpec.Redirect.Redirect_q (T@U) Bool)
(declare-fun BetreeSpec.Redirect.parentref (T@U) T@U)
(declare-fun BetreeSpec.Redirect.old__parent (T@U) T@U)
(declare-fun BetreeSpec.Redirect.old__childrefs (T@U) T@U)
(declare-fun BetreeSpec.Redirect.old__children (T@U) T@U)
(declare-fun BetreeSpec.Redirect.new__parent (T@U) T@U)
(declare-fun BetreeSpec.Redirect.new__childrefs (T@U) T@U)
(declare-fun BetreeSpec.Redirect.new__children (T@U) T@U)
(declare-fun BetreeSpec.Redirect.keys (T@U) T@U)
(declare-fun |$IsA#BetreeSpec.Redirect| (T@U) Bool)
(declare-fun |BetreeSpec.Redirect#Equal| (T@U T@U) Bool)
(declare-fun |#BetreeSpec.BetreeStep.BetreeQuery| (T@U) T@U)
(declare-fun BetreeSpec.BetreeStep.BetreeQuery_q (T@U) Bool)
(declare-fun BetreeSpec.BetreeStep.q (T@U) T@U)
(declare-fun |#BetreeSpec.BetreeStep.BetreeSuccQuery| (T@U) T@U)
(declare-fun BetreeSpec.BetreeStep.BetreeSuccQuery_q (T@U) Bool)
(declare-fun BetreeSpec.BetreeStep.sq (T@U) T@U)
(declare-fun |#BetreeSpec.BetreeStep.BetreeInsert| (T@U) T@U)
(declare-fun BetreeSpec.BetreeStep.BetreeInsert_q (T@U) Bool)
(declare-fun BetreeSpec.BetreeStep.ins (T@U) T@U)
(declare-fun |#BetreeSpec.BetreeStep.BetreeFlush| (T@U) T@U)
(declare-fun BetreeSpec.BetreeStep.BetreeFlush_q (T@U) Bool)
(declare-fun BetreeSpec.BetreeStep.flush (T@U) T@U)
(declare-fun |#BetreeSpec.BetreeStep.BetreeGrow| (T@U) T@U)
(declare-fun BetreeSpec.BetreeStep.BetreeGrow_q (T@U) Bool)
(declare-fun BetreeSpec.BetreeStep.growth (T@U) T@U)
(declare-fun |#BetreeSpec.BetreeStep.BetreeRedirect| (T@U) T@U)
(declare-fun BetreeSpec.BetreeStep.BetreeRedirect_q (T@U) Bool)
(declare-fun BetreeSpec.BetreeStep.redirect (T@U) T@U)
(declare-fun |$IsA#BetreeSpec.BetreeStep| (T@U) Bool)
(declare-fun |BetreeSpec.BetreeStep#Equal| (T@U T@U) Bool)
(declare-fun Tclass.BetreeSpec.__default () T@U)
(declare-fun BetreeSpec.__default.BufferIsDefining (T@U) Bool)
(declare-fun |BetreeSpec.__default.BufferIsDefining#canCall| (T@U) Bool)
(declare-fun |BetreeSpec.__default.BufferIsDefining#requires| (T@U) Bool)
(declare-fun BetreeSpec.__default.BufferDefinesValue (T@U T@U) Bool)
(declare-fun |BetreeSpec.__default.BufferDefinesValue#canCall| (T@U T@U) Bool)
(declare-fun |BetreeSpec.__default.BufferDefinesValue#requires| (T@U T@U) Bool)
(declare-fun BetreeSpec.__default.WFNode (T@U) Bool)
(declare-fun |BetreeSpec.__default.WFNode#canCall| (T@U) Bool)
(declare-fun |BetreeSpec.__default.WFNode#requires| (T@U) Bool)
(declare-fun BetreeSpec.__default.ValidLayerIndex (T@U Int) Bool)
(declare-fun |BetreeSpec.__default.ValidLayerIndex#canCall| (T@U Int) Bool)
(declare-fun |BetreeSpec.__default.ValidLayerIndex#requires| (T@U Int) Bool)
(declare-fun BetreeSpec.__default.LookupVisitsWFNodes (T@U) Bool)
(declare-fun |BetreeSpec.__default.LookupVisitsWFNodes#canCall| (T@U) Bool)
(declare-fun |BetreeSpec.__default.LookupVisitsWFNodes#requires| (T@U) Bool)
(declare-fun BetreeSpec.__default.LookupFollowsChildRefAtLayer (T@U T@U Int) Bool)
(declare-fun |BetreeSpec.__default.LookupFollowsChildRefAtLayer#canCall| (T@U T@U Int) Bool)
(declare-fun |BetreeSpec.__default.LookupFollowsChildRefAtLayer#requires| (T@U T@U Int) Bool)
(declare-fun BetreeSpec.__default.LookupFollowsChildRefs (T@U T@U) Bool)
(declare-fun |BetreeSpec.__default.LookupFollowsChildRefs#canCall| (T@U T@U) Bool)
(declare-fun |BetreeSpec.__default.LookupFollowsChildRefs#requires| (T@U T@U) Bool)
(declare-fun BetreeSpec.__default.WFLookupForKey (T@U T@U) Bool)
(declare-fun |BetreeSpec.__default.WFLookupForKey#canCall| (T@U T@U) Bool)
(declare-fun |BetreeSpec.__default.WFLookupForKey#requires| (T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.Root#canCall| () Bool)
(declare-fun BetreeSpec.__default.InterpretLookup (T@U T@U T@U) T@U)
(declare-fun |BetreeSpec.__default.InterpretLookup#canCall| (T@U T@U) Bool)
(declare-fun |BetreeSpec.__default.InterpretLookup#requires| (T@U T@U T@U) Bool)
(declare-fun BetreeSpec.__default.ValidQuery (T@U) Bool)
(declare-fun |BetreeSpec.__default.ValidQuery#canCall| (T@U) Bool)
(declare-fun |BetreeSpec.__default.ValidQuery#requires| (T@U) Bool)
(declare-fun BetreeSpec.__default.QueryReads (T@U) T@U)
(declare-fun |BetreeSpec.__default.QueryReads#canCall| (T@U) Bool)
(declare-fun |BetreeSpec.__default.QueryReads#requires| (T@U) Bool)
(declare-fun BetreeSpec.__default.QueryOps (T@U) T@U)
(declare-fun |BetreeSpec.__default.QueryOps#canCall| (T@U) Bool)
(declare-fun |BetreeSpec.__default.QueryOps#requires| (T@U) Bool)
(declare-fun BetreeSpec.__default.LookupKeyValue (T@U T@U T@U) Bool)
(declare-fun |BetreeSpec.__default.LookupKeyValue#canCall| (T@U T@U T@U) Bool)
(declare-fun |BetreeSpec.__default.LookupKeyValue#requires| (T@U T@U T@U) Bool)
(declare-fun BetreeSpec.__default.ValidSuccQuery (T@U) Bool)
(declare-fun |BetreeSpec.__default.ValidSuccQuery#canCall| (T@U) Bool)
(declare-fun |BetreeSpec.__default.ValidSuccQuery#requires| (T@U) Bool)
(declare-fun BetreeSpec.__default.SuccQueryReads (T@U) T@U)
(declare-fun |BetreeSpec.__default.SuccQueryReads#canCall| (T@U) Bool)
(declare-fun |BetreeSpec.__default.SuccQueryReads#requires| (T@U) Bool)
(declare-fun BetreeSpec.__default.SuccQueryOps (T@U) T@U)
(declare-fun |BetreeSpec.__default.SuccQueryOps#canCall| (T@U) Bool)
(declare-fun |BetreeSpec.__default.SuccQueryOps#requires| (T@U) Bool)
(declare-fun BetreeSpec.__default.AddMessageToBuffer (T@U T@U T@U) T@U)
(declare-fun |BetreeSpec.__default.AddMessageToBuffer#canCall| (T@U T@U T@U) Bool)
(declare-fun |BetreeSpec.__default.AddMessageToBuffer#requires| (T@U T@U T@U) Bool)
(declare-fun BetreeSpec.__default.AddMessageToNode (T@U T@U T@U) T@U)
(declare-fun |BetreeSpec.__default.AddMessageToNode#canCall| (T@U T@U T@U) Bool)
(declare-fun |BetreeSpec.__default.AddMessageToNode#requires| (T@U T@U T@U) Bool)
(declare-fun BetreeSpec.__default.ValidInsertion (T@U) Bool)
(declare-fun |BetreeSpec.__default.ValidInsertion#canCall| (T@U) Bool)
(declare-fun |BetreeSpec.__default.ValidInsertion#requires| (T@U) Bool)
(declare-fun BetreeSpec.__default.InsertionReads (T@U) T@U)
(declare-fun |BetreeSpec.__default.InsertionReads#canCall| (T@U) Bool)
(declare-fun |BetreeSpec.__default.InsertionReads#requires| (T@U) Bool)
(declare-fun BetreeSpec.__default.InsertionOps (T@U) T@U)
(declare-fun |BetreeSpec.__default.InsertionOps#canCall| (T@U) Bool)
(declare-fun |BetreeSpec.__default.InsertionOps#requires| (T@U) Bool)
(declare-fun BetreeSpec.__default.ValidFlush (T@U) Bool)
(declare-fun |BetreeSpec.__default.ValidFlush#canCall| (T@U) Bool)
(declare-fun |BetreeSpec.__default.ValidFlush#requires| (T@U) Bool)
(declare-fun |lambda#149| (T@U T@U T@U) T@U)
(declare-fun |ValueMessage.__default.IdentityMessage#canCall| () Bool)
(declare-fun |lambda#150| (T@U Bool) T@U)
(declare-fun |lambda#151| (T@U T@U T@U) T@U)
(declare-fun |lambda#157| (T@U T@U T@U T@U) T@U)
(declare-fun BetreeSpec.__default.FlushReads (T@U) T@U)
(declare-fun |BetreeSpec.__default.FlushReads#canCall| (T@U) Bool)
(declare-fun |BetreeSpec.__default.FlushReads#requires| (T@U) Bool)
(declare-fun BetreeSpec.__default.FlushOps (T@U) T@U)
(declare-fun |BetreeSpec.__default.FlushOps#canCall| (T@U) Bool)
(declare-fun |BetreeSpec.__default.FlushOps#requires| (T@U) Bool)
(declare-fun BetreeSpec.__default.ValidGrow (T@U) Bool)
(declare-fun |BetreeSpec.__default.ValidGrow#canCall| (T@U) Bool)
(declare-fun |BetreeSpec.__default.ValidGrow#requires| (T@U) Bool)
(declare-fun BetreeSpec.__default.GrowReads (T@U) T@U)
(declare-fun |BetreeSpec.__default.GrowReads#canCall| (T@U) Bool)
(declare-fun |BetreeSpec.__default.GrowReads#requires| (T@U) Bool)
(declare-fun BetreeSpec.__default.GrowOps (T@U) T@U)
(declare-fun |BetreeSpec.__default.GrowOps#canCall| (T@U) Bool)
(declare-fun |BetreeSpec.__default.GrowOps#requires| (T@U) Bool)
(declare-fun BetreeSpec.__default.RedirectRefInOldChildren (T@U T@U) Bool)
(declare-fun |BetreeSpec.__default.RedirectRefInOldChildren#canCall| (T@U T@U) Bool)
(declare-fun |BetreeSpec.__default.RedirectRefInOldChildren#requires| (T@U T@U) Bool)
(declare-fun BetreeSpec.__default.RedirectChildChildInOld (T@U T@U T@U) Bool)
(declare-fun |BetreeSpec.__default.RedirectChildChildInOld#canCall| (T@U T@U T@U) Bool)
(declare-fun |BetreeSpec.__default.RedirectChildChildInOld#requires| (T@U T@U T@U) Bool)
(declare-fun BetreeSpec.__default.ValidRedirect (T@U) Bool)
(declare-fun |BetreeSpec.__default.ValidRedirect#canCall| (T@U) Bool)
(declare-fun |BetreeSpec.__default.ValidRedirect#requires| (T@U) Bool)
(declare-fun BetreeSpec.__default.RedirectChildReads (T@U T@U T@U) T@U)
(declare-fun |BetreeSpec.__default.RedirectChildReads#canCall| (T@U T@U) Bool)
(declare-fun |BetreeSpec.__default.RedirectChildReads#requires| (T@U T@U T@U) Bool)
(declare-fun BetreeSpec.__default.RedirectReads (T@U T@U) T@U)
(declare-fun |BetreeSpec.__default.RedirectReads#canCall| (T@U) Bool)
(declare-fun |BetreeSpec.__default.RedirectReads#requires| (T@U T@U) Bool)
(declare-fun BetreeSpec.__default.RedirectChildAllocs (T@U T@U T@U) T@U)
(declare-fun |BetreeSpec.__default.RedirectChildAllocs#canCall| (T@U T@U) Bool)
(declare-fun |BetreeSpec.__default.RedirectChildAllocs#requires| (T@U T@U T@U) Bool)
(declare-fun BetreeSpec.__default.RedirectOps (T@U T@U) T@U)
(declare-fun |BetreeSpec.__default.RedirectOps#canCall| (T@U) Bool)
(declare-fun |BetreeSpec.__default.RedirectOps#requires| (T@U T@U) Bool)
(declare-fun BetreeSpec.__default.ValidBetreeStep (T@U) Bool)
(declare-fun |BetreeSpec.__default.ValidBetreeStep#canCall| (T@U) Bool)
(declare-fun |BetreeSpec.__default.ValidBetreeStep#requires| (T@U) Bool)
(declare-fun BetreeSpec.__default.BetreeStepReads (T@U) T@U)
(declare-fun |BetreeSpec.__default.BetreeStepReads#canCall| (T@U) Bool)
(declare-fun |BetreeSpec.__default.BetreeStepReads#requires| (T@U) Bool)
(declare-fun StartFuel_BetreeSpec._default.RedirectReads () T@U)
(declare-fun BetreeSpec.__default.BetreeStepOps (T@U) T@U)
(declare-fun |BetreeSpec.__default.BetreeStepOps#canCall| (T@U) Bool)
(declare-fun |BetreeSpec.__default.BetreeStepOps#requires| (T@U) Bool)
(declare-fun StartFuel_BetreeSpec._default.RedirectOps () T@U)
(declare-fun BetreeSpec.__default.BetreeStepUI (T@U T@U) Bool)
(declare-fun |BetreeSpec.__default.BetreeStepUI#canCall| (T@U T@U) Bool)
(declare-fun |BetreeSpec.__default.BetreeStepUI#requires| (T@U T@U) Bool)
(declare-fun Tclass.BetreeBlockInterface.__default () T@U)
(declare-fun Tclass.BetreeBlockInterface.Variables () T@U)
(declare-fun BetreeBlockInterface.__default.RefGraphIsClosed (T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.RefGraphIsClosed#canCall| (T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.RefGraphIsClosed#requires| (T@U) Bool)
(declare-fun BetreeBlockInterface.__default.LookupIsValid (T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.LookupIsValid#canCall| (T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.LookupIsValid#requires| (T@U T@U) Bool)
(declare-fun BetreeBlockInterface.__default.ReachableReference (T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.ReachableReference#canCall| (T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.ReachableReference#requires| (T@U T@U) Bool)
(declare-fun BetreeBlockInterface.__default.LiveReferences (T@U) T@U)
(declare-fun |BetreeBlockInterface.__default.LiveReferences#canCall| (T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.LiveReferences#requires| (T@U) Bool)
(declare-fun |lambda#176| (T@U T@U) T@U)
(declare-fun BetreeBlockInterface.__default.LiveDataAvailable (T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.LiveDataAvailable#canCall| (T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.LiveDataAvailable#requires| (T@U) Bool)
(declare-fun BetreeBlockInterface.__default.Read (T@U T@U) T@U)
(declare-fun |BetreeBlockInterface.__default.Read#canCall| (T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.Read#requires| (T@U T@U) Bool)
(declare-fun BetreeBlockInterface.__default.Init (T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.Init#canCall| (T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.Init#requires| (T@U) Bool)
(declare-fun BetreeBlockInterface.__default.Alloc (T@U T@U T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.Alloc#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.Alloc#requires| (T@U T@U T@U T@U) Bool)
(declare-fun BetreeBlockInterface.__default.Write (T@U T@U T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.Write#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.Write#requires| (T@U T@U T@U T@U) Bool)
(declare-fun BetreeBlockInterface.__default.ReadStep (T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.ReadStep#canCall| (T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.ReadStep#requires| (T@U T@U) Bool)
(declare-fun BetreeBlockInterface.__default.OpStep (T@U T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.OpStep#canCall| (T@U T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.OpStep#requires| (T@U T@U T@U) Bool)
(declare-fun BetreeBlockInterface.__default.Predecessors (T@U T@U) T@U)
(declare-fun |BetreeBlockInterface.__default.Predecessors#canCall| (T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.Predecessors#requires| (T@U T@U) Bool)
(declare-fun |lambda#178| (T@U T@U T@U T@U) T@U)
(declare-fun BetreeBlockInterface.__default.ClosedUnderPredecessor (T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.ClosedUnderPredecessor#canCall| (T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.ClosedUnderPredecessor#requires| (T@U T@U) Bool)
(declare-fun BetreeBlockInterface.__default.RootHasNoPredecessor (T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.RootHasNoPredecessor#canCall| (T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.RootHasNoPredecessor#requires| (T@U) Bool)
(declare-fun BetreeBlockInterface.__default.Transaction (T@U T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.Transaction#canCall| (T@U T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.Transaction#requires| (T@U T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.OpTransaction#canCall| (T@U T@U T@U) Bool)
(declare-fun BetreeBlockInterface.__default.OpTransaction (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_BetreeBlockInterface._default.OpTransaction () T@U)
(declare-fun BetreeBlockInterface.__default.CanGCRefs (T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.CanGCRefs#canCall| (T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.CanGCRefs#requires| (T@U T@U) Bool)
(declare-fun BetreeBlockInterface.__default.GC (T@U T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.GC#canCall| (T@U T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.GC#requires| (T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.IMapRemove () T@U)
(declare-fun Tclass.BetreeBlockInterface.Step () T@U)
(declare-fun BetreeBlockInterface.__default.NextStep (T@U T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.NextStep#canCall| (T@U T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.NextStep#requires| (T@U T@U T@U) Bool)
(declare-fun BetreeBlockInterface.Step.TransactionStep_q (T@U) Bool)
(declare-fun BetreeBlockInterface.Step.ops (T@U) T@U)
(declare-fun BetreeBlockInterface.Step.GCStep_q (T@U) Bool)
(declare-fun BetreeBlockInterface.Step.refs (T@U) T@U)
(declare-fun |$IsA#BetreeBlockInterface.Variables| (T@U) Bool)
(declare-fun |BetreeBlockInterface.Variables#Equal| (T@U T@U) Bool)
(declare-fun BetreeBlockInterface.__default.Next (T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.Next#canCall| (T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.Next#requires| (T@U T@U) Bool)
(declare-fun BetreeBlockInterface.__default.Inv (T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.Inv#canCall| (T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.Inv#requires| (T@U) Bool)
(declare-fun BetreeBlockInterface.__default.Reads (T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.Reads#canCall| (T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.Reads#requires| (T@U T@U) Bool)
(declare-fun BetreeBlockInterface.__default.IsStatePath (T@U T@U T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.IsStatePath#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.IsStatePath#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |BetreeBlockInterface.__default.OpTransaction#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |#BetreeBlockInterface.Variables.Variables| (T@U) T@U)
(declare-fun |#BetreeBlockInterface.Step.TransactionStep| (T@U) T@U)
(declare-fun |#BetreeBlockInterface.Step.GCStep| (T@U) T@U)
(declare-fun |#BetreeBlockInterface.Step.StutterStep| () T@U)
(declare-fun BetreeBlockInterface.Step.StutterStep_q (T@U) Bool)
(declare-fun |$IsA#BetreeBlockInterface.Step| (T@U) Bool)
(declare-fun |BetreeBlockInterface.Step#Equal| (T@U T@U) Bool)
(declare-fun |#Betree.Variables.Variables| (T@U) T@U)
(declare-fun |$IsA#Betree.Variables| (T@U) Bool)
(declare-fun |Betree.Variables#Equal| (T@U T@U) Bool)
(declare-fun |#Betree.Step.BetreeStep| (T@U) T@U)
(declare-fun Betree.Step.BetreeStep_q (T@U) Bool)
(declare-fun Betree.Step.step (T@U) T@U)
(declare-fun |#Betree.Step.GCStep| (T@U) T@U)
(declare-fun Betree.Step.GCStep_q (T@U) Bool)
(declare-fun Betree.Step.refs (T@U) T@U)
(declare-fun |#Betree.Step.StutterStep| () T@U)
(declare-fun Betree.Step.StutterStep_q (T@U) Bool)
(declare-fun |$IsA#Betree.Step| (T@U) Bool)
(declare-fun |Betree.Step#Equal| (T@U T@U) Bool)
(declare-fun Tclass.Betree.__default () T@U)
(declare-fun Betree.__default.EmptyNode () T@U)
(declare-fun |Betree.__default.EmptyNode#requires| () Bool)
(declare-fun Betree.__default.Init (T@U) Bool)
(declare-fun |Betree.__default.Init#canCall| (T@U) Bool)
(declare-fun |Betree.__default.Init#requires| (T@U) Bool)
(declare-fun |Betree.__default.EmptyNode#canCall| () Bool)
(declare-fun Betree.__default.GC (T@U T@U T@U T@U) Bool)
(declare-fun |Betree.__default.GC#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Betree.__default.GC#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Betree.__default.Betree (T@U T@U T@U T@U) Bool)
(declare-fun |Betree.__default.Betree#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Betree.__default.Betree#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Betree.__default.NextStep (T@U T@U T@U T@U) Bool)
(declare-fun |Betree.__default.NextStep#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Betree.__default.NextStep#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Betree.__default.Next (T@U T@U T@U) Bool)
(declare-fun |Betree.__default.Next#canCall| (T@U T@U T@U) Bool)
(declare-fun |Betree.__default.Next#requires| (T@U T@U T@U) Bool)
(declare-fun |#QueryStates.QueryState.InProgress| (T@U T@U T@U) T@U)
(declare-fun |#QueryStates.QueryState.Finished| (T@U T@U) T@U)
(declare-fun |$IsA#QueryStates.QueryState| (T@U) Bool)
(declare-fun |QueryStates.QueryState#Equal| (T@U T@U) Bool)
(declare-fun |#QueryStates.QueryDescent.QueryDescent| (T@U T@U T@U) T@U)
(declare-fun QueryStates.QueryDescent.QueryDescent_q (T@U) Bool)
(declare-fun QueryStates.QueryDescent.query (T@U) T@U)
(declare-fun QueryStates.QueryDescent.parent (T@U) T@U)
(declare-fun QueryStates.QueryDescent.query_k (T@U) T@U)
(declare-fun |$IsA#QueryStates.QueryDescent| (T@U) Bool)
(declare-fun |QueryStates.QueryDescent#Equal| (T@U T@U) Bool)
(declare-fun Tclass.QueryStates.__default () T@U)
(declare-fun QueryStates.__default.ValidQueryDescent (T@U) Bool)
(declare-fun |QueryStates.__default.ValidQueryDescent#canCall| (T@U) Bool)
(declare-fun |QueryStates.__default.ValidQueryDescent#requires| (T@U) Bool)
(declare-fun QueryStates.__default.QueryDescentReads (T@U) T@U)
(declare-fun |QueryStates.__default.QueryDescentReads#canCall| (T@U) Bool)
(declare-fun |QueryStates.__default.QueryDescentReads#requires| (T@U) Bool)
(declare-fun QueryStates.__default.QueryDescentOps (T@U) T@U)
(declare-fun |QueryStates.__default.QueryDescentOps#canCall| (T@U) Bool)
(declare-fun |QueryStates.__default.QueryDescentOps#requires| (T@U) Bool)
(declare-fun Tclass.BetreeInv.__default () T@U)
(declare-fun BetreeInv.__default.LookupRespectsView (T@U T@U) Bool)
(declare-fun |BetreeInv.__default.LookupRespectsView#canCall| (T@U T@U) Bool)
(declare-fun |BetreeInv.__default.LookupRespectsView#requires| (T@U T@U) Bool)
(declare-fun BetreeInv.__default.IsPathLookup (T@U T@U T@U) Bool)
(declare-fun |BetreeInv.__default.IsPathLookup#canCall| (T@U T@U T@U) Bool)
(declare-fun |BetreeInv.__default.IsPathLookup#requires| (T@U T@U T@U) Bool)
(declare-fun BetreeInv.__default.IsSatisfyingLookup (T@U T@U T@U T@U T@U) Bool)
(declare-fun |BetreeInv.__default.IsSatisfyingLookup#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |BetreeInv.__default.IsSatisfyingLookup#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun BetreeInv.__default.IsSatisfyingLookupFrom (T@U T@U T@U T@U T@U) Bool)
(declare-fun |BetreeInv.__default.IsSatisfyingLookupFrom#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |BetreeInv.__default.IsSatisfyingLookupFrom#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_BetreeInv._default.IsSatisfyingLookup () T@U)
(declare-fun BetreeInv.__default.KeyHasSatisfyingLookup (T@U T@U T@U) Bool)
(declare-fun |BetreeInv.__default.KeyHasSatisfyingLookup#canCall| (T@U T@U T@U) Bool)
(declare-fun |BetreeInv.__default.KeyHasSatisfyingLookup#requires| (T@U T@U T@U) Bool)
(declare-fun BetreeInv.__default.PathOfLookup (T@U T@U) T@U)
(declare-fun |BetreeInv.__default.PathOfLookup#canCall| (T@U) Bool)
(declare-fun |BetreeInv.__default.PathOfLookup#requires| (T@U T@U) Bool)
(declare-fun BetreeInv.__default.LookupIsAcyclic (T@U) Bool)
(declare-fun |BetreeInv.__default.LookupIsAcyclic#canCall| (T@U) Bool)
(declare-fun |BetreeInv.__default.LookupIsAcyclic#requires| (T@U) Bool)
(declare-fun BetreeInv.__default.Acyclic (T@U) Bool)
(declare-fun |BetreeInv.__default.Acyclic#canCall| (T@U) Bool)
(declare-fun |BetreeInv.__default.Acyclic#requires| (T@U) Bool)
(declare-fun BetreeInv.__default.Inv (T@U) Bool)
(declare-fun |BetreeInv.__default.Inv#canCall| (T@U) Bool)
(declare-fun |BetreeInv.__default.Inv#requires| (T@U) Bool)
(declare-fun BetreeInv.__default.PreservesLookups (T@U T@U T@U) Bool)
(declare-fun |BetreeInv.__default.PreservesLookups#canCall| (T@U T@U T@U) Bool)
(declare-fun |BetreeInv.__default.PreservesLookups#requires| (T@U T@U T@U) Bool)
(declare-fun BetreeInv.__default.PreservesLookupsExcept (T@U T@U T@U T@U) Bool)
(declare-fun |BetreeInv.__default.PreservesLookupsExcept#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |BetreeInv.__default.PreservesLookupsExcept#requires| (T@U T@U T@U T@U) Bool)
(declare-fun BetreeInv.__default.PreservesLookupsPut (T@U T@U T@U T@U) Bool)
(declare-fun |BetreeInv.__default.PreservesLookupsPut#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |BetreeInv.__default.PreservesLookupsPut#requires| (T@U T@U T@U T@U) Bool)
(declare-fun BetreeInv.__default.InsertMessage (T@U T@U T@U T@U T@U) Bool)
(declare-fun |BetreeInv.__default.InsertMessage#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |BetreeInv.__default.InsertMessage#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun BetreeInv.__default.Flush (T@U T@U T@U) Bool)
(declare-fun |BetreeInv.__default.Flush#canCall| (T@U T@U T@U) Bool)
(declare-fun |BetreeInv.__default.Flush#requires| (T@U T@U T@U) Bool)
(declare-fun BetreeInv.__default.Grow (T@U T@U T@U T@U) Bool)
(declare-fun |BetreeInv.__default.Grow#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |BetreeInv.__default.Grow#requires| (T@U T@U T@U T@U) Bool)
(declare-fun BetreeInv.__default.Redirect (T@U T@U T@U) Bool)
(declare-fun |BetreeInv.__default.Redirect#canCall| (T@U T@U T@U) Bool)
(declare-fun |BetreeInv.__default.Redirect#requires| (T@U T@U T@U) Bool)
(declare-fun BetreeInv.__default.Query (T@U T@U T@U T@U T@U) Bool)
(declare-fun |BetreeInv.__default.Query#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |BetreeInv.__default.Query#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun BetreeInv.__default.QueryDescent (T@U T@U T@U) Bool)
(declare-fun |BetreeInv.__default.QueryDescent#canCall| (T@U T@U T@U) Bool)
(declare-fun |BetreeInv.__default.QueryDescent#requires| (T@U T@U T@U) Bool)
(declare-fun BetreeInv.__default.SuccQuery (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |BetreeInv.__default.SuccQuery#canCall| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |BetreeInv.__default.SuccQuery#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |#AsyncBetree.Variables.Variables| (T@U T@U) T@U)
(declare-fun |$IsA#AsyncBetree.Variables| (T@U) Bool)
(declare-fun |AsyncBetree.Variables#Equal| (T@U T@U) Bool)
(declare-fun |#AsyncBetree.Step.BasicStep| (T@U) T@U)
(declare-fun AsyncBetree.Step.BasicStep_q (T@U) Bool)
(declare-fun AsyncBetree.Step.betreeStep (T@U) T@U)
(declare-fun |#AsyncBetree.Step.QueryBeginStep| () T@U)
(declare-fun AsyncBetree.Step.QueryBeginStep_q (T@U) Bool)
(declare-fun |#AsyncBetree.Step.QueryEndStep| () T@U)
(declare-fun AsyncBetree.Step.QueryEndStep_q (T@U) Bool)
(declare-fun |#AsyncBetree.Step.QueryAdvanceStep| (Int T@U) T@U)
(declare-fun AsyncBetree.Step.QueryAdvanceStep_q (T@U) Bool)
(declare-fun AsyncBetree.Step.id (T@U) Int)
(declare-fun AsyncBetree.Step.descent (T@U) T@U)
(declare-fun |#AsyncBetree.Step.StutterStep| () T@U)
(declare-fun AsyncBetree.Step.StutterStep_q (T@U) Bool)
(declare-fun |$IsA#AsyncBetree.Step| (T@U) Bool)
(declare-fun |AsyncBetree.Step#Equal| (T@U T@U) Bool)
(declare-fun Tclass.AsyncBetree.__default () T@U)
(declare-fun AsyncBetree.__default.Init (T@U) Bool)
(declare-fun |AsyncBetree.__default.Init#canCall| (T@U) Bool)
(declare-fun |AsyncBetree.__default.Init#requires| (T@U) Bool)
(declare-fun AsyncBetree.__default.AvoidsQueries (T@U T@U) Bool)
(declare-fun |AsyncBetree.__default.AvoidsQueries#canCall| (T@U T@U) Bool)
(declare-fun |AsyncBetree.__default.AvoidsQueries#requires| (T@U T@U) Bool)
(declare-fun AsyncBetree.__default.Basic (T@U T@U T@U T@U) Bool)
(declare-fun |AsyncBetree.__default.Basic#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |AsyncBetree.__default.Basic#requires| (T@U T@U T@U T@U) Bool)
(declare-fun AsyncBetree.__default.QueryBegin (T@U T@U T@U) Bool)
(declare-fun |AsyncBetree.__default.QueryBegin#canCall| (T@U T@U T@U) Bool)
(declare-fun |AsyncBetree.__default.QueryBegin#requires| (T@U T@U T@U) Bool)
(declare-fun AsyncBetree.__default.QueryEnd (T@U T@U T@U) Bool)
(declare-fun |AsyncBetree.__default.QueryEnd#canCall| (T@U T@U T@U) Bool)
(declare-fun |AsyncBetree.__default.QueryEnd#requires| (T@U T@U T@U) Bool)
(declare-fun AsyncBetree.__default.QueryAdvance (T@U T@U T@U Int T@U) Bool)
(declare-fun |AsyncBetree.__default.QueryAdvance#canCall| (T@U T@U T@U Int T@U) Bool)
(declare-fun |AsyncBetree.__default.QueryAdvance#requires| (T@U T@U T@U Int T@U) Bool)
(declare-fun AsyncBetree.__default.NextStep (T@U T@U T@U T@U) Bool)
(declare-fun |AsyncBetree.__default.NextStep#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |AsyncBetree.__default.NextStep#requires| (T@U T@U T@U T@U) Bool)
(declare-fun AsyncBetree.__default.Next (T@U T@U T@U) Bool)
(declare-fun |AsyncBetree.__default.Next#canCall| (T@U T@U T@U) Bool)
(declare-fun |AsyncBetree.__default.Next#requires| (T@U T@U T@U) Bool)
(declare-fun |AsyncBetree.__default.QueryInv#canCall| (T@U T@U) Bool)
(declare-fun |AsyncBetree.__default.QueryInv#requires| (T@U T@U) Bool)
(declare-fun |AsyncBetree.__default.Inv#canCall| (T@U) Bool)
(declare-fun |AsyncBetree.__default.Inv#requires| (T@U) Bool)
(declare-fun |#Betree_Refines_Map.LookupResult.LookupResult| (T@U T@U) T@U)
(declare-fun Betree__Refines__Map.LookupResult.lookup (T@U) T@U)
(declare-fun |$IsA#Betree__Refines__Map.LookupResult| (T@U) Bool)
(declare-fun |Betree__Refines__Map.LookupResult#Equal| (T@U T@U) Bool)
(declare-fun Tclass.Betree__Refines__Map.__default () T@U)
(declare-fun |Betree__Refines__Map.__default.GetLookup#requires| (T@U T@U T@U) Bool)
(declare-fun |$let#36_value| (T@U T@U T@U) T@U)
(declare-fun |$let#36_lookup| (T@U T@U T@U) T@U)
(declare-fun |$let#36$canCall| (T@U T@U T@U) Bool)
(declare-fun Betree__Refines__Map.__default.GetValue (T@U T@U) T@U)
(declare-fun |Betree__Refines__Map.__default.GetValue#canCall| (T@U T@U) Bool)
(declare-fun |Betree__Refines__Map.__default.GetValue#requires| (T@U T@U) Bool)
(declare-fun Betree__Refines__Map.__default.IView (T@U) T@U)
(declare-fun |Betree__Refines__Map.__default.IView#canCall| (T@U) Bool)
(declare-fun |Betree__Refines__Map.__default.IView#requires| (T@U) Bool)
(declare-fun |lambda#185| (T@U) T@U)
(declare-fun |Betree__Refines__Map.__default.I#requires| (T@U) Bool)
(declare-fun MapType8Select (T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType8Type (T@T T@T) T@T)
(declare-fun MapType8TypeInv0 (T@T) T@T)
(declare-fun MapType8TypeInv1 (T@T) T@T)
(declare-fun MapType8Store (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#1| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#6| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#7| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#10| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#11| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#12| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#13| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#14| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#15| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#16| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#17| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#18| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#19| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#20| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#21| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#22| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#23| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#24| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#25| (T@U T@U T@U Bool) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0) :qid |typeInv:U_2_int| :pattern ( (int_2_U arg0)) ))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x)) :qid |cast:U_2_int| :pattern ( (U_2_int x)) ))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType) :qid |funType:int_2_U| :pattern ( (int_2_U arg0@@0)) ))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1) :qid |typeInv:U_2_real| :pattern ( (real_2_U arg0@@1)) ))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0)) :qid |cast:U_2_real| :pattern ( (U_2_real x@@0)) ))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType) :qid |funType:real_2_U| :pattern ( (real_2_U arg0@@2)) ))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3) :qid |typeInv:U_2_bool| :pattern ( (bool_2_U arg0@@3)) ))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1)) :qid |cast:U_2_bool| :pattern ( (U_2_bool x@@1)) ))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType) :qid |funType:bool_2_U| :pattern ( (bool_2_U arg0@@4)) ))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5) :qid |typeInv:U_2_rmode| :pattern ( (rmode_2_U arg0@@5)) ))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2)) :qid |cast:U_2_rmode| :pattern ( (U_2_rmode x@@2)) ))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType) :qid |funType:rmode_2_U| :pattern ( (rmode_2_U arg0@@6)) ))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7) :qid |typeInv:U_2_string| :pattern ( (string_2_U arg0@@7)) ))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3)) :qid |cast:U_2_string| :pattern ( (U_2_string x@@3)) ))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType) :qid |funType:string_2_U| :pattern ( (string_2_U arg0@@8)) ))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9) :qid |typeInv:U_2_regex| :pattern ( (regex_2_U arg0@@9)) ))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4)) :qid |cast:U_2_regex| :pattern ( (U_2_regex x@@4)) ))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType) :qid |funType:regex_2_U| :pattern ( (regex_2_U arg0@@10)) ))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5) :qid |bg:subtype-refl| :no-pattern (U_2_int x@@5) :no-pattern (U_2_bool x@@5) )))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6))) (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z))) :qid |bg:subtype-trans| :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z)) )))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7))) (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0)))) :qid |bg:subtype-antisymm| :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor TyType) 6) (= (type TBool) TyType)) (= (type TChar) TyType)) (= (type TInt) TyType)) (= (type TReal) TyType)) (= (type TORDINAL) TyType)) (= (Ctor TyTagType) 7)) (= (type TagBool) TyTagType)) (= (type TagChar) TyTagType)) (= (type TagInt) TyTagType)) (= (type TagReal) TyTagType)) (= (type TagORDINAL) TyTagType)) (= (type TagSet) TyTagType)) (= (type TagISet) TyTagType)) (= (type TagMultiSet) TyTagType)) (= (type TagSeq) TyTagType)) (= (type TagMap) TyTagType)) (= (type TagIMap) TyTagType)) (= (type TagClass) TyTagType)) (= (Ctor ClassNameType) 8)) (= (type class._System.int) ClassNameType)) (= (type class._System.bool) ClassNameType)) (= (type class._System.set) ClassNameType)) (= (type class._System.seq) ClassNameType)) (= (type class._System.multiset) ClassNameType)) (forall ((arg0@@11 T@T) ) (! (= (Ctor (FieldType arg0@@11)) 9) :qid |ctor:FieldType| ))) (forall ((arg0@@12 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12)) arg0@@12) :qid |typeInv:FieldTypeInv0| :pattern ( (FieldType arg0@@12)) ))) (= (type alloc) (FieldType boolType))) (= (Ctor NameFamilyType) 10)) (= (type allocName) NameFamilyType)) (= (type Tagclass._System.nat) TyTagType)) (= (type class._System.object?) ClassNameType)) (= (type Tagclass._System.object?) TyTagType)) (= (type Tagclass._System.object) TyTagType)) (= (type class._System.array?) ClassNameType)) (= (type Tagclass._System.array?) TyTagType)) (= (type Tagclass._System.array) TyTagType)) (= (type Tagclass._System.___hFunc1) TyTagType)) (= (type Tagclass._System.___hPartialFunc1) TyTagType)) (= (type Tagclass._System.___hTotalFunc1) TyTagType)) (= (type Tagclass._System.___hFunc0) TyTagType)) (= (type Tagclass._System.___hPartialFunc0) TyTagType)) (= (type Tagclass._System.___hTotalFunc0) TyTagType)) (= (type class._System.__default) ClassNameType)) (= (type Tagclass._System.__default) TyTagType)) (= (type Tagclass._System.___hFunc2) TyTagType)) (= (type Tagclass._System.___hPartialFunc2) TyTagType)) (= (type Tagclass._System.___hTotalFunc2) TyTagType)) (= (type Tagclass._System.___hFunc4) TyTagType)) (= (type Tagclass._System.___hPartialFunc4) TyTagType)) (= (type Tagclass._System.___hTotalFunc4) TyTagType)) (= (type Tagclass._System.___hFunc3) TyTagType)) (= (type Tagclass._System.___hPartialFunc3) TyTagType)) (= (type Tagclass._System.___hTotalFunc3) TyTagType)) (= (type Tagclass._System.___hFunc5) TyTagType)) (= (type Tagclass._System.___hPartialFunc5) TyTagType)) (= (type Tagclass._System.___hTotalFunc5) TyTagType)) (= (type Tagclass._System.___hFunc6) TyTagType)) (= (type Tagclass._System.___hPartialFunc6) TyTagType)) (= (type Tagclass._System.___hTotalFunc6) TyTagType)) (= (Ctor DtCtorIdType) 11)) (= (type |##_System._tuple#2._#Make2|) DtCtorIdType)) (= (type Tagclass._System.Tuple2) TyTagType)) (= (type class._System.Tuple2) ClassNameType)) (= (type Tagclass._System.___hFunc2OSO) TyTagType)) (= (type Tagclass._System.___hPartialFunc2OSO) TyTagType)) (= (type Tagclass._System.___hTotalFunc2OSO) TyTagType)) (= (type Tagclass._System.___hFunc3LLOO) TyTagType)) (= (type Tagclass._System.___hPartialFunc3LLOO) TyTagType)) (= (type Tagclass._System.___hTotalFunc3LLOO) TyTagType)) (= (type Tagclass._System.___hFunc1OS) TyTagType)) (= (type Tagclass._System.___hPartialFunc1OS) TyTagType)) (= (type Tagclass._System.___hTotalFunc1OS) TyTagType)) (= (type Tagclass._System.___hFunc0L) TyTagType)) (= (type Tagclass._System.___hPartialFunc0L) TyTagType)) (= (type Tagclass._System.___hTotalFunc0L) TyTagType)) (= (type Tagclass._System.___hFunc2LOO) TyTagType)) (= (type Tagclass._System.___hPartialFunc2LOO) TyTagType)) (= (type Tagclass._System.___hTotalFunc2LOO) TyTagType)) (= (type |##_System._tuple#0._#Make0|) DtCtorIdType)) (= (type Tagclass._System.Tuple0) TyTagType)) (= (type class._System.Tuple0) ClassNameType)) (= (type Tagclass._System.___hFunc1OL) TyTagType)) (= (type Tagclass._System.___hPartialFunc1OL) TyTagType)) (= (type Tagclass._System.___hTotalFunc1OL) TyTagType)) (= (type Tagclass._System.___hFunc1LO) TyTagType)) (= (type Tagclass._System.___hPartialFunc1LO) TyTagType)) (= (type Tagclass._System.___hTotalFunc1LO) TyTagType)) (= (type |##_System._tuple#2OLL._#Make2|) DtCtorIdType)) (= (type Tagclass._System.Tuple2OLL) TyTagType)) (= (type class._System.Tuple2OLL) ClassNameType)) (= (type Tagclass._System.___hFunc3LLOL) TyTagType)) (= (type Tagclass._System.___hPartialFunc3LLOL) TyTagType)) (= (type Tagclass._System.___hTotalFunc3LLOL) TyTagType)) (= (type Tagclass._System.___hFunc2SSO) TyTagType)) (= (type Tagclass._System.___hPartialFunc2SSO) TyTagType)) (= (type Tagclass._System.___hTotalFunc2SSO) TyTagType)) (= (type Tagclass._System.___hFunc1SS) TyTagType)) (= (type Tagclass._System.___hPartialFunc1SS) TyTagType)) (= (type Tagclass._System.___hTotalFunc1SS) TyTagType)) (= (type Tagclass._System.___hFunc1LL) TyTagType)) (= (type Tagclass._System.___hPartialFunc1LL) TyTagType)) (= (type Tagclass._System.___hTotalFunc1LL) TyTagType)) (= (type class.AsyncBetree__Refines__AsyncMap.__default) ClassNameType)) (= (type Tagclass.AsyncBetree__Refines__AsyncMap.__default) TyTagType)) (= (type Tagclass.Betree.Variables) TyTagType)) (= (type Tagclass.QueryStates.QueryState) TyTagType)) (= (type Tagclass.ValueType.Value) TyTagType)) (= (type Tagclass.KeyType.Key) TyTagType)) (= (type Tagclass.NativeTypes.byte) TyTagType)) (= (type Tagclass.ValueMessage.Delta) TyTagType)) (= (type Tagclass.ReferenceType.Reference) TyTagType)) (= (type Tagclass.BetreeGraph.Node) TyTagType)) (= (type Tagclass.BetreeGraph.ReadOp) TyTagType)) (= (type Tagclass.AsyncBetree.Variables) TyTagType)) (= (type Tagclass.AsyncMapSpec.Variables) TyTagType)) (= (type Tagclass.UI.Op) TyTagType)) (= (type Tagclass.AsyncMapSpec.Step) TyTagType)) (= (type Tagclass.QueryStates.QueryDescent) TyTagType)) (= (type Tagclass.Betree__Refines__Map.LookupResult) TyTagType)) (= (type Tagclass.Betree.Step) TyTagType)) (= (type Tagclass.BetreeSpec.BetreeStep) TyTagType)) (= (type Tagclass.BetreeSpec.Redirect) TyTagType)) (= (type Tagclass.BetreeSpec.RootGrowth) TyTagType)) (= (type Tagclass.BetreeSpec.NodeFlush) TyTagType)) (= (type Tagclass.BetreeSpec.MessageInsertion) TyTagType)) (= (type Tagclass.BetreeSpec.SuccQuery) TyTagType)) (= (type Tagclass.BetreeSpec.LookupQuery) TyTagType)) (= (type Tagclass.AsyncBetree.Step) TyTagType)) (= (type Tagclass.MapSpec.Step) TyTagType)) (= (type Tagclass.MapSpec.Variables) TyTagType)) (= (type Tagclass.UI.RangeStart) TyTagType)) (= (type Tagclass.UI.SuccResult) TyTagType)) (= (type Tagclass.UI.RangeEnd) TyTagType)) (= (type Tagclass.NativeTypes.sbyte) TyTagType)) (= (type class.NativeTypes.sbyte) ClassNameType)) (= (type class.NativeTypes.byte) ClassNameType)) (= (type Tagclass.NativeTypes.int16) TyTagType)) (= (type class.NativeTypes.int16) ClassNameType)) (= (type Tagclass.NativeTypes.uint16) TyTagType)) (= (type class.NativeTypes.uint16) ClassNameType)) (= (type Tagclass.NativeTypes.int32) TyTagType)) (= (type class.NativeTypes.int32) ClassNameType)) (= (type Tagclass.NativeTypes.uint32) TyTagType)) (= (type class.NativeTypes.uint32) ClassNameType)) (= (type Tagclass.NativeTypes.int64) TyTagType)) (= (type class.NativeTypes.int64) ClassNameType)) (= (type Tagclass.NativeTypes.uint64) TyTagType)) (= (type class.NativeTypes.uint64) ClassNameType)) (= (type Tagclass.NativeTypes.nat8) TyTagType)) (= (type class.NativeTypes.nat8) ClassNameType)) (= (type Tagclass.NativeTypes.nat16) TyTagType)) (= (type class.NativeTypes.nat16) ClassNameType)) (= (type Tagclass.NativeTypes.nat32) TyTagType)) (= (type class.NativeTypes.nat32) ClassNameType)) (= (type Tagclass.NativeTypes.nat64) TyTagType)) (= (type class.NativeTypes.nat64) ClassNameType)) (= (type Tagclass.NativeTypes.uint128) TyTagType)) (= (type class.NativeTypes.uint128) ClassNameType)) (= (type class.NativeTypes.__default) ClassNameType)) (= (type Tagclass.NativeTypes.__default) TyTagType)) (= (type class.ValueType.__default) ClassNameType)) (= (type Tagclass.ValueType.__default) TyTagType)) (= (type class.KeyType.__default) ClassNameType)) (= (type Tagclass.KeyType.__default) TyTagType)) (= (type |##UI.RangeStart.SInclusive|) DtCtorIdType)) (= (type |##UI.RangeStart.SExclusive|) DtCtorIdType)) (= (type |##UI.RangeStart.NegativeInf|) DtCtorIdType)) (= (type class.UI.RangeStart) ClassNameType)) (= (type |##UI.RangeEnd.EInclusive|) DtCtorIdType)) (= (type |##UI.RangeEnd.EExclusive|) DtCtorIdType)) (= (type |##UI.RangeEnd.PositiveInf|) DtCtorIdType)) (= (type class.UI.RangeEnd) ClassNameType)) (= (type |##UI.SuccResult.SuccResult|) DtCtorIdType)) (= (type class.UI.SuccResult) ClassNameType)) (= (type |##UI.SuccResultList.SuccResultList|) DtCtorIdType)) (= (type Tagclass.UI.SuccResultList) TyTagType)) (= (type class.UI.SuccResultList) ClassNameType)) (= (type |##UI.Op.NoOp|) DtCtorIdType)) (= (type |##UI.Op.SyncOp|) DtCtorIdType)) (= (type |##UI.Op.CrashOp|) DtCtorIdType)) (= (type |##UI.Op.PushSyncOp|) DtCtorIdType)) (= (type |##UI.Op.PopSyncOp|) DtCtorIdType)) (= (type |##UI.Op.GetOp|) DtCtorIdType)) (= (type |##UI.Op.GetBeginOp|) DtCtorIdType)) (= (type |##UI.Op.GetEndOp|) DtCtorIdType)) (= (type |##UI.Op.PutOp|) DtCtorIdType)) (= (type |##UI.Op.SuccOp|) DtCtorIdType)) (= (type class.UI.Op) ClassNameType)) (= (type class.UI.__default) ClassNameType)) (= (type Tagclass.UI.__default) TyTagType)) (= (type class.SeqComparison.__default) ClassNameType)) (= (type Tagclass.SeqComparison.__default) TyTagType)) (= (type |##Options.Option.None|) DtCtorIdType)) (= (type Tagclass.Options.Option) TyTagType)) (= (type |##Options.Option.Some|) DtCtorIdType)) (= (type class.Options.Option) ClassNameType)) (= (type class.Options.__default) ClassNameType)) (= (type Tagclass.Options.__default) TyTagType)) (= (type |##MapSpec.Variables.Variables|) DtCtorIdType)) (= (type class.MapSpec.Variables) ClassNameType)) (= (type |##MapSpec.Step.QueryStep|) DtCtorIdType)) (= (type |##MapSpec.Step.WriteStep|) DtCtorIdType)) (= (type |##MapSpec.Step.SuccStep|) DtCtorIdType)) (= (type |##MapSpec.Step.StutterStep|) DtCtorIdType)) (= (type class.MapSpec.Step) ClassNameType)) (= (type class.MapSpec.__default) ClassNameType)) (= (type Tagclass.MapSpec.__default) TyTagType)) (= (type class.MapRemove_s.__default) ClassNameType)) (= (type Tagclass.MapRemove_s.__default) TyTagType)) (= (type class.Maps.__default) ClassNameType)) (= (type Tagclass.Maps.__default) TyTagType)) (= (type |##AsyncMapSpec.Variables.Variables|) DtCtorIdType)) (= (type class.AsyncMapSpec.Variables) ClassNameType)) (= (type |##AsyncMapSpec.Step.QueryBeginStep|) DtCtorIdType)) (= (type |##AsyncMapSpec.Step.QueryEndStep|) DtCtorIdType)) (= (type |##AsyncMapSpec.Step.QueryStep|) DtCtorIdType)) (= (type |##AsyncMapSpec.Step.WriteStep|) DtCtorIdType)) (= (type |##AsyncMapSpec.Step.SuccStep|) DtCtorIdType)) (= (type |##AsyncMapSpec.Step.StutterStep|) DtCtorIdType)) (= (type class.AsyncMapSpec.Step) ClassNameType)) (= (type class.AsyncMapSpec.__default) ClassNameType)) (= (type Tagclass.AsyncMapSpec.__default) TyTagType)) (= (type class.SequencesLite.__default) ClassNameType)) (= (type Tagclass.SequencesLite.__default) TyTagType)) (= (type class.Mathematics.__default) ClassNameType)) (= (type Tagclass.Mathematics.__default) TyTagType)) (= (type class.Sequences.__default) ClassNameType)) (= (type Tagclass.Sequences.__default) TyTagType)) (= (type class.ReferenceType.__default) ClassNameType)) (= (type Tagclass.ReferenceType.__default) TyTagType)) (= (type class.LinearMaybe.predefined) ClassNameType)) (= (type class.LinearMaybe.__default) ClassNameType)) (= (type Tagclass.LinearMaybe.__default) TyTagType)) (= (type class.LinearExtern.predefined) ClassNameType)) (= (type class.LinearExtern.__default) ClassNameType)) (= (type Tagclass.LinearExtern.__default) TyTagType)) (= (type |##ValueMessage.Delta.NoDelta|) DtCtorIdType)) (= (type class.ValueMessage.Delta) ClassNameType)) (= (type class.ValueMessage.__default) ClassNameType)) (= (type Tagclass.ValueMessage.__default) TyTagType)) (= (type Tagclass.ValueMessage.Message) TyTagType)) (= (type |##ValueMessage.Message.Define|) DtCtorIdType)) (= (type |##ValueMessage.Message.Update|) DtCtorIdType)) (= (type class.ValueMessage.Message) ClassNameType)) (= (type |##BetreeGraph.Node.Node|) DtCtorIdType)) (= (type class.BetreeGraph.Node) ClassNameType)) (= (type class.BetreeGraph.__default) ClassNameType)) (= (type Tagclass.BetreeGraph.__default) TyTagType)) (= (type |##BetreeGraph.Op.AllocOp|) DtCtorIdType)) (= (type Tagclass.BetreeGraph.Op) TyTagType)) (= (type |##BetreeGraph.Op.WriteOp|) DtCtorIdType)) (= (type class.BetreeGraph.Op) ClassNameType)) (= (type |##BetreeGraph.ReadOp.ReadOp|) DtCtorIdType)) (= (type class.BetreeGraph.ReadOp) ClassNameType)) (= (type class.Sets.__default) ClassNameType)) (= (type Tagclass.Sets.__default) TyTagType)) (= (type class.NativeArrays.__default) ClassNameType)) (= (type Tagclass.NativeArrays.__default) TyTagType)) (= (type class.Byte__Order.__default) ClassNameType)) (= (type Tagclass.Byte__Order.__default) TyTagType)) (= (type class.Lexicographic__Byte__Order.__default) ClassNameType)) (= (type Tagclass.Lexicographic__Byte__Order.__default) TyTagType)) (= (type |##BetreeSpec.LookupQuery.LookupQuery|) DtCtorIdType)) (= (type class.BetreeSpec.LookupQuery) ClassNameType)) (= (type |##BetreeSpec.SuccQuery.SuccQuery|) DtCtorIdType)) (= (type class.BetreeSpec.SuccQuery) ClassNameType)) (= (type |##BetreeSpec.MessageInsertion.MessageInsertion|) DtCtorIdType)) (= (type class.BetreeSpec.MessageInsertion) ClassNameType)) (= (type |##BetreeSpec.NodeFlush.NodeFlush|) DtCtorIdType)) (= (type class.BetreeSpec.NodeFlush) ClassNameType)) (= (type |##BetreeSpec.RootGrowth.RootGrowth|) DtCtorIdType)) (= (type class.BetreeSpec.RootGrowth) ClassNameType)) (= (type |##BetreeSpec.Redirect.Redirect|) DtCtorIdType)) (= (type class.BetreeSpec.Redirect) ClassNameType)) (= (type |##BetreeSpec.BetreeStep.BetreeQuery|) DtCtorIdType)) (= (type |##BetreeSpec.BetreeStep.BetreeSuccQuery|) DtCtorIdType)) (= (type |##BetreeSpec.BetreeStep.BetreeInsert|) DtCtorIdType)) (= (type |##BetreeSpec.BetreeStep.BetreeFlush|) DtCtorIdType)) (= (type |##BetreeSpec.BetreeStep.BetreeGrow|) DtCtorIdType)) (= (type |##BetreeSpec.BetreeStep.BetreeRedirect|) DtCtorIdType)) (= (type class.BetreeSpec.BetreeStep) ClassNameType)) (= (type class.BetreeSpec.__default) ClassNameType)) (= (type Tagclass.BetreeSpec.__default) TyTagType)) (= (type class.BetreeBlockInterface.__default) ClassNameType)) (= (type Tagclass.BetreeBlockInterface.__default) TyTagType)) (= (type Tagclass.BetreeBlockInterface.Variables) TyTagType)) (= (type Tagclass.BetreeBlockInterface.Step) TyTagType)) (= (type |##BetreeBlockInterface.Variables.Variables|) DtCtorIdType)) (= (type class.BetreeBlockInterface.Variables) ClassNameType)) (= (type |##BetreeBlockInterface.Step.TransactionStep|) DtCtorIdType)) (= (type |##BetreeBlockInterface.Step.GCStep|) DtCtorIdType)) (= (type |##BetreeBlockInterface.Step.StutterStep|) DtCtorIdType)) (= (type class.BetreeBlockInterface.Step) ClassNameType)) (= (type |##Betree.Variables.Variables|) DtCtorIdType)) (= (type class.Betree.Variables) ClassNameType)) (= (type |##Betree.Step.BetreeStep|) DtCtorIdType)) (= (type |##Betree.Step.GCStep|) DtCtorIdType)) (= (type |##Betree.Step.StutterStep|) DtCtorIdType)) (= (type class.Betree.Step) ClassNameType)) (= (type class.Betree.__default) ClassNameType)) (= (type Tagclass.Betree.__default) TyTagType)) (= (type |##QueryStates.QueryState.InProgress|) DtCtorIdType)) (= (type |##QueryStates.QueryState.Finished|) DtCtorIdType)) (= (type class.QueryStates.QueryState) ClassNameType)) (= (type |##QueryStates.QueryDescent.QueryDescent|) DtCtorIdType)) (= (type class.QueryStates.QueryDescent) ClassNameType)) (= (type class.QueryStates.__default) ClassNameType)) (= (type Tagclass.QueryStates.__default) TyTagType)) (= (type class.BetreeInv.__default) ClassNameType)) (= (type Tagclass.BetreeInv.__default) TyTagType)) (= (type |##AsyncBetree.Variables.Variables|) DtCtorIdType)) (= (type class.AsyncBetree.Variables) ClassNameType)) (= (type |##AsyncBetree.Step.BasicStep|) DtCtorIdType)) (= (type |##AsyncBetree.Step.QueryBeginStep|) DtCtorIdType)) (= (type |##AsyncBetree.Step.QueryEndStep|) DtCtorIdType)) (= (type |##AsyncBetree.Step.QueryAdvanceStep|) DtCtorIdType)) (= (type |##AsyncBetree.Step.StutterStep|) DtCtorIdType)) (= (type class.AsyncBetree.Step) ClassNameType)) (= (type class.AsyncBetree.__default) ClassNameType)) (= (type Tagclass.AsyncBetree.__default) TyTagType)) (= (type |##Betree_Refines_Map.LookupResult.LookupResult|) DtCtorIdType)) (= (type class.Betree__Refines__Map.LookupResult) ClassNameType)) (= (type class.Betree__Refines__Map.__default) ClassNameType)) (= (type Tagclass.Betree__Refines__Map.__default) TyTagType)) (= (Ctor TyTagFamilyType) 12)) (= (type tytagFamily$nat) TyTagFamilyType)) (= (type tytagFamily$object) TyTagFamilyType)) (= (type tytagFamily$array) TyTagFamilyType)) (= (type |tytagFamily$_#Func1|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1|) TyTagFamilyType)) (= (type |tytagFamily$_#Func0|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc0|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc0|) TyTagFamilyType)) (= (type tytagFamily$_default) TyTagFamilyType)) (= (type |tytagFamily$_#Func2|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2|) TyTagFamilyType)) (= (type |tytagFamily$_#Func4|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc4|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc4|) TyTagFamilyType)) (= (type |tytagFamily$_#Func3|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc3|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc3|) TyTagFamilyType)) (= (type |tytagFamily$_#Func5|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc5|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc5|) TyTagFamilyType)) (= (type |tytagFamily$_#Func6|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc6|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc6|) TyTagFamilyType)) (= (type |tytagFamily$_tuple#2|) TyTagFamilyType)) (= (type |tytagFamily$_#Func2OSO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2OSO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2OSO|) TyTagFamilyType)) (= (type |tytagFamily$_#Func3LLOO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc3LLOO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc3LLOO|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1OS|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1OS|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1OS|) TyTagFamilyType)) (= (type |tytagFamily$_#Func0L|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc0L|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc0L|) TyTagFamilyType)) (= (type |tytagFamily$_#Func2LOO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2LOO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2LOO|) TyTagFamilyType)) (= (type |tytagFamily$_tuple#0|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1OL|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1OL|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1OL|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1LO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1LO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1LO|) TyTagFamilyType)) (= (type |tytagFamily$_tuple#2OLL|) TyTagFamilyType)) (= (type |tytagFamily$_#Func3LLOL|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc3LLOL|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc3LLOL|) TyTagFamilyType)) (= (type |tytagFamily$_#Func2SSO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2SSO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2SSO|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1SS|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1SS|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1SS|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1LL|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1LL|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1LL|) TyTagFamilyType)) (= (type tytagFamily$Variables) TyTagFamilyType)) (= (type tytagFamily$QueryState) TyTagFamilyType)) (= (type tytagFamily$Value) TyTagFamilyType)) (= (type tytagFamily$Key) TyTagFamilyType)) (= (type tytagFamily$byte) TyTagFamilyType)) (= (type tytagFamily$Delta) TyTagFamilyType)) (= (type tytagFamily$Reference) TyTagFamilyType)) (= (type tytagFamily$Node) TyTagFamilyType)) (= (type tytagFamily$ReadOp) TyTagFamilyType)) (= (type tytagFamily$Op) TyTagFamilyType)) (= (type tytagFamily$Step) TyTagFamilyType)) (= (type tytagFamily$QueryDescent) TyTagFamilyType)) (= (type tytagFamily$LookupResult) TyTagFamilyType)) (= (type tytagFamily$BetreeStep) TyTagFamilyType)) (= (type tytagFamily$Redirect) TyTagFamilyType)) (= (type tytagFamily$RootGrowth) TyTagFamilyType)) (= (type tytagFamily$NodeFlush) TyTagFamilyType)) (= (type tytagFamily$MessageInsertion) TyTagFamilyType)) (= (type tytagFamily$SuccQuery) TyTagFamilyType)) (= (type tytagFamily$LookupQuery) TyTagFamilyType)) (= (type tytagFamily$RangeStart) TyTagFamilyType)) (= (type tytagFamily$SuccResult) TyTagFamilyType)) (= (type tytagFamily$RangeEnd) TyTagFamilyType)) (= (type tytagFamily$sbyte) TyTagFamilyType)) (= (type tytagFamily$int16) TyTagFamilyType)) (= (type tytagFamily$uint16) TyTagFamilyType)) (= (type tytagFamily$int32) TyTagFamilyType)) (= (type tytagFamily$uint32) TyTagFamilyType)) (= (type tytagFamily$int64) TyTagFamilyType)) (= (type tytagFamily$uint64) TyTagFamilyType)) (= (type tytagFamily$nat8) TyTagFamilyType)) (= (type tytagFamily$nat16) TyTagFamilyType)) (= (type tytagFamily$nat32) TyTagFamilyType)) (= (type tytagFamily$nat64) TyTagFamilyType)) (= (type tytagFamily$uint128) TyTagFamilyType)) (= (type tytagFamily$SuccResultList) TyTagFamilyType)) (= (type tytagFamily$Option) TyTagFamilyType)) (= (type tytagFamily$Message) TyTagFamilyType)))
(assert (distinct TBool TChar TInt TReal TORDINAL TagBool TagChar TagInt TagReal TagORDINAL TagSet TagISet TagMultiSet TagSeq TagMap TagIMap TagClass class._System.int class._System.bool class._System.set class._System.seq class._System.multiset alloc allocName Tagclass._System.nat class._System.object? Tagclass._System.object? Tagclass._System.object class._System.array? Tagclass._System.array? Tagclass._System.array Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 Tagclass._System.___hTotalFunc1 Tagclass._System.___hFunc0 Tagclass._System.___hPartialFunc0 Tagclass._System.___hTotalFunc0 class._System.__default Tagclass._System.__default Tagclass._System.___hFunc2 Tagclass._System.___hPartialFunc2 Tagclass._System.___hTotalFunc2 Tagclass._System.___hFunc4 Tagclass._System.___hPartialFunc4 Tagclass._System.___hTotalFunc4 Tagclass._System.___hFunc3 Tagclass._System.___hPartialFunc3 Tagclass._System.___hTotalFunc3 Tagclass._System.___hFunc5 Tagclass._System.___hPartialFunc5 Tagclass._System.___hTotalFunc5 Tagclass._System.___hFunc6 Tagclass._System.___hPartialFunc6 Tagclass._System.___hTotalFunc6 |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 class._System.Tuple2 Tagclass._System.___hFunc2OSO Tagclass._System.___hPartialFunc2OSO Tagclass._System.___hTotalFunc2OSO Tagclass._System.___hFunc3LLOO Tagclass._System.___hPartialFunc3LLOO Tagclass._System.___hTotalFunc3LLOO Tagclass._System.___hFunc1OS Tagclass._System.___hPartialFunc1OS Tagclass._System.___hTotalFunc1OS Tagclass._System.___hFunc0L Tagclass._System.___hPartialFunc0L Tagclass._System.___hTotalFunc0L Tagclass._System.___hFunc2LOO Tagclass._System.___hPartialFunc2LOO Tagclass._System.___hTotalFunc2LOO |##_System._tuple#0._#Make0| Tagclass._System.Tuple0 class._System.Tuple0 Tagclass._System.___hFunc1OL Tagclass._System.___hPartialFunc1OL Tagclass._System.___hTotalFunc1OL Tagclass._System.___hFunc1LO Tagclass._System.___hPartialFunc1LO Tagclass._System.___hTotalFunc1LO |##_System._tuple#2OLL._#Make2| Tagclass._System.Tuple2OLL class._System.Tuple2OLL Tagclass._System.___hFunc3LLOL Tagclass._System.___hPartialFunc3LLOL Tagclass._System.___hTotalFunc3LLOL Tagclass._System.___hFunc2SSO Tagclass._System.___hPartialFunc2SSO Tagclass._System.___hTotalFunc2SSO Tagclass._System.___hFunc1SS Tagclass._System.___hPartialFunc1SS Tagclass._System.___hTotalFunc1SS Tagclass._System.___hFunc1LL Tagclass._System.___hPartialFunc1LL Tagclass._System.___hTotalFunc1LL class.AsyncBetree__Refines__AsyncMap.__default Tagclass.AsyncBetree__Refines__AsyncMap.__default Tagclass.Betree.Variables Tagclass.QueryStates.QueryState Tagclass.ValueType.Value Tagclass.KeyType.Key Tagclass.NativeTypes.byte Tagclass.ValueMessage.Delta Tagclass.ReferenceType.Reference Tagclass.BetreeGraph.Node Tagclass.BetreeGraph.ReadOp Tagclass.AsyncBetree.Variables Tagclass.AsyncMapSpec.Variables Tagclass.UI.Op Tagclass.AsyncMapSpec.Step Tagclass.QueryStates.QueryDescent Tagclass.Betree__Refines__Map.LookupResult Tagclass.Betree.Step Tagclass.BetreeSpec.BetreeStep Tagclass.BetreeSpec.Redirect Tagclass.BetreeSpec.RootGrowth Tagclass.BetreeSpec.NodeFlush Tagclass.BetreeSpec.MessageInsertion Tagclass.BetreeSpec.SuccQuery Tagclass.BetreeSpec.LookupQuery Tagclass.AsyncBetree.Step Tagclass.MapSpec.Step Tagclass.MapSpec.Variables Tagclass.UI.RangeStart Tagclass.UI.SuccResult Tagclass.UI.RangeEnd Tagclass.NativeTypes.sbyte class.NativeTypes.sbyte class.NativeTypes.byte Tagclass.NativeTypes.int16 class.NativeTypes.int16 Tagclass.NativeTypes.uint16 class.NativeTypes.uint16 Tagclass.NativeTypes.int32 class.NativeTypes.int32 Tagclass.NativeTypes.uint32 class.NativeTypes.uint32 Tagclass.NativeTypes.int64 class.NativeTypes.int64 Tagclass.NativeTypes.uint64 class.NativeTypes.uint64 Tagclass.NativeTypes.nat8 class.NativeTypes.nat8 Tagclass.NativeTypes.nat16 class.NativeTypes.nat16 Tagclass.NativeTypes.nat32 class.NativeTypes.nat32 Tagclass.NativeTypes.nat64 class.NativeTypes.nat64 Tagclass.NativeTypes.uint128 class.NativeTypes.uint128 class.NativeTypes.__default Tagclass.NativeTypes.__default class.ValueType.__default Tagclass.ValueType.__default class.KeyType.__default Tagclass.KeyType.__default |##UI.RangeStart.SInclusive| |##UI.RangeStart.SExclusive| |##UI.RangeStart.NegativeInf| class.UI.RangeStart |##UI.RangeEnd.EInclusive| |##UI.RangeEnd.EExclusive| |##UI.RangeEnd.PositiveInf| class.UI.RangeEnd |##UI.SuccResult.SuccResult| class.UI.SuccResult |##UI.SuccResultList.SuccResultList| Tagclass.UI.SuccResultList class.UI.SuccResultList |##UI.Op.NoOp| |##UI.Op.SyncOp| |##UI.Op.CrashOp| |##UI.Op.PushSyncOp| |##UI.Op.PopSyncOp| |##UI.Op.GetOp| |##UI.Op.GetBeginOp| |##UI.Op.GetEndOp| |##UI.Op.PutOp| |##UI.Op.SuccOp| class.UI.Op class.UI.__default Tagclass.UI.__default class.SeqComparison.__default Tagclass.SeqComparison.__default |##Options.Option.None| Tagclass.Options.Option |##Options.Option.Some| class.Options.Option class.Options.__default Tagclass.Options.__default |##MapSpec.Variables.Variables| class.MapSpec.Variables |##MapSpec.Step.QueryStep| |##MapSpec.Step.WriteStep| |##MapSpec.Step.SuccStep| |##MapSpec.Step.StutterStep| class.MapSpec.Step class.MapSpec.__default Tagclass.MapSpec.__default class.MapRemove_s.__default Tagclass.MapRemove_s.__default class.Maps.__default Tagclass.Maps.__default |##AsyncMapSpec.Variables.Variables| class.AsyncMapSpec.Variables |##AsyncMapSpec.Step.QueryBeginStep| |##AsyncMapSpec.Step.QueryEndStep| |##AsyncMapSpec.Step.QueryStep| |##AsyncMapSpec.Step.WriteStep| |##AsyncMapSpec.Step.SuccStep| |##AsyncMapSpec.Step.StutterStep| class.AsyncMapSpec.Step class.AsyncMapSpec.__default Tagclass.AsyncMapSpec.__default class.SequencesLite.__default Tagclass.SequencesLite.__default class.Mathematics.__default Tagclass.Mathematics.__default class.Sequences.__default Tagclass.Sequences.__default class.ReferenceType.__default Tagclass.ReferenceType.__default class.LinearMaybe.predefined class.LinearMaybe.__default Tagclass.LinearMaybe.__default class.LinearExtern.predefined class.LinearExtern.__default Tagclass.LinearExtern.__default |##ValueMessage.Delta.NoDelta| class.ValueMessage.Delta class.ValueMessage.__default Tagclass.ValueMessage.__default Tagclass.ValueMessage.Message |##ValueMessage.Message.Define| |##ValueMessage.Message.Update| class.ValueMessage.Message |##BetreeGraph.Node.Node| class.BetreeGraph.Node class.BetreeGraph.__default Tagclass.BetreeGraph.__default |##BetreeGraph.Op.AllocOp| Tagclass.BetreeGraph.Op |##BetreeGraph.Op.WriteOp| class.BetreeGraph.Op |##BetreeGraph.ReadOp.ReadOp| class.BetreeGraph.ReadOp class.Sets.__default Tagclass.Sets.__default class.NativeArrays.__default Tagclass.NativeArrays.__default class.Byte__Order.__default Tagclass.Byte__Order.__default class.Lexicographic__Byte__Order.__default Tagclass.Lexicographic__Byte__Order.__default |##BetreeSpec.LookupQuery.LookupQuery| class.BetreeSpec.LookupQuery |##BetreeSpec.SuccQuery.SuccQuery| class.BetreeSpec.SuccQuery |##BetreeSpec.MessageInsertion.MessageInsertion| class.BetreeSpec.MessageInsertion |##BetreeSpec.NodeFlush.NodeFlush| class.BetreeSpec.NodeFlush |##BetreeSpec.RootGrowth.RootGrowth| class.BetreeSpec.RootGrowth |##BetreeSpec.Redirect.Redirect| class.BetreeSpec.Redirect |##BetreeSpec.BetreeStep.BetreeQuery| |##BetreeSpec.BetreeStep.BetreeSuccQuery| |##BetreeSpec.BetreeStep.BetreeInsert| |##BetreeSpec.BetreeStep.BetreeFlush| |##BetreeSpec.BetreeStep.BetreeGrow| |##BetreeSpec.BetreeStep.BetreeRedirect| class.BetreeSpec.BetreeStep class.BetreeSpec.__default Tagclass.BetreeSpec.__default class.BetreeBlockInterface.__default Tagclass.BetreeBlockInterface.__default Tagclass.BetreeBlockInterface.Variables Tagclass.BetreeBlockInterface.Step |##BetreeBlockInterface.Variables.Variables| class.BetreeBlockInterface.Variables |##BetreeBlockInterface.Step.TransactionStep| |##BetreeBlockInterface.Step.GCStep| |##BetreeBlockInterface.Step.StutterStep| class.BetreeBlockInterface.Step |##Betree.Variables.Variables| class.Betree.Variables |##Betree.Step.BetreeStep| |##Betree.Step.GCStep| |##Betree.Step.StutterStep| class.Betree.Step class.Betree.__default Tagclass.Betree.__default |##QueryStates.QueryState.InProgress| |##QueryStates.QueryState.Finished| class.QueryStates.QueryState |##QueryStates.QueryDescent.QueryDescent| class.QueryStates.QueryDescent class.QueryStates.__default Tagclass.QueryStates.__default class.BetreeInv.__default Tagclass.BetreeInv.__default |##AsyncBetree.Variables.Variables| class.AsyncBetree.Variables |##AsyncBetree.Step.BasicStep| |##AsyncBetree.Step.QueryBeginStep| |##AsyncBetree.Step.QueryEndStep| |##AsyncBetree.Step.QueryAdvanceStep| |##AsyncBetree.Step.StutterStep| class.AsyncBetree.Step class.AsyncBetree.__default Tagclass.AsyncBetree.__default |##Betree_Refines_Map.LookupResult.LookupResult| class.Betree__Refines__Map.LookupResult class.Betree__Refines__Map.__default Tagclass.Betree__Refines__Map.__default tytagFamily$nat tytagFamily$object tytagFamily$array |tytagFamily$_#Func1| |tytagFamily$_#PartialFunc1| |tytagFamily$_#TotalFunc1| |tytagFamily$_#Func0| |tytagFamily$_#PartialFunc0| |tytagFamily$_#TotalFunc0| tytagFamily$_default |tytagFamily$_#Func2| |tytagFamily$_#PartialFunc2| |tytagFamily$_#TotalFunc2| |tytagFamily$_#Func4| |tytagFamily$_#PartialFunc4| |tytagFamily$_#TotalFunc4| |tytagFamily$_#Func3| |tytagFamily$_#PartialFunc3| |tytagFamily$_#TotalFunc3| |tytagFamily$_#Func5| |tytagFamily$_#PartialFunc5| |tytagFamily$_#TotalFunc5| |tytagFamily$_#Func6| |tytagFamily$_#PartialFunc6| |tytagFamily$_#TotalFunc6| |tytagFamily$_tuple#2| |tytagFamily$_#Func2OSO| |tytagFamily$_#PartialFunc2OSO| |tytagFamily$_#TotalFunc2OSO| |tytagFamily$_#Func3LLOO| |tytagFamily$_#PartialFunc3LLOO| |tytagFamily$_#TotalFunc3LLOO| |tytagFamily$_#Func1OS| |tytagFamily$_#PartialFunc1OS| |tytagFamily$_#TotalFunc1OS| |tytagFamily$_#Func0L| |tytagFamily$_#PartialFunc0L| |tytagFamily$_#TotalFunc0L| |tytagFamily$_#Func2LOO| |tytagFamily$_#PartialFunc2LOO| |tytagFamily$_#TotalFunc2LOO| |tytagFamily$_tuple#0| |tytagFamily$_#Func1OL| |tytagFamily$_#PartialFunc1OL| |tytagFamily$_#TotalFunc1OL| |tytagFamily$_#Func1LO| |tytagFamily$_#PartialFunc1LO| |tytagFamily$_#TotalFunc1LO| |tytagFamily$_tuple#2OLL| |tytagFamily$_#Func3LLOL| |tytagFamily$_#PartialFunc3LLOL| |tytagFamily$_#TotalFunc3LLOL| |tytagFamily$_#Func2SSO| |tytagFamily$_#PartialFunc2SSO| |tytagFamily$_#TotalFunc2SSO| |tytagFamily$_#Func1SS| |tytagFamily$_#PartialFunc1SS| |tytagFamily$_#TotalFunc1SS| |tytagFamily$_#Func1LL| |tytagFamily$_#PartialFunc1LL| |tytagFamily$_#TotalFunc1LL| tytagFamily$Variables tytagFamily$QueryState tytagFamily$Value tytagFamily$Key tytagFamily$byte tytagFamily$Delta tytagFamily$Reference tytagFamily$Node tytagFamily$ReadOp tytagFamily$Op tytagFamily$Step tytagFamily$QueryDescent tytagFamily$LookupResult tytagFamily$BetreeStep tytagFamily$Redirect tytagFamily$RootGrowth tytagFamily$NodeFlush tytagFamily$MessageInsertion tytagFamily$SuccQuery tytagFamily$LookupQuery tytagFamily$RangeStart tytagFamily$SuccResult tytagFamily$RangeEnd tytagFamily$sbyte tytagFamily$int16 tytagFamily$uint16 tytagFamily$int32 tytagFamily$uint32 tytagFamily$int64 tytagFamily$uint64 tytagFamily$nat8 tytagFamily$nat16 tytagFamily$nat32 tytagFamily$nat64 tytagFamily$uint128 tytagFamily$SuccResultList tytagFamily$Option tytagFamily$Message) )
(assert $$Language$Dafny)
(assert (forall ((arg0@@13 Int) ) (! (= (type (TBitvector arg0@@13)) TyType) :qid |funType:TBitvector| :pattern ( (TBitvector arg0@@13)) )))
(assert (forall ((w Int) ) (! (= (Inv0_TBitvector (TBitvector w)) w) :qid |DafnyPreludebpl.34:15| :skolemid |347| :pattern ( (TBitvector w)) )))
(assert  (and (forall ((arg0@@14 T@U) ) (! (= (type (TSet arg0@@14)) TyType) :qid |funType:TSet| :pattern ( (TSet arg0@@14)) )) (forall ((arg0@@15 T@U) ) (! (= (type (Inv0_TSet arg0@@15)) TyType) :qid |funType:Inv0_TSet| :pattern ( (Inv0_TSet arg0@@15)) ))))
(assert (forall ((t T@U) ) (!  (=> (= (type t) TyType) (= (Inv0_TSet (TSet t)) t)) :qid |DafnyPreludebpl.36:15| :skolemid |348| :pattern ( (TSet t)) )))
(assert  (and (forall ((arg0@@16 T@U) ) (! (= (type (TISet arg0@@16)) TyType) :qid |funType:TISet| :pattern ( (TISet arg0@@16)) )) (forall ((arg0@@17 T@U) ) (! (= (type (Inv0_TISet arg0@@17)) TyType) :qid |funType:Inv0_TISet| :pattern ( (Inv0_TISet arg0@@17)) ))))
(assert (forall ((t@@0 T@U) ) (!  (=> (= (type t@@0) TyType) (= (Inv0_TISet (TISet t@@0)) t@@0)) :qid |DafnyPreludebpl.38:15| :skolemid |349| :pattern ( (TISet t@@0)) )))
(assert  (and (forall ((arg0@@18 T@U) ) (! (= (type (TSeq arg0@@18)) TyType) :qid |funType:TSeq| :pattern ( (TSeq arg0@@18)) )) (forall ((arg0@@19 T@U) ) (! (= (type (Inv0_TSeq arg0@@19)) TyType) :qid |funType:Inv0_TSeq| :pattern ( (Inv0_TSeq arg0@@19)) ))))
(assert (forall ((t@@1 T@U) ) (!  (=> (= (type t@@1) TyType) (= (Inv0_TSeq (TSeq t@@1)) t@@1)) :qid |DafnyPreludebpl.40:15| :skolemid |350| :pattern ( (TSeq t@@1)) )))
(assert  (and (forall ((arg0@@20 T@U) ) (! (= (type (TMultiSet arg0@@20)) TyType) :qid |funType:TMultiSet| :pattern ( (TMultiSet arg0@@20)) )) (forall ((arg0@@21 T@U) ) (! (= (type (Inv0_TMultiSet arg0@@21)) TyType) :qid |funType:Inv0_TMultiSet| :pattern ( (Inv0_TMultiSet arg0@@21)) ))))
(assert (forall ((t@@2 T@U) ) (!  (=> (= (type t@@2) TyType) (= (Inv0_TMultiSet (TMultiSet t@@2)) t@@2)) :qid |DafnyPreludebpl.42:15| :skolemid |351| :pattern ( (TMultiSet t@@2)) )))
(assert  (and (forall ((arg0@@22 T@U) (arg1 T@U) ) (! (= (type (TMap arg0@@22 arg1)) TyType) :qid |funType:TMap| :pattern ( (TMap arg0@@22 arg1)) )) (forall ((arg0@@23 T@U) ) (! (= (type (Inv0_TMap arg0@@23)) TyType) :qid |funType:Inv0_TMap| :pattern ( (Inv0_TMap arg0@@23)) ))))
(assert (forall ((t@@3 T@U) (u T@U) ) (!  (=> (and (= (type t@@3) TyType) (= (type u) TyType)) (= (Inv0_TMap (TMap t@@3 u)) t@@3)) :qid |DafnyPreludebpl.45:15| :skolemid |352| :pattern ( (TMap t@@3 u)) )))
(assert (forall ((arg0@@24 T@U) ) (! (= (type (Inv1_TMap arg0@@24)) TyType) :qid |funType:Inv1_TMap| :pattern ( (Inv1_TMap arg0@@24)) )))
(assert (forall ((t@@4 T@U) (u@@0 T@U) ) (!  (=> (and (= (type t@@4) TyType) (= (type u@@0) TyType)) (= (Inv1_TMap (TMap t@@4 u@@0)) u@@0)) :qid |DafnyPreludebpl.46:15| :skolemid |353| :pattern ( (TMap t@@4 u@@0)) )))
(assert  (and (forall ((arg0@@25 T@U) (arg1@@0 T@U) ) (! (= (type (TIMap arg0@@25 arg1@@0)) TyType) :qid |funType:TIMap| :pattern ( (TIMap arg0@@25 arg1@@0)) )) (forall ((arg0@@26 T@U) ) (! (= (type (Inv0_TIMap arg0@@26)) TyType) :qid |funType:Inv0_TIMap| :pattern ( (Inv0_TIMap arg0@@26)) ))))
(assert (forall ((t@@5 T@U) (u@@1 T@U) ) (!  (=> (and (= (type t@@5) TyType) (= (type u@@1) TyType)) (= (Inv0_TIMap (TIMap t@@5 u@@1)) t@@5)) :qid |DafnyPreludebpl.49:15| :skolemid |354| :pattern ( (TIMap t@@5 u@@1)) )))
(assert (forall ((arg0@@27 T@U) ) (! (= (type (Inv1_TIMap arg0@@27)) TyType) :qid |funType:Inv1_TIMap| :pattern ( (Inv1_TIMap arg0@@27)) )))
(assert (forall ((t@@6 T@U) (u@@2 T@U) ) (!  (=> (and (= (type t@@6) TyType) (= (type u@@2) TyType)) (= (Inv1_TIMap (TIMap t@@6 u@@2)) u@@2)) :qid |DafnyPreludebpl.50:15| :skolemid |355| :pattern ( (TIMap t@@6 u@@2)) )))
(assert (forall ((arg0@@28 T@U) ) (! (= (type (Tag arg0@@28)) TyTagType) :qid |funType:Tag| :pattern ( (Tag arg0@@28)) )))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert (= (Tag TORDINAL) TagORDINAL))
(assert (forall ((t@@7 T@U) ) (!  (=> (= (type t@@7) TyType) (= (Tag (TSet t@@7)) TagSet)) :qid |DafnyPreludebpl.76:15| :skolemid |356| :pattern ( (TSet t@@7)) )))
(assert (forall ((t@@8 T@U) ) (!  (=> (= (type t@@8) TyType) (= (Tag (TISet t@@8)) TagISet)) :qid |DafnyPreludebpl.77:15| :skolemid |357| :pattern ( (TISet t@@8)) )))
(assert (forall ((t@@9 T@U) ) (!  (=> (= (type t@@9) TyType) (= (Tag (TMultiSet t@@9)) TagMultiSet)) :qid |DafnyPreludebpl.78:15| :skolemid |358| :pattern ( (TMultiSet t@@9)) )))
(assert (forall ((t@@10 T@U) ) (!  (=> (= (type t@@10) TyType) (= (Tag (TSeq t@@10)) TagSeq)) :qid |DafnyPreludebpl.79:15| :skolemid |359| :pattern ( (TSeq t@@10)) )))
(assert (forall ((t@@11 T@U) (u@@3 T@U) ) (!  (=> (and (= (type t@@11) TyType) (= (type u@@3) TyType)) (= (Tag (TMap t@@11 u@@3)) TagMap)) :qid |DafnyPreludebpl.80:15| :skolemid |360| :pattern ( (TMap t@@11 u@@3)) )))
(assert (forall ((t@@12 T@U) (u@@4 T@U) ) (!  (=> (and (= (type t@@12) TyType) (= (type u@@4) TyType)) (= (Tag (TIMap t@@12 u@@4)) TagIMap)) :qid |DafnyPreludebpl.81:15| :skolemid |361| :pattern ( (TIMap t@@12 u@@4)) )))
(assert (forall ((arg0@@29 T@U) ) (! (let ((T (type arg0@@29))) (= (type (Lit arg0@@29)) T)) :qid |funType:Lit| :pattern ( (Lit arg0@@29)) )))
(assert (forall ((x@@8 T@U) ) (! (= (Lit x@@8) x@@8) :qid |DafnyPreludebpl.89:29| :skolemid |362| :pattern ( (Lit x@@8)) )))
(assert  (and (= (Ctor BoxType) 13) (forall ((arg0@@30 T@U) ) (! (= (type ($Box arg0@@30)) BoxType) :qid |funType:$Box| :pattern ( ($Box arg0@@30)) ))))
(assert (forall ((x@@9 T@U) ) (! (= ($Box (Lit x@@9)) (Lit ($Box x@@9))) :qid |DafnyPreludebpl.90:18| :skolemid |363| :pattern ( ($Box (Lit x@@9))) )))
(assert (forall ((x@@10 Int) ) (! (= (LitInt x@@10) x@@10) :qid |DafnyPreludebpl.95:29| :skolemid |364| :pattern ( (LitInt x@@10)) )))
(assert (forall ((x@@11 Int) ) (! (= ($Box (int_2_U (LitInt x@@11))) (Lit ($Box (int_2_U x@@11)))) :qid |DafnyPreludebpl.96:15| :skolemid |365| :pattern ( ($Box (int_2_U (LitInt x@@11)))) )))
(assert (forall ((x@@12 Real) ) (! (= (LitReal x@@12) x@@12) :qid |DafnyPreludebpl.97:30| :skolemid |366| :pattern ( (LitReal x@@12)) )))
(assert (forall ((x@@13 Real) ) (! (= ($Box (real_2_U (LitReal x@@13))) (Lit ($Box (real_2_U x@@13)))) :qid |DafnyPreludebpl.98:15| :skolemid |367| :pattern ( ($Box (real_2_U (LitReal x@@13)))) )))
(assert  (and (= (Ctor charType) 14) (forall ((arg0@@31 Int) ) (! (= (type (|char#FromInt| arg0@@31)) charType) :qid |funType:char#FromInt| :pattern ( (|char#FromInt| arg0@@31)) ))))
(assert (forall ((ch T@U) ) (!  (=> (= (type ch) charType) (and (and (= (|char#FromInt| (|char#ToInt| ch)) ch) (<= 0 (|char#ToInt| ch))) (< (|char#ToInt| ch) 65536))) :qid |DafnyPreludebpl.107:15| :skolemid |368| :pattern ( (|char#ToInt| ch)) )))
(assert (forall ((n Int) ) (!  (=> (and (<= 0 n) (< n 65536)) (= (|char#ToInt| (|char#FromInt| n)) n)) :qid |DafnyPreludebpl.111:15| :skolemid |369| :pattern ( (|char#FromInt| n)) )))
(assert (forall ((arg0@@32 T@U) (arg1@@1 T@U) ) (! (= (type (|char#Plus| arg0@@32 arg1@@1)) charType) :qid |funType:char#Plus| :pattern ( (|char#Plus| arg0@@32 arg1@@1)) )))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (and (= (type a) charType) (= (type b) charType)) (= (|char#Plus| a b) (|char#FromInt| (+ (|char#ToInt| a) (|char#ToInt| b))))) :qid |DafnyPreludebpl.117:15| :skolemid |370| :pattern ( (|char#Plus| a b)) )))
(assert (forall ((arg0@@33 T@U) (arg1@@2 T@U) ) (! (= (type (|char#Minus| arg0@@33 arg1@@2)) charType) :qid |funType:char#Minus| :pattern ( (|char#Minus| arg0@@33 arg1@@2)) )))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (= (type a@@0) charType) (= (type b@@0) charType)) (= (|char#Minus| a@@0 b@@0) (|char#FromInt| (- (|char#ToInt| a@@0) (|char#ToInt| b@@0))))) :qid |DafnyPreludebpl.120:15| :skolemid |371| :pattern ( (|char#Minus| a@@0 b@@0)) )))
(assert (forall ((T@@0 T@T) (arg0@@34 T@U) ) (! (= (type ($Unbox T@@0 arg0@@34)) T@@0) :qid |funType:$Unbox| :pattern ( ($Unbox T@@0 arg0@@34)) )))
(assert (forall ((x@@14 T@U) ) (! (let ((T@@1 (type x@@14))) (= ($Unbox T@@1 ($Box x@@14)) x@@14)) :qid |DafnyPreludebpl.141:18| :skolemid |372| :pattern ( ($Box x@@14)) )))
(assert (forall ((bx T@U) ) (!  (=> (and (= (type bx) BoxType) ($IsBox bx TInt)) (and (= ($Box ($Unbox intType bx)) bx) ($Is ($Unbox intType bx) TInt))) :qid |DafnyPreludebpl.143:15| :skolemid |373| :pattern ( ($IsBox bx TInt)) )))
(assert (forall ((bx@@0 T@U) ) (!  (=> (and (= (type bx@@0) BoxType) ($IsBox bx@@0 TReal)) (and (= ($Box ($Unbox realType bx@@0)) bx@@0) ($Is ($Unbox realType bx@@0) TReal))) :qid |DafnyPreludebpl.146:15| :skolemid |374| :pattern ( ($IsBox bx@@0 TReal)) )))
(assert (forall ((bx@@1 T@U) ) (!  (=> (and (= (type bx@@1) BoxType) ($IsBox bx@@1 TBool)) (and (= ($Box ($Unbox boolType bx@@1)) bx@@1) ($Is ($Unbox boolType bx@@1) TBool))) :qid |DafnyPreludebpl.149:15| :skolemid |375| :pattern ( ($IsBox bx@@1 TBool)) )))
(assert (forall ((bx@@2 T@U) ) (!  (=> (and (= (type bx@@2) BoxType) ($IsBox bx@@2 TChar)) (and (= ($Box ($Unbox charType bx@@2)) bx@@2) ($Is ($Unbox charType bx@@2) TChar))) :qid |DafnyPreludebpl.152:15| :skolemid |376| :pattern ( ($IsBox bx@@2 TChar)) )))
(assert  (and (and (and (and (and (and (forall ((arg0@@35 T@T) (arg1@@3 T@T) ) (! (= (Ctor (MapType0Type arg0@@35 arg1@@3)) 15) :qid |ctor:MapType0Type| )) (forall ((arg0@@36 T@T) (arg1@@4 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@36 arg1@@4)) arg0@@36) :qid |typeInv:MapType0TypeInv0| :pattern ( (MapType0Type arg0@@36 arg1@@4)) ))) (forall ((arg0@@37 T@T) (arg1@@5 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@37 arg1@@5)) arg1@@5) :qid |typeInv:MapType0TypeInv1| :pattern ( (MapType0Type arg0@@37 arg1@@5)) ))) (forall ((arg0@@38 T@U) (arg1@@6 T@U) ) (! (let ((aVar1 (MapType0TypeInv1 (type arg0@@38)))) (= (type (MapType0Select arg0@@38 arg1@@6)) aVar1)) :qid |funType:MapType0Select| :pattern ( (MapType0Select arg0@@38 arg1@@6)) ))) (forall ((arg0@@39 T@U) (arg1@@7 T@U) (arg2 T@U) ) (! (let ((aVar1@@0 (type arg2))) (let ((aVar0 (type arg1@@7))) (= (type (MapType0Store arg0@@39 arg1@@7 arg2)) (MapType0Type aVar0 aVar1@@0)))) :qid |funType:MapType0Store| :pattern ( (MapType0Store arg0@@39 arg1@@7 arg2)) ))) (forall ((m T@U) (x0 T@U) (val T@U) ) (! (let ((aVar1@@1 (MapType0TypeInv1 (type m)))) (=> (= (type val) aVar1@@1) (= (MapType0Select (MapType0Store m x0 val) x0) val))) :qid |mapAx0:MapType0Select| :weight 0 ))) (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 val@@0) y0) (MapType0Select m@@0 y0))) :qid |mapAx1:MapType0Select:0| :weight 0 )) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (y0@@0 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@1 x0@@1 val@@1) y0@@0) (MapType0Select m@@1 y0@@0))) :qid |mapAx2:MapType0Select| :weight 0 )))))
(assert (forall ((bx@@3 T@U) ) (!  (=> (and (= (type bx@@3) BoxType) ($IsBox bx@@3 (TBitvector 0))) (and (= ($Box ($Unbox intType bx@@3)) bx@@3) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@3) (TBitvector 0)))) :qid |DafnyPreludebpl.158:15| :skolemid |377| :pattern ( ($IsBox bx@@3 (TBitvector 0))) )))
(assert (forall ((bx@@4 T@U) (t@@13 T@U) ) (!  (=> (and (and (= (type bx@@4) BoxType) (= (type t@@13) TyType)) ($IsBox bx@@4 (TSet t@@13))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@4)) bx@@4) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@4) (TSet t@@13)))) :qid |DafnyPreludebpl.162:15| :skolemid |378| :pattern ( ($IsBox bx@@4 (TSet t@@13))) )))
(assert (forall ((bx@@5 T@U) (t@@14 T@U) ) (!  (=> (and (and (= (type bx@@5) BoxType) (= (type t@@14) TyType)) ($IsBox bx@@5 (TISet t@@14))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@5)) bx@@5) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@5) (TISet t@@14)))) :qid |DafnyPreludebpl.165:15| :skolemid |379| :pattern ( ($IsBox bx@@5 (TISet t@@14))) )))
(assert (forall ((bx@@6 T@U) (t@@15 T@U) ) (!  (=> (and (and (= (type bx@@6) BoxType) (= (type t@@15) TyType)) ($IsBox bx@@6 (TMultiSet t@@15))) (and (= ($Box ($Unbox (MapType0Type BoxType intType) bx@@6)) bx@@6) ($Is ($Unbox (MapType0Type BoxType intType) bx@@6) (TMultiSet t@@15)))) :qid |DafnyPreludebpl.168:15| :skolemid |380| :pattern ( ($IsBox bx@@6 (TMultiSet t@@15))) )))
(assert  (and (forall ((arg0@@40 T@T) ) (! (= (Ctor (SeqType arg0@@40)) 16) :qid |ctor:SeqType| )) (forall ((arg0@@41 T@T) ) (! (= (SeqTypeInv0 (SeqType arg0@@41)) arg0@@41) :qid |typeInv:SeqTypeInv0| :pattern ( (SeqType arg0@@41)) ))))
(assert (forall ((bx@@7 T@U) (t@@16 T@U) ) (!  (=> (and (and (= (type bx@@7) BoxType) (= (type t@@16) TyType)) ($IsBox bx@@7 (TSeq t@@16))) (and (= ($Box ($Unbox (SeqType BoxType) bx@@7)) bx@@7) ($Is ($Unbox (SeqType BoxType) bx@@7) (TSeq t@@16)))) :qid |DafnyPreludebpl.171:15| :skolemid |381| :pattern ( ($IsBox bx@@7 (TSeq t@@16))) )))
(assert  (and (and (forall ((arg0@@42 T@T) (arg1@@8 T@T) ) (! (= (Ctor (MapType arg0@@42 arg1@@8)) 17) :qid |ctor:MapType| )) (forall ((arg0@@43 T@T) (arg1@@9 T@T) ) (! (= (MapTypeInv0 (MapType arg0@@43 arg1@@9)) arg0@@43) :qid |typeInv:MapTypeInv0| :pattern ( (MapType arg0@@43 arg1@@9)) ))) (forall ((arg0@@44 T@T) (arg1@@10 T@T) ) (! (= (MapTypeInv1 (MapType arg0@@44 arg1@@10)) arg1@@10) :qid |typeInv:MapTypeInv1| :pattern ( (MapType arg0@@44 arg1@@10)) ))))
(assert (forall ((bx@@8 T@U) (s T@U) (t@@17 T@U) ) (!  (=> (and (and (and (= (type bx@@8) BoxType) (= (type s) TyType)) (= (type t@@17) TyType)) ($IsBox bx@@8 (TMap s t@@17))) (and (= ($Box ($Unbox (MapType BoxType BoxType) bx@@8)) bx@@8) ($Is ($Unbox (MapType BoxType BoxType) bx@@8) (TMap s t@@17)))) :qid |DafnyPreludebpl.174:15| :skolemid |382| :pattern ( ($IsBox bx@@8 (TMap s t@@17))) )))
(assert  (and (and (forall ((arg0@@45 T@T) (arg1@@11 T@T) ) (! (= (Ctor (IMapType arg0@@45 arg1@@11)) 18) :qid |ctor:IMapType| )) (forall ((arg0@@46 T@T) (arg1@@12 T@T) ) (! (= (IMapTypeInv0 (IMapType arg0@@46 arg1@@12)) arg0@@46) :qid |typeInv:IMapTypeInv0| :pattern ( (IMapType arg0@@46 arg1@@12)) ))) (forall ((arg0@@47 T@T) (arg1@@13 T@T) ) (! (= (IMapTypeInv1 (IMapType arg0@@47 arg1@@13)) arg1@@13) :qid |typeInv:IMapTypeInv1| :pattern ( (IMapType arg0@@47 arg1@@13)) ))))
(assert (forall ((bx@@9 T@U) (s@@0 T@U) (t@@18 T@U) ) (!  (=> (and (and (and (= (type bx@@9) BoxType) (= (type s@@0) TyType)) (= (type t@@18) TyType)) ($IsBox bx@@9 (TIMap s@@0 t@@18))) (and (= ($Box ($Unbox (IMapType BoxType BoxType) bx@@9)) bx@@9) ($Is ($Unbox (IMapType BoxType BoxType) bx@@9) (TIMap s@@0 t@@18)))) :qid |DafnyPreludebpl.177:15| :skolemid |383| :pattern ( ($IsBox bx@@9 (TIMap s@@0 t@@18))) )))
(assert (forall ((v T@U) (t@@19 T@U) ) (!  (=> (= (type t@@19) TyType) (= ($IsBox ($Box v) t@@19) ($Is v t@@19))) :qid |DafnyPreludebpl.181:18| :skolemid |384| :pattern ( ($IsBox ($Box v) t@@19)) )))
(assert  (and (and (and (and (and (forall ((arg0@@48 T@U) (arg1@@14 T@U) ) (! (let ((alpha@@1 (FieldTypeInv0 (type arg1@@14)))) (= (type (MapType1Select arg0@@48 arg1@@14)) alpha@@1)) :qid |funType:MapType1Select| :pattern ( (MapType1Select arg0@@48 arg1@@14)) )) (= (Ctor MapType1Type) 19)) (forall ((arg0@@49 T@U) (arg1@@15 T@U) (arg2@@0 T@U) ) (! (= (type (MapType1Store arg0@@49 arg1@@15 arg2@@0)) MapType1Type) :qid |funType:MapType1Store| :pattern ( (MapType1Store arg0@@49 arg1@@15 arg2@@0)) ))) (forall ((m@@2 T@U) (x0@@2 T@U) (val@@2 T@U) ) (! (let ((alpha@@2 (FieldTypeInv0 (type x0@@2)))) (=> (= (type val@@2) alpha@@2) (= (MapType1Select (MapType1Store m@@2 x0@@2 val@@2) x0@@2) val@@2))) :qid |mapAx0:MapType1Select| :weight 0 ))) (and (forall ((val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 val@@3) y0@@1) (MapType1Select m@@3 y0@@1))) :qid |mapAx1:MapType1Select:0| :weight 0 )) (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@4 x0@@4 val@@4) y0@@2) (MapType1Select m@@4 y0@@2))) :qid |mapAx2:MapType1Select| :weight 0 )))) (= (Ctor refType) 20)))
(assert (forall ((v@@0 T@U) (t@@20 T@U) (h T@U) ) (!  (=> (and (= (type t@@20) TyType) (= (type h) (MapType0Type refType MapType1Type))) (= ($IsAllocBox ($Box v@@0) t@@20 h) ($IsAlloc v@@0 t@@20 h))) :qid |DafnyPreludebpl.184:18| :skolemid |385| :pattern ( ($IsAllocBox ($Box v@@0) t@@20 h)) )))
(assert (forall ((v@@1 T@U) ) (!  (=> (= (type v@@1) intType) ($Is v@@1 TInt)) :qid |DafnyPreludebpl.202:14| :skolemid |386| :pattern ( ($Is v@@1 TInt)) )))
(assert (forall ((v@@2 T@U) ) (!  (=> (= (type v@@2) realType) ($Is v@@2 TReal)) :qid |DafnyPreludebpl.203:14| :skolemid |387| :pattern ( ($Is v@@2 TReal)) )))
(assert (forall ((v@@3 T@U) ) (!  (=> (= (type v@@3) boolType) ($Is v@@3 TBool)) :qid |DafnyPreludebpl.204:14| :skolemid |388| :pattern ( ($Is v@@3 TBool)) )))
(assert (forall ((v@@4 T@U) ) (!  (=> (= (type v@@4) charType) ($Is v@@4 TChar)) :qid |DafnyPreludebpl.205:14| :skolemid |389| :pattern ( ($Is v@@4 TChar)) )))
(assert (forall ((v@@5 T@U) ) (!  (=> (= (type v@@5) BoxType) ($Is v@@5 TORDINAL)) :qid |DafnyPreludebpl.206:14| :skolemid |390| :pattern ( ($Is v@@5 TORDINAL)) )))
(assert (forall ((h@@0 T@U) (v@@6 T@U) ) (!  (=> (and (= (type h@@0) (MapType0Type refType MapType1Type)) (= (type v@@6) intType)) ($IsAlloc v@@6 TInt h@@0)) :qid |DafnyPreludebpl.208:14| :skolemid |391| :pattern ( ($IsAlloc v@@6 TInt h@@0)) )))
(assert (forall ((h@@1 T@U) (v@@7 T@U) ) (!  (=> (and (= (type h@@1) (MapType0Type refType MapType1Type)) (= (type v@@7) realType)) ($IsAlloc v@@7 TReal h@@1)) :qid |DafnyPreludebpl.209:14| :skolemid |392| :pattern ( ($IsAlloc v@@7 TReal h@@1)) )))
(assert (forall ((h@@2 T@U) (v@@8 T@U) ) (!  (=> (and (= (type h@@2) (MapType0Type refType MapType1Type)) (= (type v@@8) boolType)) ($IsAlloc v@@8 TBool h@@2)) :qid |DafnyPreludebpl.210:14| :skolemid |393| :pattern ( ($IsAlloc v@@8 TBool h@@2)) )))
(assert (forall ((h@@3 T@U) (v@@9 T@U) ) (!  (=> (and (= (type h@@3) (MapType0Type refType MapType1Type)) (= (type v@@9) charType)) ($IsAlloc v@@9 TChar h@@3)) :qid |DafnyPreludebpl.211:14| :skolemid |394| :pattern ( ($IsAlloc v@@9 TChar h@@3)) )))
(assert (forall ((h@@4 T@U) (v@@10 T@U) ) (!  (=> (and (= (type h@@4) (MapType0Type refType MapType1Type)) (= (type v@@10) BoxType)) ($IsAlloc v@@10 TORDINAL h@@4)) :qid |DafnyPreludebpl.212:14| :skolemid |395| :pattern ( ($IsAlloc v@@10 TORDINAL h@@4)) )))
(assert (forall ((v@@11 T@U) ) (!  (=> (= (type v@@11) intType) ($Is v@@11 (TBitvector 0))) :qid |DafnyPreludebpl.216:15| :skolemid |396| :pattern ( ($Is v@@11 (TBitvector 0))) )))
(assert (forall ((v@@12 T@U) (h@@5 T@U) ) (!  (=> (and (= (type v@@12) intType) (= (type h@@5) (MapType0Type refType MapType1Type))) ($IsAlloc v@@12 (TBitvector 0) h@@5)) :qid |DafnyPreludebpl.217:15| :skolemid |397| :pattern ( ($IsAlloc v@@12 (TBitvector 0) h@@5)) )))
(assert (forall ((v@@13 T@U) (t0 T@U) ) (!  (=> (and (= (type v@@13) (MapType0Type BoxType boolType)) (= (type t0) TyType)) (= ($Is v@@13 (TSet t0)) (forall ((bx@@10 T@U) ) (!  (=> (and (= (type bx@@10) BoxType) (U_2_bool (MapType0Select v@@13 bx@@10))) ($IsBox bx@@10 t0)) :qid |DafnyPreludebpl.221:11| :skolemid |398| :pattern ( (MapType0Select v@@13 bx@@10)) )))) :qid |DafnyPreludebpl.219:15| :skolemid |399| :pattern ( ($Is v@@13 (TSet t0))) )))
(assert (forall ((v@@14 T@U) (t0@@0 T@U) ) (!  (=> (and (= (type v@@14) (MapType0Type BoxType boolType)) (= (type t0@@0) TyType)) (= ($Is v@@14 (TISet t0@@0)) (forall ((bx@@11 T@U) ) (!  (=> (and (= (type bx@@11) BoxType) (U_2_bool (MapType0Select v@@14 bx@@11))) ($IsBox bx@@11 t0@@0)) :qid |DafnyPreludebpl.225:11| :skolemid |400| :pattern ( (MapType0Select v@@14 bx@@11)) )))) :qid |DafnyPreludebpl.223:15| :skolemid |401| :pattern ( ($Is v@@14 (TISet t0@@0))) )))
(assert (forall ((v@@15 T@U) (t0@@1 T@U) ) (!  (=> (and (= (type v@@15) (MapType0Type BoxType intType)) (= (type t0@@1) TyType)) (= ($Is v@@15 (TMultiSet t0@@1)) (forall ((bx@@12 T@U) ) (!  (=> (and (= (type bx@@12) BoxType) (< 0 (U_2_int (MapType0Select v@@15 bx@@12)))) ($IsBox bx@@12 t0@@1)) :qid |DafnyPreludebpl.229:11| :skolemid |402| :pattern ( (MapType0Select v@@15 bx@@12)) )))) :qid |DafnyPreludebpl.227:15| :skolemid |403| :pattern ( ($Is v@@15 (TMultiSet t0@@1))) )))
(assert (forall ((v@@16 T@U) (t0@@2 T@U) ) (!  (=> (and (and (= (type v@@16) (MapType0Type BoxType intType)) (= (type t0@@2) TyType)) ($Is v@@16 (TMultiSet t0@@2))) ($IsGoodMultiSet v@@16)) :qid |DafnyPreludebpl.231:15| :skolemid |404| :pattern ( ($Is v@@16 (TMultiSet t0@@2))) )))
(assert (forall ((arg0@@50 T@U) (arg1@@16 Int) ) (! (let ((T@@2 (SeqTypeInv0 (type arg0@@50)))) (= (type (|Seq#Index| arg0@@50 arg1@@16)) T@@2)) :qid |funType:Seq#Index| :pattern ( (|Seq#Index| arg0@@50 arg1@@16)) )))
(assert (forall ((v@@17 T@U) (t0@@3 T@U) ) (!  (=> (and (= (type v@@17) (SeqType BoxType)) (= (type t0@@3) TyType)) (= ($Is v@@17 (TSeq t0@@3)) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@17))) ($IsBox (|Seq#Index| v@@17 i) t0@@3)) :qid |DafnyPreludebpl.235:11| :skolemid |405| :pattern ( (|Seq#Index| v@@17 i)) )))) :qid |DafnyPreludebpl.233:15| :skolemid |406| :pattern ( ($Is v@@17 (TSeq t0@@3))) )))
(assert (forall ((v@@18 T@U) (t0@@4 T@U) (h@@6 T@U) ) (!  (=> (and (and (= (type v@@18) (MapType0Type BoxType boolType)) (= (type t0@@4) TyType)) (= (type h@@6) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@18 (TSet t0@@4) h@@6) (forall ((bx@@13 T@U) ) (!  (=> (and (= (type bx@@13) BoxType) (U_2_bool (MapType0Select v@@18 bx@@13))) ($IsAllocBox bx@@13 t0@@4 h@@6)) :qid |DafnyPreludebpl.240:11| :skolemid |407| :pattern ( (MapType0Select v@@18 bx@@13)) )))) :qid |DafnyPreludebpl.238:15| :skolemid |408| :pattern ( ($IsAlloc v@@18 (TSet t0@@4) h@@6)) )))
(assert (forall ((v@@19 T@U) (t0@@5 T@U) (h@@7 T@U) ) (!  (=> (and (and (= (type v@@19) (MapType0Type BoxType boolType)) (= (type t0@@5) TyType)) (= (type h@@7) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@19 (TISet t0@@5) h@@7) (forall ((bx@@14 T@U) ) (!  (=> (and (= (type bx@@14) BoxType) (U_2_bool (MapType0Select v@@19 bx@@14))) ($IsAllocBox bx@@14 t0@@5 h@@7)) :qid |DafnyPreludebpl.244:11| :skolemid |409| :pattern ( (MapType0Select v@@19 bx@@14)) )))) :qid |DafnyPreludebpl.242:15| :skolemid |410| :pattern ( ($IsAlloc v@@19 (TISet t0@@5) h@@7)) )))
(assert (forall ((v@@20 T@U) (t0@@6 T@U) (h@@8 T@U) ) (!  (=> (and (and (= (type v@@20) (MapType0Type BoxType intType)) (= (type t0@@6) TyType)) (= (type h@@8) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@20 (TMultiSet t0@@6) h@@8) (forall ((bx@@15 T@U) ) (!  (=> (and (= (type bx@@15) BoxType) (< 0 (U_2_int (MapType0Select v@@20 bx@@15)))) ($IsAllocBox bx@@15 t0@@6 h@@8)) :qid |DafnyPreludebpl.248:11| :skolemid |411| :pattern ( (MapType0Select v@@20 bx@@15)) )))) :qid |DafnyPreludebpl.246:15| :skolemid |412| :pattern ( ($IsAlloc v@@20 (TMultiSet t0@@6) h@@8)) )))
(assert (forall ((v@@21 T@U) (t0@@7 T@U) (h@@9 T@U) ) (!  (=> (and (and (= (type v@@21) (SeqType BoxType)) (= (type t0@@7) TyType)) (= (type h@@9) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@21 (TSeq t0@@7) h@@9) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@21))) ($IsAllocBox (|Seq#Index| v@@21 i@@0) t0@@7 h@@9)) :qid |DafnyPreludebpl.252:11| :skolemid |413| :pattern ( (|Seq#Index| v@@21 i@@0)) )))) :qid |DafnyPreludebpl.250:15| :skolemid |414| :pattern ( ($IsAlloc v@@21 (TSeq t0@@7) h@@9)) )))
(assert  (and (forall ((arg0@@51 T@U) ) (! (let ((V (MapTypeInv1 (type arg0@@51)))) (let ((U (MapTypeInv0 (type arg0@@51)))) (= (type (|Map#Elements| arg0@@51)) (MapType0Type U V)))) :qid |funType:Map#Elements| :pattern ( (|Map#Elements| arg0@@51)) )) (forall ((arg0@@52 T@U) ) (! (let ((U@@0 (MapTypeInv0 (type arg0@@52)))) (= (type (|Map#Domain| arg0@@52)) (MapType0Type U@@0 boolType))) :qid |funType:Map#Domain| :pattern ( (|Map#Domain| arg0@@52)) ))))
(assert (forall ((v@@22 T@U) (t0@@8 T@U) (t1 T@U) ) (!  (=> (and (and (= (type v@@22) (MapType BoxType BoxType)) (= (type t0@@8) TyType)) (= (type t1) TyType)) (= ($Is v@@22 (TMap t0@@8 t1)) (forall ((bx@@16 T@U) ) (!  (=> (and (= (type bx@@16) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@22) bx@@16))) (and ($IsBox (MapType0Select (|Map#Elements| v@@22) bx@@16) t1) ($IsBox bx@@16 t0@@8))) :qid |DafnyPreludebpl.259:19| :skolemid |415| :pattern ( (MapType0Select (|Map#Elements| v@@22) bx@@16)) :pattern ( (MapType0Select (|Map#Domain| v@@22) bx@@16)) )))) :qid |DafnyPreludebpl.256:15| :skolemid |416| :pattern ( ($Is v@@22 (TMap t0@@8 t1))) )))
(assert (forall ((v@@23 T@U) (t0@@9 T@U) (t1@@0 T@U) (h@@10 T@U) ) (!  (=> (and (and (and (= (type v@@23) (MapType BoxType BoxType)) (= (type t0@@9) TyType)) (= (type t1@@0) TyType)) (= (type h@@10) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@23 (TMap t0@@9 t1@@0) h@@10) (forall ((bx@@17 T@U) ) (!  (=> (and (= (type bx@@17) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@23) bx@@17))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@23) bx@@17) t1@@0 h@@10) ($IsAllocBox bx@@17 t0@@9 h@@10))) :qid |DafnyPreludebpl.267:19| :skolemid |417| :pattern ( (MapType0Select (|Map#Elements| v@@23) bx@@17)) :pattern ( (MapType0Select (|Map#Domain| v@@23) bx@@17)) )))) :qid |DafnyPreludebpl.264:15| :skolemid |418| :pattern ( ($IsAlloc v@@23 (TMap t0@@9 t1@@0) h@@10)) )))
(assert  (and (and (forall ((arg0@@53 T@U) ) (! (let ((V@@0 (MapTypeInv1 (type arg0@@53)))) (= (type (|Map#Values| arg0@@53)) (MapType0Type V@@0 boolType))) :qid |funType:Map#Values| :pattern ( (|Map#Values| arg0@@53)) )) (forall ((arg0@@54 T@U) ) (! (= (type (|Map#Items| arg0@@54)) (MapType0Type BoxType boolType)) :qid |funType:Map#Items| :pattern ( (|Map#Items| arg0@@54)) ))) (forall ((arg0@@55 T@U) (arg1@@17 T@U) ) (! (= (type (Tclass._System.Tuple2 arg0@@55 arg1@@17)) TyType) :qid |funType:Tclass._System.Tuple2| :pattern ( (Tclass._System.Tuple2 arg0@@55 arg1@@17)) ))))
(assert (forall ((v@@24 T@U) (t0@@10 T@U) (t1@@1 T@U) ) (!  (=> (and (and (and (= (type v@@24) (MapType BoxType BoxType)) (= (type t0@@10) TyType)) (= (type t1@@1) TyType)) ($Is v@@24 (TMap t0@@10 t1@@1))) (and (and ($Is (|Map#Domain| v@@24) (TSet t0@@10)) ($Is (|Map#Values| v@@24) (TSet t1@@1))) ($Is (|Map#Items| v@@24) (TSet (Tclass._System.Tuple2 t0@@10 t1@@1))))) :qid |DafnyPreludebpl.272:15| :skolemid |419| :pattern ( ($Is v@@24 (TMap t0@@10 t1@@1))) )))
(assert  (and (forall ((arg0@@56 T@U) ) (! (let ((V@@1 (IMapTypeInv1 (type arg0@@56)))) (let ((U@@1 (IMapTypeInv0 (type arg0@@56)))) (= (type (|IMap#Elements| arg0@@56)) (MapType0Type U@@1 V@@1)))) :qid |funType:IMap#Elements| :pattern ( (|IMap#Elements| arg0@@56)) )) (forall ((arg0@@57 T@U) ) (! (let ((U@@2 (IMapTypeInv0 (type arg0@@57)))) (= (type (|IMap#Domain| arg0@@57)) (MapType0Type U@@2 boolType))) :qid |funType:IMap#Domain| :pattern ( (|IMap#Domain| arg0@@57)) ))))
(assert (forall ((v@@25 T@U) (t0@@11 T@U) (t1@@2 T@U) ) (!  (=> (and (and (= (type v@@25) (IMapType BoxType BoxType)) (= (type t0@@11) TyType)) (= (type t1@@2) TyType)) (= ($Is v@@25 (TIMap t0@@11 t1@@2)) (forall ((bx@@18 T@U) ) (!  (=> (and (= (type bx@@18) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@25) bx@@18))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@25) bx@@18) t1@@2) ($IsBox bx@@18 t0@@11))) :qid |DafnyPreludebpl.282:19| :skolemid |420| :pattern ( (MapType0Select (|IMap#Elements| v@@25) bx@@18)) :pattern ( (MapType0Select (|IMap#Domain| v@@25) bx@@18)) )))) :qid |DafnyPreludebpl.279:15| :skolemid |421| :pattern ( ($Is v@@25 (TIMap t0@@11 t1@@2))) )))
(assert (forall ((v@@26 T@U) (t0@@12 T@U) (t1@@3 T@U) (h@@11 T@U) ) (!  (=> (and (and (and (= (type v@@26) (IMapType BoxType BoxType)) (= (type t0@@12) TyType)) (= (type t1@@3) TyType)) (= (type h@@11) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@26 (TIMap t0@@12 t1@@3) h@@11) (forall ((bx@@19 T@U) ) (!  (=> (and (= (type bx@@19) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@26) bx@@19))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@26) bx@@19) t1@@3 h@@11) ($IsAllocBox bx@@19 t0@@12 h@@11))) :qid |DafnyPreludebpl.290:19| :skolemid |422| :pattern ( (MapType0Select (|IMap#Elements| v@@26) bx@@19)) :pattern ( (MapType0Select (|IMap#Domain| v@@26) bx@@19)) )))) :qid |DafnyPreludebpl.287:15| :skolemid |423| :pattern ( ($IsAlloc v@@26 (TIMap t0@@12 t1@@3) h@@11)) )))
(assert  (and (forall ((arg0@@58 T@U) ) (! (let ((V@@2 (IMapTypeInv1 (type arg0@@58)))) (= (type (|IMap#Values| arg0@@58)) (MapType0Type V@@2 boolType))) :qid |funType:IMap#Values| :pattern ( (|IMap#Values| arg0@@58)) )) (forall ((arg0@@59 T@U) ) (! (= (type (|IMap#Items| arg0@@59)) (MapType0Type BoxType boolType)) :qid |funType:IMap#Items| :pattern ( (|IMap#Items| arg0@@59)) ))))
(assert (forall ((v@@27 T@U) (t0@@13 T@U) (t1@@4 T@U) ) (!  (=> (and (and (and (= (type v@@27) (IMapType BoxType BoxType)) (= (type t0@@13) TyType)) (= (type t1@@4) TyType)) ($Is v@@27 (TIMap t0@@13 t1@@4))) (and (and ($Is (|IMap#Domain| v@@27) (TISet t0@@13)) ($Is (|IMap#Values| v@@27) (TISet t1@@4))) ($Is (|IMap#Items| v@@27) (TISet (Tclass._System.Tuple2 t0@@13 t1@@4))))) :qid |DafnyPreludebpl.295:15| :skolemid |424| :pattern ( ($Is v@@27 (TIMap t0@@13 t1@@4))) )))
(assert  (and (and (forall ((arg0@@60 T@U) (arg1@@18 T@U) ) (! (= (type (TypeTuple arg0@@60 arg1@@18)) ClassNameType) :qid |funType:TypeTuple| :pattern ( (TypeTuple arg0@@60 arg1@@18)) )) (forall ((arg0@@61 T@U) ) (! (= (type (TypeTupleCar arg0@@61)) ClassNameType) :qid |funType:TypeTupleCar| :pattern ( (TypeTupleCar arg0@@61)) ))) (forall ((arg0@@62 T@U) ) (! (= (type (TypeTupleCdr arg0@@62)) ClassNameType) :qid |funType:TypeTupleCdr| :pattern ( (TypeTupleCdr arg0@@62)) ))))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (and (= (type a@@1) ClassNameType) (= (type b@@1) ClassNameType)) (and (= (TypeTupleCar (TypeTuple a@@1 b@@1)) a@@1) (= (TypeTupleCdr (TypeTuple a@@1 b@@1)) b@@1))) :qid |DafnyPreludebpl.322:15| :skolemid |425| :pattern ( (TypeTuple a@@1 b@@1)) )))
(assert (forall ((arg0@@63 T@U) ) (! (= (type (SetRef_to_SetBox arg0@@63)) (MapType0Type BoxType boolType)) :qid |funType:SetRef_to_SetBox| :pattern ( (SetRef_to_SetBox arg0@@63)) )))
(assert (forall ((s@@1 T@U) (bx@@20 T@U) ) (!  (=> (and (= (type s@@1) (MapType0Type refType boolType)) (= (type bx@@20) BoxType)) (= (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@20)) (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@20))))) :qid |DafnyPreludebpl.331:15| :skolemid |426| :pattern ( (MapType0Select (SetRef_to_SetBox s@@1) bx@@20)) )))
(assert (= (type Tclass._System.object?) TyType))
(assert (forall ((s@@2 T@U) ) (!  (=> (= (type s@@2) (MapType0Type refType boolType)) ($Is (SetRef_to_SetBox s@@2) (TSet Tclass._System.object?))) :qid |DafnyPreludebpl.333:15| :skolemid |427| :pattern ( (SetRef_to_SetBox s@@2)) )))
(assert (= (Ctor DatatypeTypeType) 21))
(assert (forall ((d T@U) ) (!  (=> (= (type d) DatatypeTypeType) (= (BoxRank ($Box d)) (DtRank d))) :qid |DafnyPreludebpl.352:15| :skolemid |428| :pattern ( (BoxRank ($Box d))) )))
(assert (forall ((o T@U) ) (!  (=> (= (type o) BoxType) (<= 0 (|ORD#Offset| o))) :qid |DafnyPreludebpl.367:15| :skolemid |429| :pattern ( (|ORD#Offset| o)) )))
(assert (forall ((arg0@@64 Int) ) (! (= (type (|ORD#FromNat| arg0@@64)) BoxType) :qid |funType:ORD#FromNat| :pattern ( (|ORD#FromNat| arg0@@64)) )))
(assert (forall ((n@@0 Int) ) (!  (=> (<= 0 n@@0) (and (|ORD#IsNat| (|ORD#FromNat| n@@0)) (= (|ORD#Offset| (|ORD#FromNat| n@@0)) n@@0))) :qid |DafnyPreludebpl.373:15| :skolemid |430| :pattern ( (|ORD#FromNat| n@@0)) )))
(assert (forall ((o@@0 T@U) ) (!  (=> (and (= (type o@@0) BoxType) (|ORD#IsNat| o@@0)) (= o@@0 (|ORD#FromNat| (|ORD#Offset| o@@0)))) :qid |DafnyPreludebpl.375:15| :skolemid |431| :pattern ( (|ORD#Offset| o@@0)) :pattern ( (|ORD#IsNat| o@@0)) )))
(assert (forall ((o@@1 T@U) (p T@U) ) (!  (=> (and (= (type o@@1) BoxType) (= (type p) BoxType)) (and (and (and (=> (|ORD#Less| o@@1 p) (not (= o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (not (|ORD#IsNat| p))) (|ORD#Less| o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (|ORD#IsNat| p)) (= (|ORD#Less| o@@1 p) (< (|ORD#Offset| o@@1) (|ORD#Offset| p))))) (=> (and (|ORD#Less| o@@1 p) (|ORD#IsNat| p)) (|ORD#IsNat| o@@1)))) :qid |DafnyPreludebpl.379:15| :skolemid |432| :pattern ( (|ORD#Less| o@@1 p)) )))
(assert (forall ((o@@2 T@U) (p@@0 T@U) ) (!  (=> (and (= (type o@@2) BoxType) (= (type p@@0) BoxType)) (or (or (|ORD#Less| o@@2 p@@0) (= o@@2 p@@0)) (|ORD#Less| p@@0 o@@2))) :qid |DafnyPreludebpl.385:15| :skolemid |433| :pattern ( (|ORD#Less| o@@2 p@@0) (|ORD#Less| p@@0 o@@2)) )))
(assert (forall ((o@@3 T@U) (p@@1 T@U) (r T@U) ) (!  (=> (and (and (and (= (type o@@3) BoxType) (= (type p@@1) BoxType)) (= (type r) BoxType)) (and (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r))) (|ORD#Less| o@@3 r)) :qid |DafnyPreludebpl.388:15| :skolemid |434| :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r)) :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| o@@3 r)) )))
(assert (forall ((o@@4 T@U) (p@@2 T@U) ) (!  (=> (and (= (type o@@4) BoxType) (= (type p@@2) BoxType)) (= (|ORD#LessThanLimit| o@@4 p@@2) (|ORD#Less| o@@4 p@@2))) :qid |DafnyPreludebpl.395:15| :skolemid |435| :pattern ( (|ORD#LessThanLimit| o@@4 p@@2)) )))
(assert (forall ((arg0@@65 T@U) (arg1@@19 T@U) ) (! (= (type (|ORD#Plus| arg0@@65 arg1@@19)) BoxType) :qid |funType:ORD#Plus| :pattern ( (|ORD#Plus| arg0@@65 arg1@@19)) )))
(assert (forall ((o@@5 T@U) (p@@3 T@U) ) (!  (=> (and (= (type o@@5) BoxType) (= (type p@@3) BoxType)) (and (=> (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (and (|ORD#IsNat| o@@5) (|ORD#IsNat| p@@3))) (=> (|ORD#IsNat| p@@3) (and (= (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (|ORD#IsNat| o@@5)) (= (|ORD#Offset| (|ORD#Plus| o@@5 p@@3)) (+ (|ORD#Offset| o@@5) (|ORD#Offset| p@@3))))))) :qid |DafnyPreludebpl.399:15| :skolemid |436| :pattern ( (|ORD#Plus| o@@5 p@@3)) )))
(assert (forall ((o@@6 T@U) (p@@4 T@U) ) (!  (=> (and (= (type o@@6) BoxType) (= (type p@@4) BoxType)) (and (or (= o@@6 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| o@@6 (|ORD#Plus| o@@6 p@@4))) (or (= p@@4 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| p@@4 (|ORD#Plus| o@@6 p@@4))))) :qid |DafnyPreludebpl.404:15| :skolemid |437| :pattern ( (|ORD#Plus| o@@6 p@@4)) )))
(assert (forall ((o@@7 T@U) (p@@5 T@U) ) (!  (=> (and (= (type o@@7) BoxType) (= (type p@@5) BoxType)) (and (=> (= o@@7 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) p@@5)) (=> (= p@@5 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) o@@7)))) :qid |DafnyPreludebpl.407:15| :skolemid |438| :pattern ( (|ORD#Plus| o@@7 p@@5)) )))
(assert (forall ((arg0@@66 T@U) (arg1@@20 T@U) ) (! (= (type (|ORD#Minus| arg0@@66 arg1@@20)) BoxType) :qid |funType:ORD#Minus| :pattern ( (|ORD#Minus| arg0@@66 arg1@@20)) )))
(assert (forall ((o@@8 T@U) (p@@6 T@U) ) (!  (=> (and (and (= (type o@@8) BoxType) (= (type p@@6) BoxType)) (and (|ORD#IsNat| p@@6) (<= (|ORD#Offset| p@@6) (|ORD#Offset| o@@8)))) (and (= (|ORD#IsNat| (|ORD#Minus| o@@8 p@@6)) (|ORD#IsNat| o@@8)) (= (|ORD#Offset| (|ORD#Minus| o@@8 p@@6)) (- (|ORD#Offset| o@@8) (|ORD#Offset| p@@6))))) :qid |DafnyPreludebpl.412:15| :skolemid |439| :pattern ( (|ORD#Minus| o@@8 p@@6)) )))
(assert (forall ((o@@9 T@U) (p@@7 T@U) ) (!  (=> (and (and (= (type o@@9) BoxType) (= (type p@@7) BoxType)) (and (|ORD#IsNat| p@@7) (<= (|ORD#Offset| p@@7) (|ORD#Offset| o@@9)))) (or (and (= p@@7 (|ORD#FromNat| 0)) (= (|ORD#Minus| o@@9 p@@7) o@@9)) (and (not (= p@@7 (|ORD#FromNat| 0))) (|ORD#Less| (|ORD#Minus| o@@9 p@@7) o@@9)))) :qid |DafnyPreludebpl.416:15| :skolemid |440| :pattern ( (|ORD#Minus| o@@9 p@@7)) )))
(assert (forall ((o@@10 T@U) (m@@5 Int) (n@@1 Int) ) (!  (=> (= (type o@@10) BoxType) (=> (and (<= 0 m@@5) (<= 0 n@@1)) (= (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1)) (|ORD#Plus| o@@10 (|ORD#FromNat| (+ m@@5 n@@1)))))) :qid |DafnyPreludebpl.422:15| :skolemid |441| :pattern ( (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1))) )))
(assert (forall ((o@@11 T@U) (m@@6 Int) (n@@2 Int) ) (!  (=> (= (type o@@11) BoxType) (=> (and (and (<= 0 m@@6) (<= 0 n@@2)) (<= (+ m@@6 n@@2) (|ORD#Offset| o@@11))) (= (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2)) (|ORD#Minus| o@@11 (|ORD#FromNat| (+ m@@6 n@@2)))))) :qid |DafnyPreludebpl.427:15| :skolemid |442| :pattern ( (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2))) )))
(assert (forall ((o@@12 T@U) (m@@7 Int) (n@@3 Int) ) (!  (=> (= (type o@@12) BoxType) (=> (and (and (<= 0 m@@7) (<= 0 n@@3)) (<= n@@3 (+ (|ORD#Offset| o@@12) m@@7))) (and (=> (<= 0 (- m@@7 n@@3)) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Plus| o@@12 (|ORD#FromNat| (- m@@7 n@@3))))) (=> (<= (- m@@7 n@@3) 0) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Minus| o@@12 (|ORD#FromNat| (- n@@3 m@@7)))))))) :qid |DafnyPreludebpl.432:15| :skolemid |443| :pattern ( (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3))) )))
(assert (forall ((o@@13 T@U) (m@@8 Int) (n@@4 Int) ) (!  (=> (= (type o@@13) BoxType) (=> (and (and (<= 0 m@@8) (<= 0 n@@4)) (<= n@@4 (+ (|ORD#Offset| o@@13) m@@8))) (and (=> (<= 0 (- m@@8 n@@4)) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Minus| o@@13 (|ORD#FromNat| (- m@@8 n@@4))))) (=> (<= (- m@@8 n@@4) 0) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Plus| o@@13 (|ORD#FromNat| (- n@@4 m@@8)))))))) :qid |DafnyPreludebpl.438:15| :skolemid |444| :pattern ( (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4))) )))
(assert  (and (= (Ctor LayerTypeType) 22) (forall ((arg0@@67 T@U) (arg1@@21 T@U) ) (! (let ((A (MapType0TypeInv1 (type arg0@@67)))) (= (type (AtLayer arg0@@67 arg1@@21)) A)) :qid |funType:AtLayer| :pattern ( (AtLayer arg0@@67 arg1@@21)) ))))
(assert (forall ((f T@U) (ly T@U) ) (! (let ((A@@0 (MapType0TypeInv1 (type f)))) (=> (and (= (type f) (MapType0Type LayerTypeType A@@0)) (= (type ly) LayerTypeType)) (= (AtLayer f ly) (MapType0Select f ly)))) :qid |DafnyPreludebpl.462:18| :skolemid |445| :pattern ( (AtLayer f ly)) )))
(assert (forall ((arg0@@68 T@U) ) (! (= (type ($LS arg0@@68)) LayerTypeType) :qid |funType:$LS| :pattern ( ($LS arg0@@68)) )))
(assert (forall ((f@@0 T@U) (ly@@0 T@U) ) (! (let ((A@@1 (MapType0TypeInv1 (type f@@0)))) (=> (and (= (type f@@0) (MapType0Type LayerTypeType A@@1)) (= (type ly@@0) LayerTypeType)) (= (AtLayer f@@0 ($LS ly@@0)) (AtLayer f@@0 ly@@0)))) :qid |DafnyPreludebpl.463:18| :skolemid |446| :pattern ( (AtLayer f@@0 ($LS ly@@0))) )))
(assert (forall ((arg0@@69 Int) ) (! (= (type (IndexField arg0@@69)) (FieldType BoxType)) :qid |funType:IndexField| :pattern ( (IndexField arg0@@69)) )))
(assert (forall ((i@@1 Int) ) (! (= (FDim (IndexField i@@1)) 1) :qid |DafnyPreludebpl.474:15| :skolemid |447| :pattern ( (IndexField i@@1)) )))
(assert (forall ((i@@2 Int) ) (! (= (IndexField_Inverse (IndexField i@@2)) i@@2) :qid |DafnyPreludebpl.476:15| :skolemid |448| :pattern ( (IndexField i@@2)) )))
(assert (forall ((arg0@@70 T@U) (arg1@@22 Int) ) (! (= (type (MultiIndexField arg0@@70 arg1@@22)) (FieldType BoxType)) :qid |funType:MultiIndexField| :pattern ( (MultiIndexField arg0@@70 arg1@@22)) )))
(assert (forall ((f@@1 T@U) (i@@3 Int) ) (!  (=> (= (type f@@1) (FieldType BoxType)) (= (FDim (MultiIndexField f@@1 i@@3)) (+ (FDim f@@1) 1))) :qid |DafnyPreludebpl.479:15| :skolemid |449| :pattern ( (MultiIndexField f@@1 i@@3)) )))
(assert (forall ((arg0@@71 T@U) ) (! (let ((T@@3 (FieldTypeInv0 (type arg0@@71)))) (= (type (MultiIndexField_Inverse0 arg0@@71)) (FieldType T@@3))) :qid |funType:MultiIndexField_Inverse0| :pattern ( (MultiIndexField_Inverse0 arg0@@71)) )))
(assert (forall ((f@@2 T@U) (i@@4 Int) ) (!  (=> (= (type f@@2) (FieldType BoxType)) (and (= (MultiIndexField_Inverse0 (MultiIndexField f@@2 i@@4)) f@@2) (= (MultiIndexField_Inverse1 (MultiIndexField f@@2 i@@4)) i@@4))) :qid |DafnyPreludebpl.482:15| :skolemid |450| :pattern ( (MultiIndexField f@@2 i@@4)) )))
(assert  (and (and (forall ((alpha@@3 T@T) (arg0@@72 T@U) (arg1@@23 T@U) ) (! (= (type (FieldOfDecl alpha@@3 arg0@@72 arg1@@23)) (FieldType alpha@@3)) :qid |funType:FieldOfDecl| :pattern ( (FieldOfDecl alpha@@3 arg0@@72 arg1@@23)) )) (forall ((arg0@@73 T@U) ) (! (= (type (DeclType arg0@@73)) ClassNameType) :qid |funType:DeclType| :pattern ( (DeclType arg0@@73)) ))) (forall ((arg0@@74 T@U) ) (! (= (type (DeclName arg0@@74)) NameFamilyType) :qid |funType:DeclName| :pattern ( (DeclName arg0@@74)) ))))
(assert (forall ((cl T@U) (nm T@U) (T@@4 T@T) ) (!  (=> (and (= (type cl) ClassNameType) (= (type nm) NameFamilyType)) (and (= (DeclType (FieldOfDecl T@@4 cl nm)) cl) (= (DeclName (FieldOfDecl T@@4 cl nm)) nm))) :qid |DafnyPreludebpl.491:18| :skolemid |451| :pattern ( (FieldOfDecl T@@4 cl nm)) )))
(assert (forall ((h@@12 T@U) (k T@U) (v@@28 T@U) (t@@21 T@U) ) (!  (=> (and (and (and (and (= (type h@@12) (MapType0Type refType MapType1Type)) (= (type k) (MapType0Type refType MapType1Type))) (= (type t@@21) TyType)) ($HeapSucc h@@12 k)) ($IsAlloc v@@28 t@@21 h@@12)) ($IsAlloc v@@28 t@@21 k)) :qid |DafnyPreludebpl.504:17| :skolemid |452| :pattern ( ($HeapSucc h@@12 k) ($IsAlloc v@@28 t@@21 h@@12)) )))
(assert (forall ((h@@13 T@U) (k@@0 T@U) (bx@@21 T@U) (t@@22 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@13) (MapType0Type refType MapType1Type)) (= (type k@@0) (MapType0Type refType MapType1Type))) (= (type bx@@21) BoxType)) (= (type t@@22) TyType)) ($HeapSucc h@@13 k@@0)) ($IsAllocBox bx@@21 t@@22 h@@13)) ($IsAllocBox bx@@21 t@@22 k@@0)) :qid |DafnyPreludebpl.507:14| :skolemid |453| :pattern ( ($HeapSucc h@@13 k@@0) ($IsAllocBox bx@@21 t@@22 h@@13)) )))
(assert (= (FDim alloc) 0))
(assert (= (DeclName alloc) allocName))
(assert  (not ($IsGhostField alloc)))
(assert (forall ((o@@14 T@U) ) (!  (=> (= (type o@@14) refType) (<= 0 (_System.array.Length o@@14))) :qid |DafnyPreludebpl.524:15| :skolemid |454| :no-pattern (type o@@14) :no-pattern (U_2_int o@@14) :no-pattern (U_2_bool o@@14) )))
(assert (forall ((x@@15 Real) ) (! (= (q@Int x@@15) (to_int x@@15)) :qid |DafnyPreludebpl.530:14| :skolemid |455| :pattern ( (q@Int x@@15)) )))
(assert (forall ((x@@16 Int) ) (! (= (q@Real x@@16) (to_real x@@16)) :qid |DafnyPreludebpl.531:15| :skolemid |456| :pattern ( (q@Real x@@16)) )))
(assert (forall ((i@@5 Int) ) (! (= (q@Int (q@Real i@@5)) i@@5) :qid |DafnyPreludebpl.532:15| :skolemid |457| :pattern ( (q@Int (q@Real i@@5))) )))
(assert (= (type $OneHeap) (MapType0Type refType MapType1Type)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((h@@14 T@U) (r@@0 T@U) (f@@3 T@U) (x@@17 T@U) ) (! (let ((alpha@@4 (type x@@17))) (=> (and (and (and (= (type h@@14) (MapType0Type refType MapType1Type)) (= (type r@@0) refType)) (= (type f@@3) (FieldType alpha@@4))) ($IsGoodHeap (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17)))) ($HeapSucc h@@14 (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17))))) :qid |DafnyPreludebpl.554:22| :skolemid |458| :pattern ( (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17))) )))
(assert (forall ((a@@2 T@U) (b@@2 T@U) (c T@U) ) (!  (=> (and (and (and (and (= (type a@@2) (MapType0Type refType MapType1Type)) (= (type b@@2) (MapType0Type refType MapType1Type))) (= (type c) (MapType0Type refType MapType1Type))) (not (= a@@2 c))) (and ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c))) ($HeapSucc a@@2 c)) :qid |DafnyPreludebpl.557:15| :skolemid |459| :pattern ( ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c)) )))
(assert (forall ((h@@15 T@U) (k@@1 T@U) ) (!  (=> (and (and (= (type h@@15) (MapType0Type refType MapType1Type)) (= (type k@@1) (MapType0Type refType MapType1Type))) ($HeapSucc h@@15 k@@1)) (forall ((o@@15 T@U) ) (!  (=> (and (= (type o@@15) refType) (U_2_bool (MapType1Select (MapType0Select h@@15 o@@15) alloc))) (U_2_bool (MapType1Select (MapType0Select k@@1 o@@15) alloc))) :qid |DafnyPreludebpl.560:30| :skolemid |460| :pattern ( (MapType1Select (MapType0Select k@@1 o@@15) alloc)) ))) :qid |DafnyPreludebpl.559:15| :skolemid |461| :pattern ( ($HeapSucc h@@15 k@@1)) )))
(assert (forall ((h@@16 T@U) (k@@2 T@U) ) (!  (=> (and (and (= (type h@@16) (MapType0Type refType MapType1Type)) (= (type k@@2) (MapType0Type refType MapType1Type))) ($HeapSuccGhost h@@16 k@@2)) (and ($HeapSucc h@@16 k@@2) (forall ((o@@16 T@U) (f@@4 T@U) ) (! (let ((alpha@@5 (FieldTypeInv0 (type f@@4)))) (=> (and (and (= (type o@@16) refType) (= (type f@@4) (FieldType alpha@@5))) (not ($IsGhostField f@@4))) (= (MapType1Select (MapType0Select h@@16 o@@16) f@@4) (MapType1Select (MapType0Select k@@2 o@@16) f@@4)))) :qid |DafnyPreludebpl.566:20| :skolemid |462| :pattern ( (MapType1Select (MapType0Select k@@2 o@@16) f@@4)) )))) :qid |DafnyPreludebpl.563:15| :skolemid |463| :pattern ( ($HeapSuccGhost h@@16 k@@2)) )))
(assert (forall ((s@@3 T@U) ) (! (let ((T@@5 (MapType0TypeInv0 (type s@@3)))) (=> (= (type s@@3) (MapType0Type T@@5 boolType)) (<= 0 (|Set#Card| s@@3)))) :qid |DafnyPreludebpl.624:18| :skolemid |468| :pattern ( (|Set#Card| s@@3)) )))
(assert (forall ((T@@6 T@T) ) (! (= (type (|Set#Empty| T@@6)) (MapType0Type T@@6 boolType)) :qid |funType:Set#Empty| :pattern ( (|Set#Empty| T@@6)) )))
(assert (forall ((o@@17 T@U) ) (! (let ((T@@7 (type o@@17))) (not (U_2_bool (MapType0Select (|Set#Empty| T@@7) o@@17)))) :qid |DafnyPreludebpl.627:18| :skolemid |469| :pattern ( (let ((T@@7 (type o@@17))) (MapType0Select (|Set#Empty| T@@7) o@@17))) )))
(assert (forall ((s@@4 T@U) ) (! (let ((T@@8 (MapType0TypeInv0 (type s@@4)))) (=> (= (type s@@4) (MapType0Type T@@8 boolType)) (and (= (= (|Set#Card| s@@4) 0) (= s@@4 (|Set#Empty| T@@8))) (=> (not (= (|Set#Card| s@@4) 0)) (exists ((x@@18 T@U) ) (!  (and (= (type x@@18) T@@8) (U_2_bool (MapType0Select s@@4 x@@18))) :qid |DafnyPreludebpl.630:33| :skolemid |470| :no-pattern (type x@@18) :no-pattern (U_2_int x@@18) :no-pattern (U_2_bool x@@18) )))))) :qid |DafnyPreludebpl.628:18| :skolemid |471| :pattern ( (|Set#Card| s@@4)) )))
(assert (forall ((arg0@@75 T@U) ) (! (let ((T@@9 (type arg0@@75))) (= (type (|Set#Singleton| arg0@@75)) (MapType0Type T@@9 boolType))) :qid |funType:Set#Singleton| :pattern ( (|Set#Singleton| arg0@@75)) )))
(assert (forall ((r@@1 T@U) ) (! (U_2_bool (MapType0Select (|Set#Singleton| r@@1) r@@1)) :qid |DafnyPreludebpl.636:18| :skolemid |472| :pattern ( (|Set#Singleton| r@@1)) )))
(assert (forall ((r@@2 T@U) (o@@18 T@U) ) (! (let ((T@@10 (type r@@2))) (=> (= (type o@@18) T@@10) (= (U_2_bool (MapType0Select (|Set#Singleton| r@@2) o@@18)) (= r@@2 o@@18)))) :qid |DafnyPreludebpl.637:18| :skolemid |473| :pattern ( (MapType0Select (|Set#Singleton| r@@2) o@@18)) )))
(assert (forall ((r@@3 T@U) ) (! (= (|Set#Card| (|Set#Singleton| r@@3)) 1) :qid |DafnyPreludebpl.638:18| :skolemid |474| :pattern ( (|Set#Card| (|Set#Singleton| r@@3))) )))
(assert (forall ((arg0@@76 T@U) (arg1@@24 T@U) ) (! (let ((T@@11 (type arg1@@24))) (= (type (|Set#UnionOne| arg0@@76 arg1@@24)) (MapType0Type T@@11 boolType))) :qid |funType:Set#UnionOne| :pattern ( (|Set#UnionOne| arg0@@76 arg1@@24)) )))
(assert (forall ((a@@3 T@U) (x@@19 T@U) (o@@19 T@U) ) (! (let ((T@@12 (type x@@19))) (=> (and (= (type a@@3) (MapType0Type T@@12 boolType)) (= (type o@@19) T@@12)) (= (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@19) o@@19))  (or (= o@@19 x@@19) (U_2_bool (MapType0Select a@@3 o@@19)))))) :qid |DafnyPreludebpl.641:18| :skolemid |475| :pattern ( (MapType0Select (|Set#UnionOne| a@@3 x@@19) o@@19)) )))
(assert (forall ((a@@4 T@U) (x@@20 T@U) ) (! (let ((T@@13 (type x@@20))) (=> (= (type a@@4) (MapType0Type T@@13 boolType)) (U_2_bool (MapType0Select (|Set#UnionOne| a@@4 x@@20) x@@20)))) :qid |DafnyPreludebpl.643:18| :skolemid |476| :pattern ( (|Set#UnionOne| a@@4 x@@20)) )))
(assert (forall ((a@@5 T@U) (x@@21 T@U) (y@@1 T@U) ) (! (let ((T@@14 (type x@@21))) (=> (and (and (= (type a@@5) (MapType0Type T@@14 boolType)) (= (type y@@1) T@@14)) (U_2_bool (MapType0Select a@@5 y@@1))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@5 x@@21) y@@1)))) :qid |DafnyPreludebpl.645:18| :skolemid |477| :pattern ( (|Set#UnionOne| a@@5 x@@21) (MapType0Select a@@5 y@@1)) )))
(assert (forall ((a@@6 T@U) (x@@22 T@U) ) (! (let ((T@@15 (type x@@22))) (=> (and (= (type a@@6) (MapType0Type T@@15 boolType)) (U_2_bool (MapType0Select a@@6 x@@22))) (= (|Set#Card| (|Set#UnionOne| a@@6 x@@22)) (|Set#Card| a@@6)))) :qid |DafnyPreludebpl.647:18| :skolemid |478| :pattern ( (|Set#Card| (|Set#UnionOne| a@@6 x@@22))) )))
(assert (forall ((a@@7 T@U) (x@@23 T@U) ) (! (let ((T@@16 (type x@@23))) (=> (and (= (type a@@7) (MapType0Type T@@16 boolType)) (not (U_2_bool (MapType0Select a@@7 x@@23)))) (= (|Set#Card| (|Set#UnionOne| a@@7 x@@23)) (+ (|Set#Card| a@@7) 1)))) :qid |DafnyPreludebpl.649:18| :skolemid |479| :pattern ( (|Set#Card| (|Set#UnionOne| a@@7 x@@23))) )))
(assert (forall ((arg0@@77 T@U) (arg1@@25 T@U) ) (! (let ((T@@17 (MapType0TypeInv0 (type arg0@@77)))) (= (type (|Set#Union| arg0@@77 arg1@@25)) (MapType0Type T@@17 boolType))) :qid |funType:Set#Union| :pattern ( (|Set#Union| arg0@@77 arg1@@25)) )))
(assert (forall ((a@@8 T@U) (b@@3 T@U) (o@@20 T@U) ) (! (let ((T@@18 (type o@@20))) (=> (and (= (type a@@8) (MapType0Type T@@18 boolType)) (= (type b@@3) (MapType0Type T@@18 boolType))) (= (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) o@@20))  (or (U_2_bool (MapType0Select a@@8 o@@20)) (U_2_bool (MapType0Select b@@3 o@@20)))))) :qid |DafnyPreludebpl.653:18| :skolemid |480| :pattern ( (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)) )))
(assert (forall ((a@@9 T@U) (b@@4 T@U) (y@@2 T@U) ) (! (let ((T@@19 (type y@@2))) (=> (and (and (= (type a@@9) (MapType0Type T@@19 boolType)) (= (type b@@4) (MapType0Type T@@19 boolType))) (U_2_bool (MapType0Select a@@9 y@@2))) (U_2_bool (MapType0Select (|Set#Union| a@@9 b@@4) y@@2)))) :qid |DafnyPreludebpl.655:18| :skolemid |481| :pattern ( (|Set#Union| a@@9 b@@4) (MapType0Select a@@9 y@@2)) )))
(assert (forall ((a@@10 T@U) (b@@5 T@U) (y@@3 T@U) ) (! (let ((T@@20 (type y@@3))) (=> (and (and (= (type a@@10) (MapType0Type T@@20 boolType)) (= (type b@@5) (MapType0Type T@@20 boolType))) (U_2_bool (MapType0Select b@@5 y@@3))) (U_2_bool (MapType0Select (|Set#Union| a@@10 b@@5) y@@3)))) :qid |DafnyPreludebpl.657:18| :skolemid |482| :pattern ( (|Set#Union| a@@10 b@@5) (MapType0Select b@@5 y@@3)) )))
(assert (forall ((arg0@@78 T@U) (arg1@@26 T@U) ) (! (let ((T@@21 (MapType0TypeInv0 (type arg0@@78)))) (= (type (|Set#Difference| arg0@@78 arg1@@26)) (MapType0Type T@@21 boolType))) :qid |funType:Set#Difference| :pattern ( (|Set#Difference| arg0@@78 arg1@@26)) )))
(assert (forall ((a@@11 T@U) (b@@6 T@U) ) (! (let ((T@@22 (MapType0TypeInv0 (type a@@11)))) (=> (and (and (= (type a@@11) (MapType0Type T@@22 boolType)) (= (type b@@6) (MapType0Type T@@22 boolType))) (|Set#Disjoint| a@@11 b@@6)) (and (= (|Set#Difference| (|Set#Union| a@@11 b@@6) a@@11) b@@6) (= (|Set#Difference| (|Set#Union| a@@11 b@@6) b@@6) a@@11)))) :qid |DafnyPreludebpl.659:18| :skolemid |483| :pattern ( (|Set#Union| a@@11 b@@6)) )))
(assert (forall ((arg0@@79 T@U) (arg1@@27 T@U) ) (! (let ((T@@23 (MapType0TypeInv0 (type arg0@@79)))) (= (type (|Set#Intersection| arg0@@79 arg1@@27)) (MapType0Type T@@23 boolType))) :qid |funType:Set#Intersection| :pattern ( (|Set#Intersection| arg0@@79 arg1@@27)) )))
(assert (forall ((a@@12 T@U) (b@@7 T@U) (o@@21 T@U) ) (! (let ((T@@24 (type o@@21))) (=> (and (= (type a@@12) (MapType0Type T@@24 boolType)) (= (type b@@7) (MapType0Type T@@24 boolType))) (= (U_2_bool (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21))  (and (U_2_bool (MapType0Select a@@12 o@@21)) (U_2_bool (MapType0Select b@@7 o@@21)))))) :qid |DafnyPreludebpl.669:18| :skolemid |484| :pattern ( (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)) )))
(assert (forall ((a@@13 T@U) (b@@8 T@U) ) (! (let ((T@@25 (MapType0TypeInv0 (type a@@13)))) (=> (and (= (type a@@13) (MapType0Type T@@25 boolType)) (= (type b@@8) (MapType0Type T@@25 boolType))) (= (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8) (|Set#Union| a@@13 b@@8)))) :qid |DafnyPreludebpl.672:18| :skolemid |485| :pattern ( (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8)) )))
(assert (forall ((a@@14 T@U) (b@@9 T@U) ) (! (let ((T@@26 (MapType0TypeInv0 (type a@@14)))) (=> (and (= (type a@@14) (MapType0Type T@@26 boolType)) (= (type b@@9) (MapType0Type T@@26 boolType))) (= (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9)) (|Set#Union| a@@14 b@@9)))) :qid |DafnyPreludebpl.674:18| :skolemid |486| :pattern ( (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9))) )))
(assert (forall ((a@@15 T@U) (b@@10 T@U) ) (! (let ((T@@27 (MapType0TypeInv0 (type a@@15)))) (=> (and (= (type a@@15) (MapType0Type T@@27 boolType)) (= (type b@@10) (MapType0Type T@@27 boolType))) (= (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10) (|Set#Intersection| a@@15 b@@10)))) :qid |DafnyPreludebpl.676:18| :skolemid |487| :pattern ( (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10)) )))
(assert (forall ((a@@16 T@U) (b@@11 T@U) ) (! (let ((T@@28 (MapType0TypeInv0 (type a@@16)))) (=> (and (= (type a@@16) (MapType0Type T@@28 boolType)) (= (type b@@11) (MapType0Type T@@28 boolType))) (= (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11)) (|Set#Intersection| a@@16 b@@11)))) :qid |DafnyPreludebpl.678:18| :skolemid |488| :pattern ( (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11))) )))
(assert (forall ((a@@17 T@U) (b@@12 T@U) ) (! (let ((T@@29 (MapType0TypeInv0 (type a@@17)))) (=> (and (= (type a@@17) (MapType0Type T@@29 boolType)) (= (type b@@12) (MapType0Type T@@29 boolType))) (= (+ (|Set#Card| (|Set#Union| a@@17 b@@12)) (|Set#Card| (|Set#Intersection| a@@17 b@@12))) (+ (|Set#Card| a@@17) (|Set#Card| b@@12))))) :qid |DafnyPreludebpl.680:18| :skolemid |489| :pattern ( (|Set#Card| (|Set#Union| a@@17 b@@12))) :pattern ( (|Set#Card| (|Set#Intersection| a@@17 b@@12))) )))
(assert (forall ((a@@18 T@U) (b@@13 T@U) (o@@22 T@U) ) (! (let ((T@@30 (type o@@22))) (=> (and (= (type a@@18) (MapType0Type T@@30 boolType)) (= (type b@@13) (MapType0Type T@@30 boolType))) (= (U_2_bool (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22))  (and (U_2_bool (MapType0Select a@@18 o@@22)) (not (U_2_bool (MapType0Select b@@13 o@@22))))))) :qid |DafnyPreludebpl.684:18| :skolemid |490| :pattern ( (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)) )))
(assert (forall ((a@@19 T@U) (b@@14 T@U) (y@@4 T@U) ) (! (let ((T@@31 (type y@@4))) (=> (and (and (= (type a@@19) (MapType0Type T@@31 boolType)) (= (type b@@14) (MapType0Type T@@31 boolType))) (U_2_bool (MapType0Select b@@14 y@@4))) (not (U_2_bool (MapType0Select (|Set#Difference| a@@19 b@@14) y@@4))))) :qid |DafnyPreludebpl.686:18| :skolemid |491| :pattern ( (|Set#Difference| a@@19 b@@14) (MapType0Select b@@14 y@@4)) )))
(assert (forall ((a@@20 T@U) (b@@15 T@U) ) (! (let ((T@@32 (MapType0TypeInv0 (type a@@20)))) (=> (and (= (type a@@20) (MapType0Type T@@32 boolType)) (= (type b@@15) (MapType0Type T@@32 boolType))) (and (= (+ (+ (|Set#Card| (|Set#Difference| a@@20 b@@15)) (|Set#Card| (|Set#Difference| b@@15 a@@20))) (|Set#Card| (|Set#Intersection| a@@20 b@@15))) (|Set#Card| (|Set#Union| a@@20 b@@15))) (= (|Set#Card| (|Set#Difference| a@@20 b@@15)) (- (|Set#Card| a@@20) (|Set#Card| (|Set#Intersection| a@@20 b@@15))))))) :qid |DafnyPreludebpl.688:18| :skolemid |492| :pattern ( (|Set#Card| (|Set#Difference| a@@20 b@@15))) )))
(assert (forall ((a@@21 T@U) (b@@16 T@U) ) (! (let ((T@@33 (MapType0TypeInv0 (type a@@21)))) (=> (and (= (type a@@21) (MapType0Type T@@33 boolType)) (= (type b@@16) (MapType0Type T@@33 boolType))) (= (|Set#Subset| a@@21 b@@16) (forall ((o@@23 T@U) ) (!  (=> (and (= (type o@@23) T@@33) (U_2_bool (MapType0Select a@@21 o@@23))) (U_2_bool (MapType0Select b@@16 o@@23))) :qid |DafnyPreludebpl.697:32| :skolemid |493| :pattern ( (MapType0Select a@@21 o@@23)) :pattern ( (MapType0Select b@@16 o@@23)) ))))) :qid |DafnyPreludebpl.696:17| :skolemid |494| :pattern ( (|Set#Subset| a@@21 b@@16)) )))
(assert (forall ((a@@22 T@U) (b@@17 T@U) ) (! (let ((T@@34 (MapType0TypeInv0 (type a@@22)))) (=> (and (= (type a@@22) (MapType0Type T@@34 boolType)) (= (type b@@17) (MapType0Type T@@34 boolType))) (= (|Set#Equal| a@@22 b@@17) (forall ((o@@24 T@U) ) (!  (=> (= (type o@@24) T@@34) (= (U_2_bool (MapType0Select a@@22 o@@24)) (U_2_bool (MapType0Select b@@17 o@@24)))) :qid |DafnyPreludebpl.705:31| :skolemid |495| :pattern ( (MapType0Select a@@22 o@@24)) :pattern ( (MapType0Select b@@17 o@@24)) ))))) :qid |DafnyPreludebpl.704:17| :skolemid |496| :pattern ( (|Set#Equal| a@@22 b@@17)) )))
(assert (forall ((a@@23 T@U) (b@@18 T@U) ) (! (let ((T@@35 (MapType0TypeInv0 (type a@@23)))) (=> (and (and (= (type a@@23) (MapType0Type T@@35 boolType)) (= (type b@@18) (MapType0Type T@@35 boolType))) (|Set#Equal| a@@23 b@@18)) (= a@@23 b@@18))) :qid |DafnyPreludebpl.706:17| :skolemid |497| :pattern ( (|Set#Equal| a@@23 b@@18)) )))
(assert (forall ((a@@24 T@U) (b@@19 T@U) ) (! (let ((T@@36 (MapType0TypeInv0 (type a@@24)))) (=> (and (= (type a@@24) (MapType0Type T@@36 boolType)) (= (type b@@19) (MapType0Type T@@36 boolType))) (= (|Set#Disjoint| a@@24 b@@19) (forall ((o@@25 T@U) ) (!  (=> (= (type o@@25) T@@36) (or (not (U_2_bool (MapType0Select a@@24 o@@25))) (not (U_2_bool (MapType0Select b@@19 o@@25))))) :qid |DafnyPreludebpl.711:34| :skolemid |498| :pattern ( (MapType0Select a@@24 o@@25)) :pattern ( (MapType0Select b@@19 o@@25)) ))))) :qid |DafnyPreludebpl.710:18| :skolemid |499| :pattern ( (|Set#Disjoint| a@@24 b@@19)) )))
(assert (forall ((T@@37 T@T) ) (! (= (type (|ISet#Empty| T@@37)) (MapType0Type T@@37 boolType)) :qid |funType:ISet#Empty| :pattern ( (|ISet#Empty| T@@37)) )))
(assert (forall ((o@@26 T@U) ) (! (let ((T@@38 (type o@@26))) (not (U_2_bool (MapType0Select (|ISet#Empty| T@@38) o@@26)))) :qid |DafnyPreludebpl.720:18| :skolemid |500| :pattern ( (let ((T@@38 (type o@@26))) (MapType0Select (|ISet#Empty| T@@38) o@@26))) )))
(assert (forall ((arg0@@80 T@U) (arg1@@28 T@U) ) (! (let ((T@@39 (type arg1@@28))) (= (type (|ISet#UnionOne| arg0@@80 arg1@@28)) (MapType0Type T@@39 boolType))) :qid |funType:ISet#UnionOne| :pattern ( (|ISet#UnionOne| arg0@@80 arg1@@28)) )))
(assert (forall ((a@@25 T@U) (x@@24 T@U) (o@@27 T@U) ) (! (let ((T@@40 (type x@@24))) (=> (and (= (type a@@25) (MapType0Type T@@40 boolType)) (= (type o@@27) T@@40)) (= (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@24) o@@27))  (or (= o@@27 x@@24) (U_2_bool (MapType0Select a@@25 o@@27)))))) :qid |DafnyPreludebpl.727:18| :skolemid |501| :pattern ( (MapType0Select (|ISet#UnionOne| a@@25 x@@24) o@@27)) )))
(assert (forall ((a@@26 T@U) (x@@25 T@U) ) (! (let ((T@@41 (type x@@25))) (=> (= (type a@@26) (MapType0Type T@@41 boolType)) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@26 x@@25) x@@25)))) :qid |DafnyPreludebpl.729:18| :skolemid |502| :pattern ( (|ISet#UnionOne| a@@26 x@@25)) )))
(assert (forall ((a@@27 T@U) (x@@26 T@U) (y@@5 T@U) ) (! (let ((T@@42 (type x@@26))) (=> (and (and (= (type a@@27) (MapType0Type T@@42 boolType)) (= (type y@@5) T@@42)) (U_2_bool (MapType0Select a@@27 y@@5))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@27 x@@26) y@@5)))) :qid |DafnyPreludebpl.731:18| :skolemid |503| :pattern ( (|ISet#UnionOne| a@@27 x@@26) (MapType0Select a@@27 y@@5)) )))
(assert (forall ((arg0@@81 T@U) (arg1@@29 T@U) ) (! (let ((T@@43 (MapType0TypeInv0 (type arg0@@81)))) (= (type (|ISet#Union| arg0@@81 arg1@@29)) (MapType0Type T@@43 boolType))) :qid |funType:ISet#Union| :pattern ( (|ISet#Union| arg0@@81 arg1@@29)) )))
(assert (forall ((a@@28 T@U) (b@@20 T@U) (o@@28 T@U) ) (! (let ((T@@44 (type o@@28))) (=> (and (= (type a@@28) (MapType0Type T@@44 boolType)) (= (type b@@20) (MapType0Type T@@44 boolType))) (= (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) o@@28))  (or (U_2_bool (MapType0Select a@@28 o@@28)) (U_2_bool (MapType0Select b@@20 o@@28)))))) :qid |DafnyPreludebpl.735:18| :skolemid |504| :pattern ( (MapType0Select (|ISet#Union| a@@28 b@@20) o@@28)) )))
(assert (forall ((a@@29 T@U) (b@@21 T@U) (y@@6 T@U) ) (! (let ((T@@45 (type y@@6))) (=> (and (and (= (type a@@29) (MapType0Type T@@45 boolType)) (= (type b@@21) (MapType0Type T@@45 boolType))) (U_2_bool (MapType0Select a@@29 y@@6))) (U_2_bool (MapType0Select (|ISet#Union| a@@29 b@@21) y@@6)))) :qid |DafnyPreludebpl.737:18| :skolemid |505| :pattern ( (|ISet#Union| a@@29 b@@21) (MapType0Select a@@29 y@@6)) )))
(assert (forall ((a@@30 T@U) (b@@22 T@U) (y@@7 T@U) ) (! (let ((T@@46 (type y@@7))) (=> (and (and (= (type a@@30) (MapType0Type T@@46 boolType)) (= (type b@@22) (MapType0Type T@@46 boolType))) (U_2_bool (MapType0Select b@@22 y@@7))) (U_2_bool (MapType0Select (|ISet#Union| a@@30 b@@22) y@@7)))) :qid |DafnyPreludebpl.739:18| :skolemid |506| :pattern ( (|ISet#Union| a@@30 b@@22) (MapType0Select b@@22 y@@7)) )))
(assert (forall ((arg0@@82 T@U) (arg1@@30 T@U) ) (! (let ((T@@47 (MapType0TypeInv0 (type arg0@@82)))) (= (type (|ISet#Difference| arg0@@82 arg1@@30)) (MapType0Type T@@47 boolType))) :qid |funType:ISet#Difference| :pattern ( (|ISet#Difference| arg0@@82 arg1@@30)) )))
(assert (forall ((a@@31 T@U) (b@@23 T@U) ) (! (let ((T@@48 (MapType0TypeInv0 (type a@@31)))) (=> (and (and (= (type a@@31) (MapType0Type T@@48 boolType)) (= (type b@@23) (MapType0Type T@@48 boolType))) (|ISet#Disjoint| a@@31 b@@23)) (and (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) a@@31) b@@23) (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) b@@23) a@@31)))) :qid |DafnyPreludebpl.741:18| :skolemid |507| :pattern ( (|ISet#Union| a@@31 b@@23)) )))
(assert (forall ((arg0@@83 T@U) (arg1@@31 T@U) ) (! (let ((T@@49 (MapType0TypeInv0 (type arg0@@83)))) (= (type (|ISet#Intersection| arg0@@83 arg1@@31)) (MapType0Type T@@49 boolType))) :qid |funType:ISet#Intersection| :pattern ( (|ISet#Intersection| arg0@@83 arg1@@31)) )))
(assert (forall ((a@@32 T@U) (b@@24 T@U) (o@@29 T@U) ) (! (let ((T@@50 (type o@@29))) (=> (and (= (type a@@32) (MapType0Type T@@50 boolType)) (= (type b@@24) (MapType0Type T@@50 boolType))) (= (U_2_bool (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@29))  (and (U_2_bool (MapType0Select a@@32 o@@29)) (U_2_bool (MapType0Select b@@24 o@@29)))))) :qid |DafnyPreludebpl.747:18| :skolemid |508| :pattern ( (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@29)) )))
(assert (forall ((a@@33 T@U) (b@@25 T@U) ) (! (let ((T@@51 (MapType0TypeInv0 (type a@@33)))) (=> (and (= (type a@@33) (MapType0Type T@@51 boolType)) (= (type b@@25) (MapType0Type T@@51 boolType))) (= (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25) (|ISet#Union| a@@33 b@@25)))) :qid |DafnyPreludebpl.750:18| :skolemid |509| :pattern ( (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25)) )))
(assert (forall ((a@@34 T@U) (b@@26 T@U) ) (! (let ((T@@52 (MapType0TypeInv0 (type a@@34)))) (=> (and (= (type a@@34) (MapType0Type T@@52 boolType)) (= (type b@@26) (MapType0Type T@@52 boolType))) (= (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26)) (|ISet#Union| a@@34 b@@26)))) :qid |DafnyPreludebpl.752:18| :skolemid |510| :pattern ( (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26))) )))
(assert (forall ((a@@35 T@U) (b@@27 T@U) ) (! (let ((T@@53 (MapType0TypeInv0 (type a@@35)))) (=> (and (= (type a@@35) (MapType0Type T@@53 boolType)) (= (type b@@27) (MapType0Type T@@53 boolType))) (= (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27) (|ISet#Intersection| a@@35 b@@27)))) :qid |DafnyPreludebpl.754:18| :skolemid |511| :pattern ( (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27)) )))
(assert (forall ((a@@36 T@U) (b@@28 T@U) ) (! (let ((T@@54 (MapType0TypeInv0 (type a@@36)))) (=> (and (= (type a@@36) (MapType0Type T@@54 boolType)) (= (type b@@28) (MapType0Type T@@54 boolType))) (= (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28)) (|ISet#Intersection| a@@36 b@@28)))) :qid |DafnyPreludebpl.756:18| :skolemid |512| :pattern ( (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28))) )))
(assert (forall ((a@@37 T@U) (b@@29 T@U) (o@@30 T@U) ) (! (let ((T@@55 (type o@@30))) (=> (and (= (type a@@37) (MapType0Type T@@55 boolType)) (= (type b@@29) (MapType0Type T@@55 boolType))) (= (U_2_bool (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@30))  (and (U_2_bool (MapType0Select a@@37 o@@30)) (not (U_2_bool (MapType0Select b@@29 o@@30))))))) :qid |DafnyPreludebpl.761:18| :skolemid |513| :pattern ( (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@30)) )))
(assert (forall ((a@@38 T@U) (b@@30 T@U) (y@@8 T@U) ) (! (let ((T@@56 (type y@@8))) (=> (and (and (= (type a@@38) (MapType0Type T@@56 boolType)) (= (type b@@30) (MapType0Type T@@56 boolType))) (U_2_bool (MapType0Select b@@30 y@@8))) (not (U_2_bool (MapType0Select (|ISet#Difference| a@@38 b@@30) y@@8))))) :qid |DafnyPreludebpl.763:18| :skolemid |514| :pattern ( (|ISet#Difference| a@@38 b@@30) (MapType0Select b@@30 y@@8)) )))
(assert (forall ((a@@39 T@U) (b@@31 T@U) ) (! (let ((T@@57 (MapType0TypeInv0 (type a@@39)))) (=> (and (= (type a@@39) (MapType0Type T@@57 boolType)) (= (type b@@31) (MapType0Type T@@57 boolType))) (= (|ISet#Subset| a@@39 b@@31) (forall ((o@@31 T@U) ) (!  (=> (and (= (type o@@31) T@@57) (U_2_bool (MapType0Select a@@39 o@@31))) (U_2_bool (MapType0Select b@@31 o@@31))) :qid |DafnyPreludebpl.768:33| :skolemid |515| :pattern ( (MapType0Select a@@39 o@@31)) :pattern ( (MapType0Select b@@31 o@@31)) ))))) :qid |DafnyPreludebpl.767:17| :skolemid |516| :pattern ( (|ISet#Subset| a@@39 b@@31)) )))
(assert (forall ((a@@40 T@U) (b@@32 T@U) ) (! (let ((T@@58 (MapType0TypeInv0 (type a@@40)))) (=> (and (= (type a@@40) (MapType0Type T@@58 boolType)) (= (type b@@32) (MapType0Type T@@58 boolType))) (= (|ISet#Equal| a@@40 b@@32) (forall ((o@@32 T@U) ) (!  (=> (= (type o@@32) T@@58) (= (U_2_bool (MapType0Select a@@40 o@@32)) (U_2_bool (MapType0Select b@@32 o@@32)))) :qid |DafnyPreludebpl.772:32| :skolemid |517| :pattern ( (MapType0Select a@@40 o@@32)) :pattern ( (MapType0Select b@@32 o@@32)) ))))) :qid |DafnyPreludebpl.771:17| :skolemid |518| :pattern ( (|ISet#Equal| a@@40 b@@32)) )))
(assert (forall ((a@@41 T@U) (b@@33 T@U) ) (! (let ((T@@59 (MapType0TypeInv0 (type a@@41)))) (=> (and (and (= (type a@@41) (MapType0Type T@@59 boolType)) (= (type b@@33) (MapType0Type T@@59 boolType))) (|ISet#Equal| a@@41 b@@33)) (= a@@41 b@@33))) :qid |DafnyPreludebpl.773:17| :skolemid |519| :pattern ( (|ISet#Equal| a@@41 b@@33)) )))
(assert (forall ((a@@42 T@U) (b@@34 T@U) ) (! (let ((T@@60 (MapType0TypeInv0 (type a@@42)))) (=> (and (= (type a@@42) (MapType0Type T@@60 boolType)) (= (type b@@34) (MapType0Type T@@60 boolType))) (= (|ISet#Disjoint| a@@42 b@@34) (forall ((o@@33 T@U) ) (!  (=> (= (type o@@33) T@@60) (or (not (U_2_bool (MapType0Select a@@42 o@@33))) (not (U_2_bool (MapType0Select b@@34 o@@33))))) :qid |DafnyPreludebpl.778:35| :skolemid |520| :pattern ( (MapType0Select a@@42 o@@33)) :pattern ( (MapType0Select b@@34 o@@33)) ))))) :qid |DafnyPreludebpl.777:18| :skolemid |521| :pattern ( (|ISet#Disjoint| a@@42 b@@34)) )))
(assert (forall ((a@@43 Int) (b@@35 Int) ) (! (= (<= a@@43 b@@35) (= (|Math#min| a@@43 b@@35) a@@43)) :qid |DafnyPreludebpl.785:15| :skolemid |522| :pattern ( (|Math#min| a@@43 b@@35)) )))
(assert (forall ((a@@44 Int) (b@@36 Int) ) (! (= (<= b@@36 a@@44) (= (|Math#min| a@@44 b@@36) b@@36)) :qid |DafnyPreludebpl.786:15| :skolemid |523| :pattern ( (|Math#min| a@@44 b@@36)) )))
(assert (forall ((a@@45 Int) (b@@37 Int) ) (!  (or (= (|Math#min| a@@45 b@@37) a@@45) (= (|Math#min| a@@45 b@@37) b@@37)) :qid |DafnyPreludebpl.787:15| :skolemid |524| :pattern ( (|Math#min| a@@45 b@@37)) )))
(assert (forall ((a@@46 Int) ) (!  (=> (<= 0 a@@46) (= (|Math#clip| a@@46) a@@46)) :qid |DafnyPreludebpl.790:15| :skolemid |525| :pattern ( (|Math#clip| a@@46)) )))
(assert (forall ((a@@47 Int) ) (!  (=> (< a@@47 0) (= (|Math#clip| a@@47) 0)) :qid |DafnyPreludebpl.791:15| :skolemid |526| :pattern ( (|Math#clip| a@@47)) )))
(assert (forall ((ms T@U) ) (! (let ((T@@61 (MapType0TypeInv0 (type ms)))) (=> (= (type ms) (MapType0Type T@@61 intType)) (= ($IsGoodMultiSet ms) (forall ((bx@@22 T@U) ) (!  (=> (= (type bx@@22) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@22))) (<= (U_2_int (MapType0Select ms bx@@22)) (|MultiSet#Card| ms)))) :qid |DafnyPreludebpl.799:11| :skolemid |527| :pattern ( (MapType0Select ms bx@@22)) ))))) :qid |DafnyPreludebpl.797:18| :skolemid |528| :pattern ( ($IsGoodMultiSet ms)) )))
(assert (forall ((s@@5 T@U) ) (! (let ((T@@62 (MapType0TypeInv0 (type s@@5)))) (=> (= (type s@@5) (MapType0Type T@@62 intType)) (<= 0 (|MultiSet#Card| s@@5)))) :qid |DafnyPreludebpl.802:18| :skolemid |529| :pattern ( (|MultiSet#Card| s@@5)) )))
(assert (forall ((s@@6 T@U) (x@@27 T@U) (n@@5 T@U) ) (! (let ((T@@63 (type x@@27))) (=> (and (and (= (type s@@6) (MapType0Type T@@63 intType)) (= (type n@@5) intType)) (<= 0 (U_2_int n@@5))) (= (|MultiSet#Card| (MapType0Store s@@6 x@@27 n@@5)) (+ (- (|MultiSet#Card| s@@6) (U_2_int (MapType0Select s@@6 x@@27))) (U_2_int n@@5))))) :qid |DafnyPreludebpl.803:18| :skolemid |530| :pattern ( (|MultiSet#Card| (MapType0Store s@@6 x@@27 n@@5))) )))
(assert (forall ((T@@64 T@T) ) (! (= (type (|MultiSet#Empty| T@@64)) (MapType0Type T@@64 intType)) :qid |funType:MultiSet#Empty| :pattern ( (|MultiSet#Empty| T@@64)) )))
(assert (forall ((o@@34 T@U) ) (! (let ((T@@65 (type o@@34))) (= (U_2_int (MapType0Select (|MultiSet#Empty| T@@65) o@@34)) 0)) :qid |DafnyPreludebpl.807:18| :skolemid |531| :pattern ( (let ((T@@65 (type o@@34))) (MapType0Select (|MultiSet#Empty| T@@65) o@@34))) )))
(assert (forall ((s@@7 T@U) ) (! (let ((T@@66 (MapType0TypeInv0 (type s@@7)))) (=> (= (type s@@7) (MapType0Type T@@66 intType)) (and (= (= (|MultiSet#Card| s@@7) 0) (= s@@7 (|MultiSet#Empty| T@@66))) (=> (not (= (|MultiSet#Card| s@@7) 0)) (exists ((x@@28 T@U) ) (!  (and (= (type x@@28) T@@66) (< 0 (U_2_int (MapType0Select s@@7 x@@28)))) :qid |DafnyPreludebpl.810:38| :skolemid |532| :no-pattern (type x@@28) :no-pattern (U_2_int x@@28) :no-pattern (U_2_bool x@@28) )))))) :qid |DafnyPreludebpl.808:18| :skolemid |533| :pattern ( (|MultiSet#Card| s@@7)) )))
(assert (forall ((arg0@@84 T@U) ) (! (let ((T@@67 (type arg0@@84))) (= (type (|MultiSet#Singleton| arg0@@84)) (MapType0Type T@@67 intType))) :qid |funType:MultiSet#Singleton| :pattern ( (|MultiSet#Singleton| arg0@@84)) )))
(assert (forall ((r@@4 T@U) (o@@35 T@U) ) (! (let ((T@@68 (type r@@4))) (=> (= (type o@@35) T@@68) (and (= (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) 1) (= r@@4 o@@35)) (= (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) 0) (not (= r@@4 o@@35)))))) :qid |DafnyPreludebpl.813:18| :skolemid |534| :pattern ( (MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) )))
(assert (forall ((arg0@@85 T@U) (arg1@@32 T@U) ) (! (let ((T@@69 (type arg1@@32))) (= (type (|MultiSet#UnionOne| arg0@@85 arg1@@32)) (MapType0Type T@@69 intType))) :qid |funType:MultiSet#UnionOne| :pattern ( (|MultiSet#UnionOne| arg0@@85 arg1@@32)) )))
(assert (forall ((r@@5 T@U) ) (! (let ((T@@70 (type r@@5))) (= (|MultiSet#Singleton| r@@5) (|MultiSet#UnionOne| (|MultiSet#Empty| T@@70) r@@5))) :qid |DafnyPreludebpl.815:18| :skolemid |535| :pattern ( (|MultiSet#Singleton| r@@5)) )))
(assert (forall ((a@@48 T@U) (x@@29 T@U) (o@@36 T@U) ) (! (let ((T@@71 (type x@@29))) (=> (and (= (type a@@48) (MapType0Type T@@71 intType)) (= (type o@@36) T@@71)) (= (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@29) o@@36)))  (or (= o@@36 x@@29) (< 0 (U_2_int (MapType0Select a@@48 o@@36))))))) :qid |DafnyPreludebpl.819:18| :skolemid |536| :pattern ( (MapType0Select (|MultiSet#UnionOne| a@@48 x@@29) o@@36)) )))
(assert (forall ((a@@49 T@U) (x@@30 T@U) ) (! (let ((T@@72 (type x@@30))) (=> (= (type a@@49) (MapType0Type T@@72 intType)) (= (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@49 x@@30) x@@30)) (+ (U_2_int (MapType0Select a@@49 x@@30)) 1)))) :qid |DafnyPreludebpl.822:18| :skolemid |537| :pattern ( (|MultiSet#UnionOne| a@@49 x@@30)) )))
(assert (forall ((a@@50 T@U) (x@@31 T@U) (y@@9 T@U) ) (! (let ((T@@73 (type x@@31))) (=> (and (and (= (type a@@50) (MapType0Type T@@73 intType)) (= (type y@@9) T@@73)) (< 0 (U_2_int (MapType0Select a@@50 y@@9)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@50 x@@31) y@@9))))) :qid |DafnyPreludebpl.825:18| :skolemid |538| :pattern ( (|MultiSet#UnionOne| a@@50 x@@31) (MapType0Select a@@50 y@@9)) )))
(assert (forall ((a@@51 T@U) (x@@32 T@U) (y@@10 T@U) ) (! (let ((T@@74 (type x@@32))) (=> (and (and (= (type a@@51) (MapType0Type T@@74 intType)) (= (type y@@10) T@@74)) (not (= x@@32 y@@10))) (= (U_2_int (MapType0Select a@@51 y@@10)) (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@51 x@@32) y@@10))))) :qid |DafnyPreludebpl.828:18| :skolemid |539| :pattern ( (|MultiSet#UnionOne| a@@51 x@@32) (MapType0Select a@@51 y@@10)) )))
(assert (forall ((a@@52 T@U) (x@@33 T@U) ) (! (let ((T@@75 (type x@@33))) (=> (= (type a@@52) (MapType0Type T@@75 intType)) (= (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@33)) (+ (|MultiSet#Card| a@@52) 1)))) :qid |DafnyPreludebpl.830:18| :skolemid |540| :pattern ( (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@33))) )))
(assert (forall ((arg0@@86 T@U) (arg1@@33 T@U) ) (! (let ((T@@76 (MapType0TypeInv0 (type arg0@@86)))) (= (type (|MultiSet#Union| arg0@@86 arg1@@33)) (MapType0Type T@@76 intType))) :qid |funType:MultiSet#Union| :pattern ( (|MultiSet#Union| arg0@@86 arg1@@33)) )))
(assert (forall ((a@@53 T@U) (b@@38 T@U) (o@@37 T@U) ) (! (let ((T@@77 (type o@@37))) (=> (and (= (type a@@53) (MapType0Type T@@77 intType)) (= (type b@@38) (MapType0Type T@@77 intType))) (= (U_2_int (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@37)) (+ (U_2_int (MapType0Select a@@53 o@@37)) (U_2_int (MapType0Select b@@38 o@@37)))))) :qid |DafnyPreludebpl.836:18| :skolemid |541| :pattern ( (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@37)) )))
(assert (forall ((a@@54 T@U) (b@@39 T@U) ) (! (let ((T@@78 (MapType0TypeInv0 (type a@@54)))) (=> (and (= (type a@@54) (MapType0Type T@@78 intType)) (= (type b@@39) (MapType0Type T@@78 intType))) (= (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39)) (+ (|MultiSet#Card| a@@54) (|MultiSet#Card| b@@39))))) :qid |DafnyPreludebpl.838:18| :skolemid |542| :pattern ( (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39))) )))
(assert (forall ((arg0@@87 T@U) (arg1@@34 T@U) ) (! (let ((T@@79 (MapType0TypeInv0 (type arg0@@87)))) (= (type (|MultiSet#Intersection| arg0@@87 arg1@@34)) (MapType0Type T@@79 intType))) :qid |funType:MultiSet#Intersection| :pattern ( (|MultiSet#Intersection| arg0@@87 arg1@@34)) )))
(assert (forall ((a@@55 T@U) (b@@40 T@U) (o@@38 T@U) ) (! (let ((T@@80 (type o@@38))) (=> (and (= (type a@@55) (MapType0Type T@@80 intType)) (= (type b@@40) (MapType0Type T@@80 intType))) (= (U_2_int (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@38)) (|Math#min| (U_2_int (MapType0Select a@@55 o@@38)) (U_2_int (MapType0Select b@@40 o@@38)))))) :qid |DafnyPreludebpl.842:18| :skolemid |543| :pattern ( (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@38)) )))
(assert (forall ((a@@56 T@U) (b@@41 T@U) ) (! (let ((T@@81 (MapType0TypeInv0 (type a@@56)))) (=> (and (= (type a@@56) (MapType0Type T@@81 intType)) (= (type b@@41) (MapType0Type T@@81 intType))) (= (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41) (|MultiSet#Intersection| a@@56 b@@41)))) :qid |DafnyPreludebpl.846:18| :skolemid |544| :pattern ( (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41)) )))
(assert (forall ((a@@57 T@U) (b@@42 T@U) ) (! (let ((T@@82 (MapType0TypeInv0 (type a@@57)))) (=> (and (= (type a@@57) (MapType0Type T@@82 intType)) (= (type b@@42) (MapType0Type T@@82 intType))) (= (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42)) (|MultiSet#Intersection| a@@57 b@@42)))) :qid |DafnyPreludebpl.848:18| :skolemid |545| :pattern ( (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42))) )))
(assert (forall ((arg0@@88 T@U) (arg1@@35 T@U) ) (! (let ((T@@83 (MapType0TypeInv0 (type arg0@@88)))) (= (type (|MultiSet#Difference| arg0@@88 arg1@@35)) (MapType0Type T@@83 intType))) :qid |funType:MultiSet#Difference| :pattern ( (|MultiSet#Difference| arg0@@88 arg1@@35)) )))
(assert (forall ((a@@58 T@U) (b@@43 T@U) (o@@39 T@U) ) (! (let ((T@@84 (type o@@39))) (=> (and (= (type a@@58) (MapType0Type T@@84 intType)) (= (type b@@43) (MapType0Type T@@84 intType))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@39)) (|Math#clip| (- (U_2_int (MapType0Select a@@58 o@@39)) (U_2_int (MapType0Select b@@43 o@@39))))))) :qid |DafnyPreludebpl.853:18| :skolemid |546| :pattern ( (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@39)) )))
(assert (forall ((a@@59 T@U) (b@@44 T@U) (y@@11 T@U) ) (! (let ((T@@85 (type y@@11))) (=> (and (and (= (type a@@59) (MapType0Type T@@85 intType)) (= (type b@@44) (MapType0Type T@@85 intType))) (<= (U_2_int (MapType0Select a@@59 y@@11)) (U_2_int (MapType0Select b@@44 y@@11)))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@59 b@@44) y@@11)) 0))) :qid |DafnyPreludebpl.855:18| :skolemid |547| :pattern ( (|MultiSet#Difference| a@@59 b@@44) (MapType0Select b@@44 y@@11) (MapType0Select a@@59 y@@11)) )))
(assert (forall ((a@@60 T@U) (b@@45 T@U) ) (! (let ((T@@86 (MapType0TypeInv0 (type a@@60)))) (=> (and (= (type a@@60) (MapType0Type T@@86 intType)) (= (type b@@45) (MapType0Type T@@86 intType))) (and (= (+ (+ (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (|MultiSet#Card| (|MultiSet#Difference| b@@45 a@@60))) (* 2 (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45)))) (|MultiSet#Card| (|MultiSet#Union| a@@60 b@@45))) (= (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (- (|MultiSet#Card| a@@60) (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45))))))) :qid |DafnyPreludebpl.857:18| :skolemid |548| :pattern ( (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45))) )))
(assert (forall ((a@@61 T@U) (b@@46 T@U) ) (! (let ((T@@87 (MapType0TypeInv0 (type a@@61)))) (=> (and (= (type a@@61) (MapType0Type T@@87 intType)) (= (type b@@46) (MapType0Type T@@87 intType))) (= (|MultiSet#Subset| a@@61 b@@46) (forall ((o@@40 T@U) ) (!  (=> (= (type o@@40) T@@87) (<= (U_2_int (MapType0Select a@@61 o@@40)) (U_2_int (MapType0Select b@@46 o@@40)))) :qid |DafnyPreludebpl.867:37| :skolemid |549| :pattern ( (MapType0Select a@@61 o@@40)) :pattern ( (MapType0Select b@@46 o@@40)) ))))) :qid |DafnyPreludebpl.866:17| :skolemid |550| :pattern ( (|MultiSet#Subset| a@@61 b@@46)) )))
(assert (forall ((a@@62 T@U) (b@@47 T@U) ) (! (let ((T@@88 (MapType0TypeInv0 (type a@@62)))) (=> (and (= (type a@@62) (MapType0Type T@@88 intType)) (= (type b@@47) (MapType0Type T@@88 intType))) (= (|MultiSet#Equal| a@@62 b@@47) (forall ((o@@41 T@U) ) (!  (=> (= (type o@@41) T@@88) (= (U_2_int (MapType0Select a@@62 o@@41)) (U_2_int (MapType0Select b@@47 o@@41)))) :qid |DafnyPreludebpl.871:36| :skolemid |551| :pattern ( (MapType0Select a@@62 o@@41)) :pattern ( (MapType0Select b@@47 o@@41)) ))))) :qid |DafnyPreludebpl.870:17| :skolemid |552| :pattern ( (|MultiSet#Equal| a@@62 b@@47)) )))
(assert (forall ((a@@63 T@U) (b@@48 T@U) ) (! (let ((T@@89 (MapType0TypeInv0 (type a@@63)))) (=> (and (and (= (type a@@63) (MapType0Type T@@89 intType)) (= (type b@@48) (MapType0Type T@@89 intType))) (|MultiSet#Equal| a@@63 b@@48)) (= a@@63 b@@48))) :qid |DafnyPreludebpl.873:17| :skolemid |553| :pattern ( (|MultiSet#Equal| a@@63 b@@48)) )))
(assert (forall ((a@@64 T@U) (b@@49 T@U) ) (! (let ((T@@90 (MapType0TypeInv0 (type a@@64)))) (=> (and (= (type a@@64) (MapType0Type T@@90 intType)) (= (type b@@49) (MapType0Type T@@90 intType))) (= (|MultiSet#Disjoint| a@@64 b@@49) (forall ((o@@42 T@U) ) (!  (=> (= (type o@@42) T@@90) (or (= (U_2_int (MapType0Select a@@64 o@@42)) 0) (= (U_2_int (MapType0Select b@@49 o@@42)) 0))) :qid |DafnyPreludebpl.878:39| :skolemid |554| :pattern ( (MapType0Select a@@64 o@@42)) :pattern ( (MapType0Select b@@49 o@@42)) ))))) :qid |DafnyPreludebpl.877:18| :skolemid |555| :pattern ( (|MultiSet#Disjoint| a@@64 b@@49)) )))
(assert (forall ((arg0@@89 T@U) ) (! (let ((T@@91 (MapType0TypeInv0 (type arg0@@89)))) (= (type (|MultiSet#FromSet| arg0@@89)) (MapType0Type T@@91 intType))) :qid |funType:MultiSet#FromSet| :pattern ( (|MultiSet#FromSet| arg0@@89)) )))
(assert (forall ((s@@8 T@U) (a@@65 T@U) ) (! (let ((T@@92 (type a@@65))) (=> (= (type s@@8) (MapType0Type T@@92 boolType)) (and (= (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 0)  (not (U_2_bool (MapType0Select s@@8 a@@65)))) (= (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 1) (U_2_bool (MapType0Select s@@8 a@@65)))))) :qid |DafnyPreludebpl.882:18| :skolemid |556| :pattern ( (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) )))
(assert (forall ((s@@9 T@U) ) (! (let ((T@@93 (MapType0TypeInv0 (type s@@9)))) (=> (= (type s@@9) (MapType0Type T@@93 boolType)) (= (|MultiSet#Card| (|MultiSet#FromSet| s@@9)) (|Set#Card| s@@9)))) :qid |DafnyPreludebpl.885:18| :skolemid |557| :pattern ( (|MultiSet#Card| (|MultiSet#FromSet| s@@9))) )))
(assert (forall ((arg0@@90 T@U) ) (! (let ((T@@94 (SeqTypeInv0 (type arg0@@90)))) (= (type (|MultiSet#FromSeq| arg0@@90)) (MapType0Type T@@94 intType))) :qid |funType:MultiSet#FromSeq| :pattern ( (|MultiSet#FromSeq| arg0@@90)) )))
(assert (forall ((s@@10 T@U) ) (! (let ((T@@95 (SeqTypeInv0 (type s@@10)))) (=> (= (type s@@10) (SeqType T@@95)) ($IsGoodMultiSet (|MultiSet#FromSeq| s@@10)))) :qid |DafnyPreludebpl.891:18| :skolemid |558| :pattern ( (|MultiSet#FromSeq| s@@10)) )))
(assert (forall ((s@@11 T@U) ) (! (let ((T@@96 (SeqTypeInv0 (type s@@11)))) (=> (= (type s@@11) (SeqType T@@96)) (= (|MultiSet#Card| (|MultiSet#FromSeq| s@@11)) (|Seq#Length| s@@11)))) :qid |DafnyPreludebpl.893:18| :skolemid |559| :pattern ( (|MultiSet#Card| (|MultiSet#FromSeq| s@@11))) )))
(assert (forall ((arg0@@91 T@U) (arg1@@36 T@U) ) (! (let ((T@@97 (type arg1@@36))) (= (type (|Seq#Build| arg0@@91 arg1@@36)) (SeqType T@@97))) :qid |funType:Seq#Build| :pattern ( (|Seq#Build| arg0@@91 arg1@@36)) )))
(assert (forall ((s@@12 T@U) (v@@29 T@U) ) (! (let ((T@@98 (type v@@29))) (=> (= (type s@@12) (SeqType T@@98)) (= (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@29)) (|MultiSet#UnionOne| (|MultiSet#FromSeq| s@@12) v@@29)))) :qid |DafnyPreludebpl.897:18| :skolemid |560| :pattern ( (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@29))) )))
(assert (forall ((T@@99 T@T) ) (! (= (type (|Seq#Empty| T@@99)) (SeqType T@@99)) :qid |funType:Seq#Empty| :pattern ( (|Seq#Empty| T@@99)) )))
(assert (forall ((T@@100 T@T) ) (! (= (|MultiSet#FromSeq| (|Seq#Empty| T@@100)) (|MultiSet#Empty| T@@100)) :skolemid |561| )))
(assert (forall ((arg0@@92 T@U) (arg1@@37 T@U) ) (! (let ((T@@101 (SeqTypeInv0 (type arg0@@92)))) (= (type (|Seq#Append| arg0@@92 arg1@@37)) (SeqType T@@101))) :qid |funType:Seq#Append| :pattern ( (|Seq#Append| arg0@@92 arg1@@37)) )))
(assert (forall ((a@@66 T@U) (b@@50 T@U) ) (! (let ((T@@102 (SeqTypeInv0 (type a@@66)))) (=> (and (= (type a@@66) (SeqType T@@102)) (= (type b@@50) (SeqType T@@102))) (= (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50)) (|MultiSet#Union| (|MultiSet#FromSeq| a@@66) (|MultiSet#FromSeq| b@@50))))) :qid |DafnyPreludebpl.904:18| :skolemid |562| :pattern ( (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50))) )))
(assert (forall ((arg0@@93 T@U) (arg1@@38 Int) (arg2@@1 T@U) ) (! (let ((T@@103 (type arg2@@1))) (= (type (|Seq#Update| arg0@@93 arg1@@38 arg2@@1)) (SeqType T@@103))) :qid |funType:Seq#Update| :pattern ( (|Seq#Update| arg0@@93 arg1@@38 arg2@@1)) )))
(assert (forall ((s@@13 T@U) (i@@6 Int) (v@@30 T@U) (x@@34 T@U) ) (! (let ((T@@104 (type v@@30))) (=> (and (and (= (type s@@13) (SeqType T@@104)) (= (type x@@34) T@@104)) (and (<= 0 i@@6) (< i@@6 (|Seq#Length| s@@13)))) (= (U_2_int (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@6 v@@30)) x@@34)) (U_2_int (MapType0Select (|MultiSet#Union| (|MultiSet#Difference| (|MultiSet#FromSeq| s@@13) (|MultiSet#Singleton| (|Seq#Index| s@@13 i@@6))) (|MultiSet#Singleton| v@@30)) x@@34))))) :qid |DafnyPreludebpl.909:18| :skolemid |563| :pattern ( (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@6 v@@30)) x@@34)) )))
(assert (forall ((s@@14 T@U) (x@@35 T@U) ) (! (let ((T@@105 (type x@@35))) (=> (= (type s@@14) (SeqType T@@105)) (= (exists ((i@@7 Int) ) (!  (and (and (<= 0 i@@7) (< i@@7 (|Seq#Length| s@@14))) (= x@@35 (|Seq#Index| s@@14 i@@7))) :qid |DafnyPreludebpl.916:11| :skolemid |564| :pattern ( (|Seq#Index| s@@14 i@@7)) )) (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@35)))))) :qid |DafnyPreludebpl.915:18| :skolemid |565| :pattern ( (MapType0Select (|MultiSet#FromSeq| s@@14) x@@35)) )))
(assert (forall ((s@@15 T@U) ) (! (let ((T@@106 (SeqTypeInv0 (type s@@15)))) (=> (= (type s@@15) (SeqType T@@106)) (<= 0 (|Seq#Length| s@@15)))) :qid |DafnyPreludebpl.925:18| :skolemid |566| :pattern ( (|Seq#Length| s@@15)) )))
(assert (forall ((T@@107 T@T) ) (! (= (|Seq#Length| (|Seq#Empty| T@@107)) 0) :skolemid |567| :pattern ( (|Seq#Empty| T@@107)) )))
(assert (forall ((s@@16 T@U) ) (! (let ((T@@108 (SeqTypeInv0 (type s@@16)))) (=> (and (= (type s@@16) (SeqType T@@108)) (= (|Seq#Length| s@@16) 0)) (= s@@16 (|Seq#Empty| T@@108)))) :qid |DafnyPreludebpl.929:18| :skolemid |568| :pattern ( (|Seq#Length| s@@16)) )))
(assert (forall ((arg0@@94 T@U) ) (! (let ((T@@109 (type arg0@@94))) (= (type (|Seq#Singleton| arg0@@94)) (SeqType T@@109))) :qid |funType:Seq#Singleton| :pattern ( (|Seq#Singleton| arg0@@94)) )))
(assert (forall ((t@@23 T@U) ) (! (= (|Seq#Length| (|Seq#Singleton| t@@23)) 1) :qid |DafnyPreludebpl.942:18| :skolemid |569| :pattern ( (|Seq#Length| (|Seq#Singleton| t@@23))) )))
(assert  (and (forall ((arg0@@95 T@U) ) (! (let ((T@@110 (SeqTypeInv0 (type arg0@@95)))) (= (type (|Seq#Build_inv0| arg0@@95)) (SeqType T@@110))) :qid |funType:Seq#Build_inv0| :pattern ( (|Seq#Build_inv0| arg0@@95)) )) (forall ((arg0@@96 T@U) ) (! (let ((T@@111 (SeqTypeInv0 (type arg0@@96)))) (= (type (|Seq#Build_inv1| arg0@@96)) T@@111)) :qid |funType:Seq#Build_inv1| :pattern ( (|Seq#Build_inv1| arg0@@96)) ))))
(assert (forall ((s@@17 T@U) (val@@5 T@U) ) (! (let ((T@@112 (type val@@5))) (=> (= (type s@@17) (SeqType T@@112)) (and (= (|Seq#Build_inv0| (|Seq#Build| s@@17 val@@5)) s@@17) (= (|Seq#Build_inv1| (|Seq#Build| s@@17 val@@5)) val@@5)))) :qid |DafnyPreludebpl.947:18| :skolemid |570| :pattern ( (|Seq#Build| s@@17 val@@5)) )))
(assert (forall ((s@@18 T@U) (v@@31 T@U) ) (! (let ((T@@113 (type v@@31))) (=> (= (type s@@18) (SeqType T@@113)) (= (|Seq#Length| (|Seq#Build| s@@18 v@@31)) (+ 1 (|Seq#Length| s@@18))))) :qid |DafnyPreludebpl.952:18| :skolemid |571| :pattern ( (|Seq#Build| s@@18 v@@31)) )))
(assert (forall ((s@@19 T@U) (i@@8 Int) (v@@32 T@U) ) (! (let ((T@@114 (type v@@32))) (=> (= (type s@@19) (SeqType T@@114)) (and (=> (= i@@8 (|Seq#Length| s@@19)) (= (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8) v@@32)) (=> (not (= i@@8 (|Seq#Length| s@@19))) (= (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8) (|Seq#Index| s@@19 i@@8)))))) :qid |DafnyPreludebpl.955:18| :skolemid |572| :pattern ( (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8)) )))
(assert (forall ((s@@20 T@U) (bx@@23 T@U) (t@@24 T@U) ) (!  (=> (and (and (and (= (type s@@20) (SeqType BoxType)) (= (type bx@@23) BoxType)) (= (type t@@24) TyType)) (and ($Is s@@20 (TSeq t@@24)) ($IsBox bx@@23 t@@24))) ($Is (|Seq#Build| s@@20 bx@@23) (TSeq t@@24))) :qid |DafnyPreludebpl.960:15| :skolemid |573| :pattern ( ($Is (|Seq#Build| s@@20 bx@@23) (TSeq t@@24))) )))
(assert  (and (= (Ctor HandleTypeType) 23) (forall ((arg0@@97 T@U) (arg1@@39 T@U) (arg2@@2 Int) (arg3 T@U) ) (! (= (type (|Seq#Create| arg0@@97 arg1@@39 arg2@@2 arg3)) (SeqType BoxType)) :qid |funType:Seq#Create| :pattern ( (|Seq#Create| arg0@@97 arg1@@39 arg2@@2 arg3)) ))))
(assert (forall ((ty T@U) (heap T@U) (len Int) (init T@U) ) (!  (=> (and (and (and (= (type ty) TyType) (= (type heap) (MapType0Type refType MapType1Type))) (= (type init) HandleTypeType)) (and ($IsGoodHeap heap) (<= 0 len))) (= (|Seq#Length| (|Seq#Create| ty heap len init)) len)) :qid |DafnyPreludebpl.964:15| :skolemid |574| :pattern ( (|Seq#Length| (|Seq#Create| ty heap len init))) )))
(assert (forall ((arg0@@98 T@U) (arg1@@40 T@U) (arg2@@3 T@U) (arg3@@0 T@U) (arg4 T@U) ) (! (= (type (Apply1 arg0@@98 arg1@@40 arg2@@3 arg3@@0 arg4)) BoxType) :qid |funType:Apply1| :pattern ( (Apply1 arg0@@98 arg1@@40 arg2@@3 arg3@@0 arg4)) )))
(assert (forall ((ty@@0 T@U) (heap@@0 T@U) (len@@0 Int) (init@@0 T@U) (i@@9 Int) ) (!  (=> (and (and (and (= (type ty@@0) TyType) (= (type heap@@0) (MapType0Type refType MapType1Type))) (= (type init@@0) HandleTypeType)) (and (and ($IsGoodHeap heap@@0) (<= 0 i@@9)) (< i@@9 len@@0))) (= (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@9) (Apply1 TInt (TSeq ty@@0) heap@@0 init@@0 ($Box (int_2_U i@@9))))) :qid |DafnyPreludebpl.968:15| :skolemid |575| :pattern ( (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@9)) )))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (let ((T@@115 (SeqTypeInv0 (type s0)))) (=> (and (= (type s0) (SeqType T@@115)) (= (type s1) (SeqType T@@115))) (= (|Seq#Length| (|Seq#Append| s0 s1)) (+ (|Seq#Length| s0) (|Seq#Length| s1))))) :qid |DafnyPreludebpl.974:18| :skolemid |576| :pattern ( (|Seq#Length| (|Seq#Append| s0 s1))) )))
(assert (forall ((t@@25 T@U) ) (! (= (|Seq#Index| (|Seq#Singleton| t@@25) 0) t@@25) :qid |DafnyPreludebpl.978:18| :skolemid |577| :pattern ( (|Seq#Index| (|Seq#Singleton| t@@25) 0)) )))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) (n@@6 Int) ) (! (let ((T@@116 (SeqTypeInv0 (type s0@@0)))) (=> (and (= (type s0@@0) (SeqType T@@116)) (= (type s1@@0) (SeqType T@@116))) (and (=> (< n@@6 (|Seq#Length| s0@@0)) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6) (|Seq#Index| s0@@0 n@@6))) (=> (<= (|Seq#Length| s0@@0) n@@6) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6) (|Seq#Index| s1@@0 (- n@@6 (|Seq#Length| s0@@0)))))))) :qid |DafnyPreludebpl.979:18| :skolemid |578| :pattern ( (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6)) )))
(assert (forall ((s@@21 T@U) (i@@10 Int) (v@@33 T@U) ) (! (let ((T@@117 (type v@@33))) (=> (= (type s@@21) (SeqType T@@117)) (=> (and (<= 0 i@@10) (< i@@10 (|Seq#Length| s@@21))) (= (|Seq#Length| (|Seq#Update| s@@21 i@@10 v@@33)) (|Seq#Length| s@@21))))) :qid |DafnyPreludebpl.984:18| :skolemid |579| :pattern ( (|Seq#Length| (|Seq#Update| s@@21 i@@10 v@@33))) )))
(assert (forall ((s@@22 T@U) (i@@11 Int) (v@@34 T@U) (n@@7 Int) ) (! (let ((T@@118 (type v@@34))) (=> (= (type s@@22) (SeqType T@@118)) (=> (and (<= 0 n@@7) (< n@@7 (|Seq#Length| s@@22))) (and (=> (= i@@11 n@@7) (= (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7) v@@34)) (=> (not (= i@@11 n@@7)) (= (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7) (|Seq#Index| s@@22 n@@7))))))) :qid |DafnyPreludebpl.986:18| :skolemid |580| :pattern ( (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7)) )))
(assert (forall ((s@@23 T@U) (x@@36 T@U) ) (! (let ((T@@119 (type x@@36))) (=> (= (type s@@23) (SeqType T@@119)) (= (|Seq#Contains| s@@23 x@@36) (exists ((i@@12 Int) ) (!  (and (and (<= 0 i@@12) (< i@@12 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@12) x@@36)) :qid |DafnyPreludebpl.994:13| :skolemid |581| :pattern ( (|Seq#Index| s@@23 i@@12)) ))))) :qid |DafnyPreludebpl.992:18| :skolemid |582| :pattern ( (|Seq#Contains| s@@23 x@@36)) )))
(assert (forall ((x@@37 T@U) ) (! (let ((T@@120 (type x@@37))) (not (|Seq#Contains| (|Seq#Empty| T@@120) x@@37))) :qid |DafnyPreludebpl.995:18| :skolemid |583| :pattern ( (let ((T@@120 (type x@@37))) (|Seq#Contains| (|Seq#Empty| T@@120) x@@37))) )))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) (x@@38 T@U) ) (! (let ((T@@121 (type x@@38))) (=> (and (= (type s0@@1) (SeqType T@@121)) (= (type s1@@1) (SeqType T@@121))) (= (|Seq#Contains| (|Seq#Append| s0@@1 s1@@1) x@@38)  (or (|Seq#Contains| s0@@1 x@@38) (|Seq#Contains| s1@@1 x@@38))))) :qid |DafnyPreludebpl.999:18| :skolemid |584| :pattern ( (|Seq#Contains| (|Seq#Append| s0@@1 s1@@1) x@@38)) )))
(assert (forall ((s@@24 T@U) (v@@35 T@U) (x@@39 T@U) ) (! (let ((T@@122 (type v@@35))) (=> (and (= (type s@@24) (SeqType T@@122)) (= (type x@@39) T@@122)) (= (|Seq#Contains| (|Seq#Build| s@@24 v@@35) x@@39)  (or (= v@@35 x@@39) (|Seq#Contains| s@@24 x@@39))))) :qid |DafnyPreludebpl.1004:18| :skolemid |585| :pattern ( (|Seq#Contains| (|Seq#Build| s@@24 v@@35) x@@39)) )))
(assert (forall ((arg0@@99 T@U) (arg1@@41 Int) ) (! (let ((T@@123 (SeqTypeInv0 (type arg0@@99)))) (= (type (|Seq#Take| arg0@@99 arg1@@41)) (SeqType T@@123))) :qid |funType:Seq#Take| :pattern ( (|Seq#Take| arg0@@99 arg1@@41)) )))
(assert (forall ((s@@25 T@U) (n@@8 Int) (x@@40 T@U) ) (! (let ((T@@124 (type x@@40))) (=> (= (type s@@25) (SeqType T@@124)) (= (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@40) (exists ((i@@13 Int) ) (!  (and (and (and (<= 0 i@@13) (< i@@13 n@@8)) (< i@@13 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@13) x@@40)) :qid |DafnyPreludebpl.1011:13| :skolemid |586| :pattern ( (|Seq#Index| s@@25 i@@13)) ))))) :qid |DafnyPreludebpl.1008:18| :skolemid |587| :pattern ( (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@40)) )))
(assert (forall ((arg0@@100 T@U) (arg1@@42 Int) ) (! (let ((T@@125 (SeqTypeInv0 (type arg0@@100)))) (= (type (|Seq#Drop| arg0@@100 arg1@@42)) (SeqType T@@125))) :qid |funType:Seq#Drop| :pattern ( (|Seq#Drop| arg0@@100 arg1@@42)) )))
(assert (forall ((s@@26 T@U) (n@@9 Int) (x@@41 T@U) ) (! (let ((T@@126 (type x@@41))) (=> (= (type s@@26) (SeqType T@@126)) (= (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@41) (exists ((i@@14 Int) ) (!  (and (and (and (<= 0 n@@9) (<= n@@9 i@@14)) (< i@@14 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@14) x@@41)) :qid |DafnyPreludebpl.1016:13| :skolemid |588| :pattern ( (|Seq#Index| s@@26 i@@14)) ))))) :qid |DafnyPreludebpl.1013:18| :skolemid |589| :pattern ( (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@41)) )))
(assert (forall ((s0@@2 T@U) (s1@@2 T@U) ) (! (let ((T@@127 (SeqTypeInv0 (type s0@@2)))) (=> (and (= (type s0@@2) (SeqType T@@127)) (= (type s1@@2) (SeqType T@@127))) (= (|Seq#Equal| s0@@2 s1@@2)  (and (= (|Seq#Length| s0@@2) (|Seq#Length| s1@@2)) (forall ((j Int) ) (!  (=> (and (<= 0 j) (< j (|Seq#Length| s0@@2))) (= (|Seq#Index| s0@@2 j) (|Seq#Index| s1@@2 j))) :qid |DafnyPreludebpl.1023:13| :skolemid |590| :pattern ( (|Seq#Index| s0@@2 j)) :pattern ( (|Seq#Index| s1@@2 j)) )))))) :qid |DafnyPreludebpl.1020:18| :skolemid |591| :pattern ( (|Seq#Equal| s0@@2 s1@@2)) )))
(assert (forall ((a@@67 T@U) (b@@51 T@U) ) (! (let ((T@@128 (SeqTypeInv0 (type a@@67)))) (=> (and (and (= (type a@@67) (SeqType T@@128)) (= (type b@@51) (SeqType T@@128))) (|Seq#Equal| a@@67 b@@51)) (= a@@67 b@@51))) :qid |DafnyPreludebpl.1025:18| :skolemid |592| :pattern ( (|Seq#Equal| a@@67 b@@51)) )))
(assert (forall ((s0@@3 T@U) (s1@@3 T@U) (n@@10 Int) ) (! (let ((T@@129 (SeqTypeInv0 (type s0@@3)))) (=> (and (= (type s0@@3) (SeqType T@@129)) (= (type s1@@3) (SeqType T@@129))) (= (|Seq#SameUntil| s0@@3 s1@@3 n@@10) (forall ((j@@0 Int) ) (!  (=> (and (<= 0 j@@0) (< j@@0 n@@10)) (= (|Seq#Index| s0@@3 j@@0) (|Seq#Index| s1@@3 j@@0))) :qid |DafnyPreludebpl.1031:13| :skolemid |593| :pattern ( (|Seq#Index| s0@@3 j@@0)) :pattern ( (|Seq#Index| s1@@3 j@@0)) ))))) :qid |DafnyPreludebpl.1029:18| :skolemid |594| :pattern ( (|Seq#SameUntil| s0@@3 s1@@3 n@@10)) )))
(assert (forall ((s@@27 T@U) (n@@11 Int) ) (! (let ((T@@130 (SeqTypeInv0 (type s@@27)))) (=> (= (type s@@27) (SeqType T@@130)) (=> (and (<= 0 n@@11) (<= n@@11 (|Seq#Length| s@@27))) (= (|Seq#Length| (|Seq#Take| s@@27 n@@11)) n@@11)))) :qid |DafnyPreludebpl.1035:18| :skolemid |595| :pattern ( (|Seq#Length| (|Seq#Take| s@@27 n@@11))) )))
(assert (forall ((s@@28 T@U) (n@@12 Int) (j@@1 Int) ) (! (let ((T@@131 (SeqTypeInv0 (type s@@28)))) (=> (= (type s@@28) (SeqType T@@131)) (=> (and (and (<= 0 j@@1) (< j@@1 n@@12)) (< j@@1 (|Seq#Length| s@@28))) (= (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@1) (|Seq#Index| s@@28 j@@1))))) :qid |DafnyPreludebpl.1037:18| :weight 25 :skolemid |596| :pattern ( (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@1)) :pattern ( (|Seq#Index| s@@28 j@@1) (|Seq#Take| s@@28 n@@12)) )))
(assert (forall ((s@@29 T@U) (n@@13 Int) ) (! (let ((T@@132 (SeqTypeInv0 (type s@@29)))) (=> (= (type s@@29) (SeqType T@@132)) (=> (and (<= 0 n@@13) (<= n@@13 (|Seq#Length| s@@29))) (= (|Seq#Length| (|Seq#Drop| s@@29 n@@13)) (- (|Seq#Length| s@@29) n@@13))))) :qid |DafnyPreludebpl.1045:18| :skolemid |597| :pattern ( (|Seq#Length| (|Seq#Drop| s@@29 n@@13))) )))
(assert (forall ((s@@30 T@U) (n@@14 Int) (j@@2 Int) ) (! (let ((T@@133 (SeqTypeInv0 (type s@@30)))) (=> (= (type s@@30) (SeqType T@@133)) (=> (and (and (<= 0 n@@14) (<= 0 j@@2)) (< j@@2 (- (|Seq#Length| s@@30) n@@14))) (= (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@2) (|Seq#Index| s@@30 (+ j@@2 n@@14)))))) :qid |DafnyPreludebpl.1047:18| :weight 25 :skolemid |598| :pattern ( (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@2)) )))
(assert (forall ((s@@31 T@U) (n@@15 Int) (k@@3 Int) ) (! (let ((T@@134 (SeqTypeInv0 (type s@@31)))) (=> (= (type s@@31) (SeqType T@@134)) (=> (and (and (<= 0 n@@15) (<= n@@15 k@@3)) (< k@@3 (|Seq#Length| s@@31))) (= (|Seq#Index| (|Seq#Drop| s@@31 n@@15) (- k@@3 n@@15)) (|Seq#Index| s@@31 k@@3))))) :qid |DafnyPreludebpl.1052:18| :weight 25 :skolemid |599| :pattern ( (|Seq#Index| s@@31 k@@3) (|Seq#Drop| s@@31 n@@15)) )))
(assert (forall ((s@@32 T@U) (t@@26 T@U) (n@@16 Int) ) (! (let ((T@@135 (SeqTypeInv0 (type s@@32)))) (=> (and (and (= (type s@@32) (SeqType T@@135)) (= (type t@@26) (SeqType T@@135))) (= n@@16 (|Seq#Length| s@@32))) (and (= (|Seq#Take| (|Seq#Append| s@@32 t@@26) n@@16) s@@32) (= (|Seq#Drop| (|Seq#Append| s@@32 t@@26) n@@16) t@@26)))) :qid |DafnyPreludebpl.1058:18| :skolemid |600| :pattern ( (|Seq#Take| (|Seq#Append| s@@32 t@@26) n@@16)) :pattern ( (|Seq#Drop| (|Seq#Append| s@@32 t@@26) n@@16)) )))
(assert (forall ((arg0@@101 T@U) (arg1@@43 T@U) ) (! (= (type (|Seq#FromArray| arg0@@101 arg1@@43)) (SeqType BoxType)) :qid |funType:Seq#FromArray| :pattern ( (|Seq#FromArray| arg0@@101 arg1@@43)) )))
(assert (forall ((h@@17 T@U) (a@@68 T@U) ) (!  (=> (and (= (type h@@17) (MapType0Type refType MapType1Type)) (= (type a@@68) refType)) (= (|Seq#Length| (|Seq#FromArray| h@@17 a@@68)) (_System.array.Length a@@68))) :qid |DafnyPreludebpl.1067:15| :skolemid |601| :pattern ( (|Seq#Length| (|Seq#FromArray| h@@17 a@@68))) )))
(assert (forall ((h@@18 T@U) (a@@69 T@U) ) (!  (=> (and (= (type h@@18) (MapType0Type refType MapType1Type)) (= (type a@@69) refType)) (forall ((i@@15 Int) ) (!  (=> (and (<= 0 i@@15) (< i@@15 (|Seq#Length| (|Seq#FromArray| h@@18 a@@69)))) (= (|Seq#Index| (|Seq#FromArray| h@@18 a@@69) i@@15) (MapType1Select (MapType0Select h@@18 a@@69) (IndexField i@@15)))) :qid |DafnyPreludebpl.1072:11| :skolemid |602| :pattern ( (MapType1Select (MapType0Select h@@18 a@@69) (IndexField i@@15))) :pattern ( (|Seq#Index| (|Seq#FromArray| h@@18 a@@69) i@@15)) ))) :qid |DafnyPreludebpl.1070:15| :skolemid |603| :pattern ( (|Seq#FromArray| h@@18 a@@69)) )))
(assert (forall ((h0 T@U) (h1 T@U) (a@@70 T@U) ) (!  (=> (and (and (= (type h0) (MapType0Type refType MapType1Type)) (= (type h1) (MapType0Type refType MapType1Type))) (= (type a@@70) refType)) (=> (and (and (and ($IsGoodHeap h0) ($IsGoodHeap h1)) ($HeapSucc h0 h1)) (= (MapType0Select h0 a@@70) (MapType0Select h1 a@@70))) (= (|Seq#FromArray| h0 a@@70) (|Seq#FromArray| h1 a@@70)))) :qid |DafnyPreludebpl.1082:15| :skolemid |604| :pattern ( (|Seq#FromArray| h1 a@@70) ($HeapSucc h0 h1)) )))
(assert (forall ((h@@19 T@U) (i@@16 Int) (v@@36 T@U) (a@@71 T@U) ) (!  (=> (and (and (and (= (type h@@19) (MapType0Type refType MapType1Type)) (= (type v@@36) BoxType)) (= (type a@@71) refType)) (and (<= 0 i@@16) (< i@@16 (_System.array.Length a@@71)))) (= (|Seq#FromArray| (MapType0Store h@@19 a@@71 (MapType1Store (MapType0Select h@@19 a@@71) (IndexField i@@16) v@@36)) a@@71) (|Seq#Update| (|Seq#FromArray| h@@19 a@@71) i@@16 v@@36))) :qid |DafnyPreludebpl.1087:15| :skolemid |605| :pattern ( (|Seq#FromArray| (MapType0Store h@@19 a@@71 (MapType1Store (MapType0Select h@@19 a@@71) (IndexField i@@16) v@@36)) a@@71)) )))
(assert (forall ((s@@33 T@U) (i@@17 Int) (v@@37 T@U) (n@@17 Int) ) (! (let ((T@@136 (type v@@37))) (=> (= (type s@@33) (SeqType T@@136)) (=> (and (and (<= 0 i@@17) (< i@@17 n@@17)) (<= n@@17 (|Seq#Length| s@@33))) (= (|Seq#Take| (|Seq#Update| s@@33 i@@17 v@@37) n@@17) (|Seq#Update| (|Seq#Take| s@@33 n@@17) i@@17 v@@37))))) :qid |DafnyPreludebpl.1092:18| :skolemid |606| :pattern ( (|Seq#Take| (|Seq#Update| s@@33 i@@17 v@@37) n@@17)) )))
(assert (forall ((s@@34 T@U) (i@@18 Int) (v@@38 T@U) (n@@18 Int) ) (! (let ((T@@137 (type v@@38))) (=> (= (type s@@34) (SeqType T@@137)) (=> (and (<= n@@18 i@@18) (< i@@18 (|Seq#Length| s@@34))) (= (|Seq#Take| (|Seq#Update| s@@34 i@@18 v@@38) n@@18) (|Seq#Take| s@@34 n@@18))))) :qid |DafnyPreludebpl.1095:18| :skolemid |607| :pattern ( (|Seq#Take| (|Seq#Update| s@@34 i@@18 v@@38) n@@18)) )))
(assert (forall ((s@@35 T@U) (i@@19 Int) (v@@39 T@U) (n@@19 Int) ) (! (let ((T@@138 (type v@@39))) (=> (= (type s@@35) (SeqType T@@138)) (=> (and (and (<= 0 n@@19) (<= n@@19 i@@19)) (< i@@19 (|Seq#Length| s@@35))) (= (|Seq#Drop| (|Seq#Update| s@@35 i@@19 v@@39) n@@19) (|Seq#Update| (|Seq#Drop| s@@35 n@@19) (- i@@19 n@@19) v@@39))))) :qid |DafnyPreludebpl.1098:18| :skolemid |608| :pattern ( (|Seq#Drop| (|Seq#Update| s@@35 i@@19 v@@39) n@@19)) )))
(assert (forall ((s@@36 T@U) (i@@20 Int) (v@@40 T@U) (n@@20 Int) ) (! (let ((T@@139 (type v@@40))) (=> (= (type s@@36) (SeqType T@@139)) (=> (and (and (<= 0 i@@20) (< i@@20 n@@20)) (< n@@20 (|Seq#Length| s@@36))) (= (|Seq#Drop| (|Seq#Update| s@@36 i@@20 v@@40) n@@20) (|Seq#Drop| s@@36 n@@20))))) :qid |DafnyPreludebpl.1101:18| :skolemid |609| :pattern ( (|Seq#Drop| (|Seq#Update| s@@36 i@@20 v@@40) n@@20)) )))
(assert (forall ((h@@20 T@U) (a@@72 T@U) (n0 Int) (n1 Int) ) (!  (=> (and (= (type h@@20) (MapType0Type refType MapType1Type)) (= (type a@@72) refType)) (=> (and (and (= (+ n0 1) n1) (<= 0 n0)) (<= n1 (_System.array.Length a@@72))) (= (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n1) (|Seq#Build| (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n0) (MapType1Select (MapType0Select h@@20 a@@72) (IndexField n0)))))) :qid |DafnyPreludebpl.1105:15| :skolemid |610| :pattern ( (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n0) (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n1)) )))
(assert (forall ((s@@37 T@U) (v@@41 T@U) (n@@21 Int) ) (! (let ((T@@140 (type v@@41))) (=> (= (type s@@37) (SeqType T@@140)) (=> (and (<= 0 n@@21) (<= n@@21 (|Seq#Length| s@@37))) (= (|Seq#Drop| (|Seq#Build| s@@37 v@@41) n@@21) (|Seq#Build| (|Seq#Drop| s@@37 n@@21) v@@41))))) :qid |DafnyPreludebpl.1109:18| :skolemid |611| :pattern ( (|Seq#Drop| (|Seq#Build| s@@37 v@@41) n@@21)) )))
(assert (forall ((s@@38 T@U) (i@@21 Int) ) (!  (=> (= (type s@@38) (SeqType BoxType)) (=> (and (<= 0 i@@21) (< i@@21 (|Seq#Length| s@@38))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@21))) (|Seq#Rank| s@@38)))) :qid |DafnyPreludebpl.1114:15| :skolemid |612| :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@21)))) )))
(assert (forall ((s@@39 T@U) (i@@22 Int) ) (! (let ((T@@141 (SeqTypeInv0 (type s@@39)))) (=> (= (type s@@39) (SeqType T@@141)) (=> (and (< 0 i@@22) (<= i@@22 (|Seq#Length| s@@39))) (< (|Seq#Rank| (|Seq#Drop| s@@39 i@@22)) (|Seq#Rank| s@@39))))) :qid |DafnyPreludebpl.1117:18| :skolemid |613| :pattern ( (|Seq#Rank| (|Seq#Drop| s@@39 i@@22))) )))
(assert (forall ((s@@40 T@U) (i@@23 Int) ) (! (let ((T@@142 (SeqTypeInv0 (type s@@40)))) (=> (= (type s@@40) (SeqType T@@142)) (=> (and (<= 0 i@@23) (< i@@23 (|Seq#Length| s@@40))) (< (|Seq#Rank| (|Seq#Take| s@@40 i@@23)) (|Seq#Rank| s@@40))))) :qid |DafnyPreludebpl.1120:18| :skolemid |614| :pattern ( (|Seq#Rank| (|Seq#Take| s@@40 i@@23))) )))
(assert (forall ((s@@41 T@U) (i@@24 Int) (j@@3 Int) ) (! (let ((T@@143 (SeqTypeInv0 (type s@@41)))) (=> (= (type s@@41) (SeqType T@@143)) (=> (and (and (<= 0 i@@24) (< i@@24 j@@3)) (<= j@@3 (|Seq#Length| s@@41))) (< (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@24) (|Seq#Drop| s@@41 j@@3))) (|Seq#Rank| s@@41))))) :qid |DafnyPreludebpl.1123:18| :skolemid |615| :pattern ( (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@24) (|Seq#Drop| s@@41 j@@3)))) )))
(assert (forall ((s@@42 T@U) (n@@22 Int) ) (! (let ((T@@144 (SeqTypeInv0 (type s@@42)))) (=> (and (= (type s@@42) (SeqType T@@144)) (= n@@22 0)) (= (|Seq#Drop| s@@42 n@@22) s@@42))) :qid |DafnyPreludebpl.1128:18| :skolemid |616| :pattern ( (|Seq#Drop| s@@42 n@@22)) )))
(assert (forall ((s@@43 T@U) (n@@23 Int) ) (! (let ((T@@145 (SeqTypeInv0 (type s@@43)))) (=> (and (= (type s@@43) (SeqType T@@145)) (= n@@23 0)) (= (|Seq#Take| s@@43 n@@23) (|Seq#Empty| T@@145)))) :qid |DafnyPreludebpl.1130:18| :skolemid |617| :pattern ( (|Seq#Take| s@@43 n@@23)) )))
(assert (forall ((s@@44 T@U) (m@@9 Int) (n@@24 Int) ) (! (let ((T@@146 (SeqTypeInv0 (type s@@44)))) (=> (= (type s@@44) (SeqType T@@146)) (=> (and (and (<= 0 m@@9) (<= 0 n@@24)) (<= (+ m@@9 n@@24) (|Seq#Length| s@@44))) (= (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24) (|Seq#Drop| s@@44 (+ m@@9 n@@24)))))) :qid |DafnyPreludebpl.1132:18| :skolemid |618| :pattern ( (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24)) )))
(assert (forall ((m@@10 T@U) ) (! (let ((V@@3 (MapTypeInv1 (type m@@10)))) (let ((U@@3 (MapTypeInv0 (type m@@10)))) (=> (= (type m@@10) (MapType U@@3 V@@3)) (<= 0 (|Map#Card| m@@10))))) :qid |DafnyPreludebpl.1150:20| :skolemid |619| :pattern ( (|Map#Card| m@@10)) )))
(assert (forall ((U@@4 T@T) (V@@4 T@T) ) (! (= (type (|Map#Empty| U@@4 V@@4)) (MapType U@@4 V@@4)) :qid |funType:Map#Empty| :pattern ( (|Map#Empty| U@@4 V@@4)) )))
(assert (forall ((m@@11 T@U) ) (! (let ((V@@5 (MapTypeInv1 (type m@@11)))) (let ((U@@5 (MapTypeInv0 (type m@@11)))) (=> (= (type m@@11) (MapType U@@5 V@@5)) (= (= (|Map#Card| m@@11) 0) (= m@@11 (|Map#Empty| U@@5 V@@5)))))) :qid |DafnyPreludebpl.1152:21| :skolemid |620| :pattern ( (|Map#Card| m@@11)) )))
(assert (forall ((m@@12 T@U) ) (! (let ((V@@6 (MapTypeInv1 (type m@@12)))) (let ((U@@6 (MapTypeInv0 (type m@@12)))) (=> (= (type m@@12) (MapType U@@6 V@@6)) (or (= m@@12 (|Map#Empty| U@@6 V@@6)) (exists ((k@@4 T@U) ) (!  (and (= (type k@@4) U@@6) (U_2_bool (MapType0Select (|Map#Domain| m@@12) k@@4))) :qid |DafnyPreludebpl.1158:31| :skolemid |621| :no-pattern (type k@@4) :no-pattern (U_2_int k@@4) :no-pattern (U_2_bool k@@4) )))))) :qid |DafnyPreludebpl.1156:21| :skolemid |622| :pattern ( (|Map#Domain| m@@12)) )))
(assert (forall ((m@@13 T@U) ) (! (let ((V@@7 (MapTypeInv1 (type m@@13)))) (let ((U@@7 (MapTypeInv0 (type m@@13)))) (=> (= (type m@@13) (MapType U@@7 V@@7)) (or (= m@@13 (|Map#Empty| U@@7 V@@7)) (exists ((v@@42 T@U) ) (!  (and (= (type v@@42) V@@7) (U_2_bool (MapType0Select (|Map#Values| m@@13) v@@42))) :qid |DafnyPreludebpl.1161:31| :skolemid |623| :no-pattern (type v@@42) :no-pattern (U_2_int v@@42) :no-pattern (U_2_bool v@@42) )))))) :qid |DafnyPreludebpl.1159:21| :skolemid |624| :pattern ( (|Map#Values| m@@13)) )))
(assert (forall ((arg0@@102 T@U) (arg1@@44 T@U) ) (! (= (type (|#_System._tuple#2._#Make2| arg0@@102 arg1@@44)) DatatypeTypeType) :qid |funType:#_System._tuple#2._#Make2| :pattern ( (|#_System._tuple#2._#Make2| arg0@@102 arg1@@44)) )))
(assert (forall ((m@@14 T@U) ) (! (let ((V@@8 (MapTypeInv1 (type m@@14)))) (let ((U@@8 (MapTypeInv0 (type m@@14)))) (=> (= (type m@@14) (MapType U@@8 V@@8)) (or (= m@@14 (|Map#Empty| U@@8 V@@8)) (exists ((k@@5 T@U) (v@@43 T@U) ) (!  (and (and (= (type k@@5) BoxType) (= (type v@@43) BoxType)) (U_2_bool (MapType0Select (|Map#Items| m@@14) ($Box (|#_System._tuple#2._#Make2| k@@5 v@@43))))) :qid |DafnyPreludebpl.1164:31| :skolemid |625| :no-pattern (type k@@5) :no-pattern (type v@@43) :no-pattern (U_2_int k@@5) :no-pattern (U_2_bool k@@5) :no-pattern (U_2_int v@@43) :no-pattern (U_2_bool v@@43) )))))) :qid |DafnyPreludebpl.1162:21| :skolemid |626| :pattern ( (|Map#Items| m@@14)) )))
(assert (forall ((m@@15 T@U) ) (! (let ((V@@9 (MapTypeInv1 (type m@@15)))) (let ((U@@9 (MapTypeInv0 (type m@@15)))) (=> (= (type m@@15) (MapType U@@9 V@@9)) (= (|Set#Card| (|Map#Domain| m@@15)) (|Map#Card| m@@15))))) :qid |DafnyPreludebpl.1166:21| :skolemid |627| :pattern ( (|Set#Card| (|Map#Domain| m@@15))) )))
(assert (forall ((m@@16 T@U) ) (! (let ((V@@10 (MapTypeInv1 (type m@@16)))) (let ((U@@10 (MapTypeInv0 (type m@@16)))) (=> (= (type m@@16) (MapType U@@10 V@@10)) (<= (|Set#Card| (|Map#Values| m@@16)) (|Map#Card| m@@16))))) :qid |DafnyPreludebpl.1169:21| :skolemid |628| :pattern ( (|Set#Card| (|Map#Values| m@@16))) )))
(assert (forall ((m@@17 T@U) ) (! (let ((V@@11 (MapTypeInv1 (type m@@17)))) (let ((U@@11 (MapTypeInv0 (type m@@17)))) (=> (= (type m@@17) (MapType U@@11 V@@11)) (= (|Set#Card| (|Map#Items| m@@17)) (|Map#Card| m@@17))))) :qid |DafnyPreludebpl.1172:21| :skolemid |629| :pattern ( (|Set#Card| (|Map#Items| m@@17))) )))
(assert (forall ((m@@18 T@U) (v@@44 T@U) ) (! (let ((V@@12 (type v@@44))) (let ((U@@12 (MapTypeInv0 (type m@@18)))) (=> (= (type m@@18) (MapType U@@12 V@@12)) (= (U_2_bool (MapType0Select (|Map#Values| m@@18) v@@44)) (exists ((u@@5 T@U) ) (!  (and (= (type u@@5) U@@12) (and (U_2_bool (MapType0Select (|Map#Domain| m@@18) u@@5)) (= v@@44 (MapType0Select (|Map#Elements| m@@18) u@@5)))) :qid |DafnyPreludebpl.1185:10| :skolemid |630| :pattern ( (MapType0Select (|Map#Domain| m@@18) u@@5)) :pattern ( (MapType0Select (|Map#Elements| m@@18) u@@5)) )))))) :qid |DafnyPreludebpl.1183:20| :skolemid |631| :pattern ( (MapType0Select (|Map#Values| m@@18) v@@44)) )))
(assert  (and (forall ((arg0@@103 T@U) ) (! (= (type (_System.Tuple2._0 arg0@@103)) BoxType) :qid |funType:_System.Tuple2._0| :pattern ( (_System.Tuple2._0 arg0@@103)) )) (forall ((arg0@@104 T@U) ) (! (= (type (_System.Tuple2._1 arg0@@104)) BoxType) :qid |funType:_System.Tuple2._1| :pattern ( (_System.Tuple2._1 arg0@@104)) ))))
(assert (forall ((m@@19 T@U) (item T@U) ) (!  (=> (and (= (type m@@19) (MapType BoxType BoxType)) (= (type item) BoxType)) (= (U_2_bool (MapType0Select (|Map#Items| m@@19) item))  (and (U_2_bool (MapType0Select (|Map#Domain| m@@19) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@19) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))))) :qid |DafnyPreludebpl.1204:15| :skolemid |632| :pattern ( (MapType0Select (|Map#Items| m@@19) item)) )))
(assert (forall ((u@@6 T@U) (V@@13 T@T) ) (! (let ((U@@13 (type u@@6))) (not (U_2_bool (MapType0Select (|Map#Domain| (|Map#Empty| U@@13 V@@13)) u@@6)))) :qid |DafnyPreludebpl.1212:21| :skolemid |633| :pattern ( (let ((U@@13 (type u@@6))) (MapType0Select (|Map#Domain| (|Map#Empty| U@@13 V@@13)) u@@6))) )))
(assert (forall ((arg0@@105 T@U) (arg1@@45 T@U) (arg2@@4 T@U) ) (! (let ((V@@14 (MapType0TypeInv1 (type arg1@@45)))) (let ((U@@14 (MapType0TypeInv0 (type arg0@@105)))) (= (type (|Map#Glue| arg0@@105 arg1@@45 arg2@@4)) (MapType U@@14 V@@14)))) :qid |funType:Map#Glue| :pattern ( (|Map#Glue| arg0@@105 arg1@@45 arg2@@4)) )))
(assert (forall ((a@@73 T@U) (b@@52 T@U) (t@@27 T@U) ) (! (let ((V@@15 (MapType0TypeInv1 (type b@@52)))) (let ((U@@15 (MapType0TypeInv0 (type a@@73)))) (=> (and (and (= (type a@@73) (MapType0Type U@@15 boolType)) (= (type b@@52) (MapType0Type U@@15 V@@15))) (= (type t@@27) TyType)) (= (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@27)) a@@73)))) :qid |DafnyPreludebpl.1217:21| :skolemid |634| :pattern ( (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@27))) )))
(assert (forall ((a@@74 T@U) (b@@53 T@U) (t@@28 T@U) ) (! (let ((V@@16 (MapType0TypeInv1 (type b@@53)))) (let ((U@@16 (MapType0TypeInv0 (type a@@74)))) (=> (and (and (= (type a@@74) (MapType0Type U@@16 boolType)) (= (type b@@53) (MapType0Type U@@16 V@@16))) (= (type t@@28) TyType)) (= (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@28)) b@@53)))) :qid |DafnyPreludebpl.1220:21| :skolemid |635| :pattern ( (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@28))) )))
(assert (forall ((a@@75 T@U) (b@@54 T@U) (t0@@14 T@U) (t1@@5 T@U) ) (!  (=> (and (and (and (and (= (type a@@75) (MapType0Type BoxType boolType)) (= (type b@@54) (MapType0Type BoxType BoxType))) (= (type t0@@14) TyType)) (= (type t1@@5) TyType)) (forall ((bx@@24 T@U) ) (!  (=> (and (= (type bx@@24) BoxType) (U_2_bool (MapType0Select a@@75 bx@@24))) (and ($IsBox bx@@24 t0@@14) ($IsBox (MapType0Select b@@54 bx@@24) t1@@5))) :qid |DafnyPreludebpl.1226:11| :skolemid |636| :no-pattern (type bx@@24) :no-pattern (U_2_int bx@@24) :no-pattern (U_2_bool bx@@24) ))) ($Is (|Map#Glue| a@@75 b@@54 (TMap t0@@14 t1@@5)) (TMap t0@@14 t1@@5))) :qid |DafnyPreludebpl.1223:15| :skolemid |637| :pattern ( (|Map#Glue| a@@75 b@@54 (TMap t0@@14 t1@@5))) )))
(assert (forall ((arg0@@106 T@U) (arg1@@46 T@U) (arg2@@5 T@U) ) (! (let ((V@@17 (type arg2@@5))) (let ((U@@17 (type arg1@@46))) (= (type (|Map#Build| arg0@@106 arg1@@46 arg2@@5)) (MapType U@@17 V@@17)))) :qid |funType:Map#Build| :pattern ( (|Map#Build| arg0@@106 arg1@@46 arg2@@5)) )))
(assert (forall ((m@@20 T@U) (u@@7 T@U) (|u'| T@U) (v@@45 T@U) ) (! (let ((V@@18 (type v@@45))) (let ((U@@18 (type u@@7))) (=> (and (= (type m@@20) (MapType U@@18 V@@18)) (= (type |u'|) U@@18)) (and (=> (= |u'| u@@7) (and (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|) v@@45))) (=> (not (= |u'| u@@7)) (and (= (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| m@@20) |u'|))) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|) (MapType0Select (|Map#Elements| m@@20) |u'|)))))))) :qid |DafnyPreludebpl.1237:21| :skolemid |638| :pattern ( (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) :pattern ( (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) )))
(assert (forall ((m@@21 T@U) (u@@8 T@U) (v@@46 T@U) ) (! (let ((V@@19 (type v@@46))) (let ((U@@19 (type u@@8))) (=> (and (= (type m@@21) (MapType U@@19 V@@19)) (U_2_bool (MapType0Select (|Map#Domain| m@@21) u@@8))) (= (|Map#Card| (|Map#Build| m@@21 u@@8 v@@46)) (|Map#Card| m@@21))))) :qid |DafnyPreludebpl.1243:21| :skolemid |639| :pattern ( (|Map#Card| (|Map#Build| m@@21 u@@8 v@@46))) )))
(assert (forall ((m@@22 T@U) (u@@9 T@U) (v@@47 T@U) ) (! (let ((V@@20 (type v@@47))) (let ((U@@20 (type u@@9))) (=> (and (= (type m@@22) (MapType U@@20 V@@20)) (not (U_2_bool (MapType0Select (|Map#Domain| m@@22) u@@9)))) (= (|Map#Card| (|Map#Build| m@@22 u@@9 v@@47)) (+ (|Map#Card| m@@22) 1))))) :qid |DafnyPreludebpl.1245:21| :skolemid |640| :pattern ( (|Map#Card| (|Map#Build| m@@22 u@@9 v@@47))) )))
(assert (forall ((arg0@@107 T@U) (arg1@@47 T@U) ) (! (let ((V@@21 (MapTypeInv1 (type arg0@@107)))) (let ((U@@21 (MapTypeInv0 (type arg0@@107)))) (= (type (|Map#Merge| arg0@@107 arg1@@47)) (MapType U@@21 V@@21)))) :qid |funType:Map#Merge| :pattern ( (|Map#Merge| arg0@@107 arg1@@47)) )))
(assert (forall ((m@@23 T@U) (n@@25 T@U) ) (! (let ((V@@22 (MapTypeInv1 (type m@@23)))) (let ((U@@22 (MapTypeInv0 (type m@@23)))) (=> (and (= (type m@@23) (MapType U@@22 V@@22)) (= (type n@@25) (MapType U@@22 V@@22))) (= (|Map#Domain| (|Map#Merge| m@@23 n@@25)) (|Set#Union| (|Map#Domain| m@@23) (|Map#Domain| n@@25)))))) :qid |DafnyPreludebpl.1250:21| :skolemid |641| :pattern ( (|Map#Domain| (|Map#Merge| m@@23 n@@25))) )))
(assert (forall ((m@@24 T@U) (n@@26 T@U) (u@@10 T@U) ) (! (let ((V@@23 (MapTypeInv1 (type m@@24)))) (let ((U@@23 (type u@@10))) (=> (and (and (= (type m@@24) (MapType U@@23 V@@23)) (= (type n@@26) (MapType U@@23 V@@23))) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Merge| m@@24 n@@26)) u@@10))) (and (=> (not (U_2_bool (MapType0Select (|Map#Domain| n@@26) u@@10))) (= (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10) (MapType0Select (|Map#Elements| m@@24) u@@10))) (=> (U_2_bool (MapType0Select (|Map#Domain| n@@26) u@@10)) (= (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10) (MapType0Select (|Map#Elements| n@@26) u@@10))))))) :qid |DafnyPreludebpl.1253:21| :skolemid |642| :pattern ( (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10)) )))
(assert (forall ((arg0@@108 T@U) (arg1@@48 T@U) ) (! (let ((V@@24 (MapTypeInv1 (type arg0@@108)))) (let ((U@@24 (MapTypeInv0 (type arg0@@108)))) (= (type (|Map#Subtract| arg0@@108 arg1@@48)) (MapType U@@24 V@@24)))) :qid |funType:Map#Subtract| :pattern ( (|Map#Subtract| arg0@@108 arg1@@48)) )))
(assert (forall ((m@@25 T@U) (s@@45 T@U) ) (! (let ((V@@25 (MapTypeInv1 (type m@@25)))) (let ((U@@25 (MapTypeInv0 (type m@@25)))) (=> (and (= (type m@@25) (MapType U@@25 V@@25)) (= (type s@@45) (MapType0Type U@@25 boolType))) (= (|Map#Domain| (|Map#Subtract| m@@25 s@@45)) (|Set#Difference| (|Map#Domain| m@@25) s@@45))))) :qid |DafnyPreludebpl.1260:21| :skolemid |643| :pattern ( (|Map#Domain| (|Map#Subtract| m@@25 s@@45))) )))
(assert (forall ((m@@26 T@U) (s@@46 T@U) (u@@11 T@U) ) (! (let ((V@@26 (MapTypeInv1 (type m@@26)))) (let ((U@@26 (type u@@11))) (=> (and (and (= (type m@@26) (MapType U@@26 V@@26)) (= (type s@@46) (MapType0Type U@@26 boolType))) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Subtract| m@@26 s@@46)) u@@11))) (= (MapType0Select (|Map#Elements| (|Map#Subtract| m@@26 s@@46)) u@@11) (MapType0Select (|Map#Elements| m@@26) u@@11))))) :qid |DafnyPreludebpl.1263:21| :skolemid |644| :pattern ( (MapType0Select (|Map#Elements| (|Map#Subtract| m@@26 s@@46)) u@@11)) )))
(assert (forall ((m@@27 T@U) (|m'| T@U) ) (! (let ((V@@27 (MapTypeInv1 (type m@@27)))) (let ((U@@27 (MapTypeInv0 (type m@@27)))) (=> (and (= (type m@@27) (MapType U@@27 V@@27)) (= (type |m'|) (MapType U@@27 V@@27))) (= (|Map#Equal| m@@27 |m'|)  (and (forall ((u@@12 T@U) ) (!  (=> (= (type u@@12) U@@27) (= (U_2_bool (MapType0Select (|Map#Domain| m@@27) u@@12)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@12)))) :qid |DafnyPreludebpl.1272:35| :skolemid |645| :no-pattern (type u@@12) :no-pattern (U_2_int u@@12) :no-pattern (U_2_bool u@@12) )) (forall ((u@@13 T@U) ) (!  (=> (and (= (type u@@13) U@@27) (U_2_bool (MapType0Select (|Map#Domain| m@@27) u@@13))) (= (MapType0Select (|Map#Elements| m@@27) u@@13) (MapType0Select (|Map#Elements| |m'|) u@@13))) :qid |DafnyPreludebpl.1273:35| :skolemid |646| :no-pattern (type u@@13) :no-pattern (U_2_int u@@13) :no-pattern (U_2_bool u@@13) ))))))) :qid |DafnyPreludebpl.1270:21| :skolemid |647| :pattern ( (|Map#Equal| m@@27 |m'|)) )))
(assert (forall ((m@@28 T@U) (|m'@@0| T@U) ) (! (let ((V@@28 (MapTypeInv1 (type m@@28)))) (let ((U@@28 (MapTypeInv0 (type m@@28)))) (=> (and (and (= (type m@@28) (MapType U@@28 V@@28)) (= (type |m'@@0|) (MapType U@@28 V@@28))) (|Map#Equal| m@@28 |m'@@0|)) (= m@@28 |m'@@0|)))) :qid |DafnyPreludebpl.1275:21| :skolemid |648| :pattern ( (|Map#Equal| m@@28 |m'@@0|)) )))
(assert (forall ((m@@29 T@U) (|m'@@1| T@U) ) (! (let ((V@@29 (MapTypeInv1 (type m@@29)))) (let ((U@@29 (MapTypeInv0 (type m@@29)))) (=> (and (= (type m@@29) (MapType U@@29 V@@29)) (= (type |m'@@1|) (MapType U@@29 V@@29))) (= (|Map#Disjoint| m@@29 |m'@@1|) (forall ((o@@43 T@U) ) (!  (=> (= (type o@@43) U@@29) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@29) o@@43))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@43))))) :qid |DafnyPreludebpl.1282:38| :skolemid |649| :pattern ( (MapType0Select (|Map#Domain| m@@29) o@@43)) :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@43)) )))))) :qid |DafnyPreludebpl.1280:21| :skolemid |650| :pattern ( (|Map#Disjoint| m@@29 |m'@@1|)) )))
(assert (forall ((U@@30 T@T) (V@@30 T@T) ) (! (= (type (|IMap#Empty| U@@30 V@@30)) (IMapType U@@30 V@@30)) :qid |funType:IMap#Empty| :pattern ( (|IMap#Empty| U@@30 V@@30)) )))
(assert (forall ((m@@30 T@U) ) (! (let ((V@@31 (IMapTypeInv1 (type m@@30)))) (let ((U@@31 (IMapTypeInv0 (type m@@30)))) (=> (= (type m@@30) (IMapType U@@31 V@@31)) (or (= m@@30 (|IMap#Empty| U@@31 V@@31)) (exists ((k@@6 T@U) ) (!  (and (= (type k@@6) U@@31) (U_2_bool (MapType0Select (|IMap#Domain| m@@30) k@@6))) :qid |DafnyPreludebpl.1298:32| :skolemid |651| :no-pattern (type k@@6) :no-pattern (U_2_int k@@6) :no-pattern (U_2_bool k@@6) )))))) :qid |DafnyPreludebpl.1296:21| :skolemid |652| :pattern ( (|IMap#Domain| m@@30)) )))
(assert (forall ((m@@31 T@U) ) (! (let ((V@@32 (IMapTypeInv1 (type m@@31)))) (let ((U@@32 (IMapTypeInv0 (type m@@31)))) (=> (= (type m@@31) (IMapType U@@32 V@@32)) (or (= m@@31 (|IMap#Empty| U@@32 V@@32)) (exists ((v@@48 T@U) ) (!  (and (= (type v@@48) V@@32) (U_2_bool (MapType0Select (|IMap#Values| m@@31) v@@48))) :qid |DafnyPreludebpl.1301:32| :skolemid |653| :no-pattern (type v@@48) :no-pattern (U_2_int v@@48) :no-pattern (U_2_bool v@@48) )))))) :qid |DafnyPreludebpl.1299:21| :skolemid |654| :pattern ( (|IMap#Values| m@@31)) )))
(assert (forall ((m@@32 T@U) ) (! (let ((V@@33 (IMapTypeInv1 (type m@@32)))) (let ((U@@33 (IMapTypeInv0 (type m@@32)))) (=> (= (type m@@32) (IMapType U@@33 V@@33)) (or (= m@@32 (|IMap#Empty| U@@33 V@@33)) (exists ((k@@7 T@U) (v@@49 T@U) ) (!  (and (and (= (type k@@7) BoxType) (= (type v@@49) BoxType)) (U_2_bool (MapType0Select (|IMap#Items| m@@32) ($Box (|#_System._tuple#2._#Make2| k@@7 v@@49))))) :qid |DafnyPreludebpl.1304:32| :skolemid |655| :no-pattern (type k@@7) :no-pattern (type v@@49) :no-pattern (U_2_int k@@7) :no-pattern (U_2_bool k@@7) :no-pattern (U_2_int v@@49) :no-pattern (U_2_bool v@@49) )))))) :qid |DafnyPreludebpl.1302:21| :skolemid |656| :pattern ( (|IMap#Items| m@@32)) )))
(assert (forall ((m@@33 T@U) ) (! (let ((V@@34 (IMapTypeInv1 (type m@@33)))) (let ((U@@34 (IMapTypeInv0 (type m@@33)))) (=> (= (type m@@33) (IMapType U@@34 V@@34)) (= (= m@@33 (|IMap#Empty| U@@34 V@@34)) (= (|IMap#Domain| m@@33) (|ISet#Empty| U@@34)))))) :qid |DafnyPreludebpl.1306:21| :skolemid |657| :pattern ( (|IMap#Domain| m@@33)) )))
(assert (forall ((m@@34 T@U) ) (! (let ((V@@35 (IMapTypeInv1 (type m@@34)))) (let ((U@@35 (IMapTypeInv0 (type m@@34)))) (=> (= (type m@@34) (IMapType U@@35 V@@35)) (= (= m@@34 (|IMap#Empty| U@@35 V@@35)) (= (|IMap#Values| m@@34) (|ISet#Empty| V@@35)))))) :qid |DafnyPreludebpl.1309:21| :skolemid |658| :pattern ( (|IMap#Values| m@@34)) )))
(assert (forall ((m@@35 T@U) ) (! (let ((V@@36 (IMapTypeInv1 (type m@@35)))) (let ((U@@36 (IMapTypeInv0 (type m@@35)))) (=> (= (type m@@35) (IMapType U@@36 V@@36)) (= (= m@@35 (|IMap#Empty| U@@36 V@@36)) (= (|IMap#Items| m@@35) (|ISet#Empty| BoxType)))))) :qid |DafnyPreludebpl.1312:21| :skolemid |659| :pattern ( (|IMap#Items| m@@35)) )))
(assert (forall ((m@@36 T@U) (v@@50 T@U) ) (! (let ((V@@37 (type v@@50))) (let ((U@@37 (IMapTypeInv0 (type m@@36)))) (=> (= (type m@@36) (IMapType U@@37 V@@37)) (= (U_2_bool (MapType0Select (|IMap#Values| m@@36) v@@50)) (exists ((u@@14 T@U) ) (!  (and (= (type u@@14) U@@37) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@36) u@@14)) (= v@@50 (MapType0Select (|IMap#Elements| m@@36) u@@14)))) :qid |DafnyPreludebpl.1325:10| :skolemid |660| :pattern ( (MapType0Select (|IMap#Domain| m@@36) u@@14)) :pattern ( (MapType0Select (|IMap#Elements| m@@36) u@@14)) )))))) :qid |DafnyPreludebpl.1323:20| :skolemid |661| :pattern ( (MapType0Select (|IMap#Values| m@@36) v@@50)) )))
(assert (forall ((m@@37 T@U) (item@@0 T@U) ) (!  (=> (and (= (type m@@37) (IMapType BoxType BoxType)) (= (type item@@0) BoxType)) (= (U_2_bool (MapType0Select (|IMap#Items| m@@37) item@@0))  (and (U_2_bool (MapType0Select (|IMap#Domain| m@@37) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@37) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0)))))) :qid |DafnyPreludebpl.1340:15| :skolemid |662| :pattern ( (MapType0Select (|IMap#Items| m@@37) item@@0)) )))
(assert (forall ((u@@15 T@U) (V@@38 T@T) ) (! (let ((U@@38 (type u@@15))) (not (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@38 V@@38)) u@@15)))) :qid |DafnyPreludebpl.1347:21| :skolemid |663| :pattern ( (let ((U@@38 (type u@@15))) (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@38 V@@38)) u@@15))) )))
(assert (forall ((arg0@@109 T@U) (arg1@@49 T@U) (arg2@@6 T@U) ) (! (let ((V@@39 (MapType0TypeInv1 (type arg1@@49)))) (let ((U@@39 (MapType0TypeInv0 (type arg0@@109)))) (= (type (|IMap#Glue| arg0@@109 arg1@@49 arg2@@6)) (IMapType U@@39 V@@39)))) :qid |funType:IMap#Glue| :pattern ( (|IMap#Glue| arg0@@109 arg1@@49 arg2@@6)) )))
(assert (forall ((a@@76 T@U) (b@@55 T@U) (t@@29 T@U) ) (! (let ((V@@40 (MapType0TypeInv1 (type b@@55)))) (let ((U@@40 (MapType0TypeInv0 (type a@@76)))) (=> (and (and (= (type a@@76) (MapType0Type U@@40 boolType)) (= (type b@@55) (MapType0Type U@@40 V@@40))) (= (type t@@29) TyType)) (= (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@29)) a@@76)))) :qid |DafnyPreludebpl.1352:21| :skolemid |664| :pattern ( (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@29))) )))
(assert (forall ((a@@77 T@U) (b@@56 T@U) (t@@30 T@U) ) (! (let ((V@@41 (MapType0TypeInv1 (type b@@56)))) (let ((U@@41 (MapType0TypeInv0 (type a@@77)))) (=> (and (and (= (type a@@77) (MapType0Type U@@41 boolType)) (= (type b@@56) (MapType0Type U@@41 V@@41))) (= (type t@@30) TyType)) (= (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@30)) b@@56)))) :qid |DafnyPreludebpl.1355:21| :skolemid |665| :pattern ( (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@30))) )))
(assert (forall ((a@@78 T@U) (b@@57 T@U) (t0@@15 T@U) (t1@@6 T@U) ) (!  (=> (and (and (and (and (= (type a@@78) (MapType0Type BoxType boolType)) (= (type b@@57) (MapType0Type BoxType BoxType))) (= (type t0@@15) TyType)) (= (type t1@@6) TyType)) (forall ((bx@@25 T@U) ) (!  (=> (and (= (type bx@@25) BoxType) (U_2_bool (MapType0Select a@@78 bx@@25))) (and ($IsBox bx@@25 t0@@15) ($IsBox (MapType0Select b@@57 bx@@25) t1@@6))) :qid |DafnyPreludebpl.1361:11| :skolemid |666| :no-pattern (type bx@@25) :no-pattern (U_2_int bx@@25) :no-pattern (U_2_bool bx@@25) ))) ($Is (|Map#Glue| a@@78 b@@57 (TIMap t0@@15 t1@@6)) (TIMap t0@@15 t1@@6))) :qid |DafnyPreludebpl.1358:15| :skolemid |667| :pattern ( (|IMap#Glue| a@@78 b@@57 (TIMap t0@@15 t1@@6))) )))
(assert (forall ((arg0@@110 T@U) (arg1@@50 T@U) (arg2@@7 T@U) ) (! (let ((V@@42 (type arg2@@7))) (let ((U@@42 (type arg1@@50))) (= (type (|IMap#Build| arg0@@110 arg1@@50 arg2@@7)) (IMapType U@@42 V@@42)))) :qid |funType:IMap#Build| :pattern ( (|IMap#Build| arg0@@110 arg1@@50 arg2@@7)) )))
(assert (forall ((m@@38 T@U) (u@@16 T@U) (|u'@@0| T@U) (v@@51 T@U) ) (! (let ((V@@43 (type v@@51))) (let ((U@@43 (type u@@16))) (=> (and (= (type m@@38) (IMapType U@@43 V@@43)) (= (type |u'@@0|) U@@43)) (and (=> (= |u'@@0| u@@16) (and (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|) v@@51))) (=> (not (= |u'@@0| u@@16)) (and (= (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| m@@38) |u'@@0|))) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|) (MapType0Select (|IMap#Elements| m@@38) |u'@@0|)))))))) :qid |DafnyPreludebpl.1371:21| :skolemid |668| :pattern ( (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) )))
(assert (forall ((m@@39 T@U) (|m'@@2| T@U) ) (! (let ((V@@44 (IMapTypeInv1 (type m@@39)))) (let ((U@@44 (IMapTypeInv0 (type m@@39)))) (=> (and (= (type m@@39) (IMapType U@@44 V@@44)) (= (type |m'@@2|) (IMapType U@@44 V@@44))) (= (|IMap#Equal| m@@39 |m'@@2|)  (and (forall ((u@@17 T@U) ) (!  (=> (= (type u@@17) U@@44) (= (U_2_bool (MapType0Select (|IMap#Domain| m@@39) u@@17)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@17)))) :qid |DafnyPreludebpl.1382:36| :skolemid |669| :no-pattern (type u@@17) :no-pattern (U_2_int u@@17) :no-pattern (U_2_bool u@@17) )) (forall ((u@@18 T@U) ) (!  (=> (and (= (type u@@18) U@@44) (U_2_bool (MapType0Select (|IMap#Domain| m@@39) u@@18))) (= (MapType0Select (|IMap#Elements| m@@39) u@@18) (MapType0Select (|IMap#Elements| |m'@@2|) u@@18))) :qid |DafnyPreludebpl.1383:35| :skolemid |670| :no-pattern (type u@@18) :no-pattern (U_2_int u@@18) :no-pattern (U_2_bool u@@18) ))))))) :qid |DafnyPreludebpl.1380:21| :skolemid |671| :pattern ( (|IMap#Equal| m@@39 |m'@@2|)) )))
(assert (forall ((m@@40 T@U) (|m'@@3| T@U) ) (! (let ((V@@45 (IMapTypeInv1 (type m@@40)))) (let ((U@@45 (IMapTypeInv0 (type m@@40)))) (=> (and (and (= (type m@@40) (IMapType U@@45 V@@45)) (= (type |m'@@3|) (IMapType U@@45 V@@45))) (|IMap#Equal| m@@40 |m'@@3|)) (= m@@40 |m'@@3|)))) :qid |DafnyPreludebpl.1385:21| :skolemid |672| :pattern ( (|IMap#Equal| m@@40 |m'@@3|)) )))
(assert (forall ((arg0@@111 T@U) (arg1@@51 T@U) ) (! (let ((V@@46 (IMapTypeInv1 (type arg0@@111)))) (let ((U@@46 (IMapTypeInv0 (type arg0@@111)))) (= (type (|IMap#Merge| arg0@@111 arg1@@51)) (IMapType U@@46 V@@46)))) :qid |funType:IMap#Merge| :pattern ( (|IMap#Merge| arg0@@111 arg1@@51)) )))
(assert (forall ((m@@41 T@U) (n@@27 T@U) ) (! (let ((V@@47 (IMapTypeInv1 (type m@@41)))) (let ((U@@47 (IMapTypeInv0 (type m@@41)))) (=> (and (= (type m@@41) (IMapType U@@47 V@@47)) (= (type n@@27) (IMapType U@@47 V@@47))) (= (|IMap#Domain| (|IMap#Merge| m@@41 n@@27)) (|Set#Union| (|IMap#Domain| m@@41) (|IMap#Domain| n@@27)))))) :qid |DafnyPreludebpl.1391:21| :skolemid |673| :pattern ( (|IMap#Domain| (|IMap#Merge| m@@41 n@@27))) )))
(assert (forall ((m@@42 T@U) (n@@28 T@U) (u@@19 T@U) ) (! (let ((V@@48 (IMapTypeInv1 (type m@@42)))) (let ((U@@48 (type u@@19))) (=> (and (and (= (type m@@42) (IMapType U@@48 V@@48)) (= (type n@@28) (IMapType U@@48 V@@48))) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Merge| m@@42 n@@28)) u@@19))) (and (=> (not (U_2_bool (MapType0Select (|IMap#Domain| n@@28) u@@19))) (= (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19) (MapType0Select (|IMap#Elements| m@@42) u@@19))) (=> (U_2_bool (MapType0Select (|IMap#Domain| n@@28) u@@19)) (= (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19) (MapType0Select (|IMap#Elements| n@@28) u@@19))))))) :qid |DafnyPreludebpl.1394:21| :skolemid |674| :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19)) )))
(assert (forall ((arg0@@112 T@U) (arg1@@52 T@U) ) (! (let ((V@@49 (IMapTypeInv1 (type arg0@@112)))) (let ((U@@49 (IMapTypeInv0 (type arg0@@112)))) (= (type (|IMap#Subtract| arg0@@112 arg1@@52)) (IMapType U@@49 V@@49)))) :qid |funType:IMap#Subtract| :pattern ( (|IMap#Subtract| arg0@@112 arg1@@52)) )))
(assert (forall ((m@@43 T@U) (s@@47 T@U) ) (! (let ((V@@50 (IMapTypeInv1 (type m@@43)))) (let ((U@@50 (IMapTypeInv0 (type m@@43)))) (=> (and (= (type m@@43) (IMapType U@@50 V@@50)) (= (type s@@47) (MapType0Type U@@50 boolType))) (= (|IMap#Domain| (|IMap#Subtract| m@@43 s@@47)) (|Set#Difference| (|IMap#Domain| m@@43) s@@47))))) :qid |DafnyPreludebpl.1401:21| :skolemid |675| :pattern ( (|IMap#Domain| (|IMap#Subtract| m@@43 s@@47))) )))
(assert (forall ((m@@44 T@U) (s@@48 T@U) (u@@20 T@U) ) (! (let ((V@@51 (IMapTypeInv1 (type m@@44)))) (let ((U@@51 (type u@@20))) (=> (and (and (= (type m@@44) (IMapType U@@51 V@@51)) (= (type s@@48) (MapType0Type U@@51 boolType))) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Subtract| m@@44 s@@48)) u@@20))) (= (MapType0Select (|IMap#Elements| (|IMap#Subtract| m@@44 s@@48)) u@@20) (MapType0Select (|IMap#Elements| m@@44) u@@20))))) :qid |DafnyPreludebpl.1404:21| :skolemid |676| :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Subtract| m@@44 s@@48)) u@@20)) )))
(assert (forall ((x@@42 Int) (y@@12 Int) ) (! (= (INTERNAL_add_boogie x@@42 y@@12) (+ x@@42 y@@12)) :qid |DafnyPreludebpl.1413:30| :skolemid |677| :pattern ( (INTERNAL_add_boogie x@@42 y@@12)) )))
(assert (forall ((x@@43 Int) (y@@13 Int) ) (! (= (INTERNAL_sub_boogie x@@43 y@@13) (- x@@43 y@@13)) :qid |DafnyPreludebpl.1414:30| :skolemid |678| :pattern ( (INTERNAL_sub_boogie x@@43 y@@13)) )))
(assert (forall ((x@@44 Int) (y@@14 Int) ) (! (= (INTERNAL_mul_boogie x@@44 y@@14) (* x@@44 y@@14)) :qid |DafnyPreludebpl.1415:30| :skolemid |679| :pattern ( (INTERNAL_mul_boogie x@@44 y@@14)) )))
(assert (forall ((x@@45 Int) (y@@15 Int) ) (! (= (INTERNAL_div_boogie x@@45 y@@15) (div x@@45 y@@15)) :qid |DafnyPreludebpl.1416:30| :skolemid |680| :pattern ( (INTERNAL_div_boogie x@@45 y@@15)) )))
(assert (forall ((x@@46 Int) (y@@16 Int) ) (! (= (INTERNAL_mod_boogie x@@46 y@@16) (mod x@@46 y@@16)) :qid |DafnyPreludebpl.1417:30| :skolemid |681| :pattern ( (INTERNAL_mod_boogie x@@46 y@@16)) )))
(assert (forall ((x@@47 Int) (y@@17 Int) ) (! (= (INTERNAL_lt_boogie x@@47 y@@17) (< x@@47 y@@17)) :qid |DafnyPreludebpl.1418:51| :skolemid |682| :pattern ( (INTERNAL_lt_boogie x@@47 y@@17)) )))
(assert (forall ((x@@48 Int) (y@@18 Int) ) (! (= (INTERNAL_le_boogie x@@48 y@@18) (<= x@@48 y@@18)) :qid |DafnyPreludebpl.1419:51| :skolemid |683| :pattern ( (INTERNAL_le_boogie x@@48 y@@18)) )))
(assert (forall ((x@@49 Int) (y@@19 Int) ) (! (= (INTERNAL_gt_boogie x@@49 y@@19) (> x@@49 y@@19)) :qid |DafnyPreludebpl.1420:51| :skolemid |684| :pattern ( (INTERNAL_gt_boogie x@@49 y@@19)) )))
(assert (forall ((x@@50 Int) (y@@20 Int) ) (! (= (INTERNAL_ge_boogie x@@50 y@@20) (>= x@@50 y@@20)) :qid |DafnyPreludebpl.1421:51| :skolemid |685| :pattern ( (INTERNAL_ge_boogie x@@50 y@@20)) )))
(assert (forall ((x@@51 Int) (y@@21 Int) ) (! (= (Mul x@@51 y@@21) (* x@@51 y@@21)) :qid |DafnyPreludebpl.1423:14| :skolemid |686| :pattern ( (Mul x@@51 y@@21)) )))
(assert (forall ((x@@52 Int) (y@@22 Int) ) (! (= (Div x@@52 y@@22) (div x@@52 y@@22)) :qid |DafnyPreludebpl.1424:14| :skolemid |687| :pattern ( (Div x@@52 y@@22)) )))
(assert (forall ((x@@53 Int) (y@@23 Int) ) (! (= (Mod x@@53 y@@23) (mod x@@53 y@@23)) :qid |DafnyPreludebpl.1425:14| :skolemid |688| :pattern ( (Mod x@@53 y@@23)) )))
(assert (forall ((x@@54 Int) (y@@24 Int) ) (! (= (Add x@@54 y@@24) (+ x@@54 y@@24)) :qid |DafnyPreludebpl.1426:14| :skolemid |689| :pattern ( (Add x@@54 y@@24)) )))
(assert (forall ((x@@55 Int) (y@@25 Int) ) (! (= (Sub x@@55 y@@25) (- x@@55 y@@25)) :qid |DafnyPreludebpl.1427:14| :skolemid |690| :pattern ( (Sub x@@55 y@@25)) )))
(assert (forall ((A@@2 T@U) (B T@U) (a@@79 T@U) (b@@58 T@U) ) (!  (=> (and (and (and (and (= (type A@@2) TyType) (= (type B) TyType)) (= (type a@@79) BoxType)) (= (type b@@58) BoxType)) (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58)) (< (BoxRank a@@79) (BoxRank b@@58))) :qid |DafnyPreludebpl.1468:15| :skolemid |691| :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank a@@79)) :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank b@@58)) )))
(assert (forall ((A@@3 T@U) (B@@0 T@U) (a@@80 T@U) (b@@59 T@U) ) (!  (=> (and (and (and (and (= (type A@@3) TyType) (= (type B@@0) TyType)) (= (type a@@80) BoxType)) (= (type b@@59) (SeqType BoxType))) (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59))) (< (BoxRank a@@80) (|Seq#Rank| b@@59))) :qid |DafnyPreludebpl.1473:15| :skolemid |692| :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (BoxRank a@@80)) :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (|Seq#Rank| b@@59)) )))
(assert (forall ((A@@4 T@U) (B@@1 T@U) (a@@81 T@U) (b@@60 T@U) ) (!  (=> (and (and (and (and (= (type A@@4) TyType) (= (type B@@1) TyType)) (= (type a@@81) (SeqType BoxType))) (= (type b@@60) BoxType)) (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60)) (< (|Seq#Rank| a@@81) (BoxRank b@@60))) :qid |DafnyPreludebpl.1478:15| :skolemid |693| :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (|Seq#Rank| a@@81)) :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (BoxRank b@@60)) )))
(assert (= (type Tclass._System.nat) TyType))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (forall ((arg0@@113 T@U) ) (! (= (type (TagFamily arg0@@113)) TyTagFamilyType) :qid |funType:TagFamily| :pattern ( (TagFamily arg0@@113)) )))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (forall ((bx@@26 T@U) ) (!  (=> (and (= (type bx@@26) BoxType) ($IsBox bx@@26 Tclass._System.nat)) (and (= ($Box ($Unbox intType bx@@26)) bx@@26) ($Is ($Unbox intType bx@@26) Tclass._System.nat))) :qid |unknown.0:0| :skolemid |694| :pattern ( ($IsBox bx@@26 Tclass._System.nat)) )))
(assert (forall ((|x#0| T@U) ) (!  (=> (= (type |x#0|) intType) (= ($Is |x#0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0|)))) :qid |unknown.0:0| :skolemid |695| :pattern ( ($Is |x#0| Tclass._System.nat)) )))
(assert (forall ((|x#0@@0| T@U) ($h T@U) ) (!  (=> (and (= (type |x#0@@0|) intType) (= (type $h) (MapType0Type refType MapType1Type))) ($IsAlloc |x#0@@0| Tclass._System.nat $h)) :qid |unknown.0:0| :skolemid |696| :pattern ( ($IsAlloc |x#0@@0| Tclass._System.nat $h)) )))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (forall ((bx@@27 T@U) ) (!  (=> (and (= (type bx@@27) BoxType) ($IsBox bx@@27 Tclass._System.object?)) (and (= ($Box ($Unbox refType bx@@27)) bx@@27) ($Is ($Unbox refType bx@@27) Tclass._System.object?))) :qid |unknown.0:0| :skolemid |697| :pattern ( ($IsBox bx@@27 Tclass._System.object?)) )))
(assert (forall (($o T@U) ) (!  (=> (= (type $o) refType) ($Is $o Tclass._System.object?)) :qid |unknown.0:0| :skolemid |698| :pattern ( ($Is $o Tclass._System.object?)) )))
(assert (= (type null) refType))
(assert (forall (($o@@0 T@U) ($h@@0 T@U) ) (!  (=> (and (= (type $o@@0) refType) (= (type $h@@0) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@0 Tclass._System.object? $h@@0)  (or (= $o@@0 null) (U_2_bool (MapType1Select (MapType0Select $h@@0 $o@@0) alloc))))) :qid |unknown.0:0| :skolemid |699| :pattern ( ($IsAlloc $o@@0 Tclass._System.object? $h@@0)) )))
(assert (= (type Tclass._System.object) TyType))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (forall ((bx@@28 T@U) ) (!  (=> (and (= (type bx@@28) BoxType) ($IsBox bx@@28 Tclass._System.object)) (and (= ($Box ($Unbox refType bx@@28)) bx@@28) ($Is ($Unbox refType bx@@28) Tclass._System.object))) :qid |unknown.0:0| :skolemid |700| :pattern ( ($IsBox bx@@28 Tclass._System.object)) )))
(assert (forall ((|c#0| T@U) ) (!  (=> (= (type |c#0|) refType) (= ($Is |c#0| Tclass._System.object)  (and ($Is |c#0| Tclass._System.object?) (not (= |c#0| null))))) :qid |unknown.0:0| :skolemid |701| :pattern ( ($Is |c#0| Tclass._System.object)) )))
(assert (forall ((|c#0@@0| T@U) ($h@@1 T@U) ) (!  (=> (and (= (type |c#0@@0|) refType) (= (type $h@@1) (MapType0Type refType MapType1Type))) (= ($IsAlloc |c#0@@0| Tclass._System.object $h@@1) ($IsAlloc |c#0@@0| Tclass._System.object? $h@@1))) :qid |unknown.0:0| :skolemid |702| :pattern ( ($IsAlloc |c#0@@0| Tclass._System.object $h@@1)) )))
(assert (forall ((arg0@@114 T@U) ) (! (= (type (Tclass._System.array? arg0@@114)) TyType) :qid |funType:Tclass._System.array?| :pattern ( (Tclass._System.array? arg0@@114)) )))
(assert (forall ((_System.array$arg T@U) ) (!  (=> (= (type _System.array$arg) TyType) (and (= (Tag (Tclass._System.array? _System.array$arg)) Tagclass._System.array?) (= (TagFamily (Tclass._System.array? _System.array$arg)) tytagFamily$array))) :qid |unknown.0:0| :skolemid |703| :pattern ( (Tclass._System.array? _System.array$arg)) )))
(assert (forall ((arg0@@115 T@U) ) (! (= (type (Tclass._System.array?_0 arg0@@115)) TyType) :qid |funType:Tclass._System.array?_0| :pattern ( (Tclass._System.array?_0 arg0@@115)) )))
(assert (forall ((_System.array$arg@@0 T@U) ) (!  (=> (= (type _System.array$arg@@0) TyType) (= (Tclass._System.array?_0 (Tclass._System.array? _System.array$arg@@0)) _System.array$arg@@0)) :qid |unknown.0:0| :skolemid |704| :pattern ( (Tclass._System.array? _System.array$arg@@0)) )))
(assert (forall ((_System.array$arg@@1 T@U) (bx@@29 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@1) TyType) (= (type bx@@29) BoxType)) ($IsBox bx@@29 (Tclass._System.array? _System.array$arg@@1))) (and (= ($Box ($Unbox refType bx@@29)) bx@@29) ($Is ($Unbox refType bx@@29) (Tclass._System.array? _System.array$arg@@1)))) :qid |unknown.0:0| :skolemid |705| :pattern ( ($IsBox bx@@29 (Tclass._System.array? _System.array$arg@@1))) )))
(assert (forall ((arg0@@116 T@U) ) (! (= (type (dtype arg0@@116)) TyType) :qid |funType:dtype| :pattern ( (dtype arg0@@116)) )))
(assert (forall ((_System.array$arg@@2 T@U) ($h@@2 T@U) ($o@@1 T@U) ($i0 Int) ) (!  (=> (and (and (and (= (type _System.array$arg@@2) TyType) (= (type $h@@2) (MapType0Type refType MapType1Type))) (= (type $o@@1) refType)) (and (and ($IsGoodHeap $h@@2) (and (not (= $o@@1 null)) (= (dtype $o@@1) (Tclass._System.array? _System.array$arg@@2)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@1))))) ($IsBox (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) _System.array$arg@@2)) :qid |unknown.0:0| :skolemid |706| :pattern ( (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) (Tclass._System.array? _System.array$arg@@2)) )))
(assert (forall ((_System.array$arg@@3 T@U) ($h@@3 T@U) ($o@@2 T@U) ($i0@@0 Int) ) (!  (=> (and (and (= (type _System.array$arg@@3) TyType) (= (type $h@@3) (MapType0Type refType MapType1Type))) (= (type $o@@2) refType)) (=> (and (and (and ($IsGoodHeap $h@@3) (and (not (= $o@@2 null)) (= (dtype $o@@2) (Tclass._System.array? _System.array$arg@@3)))) (and (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@2)))) (U_2_bool (MapType1Select (MapType0Select $h@@3 $o@@2) alloc))) ($IsAllocBox (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) _System.array$arg@@3 $h@@3))) :qid |unknown.0:0| :skolemid |707| :pattern ( (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) (Tclass._System.array? _System.array$arg@@3)) )))
(assert (forall ((_System.array$arg@@4 T@U) ($o@@3 T@U) ) (!  (=> (and (= (type _System.array$arg@@4) TyType) (= (type $o@@3) refType)) (= ($Is $o@@3 (Tclass._System.array? _System.array$arg@@4))  (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? _System.array$arg@@4))))) :qid |unknown.0:0| :skolemid |708| :pattern ( ($Is $o@@3 (Tclass._System.array? _System.array$arg@@4))) )))
(assert (forall ((_System.array$arg@@5 T@U) ($o@@4 T@U) ($h@@4 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@5) TyType) (= (type $o@@4) refType)) (= (type $h@@4) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@4 (Tclass._System.array? _System.array$arg@@5) $h@@4)  (or (= $o@@4 null) (U_2_bool (MapType1Select (MapType0Select $h@@4 $o@@4) alloc))))) :qid |unknown.0:0| :skolemid |709| :pattern ( ($IsAlloc $o@@4 (Tclass._System.array? _System.array$arg@@5) $h@@4)) )))
(assert (forall ((_System.array$arg@@6 T@U) ($o@@5 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@6) TyType) (= (type $o@@5) refType)) (and (not (= $o@@5 null)) (= (dtype $o@@5) (Tclass._System.array? _System.array$arg@@6)))) ($Is (int_2_U (_System.array.Length $o@@5)) TInt)) :qid |unknown.0:0| :skolemid |710| :pattern ( (_System.array.Length $o@@5) (Tclass._System.array? _System.array$arg@@6)) )))
(assert (forall ((_System.array$arg@@7 T@U) ($h@@5 T@U) ($o@@6 T@U) ) (!  (=> (and (and (and (= (type _System.array$arg@@7) TyType) (= (type $h@@5) (MapType0Type refType MapType1Type))) (= (type $o@@6) refType)) (and (and ($IsGoodHeap $h@@5) (and (not (= $o@@6 null)) (= (dtype $o@@6) (Tclass._System.array? _System.array$arg@@7)))) (U_2_bool (MapType1Select (MapType0Select $h@@5 $o@@6) alloc)))) ($IsAlloc (int_2_U (_System.array.Length $o@@6)) TInt $h@@5)) :qid |unknown.0:0| :skolemid |711| :pattern ( (_System.array.Length $o@@6) (MapType1Select (MapType0Select $h@@5 $o@@6) alloc) (Tclass._System.array? _System.array$arg@@7)) )))
(assert (forall ((arg0@@117 T@U) ) (! (= (type (Tclass._System.array arg0@@117)) TyType) :qid |funType:Tclass._System.array| :pattern ( (Tclass._System.array arg0@@117)) )))
(assert (forall ((_System.array$arg@@8 T@U) ) (!  (=> (= (type _System.array$arg@@8) TyType) (and (= (Tag (Tclass._System.array _System.array$arg@@8)) Tagclass._System.array) (= (TagFamily (Tclass._System.array _System.array$arg@@8)) tytagFamily$array))) :qid |unknown.0:0| :skolemid |712| :pattern ( (Tclass._System.array _System.array$arg@@8)) )))
(assert (forall ((arg0@@118 T@U) ) (! (= (type (Tclass._System.array_0 arg0@@118)) TyType) :qid |funType:Tclass._System.array_0| :pattern ( (Tclass._System.array_0 arg0@@118)) )))
(assert (forall ((_System.array$arg@@9 T@U) ) (!  (=> (= (type _System.array$arg@@9) TyType) (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@9)) _System.array$arg@@9)) :qid |unknown.0:0| :skolemid |713| :pattern ( (Tclass._System.array _System.array$arg@@9)) )))
(assert (forall ((_System.array$arg@@10 T@U) (bx@@30 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@10) TyType) (= (type bx@@30) BoxType)) ($IsBox bx@@30 (Tclass._System.array _System.array$arg@@10))) (and (= ($Box ($Unbox refType bx@@30)) bx@@30) ($Is ($Unbox refType bx@@30) (Tclass._System.array _System.array$arg@@10)))) :qid |unknown.0:0| :skolemid |714| :pattern ( ($IsBox bx@@30 (Tclass._System.array _System.array$arg@@10))) )))
(assert (forall ((_System.array$arg@@11 T@U) (|c#0@@1| T@U) ) (!  (=> (and (= (type _System.array$arg@@11) TyType) (= (type |c#0@@1|) refType)) (= ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@11))  (and ($Is |c#0@@1| (Tclass._System.array? _System.array$arg@@11)) (not (= |c#0@@1| null))))) :qid |unknown.0:0| :skolemid |715| :pattern ( ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@11))) )))
(assert (forall ((_System.array$arg@@12 T@U) (|c#0@@2| T@U) ($h@@6 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@12) TyType) (= (type |c#0@@2|) refType)) (= (type $h@@6) (MapType0Type refType MapType1Type))) (= ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@12) $h@@6) ($IsAlloc |c#0@@2| (Tclass._System.array? _System.array$arg@@12) $h@@6))) :qid |unknown.0:0| :skolemid |716| :pattern ( ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@12) $h@@6)) )))
(assert (forall ((arg0@@119 T@U) (arg1@@53 T@U) ) (! (= (type (Tclass._System.___hFunc1 arg0@@119 arg1@@53)) TyType) :qid |funType:Tclass._System.___hFunc1| :pattern ( (Tclass._System.___hFunc1 arg0@@119 arg1@@53)) )))
(assert (forall ((|#$T0| T@U) (|#$R| T@U) ) (!  (=> (and (= (type |#$T0|) TyType) (= (type |#$R|) TyType)) (and (= (Tag (Tclass._System.___hFunc1 |#$T0| |#$R|)) Tagclass._System.___hFunc1) (= (TagFamily (Tclass._System.___hFunc1 |#$T0| |#$R|)) |tytagFamily$_#Func1|))) :qid |unknown.0:0| :skolemid |717| :pattern ( (Tclass._System.___hFunc1 |#$T0| |#$R|)) )))
(assert (forall ((arg0@@120 T@U) ) (! (= (type (Tclass._System.___hFunc1_0 arg0@@120)) TyType) :qid |funType:Tclass._System.___hFunc1_0| :pattern ( (Tclass._System.___hFunc1_0 arg0@@120)) )))
(assert (forall ((|#$T0@@0| T@U) (|#$R@@0| T@U) ) (!  (=> (and (= (type |#$T0@@0|) TyType) (= (type |#$R@@0|) TyType)) (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|)) |#$T0@@0|)) :qid |unknown.0:0| :skolemid |718| :pattern ( (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|)) )))
(assert (forall ((arg0@@121 T@U) ) (! (= (type (Tclass._System.___hFunc1_1 arg0@@121)) TyType) :qid |funType:Tclass._System.___hFunc1_1| :pattern ( (Tclass._System.___hFunc1_1 arg0@@121)) )))
(assert (forall ((|#$T0@@1| T@U) (|#$R@@1| T@U) ) (!  (=> (and (= (type |#$T0@@1|) TyType) (= (type |#$R@@1|) TyType)) (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) |#$R@@1|)) :qid |unknown.0:0| :skolemid |719| :pattern ( (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) )))
(assert (forall ((|#$T0@@2| T@U) (|#$R@@2| T@U) (bx@@31 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@2|) TyType) (= (type |#$R@@2|) TyType)) (= (type bx@@31) BoxType)) ($IsBox bx@@31 (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))) (and (= ($Box ($Unbox HandleTypeType bx@@31)) bx@@31) ($Is ($Unbox HandleTypeType bx@@31) (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|)))) :qid |unknown.0:0| :skolemid |720| :pattern ( ($IsBox bx@@31 (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))) )))
(assert  (and (and (and (and (and (and (and (and (forall ((arg0@@122 T@T) (arg1@@54 T@T) (arg2@@8 T@T) ) (! (= (Ctor (MapType2Type arg0@@122 arg1@@54 arg2@@8)) 24) :qid |ctor:MapType2Type| )) (forall ((arg0@@123 T@T) (arg1@@55 T@T) (arg2@@9 T@T) ) (! (= (MapType2TypeInv0 (MapType2Type arg0@@123 arg1@@55 arg2@@9)) arg0@@123) :qid |typeInv:MapType2TypeInv0| :pattern ( (MapType2Type arg0@@123 arg1@@55 arg2@@9)) ))) (forall ((arg0@@124 T@T) (arg1@@56 T@T) (arg2@@10 T@T) ) (! (= (MapType2TypeInv1 (MapType2Type arg0@@124 arg1@@56 arg2@@10)) arg1@@56) :qid |typeInv:MapType2TypeInv1| :pattern ( (MapType2Type arg0@@124 arg1@@56 arg2@@10)) ))) (forall ((arg0@@125 T@T) (arg1@@57 T@T) (arg2@@11 T@T) ) (! (= (MapType2TypeInv2 (MapType2Type arg0@@125 arg1@@57 arg2@@11)) arg2@@11) :qid |typeInv:MapType2TypeInv2| :pattern ( (MapType2Type arg0@@125 arg1@@57 arg2@@11)) ))) (forall ((arg0@@126 T@U) (arg1@@58 T@U) (arg2@@12 T@U) ) (! (let ((aVar2 (MapType2TypeInv2 (type arg0@@126)))) (= (type (MapType2Select arg0@@126 arg1@@58 arg2@@12)) aVar2)) :qid |funType:MapType2Select| :pattern ( (MapType2Select arg0@@126 arg1@@58 arg2@@12)) ))) (forall ((arg0@@127 T@U) (arg1@@59 T@U) (arg2@@13 T@U) (arg3@@1 T@U) ) (! (let ((aVar2@@0 (type arg3@@1))) (let ((aVar1@@2 (type arg2@@13))) (let ((aVar0@@0 (type arg1@@59))) (= (type (MapType2Store arg0@@127 arg1@@59 arg2@@13 arg3@@1)) (MapType2Type aVar0@@0 aVar1@@2 aVar2@@0))))) :qid |funType:MapType2Store| :pattern ( (MapType2Store arg0@@127 arg1@@59 arg2@@13 arg3@@1)) ))) (forall ((m@@45 T@U) (x0@@5 T@U) (x1 T@U) (val@@6 T@U) ) (! (let ((aVar2@@1 (MapType2TypeInv2 (type m@@45)))) (=> (= (type val@@6) aVar2@@1) (= (MapType2Select (MapType2Store m@@45 x0@@5 x1 val@@6) x0@@5 x1) val@@6))) :qid |mapAx0:MapType2Select| :weight 0 ))) (and (and (forall ((val@@7 T@U) (m@@46 T@U) (x0@@6 T@U) (x1@@0 T@U) (y0@@3 T@U) (y1 T@U) ) (!  (or (= x0@@6 y0@@3) (= (MapType2Select (MapType2Store m@@46 x0@@6 x1@@0 val@@7) y0@@3 y1) (MapType2Select m@@46 y0@@3 y1))) :qid |mapAx1:MapType2Select:0| :weight 0 )) (forall ((val@@8 T@U) (m@@47 T@U) (x0@@7 T@U) (x1@@1 T@U) (y0@@4 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType2Select (MapType2Store m@@47 x0@@7 x1@@1 val@@8) y0@@4 y1@@0) (MapType2Select m@@47 y0@@4 y1@@0))) :qid |mapAx1:MapType2Select:1| :weight 0 ))) (forall ((val@@9 T@U) (m@@48 T@U) (x0@@8 T@U) (x1@@2 T@U) (y0@@5 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType2Select (MapType2Store m@@48 x0@@8 x1@@2 val@@9) y0@@5 y1@@1) (MapType2Select m@@48 y0@@5 y1@@1))) :qid |mapAx2:MapType2Select| :weight 0 )))) (forall ((arg0@@128 T@U) (arg1@@60 T@U) (arg2@@14 T@U) ) (! (= (type (Handle1 arg0@@128 arg1@@60 arg2@@14)) HandleTypeType) :qid |funType:Handle1| :pattern ( (Handle1 arg0@@128 arg1@@60 arg2@@14)) ))))
(assert (forall ((t0@@16 T@U) (t1@@7 T@U) (heap@@1 T@U) (h@@21 T@U) (r@@6 T@U) (rd T@U) (bx0 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@16) TyType) (= (type t1@@7) TyType)) (= (type heap@@1) (MapType0Type refType MapType1Type))) (= (type h@@21) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@6) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0) BoxType)) (= (Apply1 t0@@16 t1@@7 heap@@1 (Handle1 h@@21 r@@6 rd) bx0) (MapType2Select h@@21 heap@@1 bx0))) :qid |unknown.0:0| :skolemid |721| :pattern ( (Apply1 t0@@16 t1@@7 heap@@1 (Handle1 h@@21 r@@6 rd) bx0)) )))
(assert (forall ((t0@@17 T@U) (t1@@8 T@U) (heap@@2 T@U) (h@@22 T@U) (r@@7 T@U) (rd@@0 T@U) (bx0@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@17) TyType) (= (type t1@@8) TyType)) (= (type heap@@2) (MapType0Type refType MapType1Type))) (= (type h@@22) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@7) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@0) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@0) BoxType)) (U_2_bool (MapType2Select r@@7 heap@@2 bx0@@0))) (Requires1 t0@@17 t1@@8 heap@@2 (Handle1 h@@22 r@@7 rd@@0) bx0@@0)) :qid |unknown.0:0| :skolemid |722| :pattern ( (Requires1 t0@@17 t1@@8 heap@@2 (Handle1 h@@22 r@@7 rd@@0) bx0@@0)) )))
(assert (forall ((arg0@@129 T@U) (arg1@@61 T@U) (arg2@@15 T@U) (arg3@@2 T@U) (arg4@@0 T@U) ) (! (= (type (Reads1 arg0@@129 arg1@@61 arg2@@15 arg3@@2 arg4@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads1| :pattern ( (Reads1 arg0@@129 arg1@@61 arg2@@15 arg3@@2 arg4@@0)) )))
(assert (forall ((t0@@18 T@U) (t1@@9 T@U) (heap@@3 T@U) (h@@23 T@U) (r@@8 T@U) (rd@@1 T@U) (bx0@@1 T@U) (bx@@32 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@18) TyType) (= (type t1@@9) TyType)) (= (type heap@@3) (MapType0Type refType MapType1Type))) (= (type h@@23) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@8) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@1) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@1) BoxType)) (= (type bx@@32) BoxType)) (= (U_2_bool (MapType0Select (Reads1 t0@@18 t1@@9 heap@@3 (Handle1 h@@23 r@@8 rd@@1) bx0@@1) bx@@32)) (U_2_bool (MapType0Select (MapType2Select rd@@1 heap@@3 bx0@@1) bx@@32)))) :qid |unknown.0:0| :skolemid |723| :pattern ( (MapType0Select (Reads1 t0@@18 t1@@9 heap@@3 (Handle1 h@@23 r@@8 rd@@1) bx0@@1) bx@@32)) )))
(assert (forall ((t0@@19 T@U) (t1@@10 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@5 T@U) (bx0@@2 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@19) TyType) (= (type t1@@10) TyType)) (= (type h0@@0) (MapType0Type refType MapType1Type))) (= (type h1@@0) (MapType0Type refType MapType1Type))) (= (type f@@5) HandleTypeType)) (= (type bx0@@2) BoxType)) (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) (and ($IsBox bx0@@2 t0@@19) ($Is f@@5 (Tclass._System.___hFunc1 t0@@19 t1@@10)))) (forall ((o@@44 T@U) (fld T@U) ) (! (let ((a@@82 (FieldTypeInv0 (type fld)))) (=> (and (and (= (type o@@44) refType) (= (type fld) (FieldType a@@82))) (and (not (= o@@44 null)) (U_2_bool (MapType0Select (Reads1 t0@@19 t1@@10 h0@@0 f@@5 bx0@@2) ($Box o@@44))))) (= (MapType1Select (MapType0Select h0@@0 o@@44) fld) (MapType1Select (MapType0Select h1@@0 o@@44) fld)))) :qid |unknown.0:0| :skolemid |724| :no-pattern (type o@@44) :no-pattern (type fld) :no-pattern (U_2_int o@@44) :no-pattern (U_2_bool o@@44) :no-pattern (U_2_int fld) :no-pattern (U_2_bool fld) )))) (= (Reads1 t0@@19 t1@@10 h0@@0 f@@5 bx0@@2) (Reads1 t0@@19 t1@@10 h1@@0 f@@5 bx0@@2))) :qid |unknown.0:0| :skolemid |725| :pattern ( ($HeapSucc h0@@0 h1@@0) (Reads1 t0@@19 t1@@10 h1@@0 f@@5 bx0@@2)) )))
(assert (forall ((t0@@20 T@U) (t1@@11 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@6 T@U) (bx0@@3 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@20) TyType) (= (type t1@@11) TyType)) (= (type h0@@1) (MapType0Type refType MapType1Type))) (= (type h1@@1) (MapType0Type refType MapType1Type))) (= (type f@@6) HandleTypeType)) (= (type bx0@@3) BoxType)) (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) (and ($IsBox bx0@@3 t0@@20) ($Is f@@6 (Tclass._System.___hFunc1 t0@@20 t1@@11)))) (forall ((o@@45 T@U) (fld@@0 T@U) ) (! (let ((a@@83 (FieldTypeInv0 (type fld@@0)))) (=> (and (and (= (type o@@45) refType) (= (type fld@@0) (FieldType a@@83))) (and (not (= o@@45 null)) (U_2_bool (MapType0Select (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3) ($Box o@@45))))) (= (MapType1Select (MapType0Select h0@@1 o@@45) fld@@0) (MapType1Select (MapType0Select h1@@1 o@@45) fld@@0)))) :qid |unknown.0:0| :skolemid |726| :no-pattern (type o@@45) :no-pattern (type fld@@0) :no-pattern (U_2_int o@@45) :no-pattern (U_2_bool o@@45) :no-pattern (U_2_int fld@@0) :no-pattern (U_2_bool fld@@0) )))) (= (Reads1 t0@@20 t1@@11 h0@@1 f@@6 bx0@@3) (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3))) :qid |unknown.0:0| :skolemid |727| :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3)) )))
(assert (forall ((t0@@21 T@U) (t1@@12 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@7 T@U) (bx0@@4 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@21) TyType) (= (type t1@@12) TyType)) (= (type h0@@2) (MapType0Type refType MapType1Type))) (= (type h1@@2) (MapType0Type refType MapType1Type))) (= (type f@@7) HandleTypeType)) (= (type bx0@@4) BoxType)) (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) (and ($IsBox bx0@@4 t0@@21) ($Is f@@7 (Tclass._System.___hFunc1 t0@@21 t1@@12)))) (forall ((o@@46 T@U) (fld@@1 T@U) ) (! (let ((a@@84 (FieldTypeInv0 (type fld@@1)))) (=> (and (and (= (type o@@46) refType) (= (type fld@@1) (FieldType a@@84))) (and (not (= o@@46 null)) (U_2_bool (MapType0Select (Reads1 t0@@21 t1@@12 h0@@2 f@@7 bx0@@4) ($Box o@@46))))) (= (MapType1Select (MapType0Select h0@@2 o@@46) fld@@1) (MapType1Select (MapType0Select h1@@2 o@@46) fld@@1)))) :qid |unknown.0:0| :skolemid |728| :no-pattern (type o@@46) :no-pattern (type fld@@1) :no-pattern (U_2_int o@@46) :no-pattern (U_2_bool o@@46) :no-pattern (U_2_int fld@@1) :no-pattern (U_2_bool fld@@1) )))) (= (Requires1 t0@@21 t1@@12 h0@@2 f@@7 bx0@@4) (Requires1 t0@@21 t1@@12 h1@@2 f@@7 bx0@@4))) :qid |unknown.0:0| :skolemid |729| :pattern ( ($HeapSucc h0@@2 h1@@2) (Requires1 t0@@21 t1@@12 h1@@2 f@@7 bx0@@4)) )))
(assert (forall ((t0@@22 T@U) (t1@@13 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@8 T@U) (bx0@@5 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@22) TyType) (= (type t1@@13) TyType)) (= (type h0@@3) (MapType0Type refType MapType1Type))) (= (type h1@@3) (MapType0Type refType MapType1Type))) (= (type f@@8) HandleTypeType)) (= (type bx0@@5) BoxType)) (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) (and ($IsBox bx0@@5 t0@@22) ($Is f@@8 (Tclass._System.___hFunc1 t0@@22 t1@@13)))) (forall ((o@@47 T@U) (fld@@2 T@U) ) (! (let ((a@@85 (FieldTypeInv0 (type fld@@2)))) (=> (and (and (= (type o@@47) refType) (= (type fld@@2) (FieldType a@@85))) (and (not (= o@@47 null)) (U_2_bool (MapType0Select (Reads1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5) ($Box o@@47))))) (= (MapType1Select (MapType0Select h0@@3 o@@47) fld@@2) (MapType1Select (MapType0Select h1@@3 o@@47) fld@@2)))) :qid |unknown.0:0| :skolemid |730| :no-pattern (type o@@47) :no-pattern (type fld@@2) :no-pattern (U_2_int o@@47) :no-pattern (U_2_bool o@@47) :no-pattern (U_2_int fld@@2) :no-pattern (U_2_bool fld@@2) )))) (= (Requires1 t0@@22 t1@@13 h0@@3 f@@8 bx0@@5) (Requires1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5))) :qid |unknown.0:0| :skolemid |731| :pattern ( ($HeapSucc h0@@3 h1@@3) (Requires1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5)) )))
(assert (forall ((t0@@23 T@U) (t1@@14 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@9 T@U) (bx0@@6 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@23) TyType) (= (type t1@@14) TyType)) (= (type h0@@4) (MapType0Type refType MapType1Type))) (= (type h1@@4) (MapType0Type refType MapType1Type))) (= (type f@@9) HandleTypeType)) (= (type bx0@@6) BoxType)) (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) (and ($IsBox bx0@@6 t0@@23) ($Is f@@9 (Tclass._System.___hFunc1 t0@@23 t1@@14)))) (forall ((o@@48 T@U) (fld@@3 T@U) ) (! (let ((a@@86 (FieldTypeInv0 (type fld@@3)))) (=> (and (and (= (type o@@48) refType) (= (type fld@@3) (FieldType a@@86))) (and (not (= o@@48 null)) (U_2_bool (MapType0Select (Reads1 t0@@23 t1@@14 h0@@4 f@@9 bx0@@6) ($Box o@@48))))) (= (MapType1Select (MapType0Select h0@@4 o@@48) fld@@3) (MapType1Select (MapType0Select h1@@4 o@@48) fld@@3)))) :qid |unknown.0:0| :skolemid |732| :no-pattern (type o@@48) :no-pattern (type fld@@3) :no-pattern (U_2_int o@@48) :no-pattern (U_2_bool o@@48) :no-pattern (U_2_int fld@@3) :no-pattern (U_2_bool fld@@3) )))) (= (Apply1 t0@@23 t1@@14 h0@@4 f@@9 bx0@@6) (Apply1 t0@@23 t1@@14 h1@@4 f@@9 bx0@@6))) :qid |unknown.0:0| :skolemid |733| :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply1 t0@@23 t1@@14 h1@@4 f@@9 bx0@@6)) )))
(assert (forall ((t0@@24 T@U) (t1@@15 T@U) (h0@@5 T@U) (h1@@5 T@U) (f@@10 T@U) (bx0@@7 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@24) TyType) (= (type t1@@15) TyType)) (= (type h0@@5) (MapType0Type refType MapType1Type))) (= (type h1@@5) (MapType0Type refType MapType1Type))) (= (type f@@10) HandleTypeType)) (= (type bx0@@7) BoxType)) (and (and (and ($HeapSucc h0@@5 h1@@5) (and ($IsGoodHeap h0@@5) ($IsGoodHeap h1@@5))) (and ($IsBox bx0@@7 t0@@24) ($Is f@@10 (Tclass._System.___hFunc1 t0@@24 t1@@15)))) (forall ((o@@49 T@U) (fld@@4 T@U) ) (! (let ((a@@87 (FieldTypeInv0 (type fld@@4)))) (=> (and (and (= (type o@@49) refType) (= (type fld@@4) (FieldType a@@87))) (and (not (= o@@49 null)) (U_2_bool (MapType0Select (Reads1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7) ($Box o@@49))))) (= (MapType1Select (MapType0Select h0@@5 o@@49) fld@@4) (MapType1Select (MapType0Select h1@@5 o@@49) fld@@4)))) :qid |unknown.0:0| :skolemid |734| :no-pattern (type o@@49) :no-pattern (type fld@@4) :no-pattern (U_2_int o@@49) :no-pattern (U_2_bool o@@49) :no-pattern (U_2_int fld@@4) :no-pattern (U_2_bool fld@@4) )))) (= (Apply1 t0@@24 t1@@15 h0@@5 f@@10 bx0@@7) (Apply1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7))) :qid |unknown.0:0| :skolemid |735| :pattern ( ($HeapSucc h0@@5 h1@@5) (Apply1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7)) )))
(assert (forall ((t0@@25 T@U) (t1@@16 T@U) (heap@@4 T@U) (f@@11 T@U) (bx0@@8 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@25) TyType) (= (type t1@@16) TyType)) (= (type heap@@4) (MapType0Type refType MapType1Type))) (= (type f@@11) HandleTypeType)) (= (type bx0@@8) BoxType)) (and ($IsGoodHeap heap@@4) (and ($IsBox bx0@@8 t0@@25) ($Is f@@11 (Tclass._System.___hFunc1 t0@@25 t1@@16))))) (= (|Set#Equal| (Reads1 t0@@25 t1@@16 $OneHeap f@@11 bx0@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads1 t0@@25 t1@@16 heap@@4 f@@11 bx0@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |736| :pattern ( (Reads1 t0@@25 t1@@16 $OneHeap f@@11 bx0@@8) ($IsGoodHeap heap@@4)) :pattern ( (Reads1 t0@@25 t1@@16 heap@@4 f@@11 bx0@@8)) )))
(assert (forall ((t0@@26 T@U) (t1@@17 T@U) (heap@@5 T@U) (f@@12 T@U) (bx0@@9 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@26) TyType) (= (type t1@@17) TyType)) (= (type heap@@5) (MapType0Type refType MapType1Type))) (= (type f@@12) HandleTypeType)) (= (type bx0@@9) BoxType)) (and (and ($IsGoodHeap heap@@5) (and ($IsBox bx0@@9 t0@@26) ($Is f@@12 (Tclass._System.___hFunc1 t0@@26 t1@@17)))) (|Set#Equal| (Reads1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) (|Set#Empty| BoxType)))) (= (Requires1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) (Requires1 t0@@26 t1@@17 heap@@5 f@@12 bx0@@9))) :qid |unknown.0:0| :skolemid |737| :pattern ( (Requires1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) ($IsGoodHeap heap@@5)) :pattern ( (Requires1 t0@@26 t1@@17 heap@@5 f@@12 bx0@@9)) )))
(assert (forall ((f@@13 T@U) (t0@@27 T@U) (t1@@18 T@U) ) (!  (=> (and (and (= (type f@@13) HandleTypeType) (= (type t0@@27) TyType)) (= (type t1@@18) TyType)) (= ($Is f@@13 (Tclass._System.___hFunc1 t0@@27 t1@@18)) (forall ((h@@24 T@U) (bx0@@10 T@U) ) (!  (=> (and (= (type h@@24) (MapType0Type refType MapType1Type)) (= (type bx0@@10) BoxType)) (=> (and (and ($IsGoodHeap h@@24) ($IsBox bx0@@10 t0@@27)) (Requires1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10)) ($IsBox (Apply1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10) t1@@18))) :qid |DafnyPreludebpl.545:12| :skolemid |738| :pattern ( (Apply1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10)) )))) :qid |unknown.0:0| :skolemid |739| :pattern ( ($Is f@@13 (Tclass._System.___hFunc1 t0@@27 t1@@18))) )))
(assert (forall ((f@@14 T@U) (t0@@28 T@U) (t1@@19 T@U) (u0 T@U) (u1 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@14) HandleTypeType) (= (type t0@@28) TyType)) (= (type t1@@19) TyType)) (= (type u0) TyType)) (= (type u1) TyType)) (and (and ($Is f@@14 (Tclass._System.___hFunc1 t0@@28 t1@@19)) (forall ((bx@@33 T@U) ) (!  (=> (and (= (type bx@@33) BoxType) ($IsBox bx@@33 u0)) ($IsBox bx@@33 t0@@28)) :qid |unknown.0:0| :skolemid |740| :pattern ( ($IsBox bx@@33 u0)) :pattern ( ($IsBox bx@@33 t0@@28)) ))) (forall ((bx@@34 T@U) ) (!  (=> (and (= (type bx@@34) BoxType) ($IsBox bx@@34 t1@@19)) ($IsBox bx@@34 u1)) :qid |unknown.0:0| :skolemid |741| :pattern ( ($IsBox bx@@34 t1@@19)) :pattern ( ($IsBox bx@@34 u1)) )))) ($Is f@@14 (Tclass._System.___hFunc1 u0 u1))) :qid |unknown.0:0| :skolemid |742| :pattern ( ($Is f@@14 (Tclass._System.___hFunc1 t0@@28 t1@@19)) ($Is f@@14 (Tclass._System.___hFunc1 u0 u1))) )))
(assert (forall ((f@@15 T@U) (t0@@29 T@U) (t1@@20 T@U) (h@@25 T@U) ) (!  (=> (and (and (and (and (= (type f@@15) HandleTypeType) (= (type t0@@29) TyType)) (= (type t1@@20) TyType)) (= (type h@@25) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@25)) (= ($IsAlloc f@@15 (Tclass._System.___hFunc1 t0@@29 t1@@20) h@@25) (forall ((bx0@@11 T@U) ) (!  (=> (= (type bx0@@11) BoxType) (=> (and (and ($IsBox bx0@@11 t0@@29) ($IsAllocBox bx0@@11 t0@@29 h@@25)) (Requires1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11)) (forall ((r@@9 T@U) ) (!  (=> (= (type r@@9) refType) (=> (and (not (= r@@9 null)) (U_2_bool (MapType0Select (Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11) ($Box r@@9)))) (U_2_bool (MapType1Select (MapType0Select h@@25 r@@9) alloc)))) :qid |unknown.0:0| :skolemid |743| :pattern ( (MapType0Select (Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11) ($Box r@@9))) )))) :qid |unknown.0:0| :skolemid |744| :pattern ( (Apply1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11)) :pattern ( (Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11)) )))) :qid |unknown.0:0| :skolemid |745| :pattern ( ($IsAlloc f@@15 (Tclass._System.___hFunc1 t0@@29 t1@@20) h@@25)) )))
(assert (forall ((f@@16 T@U) (t0@@30 T@U) (t1@@21 T@U) (h@@26 T@U) ) (!  (=> (and (and (and (and (= (type f@@16) HandleTypeType) (= (type t0@@30) TyType)) (= (type t1@@21) TyType)) (= (type h@@26) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@26) ($IsAlloc f@@16 (Tclass._System.___hFunc1 t0@@30 t1@@21) h@@26))) (forall ((bx0@@12 T@U) ) (!  (=> (= (type bx0@@12) BoxType) (=> (and ($IsAllocBox bx0@@12 t0@@30 h@@26) (Requires1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12)) ($IsAllocBox (Apply1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12) t1@@21 h@@26))) :qid |unknown.0:0| :skolemid |746| :pattern ( (Apply1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12)) ))) :qid |unknown.0:0| :skolemid |747| :pattern ( ($IsAlloc f@@16 (Tclass._System.___hFunc1 t0@@30 t1@@21) h@@26)) )))
(assert (forall ((arg0@@130 T@U) (arg1@@62 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1 arg0@@130 arg1@@62)) TyType) :qid |funType:Tclass._System.___hPartialFunc1| :pattern ( (Tclass._System.___hPartialFunc1 arg0@@130 arg1@@62)) )))
(assert (forall ((|#$T0@@3| T@U) (|#$R@@3| T@U) ) (!  (=> (and (= (type |#$T0@@3|) TyType) (= (type |#$R@@3|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) Tagclass._System.___hPartialFunc1) (= (TagFamily (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) |tytagFamily$_#PartialFunc1|))) :qid |unknown.0:0| :skolemid |748| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) )))
(assert (forall ((arg0@@131 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_0 arg0@@131)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_0| :pattern ( (Tclass._System.___hPartialFunc1_0 arg0@@131)) )))
(assert (forall ((|#$T0@@4| T@U) (|#$R@@4| T@U) ) (!  (=> (and (= (type |#$T0@@4|) TyType) (= (type |#$R@@4|) TyType)) (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|)) |#$T0@@4|)) :qid |unknown.0:0| :skolemid |749| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|)) )))
(assert (forall ((arg0@@132 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_1 arg0@@132)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_1| :pattern ( (Tclass._System.___hPartialFunc1_1 arg0@@132)) )))
(assert (forall ((|#$T0@@5| T@U) (|#$R@@5| T@U) ) (!  (=> (and (= (type |#$T0@@5|) TyType) (= (type |#$R@@5|) TyType)) (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@5| |#$R@@5|)) |#$R@@5|)) :qid |unknown.0:0| :skolemid |750| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@5| |#$R@@5|)) )))
(assert (forall ((|#$T0@@6| T@U) (|#$R@@6| T@U) (bx@@35 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@6|) TyType) (= (type |#$R@@6|) TyType)) (= (type bx@@35) BoxType)) ($IsBox bx@@35 (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|))) (and (= ($Box ($Unbox HandleTypeType bx@@35)) bx@@35) ($Is ($Unbox HandleTypeType bx@@35) (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|)))) :qid |unknown.0:0| :skolemid |751| :pattern ( ($IsBox bx@@35 (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|))) )))
(assert (forall ((|#$T0@@7| T@U) (|#$R@@7| T@U) (|f#0| T@U) ) (!  (=> (and (and (= (type |#$T0@@7|) TyType) (= (type |#$R@@7|) TyType)) (= (type |f#0|) HandleTypeType)) (= ($Is |f#0| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@7|))  (and ($Is |f#0| (Tclass._System.___hFunc1 |#$T0@@7| |#$R@@7|)) (forall ((|x0#0| T@U) ) (!  (=> (and (= (type |x0#0|) BoxType) ($IsBox |x0#0| |#$T0@@7|)) (|Set#Equal| (Reads1 |#$T0@@7| |#$R@@7| $OneHeap |f#0| |x0#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |752| :no-pattern (type |x0#0|) :no-pattern (U_2_int |x0#0|) :no-pattern (U_2_bool |x0#0|) ))))) :qid |unknown.0:0| :skolemid |753| :pattern ( ($Is |f#0| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@7|))) )))
(assert (forall ((|#$T0@@8| T@U) (|#$R@@8| T@U) (|f#0@@0| T@U) ($h@@7 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@8|) TyType) (= (type |#$R@@8|) TyType)) (= (type |f#0@@0|) HandleTypeType)) (= (type $h@@7) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|) $h@@7) ($IsAlloc |f#0@@0| (Tclass._System.___hFunc1 |#$T0@@8| |#$R@@8|) $h@@7))) :qid |unknown.0:0| :skolemid |754| :pattern ( ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|) $h@@7)) )))
(assert (forall ((arg0@@133 T@U) (arg1@@63 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1 arg0@@133 arg1@@63)) TyType) :qid |funType:Tclass._System.___hTotalFunc1| :pattern ( (Tclass._System.___hTotalFunc1 arg0@@133 arg1@@63)) )))
(assert (forall ((|#$T0@@9| T@U) (|#$R@@9| T@U) ) (!  (=> (and (= (type |#$T0@@9|) TyType) (= (type |#$R@@9|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) Tagclass._System.___hTotalFunc1) (= (TagFamily (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) |tytagFamily$_#TotalFunc1|))) :qid |unknown.0:0| :skolemid |755| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) )))
(assert (forall ((arg0@@134 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_0 arg0@@134)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_0| :pattern ( (Tclass._System.___hTotalFunc1_0 arg0@@134)) )))
(assert (forall ((|#$T0@@10| T@U) (|#$R@@10| T@U) ) (!  (=> (and (= (type |#$T0@@10|) TyType) (= (type |#$R@@10|) TyType)) (= (Tclass._System.___hTotalFunc1_0 (Tclass._System.___hTotalFunc1 |#$T0@@10| |#$R@@10|)) |#$T0@@10|)) :qid |unknown.0:0| :skolemid |756| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@10| |#$R@@10|)) )))
(assert (forall ((arg0@@135 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_1 arg0@@135)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_1| :pattern ( (Tclass._System.___hTotalFunc1_1 arg0@@135)) )))
(assert (forall ((|#$T0@@11| T@U) (|#$R@@11| T@U) ) (!  (=> (and (= (type |#$T0@@11|) TyType) (= (type |#$R@@11|) TyType)) (= (Tclass._System.___hTotalFunc1_1 (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)) |#$R@@11|)) :qid |unknown.0:0| :skolemid |757| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)) )))
(assert (forall ((|#$T0@@12| T@U) (|#$R@@12| T@U) (bx@@36 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@12|) TyType) (= (type |#$R@@12|) TyType)) (= (type bx@@36) BoxType)) ($IsBox bx@@36 (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|))) (and (= ($Box ($Unbox HandleTypeType bx@@36)) bx@@36) ($Is ($Unbox HandleTypeType bx@@36) (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|)))) :qid |unknown.0:0| :skolemid |758| :pattern ( ($IsBox bx@@36 (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|))) )))
(assert (forall ((|#$T0@@13| T@U) (|#$R@@13| T@U) (|f#0@@1| T@U) ) (!  (=> (and (and (= (type |#$T0@@13|) TyType) (= (type |#$R@@13|) TyType)) (= (type |f#0@@1|) HandleTypeType)) (= ($Is |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@13| |#$R@@13|))  (and ($Is |f#0@@1| (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@13|)) (forall ((|x0#0@@0| T@U) ) (!  (=> (and (= (type |x0#0@@0|) BoxType) ($IsBox |x0#0@@0| |#$T0@@13|)) (Requires1 |#$T0@@13| |#$R@@13| $OneHeap |f#0@@1| |x0#0@@0|)) :qid |unknown.0:0| :skolemid |759| :no-pattern (type |x0#0@@0|) :no-pattern (U_2_int |x0#0@@0|) :no-pattern (U_2_bool |x0#0@@0|) ))))) :qid |unknown.0:0| :skolemid |760| :pattern ( ($Is |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@13| |#$R@@13|))) )))
(assert (forall ((|#$T0@@14| T@U) (|#$R@@14| T@U) (|f#0@@2| T@U) ($h@@8 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@14|) TyType) (= (type |#$R@@14|) TyType)) (= (type |f#0@@2|) HandleTypeType)) (= (type $h@@8) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|) $h@@8) ($IsAlloc |f#0@@2| (Tclass._System.___hPartialFunc1 |#$T0@@14| |#$R@@14|) $h@@8))) :qid |unknown.0:0| :skolemid |761| :pattern ( ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|) $h@@8)) )))
(assert (forall ((arg0@@136 T@U) ) (! (= (type (Tclass._System.___hFunc0 arg0@@136)) TyType) :qid |funType:Tclass._System.___hFunc0| :pattern ( (Tclass._System.___hFunc0 arg0@@136)) )))
(assert (forall ((|#$R@@15| T@U) ) (!  (=> (= (type |#$R@@15|) TyType) (and (= (Tag (Tclass._System.___hFunc0 |#$R@@15|)) Tagclass._System.___hFunc0) (= (TagFamily (Tclass._System.___hFunc0 |#$R@@15|)) |tytagFamily$_#Func0|))) :qid |unknown.0:0| :skolemid |762| :pattern ( (Tclass._System.___hFunc0 |#$R@@15|)) )))
(assert (forall ((arg0@@137 T@U) ) (! (= (type (Tclass._System.___hFunc0_0 arg0@@137)) TyType) :qid |funType:Tclass._System.___hFunc0_0| :pattern ( (Tclass._System.___hFunc0_0 arg0@@137)) )))
(assert (forall ((|#$R@@16| T@U) ) (!  (=> (= (type |#$R@@16|) TyType) (= (Tclass._System.___hFunc0_0 (Tclass._System.___hFunc0 |#$R@@16|)) |#$R@@16|)) :qid |unknown.0:0| :skolemid |763| :pattern ( (Tclass._System.___hFunc0 |#$R@@16|)) )))
(assert (forall ((|#$R@@17| T@U) (bx@@37 T@U) ) (!  (=> (and (and (= (type |#$R@@17|) TyType) (= (type bx@@37) BoxType)) ($IsBox bx@@37 (Tclass._System.___hFunc0 |#$R@@17|))) (and (= ($Box ($Unbox HandleTypeType bx@@37)) bx@@37) ($Is ($Unbox HandleTypeType bx@@37) (Tclass._System.___hFunc0 |#$R@@17|)))) :qid |unknown.0:0| :skolemid |764| :pattern ( ($IsBox bx@@37 (Tclass._System.___hFunc0 |#$R@@17|))) )))
(assert  (and (forall ((arg0@@138 T@U) (arg1@@64 T@U) (arg2@@16 T@U) ) (! (= (type (Apply0 arg0@@138 arg1@@64 arg2@@16)) BoxType) :qid |funType:Apply0| :pattern ( (Apply0 arg0@@138 arg1@@64 arg2@@16)) )) (forall ((arg0@@139 T@U) (arg1@@65 T@U) (arg2@@17 T@U) ) (! (= (type (Handle0 arg0@@139 arg1@@65 arg2@@17)) HandleTypeType) :qid |funType:Handle0| :pattern ( (Handle0 arg0@@139 arg1@@65 arg2@@17)) ))))
(assert (forall ((t0@@31 T@U) (heap@@6 T@U) (h@@27 T@U) (r@@10 T@U) (rd@@2 T@U) ) (!  (=> (and (and (and (and (= (type t0@@31) TyType) (= (type heap@@6) (MapType0Type refType MapType1Type))) (= (type h@@27) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@10) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@2) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (Apply0 t0@@31 heap@@6 (Handle0 h@@27 r@@10 rd@@2)) (MapType0Select h@@27 heap@@6))) :qid |unknown.0:0| :skolemid |765| :pattern ( (Apply0 t0@@31 heap@@6 (Handle0 h@@27 r@@10 rd@@2))) )))
(assert (forall ((t0@@32 T@U) (heap@@7 T@U) (h@@28 T@U) (r@@11 T@U) (rd@@3 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@32) TyType) (= (type heap@@7) (MapType0Type refType MapType1Type))) (= (type h@@28) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@11) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@3) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (U_2_bool (MapType0Select r@@11 heap@@7))) (Requires0 t0@@32 heap@@7 (Handle0 h@@28 r@@11 rd@@3))) :qid |unknown.0:0| :skolemid |766| :pattern ( (Requires0 t0@@32 heap@@7 (Handle0 h@@28 r@@11 rd@@3))) )))
(assert (forall ((arg0@@140 T@U) (arg1@@66 T@U) (arg2@@18 T@U) ) (! (= (type (Reads0 arg0@@140 arg1@@66 arg2@@18)) (MapType0Type BoxType boolType)) :qid |funType:Reads0| :pattern ( (Reads0 arg0@@140 arg1@@66 arg2@@18)) )))
(assert (forall ((t0@@33 T@U) (heap@@8 T@U) (h@@29 T@U) (r@@12 T@U) (rd@@4 T@U) (bx@@38 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@33) TyType) (= (type heap@@8) (MapType0Type refType MapType1Type))) (= (type h@@29) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@12) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@4) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (type bx@@38) BoxType)) (= (U_2_bool (MapType0Select (Reads0 t0@@33 heap@@8 (Handle0 h@@29 r@@12 rd@@4)) bx@@38)) (U_2_bool (MapType0Select (MapType0Select rd@@4 heap@@8) bx@@38)))) :qid |unknown.0:0| :skolemid |767| :pattern ( (MapType0Select (Reads0 t0@@33 heap@@8 (Handle0 h@@29 r@@12 rd@@4)) bx@@38)) )))
(assert (forall ((t0@@34 T@U) (h0@@6 T@U) (h1@@6 T@U) (f@@17 T@U) ) (!  (=> (and (and (and (and (= (type t0@@34) TyType) (= (type h0@@6) (MapType0Type refType MapType1Type))) (= (type h1@@6) (MapType0Type refType MapType1Type))) (= (type f@@17) HandleTypeType)) (and (and (and ($HeapSucc h0@@6 h1@@6) (and ($IsGoodHeap h0@@6) ($IsGoodHeap h1@@6))) ($Is f@@17 (Tclass._System.___hFunc0 t0@@34))) (forall ((o@@50 T@U) (fld@@5 T@U) ) (! (let ((a@@88 (FieldTypeInv0 (type fld@@5)))) (=> (and (and (= (type o@@50) refType) (= (type fld@@5) (FieldType a@@88))) (and (not (= o@@50 null)) (U_2_bool (MapType0Select (Reads0 t0@@34 h0@@6 f@@17) ($Box o@@50))))) (= (MapType1Select (MapType0Select h0@@6 o@@50) fld@@5) (MapType1Select (MapType0Select h1@@6 o@@50) fld@@5)))) :qid |unknown.0:0| :skolemid |768| :no-pattern (type o@@50) :no-pattern (type fld@@5) :no-pattern (U_2_int o@@50) :no-pattern (U_2_bool o@@50) :no-pattern (U_2_int fld@@5) :no-pattern (U_2_bool fld@@5) )))) (= (Reads0 t0@@34 h0@@6 f@@17) (Reads0 t0@@34 h1@@6 f@@17))) :qid |unknown.0:0| :skolemid |769| :pattern ( ($HeapSucc h0@@6 h1@@6) (Reads0 t0@@34 h1@@6 f@@17)) )))
(assert (forall ((t0@@35 T@U) (h0@@7 T@U) (h1@@7 T@U) (f@@18 T@U) ) (!  (=> (and (and (and (and (= (type t0@@35) TyType) (= (type h0@@7) (MapType0Type refType MapType1Type))) (= (type h1@@7) (MapType0Type refType MapType1Type))) (= (type f@@18) HandleTypeType)) (and (and (and ($HeapSucc h0@@7 h1@@7) (and ($IsGoodHeap h0@@7) ($IsGoodHeap h1@@7))) ($Is f@@18 (Tclass._System.___hFunc0 t0@@35))) (forall ((o@@51 T@U) (fld@@6 T@U) ) (! (let ((a@@89 (FieldTypeInv0 (type fld@@6)))) (=> (and (and (= (type o@@51) refType) (= (type fld@@6) (FieldType a@@89))) (and (not (= o@@51 null)) (U_2_bool (MapType0Select (Reads0 t0@@35 h1@@7 f@@18) ($Box o@@51))))) (= (MapType1Select (MapType0Select h0@@7 o@@51) fld@@6) (MapType1Select (MapType0Select h1@@7 o@@51) fld@@6)))) :qid |unknown.0:0| :skolemid |770| :no-pattern (type o@@51) :no-pattern (type fld@@6) :no-pattern (U_2_int o@@51) :no-pattern (U_2_bool o@@51) :no-pattern (U_2_int fld@@6) :no-pattern (U_2_bool fld@@6) )))) (= (Reads0 t0@@35 h0@@7 f@@18) (Reads0 t0@@35 h1@@7 f@@18))) :qid |unknown.0:0| :skolemid |771| :pattern ( ($HeapSucc h0@@7 h1@@7) (Reads0 t0@@35 h1@@7 f@@18)) )))
(assert (forall ((t0@@36 T@U) (h0@@8 T@U) (h1@@8 T@U) (f@@19 T@U) ) (!  (=> (and (and (and (and (= (type t0@@36) TyType) (= (type h0@@8) (MapType0Type refType MapType1Type))) (= (type h1@@8) (MapType0Type refType MapType1Type))) (= (type f@@19) HandleTypeType)) (and (and (and ($HeapSucc h0@@8 h1@@8) (and ($IsGoodHeap h0@@8) ($IsGoodHeap h1@@8))) ($Is f@@19 (Tclass._System.___hFunc0 t0@@36))) (forall ((o@@52 T@U) (fld@@7 T@U) ) (! (let ((a@@90 (FieldTypeInv0 (type fld@@7)))) (=> (and (and (= (type o@@52) refType) (= (type fld@@7) (FieldType a@@90))) (and (not (= o@@52 null)) (U_2_bool (MapType0Select (Reads0 t0@@36 h0@@8 f@@19) ($Box o@@52))))) (= (MapType1Select (MapType0Select h0@@8 o@@52) fld@@7) (MapType1Select (MapType0Select h1@@8 o@@52) fld@@7)))) :qid |unknown.0:0| :skolemid |772| :no-pattern (type o@@52) :no-pattern (type fld@@7) :no-pattern (U_2_int o@@52) :no-pattern (U_2_bool o@@52) :no-pattern (U_2_int fld@@7) :no-pattern (U_2_bool fld@@7) )))) (= (Requires0 t0@@36 h0@@8 f@@19) (Requires0 t0@@36 h1@@8 f@@19))) :qid |unknown.0:0| :skolemid |773| :pattern ( ($HeapSucc h0@@8 h1@@8) (Requires0 t0@@36 h1@@8 f@@19)) )))
(assert (forall ((t0@@37 T@U) (h0@@9 T@U) (h1@@9 T@U) (f@@20 T@U) ) (!  (=> (and (and (and (and (= (type t0@@37) TyType) (= (type h0@@9) (MapType0Type refType MapType1Type))) (= (type h1@@9) (MapType0Type refType MapType1Type))) (= (type f@@20) HandleTypeType)) (and (and (and ($HeapSucc h0@@9 h1@@9) (and ($IsGoodHeap h0@@9) ($IsGoodHeap h1@@9))) ($Is f@@20 (Tclass._System.___hFunc0 t0@@37))) (forall ((o@@53 T@U) (fld@@8 T@U) ) (! (let ((a@@91 (FieldTypeInv0 (type fld@@8)))) (=> (and (and (= (type o@@53) refType) (= (type fld@@8) (FieldType a@@91))) (and (not (= o@@53 null)) (U_2_bool (MapType0Select (Reads0 t0@@37 h1@@9 f@@20) ($Box o@@53))))) (= (MapType1Select (MapType0Select h0@@9 o@@53) fld@@8) (MapType1Select (MapType0Select h1@@9 o@@53) fld@@8)))) :qid |unknown.0:0| :skolemid |774| :no-pattern (type o@@53) :no-pattern (type fld@@8) :no-pattern (U_2_int o@@53) :no-pattern (U_2_bool o@@53) :no-pattern (U_2_int fld@@8) :no-pattern (U_2_bool fld@@8) )))) (= (Requires0 t0@@37 h0@@9 f@@20) (Requires0 t0@@37 h1@@9 f@@20))) :qid |unknown.0:0| :skolemid |775| :pattern ( ($HeapSucc h0@@9 h1@@9) (Requires0 t0@@37 h1@@9 f@@20)) )))
(assert (forall ((t0@@38 T@U) (h0@@10 T@U) (h1@@10 T@U) (f@@21 T@U) ) (!  (=> (and (and (and (and (= (type t0@@38) TyType) (= (type h0@@10) (MapType0Type refType MapType1Type))) (= (type h1@@10) (MapType0Type refType MapType1Type))) (= (type f@@21) HandleTypeType)) (and (and (and ($HeapSucc h0@@10 h1@@10) (and ($IsGoodHeap h0@@10) ($IsGoodHeap h1@@10))) ($Is f@@21 (Tclass._System.___hFunc0 t0@@38))) (forall ((o@@54 T@U) (fld@@9 T@U) ) (! (let ((a@@92 (FieldTypeInv0 (type fld@@9)))) (=> (and (and (= (type o@@54) refType) (= (type fld@@9) (FieldType a@@92))) (and (not (= o@@54 null)) (U_2_bool (MapType0Select (Reads0 t0@@38 h0@@10 f@@21) ($Box o@@54))))) (= (MapType1Select (MapType0Select h0@@10 o@@54) fld@@9) (MapType1Select (MapType0Select h1@@10 o@@54) fld@@9)))) :qid |unknown.0:0| :skolemid |776| :no-pattern (type o@@54) :no-pattern (type fld@@9) :no-pattern (U_2_int o@@54) :no-pattern (U_2_bool o@@54) :no-pattern (U_2_int fld@@9) :no-pattern (U_2_bool fld@@9) )))) (= (Apply0 t0@@38 h0@@10 f@@21) (Apply0 t0@@38 h1@@10 f@@21))) :qid |unknown.0:0| :skolemid |777| :pattern ( ($HeapSucc h0@@10 h1@@10) (Apply0 t0@@38 h1@@10 f@@21)) )))
(assert (forall ((t0@@39 T@U) (h0@@11 T@U) (h1@@11 T@U) (f@@22 T@U) ) (!  (=> (and (and (and (and (= (type t0@@39) TyType) (= (type h0@@11) (MapType0Type refType MapType1Type))) (= (type h1@@11) (MapType0Type refType MapType1Type))) (= (type f@@22) HandleTypeType)) (and (and (and ($HeapSucc h0@@11 h1@@11) (and ($IsGoodHeap h0@@11) ($IsGoodHeap h1@@11))) ($Is f@@22 (Tclass._System.___hFunc0 t0@@39))) (forall ((o@@55 T@U) (fld@@10 T@U) ) (! (let ((a@@93 (FieldTypeInv0 (type fld@@10)))) (=> (and (and (= (type o@@55) refType) (= (type fld@@10) (FieldType a@@93))) (and (not (= o@@55 null)) (U_2_bool (MapType0Select (Reads0 t0@@39 h1@@11 f@@22) ($Box o@@55))))) (= (MapType1Select (MapType0Select h0@@11 o@@55) fld@@10) (MapType1Select (MapType0Select h1@@11 o@@55) fld@@10)))) :qid |unknown.0:0| :skolemid |778| :no-pattern (type o@@55) :no-pattern (type fld@@10) :no-pattern (U_2_int o@@55) :no-pattern (U_2_bool o@@55) :no-pattern (U_2_int fld@@10) :no-pattern (U_2_bool fld@@10) )))) (= (Apply0 t0@@39 h0@@11 f@@22) (Apply0 t0@@39 h1@@11 f@@22))) :qid |unknown.0:0| :skolemid |779| :pattern ( ($HeapSucc h0@@11 h1@@11) (Apply0 t0@@39 h1@@11 f@@22)) )))
(assert (forall ((t0@@40 T@U) (heap@@9 T@U) (f@@23 T@U) ) (!  (=> (and (and (and (= (type t0@@40) TyType) (= (type heap@@9) (MapType0Type refType MapType1Type))) (= (type f@@23) HandleTypeType)) (and ($IsGoodHeap heap@@9) ($Is f@@23 (Tclass._System.___hFunc0 t0@@40)))) (= (|Set#Equal| (Reads0 t0@@40 $OneHeap f@@23) (|Set#Empty| BoxType)) (|Set#Equal| (Reads0 t0@@40 heap@@9 f@@23) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |780| :pattern ( (Reads0 t0@@40 $OneHeap f@@23) ($IsGoodHeap heap@@9)) :pattern ( (Reads0 t0@@40 heap@@9 f@@23)) )))
(assert (forall ((t0@@41 T@U) (heap@@10 T@U) (f@@24 T@U) ) (!  (=> (and (and (and (= (type t0@@41) TyType) (= (type heap@@10) (MapType0Type refType MapType1Type))) (= (type f@@24) HandleTypeType)) (and (and ($IsGoodHeap heap@@10) ($Is f@@24 (Tclass._System.___hFunc0 t0@@41))) (|Set#Equal| (Reads0 t0@@41 $OneHeap f@@24) (|Set#Empty| BoxType)))) (= (Requires0 t0@@41 $OneHeap f@@24) (Requires0 t0@@41 heap@@10 f@@24))) :qid |unknown.0:0| :skolemid |781| :pattern ( (Requires0 t0@@41 $OneHeap f@@24) ($IsGoodHeap heap@@10)) :pattern ( (Requires0 t0@@41 heap@@10 f@@24)) )))
(assert (forall ((f@@25 T@U) (t0@@42 T@U) ) (!  (=> (and (= (type f@@25) HandleTypeType) (= (type t0@@42) TyType)) (= ($Is f@@25 (Tclass._System.___hFunc0 t0@@42)) (forall ((h@@30 T@U) ) (!  (=> (= (type h@@30) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap h@@30) (Requires0 t0@@42 h@@30 f@@25)) ($IsBox (Apply0 t0@@42 h@@30 f@@25) t0@@42))) :qid |DafnyPreludebpl.545:12| :skolemid |782| :pattern ( (Apply0 t0@@42 h@@30 f@@25)) )))) :qid |unknown.0:0| :skolemid |783| :pattern ( ($Is f@@25 (Tclass._System.___hFunc0 t0@@42))) )))
(assert (forall ((f@@26 T@U) (t0@@43 T@U) (u0@@0 T@U) ) (!  (=> (and (and (and (= (type f@@26) HandleTypeType) (= (type t0@@43) TyType)) (= (type u0@@0) TyType)) (and ($Is f@@26 (Tclass._System.___hFunc0 t0@@43)) (forall ((bx@@39 T@U) ) (!  (=> (and (= (type bx@@39) BoxType) ($IsBox bx@@39 t0@@43)) ($IsBox bx@@39 u0@@0)) :qid |unknown.0:0| :skolemid |784| :pattern ( ($IsBox bx@@39 t0@@43)) :pattern ( ($IsBox bx@@39 u0@@0)) )))) ($Is f@@26 (Tclass._System.___hFunc0 u0@@0))) :qid |unknown.0:0| :skolemid |785| :pattern ( ($Is f@@26 (Tclass._System.___hFunc0 t0@@43)) ($Is f@@26 (Tclass._System.___hFunc0 u0@@0))) )))
(assert (forall ((f@@27 T@U) (t0@@44 T@U) (h@@31 T@U) ) (!  (=> (and (and (and (= (type f@@27) HandleTypeType) (= (type t0@@44) TyType)) (= (type h@@31) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@31)) (= ($IsAlloc f@@27 (Tclass._System.___hFunc0 t0@@44) h@@31)  (=> (Requires0 t0@@44 h@@31 f@@27) (forall ((r@@13 T@U) ) (!  (=> (= (type r@@13) refType) (=> (and (not (= r@@13 null)) (U_2_bool (MapType0Select (Reads0 t0@@44 h@@31 f@@27) ($Box r@@13)))) (U_2_bool (MapType1Select (MapType0Select h@@31 r@@13) alloc)))) :qid |unknown.0:0| :skolemid |786| :pattern ( (MapType0Select (Reads0 t0@@44 h@@31 f@@27) ($Box r@@13))) ))))) :qid |unknown.0:0| :skolemid |787| :pattern ( ($IsAlloc f@@27 (Tclass._System.___hFunc0 t0@@44) h@@31)) )))
(assert (forall ((f@@28 T@U) (t0@@45 T@U) (h@@32 T@U) ) (!  (=> (and (and (and (and (= (type f@@28) HandleTypeType) (= (type t0@@45) TyType)) (= (type h@@32) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@32) ($IsAlloc f@@28 (Tclass._System.___hFunc0 t0@@45) h@@32))) (Requires0 t0@@45 h@@32 f@@28)) ($IsAllocBox (Apply0 t0@@45 h@@32 f@@28) t0@@45 h@@32)) :qid |unknown.0:0| :skolemid |788| :pattern ( ($IsAlloc f@@28 (Tclass._System.___hFunc0 t0@@45) h@@32)) )))
(assert (forall ((arg0@@141 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0 arg0@@141)) TyType) :qid |funType:Tclass._System.___hPartialFunc0| :pattern ( (Tclass._System.___hPartialFunc0 arg0@@141)) )))
(assert (forall ((|#$R@@18| T@U) ) (!  (=> (= (type |#$R@@18|) TyType) (and (= (Tag (Tclass._System.___hPartialFunc0 |#$R@@18|)) Tagclass._System.___hPartialFunc0) (= (TagFamily (Tclass._System.___hPartialFunc0 |#$R@@18|)) |tytagFamily$_#PartialFunc0|))) :qid |unknown.0:0| :skolemid |789| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@18|)) )))
(assert (forall ((arg0@@142 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0_0 arg0@@142)) TyType) :qid |funType:Tclass._System.___hPartialFunc0_0| :pattern ( (Tclass._System.___hPartialFunc0_0 arg0@@142)) )))
(assert (forall ((|#$R@@19| T@U) ) (!  (=> (= (type |#$R@@19|) TyType) (= (Tclass._System.___hPartialFunc0_0 (Tclass._System.___hPartialFunc0 |#$R@@19|)) |#$R@@19|)) :qid |unknown.0:0| :skolemid |790| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@19|)) )))
(assert (forall ((|#$R@@20| T@U) (bx@@40 T@U) ) (!  (=> (and (and (= (type |#$R@@20|) TyType) (= (type bx@@40) BoxType)) ($IsBox bx@@40 (Tclass._System.___hPartialFunc0 |#$R@@20|))) (and (= ($Box ($Unbox HandleTypeType bx@@40)) bx@@40) ($Is ($Unbox HandleTypeType bx@@40) (Tclass._System.___hPartialFunc0 |#$R@@20|)))) :qid |unknown.0:0| :skolemid |791| :pattern ( ($IsBox bx@@40 (Tclass._System.___hPartialFunc0 |#$R@@20|))) )))
(assert (forall ((|#$R@@21| T@U) (|f#0@@3| T@U) ) (!  (=> (and (= (type |#$R@@21|) TyType) (= (type |f#0@@3|) HandleTypeType)) (= ($Is |f#0@@3| (Tclass._System.___hPartialFunc0 |#$R@@21|))  (and ($Is |f#0@@3| (Tclass._System.___hFunc0 |#$R@@21|)) (|Set#Equal| (Reads0 |#$R@@21| $OneHeap |f#0@@3|) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |792| :pattern ( ($Is |f#0@@3| (Tclass._System.___hPartialFunc0 |#$R@@21|))) )))
(assert (forall ((|#$R@@22| T@U) (|f#0@@4| T@U) ($h@@9 T@U) ) (!  (=> (and (and (= (type |#$R@@22|) TyType) (= (type |f#0@@4|) HandleTypeType)) (= (type $h@@9) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc0 |#$R@@22|) $h@@9) ($IsAlloc |f#0@@4| (Tclass._System.___hFunc0 |#$R@@22|) $h@@9))) :qid |unknown.0:0| :skolemid |793| :pattern ( ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc0 |#$R@@22|) $h@@9)) )))
(assert (forall ((arg0@@143 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0 arg0@@143)) TyType) :qid |funType:Tclass._System.___hTotalFunc0| :pattern ( (Tclass._System.___hTotalFunc0 arg0@@143)) )))
(assert (forall ((|#$R@@23| T@U) ) (!  (=> (= (type |#$R@@23|) TyType) (and (= (Tag (Tclass._System.___hTotalFunc0 |#$R@@23|)) Tagclass._System.___hTotalFunc0) (= (TagFamily (Tclass._System.___hTotalFunc0 |#$R@@23|)) |tytagFamily$_#TotalFunc0|))) :qid |unknown.0:0| :skolemid |794| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@23|)) )))
(assert (forall ((arg0@@144 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0_0 arg0@@144)) TyType) :qid |funType:Tclass._System.___hTotalFunc0_0| :pattern ( (Tclass._System.___hTotalFunc0_0 arg0@@144)) )))
(assert (forall ((|#$R@@24| T@U) ) (!  (=> (= (type |#$R@@24|) TyType) (= (Tclass._System.___hTotalFunc0_0 (Tclass._System.___hTotalFunc0 |#$R@@24|)) |#$R@@24|)) :qid |unknown.0:0| :skolemid |795| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@24|)) )))
(assert (forall ((|#$R@@25| T@U) (bx@@41 T@U) ) (!  (=> (and (and (= (type |#$R@@25|) TyType) (= (type bx@@41) BoxType)) ($IsBox bx@@41 (Tclass._System.___hTotalFunc0 |#$R@@25|))) (and (= ($Box ($Unbox HandleTypeType bx@@41)) bx@@41) ($Is ($Unbox HandleTypeType bx@@41) (Tclass._System.___hTotalFunc0 |#$R@@25|)))) :qid |unknown.0:0| :skolemid |796| :pattern ( ($IsBox bx@@41 (Tclass._System.___hTotalFunc0 |#$R@@25|))) )))
(assert (forall ((|#$R@@26| T@U) (|f#0@@5| T@U) ) (!  (=> (and (= (type |#$R@@26|) TyType) (= (type |f#0@@5|) HandleTypeType)) (= ($Is |f#0@@5| (Tclass._System.___hTotalFunc0 |#$R@@26|))  (and ($Is |f#0@@5| (Tclass._System.___hPartialFunc0 |#$R@@26|)) (Requires0 |#$R@@26| $OneHeap |f#0@@5|)))) :qid |unknown.0:0| :skolemid |797| :pattern ( ($Is |f#0@@5| (Tclass._System.___hTotalFunc0 |#$R@@26|))) )))
(assert (forall ((|#$R@@27| T@U) (|f#0@@6| T@U) ($h@@10 T@U) ) (!  (=> (and (and (= (type |#$R@@27|) TyType) (= (type |f#0@@6|) HandleTypeType)) (= (type $h@@10) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc0 |#$R@@27|) $h@@10) ($IsAlloc |f#0@@6| (Tclass._System.___hPartialFunc0 |#$R@@27|) $h@@10))) :qid |unknown.0:0| :skolemid |798| :pattern ( ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc0 |#$R@@27|) $h@@10)) )))
(assert (= (type Tclass._System.__default) TyType))
(assert (= (Tag Tclass._System.__default) Tagclass._System.__default))
(assert (= (TagFamily Tclass._System.__default) tytagFamily$_default))
(assert (forall ((bx@@42 T@U) ) (!  (=> (and (= (type bx@@42) BoxType) ($IsBox bx@@42 Tclass._System.__default)) (and (= ($Box ($Unbox refType bx@@42)) bx@@42) ($Is ($Unbox refType bx@@42) Tclass._System.__default))) :qid |unknown.0:0| :skolemid |799| :pattern ( ($IsBox bx@@42 Tclass._System.__default)) )))
(assert (forall (($o@@7 T@U) ) (!  (=> (= (type $o@@7) refType) (= ($Is $o@@7 Tclass._System.__default)  (or (= $o@@7 null) (= (dtype $o@@7) Tclass._System.__default)))) :qid |unknown.0:0| :skolemid |800| :pattern ( ($Is $o@@7 Tclass._System.__default)) )))
(assert (forall (($o@@8 T@U) ($h@@11 T@U) ) (!  (=> (and (= (type $o@@8) refType) (= (type $h@@11) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@8 Tclass._System.__default $h@@11)  (or (= $o@@8 null) (U_2_bool (MapType1Select (MapType0Select $h@@11 $o@@8) alloc))))) :qid |unknown.0:0| :skolemid |801| :pattern ( ($IsAlloc $o@@8 Tclass._System.__default $h@@11)) )))
(assert  (=> true (forall ((|#$A| T@U) (|#$B| T@U) (|a#0| T@U) (|b#0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A|) TyType) (= (type |#$B|) TyType)) (= (type |a#0|) BoxType)) (= (type |b#0|) BoxType)) (or (|_System.__default.rank__is__less__than#canCall| |#$A| |#$B| |a#0| |b#0|) (and ($IsBox |a#0| |#$A|) ($IsBox |b#0| |#$B|)))) true) :qid |unknown.0:0| :skolemid |802| :pattern ( (_System.__default.rank__is__less__than |#$A| |#$B| |a#0| |b#0|)) ))))
(assert (forall ((|#$A@@0| T@U) (|#$B@@0| T@U) (|a#0@@0| T@U) (|b#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A@@0|) TyType) (= (type |#$B@@0|) TyType)) (= (type |a#0@@0|) BoxType)) (= (type |b#0@@0|) BoxType)) (and ($IsBox |a#0@@0| |#$A@@0|) ($IsBox |b#0@@0| |#$B@@0|))) (= (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|) true)) :qid |unknown.0:0| :skolemid |803| :pattern ( (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|)) )))
(assert (forall ((arg0@@145 T@U) (arg1@@67 T@U) (arg2@@19 T@U) ) (! (= (type (Tclass._System.___hFunc2 arg0@@145 arg1@@67 arg2@@19)) TyType) :qid |funType:Tclass._System.___hFunc2| :pattern ( (Tclass._System.___hFunc2 arg0@@145 arg1@@67 arg2@@19)) )))
(assert (forall ((|#$T0@@15| T@U) (|#$T1| T@U) (|#$R@@28| T@U) ) (!  (=> (and (and (= (type |#$T0@@15|) TyType) (= (type |#$T1|) TyType)) (= (type |#$R@@28|) TyType)) (and (= (Tag (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) Tagclass._System.___hFunc2) (= (TagFamily (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) |tytagFamily$_#Func2|))) :qid |unknown.0:0| :skolemid |804| :pattern ( (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) )))
(assert (forall ((arg0@@146 T@U) ) (! (= (type (Tclass._System.___hFunc2_0 arg0@@146)) TyType) :qid |funType:Tclass._System.___hFunc2_0| :pattern ( (Tclass._System.___hFunc2_0 arg0@@146)) )))
(assert (forall ((|#$T0@@16| T@U) (|#$T1@@0| T@U) (|#$R@@29| T@U) ) (!  (=> (and (and (= (type |#$T0@@16|) TyType) (= (type |#$T1@@0|) TyType)) (= (type |#$R@@29|) TyType)) (= (Tclass._System.___hFunc2_0 (Tclass._System.___hFunc2 |#$T0@@16| |#$T1@@0| |#$R@@29|)) |#$T0@@16|)) :qid |unknown.0:0| :skolemid |805| :pattern ( (Tclass._System.___hFunc2 |#$T0@@16| |#$T1@@0| |#$R@@29|)) )))
(assert (forall ((arg0@@147 T@U) ) (! (= (type (Tclass._System.___hFunc2_1 arg0@@147)) TyType) :qid |funType:Tclass._System.___hFunc2_1| :pattern ( (Tclass._System.___hFunc2_1 arg0@@147)) )))
(assert (forall ((|#$T0@@17| T@U) (|#$T1@@1| T@U) (|#$R@@30| T@U) ) (!  (=> (and (and (= (type |#$T0@@17|) TyType) (= (type |#$T1@@1|) TyType)) (= (type |#$R@@30|) TyType)) (= (Tclass._System.___hFunc2_1 (Tclass._System.___hFunc2 |#$T0@@17| |#$T1@@1| |#$R@@30|)) |#$T1@@1|)) :qid |unknown.0:0| :skolemid |806| :pattern ( (Tclass._System.___hFunc2 |#$T0@@17| |#$T1@@1| |#$R@@30|)) )))
(assert (forall ((arg0@@148 T@U) ) (! (= (type (Tclass._System.___hFunc2_2 arg0@@148)) TyType) :qid |funType:Tclass._System.___hFunc2_2| :pattern ( (Tclass._System.___hFunc2_2 arg0@@148)) )))
(assert (forall ((|#$T0@@18| T@U) (|#$T1@@2| T@U) (|#$R@@31| T@U) ) (!  (=> (and (and (= (type |#$T0@@18|) TyType) (= (type |#$T1@@2|) TyType)) (= (type |#$R@@31|) TyType)) (= (Tclass._System.___hFunc2_2 (Tclass._System.___hFunc2 |#$T0@@18| |#$T1@@2| |#$R@@31|)) |#$R@@31|)) :qid |unknown.0:0| :skolemid |807| :pattern ( (Tclass._System.___hFunc2 |#$T0@@18| |#$T1@@2| |#$R@@31|)) )))
(assert (forall ((|#$T0@@19| T@U) (|#$T1@@3| T@U) (|#$R@@32| T@U) (bx@@43 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@19|) TyType) (= (type |#$T1@@3|) TyType)) (= (type |#$R@@32|) TyType)) (= (type bx@@43) BoxType)) ($IsBox bx@@43 (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|))) (and (= ($Box ($Unbox HandleTypeType bx@@43)) bx@@43) ($Is ($Unbox HandleTypeType bx@@43) (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|)))) :qid |unknown.0:0| :skolemid |808| :pattern ( ($IsBox bx@@43 (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@149 T@T) (arg1@@68 T@T) (arg2@@20 T@T) (arg3@@3 T@T) ) (! (= (Ctor (MapType3Type arg0@@149 arg1@@68 arg2@@20 arg3@@3)) 25) :qid |ctor:MapType3Type| )) (forall ((arg0@@150 T@T) (arg1@@69 T@T) (arg2@@21 T@T) (arg3@@4 T@T) ) (! (= (MapType3TypeInv0 (MapType3Type arg0@@150 arg1@@69 arg2@@21 arg3@@4)) arg0@@150) :qid |typeInv:MapType3TypeInv0| :pattern ( (MapType3Type arg0@@150 arg1@@69 arg2@@21 arg3@@4)) ))) (forall ((arg0@@151 T@T) (arg1@@70 T@T) (arg2@@22 T@T) (arg3@@5 T@T) ) (! (= (MapType3TypeInv1 (MapType3Type arg0@@151 arg1@@70 arg2@@22 arg3@@5)) arg1@@70) :qid |typeInv:MapType3TypeInv1| :pattern ( (MapType3Type arg0@@151 arg1@@70 arg2@@22 arg3@@5)) ))) (forall ((arg0@@152 T@T) (arg1@@71 T@T) (arg2@@23 T@T) (arg3@@6 T@T) ) (! (= (MapType3TypeInv2 (MapType3Type arg0@@152 arg1@@71 arg2@@23 arg3@@6)) arg2@@23) :qid |typeInv:MapType3TypeInv2| :pattern ( (MapType3Type arg0@@152 arg1@@71 arg2@@23 arg3@@6)) ))) (forall ((arg0@@153 T@T) (arg1@@72 T@T) (arg2@@24 T@T) (arg3@@7 T@T) ) (! (= (MapType3TypeInv3 (MapType3Type arg0@@153 arg1@@72 arg2@@24 arg3@@7)) arg3@@7) :qid |typeInv:MapType3TypeInv3| :pattern ( (MapType3Type arg0@@153 arg1@@72 arg2@@24 arg3@@7)) ))) (forall ((arg0@@154 T@U) (arg1@@73 T@U) (arg2@@25 T@U) (arg3@@8 T@U) ) (! (let ((aVar3 (MapType3TypeInv3 (type arg0@@154)))) (= (type (MapType3Select arg0@@154 arg1@@73 arg2@@25 arg3@@8)) aVar3)) :qid |funType:MapType3Select| :pattern ( (MapType3Select arg0@@154 arg1@@73 arg2@@25 arg3@@8)) ))) (forall ((arg0@@155 T@U) (arg1@@74 T@U) (arg2@@26 T@U) (arg3@@9 T@U) (arg4@@1 T@U) ) (! (let ((aVar3@@0 (type arg4@@1))) (let ((aVar2@@2 (type arg3@@9))) (let ((aVar1@@3 (type arg2@@26))) (let ((aVar0@@1 (type arg1@@74))) (= (type (MapType3Store arg0@@155 arg1@@74 arg2@@26 arg3@@9 arg4@@1)) (MapType3Type aVar0@@1 aVar1@@3 aVar2@@2 aVar3@@0)))))) :qid |funType:MapType3Store| :pattern ( (MapType3Store arg0@@155 arg1@@74 arg2@@26 arg3@@9 arg4@@1)) ))) (forall ((m@@49 T@U) (x0@@9 T@U) (x1@@3 T@U) (x2 T@U) (val@@10 T@U) ) (! (let ((aVar3@@1 (MapType3TypeInv3 (type m@@49)))) (=> (= (type val@@10) aVar3@@1) (= (MapType3Select (MapType3Store m@@49 x0@@9 x1@@3 x2 val@@10) x0@@9 x1@@3 x2) val@@10))) :qid |mapAx0:MapType3Select| :weight 0 ))) (and (and (and (forall ((val@@11 T@U) (m@@50 T@U) (x0@@10 T@U) (x1@@4 T@U) (x2@@0 T@U) (y0@@6 T@U) (y1@@2 T@U) (y2 T@U) ) (!  (or (= x0@@10 y0@@6) (= (MapType3Select (MapType3Store m@@50 x0@@10 x1@@4 x2@@0 val@@11) y0@@6 y1@@2 y2) (MapType3Select m@@50 y0@@6 y1@@2 y2))) :qid |mapAx1:MapType3Select:0| :weight 0 )) (forall ((val@@12 T@U) (m@@51 T@U) (x0@@11 T@U) (x1@@5 T@U) (x2@@1 T@U) (y0@@7 T@U) (y1@@3 T@U) (y2@@0 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType3Select (MapType3Store m@@51 x0@@11 x1@@5 x2@@1 val@@12) y0@@7 y1@@3 y2@@0) (MapType3Select m@@51 y0@@7 y1@@3 y2@@0))) :qid |mapAx1:MapType3Select:1| :weight 0 ))) (forall ((val@@13 T@U) (m@@52 T@U) (x0@@12 T@U) (x1@@6 T@U) (x2@@2 T@U) (y0@@8 T@U) (y1@@4 T@U) (y2@@1 T@U) ) (!  (or (= x2@@2 y2@@1) (= (MapType3Select (MapType3Store m@@52 x0@@12 x1@@6 x2@@2 val@@13) y0@@8 y1@@4 y2@@1) (MapType3Select m@@52 y0@@8 y1@@4 y2@@1))) :qid |mapAx1:MapType3Select:2| :weight 0 ))) (forall ((val@@14 T@U) (m@@53 T@U) (x0@@13 T@U) (x1@@7 T@U) (x2@@3 T@U) (y0@@9 T@U) (y1@@5 T@U) (y2@@2 T@U) ) (!  (or true (= (MapType3Select (MapType3Store m@@53 x0@@13 x1@@7 x2@@3 val@@14) y0@@9 y1@@5 y2@@2) (MapType3Select m@@53 y0@@9 y1@@5 y2@@2))) :qid |mapAx2:MapType3Select| :weight 0 )))) (forall ((arg0@@156 T@U) (arg1@@75 T@U) (arg2@@27 T@U) (arg3@@10 T@U) (arg4@@2 T@U) (arg5 T@U) (arg6 T@U) ) (! (= (type (Apply2 arg0@@156 arg1@@75 arg2@@27 arg3@@10 arg4@@2 arg5 arg6)) BoxType) :qid |funType:Apply2| :pattern ( (Apply2 arg0@@156 arg1@@75 arg2@@27 arg3@@10 arg4@@2 arg5 arg6)) ))) (forall ((arg0@@157 T@U) (arg1@@76 T@U) (arg2@@28 T@U) ) (! (= (type (Handle2 arg0@@157 arg1@@76 arg2@@28)) HandleTypeType) :qid |funType:Handle2| :pattern ( (Handle2 arg0@@157 arg1@@76 arg2@@28)) ))))
(assert (forall ((t0@@46 T@U) (t1@@22 T@U) (t2 T@U) (heap@@11 T@U) (h@@33 T@U) (r@@14 T@U) (rd@@5 T@U) (bx0@@13 T@U) (bx1 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@46) TyType) (= (type t1@@22) TyType)) (= (type t2) TyType)) (= (type heap@@11) (MapType0Type refType MapType1Type))) (= (type h@@33) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@14) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@5) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@13) BoxType)) (= (type bx1) BoxType)) (= (Apply2 t0@@46 t1@@22 t2 heap@@11 (Handle2 h@@33 r@@14 rd@@5) bx0@@13 bx1) (MapType3Select h@@33 heap@@11 bx0@@13 bx1))) :qid |unknown.0:0| :skolemid |809| :pattern ( (Apply2 t0@@46 t1@@22 t2 heap@@11 (Handle2 h@@33 r@@14 rd@@5) bx0@@13 bx1)) )))
(assert (forall ((t0@@47 T@U) (t1@@23 T@U) (t2@@0 T@U) (heap@@12 T@U) (h@@34 T@U) (r@@15 T@U) (rd@@6 T@U) (bx0@@14 T@U) (bx1@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@47) TyType) (= (type t1@@23) TyType)) (= (type t2@@0) TyType)) (= (type heap@@12) (MapType0Type refType MapType1Type))) (= (type h@@34) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@15) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@6) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@14) BoxType)) (= (type bx1@@0) BoxType)) (U_2_bool (MapType3Select r@@15 heap@@12 bx0@@14 bx1@@0))) (Requires2 t0@@47 t1@@23 t2@@0 heap@@12 (Handle2 h@@34 r@@15 rd@@6) bx0@@14 bx1@@0)) :qid |unknown.0:0| :skolemid |810| :pattern ( (Requires2 t0@@47 t1@@23 t2@@0 heap@@12 (Handle2 h@@34 r@@15 rd@@6) bx0@@14 bx1@@0)) )))
(assert (forall ((arg0@@158 T@U) (arg1@@77 T@U) (arg2@@29 T@U) (arg3@@11 T@U) (arg4@@3 T@U) (arg5@@0 T@U) (arg6@@0 T@U) ) (! (= (type (Reads2 arg0@@158 arg1@@77 arg2@@29 arg3@@11 arg4@@3 arg5@@0 arg6@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads2| :pattern ( (Reads2 arg0@@158 arg1@@77 arg2@@29 arg3@@11 arg4@@3 arg5@@0 arg6@@0)) )))
(assert (forall ((t0@@48 T@U) (t1@@24 T@U) (t2@@1 T@U) (heap@@13 T@U) (h@@35 T@U) (r@@16 T@U) (rd@@7 T@U) (bx0@@15 T@U) (bx1@@1 T@U) (bx@@44 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@48) TyType) (= (type t1@@24) TyType)) (= (type t2@@1) TyType)) (= (type heap@@13) (MapType0Type refType MapType1Type))) (= (type h@@35) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@16) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@7) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@15) BoxType)) (= (type bx1@@1) BoxType)) (= (type bx@@44) BoxType)) (= (U_2_bool (MapType0Select (Reads2 t0@@48 t1@@24 t2@@1 heap@@13 (Handle2 h@@35 r@@16 rd@@7) bx0@@15 bx1@@1) bx@@44)) (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@13 bx0@@15 bx1@@1) bx@@44)))) :qid |unknown.0:0| :skolemid |811| :pattern ( (MapType0Select (Reads2 t0@@48 t1@@24 t2@@1 heap@@13 (Handle2 h@@35 r@@16 rd@@7) bx0@@15 bx1@@1) bx@@44)) )))
(assert (forall ((t0@@49 T@U) (t1@@25 T@U) (t2@@2 T@U) (h0@@12 T@U) (h1@@12 T@U) (f@@29 T@U) (bx0@@16 T@U) (bx1@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@49) TyType) (= (type t1@@25) TyType)) (= (type t2@@2) TyType)) (= (type h0@@12) (MapType0Type refType MapType1Type))) (= (type h1@@12) (MapType0Type refType MapType1Type))) (= (type f@@29) HandleTypeType)) (= (type bx0@@16) BoxType)) (= (type bx1@@2) BoxType)) (and (and (and ($HeapSucc h0@@12 h1@@12) (and ($IsGoodHeap h0@@12) ($IsGoodHeap h1@@12))) (and (and ($IsBox bx0@@16 t0@@49) ($IsBox bx1@@2 t1@@25)) ($Is f@@29 (Tclass._System.___hFunc2 t0@@49 t1@@25 t2@@2)))) (forall ((o@@56 T@U) (fld@@11 T@U) ) (! (let ((a@@94 (FieldTypeInv0 (type fld@@11)))) (=> (and (and (= (type o@@56) refType) (= (type fld@@11) (FieldType a@@94))) (and (not (= o@@56 null)) (U_2_bool (MapType0Select (Reads2 t0@@49 t1@@25 t2@@2 h0@@12 f@@29 bx0@@16 bx1@@2) ($Box o@@56))))) (= (MapType1Select (MapType0Select h0@@12 o@@56) fld@@11) (MapType1Select (MapType0Select h1@@12 o@@56) fld@@11)))) :qid |unknown.0:0| :skolemid |812| :no-pattern (type o@@56) :no-pattern (type fld@@11) :no-pattern (U_2_int o@@56) :no-pattern (U_2_bool o@@56) :no-pattern (U_2_int fld@@11) :no-pattern (U_2_bool fld@@11) )))) (= (Reads2 t0@@49 t1@@25 t2@@2 h0@@12 f@@29 bx0@@16 bx1@@2) (Reads2 t0@@49 t1@@25 t2@@2 h1@@12 f@@29 bx0@@16 bx1@@2))) :qid |unknown.0:0| :skolemid |813| :pattern ( ($HeapSucc h0@@12 h1@@12) (Reads2 t0@@49 t1@@25 t2@@2 h1@@12 f@@29 bx0@@16 bx1@@2)) )))
(assert (forall ((t0@@50 T@U) (t1@@26 T@U) (t2@@3 T@U) (h0@@13 T@U) (h1@@13 T@U) (f@@30 T@U) (bx0@@17 T@U) (bx1@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@50) TyType) (= (type t1@@26) TyType)) (= (type t2@@3) TyType)) (= (type h0@@13) (MapType0Type refType MapType1Type))) (= (type h1@@13) (MapType0Type refType MapType1Type))) (= (type f@@30) HandleTypeType)) (= (type bx0@@17) BoxType)) (= (type bx1@@3) BoxType)) (and (and (and ($HeapSucc h0@@13 h1@@13) (and ($IsGoodHeap h0@@13) ($IsGoodHeap h1@@13))) (and (and ($IsBox bx0@@17 t0@@50) ($IsBox bx1@@3 t1@@26)) ($Is f@@30 (Tclass._System.___hFunc2 t0@@50 t1@@26 t2@@3)))) (forall ((o@@57 T@U) (fld@@12 T@U) ) (! (let ((a@@95 (FieldTypeInv0 (type fld@@12)))) (=> (and (and (= (type o@@57) refType) (= (type fld@@12) (FieldType a@@95))) (and (not (= o@@57 null)) (U_2_bool (MapType0Select (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3) ($Box o@@57))))) (= (MapType1Select (MapType0Select h0@@13 o@@57) fld@@12) (MapType1Select (MapType0Select h1@@13 o@@57) fld@@12)))) :qid |unknown.0:0| :skolemid |814| :no-pattern (type o@@57) :no-pattern (type fld@@12) :no-pattern (U_2_int o@@57) :no-pattern (U_2_bool o@@57) :no-pattern (U_2_int fld@@12) :no-pattern (U_2_bool fld@@12) )))) (= (Reads2 t0@@50 t1@@26 t2@@3 h0@@13 f@@30 bx0@@17 bx1@@3) (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3))) :qid |unknown.0:0| :skolemid |815| :pattern ( ($HeapSucc h0@@13 h1@@13) (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3)) )))
(assert (forall ((t0@@51 T@U) (t1@@27 T@U) (t2@@4 T@U) (h0@@14 T@U) (h1@@14 T@U) (f@@31 T@U) (bx0@@18 T@U) (bx1@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@51) TyType) (= (type t1@@27) TyType)) (= (type t2@@4) TyType)) (= (type h0@@14) (MapType0Type refType MapType1Type))) (= (type h1@@14) (MapType0Type refType MapType1Type))) (= (type f@@31) HandleTypeType)) (= (type bx0@@18) BoxType)) (= (type bx1@@4) BoxType)) (and (and (and ($HeapSucc h0@@14 h1@@14) (and ($IsGoodHeap h0@@14) ($IsGoodHeap h1@@14))) (and (and ($IsBox bx0@@18 t0@@51) ($IsBox bx1@@4 t1@@27)) ($Is f@@31 (Tclass._System.___hFunc2 t0@@51 t1@@27 t2@@4)))) (forall ((o@@58 T@U) (fld@@13 T@U) ) (! (let ((a@@96 (FieldTypeInv0 (type fld@@13)))) (=> (and (and (= (type o@@58) refType) (= (type fld@@13) (FieldType a@@96))) (and (not (= o@@58 null)) (U_2_bool (MapType0Select (Reads2 t0@@51 t1@@27 t2@@4 h0@@14 f@@31 bx0@@18 bx1@@4) ($Box o@@58))))) (= (MapType1Select (MapType0Select h0@@14 o@@58) fld@@13) (MapType1Select (MapType0Select h1@@14 o@@58) fld@@13)))) :qid |unknown.0:0| :skolemid |816| :no-pattern (type o@@58) :no-pattern (type fld@@13) :no-pattern (U_2_int o@@58) :no-pattern (U_2_bool o@@58) :no-pattern (U_2_int fld@@13) :no-pattern (U_2_bool fld@@13) )))) (= (Requires2 t0@@51 t1@@27 t2@@4 h0@@14 f@@31 bx0@@18 bx1@@4) (Requires2 t0@@51 t1@@27 t2@@4 h1@@14 f@@31 bx0@@18 bx1@@4))) :qid |unknown.0:0| :skolemid |817| :pattern ( ($HeapSucc h0@@14 h1@@14) (Requires2 t0@@51 t1@@27 t2@@4 h1@@14 f@@31 bx0@@18 bx1@@4)) )))
(assert (forall ((t0@@52 T@U) (t1@@28 T@U) (t2@@5 T@U) (h0@@15 T@U) (h1@@15 T@U) (f@@32 T@U) (bx0@@19 T@U) (bx1@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@52) TyType) (= (type t1@@28) TyType)) (= (type t2@@5) TyType)) (= (type h0@@15) (MapType0Type refType MapType1Type))) (= (type h1@@15) (MapType0Type refType MapType1Type))) (= (type f@@32) HandleTypeType)) (= (type bx0@@19) BoxType)) (= (type bx1@@5) BoxType)) (and (and (and ($HeapSucc h0@@15 h1@@15) (and ($IsGoodHeap h0@@15) ($IsGoodHeap h1@@15))) (and (and ($IsBox bx0@@19 t0@@52) ($IsBox bx1@@5 t1@@28)) ($Is f@@32 (Tclass._System.___hFunc2 t0@@52 t1@@28 t2@@5)))) (forall ((o@@59 T@U) (fld@@14 T@U) ) (! (let ((a@@97 (FieldTypeInv0 (type fld@@14)))) (=> (and (and (= (type o@@59) refType) (= (type fld@@14) (FieldType a@@97))) (and (not (= o@@59 null)) (U_2_bool (MapType0Select (Reads2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5) ($Box o@@59))))) (= (MapType1Select (MapType0Select h0@@15 o@@59) fld@@14) (MapType1Select (MapType0Select h1@@15 o@@59) fld@@14)))) :qid |unknown.0:0| :skolemid |818| :no-pattern (type o@@59) :no-pattern (type fld@@14) :no-pattern (U_2_int o@@59) :no-pattern (U_2_bool o@@59) :no-pattern (U_2_int fld@@14) :no-pattern (U_2_bool fld@@14) )))) (= (Requires2 t0@@52 t1@@28 t2@@5 h0@@15 f@@32 bx0@@19 bx1@@5) (Requires2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5))) :qid |unknown.0:0| :skolemid |819| :pattern ( ($HeapSucc h0@@15 h1@@15) (Requires2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5)) )))
(assert (forall ((t0@@53 T@U) (t1@@29 T@U) (t2@@6 T@U) (h0@@16 T@U) (h1@@16 T@U) (f@@33 T@U) (bx0@@20 T@U) (bx1@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@53) TyType) (= (type t1@@29) TyType)) (= (type t2@@6) TyType)) (= (type h0@@16) (MapType0Type refType MapType1Type))) (= (type h1@@16) (MapType0Type refType MapType1Type))) (= (type f@@33) HandleTypeType)) (= (type bx0@@20) BoxType)) (= (type bx1@@6) BoxType)) (and (and (and ($HeapSucc h0@@16 h1@@16) (and ($IsGoodHeap h0@@16) ($IsGoodHeap h1@@16))) (and (and ($IsBox bx0@@20 t0@@53) ($IsBox bx1@@6 t1@@29)) ($Is f@@33 (Tclass._System.___hFunc2 t0@@53 t1@@29 t2@@6)))) (forall ((o@@60 T@U) (fld@@15 T@U) ) (! (let ((a@@98 (FieldTypeInv0 (type fld@@15)))) (=> (and (and (= (type o@@60) refType) (= (type fld@@15) (FieldType a@@98))) (and (not (= o@@60 null)) (U_2_bool (MapType0Select (Reads2 t0@@53 t1@@29 t2@@6 h0@@16 f@@33 bx0@@20 bx1@@6) ($Box o@@60))))) (= (MapType1Select (MapType0Select h0@@16 o@@60) fld@@15) (MapType1Select (MapType0Select h1@@16 o@@60) fld@@15)))) :qid |unknown.0:0| :skolemid |820| :no-pattern (type o@@60) :no-pattern (type fld@@15) :no-pattern (U_2_int o@@60) :no-pattern (U_2_bool o@@60) :no-pattern (U_2_int fld@@15) :no-pattern (U_2_bool fld@@15) )))) (= (Apply2 t0@@53 t1@@29 t2@@6 h0@@16 f@@33 bx0@@20 bx1@@6) (Apply2 t0@@53 t1@@29 t2@@6 h1@@16 f@@33 bx0@@20 bx1@@6))) :qid |unknown.0:0| :skolemid |821| :pattern ( ($HeapSucc h0@@16 h1@@16) (Apply2 t0@@53 t1@@29 t2@@6 h1@@16 f@@33 bx0@@20 bx1@@6)) )))
(assert (forall ((t0@@54 T@U) (t1@@30 T@U) (t2@@7 T@U) (h0@@17 T@U) (h1@@17 T@U) (f@@34 T@U) (bx0@@21 T@U) (bx1@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@54) TyType) (= (type t1@@30) TyType)) (= (type t2@@7) TyType)) (= (type h0@@17) (MapType0Type refType MapType1Type))) (= (type h1@@17) (MapType0Type refType MapType1Type))) (= (type f@@34) HandleTypeType)) (= (type bx0@@21) BoxType)) (= (type bx1@@7) BoxType)) (and (and (and ($HeapSucc h0@@17 h1@@17) (and ($IsGoodHeap h0@@17) ($IsGoodHeap h1@@17))) (and (and ($IsBox bx0@@21 t0@@54) ($IsBox bx1@@7 t1@@30)) ($Is f@@34 (Tclass._System.___hFunc2 t0@@54 t1@@30 t2@@7)))) (forall ((o@@61 T@U) (fld@@16 T@U) ) (! (let ((a@@99 (FieldTypeInv0 (type fld@@16)))) (=> (and (and (= (type o@@61) refType) (= (type fld@@16) (FieldType a@@99))) (and (not (= o@@61 null)) (U_2_bool (MapType0Select (Reads2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7) ($Box o@@61))))) (= (MapType1Select (MapType0Select h0@@17 o@@61) fld@@16) (MapType1Select (MapType0Select h1@@17 o@@61) fld@@16)))) :qid |unknown.0:0| :skolemid |822| :no-pattern (type o@@61) :no-pattern (type fld@@16) :no-pattern (U_2_int o@@61) :no-pattern (U_2_bool o@@61) :no-pattern (U_2_int fld@@16) :no-pattern (U_2_bool fld@@16) )))) (= (Apply2 t0@@54 t1@@30 t2@@7 h0@@17 f@@34 bx0@@21 bx1@@7) (Apply2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7))) :qid |unknown.0:0| :skolemid |823| :pattern ( ($HeapSucc h0@@17 h1@@17) (Apply2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7)) )))
(assert (forall ((t0@@55 T@U) (t1@@31 T@U) (t2@@8 T@U) (heap@@14 T@U) (f@@35 T@U) (bx0@@22 T@U) (bx1@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@55) TyType) (= (type t1@@31) TyType)) (= (type t2@@8) TyType)) (= (type heap@@14) (MapType0Type refType MapType1Type))) (= (type f@@35) HandleTypeType)) (= (type bx0@@22) BoxType)) (= (type bx1@@8) BoxType)) (and ($IsGoodHeap heap@@14) (and (and ($IsBox bx0@@22 t0@@55) ($IsBox bx1@@8 t1@@31)) ($Is f@@35 (Tclass._System.___hFunc2 t0@@55 t1@@31 t2@@8))))) (= (|Set#Equal| (Reads2 t0@@55 t1@@31 t2@@8 $OneHeap f@@35 bx0@@22 bx1@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads2 t0@@55 t1@@31 t2@@8 heap@@14 f@@35 bx0@@22 bx1@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |824| :pattern ( (Reads2 t0@@55 t1@@31 t2@@8 $OneHeap f@@35 bx0@@22 bx1@@8) ($IsGoodHeap heap@@14)) :pattern ( (Reads2 t0@@55 t1@@31 t2@@8 heap@@14 f@@35 bx0@@22 bx1@@8)) )))
(assert (forall ((t0@@56 T@U) (t1@@32 T@U) (t2@@9 T@U) (heap@@15 T@U) (f@@36 T@U) (bx0@@23 T@U) (bx1@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@56) TyType) (= (type t1@@32) TyType)) (= (type t2@@9) TyType)) (= (type heap@@15) (MapType0Type refType MapType1Type))) (= (type f@@36) HandleTypeType)) (= (type bx0@@23) BoxType)) (= (type bx1@@9) BoxType)) (and (and ($IsGoodHeap heap@@15) (and (and ($IsBox bx0@@23 t0@@56) ($IsBox bx1@@9 t1@@32)) ($Is f@@36 (Tclass._System.___hFunc2 t0@@56 t1@@32 t2@@9)))) (|Set#Equal| (Reads2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) (|Set#Empty| BoxType)))) (= (Requires2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) (Requires2 t0@@56 t1@@32 t2@@9 heap@@15 f@@36 bx0@@23 bx1@@9))) :qid |unknown.0:0| :skolemid |825| :pattern ( (Requires2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) ($IsGoodHeap heap@@15)) :pattern ( (Requires2 t0@@56 t1@@32 t2@@9 heap@@15 f@@36 bx0@@23 bx1@@9)) )))
(assert (forall ((f@@37 T@U) (t0@@57 T@U) (t1@@33 T@U) (t2@@10 T@U) ) (!  (=> (and (and (and (= (type f@@37) HandleTypeType) (= (type t0@@57) TyType)) (= (type t1@@33) TyType)) (= (type t2@@10) TyType)) (= ($Is f@@37 (Tclass._System.___hFunc2 t0@@57 t1@@33 t2@@10)) (forall ((h@@36 T@U) (bx0@@24 T@U) (bx1@@10 T@U) ) (!  (=> (and (and (and (= (type h@@36) (MapType0Type refType MapType1Type)) (= (type bx0@@24) BoxType)) (= (type bx1@@10) BoxType)) (and (and ($IsGoodHeap h@@36) (and ($IsBox bx0@@24 t0@@57) ($IsBox bx1@@10 t1@@33))) (Requires2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10))) ($IsBox (Apply2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10) t2@@10)) :qid |DafnyPreludebpl.545:12| :skolemid |826| :pattern ( (Apply2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10)) )))) :qid |unknown.0:0| :skolemid |827| :pattern ( ($Is f@@37 (Tclass._System.___hFunc2 t0@@57 t1@@33 t2@@10))) )))
(assert (forall ((f@@38 T@U) (t0@@58 T@U) (t1@@34 T@U) (t2@@11 T@U) (u0@@1 T@U) (u1@@0 T@U) (u2 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@38) HandleTypeType) (= (type t0@@58) TyType)) (= (type t1@@34) TyType)) (= (type t2@@11) TyType)) (= (type u0@@1) TyType)) (= (type u1@@0) TyType)) (= (type u2) TyType)) (and (and (and ($Is f@@38 (Tclass._System.___hFunc2 t0@@58 t1@@34 t2@@11)) (forall ((bx@@45 T@U) ) (!  (=> (and (= (type bx@@45) BoxType) ($IsBox bx@@45 u0@@1)) ($IsBox bx@@45 t0@@58)) :qid |unknown.0:0| :skolemid |828| :pattern ( ($IsBox bx@@45 u0@@1)) :pattern ( ($IsBox bx@@45 t0@@58)) ))) (forall ((bx@@46 T@U) ) (!  (=> (and (= (type bx@@46) BoxType) ($IsBox bx@@46 u1@@0)) ($IsBox bx@@46 t1@@34)) :qid |unknown.0:0| :skolemid |829| :pattern ( ($IsBox bx@@46 u1@@0)) :pattern ( ($IsBox bx@@46 t1@@34)) ))) (forall ((bx@@47 T@U) ) (!  (=> (and (= (type bx@@47) BoxType) ($IsBox bx@@47 t2@@11)) ($IsBox bx@@47 u2)) :qid |unknown.0:0| :skolemid |830| :pattern ( ($IsBox bx@@47 t2@@11)) :pattern ( ($IsBox bx@@47 u2)) )))) ($Is f@@38 (Tclass._System.___hFunc2 u0@@1 u1@@0 u2))) :qid |unknown.0:0| :skolemid |831| :pattern ( ($Is f@@38 (Tclass._System.___hFunc2 t0@@58 t1@@34 t2@@11)) ($Is f@@38 (Tclass._System.___hFunc2 u0@@1 u1@@0 u2))) )))
(assert (forall ((f@@39 T@U) (t0@@59 T@U) (t1@@35 T@U) (t2@@12 T@U) (h@@37 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@39) HandleTypeType) (= (type t0@@59) TyType)) (= (type t1@@35) TyType)) (= (type t2@@12) TyType)) (= (type h@@37) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@37)) (= ($IsAlloc f@@39 (Tclass._System.___hFunc2 t0@@59 t1@@35 t2@@12) h@@37) (forall ((bx0@@25 T@U) (bx1@@11 T@U) ) (!  (=> (and (= (type bx0@@25) BoxType) (= (type bx1@@11) BoxType)) (=> (and (and (and ($IsBox bx0@@25 t0@@59) ($IsAllocBox bx0@@25 t0@@59 h@@37)) (and ($IsBox bx1@@11 t1@@35) ($IsAllocBox bx1@@11 t1@@35 h@@37))) (Requires2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11)) (forall ((r@@17 T@U) ) (!  (=> (= (type r@@17) refType) (=> (and (not (= r@@17 null)) (U_2_bool (MapType0Select (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11) ($Box r@@17)))) (U_2_bool (MapType1Select (MapType0Select h@@37 r@@17) alloc)))) :qid |unknown.0:0| :skolemid |832| :pattern ( (MapType0Select (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11) ($Box r@@17))) )))) :qid |unknown.0:0| :skolemid |833| :pattern ( (Apply2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11)) :pattern ( (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11)) )))) :qid |unknown.0:0| :skolemid |834| :pattern ( ($IsAlloc f@@39 (Tclass._System.___hFunc2 t0@@59 t1@@35 t2@@12) h@@37)) )))
(assert (forall ((f@@40 T@U) (t0@@60 T@U) (t1@@36 T@U) (t2@@13 T@U) (h@@38 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@40) HandleTypeType) (= (type t0@@60) TyType)) (= (type t1@@36) TyType)) (= (type t2@@13) TyType)) (= (type h@@38) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@38) ($IsAlloc f@@40 (Tclass._System.___hFunc2 t0@@60 t1@@36 t2@@13) h@@38))) (forall ((bx0@@26 T@U) (bx1@@12 T@U) ) (!  (=> (and (= (type bx0@@26) BoxType) (= (type bx1@@12) BoxType)) (=> (and (and ($IsAllocBox bx0@@26 t0@@60 h@@38) ($IsAllocBox bx1@@12 t1@@36 h@@38)) (Requires2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12)) ($IsAllocBox (Apply2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12) t2@@13 h@@38))) :qid |unknown.0:0| :skolemid |835| :pattern ( (Apply2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12)) ))) :qid |unknown.0:0| :skolemid |836| :pattern ( ($IsAlloc f@@40 (Tclass._System.___hFunc2 t0@@60 t1@@36 t2@@13) h@@38)) )))
(assert (forall ((arg0@@159 T@U) (arg1@@78 T@U) (arg2@@30 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2 arg0@@159 arg1@@78 arg2@@30)) TyType) :qid |funType:Tclass._System.___hPartialFunc2| :pattern ( (Tclass._System.___hPartialFunc2 arg0@@159 arg1@@78 arg2@@30)) )))
(assert (forall ((|#$T0@@20| T@U) (|#$T1@@4| T@U) (|#$R@@33| T@U) ) (!  (=> (and (and (= (type |#$T0@@20|) TyType) (= (type |#$T1@@4|) TyType)) (= (type |#$R@@33|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) Tagclass._System.___hPartialFunc2) (= (TagFamily (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) |tytagFamily$_#PartialFunc2|))) :qid |unknown.0:0| :skolemid |837| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) )))
(assert (forall ((arg0@@160 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_0 arg0@@160)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_0| :pattern ( (Tclass._System.___hPartialFunc2_0 arg0@@160)) )))
(assert (forall ((|#$T0@@21| T@U) (|#$T1@@5| T@U) (|#$R@@34| T@U) ) (!  (=> (and (and (= (type |#$T0@@21|) TyType) (= (type |#$T1@@5|) TyType)) (= (type |#$R@@34|) TyType)) (= (Tclass._System.___hPartialFunc2_0 (Tclass._System.___hPartialFunc2 |#$T0@@21| |#$T1@@5| |#$R@@34|)) |#$T0@@21|)) :qid |unknown.0:0| :skolemid |838| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@21| |#$T1@@5| |#$R@@34|)) )))
(assert (forall ((arg0@@161 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_1 arg0@@161)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_1| :pattern ( (Tclass._System.___hPartialFunc2_1 arg0@@161)) )))
(assert (forall ((|#$T0@@22| T@U) (|#$T1@@6| T@U) (|#$R@@35| T@U) ) (!  (=> (and (and (= (type |#$T0@@22|) TyType) (= (type |#$T1@@6|) TyType)) (= (type |#$R@@35|) TyType)) (= (Tclass._System.___hPartialFunc2_1 (Tclass._System.___hPartialFunc2 |#$T0@@22| |#$T1@@6| |#$R@@35|)) |#$T1@@6|)) :qid |unknown.0:0| :skolemid |839| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@22| |#$T1@@6| |#$R@@35|)) )))
(assert (forall ((arg0@@162 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_2 arg0@@162)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_2| :pattern ( (Tclass._System.___hPartialFunc2_2 arg0@@162)) )))
(assert (forall ((|#$T0@@23| T@U) (|#$T1@@7| T@U) (|#$R@@36| T@U) ) (!  (=> (and (and (= (type |#$T0@@23|) TyType) (= (type |#$T1@@7|) TyType)) (= (type |#$R@@36|) TyType)) (= (Tclass._System.___hPartialFunc2_2 (Tclass._System.___hPartialFunc2 |#$T0@@23| |#$T1@@7| |#$R@@36|)) |#$R@@36|)) :qid |unknown.0:0| :skolemid |840| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@23| |#$T1@@7| |#$R@@36|)) )))
(assert (forall ((|#$T0@@24| T@U) (|#$T1@@8| T@U) (|#$R@@37| T@U) (bx@@48 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@24|) TyType) (= (type |#$T1@@8|) TyType)) (= (type |#$R@@37|) TyType)) (= (type bx@@48) BoxType)) ($IsBox bx@@48 (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|))) (and (= ($Box ($Unbox HandleTypeType bx@@48)) bx@@48) ($Is ($Unbox HandleTypeType bx@@48) (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|)))) :qid |unknown.0:0| :skolemid |841| :pattern ( ($IsBox bx@@48 (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|))) )))
(assert (forall ((|#$T0@@25| T@U) (|#$T1@@9| T@U) (|#$R@@38| T@U) (|f#0@@7| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@25|) TyType) (= (type |#$T1@@9|) TyType)) (= (type |#$R@@38|) TyType)) (= (type |f#0@@7|) HandleTypeType)) (= ($Is |f#0@@7| (Tclass._System.___hPartialFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|))  (and ($Is |f#0@@7| (Tclass._System.___hFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|)) (forall ((|x0#0@@1| T@U) (|x1#0| T@U) ) (!  (=> (and (and (= (type |x0#0@@1|) BoxType) (= (type |x1#0|) BoxType)) (and ($IsBox |x0#0@@1| |#$T0@@25|) ($IsBox |x1#0| |#$T1@@9|))) (|Set#Equal| (Reads2 |#$T0@@25| |#$T1@@9| |#$R@@38| $OneHeap |f#0@@7| |x0#0@@1| |x1#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |842| :no-pattern (type |x0#0@@1|) :no-pattern (type |x1#0|) :no-pattern (U_2_int |x0#0@@1|) :no-pattern (U_2_bool |x0#0@@1|) :no-pattern (U_2_int |x1#0|) :no-pattern (U_2_bool |x1#0|) ))))) :qid |unknown.0:0| :skolemid |843| :pattern ( ($Is |f#0@@7| (Tclass._System.___hPartialFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|))) )))
(assert (forall ((|#$T0@@26| T@U) (|#$T1@@10| T@U) (|#$R@@39| T@U) (|f#0@@8| T@U) ($h@@12 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@26|) TyType) (= (type |#$T1@@10|) TyType)) (= (type |#$R@@39|) TyType)) (= (type |f#0@@8|) HandleTypeType)) (= (type $h@@12) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12) ($IsAlloc |f#0@@8| (Tclass._System.___hFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12))) :qid |unknown.0:0| :skolemid |844| :pattern ( ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12)) )))
(assert (forall ((arg0@@163 T@U) (arg1@@79 T@U) (arg2@@31 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2 arg0@@163 arg1@@79 arg2@@31)) TyType) :qid |funType:Tclass._System.___hTotalFunc2| :pattern ( (Tclass._System.___hTotalFunc2 arg0@@163 arg1@@79 arg2@@31)) )))
(assert (forall ((|#$T0@@27| T@U) (|#$T1@@11| T@U) (|#$R@@40| T@U) ) (!  (=> (and (and (= (type |#$T0@@27|) TyType) (= (type |#$T1@@11|) TyType)) (= (type |#$R@@40|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) Tagclass._System.___hTotalFunc2) (= (TagFamily (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) |tytagFamily$_#TotalFunc2|))) :qid |unknown.0:0| :skolemid |845| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) )))
(assert (forall ((arg0@@164 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_0 arg0@@164)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_0| :pattern ( (Tclass._System.___hTotalFunc2_0 arg0@@164)) )))
(assert (forall ((|#$T0@@28| T@U) (|#$T1@@12| T@U) (|#$R@@41| T@U) ) (!  (=> (and (and (= (type |#$T0@@28|) TyType) (= (type |#$T1@@12|) TyType)) (= (type |#$R@@41|) TyType)) (= (Tclass._System.___hTotalFunc2_0 (Tclass._System.___hTotalFunc2 |#$T0@@28| |#$T1@@12| |#$R@@41|)) |#$T0@@28|)) :qid |unknown.0:0| :skolemid |846| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@28| |#$T1@@12| |#$R@@41|)) )))
(assert (forall ((arg0@@165 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_1 arg0@@165)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_1| :pattern ( (Tclass._System.___hTotalFunc2_1 arg0@@165)) )))
(assert (forall ((|#$T0@@29| T@U) (|#$T1@@13| T@U) (|#$R@@42| T@U) ) (!  (=> (and (and (= (type |#$T0@@29|) TyType) (= (type |#$T1@@13|) TyType)) (= (type |#$R@@42|) TyType)) (= (Tclass._System.___hTotalFunc2_1 (Tclass._System.___hTotalFunc2 |#$T0@@29| |#$T1@@13| |#$R@@42|)) |#$T1@@13|)) :qid |unknown.0:0| :skolemid |847| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@29| |#$T1@@13| |#$R@@42|)) )))
(assert (forall ((arg0@@166 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_2 arg0@@166)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_2| :pattern ( (Tclass._System.___hTotalFunc2_2 arg0@@166)) )))
(assert (forall ((|#$T0@@30| T@U) (|#$T1@@14| T@U) (|#$R@@43| T@U) ) (!  (=> (and (and (= (type |#$T0@@30|) TyType) (= (type |#$T1@@14|) TyType)) (= (type |#$R@@43|) TyType)) (= (Tclass._System.___hTotalFunc2_2 (Tclass._System.___hTotalFunc2 |#$T0@@30| |#$T1@@14| |#$R@@43|)) |#$R@@43|)) :qid |unknown.0:0| :skolemid |848| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@30| |#$T1@@14| |#$R@@43|)) )))
(assert (forall ((|#$T0@@31| T@U) (|#$T1@@15| T@U) (|#$R@@44| T@U) (bx@@49 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@31|) TyType) (= (type |#$T1@@15|) TyType)) (= (type |#$R@@44|) TyType)) (= (type bx@@49) BoxType)) ($IsBox bx@@49 (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|))) (and (= ($Box ($Unbox HandleTypeType bx@@49)) bx@@49) ($Is ($Unbox HandleTypeType bx@@49) (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|)))) :qid |unknown.0:0| :skolemid |849| :pattern ( ($IsBox bx@@49 (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|))) )))
(assert (forall ((|#$T0@@32| T@U) (|#$T1@@16| T@U) (|#$R@@45| T@U) (|f#0@@9| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@32|) TyType) (= (type |#$T1@@16|) TyType)) (= (type |#$R@@45|) TyType)) (= (type |f#0@@9|) HandleTypeType)) (= ($Is |f#0@@9| (Tclass._System.___hTotalFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|))  (and ($Is |f#0@@9| (Tclass._System.___hPartialFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|)) (forall ((|x0#0@@2| T@U) (|x1#0@@0| T@U) ) (!  (=> (and (and (= (type |x0#0@@2|) BoxType) (= (type |x1#0@@0|) BoxType)) (and ($IsBox |x0#0@@2| |#$T0@@32|) ($IsBox |x1#0@@0| |#$T1@@16|))) (Requires2 |#$T0@@32| |#$T1@@16| |#$R@@45| $OneHeap |f#0@@9| |x0#0@@2| |x1#0@@0|)) :qid |unknown.0:0| :skolemid |850| :no-pattern (type |x0#0@@2|) :no-pattern (type |x1#0@@0|) :no-pattern (U_2_int |x0#0@@2|) :no-pattern (U_2_bool |x0#0@@2|) :no-pattern (U_2_int |x1#0@@0|) :no-pattern (U_2_bool |x1#0@@0|) ))))) :qid |unknown.0:0| :skolemid |851| :pattern ( ($Is |f#0@@9| (Tclass._System.___hTotalFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|))) )))
(assert (forall ((|#$T0@@33| T@U) (|#$T1@@17| T@U) (|#$R@@46| T@U) (|f#0@@10| T@U) ($h@@13 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@33|) TyType) (= (type |#$T1@@17|) TyType)) (= (type |#$R@@46|) TyType)) (= (type |f#0@@10|) HandleTypeType)) (= (type $h@@13) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13) ($IsAlloc |f#0@@10| (Tclass._System.___hPartialFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13))) :qid |unknown.0:0| :skolemid |852| :pattern ( ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13)) )))
(assert (forall ((arg0@@167 T@U) (arg1@@80 T@U) (arg2@@32 T@U) (arg3@@12 T@U) (arg4@@4 T@U) ) (! (= (type (Tclass._System.___hFunc4 arg0@@167 arg1@@80 arg2@@32 arg3@@12 arg4@@4)) TyType) :qid |funType:Tclass._System.___hFunc4| :pattern ( (Tclass._System.___hFunc4 arg0@@167 arg1@@80 arg2@@32 arg3@@12 arg4@@4)) )))
(assert (forall ((|#$T0@@34| T@U) (|#$T1@@18| T@U) (|#$T2| T@U) (|#$T3| T@U) (|#$R@@47| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@34|) TyType) (= (type |#$T1@@18|) TyType)) (= (type |#$T2|) TyType)) (= (type |#$T3|) TyType)) (= (type |#$R@@47|) TyType)) (and (= (Tag (Tclass._System.___hFunc4 |#$T0@@34| |#$T1@@18| |#$T2| |#$T3| |#$R@@47|)) Tagclass._System.___hFunc4) (= (TagFamily (Tclass._System.___hFunc4 |#$T0@@34| |#$T1@@18| |#$T2| |#$T3| |#$R@@47|)) |tytagFamily$_#Func4|))) :qid |unknown.0:0| :skolemid |853| :pattern ( (Tclass._System.___hFunc4 |#$T0@@34| |#$T1@@18| |#$T2| |#$T3| |#$R@@47|)) )))
(assert (forall ((arg0@@168 T@U) ) (! (= (type (Tclass._System.___hFunc4_0 arg0@@168)) TyType) :qid |funType:Tclass._System.___hFunc4_0| :pattern ( (Tclass._System.___hFunc4_0 arg0@@168)) )))
(assert (forall ((|#$T0@@35| T@U) (|#$T1@@19| T@U) (|#$T2@@0| T@U) (|#$T3@@0| T@U) (|#$R@@48| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@35|) TyType) (= (type |#$T1@@19|) TyType)) (= (type |#$T2@@0|) TyType)) (= (type |#$T3@@0|) TyType)) (= (type |#$R@@48|) TyType)) (= (Tclass._System.___hFunc4_0 (Tclass._System.___hFunc4 |#$T0@@35| |#$T1@@19| |#$T2@@0| |#$T3@@0| |#$R@@48|)) |#$T0@@35|)) :qid |unknown.0:0| :skolemid |854| :pattern ( (Tclass._System.___hFunc4 |#$T0@@35| |#$T1@@19| |#$T2@@0| |#$T3@@0| |#$R@@48|)) )))
(assert (forall ((arg0@@169 T@U) ) (! (= (type (Tclass._System.___hFunc4_1 arg0@@169)) TyType) :qid |funType:Tclass._System.___hFunc4_1| :pattern ( (Tclass._System.___hFunc4_1 arg0@@169)) )))
(assert (forall ((|#$T0@@36| T@U) (|#$T1@@20| T@U) (|#$T2@@1| T@U) (|#$T3@@1| T@U) (|#$R@@49| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@36|) TyType) (= (type |#$T1@@20|) TyType)) (= (type |#$T2@@1|) TyType)) (= (type |#$T3@@1|) TyType)) (= (type |#$R@@49|) TyType)) (= (Tclass._System.___hFunc4_1 (Tclass._System.___hFunc4 |#$T0@@36| |#$T1@@20| |#$T2@@1| |#$T3@@1| |#$R@@49|)) |#$T1@@20|)) :qid |unknown.0:0| :skolemid |855| :pattern ( (Tclass._System.___hFunc4 |#$T0@@36| |#$T1@@20| |#$T2@@1| |#$T3@@1| |#$R@@49|)) )))
(assert (forall ((arg0@@170 T@U) ) (! (= (type (Tclass._System.___hFunc4_2 arg0@@170)) TyType) :qid |funType:Tclass._System.___hFunc4_2| :pattern ( (Tclass._System.___hFunc4_2 arg0@@170)) )))
(assert (forall ((|#$T0@@37| T@U) (|#$T1@@21| T@U) (|#$T2@@2| T@U) (|#$T3@@2| T@U) (|#$R@@50| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@37|) TyType) (= (type |#$T1@@21|) TyType)) (= (type |#$T2@@2|) TyType)) (= (type |#$T3@@2|) TyType)) (= (type |#$R@@50|) TyType)) (= (Tclass._System.___hFunc4_2 (Tclass._System.___hFunc4 |#$T0@@37| |#$T1@@21| |#$T2@@2| |#$T3@@2| |#$R@@50|)) |#$T2@@2|)) :qid |unknown.0:0| :skolemid |856| :pattern ( (Tclass._System.___hFunc4 |#$T0@@37| |#$T1@@21| |#$T2@@2| |#$T3@@2| |#$R@@50|)) )))
(assert (forall ((arg0@@171 T@U) ) (! (= (type (Tclass._System.___hFunc4_3 arg0@@171)) TyType) :qid |funType:Tclass._System.___hFunc4_3| :pattern ( (Tclass._System.___hFunc4_3 arg0@@171)) )))
(assert (forall ((|#$T0@@38| T@U) (|#$T1@@22| T@U) (|#$T2@@3| T@U) (|#$T3@@3| T@U) (|#$R@@51| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@38|) TyType) (= (type |#$T1@@22|) TyType)) (= (type |#$T2@@3|) TyType)) (= (type |#$T3@@3|) TyType)) (= (type |#$R@@51|) TyType)) (= (Tclass._System.___hFunc4_3 (Tclass._System.___hFunc4 |#$T0@@38| |#$T1@@22| |#$T2@@3| |#$T3@@3| |#$R@@51|)) |#$T3@@3|)) :qid |unknown.0:0| :skolemid |857| :pattern ( (Tclass._System.___hFunc4 |#$T0@@38| |#$T1@@22| |#$T2@@3| |#$T3@@3| |#$R@@51|)) )))
(assert (forall ((arg0@@172 T@U) ) (! (= (type (Tclass._System.___hFunc4_4 arg0@@172)) TyType) :qid |funType:Tclass._System.___hFunc4_4| :pattern ( (Tclass._System.___hFunc4_4 arg0@@172)) )))
(assert (forall ((|#$T0@@39| T@U) (|#$T1@@23| T@U) (|#$T2@@4| T@U) (|#$T3@@4| T@U) (|#$R@@52| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@39|) TyType) (= (type |#$T1@@23|) TyType)) (= (type |#$T2@@4|) TyType)) (= (type |#$T3@@4|) TyType)) (= (type |#$R@@52|) TyType)) (= (Tclass._System.___hFunc4_4 (Tclass._System.___hFunc4 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$T3@@4| |#$R@@52|)) |#$R@@52|)) :qid |unknown.0:0| :skolemid |858| :pattern ( (Tclass._System.___hFunc4 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$T3@@4| |#$R@@52|)) )))
(assert (forall ((|#$T0@@40| T@U) (|#$T1@@24| T@U) (|#$T2@@5| T@U) (|#$T3@@5| T@U) (|#$R@@53| T@U) (bx@@50 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@40|) TyType) (= (type |#$T1@@24|) TyType)) (= (type |#$T2@@5|) TyType)) (= (type |#$T3@@5|) TyType)) (= (type |#$R@@53|) TyType)) (= (type bx@@50) BoxType)) ($IsBox bx@@50 (Tclass._System.___hFunc4 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$T3@@5| |#$R@@53|))) (and (= ($Box ($Unbox HandleTypeType bx@@50)) bx@@50) ($Is ($Unbox HandleTypeType bx@@50) (Tclass._System.___hFunc4 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$T3@@5| |#$R@@53|)))) :qid |unknown.0:0| :skolemid |859| :pattern ( ($IsBox bx@@50 (Tclass._System.___hFunc4 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$T3@@5| |#$R@@53|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@173 T@T) (arg1@@81 T@T) (arg2@@33 T@T) (arg3@@13 T@T) (arg4@@5 T@T) (arg5@@1 T@T) ) (! (= (Ctor (MapType4Type arg0@@173 arg1@@81 arg2@@33 arg3@@13 arg4@@5 arg5@@1)) 26) :qid |ctor:MapType4Type| )) (forall ((arg0@@174 T@T) (arg1@@82 T@T) (arg2@@34 T@T) (arg3@@14 T@T) (arg4@@6 T@T) (arg5@@2 T@T) ) (! (= (MapType4TypeInv0 (MapType4Type arg0@@174 arg1@@82 arg2@@34 arg3@@14 arg4@@6 arg5@@2)) arg0@@174) :qid |typeInv:MapType4TypeInv0| :pattern ( (MapType4Type arg0@@174 arg1@@82 arg2@@34 arg3@@14 arg4@@6 arg5@@2)) ))) (forall ((arg0@@175 T@T) (arg1@@83 T@T) (arg2@@35 T@T) (arg3@@15 T@T) (arg4@@7 T@T) (arg5@@3 T@T) ) (! (= (MapType4TypeInv1 (MapType4Type arg0@@175 arg1@@83 arg2@@35 arg3@@15 arg4@@7 arg5@@3)) arg1@@83) :qid |typeInv:MapType4TypeInv1| :pattern ( (MapType4Type arg0@@175 arg1@@83 arg2@@35 arg3@@15 arg4@@7 arg5@@3)) ))) (forall ((arg0@@176 T@T) (arg1@@84 T@T) (arg2@@36 T@T) (arg3@@16 T@T) (arg4@@8 T@T) (arg5@@4 T@T) ) (! (= (MapType4TypeInv2 (MapType4Type arg0@@176 arg1@@84 arg2@@36 arg3@@16 arg4@@8 arg5@@4)) arg2@@36) :qid |typeInv:MapType4TypeInv2| :pattern ( (MapType4Type arg0@@176 arg1@@84 arg2@@36 arg3@@16 arg4@@8 arg5@@4)) ))) (forall ((arg0@@177 T@T) (arg1@@85 T@T) (arg2@@37 T@T) (arg3@@17 T@T) (arg4@@9 T@T) (arg5@@5 T@T) ) (! (= (MapType4TypeInv3 (MapType4Type arg0@@177 arg1@@85 arg2@@37 arg3@@17 arg4@@9 arg5@@5)) arg3@@17) :qid |typeInv:MapType4TypeInv3| :pattern ( (MapType4Type arg0@@177 arg1@@85 arg2@@37 arg3@@17 arg4@@9 arg5@@5)) ))) (forall ((arg0@@178 T@T) (arg1@@86 T@T) (arg2@@38 T@T) (arg3@@18 T@T) (arg4@@10 T@T) (arg5@@6 T@T) ) (! (= (MapType4TypeInv4 (MapType4Type arg0@@178 arg1@@86 arg2@@38 arg3@@18 arg4@@10 arg5@@6)) arg4@@10) :qid |typeInv:MapType4TypeInv4| :pattern ( (MapType4Type arg0@@178 arg1@@86 arg2@@38 arg3@@18 arg4@@10 arg5@@6)) ))) (forall ((arg0@@179 T@T) (arg1@@87 T@T) (arg2@@39 T@T) (arg3@@19 T@T) (arg4@@11 T@T) (arg5@@7 T@T) ) (! (= (MapType4TypeInv5 (MapType4Type arg0@@179 arg1@@87 arg2@@39 arg3@@19 arg4@@11 arg5@@7)) arg5@@7) :qid |typeInv:MapType4TypeInv5| :pattern ( (MapType4Type arg0@@179 arg1@@87 arg2@@39 arg3@@19 arg4@@11 arg5@@7)) ))) (forall ((arg0@@180 T@U) (arg1@@88 T@U) (arg2@@40 T@U) (arg3@@20 T@U) (arg4@@12 T@U) (arg5@@8 T@U) ) (! (let ((aVar5 (MapType4TypeInv5 (type arg0@@180)))) (= (type (MapType4Select arg0@@180 arg1@@88 arg2@@40 arg3@@20 arg4@@12 arg5@@8)) aVar5)) :qid |funType:MapType4Select| :pattern ( (MapType4Select arg0@@180 arg1@@88 arg2@@40 arg3@@20 arg4@@12 arg5@@8)) ))) (forall ((arg0@@181 T@U) (arg1@@89 T@U) (arg2@@41 T@U) (arg3@@21 T@U) (arg4@@13 T@U) (arg5@@9 T@U) (arg6@@1 T@U) ) (! (let ((aVar5@@0 (type arg6@@1))) (let ((aVar4 (type arg5@@9))) (let ((aVar3@@2 (type arg4@@13))) (let ((aVar2@@3 (type arg3@@21))) (let ((aVar1@@4 (type arg2@@41))) (let ((aVar0@@2 (type arg1@@89))) (= (type (MapType4Store arg0@@181 arg1@@89 arg2@@41 arg3@@21 arg4@@13 arg5@@9 arg6@@1)) (MapType4Type aVar0@@2 aVar1@@4 aVar2@@3 aVar3@@2 aVar4 aVar5@@0)))))))) :qid |funType:MapType4Store| :pattern ( (MapType4Store arg0@@181 arg1@@89 arg2@@41 arg3@@21 arg4@@13 arg5@@9 arg6@@1)) ))) (forall ((m@@54 T@U) (x0@@14 T@U) (x1@@8 T@U) (x2@@4 T@U) (x3 T@U) (x4 T@U) (val@@15 T@U) ) (! (let ((aVar5@@1 (MapType4TypeInv5 (type m@@54)))) (=> (= (type val@@15) aVar5@@1) (= (MapType4Select (MapType4Store m@@54 x0@@14 x1@@8 x2@@4 x3 x4 val@@15) x0@@14 x1@@8 x2@@4 x3 x4) val@@15))) :qid |mapAx0:MapType4Select| :weight 0 ))) (and (and (and (and (and (forall ((val@@16 T@U) (m@@55 T@U) (x0@@15 T@U) (x1@@9 T@U) (x2@@5 T@U) (x3@@0 T@U) (x4@@0 T@U) (y0@@10 T@U) (y1@@6 T@U) (y2@@3 T@U) (y3 T@U) (y4 T@U) ) (!  (or (= x0@@15 y0@@10) (= (MapType4Select (MapType4Store m@@55 x0@@15 x1@@9 x2@@5 x3@@0 x4@@0 val@@16) y0@@10 y1@@6 y2@@3 y3 y4) (MapType4Select m@@55 y0@@10 y1@@6 y2@@3 y3 y4))) :qid |mapAx1:MapType4Select:0| :weight 0 )) (forall ((val@@17 T@U) (m@@56 T@U) (x0@@16 T@U) (x1@@10 T@U) (x2@@6 T@U) (x3@@1 T@U) (x4@@1 T@U) (y0@@11 T@U) (y1@@7 T@U) (y2@@4 T@U) (y3@@0 T@U) (y4@@0 T@U) ) (!  (or (= x1@@10 y1@@7) (= (MapType4Select (MapType4Store m@@56 x0@@16 x1@@10 x2@@6 x3@@1 x4@@1 val@@17) y0@@11 y1@@7 y2@@4 y3@@0 y4@@0) (MapType4Select m@@56 y0@@11 y1@@7 y2@@4 y3@@0 y4@@0))) :qid |mapAx1:MapType4Select:1| :weight 0 ))) (forall ((val@@18 T@U) (m@@57 T@U) (x0@@17 T@U) (x1@@11 T@U) (x2@@7 T@U) (x3@@2 T@U) (x4@@2 T@U) (y0@@12 T@U) (y1@@8 T@U) (y2@@5 T@U) (y3@@1 T@U) (y4@@1 T@U) ) (!  (or (= x2@@7 y2@@5) (= (MapType4Select (MapType4Store m@@57 x0@@17 x1@@11 x2@@7 x3@@2 x4@@2 val@@18) y0@@12 y1@@8 y2@@5 y3@@1 y4@@1) (MapType4Select m@@57 y0@@12 y1@@8 y2@@5 y3@@1 y4@@1))) :qid |mapAx1:MapType4Select:2| :weight 0 ))) (forall ((val@@19 T@U) (m@@58 T@U) (x0@@18 T@U) (x1@@12 T@U) (x2@@8 T@U) (x3@@3 T@U) (x4@@3 T@U) (y0@@13 T@U) (y1@@9 T@U) (y2@@6 T@U) (y3@@2 T@U) (y4@@2 T@U) ) (!  (or (= x3@@3 y3@@2) (= (MapType4Select (MapType4Store m@@58 x0@@18 x1@@12 x2@@8 x3@@3 x4@@3 val@@19) y0@@13 y1@@9 y2@@6 y3@@2 y4@@2) (MapType4Select m@@58 y0@@13 y1@@9 y2@@6 y3@@2 y4@@2))) :qid |mapAx1:MapType4Select:3| :weight 0 ))) (forall ((val@@20 T@U) (m@@59 T@U) (x0@@19 T@U) (x1@@13 T@U) (x2@@9 T@U) (x3@@4 T@U) (x4@@4 T@U) (y0@@14 T@U) (y1@@10 T@U) (y2@@7 T@U) (y3@@3 T@U) (y4@@3 T@U) ) (!  (or (= x4@@4 y4@@3) (= (MapType4Select (MapType4Store m@@59 x0@@19 x1@@13 x2@@9 x3@@4 x4@@4 val@@20) y0@@14 y1@@10 y2@@7 y3@@3 y4@@3) (MapType4Select m@@59 y0@@14 y1@@10 y2@@7 y3@@3 y4@@3))) :qid |mapAx1:MapType4Select:4| :weight 0 ))) (forall ((val@@21 T@U) (m@@60 T@U) (x0@@20 T@U) (x1@@14 T@U) (x2@@10 T@U) (x3@@5 T@U) (x4@@5 T@U) (y0@@15 T@U) (y1@@11 T@U) (y2@@8 T@U) (y3@@4 T@U) (y4@@4 T@U) ) (!  (or true (= (MapType4Select (MapType4Store m@@60 x0@@20 x1@@14 x2@@10 x3@@5 x4@@5 val@@21) y0@@15 y1@@11 y2@@8 y3@@4 y4@@4) (MapType4Select m@@60 y0@@15 y1@@11 y2@@8 y3@@4 y4@@4))) :qid |mapAx2:MapType4Select| :weight 0 )))) (forall ((arg0@@182 T@U) (arg1@@90 T@U) (arg2@@42 T@U) (arg3@@22 T@U) (arg4@@14 T@U) (arg5@@10 T@U) (arg6@@2 T@U) (arg7 T@U) (arg8 T@U) (arg9 T@U) (arg10 T@U) ) (! (= (type (Apply4 arg0@@182 arg1@@90 arg2@@42 arg3@@22 arg4@@14 arg5@@10 arg6@@2 arg7 arg8 arg9 arg10)) BoxType) :qid |funType:Apply4| :pattern ( (Apply4 arg0@@182 arg1@@90 arg2@@42 arg3@@22 arg4@@14 arg5@@10 arg6@@2 arg7 arg8 arg9 arg10)) ))) (forall ((arg0@@183 T@U) (arg1@@91 T@U) (arg2@@43 T@U) ) (! (= (type (Handle4 arg0@@183 arg1@@91 arg2@@43)) HandleTypeType) :qid |funType:Handle4| :pattern ( (Handle4 arg0@@183 arg1@@91 arg2@@43)) ))))
(assert (forall ((t0@@61 T@U) (t1@@37 T@U) (t2@@14 T@U) (t3 T@U) (t4 T@U) (heap@@16 T@U) (h@@39 T@U) (r@@18 T@U) (rd@@8 T@U) (bx0@@27 T@U) (bx1@@13 T@U) (bx2 T@U) (bx3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@61) TyType) (= (type t1@@37) TyType)) (= (type t2@@14) TyType)) (= (type t3) TyType)) (= (type t4) TyType)) (= (type heap@@16) (MapType0Type refType MapType1Type))) (= (type h@@39) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@18) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@8) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@27) BoxType)) (= (type bx1@@13) BoxType)) (= (type bx2) BoxType)) (= (type bx3) BoxType)) (= (Apply4 t0@@61 t1@@37 t2@@14 t3 t4 heap@@16 (Handle4 h@@39 r@@18 rd@@8) bx0@@27 bx1@@13 bx2 bx3) (MapType4Select h@@39 heap@@16 bx0@@27 bx1@@13 bx2 bx3))) :qid |unknown.0:0| :skolemid |860| :pattern ( (Apply4 t0@@61 t1@@37 t2@@14 t3 t4 heap@@16 (Handle4 h@@39 r@@18 rd@@8) bx0@@27 bx1@@13 bx2 bx3)) )))
(assert (forall ((t0@@62 T@U) (t1@@38 T@U) (t2@@15 T@U) (t3@@0 T@U) (t4@@0 T@U) (heap@@17 T@U) (h@@40 T@U) (r@@19 T@U) (rd@@9 T@U) (bx0@@28 T@U) (bx1@@14 T@U) (bx2@@0 T@U) (bx3@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@62) TyType) (= (type t1@@38) TyType)) (= (type t2@@15) TyType)) (= (type t3@@0) TyType)) (= (type t4@@0) TyType)) (= (type heap@@17) (MapType0Type refType MapType1Type))) (= (type h@@40) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@19) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@9) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@28) BoxType)) (= (type bx1@@14) BoxType)) (= (type bx2@@0) BoxType)) (= (type bx3@@0) BoxType)) (U_2_bool (MapType4Select r@@19 heap@@17 bx0@@28 bx1@@14 bx2@@0 bx3@@0))) (Requires4 t0@@62 t1@@38 t2@@15 t3@@0 t4@@0 heap@@17 (Handle4 h@@40 r@@19 rd@@9) bx0@@28 bx1@@14 bx2@@0 bx3@@0)) :qid |unknown.0:0| :skolemid |861| :pattern ( (Requires4 t0@@62 t1@@38 t2@@15 t3@@0 t4@@0 heap@@17 (Handle4 h@@40 r@@19 rd@@9) bx0@@28 bx1@@14 bx2@@0 bx3@@0)) )))
(assert (forall ((arg0@@184 T@U) (arg1@@92 T@U) (arg2@@44 T@U) (arg3@@23 T@U) (arg4@@15 T@U) (arg5@@11 T@U) (arg6@@3 T@U) (arg7@@0 T@U) (arg8@@0 T@U) (arg9@@0 T@U) (arg10@@0 T@U) ) (! (= (type (Reads4 arg0@@184 arg1@@92 arg2@@44 arg3@@23 arg4@@15 arg5@@11 arg6@@3 arg7@@0 arg8@@0 arg9@@0 arg10@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads4| :pattern ( (Reads4 arg0@@184 arg1@@92 arg2@@44 arg3@@23 arg4@@15 arg5@@11 arg6@@3 arg7@@0 arg8@@0 arg9@@0 arg10@@0)) )))
(assert (forall ((t0@@63 T@U) (t1@@39 T@U) (t2@@16 T@U) (t3@@1 T@U) (t4@@1 T@U) (heap@@18 T@U) (h@@41 T@U) (r@@20 T@U) (rd@@10 T@U) (bx0@@29 T@U) (bx1@@15 T@U) (bx2@@1 T@U) (bx3@@1 T@U) (bx@@51 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@63) TyType) (= (type t1@@39) TyType)) (= (type t2@@16) TyType)) (= (type t3@@1) TyType)) (= (type t4@@1) TyType)) (= (type heap@@18) (MapType0Type refType MapType1Type))) (= (type h@@41) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@20) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@10) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@29) BoxType)) (= (type bx1@@15) BoxType)) (= (type bx2@@1) BoxType)) (= (type bx3@@1) BoxType)) (= (type bx@@51) BoxType)) (= (U_2_bool (MapType0Select (Reads4 t0@@63 t1@@39 t2@@16 t3@@1 t4@@1 heap@@18 (Handle4 h@@41 r@@20 rd@@10) bx0@@29 bx1@@15 bx2@@1 bx3@@1) bx@@51)) (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@18 bx0@@29 bx1@@15 bx2@@1 bx3@@1) bx@@51)))) :qid |unknown.0:0| :skolemid |862| :pattern ( (MapType0Select (Reads4 t0@@63 t1@@39 t2@@16 t3@@1 t4@@1 heap@@18 (Handle4 h@@41 r@@20 rd@@10) bx0@@29 bx1@@15 bx2@@1 bx3@@1) bx@@51)) )))
(assert (forall ((t0@@64 T@U) (t1@@40 T@U) (t2@@17 T@U) (t3@@2 T@U) (t4@@2 T@U) (h0@@18 T@U) (h1@@18 T@U) (f@@41 T@U) (bx0@@30 T@U) (bx1@@16 T@U) (bx2@@2 T@U) (bx3@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@64) TyType) (= (type t1@@40) TyType)) (= (type t2@@17) TyType)) (= (type t3@@2) TyType)) (= (type t4@@2) TyType)) (= (type h0@@18) (MapType0Type refType MapType1Type))) (= (type h1@@18) (MapType0Type refType MapType1Type))) (= (type f@@41) HandleTypeType)) (= (type bx0@@30) BoxType)) (= (type bx1@@16) BoxType)) (= (type bx2@@2) BoxType)) (= (type bx3@@2) BoxType)) (and (and (and ($HeapSucc h0@@18 h1@@18) (and ($IsGoodHeap h0@@18) ($IsGoodHeap h1@@18))) (and (and (and (and ($IsBox bx0@@30 t0@@64) ($IsBox bx1@@16 t1@@40)) ($IsBox bx2@@2 t2@@17)) ($IsBox bx3@@2 t3@@2)) ($Is f@@41 (Tclass._System.___hFunc4 t0@@64 t1@@40 t2@@17 t3@@2 t4@@2)))) (forall ((o@@62 T@U) (fld@@17 T@U) ) (! (let ((a@@100 (FieldTypeInv0 (type fld@@17)))) (=> (and (and (= (type o@@62) refType) (= (type fld@@17) (FieldType a@@100))) (and (not (= o@@62 null)) (U_2_bool (MapType0Select (Reads4 t0@@64 t1@@40 t2@@17 t3@@2 t4@@2 h0@@18 f@@41 bx0@@30 bx1@@16 bx2@@2 bx3@@2) ($Box o@@62))))) (= (MapType1Select (MapType0Select h0@@18 o@@62) fld@@17) (MapType1Select (MapType0Select h1@@18 o@@62) fld@@17)))) :qid |unknown.0:0| :skolemid |863| :no-pattern (type o@@62) :no-pattern (type fld@@17) :no-pattern (U_2_int o@@62) :no-pattern (U_2_bool o@@62) :no-pattern (U_2_int fld@@17) :no-pattern (U_2_bool fld@@17) )))) (= (Reads4 t0@@64 t1@@40 t2@@17 t3@@2 t4@@2 h0@@18 f@@41 bx0@@30 bx1@@16 bx2@@2 bx3@@2) (Reads4 t0@@64 t1@@40 t2@@17 t3@@2 t4@@2 h1@@18 f@@41 bx0@@30 bx1@@16 bx2@@2 bx3@@2))) :qid |unknown.0:0| :skolemid |864| :pattern ( ($HeapSucc h0@@18 h1@@18) (Reads4 t0@@64 t1@@40 t2@@17 t3@@2 t4@@2 h1@@18 f@@41 bx0@@30 bx1@@16 bx2@@2 bx3@@2)) )))
(assert (forall ((t0@@65 T@U) (t1@@41 T@U) (t2@@18 T@U) (t3@@3 T@U) (t4@@3 T@U) (h0@@19 T@U) (h1@@19 T@U) (f@@42 T@U) (bx0@@31 T@U) (bx1@@17 T@U) (bx2@@3 T@U) (bx3@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@65) TyType) (= (type t1@@41) TyType)) (= (type t2@@18) TyType)) (= (type t3@@3) TyType)) (= (type t4@@3) TyType)) (= (type h0@@19) (MapType0Type refType MapType1Type))) (= (type h1@@19) (MapType0Type refType MapType1Type))) (= (type f@@42) HandleTypeType)) (= (type bx0@@31) BoxType)) (= (type bx1@@17) BoxType)) (= (type bx2@@3) BoxType)) (= (type bx3@@3) BoxType)) (and (and (and ($HeapSucc h0@@19 h1@@19) (and ($IsGoodHeap h0@@19) ($IsGoodHeap h1@@19))) (and (and (and (and ($IsBox bx0@@31 t0@@65) ($IsBox bx1@@17 t1@@41)) ($IsBox bx2@@3 t2@@18)) ($IsBox bx3@@3 t3@@3)) ($Is f@@42 (Tclass._System.___hFunc4 t0@@65 t1@@41 t2@@18 t3@@3 t4@@3)))) (forall ((o@@63 T@U) (fld@@18 T@U) ) (! (let ((a@@101 (FieldTypeInv0 (type fld@@18)))) (=> (and (and (= (type o@@63) refType) (= (type fld@@18) (FieldType a@@101))) (and (not (= o@@63 null)) (U_2_bool (MapType0Select (Reads4 t0@@65 t1@@41 t2@@18 t3@@3 t4@@3 h1@@19 f@@42 bx0@@31 bx1@@17 bx2@@3 bx3@@3) ($Box o@@63))))) (= (MapType1Select (MapType0Select h0@@19 o@@63) fld@@18) (MapType1Select (MapType0Select h1@@19 o@@63) fld@@18)))) :qid |unknown.0:0| :skolemid |865| :no-pattern (type o@@63) :no-pattern (type fld@@18) :no-pattern (U_2_int o@@63) :no-pattern (U_2_bool o@@63) :no-pattern (U_2_int fld@@18) :no-pattern (U_2_bool fld@@18) )))) (= (Reads4 t0@@65 t1@@41 t2@@18 t3@@3 t4@@3 h0@@19 f@@42 bx0@@31 bx1@@17 bx2@@3 bx3@@3) (Reads4 t0@@65 t1@@41 t2@@18 t3@@3 t4@@3 h1@@19 f@@42 bx0@@31 bx1@@17 bx2@@3 bx3@@3))) :qid |unknown.0:0| :skolemid |866| :pattern ( ($HeapSucc h0@@19 h1@@19) (Reads4 t0@@65 t1@@41 t2@@18 t3@@3 t4@@3 h1@@19 f@@42 bx0@@31 bx1@@17 bx2@@3 bx3@@3)) )))
(assert (forall ((t0@@66 T@U) (t1@@42 T@U) (t2@@19 T@U) (t3@@4 T@U) (t4@@4 T@U) (h0@@20 T@U) (h1@@20 T@U) (f@@43 T@U) (bx0@@32 T@U) (bx1@@18 T@U) (bx2@@4 T@U) (bx3@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@66) TyType) (= (type t1@@42) TyType)) (= (type t2@@19) TyType)) (= (type t3@@4) TyType)) (= (type t4@@4) TyType)) (= (type h0@@20) (MapType0Type refType MapType1Type))) (= (type h1@@20) (MapType0Type refType MapType1Type))) (= (type f@@43) HandleTypeType)) (= (type bx0@@32) BoxType)) (= (type bx1@@18) BoxType)) (= (type bx2@@4) BoxType)) (= (type bx3@@4) BoxType)) (and (and (and ($HeapSucc h0@@20 h1@@20) (and ($IsGoodHeap h0@@20) ($IsGoodHeap h1@@20))) (and (and (and (and ($IsBox bx0@@32 t0@@66) ($IsBox bx1@@18 t1@@42)) ($IsBox bx2@@4 t2@@19)) ($IsBox bx3@@4 t3@@4)) ($Is f@@43 (Tclass._System.___hFunc4 t0@@66 t1@@42 t2@@19 t3@@4 t4@@4)))) (forall ((o@@64 T@U) (fld@@19 T@U) ) (! (let ((a@@102 (FieldTypeInv0 (type fld@@19)))) (=> (and (and (= (type o@@64) refType) (= (type fld@@19) (FieldType a@@102))) (and (not (= o@@64 null)) (U_2_bool (MapType0Select (Reads4 t0@@66 t1@@42 t2@@19 t3@@4 t4@@4 h0@@20 f@@43 bx0@@32 bx1@@18 bx2@@4 bx3@@4) ($Box o@@64))))) (= (MapType1Select (MapType0Select h0@@20 o@@64) fld@@19) (MapType1Select (MapType0Select h1@@20 o@@64) fld@@19)))) :qid |unknown.0:0| :skolemid |867| :no-pattern (type o@@64) :no-pattern (type fld@@19) :no-pattern (U_2_int o@@64) :no-pattern (U_2_bool o@@64) :no-pattern (U_2_int fld@@19) :no-pattern (U_2_bool fld@@19) )))) (= (Requires4 t0@@66 t1@@42 t2@@19 t3@@4 t4@@4 h0@@20 f@@43 bx0@@32 bx1@@18 bx2@@4 bx3@@4) (Requires4 t0@@66 t1@@42 t2@@19 t3@@4 t4@@4 h1@@20 f@@43 bx0@@32 bx1@@18 bx2@@4 bx3@@4))) :qid |unknown.0:0| :skolemid |868| :pattern ( ($HeapSucc h0@@20 h1@@20) (Requires4 t0@@66 t1@@42 t2@@19 t3@@4 t4@@4 h1@@20 f@@43 bx0@@32 bx1@@18 bx2@@4 bx3@@4)) )))
(assert (forall ((t0@@67 T@U) (t1@@43 T@U) (t2@@20 T@U) (t3@@5 T@U) (t4@@5 T@U) (h0@@21 T@U) (h1@@21 T@U) (f@@44 T@U) (bx0@@33 T@U) (bx1@@19 T@U) (bx2@@5 T@U) (bx3@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@67) TyType) (= (type t1@@43) TyType)) (= (type t2@@20) TyType)) (= (type t3@@5) TyType)) (= (type t4@@5) TyType)) (= (type h0@@21) (MapType0Type refType MapType1Type))) (= (type h1@@21) (MapType0Type refType MapType1Type))) (= (type f@@44) HandleTypeType)) (= (type bx0@@33) BoxType)) (= (type bx1@@19) BoxType)) (= (type bx2@@5) BoxType)) (= (type bx3@@5) BoxType)) (and (and (and ($HeapSucc h0@@21 h1@@21) (and ($IsGoodHeap h0@@21) ($IsGoodHeap h1@@21))) (and (and (and (and ($IsBox bx0@@33 t0@@67) ($IsBox bx1@@19 t1@@43)) ($IsBox bx2@@5 t2@@20)) ($IsBox bx3@@5 t3@@5)) ($Is f@@44 (Tclass._System.___hFunc4 t0@@67 t1@@43 t2@@20 t3@@5 t4@@5)))) (forall ((o@@65 T@U) (fld@@20 T@U) ) (! (let ((a@@103 (FieldTypeInv0 (type fld@@20)))) (=> (and (and (= (type o@@65) refType) (= (type fld@@20) (FieldType a@@103))) (and (not (= o@@65 null)) (U_2_bool (MapType0Select (Reads4 t0@@67 t1@@43 t2@@20 t3@@5 t4@@5 h1@@21 f@@44 bx0@@33 bx1@@19 bx2@@5 bx3@@5) ($Box o@@65))))) (= (MapType1Select (MapType0Select h0@@21 o@@65) fld@@20) (MapType1Select (MapType0Select h1@@21 o@@65) fld@@20)))) :qid |unknown.0:0| :skolemid |869| :no-pattern (type o@@65) :no-pattern (type fld@@20) :no-pattern (U_2_int o@@65) :no-pattern (U_2_bool o@@65) :no-pattern (U_2_int fld@@20) :no-pattern (U_2_bool fld@@20) )))) (= (Requires4 t0@@67 t1@@43 t2@@20 t3@@5 t4@@5 h0@@21 f@@44 bx0@@33 bx1@@19 bx2@@5 bx3@@5) (Requires4 t0@@67 t1@@43 t2@@20 t3@@5 t4@@5 h1@@21 f@@44 bx0@@33 bx1@@19 bx2@@5 bx3@@5))) :qid |unknown.0:0| :skolemid |870| :pattern ( ($HeapSucc h0@@21 h1@@21) (Requires4 t0@@67 t1@@43 t2@@20 t3@@5 t4@@5 h1@@21 f@@44 bx0@@33 bx1@@19 bx2@@5 bx3@@5)) )))
(assert (forall ((t0@@68 T@U) (t1@@44 T@U) (t2@@21 T@U) (t3@@6 T@U) (t4@@6 T@U) (h0@@22 T@U) (h1@@22 T@U) (f@@45 T@U) (bx0@@34 T@U) (bx1@@20 T@U) (bx2@@6 T@U) (bx3@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@68) TyType) (= (type t1@@44) TyType)) (= (type t2@@21) TyType)) (= (type t3@@6) TyType)) (= (type t4@@6) TyType)) (= (type h0@@22) (MapType0Type refType MapType1Type))) (= (type h1@@22) (MapType0Type refType MapType1Type))) (= (type f@@45) HandleTypeType)) (= (type bx0@@34) BoxType)) (= (type bx1@@20) BoxType)) (= (type bx2@@6) BoxType)) (= (type bx3@@6) BoxType)) (and (and (and ($HeapSucc h0@@22 h1@@22) (and ($IsGoodHeap h0@@22) ($IsGoodHeap h1@@22))) (and (and (and (and ($IsBox bx0@@34 t0@@68) ($IsBox bx1@@20 t1@@44)) ($IsBox bx2@@6 t2@@21)) ($IsBox bx3@@6 t3@@6)) ($Is f@@45 (Tclass._System.___hFunc4 t0@@68 t1@@44 t2@@21 t3@@6 t4@@6)))) (forall ((o@@66 T@U) (fld@@21 T@U) ) (! (let ((a@@104 (FieldTypeInv0 (type fld@@21)))) (=> (and (and (= (type o@@66) refType) (= (type fld@@21) (FieldType a@@104))) (and (not (= o@@66 null)) (U_2_bool (MapType0Select (Reads4 t0@@68 t1@@44 t2@@21 t3@@6 t4@@6 h0@@22 f@@45 bx0@@34 bx1@@20 bx2@@6 bx3@@6) ($Box o@@66))))) (= (MapType1Select (MapType0Select h0@@22 o@@66) fld@@21) (MapType1Select (MapType0Select h1@@22 o@@66) fld@@21)))) :qid |unknown.0:0| :skolemid |871| :no-pattern (type o@@66) :no-pattern (type fld@@21) :no-pattern (U_2_int o@@66) :no-pattern (U_2_bool o@@66) :no-pattern (U_2_int fld@@21) :no-pattern (U_2_bool fld@@21) )))) (= (Apply4 t0@@68 t1@@44 t2@@21 t3@@6 t4@@6 h0@@22 f@@45 bx0@@34 bx1@@20 bx2@@6 bx3@@6) (Apply4 t0@@68 t1@@44 t2@@21 t3@@6 t4@@6 h1@@22 f@@45 bx0@@34 bx1@@20 bx2@@6 bx3@@6))) :qid |unknown.0:0| :skolemid |872| :pattern ( ($HeapSucc h0@@22 h1@@22) (Apply4 t0@@68 t1@@44 t2@@21 t3@@6 t4@@6 h1@@22 f@@45 bx0@@34 bx1@@20 bx2@@6 bx3@@6)) )))
(assert (forall ((t0@@69 T@U) (t1@@45 T@U) (t2@@22 T@U) (t3@@7 T@U) (t4@@7 T@U) (h0@@23 T@U) (h1@@23 T@U) (f@@46 T@U) (bx0@@35 T@U) (bx1@@21 T@U) (bx2@@7 T@U) (bx3@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@69) TyType) (= (type t1@@45) TyType)) (= (type t2@@22) TyType)) (= (type t3@@7) TyType)) (= (type t4@@7) TyType)) (= (type h0@@23) (MapType0Type refType MapType1Type))) (= (type h1@@23) (MapType0Type refType MapType1Type))) (= (type f@@46) HandleTypeType)) (= (type bx0@@35) BoxType)) (= (type bx1@@21) BoxType)) (= (type bx2@@7) BoxType)) (= (type bx3@@7) BoxType)) (and (and (and ($HeapSucc h0@@23 h1@@23) (and ($IsGoodHeap h0@@23) ($IsGoodHeap h1@@23))) (and (and (and (and ($IsBox bx0@@35 t0@@69) ($IsBox bx1@@21 t1@@45)) ($IsBox bx2@@7 t2@@22)) ($IsBox bx3@@7 t3@@7)) ($Is f@@46 (Tclass._System.___hFunc4 t0@@69 t1@@45 t2@@22 t3@@7 t4@@7)))) (forall ((o@@67 T@U) (fld@@22 T@U) ) (! (let ((a@@105 (FieldTypeInv0 (type fld@@22)))) (=> (and (and (= (type o@@67) refType) (= (type fld@@22) (FieldType a@@105))) (and (not (= o@@67 null)) (U_2_bool (MapType0Select (Reads4 t0@@69 t1@@45 t2@@22 t3@@7 t4@@7 h1@@23 f@@46 bx0@@35 bx1@@21 bx2@@7 bx3@@7) ($Box o@@67))))) (= (MapType1Select (MapType0Select h0@@23 o@@67) fld@@22) (MapType1Select (MapType0Select h1@@23 o@@67) fld@@22)))) :qid |unknown.0:0| :skolemid |873| :no-pattern (type o@@67) :no-pattern (type fld@@22) :no-pattern (U_2_int o@@67) :no-pattern (U_2_bool o@@67) :no-pattern (U_2_int fld@@22) :no-pattern (U_2_bool fld@@22) )))) (= (Apply4 t0@@69 t1@@45 t2@@22 t3@@7 t4@@7 h0@@23 f@@46 bx0@@35 bx1@@21 bx2@@7 bx3@@7) (Apply4 t0@@69 t1@@45 t2@@22 t3@@7 t4@@7 h1@@23 f@@46 bx0@@35 bx1@@21 bx2@@7 bx3@@7))) :qid |unknown.0:0| :skolemid |874| :pattern ( ($HeapSucc h0@@23 h1@@23) (Apply4 t0@@69 t1@@45 t2@@22 t3@@7 t4@@7 h1@@23 f@@46 bx0@@35 bx1@@21 bx2@@7 bx3@@7)) )))
(assert (forall ((t0@@70 T@U) (t1@@46 T@U) (t2@@23 T@U) (t3@@8 T@U) (t4@@8 T@U) (heap@@19 T@U) (f@@47 T@U) (bx0@@36 T@U) (bx1@@22 T@U) (bx2@@8 T@U) (bx3@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@70) TyType) (= (type t1@@46) TyType)) (= (type t2@@23) TyType)) (= (type t3@@8) TyType)) (= (type t4@@8) TyType)) (= (type heap@@19) (MapType0Type refType MapType1Type))) (= (type f@@47) HandleTypeType)) (= (type bx0@@36) BoxType)) (= (type bx1@@22) BoxType)) (= (type bx2@@8) BoxType)) (= (type bx3@@8) BoxType)) (and ($IsGoodHeap heap@@19) (and (and (and (and ($IsBox bx0@@36 t0@@70) ($IsBox bx1@@22 t1@@46)) ($IsBox bx2@@8 t2@@23)) ($IsBox bx3@@8 t3@@8)) ($Is f@@47 (Tclass._System.___hFunc4 t0@@70 t1@@46 t2@@23 t3@@8 t4@@8))))) (= (|Set#Equal| (Reads4 t0@@70 t1@@46 t2@@23 t3@@8 t4@@8 $OneHeap f@@47 bx0@@36 bx1@@22 bx2@@8 bx3@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads4 t0@@70 t1@@46 t2@@23 t3@@8 t4@@8 heap@@19 f@@47 bx0@@36 bx1@@22 bx2@@8 bx3@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |875| :pattern ( (Reads4 t0@@70 t1@@46 t2@@23 t3@@8 t4@@8 $OneHeap f@@47 bx0@@36 bx1@@22 bx2@@8 bx3@@8) ($IsGoodHeap heap@@19)) :pattern ( (Reads4 t0@@70 t1@@46 t2@@23 t3@@8 t4@@8 heap@@19 f@@47 bx0@@36 bx1@@22 bx2@@8 bx3@@8)) )))
(assert (forall ((t0@@71 T@U) (t1@@47 T@U) (t2@@24 T@U) (t3@@9 T@U) (t4@@9 T@U) (heap@@20 T@U) (f@@48 T@U) (bx0@@37 T@U) (bx1@@23 T@U) (bx2@@9 T@U) (bx3@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@71) TyType) (= (type t1@@47) TyType)) (= (type t2@@24) TyType)) (= (type t3@@9) TyType)) (= (type t4@@9) TyType)) (= (type heap@@20) (MapType0Type refType MapType1Type))) (= (type f@@48) HandleTypeType)) (= (type bx0@@37) BoxType)) (= (type bx1@@23) BoxType)) (= (type bx2@@9) BoxType)) (= (type bx3@@9) BoxType)) (and (and ($IsGoodHeap heap@@20) (and (and (and (and ($IsBox bx0@@37 t0@@71) ($IsBox bx1@@23 t1@@47)) ($IsBox bx2@@9 t2@@24)) ($IsBox bx3@@9 t3@@9)) ($Is f@@48 (Tclass._System.___hFunc4 t0@@71 t1@@47 t2@@24 t3@@9 t4@@9)))) (|Set#Equal| (Reads4 t0@@71 t1@@47 t2@@24 t3@@9 t4@@9 $OneHeap f@@48 bx0@@37 bx1@@23 bx2@@9 bx3@@9) (|Set#Empty| BoxType)))) (= (Requires4 t0@@71 t1@@47 t2@@24 t3@@9 t4@@9 $OneHeap f@@48 bx0@@37 bx1@@23 bx2@@9 bx3@@9) (Requires4 t0@@71 t1@@47 t2@@24 t3@@9 t4@@9 heap@@20 f@@48 bx0@@37 bx1@@23 bx2@@9 bx3@@9))) :qid |unknown.0:0| :skolemid |876| :pattern ( (Requires4 t0@@71 t1@@47 t2@@24 t3@@9 t4@@9 $OneHeap f@@48 bx0@@37 bx1@@23 bx2@@9 bx3@@9) ($IsGoodHeap heap@@20)) :pattern ( (Requires4 t0@@71 t1@@47 t2@@24 t3@@9 t4@@9 heap@@20 f@@48 bx0@@37 bx1@@23 bx2@@9 bx3@@9)) )))
(assert (forall ((f@@49 T@U) (t0@@72 T@U) (t1@@48 T@U) (t2@@25 T@U) (t3@@10 T@U) (t4@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@49) HandleTypeType) (= (type t0@@72) TyType)) (= (type t1@@48) TyType)) (= (type t2@@25) TyType)) (= (type t3@@10) TyType)) (= (type t4@@10) TyType)) (= ($Is f@@49 (Tclass._System.___hFunc4 t0@@72 t1@@48 t2@@25 t3@@10 t4@@10)) (forall ((h@@42 T@U) (bx0@@38 T@U) (bx1@@24 T@U) (bx2@@10 T@U) (bx3@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@42) (MapType0Type refType MapType1Type)) (= (type bx0@@38) BoxType)) (= (type bx1@@24) BoxType)) (= (type bx2@@10) BoxType)) (= (type bx3@@10) BoxType)) (and (and ($IsGoodHeap h@@42) (and (and (and ($IsBox bx0@@38 t0@@72) ($IsBox bx1@@24 t1@@48)) ($IsBox bx2@@10 t2@@25)) ($IsBox bx3@@10 t3@@10))) (Requires4 t0@@72 t1@@48 t2@@25 t3@@10 t4@@10 h@@42 f@@49 bx0@@38 bx1@@24 bx2@@10 bx3@@10))) ($IsBox (Apply4 t0@@72 t1@@48 t2@@25 t3@@10 t4@@10 h@@42 f@@49 bx0@@38 bx1@@24 bx2@@10 bx3@@10) t4@@10)) :qid |DafnyPreludebpl.545:12| :skolemid |877| :pattern ( (Apply4 t0@@72 t1@@48 t2@@25 t3@@10 t4@@10 h@@42 f@@49 bx0@@38 bx1@@24 bx2@@10 bx3@@10)) )))) :qid |unknown.0:0| :skolemid |878| :pattern ( ($Is f@@49 (Tclass._System.___hFunc4 t0@@72 t1@@48 t2@@25 t3@@10 t4@@10))) )))
(assert (forall ((f@@50 T@U) (t0@@73 T@U) (t1@@49 T@U) (t2@@26 T@U) (t3@@11 T@U) (t4@@11 T@U) (u0@@2 T@U) (u1@@1 T@U) (u2@@0 T@U) (u3 T@U) (u4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type f@@50) HandleTypeType) (= (type t0@@73) TyType)) (= (type t1@@49) TyType)) (= (type t2@@26) TyType)) (= (type t3@@11) TyType)) (= (type t4@@11) TyType)) (= (type u0@@2) TyType)) (= (type u1@@1) TyType)) (= (type u2@@0) TyType)) (= (type u3) TyType)) (= (type u4) TyType)) (and (and (and (and (and ($Is f@@50 (Tclass._System.___hFunc4 t0@@73 t1@@49 t2@@26 t3@@11 t4@@11)) (forall ((bx@@52 T@U) ) (!  (=> (and (= (type bx@@52) BoxType) ($IsBox bx@@52 u0@@2)) ($IsBox bx@@52 t0@@73)) :qid |unknown.0:0| :skolemid |879| :pattern ( ($IsBox bx@@52 u0@@2)) :pattern ( ($IsBox bx@@52 t0@@73)) ))) (forall ((bx@@53 T@U) ) (!  (=> (and (= (type bx@@53) BoxType) ($IsBox bx@@53 u1@@1)) ($IsBox bx@@53 t1@@49)) :qid |unknown.0:0| :skolemid |880| :pattern ( ($IsBox bx@@53 u1@@1)) :pattern ( ($IsBox bx@@53 t1@@49)) ))) (forall ((bx@@54 T@U) ) (!  (=> (and (= (type bx@@54) BoxType) ($IsBox bx@@54 u2@@0)) ($IsBox bx@@54 t2@@26)) :qid |unknown.0:0| :skolemid |881| :pattern ( ($IsBox bx@@54 u2@@0)) :pattern ( ($IsBox bx@@54 t2@@26)) ))) (forall ((bx@@55 T@U) ) (!  (=> (and (= (type bx@@55) BoxType) ($IsBox bx@@55 u3)) ($IsBox bx@@55 t3@@11)) :qid |unknown.0:0| :skolemid |882| :pattern ( ($IsBox bx@@55 u3)) :pattern ( ($IsBox bx@@55 t3@@11)) ))) (forall ((bx@@56 T@U) ) (!  (=> (and (= (type bx@@56) BoxType) ($IsBox bx@@56 t4@@11)) ($IsBox bx@@56 u4)) :qid |unknown.0:0| :skolemid |883| :pattern ( ($IsBox bx@@56 t4@@11)) :pattern ( ($IsBox bx@@56 u4)) )))) ($Is f@@50 (Tclass._System.___hFunc4 u0@@2 u1@@1 u2@@0 u3 u4))) :qid |unknown.0:0| :skolemid |884| :pattern ( ($Is f@@50 (Tclass._System.___hFunc4 t0@@73 t1@@49 t2@@26 t3@@11 t4@@11)) ($Is f@@50 (Tclass._System.___hFunc4 u0@@2 u1@@1 u2@@0 u3 u4))) )))
(assert (forall ((f@@51 T@U) (t0@@74 T@U) (t1@@50 T@U) (t2@@27 T@U) (t3@@12 T@U) (t4@@12 T@U) (h@@43 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@51) HandleTypeType) (= (type t0@@74) TyType)) (= (type t1@@50) TyType)) (= (type t2@@27) TyType)) (= (type t3@@12) TyType)) (= (type t4@@12) TyType)) (= (type h@@43) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@43)) (= ($IsAlloc f@@51 (Tclass._System.___hFunc4 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12) h@@43) (forall ((bx0@@39 T@U) (bx1@@25 T@U) (bx2@@11 T@U) (bx3@@11 T@U) ) (!  (=> (and (and (and (= (type bx0@@39) BoxType) (= (type bx1@@25) BoxType)) (= (type bx2@@11) BoxType)) (= (type bx3@@11) BoxType)) (=> (and (and (and (and (and ($IsBox bx0@@39 t0@@74) ($IsAllocBox bx0@@39 t0@@74 h@@43)) (and ($IsBox bx1@@25 t1@@50) ($IsAllocBox bx1@@25 t1@@50 h@@43))) (and ($IsBox bx2@@11 t2@@27) ($IsAllocBox bx2@@11 t2@@27 h@@43))) (and ($IsBox bx3@@11 t3@@12) ($IsAllocBox bx3@@11 t3@@12 h@@43))) (Requires4 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11 bx3@@11)) (forall ((r@@21 T@U) ) (!  (=> (= (type r@@21) refType) (=> (and (not (= r@@21 null)) (U_2_bool (MapType0Select (Reads4 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11 bx3@@11) ($Box r@@21)))) (U_2_bool (MapType1Select (MapType0Select h@@43 r@@21) alloc)))) :qid |unknown.0:0| :skolemid |885| :pattern ( (MapType0Select (Reads4 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11 bx3@@11) ($Box r@@21))) )))) :qid |unknown.0:0| :skolemid |886| :pattern ( (Apply4 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11 bx3@@11)) :pattern ( (Reads4 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11 bx3@@11)) )))) :qid |unknown.0:0| :skolemid |887| :pattern ( ($IsAlloc f@@51 (Tclass._System.___hFunc4 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12) h@@43)) )))
(assert (forall ((f@@52 T@U) (t0@@75 T@U) (t1@@51 T@U) (t2@@28 T@U) (t3@@13 T@U) (t4@@13 T@U) (h@@44 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@52) HandleTypeType) (= (type t0@@75) TyType)) (= (type t1@@51) TyType)) (= (type t2@@28) TyType)) (= (type t3@@13) TyType)) (= (type t4@@13) TyType)) (= (type h@@44) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@44) ($IsAlloc f@@52 (Tclass._System.___hFunc4 t0@@75 t1@@51 t2@@28 t3@@13 t4@@13) h@@44))) (forall ((bx0@@40 T@U) (bx1@@26 T@U) (bx2@@12 T@U) (bx3@@12 T@U) ) (!  (=> (and (and (and (= (type bx0@@40) BoxType) (= (type bx1@@26) BoxType)) (= (type bx2@@12) BoxType)) (= (type bx3@@12) BoxType)) (=> (and (and (and (and ($IsAllocBox bx0@@40 t0@@75 h@@44) ($IsAllocBox bx1@@26 t1@@51 h@@44)) ($IsAllocBox bx2@@12 t2@@28 h@@44)) ($IsAllocBox bx3@@12 t3@@13 h@@44)) (Requires4 t0@@75 t1@@51 t2@@28 t3@@13 t4@@13 h@@44 f@@52 bx0@@40 bx1@@26 bx2@@12 bx3@@12)) ($IsAllocBox (Apply4 t0@@75 t1@@51 t2@@28 t3@@13 t4@@13 h@@44 f@@52 bx0@@40 bx1@@26 bx2@@12 bx3@@12) t4@@13 h@@44))) :qid |unknown.0:0| :skolemid |888| :pattern ( (Apply4 t0@@75 t1@@51 t2@@28 t3@@13 t4@@13 h@@44 f@@52 bx0@@40 bx1@@26 bx2@@12 bx3@@12)) ))) :qid |unknown.0:0| :skolemid |889| :pattern ( ($IsAlloc f@@52 (Tclass._System.___hFunc4 t0@@75 t1@@51 t2@@28 t3@@13 t4@@13) h@@44)) )))
(assert (forall ((arg0@@185 T@U) (arg1@@93 T@U) (arg2@@45 T@U) (arg3@@24 T@U) (arg4@@16 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4 arg0@@185 arg1@@93 arg2@@45 arg3@@24 arg4@@16)) TyType) :qid |funType:Tclass._System.___hPartialFunc4| :pattern ( (Tclass._System.___hPartialFunc4 arg0@@185 arg1@@93 arg2@@45 arg3@@24 arg4@@16)) )))
(assert (forall ((|#$T0@@41| T@U) (|#$T1@@25| T@U) (|#$T2@@6| T@U) (|#$T3@@6| T@U) (|#$R@@54| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@41|) TyType) (= (type |#$T1@@25|) TyType)) (= (type |#$T2@@6|) TyType)) (= (type |#$T3@@6|) TyType)) (= (type |#$R@@54|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc4 |#$T0@@41| |#$T1@@25| |#$T2@@6| |#$T3@@6| |#$R@@54|)) Tagclass._System.___hPartialFunc4) (= (TagFamily (Tclass._System.___hPartialFunc4 |#$T0@@41| |#$T1@@25| |#$T2@@6| |#$T3@@6| |#$R@@54|)) |tytagFamily$_#PartialFunc4|))) :qid |unknown.0:0| :skolemid |890| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@41| |#$T1@@25| |#$T2@@6| |#$T3@@6| |#$R@@54|)) )))
(assert (forall ((arg0@@186 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_0 arg0@@186)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_0| :pattern ( (Tclass._System.___hPartialFunc4_0 arg0@@186)) )))
(assert (forall ((|#$T0@@42| T@U) (|#$T1@@26| T@U) (|#$T2@@7| T@U) (|#$T3@@7| T@U) (|#$R@@55| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@42|) TyType) (= (type |#$T1@@26|) TyType)) (= (type |#$T2@@7|) TyType)) (= (type |#$T3@@7|) TyType)) (= (type |#$R@@55|) TyType)) (= (Tclass._System.___hPartialFunc4_0 (Tclass._System.___hPartialFunc4 |#$T0@@42| |#$T1@@26| |#$T2@@7| |#$T3@@7| |#$R@@55|)) |#$T0@@42|)) :qid |unknown.0:0| :skolemid |891| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@42| |#$T1@@26| |#$T2@@7| |#$T3@@7| |#$R@@55|)) )))
(assert (forall ((arg0@@187 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_1 arg0@@187)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_1| :pattern ( (Tclass._System.___hPartialFunc4_1 arg0@@187)) )))
(assert (forall ((|#$T0@@43| T@U) (|#$T1@@27| T@U) (|#$T2@@8| T@U) (|#$T3@@8| T@U) (|#$R@@56| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@43|) TyType) (= (type |#$T1@@27|) TyType)) (= (type |#$T2@@8|) TyType)) (= (type |#$T3@@8|) TyType)) (= (type |#$R@@56|) TyType)) (= (Tclass._System.___hPartialFunc4_1 (Tclass._System.___hPartialFunc4 |#$T0@@43| |#$T1@@27| |#$T2@@8| |#$T3@@8| |#$R@@56|)) |#$T1@@27|)) :qid |unknown.0:0| :skolemid |892| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@43| |#$T1@@27| |#$T2@@8| |#$T3@@8| |#$R@@56|)) )))
(assert (forall ((arg0@@188 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_2 arg0@@188)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_2| :pattern ( (Tclass._System.___hPartialFunc4_2 arg0@@188)) )))
(assert (forall ((|#$T0@@44| T@U) (|#$T1@@28| T@U) (|#$T2@@9| T@U) (|#$T3@@9| T@U) (|#$R@@57| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@44|) TyType) (= (type |#$T1@@28|) TyType)) (= (type |#$T2@@9|) TyType)) (= (type |#$T3@@9|) TyType)) (= (type |#$R@@57|) TyType)) (= (Tclass._System.___hPartialFunc4_2 (Tclass._System.___hPartialFunc4 |#$T0@@44| |#$T1@@28| |#$T2@@9| |#$T3@@9| |#$R@@57|)) |#$T2@@9|)) :qid |unknown.0:0| :skolemid |893| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@44| |#$T1@@28| |#$T2@@9| |#$T3@@9| |#$R@@57|)) )))
(assert (forall ((arg0@@189 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_3 arg0@@189)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_3| :pattern ( (Tclass._System.___hPartialFunc4_3 arg0@@189)) )))
(assert (forall ((|#$T0@@45| T@U) (|#$T1@@29| T@U) (|#$T2@@10| T@U) (|#$T3@@10| T@U) (|#$R@@58| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@45|) TyType) (= (type |#$T1@@29|) TyType)) (= (type |#$T2@@10|) TyType)) (= (type |#$T3@@10|) TyType)) (= (type |#$R@@58|) TyType)) (= (Tclass._System.___hPartialFunc4_3 (Tclass._System.___hPartialFunc4 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$T3@@10| |#$R@@58|)) |#$T3@@10|)) :qid |unknown.0:0| :skolemid |894| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$T3@@10| |#$R@@58|)) )))
(assert (forall ((arg0@@190 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_4 arg0@@190)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_4| :pattern ( (Tclass._System.___hPartialFunc4_4 arg0@@190)) )))
(assert (forall ((|#$T0@@46| T@U) (|#$T1@@30| T@U) (|#$T2@@11| T@U) (|#$T3@@11| T@U) (|#$R@@59| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@46|) TyType) (= (type |#$T1@@30|) TyType)) (= (type |#$T2@@11|) TyType)) (= (type |#$T3@@11|) TyType)) (= (type |#$R@@59|) TyType)) (= (Tclass._System.___hPartialFunc4_4 (Tclass._System.___hPartialFunc4 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$T3@@11| |#$R@@59|)) |#$R@@59|)) :qid |unknown.0:0| :skolemid |895| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$T3@@11| |#$R@@59|)) )))
(assert (forall ((|#$T0@@47| T@U) (|#$T1@@31| T@U) (|#$T2@@12| T@U) (|#$T3@@12| T@U) (|#$R@@60| T@U) (bx@@57 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@47|) TyType) (= (type |#$T1@@31|) TyType)) (= (type |#$T2@@12|) TyType)) (= (type |#$T3@@12|) TyType)) (= (type |#$R@@60|) TyType)) (= (type bx@@57) BoxType)) ($IsBox bx@@57 (Tclass._System.___hPartialFunc4 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$T3@@12| |#$R@@60|))) (and (= ($Box ($Unbox HandleTypeType bx@@57)) bx@@57) ($Is ($Unbox HandleTypeType bx@@57) (Tclass._System.___hPartialFunc4 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$T3@@12| |#$R@@60|)))) :qid |unknown.0:0| :skolemid |896| :pattern ( ($IsBox bx@@57 (Tclass._System.___hPartialFunc4 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$T3@@12| |#$R@@60|))) )))
(assert (forall ((|#$T0@@48| T@U) (|#$T1@@32| T@U) (|#$T2@@13| T@U) (|#$T3@@13| T@U) (|#$R@@61| T@U) (|f#0@@11| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@48|) TyType) (= (type |#$T1@@32|) TyType)) (= (type |#$T2@@13|) TyType)) (= (type |#$T3@@13|) TyType)) (= (type |#$R@@61|) TyType)) (= (type |f#0@@11|) HandleTypeType)) (= ($Is |f#0@@11| (Tclass._System.___hPartialFunc4 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@61|))  (and ($Is |f#0@@11| (Tclass._System.___hFunc4 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@61|)) (forall ((|x0#0@@3| T@U) (|x1#0@@1| T@U) (|x2#0| T@U) (|x3#0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@3|) BoxType) (= (type |x1#0@@1|) BoxType)) (= (type |x2#0|) BoxType)) (= (type |x3#0|) BoxType)) (and (and (and ($IsBox |x0#0@@3| |#$T0@@48|) ($IsBox |x1#0@@1| |#$T1@@32|)) ($IsBox |x2#0| |#$T2@@13|)) ($IsBox |x3#0| |#$T3@@13|))) (|Set#Equal| (Reads4 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@61| $OneHeap |f#0@@11| |x0#0@@3| |x1#0@@1| |x2#0| |x3#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |897| :no-pattern (type |x0#0@@3|) :no-pattern (type |x1#0@@1|) :no-pattern (type |x2#0|) :no-pattern (type |x3#0|) :no-pattern (U_2_int |x0#0@@3|) :no-pattern (U_2_bool |x0#0@@3|) :no-pattern (U_2_int |x1#0@@1|) :no-pattern (U_2_bool |x1#0@@1|) :no-pattern (U_2_int |x2#0|) :no-pattern (U_2_bool |x2#0|) :no-pattern (U_2_int |x3#0|) :no-pattern (U_2_bool |x3#0|) ))))) :qid |unknown.0:0| :skolemid |898| :pattern ( ($Is |f#0@@11| (Tclass._System.___hPartialFunc4 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@61|))) )))
(assert (forall ((|#$T0@@49| T@U) (|#$T1@@33| T@U) (|#$T2@@14| T@U) (|#$T3@@14| T@U) (|#$R@@62| T@U) (|f#0@@12| T@U) ($h@@14 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@49|) TyType) (= (type |#$T1@@33|) TyType)) (= (type |#$T2@@14|) TyType)) (= (type |#$T3@@14|) TyType)) (= (type |#$R@@62|) TyType)) (= (type |f#0@@12|) HandleTypeType)) (= (type $h@@14) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc4 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$T3@@14| |#$R@@62|) $h@@14) ($IsAlloc |f#0@@12| (Tclass._System.___hFunc4 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$T3@@14| |#$R@@62|) $h@@14))) :qid |unknown.0:0| :skolemid |899| :pattern ( ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc4 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$T3@@14| |#$R@@62|) $h@@14)) )))
(assert (forall ((arg0@@191 T@U) (arg1@@94 T@U) (arg2@@46 T@U) (arg3@@25 T@U) (arg4@@17 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4 arg0@@191 arg1@@94 arg2@@46 arg3@@25 arg4@@17)) TyType) :qid |funType:Tclass._System.___hTotalFunc4| :pattern ( (Tclass._System.___hTotalFunc4 arg0@@191 arg1@@94 arg2@@46 arg3@@25 arg4@@17)) )))
(assert (forall ((|#$T0@@50| T@U) (|#$T1@@34| T@U) (|#$T2@@15| T@U) (|#$T3@@15| T@U) (|#$R@@63| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@50|) TyType) (= (type |#$T1@@34|) TyType)) (= (type |#$T2@@15|) TyType)) (= (type |#$T3@@15|) TyType)) (= (type |#$R@@63|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc4 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$T3@@15| |#$R@@63|)) Tagclass._System.___hTotalFunc4) (= (TagFamily (Tclass._System.___hTotalFunc4 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$T3@@15| |#$R@@63|)) |tytagFamily$_#TotalFunc4|))) :qid |unknown.0:0| :skolemid |900| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$T3@@15| |#$R@@63|)) )))
(assert (forall ((arg0@@192 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_0 arg0@@192)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_0| :pattern ( (Tclass._System.___hTotalFunc4_0 arg0@@192)) )))
(assert (forall ((|#$T0@@51| T@U) (|#$T1@@35| T@U) (|#$T2@@16| T@U) (|#$T3@@16| T@U) (|#$R@@64| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@51|) TyType) (= (type |#$T1@@35|) TyType)) (= (type |#$T2@@16|) TyType)) (= (type |#$T3@@16|) TyType)) (= (type |#$R@@64|) TyType)) (= (Tclass._System.___hTotalFunc4_0 (Tclass._System.___hTotalFunc4 |#$T0@@51| |#$T1@@35| |#$T2@@16| |#$T3@@16| |#$R@@64|)) |#$T0@@51|)) :qid |unknown.0:0| :skolemid |901| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@51| |#$T1@@35| |#$T2@@16| |#$T3@@16| |#$R@@64|)) )))
(assert (forall ((arg0@@193 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_1 arg0@@193)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_1| :pattern ( (Tclass._System.___hTotalFunc4_1 arg0@@193)) )))
(assert (forall ((|#$T0@@52| T@U) (|#$T1@@36| T@U) (|#$T2@@17| T@U) (|#$T3@@17| T@U) (|#$R@@65| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@52|) TyType) (= (type |#$T1@@36|) TyType)) (= (type |#$T2@@17|) TyType)) (= (type |#$T3@@17|) TyType)) (= (type |#$R@@65|) TyType)) (= (Tclass._System.___hTotalFunc4_1 (Tclass._System.___hTotalFunc4 |#$T0@@52| |#$T1@@36| |#$T2@@17| |#$T3@@17| |#$R@@65|)) |#$T1@@36|)) :qid |unknown.0:0| :skolemid |902| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@52| |#$T1@@36| |#$T2@@17| |#$T3@@17| |#$R@@65|)) )))
(assert (forall ((arg0@@194 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_2 arg0@@194)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_2| :pattern ( (Tclass._System.___hTotalFunc4_2 arg0@@194)) )))
(assert (forall ((|#$T0@@53| T@U) (|#$T1@@37| T@U) (|#$T2@@18| T@U) (|#$T3@@18| T@U) (|#$R@@66| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@53|) TyType) (= (type |#$T1@@37|) TyType)) (= (type |#$T2@@18|) TyType)) (= (type |#$T3@@18|) TyType)) (= (type |#$R@@66|) TyType)) (= (Tclass._System.___hTotalFunc4_2 (Tclass._System.___hTotalFunc4 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$T3@@18| |#$R@@66|)) |#$T2@@18|)) :qid |unknown.0:0| :skolemid |903| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$T3@@18| |#$R@@66|)) )))
(assert (forall ((arg0@@195 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_3 arg0@@195)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_3| :pattern ( (Tclass._System.___hTotalFunc4_3 arg0@@195)) )))
(assert (forall ((|#$T0@@54| T@U) (|#$T1@@38| T@U) (|#$T2@@19| T@U) (|#$T3@@19| T@U) (|#$R@@67| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@54|) TyType) (= (type |#$T1@@38|) TyType)) (= (type |#$T2@@19|) TyType)) (= (type |#$T3@@19|) TyType)) (= (type |#$R@@67|) TyType)) (= (Tclass._System.___hTotalFunc4_3 (Tclass._System.___hTotalFunc4 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$T3@@19| |#$R@@67|)) |#$T3@@19|)) :qid |unknown.0:0| :skolemid |904| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$T3@@19| |#$R@@67|)) )))
(assert (forall ((arg0@@196 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_4 arg0@@196)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_4| :pattern ( (Tclass._System.___hTotalFunc4_4 arg0@@196)) )))
(assert (forall ((|#$T0@@55| T@U) (|#$T1@@39| T@U) (|#$T2@@20| T@U) (|#$T3@@20| T@U) (|#$R@@68| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@55|) TyType) (= (type |#$T1@@39|) TyType)) (= (type |#$T2@@20|) TyType)) (= (type |#$T3@@20|) TyType)) (= (type |#$R@@68|) TyType)) (= (Tclass._System.___hTotalFunc4_4 (Tclass._System.___hTotalFunc4 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$T3@@20| |#$R@@68|)) |#$R@@68|)) :qid |unknown.0:0| :skolemid |905| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$T3@@20| |#$R@@68|)) )))
(assert (forall ((|#$T0@@56| T@U) (|#$T1@@40| T@U) (|#$T2@@21| T@U) (|#$T3@@21| T@U) (|#$R@@69| T@U) (bx@@58 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@56|) TyType) (= (type |#$T1@@40|) TyType)) (= (type |#$T2@@21|) TyType)) (= (type |#$T3@@21|) TyType)) (= (type |#$R@@69|) TyType)) (= (type bx@@58) BoxType)) ($IsBox bx@@58 (Tclass._System.___hTotalFunc4 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3@@21| |#$R@@69|))) (and (= ($Box ($Unbox HandleTypeType bx@@58)) bx@@58) ($Is ($Unbox HandleTypeType bx@@58) (Tclass._System.___hTotalFunc4 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3@@21| |#$R@@69|)))) :qid |unknown.0:0| :skolemid |906| :pattern ( ($IsBox bx@@58 (Tclass._System.___hTotalFunc4 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3@@21| |#$R@@69|))) )))
(assert (forall ((|#$T0@@57| T@U) (|#$T1@@41| T@U) (|#$T2@@22| T@U) (|#$T3@@22| T@U) (|#$R@@70| T@U) (|f#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@57|) TyType) (= (type |#$T1@@41|) TyType)) (= (type |#$T2@@22|) TyType)) (= (type |#$T3@@22|) TyType)) (= (type |#$R@@70|) TyType)) (= (type |f#0@@13|) HandleTypeType)) (= ($Is |f#0@@13| (Tclass._System.___hTotalFunc4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@70|))  (and ($Is |f#0@@13| (Tclass._System.___hPartialFunc4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@70|)) (forall ((|x0#0@@4| T@U) (|x1#0@@2| T@U) (|x2#0@@0| T@U) (|x3#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@4|) BoxType) (= (type |x1#0@@2|) BoxType)) (= (type |x2#0@@0|) BoxType)) (= (type |x3#0@@0|) BoxType)) (and (and (and ($IsBox |x0#0@@4| |#$T0@@57|) ($IsBox |x1#0@@2| |#$T1@@41|)) ($IsBox |x2#0@@0| |#$T2@@22|)) ($IsBox |x3#0@@0| |#$T3@@22|))) (Requires4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@70| $OneHeap |f#0@@13| |x0#0@@4| |x1#0@@2| |x2#0@@0| |x3#0@@0|)) :qid |unknown.0:0| :skolemid |907| :no-pattern (type |x0#0@@4|) :no-pattern (type |x1#0@@2|) :no-pattern (type |x2#0@@0|) :no-pattern (type |x3#0@@0|) :no-pattern (U_2_int |x0#0@@4|) :no-pattern (U_2_bool |x0#0@@4|) :no-pattern (U_2_int |x1#0@@2|) :no-pattern (U_2_bool |x1#0@@2|) :no-pattern (U_2_int |x2#0@@0|) :no-pattern (U_2_bool |x2#0@@0|) :no-pattern (U_2_int |x3#0@@0|) :no-pattern (U_2_bool |x3#0@@0|) ))))) :qid |unknown.0:0| :skolemid |908| :pattern ( ($Is |f#0@@13| (Tclass._System.___hTotalFunc4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@70|))) )))
(assert (forall ((|#$T0@@58| T@U) (|#$T1@@42| T@U) (|#$T2@@23| T@U) (|#$T3@@23| T@U) (|#$R@@71| T@U) (|f#0@@14| T@U) ($h@@15 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@58|) TyType) (= (type |#$T1@@42|) TyType)) (= (type |#$T2@@23|) TyType)) (= (type |#$T3@@23|) TyType)) (= (type |#$R@@71|) TyType)) (= (type |f#0@@14|) HandleTypeType)) (= (type $h@@15) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc4 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@23| |#$R@@71|) $h@@15) ($IsAlloc |f#0@@14| (Tclass._System.___hPartialFunc4 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@23| |#$R@@71|) $h@@15))) :qid |unknown.0:0| :skolemid |909| :pattern ( ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc4 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@23| |#$R@@71|) $h@@15)) )))
(assert (forall ((arg0@@197 T@U) (arg1@@95 T@U) (arg2@@47 T@U) (arg3@@26 T@U) ) (! (= (type (Tclass._System.___hFunc3 arg0@@197 arg1@@95 arg2@@47 arg3@@26)) TyType) :qid |funType:Tclass._System.___hFunc3| :pattern ( (Tclass._System.___hFunc3 arg0@@197 arg1@@95 arg2@@47 arg3@@26)) )))
(assert (forall ((|#$T0@@59| T@U) (|#$T1@@43| T@U) (|#$T2@@24| T@U) (|#$R@@72| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@59|) TyType) (= (type |#$T1@@43|) TyType)) (= (type |#$T2@@24|) TyType)) (= (type |#$R@@72|) TyType)) (and (= (Tag (Tclass._System.___hFunc3 |#$T0@@59| |#$T1@@43| |#$T2@@24| |#$R@@72|)) Tagclass._System.___hFunc3) (= (TagFamily (Tclass._System.___hFunc3 |#$T0@@59| |#$T1@@43| |#$T2@@24| |#$R@@72|)) |tytagFamily$_#Func3|))) :qid |unknown.0:0| :skolemid |910| :pattern ( (Tclass._System.___hFunc3 |#$T0@@59| |#$T1@@43| |#$T2@@24| |#$R@@72|)) )))
(assert (forall ((arg0@@198 T@U) ) (! (= (type (Tclass._System.___hFunc3_0 arg0@@198)) TyType) :qid |funType:Tclass._System.___hFunc3_0| :pattern ( (Tclass._System.___hFunc3_0 arg0@@198)) )))
(assert (forall ((|#$T0@@60| T@U) (|#$T1@@44| T@U) (|#$T2@@25| T@U) (|#$R@@73| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@60|) TyType) (= (type |#$T1@@44|) TyType)) (= (type |#$T2@@25|) TyType)) (= (type |#$R@@73|) TyType)) (= (Tclass._System.___hFunc3_0 (Tclass._System.___hFunc3 |#$T0@@60| |#$T1@@44| |#$T2@@25| |#$R@@73|)) |#$T0@@60|)) :qid |unknown.0:0| :skolemid |911| :pattern ( (Tclass._System.___hFunc3 |#$T0@@60| |#$T1@@44| |#$T2@@25| |#$R@@73|)) )))
(assert (forall ((arg0@@199 T@U) ) (! (= (type (Tclass._System.___hFunc3_1 arg0@@199)) TyType) :qid |funType:Tclass._System.___hFunc3_1| :pattern ( (Tclass._System.___hFunc3_1 arg0@@199)) )))
(assert (forall ((|#$T0@@61| T@U) (|#$T1@@45| T@U) (|#$T2@@26| T@U) (|#$R@@74| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@61|) TyType) (= (type |#$T1@@45|) TyType)) (= (type |#$T2@@26|) TyType)) (= (type |#$R@@74|) TyType)) (= (Tclass._System.___hFunc3_1 (Tclass._System.___hFunc3 |#$T0@@61| |#$T1@@45| |#$T2@@26| |#$R@@74|)) |#$T1@@45|)) :qid |unknown.0:0| :skolemid |912| :pattern ( (Tclass._System.___hFunc3 |#$T0@@61| |#$T1@@45| |#$T2@@26| |#$R@@74|)) )))
(assert (forall ((arg0@@200 T@U) ) (! (= (type (Tclass._System.___hFunc3_2 arg0@@200)) TyType) :qid |funType:Tclass._System.___hFunc3_2| :pattern ( (Tclass._System.___hFunc3_2 arg0@@200)) )))
(assert (forall ((|#$T0@@62| T@U) (|#$T1@@46| T@U) (|#$T2@@27| T@U) (|#$R@@75| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@62|) TyType) (= (type |#$T1@@46|) TyType)) (= (type |#$T2@@27|) TyType)) (= (type |#$R@@75|) TyType)) (= (Tclass._System.___hFunc3_2 (Tclass._System.___hFunc3 |#$T0@@62| |#$T1@@46| |#$T2@@27| |#$R@@75|)) |#$T2@@27|)) :qid |unknown.0:0| :skolemid |913| :pattern ( (Tclass._System.___hFunc3 |#$T0@@62| |#$T1@@46| |#$T2@@27| |#$R@@75|)) )))
(assert (forall ((arg0@@201 T@U) ) (! (= (type (Tclass._System.___hFunc3_3 arg0@@201)) TyType) :qid |funType:Tclass._System.___hFunc3_3| :pattern ( (Tclass._System.___hFunc3_3 arg0@@201)) )))
(assert (forall ((|#$T0@@63| T@U) (|#$T1@@47| T@U) (|#$T2@@28| T@U) (|#$R@@76| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@63|) TyType) (= (type |#$T1@@47|) TyType)) (= (type |#$T2@@28|) TyType)) (= (type |#$R@@76|) TyType)) (= (Tclass._System.___hFunc3_3 (Tclass._System.___hFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@28| |#$R@@76|)) |#$R@@76|)) :qid |unknown.0:0| :skolemid |914| :pattern ( (Tclass._System.___hFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@28| |#$R@@76|)) )))
(assert (forall ((|#$T0@@64| T@U) (|#$T1@@48| T@U) (|#$T2@@29| T@U) (|#$R@@77| T@U) (bx@@59 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@64|) TyType) (= (type |#$T1@@48|) TyType)) (= (type |#$T2@@29|) TyType)) (= (type |#$R@@77|) TyType)) (= (type bx@@59) BoxType)) ($IsBox bx@@59 (Tclass._System.___hFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@29| |#$R@@77|))) (and (= ($Box ($Unbox HandleTypeType bx@@59)) bx@@59) ($Is ($Unbox HandleTypeType bx@@59) (Tclass._System.___hFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@29| |#$R@@77|)))) :qid |unknown.0:0| :skolemid |915| :pattern ( ($IsBox bx@@59 (Tclass._System.___hFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@29| |#$R@@77|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@202 T@T) (arg1@@96 T@T) (arg2@@48 T@T) (arg3@@27 T@T) (arg4@@18 T@T) ) (! (= (Ctor (MapType5Type arg0@@202 arg1@@96 arg2@@48 arg3@@27 arg4@@18)) 27) :qid |ctor:MapType5Type| )) (forall ((arg0@@203 T@T) (arg1@@97 T@T) (arg2@@49 T@T) (arg3@@28 T@T) (arg4@@19 T@T) ) (! (= (MapType5TypeInv0 (MapType5Type arg0@@203 arg1@@97 arg2@@49 arg3@@28 arg4@@19)) arg0@@203) :qid |typeInv:MapType5TypeInv0| :pattern ( (MapType5Type arg0@@203 arg1@@97 arg2@@49 arg3@@28 arg4@@19)) ))) (forall ((arg0@@204 T@T) (arg1@@98 T@T) (arg2@@50 T@T) (arg3@@29 T@T) (arg4@@20 T@T) ) (! (= (MapType5TypeInv1 (MapType5Type arg0@@204 arg1@@98 arg2@@50 arg3@@29 arg4@@20)) arg1@@98) :qid |typeInv:MapType5TypeInv1| :pattern ( (MapType5Type arg0@@204 arg1@@98 arg2@@50 arg3@@29 arg4@@20)) ))) (forall ((arg0@@205 T@T) (arg1@@99 T@T) (arg2@@51 T@T) (arg3@@30 T@T) (arg4@@21 T@T) ) (! (= (MapType5TypeInv2 (MapType5Type arg0@@205 arg1@@99 arg2@@51 arg3@@30 arg4@@21)) arg2@@51) :qid |typeInv:MapType5TypeInv2| :pattern ( (MapType5Type arg0@@205 arg1@@99 arg2@@51 arg3@@30 arg4@@21)) ))) (forall ((arg0@@206 T@T) (arg1@@100 T@T) (arg2@@52 T@T) (arg3@@31 T@T) (arg4@@22 T@T) ) (! (= (MapType5TypeInv3 (MapType5Type arg0@@206 arg1@@100 arg2@@52 arg3@@31 arg4@@22)) arg3@@31) :qid |typeInv:MapType5TypeInv3| :pattern ( (MapType5Type arg0@@206 arg1@@100 arg2@@52 arg3@@31 arg4@@22)) ))) (forall ((arg0@@207 T@T) (arg1@@101 T@T) (arg2@@53 T@T) (arg3@@32 T@T) (arg4@@23 T@T) ) (! (= (MapType5TypeInv4 (MapType5Type arg0@@207 arg1@@101 arg2@@53 arg3@@32 arg4@@23)) arg4@@23) :qid |typeInv:MapType5TypeInv4| :pattern ( (MapType5Type arg0@@207 arg1@@101 arg2@@53 arg3@@32 arg4@@23)) ))) (forall ((arg0@@208 T@U) (arg1@@102 T@U) (arg2@@54 T@U) (arg3@@33 T@U) (arg4@@24 T@U) ) (! (let ((aVar4@@0 (MapType5TypeInv4 (type arg0@@208)))) (= (type (MapType5Select arg0@@208 arg1@@102 arg2@@54 arg3@@33 arg4@@24)) aVar4@@0)) :qid |funType:MapType5Select| :pattern ( (MapType5Select arg0@@208 arg1@@102 arg2@@54 arg3@@33 arg4@@24)) ))) (forall ((arg0@@209 T@U) (arg1@@103 T@U) (arg2@@55 T@U) (arg3@@34 T@U) (arg4@@25 T@U) (arg5@@12 T@U) ) (! (let ((aVar4@@1 (type arg5@@12))) (let ((aVar3@@3 (type arg4@@25))) (let ((aVar2@@4 (type arg3@@34))) (let ((aVar1@@5 (type arg2@@55))) (let ((aVar0@@3 (type arg1@@103))) (= (type (MapType5Store arg0@@209 arg1@@103 arg2@@55 arg3@@34 arg4@@25 arg5@@12)) (MapType5Type aVar0@@3 aVar1@@5 aVar2@@4 aVar3@@3 aVar4@@1))))))) :qid |funType:MapType5Store| :pattern ( (MapType5Store arg0@@209 arg1@@103 arg2@@55 arg3@@34 arg4@@25 arg5@@12)) ))) (forall ((m@@61 T@U) (x0@@21 T@U) (x1@@15 T@U) (x2@@11 T@U) (x3@@6 T@U) (val@@22 T@U) ) (! (let ((aVar4@@2 (MapType5TypeInv4 (type m@@61)))) (=> (= (type val@@22) aVar4@@2) (= (MapType5Select (MapType5Store m@@61 x0@@21 x1@@15 x2@@11 x3@@6 val@@22) x0@@21 x1@@15 x2@@11 x3@@6) val@@22))) :qid |mapAx0:MapType5Select| :weight 0 ))) (and (and (and (and (forall ((val@@23 T@U) (m@@62 T@U) (x0@@22 T@U) (x1@@16 T@U) (x2@@12 T@U) (x3@@7 T@U) (y0@@16 T@U) (y1@@12 T@U) (y2@@9 T@U) (y3@@5 T@U) ) (!  (or (= x0@@22 y0@@16) (= (MapType5Select (MapType5Store m@@62 x0@@22 x1@@16 x2@@12 x3@@7 val@@23) y0@@16 y1@@12 y2@@9 y3@@5) (MapType5Select m@@62 y0@@16 y1@@12 y2@@9 y3@@5))) :qid |mapAx1:MapType5Select:0| :weight 0 )) (forall ((val@@24 T@U) (m@@63 T@U) (x0@@23 T@U) (x1@@17 T@U) (x2@@13 T@U) (x3@@8 T@U) (y0@@17 T@U) (y1@@13 T@U) (y2@@10 T@U) (y3@@6 T@U) ) (!  (or (= x1@@17 y1@@13) (= (MapType5Select (MapType5Store m@@63 x0@@23 x1@@17 x2@@13 x3@@8 val@@24) y0@@17 y1@@13 y2@@10 y3@@6) (MapType5Select m@@63 y0@@17 y1@@13 y2@@10 y3@@6))) :qid |mapAx1:MapType5Select:1| :weight 0 ))) (forall ((val@@25 T@U) (m@@64 T@U) (x0@@24 T@U) (x1@@18 T@U) (x2@@14 T@U) (x3@@9 T@U) (y0@@18 T@U) (y1@@14 T@U) (y2@@11 T@U) (y3@@7 T@U) ) (!  (or (= x2@@14 y2@@11) (= (MapType5Select (MapType5Store m@@64 x0@@24 x1@@18 x2@@14 x3@@9 val@@25) y0@@18 y1@@14 y2@@11 y3@@7) (MapType5Select m@@64 y0@@18 y1@@14 y2@@11 y3@@7))) :qid |mapAx1:MapType5Select:2| :weight 0 ))) (forall ((val@@26 T@U) (m@@65 T@U) (x0@@25 T@U) (x1@@19 T@U) (x2@@15 T@U) (x3@@10 T@U) (y0@@19 T@U) (y1@@15 T@U) (y2@@12 T@U) (y3@@8 T@U) ) (!  (or (= x3@@10 y3@@8) (= (MapType5Select (MapType5Store m@@65 x0@@25 x1@@19 x2@@15 x3@@10 val@@26) y0@@19 y1@@15 y2@@12 y3@@8) (MapType5Select m@@65 y0@@19 y1@@15 y2@@12 y3@@8))) :qid |mapAx1:MapType5Select:3| :weight 0 ))) (forall ((val@@27 T@U) (m@@66 T@U) (x0@@26 T@U) (x1@@20 T@U) (x2@@16 T@U) (x3@@11 T@U) (y0@@20 T@U) (y1@@16 T@U) (y2@@13 T@U) (y3@@9 T@U) ) (!  (or true (= (MapType5Select (MapType5Store m@@66 x0@@26 x1@@20 x2@@16 x3@@11 val@@27) y0@@20 y1@@16 y2@@13 y3@@9) (MapType5Select m@@66 y0@@20 y1@@16 y2@@13 y3@@9))) :qid |mapAx2:MapType5Select| :weight 0 )))) (forall ((arg0@@210 T@U) (arg1@@104 T@U) (arg2@@56 T@U) (arg3@@35 T@U) (arg4@@26 T@U) (arg5@@13 T@U) (arg6@@4 T@U) (arg7@@1 T@U) (arg8@@1 T@U) ) (! (= (type (Apply3 arg0@@210 arg1@@104 arg2@@56 arg3@@35 arg4@@26 arg5@@13 arg6@@4 arg7@@1 arg8@@1)) BoxType) :qid |funType:Apply3| :pattern ( (Apply3 arg0@@210 arg1@@104 arg2@@56 arg3@@35 arg4@@26 arg5@@13 arg6@@4 arg7@@1 arg8@@1)) ))) (forall ((arg0@@211 T@U) (arg1@@105 T@U) (arg2@@57 T@U) ) (! (= (type (Handle3 arg0@@211 arg1@@105 arg2@@57)) HandleTypeType) :qid |funType:Handle3| :pattern ( (Handle3 arg0@@211 arg1@@105 arg2@@57)) ))))
(assert (forall ((t0@@76 T@U) (t1@@52 T@U) (t2@@29 T@U) (t3@@14 T@U) (heap@@21 T@U) (h@@45 T@U) (r@@22 T@U) (rd@@11 T@U) (bx0@@41 T@U) (bx1@@27 T@U) (bx2@@13 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@76) TyType) (= (type t1@@52) TyType)) (= (type t2@@29) TyType)) (= (type t3@@14) TyType)) (= (type heap@@21) (MapType0Type refType MapType1Type))) (= (type h@@45) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@22) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@11) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@41) BoxType)) (= (type bx1@@27) BoxType)) (= (type bx2@@13) BoxType)) (= (Apply3 t0@@76 t1@@52 t2@@29 t3@@14 heap@@21 (Handle3 h@@45 r@@22 rd@@11) bx0@@41 bx1@@27 bx2@@13) (MapType5Select h@@45 heap@@21 bx0@@41 bx1@@27 bx2@@13))) :qid |unknown.0:0| :skolemid |916| :pattern ( (Apply3 t0@@76 t1@@52 t2@@29 t3@@14 heap@@21 (Handle3 h@@45 r@@22 rd@@11) bx0@@41 bx1@@27 bx2@@13)) )))
(assert (forall ((t0@@77 T@U) (t1@@53 T@U) (t2@@30 T@U) (t3@@15 T@U) (heap@@22 T@U) (h@@46 T@U) (r@@23 T@U) (rd@@12 T@U) (bx0@@42 T@U) (bx1@@28 T@U) (bx2@@14 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@77) TyType) (= (type t1@@53) TyType)) (= (type t2@@30) TyType)) (= (type t3@@15) TyType)) (= (type heap@@22) (MapType0Type refType MapType1Type))) (= (type h@@46) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@23) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@12) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@42) BoxType)) (= (type bx1@@28) BoxType)) (= (type bx2@@14) BoxType)) (U_2_bool (MapType5Select r@@23 heap@@22 bx0@@42 bx1@@28 bx2@@14))) (Requires3 t0@@77 t1@@53 t2@@30 t3@@15 heap@@22 (Handle3 h@@46 r@@23 rd@@12) bx0@@42 bx1@@28 bx2@@14)) :qid |unknown.0:0| :skolemid |917| :pattern ( (Requires3 t0@@77 t1@@53 t2@@30 t3@@15 heap@@22 (Handle3 h@@46 r@@23 rd@@12) bx0@@42 bx1@@28 bx2@@14)) )))
(assert (forall ((arg0@@212 T@U) (arg1@@106 T@U) (arg2@@58 T@U) (arg3@@36 T@U) (arg4@@27 T@U) (arg5@@14 T@U) (arg6@@5 T@U) (arg7@@2 T@U) (arg8@@2 T@U) ) (! (= (type (Reads3 arg0@@212 arg1@@106 arg2@@58 arg3@@36 arg4@@27 arg5@@14 arg6@@5 arg7@@2 arg8@@2)) (MapType0Type BoxType boolType)) :qid |funType:Reads3| :pattern ( (Reads3 arg0@@212 arg1@@106 arg2@@58 arg3@@36 arg4@@27 arg5@@14 arg6@@5 arg7@@2 arg8@@2)) )))
(assert (forall ((t0@@78 T@U) (t1@@54 T@U) (t2@@31 T@U) (t3@@16 T@U) (heap@@23 T@U) (h@@47 T@U) (r@@24 T@U) (rd@@13 T@U) (bx0@@43 T@U) (bx1@@29 T@U) (bx2@@15 T@U) (bx@@60 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@78) TyType) (= (type t1@@54) TyType)) (= (type t2@@31) TyType)) (= (type t3@@16) TyType)) (= (type heap@@23) (MapType0Type refType MapType1Type))) (= (type h@@47) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@24) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@13) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@43) BoxType)) (= (type bx1@@29) BoxType)) (= (type bx2@@15) BoxType)) (= (type bx@@60) BoxType)) (= (U_2_bool (MapType0Select (Reads3 t0@@78 t1@@54 t2@@31 t3@@16 heap@@23 (Handle3 h@@47 r@@24 rd@@13) bx0@@43 bx1@@29 bx2@@15) bx@@60)) (U_2_bool (MapType0Select (MapType5Select rd@@13 heap@@23 bx0@@43 bx1@@29 bx2@@15) bx@@60)))) :qid |unknown.0:0| :skolemid |918| :pattern ( (MapType0Select (Reads3 t0@@78 t1@@54 t2@@31 t3@@16 heap@@23 (Handle3 h@@47 r@@24 rd@@13) bx0@@43 bx1@@29 bx2@@15) bx@@60)) )))
(assert (forall ((t0@@79 T@U) (t1@@55 T@U) (t2@@32 T@U) (t3@@17 T@U) (h0@@24 T@U) (h1@@24 T@U) (f@@53 T@U) (bx0@@44 T@U) (bx1@@30 T@U) (bx2@@16 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@79) TyType) (= (type t1@@55) TyType)) (= (type t2@@32) TyType)) (= (type t3@@17) TyType)) (= (type h0@@24) (MapType0Type refType MapType1Type))) (= (type h1@@24) (MapType0Type refType MapType1Type))) (= (type f@@53) HandleTypeType)) (= (type bx0@@44) BoxType)) (= (type bx1@@30) BoxType)) (= (type bx2@@16) BoxType)) (and (and (and ($HeapSucc h0@@24 h1@@24) (and ($IsGoodHeap h0@@24) ($IsGoodHeap h1@@24))) (and (and (and ($IsBox bx0@@44 t0@@79) ($IsBox bx1@@30 t1@@55)) ($IsBox bx2@@16 t2@@32)) ($Is f@@53 (Tclass._System.___hFunc3 t0@@79 t1@@55 t2@@32 t3@@17)))) (forall ((o@@68 T@U) (fld@@23 T@U) ) (! (let ((a@@106 (FieldTypeInv0 (type fld@@23)))) (=> (and (and (= (type o@@68) refType) (= (type fld@@23) (FieldType a@@106))) (and (not (= o@@68 null)) (U_2_bool (MapType0Select (Reads3 t0@@79 t1@@55 t2@@32 t3@@17 h0@@24 f@@53 bx0@@44 bx1@@30 bx2@@16) ($Box o@@68))))) (= (MapType1Select (MapType0Select h0@@24 o@@68) fld@@23) (MapType1Select (MapType0Select h1@@24 o@@68) fld@@23)))) :qid |unknown.0:0| :skolemid |919| :no-pattern (type o@@68) :no-pattern (type fld@@23) :no-pattern (U_2_int o@@68) :no-pattern (U_2_bool o@@68) :no-pattern (U_2_int fld@@23) :no-pattern (U_2_bool fld@@23) )))) (= (Reads3 t0@@79 t1@@55 t2@@32 t3@@17 h0@@24 f@@53 bx0@@44 bx1@@30 bx2@@16) (Reads3 t0@@79 t1@@55 t2@@32 t3@@17 h1@@24 f@@53 bx0@@44 bx1@@30 bx2@@16))) :qid |unknown.0:0| :skolemid |920| :pattern ( ($HeapSucc h0@@24 h1@@24) (Reads3 t0@@79 t1@@55 t2@@32 t3@@17 h1@@24 f@@53 bx0@@44 bx1@@30 bx2@@16)) )))
(assert (forall ((t0@@80 T@U) (t1@@56 T@U) (t2@@33 T@U) (t3@@18 T@U) (h0@@25 T@U) (h1@@25 T@U) (f@@54 T@U) (bx0@@45 T@U) (bx1@@31 T@U) (bx2@@17 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@80) TyType) (= (type t1@@56) TyType)) (= (type t2@@33) TyType)) (= (type t3@@18) TyType)) (= (type h0@@25) (MapType0Type refType MapType1Type))) (= (type h1@@25) (MapType0Type refType MapType1Type))) (= (type f@@54) HandleTypeType)) (= (type bx0@@45) BoxType)) (= (type bx1@@31) BoxType)) (= (type bx2@@17) BoxType)) (and (and (and ($HeapSucc h0@@25 h1@@25) (and ($IsGoodHeap h0@@25) ($IsGoodHeap h1@@25))) (and (and (and ($IsBox bx0@@45 t0@@80) ($IsBox bx1@@31 t1@@56)) ($IsBox bx2@@17 t2@@33)) ($Is f@@54 (Tclass._System.___hFunc3 t0@@80 t1@@56 t2@@33 t3@@18)))) (forall ((o@@69 T@U) (fld@@24 T@U) ) (! (let ((a@@107 (FieldTypeInv0 (type fld@@24)))) (=> (and (and (= (type o@@69) refType) (= (type fld@@24) (FieldType a@@107))) (and (not (= o@@69 null)) (U_2_bool (MapType0Select (Reads3 t0@@80 t1@@56 t2@@33 t3@@18 h1@@25 f@@54 bx0@@45 bx1@@31 bx2@@17) ($Box o@@69))))) (= (MapType1Select (MapType0Select h0@@25 o@@69) fld@@24) (MapType1Select (MapType0Select h1@@25 o@@69) fld@@24)))) :qid |unknown.0:0| :skolemid |921| :no-pattern (type o@@69) :no-pattern (type fld@@24) :no-pattern (U_2_int o@@69) :no-pattern (U_2_bool o@@69) :no-pattern (U_2_int fld@@24) :no-pattern (U_2_bool fld@@24) )))) (= (Reads3 t0@@80 t1@@56 t2@@33 t3@@18 h0@@25 f@@54 bx0@@45 bx1@@31 bx2@@17) (Reads3 t0@@80 t1@@56 t2@@33 t3@@18 h1@@25 f@@54 bx0@@45 bx1@@31 bx2@@17))) :qid |unknown.0:0| :skolemid |922| :pattern ( ($HeapSucc h0@@25 h1@@25) (Reads3 t0@@80 t1@@56 t2@@33 t3@@18 h1@@25 f@@54 bx0@@45 bx1@@31 bx2@@17)) )))
(assert (forall ((t0@@81 T@U) (t1@@57 T@U) (t2@@34 T@U) (t3@@19 T@U) (h0@@26 T@U) (h1@@26 T@U) (f@@55 T@U) (bx0@@46 T@U) (bx1@@32 T@U) (bx2@@18 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@81) TyType) (= (type t1@@57) TyType)) (= (type t2@@34) TyType)) (= (type t3@@19) TyType)) (= (type h0@@26) (MapType0Type refType MapType1Type))) (= (type h1@@26) (MapType0Type refType MapType1Type))) (= (type f@@55) HandleTypeType)) (= (type bx0@@46) BoxType)) (= (type bx1@@32) BoxType)) (= (type bx2@@18) BoxType)) (and (and (and ($HeapSucc h0@@26 h1@@26) (and ($IsGoodHeap h0@@26) ($IsGoodHeap h1@@26))) (and (and (and ($IsBox bx0@@46 t0@@81) ($IsBox bx1@@32 t1@@57)) ($IsBox bx2@@18 t2@@34)) ($Is f@@55 (Tclass._System.___hFunc3 t0@@81 t1@@57 t2@@34 t3@@19)))) (forall ((o@@70 T@U) (fld@@25 T@U) ) (! (let ((a@@108 (FieldTypeInv0 (type fld@@25)))) (=> (and (and (= (type o@@70) refType) (= (type fld@@25) (FieldType a@@108))) (and (not (= o@@70 null)) (U_2_bool (MapType0Select (Reads3 t0@@81 t1@@57 t2@@34 t3@@19 h0@@26 f@@55 bx0@@46 bx1@@32 bx2@@18) ($Box o@@70))))) (= (MapType1Select (MapType0Select h0@@26 o@@70) fld@@25) (MapType1Select (MapType0Select h1@@26 o@@70) fld@@25)))) :qid |unknown.0:0| :skolemid |923| :no-pattern (type o@@70) :no-pattern (type fld@@25) :no-pattern (U_2_int o@@70) :no-pattern (U_2_bool o@@70) :no-pattern (U_2_int fld@@25) :no-pattern (U_2_bool fld@@25) )))) (= (Requires3 t0@@81 t1@@57 t2@@34 t3@@19 h0@@26 f@@55 bx0@@46 bx1@@32 bx2@@18) (Requires3 t0@@81 t1@@57 t2@@34 t3@@19 h1@@26 f@@55 bx0@@46 bx1@@32 bx2@@18))) :qid |unknown.0:0| :skolemid |924| :pattern ( ($HeapSucc h0@@26 h1@@26) (Requires3 t0@@81 t1@@57 t2@@34 t3@@19 h1@@26 f@@55 bx0@@46 bx1@@32 bx2@@18)) )))
(assert (forall ((t0@@82 T@U) (t1@@58 T@U) (t2@@35 T@U) (t3@@20 T@U) (h0@@27 T@U) (h1@@27 T@U) (f@@56 T@U) (bx0@@47 T@U) (bx1@@33 T@U) (bx2@@19 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@82) TyType) (= (type t1@@58) TyType)) (= (type t2@@35) TyType)) (= (type t3@@20) TyType)) (= (type h0@@27) (MapType0Type refType MapType1Type))) (= (type h1@@27) (MapType0Type refType MapType1Type))) (= (type f@@56) HandleTypeType)) (= (type bx0@@47) BoxType)) (= (type bx1@@33) BoxType)) (= (type bx2@@19) BoxType)) (and (and (and ($HeapSucc h0@@27 h1@@27) (and ($IsGoodHeap h0@@27) ($IsGoodHeap h1@@27))) (and (and (and ($IsBox bx0@@47 t0@@82) ($IsBox bx1@@33 t1@@58)) ($IsBox bx2@@19 t2@@35)) ($Is f@@56 (Tclass._System.___hFunc3 t0@@82 t1@@58 t2@@35 t3@@20)))) (forall ((o@@71 T@U) (fld@@26 T@U) ) (! (let ((a@@109 (FieldTypeInv0 (type fld@@26)))) (=> (and (and (= (type o@@71) refType) (= (type fld@@26) (FieldType a@@109))) (and (not (= o@@71 null)) (U_2_bool (MapType0Select (Reads3 t0@@82 t1@@58 t2@@35 t3@@20 h1@@27 f@@56 bx0@@47 bx1@@33 bx2@@19) ($Box o@@71))))) (= (MapType1Select (MapType0Select h0@@27 o@@71) fld@@26) (MapType1Select (MapType0Select h1@@27 o@@71) fld@@26)))) :qid |unknown.0:0| :skolemid |925| :no-pattern (type o@@71) :no-pattern (type fld@@26) :no-pattern (U_2_int o@@71) :no-pattern (U_2_bool o@@71) :no-pattern (U_2_int fld@@26) :no-pattern (U_2_bool fld@@26) )))) (= (Requires3 t0@@82 t1@@58 t2@@35 t3@@20 h0@@27 f@@56 bx0@@47 bx1@@33 bx2@@19) (Requires3 t0@@82 t1@@58 t2@@35 t3@@20 h1@@27 f@@56 bx0@@47 bx1@@33 bx2@@19))) :qid |unknown.0:0| :skolemid |926| :pattern ( ($HeapSucc h0@@27 h1@@27) (Requires3 t0@@82 t1@@58 t2@@35 t3@@20 h1@@27 f@@56 bx0@@47 bx1@@33 bx2@@19)) )))
(assert (forall ((t0@@83 T@U) (t1@@59 T@U) (t2@@36 T@U) (t3@@21 T@U) (h0@@28 T@U) (h1@@28 T@U) (f@@57 T@U) (bx0@@48 T@U) (bx1@@34 T@U) (bx2@@20 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@83) TyType) (= (type t1@@59) TyType)) (= (type t2@@36) TyType)) (= (type t3@@21) TyType)) (= (type h0@@28) (MapType0Type refType MapType1Type))) (= (type h1@@28) (MapType0Type refType MapType1Type))) (= (type f@@57) HandleTypeType)) (= (type bx0@@48) BoxType)) (= (type bx1@@34) BoxType)) (= (type bx2@@20) BoxType)) (and (and (and ($HeapSucc h0@@28 h1@@28) (and ($IsGoodHeap h0@@28) ($IsGoodHeap h1@@28))) (and (and (and ($IsBox bx0@@48 t0@@83) ($IsBox bx1@@34 t1@@59)) ($IsBox bx2@@20 t2@@36)) ($Is f@@57 (Tclass._System.___hFunc3 t0@@83 t1@@59 t2@@36 t3@@21)))) (forall ((o@@72 T@U) (fld@@27 T@U) ) (! (let ((a@@110 (FieldTypeInv0 (type fld@@27)))) (=> (and (and (= (type o@@72) refType) (= (type fld@@27) (FieldType a@@110))) (and (not (= o@@72 null)) (U_2_bool (MapType0Select (Reads3 t0@@83 t1@@59 t2@@36 t3@@21 h0@@28 f@@57 bx0@@48 bx1@@34 bx2@@20) ($Box o@@72))))) (= (MapType1Select (MapType0Select h0@@28 o@@72) fld@@27) (MapType1Select (MapType0Select h1@@28 o@@72) fld@@27)))) :qid |unknown.0:0| :skolemid |927| :no-pattern (type o@@72) :no-pattern (type fld@@27) :no-pattern (U_2_int o@@72) :no-pattern (U_2_bool o@@72) :no-pattern (U_2_int fld@@27) :no-pattern (U_2_bool fld@@27) )))) (= (Apply3 t0@@83 t1@@59 t2@@36 t3@@21 h0@@28 f@@57 bx0@@48 bx1@@34 bx2@@20) (Apply3 t0@@83 t1@@59 t2@@36 t3@@21 h1@@28 f@@57 bx0@@48 bx1@@34 bx2@@20))) :qid |unknown.0:0| :skolemid |928| :pattern ( ($HeapSucc h0@@28 h1@@28) (Apply3 t0@@83 t1@@59 t2@@36 t3@@21 h1@@28 f@@57 bx0@@48 bx1@@34 bx2@@20)) )))
(assert (forall ((t0@@84 T@U) (t1@@60 T@U) (t2@@37 T@U) (t3@@22 T@U) (h0@@29 T@U) (h1@@29 T@U) (f@@58 T@U) (bx0@@49 T@U) (bx1@@35 T@U) (bx2@@21 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@84) TyType) (= (type t1@@60) TyType)) (= (type t2@@37) TyType)) (= (type t3@@22) TyType)) (= (type h0@@29) (MapType0Type refType MapType1Type))) (= (type h1@@29) (MapType0Type refType MapType1Type))) (= (type f@@58) HandleTypeType)) (= (type bx0@@49) BoxType)) (= (type bx1@@35) BoxType)) (= (type bx2@@21) BoxType)) (and (and (and ($HeapSucc h0@@29 h1@@29) (and ($IsGoodHeap h0@@29) ($IsGoodHeap h1@@29))) (and (and (and ($IsBox bx0@@49 t0@@84) ($IsBox bx1@@35 t1@@60)) ($IsBox bx2@@21 t2@@37)) ($Is f@@58 (Tclass._System.___hFunc3 t0@@84 t1@@60 t2@@37 t3@@22)))) (forall ((o@@73 T@U) (fld@@28 T@U) ) (! (let ((a@@111 (FieldTypeInv0 (type fld@@28)))) (=> (and (and (= (type o@@73) refType) (= (type fld@@28) (FieldType a@@111))) (and (not (= o@@73 null)) (U_2_bool (MapType0Select (Reads3 t0@@84 t1@@60 t2@@37 t3@@22 h1@@29 f@@58 bx0@@49 bx1@@35 bx2@@21) ($Box o@@73))))) (= (MapType1Select (MapType0Select h0@@29 o@@73) fld@@28) (MapType1Select (MapType0Select h1@@29 o@@73) fld@@28)))) :qid |unknown.0:0| :skolemid |929| :no-pattern (type o@@73) :no-pattern (type fld@@28) :no-pattern (U_2_int o@@73) :no-pattern (U_2_bool o@@73) :no-pattern (U_2_int fld@@28) :no-pattern (U_2_bool fld@@28) )))) (= (Apply3 t0@@84 t1@@60 t2@@37 t3@@22 h0@@29 f@@58 bx0@@49 bx1@@35 bx2@@21) (Apply3 t0@@84 t1@@60 t2@@37 t3@@22 h1@@29 f@@58 bx0@@49 bx1@@35 bx2@@21))) :qid |unknown.0:0| :skolemid |930| :pattern ( ($HeapSucc h0@@29 h1@@29) (Apply3 t0@@84 t1@@60 t2@@37 t3@@22 h1@@29 f@@58 bx0@@49 bx1@@35 bx2@@21)) )))
(assert (forall ((t0@@85 T@U) (t1@@61 T@U) (t2@@38 T@U) (t3@@23 T@U) (heap@@24 T@U) (f@@59 T@U) (bx0@@50 T@U) (bx1@@36 T@U) (bx2@@22 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@85) TyType) (= (type t1@@61) TyType)) (= (type t2@@38) TyType)) (= (type t3@@23) TyType)) (= (type heap@@24) (MapType0Type refType MapType1Type))) (= (type f@@59) HandleTypeType)) (= (type bx0@@50) BoxType)) (= (type bx1@@36) BoxType)) (= (type bx2@@22) BoxType)) (and ($IsGoodHeap heap@@24) (and (and (and ($IsBox bx0@@50 t0@@85) ($IsBox bx1@@36 t1@@61)) ($IsBox bx2@@22 t2@@38)) ($Is f@@59 (Tclass._System.___hFunc3 t0@@85 t1@@61 t2@@38 t3@@23))))) (= (|Set#Equal| (Reads3 t0@@85 t1@@61 t2@@38 t3@@23 $OneHeap f@@59 bx0@@50 bx1@@36 bx2@@22) (|Set#Empty| BoxType)) (|Set#Equal| (Reads3 t0@@85 t1@@61 t2@@38 t3@@23 heap@@24 f@@59 bx0@@50 bx1@@36 bx2@@22) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |931| :pattern ( (Reads3 t0@@85 t1@@61 t2@@38 t3@@23 $OneHeap f@@59 bx0@@50 bx1@@36 bx2@@22) ($IsGoodHeap heap@@24)) :pattern ( (Reads3 t0@@85 t1@@61 t2@@38 t3@@23 heap@@24 f@@59 bx0@@50 bx1@@36 bx2@@22)) )))
(assert (forall ((t0@@86 T@U) (t1@@62 T@U) (t2@@39 T@U) (t3@@24 T@U) (heap@@25 T@U) (f@@60 T@U) (bx0@@51 T@U) (bx1@@37 T@U) (bx2@@23 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@86) TyType) (= (type t1@@62) TyType)) (= (type t2@@39) TyType)) (= (type t3@@24) TyType)) (= (type heap@@25) (MapType0Type refType MapType1Type))) (= (type f@@60) HandleTypeType)) (= (type bx0@@51) BoxType)) (= (type bx1@@37) BoxType)) (= (type bx2@@23) BoxType)) (and (and ($IsGoodHeap heap@@25) (and (and (and ($IsBox bx0@@51 t0@@86) ($IsBox bx1@@37 t1@@62)) ($IsBox bx2@@23 t2@@39)) ($Is f@@60 (Tclass._System.___hFunc3 t0@@86 t1@@62 t2@@39 t3@@24)))) (|Set#Equal| (Reads3 t0@@86 t1@@62 t2@@39 t3@@24 $OneHeap f@@60 bx0@@51 bx1@@37 bx2@@23) (|Set#Empty| BoxType)))) (= (Requires3 t0@@86 t1@@62 t2@@39 t3@@24 $OneHeap f@@60 bx0@@51 bx1@@37 bx2@@23) (Requires3 t0@@86 t1@@62 t2@@39 t3@@24 heap@@25 f@@60 bx0@@51 bx1@@37 bx2@@23))) :qid |unknown.0:0| :skolemid |932| :pattern ( (Requires3 t0@@86 t1@@62 t2@@39 t3@@24 $OneHeap f@@60 bx0@@51 bx1@@37 bx2@@23) ($IsGoodHeap heap@@25)) :pattern ( (Requires3 t0@@86 t1@@62 t2@@39 t3@@24 heap@@25 f@@60 bx0@@51 bx1@@37 bx2@@23)) )))
(assert (forall ((f@@61 T@U) (t0@@87 T@U) (t1@@63 T@U) (t2@@40 T@U) (t3@@25 T@U) ) (!  (=> (and (and (and (and (= (type f@@61) HandleTypeType) (= (type t0@@87) TyType)) (= (type t1@@63) TyType)) (= (type t2@@40) TyType)) (= (type t3@@25) TyType)) (= ($Is f@@61 (Tclass._System.___hFunc3 t0@@87 t1@@63 t2@@40 t3@@25)) (forall ((h@@48 T@U) (bx0@@52 T@U) (bx1@@38 T@U) (bx2@@24 T@U) ) (!  (=> (and (and (and (and (= (type h@@48) (MapType0Type refType MapType1Type)) (= (type bx0@@52) BoxType)) (= (type bx1@@38) BoxType)) (= (type bx2@@24) BoxType)) (and (and ($IsGoodHeap h@@48) (and (and ($IsBox bx0@@52 t0@@87) ($IsBox bx1@@38 t1@@63)) ($IsBox bx2@@24 t2@@40))) (Requires3 t0@@87 t1@@63 t2@@40 t3@@25 h@@48 f@@61 bx0@@52 bx1@@38 bx2@@24))) ($IsBox (Apply3 t0@@87 t1@@63 t2@@40 t3@@25 h@@48 f@@61 bx0@@52 bx1@@38 bx2@@24) t3@@25)) :qid |DafnyPreludebpl.545:12| :skolemid |933| :pattern ( (Apply3 t0@@87 t1@@63 t2@@40 t3@@25 h@@48 f@@61 bx0@@52 bx1@@38 bx2@@24)) )))) :qid |unknown.0:0| :skolemid |934| :pattern ( ($Is f@@61 (Tclass._System.___hFunc3 t0@@87 t1@@63 t2@@40 t3@@25))) )))
(assert (forall ((f@@62 T@U) (t0@@88 T@U) (t1@@64 T@U) (t2@@41 T@U) (t3@@26 T@U) (u0@@3 T@U) (u1@@2 T@U) (u2@@1 T@U) (u3@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@62) HandleTypeType) (= (type t0@@88) TyType)) (= (type t1@@64) TyType)) (= (type t2@@41) TyType)) (= (type t3@@26) TyType)) (= (type u0@@3) TyType)) (= (type u1@@2) TyType)) (= (type u2@@1) TyType)) (= (type u3@@0) TyType)) (and (and (and (and ($Is f@@62 (Tclass._System.___hFunc3 t0@@88 t1@@64 t2@@41 t3@@26)) (forall ((bx@@61 T@U) ) (!  (=> (and (= (type bx@@61) BoxType) ($IsBox bx@@61 u0@@3)) ($IsBox bx@@61 t0@@88)) :qid |unknown.0:0| :skolemid |935| :pattern ( ($IsBox bx@@61 u0@@3)) :pattern ( ($IsBox bx@@61 t0@@88)) ))) (forall ((bx@@62 T@U) ) (!  (=> (and (= (type bx@@62) BoxType) ($IsBox bx@@62 u1@@2)) ($IsBox bx@@62 t1@@64)) :qid |unknown.0:0| :skolemid |936| :pattern ( ($IsBox bx@@62 u1@@2)) :pattern ( ($IsBox bx@@62 t1@@64)) ))) (forall ((bx@@63 T@U) ) (!  (=> (and (= (type bx@@63) BoxType) ($IsBox bx@@63 u2@@1)) ($IsBox bx@@63 t2@@41)) :qid |unknown.0:0| :skolemid |937| :pattern ( ($IsBox bx@@63 u2@@1)) :pattern ( ($IsBox bx@@63 t2@@41)) ))) (forall ((bx@@64 T@U) ) (!  (=> (and (= (type bx@@64) BoxType) ($IsBox bx@@64 t3@@26)) ($IsBox bx@@64 u3@@0)) :qid |unknown.0:0| :skolemid |938| :pattern ( ($IsBox bx@@64 t3@@26)) :pattern ( ($IsBox bx@@64 u3@@0)) )))) ($Is f@@62 (Tclass._System.___hFunc3 u0@@3 u1@@2 u2@@1 u3@@0))) :qid |unknown.0:0| :skolemid |939| :pattern ( ($Is f@@62 (Tclass._System.___hFunc3 t0@@88 t1@@64 t2@@41 t3@@26)) ($Is f@@62 (Tclass._System.___hFunc3 u0@@3 u1@@2 u2@@1 u3@@0))) )))
(assert (forall ((f@@63 T@U) (t0@@89 T@U) (t1@@65 T@U) (t2@@42 T@U) (t3@@27 T@U) (h@@49 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@63) HandleTypeType) (= (type t0@@89) TyType)) (= (type t1@@65) TyType)) (= (type t2@@42) TyType)) (= (type t3@@27) TyType)) (= (type h@@49) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@49)) (= ($IsAlloc f@@63 (Tclass._System.___hFunc3 t0@@89 t1@@65 t2@@42 t3@@27) h@@49) (forall ((bx0@@53 T@U) (bx1@@39 T@U) (bx2@@25 T@U) ) (!  (=> (and (and (= (type bx0@@53) BoxType) (= (type bx1@@39) BoxType)) (= (type bx2@@25) BoxType)) (=> (and (and (and (and ($IsBox bx0@@53 t0@@89) ($IsAllocBox bx0@@53 t0@@89 h@@49)) (and ($IsBox bx1@@39 t1@@65) ($IsAllocBox bx1@@39 t1@@65 h@@49))) (and ($IsBox bx2@@25 t2@@42) ($IsAllocBox bx2@@25 t2@@42 h@@49))) (Requires3 t0@@89 t1@@65 t2@@42 t3@@27 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25)) (forall ((r@@25 T@U) ) (!  (=> (= (type r@@25) refType) (=> (and (not (= r@@25 null)) (U_2_bool (MapType0Select (Reads3 t0@@89 t1@@65 t2@@42 t3@@27 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25) ($Box r@@25)))) (U_2_bool (MapType1Select (MapType0Select h@@49 r@@25) alloc)))) :qid |unknown.0:0| :skolemid |940| :pattern ( (MapType0Select (Reads3 t0@@89 t1@@65 t2@@42 t3@@27 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25) ($Box r@@25))) )))) :qid |unknown.0:0| :skolemid |941| :pattern ( (Apply3 t0@@89 t1@@65 t2@@42 t3@@27 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25)) :pattern ( (Reads3 t0@@89 t1@@65 t2@@42 t3@@27 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25)) )))) :qid |unknown.0:0| :skolemid |942| :pattern ( ($IsAlloc f@@63 (Tclass._System.___hFunc3 t0@@89 t1@@65 t2@@42 t3@@27) h@@49)) )))
(assert (forall ((f@@64 T@U) (t0@@90 T@U) (t1@@66 T@U) (t2@@43 T@U) (t3@@28 T@U) (h@@50 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@64) HandleTypeType) (= (type t0@@90) TyType)) (= (type t1@@66) TyType)) (= (type t2@@43) TyType)) (= (type t3@@28) TyType)) (= (type h@@50) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@50) ($IsAlloc f@@64 (Tclass._System.___hFunc3 t0@@90 t1@@66 t2@@43 t3@@28) h@@50))) (forall ((bx0@@54 T@U) (bx1@@40 T@U) (bx2@@26 T@U) ) (!  (=> (and (and (= (type bx0@@54) BoxType) (= (type bx1@@40) BoxType)) (= (type bx2@@26) BoxType)) (=> (and (and (and ($IsAllocBox bx0@@54 t0@@90 h@@50) ($IsAllocBox bx1@@40 t1@@66 h@@50)) ($IsAllocBox bx2@@26 t2@@43 h@@50)) (Requires3 t0@@90 t1@@66 t2@@43 t3@@28 h@@50 f@@64 bx0@@54 bx1@@40 bx2@@26)) ($IsAllocBox (Apply3 t0@@90 t1@@66 t2@@43 t3@@28 h@@50 f@@64 bx0@@54 bx1@@40 bx2@@26) t3@@28 h@@50))) :qid |unknown.0:0| :skolemid |943| :pattern ( (Apply3 t0@@90 t1@@66 t2@@43 t3@@28 h@@50 f@@64 bx0@@54 bx1@@40 bx2@@26)) ))) :qid |unknown.0:0| :skolemid |944| :pattern ( ($IsAlloc f@@64 (Tclass._System.___hFunc3 t0@@90 t1@@66 t2@@43 t3@@28) h@@50)) )))
(assert (forall ((arg0@@213 T@U) (arg1@@107 T@U) (arg2@@59 T@U) (arg3@@37 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3 arg0@@213 arg1@@107 arg2@@59 arg3@@37)) TyType) :qid |funType:Tclass._System.___hPartialFunc3| :pattern ( (Tclass._System.___hPartialFunc3 arg0@@213 arg1@@107 arg2@@59 arg3@@37)) )))
(assert (forall ((|#$T0@@65| T@U) (|#$T1@@49| T@U) (|#$T2@@30| T@U) (|#$R@@78| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@65|) TyType) (= (type |#$T1@@49|) TyType)) (= (type |#$T2@@30|) TyType)) (= (type |#$R@@78|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc3 |#$T0@@65| |#$T1@@49| |#$T2@@30| |#$R@@78|)) Tagclass._System.___hPartialFunc3) (= (TagFamily (Tclass._System.___hPartialFunc3 |#$T0@@65| |#$T1@@49| |#$T2@@30| |#$R@@78|)) |tytagFamily$_#PartialFunc3|))) :qid |unknown.0:0| :skolemid |945| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@65| |#$T1@@49| |#$T2@@30| |#$R@@78|)) )))
(assert (forall ((arg0@@214 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_0 arg0@@214)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_0| :pattern ( (Tclass._System.___hPartialFunc3_0 arg0@@214)) )))
(assert (forall ((|#$T0@@66| T@U) (|#$T1@@50| T@U) (|#$T2@@31| T@U) (|#$R@@79| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@66|) TyType) (= (type |#$T1@@50|) TyType)) (= (type |#$T2@@31|) TyType)) (= (type |#$R@@79|) TyType)) (= (Tclass._System.___hPartialFunc3_0 (Tclass._System.___hPartialFunc3 |#$T0@@66| |#$T1@@50| |#$T2@@31| |#$R@@79|)) |#$T0@@66|)) :qid |unknown.0:0| :skolemid |946| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@66| |#$T1@@50| |#$T2@@31| |#$R@@79|)) )))
(assert (forall ((arg0@@215 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_1 arg0@@215)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_1| :pattern ( (Tclass._System.___hPartialFunc3_1 arg0@@215)) )))
(assert (forall ((|#$T0@@67| T@U) (|#$T1@@51| T@U) (|#$T2@@32| T@U) (|#$R@@80| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@67|) TyType) (= (type |#$T1@@51|) TyType)) (= (type |#$T2@@32|) TyType)) (= (type |#$R@@80|) TyType)) (= (Tclass._System.___hPartialFunc3_1 (Tclass._System.___hPartialFunc3 |#$T0@@67| |#$T1@@51| |#$T2@@32| |#$R@@80|)) |#$T1@@51|)) :qid |unknown.0:0| :skolemid |947| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@67| |#$T1@@51| |#$T2@@32| |#$R@@80|)) )))
(assert (forall ((arg0@@216 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_2 arg0@@216)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_2| :pattern ( (Tclass._System.___hPartialFunc3_2 arg0@@216)) )))
(assert (forall ((|#$T0@@68| T@U) (|#$T1@@52| T@U) (|#$T2@@33| T@U) (|#$R@@81| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@68|) TyType) (= (type |#$T1@@52|) TyType)) (= (type |#$T2@@33|) TyType)) (= (type |#$R@@81|) TyType)) (= (Tclass._System.___hPartialFunc3_2 (Tclass._System.___hPartialFunc3 |#$T0@@68| |#$T1@@52| |#$T2@@33| |#$R@@81|)) |#$T2@@33|)) :qid |unknown.0:0| :skolemid |948| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@68| |#$T1@@52| |#$T2@@33| |#$R@@81|)) )))
(assert (forall ((arg0@@217 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_3 arg0@@217)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_3| :pattern ( (Tclass._System.___hPartialFunc3_3 arg0@@217)) )))
(assert (forall ((|#$T0@@69| T@U) (|#$T1@@53| T@U) (|#$T2@@34| T@U) (|#$R@@82| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@69|) TyType) (= (type |#$T1@@53|) TyType)) (= (type |#$T2@@34|) TyType)) (= (type |#$R@@82|) TyType)) (= (Tclass._System.___hPartialFunc3_3 (Tclass._System.___hPartialFunc3 |#$T0@@69| |#$T1@@53| |#$T2@@34| |#$R@@82|)) |#$R@@82|)) :qid |unknown.0:0| :skolemid |949| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@69| |#$T1@@53| |#$T2@@34| |#$R@@82|)) )))
(assert (forall ((|#$T0@@70| T@U) (|#$T1@@54| T@U) (|#$T2@@35| T@U) (|#$R@@83| T@U) (bx@@65 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@70|) TyType) (= (type |#$T1@@54|) TyType)) (= (type |#$T2@@35|) TyType)) (= (type |#$R@@83|) TyType)) (= (type bx@@65) BoxType)) ($IsBox bx@@65 (Tclass._System.___hPartialFunc3 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$R@@83|))) (and (= ($Box ($Unbox HandleTypeType bx@@65)) bx@@65) ($Is ($Unbox HandleTypeType bx@@65) (Tclass._System.___hPartialFunc3 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$R@@83|)))) :qid |unknown.0:0| :skolemid |950| :pattern ( ($IsBox bx@@65 (Tclass._System.___hPartialFunc3 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$R@@83|))) )))
(assert (forall ((|#$T0@@71| T@U) (|#$T1@@55| T@U) (|#$T2@@36| T@U) (|#$R@@84| T@U) (|f#0@@15| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@71|) TyType) (= (type |#$T1@@55|) TyType)) (= (type |#$T2@@36|) TyType)) (= (type |#$R@@84|) TyType)) (= (type |f#0@@15|) HandleTypeType)) (= ($Is |f#0@@15| (Tclass._System.___hPartialFunc3 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$R@@84|))  (and ($Is |f#0@@15| (Tclass._System.___hFunc3 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$R@@84|)) (forall ((|x0#0@@5| T@U) (|x1#0@@3| T@U) (|x2#0@@1| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@5|) BoxType) (= (type |x1#0@@3|) BoxType)) (= (type |x2#0@@1|) BoxType)) (and (and ($IsBox |x0#0@@5| |#$T0@@71|) ($IsBox |x1#0@@3| |#$T1@@55|)) ($IsBox |x2#0@@1| |#$T2@@36|))) (|Set#Equal| (Reads3 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$R@@84| $OneHeap |f#0@@15| |x0#0@@5| |x1#0@@3| |x2#0@@1|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |951| :no-pattern (type |x0#0@@5|) :no-pattern (type |x1#0@@3|) :no-pattern (type |x2#0@@1|) :no-pattern (U_2_int |x0#0@@5|) :no-pattern (U_2_bool |x0#0@@5|) :no-pattern (U_2_int |x1#0@@3|) :no-pattern (U_2_bool |x1#0@@3|) :no-pattern (U_2_int |x2#0@@1|) :no-pattern (U_2_bool |x2#0@@1|) ))))) :qid |unknown.0:0| :skolemid |952| :pattern ( ($Is |f#0@@15| (Tclass._System.___hPartialFunc3 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$R@@84|))) )))
(assert (forall ((|#$T0@@72| T@U) (|#$T1@@56| T@U) (|#$T2@@37| T@U) (|#$R@@85| T@U) (|f#0@@16| T@U) ($h@@16 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@72|) TyType) (= (type |#$T1@@56|) TyType)) (= (type |#$T2@@37|) TyType)) (= (type |#$R@@85|) TyType)) (= (type |f#0@@16|) HandleTypeType)) (= (type $h@@16) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc3 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$R@@85|) $h@@16) ($IsAlloc |f#0@@16| (Tclass._System.___hFunc3 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$R@@85|) $h@@16))) :qid |unknown.0:0| :skolemid |953| :pattern ( ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc3 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$R@@85|) $h@@16)) )))
(assert (forall ((arg0@@218 T@U) (arg1@@108 T@U) (arg2@@60 T@U) (arg3@@38 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3 arg0@@218 arg1@@108 arg2@@60 arg3@@38)) TyType) :qid |funType:Tclass._System.___hTotalFunc3| :pattern ( (Tclass._System.___hTotalFunc3 arg0@@218 arg1@@108 arg2@@60 arg3@@38)) )))
(assert (forall ((|#$T0@@73| T@U) (|#$T1@@57| T@U) (|#$T2@@38| T@U) (|#$R@@86| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@73|) TyType) (= (type |#$T1@@57|) TyType)) (= (type |#$T2@@38|) TyType)) (= (type |#$R@@86|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc3 |#$T0@@73| |#$T1@@57| |#$T2@@38| |#$R@@86|)) Tagclass._System.___hTotalFunc3) (= (TagFamily (Tclass._System.___hTotalFunc3 |#$T0@@73| |#$T1@@57| |#$T2@@38| |#$R@@86|)) |tytagFamily$_#TotalFunc3|))) :qid |unknown.0:0| :skolemid |954| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@73| |#$T1@@57| |#$T2@@38| |#$R@@86|)) )))
(assert (forall ((arg0@@219 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_0 arg0@@219)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_0| :pattern ( (Tclass._System.___hTotalFunc3_0 arg0@@219)) )))
(assert (forall ((|#$T0@@74| T@U) (|#$T1@@58| T@U) (|#$T2@@39| T@U) (|#$R@@87| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@74|) TyType) (= (type |#$T1@@58|) TyType)) (= (type |#$T2@@39|) TyType)) (= (type |#$R@@87|) TyType)) (= (Tclass._System.___hTotalFunc3_0 (Tclass._System.___hTotalFunc3 |#$T0@@74| |#$T1@@58| |#$T2@@39| |#$R@@87|)) |#$T0@@74|)) :qid |unknown.0:0| :skolemid |955| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@74| |#$T1@@58| |#$T2@@39| |#$R@@87|)) )))
(assert (forall ((arg0@@220 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_1 arg0@@220)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_1| :pattern ( (Tclass._System.___hTotalFunc3_1 arg0@@220)) )))
(assert (forall ((|#$T0@@75| T@U) (|#$T1@@59| T@U) (|#$T2@@40| T@U) (|#$R@@88| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@75|) TyType) (= (type |#$T1@@59|) TyType)) (= (type |#$T2@@40|) TyType)) (= (type |#$R@@88|) TyType)) (= (Tclass._System.___hTotalFunc3_1 (Tclass._System.___hTotalFunc3 |#$T0@@75| |#$T1@@59| |#$T2@@40| |#$R@@88|)) |#$T1@@59|)) :qid |unknown.0:0| :skolemid |956| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@75| |#$T1@@59| |#$T2@@40| |#$R@@88|)) )))
(assert (forall ((arg0@@221 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_2 arg0@@221)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_2| :pattern ( (Tclass._System.___hTotalFunc3_2 arg0@@221)) )))
(assert (forall ((|#$T0@@76| T@U) (|#$T1@@60| T@U) (|#$T2@@41| T@U) (|#$R@@89| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@76|) TyType) (= (type |#$T1@@60|) TyType)) (= (type |#$T2@@41|) TyType)) (= (type |#$R@@89|) TyType)) (= (Tclass._System.___hTotalFunc3_2 (Tclass._System.___hTotalFunc3 |#$T0@@76| |#$T1@@60| |#$T2@@41| |#$R@@89|)) |#$T2@@41|)) :qid |unknown.0:0| :skolemid |957| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@76| |#$T1@@60| |#$T2@@41| |#$R@@89|)) )))
(assert (forall ((arg0@@222 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_3 arg0@@222)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_3| :pattern ( (Tclass._System.___hTotalFunc3_3 arg0@@222)) )))
(assert (forall ((|#$T0@@77| T@U) (|#$T1@@61| T@U) (|#$T2@@42| T@U) (|#$R@@90| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@77|) TyType) (= (type |#$T1@@61|) TyType)) (= (type |#$T2@@42|) TyType)) (= (type |#$R@@90|) TyType)) (= (Tclass._System.___hTotalFunc3_3 (Tclass._System.___hTotalFunc3 |#$T0@@77| |#$T1@@61| |#$T2@@42| |#$R@@90|)) |#$R@@90|)) :qid |unknown.0:0| :skolemid |958| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@77| |#$T1@@61| |#$T2@@42| |#$R@@90|)) )))
(assert (forall ((|#$T0@@78| T@U) (|#$T1@@62| T@U) (|#$T2@@43| T@U) (|#$R@@91| T@U) (bx@@66 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@78|) TyType) (= (type |#$T1@@62|) TyType)) (= (type |#$T2@@43|) TyType)) (= (type |#$R@@91|) TyType)) (= (type bx@@66) BoxType)) ($IsBox bx@@66 (Tclass._System.___hTotalFunc3 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$R@@91|))) (and (= ($Box ($Unbox HandleTypeType bx@@66)) bx@@66) ($Is ($Unbox HandleTypeType bx@@66) (Tclass._System.___hTotalFunc3 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$R@@91|)))) :qid |unknown.0:0| :skolemid |959| :pattern ( ($IsBox bx@@66 (Tclass._System.___hTotalFunc3 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$R@@91|))) )))
(assert (forall ((|#$T0@@79| T@U) (|#$T1@@63| T@U) (|#$T2@@44| T@U) (|#$R@@92| T@U) (|f#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@79|) TyType) (= (type |#$T1@@63|) TyType)) (= (type |#$T2@@44|) TyType)) (= (type |#$R@@92|) TyType)) (= (type |f#0@@17|) HandleTypeType)) (= ($Is |f#0@@17| (Tclass._System.___hTotalFunc3 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$R@@92|))  (and ($Is |f#0@@17| (Tclass._System.___hPartialFunc3 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$R@@92|)) (forall ((|x0#0@@6| T@U) (|x1#0@@4| T@U) (|x2#0@@2| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@6|) BoxType) (= (type |x1#0@@4|) BoxType)) (= (type |x2#0@@2|) BoxType)) (and (and ($IsBox |x0#0@@6| |#$T0@@79|) ($IsBox |x1#0@@4| |#$T1@@63|)) ($IsBox |x2#0@@2| |#$T2@@44|))) (Requires3 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$R@@92| $OneHeap |f#0@@17| |x0#0@@6| |x1#0@@4| |x2#0@@2|)) :qid |unknown.0:0| :skolemid |960| :no-pattern (type |x0#0@@6|) :no-pattern (type |x1#0@@4|) :no-pattern (type |x2#0@@2|) :no-pattern (U_2_int |x0#0@@6|) :no-pattern (U_2_bool |x0#0@@6|) :no-pattern (U_2_int |x1#0@@4|) :no-pattern (U_2_bool |x1#0@@4|) :no-pattern (U_2_int |x2#0@@2|) :no-pattern (U_2_bool |x2#0@@2|) ))))) :qid |unknown.0:0| :skolemid |961| :pattern ( ($Is |f#0@@17| (Tclass._System.___hTotalFunc3 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$R@@92|))) )))
(assert (forall ((|#$T0@@80| T@U) (|#$T1@@64| T@U) (|#$T2@@45| T@U) (|#$R@@93| T@U) (|f#0@@18| T@U) ($h@@17 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@80|) TyType) (= (type |#$T1@@64|) TyType)) (= (type |#$T2@@45|) TyType)) (= (type |#$R@@93|) TyType)) (= (type |f#0@@18|) HandleTypeType)) (= (type $h@@17) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc3 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$R@@93|) $h@@17) ($IsAlloc |f#0@@18| (Tclass._System.___hPartialFunc3 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$R@@93|) $h@@17))) :qid |unknown.0:0| :skolemid |962| :pattern ( ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc3 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$R@@93|) $h@@17)) )))
(assert (forall ((arg0@@223 T@U) (arg1@@109 T@U) (arg2@@61 T@U) (arg3@@39 T@U) (arg4@@28 T@U) (arg5@@15 T@U) ) (! (= (type (Tclass._System.___hFunc5 arg0@@223 arg1@@109 arg2@@61 arg3@@39 arg4@@28 arg5@@15)) TyType) :qid |funType:Tclass._System.___hFunc5| :pattern ( (Tclass._System.___hFunc5 arg0@@223 arg1@@109 arg2@@61 arg3@@39 arg4@@28 arg5@@15)) )))
(assert (forall ((|#$T0@@81| T@U) (|#$T1@@65| T@U) (|#$T2@@46| T@U) (|#$T3@@24| T@U) (|#$T4| T@U) (|#$R@@94| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@81|) TyType) (= (type |#$T1@@65|) TyType)) (= (type |#$T2@@46|) TyType)) (= (type |#$T3@@24|) TyType)) (= (type |#$T4|) TyType)) (= (type |#$R@@94|) TyType)) (and (= (Tag (Tclass._System.___hFunc5 |#$T0@@81| |#$T1@@65| |#$T2@@46| |#$T3@@24| |#$T4| |#$R@@94|)) Tagclass._System.___hFunc5) (= (TagFamily (Tclass._System.___hFunc5 |#$T0@@81| |#$T1@@65| |#$T2@@46| |#$T3@@24| |#$T4| |#$R@@94|)) |tytagFamily$_#Func5|))) :qid |unknown.0:0| :skolemid |963| :pattern ( (Tclass._System.___hFunc5 |#$T0@@81| |#$T1@@65| |#$T2@@46| |#$T3@@24| |#$T4| |#$R@@94|)) )))
(assert (forall ((arg0@@224 T@U) ) (! (= (type (Tclass._System.___hFunc5_0 arg0@@224)) TyType) :qid |funType:Tclass._System.___hFunc5_0| :pattern ( (Tclass._System.___hFunc5_0 arg0@@224)) )))
(assert (forall ((|#$T0@@82| T@U) (|#$T1@@66| T@U) (|#$T2@@47| T@U) (|#$T3@@25| T@U) (|#$T4@@0| T@U) (|#$R@@95| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@82|) TyType) (= (type |#$T1@@66|) TyType)) (= (type |#$T2@@47|) TyType)) (= (type |#$T3@@25|) TyType)) (= (type |#$T4@@0|) TyType)) (= (type |#$R@@95|) TyType)) (= (Tclass._System.___hFunc5_0 (Tclass._System.___hFunc5 |#$T0@@82| |#$T1@@66| |#$T2@@47| |#$T3@@25| |#$T4@@0| |#$R@@95|)) |#$T0@@82|)) :qid |unknown.0:0| :skolemid |964| :pattern ( (Tclass._System.___hFunc5 |#$T0@@82| |#$T1@@66| |#$T2@@47| |#$T3@@25| |#$T4@@0| |#$R@@95|)) )))
(assert (forall ((arg0@@225 T@U) ) (! (= (type (Tclass._System.___hFunc5_1 arg0@@225)) TyType) :qid |funType:Tclass._System.___hFunc5_1| :pattern ( (Tclass._System.___hFunc5_1 arg0@@225)) )))
(assert (forall ((|#$T0@@83| T@U) (|#$T1@@67| T@U) (|#$T2@@48| T@U) (|#$T3@@26| T@U) (|#$T4@@1| T@U) (|#$R@@96| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@83|) TyType) (= (type |#$T1@@67|) TyType)) (= (type |#$T2@@48|) TyType)) (= (type |#$T3@@26|) TyType)) (= (type |#$T4@@1|) TyType)) (= (type |#$R@@96|) TyType)) (= (Tclass._System.___hFunc5_1 (Tclass._System.___hFunc5 |#$T0@@83| |#$T1@@67| |#$T2@@48| |#$T3@@26| |#$T4@@1| |#$R@@96|)) |#$T1@@67|)) :qid |unknown.0:0| :skolemid |965| :pattern ( (Tclass._System.___hFunc5 |#$T0@@83| |#$T1@@67| |#$T2@@48| |#$T3@@26| |#$T4@@1| |#$R@@96|)) )))
(assert (forall ((arg0@@226 T@U) ) (! (= (type (Tclass._System.___hFunc5_2 arg0@@226)) TyType) :qid |funType:Tclass._System.___hFunc5_2| :pattern ( (Tclass._System.___hFunc5_2 arg0@@226)) )))
(assert (forall ((|#$T0@@84| T@U) (|#$T1@@68| T@U) (|#$T2@@49| T@U) (|#$T3@@27| T@U) (|#$T4@@2| T@U) (|#$R@@97| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@84|) TyType) (= (type |#$T1@@68|) TyType)) (= (type |#$T2@@49|) TyType)) (= (type |#$T3@@27|) TyType)) (= (type |#$T4@@2|) TyType)) (= (type |#$R@@97|) TyType)) (= (Tclass._System.___hFunc5_2 (Tclass._System.___hFunc5 |#$T0@@84| |#$T1@@68| |#$T2@@49| |#$T3@@27| |#$T4@@2| |#$R@@97|)) |#$T2@@49|)) :qid |unknown.0:0| :skolemid |966| :pattern ( (Tclass._System.___hFunc5 |#$T0@@84| |#$T1@@68| |#$T2@@49| |#$T3@@27| |#$T4@@2| |#$R@@97|)) )))
(assert (forall ((arg0@@227 T@U) ) (! (= (type (Tclass._System.___hFunc5_3 arg0@@227)) TyType) :qid |funType:Tclass._System.___hFunc5_3| :pattern ( (Tclass._System.___hFunc5_3 arg0@@227)) )))
(assert (forall ((|#$T0@@85| T@U) (|#$T1@@69| T@U) (|#$T2@@50| T@U) (|#$T3@@28| T@U) (|#$T4@@3| T@U) (|#$R@@98| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@85|) TyType) (= (type |#$T1@@69|) TyType)) (= (type |#$T2@@50|) TyType)) (= (type |#$T3@@28|) TyType)) (= (type |#$T4@@3|) TyType)) (= (type |#$R@@98|) TyType)) (= (Tclass._System.___hFunc5_3 (Tclass._System.___hFunc5 |#$T0@@85| |#$T1@@69| |#$T2@@50| |#$T3@@28| |#$T4@@3| |#$R@@98|)) |#$T3@@28|)) :qid |unknown.0:0| :skolemid |967| :pattern ( (Tclass._System.___hFunc5 |#$T0@@85| |#$T1@@69| |#$T2@@50| |#$T3@@28| |#$T4@@3| |#$R@@98|)) )))
(assert (forall ((arg0@@228 T@U) ) (! (= (type (Tclass._System.___hFunc5_4 arg0@@228)) TyType) :qid |funType:Tclass._System.___hFunc5_4| :pattern ( (Tclass._System.___hFunc5_4 arg0@@228)) )))
(assert (forall ((|#$T0@@86| T@U) (|#$T1@@70| T@U) (|#$T2@@51| T@U) (|#$T3@@29| T@U) (|#$T4@@4| T@U) (|#$R@@99| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@86|) TyType) (= (type |#$T1@@70|) TyType)) (= (type |#$T2@@51|) TyType)) (= (type |#$T3@@29|) TyType)) (= (type |#$T4@@4|) TyType)) (= (type |#$R@@99|) TyType)) (= (Tclass._System.___hFunc5_4 (Tclass._System.___hFunc5 |#$T0@@86| |#$T1@@70| |#$T2@@51| |#$T3@@29| |#$T4@@4| |#$R@@99|)) |#$T4@@4|)) :qid |unknown.0:0| :skolemid |968| :pattern ( (Tclass._System.___hFunc5 |#$T0@@86| |#$T1@@70| |#$T2@@51| |#$T3@@29| |#$T4@@4| |#$R@@99|)) )))
(assert (forall ((arg0@@229 T@U) ) (! (= (type (Tclass._System.___hFunc5_5 arg0@@229)) TyType) :qid |funType:Tclass._System.___hFunc5_5| :pattern ( (Tclass._System.___hFunc5_5 arg0@@229)) )))
(assert (forall ((|#$T0@@87| T@U) (|#$T1@@71| T@U) (|#$T2@@52| T@U) (|#$T3@@30| T@U) (|#$T4@@5| T@U) (|#$R@@100| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@87|) TyType) (= (type |#$T1@@71|) TyType)) (= (type |#$T2@@52|) TyType)) (= (type |#$T3@@30|) TyType)) (= (type |#$T4@@5|) TyType)) (= (type |#$R@@100|) TyType)) (= (Tclass._System.___hFunc5_5 (Tclass._System.___hFunc5 |#$T0@@87| |#$T1@@71| |#$T2@@52| |#$T3@@30| |#$T4@@5| |#$R@@100|)) |#$R@@100|)) :qid |unknown.0:0| :skolemid |969| :pattern ( (Tclass._System.___hFunc5 |#$T0@@87| |#$T1@@71| |#$T2@@52| |#$T3@@30| |#$T4@@5| |#$R@@100|)) )))
(assert (forall ((|#$T0@@88| T@U) (|#$T1@@72| T@U) (|#$T2@@53| T@U) (|#$T3@@31| T@U) (|#$T4@@6| T@U) (|#$R@@101| T@U) (bx@@67 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@88|) TyType) (= (type |#$T1@@72|) TyType)) (= (type |#$T2@@53|) TyType)) (= (type |#$T3@@31|) TyType)) (= (type |#$T4@@6|) TyType)) (= (type |#$R@@101|) TyType)) (= (type bx@@67) BoxType)) ($IsBox bx@@67 (Tclass._System.___hFunc5 |#$T0@@88| |#$T1@@72| |#$T2@@53| |#$T3@@31| |#$T4@@6| |#$R@@101|))) (and (= ($Box ($Unbox HandleTypeType bx@@67)) bx@@67) ($Is ($Unbox HandleTypeType bx@@67) (Tclass._System.___hFunc5 |#$T0@@88| |#$T1@@72| |#$T2@@53| |#$T3@@31| |#$T4@@6| |#$R@@101|)))) :qid |unknown.0:0| :skolemid |970| :pattern ( ($IsBox bx@@67 (Tclass._System.___hFunc5 |#$T0@@88| |#$T1@@72| |#$T2@@53| |#$T3@@31| |#$T4@@6| |#$R@@101|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@230 T@T) (arg1@@110 T@T) (arg2@@62 T@T) (arg3@@40 T@T) (arg4@@29 T@T) (arg5@@16 T@T) (arg6@@6 T@T) ) (! (= (Ctor (MapType6Type arg0@@230 arg1@@110 arg2@@62 arg3@@40 arg4@@29 arg5@@16 arg6@@6)) 28) :qid |ctor:MapType6Type| )) (forall ((arg0@@231 T@T) (arg1@@111 T@T) (arg2@@63 T@T) (arg3@@41 T@T) (arg4@@30 T@T) (arg5@@17 T@T) (arg6@@7 T@T) ) (! (= (MapType6TypeInv0 (MapType6Type arg0@@231 arg1@@111 arg2@@63 arg3@@41 arg4@@30 arg5@@17 arg6@@7)) arg0@@231) :qid |typeInv:MapType6TypeInv0| :pattern ( (MapType6Type arg0@@231 arg1@@111 arg2@@63 arg3@@41 arg4@@30 arg5@@17 arg6@@7)) ))) (forall ((arg0@@232 T@T) (arg1@@112 T@T) (arg2@@64 T@T) (arg3@@42 T@T) (arg4@@31 T@T) (arg5@@18 T@T) (arg6@@8 T@T) ) (! (= (MapType6TypeInv1 (MapType6Type arg0@@232 arg1@@112 arg2@@64 arg3@@42 arg4@@31 arg5@@18 arg6@@8)) arg1@@112) :qid |typeInv:MapType6TypeInv1| :pattern ( (MapType6Type arg0@@232 arg1@@112 arg2@@64 arg3@@42 arg4@@31 arg5@@18 arg6@@8)) ))) (forall ((arg0@@233 T@T) (arg1@@113 T@T) (arg2@@65 T@T) (arg3@@43 T@T) (arg4@@32 T@T) (arg5@@19 T@T) (arg6@@9 T@T) ) (! (= (MapType6TypeInv2 (MapType6Type arg0@@233 arg1@@113 arg2@@65 arg3@@43 arg4@@32 arg5@@19 arg6@@9)) arg2@@65) :qid |typeInv:MapType6TypeInv2| :pattern ( (MapType6Type arg0@@233 arg1@@113 arg2@@65 arg3@@43 arg4@@32 arg5@@19 arg6@@9)) ))) (forall ((arg0@@234 T@T) (arg1@@114 T@T) (arg2@@66 T@T) (arg3@@44 T@T) (arg4@@33 T@T) (arg5@@20 T@T) (arg6@@10 T@T) ) (! (= (MapType6TypeInv3 (MapType6Type arg0@@234 arg1@@114 arg2@@66 arg3@@44 arg4@@33 arg5@@20 arg6@@10)) arg3@@44) :qid |typeInv:MapType6TypeInv3| :pattern ( (MapType6Type arg0@@234 arg1@@114 arg2@@66 arg3@@44 arg4@@33 arg5@@20 arg6@@10)) ))) (forall ((arg0@@235 T@T) (arg1@@115 T@T) (arg2@@67 T@T) (arg3@@45 T@T) (arg4@@34 T@T) (arg5@@21 T@T) (arg6@@11 T@T) ) (! (= (MapType6TypeInv4 (MapType6Type arg0@@235 arg1@@115 arg2@@67 arg3@@45 arg4@@34 arg5@@21 arg6@@11)) arg4@@34) :qid |typeInv:MapType6TypeInv4| :pattern ( (MapType6Type arg0@@235 arg1@@115 arg2@@67 arg3@@45 arg4@@34 arg5@@21 arg6@@11)) ))) (forall ((arg0@@236 T@T) (arg1@@116 T@T) (arg2@@68 T@T) (arg3@@46 T@T) (arg4@@35 T@T) (arg5@@22 T@T) (arg6@@12 T@T) ) (! (= (MapType6TypeInv5 (MapType6Type arg0@@236 arg1@@116 arg2@@68 arg3@@46 arg4@@35 arg5@@22 arg6@@12)) arg5@@22) :qid |typeInv:MapType6TypeInv5| :pattern ( (MapType6Type arg0@@236 arg1@@116 arg2@@68 arg3@@46 arg4@@35 arg5@@22 arg6@@12)) ))) (forall ((arg0@@237 T@T) (arg1@@117 T@T) (arg2@@69 T@T) (arg3@@47 T@T) (arg4@@36 T@T) (arg5@@23 T@T) (arg6@@13 T@T) ) (! (= (MapType6TypeInv6 (MapType6Type arg0@@237 arg1@@117 arg2@@69 arg3@@47 arg4@@36 arg5@@23 arg6@@13)) arg6@@13) :qid |typeInv:MapType6TypeInv6| :pattern ( (MapType6Type arg0@@237 arg1@@117 arg2@@69 arg3@@47 arg4@@36 arg5@@23 arg6@@13)) ))) (forall ((arg0@@238 T@U) (arg1@@118 T@U) (arg2@@70 T@U) (arg3@@48 T@U) (arg4@@37 T@U) (arg5@@24 T@U) (arg6@@14 T@U) ) (! (let ((aVar6 (MapType6TypeInv6 (type arg0@@238)))) (= (type (MapType6Select arg0@@238 arg1@@118 arg2@@70 arg3@@48 arg4@@37 arg5@@24 arg6@@14)) aVar6)) :qid |funType:MapType6Select| :pattern ( (MapType6Select arg0@@238 arg1@@118 arg2@@70 arg3@@48 arg4@@37 arg5@@24 arg6@@14)) ))) (forall ((arg0@@239 T@U) (arg1@@119 T@U) (arg2@@71 T@U) (arg3@@49 T@U) (arg4@@38 T@U) (arg5@@25 T@U) (arg6@@15 T@U) (arg7@@3 T@U) ) (! (let ((aVar6@@0 (type arg7@@3))) (let ((aVar5@@2 (type arg6@@15))) (let ((aVar4@@3 (type arg5@@25))) (let ((aVar3@@4 (type arg4@@38))) (let ((aVar2@@5 (type arg3@@49))) (let ((aVar1@@6 (type arg2@@71))) (let ((aVar0@@4 (type arg1@@119))) (= (type (MapType6Store arg0@@239 arg1@@119 arg2@@71 arg3@@49 arg4@@38 arg5@@25 arg6@@15 arg7@@3)) (MapType6Type aVar0@@4 aVar1@@6 aVar2@@5 aVar3@@4 aVar4@@3 aVar5@@2 aVar6@@0))))))))) :qid |funType:MapType6Store| :pattern ( (MapType6Store arg0@@239 arg1@@119 arg2@@71 arg3@@49 arg4@@38 arg5@@25 arg6@@15 arg7@@3)) ))) (forall ((m@@67 T@U) (x0@@27 T@U) (x1@@21 T@U) (x2@@17 T@U) (x3@@12 T@U) (x4@@6 T@U) (x5 T@U) (val@@28 T@U) ) (! (let ((aVar6@@1 (MapType6TypeInv6 (type m@@67)))) (=> (= (type val@@28) aVar6@@1) (= (MapType6Select (MapType6Store m@@67 x0@@27 x1@@21 x2@@17 x3@@12 x4@@6 x5 val@@28) x0@@27 x1@@21 x2@@17 x3@@12 x4@@6 x5) val@@28))) :qid |mapAx0:MapType6Select| :weight 0 ))) (and (and (and (and (and (and (forall ((val@@29 T@U) (m@@68 T@U) (x0@@28 T@U) (x1@@22 T@U) (x2@@18 T@U) (x3@@13 T@U) (x4@@7 T@U) (x5@@0 T@U) (y0@@21 T@U) (y1@@17 T@U) (y2@@14 T@U) (y3@@10 T@U) (y4@@5 T@U) (y5 T@U) ) (!  (or (= x0@@28 y0@@21) (= (MapType6Select (MapType6Store m@@68 x0@@28 x1@@22 x2@@18 x3@@13 x4@@7 x5@@0 val@@29) y0@@21 y1@@17 y2@@14 y3@@10 y4@@5 y5) (MapType6Select m@@68 y0@@21 y1@@17 y2@@14 y3@@10 y4@@5 y5))) :qid |mapAx1:MapType6Select:0| :weight 0 )) (forall ((val@@30 T@U) (m@@69 T@U) (x0@@29 T@U) (x1@@23 T@U) (x2@@19 T@U) (x3@@14 T@U) (x4@@8 T@U) (x5@@1 T@U) (y0@@22 T@U) (y1@@18 T@U) (y2@@15 T@U) (y3@@11 T@U) (y4@@6 T@U) (y5@@0 T@U) ) (!  (or (= x1@@23 y1@@18) (= (MapType6Select (MapType6Store m@@69 x0@@29 x1@@23 x2@@19 x3@@14 x4@@8 x5@@1 val@@30) y0@@22 y1@@18 y2@@15 y3@@11 y4@@6 y5@@0) (MapType6Select m@@69 y0@@22 y1@@18 y2@@15 y3@@11 y4@@6 y5@@0))) :qid |mapAx1:MapType6Select:1| :weight 0 ))) (forall ((val@@31 T@U) (m@@70 T@U) (x0@@30 T@U) (x1@@24 T@U) (x2@@20 T@U) (x3@@15 T@U) (x4@@9 T@U) (x5@@2 T@U) (y0@@23 T@U) (y1@@19 T@U) (y2@@16 T@U) (y3@@12 T@U) (y4@@7 T@U) (y5@@1 T@U) ) (!  (or (= x2@@20 y2@@16) (= (MapType6Select (MapType6Store m@@70 x0@@30 x1@@24 x2@@20 x3@@15 x4@@9 x5@@2 val@@31) y0@@23 y1@@19 y2@@16 y3@@12 y4@@7 y5@@1) (MapType6Select m@@70 y0@@23 y1@@19 y2@@16 y3@@12 y4@@7 y5@@1))) :qid |mapAx1:MapType6Select:2| :weight 0 ))) (forall ((val@@32 T@U) (m@@71 T@U) (x0@@31 T@U) (x1@@25 T@U) (x2@@21 T@U) (x3@@16 T@U) (x4@@10 T@U) (x5@@3 T@U) (y0@@24 T@U) (y1@@20 T@U) (y2@@17 T@U) (y3@@13 T@U) (y4@@8 T@U) (y5@@2 T@U) ) (!  (or (= x3@@16 y3@@13) (= (MapType6Select (MapType6Store m@@71 x0@@31 x1@@25 x2@@21 x3@@16 x4@@10 x5@@3 val@@32) y0@@24 y1@@20 y2@@17 y3@@13 y4@@8 y5@@2) (MapType6Select m@@71 y0@@24 y1@@20 y2@@17 y3@@13 y4@@8 y5@@2))) :qid |mapAx1:MapType6Select:3| :weight 0 ))) (forall ((val@@33 T@U) (m@@72 T@U) (x0@@32 T@U) (x1@@26 T@U) (x2@@22 T@U) (x3@@17 T@U) (x4@@11 T@U) (x5@@4 T@U) (y0@@25 T@U) (y1@@21 T@U) (y2@@18 T@U) (y3@@14 T@U) (y4@@9 T@U) (y5@@3 T@U) ) (!  (or (= x4@@11 y4@@9) (= (MapType6Select (MapType6Store m@@72 x0@@32 x1@@26 x2@@22 x3@@17 x4@@11 x5@@4 val@@33) y0@@25 y1@@21 y2@@18 y3@@14 y4@@9 y5@@3) (MapType6Select m@@72 y0@@25 y1@@21 y2@@18 y3@@14 y4@@9 y5@@3))) :qid |mapAx1:MapType6Select:4| :weight 0 ))) (forall ((val@@34 T@U) (m@@73 T@U) (x0@@33 T@U) (x1@@27 T@U) (x2@@23 T@U) (x3@@18 T@U) (x4@@12 T@U) (x5@@5 T@U) (y0@@26 T@U) (y1@@22 T@U) (y2@@19 T@U) (y3@@15 T@U) (y4@@10 T@U) (y5@@4 T@U) ) (!  (or (= x5@@5 y5@@4) (= (MapType6Select (MapType6Store m@@73 x0@@33 x1@@27 x2@@23 x3@@18 x4@@12 x5@@5 val@@34) y0@@26 y1@@22 y2@@19 y3@@15 y4@@10 y5@@4) (MapType6Select m@@73 y0@@26 y1@@22 y2@@19 y3@@15 y4@@10 y5@@4))) :qid |mapAx1:MapType6Select:5| :weight 0 ))) (forall ((val@@35 T@U) (m@@74 T@U) (x0@@34 T@U) (x1@@28 T@U) (x2@@24 T@U) (x3@@19 T@U) (x4@@13 T@U) (x5@@6 T@U) (y0@@27 T@U) (y1@@23 T@U) (y2@@20 T@U) (y3@@16 T@U) (y4@@11 T@U) (y5@@5 T@U) ) (!  (or true (= (MapType6Select (MapType6Store m@@74 x0@@34 x1@@28 x2@@24 x3@@19 x4@@13 x5@@6 val@@35) y0@@27 y1@@23 y2@@20 y3@@16 y4@@11 y5@@5) (MapType6Select m@@74 y0@@27 y1@@23 y2@@20 y3@@16 y4@@11 y5@@5))) :qid |mapAx2:MapType6Select| :weight 0 )))) (forall ((arg0@@240 T@U) (arg1@@120 T@U) (arg2@@72 T@U) (arg3@@50 T@U) (arg4@@39 T@U) (arg5@@26 T@U) (arg6@@16 T@U) (arg7@@4 T@U) (arg8@@3 T@U) (arg9@@1 T@U) (arg10@@1 T@U) (arg11 T@U) (arg12 T@U) ) (! (= (type (Apply5 arg0@@240 arg1@@120 arg2@@72 arg3@@50 arg4@@39 arg5@@26 arg6@@16 arg7@@4 arg8@@3 arg9@@1 arg10@@1 arg11 arg12)) BoxType) :qid |funType:Apply5| :pattern ( (Apply5 arg0@@240 arg1@@120 arg2@@72 arg3@@50 arg4@@39 arg5@@26 arg6@@16 arg7@@4 arg8@@3 arg9@@1 arg10@@1 arg11 arg12)) ))) (forall ((arg0@@241 T@U) (arg1@@121 T@U) (arg2@@73 T@U) ) (! (= (type (Handle5 arg0@@241 arg1@@121 arg2@@73)) HandleTypeType) :qid |funType:Handle5| :pattern ( (Handle5 arg0@@241 arg1@@121 arg2@@73)) ))))
(assert (forall ((t0@@91 T@U) (t1@@67 T@U) (t2@@44 T@U) (t3@@29 T@U) (t4@@14 T@U) (t5 T@U) (heap@@26 T@U) (h@@51 T@U) (r@@26 T@U) (rd@@14 T@U) (bx0@@55 T@U) (bx1@@41 T@U) (bx2@@27 T@U) (bx3@@13 T@U) (bx4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@91) TyType) (= (type t1@@67) TyType)) (= (type t2@@44) TyType)) (= (type t3@@29) TyType)) (= (type t4@@14) TyType)) (= (type t5) TyType)) (= (type heap@@26) (MapType0Type refType MapType1Type))) (= (type h@@51) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@26) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@14) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@55) BoxType)) (= (type bx1@@41) BoxType)) (= (type bx2@@27) BoxType)) (= (type bx3@@13) BoxType)) (= (type bx4) BoxType)) (= (Apply5 t0@@91 t1@@67 t2@@44 t3@@29 t4@@14 t5 heap@@26 (Handle5 h@@51 r@@26 rd@@14) bx0@@55 bx1@@41 bx2@@27 bx3@@13 bx4) (MapType6Select h@@51 heap@@26 bx0@@55 bx1@@41 bx2@@27 bx3@@13 bx4))) :qid |unknown.0:0| :skolemid |971| :pattern ( (Apply5 t0@@91 t1@@67 t2@@44 t3@@29 t4@@14 t5 heap@@26 (Handle5 h@@51 r@@26 rd@@14) bx0@@55 bx1@@41 bx2@@27 bx3@@13 bx4)) )))
(assert (forall ((t0@@92 T@U) (t1@@68 T@U) (t2@@45 T@U) (t3@@30 T@U) (t4@@15 T@U) (t5@@0 T@U) (heap@@27 T@U) (h@@52 T@U) (r@@27 T@U) (rd@@15 T@U) (bx0@@56 T@U) (bx1@@42 T@U) (bx2@@28 T@U) (bx3@@14 T@U) (bx4@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@92) TyType) (= (type t1@@68) TyType)) (= (type t2@@45) TyType)) (= (type t3@@30) TyType)) (= (type t4@@15) TyType)) (= (type t5@@0) TyType)) (= (type heap@@27) (MapType0Type refType MapType1Type))) (= (type h@@52) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@27) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@15) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@56) BoxType)) (= (type bx1@@42) BoxType)) (= (type bx2@@28) BoxType)) (= (type bx3@@14) BoxType)) (= (type bx4@@0) BoxType)) (U_2_bool (MapType6Select r@@27 heap@@27 bx0@@56 bx1@@42 bx2@@28 bx3@@14 bx4@@0))) (Requires5 t0@@92 t1@@68 t2@@45 t3@@30 t4@@15 t5@@0 heap@@27 (Handle5 h@@52 r@@27 rd@@15) bx0@@56 bx1@@42 bx2@@28 bx3@@14 bx4@@0)) :qid |unknown.0:0| :skolemid |972| :pattern ( (Requires5 t0@@92 t1@@68 t2@@45 t3@@30 t4@@15 t5@@0 heap@@27 (Handle5 h@@52 r@@27 rd@@15) bx0@@56 bx1@@42 bx2@@28 bx3@@14 bx4@@0)) )))
(assert (forall ((arg0@@242 T@U) (arg1@@122 T@U) (arg2@@74 T@U) (arg3@@51 T@U) (arg4@@40 T@U) (arg5@@27 T@U) (arg6@@17 T@U) (arg7@@5 T@U) (arg8@@4 T@U) (arg9@@2 T@U) (arg10@@2 T@U) (arg11@@0 T@U) (arg12@@0 T@U) ) (! (= (type (Reads5 arg0@@242 arg1@@122 arg2@@74 arg3@@51 arg4@@40 arg5@@27 arg6@@17 arg7@@5 arg8@@4 arg9@@2 arg10@@2 arg11@@0 arg12@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads5| :pattern ( (Reads5 arg0@@242 arg1@@122 arg2@@74 arg3@@51 arg4@@40 arg5@@27 arg6@@17 arg7@@5 arg8@@4 arg9@@2 arg10@@2 arg11@@0 arg12@@0)) )))
(assert (forall ((t0@@93 T@U) (t1@@69 T@U) (t2@@46 T@U) (t3@@31 T@U) (t4@@16 T@U) (t5@@1 T@U) (heap@@28 T@U) (h@@53 T@U) (r@@28 T@U) (rd@@16 T@U) (bx0@@57 T@U) (bx1@@43 T@U) (bx2@@29 T@U) (bx3@@15 T@U) (bx4@@1 T@U) (bx@@68 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@93) TyType) (= (type t1@@69) TyType)) (= (type t2@@46) TyType)) (= (type t3@@31) TyType)) (= (type t4@@16) TyType)) (= (type t5@@1) TyType)) (= (type heap@@28) (MapType0Type refType MapType1Type))) (= (type h@@53) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@28) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@16) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@57) BoxType)) (= (type bx1@@43) BoxType)) (= (type bx2@@29) BoxType)) (= (type bx3@@15) BoxType)) (= (type bx4@@1) BoxType)) (= (type bx@@68) BoxType)) (= (U_2_bool (MapType0Select (Reads5 t0@@93 t1@@69 t2@@46 t3@@31 t4@@16 t5@@1 heap@@28 (Handle5 h@@53 r@@28 rd@@16) bx0@@57 bx1@@43 bx2@@29 bx3@@15 bx4@@1) bx@@68)) (U_2_bool (MapType0Select (MapType6Select rd@@16 heap@@28 bx0@@57 bx1@@43 bx2@@29 bx3@@15 bx4@@1) bx@@68)))) :qid |unknown.0:0| :skolemid |973| :pattern ( (MapType0Select (Reads5 t0@@93 t1@@69 t2@@46 t3@@31 t4@@16 t5@@1 heap@@28 (Handle5 h@@53 r@@28 rd@@16) bx0@@57 bx1@@43 bx2@@29 bx3@@15 bx4@@1) bx@@68)) )))
(assert (forall ((t0@@94 T@U) (t1@@70 T@U) (t2@@47 T@U) (t3@@32 T@U) (t4@@17 T@U) (t5@@2 T@U) (h0@@30 T@U) (h1@@30 T@U) (f@@65 T@U) (bx0@@58 T@U) (bx1@@44 T@U) (bx2@@30 T@U) (bx3@@16 T@U) (bx4@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@94) TyType) (= (type t1@@70) TyType)) (= (type t2@@47) TyType)) (= (type t3@@32) TyType)) (= (type t4@@17) TyType)) (= (type t5@@2) TyType)) (= (type h0@@30) (MapType0Type refType MapType1Type))) (= (type h1@@30) (MapType0Type refType MapType1Type))) (= (type f@@65) HandleTypeType)) (= (type bx0@@58) BoxType)) (= (type bx1@@44) BoxType)) (= (type bx2@@30) BoxType)) (= (type bx3@@16) BoxType)) (= (type bx4@@2) BoxType)) (and (and (and ($HeapSucc h0@@30 h1@@30) (and ($IsGoodHeap h0@@30) ($IsGoodHeap h1@@30))) (and (and (and (and (and ($IsBox bx0@@58 t0@@94) ($IsBox bx1@@44 t1@@70)) ($IsBox bx2@@30 t2@@47)) ($IsBox bx3@@16 t3@@32)) ($IsBox bx4@@2 t4@@17)) ($Is f@@65 (Tclass._System.___hFunc5 t0@@94 t1@@70 t2@@47 t3@@32 t4@@17 t5@@2)))) (forall ((o@@74 T@U) (fld@@29 T@U) ) (! (let ((a@@112 (FieldTypeInv0 (type fld@@29)))) (=> (and (and (= (type o@@74) refType) (= (type fld@@29) (FieldType a@@112))) (and (not (= o@@74 null)) (U_2_bool (MapType0Select (Reads5 t0@@94 t1@@70 t2@@47 t3@@32 t4@@17 t5@@2 h0@@30 f@@65 bx0@@58 bx1@@44 bx2@@30 bx3@@16 bx4@@2) ($Box o@@74))))) (= (MapType1Select (MapType0Select h0@@30 o@@74) fld@@29) (MapType1Select (MapType0Select h1@@30 o@@74) fld@@29)))) :qid |unknown.0:0| :skolemid |974| :no-pattern (type o@@74) :no-pattern (type fld@@29) :no-pattern (U_2_int o@@74) :no-pattern (U_2_bool o@@74) :no-pattern (U_2_int fld@@29) :no-pattern (U_2_bool fld@@29) )))) (= (Reads5 t0@@94 t1@@70 t2@@47 t3@@32 t4@@17 t5@@2 h0@@30 f@@65 bx0@@58 bx1@@44 bx2@@30 bx3@@16 bx4@@2) (Reads5 t0@@94 t1@@70 t2@@47 t3@@32 t4@@17 t5@@2 h1@@30 f@@65 bx0@@58 bx1@@44 bx2@@30 bx3@@16 bx4@@2))) :qid |unknown.0:0| :skolemid |975| :pattern ( ($HeapSucc h0@@30 h1@@30) (Reads5 t0@@94 t1@@70 t2@@47 t3@@32 t4@@17 t5@@2 h1@@30 f@@65 bx0@@58 bx1@@44 bx2@@30 bx3@@16 bx4@@2)) )))
(assert (forall ((t0@@95 T@U) (t1@@71 T@U) (t2@@48 T@U) (t3@@33 T@U) (t4@@18 T@U) (t5@@3 T@U) (h0@@31 T@U) (h1@@31 T@U) (f@@66 T@U) (bx0@@59 T@U) (bx1@@45 T@U) (bx2@@31 T@U) (bx3@@17 T@U) (bx4@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@95) TyType) (= (type t1@@71) TyType)) (= (type t2@@48) TyType)) (= (type t3@@33) TyType)) (= (type t4@@18) TyType)) (= (type t5@@3) TyType)) (= (type h0@@31) (MapType0Type refType MapType1Type))) (= (type h1@@31) (MapType0Type refType MapType1Type))) (= (type f@@66) HandleTypeType)) (= (type bx0@@59) BoxType)) (= (type bx1@@45) BoxType)) (= (type bx2@@31) BoxType)) (= (type bx3@@17) BoxType)) (= (type bx4@@3) BoxType)) (and (and (and ($HeapSucc h0@@31 h1@@31) (and ($IsGoodHeap h0@@31) ($IsGoodHeap h1@@31))) (and (and (and (and (and ($IsBox bx0@@59 t0@@95) ($IsBox bx1@@45 t1@@71)) ($IsBox bx2@@31 t2@@48)) ($IsBox bx3@@17 t3@@33)) ($IsBox bx4@@3 t4@@18)) ($Is f@@66 (Tclass._System.___hFunc5 t0@@95 t1@@71 t2@@48 t3@@33 t4@@18 t5@@3)))) (forall ((o@@75 T@U) (fld@@30 T@U) ) (! (let ((a@@113 (FieldTypeInv0 (type fld@@30)))) (=> (and (and (= (type o@@75) refType) (= (type fld@@30) (FieldType a@@113))) (and (not (= o@@75 null)) (U_2_bool (MapType0Select (Reads5 t0@@95 t1@@71 t2@@48 t3@@33 t4@@18 t5@@3 h1@@31 f@@66 bx0@@59 bx1@@45 bx2@@31 bx3@@17 bx4@@3) ($Box o@@75))))) (= (MapType1Select (MapType0Select h0@@31 o@@75) fld@@30) (MapType1Select (MapType0Select h1@@31 o@@75) fld@@30)))) :qid |unknown.0:0| :skolemid |976| :no-pattern (type o@@75) :no-pattern (type fld@@30) :no-pattern (U_2_int o@@75) :no-pattern (U_2_bool o@@75) :no-pattern (U_2_int fld@@30) :no-pattern (U_2_bool fld@@30) )))) (= (Reads5 t0@@95 t1@@71 t2@@48 t3@@33 t4@@18 t5@@3 h0@@31 f@@66 bx0@@59 bx1@@45 bx2@@31 bx3@@17 bx4@@3) (Reads5 t0@@95 t1@@71 t2@@48 t3@@33 t4@@18 t5@@3 h1@@31 f@@66 bx0@@59 bx1@@45 bx2@@31 bx3@@17 bx4@@3))) :qid |unknown.0:0| :skolemid |977| :pattern ( ($HeapSucc h0@@31 h1@@31) (Reads5 t0@@95 t1@@71 t2@@48 t3@@33 t4@@18 t5@@3 h1@@31 f@@66 bx0@@59 bx1@@45 bx2@@31 bx3@@17 bx4@@3)) )))
(assert (forall ((t0@@96 T@U) (t1@@72 T@U) (t2@@49 T@U) (t3@@34 T@U) (t4@@19 T@U) (t5@@4 T@U) (h0@@32 T@U) (h1@@32 T@U) (f@@67 T@U) (bx0@@60 T@U) (bx1@@46 T@U) (bx2@@32 T@U) (bx3@@18 T@U) (bx4@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@96) TyType) (= (type t1@@72) TyType)) (= (type t2@@49) TyType)) (= (type t3@@34) TyType)) (= (type t4@@19) TyType)) (= (type t5@@4) TyType)) (= (type h0@@32) (MapType0Type refType MapType1Type))) (= (type h1@@32) (MapType0Type refType MapType1Type))) (= (type f@@67) HandleTypeType)) (= (type bx0@@60) BoxType)) (= (type bx1@@46) BoxType)) (= (type bx2@@32) BoxType)) (= (type bx3@@18) BoxType)) (= (type bx4@@4) BoxType)) (and (and (and ($HeapSucc h0@@32 h1@@32) (and ($IsGoodHeap h0@@32) ($IsGoodHeap h1@@32))) (and (and (and (and (and ($IsBox bx0@@60 t0@@96) ($IsBox bx1@@46 t1@@72)) ($IsBox bx2@@32 t2@@49)) ($IsBox bx3@@18 t3@@34)) ($IsBox bx4@@4 t4@@19)) ($Is f@@67 (Tclass._System.___hFunc5 t0@@96 t1@@72 t2@@49 t3@@34 t4@@19 t5@@4)))) (forall ((o@@76 T@U) (fld@@31 T@U) ) (! (let ((a@@114 (FieldTypeInv0 (type fld@@31)))) (=> (and (and (= (type o@@76) refType) (= (type fld@@31) (FieldType a@@114))) (and (not (= o@@76 null)) (U_2_bool (MapType0Select (Reads5 t0@@96 t1@@72 t2@@49 t3@@34 t4@@19 t5@@4 h0@@32 f@@67 bx0@@60 bx1@@46 bx2@@32 bx3@@18 bx4@@4) ($Box o@@76))))) (= (MapType1Select (MapType0Select h0@@32 o@@76) fld@@31) (MapType1Select (MapType0Select h1@@32 o@@76) fld@@31)))) :qid |unknown.0:0| :skolemid |978| :no-pattern (type o@@76) :no-pattern (type fld@@31) :no-pattern (U_2_int o@@76) :no-pattern (U_2_bool o@@76) :no-pattern (U_2_int fld@@31) :no-pattern (U_2_bool fld@@31) )))) (= (Requires5 t0@@96 t1@@72 t2@@49 t3@@34 t4@@19 t5@@4 h0@@32 f@@67 bx0@@60 bx1@@46 bx2@@32 bx3@@18 bx4@@4) (Requires5 t0@@96 t1@@72 t2@@49 t3@@34 t4@@19 t5@@4 h1@@32 f@@67 bx0@@60 bx1@@46 bx2@@32 bx3@@18 bx4@@4))) :qid |unknown.0:0| :skolemid |979| :pattern ( ($HeapSucc h0@@32 h1@@32) (Requires5 t0@@96 t1@@72 t2@@49 t3@@34 t4@@19 t5@@4 h1@@32 f@@67 bx0@@60 bx1@@46 bx2@@32 bx3@@18 bx4@@4)) )))
(assert (forall ((t0@@97 T@U) (t1@@73 T@U) (t2@@50 T@U) (t3@@35 T@U) (t4@@20 T@U) (t5@@5 T@U) (h0@@33 T@U) (h1@@33 T@U) (f@@68 T@U) (bx0@@61 T@U) (bx1@@47 T@U) (bx2@@33 T@U) (bx3@@19 T@U) (bx4@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@97) TyType) (= (type t1@@73) TyType)) (= (type t2@@50) TyType)) (= (type t3@@35) TyType)) (= (type t4@@20) TyType)) (= (type t5@@5) TyType)) (= (type h0@@33) (MapType0Type refType MapType1Type))) (= (type h1@@33) (MapType0Type refType MapType1Type))) (= (type f@@68) HandleTypeType)) (= (type bx0@@61) BoxType)) (= (type bx1@@47) BoxType)) (= (type bx2@@33) BoxType)) (= (type bx3@@19) BoxType)) (= (type bx4@@5) BoxType)) (and (and (and ($HeapSucc h0@@33 h1@@33) (and ($IsGoodHeap h0@@33) ($IsGoodHeap h1@@33))) (and (and (and (and (and ($IsBox bx0@@61 t0@@97) ($IsBox bx1@@47 t1@@73)) ($IsBox bx2@@33 t2@@50)) ($IsBox bx3@@19 t3@@35)) ($IsBox bx4@@5 t4@@20)) ($Is f@@68 (Tclass._System.___hFunc5 t0@@97 t1@@73 t2@@50 t3@@35 t4@@20 t5@@5)))) (forall ((o@@77 T@U) (fld@@32 T@U) ) (! (let ((a@@115 (FieldTypeInv0 (type fld@@32)))) (=> (and (and (= (type o@@77) refType) (= (type fld@@32) (FieldType a@@115))) (and (not (= o@@77 null)) (U_2_bool (MapType0Select (Reads5 t0@@97 t1@@73 t2@@50 t3@@35 t4@@20 t5@@5 h1@@33 f@@68 bx0@@61 bx1@@47 bx2@@33 bx3@@19 bx4@@5) ($Box o@@77))))) (= (MapType1Select (MapType0Select h0@@33 o@@77) fld@@32) (MapType1Select (MapType0Select h1@@33 o@@77) fld@@32)))) :qid |unknown.0:0| :skolemid |980| :no-pattern (type o@@77) :no-pattern (type fld@@32) :no-pattern (U_2_int o@@77) :no-pattern (U_2_bool o@@77) :no-pattern (U_2_int fld@@32) :no-pattern (U_2_bool fld@@32) )))) (= (Requires5 t0@@97 t1@@73 t2@@50 t3@@35 t4@@20 t5@@5 h0@@33 f@@68 bx0@@61 bx1@@47 bx2@@33 bx3@@19 bx4@@5) (Requires5 t0@@97 t1@@73 t2@@50 t3@@35 t4@@20 t5@@5 h1@@33 f@@68 bx0@@61 bx1@@47 bx2@@33 bx3@@19 bx4@@5))) :qid |unknown.0:0| :skolemid |981| :pattern ( ($HeapSucc h0@@33 h1@@33) (Requires5 t0@@97 t1@@73 t2@@50 t3@@35 t4@@20 t5@@5 h1@@33 f@@68 bx0@@61 bx1@@47 bx2@@33 bx3@@19 bx4@@5)) )))
(assert (forall ((t0@@98 T@U) (t1@@74 T@U) (t2@@51 T@U) (t3@@36 T@U) (t4@@21 T@U) (t5@@6 T@U) (h0@@34 T@U) (h1@@34 T@U) (f@@69 T@U) (bx0@@62 T@U) (bx1@@48 T@U) (bx2@@34 T@U) (bx3@@20 T@U) (bx4@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@98) TyType) (= (type t1@@74) TyType)) (= (type t2@@51) TyType)) (= (type t3@@36) TyType)) (= (type t4@@21) TyType)) (= (type t5@@6) TyType)) (= (type h0@@34) (MapType0Type refType MapType1Type))) (= (type h1@@34) (MapType0Type refType MapType1Type))) (= (type f@@69) HandleTypeType)) (= (type bx0@@62) BoxType)) (= (type bx1@@48) BoxType)) (= (type bx2@@34) BoxType)) (= (type bx3@@20) BoxType)) (= (type bx4@@6) BoxType)) (and (and (and ($HeapSucc h0@@34 h1@@34) (and ($IsGoodHeap h0@@34) ($IsGoodHeap h1@@34))) (and (and (and (and (and ($IsBox bx0@@62 t0@@98) ($IsBox bx1@@48 t1@@74)) ($IsBox bx2@@34 t2@@51)) ($IsBox bx3@@20 t3@@36)) ($IsBox bx4@@6 t4@@21)) ($Is f@@69 (Tclass._System.___hFunc5 t0@@98 t1@@74 t2@@51 t3@@36 t4@@21 t5@@6)))) (forall ((o@@78 T@U) (fld@@33 T@U) ) (! (let ((a@@116 (FieldTypeInv0 (type fld@@33)))) (=> (and (and (= (type o@@78) refType) (= (type fld@@33) (FieldType a@@116))) (and (not (= o@@78 null)) (U_2_bool (MapType0Select (Reads5 t0@@98 t1@@74 t2@@51 t3@@36 t4@@21 t5@@6 h0@@34 f@@69 bx0@@62 bx1@@48 bx2@@34 bx3@@20 bx4@@6) ($Box o@@78))))) (= (MapType1Select (MapType0Select h0@@34 o@@78) fld@@33) (MapType1Select (MapType0Select h1@@34 o@@78) fld@@33)))) :qid |unknown.0:0| :skolemid |982| :no-pattern (type o@@78) :no-pattern (type fld@@33) :no-pattern (U_2_int o@@78) :no-pattern (U_2_bool o@@78) :no-pattern (U_2_int fld@@33) :no-pattern (U_2_bool fld@@33) )))) (= (Apply5 t0@@98 t1@@74 t2@@51 t3@@36 t4@@21 t5@@6 h0@@34 f@@69 bx0@@62 bx1@@48 bx2@@34 bx3@@20 bx4@@6) (Apply5 t0@@98 t1@@74 t2@@51 t3@@36 t4@@21 t5@@6 h1@@34 f@@69 bx0@@62 bx1@@48 bx2@@34 bx3@@20 bx4@@6))) :qid |unknown.0:0| :skolemid |983| :pattern ( ($HeapSucc h0@@34 h1@@34) (Apply5 t0@@98 t1@@74 t2@@51 t3@@36 t4@@21 t5@@6 h1@@34 f@@69 bx0@@62 bx1@@48 bx2@@34 bx3@@20 bx4@@6)) )))
(assert (forall ((t0@@99 T@U) (t1@@75 T@U) (t2@@52 T@U) (t3@@37 T@U) (t4@@22 T@U) (t5@@7 T@U) (h0@@35 T@U) (h1@@35 T@U) (f@@70 T@U) (bx0@@63 T@U) (bx1@@49 T@U) (bx2@@35 T@U) (bx3@@21 T@U) (bx4@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@99) TyType) (= (type t1@@75) TyType)) (= (type t2@@52) TyType)) (= (type t3@@37) TyType)) (= (type t4@@22) TyType)) (= (type t5@@7) TyType)) (= (type h0@@35) (MapType0Type refType MapType1Type))) (= (type h1@@35) (MapType0Type refType MapType1Type))) (= (type f@@70) HandleTypeType)) (= (type bx0@@63) BoxType)) (= (type bx1@@49) BoxType)) (= (type bx2@@35) BoxType)) (= (type bx3@@21) BoxType)) (= (type bx4@@7) BoxType)) (and (and (and ($HeapSucc h0@@35 h1@@35) (and ($IsGoodHeap h0@@35) ($IsGoodHeap h1@@35))) (and (and (and (and (and ($IsBox bx0@@63 t0@@99) ($IsBox bx1@@49 t1@@75)) ($IsBox bx2@@35 t2@@52)) ($IsBox bx3@@21 t3@@37)) ($IsBox bx4@@7 t4@@22)) ($Is f@@70 (Tclass._System.___hFunc5 t0@@99 t1@@75 t2@@52 t3@@37 t4@@22 t5@@7)))) (forall ((o@@79 T@U) (fld@@34 T@U) ) (! (let ((a@@117 (FieldTypeInv0 (type fld@@34)))) (=> (and (and (= (type o@@79) refType) (= (type fld@@34) (FieldType a@@117))) (and (not (= o@@79 null)) (U_2_bool (MapType0Select (Reads5 t0@@99 t1@@75 t2@@52 t3@@37 t4@@22 t5@@7 h1@@35 f@@70 bx0@@63 bx1@@49 bx2@@35 bx3@@21 bx4@@7) ($Box o@@79))))) (= (MapType1Select (MapType0Select h0@@35 o@@79) fld@@34) (MapType1Select (MapType0Select h1@@35 o@@79) fld@@34)))) :qid |unknown.0:0| :skolemid |984| :no-pattern (type o@@79) :no-pattern (type fld@@34) :no-pattern (U_2_int o@@79) :no-pattern (U_2_bool o@@79) :no-pattern (U_2_int fld@@34) :no-pattern (U_2_bool fld@@34) )))) (= (Apply5 t0@@99 t1@@75 t2@@52 t3@@37 t4@@22 t5@@7 h0@@35 f@@70 bx0@@63 bx1@@49 bx2@@35 bx3@@21 bx4@@7) (Apply5 t0@@99 t1@@75 t2@@52 t3@@37 t4@@22 t5@@7 h1@@35 f@@70 bx0@@63 bx1@@49 bx2@@35 bx3@@21 bx4@@7))) :qid |unknown.0:0| :skolemid |985| :pattern ( ($HeapSucc h0@@35 h1@@35) (Apply5 t0@@99 t1@@75 t2@@52 t3@@37 t4@@22 t5@@7 h1@@35 f@@70 bx0@@63 bx1@@49 bx2@@35 bx3@@21 bx4@@7)) )))
(assert (forall ((t0@@100 T@U) (t1@@76 T@U) (t2@@53 T@U) (t3@@38 T@U) (t4@@23 T@U) (t5@@8 T@U) (heap@@29 T@U) (f@@71 T@U) (bx0@@64 T@U) (bx1@@50 T@U) (bx2@@36 T@U) (bx3@@22 T@U) (bx4@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@100) TyType) (= (type t1@@76) TyType)) (= (type t2@@53) TyType)) (= (type t3@@38) TyType)) (= (type t4@@23) TyType)) (= (type t5@@8) TyType)) (= (type heap@@29) (MapType0Type refType MapType1Type))) (= (type f@@71) HandleTypeType)) (= (type bx0@@64) BoxType)) (= (type bx1@@50) BoxType)) (= (type bx2@@36) BoxType)) (= (type bx3@@22) BoxType)) (= (type bx4@@8) BoxType)) (and ($IsGoodHeap heap@@29) (and (and (and (and (and ($IsBox bx0@@64 t0@@100) ($IsBox bx1@@50 t1@@76)) ($IsBox bx2@@36 t2@@53)) ($IsBox bx3@@22 t3@@38)) ($IsBox bx4@@8 t4@@23)) ($Is f@@71 (Tclass._System.___hFunc5 t0@@100 t1@@76 t2@@53 t3@@38 t4@@23 t5@@8))))) (= (|Set#Equal| (Reads5 t0@@100 t1@@76 t2@@53 t3@@38 t4@@23 t5@@8 $OneHeap f@@71 bx0@@64 bx1@@50 bx2@@36 bx3@@22 bx4@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads5 t0@@100 t1@@76 t2@@53 t3@@38 t4@@23 t5@@8 heap@@29 f@@71 bx0@@64 bx1@@50 bx2@@36 bx3@@22 bx4@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |986| :pattern ( (Reads5 t0@@100 t1@@76 t2@@53 t3@@38 t4@@23 t5@@8 $OneHeap f@@71 bx0@@64 bx1@@50 bx2@@36 bx3@@22 bx4@@8) ($IsGoodHeap heap@@29)) :pattern ( (Reads5 t0@@100 t1@@76 t2@@53 t3@@38 t4@@23 t5@@8 heap@@29 f@@71 bx0@@64 bx1@@50 bx2@@36 bx3@@22 bx4@@8)) )))
(assert (forall ((t0@@101 T@U) (t1@@77 T@U) (t2@@54 T@U) (t3@@39 T@U) (t4@@24 T@U) (t5@@9 T@U) (heap@@30 T@U) (f@@72 T@U) (bx0@@65 T@U) (bx1@@51 T@U) (bx2@@37 T@U) (bx3@@23 T@U) (bx4@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@101) TyType) (= (type t1@@77) TyType)) (= (type t2@@54) TyType)) (= (type t3@@39) TyType)) (= (type t4@@24) TyType)) (= (type t5@@9) TyType)) (= (type heap@@30) (MapType0Type refType MapType1Type))) (= (type f@@72) HandleTypeType)) (= (type bx0@@65) BoxType)) (= (type bx1@@51) BoxType)) (= (type bx2@@37) BoxType)) (= (type bx3@@23) BoxType)) (= (type bx4@@9) BoxType)) (and (and ($IsGoodHeap heap@@30) (and (and (and (and (and ($IsBox bx0@@65 t0@@101) ($IsBox bx1@@51 t1@@77)) ($IsBox bx2@@37 t2@@54)) ($IsBox bx3@@23 t3@@39)) ($IsBox bx4@@9 t4@@24)) ($Is f@@72 (Tclass._System.___hFunc5 t0@@101 t1@@77 t2@@54 t3@@39 t4@@24 t5@@9)))) (|Set#Equal| (Reads5 t0@@101 t1@@77 t2@@54 t3@@39 t4@@24 t5@@9 $OneHeap f@@72 bx0@@65 bx1@@51 bx2@@37 bx3@@23 bx4@@9) (|Set#Empty| BoxType)))) (= (Requires5 t0@@101 t1@@77 t2@@54 t3@@39 t4@@24 t5@@9 $OneHeap f@@72 bx0@@65 bx1@@51 bx2@@37 bx3@@23 bx4@@9) (Requires5 t0@@101 t1@@77 t2@@54 t3@@39 t4@@24 t5@@9 heap@@30 f@@72 bx0@@65 bx1@@51 bx2@@37 bx3@@23 bx4@@9))) :qid |unknown.0:0| :skolemid |987| :pattern ( (Requires5 t0@@101 t1@@77 t2@@54 t3@@39 t4@@24 t5@@9 $OneHeap f@@72 bx0@@65 bx1@@51 bx2@@37 bx3@@23 bx4@@9) ($IsGoodHeap heap@@30)) :pattern ( (Requires5 t0@@101 t1@@77 t2@@54 t3@@39 t4@@24 t5@@9 heap@@30 f@@72 bx0@@65 bx1@@51 bx2@@37 bx3@@23 bx4@@9)) )))
(assert (forall ((f@@73 T@U) (t0@@102 T@U) (t1@@78 T@U) (t2@@55 T@U) (t3@@40 T@U) (t4@@25 T@U) (t5@@10 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@73) HandleTypeType) (= (type t0@@102) TyType)) (= (type t1@@78) TyType)) (= (type t2@@55) TyType)) (= (type t3@@40) TyType)) (= (type t4@@25) TyType)) (= (type t5@@10) TyType)) (= ($Is f@@73 (Tclass._System.___hFunc5 t0@@102 t1@@78 t2@@55 t3@@40 t4@@25 t5@@10)) (forall ((h@@54 T@U) (bx0@@66 T@U) (bx1@@52 T@U) (bx2@@38 T@U) (bx3@@24 T@U) (bx4@@10 T@U) ) (!  (=> (and (and (and (and (and (and (= (type h@@54) (MapType0Type refType MapType1Type)) (= (type bx0@@66) BoxType)) (= (type bx1@@52) BoxType)) (= (type bx2@@38) BoxType)) (= (type bx3@@24) BoxType)) (= (type bx4@@10) BoxType)) (and (and ($IsGoodHeap h@@54) (and (and (and (and ($IsBox bx0@@66 t0@@102) ($IsBox bx1@@52 t1@@78)) ($IsBox bx2@@38 t2@@55)) ($IsBox bx3@@24 t3@@40)) ($IsBox bx4@@10 t4@@25))) (Requires5 t0@@102 t1@@78 t2@@55 t3@@40 t4@@25 t5@@10 h@@54 f@@73 bx0@@66 bx1@@52 bx2@@38 bx3@@24 bx4@@10))) ($IsBox (Apply5 t0@@102 t1@@78 t2@@55 t3@@40 t4@@25 t5@@10 h@@54 f@@73 bx0@@66 bx1@@52 bx2@@38 bx3@@24 bx4@@10) t5@@10)) :qid |DafnyPreludebpl.545:12| :skolemid |988| :pattern ( (Apply5 t0@@102 t1@@78 t2@@55 t3@@40 t4@@25 t5@@10 h@@54 f@@73 bx0@@66 bx1@@52 bx2@@38 bx3@@24 bx4@@10)) )))) :qid |unknown.0:0| :skolemid |989| :pattern ( ($Is f@@73 (Tclass._System.___hFunc5 t0@@102 t1@@78 t2@@55 t3@@40 t4@@25 t5@@10))) )))
(assert (forall ((f@@74 T@U) (t0@@103 T@U) (t1@@79 T@U) (t2@@56 T@U) (t3@@41 T@U) (t4@@26 T@U) (t5@@11 T@U) (u0@@4 T@U) (u1@@3 T@U) (u2@@2 T@U) (u3@@1 T@U) (u4@@0 T@U) (u5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type f@@74) HandleTypeType) (= (type t0@@103) TyType)) (= (type t1@@79) TyType)) (= (type t2@@56) TyType)) (= (type t3@@41) TyType)) (= (type t4@@26) TyType)) (= (type t5@@11) TyType)) (= (type u0@@4) TyType)) (= (type u1@@3) TyType)) (= (type u2@@2) TyType)) (= (type u3@@1) TyType)) (= (type u4@@0) TyType)) (= (type u5) TyType)) (and (and (and (and (and (and ($Is f@@74 (Tclass._System.___hFunc5 t0@@103 t1@@79 t2@@56 t3@@41 t4@@26 t5@@11)) (forall ((bx@@69 T@U) ) (!  (=> (and (= (type bx@@69) BoxType) ($IsBox bx@@69 u0@@4)) ($IsBox bx@@69 t0@@103)) :qid |unknown.0:0| :skolemid |990| :pattern ( ($IsBox bx@@69 u0@@4)) :pattern ( ($IsBox bx@@69 t0@@103)) ))) (forall ((bx@@70 T@U) ) (!  (=> (and (= (type bx@@70) BoxType) ($IsBox bx@@70 u1@@3)) ($IsBox bx@@70 t1@@79)) :qid |unknown.0:0| :skolemid |991| :pattern ( ($IsBox bx@@70 u1@@3)) :pattern ( ($IsBox bx@@70 t1@@79)) ))) (forall ((bx@@71 T@U) ) (!  (=> (and (= (type bx@@71) BoxType) ($IsBox bx@@71 u2@@2)) ($IsBox bx@@71 t2@@56)) :qid |unknown.0:0| :skolemid |992| :pattern ( ($IsBox bx@@71 u2@@2)) :pattern ( ($IsBox bx@@71 t2@@56)) ))) (forall ((bx@@72 T@U) ) (!  (=> (and (= (type bx@@72) BoxType) ($IsBox bx@@72 u3@@1)) ($IsBox bx@@72 t3@@41)) :qid |unknown.0:0| :skolemid |993| :pattern ( ($IsBox bx@@72 u3@@1)) :pattern ( ($IsBox bx@@72 t3@@41)) ))) (forall ((bx@@73 T@U) ) (!  (=> (and (= (type bx@@73) BoxType) ($IsBox bx@@73 u4@@0)) ($IsBox bx@@73 t4@@26)) :qid |unknown.0:0| :skolemid |994| :pattern ( ($IsBox bx@@73 u4@@0)) :pattern ( ($IsBox bx@@73 t4@@26)) ))) (forall ((bx@@74 T@U) ) (!  (=> (and (= (type bx@@74) BoxType) ($IsBox bx@@74 t5@@11)) ($IsBox bx@@74 u5)) :qid |unknown.0:0| :skolemid |995| :pattern ( ($IsBox bx@@74 t5@@11)) :pattern ( ($IsBox bx@@74 u5)) )))) ($Is f@@74 (Tclass._System.___hFunc5 u0@@4 u1@@3 u2@@2 u3@@1 u4@@0 u5))) :qid |unknown.0:0| :skolemid |996| :pattern ( ($Is f@@74 (Tclass._System.___hFunc5 t0@@103 t1@@79 t2@@56 t3@@41 t4@@26 t5@@11)) ($Is f@@74 (Tclass._System.___hFunc5 u0@@4 u1@@3 u2@@2 u3@@1 u4@@0 u5))) )))
(assert (forall ((f@@75 T@U) (t0@@104 T@U) (t1@@80 T@U) (t2@@57 T@U) (t3@@42 T@U) (t4@@27 T@U) (t5@@12 T@U) (h@@55 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type f@@75) HandleTypeType) (= (type t0@@104) TyType)) (= (type t1@@80) TyType)) (= (type t2@@57) TyType)) (= (type t3@@42) TyType)) (= (type t4@@27) TyType)) (= (type t5@@12) TyType)) (= (type h@@55) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@55)) (= ($IsAlloc f@@75 (Tclass._System.___hFunc5 t0@@104 t1@@80 t2@@57 t3@@42 t4@@27 t5@@12) h@@55) (forall ((bx0@@67 T@U) (bx1@@53 T@U) (bx2@@39 T@U) (bx3@@25 T@U) (bx4@@11 T@U) ) (!  (=> (and (and (and (and (= (type bx0@@67) BoxType) (= (type bx1@@53) BoxType)) (= (type bx2@@39) BoxType)) (= (type bx3@@25) BoxType)) (= (type bx4@@11) BoxType)) (=> (and (and (and (and (and (and ($IsBox bx0@@67 t0@@104) ($IsAllocBox bx0@@67 t0@@104 h@@55)) (and ($IsBox bx1@@53 t1@@80) ($IsAllocBox bx1@@53 t1@@80 h@@55))) (and ($IsBox bx2@@39 t2@@57) ($IsAllocBox bx2@@39 t2@@57 h@@55))) (and ($IsBox bx3@@25 t3@@42) ($IsAllocBox bx3@@25 t3@@42 h@@55))) (and ($IsBox bx4@@11 t4@@27) ($IsAllocBox bx4@@11 t4@@27 h@@55))) (Requires5 t0@@104 t1@@80 t2@@57 t3@@42 t4@@27 t5@@12 h@@55 f@@75 bx0@@67 bx1@@53 bx2@@39 bx3@@25 bx4@@11)) (forall ((r@@29 T@U) ) (!  (=> (= (type r@@29) refType) (=> (and (not (= r@@29 null)) (U_2_bool (MapType0Select (Reads5 t0@@104 t1@@80 t2@@57 t3@@42 t4@@27 t5@@12 h@@55 f@@75 bx0@@67 bx1@@53 bx2@@39 bx3@@25 bx4@@11) ($Box r@@29)))) (U_2_bool (MapType1Select (MapType0Select h@@55 r@@29) alloc)))) :qid |unknown.0:0| :skolemid |997| :pattern ( (MapType0Select (Reads5 t0@@104 t1@@80 t2@@57 t3@@42 t4@@27 t5@@12 h@@55 f@@75 bx0@@67 bx1@@53 bx2@@39 bx3@@25 bx4@@11) ($Box r@@29))) )))) :qid |unknown.0:0| :skolemid |998| :pattern ( (Apply5 t0@@104 t1@@80 t2@@57 t3@@42 t4@@27 t5@@12 h@@55 f@@75 bx0@@67 bx1@@53 bx2@@39 bx3@@25 bx4@@11)) :pattern ( (Reads5 t0@@104 t1@@80 t2@@57 t3@@42 t4@@27 t5@@12 h@@55 f@@75 bx0@@67 bx1@@53 bx2@@39 bx3@@25 bx4@@11)) )))) :qid |unknown.0:0| :skolemid |999| :pattern ( ($IsAlloc f@@75 (Tclass._System.___hFunc5 t0@@104 t1@@80 t2@@57 t3@@42 t4@@27 t5@@12) h@@55)) )))
(assert (forall ((f@@76 T@U) (t0@@105 T@U) (t1@@81 T@U) (t2@@58 T@U) (t3@@43 T@U) (t4@@28 T@U) (t5@@13 T@U) (h@@56 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type f@@76) HandleTypeType) (= (type t0@@105) TyType)) (= (type t1@@81) TyType)) (= (type t2@@58) TyType)) (= (type t3@@43) TyType)) (= (type t4@@28) TyType)) (= (type t5@@13) TyType)) (= (type h@@56) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@56) ($IsAlloc f@@76 (Tclass._System.___hFunc5 t0@@105 t1@@81 t2@@58 t3@@43 t4@@28 t5@@13) h@@56))) (forall ((bx0@@68 T@U) (bx1@@54 T@U) (bx2@@40 T@U) (bx3@@26 T@U) (bx4@@12 T@U) ) (!  (=> (and (and (and (and (= (type bx0@@68) BoxType) (= (type bx1@@54) BoxType)) (= (type bx2@@40) BoxType)) (= (type bx3@@26) BoxType)) (= (type bx4@@12) BoxType)) (=> (and (and (and (and (and ($IsAllocBox bx0@@68 t0@@105 h@@56) ($IsAllocBox bx1@@54 t1@@81 h@@56)) ($IsAllocBox bx2@@40 t2@@58 h@@56)) ($IsAllocBox bx3@@26 t3@@43 h@@56)) ($IsAllocBox bx4@@12 t4@@28 h@@56)) (Requires5 t0@@105 t1@@81 t2@@58 t3@@43 t4@@28 t5@@13 h@@56 f@@76 bx0@@68 bx1@@54 bx2@@40 bx3@@26 bx4@@12)) ($IsAllocBox (Apply5 t0@@105 t1@@81 t2@@58 t3@@43 t4@@28 t5@@13 h@@56 f@@76 bx0@@68 bx1@@54 bx2@@40 bx3@@26 bx4@@12) t5@@13 h@@56))) :qid |unknown.0:0| :skolemid |1000| :pattern ( (Apply5 t0@@105 t1@@81 t2@@58 t3@@43 t4@@28 t5@@13 h@@56 f@@76 bx0@@68 bx1@@54 bx2@@40 bx3@@26 bx4@@12)) ))) :qid |unknown.0:0| :skolemid |1001| :pattern ( ($IsAlloc f@@76 (Tclass._System.___hFunc5 t0@@105 t1@@81 t2@@58 t3@@43 t4@@28 t5@@13) h@@56)) )))
(assert (forall ((arg0@@243 T@U) (arg1@@123 T@U) (arg2@@75 T@U) (arg3@@52 T@U) (arg4@@41 T@U) (arg5@@28 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5 arg0@@243 arg1@@123 arg2@@75 arg3@@52 arg4@@41 arg5@@28)) TyType) :qid |funType:Tclass._System.___hPartialFunc5| :pattern ( (Tclass._System.___hPartialFunc5 arg0@@243 arg1@@123 arg2@@75 arg3@@52 arg4@@41 arg5@@28)) )))
(assert (forall ((|#$T0@@89| T@U) (|#$T1@@73| T@U) (|#$T2@@54| T@U) (|#$T3@@32| T@U) (|#$T4@@7| T@U) (|#$R@@102| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@89|) TyType) (= (type |#$T1@@73|) TyType)) (= (type |#$T2@@54|) TyType)) (= (type |#$T3@@32|) TyType)) (= (type |#$T4@@7|) TyType)) (= (type |#$R@@102|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc5 |#$T0@@89| |#$T1@@73| |#$T2@@54| |#$T3@@32| |#$T4@@7| |#$R@@102|)) Tagclass._System.___hPartialFunc5) (= (TagFamily (Tclass._System.___hPartialFunc5 |#$T0@@89| |#$T1@@73| |#$T2@@54| |#$T3@@32| |#$T4@@7| |#$R@@102|)) |tytagFamily$_#PartialFunc5|))) :qid |unknown.0:0| :skolemid |1002| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@89| |#$T1@@73| |#$T2@@54| |#$T3@@32| |#$T4@@7| |#$R@@102|)) )))
(assert (forall ((arg0@@244 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_0 arg0@@244)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_0| :pattern ( (Tclass._System.___hPartialFunc5_0 arg0@@244)) )))
(assert (forall ((|#$T0@@90| T@U) (|#$T1@@74| T@U) (|#$T2@@55| T@U) (|#$T3@@33| T@U) (|#$T4@@8| T@U) (|#$R@@103| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@90|) TyType) (= (type |#$T1@@74|) TyType)) (= (type |#$T2@@55|) TyType)) (= (type |#$T3@@33|) TyType)) (= (type |#$T4@@8|) TyType)) (= (type |#$R@@103|) TyType)) (= (Tclass._System.___hPartialFunc5_0 (Tclass._System.___hPartialFunc5 |#$T0@@90| |#$T1@@74| |#$T2@@55| |#$T3@@33| |#$T4@@8| |#$R@@103|)) |#$T0@@90|)) :qid |unknown.0:0| :skolemid |1003| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@90| |#$T1@@74| |#$T2@@55| |#$T3@@33| |#$T4@@8| |#$R@@103|)) )))
(assert (forall ((arg0@@245 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_1 arg0@@245)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_1| :pattern ( (Tclass._System.___hPartialFunc5_1 arg0@@245)) )))
(assert (forall ((|#$T0@@91| T@U) (|#$T1@@75| T@U) (|#$T2@@56| T@U) (|#$T3@@34| T@U) (|#$T4@@9| T@U) (|#$R@@104| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@91|) TyType) (= (type |#$T1@@75|) TyType)) (= (type |#$T2@@56|) TyType)) (= (type |#$T3@@34|) TyType)) (= (type |#$T4@@9|) TyType)) (= (type |#$R@@104|) TyType)) (= (Tclass._System.___hPartialFunc5_1 (Tclass._System.___hPartialFunc5 |#$T0@@91| |#$T1@@75| |#$T2@@56| |#$T3@@34| |#$T4@@9| |#$R@@104|)) |#$T1@@75|)) :qid |unknown.0:0| :skolemid |1004| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@91| |#$T1@@75| |#$T2@@56| |#$T3@@34| |#$T4@@9| |#$R@@104|)) )))
(assert (forall ((arg0@@246 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_2 arg0@@246)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_2| :pattern ( (Tclass._System.___hPartialFunc5_2 arg0@@246)) )))
(assert (forall ((|#$T0@@92| T@U) (|#$T1@@76| T@U) (|#$T2@@57| T@U) (|#$T3@@35| T@U) (|#$T4@@10| T@U) (|#$R@@105| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@92|) TyType) (= (type |#$T1@@76|) TyType)) (= (type |#$T2@@57|) TyType)) (= (type |#$T3@@35|) TyType)) (= (type |#$T4@@10|) TyType)) (= (type |#$R@@105|) TyType)) (= (Tclass._System.___hPartialFunc5_2 (Tclass._System.___hPartialFunc5 |#$T0@@92| |#$T1@@76| |#$T2@@57| |#$T3@@35| |#$T4@@10| |#$R@@105|)) |#$T2@@57|)) :qid |unknown.0:0| :skolemid |1005| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@92| |#$T1@@76| |#$T2@@57| |#$T3@@35| |#$T4@@10| |#$R@@105|)) )))
(assert (forall ((arg0@@247 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_3 arg0@@247)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_3| :pattern ( (Tclass._System.___hPartialFunc5_3 arg0@@247)) )))
(assert (forall ((|#$T0@@93| T@U) (|#$T1@@77| T@U) (|#$T2@@58| T@U) (|#$T3@@36| T@U) (|#$T4@@11| T@U) (|#$R@@106| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@93|) TyType) (= (type |#$T1@@77|) TyType)) (= (type |#$T2@@58|) TyType)) (= (type |#$T3@@36|) TyType)) (= (type |#$T4@@11|) TyType)) (= (type |#$R@@106|) TyType)) (= (Tclass._System.___hPartialFunc5_3 (Tclass._System.___hPartialFunc5 |#$T0@@93| |#$T1@@77| |#$T2@@58| |#$T3@@36| |#$T4@@11| |#$R@@106|)) |#$T3@@36|)) :qid |unknown.0:0| :skolemid |1006| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@93| |#$T1@@77| |#$T2@@58| |#$T3@@36| |#$T4@@11| |#$R@@106|)) )))
(assert (forall ((arg0@@248 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_4 arg0@@248)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_4| :pattern ( (Tclass._System.___hPartialFunc5_4 arg0@@248)) )))
(assert (forall ((|#$T0@@94| T@U) (|#$T1@@78| T@U) (|#$T2@@59| T@U) (|#$T3@@37| T@U) (|#$T4@@12| T@U) (|#$R@@107| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@94|) TyType) (= (type |#$T1@@78|) TyType)) (= (type |#$T2@@59|) TyType)) (= (type |#$T3@@37|) TyType)) (= (type |#$T4@@12|) TyType)) (= (type |#$R@@107|) TyType)) (= (Tclass._System.___hPartialFunc5_4 (Tclass._System.___hPartialFunc5 |#$T0@@94| |#$T1@@78| |#$T2@@59| |#$T3@@37| |#$T4@@12| |#$R@@107|)) |#$T4@@12|)) :qid |unknown.0:0| :skolemid |1007| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@94| |#$T1@@78| |#$T2@@59| |#$T3@@37| |#$T4@@12| |#$R@@107|)) )))
(assert (forall ((arg0@@249 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_5 arg0@@249)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_5| :pattern ( (Tclass._System.___hPartialFunc5_5 arg0@@249)) )))
(assert (forall ((|#$T0@@95| T@U) (|#$T1@@79| T@U) (|#$T2@@60| T@U) (|#$T3@@38| T@U) (|#$T4@@13| T@U) (|#$R@@108| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@95|) TyType) (= (type |#$T1@@79|) TyType)) (= (type |#$T2@@60|) TyType)) (= (type |#$T3@@38|) TyType)) (= (type |#$T4@@13|) TyType)) (= (type |#$R@@108|) TyType)) (= (Tclass._System.___hPartialFunc5_5 (Tclass._System.___hPartialFunc5 |#$T0@@95| |#$T1@@79| |#$T2@@60| |#$T3@@38| |#$T4@@13| |#$R@@108|)) |#$R@@108|)) :qid |unknown.0:0| :skolemid |1008| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@95| |#$T1@@79| |#$T2@@60| |#$T3@@38| |#$T4@@13| |#$R@@108|)) )))
(assert (forall ((|#$T0@@96| T@U) (|#$T1@@80| T@U) (|#$T2@@61| T@U) (|#$T3@@39| T@U) (|#$T4@@14| T@U) (|#$R@@109| T@U) (bx@@75 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@96|) TyType) (= (type |#$T1@@80|) TyType)) (= (type |#$T2@@61|) TyType)) (= (type |#$T3@@39|) TyType)) (= (type |#$T4@@14|) TyType)) (= (type |#$R@@109|) TyType)) (= (type bx@@75) BoxType)) ($IsBox bx@@75 (Tclass._System.___hPartialFunc5 |#$T0@@96| |#$T1@@80| |#$T2@@61| |#$T3@@39| |#$T4@@14| |#$R@@109|))) (and (= ($Box ($Unbox HandleTypeType bx@@75)) bx@@75) ($Is ($Unbox HandleTypeType bx@@75) (Tclass._System.___hPartialFunc5 |#$T0@@96| |#$T1@@80| |#$T2@@61| |#$T3@@39| |#$T4@@14| |#$R@@109|)))) :qid |unknown.0:0| :skolemid |1009| :pattern ( ($IsBox bx@@75 (Tclass._System.___hPartialFunc5 |#$T0@@96| |#$T1@@80| |#$T2@@61| |#$T3@@39| |#$T4@@14| |#$R@@109|))) )))
(assert (forall ((|#$T0@@97| T@U) (|#$T1@@81| T@U) (|#$T2@@62| T@U) (|#$T3@@40| T@U) (|#$T4@@15| T@U) (|#$R@@110| T@U) (|f#0@@19| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@97|) TyType) (= (type |#$T1@@81|) TyType)) (= (type |#$T2@@62|) TyType)) (= (type |#$T3@@40|) TyType)) (= (type |#$T4@@15|) TyType)) (= (type |#$R@@110|) TyType)) (= (type |f#0@@19|) HandleTypeType)) (= ($Is |f#0@@19| (Tclass._System.___hPartialFunc5 |#$T0@@97| |#$T1@@81| |#$T2@@62| |#$T3@@40| |#$T4@@15| |#$R@@110|))  (and ($Is |f#0@@19| (Tclass._System.___hFunc5 |#$T0@@97| |#$T1@@81| |#$T2@@62| |#$T3@@40| |#$T4@@15| |#$R@@110|)) (forall ((|x0#0@@7| T@U) (|x1#0@@5| T@U) (|x2#0@@3| T@U) (|x3#0@@1| T@U) (|x4#0| T@U) ) (!  (=> (and (and (and (and (and (= (type |x0#0@@7|) BoxType) (= (type |x1#0@@5|) BoxType)) (= (type |x2#0@@3|) BoxType)) (= (type |x3#0@@1|) BoxType)) (= (type |x4#0|) BoxType)) (and (and (and (and ($IsBox |x0#0@@7| |#$T0@@97|) ($IsBox |x1#0@@5| |#$T1@@81|)) ($IsBox |x2#0@@3| |#$T2@@62|)) ($IsBox |x3#0@@1| |#$T3@@40|)) ($IsBox |x4#0| |#$T4@@15|))) (|Set#Equal| (Reads5 |#$T0@@97| |#$T1@@81| |#$T2@@62| |#$T3@@40| |#$T4@@15| |#$R@@110| $OneHeap |f#0@@19| |x0#0@@7| |x1#0@@5| |x2#0@@3| |x3#0@@1| |x4#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1010| :no-pattern (type |x0#0@@7|) :no-pattern (type |x1#0@@5|) :no-pattern (type |x2#0@@3|) :no-pattern (type |x3#0@@1|) :no-pattern (type |x4#0|) :no-pattern (U_2_int |x0#0@@7|) :no-pattern (U_2_bool |x0#0@@7|) :no-pattern (U_2_int |x1#0@@5|) :no-pattern (U_2_bool |x1#0@@5|) :no-pattern (U_2_int |x2#0@@3|) :no-pattern (U_2_bool |x2#0@@3|) :no-pattern (U_2_int |x3#0@@1|) :no-pattern (U_2_bool |x3#0@@1|) :no-pattern (U_2_int |x4#0|) :no-pattern (U_2_bool |x4#0|) ))))) :qid |unknown.0:0| :skolemid |1011| :pattern ( ($Is |f#0@@19| (Tclass._System.___hPartialFunc5 |#$T0@@97| |#$T1@@81| |#$T2@@62| |#$T3@@40| |#$T4@@15| |#$R@@110|))) )))
(assert (forall ((|#$T0@@98| T@U) (|#$T1@@82| T@U) (|#$T2@@63| T@U) (|#$T3@@41| T@U) (|#$T4@@16| T@U) (|#$R@@111| T@U) (|f#0@@20| T@U) ($h@@18 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@98|) TyType) (= (type |#$T1@@82|) TyType)) (= (type |#$T2@@63|) TyType)) (= (type |#$T3@@41|) TyType)) (= (type |#$T4@@16|) TyType)) (= (type |#$R@@111|) TyType)) (= (type |f#0@@20|) HandleTypeType)) (= (type $h@@18) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@20| (Tclass._System.___hPartialFunc5 |#$T0@@98| |#$T1@@82| |#$T2@@63| |#$T3@@41| |#$T4@@16| |#$R@@111|) $h@@18) ($IsAlloc |f#0@@20| (Tclass._System.___hFunc5 |#$T0@@98| |#$T1@@82| |#$T2@@63| |#$T3@@41| |#$T4@@16| |#$R@@111|) $h@@18))) :qid |unknown.0:0| :skolemid |1012| :pattern ( ($IsAlloc |f#0@@20| (Tclass._System.___hPartialFunc5 |#$T0@@98| |#$T1@@82| |#$T2@@63| |#$T3@@41| |#$T4@@16| |#$R@@111|) $h@@18)) )))
(assert (forall ((arg0@@250 T@U) (arg1@@124 T@U) (arg2@@76 T@U) (arg3@@53 T@U) (arg4@@42 T@U) (arg5@@29 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5 arg0@@250 arg1@@124 arg2@@76 arg3@@53 arg4@@42 arg5@@29)) TyType) :qid |funType:Tclass._System.___hTotalFunc5| :pattern ( (Tclass._System.___hTotalFunc5 arg0@@250 arg1@@124 arg2@@76 arg3@@53 arg4@@42 arg5@@29)) )))
(assert (forall ((|#$T0@@99| T@U) (|#$T1@@83| T@U) (|#$T2@@64| T@U) (|#$T3@@42| T@U) (|#$T4@@17| T@U) (|#$R@@112| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@99|) TyType) (= (type |#$T1@@83|) TyType)) (= (type |#$T2@@64|) TyType)) (= (type |#$T3@@42|) TyType)) (= (type |#$T4@@17|) TyType)) (= (type |#$R@@112|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc5 |#$T0@@99| |#$T1@@83| |#$T2@@64| |#$T3@@42| |#$T4@@17| |#$R@@112|)) Tagclass._System.___hTotalFunc5) (= (TagFamily (Tclass._System.___hTotalFunc5 |#$T0@@99| |#$T1@@83| |#$T2@@64| |#$T3@@42| |#$T4@@17| |#$R@@112|)) |tytagFamily$_#TotalFunc5|))) :qid |unknown.0:0| :skolemid |1013| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@99| |#$T1@@83| |#$T2@@64| |#$T3@@42| |#$T4@@17| |#$R@@112|)) )))
(assert (forall ((arg0@@251 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_0 arg0@@251)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_0| :pattern ( (Tclass._System.___hTotalFunc5_0 arg0@@251)) )))
(assert (forall ((|#$T0@@100| T@U) (|#$T1@@84| T@U) (|#$T2@@65| T@U) (|#$T3@@43| T@U) (|#$T4@@18| T@U) (|#$R@@113| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@100|) TyType) (= (type |#$T1@@84|) TyType)) (= (type |#$T2@@65|) TyType)) (= (type |#$T3@@43|) TyType)) (= (type |#$T4@@18|) TyType)) (= (type |#$R@@113|) TyType)) (= (Tclass._System.___hTotalFunc5_0 (Tclass._System.___hTotalFunc5 |#$T0@@100| |#$T1@@84| |#$T2@@65| |#$T3@@43| |#$T4@@18| |#$R@@113|)) |#$T0@@100|)) :qid |unknown.0:0| :skolemid |1014| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@100| |#$T1@@84| |#$T2@@65| |#$T3@@43| |#$T4@@18| |#$R@@113|)) )))
(assert (forall ((arg0@@252 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_1 arg0@@252)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_1| :pattern ( (Tclass._System.___hTotalFunc5_1 arg0@@252)) )))
(assert (forall ((|#$T0@@101| T@U) (|#$T1@@85| T@U) (|#$T2@@66| T@U) (|#$T3@@44| T@U) (|#$T4@@19| T@U) (|#$R@@114| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@101|) TyType) (= (type |#$T1@@85|) TyType)) (= (type |#$T2@@66|) TyType)) (= (type |#$T3@@44|) TyType)) (= (type |#$T4@@19|) TyType)) (= (type |#$R@@114|) TyType)) (= (Tclass._System.___hTotalFunc5_1 (Tclass._System.___hTotalFunc5 |#$T0@@101| |#$T1@@85| |#$T2@@66| |#$T3@@44| |#$T4@@19| |#$R@@114|)) |#$T1@@85|)) :qid |unknown.0:0| :skolemid |1015| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@101| |#$T1@@85| |#$T2@@66| |#$T3@@44| |#$T4@@19| |#$R@@114|)) )))
(assert (forall ((arg0@@253 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_2 arg0@@253)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_2| :pattern ( (Tclass._System.___hTotalFunc5_2 arg0@@253)) )))
(assert (forall ((|#$T0@@102| T@U) (|#$T1@@86| T@U) (|#$T2@@67| T@U) (|#$T3@@45| T@U) (|#$T4@@20| T@U) (|#$R@@115| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@102|) TyType) (= (type |#$T1@@86|) TyType)) (= (type |#$T2@@67|) TyType)) (= (type |#$T3@@45|) TyType)) (= (type |#$T4@@20|) TyType)) (= (type |#$R@@115|) TyType)) (= (Tclass._System.___hTotalFunc5_2 (Tclass._System.___hTotalFunc5 |#$T0@@102| |#$T1@@86| |#$T2@@67| |#$T3@@45| |#$T4@@20| |#$R@@115|)) |#$T2@@67|)) :qid |unknown.0:0| :skolemid |1016| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@102| |#$T1@@86| |#$T2@@67| |#$T3@@45| |#$T4@@20| |#$R@@115|)) )))
(assert (forall ((arg0@@254 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_3 arg0@@254)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_3| :pattern ( (Tclass._System.___hTotalFunc5_3 arg0@@254)) )))
(assert (forall ((|#$T0@@103| T@U) (|#$T1@@87| T@U) (|#$T2@@68| T@U) (|#$T3@@46| T@U) (|#$T4@@21| T@U) (|#$R@@116| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@103|) TyType) (= (type |#$T1@@87|) TyType)) (= (type |#$T2@@68|) TyType)) (= (type |#$T3@@46|) TyType)) (= (type |#$T4@@21|) TyType)) (= (type |#$R@@116|) TyType)) (= (Tclass._System.___hTotalFunc5_3 (Tclass._System.___hTotalFunc5 |#$T0@@103| |#$T1@@87| |#$T2@@68| |#$T3@@46| |#$T4@@21| |#$R@@116|)) |#$T3@@46|)) :qid |unknown.0:0| :skolemid |1017| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@103| |#$T1@@87| |#$T2@@68| |#$T3@@46| |#$T4@@21| |#$R@@116|)) )))
(assert (forall ((arg0@@255 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_4 arg0@@255)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_4| :pattern ( (Tclass._System.___hTotalFunc5_4 arg0@@255)) )))
(assert (forall ((|#$T0@@104| T@U) (|#$T1@@88| T@U) (|#$T2@@69| T@U) (|#$T3@@47| T@U) (|#$T4@@22| T@U) (|#$R@@117| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@104|) TyType) (= (type |#$T1@@88|) TyType)) (= (type |#$T2@@69|) TyType)) (= (type |#$T3@@47|) TyType)) (= (type |#$T4@@22|) TyType)) (= (type |#$R@@117|) TyType)) (= (Tclass._System.___hTotalFunc5_4 (Tclass._System.___hTotalFunc5 |#$T0@@104| |#$T1@@88| |#$T2@@69| |#$T3@@47| |#$T4@@22| |#$R@@117|)) |#$T4@@22|)) :qid |unknown.0:0| :skolemid |1018| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@104| |#$T1@@88| |#$T2@@69| |#$T3@@47| |#$T4@@22| |#$R@@117|)) )))
(assert (forall ((arg0@@256 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_5 arg0@@256)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_5| :pattern ( (Tclass._System.___hTotalFunc5_5 arg0@@256)) )))
(assert (forall ((|#$T0@@105| T@U) (|#$T1@@89| T@U) (|#$T2@@70| T@U) (|#$T3@@48| T@U) (|#$T4@@23| T@U) (|#$R@@118| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@105|) TyType) (= (type |#$T1@@89|) TyType)) (= (type |#$T2@@70|) TyType)) (= (type |#$T3@@48|) TyType)) (= (type |#$T4@@23|) TyType)) (= (type |#$R@@118|) TyType)) (= (Tclass._System.___hTotalFunc5_5 (Tclass._System.___hTotalFunc5 |#$T0@@105| |#$T1@@89| |#$T2@@70| |#$T3@@48| |#$T4@@23| |#$R@@118|)) |#$R@@118|)) :qid |unknown.0:0| :skolemid |1019| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@105| |#$T1@@89| |#$T2@@70| |#$T3@@48| |#$T4@@23| |#$R@@118|)) )))
(assert (forall ((|#$T0@@106| T@U) (|#$T1@@90| T@U) (|#$T2@@71| T@U) (|#$T3@@49| T@U) (|#$T4@@24| T@U) (|#$R@@119| T@U) (bx@@76 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@106|) TyType) (= (type |#$T1@@90|) TyType)) (= (type |#$T2@@71|) TyType)) (= (type |#$T3@@49|) TyType)) (= (type |#$T4@@24|) TyType)) (= (type |#$R@@119|) TyType)) (= (type bx@@76) BoxType)) ($IsBox bx@@76 (Tclass._System.___hTotalFunc5 |#$T0@@106| |#$T1@@90| |#$T2@@71| |#$T3@@49| |#$T4@@24| |#$R@@119|))) (and (= ($Box ($Unbox HandleTypeType bx@@76)) bx@@76) ($Is ($Unbox HandleTypeType bx@@76) (Tclass._System.___hTotalFunc5 |#$T0@@106| |#$T1@@90| |#$T2@@71| |#$T3@@49| |#$T4@@24| |#$R@@119|)))) :qid |unknown.0:0| :skolemid |1020| :pattern ( ($IsBox bx@@76 (Tclass._System.___hTotalFunc5 |#$T0@@106| |#$T1@@90| |#$T2@@71| |#$T3@@49| |#$T4@@24| |#$R@@119|))) )))
(assert (forall ((|#$T0@@107| T@U) (|#$T1@@91| T@U) (|#$T2@@72| T@U) (|#$T3@@50| T@U) (|#$T4@@25| T@U) (|#$R@@120| T@U) (|f#0@@21| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@107|) TyType) (= (type |#$T1@@91|) TyType)) (= (type |#$T2@@72|) TyType)) (= (type |#$T3@@50|) TyType)) (= (type |#$T4@@25|) TyType)) (= (type |#$R@@120|) TyType)) (= (type |f#0@@21|) HandleTypeType)) (= ($Is |f#0@@21| (Tclass._System.___hTotalFunc5 |#$T0@@107| |#$T1@@91| |#$T2@@72| |#$T3@@50| |#$T4@@25| |#$R@@120|))  (and ($Is |f#0@@21| (Tclass._System.___hPartialFunc5 |#$T0@@107| |#$T1@@91| |#$T2@@72| |#$T3@@50| |#$T4@@25| |#$R@@120|)) (forall ((|x0#0@@8| T@U) (|x1#0@@6| T@U) (|x2#0@@4| T@U) (|x3#0@@2| T@U) (|x4#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type |x0#0@@8|) BoxType) (= (type |x1#0@@6|) BoxType)) (= (type |x2#0@@4|) BoxType)) (= (type |x3#0@@2|) BoxType)) (= (type |x4#0@@0|) BoxType)) (and (and (and (and ($IsBox |x0#0@@8| |#$T0@@107|) ($IsBox |x1#0@@6| |#$T1@@91|)) ($IsBox |x2#0@@4| |#$T2@@72|)) ($IsBox |x3#0@@2| |#$T3@@50|)) ($IsBox |x4#0@@0| |#$T4@@25|))) (Requires5 |#$T0@@107| |#$T1@@91| |#$T2@@72| |#$T3@@50| |#$T4@@25| |#$R@@120| $OneHeap |f#0@@21| |x0#0@@8| |x1#0@@6| |x2#0@@4| |x3#0@@2| |x4#0@@0|)) :qid |unknown.0:0| :skolemid |1021| :no-pattern (type |x0#0@@8|) :no-pattern (type |x1#0@@6|) :no-pattern (type |x2#0@@4|) :no-pattern (type |x3#0@@2|) :no-pattern (type |x4#0@@0|) :no-pattern (U_2_int |x0#0@@8|) :no-pattern (U_2_bool |x0#0@@8|) :no-pattern (U_2_int |x1#0@@6|) :no-pattern (U_2_bool |x1#0@@6|) :no-pattern (U_2_int |x2#0@@4|) :no-pattern (U_2_bool |x2#0@@4|) :no-pattern (U_2_int |x3#0@@2|) :no-pattern (U_2_bool |x3#0@@2|) :no-pattern (U_2_int |x4#0@@0|) :no-pattern (U_2_bool |x4#0@@0|) ))))) :qid |unknown.0:0| :skolemid |1022| :pattern ( ($Is |f#0@@21| (Tclass._System.___hTotalFunc5 |#$T0@@107| |#$T1@@91| |#$T2@@72| |#$T3@@50| |#$T4@@25| |#$R@@120|))) )))
(assert (forall ((|#$T0@@108| T@U) (|#$T1@@92| T@U) (|#$T2@@73| T@U) (|#$T3@@51| T@U) (|#$T4@@26| T@U) (|#$R@@121| T@U) (|f#0@@22| T@U) ($h@@19 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@108|) TyType) (= (type |#$T1@@92|) TyType)) (= (type |#$T2@@73|) TyType)) (= (type |#$T3@@51|) TyType)) (= (type |#$T4@@26|) TyType)) (= (type |#$R@@121|) TyType)) (= (type |f#0@@22|) HandleTypeType)) (= (type $h@@19) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@22| (Tclass._System.___hTotalFunc5 |#$T0@@108| |#$T1@@92| |#$T2@@73| |#$T3@@51| |#$T4@@26| |#$R@@121|) $h@@19) ($IsAlloc |f#0@@22| (Tclass._System.___hPartialFunc5 |#$T0@@108| |#$T1@@92| |#$T2@@73| |#$T3@@51| |#$T4@@26| |#$R@@121|) $h@@19))) :qid |unknown.0:0| :skolemid |1023| :pattern ( ($IsAlloc |f#0@@22| (Tclass._System.___hTotalFunc5 |#$T0@@108| |#$T1@@92| |#$T2@@73| |#$T3@@51| |#$T4@@26| |#$R@@121|) $h@@19)) )))
(assert (forall ((arg0@@257 T@U) (arg1@@125 T@U) (arg2@@77 T@U) (arg3@@54 T@U) (arg4@@43 T@U) (arg5@@30 T@U) (arg6@@18 T@U) ) (! (= (type (Tclass._System.___hFunc6 arg0@@257 arg1@@125 arg2@@77 arg3@@54 arg4@@43 arg5@@30 arg6@@18)) TyType) :qid |funType:Tclass._System.___hFunc6| :pattern ( (Tclass._System.___hFunc6 arg0@@257 arg1@@125 arg2@@77 arg3@@54 arg4@@43 arg5@@30 arg6@@18)) )))
(assert (forall ((|#$T0@@109| T@U) (|#$T1@@93| T@U) (|#$T2@@74| T@U) (|#$T3@@52| T@U) (|#$T4@@27| T@U) (|#$T5| T@U) (|#$R@@122| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@109|) TyType) (= (type |#$T1@@93|) TyType)) (= (type |#$T2@@74|) TyType)) (= (type |#$T3@@52|) TyType)) (= (type |#$T4@@27|) TyType)) (= (type |#$T5|) TyType)) (= (type |#$R@@122|) TyType)) (and (= (Tag (Tclass._System.___hFunc6 |#$T0@@109| |#$T1@@93| |#$T2@@74| |#$T3@@52| |#$T4@@27| |#$T5| |#$R@@122|)) Tagclass._System.___hFunc6) (= (TagFamily (Tclass._System.___hFunc6 |#$T0@@109| |#$T1@@93| |#$T2@@74| |#$T3@@52| |#$T4@@27| |#$T5| |#$R@@122|)) |tytagFamily$_#Func6|))) :qid |unknown.0:0| :skolemid |1024| :pattern ( (Tclass._System.___hFunc6 |#$T0@@109| |#$T1@@93| |#$T2@@74| |#$T3@@52| |#$T4@@27| |#$T5| |#$R@@122|)) )))
(assert (forall ((arg0@@258 T@U) ) (! (= (type (Tclass._System.___hFunc6_0 arg0@@258)) TyType) :qid |funType:Tclass._System.___hFunc6_0| :pattern ( (Tclass._System.___hFunc6_0 arg0@@258)) )))
(assert (forall ((|#$T0@@110| T@U) (|#$T1@@94| T@U) (|#$T2@@75| T@U) (|#$T3@@53| T@U) (|#$T4@@28| T@U) (|#$T5@@0| T@U) (|#$R@@123| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@110|) TyType) (= (type |#$T1@@94|) TyType)) (= (type |#$T2@@75|) TyType)) (= (type |#$T3@@53|) TyType)) (= (type |#$T4@@28|) TyType)) (= (type |#$T5@@0|) TyType)) (= (type |#$R@@123|) TyType)) (= (Tclass._System.___hFunc6_0 (Tclass._System.___hFunc6 |#$T0@@110| |#$T1@@94| |#$T2@@75| |#$T3@@53| |#$T4@@28| |#$T5@@0| |#$R@@123|)) |#$T0@@110|)) :qid |unknown.0:0| :skolemid |1025| :pattern ( (Tclass._System.___hFunc6 |#$T0@@110| |#$T1@@94| |#$T2@@75| |#$T3@@53| |#$T4@@28| |#$T5@@0| |#$R@@123|)) )))
(assert (forall ((arg0@@259 T@U) ) (! (= (type (Tclass._System.___hFunc6_1 arg0@@259)) TyType) :qid |funType:Tclass._System.___hFunc6_1| :pattern ( (Tclass._System.___hFunc6_1 arg0@@259)) )))
(assert (forall ((|#$T0@@111| T@U) (|#$T1@@95| T@U) (|#$T2@@76| T@U) (|#$T3@@54| T@U) (|#$T4@@29| T@U) (|#$T5@@1| T@U) (|#$R@@124| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@111|) TyType) (= (type |#$T1@@95|) TyType)) (= (type |#$T2@@76|) TyType)) (= (type |#$T3@@54|) TyType)) (= (type |#$T4@@29|) TyType)) (= (type |#$T5@@1|) TyType)) (= (type |#$R@@124|) TyType)) (= (Tclass._System.___hFunc6_1 (Tclass._System.___hFunc6 |#$T0@@111| |#$T1@@95| |#$T2@@76| |#$T3@@54| |#$T4@@29| |#$T5@@1| |#$R@@124|)) |#$T1@@95|)) :qid |unknown.0:0| :skolemid |1026| :pattern ( (Tclass._System.___hFunc6 |#$T0@@111| |#$T1@@95| |#$T2@@76| |#$T3@@54| |#$T4@@29| |#$T5@@1| |#$R@@124|)) )))
(assert (forall ((arg0@@260 T@U) ) (! (= (type (Tclass._System.___hFunc6_2 arg0@@260)) TyType) :qid |funType:Tclass._System.___hFunc6_2| :pattern ( (Tclass._System.___hFunc6_2 arg0@@260)) )))
(assert (forall ((|#$T0@@112| T@U) (|#$T1@@96| T@U) (|#$T2@@77| T@U) (|#$T3@@55| T@U) (|#$T4@@30| T@U) (|#$T5@@2| T@U) (|#$R@@125| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@112|) TyType) (= (type |#$T1@@96|) TyType)) (= (type |#$T2@@77|) TyType)) (= (type |#$T3@@55|) TyType)) (= (type |#$T4@@30|) TyType)) (= (type |#$T5@@2|) TyType)) (= (type |#$R@@125|) TyType)) (= (Tclass._System.___hFunc6_2 (Tclass._System.___hFunc6 |#$T0@@112| |#$T1@@96| |#$T2@@77| |#$T3@@55| |#$T4@@30| |#$T5@@2| |#$R@@125|)) |#$T2@@77|)) :qid |unknown.0:0| :skolemid |1027| :pattern ( (Tclass._System.___hFunc6 |#$T0@@112| |#$T1@@96| |#$T2@@77| |#$T3@@55| |#$T4@@30| |#$T5@@2| |#$R@@125|)) )))
(assert (forall ((arg0@@261 T@U) ) (! (= (type (Tclass._System.___hFunc6_3 arg0@@261)) TyType) :qid |funType:Tclass._System.___hFunc6_3| :pattern ( (Tclass._System.___hFunc6_3 arg0@@261)) )))
(assert (forall ((|#$T0@@113| T@U) (|#$T1@@97| T@U) (|#$T2@@78| T@U) (|#$T3@@56| T@U) (|#$T4@@31| T@U) (|#$T5@@3| T@U) (|#$R@@126| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@113|) TyType) (= (type |#$T1@@97|) TyType)) (= (type |#$T2@@78|) TyType)) (= (type |#$T3@@56|) TyType)) (= (type |#$T4@@31|) TyType)) (= (type |#$T5@@3|) TyType)) (= (type |#$R@@126|) TyType)) (= (Tclass._System.___hFunc6_3 (Tclass._System.___hFunc6 |#$T0@@113| |#$T1@@97| |#$T2@@78| |#$T3@@56| |#$T4@@31| |#$T5@@3| |#$R@@126|)) |#$T3@@56|)) :qid |unknown.0:0| :skolemid |1028| :pattern ( (Tclass._System.___hFunc6 |#$T0@@113| |#$T1@@97| |#$T2@@78| |#$T3@@56| |#$T4@@31| |#$T5@@3| |#$R@@126|)) )))
(assert (forall ((arg0@@262 T@U) ) (! (= (type (Tclass._System.___hFunc6_4 arg0@@262)) TyType) :qid |funType:Tclass._System.___hFunc6_4| :pattern ( (Tclass._System.___hFunc6_4 arg0@@262)) )))
(assert (forall ((|#$T0@@114| T@U) (|#$T1@@98| T@U) (|#$T2@@79| T@U) (|#$T3@@57| T@U) (|#$T4@@32| T@U) (|#$T5@@4| T@U) (|#$R@@127| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@114|) TyType) (= (type |#$T1@@98|) TyType)) (= (type |#$T2@@79|) TyType)) (= (type |#$T3@@57|) TyType)) (= (type |#$T4@@32|) TyType)) (= (type |#$T5@@4|) TyType)) (= (type |#$R@@127|) TyType)) (= (Tclass._System.___hFunc6_4 (Tclass._System.___hFunc6 |#$T0@@114| |#$T1@@98| |#$T2@@79| |#$T3@@57| |#$T4@@32| |#$T5@@4| |#$R@@127|)) |#$T4@@32|)) :qid |unknown.0:0| :skolemid |1029| :pattern ( (Tclass._System.___hFunc6 |#$T0@@114| |#$T1@@98| |#$T2@@79| |#$T3@@57| |#$T4@@32| |#$T5@@4| |#$R@@127|)) )))
(assert (forall ((arg0@@263 T@U) ) (! (= (type (Tclass._System.___hFunc6_5 arg0@@263)) TyType) :qid |funType:Tclass._System.___hFunc6_5| :pattern ( (Tclass._System.___hFunc6_5 arg0@@263)) )))
(assert (forall ((|#$T0@@115| T@U) (|#$T1@@99| T@U) (|#$T2@@80| T@U) (|#$T3@@58| T@U) (|#$T4@@33| T@U) (|#$T5@@5| T@U) (|#$R@@128| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@115|) TyType) (= (type |#$T1@@99|) TyType)) (= (type |#$T2@@80|) TyType)) (= (type |#$T3@@58|) TyType)) (= (type |#$T4@@33|) TyType)) (= (type |#$T5@@5|) TyType)) (= (type |#$R@@128|) TyType)) (= (Tclass._System.___hFunc6_5 (Tclass._System.___hFunc6 |#$T0@@115| |#$T1@@99| |#$T2@@80| |#$T3@@58| |#$T4@@33| |#$T5@@5| |#$R@@128|)) |#$T5@@5|)) :qid |unknown.0:0| :skolemid |1030| :pattern ( (Tclass._System.___hFunc6 |#$T0@@115| |#$T1@@99| |#$T2@@80| |#$T3@@58| |#$T4@@33| |#$T5@@5| |#$R@@128|)) )))
(assert (forall ((arg0@@264 T@U) ) (! (= (type (Tclass._System.___hFunc6_6 arg0@@264)) TyType) :qid |funType:Tclass._System.___hFunc6_6| :pattern ( (Tclass._System.___hFunc6_6 arg0@@264)) )))
(assert (forall ((|#$T0@@116| T@U) (|#$T1@@100| T@U) (|#$T2@@81| T@U) (|#$T3@@59| T@U) (|#$T4@@34| T@U) (|#$T5@@6| T@U) (|#$R@@129| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@116|) TyType) (= (type |#$T1@@100|) TyType)) (= (type |#$T2@@81|) TyType)) (= (type |#$T3@@59|) TyType)) (= (type |#$T4@@34|) TyType)) (= (type |#$T5@@6|) TyType)) (= (type |#$R@@129|) TyType)) (= (Tclass._System.___hFunc6_6 (Tclass._System.___hFunc6 |#$T0@@116| |#$T1@@100| |#$T2@@81| |#$T3@@59| |#$T4@@34| |#$T5@@6| |#$R@@129|)) |#$R@@129|)) :qid |unknown.0:0| :skolemid |1031| :pattern ( (Tclass._System.___hFunc6 |#$T0@@116| |#$T1@@100| |#$T2@@81| |#$T3@@59| |#$T4@@34| |#$T5@@6| |#$R@@129|)) )))
(assert (forall ((|#$T0@@117| T@U) (|#$T1@@101| T@U) (|#$T2@@82| T@U) (|#$T3@@60| T@U) (|#$T4@@35| T@U) (|#$T5@@7| T@U) (|#$R@@130| T@U) (bx@@77 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@117|) TyType) (= (type |#$T1@@101|) TyType)) (= (type |#$T2@@82|) TyType)) (= (type |#$T3@@60|) TyType)) (= (type |#$T4@@35|) TyType)) (= (type |#$T5@@7|) TyType)) (= (type |#$R@@130|) TyType)) (= (type bx@@77) BoxType)) ($IsBox bx@@77 (Tclass._System.___hFunc6 |#$T0@@117| |#$T1@@101| |#$T2@@82| |#$T3@@60| |#$T4@@35| |#$T5@@7| |#$R@@130|))) (and (= ($Box ($Unbox HandleTypeType bx@@77)) bx@@77) ($Is ($Unbox HandleTypeType bx@@77) (Tclass._System.___hFunc6 |#$T0@@117| |#$T1@@101| |#$T2@@82| |#$T3@@60| |#$T4@@35| |#$T5@@7| |#$R@@130|)))) :qid |unknown.0:0| :skolemid |1032| :pattern ( ($IsBox bx@@77 (Tclass._System.___hFunc6 |#$T0@@117| |#$T1@@101| |#$T2@@82| |#$T3@@60| |#$T4@@35| |#$T5@@7| |#$R@@130|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@265 T@T) (arg1@@126 T@T) (arg2@@78 T@T) (arg3@@55 T@T) (arg4@@44 T@T) (arg5@@31 T@T) (arg6@@19 T@T) (arg7@@6 T@T) ) (! (= (Ctor (MapType7Type arg0@@265 arg1@@126 arg2@@78 arg3@@55 arg4@@44 arg5@@31 arg6@@19 arg7@@6)) 29) :qid |ctor:MapType7Type| )) (forall ((arg0@@266 T@T) (arg1@@127 T@T) (arg2@@79 T@T) (arg3@@56 T@T) (arg4@@45 T@T) (arg5@@32 T@T) (arg6@@20 T@T) (arg7@@7 T@T) ) (! (= (MapType7TypeInv0 (MapType7Type arg0@@266 arg1@@127 arg2@@79 arg3@@56 arg4@@45 arg5@@32 arg6@@20 arg7@@7)) arg0@@266) :qid |typeInv:MapType7TypeInv0| :pattern ( (MapType7Type arg0@@266 arg1@@127 arg2@@79 arg3@@56 arg4@@45 arg5@@32 arg6@@20 arg7@@7)) ))) (forall ((arg0@@267 T@T) (arg1@@128 T@T) (arg2@@80 T@T) (arg3@@57 T@T) (arg4@@46 T@T) (arg5@@33 T@T) (arg6@@21 T@T) (arg7@@8 T@T) ) (! (= (MapType7TypeInv1 (MapType7Type arg0@@267 arg1@@128 arg2@@80 arg3@@57 arg4@@46 arg5@@33 arg6@@21 arg7@@8)) arg1@@128) :qid |typeInv:MapType7TypeInv1| :pattern ( (MapType7Type arg0@@267 arg1@@128 arg2@@80 arg3@@57 arg4@@46 arg5@@33 arg6@@21 arg7@@8)) ))) (forall ((arg0@@268 T@T) (arg1@@129 T@T) (arg2@@81 T@T) (arg3@@58 T@T) (arg4@@47 T@T) (arg5@@34 T@T) (arg6@@22 T@T) (arg7@@9 T@T) ) (! (= (MapType7TypeInv2 (MapType7Type arg0@@268 arg1@@129 arg2@@81 arg3@@58 arg4@@47 arg5@@34 arg6@@22 arg7@@9)) arg2@@81) :qid |typeInv:MapType7TypeInv2| :pattern ( (MapType7Type arg0@@268 arg1@@129 arg2@@81 arg3@@58 arg4@@47 arg5@@34 arg6@@22 arg7@@9)) ))) (forall ((arg0@@269 T@T) (arg1@@130 T@T) (arg2@@82 T@T) (arg3@@59 T@T) (arg4@@48 T@T) (arg5@@35 T@T) (arg6@@23 T@T) (arg7@@10 T@T) ) (! (= (MapType7TypeInv3 (MapType7Type arg0@@269 arg1@@130 arg2@@82 arg3@@59 arg4@@48 arg5@@35 arg6@@23 arg7@@10)) arg3@@59) :qid |typeInv:MapType7TypeInv3| :pattern ( (MapType7Type arg0@@269 arg1@@130 arg2@@82 arg3@@59 arg4@@48 arg5@@35 arg6@@23 arg7@@10)) ))) (forall ((arg0@@270 T@T) (arg1@@131 T@T) (arg2@@83 T@T) (arg3@@60 T@T) (arg4@@49 T@T) (arg5@@36 T@T) (arg6@@24 T@T) (arg7@@11 T@T) ) (! (= (MapType7TypeInv4 (MapType7Type arg0@@270 arg1@@131 arg2@@83 arg3@@60 arg4@@49 arg5@@36 arg6@@24 arg7@@11)) arg4@@49) :qid |typeInv:MapType7TypeInv4| :pattern ( (MapType7Type arg0@@270 arg1@@131 arg2@@83 arg3@@60 arg4@@49 arg5@@36 arg6@@24 arg7@@11)) ))) (forall ((arg0@@271 T@T) (arg1@@132 T@T) (arg2@@84 T@T) (arg3@@61 T@T) (arg4@@50 T@T) (arg5@@37 T@T) (arg6@@25 T@T) (arg7@@12 T@T) ) (! (= (MapType7TypeInv5 (MapType7Type arg0@@271 arg1@@132 arg2@@84 arg3@@61 arg4@@50 arg5@@37 arg6@@25 arg7@@12)) arg5@@37) :qid |typeInv:MapType7TypeInv5| :pattern ( (MapType7Type arg0@@271 arg1@@132 arg2@@84 arg3@@61 arg4@@50 arg5@@37 arg6@@25 arg7@@12)) ))) (forall ((arg0@@272 T@T) (arg1@@133 T@T) (arg2@@85 T@T) (arg3@@62 T@T) (arg4@@51 T@T) (arg5@@38 T@T) (arg6@@26 T@T) (arg7@@13 T@T) ) (! (= (MapType7TypeInv6 (MapType7Type arg0@@272 arg1@@133 arg2@@85 arg3@@62 arg4@@51 arg5@@38 arg6@@26 arg7@@13)) arg6@@26) :qid |typeInv:MapType7TypeInv6| :pattern ( (MapType7Type arg0@@272 arg1@@133 arg2@@85 arg3@@62 arg4@@51 arg5@@38 arg6@@26 arg7@@13)) ))) (forall ((arg0@@273 T@T) (arg1@@134 T@T) (arg2@@86 T@T) (arg3@@63 T@T) (arg4@@52 T@T) (arg5@@39 T@T) (arg6@@27 T@T) (arg7@@14 T@T) ) (! (= (MapType7TypeInv7 (MapType7Type arg0@@273 arg1@@134 arg2@@86 arg3@@63 arg4@@52 arg5@@39 arg6@@27 arg7@@14)) arg7@@14) :qid |typeInv:MapType7TypeInv7| :pattern ( (MapType7Type arg0@@273 arg1@@134 arg2@@86 arg3@@63 arg4@@52 arg5@@39 arg6@@27 arg7@@14)) ))) (forall ((arg0@@274 T@U) (arg1@@135 T@U) (arg2@@87 T@U) (arg3@@64 T@U) (arg4@@53 T@U) (arg5@@40 T@U) (arg6@@28 T@U) (arg7@@15 T@U) ) (! (let ((aVar7 (MapType7TypeInv7 (type arg0@@274)))) (= (type (MapType7Select arg0@@274 arg1@@135 arg2@@87 arg3@@64 arg4@@53 arg5@@40 arg6@@28 arg7@@15)) aVar7)) :qid |funType:MapType7Select| :pattern ( (MapType7Select arg0@@274 arg1@@135 arg2@@87 arg3@@64 arg4@@53 arg5@@40 arg6@@28 arg7@@15)) ))) (forall ((arg0@@275 T@U) (arg1@@136 T@U) (arg2@@88 T@U) (arg3@@65 T@U) (arg4@@54 T@U) (arg5@@41 T@U) (arg6@@29 T@U) (arg7@@16 T@U) (arg8@@5 T@U) ) (! (let ((aVar7@@0 (type arg8@@5))) (let ((aVar6@@2 (type arg7@@16))) (let ((aVar5@@3 (type arg6@@29))) (let ((aVar4@@4 (type arg5@@41))) (let ((aVar3@@5 (type arg4@@54))) (let ((aVar2@@6 (type arg3@@65))) (let ((aVar1@@7 (type arg2@@88))) (let ((aVar0@@5 (type arg1@@136))) (= (type (MapType7Store arg0@@275 arg1@@136 arg2@@88 arg3@@65 arg4@@54 arg5@@41 arg6@@29 arg7@@16 arg8@@5)) (MapType7Type aVar0@@5 aVar1@@7 aVar2@@6 aVar3@@5 aVar4@@4 aVar5@@3 aVar6@@2 aVar7@@0)))))))))) :qid |funType:MapType7Store| :pattern ( (MapType7Store arg0@@275 arg1@@136 arg2@@88 arg3@@65 arg4@@54 arg5@@41 arg6@@29 arg7@@16 arg8@@5)) ))) (forall ((m@@75 T@U) (x0@@35 T@U) (x1@@29 T@U) (x2@@25 T@U) (x3@@20 T@U) (x4@@14 T@U) (x5@@7 T@U) (x6 T@U) (val@@36 T@U) ) (! (let ((aVar7@@1 (MapType7TypeInv7 (type m@@75)))) (=> (= (type val@@36) aVar7@@1) (= (MapType7Select (MapType7Store m@@75 x0@@35 x1@@29 x2@@25 x3@@20 x4@@14 x5@@7 x6 val@@36) x0@@35 x1@@29 x2@@25 x3@@20 x4@@14 x5@@7 x6) val@@36))) :qid |mapAx0:MapType7Select| :weight 0 ))) (and (and (and (and (and (and (and (forall ((val@@37 T@U) (m@@76 T@U) (x0@@36 T@U) (x1@@30 T@U) (x2@@26 T@U) (x3@@21 T@U) (x4@@15 T@U) (x5@@8 T@U) (x6@@0 T@U) (y0@@28 T@U) (y1@@24 T@U) (y2@@21 T@U) (y3@@17 T@U) (y4@@12 T@U) (y5@@6 T@U) (y6 T@U) ) (!  (or (= x0@@36 y0@@28) (= (MapType7Select (MapType7Store m@@76 x0@@36 x1@@30 x2@@26 x3@@21 x4@@15 x5@@8 x6@@0 val@@37) y0@@28 y1@@24 y2@@21 y3@@17 y4@@12 y5@@6 y6) (MapType7Select m@@76 y0@@28 y1@@24 y2@@21 y3@@17 y4@@12 y5@@6 y6))) :qid |mapAx1:MapType7Select:0| :weight 0 )) (forall ((val@@38 T@U) (m@@77 T@U) (x0@@37 T@U) (x1@@31 T@U) (x2@@27 T@U) (x3@@22 T@U) (x4@@16 T@U) (x5@@9 T@U) (x6@@1 T@U) (y0@@29 T@U) (y1@@25 T@U) (y2@@22 T@U) (y3@@18 T@U) (y4@@13 T@U) (y5@@7 T@U) (y6@@0 T@U) ) (!  (or (= x1@@31 y1@@25) (= (MapType7Select (MapType7Store m@@77 x0@@37 x1@@31 x2@@27 x3@@22 x4@@16 x5@@9 x6@@1 val@@38) y0@@29 y1@@25 y2@@22 y3@@18 y4@@13 y5@@7 y6@@0) (MapType7Select m@@77 y0@@29 y1@@25 y2@@22 y3@@18 y4@@13 y5@@7 y6@@0))) :qid |mapAx1:MapType7Select:1| :weight 0 ))) (forall ((val@@39 T@U) (m@@78 T@U) (x0@@38 T@U) (x1@@32 T@U) (x2@@28 T@U) (x3@@23 T@U) (x4@@17 T@U) (x5@@10 T@U) (x6@@2 T@U) (y0@@30 T@U) (y1@@26 T@U) (y2@@23 T@U) (y3@@19 T@U) (y4@@14 T@U) (y5@@8 T@U) (y6@@1 T@U) ) (!  (or (= x2@@28 y2@@23) (= (MapType7Select (MapType7Store m@@78 x0@@38 x1@@32 x2@@28 x3@@23 x4@@17 x5@@10 x6@@2 val@@39) y0@@30 y1@@26 y2@@23 y3@@19 y4@@14 y5@@8 y6@@1) (MapType7Select m@@78 y0@@30 y1@@26 y2@@23 y3@@19 y4@@14 y5@@8 y6@@1))) :qid |mapAx1:MapType7Select:2| :weight 0 ))) (forall ((val@@40 T@U) (m@@79 T@U) (x0@@39 T@U) (x1@@33 T@U) (x2@@29 T@U) (x3@@24 T@U) (x4@@18 T@U) (x5@@11 T@U) (x6@@3 T@U) (y0@@31 T@U) (y1@@27 T@U) (y2@@24 T@U) (y3@@20 T@U) (y4@@15 T@U) (y5@@9 T@U) (y6@@2 T@U) ) (!  (or (= x3@@24 y3@@20) (= (MapType7Select (MapType7Store m@@79 x0@@39 x1@@33 x2@@29 x3@@24 x4@@18 x5@@11 x6@@3 val@@40) y0@@31 y1@@27 y2@@24 y3@@20 y4@@15 y5@@9 y6@@2) (MapType7Select m@@79 y0@@31 y1@@27 y2@@24 y3@@20 y4@@15 y5@@9 y6@@2))) :qid |mapAx1:MapType7Select:3| :weight 0 ))) (forall ((val@@41 T@U) (m@@80 T@U) (x0@@40 T@U) (x1@@34 T@U) (x2@@30 T@U) (x3@@25 T@U) (x4@@19 T@U) (x5@@12 T@U) (x6@@4 T@U) (y0@@32 T@U) (y1@@28 T@U) (y2@@25 T@U) (y3@@21 T@U) (y4@@16 T@U) (y5@@10 T@U) (y6@@3 T@U) ) (!  (or (= x4@@19 y4@@16) (= (MapType7Select (MapType7Store m@@80 x0@@40 x1@@34 x2@@30 x3@@25 x4@@19 x5@@12 x6@@4 val@@41) y0@@32 y1@@28 y2@@25 y3@@21 y4@@16 y5@@10 y6@@3) (MapType7Select m@@80 y0@@32 y1@@28 y2@@25 y3@@21 y4@@16 y5@@10 y6@@3))) :qid |mapAx1:MapType7Select:4| :weight 0 ))) (forall ((val@@42 T@U) (m@@81 T@U) (x0@@41 T@U) (x1@@35 T@U) (x2@@31 T@U) (x3@@26 T@U) (x4@@20 T@U) (x5@@13 T@U) (x6@@5 T@U) (y0@@33 T@U) (y1@@29 T@U) (y2@@26 T@U) (y3@@22 T@U) (y4@@17 T@U) (y5@@11 T@U) (y6@@4 T@U) ) (!  (or (= x5@@13 y5@@11) (= (MapType7Select (MapType7Store m@@81 x0@@41 x1@@35 x2@@31 x3@@26 x4@@20 x5@@13 x6@@5 val@@42) y0@@33 y1@@29 y2@@26 y3@@22 y4@@17 y5@@11 y6@@4) (MapType7Select m@@81 y0@@33 y1@@29 y2@@26 y3@@22 y4@@17 y5@@11 y6@@4))) :qid |mapAx1:MapType7Select:5| :weight 0 ))) (forall ((val@@43 T@U) (m@@82 T@U) (x0@@42 T@U) (x1@@36 T@U) (x2@@32 T@U) (x3@@27 T@U) (x4@@21 T@U) (x5@@14 T@U) (x6@@6 T@U) (y0@@34 T@U) (y1@@30 T@U) (y2@@27 T@U) (y3@@23 T@U) (y4@@18 T@U) (y5@@12 T@U) (y6@@5 T@U) ) (!  (or (= x6@@6 y6@@5) (= (MapType7Select (MapType7Store m@@82 x0@@42 x1@@36 x2@@32 x3@@27 x4@@21 x5@@14 x6@@6 val@@43) y0@@34 y1@@30 y2@@27 y3@@23 y4@@18 y5@@12 y6@@5) (MapType7Select m@@82 y0@@34 y1@@30 y2@@27 y3@@23 y4@@18 y5@@12 y6@@5))) :qid |mapAx1:MapType7Select:6| :weight 0 ))) (forall ((val@@44 T@U) (m@@83 T@U) (x0@@43 T@U) (x1@@37 T@U) (x2@@33 T@U) (x3@@28 T@U) (x4@@22 T@U) (x5@@15 T@U) (x6@@7 T@U) (y0@@35 T@U) (y1@@31 T@U) (y2@@28 T@U) (y3@@24 T@U) (y4@@19 T@U) (y5@@13 T@U) (y6@@6 T@U) ) (!  (or true (= (MapType7Select (MapType7Store m@@83 x0@@43 x1@@37 x2@@33 x3@@28 x4@@22 x5@@15 x6@@7 val@@44) y0@@35 y1@@31 y2@@28 y3@@24 y4@@19 y5@@13 y6@@6) (MapType7Select m@@83 y0@@35 y1@@31 y2@@28 y3@@24 y4@@19 y5@@13 y6@@6))) :qid |mapAx2:MapType7Select| :weight 0 )))) (forall ((arg0@@276 T@U) (arg1@@137 T@U) (arg2@@89 T@U) (arg3@@66 T@U) (arg4@@55 T@U) (arg5@@42 T@U) (arg6@@30 T@U) (arg7@@17 T@U) (arg8@@6 T@U) (arg9@@3 T@U) (arg10@@3 T@U) (arg11@@1 T@U) (arg12@@1 T@U) (arg13 T@U) (arg14 T@U) ) (! (= (type (Apply6 arg0@@276 arg1@@137 arg2@@89 arg3@@66 arg4@@55 arg5@@42 arg6@@30 arg7@@17 arg8@@6 arg9@@3 arg10@@3 arg11@@1 arg12@@1 arg13 arg14)) BoxType) :qid |funType:Apply6| :pattern ( (Apply6 arg0@@276 arg1@@137 arg2@@89 arg3@@66 arg4@@55 arg5@@42 arg6@@30 arg7@@17 arg8@@6 arg9@@3 arg10@@3 arg11@@1 arg12@@1 arg13 arg14)) ))) (forall ((arg0@@277 T@U) (arg1@@138 T@U) (arg2@@90 T@U) ) (! (= (type (Handle6 arg0@@277 arg1@@138 arg2@@90)) HandleTypeType) :qid |funType:Handle6| :pattern ( (Handle6 arg0@@277 arg1@@138 arg2@@90)) ))))
(assert (forall ((t0@@106 T@U) (t1@@82 T@U) (t2@@59 T@U) (t3@@44 T@U) (t4@@29 T@U) (t5@@14 T@U) (t6 T@U) (heap@@31 T@U) (h@@57 T@U) (r@@30 T@U) (rd@@17 T@U) (bx0@@69 T@U) (bx1@@55 T@U) (bx2@@41 T@U) (bx3@@27 T@U) (bx4@@13 T@U) (bx5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@106) TyType) (= (type t1@@82) TyType)) (= (type t2@@59) TyType)) (= (type t3@@44) TyType)) (= (type t4@@29) TyType)) (= (type t5@@14) TyType)) (= (type t6) TyType)) (= (type heap@@31) (MapType0Type refType MapType1Type))) (= (type h@@57) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@30) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@17) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@69) BoxType)) (= (type bx1@@55) BoxType)) (= (type bx2@@41) BoxType)) (= (type bx3@@27) BoxType)) (= (type bx4@@13) BoxType)) (= (type bx5) BoxType)) (= (Apply6 t0@@106 t1@@82 t2@@59 t3@@44 t4@@29 t5@@14 t6 heap@@31 (Handle6 h@@57 r@@30 rd@@17) bx0@@69 bx1@@55 bx2@@41 bx3@@27 bx4@@13 bx5) (MapType7Select h@@57 heap@@31 bx0@@69 bx1@@55 bx2@@41 bx3@@27 bx4@@13 bx5))) :qid |unknown.0:0| :skolemid |1033| :pattern ( (Apply6 t0@@106 t1@@82 t2@@59 t3@@44 t4@@29 t5@@14 t6 heap@@31 (Handle6 h@@57 r@@30 rd@@17) bx0@@69 bx1@@55 bx2@@41 bx3@@27 bx4@@13 bx5)) )))
(assert (forall ((t0@@107 T@U) (t1@@83 T@U) (t2@@60 T@U) (t3@@45 T@U) (t4@@30 T@U) (t5@@15 T@U) (t6@@0 T@U) (heap@@32 T@U) (h@@58 T@U) (r@@31 T@U) (rd@@18 T@U) (bx0@@70 T@U) (bx1@@56 T@U) (bx2@@42 T@U) (bx3@@28 T@U) (bx4@@14 T@U) (bx5@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@107) TyType) (= (type t1@@83) TyType)) (= (type t2@@60) TyType)) (= (type t3@@45) TyType)) (= (type t4@@30) TyType)) (= (type t5@@15) TyType)) (= (type t6@@0) TyType)) (= (type heap@@32) (MapType0Type refType MapType1Type))) (= (type h@@58) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@31) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@18) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@70) BoxType)) (= (type bx1@@56) BoxType)) (= (type bx2@@42) BoxType)) (= (type bx3@@28) BoxType)) (= (type bx4@@14) BoxType)) (= (type bx5@@0) BoxType)) (U_2_bool (MapType7Select r@@31 heap@@32 bx0@@70 bx1@@56 bx2@@42 bx3@@28 bx4@@14 bx5@@0))) (Requires6 t0@@107 t1@@83 t2@@60 t3@@45 t4@@30 t5@@15 t6@@0 heap@@32 (Handle6 h@@58 r@@31 rd@@18) bx0@@70 bx1@@56 bx2@@42 bx3@@28 bx4@@14 bx5@@0)) :qid |unknown.0:0| :skolemid |1034| :pattern ( (Requires6 t0@@107 t1@@83 t2@@60 t3@@45 t4@@30 t5@@15 t6@@0 heap@@32 (Handle6 h@@58 r@@31 rd@@18) bx0@@70 bx1@@56 bx2@@42 bx3@@28 bx4@@14 bx5@@0)) )))
(assert (forall ((arg0@@278 T@U) (arg1@@139 T@U) (arg2@@91 T@U) (arg3@@67 T@U) (arg4@@56 T@U) (arg5@@43 T@U) (arg6@@31 T@U) (arg7@@18 T@U) (arg8@@7 T@U) (arg9@@4 T@U) (arg10@@4 T@U) (arg11@@2 T@U) (arg12@@2 T@U) (arg13@@0 T@U) (arg14@@0 T@U) ) (! (= (type (Reads6 arg0@@278 arg1@@139 arg2@@91 arg3@@67 arg4@@56 arg5@@43 arg6@@31 arg7@@18 arg8@@7 arg9@@4 arg10@@4 arg11@@2 arg12@@2 arg13@@0 arg14@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads6| :pattern ( (Reads6 arg0@@278 arg1@@139 arg2@@91 arg3@@67 arg4@@56 arg5@@43 arg6@@31 arg7@@18 arg8@@7 arg9@@4 arg10@@4 arg11@@2 arg12@@2 arg13@@0 arg14@@0)) )))
(assert (forall ((t0@@108 T@U) (t1@@84 T@U) (t2@@61 T@U) (t3@@46 T@U) (t4@@31 T@U) (t5@@16 T@U) (t6@@1 T@U) (heap@@33 T@U) (h@@59 T@U) (r@@32 T@U) (rd@@19 T@U) (bx0@@71 T@U) (bx1@@57 T@U) (bx2@@43 T@U) (bx3@@29 T@U) (bx4@@15 T@U) (bx5@@1 T@U) (bx@@78 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@108) TyType) (= (type t1@@84) TyType)) (= (type t2@@61) TyType)) (= (type t3@@46) TyType)) (= (type t4@@31) TyType)) (= (type t5@@16) TyType)) (= (type t6@@1) TyType)) (= (type heap@@33) (MapType0Type refType MapType1Type))) (= (type h@@59) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@32) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@19) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@71) BoxType)) (= (type bx1@@57) BoxType)) (= (type bx2@@43) BoxType)) (= (type bx3@@29) BoxType)) (= (type bx4@@15) BoxType)) (= (type bx5@@1) BoxType)) (= (type bx@@78) BoxType)) (= (U_2_bool (MapType0Select (Reads6 t0@@108 t1@@84 t2@@61 t3@@46 t4@@31 t5@@16 t6@@1 heap@@33 (Handle6 h@@59 r@@32 rd@@19) bx0@@71 bx1@@57 bx2@@43 bx3@@29 bx4@@15 bx5@@1) bx@@78)) (U_2_bool (MapType0Select (MapType7Select rd@@19 heap@@33 bx0@@71 bx1@@57 bx2@@43 bx3@@29 bx4@@15 bx5@@1) bx@@78)))) :qid |unknown.0:0| :skolemid |1035| :pattern ( (MapType0Select (Reads6 t0@@108 t1@@84 t2@@61 t3@@46 t4@@31 t5@@16 t6@@1 heap@@33 (Handle6 h@@59 r@@32 rd@@19) bx0@@71 bx1@@57 bx2@@43 bx3@@29 bx4@@15 bx5@@1) bx@@78)) )))
(assert (forall ((t0@@109 T@U) (t1@@85 T@U) (t2@@62 T@U) (t3@@47 T@U) (t4@@32 T@U) (t5@@17 T@U) (t6@@2 T@U) (h0@@36 T@U) (h1@@36 T@U) (f@@77 T@U) (bx0@@72 T@U) (bx1@@58 T@U) (bx2@@44 T@U) (bx3@@30 T@U) (bx4@@16 T@U) (bx5@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@109) TyType) (= (type t1@@85) TyType)) (= (type t2@@62) TyType)) (= (type t3@@47) TyType)) (= (type t4@@32) TyType)) (= (type t5@@17) TyType)) (= (type t6@@2) TyType)) (= (type h0@@36) (MapType0Type refType MapType1Type))) (= (type h1@@36) (MapType0Type refType MapType1Type))) (= (type f@@77) HandleTypeType)) (= (type bx0@@72) BoxType)) (= (type bx1@@58) BoxType)) (= (type bx2@@44) BoxType)) (= (type bx3@@30) BoxType)) (= (type bx4@@16) BoxType)) (= (type bx5@@2) BoxType)) (and (and (and ($HeapSucc h0@@36 h1@@36) (and ($IsGoodHeap h0@@36) ($IsGoodHeap h1@@36))) (and (and (and (and (and (and ($IsBox bx0@@72 t0@@109) ($IsBox bx1@@58 t1@@85)) ($IsBox bx2@@44 t2@@62)) ($IsBox bx3@@30 t3@@47)) ($IsBox bx4@@16 t4@@32)) ($IsBox bx5@@2 t5@@17)) ($Is f@@77 (Tclass._System.___hFunc6 t0@@109 t1@@85 t2@@62 t3@@47 t4@@32 t5@@17 t6@@2)))) (forall ((o@@80 T@U) (fld@@35 T@U) ) (! (let ((a@@118 (FieldTypeInv0 (type fld@@35)))) (=> (and (and (= (type o@@80) refType) (= (type fld@@35) (FieldType a@@118))) (and (not (= o@@80 null)) (U_2_bool (MapType0Select (Reads6 t0@@109 t1@@85 t2@@62 t3@@47 t4@@32 t5@@17 t6@@2 h0@@36 f@@77 bx0@@72 bx1@@58 bx2@@44 bx3@@30 bx4@@16 bx5@@2) ($Box o@@80))))) (= (MapType1Select (MapType0Select h0@@36 o@@80) fld@@35) (MapType1Select (MapType0Select h1@@36 o@@80) fld@@35)))) :qid |unknown.0:0| :skolemid |1036| :no-pattern (type o@@80) :no-pattern (type fld@@35) :no-pattern (U_2_int o@@80) :no-pattern (U_2_bool o@@80) :no-pattern (U_2_int fld@@35) :no-pattern (U_2_bool fld@@35) )))) (= (Reads6 t0@@109 t1@@85 t2@@62 t3@@47 t4@@32 t5@@17 t6@@2 h0@@36 f@@77 bx0@@72 bx1@@58 bx2@@44 bx3@@30 bx4@@16 bx5@@2) (Reads6 t0@@109 t1@@85 t2@@62 t3@@47 t4@@32 t5@@17 t6@@2 h1@@36 f@@77 bx0@@72 bx1@@58 bx2@@44 bx3@@30 bx4@@16 bx5@@2))) :qid |unknown.0:0| :skolemid |1037| :pattern ( ($HeapSucc h0@@36 h1@@36) (Reads6 t0@@109 t1@@85 t2@@62 t3@@47 t4@@32 t5@@17 t6@@2 h1@@36 f@@77 bx0@@72 bx1@@58 bx2@@44 bx3@@30 bx4@@16 bx5@@2)) )))
(assert (forall ((t0@@110 T@U) (t1@@86 T@U) (t2@@63 T@U) (t3@@48 T@U) (t4@@33 T@U) (t5@@18 T@U) (t6@@3 T@U) (h0@@37 T@U) (h1@@37 T@U) (f@@78 T@U) (bx0@@73 T@U) (bx1@@59 T@U) (bx2@@45 T@U) (bx3@@31 T@U) (bx4@@17 T@U) (bx5@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@110) TyType) (= (type t1@@86) TyType)) (= (type t2@@63) TyType)) (= (type t3@@48) TyType)) (= (type t4@@33) TyType)) (= (type t5@@18) TyType)) (= (type t6@@3) TyType)) (= (type h0@@37) (MapType0Type refType MapType1Type))) (= (type h1@@37) (MapType0Type refType MapType1Type))) (= (type f@@78) HandleTypeType)) (= (type bx0@@73) BoxType)) (= (type bx1@@59) BoxType)) (= (type bx2@@45) BoxType)) (= (type bx3@@31) BoxType)) (= (type bx4@@17) BoxType)) (= (type bx5@@3) BoxType)) (and (and (and ($HeapSucc h0@@37 h1@@37) (and ($IsGoodHeap h0@@37) ($IsGoodHeap h1@@37))) (and (and (and (and (and (and ($IsBox bx0@@73 t0@@110) ($IsBox bx1@@59 t1@@86)) ($IsBox bx2@@45 t2@@63)) ($IsBox bx3@@31 t3@@48)) ($IsBox bx4@@17 t4@@33)) ($IsBox bx5@@3 t5@@18)) ($Is f@@78 (Tclass._System.___hFunc6 t0@@110 t1@@86 t2@@63 t3@@48 t4@@33 t5@@18 t6@@3)))) (forall ((o@@81 T@U) (fld@@36 T@U) ) (! (let ((a@@119 (FieldTypeInv0 (type fld@@36)))) (=> (and (and (= (type o@@81) refType) (= (type fld@@36) (FieldType a@@119))) (and (not (= o@@81 null)) (U_2_bool (MapType0Select (Reads6 t0@@110 t1@@86 t2@@63 t3@@48 t4@@33 t5@@18 t6@@3 h1@@37 f@@78 bx0@@73 bx1@@59 bx2@@45 bx3@@31 bx4@@17 bx5@@3) ($Box o@@81))))) (= (MapType1Select (MapType0Select h0@@37 o@@81) fld@@36) (MapType1Select (MapType0Select h1@@37 o@@81) fld@@36)))) :qid |unknown.0:0| :skolemid |1038| :no-pattern (type o@@81) :no-pattern (type fld@@36) :no-pattern (U_2_int o@@81) :no-pattern (U_2_bool o@@81) :no-pattern (U_2_int fld@@36) :no-pattern (U_2_bool fld@@36) )))) (= (Reads6 t0@@110 t1@@86 t2@@63 t3@@48 t4@@33 t5@@18 t6@@3 h0@@37 f@@78 bx0@@73 bx1@@59 bx2@@45 bx3@@31 bx4@@17 bx5@@3) (Reads6 t0@@110 t1@@86 t2@@63 t3@@48 t4@@33 t5@@18 t6@@3 h1@@37 f@@78 bx0@@73 bx1@@59 bx2@@45 bx3@@31 bx4@@17 bx5@@3))) :qid |unknown.0:0| :skolemid |1039| :pattern ( ($HeapSucc h0@@37 h1@@37) (Reads6 t0@@110 t1@@86 t2@@63 t3@@48 t4@@33 t5@@18 t6@@3 h1@@37 f@@78 bx0@@73 bx1@@59 bx2@@45 bx3@@31 bx4@@17 bx5@@3)) )))
(assert (forall ((t0@@111 T@U) (t1@@87 T@U) (t2@@64 T@U) (t3@@49 T@U) (t4@@34 T@U) (t5@@19 T@U) (t6@@4 T@U) (h0@@38 T@U) (h1@@38 T@U) (f@@79 T@U) (bx0@@74 T@U) (bx1@@60 T@U) (bx2@@46 T@U) (bx3@@32 T@U) (bx4@@18 T@U) (bx5@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@111) TyType) (= (type t1@@87) TyType)) (= (type t2@@64) TyType)) (= (type t3@@49) TyType)) (= (type t4@@34) TyType)) (= (type t5@@19) TyType)) (= (type t6@@4) TyType)) (= (type h0@@38) (MapType0Type refType MapType1Type))) (= (type h1@@38) (MapType0Type refType MapType1Type))) (= (type f@@79) HandleTypeType)) (= (type bx0@@74) BoxType)) (= (type bx1@@60) BoxType)) (= (type bx2@@46) BoxType)) (= (type bx3@@32) BoxType)) (= (type bx4@@18) BoxType)) (= (type bx5@@4) BoxType)) (and (and (and ($HeapSucc h0@@38 h1@@38) (and ($IsGoodHeap h0@@38) ($IsGoodHeap h1@@38))) (and (and (and (and (and (and ($IsBox bx0@@74 t0@@111) ($IsBox bx1@@60 t1@@87)) ($IsBox bx2@@46 t2@@64)) ($IsBox bx3@@32 t3@@49)) ($IsBox bx4@@18 t4@@34)) ($IsBox bx5@@4 t5@@19)) ($Is f@@79 (Tclass._System.___hFunc6 t0@@111 t1@@87 t2@@64 t3@@49 t4@@34 t5@@19 t6@@4)))) (forall ((o@@82 T@U) (fld@@37 T@U) ) (! (let ((a@@120 (FieldTypeInv0 (type fld@@37)))) (=> (and (and (= (type o@@82) refType) (= (type fld@@37) (FieldType a@@120))) (and (not (= o@@82 null)) (U_2_bool (MapType0Select (Reads6 t0@@111 t1@@87 t2@@64 t3@@49 t4@@34 t5@@19 t6@@4 h0@@38 f@@79 bx0@@74 bx1@@60 bx2@@46 bx3@@32 bx4@@18 bx5@@4) ($Box o@@82))))) (= (MapType1Select (MapType0Select h0@@38 o@@82) fld@@37) (MapType1Select (MapType0Select h1@@38 o@@82) fld@@37)))) :qid |unknown.0:0| :skolemid |1040| :no-pattern (type o@@82) :no-pattern (type fld@@37) :no-pattern (U_2_int o@@82) :no-pattern (U_2_bool o@@82) :no-pattern (U_2_int fld@@37) :no-pattern (U_2_bool fld@@37) )))) (= (Requires6 t0@@111 t1@@87 t2@@64 t3@@49 t4@@34 t5@@19 t6@@4 h0@@38 f@@79 bx0@@74 bx1@@60 bx2@@46 bx3@@32 bx4@@18 bx5@@4) (Requires6 t0@@111 t1@@87 t2@@64 t3@@49 t4@@34 t5@@19 t6@@4 h1@@38 f@@79 bx0@@74 bx1@@60 bx2@@46 bx3@@32 bx4@@18 bx5@@4))) :qid |unknown.0:0| :skolemid |1041| :pattern ( ($HeapSucc h0@@38 h1@@38) (Requires6 t0@@111 t1@@87 t2@@64 t3@@49 t4@@34 t5@@19 t6@@4 h1@@38 f@@79 bx0@@74 bx1@@60 bx2@@46 bx3@@32 bx4@@18 bx5@@4)) )))
(assert (forall ((t0@@112 T@U) (t1@@88 T@U) (t2@@65 T@U) (t3@@50 T@U) (t4@@35 T@U) (t5@@20 T@U) (t6@@5 T@U) (h0@@39 T@U) (h1@@39 T@U) (f@@80 T@U) (bx0@@75 T@U) (bx1@@61 T@U) (bx2@@47 T@U) (bx3@@33 T@U) (bx4@@19 T@U) (bx5@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@112) TyType) (= (type t1@@88) TyType)) (= (type t2@@65) TyType)) (= (type t3@@50) TyType)) (= (type t4@@35) TyType)) (= (type t5@@20) TyType)) (= (type t6@@5) TyType)) (= (type h0@@39) (MapType0Type refType MapType1Type))) (= (type h1@@39) (MapType0Type refType MapType1Type))) (= (type f@@80) HandleTypeType)) (= (type bx0@@75) BoxType)) (= (type bx1@@61) BoxType)) (= (type bx2@@47) BoxType)) (= (type bx3@@33) BoxType)) (= (type bx4@@19) BoxType)) (= (type bx5@@5) BoxType)) (and (and (and ($HeapSucc h0@@39 h1@@39) (and ($IsGoodHeap h0@@39) ($IsGoodHeap h1@@39))) (and (and (and (and (and (and ($IsBox bx0@@75 t0@@112) ($IsBox bx1@@61 t1@@88)) ($IsBox bx2@@47 t2@@65)) ($IsBox bx3@@33 t3@@50)) ($IsBox bx4@@19 t4@@35)) ($IsBox bx5@@5 t5@@20)) ($Is f@@80 (Tclass._System.___hFunc6 t0@@112 t1@@88 t2@@65 t3@@50 t4@@35 t5@@20 t6@@5)))) (forall ((o@@83 T@U) (fld@@38 T@U) ) (! (let ((a@@121 (FieldTypeInv0 (type fld@@38)))) (=> (and (and (= (type o@@83) refType) (= (type fld@@38) (FieldType a@@121))) (and (not (= o@@83 null)) (U_2_bool (MapType0Select (Reads6 t0@@112 t1@@88 t2@@65 t3@@50 t4@@35 t5@@20 t6@@5 h1@@39 f@@80 bx0@@75 bx1@@61 bx2@@47 bx3@@33 bx4@@19 bx5@@5) ($Box o@@83))))) (= (MapType1Select (MapType0Select h0@@39 o@@83) fld@@38) (MapType1Select (MapType0Select h1@@39 o@@83) fld@@38)))) :qid |unknown.0:0| :skolemid |1042| :no-pattern (type o@@83) :no-pattern (type fld@@38) :no-pattern (U_2_int o@@83) :no-pattern (U_2_bool o@@83) :no-pattern (U_2_int fld@@38) :no-pattern (U_2_bool fld@@38) )))) (= (Requires6 t0@@112 t1@@88 t2@@65 t3@@50 t4@@35 t5@@20 t6@@5 h0@@39 f@@80 bx0@@75 bx1@@61 bx2@@47 bx3@@33 bx4@@19 bx5@@5) (Requires6 t0@@112 t1@@88 t2@@65 t3@@50 t4@@35 t5@@20 t6@@5 h1@@39 f@@80 bx0@@75 bx1@@61 bx2@@47 bx3@@33 bx4@@19 bx5@@5))) :qid |unknown.0:0| :skolemid |1043| :pattern ( ($HeapSucc h0@@39 h1@@39) (Requires6 t0@@112 t1@@88 t2@@65 t3@@50 t4@@35 t5@@20 t6@@5 h1@@39 f@@80 bx0@@75 bx1@@61 bx2@@47 bx3@@33 bx4@@19 bx5@@5)) )))
(assert (forall ((t0@@113 T@U) (t1@@89 T@U) (t2@@66 T@U) (t3@@51 T@U) (t4@@36 T@U) (t5@@21 T@U) (t6@@6 T@U) (h0@@40 T@U) (h1@@40 T@U) (f@@81 T@U) (bx0@@76 T@U) (bx1@@62 T@U) (bx2@@48 T@U) (bx3@@34 T@U) (bx4@@20 T@U) (bx5@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@113) TyType) (= (type t1@@89) TyType)) (= (type t2@@66) TyType)) (= (type t3@@51) TyType)) (= (type t4@@36) TyType)) (= (type t5@@21) TyType)) (= (type t6@@6) TyType)) (= (type h0@@40) (MapType0Type refType MapType1Type))) (= (type h1@@40) (MapType0Type refType MapType1Type))) (= (type f@@81) HandleTypeType)) (= (type bx0@@76) BoxType)) (= (type bx1@@62) BoxType)) (= (type bx2@@48) BoxType)) (= (type bx3@@34) BoxType)) (= (type bx4@@20) BoxType)) (= (type bx5@@6) BoxType)) (and (and (and ($HeapSucc h0@@40 h1@@40) (and ($IsGoodHeap h0@@40) ($IsGoodHeap h1@@40))) (and (and (and (and (and (and ($IsBox bx0@@76 t0@@113) ($IsBox bx1@@62 t1@@89)) ($IsBox bx2@@48 t2@@66)) ($IsBox bx3@@34 t3@@51)) ($IsBox bx4@@20 t4@@36)) ($IsBox bx5@@6 t5@@21)) ($Is f@@81 (Tclass._System.___hFunc6 t0@@113 t1@@89 t2@@66 t3@@51 t4@@36 t5@@21 t6@@6)))) (forall ((o@@84 T@U) (fld@@39 T@U) ) (! (let ((a@@122 (FieldTypeInv0 (type fld@@39)))) (=> (and (and (= (type o@@84) refType) (= (type fld@@39) (FieldType a@@122))) (and (not (= o@@84 null)) (U_2_bool (MapType0Select (Reads6 t0@@113 t1@@89 t2@@66 t3@@51 t4@@36 t5@@21 t6@@6 h0@@40 f@@81 bx0@@76 bx1@@62 bx2@@48 bx3@@34 bx4@@20 bx5@@6) ($Box o@@84))))) (= (MapType1Select (MapType0Select h0@@40 o@@84) fld@@39) (MapType1Select (MapType0Select h1@@40 o@@84) fld@@39)))) :qid |unknown.0:0| :skolemid |1044| :no-pattern (type o@@84) :no-pattern (type fld@@39) :no-pattern (U_2_int o@@84) :no-pattern (U_2_bool o@@84) :no-pattern (U_2_int fld@@39) :no-pattern (U_2_bool fld@@39) )))) (= (Apply6 t0@@113 t1@@89 t2@@66 t3@@51 t4@@36 t5@@21 t6@@6 h0@@40 f@@81 bx0@@76 bx1@@62 bx2@@48 bx3@@34 bx4@@20 bx5@@6) (Apply6 t0@@113 t1@@89 t2@@66 t3@@51 t4@@36 t5@@21 t6@@6 h1@@40 f@@81 bx0@@76 bx1@@62 bx2@@48 bx3@@34 bx4@@20 bx5@@6))) :qid |unknown.0:0| :skolemid |1045| :pattern ( ($HeapSucc h0@@40 h1@@40) (Apply6 t0@@113 t1@@89 t2@@66 t3@@51 t4@@36 t5@@21 t6@@6 h1@@40 f@@81 bx0@@76 bx1@@62 bx2@@48 bx3@@34 bx4@@20 bx5@@6)) )))
(assert (forall ((t0@@114 T@U) (t1@@90 T@U) (t2@@67 T@U) (t3@@52 T@U) (t4@@37 T@U) (t5@@22 T@U) (t6@@7 T@U) (h0@@41 T@U) (h1@@41 T@U) (f@@82 T@U) (bx0@@77 T@U) (bx1@@63 T@U) (bx2@@49 T@U) (bx3@@35 T@U) (bx4@@21 T@U) (bx5@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@114) TyType) (= (type t1@@90) TyType)) (= (type t2@@67) TyType)) (= (type t3@@52) TyType)) (= (type t4@@37) TyType)) (= (type t5@@22) TyType)) (= (type t6@@7) TyType)) (= (type h0@@41) (MapType0Type refType MapType1Type))) (= (type h1@@41) (MapType0Type refType MapType1Type))) (= (type f@@82) HandleTypeType)) (= (type bx0@@77) BoxType)) (= (type bx1@@63) BoxType)) (= (type bx2@@49) BoxType)) (= (type bx3@@35) BoxType)) (= (type bx4@@21) BoxType)) (= (type bx5@@7) BoxType)) (and (and (and ($HeapSucc h0@@41 h1@@41) (and ($IsGoodHeap h0@@41) ($IsGoodHeap h1@@41))) (and (and (and (and (and (and ($IsBox bx0@@77 t0@@114) ($IsBox bx1@@63 t1@@90)) ($IsBox bx2@@49 t2@@67)) ($IsBox bx3@@35 t3@@52)) ($IsBox bx4@@21 t4@@37)) ($IsBox bx5@@7 t5@@22)) ($Is f@@82 (Tclass._System.___hFunc6 t0@@114 t1@@90 t2@@67 t3@@52 t4@@37 t5@@22 t6@@7)))) (forall ((o@@85 T@U) (fld@@40 T@U) ) (! (let ((a@@123 (FieldTypeInv0 (type fld@@40)))) (=> (and (and (= (type o@@85) refType) (= (type fld@@40) (FieldType a@@123))) (and (not (= o@@85 null)) (U_2_bool (MapType0Select (Reads6 t0@@114 t1@@90 t2@@67 t3@@52 t4@@37 t5@@22 t6@@7 h1@@41 f@@82 bx0@@77 bx1@@63 bx2@@49 bx3@@35 bx4@@21 bx5@@7) ($Box o@@85))))) (= (MapType1Select (MapType0Select h0@@41 o@@85) fld@@40) (MapType1Select (MapType0Select h1@@41 o@@85) fld@@40)))) :qid |unknown.0:0| :skolemid |1046| :no-pattern (type o@@85) :no-pattern (type fld@@40) :no-pattern (U_2_int o@@85) :no-pattern (U_2_bool o@@85) :no-pattern (U_2_int fld@@40) :no-pattern (U_2_bool fld@@40) )))) (= (Apply6 t0@@114 t1@@90 t2@@67 t3@@52 t4@@37 t5@@22 t6@@7 h0@@41 f@@82 bx0@@77 bx1@@63 bx2@@49 bx3@@35 bx4@@21 bx5@@7) (Apply6 t0@@114 t1@@90 t2@@67 t3@@52 t4@@37 t5@@22 t6@@7 h1@@41 f@@82 bx0@@77 bx1@@63 bx2@@49 bx3@@35 bx4@@21 bx5@@7))) :qid |unknown.0:0| :skolemid |1047| :pattern ( ($HeapSucc h0@@41 h1@@41) (Apply6 t0@@114 t1@@90 t2@@67 t3@@52 t4@@37 t5@@22 t6@@7 h1@@41 f@@82 bx0@@77 bx1@@63 bx2@@49 bx3@@35 bx4@@21 bx5@@7)) )))
(assert (forall ((t0@@115 T@U) (t1@@91 T@U) (t2@@68 T@U) (t3@@53 T@U) (t4@@38 T@U) (t5@@23 T@U) (t6@@8 T@U) (heap@@34 T@U) (f@@83 T@U) (bx0@@78 T@U) (bx1@@64 T@U) (bx2@@50 T@U) (bx3@@36 T@U) (bx4@@22 T@U) (bx5@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@115) TyType) (= (type t1@@91) TyType)) (= (type t2@@68) TyType)) (= (type t3@@53) TyType)) (= (type t4@@38) TyType)) (= (type t5@@23) TyType)) (= (type t6@@8) TyType)) (= (type heap@@34) (MapType0Type refType MapType1Type))) (= (type f@@83) HandleTypeType)) (= (type bx0@@78) BoxType)) (= (type bx1@@64) BoxType)) (= (type bx2@@50) BoxType)) (= (type bx3@@36) BoxType)) (= (type bx4@@22) BoxType)) (= (type bx5@@8) BoxType)) (and ($IsGoodHeap heap@@34) (and (and (and (and (and (and ($IsBox bx0@@78 t0@@115) ($IsBox bx1@@64 t1@@91)) ($IsBox bx2@@50 t2@@68)) ($IsBox bx3@@36 t3@@53)) ($IsBox bx4@@22 t4@@38)) ($IsBox bx5@@8 t5@@23)) ($Is f@@83 (Tclass._System.___hFunc6 t0@@115 t1@@91 t2@@68 t3@@53 t4@@38 t5@@23 t6@@8))))) (= (|Set#Equal| (Reads6 t0@@115 t1@@91 t2@@68 t3@@53 t4@@38 t5@@23 t6@@8 $OneHeap f@@83 bx0@@78 bx1@@64 bx2@@50 bx3@@36 bx4@@22 bx5@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads6 t0@@115 t1@@91 t2@@68 t3@@53 t4@@38 t5@@23 t6@@8 heap@@34 f@@83 bx0@@78 bx1@@64 bx2@@50 bx3@@36 bx4@@22 bx5@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |1048| :pattern ( (Reads6 t0@@115 t1@@91 t2@@68 t3@@53 t4@@38 t5@@23 t6@@8 $OneHeap f@@83 bx0@@78 bx1@@64 bx2@@50 bx3@@36 bx4@@22 bx5@@8) ($IsGoodHeap heap@@34)) :pattern ( (Reads6 t0@@115 t1@@91 t2@@68 t3@@53 t4@@38 t5@@23 t6@@8 heap@@34 f@@83 bx0@@78 bx1@@64 bx2@@50 bx3@@36 bx4@@22 bx5@@8)) )))
(assert (forall ((t0@@116 T@U) (t1@@92 T@U) (t2@@69 T@U) (t3@@54 T@U) (t4@@39 T@U) (t5@@24 T@U) (t6@@9 T@U) (heap@@35 T@U) (f@@84 T@U) (bx0@@79 T@U) (bx1@@65 T@U) (bx2@@51 T@U) (bx3@@37 T@U) (bx4@@23 T@U) (bx5@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@116) TyType) (= (type t1@@92) TyType)) (= (type t2@@69) TyType)) (= (type t3@@54) TyType)) (= (type t4@@39) TyType)) (= (type t5@@24) TyType)) (= (type t6@@9) TyType)) (= (type heap@@35) (MapType0Type refType MapType1Type))) (= (type f@@84) HandleTypeType)) (= (type bx0@@79) BoxType)) (= (type bx1@@65) BoxType)) (= (type bx2@@51) BoxType)) (= (type bx3@@37) BoxType)) (= (type bx4@@23) BoxType)) (= (type bx5@@9) BoxType)) (and (and ($IsGoodHeap heap@@35) (and (and (and (and (and (and ($IsBox bx0@@79 t0@@116) ($IsBox bx1@@65 t1@@92)) ($IsBox bx2@@51 t2@@69)) ($IsBox bx3@@37 t3@@54)) ($IsBox bx4@@23 t4@@39)) ($IsBox bx5@@9 t5@@24)) ($Is f@@84 (Tclass._System.___hFunc6 t0@@116 t1@@92 t2@@69 t3@@54 t4@@39 t5@@24 t6@@9)))) (|Set#Equal| (Reads6 t0@@116 t1@@92 t2@@69 t3@@54 t4@@39 t5@@24 t6@@9 $OneHeap f@@84 bx0@@79 bx1@@65 bx2@@51 bx3@@37 bx4@@23 bx5@@9) (|Set#Empty| BoxType)))) (= (Requires6 t0@@116 t1@@92 t2@@69 t3@@54 t4@@39 t5@@24 t6@@9 $OneHeap f@@84 bx0@@79 bx1@@65 bx2@@51 bx3@@37 bx4@@23 bx5@@9) (Requires6 t0@@116 t1@@92 t2@@69 t3@@54 t4@@39 t5@@24 t6@@9 heap@@35 f@@84 bx0@@79 bx1@@65 bx2@@51 bx3@@37 bx4@@23 bx5@@9))) :qid |unknown.0:0| :skolemid |1049| :pattern ( (Requires6 t0@@116 t1@@92 t2@@69 t3@@54 t4@@39 t5@@24 t6@@9 $OneHeap f@@84 bx0@@79 bx1@@65 bx2@@51 bx3@@37 bx4@@23 bx5@@9) ($IsGoodHeap heap@@35)) :pattern ( (Requires6 t0@@116 t1@@92 t2@@69 t3@@54 t4@@39 t5@@24 t6@@9 heap@@35 f@@84 bx0@@79 bx1@@65 bx2@@51 bx3@@37 bx4@@23 bx5@@9)) )))
(assert (forall ((f@@85 T@U) (t0@@117 T@U) (t1@@93 T@U) (t2@@70 T@U) (t3@@55 T@U) (t4@@40 T@U) (t5@@25 T@U) (t6@@10 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@85) HandleTypeType) (= (type t0@@117) TyType)) (= (type t1@@93) TyType)) (= (type t2@@70) TyType)) (= (type t3@@55) TyType)) (= (type t4@@40) TyType)) (= (type t5@@25) TyType)) (= (type t6@@10) TyType)) (= ($Is f@@85 (Tclass._System.___hFunc6 t0@@117 t1@@93 t2@@70 t3@@55 t4@@40 t5@@25 t6@@10)) (forall ((h@@60 T@U) (bx0@@80 T@U) (bx1@@66 T@U) (bx2@@52 T@U) (bx3@@38 T@U) (bx4@@24 T@U) (bx5@@10 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type h@@60) (MapType0Type refType MapType1Type)) (= (type bx0@@80) BoxType)) (= (type bx1@@66) BoxType)) (= (type bx2@@52) BoxType)) (= (type bx3@@38) BoxType)) (= (type bx4@@24) BoxType)) (= (type bx5@@10) BoxType)) (and (and ($IsGoodHeap h@@60) (and (and (and (and (and ($IsBox bx0@@80 t0@@117) ($IsBox bx1@@66 t1@@93)) ($IsBox bx2@@52 t2@@70)) ($IsBox bx3@@38 t3@@55)) ($IsBox bx4@@24 t4@@40)) ($IsBox bx5@@10 t5@@25))) (Requires6 t0@@117 t1@@93 t2@@70 t3@@55 t4@@40 t5@@25 t6@@10 h@@60 f@@85 bx0@@80 bx1@@66 bx2@@52 bx3@@38 bx4@@24 bx5@@10))) ($IsBox (Apply6 t0@@117 t1@@93 t2@@70 t3@@55 t4@@40 t5@@25 t6@@10 h@@60 f@@85 bx0@@80 bx1@@66 bx2@@52 bx3@@38 bx4@@24 bx5@@10) t6@@10)) :qid |DafnyPreludebpl.545:12| :skolemid |1050| :pattern ( (Apply6 t0@@117 t1@@93 t2@@70 t3@@55 t4@@40 t5@@25 t6@@10 h@@60 f@@85 bx0@@80 bx1@@66 bx2@@52 bx3@@38 bx4@@24 bx5@@10)) )))) :qid |unknown.0:0| :skolemid |1051| :pattern ( ($Is f@@85 (Tclass._System.___hFunc6 t0@@117 t1@@93 t2@@70 t3@@55 t4@@40 t5@@25 t6@@10))) )))
(assert (forall ((f@@86 T@U) (t0@@118 T@U) (t1@@94 T@U) (t2@@71 T@U) (t3@@56 T@U) (t4@@41 T@U) (t5@@26 T@U) (t6@@11 T@U) (u0@@5 T@U) (u1@@4 T@U) (u2@@3 T@U) (u3@@2 T@U) (u4@@1 T@U) (u5@@0 T@U) (u6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type f@@86) HandleTypeType) (= (type t0@@118) TyType)) (= (type t1@@94) TyType)) (= (type t2@@71) TyType)) (= (type t3@@56) TyType)) (= (type t4@@41) TyType)) (= (type t5@@26) TyType)) (= (type t6@@11) TyType)) (= (type u0@@5) TyType)) (= (type u1@@4) TyType)) (= (type u2@@3) TyType)) (= (type u3@@2) TyType)) (= (type u4@@1) TyType)) (= (type u5@@0) TyType)) (= (type u6) TyType)) (and (and (and (and (and (and (and ($Is f@@86 (Tclass._System.___hFunc6 t0@@118 t1@@94 t2@@71 t3@@56 t4@@41 t5@@26 t6@@11)) (forall ((bx@@79 T@U) ) (!  (=> (and (= (type bx@@79) BoxType) ($IsBox bx@@79 u0@@5)) ($IsBox bx@@79 t0@@118)) :qid |unknown.0:0| :skolemid |1052| :pattern ( ($IsBox bx@@79 u0@@5)) :pattern ( ($IsBox bx@@79 t0@@118)) ))) (forall ((bx@@80 T@U) ) (!  (=> (and (= (type bx@@80) BoxType) ($IsBox bx@@80 u1@@4)) ($IsBox bx@@80 t1@@94)) :qid |unknown.0:0| :skolemid |1053| :pattern ( ($IsBox bx@@80 u1@@4)) :pattern ( ($IsBox bx@@80 t1@@94)) ))) (forall ((bx@@81 T@U) ) (!  (=> (and (= (type bx@@81) BoxType) ($IsBox bx@@81 u2@@3)) ($IsBox bx@@81 t2@@71)) :qid |unknown.0:0| :skolemid |1054| :pattern ( ($IsBox bx@@81 u2@@3)) :pattern ( ($IsBox bx@@81 t2@@71)) ))) (forall ((bx@@82 T@U) ) (!  (=> (and (= (type bx@@82) BoxType) ($IsBox bx@@82 u3@@2)) ($IsBox bx@@82 t3@@56)) :qid |unknown.0:0| :skolemid |1055| :pattern ( ($IsBox bx@@82 u3@@2)) :pattern ( ($IsBox bx@@82 t3@@56)) ))) (forall ((bx@@83 T@U) ) (!  (=> (and (= (type bx@@83) BoxType) ($IsBox bx@@83 u4@@1)) ($IsBox bx@@83 t4@@41)) :qid |unknown.0:0| :skolemid |1056| :pattern ( ($IsBox bx@@83 u4@@1)) :pattern ( ($IsBox bx@@83 t4@@41)) ))) (forall ((bx@@84 T@U) ) (!  (=> (and (= (type bx@@84) BoxType) ($IsBox bx@@84 u5@@0)) ($IsBox bx@@84 t5@@26)) :qid |unknown.0:0| :skolemid |1057| :pattern ( ($IsBox bx@@84 u5@@0)) :pattern ( ($IsBox bx@@84 t5@@26)) ))) (forall ((bx@@85 T@U) ) (!  (=> (and (= (type bx@@85) BoxType) ($IsBox bx@@85 t6@@11)) ($IsBox bx@@85 u6)) :qid |unknown.0:0| :skolemid |1058| :pattern ( ($IsBox bx@@85 t6@@11)) :pattern ( ($IsBox bx@@85 u6)) )))) ($Is f@@86 (Tclass._System.___hFunc6 u0@@5 u1@@4 u2@@3 u3@@2 u4@@1 u5@@0 u6))) :qid |unknown.0:0| :skolemid |1059| :pattern ( ($Is f@@86 (Tclass._System.___hFunc6 t0@@118 t1@@94 t2@@71 t3@@56 t4@@41 t5@@26 t6@@11)) ($Is f@@86 (Tclass._System.___hFunc6 u0@@5 u1@@4 u2@@3 u3@@2 u4@@1 u5@@0 u6))) )))
(assert (forall ((f@@87 T@U) (t0@@119 T@U) (t1@@95 T@U) (t2@@72 T@U) (t3@@57 T@U) (t4@@42 T@U) (t5@@27 T@U) (t6@@12 T@U) (h@@61 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@87) HandleTypeType) (= (type t0@@119) TyType)) (= (type t1@@95) TyType)) (= (type t2@@72) TyType)) (= (type t3@@57) TyType)) (= (type t4@@42) TyType)) (= (type t5@@27) TyType)) (= (type t6@@12) TyType)) (= (type h@@61) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@61)) (= ($IsAlloc f@@87 (Tclass._System.___hFunc6 t0@@119 t1@@95 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12) h@@61) (forall ((bx0@@81 T@U) (bx1@@67 T@U) (bx2@@53 T@U) (bx3@@39 T@U) (bx4@@25 T@U) (bx5@@11 T@U) ) (!  (=> (and (and (and (and (and (= (type bx0@@81) BoxType) (= (type bx1@@67) BoxType)) (= (type bx2@@53) BoxType)) (= (type bx3@@39) BoxType)) (= (type bx4@@25) BoxType)) (= (type bx5@@11) BoxType)) (=> (and (and (and (and (and (and (and ($IsBox bx0@@81 t0@@119) ($IsAllocBox bx0@@81 t0@@119 h@@61)) (and ($IsBox bx1@@67 t1@@95) ($IsAllocBox bx1@@67 t1@@95 h@@61))) (and ($IsBox bx2@@53 t2@@72) ($IsAllocBox bx2@@53 t2@@72 h@@61))) (and ($IsBox bx3@@39 t3@@57) ($IsAllocBox bx3@@39 t3@@57 h@@61))) (and ($IsBox bx4@@25 t4@@42) ($IsAllocBox bx4@@25 t4@@42 h@@61))) (and ($IsBox bx5@@11 t5@@27) ($IsAllocBox bx5@@11 t5@@27 h@@61))) (Requires6 t0@@119 t1@@95 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12 h@@61 f@@87 bx0@@81 bx1@@67 bx2@@53 bx3@@39 bx4@@25 bx5@@11)) (forall ((r@@33 T@U) ) (!  (=> (= (type r@@33) refType) (=> (and (not (= r@@33 null)) (U_2_bool (MapType0Select (Reads6 t0@@119 t1@@95 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12 h@@61 f@@87 bx0@@81 bx1@@67 bx2@@53 bx3@@39 bx4@@25 bx5@@11) ($Box r@@33)))) (U_2_bool (MapType1Select (MapType0Select h@@61 r@@33) alloc)))) :qid |unknown.0:0| :skolemid |1060| :pattern ( (MapType0Select (Reads6 t0@@119 t1@@95 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12 h@@61 f@@87 bx0@@81 bx1@@67 bx2@@53 bx3@@39 bx4@@25 bx5@@11) ($Box r@@33))) )))) :qid |unknown.0:0| :skolemid |1061| :pattern ( (Apply6 t0@@119 t1@@95 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12 h@@61 f@@87 bx0@@81 bx1@@67 bx2@@53 bx3@@39 bx4@@25 bx5@@11)) :pattern ( (Reads6 t0@@119 t1@@95 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12 h@@61 f@@87 bx0@@81 bx1@@67 bx2@@53 bx3@@39 bx4@@25 bx5@@11)) )))) :qid |unknown.0:0| :skolemid |1062| :pattern ( ($IsAlloc f@@87 (Tclass._System.___hFunc6 t0@@119 t1@@95 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12) h@@61)) )))
(assert (forall ((f@@88 T@U) (t0@@120 T@U) (t1@@96 T@U) (t2@@73 T@U) (t3@@58 T@U) (t4@@43 T@U) (t5@@28 T@U) (t6@@13 T@U) (h@@62 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@88) HandleTypeType) (= (type t0@@120) TyType)) (= (type t1@@96) TyType)) (= (type t2@@73) TyType)) (= (type t3@@58) TyType)) (= (type t4@@43) TyType)) (= (type t5@@28) TyType)) (= (type t6@@13) TyType)) (= (type h@@62) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@62) ($IsAlloc f@@88 (Tclass._System.___hFunc6 t0@@120 t1@@96 t2@@73 t3@@58 t4@@43 t5@@28 t6@@13) h@@62))) (forall ((bx0@@82 T@U) (bx1@@68 T@U) (bx2@@54 T@U) (bx3@@40 T@U) (bx4@@26 T@U) (bx5@@12 T@U) ) (!  (=> (and (and (and (and (and (= (type bx0@@82) BoxType) (= (type bx1@@68) BoxType)) (= (type bx2@@54) BoxType)) (= (type bx3@@40) BoxType)) (= (type bx4@@26) BoxType)) (= (type bx5@@12) BoxType)) (=> (and (and (and (and (and (and ($IsAllocBox bx0@@82 t0@@120 h@@62) ($IsAllocBox bx1@@68 t1@@96 h@@62)) ($IsAllocBox bx2@@54 t2@@73 h@@62)) ($IsAllocBox bx3@@40 t3@@58 h@@62)) ($IsAllocBox bx4@@26 t4@@43 h@@62)) ($IsAllocBox bx5@@12 t5@@28 h@@62)) (Requires6 t0@@120 t1@@96 t2@@73 t3@@58 t4@@43 t5@@28 t6@@13 h@@62 f@@88 bx0@@82 bx1@@68 bx2@@54 bx3@@40 bx4@@26 bx5@@12)) ($IsAllocBox (Apply6 t0@@120 t1@@96 t2@@73 t3@@58 t4@@43 t5@@28 t6@@13 h@@62 f@@88 bx0@@82 bx1@@68 bx2@@54 bx3@@40 bx4@@26 bx5@@12) t6@@13 h@@62))) :qid |unknown.0:0| :skolemid |1063| :pattern ( (Apply6 t0@@120 t1@@96 t2@@73 t3@@58 t4@@43 t5@@28 t6@@13 h@@62 f@@88 bx0@@82 bx1@@68 bx2@@54 bx3@@40 bx4@@26 bx5@@12)) ))) :qid |unknown.0:0| :skolemid |1064| :pattern ( ($IsAlloc f@@88 (Tclass._System.___hFunc6 t0@@120 t1@@96 t2@@73 t3@@58 t4@@43 t5@@28 t6@@13) h@@62)) )))
(assert (forall ((arg0@@279 T@U) (arg1@@140 T@U) (arg2@@92 T@U) (arg3@@68 T@U) (arg4@@57 T@U) (arg5@@44 T@U) (arg6@@32 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6 arg0@@279 arg1@@140 arg2@@92 arg3@@68 arg4@@57 arg5@@44 arg6@@32)) TyType) :qid |funType:Tclass._System.___hPartialFunc6| :pattern ( (Tclass._System.___hPartialFunc6 arg0@@279 arg1@@140 arg2@@92 arg3@@68 arg4@@57 arg5@@44 arg6@@32)) )))
(assert (forall ((|#$T0@@118| T@U) (|#$T1@@102| T@U) (|#$T2@@83| T@U) (|#$T3@@61| T@U) (|#$T4@@36| T@U) (|#$T5@@8| T@U) (|#$R@@131| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@118|) TyType) (= (type |#$T1@@102|) TyType)) (= (type |#$T2@@83|) TyType)) (= (type |#$T3@@61|) TyType)) (= (type |#$T4@@36|) TyType)) (= (type |#$T5@@8|) TyType)) (= (type |#$R@@131|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc6 |#$T0@@118| |#$T1@@102| |#$T2@@83| |#$T3@@61| |#$T4@@36| |#$T5@@8| |#$R@@131|)) Tagclass._System.___hPartialFunc6) (= (TagFamily (Tclass._System.___hPartialFunc6 |#$T0@@118| |#$T1@@102| |#$T2@@83| |#$T3@@61| |#$T4@@36| |#$T5@@8| |#$R@@131|)) |tytagFamily$_#PartialFunc6|))) :qid |unknown.0:0| :skolemid |1065| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@118| |#$T1@@102| |#$T2@@83| |#$T3@@61| |#$T4@@36| |#$T5@@8| |#$R@@131|)) )))
(assert (forall ((arg0@@280 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_0 arg0@@280)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_0| :pattern ( (Tclass._System.___hPartialFunc6_0 arg0@@280)) )))
(assert (forall ((|#$T0@@119| T@U) (|#$T1@@103| T@U) (|#$T2@@84| T@U) (|#$T3@@62| T@U) (|#$T4@@37| T@U) (|#$T5@@9| T@U) (|#$R@@132| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@119|) TyType) (= (type |#$T1@@103|) TyType)) (= (type |#$T2@@84|) TyType)) (= (type |#$T3@@62|) TyType)) (= (type |#$T4@@37|) TyType)) (= (type |#$T5@@9|) TyType)) (= (type |#$R@@132|) TyType)) (= (Tclass._System.___hPartialFunc6_0 (Tclass._System.___hPartialFunc6 |#$T0@@119| |#$T1@@103| |#$T2@@84| |#$T3@@62| |#$T4@@37| |#$T5@@9| |#$R@@132|)) |#$T0@@119|)) :qid |unknown.0:0| :skolemid |1066| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@119| |#$T1@@103| |#$T2@@84| |#$T3@@62| |#$T4@@37| |#$T5@@9| |#$R@@132|)) )))
(assert (forall ((arg0@@281 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_1 arg0@@281)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_1| :pattern ( (Tclass._System.___hPartialFunc6_1 arg0@@281)) )))
(assert (forall ((|#$T0@@120| T@U) (|#$T1@@104| T@U) (|#$T2@@85| T@U) (|#$T3@@63| T@U) (|#$T4@@38| T@U) (|#$T5@@10| T@U) (|#$R@@133| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@120|) TyType) (= (type |#$T1@@104|) TyType)) (= (type |#$T2@@85|) TyType)) (= (type |#$T3@@63|) TyType)) (= (type |#$T4@@38|) TyType)) (= (type |#$T5@@10|) TyType)) (= (type |#$R@@133|) TyType)) (= (Tclass._System.___hPartialFunc6_1 (Tclass._System.___hPartialFunc6 |#$T0@@120| |#$T1@@104| |#$T2@@85| |#$T3@@63| |#$T4@@38| |#$T5@@10| |#$R@@133|)) |#$T1@@104|)) :qid |unknown.0:0| :skolemid |1067| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@120| |#$T1@@104| |#$T2@@85| |#$T3@@63| |#$T4@@38| |#$T5@@10| |#$R@@133|)) )))
(assert (forall ((arg0@@282 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_2 arg0@@282)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_2| :pattern ( (Tclass._System.___hPartialFunc6_2 arg0@@282)) )))
(assert (forall ((|#$T0@@121| T@U) (|#$T1@@105| T@U) (|#$T2@@86| T@U) (|#$T3@@64| T@U) (|#$T4@@39| T@U) (|#$T5@@11| T@U) (|#$R@@134| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@121|) TyType) (= (type |#$T1@@105|) TyType)) (= (type |#$T2@@86|) TyType)) (= (type |#$T3@@64|) TyType)) (= (type |#$T4@@39|) TyType)) (= (type |#$T5@@11|) TyType)) (= (type |#$R@@134|) TyType)) (= (Tclass._System.___hPartialFunc6_2 (Tclass._System.___hPartialFunc6 |#$T0@@121| |#$T1@@105| |#$T2@@86| |#$T3@@64| |#$T4@@39| |#$T5@@11| |#$R@@134|)) |#$T2@@86|)) :qid |unknown.0:0| :skolemid |1068| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@121| |#$T1@@105| |#$T2@@86| |#$T3@@64| |#$T4@@39| |#$T5@@11| |#$R@@134|)) )))
(assert (forall ((arg0@@283 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_3 arg0@@283)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_3| :pattern ( (Tclass._System.___hPartialFunc6_3 arg0@@283)) )))
(assert (forall ((|#$T0@@122| T@U) (|#$T1@@106| T@U) (|#$T2@@87| T@U) (|#$T3@@65| T@U) (|#$T4@@40| T@U) (|#$T5@@12| T@U) (|#$R@@135| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@122|) TyType) (= (type |#$T1@@106|) TyType)) (= (type |#$T2@@87|) TyType)) (= (type |#$T3@@65|) TyType)) (= (type |#$T4@@40|) TyType)) (= (type |#$T5@@12|) TyType)) (= (type |#$R@@135|) TyType)) (= (Tclass._System.___hPartialFunc6_3 (Tclass._System.___hPartialFunc6 |#$T0@@122| |#$T1@@106| |#$T2@@87| |#$T3@@65| |#$T4@@40| |#$T5@@12| |#$R@@135|)) |#$T3@@65|)) :qid |unknown.0:0| :skolemid |1069| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@122| |#$T1@@106| |#$T2@@87| |#$T3@@65| |#$T4@@40| |#$T5@@12| |#$R@@135|)) )))
(assert (forall ((arg0@@284 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_4 arg0@@284)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_4| :pattern ( (Tclass._System.___hPartialFunc6_4 arg0@@284)) )))
(assert (forall ((|#$T0@@123| T@U) (|#$T1@@107| T@U) (|#$T2@@88| T@U) (|#$T3@@66| T@U) (|#$T4@@41| T@U) (|#$T5@@13| T@U) (|#$R@@136| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@123|) TyType) (= (type |#$T1@@107|) TyType)) (= (type |#$T2@@88|) TyType)) (= (type |#$T3@@66|) TyType)) (= (type |#$T4@@41|) TyType)) (= (type |#$T5@@13|) TyType)) (= (type |#$R@@136|) TyType)) (= (Tclass._System.___hPartialFunc6_4 (Tclass._System.___hPartialFunc6 |#$T0@@123| |#$T1@@107| |#$T2@@88| |#$T3@@66| |#$T4@@41| |#$T5@@13| |#$R@@136|)) |#$T4@@41|)) :qid |unknown.0:0| :skolemid |1070| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@123| |#$T1@@107| |#$T2@@88| |#$T3@@66| |#$T4@@41| |#$T5@@13| |#$R@@136|)) )))
(assert (forall ((arg0@@285 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_5 arg0@@285)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_5| :pattern ( (Tclass._System.___hPartialFunc6_5 arg0@@285)) )))
(assert (forall ((|#$T0@@124| T@U) (|#$T1@@108| T@U) (|#$T2@@89| T@U) (|#$T3@@67| T@U) (|#$T4@@42| T@U) (|#$T5@@14| T@U) (|#$R@@137| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@124|) TyType) (= (type |#$T1@@108|) TyType)) (= (type |#$T2@@89|) TyType)) (= (type |#$T3@@67|) TyType)) (= (type |#$T4@@42|) TyType)) (= (type |#$T5@@14|) TyType)) (= (type |#$R@@137|) TyType)) (= (Tclass._System.___hPartialFunc6_5 (Tclass._System.___hPartialFunc6 |#$T0@@124| |#$T1@@108| |#$T2@@89| |#$T3@@67| |#$T4@@42| |#$T5@@14| |#$R@@137|)) |#$T5@@14|)) :qid |unknown.0:0| :skolemid |1071| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@124| |#$T1@@108| |#$T2@@89| |#$T3@@67| |#$T4@@42| |#$T5@@14| |#$R@@137|)) )))
(assert (forall ((arg0@@286 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_6 arg0@@286)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_6| :pattern ( (Tclass._System.___hPartialFunc6_6 arg0@@286)) )))
(assert (forall ((|#$T0@@125| T@U) (|#$T1@@109| T@U) (|#$T2@@90| T@U) (|#$T3@@68| T@U) (|#$T4@@43| T@U) (|#$T5@@15| T@U) (|#$R@@138| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@125|) TyType) (= (type |#$T1@@109|) TyType)) (= (type |#$T2@@90|) TyType)) (= (type |#$T3@@68|) TyType)) (= (type |#$T4@@43|) TyType)) (= (type |#$T5@@15|) TyType)) (= (type |#$R@@138|) TyType)) (= (Tclass._System.___hPartialFunc6_6 (Tclass._System.___hPartialFunc6 |#$T0@@125| |#$T1@@109| |#$T2@@90| |#$T3@@68| |#$T4@@43| |#$T5@@15| |#$R@@138|)) |#$R@@138|)) :qid |unknown.0:0| :skolemid |1072| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@125| |#$T1@@109| |#$T2@@90| |#$T3@@68| |#$T4@@43| |#$T5@@15| |#$R@@138|)) )))
(assert (forall ((|#$T0@@126| T@U) (|#$T1@@110| T@U) (|#$T2@@91| T@U) (|#$T3@@69| T@U) (|#$T4@@44| T@U) (|#$T5@@16| T@U) (|#$R@@139| T@U) (bx@@86 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@126|) TyType) (= (type |#$T1@@110|) TyType)) (= (type |#$T2@@91|) TyType)) (= (type |#$T3@@69|) TyType)) (= (type |#$T4@@44|) TyType)) (= (type |#$T5@@16|) TyType)) (= (type |#$R@@139|) TyType)) (= (type bx@@86) BoxType)) ($IsBox bx@@86 (Tclass._System.___hPartialFunc6 |#$T0@@126| |#$T1@@110| |#$T2@@91| |#$T3@@69| |#$T4@@44| |#$T5@@16| |#$R@@139|))) (and (= ($Box ($Unbox HandleTypeType bx@@86)) bx@@86) ($Is ($Unbox HandleTypeType bx@@86) (Tclass._System.___hPartialFunc6 |#$T0@@126| |#$T1@@110| |#$T2@@91| |#$T3@@69| |#$T4@@44| |#$T5@@16| |#$R@@139|)))) :qid |unknown.0:0| :skolemid |1073| :pattern ( ($IsBox bx@@86 (Tclass._System.___hPartialFunc6 |#$T0@@126| |#$T1@@110| |#$T2@@91| |#$T3@@69| |#$T4@@44| |#$T5@@16| |#$R@@139|))) )))
(assert (forall ((|#$T0@@127| T@U) (|#$T1@@111| T@U) (|#$T2@@92| T@U) (|#$T3@@70| T@U) (|#$T4@@45| T@U) (|#$T5@@17| T@U) (|#$R@@140| T@U) (|f#0@@23| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@127|) TyType) (= (type |#$T1@@111|) TyType)) (= (type |#$T2@@92|) TyType)) (= (type |#$T3@@70|) TyType)) (= (type |#$T4@@45|) TyType)) (= (type |#$T5@@17|) TyType)) (= (type |#$R@@140|) TyType)) (= (type |f#0@@23|) HandleTypeType)) (= ($Is |f#0@@23| (Tclass._System.___hPartialFunc6 |#$T0@@127| |#$T1@@111| |#$T2@@92| |#$T3@@70| |#$T4@@45| |#$T5@@17| |#$R@@140|))  (and ($Is |f#0@@23| (Tclass._System.___hFunc6 |#$T0@@127| |#$T1@@111| |#$T2@@92| |#$T3@@70| |#$T4@@45| |#$T5@@17| |#$R@@140|)) (forall ((|x0#0@@9| T@U) (|x1#0@@7| T@U) (|x2#0@@5| T@U) (|x3#0@@3| T@U) (|x4#0@@1| T@U) (|x5#0| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |x0#0@@9|) BoxType) (= (type |x1#0@@7|) BoxType)) (= (type |x2#0@@5|) BoxType)) (= (type |x3#0@@3|) BoxType)) (= (type |x4#0@@1|) BoxType)) (= (type |x5#0|) BoxType)) (and (and (and (and (and ($IsBox |x0#0@@9| |#$T0@@127|) ($IsBox |x1#0@@7| |#$T1@@111|)) ($IsBox |x2#0@@5| |#$T2@@92|)) ($IsBox |x3#0@@3| |#$T3@@70|)) ($IsBox |x4#0@@1| |#$T4@@45|)) ($IsBox |x5#0| |#$T5@@17|))) (|Set#Equal| (Reads6 |#$T0@@127| |#$T1@@111| |#$T2@@92| |#$T3@@70| |#$T4@@45| |#$T5@@17| |#$R@@140| $OneHeap |f#0@@23| |x0#0@@9| |x1#0@@7| |x2#0@@5| |x3#0@@3| |x4#0@@1| |x5#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1074| :no-pattern (type |x0#0@@9|) :no-pattern (type |x1#0@@7|) :no-pattern (type |x2#0@@5|) :no-pattern (type |x3#0@@3|) :no-pattern (type |x4#0@@1|) :no-pattern (type |x5#0|) :no-pattern (U_2_int |x0#0@@9|) :no-pattern (U_2_bool |x0#0@@9|) :no-pattern (U_2_int |x1#0@@7|) :no-pattern (U_2_bool |x1#0@@7|) :no-pattern (U_2_int |x2#0@@5|) :no-pattern (U_2_bool |x2#0@@5|) :no-pattern (U_2_int |x3#0@@3|) :no-pattern (U_2_bool |x3#0@@3|) :no-pattern (U_2_int |x4#0@@1|) :no-pattern (U_2_bool |x4#0@@1|) :no-pattern (U_2_int |x5#0|) :no-pattern (U_2_bool |x5#0|) ))))) :qid |unknown.0:0| :skolemid |1075| :pattern ( ($Is |f#0@@23| (Tclass._System.___hPartialFunc6 |#$T0@@127| |#$T1@@111| |#$T2@@92| |#$T3@@70| |#$T4@@45| |#$T5@@17| |#$R@@140|))) )))
(assert (forall ((|#$T0@@128| T@U) (|#$T1@@112| T@U) (|#$T2@@93| T@U) (|#$T3@@71| T@U) (|#$T4@@46| T@U) (|#$T5@@18| T@U) (|#$R@@141| T@U) (|f#0@@24| T@U) ($h@@20 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@128|) TyType) (= (type |#$T1@@112|) TyType)) (= (type |#$T2@@93|) TyType)) (= (type |#$T3@@71|) TyType)) (= (type |#$T4@@46|) TyType)) (= (type |#$T5@@18|) TyType)) (= (type |#$R@@141|) TyType)) (= (type |f#0@@24|) HandleTypeType)) (= (type $h@@20) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@24| (Tclass._System.___hPartialFunc6 |#$T0@@128| |#$T1@@112| |#$T2@@93| |#$T3@@71| |#$T4@@46| |#$T5@@18| |#$R@@141|) $h@@20) ($IsAlloc |f#0@@24| (Tclass._System.___hFunc6 |#$T0@@128| |#$T1@@112| |#$T2@@93| |#$T3@@71| |#$T4@@46| |#$T5@@18| |#$R@@141|) $h@@20))) :qid |unknown.0:0| :skolemid |1076| :pattern ( ($IsAlloc |f#0@@24| (Tclass._System.___hPartialFunc6 |#$T0@@128| |#$T1@@112| |#$T2@@93| |#$T3@@71| |#$T4@@46| |#$T5@@18| |#$R@@141|) $h@@20)) )))
(assert (forall ((arg0@@287 T@U) (arg1@@141 T@U) (arg2@@93 T@U) (arg3@@69 T@U) (arg4@@58 T@U) (arg5@@45 T@U) (arg6@@33 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6 arg0@@287 arg1@@141 arg2@@93 arg3@@69 arg4@@58 arg5@@45 arg6@@33)) TyType) :qid |funType:Tclass._System.___hTotalFunc6| :pattern ( (Tclass._System.___hTotalFunc6 arg0@@287 arg1@@141 arg2@@93 arg3@@69 arg4@@58 arg5@@45 arg6@@33)) )))
(assert (forall ((|#$T0@@129| T@U) (|#$T1@@113| T@U) (|#$T2@@94| T@U) (|#$T3@@72| T@U) (|#$T4@@47| T@U) (|#$T5@@19| T@U) (|#$R@@142| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@129|) TyType) (= (type |#$T1@@113|) TyType)) (= (type |#$T2@@94|) TyType)) (= (type |#$T3@@72|) TyType)) (= (type |#$T4@@47|) TyType)) (= (type |#$T5@@19|) TyType)) (= (type |#$R@@142|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc6 |#$T0@@129| |#$T1@@113| |#$T2@@94| |#$T3@@72| |#$T4@@47| |#$T5@@19| |#$R@@142|)) Tagclass._System.___hTotalFunc6) (= (TagFamily (Tclass._System.___hTotalFunc6 |#$T0@@129| |#$T1@@113| |#$T2@@94| |#$T3@@72| |#$T4@@47| |#$T5@@19| |#$R@@142|)) |tytagFamily$_#TotalFunc6|))) :qid |unknown.0:0| :skolemid |1077| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@129| |#$T1@@113| |#$T2@@94| |#$T3@@72| |#$T4@@47| |#$T5@@19| |#$R@@142|)) )))
(assert (forall ((arg0@@288 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_0 arg0@@288)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_0| :pattern ( (Tclass._System.___hTotalFunc6_0 arg0@@288)) )))
(assert (forall ((|#$T0@@130| T@U) (|#$T1@@114| T@U) (|#$T2@@95| T@U) (|#$T3@@73| T@U) (|#$T4@@48| T@U) (|#$T5@@20| T@U) (|#$R@@143| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@130|) TyType) (= (type |#$T1@@114|) TyType)) (= (type |#$T2@@95|) TyType)) (= (type |#$T3@@73|) TyType)) (= (type |#$T4@@48|) TyType)) (= (type |#$T5@@20|) TyType)) (= (type |#$R@@143|) TyType)) (= (Tclass._System.___hTotalFunc6_0 (Tclass._System.___hTotalFunc6 |#$T0@@130| |#$T1@@114| |#$T2@@95| |#$T3@@73| |#$T4@@48| |#$T5@@20| |#$R@@143|)) |#$T0@@130|)) :qid |unknown.0:0| :skolemid |1078| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@130| |#$T1@@114| |#$T2@@95| |#$T3@@73| |#$T4@@48| |#$T5@@20| |#$R@@143|)) )))
(assert (forall ((arg0@@289 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_1 arg0@@289)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_1| :pattern ( (Tclass._System.___hTotalFunc6_1 arg0@@289)) )))
(assert (forall ((|#$T0@@131| T@U) (|#$T1@@115| T@U) (|#$T2@@96| T@U) (|#$T3@@74| T@U) (|#$T4@@49| T@U) (|#$T5@@21| T@U) (|#$R@@144| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@131|) TyType) (= (type |#$T1@@115|) TyType)) (= (type |#$T2@@96|) TyType)) (= (type |#$T3@@74|) TyType)) (= (type |#$T4@@49|) TyType)) (= (type |#$T5@@21|) TyType)) (= (type |#$R@@144|) TyType)) (= (Tclass._System.___hTotalFunc6_1 (Tclass._System.___hTotalFunc6 |#$T0@@131| |#$T1@@115| |#$T2@@96| |#$T3@@74| |#$T4@@49| |#$T5@@21| |#$R@@144|)) |#$T1@@115|)) :qid |unknown.0:0| :skolemid |1079| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@131| |#$T1@@115| |#$T2@@96| |#$T3@@74| |#$T4@@49| |#$T5@@21| |#$R@@144|)) )))
(assert (forall ((arg0@@290 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_2 arg0@@290)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_2| :pattern ( (Tclass._System.___hTotalFunc6_2 arg0@@290)) )))
(assert (forall ((|#$T0@@132| T@U) (|#$T1@@116| T@U) (|#$T2@@97| T@U) (|#$T3@@75| T@U) (|#$T4@@50| T@U) (|#$T5@@22| T@U) (|#$R@@145| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@132|) TyType) (= (type |#$T1@@116|) TyType)) (= (type |#$T2@@97|) TyType)) (= (type |#$T3@@75|) TyType)) (= (type |#$T4@@50|) TyType)) (= (type |#$T5@@22|) TyType)) (= (type |#$R@@145|) TyType)) (= (Tclass._System.___hTotalFunc6_2 (Tclass._System.___hTotalFunc6 |#$T0@@132| |#$T1@@116| |#$T2@@97| |#$T3@@75| |#$T4@@50| |#$T5@@22| |#$R@@145|)) |#$T2@@97|)) :qid |unknown.0:0| :skolemid |1080| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@132| |#$T1@@116| |#$T2@@97| |#$T3@@75| |#$T4@@50| |#$T5@@22| |#$R@@145|)) )))
(assert (forall ((arg0@@291 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_3 arg0@@291)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_3| :pattern ( (Tclass._System.___hTotalFunc6_3 arg0@@291)) )))
(assert (forall ((|#$T0@@133| T@U) (|#$T1@@117| T@U) (|#$T2@@98| T@U) (|#$T3@@76| T@U) (|#$T4@@51| T@U) (|#$T5@@23| T@U) (|#$R@@146| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@133|) TyType) (= (type |#$T1@@117|) TyType)) (= (type |#$T2@@98|) TyType)) (= (type |#$T3@@76|) TyType)) (= (type |#$T4@@51|) TyType)) (= (type |#$T5@@23|) TyType)) (= (type |#$R@@146|) TyType)) (= (Tclass._System.___hTotalFunc6_3 (Tclass._System.___hTotalFunc6 |#$T0@@133| |#$T1@@117| |#$T2@@98| |#$T3@@76| |#$T4@@51| |#$T5@@23| |#$R@@146|)) |#$T3@@76|)) :qid |unknown.0:0| :skolemid |1081| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@133| |#$T1@@117| |#$T2@@98| |#$T3@@76| |#$T4@@51| |#$T5@@23| |#$R@@146|)) )))
(assert (forall ((arg0@@292 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_4 arg0@@292)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_4| :pattern ( (Tclass._System.___hTotalFunc6_4 arg0@@292)) )))
(assert (forall ((|#$T0@@134| T@U) (|#$T1@@118| T@U) (|#$T2@@99| T@U) (|#$T3@@77| T@U) (|#$T4@@52| T@U) (|#$T5@@24| T@U) (|#$R@@147| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@134|) TyType) (= (type |#$T1@@118|) TyType)) (= (type |#$T2@@99|) TyType)) (= (type |#$T3@@77|) TyType)) (= (type |#$T4@@52|) TyType)) (= (type |#$T5@@24|) TyType)) (= (type |#$R@@147|) TyType)) (= (Tclass._System.___hTotalFunc6_4 (Tclass._System.___hTotalFunc6 |#$T0@@134| |#$T1@@118| |#$T2@@99| |#$T3@@77| |#$T4@@52| |#$T5@@24| |#$R@@147|)) |#$T4@@52|)) :qid |unknown.0:0| :skolemid |1082| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@134| |#$T1@@118| |#$T2@@99| |#$T3@@77| |#$T4@@52| |#$T5@@24| |#$R@@147|)) )))
(assert (forall ((arg0@@293 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_5 arg0@@293)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_5| :pattern ( (Tclass._System.___hTotalFunc6_5 arg0@@293)) )))
(assert (forall ((|#$T0@@135| T@U) (|#$T1@@119| T@U) (|#$T2@@100| T@U) (|#$T3@@78| T@U) (|#$T4@@53| T@U) (|#$T5@@25| T@U) (|#$R@@148| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@135|) TyType) (= (type |#$T1@@119|) TyType)) (= (type |#$T2@@100|) TyType)) (= (type |#$T3@@78|) TyType)) (= (type |#$T4@@53|) TyType)) (= (type |#$T5@@25|) TyType)) (= (type |#$R@@148|) TyType)) (= (Tclass._System.___hTotalFunc6_5 (Tclass._System.___hTotalFunc6 |#$T0@@135| |#$T1@@119| |#$T2@@100| |#$T3@@78| |#$T4@@53| |#$T5@@25| |#$R@@148|)) |#$T5@@25|)) :qid |unknown.0:0| :skolemid |1083| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@135| |#$T1@@119| |#$T2@@100| |#$T3@@78| |#$T4@@53| |#$T5@@25| |#$R@@148|)) )))
(assert (forall ((arg0@@294 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_6 arg0@@294)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_6| :pattern ( (Tclass._System.___hTotalFunc6_6 arg0@@294)) )))
(assert (forall ((|#$T0@@136| T@U) (|#$T1@@120| T@U) (|#$T2@@101| T@U) (|#$T3@@79| T@U) (|#$T4@@54| T@U) (|#$T5@@26| T@U) (|#$R@@149| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@136|) TyType) (= (type |#$T1@@120|) TyType)) (= (type |#$T2@@101|) TyType)) (= (type |#$T3@@79|) TyType)) (= (type |#$T4@@54|) TyType)) (= (type |#$T5@@26|) TyType)) (= (type |#$R@@149|) TyType)) (= (Tclass._System.___hTotalFunc6_6 (Tclass._System.___hTotalFunc6 |#$T0@@136| |#$T1@@120| |#$T2@@101| |#$T3@@79| |#$T4@@54| |#$T5@@26| |#$R@@149|)) |#$R@@149|)) :qid |unknown.0:0| :skolemid |1084| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@136| |#$T1@@120| |#$T2@@101| |#$T3@@79| |#$T4@@54| |#$T5@@26| |#$R@@149|)) )))
(assert (forall ((|#$T0@@137| T@U) (|#$T1@@121| T@U) (|#$T2@@102| T@U) (|#$T3@@80| T@U) (|#$T4@@55| T@U) (|#$T5@@27| T@U) (|#$R@@150| T@U) (bx@@87 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@137|) TyType) (= (type |#$T1@@121|) TyType)) (= (type |#$T2@@102|) TyType)) (= (type |#$T3@@80|) TyType)) (= (type |#$T4@@55|) TyType)) (= (type |#$T5@@27|) TyType)) (= (type |#$R@@150|) TyType)) (= (type bx@@87) BoxType)) ($IsBox bx@@87 (Tclass._System.___hTotalFunc6 |#$T0@@137| |#$T1@@121| |#$T2@@102| |#$T3@@80| |#$T4@@55| |#$T5@@27| |#$R@@150|))) (and (= ($Box ($Unbox HandleTypeType bx@@87)) bx@@87) ($Is ($Unbox HandleTypeType bx@@87) (Tclass._System.___hTotalFunc6 |#$T0@@137| |#$T1@@121| |#$T2@@102| |#$T3@@80| |#$T4@@55| |#$T5@@27| |#$R@@150|)))) :qid |unknown.0:0| :skolemid |1085| :pattern ( ($IsBox bx@@87 (Tclass._System.___hTotalFunc6 |#$T0@@137| |#$T1@@121| |#$T2@@102| |#$T3@@80| |#$T4@@55| |#$T5@@27| |#$R@@150|))) )))
(assert (forall ((|#$T0@@138| T@U) (|#$T1@@122| T@U) (|#$T2@@103| T@U) (|#$T3@@81| T@U) (|#$T4@@56| T@U) (|#$T5@@28| T@U) (|#$R@@151| T@U) (|f#0@@25| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@138|) TyType) (= (type |#$T1@@122|) TyType)) (= (type |#$T2@@103|) TyType)) (= (type |#$T3@@81|) TyType)) (= (type |#$T4@@56|) TyType)) (= (type |#$T5@@28|) TyType)) (= (type |#$R@@151|) TyType)) (= (type |f#0@@25|) HandleTypeType)) (= ($Is |f#0@@25| (Tclass._System.___hTotalFunc6 |#$T0@@138| |#$T1@@122| |#$T2@@103| |#$T3@@81| |#$T4@@56| |#$T5@@28| |#$R@@151|))  (and ($Is |f#0@@25| (Tclass._System.___hPartialFunc6 |#$T0@@138| |#$T1@@122| |#$T2@@103| |#$T3@@81| |#$T4@@56| |#$T5@@28| |#$R@@151|)) (forall ((|x0#0@@10| T@U) (|x1#0@@8| T@U) (|x2#0@@6| T@U) (|x3#0@@4| T@U) (|x4#0@@2| T@U) (|x5#0@@0| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |x0#0@@10|) BoxType) (= (type |x1#0@@8|) BoxType)) (= (type |x2#0@@6|) BoxType)) (= (type |x3#0@@4|) BoxType)) (= (type |x4#0@@2|) BoxType)) (= (type |x5#0@@0|) BoxType)) (and (and (and (and (and ($IsBox |x0#0@@10| |#$T0@@138|) ($IsBox |x1#0@@8| |#$T1@@122|)) ($IsBox |x2#0@@6| |#$T2@@103|)) ($IsBox |x3#0@@4| |#$T3@@81|)) ($IsBox |x4#0@@2| |#$T4@@56|)) ($IsBox |x5#0@@0| |#$T5@@28|))) (Requires6 |#$T0@@138| |#$T1@@122| |#$T2@@103| |#$T3@@81| |#$T4@@56| |#$T5@@28| |#$R@@151| $OneHeap |f#0@@25| |x0#0@@10| |x1#0@@8| |x2#0@@6| |x3#0@@4| |x4#0@@2| |x5#0@@0|)) :qid |unknown.0:0| :skolemid |1086| :no-pattern (type |x0#0@@10|) :no-pattern (type |x1#0@@8|) :no-pattern (type |x2#0@@6|) :no-pattern (type |x3#0@@4|) :no-pattern (type |x4#0@@2|) :no-pattern (type |x5#0@@0|) :no-pattern (U_2_int |x0#0@@10|) :no-pattern (U_2_bool |x0#0@@10|) :no-pattern (U_2_int |x1#0@@8|) :no-pattern (U_2_bool |x1#0@@8|) :no-pattern (U_2_int |x2#0@@6|) :no-pattern (U_2_bool |x2#0@@6|) :no-pattern (U_2_int |x3#0@@4|) :no-pattern (U_2_bool |x3#0@@4|) :no-pattern (U_2_int |x4#0@@2|) :no-pattern (U_2_bool |x4#0@@2|) :no-pattern (U_2_int |x5#0@@0|) :no-pattern (U_2_bool |x5#0@@0|) ))))) :qid |unknown.0:0| :skolemid |1087| :pattern ( ($Is |f#0@@25| (Tclass._System.___hTotalFunc6 |#$T0@@138| |#$T1@@122| |#$T2@@103| |#$T3@@81| |#$T4@@56| |#$T5@@28| |#$R@@151|))) )))
(assert (forall ((|#$T0@@139| T@U) (|#$T1@@123| T@U) (|#$T2@@104| T@U) (|#$T3@@82| T@U) (|#$T4@@57| T@U) (|#$T5@@29| T@U) (|#$R@@152| T@U) (|f#0@@26| T@U) ($h@@21 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@139|) TyType) (= (type |#$T1@@123|) TyType)) (= (type |#$T2@@104|) TyType)) (= (type |#$T3@@82|) TyType)) (= (type |#$T4@@57|) TyType)) (= (type |#$T5@@29|) TyType)) (= (type |#$R@@152|) TyType)) (= (type |f#0@@26|) HandleTypeType)) (= (type $h@@21) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@26| (Tclass._System.___hTotalFunc6 |#$T0@@139| |#$T1@@123| |#$T2@@104| |#$T3@@82| |#$T4@@57| |#$T5@@29| |#$R@@152|) $h@@21) ($IsAlloc |f#0@@26| (Tclass._System.___hPartialFunc6 |#$T0@@139| |#$T1@@123| |#$T2@@104| |#$T3@@82| |#$T4@@57| |#$T5@@29| |#$R@@152|) $h@@21))) :qid |unknown.0:0| :skolemid |1088| :pattern ( ($IsAlloc |f#0@@26| (Tclass._System.___hTotalFunc6 |#$T0@@139| |#$T1@@123| |#$T2@@104| |#$T3@@82| |#$T4@@57| |#$T5@@29| |#$R@@152|) $h@@21)) )))
(assert (forall ((arg0@@295 T@U) ) (! (= (type (DatatypeCtorId arg0@@295)) DtCtorIdType) :qid |funType:DatatypeCtorId| :pattern ( (DatatypeCtorId arg0@@295)) )))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (!  (=> (and (= (type |a#0#0#0|) BoxType) (= (type |a#0#1#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)) :qid |unknown.0:0| :skolemid |1089| :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) )))
(assert (forall ((d@@0 T@U) ) (!  (=> (= (type d@@0) DatatypeTypeType) (= (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|))) :qid |unknown.0:0| :skolemid |1090| :pattern ( (_System.Tuple2.___hMake2_q d@@0)) )))
(assert (forall ((d@@1 T@U) ) (!  (=> (and (= (type d@@1) DatatypeTypeType) (_System.Tuple2.___hMake2_q d@@1)) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (!  (and (and (= (type |a#1#0#0|) BoxType) (= (type |a#1#1#0|) BoxType)) (= d@@1 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))) :qid |unknown.0:0| :skolemid |1091| :no-pattern (type |a#1#0#0|) :no-pattern (type |a#1#1#0|) :no-pattern (U_2_int |a#1#0#0|) :no-pattern (U_2_bool |a#1#0#0|) :no-pattern (U_2_int |a#1#1#0|) :no-pattern (U_2_bool |a#1#1#0|) ))) :qid |unknown.0:0| :skolemid |1092| :pattern ( (_System.Tuple2.___hMake2_q d@@1)) )))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) ) (!  (=> (and (= (type |_System._tuple#2$T0|) TyType) (= (type |_System._tuple#2$T1|) TyType)) (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) |tytagFamily$_tuple#2|))) :qid |unknown.0:0| :skolemid |1093| :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) )))
(assert (forall ((arg0@@296 T@U) ) (! (= (type (Tclass._System.Tuple2_0 arg0@@296)) TyType) :qid |funType:Tclass._System.Tuple2_0| :pattern ( (Tclass._System.Tuple2_0 arg0@@296)) )))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) ) (!  (=> (and (= (type |_System._tuple#2$T0@@0|) TyType) (= (type |_System._tuple#2$T1@@0|) TyType)) (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)) |_System._tuple#2$T0@@0|)) :qid |unknown.0:0| :skolemid |1094| :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)) )))
(assert (forall ((arg0@@297 T@U) ) (! (= (type (Tclass._System.Tuple2_1 arg0@@297)) TyType) :qid |funType:Tclass._System.Tuple2_1| :pattern ( (Tclass._System.Tuple2_1 arg0@@297)) )))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) ) (!  (=> (and (= (type |_System._tuple#2$T0@@1|) TyType) (= (type |_System._tuple#2$T1@@1|) TyType)) (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|)) |_System._tuple#2$T1@@1|)) :qid |unknown.0:0| :skolemid |1095| :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|)) )))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) (bx@@88 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2$T0@@2|) TyType) (= (type |_System._tuple#2$T1@@2|) TyType)) (= (type bx@@88) BoxType)) ($IsBox bx@@88 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@88)) bx@@88) ($Is ($Unbox DatatypeTypeType bx@@88) (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)))) :qid |unknown.0:0| :skolemid |1096| :pattern ( ($IsBox bx@@88 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))) )))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2$T0@@3|) TyType) (= (type |_System._tuple#2$T1@@3|) TyType)) (= (type |a#2#0#0|) BoxType)) (= (type |a#2#1#0|) BoxType)) (= ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@3|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@3|)))) :qid |unknown.0:0| :skolemid |1097| :pattern ( ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))) )))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (|a#3#0#0| T@U) (|a#3#1#0| T@U) ($h@@22 T@U) ) (!  (=> (and (and (and (and (and (= (type |_System._tuple#2$T0@@4|) TyType) (= (type |_System._tuple#2$T1@@4|) TyType)) (= (type |a#3#0#0|) BoxType)) (= (type |a#3#1#0|) BoxType)) (= (type $h@@22) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@22)) (= ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|) $h@@22)  (and ($IsAllocBox |a#3#0#0| |_System._tuple#2$T0@@4| $h@@22) ($IsAllocBox |a#3#1#0| |_System._tuple#2$T1@@4| $h@@22)))) :qid |unknown.0:0| :skolemid |1098| :pattern ( ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|) $h@@22)) )))
(assert (forall ((d@@2 T@U) (|_System._tuple#2$T0@@5| T@U) ($h@@23 T@U) ) (!  (=> (and (and (and (= (type d@@2) DatatypeTypeType) (= (type |_System._tuple#2$T0@@5|) TyType)) (= (type $h@@23) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@23) (and (_System.Tuple2.___hMake2_q d@@2) (exists ((|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (type |_System._tuple#2$T1@@5|) TyType) ($IsAlloc d@@2 (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|) $h@@23)) :qid |unknown.0:0| :skolemid |1099| :pattern ( ($IsAlloc d@@2 (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|) $h@@23)) ))))) ($IsAllocBox (_System.Tuple2._0 d@@2) |_System._tuple#2$T0@@5| $h@@23)) :qid |unknown.0:0| :skolemid |1100| :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@2) |_System._tuple#2$T0@@5| $h@@23)) )))
(assert (forall ((d@@3 T@U) (|_System._tuple#2$T1@@6| T@U) ($h@@24 T@U) ) (!  (=> (and (and (and (= (type d@@3) DatatypeTypeType) (= (type |_System._tuple#2$T1@@6|) TyType)) (= (type $h@@24) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@24) (and (_System.Tuple2.___hMake2_q d@@3) (exists ((|_System._tuple#2$T0@@6| T@U) ) (!  (and (= (type |_System._tuple#2$T0@@6|) TyType) ($IsAlloc d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@24)) :qid |unknown.0:0| :skolemid |1101| :pattern ( ($IsAlloc d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@24)) ))))) ($IsAllocBox (_System.Tuple2._1 d@@3) |_System._tuple#2$T1@@6| $h@@24)) :qid |unknown.0:0| :skolemid |1102| :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@3) |_System._tuple#2$T1@@6| $h@@24)) )))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (!  (=> (and (= (type |a#4#0#0|) BoxType) (= (type |a#4#1#0|) BoxType)) (= (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|)) (Lit (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)))) :qid |unknown.0:0| :skolemid |1103| :pattern ( (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|))) )))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (!  (=> (and (= (type |a#5#0#0|) BoxType) (= (type |a#5#1#0|) BoxType)) (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) |a#5#0#0|)) :qid |unknown.0:0| :skolemid |1104| :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) )))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (!  (=> (and (= (type |a#6#0#0|) BoxType) (= (type |a#6#1#0|) BoxType)) (< (BoxRank |a#6#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)))) :qid |unknown.0:0| :skolemid |1105| :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) )))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (!  (=> (and (= (type |a#7#0#0|) BoxType) (= (type |a#7#1#0|) BoxType)) (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) |a#7#1#0|)) :qid |unknown.0:0| :skolemid |1106| :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) )))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (!  (=> (and (= (type |a#8#0#0|) BoxType) (= (type |a#8#1#0|) BoxType)) (< (BoxRank |a#8#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)))) :qid |unknown.0:0| :skolemid |1107| :pattern ( (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)) )))
(assert (forall ((d@@4 T@U) ) (!  (=> (and (= (type d@@4) DatatypeTypeType) (|$IsA#_System.Tuple2| d@@4)) (_System.Tuple2.___hMake2_q d@@4)) :qid |unknown.0:0| :skolemid |1108| :pattern ( (|$IsA#_System.Tuple2| d@@4)) )))
(assert (forall ((|_System._tuple#2$T0@@7| T@U) (|_System._tuple#2$T1@@7| T@U) (d@@5 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2$T0@@7|) TyType) (= (type |_System._tuple#2$T1@@7|) TyType)) (= (type d@@5) DatatypeTypeType)) ($Is d@@5 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|))) (_System.Tuple2.___hMake2_q d@@5)) :qid |unknown.0:0| :skolemid |1109| :pattern ( (_System.Tuple2.___hMake2_q d@@5) ($Is d@@5 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|))) )))
(assert (forall ((a@@124 T@U) (b@@61 T@U) ) (!  (=> (and (and (= (type a@@124) DatatypeTypeType) (= (type b@@61) DatatypeTypeType)) true) (= (|_System.Tuple2#Equal| a@@124 b@@61)  (and (= (_System.Tuple2._0 a@@124) (_System.Tuple2._0 b@@61)) (= (_System.Tuple2._1 a@@124) (_System.Tuple2._1 b@@61))))) :qid |unknown.0:0| :skolemid |1110| :pattern ( (|_System.Tuple2#Equal| a@@124 b@@61)) )))
(assert (forall ((a@@125 T@U) (b@@62 T@U) ) (!  (=> (and (= (type a@@125) DatatypeTypeType) (= (type b@@62) DatatypeTypeType)) (= (|_System.Tuple2#Equal| a@@125 b@@62) (= a@@125 b@@62))) :qid |unknown.0:0| :skolemid |1111| :pattern ( (|_System.Tuple2#Equal| a@@125 b@@62)) )))
(assert (forall ((arg0@@298 T@U) (arg1@@142 T@U) (arg2@@94 T@U) ) (! (= (type (Tclass._System.___hFunc2OSO arg0@@298 arg1@@142 arg2@@94)) TyType) :qid |funType:Tclass._System.___hFunc2OSO| :pattern ( (Tclass._System.___hFunc2OSO arg0@@298 arg1@@142 arg2@@94)) )))
(assert (forall ((|#$T0@@140| T@U) (|#$T1@@124| T@U) (|#$R@@153| T@U) ) (!  (=> (and (and (= (type |#$T0@@140|) TyType) (= (type |#$T1@@124|) TyType)) (= (type |#$R@@153|) TyType)) (and (= (Tag (Tclass._System.___hFunc2OSO |#$T0@@140| |#$T1@@124| |#$R@@153|)) Tagclass._System.___hFunc2OSO) (= (TagFamily (Tclass._System.___hFunc2OSO |#$T0@@140| |#$T1@@124| |#$R@@153|)) |tytagFamily$_#Func2OSO|))) :qid |unknown.0:0| :skolemid |1112| :pattern ( (Tclass._System.___hFunc2OSO |#$T0@@140| |#$T1@@124| |#$R@@153|)) )))
(assert (forall ((arg0@@299 T@U) ) (! (= (type (Tclass._System.___hFunc2OSO_0 arg0@@299)) TyType) :qid |funType:Tclass._System.___hFunc2OSO_0| :pattern ( (Tclass._System.___hFunc2OSO_0 arg0@@299)) )))
(assert (forall ((|#$T0@@141| T@U) (|#$T1@@125| T@U) (|#$R@@154| T@U) ) (!  (=> (and (and (= (type |#$T0@@141|) TyType) (= (type |#$T1@@125|) TyType)) (= (type |#$R@@154|) TyType)) (= (Tclass._System.___hFunc2OSO_0 (Tclass._System.___hFunc2OSO |#$T0@@141| |#$T1@@125| |#$R@@154|)) |#$T0@@141|)) :qid |unknown.0:0| :skolemid |1113| :pattern ( (Tclass._System.___hFunc2OSO |#$T0@@141| |#$T1@@125| |#$R@@154|)) )))
(assert (forall ((arg0@@300 T@U) ) (! (= (type (Tclass._System.___hFunc2OSO_1 arg0@@300)) TyType) :qid |funType:Tclass._System.___hFunc2OSO_1| :pattern ( (Tclass._System.___hFunc2OSO_1 arg0@@300)) )))
(assert (forall ((|#$T0@@142| T@U) (|#$T1@@126| T@U) (|#$R@@155| T@U) ) (!  (=> (and (and (= (type |#$T0@@142|) TyType) (= (type |#$T1@@126|) TyType)) (= (type |#$R@@155|) TyType)) (= (Tclass._System.___hFunc2OSO_1 (Tclass._System.___hFunc2OSO |#$T0@@142| |#$T1@@126| |#$R@@155|)) |#$T1@@126|)) :qid |unknown.0:0| :skolemid |1114| :pattern ( (Tclass._System.___hFunc2OSO |#$T0@@142| |#$T1@@126| |#$R@@155|)) )))
(assert (forall ((arg0@@301 T@U) ) (! (= (type (Tclass._System.___hFunc2OSO_2 arg0@@301)) TyType) :qid |funType:Tclass._System.___hFunc2OSO_2| :pattern ( (Tclass._System.___hFunc2OSO_2 arg0@@301)) )))
(assert (forall ((|#$T0@@143| T@U) (|#$T1@@127| T@U) (|#$R@@156| T@U) ) (!  (=> (and (and (= (type |#$T0@@143|) TyType) (= (type |#$T1@@127|) TyType)) (= (type |#$R@@156|) TyType)) (= (Tclass._System.___hFunc2OSO_2 (Tclass._System.___hFunc2OSO |#$T0@@143| |#$T1@@127| |#$R@@156|)) |#$R@@156|)) :qid |unknown.0:0| :skolemid |1115| :pattern ( (Tclass._System.___hFunc2OSO |#$T0@@143| |#$T1@@127| |#$R@@156|)) )))
(assert (forall ((|#$T0@@144| T@U) (|#$T1@@128| T@U) (|#$R@@157| T@U) (bx@@89 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@144|) TyType) (= (type |#$T1@@128|) TyType)) (= (type |#$R@@157|) TyType)) (= (type bx@@89) BoxType)) ($IsBox bx@@89 (Tclass._System.___hFunc2OSO |#$T0@@144| |#$T1@@128| |#$R@@157|))) (and (= ($Box ($Unbox HandleTypeType bx@@89)) bx@@89) ($Is ($Unbox HandleTypeType bx@@89) (Tclass._System.___hFunc2OSO |#$T0@@144| |#$T1@@128| |#$R@@157|)))) :qid |unknown.0:0| :skolemid |1116| :pattern ( ($IsBox bx@@89 (Tclass._System.___hFunc2OSO |#$T0@@144| |#$T1@@128| |#$R@@157|))) )))
(assert (forall ((arg0@@302 T@U) (arg1@@143 T@U) (arg2@@95 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2OSO arg0@@302 arg1@@143 arg2@@95)) TyType) :qid |funType:Tclass._System.___hPartialFunc2OSO| :pattern ( (Tclass._System.___hPartialFunc2OSO arg0@@302 arg1@@143 arg2@@95)) )))
(assert (forall ((|#$T0@@145| T@U) (|#$T1@@129| T@U) (|#$R@@158| T@U) ) (!  (=> (and (and (= (type |#$T0@@145|) TyType) (= (type |#$T1@@129|) TyType)) (= (type |#$R@@158|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2OSO |#$T0@@145| |#$T1@@129| |#$R@@158|)) Tagclass._System.___hPartialFunc2OSO) (= (TagFamily (Tclass._System.___hPartialFunc2OSO |#$T0@@145| |#$T1@@129| |#$R@@158|)) |tytagFamily$_#PartialFunc2OSO|))) :qid |unknown.0:0| :skolemid |1117| :pattern ( (Tclass._System.___hPartialFunc2OSO |#$T0@@145| |#$T1@@129| |#$R@@158|)) )))
(assert (forall ((arg0@@303 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2OSO_0 arg0@@303)) TyType) :qid |funType:Tclass._System.___hPartialFunc2OSO_0| :pattern ( (Tclass._System.___hPartialFunc2OSO_0 arg0@@303)) )))
(assert (forall ((|#$T0@@146| T@U) (|#$T1@@130| T@U) (|#$R@@159| T@U) ) (!  (=> (and (and (= (type |#$T0@@146|) TyType) (= (type |#$T1@@130|) TyType)) (= (type |#$R@@159|) TyType)) (= (Tclass._System.___hPartialFunc2OSO_0 (Tclass._System.___hPartialFunc2OSO |#$T0@@146| |#$T1@@130| |#$R@@159|)) |#$T0@@146|)) :qid |unknown.0:0| :skolemid |1118| :pattern ( (Tclass._System.___hPartialFunc2OSO |#$T0@@146| |#$T1@@130| |#$R@@159|)) )))
(assert (forall ((arg0@@304 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2OSO_1 arg0@@304)) TyType) :qid |funType:Tclass._System.___hPartialFunc2OSO_1| :pattern ( (Tclass._System.___hPartialFunc2OSO_1 arg0@@304)) )))
(assert (forall ((|#$T0@@147| T@U) (|#$T1@@131| T@U) (|#$R@@160| T@U) ) (!  (=> (and (and (= (type |#$T0@@147|) TyType) (= (type |#$T1@@131|) TyType)) (= (type |#$R@@160|) TyType)) (= (Tclass._System.___hPartialFunc2OSO_1 (Tclass._System.___hPartialFunc2OSO |#$T0@@147| |#$T1@@131| |#$R@@160|)) |#$T1@@131|)) :qid |unknown.0:0| :skolemid |1119| :pattern ( (Tclass._System.___hPartialFunc2OSO |#$T0@@147| |#$T1@@131| |#$R@@160|)) )))
(assert (forall ((arg0@@305 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2OSO_2 arg0@@305)) TyType) :qid |funType:Tclass._System.___hPartialFunc2OSO_2| :pattern ( (Tclass._System.___hPartialFunc2OSO_2 arg0@@305)) )))
(assert (forall ((|#$T0@@148| T@U) (|#$T1@@132| T@U) (|#$R@@161| T@U) ) (!  (=> (and (and (= (type |#$T0@@148|) TyType) (= (type |#$T1@@132|) TyType)) (= (type |#$R@@161|) TyType)) (= (Tclass._System.___hPartialFunc2OSO_2 (Tclass._System.___hPartialFunc2OSO |#$T0@@148| |#$T1@@132| |#$R@@161|)) |#$R@@161|)) :qid |unknown.0:0| :skolemid |1120| :pattern ( (Tclass._System.___hPartialFunc2OSO |#$T0@@148| |#$T1@@132| |#$R@@161|)) )))
(assert (forall ((|#$T0@@149| T@U) (|#$T1@@133| T@U) (|#$R@@162| T@U) (bx@@90 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@149|) TyType) (= (type |#$T1@@133|) TyType)) (= (type |#$R@@162|) TyType)) (= (type bx@@90) BoxType)) ($IsBox bx@@90 (Tclass._System.___hPartialFunc2OSO |#$T0@@149| |#$T1@@133| |#$R@@162|))) (and (= ($Box ($Unbox HandleTypeType bx@@90)) bx@@90) ($Is ($Unbox HandleTypeType bx@@90) (Tclass._System.___hPartialFunc2OSO |#$T0@@149| |#$T1@@133| |#$R@@162|)))) :qid |unknown.0:0| :skolemid |1121| :pattern ( ($IsBox bx@@90 (Tclass._System.___hPartialFunc2OSO |#$T0@@149| |#$T1@@133| |#$R@@162|))) )))
(assert (forall ((|#$T0@@150| T@U) (|#$T1@@134| T@U) (|#$R@@163| T@U) (|f#0@@27| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@150|) TyType) (= (type |#$T1@@134|) TyType)) (= (type |#$R@@163|) TyType)) (= (type |f#0@@27|) HandleTypeType)) (= ($Is |f#0@@27| (Tclass._System.___hPartialFunc2OSO |#$T0@@150| |#$T1@@134| |#$R@@163|))  (and ($Is |f#0@@27| (Tclass._System.___hFunc2OSO |#$T0@@150| |#$T1@@134| |#$R@@163|)) (forall ((|x0#0@@11| T@U) (|x1#0@@9| T@U) ) (!  (=> (and (and (= (type |x0#0@@11|) BoxType) (= (type |x1#0@@9|) BoxType)) (and ($IsBox |x0#0@@11| |#$T0@@150|) ($IsBox |x1#0@@9| |#$T1@@134|))) (|Set#Equal| (Reads2 |#$T0@@150| |#$T1@@134| |#$R@@163| $OneHeap |f#0@@27| |x0#0@@11| |x1#0@@9|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1122| :no-pattern (type |x0#0@@11|) :no-pattern (type |x1#0@@9|) :no-pattern (U_2_int |x0#0@@11|) :no-pattern (U_2_bool |x0#0@@11|) :no-pattern (U_2_int |x1#0@@9|) :no-pattern (U_2_bool |x1#0@@9|) ))))) :qid |unknown.0:0| :skolemid |1123| :pattern ( ($Is |f#0@@27| (Tclass._System.___hPartialFunc2OSO |#$T0@@150| |#$T1@@134| |#$R@@163|))) )))
(assert (forall ((|#$T0@@151| T@U) (|#$T1@@135| T@U) (|#$R@@164| T@U) (|f#0@@28| T@U) ($h@@25 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@151|) TyType) (= (type |#$T1@@135|) TyType)) (= (type |#$R@@164|) TyType)) (= (type |f#0@@28|) HandleTypeType)) (= (type $h@@25) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@28| (Tclass._System.___hPartialFunc2OSO |#$T0@@151| |#$T1@@135| |#$R@@164|) $h@@25) ($IsAlloc |f#0@@28| (Tclass._System.___hFunc2OSO |#$T0@@151| |#$T1@@135| |#$R@@164|) $h@@25))) :qid |unknown.0:0| :skolemid |1124| :pattern ( ($IsAlloc |f#0@@28| (Tclass._System.___hPartialFunc2OSO |#$T0@@151| |#$T1@@135| |#$R@@164|) $h@@25)) )))
(assert (forall ((arg0@@306 T@U) (arg1@@144 T@U) (arg2@@96 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2OSO arg0@@306 arg1@@144 arg2@@96)) TyType) :qid |funType:Tclass._System.___hTotalFunc2OSO| :pattern ( (Tclass._System.___hTotalFunc2OSO arg0@@306 arg1@@144 arg2@@96)) )))
(assert (forall ((|#$T0@@152| T@U) (|#$T1@@136| T@U) (|#$R@@165| T@U) ) (!  (=> (and (and (= (type |#$T0@@152|) TyType) (= (type |#$T1@@136|) TyType)) (= (type |#$R@@165|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2OSO |#$T0@@152| |#$T1@@136| |#$R@@165|)) Tagclass._System.___hTotalFunc2OSO) (= (TagFamily (Tclass._System.___hTotalFunc2OSO |#$T0@@152| |#$T1@@136| |#$R@@165|)) |tytagFamily$_#TotalFunc2OSO|))) :qid |unknown.0:0| :skolemid |1125| :pattern ( (Tclass._System.___hTotalFunc2OSO |#$T0@@152| |#$T1@@136| |#$R@@165|)) )))
(assert (forall ((arg0@@307 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2OSO_0 arg0@@307)) TyType) :qid |funType:Tclass._System.___hTotalFunc2OSO_0| :pattern ( (Tclass._System.___hTotalFunc2OSO_0 arg0@@307)) )))
(assert (forall ((|#$T0@@153| T@U) (|#$T1@@137| T@U) (|#$R@@166| T@U) ) (!  (=> (and (and (= (type |#$T0@@153|) TyType) (= (type |#$T1@@137|) TyType)) (= (type |#$R@@166|) TyType)) (= (Tclass._System.___hTotalFunc2OSO_0 (Tclass._System.___hTotalFunc2OSO |#$T0@@153| |#$T1@@137| |#$R@@166|)) |#$T0@@153|)) :qid |unknown.0:0| :skolemid |1126| :pattern ( (Tclass._System.___hTotalFunc2OSO |#$T0@@153| |#$T1@@137| |#$R@@166|)) )))
(assert (forall ((arg0@@308 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2OSO_1 arg0@@308)) TyType) :qid |funType:Tclass._System.___hTotalFunc2OSO_1| :pattern ( (Tclass._System.___hTotalFunc2OSO_1 arg0@@308)) )))
(assert (forall ((|#$T0@@154| T@U) (|#$T1@@138| T@U) (|#$R@@167| T@U) ) (!  (=> (and (and (= (type |#$T0@@154|) TyType) (= (type |#$T1@@138|) TyType)) (= (type |#$R@@167|) TyType)) (= (Tclass._System.___hTotalFunc2OSO_1 (Tclass._System.___hTotalFunc2OSO |#$T0@@154| |#$T1@@138| |#$R@@167|)) |#$T1@@138|)) :qid |unknown.0:0| :skolemid |1127| :pattern ( (Tclass._System.___hTotalFunc2OSO |#$T0@@154| |#$T1@@138| |#$R@@167|)) )))
(assert (forall ((arg0@@309 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2OSO_2 arg0@@309)) TyType) :qid |funType:Tclass._System.___hTotalFunc2OSO_2| :pattern ( (Tclass._System.___hTotalFunc2OSO_2 arg0@@309)) )))
(assert (forall ((|#$T0@@155| T@U) (|#$T1@@139| T@U) (|#$R@@168| T@U) ) (!  (=> (and (and (= (type |#$T0@@155|) TyType) (= (type |#$T1@@139|) TyType)) (= (type |#$R@@168|) TyType)) (= (Tclass._System.___hTotalFunc2OSO_2 (Tclass._System.___hTotalFunc2OSO |#$T0@@155| |#$T1@@139| |#$R@@168|)) |#$R@@168|)) :qid |unknown.0:0| :skolemid |1128| :pattern ( (Tclass._System.___hTotalFunc2OSO |#$T0@@155| |#$T1@@139| |#$R@@168|)) )))
(assert (forall ((|#$T0@@156| T@U) (|#$T1@@140| T@U) (|#$R@@169| T@U) (bx@@91 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@156|) TyType) (= (type |#$T1@@140|) TyType)) (= (type |#$R@@169|) TyType)) (= (type bx@@91) BoxType)) ($IsBox bx@@91 (Tclass._System.___hTotalFunc2OSO |#$T0@@156| |#$T1@@140| |#$R@@169|))) (and (= ($Box ($Unbox HandleTypeType bx@@91)) bx@@91) ($Is ($Unbox HandleTypeType bx@@91) (Tclass._System.___hTotalFunc2OSO |#$T0@@156| |#$T1@@140| |#$R@@169|)))) :qid |unknown.0:0| :skolemid |1129| :pattern ( ($IsBox bx@@91 (Tclass._System.___hTotalFunc2OSO |#$T0@@156| |#$T1@@140| |#$R@@169|))) )))
(assert (forall ((|#$T0@@157| T@U) (|#$T1@@141| T@U) (|#$R@@170| T@U) (|f#0@@29| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@157|) TyType) (= (type |#$T1@@141|) TyType)) (= (type |#$R@@170|) TyType)) (= (type |f#0@@29|) HandleTypeType)) (= ($Is |f#0@@29| (Tclass._System.___hTotalFunc2OSO |#$T0@@157| |#$T1@@141| |#$R@@170|))  (and ($Is |f#0@@29| (Tclass._System.___hPartialFunc2OSO |#$T0@@157| |#$T1@@141| |#$R@@170|)) (forall ((|x0#0@@12| T@U) (|x1#0@@10| T@U) ) (!  (=> (and (and (= (type |x0#0@@12|) BoxType) (= (type |x1#0@@10|) BoxType)) (and ($IsBox |x0#0@@12| |#$T0@@157|) ($IsBox |x1#0@@10| |#$T1@@141|))) (Requires2 |#$T0@@157| |#$T1@@141| |#$R@@170| $OneHeap |f#0@@29| |x0#0@@12| |x1#0@@10|)) :qid |unknown.0:0| :skolemid |1130| :no-pattern (type |x0#0@@12|) :no-pattern (type |x1#0@@10|) :no-pattern (U_2_int |x0#0@@12|) :no-pattern (U_2_bool |x0#0@@12|) :no-pattern (U_2_int |x1#0@@10|) :no-pattern (U_2_bool |x1#0@@10|) ))))) :qid |unknown.0:0| :skolemid |1131| :pattern ( ($Is |f#0@@29| (Tclass._System.___hTotalFunc2OSO |#$T0@@157| |#$T1@@141| |#$R@@170|))) )))
(assert (forall ((|#$T0@@158| T@U) (|#$T1@@142| T@U) (|#$R@@171| T@U) (|f#0@@30| T@U) ($h@@26 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@158|) TyType) (= (type |#$T1@@142|) TyType)) (= (type |#$R@@171|) TyType)) (= (type |f#0@@30|) HandleTypeType)) (= (type $h@@26) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@30| (Tclass._System.___hTotalFunc2OSO |#$T0@@158| |#$T1@@142| |#$R@@171|) $h@@26) ($IsAlloc |f#0@@30| (Tclass._System.___hPartialFunc2OSO |#$T0@@158| |#$T1@@142| |#$R@@171|) $h@@26))) :qid |unknown.0:0| :skolemid |1132| :pattern ( ($IsAlloc |f#0@@30| (Tclass._System.___hTotalFunc2OSO |#$T0@@158| |#$T1@@142| |#$R@@171|) $h@@26)) )))
(assert (forall ((arg0@@310 T@U) (arg1@@145 T@U) (arg2@@97 T@U) (arg3@@70 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO arg0@@310 arg1@@145 arg2@@97 arg3@@70)) TyType) :qid |funType:Tclass._System.___hFunc3LLOO| :pattern ( (Tclass._System.___hFunc3LLOO arg0@@310 arg1@@145 arg2@@97 arg3@@70)) )))
(assert (forall ((|#$T0@@159| T@U) (|#$T1@@143| T@U) (|#$T2@@105| T@U) (|#$R@@172| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@159|) TyType) (= (type |#$T1@@143|) TyType)) (= (type |#$T2@@105|) TyType)) (= (type |#$R@@172|) TyType)) (and (= (Tag (Tclass._System.___hFunc3LLOO |#$T0@@159| |#$T1@@143| |#$T2@@105| |#$R@@172|)) Tagclass._System.___hFunc3LLOO) (= (TagFamily (Tclass._System.___hFunc3LLOO |#$T0@@159| |#$T1@@143| |#$T2@@105| |#$R@@172|)) |tytagFamily$_#Func3LLOO|))) :qid |unknown.0:0| :skolemid |1133| :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@159| |#$T1@@143| |#$T2@@105| |#$R@@172|)) )))
(assert (forall ((arg0@@311 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO_0 arg0@@311)) TyType) :qid |funType:Tclass._System.___hFunc3LLOO_0| :pattern ( (Tclass._System.___hFunc3LLOO_0 arg0@@311)) )))
(assert (forall ((|#$T0@@160| T@U) (|#$T1@@144| T@U) (|#$T2@@106| T@U) (|#$R@@173| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@160|) TyType) (= (type |#$T1@@144|) TyType)) (= (type |#$T2@@106|) TyType)) (= (type |#$R@@173|) TyType)) (= (Tclass._System.___hFunc3LLOO_0 (Tclass._System.___hFunc3LLOO |#$T0@@160| |#$T1@@144| |#$T2@@106| |#$R@@173|)) |#$T0@@160|)) :qid |unknown.0:0| :skolemid |1134| :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@160| |#$T1@@144| |#$T2@@106| |#$R@@173|)) )))
(assert (forall ((arg0@@312 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO_1 arg0@@312)) TyType) :qid |funType:Tclass._System.___hFunc3LLOO_1| :pattern ( (Tclass._System.___hFunc3LLOO_1 arg0@@312)) )))
(assert (forall ((|#$T0@@161| T@U) (|#$T1@@145| T@U) (|#$T2@@107| T@U) (|#$R@@174| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@161|) TyType) (= (type |#$T1@@145|) TyType)) (= (type |#$T2@@107|) TyType)) (= (type |#$R@@174|) TyType)) (= (Tclass._System.___hFunc3LLOO_1 (Tclass._System.___hFunc3LLOO |#$T0@@161| |#$T1@@145| |#$T2@@107| |#$R@@174|)) |#$T1@@145|)) :qid |unknown.0:0| :skolemid |1135| :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@161| |#$T1@@145| |#$T2@@107| |#$R@@174|)) )))
(assert (forall ((arg0@@313 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO_2 arg0@@313)) TyType) :qid |funType:Tclass._System.___hFunc3LLOO_2| :pattern ( (Tclass._System.___hFunc3LLOO_2 arg0@@313)) )))
(assert (forall ((|#$T0@@162| T@U) (|#$T1@@146| T@U) (|#$T2@@108| T@U) (|#$R@@175| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@162|) TyType) (= (type |#$T1@@146|) TyType)) (= (type |#$T2@@108|) TyType)) (= (type |#$R@@175|) TyType)) (= (Tclass._System.___hFunc3LLOO_2 (Tclass._System.___hFunc3LLOO |#$T0@@162| |#$T1@@146| |#$T2@@108| |#$R@@175|)) |#$T2@@108|)) :qid |unknown.0:0| :skolemid |1136| :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@162| |#$T1@@146| |#$T2@@108| |#$R@@175|)) )))
(assert (forall ((arg0@@314 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO_3 arg0@@314)) TyType) :qid |funType:Tclass._System.___hFunc3LLOO_3| :pattern ( (Tclass._System.___hFunc3LLOO_3 arg0@@314)) )))
(assert (forall ((|#$T0@@163| T@U) (|#$T1@@147| T@U) (|#$T2@@109| T@U) (|#$R@@176| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@163|) TyType) (= (type |#$T1@@147|) TyType)) (= (type |#$T2@@109|) TyType)) (= (type |#$R@@176|) TyType)) (= (Tclass._System.___hFunc3LLOO_3 (Tclass._System.___hFunc3LLOO |#$T0@@163| |#$T1@@147| |#$T2@@109| |#$R@@176|)) |#$R@@176|)) :qid |unknown.0:0| :skolemid |1137| :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@163| |#$T1@@147| |#$T2@@109| |#$R@@176|)) )))
(assert (forall ((|#$T0@@164| T@U) (|#$T1@@148| T@U) (|#$T2@@110| T@U) (|#$R@@177| T@U) (bx@@92 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@164|) TyType) (= (type |#$T1@@148|) TyType)) (= (type |#$T2@@110|) TyType)) (= (type |#$R@@177|) TyType)) (= (type bx@@92) BoxType)) ($IsBox bx@@92 (Tclass._System.___hFunc3LLOO |#$T0@@164| |#$T1@@148| |#$T2@@110| |#$R@@177|))) (and (= ($Box ($Unbox HandleTypeType bx@@92)) bx@@92) ($Is ($Unbox HandleTypeType bx@@92) (Tclass._System.___hFunc3LLOO |#$T0@@164| |#$T1@@148| |#$T2@@110| |#$R@@177|)))) :qid |unknown.0:0| :skolemid |1138| :pattern ( ($IsBox bx@@92 (Tclass._System.___hFunc3LLOO |#$T0@@164| |#$T1@@148| |#$T2@@110| |#$R@@177|))) )))
(assert (forall ((arg0@@315 T@U) (arg1@@146 T@U) (arg2@@98 T@U) (arg3@@71 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO arg0@@315 arg1@@146 arg2@@98 arg3@@71)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOO| :pattern ( (Tclass._System.___hPartialFunc3LLOO arg0@@315 arg1@@146 arg2@@98 arg3@@71)) )))
(assert (forall ((|#$T0@@165| T@U) (|#$T1@@149| T@U) (|#$T2@@111| T@U) (|#$R@@178| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@165|) TyType) (= (type |#$T1@@149|) TyType)) (= (type |#$T2@@111|) TyType)) (= (type |#$R@@178|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc3LLOO |#$T0@@165| |#$T1@@149| |#$T2@@111| |#$R@@178|)) Tagclass._System.___hPartialFunc3LLOO) (= (TagFamily (Tclass._System.___hPartialFunc3LLOO |#$T0@@165| |#$T1@@149| |#$T2@@111| |#$R@@178|)) |tytagFamily$_#PartialFunc3LLOO|))) :qid |unknown.0:0| :skolemid |1139| :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@165| |#$T1@@149| |#$T2@@111| |#$R@@178|)) )))
(assert (forall ((arg0@@316 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO_0 arg0@@316)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOO_0| :pattern ( (Tclass._System.___hPartialFunc3LLOO_0 arg0@@316)) )))
(assert (forall ((|#$T0@@166| T@U) (|#$T1@@150| T@U) (|#$T2@@112| T@U) (|#$R@@179| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@166|) TyType) (= (type |#$T1@@150|) TyType)) (= (type |#$T2@@112|) TyType)) (= (type |#$R@@179|) TyType)) (= (Tclass._System.___hPartialFunc3LLOO_0 (Tclass._System.___hPartialFunc3LLOO |#$T0@@166| |#$T1@@150| |#$T2@@112| |#$R@@179|)) |#$T0@@166|)) :qid |unknown.0:0| :skolemid |1140| :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@166| |#$T1@@150| |#$T2@@112| |#$R@@179|)) )))
(assert (forall ((arg0@@317 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO_1 arg0@@317)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOO_1| :pattern ( (Tclass._System.___hPartialFunc3LLOO_1 arg0@@317)) )))
(assert (forall ((|#$T0@@167| T@U) (|#$T1@@151| T@U) (|#$T2@@113| T@U) (|#$R@@180| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@167|) TyType) (= (type |#$T1@@151|) TyType)) (= (type |#$T2@@113|) TyType)) (= (type |#$R@@180|) TyType)) (= (Tclass._System.___hPartialFunc3LLOO_1 (Tclass._System.___hPartialFunc3LLOO |#$T0@@167| |#$T1@@151| |#$T2@@113| |#$R@@180|)) |#$T1@@151|)) :qid |unknown.0:0| :skolemid |1141| :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@167| |#$T1@@151| |#$T2@@113| |#$R@@180|)) )))
(assert (forall ((arg0@@318 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO_2 arg0@@318)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOO_2| :pattern ( (Tclass._System.___hPartialFunc3LLOO_2 arg0@@318)) )))
(assert (forall ((|#$T0@@168| T@U) (|#$T1@@152| T@U) (|#$T2@@114| T@U) (|#$R@@181| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@168|) TyType) (= (type |#$T1@@152|) TyType)) (= (type |#$T2@@114|) TyType)) (= (type |#$R@@181|) TyType)) (= (Tclass._System.___hPartialFunc3LLOO_2 (Tclass._System.___hPartialFunc3LLOO |#$T0@@168| |#$T1@@152| |#$T2@@114| |#$R@@181|)) |#$T2@@114|)) :qid |unknown.0:0| :skolemid |1142| :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@168| |#$T1@@152| |#$T2@@114| |#$R@@181|)) )))
(assert (forall ((arg0@@319 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO_3 arg0@@319)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOO_3| :pattern ( (Tclass._System.___hPartialFunc3LLOO_3 arg0@@319)) )))
(assert (forall ((|#$T0@@169| T@U) (|#$T1@@153| T@U) (|#$T2@@115| T@U) (|#$R@@182| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@169|) TyType) (= (type |#$T1@@153|) TyType)) (= (type |#$T2@@115|) TyType)) (= (type |#$R@@182|) TyType)) (= (Tclass._System.___hPartialFunc3LLOO_3 (Tclass._System.___hPartialFunc3LLOO |#$T0@@169| |#$T1@@153| |#$T2@@115| |#$R@@182|)) |#$R@@182|)) :qid |unknown.0:0| :skolemid |1143| :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@169| |#$T1@@153| |#$T2@@115| |#$R@@182|)) )))
(assert (forall ((|#$T0@@170| T@U) (|#$T1@@154| T@U) (|#$T2@@116| T@U) (|#$R@@183| T@U) (bx@@93 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@170|) TyType) (= (type |#$T1@@154|) TyType)) (= (type |#$T2@@116|) TyType)) (= (type |#$R@@183|) TyType)) (= (type bx@@93) BoxType)) ($IsBox bx@@93 (Tclass._System.___hPartialFunc3LLOO |#$T0@@170| |#$T1@@154| |#$T2@@116| |#$R@@183|))) (and (= ($Box ($Unbox HandleTypeType bx@@93)) bx@@93) ($Is ($Unbox HandleTypeType bx@@93) (Tclass._System.___hPartialFunc3LLOO |#$T0@@170| |#$T1@@154| |#$T2@@116| |#$R@@183|)))) :qid |unknown.0:0| :skolemid |1144| :pattern ( ($IsBox bx@@93 (Tclass._System.___hPartialFunc3LLOO |#$T0@@170| |#$T1@@154| |#$T2@@116| |#$R@@183|))) )))
(assert (forall ((|#$T0@@171| T@U) (|#$T1@@155| T@U) (|#$T2@@117| T@U) (|#$R@@184| T@U) (|f#0@@31| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@171|) TyType) (= (type |#$T1@@155|) TyType)) (= (type |#$T2@@117|) TyType)) (= (type |#$R@@184|) TyType)) (= (type |f#0@@31|) HandleTypeType)) (= ($Is |f#0@@31| (Tclass._System.___hPartialFunc3LLOO |#$T0@@171| |#$T1@@155| |#$T2@@117| |#$R@@184|))  (and ($Is |f#0@@31| (Tclass._System.___hFunc3LLOO |#$T0@@171| |#$T1@@155| |#$T2@@117| |#$R@@184|)) (forall ((|x0#0@@13| T@U) (|x1#0@@11| T@U) (|x2#0@@7| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@13|) BoxType) (= (type |x1#0@@11|) BoxType)) (= (type |x2#0@@7|) BoxType)) (and (and ($IsBox |x0#0@@13| |#$T0@@171|) ($IsBox |x1#0@@11| |#$T1@@155|)) ($IsBox |x2#0@@7| |#$T2@@117|))) (|Set#Equal| (Reads3 |#$T0@@171| |#$T1@@155| |#$T2@@117| |#$R@@184| $OneHeap |f#0@@31| |x0#0@@13| |x1#0@@11| |x2#0@@7|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1145| :no-pattern (type |x0#0@@13|) :no-pattern (type |x1#0@@11|) :no-pattern (type |x2#0@@7|) :no-pattern (U_2_int |x0#0@@13|) :no-pattern (U_2_bool |x0#0@@13|) :no-pattern (U_2_int |x1#0@@11|) :no-pattern (U_2_bool |x1#0@@11|) :no-pattern (U_2_int |x2#0@@7|) :no-pattern (U_2_bool |x2#0@@7|) ))))) :qid |unknown.0:0| :skolemid |1146| :pattern ( ($Is |f#0@@31| (Tclass._System.___hPartialFunc3LLOO |#$T0@@171| |#$T1@@155| |#$T2@@117| |#$R@@184|))) )))
(assert (forall ((|#$T0@@172| T@U) (|#$T1@@156| T@U) (|#$T2@@118| T@U) (|#$R@@185| T@U) (|f#0@@32| T@U) ($h@@27 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@172|) TyType) (= (type |#$T1@@156|) TyType)) (= (type |#$T2@@118|) TyType)) (= (type |#$R@@185|) TyType)) (= (type |f#0@@32|) HandleTypeType)) (= (type $h@@27) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@32| (Tclass._System.___hPartialFunc3LLOO |#$T0@@172| |#$T1@@156| |#$T2@@118| |#$R@@185|) $h@@27) ($IsAlloc |f#0@@32| (Tclass._System.___hFunc3LLOO |#$T0@@172| |#$T1@@156| |#$T2@@118| |#$R@@185|) $h@@27))) :qid |unknown.0:0| :skolemid |1147| :pattern ( ($IsAlloc |f#0@@32| (Tclass._System.___hPartialFunc3LLOO |#$T0@@172| |#$T1@@156| |#$T2@@118| |#$R@@185|) $h@@27)) )))
(assert (forall ((arg0@@320 T@U) (arg1@@147 T@U) (arg2@@99 T@U) (arg3@@72 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO arg0@@320 arg1@@147 arg2@@99 arg3@@72)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOO| :pattern ( (Tclass._System.___hTotalFunc3LLOO arg0@@320 arg1@@147 arg2@@99 arg3@@72)) )))
(assert (forall ((|#$T0@@173| T@U) (|#$T1@@157| T@U) (|#$T2@@119| T@U) (|#$R@@186| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@173|) TyType) (= (type |#$T1@@157|) TyType)) (= (type |#$T2@@119|) TyType)) (= (type |#$R@@186|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc3LLOO |#$T0@@173| |#$T1@@157| |#$T2@@119| |#$R@@186|)) Tagclass._System.___hTotalFunc3LLOO) (= (TagFamily (Tclass._System.___hTotalFunc3LLOO |#$T0@@173| |#$T1@@157| |#$T2@@119| |#$R@@186|)) |tytagFamily$_#TotalFunc3LLOO|))) :qid |unknown.0:0| :skolemid |1148| :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@173| |#$T1@@157| |#$T2@@119| |#$R@@186|)) )))
(assert (forall ((arg0@@321 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO_0 arg0@@321)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOO_0| :pattern ( (Tclass._System.___hTotalFunc3LLOO_0 arg0@@321)) )))
(assert (forall ((|#$T0@@174| T@U) (|#$T1@@158| T@U) (|#$T2@@120| T@U) (|#$R@@187| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@174|) TyType) (= (type |#$T1@@158|) TyType)) (= (type |#$T2@@120|) TyType)) (= (type |#$R@@187|) TyType)) (= (Tclass._System.___hTotalFunc3LLOO_0 (Tclass._System.___hTotalFunc3LLOO |#$T0@@174| |#$T1@@158| |#$T2@@120| |#$R@@187|)) |#$T0@@174|)) :qid |unknown.0:0| :skolemid |1149| :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@174| |#$T1@@158| |#$T2@@120| |#$R@@187|)) )))
(assert (forall ((arg0@@322 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO_1 arg0@@322)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOO_1| :pattern ( (Tclass._System.___hTotalFunc3LLOO_1 arg0@@322)) )))
(assert (forall ((|#$T0@@175| T@U) (|#$T1@@159| T@U) (|#$T2@@121| T@U) (|#$R@@188| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@175|) TyType) (= (type |#$T1@@159|) TyType)) (= (type |#$T2@@121|) TyType)) (= (type |#$R@@188|) TyType)) (= (Tclass._System.___hTotalFunc3LLOO_1 (Tclass._System.___hTotalFunc3LLOO |#$T0@@175| |#$T1@@159| |#$T2@@121| |#$R@@188|)) |#$T1@@159|)) :qid |unknown.0:0| :skolemid |1150| :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@175| |#$T1@@159| |#$T2@@121| |#$R@@188|)) )))
(assert (forall ((arg0@@323 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO_2 arg0@@323)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOO_2| :pattern ( (Tclass._System.___hTotalFunc3LLOO_2 arg0@@323)) )))
(assert (forall ((|#$T0@@176| T@U) (|#$T1@@160| T@U) (|#$T2@@122| T@U) (|#$R@@189| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@176|) TyType) (= (type |#$T1@@160|) TyType)) (= (type |#$T2@@122|) TyType)) (= (type |#$R@@189|) TyType)) (= (Tclass._System.___hTotalFunc3LLOO_2 (Tclass._System.___hTotalFunc3LLOO |#$T0@@176| |#$T1@@160| |#$T2@@122| |#$R@@189|)) |#$T2@@122|)) :qid |unknown.0:0| :skolemid |1151| :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@176| |#$T1@@160| |#$T2@@122| |#$R@@189|)) )))
(assert (forall ((arg0@@324 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO_3 arg0@@324)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOO_3| :pattern ( (Tclass._System.___hTotalFunc3LLOO_3 arg0@@324)) )))
(assert (forall ((|#$T0@@177| T@U) (|#$T1@@161| T@U) (|#$T2@@123| T@U) (|#$R@@190| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@177|) TyType) (= (type |#$T1@@161|) TyType)) (= (type |#$T2@@123|) TyType)) (= (type |#$R@@190|) TyType)) (= (Tclass._System.___hTotalFunc3LLOO_3 (Tclass._System.___hTotalFunc3LLOO |#$T0@@177| |#$T1@@161| |#$T2@@123| |#$R@@190|)) |#$R@@190|)) :qid |unknown.0:0| :skolemid |1152| :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@177| |#$T1@@161| |#$T2@@123| |#$R@@190|)) )))
(assert (forall ((|#$T0@@178| T@U) (|#$T1@@162| T@U) (|#$T2@@124| T@U) (|#$R@@191| T@U) (bx@@94 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@178|) TyType) (= (type |#$T1@@162|) TyType)) (= (type |#$T2@@124|) TyType)) (= (type |#$R@@191|) TyType)) (= (type bx@@94) BoxType)) ($IsBox bx@@94 (Tclass._System.___hTotalFunc3LLOO |#$T0@@178| |#$T1@@162| |#$T2@@124| |#$R@@191|))) (and (= ($Box ($Unbox HandleTypeType bx@@94)) bx@@94) ($Is ($Unbox HandleTypeType bx@@94) (Tclass._System.___hTotalFunc3LLOO |#$T0@@178| |#$T1@@162| |#$T2@@124| |#$R@@191|)))) :qid |unknown.0:0| :skolemid |1153| :pattern ( ($IsBox bx@@94 (Tclass._System.___hTotalFunc3LLOO |#$T0@@178| |#$T1@@162| |#$T2@@124| |#$R@@191|))) )))
(assert (forall ((|#$T0@@179| T@U) (|#$T1@@163| T@U) (|#$T2@@125| T@U) (|#$R@@192| T@U) (|f#0@@33| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@179|) TyType) (= (type |#$T1@@163|) TyType)) (= (type |#$T2@@125|) TyType)) (= (type |#$R@@192|) TyType)) (= (type |f#0@@33|) HandleTypeType)) (= ($Is |f#0@@33| (Tclass._System.___hTotalFunc3LLOO |#$T0@@179| |#$T1@@163| |#$T2@@125| |#$R@@192|))  (and ($Is |f#0@@33| (Tclass._System.___hPartialFunc3LLOO |#$T0@@179| |#$T1@@163| |#$T2@@125| |#$R@@192|)) (forall ((|x0#0@@14| T@U) (|x1#0@@12| T@U) (|x2#0@@8| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@14|) BoxType) (= (type |x1#0@@12|) BoxType)) (= (type |x2#0@@8|) BoxType)) (and (and ($IsBox |x0#0@@14| |#$T0@@179|) ($IsBox |x1#0@@12| |#$T1@@163|)) ($IsBox |x2#0@@8| |#$T2@@125|))) (Requires3 |#$T0@@179| |#$T1@@163| |#$T2@@125| |#$R@@192| $OneHeap |f#0@@33| |x0#0@@14| |x1#0@@12| |x2#0@@8|)) :qid |unknown.0:0| :skolemid |1154| :no-pattern (type |x0#0@@14|) :no-pattern (type |x1#0@@12|) :no-pattern (type |x2#0@@8|) :no-pattern (U_2_int |x0#0@@14|) :no-pattern (U_2_bool |x0#0@@14|) :no-pattern (U_2_int |x1#0@@12|) :no-pattern (U_2_bool |x1#0@@12|) :no-pattern (U_2_int |x2#0@@8|) :no-pattern (U_2_bool |x2#0@@8|) ))))) :qid |unknown.0:0| :skolemid |1155| :pattern ( ($Is |f#0@@33| (Tclass._System.___hTotalFunc3LLOO |#$T0@@179| |#$T1@@163| |#$T2@@125| |#$R@@192|))) )))
(assert (forall ((|#$T0@@180| T@U) (|#$T1@@164| T@U) (|#$T2@@126| T@U) (|#$R@@193| T@U) (|f#0@@34| T@U) ($h@@28 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@180|) TyType) (= (type |#$T1@@164|) TyType)) (= (type |#$T2@@126|) TyType)) (= (type |#$R@@193|) TyType)) (= (type |f#0@@34|) HandleTypeType)) (= (type $h@@28) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@34| (Tclass._System.___hTotalFunc3LLOO |#$T0@@180| |#$T1@@164| |#$T2@@126| |#$R@@193|) $h@@28) ($IsAlloc |f#0@@34| (Tclass._System.___hPartialFunc3LLOO |#$T0@@180| |#$T1@@164| |#$T2@@126| |#$R@@193|) $h@@28))) :qid |unknown.0:0| :skolemid |1156| :pattern ( ($IsAlloc |f#0@@34| (Tclass._System.___hTotalFunc3LLOO |#$T0@@180| |#$T1@@164| |#$T2@@126| |#$R@@193|) $h@@28)) )))
(assert (forall ((arg0@@325 T@U) (arg1@@148 T@U) ) (! (= (type (Tclass._System.___hFunc1OS arg0@@325 arg1@@148)) TyType) :qid |funType:Tclass._System.___hFunc1OS| :pattern ( (Tclass._System.___hFunc1OS arg0@@325 arg1@@148)) )))
(assert (forall ((|#$T0@@181| T@U) (|#$R@@194| T@U) ) (!  (=> (and (= (type |#$T0@@181|) TyType) (= (type |#$R@@194|) TyType)) (and (= (Tag (Tclass._System.___hFunc1OS |#$T0@@181| |#$R@@194|)) Tagclass._System.___hFunc1OS) (= (TagFamily (Tclass._System.___hFunc1OS |#$T0@@181| |#$R@@194|)) |tytagFamily$_#Func1OS|))) :qid |unknown.0:0| :skolemid |1157| :pattern ( (Tclass._System.___hFunc1OS |#$T0@@181| |#$R@@194|)) )))
(assert (forall ((arg0@@326 T@U) ) (! (= (type (Tclass._System.___hFunc1OS_0 arg0@@326)) TyType) :qid |funType:Tclass._System.___hFunc1OS_0| :pattern ( (Tclass._System.___hFunc1OS_0 arg0@@326)) )))
(assert (forall ((|#$T0@@182| T@U) (|#$R@@195| T@U) ) (!  (=> (and (= (type |#$T0@@182|) TyType) (= (type |#$R@@195|) TyType)) (= (Tclass._System.___hFunc1OS_0 (Tclass._System.___hFunc1OS |#$T0@@182| |#$R@@195|)) |#$T0@@182|)) :qid |unknown.0:0| :skolemid |1158| :pattern ( (Tclass._System.___hFunc1OS |#$T0@@182| |#$R@@195|)) )))
(assert (forall ((arg0@@327 T@U) ) (! (= (type (Tclass._System.___hFunc1OS_1 arg0@@327)) TyType) :qid |funType:Tclass._System.___hFunc1OS_1| :pattern ( (Tclass._System.___hFunc1OS_1 arg0@@327)) )))
(assert (forall ((|#$T0@@183| T@U) (|#$R@@196| T@U) ) (!  (=> (and (= (type |#$T0@@183|) TyType) (= (type |#$R@@196|) TyType)) (= (Tclass._System.___hFunc1OS_1 (Tclass._System.___hFunc1OS |#$T0@@183| |#$R@@196|)) |#$R@@196|)) :qid |unknown.0:0| :skolemid |1159| :pattern ( (Tclass._System.___hFunc1OS |#$T0@@183| |#$R@@196|)) )))
(assert (forall ((|#$T0@@184| T@U) (|#$R@@197| T@U) (bx@@95 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@184|) TyType) (= (type |#$R@@197|) TyType)) (= (type bx@@95) BoxType)) ($IsBox bx@@95 (Tclass._System.___hFunc1OS |#$T0@@184| |#$R@@197|))) (and (= ($Box ($Unbox HandleTypeType bx@@95)) bx@@95) ($Is ($Unbox HandleTypeType bx@@95) (Tclass._System.___hFunc1OS |#$T0@@184| |#$R@@197|)))) :qid |unknown.0:0| :skolemid |1160| :pattern ( ($IsBox bx@@95 (Tclass._System.___hFunc1OS |#$T0@@184| |#$R@@197|))) )))
(assert (forall ((arg0@@328 T@U) (arg1@@149 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OS arg0@@328 arg1@@149)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OS| :pattern ( (Tclass._System.___hPartialFunc1OS arg0@@328 arg1@@149)) )))
(assert (forall ((|#$T0@@185| T@U) (|#$R@@198| T@U) ) (!  (=> (and (= (type |#$T0@@185|) TyType) (= (type |#$R@@198|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1OS |#$T0@@185| |#$R@@198|)) Tagclass._System.___hPartialFunc1OS) (= (TagFamily (Tclass._System.___hPartialFunc1OS |#$T0@@185| |#$R@@198|)) |tytagFamily$_#PartialFunc1OS|))) :qid |unknown.0:0| :skolemid |1161| :pattern ( (Tclass._System.___hPartialFunc1OS |#$T0@@185| |#$R@@198|)) )))
(assert (forall ((arg0@@329 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OS_0 arg0@@329)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OS_0| :pattern ( (Tclass._System.___hPartialFunc1OS_0 arg0@@329)) )))
(assert (forall ((|#$T0@@186| T@U) (|#$R@@199| T@U) ) (!  (=> (and (= (type |#$T0@@186|) TyType) (= (type |#$R@@199|) TyType)) (= (Tclass._System.___hPartialFunc1OS_0 (Tclass._System.___hPartialFunc1OS |#$T0@@186| |#$R@@199|)) |#$T0@@186|)) :qid |unknown.0:0| :skolemid |1162| :pattern ( (Tclass._System.___hPartialFunc1OS |#$T0@@186| |#$R@@199|)) )))
(assert (forall ((arg0@@330 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OS_1 arg0@@330)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OS_1| :pattern ( (Tclass._System.___hPartialFunc1OS_1 arg0@@330)) )))
(assert (forall ((|#$T0@@187| T@U) (|#$R@@200| T@U) ) (!  (=> (and (= (type |#$T0@@187|) TyType) (= (type |#$R@@200|) TyType)) (= (Tclass._System.___hPartialFunc1OS_1 (Tclass._System.___hPartialFunc1OS |#$T0@@187| |#$R@@200|)) |#$R@@200|)) :qid |unknown.0:0| :skolemid |1163| :pattern ( (Tclass._System.___hPartialFunc1OS |#$T0@@187| |#$R@@200|)) )))
(assert (forall ((|#$T0@@188| T@U) (|#$R@@201| T@U) (bx@@96 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@188|) TyType) (= (type |#$R@@201|) TyType)) (= (type bx@@96) BoxType)) ($IsBox bx@@96 (Tclass._System.___hPartialFunc1OS |#$T0@@188| |#$R@@201|))) (and (= ($Box ($Unbox HandleTypeType bx@@96)) bx@@96) ($Is ($Unbox HandleTypeType bx@@96) (Tclass._System.___hPartialFunc1OS |#$T0@@188| |#$R@@201|)))) :qid |unknown.0:0| :skolemid |1164| :pattern ( ($IsBox bx@@96 (Tclass._System.___hPartialFunc1OS |#$T0@@188| |#$R@@201|))) )))
(assert (forall ((|#$T0@@189| T@U) (|#$R@@202| T@U) (|f#0@@35| T@U) ) (!  (=> (and (and (= (type |#$T0@@189|) TyType) (= (type |#$R@@202|) TyType)) (= (type |f#0@@35|) HandleTypeType)) (= ($Is |f#0@@35| (Tclass._System.___hPartialFunc1OS |#$T0@@189| |#$R@@202|))  (and ($Is |f#0@@35| (Tclass._System.___hFunc1OS |#$T0@@189| |#$R@@202|)) (forall ((|x0#0@@15| T@U) ) (!  (=> (and (= (type |x0#0@@15|) BoxType) ($IsBox |x0#0@@15| |#$T0@@189|)) (|Set#Equal| (Reads1 |#$T0@@189| |#$R@@202| $OneHeap |f#0@@35| |x0#0@@15|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1165| :no-pattern (type |x0#0@@15|) :no-pattern (U_2_int |x0#0@@15|) :no-pattern (U_2_bool |x0#0@@15|) ))))) :qid |unknown.0:0| :skolemid |1166| :pattern ( ($Is |f#0@@35| (Tclass._System.___hPartialFunc1OS |#$T0@@189| |#$R@@202|))) )))
(assert (forall ((|#$T0@@190| T@U) (|#$R@@203| T@U) (|f#0@@36| T@U) ($h@@29 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@190|) TyType) (= (type |#$R@@203|) TyType)) (= (type |f#0@@36|) HandleTypeType)) (= (type $h@@29) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@36| (Tclass._System.___hPartialFunc1OS |#$T0@@190| |#$R@@203|) $h@@29) ($IsAlloc |f#0@@36| (Tclass._System.___hFunc1OS |#$T0@@190| |#$R@@203|) $h@@29))) :qid |unknown.0:0| :skolemid |1167| :pattern ( ($IsAlloc |f#0@@36| (Tclass._System.___hPartialFunc1OS |#$T0@@190| |#$R@@203|) $h@@29)) )))
(assert (forall ((arg0@@331 T@U) (arg1@@150 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OS arg0@@331 arg1@@150)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OS| :pattern ( (Tclass._System.___hTotalFunc1OS arg0@@331 arg1@@150)) )))
(assert (forall ((|#$T0@@191| T@U) (|#$R@@204| T@U) ) (!  (=> (and (= (type |#$T0@@191|) TyType) (= (type |#$R@@204|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1OS |#$T0@@191| |#$R@@204|)) Tagclass._System.___hTotalFunc1OS) (= (TagFamily (Tclass._System.___hTotalFunc1OS |#$T0@@191| |#$R@@204|)) |tytagFamily$_#TotalFunc1OS|))) :qid |unknown.0:0| :skolemid |1168| :pattern ( (Tclass._System.___hTotalFunc1OS |#$T0@@191| |#$R@@204|)) )))
(assert (forall ((arg0@@332 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OS_0 arg0@@332)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OS_0| :pattern ( (Tclass._System.___hTotalFunc1OS_0 arg0@@332)) )))
(assert (forall ((|#$T0@@192| T@U) (|#$R@@205| T@U) ) (!  (=> (and (= (type |#$T0@@192|) TyType) (= (type |#$R@@205|) TyType)) (= (Tclass._System.___hTotalFunc1OS_0 (Tclass._System.___hTotalFunc1OS |#$T0@@192| |#$R@@205|)) |#$T0@@192|)) :qid |unknown.0:0| :skolemid |1169| :pattern ( (Tclass._System.___hTotalFunc1OS |#$T0@@192| |#$R@@205|)) )))
(assert (forall ((arg0@@333 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OS_1 arg0@@333)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OS_1| :pattern ( (Tclass._System.___hTotalFunc1OS_1 arg0@@333)) )))
(assert (forall ((|#$T0@@193| T@U) (|#$R@@206| T@U) ) (!  (=> (and (= (type |#$T0@@193|) TyType) (= (type |#$R@@206|) TyType)) (= (Tclass._System.___hTotalFunc1OS_1 (Tclass._System.___hTotalFunc1OS |#$T0@@193| |#$R@@206|)) |#$R@@206|)) :qid |unknown.0:0| :skolemid |1170| :pattern ( (Tclass._System.___hTotalFunc1OS |#$T0@@193| |#$R@@206|)) )))
(assert (forall ((|#$T0@@194| T@U) (|#$R@@207| T@U) (bx@@97 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@194|) TyType) (= (type |#$R@@207|) TyType)) (= (type bx@@97) BoxType)) ($IsBox bx@@97 (Tclass._System.___hTotalFunc1OS |#$T0@@194| |#$R@@207|))) (and (= ($Box ($Unbox HandleTypeType bx@@97)) bx@@97) ($Is ($Unbox HandleTypeType bx@@97) (Tclass._System.___hTotalFunc1OS |#$T0@@194| |#$R@@207|)))) :qid |unknown.0:0| :skolemid |1171| :pattern ( ($IsBox bx@@97 (Tclass._System.___hTotalFunc1OS |#$T0@@194| |#$R@@207|))) )))
(assert (forall ((|#$T0@@195| T@U) (|#$R@@208| T@U) (|f#0@@37| T@U) ) (!  (=> (and (and (= (type |#$T0@@195|) TyType) (= (type |#$R@@208|) TyType)) (= (type |f#0@@37|) HandleTypeType)) (= ($Is |f#0@@37| (Tclass._System.___hTotalFunc1OS |#$T0@@195| |#$R@@208|))  (and ($Is |f#0@@37| (Tclass._System.___hPartialFunc1OS |#$T0@@195| |#$R@@208|)) (forall ((|x0#0@@16| T@U) ) (!  (=> (and (= (type |x0#0@@16|) BoxType) ($IsBox |x0#0@@16| |#$T0@@195|)) (Requires1 |#$T0@@195| |#$R@@208| $OneHeap |f#0@@37| |x0#0@@16|)) :qid |unknown.0:0| :skolemid |1172| :no-pattern (type |x0#0@@16|) :no-pattern (U_2_int |x0#0@@16|) :no-pattern (U_2_bool |x0#0@@16|) ))))) :qid |unknown.0:0| :skolemid |1173| :pattern ( ($Is |f#0@@37| (Tclass._System.___hTotalFunc1OS |#$T0@@195| |#$R@@208|))) )))
(assert (forall ((|#$T0@@196| T@U) (|#$R@@209| T@U) (|f#0@@38| T@U) ($h@@30 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@196|) TyType) (= (type |#$R@@209|) TyType)) (= (type |f#0@@38|) HandleTypeType)) (= (type $h@@30) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@38| (Tclass._System.___hTotalFunc1OS |#$T0@@196| |#$R@@209|) $h@@30) ($IsAlloc |f#0@@38| (Tclass._System.___hPartialFunc1OS |#$T0@@196| |#$R@@209|) $h@@30))) :qid |unknown.0:0| :skolemid |1174| :pattern ( ($IsAlloc |f#0@@38| (Tclass._System.___hTotalFunc1OS |#$T0@@196| |#$R@@209|) $h@@30)) )))
(assert (forall ((arg0@@334 T@U) ) (! (= (type (Tclass._System.___hFunc0L arg0@@334)) TyType) :qid |funType:Tclass._System.___hFunc0L| :pattern ( (Tclass._System.___hFunc0L arg0@@334)) )))
(assert (forall ((|#$R@@210| T@U) ) (!  (=> (= (type |#$R@@210|) TyType) (and (= (Tag (Tclass._System.___hFunc0L |#$R@@210|)) Tagclass._System.___hFunc0L) (= (TagFamily (Tclass._System.___hFunc0L |#$R@@210|)) |tytagFamily$_#Func0L|))) :qid |unknown.0:0| :skolemid |1175| :pattern ( (Tclass._System.___hFunc0L |#$R@@210|)) )))
(assert (forall ((arg0@@335 T@U) ) (! (= (type (Tclass._System.___hFunc0L_0 arg0@@335)) TyType) :qid |funType:Tclass._System.___hFunc0L_0| :pattern ( (Tclass._System.___hFunc0L_0 arg0@@335)) )))
(assert (forall ((|#$R@@211| T@U) ) (!  (=> (= (type |#$R@@211|) TyType) (= (Tclass._System.___hFunc0L_0 (Tclass._System.___hFunc0L |#$R@@211|)) |#$R@@211|)) :qid |unknown.0:0| :skolemid |1176| :pattern ( (Tclass._System.___hFunc0L |#$R@@211|)) )))
(assert (forall ((|#$R@@212| T@U) (bx@@98 T@U) ) (!  (=> (and (and (= (type |#$R@@212|) TyType) (= (type bx@@98) BoxType)) ($IsBox bx@@98 (Tclass._System.___hFunc0L |#$R@@212|))) (and (= ($Box ($Unbox HandleTypeType bx@@98)) bx@@98) ($Is ($Unbox HandleTypeType bx@@98) (Tclass._System.___hFunc0L |#$R@@212|)))) :qid |unknown.0:0| :skolemid |1177| :pattern ( ($IsBox bx@@98 (Tclass._System.___hFunc0L |#$R@@212|))) )))
(assert (forall ((arg0@@336 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0L arg0@@336)) TyType) :qid |funType:Tclass._System.___hPartialFunc0L| :pattern ( (Tclass._System.___hPartialFunc0L arg0@@336)) )))
(assert (forall ((|#$R@@213| T@U) ) (!  (=> (= (type |#$R@@213|) TyType) (and (= (Tag (Tclass._System.___hPartialFunc0L |#$R@@213|)) Tagclass._System.___hPartialFunc0L) (= (TagFamily (Tclass._System.___hPartialFunc0L |#$R@@213|)) |tytagFamily$_#PartialFunc0L|))) :qid |unknown.0:0| :skolemid |1178| :pattern ( (Tclass._System.___hPartialFunc0L |#$R@@213|)) )))
(assert (forall ((arg0@@337 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0L_0 arg0@@337)) TyType) :qid |funType:Tclass._System.___hPartialFunc0L_0| :pattern ( (Tclass._System.___hPartialFunc0L_0 arg0@@337)) )))
(assert (forall ((|#$R@@214| T@U) ) (!  (=> (= (type |#$R@@214|) TyType) (= (Tclass._System.___hPartialFunc0L_0 (Tclass._System.___hPartialFunc0L |#$R@@214|)) |#$R@@214|)) :qid |unknown.0:0| :skolemid |1179| :pattern ( (Tclass._System.___hPartialFunc0L |#$R@@214|)) )))
(assert (forall ((|#$R@@215| T@U) (bx@@99 T@U) ) (!  (=> (and (and (= (type |#$R@@215|) TyType) (= (type bx@@99) BoxType)) ($IsBox bx@@99 (Tclass._System.___hPartialFunc0L |#$R@@215|))) (and (= ($Box ($Unbox HandleTypeType bx@@99)) bx@@99) ($Is ($Unbox HandleTypeType bx@@99) (Tclass._System.___hPartialFunc0L |#$R@@215|)))) :qid |unknown.0:0| :skolemid |1180| :pattern ( ($IsBox bx@@99 (Tclass._System.___hPartialFunc0L |#$R@@215|))) )))
(assert (forall ((|#$R@@216| T@U) (|f#0@@39| T@U) ) (!  (=> (and (= (type |#$R@@216|) TyType) (= (type |f#0@@39|) HandleTypeType)) (= ($Is |f#0@@39| (Tclass._System.___hPartialFunc0L |#$R@@216|))  (and ($Is |f#0@@39| (Tclass._System.___hFunc0L |#$R@@216|)) (|Set#Equal| (Reads0 |#$R@@216| $OneHeap |f#0@@39|) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |1181| :pattern ( ($Is |f#0@@39| (Tclass._System.___hPartialFunc0L |#$R@@216|))) )))
(assert (forall ((|#$R@@217| T@U) (|f#0@@40| T@U) ($h@@31 T@U) ) (!  (=> (and (and (= (type |#$R@@217|) TyType) (= (type |f#0@@40|) HandleTypeType)) (= (type $h@@31) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@40| (Tclass._System.___hPartialFunc0L |#$R@@217|) $h@@31) ($IsAlloc |f#0@@40| (Tclass._System.___hFunc0L |#$R@@217|) $h@@31))) :qid |unknown.0:0| :skolemid |1182| :pattern ( ($IsAlloc |f#0@@40| (Tclass._System.___hPartialFunc0L |#$R@@217|) $h@@31)) )))
(assert (forall ((arg0@@338 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0L arg0@@338)) TyType) :qid |funType:Tclass._System.___hTotalFunc0L| :pattern ( (Tclass._System.___hTotalFunc0L arg0@@338)) )))
(assert (forall ((|#$R@@218| T@U) ) (!  (=> (= (type |#$R@@218|) TyType) (and (= (Tag (Tclass._System.___hTotalFunc0L |#$R@@218|)) Tagclass._System.___hTotalFunc0L) (= (TagFamily (Tclass._System.___hTotalFunc0L |#$R@@218|)) |tytagFamily$_#TotalFunc0L|))) :qid |unknown.0:0| :skolemid |1183| :pattern ( (Tclass._System.___hTotalFunc0L |#$R@@218|)) )))
(assert (forall ((arg0@@339 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0L_0 arg0@@339)) TyType) :qid |funType:Tclass._System.___hTotalFunc0L_0| :pattern ( (Tclass._System.___hTotalFunc0L_0 arg0@@339)) )))
(assert (forall ((|#$R@@219| T@U) ) (!  (=> (= (type |#$R@@219|) TyType) (= (Tclass._System.___hTotalFunc0L_0 (Tclass._System.___hTotalFunc0L |#$R@@219|)) |#$R@@219|)) :qid |unknown.0:0| :skolemid |1184| :pattern ( (Tclass._System.___hTotalFunc0L |#$R@@219|)) )))
(assert (forall ((|#$R@@220| T@U) (bx@@100 T@U) ) (!  (=> (and (and (= (type |#$R@@220|) TyType) (= (type bx@@100) BoxType)) ($IsBox bx@@100 (Tclass._System.___hTotalFunc0L |#$R@@220|))) (and (= ($Box ($Unbox HandleTypeType bx@@100)) bx@@100) ($Is ($Unbox HandleTypeType bx@@100) (Tclass._System.___hTotalFunc0L |#$R@@220|)))) :qid |unknown.0:0| :skolemid |1185| :pattern ( ($IsBox bx@@100 (Tclass._System.___hTotalFunc0L |#$R@@220|))) )))
(assert (forall ((|#$R@@221| T@U) (|f#0@@41| T@U) ) (!  (=> (and (= (type |#$R@@221|) TyType) (= (type |f#0@@41|) HandleTypeType)) (= ($Is |f#0@@41| (Tclass._System.___hTotalFunc0L |#$R@@221|))  (and ($Is |f#0@@41| (Tclass._System.___hPartialFunc0L |#$R@@221|)) (Requires0 |#$R@@221| $OneHeap |f#0@@41|)))) :qid |unknown.0:0| :skolemid |1186| :pattern ( ($Is |f#0@@41| (Tclass._System.___hTotalFunc0L |#$R@@221|))) )))
(assert (forall ((|#$R@@222| T@U) (|f#0@@42| T@U) ($h@@32 T@U) ) (!  (=> (and (and (= (type |#$R@@222|) TyType) (= (type |f#0@@42|) HandleTypeType)) (= (type $h@@32) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@42| (Tclass._System.___hTotalFunc0L |#$R@@222|) $h@@32) ($IsAlloc |f#0@@42| (Tclass._System.___hPartialFunc0L |#$R@@222|) $h@@32))) :qid |unknown.0:0| :skolemid |1187| :pattern ( ($IsAlloc |f#0@@42| (Tclass._System.___hTotalFunc0L |#$R@@222|) $h@@32)) )))
(assert (forall ((arg0@@340 T@U) (arg1@@151 T@U) (arg2@@100 T@U) ) (! (= (type (Tclass._System.___hFunc2LOO arg0@@340 arg1@@151 arg2@@100)) TyType) :qid |funType:Tclass._System.___hFunc2LOO| :pattern ( (Tclass._System.___hFunc2LOO arg0@@340 arg1@@151 arg2@@100)) )))
(assert (forall ((|#$T0@@197| T@U) (|#$T1@@165| T@U) (|#$R@@223| T@U) ) (!  (=> (and (and (= (type |#$T0@@197|) TyType) (= (type |#$T1@@165|) TyType)) (= (type |#$R@@223|) TyType)) (and (= (Tag (Tclass._System.___hFunc2LOO |#$T0@@197| |#$T1@@165| |#$R@@223|)) Tagclass._System.___hFunc2LOO) (= (TagFamily (Tclass._System.___hFunc2LOO |#$T0@@197| |#$T1@@165| |#$R@@223|)) |tytagFamily$_#Func2LOO|))) :qid |unknown.0:0| :skolemid |1188| :pattern ( (Tclass._System.___hFunc2LOO |#$T0@@197| |#$T1@@165| |#$R@@223|)) )))
(assert (forall ((arg0@@341 T@U) ) (! (= (type (Tclass._System.___hFunc2LOO_0 arg0@@341)) TyType) :qid |funType:Tclass._System.___hFunc2LOO_0| :pattern ( (Tclass._System.___hFunc2LOO_0 arg0@@341)) )))
(assert (forall ((|#$T0@@198| T@U) (|#$T1@@166| T@U) (|#$R@@224| T@U) ) (!  (=> (and (and (= (type |#$T0@@198|) TyType) (= (type |#$T1@@166|) TyType)) (= (type |#$R@@224|) TyType)) (= (Tclass._System.___hFunc2LOO_0 (Tclass._System.___hFunc2LOO |#$T0@@198| |#$T1@@166| |#$R@@224|)) |#$T0@@198|)) :qid |unknown.0:0| :skolemid |1189| :pattern ( (Tclass._System.___hFunc2LOO |#$T0@@198| |#$T1@@166| |#$R@@224|)) )))
(assert (forall ((arg0@@342 T@U) ) (! (= (type (Tclass._System.___hFunc2LOO_1 arg0@@342)) TyType) :qid |funType:Tclass._System.___hFunc2LOO_1| :pattern ( (Tclass._System.___hFunc2LOO_1 arg0@@342)) )))
(assert (forall ((|#$T0@@199| T@U) (|#$T1@@167| T@U) (|#$R@@225| T@U) ) (!  (=> (and (and (= (type |#$T0@@199|) TyType) (= (type |#$T1@@167|) TyType)) (= (type |#$R@@225|) TyType)) (= (Tclass._System.___hFunc2LOO_1 (Tclass._System.___hFunc2LOO |#$T0@@199| |#$T1@@167| |#$R@@225|)) |#$T1@@167|)) :qid |unknown.0:0| :skolemid |1190| :pattern ( (Tclass._System.___hFunc2LOO |#$T0@@199| |#$T1@@167| |#$R@@225|)) )))
(assert (forall ((arg0@@343 T@U) ) (! (= (type (Tclass._System.___hFunc2LOO_2 arg0@@343)) TyType) :qid |funType:Tclass._System.___hFunc2LOO_2| :pattern ( (Tclass._System.___hFunc2LOO_2 arg0@@343)) )))
(assert (forall ((|#$T0@@200| T@U) (|#$T1@@168| T@U) (|#$R@@226| T@U) ) (!  (=> (and (and (= (type |#$T0@@200|) TyType) (= (type |#$T1@@168|) TyType)) (= (type |#$R@@226|) TyType)) (= (Tclass._System.___hFunc2LOO_2 (Tclass._System.___hFunc2LOO |#$T0@@200| |#$T1@@168| |#$R@@226|)) |#$R@@226|)) :qid |unknown.0:0| :skolemid |1191| :pattern ( (Tclass._System.___hFunc2LOO |#$T0@@200| |#$T1@@168| |#$R@@226|)) )))
(assert (forall ((|#$T0@@201| T@U) (|#$T1@@169| T@U) (|#$R@@227| T@U) (bx@@101 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@201|) TyType) (= (type |#$T1@@169|) TyType)) (= (type |#$R@@227|) TyType)) (= (type bx@@101) BoxType)) ($IsBox bx@@101 (Tclass._System.___hFunc2LOO |#$T0@@201| |#$T1@@169| |#$R@@227|))) (and (= ($Box ($Unbox HandleTypeType bx@@101)) bx@@101) ($Is ($Unbox HandleTypeType bx@@101) (Tclass._System.___hFunc2LOO |#$T0@@201| |#$T1@@169| |#$R@@227|)))) :qid |unknown.0:0| :skolemid |1192| :pattern ( ($IsBox bx@@101 (Tclass._System.___hFunc2LOO |#$T0@@201| |#$T1@@169| |#$R@@227|))) )))
(assert (forall ((arg0@@344 T@U) (arg1@@152 T@U) (arg2@@101 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LOO arg0@@344 arg1@@152 arg2@@101)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LOO| :pattern ( (Tclass._System.___hPartialFunc2LOO arg0@@344 arg1@@152 arg2@@101)) )))
(assert (forall ((|#$T0@@202| T@U) (|#$T1@@170| T@U) (|#$R@@228| T@U) ) (!  (=> (and (and (= (type |#$T0@@202|) TyType) (= (type |#$T1@@170|) TyType)) (= (type |#$R@@228|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2LOO |#$T0@@202| |#$T1@@170| |#$R@@228|)) Tagclass._System.___hPartialFunc2LOO) (= (TagFamily (Tclass._System.___hPartialFunc2LOO |#$T0@@202| |#$T1@@170| |#$R@@228|)) |tytagFamily$_#PartialFunc2LOO|))) :qid |unknown.0:0| :skolemid |1193| :pattern ( (Tclass._System.___hPartialFunc2LOO |#$T0@@202| |#$T1@@170| |#$R@@228|)) )))
(assert (forall ((arg0@@345 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LOO_0 arg0@@345)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LOO_0| :pattern ( (Tclass._System.___hPartialFunc2LOO_0 arg0@@345)) )))
(assert (forall ((|#$T0@@203| T@U) (|#$T1@@171| T@U) (|#$R@@229| T@U) ) (!  (=> (and (and (= (type |#$T0@@203|) TyType) (= (type |#$T1@@171|) TyType)) (= (type |#$R@@229|) TyType)) (= (Tclass._System.___hPartialFunc2LOO_0 (Tclass._System.___hPartialFunc2LOO |#$T0@@203| |#$T1@@171| |#$R@@229|)) |#$T0@@203|)) :qid |unknown.0:0| :skolemid |1194| :pattern ( (Tclass._System.___hPartialFunc2LOO |#$T0@@203| |#$T1@@171| |#$R@@229|)) )))
(assert (forall ((arg0@@346 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LOO_1 arg0@@346)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LOO_1| :pattern ( (Tclass._System.___hPartialFunc2LOO_1 arg0@@346)) )))
(assert (forall ((|#$T0@@204| T@U) (|#$T1@@172| T@U) (|#$R@@230| T@U) ) (!  (=> (and (and (= (type |#$T0@@204|) TyType) (= (type |#$T1@@172|) TyType)) (= (type |#$R@@230|) TyType)) (= (Tclass._System.___hPartialFunc2LOO_1 (Tclass._System.___hPartialFunc2LOO |#$T0@@204| |#$T1@@172| |#$R@@230|)) |#$T1@@172|)) :qid |unknown.0:0| :skolemid |1195| :pattern ( (Tclass._System.___hPartialFunc2LOO |#$T0@@204| |#$T1@@172| |#$R@@230|)) )))
(assert (forall ((arg0@@347 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LOO_2 arg0@@347)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LOO_2| :pattern ( (Tclass._System.___hPartialFunc2LOO_2 arg0@@347)) )))
(assert (forall ((|#$T0@@205| T@U) (|#$T1@@173| T@U) (|#$R@@231| T@U) ) (!  (=> (and (and (= (type |#$T0@@205|) TyType) (= (type |#$T1@@173|) TyType)) (= (type |#$R@@231|) TyType)) (= (Tclass._System.___hPartialFunc2LOO_2 (Tclass._System.___hPartialFunc2LOO |#$T0@@205| |#$T1@@173| |#$R@@231|)) |#$R@@231|)) :qid |unknown.0:0| :skolemid |1196| :pattern ( (Tclass._System.___hPartialFunc2LOO |#$T0@@205| |#$T1@@173| |#$R@@231|)) )))
(assert (forall ((|#$T0@@206| T@U) (|#$T1@@174| T@U) (|#$R@@232| T@U) (bx@@102 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@206|) TyType) (= (type |#$T1@@174|) TyType)) (= (type |#$R@@232|) TyType)) (= (type bx@@102) BoxType)) ($IsBox bx@@102 (Tclass._System.___hPartialFunc2LOO |#$T0@@206| |#$T1@@174| |#$R@@232|))) (and (= ($Box ($Unbox HandleTypeType bx@@102)) bx@@102) ($Is ($Unbox HandleTypeType bx@@102) (Tclass._System.___hPartialFunc2LOO |#$T0@@206| |#$T1@@174| |#$R@@232|)))) :qid |unknown.0:0| :skolemid |1197| :pattern ( ($IsBox bx@@102 (Tclass._System.___hPartialFunc2LOO |#$T0@@206| |#$T1@@174| |#$R@@232|))) )))
(assert (forall ((|#$T0@@207| T@U) (|#$T1@@175| T@U) (|#$R@@233| T@U) (|f#0@@43| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@207|) TyType) (= (type |#$T1@@175|) TyType)) (= (type |#$R@@233|) TyType)) (= (type |f#0@@43|) HandleTypeType)) (= ($Is |f#0@@43| (Tclass._System.___hPartialFunc2LOO |#$T0@@207| |#$T1@@175| |#$R@@233|))  (and ($Is |f#0@@43| (Tclass._System.___hFunc2LOO |#$T0@@207| |#$T1@@175| |#$R@@233|)) (forall ((|x0#0@@17| T@U) (|x1#0@@13| T@U) ) (!  (=> (and (and (= (type |x0#0@@17|) BoxType) (= (type |x1#0@@13|) BoxType)) (and ($IsBox |x0#0@@17| |#$T0@@207|) ($IsBox |x1#0@@13| |#$T1@@175|))) (|Set#Equal| (Reads2 |#$T0@@207| |#$T1@@175| |#$R@@233| $OneHeap |f#0@@43| |x0#0@@17| |x1#0@@13|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1198| :no-pattern (type |x0#0@@17|) :no-pattern (type |x1#0@@13|) :no-pattern (U_2_int |x0#0@@17|) :no-pattern (U_2_bool |x0#0@@17|) :no-pattern (U_2_int |x1#0@@13|) :no-pattern (U_2_bool |x1#0@@13|) ))))) :qid |unknown.0:0| :skolemid |1199| :pattern ( ($Is |f#0@@43| (Tclass._System.___hPartialFunc2LOO |#$T0@@207| |#$T1@@175| |#$R@@233|))) )))
(assert (forall ((|#$T0@@208| T@U) (|#$T1@@176| T@U) (|#$R@@234| T@U) (|f#0@@44| T@U) ($h@@33 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@208|) TyType) (= (type |#$T1@@176|) TyType)) (= (type |#$R@@234|) TyType)) (= (type |f#0@@44|) HandleTypeType)) (= (type $h@@33) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@44| (Tclass._System.___hPartialFunc2LOO |#$T0@@208| |#$T1@@176| |#$R@@234|) $h@@33) ($IsAlloc |f#0@@44| (Tclass._System.___hFunc2LOO |#$T0@@208| |#$T1@@176| |#$R@@234|) $h@@33))) :qid |unknown.0:0| :skolemid |1200| :pattern ( ($IsAlloc |f#0@@44| (Tclass._System.___hPartialFunc2LOO |#$T0@@208| |#$T1@@176| |#$R@@234|) $h@@33)) )))
(assert (forall ((arg0@@348 T@U) (arg1@@153 T@U) (arg2@@102 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LOO arg0@@348 arg1@@153 arg2@@102)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LOO| :pattern ( (Tclass._System.___hTotalFunc2LOO arg0@@348 arg1@@153 arg2@@102)) )))
(assert (forall ((|#$T0@@209| T@U) (|#$T1@@177| T@U) (|#$R@@235| T@U) ) (!  (=> (and (and (= (type |#$T0@@209|) TyType) (= (type |#$T1@@177|) TyType)) (= (type |#$R@@235|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2LOO |#$T0@@209| |#$T1@@177| |#$R@@235|)) Tagclass._System.___hTotalFunc2LOO) (= (TagFamily (Tclass._System.___hTotalFunc2LOO |#$T0@@209| |#$T1@@177| |#$R@@235|)) |tytagFamily$_#TotalFunc2LOO|))) :qid |unknown.0:0| :skolemid |1201| :pattern ( (Tclass._System.___hTotalFunc2LOO |#$T0@@209| |#$T1@@177| |#$R@@235|)) )))
(assert (forall ((arg0@@349 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LOO_0 arg0@@349)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LOO_0| :pattern ( (Tclass._System.___hTotalFunc2LOO_0 arg0@@349)) )))
(assert (forall ((|#$T0@@210| T@U) (|#$T1@@178| T@U) (|#$R@@236| T@U) ) (!  (=> (and (and (= (type |#$T0@@210|) TyType) (= (type |#$T1@@178|) TyType)) (= (type |#$R@@236|) TyType)) (= (Tclass._System.___hTotalFunc2LOO_0 (Tclass._System.___hTotalFunc2LOO |#$T0@@210| |#$T1@@178| |#$R@@236|)) |#$T0@@210|)) :qid |unknown.0:0| :skolemid |1202| :pattern ( (Tclass._System.___hTotalFunc2LOO |#$T0@@210| |#$T1@@178| |#$R@@236|)) )))
(assert (forall ((arg0@@350 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LOO_1 arg0@@350)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LOO_1| :pattern ( (Tclass._System.___hTotalFunc2LOO_1 arg0@@350)) )))
(assert (forall ((|#$T0@@211| T@U) (|#$T1@@179| T@U) (|#$R@@237| T@U) ) (!  (=> (and (and (= (type |#$T0@@211|) TyType) (= (type |#$T1@@179|) TyType)) (= (type |#$R@@237|) TyType)) (= (Tclass._System.___hTotalFunc2LOO_1 (Tclass._System.___hTotalFunc2LOO |#$T0@@211| |#$T1@@179| |#$R@@237|)) |#$T1@@179|)) :qid |unknown.0:0| :skolemid |1203| :pattern ( (Tclass._System.___hTotalFunc2LOO |#$T0@@211| |#$T1@@179| |#$R@@237|)) )))
(assert (forall ((arg0@@351 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LOO_2 arg0@@351)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LOO_2| :pattern ( (Tclass._System.___hTotalFunc2LOO_2 arg0@@351)) )))
(assert (forall ((|#$T0@@212| T@U) (|#$T1@@180| T@U) (|#$R@@238| T@U) ) (!  (=> (and (and (= (type |#$T0@@212|) TyType) (= (type |#$T1@@180|) TyType)) (= (type |#$R@@238|) TyType)) (= (Tclass._System.___hTotalFunc2LOO_2 (Tclass._System.___hTotalFunc2LOO |#$T0@@212| |#$T1@@180| |#$R@@238|)) |#$R@@238|)) :qid |unknown.0:0| :skolemid |1204| :pattern ( (Tclass._System.___hTotalFunc2LOO |#$T0@@212| |#$T1@@180| |#$R@@238|)) )))
(assert (forall ((|#$T0@@213| T@U) (|#$T1@@181| T@U) (|#$R@@239| T@U) (bx@@103 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@213|) TyType) (= (type |#$T1@@181|) TyType)) (= (type |#$R@@239|) TyType)) (= (type bx@@103) BoxType)) ($IsBox bx@@103 (Tclass._System.___hTotalFunc2LOO |#$T0@@213| |#$T1@@181| |#$R@@239|))) (and (= ($Box ($Unbox HandleTypeType bx@@103)) bx@@103) ($Is ($Unbox HandleTypeType bx@@103) (Tclass._System.___hTotalFunc2LOO |#$T0@@213| |#$T1@@181| |#$R@@239|)))) :qid |unknown.0:0| :skolemid |1205| :pattern ( ($IsBox bx@@103 (Tclass._System.___hTotalFunc2LOO |#$T0@@213| |#$T1@@181| |#$R@@239|))) )))
(assert (forall ((|#$T0@@214| T@U) (|#$T1@@182| T@U) (|#$R@@240| T@U) (|f#0@@45| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@214|) TyType) (= (type |#$T1@@182|) TyType)) (= (type |#$R@@240|) TyType)) (= (type |f#0@@45|) HandleTypeType)) (= ($Is |f#0@@45| (Tclass._System.___hTotalFunc2LOO |#$T0@@214| |#$T1@@182| |#$R@@240|))  (and ($Is |f#0@@45| (Tclass._System.___hPartialFunc2LOO |#$T0@@214| |#$T1@@182| |#$R@@240|)) (forall ((|x0#0@@18| T@U) (|x1#0@@14| T@U) ) (!  (=> (and (and (= (type |x0#0@@18|) BoxType) (= (type |x1#0@@14|) BoxType)) (and ($IsBox |x0#0@@18| |#$T0@@214|) ($IsBox |x1#0@@14| |#$T1@@182|))) (Requires2 |#$T0@@214| |#$T1@@182| |#$R@@240| $OneHeap |f#0@@45| |x0#0@@18| |x1#0@@14|)) :qid |unknown.0:0| :skolemid |1206| :no-pattern (type |x0#0@@18|) :no-pattern (type |x1#0@@14|) :no-pattern (U_2_int |x0#0@@18|) :no-pattern (U_2_bool |x0#0@@18|) :no-pattern (U_2_int |x1#0@@14|) :no-pattern (U_2_bool |x1#0@@14|) ))))) :qid |unknown.0:0| :skolemid |1207| :pattern ( ($Is |f#0@@45| (Tclass._System.___hTotalFunc2LOO |#$T0@@214| |#$T1@@182| |#$R@@240|))) )))
(assert (forall ((|#$T0@@215| T@U) (|#$T1@@183| T@U) (|#$R@@241| T@U) (|f#0@@46| T@U) ($h@@34 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@215|) TyType) (= (type |#$T1@@183|) TyType)) (= (type |#$R@@241|) TyType)) (= (type |f#0@@46|) HandleTypeType)) (= (type $h@@34) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@46| (Tclass._System.___hTotalFunc2LOO |#$T0@@215| |#$T1@@183| |#$R@@241|) $h@@34) ($IsAlloc |f#0@@46| (Tclass._System.___hPartialFunc2LOO |#$T0@@215| |#$T1@@183| |#$R@@241|) $h@@34))) :qid |unknown.0:0| :skolemid |1208| :pattern ( ($IsAlloc |f#0@@46| (Tclass._System.___hTotalFunc2LOO |#$T0@@215| |#$T1@@183| |#$R@@241|) $h@@34)) )))
(assert (= (type |#_System._tuple#0._#Make0|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_System._tuple#0._#Make0|) |##_System._tuple#0._#Make0|))
(assert (forall ((d@@6 T@U) ) (!  (=> (= (type d@@6) DatatypeTypeType) (= (_System.Tuple0.___hMake0_q d@@6) (= (DatatypeCtorId d@@6) |##_System._tuple#0._#Make0|))) :qid |unknown.0:0| :skolemid |1209| :pattern ( (_System.Tuple0.___hMake0_q d@@6)) )))
(assert (forall ((d@@7 T@U) ) (!  (=> (and (= (type d@@7) DatatypeTypeType) (_System.Tuple0.___hMake0_q d@@7)) (= d@@7 |#_System._tuple#0._#Make0|)) :qid |unknown.0:0| :skolemid |1210| :pattern ( (_System.Tuple0.___hMake0_q d@@7)) )))
(assert (= (type Tclass._System.Tuple0) TyType))
(assert (= (Tag Tclass._System.Tuple0) Tagclass._System.Tuple0))
(assert (= (TagFamily Tclass._System.Tuple0) |tytagFamily$_tuple#0|))
(assert (forall ((bx@@104 T@U) ) (!  (=> (and (= (type bx@@104) BoxType) ($IsBox bx@@104 Tclass._System.Tuple0)) (and (= ($Box ($Unbox DatatypeTypeType bx@@104)) bx@@104) ($Is ($Unbox DatatypeTypeType bx@@104) Tclass._System.Tuple0))) :qid |unknown.0:0| :skolemid |1211| :pattern ( ($IsBox bx@@104 Tclass._System.Tuple0)) )))
(assert ($Is |#_System._tuple#0._#Make0| Tclass._System.Tuple0))
(assert (forall (($h@@35 T@U) ) (!  (=> (and (= (type $h@@35) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@35)) ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@35)) :qid |DafnyPreludebpl.545:12| :skolemid |1212| :pattern ( ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@35)) )))
(assert (= |#_System._tuple#0._#Make0| (Lit |#_System._tuple#0._#Make0|)))
(assert (forall ((d@@8 T@U) ) (!  (=> (and (= (type d@@8) DatatypeTypeType) (|$IsA#_System.Tuple0| d@@8)) (_System.Tuple0.___hMake0_q d@@8)) :qid |unknown.0:0| :skolemid |1213| :pattern ( (|$IsA#_System.Tuple0| d@@8)) )))
(assert (forall ((d@@9 T@U) ) (!  (=> (and (= (type d@@9) DatatypeTypeType) ($Is d@@9 Tclass._System.Tuple0)) (_System.Tuple0.___hMake0_q d@@9)) :qid |unknown.0:0| :skolemid |1214| :pattern ( (_System.Tuple0.___hMake0_q d@@9) ($Is d@@9 Tclass._System.Tuple0)) )))
(assert (forall ((a@@126 T@U) (b@@63 T@U) ) (!  (=> (and (and (= (type a@@126) DatatypeTypeType) (= (type b@@63) DatatypeTypeType)) true) (= (|_System.Tuple0#Equal| a@@126 b@@63) true)) :qid |unknown.0:0| :skolemid |1215| :pattern ( (|_System.Tuple0#Equal| a@@126 b@@63)) )))
(assert (forall ((a@@127 T@U) (b@@64 T@U) ) (!  (=> (and (= (type a@@127) DatatypeTypeType) (= (type b@@64) DatatypeTypeType)) (= (|_System.Tuple0#Equal| a@@127 b@@64) (= a@@127 b@@64))) :qid |unknown.0:0| :skolemid |1216| :pattern ( (|_System.Tuple0#Equal| a@@127 b@@64)) )))
(assert (forall ((arg0@@352 T@U) (arg1@@154 T@U) ) (! (= (type (Tclass._System.___hFunc1OL arg0@@352 arg1@@154)) TyType) :qid |funType:Tclass._System.___hFunc1OL| :pattern ( (Tclass._System.___hFunc1OL arg0@@352 arg1@@154)) )))
(assert (forall ((|#$T0@@216| T@U) (|#$R@@242| T@U) ) (!  (=> (and (= (type |#$T0@@216|) TyType) (= (type |#$R@@242|) TyType)) (and (= (Tag (Tclass._System.___hFunc1OL |#$T0@@216| |#$R@@242|)) Tagclass._System.___hFunc1OL) (= (TagFamily (Tclass._System.___hFunc1OL |#$T0@@216| |#$R@@242|)) |tytagFamily$_#Func1OL|))) :qid |unknown.0:0| :skolemid |1217| :pattern ( (Tclass._System.___hFunc1OL |#$T0@@216| |#$R@@242|)) )))
(assert (forall ((arg0@@353 T@U) ) (! (= (type (Tclass._System.___hFunc1OL_0 arg0@@353)) TyType) :qid |funType:Tclass._System.___hFunc1OL_0| :pattern ( (Tclass._System.___hFunc1OL_0 arg0@@353)) )))
(assert (forall ((|#$T0@@217| T@U) (|#$R@@243| T@U) ) (!  (=> (and (= (type |#$T0@@217|) TyType) (= (type |#$R@@243|) TyType)) (= (Tclass._System.___hFunc1OL_0 (Tclass._System.___hFunc1OL |#$T0@@217| |#$R@@243|)) |#$T0@@217|)) :qid |unknown.0:0| :skolemid |1218| :pattern ( (Tclass._System.___hFunc1OL |#$T0@@217| |#$R@@243|)) )))
(assert (forall ((arg0@@354 T@U) ) (! (= (type (Tclass._System.___hFunc1OL_1 arg0@@354)) TyType) :qid |funType:Tclass._System.___hFunc1OL_1| :pattern ( (Tclass._System.___hFunc1OL_1 arg0@@354)) )))
(assert (forall ((|#$T0@@218| T@U) (|#$R@@244| T@U) ) (!  (=> (and (= (type |#$T0@@218|) TyType) (= (type |#$R@@244|) TyType)) (= (Tclass._System.___hFunc1OL_1 (Tclass._System.___hFunc1OL |#$T0@@218| |#$R@@244|)) |#$R@@244|)) :qid |unknown.0:0| :skolemid |1219| :pattern ( (Tclass._System.___hFunc1OL |#$T0@@218| |#$R@@244|)) )))
(assert (forall ((|#$T0@@219| T@U) (|#$R@@245| T@U) (bx@@105 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@219|) TyType) (= (type |#$R@@245|) TyType)) (= (type bx@@105) BoxType)) ($IsBox bx@@105 (Tclass._System.___hFunc1OL |#$T0@@219| |#$R@@245|))) (and (= ($Box ($Unbox HandleTypeType bx@@105)) bx@@105) ($Is ($Unbox HandleTypeType bx@@105) (Tclass._System.___hFunc1OL |#$T0@@219| |#$R@@245|)))) :qid |unknown.0:0| :skolemid |1220| :pattern ( ($IsBox bx@@105 (Tclass._System.___hFunc1OL |#$T0@@219| |#$R@@245|))) )))
(assert (forall ((arg0@@355 T@U) (arg1@@155 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OL arg0@@355 arg1@@155)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OL| :pattern ( (Tclass._System.___hPartialFunc1OL arg0@@355 arg1@@155)) )))
(assert (forall ((|#$T0@@220| T@U) (|#$R@@246| T@U) ) (!  (=> (and (= (type |#$T0@@220|) TyType) (= (type |#$R@@246|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1OL |#$T0@@220| |#$R@@246|)) Tagclass._System.___hPartialFunc1OL) (= (TagFamily (Tclass._System.___hPartialFunc1OL |#$T0@@220| |#$R@@246|)) |tytagFamily$_#PartialFunc1OL|))) :qid |unknown.0:0| :skolemid |1221| :pattern ( (Tclass._System.___hPartialFunc1OL |#$T0@@220| |#$R@@246|)) )))
(assert (forall ((arg0@@356 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OL_0 arg0@@356)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OL_0| :pattern ( (Tclass._System.___hPartialFunc1OL_0 arg0@@356)) )))
(assert (forall ((|#$T0@@221| T@U) (|#$R@@247| T@U) ) (!  (=> (and (= (type |#$T0@@221|) TyType) (= (type |#$R@@247|) TyType)) (= (Tclass._System.___hPartialFunc1OL_0 (Tclass._System.___hPartialFunc1OL |#$T0@@221| |#$R@@247|)) |#$T0@@221|)) :qid |unknown.0:0| :skolemid |1222| :pattern ( (Tclass._System.___hPartialFunc1OL |#$T0@@221| |#$R@@247|)) )))
(assert (forall ((arg0@@357 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OL_1 arg0@@357)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OL_1| :pattern ( (Tclass._System.___hPartialFunc1OL_1 arg0@@357)) )))
(assert (forall ((|#$T0@@222| T@U) (|#$R@@248| T@U) ) (!  (=> (and (= (type |#$T0@@222|) TyType) (= (type |#$R@@248|) TyType)) (= (Tclass._System.___hPartialFunc1OL_1 (Tclass._System.___hPartialFunc1OL |#$T0@@222| |#$R@@248|)) |#$R@@248|)) :qid |unknown.0:0| :skolemid |1223| :pattern ( (Tclass._System.___hPartialFunc1OL |#$T0@@222| |#$R@@248|)) )))
(assert (forall ((|#$T0@@223| T@U) (|#$R@@249| T@U) (bx@@106 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@223|) TyType) (= (type |#$R@@249|) TyType)) (= (type bx@@106) BoxType)) ($IsBox bx@@106 (Tclass._System.___hPartialFunc1OL |#$T0@@223| |#$R@@249|))) (and (= ($Box ($Unbox HandleTypeType bx@@106)) bx@@106) ($Is ($Unbox HandleTypeType bx@@106) (Tclass._System.___hPartialFunc1OL |#$T0@@223| |#$R@@249|)))) :qid |unknown.0:0| :skolemid |1224| :pattern ( ($IsBox bx@@106 (Tclass._System.___hPartialFunc1OL |#$T0@@223| |#$R@@249|))) )))
(assert (forall ((|#$T0@@224| T@U) (|#$R@@250| T@U) (|f#0@@47| T@U) ) (!  (=> (and (and (= (type |#$T0@@224|) TyType) (= (type |#$R@@250|) TyType)) (= (type |f#0@@47|) HandleTypeType)) (= ($Is |f#0@@47| (Tclass._System.___hPartialFunc1OL |#$T0@@224| |#$R@@250|))  (and ($Is |f#0@@47| (Tclass._System.___hFunc1OL |#$T0@@224| |#$R@@250|)) (forall ((|x0#0@@19| T@U) ) (!  (=> (and (= (type |x0#0@@19|) BoxType) ($IsBox |x0#0@@19| |#$T0@@224|)) (|Set#Equal| (Reads1 |#$T0@@224| |#$R@@250| $OneHeap |f#0@@47| |x0#0@@19|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1225| :no-pattern (type |x0#0@@19|) :no-pattern (U_2_int |x0#0@@19|) :no-pattern (U_2_bool |x0#0@@19|) ))))) :qid |unknown.0:0| :skolemid |1226| :pattern ( ($Is |f#0@@47| (Tclass._System.___hPartialFunc1OL |#$T0@@224| |#$R@@250|))) )))
(assert (forall ((|#$T0@@225| T@U) (|#$R@@251| T@U) (|f#0@@48| T@U) ($h@@36 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@225|) TyType) (= (type |#$R@@251|) TyType)) (= (type |f#0@@48|) HandleTypeType)) (= (type $h@@36) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@48| (Tclass._System.___hPartialFunc1OL |#$T0@@225| |#$R@@251|) $h@@36) ($IsAlloc |f#0@@48| (Tclass._System.___hFunc1OL |#$T0@@225| |#$R@@251|) $h@@36))) :qid |unknown.0:0| :skolemid |1227| :pattern ( ($IsAlloc |f#0@@48| (Tclass._System.___hPartialFunc1OL |#$T0@@225| |#$R@@251|) $h@@36)) )))
(assert (forall ((arg0@@358 T@U) (arg1@@156 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OL arg0@@358 arg1@@156)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OL| :pattern ( (Tclass._System.___hTotalFunc1OL arg0@@358 arg1@@156)) )))
(assert (forall ((|#$T0@@226| T@U) (|#$R@@252| T@U) ) (!  (=> (and (= (type |#$T0@@226|) TyType) (= (type |#$R@@252|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1OL |#$T0@@226| |#$R@@252|)) Tagclass._System.___hTotalFunc1OL) (= (TagFamily (Tclass._System.___hTotalFunc1OL |#$T0@@226| |#$R@@252|)) |tytagFamily$_#TotalFunc1OL|))) :qid |unknown.0:0| :skolemid |1228| :pattern ( (Tclass._System.___hTotalFunc1OL |#$T0@@226| |#$R@@252|)) )))
(assert (forall ((arg0@@359 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OL_0 arg0@@359)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OL_0| :pattern ( (Tclass._System.___hTotalFunc1OL_0 arg0@@359)) )))
(assert (forall ((|#$T0@@227| T@U) (|#$R@@253| T@U) ) (!  (=> (and (= (type |#$T0@@227|) TyType) (= (type |#$R@@253|) TyType)) (= (Tclass._System.___hTotalFunc1OL_0 (Tclass._System.___hTotalFunc1OL |#$T0@@227| |#$R@@253|)) |#$T0@@227|)) :qid |unknown.0:0| :skolemid |1229| :pattern ( (Tclass._System.___hTotalFunc1OL |#$T0@@227| |#$R@@253|)) )))
(assert (forall ((arg0@@360 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OL_1 arg0@@360)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OL_1| :pattern ( (Tclass._System.___hTotalFunc1OL_1 arg0@@360)) )))
(assert (forall ((|#$T0@@228| T@U) (|#$R@@254| T@U) ) (!  (=> (and (= (type |#$T0@@228|) TyType) (= (type |#$R@@254|) TyType)) (= (Tclass._System.___hTotalFunc1OL_1 (Tclass._System.___hTotalFunc1OL |#$T0@@228| |#$R@@254|)) |#$R@@254|)) :qid |unknown.0:0| :skolemid |1230| :pattern ( (Tclass._System.___hTotalFunc1OL |#$T0@@228| |#$R@@254|)) )))
(assert (forall ((|#$T0@@229| T@U) (|#$R@@255| T@U) (bx@@107 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@229|) TyType) (= (type |#$R@@255|) TyType)) (= (type bx@@107) BoxType)) ($IsBox bx@@107 (Tclass._System.___hTotalFunc1OL |#$T0@@229| |#$R@@255|))) (and (= ($Box ($Unbox HandleTypeType bx@@107)) bx@@107) ($Is ($Unbox HandleTypeType bx@@107) (Tclass._System.___hTotalFunc1OL |#$T0@@229| |#$R@@255|)))) :qid |unknown.0:0| :skolemid |1231| :pattern ( ($IsBox bx@@107 (Tclass._System.___hTotalFunc1OL |#$T0@@229| |#$R@@255|))) )))
(assert (forall ((|#$T0@@230| T@U) (|#$R@@256| T@U) (|f#0@@49| T@U) ) (!  (=> (and (and (= (type |#$T0@@230|) TyType) (= (type |#$R@@256|) TyType)) (= (type |f#0@@49|) HandleTypeType)) (= ($Is |f#0@@49| (Tclass._System.___hTotalFunc1OL |#$T0@@230| |#$R@@256|))  (and ($Is |f#0@@49| (Tclass._System.___hPartialFunc1OL |#$T0@@230| |#$R@@256|)) (forall ((|x0#0@@20| T@U) ) (!  (=> (and (= (type |x0#0@@20|) BoxType) ($IsBox |x0#0@@20| |#$T0@@230|)) (Requires1 |#$T0@@230| |#$R@@256| $OneHeap |f#0@@49| |x0#0@@20|)) :qid |unknown.0:0| :skolemid |1232| :no-pattern (type |x0#0@@20|) :no-pattern (U_2_int |x0#0@@20|) :no-pattern (U_2_bool |x0#0@@20|) ))))) :qid |unknown.0:0| :skolemid |1233| :pattern ( ($Is |f#0@@49| (Tclass._System.___hTotalFunc1OL |#$T0@@230| |#$R@@256|))) )))
(assert (forall ((|#$T0@@231| T@U) (|#$R@@257| T@U) (|f#0@@50| T@U) ($h@@37 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@231|) TyType) (= (type |#$R@@257|) TyType)) (= (type |f#0@@50|) HandleTypeType)) (= (type $h@@37) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@50| (Tclass._System.___hTotalFunc1OL |#$T0@@231| |#$R@@257|) $h@@37) ($IsAlloc |f#0@@50| (Tclass._System.___hPartialFunc1OL |#$T0@@231| |#$R@@257|) $h@@37))) :qid |unknown.0:0| :skolemid |1234| :pattern ( ($IsAlloc |f#0@@50| (Tclass._System.___hTotalFunc1OL |#$T0@@231| |#$R@@257|) $h@@37)) )))
(assert (forall ((arg0@@361 T@U) (arg1@@157 T@U) ) (! (= (type (Tclass._System.___hFunc1LO arg0@@361 arg1@@157)) TyType) :qid |funType:Tclass._System.___hFunc1LO| :pattern ( (Tclass._System.___hFunc1LO arg0@@361 arg1@@157)) )))
(assert (forall ((|#$T0@@232| T@U) (|#$R@@258| T@U) ) (!  (=> (and (= (type |#$T0@@232|) TyType) (= (type |#$R@@258|) TyType)) (and (= (Tag (Tclass._System.___hFunc1LO |#$T0@@232| |#$R@@258|)) Tagclass._System.___hFunc1LO) (= (TagFamily (Tclass._System.___hFunc1LO |#$T0@@232| |#$R@@258|)) |tytagFamily$_#Func1LO|))) :qid |unknown.0:0| :skolemid |1235| :pattern ( (Tclass._System.___hFunc1LO |#$T0@@232| |#$R@@258|)) )))
(assert (forall ((arg0@@362 T@U) ) (! (= (type (Tclass._System.___hFunc1LO_0 arg0@@362)) TyType) :qid |funType:Tclass._System.___hFunc1LO_0| :pattern ( (Tclass._System.___hFunc1LO_0 arg0@@362)) )))
(assert (forall ((|#$T0@@233| T@U) (|#$R@@259| T@U) ) (!  (=> (and (= (type |#$T0@@233|) TyType) (= (type |#$R@@259|) TyType)) (= (Tclass._System.___hFunc1LO_0 (Tclass._System.___hFunc1LO |#$T0@@233| |#$R@@259|)) |#$T0@@233|)) :qid |unknown.0:0| :skolemid |1236| :pattern ( (Tclass._System.___hFunc1LO |#$T0@@233| |#$R@@259|)) )))
(assert (forall ((arg0@@363 T@U) ) (! (= (type (Tclass._System.___hFunc1LO_1 arg0@@363)) TyType) :qid |funType:Tclass._System.___hFunc1LO_1| :pattern ( (Tclass._System.___hFunc1LO_1 arg0@@363)) )))
(assert (forall ((|#$T0@@234| T@U) (|#$R@@260| T@U) ) (!  (=> (and (= (type |#$T0@@234|) TyType) (= (type |#$R@@260|) TyType)) (= (Tclass._System.___hFunc1LO_1 (Tclass._System.___hFunc1LO |#$T0@@234| |#$R@@260|)) |#$R@@260|)) :qid |unknown.0:0| :skolemid |1237| :pattern ( (Tclass._System.___hFunc1LO |#$T0@@234| |#$R@@260|)) )))
(assert (forall ((|#$T0@@235| T@U) (|#$R@@261| T@U) (bx@@108 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@235|) TyType) (= (type |#$R@@261|) TyType)) (= (type bx@@108) BoxType)) ($IsBox bx@@108 (Tclass._System.___hFunc1LO |#$T0@@235| |#$R@@261|))) (and (= ($Box ($Unbox HandleTypeType bx@@108)) bx@@108) ($Is ($Unbox HandleTypeType bx@@108) (Tclass._System.___hFunc1LO |#$T0@@235| |#$R@@261|)))) :qid |unknown.0:0| :skolemid |1238| :pattern ( ($IsBox bx@@108 (Tclass._System.___hFunc1LO |#$T0@@235| |#$R@@261|))) )))
(assert (forall ((arg0@@364 T@U) (arg1@@158 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LO arg0@@364 arg1@@158)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LO| :pattern ( (Tclass._System.___hPartialFunc1LO arg0@@364 arg1@@158)) )))
(assert (forall ((|#$T0@@236| T@U) (|#$R@@262| T@U) ) (!  (=> (and (= (type |#$T0@@236|) TyType) (= (type |#$R@@262|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1LO |#$T0@@236| |#$R@@262|)) Tagclass._System.___hPartialFunc1LO) (= (TagFamily (Tclass._System.___hPartialFunc1LO |#$T0@@236| |#$R@@262|)) |tytagFamily$_#PartialFunc1LO|))) :qid |unknown.0:0| :skolemid |1239| :pattern ( (Tclass._System.___hPartialFunc1LO |#$T0@@236| |#$R@@262|)) )))
(assert (forall ((arg0@@365 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LO_0 arg0@@365)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LO_0| :pattern ( (Tclass._System.___hPartialFunc1LO_0 arg0@@365)) )))
(assert (forall ((|#$T0@@237| T@U) (|#$R@@263| T@U) ) (!  (=> (and (= (type |#$T0@@237|) TyType) (= (type |#$R@@263|) TyType)) (= (Tclass._System.___hPartialFunc1LO_0 (Tclass._System.___hPartialFunc1LO |#$T0@@237| |#$R@@263|)) |#$T0@@237|)) :qid |unknown.0:0| :skolemid |1240| :pattern ( (Tclass._System.___hPartialFunc1LO |#$T0@@237| |#$R@@263|)) )))
(assert (forall ((arg0@@366 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LO_1 arg0@@366)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LO_1| :pattern ( (Tclass._System.___hPartialFunc1LO_1 arg0@@366)) )))
(assert (forall ((|#$T0@@238| T@U) (|#$R@@264| T@U) ) (!  (=> (and (= (type |#$T0@@238|) TyType) (= (type |#$R@@264|) TyType)) (= (Tclass._System.___hPartialFunc1LO_1 (Tclass._System.___hPartialFunc1LO |#$T0@@238| |#$R@@264|)) |#$R@@264|)) :qid |unknown.0:0| :skolemid |1241| :pattern ( (Tclass._System.___hPartialFunc1LO |#$T0@@238| |#$R@@264|)) )))
(assert (forall ((|#$T0@@239| T@U) (|#$R@@265| T@U) (bx@@109 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@239|) TyType) (= (type |#$R@@265|) TyType)) (= (type bx@@109) BoxType)) ($IsBox bx@@109 (Tclass._System.___hPartialFunc1LO |#$T0@@239| |#$R@@265|))) (and (= ($Box ($Unbox HandleTypeType bx@@109)) bx@@109) ($Is ($Unbox HandleTypeType bx@@109) (Tclass._System.___hPartialFunc1LO |#$T0@@239| |#$R@@265|)))) :qid |unknown.0:0| :skolemid |1242| :pattern ( ($IsBox bx@@109 (Tclass._System.___hPartialFunc1LO |#$T0@@239| |#$R@@265|))) )))
(assert (forall ((|#$T0@@240| T@U) (|#$R@@266| T@U) (|f#0@@51| T@U) ) (!  (=> (and (and (= (type |#$T0@@240|) TyType) (= (type |#$R@@266|) TyType)) (= (type |f#0@@51|) HandleTypeType)) (= ($Is |f#0@@51| (Tclass._System.___hPartialFunc1LO |#$T0@@240| |#$R@@266|))  (and ($Is |f#0@@51| (Tclass._System.___hFunc1LO |#$T0@@240| |#$R@@266|)) (forall ((|x0#0@@21| T@U) ) (!  (=> (and (= (type |x0#0@@21|) BoxType) ($IsBox |x0#0@@21| |#$T0@@240|)) (|Set#Equal| (Reads1 |#$T0@@240| |#$R@@266| $OneHeap |f#0@@51| |x0#0@@21|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1243| :no-pattern (type |x0#0@@21|) :no-pattern (U_2_int |x0#0@@21|) :no-pattern (U_2_bool |x0#0@@21|) ))))) :qid |unknown.0:0| :skolemid |1244| :pattern ( ($Is |f#0@@51| (Tclass._System.___hPartialFunc1LO |#$T0@@240| |#$R@@266|))) )))
(assert (forall ((|#$T0@@241| T@U) (|#$R@@267| T@U) (|f#0@@52| T@U) ($h@@38 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@241|) TyType) (= (type |#$R@@267|) TyType)) (= (type |f#0@@52|) HandleTypeType)) (= (type $h@@38) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@52| (Tclass._System.___hPartialFunc1LO |#$T0@@241| |#$R@@267|) $h@@38) ($IsAlloc |f#0@@52| (Tclass._System.___hFunc1LO |#$T0@@241| |#$R@@267|) $h@@38))) :qid |unknown.0:0| :skolemid |1245| :pattern ( ($IsAlloc |f#0@@52| (Tclass._System.___hPartialFunc1LO |#$T0@@241| |#$R@@267|) $h@@38)) )))
(assert (forall ((arg0@@367 T@U) (arg1@@159 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LO arg0@@367 arg1@@159)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LO| :pattern ( (Tclass._System.___hTotalFunc1LO arg0@@367 arg1@@159)) )))
(assert (forall ((|#$T0@@242| T@U) (|#$R@@268| T@U) ) (!  (=> (and (= (type |#$T0@@242|) TyType) (= (type |#$R@@268|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1LO |#$T0@@242| |#$R@@268|)) Tagclass._System.___hTotalFunc1LO) (= (TagFamily (Tclass._System.___hTotalFunc1LO |#$T0@@242| |#$R@@268|)) |tytagFamily$_#TotalFunc1LO|))) :qid |unknown.0:0| :skolemid |1246| :pattern ( (Tclass._System.___hTotalFunc1LO |#$T0@@242| |#$R@@268|)) )))
(assert (forall ((arg0@@368 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LO_0 arg0@@368)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LO_0| :pattern ( (Tclass._System.___hTotalFunc1LO_0 arg0@@368)) )))
(assert (forall ((|#$T0@@243| T@U) (|#$R@@269| T@U) ) (!  (=> (and (= (type |#$T0@@243|) TyType) (= (type |#$R@@269|) TyType)) (= (Tclass._System.___hTotalFunc1LO_0 (Tclass._System.___hTotalFunc1LO |#$T0@@243| |#$R@@269|)) |#$T0@@243|)) :qid |unknown.0:0| :skolemid |1247| :pattern ( (Tclass._System.___hTotalFunc1LO |#$T0@@243| |#$R@@269|)) )))
(assert (forall ((arg0@@369 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LO_1 arg0@@369)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LO_1| :pattern ( (Tclass._System.___hTotalFunc1LO_1 arg0@@369)) )))
(assert (forall ((|#$T0@@244| T@U) (|#$R@@270| T@U) ) (!  (=> (and (= (type |#$T0@@244|) TyType) (= (type |#$R@@270|) TyType)) (= (Tclass._System.___hTotalFunc1LO_1 (Tclass._System.___hTotalFunc1LO |#$T0@@244| |#$R@@270|)) |#$R@@270|)) :qid |unknown.0:0| :skolemid |1248| :pattern ( (Tclass._System.___hTotalFunc1LO |#$T0@@244| |#$R@@270|)) )))
(assert (forall ((|#$T0@@245| T@U) (|#$R@@271| T@U) (bx@@110 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@245|) TyType) (= (type |#$R@@271|) TyType)) (= (type bx@@110) BoxType)) ($IsBox bx@@110 (Tclass._System.___hTotalFunc1LO |#$T0@@245| |#$R@@271|))) (and (= ($Box ($Unbox HandleTypeType bx@@110)) bx@@110) ($Is ($Unbox HandleTypeType bx@@110) (Tclass._System.___hTotalFunc1LO |#$T0@@245| |#$R@@271|)))) :qid |unknown.0:0| :skolemid |1249| :pattern ( ($IsBox bx@@110 (Tclass._System.___hTotalFunc1LO |#$T0@@245| |#$R@@271|))) )))
(assert (forall ((|#$T0@@246| T@U) (|#$R@@272| T@U) (|f#0@@53| T@U) ) (!  (=> (and (and (= (type |#$T0@@246|) TyType) (= (type |#$R@@272|) TyType)) (= (type |f#0@@53|) HandleTypeType)) (= ($Is |f#0@@53| (Tclass._System.___hTotalFunc1LO |#$T0@@246| |#$R@@272|))  (and ($Is |f#0@@53| (Tclass._System.___hPartialFunc1LO |#$T0@@246| |#$R@@272|)) (forall ((|x0#0@@22| T@U) ) (!  (=> (and (= (type |x0#0@@22|) BoxType) ($IsBox |x0#0@@22| |#$T0@@246|)) (Requires1 |#$T0@@246| |#$R@@272| $OneHeap |f#0@@53| |x0#0@@22|)) :qid |unknown.0:0| :skolemid |1250| :no-pattern (type |x0#0@@22|) :no-pattern (U_2_int |x0#0@@22|) :no-pattern (U_2_bool |x0#0@@22|) ))))) :qid |unknown.0:0| :skolemid |1251| :pattern ( ($Is |f#0@@53| (Tclass._System.___hTotalFunc1LO |#$T0@@246| |#$R@@272|))) )))
(assert (forall ((|#$T0@@247| T@U) (|#$R@@273| T@U) (|f#0@@54| T@U) ($h@@39 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@247|) TyType) (= (type |#$R@@273|) TyType)) (= (type |f#0@@54|) HandleTypeType)) (= (type $h@@39) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@54| (Tclass._System.___hTotalFunc1LO |#$T0@@247| |#$R@@273|) $h@@39) ($IsAlloc |f#0@@54| (Tclass._System.___hPartialFunc1LO |#$T0@@247| |#$R@@273|) $h@@39))) :qid |unknown.0:0| :skolemid |1252| :pattern ( ($IsAlloc |f#0@@54| (Tclass._System.___hTotalFunc1LO |#$T0@@247| |#$R@@273|) $h@@39)) )))
(assert (forall ((arg0@@370 T@U) (arg1@@160 T@U) ) (! (= (type (|#_System._tuple#2OLL._#Make2| arg0@@370 arg1@@160)) DatatypeTypeType) :qid |funType:#_System._tuple#2OLL._#Make2| :pattern ( (|#_System._tuple#2OLL._#Make2| arg0@@370 arg1@@160)) )))
(assert (forall ((|a#14#0#0| T@U) (|a#14#1#0| T@U) ) (!  (=> (and (= (type |a#14#0#0|) BoxType) (= (type |a#14#1#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#2OLL._#Make2| |a#14#0#0| |a#14#1#0|)) |##_System._tuple#2OLL._#Make2|)) :qid |unknown.0:0| :skolemid |1253| :pattern ( (|#_System._tuple#2OLL._#Make2| |a#14#0#0| |a#14#1#0|)) )))
(assert (forall ((d@@10 T@U) ) (!  (=> (= (type d@@10) DatatypeTypeType) (= (_System.Tuple2OLL.___hMake2_q d@@10) (= (DatatypeCtorId d@@10) |##_System._tuple#2OLL._#Make2|))) :qid |unknown.0:0| :skolemid |1254| :pattern ( (_System.Tuple2OLL.___hMake2_q d@@10)) )))
(assert (forall ((d@@11 T@U) ) (!  (=> (and (= (type d@@11) DatatypeTypeType) (_System.Tuple2OLL.___hMake2_q d@@11)) (exists ((|a#15#0#0| T@U) (|a#15#1#0| T@U) ) (!  (and (and (= (type |a#15#0#0|) BoxType) (= (type |a#15#1#0|) BoxType)) (= d@@11 (|#_System._tuple#2OLL._#Make2| |a#15#0#0| |a#15#1#0|))) :qid |unknown.0:0| :skolemid |1255| :no-pattern (type |a#15#0#0|) :no-pattern (type |a#15#1#0|) :no-pattern (U_2_int |a#15#0#0|) :no-pattern (U_2_bool |a#15#0#0|) :no-pattern (U_2_int |a#15#1#0|) :no-pattern (U_2_bool |a#15#1#0|) ))) :qid |unknown.0:0| :skolemid |1256| :pattern ( (_System.Tuple2OLL.___hMake2_q d@@11)) )))
(assert (forall ((arg0@@371 T@U) (arg1@@161 T@U) ) (! (= (type (Tclass._System.Tuple2OLL arg0@@371 arg1@@161)) TyType) :qid |funType:Tclass._System.Tuple2OLL| :pattern ( (Tclass._System.Tuple2OLL arg0@@371 arg1@@161)) )))
(assert (forall ((|_System._tuple#2OLL$T0| T@U) (|_System._tuple#2OLL$T1| T@U) ) (!  (=> (and (= (type |_System._tuple#2OLL$T0|) TyType) (= (type |_System._tuple#2OLL$T1|) TyType)) (and (= (Tag (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0| |_System._tuple#2OLL$T1|)) Tagclass._System.Tuple2OLL) (= (TagFamily (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0| |_System._tuple#2OLL$T1|)) |tytagFamily$_tuple#2OLL|))) :qid |unknown.0:0| :skolemid |1257| :pattern ( (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0| |_System._tuple#2OLL$T1|)) )))
(assert (forall ((arg0@@372 T@U) ) (! (= (type (Tclass._System.Tuple2OLL_0 arg0@@372)) TyType) :qid |funType:Tclass._System.Tuple2OLL_0| :pattern ( (Tclass._System.Tuple2OLL_0 arg0@@372)) )))
(assert (forall ((|_System._tuple#2OLL$T0@@0| T@U) (|_System._tuple#2OLL$T1@@0| T@U) ) (!  (=> (and (= (type |_System._tuple#2OLL$T0@@0|) TyType) (= (type |_System._tuple#2OLL$T1@@0|) TyType)) (= (Tclass._System.Tuple2OLL_0 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@0| |_System._tuple#2OLL$T1@@0|)) |_System._tuple#2OLL$T0@@0|)) :qid |unknown.0:0| :skolemid |1258| :pattern ( (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@0| |_System._tuple#2OLL$T1@@0|)) )))
(assert (forall ((arg0@@373 T@U) ) (! (= (type (Tclass._System.Tuple2OLL_1 arg0@@373)) TyType) :qid |funType:Tclass._System.Tuple2OLL_1| :pattern ( (Tclass._System.Tuple2OLL_1 arg0@@373)) )))
(assert (forall ((|_System._tuple#2OLL$T0@@1| T@U) (|_System._tuple#2OLL$T1@@1| T@U) ) (!  (=> (and (= (type |_System._tuple#2OLL$T0@@1|) TyType) (= (type |_System._tuple#2OLL$T1@@1|) TyType)) (= (Tclass._System.Tuple2OLL_1 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@1| |_System._tuple#2OLL$T1@@1|)) |_System._tuple#2OLL$T1@@1|)) :qid |unknown.0:0| :skolemid |1259| :pattern ( (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@1| |_System._tuple#2OLL$T1@@1|)) )))
(assert (forall ((|_System._tuple#2OLL$T0@@2| T@U) (|_System._tuple#2OLL$T1@@2| T@U) (bx@@111 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2OLL$T0@@2|) TyType) (= (type |_System._tuple#2OLL$T1@@2|) TyType)) (= (type bx@@111) BoxType)) ($IsBox bx@@111 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@2| |_System._tuple#2OLL$T1@@2|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@111)) bx@@111) ($Is ($Unbox DatatypeTypeType bx@@111) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@2| |_System._tuple#2OLL$T1@@2|)))) :qid |unknown.0:0| :skolemid |1260| :pattern ( ($IsBox bx@@111 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@2| |_System._tuple#2OLL$T1@@2|))) )))
(assert (forall ((|_System._tuple#2OLL$T0@@3| T@U) (|_System._tuple#2OLL$T1@@3| T@U) (|a#16#0#0| T@U) (|a#16#1#0| T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2OLL$T0@@3|) TyType) (= (type |_System._tuple#2OLL$T1@@3|) TyType)) (= (type |a#16#0#0|) BoxType)) (= (type |a#16#1#0|) BoxType)) (= ($Is (|#_System._tuple#2OLL._#Make2| |a#16#0#0| |a#16#1#0|) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@3| |_System._tuple#2OLL$T1@@3|))  (and ($IsBox |a#16#0#0| |_System._tuple#2OLL$T0@@3|) ($IsBox |a#16#1#0| |_System._tuple#2OLL$T1@@3|)))) :qid |unknown.0:0| :skolemid |1261| :pattern ( ($Is (|#_System._tuple#2OLL._#Make2| |a#16#0#0| |a#16#1#0|) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@3| |_System._tuple#2OLL$T1@@3|))) )))
(assert (forall ((|_System._tuple#2OLL$T0@@4| T@U) (|_System._tuple#2OLL$T1@@4| T@U) (|a#17#0#0| T@U) (|a#17#1#0| T@U) ($h@@40 T@U) ) (!  (=> (and (and (and (and (and (= (type |_System._tuple#2OLL$T0@@4|) TyType) (= (type |_System._tuple#2OLL$T1@@4|) TyType)) (= (type |a#17#0#0|) BoxType)) (= (type |a#17#1#0|) BoxType)) (= (type $h@@40) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@40)) (= ($IsAlloc (|#_System._tuple#2OLL._#Make2| |a#17#0#0| |a#17#1#0|) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@4| |_System._tuple#2OLL$T1@@4|) $h@@40)  (and ($IsAllocBox |a#17#0#0| |_System._tuple#2OLL$T0@@4| $h@@40) ($IsAllocBox |a#17#1#0| |_System._tuple#2OLL$T1@@4| $h@@40)))) :qid |unknown.0:0| :skolemid |1262| :pattern ( ($IsAlloc (|#_System._tuple#2OLL._#Make2| |a#17#0#0| |a#17#1#0|) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@4| |_System._tuple#2OLL$T1@@4|) $h@@40)) )))
(assert (forall ((arg0@@374 T@U) ) (! (= (type (_System.Tuple2OLL._0 arg0@@374)) BoxType) :qid |funType:_System.Tuple2OLL._0| :pattern ( (_System.Tuple2OLL._0 arg0@@374)) )))
(assert (forall ((d@@12 T@U) (|_System._tuple#2OLL$T0@@5| T@U) ($h@@41 T@U) ) (!  (=> (and (and (and (= (type d@@12) DatatypeTypeType) (= (type |_System._tuple#2OLL$T0@@5|) TyType)) (= (type $h@@41) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@41) (and (_System.Tuple2OLL.___hMake2_q d@@12) (exists ((|_System._tuple#2OLL$T1@@5| T@U) ) (!  (and (= (type |_System._tuple#2OLL$T1@@5|) TyType) ($IsAlloc d@@12 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@5| |_System._tuple#2OLL$T1@@5|) $h@@41)) :qid |unknown.0:0| :skolemid |1263| :pattern ( ($IsAlloc d@@12 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@5| |_System._tuple#2OLL$T1@@5|) $h@@41)) ))))) ($IsAllocBox (_System.Tuple2OLL._0 d@@12) |_System._tuple#2OLL$T0@@5| $h@@41)) :qid |unknown.0:0| :skolemid |1264| :pattern ( ($IsAllocBox (_System.Tuple2OLL._0 d@@12) |_System._tuple#2OLL$T0@@5| $h@@41)) )))
(assert (forall ((arg0@@375 T@U) ) (! (= (type (_System.Tuple2OLL._1 arg0@@375)) BoxType) :qid |funType:_System.Tuple2OLL._1| :pattern ( (_System.Tuple2OLL._1 arg0@@375)) )))
(assert (forall ((d@@13 T@U) (|_System._tuple#2OLL$T1@@6| T@U) ($h@@42 T@U) ) (!  (=> (and (and (and (= (type d@@13) DatatypeTypeType) (= (type |_System._tuple#2OLL$T1@@6|) TyType)) (= (type $h@@42) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@42) (and (_System.Tuple2OLL.___hMake2_q d@@13) (exists ((|_System._tuple#2OLL$T0@@6| T@U) ) (!  (and (= (type |_System._tuple#2OLL$T0@@6|) TyType) ($IsAlloc d@@13 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@6| |_System._tuple#2OLL$T1@@6|) $h@@42)) :qid |unknown.0:0| :skolemid |1265| :pattern ( ($IsAlloc d@@13 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@6| |_System._tuple#2OLL$T1@@6|) $h@@42)) ))))) ($IsAllocBox (_System.Tuple2OLL._1 d@@13) |_System._tuple#2OLL$T1@@6| $h@@42)) :qid |unknown.0:0| :skolemid |1266| :pattern ( ($IsAllocBox (_System.Tuple2OLL._1 d@@13) |_System._tuple#2OLL$T1@@6| $h@@42)) )))
(assert (forall ((|a#18#0#0| T@U) (|a#18#1#0| T@U) ) (!  (=> (and (= (type |a#18#0#0|) BoxType) (= (type |a#18#1#0|) BoxType)) (= (|#_System._tuple#2OLL._#Make2| (Lit |a#18#0#0|) (Lit |a#18#1#0|)) (Lit (|#_System._tuple#2OLL._#Make2| |a#18#0#0| |a#18#1#0|)))) :qid |unknown.0:0| :skolemid |1267| :pattern ( (|#_System._tuple#2OLL._#Make2| (Lit |a#18#0#0|) (Lit |a#18#1#0|))) )))
(assert (forall ((|a#19#0#0| T@U) (|a#19#1#0| T@U) ) (!  (=> (and (= (type |a#19#0#0|) BoxType) (= (type |a#19#1#0|) BoxType)) (= (_System.Tuple2OLL._0 (|#_System._tuple#2OLL._#Make2| |a#19#0#0| |a#19#1#0|)) |a#19#0#0|)) :qid |unknown.0:0| :skolemid |1268| :pattern ( (|#_System._tuple#2OLL._#Make2| |a#19#0#0| |a#19#1#0|)) )))
(assert (forall ((|a#20#0#0| T@U) (|a#20#1#0| T@U) ) (!  (=> (and (= (type |a#20#0#0|) BoxType) (= (type |a#20#1#0|) BoxType)) (< (BoxRank |a#20#0#0|) (DtRank (|#_System._tuple#2OLL._#Make2| |a#20#0#0| |a#20#1#0|)))) :qid |unknown.0:0| :skolemid |1269| :pattern ( (|#_System._tuple#2OLL._#Make2| |a#20#0#0| |a#20#1#0|)) )))
(assert (forall ((|a#21#0#0| T@U) (|a#21#1#0| T@U) ) (!  (=> (and (= (type |a#21#0#0|) BoxType) (= (type |a#21#1#0|) BoxType)) (= (_System.Tuple2OLL._1 (|#_System._tuple#2OLL._#Make2| |a#21#0#0| |a#21#1#0|)) |a#21#1#0|)) :qid |unknown.0:0| :skolemid |1270| :pattern ( (|#_System._tuple#2OLL._#Make2| |a#21#0#0| |a#21#1#0|)) )))
(assert (forall ((|a#22#0#0| T@U) (|a#22#1#0| T@U) ) (!  (=> (and (= (type |a#22#0#0|) BoxType) (= (type |a#22#1#0|) BoxType)) (< (BoxRank |a#22#1#0|) (DtRank (|#_System._tuple#2OLL._#Make2| |a#22#0#0| |a#22#1#0|)))) :qid |unknown.0:0| :skolemid |1271| :pattern ( (|#_System._tuple#2OLL._#Make2| |a#22#0#0| |a#22#1#0|)) )))
(assert (forall ((d@@14 T@U) ) (!  (=> (and (= (type d@@14) DatatypeTypeType) (|$IsA#_System.Tuple2OLL| d@@14)) (_System.Tuple2OLL.___hMake2_q d@@14)) :qid |unknown.0:0| :skolemid |1272| :pattern ( (|$IsA#_System.Tuple2OLL| d@@14)) )))
(assert (forall ((|_System._tuple#2OLL$T0@@7| T@U) (|_System._tuple#2OLL$T1@@7| T@U) (d@@15 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2OLL$T0@@7|) TyType) (= (type |_System._tuple#2OLL$T1@@7|) TyType)) (= (type d@@15) DatatypeTypeType)) ($Is d@@15 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@7| |_System._tuple#2OLL$T1@@7|))) (_System.Tuple2OLL.___hMake2_q d@@15)) :qid |unknown.0:0| :skolemid |1273| :pattern ( (_System.Tuple2OLL.___hMake2_q d@@15) ($Is d@@15 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@7| |_System._tuple#2OLL$T1@@7|))) )))
(assert (forall ((a@@128 T@U) (b@@65 T@U) ) (!  (=> (and (and (= (type a@@128) DatatypeTypeType) (= (type b@@65) DatatypeTypeType)) true) (= (|_System.Tuple2OLL#Equal| a@@128 b@@65)  (and (= (_System.Tuple2OLL._0 a@@128) (_System.Tuple2OLL._0 b@@65)) (= (_System.Tuple2OLL._1 a@@128) (_System.Tuple2OLL._1 b@@65))))) :qid |unknown.0:0| :skolemid |1274| :pattern ( (|_System.Tuple2OLL#Equal| a@@128 b@@65)) )))
(assert (forall ((a@@129 T@U) (b@@66 T@U) ) (!  (=> (and (= (type a@@129) DatatypeTypeType) (= (type b@@66) DatatypeTypeType)) (= (|_System.Tuple2OLL#Equal| a@@129 b@@66) (= a@@129 b@@66))) :qid |unknown.0:0| :skolemid |1275| :pattern ( (|_System.Tuple2OLL#Equal| a@@129 b@@66)) )))
(assert (forall ((arg0@@376 T@U) (arg1@@162 T@U) (arg2@@103 T@U) (arg3@@73 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL arg0@@376 arg1@@162 arg2@@103 arg3@@73)) TyType) :qid |funType:Tclass._System.___hFunc3LLOL| :pattern ( (Tclass._System.___hFunc3LLOL arg0@@376 arg1@@162 arg2@@103 arg3@@73)) )))
(assert (forall ((|#$T0@@248| T@U) (|#$T1@@184| T@U) (|#$T2@@127| T@U) (|#$R@@274| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@248|) TyType) (= (type |#$T1@@184|) TyType)) (= (type |#$T2@@127|) TyType)) (= (type |#$R@@274|) TyType)) (and (= (Tag (Tclass._System.___hFunc3LLOL |#$T0@@248| |#$T1@@184| |#$T2@@127| |#$R@@274|)) Tagclass._System.___hFunc3LLOL) (= (TagFamily (Tclass._System.___hFunc3LLOL |#$T0@@248| |#$T1@@184| |#$T2@@127| |#$R@@274|)) |tytagFamily$_#Func3LLOL|))) :qid |unknown.0:0| :skolemid |1276| :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@248| |#$T1@@184| |#$T2@@127| |#$R@@274|)) )))
(assert (forall ((arg0@@377 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL_0 arg0@@377)) TyType) :qid |funType:Tclass._System.___hFunc3LLOL_0| :pattern ( (Tclass._System.___hFunc3LLOL_0 arg0@@377)) )))
(assert (forall ((|#$T0@@249| T@U) (|#$T1@@185| T@U) (|#$T2@@128| T@U) (|#$R@@275| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@249|) TyType) (= (type |#$T1@@185|) TyType)) (= (type |#$T2@@128|) TyType)) (= (type |#$R@@275|) TyType)) (= (Tclass._System.___hFunc3LLOL_0 (Tclass._System.___hFunc3LLOL |#$T0@@249| |#$T1@@185| |#$T2@@128| |#$R@@275|)) |#$T0@@249|)) :qid |unknown.0:0| :skolemid |1277| :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@249| |#$T1@@185| |#$T2@@128| |#$R@@275|)) )))
(assert (forall ((arg0@@378 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL_1 arg0@@378)) TyType) :qid |funType:Tclass._System.___hFunc3LLOL_1| :pattern ( (Tclass._System.___hFunc3LLOL_1 arg0@@378)) )))
(assert (forall ((|#$T0@@250| T@U) (|#$T1@@186| T@U) (|#$T2@@129| T@U) (|#$R@@276| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@250|) TyType) (= (type |#$T1@@186|) TyType)) (= (type |#$T2@@129|) TyType)) (= (type |#$R@@276|) TyType)) (= (Tclass._System.___hFunc3LLOL_1 (Tclass._System.___hFunc3LLOL |#$T0@@250| |#$T1@@186| |#$T2@@129| |#$R@@276|)) |#$T1@@186|)) :qid |unknown.0:0| :skolemid |1278| :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@250| |#$T1@@186| |#$T2@@129| |#$R@@276|)) )))
(assert (forall ((arg0@@379 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL_2 arg0@@379)) TyType) :qid |funType:Tclass._System.___hFunc3LLOL_2| :pattern ( (Tclass._System.___hFunc3LLOL_2 arg0@@379)) )))
(assert (forall ((|#$T0@@251| T@U) (|#$T1@@187| T@U) (|#$T2@@130| T@U) (|#$R@@277| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@251|) TyType) (= (type |#$T1@@187|) TyType)) (= (type |#$T2@@130|) TyType)) (= (type |#$R@@277|) TyType)) (= (Tclass._System.___hFunc3LLOL_2 (Tclass._System.___hFunc3LLOL |#$T0@@251| |#$T1@@187| |#$T2@@130| |#$R@@277|)) |#$T2@@130|)) :qid |unknown.0:0| :skolemid |1279| :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@251| |#$T1@@187| |#$T2@@130| |#$R@@277|)) )))
(assert (forall ((arg0@@380 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL_3 arg0@@380)) TyType) :qid |funType:Tclass._System.___hFunc3LLOL_3| :pattern ( (Tclass._System.___hFunc3LLOL_3 arg0@@380)) )))
(assert (forall ((|#$T0@@252| T@U) (|#$T1@@188| T@U) (|#$T2@@131| T@U) (|#$R@@278| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@252|) TyType) (= (type |#$T1@@188|) TyType)) (= (type |#$T2@@131|) TyType)) (= (type |#$R@@278|) TyType)) (= (Tclass._System.___hFunc3LLOL_3 (Tclass._System.___hFunc3LLOL |#$T0@@252| |#$T1@@188| |#$T2@@131| |#$R@@278|)) |#$R@@278|)) :qid |unknown.0:0| :skolemid |1280| :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@252| |#$T1@@188| |#$T2@@131| |#$R@@278|)) )))
(assert (forall ((|#$T0@@253| T@U) (|#$T1@@189| T@U) (|#$T2@@132| T@U) (|#$R@@279| T@U) (bx@@112 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@253|) TyType) (= (type |#$T1@@189|) TyType)) (= (type |#$T2@@132|) TyType)) (= (type |#$R@@279|) TyType)) (= (type bx@@112) BoxType)) ($IsBox bx@@112 (Tclass._System.___hFunc3LLOL |#$T0@@253| |#$T1@@189| |#$T2@@132| |#$R@@279|))) (and (= ($Box ($Unbox HandleTypeType bx@@112)) bx@@112) ($Is ($Unbox HandleTypeType bx@@112) (Tclass._System.___hFunc3LLOL |#$T0@@253| |#$T1@@189| |#$T2@@132| |#$R@@279|)))) :qid |unknown.0:0| :skolemid |1281| :pattern ( ($IsBox bx@@112 (Tclass._System.___hFunc3LLOL |#$T0@@253| |#$T1@@189| |#$T2@@132| |#$R@@279|))) )))
(assert (forall ((arg0@@381 T@U) (arg1@@163 T@U) (arg2@@104 T@U) (arg3@@74 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL arg0@@381 arg1@@163 arg2@@104 arg3@@74)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOL| :pattern ( (Tclass._System.___hPartialFunc3LLOL arg0@@381 arg1@@163 arg2@@104 arg3@@74)) )))
(assert (forall ((|#$T0@@254| T@U) (|#$T1@@190| T@U) (|#$T2@@133| T@U) (|#$R@@280| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@254|) TyType) (= (type |#$T1@@190|) TyType)) (= (type |#$T2@@133|) TyType)) (= (type |#$R@@280|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc3LLOL |#$T0@@254| |#$T1@@190| |#$T2@@133| |#$R@@280|)) Tagclass._System.___hPartialFunc3LLOL) (= (TagFamily (Tclass._System.___hPartialFunc3LLOL |#$T0@@254| |#$T1@@190| |#$T2@@133| |#$R@@280|)) |tytagFamily$_#PartialFunc3LLOL|))) :qid |unknown.0:0| :skolemid |1282| :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@254| |#$T1@@190| |#$T2@@133| |#$R@@280|)) )))
(assert (forall ((arg0@@382 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL_0 arg0@@382)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOL_0| :pattern ( (Tclass._System.___hPartialFunc3LLOL_0 arg0@@382)) )))
(assert (forall ((|#$T0@@255| T@U) (|#$T1@@191| T@U) (|#$T2@@134| T@U) (|#$R@@281| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@255|) TyType) (= (type |#$T1@@191|) TyType)) (= (type |#$T2@@134|) TyType)) (= (type |#$R@@281|) TyType)) (= (Tclass._System.___hPartialFunc3LLOL_0 (Tclass._System.___hPartialFunc3LLOL |#$T0@@255| |#$T1@@191| |#$T2@@134| |#$R@@281|)) |#$T0@@255|)) :qid |unknown.0:0| :skolemid |1283| :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@255| |#$T1@@191| |#$T2@@134| |#$R@@281|)) )))
(assert (forall ((arg0@@383 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL_1 arg0@@383)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOL_1| :pattern ( (Tclass._System.___hPartialFunc3LLOL_1 arg0@@383)) )))
(assert (forall ((|#$T0@@256| T@U) (|#$T1@@192| T@U) (|#$T2@@135| T@U) (|#$R@@282| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@256|) TyType) (= (type |#$T1@@192|) TyType)) (= (type |#$T2@@135|) TyType)) (= (type |#$R@@282|) TyType)) (= (Tclass._System.___hPartialFunc3LLOL_1 (Tclass._System.___hPartialFunc3LLOL |#$T0@@256| |#$T1@@192| |#$T2@@135| |#$R@@282|)) |#$T1@@192|)) :qid |unknown.0:0| :skolemid |1284| :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@256| |#$T1@@192| |#$T2@@135| |#$R@@282|)) )))
(assert (forall ((arg0@@384 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL_2 arg0@@384)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOL_2| :pattern ( (Tclass._System.___hPartialFunc3LLOL_2 arg0@@384)) )))
(assert (forall ((|#$T0@@257| T@U) (|#$T1@@193| T@U) (|#$T2@@136| T@U) (|#$R@@283| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@257|) TyType) (= (type |#$T1@@193|) TyType)) (= (type |#$T2@@136|) TyType)) (= (type |#$R@@283|) TyType)) (= (Tclass._System.___hPartialFunc3LLOL_2 (Tclass._System.___hPartialFunc3LLOL |#$T0@@257| |#$T1@@193| |#$T2@@136| |#$R@@283|)) |#$T2@@136|)) :qid |unknown.0:0| :skolemid |1285| :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@257| |#$T1@@193| |#$T2@@136| |#$R@@283|)) )))
(assert (forall ((arg0@@385 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL_3 arg0@@385)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOL_3| :pattern ( (Tclass._System.___hPartialFunc3LLOL_3 arg0@@385)) )))
(assert (forall ((|#$T0@@258| T@U) (|#$T1@@194| T@U) (|#$T2@@137| T@U) (|#$R@@284| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@258|) TyType) (= (type |#$T1@@194|) TyType)) (= (type |#$T2@@137|) TyType)) (= (type |#$R@@284|) TyType)) (= (Tclass._System.___hPartialFunc3LLOL_3 (Tclass._System.___hPartialFunc3LLOL |#$T0@@258| |#$T1@@194| |#$T2@@137| |#$R@@284|)) |#$R@@284|)) :qid |unknown.0:0| :skolemid |1286| :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@258| |#$T1@@194| |#$T2@@137| |#$R@@284|)) )))
(assert (forall ((|#$T0@@259| T@U) (|#$T1@@195| T@U) (|#$T2@@138| T@U) (|#$R@@285| T@U) (bx@@113 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@259|) TyType) (= (type |#$T1@@195|) TyType)) (= (type |#$T2@@138|) TyType)) (= (type |#$R@@285|) TyType)) (= (type bx@@113) BoxType)) ($IsBox bx@@113 (Tclass._System.___hPartialFunc3LLOL |#$T0@@259| |#$T1@@195| |#$T2@@138| |#$R@@285|))) (and (= ($Box ($Unbox HandleTypeType bx@@113)) bx@@113) ($Is ($Unbox HandleTypeType bx@@113) (Tclass._System.___hPartialFunc3LLOL |#$T0@@259| |#$T1@@195| |#$T2@@138| |#$R@@285|)))) :qid |unknown.0:0| :skolemid |1287| :pattern ( ($IsBox bx@@113 (Tclass._System.___hPartialFunc3LLOL |#$T0@@259| |#$T1@@195| |#$T2@@138| |#$R@@285|))) )))
(assert (forall ((|#$T0@@260| T@U) (|#$T1@@196| T@U) (|#$T2@@139| T@U) (|#$R@@286| T@U) (|f#0@@55| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@260|) TyType) (= (type |#$T1@@196|) TyType)) (= (type |#$T2@@139|) TyType)) (= (type |#$R@@286|) TyType)) (= (type |f#0@@55|) HandleTypeType)) (= ($Is |f#0@@55| (Tclass._System.___hPartialFunc3LLOL |#$T0@@260| |#$T1@@196| |#$T2@@139| |#$R@@286|))  (and ($Is |f#0@@55| (Tclass._System.___hFunc3LLOL |#$T0@@260| |#$T1@@196| |#$T2@@139| |#$R@@286|)) (forall ((|x0#0@@23| T@U) (|x1#0@@15| T@U) (|x2#0@@9| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@23|) BoxType) (= (type |x1#0@@15|) BoxType)) (= (type |x2#0@@9|) BoxType)) (and (and ($IsBox |x0#0@@23| |#$T0@@260|) ($IsBox |x1#0@@15| |#$T1@@196|)) ($IsBox |x2#0@@9| |#$T2@@139|))) (|Set#Equal| (Reads3 |#$T0@@260| |#$T1@@196| |#$T2@@139| |#$R@@286| $OneHeap |f#0@@55| |x0#0@@23| |x1#0@@15| |x2#0@@9|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1288| :no-pattern (type |x0#0@@23|) :no-pattern (type |x1#0@@15|) :no-pattern (type |x2#0@@9|) :no-pattern (U_2_int |x0#0@@23|) :no-pattern (U_2_bool |x0#0@@23|) :no-pattern (U_2_int |x1#0@@15|) :no-pattern (U_2_bool |x1#0@@15|) :no-pattern (U_2_int |x2#0@@9|) :no-pattern (U_2_bool |x2#0@@9|) ))))) :qid |unknown.0:0| :skolemid |1289| :pattern ( ($Is |f#0@@55| (Tclass._System.___hPartialFunc3LLOL |#$T0@@260| |#$T1@@196| |#$T2@@139| |#$R@@286|))) )))
(assert (forall ((|#$T0@@261| T@U) (|#$T1@@197| T@U) (|#$T2@@140| T@U) (|#$R@@287| T@U) (|f#0@@56| T@U) ($h@@43 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@261|) TyType) (= (type |#$T1@@197|) TyType)) (= (type |#$T2@@140|) TyType)) (= (type |#$R@@287|) TyType)) (= (type |f#0@@56|) HandleTypeType)) (= (type $h@@43) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@56| (Tclass._System.___hPartialFunc3LLOL |#$T0@@261| |#$T1@@197| |#$T2@@140| |#$R@@287|) $h@@43) ($IsAlloc |f#0@@56| (Tclass._System.___hFunc3LLOL |#$T0@@261| |#$T1@@197| |#$T2@@140| |#$R@@287|) $h@@43))) :qid |unknown.0:0| :skolemid |1290| :pattern ( ($IsAlloc |f#0@@56| (Tclass._System.___hPartialFunc3LLOL |#$T0@@261| |#$T1@@197| |#$T2@@140| |#$R@@287|) $h@@43)) )))
(assert (forall ((arg0@@386 T@U) (arg1@@164 T@U) (arg2@@105 T@U) (arg3@@75 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL arg0@@386 arg1@@164 arg2@@105 arg3@@75)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOL| :pattern ( (Tclass._System.___hTotalFunc3LLOL arg0@@386 arg1@@164 arg2@@105 arg3@@75)) )))
(assert (forall ((|#$T0@@262| T@U) (|#$T1@@198| T@U) (|#$T2@@141| T@U) (|#$R@@288| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@262|) TyType) (= (type |#$T1@@198|) TyType)) (= (type |#$T2@@141|) TyType)) (= (type |#$R@@288|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc3LLOL |#$T0@@262| |#$T1@@198| |#$T2@@141| |#$R@@288|)) Tagclass._System.___hTotalFunc3LLOL) (= (TagFamily (Tclass._System.___hTotalFunc3LLOL |#$T0@@262| |#$T1@@198| |#$T2@@141| |#$R@@288|)) |tytagFamily$_#TotalFunc3LLOL|))) :qid |unknown.0:0| :skolemid |1291| :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@262| |#$T1@@198| |#$T2@@141| |#$R@@288|)) )))
(assert (forall ((arg0@@387 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL_0 arg0@@387)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOL_0| :pattern ( (Tclass._System.___hTotalFunc3LLOL_0 arg0@@387)) )))
(assert (forall ((|#$T0@@263| T@U) (|#$T1@@199| T@U) (|#$T2@@142| T@U) (|#$R@@289| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@263|) TyType) (= (type |#$T1@@199|) TyType)) (= (type |#$T2@@142|) TyType)) (= (type |#$R@@289|) TyType)) (= (Tclass._System.___hTotalFunc3LLOL_0 (Tclass._System.___hTotalFunc3LLOL |#$T0@@263| |#$T1@@199| |#$T2@@142| |#$R@@289|)) |#$T0@@263|)) :qid |unknown.0:0| :skolemid |1292| :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@263| |#$T1@@199| |#$T2@@142| |#$R@@289|)) )))
(assert (forall ((arg0@@388 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL_1 arg0@@388)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOL_1| :pattern ( (Tclass._System.___hTotalFunc3LLOL_1 arg0@@388)) )))
(assert (forall ((|#$T0@@264| T@U) (|#$T1@@200| T@U) (|#$T2@@143| T@U) (|#$R@@290| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@264|) TyType) (= (type |#$T1@@200|) TyType)) (= (type |#$T2@@143|) TyType)) (= (type |#$R@@290|) TyType)) (= (Tclass._System.___hTotalFunc3LLOL_1 (Tclass._System.___hTotalFunc3LLOL |#$T0@@264| |#$T1@@200| |#$T2@@143| |#$R@@290|)) |#$T1@@200|)) :qid |unknown.0:0| :skolemid |1293| :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@264| |#$T1@@200| |#$T2@@143| |#$R@@290|)) )))
(assert (forall ((arg0@@389 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL_2 arg0@@389)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOL_2| :pattern ( (Tclass._System.___hTotalFunc3LLOL_2 arg0@@389)) )))
(assert (forall ((|#$T0@@265| T@U) (|#$T1@@201| T@U) (|#$T2@@144| T@U) (|#$R@@291| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@265|) TyType) (= (type |#$T1@@201|) TyType)) (= (type |#$T2@@144|) TyType)) (= (type |#$R@@291|) TyType)) (= (Tclass._System.___hTotalFunc3LLOL_2 (Tclass._System.___hTotalFunc3LLOL |#$T0@@265| |#$T1@@201| |#$T2@@144| |#$R@@291|)) |#$T2@@144|)) :qid |unknown.0:0| :skolemid |1294| :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@265| |#$T1@@201| |#$T2@@144| |#$R@@291|)) )))
(assert (forall ((arg0@@390 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL_3 arg0@@390)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOL_3| :pattern ( (Tclass._System.___hTotalFunc3LLOL_3 arg0@@390)) )))
(assert (forall ((|#$T0@@266| T@U) (|#$T1@@202| T@U) (|#$T2@@145| T@U) (|#$R@@292| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@266|) TyType) (= (type |#$T1@@202|) TyType)) (= (type |#$T2@@145|) TyType)) (= (type |#$R@@292|) TyType)) (= (Tclass._System.___hTotalFunc3LLOL_3 (Tclass._System.___hTotalFunc3LLOL |#$T0@@266| |#$T1@@202| |#$T2@@145| |#$R@@292|)) |#$R@@292|)) :qid |unknown.0:0| :skolemid |1295| :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@266| |#$T1@@202| |#$T2@@145| |#$R@@292|)) )))
(assert (forall ((|#$T0@@267| T@U) (|#$T1@@203| T@U) (|#$T2@@146| T@U) (|#$R@@293| T@U) (bx@@114 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@267|) TyType) (= (type |#$T1@@203|) TyType)) (= (type |#$T2@@146|) TyType)) (= (type |#$R@@293|) TyType)) (= (type bx@@114) BoxType)) ($IsBox bx@@114 (Tclass._System.___hTotalFunc3LLOL |#$T0@@267| |#$T1@@203| |#$T2@@146| |#$R@@293|))) (and (= ($Box ($Unbox HandleTypeType bx@@114)) bx@@114) ($Is ($Unbox HandleTypeType bx@@114) (Tclass._System.___hTotalFunc3LLOL |#$T0@@267| |#$T1@@203| |#$T2@@146| |#$R@@293|)))) :qid |unknown.0:0| :skolemid |1296| :pattern ( ($IsBox bx@@114 (Tclass._System.___hTotalFunc3LLOL |#$T0@@267| |#$T1@@203| |#$T2@@146| |#$R@@293|))) )))
(assert (forall ((|#$T0@@268| T@U) (|#$T1@@204| T@U) (|#$T2@@147| T@U) (|#$R@@294| T@U) (|f#0@@57| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@268|) TyType) (= (type |#$T1@@204|) TyType)) (= (type |#$T2@@147|) TyType)) (= (type |#$R@@294|) TyType)) (= (type |f#0@@57|) HandleTypeType)) (= ($Is |f#0@@57| (Tclass._System.___hTotalFunc3LLOL |#$T0@@268| |#$T1@@204| |#$T2@@147| |#$R@@294|))  (and ($Is |f#0@@57| (Tclass._System.___hPartialFunc3LLOL |#$T0@@268| |#$T1@@204| |#$T2@@147| |#$R@@294|)) (forall ((|x0#0@@24| T@U) (|x1#0@@16| T@U) (|x2#0@@10| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@24|) BoxType) (= (type |x1#0@@16|) BoxType)) (= (type |x2#0@@10|) BoxType)) (and (and ($IsBox |x0#0@@24| |#$T0@@268|) ($IsBox |x1#0@@16| |#$T1@@204|)) ($IsBox |x2#0@@10| |#$T2@@147|))) (Requires3 |#$T0@@268| |#$T1@@204| |#$T2@@147| |#$R@@294| $OneHeap |f#0@@57| |x0#0@@24| |x1#0@@16| |x2#0@@10|)) :qid |unknown.0:0| :skolemid |1297| :no-pattern (type |x0#0@@24|) :no-pattern (type |x1#0@@16|) :no-pattern (type |x2#0@@10|) :no-pattern (U_2_int |x0#0@@24|) :no-pattern (U_2_bool |x0#0@@24|) :no-pattern (U_2_int |x1#0@@16|) :no-pattern (U_2_bool |x1#0@@16|) :no-pattern (U_2_int |x2#0@@10|) :no-pattern (U_2_bool |x2#0@@10|) ))))) :qid |unknown.0:0| :skolemid |1298| :pattern ( ($Is |f#0@@57| (Tclass._System.___hTotalFunc3LLOL |#$T0@@268| |#$T1@@204| |#$T2@@147| |#$R@@294|))) )))
(assert (forall ((|#$T0@@269| T@U) (|#$T1@@205| T@U) (|#$T2@@148| T@U) (|#$R@@295| T@U) (|f#0@@58| T@U) ($h@@44 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@269|) TyType) (= (type |#$T1@@205|) TyType)) (= (type |#$T2@@148|) TyType)) (= (type |#$R@@295|) TyType)) (= (type |f#0@@58|) HandleTypeType)) (= (type $h@@44) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@58| (Tclass._System.___hTotalFunc3LLOL |#$T0@@269| |#$T1@@205| |#$T2@@148| |#$R@@295|) $h@@44) ($IsAlloc |f#0@@58| (Tclass._System.___hPartialFunc3LLOL |#$T0@@269| |#$T1@@205| |#$T2@@148| |#$R@@295|) $h@@44))) :qid |unknown.0:0| :skolemid |1299| :pattern ( ($IsAlloc |f#0@@58| (Tclass._System.___hTotalFunc3LLOL |#$T0@@269| |#$T1@@205| |#$T2@@148| |#$R@@295|) $h@@44)) )))
(assert (forall ((arg0@@391 T@U) (arg1@@165 T@U) (arg2@@106 T@U) ) (! (= (type (Tclass._System.___hFunc2SSO arg0@@391 arg1@@165 arg2@@106)) TyType) :qid |funType:Tclass._System.___hFunc2SSO| :pattern ( (Tclass._System.___hFunc2SSO arg0@@391 arg1@@165 arg2@@106)) )))
(assert (forall ((|#$T0@@270| T@U) (|#$T1@@206| T@U) (|#$R@@296| T@U) ) (!  (=> (and (and (= (type |#$T0@@270|) TyType) (= (type |#$T1@@206|) TyType)) (= (type |#$R@@296|) TyType)) (and (= (Tag (Tclass._System.___hFunc2SSO |#$T0@@270| |#$T1@@206| |#$R@@296|)) Tagclass._System.___hFunc2SSO) (= (TagFamily (Tclass._System.___hFunc2SSO |#$T0@@270| |#$T1@@206| |#$R@@296|)) |tytagFamily$_#Func2SSO|))) :qid |unknown.0:0| :skolemid |1300| :pattern ( (Tclass._System.___hFunc2SSO |#$T0@@270| |#$T1@@206| |#$R@@296|)) )))
(assert (forall ((arg0@@392 T@U) ) (! (= (type (Tclass._System.___hFunc2SSO_0 arg0@@392)) TyType) :qid |funType:Tclass._System.___hFunc2SSO_0| :pattern ( (Tclass._System.___hFunc2SSO_0 arg0@@392)) )))
(assert (forall ((|#$T0@@271| T@U) (|#$T1@@207| T@U) (|#$R@@297| T@U) ) (!  (=> (and (and (= (type |#$T0@@271|) TyType) (= (type |#$T1@@207|) TyType)) (= (type |#$R@@297|) TyType)) (= (Tclass._System.___hFunc2SSO_0 (Tclass._System.___hFunc2SSO |#$T0@@271| |#$T1@@207| |#$R@@297|)) |#$T0@@271|)) :qid |unknown.0:0| :skolemid |1301| :pattern ( (Tclass._System.___hFunc2SSO |#$T0@@271| |#$T1@@207| |#$R@@297|)) )))
(assert (forall ((arg0@@393 T@U) ) (! (= (type (Tclass._System.___hFunc2SSO_1 arg0@@393)) TyType) :qid |funType:Tclass._System.___hFunc2SSO_1| :pattern ( (Tclass._System.___hFunc2SSO_1 arg0@@393)) )))
(assert (forall ((|#$T0@@272| T@U) (|#$T1@@208| T@U) (|#$R@@298| T@U) ) (!  (=> (and (and (= (type |#$T0@@272|) TyType) (= (type |#$T1@@208|) TyType)) (= (type |#$R@@298|) TyType)) (= (Tclass._System.___hFunc2SSO_1 (Tclass._System.___hFunc2SSO |#$T0@@272| |#$T1@@208| |#$R@@298|)) |#$T1@@208|)) :qid |unknown.0:0| :skolemid |1302| :pattern ( (Tclass._System.___hFunc2SSO |#$T0@@272| |#$T1@@208| |#$R@@298|)) )))
(assert (forall ((arg0@@394 T@U) ) (! (= (type (Tclass._System.___hFunc2SSO_2 arg0@@394)) TyType) :qid |funType:Tclass._System.___hFunc2SSO_2| :pattern ( (Tclass._System.___hFunc2SSO_2 arg0@@394)) )))
(assert (forall ((|#$T0@@273| T@U) (|#$T1@@209| T@U) (|#$R@@299| T@U) ) (!  (=> (and (and (= (type |#$T0@@273|) TyType) (= (type |#$T1@@209|) TyType)) (= (type |#$R@@299|) TyType)) (= (Tclass._System.___hFunc2SSO_2 (Tclass._System.___hFunc2SSO |#$T0@@273| |#$T1@@209| |#$R@@299|)) |#$R@@299|)) :qid |unknown.0:0| :skolemid |1303| :pattern ( (Tclass._System.___hFunc2SSO |#$T0@@273| |#$T1@@209| |#$R@@299|)) )))
(assert (forall ((|#$T0@@274| T@U) (|#$T1@@210| T@U) (|#$R@@300| T@U) (bx@@115 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@274|) TyType) (= (type |#$T1@@210|) TyType)) (= (type |#$R@@300|) TyType)) (= (type bx@@115) BoxType)) ($IsBox bx@@115 (Tclass._System.___hFunc2SSO |#$T0@@274| |#$T1@@210| |#$R@@300|))) (and (= ($Box ($Unbox HandleTypeType bx@@115)) bx@@115) ($Is ($Unbox HandleTypeType bx@@115) (Tclass._System.___hFunc2SSO |#$T0@@274| |#$T1@@210| |#$R@@300|)))) :qid |unknown.0:0| :skolemid |1304| :pattern ( ($IsBox bx@@115 (Tclass._System.___hFunc2SSO |#$T0@@274| |#$T1@@210| |#$R@@300|))) )))
(assert (forall ((arg0@@395 T@U) (arg1@@166 T@U) (arg2@@107 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2SSO arg0@@395 arg1@@166 arg2@@107)) TyType) :qid |funType:Tclass._System.___hPartialFunc2SSO| :pattern ( (Tclass._System.___hPartialFunc2SSO arg0@@395 arg1@@166 arg2@@107)) )))
(assert (forall ((|#$T0@@275| T@U) (|#$T1@@211| T@U) (|#$R@@301| T@U) ) (!  (=> (and (and (= (type |#$T0@@275|) TyType) (= (type |#$T1@@211|) TyType)) (= (type |#$R@@301|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2SSO |#$T0@@275| |#$T1@@211| |#$R@@301|)) Tagclass._System.___hPartialFunc2SSO) (= (TagFamily (Tclass._System.___hPartialFunc2SSO |#$T0@@275| |#$T1@@211| |#$R@@301|)) |tytagFamily$_#PartialFunc2SSO|))) :qid |unknown.0:0| :skolemid |1305| :pattern ( (Tclass._System.___hPartialFunc2SSO |#$T0@@275| |#$T1@@211| |#$R@@301|)) )))
(assert (forall ((arg0@@396 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2SSO_0 arg0@@396)) TyType) :qid |funType:Tclass._System.___hPartialFunc2SSO_0| :pattern ( (Tclass._System.___hPartialFunc2SSO_0 arg0@@396)) )))
(assert (forall ((|#$T0@@276| T@U) (|#$T1@@212| T@U) (|#$R@@302| T@U) ) (!  (=> (and (and (= (type |#$T0@@276|) TyType) (= (type |#$T1@@212|) TyType)) (= (type |#$R@@302|) TyType)) (= (Tclass._System.___hPartialFunc2SSO_0 (Tclass._System.___hPartialFunc2SSO |#$T0@@276| |#$T1@@212| |#$R@@302|)) |#$T0@@276|)) :qid |unknown.0:0| :skolemid |1306| :pattern ( (Tclass._System.___hPartialFunc2SSO |#$T0@@276| |#$T1@@212| |#$R@@302|)) )))
(assert (forall ((arg0@@397 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2SSO_1 arg0@@397)) TyType) :qid |funType:Tclass._System.___hPartialFunc2SSO_1| :pattern ( (Tclass._System.___hPartialFunc2SSO_1 arg0@@397)) )))
(assert (forall ((|#$T0@@277| T@U) (|#$T1@@213| T@U) (|#$R@@303| T@U) ) (!  (=> (and (and (= (type |#$T0@@277|) TyType) (= (type |#$T1@@213|) TyType)) (= (type |#$R@@303|) TyType)) (= (Tclass._System.___hPartialFunc2SSO_1 (Tclass._System.___hPartialFunc2SSO |#$T0@@277| |#$T1@@213| |#$R@@303|)) |#$T1@@213|)) :qid |unknown.0:0| :skolemid |1307| :pattern ( (Tclass._System.___hPartialFunc2SSO |#$T0@@277| |#$T1@@213| |#$R@@303|)) )))
(assert (forall ((arg0@@398 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2SSO_2 arg0@@398)) TyType) :qid |funType:Tclass._System.___hPartialFunc2SSO_2| :pattern ( (Tclass._System.___hPartialFunc2SSO_2 arg0@@398)) )))
(assert (forall ((|#$T0@@278| T@U) (|#$T1@@214| T@U) (|#$R@@304| T@U) ) (!  (=> (and (and (= (type |#$T0@@278|) TyType) (= (type |#$T1@@214|) TyType)) (= (type |#$R@@304|) TyType)) (= (Tclass._System.___hPartialFunc2SSO_2 (Tclass._System.___hPartialFunc2SSO |#$T0@@278| |#$T1@@214| |#$R@@304|)) |#$R@@304|)) :qid |unknown.0:0| :skolemid |1308| :pattern ( (Tclass._System.___hPartialFunc2SSO |#$T0@@278| |#$T1@@214| |#$R@@304|)) )))
(assert (forall ((|#$T0@@279| T@U) (|#$T1@@215| T@U) (|#$R@@305| T@U) (bx@@116 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@279|) TyType) (= (type |#$T1@@215|) TyType)) (= (type |#$R@@305|) TyType)) (= (type bx@@116) BoxType)) ($IsBox bx@@116 (Tclass._System.___hPartialFunc2SSO |#$T0@@279| |#$T1@@215| |#$R@@305|))) (and (= ($Box ($Unbox HandleTypeType bx@@116)) bx@@116) ($Is ($Unbox HandleTypeType bx@@116) (Tclass._System.___hPartialFunc2SSO |#$T0@@279| |#$T1@@215| |#$R@@305|)))) :qid |unknown.0:0| :skolemid |1309| :pattern ( ($IsBox bx@@116 (Tclass._System.___hPartialFunc2SSO |#$T0@@279| |#$T1@@215| |#$R@@305|))) )))
(assert (forall ((|#$T0@@280| T@U) (|#$T1@@216| T@U) (|#$R@@306| T@U) (|f#0@@59| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@280|) TyType) (= (type |#$T1@@216|) TyType)) (= (type |#$R@@306|) TyType)) (= (type |f#0@@59|) HandleTypeType)) (= ($Is |f#0@@59| (Tclass._System.___hPartialFunc2SSO |#$T0@@280| |#$T1@@216| |#$R@@306|))  (and ($Is |f#0@@59| (Tclass._System.___hFunc2SSO |#$T0@@280| |#$T1@@216| |#$R@@306|)) (forall ((|x0#0@@25| T@U) (|x1#0@@17| T@U) ) (!  (=> (and (and (= (type |x0#0@@25|) BoxType) (= (type |x1#0@@17|) BoxType)) (and ($IsBox |x0#0@@25| |#$T0@@280|) ($IsBox |x1#0@@17| |#$T1@@216|))) (|Set#Equal| (Reads2 |#$T0@@280| |#$T1@@216| |#$R@@306| $OneHeap |f#0@@59| |x0#0@@25| |x1#0@@17|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1310| :no-pattern (type |x0#0@@25|) :no-pattern (type |x1#0@@17|) :no-pattern (U_2_int |x0#0@@25|) :no-pattern (U_2_bool |x0#0@@25|) :no-pattern (U_2_int |x1#0@@17|) :no-pattern (U_2_bool |x1#0@@17|) ))))) :qid |unknown.0:0| :skolemid |1311| :pattern ( ($Is |f#0@@59| (Tclass._System.___hPartialFunc2SSO |#$T0@@280| |#$T1@@216| |#$R@@306|))) )))
(assert (forall ((|#$T0@@281| T@U) (|#$T1@@217| T@U) (|#$R@@307| T@U) (|f#0@@60| T@U) ($h@@45 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@281|) TyType) (= (type |#$T1@@217|) TyType)) (= (type |#$R@@307|) TyType)) (= (type |f#0@@60|) HandleTypeType)) (= (type $h@@45) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@60| (Tclass._System.___hPartialFunc2SSO |#$T0@@281| |#$T1@@217| |#$R@@307|) $h@@45) ($IsAlloc |f#0@@60| (Tclass._System.___hFunc2SSO |#$T0@@281| |#$T1@@217| |#$R@@307|) $h@@45))) :qid |unknown.0:0| :skolemid |1312| :pattern ( ($IsAlloc |f#0@@60| (Tclass._System.___hPartialFunc2SSO |#$T0@@281| |#$T1@@217| |#$R@@307|) $h@@45)) )))
(assert (forall ((arg0@@399 T@U) (arg1@@167 T@U) (arg2@@108 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2SSO arg0@@399 arg1@@167 arg2@@108)) TyType) :qid |funType:Tclass._System.___hTotalFunc2SSO| :pattern ( (Tclass._System.___hTotalFunc2SSO arg0@@399 arg1@@167 arg2@@108)) )))
(assert (forall ((|#$T0@@282| T@U) (|#$T1@@218| T@U) (|#$R@@308| T@U) ) (!  (=> (and (and (= (type |#$T0@@282|) TyType) (= (type |#$T1@@218|) TyType)) (= (type |#$R@@308|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2SSO |#$T0@@282| |#$T1@@218| |#$R@@308|)) Tagclass._System.___hTotalFunc2SSO) (= (TagFamily (Tclass._System.___hTotalFunc2SSO |#$T0@@282| |#$T1@@218| |#$R@@308|)) |tytagFamily$_#TotalFunc2SSO|))) :qid |unknown.0:0| :skolemid |1313| :pattern ( (Tclass._System.___hTotalFunc2SSO |#$T0@@282| |#$T1@@218| |#$R@@308|)) )))
(assert (forall ((arg0@@400 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2SSO_0 arg0@@400)) TyType) :qid |funType:Tclass._System.___hTotalFunc2SSO_0| :pattern ( (Tclass._System.___hTotalFunc2SSO_0 arg0@@400)) )))
(assert (forall ((|#$T0@@283| T@U) (|#$T1@@219| T@U) (|#$R@@309| T@U) ) (!  (=> (and (and (= (type |#$T0@@283|) TyType) (= (type |#$T1@@219|) TyType)) (= (type |#$R@@309|) TyType)) (= (Tclass._System.___hTotalFunc2SSO_0 (Tclass._System.___hTotalFunc2SSO |#$T0@@283| |#$T1@@219| |#$R@@309|)) |#$T0@@283|)) :qid |unknown.0:0| :skolemid |1314| :pattern ( (Tclass._System.___hTotalFunc2SSO |#$T0@@283| |#$T1@@219| |#$R@@309|)) )))
(assert (forall ((arg0@@401 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2SSO_1 arg0@@401)) TyType) :qid |funType:Tclass._System.___hTotalFunc2SSO_1| :pattern ( (Tclass._System.___hTotalFunc2SSO_1 arg0@@401)) )))
(assert (forall ((|#$T0@@284| T@U) (|#$T1@@220| T@U) (|#$R@@310| T@U) ) (!  (=> (and (and (= (type |#$T0@@284|) TyType) (= (type |#$T1@@220|) TyType)) (= (type |#$R@@310|) TyType)) (= (Tclass._System.___hTotalFunc2SSO_1 (Tclass._System.___hTotalFunc2SSO |#$T0@@284| |#$T1@@220| |#$R@@310|)) |#$T1@@220|)) :qid |unknown.0:0| :skolemid |1315| :pattern ( (Tclass._System.___hTotalFunc2SSO |#$T0@@284| |#$T1@@220| |#$R@@310|)) )))
(assert (forall ((arg0@@402 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2SSO_2 arg0@@402)) TyType) :qid |funType:Tclass._System.___hTotalFunc2SSO_2| :pattern ( (Tclass._System.___hTotalFunc2SSO_2 arg0@@402)) )))
(assert (forall ((|#$T0@@285| T@U) (|#$T1@@221| T@U) (|#$R@@311| T@U) ) (!  (=> (and (and (= (type |#$T0@@285|) TyType) (= (type |#$T1@@221|) TyType)) (= (type |#$R@@311|) TyType)) (= (Tclass._System.___hTotalFunc2SSO_2 (Tclass._System.___hTotalFunc2SSO |#$T0@@285| |#$T1@@221| |#$R@@311|)) |#$R@@311|)) :qid |unknown.0:0| :skolemid |1316| :pattern ( (Tclass._System.___hTotalFunc2SSO |#$T0@@285| |#$T1@@221| |#$R@@311|)) )))
(assert (forall ((|#$T0@@286| T@U) (|#$T1@@222| T@U) (|#$R@@312| T@U) (bx@@117 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@286|) TyType) (= (type |#$T1@@222|) TyType)) (= (type |#$R@@312|) TyType)) (= (type bx@@117) BoxType)) ($IsBox bx@@117 (Tclass._System.___hTotalFunc2SSO |#$T0@@286| |#$T1@@222| |#$R@@312|))) (and (= ($Box ($Unbox HandleTypeType bx@@117)) bx@@117) ($Is ($Unbox HandleTypeType bx@@117) (Tclass._System.___hTotalFunc2SSO |#$T0@@286| |#$T1@@222| |#$R@@312|)))) :qid |unknown.0:0| :skolemid |1317| :pattern ( ($IsBox bx@@117 (Tclass._System.___hTotalFunc2SSO |#$T0@@286| |#$T1@@222| |#$R@@312|))) )))
(assert (forall ((|#$T0@@287| T@U) (|#$T1@@223| T@U) (|#$R@@313| T@U) (|f#0@@61| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@287|) TyType) (= (type |#$T1@@223|) TyType)) (= (type |#$R@@313|) TyType)) (= (type |f#0@@61|) HandleTypeType)) (= ($Is |f#0@@61| (Tclass._System.___hTotalFunc2SSO |#$T0@@287| |#$T1@@223| |#$R@@313|))  (and ($Is |f#0@@61| (Tclass._System.___hPartialFunc2SSO |#$T0@@287| |#$T1@@223| |#$R@@313|)) (forall ((|x0#0@@26| T@U) (|x1#0@@18| T@U) ) (!  (=> (and (and (= (type |x0#0@@26|) BoxType) (= (type |x1#0@@18|) BoxType)) (and ($IsBox |x0#0@@26| |#$T0@@287|) ($IsBox |x1#0@@18| |#$T1@@223|))) (Requires2 |#$T0@@287| |#$T1@@223| |#$R@@313| $OneHeap |f#0@@61| |x0#0@@26| |x1#0@@18|)) :qid |unknown.0:0| :skolemid |1318| :no-pattern (type |x0#0@@26|) :no-pattern (type |x1#0@@18|) :no-pattern (U_2_int |x0#0@@26|) :no-pattern (U_2_bool |x0#0@@26|) :no-pattern (U_2_int |x1#0@@18|) :no-pattern (U_2_bool |x1#0@@18|) ))))) :qid |unknown.0:0| :skolemid |1319| :pattern ( ($Is |f#0@@61| (Tclass._System.___hTotalFunc2SSO |#$T0@@287| |#$T1@@223| |#$R@@313|))) )))
(assert (forall ((|#$T0@@288| T@U) (|#$T1@@224| T@U) (|#$R@@314| T@U) (|f#0@@62| T@U) ($h@@46 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@288|) TyType) (= (type |#$T1@@224|) TyType)) (= (type |#$R@@314|) TyType)) (= (type |f#0@@62|) HandleTypeType)) (= (type $h@@46) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@62| (Tclass._System.___hTotalFunc2SSO |#$T0@@288| |#$T1@@224| |#$R@@314|) $h@@46) ($IsAlloc |f#0@@62| (Tclass._System.___hPartialFunc2SSO |#$T0@@288| |#$T1@@224| |#$R@@314|) $h@@46))) :qid |unknown.0:0| :skolemid |1320| :pattern ( ($IsAlloc |f#0@@62| (Tclass._System.___hTotalFunc2SSO |#$T0@@288| |#$T1@@224| |#$R@@314|) $h@@46)) )))
(assert (forall ((arg0@@403 T@U) (arg1@@168 T@U) ) (! (= (type (Tclass._System.___hFunc1SS arg0@@403 arg1@@168)) TyType) :qid |funType:Tclass._System.___hFunc1SS| :pattern ( (Tclass._System.___hFunc1SS arg0@@403 arg1@@168)) )))
(assert (forall ((|#$T0@@289| T@U) (|#$R@@315| T@U) ) (!  (=> (and (= (type |#$T0@@289|) TyType) (= (type |#$R@@315|) TyType)) (and (= (Tag (Tclass._System.___hFunc1SS |#$T0@@289| |#$R@@315|)) Tagclass._System.___hFunc1SS) (= (TagFamily (Tclass._System.___hFunc1SS |#$T0@@289| |#$R@@315|)) |tytagFamily$_#Func1SS|))) :qid |unknown.0:0| :skolemid |1321| :pattern ( (Tclass._System.___hFunc1SS |#$T0@@289| |#$R@@315|)) )))
(assert (forall ((arg0@@404 T@U) ) (! (= (type (Tclass._System.___hFunc1SS_0 arg0@@404)) TyType) :qid |funType:Tclass._System.___hFunc1SS_0| :pattern ( (Tclass._System.___hFunc1SS_0 arg0@@404)) )))
(assert (forall ((|#$T0@@290| T@U) (|#$R@@316| T@U) ) (!  (=> (and (= (type |#$T0@@290|) TyType) (= (type |#$R@@316|) TyType)) (= (Tclass._System.___hFunc1SS_0 (Tclass._System.___hFunc1SS |#$T0@@290| |#$R@@316|)) |#$T0@@290|)) :qid |unknown.0:0| :skolemid |1322| :pattern ( (Tclass._System.___hFunc1SS |#$T0@@290| |#$R@@316|)) )))
(assert (forall ((arg0@@405 T@U) ) (! (= (type (Tclass._System.___hFunc1SS_1 arg0@@405)) TyType) :qid |funType:Tclass._System.___hFunc1SS_1| :pattern ( (Tclass._System.___hFunc1SS_1 arg0@@405)) )))
(assert (forall ((|#$T0@@291| T@U) (|#$R@@317| T@U) ) (!  (=> (and (= (type |#$T0@@291|) TyType) (= (type |#$R@@317|) TyType)) (= (Tclass._System.___hFunc1SS_1 (Tclass._System.___hFunc1SS |#$T0@@291| |#$R@@317|)) |#$R@@317|)) :qid |unknown.0:0| :skolemid |1323| :pattern ( (Tclass._System.___hFunc1SS |#$T0@@291| |#$R@@317|)) )))
(assert (forall ((|#$T0@@292| T@U) (|#$R@@318| T@U) (bx@@118 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@292|) TyType) (= (type |#$R@@318|) TyType)) (= (type bx@@118) BoxType)) ($IsBox bx@@118 (Tclass._System.___hFunc1SS |#$T0@@292| |#$R@@318|))) (and (= ($Box ($Unbox HandleTypeType bx@@118)) bx@@118) ($Is ($Unbox HandleTypeType bx@@118) (Tclass._System.___hFunc1SS |#$T0@@292| |#$R@@318|)))) :qid |unknown.0:0| :skolemid |1324| :pattern ( ($IsBox bx@@118 (Tclass._System.___hFunc1SS |#$T0@@292| |#$R@@318|))) )))
(assert (forall ((arg0@@406 T@U) (arg1@@169 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1SS arg0@@406 arg1@@169)) TyType) :qid |funType:Tclass._System.___hPartialFunc1SS| :pattern ( (Tclass._System.___hPartialFunc1SS arg0@@406 arg1@@169)) )))
(assert (forall ((|#$T0@@293| T@U) (|#$R@@319| T@U) ) (!  (=> (and (= (type |#$T0@@293|) TyType) (= (type |#$R@@319|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1SS |#$T0@@293| |#$R@@319|)) Tagclass._System.___hPartialFunc1SS) (= (TagFamily (Tclass._System.___hPartialFunc1SS |#$T0@@293| |#$R@@319|)) |tytagFamily$_#PartialFunc1SS|))) :qid |unknown.0:0| :skolemid |1325| :pattern ( (Tclass._System.___hPartialFunc1SS |#$T0@@293| |#$R@@319|)) )))
(assert (forall ((arg0@@407 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1SS_0 arg0@@407)) TyType) :qid |funType:Tclass._System.___hPartialFunc1SS_0| :pattern ( (Tclass._System.___hPartialFunc1SS_0 arg0@@407)) )))
(assert (forall ((|#$T0@@294| T@U) (|#$R@@320| T@U) ) (!  (=> (and (= (type |#$T0@@294|) TyType) (= (type |#$R@@320|) TyType)) (= (Tclass._System.___hPartialFunc1SS_0 (Tclass._System.___hPartialFunc1SS |#$T0@@294| |#$R@@320|)) |#$T0@@294|)) :qid |unknown.0:0| :skolemid |1326| :pattern ( (Tclass._System.___hPartialFunc1SS |#$T0@@294| |#$R@@320|)) )))
(assert (forall ((arg0@@408 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1SS_1 arg0@@408)) TyType) :qid |funType:Tclass._System.___hPartialFunc1SS_1| :pattern ( (Tclass._System.___hPartialFunc1SS_1 arg0@@408)) )))
(assert (forall ((|#$T0@@295| T@U) (|#$R@@321| T@U) ) (!  (=> (and (= (type |#$T0@@295|) TyType) (= (type |#$R@@321|) TyType)) (= (Tclass._System.___hPartialFunc1SS_1 (Tclass._System.___hPartialFunc1SS |#$T0@@295| |#$R@@321|)) |#$R@@321|)) :qid |unknown.0:0| :skolemid |1327| :pattern ( (Tclass._System.___hPartialFunc1SS |#$T0@@295| |#$R@@321|)) )))
(assert (forall ((|#$T0@@296| T@U) (|#$R@@322| T@U) (bx@@119 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@296|) TyType) (= (type |#$R@@322|) TyType)) (= (type bx@@119) BoxType)) ($IsBox bx@@119 (Tclass._System.___hPartialFunc1SS |#$T0@@296| |#$R@@322|))) (and (= ($Box ($Unbox HandleTypeType bx@@119)) bx@@119) ($Is ($Unbox HandleTypeType bx@@119) (Tclass._System.___hPartialFunc1SS |#$T0@@296| |#$R@@322|)))) :qid |unknown.0:0| :skolemid |1328| :pattern ( ($IsBox bx@@119 (Tclass._System.___hPartialFunc1SS |#$T0@@296| |#$R@@322|))) )))
(assert (forall ((|#$T0@@297| T@U) (|#$R@@323| T@U) (|f#0@@63| T@U) ) (!  (=> (and (and (= (type |#$T0@@297|) TyType) (= (type |#$R@@323|) TyType)) (= (type |f#0@@63|) HandleTypeType)) (= ($Is |f#0@@63| (Tclass._System.___hPartialFunc1SS |#$T0@@297| |#$R@@323|))  (and ($Is |f#0@@63| (Tclass._System.___hFunc1SS |#$T0@@297| |#$R@@323|)) (forall ((|x0#0@@27| T@U) ) (!  (=> (and (= (type |x0#0@@27|) BoxType) ($IsBox |x0#0@@27| |#$T0@@297|)) (|Set#Equal| (Reads1 |#$T0@@297| |#$R@@323| $OneHeap |f#0@@63| |x0#0@@27|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1329| :no-pattern (type |x0#0@@27|) :no-pattern (U_2_int |x0#0@@27|) :no-pattern (U_2_bool |x0#0@@27|) ))))) :qid |unknown.0:0| :skolemid |1330| :pattern ( ($Is |f#0@@63| (Tclass._System.___hPartialFunc1SS |#$T0@@297| |#$R@@323|))) )))
(assert (forall ((|#$T0@@298| T@U) (|#$R@@324| T@U) (|f#0@@64| T@U) ($h@@47 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@298|) TyType) (= (type |#$R@@324|) TyType)) (= (type |f#0@@64|) HandleTypeType)) (= (type $h@@47) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@64| (Tclass._System.___hPartialFunc1SS |#$T0@@298| |#$R@@324|) $h@@47) ($IsAlloc |f#0@@64| (Tclass._System.___hFunc1SS |#$T0@@298| |#$R@@324|) $h@@47))) :qid |unknown.0:0| :skolemid |1331| :pattern ( ($IsAlloc |f#0@@64| (Tclass._System.___hPartialFunc1SS |#$T0@@298| |#$R@@324|) $h@@47)) )))
(assert (forall ((arg0@@409 T@U) (arg1@@170 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1SS arg0@@409 arg1@@170)) TyType) :qid |funType:Tclass._System.___hTotalFunc1SS| :pattern ( (Tclass._System.___hTotalFunc1SS arg0@@409 arg1@@170)) )))
(assert (forall ((|#$T0@@299| T@U) (|#$R@@325| T@U) ) (!  (=> (and (= (type |#$T0@@299|) TyType) (= (type |#$R@@325|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1SS |#$T0@@299| |#$R@@325|)) Tagclass._System.___hTotalFunc1SS) (= (TagFamily (Tclass._System.___hTotalFunc1SS |#$T0@@299| |#$R@@325|)) |tytagFamily$_#TotalFunc1SS|))) :qid |unknown.0:0| :skolemid |1332| :pattern ( (Tclass._System.___hTotalFunc1SS |#$T0@@299| |#$R@@325|)) )))
(assert (forall ((arg0@@410 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1SS_0 arg0@@410)) TyType) :qid |funType:Tclass._System.___hTotalFunc1SS_0| :pattern ( (Tclass._System.___hTotalFunc1SS_0 arg0@@410)) )))
(assert (forall ((|#$T0@@300| T@U) (|#$R@@326| T@U) ) (!  (=> (and (= (type |#$T0@@300|) TyType) (= (type |#$R@@326|) TyType)) (= (Tclass._System.___hTotalFunc1SS_0 (Tclass._System.___hTotalFunc1SS |#$T0@@300| |#$R@@326|)) |#$T0@@300|)) :qid |unknown.0:0| :skolemid |1333| :pattern ( (Tclass._System.___hTotalFunc1SS |#$T0@@300| |#$R@@326|)) )))
(assert (forall ((arg0@@411 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1SS_1 arg0@@411)) TyType) :qid |funType:Tclass._System.___hTotalFunc1SS_1| :pattern ( (Tclass._System.___hTotalFunc1SS_1 arg0@@411)) )))
(assert (forall ((|#$T0@@301| T@U) (|#$R@@327| T@U) ) (!  (=> (and (= (type |#$T0@@301|) TyType) (= (type |#$R@@327|) TyType)) (= (Tclass._System.___hTotalFunc1SS_1 (Tclass._System.___hTotalFunc1SS |#$T0@@301| |#$R@@327|)) |#$R@@327|)) :qid |unknown.0:0| :skolemid |1334| :pattern ( (Tclass._System.___hTotalFunc1SS |#$T0@@301| |#$R@@327|)) )))
(assert (forall ((|#$T0@@302| T@U) (|#$R@@328| T@U) (bx@@120 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@302|) TyType) (= (type |#$R@@328|) TyType)) (= (type bx@@120) BoxType)) ($IsBox bx@@120 (Tclass._System.___hTotalFunc1SS |#$T0@@302| |#$R@@328|))) (and (= ($Box ($Unbox HandleTypeType bx@@120)) bx@@120) ($Is ($Unbox HandleTypeType bx@@120) (Tclass._System.___hTotalFunc1SS |#$T0@@302| |#$R@@328|)))) :qid |unknown.0:0| :skolemid |1335| :pattern ( ($IsBox bx@@120 (Tclass._System.___hTotalFunc1SS |#$T0@@302| |#$R@@328|))) )))
(assert (forall ((|#$T0@@303| T@U) (|#$R@@329| T@U) (|f#0@@65| T@U) ) (!  (=> (and (and (= (type |#$T0@@303|) TyType) (= (type |#$R@@329|) TyType)) (= (type |f#0@@65|) HandleTypeType)) (= ($Is |f#0@@65| (Tclass._System.___hTotalFunc1SS |#$T0@@303| |#$R@@329|))  (and ($Is |f#0@@65| (Tclass._System.___hPartialFunc1SS |#$T0@@303| |#$R@@329|)) (forall ((|x0#0@@28| T@U) ) (!  (=> (and (= (type |x0#0@@28|) BoxType) ($IsBox |x0#0@@28| |#$T0@@303|)) (Requires1 |#$T0@@303| |#$R@@329| $OneHeap |f#0@@65| |x0#0@@28|)) :qid |unknown.0:0| :skolemid |1336| :no-pattern (type |x0#0@@28|) :no-pattern (U_2_int |x0#0@@28|) :no-pattern (U_2_bool |x0#0@@28|) ))))) :qid |unknown.0:0| :skolemid |1337| :pattern ( ($Is |f#0@@65| (Tclass._System.___hTotalFunc1SS |#$T0@@303| |#$R@@329|))) )))
(assert (forall ((|#$T0@@304| T@U) (|#$R@@330| T@U) (|f#0@@66| T@U) ($h@@48 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@304|) TyType) (= (type |#$R@@330|) TyType)) (= (type |f#0@@66|) HandleTypeType)) (= (type $h@@48) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@66| (Tclass._System.___hTotalFunc1SS |#$T0@@304| |#$R@@330|) $h@@48) ($IsAlloc |f#0@@66| (Tclass._System.___hPartialFunc1SS |#$T0@@304| |#$R@@330|) $h@@48))) :qid |unknown.0:0| :skolemid |1338| :pattern ( ($IsAlloc |f#0@@66| (Tclass._System.___hTotalFunc1SS |#$T0@@304| |#$R@@330|) $h@@48)) )))
(assert (forall ((arg0@@412 T@U) (arg1@@171 T@U) ) (! (= (type (Tclass._System.___hFunc1LL arg0@@412 arg1@@171)) TyType) :qid |funType:Tclass._System.___hFunc1LL| :pattern ( (Tclass._System.___hFunc1LL arg0@@412 arg1@@171)) )))
(assert (forall ((|#$T0@@305| T@U) (|#$R@@331| T@U) ) (!  (=> (and (= (type |#$T0@@305|) TyType) (= (type |#$R@@331|) TyType)) (and (= (Tag (Tclass._System.___hFunc1LL |#$T0@@305| |#$R@@331|)) Tagclass._System.___hFunc1LL) (= (TagFamily (Tclass._System.___hFunc1LL |#$T0@@305| |#$R@@331|)) |tytagFamily$_#Func1LL|))) :qid |unknown.0:0| :skolemid |1339| :pattern ( (Tclass._System.___hFunc1LL |#$T0@@305| |#$R@@331|)) )))
(assert (forall ((arg0@@413 T@U) ) (! (= (type (Tclass._System.___hFunc1LL_0 arg0@@413)) TyType) :qid |funType:Tclass._System.___hFunc1LL_0| :pattern ( (Tclass._System.___hFunc1LL_0 arg0@@413)) )))
(assert (forall ((|#$T0@@306| T@U) (|#$R@@332| T@U) ) (!  (=> (and (= (type |#$T0@@306|) TyType) (= (type |#$R@@332|) TyType)) (= (Tclass._System.___hFunc1LL_0 (Tclass._System.___hFunc1LL |#$T0@@306| |#$R@@332|)) |#$T0@@306|)) :qid |unknown.0:0| :skolemid |1340| :pattern ( (Tclass._System.___hFunc1LL |#$T0@@306| |#$R@@332|)) )))
(assert (forall ((arg0@@414 T@U) ) (! (= (type (Tclass._System.___hFunc1LL_1 arg0@@414)) TyType) :qid |funType:Tclass._System.___hFunc1LL_1| :pattern ( (Tclass._System.___hFunc1LL_1 arg0@@414)) )))
(assert (forall ((|#$T0@@307| T@U) (|#$R@@333| T@U) ) (!  (=> (and (= (type |#$T0@@307|) TyType) (= (type |#$R@@333|) TyType)) (= (Tclass._System.___hFunc1LL_1 (Tclass._System.___hFunc1LL |#$T0@@307| |#$R@@333|)) |#$R@@333|)) :qid |unknown.0:0| :skolemid |1341| :pattern ( (Tclass._System.___hFunc1LL |#$T0@@307| |#$R@@333|)) )))
(assert (forall ((|#$T0@@308| T@U) (|#$R@@334| T@U) (bx@@121 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@308|) TyType) (= (type |#$R@@334|) TyType)) (= (type bx@@121) BoxType)) ($IsBox bx@@121 (Tclass._System.___hFunc1LL |#$T0@@308| |#$R@@334|))) (and (= ($Box ($Unbox HandleTypeType bx@@121)) bx@@121) ($Is ($Unbox HandleTypeType bx@@121) (Tclass._System.___hFunc1LL |#$T0@@308| |#$R@@334|)))) :qid |unknown.0:0| :skolemid |1342| :pattern ( ($IsBox bx@@121 (Tclass._System.___hFunc1LL |#$T0@@308| |#$R@@334|))) )))
(assert (forall ((arg0@@415 T@U) (arg1@@172 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LL arg0@@415 arg1@@172)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LL| :pattern ( (Tclass._System.___hPartialFunc1LL arg0@@415 arg1@@172)) )))
(assert (forall ((|#$T0@@309| T@U) (|#$R@@335| T@U) ) (!  (=> (and (= (type |#$T0@@309|) TyType) (= (type |#$R@@335|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1LL |#$T0@@309| |#$R@@335|)) Tagclass._System.___hPartialFunc1LL) (= (TagFamily (Tclass._System.___hPartialFunc1LL |#$T0@@309| |#$R@@335|)) |tytagFamily$_#PartialFunc1LL|))) :qid |unknown.0:0| :skolemid |1343| :pattern ( (Tclass._System.___hPartialFunc1LL |#$T0@@309| |#$R@@335|)) )))
(assert (forall ((arg0@@416 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LL_0 arg0@@416)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LL_0| :pattern ( (Tclass._System.___hPartialFunc1LL_0 arg0@@416)) )))
(assert (forall ((|#$T0@@310| T@U) (|#$R@@336| T@U) ) (!  (=> (and (= (type |#$T0@@310|) TyType) (= (type |#$R@@336|) TyType)) (= (Tclass._System.___hPartialFunc1LL_0 (Tclass._System.___hPartialFunc1LL |#$T0@@310| |#$R@@336|)) |#$T0@@310|)) :qid |unknown.0:0| :skolemid |1344| :pattern ( (Tclass._System.___hPartialFunc1LL |#$T0@@310| |#$R@@336|)) )))
(assert (forall ((arg0@@417 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LL_1 arg0@@417)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LL_1| :pattern ( (Tclass._System.___hPartialFunc1LL_1 arg0@@417)) )))
(assert (forall ((|#$T0@@311| T@U) (|#$R@@337| T@U) ) (!  (=> (and (= (type |#$T0@@311|) TyType) (= (type |#$R@@337|) TyType)) (= (Tclass._System.___hPartialFunc1LL_1 (Tclass._System.___hPartialFunc1LL |#$T0@@311| |#$R@@337|)) |#$R@@337|)) :qid |unknown.0:0| :skolemid |1345| :pattern ( (Tclass._System.___hPartialFunc1LL |#$T0@@311| |#$R@@337|)) )))
(assert (forall ((|#$T0@@312| T@U) (|#$R@@338| T@U) (bx@@122 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@312|) TyType) (= (type |#$R@@338|) TyType)) (= (type bx@@122) BoxType)) ($IsBox bx@@122 (Tclass._System.___hPartialFunc1LL |#$T0@@312| |#$R@@338|))) (and (= ($Box ($Unbox HandleTypeType bx@@122)) bx@@122) ($Is ($Unbox HandleTypeType bx@@122) (Tclass._System.___hPartialFunc1LL |#$T0@@312| |#$R@@338|)))) :qid |unknown.0:0| :skolemid |1346| :pattern ( ($IsBox bx@@122 (Tclass._System.___hPartialFunc1LL |#$T0@@312| |#$R@@338|))) )))
(assert (forall ((|#$T0@@313| T@U) (|#$R@@339| T@U) (|f#0@@67| T@U) ) (!  (=> (and (and (= (type |#$T0@@313|) TyType) (= (type |#$R@@339|) TyType)) (= (type |f#0@@67|) HandleTypeType)) (= ($Is |f#0@@67| (Tclass._System.___hPartialFunc1LL |#$T0@@313| |#$R@@339|))  (and ($Is |f#0@@67| (Tclass._System.___hFunc1LL |#$T0@@313| |#$R@@339|)) (forall ((|x0#0@@29| T@U) ) (!  (=> (and (= (type |x0#0@@29|) BoxType) ($IsBox |x0#0@@29| |#$T0@@313|)) (|Set#Equal| (Reads1 |#$T0@@313| |#$R@@339| $OneHeap |f#0@@67| |x0#0@@29|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1347| :no-pattern (type |x0#0@@29|) :no-pattern (U_2_int |x0#0@@29|) :no-pattern (U_2_bool |x0#0@@29|) ))))) :qid |unknown.0:0| :skolemid |1348| :pattern ( ($Is |f#0@@67| (Tclass._System.___hPartialFunc1LL |#$T0@@313| |#$R@@339|))) )))
(assert (forall ((|#$T0@@314| T@U) (|#$R@@340| T@U) (|f#0@@68| T@U) ($h@@49 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@314|) TyType) (= (type |#$R@@340|) TyType)) (= (type |f#0@@68|) HandleTypeType)) (= (type $h@@49) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@68| (Tclass._System.___hPartialFunc1LL |#$T0@@314| |#$R@@340|) $h@@49) ($IsAlloc |f#0@@68| (Tclass._System.___hFunc1LL |#$T0@@314| |#$R@@340|) $h@@49))) :qid |unknown.0:0| :skolemid |1349| :pattern ( ($IsAlloc |f#0@@68| (Tclass._System.___hPartialFunc1LL |#$T0@@314| |#$R@@340|) $h@@49)) )))
(assert (forall ((arg0@@418 T@U) (arg1@@173 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LL arg0@@418 arg1@@173)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LL| :pattern ( (Tclass._System.___hTotalFunc1LL arg0@@418 arg1@@173)) )))
(assert (forall ((|#$T0@@315| T@U) (|#$R@@341| T@U) ) (!  (=> (and (= (type |#$T0@@315|) TyType) (= (type |#$R@@341|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1LL |#$T0@@315| |#$R@@341|)) Tagclass._System.___hTotalFunc1LL) (= (TagFamily (Tclass._System.___hTotalFunc1LL |#$T0@@315| |#$R@@341|)) |tytagFamily$_#TotalFunc1LL|))) :qid |unknown.0:0| :skolemid |1350| :pattern ( (Tclass._System.___hTotalFunc1LL |#$T0@@315| |#$R@@341|)) )))
(assert (forall ((arg0@@419 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LL_0 arg0@@419)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LL_0| :pattern ( (Tclass._System.___hTotalFunc1LL_0 arg0@@419)) )))
(assert (forall ((|#$T0@@316| T@U) (|#$R@@342| T@U) ) (!  (=> (and (= (type |#$T0@@316|) TyType) (= (type |#$R@@342|) TyType)) (= (Tclass._System.___hTotalFunc1LL_0 (Tclass._System.___hTotalFunc1LL |#$T0@@316| |#$R@@342|)) |#$T0@@316|)) :qid |unknown.0:0| :skolemid |1351| :pattern ( (Tclass._System.___hTotalFunc1LL |#$T0@@316| |#$R@@342|)) )))
(assert (forall ((arg0@@420 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LL_1 arg0@@420)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LL_1| :pattern ( (Tclass._System.___hTotalFunc1LL_1 arg0@@420)) )))
(assert (forall ((|#$T0@@317| T@U) (|#$R@@343| T@U) ) (!  (=> (and (= (type |#$T0@@317|) TyType) (= (type |#$R@@343|) TyType)) (= (Tclass._System.___hTotalFunc1LL_1 (Tclass._System.___hTotalFunc1LL |#$T0@@317| |#$R@@343|)) |#$R@@343|)) :qid |unknown.0:0| :skolemid |1352| :pattern ( (Tclass._System.___hTotalFunc1LL |#$T0@@317| |#$R@@343|)) )))
(assert (forall ((|#$T0@@318| T@U) (|#$R@@344| T@U) (bx@@123 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@318|) TyType) (= (type |#$R@@344|) TyType)) (= (type bx@@123) BoxType)) ($IsBox bx@@123 (Tclass._System.___hTotalFunc1LL |#$T0@@318| |#$R@@344|))) (and (= ($Box ($Unbox HandleTypeType bx@@123)) bx@@123) ($Is ($Unbox HandleTypeType bx@@123) (Tclass._System.___hTotalFunc1LL |#$T0@@318| |#$R@@344|)))) :qid |unknown.0:0| :skolemid |1353| :pattern ( ($IsBox bx@@123 (Tclass._System.___hTotalFunc1LL |#$T0@@318| |#$R@@344|))) )))
(assert (forall ((|#$T0@@319| T@U) (|#$R@@345| T@U) (|f#0@@69| T@U) ) (!  (=> (and (and (= (type |#$T0@@319|) TyType) (= (type |#$R@@345|) TyType)) (= (type |f#0@@69|) HandleTypeType)) (= ($Is |f#0@@69| (Tclass._System.___hTotalFunc1LL |#$T0@@319| |#$R@@345|))  (and ($Is |f#0@@69| (Tclass._System.___hPartialFunc1LL |#$T0@@319| |#$R@@345|)) (forall ((|x0#0@@30| T@U) ) (!  (=> (and (= (type |x0#0@@30|) BoxType) ($IsBox |x0#0@@30| |#$T0@@319|)) (Requires1 |#$T0@@319| |#$R@@345| $OneHeap |f#0@@69| |x0#0@@30|)) :qid |unknown.0:0| :skolemid |1354| :no-pattern (type |x0#0@@30|) :no-pattern (U_2_int |x0#0@@30|) :no-pattern (U_2_bool |x0#0@@30|) ))))) :qid |unknown.0:0| :skolemid |1355| :pattern ( ($Is |f#0@@69| (Tclass._System.___hTotalFunc1LL |#$T0@@319| |#$R@@345|))) )))
(assert (forall ((|#$T0@@320| T@U) (|#$R@@346| T@U) (|f#0@@70| T@U) ($h@@50 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@320|) TyType) (= (type |#$R@@346|) TyType)) (= (type |f#0@@70|) HandleTypeType)) (= (type $h@@50) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@70| (Tclass._System.___hTotalFunc1LL |#$T0@@320| |#$R@@346|) $h@@50) ($IsAlloc |f#0@@70| (Tclass._System.___hPartialFunc1LL |#$T0@@320| |#$R@@346|) $h@@50))) :qid |unknown.0:0| :skolemid |1356| :pattern ( ($IsAlloc |f#0@@70| (Tclass._System.___hTotalFunc1LL |#$T0@@320| |#$R@@346|) $h@@50)) )))
(assert (= (type Tclass.AsyncBetree__Refines__AsyncMap.__default) TyType))
(assert (= (Tag Tclass.AsyncBetree__Refines__AsyncMap.__default) Tagclass.AsyncBetree__Refines__AsyncMap.__default))
(assert (= (TagFamily Tclass.AsyncBetree__Refines__AsyncMap.__default) tytagFamily$_default))
(assert (forall ((bx@@124 T@U) ) (!  (=> (and (= (type bx@@124) BoxType) ($IsBox bx@@124 Tclass.AsyncBetree__Refines__AsyncMap.__default)) (and (= ($Box ($Unbox refType bx@@124)) bx@@124) ($Is ($Unbox refType bx@@124) Tclass.AsyncBetree__Refines__AsyncMap.__default))) :qid |unknown.0:0| :skolemid |1357| :pattern ( ($IsBox bx@@124 Tclass.AsyncBetree__Refines__AsyncMap.__default)) )))
(assert (forall (($o@@9 T@U) ) (!  (=> (= (type $o@@9) refType) (= ($Is $o@@9 Tclass.AsyncBetree__Refines__AsyncMap.__default)  (or (= $o@@9 null) (= (dtype $o@@9) Tclass.AsyncBetree__Refines__AsyncMap.__default)))) :qid |unknown.0:0| :skolemid |1358| :pattern ( ($Is $o@@9 Tclass.AsyncBetree__Refines__AsyncMap.__default)) )))
(assert (forall (($o@@10 T@U) ($h@@51 T@U) ) (!  (=> (and (= (type $o@@10) refType) (= (type $h@@51) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@10 Tclass.AsyncBetree__Refines__AsyncMap.__default $h@@51)  (or (= $o@@10 null) (U_2_bool (MapType1Select (MapType0Select $h@@51 $o@@10) alloc))))) :qid |unknown.0:0| :skolemid |1359| :pattern ( ($IsAlloc $o@@10 Tclass.AsyncBetree__Refines__AsyncMap.__default $h@@51)) )))
(assert (= (type Tclass.Betree.Variables) TyType))
(assert (= (Tag Tclass.Betree.Variables) Tagclass.Betree.Variables))
(assert (= (TagFamily Tclass.Betree.Variables) tytagFamily$Variables))
(assert (forall ((bx@@125 T@U) ) (!  (=> (and (= (type bx@@125) BoxType) ($IsBox bx@@125 Tclass.Betree.Variables)) (and (= ($Box ($Unbox DatatypeTypeType bx@@125)) bx@@125) ($Is ($Unbox DatatypeTypeType bx@@125) Tclass.Betree.Variables))) :qid |unknown.0:0| :skolemid |1360| :pattern ( ($IsBox bx@@125 Tclass.Betree.Variables)) )))
(assert (= (type Tclass.QueryStates.QueryState) TyType))
(assert (= (Tag Tclass.QueryStates.QueryState) Tagclass.QueryStates.QueryState))
(assert (= (TagFamily Tclass.QueryStates.QueryState) tytagFamily$QueryState))
(assert (forall ((bx@@126 T@U) ) (!  (=> (and (= (type bx@@126) BoxType) ($IsBox bx@@126 Tclass.QueryStates.QueryState)) (and (= ($Box ($Unbox DatatypeTypeType bx@@126)) bx@@126) ($Is ($Unbox DatatypeTypeType bx@@126) Tclass.QueryStates.QueryState))) :qid |unknown.0:0| :skolemid |1361| :pattern ( ($IsBox bx@@126 Tclass.QueryStates.QueryState)) )))
(assert (= (type Tclass.ValueType.Value) TyType))
(assert (= (Tag Tclass.ValueType.Value) Tagclass.ValueType.Value))
(assert (= (TagFamily Tclass.ValueType.Value) tytagFamily$Value))
(assert (forall ((bx@@127 T@U) ) (!  (=> (and (= (type bx@@127) BoxType) ($IsBox bx@@127 Tclass.ValueType.Value)) (and (= ($Box ($Unbox (SeqType BoxType) bx@@127)) bx@@127) ($Is ($Unbox (SeqType BoxType) bx@@127) Tclass.ValueType.Value))) :qid |unknown.0:0| :skolemid |1362| :pattern ( ($IsBox bx@@127 Tclass.ValueType.Value)) )))
(assert (forall ((arg0@@421 T@U) (arg1@@174 T@U) ) (! (= (type (AsyncBetree__Refines__AsyncMap.__default.QueryAnswer arg0@@421 arg1@@174)) (SeqType BoxType)) :qid |funType:AsyncBetree__Refines__AsyncMap.__default.QueryAnswer| :pattern ( (AsyncBetree__Refines__AsyncMap.__default.QueryAnswer arg0@@421 arg1@@174)) )))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((|betree#0| T@U) (|query#0| T@U) ) (!  (=> (and (and (= (type |betree#0|) DatatypeTypeType) (= (type |query#0|) DatatypeTypeType)) (or (|AsyncBetree__Refines__AsyncMap.__default.QueryAnswer#canCall| |betree#0| |query#0|) (and (not (= 3 $FunctionContextHeight)) (and (and ($Is |betree#0| Tclass.Betree.Variables) ($Is |query#0| Tclass.QueryStates.QueryState)) (AsyncBetree.__default.QueryInv |betree#0| |query#0|))))) ($Is (AsyncBetree__Refines__AsyncMap.__default.QueryAnswer |betree#0| |query#0|) Tclass.ValueType.Value)) :qid |AsyncBetreeRefinesAsyncMapidfy.20:24| :skolemid |1363| :pattern ( (AsyncBetree__Refines__AsyncMap.__default.QueryAnswer |betree#0| |query#0|)) ))))
(assert (forall ((|betree#0@@0| T@U) (|query#0@@0| T@U) ) (!  (=> (and (and (= (type |betree#0@@0|) DatatypeTypeType) (= (type |query#0@@0|) DatatypeTypeType)) (and ($Is |betree#0@@0| Tclass.Betree.Variables) ($Is |query#0@@0| Tclass.QueryStates.QueryState))) (= (|AsyncBetree__Refines__AsyncMap.__default.QueryAnswer#requires| |betree#0@@0| |query#0@@0|) (AsyncBetree.__default.QueryInv |betree#0@@0| |query#0@@0|))) :qid |AsyncBetreeRefinesAsyncMapidfy.20:24| :skolemid |1364| :pattern ( (|AsyncBetree__Refines__AsyncMap.__default.QueryAnswer#requires| |betree#0@@0| |query#0@@0|)) )))
(assert  (and (and (and (and (and (and (and (and (forall ((arg0@@422 T@U) ) (! (= (type (QueryStates.QueryState.ref arg0@@422)) BoxType) :qid |funType:QueryStates.QueryState.ref| :pattern ( (QueryStates.QueryState.ref arg0@@422)) )) (forall ((arg0@@423 T@U) ) (! (= (type (QueryStates.QueryState.delta arg0@@423)) DatatypeTypeType) :qid |funType:QueryStates.QueryState.delta| :pattern ( (QueryStates.QueryState.delta arg0@@423)) ))) (forall ((arg0@@424 T@U) ) (! (= (type (Betree.Variables.bcv arg0@@424)) DatatypeTypeType) :qid |funType:Betree.Variables.bcv| :pattern ( (Betree.Variables.bcv arg0@@424)) ))) (forall ((arg0@@425 T@U) ) (! (= (type (BetreeBlockInterface.Variables.view arg0@@425)) (IMapType BoxType BoxType)) :qid |funType:BetreeBlockInterface.Variables.view| :pattern ( (BetreeBlockInterface.Variables.view arg0@@425)) ))) (forall ((arg0@@426 T@U) ) (! (= (type (QueryStates.QueryState.key arg0@@426)) (SeqType BoxType)) :qid |funType:QueryStates.QueryState.key| :pattern ( (QueryStates.QueryState.key arg0@@426)) ))) (forall ((arg0@@427 T@U) (arg1@@175 T@U) (arg2@@109 T@U) ) (! (= (type (Betree__Refines__Map.__default.GetLookup arg0@@427 arg1@@175 arg2@@109)) DatatypeTypeType) :qid |funType:Betree__Refines__Map.__default.GetLookup| :pattern ( (Betree__Refines__Map.__default.GetLookup arg0@@427 arg1@@175 arg2@@109)) ))) (forall ((arg0@@428 T@U) ) (! (= (type (Betree__Refines__Map.LookupResult.result arg0@@428)) (SeqType BoxType)) :qid |funType:Betree__Refines__Map.LookupResult.result| :pattern ( (Betree__Refines__Map.LookupResult.result arg0@@428)) ))) (forall ((arg0@@429 T@U) (arg1@@176 T@U) ) (! (= (type (ValueMessage.__default.ApplyDelta arg0@@429 arg1@@176)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.ApplyDelta| :pattern ( (ValueMessage.__default.ApplyDelta arg0@@429 arg1@@176)) ))) (forall ((arg0@@430 T@U) ) (! (= (type (QueryStates.QueryState.answer arg0@@430)) (SeqType BoxType)) :qid |funType:QueryStates.QueryState.answer| :pattern ( (QueryStates.QueryState.answer arg0@@430)) ))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((|betree#0@@1| T@U) (|query#0@@1| T@U) ) (!  (=> (and (and (= (type |betree#0@@1|) DatatypeTypeType) (= (type |query#0@@1|) DatatypeTypeType)) (or (|AsyncBetree__Refines__AsyncMap.__default.QueryAnswer#canCall| |betree#0@@1| |query#0@@1|) (and (not (= 3 $FunctionContextHeight)) (and (and ($Is |betree#0@@1| Tclass.Betree.Variables) ($Is |query#0@@1| Tclass.QueryStates.QueryState)) (AsyncBetree.__default.QueryInv |betree#0@@1| |query#0@@1|))))) (and (and (=> (QueryStates.QueryState.InProgress_q |query#0@@1|) (let ((|ref#1| (QueryStates.QueryState.ref |query#0@@1|))) (let ((|delta#1| (QueryStates.QueryState.delta |query#0@@1|))) (and (or (QueryStates.QueryState.InProgress_q |query#0@@1|) (QueryStates.QueryState.Finished_q |query#0@@1|)) (and (and (and (and (and (Betree.Variables.Variables_q |betree#0@@1|) (BetreeBlockInterface.Variables.Variables_q (Betree.Variables.bcv |betree#0@@1|))) (or (QueryStates.QueryState.InProgress_q |query#0@@1|) (QueryStates.QueryState.Finished_q |query#0@@1|))) (|Betree__Refines__Map.__default.GetLookup#canCall| (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |betree#0@@1|)) (QueryStates.QueryState.key |query#0@@1|) |ref#1|)) (Betree__Refines__Map.LookupResult.LookupResult_q (Betree__Refines__Map.__default.GetLookup (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |betree#0@@1|)) (QueryStates.QueryState.key |query#0@@1|) |ref#1|))) (|ValueMessage.__default.ApplyDelta#canCall| |delta#1| (Betree__Refines__Map.LookupResult.result (Betree__Refines__Map.__default.GetLookup (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |betree#0@@1|)) (QueryStates.QueryState.key |query#0@@1|) |ref#1|)))))))) (=> (not (QueryStates.QueryState.InProgress_q |query#0@@1|)) (or (QueryStates.QueryState.InProgress_q |query#0@@1|) (QueryStates.QueryState.Finished_q |query#0@@1|)))) (= (AsyncBetree__Refines__AsyncMap.__default.QueryAnswer |betree#0@@1| |query#0@@1|) (ite (QueryStates.QueryState.InProgress_q |query#0@@1|) (let ((|ref#0| (QueryStates.QueryState.ref |query#0@@1|))) (let ((|delta#0| (QueryStates.QueryState.delta |query#0@@1|))) (ValueMessage.__default.ApplyDelta |delta#0| (Betree__Refines__Map.LookupResult.result (Betree__Refines__Map.__default.GetLookup (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |betree#0@@1|)) (QueryStates.QueryState.key |query#0@@1|) |ref#0|))))) (let ((|answer#0| (QueryStates.QueryState.answer |query#0@@1|))) |answer#0|))))) :qid |AsyncBetreeRefinesAsyncMapidfy.20:24| :skolemid |1365| :pattern ( (AsyncBetree__Refines__AsyncMap.__default.QueryAnswer |betree#0@@1| |query#0@@1|)) ))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((|betree#0@@2| T@U) (|query#0@@2| T@U) ) (!  (=> (and (and (= (type |betree#0@@2|) DatatypeTypeType) (= (type |query#0@@2|) DatatypeTypeType)) (or (|AsyncBetree__Refines__AsyncMap.__default.QueryAnswer#canCall| (Lit |betree#0@@2|) (Lit |query#0@@2|)) (and (not (= 3 $FunctionContextHeight)) (and (and ($Is |betree#0@@2| Tclass.Betree.Variables) ($Is |query#0@@2| Tclass.QueryStates.QueryState)) (U_2_bool (Lit (bool_2_U (AsyncBetree.__default.QueryInv (Lit |betree#0@@2|) (Lit |query#0@@2|))))))))) (and (and (=> (U_2_bool (Lit (bool_2_U (QueryStates.QueryState.InProgress_q (Lit |query#0@@2|))))) (let ((|ref#3| (Lit (QueryStates.QueryState.ref (Lit |query#0@@2|))))) (let ((|delta#3| (Lit (QueryStates.QueryState.delta (Lit |query#0@@2|))))) (and (or (QueryStates.QueryState.InProgress_q (Lit |query#0@@2|)) (QueryStates.QueryState.Finished_q (Lit |query#0@@2|))) (and (and (and (and (and (Betree.Variables.Variables_q (Lit |betree#0@@2|)) (BetreeBlockInterface.Variables.Variables_q (Lit (Betree.Variables.bcv (Lit |betree#0@@2|))))) (or (QueryStates.QueryState.InProgress_q (Lit |query#0@@2|)) (QueryStates.QueryState.Finished_q (Lit |query#0@@2|)))) (|Betree__Refines__Map.__default.GetLookup#canCall| (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |betree#0@@2|))))) (Lit (QueryStates.QueryState.key (Lit |query#0@@2|))) |ref#3|)) (Betree__Refines__Map.LookupResult.LookupResult_q (Betree__Refines__Map.__default.GetLookup (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |betree#0@@2|))))) (Lit (QueryStates.QueryState.key (Lit |query#0@@2|))) |ref#3|))) (|ValueMessage.__default.ApplyDelta#canCall| |delta#3| (Betree__Refines__Map.LookupResult.result (Betree__Refines__Map.__default.GetLookup (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |betree#0@@2|))))) (Lit (QueryStates.QueryState.key (Lit |query#0@@2|))) |ref#3|)))))))) (=> (not (U_2_bool (Lit (bool_2_U (QueryStates.QueryState.InProgress_q (Lit |query#0@@2|)))))) (or (QueryStates.QueryState.InProgress_q (Lit |query#0@@2|)) (QueryStates.QueryState.Finished_q (Lit |query#0@@2|))))) (= (AsyncBetree__Refines__AsyncMap.__default.QueryAnswer (Lit |betree#0@@2|) (Lit |query#0@@2|)) (ite (QueryStates.QueryState.InProgress_q (Lit |query#0@@2|)) (let ((|ref#2| (Lit (QueryStates.QueryState.ref (Lit |query#0@@2|))))) (let ((|delta#2| (Lit (QueryStates.QueryState.delta (Lit |query#0@@2|))))) (Lit (ValueMessage.__default.ApplyDelta |delta#2| (Lit (Betree__Refines__Map.LookupResult.result (Lit (Betree__Refines__Map.__default.GetLookup (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |betree#0@@2|))))) (Lit (QueryStates.QueryState.key (Lit |query#0@@2|))) |ref#2|)))))))) (let ((|answer#2| (Lit (QueryStates.QueryState.answer (Lit |query#0@@2|))))) |answer#2|))))) :qid |AsyncBetreeRefinesAsyncMapidfy.20:24| :weight 3 :skolemid |1366| :pattern ( (AsyncBetree__Refines__AsyncMap.__default.QueryAnswer (Lit |betree#0@@2|) (Lit |query#0@@2|))) ))))
(assert (= (type Tclass.KeyType.Key) TyType))
(assert (= (Tag Tclass.KeyType.Key) Tagclass.KeyType.Key))
(assert (= (TagFamily Tclass.KeyType.Key) tytagFamily$Key))
(assert (forall ((bx@@128 T@U) ) (!  (=> (and (= (type bx@@128) BoxType) ($IsBox bx@@128 Tclass.KeyType.Key)) (and (= ($Box ($Unbox (SeqType BoxType) bx@@128)) bx@@128) ($Is ($Unbox (SeqType BoxType) bx@@128) Tclass.KeyType.Key))) :qid |unknown.0:0| :skolemid |1368| :pattern ( ($IsBox bx@@128 Tclass.KeyType.Key)) )))
(assert (= (type Tclass.NativeTypes.byte) TyType))
(assert (= (Tag Tclass.NativeTypes.byte) Tagclass.NativeTypes.byte))
(assert (= (TagFamily Tclass.NativeTypes.byte) tytagFamily$byte))
(assert (forall ((bx@@129 T@U) ) (!  (=> (and (= (type bx@@129) BoxType) ($IsBox bx@@129 Tclass.NativeTypes.byte)) (and (= ($Box ($Unbox intType bx@@129)) bx@@129) ($Is ($Unbox intType bx@@129) Tclass.NativeTypes.byte))) :qid |unknown.0:0| :skolemid |1369| :pattern ( ($IsBox bx@@129 Tclass.NativeTypes.byte)) )))
(assert (= (type Tclass.ValueMessage.Delta) TyType))
(assert (= (Tag Tclass.ValueMessage.Delta) Tagclass.ValueMessage.Delta))
(assert (= (TagFamily Tclass.ValueMessage.Delta) tytagFamily$Delta))
(assert (forall ((bx@@130 T@U) ) (!  (=> (and (= (type bx@@130) BoxType) ($IsBox bx@@130 Tclass.ValueMessage.Delta)) (and (= ($Box ($Unbox DatatypeTypeType bx@@130)) bx@@130) ($Is ($Unbox DatatypeTypeType bx@@130) Tclass.ValueMessage.Delta))) :qid |unknown.0:0| :skolemid |1370| :pattern ( ($IsBox bx@@130 Tclass.ValueMessage.Delta)) )))
(assert (= (type Tclass.ReferenceType.Reference) TyType))
(assert (= (Tag Tclass.ReferenceType.Reference) Tagclass.ReferenceType.Reference))
(assert (= (TagFamily Tclass.ReferenceType.Reference) tytagFamily$Reference))
(assert (= (type Tclass.BetreeGraph.Node) TyType))
(assert (= (Tag Tclass.BetreeGraph.Node) Tagclass.BetreeGraph.Node))
(assert (= (TagFamily Tclass.BetreeGraph.Node) tytagFamily$Node))
(assert (forall ((bx@@131 T@U) ) (!  (=> (and (= (type bx@@131) BoxType) ($IsBox bx@@131 Tclass.BetreeGraph.Node)) (and (= ($Box ($Unbox DatatypeTypeType bx@@131)) bx@@131) ($Is ($Unbox DatatypeTypeType bx@@131) Tclass.BetreeGraph.Node))) :qid |unknown.0:0| :skolemid |1371| :pattern ( ($IsBox bx@@131 Tclass.BetreeGraph.Node)) )))
(assert (= (type Tclass.BetreeGraph.ReadOp) TyType))
(assert (= (Tag Tclass.BetreeGraph.ReadOp) Tagclass.BetreeGraph.ReadOp))
(assert (= (TagFamily Tclass.BetreeGraph.ReadOp) tytagFamily$ReadOp))
(assert (forall ((bx@@132 T@U) ) (!  (=> (and (= (type bx@@132) BoxType) ($IsBox bx@@132 Tclass.BetreeGraph.ReadOp)) (and (= ($Box ($Unbox DatatypeTypeType bx@@132)) bx@@132) ($Is ($Unbox DatatypeTypeType bx@@132) Tclass.BetreeGraph.ReadOp))) :qid |unknown.0:0| :skolemid |1372| :pattern ( ($IsBox bx@@132 Tclass.BetreeGraph.ReadOp)) )))
(assert (= (type Tclass.AsyncBetree.Variables) TyType))
(assert (= (Tag Tclass.AsyncBetree.Variables) Tagclass.AsyncBetree.Variables))
(assert (= (TagFamily Tclass.AsyncBetree.Variables) tytagFamily$Variables))
(assert (forall ((bx@@133 T@U) ) (!  (=> (and (= (type bx@@133) BoxType) ($IsBox bx@@133 Tclass.AsyncBetree.Variables)) (and (= ($Box ($Unbox DatatypeTypeType bx@@133)) bx@@133) ($Is ($Unbox DatatypeTypeType bx@@133) Tclass.AsyncBetree.Variables))) :qid |unknown.0:0| :skolemid |1377| :pattern ( ($IsBox bx@@133 Tclass.AsyncBetree.Variables)) )))
(assert  (and (and (forall ((arg0@@431 T@U) ) (! (= (type (AsyncBetree__Refines__AsyncMap.__default.IQueries arg0@@431)) (MapType BoxType BoxType)) :qid |funType:AsyncBetree__Refines__AsyncMap.__default.IQueries| :pattern ( (AsyncBetree__Refines__AsyncMap.__default.IQueries arg0@@431)) )) (forall ((arg0@@432 T@U) ) (! (= (type (AsyncBetree.Variables.queries arg0@@432)) (MapType BoxType BoxType)) :qid |funType:AsyncBetree.Variables.queries| :pattern ( (AsyncBetree.Variables.queries arg0@@432)) ))) (forall ((arg0@@433 T@U) ) (! (= (type (AsyncBetree.Variables.betree arg0@@433)) DatatypeTypeType) :qid |funType:AsyncBetree.Variables.betree| :pattern ( (AsyncBetree.Variables.betree arg0@@433)) ))))
(assert  (=> (<= 5 $FunctionContextHeight) (forall ((|s#0| T@U) ) (!  (=> (and (= (type |s#0|) DatatypeTypeType) (or (|AsyncBetree__Refines__AsyncMap.__default.IQueries#canCall| |s#0|) (and (not (= 5 $FunctionContextHeight)) (and ($Is |s#0| Tclass.AsyncBetree.Variables) (forall ((|id#0| Int) ) (!  (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s#0|)) ($Box (int_2_U |id#0|)))) (AsyncBetree.__default.QueryInv (AsyncBetree.Variables.betree |s#0|) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s#0|)) ($Box (int_2_U |id#0|)))))) :qid |AsyncBetreeRefinesAsyncMapidfy.33:19| :skolemid |1378| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s#0|)) ($Box (int_2_U |id#0|))))) :pattern ( (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s#0|)) ($Box (int_2_U |id#0|)))) )))))) ($Is (AsyncBetree__Refines__AsyncMap.__default.IQueries |s#0|) (TMap TInt Tclass.ValueType.Value))) :qid |AsyncBetreeRefinesAsyncMapidfy.32:21| :skolemid |1379| :pattern ( (AsyncBetree__Refines__AsyncMap.__default.IQueries |s#0|)) ))))
(assert (forall ((|s#0@@0| T@U) ) (!  (=> (and (= (type |s#0@@0|) DatatypeTypeType) ($Is |s#0@@0| Tclass.AsyncBetree.Variables)) (= (|AsyncBetree__Refines__AsyncMap.__default.IQueries#requires| |s#0@@0|) (forall ((|id#1| Int) ) (!  (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s#0@@0|)) ($Box (int_2_U |id#1|)))) (AsyncBetree.__default.QueryInv (AsyncBetree.Variables.betree |s#0@@0|) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s#0@@0|)) ($Box (int_2_U |id#1|)))))) :qid |AsyncBetreeRefinesAsyncMapidfy.33:19| :skolemid |1380| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s#0@@0|)) ($Box (int_2_U |id#1|))))) :pattern ( (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s#0@@0|)) ($Box (int_2_U |id#1|)))) )))) :qid |AsyncBetreeRefinesAsyncMapidfy.32:21| :skolemid |1381| :pattern ( (|AsyncBetree__Refines__AsyncMap.__default.IQueries#requires| |s#0@@0|)) )))
(assert  (and (forall ((arg0@@434 T@U) (arg1@@177 T@U) ) (! (= (type (|lambda#2| arg0@@434 arg1@@177)) (MapType0Type BoxType boolType)) :qid |funType:lambda#2| :pattern ( (|lambda#2| arg0@@434 arg1@@177)) )) (forall ((arg0@@435 T@U) (arg1@@178 T@U) ) (! (= (type (|lambda#3| arg0@@435 arg1@@178)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#3| :pattern ( (|lambda#3| arg0@@435 arg1@@178)) ))))
(assert  (=> (<= 5 $FunctionContextHeight) (forall ((|s#0@@1| T@U) ) (!  (=> (and (= (type |s#0@@1|) DatatypeTypeType) (or (|AsyncBetree__Refines__AsyncMap.__default.IQueries#canCall| |s#0@@1|) (and (not (= 5 $FunctionContextHeight)) (and ($Is |s#0@@1| Tclass.AsyncBetree.Variables) (forall ((|id#1@@0| Int) ) (!  (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s#0@@1|)) ($Box (int_2_U |id#1@@0|)))) (AsyncBetree.__default.QueryInv (AsyncBetree.Variables.betree |s#0@@1|) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s#0@@1|)) ($Box (int_2_U |id#1@@0|)))))) :qid |AsyncBetreeRefinesAsyncMapidfy.33:19| :skolemid |1380| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s#0@@1|)) ($Box (int_2_U |id#1@@0|))))) :pattern ( (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s#0@@1|)) ($Box (int_2_U |id#1@@0|)))) )))))) (and (forall ((|id#2| T@U) ) (!  (=> (= (type |id#2|) intType) (and (AsyncBetree.Variables.Variables_q |s#0@@1|) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s#0@@1|)) ($Box |id#2|))) (and (and (AsyncBetree.Variables.Variables_q |s#0@@1|) (AsyncBetree.Variables.Variables_q |s#0@@1|)) (|AsyncBetree__Refines__AsyncMap.__default.QueryAnswer#canCall| (AsyncBetree.Variables.betree |s#0@@1|) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s#0@@1|)) ($Box |id#2|)))))))) :qid |AsyncBetreeRefinesAsyncMapidfy.35:9| :skolemid |1382| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s#0@@1|)) ($Box |id#2|)))) :pattern ( (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s#0@@1|)) ($Box |id#2|))) )) (= (AsyncBetree__Refines__AsyncMap.__default.IQueries |s#0@@1|) (|Map#Glue| (|lambda#2| TInt (|Map#Domain| (AsyncBetree.Variables.queries |s#0@@1|))) (|lambda#3| (AsyncBetree.Variables.betree |s#0@@1|) (|Map#Elements| (AsyncBetree.Variables.queries |s#0@@1|))) (TMap TInt Tclass.ValueType.Value))))) :qid |AsyncBetreeRefinesAsyncMapidfy.32:21| :skolemid |1383| :pattern ( (AsyncBetree__Refines__AsyncMap.__default.IQueries |s#0@@1|)) ))))
(assert  (=> (<= 5 $FunctionContextHeight) (forall ((|s#0@@2| T@U) ) (!  (=> (and (= (type |s#0@@2|) DatatypeTypeType) (or (|AsyncBetree__Refines__AsyncMap.__default.IQueries#canCall| (Lit |s#0@@2|)) (and (not (= 5 $FunctionContextHeight)) (and ($Is |s#0@@2| Tclass.AsyncBetree.Variables) (forall ((|id#3| Int) ) (!  (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries (Lit |s#0@@2|))) ($Box (int_2_U |id#3|)))) (AsyncBetree.__default.QueryInv (Lit (AsyncBetree.Variables.betree (Lit |s#0@@2|))) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncBetree.Variables.queries (Lit |s#0@@2|)))) ($Box (int_2_U |id#3|)))))) :qid |AsyncBetreeRefinesAsyncMapidfy.33:19| :skolemid |1384| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s#0@@2|)) ($Box (int_2_U |id#3|))))) :pattern ( (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s#0@@2|)) ($Box (int_2_U |id#3|)))) )))))) (and (forall ((|id#2@@0| T@U) ) (!  (=> (= (type |id#2@@0|) intType) (and (AsyncBetree.Variables.Variables_q (Lit |s#0@@2|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries (Lit |s#0@@2|))) ($Box |id#2@@0|))) (and (and (AsyncBetree.Variables.Variables_q (Lit |s#0@@2|)) (AsyncBetree.Variables.Variables_q (Lit |s#0@@2|))) (|AsyncBetree__Refines__AsyncMap.__default.QueryAnswer#canCall| (Lit (AsyncBetree.Variables.betree (Lit |s#0@@2|))) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncBetree.Variables.queries (Lit |s#0@@2|)))) ($Box |id#2@@0|)))))))) :qid |AsyncBetreeRefinesAsyncMapidfy.35:9| :skolemid |1385| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s#0@@2|)) ($Box |id#2@@0|)))) :pattern ( (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s#0@@2|)) ($Box |id#2@@0|))) )) (= (AsyncBetree__Refines__AsyncMap.__default.IQueries (Lit |s#0@@2|)) (|Map#Glue| (|lambda#2| TInt (|Map#Domain| (AsyncBetree.Variables.queries (Lit |s#0@@2|)))) (|lambda#3| (Lit (AsyncBetree.Variables.betree (Lit |s#0@@2|))) (|Map#Elements| (Lit (AsyncBetree.Variables.queries (Lit |s#0@@2|))))) (TMap TInt Tclass.ValueType.Value))))) :qid |AsyncBetreeRefinesAsyncMapidfy.32:21| :weight 3 :skolemid |1386| :pattern ( (AsyncBetree__Refines__AsyncMap.__default.IQueries (Lit |s#0@@2|))) ))))
(assert (= (type Tclass.AsyncMapSpec.Variables) TyType))
(assert (= (Tag Tclass.AsyncMapSpec.Variables) Tagclass.AsyncMapSpec.Variables))
(assert (= (TagFamily Tclass.AsyncMapSpec.Variables) tytagFamily$Variables))
(assert (forall ((bx@@134 T@U) ) (!  (=> (and (= (type bx@@134) BoxType) ($IsBox bx@@134 Tclass.AsyncMapSpec.Variables)) (and (= ($Box ($Unbox DatatypeTypeType bx@@134)) bx@@134) ($Is ($Unbox DatatypeTypeType bx@@134) Tclass.AsyncMapSpec.Variables))) :qid |unknown.0:0| :skolemid |1393| :pattern ( ($IsBox bx@@134 Tclass.AsyncMapSpec.Variables)) )))
(assert (forall ((arg0@@436 T@U) ) (! (= (type (AsyncBetree__Refines__AsyncMap.__default.I arg0@@436)) DatatypeTypeType) :qid |funType:AsyncBetree__Refines__AsyncMap.__default.I| :pattern ( (AsyncBetree__Refines__AsyncMap.__default.I arg0@@436)) )))
(assert  (=> (<= 7 $FunctionContextHeight) (forall ((|s#0@@3| T@U) ) (!  (=> (and (= (type |s#0@@3|) DatatypeTypeType) (or (|AsyncBetree__Refines__AsyncMap.__default.I#canCall| |s#0@@3|) (and (not (= 7 $FunctionContextHeight)) (and ($Is |s#0@@3| Tclass.AsyncBetree.Variables) (AsyncBetree.__default.Inv |s#0@@3|))))) ($Is (AsyncBetree__Refines__AsyncMap.__default.I |s#0@@3|) Tclass.AsyncMapSpec.Variables)) :qid |AsyncBetreeRefinesAsyncMapidfy.38:14| :skolemid |1394| :pattern ( (AsyncBetree__Refines__AsyncMap.__default.I |s#0@@3|)) ))))
(assert (forall ((|s#0@@4| T@U) ) (!  (=> (and (= (type |s#0@@4|) DatatypeTypeType) ($Is |s#0@@4| Tclass.AsyncBetree.Variables)) (= (|AsyncBetree__Refines__AsyncMap.__default.I#requires| |s#0@@4|) (AsyncBetree.__default.Inv |s#0@@4|))) :qid |AsyncBetreeRefinesAsyncMapidfy.38:14| :skolemid |1395| :pattern ( (|AsyncBetree__Refines__AsyncMap.__default.I#requires| |s#0@@4|)) )))
(assert  (and (forall ((arg0@@437 T@U) (arg1@@179 T@U) ) (! (= (type (|#AsyncMapSpec.Variables.Variables| arg0@@437 arg1@@179)) DatatypeTypeType) :qid |funType:#AsyncMapSpec.Variables.Variables| :pattern ( (|#AsyncMapSpec.Variables.Variables| arg0@@437 arg1@@179)) )) (forall ((arg0@@438 T@U) ) (! (= (type (Betree__Refines__Map.__default.I arg0@@438)) DatatypeTypeType) :qid |funType:Betree__Refines__Map.__default.I| :pattern ( (Betree__Refines__Map.__default.I arg0@@438)) ))))
(assert  (=> (<= 7 $FunctionContextHeight) (forall ((|s#0@@5| T@U) ) (!  (=> (and (= (type |s#0@@5|) DatatypeTypeType) (or (|AsyncBetree__Refines__AsyncMap.__default.I#canCall| |s#0@@5|) (and (not (= 7 $FunctionContextHeight)) (and ($Is |s#0@@5| Tclass.AsyncBetree.Variables) (AsyncBetree.__default.Inv |s#0@@5|))))) (and (and (and (AsyncBetree.Variables.Variables_q |s#0@@5|) (|Betree__Refines__Map.__default.I#canCall| (AsyncBetree.Variables.betree |s#0@@5|))) (|AsyncBetree__Refines__AsyncMap.__default.IQueries#canCall| |s#0@@5|)) (= (AsyncBetree__Refines__AsyncMap.__default.I |s#0@@5|) (|#AsyncMapSpec.Variables.Variables| (Betree__Refines__Map.__default.I (AsyncBetree.Variables.betree |s#0@@5|)) (AsyncBetree__Refines__AsyncMap.__default.IQueries |s#0@@5|))))) :qid |AsyncBetreeRefinesAsyncMapidfy.38:14| :skolemid |1396| :pattern ( (AsyncBetree__Refines__AsyncMap.__default.I |s#0@@5|)) ))))
(assert  (=> (<= 7 $FunctionContextHeight) (forall ((|s#0@@6| T@U) ) (!  (=> (and (= (type |s#0@@6|) DatatypeTypeType) (or (|AsyncBetree__Refines__AsyncMap.__default.I#canCall| (Lit |s#0@@6|)) (and (not (= 7 $FunctionContextHeight)) (and ($Is |s#0@@6| Tclass.AsyncBetree.Variables) (U_2_bool (Lit (bool_2_U (AsyncBetree.__default.Inv (Lit |s#0@@6|))))))))) (and (and (and (AsyncBetree.Variables.Variables_q (Lit |s#0@@6|)) (|Betree__Refines__Map.__default.I#canCall| (Lit (AsyncBetree.Variables.betree (Lit |s#0@@6|))))) (|AsyncBetree__Refines__AsyncMap.__default.IQueries#canCall| (Lit |s#0@@6|))) (= (AsyncBetree__Refines__AsyncMap.__default.I (Lit |s#0@@6|)) (Lit (|#AsyncMapSpec.Variables.Variables| (Lit (Betree__Refines__Map.__default.I (Lit (AsyncBetree.Variables.betree (Lit |s#0@@6|))))) (Lit (AsyncBetree__Refines__AsyncMap.__default.IQueries (Lit |s#0@@6|)))))))) :qid |AsyncBetreeRefinesAsyncMapidfy.38:14| :weight 3 :skolemid |1397| :pattern ( (AsyncBetree__Refines__AsyncMap.__default.I (Lit |s#0@@6|))) ))))
(assert (= (type Tclass.UI.Op) TyType))
(assert (= (Tag Tclass.UI.Op) Tagclass.UI.Op))
(assert (= (TagFamily Tclass.UI.Op) tytagFamily$Op))
(assert (forall ((bx@@135 T@U) ) (!  (=> (and (= (type bx@@135) BoxType) ($IsBox bx@@135 Tclass.UI.Op)) (and (= ($Box ($Unbox DatatypeTypeType bx@@135)) bx@@135) ($Is ($Unbox DatatypeTypeType bx@@135) Tclass.UI.Op))) :qid |unknown.0:0| :skolemid |1434| :pattern ( ($IsBox bx@@135 Tclass.UI.Op)) )))
(assert (= (type Tclass.AsyncMapSpec.Step) TyType))
(assert (= (Tag Tclass.AsyncMapSpec.Step) Tagclass.AsyncMapSpec.Step))
(assert (= (TagFamily Tclass.AsyncMapSpec.Step) tytagFamily$Step))
(assert (forall ((bx@@136 T@U) ) (!  (=> (and (= (type bx@@136) BoxType) ($IsBox bx@@136 Tclass.AsyncMapSpec.Step)) (and (= ($Box ($Unbox DatatypeTypeType bx@@136)) bx@@136) ($Is ($Unbox DatatypeTypeType bx@@136) Tclass.AsyncMapSpec.Step))) :qid |unknown.0:0| :skolemid |1467| :pattern ( ($IsBox bx@@136 Tclass.AsyncMapSpec.Step)) )))
(assert (= (type Tclass.QueryStates.QueryDescent) TyType))
(assert (= (Tag Tclass.QueryStates.QueryDescent) Tagclass.QueryStates.QueryDescent))
(assert (= (TagFamily Tclass.QueryStates.QueryDescent) tytagFamily$QueryDescent))
(assert (forall ((bx@@137 T@U) ) (!  (=> (and (= (type bx@@137) BoxType) ($IsBox bx@@137 Tclass.QueryStates.QueryDescent)) (and (= ($Box ($Unbox DatatypeTypeType bx@@137)) bx@@137) ($Is ($Unbox DatatypeTypeType bx@@137) Tclass.QueryStates.QueryDescent))) :qid |unknown.0:0| :skolemid |1582| :pattern ( ($IsBox bx@@137 Tclass.QueryStates.QueryDescent)) )))
(assert (= (type Tclass.Betree__Refines__Map.LookupResult) TyType))
(assert (= (Tag Tclass.Betree__Refines__Map.LookupResult) Tagclass.Betree__Refines__Map.LookupResult))
(assert (= (TagFamily Tclass.Betree__Refines__Map.LookupResult) tytagFamily$LookupResult))
(assert (forall ((bx@@138 T@U) ) (!  (=> (and (= (type bx@@138) BoxType) ($IsBox bx@@138 Tclass.Betree__Refines__Map.LookupResult)) (and (= ($Box ($Unbox DatatypeTypeType bx@@138)) bx@@138) ($Is ($Unbox DatatypeTypeType bx@@138) Tclass.Betree__Refines__Map.LookupResult))) :qid |unknown.0:0| :skolemid |1635| :pattern ( ($IsBox bx@@138 Tclass.Betree__Refines__Map.LookupResult)) )))
(assert (= (type Tclass.Betree.Step) TyType))
(assert (= (Tag Tclass.Betree.Step) Tagclass.Betree.Step))
(assert (= (TagFamily Tclass.Betree.Step) tytagFamily$Step))
(assert (forall ((bx@@139 T@U) ) (!  (=> (and (= (type bx@@139) BoxType) ($IsBox bx@@139 Tclass.Betree.Step)) (and (= ($Box ($Unbox DatatypeTypeType bx@@139)) bx@@139) ($Is ($Unbox DatatypeTypeType bx@@139) Tclass.Betree.Step))) :qid |unknown.0:0| :skolemid |1662| :pattern ( ($IsBox bx@@139 Tclass.Betree.Step)) )))
(assert (= (type Tclass.BetreeSpec.BetreeStep) TyType))
(assert (= (Tag Tclass.BetreeSpec.BetreeStep) Tagclass.BetreeSpec.BetreeStep))
(assert (= (TagFamily Tclass.BetreeSpec.BetreeStep) tytagFamily$BetreeStep))
(assert (forall ((bx@@140 T@U) ) (!  (=> (and (= (type bx@@140) BoxType) ($IsBox bx@@140 Tclass.BetreeSpec.BetreeStep)) (and (= ($Box ($Unbox DatatypeTypeType bx@@140)) bx@@140) ($Is ($Unbox DatatypeTypeType bx@@140) Tclass.BetreeSpec.BetreeStep))) :qid |unknown.0:0| :skolemid |1688| :pattern ( ($IsBox bx@@140 Tclass.BetreeSpec.BetreeStep)) )))
(assert (= (type Tclass.BetreeSpec.Redirect) TyType))
(assert (= (Tag Tclass.BetreeSpec.Redirect) Tagclass.BetreeSpec.Redirect))
(assert (= (TagFamily Tclass.BetreeSpec.Redirect) tytagFamily$Redirect))
(assert (forall ((bx@@141 T@U) ) (!  (=> (and (= (type bx@@141) BoxType) ($IsBox bx@@141 Tclass.BetreeSpec.Redirect)) (and (= ($Box ($Unbox DatatypeTypeType bx@@141)) bx@@141) ($Is ($Unbox DatatypeTypeType bx@@141) Tclass.BetreeSpec.Redirect))) :qid |unknown.0:0| :skolemid |1689| :pattern ( ($IsBox bx@@141 Tclass.BetreeSpec.Redirect)) )))
(assert (= (type Tclass.BetreeSpec.RootGrowth) TyType))
(assert (= (Tag Tclass.BetreeSpec.RootGrowth) Tagclass.BetreeSpec.RootGrowth))
(assert (= (TagFamily Tclass.BetreeSpec.RootGrowth) tytagFamily$RootGrowth))
(assert (forall ((bx@@142 T@U) ) (!  (=> (and (= (type bx@@142) BoxType) ($IsBox bx@@142 Tclass.BetreeSpec.RootGrowth)) (and (= ($Box ($Unbox DatatypeTypeType bx@@142)) bx@@142) ($Is ($Unbox DatatypeTypeType bx@@142) Tclass.BetreeSpec.RootGrowth))) :qid |unknown.0:0| :skolemid |1691| :pattern ( ($IsBox bx@@142 Tclass.BetreeSpec.RootGrowth)) )))
(assert (= (type Tclass.BetreeSpec.NodeFlush) TyType))
(assert (= (Tag Tclass.BetreeSpec.NodeFlush) Tagclass.BetreeSpec.NodeFlush))
(assert (= (TagFamily Tclass.BetreeSpec.NodeFlush) tytagFamily$NodeFlush))
(assert (forall ((bx@@143 T@U) ) (!  (=> (and (= (type bx@@143) BoxType) ($IsBox bx@@143 Tclass.BetreeSpec.NodeFlush)) (and (= ($Box ($Unbox DatatypeTypeType bx@@143)) bx@@143) ($Is ($Unbox DatatypeTypeType bx@@143) Tclass.BetreeSpec.NodeFlush))) :qid |unknown.0:0| :skolemid |1693| :pattern ( ($IsBox bx@@143 Tclass.BetreeSpec.NodeFlush)) )))
(assert (= (type Tclass.BetreeSpec.MessageInsertion) TyType))
(assert (= (Tag Tclass.BetreeSpec.MessageInsertion) Tagclass.BetreeSpec.MessageInsertion))
(assert (= (TagFamily Tclass.BetreeSpec.MessageInsertion) tytagFamily$MessageInsertion))
(assert (forall ((bx@@144 T@U) ) (!  (=> (and (= (type bx@@144) BoxType) ($IsBox bx@@144 Tclass.BetreeSpec.MessageInsertion)) (and (= ($Box ($Unbox DatatypeTypeType bx@@144)) bx@@144) ($Is ($Unbox DatatypeTypeType bx@@144) Tclass.BetreeSpec.MessageInsertion))) :qid |unknown.0:0| :skolemid |1695| :pattern ( ($IsBox bx@@144 Tclass.BetreeSpec.MessageInsertion)) )))
(assert (= (type Tclass.BetreeSpec.SuccQuery) TyType))
(assert (= (Tag Tclass.BetreeSpec.SuccQuery) Tagclass.BetreeSpec.SuccQuery))
(assert (= (TagFamily Tclass.BetreeSpec.SuccQuery) tytagFamily$SuccQuery))
(assert (forall ((bx@@145 T@U) ) (!  (=> (and (= (type bx@@145) BoxType) ($IsBox bx@@145 Tclass.BetreeSpec.SuccQuery)) (and (= ($Box ($Unbox DatatypeTypeType bx@@145)) bx@@145) ($Is ($Unbox DatatypeTypeType bx@@145) Tclass.BetreeSpec.SuccQuery))) :qid |unknown.0:0| :skolemid |1697| :pattern ( ($IsBox bx@@145 Tclass.BetreeSpec.SuccQuery)) )))
(assert (= (type Tclass.BetreeSpec.LookupQuery) TyType))
(assert (= (Tag Tclass.BetreeSpec.LookupQuery) Tagclass.BetreeSpec.LookupQuery))
(assert (= (TagFamily Tclass.BetreeSpec.LookupQuery) tytagFamily$LookupQuery))
(assert (forall ((bx@@146 T@U) ) (!  (=> (and (= (type bx@@146) BoxType) ($IsBox bx@@146 Tclass.BetreeSpec.LookupQuery)) (and (= ($Box ($Unbox DatatypeTypeType bx@@146)) bx@@146) ($Is ($Unbox DatatypeTypeType bx@@146) Tclass.BetreeSpec.LookupQuery))) :qid |unknown.0:0| :skolemid |1698| :pattern ( ($IsBox bx@@146 Tclass.BetreeSpec.LookupQuery)) )))
(assert (= (type Tclass.AsyncBetree.Step) TyType))
(assert (= (Tag Tclass.AsyncBetree.Step) Tagclass.AsyncBetree.Step))
(assert (= (TagFamily Tclass.AsyncBetree.Step) tytagFamily$Step))
(assert (forall ((bx@@147 T@U) ) (!  (=> (and (= (type bx@@147) BoxType) ($IsBox bx@@147 Tclass.AsyncBetree.Step)) (and (= ($Box ($Unbox DatatypeTypeType bx@@147)) bx@@147) ($Is ($Unbox DatatypeTypeType bx@@147) Tclass.AsyncBetree.Step))) :qid |unknown.0:0| :skolemid |1705| :pattern ( ($IsBox bx@@147 Tclass.AsyncBetree.Step)) )))
(assert (= (type Tclass.MapSpec.Step) TyType))
(assert (= (Tag Tclass.MapSpec.Step) Tagclass.MapSpec.Step))
(assert (= (TagFamily Tclass.MapSpec.Step) tytagFamily$Step))
(assert (forall ((bx@@148 T@U) ) (!  (=> (and (= (type bx@@148) BoxType) ($IsBox bx@@148 Tclass.MapSpec.Step)) (and (= ($Box ($Unbox DatatypeTypeType bx@@148)) bx@@148) ($Is ($Unbox DatatypeTypeType bx@@148) Tclass.MapSpec.Step))) :qid |unknown.0:0| :skolemid |1783| :pattern ( ($IsBox bx@@148 Tclass.MapSpec.Step)) )))
(assert (= (type Tclass.MapSpec.Variables) TyType))
(assert (= (Tag Tclass.MapSpec.Variables) Tagclass.MapSpec.Variables))
(assert (= (TagFamily Tclass.MapSpec.Variables) tytagFamily$Variables))
(assert (forall ((bx@@149 T@U) ) (!  (=> (and (= (type bx@@149) BoxType) ($IsBox bx@@149 Tclass.MapSpec.Variables)) (and (= ($Box ($Unbox DatatypeTypeType bx@@149)) bx@@149) ($Is ($Unbox DatatypeTypeType bx@@149) Tclass.MapSpec.Variables))) :qid |unknown.0:0| :skolemid |1796| :pattern ( ($IsBox bx@@149 Tclass.MapSpec.Variables)) )))
(assert (= (type Tclass.UI.RangeStart) TyType))
(assert (= (Tag Tclass.UI.RangeStart) Tagclass.UI.RangeStart))
(assert (= (TagFamily Tclass.UI.RangeStart) tytagFamily$RangeStart))
(assert (forall ((bx@@150 T@U) ) (!  (=> (and (= (type bx@@150) BoxType) ($IsBox bx@@150 Tclass.UI.RangeStart)) (and (= ($Box ($Unbox DatatypeTypeType bx@@150)) bx@@150) ($Is ($Unbox DatatypeTypeType bx@@150) Tclass.UI.RangeStart))) :qid |unknown.0:0| :skolemid |1814| :pattern ( ($IsBox bx@@150 Tclass.UI.RangeStart)) )))
(assert (= (type Tclass.UI.SuccResult) TyType))
(assert (= (Tag Tclass.UI.SuccResult) Tagclass.UI.SuccResult))
(assert (= (TagFamily Tclass.UI.SuccResult) tytagFamily$SuccResult))
(assert (forall ((bx@@151 T@U) ) (!  (=> (and (= (type bx@@151) BoxType) ($IsBox bx@@151 Tclass.UI.SuccResult)) (and (= ($Box ($Unbox DatatypeTypeType bx@@151)) bx@@151) ($Is ($Unbox DatatypeTypeType bx@@151) Tclass.UI.SuccResult))) :qid |unknown.0:0| :skolemid |1815| :pattern ( ($IsBox bx@@151 Tclass.UI.SuccResult)) )))
(assert (= (type Tclass.UI.RangeEnd) TyType))
(assert (= (Tag Tclass.UI.RangeEnd) Tagclass.UI.RangeEnd))
(assert (= (TagFamily Tclass.UI.RangeEnd) tytagFamily$RangeEnd))
(assert (forall ((bx@@152 T@U) ) (!  (=> (and (= (type bx@@152) BoxType) ($IsBox bx@@152 Tclass.UI.RangeEnd)) (and (= ($Box ($Unbox DatatypeTypeType bx@@152)) bx@@152) ($Is ($Unbox DatatypeTypeType bx@@152) Tclass.UI.RangeEnd))) :qid |unknown.0:0| :skolemid |1816| :pattern ( ($IsBox bx@@152 Tclass.UI.RangeEnd)) )))
(assert (= (type Tclass.NativeTypes.sbyte) TyType))
(assert (= (Tag Tclass.NativeTypes.sbyte) Tagclass.NativeTypes.sbyte))
(assert (= (TagFamily Tclass.NativeTypes.sbyte) tytagFamily$sbyte))
(assert (forall ((bx@@153 T@U) ) (!  (=> (and (= (type bx@@153) BoxType) ($IsBox bx@@153 Tclass.NativeTypes.sbyte)) (and (= ($Box ($Unbox intType bx@@153)) bx@@153) ($Is ($Unbox intType bx@@153) Tclass.NativeTypes.sbyte))) :qid |unknown.0:0| :skolemid |1924| :pattern ( ($IsBox bx@@153 Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0| T@U) ) (!  (=> (= (type |i#0|) intType) (= ($Is |i#0| Tclass.NativeTypes.sbyte)  (and (<= (LitInt (- 0 128)) (U_2_int |i#0|)) (< (U_2_int |i#0|) 128)))) :qid |unknown.0:0| :skolemid |1925| :pattern ( ($Is |i#0| Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@0| T@U) ($h@@52 T@U) ) (!  (=> (and (= (type |i#0@@0|) intType) (= (type $h@@52) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@0| Tclass.NativeTypes.sbyte $h@@52)) :qid |unknown.0:0| :skolemid |1926| :pattern ( ($IsAlloc |i#0@@0| Tclass.NativeTypes.sbyte $h@@52)) )))
(assert (forall ((|i#0@@1| T@U) ) (!  (=> (= (type |i#0@@1|) intType) (= ($Is |i#0@@1| Tclass.NativeTypes.byte)  (and (<= (LitInt 0) (U_2_int |i#0@@1|)) (< (U_2_int |i#0@@1|) 256)))) :qid |unknown.0:0| :skolemid |1927| :pattern ( ($Is |i#0@@1| Tclass.NativeTypes.byte)) )))
(assert (forall ((|i#0@@2| T@U) ($h@@53 T@U) ) (!  (=> (and (= (type |i#0@@2|) intType) (= (type $h@@53) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@2| Tclass.NativeTypes.byte $h@@53)) :qid |unknown.0:0| :skolemid |1928| :pattern ( ($IsAlloc |i#0@@2| Tclass.NativeTypes.byte $h@@53)) )))
(assert (= (type Tclass.NativeTypes.int16) TyType))
(assert (= (Tag Tclass.NativeTypes.int16) Tagclass.NativeTypes.int16))
(assert (= (TagFamily Tclass.NativeTypes.int16) tytagFamily$int16))
(assert (forall ((bx@@154 T@U) ) (!  (=> (and (= (type bx@@154) BoxType) ($IsBox bx@@154 Tclass.NativeTypes.int16)) (and (= ($Box ($Unbox intType bx@@154)) bx@@154) ($Is ($Unbox intType bx@@154) Tclass.NativeTypes.int16))) :qid |unknown.0:0| :skolemid |1929| :pattern ( ($IsBox bx@@154 Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@3| T@U) ) (!  (=> (= (type |i#0@@3|) intType) (= ($Is |i#0@@3| Tclass.NativeTypes.int16)  (and (<= (LitInt (- 0 32768)) (U_2_int |i#0@@3|)) (< (U_2_int |i#0@@3|) 32768)))) :qid |unknown.0:0| :skolemid |1930| :pattern ( ($Is |i#0@@3| Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@4| T@U) ($h@@54 T@U) ) (!  (=> (and (= (type |i#0@@4|) intType) (= (type $h@@54) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@4| Tclass.NativeTypes.int16 $h@@54)) :qid |unknown.0:0| :skolemid |1931| :pattern ( ($IsAlloc |i#0@@4| Tclass.NativeTypes.int16 $h@@54)) )))
(assert (= (type Tclass.NativeTypes.uint16) TyType))
(assert (= (Tag Tclass.NativeTypes.uint16) Tagclass.NativeTypes.uint16))
(assert (= (TagFamily Tclass.NativeTypes.uint16) tytagFamily$uint16))
(assert (forall ((bx@@155 T@U) ) (!  (=> (and (= (type bx@@155) BoxType) ($IsBox bx@@155 Tclass.NativeTypes.uint16)) (and (= ($Box ($Unbox intType bx@@155)) bx@@155) ($Is ($Unbox intType bx@@155) Tclass.NativeTypes.uint16))) :qid |unknown.0:0| :skolemid |1932| :pattern ( ($IsBox bx@@155 Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@5| T@U) ) (!  (=> (= (type |i#0@@5|) intType) (= ($Is |i#0@@5| Tclass.NativeTypes.uint16)  (and (<= (LitInt 0) (U_2_int |i#0@@5|)) (< (U_2_int |i#0@@5|) 65536)))) :qid |unknown.0:0| :skolemid |1933| :pattern ( ($Is |i#0@@5| Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@6| T@U) ($h@@55 T@U) ) (!  (=> (and (= (type |i#0@@6|) intType) (= (type $h@@55) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@6| Tclass.NativeTypes.uint16 $h@@55)) :qid |unknown.0:0| :skolemid |1934| :pattern ( ($IsAlloc |i#0@@6| Tclass.NativeTypes.uint16 $h@@55)) )))
(assert (= (type Tclass.NativeTypes.int32) TyType))
(assert (= (Tag Tclass.NativeTypes.int32) Tagclass.NativeTypes.int32))
(assert (= (TagFamily Tclass.NativeTypes.int32) tytagFamily$int32))
(assert (forall ((bx@@156 T@U) ) (!  (=> (and (= (type bx@@156) BoxType) ($IsBox bx@@156 Tclass.NativeTypes.int32)) (and (= ($Box ($Unbox intType bx@@156)) bx@@156) ($Is ($Unbox intType bx@@156) Tclass.NativeTypes.int32))) :qid |unknown.0:0| :skolemid |1935| :pattern ( ($IsBox bx@@156 Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@7| T@U) ) (!  (=> (= (type |i#0@@7|) intType) (= ($Is |i#0@@7| Tclass.NativeTypes.int32)  (and (<= (LitInt (- 0 2147483648)) (U_2_int |i#0@@7|)) (< (U_2_int |i#0@@7|) 2147483648)))) :qid |unknown.0:0| :skolemid |1936| :pattern ( ($Is |i#0@@7| Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@8| T@U) ($h@@56 T@U) ) (!  (=> (and (= (type |i#0@@8|) intType) (= (type $h@@56) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@8| Tclass.NativeTypes.int32 $h@@56)) :qid |unknown.0:0| :skolemid |1937| :pattern ( ($IsAlloc |i#0@@8| Tclass.NativeTypes.int32 $h@@56)) )))
(assert (= (type Tclass.NativeTypes.uint32) TyType))
(assert (= (Tag Tclass.NativeTypes.uint32) Tagclass.NativeTypes.uint32))
(assert (= (TagFamily Tclass.NativeTypes.uint32) tytagFamily$uint32))
(assert (forall ((bx@@157 T@U) ) (!  (=> (and (= (type bx@@157) BoxType) ($IsBox bx@@157 Tclass.NativeTypes.uint32)) (and (= ($Box ($Unbox intType bx@@157)) bx@@157) ($Is ($Unbox intType bx@@157) Tclass.NativeTypes.uint32))) :qid |unknown.0:0| :skolemid |1938| :pattern ( ($IsBox bx@@157 Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@9| T@U) ) (!  (=> (= (type |i#0@@9|) intType) (= ($Is |i#0@@9| Tclass.NativeTypes.uint32)  (and (<= (LitInt 0) (U_2_int |i#0@@9|)) (< (U_2_int |i#0@@9|) 4294967296)))) :qid |unknown.0:0| :skolemid |1939| :pattern ( ($Is |i#0@@9| Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@10| T@U) ($h@@57 T@U) ) (!  (=> (and (= (type |i#0@@10|) intType) (= (type $h@@57) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@10| Tclass.NativeTypes.uint32 $h@@57)) :qid |unknown.0:0| :skolemid |1940| :pattern ( ($IsAlloc |i#0@@10| Tclass.NativeTypes.uint32 $h@@57)) )))
(assert (= (type Tclass.NativeTypes.int64) TyType))
(assert (= (Tag Tclass.NativeTypes.int64) Tagclass.NativeTypes.int64))
(assert (= (TagFamily Tclass.NativeTypes.int64) tytagFamily$int64))
(assert (forall ((bx@@158 T@U) ) (!  (=> (and (= (type bx@@158) BoxType) ($IsBox bx@@158 Tclass.NativeTypes.int64)) (and (= ($Box ($Unbox intType bx@@158)) bx@@158) ($Is ($Unbox intType bx@@158) Tclass.NativeTypes.int64))) :qid |unknown.0:0| :skolemid |1941| :pattern ( ($IsBox bx@@158 Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@11| T@U) ) (!  (=> (= (type |i#0@@11|) intType) (= ($Is |i#0@@11| Tclass.NativeTypes.int64)  (and (<= (LitInt (- 0 9223372036854775808)) (U_2_int |i#0@@11|)) (< (U_2_int |i#0@@11|) 9223372036854775808)))) :qid |unknown.0:0| :skolemid |1942| :pattern ( ($Is |i#0@@11| Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@12| T@U) ($h@@58 T@U) ) (!  (=> (and (= (type |i#0@@12|) intType) (= (type $h@@58) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@12| Tclass.NativeTypes.int64 $h@@58)) :qid |unknown.0:0| :skolemid |1943| :pattern ( ($IsAlloc |i#0@@12| Tclass.NativeTypes.int64 $h@@58)) )))
(assert (= (type Tclass.NativeTypes.uint64) TyType))
(assert (= (Tag Tclass.NativeTypes.uint64) Tagclass.NativeTypes.uint64))
(assert (= (TagFamily Tclass.NativeTypes.uint64) tytagFamily$uint64))
(assert (forall ((bx@@159 T@U) ) (!  (=> (and (= (type bx@@159) BoxType) ($IsBox bx@@159 Tclass.NativeTypes.uint64)) (and (= ($Box ($Unbox intType bx@@159)) bx@@159) ($Is ($Unbox intType bx@@159) Tclass.NativeTypes.uint64))) :qid |unknown.0:0| :skolemid |1944| :pattern ( ($IsBox bx@@159 Tclass.NativeTypes.uint64)) )))
(assert (forall ((|i#0@@13| T@U) ) (!  (=> (= (type |i#0@@13|) intType) (= ($Is |i#0@@13| Tclass.NativeTypes.uint64)  (and (<= (LitInt 0) (U_2_int |i#0@@13|)) (< (U_2_int |i#0@@13|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |1945| :pattern ( ($Is |i#0@@13| Tclass.NativeTypes.uint64)) )))
(assert (forall ((|i#0@@14| T@U) ($h@@59 T@U) ) (!  (=> (and (= (type |i#0@@14|) intType) (= (type $h@@59) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@14| Tclass.NativeTypes.uint64 $h@@59)) :qid |unknown.0:0| :skolemid |1946| :pattern ( ($IsAlloc |i#0@@14| Tclass.NativeTypes.uint64 $h@@59)) )))
(assert (= (type Tclass.NativeTypes.nat8) TyType))
(assert (= (Tag Tclass.NativeTypes.nat8) Tagclass.NativeTypes.nat8))
(assert (= (TagFamily Tclass.NativeTypes.nat8) tytagFamily$nat8))
(assert (forall ((bx@@160 T@U) ) (!  (=> (and (= (type bx@@160) BoxType) ($IsBox bx@@160 Tclass.NativeTypes.nat8)) (and (= ($Box ($Unbox intType bx@@160)) bx@@160) ($Is ($Unbox intType bx@@160) Tclass.NativeTypes.nat8))) :qid |unknown.0:0| :skolemid |1947| :pattern ( ($IsBox bx@@160 Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@15| T@U) ) (!  (=> (= (type |i#0@@15|) intType) (= ($Is |i#0@@15| Tclass.NativeTypes.nat8)  (and (<= (LitInt 0) (U_2_int |i#0@@15|)) (< (U_2_int |i#0@@15|) 128)))) :qid |unknown.0:0| :skolemid |1948| :pattern ( ($Is |i#0@@15| Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@16| T@U) ($h@@60 T@U) ) (!  (=> (and (= (type |i#0@@16|) intType) (= (type $h@@60) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@16| Tclass.NativeTypes.nat8 $h@@60)) :qid |unknown.0:0| :skolemid |1949| :pattern ( ($IsAlloc |i#0@@16| Tclass.NativeTypes.nat8 $h@@60)) )))
(assert (= (type Tclass.NativeTypes.nat16) TyType))
(assert (= (Tag Tclass.NativeTypes.nat16) Tagclass.NativeTypes.nat16))
(assert (= (TagFamily Tclass.NativeTypes.nat16) tytagFamily$nat16))
(assert (forall ((bx@@161 T@U) ) (!  (=> (and (= (type bx@@161) BoxType) ($IsBox bx@@161 Tclass.NativeTypes.nat16)) (and (= ($Box ($Unbox intType bx@@161)) bx@@161) ($Is ($Unbox intType bx@@161) Tclass.NativeTypes.nat16))) :qid |unknown.0:0| :skolemid |1950| :pattern ( ($IsBox bx@@161 Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@17| T@U) ) (!  (=> (= (type |i#0@@17|) intType) (= ($Is |i#0@@17| Tclass.NativeTypes.nat16)  (and (<= (LitInt 0) (U_2_int |i#0@@17|)) (< (U_2_int |i#0@@17|) 32768)))) :qid |unknown.0:0| :skolemid |1951| :pattern ( ($Is |i#0@@17| Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@18| T@U) ($h@@61 T@U) ) (!  (=> (and (= (type |i#0@@18|) intType) (= (type $h@@61) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@18| Tclass.NativeTypes.nat16 $h@@61)) :qid |unknown.0:0| :skolemid |1952| :pattern ( ($IsAlloc |i#0@@18| Tclass.NativeTypes.nat16 $h@@61)) )))
(assert (= (type Tclass.NativeTypes.nat32) TyType))
(assert (= (Tag Tclass.NativeTypes.nat32) Tagclass.NativeTypes.nat32))
(assert (= (TagFamily Tclass.NativeTypes.nat32) tytagFamily$nat32))
(assert (forall ((bx@@162 T@U) ) (!  (=> (and (= (type bx@@162) BoxType) ($IsBox bx@@162 Tclass.NativeTypes.nat32)) (and (= ($Box ($Unbox intType bx@@162)) bx@@162) ($Is ($Unbox intType bx@@162) Tclass.NativeTypes.nat32))) :qid |unknown.0:0| :skolemid |1953| :pattern ( ($IsBox bx@@162 Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@19| T@U) ) (!  (=> (= (type |i#0@@19|) intType) (= ($Is |i#0@@19| Tclass.NativeTypes.nat32)  (and (<= (LitInt 0) (U_2_int |i#0@@19|)) (< (U_2_int |i#0@@19|) 2147483648)))) :qid |unknown.0:0| :skolemid |1954| :pattern ( ($Is |i#0@@19| Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@20| T@U) ($h@@62 T@U) ) (!  (=> (and (= (type |i#0@@20|) intType) (= (type $h@@62) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@20| Tclass.NativeTypes.nat32 $h@@62)) :qid |unknown.0:0| :skolemid |1955| :pattern ( ($IsAlloc |i#0@@20| Tclass.NativeTypes.nat32 $h@@62)) )))
(assert (= (type Tclass.NativeTypes.nat64) TyType))
(assert (= (Tag Tclass.NativeTypes.nat64) Tagclass.NativeTypes.nat64))
(assert (= (TagFamily Tclass.NativeTypes.nat64) tytagFamily$nat64))
(assert (forall ((bx@@163 T@U) ) (!  (=> (and (= (type bx@@163) BoxType) ($IsBox bx@@163 Tclass.NativeTypes.nat64)) (and (= ($Box ($Unbox intType bx@@163)) bx@@163) ($Is ($Unbox intType bx@@163) Tclass.NativeTypes.nat64))) :qid |unknown.0:0| :skolemid |1956| :pattern ( ($IsBox bx@@163 Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@21| T@U) ) (!  (=> (= (type |i#0@@21|) intType) (= ($Is |i#0@@21| Tclass.NativeTypes.nat64)  (and (<= (LitInt 0) (U_2_int |i#0@@21|)) (< (U_2_int |i#0@@21|) 9223372036854775808)))) :qid |unknown.0:0| :skolemid |1957| :pattern ( ($Is |i#0@@21| Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@22| T@U) ($h@@63 T@U) ) (!  (=> (and (= (type |i#0@@22|) intType) (= (type $h@@63) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@22| Tclass.NativeTypes.nat64 $h@@63)) :qid |unknown.0:0| :skolemid |1958| :pattern ( ($IsAlloc |i#0@@22| Tclass.NativeTypes.nat64 $h@@63)) )))
(assert (= (type Tclass.NativeTypes.uint128) TyType))
(assert (= (Tag Tclass.NativeTypes.uint128) Tagclass.NativeTypes.uint128))
(assert (= (TagFamily Tclass.NativeTypes.uint128) tytagFamily$uint128))
(assert (forall ((bx@@164 T@U) ) (!  (=> (and (= (type bx@@164) BoxType) ($IsBox bx@@164 Tclass.NativeTypes.uint128)) (and (= ($Box ($Unbox intType bx@@164)) bx@@164) ($Is ($Unbox intType bx@@164) Tclass.NativeTypes.uint128))) :qid |unknown.0:0| :skolemid |1959| :pattern ( ($IsBox bx@@164 Tclass.NativeTypes.uint128)) )))
(assert (forall ((|i#0@@23| T@U) ) (!  (=> (= (type |i#0@@23|) intType) (= ($Is |i#0@@23| Tclass.NativeTypes.uint128)  (and (<= (LitInt 0) (U_2_int |i#0@@23|)) (< (U_2_int |i#0@@23|) 340282366920938463463374607431768211456)))) :qid |unknown.0:0| :skolemid |1960| :pattern ( ($Is |i#0@@23| Tclass.NativeTypes.uint128)) )))
(assert (forall ((|i#0@@24| T@U) ($h@@64 T@U) ) (!  (=> (and (= (type |i#0@@24|) intType) (= (type $h@@64) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@24| Tclass.NativeTypes.uint128 $h@@64)) :qid |unknown.0:0| :skolemid |1961| :pattern ( ($IsAlloc |i#0@@24| Tclass.NativeTypes.uint128 $h@@64)) )))
(assert (= (type Tclass.NativeTypes.__default) TyType))
(assert (= (Tag Tclass.NativeTypes.__default) Tagclass.NativeTypes.__default))
(assert (= (TagFamily Tclass.NativeTypes.__default) tytagFamily$_default))
(assert (forall ((bx@@165 T@U) ) (!  (=> (and (= (type bx@@165) BoxType) ($IsBox bx@@165 Tclass.NativeTypes.__default)) (and (= ($Box ($Unbox refType bx@@165)) bx@@165) ($Is ($Unbox refType bx@@165) Tclass.NativeTypes.__default))) :qid |unknown.0:0| :skolemid |1962| :pattern ( ($IsBox bx@@165 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@11 T@U) ) (!  (=> (= (type $o@@11) refType) (= ($Is $o@@11 Tclass.NativeTypes.__default)  (or (= $o@@11 null) (= (dtype $o@@11) Tclass.NativeTypes.__default)))) :qid |unknown.0:0| :skolemid |1963| :pattern ( ($Is $o@@11 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@12 T@U) ($h@@65 T@U) ) (!  (=> (and (= (type $o@@12) refType) (= (type $h@@65) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@12 Tclass.NativeTypes.__default $h@@65)  (or (= $o@@12 null) (U_2_bool (MapType1Select (MapType0Select $h@@65 $o@@12) alloc))))) :qid |unknown.0:0| :skolemid |1964| :pattern ( ($IsAlloc $o@@12 Tclass.NativeTypes.__default $h@@65)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint64Size) (< NativeTypes.__default.Uint64Size 18446744073709551616)))))
(assert (= |NativeTypes.__default.Uint64Size#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint32Size) (< NativeTypes.__default.Uint32Size 18446744073709551616)))))
(assert (= |NativeTypes.__default.Uint32Size#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint16Size) (< NativeTypes.__default.Uint16Size 18446744073709551616)))))
(assert (= |NativeTypes.__default.Uint16Size#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true true)))
(assert (= |NativeTypes.__default.Uint64UpperBound#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true true)))
(assert (= |NativeTypes.__default.Uint32UpperBound#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert (forall ((|s#0@@7| T@U) ) (!  (=> (= (type |s#0@@7|) (SeqType BoxType)) (= ($Is |s#0@@7| Tclass.ValueType.Value)  (and ($Is |s#0@@7| (TSeq Tclass.NativeTypes.byte)) (<= (|Seq#Length| |s#0@@7|) (LitInt 1024))))) :qid |unknown.0:0| :skolemid |1965| :pattern ( ($Is |s#0@@7| Tclass.ValueType.Value)) )))
(assert (forall ((|s#0@@8| T@U) ($h@@66 T@U) ) (!  (=> (and (= (type |s#0@@8|) (SeqType BoxType)) (= (type $h@@66) (MapType0Type refType MapType1Type))) (= ($IsAlloc |s#0@@8| Tclass.ValueType.Value $h@@66) ($IsAlloc |s#0@@8| (TSeq Tclass.NativeTypes.byte) $h@@66))) :qid |unknown.0:0| :skolemid |1966| :pattern ( ($IsAlloc |s#0@@8| Tclass.ValueType.Value $h@@66)) )))
(assert (= (type Tclass.ValueType.__default) TyType))
(assert (= (Tag Tclass.ValueType.__default) Tagclass.ValueType.__default))
(assert (= (TagFamily Tclass.ValueType.__default) tytagFamily$_default))
(assert (forall (($o@@13 T@U) ) (!  (=> (= (type $o@@13) refType) (= ($Is $o@@13 Tclass.ValueType.__default)  (or (= $o@@13 null) (= (dtype $o@@13) Tclass.ValueType.__default)))) :qid |unknown.0:0| :skolemid |1967| :pattern ( ($Is $o@@13 Tclass.ValueType.__default)) )))
(assert (forall (($o@@14 T@U) ($h@@67 T@U) ) (!  (=> (and (= (type $o@@14) refType) (= (type $h@@67) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@14 Tclass.ValueType.__default $h@@67)  (or (= $o@@14 null) (U_2_bool (MapType1Select (MapType0Select $h@@67 $o@@14) alloc))))) :qid |unknown.0:0| :skolemid |1968| :pattern ( ($IsAlloc $o@@14 Tclass.ValueType.__default $h@@67)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) ValueType.__default.MaxLen) (< ValueType.__default.MaxLen 18446744073709551616)))))
(assert (= |ValueType.__default.MaxLen#requires| true))
(assert  (=> true (=> true (= ValueType.__default.MaxLen (LitInt 1024)))))
(assert  (=> true (=> true (= ValueType.__default.MaxLen (LitInt 1024)))))
(assert (= (type ValueType.__default.DefaultValue) (SeqType BoxType)))
(assert  (=> true (=> true ($Is ValueType.__default.DefaultValue Tclass.ValueType.Value))))
(assert (= |ValueType.__default.DefaultValue#requires| true))
(assert  (=> true (=> true (= ValueType.__default.DefaultValue (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (=> true (= ValueType.__default.DefaultValue (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (forall ((|v#0| T@U) ) (!  (=> (and (= (type |v#0|) (SeqType BoxType)) (or (|ValueType.__default.Len#canCall| |v#0|) ($Is |v#0| Tclass.ValueType.Value))) (<= (LitInt 0) (ValueType.__default.Len |v#0|))) :qid |KeyTypesdfy.20:15| :skolemid |1969| :pattern ( (ValueType.__default.Len |v#0|)) ))))
(assert (forall ((|v#0@@0| T@U) ) (!  (=> (and (= (type |v#0@@0|) (SeqType BoxType)) ($Is |v#0@@0| Tclass.ValueType.Value)) (= (|ValueType.__default.Len#requires| |v#0@@0|) true)) :qid |KeyTypesdfy.20:15| :skolemid |1970| :pattern ( (|ValueType.__default.Len#requires| |v#0@@0|)) )))
(assert  (=> true (forall ((|v#0@@1| T@U) ) (!  (=> (and (= (type |v#0@@1|) (SeqType BoxType)) (or (|ValueType.__default.Len#canCall| |v#0@@1|) ($Is |v#0@@1| Tclass.ValueType.Value))) (= (ValueType.__default.Len |v#0@@1|) (|Seq#Length| |v#0@@1|))) :qid |KeyTypesdfy.20:15| :skolemid |1971| :pattern ( (ValueType.__default.Len |v#0@@1|)) ))))
(assert  (=> true (forall ((|v#0@@2| T@U) ) (!  (=> (and (= (type |v#0@@2|) (SeqType BoxType)) (or (|ValueType.__default.Len#canCall| (Lit |v#0@@2|)) ($Is |v#0@@2| Tclass.ValueType.Value))) (= (ValueType.__default.Len (Lit |v#0@@2|)) (|Seq#Length| (Lit |v#0@@2|)))) :qid |KeyTypesdfy.20:15| :weight 3 :skolemid |1972| :pattern ( (ValueType.__default.Len (Lit |v#0@@2|))) ))))
(assert  (=> true (forall ((|s#0@@9| T@U) ) (!  (=> (and (= (type |s#0@@9|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestring#canCall| |s#0@@9|) ($Is |s#0@@9| (TSeq Tclass.NativeTypes.byte)))) true) :qid |KeyTypesdfy.22:36| :skolemid |1973| :pattern ( (ValueType.__default.ValidMessageBytestring |s#0@@9|)) ))))
(assert (forall ((|s#0@@10| T@U) ) (!  (=> (and (= (type |s#0@@10|) (SeqType BoxType)) ($Is |s#0@@10| (TSeq Tclass.NativeTypes.byte))) (= (|ValueType.__default.ValidMessageBytestring#requires| |s#0@@10|) true)) :qid |KeyTypesdfy.22:36| :skolemid |1974| :pattern ( (|ValueType.__default.ValidMessageBytestring#requires| |s#0@@10|)) )))
(assert  (=> true (forall ((|s#0@@11| T@U) ) (!  (=> (and (= (type |s#0@@11|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestring#canCall| |s#0@@11|) ($Is |s#0@@11| (TSeq Tclass.NativeTypes.byte)))) (and |ValueType.__default.MaxLen#canCall| (= (ValueType.__default.ValidMessageBytestring |s#0@@11|) (<= (|Seq#Length| |s#0@@11|) (LitInt ValueType.__default.MaxLen))))) :qid |KeyTypesdfy.22:36| :skolemid |1975| :pattern ( (ValueType.__default.ValidMessageBytestring |s#0@@11|)) ))))
(assert  (=> true (forall ((|s#0@@12| T@U) ) (!  (=> (and (= (type |s#0@@12|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestring#canCall| (Lit |s#0@@12|)) ($Is |s#0@@12| (TSeq Tclass.NativeTypes.byte)))) (and |ValueType.__default.MaxLen#canCall| (= (ValueType.__default.ValidMessageBytestring (Lit |s#0@@12|)) (<= (|Seq#Length| (Lit |s#0@@12|)) (LitInt ValueType.__default.MaxLen))))) :qid |KeyTypesdfy.22:36| :weight 3 :skolemid |1976| :pattern ( (ValueType.__default.ValidMessageBytestring (Lit |s#0@@12|))) ))))
(assert  (=> true (forall ((|strs#0| T@U) ) (!  (=> (and (= (type |strs#0|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestrings#canCall| |strs#0|) ($Is |strs#0| (TSeq (TSeq Tclass.NativeTypes.byte))))) true) :qid |KeyTypesdfy.27:37| :skolemid |1977| :pattern ( (ValueType.__default.ValidMessageBytestrings |strs#0|)) ))))
(assert (forall ((|strs#0@@0| T@U) ) (!  (=> (and (= (type |strs#0@@0|) (SeqType BoxType)) ($Is |strs#0@@0| (TSeq (TSeq Tclass.NativeTypes.byte)))) (= (|ValueType.__default.ValidMessageBytestrings#requires| |strs#0@@0|) true)) :qid |KeyTypesdfy.27:37| :skolemid |1978| :pattern ( (|ValueType.__default.ValidMessageBytestrings#requires| |strs#0@@0|)) )))
(assert  (=> true (forall ((|strs#0@@1| T@U) ) (!  (=> (and (= (type |strs#0@@1|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestrings#canCall| |strs#0@@1|) ($Is |strs#0@@1| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#0@@25| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@25|) (< |i#0@@25| (|Seq#Length| |strs#0@@1|))) (|ValueType.__default.ValidMessageBytestring#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@25|)))) :qid |KeyTypesdfy.29:12| :skolemid |1980| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@25|))) )) (= (ValueType.__default.ValidMessageBytestrings |strs#0@@1|) (forall ((|i#0@@26| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@26|) (< |i#0@@26| (|Seq#Length| |strs#0@@1|))) (ValueType.__default.ValidMessageBytestring ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@26|)))) :qid |KeyTypesdfy.29:12| :skolemid |1979| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@26|))) ))))) :qid |KeyTypesdfy.27:37| :skolemid |1981| :pattern ( (ValueType.__default.ValidMessageBytestrings |strs#0@@1|)) ))))
(assert  (=> true (forall ((|strs#0@@2| T@U) ) (!  (=> (and (= (type |strs#0@@2|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestrings#canCall| (Lit |strs#0@@2|)) ($Is |strs#0@@2| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#1| Int) ) (!  (=> (and (<= (LitInt 0) |i#1|) (< |i#1| (|Seq#Length| (Lit |strs#0@@2|)))) (|ValueType.__default.ValidMessageBytestring#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |strs#0@@2|) |i#1|)))) :qid |KeyTypesdfy.29:12| :skolemid |1983| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@2| |i#1|))) )) (= (ValueType.__default.ValidMessageBytestrings (Lit |strs#0@@2|)) (forall ((|i#1@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@0|) (< |i#1@@0| (|Seq#Length| (Lit |strs#0@@2|)))) (ValueType.__default.ValidMessageBytestring ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |strs#0@@2|) |i#1@@0|)))) :qid |KeyTypesdfy.29:12| :skolemid |1982| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@2| |i#1@@0|))) ))))) :qid |KeyTypesdfy.27:37| :weight 3 :skolemid |1984| :pattern ( (ValueType.__default.ValidMessageBytestrings (Lit |strs#0@@2|))) ))))
(assert (forall ((|s#0@@13| T@U) ) (!  (=> (= (type |s#0@@13|) (SeqType BoxType)) (= ($Is |s#0@@13| Tclass.KeyType.Key)  (and ($Is |s#0@@13| (TSeq Tclass.NativeTypes.byte)) (<= (|Seq#Length| |s#0@@13|) (LitInt 1024))))) :qid |unknown.0:0| :skolemid |1985| :pattern ( ($Is |s#0@@13| Tclass.KeyType.Key)) )))
(assert (forall ((|s#0@@14| T@U) ($h@@68 T@U) ) (!  (=> (and (= (type |s#0@@14|) (SeqType BoxType)) (= (type $h@@68) (MapType0Type refType MapType1Type))) (= ($IsAlloc |s#0@@14| Tclass.KeyType.Key $h@@68) ($IsAlloc |s#0@@14| (TSeq Tclass.NativeTypes.byte) $h@@68))) :qid |unknown.0:0| :skolemid |1986| :pattern ( ($IsAlloc |s#0@@14| Tclass.KeyType.Key $h@@68)) )))
(assert (= (type Tclass.KeyType.__default) TyType))
(assert (= (Tag Tclass.KeyType.__default) Tagclass.KeyType.__default))
(assert (= (TagFamily Tclass.KeyType.__default) tytagFamily$_default))
(assert (forall ((bx@@166 T@U) ) (!  (=> (and (= (type bx@@166) BoxType) ($IsBox bx@@166 Tclass.KeyType.__default)) (and (= ($Box ($Unbox refType bx@@166)) bx@@166) ($Is ($Unbox refType bx@@166) Tclass.KeyType.__default))) :qid |unknown.0:0| :skolemid |1987| :pattern ( ($IsBox bx@@166 Tclass.KeyType.__default)) )))
(assert (forall (($o@@15 T@U) ) (!  (=> (= (type $o@@15) refType) (= ($Is $o@@15 Tclass.KeyType.__default)  (or (= $o@@15 null) (= (dtype $o@@15) Tclass.KeyType.__default)))) :qid |unknown.0:0| :skolemid |1988| :pattern ( ($Is $o@@15 Tclass.KeyType.__default)) )))
(assert (forall (($o@@16 T@U) ($h@@69 T@U) ) (!  (=> (and (= (type $o@@16) refType) (= (type $h@@69) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@16 Tclass.KeyType.__default $h@@69)  (or (= $o@@16 null) (U_2_bool (MapType1Select (MapType0Select $h@@69 $o@@16) alloc))))) :qid |unknown.0:0| :skolemid |1989| :pattern ( ($IsAlloc $o@@16 Tclass.KeyType.__default $h@@69)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) KeyType.__default.MaxLen) (< KeyType.__default.MaxLen 18446744073709551616)))))
(assert (= |KeyType.__default.MaxLen#requires| true))
(assert  (=> true (=> true (= KeyType.__default.MaxLen (LitInt 1024)))))
(assert  (=> true (=> true (= KeyType.__default.MaxLen (LitInt 1024)))))
(assert (forall ((arg0@@439 T@U) ) (! (= (type (|#UI.RangeStart.SInclusive| arg0@@439)) DatatypeTypeType) :qid |funType:#UI.RangeStart.SInclusive| :pattern ( (|#UI.RangeStart.SInclusive| arg0@@439)) )))
(assert (forall ((|a#0#0#0@@0| T@U) ) (!  (=> (= (type |a#0#0#0@@0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeStart.SInclusive| |a#0#0#0@@0|)) |##UI.RangeStart.SInclusive|)) :qid |UIsdfy.20:36| :skolemid |1990| :pattern ( (|#UI.RangeStart.SInclusive| |a#0#0#0@@0|)) )))
(assert (forall ((d@@16 T@U) ) (!  (=> (= (type d@@16) DatatypeTypeType) (= (UI.RangeStart.SInclusive_q d@@16) (= (DatatypeCtorId d@@16) |##UI.RangeStart.SInclusive|))) :qid |unknown.0:0| :skolemid |1991| :pattern ( (UI.RangeStart.SInclusive_q d@@16)) )))
(assert (forall ((d@@17 T@U) ) (!  (=> (and (= (type d@@17) DatatypeTypeType) (UI.RangeStart.SInclusive_q d@@17)) (exists ((|a#1#0#0@@0| T@U) ) (!  (and (= (type |a#1#0#0@@0|) (SeqType BoxType)) (= d@@17 (|#UI.RangeStart.SInclusive| |a#1#0#0@@0|))) :qid |UIsdfy.20:36| :skolemid |1992| :no-pattern (type |a#1#0#0@@0|) :no-pattern (U_2_int |a#1#0#0@@0|) :no-pattern (U_2_bool |a#1#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |1993| :pattern ( (UI.RangeStart.SInclusive_q d@@17)) )))
(assert (forall ((|a#2#0#0@@0| T@U) ) (!  (=> (= (type |a#2#0#0@@0|) (SeqType BoxType)) (= ($Is (|#UI.RangeStart.SInclusive| |a#2#0#0@@0|) Tclass.UI.RangeStart) ($Is |a#2#0#0@@0| Tclass.KeyType.Key))) :qid |UIsdfy.20:36| :skolemid |1994| :pattern ( ($Is (|#UI.RangeStart.SInclusive| |a#2#0#0@@0|) Tclass.UI.RangeStart)) )))
(assert (forall ((|a#3#0#0@@0| T@U) ($h@@70 T@U) ) (!  (=> (and (and (= (type |a#3#0#0@@0|) (SeqType BoxType)) (= (type $h@@70) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@70)) (= ($IsAlloc (|#UI.RangeStart.SInclusive| |a#3#0#0@@0|) Tclass.UI.RangeStart $h@@70) ($IsAlloc |a#3#0#0@@0| Tclass.KeyType.Key $h@@70))) :qid |UIsdfy.20:36| :skolemid |1995| :pattern ( ($IsAlloc (|#UI.RangeStart.SInclusive| |a#3#0#0@@0|) Tclass.UI.RangeStart $h@@70)) )))
(assert (forall ((arg0@@440 T@U) ) (! (= (type (UI.RangeStart.key arg0@@440)) (SeqType BoxType)) :qid |funType:UI.RangeStart.key| :pattern ( (UI.RangeStart.key arg0@@440)) )))
(assert (forall ((d@@18 T@U) ($h@@71 T@U) ) (!  (=> (and (and (= (type d@@18) DatatypeTypeType) (= (type $h@@71) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@71) (and (UI.RangeStart.SInclusive_q d@@18) ($IsAlloc d@@18 Tclass.UI.RangeStart $h@@71)))) ($IsAlloc (UI.RangeStart.key d@@18) Tclass.KeyType.Key $h@@71)) :qid |unknown.0:0| :skolemid |1996| :pattern ( ($IsAlloc (UI.RangeStart.key d@@18) Tclass.KeyType.Key $h@@71)) )))
(assert (forall ((|a#4#0#0@@0| T@U) ) (!  (=> (= (type |a#4#0#0@@0|) (SeqType BoxType)) (= (|#UI.RangeStart.SInclusive| (Lit |a#4#0#0@@0|)) (Lit (|#UI.RangeStart.SInclusive| |a#4#0#0@@0|)))) :qid |UIsdfy.20:36| :skolemid |1997| :pattern ( (|#UI.RangeStart.SInclusive| (Lit |a#4#0#0@@0|))) )))
(assert (forall ((|a#5#0#0@@0| T@U) ) (!  (=> (= (type |a#5#0#0@@0|) (SeqType BoxType)) (= (UI.RangeStart.key (|#UI.RangeStart.SInclusive| |a#5#0#0@@0|)) |a#5#0#0@@0|)) :qid |UIsdfy.20:36| :skolemid |1998| :pattern ( (|#UI.RangeStart.SInclusive| |a#5#0#0@@0|)) )))
(assert (forall ((arg0@@441 T@U) ) (! (= (type (|#UI.RangeStart.SExclusive| arg0@@441)) DatatypeTypeType) :qid |funType:#UI.RangeStart.SExclusive| :pattern ( (|#UI.RangeStart.SExclusive| arg0@@441)) )))
(assert (forall ((|a#6#0#0@@0| T@U) ) (!  (=> (= (type |a#6#0#0@@0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeStart.SExclusive| |a#6#0#0@@0|)) |##UI.RangeStart.SExclusive|)) :qid |UIsdfy.20:59| :skolemid |1999| :pattern ( (|#UI.RangeStart.SExclusive| |a#6#0#0@@0|)) )))
(assert (forall ((d@@19 T@U) ) (!  (=> (= (type d@@19) DatatypeTypeType) (= (UI.RangeStart.SExclusive_q d@@19) (= (DatatypeCtorId d@@19) |##UI.RangeStart.SExclusive|))) :qid |unknown.0:0| :skolemid |2000| :pattern ( (UI.RangeStart.SExclusive_q d@@19)) )))
(assert (forall ((d@@20 T@U) ) (!  (=> (and (= (type d@@20) DatatypeTypeType) (UI.RangeStart.SExclusive_q d@@20)) (exists ((|a#7#0#0@@0| T@U) ) (!  (and (= (type |a#7#0#0@@0|) (SeqType BoxType)) (= d@@20 (|#UI.RangeStart.SExclusive| |a#7#0#0@@0|))) :qid |UIsdfy.20:59| :skolemid |2001| :no-pattern (type |a#7#0#0@@0|) :no-pattern (U_2_int |a#7#0#0@@0|) :no-pattern (U_2_bool |a#7#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |2002| :pattern ( (UI.RangeStart.SExclusive_q d@@20)) )))
(assert (forall ((|a#8#0#0@@0| T@U) ) (!  (=> (= (type |a#8#0#0@@0|) (SeqType BoxType)) (= ($Is (|#UI.RangeStart.SExclusive| |a#8#0#0@@0|) Tclass.UI.RangeStart) ($Is |a#8#0#0@@0| Tclass.KeyType.Key))) :qid |UIsdfy.20:59| :skolemid |2003| :pattern ( ($Is (|#UI.RangeStart.SExclusive| |a#8#0#0@@0|) Tclass.UI.RangeStart)) )))
(assert (forall ((|a#9#0#0| T@U) ($h@@72 T@U) ) (!  (=> (and (and (= (type |a#9#0#0|) (SeqType BoxType)) (= (type $h@@72) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@72)) (= ($IsAlloc (|#UI.RangeStart.SExclusive| |a#9#0#0|) Tclass.UI.RangeStart $h@@72) ($IsAlloc |a#9#0#0| Tclass.KeyType.Key $h@@72))) :qid |UIsdfy.20:59| :skolemid |2004| :pattern ( ($IsAlloc (|#UI.RangeStart.SExclusive| |a#9#0#0|) Tclass.UI.RangeStart $h@@72)) )))
(assert (forall ((d@@21 T@U) ($h@@73 T@U) ) (!  (=> (and (and (= (type d@@21) DatatypeTypeType) (= (type $h@@73) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@73) (and (UI.RangeStart.SExclusive_q d@@21) ($IsAlloc d@@21 Tclass.UI.RangeStart $h@@73)))) ($IsAlloc (UI.RangeStart.key d@@21) Tclass.KeyType.Key $h@@73)) :qid |unknown.0:0| :skolemid |2005| :pattern ( ($IsAlloc (UI.RangeStart.key d@@21) Tclass.KeyType.Key $h@@73)) )))
(assert (forall ((|a#10#0#0| T@U) ) (!  (=> (= (type |a#10#0#0|) (SeqType BoxType)) (= (|#UI.RangeStart.SExclusive| (Lit |a#10#0#0|)) (Lit (|#UI.RangeStart.SExclusive| |a#10#0#0|)))) :qid |UIsdfy.20:59| :skolemid |2006| :pattern ( (|#UI.RangeStart.SExclusive| (Lit |a#10#0#0|))) )))
(assert (forall ((|a#11#0#0| T@U) ) (!  (=> (= (type |a#11#0#0|) (SeqType BoxType)) (= (UI.RangeStart.key (|#UI.RangeStart.SExclusive| |a#11#0#0|)) |a#11#0#0|)) :qid |UIsdfy.20:59| :skolemid |2007| :pattern ( (|#UI.RangeStart.SExclusive| |a#11#0#0|)) )))
(assert (= (type |#UI.RangeStart.NegativeInf|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.RangeStart.NegativeInf|) |##UI.RangeStart.NegativeInf|))
(assert (forall ((d@@22 T@U) ) (!  (=> (= (type d@@22) DatatypeTypeType) (= (UI.RangeStart.NegativeInf_q d@@22) (= (DatatypeCtorId d@@22) |##UI.RangeStart.NegativeInf|))) :qid |unknown.0:0| :skolemid |2008| :pattern ( (UI.RangeStart.NegativeInf_q d@@22)) )))
(assert (forall ((d@@23 T@U) ) (!  (=> (and (= (type d@@23) DatatypeTypeType) (UI.RangeStart.NegativeInf_q d@@23)) (= d@@23 |#UI.RangeStart.NegativeInf|)) :qid |unknown.0:0| :skolemid |2009| :pattern ( (UI.RangeStart.NegativeInf_q d@@23)) )))
(assert ($Is |#UI.RangeStart.NegativeInf| Tclass.UI.RangeStart))
(assert (forall (($h@@74 T@U) ) (!  (=> (and (= (type $h@@74) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@74)) ($IsAlloc |#UI.RangeStart.NegativeInf| Tclass.UI.RangeStart $h@@74)) :qid |DafnyPreludebpl.545:12| :skolemid |2010| :pattern ( ($IsAlloc |#UI.RangeStart.NegativeInf| Tclass.UI.RangeStart $h@@74)) )))
(assert (= |#UI.RangeStart.NegativeInf| (Lit |#UI.RangeStart.NegativeInf|)))
(assert (forall ((d@@24 T@U) ) (!  (=> (and (= (type d@@24) DatatypeTypeType) (|$IsA#UI.RangeStart| d@@24)) (or (or (UI.RangeStart.SInclusive_q d@@24) (UI.RangeStart.SExclusive_q d@@24)) (UI.RangeStart.NegativeInf_q d@@24))) :qid |unknown.0:0| :skolemid |2011| :pattern ( (|$IsA#UI.RangeStart| d@@24)) )))
(assert (forall ((d@@25 T@U) ) (!  (=> (and (= (type d@@25) DatatypeTypeType) ($Is d@@25 Tclass.UI.RangeStart)) (or (or (UI.RangeStart.SInclusive_q d@@25) (UI.RangeStart.SExclusive_q d@@25)) (UI.RangeStart.NegativeInf_q d@@25))) :qid |unknown.0:0| :skolemid |2012| :pattern ( (UI.RangeStart.NegativeInf_q d@@25) ($Is d@@25 Tclass.UI.RangeStart)) :pattern ( (UI.RangeStart.SExclusive_q d@@25) ($Is d@@25 Tclass.UI.RangeStart)) :pattern ( (UI.RangeStart.SInclusive_q d@@25) ($Is d@@25 Tclass.UI.RangeStart)) )))
(assert (forall ((a@@130 T@U) (b@@67 T@U) ) (!  (=> (and (and (= (type a@@130) DatatypeTypeType) (= (type b@@67) DatatypeTypeType)) (and (UI.RangeStart.SInclusive_q a@@130) (UI.RangeStart.SInclusive_q b@@67))) (= (|UI.RangeStart#Equal| a@@130 b@@67) (|Seq#Equal| (UI.RangeStart.key a@@130) (UI.RangeStart.key b@@67)))) :qid |unknown.0:0| :skolemid |2013| :pattern ( (|UI.RangeStart#Equal| a@@130 b@@67) (UI.RangeStart.SInclusive_q a@@130)) :pattern ( (|UI.RangeStart#Equal| a@@130 b@@67) (UI.RangeStart.SInclusive_q b@@67)) )))
(assert (forall ((a@@131 T@U) (b@@68 T@U) ) (!  (=> (and (and (= (type a@@131) DatatypeTypeType) (= (type b@@68) DatatypeTypeType)) (and (UI.RangeStart.SExclusive_q a@@131) (UI.RangeStart.SExclusive_q b@@68))) (= (|UI.RangeStart#Equal| a@@131 b@@68) (|Seq#Equal| (UI.RangeStart.key a@@131) (UI.RangeStart.key b@@68)))) :qid |unknown.0:0| :skolemid |2014| :pattern ( (|UI.RangeStart#Equal| a@@131 b@@68) (UI.RangeStart.SExclusive_q a@@131)) :pattern ( (|UI.RangeStart#Equal| a@@131 b@@68) (UI.RangeStart.SExclusive_q b@@68)) )))
(assert (forall ((a@@132 T@U) (b@@69 T@U) ) (!  (=> (and (and (= (type a@@132) DatatypeTypeType) (= (type b@@69) DatatypeTypeType)) (and (UI.RangeStart.NegativeInf_q a@@132) (UI.RangeStart.NegativeInf_q b@@69))) (= (|UI.RangeStart#Equal| a@@132 b@@69) true)) :qid |unknown.0:0| :skolemid |2015| :pattern ( (|UI.RangeStart#Equal| a@@132 b@@69) (UI.RangeStart.NegativeInf_q a@@132)) :pattern ( (|UI.RangeStart#Equal| a@@132 b@@69) (UI.RangeStart.NegativeInf_q b@@69)) )))
(assert (forall ((a@@133 T@U) (b@@70 T@U) ) (!  (=> (and (= (type a@@133) DatatypeTypeType) (= (type b@@70) DatatypeTypeType)) (= (|UI.RangeStart#Equal| a@@133 b@@70) (= a@@133 b@@70))) :qid |unknown.0:0| :skolemid |2016| :pattern ( (|UI.RangeStart#Equal| a@@133 b@@70)) )))
(assert (forall ((arg0@@442 T@U) ) (! (= (type (|#UI.RangeEnd.EInclusive| arg0@@442)) DatatypeTypeType) :qid |funType:#UI.RangeEnd.EInclusive| :pattern ( (|#UI.RangeEnd.EInclusive| arg0@@442)) )))
(assert (forall ((|a#17#0#0@@0| T@U) ) (!  (=> (= (type |a#17#0#0@@0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeEnd.EInclusive| |a#17#0#0@@0|)) |##UI.RangeEnd.EInclusive|)) :qid |UIsdfy.21:34| :skolemid |2017| :pattern ( (|#UI.RangeEnd.EInclusive| |a#17#0#0@@0|)) )))
(assert (forall ((d@@26 T@U) ) (!  (=> (= (type d@@26) DatatypeTypeType) (= (UI.RangeEnd.EInclusive_q d@@26) (= (DatatypeCtorId d@@26) |##UI.RangeEnd.EInclusive|))) :qid |unknown.0:0| :skolemid |2018| :pattern ( (UI.RangeEnd.EInclusive_q d@@26)) )))
(assert (forall ((d@@27 T@U) ) (!  (=> (and (= (type d@@27) DatatypeTypeType) (UI.RangeEnd.EInclusive_q d@@27)) (exists ((|a#18#0#0@@0| T@U) ) (!  (and (= (type |a#18#0#0@@0|) (SeqType BoxType)) (= d@@27 (|#UI.RangeEnd.EInclusive| |a#18#0#0@@0|))) :qid |UIsdfy.21:34| :skolemid |2019| :no-pattern (type |a#18#0#0@@0|) :no-pattern (U_2_int |a#18#0#0@@0|) :no-pattern (U_2_bool |a#18#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |2020| :pattern ( (UI.RangeEnd.EInclusive_q d@@27)) )))
(assert (forall ((|a#19#0#0@@0| T@U) ) (!  (=> (= (type |a#19#0#0@@0|) (SeqType BoxType)) (= ($Is (|#UI.RangeEnd.EInclusive| |a#19#0#0@@0|) Tclass.UI.RangeEnd) ($Is |a#19#0#0@@0| Tclass.KeyType.Key))) :qid |UIsdfy.21:34| :skolemid |2021| :pattern ( ($Is (|#UI.RangeEnd.EInclusive| |a#19#0#0@@0|) Tclass.UI.RangeEnd)) )))
(assert (forall ((|a#20#0#0@@0| T@U) ($h@@75 T@U) ) (!  (=> (and (and (= (type |a#20#0#0@@0|) (SeqType BoxType)) (= (type $h@@75) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@75)) (= ($IsAlloc (|#UI.RangeEnd.EInclusive| |a#20#0#0@@0|) Tclass.UI.RangeEnd $h@@75) ($IsAlloc |a#20#0#0@@0| Tclass.KeyType.Key $h@@75))) :qid |UIsdfy.21:34| :skolemid |2022| :pattern ( ($IsAlloc (|#UI.RangeEnd.EInclusive| |a#20#0#0@@0|) Tclass.UI.RangeEnd $h@@75)) )))
(assert (forall ((arg0@@443 T@U) ) (! (= (type (UI.RangeEnd.key arg0@@443)) (SeqType BoxType)) :qid |funType:UI.RangeEnd.key| :pattern ( (UI.RangeEnd.key arg0@@443)) )))
(assert (forall ((d@@28 T@U) ($h@@76 T@U) ) (!  (=> (and (and (= (type d@@28) DatatypeTypeType) (= (type $h@@76) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@76) (and (UI.RangeEnd.EInclusive_q d@@28) ($IsAlloc d@@28 Tclass.UI.RangeEnd $h@@76)))) ($IsAlloc (UI.RangeEnd.key d@@28) Tclass.KeyType.Key $h@@76)) :qid |unknown.0:0| :skolemid |2023| :pattern ( ($IsAlloc (UI.RangeEnd.key d@@28) Tclass.KeyType.Key $h@@76)) )))
(assert (forall ((|a#21#0#0@@0| T@U) ) (!  (=> (= (type |a#21#0#0@@0|) (SeqType BoxType)) (= (|#UI.RangeEnd.EInclusive| (Lit |a#21#0#0@@0|)) (Lit (|#UI.RangeEnd.EInclusive| |a#21#0#0@@0|)))) :qid |UIsdfy.21:34| :skolemid |2024| :pattern ( (|#UI.RangeEnd.EInclusive| (Lit |a#21#0#0@@0|))) )))
(assert (forall ((|a#22#0#0@@0| T@U) ) (!  (=> (= (type |a#22#0#0@@0|) (SeqType BoxType)) (= (UI.RangeEnd.key (|#UI.RangeEnd.EInclusive| |a#22#0#0@@0|)) |a#22#0#0@@0|)) :qid |UIsdfy.21:34| :skolemid |2025| :pattern ( (|#UI.RangeEnd.EInclusive| |a#22#0#0@@0|)) )))
(assert (forall ((arg0@@444 T@U) ) (! (= (type (|#UI.RangeEnd.EExclusive| arg0@@444)) DatatypeTypeType) :qid |funType:#UI.RangeEnd.EExclusive| :pattern ( (|#UI.RangeEnd.EExclusive| arg0@@444)) )))
(assert (forall ((|a#23#0#0| T@U) ) (!  (=> (= (type |a#23#0#0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeEnd.EExclusive| |a#23#0#0|)) |##UI.RangeEnd.EExclusive|)) :qid |UIsdfy.21:57| :skolemid |2026| :pattern ( (|#UI.RangeEnd.EExclusive| |a#23#0#0|)) )))
(assert (forall ((d@@29 T@U) ) (!  (=> (= (type d@@29) DatatypeTypeType) (= (UI.RangeEnd.EExclusive_q d@@29) (= (DatatypeCtorId d@@29) |##UI.RangeEnd.EExclusive|))) :qid |unknown.0:0| :skolemid |2027| :pattern ( (UI.RangeEnd.EExclusive_q d@@29)) )))
(assert (forall ((d@@30 T@U) ) (!  (=> (and (= (type d@@30) DatatypeTypeType) (UI.RangeEnd.EExclusive_q d@@30)) (exists ((|a#24#0#0| T@U) ) (!  (and (= (type |a#24#0#0|) (SeqType BoxType)) (= d@@30 (|#UI.RangeEnd.EExclusive| |a#24#0#0|))) :qid |UIsdfy.21:57| :skolemid |2028| :no-pattern (type |a#24#0#0|) :no-pattern (U_2_int |a#24#0#0|) :no-pattern (U_2_bool |a#24#0#0|) ))) :qid |unknown.0:0| :skolemid |2029| :pattern ( (UI.RangeEnd.EExclusive_q d@@30)) )))
(assert (forall ((|a#25#0#0| T@U) ) (!  (=> (= (type |a#25#0#0|) (SeqType BoxType)) (= ($Is (|#UI.RangeEnd.EExclusive| |a#25#0#0|) Tclass.UI.RangeEnd) ($Is |a#25#0#0| Tclass.KeyType.Key))) :qid |UIsdfy.21:57| :skolemid |2030| :pattern ( ($Is (|#UI.RangeEnd.EExclusive| |a#25#0#0|) Tclass.UI.RangeEnd)) )))
(assert (forall ((|a#26#0#0| T@U) ($h@@77 T@U) ) (!  (=> (and (and (= (type |a#26#0#0|) (SeqType BoxType)) (= (type $h@@77) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@77)) (= ($IsAlloc (|#UI.RangeEnd.EExclusive| |a#26#0#0|) Tclass.UI.RangeEnd $h@@77) ($IsAlloc |a#26#0#0| Tclass.KeyType.Key $h@@77))) :qid |UIsdfy.21:57| :skolemid |2031| :pattern ( ($IsAlloc (|#UI.RangeEnd.EExclusive| |a#26#0#0|) Tclass.UI.RangeEnd $h@@77)) )))
(assert (forall ((d@@31 T@U) ($h@@78 T@U) ) (!  (=> (and (and (= (type d@@31) DatatypeTypeType) (= (type $h@@78) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@78) (and (UI.RangeEnd.EExclusive_q d@@31) ($IsAlloc d@@31 Tclass.UI.RangeEnd $h@@78)))) ($IsAlloc (UI.RangeEnd.key d@@31) Tclass.KeyType.Key $h@@78)) :qid |unknown.0:0| :skolemid |2032| :pattern ( ($IsAlloc (UI.RangeEnd.key d@@31) Tclass.KeyType.Key $h@@78)) )))
(assert (forall ((|a#27#0#0| T@U) ) (!  (=> (= (type |a#27#0#0|) (SeqType BoxType)) (= (|#UI.RangeEnd.EExclusive| (Lit |a#27#0#0|)) (Lit (|#UI.RangeEnd.EExclusive| |a#27#0#0|)))) :qid |UIsdfy.21:57| :skolemid |2033| :pattern ( (|#UI.RangeEnd.EExclusive| (Lit |a#27#0#0|))) )))
(assert (forall ((|a#28#0#0| T@U) ) (!  (=> (= (type |a#28#0#0|) (SeqType BoxType)) (= (UI.RangeEnd.key (|#UI.RangeEnd.EExclusive| |a#28#0#0|)) |a#28#0#0|)) :qid |UIsdfy.21:57| :skolemid |2034| :pattern ( (|#UI.RangeEnd.EExclusive| |a#28#0#0|)) )))
(assert (= (type |#UI.RangeEnd.PositiveInf|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.RangeEnd.PositiveInf|) |##UI.RangeEnd.PositiveInf|))
(assert (forall ((d@@32 T@U) ) (!  (=> (= (type d@@32) DatatypeTypeType) (= (UI.RangeEnd.PositiveInf_q d@@32) (= (DatatypeCtorId d@@32) |##UI.RangeEnd.PositiveInf|))) :qid |unknown.0:0| :skolemid |2035| :pattern ( (UI.RangeEnd.PositiveInf_q d@@32)) )))
(assert (forall ((d@@33 T@U) ) (!  (=> (and (= (type d@@33) DatatypeTypeType) (UI.RangeEnd.PositiveInf_q d@@33)) (= d@@33 |#UI.RangeEnd.PositiveInf|)) :qid |unknown.0:0| :skolemid |2036| :pattern ( (UI.RangeEnd.PositiveInf_q d@@33)) )))
(assert ($Is |#UI.RangeEnd.PositiveInf| Tclass.UI.RangeEnd))
(assert (forall (($h@@79 T@U) ) (!  (=> (and (= (type $h@@79) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@79)) ($IsAlloc |#UI.RangeEnd.PositiveInf| Tclass.UI.RangeEnd $h@@79)) :qid |DafnyPreludebpl.545:12| :skolemid |2037| :pattern ( ($IsAlloc |#UI.RangeEnd.PositiveInf| Tclass.UI.RangeEnd $h@@79)) )))
(assert (= |#UI.RangeEnd.PositiveInf| (Lit |#UI.RangeEnd.PositiveInf|)))
(assert (forall ((d@@34 T@U) ) (!  (=> (and (= (type d@@34) DatatypeTypeType) (|$IsA#UI.RangeEnd| d@@34)) (or (or (UI.RangeEnd.EInclusive_q d@@34) (UI.RangeEnd.EExclusive_q d@@34)) (UI.RangeEnd.PositiveInf_q d@@34))) :qid |unknown.0:0| :skolemid |2038| :pattern ( (|$IsA#UI.RangeEnd| d@@34)) )))
(assert (forall ((d@@35 T@U) ) (!  (=> (and (= (type d@@35) DatatypeTypeType) ($Is d@@35 Tclass.UI.RangeEnd)) (or (or (UI.RangeEnd.EInclusive_q d@@35) (UI.RangeEnd.EExclusive_q d@@35)) (UI.RangeEnd.PositiveInf_q d@@35))) :qid |unknown.0:0| :skolemid |2039| :pattern ( (UI.RangeEnd.PositiveInf_q d@@35) ($Is d@@35 Tclass.UI.RangeEnd)) :pattern ( (UI.RangeEnd.EExclusive_q d@@35) ($Is d@@35 Tclass.UI.RangeEnd)) :pattern ( (UI.RangeEnd.EInclusive_q d@@35) ($Is d@@35 Tclass.UI.RangeEnd)) )))
(assert (forall ((a@@134 T@U) (b@@71 T@U) ) (!  (=> (and (and (= (type a@@134) DatatypeTypeType) (= (type b@@71) DatatypeTypeType)) (and (UI.RangeEnd.EInclusive_q a@@134) (UI.RangeEnd.EInclusive_q b@@71))) (= (|UI.RangeEnd#Equal| a@@134 b@@71) (|Seq#Equal| (UI.RangeEnd.key a@@134) (UI.RangeEnd.key b@@71)))) :qid |unknown.0:0| :skolemid |2040| :pattern ( (|UI.RangeEnd#Equal| a@@134 b@@71) (UI.RangeEnd.EInclusive_q a@@134)) :pattern ( (|UI.RangeEnd#Equal| a@@134 b@@71) (UI.RangeEnd.EInclusive_q b@@71)) )))
(assert (forall ((a@@135 T@U) (b@@72 T@U) ) (!  (=> (and (and (= (type a@@135) DatatypeTypeType) (= (type b@@72) DatatypeTypeType)) (and (UI.RangeEnd.EExclusive_q a@@135) (UI.RangeEnd.EExclusive_q b@@72))) (= (|UI.RangeEnd#Equal| a@@135 b@@72) (|Seq#Equal| (UI.RangeEnd.key a@@135) (UI.RangeEnd.key b@@72)))) :qid |unknown.0:0| :skolemid |2041| :pattern ( (|UI.RangeEnd#Equal| a@@135 b@@72) (UI.RangeEnd.EExclusive_q a@@135)) :pattern ( (|UI.RangeEnd#Equal| a@@135 b@@72) (UI.RangeEnd.EExclusive_q b@@72)) )))
(assert (forall ((a@@136 T@U) (b@@73 T@U) ) (!  (=> (and (and (= (type a@@136) DatatypeTypeType) (= (type b@@73) DatatypeTypeType)) (and (UI.RangeEnd.PositiveInf_q a@@136) (UI.RangeEnd.PositiveInf_q b@@73))) (= (|UI.RangeEnd#Equal| a@@136 b@@73) true)) :qid |unknown.0:0| :skolemid |2042| :pattern ( (|UI.RangeEnd#Equal| a@@136 b@@73) (UI.RangeEnd.PositiveInf_q a@@136)) :pattern ( (|UI.RangeEnd#Equal| a@@136 b@@73) (UI.RangeEnd.PositiveInf_q b@@73)) )))
(assert (forall ((a@@137 T@U) (b@@74 T@U) ) (!  (=> (and (= (type a@@137) DatatypeTypeType) (= (type b@@74) DatatypeTypeType)) (= (|UI.RangeEnd#Equal| a@@137 b@@74) (= a@@137 b@@74))) :qid |unknown.0:0| :skolemid |2043| :pattern ( (|UI.RangeEnd#Equal| a@@137 b@@74)) )))
(assert (forall ((arg0@@445 T@U) (arg1@@180 T@U) ) (! (= (type (|#UI.SuccResult.SuccResult| arg0@@445 arg1@@180)) DatatypeTypeType) :qid |funType:#UI.SuccResult.SuccResult| :pattern ( (|#UI.SuccResult.SuccResult| arg0@@445 arg1@@180)) )))
(assert (forall ((|a#34#0#0| T@U) (|a#34#1#0| T@U) ) (!  (=> (and (= (type |a#34#0#0|) (SeqType BoxType)) (= (type |a#34#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#UI.SuccResult.SuccResult| |a#34#0#0| |a#34#1#0|)) |##UI.SuccResult.SuccResult|)) :qid |UIsdfy.23:36| :skolemid |2044| :pattern ( (|#UI.SuccResult.SuccResult| |a#34#0#0| |a#34#1#0|)) )))
(assert (forall ((d@@36 T@U) ) (!  (=> (= (type d@@36) DatatypeTypeType) (= (UI.SuccResult.SuccResult_q d@@36) (= (DatatypeCtorId d@@36) |##UI.SuccResult.SuccResult|))) :qid |unknown.0:0| :skolemid |2045| :pattern ( (UI.SuccResult.SuccResult_q d@@36)) )))
(assert (forall ((d@@37 T@U) ) (!  (=> (and (= (type d@@37) DatatypeTypeType) (UI.SuccResult.SuccResult_q d@@37)) (exists ((|a#35#0#0| T@U) (|a#35#1#0| T@U) ) (!  (and (and (= (type |a#35#0#0|) (SeqType BoxType)) (= (type |a#35#1#0|) (SeqType BoxType))) (= d@@37 (|#UI.SuccResult.SuccResult| |a#35#0#0| |a#35#1#0|))) :qid |UIsdfy.23:36| :skolemid |2046| :no-pattern (type |a#35#0#0|) :no-pattern (type |a#35#1#0|) :no-pattern (U_2_int |a#35#0#0|) :no-pattern (U_2_bool |a#35#0#0|) :no-pattern (U_2_int |a#35#1#0|) :no-pattern (U_2_bool |a#35#1#0|) ))) :qid |unknown.0:0| :skolemid |2047| :pattern ( (UI.SuccResult.SuccResult_q d@@37)) )))
(assert (forall ((|a#36#0#0| T@U) (|a#36#1#0| T@U) ) (!  (=> (and (= (type |a#36#0#0|) (SeqType BoxType)) (= (type |a#36#1#0|) (SeqType BoxType))) (= ($Is (|#UI.SuccResult.SuccResult| |a#36#0#0| |a#36#1#0|) Tclass.UI.SuccResult)  (and ($Is |a#36#0#0| Tclass.KeyType.Key) ($Is |a#36#1#0| Tclass.ValueType.Value)))) :qid |UIsdfy.23:36| :skolemid |2048| :pattern ( ($Is (|#UI.SuccResult.SuccResult| |a#36#0#0| |a#36#1#0|) Tclass.UI.SuccResult)) )))
(assert (forall ((|a#37#0#0| T@U) (|a#37#1#0| T@U) ($h@@80 T@U) ) (!  (=> (and (and (and (= (type |a#37#0#0|) (SeqType BoxType)) (= (type |a#37#1#0|) (SeqType BoxType))) (= (type $h@@80) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@80)) (= ($IsAlloc (|#UI.SuccResult.SuccResult| |a#37#0#0| |a#37#1#0|) Tclass.UI.SuccResult $h@@80)  (and ($IsAlloc |a#37#0#0| Tclass.KeyType.Key $h@@80) ($IsAlloc |a#37#1#0| Tclass.ValueType.Value $h@@80)))) :qid |UIsdfy.23:36| :skolemid |2049| :pattern ( ($IsAlloc (|#UI.SuccResult.SuccResult| |a#37#0#0| |a#37#1#0|) Tclass.UI.SuccResult $h@@80)) )))
(assert (forall ((arg0@@446 T@U) ) (! (= (type (UI.SuccResult.key arg0@@446)) (SeqType BoxType)) :qid |funType:UI.SuccResult.key| :pattern ( (UI.SuccResult.key arg0@@446)) )))
(assert (forall ((d@@38 T@U) ($h@@81 T@U) ) (!  (=> (and (and (= (type d@@38) DatatypeTypeType) (= (type $h@@81) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@81) (and (UI.SuccResult.SuccResult_q d@@38) ($IsAlloc d@@38 Tclass.UI.SuccResult $h@@81)))) ($IsAlloc (UI.SuccResult.key d@@38) Tclass.KeyType.Key $h@@81)) :qid |unknown.0:0| :skolemid |2050| :pattern ( ($IsAlloc (UI.SuccResult.key d@@38) Tclass.KeyType.Key $h@@81)) )))
(assert (forall ((arg0@@447 T@U) ) (! (= (type (UI.SuccResult.value arg0@@447)) (SeqType BoxType)) :qid |funType:UI.SuccResult.value| :pattern ( (UI.SuccResult.value arg0@@447)) )))
(assert (forall ((d@@39 T@U) ($h@@82 T@U) ) (!  (=> (and (and (= (type d@@39) DatatypeTypeType) (= (type $h@@82) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@82) (and (UI.SuccResult.SuccResult_q d@@39) ($IsAlloc d@@39 Tclass.UI.SuccResult $h@@82)))) ($IsAlloc (UI.SuccResult.value d@@39) Tclass.ValueType.Value $h@@82)) :qid |unknown.0:0| :skolemid |2051| :pattern ( ($IsAlloc (UI.SuccResult.value d@@39) Tclass.ValueType.Value $h@@82)) )))
(assert (forall ((|a#38#0#0| T@U) (|a#38#1#0| T@U) ) (!  (=> (and (= (type |a#38#0#0|) (SeqType BoxType)) (= (type |a#38#1#0|) (SeqType BoxType))) (= (|#UI.SuccResult.SuccResult| (Lit |a#38#0#0|) (Lit |a#38#1#0|)) (Lit (|#UI.SuccResult.SuccResult| |a#38#0#0| |a#38#1#0|)))) :qid |UIsdfy.23:36| :skolemid |2052| :pattern ( (|#UI.SuccResult.SuccResult| (Lit |a#38#0#0|) (Lit |a#38#1#0|))) )))
(assert (forall ((|a#39#0#0| T@U) (|a#39#1#0| T@U) ) (!  (=> (and (= (type |a#39#0#0|) (SeqType BoxType)) (= (type |a#39#1#0|) (SeqType BoxType))) (= (UI.SuccResult.key (|#UI.SuccResult.SuccResult| |a#39#0#0| |a#39#1#0|)) |a#39#0#0|)) :qid |UIsdfy.23:36| :skolemid |2053| :pattern ( (|#UI.SuccResult.SuccResult| |a#39#0#0| |a#39#1#0|)) )))
(assert (forall ((|a#40#0#0| T@U) (|a#40#1#0| T@U) ) (!  (=> (and (= (type |a#40#0#0|) (SeqType BoxType)) (= (type |a#40#1#0|) (SeqType BoxType))) (= (UI.SuccResult.value (|#UI.SuccResult.SuccResult| |a#40#0#0| |a#40#1#0|)) |a#40#1#0|)) :qid |UIsdfy.23:36| :skolemid |2054| :pattern ( (|#UI.SuccResult.SuccResult| |a#40#0#0| |a#40#1#0|)) )))
(assert (forall ((d@@40 T@U) ) (!  (=> (and (= (type d@@40) DatatypeTypeType) (|$IsA#UI.SuccResult| d@@40)) (UI.SuccResult.SuccResult_q d@@40)) :qid |unknown.0:0| :skolemid |2055| :pattern ( (|$IsA#UI.SuccResult| d@@40)) )))
(assert (forall ((d@@41 T@U) ) (!  (=> (and (= (type d@@41) DatatypeTypeType) ($Is d@@41 Tclass.UI.SuccResult)) (UI.SuccResult.SuccResult_q d@@41)) :qid |unknown.0:0| :skolemid |2056| :pattern ( (UI.SuccResult.SuccResult_q d@@41) ($Is d@@41 Tclass.UI.SuccResult)) )))
(assert (forall ((a@@138 T@U) (b@@75 T@U) ) (!  (=> (and (and (= (type a@@138) DatatypeTypeType) (= (type b@@75) DatatypeTypeType)) true) (= (|UI.SuccResult#Equal| a@@138 b@@75)  (and (|Seq#Equal| (UI.SuccResult.key a@@138) (UI.SuccResult.key b@@75)) (|Seq#Equal| (UI.SuccResult.value a@@138) (UI.SuccResult.value b@@75))))) :qid |unknown.0:0| :skolemid |2057| :pattern ( (|UI.SuccResult#Equal| a@@138 b@@75)) )))
(assert (forall ((a@@139 T@U) (b@@76 T@U) ) (!  (=> (and (= (type a@@139) DatatypeTypeType) (= (type b@@76) DatatypeTypeType)) (= (|UI.SuccResult#Equal| a@@139 b@@76) (= a@@139 b@@76))) :qid |unknown.0:0| :skolemid |2058| :pattern ( (|UI.SuccResult#Equal| a@@139 b@@76)) )))
(assert (forall ((arg0@@448 T@U) (arg1@@181 T@U) ) (! (= (type (|#UI.SuccResultList.SuccResultList| arg0@@448 arg1@@181)) DatatypeTypeType) :qid |funType:#UI.SuccResultList.SuccResultList| :pattern ( (|#UI.SuccResultList.SuccResultList| arg0@@448 arg1@@181)) )))
(assert (forall ((|a#41#0#0| T@U) (|a#41#1#0| T@U) ) (!  (=> (and (= (type |a#41#0#0|) (SeqType BoxType)) (= (type |a#41#1#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#UI.SuccResultList.SuccResultList| |a#41#0#0| |a#41#1#0|)) |##UI.SuccResultList.SuccResultList|)) :qid |UIsdfy.24:44| :skolemid |2059| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#41#0#0| |a#41#1#0|)) )))
(assert (forall ((d@@42 T@U) ) (!  (=> (= (type d@@42) DatatypeTypeType) (= (UI.SuccResultList.SuccResultList_q d@@42) (= (DatatypeCtorId d@@42) |##UI.SuccResultList.SuccResultList|))) :qid |unknown.0:0| :skolemid |2060| :pattern ( (UI.SuccResultList.SuccResultList_q d@@42)) )))
(assert (forall ((d@@43 T@U) ) (!  (=> (and (= (type d@@43) DatatypeTypeType) (UI.SuccResultList.SuccResultList_q d@@43)) (exists ((|a#42#0#0| T@U) (|a#42#1#0| T@U) ) (!  (and (and (= (type |a#42#0#0|) (SeqType BoxType)) (= (type |a#42#1#0|) DatatypeTypeType)) (= d@@43 (|#UI.SuccResultList.SuccResultList| |a#42#0#0| |a#42#1#0|))) :qid |UIsdfy.24:44| :skolemid |2061| :no-pattern (type |a#42#0#0|) :no-pattern (type |a#42#1#0|) :no-pattern (U_2_int |a#42#0#0|) :no-pattern (U_2_bool |a#42#0#0|) :no-pattern (U_2_int |a#42#1#0|) :no-pattern (U_2_bool |a#42#1#0|) ))) :qid |unknown.0:0| :skolemid |2062| :pattern ( (UI.SuccResultList.SuccResultList_q d@@43)) )))
(assert (= (type Tclass.UI.SuccResultList) TyType))
(assert (= (Tag Tclass.UI.SuccResultList) Tagclass.UI.SuccResultList))
(assert (= (TagFamily Tclass.UI.SuccResultList) tytagFamily$SuccResultList))
(assert (forall ((bx@@167 T@U) ) (!  (=> (and (= (type bx@@167) BoxType) ($IsBox bx@@167 Tclass.UI.SuccResultList)) (and (= ($Box ($Unbox DatatypeTypeType bx@@167)) bx@@167) ($Is ($Unbox DatatypeTypeType bx@@167) Tclass.UI.SuccResultList))) :qid |unknown.0:0| :skolemid |2063| :pattern ( ($IsBox bx@@167 Tclass.UI.SuccResultList)) )))
(assert (forall ((|a#43#0#0| T@U) (|a#43#1#0| T@U) ) (!  (=> (and (= (type |a#43#0#0|) (SeqType BoxType)) (= (type |a#43#1#0|) DatatypeTypeType)) (= ($Is (|#UI.SuccResultList.SuccResultList| |a#43#0#0| |a#43#1#0|) Tclass.UI.SuccResultList)  (and ($Is |a#43#0#0| (TSeq Tclass.UI.SuccResult)) ($Is |a#43#1#0| Tclass.UI.RangeEnd)))) :qid |UIsdfy.24:44| :skolemid |2064| :pattern ( ($Is (|#UI.SuccResultList.SuccResultList| |a#43#0#0| |a#43#1#0|) Tclass.UI.SuccResultList)) )))
(assert (forall ((|a#44#0#0| T@U) (|a#44#1#0| T@U) ($h@@83 T@U) ) (!  (=> (and (and (and (= (type |a#44#0#0|) (SeqType BoxType)) (= (type |a#44#1#0|) DatatypeTypeType)) (= (type $h@@83) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@83)) (= ($IsAlloc (|#UI.SuccResultList.SuccResultList| |a#44#0#0| |a#44#1#0|) Tclass.UI.SuccResultList $h@@83)  (and ($IsAlloc |a#44#0#0| (TSeq Tclass.UI.SuccResult) $h@@83) ($IsAlloc |a#44#1#0| Tclass.UI.RangeEnd $h@@83)))) :qid |UIsdfy.24:44| :skolemid |2065| :pattern ( ($IsAlloc (|#UI.SuccResultList.SuccResultList| |a#44#0#0| |a#44#1#0|) Tclass.UI.SuccResultList $h@@83)) )))
(assert (forall ((arg0@@449 T@U) ) (! (= (type (UI.SuccResultList.results arg0@@449)) (SeqType BoxType)) :qid |funType:UI.SuccResultList.results| :pattern ( (UI.SuccResultList.results arg0@@449)) )))
(assert (forall ((d@@44 T@U) ($h@@84 T@U) ) (!  (=> (and (and (= (type d@@44) DatatypeTypeType) (= (type $h@@84) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@84) (and (UI.SuccResultList.SuccResultList_q d@@44) ($IsAlloc d@@44 Tclass.UI.SuccResultList $h@@84)))) ($IsAlloc (UI.SuccResultList.results d@@44) (TSeq Tclass.UI.SuccResult) $h@@84)) :qid |unknown.0:0| :skolemid |2066| :pattern ( ($IsAlloc (UI.SuccResultList.results d@@44) (TSeq Tclass.UI.SuccResult) $h@@84)) )))
(assert (forall ((arg0@@450 T@U) ) (! (= (type (UI.SuccResultList.end arg0@@450)) DatatypeTypeType) :qid |funType:UI.SuccResultList.end| :pattern ( (UI.SuccResultList.end arg0@@450)) )))
(assert (forall ((d@@45 T@U) ($h@@85 T@U) ) (!  (=> (and (and (= (type d@@45) DatatypeTypeType) (= (type $h@@85) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@85) (and (UI.SuccResultList.SuccResultList_q d@@45) ($IsAlloc d@@45 Tclass.UI.SuccResultList $h@@85)))) ($IsAlloc (UI.SuccResultList.end d@@45) Tclass.UI.RangeEnd $h@@85)) :qid |unknown.0:0| :skolemid |2067| :pattern ( ($IsAlloc (UI.SuccResultList.end d@@45) Tclass.UI.RangeEnd $h@@85)) )))
(assert (forall ((|a#45#0#0| T@U) (|a#45#1#0| T@U) ) (!  (=> (and (= (type |a#45#0#0|) (SeqType BoxType)) (= (type |a#45#1#0|) DatatypeTypeType)) (= (|#UI.SuccResultList.SuccResultList| (Lit |a#45#0#0|) (Lit |a#45#1#0|)) (Lit (|#UI.SuccResultList.SuccResultList| |a#45#0#0| |a#45#1#0|)))) :qid |UIsdfy.24:44| :skolemid |2068| :pattern ( (|#UI.SuccResultList.SuccResultList| (Lit |a#45#0#0|) (Lit |a#45#1#0|))) )))
(assert (forall ((|a#46#0#0| T@U) (|a#46#1#0| T@U) ) (!  (=> (and (= (type |a#46#0#0|) (SeqType BoxType)) (= (type |a#46#1#0|) DatatypeTypeType)) (= (UI.SuccResultList.results (|#UI.SuccResultList.SuccResultList| |a#46#0#0| |a#46#1#0|)) |a#46#0#0|)) :qid |UIsdfy.24:44| :skolemid |2069| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#46#0#0| |a#46#1#0|)) )))
(assert (forall ((|a#47#0#0| T@U) (|a#47#1#0| T@U) (i@@25 Int) ) (!  (=> (and (and (= (type |a#47#0#0|) (SeqType BoxType)) (= (type |a#47#1#0|) DatatypeTypeType)) (and (<= 0 i@@25) (< i@@25 (|Seq#Length| |a#47#0#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#47#0#0| i@@25))) (DtRank (|#UI.SuccResultList.SuccResultList| |a#47#0#0| |a#47#1#0|)))) :qid |UIsdfy.24:44| :skolemid |2070| :pattern ( (|Seq#Index| |a#47#0#0| i@@25) (|#UI.SuccResultList.SuccResultList| |a#47#0#0| |a#47#1#0|)) )))
(assert (forall ((|a#48#0#0| T@U) (|a#48#1#0| T@U) ) (!  (=> (and (= (type |a#48#0#0|) (SeqType BoxType)) (= (type |a#48#1#0|) DatatypeTypeType)) (< (|Seq#Rank| |a#48#0#0|) (DtRank (|#UI.SuccResultList.SuccResultList| |a#48#0#0| |a#48#1#0|)))) :qid |UIsdfy.24:44| :skolemid |2071| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#48#0#0| |a#48#1#0|)) )))
(assert (forall ((|a#49#0#0| T@U) (|a#49#1#0| T@U) ) (!  (=> (and (= (type |a#49#0#0|) (SeqType BoxType)) (= (type |a#49#1#0|) DatatypeTypeType)) (= (UI.SuccResultList.end (|#UI.SuccResultList.SuccResultList| |a#49#0#0| |a#49#1#0|)) |a#49#1#0|)) :qid |UIsdfy.24:44| :skolemid |2072| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#49#0#0| |a#49#1#0|)) )))
(assert (forall ((|a#50#0#0| T@U) (|a#50#1#0| T@U) ) (!  (=> (and (= (type |a#50#0#0|) (SeqType BoxType)) (= (type |a#50#1#0|) DatatypeTypeType)) (< (DtRank |a#50#1#0|) (DtRank (|#UI.SuccResultList.SuccResultList| |a#50#0#0| |a#50#1#0|)))) :qid |UIsdfy.24:44| :skolemid |2073| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#50#0#0| |a#50#1#0|)) )))
(assert (forall ((d@@46 T@U) ) (!  (=> (and (= (type d@@46) DatatypeTypeType) (|$IsA#UI.SuccResultList| d@@46)) (UI.SuccResultList.SuccResultList_q d@@46)) :qid |unknown.0:0| :skolemid |2074| :pattern ( (|$IsA#UI.SuccResultList| d@@46)) )))
(assert (forall ((d@@47 T@U) ) (!  (=> (and (= (type d@@47) DatatypeTypeType) ($Is d@@47 Tclass.UI.SuccResultList)) (UI.SuccResultList.SuccResultList_q d@@47)) :qid |unknown.0:0| :skolemid |2075| :pattern ( (UI.SuccResultList.SuccResultList_q d@@47) ($Is d@@47 Tclass.UI.SuccResultList)) )))
(assert (forall ((a@@140 T@U) (b@@77 T@U) ) (!  (=> (and (and (= (type a@@140) DatatypeTypeType) (= (type b@@77) DatatypeTypeType)) true) (= (|UI.SuccResultList#Equal| a@@140 b@@77)  (and (|Seq#Equal| (UI.SuccResultList.results a@@140) (UI.SuccResultList.results b@@77)) (|UI.RangeEnd#Equal| (UI.SuccResultList.end a@@140) (UI.SuccResultList.end b@@77))))) :qid |unknown.0:0| :skolemid |2076| :pattern ( (|UI.SuccResultList#Equal| a@@140 b@@77)) )))
(assert (forall ((a@@141 T@U) (b@@78 T@U) ) (!  (=> (and (= (type a@@141) DatatypeTypeType) (= (type b@@78) DatatypeTypeType)) (= (|UI.SuccResultList#Equal| a@@141 b@@78) (= a@@141 b@@78))) :qid |unknown.0:0| :skolemid |2077| :pattern ( (|UI.SuccResultList#Equal| a@@141 b@@78)) )))
(assert (= (type |#UI.Op.NoOp|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.Op.NoOp|) |##UI.Op.NoOp|))
(assert (forall ((d@@48 T@U) ) (!  (=> (= (type d@@48) DatatypeTypeType) (= (UI.Op.NoOp_q d@@48) (= (DatatypeCtorId d@@48) |##UI.Op.NoOp|))) :qid |unknown.0:0| :skolemid |2078| :pattern ( (UI.Op.NoOp_q d@@48)) )))
(assert (forall ((d@@49 T@U) ) (!  (=> (and (= (type d@@49) DatatypeTypeType) (UI.Op.NoOp_q d@@49)) (= d@@49 |#UI.Op.NoOp|)) :qid |unknown.0:0| :skolemid |2079| :pattern ( (UI.Op.NoOp_q d@@49)) )))
(assert ($Is |#UI.Op.NoOp| Tclass.UI.Op))
(assert (forall (($h@@86 T@U) ) (!  (=> (and (= (type $h@@86) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@86)) ($IsAlloc |#UI.Op.NoOp| Tclass.UI.Op $h@@86)) :qid |DafnyPreludebpl.545:12| :skolemid |2080| :pattern ( ($IsAlloc |#UI.Op.NoOp| Tclass.UI.Op $h@@86)) )))
(assert (= |#UI.Op.NoOp| (Lit |#UI.Op.NoOp|)))
(assert (= (type |#UI.Op.SyncOp|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.Op.SyncOp|) |##UI.Op.SyncOp|))
(assert (forall ((d@@50 T@U) ) (!  (=> (= (type d@@50) DatatypeTypeType) (= (UI.Op.SyncOp_q d@@50) (= (DatatypeCtorId d@@50) |##UI.Op.SyncOp|))) :qid |unknown.0:0| :skolemid |2081| :pattern ( (UI.Op.SyncOp_q d@@50)) )))
(assert (forall ((d@@51 T@U) ) (!  (=> (and (= (type d@@51) DatatypeTypeType) (UI.Op.SyncOp_q d@@51)) (= d@@51 |#UI.Op.SyncOp|)) :qid |unknown.0:0| :skolemid |2082| :pattern ( (UI.Op.SyncOp_q d@@51)) )))
(assert ($Is |#UI.Op.SyncOp| Tclass.UI.Op))
(assert (forall (($h@@87 T@U) ) (!  (=> (and (= (type $h@@87) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@87)) ($IsAlloc |#UI.Op.SyncOp| Tclass.UI.Op $h@@87)) :qid |DafnyPreludebpl.545:12| :skolemid |2083| :pattern ( ($IsAlloc |#UI.Op.SyncOp| Tclass.UI.Op $h@@87)) )))
(assert (= |#UI.Op.SyncOp| (Lit |#UI.Op.SyncOp|)))
(assert (= (type |#UI.Op.CrashOp|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.Op.CrashOp|) |##UI.Op.CrashOp|))
(assert (forall ((d@@52 T@U) ) (!  (=> (= (type d@@52) DatatypeTypeType) (= (UI.Op.CrashOp_q d@@52) (= (DatatypeCtorId d@@52) |##UI.Op.CrashOp|))) :qid |unknown.0:0| :skolemid |2084| :pattern ( (UI.Op.CrashOp_q d@@52)) )))
(assert (forall ((d@@53 T@U) ) (!  (=> (and (= (type d@@53) DatatypeTypeType) (UI.Op.CrashOp_q d@@53)) (= d@@53 |#UI.Op.CrashOp|)) :qid |unknown.0:0| :skolemid |2085| :pattern ( (UI.Op.CrashOp_q d@@53)) )))
(assert ($Is |#UI.Op.CrashOp| Tclass.UI.Op))
(assert (forall (($h@@88 T@U) ) (!  (=> (and (= (type $h@@88) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@88)) ($IsAlloc |#UI.Op.CrashOp| Tclass.UI.Op $h@@88)) :qid |DafnyPreludebpl.545:12| :skolemid |2086| :pattern ( ($IsAlloc |#UI.Op.CrashOp| Tclass.UI.Op $h@@88)) )))
(assert (= |#UI.Op.CrashOp| (Lit |#UI.Op.CrashOp|)))
(assert (forall ((arg0@@451 Int) ) (! (= (type (|#UI.Op.PushSyncOp| arg0@@451)) DatatypeTypeType) :qid |funType:#UI.Op.PushSyncOp| :pattern ( (|#UI.Op.PushSyncOp| arg0@@451)) )))
(assert (forall ((|a#66#0#0| Int) ) (! (= (DatatypeCtorId (|#UI.Op.PushSyncOp| |a#66#0#0|)) |##UI.Op.PushSyncOp|) :qid |UIsdfy.30:24| :skolemid |2087| :pattern ( (|#UI.Op.PushSyncOp| |a#66#0#0|)) )))
(assert (forall ((d@@54 T@U) ) (!  (=> (= (type d@@54) DatatypeTypeType) (= (UI.Op.PushSyncOp_q d@@54) (= (DatatypeCtorId d@@54) |##UI.Op.PushSyncOp|))) :qid |unknown.0:0| :skolemid |2088| :pattern ( (UI.Op.PushSyncOp_q d@@54)) )))
(assert (forall ((d@@55 T@U) ) (!  (=> (and (= (type d@@55) DatatypeTypeType) (UI.Op.PushSyncOp_q d@@55)) (exists ((|a#67#0#0| Int) ) (! (= d@@55 (|#UI.Op.PushSyncOp| |a#67#0#0|)) :qid |UIsdfy.30:24| :skolemid |2089| ))) :qid |unknown.0:0| :skolemid |2090| :pattern ( (UI.Op.PushSyncOp_q d@@55)) )))
(assert (forall ((|a#68#0#0| Int) ) (! (= ($Is (|#UI.Op.PushSyncOp| |a#68#0#0|) Tclass.UI.Op) ($Is (int_2_U |a#68#0#0|) TInt)) :qid |UIsdfy.30:24| :skolemid |2091| :pattern ( ($Is (|#UI.Op.PushSyncOp| |a#68#0#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#69#0#0| Int) ($h@@89 T@U) ) (!  (=> (and (= (type $h@@89) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@89)) (= ($IsAlloc (|#UI.Op.PushSyncOp| |a#69#0#0|) Tclass.UI.Op $h@@89) ($IsAlloc (int_2_U |a#69#0#0|) TInt $h@@89))) :qid |UIsdfy.30:24| :skolemid |2092| :pattern ( ($IsAlloc (|#UI.Op.PushSyncOp| |a#69#0#0|) Tclass.UI.Op $h@@89)) )))
(assert (forall ((d@@56 T@U) ($h@@90 T@U) ) (!  (=> (and (and (= (type d@@56) DatatypeTypeType) (= (type $h@@90) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@90) (and (UI.Op.PushSyncOp_q d@@56) ($IsAlloc d@@56 Tclass.UI.Op $h@@90)))) ($IsAlloc (int_2_U (UI.Op.id d@@56)) TInt $h@@90)) :qid |unknown.0:0| :skolemid |2093| :pattern ( ($IsAlloc (int_2_U (UI.Op.id d@@56)) TInt $h@@90)) )))
(assert (forall ((|a#70#0#0| Int) ) (! (= (|#UI.Op.PushSyncOp| (LitInt |a#70#0#0|)) (Lit (|#UI.Op.PushSyncOp| |a#70#0#0|))) :qid |UIsdfy.30:24| :skolemid |2094| :pattern ( (|#UI.Op.PushSyncOp| (LitInt |a#70#0#0|))) )))
(assert (forall ((|a#71#0#0| Int) ) (! (= (UI.Op.id (|#UI.Op.PushSyncOp| |a#71#0#0|)) |a#71#0#0|) :qid |UIsdfy.30:24| :skolemid |2095| :pattern ( (|#UI.Op.PushSyncOp| |a#71#0#0|)) )))
(assert (forall ((arg0@@452 Int) ) (! (= (type (|#UI.Op.PopSyncOp| arg0@@452)) DatatypeTypeType) :qid |funType:#UI.Op.PopSyncOp| :pattern ( (|#UI.Op.PopSyncOp| arg0@@452)) )))
(assert (forall ((|a#72#0#0| Int) ) (! (= (DatatypeCtorId (|#UI.Op.PopSyncOp| |a#72#0#0|)) |##UI.Op.PopSyncOp|) :qid |UIsdfy.31:23| :skolemid |2096| :pattern ( (|#UI.Op.PopSyncOp| |a#72#0#0|)) )))
(assert (forall ((d@@57 T@U) ) (!  (=> (= (type d@@57) DatatypeTypeType) (= (UI.Op.PopSyncOp_q d@@57) (= (DatatypeCtorId d@@57) |##UI.Op.PopSyncOp|))) :qid |unknown.0:0| :skolemid |2097| :pattern ( (UI.Op.PopSyncOp_q d@@57)) )))
(assert (forall ((d@@58 T@U) ) (!  (=> (and (= (type d@@58) DatatypeTypeType) (UI.Op.PopSyncOp_q d@@58)) (exists ((|a#73#0#0| Int) ) (! (= d@@58 (|#UI.Op.PopSyncOp| |a#73#0#0|)) :qid |UIsdfy.31:23| :skolemid |2098| ))) :qid |unknown.0:0| :skolemid |2099| :pattern ( (UI.Op.PopSyncOp_q d@@58)) )))
(assert (forall ((|a#74#0#0| Int) ) (! (= ($Is (|#UI.Op.PopSyncOp| |a#74#0#0|) Tclass.UI.Op) ($Is (int_2_U |a#74#0#0|) TInt)) :qid |UIsdfy.31:23| :skolemid |2100| :pattern ( ($Is (|#UI.Op.PopSyncOp| |a#74#0#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#75#0#0| Int) ($h@@91 T@U) ) (!  (=> (and (= (type $h@@91) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@91)) (= ($IsAlloc (|#UI.Op.PopSyncOp| |a#75#0#0|) Tclass.UI.Op $h@@91) ($IsAlloc (int_2_U |a#75#0#0|) TInt $h@@91))) :qid |UIsdfy.31:23| :skolemid |2101| :pattern ( ($IsAlloc (|#UI.Op.PopSyncOp| |a#75#0#0|) Tclass.UI.Op $h@@91)) )))
(assert (forall ((d@@59 T@U) ($h@@92 T@U) ) (!  (=> (and (and (= (type d@@59) DatatypeTypeType) (= (type $h@@92) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@92) (and (UI.Op.PopSyncOp_q d@@59) ($IsAlloc d@@59 Tclass.UI.Op $h@@92)))) ($IsAlloc (int_2_U (UI.Op.id d@@59)) TInt $h@@92)) :qid |unknown.0:0| :skolemid |2102| :pattern ( ($IsAlloc (int_2_U (UI.Op.id d@@59)) TInt $h@@92)) )))
(assert (forall ((|a#76#0#0| Int) ) (! (= (|#UI.Op.PopSyncOp| (LitInt |a#76#0#0|)) (Lit (|#UI.Op.PopSyncOp| |a#76#0#0|))) :qid |UIsdfy.31:23| :skolemid |2103| :pattern ( (|#UI.Op.PopSyncOp| (LitInt |a#76#0#0|))) )))
(assert (forall ((|a#77#0#0| Int) ) (! (= (UI.Op.id (|#UI.Op.PopSyncOp| |a#77#0#0|)) |a#77#0#0|) :qid |UIsdfy.31:23| :skolemid |2104| :pattern ( (|#UI.Op.PopSyncOp| |a#77#0#0|)) )))
(assert (forall ((arg0@@453 T@U) (arg1@@182 T@U) ) (! (= (type (|#UI.Op.GetOp| arg0@@453 arg1@@182)) DatatypeTypeType) :qid |funType:#UI.Op.GetOp| :pattern ( (|#UI.Op.GetOp| arg0@@453 arg1@@182)) )))
(assert (forall ((|a#78#0#0| T@U) (|a#78#1#0| T@U) ) (!  (=> (and (= (type |a#78#0#0|) (SeqType BoxType)) (= (type |a#78#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#UI.Op.GetOp| |a#78#0#0| |a#78#1#0|)) |##UI.Op.GetOp|)) :qid |UIsdfy.33:13| :skolemid |2105| :pattern ( (|#UI.Op.GetOp| |a#78#0#0| |a#78#1#0|)) )))
(assert (forall ((d@@60 T@U) ) (!  (=> (= (type d@@60) DatatypeTypeType) (= (UI.Op.GetOp_q d@@60) (= (DatatypeCtorId d@@60) |##UI.Op.GetOp|))) :qid |unknown.0:0| :skolemid |2106| :pattern ( (UI.Op.GetOp_q d@@60)) )))
(assert (forall ((d@@61 T@U) ) (!  (=> (and (= (type d@@61) DatatypeTypeType) (UI.Op.GetOp_q d@@61)) (exists ((|a#79#0#0| T@U) (|a#79#1#0| T@U) ) (!  (and (and (= (type |a#79#0#0|) (SeqType BoxType)) (= (type |a#79#1#0|) (SeqType BoxType))) (= d@@61 (|#UI.Op.GetOp| |a#79#0#0| |a#79#1#0|))) :qid |UIsdfy.33:13| :skolemid |2107| :no-pattern (type |a#79#0#0|) :no-pattern (type |a#79#1#0|) :no-pattern (U_2_int |a#79#0#0|) :no-pattern (U_2_bool |a#79#0#0|) :no-pattern (U_2_int |a#79#1#0|) :no-pattern (U_2_bool |a#79#1#0|) ))) :qid |unknown.0:0| :skolemid |2108| :pattern ( (UI.Op.GetOp_q d@@61)) )))
(assert (forall ((|a#80#0#0| T@U) (|a#80#1#0| T@U) ) (!  (=> (and (= (type |a#80#0#0|) (SeqType BoxType)) (= (type |a#80#1#0|) (SeqType BoxType))) (= ($Is (|#UI.Op.GetOp| |a#80#0#0| |a#80#1#0|) Tclass.UI.Op)  (and ($Is |a#80#0#0| Tclass.KeyType.Key) ($Is |a#80#1#0| Tclass.ValueType.Value)))) :qid |UIsdfy.33:13| :skolemid |2109| :pattern ( ($Is (|#UI.Op.GetOp| |a#80#0#0| |a#80#1#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#81#0#0| T@U) (|a#81#1#0| T@U) ($h@@93 T@U) ) (!  (=> (and (and (and (= (type |a#81#0#0|) (SeqType BoxType)) (= (type |a#81#1#0|) (SeqType BoxType))) (= (type $h@@93) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@93)) (= ($IsAlloc (|#UI.Op.GetOp| |a#81#0#0| |a#81#1#0|) Tclass.UI.Op $h@@93)  (and ($IsAlloc |a#81#0#0| Tclass.KeyType.Key $h@@93) ($IsAlloc |a#81#1#0| Tclass.ValueType.Value $h@@93)))) :qid |UIsdfy.33:13| :skolemid |2110| :pattern ( ($IsAlloc (|#UI.Op.GetOp| |a#81#0#0| |a#81#1#0|) Tclass.UI.Op $h@@93)) )))
(assert (forall ((arg0@@454 T@U) ) (! (= (type (UI.Op.key arg0@@454)) (SeqType BoxType)) :qid |funType:UI.Op.key| :pattern ( (UI.Op.key arg0@@454)) )))
(assert (forall ((d@@62 T@U) ($h@@94 T@U) ) (!  (=> (and (and (= (type d@@62) DatatypeTypeType) (= (type $h@@94) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@94) (and (UI.Op.GetOp_q d@@62) ($IsAlloc d@@62 Tclass.UI.Op $h@@94)))) ($IsAlloc (UI.Op.key d@@62) Tclass.KeyType.Key $h@@94)) :qid |unknown.0:0| :skolemid |2111| :pattern ( ($IsAlloc (UI.Op.key d@@62) Tclass.KeyType.Key $h@@94)) )))
(assert (forall ((arg0@@455 T@U) ) (! (= (type (UI.Op.value arg0@@455)) (SeqType BoxType)) :qid |funType:UI.Op.value| :pattern ( (UI.Op.value arg0@@455)) )))
(assert (forall ((d@@63 T@U) ($h@@95 T@U) ) (!  (=> (and (and (= (type d@@63) DatatypeTypeType) (= (type $h@@95) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@95) (and (UI.Op.GetOp_q d@@63) ($IsAlloc d@@63 Tclass.UI.Op $h@@95)))) ($IsAlloc (UI.Op.value d@@63) Tclass.ValueType.Value $h@@95)) :qid |unknown.0:0| :skolemid |2112| :pattern ( ($IsAlloc (UI.Op.value d@@63) Tclass.ValueType.Value $h@@95)) )))
(assert (forall ((|a#82#0#0| T@U) (|a#82#1#0| T@U) ) (!  (=> (and (= (type |a#82#0#0|) (SeqType BoxType)) (= (type |a#82#1#0|) (SeqType BoxType))) (= (|#UI.Op.GetOp| (Lit |a#82#0#0|) (Lit |a#82#1#0|)) (Lit (|#UI.Op.GetOp| |a#82#0#0| |a#82#1#0|)))) :qid |UIsdfy.33:13| :skolemid |2113| :pattern ( (|#UI.Op.GetOp| (Lit |a#82#0#0|) (Lit |a#82#1#0|))) )))
(assert (forall ((|a#83#0#0| T@U) (|a#83#1#0| T@U) ) (!  (=> (and (= (type |a#83#0#0|) (SeqType BoxType)) (= (type |a#83#1#0|) (SeqType BoxType))) (= (UI.Op.key (|#UI.Op.GetOp| |a#83#0#0| |a#83#1#0|)) |a#83#0#0|)) :qid |UIsdfy.33:13| :skolemid |2114| :pattern ( (|#UI.Op.GetOp| |a#83#0#0| |a#83#1#0|)) )))
(assert (forall ((|a#84#0#0| T@U) (|a#84#1#0| T@U) ) (!  (=> (and (= (type |a#84#0#0|) (SeqType BoxType)) (= (type |a#84#1#0|) (SeqType BoxType))) (= (UI.Op.value (|#UI.Op.GetOp| |a#84#0#0| |a#84#1#0|)) |a#84#1#0|)) :qid |UIsdfy.33:13| :skolemid |2115| :pattern ( (|#UI.Op.GetOp| |a#84#0#0| |a#84#1#0|)) )))
(assert (forall ((arg0@@456 T@U) (arg1@@183 Int) ) (! (= (type (|#UI.Op.GetBeginOp| arg0@@456 arg1@@183)) DatatypeTypeType) :qid |funType:#UI.Op.GetBeginOp| :pattern ( (|#UI.Op.GetBeginOp| arg0@@456 arg1@@183)) )))
(assert (forall ((|a#85#0#0| T@U) (|a#85#1#0| Int) ) (!  (=> (= (type |a#85#0#0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.Op.GetBeginOp| |a#85#0#0| |a#85#1#0|)) |##UI.Op.GetBeginOp|)) :qid |UIsdfy.35:18| :skolemid |2116| :pattern ( (|#UI.Op.GetBeginOp| |a#85#0#0| |a#85#1#0|)) )))
(assert (forall ((d@@64 T@U) ) (!  (=> (= (type d@@64) DatatypeTypeType) (= (UI.Op.GetBeginOp_q d@@64) (= (DatatypeCtorId d@@64) |##UI.Op.GetBeginOp|))) :qid |unknown.0:0| :skolemid |2117| :pattern ( (UI.Op.GetBeginOp_q d@@64)) )))
(assert (forall ((d@@65 T@U) ) (!  (=> (and (= (type d@@65) DatatypeTypeType) (UI.Op.GetBeginOp_q d@@65)) (exists ((|a#86#0#0| T@U) (|a#86#1#0| Int) ) (!  (and (= (type |a#86#0#0|) (SeqType BoxType)) (= d@@65 (|#UI.Op.GetBeginOp| |a#86#0#0| |a#86#1#0|))) :qid |UIsdfy.35:18| :skolemid |2118| :no-pattern (type |a#86#0#0|) :no-pattern (U_2_int |a#86#0#0|) :no-pattern (U_2_bool |a#86#0#0|) ))) :qid |unknown.0:0| :skolemid |2119| :pattern ( (UI.Op.GetBeginOp_q d@@65)) )))
(assert (forall ((|a#87#0#0| T@U) (|a#87#1#0| Int) ) (!  (=> (= (type |a#87#0#0|) (SeqType BoxType)) (= ($Is (|#UI.Op.GetBeginOp| |a#87#0#0| |a#87#1#0|) Tclass.UI.Op)  (and ($Is |a#87#0#0| Tclass.KeyType.Key) ($Is (int_2_U |a#87#1#0|) TInt)))) :qid |UIsdfy.35:18| :skolemid |2120| :pattern ( ($Is (|#UI.Op.GetBeginOp| |a#87#0#0| |a#87#1#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#88#0#0| T@U) (|a#88#1#0| Int) ($h@@96 T@U) ) (!  (=> (and (and (= (type |a#88#0#0|) (SeqType BoxType)) (= (type $h@@96) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@96)) (= ($IsAlloc (|#UI.Op.GetBeginOp| |a#88#0#0| |a#88#1#0|) Tclass.UI.Op $h@@96)  (and ($IsAlloc |a#88#0#0| Tclass.KeyType.Key $h@@96) ($IsAlloc (int_2_U |a#88#1#0|) TInt $h@@96)))) :qid |UIsdfy.35:18| :skolemid |2121| :pattern ( ($IsAlloc (|#UI.Op.GetBeginOp| |a#88#0#0| |a#88#1#0|) Tclass.UI.Op $h@@96)) )))
(assert (forall ((d@@66 T@U) ($h@@97 T@U) ) (!  (=> (and (and (= (type d@@66) DatatypeTypeType) (= (type $h@@97) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@97) (and (UI.Op.GetBeginOp_q d@@66) ($IsAlloc d@@66 Tclass.UI.Op $h@@97)))) ($IsAlloc (UI.Op.key d@@66) Tclass.KeyType.Key $h@@97)) :qid |unknown.0:0| :skolemid |2122| :pattern ( ($IsAlloc (UI.Op.key d@@66) Tclass.KeyType.Key $h@@97)) )))
(assert (forall ((d@@67 T@U) ($h@@98 T@U) ) (!  (=> (and (and (= (type d@@67) DatatypeTypeType) (= (type $h@@98) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@98) (and (UI.Op.GetBeginOp_q d@@67) ($IsAlloc d@@67 Tclass.UI.Op $h@@98)))) ($IsAlloc (int_2_U (UI.Op.id d@@67)) TInt $h@@98)) :qid |unknown.0:0| :skolemid |2123| :pattern ( ($IsAlloc (int_2_U (UI.Op.id d@@67)) TInt $h@@98)) )))
(assert (forall ((|a#89#0#0| T@U) (|a#89#1#0| Int) ) (!  (=> (= (type |a#89#0#0|) (SeqType BoxType)) (= (|#UI.Op.GetBeginOp| (Lit |a#89#0#0|) (LitInt |a#89#1#0|)) (Lit (|#UI.Op.GetBeginOp| |a#89#0#0| |a#89#1#0|)))) :qid |UIsdfy.35:18| :skolemid |2124| :pattern ( (|#UI.Op.GetBeginOp| (Lit |a#89#0#0|) (LitInt |a#89#1#0|))) )))
(assert (forall ((|a#90#0#0| T@U) (|a#90#1#0| Int) ) (!  (=> (= (type |a#90#0#0|) (SeqType BoxType)) (= (UI.Op.key (|#UI.Op.GetBeginOp| |a#90#0#0| |a#90#1#0|)) |a#90#0#0|)) :qid |UIsdfy.35:18| :skolemid |2125| :pattern ( (|#UI.Op.GetBeginOp| |a#90#0#0| |a#90#1#0|)) )))
(assert (forall ((|a#91#0#0| T@U) (|a#91#1#0| Int) ) (!  (=> (= (type |a#91#0#0|) (SeqType BoxType)) (= (UI.Op.id (|#UI.Op.GetBeginOp| |a#91#0#0| |a#91#1#0|)) |a#91#1#0|)) :qid |UIsdfy.35:18| :skolemid |2126| :pattern ( (|#UI.Op.GetBeginOp| |a#91#0#0| |a#91#1#0|)) )))
(assert (forall ((arg0@@457 T@U) (arg1@@184 Int) ) (! (= (type (|#UI.Op.GetEndOp| arg0@@457 arg1@@184)) DatatypeTypeType) :qid |funType:#UI.Op.GetEndOp| :pattern ( (|#UI.Op.GetEndOp| arg0@@457 arg1@@184)) )))
(assert (forall ((|a#92#0#0| T@U) (|a#92#1#0| Int) ) (!  (=> (= (type |a#92#0#0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.Op.GetEndOp| |a#92#0#0| |a#92#1#0|)) |##UI.Op.GetEndOp|)) :qid |UIsdfy.36:16| :skolemid |2127| :pattern ( (|#UI.Op.GetEndOp| |a#92#0#0| |a#92#1#0|)) )))
(assert (forall ((d@@68 T@U) ) (!  (=> (= (type d@@68) DatatypeTypeType) (= (UI.Op.GetEndOp_q d@@68) (= (DatatypeCtorId d@@68) |##UI.Op.GetEndOp|))) :qid |unknown.0:0| :skolemid |2128| :pattern ( (UI.Op.GetEndOp_q d@@68)) )))
(assert (forall ((d@@69 T@U) ) (!  (=> (and (= (type d@@69) DatatypeTypeType) (UI.Op.GetEndOp_q d@@69)) (exists ((|a#93#0#0| T@U) (|a#93#1#0| Int) ) (!  (and (= (type |a#93#0#0|) (SeqType BoxType)) (= d@@69 (|#UI.Op.GetEndOp| |a#93#0#0| |a#93#1#0|))) :qid |UIsdfy.36:16| :skolemid |2129| :no-pattern (type |a#93#0#0|) :no-pattern (U_2_int |a#93#0#0|) :no-pattern (U_2_bool |a#93#0#0|) ))) :qid |unknown.0:0| :skolemid |2130| :pattern ( (UI.Op.GetEndOp_q d@@69)) )))
(assert (forall ((|a#94#0#0| T@U) (|a#94#1#0| Int) ) (!  (=> (= (type |a#94#0#0|) (SeqType BoxType)) (= ($Is (|#UI.Op.GetEndOp| |a#94#0#0| |a#94#1#0|) Tclass.UI.Op)  (and ($Is |a#94#0#0| Tclass.ValueType.Value) ($Is (int_2_U |a#94#1#0|) TInt)))) :qid |UIsdfy.36:16| :skolemid |2131| :pattern ( ($Is (|#UI.Op.GetEndOp| |a#94#0#0| |a#94#1#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#95#0#0| T@U) (|a#95#1#0| Int) ($h@@99 T@U) ) (!  (=> (and (and (= (type |a#95#0#0|) (SeqType BoxType)) (= (type $h@@99) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@99)) (= ($IsAlloc (|#UI.Op.GetEndOp| |a#95#0#0| |a#95#1#0|) Tclass.UI.Op $h@@99)  (and ($IsAlloc |a#95#0#0| Tclass.ValueType.Value $h@@99) ($IsAlloc (int_2_U |a#95#1#0|) TInt $h@@99)))) :qid |UIsdfy.36:16| :skolemid |2132| :pattern ( ($IsAlloc (|#UI.Op.GetEndOp| |a#95#0#0| |a#95#1#0|) Tclass.UI.Op $h@@99)) )))
(assert (forall ((d@@70 T@U) ($h@@100 T@U) ) (!  (=> (and (and (= (type d@@70) DatatypeTypeType) (= (type $h@@100) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@100) (and (UI.Op.GetEndOp_q d@@70) ($IsAlloc d@@70 Tclass.UI.Op $h@@100)))) ($IsAlloc (UI.Op.value d@@70) Tclass.ValueType.Value $h@@100)) :qid |unknown.0:0| :skolemid |2133| :pattern ( ($IsAlloc (UI.Op.value d@@70) Tclass.ValueType.Value $h@@100)) )))
(assert (forall ((d@@71 T@U) ($h@@101 T@U) ) (!  (=> (and (and (= (type d@@71) DatatypeTypeType) (= (type $h@@101) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@101) (and (UI.Op.GetEndOp_q d@@71) ($IsAlloc d@@71 Tclass.UI.Op $h@@101)))) ($IsAlloc (int_2_U (UI.Op.id d@@71)) TInt $h@@101)) :qid |unknown.0:0| :skolemid |2134| :pattern ( ($IsAlloc (int_2_U (UI.Op.id d@@71)) TInt $h@@101)) )))
(assert (forall ((|a#96#0#0| T@U) (|a#96#1#0| Int) ) (!  (=> (= (type |a#96#0#0|) (SeqType BoxType)) (= (|#UI.Op.GetEndOp| (Lit |a#96#0#0|) (LitInt |a#96#1#0|)) (Lit (|#UI.Op.GetEndOp| |a#96#0#0| |a#96#1#0|)))) :qid |UIsdfy.36:16| :skolemid |2135| :pattern ( (|#UI.Op.GetEndOp| (Lit |a#96#0#0|) (LitInt |a#96#1#0|))) )))
(assert (forall ((|a#97#0#0| T@U) (|a#97#1#0| Int) ) (!  (=> (= (type |a#97#0#0|) (SeqType BoxType)) (= (UI.Op.value (|#UI.Op.GetEndOp| |a#97#0#0| |a#97#1#0|)) |a#97#0#0|)) :qid |UIsdfy.36:16| :skolemid |2136| :pattern ( (|#UI.Op.GetEndOp| |a#97#0#0| |a#97#1#0|)) )))
(assert (forall ((|a#98#0#0| T@U) (|a#98#1#0| Int) ) (!  (=> (= (type |a#98#0#0|) (SeqType BoxType)) (= (UI.Op.id (|#UI.Op.GetEndOp| |a#98#0#0| |a#98#1#0|)) |a#98#1#0|)) :qid |UIsdfy.36:16| :skolemid |2137| :pattern ( (|#UI.Op.GetEndOp| |a#98#0#0| |a#98#1#0|)) )))
(assert (forall ((arg0@@458 T@U) (arg1@@185 T@U) ) (! (= (type (|#UI.Op.PutOp| arg0@@458 arg1@@185)) DatatypeTypeType) :qid |funType:#UI.Op.PutOp| :pattern ( (|#UI.Op.PutOp| arg0@@458 arg1@@185)) )))
(assert (forall ((|a#99#0#0| T@U) (|a#99#1#0| T@U) ) (!  (=> (and (= (type |a#99#0#0|) (SeqType BoxType)) (= (type |a#99#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#UI.Op.PutOp| |a#99#0#0| |a#99#1#0|)) |##UI.Op.PutOp|)) :qid |UIsdfy.39:13| :skolemid |2138| :pattern ( (|#UI.Op.PutOp| |a#99#0#0| |a#99#1#0|)) )))
(assert (forall ((d@@72 T@U) ) (!  (=> (= (type d@@72) DatatypeTypeType) (= (UI.Op.PutOp_q d@@72) (= (DatatypeCtorId d@@72) |##UI.Op.PutOp|))) :qid |unknown.0:0| :skolemid |2139| :pattern ( (UI.Op.PutOp_q d@@72)) )))
(assert (forall ((d@@73 T@U) ) (!  (=> (and (= (type d@@73) DatatypeTypeType) (UI.Op.PutOp_q d@@73)) (exists ((|a#100#0#0| T@U) (|a#100#1#0| T@U) ) (!  (and (and (= (type |a#100#0#0|) (SeqType BoxType)) (= (type |a#100#1#0|) (SeqType BoxType))) (= d@@73 (|#UI.Op.PutOp| |a#100#0#0| |a#100#1#0|))) :qid |UIsdfy.39:13| :skolemid |2140| :no-pattern (type |a#100#0#0|) :no-pattern (type |a#100#1#0|) :no-pattern (U_2_int |a#100#0#0|) :no-pattern (U_2_bool |a#100#0#0|) :no-pattern (U_2_int |a#100#1#0|) :no-pattern (U_2_bool |a#100#1#0|) ))) :qid |unknown.0:0| :skolemid |2141| :pattern ( (UI.Op.PutOp_q d@@73)) )))
(assert (forall ((|a#101#0#0| T@U) (|a#101#1#0| T@U) ) (!  (=> (and (= (type |a#101#0#0|) (SeqType BoxType)) (= (type |a#101#1#0|) (SeqType BoxType))) (= ($Is (|#UI.Op.PutOp| |a#101#0#0| |a#101#1#0|) Tclass.UI.Op)  (and ($Is |a#101#0#0| Tclass.KeyType.Key) ($Is |a#101#1#0| Tclass.ValueType.Value)))) :qid |UIsdfy.39:13| :skolemid |2142| :pattern ( ($Is (|#UI.Op.PutOp| |a#101#0#0| |a#101#1#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#102#0#0| T@U) (|a#102#1#0| T@U) ($h@@102 T@U) ) (!  (=> (and (and (and (= (type |a#102#0#0|) (SeqType BoxType)) (= (type |a#102#1#0|) (SeqType BoxType))) (= (type $h@@102) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@102)) (= ($IsAlloc (|#UI.Op.PutOp| |a#102#0#0| |a#102#1#0|) Tclass.UI.Op $h@@102)  (and ($IsAlloc |a#102#0#0| Tclass.KeyType.Key $h@@102) ($IsAlloc |a#102#1#0| Tclass.ValueType.Value $h@@102)))) :qid |UIsdfy.39:13| :skolemid |2143| :pattern ( ($IsAlloc (|#UI.Op.PutOp| |a#102#0#0| |a#102#1#0|) Tclass.UI.Op $h@@102)) )))
(assert (forall ((d@@74 T@U) ($h@@103 T@U) ) (!  (=> (and (and (= (type d@@74) DatatypeTypeType) (= (type $h@@103) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@103) (and (UI.Op.PutOp_q d@@74) ($IsAlloc d@@74 Tclass.UI.Op $h@@103)))) ($IsAlloc (UI.Op.key d@@74) Tclass.KeyType.Key $h@@103)) :qid |unknown.0:0| :skolemid |2144| :pattern ( ($IsAlloc (UI.Op.key d@@74) Tclass.KeyType.Key $h@@103)) )))
(assert (forall ((d@@75 T@U) ($h@@104 T@U) ) (!  (=> (and (and (= (type d@@75) DatatypeTypeType) (= (type $h@@104) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@104) (and (UI.Op.PutOp_q d@@75) ($IsAlloc d@@75 Tclass.UI.Op $h@@104)))) ($IsAlloc (UI.Op.value d@@75) Tclass.ValueType.Value $h@@104)) :qid |unknown.0:0| :skolemid |2145| :pattern ( ($IsAlloc (UI.Op.value d@@75) Tclass.ValueType.Value $h@@104)) )))
(assert (forall ((|a#103#0#0| T@U) (|a#103#1#0| T@U) ) (!  (=> (and (= (type |a#103#0#0|) (SeqType BoxType)) (= (type |a#103#1#0|) (SeqType BoxType))) (= (|#UI.Op.PutOp| (Lit |a#103#0#0|) (Lit |a#103#1#0|)) (Lit (|#UI.Op.PutOp| |a#103#0#0| |a#103#1#0|)))) :qid |UIsdfy.39:13| :skolemid |2146| :pattern ( (|#UI.Op.PutOp| (Lit |a#103#0#0|) (Lit |a#103#1#0|))) )))
(assert (forall ((|a#104#0#0| T@U) (|a#104#1#0| T@U) ) (!  (=> (and (= (type |a#104#0#0|) (SeqType BoxType)) (= (type |a#104#1#0|) (SeqType BoxType))) (= (UI.Op.key (|#UI.Op.PutOp| |a#104#0#0| |a#104#1#0|)) |a#104#0#0|)) :qid |UIsdfy.39:13| :skolemid |2147| :pattern ( (|#UI.Op.PutOp| |a#104#0#0| |a#104#1#0|)) )))
(assert (forall ((|a#105#0#0| T@U) (|a#105#1#0| T@U) ) (!  (=> (and (= (type |a#105#0#0|) (SeqType BoxType)) (= (type |a#105#1#0|) (SeqType BoxType))) (= (UI.Op.value (|#UI.Op.PutOp| |a#105#0#0| |a#105#1#0|)) |a#105#1#0|)) :qid |UIsdfy.39:13| :skolemid |2148| :pattern ( (|#UI.Op.PutOp| |a#105#0#0| |a#105#1#0|)) )))
(assert (forall ((arg0@@459 T@U) (arg1@@186 T@U) (arg2@@110 T@U) ) (! (= (type (|#UI.Op.SuccOp| arg0@@459 arg1@@186 arg2@@110)) DatatypeTypeType) :qid |funType:#UI.Op.SuccOp| :pattern ( (|#UI.Op.SuccOp| arg0@@459 arg1@@186 arg2@@110)) )))
(assert (forall ((|a#106#0#0| T@U) (|a#106#1#0| T@U) (|a#106#2#0| T@U) ) (!  (=> (and (and (= (type |a#106#0#0|) DatatypeTypeType) (= (type |a#106#1#0|) (SeqType BoxType))) (= (type |a#106#2#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#UI.Op.SuccOp| |a#106#0#0| |a#106#1#0| |a#106#2#0|)) |##UI.Op.SuccOp|)) :qid |UIsdfy.41:14| :skolemid |2149| :pattern ( (|#UI.Op.SuccOp| |a#106#0#0| |a#106#1#0| |a#106#2#0|)) )))
(assert (forall ((d@@76 T@U) ) (!  (=> (= (type d@@76) DatatypeTypeType) (= (UI.Op.SuccOp_q d@@76) (= (DatatypeCtorId d@@76) |##UI.Op.SuccOp|))) :qid |unknown.0:0| :skolemid |2150| :pattern ( (UI.Op.SuccOp_q d@@76)) )))
(assert (forall ((d@@77 T@U) ) (!  (=> (and (= (type d@@77) DatatypeTypeType) (UI.Op.SuccOp_q d@@77)) (exists ((|a#107#0#0| T@U) (|a#107#1#0| T@U) (|a#107#2#0| T@U) ) (!  (and (and (and (= (type |a#107#0#0|) DatatypeTypeType) (= (type |a#107#1#0|) (SeqType BoxType))) (= (type |a#107#2#0|) DatatypeTypeType)) (= d@@77 (|#UI.Op.SuccOp| |a#107#0#0| |a#107#1#0| |a#107#2#0|))) :qid |UIsdfy.41:14| :skolemid |2151| :no-pattern (type |a#107#0#0|) :no-pattern (type |a#107#1#0|) :no-pattern (type |a#107#2#0|) :no-pattern (U_2_int |a#107#0#0|) :no-pattern (U_2_bool |a#107#0#0|) :no-pattern (U_2_int |a#107#1#0|) :no-pattern (U_2_bool |a#107#1#0|) :no-pattern (U_2_int |a#107#2#0|) :no-pattern (U_2_bool |a#107#2#0|) ))) :qid |unknown.0:0| :skolemid |2152| :pattern ( (UI.Op.SuccOp_q d@@77)) )))
(assert (forall ((|a#108#0#0| T@U) (|a#108#1#0| T@U) (|a#108#2#0| T@U) ) (!  (=> (and (and (= (type |a#108#0#0|) DatatypeTypeType) (= (type |a#108#1#0|) (SeqType BoxType))) (= (type |a#108#2#0|) DatatypeTypeType)) (= ($Is (|#UI.Op.SuccOp| |a#108#0#0| |a#108#1#0| |a#108#2#0|) Tclass.UI.Op)  (and (and ($Is |a#108#0#0| Tclass.UI.RangeStart) ($Is |a#108#1#0| (TSeq Tclass.UI.SuccResult))) ($Is |a#108#2#0| Tclass.UI.RangeEnd)))) :qid |UIsdfy.41:14| :skolemid |2153| :pattern ( ($Is (|#UI.Op.SuccOp| |a#108#0#0| |a#108#1#0| |a#108#2#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#109#0#0| T@U) (|a#109#1#0| T@U) (|a#109#2#0| T@U) ($h@@105 T@U) ) (!  (=> (and (and (and (and (= (type |a#109#0#0|) DatatypeTypeType) (= (type |a#109#1#0|) (SeqType BoxType))) (= (type |a#109#2#0|) DatatypeTypeType)) (= (type $h@@105) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@105)) (= ($IsAlloc (|#UI.Op.SuccOp| |a#109#0#0| |a#109#1#0| |a#109#2#0|) Tclass.UI.Op $h@@105)  (and (and ($IsAlloc |a#109#0#0| Tclass.UI.RangeStart $h@@105) ($IsAlloc |a#109#1#0| (TSeq Tclass.UI.SuccResult) $h@@105)) ($IsAlloc |a#109#2#0| Tclass.UI.RangeEnd $h@@105)))) :qid |UIsdfy.41:14| :skolemid |2154| :pattern ( ($IsAlloc (|#UI.Op.SuccOp| |a#109#0#0| |a#109#1#0| |a#109#2#0|) Tclass.UI.Op $h@@105)) )))
(assert (forall ((arg0@@460 T@U) ) (! (= (type (UI.Op.start arg0@@460)) DatatypeTypeType) :qid |funType:UI.Op.start| :pattern ( (UI.Op.start arg0@@460)) )))
(assert (forall ((d@@78 T@U) ($h@@106 T@U) ) (!  (=> (and (and (= (type d@@78) DatatypeTypeType) (= (type $h@@106) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@106) (and (UI.Op.SuccOp_q d@@78) ($IsAlloc d@@78 Tclass.UI.Op $h@@106)))) ($IsAlloc (UI.Op.start d@@78) Tclass.UI.RangeStart $h@@106)) :qid |unknown.0:0| :skolemid |2155| :pattern ( ($IsAlloc (UI.Op.start d@@78) Tclass.UI.RangeStart $h@@106)) )))
(assert (forall ((arg0@@461 T@U) ) (! (= (type (UI.Op.results arg0@@461)) (SeqType BoxType)) :qid |funType:UI.Op.results| :pattern ( (UI.Op.results arg0@@461)) )))
(assert (forall ((d@@79 T@U) ($h@@107 T@U) ) (!  (=> (and (and (= (type d@@79) DatatypeTypeType) (= (type $h@@107) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@107) (and (UI.Op.SuccOp_q d@@79) ($IsAlloc d@@79 Tclass.UI.Op $h@@107)))) ($IsAlloc (UI.Op.results d@@79) (TSeq Tclass.UI.SuccResult) $h@@107)) :qid |unknown.0:0| :skolemid |2156| :pattern ( ($IsAlloc (UI.Op.results d@@79) (TSeq Tclass.UI.SuccResult) $h@@107)) )))
(assert (forall ((arg0@@462 T@U) ) (! (= (type (UI.Op.end arg0@@462)) DatatypeTypeType) :qid |funType:UI.Op.end| :pattern ( (UI.Op.end arg0@@462)) )))
(assert (forall ((d@@80 T@U) ($h@@108 T@U) ) (!  (=> (and (and (= (type d@@80) DatatypeTypeType) (= (type $h@@108) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@108) (and (UI.Op.SuccOp_q d@@80) ($IsAlloc d@@80 Tclass.UI.Op $h@@108)))) ($IsAlloc (UI.Op.end d@@80) Tclass.UI.RangeEnd $h@@108)) :qid |unknown.0:0| :skolemid |2157| :pattern ( ($IsAlloc (UI.Op.end d@@80) Tclass.UI.RangeEnd $h@@108)) )))
(assert (forall ((|a#110#0#0| T@U) (|a#110#1#0| T@U) (|a#110#2#0| T@U) ) (!  (=> (and (and (= (type |a#110#0#0|) DatatypeTypeType) (= (type |a#110#1#0|) (SeqType BoxType))) (= (type |a#110#2#0|) DatatypeTypeType)) (= (|#UI.Op.SuccOp| (Lit |a#110#0#0|) (Lit |a#110#1#0|) (Lit |a#110#2#0|)) (Lit (|#UI.Op.SuccOp| |a#110#0#0| |a#110#1#0| |a#110#2#0|)))) :qid |UIsdfy.41:14| :skolemid |2158| :pattern ( (|#UI.Op.SuccOp| (Lit |a#110#0#0|) (Lit |a#110#1#0|) (Lit |a#110#2#0|))) )))
(assert (forall ((|a#111#0#0| T@U) (|a#111#1#0| T@U) (|a#111#2#0| T@U) ) (!  (=> (and (and (= (type |a#111#0#0|) DatatypeTypeType) (= (type |a#111#1#0|) (SeqType BoxType))) (= (type |a#111#2#0|) DatatypeTypeType)) (= (UI.Op.start (|#UI.Op.SuccOp| |a#111#0#0| |a#111#1#0| |a#111#2#0|)) |a#111#0#0|)) :qid |UIsdfy.41:14| :skolemid |2159| :pattern ( (|#UI.Op.SuccOp| |a#111#0#0| |a#111#1#0| |a#111#2#0|)) )))
(assert (forall ((|a#112#0#0| T@U) (|a#112#1#0| T@U) (|a#112#2#0| T@U) ) (!  (=> (and (and (= (type |a#112#0#0|) DatatypeTypeType) (= (type |a#112#1#0|) (SeqType BoxType))) (= (type |a#112#2#0|) DatatypeTypeType)) (< (DtRank |a#112#0#0|) (DtRank (|#UI.Op.SuccOp| |a#112#0#0| |a#112#1#0| |a#112#2#0|)))) :qid |UIsdfy.41:14| :skolemid |2160| :pattern ( (|#UI.Op.SuccOp| |a#112#0#0| |a#112#1#0| |a#112#2#0|)) )))
(assert (forall ((|a#113#0#0| T@U) (|a#113#1#0| T@U) (|a#113#2#0| T@U) ) (!  (=> (and (and (= (type |a#113#0#0|) DatatypeTypeType) (= (type |a#113#1#0|) (SeqType BoxType))) (= (type |a#113#2#0|) DatatypeTypeType)) (= (UI.Op.results (|#UI.Op.SuccOp| |a#113#0#0| |a#113#1#0| |a#113#2#0|)) |a#113#1#0|)) :qid |UIsdfy.41:14| :skolemid |2161| :pattern ( (|#UI.Op.SuccOp| |a#113#0#0| |a#113#1#0| |a#113#2#0|)) )))
(assert (forall ((|a#114#0#0| T@U) (|a#114#1#0| T@U) (|a#114#2#0| T@U) (i@@26 Int) ) (!  (=> (and (and (and (= (type |a#114#0#0|) DatatypeTypeType) (= (type |a#114#1#0|) (SeqType BoxType))) (= (type |a#114#2#0|) DatatypeTypeType)) (and (<= 0 i@@26) (< i@@26 (|Seq#Length| |a#114#1#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#114#1#0| i@@26))) (DtRank (|#UI.Op.SuccOp| |a#114#0#0| |a#114#1#0| |a#114#2#0|)))) :qid |UIsdfy.41:14| :skolemid |2162| :pattern ( (|Seq#Index| |a#114#1#0| i@@26) (|#UI.Op.SuccOp| |a#114#0#0| |a#114#1#0| |a#114#2#0|)) )))
(assert (forall ((|a#115#0#0| T@U) (|a#115#1#0| T@U) (|a#115#2#0| T@U) ) (!  (=> (and (and (= (type |a#115#0#0|) DatatypeTypeType) (= (type |a#115#1#0|) (SeqType BoxType))) (= (type |a#115#2#0|) DatatypeTypeType)) (< (|Seq#Rank| |a#115#1#0|) (DtRank (|#UI.Op.SuccOp| |a#115#0#0| |a#115#1#0| |a#115#2#0|)))) :qid |UIsdfy.41:14| :skolemid |2163| :pattern ( (|#UI.Op.SuccOp| |a#115#0#0| |a#115#1#0| |a#115#2#0|)) )))
(assert (forall ((|a#116#0#0| T@U) (|a#116#1#0| T@U) (|a#116#2#0| T@U) ) (!  (=> (and (and (= (type |a#116#0#0|) DatatypeTypeType) (= (type |a#116#1#0|) (SeqType BoxType))) (= (type |a#116#2#0|) DatatypeTypeType)) (= (UI.Op.end (|#UI.Op.SuccOp| |a#116#0#0| |a#116#1#0| |a#116#2#0|)) |a#116#2#0|)) :qid |UIsdfy.41:14| :skolemid |2164| :pattern ( (|#UI.Op.SuccOp| |a#116#0#0| |a#116#1#0| |a#116#2#0|)) )))
(assert (forall ((|a#117#0#0| T@U) (|a#117#1#0| T@U) (|a#117#2#0| T@U) ) (!  (=> (and (and (= (type |a#117#0#0|) DatatypeTypeType) (= (type |a#117#1#0|) (SeqType BoxType))) (= (type |a#117#2#0|) DatatypeTypeType)) (< (DtRank |a#117#2#0|) (DtRank (|#UI.Op.SuccOp| |a#117#0#0| |a#117#1#0| |a#117#2#0|)))) :qid |UIsdfy.41:14| :skolemid |2165| :pattern ( (|#UI.Op.SuccOp| |a#117#0#0| |a#117#1#0| |a#117#2#0|)) )))
(assert (forall ((d@@81 T@U) ) (!  (=> (and (= (type d@@81) DatatypeTypeType) (|$IsA#UI.Op| d@@81)) (or (or (or (or (or (or (or (or (or (UI.Op.NoOp_q d@@81) (UI.Op.SyncOp_q d@@81)) (UI.Op.CrashOp_q d@@81)) (UI.Op.PushSyncOp_q d@@81)) (UI.Op.PopSyncOp_q d@@81)) (UI.Op.GetOp_q d@@81)) (UI.Op.GetBeginOp_q d@@81)) (UI.Op.GetEndOp_q d@@81)) (UI.Op.PutOp_q d@@81)) (UI.Op.SuccOp_q d@@81))) :qid |unknown.0:0| :skolemid |2166| :pattern ( (|$IsA#UI.Op| d@@81)) )))
(assert (forall ((d@@82 T@U) ) (!  (=> (and (= (type d@@82) DatatypeTypeType) ($Is d@@82 Tclass.UI.Op)) (or (or (or (or (or (or (or (or (or (UI.Op.NoOp_q d@@82) (UI.Op.SyncOp_q d@@82)) (UI.Op.CrashOp_q d@@82)) (UI.Op.PushSyncOp_q d@@82)) (UI.Op.PopSyncOp_q d@@82)) (UI.Op.GetOp_q d@@82)) (UI.Op.GetBeginOp_q d@@82)) (UI.Op.GetEndOp_q d@@82)) (UI.Op.PutOp_q d@@82)) (UI.Op.SuccOp_q d@@82))) :qid |unknown.0:0| :skolemid |2167| :pattern ( (UI.Op.SuccOp_q d@@82) ($Is d@@82 Tclass.UI.Op)) :pattern ( (UI.Op.PutOp_q d@@82) ($Is d@@82 Tclass.UI.Op)) :pattern ( (UI.Op.GetEndOp_q d@@82) ($Is d@@82 Tclass.UI.Op)) :pattern ( (UI.Op.GetBeginOp_q d@@82) ($Is d@@82 Tclass.UI.Op)) :pattern ( (UI.Op.GetOp_q d@@82) ($Is d@@82 Tclass.UI.Op)) :pattern ( (UI.Op.PopSyncOp_q d@@82) ($Is d@@82 Tclass.UI.Op)) :pattern ( (UI.Op.PushSyncOp_q d@@82) ($Is d@@82 Tclass.UI.Op)) :pattern ( (UI.Op.CrashOp_q d@@82) ($Is d@@82 Tclass.UI.Op)) :pattern ( (UI.Op.SyncOp_q d@@82) ($Is d@@82 Tclass.UI.Op)) :pattern ( (UI.Op.NoOp_q d@@82) ($Is d@@82 Tclass.UI.Op)) )))
(assert (forall ((a@@142 T@U) (b@@79 T@U) ) (!  (=> (and (and (= (type a@@142) DatatypeTypeType) (= (type b@@79) DatatypeTypeType)) (and (UI.Op.NoOp_q a@@142) (UI.Op.NoOp_q b@@79))) (= (|UI.Op#Equal| a@@142 b@@79) true)) :qid |unknown.0:0| :skolemid |2168| :pattern ( (|UI.Op#Equal| a@@142 b@@79) (UI.Op.NoOp_q a@@142)) :pattern ( (|UI.Op#Equal| a@@142 b@@79) (UI.Op.NoOp_q b@@79)) )))
(assert (forall ((a@@143 T@U) (b@@80 T@U) ) (!  (=> (and (and (= (type a@@143) DatatypeTypeType) (= (type b@@80) DatatypeTypeType)) (and (UI.Op.SyncOp_q a@@143) (UI.Op.SyncOp_q b@@80))) (= (|UI.Op#Equal| a@@143 b@@80) true)) :qid |unknown.0:0| :skolemid |2169| :pattern ( (|UI.Op#Equal| a@@143 b@@80) (UI.Op.SyncOp_q a@@143)) :pattern ( (|UI.Op#Equal| a@@143 b@@80) (UI.Op.SyncOp_q b@@80)) )))
(assert (forall ((a@@144 T@U) (b@@81 T@U) ) (!  (=> (and (and (= (type a@@144) DatatypeTypeType) (= (type b@@81) DatatypeTypeType)) (and (UI.Op.CrashOp_q a@@144) (UI.Op.CrashOp_q b@@81))) (= (|UI.Op#Equal| a@@144 b@@81) true)) :qid |unknown.0:0| :skolemid |2170| :pattern ( (|UI.Op#Equal| a@@144 b@@81) (UI.Op.CrashOp_q a@@144)) :pattern ( (|UI.Op#Equal| a@@144 b@@81) (UI.Op.CrashOp_q b@@81)) )))
(assert (forall ((a@@145 T@U) (b@@82 T@U) ) (!  (=> (and (and (= (type a@@145) DatatypeTypeType) (= (type b@@82) DatatypeTypeType)) (and (UI.Op.PushSyncOp_q a@@145) (UI.Op.PushSyncOp_q b@@82))) (= (|UI.Op#Equal| a@@145 b@@82) (= (UI.Op.id a@@145) (UI.Op.id b@@82)))) :qid |unknown.0:0| :skolemid |2171| :pattern ( (|UI.Op#Equal| a@@145 b@@82) (UI.Op.PushSyncOp_q a@@145)) :pattern ( (|UI.Op#Equal| a@@145 b@@82) (UI.Op.PushSyncOp_q b@@82)) )))
(assert (forall ((a@@146 T@U) (b@@83 T@U) ) (!  (=> (and (and (= (type a@@146) DatatypeTypeType) (= (type b@@83) DatatypeTypeType)) (and (UI.Op.PopSyncOp_q a@@146) (UI.Op.PopSyncOp_q b@@83))) (= (|UI.Op#Equal| a@@146 b@@83) (= (UI.Op.id a@@146) (UI.Op.id b@@83)))) :qid |unknown.0:0| :skolemid |2172| :pattern ( (|UI.Op#Equal| a@@146 b@@83) (UI.Op.PopSyncOp_q a@@146)) :pattern ( (|UI.Op#Equal| a@@146 b@@83) (UI.Op.PopSyncOp_q b@@83)) )))
(assert (forall ((a@@147 T@U) (b@@84 T@U) ) (!  (=> (and (and (= (type a@@147) DatatypeTypeType) (= (type b@@84) DatatypeTypeType)) (and (UI.Op.GetOp_q a@@147) (UI.Op.GetOp_q b@@84))) (= (|UI.Op#Equal| a@@147 b@@84)  (and (|Seq#Equal| (UI.Op.key a@@147) (UI.Op.key b@@84)) (|Seq#Equal| (UI.Op.value a@@147) (UI.Op.value b@@84))))) :qid |unknown.0:0| :skolemid |2173| :pattern ( (|UI.Op#Equal| a@@147 b@@84) (UI.Op.GetOp_q a@@147)) :pattern ( (|UI.Op#Equal| a@@147 b@@84) (UI.Op.GetOp_q b@@84)) )))
(assert (forall ((a@@148 T@U) (b@@85 T@U) ) (!  (=> (and (and (= (type a@@148) DatatypeTypeType) (= (type b@@85) DatatypeTypeType)) (and (UI.Op.GetBeginOp_q a@@148) (UI.Op.GetBeginOp_q b@@85))) (= (|UI.Op#Equal| a@@148 b@@85)  (and (|Seq#Equal| (UI.Op.key a@@148) (UI.Op.key b@@85)) (= (UI.Op.id a@@148) (UI.Op.id b@@85))))) :qid |unknown.0:0| :skolemid |2174| :pattern ( (|UI.Op#Equal| a@@148 b@@85) (UI.Op.GetBeginOp_q a@@148)) :pattern ( (|UI.Op#Equal| a@@148 b@@85) (UI.Op.GetBeginOp_q b@@85)) )))
(assert (forall ((a@@149 T@U) (b@@86 T@U) ) (!  (=> (and (and (= (type a@@149) DatatypeTypeType) (= (type b@@86) DatatypeTypeType)) (and (UI.Op.GetEndOp_q a@@149) (UI.Op.GetEndOp_q b@@86))) (= (|UI.Op#Equal| a@@149 b@@86)  (and (|Seq#Equal| (UI.Op.value a@@149) (UI.Op.value b@@86)) (= (UI.Op.id a@@149) (UI.Op.id b@@86))))) :qid |unknown.0:0| :skolemid |2175| :pattern ( (|UI.Op#Equal| a@@149 b@@86) (UI.Op.GetEndOp_q a@@149)) :pattern ( (|UI.Op#Equal| a@@149 b@@86) (UI.Op.GetEndOp_q b@@86)) )))
(assert (forall ((a@@150 T@U) (b@@87 T@U) ) (!  (=> (and (and (= (type a@@150) DatatypeTypeType) (= (type b@@87) DatatypeTypeType)) (and (UI.Op.PutOp_q a@@150) (UI.Op.PutOp_q b@@87))) (= (|UI.Op#Equal| a@@150 b@@87)  (and (|Seq#Equal| (UI.Op.key a@@150) (UI.Op.key b@@87)) (|Seq#Equal| (UI.Op.value a@@150) (UI.Op.value b@@87))))) :qid |unknown.0:0| :skolemid |2176| :pattern ( (|UI.Op#Equal| a@@150 b@@87) (UI.Op.PutOp_q a@@150)) :pattern ( (|UI.Op#Equal| a@@150 b@@87) (UI.Op.PutOp_q b@@87)) )))
(assert (forall ((a@@151 T@U) (b@@88 T@U) ) (!  (=> (and (and (= (type a@@151) DatatypeTypeType) (= (type b@@88) DatatypeTypeType)) (and (UI.Op.SuccOp_q a@@151) (UI.Op.SuccOp_q b@@88))) (= (|UI.Op#Equal| a@@151 b@@88)  (and (and (|UI.RangeStart#Equal| (UI.Op.start a@@151) (UI.Op.start b@@88)) (|Seq#Equal| (UI.Op.results a@@151) (UI.Op.results b@@88))) (|UI.RangeEnd#Equal| (UI.Op.end a@@151) (UI.Op.end b@@88))))) :qid |unknown.0:0| :skolemid |2177| :pattern ( (|UI.Op#Equal| a@@151 b@@88) (UI.Op.SuccOp_q a@@151)) :pattern ( (|UI.Op#Equal| a@@151 b@@88) (UI.Op.SuccOp_q b@@88)) )))
(assert (forall ((a@@152 T@U) (b@@89 T@U) ) (!  (=> (and (= (type a@@152) DatatypeTypeType) (= (type b@@89) DatatypeTypeType)) (= (|UI.Op#Equal| a@@152 b@@89) (= a@@152 b@@89))) :qid |unknown.0:0| :skolemid |2178| :pattern ( (|UI.Op#Equal| a@@152 b@@89)) )))
(assert (= (type Tclass.UI.__default) TyType))
(assert (= (Tag Tclass.UI.__default) Tagclass.UI.__default))
(assert (= (TagFamily Tclass.UI.__default) tytagFamily$_default))
(assert (forall ((bx@@168 T@U) ) (!  (=> (and (= (type bx@@168) BoxType) ($IsBox bx@@168 Tclass.UI.__default)) (and (= ($Box ($Unbox refType bx@@168)) bx@@168) ($Is ($Unbox refType bx@@168) Tclass.UI.__default))) :qid |unknown.0:0| :skolemid |2179| :pattern ( ($IsBox bx@@168 Tclass.UI.__default)) )))
(assert (forall (($o@@17 T@U) ) (!  (=> (= (type $o@@17) refType) (= ($Is $o@@17 Tclass.UI.__default)  (or (= $o@@17 null) (= (dtype $o@@17) Tclass.UI.__default)))) :qid |unknown.0:0| :skolemid |2180| :pattern ( ($Is $o@@17 Tclass.UI.__default)) )))
(assert (forall (($o@@18 T@U) ($h@@109 T@U) ) (!  (=> (and (= (type $o@@18) refType) (= (type $h@@109) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@18 Tclass.UI.__default $h@@109)  (or (= $o@@18 null) (U_2_bool (MapType1Select (MapType0Select $h@@109 $o@@18) alloc))))) :qid |unknown.0:0| :skolemid |2181| :pattern ( ($IsAlloc $o@@18 Tclass.UI.__default $h@@109)) )))
(assert (= (type Tclass.SeqComparison.__default) TyType))
(assert (= (Tag Tclass.SeqComparison.__default) Tagclass.SeqComparison.__default))
(assert (= (TagFamily Tclass.SeqComparison.__default) tytagFamily$_default))
(assert (forall ((bx@@169 T@U) ) (!  (=> (and (= (type bx@@169) BoxType) ($IsBox bx@@169 Tclass.SeqComparison.__default)) (and (= ($Box ($Unbox refType bx@@169)) bx@@169) ($Is ($Unbox refType bx@@169) Tclass.SeqComparison.__default))) :qid |unknown.0:0| :skolemid |2182| :pattern ( ($IsBox bx@@169 Tclass.SeqComparison.__default)) )))
(assert (forall (($o@@19 T@U) ) (!  (=> (= (type $o@@19) refType) (= ($Is $o@@19 Tclass.SeqComparison.__default)  (or (= $o@@19 null) (= (dtype $o@@19) Tclass.SeqComparison.__default)))) :qid |unknown.0:0| :skolemid |2183| :pattern ( ($Is $o@@19 Tclass.SeqComparison.__default)) )))
(assert (forall (($o@@20 T@U) ($h@@110 T@U) ) (!  (=> (and (= (type $o@@20) refType) (= (type $h@@110) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@20 Tclass.SeqComparison.__default $h@@110)  (or (= $o@@20 null) (U_2_bool (MapType1Select (MapType0Select $h@@110 $o@@20) alloc))))) :qid |unknown.0:0| :skolemid |2184| :pattern ( ($IsAlloc $o@@20 Tclass.SeqComparison.__default $h@@110)) )))
(assert (forall (($ly T@U) (|a#0@@1| T@U) (|b#0@@1| T@U) ) (!  (=> (and (and (= (type $ly) LayerTypeType) (= (type |a#0@@1|) (SeqType BoxType))) (= (type |b#0@@1|) (SeqType BoxType))) (= (SeqComparison.__default.lte ($LS $ly) |a#0@@1| |b#0@@1|) (SeqComparison.__default.lte $ly |a#0@@1| |b#0@@1|))) :qid |SeqComparisonsdfy.14:23| :skolemid |2185| :pattern ( (SeqComparison.__default.lte ($LS $ly) |a#0@@1| |b#0@@1|)) )))
(assert  (and (forall ((arg0@@463 T@U) ) (! (= (type (AsFuelBottom arg0@@463)) LayerTypeType) :qid |funType:AsFuelBottom| :pattern ( (AsFuelBottom arg0@@463)) )) (= (type $LZ) LayerTypeType)))
(assert (forall (($ly@@0 T@U) (|a#0@@2| T@U) (|b#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@0) LayerTypeType) (= (type |a#0@@2|) (SeqType BoxType))) (= (type |b#0@@2|) (SeqType BoxType))) (= (SeqComparison.__default.lte $ly@@0 |a#0@@2| |b#0@@2|) (SeqComparison.__default.lte $LZ |a#0@@2| |b#0@@2|))) :qid |SeqComparisonsdfy.14:23| :skolemid |2186| :pattern ( (SeqComparison.__default.lte (AsFuelBottom $ly@@0) |a#0@@2| |b#0@@2|)) )))
(assert  (=> true (forall (($ly@@1 T@U) (|a#0@@3| T@U) (|b#0@@3| T@U) ) (!  (=> (and (and (and (= (type $ly@@1) LayerTypeType) (= (type |a#0@@3|) (SeqType BoxType))) (= (type |b#0@@3|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| |a#0@@3| |b#0@@3|) (and ($Is |a#0@@3| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@3| (TSeq Tclass.NativeTypes.byte))))) true) :qid |SeqComparisonsdfy.14:23| :skolemid |2187| :pattern ( (SeqComparison.__default.lte $ly@@1 |a#0@@3| |b#0@@3|)) ))))
(assert (forall (($ly@@2 T@U) (|a#0@@4| T@U) (|b#0@@4| T@U) ) (!  (=> (and (and (and (= (type $ly@@2) LayerTypeType) (= (type |a#0@@4|) (SeqType BoxType))) (= (type |b#0@@4|) (SeqType BoxType))) (and ($Is |a#0@@4| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@4| (TSeq Tclass.NativeTypes.byte)))) (= (|SeqComparison.__default.lte#requires| $ly@@2 |a#0@@4| |b#0@@4|) true)) :qid |SeqComparisonsdfy.14:23| :skolemid |2188| :pattern ( (|SeqComparison.__default.lte#requires| $ly@@2 |a#0@@4| |b#0@@4|)) )))
(assert  (=> true (forall (($ly@@3 T@U) (|a#0@@5| T@U) (|b#0@@5| T@U) ) (!  (=> (and (and (and (= (type $ly@@3) LayerTypeType) (= (type |a#0@@5|) (SeqType BoxType))) (= (type |b#0@@5|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| |a#0@@5| |b#0@@5|) (and ($Is |a#0@@5| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@5| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| |a#0@@5|) (LitInt 0))) (=> (not (= (|Seq#Length| |b#0@@5|) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |b#0@@5| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@5| (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |a#0@@5| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@5| (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (|Seq#Drop| |a#0@@5| (LitInt 1)) (|Seq#Drop| |b#0@@5| (LitInt 1))))))) (= (SeqComparison.__default.lte ($LS $ly@@3) |a#0@@5| |b#0@@5|) (ite (= (|Seq#Length| |a#0@@5|) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@5|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| |a#0@@5| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@5| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@5| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@5| (LitInt 0))))) false (SeqComparison.__default.lte $ly@@3 (|Seq#Drop| |a#0@@5| (LitInt 1)) (|Seq#Drop| |b#0@@5| (LitInt 1)))))))))) :qid |SeqComparisonsdfy.14:23| :skolemid |2189| :pattern ( (SeqComparison.__default.lte ($LS $ly@@3) |a#0@@5| |b#0@@5|)) ))))
(assert  (=> true (forall (($ly@@4 T@U) (|a#0@@6| T@U) (|b#0@@6| T@U) ) (!  (=> (and (and (and (= (type $ly@@4) LayerTypeType) (= (type |a#0@@6|) (SeqType BoxType))) (= (type |b#0@@6|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| (Lit |a#0@@6|) |b#0@@6|) (and ($Is |a#0@@6| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@6| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@6|)) (LitInt 0))) (=> (not (= (|Seq#Length| |b#0@@6|) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |b#0@@6| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@6|) (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@6|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@6| (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (Lit (|Seq#Drop| (Lit |a#0@@6|) (LitInt 1))) (|Seq#Drop| |b#0@@6| (LitInt 1))))))) (= (SeqComparison.__default.lte ($LS $ly@@4) (Lit |a#0@@6|) |b#0@@6|) (ite (= (|Seq#Length| (Lit |a#0@@6|)) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@6|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@6|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@6| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@6| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@6|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@4) (Lit (|Seq#Drop| (Lit |a#0@@6|) (LitInt 1))) (|Seq#Drop| |b#0@@6| (LitInt 1)))))))))) :qid |SeqComparisonsdfy.14:23| :weight 3 :skolemid |2190| :pattern ( (SeqComparison.__default.lte ($LS $ly@@4) (Lit |a#0@@6|) |b#0@@6|)) ))))
(assert  (=> true (forall (($ly@@5 T@U) (|a#0@@7| T@U) (|b#0@@7| T@U) ) (!  (=> (and (and (and (= (type $ly@@5) LayerTypeType) (= (type |a#0@@7|) (SeqType BoxType))) (= (type |b#0@@7|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| (Lit |a#0@@7|) (Lit |b#0@@7|)) (and ($Is |a#0@@7| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@7| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@7|)) (LitInt 0))) (=> (not (= (|Seq#Length| (Lit |b#0@@7|)) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@7|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@7|) (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@7|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@7|) (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (Lit (|Seq#Drop| (Lit |a#0@@7|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@7|) (LitInt 1)))))))) (= (SeqComparison.__default.lte ($LS $ly@@5) (Lit |a#0@@7|) (Lit |b#0@@7|)) (ite (= (|Seq#Length| (Lit |a#0@@7|)) (LitInt 0)) true (ite (= (|Seq#Length| (Lit |b#0@@7|)) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@7|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@7|) (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@7|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@7|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@5) (Lit (|Seq#Drop| (Lit |a#0@@7|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@7|) (LitInt 1))))))))))) :qid |SeqComparisonsdfy.14:23| :weight 3 :skolemid |2191| :pattern ( (SeqComparison.__default.lte ($LS $ly@@5) (Lit |a#0@@7|) (Lit |b#0@@7|))) ))))
(assert  (=> true (forall ((|a#0@@8| T@U) (|b#0@@8| T@U) ) (!  (=> (and (and (= (type |a#0@@8|) (SeqType BoxType)) (= (type |b#0@@8|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| |a#0@@8| |b#0@@8|) (and ($Is |a#0@@8| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@8| (TSeq Tclass.NativeTypes.byte))))) true) :qid |SeqComparisonsdfy.30:16| :skolemid |2192| :pattern ( (SeqComparison.__default.lt |a#0@@8| |b#0@@8|)) ))))
(assert (forall ((|a#0@@9| T@U) (|b#0@@9| T@U) ) (!  (=> (and (and (= (type |a#0@@9|) (SeqType BoxType)) (= (type |b#0@@9|) (SeqType BoxType))) (and ($Is |a#0@@9| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@9| (TSeq Tclass.NativeTypes.byte)))) (= (|SeqComparison.__default.lt#requires| |a#0@@9| |b#0@@9|) true)) :qid |SeqComparisonsdfy.30:16| :skolemid |2193| :pattern ( (|SeqComparison.__default.lt#requires| |a#0@@9| |b#0@@9|)) )))
(assert (= (type StartFuel_SeqComparison._default.lte) LayerTypeType))
(assert  (=> true (forall ((|a#0@@10| T@U) (|b#0@@10| T@U) ) (!  (=> (and (and (= (type |a#0@@10|) (SeqType BoxType)) (= (type |b#0@@10|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| |a#0@@10| |b#0@@10|) (and ($Is |a#0@@10| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@10| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| |a#0@@10| |b#0@@10|) (= (SeqComparison.__default.lt |a#0@@10| |b#0@@10|)  (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@10| |b#0@@10|) (not (|Seq#Equal| |a#0@@10| |b#0@@10|)))))) :qid |SeqComparisonsdfy.30:16| :skolemid |2194| :pattern ( (SeqComparison.__default.lt |a#0@@10| |b#0@@10|)) ))))
(assert  (=> true (forall ((|a#0@@11| T@U) (|b#0@@11| T@U) ) (!  (=> (and (and (= (type |a#0@@11|) (SeqType BoxType)) (= (type |b#0@@11|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| (Lit |a#0@@11|) (Lit |b#0@@11|)) (and ($Is |a#0@@11| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@11| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| (Lit |a#0@@11|) (Lit |b#0@@11|)) (= (SeqComparison.__default.lt (Lit |a#0@@11|) (Lit |b#0@@11|))  (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@11|) (Lit |b#0@@11|)) (not (|Seq#Equal| |a#0@@11| |b#0@@11|)))))) :qid |SeqComparisonsdfy.30:16| :weight 3 :skolemid |2195| :pattern ( (SeqComparison.__default.lt (Lit |a#0@@11|) (Lit |b#0@@11|))) ))))
(assert (= (type |#Options.Option.None|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#Options.Option.None|) |##Options.Option.None|))
(assert (forall ((d@@83 T@U) ) (!  (=> (= (type d@@83) DatatypeTypeType) (= (Options.Option.None_q d@@83) (= (DatatypeCtorId d@@83) |##Options.Option.None|))) :qid |unknown.0:0| :skolemid |2196| :pattern ( (Options.Option.None_q d@@83)) )))
(assert (forall ((d@@84 T@U) ) (!  (=> (and (= (type d@@84) DatatypeTypeType) (Options.Option.None_q d@@84)) (= d@@84 |#Options.Option.None|)) :qid |unknown.0:0| :skolemid |2197| :pattern ( (Options.Option.None_q d@@84)) )))
(assert (forall ((arg0@@464 T@U) ) (! (= (type (Tclass.Options.Option arg0@@464)) TyType) :qid |funType:Tclass.Options.Option| :pattern ( (Tclass.Options.Option arg0@@464)) )))
(assert (forall ((Options.Option$V T@U) ) (!  (=> (= (type Options.Option$V) TyType) (and (= (Tag (Tclass.Options.Option Options.Option$V)) Tagclass.Options.Option) (= (TagFamily (Tclass.Options.Option Options.Option$V)) tytagFamily$Option))) :qid |unknown.0:0| :skolemid |2198| :pattern ( (Tclass.Options.Option Options.Option$V)) )))
(assert (forall ((arg0@@465 T@U) ) (! (= (type (Tclass.Options.Option_0 arg0@@465)) TyType) :qid |funType:Tclass.Options.Option_0| :pattern ( (Tclass.Options.Option_0 arg0@@465)) )))
(assert (forall ((Options.Option$V@@0 T@U) ) (!  (=> (= (type Options.Option$V@@0) TyType) (= (Tclass.Options.Option_0 (Tclass.Options.Option Options.Option$V@@0)) Options.Option$V@@0)) :qid |unknown.0:0| :skolemid |2199| :pattern ( (Tclass.Options.Option Options.Option$V@@0)) )))
(assert (forall ((Options.Option$V@@1 T@U) (bx@@170 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@1) TyType) (= (type bx@@170) BoxType)) ($IsBox bx@@170 (Tclass.Options.Option Options.Option$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@170)) bx@@170) ($Is ($Unbox DatatypeTypeType bx@@170) (Tclass.Options.Option Options.Option$V@@1)))) :qid |unknown.0:0| :skolemid |2200| :pattern ( ($IsBox bx@@170 (Tclass.Options.Option Options.Option$V@@1))) )))
(assert (forall ((Options.Option$V@@2 T@U) ) (!  (=> (= (type Options.Option$V@@2) TyType) ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) :qid |unknown.0:0| :skolemid |2201| :pattern ( ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) )))
(assert (forall ((Options.Option$V@@3 T@U) ($h@@111 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@3) TyType) (= (type $h@@111) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@111)) ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@111)) :qid |unknown.0:0| :skolemid |2202| :pattern ( ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@111)) )))
(assert (= |#Options.Option.None| (Lit |#Options.Option.None|)))
(assert (forall ((arg0@@466 T@U) ) (! (= (type (|#Options.Option.Some| arg0@@466)) DatatypeTypeType) :qid |funType:#Options.Option.Some| :pattern ( (|#Options.Option.Some| arg0@@466)) )))
(assert (forall ((|a#5#0#0@@1| T@U) ) (!  (=> (= (type |a#5#0#0@@1|) BoxType) (= (DatatypeCtorId (|#Options.Option.Some| |a#5#0#0@@1|)) |##Options.Option.Some|)) :qid |Optionsdfy.5:36| :skolemid |2203| :pattern ( (|#Options.Option.Some| |a#5#0#0@@1|)) )))
(assert (forall ((d@@85 T@U) ) (!  (=> (= (type d@@85) DatatypeTypeType) (= (Options.Option.Some_q d@@85) (= (DatatypeCtorId d@@85) |##Options.Option.Some|))) :qid |unknown.0:0| :skolemid |2204| :pattern ( (Options.Option.Some_q d@@85)) )))
(assert (forall ((d@@86 T@U) ) (!  (=> (and (= (type d@@86) DatatypeTypeType) (Options.Option.Some_q d@@86)) (exists ((|a#6#0#0@@1| T@U) ) (!  (and (= (type |a#6#0#0@@1|) BoxType) (= d@@86 (|#Options.Option.Some| |a#6#0#0@@1|))) :qid |Optionsdfy.5:36| :skolemid |2205| :no-pattern (type |a#6#0#0@@1|) :no-pattern (U_2_int |a#6#0#0@@1|) :no-pattern (U_2_bool |a#6#0#0@@1|) ))) :qid |unknown.0:0| :skolemid |2206| :pattern ( (Options.Option.Some_q d@@86)) )))
(assert (forall ((Options.Option$V@@4 T@U) (|a#7#0#0@@1| T@U) ) (!  (=> (and (= (type Options.Option$V@@4) TyType) (= (type |a#7#0#0@@1|) BoxType)) (= ($Is (|#Options.Option.Some| |a#7#0#0@@1|) (Tclass.Options.Option Options.Option$V@@4)) ($IsBox |a#7#0#0@@1| Options.Option$V@@4))) :qid |unknown.0:0| :skolemid |2207| :pattern ( ($Is (|#Options.Option.Some| |a#7#0#0@@1|) (Tclass.Options.Option Options.Option$V@@4))) )))
(assert (forall ((Options.Option$V@@5 T@U) (|a#8#0#0@@1| T@U) ($h@@112 T@U) ) (!  (=> (and (and (and (= (type Options.Option$V@@5) TyType) (= (type |a#8#0#0@@1|) BoxType)) (= (type $h@@112) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@112)) (= ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@1|) (Tclass.Options.Option Options.Option$V@@5) $h@@112) ($IsAllocBox |a#8#0#0@@1| Options.Option$V@@5 $h@@112))) :qid |unknown.0:0| :skolemid |2208| :pattern ( ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@1|) (Tclass.Options.Option Options.Option$V@@5) $h@@112)) )))
(assert (forall ((arg0@@467 T@U) ) (! (= (type (Options.Option.value arg0@@467)) BoxType) :qid |funType:Options.Option.value| :pattern ( (Options.Option.value arg0@@467)) )))
(assert (forall ((d@@87 T@U) (Options.Option$V@@6 T@U) ($h@@113 T@U) ) (!  (=> (and (and (and (= (type d@@87) DatatypeTypeType) (= (type Options.Option$V@@6) TyType)) (= (type $h@@113) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@113) (and (Options.Option.Some_q d@@87) ($IsAlloc d@@87 (Tclass.Options.Option Options.Option$V@@6) $h@@113)))) ($IsAllocBox (Options.Option.value d@@87) Options.Option$V@@6 $h@@113)) :qid |unknown.0:0| :skolemid |2209| :pattern ( ($IsAllocBox (Options.Option.value d@@87) Options.Option$V@@6 $h@@113)) )))
(assert (forall ((|a#9#0#0@@0| T@U) ) (!  (=> (= (type |a#9#0#0@@0|) BoxType) (= (|#Options.Option.Some| (Lit |a#9#0#0@@0|)) (Lit (|#Options.Option.Some| |a#9#0#0@@0|)))) :qid |Optionsdfy.5:36| :skolemid |2210| :pattern ( (|#Options.Option.Some| (Lit |a#9#0#0@@0|))) )))
(assert (forall ((|a#10#0#0@@0| T@U) ) (!  (=> (= (type |a#10#0#0@@0|) BoxType) (= (Options.Option.value (|#Options.Option.Some| |a#10#0#0@@0|)) |a#10#0#0@@0|)) :qid |Optionsdfy.5:36| :skolemid |2211| :pattern ( (|#Options.Option.Some| |a#10#0#0@@0|)) )))
(assert (forall ((|a#11#0#0@@0| T@U) ) (!  (=> (= (type |a#11#0#0@@0|) BoxType) (< (BoxRank |a#11#0#0@@0|) (DtRank (|#Options.Option.Some| |a#11#0#0@@0|)))) :qid |Optionsdfy.5:36| :skolemid |2212| :pattern ( (|#Options.Option.Some| |a#11#0#0@@0|)) )))
(assert (forall ((d@@88 T@U) ) (!  (=> (and (= (type d@@88) DatatypeTypeType) (|$IsA#Options.Option| d@@88)) (or (Options.Option.None_q d@@88) (Options.Option.Some_q d@@88))) :qid |unknown.0:0| :skolemid |2213| :pattern ( (|$IsA#Options.Option| d@@88)) )))
(assert (forall ((Options.Option$V@@7 T@U) (d@@89 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@7) TyType) (= (type d@@89) DatatypeTypeType)) ($Is d@@89 (Tclass.Options.Option Options.Option$V@@7))) (or (Options.Option.None_q d@@89) (Options.Option.Some_q d@@89))) :qid |unknown.0:0| :skolemid |2214| :pattern ( (Options.Option.Some_q d@@89) ($Is d@@89 (Tclass.Options.Option Options.Option$V@@7))) :pattern ( (Options.Option.None_q d@@89) ($Is d@@89 (Tclass.Options.Option Options.Option$V@@7))) )))
(assert (forall ((a@@153 T@U) (b@@90 T@U) ) (!  (=> (and (and (= (type a@@153) DatatypeTypeType) (= (type b@@90) DatatypeTypeType)) (and (Options.Option.None_q a@@153) (Options.Option.None_q b@@90))) (= (|Options.Option#Equal| a@@153 b@@90) true)) :qid |unknown.0:0| :skolemid |2215| :pattern ( (|Options.Option#Equal| a@@153 b@@90) (Options.Option.None_q a@@153)) :pattern ( (|Options.Option#Equal| a@@153 b@@90) (Options.Option.None_q b@@90)) )))
(assert (forall ((a@@154 T@U) (b@@91 T@U) ) (!  (=> (and (and (= (type a@@154) DatatypeTypeType) (= (type b@@91) DatatypeTypeType)) (and (Options.Option.Some_q a@@154) (Options.Option.Some_q b@@91))) (= (|Options.Option#Equal| a@@154 b@@91) (= (Options.Option.value a@@154) (Options.Option.value b@@91)))) :qid |unknown.0:0| :skolemid |2216| :pattern ( (|Options.Option#Equal| a@@154 b@@91) (Options.Option.Some_q a@@154)) :pattern ( (|Options.Option#Equal| a@@154 b@@91) (Options.Option.Some_q b@@91)) )))
(assert (forall ((a@@155 T@U) (b@@92 T@U) ) (!  (=> (and (= (type a@@155) DatatypeTypeType) (= (type b@@92) DatatypeTypeType)) (= (|Options.Option#Equal| a@@155 b@@92) (= a@@155 b@@92))) :qid |unknown.0:0| :skolemid |2217| :pattern ( (|Options.Option#Equal| a@@155 b@@92)) )))
(assert (= (type Tclass.Options.__default) TyType))
(assert (= (Tag Tclass.Options.__default) Tagclass.Options.__default))
(assert (= (TagFamily Tclass.Options.__default) tytagFamily$_default))
(assert (forall ((bx@@171 T@U) ) (!  (=> (and (= (type bx@@171) BoxType) ($IsBox bx@@171 Tclass.Options.__default)) (and (= ($Box ($Unbox refType bx@@171)) bx@@171) ($Is ($Unbox refType bx@@171) Tclass.Options.__default))) :qid |unknown.0:0| :skolemid |2218| :pattern ( ($IsBox bx@@171 Tclass.Options.__default)) )))
(assert (forall (($o@@21 T@U) ) (!  (=> (= (type $o@@21) refType) (= ($Is $o@@21 Tclass.Options.__default)  (or (= $o@@21 null) (= (dtype $o@@21) Tclass.Options.__default)))) :qid |unknown.0:0| :skolemid |2219| :pattern ( ($Is $o@@21 Tclass.Options.__default)) )))
(assert (forall (($o@@22 T@U) ($h@@114 T@U) ) (!  (=> (and (= (type $o@@22) refType) (= (type $h@@114) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@22 Tclass.Options.__default $h@@114)  (or (= $o@@22 null) (U_2_bool (MapType1Select (MapType0Select $h@@114 $o@@22) alloc))))) :qid |unknown.0:0| :skolemid |2220| :pattern ( ($IsAlloc $o@@22 Tclass.Options.__default $h@@114)) )))
(assert (forall ((arg0@@468 T@U) (arg1@@187 T@U) (arg2@@111 T@U) (arg3@@76 T@U) (arg4@@59 T@U) ) (! (= (type (Options.__default.MapOption arg0@@468 arg1@@187 arg2@@111 arg3@@76 arg4@@59)) DatatypeTypeType) :qid |funType:Options.__default.MapOption| :pattern ( (Options.__default.MapOption arg0@@468 arg1@@187 arg2@@111 arg3@@76 arg4@@59)) )))
(assert (forall ((Options._default.MapOption$V0 T@U) (Options._default.MapOption$V1 T@U) ($h0 T@U) ($h1 T@U) (|opt#0| T@U) (|f#0@@71| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.MapOption$V0) TyType) (= (type Options._default.MapOption$V1) TyType)) (= (type $h0) (MapType0Type refType MapType1Type))) (= (type $h1) (MapType0Type refType MapType1Type))) (= (type |opt#0|) DatatypeTypeType)) (= (type |f#0@@71|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |opt#0| |f#0@@71|) (and ($Is |opt#0| (Tclass.Options.Option Options._default.MapOption$V0)) ($Is |f#0@@71| (Tclass._System.___hFunc1 Options._default.MapOption$V0 Options._default.MapOption$V1))))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1)))) (forall (($o@@23 T@U) ($f T@U) ) (! (let ((alpha@@6 (FieldTypeInv0 (type $f)))) (=> (and (and (= (type $o@@23) refType) (= (type $f) (FieldType alpha@@6))) (and (not (= $o@@23 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0|) (Reads1 Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |f#0@@71| (Options.Option.value |opt#0|)) (|Set#Empty| BoxType)) ($Box $o@@23))))) (= (MapType1Select (MapType0Select $h0 $o@@23) $f) (MapType1Select (MapType0Select $h1 $o@@23) $f)))) :qid |unknown.0:0| :skolemid |2221| :no-pattern (type $o@@23) :no-pattern (type $f) :no-pattern (U_2_int $o@@23) :no-pattern (U_2_bool $o@@23) :no-pattern (U_2_int $f) :no-pattern (U_2_bool $f) ))) (= (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |opt#0| |f#0@@71|) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1 |opt#0| |f#0@@71|))) :qid |unknown.0:0| :skolemid |2222| :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1 |opt#0| |f#0@@71|)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@0 T@U) (Options._default.MapOption$V1@@0 T@U) ($Heap T@U) (|opt#0@@0| T@U) (|f#0@@72| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@0) TyType) (= (type Options._default.MapOption$V1@@0) TyType)) (= (type $Heap) (MapType0Type refType MapType1Type))) (= (type |opt#0@@0|) DatatypeTypeType)) (= (type |f#0@@72|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@72|) (and (and (and ($IsGoodHeap $Heap) ($Is |opt#0@@0| (Tclass.Options.Option Options._default.MapOption$V0@@0))) ($Is |f#0@@72| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0))) (=> (Options.Option.Some_q |opt#0@@0|) (Requires1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |f#0@@72| (Options.Option.value |opt#0@@0|)))))) (and (and (= (Options.Option.Some_q |opt#0@@0|) (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@72|))) (=> (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@72|)) (= (Options.Option.value (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@72|)) (Apply1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |f#0@@72| (Options.Option.value |opt#0@@0|))))) ($Is (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@72|) (Tclass.Options.Option Options._default.MapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |2223| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@72|)) ))))
(assert (forall ((Options._default.MapOption$V0@@1 T@U) (Options._default.MapOption$V1@@1 T@U) ($Heap@@0 T@U) (|opt#0@@1| T@U) (|f#0@@73| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@1) TyType) (= (type Options._default.MapOption$V1@@1) TyType)) (= (type $Heap@@0) (MapType0Type refType MapType1Type))) (= (type |opt#0@@1|) DatatypeTypeType)) (= (type |f#0@@73|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@0) ($Is |opt#0@@1| (Tclass.Options.Option Options._default.MapOption$V0@@1))) ($Is |f#0@@73| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1)))) (= (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |opt#0@@1| |f#0@@73|)  (=> (Options.Option.Some_q |opt#0@@1|) (Requires1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |f#0@@73| (Options.Option.value |opt#0@@1|))))) :qid |unknown.0:0| :skolemid |2224| :pattern ( (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |opt#0@@1| |f#0@@73|) ($IsGoodHeap $Heap@@0)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@2 T@U) (Options._default.MapOption$V1@@2 T@U) ($Heap@@1 T@U) (|opt#0@@2| T@U) (|f#0@@74| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@2) TyType) (= (type Options._default.MapOption$V1@@2) TyType)) (= (type $Heap@@1) (MapType0Type refType MapType1Type))) (= (type |opt#0@@2|) DatatypeTypeType)) (= (type |f#0@@74|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |opt#0@@2| |f#0@@74|) (and (and (and ($IsGoodHeap $Heap@@1) ($Is |opt#0@@2| (Tclass.Options.Option Options._default.MapOption$V0@@2))) ($Is |f#0@@74| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2))) (=> (Options.Option.Some_q |opt#0@@2|) (Requires1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |f#0@@74| (Options.Option.value |opt#0@@2|)))))) (= (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |opt#0@@2| |f#0@@74|) (ite (Options.Option.None_q |opt#0@@2|) |#Options.Option.None| (let ((|v#0@@3| (Options.Option.value |opt#0@@2|))) (|#Options.Option.Some| (Apply1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |f#0@@74| |v#0@@3|)))))) :qid |unknown.0:0| :skolemid |2225| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |opt#0@@2| |f#0@@74|) ($IsGoodHeap $Heap@@1)) ))))
(assert (forall ((arg0@@469 T@U) (arg1@@188 T@U) (arg2@@112 T@U) (arg3@@77 T@U) (arg4@@60 T@U) ) (! (= (type (Options.__default.FlatMapOption arg0@@469 arg1@@188 arg2@@112 arg3@@77 arg4@@60)) DatatypeTypeType) :qid |funType:Options.__default.FlatMapOption| :pattern ( (Options.__default.FlatMapOption arg0@@469 arg1@@188 arg2@@112 arg3@@77 arg4@@60)) )))
(assert (forall ((Options._default.FlatMapOption$V0 T@U) (Options._default.FlatMapOption$V1 T@U) ($h0@@0 T@U) ($h1@@0 T@U) (|opt#0@@3| T@U) (|f#0@@75| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.FlatMapOption$V0) TyType) (= (type Options._default.FlatMapOption$V1) TyType)) (= (type $h0@@0) (MapType0Type refType MapType1Type))) (= (type $h1@@0) (MapType0Type refType MapType1Type))) (= (type |opt#0@@3|) DatatypeTypeType)) (= (type |f#0@@75|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@0) ($IsGoodHeap $h1@@0)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@0 |opt#0@@3| |f#0@@75|) (and ($Is |opt#0@@3| (Tclass.Options.Option Options._default.FlatMapOption$V0)) ($Is |f#0@@75| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1)))))) (and ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0)))) (forall (($o@@24 T@U) ($f@@0 T@U) ) (! (let ((alpha@@7 (FieldTypeInv0 (type $f@@0)))) (=> (and (and (= (type $o@@24) refType) (= (type $f@@0) (FieldType alpha@@7))) (and (not (= $o@@24 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0@@3|) (Reads1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1) $h0@@0 |f#0@@75| (Options.Option.value |opt#0@@3|)) (|Set#Empty| BoxType)) ($Box $o@@24))))) (= (MapType1Select (MapType0Select $h0@@0 $o@@24) $f@@0) (MapType1Select (MapType0Select $h1@@0 $o@@24) $f@@0)))) :qid |unknown.0:0| :skolemid |2226| :no-pattern (type $o@@24) :no-pattern (type $f@@0) :no-pattern (U_2_int $o@@24) :no-pattern (U_2_bool $o@@24) :no-pattern (U_2_int $f@@0) :no-pattern (U_2_bool $f@@0) ))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@0 |opt#0@@3| |f#0@@75|) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@0 |opt#0@@3| |f#0@@75|))) :qid |unknown.0:0| :skolemid |2227| :pattern ( ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@0 |opt#0@@3| |f#0@@75|)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@0 T@U) (Options._default.FlatMapOption$V1@@0 T@U) ($Heap@@2 T@U) (|opt#0@@4| T@U) (|f#0@@76| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@0) TyType) (= (type Options._default.FlatMapOption$V1@@0) TyType)) (= (type $Heap@@2) (MapType0Type refType MapType1Type))) (= (type |opt#0@@4|) DatatypeTypeType)) (= (type |f#0@@76|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@76|) (and (and (and ($IsGoodHeap $Heap@@2) ($Is |opt#0@@4| (Tclass.Options.Option Options._default.FlatMapOption$V0@@0))) ($Is |f#0@@76| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) (=> (Options.Option.Some_q |opt#0@@4|) (Requires1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@76| (Options.Option.value |opt#0@@4|)))))) (and (and (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@76| (Options.Option.value |opt#0@@4|))))) (Options.Option.Some_q (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@76|))) (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@76| (Options.Option.value |opt#0@@4|))))) (= (Options.Option.value (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@76|)) (Options.Option.value ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@76| (Options.Option.value |opt#0@@4|))))))) ($Is (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@76|) (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |2228| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@76|)) ))))
(assert (forall ((Options._default.FlatMapOption$V0@@1 T@U) (Options._default.FlatMapOption$V1@@1 T@U) ($Heap@@3 T@U) (|opt#0@@5| T@U) (|f#0@@77| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@1) TyType) (= (type Options._default.FlatMapOption$V1@@1) TyType)) (= (type $Heap@@3) (MapType0Type refType MapType1Type))) (= (type |opt#0@@5|) DatatypeTypeType)) (= (type |f#0@@77|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@3) ($Is |opt#0@@5| (Tclass.Options.Option Options._default.FlatMapOption$V0@@1))) ($Is |f#0@@77| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1))))) (= (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@3 |opt#0@@5| |f#0@@77|)  (=> (Options.Option.Some_q |opt#0@@5|) (Requires1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1) $Heap@@3 |f#0@@77| (Options.Option.value |opt#0@@5|))))) :qid |unknown.0:0| :skolemid |2229| :pattern ( (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@3 |opt#0@@5| |f#0@@77|) ($IsGoodHeap $Heap@@3)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@2 T@U) (Options._default.FlatMapOption$V1@@2 T@U) ($Heap@@4 T@U) (|opt#0@@6| T@U) (|f#0@@78| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@2) TyType) (= (type Options._default.FlatMapOption$V1@@2) TyType)) (= (type $Heap@@4) (MapType0Type refType MapType1Type))) (= (type |opt#0@@6|) DatatypeTypeType)) (= (type |f#0@@78|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@4 |opt#0@@6| |f#0@@78|) (and (and (and ($IsGoodHeap $Heap@@4) ($Is |opt#0@@6| (Tclass.Options.Option Options._default.FlatMapOption$V0@@2))) ($Is |f#0@@78| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2)))) (=> (Options.Option.Some_q |opt#0@@6|) (Requires1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@4 |f#0@@78| (Options.Option.value |opt#0@@6|)))))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@4 |opt#0@@6| |f#0@@78|) (ite (Options.Option.None_q |opt#0@@6|) |#Options.Option.None| (let ((|v#0@@4| (Options.Option.value |opt#0@@6|))) ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@4 |f#0@@78| |v#0@@4|)))))) :qid |unknown.0:0| :skolemid |2230| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@4 |opt#0@@6| |f#0@@78|) ($IsGoodHeap $Heap@@4)) ))))
(assert (forall ((arg0@@470 T@U) ) (! (= (type (|#MapSpec.Variables.Variables| arg0@@470)) DatatypeTypeType) :qid |funType:#MapSpec.Variables.Variables| :pattern ( (|#MapSpec.Variables.Variables| arg0@@470)) )))
(assert (forall ((|a#0#0#0@@1| T@U) ) (!  (=> (= (type |a#0#0#0@@1|) (IMapType BoxType BoxType)) (= (DatatypeCtorId (|#MapSpec.Variables.Variables| |a#0#0#0@@1|)) |##MapSpec.Variables.Variables|)) :qid |MapSpecsdfy.25:40| :skolemid |2231| :pattern ( (|#MapSpec.Variables.Variables| |a#0#0#0@@1|)) )))
(assert (forall ((d@@90 T@U) ) (!  (=> (= (type d@@90) DatatypeTypeType) (= (MapSpec.Variables.Variables_q d@@90) (= (DatatypeCtorId d@@90) |##MapSpec.Variables.Variables|))) :qid |unknown.0:0| :skolemid |2232| :pattern ( (MapSpec.Variables.Variables_q d@@90)) )))
(assert (forall ((d@@91 T@U) ) (!  (=> (and (= (type d@@91) DatatypeTypeType) (MapSpec.Variables.Variables_q d@@91)) (exists ((|a#1#0#0@@1| T@U) ) (!  (and (= (type |a#1#0#0@@1|) (IMapType BoxType BoxType)) (= d@@91 (|#MapSpec.Variables.Variables| |a#1#0#0@@1|))) :qid |MapSpecsdfy.25:40| :skolemid |2233| :no-pattern (type |a#1#0#0@@1|) :no-pattern (U_2_int |a#1#0#0@@1|) :no-pattern (U_2_bool |a#1#0#0@@1|) ))) :qid |unknown.0:0| :skolemid |2234| :pattern ( (MapSpec.Variables.Variables_q d@@91)) )))
(assert (forall ((|a#2#0#0@@1| T@U) ) (!  (=> (= (type |a#2#0#0@@1|) (IMapType BoxType BoxType)) (= ($Is (|#MapSpec.Variables.Variables| |a#2#0#0@@1|) Tclass.MapSpec.Variables) ($Is |a#2#0#0@@1| (TIMap Tclass.KeyType.Key Tclass.ValueType.Value)))) :qid |MapSpecsdfy.25:40| :skolemid |2235| :pattern ( ($Is (|#MapSpec.Variables.Variables| |a#2#0#0@@1|) Tclass.MapSpec.Variables)) )))
(assert (forall ((|a#3#0#0@@1| T@U) ($h@@115 T@U) ) (!  (=> (and (and (= (type |a#3#0#0@@1|) (IMapType BoxType BoxType)) (= (type $h@@115) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@115)) (= ($IsAlloc (|#MapSpec.Variables.Variables| |a#3#0#0@@1|) Tclass.MapSpec.Variables $h@@115) ($IsAlloc |a#3#0#0@@1| (TIMap Tclass.KeyType.Key Tclass.ValueType.Value) $h@@115))) :qid |MapSpecsdfy.25:40| :skolemid |2236| :pattern ( ($IsAlloc (|#MapSpec.Variables.Variables| |a#3#0#0@@1|) Tclass.MapSpec.Variables $h@@115)) )))
(assert (forall ((arg0@@471 T@U) ) (! (= (type (MapSpec.Variables.view arg0@@471)) (IMapType BoxType BoxType)) :qid |funType:MapSpec.Variables.view| :pattern ( (MapSpec.Variables.view arg0@@471)) )))
(assert (forall ((d@@92 T@U) ($h@@116 T@U) ) (!  (=> (and (and (= (type d@@92) DatatypeTypeType) (= (type $h@@116) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@116) (and (MapSpec.Variables.Variables_q d@@92) ($IsAlloc d@@92 Tclass.MapSpec.Variables $h@@116)))) ($IsAlloc (MapSpec.Variables.view d@@92) (TIMap Tclass.KeyType.Key Tclass.ValueType.Value) $h@@116)) :qid |unknown.0:0| :skolemid |2237| :pattern ( ($IsAlloc (MapSpec.Variables.view d@@92) (TIMap Tclass.KeyType.Key Tclass.ValueType.Value) $h@@116)) )))
(assert (forall ((|a#4#0#0@@1| T@U) ) (!  (=> (= (type |a#4#0#0@@1|) (IMapType BoxType BoxType)) (= (|#MapSpec.Variables.Variables| (Lit |a#4#0#0@@1|)) (Lit (|#MapSpec.Variables.Variables| |a#4#0#0@@1|)))) :qid |MapSpecsdfy.25:40| :skolemid |2238| :pattern ( (|#MapSpec.Variables.Variables| (Lit |a#4#0#0@@1|))) )))
(assert (forall ((|a#5#0#0@@2| T@U) ) (!  (=> (= (type |a#5#0#0@@2|) (IMapType BoxType BoxType)) (= (MapSpec.Variables.view (|#MapSpec.Variables.Variables| |a#5#0#0@@2|)) |a#5#0#0@@2|)) :qid |MapSpecsdfy.25:40| :skolemid |2239| :pattern ( (|#MapSpec.Variables.Variables| |a#5#0#0@@2|)) )))
(assert (forall ((|a#6#0#0@@2| T@U) (d@@93 T@U) ) (!  (=> (and (and (= (type |a#6#0#0@@2|) (IMapType BoxType BoxType)) (= (type d@@93) DatatypeTypeType)) (U_2_bool (MapType0Select (|IMap#Domain| |a#6#0#0@@2|) ($Box d@@93)))) (< (DtRank d@@93) (DtRank (|#MapSpec.Variables.Variables| |a#6#0#0@@2|)))) :qid |MapSpecsdfy.25:40| :skolemid |2240| :pattern ( (MapType0Select (|IMap#Domain| |a#6#0#0@@2|) ($Box d@@93)) (|#MapSpec.Variables.Variables| |a#6#0#0@@2|)) )))
(assert (forall ((|a#7#0#0@@2| T@U) (bx@@172 T@U) ) (!  (=> (and (and (= (type |a#7#0#0@@2|) (IMapType BoxType BoxType)) (= (type bx@@172) BoxType)) (U_2_bool (MapType0Select (|IMap#Domain| |a#7#0#0@@2|) bx@@172))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |a#7#0#0@@2|) bx@@172))) (DtRank (|#MapSpec.Variables.Variables| |a#7#0#0@@2|)))) :qid |MapSpecsdfy.25:40| :skolemid |2241| :pattern ( (MapType0Select (|IMap#Domain| |a#7#0#0@@2|) bx@@172) (|#MapSpec.Variables.Variables| |a#7#0#0@@2|)) )))
(assert (forall ((d@@94 T@U) ) (!  (=> (and (= (type d@@94) DatatypeTypeType) (|$IsA#MapSpec.Variables| d@@94)) (MapSpec.Variables.Variables_q d@@94)) :qid |unknown.0:0| :skolemid |2242| :pattern ( (|$IsA#MapSpec.Variables| d@@94)) )))
(assert (forall ((d@@95 T@U) ) (!  (=> (and (= (type d@@95) DatatypeTypeType) ($Is d@@95 Tclass.MapSpec.Variables)) (MapSpec.Variables.Variables_q d@@95)) :qid |unknown.0:0| :skolemid |2243| :pattern ( (MapSpec.Variables.Variables_q d@@95) ($Is d@@95 Tclass.MapSpec.Variables)) )))
(assert (forall ((a@@156 T@U) (b@@93 T@U) ) (!  (=> (and (and (= (type a@@156) DatatypeTypeType) (= (type b@@93) DatatypeTypeType)) true) (= (|MapSpec.Variables#Equal| a@@156 b@@93) (|IMap#Equal| (MapSpec.Variables.view a@@156) (MapSpec.Variables.view b@@93)))) :qid |unknown.0:0| :skolemid |2244| :pattern ( (|MapSpec.Variables#Equal| a@@156 b@@93)) )))
(assert (forall ((a@@157 T@U) (b@@94 T@U) ) (!  (=> (and (= (type a@@157) DatatypeTypeType) (= (type b@@94) DatatypeTypeType)) (= (|MapSpec.Variables#Equal| a@@157 b@@94) (= a@@157 b@@94))) :qid |unknown.0:0| :skolemid |2245| :pattern ( (|MapSpec.Variables#Equal| a@@157 b@@94)) )))
(assert (forall ((arg0@@472 T@U) (arg1@@189 T@U) ) (! (= (type (|#MapSpec.Step.QueryStep| arg0@@472 arg1@@189)) DatatypeTypeType) :qid |funType:#MapSpec.Step.QueryStep| :pattern ( (|#MapSpec.Step.QueryStep| arg0@@472 arg1@@189)) )))
(assert (forall ((|a#8#0#0@@2| T@U) (|a#8#1#0@@0| T@U) ) (!  (=> (and (= (type |a#8#0#0@@2|) (SeqType BoxType)) (= (type |a#8#1#0@@0|) (SeqType BoxType))) (= (DatatypeCtorId (|#MapSpec.Step.QueryStep| |a#8#0#0@@2| |a#8#1#0@@0|)) |##MapSpec.Step.QueryStep|)) :qid |MapSpecsdfy.123:19| :skolemid |2246| :pattern ( (|#MapSpec.Step.QueryStep| |a#8#0#0@@2| |a#8#1#0@@0|)) )))
(assert (forall ((d@@96 T@U) ) (!  (=> (= (type d@@96) DatatypeTypeType) (= (MapSpec.Step.QueryStep_q d@@96) (= (DatatypeCtorId d@@96) |##MapSpec.Step.QueryStep|))) :qid |unknown.0:0| :skolemid |2247| :pattern ( (MapSpec.Step.QueryStep_q d@@96)) )))
(assert (forall ((d@@97 T@U) ) (!  (=> (and (= (type d@@97) DatatypeTypeType) (MapSpec.Step.QueryStep_q d@@97)) (exists ((|a#9#0#0@@1| T@U) (|a#9#1#0| T@U) ) (!  (and (and (= (type |a#9#0#0@@1|) (SeqType BoxType)) (= (type |a#9#1#0|) (SeqType BoxType))) (= d@@97 (|#MapSpec.Step.QueryStep| |a#9#0#0@@1| |a#9#1#0|))) :qid |MapSpecsdfy.123:19| :skolemid |2248| :no-pattern (type |a#9#0#0@@1|) :no-pattern (type |a#9#1#0|) :no-pattern (U_2_int |a#9#0#0@@1|) :no-pattern (U_2_bool |a#9#0#0@@1|) :no-pattern (U_2_int |a#9#1#0|) :no-pattern (U_2_bool |a#9#1#0|) ))) :qid |unknown.0:0| :skolemid |2249| :pattern ( (MapSpec.Step.QueryStep_q d@@97)) )))
(assert (forall ((|a#10#0#0@@1| T@U) (|a#10#1#0| T@U) ) (!  (=> (and (= (type |a#10#0#0@@1|) (SeqType BoxType)) (= (type |a#10#1#0|) (SeqType BoxType))) (= ($Is (|#MapSpec.Step.QueryStep| |a#10#0#0@@1| |a#10#1#0|) Tclass.MapSpec.Step)  (and ($Is |a#10#0#0@@1| Tclass.KeyType.Key) ($Is |a#10#1#0| Tclass.ValueType.Value)))) :qid |MapSpecsdfy.123:19| :skolemid |2250| :pattern ( ($Is (|#MapSpec.Step.QueryStep| |a#10#0#0@@1| |a#10#1#0|) Tclass.MapSpec.Step)) )))
(assert (forall ((|a#11#0#0@@1| T@U) (|a#11#1#0| T@U) ($h@@117 T@U) ) (!  (=> (and (and (and (= (type |a#11#0#0@@1|) (SeqType BoxType)) (= (type |a#11#1#0|) (SeqType BoxType))) (= (type $h@@117) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@117)) (= ($IsAlloc (|#MapSpec.Step.QueryStep| |a#11#0#0@@1| |a#11#1#0|) Tclass.MapSpec.Step $h@@117)  (and ($IsAlloc |a#11#0#0@@1| Tclass.KeyType.Key $h@@117) ($IsAlloc |a#11#1#0| Tclass.ValueType.Value $h@@117)))) :qid |MapSpecsdfy.123:19| :skolemid |2251| :pattern ( ($IsAlloc (|#MapSpec.Step.QueryStep| |a#11#0#0@@1| |a#11#1#0|) Tclass.MapSpec.Step $h@@117)) )))
(assert (forall ((arg0@@473 T@U) ) (! (= (type (MapSpec.Step.key arg0@@473)) (SeqType BoxType)) :qid |funType:MapSpec.Step.key| :pattern ( (MapSpec.Step.key arg0@@473)) )))
(assert (forall ((d@@98 T@U) ($h@@118 T@U) ) (!  (=> (and (and (= (type d@@98) DatatypeTypeType) (= (type $h@@118) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@118) (and (MapSpec.Step.QueryStep_q d@@98) ($IsAlloc d@@98 Tclass.MapSpec.Step $h@@118)))) ($IsAlloc (MapSpec.Step.key d@@98) Tclass.KeyType.Key $h@@118)) :qid |unknown.0:0| :skolemid |2252| :pattern ( ($IsAlloc (MapSpec.Step.key d@@98) Tclass.KeyType.Key $h@@118)) )))
(assert (forall ((arg0@@474 T@U) ) (! (= (type (MapSpec.Step.result arg0@@474)) (SeqType BoxType)) :qid |funType:MapSpec.Step.result| :pattern ( (MapSpec.Step.result arg0@@474)) )))
(assert (forall ((d@@99 T@U) ($h@@119 T@U) ) (!  (=> (and (and (= (type d@@99) DatatypeTypeType) (= (type $h@@119) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@119) (and (MapSpec.Step.QueryStep_q d@@99) ($IsAlloc d@@99 Tclass.MapSpec.Step $h@@119)))) ($IsAlloc (MapSpec.Step.result d@@99) Tclass.ValueType.Value $h@@119)) :qid |unknown.0:0| :skolemid |2253| :pattern ( ($IsAlloc (MapSpec.Step.result d@@99) Tclass.ValueType.Value $h@@119)) )))
(assert (forall ((|a#12#0#0| T@U) (|a#12#1#0| T@U) ) (!  (=> (and (= (type |a#12#0#0|) (SeqType BoxType)) (= (type |a#12#1#0|) (SeqType BoxType))) (= (|#MapSpec.Step.QueryStep| (Lit |a#12#0#0|) (Lit |a#12#1#0|)) (Lit (|#MapSpec.Step.QueryStep| |a#12#0#0| |a#12#1#0|)))) :qid |MapSpecsdfy.123:19| :skolemid |2254| :pattern ( (|#MapSpec.Step.QueryStep| (Lit |a#12#0#0|) (Lit |a#12#1#0|))) )))
(assert (forall ((|a#13#0#0| T@U) (|a#13#1#0| T@U) ) (!  (=> (and (= (type |a#13#0#0|) (SeqType BoxType)) (= (type |a#13#1#0|) (SeqType BoxType))) (= (MapSpec.Step.key (|#MapSpec.Step.QueryStep| |a#13#0#0| |a#13#1#0|)) |a#13#0#0|)) :qid |MapSpecsdfy.123:19| :skolemid |2255| :pattern ( (|#MapSpec.Step.QueryStep| |a#13#0#0| |a#13#1#0|)) )))
(assert (forall ((|a#14#0#0@@0| T@U) (|a#14#1#0@@0| T@U) ) (!  (=> (and (= (type |a#14#0#0@@0|) (SeqType BoxType)) (= (type |a#14#1#0@@0|) (SeqType BoxType))) (= (MapSpec.Step.result (|#MapSpec.Step.QueryStep| |a#14#0#0@@0| |a#14#1#0@@0|)) |a#14#1#0@@0|)) :qid |MapSpecsdfy.123:19| :skolemid |2256| :pattern ( (|#MapSpec.Step.QueryStep| |a#14#0#0@@0| |a#14#1#0@@0|)) )))
(assert (forall ((arg0@@475 T@U) (arg1@@190 T@U) ) (! (= (type (|#MapSpec.Step.WriteStep| arg0@@475 arg1@@190)) DatatypeTypeType) :qid |funType:#MapSpec.Step.WriteStep| :pattern ( (|#MapSpec.Step.WriteStep| arg0@@475 arg1@@190)) )))
(assert (forall ((|a#15#0#0@@0| T@U) (|a#15#1#0@@0| T@U) ) (!  (=> (and (= (type |a#15#0#0@@0|) (SeqType BoxType)) (= (type |a#15#1#0@@0|) (SeqType BoxType))) (= (DatatypeCtorId (|#MapSpec.Step.WriteStep| |a#15#0#0@@0| |a#15#1#0@@0|)) |##MapSpec.Step.WriteStep|)) :qid |MapSpecsdfy.124:19| :skolemid |2257| :pattern ( (|#MapSpec.Step.WriteStep| |a#15#0#0@@0| |a#15#1#0@@0|)) )))
(assert (forall ((d@@100 T@U) ) (!  (=> (= (type d@@100) DatatypeTypeType) (= (MapSpec.Step.WriteStep_q d@@100) (= (DatatypeCtorId d@@100) |##MapSpec.Step.WriteStep|))) :qid |unknown.0:0| :skolemid |2258| :pattern ( (MapSpec.Step.WriteStep_q d@@100)) )))
(assert (forall ((d@@101 T@U) ) (!  (=> (and (= (type d@@101) DatatypeTypeType) (MapSpec.Step.WriteStep_q d@@101)) (exists ((|a#16#0#0@@0| T@U) (|a#16#1#0@@0| T@U) ) (!  (and (and (= (type |a#16#0#0@@0|) (SeqType BoxType)) (= (type |a#16#1#0@@0|) (SeqType BoxType))) (= d@@101 (|#MapSpec.Step.WriteStep| |a#16#0#0@@0| |a#16#1#0@@0|))) :qid |MapSpecsdfy.124:19| :skolemid |2259| :no-pattern (type |a#16#0#0@@0|) :no-pattern (type |a#16#1#0@@0|) :no-pattern (U_2_int |a#16#0#0@@0|) :no-pattern (U_2_bool |a#16#0#0@@0|) :no-pattern (U_2_int |a#16#1#0@@0|) :no-pattern (U_2_bool |a#16#1#0@@0|) ))) :qid |unknown.0:0| :skolemid |2260| :pattern ( (MapSpec.Step.WriteStep_q d@@101)) )))
(assert (forall ((|a#17#0#0@@1| T@U) (|a#17#1#0@@0| T@U) ) (!  (=> (and (= (type |a#17#0#0@@1|) (SeqType BoxType)) (= (type |a#17#1#0@@0|) (SeqType BoxType))) (= ($Is (|#MapSpec.Step.WriteStep| |a#17#0#0@@1| |a#17#1#0@@0|) Tclass.MapSpec.Step)  (and ($Is |a#17#0#0@@1| Tclass.KeyType.Key) ($Is |a#17#1#0@@0| Tclass.ValueType.Value)))) :qid |MapSpecsdfy.124:19| :skolemid |2261| :pattern ( ($Is (|#MapSpec.Step.WriteStep| |a#17#0#0@@1| |a#17#1#0@@0|) Tclass.MapSpec.Step)) )))
(assert (forall ((|a#18#0#0@@1| T@U) (|a#18#1#0@@0| T@U) ($h@@120 T@U) ) (!  (=> (and (and (and (= (type |a#18#0#0@@1|) (SeqType BoxType)) (= (type |a#18#1#0@@0|) (SeqType BoxType))) (= (type $h@@120) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@120)) (= ($IsAlloc (|#MapSpec.Step.WriteStep| |a#18#0#0@@1| |a#18#1#0@@0|) Tclass.MapSpec.Step $h@@120)  (and ($IsAlloc |a#18#0#0@@1| Tclass.KeyType.Key $h@@120) ($IsAlloc |a#18#1#0@@0| Tclass.ValueType.Value $h@@120)))) :qid |MapSpecsdfy.124:19| :skolemid |2262| :pattern ( ($IsAlloc (|#MapSpec.Step.WriteStep| |a#18#0#0@@1| |a#18#1#0@@0|) Tclass.MapSpec.Step $h@@120)) )))
(assert (forall ((d@@102 T@U) ($h@@121 T@U) ) (!  (=> (and (and (= (type d@@102) DatatypeTypeType) (= (type $h@@121) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@121) (and (MapSpec.Step.WriteStep_q d@@102) ($IsAlloc d@@102 Tclass.MapSpec.Step $h@@121)))) ($IsAlloc (MapSpec.Step.key d@@102) Tclass.KeyType.Key $h@@121)) :qid |unknown.0:0| :skolemid |2263| :pattern ( ($IsAlloc (MapSpec.Step.key d@@102) Tclass.KeyType.Key $h@@121)) )))
(assert (forall ((arg0@@476 T@U) ) (! (= (type (MapSpec.Step.new__value arg0@@476)) (SeqType BoxType)) :qid |funType:MapSpec.Step.new__value| :pattern ( (MapSpec.Step.new__value arg0@@476)) )))
(assert (forall ((d@@103 T@U) ($h@@122 T@U) ) (!  (=> (and (and (= (type d@@103) DatatypeTypeType) (= (type $h@@122) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@122) (and (MapSpec.Step.WriteStep_q d@@103) ($IsAlloc d@@103 Tclass.MapSpec.Step $h@@122)))) ($IsAlloc (MapSpec.Step.new__value d@@103) Tclass.ValueType.Value $h@@122)) :qid |unknown.0:0| :skolemid |2264| :pattern ( ($IsAlloc (MapSpec.Step.new__value d@@103) Tclass.ValueType.Value $h@@122)) )))
(assert (forall ((|a#19#0#0@@1| T@U) (|a#19#1#0@@0| T@U) ) (!  (=> (and (= (type |a#19#0#0@@1|) (SeqType BoxType)) (= (type |a#19#1#0@@0|) (SeqType BoxType))) (= (|#MapSpec.Step.WriteStep| (Lit |a#19#0#0@@1|) (Lit |a#19#1#0@@0|)) (Lit (|#MapSpec.Step.WriteStep| |a#19#0#0@@1| |a#19#1#0@@0|)))) :qid |MapSpecsdfy.124:19| :skolemid |2265| :pattern ( (|#MapSpec.Step.WriteStep| (Lit |a#19#0#0@@1|) (Lit |a#19#1#0@@0|))) )))
(assert (forall ((|a#20#0#0@@1| T@U) (|a#20#1#0@@0| T@U) ) (!  (=> (and (= (type |a#20#0#0@@1|) (SeqType BoxType)) (= (type |a#20#1#0@@0|) (SeqType BoxType))) (= (MapSpec.Step.key (|#MapSpec.Step.WriteStep| |a#20#0#0@@1| |a#20#1#0@@0|)) |a#20#0#0@@1|)) :qid |MapSpecsdfy.124:19| :skolemid |2266| :pattern ( (|#MapSpec.Step.WriteStep| |a#20#0#0@@1| |a#20#1#0@@0|)) )))
(assert (forall ((|a#21#0#0@@1| T@U) (|a#21#1#0@@0| T@U) ) (!  (=> (and (= (type |a#21#0#0@@1|) (SeqType BoxType)) (= (type |a#21#1#0@@0|) (SeqType BoxType))) (= (MapSpec.Step.new__value (|#MapSpec.Step.WriteStep| |a#21#0#0@@1| |a#21#1#0@@0|)) |a#21#1#0@@0|)) :qid |MapSpecsdfy.124:19| :skolemid |2267| :pattern ( (|#MapSpec.Step.WriteStep| |a#21#0#0@@1| |a#21#1#0@@0|)) )))
(assert (forall ((arg0@@477 T@U) (arg1@@191 T@U) (arg2@@113 T@U) ) (! (= (type (|#MapSpec.Step.SuccStep| arg0@@477 arg1@@191 arg2@@113)) DatatypeTypeType) :qid |funType:#MapSpec.Step.SuccStep| :pattern ( (|#MapSpec.Step.SuccStep| arg0@@477 arg1@@191 arg2@@113)) )))
(assert (forall ((|a#22#0#0@@1| T@U) (|a#22#1#0@@0| T@U) (|a#22#2#0| T@U) ) (!  (=> (and (and (= (type |a#22#0#0@@1|) DatatypeTypeType) (= (type |a#22#1#0@@0|) (SeqType BoxType))) (= (type |a#22#2#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#MapSpec.Step.SuccStep| |a#22#0#0@@1| |a#22#1#0@@0| |a#22#2#0|)) |##MapSpec.Step.SuccStep|)) :qid |MapSpecsdfy.125:18| :skolemid |2268| :pattern ( (|#MapSpec.Step.SuccStep| |a#22#0#0@@1| |a#22#1#0@@0| |a#22#2#0|)) )))
(assert (forall ((d@@104 T@U) ) (!  (=> (= (type d@@104) DatatypeTypeType) (= (MapSpec.Step.SuccStep_q d@@104) (= (DatatypeCtorId d@@104) |##MapSpec.Step.SuccStep|))) :qid |unknown.0:0| :skolemid |2269| :pattern ( (MapSpec.Step.SuccStep_q d@@104)) )))
(assert (forall ((d@@105 T@U) ) (!  (=> (and (= (type d@@105) DatatypeTypeType) (MapSpec.Step.SuccStep_q d@@105)) (exists ((|a#23#0#0@@0| T@U) (|a#23#1#0| T@U) (|a#23#2#0| T@U) ) (!  (and (and (and (= (type |a#23#0#0@@0|) DatatypeTypeType) (= (type |a#23#1#0|) (SeqType BoxType))) (= (type |a#23#2#0|) DatatypeTypeType)) (= d@@105 (|#MapSpec.Step.SuccStep| |a#23#0#0@@0| |a#23#1#0| |a#23#2#0|))) :qid |MapSpecsdfy.125:18| :skolemid |2270| :no-pattern (type |a#23#0#0@@0|) :no-pattern (type |a#23#1#0|) :no-pattern (type |a#23#2#0|) :no-pattern (U_2_int |a#23#0#0@@0|) :no-pattern (U_2_bool |a#23#0#0@@0|) :no-pattern (U_2_int |a#23#1#0|) :no-pattern (U_2_bool |a#23#1#0|) :no-pattern (U_2_int |a#23#2#0|) :no-pattern (U_2_bool |a#23#2#0|) ))) :qid |unknown.0:0| :skolemid |2271| :pattern ( (MapSpec.Step.SuccStep_q d@@105)) )))
(assert (forall ((|a#24#0#0@@0| T@U) (|a#24#1#0| T@U) (|a#24#2#0| T@U) ) (!  (=> (and (and (= (type |a#24#0#0@@0|) DatatypeTypeType) (= (type |a#24#1#0|) (SeqType BoxType))) (= (type |a#24#2#0|) DatatypeTypeType)) (= ($Is (|#MapSpec.Step.SuccStep| |a#24#0#0@@0| |a#24#1#0| |a#24#2#0|) Tclass.MapSpec.Step)  (and (and ($Is |a#24#0#0@@0| Tclass.UI.RangeStart) ($Is |a#24#1#0| (TSeq Tclass.UI.SuccResult))) ($Is |a#24#2#0| Tclass.UI.RangeEnd)))) :qid |MapSpecsdfy.125:18| :skolemid |2272| :pattern ( ($Is (|#MapSpec.Step.SuccStep| |a#24#0#0@@0| |a#24#1#0| |a#24#2#0|) Tclass.MapSpec.Step)) )))
(assert (forall ((|a#25#0#0@@0| T@U) (|a#25#1#0| T@U) (|a#25#2#0| T@U) ($h@@123 T@U) ) (!  (=> (and (and (and (and (= (type |a#25#0#0@@0|) DatatypeTypeType) (= (type |a#25#1#0|) (SeqType BoxType))) (= (type |a#25#2#0|) DatatypeTypeType)) (= (type $h@@123) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@123)) (= ($IsAlloc (|#MapSpec.Step.SuccStep| |a#25#0#0@@0| |a#25#1#0| |a#25#2#0|) Tclass.MapSpec.Step $h@@123)  (and (and ($IsAlloc |a#25#0#0@@0| Tclass.UI.RangeStart $h@@123) ($IsAlloc |a#25#1#0| (TSeq Tclass.UI.SuccResult) $h@@123)) ($IsAlloc |a#25#2#0| Tclass.UI.RangeEnd $h@@123)))) :qid |MapSpecsdfy.125:18| :skolemid |2273| :pattern ( ($IsAlloc (|#MapSpec.Step.SuccStep| |a#25#0#0@@0| |a#25#1#0| |a#25#2#0|) Tclass.MapSpec.Step $h@@123)) )))
(assert (forall ((arg0@@478 T@U) ) (! (= (type (MapSpec.Step.start arg0@@478)) DatatypeTypeType) :qid |funType:MapSpec.Step.start| :pattern ( (MapSpec.Step.start arg0@@478)) )))
(assert (forall ((d@@106 T@U) ($h@@124 T@U) ) (!  (=> (and (and (= (type d@@106) DatatypeTypeType) (= (type $h@@124) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@124) (and (MapSpec.Step.SuccStep_q d@@106) ($IsAlloc d@@106 Tclass.MapSpec.Step $h@@124)))) ($IsAlloc (MapSpec.Step.start d@@106) Tclass.UI.RangeStart $h@@124)) :qid |unknown.0:0| :skolemid |2274| :pattern ( ($IsAlloc (MapSpec.Step.start d@@106) Tclass.UI.RangeStart $h@@124)) )))
(assert (forall ((arg0@@479 T@U) ) (! (= (type (MapSpec.Step.results arg0@@479)) (SeqType BoxType)) :qid |funType:MapSpec.Step.results| :pattern ( (MapSpec.Step.results arg0@@479)) )))
(assert (forall ((d@@107 T@U) ($h@@125 T@U) ) (!  (=> (and (and (= (type d@@107) DatatypeTypeType) (= (type $h@@125) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@125) (and (MapSpec.Step.SuccStep_q d@@107) ($IsAlloc d@@107 Tclass.MapSpec.Step $h@@125)))) ($IsAlloc (MapSpec.Step.results d@@107) (TSeq Tclass.UI.SuccResult) $h@@125)) :qid |unknown.0:0| :skolemid |2275| :pattern ( ($IsAlloc (MapSpec.Step.results d@@107) (TSeq Tclass.UI.SuccResult) $h@@125)) )))
(assert (forall ((arg0@@480 T@U) ) (! (= (type (MapSpec.Step.end arg0@@480)) DatatypeTypeType) :qid |funType:MapSpec.Step.end| :pattern ( (MapSpec.Step.end arg0@@480)) )))
(assert (forall ((d@@108 T@U) ($h@@126 T@U) ) (!  (=> (and (and (= (type d@@108) DatatypeTypeType) (= (type $h@@126) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@126) (and (MapSpec.Step.SuccStep_q d@@108) ($IsAlloc d@@108 Tclass.MapSpec.Step $h@@126)))) ($IsAlloc (MapSpec.Step.end d@@108) Tclass.UI.RangeEnd $h@@126)) :qid |unknown.0:0| :skolemid |2276| :pattern ( ($IsAlloc (MapSpec.Step.end d@@108) Tclass.UI.RangeEnd $h@@126)) )))
(assert (forall ((|a#26#0#0@@0| T@U) (|a#26#1#0| T@U) (|a#26#2#0| T@U) ) (!  (=> (and (and (= (type |a#26#0#0@@0|) DatatypeTypeType) (= (type |a#26#1#0|) (SeqType BoxType))) (= (type |a#26#2#0|) DatatypeTypeType)) (= (|#MapSpec.Step.SuccStep| (Lit |a#26#0#0@@0|) (Lit |a#26#1#0|) (Lit |a#26#2#0|)) (Lit (|#MapSpec.Step.SuccStep| |a#26#0#0@@0| |a#26#1#0| |a#26#2#0|)))) :qid |MapSpecsdfy.125:18| :skolemid |2277| :pattern ( (|#MapSpec.Step.SuccStep| (Lit |a#26#0#0@@0|) (Lit |a#26#1#0|) (Lit |a#26#2#0|))) )))
(assert (forall ((|a#27#0#0@@0| T@U) (|a#27#1#0| T@U) (|a#27#2#0| T@U) ) (!  (=> (and (and (= (type |a#27#0#0@@0|) DatatypeTypeType) (= (type |a#27#1#0|) (SeqType BoxType))) (= (type |a#27#2#0|) DatatypeTypeType)) (= (MapSpec.Step.start (|#MapSpec.Step.SuccStep| |a#27#0#0@@0| |a#27#1#0| |a#27#2#0|)) |a#27#0#0@@0|)) :qid |MapSpecsdfy.125:18| :skolemid |2278| :pattern ( (|#MapSpec.Step.SuccStep| |a#27#0#0@@0| |a#27#1#0| |a#27#2#0|)) )))
(assert (forall ((|a#28#0#0@@0| T@U) (|a#28#1#0| T@U) (|a#28#2#0| T@U) ) (!  (=> (and (and (= (type |a#28#0#0@@0|) DatatypeTypeType) (= (type |a#28#1#0|) (SeqType BoxType))) (= (type |a#28#2#0|) DatatypeTypeType)) (< (DtRank |a#28#0#0@@0|) (DtRank (|#MapSpec.Step.SuccStep| |a#28#0#0@@0| |a#28#1#0| |a#28#2#0|)))) :qid |MapSpecsdfy.125:18| :skolemid |2279| :pattern ( (|#MapSpec.Step.SuccStep| |a#28#0#0@@0| |a#28#1#0| |a#28#2#0|)) )))
(assert (forall ((|a#29#0#0| T@U) (|a#29#1#0| T@U) (|a#29#2#0| T@U) ) (!  (=> (and (and (= (type |a#29#0#0|) DatatypeTypeType) (= (type |a#29#1#0|) (SeqType BoxType))) (= (type |a#29#2#0|) DatatypeTypeType)) (= (MapSpec.Step.results (|#MapSpec.Step.SuccStep| |a#29#0#0| |a#29#1#0| |a#29#2#0|)) |a#29#1#0|)) :qid |MapSpecsdfy.125:18| :skolemid |2280| :pattern ( (|#MapSpec.Step.SuccStep| |a#29#0#0| |a#29#1#0| |a#29#2#0|)) )))
(assert (forall ((|a#30#0#0| T@U) (|a#30#1#0| T@U) (|a#30#2#0| T@U) (i@@27 Int) ) (!  (=> (and (and (and (= (type |a#30#0#0|) DatatypeTypeType) (= (type |a#30#1#0|) (SeqType BoxType))) (= (type |a#30#2#0|) DatatypeTypeType)) (and (<= 0 i@@27) (< i@@27 (|Seq#Length| |a#30#1#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#30#1#0| i@@27))) (DtRank (|#MapSpec.Step.SuccStep| |a#30#0#0| |a#30#1#0| |a#30#2#0|)))) :qid |MapSpecsdfy.125:18| :skolemid |2281| :pattern ( (|Seq#Index| |a#30#1#0| i@@27) (|#MapSpec.Step.SuccStep| |a#30#0#0| |a#30#1#0| |a#30#2#0|)) )))
(assert (forall ((|a#31#0#0| T@U) (|a#31#1#0| T@U) (|a#31#2#0| T@U) ) (!  (=> (and (and (= (type |a#31#0#0|) DatatypeTypeType) (= (type |a#31#1#0|) (SeqType BoxType))) (= (type |a#31#2#0|) DatatypeTypeType)) (< (|Seq#Rank| |a#31#1#0|) (DtRank (|#MapSpec.Step.SuccStep| |a#31#0#0| |a#31#1#0| |a#31#2#0|)))) :qid |MapSpecsdfy.125:18| :skolemid |2282| :pattern ( (|#MapSpec.Step.SuccStep| |a#31#0#0| |a#31#1#0| |a#31#2#0|)) )))
(assert (forall ((|a#32#0#0| T@U) (|a#32#1#0| T@U) (|a#32#2#0| T@U) ) (!  (=> (and (and (= (type |a#32#0#0|) DatatypeTypeType) (= (type |a#32#1#0|) (SeqType BoxType))) (= (type |a#32#2#0|) DatatypeTypeType)) (= (MapSpec.Step.end (|#MapSpec.Step.SuccStep| |a#32#0#0| |a#32#1#0| |a#32#2#0|)) |a#32#2#0|)) :qid |MapSpecsdfy.125:18| :skolemid |2283| :pattern ( (|#MapSpec.Step.SuccStep| |a#32#0#0| |a#32#1#0| |a#32#2#0|)) )))
(assert (forall ((|a#33#0#0| T@U) (|a#33#1#0| T@U) (|a#33#2#0| T@U) ) (!  (=> (and (and (= (type |a#33#0#0|) DatatypeTypeType) (= (type |a#33#1#0|) (SeqType BoxType))) (= (type |a#33#2#0|) DatatypeTypeType)) (< (DtRank |a#33#2#0|) (DtRank (|#MapSpec.Step.SuccStep| |a#33#0#0| |a#33#1#0| |a#33#2#0|)))) :qid |MapSpecsdfy.125:18| :skolemid |2284| :pattern ( (|#MapSpec.Step.SuccStep| |a#33#0#0| |a#33#1#0| |a#33#2#0|)) )))
(assert (= (type |#MapSpec.Step.StutterStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#MapSpec.Step.StutterStep|) |##MapSpec.Step.StutterStep|))
(assert (forall ((d@@109 T@U) ) (!  (=> (= (type d@@109) DatatypeTypeType) (= (MapSpec.Step.StutterStep_q d@@109) (= (DatatypeCtorId d@@109) |##MapSpec.Step.StutterStep|))) :qid |unknown.0:0| :skolemid |2285| :pattern ( (MapSpec.Step.StutterStep_q d@@109)) )))
(assert (forall ((d@@110 T@U) ) (!  (=> (and (= (type d@@110) DatatypeTypeType) (MapSpec.Step.StutterStep_q d@@110)) (= d@@110 |#MapSpec.Step.StutterStep|)) :qid |unknown.0:0| :skolemid |2286| :pattern ( (MapSpec.Step.StutterStep_q d@@110)) )))
(assert ($Is |#MapSpec.Step.StutterStep| Tclass.MapSpec.Step))
(assert (forall (($h@@127 T@U) ) (!  (=> (and (= (type $h@@127) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@127)) ($IsAlloc |#MapSpec.Step.StutterStep| Tclass.MapSpec.Step $h@@127)) :qid |DafnyPreludebpl.545:12| :skolemid |2287| :pattern ( ($IsAlloc |#MapSpec.Step.StutterStep| Tclass.MapSpec.Step $h@@127)) )))
(assert (= |#MapSpec.Step.StutterStep| (Lit |#MapSpec.Step.StutterStep|)))
(assert (forall ((d@@111 T@U) ) (!  (=> (and (= (type d@@111) DatatypeTypeType) (|$IsA#MapSpec.Step| d@@111)) (or (or (or (MapSpec.Step.QueryStep_q d@@111) (MapSpec.Step.WriteStep_q d@@111)) (MapSpec.Step.SuccStep_q d@@111)) (MapSpec.Step.StutterStep_q d@@111))) :qid |unknown.0:0| :skolemid |2288| :pattern ( (|$IsA#MapSpec.Step| d@@111)) )))
(assert (forall ((d@@112 T@U) ) (!  (=> (and (= (type d@@112) DatatypeTypeType) ($Is d@@112 Tclass.MapSpec.Step)) (or (or (or (MapSpec.Step.QueryStep_q d@@112) (MapSpec.Step.WriteStep_q d@@112)) (MapSpec.Step.SuccStep_q d@@112)) (MapSpec.Step.StutterStep_q d@@112))) :qid |unknown.0:0| :skolemid |2289| :pattern ( (MapSpec.Step.StutterStep_q d@@112) ($Is d@@112 Tclass.MapSpec.Step)) :pattern ( (MapSpec.Step.SuccStep_q d@@112) ($Is d@@112 Tclass.MapSpec.Step)) :pattern ( (MapSpec.Step.WriteStep_q d@@112) ($Is d@@112 Tclass.MapSpec.Step)) :pattern ( (MapSpec.Step.QueryStep_q d@@112) ($Is d@@112 Tclass.MapSpec.Step)) )))
(assert (forall ((a@@158 T@U) (b@@95 T@U) ) (!  (=> (and (and (= (type a@@158) DatatypeTypeType) (= (type b@@95) DatatypeTypeType)) (and (MapSpec.Step.QueryStep_q a@@158) (MapSpec.Step.QueryStep_q b@@95))) (= (|MapSpec.Step#Equal| a@@158 b@@95)  (and (|Seq#Equal| (MapSpec.Step.key a@@158) (MapSpec.Step.key b@@95)) (|Seq#Equal| (MapSpec.Step.result a@@158) (MapSpec.Step.result b@@95))))) :qid |unknown.0:0| :skolemid |2290| :pattern ( (|MapSpec.Step#Equal| a@@158 b@@95) (MapSpec.Step.QueryStep_q a@@158)) :pattern ( (|MapSpec.Step#Equal| a@@158 b@@95) (MapSpec.Step.QueryStep_q b@@95)) )))
(assert (forall ((a@@159 T@U) (b@@96 T@U) ) (!  (=> (and (and (= (type a@@159) DatatypeTypeType) (= (type b@@96) DatatypeTypeType)) (and (MapSpec.Step.WriteStep_q a@@159) (MapSpec.Step.WriteStep_q b@@96))) (= (|MapSpec.Step#Equal| a@@159 b@@96)  (and (|Seq#Equal| (MapSpec.Step.key a@@159) (MapSpec.Step.key b@@96)) (|Seq#Equal| (MapSpec.Step.new__value a@@159) (MapSpec.Step.new__value b@@96))))) :qid |unknown.0:0| :skolemid |2291| :pattern ( (|MapSpec.Step#Equal| a@@159 b@@96) (MapSpec.Step.WriteStep_q a@@159)) :pattern ( (|MapSpec.Step#Equal| a@@159 b@@96) (MapSpec.Step.WriteStep_q b@@96)) )))
(assert (forall ((a@@160 T@U) (b@@97 T@U) ) (!  (=> (and (and (= (type a@@160) DatatypeTypeType) (= (type b@@97) DatatypeTypeType)) (and (MapSpec.Step.SuccStep_q a@@160) (MapSpec.Step.SuccStep_q b@@97))) (= (|MapSpec.Step#Equal| a@@160 b@@97)  (and (and (|UI.RangeStart#Equal| (MapSpec.Step.start a@@160) (MapSpec.Step.start b@@97)) (|Seq#Equal| (MapSpec.Step.results a@@160) (MapSpec.Step.results b@@97))) (|UI.RangeEnd#Equal| (MapSpec.Step.end a@@160) (MapSpec.Step.end b@@97))))) :qid |unknown.0:0| :skolemid |2292| :pattern ( (|MapSpec.Step#Equal| a@@160 b@@97) (MapSpec.Step.SuccStep_q a@@160)) :pattern ( (|MapSpec.Step#Equal| a@@160 b@@97) (MapSpec.Step.SuccStep_q b@@97)) )))
(assert (forall ((a@@161 T@U) (b@@98 T@U) ) (!  (=> (and (and (= (type a@@161) DatatypeTypeType) (= (type b@@98) DatatypeTypeType)) (and (MapSpec.Step.StutterStep_q a@@161) (MapSpec.Step.StutterStep_q b@@98))) (= (|MapSpec.Step#Equal| a@@161 b@@98) true)) :qid |unknown.0:0| :skolemid |2293| :pattern ( (|MapSpec.Step#Equal| a@@161 b@@98) (MapSpec.Step.StutterStep_q a@@161)) :pattern ( (|MapSpec.Step#Equal| a@@161 b@@98) (MapSpec.Step.StutterStep_q b@@98)) )))
(assert (forall ((a@@162 T@U) (b@@99 T@U) ) (!  (=> (and (= (type a@@162) DatatypeTypeType) (= (type b@@99) DatatypeTypeType)) (= (|MapSpec.Step#Equal| a@@162 b@@99) (= a@@162 b@@99))) :qid |unknown.0:0| :skolemid |2294| :pattern ( (|MapSpec.Step#Equal| a@@162 b@@99)) )))
(assert (= (type Tclass.MapSpec.__default) TyType))
(assert (= (Tag Tclass.MapSpec.__default) Tagclass.MapSpec.__default))
(assert (= (TagFamily Tclass.MapSpec.__default) tytagFamily$_default))
(assert (forall ((bx@@173 T@U) ) (!  (=> (and (= (type bx@@173) BoxType) ($IsBox bx@@173 Tclass.MapSpec.__default)) (and (= ($Box ($Unbox refType bx@@173)) bx@@173) ($Is ($Unbox refType bx@@173) Tclass.MapSpec.__default))) :qid |unknown.0:0| :skolemid |2295| :pattern ( ($IsBox bx@@173 Tclass.MapSpec.__default)) )))
(assert (forall (($o@@25 T@U) ) (!  (=> (= (type $o@@25) refType) (= ($Is $o@@25 Tclass.MapSpec.__default)  (or (= $o@@25 null) (= (dtype $o@@25) Tclass.MapSpec.__default)))) :qid |unknown.0:0| :skolemid |2296| :pattern ( ($Is $o@@25 Tclass.MapSpec.__default)) )))
(assert (forall (($o@@26 T@U) ($h@@128 T@U) ) (!  (=> (and (= (type $o@@26) refType) (= (type $h@@128) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@26 Tclass.MapSpec.__default $h@@128)  (or (= $o@@26 null) (U_2_bool (MapType1Select (MapType0Select $h@@128 $o@@26) alloc))))) :qid |unknown.0:0| :skolemid |2297| :pattern ( ($IsAlloc $o@@26 Tclass.MapSpec.__default $h@@128)) )))
(assert (= (type MapSpec.__default.EmptyValue) (SeqType BoxType)))
(assert  (=> true (=> true ($Is MapSpec.__default.EmptyValue Tclass.ValueType.Value))))
(assert (= |MapSpec.__default.EmptyValue#requires| true))
(assert  (=> true (=> true (and |ValueType.__default.DefaultValue#canCall| (= MapSpec.__default.EmptyValue (Lit ValueType.__default.DefaultValue))))))
(assert  (=> true (=> true (and |ValueType.__default.DefaultValue#canCall| (= MapSpec.__default.EmptyValue (Lit ValueType.__default.DefaultValue))))))
(assert  (=> true (forall ((|view#0| T@U) ) (!  (=> (and (= (type |view#0|) (IMapType BoxType BoxType)) (or (|MapSpec.__default.ViewComplete#canCall| |view#0|) ($Is |view#0| (TIMap Tclass.KeyType.Key Tclass.ValueType.Value)))) true) :qid |MapSpecsdfy.27:26| :skolemid |2298| :pattern ( (MapSpec.__default.ViewComplete |view#0|)) ))))
(assert (forall ((|view#0@@0| T@U) ) (!  (=> (and (= (type |view#0@@0|) (IMapType BoxType BoxType)) ($Is |view#0@@0| (TIMap Tclass.KeyType.Key Tclass.ValueType.Value))) (= (|MapSpec.__default.ViewComplete#requires| |view#0@@0|) true)) :qid |MapSpecsdfy.27:26| :skolemid |2299| :pattern ( (|MapSpec.__default.ViewComplete#requires| |view#0@@0|)) )))
(assert  (=> true (forall ((|view#0@@1| T@U) ) (!  (=> (and (= (type |view#0@@1|) (IMapType BoxType BoxType)) (or (|MapSpec.__default.ViewComplete#canCall| |view#0@@1|) ($Is |view#0@@1| (TIMap Tclass.KeyType.Key Tclass.ValueType.Value)))) (= (MapSpec.__default.ViewComplete |view#0@@1|) (forall ((|k#0| T@U) ) (!  (=> (and (= (type |k#0|) (SeqType BoxType)) ($Is |k#0| Tclass.KeyType.Key)) (U_2_bool (MapType0Select (|IMap#Domain| |view#0@@1|) ($Box |k#0|)))) :qid |MapSpecsdfy.29:12| :skolemid |2300| :pattern ( (MapType0Select (|IMap#Domain| |view#0@@1|) ($Box |k#0|))) )))) :qid |MapSpecsdfy.27:26| :skolemid |2301| :pattern ( (MapSpec.__default.ViewComplete |view#0@@1|)) ))))
(assert  (=> true (forall ((|view#0@@2| T@U) ) (!  (=> (and (= (type |view#0@@2|) (IMapType BoxType BoxType)) (or (|MapSpec.__default.ViewComplete#canCall| (Lit |view#0@@2|)) ($Is |view#0@@2| (TIMap Tclass.KeyType.Key Tclass.ValueType.Value)))) (= (MapSpec.__default.ViewComplete (Lit |view#0@@2|)) (forall ((|k#1| T@U) ) (!  (=> (and (= (type |k#1|) (SeqType BoxType)) ($Is |k#1| Tclass.KeyType.Key)) (U_2_bool (MapType0Select (|IMap#Domain| |view#0@@2|) ($Box |k#1|)))) :qid |MapSpecsdfy.29:12| :skolemid |2302| :pattern ( (MapType0Select (|IMap#Domain| |view#0@@2|) ($Box |k#1|))) )))) :qid |MapSpecsdfy.27:26| :weight 3 :skolemid |2303| :pattern ( (MapSpec.__default.ViewComplete (Lit |view#0@@2|))) ))))
(assert  (=> true (forall ((|s#0@@15| T@U) ) (!  (=> (and (= (type |s#0@@15|) DatatypeTypeType) (or (|MapSpec.__default.WF#canCall| |s#0@@15|) ($Is |s#0@@15| Tclass.MapSpec.Variables))) true) :qid |MapSpecsdfy.32:16| :skolemid |2304| :pattern ( (MapSpec.__default.WF |s#0@@15|)) ))))
(assert (forall ((|s#0@@16| T@U) ) (!  (=> (and (= (type |s#0@@16|) DatatypeTypeType) ($Is |s#0@@16| Tclass.MapSpec.Variables)) (= (|MapSpec.__default.WF#requires| |s#0@@16|) true)) :qid |MapSpecsdfy.32:16| :skolemid |2305| :pattern ( (|MapSpec.__default.WF#requires| |s#0@@16|)) )))
(assert  (=> true (forall ((|s#0@@17| T@U) ) (!  (=> (and (= (type |s#0@@17|) DatatypeTypeType) (or (|MapSpec.__default.WF#canCall| |s#0@@17|) ($Is |s#0@@17| Tclass.MapSpec.Variables))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (MapSpec.Variables.Variables_q |s#0@@17|) (|MapSpec.__default.ViewComplete#canCall| (MapSpec.Variables.view |s#0@@17|)))) (= (MapSpec.__default.WF |s#0@@17|)  (and true (MapSpec.__default.ViewComplete (MapSpec.Variables.view |s#0@@17|)))))) :qid |MapSpecsdfy.32:16| :skolemid |2306| :pattern ( (MapSpec.__default.WF |s#0@@17|)) ))))
(assert  (=> true (forall ((|s#0@@18| T@U) ) (!  (=> (and (= (type |s#0@@18|) DatatypeTypeType) (or (|MapSpec.__default.WF#canCall| (Lit |s#0@@18|)) ($Is |s#0@@18| Tclass.MapSpec.Variables))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (MapSpec.Variables.Variables_q (Lit |s#0@@18|)) (|MapSpec.__default.ViewComplete#canCall| (Lit (MapSpec.Variables.view (Lit |s#0@@18|)))))) (= (MapSpec.__default.WF (Lit |s#0@@18|)) (U_2_bool (Lit (bool_2_U  (and true (MapSpec.__default.ViewComplete (Lit (MapSpec.Variables.view (Lit |s#0@@18|))))))))))) :qid |MapSpecsdfy.32:16| :weight 3 :skolemid |2307| :pattern ( (MapSpec.__default.WF (Lit |s#0@@18|))) ))))
(assert  (=> true (forall ((|k#0@@0| T@U) ) (!  (=> (and (= (type |k#0@@0|) (SeqType BoxType)) (or (|MapSpec.__default.InDomain#canCall| |k#0@@0|) ($Is |k#0@@0| Tclass.KeyType.Key))) true) :qid |MapSpecsdfy.39:22| :skolemid |2308| :pattern ( (MapSpec.__default.InDomain |k#0@@0|)) ))))
(assert (forall ((|k#0@@1| T@U) ) (!  (=> (and (= (type |k#0@@1|) (SeqType BoxType)) ($Is |k#0@@1| Tclass.KeyType.Key)) (= (|MapSpec.__default.InDomain#requires| |k#0@@1|) true)) :qid |MapSpecsdfy.39:22| :skolemid |2309| :pattern ( (|MapSpec.__default.InDomain#requires| |k#0@@1|)) )))
(assert  (=> true (forall ((|k#0@@2| T@U) ) (!  (=> (and (= (type |k#0@@2|) (SeqType BoxType)) (or (|MapSpec.__default.InDomain#canCall| |k#0@@2|) ($Is |k#0@@2| Tclass.KeyType.Key))) (= (MapSpec.__default.InDomain |k#0@@2|) (U_2_bool (Lit (bool_2_U true))))) :qid |MapSpecsdfy.39:22| :skolemid |2310| :pattern ( (MapSpec.__default.InDomain |k#0@@2|)) ))))
(assert  (=> true (forall ((|k#0@@3| T@U) ) (!  (=> (and (= (type |k#0@@3|) (SeqType BoxType)) (or (|MapSpec.__default.InDomain#canCall| (Lit |k#0@@3|)) ($Is |k#0@@3| Tclass.KeyType.Key))) (= (MapSpec.__default.InDomain (Lit |k#0@@3|)) (U_2_bool (Lit (bool_2_U true))))) :qid |MapSpecsdfy.39:22| :weight 3 :skolemid |2311| :pattern ( (MapSpec.__default.InDomain (Lit |k#0@@3|))) ))))
(assert (= (type MapSpec.__default.EmptyMap) (IMapType BoxType BoxType)))
(assert  (=> true (=> true (and (MapSpec.__default.ViewComplete MapSpec.__default.EmptyMap) ($Is MapSpec.__default.EmptyMap (TIMap Tclass.KeyType.Key Tclass.ValueType.Value))))))
(assert (= |MapSpec.__default.EmptyMap#requires| true))
(assert  (and (forall ((arg0@@481 T@U) ) (! (= (type (|lambda#26| arg0@@481)) (MapType0Type BoxType boolType)) :qid |funType:lambda#26| :pattern ( (|lambda#26| arg0@@481)) )) (forall ((arg0@@482 T@U) ) (! (= (type (|lambda#27| arg0@@482)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#27| :pattern ( (|lambda#27| arg0@@482)) ))))
(assert  (=> true (=> true (and (forall ((|k#0@@4| T@U) ) (!  (=> (and (= (type |k#0@@4|) (SeqType BoxType)) ($Is |k#0@@4| Tclass.KeyType.Key)) (and (|MapSpec.__default.InDomain#canCall| |k#0@@4|) (=> (MapSpec.__default.InDomain |k#0@@4|) |MapSpec.__default.EmptyValue#canCall|))) :qid |MapSpecsdfy.47:10| :skolemid |2312| :pattern ( (MapSpec.__default.InDomain |k#0@@4|)) )) (= MapSpec.__default.EmptyMap (|IMap#Glue| (|lambda#26| Tclass.KeyType.Key) (|lambda#27| ($Box (Lit MapSpec.__default.EmptyValue))) (TIMap Tclass.KeyType.Key Tclass.ValueType.Value)))))))
(assert  (=> true (=> true (and (forall ((|k#0@@5| T@U) ) (!  (=> (and (= (type |k#0@@5|) (SeqType BoxType)) ($Is |k#0@@5| Tclass.KeyType.Key)) (and (|MapSpec.__default.InDomain#canCall| |k#0@@5|) (=> (MapSpec.__default.InDomain |k#0@@5|) |MapSpec.__default.EmptyValue#canCall|))) :qid |MapSpecsdfy.47:10| :skolemid |2313| :pattern ( (MapSpec.__default.InDomain |k#0@@5|)) )) (= MapSpec.__default.EmptyMap (|IMap#Glue| (|lambda#26| Tclass.KeyType.Key) (|lambda#27| ($Box (Lit MapSpec.__default.EmptyValue))) (TIMap Tclass.KeyType.Key Tclass.ValueType.Value)))))))
(assert  (=> true (forall ((|s#0@@19| T@U) ) (!  (=> (and (and (= (type |s#0@@19|) DatatypeTypeType) (or (|MapSpec.__default.Init#canCall| |s#0@@19|) ($Is |s#0@@19| Tclass.MapSpec.Variables))) (MapSpec.__default.Init |s#0@@19|)) (MapSpec.__default.WF |s#0@@19|)) :qid |UIStateMachinesdfyMapSpec.15:18| :skolemid |2314| :pattern ( (MapSpec.__default.Init |s#0@@19|)) ))))
(assert (forall ((|s#0@@20| T@U) ) (!  (=> (and (= (type |s#0@@20|) DatatypeTypeType) ($Is |s#0@@20| Tclass.MapSpec.Variables)) (= (|MapSpec.__default.Init#requires| |s#0@@20|) true)) :qid |UIStateMachinesdfyMapSpec.15:18| :skolemid |2315| :pattern ( (|MapSpec.__default.Init#requires| |s#0@@20|)) )))
(assert  (=> true (forall ((|s#0@@21| T@U) ) (!  (=> (and (= (type |s#0@@21|) DatatypeTypeType) (or (|MapSpec.__default.Init#canCall| |s#0@@21|) ($Is |s#0@@21| Tclass.MapSpec.Variables))) (and (and (|$IsA#MapSpec.Variables| |s#0@@21|) |MapSpec.__default.EmptyMap#canCall|) (= (MapSpec.__default.Init |s#0@@21|) (|MapSpec.Variables#Equal| |s#0@@21| (|#MapSpec.Variables.Variables| (Lit MapSpec.__default.EmptyMap)))))) :qid |UIStateMachinesdfyMapSpec.15:18| :skolemid |2316| :pattern ( (MapSpec.__default.Init |s#0@@21|)) ))))
(assert  (=> true (forall ((|s#0@@22| T@U) ) (!  (=> (and (= (type |s#0@@22|) DatatypeTypeType) (or (|MapSpec.__default.Init#canCall| (Lit |s#0@@22|)) ($Is |s#0@@22| Tclass.MapSpec.Variables))) (and (and (|$IsA#MapSpec.Variables| (Lit |s#0@@22|)) |MapSpec.__default.EmptyMap#canCall|) (= (MapSpec.__default.Init (Lit |s#0@@22|)) (|MapSpec.Variables#Equal| |s#0@@22| (|#MapSpec.Variables.Variables| (Lit MapSpec.__default.EmptyMap)))))) :qid |UIStateMachinesdfyMapSpec.15:18| :weight 3 :skolemid |2317| :pattern ( (MapSpec.__default.Init (Lit |s#0@@22|))) ))))
(assert  (=> true (forall ((|s#0@@23| T@U) (|s'#0| T@U) (|uiop#0| T@U) (|key#0| T@U) (|result#0| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@23|) DatatypeTypeType) (= (type |s'#0|) DatatypeTypeType)) (= (type |uiop#0|) DatatypeTypeType)) (= (type |key#0|) (SeqType BoxType))) (= (type |result#0|) (SeqType BoxType))) (or (|MapSpec.__default.Query#canCall| |s#0@@23| |s'#0| |uiop#0| |key#0| |result#0|) (and (and (and (and ($Is |s#0@@23| Tclass.MapSpec.Variables) ($Is |s'#0| Tclass.MapSpec.Variables)) ($Is |uiop#0| Tclass.UI.Op)) ($Is |key#0| Tclass.KeyType.Key)) ($Is |result#0| Tclass.ValueType.Value)))) true) :qid |MapSpecsdfy.57:19| :skolemid |2318| :pattern ( (MapSpec.__default.Query |s#0@@23| |s'#0| |uiop#0| |key#0| |result#0|)) ))))
(assert (forall ((|s#0@@24| T@U) (|s'#0@@0| T@U) (|uiop#0@@0| T@U) (|key#0@@0| T@U) (|result#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@24|) DatatypeTypeType) (= (type |s'#0@@0|) DatatypeTypeType)) (= (type |uiop#0@@0|) DatatypeTypeType)) (= (type |key#0@@0|) (SeqType BoxType))) (= (type |result#0@@0|) (SeqType BoxType))) (and (and (and (and ($Is |s#0@@24| Tclass.MapSpec.Variables) ($Is |s'#0@@0| Tclass.MapSpec.Variables)) ($Is |uiop#0@@0| Tclass.UI.Op)) ($Is |key#0@@0| Tclass.KeyType.Key)) ($Is |result#0@@0| Tclass.ValueType.Value))) (= (|MapSpec.__default.Query#requires| |s#0@@24| |s'#0@@0| |uiop#0@@0| |key#0@@0| |result#0@@0|) true)) :qid |MapSpecsdfy.57:19| :skolemid |2319| :pattern ( (|MapSpec.__default.Query#requires| |s#0@@24| |s'#0@@0| |uiop#0@@0| |key#0@@0| |result#0@@0|)) )))
(assert  (=> true (forall ((|s#0@@25| T@U) (|s'#0@@1| T@U) (|uiop#0@@1| T@U) (|key#0@@1| T@U) (|result#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@25|) DatatypeTypeType) (= (type |s'#0@@1|) DatatypeTypeType)) (= (type |uiop#0@@1|) DatatypeTypeType)) (= (type |key#0@@1|) (SeqType BoxType))) (= (type |result#0@@1|) (SeqType BoxType))) (or (|MapSpec.__default.Query#canCall| |s#0@@25| |s'#0@@1| |uiop#0@@1| |key#0@@1| |result#0@@1|) (and (and (and (and ($Is |s#0@@25| Tclass.MapSpec.Variables) ($Is |s'#0@@1| Tclass.MapSpec.Variables)) ($Is |uiop#0@@1| Tclass.UI.Op)) ($Is |key#0@@1| Tclass.KeyType.Key)) ($Is |result#0@@1| Tclass.ValueType.Value)))) (and (and (|$IsA#UI.Op| |uiop#0@@1|) (=> (|UI.Op#Equal| |uiop#0@@1| (|#UI.Op.GetOp| |key#0@@1| |result#0@@1|)) (and (|MapSpec.__default.WF#canCall| |s#0@@25|) (=> (MapSpec.__default.WF |s#0@@25|) (and (MapSpec.Variables.Variables_q |s#0@@25|) (=> (= |result#0@@1| ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@25|)) ($Box |key#0@@1|)))) (and (|$IsA#MapSpec.Variables| |s'#0@@1|) (|$IsA#MapSpec.Variables| |s#0@@25|)))))))) (= (MapSpec.__default.Query |s#0@@25| |s'#0@@1| |uiop#0@@1| |key#0@@1| |result#0@@1|)  (and (and (and (|UI.Op#Equal| |uiop#0@@1| (|#UI.Op.GetOp| |key#0@@1| |result#0@@1|)) (MapSpec.__default.WF |s#0@@25|)) (= |result#0@@1| ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@25|)) ($Box |key#0@@1|))))) (|MapSpec.Variables#Equal| |s'#0@@1| |s#0@@25|))))) :qid |MapSpecsdfy.57:19| :skolemid |2320| :pattern ( (MapSpec.__default.Query |s#0@@25| |s'#0@@1| |uiop#0@@1| |key#0@@1| |result#0@@1|)) ))))
(assert  (=> true (forall ((|s#0@@26| T@U) (|s'#0@@2| T@U) (|uiop#0@@2| T@U) (|key#0@@2| T@U) (|result#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@26|) DatatypeTypeType) (= (type |s'#0@@2|) DatatypeTypeType)) (= (type |uiop#0@@2|) DatatypeTypeType)) (= (type |key#0@@2|) (SeqType BoxType))) (= (type |result#0@@2|) (SeqType BoxType))) (or (|MapSpec.__default.Query#canCall| (Lit |s#0@@26|) (Lit |s'#0@@2|) (Lit |uiop#0@@2|) (Lit |key#0@@2|) |result#0@@2|) (and (and (and (and ($Is |s#0@@26| Tclass.MapSpec.Variables) ($Is |s'#0@@2| Tclass.MapSpec.Variables)) ($Is |uiop#0@@2| Tclass.UI.Op)) ($Is |key#0@@2| Tclass.KeyType.Key)) ($Is |result#0@@2| Tclass.ValueType.Value)))) (and (and (|$IsA#UI.Op| (Lit |uiop#0@@2|)) (=> (|UI.Op#Equal| |uiop#0@@2| (|#UI.Op.GetOp| (Lit |key#0@@2|) |result#0@@2|)) (and (|MapSpec.__default.WF#canCall| (Lit |s#0@@26|)) (=> (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s#0@@26|))))) (and (MapSpec.Variables.Variables_q (Lit |s#0@@26|)) (=> (= |result#0@@2| ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@26|)))) ($Box (Lit |key#0@@2|))))) (and (|$IsA#MapSpec.Variables| (Lit |s'#0@@2|)) (|$IsA#MapSpec.Variables| (Lit |s#0@@26|))))))))) (= (MapSpec.__default.Query (Lit |s#0@@26|) (Lit |s'#0@@2|) (Lit |uiop#0@@2|) (Lit |key#0@@2|) |result#0@@2|)  (and (and (and (|UI.Op#Equal| |uiop#0@@2| (|#UI.Op.GetOp| (Lit |key#0@@2|) |result#0@@2|)) (MapSpec.__default.WF (Lit |s#0@@26|))) (= |result#0@@2| ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@26|)))) ($Box (Lit |key#0@@2|)))))) (|MapSpec.Variables#Equal| |s'#0@@2| |s#0@@26|))))) :qid |MapSpecsdfy.57:19| :weight 3 :skolemid |2321| :pattern ( (MapSpec.__default.Query (Lit |s#0@@26|) (Lit |s'#0@@2|) (Lit |uiop#0@@2|) (Lit |key#0@@2|) |result#0@@2|)) ))))
(assert  (=> true (forall ((|s#0@@27| T@U) (|s'#0@@3| T@U) (|uiop#0@@3| T@U) (|key#0@@3| T@U) (|result#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@27|) DatatypeTypeType) (= (type |s'#0@@3|) DatatypeTypeType)) (= (type |uiop#0@@3|) DatatypeTypeType)) (= (type |key#0@@3|) (SeqType BoxType))) (= (type |result#0@@3|) (SeqType BoxType))) (or (|MapSpec.__default.Query#canCall| (Lit |s#0@@27|) (Lit |s'#0@@3|) (Lit |uiop#0@@3|) (Lit |key#0@@3|) (Lit |result#0@@3|)) (and (and (and (and ($Is |s#0@@27| Tclass.MapSpec.Variables) ($Is |s'#0@@3| Tclass.MapSpec.Variables)) ($Is |uiop#0@@3| Tclass.UI.Op)) ($Is |key#0@@3| Tclass.KeyType.Key)) ($Is |result#0@@3| Tclass.ValueType.Value)))) (and (and (|$IsA#UI.Op| (Lit |uiop#0@@3|)) (=> (|UI.Op#Equal| |uiop#0@@3| (|#UI.Op.GetOp| (Lit |key#0@@3|) (Lit |result#0@@3|))) (and (|MapSpec.__default.WF#canCall| (Lit |s#0@@27|)) (=> (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s#0@@27|))))) (and (MapSpec.Variables.Variables_q (Lit |s#0@@27|)) (=> (= (Lit |result#0@@3|) ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@27|)))) ($Box (Lit |key#0@@3|))))) (and (|$IsA#MapSpec.Variables| (Lit |s'#0@@3|)) (|$IsA#MapSpec.Variables| (Lit |s#0@@27|))))))))) (= (MapSpec.__default.Query (Lit |s#0@@27|) (Lit |s'#0@@3|) (Lit |uiop#0@@3|) (Lit |key#0@@3|) (Lit |result#0@@3|))  (and (and (and (|UI.Op#Equal| |uiop#0@@3| (|#UI.Op.GetOp| (Lit |key#0@@3|) (Lit |result#0@@3|))) (MapSpec.__default.WF (Lit |s#0@@27|))) (= (Lit |result#0@@3|) ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@27|)))) ($Box (Lit |key#0@@3|)))))) (|MapSpec.Variables#Equal| |s'#0@@3| |s#0@@27|))))) :qid |MapSpecsdfy.57:19| :weight 3 :skolemid |2322| :pattern ( (MapSpec.__default.Query (Lit |s#0@@27|) (Lit |s'#0@@3|) (Lit |uiop#0@@3|) (Lit |key#0@@3|) (Lit |result#0@@3|))) ))))
(assert  (=> true (forall ((|start#0| T@U) (|key#0@@4| T@U) ) (!  (=> (and (and (= (type |start#0|) DatatypeTypeType) (= (type |key#0@@4|) (SeqType BoxType))) (or (|MapSpec.__default.LowerBound#canCall| |start#0| |key#0@@4|) (and ($Is |start#0| Tclass.UI.RangeStart) ($Is |key#0@@4| Tclass.KeyType.Key)))) true) :qid |MapSpecsdfy.65:24| :skolemid |2323| :pattern ( (MapSpec.__default.LowerBound |start#0| |key#0@@4|)) ))))
(assert (forall ((|start#0@@0| T@U) (|key#0@@5| T@U) ) (!  (=> (and (and (= (type |start#0@@0|) DatatypeTypeType) (= (type |key#0@@5|) (SeqType BoxType))) (and ($Is |start#0@@0| Tclass.UI.RangeStart) ($Is |key#0@@5| Tclass.KeyType.Key))) (= (|MapSpec.__default.LowerBound#requires| |start#0@@0| |key#0@@5|) true)) :qid |MapSpecsdfy.65:24| :skolemid |2324| :pattern ( (|MapSpec.__default.LowerBound#requires| |start#0@@0| |key#0@@5|)) )))
(assert  (=> true (forall ((|start#0@@1| T@U) (|key#0@@6| T@U) ) (!  (=> (and (and (= (type |start#0@@1|) DatatypeTypeType) (= (type |key#0@@6|) (SeqType BoxType))) (or (|MapSpec.__default.LowerBound#canCall| |start#0@@1| |key#0@@6|) (and ($Is |start#0@@1| Tclass.UI.RangeStart) ($Is |key#0@@6| Tclass.KeyType.Key)))) (and (and (=> (UI.RangeStart.SInclusive_q |start#0@@1|) (|SeqComparison.__default.lte#canCall| (UI.RangeStart.key |start#0@@1|) |key#0@@6|)) (=> (=> (UI.RangeStart.SInclusive_q |start#0@@1|) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (UI.RangeStart.key |start#0@@1|) |key#0@@6|)) (=> (UI.RangeStart.SExclusive_q |start#0@@1|) (|SeqComparison.__default.lt#canCall| (UI.RangeStart.key |start#0@@1|) |key#0@@6|)))) (= (MapSpec.__default.LowerBound |start#0@@1| |key#0@@6|)  (and (=> (UI.RangeStart.SInclusive_q |start#0@@1|) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (UI.RangeStart.key |start#0@@1|) |key#0@@6|)) (=> (UI.RangeStart.SExclusive_q |start#0@@1|) (SeqComparison.__default.lt (UI.RangeStart.key |start#0@@1|) |key#0@@6|)))))) :qid |MapSpecsdfy.65:24| :skolemid |2325| :pattern ( (MapSpec.__default.LowerBound |start#0@@1| |key#0@@6|)) ))))
(assert  (=> true (forall ((|start#0@@2| T@U) (|key#0@@7| T@U) ) (!  (=> (and (and (= (type |start#0@@2|) DatatypeTypeType) (= (type |key#0@@7|) (SeqType BoxType))) (or (|MapSpec.__default.LowerBound#canCall| (Lit |start#0@@2|) (Lit |key#0@@7|)) (and ($Is |start#0@@2| Tclass.UI.RangeStart) ($Is |key#0@@7| Tclass.KeyType.Key)))) (and (and (=> (U_2_bool (Lit (bool_2_U (UI.RangeStart.SInclusive_q (Lit |start#0@@2|))))) (|SeqComparison.__default.lte#canCall| (Lit (UI.RangeStart.key (Lit |start#0@@2|))) (Lit |key#0@@7|))) (=> (=> (UI.RangeStart.SInclusive_q (Lit |start#0@@2|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit (UI.RangeStart.key (Lit |start#0@@2|))) (Lit |key#0@@7|))) (=> (U_2_bool (Lit (bool_2_U (UI.RangeStart.SExclusive_q (Lit |start#0@@2|))))) (|SeqComparison.__default.lt#canCall| (Lit (UI.RangeStart.key (Lit |start#0@@2|))) (Lit |key#0@@7|))))) (= (MapSpec.__default.LowerBound (Lit |start#0@@2|) (Lit |key#0@@7|))  (and (=> (UI.RangeStart.SInclusive_q (Lit |start#0@@2|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit (UI.RangeStart.key (Lit |start#0@@2|))) (Lit |key#0@@7|))) (=> (UI.RangeStart.SExclusive_q (Lit |start#0@@2|)) (SeqComparison.__default.lt (Lit (UI.RangeStart.key (Lit |start#0@@2|))) (Lit |key#0@@7|))))))) :qid |MapSpecsdfy.65:24| :weight 3 :skolemid |2326| :pattern ( (MapSpec.__default.LowerBound (Lit |start#0@@2|) (Lit |key#0@@7|))) ))))
(assert  (=> true (forall ((|key#0@@8| T@U) (|end#0| T@U) ) (!  (=> (and (and (= (type |key#0@@8|) (SeqType BoxType)) (= (type |end#0|) DatatypeTypeType)) (or (|MapSpec.__default.UpperBound#canCall| |key#0@@8| |end#0|) (and ($Is |key#0@@8| Tclass.KeyType.Key) ($Is |end#0| Tclass.UI.RangeEnd)))) true) :qid |MapSpecsdfy.71:24| :skolemid |2327| :pattern ( (MapSpec.__default.UpperBound |key#0@@8| |end#0|)) ))))
(assert (forall ((|key#0@@9| T@U) (|end#0@@0| T@U) ) (!  (=> (and (and (= (type |key#0@@9|) (SeqType BoxType)) (= (type |end#0@@0|) DatatypeTypeType)) (and ($Is |key#0@@9| Tclass.KeyType.Key) ($Is |end#0@@0| Tclass.UI.RangeEnd))) (= (|MapSpec.__default.UpperBound#requires| |key#0@@9| |end#0@@0|) true)) :qid |MapSpecsdfy.71:24| :skolemid |2328| :pattern ( (|MapSpec.__default.UpperBound#requires| |key#0@@9| |end#0@@0|)) )))
(assert  (=> true (forall ((|key#0@@10| T@U) (|end#0@@1| T@U) ) (!  (=> (and (and (= (type |key#0@@10|) (SeqType BoxType)) (= (type |end#0@@1|) DatatypeTypeType)) (or (|MapSpec.__default.UpperBound#canCall| |key#0@@10| |end#0@@1|) (and ($Is |key#0@@10| Tclass.KeyType.Key) ($Is |end#0@@1| Tclass.UI.RangeEnd)))) (and (and (=> (UI.RangeEnd.EInclusive_q |end#0@@1|) (|SeqComparison.__default.lte#canCall| |key#0@@10| (UI.RangeEnd.key |end#0@@1|))) (=> (=> (UI.RangeEnd.EInclusive_q |end#0@@1|) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |key#0@@10| (UI.RangeEnd.key |end#0@@1|))) (=> (UI.RangeEnd.EExclusive_q |end#0@@1|) (|SeqComparison.__default.lt#canCall| |key#0@@10| (UI.RangeEnd.key |end#0@@1|))))) (= (MapSpec.__default.UpperBound |key#0@@10| |end#0@@1|)  (and (=> (UI.RangeEnd.EInclusive_q |end#0@@1|) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |key#0@@10| (UI.RangeEnd.key |end#0@@1|))) (=> (UI.RangeEnd.EExclusive_q |end#0@@1|) (SeqComparison.__default.lt |key#0@@10| (UI.RangeEnd.key |end#0@@1|))))))) :qid |MapSpecsdfy.71:24| :skolemid |2329| :pattern ( (MapSpec.__default.UpperBound |key#0@@10| |end#0@@1|)) ))))
(assert  (=> true (forall ((|key#0@@11| T@U) (|end#0@@2| T@U) ) (!  (=> (and (and (= (type |key#0@@11|) (SeqType BoxType)) (= (type |end#0@@2|) DatatypeTypeType)) (or (|MapSpec.__default.UpperBound#canCall| (Lit |key#0@@11|) (Lit |end#0@@2|)) (and ($Is |key#0@@11| Tclass.KeyType.Key) ($Is |end#0@@2| Tclass.UI.RangeEnd)))) (and (and (=> (U_2_bool (Lit (bool_2_U (UI.RangeEnd.EInclusive_q (Lit |end#0@@2|))))) (|SeqComparison.__default.lte#canCall| (Lit |key#0@@11|) (Lit (UI.RangeEnd.key (Lit |end#0@@2|))))) (=> (=> (UI.RangeEnd.EInclusive_q (Lit |end#0@@2|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |key#0@@11|) (Lit (UI.RangeEnd.key (Lit |end#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (UI.RangeEnd.EExclusive_q (Lit |end#0@@2|))))) (|SeqComparison.__default.lt#canCall| (Lit |key#0@@11|) (Lit (UI.RangeEnd.key (Lit |end#0@@2|))))))) (= (MapSpec.__default.UpperBound (Lit |key#0@@11|) (Lit |end#0@@2|))  (and (=> (UI.RangeEnd.EInclusive_q (Lit |end#0@@2|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |key#0@@11|) (Lit (UI.RangeEnd.key (Lit |end#0@@2|))))) (=> (UI.RangeEnd.EExclusive_q (Lit |end#0@@2|)) (SeqComparison.__default.lt (Lit |key#0@@11|) (Lit (UI.RangeEnd.key (Lit |end#0@@2|))))))))) :qid |MapSpecsdfy.71:24| :weight 3 :skolemid |2330| :pattern ( (MapSpec.__default.UpperBound (Lit |key#0@@11|) (Lit |end#0@@2|))) ))))
(assert  (=> true (forall ((|start#0@@3| T@U) (|key#0@@12| T@U) (|end#0@@3| T@U) ) (!  (=> (and (and (and (= (type |start#0@@3|) DatatypeTypeType) (= (type |key#0@@12|) (SeqType BoxType))) (= (type |end#0@@3|) DatatypeTypeType)) (or (|MapSpec.__default.InRange#canCall| |start#0@@3| |key#0@@12| |end#0@@3|) (and (and ($Is |start#0@@3| Tclass.UI.RangeStart) ($Is |key#0@@12| Tclass.KeyType.Key)) ($Is |end#0@@3| Tclass.UI.RangeEnd)))) true) :qid |MapSpecsdfy.77:21| :skolemid |2331| :pattern ( (MapSpec.__default.InRange |start#0@@3| |key#0@@12| |end#0@@3|)) ))))
(assert (forall ((|start#0@@4| T@U) (|key#0@@13| T@U) (|end#0@@4| T@U) ) (!  (=> (and (and (and (= (type |start#0@@4|) DatatypeTypeType) (= (type |key#0@@13|) (SeqType BoxType))) (= (type |end#0@@4|) DatatypeTypeType)) (and (and ($Is |start#0@@4| Tclass.UI.RangeStart) ($Is |key#0@@13| Tclass.KeyType.Key)) ($Is |end#0@@4| Tclass.UI.RangeEnd))) (= (|MapSpec.__default.InRange#requires| |start#0@@4| |key#0@@13| |end#0@@4|) true)) :qid |MapSpecsdfy.77:21| :skolemid |2332| :pattern ( (|MapSpec.__default.InRange#requires| |start#0@@4| |key#0@@13| |end#0@@4|)) )))
(assert  (=> true (forall ((|start#0@@5| T@U) (|key#0@@14| T@U) (|end#0@@5| T@U) ) (!  (=> (and (and (and (= (type |start#0@@5|) DatatypeTypeType) (= (type |key#0@@14|) (SeqType BoxType))) (= (type |end#0@@5|) DatatypeTypeType)) (or (|MapSpec.__default.InRange#canCall| |start#0@@5| |key#0@@14| |end#0@@5|) (and (and ($Is |start#0@@5| Tclass.UI.RangeStart) ($Is |key#0@@14| Tclass.KeyType.Key)) ($Is |end#0@@5| Tclass.UI.RangeEnd)))) (and (and (|MapSpec.__default.LowerBound#canCall| |start#0@@5| |key#0@@14|) (=> (MapSpec.__default.LowerBound |start#0@@5| |key#0@@14|) (|MapSpec.__default.UpperBound#canCall| |key#0@@14| |end#0@@5|))) (= (MapSpec.__default.InRange |start#0@@5| |key#0@@14| |end#0@@5|)  (and (MapSpec.__default.LowerBound |start#0@@5| |key#0@@14|) (MapSpec.__default.UpperBound |key#0@@14| |end#0@@5|))))) :qid |MapSpecsdfy.77:21| :skolemid |2333| :pattern ( (MapSpec.__default.InRange |start#0@@5| |key#0@@14| |end#0@@5|)) ))))
(assert  (=> true (forall ((|start#0@@6| T@U) (|key#0@@15| T@U) (|end#0@@6| T@U) ) (!  (=> (and (and (and (= (type |start#0@@6|) DatatypeTypeType) (= (type |key#0@@15|) (SeqType BoxType))) (= (type |end#0@@6|) DatatypeTypeType)) (or (|MapSpec.__default.InRange#canCall| (Lit |start#0@@6|) (Lit |key#0@@15|) (Lit |end#0@@6|)) (and (and ($Is |start#0@@6| Tclass.UI.RangeStart) ($Is |key#0@@15| Tclass.KeyType.Key)) ($Is |end#0@@6| Tclass.UI.RangeEnd)))) (and (and (|MapSpec.__default.LowerBound#canCall| (Lit |start#0@@6|) (Lit |key#0@@15|)) (=> (U_2_bool (Lit (bool_2_U (MapSpec.__default.LowerBound (Lit |start#0@@6|) (Lit |key#0@@15|))))) (|MapSpec.__default.UpperBound#canCall| (Lit |key#0@@15|) (Lit |end#0@@6|)))) (= (MapSpec.__default.InRange (Lit |start#0@@6|) (Lit |key#0@@15|) (Lit |end#0@@6|)) (U_2_bool (Lit (bool_2_U  (and (MapSpec.__default.LowerBound (Lit |start#0@@6|) (Lit |key#0@@15|)) (MapSpec.__default.UpperBound (Lit |key#0@@15|) (Lit |end#0@@6|))))))))) :qid |MapSpecsdfy.77:21| :weight 3 :skolemid |2334| :pattern ( (MapSpec.__default.InRange (Lit |start#0@@6|) (Lit |key#0@@15|) (Lit |end#0@@6|))) ))))
(assert  (=> true (forall ((|start#0@@7| T@U) (|end#0@@7| T@U) ) (!  (=> (and (and (= (type |start#0@@7|) DatatypeTypeType) (= (type |end#0@@7|) DatatypeTypeType)) (or (|MapSpec.__default.NonEmptyRange#canCall| |start#0@@7| |end#0@@7|) (and ($Is |start#0@@7| Tclass.UI.RangeStart) ($Is |end#0@@7| Tclass.UI.RangeEnd)))) true) :qid |MapSpecsdfy.83:27| :skolemid |2335| :pattern ( (MapSpec.__default.NonEmptyRange |start#0@@7| |end#0@@7|)) ))))
(assert (forall ((|start#0@@8| T@U) (|end#0@@8| T@U) ) (!  (=> (and (and (= (type |start#0@@8|) DatatypeTypeType) (= (type |end#0@@8|) DatatypeTypeType)) (and ($Is |start#0@@8| Tclass.UI.RangeStart) ($Is |end#0@@8| Tclass.UI.RangeEnd))) (= (|MapSpec.__default.NonEmptyRange#requires| |start#0@@8| |end#0@@8|) true)) :qid |MapSpecsdfy.83:27| :skolemid |2336| :pattern ( (|MapSpec.__default.NonEmptyRange#requires| |start#0@@8| |end#0@@8|)) )))
(assert  (=> true (forall ((|start#0@@9| T@U) (|end#0@@9| T@U) ) (!  (=> (and (and (= (type |start#0@@9|) DatatypeTypeType) (= (type |end#0@@9|) DatatypeTypeType)) (or (|MapSpec.__default.NonEmptyRange#canCall| |start#0@@9| |end#0@@9|) (and ($Is |start#0@@9| Tclass.UI.RangeStart) ($Is |end#0@@9| Tclass.UI.RangeEnd)))) (and (=> (not (UI.RangeStart.NegativeInf_q |start#0@@9|)) (=> (not (UI.RangeEnd.PositiveInf_q |end#0@@9|)) (and (=> (UI.RangeStart.SInclusive_q |start#0@@9|) (=> (UI.RangeEnd.EInclusive_q |end#0@@9|) (|SeqComparison.__default.lte#canCall| (UI.RangeStart.key |start#0@@9|) (UI.RangeEnd.key |end#0@@9|)))) (=> (not (and (and (UI.RangeStart.SInclusive_q |start#0@@9|) (UI.RangeEnd.EInclusive_q |end#0@@9|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (UI.RangeStart.key |start#0@@9|) (UI.RangeEnd.key |end#0@@9|)))) (|SeqComparison.__default.lt#canCall| (UI.RangeStart.key |start#0@@9|) (UI.RangeEnd.key |end#0@@9|)))))) (= (MapSpec.__default.NonEmptyRange |start#0@@9| |end#0@@9|)  (or (or (or (UI.RangeStart.NegativeInf_q |start#0@@9|) (UI.RangeEnd.PositiveInf_q |end#0@@9|)) (and (and (UI.RangeStart.SInclusive_q |start#0@@9|) (UI.RangeEnd.EInclusive_q |end#0@@9|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (UI.RangeStart.key |start#0@@9|) (UI.RangeEnd.key |end#0@@9|)))) (SeqComparison.__default.lt (UI.RangeStart.key |start#0@@9|) (UI.RangeEnd.key |end#0@@9|)))))) :qid |MapSpecsdfy.83:27| :skolemid |2337| :pattern ( (MapSpec.__default.NonEmptyRange |start#0@@9| |end#0@@9|)) ))))
(assert  (=> true (forall ((|start#0@@10| T@U) (|end#0@@10| T@U) ) (!  (=> (and (and (= (type |start#0@@10|) DatatypeTypeType) (= (type |end#0@@10|) DatatypeTypeType)) (or (|MapSpec.__default.NonEmptyRange#canCall| (Lit |start#0@@10|) (Lit |end#0@@10|)) (and ($Is |start#0@@10| Tclass.UI.RangeStart) ($Is |end#0@@10| Tclass.UI.RangeEnd)))) (and (=> (not (U_2_bool (Lit (bool_2_U (UI.RangeStart.NegativeInf_q (Lit |start#0@@10|)))))) (=> (not (U_2_bool (Lit (bool_2_U (UI.RangeEnd.PositiveInf_q (Lit |end#0@@10|)))))) (and (=> (U_2_bool (Lit (bool_2_U (UI.RangeStart.SInclusive_q (Lit |start#0@@10|))))) (=> (U_2_bool (Lit (bool_2_U (UI.RangeEnd.EInclusive_q (Lit |end#0@@10|))))) (|SeqComparison.__default.lte#canCall| (Lit (UI.RangeStart.key (Lit |start#0@@10|))) (Lit (UI.RangeEnd.key (Lit |end#0@@10|)))))) (=> (not (and (and (UI.RangeStart.SInclusive_q (Lit |start#0@@10|)) (UI.RangeEnd.EInclusive_q (Lit |end#0@@10|))) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit (UI.RangeStart.key (Lit |start#0@@10|))) (Lit (UI.RangeEnd.key (Lit |end#0@@10|)))))) (|SeqComparison.__default.lt#canCall| (Lit (UI.RangeStart.key (Lit |start#0@@10|))) (Lit (UI.RangeEnd.key (Lit |end#0@@10|)))))))) (= (MapSpec.__default.NonEmptyRange (Lit |start#0@@10|) (Lit |end#0@@10|))  (or (or (or (UI.RangeStart.NegativeInf_q (Lit |start#0@@10|)) (UI.RangeEnd.PositiveInf_q (Lit |end#0@@10|))) (and (and (UI.RangeStart.SInclusive_q (Lit |start#0@@10|)) (UI.RangeEnd.EInclusive_q (Lit |end#0@@10|))) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit (UI.RangeStart.key (Lit |start#0@@10|))) (Lit (UI.RangeEnd.key (Lit |end#0@@10|)))))) (SeqComparison.__default.lt (Lit (UI.RangeStart.key (Lit |start#0@@10|))) (Lit (UI.RangeEnd.key (Lit |end#0@@10|)))))))) :qid |MapSpecsdfy.83:27| :weight 3 :skolemid |2338| :pattern ( (MapSpec.__default.NonEmptyRange (Lit |start#0@@10|) (Lit |end#0@@10|))) ))))
(assert  (=> true (forall ((|s#0@@28| T@U) (|s'#0@@4| T@U) (|uiop#0@@4| T@U) (|start#0@@11| T@U) (|results#0| T@U) (|end#0@@11| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |s#0@@28|) DatatypeTypeType) (= (type |s'#0@@4|) DatatypeTypeType)) (= (type |uiop#0@@4|) DatatypeTypeType)) (= (type |start#0@@11|) DatatypeTypeType)) (= (type |results#0|) (SeqType BoxType))) (= (type |end#0@@11|) DatatypeTypeType)) (or (|MapSpec.__default.Succ#canCall| |s#0@@28| |s'#0@@4| |uiop#0@@4| |start#0@@11| |results#0| |end#0@@11|) (and (and (and (and (and ($Is |s#0@@28| Tclass.MapSpec.Variables) ($Is |s'#0@@4| Tclass.MapSpec.Variables)) ($Is |uiop#0@@4| Tclass.UI.Op)) ($Is |start#0@@11| Tclass.UI.RangeStart)) ($Is |results#0| (TSeq Tclass.UI.SuccResult))) ($Is |end#0@@11| Tclass.UI.RangeEnd)))) true) :qid |MapSpecsdfy.91:18| :skolemid |2339| :pattern ( (MapSpec.__default.Succ |s#0@@28| |s'#0@@4| |uiop#0@@4| |start#0@@11| |results#0| |end#0@@11|)) ))))
(assert (forall ((|s#0@@29| T@U) (|s'#0@@5| T@U) (|uiop#0@@5| T@U) (|start#0@@12| T@U) (|results#0@@0| T@U) (|end#0@@12| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |s#0@@29|) DatatypeTypeType) (= (type |s'#0@@5|) DatatypeTypeType)) (= (type |uiop#0@@5|) DatatypeTypeType)) (= (type |start#0@@12|) DatatypeTypeType)) (= (type |results#0@@0|) (SeqType BoxType))) (= (type |end#0@@12|) DatatypeTypeType)) (and (and (and (and (and ($Is |s#0@@29| Tclass.MapSpec.Variables) ($Is |s'#0@@5| Tclass.MapSpec.Variables)) ($Is |uiop#0@@5| Tclass.UI.Op)) ($Is |start#0@@12| Tclass.UI.RangeStart)) ($Is |results#0@@0| (TSeq Tclass.UI.SuccResult))) ($Is |end#0@@12| Tclass.UI.RangeEnd))) (= (|MapSpec.__default.Succ#requires| |s#0@@29| |s'#0@@5| |uiop#0@@5| |start#0@@12| |results#0@@0| |end#0@@12|) true)) :qid |MapSpecsdfy.91:18| :skolemid |2340| :pattern ( (|MapSpec.__default.Succ#requires| |s#0@@29| |s'#0@@5| |uiop#0@@5| |start#0@@12| |results#0@@0| |end#0@@12|)) )))
(assert  (=> true (forall ((|s#0@@30| T@U) (|s'#0@@6| T@U) (|uiop#0@@6| T@U) (|start#0@@13| T@U) (|results#0@@1| T@U) (|end#0@@13| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |s#0@@30|) DatatypeTypeType) (= (type |s'#0@@6|) DatatypeTypeType)) (= (type |uiop#0@@6|) DatatypeTypeType)) (= (type |start#0@@13|) DatatypeTypeType)) (= (type |results#0@@1|) (SeqType BoxType))) (= (type |end#0@@13|) DatatypeTypeType)) (or (|MapSpec.__default.Succ#canCall| |s#0@@30| |s'#0@@6| |uiop#0@@6| |start#0@@13| |results#0@@1| |end#0@@13|) (and (and (and (and (and ($Is |s#0@@30| Tclass.MapSpec.Variables) ($Is |s'#0@@6| Tclass.MapSpec.Variables)) ($Is |uiop#0@@6| Tclass.UI.Op)) ($Is |start#0@@13| Tclass.UI.RangeStart)) ($Is |results#0@@1| (TSeq Tclass.UI.SuccResult))) ($Is |end#0@@13| Tclass.UI.RangeEnd)))) (and (and (|$IsA#UI.Op| |uiop#0@@6|) (=> (|UI.Op#Equal| |uiop#0@@6| (|#UI.Op.SuccOp| |start#0@@13| |results#0@@1| |end#0@@13|)) (and (|MapSpec.__default.WF#canCall| |s#0@@30|) (=> (MapSpec.__default.WF |s#0@@30|) (and (and (|$IsA#MapSpec.Variables| |s'#0@@6|) (|$IsA#MapSpec.Variables| |s#0@@30|)) (=> (|MapSpec.Variables#Equal| |s'#0@@6| |s#0@@30|) (and (|MapSpec.__default.NonEmptyRange#canCall| |start#0@@13| |end#0@@13|) (=> (MapSpec.__default.NonEmptyRange |start#0@@13| |end#0@@13|) (and (forall ((|i#0@@27| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@27|) (< |i#0@@27| (|Seq#Length| |results#0@@1|))) (and (and (MapSpec.Variables.Variables_q |s#0@@30|) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@27|)))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@27|))))) :qid |MapSpecsdfy.98:16| :skolemid |2347| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@27|))) )) (=> (forall ((|i#0@@28| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@28|) (< |i#0@@28| (|Seq#Length| |results#0@@1|))) (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@30|)) ($Box (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@28|)))))) (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@28|))))) :qid |MapSpecsdfy.98:16| :skolemid |2356| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@28|))) )) (and (forall ((|i#1@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@1|) (< |i#1@@1| (|Seq#Length| |results#0@@1|))) (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#1@@1|))) |MapSpec.__default.EmptyValue#canCall|)) :qid |MapSpecsdfy.99:16| :skolemid |2348| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#1@@1|))) )) (=> (forall ((|i#1@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@2|) (< |i#1@@2| (|Seq#Length| |results#0@@1|))) (not (= (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#1@@2|))) MapSpec.__default.EmptyValue))) :qid |MapSpecsdfy.99:16| :skolemid |2355| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#1@@2|))) )) (and (forall ((|i#2| Int) ) (!  (=> (and (<= (LitInt 0) |i#2|) (< |i#2| (|Seq#Length| |results#0@@1|))) (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#2|))) (|MapSpec.__default.InRange#canCall| |start#0@@13| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#2|))) |end#0@@13|))) :qid |MapSpecsdfy.100:16| :skolemid |2349| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#2|))) )) (=> (forall ((|i#2@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@0|) (< |i#2@@0| (|Seq#Length| |results#0@@1|))) (MapSpec.__default.InRange |start#0@@13| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#2@@0|))) |end#0@@13|)) :qid |MapSpecsdfy.100:16| :skolemid |2354| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#2@@0|))) )) (and (forall ((|i#3| Int) (|j#0| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#3|) (< |i#3| |j#0|)) (< |j#0| (|Seq#Length| |results#0@@1|))) (and (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#3|))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |j#0|)))) (|SeqComparison.__default.lt#canCall| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#3|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |j#0|)))))) :qid |MapSpecsdfy.101:16| :skolemid |2350| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |j#0|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#3|))) )) (=> (forall ((|i#3@@0| Int) (|j#0@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#3@@0|) (< |i#3@@0| |j#0@@0|)) (< |j#0@@0| (|Seq#Length| |results#0@@1|))) (SeqComparison.__default.lt (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#3@@0|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |j#0@@0|))))) :qid |MapSpecsdfy.101:16| :skolemid |2353| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |j#0@@0|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#3@@0|))) )) (forall ((|key#0@@16| T@U) ) (!  (=> (and (= (type |key#0@@16|) (SeqType BoxType)) ($Is |key#0@@16| Tclass.KeyType.Key)) (and (and (|MapSpec.__default.InRange#canCall| |start#0@@13| |key#0@@16| |end#0@@13|) (=> (MapSpec.__default.InRange |start#0@@13| |key#0@@16| |end#0@@13|) (and (MapSpec.Variables.Variables_q |s#0@@30|) |MapSpec.__default.EmptyValue#canCall|))) (=> (and (MapSpec.__default.InRange |start#0@@13| |key#0@@16| |end#0@@13|) (not (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@30|)) ($Box |key#0@@16|))) MapSpec.__default.EmptyValue))) (forall ((|i#4| Int) ) (!  (=> (<= (LitInt 0) |i#4|) (=> (< |i#4| (|Seq#Length| |results#0@@1|)) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#4|))))) :qid |MapSpecsdfy.103:16| :skolemid |2351| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#4|))) ))))) :qid |MapSpecsdfy.102:16| :skolemid |2352| :pattern ( ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@30|)) ($Box |key#0@@16|)))) :pattern ( (MapSpec.__default.InRange |start#0@@13| |key#0@@16| |end#0@@13|)) )))))))))))))))))) (= (MapSpec.__default.Succ |s#0@@30| |s'#0@@6| |uiop#0@@6| |start#0@@13| |results#0@@1| |end#0@@13|)  (and (and (and (and (and (and (and (and (|UI.Op#Equal| |uiop#0@@6| (|#UI.Op.SuccOp| |start#0@@13| |results#0@@1| |end#0@@13|)) (MapSpec.__default.WF |s#0@@30|)) (|MapSpec.Variables#Equal| |s'#0@@6| |s#0@@30|)) (MapSpec.__default.NonEmptyRange |start#0@@13| |end#0@@13|)) (forall ((|i#0@@29| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@29|) (< |i#0@@29| (|Seq#Length| |results#0@@1|))) (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@30|)) ($Box (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@29|)))))) (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@29|))))) :qid |MapSpecsdfy.98:16| :skolemid |2341| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@29|))) ))) (forall ((|i#1@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@3|) (< |i#1@@3| (|Seq#Length| |results#0@@1|))) (not (= (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#1@@3|))) MapSpec.__default.EmptyValue))) :qid |MapSpecsdfy.99:16| :skolemid |2342| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#1@@3|))) ))) (forall ((|i#2@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@1|) (< |i#2@@1| (|Seq#Length| |results#0@@1|))) (MapSpec.__default.InRange |start#0@@13| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#2@@1|))) |end#0@@13|)) :qid |MapSpecsdfy.100:16| :skolemid |2343| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#2@@1|))) ))) (forall ((|i#3@@1| Int) (|j#0@@1| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#3@@1|) (< |i#3@@1| |j#0@@1|)) (< |j#0@@1| (|Seq#Length| |results#0@@1|))) (SeqComparison.__default.lt (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#3@@1|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |j#0@@1|))))) :qid |MapSpecsdfy.101:16| :skolemid |2344| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |j#0@@1|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#3@@1|))) ))) (forall ((|key#0@@17| T@U) ) (!  (=> (= (type |key#0@@17|) (SeqType BoxType)) (=> (and ($Is |key#0@@17| Tclass.KeyType.Key) (and (MapSpec.__default.InRange |start#0@@13| |key#0@@17| |end#0@@13|) (not (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@30|)) ($Box |key#0@@17|))) MapSpec.__default.EmptyValue)))) (exists ((|i#4@@0| Int) ) (!  (and (and (<= (LitInt 0) |i#4@@0|) (< |i#4@@0| (|Seq#Length| |results#0@@1|))) (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#4@@0|))) |key#0@@17|)) :qid |MapSpecsdfy.103:16| :skolemid |2345| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#4@@0|))) )))) :qid |MapSpecsdfy.102:16| :skolemid |2346| :pattern ( ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@30|)) ($Box |key#0@@17|)))) :pattern ( (MapSpec.__default.InRange |start#0@@13| |key#0@@17| |end#0@@13|)) )))))) :qid |MapSpecsdfy.91:18| :skolemid |2357| :pattern ( (MapSpec.__default.Succ |s#0@@30| |s'#0@@6| |uiop#0@@6| |start#0@@13| |results#0@@1| |end#0@@13|)) ))))
(assert  (=> true (forall ((|s#0@@31| T@U) (|s'#0@@7| T@U) (|uiop#0@@7| T@U) (|start#0@@14| T@U) (|results#0@@2| T@U) (|end#0@@14| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |s#0@@31|) DatatypeTypeType) (= (type |s'#0@@7|) DatatypeTypeType)) (= (type |uiop#0@@7|) DatatypeTypeType)) (= (type |start#0@@14|) DatatypeTypeType)) (= (type |results#0@@2|) (SeqType BoxType))) (= (type |end#0@@14|) DatatypeTypeType)) (or (|MapSpec.__default.Succ#canCall| (Lit |s#0@@31|) (Lit |s'#0@@7|) (Lit |uiop#0@@7|) (Lit |start#0@@14|) (Lit |results#0@@2|) (Lit |end#0@@14|)) (and (and (and (and (and ($Is |s#0@@31| Tclass.MapSpec.Variables) ($Is |s'#0@@7| Tclass.MapSpec.Variables)) ($Is |uiop#0@@7| Tclass.UI.Op)) ($Is |start#0@@14| Tclass.UI.RangeStart)) ($Is |results#0@@2| (TSeq Tclass.UI.SuccResult))) ($Is |end#0@@14| Tclass.UI.RangeEnd)))) (and (and (|$IsA#UI.Op| (Lit |uiop#0@@7|)) (=> (|UI.Op#Equal| |uiop#0@@7| (|#UI.Op.SuccOp| (Lit |start#0@@14|) (Lit |results#0@@2|) (Lit |end#0@@14|))) (and (|MapSpec.__default.WF#canCall| (Lit |s#0@@31|)) (=> (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s#0@@31|))))) (and (and (|$IsA#MapSpec.Variables| (Lit |s'#0@@7|)) (|$IsA#MapSpec.Variables| (Lit |s#0@@31|))) (=> (|MapSpec.Variables#Equal| |s'#0@@7| |s#0@@31|) (and (|MapSpec.__default.NonEmptyRange#canCall| (Lit |start#0@@14|) (Lit |end#0@@14|)) (=> (U_2_bool (Lit (bool_2_U (MapSpec.__default.NonEmptyRange (Lit |start#0@@14|) (Lit |end#0@@14|))))) (and (forall ((|i#5| Int) ) (!  (=> (and (<= (LitInt 0) |i#5|) (< |i#5| (|Seq#Length| (Lit |results#0@@2|)))) (and (and (MapSpec.Variables.Variables_q (Lit |s#0@@31|)) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#5|)))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#5|))))) :qid |MapSpecsdfy.98:16| :skolemid |2364| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#5|))) )) (=> (forall ((|i#5@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@0|) (< |i#5@@0| (|Seq#Length| (Lit |results#0@@2|)))) (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@31|)))) ($Box (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#5@@0|)))))) (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#5@@0|))))) :qid |MapSpecsdfy.98:16| :skolemid |2373| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#5@@0|))) )) (and (forall ((|i#6| Int) ) (!  (=> (and (<= (LitInt 0) |i#6|) (< |i#6| (|Seq#Length| (Lit |results#0@@2|)))) (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#6|))) |MapSpec.__default.EmptyValue#canCall|)) :qid |MapSpecsdfy.99:16| :skolemid |2365| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#6|))) )) (=> (forall ((|i#6@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#6@@0|) (< |i#6@@0| (|Seq#Length| (Lit |results#0@@2|)))) (not (= (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#6@@0|))) MapSpec.__default.EmptyValue))) :qid |MapSpecsdfy.99:16| :skolemid |2372| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#6@@0|))) )) (and (forall ((|i#7| Int) ) (!  (=> (and (<= (LitInt 0) |i#7|) (< |i#7| (|Seq#Length| (Lit |results#0@@2|)))) (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#7|))) (|MapSpec.__default.InRange#canCall| (Lit |start#0@@14|) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#7|))) (Lit |end#0@@14|)))) :qid |MapSpecsdfy.100:16| :skolemid |2366| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#7|))) )) (=> (forall ((|i#7@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#7@@0|) (< |i#7@@0| (|Seq#Length| (Lit |results#0@@2|)))) (MapSpec.__default.InRange (Lit |start#0@@14|) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#7@@0|))) (Lit |end#0@@14|))) :qid |MapSpecsdfy.100:16| :skolemid |2371| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#7@@0|))) )) (and (forall ((|i#8| Int) (|j#1| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#8|) (< |i#8| |j#1|)) (< |j#1| (|Seq#Length| (Lit |results#0@@2|)))) (and (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#8|))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |j#1|)))) (|SeqComparison.__default.lt#canCall| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#8|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |j#1|)))))) :qid |MapSpecsdfy.101:16| :skolemid |2367| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |j#1|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#8|))) )) (=> (forall ((|i#8@@0| Int) (|j#1@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#8@@0|) (< |i#8@@0| |j#1@@0|)) (< |j#1@@0| (|Seq#Length| (Lit |results#0@@2|)))) (SeqComparison.__default.lt (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#8@@0|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |j#1@@0|))))) :qid |MapSpecsdfy.101:16| :skolemid |2370| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |j#1@@0|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#8@@0|))) )) (forall ((|key#1| T@U) ) (!  (=> (and (= (type |key#1|) (SeqType BoxType)) ($Is |key#1| Tclass.KeyType.Key)) (and (and (|MapSpec.__default.InRange#canCall| (Lit |start#0@@14|) |key#1| (Lit |end#0@@14|)) (=> (MapSpec.__default.InRange (Lit |start#0@@14|) |key#1| (Lit |end#0@@14|)) (and (MapSpec.Variables.Variables_q (Lit |s#0@@31|)) |MapSpec.__default.EmptyValue#canCall|))) (=> (and (MapSpec.__default.InRange (Lit |start#0@@14|) |key#1| (Lit |end#0@@14|)) (not (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@31|)))) ($Box |key#1|))) MapSpec.__default.EmptyValue))) (forall ((|i#9| Int) ) (!  (=> (<= (LitInt 0) |i#9|) (=> (< |i#9| (|Seq#Length| (Lit |results#0@@2|))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#9|))))) :qid |MapSpecsdfy.103:16| :skolemid |2368| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#9|))) ))))) :qid |MapSpecsdfy.102:16| :skolemid |2369| :pattern ( ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@31|)) ($Box |key#1|)))) :pattern ( (MapSpec.__default.InRange |start#0@@14| |key#1| |end#0@@14|)) )))))))))))))))))) (= (MapSpec.__default.Succ (Lit |s#0@@31|) (Lit |s'#0@@7|) (Lit |uiop#0@@7|) (Lit |start#0@@14|) (Lit |results#0@@2|) (Lit |end#0@@14|))  (and (and (and (and (and (and (and (and (|UI.Op#Equal| |uiop#0@@7| (|#UI.Op.SuccOp| (Lit |start#0@@14|) (Lit |results#0@@2|) (Lit |end#0@@14|))) (MapSpec.__default.WF (Lit |s#0@@31|))) (|MapSpec.Variables#Equal| |s'#0@@7| |s#0@@31|)) (MapSpec.__default.NonEmptyRange (Lit |start#0@@14|) (Lit |end#0@@14|))) (forall ((|i#5@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@1|) (< |i#5@@1| (|Seq#Length| (Lit |results#0@@2|)))) (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@31|)))) ($Box (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#5@@1|)))))) (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#5@@1|))))) :qid |MapSpecsdfy.98:16| :skolemid |2358| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#5@@1|))) ))) (forall ((|i#6@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#6@@1|) (< |i#6@@1| (|Seq#Length| (Lit |results#0@@2|)))) (not (= (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#6@@1|))) MapSpec.__default.EmptyValue))) :qid |MapSpecsdfy.99:16| :skolemid |2359| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#6@@1|))) ))) (forall ((|i#7@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#7@@1|) (< |i#7@@1| (|Seq#Length| (Lit |results#0@@2|)))) (MapSpec.__default.InRange (Lit |start#0@@14|) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#7@@1|))) (Lit |end#0@@14|))) :qid |MapSpecsdfy.100:16| :skolemid |2360| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#7@@1|))) ))) (forall ((|i#8@@1| Int) (|j#1@@1| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#8@@1|) (< |i#8@@1| |j#1@@1|)) (< |j#1@@1| (|Seq#Length| (Lit |results#0@@2|)))) (SeqComparison.__default.lt (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#8@@1|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |j#1@@1|))))) :qid |MapSpecsdfy.101:16| :skolemid |2361| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |j#1@@1|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#8@@1|))) ))) (forall ((|key#1@@0| T@U) ) (!  (=> (= (type |key#1@@0|) (SeqType BoxType)) (=> (and ($Is |key#1@@0| Tclass.KeyType.Key) (and (MapSpec.__default.InRange (Lit |start#0@@14|) |key#1@@0| (Lit |end#0@@14|)) (not (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@31|)))) ($Box |key#1@@0|))) MapSpec.__default.EmptyValue)))) (exists ((|i#9@@0| Int) ) (!  (and (and (<= (LitInt 0) |i#9@@0|) (< |i#9@@0| (|Seq#Length| (Lit |results#0@@2|)))) (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#9@@0|))) |key#1@@0|)) :qid |MapSpecsdfy.103:16| :skolemid |2362| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#9@@0|))) )))) :qid |MapSpecsdfy.102:16| :skolemid |2363| :pattern ( ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@31|)) ($Box |key#1@@0|)))) :pattern ( (MapSpec.__default.InRange |start#0@@14| |key#1@@0| |end#0@@14|)) )))))) :qid |MapSpecsdfy.91:18| :weight 3 :skolemid |2374| :pattern ( (MapSpec.__default.Succ (Lit |s#0@@31|) (Lit |s'#0@@7|) (Lit |uiop#0@@7|) (Lit |start#0@@14|) (Lit |results#0@@2|) (Lit |end#0@@14|))) ))))
(assert  (=> true (forall ((|s#0@@32| T@U) (|s'#0@@8| T@U) (|uiop#0@@8| T@U) (|key#0@@18| T@U) (|new_value#0| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |s#0@@32|) DatatypeTypeType) (= (type |s'#0@@8|) DatatypeTypeType)) (= (type |uiop#0@@8|) DatatypeTypeType)) (= (type |key#0@@18|) (SeqType BoxType))) (= (type |new_value#0|) (SeqType BoxType))) (or (|MapSpec.__default.Write#canCall| |s#0@@32| |s'#0@@8| |uiop#0@@8| |key#0@@18| |new_value#0|) (and (and (and (and ($Is |s#0@@32| Tclass.MapSpec.Variables) ($Is |s'#0@@8| Tclass.MapSpec.Variables)) ($Is |uiop#0@@8| Tclass.UI.Op)) ($Is |key#0@@18| Tclass.KeyType.Key)) ($Is |new_value#0| Tclass.ValueType.Value)))) (MapSpec.__default.Write |s#0@@32| |s'#0@@8| |uiop#0@@8| |key#0@@18| |new_value#0|)) (MapSpec.__default.WF |s'#0@@8|)) :qid |MapSpecsdfy.106:19| :skolemid |2375| :pattern ( (MapSpec.__default.Write |s#0@@32| |s'#0@@8| |uiop#0@@8| |key#0@@18| |new_value#0|)) ))))
(assert (forall ((|s#0@@33| T@U) (|s'#0@@9| T@U) (|uiop#0@@9| T@U) (|key#0@@19| T@U) (|new_value#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@33|) DatatypeTypeType) (= (type |s'#0@@9|) DatatypeTypeType)) (= (type |uiop#0@@9|) DatatypeTypeType)) (= (type |key#0@@19|) (SeqType BoxType))) (= (type |new_value#0@@0|) (SeqType BoxType))) (and (and (and (and ($Is |s#0@@33| Tclass.MapSpec.Variables) ($Is |s'#0@@9| Tclass.MapSpec.Variables)) ($Is |uiop#0@@9| Tclass.UI.Op)) ($Is |key#0@@19| Tclass.KeyType.Key)) ($Is |new_value#0@@0| Tclass.ValueType.Value))) (= (|MapSpec.__default.Write#requires| |s#0@@33| |s'#0@@9| |uiop#0@@9| |key#0@@19| |new_value#0@@0|) true)) :qid |MapSpecsdfy.106:19| :skolemid |2376| :pattern ( (|MapSpec.__default.Write#requires| |s#0@@33| |s'#0@@9| |uiop#0@@9| |key#0@@19| |new_value#0@@0|)) )))
(assert  (=> true (forall ((|s#0@@34| T@U) (|s'#0@@10| T@U) (|uiop#0@@10| T@U) (|key#0@@20| T@U) (|new_value#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@34|) DatatypeTypeType) (= (type |s'#0@@10|) DatatypeTypeType)) (= (type |uiop#0@@10|) DatatypeTypeType)) (= (type |key#0@@20|) (SeqType BoxType))) (= (type |new_value#0@@1|) (SeqType BoxType))) (or (|MapSpec.__default.Write#canCall| |s#0@@34| |s'#0@@10| |uiop#0@@10| |key#0@@20| |new_value#0@@1|) (and (and (and (and ($Is |s#0@@34| Tclass.MapSpec.Variables) ($Is |s'#0@@10| Tclass.MapSpec.Variables)) ($Is |uiop#0@@10| Tclass.UI.Op)) ($Is |key#0@@20| Tclass.KeyType.Key)) ($Is |new_value#0@@1| Tclass.ValueType.Value)))) (and (and (|$IsA#UI.Op| |uiop#0@@10|) (=> (|UI.Op#Equal| |uiop#0@@10| (|#UI.Op.PutOp| |key#0@@20| |new_value#0@@1|)) (and (|MapSpec.__default.WF#canCall| |s#0@@34|) (=> (MapSpec.__default.WF |s#0@@34|) (and (|MapSpec.__default.WF#canCall| |s'#0@@10|) (=> (MapSpec.__default.WF |s'#0@@10|) (and (MapSpec.Variables.Variables_q |s'#0@@10|) (MapSpec.Variables.Variables_q |s#0@@34|)))))))) (= (MapSpec.__default.Write |s#0@@34| |s'#0@@10| |uiop#0@@10| |key#0@@20| |new_value#0@@1|)  (and (and (and (|UI.Op#Equal| |uiop#0@@10| (|#UI.Op.PutOp| |key#0@@20| |new_value#0@@1|)) (MapSpec.__default.WF |s#0@@34|)) (MapSpec.__default.WF |s'#0@@10|)) (|IMap#Equal| (MapSpec.Variables.view |s'#0@@10|) (|IMap#Build| (MapSpec.Variables.view |s#0@@34|) ($Box |key#0@@20|) ($Box |new_value#0@@1|))))))) :qid |MapSpecsdfy.106:19| :skolemid |2377| :pattern ( (MapSpec.__default.Write |s#0@@34| |s'#0@@10| |uiop#0@@10| |key#0@@20| |new_value#0@@1|)) ))))
(assert  (=> true (forall ((|s#0@@35| T@U) (|s'#0@@11| T@U) (|uiop#0@@11| T@U) (|key#0@@21| T@U) (|new_value#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@35|) DatatypeTypeType) (= (type |s'#0@@11|) DatatypeTypeType)) (= (type |uiop#0@@11|) DatatypeTypeType)) (= (type |key#0@@21|) (SeqType BoxType))) (= (type |new_value#0@@2|) (SeqType BoxType))) (or (|MapSpec.__default.Write#canCall| (Lit |s#0@@35|) (Lit |s'#0@@11|) (Lit |uiop#0@@11|) (Lit |key#0@@21|) |new_value#0@@2|) (and (and (and (and ($Is |s#0@@35| Tclass.MapSpec.Variables) ($Is |s'#0@@11| Tclass.MapSpec.Variables)) ($Is |uiop#0@@11| Tclass.UI.Op)) ($Is |key#0@@21| Tclass.KeyType.Key)) ($Is |new_value#0@@2| Tclass.ValueType.Value)))) (and (and (|$IsA#UI.Op| (Lit |uiop#0@@11|)) (=> (|UI.Op#Equal| |uiop#0@@11| (|#UI.Op.PutOp| (Lit |key#0@@21|) |new_value#0@@2|)) (and (|MapSpec.__default.WF#canCall| (Lit |s#0@@35|)) (=> (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s#0@@35|))))) (and (|MapSpec.__default.WF#canCall| (Lit |s'#0@@11|)) (=> (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s'#0@@11|))))) (and (MapSpec.Variables.Variables_q (Lit |s'#0@@11|)) (MapSpec.Variables.Variables_q (Lit |s#0@@35|))))))))) (= (MapSpec.__default.Write (Lit |s#0@@35|) (Lit |s'#0@@11|) (Lit |uiop#0@@11|) (Lit |key#0@@21|) |new_value#0@@2|)  (and (and (and (|UI.Op#Equal| |uiop#0@@11| (|#UI.Op.PutOp| (Lit |key#0@@21|) |new_value#0@@2|)) (MapSpec.__default.WF (Lit |s#0@@35|))) (MapSpec.__default.WF (Lit |s'#0@@11|))) (|IMap#Equal| (MapSpec.Variables.view (Lit |s'#0@@11|)) (|IMap#Build| (Lit (MapSpec.Variables.view (Lit |s#0@@35|))) ($Box (Lit |key#0@@21|)) ($Box |new_value#0@@2|))))))) :qid |MapSpecsdfy.106:19| :weight 3 :skolemid |2378| :pattern ( (MapSpec.__default.Write (Lit |s#0@@35|) (Lit |s'#0@@11|) (Lit |uiop#0@@11|) (Lit |key#0@@21|) |new_value#0@@2|)) ))))
(assert  (=> true (forall ((|s#0@@36| T@U) (|s'#0@@12| T@U) (|uiop#0@@12| T@U) (|key#0@@22| T@U) (|new_value#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@36|) DatatypeTypeType) (= (type |s'#0@@12|) DatatypeTypeType)) (= (type |uiop#0@@12|) DatatypeTypeType)) (= (type |key#0@@22|) (SeqType BoxType))) (= (type |new_value#0@@3|) (SeqType BoxType))) (or (|MapSpec.__default.Write#canCall| (Lit |s#0@@36|) (Lit |s'#0@@12|) (Lit |uiop#0@@12|) (Lit |key#0@@22|) (Lit |new_value#0@@3|)) (and (and (and (and ($Is |s#0@@36| Tclass.MapSpec.Variables) ($Is |s'#0@@12| Tclass.MapSpec.Variables)) ($Is |uiop#0@@12| Tclass.UI.Op)) ($Is |key#0@@22| Tclass.KeyType.Key)) ($Is |new_value#0@@3| Tclass.ValueType.Value)))) (and (and (|$IsA#UI.Op| (Lit |uiop#0@@12|)) (=> (|UI.Op#Equal| |uiop#0@@12| (|#UI.Op.PutOp| (Lit |key#0@@22|) (Lit |new_value#0@@3|))) (and (|MapSpec.__default.WF#canCall| (Lit |s#0@@36|)) (=> (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s#0@@36|))))) (and (|MapSpec.__default.WF#canCall| (Lit |s'#0@@12|)) (=> (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s'#0@@12|))))) (and (MapSpec.Variables.Variables_q (Lit |s'#0@@12|)) (MapSpec.Variables.Variables_q (Lit |s#0@@36|))))))))) (= (MapSpec.__default.Write (Lit |s#0@@36|) (Lit |s'#0@@12|) (Lit |uiop#0@@12|) (Lit |key#0@@22|) (Lit |new_value#0@@3|))  (and (and (and (|UI.Op#Equal| |uiop#0@@12| (|#UI.Op.PutOp| (Lit |key#0@@22|) (Lit |new_value#0@@3|))) (MapSpec.__default.WF (Lit |s#0@@36|))) (MapSpec.__default.WF (Lit |s'#0@@12|))) (|IMap#Equal| (MapSpec.Variables.view (Lit |s'#0@@12|)) (|IMap#Build| (Lit (MapSpec.Variables.view (Lit |s#0@@36|))) ($Box (Lit |key#0@@22|)) ($Box (Lit |new_value#0@@3|)))))))) :qid |MapSpecsdfy.106:19| :weight 3 :skolemid |2379| :pattern ( (MapSpec.__default.Write (Lit |s#0@@36|) (Lit |s'#0@@12|) (Lit |uiop#0@@12|) (Lit |key#0@@22|) (Lit |new_value#0@@3|))) ))))
(assert  (=> true (forall ((|s#0@@37| T@U) (|s'#0@@13| T@U) (|uiop#0@@13| T@U) ) (!  (=> (and (and (and (= (type |s#0@@37|) DatatypeTypeType) (= (type |s'#0@@13|) DatatypeTypeType)) (= (type |uiop#0@@13|) DatatypeTypeType)) (or (|MapSpec.__default.Stutter#canCall| |s#0@@37| |s'#0@@13| |uiop#0@@13|) (and (and ($Is |s#0@@37| Tclass.MapSpec.Variables) ($Is |s'#0@@13| Tclass.MapSpec.Variables)) ($Is |uiop#0@@13| Tclass.UI.Op)))) true) :qid |MapSpecsdfy.115:21| :skolemid |2380| :pattern ( (MapSpec.__default.Stutter |s#0@@37| |s'#0@@13| |uiop#0@@13|)) ))))
(assert (forall ((|s#0@@38| T@U) (|s'#0@@14| T@U) (|uiop#0@@14| T@U) ) (!  (=> (and (and (and (= (type |s#0@@38|) DatatypeTypeType) (= (type |s'#0@@14|) DatatypeTypeType)) (= (type |uiop#0@@14|) DatatypeTypeType)) (and (and ($Is |s#0@@38| Tclass.MapSpec.Variables) ($Is |s'#0@@14| Tclass.MapSpec.Variables)) ($Is |uiop#0@@14| Tclass.UI.Op))) (= (|MapSpec.__default.Stutter#requires| |s#0@@38| |s'#0@@14| |uiop#0@@14|) true)) :qid |MapSpecsdfy.115:21| :skolemid |2381| :pattern ( (|MapSpec.__default.Stutter#requires| |s#0@@38| |s'#0@@14| |uiop#0@@14|)) )))
(assert  (=> true (forall ((|s#0@@39| T@U) (|s'#0@@15| T@U) (|uiop#0@@15| T@U) ) (!  (=> (and (and (and (= (type |s#0@@39|) DatatypeTypeType) (= (type |s'#0@@15|) DatatypeTypeType)) (= (type |uiop#0@@15|) DatatypeTypeType)) (or (|MapSpec.__default.Stutter#canCall| |s#0@@39| |s'#0@@15| |uiop#0@@15|) (and (and ($Is |s#0@@39| Tclass.MapSpec.Variables) ($Is |s'#0@@15| Tclass.MapSpec.Variables)) ($Is |uiop#0@@15| Tclass.UI.Op)))) (and (=> (UI.Op.NoOp_q |uiop#0@@15|) (and (|$IsA#MapSpec.Variables| |s'#0@@15|) (|$IsA#MapSpec.Variables| |s#0@@39|))) (= (MapSpec.__default.Stutter |s#0@@39| |s'#0@@15| |uiop#0@@15|)  (and (UI.Op.NoOp_q |uiop#0@@15|) (|MapSpec.Variables#Equal| |s'#0@@15| |s#0@@39|))))) :qid |MapSpecsdfy.115:21| :skolemid |2382| :pattern ( (MapSpec.__default.Stutter |s#0@@39| |s'#0@@15| |uiop#0@@15|)) ))))
(assert  (=> true (forall ((|s#0@@40| T@U) (|s'#0@@16| T@U) (|uiop#0@@16| T@U) ) (!  (=> (and (and (and (= (type |s#0@@40|) DatatypeTypeType) (= (type |s'#0@@16|) DatatypeTypeType)) (= (type |uiop#0@@16|) DatatypeTypeType)) (or (|MapSpec.__default.Stutter#canCall| (Lit |s#0@@40|) (Lit |s'#0@@16|) (Lit |uiop#0@@16|)) (and (and ($Is |s#0@@40| Tclass.MapSpec.Variables) ($Is |s'#0@@16| Tclass.MapSpec.Variables)) ($Is |uiop#0@@16| Tclass.UI.Op)))) (and (=> (U_2_bool (Lit (bool_2_U (UI.Op.NoOp_q (Lit |uiop#0@@16|))))) (and (|$IsA#MapSpec.Variables| (Lit |s'#0@@16|)) (|$IsA#MapSpec.Variables| (Lit |s#0@@40|)))) (= (MapSpec.__default.Stutter (Lit |s#0@@40|) (Lit |s'#0@@16|) (Lit |uiop#0@@16|))  (and (UI.Op.NoOp_q (Lit |uiop#0@@16|)) (|MapSpec.Variables#Equal| |s'#0@@16| |s#0@@40|))))) :qid |MapSpecsdfy.115:21| :weight 3 :skolemid |2383| :pattern ( (MapSpec.__default.Stutter (Lit |s#0@@40|) (Lit |s'#0@@16|) (Lit |uiop#0@@16|))) ))))
(assert  (=> true (forall ((|s#0@@41| T@U) (|s'#0@@17| T@U) (|uiop#0@@17| T@U) (|step#0| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@41|) DatatypeTypeType) (= (type |s'#0@@17|) DatatypeTypeType)) (= (type |uiop#0@@17|) DatatypeTypeType)) (= (type |step#0|) DatatypeTypeType)) (or (|MapSpec.__default.NextStep#canCall| |s#0@@41| |s'#0@@17| |uiop#0@@17| |step#0|) (and (and (and ($Is |s#0@@41| Tclass.MapSpec.Variables) ($Is |s'#0@@17| Tclass.MapSpec.Variables)) ($Is |uiop#0@@17| Tclass.UI.Op)) ($Is |step#0| Tclass.MapSpec.Step)))) true) :qid |MapSpecsdfy.128:22| :skolemid |2384| :pattern ( (MapSpec.__default.NextStep |s#0@@41| |s'#0@@17| |uiop#0@@17| |step#0|)) ))))
(assert (forall ((|s#0@@42| T@U) (|s'#0@@18| T@U) (|uiop#0@@18| T@U) (|step#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@42|) DatatypeTypeType) (= (type |s'#0@@18|) DatatypeTypeType)) (= (type |uiop#0@@18|) DatatypeTypeType)) (= (type |step#0@@0|) DatatypeTypeType)) (and (and (and ($Is |s#0@@42| Tclass.MapSpec.Variables) ($Is |s'#0@@18| Tclass.MapSpec.Variables)) ($Is |uiop#0@@18| Tclass.UI.Op)) ($Is |step#0@@0| Tclass.MapSpec.Step))) (= (|MapSpec.__default.NextStep#requires| |s#0@@42| |s'#0@@18| |uiop#0@@18| |step#0@@0|) true)) :qid |MapSpecsdfy.128:22| :skolemid |2385| :pattern ( (|MapSpec.__default.NextStep#requires| |s#0@@42| |s'#0@@18| |uiop#0@@18| |step#0@@0|)) )))
(assert  (=> true (forall ((|s#0@@43| T@U) (|s'#0@@19| T@U) (|uiop#0@@19| T@U) (|step#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@43|) DatatypeTypeType) (= (type |s'#0@@19|) DatatypeTypeType)) (= (type |uiop#0@@19|) DatatypeTypeType)) (= (type |step#0@@1|) DatatypeTypeType)) (or (|MapSpec.__default.NextStep#canCall| |s#0@@43| |s'#0@@19| |uiop#0@@19| |step#0@@1|) (and (and (and ($Is |s#0@@43| Tclass.MapSpec.Variables) ($Is |s'#0@@19| Tclass.MapSpec.Variables)) ($Is |uiop#0@@19| Tclass.UI.Op)) ($Is |step#0@@1| Tclass.MapSpec.Step)))) (and (and (=> (MapSpec.Step.QueryStep_q |step#0@@1|) (let ((|result#1| (MapSpec.Step.result |step#0@@1|))) (let ((|key#2| (MapSpec.Step.key |step#0@@1|))) (|MapSpec.__default.Query#canCall| |s#0@@43| |s'#0@@19| |uiop#0@@19| |key#2| |result#1|)))) (=> (not (MapSpec.Step.QueryStep_q |step#0@@1|)) (and (=> (MapSpec.Step.WriteStep_q |step#0@@1|) (let ((|new_value#1| (MapSpec.Step.new__value |step#0@@1|))) (let ((|key#3| (MapSpec.Step.key |step#0@@1|))) (|MapSpec.__default.Write#canCall| |s#0@@43| |s'#0@@19| |uiop#0@@19| |key#3| |new_value#1|)))) (=> (not (MapSpec.Step.WriteStep_q |step#0@@1|)) (and (=> (MapSpec.Step.SuccStep_q |step#0@@1|) (let ((|end#1| (MapSpec.Step.end |step#0@@1|))) (let ((|results#1| (MapSpec.Step.results |step#0@@1|))) (let ((|start#1| (MapSpec.Step.start |step#0@@1|))) (|MapSpec.__default.Succ#canCall| |s#0@@43| |s'#0@@19| |uiop#0@@19| |start#1| |results#1| |end#1|))))) (=> (not (MapSpec.Step.SuccStep_q |step#0@@1|)) (|MapSpec.__default.Stutter#canCall| |s#0@@43| |s'#0@@19| |uiop#0@@19|))))))) (= (MapSpec.__default.NextStep |s#0@@43| |s'#0@@19| |uiop#0@@19| |step#0@@1|) (ite (MapSpec.Step.QueryStep_q |step#0@@1|) (let ((|result#0@@4| (MapSpec.Step.result |step#0@@1|))) (let ((|key#0@@23| (MapSpec.Step.key |step#0@@1|))) (MapSpec.__default.Query |s#0@@43| |s'#0@@19| |uiop#0@@19| |key#0@@23| |result#0@@4|))) (ite (MapSpec.Step.WriteStep_q |step#0@@1|) (let ((|new_value#0@@4| (MapSpec.Step.new__value |step#0@@1|))) (let ((|key#1@@1| (MapSpec.Step.key |step#0@@1|))) (MapSpec.__default.Write |s#0@@43| |s'#0@@19| |uiop#0@@19| |key#1@@1| |new_value#0@@4|))) (ite (MapSpec.Step.SuccStep_q |step#0@@1|) (let ((|end#0@@15| (MapSpec.Step.end |step#0@@1|))) (let ((|results#0@@3| (MapSpec.Step.results |step#0@@1|))) (let ((|start#0@@15| (MapSpec.Step.start |step#0@@1|))) (MapSpec.__default.Succ |s#0@@43| |s'#0@@19| |uiop#0@@19| |start#0@@15| |results#0@@3| |end#0@@15|)))) (MapSpec.__default.Stutter |s#0@@43| |s'#0@@19| |uiop#0@@19|))))))) :qid |MapSpecsdfy.128:22| :skolemid |2386| :pattern ( (MapSpec.__default.NextStep |s#0@@43| |s'#0@@19| |uiop#0@@19| |step#0@@1|)) ))))
(assert  (=> true (forall ((|s#0@@44| T@U) (|s'#0@@20| T@U) (|uiop#0@@20| T@U) (|step#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@44|) DatatypeTypeType) (= (type |s'#0@@20|) DatatypeTypeType)) (= (type |uiop#0@@20|) DatatypeTypeType)) (= (type |step#0@@2|) DatatypeTypeType)) (or (|MapSpec.__default.NextStep#canCall| (Lit |s#0@@44|) (Lit |s'#0@@20|) (Lit |uiop#0@@20|) (Lit |step#0@@2|)) (and (and (and ($Is |s#0@@44| Tclass.MapSpec.Variables) ($Is |s'#0@@20| Tclass.MapSpec.Variables)) ($Is |uiop#0@@20| Tclass.UI.Op)) ($Is |step#0@@2| Tclass.MapSpec.Step)))) (and (and (=> (U_2_bool (Lit (bool_2_U (MapSpec.Step.QueryStep_q (Lit |step#0@@2|))))) (let ((|result#3| (Lit (MapSpec.Step.result (Lit |step#0@@2|))))) (let ((|key#6| (Lit (MapSpec.Step.key (Lit |step#0@@2|))))) (|MapSpec.__default.Query#canCall| (Lit |s#0@@44|) (Lit |s'#0@@20|) (Lit |uiop#0@@20|) |key#6| |result#3|)))) (=> (not (U_2_bool (Lit (bool_2_U (MapSpec.Step.QueryStep_q (Lit |step#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (MapSpec.Step.WriteStep_q (Lit |step#0@@2|))))) (let ((|new_value#3| (Lit (MapSpec.Step.new__value (Lit |step#0@@2|))))) (let ((|key#7| (Lit (MapSpec.Step.key (Lit |step#0@@2|))))) (|MapSpec.__default.Write#canCall| (Lit |s#0@@44|) (Lit |s'#0@@20|) (Lit |uiop#0@@20|) |key#7| |new_value#3|)))) (=> (not (U_2_bool (Lit (bool_2_U (MapSpec.Step.WriteStep_q (Lit |step#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (MapSpec.Step.SuccStep_q (Lit |step#0@@2|))))) (let ((|end#3| (Lit (MapSpec.Step.end (Lit |step#0@@2|))))) (let ((|results#3| (Lit (MapSpec.Step.results (Lit |step#0@@2|))))) (let ((|start#3| (Lit (MapSpec.Step.start (Lit |step#0@@2|))))) (|MapSpec.__default.Succ#canCall| (Lit |s#0@@44|) (Lit |s'#0@@20|) (Lit |uiop#0@@20|) |start#3| |results#3| |end#3|))))) (=> (not (U_2_bool (Lit (bool_2_U (MapSpec.Step.SuccStep_q (Lit |step#0@@2|)))))) (|MapSpec.__default.Stutter#canCall| (Lit |s#0@@44|) (Lit |s'#0@@20|) (Lit |uiop#0@@20|)))))))) (= (MapSpec.__default.NextStep (Lit |s#0@@44|) (Lit |s'#0@@20|) (Lit |uiop#0@@20|) (Lit |step#0@@2|)) (ite (MapSpec.Step.QueryStep_q (Lit |step#0@@2|)) (U_2_bool (let ((|result#2| (Lit (MapSpec.Step.result (Lit |step#0@@2|))))) (let ((|key#4| (Lit (MapSpec.Step.key (Lit |step#0@@2|))))) (Lit (bool_2_U (MapSpec.__default.Query (Lit |s#0@@44|) (Lit |s'#0@@20|) (Lit |uiop#0@@20|) |key#4| |result#2|)))))) (ite (MapSpec.Step.WriteStep_q (Lit |step#0@@2|)) (U_2_bool (let ((|new_value#2| (Lit (MapSpec.Step.new__value (Lit |step#0@@2|))))) (let ((|key#5| (Lit (MapSpec.Step.key (Lit |step#0@@2|))))) (Lit (bool_2_U (MapSpec.__default.Write (Lit |s#0@@44|) (Lit |s'#0@@20|) (Lit |uiop#0@@20|) |key#5| |new_value#2|)))))) (ite (MapSpec.Step.SuccStep_q (Lit |step#0@@2|)) (U_2_bool (let ((|end#2| (Lit (MapSpec.Step.end (Lit |step#0@@2|))))) (let ((|results#2| (Lit (MapSpec.Step.results (Lit |step#0@@2|))))) (let ((|start#2| (Lit (MapSpec.Step.start (Lit |step#0@@2|))))) (Lit (bool_2_U (MapSpec.__default.Succ (Lit |s#0@@44|) (Lit |s'#0@@20|) (Lit |uiop#0@@20|) |start#2| |results#2| |end#2|))))))) (MapSpec.__default.Stutter (Lit |s#0@@44|) (Lit |s'#0@@20|) (Lit |uiop#0@@20|)))))))) :qid |MapSpecsdfy.128:22| :weight 3 :skolemid |2387| :pattern ( (MapSpec.__default.NextStep (Lit |s#0@@44|) (Lit |s'#0@@20|) (Lit |uiop#0@@20|) (Lit |step#0@@2|))) ))))
(assert  (=> true (forall ((|s#0@@45| T@U) (|s'#0@@21| T@U) (|uiop#0@@21| T@U) ) (!  (=> (and (and (and (= (type |s#0@@45|) DatatypeTypeType) (= (type |s'#0@@21|) DatatypeTypeType)) (= (type |uiop#0@@21|) DatatypeTypeType)) (or (|MapSpec.__default.Next#canCall| |s#0@@45| |s'#0@@21| |uiop#0@@21|) (and (and ($Is |s#0@@45| Tclass.MapSpec.Variables) ($Is |s'#0@@21| Tclass.MapSpec.Variables)) ($Is |uiop#0@@21| Tclass.UI.Op)))) true) :qid |UIStateMachinesdfyMapSpec.16:18| :skolemid |2388| :pattern ( (MapSpec.__default.Next |s#0@@45| |s'#0@@21| |uiop#0@@21|)) ))))
(assert (forall ((|s#0@@46| T@U) (|s'#0@@22| T@U) (|uiop#0@@22| T@U) ) (!  (=> (and (and (and (= (type |s#0@@46|) DatatypeTypeType) (= (type |s'#0@@22|) DatatypeTypeType)) (= (type |uiop#0@@22|) DatatypeTypeType)) (and (and ($Is |s#0@@46| Tclass.MapSpec.Variables) ($Is |s'#0@@22| Tclass.MapSpec.Variables)) ($Is |uiop#0@@22| Tclass.UI.Op))) (= (|MapSpec.__default.Next#requires| |s#0@@46| |s'#0@@22| |uiop#0@@22|) true)) :qid |UIStateMachinesdfyMapSpec.16:18| :skolemid |2389| :pattern ( (|MapSpec.__default.Next#requires| |s#0@@46| |s'#0@@22| |uiop#0@@22|)) )))
(assert  (=> true (forall ((|s#0@@47| T@U) (|s'#0@@23| T@U) (|uiop#0@@23| T@U) ) (!  (=> (and (and (and (= (type |s#0@@47|) DatatypeTypeType) (= (type |s'#0@@23|) DatatypeTypeType)) (= (type |uiop#0@@23|) DatatypeTypeType)) (or (|MapSpec.__default.Next#canCall| |s#0@@47| |s'#0@@23| |uiop#0@@23|) (and (and ($Is |s#0@@47| Tclass.MapSpec.Variables) ($Is |s'#0@@23| Tclass.MapSpec.Variables)) ($Is |uiop#0@@23| Tclass.UI.Op)))) (and (forall ((|step#0@@3| T@U) ) (!  (=> (and (= (type |step#0@@3|) DatatypeTypeType) ($Is |step#0@@3| Tclass.MapSpec.Step)) (|MapSpec.__default.NextStep#canCall| |s#0@@47| |s'#0@@23| |uiop#0@@23| |step#0@@3|)) :qid |MapSpecsdfy.140:12| :skolemid |2391| :pattern ( (MapSpec.__default.NextStep |s#0@@47| |s'#0@@23| |uiop#0@@23| |step#0@@3|)) )) (= (MapSpec.__default.Next |s#0@@47| |s'#0@@23| |uiop#0@@23|) (exists ((|step#0@@4| T@U) ) (!  (and (= (type |step#0@@4|) DatatypeTypeType) (and ($Is |step#0@@4| Tclass.MapSpec.Step) (MapSpec.__default.NextStep |s#0@@47| |s'#0@@23| |uiop#0@@23| |step#0@@4|))) :qid |MapSpecsdfy.140:12| :skolemid |2390| :pattern ( (MapSpec.__default.NextStep |s#0@@47| |s'#0@@23| |uiop#0@@23| |step#0@@4|)) ))))) :qid |UIStateMachinesdfyMapSpec.16:18| :skolemid |2392| :pattern ( (MapSpec.__default.Next |s#0@@47| |s'#0@@23| |uiop#0@@23|)) ))))
(assert  (=> true (forall ((|s#0@@48| T@U) (|s'#0@@24| T@U) (|uiop#0@@24| T@U) ) (!  (=> (and (and (and (= (type |s#0@@48|) DatatypeTypeType) (= (type |s'#0@@24|) DatatypeTypeType)) (= (type |uiop#0@@24|) DatatypeTypeType)) (or (|MapSpec.__default.Next#canCall| (Lit |s#0@@48|) (Lit |s'#0@@24|) (Lit |uiop#0@@24|)) (and (and ($Is |s#0@@48| Tclass.MapSpec.Variables) ($Is |s'#0@@24| Tclass.MapSpec.Variables)) ($Is |uiop#0@@24| Tclass.UI.Op)))) (and (forall ((|step#1| T@U) ) (!  (=> (and (= (type |step#1|) DatatypeTypeType) ($Is |step#1| Tclass.MapSpec.Step)) (|MapSpec.__default.NextStep#canCall| (Lit |s#0@@48|) (Lit |s'#0@@24|) (Lit |uiop#0@@24|) |step#1|)) :qid |MapSpecsdfy.140:12| :skolemid |2394| :pattern ( (MapSpec.__default.NextStep |s#0@@48| |s'#0@@24| |uiop#0@@24| |step#1|)) )) (= (MapSpec.__default.Next (Lit |s#0@@48|) (Lit |s'#0@@24|) (Lit |uiop#0@@24|)) (exists ((|step#1@@0| T@U) ) (!  (and (= (type |step#1@@0|) DatatypeTypeType) (and ($Is |step#1@@0| Tclass.MapSpec.Step) (MapSpec.__default.NextStep (Lit |s#0@@48|) (Lit |s'#0@@24|) (Lit |uiop#0@@24|) |step#1@@0|))) :qid |MapSpecsdfy.140:12| :skolemid |2393| :pattern ( (MapSpec.__default.NextStep |s#0@@48| |s'#0@@24| |uiop#0@@24| |step#1@@0|)) ))))) :qid |UIStateMachinesdfyMapSpec.16:18| :weight 3 :skolemid |2395| :pattern ( (MapSpec.__default.Next (Lit |s#0@@48|) (Lit |s'#0@@24|) (Lit |uiop#0@@24|))) ))))
(assert  (=> true (forall ((|s#0@@49| T@U) ) (!  (=> (and (= (type |s#0@@49|) DatatypeTypeType) (or (|MapSpec.__default.Inv#canCall| |s#0@@49|) ($Is |s#0@@49| Tclass.MapSpec.Variables))) true) :qid |UIStateMachinesdfyMapSpec.18:17| :skolemid |2396| :pattern ( (MapSpec.__default.Inv |s#0@@49|)) ))))
(assert (forall ((|s#0@@50| T@U) ) (!  (=> (and (= (type |s#0@@50|) DatatypeTypeType) ($Is |s#0@@50| Tclass.MapSpec.Variables)) (= (|MapSpec.__default.Inv#requires| |s#0@@50|) true)) :qid |UIStateMachinesdfyMapSpec.18:17| :skolemid |2397| :pattern ( (|MapSpec.__default.Inv#requires| |s#0@@50|)) )))
(assert  (=> true (forall ((|s#0@@51| T@U) ) (!  (=> (and (= (type |s#0@@51|) DatatypeTypeType) (or (|MapSpec.__default.Inv#canCall| |s#0@@51|) ($Is |s#0@@51| Tclass.MapSpec.Variables))) (and (|MapSpec.__default.WF#canCall| |s#0@@51|) (= (MapSpec.__default.Inv |s#0@@51|) (MapSpec.__default.WF |s#0@@51|)))) :qid |UIStateMachinesdfyMapSpec.18:17| :skolemid |2398| :pattern ( (MapSpec.__default.Inv |s#0@@51|)) ))))
(assert  (=> true (forall ((|s#0@@52| T@U) ) (!  (=> (and (= (type |s#0@@52|) DatatypeTypeType) (or (|MapSpec.__default.Inv#canCall| (Lit |s#0@@52|)) ($Is |s#0@@52| Tclass.MapSpec.Variables))) (and (|MapSpec.__default.WF#canCall| (Lit |s#0@@52|)) (= (MapSpec.__default.Inv (Lit |s#0@@52|)) (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s#0@@52|)))))))) :qid |UIStateMachinesdfyMapSpec.18:17| :weight 3 :skolemid |2399| :pattern ( (MapSpec.__default.Inv (Lit |s#0@@52|))) ))))
(assert (= (type Tclass.MapRemove_s.__default) TyType))
(assert (= (Tag Tclass.MapRemove_s.__default) Tagclass.MapRemove_s.__default))
(assert (= (TagFamily Tclass.MapRemove_s.__default) tytagFamily$_default))
(assert (forall ((bx@@174 T@U) ) (!  (=> (and (= (type bx@@174) BoxType) ($IsBox bx@@174 Tclass.MapRemove_s.__default)) (and (= ($Box ($Unbox refType bx@@174)) bx@@174) ($Is ($Unbox refType bx@@174) Tclass.MapRemove_s.__default))) :qid |unknown.0:0| :skolemid |2400| :pattern ( ($IsBox bx@@174 Tclass.MapRemove_s.__default)) )))
(assert (forall (($o@@27 T@U) ) (!  (=> (= (type $o@@27) refType) (= ($Is $o@@27 Tclass.MapRemove_s.__default)  (or (= $o@@27 null) (= (dtype $o@@27) Tclass.MapRemove_s.__default)))) :qid |unknown.0:0| :skolemid |2401| :pattern ( ($Is $o@@27 Tclass.MapRemove_s.__default)) )))
(assert (forall (($o@@28 T@U) ($h@@129 T@U) ) (!  (=> (and (= (type $o@@28) refType) (= (type $h@@129) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@28 Tclass.MapRemove_s.__default $h@@129)  (or (= $o@@28 null) (U_2_bool (MapType1Select (MapType0Select $h@@129 $o@@28) alloc))))) :qid |unknown.0:0| :skolemid |2402| :pattern ( ($IsAlloc $o@@28 Tclass.MapRemove_s.__default $h@@129)) )))
(assert (forall ((arg0@@483 T@U) (arg1@@192 T@U) (arg2@@114 T@U) (arg3@@78 T@U) (arg4@@61 T@U) ) (! (= (type (MapRemove_s.__default.MapRemove1 arg0@@483 arg1@@192 arg2@@114 arg3@@78 arg4@@61)) (MapType BoxType BoxType)) :qid |funType:MapRemove_s.__default.MapRemove1| :pattern ( (MapRemove_s.__default.MapRemove1 arg0@@483 arg1@@192 arg2@@114 arg3@@78 arg4@@61)) )))
(assert (forall ((MapRemove_s._default.MapRemove1$K T@U) (MapRemove_s._default.MapRemove1$V T@U) ($ly@@6 T@U) (|m#0| T@U) (|k#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K) TyType) (= (type MapRemove_s._default.MapRemove1$V) TyType)) (= (type $ly@@6) LayerTypeType)) (= (type |m#0|) (MapType BoxType BoxType))) (= (type |k#0@@6|) BoxType)) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K MapRemove_s._default.MapRemove1$V ($LS $ly@@6) |m#0| |k#0@@6|) (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K MapRemove_s._default.MapRemove1$V $ly@@6 |m#0| |k#0@@6|))) :qid |unknown.0:0| :skolemid |2403| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K MapRemove_s._default.MapRemove1$V ($LS $ly@@6) |m#0| |k#0@@6|)) )))
(assert (forall ((MapRemove_s._default.MapRemove1$K@@0 T@U) (MapRemove_s._default.MapRemove1$V@@0 T@U) ($ly@@7 T@U) (|m#0@@0| T@U) (|k#0@@7| T@U) ) (!  (=> (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@0) TyType) (= (type MapRemove_s._default.MapRemove1$V@@0) TyType)) (= (type $ly@@7) LayerTypeType)) (= (type |m#0@@0|) (MapType BoxType BoxType))) (= (type |k#0@@7|) BoxType)) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@0 MapRemove_s._default.MapRemove1$V@@0 $ly@@7 |m#0@@0| |k#0@@7|) (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@0 MapRemove_s._default.MapRemove1$V@@0 $LZ |m#0@@0| |k#0@@7|))) :qid |unknown.0:0| :skolemid |2404| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@0 MapRemove_s._default.MapRemove1$V@@0 (AsFuelBottom $ly@@7) |m#0@@0| |k#0@@7|)) )))
(assert  (=> true (forall ((MapRemove_s._default.MapRemove1$K@@1 T@U) (MapRemove_s._default.MapRemove1$V@@1 T@U) ($ly@@8 T@U) (|m#0@@1| T@U) (|k#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@1) TyType) (= (type MapRemove_s._default.MapRemove1$V@@1) TyType)) (= (type $ly@@8) LayerTypeType)) (= (type |m#0@@1|) (MapType BoxType BoxType))) (= (type |k#0@@8|) BoxType)) (or (|MapRemove_s.__default.MapRemove1#canCall| MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 |m#0@@1| |k#0@@8|) (and ($Is |m#0@@1| (TMap MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1)) ($IsBox |k#0@@8| MapRemove_s._default.MapRemove1$K@@1)))) (and (and (and (and (and (and (forall ((|j#0@@2| T@U) ) (!  (=> (and (and (= (type |j#0@@2|) BoxType) ($IsBox |j#0@@2| MapRemove_s._default.MapRemove1$K@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@1|) |j#0@@2|)) (not (= |j#0@@2| |k#0@@8|)))) (U_2_bool (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@8 |m#0@@1| |k#0@@8|)) |j#0@@2|))) :qid |MapRemovesdfy.15:20| :skolemid |2405| :pattern ( (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@8 |m#0@@1| |k#0@@8|)) |j#0@@2|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@1|) |j#0@@2|)) )) (forall ((|j#1@@2| T@U) ) (!  (=> (and (= (type |j#1@@2|) BoxType) ($IsBox |j#1@@2| MapRemove_s._default.MapRemove1$K@@1)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@8 |m#0@@1| |k#0@@8|)) |j#1@@2|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@1|) |j#1@@2|))) (=> (U_2_bool (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@8 |m#0@@1| |k#0@@8|)) |j#1@@2|)) (not (= |j#1@@2| |k#0@@8|))))) :qid |MapRemovesdfy.16:20| :skolemid |2406| :pattern ( (MapType0Select (|Map#Domain| |m#0@@1|) |j#1@@2|)) :pattern ( (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@8 |m#0@@1| |k#0@@8|)) |j#1@@2|)) ))) (forall ((|j#2| T@U) ) (!  (=> (and (and (= (type |j#2|) BoxType) ($IsBox |j#2| MapRemove_s._default.MapRemove1$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@8 |m#0@@1| |k#0@@8|)) |j#2|))) (= (MapType0Select (|Map#Elements| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@8 |m#0@@1| |k#0@@8|)) |j#2|) (MapType0Select (|Map#Elements| |m#0@@1|) |j#2|))) :qid |MapRemovesdfy.17:20| :skolemid |2407| :pattern ( (MapType0Select (|Map#Elements| |m#0@@1|) |j#2|)) :pattern ( (MapType0Select (|Map#Elements| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@8 |m#0@@1| |k#0@@8|)) |j#2|)) :pattern ( (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@8 |m#0@@1| |k#0@@8|)) |j#2|)) ))) (<= (|Set#Card| (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@8 |m#0@@1| |k#0@@8|))) (|Set#Card| (|Map#Domain| |m#0@@1|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@1|) |k#0@@8|)) (= (|Map#Card| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@8 |m#0@@1| |k#0@@8|)) (- (|Map#Card| |m#0@@1|) 1)))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@1|) |k#0@@8|))) (= (|Map#Card| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@8 |m#0@@1| |k#0@@8|)) (|Map#Card| |m#0@@1|)))) ($Is (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@8 |m#0@@1| |k#0@@8|) (TMap MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1)))) :qid |unknown.0:0| :skolemid |2408| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@8 |m#0@@1| |k#0@@8|)) ))))
(assert (forall ((MapRemove_s._default.MapRemove1$K@@2 T@U) (MapRemove_s._default.MapRemove1$V@@2 T@U) ($ly@@9 T@U) (|m#0@@2| T@U) (|k#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@2) TyType) (= (type MapRemove_s._default.MapRemove1$V@@2) TyType)) (= (type $ly@@9) LayerTypeType)) (= (type |m#0@@2|) (MapType BoxType BoxType))) (= (type |k#0@@9|) BoxType)) (and ($Is |m#0@@2| (TMap MapRemove_s._default.MapRemove1$K@@2 MapRemove_s._default.MapRemove1$V@@2)) ($IsBox |k#0@@9| MapRemove_s._default.MapRemove1$K@@2))) (= (|MapRemove_s.__default.MapRemove1#requires| MapRemove_s._default.MapRemove1$K@@2 MapRemove_s._default.MapRemove1$V@@2 $ly@@9 |m#0@@2| |k#0@@9|) true)) :qid |unknown.0:0| :skolemid |2409| :pattern ( (|MapRemove_s.__default.MapRemove1#requires| MapRemove_s._default.MapRemove1$K@@2 MapRemove_s._default.MapRemove1$V@@2 $ly@@9 |m#0@@2| |k#0@@9|)) )))
(assert  (and (forall ((arg0@@484 T@U) (arg1@@193 T@U) (arg2@@115 T@U) ) (! (= (type (|lambda#30| arg0@@484 arg1@@193 arg2@@115)) (MapType0Type BoxType boolType)) :qid |funType:lambda#30| :pattern ( (|lambda#30| arg0@@484 arg1@@193 arg2@@115)) )) (forall ((arg0@@485 T@U) ) (! (= (type (|lambda#31| arg0@@485)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#31| :pattern ( (|lambda#31| arg0@@485)) ))))
(assert  (=> true (forall ((MapRemove_s._default.MapRemove1$K@@3 T@U) (MapRemove_s._default.MapRemove1$V@@3 T@U) ($ly@@10 T@U) (|m#0@@3| T@U) (|k#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@3) TyType) (= (type MapRemove_s._default.MapRemove1$V@@3) TyType)) (= (type $ly@@10) LayerTypeType)) (= (type |m#0@@3|) (MapType BoxType BoxType))) (= (type |k#0@@10|) BoxType)) (or (|MapRemove_s.__default.MapRemove1#canCall| MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3 |m#0@@3| |k#0@@10|) (and ($Is |m#0@@3| (TMap MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3)) ($IsBox |k#0@@10| MapRemove_s._default.MapRemove1$K@@3)))) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3 ($LS $ly@@10) |m#0@@3| |k#0@@10|) (let ((|m'#0| (|Map#Glue| (|lambda#30| MapRemove_s._default.MapRemove1$K@@3 (|Map#Domain| |m#0@@3|) |k#0@@10|) (|lambda#31| (|Map#Elements| |m#0@@3|)) (TMap MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3)))) |m'#0|))) :qid |unknown.0:0| :skolemid |2410| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3 ($LS $ly@@10) |m#0@@3| |k#0@@10|)) ))))
(assert  (=> true (forall ((MapRemove_s._default.MapRemove1$K@@4 T@U) (MapRemove_s._default.MapRemove1$V@@4 T@U) ($ly@@11 T@U) (|m#0@@4| T@U) (|k#0@@11| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@4) TyType) (= (type MapRemove_s._default.MapRemove1$V@@4) TyType)) (= (type $ly@@11) LayerTypeType)) (= (type |m#0@@4|) (MapType BoxType BoxType))) (= (type |k#0@@11|) BoxType)) (or (|MapRemove_s.__default.MapRemove1#canCall| MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4 (Lit |m#0@@4|) |k#0@@11|) (and ($Is |m#0@@4| (TMap MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4)) ($IsBox |k#0@@11| MapRemove_s._default.MapRemove1$K@@4)))) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4 ($LS $ly@@11) (Lit |m#0@@4|) |k#0@@11|) (let ((|m'#1| (|Map#Glue| (|lambda#30| MapRemove_s._default.MapRemove1$K@@4 (|Map#Domain| |m#0@@4|) |k#0@@11|) (|lambda#31| (|Map#Elements| (Lit |m#0@@4|))) (TMap MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4)))) |m'#1|))) :qid |unknown.0:0| :weight 3 :skolemid |2411| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4 ($LS $ly@@11) (Lit |m#0@@4|) |k#0@@11|)) ))))
(assert  (=> true (forall ((MapRemove_s._default.MapRemove1$K@@5 T@U) (MapRemove_s._default.MapRemove1$V@@5 T@U) ($ly@@12 T@U) (|m#0@@5| T@U) (|k#0@@12| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@5) TyType) (= (type MapRemove_s._default.MapRemove1$V@@5) TyType)) (= (type $ly@@12) LayerTypeType)) (= (type |m#0@@5|) (MapType BoxType BoxType))) (= (type |k#0@@12|) BoxType)) (or (|MapRemove_s.__default.MapRemove1#canCall| MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5 (Lit |m#0@@5|) (Lit |k#0@@12|)) (and ($Is |m#0@@5| (TMap MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5)) ($IsBox |k#0@@12| MapRemove_s._default.MapRemove1$K@@5)))) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5 ($LS $ly@@12) (Lit |m#0@@5|) (Lit |k#0@@12|)) (let ((|m'#2| (|Map#Glue| (|lambda#30| MapRemove_s._default.MapRemove1$K@@5 (|Map#Domain| |m#0@@5|) |k#0@@12|) (|lambda#31| (|Map#Elements| (Lit |m#0@@5|))) (TMap MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5)))) |m'#2|))) :qid |unknown.0:0| :weight 3 :skolemid |2412| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5 ($LS $ly@@12) (Lit |m#0@@5|) (Lit |k#0@@12|))) ))))
(assert (= (type Tclass.Maps.__default) TyType))
(assert (= (Tag Tclass.Maps.__default) Tagclass.Maps.__default))
(assert (= (TagFamily Tclass.Maps.__default) tytagFamily$_default))
(assert (forall ((bx@@175 T@U) ) (!  (=> (and (= (type bx@@175) BoxType) ($IsBox bx@@175 Tclass.Maps.__default)) (and (= ($Box ($Unbox refType bx@@175)) bx@@175) ($Is ($Unbox refType bx@@175) Tclass.Maps.__default))) :qid |unknown.0:0| :skolemid |2413| :pattern ( ($IsBox bx@@175 Tclass.Maps.__default)) )))
(assert (forall (($o@@29 T@U) ) (!  (=> (= (type $o@@29) refType) (= ($Is $o@@29 Tclass.Maps.__default)  (or (= $o@@29 null) (= (dtype $o@@29) Tclass.Maps.__default)))) :qid |unknown.0:0| :skolemid |2414| :pattern ( ($Is $o@@29 Tclass.Maps.__default)) )))
(assert (forall (($o@@30 T@U) ($h@@130 T@U) ) (!  (=> (and (= (type $o@@30) refType) (= (type $h@@130) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@30 Tclass.Maps.__default $h@@130)  (or (= $o@@30 null) (U_2_bool (MapType1Select (MapType0Select $h@@130 $o@@30) alloc))))) :qid |unknown.0:0| :skolemid |2415| :pattern ( ($IsAlloc $o@@30 Tclass.Maps.__default $h@@130)) )))
(assert  (=> true (forall ((Maps._default.IMapsTo$K T@U) (Maps._default.IMapsTo$V T@U) (|m#0@@6| T@U) (|k#0@@13| T@U) (|v#0@@5| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K) TyType) (= (type Maps._default.IMapsTo$V) TyType)) (= (type |m#0@@6|) (IMapType BoxType BoxType))) (= (type |k#0@@13|) BoxType)) (= (type |v#0@@5|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K Maps._default.IMapsTo$V |m#0@@6| |k#0@@13| |v#0@@5|) (and (and ($Is |m#0@@6| (TIMap Maps._default.IMapsTo$K Maps._default.IMapsTo$V)) ($IsBox |k#0@@13| Maps._default.IMapsTo$K)) ($IsBox |v#0@@5| Maps._default.IMapsTo$V)))) true) :qid |unknown.0:0| :skolemid |2416| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K Maps._default.IMapsTo$V |m#0@@6| |k#0@@13| |v#0@@5|)) ))))
(assert (forall ((Maps._default.IMapsTo$K@@0 T@U) (Maps._default.IMapsTo$V@@0 T@U) (|m#0@@7| T@U) (|k#0@@14| T@U) (|v#0@@6| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@0) TyType) (= (type Maps._default.IMapsTo$V@@0) TyType)) (= (type |m#0@@7|) (IMapType BoxType BoxType))) (= (type |k#0@@14|) BoxType)) (= (type |v#0@@6|) BoxType)) (and (and ($Is |m#0@@7| (TIMap Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0)) ($IsBox |k#0@@14| Maps._default.IMapsTo$K@@0)) ($IsBox |v#0@@6| Maps._default.IMapsTo$V@@0))) (= (|Maps.__default.IMapsTo#requires| Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0 |m#0@@7| |k#0@@14| |v#0@@6|) true)) :qid |unknown.0:0| :skolemid |2417| :pattern ( (|Maps.__default.IMapsTo#requires| Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0 |m#0@@7| |k#0@@14| |v#0@@6|)) )))
(assert  (=> true (forall ((Maps._default.IMapsTo$K@@1 T@U) (Maps._default.IMapsTo$V@@1 T@U) (|m#0@@8| T@U) (|k#0@@15| T@U) (|v#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@1) TyType) (= (type Maps._default.IMapsTo$V@@1) TyType)) (= (type |m#0@@8|) (IMapType BoxType BoxType))) (= (type |k#0@@15|) BoxType)) (= (type |v#0@@7|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@8| |k#0@@15| |v#0@@7|) (and (and ($Is |m#0@@8| (TIMap Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1)) ($IsBox |k#0@@15| Maps._default.IMapsTo$K@@1)) ($IsBox |v#0@@7| Maps._default.IMapsTo$V@@1)))) (= (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@8| |k#0@@15| |v#0@@7|)  (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@8|) |k#0@@15|)) (= (MapType0Select (|IMap#Elements| |m#0@@8|) |k#0@@15|) |v#0@@7|)))) :qid |unknown.0:0| :skolemid |2418| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@8| |k#0@@15| |v#0@@7|)) ))))
(assert  (=> true (forall ((Maps._default.IMapsTo$K@@2 T@U) (Maps._default.IMapsTo$V@@2 T@U) (|m#0@@9| T@U) (|k#0@@16| T@U) (|v#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@2) TyType) (= (type Maps._default.IMapsTo$V@@2) TyType)) (= (type |m#0@@9|) (IMapType BoxType BoxType))) (= (type |k#0@@16|) BoxType)) (= (type |v#0@@8|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@9|) (Lit |k#0@@16|) (Lit |v#0@@8|)) (and (and ($Is |m#0@@9| (TIMap Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2)) ($IsBox |k#0@@16| Maps._default.IMapsTo$K@@2)) ($IsBox |v#0@@8| Maps._default.IMapsTo$V@@2)))) (= (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@9|) (Lit |k#0@@16|) (Lit |v#0@@8|))  (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@9|) |k#0@@16|)) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@9|)) (Lit |k#0@@16|)) (Lit |v#0@@8|))))) :qid |unknown.0:0| :weight 3 :skolemid |2419| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@9|) (Lit |k#0@@16|) (Lit |v#0@@8|))) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K T@U) (Maps._default.MapsTo$V T@U) (|m#0@@10| T@U) (|k#0@@17| T@U) (|v#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K) TyType) (= (type Maps._default.MapsTo$V) TyType)) (= (type |m#0@@10|) (MapType BoxType BoxType))) (= (type |k#0@@17|) BoxType)) (= (type |v#0@@9|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K Maps._default.MapsTo$V |m#0@@10| |k#0@@17| |v#0@@9|) (and (and ($Is |m#0@@10| (TMap Maps._default.MapsTo$K Maps._default.MapsTo$V)) ($IsBox |k#0@@17| Maps._default.MapsTo$K)) ($IsBox |v#0@@9| Maps._default.MapsTo$V)))) true) :qid |unknown.0:0| :skolemid |2420| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K Maps._default.MapsTo$V |m#0@@10| |k#0@@17| |v#0@@9|)) ))))
(assert (forall ((Maps._default.MapsTo$K@@0 T@U) (Maps._default.MapsTo$V@@0 T@U) (|m#0@@11| T@U) (|k#0@@18| T@U) (|v#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@0) TyType) (= (type Maps._default.MapsTo$V@@0) TyType)) (= (type |m#0@@11|) (MapType BoxType BoxType))) (= (type |k#0@@18|) BoxType)) (= (type |v#0@@10|) BoxType)) (and (and ($Is |m#0@@11| (TMap Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0)) ($IsBox |k#0@@18| Maps._default.MapsTo$K@@0)) ($IsBox |v#0@@10| Maps._default.MapsTo$V@@0))) (= (|Maps.__default.MapsTo#requires| Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0 |m#0@@11| |k#0@@18| |v#0@@10|) true)) :qid |unknown.0:0| :skolemid |2421| :pattern ( (|Maps.__default.MapsTo#requires| Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0 |m#0@@11| |k#0@@18| |v#0@@10|)) )))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@1 T@U) (Maps._default.MapsTo$V@@1 T@U) (|m#0@@12| T@U) (|k#0@@19| T@U) (|v#0@@11| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@1) TyType) (= (type Maps._default.MapsTo$V@@1) TyType)) (= (type |m#0@@12|) (MapType BoxType BoxType))) (= (type |k#0@@19|) BoxType)) (= (type |v#0@@11|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@12| |k#0@@19| |v#0@@11|) (and (and ($Is |m#0@@12| (TMap Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1)) ($IsBox |k#0@@19| Maps._default.MapsTo$K@@1)) ($IsBox |v#0@@11| Maps._default.MapsTo$V@@1)))) (= (Maps.__default.MapsTo Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@12| |k#0@@19| |v#0@@11|)  (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@12|) |k#0@@19|)) (= (MapType0Select (|Map#Elements| |m#0@@12|) |k#0@@19|) |v#0@@11|)))) :qid |unknown.0:0| :skolemid |2422| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@12| |k#0@@19| |v#0@@11|)) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@2 T@U) (Maps._default.MapsTo$V@@2 T@U) (|m#0@@13| T@U) (|k#0@@20| T@U) (|v#0@@12| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@2) TyType) (= (type Maps._default.MapsTo$V@@2) TyType)) (= (type |m#0@@13|) (MapType BoxType BoxType))) (= (type |k#0@@20|) BoxType)) (= (type |v#0@@12|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@13|) |k#0@@20| |v#0@@12|) (and (and ($Is |m#0@@13| (TMap Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2)) ($IsBox |k#0@@20| Maps._default.MapsTo$K@@2)) ($IsBox |v#0@@12| Maps._default.MapsTo$V@@2)))) (= (Maps.__default.MapsTo Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@13|) |k#0@@20| |v#0@@12|)  (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@13|) |k#0@@20|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@13|)) |k#0@@20|) |v#0@@12|)))) :qid |unknown.0:0| :weight 3 :skolemid |2423| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@13|) |k#0@@20| |v#0@@12|)) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@3 T@U) (Maps._default.MapsTo$V@@3 T@U) (|m#0@@14| T@U) (|k#0@@21| T@U) (|v#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@3) TyType) (= (type Maps._default.MapsTo$V@@3) TyType)) (= (type |m#0@@14|) (MapType BoxType BoxType))) (= (type |k#0@@21|) BoxType)) (= (type |v#0@@13|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@14|) (Lit |k#0@@21|) (Lit |v#0@@13|)) (and (and ($Is |m#0@@14| (TMap Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3)) ($IsBox |k#0@@21| Maps._default.MapsTo$K@@3)) ($IsBox |v#0@@13| Maps._default.MapsTo$V@@3)))) (= (Maps.__default.MapsTo Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@14|) (Lit |k#0@@21|) (Lit |v#0@@13|))  (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@14|) |k#0@@21|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@14|)) (Lit |k#0@@21|)) (Lit |v#0@@13|))))) :qid |unknown.0:0| :weight 3 :skolemid |2424| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@14|) (Lit |k#0@@21|) (Lit |v#0@@13|))) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K T@U) (Maps._default.MapsAgreeOnKey$V T@U) (|m#0@@15| T@U) (|m'#0@@0| T@U) (|k#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K) TyType) (= (type Maps._default.MapsAgreeOnKey$V) TyType)) (= (type |m#0@@15|) (MapType BoxType BoxType))) (= (type |m'#0@@0|) (MapType BoxType BoxType))) (= (type |k#0@@22|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V |m#0@@15| |m'#0@@0| |k#0@@22|) (and (and ($Is |m#0@@15| (TMap Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V)) ($Is |m'#0@@0| (TMap Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V))) ($IsBox |k#0@@22| Maps._default.MapsAgreeOnKey$K)))) true) :qid |unknown.0:0| :skolemid |2425| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V |m#0@@15| |m'#0@@0| |k#0@@22|)) ))))
(assert (forall ((Maps._default.MapsAgreeOnKey$K@@0 T@U) (Maps._default.MapsAgreeOnKey$V@@0 T@U) (|m#0@@16| T@U) (|m'#0@@1| T@U) (|k#0@@23| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@0) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@0) TyType)) (= (type |m#0@@16|) (MapType BoxType BoxType))) (= (type |m'#0@@1|) (MapType BoxType BoxType))) (= (type |k#0@@23|) BoxType)) (and (and ($Is |m#0@@16| (TMap Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0)) ($Is |m'#0@@1| (TMap Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0))) ($IsBox |k#0@@23| Maps._default.MapsAgreeOnKey$K@@0))) (= (|Maps.__default.MapsAgreeOnKey#requires| Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0 |m#0@@16| |m'#0@@1| |k#0@@23|) true)) :qid |unknown.0:0| :skolemid |2426| :pattern ( (|Maps.__default.MapsAgreeOnKey#requires| Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0 |m#0@@16| |m'#0@@1| |k#0@@23|)) )))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@1 T@U) (Maps._default.MapsAgreeOnKey$V@@1 T@U) (|m#0@@17| T@U) (|m'#0@@2| T@U) (|k#0@@24| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@1) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@1) TyType)) (= (type |m#0@@17|) (MapType BoxType BoxType))) (= (type |m'#0@@2|) (MapType BoxType BoxType))) (= (type |k#0@@24|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@17| |m'#0@@2| |k#0@@24|) (and (and ($Is |m#0@@17| (TMap Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1)) ($Is |m'#0@@2| (TMap Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1))) ($IsBox |k#0@@24| Maps._default.MapsAgreeOnKey$K@@1)))) (= (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@17| |m'#0@@2| |k#0@@24|)  (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@17|) |k#0@@24|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@24|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@17|) |k#0@@24|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@24|))) (= (MapType0Select (|Map#Elements| |m#0@@17|) |k#0@@24|) (MapType0Select (|Map#Elements| |m'#0@@2|) |k#0@@24|)))))) :qid |unknown.0:0| :skolemid |2427| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@17| |m'#0@@2| |k#0@@24|)) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@2 T@U) (Maps._default.MapsAgreeOnKey$V@@2 T@U) (|m#0@@18| T@U) (|m'#0@@3| T@U) (|k#0@@25| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@2) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@2) TyType)) (= (type |m#0@@18|) (MapType BoxType BoxType))) (= (type |m'#0@@3|) (MapType BoxType BoxType))) (= (type |k#0@@25|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@18|) (Lit |m'#0@@3|) |k#0@@25|) (and (and ($Is |m#0@@18| (TMap Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2)) ($Is |m'#0@@3| (TMap Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2))) ($IsBox |k#0@@25| Maps._default.MapsAgreeOnKey$K@@2)))) (= (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@18|) (Lit |m'#0@@3|) |k#0@@25|)  (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@18|) |k#0@@25|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@25|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@18|) |k#0@@25|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@25|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@18|)) |k#0@@25|) (MapType0Select (|Map#Elements| (Lit |m'#0@@3|)) |k#0@@25|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2428| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@18|) (Lit |m'#0@@3|) |k#0@@25|)) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@3 T@U) (Maps._default.MapsAgreeOnKey$V@@3 T@U) (|m#0@@19| T@U) (|m'#0@@4| T@U) (|k#0@@26| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@3) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@3) TyType)) (= (type |m#0@@19|) (MapType BoxType BoxType))) (= (type |m'#0@@4|) (MapType BoxType BoxType))) (= (type |k#0@@26|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@19|) (Lit |m'#0@@4|) (Lit |k#0@@26|)) (and (and ($Is |m#0@@19| (TMap Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3)) ($Is |m'#0@@4| (TMap Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3))) ($IsBox |k#0@@26| Maps._default.MapsAgreeOnKey$K@@3)))) (= (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@19|) (Lit |m'#0@@4|) (Lit |k#0@@26|))  (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@19|) |k#0@@26|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@4|) |k#0@@26|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@19|) |k#0@@26|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@4|) |k#0@@26|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@19|)) (Lit |k#0@@26|)) (MapType0Select (|Map#Elements| (Lit |m'#0@@4|)) (Lit |k#0@@26|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2429| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@19|) (Lit |m'#0@@4|) (Lit |k#0@@26|))) ))))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K T@U) (Maps._default.IMapsAgreeOnKey$V T@U) (|m#0@@20| T@U) (|m'#0@@5| T@U) (|k#0@@27| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K) TyType) (= (type Maps._default.IMapsAgreeOnKey$V) TyType)) (= (type |m#0@@20|) (IMapType BoxType BoxType))) (= (type |m'#0@@5|) (IMapType BoxType BoxType))) (= (type |k#0@@27|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V |m#0@@20| |m'#0@@5| |k#0@@27|) (and (and ($Is |m#0@@20| (TIMap Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V)) ($Is |m'#0@@5| (TIMap Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V))) ($IsBox |k#0@@27| Maps._default.IMapsAgreeOnKey$K)))) true) :qid |unknown.0:0| :skolemid |2430| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V |m#0@@20| |m'#0@@5| |k#0@@27|)) ))))
(assert (forall ((Maps._default.IMapsAgreeOnKey$K@@0 T@U) (Maps._default.IMapsAgreeOnKey$V@@0 T@U) (|m#0@@21| T@U) (|m'#0@@6| T@U) (|k#0@@28| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@0) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@0) TyType)) (= (type |m#0@@21|) (IMapType BoxType BoxType))) (= (type |m'#0@@6|) (IMapType BoxType BoxType))) (= (type |k#0@@28|) BoxType)) (and (and ($Is |m#0@@21| (TIMap Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0)) ($Is |m'#0@@6| (TIMap Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0))) ($IsBox |k#0@@28| Maps._default.IMapsAgreeOnKey$K@@0))) (= (|Maps.__default.IMapsAgreeOnKey#requires| Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0 |m#0@@21| |m'#0@@6| |k#0@@28|) true)) :qid |unknown.0:0| :skolemid |2431| :pattern ( (|Maps.__default.IMapsAgreeOnKey#requires| Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0 |m#0@@21| |m'#0@@6| |k#0@@28|)) )))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K@@1 T@U) (Maps._default.IMapsAgreeOnKey$V@@1 T@U) (|m#0@@22| T@U) (|m'#0@@7| T@U) (|k#0@@29| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@1) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@1) TyType)) (= (type |m#0@@22|) (IMapType BoxType BoxType))) (= (type |m'#0@@7|) (IMapType BoxType BoxType))) (= (type |k#0@@29|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@22| |m'#0@@7| |k#0@@29|) (and (and ($Is |m#0@@22| (TIMap Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1)) ($Is |m'#0@@7| (TIMap Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1))) ($IsBox |k#0@@29| Maps._default.IMapsAgreeOnKey$K@@1)))) (= (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@22| |m'#0@@7| |k#0@@29|)  (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@22|) |k#0@@29|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@29|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@22|) |k#0@@29|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@29|))) (= (MapType0Select (|IMap#Elements| |m#0@@22|) |k#0@@29|) (MapType0Select (|IMap#Elements| |m'#0@@7|) |k#0@@29|)))))) :qid |unknown.0:0| :skolemid |2432| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@22| |m'#0@@7| |k#0@@29|)) ))))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K@@2 T@U) (Maps._default.IMapsAgreeOnKey$V@@2 T@U) (|m#0@@23| T@U) (|m'#0@@8| T@U) (|k#0@@30| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@2) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@2) TyType)) (= (type |m#0@@23|) (IMapType BoxType BoxType))) (= (type |m'#0@@8|) (IMapType BoxType BoxType))) (= (type |k#0@@30|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@23|) (Lit |m'#0@@8|) (Lit |k#0@@30|)) (and (and ($Is |m#0@@23| (TIMap Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2)) ($Is |m'#0@@8| (TIMap Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2))) ($IsBox |k#0@@30| Maps._default.IMapsAgreeOnKey$K@@2)))) (= (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@23|) (Lit |m'#0@@8|) (Lit |k#0@@30|))  (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@23|) |k#0@@30|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@8|) |k#0@@30|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@23|) |k#0@@30|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@8|) |k#0@@30|))) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@23|)) (Lit |k#0@@30|)) (MapType0Select (|IMap#Elements| (Lit |m'#0@@8|)) (Lit |k#0@@30|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2433| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@23|) (Lit |m'#0@@8|) (Lit |k#0@@30|))) ))))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K T@U) (Maps._default.IsSubIMap$V T@U) (|sub#0| T@U) (|sup#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K) TyType) (= (type Maps._default.IsSubIMap$V) TyType)) (= (type |sub#0|) (IMapType BoxType BoxType))) (= (type |sup#0|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V |sub#0| |sup#0|) (and ($Is |sub#0| (TIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V)) ($Is |sup#0| (TIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V))))) true) :qid |unknown.0:0| :skolemid |2434| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V |sub#0| |sup#0|)) ))))
(assert (forall ((Maps._default.IsSubIMap$K@@0 T@U) (Maps._default.IsSubIMap$V@@0 T@U) (|sub#0@@0| T@U) (|sup#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@0) TyType) (= (type Maps._default.IsSubIMap$V@@0) TyType)) (= (type |sub#0@@0|) (IMapType BoxType BoxType))) (= (type |sup#0@@0|) (IMapType BoxType BoxType))) (and ($Is |sub#0@@0| (TIMap Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0)) ($Is |sup#0@@0| (TIMap Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0)))) (= (|Maps.__default.IsSubIMap#requires| Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0 |sub#0@@0| |sup#0@@0|) true)) :qid |unknown.0:0| :skolemid |2435| :pattern ( (|Maps.__default.IsSubIMap#requires| Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0 |sub#0@@0| |sup#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K@@1 T@U) (Maps._default.IsSubIMap$V@@1 T@U) (|sub#0@@1| T@U) (|sup#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@1) TyType) (= (type Maps._default.IsSubIMap$V@@1) TyType)) (= (type |sub#0@@1|) (IMapType BoxType BoxType))) (= (type |sup#0@@1|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|) (and ($Is |sub#0@@1| (TIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1)) ($Is |sup#0@@1| (TIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1))))) (and (=> (|ISet#Subset| (|IMap#Domain| |sub#0@@1|) (|IMap#Domain| |sup#0@@1|)) (forall ((|key#0@@24| T@U) ) (!  (=> (and (and (= (type |key#0@@24|) BoxType) ($IsBox |key#0@@24| Maps._default.IsSubIMap$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@24|))) (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@24|)) :qid |Mapsidfy.31:16| :skolemid |2437| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@24|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@24|)) ))) (= (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|)  (and (|ISet#Subset| (|IMap#Domain| |sub#0@@1|) (|IMap#Domain| |sup#0@@1|)) (forall ((|key#0@@25| T@U) ) (!  (=> (and (and (= (type |key#0@@25|) BoxType) ($IsBox |key#0@@25| Maps._default.IsSubIMap$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@25|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@25|)) :qid |Mapsidfy.31:16| :skolemid |2436| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@25|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@25|)) )))))) :qid |unknown.0:0| :skolemid |2438| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|)) ))))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K@@2 T@U) (Maps._default.IsSubIMap$V@@2 T@U) (|sub#0@@2| T@U) (|sup#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@2) TyType) (= (type Maps._default.IsSubIMap$V@@2) TyType)) (= (type |sub#0@@2|) (IMapType BoxType BoxType))) (= (type |sup#0@@2|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|)) (and ($Is |sub#0@@2| (TIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2)) ($Is |sup#0@@2| (TIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2))))) (and (=> (|ISet#Subset| (|IMap#Domain| (Lit |sub#0@@2|)) (|IMap#Domain| (Lit |sup#0@@2|))) (forall ((|key#1@@2| T@U) ) (!  (=> (and (and (= (type |key#1@@2|) BoxType) ($IsBox |key#1@@2| Maps._default.IsSubIMap$K@@2)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |sub#0@@2|))) |key#1@@2|))) (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|) |key#1@@2|)) :qid |Mapsidfy.31:16| :skolemid |2440| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 |sub#0@@2| |sup#0@@2| |key#1@@2|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#1@@2|)) ))) (= (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|))  (and (|ISet#Subset| (|IMap#Domain| (Lit |sub#0@@2|)) (|IMap#Domain| (Lit |sup#0@@2|))) (forall ((|key#1@@3| T@U) ) (!  (=> (and (and (= (type |key#1@@3|) BoxType) ($IsBox |key#1@@3| Maps._default.IsSubIMap$K@@2)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |sub#0@@2|))) |key#1@@3|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|) |key#1@@3|)) :qid |Mapsidfy.31:16| :skolemid |2439| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 |sub#0@@2| |sup#0@@2| |key#1@@3|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#1@@3|)) )))))) :qid |unknown.0:0| :weight 3 :skolemid |2441| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|))) ))))
(assert  (=> true (forall ((Maps._default.IsSubMap$K T@U) (Maps._default.IsSubMap$V T@U) (|sub#0@@3| T@U) (|sup#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K) TyType) (= (type Maps._default.IsSubMap$V) TyType)) (= (type |sub#0@@3|) (MapType BoxType BoxType))) (= (type |sup#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K Maps._default.IsSubMap$V |sub#0@@3| |sup#0@@3|) (and ($Is |sub#0@@3| (TMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V)) ($Is |sup#0@@3| (TMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V))))) true) :qid |unknown.0:0| :skolemid |2442| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V |sub#0@@3| |sup#0@@3|)) ))))
(assert (forall ((Maps._default.IsSubMap$K@@0 T@U) (Maps._default.IsSubMap$V@@0 T@U) (|sub#0@@4| T@U) (|sup#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@0) TyType) (= (type Maps._default.IsSubMap$V@@0) TyType)) (= (type |sub#0@@4|) (MapType BoxType BoxType))) (= (type |sup#0@@4|) (MapType BoxType BoxType))) (and ($Is |sub#0@@4| (TMap Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0)) ($Is |sup#0@@4| (TMap Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0)))) (= (|Maps.__default.IsSubMap#requires| Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0 |sub#0@@4| |sup#0@@4|) true)) :qid |unknown.0:0| :skolemid |2443| :pattern ( (|Maps.__default.IsSubMap#requires| Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0 |sub#0@@4| |sup#0@@4|)) )))
(assert  (=> true (forall ((Maps._default.IsSubMap$K@@1 T@U) (Maps._default.IsSubMap$V@@1 T@U) (|sub#0@@5| T@U) (|sup#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@1) TyType) (= (type Maps._default.IsSubMap$V@@1) TyType)) (= (type |sub#0@@5|) (MapType BoxType BoxType))) (= (type |sup#0@@5|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|) (and ($Is |sub#0@@5| (TMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1)) ($Is |sup#0@@5| (TMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1))))) (and (=> (|Set#Subset| (|Map#Domain| |sub#0@@5|) (|Map#Domain| |sup#0@@5|)) (forall ((|key#0@@26| T@U) ) (!  (=> (and (and (= (type |key#0@@26|) BoxType) ($IsBox |key#0@@26| Maps._default.IsSubMap$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@26|))) (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@26|)) :qid |Mapsidfy.36:16| :skolemid |2445| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@26|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@26|)) ))) (= (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|)  (and (|Set#Subset| (|Map#Domain| |sub#0@@5|) (|Map#Domain| |sup#0@@5|)) (forall ((|key#0@@27| T@U) ) (!  (=> (and (and (= (type |key#0@@27|) BoxType) ($IsBox |key#0@@27| Maps._default.IsSubMap$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@27|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@27|)) :qid |Mapsidfy.36:16| :skolemid |2444| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@27|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@27|)) )))))) :qid |unknown.0:0| :skolemid |2446| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|)) ))))
(assert  (=> true (forall ((Maps._default.IsSubMap$K@@2 T@U) (Maps._default.IsSubMap$V@@2 T@U) (|sub#0@@6| T@U) (|sup#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@2) TyType) (= (type Maps._default.IsSubMap$V@@2) TyType)) (= (type |sub#0@@6|) (MapType BoxType BoxType))) (= (type |sup#0@@6|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|)) (and ($Is |sub#0@@6| (TMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2)) ($Is |sup#0@@6| (TMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2))))) (and (=> (|Set#Subset| (|Map#Domain| (Lit |sub#0@@6|)) (|Map#Domain| (Lit |sup#0@@6|))) (forall ((|key#1@@4| T@U) ) (!  (=> (and (and (= (type |key#1@@4|) BoxType) ($IsBox |key#1@@4| Maps._default.IsSubMap$K@@2)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |sub#0@@6|))) |key#1@@4|))) (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|) |key#1@@4|)) :qid |Mapsidfy.36:16| :skolemid |2448| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 |sub#0@@6| |sup#0@@6| |key#1@@4|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@6|) |key#1@@4|)) ))) (= (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|))  (and (|Set#Subset| (|Map#Domain| (Lit |sub#0@@6|)) (|Map#Domain| (Lit |sup#0@@6|))) (forall ((|key#1@@5| T@U) ) (!  (=> (and (and (= (type |key#1@@5|) BoxType) ($IsBox |key#1@@5| Maps._default.IsSubMap$K@@2)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |sub#0@@6|))) |key#1@@5|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|) |key#1@@5|)) :qid |Mapsidfy.36:16| :skolemid |2447| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 |sub#0@@6| |sup#0@@6| |key#1@@5|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@6|) |key#1@@5|)) )))))) :qid |unknown.0:0| :weight 3 :skolemid |2449| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|))) ))))
(assert (forall ((arg0@@486 T@U) (arg1@@194 T@U) (arg2@@116 T@U) (arg3@@79 T@U) (arg4@@62 T@U) ) (! (= (type (Maps.__default.MapRemove arg0@@486 arg1@@194 arg2@@116 arg3@@79 arg4@@62)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove| :pattern ( (Maps.__default.MapRemove arg0@@486 arg1@@194 arg2@@116 arg3@@79 arg4@@62)) )))
(assert (forall ((Maps._default.MapRemove$K T@U) (Maps._default.MapRemove$V T@U) ($ly@@13 T@U) (|m#0@@24| T@U) (|ks#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove$K) TyType) (= (type Maps._default.MapRemove$V) TyType)) (= (type $ly@@13) LayerTypeType)) (= (type |m#0@@24|) (MapType BoxType BoxType))) (= (type |ks#0|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V ($LS $ly@@13) |m#0@@24| |ks#0|) (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V $ly@@13 |m#0@@24| |ks#0|))) :qid |unknown.0:0| :skolemid |2450| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V ($LS $ly@@13) |m#0@@24| |ks#0|)) )))
(assert (forall ((Maps._default.MapRemove$K@@0 T@U) (Maps._default.MapRemove$V@@0 T@U) ($ly@@14 T@U) (|m#0@@25| T@U) (|ks#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove$K@@0) TyType) (= (type Maps._default.MapRemove$V@@0) TyType)) (= (type $ly@@14) LayerTypeType)) (= (type |m#0@@25|) (MapType BoxType BoxType))) (= (type |ks#0@@0|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 $ly@@14 |m#0@@25| |ks#0@@0|) (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 $LZ |m#0@@25| |ks#0@@0|))) :qid |unknown.0:0| :skolemid |2451| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 (AsFuelBottom $ly@@14) |m#0@@25| |ks#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@1 T@U) (Maps._default.MapRemove$V@@1 T@U) ($ly@@15 T@U) (|m#0@@26| T@U) (|ks#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@1) TyType) (= (type Maps._default.MapRemove$V@@1) TyType)) (= (type $ly@@15) LayerTypeType)) (= (type |m#0@@26|) (MapType BoxType BoxType))) (= (type |ks#0@@1|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 |m#0@@26| |ks#0@@1|) (and ($Is |m#0@@26| (TMap Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1)) ($Is |ks#0@@1| (TSet Maps._default.MapRemove$K@@1))))) (and (and (and (and (and (forall ((|k#0@@31| T@U) ) (!  (=> (and (and (= (type |k#0@@31|) BoxType) ($IsBox |k#0@@31| Maps._default.MapRemove$K@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@26|) |k#0@@31|)) (not (U_2_bool (MapType0Select |ks#0@@1| |k#0@@31|))))) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@15 |m#0@@26| |ks#0@@1|)) |k#0@@31|))) :qid |Mapsidfy.40:20| :skolemid |2452| :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@15 |m#0@@26| |ks#0@@1|)) |k#0@@31|)) :pattern ( (MapType0Select |ks#0@@1| |k#0@@31|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@26|) |k#0@@31|)) )) (forall ((|k#1@@0| T@U) ) (!  (=> (and (= (type |k#1@@0|) BoxType) ($IsBox |k#1@@0| Maps._default.MapRemove$K@@1)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@15 |m#0@@26| |ks#0@@1|)) |k#1@@0|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@26|) |k#1@@0|))) (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@15 |m#0@@26| |ks#0@@1|)) |k#1@@0|)) (not (U_2_bool (MapType0Select |ks#0@@1| |k#1@@0|)))))) :qid |Mapsidfy.41:20| :skolemid |2453| :pattern ( (MapType0Select |ks#0@@1| |k#1@@0|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@26|) |k#1@@0|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@15 |m#0@@26| |ks#0@@1|)) |k#1@@0|)) ))) (forall ((|j#0@@3| T@U) ) (!  (=> (and (and (= (type |j#0@@3|) BoxType) ($IsBox |j#0@@3| Maps._default.MapRemove$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@15 |m#0@@26| |ks#0@@1|)) |j#0@@3|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@15 |m#0@@26| |ks#0@@1|)) |j#0@@3|) (MapType0Select (|Map#Elements| |m#0@@26|) |j#0@@3|))) :qid |Mapsidfy.42:20| :skolemid |2454| :pattern ( (MapType0Select (|Map#Elements| |m#0@@26|) |j#0@@3|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@15 |m#0@@26| |ks#0@@1|)) |j#0@@3|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@15 |m#0@@26| |ks#0@@1|)) |j#0@@3|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@15 |m#0@@26| |ks#0@@1|))) (|Set#Card| (|Map#Domain| |m#0@@26|)))) (<= (|Map#Card| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@15 |m#0@@26| |ks#0@@1|)) (|Map#Card| |m#0@@26|))) ($Is (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@15 |m#0@@26| |ks#0@@1|) (TMap Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1)))) :qid |unknown.0:0| :skolemid |2455| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@15 |m#0@@26| |ks#0@@1|)) ))))
(assert (forall ((Maps._default.MapRemove$K@@2 T@U) (Maps._default.MapRemove$V@@2 T@U) ($ly@@16 T@U) (|m#0@@27| T@U) (|ks#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@2) TyType) (= (type Maps._default.MapRemove$V@@2) TyType)) (= (type $ly@@16) LayerTypeType)) (= (type |m#0@@27|) (MapType BoxType BoxType))) (= (type |ks#0@@2|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@27| (TMap Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2)) ($Is |ks#0@@2| (TSet Maps._default.MapRemove$K@@2)))) (= (|Maps.__default.MapRemove#requires| Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2 $ly@@16 |m#0@@27| |ks#0@@2|) true)) :qid |unknown.0:0| :skolemid |2456| :pattern ( (|Maps.__default.MapRemove#requires| Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2 $ly@@16 |m#0@@27| |ks#0@@2|)) )))
(assert (forall ((arg0@@487 T@U) (arg1@@195 T@U) (arg2@@117 T@U) ) (! (= (type (|lambda#36| arg0@@487 arg1@@195 arg2@@117)) (MapType0Type BoxType boolType)) :qid |funType:lambda#36| :pattern ( (|lambda#36| arg0@@487 arg1@@195 arg2@@117)) )))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@3 T@U) (Maps._default.MapRemove$V@@3 T@U) ($ly@@17 T@U) (|m#0@@28| T@U) (|ks#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@3) TyType) (= (type Maps._default.MapRemove$V@@3) TyType)) (= (type $ly@@17) LayerTypeType)) (= (type |m#0@@28|) (MapType BoxType BoxType))) (= (type |ks#0@@3|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 |m#0@@28| |ks#0@@3|) (and ($Is |m#0@@28| (TMap Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3)) ($Is |ks#0@@3| (TSet Maps._default.MapRemove$K@@3))))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 ($LS $ly@@17) |m#0@@28| |ks#0@@3|) (let ((|m'#0@@9| (|Map#Glue| (|lambda#36| Maps._default.MapRemove$K@@3 (|Map#Domain| |m#0@@28|) |ks#0@@3|) (|lambda#31| (|Map#Elements| |m#0@@28|)) (TMap Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3)))) |m'#0@@9|))) :qid |unknown.0:0| :skolemid |2457| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 ($LS $ly@@17) |m#0@@28| |ks#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@4 T@U) (Maps._default.MapRemove$V@@4 T@U) ($ly@@18 T@U) (|m#0@@29| T@U) (|ks#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@4) TyType) (= (type Maps._default.MapRemove$V@@4) TyType)) (= (type $ly@@18) LayerTypeType)) (= (type |m#0@@29|) (MapType BoxType BoxType))) (= (type |ks#0@@4|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 (Lit |m#0@@29|) (Lit |ks#0@@4|)) (and ($Is |m#0@@29| (TMap Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4)) ($Is |ks#0@@4| (TSet Maps._default.MapRemove$K@@4))))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 ($LS $ly@@18) (Lit |m#0@@29|) (Lit |ks#0@@4|)) (let ((|m'#1@@0| (|Map#Glue| (|lambda#36| Maps._default.MapRemove$K@@4 (|Map#Domain| |m#0@@29|) (Lit |ks#0@@4|)) (|lambda#31| (|Map#Elements| (Lit |m#0@@29|))) (TMap Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4)))) |m'#1@@0|))) :qid |unknown.0:0| :weight 3 :skolemid |2458| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 ($LS $ly@@18) (Lit |m#0@@29|) (Lit |ks#0@@4|))) ))))
(assert (forall ((arg0@@488 T@U) (arg1@@196 T@U) (arg2@@118 T@U) (arg3@@80 T@U) (arg4@@63 T@U) ) (! (= (type (Maps.__default.MapRemoveStrong arg0@@488 arg1@@196 arg2@@118 arg3@@80 arg4@@63)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemoveStrong| :pattern ( (Maps.__default.MapRemoveStrong arg0@@488 arg1@@196 arg2@@118 arg3@@80 arg4@@63)) )))
(assert (forall ((Maps._default.MapRemoveStrong$K T@U) (Maps._default.MapRemoveStrong$V T@U) ($ly@@19 T@U) (|m#0@@30| T@U) (|ks#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemoveStrong$K) TyType) (= (type Maps._default.MapRemoveStrong$V) TyType)) (= (type $ly@@19) LayerTypeType)) (= (type |m#0@@30|) (MapType BoxType BoxType))) (= (type |ks#0@@5|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V ($LS $ly@@19) |m#0@@30| |ks#0@@5|) (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V $ly@@19 |m#0@@30| |ks#0@@5|))) :qid |unknown.0:0| :skolemid |2459| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V ($LS $ly@@19) |m#0@@30| |ks#0@@5|)) )))
(assert (forall ((Maps._default.MapRemoveStrong$K@@0 T@U) (Maps._default.MapRemoveStrong$V@@0 T@U) ($ly@@20 T@U) (|m#0@@31| T@U) (|ks#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@0) TyType) (= (type Maps._default.MapRemoveStrong$V@@0) TyType)) (= (type $ly@@20) LayerTypeType)) (= (type |m#0@@31|) (MapType BoxType BoxType))) (= (type |ks#0@@6|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 $ly@@20 |m#0@@31| |ks#0@@6|) (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 $LZ |m#0@@31| |ks#0@@6|))) :qid |unknown.0:0| :skolemid |2460| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 (AsFuelBottom $ly@@20) |m#0@@31| |ks#0@@6|)) )))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@1 T@U) (Maps._default.MapRemoveStrong$V@@1 T@U) ($ly@@21 T@U) (|m#0@@32| T@U) (|ks#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@1) TyType) (= (type Maps._default.MapRemoveStrong$V@@1) TyType)) (= (type $ly@@21) LayerTypeType)) (= (type |m#0@@32|) (MapType BoxType BoxType))) (= (type |ks#0@@7|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 |m#0@@32| |ks#0@@7|) (and ($Is |m#0@@32| (TMap Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1)) ($Is |ks#0@@7| (TSet Maps._default.MapRemoveStrong$K@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@21 |m#0@@32| |ks#0@@7|)) (|Set#Difference| (|Map#Domain| |m#0@@32|) |ks#0@@7|)) (forall ((|j#0@@4| T@U) ) (!  (=> (and (and (= (type |j#0@@4|) BoxType) ($IsBox |j#0@@4| Maps._default.MapRemoveStrong$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@21 |m#0@@32| |ks#0@@7|)) |j#0@@4|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@21 |m#0@@32| |ks#0@@7|)) |j#0@@4|) (MapType0Select (|Map#Elements| |m#0@@32|) |j#0@@4|))) :qid |Mapsidfy.53:20| :skolemid |2461| :pattern ( (MapType0Select (|Map#Elements| |m#0@@32|) |j#0@@4|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@21 |m#0@@32| |ks#0@@7|)) |j#0@@4|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@21 |m#0@@32| |ks#0@@7|)) |j#0@@4|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@21 |m#0@@32| |ks#0@@7|))) (|Set#Card| (|Map#Domain| |m#0@@32|)))) (<= (|Map#Card| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@21 |m#0@@32| |ks#0@@7|)) (|Map#Card| |m#0@@32|))) ($Is (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@21 |m#0@@32| |ks#0@@7|) (TMap Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1)))) :qid |unknown.0:0| :skolemid |2462| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@21 |m#0@@32| |ks#0@@7|)) ))))
(assert (forall ((Maps._default.MapRemoveStrong$K@@2 T@U) (Maps._default.MapRemoveStrong$V@@2 T@U) ($ly@@22 T@U) (|m#0@@33| T@U) (|ks#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@2) TyType) (= (type Maps._default.MapRemoveStrong$V@@2) TyType)) (= (type $ly@@22) LayerTypeType)) (= (type |m#0@@33|) (MapType BoxType BoxType))) (= (type |ks#0@@8|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@33| (TMap Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2)) ($Is |ks#0@@8| (TSet Maps._default.MapRemoveStrong$K@@2)))) (= (|Maps.__default.MapRemoveStrong#requires| Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2 $ly@@22 |m#0@@33| |ks#0@@8|) true)) :qid |unknown.0:0| :skolemid |2463| :pattern ( (|Maps.__default.MapRemoveStrong#requires| Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2 $ly@@22 |m#0@@33| |ks#0@@8|)) )))
(assert  (and (and (= (type StartFuel_Maps._default.MapRemove) LayerTypeType) (= (type MoreFuel_Maps._default.MapRemove0) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemove) LayerTypeType)))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@3 T@U) (Maps._default.MapRemoveStrong$V@@3 T@U) ($ly@@23 T@U) (|m#0@@34| T@U) (|ks#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@3) TyType) (= (type Maps._default.MapRemoveStrong$V@@3) TyType)) (= (type $ly@@23) LayerTypeType)) (= (type |m#0@@34|) (MapType BoxType BoxType))) (= (type |ks#0@@9|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 |m#0@@34| |ks#0@@9|) (and ($Is |m#0@@34| (TMap Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3)) ($Is |ks#0@@9| (TSet Maps._default.MapRemoveStrong$K@@3))))) (and (|Maps.__default.MapRemove#canCall| Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 |m#0@@34| |ks#0@@9|) (and (and (and (= StartFuel_Maps._default.MapRemove ($LS MoreFuel_Maps._default.MapRemove0)) (= StartFuelAssert_Maps._default.MapRemove ($LS ($LS MoreFuel_Maps._default.MapRemove0)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove0) MoreFuel_Maps._default.MapRemove0)) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 ($LS $ly@@23) |m#0@@34| |ks#0@@9|) (Maps.__default.MapRemove Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 StartFuel_Maps._default.MapRemove |m#0@@34| |ks#0@@9|))))) :qid |unknown.0:0| :skolemid |2464| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 ($LS $ly@@23) |m#0@@34| |ks#0@@9|)) ))))
(assert (= (type MoreFuel_Maps._default.MapRemove1) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@4 T@U) (Maps._default.MapRemoveStrong$V@@4 T@U) ($ly@@24 T@U) (|m#0@@35| T@U) (|ks#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@4) TyType) (= (type Maps._default.MapRemoveStrong$V@@4) TyType)) (= (type $ly@@24) LayerTypeType)) (= (type |m#0@@35|) (MapType BoxType BoxType))) (= (type |ks#0@@10|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 (Lit |m#0@@35|) (Lit |ks#0@@10|)) (and ($Is |m#0@@35| (TMap Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4)) ($Is |ks#0@@10| (TSet Maps._default.MapRemoveStrong$K@@4))))) (and (|Maps.__default.MapRemove#canCall| Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 (Lit |m#0@@35|) (Lit |ks#0@@10|)) (and (and (and (= StartFuel_Maps._default.MapRemove ($LS MoreFuel_Maps._default.MapRemove1)) (= StartFuelAssert_Maps._default.MapRemove ($LS ($LS MoreFuel_Maps._default.MapRemove1)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove1) MoreFuel_Maps._default.MapRemove1)) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 ($LS $ly@@24) (Lit |m#0@@35|) (Lit |ks#0@@10|)) (Maps.__default.MapRemove Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 StartFuel_Maps._default.MapRemove (Lit |m#0@@35|) (Lit |ks#0@@10|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2465| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 ($LS $ly@@24) (Lit |m#0@@35|) (Lit |ks#0@@10|))) ))))
(assert (forall ((arg0@@489 T@U) (arg1@@197 T@U) (arg2@@119 T@U) (arg3@@81 T@U) ) (! (= (type (Maps.__default.MapRemove1 arg0@@489 arg1@@197 arg2@@119 arg3@@81)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove1| :pattern ( (Maps.__default.MapRemove1 arg0@@489 arg1@@197 arg2@@119 arg3@@81)) )))
(assert  (=> true (forall ((Maps._default.MapRemove1$K T@U) (Maps._default.MapRemove1$V T@U) (|m#0@@36| T@U) (|k#0@@32| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K) TyType) (= (type Maps._default.MapRemove1$V) TyType)) (= (type |m#0@@36|) (MapType BoxType BoxType))) (= (type |k#0@@32|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@32|) (and ($Is |m#0@@36| (TMap Maps._default.MapRemove1$K Maps._default.MapRemove1$V)) ($IsBox |k#0@@32| Maps._default.MapRemove1$K)))) (and (and (and (and (and (and (forall ((|j#0@@5| T@U) ) (!  (=> (and (and (= (type |j#0@@5|) BoxType) ($IsBox |j#0@@5| Maps._default.MapRemove1$K)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@36|) |j#0@@5|)) (not (= |j#0@@5| |k#0@@32|)))) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@32|)) |j#0@@5|))) :qid |Mapsidfy.62:18| :skolemid |2466| :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@32|)) |j#0@@5|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@36|) |j#0@@5|)) )) (forall ((|j#1@@3| T@U) ) (!  (=> (and (= (type |j#1@@3|) BoxType) ($IsBox |j#1@@3| Maps._default.MapRemove1$K)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@32|)) |j#1@@3|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@36|) |j#1@@3|))) (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@32|)) |j#1@@3|)) (not (= |j#1@@3| |k#0@@32|))))) :qid |Mapsidfy.63:18| :skolemid |2467| :pattern ( (MapType0Select (|Map#Domain| |m#0@@36|) |j#1@@3|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@32|)) |j#1@@3|)) ))) (forall ((|j#2@@0| T@U) ) (!  (=> (and (and (= (type |j#2@@0|) BoxType) ($IsBox |j#2@@0| Maps._default.MapRemove1$K)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@32|)) |j#2@@0|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@32|)) |j#2@@0|) (MapType0Select (|Map#Elements| |m#0@@36|) |j#2@@0|))) :qid |Mapsidfy.64:18| :skolemid |2468| :pattern ( (MapType0Select (|Map#Elements| |m#0@@36|) |j#2@@0|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@32|)) |j#2@@0|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@32|)) |j#2@@0|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@32|))) (|Set#Card| (|Map#Domain| |m#0@@36|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@36|) |k#0@@32|)) (= (|Map#Card| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@32|)) (- (|Map#Card| |m#0@@36|) 1)))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@36|) |k#0@@32|))) (= (|Map#Card| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@32|)) (|Map#Card| |m#0@@36|)))) ($Is (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@32|) (TMap Maps._default.MapRemove1$K Maps._default.MapRemove1$V)))) :qid |unknown.0:0| :skolemid |2469| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@32|)) ))))
(assert (forall ((Maps._default.MapRemove1$K@@0 T@U) (Maps._default.MapRemove1$V@@0 T@U) (|m#0@@37| T@U) (|k#0@@33| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K@@0) TyType) (= (type Maps._default.MapRemove1$V@@0) TyType)) (= (type |m#0@@37|) (MapType BoxType BoxType))) (= (type |k#0@@33|) BoxType)) (and ($Is |m#0@@37| (TMap Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0)) ($IsBox |k#0@@33| Maps._default.MapRemove1$K@@0))) (= (|Maps.__default.MapRemove1#requires| Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0 |m#0@@37| |k#0@@33|) true)) :qid |unknown.0:0| :skolemid |2470| :pattern ( (|Maps.__default.MapRemove1#requires| Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0 |m#0@@37| |k#0@@33|)) )))
(assert (= (type StartFuel_MapRemove_s._default.MapRemove1) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@1 T@U) (Maps._default.MapRemove1$V@@1 T@U) (|m#0@@38| T@U) (|k#0@@34| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K@@1) TyType) (= (type Maps._default.MapRemove1$V@@1) TyType)) (= (type |m#0@@38|) (MapType BoxType BoxType))) (= (type |k#0@@34|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 |m#0@@38| |k#0@@34|) (and ($Is |m#0@@38| (TMap Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1)) ($IsBox |k#0@@34| Maps._default.MapRemove1$K@@1)))) (and (|MapRemove_s.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 |m#0@@38| |k#0@@34|) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 |m#0@@38| |k#0@@34|) (MapRemove_s.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 StartFuel_MapRemove_s._default.MapRemove1 |m#0@@38| |k#0@@34|)))) :qid |unknown.0:0| :skolemid |2471| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 |m#0@@38| |k#0@@34|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@2 T@U) (Maps._default.MapRemove1$V@@2 T@U) (|m#0@@39| T@U) (|k#0@@35| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K@@2) TyType) (= (type Maps._default.MapRemove1$V@@2) TyType)) (= (type |m#0@@39|) (MapType BoxType BoxType))) (= (type |k#0@@35|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 (Lit |m#0@@39|) |k#0@@35|) (and ($Is |m#0@@39| (TMap Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2)) ($IsBox |k#0@@35| Maps._default.MapRemove1$K@@2)))) (and (|MapRemove_s.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 (Lit |m#0@@39|) |k#0@@35|) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 (Lit |m#0@@39|) |k#0@@35|) (MapRemove_s.__default.MapRemove1 Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 StartFuel_MapRemove_s._default.MapRemove1 (Lit |m#0@@39|) |k#0@@35|)))) :qid |unknown.0:0| :weight 3 :skolemid |2472| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 (Lit |m#0@@39|) |k#0@@35|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@3 T@U) (Maps._default.MapRemove1$V@@3 T@U) (|m#0@@40| T@U) (|k#0@@36| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K@@3) TyType) (= (type Maps._default.MapRemove1$V@@3) TyType)) (= (type |m#0@@40|) (MapType BoxType BoxType))) (= (type |k#0@@36|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 (Lit |m#0@@40|) (Lit |k#0@@36|)) (and ($Is |m#0@@40| (TMap Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3)) ($IsBox |k#0@@36| Maps._default.MapRemove1$K@@3)))) (and (|MapRemove_s.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 (Lit |m#0@@40|) (Lit |k#0@@36|)) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 (Lit |m#0@@40|) (Lit |k#0@@36|)) (MapRemove_s.__default.MapRemove1 Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 StartFuel_MapRemove_s._default.MapRemove1 (Lit |m#0@@40|) (Lit |k#0@@36|))))) :qid |unknown.0:0| :weight 3 :skolemid |2473| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 (Lit |m#0@@40|) (Lit |k#0@@36|))) ))))
(assert (forall ((arg0@@490 T@U) (arg1@@198 T@U) (arg2@@120 T@U) (arg3@@82 T@U) (arg4@@64 T@U) ) (! (= (type (Maps.__default.MapRemove1Strong arg0@@490 arg1@@198 arg2@@120 arg3@@82 arg4@@64)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove1Strong| :pattern ( (Maps.__default.MapRemove1Strong arg0@@490 arg1@@198 arg2@@120 arg3@@82 arg4@@64)) )))
(assert (forall ((Maps._default.MapRemove1Strong$K T@U) (Maps._default.MapRemove1Strong$V T@U) ($ly@@25 T@U) (|m#0@@41| T@U) (|k#0@@37| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1Strong$K) TyType) (= (type Maps._default.MapRemove1Strong$V) TyType)) (= (type $ly@@25) LayerTypeType)) (= (type |m#0@@41|) (MapType BoxType BoxType))) (= (type |k#0@@37|) BoxType)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V ($LS $ly@@25) |m#0@@41| |k#0@@37|) (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V $ly@@25 |m#0@@41| |k#0@@37|))) :qid |unknown.0:0| :skolemid |2474| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V ($LS $ly@@25) |m#0@@41| |k#0@@37|)) )))
(assert (forall ((Maps._default.MapRemove1Strong$K@@0 T@U) (Maps._default.MapRemove1Strong$V@@0 T@U) ($ly@@26 T@U) (|m#0@@42| T@U) (|k#0@@38| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@0) TyType) (= (type Maps._default.MapRemove1Strong$V@@0) TyType)) (= (type $ly@@26) LayerTypeType)) (= (type |m#0@@42|) (MapType BoxType BoxType))) (= (type |k#0@@38|) BoxType)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 $ly@@26 |m#0@@42| |k#0@@38|) (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 $LZ |m#0@@42| |k#0@@38|))) :qid |unknown.0:0| :skolemid |2475| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 (AsFuelBottom $ly@@26) |m#0@@42| |k#0@@38|)) )))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@1 T@U) (Maps._default.MapRemove1Strong$V@@1 T@U) ($ly@@27 T@U) (|m#0@@43| T@U) (|k#0@@39| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@1) TyType) (= (type Maps._default.MapRemove1Strong$V@@1) TyType)) (= (type $ly@@27) LayerTypeType)) (= (type |m#0@@43|) (MapType BoxType BoxType))) (= (type |k#0@@39|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 |m#0@@43| |k#0@@39|) (and ($Is |m#0@@43| (TMap Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1)) ($IsBox |k#0@@39| Maps._default.MapRemove1Strong$K@@1)))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@27 |m#0@@43| |k#0@@39|)) (|Set#Difference| (|Map#Domain| |m#0@@43|) (|Set#UnionOne| (|Set#Empty| BoxType) |k#0@@39|))) (forall ((|j#0@@6| T@U) ) (!  (=> (and (and (= (type |j#0@@6|) BoxType) ($IsBox |j#0@@6| Maps._default.MapRemove1Strong$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@27 |m#0@@43| |k#0@@39|)) |j#0@@6|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@27 |m#0@@43| |k#0@@39|)) |j#0@@6|) (MapType0Select (|Map#Elements| |m#0@@43|) |j#0@@6|))) :qid |Mapsidfy.74:20| :skolemid |2476| :pattern ( (MapType0Select (|Map#Elements| |m#0@@43|) |j#0@@6|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@27 |m#0@@43| |k#0@@39|)) |j#0@@6|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@27 |m#0@@43| |k#0@@39|)) |j#0@@6|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@27 |m#0@@43| |k#0@@39|))) (|Set#Card| (|Map#Domain| |m#0@@43|)))) (<= (|Map#Card| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@27 |m#0@@43| |k#0@@39|)) (|Map#Card| |m#0@@43|))) ($Is (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@27 |m#0@@43| |k#0@@39|) (TMap Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1)))) :qid |unknown.0:0| :skolemid |2477| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@27 |m#0@@43| |k#0@@39|)) ))))
(assert (forall ((Maps._default.MapRemove1Strong$K@@2 T@U) (Maps._default.MapRemove1Strong$V@@2 T@U) ($ly@@28 T@U) (|m#0@@44| T@U) (|k#0@@40| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@2) TyType) (= (type Maps._default.MapRemove1Strong$V@@2) TyType)) (= (type $ly@@28) LayerTypeType)) (= (type |m#0@@44|) (MapType BoxType BoxType))) (= (type |k#0@@40|) BoxType)) (and ($Is |m#0@@44| (TMap Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2)) ($IsBox |k#0@@40| Maps._default.MapRemove1Strong$K@@2))) (= (|Maps.__default.MapRemove1Strong#requires| Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2 $ly@@28 |m#0@@44| |k#0@@40|) true)) :qid |unknown.0:0| :skolemid |2478| :pattern ( (|Maps.__default.MapRemove1Strong#requires| Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2 $ly@@28 |m#0@@44| |k#0@@40|)) )))
(assert  (and (= (type MoreFuel_MapRemove_s._default.MapRemove10) LayerTypeType) (= (type StartFuelAssert_MapRemove_s._default.MapRemove1) LayerTypeType)))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@3 T@U) (Maps._default.MapRemove1Strong$V@@3 T@U) ($ly@@29 T@U) (|m#0@@45| T@U) (|k#0@@41| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@3) TyType) (= (type Maps._default.MapRemove1Strong$V@@3) TyType)) (= (type $ly@@29) LayerTypeType)) (= (type |m#0@@45|) (MapType BoxType BoxType))) (= (type |k#0@@41|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 |m#0@@45| |k#0@@41|) (and ($Is |m#0@@45| (TMap Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3)) ($IsBox |k#0@@41| Maps._default.MapRemove1Strong$K@@3)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 |m#0@@45| |k#0@@41|) (and (and (and (= StartFuel_MapRemove_s._default.MapRemove1 ($LS MoreFuel_MapRemove_s._default.MapRemove10)) (= StartFuelAssert_MapRemove_s._default.MapRemove1 ($LS ($LS MoreFuel_MapRemove_s._default.MapRemove10)))) (= (AsFuelBottom MoreFuel_MapRemove_s._default.MapRemove10) MoreFuel_MapRemove_s._default.MapRemove10)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 ($LS $ly@@29) |m#0@@45| |k#0@@41|) (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 |m#0@@45| |k#0@@41|))))) :qid |unknown.0:0| :skolemid |2479| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 ($LS $ly@@29) |m#0@@45| |k#0@@41|)) ))))
(assert (= (type MoreFuel_MapRemove_s._default.MapRemove11) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@4 T@U) (Maps._default.MapRemove1Strong$V@@4 T@U) ($ly@@30 T@U) (|m#0@@46| T@U) (|k#0@@42| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@4) TyType) (= (type Maps._default.MapRemove1Strong$V@@4) TyType)) (= (type $ly@@30) LayerTypeType)) (= (type |m#0@@46|) (MapType BoxType BoxType))) (= (type |k#0@@42|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 (Lit |m#0@@46|) |k#0@@42|) (and ($Is |m#0@@46| (TMap Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4)) ($IsBox |k#0@@42| Maps._default.MapRemove1Strong$K@@4)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 (Lit |m#0@@46|) |k#0@@42|) (and (and (and (= StartFuel_MapRemove_s._default.MapRemove1 ($LS MoreFuel_MapRemove_s._default.MapRemove11)) (= StartFuelAssert_MapRemove_s._default.MapRemove1 ($LS ($LS MoreFuel_MapRemove_s._default.MapRemove11)))) (= (AsFuelBottom MoreFuel_MapRemove_s._default.MapRemove11) MoreFuel_MapRemove_s._default.MapRemove11)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 ($LS $ly@@30) (Lit |m#0@@46|) |k#0@@42|) (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 (Lit |m#0@@46|) |k#0@@42|))))) :qid |unknown.0:0| :weight 3 :skolemid |2480| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 ($LS $ly@@30) (Lit |m#0@@46|) |k#0@@42|)) ))))
(assert (= (type MoreFuel_MapRemove_s._default.MapRemove12) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@5 T@U) (Maps._default.MapRemove1Strong$V@@5 T@U) ($ly@@31 T@U) (|m#0@@47| T@U) (|k#0@@43| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@5) TyType) (= (type Maps._default.MapRemove1Strong$V@@5) TyType)) (= (type $ly@@31) LayerTypeType)) (= (type |m#0@@47|) (MapType BoxType BoxType))) (= (type |k#0@@43|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 (Lit |m#0@@47|) (Lit |k#0@@43|)) (and ($Is |m#0@@47| (TMap Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5)) ($IsBox |k#0@@43| Maps._default.MapRemove1Strong$K@@5)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 (Lit |m#0@@47|) (Lit |k#0@@43|)) (and (and (and (= StartFuel_MapRemove_s._default.MapRemove1 ($LS MoreFuel_MapRemove_s._default.MapRemove12)) (= StartFuelAssert_MapRemove_s._default.MapRemove1 ($LS ($LS MoreFuel_MapRemove_s._default.MapRemove12)))) (= (AsFuelBottom MoreFuel_MapRemove_s._default.MapRemove12) MoreFuel_MapRemove_s._default.MapRemove12)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 ($LS $ly@@31) (Lit |m#0@@47|) (Lit |k#0@@43|)) (Lit (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 (Lit |m#0@@47|) (Lit |k#0@@43|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2481| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 ($LS $ly@@31) (Lit |m#0@@47|) (Lit |k#0@@43|))) ))))
(assert (forall ((arg0@@491 T@U) (arg1@@199 T@U) (arg2@@121 T@U) (arg3@@83 T@U) (arg4@@65 T@U) ) (! (= (type (Maps.__default.IMapRemove arg0@@491 arg1@@199 arg2@@121 arg3@@83 arg4@@65)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRemove| :pattern ( (Maps.__default.IMapRemove arg0@@491 arg1@@199 arg2@@121 arg3@@83 arg4@@65)) )))
(assert (forall ((Maps._default.IMapRemove$K T@U) (Maps._default.IMapRemove$V T@U) ($ly@@32 T@U) (|m#0@@48| T@U) (|ks#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove$K) TyType) (= (type Maps._default.IMapRemove$V) TyType)) (= (type $ly@@32) LayerTypeType)) (= (type |m#0@@48|) (IMapType BoxType BoxType))) (= (type |ks#0@@11|) (MapType0Type BoxType boolType))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V ($LS $ly@@32) |m#0@@48| |ks#0@@11|) (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V $ly@@32 |m#0@@48| |ks#0@@11|))) :qid |unknown.0:0| :skolemid |2482| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V ($LS $ly@@32) |m#0@@48| |ks#0@@11|)) )))
(assert (forall ((Maps._default.IMapRemove$K@@0 T@U) (Maps._default.IMapRemove$V@@0 T@U) ($ly@@33 T@U) (|m#0@@49| T@U) (|ks#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove$K@@0) TyType) (= (type Maps._default.IMapRemove$V@@0) TyType)) (= (type $ly@@33) LayerTypeType)) (= (type |m#0@@49|) (IMapType BoxType BoxType))) (= (type |ks#0@@12|) (MapType0Type BoxType boolType))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 $ly@@33 |m#0@@49| |ks#0@@12|) (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 $LZ |m#0@@49| |ks#0@@12|))) :qid |unknown.0:0| :skolemid |2483| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 (AsFuelBottom $ly@@33) |m#0@@49| |ks#0@@12|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@1 T@U) (Maps._default.IMapRemove$V@@1 T@U) ($ly@@34 T@U) (|m#0@@50| T@U) (|ks#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@1) TyType) (= (type Maps._default.IMapRemove$V@@1) TyType)) (= (type $ly@@34) LayerTypeType)) (= (type |m#0@@50|) (IMapType BoxType BoxType))) (= (type |ks#0@@13|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 |m#0@@50| |ks#0@@13|) (and ($Is |m#0@@50| (TIMap Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1)) ($Is |ks#0@@13| (TISet Maps._default.IMapRemove$K@@1))))) (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@34 |m#0@@50| |ks#0@@13|)) (|ISet#Difference| (|IMap#Domain| |m#0@@50|) |ks#0@@13|)) (forall ((|j#0@@7| T@U) ) (!  (=> (and (and (= (type |j#0@@7|) BoxType) ($IsBox |j#0@@7| Maps._default.IMapRemove$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@34 |m#0@@50| |ks#0@@13|)) |j#0@@7|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@34 |m#0@@50| |ks#0@@13|)) |j#0@@7|) (MapType0Select (|IMap#Elements| |m#0@@50|) |j#0@@7|))) :qid |Mapsidfy.84:20| :skolemid |2484| :pattern ( (MapType0Select (|IMap#Elements| |m#0@@50|) |j#0@@7|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@34 |m#0@@50| |ks#0@@13|)) |j#0@@7|)) :pattern ( (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@34 |m#0@@50| |ks#0@@13|)) |j#0@@7|)) ))) ($Is (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@34 |m#0@@50| |ks#0@@13|) (TIMap Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1)))) :qid |unknown.0:0| :skolemid |2485| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@34 |m#0@@50| |ks#0@@13|)) ))))
(assert (forall ((Maps._default.IMapRemove$K@@2 T@U) (Maps._default.IMapRemove$V@@2 T@U) ($ly@@35 T@U) (|m#0@@51| T@U) (|ks#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@2) TyType) (= (type Maps._default.IMapRemove$V@@2) TyType)) (= (type $ly@@35) LayerTypeType)) (= (type |m#0@@51|) (IMapType BoxType BoxType))) (= (type |ks#0@@14|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@51| (TIMap Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2)) ($Is |ks#0@@14| (TISet Maps._default.IMapRemove$K@@2)))) (= (|Maps.__default.IMapRemove#requires| Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2 $ly@@35 |m#0@@51| |ks#0@@14|) true)) :qid |unknown.0:0| :skolemid |2486| :pattern ( (|Maps.__default.IMapRemove#requires| Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2 $ly@@35 |m#0@@51| |ks#0@@14|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@3 T@U) (Maps._default.IMapRemove$V@@3 T@U) ($ly@@36 T@U) (|m#0@@52| T@U) (|ks#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@3) TyType) (= (type Maps._default.IMapRemove$V@@3) TyType)) (= (type $ly@@36) LayerTypeType)) (= (type |m#0@@52|) (IMapType BoxType BoxType))) (= (type |ks#0@@15|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 |m#0@@52| |ks#0@@15|) (and ($Is |m#0@@52| (TIMap Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3)) ($Is |ks#0@@15| (TISet Maps._default.IMapRemove$K@@3))))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 ($LS $ly@@36) |m#0@@52| |ks#0@@15|) (|IMap#Glue| (|lambda#36| Maps._default.IMapRemove$K@@3 (|IMap#Domain| |m#0@@52|) |ks#0@@15|) (|lambda#31| (|IMap#Elements| |m#0@@52|)) (TIMap Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3)))) :qid |unknown.0:0| :skolemid |2487| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 ($LS $ly@@36) |m#0@@52| |ks#0@@15|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@4 T@U) (Maps._default.IMapRemove$V@@4 T@U) ($ly@@37 T@U) (|m#0@@53| T@U) (|ks#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@4) TyType) (= (type Maps._default.IMapRemove$V@@4) TyType)) (= (type $ly@@37) LayerTypeType)) (= (type |m#0@@53|) (IMapType BoxType BoxType))) (= (type |ks#0@@16|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 (Lit |m#0@@53|) (Lit |ks#0@@16|)) (and ($Is |m#0@@53| (TIMap Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4)) ($Is |ks#0@@16| (TISet Maps._default.IMapRemove$K@@4))))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 ($LS $ly@@37) (Lit |m#0@@53|) (Lit |ks#0@@16|)) (|IMap#Glue| (|lambda#36| Maps._default.IMapRemove$K@@4 (|IMap#Domain| |m#0@@53|) (Lit |ks#0@@16|)) (|lambda#31| (|IMap#Elements| (Lit |m#0@@53|))) (TIMap Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2488| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 ($LS $ly@@37) (Lit |m#0@@53|) (Lit |ks#0@@16|))) ))))
(assert (forall ((arg0@@492 T@U) (arg1@@200 T@U) (arg2@@122 T@U) (arg3@@84 T@U) (arg4@@66 T@U) ) (! (= (type (Maps.__default.IMapRemove1 arg0@@492 arg1@@200 arg2@@122 arg3@@84 arg4@@66)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRemove1| :pattern ( (Maps.__default.IMapRemove1 arg0@@492 arg1@@200 arg2@@122 arg3@@84 arg4@@66)) )))
(assert (forall ((Maps._default.IMapRemove1$K T@U) (Maps._default.IMapRemove1$V T@U) ($ly@@38 T@U) (|m#0@@54| T@U) (|k#0@@44| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove1$K) TyType) (= (type Maps._default.IMapRemove1$V) TyType)) (= (type $ly@@38) LayerTypeType)) (= (type |m#0@@54|) (IMapType BoxType BoxType))) (= (type |k#0@@44|) BoxType)) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V ($LS $ly@@38) |m#0@@54| |k#0@@44|) (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V $ly@@38 |m#0@@54| |k#0@@44|))) :qid |unknown.0:0| :skolemid |2489| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V ($LS $ly@@38) |m#0@@54| |k#0@@44|)) )))
(assert (forall ((Maps._default.IMapRemove1$K@@0 T@U) (Maps._default.IMapRemove1$V@@0 T@U) ($ly@@39 T@U) (|m#0@@55| T@U) (|k#0@@45| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove1$K@@0) TyType) (= (type Maps._default.IMapRemove1$V@@0) TyType)) (= (type $ly@@39) LayerTypeType)) (= (type |m#0@@55|) (IMapType BoxType BoxType))) (= (type |k#0@@45|) BoxType)) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 $ly@@39 |m#0@@55| |k#0@@45|) (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 $LZ |m#0@@55| |k#0@@45|))) :qid |unknown.0:0| :skolemid |2490| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 (AsFuelBottom $ly@@39) |m#0@@55| |k#0@@45|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@1 T@U) (Maps._default.IMapRemove1$V@@1 T@U) ($ly@@40 T@U) (|m#0@@56| T@U) (|k#0@@46| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@1) TyType) (= (type Maps._default.IMapRemove1$V@@1) TyType)) (= (type $ly@@40) LayerTypeType)) (= (type |m#0@@56|) (IMapType BoxType BoxType))) (= (type |k#0@@46|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 |m#0@@56| |k#0@@46|) (and ($Is |m#0@@56| (TIMap Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1)) ($IsBox |k#0@@46| Maps._default.IMapRemove1$K@@1)))) (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@40 |m#0@@56| |k#0@@46|)) (|ISet#Difference| (|IMap#Domain| |m#0@@56|) (|ISet#UnionOne| (|ISet#Empty| BoxType) |k#0@@46|))) (forall ((|j#0@@8| T@U) ) (!  (=> (and (and (= (type |j#0@@8|) BoxType) ($IsBox |j#0@@8| Maps._default.IMapRemove1$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@40 |m#0@@56| |k#0@@46|)) |j#0@@8|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@40 |m#0@@56| |k#0@@46|)) |j#0@@8|) (MapType0Select (|IMap#Elements| |m#0@@56|) |j#0@@8|))) :qid |Mapsidfy.91:20| :skolemid |2491| :pattern ( (MapType0Select (|IMap#Elements| |m#0@@56|) |j#0@@8|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@40 |m#0@@56| |k#0@@46|)) |j#0@@8|)) :pattern ( (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@40 |m#0@@56| |k#0@@46|)) |j#0@@8|)) ))) ($Is (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@40 |m#0@@56| |k#0@@46|) (TIMap Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1)))) :qid |unknown.0:0| :skolemid |2492| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@40 |m#0@@56| |k#0@@46|)) ))))
(assert (forall ((Maps._default.IMapRemove1$K@@2 T@U) (Maps._default.IMapRemove1$V@@2 T@U) ($ly@@41 T@U) (|m#0@@57| T@U) (|k#0@@47| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@2) TyType) (= (type Maps._default.IMapRemove1$V@@2) TyType)) (= (type $ly@@41) LayerTypeType)) (= (type |m#0@@57|) (IMapType BoxType BoxType))) (= (type |k#0@@47|) BoxType)) (and ($Is |m#0@@57| (TIMap Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2)) ($IsBox |k#0@@47| Maps._default.IMapRemove1$K@@2))) (= (|Maps.__default.IMapRemove1#requires| Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2 $ly@@41 |m#0@@57| |k#0@@47|) true)) :qid |unknown.0:0| :skolemid |2493| :pattern ( (|Maps.__default.IMapRemove1#requires| Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2 $ly@@41 |m#0@@57| |k#0@@47|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@3 T@U) (Maps._default.IMapRemove1$V@@3 T@U) ($ly@@42 T@U) (|m#0@@58| T@U) (|k#0@@48| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@3) TyType) (= (type Maps._default.IMapRemove1$V@@3) TyType)) (= (type $ly@@42) LayerTypeType)) (= (type |m#0@@58|) (IMapType BoxType BoxType))) (= (type |k#0@@48|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 |m#0@@58| |k#0@@48|) (and ($Is |m#0@@58| (TIMap Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3)) ($IsBox |k#0@@48| Maps._default.IMapRemove1$K@@3)))) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 ($LS $ly@@42) |m#0@@58| |k#0@@48|) (|IMap#Glue| (|lambda#30| Maps._default.IMapRemove1$K@@3 (|IMap#Domain| |m#0@@58|) |k#0@@48|) (|lambda#31| (|IMap#Elements| |m#0@@58|)) (TIMap Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3)))) :qid |unknown.0:0| :skolemid |2494| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 ($LS $ly@@42) |m#0@@58| |k#0@@48|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@4 T@U) (Maps._default.IMapRemove1$V@@4 T@U) ($ly@@43 T@U) (|m#0@@59| T@U) (|k#0@@49| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@4) TyType) (= (type Maps._default.IMapRemove1$V@@4) TyType)) (= (type $ly@@43) LayerTypeType)) (= (type |m#0@@59|) (IMapType BoxType BoxType))) (= (type |k#0@@49|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 (Lit |m#0@@59|) (Lit |k#0@@49|)) (and ($Is |m#0@@59| (TIMap Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4)) ($IsBox |k#0@@49| Maps._default.IMapRemove1$K@@4)))) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 ($LS $ly@@43) (Lit |m#0@@59|) (Lit |k#0@@49|)) (|IMap#Glue| (|lambda#30| Maps._default.IMapRemove1$K@@4 (|IMap#Domain| |m#0@@59|) |k#0@@49|) (|lambda#31| (|IMap#Elements| (Lit |m#0@@59|))) (TIMap Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2495| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 ($LS $ly@@43) (Lit |m#0@@59|) (Lit |k#0@@49|))) ))))
(assert (forall ((arg0@@493 T@U) (arg1@@201 T@U) (arg2@@123 T@U) (arg3@@85 T@U) ) (! (= (type (Maps.__default.MapRestrict arg0@@493 arg1@@201 arg2@@123 arg3@@85)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRestrict| :pattern ( (Maps.__default.MapRestrict arg0@@493 arg1@@201 arg2@@123 arg3@@85)) )))
(assert  (=> true (forall ((Maps._default.MapRestrict$K T@U) (Maps._default.MapRestrict$V T@U) (|m#0@@60| T@U) (|ks#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K) TyType) (= (type Maps._default.MapRestrict$V) TyType)) (= (type |m#0@@60|) (MapType BoxType BoxType))) (= (type |ks#0@@17|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@60| |ks#0@@17|) (and ($Is |m#0@@60| (TMap Maps._default.MapRestrict$K Maps._default.MapRestrict$V)) ($Is |ks#0@@17| (TSet Maps._default.MapRestrict$K))))) ($Is (Maps.__default.MapRestrict Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@60| |ks#0@@17|) (TMap Maps._default.MapRestrict$K Maps._default.MapRestrict$V))) :qid |unknown.0:0| :skolemid |2496| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@60| |ks#0@@17|)) ))))
(assert (forall ((Maps._default.MapRestrict$K@@0 T@U) (Maps._default.MapRestrict$V@@0 T@U) (|m#0@@61| T@U) (|ks#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@0) TyType) (= (type Maps._default.MapRestrict$V@@0) TyType)) (= (type |m#0@@61|) (MapType BoxType BoxType))) (= (type |ks#0@@18|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@61| (TMap Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0)) ($Is |ks#0@@18| (TSet Maps._default.MapRestrict$K@@0)))) (= (|Maps.__default.MapRestrict#requires| Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0 |m#0@@61| |ks#0@@18|) true)) :qid |unknown.0:0| :skolemid |2497| :pattern ( (|Maps.__default.MapRestrict#requires| Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0 |m#0@@61| |ks#0@@18|)) )))
(assert (forall ((arg0@@494 T@U) (arg1@@202 T@U) (arg2@@124 T@U) ) (! (= (type (|lambda#48| arg0@@494 arg1@@202 arg2@@124)) (MapType0Type BoxType boolType)) :qid |funType:lambda#48| :pattern ( (|lambda#48| arg0@@494 arg1@@202 arg2@@124)) )))
(assert  (=> true (forall ((Maps._default.MapRestrict$K@@1 T@U) (Maps._default.MapRestrict$V@@1 T@U) (|m#0@@62| T@U) (|ks#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@1) TyType) (= (type Maps._default.MapRestrict$V@@1) TyType)) (= (type |m#0@@62|) (MapType BoxType BoxType))) (= (type |ks#0@@19|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@62| |ks#0@@19|) (and ($Is |m#0@@62| (TMap Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1)) ($Is |ks#0@@19| (TSet Maps._default.MapRestrict$K@@1))))) (= (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@62| |ks#0@@19|) (|Map#Glue| (|lambda#48| Maps._default.MapRestrict$K@@1 |ks#0@@19| (|Map#Domain| |m#0@@62|)) (|lambda#31| (|Map#Elements| |m#0@@62|)) (TMap Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |2498| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@62| |ks#0@@19|)) ))))
(assert  (=> true (forall ((Maps._default.MapRestrict$K@@2 T@U) (Maps._default.MapRestrict$V@@2 T@U) (|m#0@@63| T@U) (|ks#0@@20| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@2) TyType) (= (type Maps._default.MapRestrict$V@@2) TyType)) (= (type |m#0@@63|) (MapType BoxType BoxType))) (= (type |ks#0@@20|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@63|) (Lit |ks#0@@20|)) (and ($Is |m#0@@63| (TMap Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2)) ($Is |ks#0@@20| (TSet Maps._default.MapRestrict$K@@2))))) (= (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@63|) (Lit |ks#0@@20|)) (|Map#Glue| (|lambda#48| Maps._default.MapRestrict$K@@2 (Lit |ks#0@@20|) (|Map#Domain| |m#0@@63|)) (|lambda#31| (|Map#Elements| (Lit |m#0@@63|))) (TMap Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |2499| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@63|) (Lit |ks#0@@20|))) ))))
(assert (forall ((arg0@@495 T@U) (arg1@@203 T@U) (arg2@@125 T@U) (arg3@@86 T@U) ) (! (= (type (Maps.__default.MapIRestrict arg0@@495 arg1@@203 arg2@@125 arg3@@86)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapIRestrict| :pattern ( (Maps.__default.MapIRestrict arg0@@495 arg1@@203 arg2@@125 arg3@@86)) )))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K T@U) (Maps._default.MapIRestrict$V T@U) (|m#0@@64| T@U) (|ks#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K) TyType) (= (type Maps._default.MapIRestrict$V) TyType)) (= (type |m#0@@64|) (MapType BoxType BoxType))) (= (type |ks#0@@21|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@64| |ks#0@@21|) (and ($Is |m#0@@64| (TMap Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V)) ($Is |ks#0@@21| (TISet Maps._default.MapIRestrict$K))))) ($Is (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@64| |ks#0@@21|) (TMap Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V))) :qid |unknown.0:0| :skolemid |2500| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@64| |ks#0@@21|)) ))))
(assert (forall ((Maps._default.MapIRestrict$K@@0 T@U) (Maps._default.MapIRestrict$V@@0 T@U) (|m#0@@65| T@U) (|ks#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@0) TyType) (= (type Maps._default.MapIRestrict$V@@0) TyType)) (= (type |m#0@@65|) (MapType BoxType BoxType))) (= (type |ks#0@@22|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@65| (TMap Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0)) ($Is |ks#0@@22| (TISet Maps._default.MapIRestrict$K@@0)))) (= (|Maps.__default.MapIRestrict#requires| Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0 |m#0@@65| |ks#0@@22|) true)) :qid |unknown.0:0| :skolemid |2501| :pattern ( (|Maps.__default.MapIRestrict#requires| Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0 |m#0@@65| |ks#0@@22|)) )))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@1 T@U) (Maps._default.MapIRestrict$V@@1 T@U) (|m#0@@66| T@U) (|ks#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@1) TyType) (= (type Maps._default.MapIRestrict$V@@1) TyType)) (= (type |m#0@@66|) (MapType BoxType BoxType))) (= (type |ks#0@@23|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@66| |ks#0@@23|) (and ($Is |m#0@@66| (TMap Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1)) ($Is |ks#0@@23| (TISet Maps._default.MapIRestrict$K@@1))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@66| |ks#0@@23|) (|Map#Glue| (|lambda#48| Maps._default.MapIRestrict$K@@1 (|Map#Domain| |m#0@@66|) |ks#0@@23|) (|lambda#31| (|Map#Elements| |m#0@@66|)) (TMap Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |2502| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@66| |ks#0@@23|)) ))))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@2 T@U) (Maps._default.MapIRestrict$V@@2 T@U) (|m#0@@67| T@U) (|ks#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@2) TyType) (= (type Maps._default.MapIRestrict$V@@2) TyType)) (= (type |m#0@@67|) (MapType BoxType BoxType))) (= (type |ks#0@@24|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@67|) |ks#0@@24|) (and ($Is |m#0@@67| (TMap Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2)) ($Is |ks#0@@24| (TISet Maps._default.MapIRestrict$K@@2))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@67|) |ks#0@@24|) (|Map#Glue| (|lambda#48| Maps._default.MapIRestrict$K@@2 (|Map#Domain| |m#0@@67|) |ks#0@@24|) (|lambda#31| (|Map#Elements| (Lit |m#0@@67|))) (TMap Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |2503| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@67|) |ks#0@@24|)) ))))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@3 T@U) (Maps._default.MapIRestrict$V@@3 T@U) (|m#0@@68| T@U) (|ks#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@3) TyType) (= (type Maps._default.MapIRestrict$V@@3) TyType)) (= (type |m#0@@68|) (MapType BoxType BoxType))) (= (type |ks#0@@25|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@68|) (Lit |ks#0@@25|)) (and ($Is |m#0@@68| (TMap Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3)) ($Is |ks#0@@25| (TISet Maps._default.MapIRestrict$K@@3))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@68|) (Lit |ks#0@@25|)) (|Map#Glue| (|lambda#48| Maps._default.MapIRestrict$K@@3 (|Map#Domain| |m#0@@68|) (Lit |ks#0@@25|)) (|lambda#31| (|Map#Elements| (Lit |m#0@@68|))) (TMap Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3)))) :qid |unknown.0:0| :weight 3 :skolemid |2504| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@68|) (Lit |ks#0@@25|))) ))))
(assert (forall ((arg0@@496 T@U) (arg1@@204 T@U) (arg2@@126 T@U) (arg3@@87 T@U) ) (! (= (type (Maps.__default.IMapRestrict arg0@@496 arg1@@204 arg2@@126 arg3@@87)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRestrict| :pattern ( (Maps.__default.IMapRestrict arg0@@496 arg1@@204 arg2@@126 arg3@@87)) )))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K T@U) (Maps._default.IMapRestrict$V T@U) (|m#0@@69| T@U) (|ks#0@@26| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K) TyType) (= (type Maps._default.IMapRestrict$V) TyType)) (= (type |m#0@@69|) (IMapType BoxType BoxType))) (= (type |ks#0@@26|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@69| |ks#0@@26|) (and ($Is |m#0@@69| (TIMap Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V)) ($Is |ks#0@@26| (TISet Maps._default.IMapRestrict$K))))) ($Is (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@69| |ks#0@@26|) (TIMap Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V))) :qid |unknown.0:0| :skolemid |2505| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@69| |ks#0@@26|)) ))))
(assert (forall ((Maps._default.IMapRestrict$K@@0 T@U) (Maps._default.IMapRestrict$V@@0 T@U) (|m#0@@70| T@U) (|ks#0@@27| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@0) TyType) (= (type Maps._default.IMapRestrict$V@@0) TyType)) (= (type |m#0@@70|) (IMapType BoxType BoxType))) (= (type |ks#0@@27|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@70| (TIMap Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0)) ($Is |ks#0@@27| (TISet Maps._default.IMapRestrict$K@@0)))) (= (|Maps.__default.IMapRestrict#requires| Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0 |m#0@@70| |ks#0@@27|) true)) :qid |unknown.0:0| :skolemid |2506| :pattern ( (|Maps.__default.IMapRestrict#requires| Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0 |m#0@@70| |ks#0@@27|)) )))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K@@1 T@U) (Maps._default.IMapRestrict$V@@1 T@U) (|m#0@@71| T@U) (|ks#0@@28| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@1) TyType) (= (type Maps._default.IMapRestrict$V@@1) TyType)) (= (type |m#0@@71|) (IMapType BoxType BoxType))) (= (type |ks#0@@28|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@71| |ks#0@@28|) (and ($Is |m#0@@71| (TIMap Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1)) ($Is |ks#0@@28| (TISet Maps._default.IMapRestrict$K@@1))))) (= (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@71| |ks#0@@28|) (|IMap#Glue| (|lambda#48| Maps._default.IMapRestrict$K@@1 |ks#0@@28| (|IMap#Domain| |m#0@@71|)) (|lambda#31| (|IMap#Elements| |m#0@@71|)) (TIMap Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |2507| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@71| |ks#0@@28|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K@@2 T@U) (Maps._default.IMapRestrict$V@@2 T@U) (|m#0@@72| T@U) (|ks#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@2) TyType) (= (type Maps._default.IMapRestrict$V@@2) TyType)) (= (type |m#0@@72|) (IMapType BoxType BoxType))) (= (type |ks#0@@29|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@72|) (Lit |ks#0@@29|)) (and ($Is |m#0@@72| (TIMap Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2)) ($Is |ks#0@@29| (TISet Maps._default.IMapRestrict$K@@2))))) (= (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@72|) (Lit |ks#0@@29|)) (|IMap#Glue| (|lambda#48| Maps._default.IMapRestrict$K@@2 (Lit |ks#0@@29|) (|IMap#Domain| |m#0@@72|)) (|lambda#31| (|IMap#Elements| (Lit |m#0@@72|))) (TIMap Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |2508| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@72|) (Lit |ks#0@@29|))) ))))
(assert (forall ((arg0@@497 T@U) (arg1@@205 T@U) (arg2@@127 T@U) (arg3@@88 T@U) (arg4@@67 T@U) ) (! (= (type (Maps.__default.MapDisjointUnion arg0@@497 arg1@@205 arg2@@127 arg3@@88 arg4@@67)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapDisjointUnion| :pattern ( (Maps.__default.MapDisjointUnion arg0@@497 arg1@@205 arg2@@127 arg3@@88 arg4@@67)) )))
(assert (forall ((Maps._default.MapDisjointUnion$U T@U) (Maps._default.MapDisjointUnion$T T@U) ($ly@@44 T@U) (|mapa#0| T@U) (|mapb#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapDisjointUnion$U) TyType) (= (type Maps._default.MapDisjointUnion$T) TyType)) (= (type $ly@@44) LayerTypeType)) (= (type |mapa#0|) (MapType BoxType BoxType))) (= (type |mapb#0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T ($LS $ly@@44) |mapa#0| |mapb#0|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T $ly@@44 |mapa#0| |mapb#0|))) :qid |unknown.0:0| :skolemid |2509| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T ($LS $ly@@44) |mapa#0| |mapb#0|)) )))
(assert (forall ((Maps._default.MapDisjointUnion$U@@0 T@U) (Maps._default.MapDisjointUnion$T@@0 T@U) ($ly@@45 T@U) (|mapa#0@@0| T@U) (|mapb#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@0) TyType) (= (type Maps._default.MapDisjointUnion$T@@0) TyType)) (= (type $ly@@45) LayerTypeType)) (= (type |mapa#0@@0|) (MapType BoxType BoxType))) (= (type |mapb#0@@0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 $ly@@45 |mapa#0@@0| |mapb#0@@0|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 $LZ |mapa#0@@0| |mapb#0@@0|))) :qid |unknown.0:0| :skolemid |2510| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 (AsFuelBottom $ly@@45) |mapa#0@@0| |mapb#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@1 T@U) (Maps._default.MapDisjointUnion$T@@1 T@U) ($ly@@46 T@U) (|mapa#0@@1| T@U) (|mapb#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@1) TyType) (= (type Maps._default.MapDisjointUnion$T@@1) TyType)) (= (type $ly@@46) LayerTypeType)) (= (type |mapa#0@@1|) (MapType BoxType BoxType))) (= (type |mapb#0@@1|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 |mapa#0@@1| |mapb#0@@1|) (and (and ($Is |mapa#0@@1| (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1)) ($Is |mapb#0@@1| (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1))) (|Set#Disjoint| (|Map#Domain| |mapa#0@@1|) (|Map#Domain| |mapb#0@@1|))))) (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@46 |mapa#0@@1| |mapb#0@@1|)) (|Set#Union| (|Map#Domain| |mapa#0@@1|) (|Map#Domain| |mapb#0@@1|))) (forall ((|k#0@@50| T@U) ) (!  (=> (and (and (= (type |k#0@@50|) BoxType) ($IsBox |k#0@@50| Maps._default.MapDisjointUnion$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@1|) |k#0@@50|))) (= (MapType0Select (|Map#Elements| |mapa#0@@1|) |k#0@@50|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@46 |mapa#0@@1| |mapb#0@@1|)) |k#0@@50|))) :qid |Mapsidfy.112:18| :skolemid |2511| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@46 |mapa#0@@1| |mapb#0@@1|)) |k#0@@50|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@1|) |k#0@@50|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@1|) |k#0@@50|)) ))) (forall ((|k#1@@1| T@U) ) (!  (=> (and (and (= (type |k#1@@1|) BoxType) ($IsBox |k#1@@1| Maps._default.MapDisjointUnion$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@1|) |k#1@@1|))) (= (MapType0Select (|Map#Elements| |mapb#0@@1|) |k#1@@1|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@46 |mapa#0@@1| |mapb#0@@1|)) |k#1@@1|))) :qid |Mapsidfy.113:18| :skolemid |2512| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@46 |mapa#0@@1| |mapb#0@@1|)) |k#1@@1|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@1|) |k#1@@1|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@1|) |k#1@@1|)) ))) ($Is (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@46 |mapa#0@@1| |mapb#0@@1|) (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1)))) :qid |unknown.0:0| :skolemid |2513| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@46 |mapa#0@@1| |mapb#0@@1|)) ))))
(assert (forall ((Maps._default.MapDisjointUnion$U@@2 T@U) (Maps._default.MapDisjointUnion$T@@2 T@U) ($ly@@47 T@U) (|mapa#0@@2| T@U) (|mapb#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@2) TyType) (= (type Maps._default.MapDisjointUnion$T@@2) TyType)) (= (type $ly@@47) LayerTypeType)) (= (type |mapa#0@@2|) (MapType BoxType BoxType))) (= (type |mapb#0@@2|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@2| (TMap Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2)) ($Is |mapb#0@@2| (TMap Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2)))) (= (|Maps.__default.MapDisjointUnion#requires| Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2 $ly@@47 |mapa#0@@2| |mapb#0@@2|) (|Set#Disjoint| (|Map#Domain| |mapa#0@@2|) (|Map#Domain| |mapb#0@@2|)))) :qid |unknown.0:0| :skolemid |2514| :pattern ( (|Maps.__default.MapDisjointUnion#requires| Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2 $ly@@47 |mapa#0@@2| |mapb#0@@2|)) )))
(assert (forall ((arg0@@498 T@U) (arg1@@206 T@U) (arg2@@128 T@U) ) (! (= (type (|lambda#63| arg0@@498 arg1@@206 arg2@@128)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#63| :pattern ( (|lambda#63| arg0@@498 arg1@@206 arg2@@128)) )))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@3 T@U) (Maps._default.MapDisjointUnion$T@@3 T@U) ($ly@@48 T@U) (|mapa#0@@3| T@U) (|mapb#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@3) TyType) (= (type Maps._default.MapDisjointUnion$T@@3) TyType)) (= (type $ly@@48) LayerTypeType)) (= (type |mapa#0@@3|) (MapType BoxType BoxType))) (= (type |mapb#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 |mapa#0@@3| |mapb#0@@3|) (and (and ($Is |mapa#0@@3| (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3)) ($Is |mapb#0@@3| (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3))) (|Set#Disjoint| (|Map#Domain| |mapa#0@@3|) (|Map#Domain| |mapb#0@@3|))))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 ($LS $ly@@48) |mapa#0@@3| |mapb#0@@3|) (|Map#Glue| (|lambda#2| Maps._default.MapDisjointUnion$U@@3 (|Set#Union| (|Map#Domain| |mapa#0@@3|) (|Map#Domain| |mapb#0@@3|))) (|lambda#63| (|Map#Domain| |mapa#0@@3|) (|Map#Elements| |mapa#0@@3|) (|Map#Elements| |mapb#0@@3|)) (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3)))) :qid |unknown.0:0| :skolemid |2515| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 ($LS $ly@@48) |mapa#0@@3| |mapb#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@4 T@U) (Maps._default.MapDisjointUnion$T@@4 T@U) ($ly@@49 T@U) (|mapa#0@@4| T@U) (|mapb#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@4) TyType) (= (type Maps._default.MapDisjointUnion$T@@4) TyType)) (= (type $ly@@49) LayerTypeType)) (= (type |mapa#0@@4|) (MapType BoxType BoxType))) (= (type |mapb#0@@4|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 (Lit |mapa#0@@4|) (Lit |mapb#0@@4|)) (and (and ($Is |mapa#0@@4| (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4)) ($Is |mapb#0@@4| (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4))) (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@4|)) (|Map#Domain| (Lit |mapb#0@@4|)))))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 ($LS $ly@@49) (Lit |mapa#0@@4|) (Lit |mapb#0@@4|)) (|Map#Glue| (|lambda#2| Maps._default.MapDisjointUnion$U@@4 (|Set#Union| (|Map#Domain| (Lit |mapa#0@@4|)) (|Map#Domain| (Lit |mapb#0@@4|)))) (|lambda#63| (|Map#Domain| |mapa#0@@4|) (|Map#Elements| (Lit |mapa#0@@4|)) (|Map#Elements| (Lit |mapb#0@@4|))) (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2516| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 ($LS $ly@@49) (Lit |mapa#0@@4|) (Lit |mapb#0@@4|))) ))))
(assert (forall ((arg0@@499 T@U) (arg1@@207 T@U) (arg2@@129 T@U) (arg3@@89 T@U) (arg4@@68 T@U) ) (! (= (type (Maps.__default.MapUnionPreferA arg0@@499 arg1@@207 arg2@@129 arg3@@89 arg4@@68)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnionPreferA| :pattern ( (Maps.__default.MapUnionPreferA arg0@@499 arg1@@207 arg2@@129 arg3@@89 arg4@@68)) )))
(assert (forall ((Maps._default.MapUnionPreferA$U T@U) (Maps._default.MapUnionPreferA$T T@U) ($ly@@50 T@U) (|mapa#0@@5| T@U) (|mapb#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferA$U) TyType) (= (type Maps._default.MapUnionPreferA$T) TyType)) (= (type $ly@@50) LayerTypeType)) (= (type |mapa#0@@5|) (MapType BoxType BoxType))) (= (type |mapb#0@@5|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T ($LS $ly@@50) |mapa#0@@5| |mapb#0@@5|) (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T $ly@@50 |mapa#0@@5| |mapb#0@@5|))) :qid |unknown.0:0| :skolemid |2517| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T ($LS $ly@@50) |mapa#0@@5| |mapb#0@@5|)) )))
(assert (forall ((Maps._default.MapUnionPreferA$U@@0 T@U) (Maps._default.MapUnionPreferA$T@@0 T@U) ($ly@@51 T@U) (|mapa#0@@6| T@U) (|mapb#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@0) TyType) (= (type Maps._default.MapUnionPreferA$T@@0) TyType)) (= (type $ly@@51) LayerTypeType)) (= (type |mapa#0@@6|) (MapType BoxType BoxType))) (= (type |mapb#0@@6|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 $ly@@51 |mapa#0@@6| |mapb#0@@6|) (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 $LZ |mapa#0@@6| |mapb#0@@6|))) :qid |unknown.0:0| :skolemid |2518| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 (AsFuelBottom $ly@@51) |mapa#0@@6| |mapb#0@@6|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@1 T@U) (Maps._default.MapUnionPreferA$T@@1 T@U) ($ly@@52 T@U) (|mapa#0@@7| T@U) (|mapb#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@1) TyType) (= (type Maps._default.MapUnionPreferA$T@@1) TyType)) (= (type $ly@@52) LayerTypeType)) (= (type |mapa#0@@7|) (MapType BoxType BoxType))) (= (type |mapb#0@@7|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 |mapa#0@@7| |mapb#0@@7|) (and ($Is |mapa#0@@7| (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1)) ($Is |mapb#0@@7| (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@52 |mapa#0@@7| |mapb#0@@7|)) (|Set#Union| (|Map#Domain| |mapa#0@@7|) (|Map#Domain| |mapb#0@@7|))) (forall ((|k#0@@51| T@U) ) (!  (=> (and (and (= (type |k#0@@51|) BoxType) ($IsBox |k#0@@51| Maps._default.MapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#0@@51|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@52 |mapa#0@@7| |mapb#0@@7|)) |k#0@@51|) (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#0@@51|))) :qid |Mapsidfy.122:20| :skolemid |2519| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#0@@51|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@52 |mapa#0@@7| |mapb#0@@7|)) |k#0@@51|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#0@@51|)) ))) (forall ((|k#1@@2| T@U) ) (!  (=> (and (and (= (type |k#1@@2|) BoxType) ($IsBox |k#1@@2| Maps._default.MapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|Set#Difference| (|Map#Domain| |mapb#0@@7|) (|Map#Domain| |mapa#0@@7|)) |k#1@@2|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@52 |mapa#0@@7| |mapb#0@@7|)) |k#1@@2|) (MapType0Select (|Map#Elements| |mapb#0@@7|) |k#1@@2|))) :qid |Mapsidfy.123:20| :skolemid |2520| :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@7|) |k#1@@2|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@52 |mapa#0@@7| |mapb#0@@7|)) |k#1@@2|)) :pattern ( (MapType0Select (|Set#Difference| (|Map#Domain| |mapb#0@@7|) (|Map#Domain| |mapa#0@@7|)) |k#1@@2|)) ))) (forall ((|k#2| T@U) ) (!  (=> (and (and (= (type |k#2|) BoxType) ($IsBox |k#2| Maps._default.MapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#2|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@7|) |k#2|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@52 |mapa#0@@7| |mapb#0@@7|)) |k#2|) (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#2|))) :qid |Mapsidfy.124:20| :skolemid |2521| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#2|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@52 |mapa#0@@7| |mapb#0@@7|)) |k#2|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@7|) |k#2|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#2|)) ))) ($Is (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@52 |mapa#0@@7| |mapb#0@@7|) (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1)))) :qid |unknown.0:0| :skolemid |2522| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@52 |mapa#0@@7| |mapb#0@@7|)) ))))
(assert (forall ((Maps._default.MapUnionPreferA$U@@2 T@U) (Maps._default.MapUnionPreferA$T@@2 T@U) ($ly@@53 T@U) (|mapa#0@@8| T@U) (|mapb#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@2) TyType) (= (type Maps._default.MapUnionPreferA$T@@2) TyType)) (= (type $ly@@53) LayerTypeType)) (= (type |mapa#0@@8|) (MapType BoxType BoxType))) (= (type |mapb#0@@8|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@8| (TMap Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2)) ($Is |mapb#0@@8| (TMap Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2)))) (= (|Maps.__default.MapUnionPreferA#requires| Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2 $ly@@53 |mapa#0@@8| |mapb#0@@8|) true)) :qid |unknown.0:0| :skolemid |2523| :pattern ( (|Maps.__default.MapUnionPreferA#requires| Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2 $ly@@53 |mapa#0@@8| |mapb#0@@8|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@3 T@U) (Maps._default.MapUnionPreferA$T@@3 T@U) ($ly@@54 T@U) (|mapa#0@@9| T@U) (|mapb#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@3) TyType) (= (type Maps._default.MapUnionPreferA$T@@3) TyType)) (= (type $ly@@54) LayerTypeType)) (= (type |mapa#0@@9|) (MapType BoxType BoxType))) (= (type |mapb#0@@9|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 |mapa#0@@9| |mapb#0@@9|) (and ($Is |mapa#0@@9| (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3)) ($Is |mapb#0@@9| (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3))))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 ($LS $ly@@54) |mapa#0@@9| |mapb#0@@9|) (|Map#Glue| (|lambda#2| Maps._default.MapUnionPreferA$U@@3 (|Set#Union| (|Map#Domain| |mapa#0@@9|) (|Map#Domain| |mapb#0@@9|))) (|lambda#63| (|Map#Domain| |mapa#0@@9|) (|Map#Elements| |mapa#0@@9|) (|Map#Elements| |mapb#0@@9|)) (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3)))) :qid |unknown.0:0| :skolemid |2524| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 ($LS $ly@@54) |mapa#0@@9| |mapb#0@@9|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@4 T@U) (Maps._default.MapUnionPreferA$T@@4 T@U) ($ly@@55 T@U) (|mapa#0@@10| T@U) (|mapb#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@4) TyType) (= (type Maps._default.MapUnionPreferA$T@@4) TyType)) (= (type $ly@@55) LayerTypeType)) (= (type |mapa#0@@10|) (MapType BoxType BoxType))) (= (type |mapb#0@@10|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 (Lit |mapa#0@@10|) (Lit |mapb#0@@10|)) (and ($Is |mapa#0@@10| (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4)) ($Is |mapb#0@@10| (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4))))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 ($LS $ly@@55) (Lit |mapa#0@@10|) (Lit |mapb#0@@10|)) (|Map#Glue| (|lambda#2| Maps._default.MapUnionPreferA$U@@4 (|Set#Union| (|Map#Domain| (Lit |mapa#0@@10|)) (|Map#Domain| (Lit |mapb#0@@10|)))) (|lambda#63| (|Map#Domain| |mapa#0@@10|) (|Map#Elements| (Lit |mapa#0@@10|)) (|Map#Elements| (Lit |mapb#0@@10|))) (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2525| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 ($LS $ly@@55) (Lit |mapa#0@@10|) (Lit |mapb#0@@10|))) ))))
(assert (forall ((arg0@@500 T@U) (arg1@@208 T@U) (arg2@@130 T@U) (arg3@@90 T@U) (arg4@@69 T@U) ) (! (= (type (Maps.__default.MapUnionPreferB arg0@@500 arg1@@208 arg2@@130 arg3@@90 arg4@@69)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnionPreferB| :pattern ( (Maps.__default.MapUnionPreferB arg0@@500 arg1@@208 arg2@@130 arg3@@90 arg4@@69)) )))
(assert (forall ((Maps._default.MapUnionPreferB$U T@U) (Maps._default.MapUnionPreferB$T T@U) ($ly@@56 T@U) (|mapa#0@@11| T@U) (|mapb#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferB$U) TyType) (= (type Maps._default.MapUnionPreferB$T) TyType)) (= (type $ly@@56) LayerTypeType)) (= (type |mapa#0@@11|) (MapType BoxType BoxType))) (= (type |mapb#0@@11|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T ($LS $ly@@56) |mapa#0@@11| |mapb#0@@11|) (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T $ly@@56 |mapa#0@@11| |mapb#0@@11|))) :qid |unknown.0:0| :skolemid |2526| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T ($LS $ly@@56) |mapa#0@@11| |mapb#0@@11|)) )))
(assert (forall ((Maps._default.MapUnionPreferB$U@@0 T@U) (Maps._default.MapUnionPreferB$T@@0 T@U) ($ly@@57 T@U) (|mapa#0@@12| T@U) (|mapb#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@0) TyType) (= (type Maps._default.MapUnionPreferB$T@@0) TyType)) (= (type $ly@@57) LayerTypeType)) (= (type |mapa#0@@12|) (MapType BoxType BoxType))) (= (type |mapb#0@@12|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 $ly@@57 |mapa#0@@12| |mapb#0@@12|) (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 $LZ |mapa#0@@12| |mapb#0@@12|))) :qid |unknown.0:0| :skolemid |2527| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 (AsFuelBottom $ly@@57) |mapa#0@@12| |mapb#0@@12|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@1 T@U) (Maps._default.MapUnionPreferB$T@@1 T@U) ($ly@@58 T@U) (|mapa#0@@13| T@U) (|mapb#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@1) TyType) (= (type Maps._default.MapUnionPreferB$T@@1) TyType)) (= (type $ly@@58) LayerTypeType)) (= (type |mapa#0@@13|) (MapType BoxType BoxType))) (= (type |mapb#0@@13|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 |mapa#0@@13| |mapb#0@@13|) (and ($Is |mapa#0@@13| (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1)) ($Is |mapb#0@@13| (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@58 |mapa#0@@13| |mapb#0@@13|)) (|Set#Union| (|Map#Domain| |mapa#0@@13|) (|Map#Domain| |mapb#0@@13|))) (forall ((|k#0@@52| T@U) ) (!  (=> (and (and (= (type |k#0@@52|) BoxType) ($IsBox |k#0@@52| Maps._default.MapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#0@@52|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@58 |mapa#0@@13| |mapb#0@@13|)) |k#0@@52|) (MapType0Select (|Map#Elements| |mapb#0@@13|) |k#0@@52|))) :qid |Mapsidfy.131:20| :skolemid |2528| :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@13|) |k#0@@52|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@58 |mapa#0@@13| |mapb#0@@13|)) |k#0@@52|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#0@@52|)) ))) (forall ((|k#1@@3| T@U) ) (!  (=> (and (and (= (type |k#1@@3|) BoxType) ($IsBox |k#1@@3| Maps._default.MapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|Set#Difference| (|Map#Domain| |mapa#0@@13|) (|Map#Domain| |mapb#0@@13|)) |k#1@@3|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@58 |mapa#0@@13| |mapb#0@@13|)) |k#1@@3|) (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#1@@3|))) :qid |Mapsidfy.132:20| :skolemid |2529| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#1@@3|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@58 |mapa#0@@13| |mapb#0@@13|)) |k#1@@3|)) :pattern ( (MapType0Select (|Set#Difference| (|Map#Domain| |mapa#0@@13|) (|Map#Domain| |mapb#0@@13|)) |k#1@@3|)) ))) (forall ((|k#2@@0| T@U) ) (!  (=> (and (and (= (type |k#2@@0|) BoxType) ($IsBox |k#2@@0| Maps._default.MapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@13|) |k#2@@0|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#2@@0|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@58 |mapa#0@@13| |mapb#0@@13|)) |k#2@@0|) (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#2@@0|))) :qid |Mapsidfy.133:20| :skolemid |2530| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#2@@0|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@58 |mapa#0@@13| |mapb#0@@13|)) |k#2@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#2@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@13|) |k#2@@0|)) ))) ($Is (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@58 |mapa#0@@13| |mapb#0@@13|) (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1)))) :qid |unknown.0:0| :skolemid |2531| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@58 |mapa#0@@13| |mapb#0@@13|)) ))))
(assert (forall ((Maps._default.MapUnionPreferB$U@@2 T@U) (Maps._default.MapUnionPreferB$T@@2 T@U) ($ly@@59 T@U) (|mapa#0@@14| T@U) (|mapb#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@2) TyType) (= (type Maps._default.MapUnionPreferB$T@@2) TyType)) (= (type $ly@@59) LayerTypeType)) (= (type |mapa#0@@14|) (MapType BoxType BoxType))) (= (type |mapb#0@@14|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@14| (TMap Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2)) ($Is |mapb#0@@14| (TMap Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2)))) (= (|Maps.__default.MapUnionPreferB#requires| Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2 $ly@@59 |mapa#0@@14| |mapb#0@@14|) true)) :qid |unknown.0:0| :skolemid |2532| :pattern ( (|Maps.__default.MapUnionPreferB#requires| Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2 $ly@@59 |mapa#0@@14| |mapb#0@@14|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@3 T@U) (Maps._default.MapUnionPreferB$T@@3 T@U) ($ly@@60 T@U) (|mapa#0@@15| T@U) (|mapb#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@3) TyType) (= (type Maps._default.MapUnionPreferB$T@@3) TyType)) (= (type $ly@@60) LayerTypeType)) (= (type |mapa#0@@15|) (MapType BoxType BoxType))) (= (type |mapb#0@@15|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 |mapa#0@@15| |mapb#0@@15|) (and ($Is |mapa#0@@15| (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3)) ($Is |mapb#0@@15| (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3))))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 ($LS $ly@@60) |mapa#0@@15| |mapb#0@@15|) (|Map#Glue| (|lambda#2| Maps._default.MapUnionPreferB$U@@3 (|Set#Union| (|Map#Domain| |mapa#0@@15|) (|Map#Domain| |mapb#0@@15|))) (|lambda#63| (|Map#Domain| |mapb#0@@15|) (|Map#Elements| |mapb#0@@15|) (|Map#Elements| |mapa#0@@15|)) (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3)))) :qid |unknown.0:0| :skolemid |2533| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 ($LS $ly@@60) |mapa#0@@15| |mapb#0@@15|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@4 T@U) (Maps._default.MapUnionPreferB$T@@4 T@U) ($ly@@61 T@U) (|mapa#0@@16| T@U) (|mapb#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@4) TyType) (= (type Maps._default.MapUnionPreferB$T@@4) TyType)) (= (type $ly@@61) LayerTypeType)) (= (type |mapa#0@@16|) (MapType BoxType BoxType))) (= (type |mapb#0@@16|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 (Lit |mapa#0@@16|) (Lit |mapb#0@@16|)) (and ($Is |mapa#0@@16| (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4)) ($Is |mapb#0@@16| (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4))))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 ($LS $ly@@61) (Lit |mapa#0@@16|) (Lit |mapb#0@@16|)) (|Map#Glue| (|lambda#2| Maps._default.MapUnionPreferB$U@@4 (|Set#Union| (|Map#Domain| (Lit |mapa#0@@16|)) (|Map#Domain| (Lit |mapb#0@@16|)))) (|lambda#63| (|Map#Domain| |mapb#0@@16|) (|Map#Elements| (Lit |mapb#0@@16|)) (|Map#Elements| (Lit |mapa#0@@16|))) (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2534| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 ($LS $ly@@61) (Lit |mapa#0@@16|) (Lit |mapb#0@@16|))) ))))
(assert (forall ((arg0@@501 T@U) (arg1@@209 T@U) (arg2@@131 T@U) (arg3@@91 T@U) (arg4@@70 T@U) ) (! (= (type (Maps.__default.MapUnion arg0@@501 arg1@@209 arg2@@131 arg3@@91 arg4@@70)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnion| :pattern ( (Maps.__default.MapUnion arg0@@501 arg1@@209 arg2@@131 arg3@@91 arg4@@70)) )))
(assert (forall ((Maps._default.MapUnion$U T@U) (Maps._default.MapUnion$T T@U) ($ly@@62 T@U) (|mapa#0@@17| T@U) (|mapb#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnion$U) TyType) (= (type Maps._default.MapUnion$T) TyType)) (= (type $ly@@62) LayerTypeType)) (= (type |mapa#0@@17|) (MapType BoxType BoxType))) (= (type |mapb#0@@17|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T ($LS $ly@@62) |mapa#0@@17| |mapb#0@@17|) (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T $ly@@62 |mapa#0@@17| |mapb#0@@17|))) :qid |unknown.0:0| :skolemid |2535| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T ($LS $ly@@62) |mapa#0@@17| |mapb#0@@17|)) )))
(assert (forall ((Maps._default.MapUnion$U@@0 T@U) (Maps._default.MapUnion$T@@0 T@U) ($ly@@63 T@U) (|mapa#0@@18| T@U) (|mapb#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnion$U@@0) TyType) (= (type Maps._default.MapUnion$T@@0) TyType)) (= (type $ly@@63) LayerTypeType)) (= (type |mapa#0@@18|) (MapType BoxType BoxType))) (= (type |mapb#0@@18|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 $ly@@63 |mapa#0@@18| |mapb#0@@18|) (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 $LZ |mapa#0@@18| |mapb#0@@18|))) :qid |unknown.0:0| :skolemid |2536| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 (AsFuelBottom $ly@@63) |mapa#0@@18| |mapb#0@@18|)) )))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@1 T@U) (Maps._default.MapUnion$T@@1 T@U) ($ly@@64 T@U) (|mapa#0@@19| T@U) (|mapb#0@@19| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@1) TyType) (= (type Maps._default.MapUnion$T@@1) TyType)) (= (type $ly@@64) LayerTypeType)) (= (type |mapa#0@@19|) (MapType BoxType BoxType))) (= (type |mapb#0@@19|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 |mapa#0@@19| |mapb#0@@19|) (and ($Is |mapa#0@@19| (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1)) ($Is |mapb#0@@19| (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@64 |mapa#0@@19| |mapb#0@@19|)) (|Set#Union| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|))) (forall ((|k#0@@53| T@U) ) (!  (=> (and (and (= (type |k#0@@53|) BoxType) ($IsBox |k#0@@53| Maps._default.MapUnion$U@@1)) (U_2_bool (MapType0Select (|Set#Difference| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|)) |k#0@@53|))) (= (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#0@@53|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@64 |mapa#0@@19| |mapb#0@@19|)) |k#0@@53|))) :qid |Mapsidfy.142:18| :skolemid |2537| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@64 |mapa#0@@19| |mapb#0@@19|)) |k#0@@53|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#0@@53|)) :pattern ( (MapType0Select (|Set#Difference| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|)) |k#0@@53|)) ))) (forall ((|k#1@@4| T@U) ) (!  (=> (and (and (= (type |k#1@@4|) BoxType) ($IsBox |k#1@@4| Maps._default.MapUnion$U@@1)) (U_2_bool (MapType0Select (|Set#Difference| (|Map#Domain| |mapb#0@@19|) (|Map#Domain| |mapa#0@@19|)) |k#1@@4|))) (= (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#1@@4|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@64 |mapa#0@@19| |mapb#0@@19|)) |k#1@@4|))) :qid |Mapsidfy.143:18| :skolemid |2538| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@64 |mapa#0@@19| |mapb#0@@19|)) |k#1@@4|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#1@@4|)) :pattern ( (MapType0Select (|Set#Difference| (|Map#Domain| |mapb#0@@19|) (|Map#Domain| |mapa#0@@19|)) |k#1@@4|)) ))) (forall ((|k#2@@1| T@U) ) (!  (=> (and (and (= (type |k#2@@1|) BoxType) ($IsBox |k#2@@1| Maps._default.MapUnion$U@@1)) (U_2_bool (MapType0Select (|Set#Intersection| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|)) |k#2@@1|))) (or (= (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#2@@1|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@64 |mapa#0@@19| |mapb#0@@19|)) |k#2@@1|)) (= (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#2@@1|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@64 |mapa#0@@19| |mapb#0@@19|)) |k#2@@1|)))) :qid |Mapsidfy.144:18| :skolemid |2539| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#2@@1|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@64 |mapa#0@@19| |mapb#0@@19|)) |k#2@@1|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#2@@1|)) :pattern ( (MapType0Select (|Set#Intersection| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|)) |k#2@@1|)) ))) ($Is (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@64 |mapa#0@@19| |mapb#0@@19|) (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1)))) :qid |unknown.0:0| :skolemid |2540| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@64 |mapa#0@@19| |mapb#0@@19|)) ))))
(assert (forall ((Maps._default.MapUnion$U@@2 T@U) (Maps._default.MapUnion$T@@2 T@U) ($ly@@65 T@U) (|mapa#0@@20| T@U) (|mapb#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@2) TyType) (= (type Maps._default.MapUnion$T@@2) TyType)) (= (type $ly@@65) LayerTypeType)) (= (type |mapa#0@@20|) (MapType BoxType BoxType))) (= (type |mapb#0@@20|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@20| (TMap Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2)) ($Is |mapb#0@@20| (TMap Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2)))) (= (|Maps.__default.MapUnion#requires| Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2 $ly@@65 |mapa#0@@20| |mapb#0@@20|) true)) :qid |unknown.0:0| :skolemid |2541| :pattern ( (|Maps.__default.MapUnion#requires| Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2 $ly@@65 |mapa#0@@20| |mapb#0@@20|)) )))
(assert (= (type StartFuel_Maps._default.MapUnionPreferA) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@3 T@U) (Maps._default.MapUnion$T@@3 T@U) ($ly@@66 T@U) (|mapa#0@@21| T@U) (|mapb#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@3) TyType) (= (type Maps._default.MapUnion$T@@3) TyType)) (= (type $ly@@66) LayerTypeType)) (= (type |mapa#0@@21|) (MapType BoxType BoxType))) (= (type |mapb#0@@21|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 |mapa#0@@21| |mapb#0@@21|) (and ($Is |mapa#0@@21| (TMap Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3)) ($Is |mapb#0@@21| (TMap Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3))))) (and (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 |mapa#0@@21| |mapb#0@@21|) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 ($LS $ly@@66) |mapa#0@@21| |mapb#0@@21|) (Maps.__default.MapUnionPreferA Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 StartFuel_Maps._default.MapUnionPreferA |mapa#0@@21| |mapb#0@@21|)))) :qid |unknown.0:0| :skolemid |2542| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 ($LS $ly@@66) |mapa#0@@21| |mapb#0@@21|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@4 T@U) (Maps._default.MapUnion$T@@4 T@U) ($ly@@67 T@U) (|mapa#0@@22| T@U) (|mapb#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@4) TyType) (= (type Maps._default.MapUnion$T@@4) TyType)) (= (type $ly@@67) LayerTypeType)) (= (type |mapa#0@@22|) (MapType BoxType BoxType))) (= (type |mapb#0@@22|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (and ($Is |mapa#0@@22| (TMap Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4)) ($Is |mapb#0@@22| (TMap Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4))))) (and (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 ($LS $ly@@67) (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (Maps.__default.MapUnionPreferA Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 StartFuel_Maps._default.MapUnionPreferA (Lit |mapa#0@@22|) (Lit |mapb#0@@22|))))) :qid |unknown.0:0| :weight 3 :skolemid |2543| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 ($LS $ly@@67) (Lit |mapa#0@@22|) (Lit |mapb#0@@22|))) ))))
(assert (forall ((arg0@@502 T@U) (arg1@@210 T@U) (arg2@@132 T@U) (arg3@@92 T@U) (arg4@@71 T@U) ) (! (= (type (Maps.__default.IMapUnionPreferA arg0@@502 arg1@@210 arg2@@132 arg3@@92 arg4@@71)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnionPreferA| :pattern ( (Maps.__default.IMapUnionPreferA arg0@@502 arg1@@210 arg2@@132 arg3@@92 arg4@@71)) )))
(assert (forall ((Maps._default.IMapUnionPreferA$U T@U) (Maps._default.IMapUnionPreferA$T T@U) ($ly@@68 T@U) (|mapa#0@@23| T@U) (|mapb#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U) TyType) (= (type Maps._default.IMapUnionPreferA$T) TyType)) (= (type $ly@@68) LayerTypeType)) (= (type |mapa#0@@23|) (IMapType BoxType BoxType))) (= (type |mapb#0@@23|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T ($LS $ly@@68) |mapa#0@@23| |mapb#0@@23|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T $ly@@68 |mapa#0@@23| |mapb#0@@23|))) :qid |unknown.0:0| :skolemid |2544| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T ($LS $ly@@68) |mapa#0@@23| |mapb#0@@23|)) )))
(assert (forall ((Maps._default.IMapUnionPreferA$U@@0 T@U) (Maps._default.IMapUnionPreferA$T@@0 T@U) ($ly@@69 T@U) (|mapa#0@@24| T@U) (|mapb#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@0) TyType) (= (type Maps._default.IMapUnionPreferA$T@@0) TyType)) (= (type $ly@@69) LayerTypeType)) (= (type |mapa#0@@24|) (IMapType BoxType BoxType))) (= (type |mapb#0@@24|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 $ly@@69 |mapa#0@@24| |mapb#0@@24|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 $LZ |mapa#0@@24| |mapb#0@@24|))) :qid |unknown.0:0| :skolemid |2545| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 (AsFuelBottom $ly@@69) |mapa#0@@24| |mapb#0@@24|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@1 T@U) (Maps._default.IMapUnionPreferA$T@@1 T@U) ($ly@@70 T@U) (|mapa#0@@25| T@U) (|mapb#0@@25| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@1) TyType) (= (type Maps._default.IMapUnionPreferA$T@@1) TyType)) (= (type $ly@@70) LayerTypeType)) (= (type |mapa#0@@25|) (IMapType BoxType BoxType))) (= (type |mapb#0@@25|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 |mapa#0@@25| |mapb#0@@25|) (and ($Is |mapa#0@@25| (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1)) ($Is |mapb#0@@25| (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@70 |mapa#0@@25| |mapb#0@@25|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@25|) (|IMap#Domain| |mapb#0@@25|))) (forall ((|k#0@@54| T@U) ) (!  (=> (and (and (= (type |k#0@@54|) BoxType) ($IsBox |k#0@@54| Maps._default.IMapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#0@@54|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@70 |mapa#0@@25| |mapb#0@@25|)) |k#0@@54|) (MapType0Select (|IMap#Elements| |mapa#0@@25|) |k#0@@54|))) :qid |Mapsidfy.151:20| :skolemid |2546| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@25|) |k#0@@54|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@70 |mapa#0@@25| |mapb#0@@25|)) |k#0@@54|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#0@@54|)) ))) (forall ((|k#1@@5| T@U) ) (!  (=> (and (and (= (type |k#1@@5|) BoxType) ($IsBox |k#1@@5| Maps._default.IMapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapb#0@@25|) (|IMap#Domain| |mapa#0@@25|)) |k#1@@5|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@70 |mapa#0@@25| |mapb#0@@25|)) |k#1@@5|) (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#1@@5|))) :qid |Mapsidfy.152:20| :skolemid |2547| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#1@@5|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@70 |mapa#0@@25| |mapb#0@@25|)) |k#1@@5|)) :pattern ( (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapb#0@@25|) (|IMap#Domain| |mapa#0@@25|)) |k#1@@5|)) ))) (forall ((|k#2@@2| T@U) ) (!  (=> (and (and (= (type |k#2@@2|) BoxType) ($IsBox |k#2@@2| Maps._default.IMapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@25|) |k#2@@2|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#2@@2|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@70 |mapa#0@@25| |mapb#0@@25|)) |k#2@@2|) (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#2@@2|))) :qid |Mapsidfy.153:20| :skolemid |2548| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#2@@2|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@70 |mapa#0@@25| |mapb#0@@25|)) |k#2@@2|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#2@@2|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@25|) |k#2@@2|)) ))) ($Is (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@70 |mapa#0@@25| |mapb#0@@25|) (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1)))) :qid |unknown.0:0| :skolemid |2549| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@70 |mapa#0@@25| |mapb#0@@25|)) ))))
(assert (forall ((Maps._default.IMapUnionPreferA$U@@2 T@U) (Maps._default.IMapUnionPreferA$T@@2 T@U) ($ly@@71 T@U) (|mapa#0@@26| T@U) (|mapb#0@@26| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@2) TyType) (= (type Maps._default.IMapUnionPreferA$T@@2) TyType)) (= (type $ly@@71) LayerTypeType)) (= (type |mapa#0@@26|) (IMapType BoxType BoxType))) (= (type |mapb#0@@26|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@26| (TIMap Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2)) ($Is |mapb#0@@26| (TIMap Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2)))) (= (|Maps.__default.IMapUnionPreferA#requires| Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2 $ly@@71 |mapa#0@@26| |mapb#0@@26|) true)) :qid |unknown.0:0| :skolemid |2550| :pattern ( (|Maps.__default.IMapUnionPreferA#requires| Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2 $ly@@71 |mapa#0@@26| |mapb#0@@26|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@3 T@U) (Maps._default.IMapUnionPreferA$T@@3 T@U) ($ly@@72 T@U) (|mapa#0@@27| T@U) (|mapb#0@@27| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@3) TyType) (= (type Maps._default.IMapUnionPreferA$T@@3) TyType)) (= (type $ly@@72) LayerTypeType)) (= (type |mapa#0@@27|) (IMapType BoxType BoxType))) (= (type |mapb#0@@27|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 |mapa#0@@27| |mapb#0@@27|) (and ($Is |mapa#0@@27| (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3)) ($Is |mapb#0@@27| (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3))))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 ($LS $ly@@72) |mapa#0@@27| |mapb#0@@27|) (|IMap#Glue| (|lambda#2| Maps._default.IMapUnionPreferA$U@@3 (|ISet#Union| (|IMap#Domain| |mapa#0@@27|) (|IMap#Domain| |mapb#0@@27|))) (|lambda#63| (|IMap#Domain| |mapa#0@@27|) (|IMap#Elements| |mapa#0@@27|) (|IMap#Elements| |mapb#0@@27|)) (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3)))) :qid |unknown.0:0| :skolemid |2551| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 ($LS $ly@@72) |mapa#0@@27| |mapb#0@@27|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@4 T@U) (Maps._default.IMapUnionPreferA$T@@4 T@U) ($ly@@73 T@U) (|mapa#0@@28| T@U) (|mapb#0@@28| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@4) TyType) (= (type Maps._default.IMapUnionPreferA$T@@4) TyType)) (= (type $ly@@73) LayerTypeType)) (= (type |mapa#0@@28|) (IMapType BoxType BoxType))) (= (type |mapb#0@@28|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 (Lit |mapa#0@@28|) (Lit |mapb#0@@28|)) (and ($Is |mapa#0@@28| (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4)) ($Is |mapb#0@@28| (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4))))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 ($LS $ly@@73) (Lit |mapa#0@@28|) (Lit |mapb#0@@28|)) (|IMap#Glue| (|lambda#2| Maps._default.IMapUnionPreferA$U@@4 (|ISet#Union| (|IMap#Domain| (Lit |mapa#0@@28|)) (|IMap#Domain| (Lit |mapb#0@@28|)))) (|lambda#63| (|IMap#Domain| |mapa#0@@28|) (|IMap#Elements| (Lit |mapa#0@@28|)) (|IMap#Elements| (Lit |mapb#0@@28|))) (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2552| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 ($LS $ly@@73) (Lit |mapa#0@@28|) (Lit |mapb#0@@28|))) ))))
(assert (forall ((arg0@@503 T@U) (arg1@@211 T@U) (arg2@@133 T@U) (arg3@@93 T@U) (arg4@@72 T@U) ) (! (= (type (Maps.__default.IMapUnionPreferB arg0@@503 arg1@@211 arg2@@133 arg3@@93 arg4@@72)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnionPreferB| :pattern ( (Maps.__default.IMapUnionPreferB arg0@@503 arg1@@211 arg2@@133 arg3@@93 arg4@@72)) )))
(assert (forall ((Maps._default.IMapUnionPreferB$U T@U) (Maps._default.IMapUnionPreferB$T T@U) ($ly@@74 T@U) (|mapa#0@@29| T@U) (|mapb#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U) TyType) (= (type Maps._default.IMapUnionPreferB$T) TyType)) (= (type $ly@@74) LayerTypeType)) (= (type |mapa#0@@29|) (IMapType BoxType BoxType))) (= (type |mapb#0@@29|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T ($LS $ly@@74) |mapa#0@@29| |mapb#0@@29|) (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T $ly@@74 |mapa#0@@29| |mapb#0@@29|))) :qid |unknown.0:0| :skolemid |2553| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T ($LS $ly@@74) |mapa#0@@29| |mapb#0@@29|)) )))
(assert (forall ((Maps._default.IMapUnionPreferB$U@@0 T@U) (Maps._default.IMapUnionPreferB$T@@0 T@U) ($ly@@75 T@U) (|mapa#0@@30| T@U) (|mapb#0@@30| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@0) TyType) (= (type Maps._default.IMapUnionPreferB$T@@0) TyType)) (= (type $ly@@75) LayerTypeType)) (= (type |mapa#0@@30|) (IMapType BoxType BoxType))) (= (type |mapb#0@@30|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 $ly@@75 |mapa#0@@30| |mapb#0@@30|) (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 $LZ |mapa#0@@30| |mapb#0@@30|))) :qid |unknown.0:0| :skolemid |2554| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 (AsFuelBottom $ly@@75) |mapa#0@@30| |mapb#0@@30|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@1 T@U) (Maps._default.IMapUnionPreferB$T@@1 T@U) ($ly@@76 T@U) (|mapa#0@@31| T@U) (|mapb#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@1) TyType) (= (type Maps._default.IMapUnionPreferB$T@@1) TyType)) (= (type $ly@@76) LayerTypeType)) (= (type |mapa#0@@31|) (IMapType BoxType BoxType))) (= (type |mapb#0@@31|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 |mapa#0@@31| |mapb#0@@31|) (and ($Is |mapa#0@@31| (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1)) ($Is |mapb#0@@31| (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@76 |mapa#0@@31| |mapb#0@@31|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@31|) (|IMap#Domain| |mapb#0@@31|))) (forall ((|k#0@@55| T@U) ) (!  (=> (and (and (= (type |k#0@@55|) BoxType) ($IsBox |k#0@@55| Maps._default.IMapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#0@@55|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@76 |mapa#0@@31| |mapb#0@@31|)) |k#0@@55|) (MapType0Select (|IMap#Elements| |mapb#0@@31|) |k#0@@55|))) :qid |Mapsidfy.160:20| :skolemid |2555| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@31|) |k#0@@55|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@76 |mapa#0@@31| |mapb#0@@31|)) |k#0@@55|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#0@@55|)) ))) (forall ((|k#1@@6| T@U) ) (!  (=> (and (and (= (type |k#1@@6|) BoxType) ($IsBox |k#1@@6| Maps._default.IMapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapa#0@@31|) (|IMap#Domain| |mapb#0@@31|)) |k#1@@6|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@76 |mapa#0@@31| |mapb#0@@31|)) |k#1@@6|) (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#1@@6|))) :qid |Mapsidfy.161:20| :skolemid |2556| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#1@@6|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@76 |mapa#0@@31| |mapb#0@@31|)) |k#1@@6|)) :pattern ( (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapa#0@@31|) (|IMap#Domain| |mapb#0@@31|)) |k#1@@6|)) ))) (forall ((|k#2@@3| T@U) ) (!  (=> (and (and (= (type |k#2@@3|) BoxType) ($IsBox |k#2@@3| Maps._default.IMapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@31|) |k#2@@3|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#2@@3|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@76 |mapa#0@@31| |mapb#0@@31|)) |k#2@@3|) (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#2@@3|))) :qid |Mapsidfy.162:20| :skolemid |2557| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#2@@3|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@76 |mapa#0@@31| |mapb#0@@31|)) |k#2@@3|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#2@@3|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@31|) |k#2@@3|)) ))) ($Is (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@76 |mapa#0@@31| |mapb#0@@31|) (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1)))) :qid |unknown.0:0| :skolemid |2558| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@76 |mapa#0@@31| |mapb#0@@31|)) ))))
(assert (forall ((Maps._default.IMapUnionPreferB$U@@2 T@U) (Maps._default.IMapUnionPreferB$T@@2 T@U) ($ly@@77 T@U) (|mapa#0@@32| T@U) (|mapb#0@@32| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@2) TyType) (= (type Maps._default.IMapUnionPreferB$T@@2) TyType)) (= (type $ly@@77) LayerTypeType)) (= (type |mapa#0@@32|) (IMapType BoxType BoxType))) (= (type |mapb#0@@32|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@32| (TIMap Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2)) ($Is |mapb#0@@32| (TIMap Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2)))) (= (|Maps.__default.IMapUnionPreferB#requires| Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2 $ly@@77 |mapa#0@@32| |mapb#0@@32|) true)) :qid |unknown.0:0| :skolemid |2559| :pattern ( (|Maps.__default.IMapUnionPreferB#requires| Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2 $ly@@77 |mapa#0@@32| |mapb#0@@32|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@3 T@U) (Maps._default.IMapUnionPreferB$T@@3 T@U) ($ly@@78 T@U) (|mapa#0@@33| T@U) (|mapb#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@3) TyType) (= (type Maps._default.IMapUnionPreferB$T@@3) TyType)) (= (type $ly@@78) LayerTypeType)) (= (type |mapa#0@@33|) (IMapType BoxType BoxType))) (= (type |mapb#0@@33|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 |mapa#0@@33| |mapb#0@@33|) (and ($Is |mapa#0@@33| (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3)) ($Is |mapb#0@@33| (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3))))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 ($LS $ly@@78) |mapa#0@@33| |mapb#0@@33|) (|IMap#Glue| (|lambda#2| Maps._default.IMapUnionPreferB$U@@3 (|ISet#Union| (|IMap#Domain| |mapa#0@@33|) (|IMap#Domain| |mapb#0@@33|))) (|lambda#63| (|IMap#Domain| |mapb#0@@33|) (|IMap#Elements| |mapb#0@@33|) (|IMap#Elements| |mapa#0@@33|)) (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3)))) :qid |unknown.0:0| :skolemid |2560| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 ($LS $ly@@78) |mapa#0@@33| |mapb#0@@33|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@4 T@U) (Maps._default.IMapUnionPreferB$T@@4 T@U) ($ly@@79 T@U) (|mapa#0@@34| T@U) (|mapb#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@4) TyType) (= (type Maps._default.IMapUnionPreferB$T@@4) TyType)) (= (type $ly@@79) LayerTypeType)) (= (type |mapa#0@@34|) (IMapType BoxType BoxType))) (= (type |mapb#0@@34|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 (Lit |mapa#0@@34|) (Lit |mapb#0@@34|)) (and ($Is |mapa#0@@34| (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4)) ($Is |mapb#0@@34| (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4))))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 ($LS $ly@@79) (Lit |mapa#0@@34|) (Lit |mapb#0@@34|)) (|IMap#Glue| (|lambda#2| Maps._default.IMapUnionPreferB$U@@4 (|ISet#Union| (|IMap#Domain| (Lit |mapa#0@@34|)) (|IMap#Domain| (Lit |mapb#0@@34|)))) (|lambda#63| (|IMap#Domain| |mapb#0@@34|) (|IMap#Elements| (Lit |mapb#0@@34|)) (|IMap#Elements| (Lit |mapa#0@@34|))) (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2561| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 ($LS $ly@@79) (Lit |mapa#0@@34|) (Lit |mapb#0@@34|))) ))))
(assert (forall ((arg0@@504 T@U) (arg1@@212 T@U) (arg2@@134 T@U) (arg3@@94 T@U) (arg4@@73 T@U) ) (! (= (type (Maps.__default.IMapUnion arg0@@504 arg1@@212 arg2@@134 arg3@@94 arg4@@73)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnion| :pattern ( (Maps.__default.IMapUnion arg0@@504 arg1@@212 arg2@@134 arg3@@94 arg4@@73)) )))
(assert (forall ((Maps._default.IMapUnion$U T@U) (Maps._default.IMapUnion$T T@U) ($ly@@80 T@U) (|mapa#0@@35| T@U) (|mapb#0@@35| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnion$U) TyType) (= (type Maps._default.IMapUnion$T) TyType)) (= (type $ly@@80) LayerTypeType)) (= (type |mapa#0@@35|) (IMapType BoxType BoxType))) (= (type |mapb#0@@35|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T ($LS $ly@@80) |mapa#0@@35| |mapb#0@@35|) (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T $ly@@80 |mapa#0@@35| |mapb#0@@35|))) :qid |unknown.0:0| :skolemid |2562| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T ($LS $ly@@80) |mapa#0@@35| |mapb#0@@35|)) )))
(assert (forall ((Maps._default.IMapUnion$U@@0 T@U) (Maps._default.IMapUnion$T@@0 T@U) ($ly@@81 T@U) (|mapa#0@@36| T@U) (|mapb#0@@36| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnion$U@@0) TyType) (= (type Maps._default.IMapUnion$T@@0) TyType)) (= (type $ly@@81) LayerTypeType)) (= (type |mapa#0@@36|) (IMapType BoxType BoxType))) (= (type |mapb#0@@36|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 $ly@@81 |mapa#0@@36| |mapb#0@@36|) (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 $LZ |mapa#0@@36| |mapb#0@@36|))) :qid |unknown.0:0| :skolemid |2563| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 (AsFuelBottom $ly@@81) |mapa#0@@36| |mapb#0@@36|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@1 T@U) (Maps._default.IMapUnion$T@@1 T@U) ($ly@@82 T@U) (|mapa#0@@37| T@U) (|mapb#0@@37| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@1) TyType) (= (type Maps._default.IMapUnion$T@@1) TyType)) (= (type $ly@@82) LayerTypeType)) (= (type |mapa#0@@37|) (IMapType BoxType BoxType))) (= (type |mapb#0@@37|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 |mapa#0@@37| |mapb#0@@37|) (and ($Is |mapa#0@@37| (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1)) ($Is |mapb#0@@37| (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@82 |mapa#0@@37| |mapb#0@@37|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|))) (forall ((|k#0@@56| T@U) ) (!  (=> (and (and (= (type |k#0@@56|) BoxType) ($IsBox |k#0@@56| Maps._default.IMapUnion$U@@1)) (U_2_bool (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|)) |k#0@@56|))) (= (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#0@@56|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@82 |mapa#0@@37| |mapb#0@@37|)) |k#0@@56|))) :qid |Mapsidfy.171:18| :skolemid |2564| :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@82 |mapa#0@@37| |mapb#0@@37|)) |k#0@@56|)) :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#0@@56|)) :pattern ( (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|)) |k#0@@56|)) ))) (forall ((|k#1@@7| T@U) ) (!  (=> (and (and (= (type |k#1@@7|) BoxType) ($IsBox |k#1@@7| Maps._default.IMapUnion$U@@1)) (U_2_bool (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapb#0@@37|) (|IMap#Domain| |mapa#0@@37|)) |k#1@@7|))) (= (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#1@@7|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@82 |mapa#0@@37| |mapb#0@@37|)) |k#1@@7|))) :qid |Mapsidfy.172:18| :skolemid |2565| :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@82 |mapa#0@@37| |mapb#0@@37|)) |k#1@@7|)) :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#1@@7|)) :pattern ( (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapb#0@@37|) (|IMap#Domain| |mapa#0@@37|)) |k#1@@7|)) ))) (forall ((|k#2@@4| T@U) ) (!  (=> (and (and (= (type |k#2@@4|) BoxType) ($IsBox |k#2@@4| Maps._default.IMapUnion$U@@1)) (U_2_bool (MapType0Select (|ISet#Intersection| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|)) |k#2@@4|))) (or (= (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#2@@4|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@82 |mapa#0@@37| |mapb#0@@37|)) |k#2@@4|)) (= (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#2@@4|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@82 |mapa#0@@37| |mapb#0@@37|)) |k#2@@4|)))) :qid |Mapsidfy.173:18| :skolemid |2566| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#2@@4|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@82 |mapa#0@@37| |mapb#0@@37|)) |k#2@@4|)) :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#2@@4|)) :pattern ( (MapType0Select (|ISet#Intersection| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|)) |k#2@@4|)) ))) ($Is (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@82 |mapa#0@@37| |mapb#0@@37|) (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1)))) :qid |unknown.0:0| :skolemid |2567| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@82 |mapa#0@@37| |mapb#0@@37|)) ))))
(assert (forall ((Maps._default.IMapUnion$U@@2 T@U) (Maps._default.IMapUnion$T@@2 T@U) ($ly@@83 T@U) (|mapa#0@@38| T@U) (|mapb#0@@38| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@2) TyType) (= (type Maps._default.IMapUnion$T@@2) TyType)) (= (type $ly@@83) LayerTypeType)) (= (type |mapa#0@@38|) (IMapType BoxType BoxType))) (= (type |mapb#0@@38|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@38| (TIMap Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2)) ($Is |mapb#0@@38| (TIMap Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2)))) (= (|Maps.__default.IMapUnion#requires| Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2 $ly@@83 |mapa#0@@38| |mapb#0@@38|) true)) :qid |unknown.0:0| :skolemid |2568| :pattern ( (|Maps.__default.IMapUnion#requires| Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2 $ly@@83 |mapa#0@@38| |mapb#0@@38|)) )))
(assert (= (type StartFuel_Maps._default.IMapUnionPreferA) LayerTypeType))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@3 T@U) (Maps._default.IMapUnion$T@@3 T@U) ($ly@@84 T@U) (|mapa#0@@39| T@U) (|mapb#0@@39| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@3) TyType) (= (type Maps._default.IMapUnion$T@@3) TyType)) (= (type $ly@@84) LayerTypeType)) (= (type |mapa#0@@39|) (IMapType BoxType BoxType))) (= (type |mapb#0@@39|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 |mapa#0@@39| |mapb#0@@39|) (and ($Is |mapa#0@@39| (TIMap Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3)) ($Is |mapb#0@@39| (TIMap Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3))))) (and (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 |mapa#0@@39| |mapb#0@@39|) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 ($LS $ly@@84) |mapa#0@@39| |mapb#0@@39|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 StartFuel_Maps._default.IMapUnionPreferA |mapa#0@@39| |mapb#0@@39|)))) :qid |unknown.0:0| :skolemid |2569| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 ($LS $ly@@84) |mapa#0@@39| |mapb#0@@39|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@4 T@U) (Maps._default.IMapUnion$T@@4 T@U) ($ly@@85 T@U) (|mapa#0@@40| T@U) (|mapb#0@@40| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@4) TyType) (= (type Maps._default.IMapUnion$T@@4) TyType)) (= (type $ly@@85) LayerTypeType)) (= (type |mapa#0@@40|) (IMapType BoxType BoxType))) (= (type |mapb#0@@40|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (and ($Is |mapa#0@@40| (TIMap Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4)) ($Is |mapb#0@@40| (TIMap Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4))))) (and (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 ($LS $ly@@85) (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 StartFuel_Maps._default.IMapUnionPreferA (Lit |mapa#0@@40|) (Lit |mapb#0@@40|))))) :qid |unknown.0:0| :weight 3 :skolemid |2570| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 ($LS $ly@@85) (Lit |mapa#0@@40|) (Lit |mapb#0@@40|))) ))))
(assert (forall ((arg0@@505 T@U) (arg1@@213 T@U) (arg2@@135 T@U) (arg3@@95 T@U) (arg4@@74 T@U) (arg5@@46 T@U) ) (! (= (type (Maps.__default.MapDisjointUnion3 arg0@@505 arg1@@213 arg2@@135 arg3@@95 arg4@@74 arg5@@46)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapDisjointUnion3| :pattern ( (Maps.__default.MapDisjointUnion3 arg0@@505 arg1@@213 arg2@@135 arg3@@95 arg4@@74 arg5@@46)) )))
(assert (forall ((Maps._default.MapDisjointUnion3$U T@U) (Maps._default.MapDisjointUnion3$T T@U) ($ly@@86 T@U) (|mapa#0@@41| T@U) (|mapb#0@@41| T@U) (|mapc#0| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U) TyType) (= (type Maps._default.MapDisjointUnion3$T) TyType)) (= (type $ly@@86) LayerTypeType)) (= (type |mapa#0@@41|) (MapType BoxType BoxType))) (= (type |mapb#0@@41|) (MapType BoxType BoxType))) (= (type |mapc#0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T ($LS $ly@@86) |mapa#0@@41| |mapb#0@@41| |mapc#0|) (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T $ly@@86 |mapa#0@@41| |mapb#0@@41| |mapc#0|))) :qid |unknown.0:0| :skolemid |2571| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T ($LS $ly@@86) |mapa#0@@41| |mapb#0@@41| |mapc#0|)) )))
(assert (forall ((Maps._default.MapDisjointUnion3$U@@0 T@U) (Maps._default.MapDisjointUnion3$T@@0 T@U) ($ly@@87 T@U) (|mapa#0@@42| T@U) (|mapb#0@@42| T@U) (|mapc#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@0) TyType) (= (type Maps._default.MapDisjointUnion3$T@@0) TyType)) (= (type $ly@@87) LayerTypeType)) (= (type |mapa#0@@42|) (MapType BoxType BoxType))) (= (type |mapb#0@@42|) (MapType BoxType BoxType))) (= (type |mapc#0@@0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 $ly@@87 |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|) (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 $LZ |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|))) :qid |unknown.0:0| :skolemid |2572| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 (AsFuelBottom $ly@@87) |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|)) )))
(assert (= (type StartFuel_Maps._default.MapDisjointUnion) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@1 T@U) (Maps._default.MapDisjointUnion3$T@@1 T@U) ($ly@@88 T@U) (|mapa#0@@43| T@U) (|mapb#0@@43| T@U) (|mapc#0@@1| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@1) TyType) (= (type Maps._default.MapDisjointUnion3$T@@1) TyType)) (= (type $ly@@88) LayerTypeType)) (= (type |mapa#0@@43|) (MapType BoxType BoxType))) (= (type |mapb#0@@43|) (MapType BoxType BoxType))) (= (type |mapc#0@@1|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (and (and (and ($Is |mapa#0@@43| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1)) ($Is |mapb#0@@43| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1))) ($Is |mapc#0@@1| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1))) (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Map#Domain| |mapc#0@@1|)))))) (and (and (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@88 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) (|Set#Union| (|Set#Union| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Map#Domain| |mapc#0@@1|))) (=> (or (or (not (|Set#Equal| (|Map#Domain| |mapa#0@@43|) (|Set#Empty| BoxType))) (not (|Set#Equal| (|Map#Domain| |mapb#0@@43|) (|Set#Empty| BoxType)))) (not (|Set#Equal| (|Map#Domain| |mapc#0@@1|) (|Set#Empty| BoxType)))) (not (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@88 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) (|Set#Empty| BoxType))))) (forall ((|k#0@@57| T@U) ) (!  (=> (and (and (= (type |k#0@@57|) BoxType) ($IsBox |k#0@@57| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@43|) |k#0@@57|))) (= (MapType0Select (|Map#Elements| |mapa#0@@43|) |k#0@@57|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@88 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#0@@57|))) :qid |Mapsidfy.183:18| :skolemid |2573| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@88 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#0@@57|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@43|) |k#0@@57|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@43|) |k#0@@57|)) ))) (forall ((|k#1@@8| T@U) ) (!  (=> (and (and (= (type |k#1@@8|) BoxType) ($IsBox |k#1@@8| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@43|) |k#1@@8|))) (= (MapType0Select (|Map#Elements| |mapb#0@@43|) |k#1@@8|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@88 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#1@@8|))) :qid |Mapsidfy.184:18| :skolemid |2574| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@88 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#1@@8|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@43|) |k#1@@8|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@43|) |k#1@@8|)) ))) (forall ((|k#2@@5| T@U) ) (!  (=> (and (and (= (type |k#2@@5|) BoxType) ($IsBox |k#2@@5| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapc#0@@1|) |k#2@@5|))) (= (MapType0Select (|Map#Elements| |mapc#0@@1|) |k#2@@5|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@88 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#2@@5|))) :qid |Mapsidfy.185:18| :skolemid |2575| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@88 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#2@@5|)) :pattern ( (MapType0Select (|Map#Elements| |mapc#0@@1|) |k#2@@5|)) :pattern ( (MapType0Select (|Map#Domain| |mapc#0@@1|) |k#2@@5|)) ))) (and (|Map#Equal| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@88 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapb#0@@43| |mapc#0@@1|))) (|Map#Equal| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapb#0@@43| |mapc#0@@1|)) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| |mapb#0@@43|) |mapc#0@@1|)))) ($Is (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@88 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1)))) :qid |unknown.0:0| :skolemid |2576| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@88 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) ))))
(assert (forall ((Maps._default.MapDisjointUnion3$U@@2 T@U) (Maps._default.MapDisjointUnion3$T@@2 T@U) ($ly@@89 T@U) (|mapa#0@@44| T@U) (|mapb#0@@44| T@U) (|mapc#0@@2| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@2) TyType) (= (type Maps._default.MapDisjointUnion3$T@@2) TyType)) (= (type $ly@@89) LayerTypeType)) (= (type |mapa#0@@44|) (MapType BoxType BoxType))) (= (type |mapb#0@@44|) (MapType BoxType BoxType))) (= (type |mapc#0@@2|) (MapType BoxType BoxType))) (and (and ($Is |mapa#0@@44| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2)) ($Is |mapb#0@@44| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2))) ($Is |mapc#0@@2| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2)))) (= (|Maps.__default.MapDisjointUnion3#requires| Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2 $ly@@89 |mapa#0@@44| |mapb#0@@44| |mapc#0@@2|)  (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Map#Domain| |mapc#0@@2|))))) :qid |unknown.0:0| :skolemid |2577| :pattern ( (|Maps.__default.MapDisjointUnion3#requires| Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2 $ly@@89 |mapa#0@@44| |mapb#0@@44| |mapc#0@@2|)) )))
(assert (forall ((arg0@@506 T@U) (arg1@@214 T@U) (arg2@@136 T@U) (arg3@@96 T@U) (arg4@@75 T@U) ) (! (= (type (|lambda#83| arg0@@506 arg1@@214 arg2@@136 arg3@@96 arg4@@75)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#83| :pattern ( (|lambda#83| arg0@@506 arg1@@214 arg2@@136 arg3@@96 arg4@@75)) )))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@3 T@U) (Maps._default.MapDisjointUnion3$T@@3 T@U) ($ly@@90 T@U) (|mapa#0@@45| T@U) (|mapb#0@@45| T@U) (|mapc#0@@3| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@3) TyType) (= (type Maps._default.MapDisjointUnion3$T@@3) TyType)) (= (type $ly@@90) LayerTypeType)) (= (type |mapa#0@@45|) (MapType BoxType BoxType))) (= (type |mapb#0@@45|) (MapType BoxType BoxType))) (= (type |mapc#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|) (and (and (and ($Is |mapa#0@@45| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3)) ($Is |mapb#0@@45| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3))) ($Is |mapc#0@@3| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3))) (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|)) (|Map#Domain| |mapc#0@@3|)))))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 ($LS $ly@@90) |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|) (|Map#Glue| (|lambda#2| Maps._default.MapDisjointUnion3$U@@3 (|Set#Union| (|Set#Union| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|)) (|Map#Domain| |mapc#0@@3|))) (|lambda#83| (|Map#Domain| |mapa#0@@45|) (|Map#Elements| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|) (|Map#Elements| |mapb#0@@45|) (|Map#Elements| |mapc#0@@3|)) (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3)))) :qid |unknown.0:0| :skolemid |2578| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 ($LS $ly@@90) |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@4 T@U) (Maps._default.MapDisjointUnion3$T@@4 T@U) ($ly@@91 T@U) (|mapa#0@@46| T@U) (|mapb#0@@46| T@U) (|mapc#0@@4| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@4) TyType) (= (type Maps._default.MapDisjointUnion3$T@@4) TyType)) (= (type $ly@@91) LayerTypeType)) (= (type |mapa#0@@46|) (MapType BoxType BoxType))) (= (type |mapb#0@@46|) (MapType BoxType BoxType))) (= (type |mapc#0@@4|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|)) (and (and (and ($Is |mapa#0@@46| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4)) ($Is |mapb#0@@46| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4))) ($Is |mapc#0@@4| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4))) (and (and (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|))) (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|)))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|))) (|Map#Domain| (Lit |mapc#0@@4|))))))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 ($LS $ly@@91) (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|)) (|Map#Glue| (|lambda#2| Maps._default.MapDisjointUnion3$U@@4 (|Set#Union| (|Set#Union| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|))) (|Map#Domain| (Lit |mapc#0@@4|)))) (|lambda#83| (|Map#Domain| |mapa#0@@46|) (|Map#Elements| (Lit |mapa#0@@46|)) (|Map#Domain| |mapb#0@@46|) (|Map#Elements| (Lit |mapb#0@@46|)) (|Map#Elements| (Lit |mapc#0@@4|))) (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2579| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 ($LS $ly@@91) (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|))) ))))
(assert (forall ((arg0@@507 T@U) (arg1@@215 T@U) (arg2@@137 T@U) ) (! (= (type (Maps.__default.MapToImap arg0@@507 arg1@@215 arg2@@137)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.MapToImap| :pattern ( (Maps.__default.MapToImap arg0@@507 arg1@@215 arg2@@137)) )))
(assert  (=> true (forall ((Maps._default.MapToImap$K T@U) (Maps._default.MapToImap$V T@U) (|m#0@@73| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K) TyType) (= (type Maps._default.MapToImap$V) TyType)) (= (type |m#0@@73|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@73|) ($Is |m#0@@73| (TMap Maps._default.MapToImap$K Maps._default.MapToImap$V)))) ($Is (Maps.__default.MapToImap Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@73|) (TIMap Maps._default.MapToImap$K Maps._default.MapToImap$V))) :qid |unknown.0:0| :skolemid |2580| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@73|)) ))))
(assert (forall ((Maps._default.MapToImap$K@@0 T@U) (Maps._default.MapToImap$V@@0 T@U) (|m#0@@74| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@0) TyType) (= (type Maps._default.MapToImap$V@@0) TyType)) (= (type |m#0@@74|) (MapType BoxType BoxType))) ($Is |m#0@@74| (TMap Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0))) (= (|Maps.__default.MapToImap#requires| Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0 |m#0@@74|) true)) :qid |unknown.0:0| :skolemid |2581| :pattern ( (|Maps.__default.MapToImap#requires| Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0 |m#0@@74|)) )))
(assert  (=> true (forall ((Maps._default.MapToImap$K@@1 T@U) (Maps._default.MapToImap$V@@1 T@U) (|m#0@@75| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@1) TyType) (= (type Maps._default.MapToImap$V@@1) TyType)) (= (type |m#0@@75|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@75|) ($Is |m#0@@75| (TMap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1)))) (= (Maps.__default.MapToImap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@75|) (|IMap#Glue| (|lambda#2| Maps._default.MapToImap$K@@1 (|Map#Domain| |m#0@@75|)) (|lambda#31| (|Map#Elements| |m#0@@75|)) (TIMap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1)))) :qid |unknown.0:0| :skolemid |2582| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@75|)) ))))
(assert  (=> true (forall ((Maps._default.MapToImap$K@@2 T@U) (Maps._default.MapToImap$V@@2 T@U) (|m#0@@76| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@2) TyType) (= (type Maps._default.MapToImap$V@@2) TyType)) (= (type |m#0@@76|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@76|)) ($Is |m#0@@76| (TMap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2)))) (= (Maps.__default.MapToImap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@76|)) (|IMap#Glue| (|lambda#2| Maps._default.MapToImap$K@@2 (|Map#Domain| |m#0@@76|)) (|lambda#31| (|Map#Elements| (Lit |m#0@@76|))) (TIMap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |2583| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@76|))) ))))
(assert (forall ((arg0@@508 T@U) (arg1@@216 T@U) (arg2@@138 T@U) (arg3@@97 T@U) ) (! (= (type (Maps.__default.MapLookupOption arg0@@508 arg1@@216 arg2@@138 arg3@@97)) DatatypeTypeType) :qid |funType:Maps.__default.MapLookupOption| :pattern ( (Maps.__default.MapLookupOption arg0@@508 arg1@@216 arg2@@138 arg3@@97)) )))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K T@U) (Maps._default.MapLookupOption$V T@U) (|m#0@@77| T@U) (|key#0@@28| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K) TyType) (= (type Maps._default.MapLookupOption$V) TyType)) (= (type |m#0@@77|) (MapType BoxType BoxType))) (= (type |key#0@@28|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@77| |key#0@@28|) (and ($Is |m#0@@77| (TMap Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V)) ($IsBox |key#0@@28| Maps._default.MapLookupOption$K)))) ($Is (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@77| |key#0@@28|) (Tclass.Options.Option Maps._default.MapLookupOption$V))) :qid |unknown.0:0| :skolemid |2584| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@77| |key#0@@28|)) ))))
(assert (forall ((Maps._default.MapLookupOption$K@@0 T@U) (Maps._default.MapLookupOption$V@@0 T@U) (|m#0@@78| T@U) (|key#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@0) TyType) (= (type Maps._default.MapLookupOption$V@@0) TyType)) (= (type |m#0@@78|) (MapType BoxType BoxType))) (= (type |key#0@@29|) BoxType)) (and ($Is |m#0@@78| (TMap Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0)) ($IsBox |key#0@@29| Maps._default.MapLookupOption$K@@0))) (= (|Maps.__default.MapLookupOption#requires| Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0 |m#0@@78| |key#0@@29|) true)) :qid |unknown.0:0| :skolemid |2585| :pattern ( (|Maps.__default.MapLookupOption#requires| Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0 |m#0@@78| |key#0@@29|)) )))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@1 T@U) (Maps._default.MapLookupOption$V@@1 T@U) (|m#0@@79| T@U) (|key#0@@30| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@1) TyType) (= (type Maps._default.MapLookupOption$V@@1) TyType)) (= (type |m#0@@79|) (MapType BoxType BoxType))) (= (type |key#0@@30|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@79| |key#0@@30|) (and ($Is |m#0@@79| (TMap Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1)) ($IsBox |key#0@@30| Maps._default.MapLookupOption$K@@1)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@79| |key#0@@30|) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@79|) |key#0@@30|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| |m#0@@79|) |key#0@@30|)) |#Options.Option.None|))) :qid |unknown.0:0| :skolemid |2586| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@79| |key#0@@30|)) ))))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@2 T@U) (Maps._default.MapLookupOption$V@@2 T@U) (|m#0@@80| T@U) (|key#0@@31| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@2) TyType) (= (type Maps._default.MapLookupOption$V@@2) TyType)) (= (type |m#0@@80|) (MapType BoxType BoxType))) (= (type |key#0@@31|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@80|) |key#0@@31|) (and ($Is |m#0@@80| (TMap Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2)) ($IsBox |key#0@@31| Maps._default.MapLookupOption$K@@2)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@80|) |key#0@@31|) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@80|) |key#0@@31|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (Lit |m#0@@80|)) |key#0@@31|)) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |2587| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@80|) |key#0@@31|)) ))))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@3 T@U) (Maps._default.MapLookupOption$V@@3 T@U) (|m#0@@81| T@U) (|key#0@@32| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@3) TyType) (= (type Maps._default.MapLookupOption$V@@3) TyType)) (= (type |m#0@@81|) (MapType BoxType BoxType))) (= (type |key#0@@32|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@81|) (Lit |key#0@@32|)) (and ($Is |m#0@@81| (TMap Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3)) ($IsBox |key#0@@32| Maps._default.MapLookupOption$K@@3)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@81|) (Lit |key#0@@32|)) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@81|) |key#0@@32|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (Lit |m#0@@81|)) (Lit |key#0@@32|))) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |2588| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@81|) (Lit |key#0@@32|))) ))))
(assert (forall ((arg0@@509 T@U) (arg1@@217 T@U) (arg2@@139 T@U) (arg3@@98 T@U) ) (! (= (type (Maps.__default.ImapLookupOption arg0@@509 arg1@@217 arg2@@139 arg3@@98)) DatatypeTypeType) :qid |funType:Maps.__default.ImapLookupOption| :pattern ( (Maps.__default.ImapLookupOption arg0@@509 arg1@@217 arg2@@139 arg3@@98)) )))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K T@U) (Maps._default.ImapLookupOption$V T@U) (|m#0@@82| T@U) (|key#0@@33| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K) TyType) (= (type Maps._default.ImapLookupOption$V) TyType)) (= (type |m#0@@82|) (IMapType BoxType BoxType))) (= (type |key#0@@33|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@82| |key#0@@33|) (and ($Is |m#0@@82| (TIMap Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V)) ($IsBox |key#0@@33| Maps._default.ImapLookupOption$K)))) ($Is (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@82| |key#0@@33|) (Tclass.Options.Option Maps._default.ImapLookupOption$V))) :qid |unknown.0:0| :skolemid |2589| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@82| |key#0@@33|)) ))))
(assert (forall ((Maps._default.ImapLookupOption$K@@0 T@U) (Maps._default.ImapLookupOption$V@@0 T@U) (|m#0@@83| T@U) (|key#0@@34| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@0) TyType) (= (type Maps._default.ImapLookupOption$V@@0) TyType)) (= (type |m#0@@83|) (IMapType BoxType BoxType))) (= (type |key#0@@34|) BoxType)) (and ($Is |m#0@@83| (TIMap Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0)) ($IsBox |key#0@@34| Maps._default.ImapLookupOption$K@@0))) (= (|Maps.__default.ImapLookupOption#requires| Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0 |m#0@@83| |key#0@@34|) true)) :qid |unknown.0:0| :skolemid |2590| :pattern ( (|Maps.__default.ImapLookupOption#requires| Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0 |m#0@@83| |key#0@@34|)) )))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K@@1 T@U) (Maps._default.ImapLookupOption$V@@1 T@U) (|m#0@@84| T@U) (|key#0@@35| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@1) TyType) (= (type Maps._default.ImapLookupOption$V@@1) TyType)) (= (type |m#0@@84|) (IMapType BoxType BoxType))) (= (type |key#0@@35|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@84| |key#0@@35|) (and ($Is |m#0@@84| (TIMap Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1)) ($IsBox |key#0@@35| Maps._default.ImapLookupOption$K@@1)))) (= (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@84| |key#0@@35|) (ite (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@84|) |key#0@@35|)) (|#Options.Option.Some| (MapType0Select (|IMap#Elements| |m#0@@84|) |key#0@@35|)) |#Options.Option.None|))) :qid |unknown.0:0| :skolemid |2591| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@84| |key#0@@35|)) ))))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K@@2 T@U) (Maps._default.ImapLookupOption$V@@2 T@U) (|m#0@@85| T@U) (|key#0@@36| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@2) TyType) (= (type Maps._default.ImapLookupOption$V@@2) TyType)) (= (type |m#0@@85|) (IMapType BoxType BoxType))) (= (type |key#0@@36|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@85|) (Lit |key#0@@36|)) (and ($Is |m#0@@85| (TIMap Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2)) ($IsBox |key#0@@36| Maps._default.ImapLookupOption$K@@2)))) (= (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@85|) (Lit |key#0@@36|)) (ite (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@85|) |key#0@@36|)) (|#Options.Option.Some| (MapType0Select (|IMap#Elements| (Lit |m#0@@85|)) (Lit |key#0@@36|))) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |2592| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@85|) (Lit |key#0@@36|))) ))))
(assert (forall ((|a#0#0#0@@2| T@U) (|a#0#1#0@@0| T@U) ) (!  (=> (and (= (type |a#0#0#0@@2|) DatatypeTypeType) (= (type |a#0#1#0@@0|) (MapType BoxType BoxType))) (= (DatatypeCtorId (|#AsyncMapSpec.Variables.Variables| |a#0#0#0@@2| |a#0#1#0@@0|)) |##AsyncMapSpec.Variables.Variables|)) :qid |AsyncMapidfy.16:7| :skolemid |2593| :pattern ( (|#AsyncMapSpec.Variables.Variables| |a#0#0#0@@2| |a#0#1#0@@0|)) )))
(assert (forall ((d@@113 T@U) ) (!  (=> (= (type d@@113) DatatypeTypeType) (= (AsyncMapSpec.Variables.Variables_q d@@113) (= (DatatypeCtorId d@@113) |##AsyncMapSpec.Variables.Variables|))) :qid |unknown.0:0| :skolemid |2594| :pattern ( (AsyncMapSpec.Variables.Variables_q d@@113)) )))
(assert (forall ((d@@114 T@U) ) (!  (=> (and (= (type d@@114) DatatypeTypeType) (AsyncMapSpec.Variables.Variables_q d@@114)) (exists ((|a#1#0#0@@2| T@U) (|a#1#1#0@@0| T@U) ) (!  (and (and (= (type |a#1#0#0@@2|) DatatypeTypeType) (= (type |a#1#1#0@@0|) (MapType BoxType BoxType))) (= d@@114 (|#AsyncMapSpec.Variables.Variables| |a#1#0#0@@2| |a#1#1#0@@0|))) :qid |AsyncMapidfy.16:7| :skolemid |2595| :no-pattern (type |a#1#0#0@@2|) :no-pattern (type |a#1#1#0@@0|) :no-pattern (U_2_int |a#1#0#0@@2|) :no-pattern (U_2_bool |a#1#0#0@@2|) :no-pattern (U_2_int |a#1#1#0@@0|) :no-pattern (U_2_bool |a#1#1#0@@0|) ))) :qid |unknown.0:0| :skolemid |2596| :pattern ( (AsyncMapSpec.Variables.Variables_q d@@114)) )))
(assert (forall ((|a#2#0#0@@2| T@U) (|a#2#1#0@@0| T@U) ) (!  (=> (and (= (type |a#2#0#0@@2|) DatatypeTypeType) (= (type |a#2#1#0@@0|) (MapType BoxType BoxType))) (= ($Is (|#AsyncMapSpec.Variables.Variables| |a#2#0#0@@2| |a#2#1#0@@0|) Tclass.AsyncMapSpec.Variables)  (and ($Is |a#2#0#0@@2| Tclass.MapSpec.Variables) ($Is |a#2#1#0@@0| (TMap TInt Tclass.ValueType.Value))))) :qid |AsyncMapidfy.16:7| :skolemid |2597| :pattern ( ($Is (|#AsyncMapSpec.Variables.Variables| |a#2#0#0@@2| |a#2#1#0@@0|) Tclass.AsyncMapSpec.Variables)) )))
(assert (forall ((|a#3#0#0@@2| T@U) (|a#3#1#0@@0| T@U) ($h@@131 T@U) ) (!  (=> (and (and (and (= (type |a#3#0#0@@2|) DatatypeTypeType) (= (type |a#3#1#0@@0|) (MapType BoxType BoxType))) (= (type $h@@131) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@131)) (= ($IsAlloc (|#AsyncMapSpec.Variables.Variables| |a#3#0#0@@2| |a#3#1#0@@0|) Tclass.AsyncMapSpec.Variables $h@@131)  (and ($IsAlloc |a#3#0#0@@2| Tclass.MapSpec.Variables $h@@131) ($IsAlloc |a#3#1#0@@0| (TMap TInt Tclass.ValueType.Value) $h@@131)))) :qid |AsyncMapidfy.16:7| :skolemid |2598| :pattern ( ($IsAlloc (|#AsyncMapSpec.Variables.Variables| |a#3#0#0@@2| |a#3#1#0@@0|) Tclass.AsyncMapSpec.Variables $h@@131)) )))
(assert (forall ((arg0@@510 T@U) ) (! (= (type (AsyncMapSpec.Variables.dict arg0@@510)) DatatypeTypeType) :qid |funType:AsyncMapSpec.Variables.dict| :pattern ( (AsyncMapSpec.Variables.dict arg0@@510)) )))
(assert (forall ((d@@115 T@U) ($h@@132 T@U) ) (!  (=> (and (and (= (type d@@115) DatatypeTypeType) (= (type $h@@132) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@132) (and (AsyncMapSpec.Variables.Variables_q d@@115) ($IsAlloc d@@115 Tclass.AsyncMapSpec.Variables $h@@132)))) ($IsAlloc (AsyncMapSpec.Variables.dict d@@115) Tclass.MapSpec.Variables $h@@132)) :qid |unknown.0:0| :skolemid |2599| :pattern ( ($IsAlloc (AsyncMapSpec.Variables.dict d@@115) Tclass.MapSpec.Variables $h@@132)) )))
(assert (forall ((arg0@@511 T@U) ) (! (= (type (AsyncMapSpec.Variables.queries arg0@@511)) (MapType BoxType BoxType)) :qid |funType:AsyncMapSpec.Variables.queries| :pattern ( (AsyncMapSpec.Variables.queries arg0@@511)) )))
(assert (forall ((d@@116 T@U) ($h@@133 T@U) ) (!  (=> (and (and (= (type d@@116) DatatypeTypeType) (= (type $h@@133) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@133) (and (AsyncMapSpec.Variables.Variables_q d@@116) ($IsAlloc d@@116 Tclass.AsyncMapSpec.Variables $h@@133)))) ($IsAlloc (AsyncMapSpec.Variables.queries d@@116) (TMap TInt Tclass.ValueType.Value) $h@@133)) :qid |unknown.0:0| :skolemid |2600| :pattern ( ($IsAlloc (AsyncMapSpec.Variables.queries d@@116) (TMap TInt Tclass.ValueType.Value) $h@@133)) )))
(assert (forall ((|a#4#0#0@@2| T@U) (|a#4#1#0@@0| T@U) ) (!  (=> (and (= (type |a#4#0#0@@2|) DatatypeTypeType) (= (type |a#4#1#0@@0|) (MapType BoxType BoxType))) (= (|#AsyncMapSpec.Variables.Variables| (Lit |a#4#0#0@@2|) (Lit |a#4#1#0@@0|)) (Lit (|#AsyncMapSpec.Variables.Variables| |a#4#0#0@@2| |a#4#1#0@@0|)))) :qid |AsyncMapidfy.16:7| :skolemid |2601| :pattern ( (|#AsyncMapSpec.Variables.Variables| (Lit |a#4#0#0@@2|) (Lit |a#4#1#0@@0|))) )))
(assert (forall ((|a#5#0#0@@3| T@U) (|a#5#1#0@@0| T@U) ) (!  (=> (and (= (type |a#5#0#0@@3|) DatatypeTypeType) (= (type |a#5#1#0@@0|) (MapType BoxType BoxType))) (= (AsyncMapSpec.Variables.dict (|#AsyncMapSpec.Variables.Variables| |a#5#0#0@@3| |a#5#1#0@@0|)) |a#5#0#0@@3|)) :qid |AsyncMapidfy.16:7| :skolemid |2602| :pattern ( (|#AsyncMapSpec.Variables.Variables| |a#5#0#0@@3| |a#5#1#0@@0|)) )))
(assert (forall ((|a#6#0#0@@3| T@U) (|a#6#1#0@@0| T@U) ) (!  (=> (and (= (type |a#6#0#0@@3|) DatatypeTypeType) (= (type |a#6#1#0@@0|) (MapType BoxType BoxType))) (< (DtRank |a#6#0#0@@3|) (DtRank (|#AsyncMapSpec.Variables.Variables| |a#6#0#0@@3| |a#6#1#0@@0|)))) :qid |AsyncMapidfy.16:7| :skolemid |2603| :pattern ( (|#AsyncMapSpec.Variables.Variables| |a#6#0#0@@3| |a#6#1#0@@0|)) )))
(assert (forall ((|a#7#0#0@@3| T@U) (|a#7#1#0@@0| T@U) ) (!  (=> (and (= (type |a#7#0#0@@3|) DatatypeTypeType) (= (type |a#7#1#0@@0|) (MapType BoxType BoxType))) (= (AsyncMapSpec.Variables.queries (|#AsyncMapSpec.Variables.Variables| |a#7#0#0@@3| |a#7#1#0@@0|)) |a#7#1#0@@0|)) :qid |AsyncMapidfy.16:7| :skolemid |2604| :pattern ( (|#AsyncMapSpec.Variables.Variables| |a#7#0#0@@3| |a#7#1#0@@0|)) )))
(assert (forall ((|a#8#0#0@@3| T@U) (|a#8#1#0@@1| T@U) (d@@117 T@U) ) (!  (=> (and (and (and (= (type |a#8#0#0@@3|) DatatypeTypeType) (= (type |a#8#1#0@@1|) (MapType BoxType BoxType))) (= (type d@@117) DatatypeTypeType)) (U_2_bool (MapType0Select (|Map#Domain| |a#8#1#0@@1|) ($Box d@@117)))) (< (DtRank d@@117) (DtRank (|#AsyncMapSpec.Variables.Variables| |a#8#0#0@@3| |a#8#1#0@@1|)))) :qid |AsyncMapidfy.16:7| :skolemid |2605| :pattern ( (MapType0Select (|Map#Domain| |a#8#1#0@@1|) ($Box d@@117)) (|#AsyncMapSpec.Variables.Variables| |a#8#0#0@@3| |a#8#1#0@@1|)) )))
(assert (forall ((|a#9#0#0@@2| T@U) (|a#9#1#0@@0| T@U) (bx@@176 T@U) ) (!  (=> (and (and (and (= (type |a#9#0#0@@2|) DatatypeTypeType) (= (type |a#9#1#0@@0|) (MapType BoxType BoxType))) (= (type bx@@176) BoxType)) (U_2_bool (MapType0Select (|Map#Domain| |a#9#1#0@@0|) bx@@176))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |a#9#1#0@@0|) bx@@176))) (DtRank (|#AsyncMapSpec.Variables.Variables| |a#9#0#0@@2| |a#9#1#0@@0|)))) :qid |AsyncMapidfy.16:7| :skolemid |2606| :pattern ( (MapType0Select (|Map#Domain| |a#9#1#0@@0|) bx@@176) (|#AsyncMapSpec.Variables.Variables| |a#9#0#0@@2| |a#9#1#0@@0|)) )))
(assert (forall ((d@@118 T@U) ) (!  (=> (and (= (type d@@118) DatatypeTypeType) (|$IsA#AsyncMapSpec.Variables| d@@118)) (AsyncMapSpec.Variables.Variables_q d@@118)) :qid |unknown.0:0| :skolemid |2607| :pattern ( (|$IsA#AsyncMapSpec.Variables| d@@118)) )))
(assert (forall ((d@@119 T@U) ) (!  (=> (and (= (type d@@119) DatatypeTypeType) ($Is d@@119 Tclass.AsyncMapSpec.Variables)) (AsyncMapSpec.Variables.Variables_q d@@119)) :qid |unknown.0:0| :skolemid |2608| :pattern ( (AsyncMapSpec.Variables.Variables_q d@@119) ($Is d@@119 Tclass.AsyncMapSpec.Variables)) )))
(assert (forall ((a@@163 T@U) (b@@100 T@U) ) (!  (=> (and (and (= (type a@@163) DatatypeTypeType) (= (type b@@100) DatatypeTypeType)) true) (= (|AsyncMapSpec.Variables#Equal| a@@163 b@@100)  (and (|MapSpec.Variables#Equal| (AsyncMapSpec.Variables.dict a@@163) (AsyncMapSpec.Variables.dict b@@100)) (|Map#Equal| (AsyncMapSpec.Variables.queries a@@163) (AsyncMapSpec.Variables.queries b@@100))))) :qid |unknown.0:0| :skolemid |2609| :pattern ( (|AsyncMapSpec.Variables#Equal| a@@163 b@@100)) )))
(assert (forall ((a@@164 T@U) (b@@101 T@U) ) (!  (=> (and (= (type a@@164) DatatypeTypeType) (= (type b@@101) DatatypeTypeType)) (= (|AsyncMapSpec.Variables#Equal| a@@164 b@@101) (= a@@164 b@@101))) :qid |unknown.0:0| :skolemid |2610| :pattern ( (|AsyncMapSpec.Variables#Equal| a@@164 b@@101)) )))
(assert (forall ((arg0@@512 T@U) ) (! (= (type (|#AsyncMapSpec.Step.QueryBeginStep| arg0@@512)) DatatypeTypeType) :qid |funType:#AsyncMapSpec.Step.QueryBeginStep| :pattern ( (|#AsyncMapSpec.Step.QueryBeginStep| arg0@@512)) )))
(assert (forall ((|a#10#0#0@@2| T@U) ) (!  (=> (= (type |a#10#0#0@@2|) (SeqType BoxType)) (= (DatatypeCtorId (|#AsyncMapSpec.Step.QueryBeginStep| |a#10#0#0@@2|)) |##AsyncMapSpec.Step.QueryBeginStep|)) :qid |AsyncMapidfy.20:24| :skolemid |2611| :pattern ( (|#AsyncMapSpec.Step.QueryBeginStep| |a#10#0#0@@2|)) )))
(assert (forall ((d@@120 T@U) ) (!  (=> (= (type d@@120) DatatypeTypeType) (= (AsyncMapSpec.Step.QueryBeginStep_q d@@120) (= (DatatypeCtorId d@@120) |##AsyncMapSpec.Step.QueryBeginStep|))) :qid |unknown.0:0| :skolemid |2612| :pattern ( (AsyncMapSpec.Step.QueryBeginStep_q d@@120)) )))
(assert (forall ((d@@121 T@U) ) (!  (=> (and (= (type d@@121) DatatypeTypeType) (AsyncMapSpec.Step.QueryBeginStep_q d@@121)) (exists ((|a#11#0#0@@2| T@U) ) (!  (and (= (type |a#11#0#0@@2|) (SeqType BoxType)) (= d@@121 (|#AsyncMapSpec.Step.QueryBeginStep| |a#11#0#0@@2|))) :qid |AsyncMapidfy.20:24| :skolemid |2613| :no-pattern (type |a#11#0#0@@2|) :no-pattern (U_2_int |a#11#0#0@@2|) :no-pattern (U_2_bool |a#11#0#0@@2|) ))) :qid |unknown.0:0| :skolemid |2614| :pattern ( (AsyncMapSpec.Step.QueryBeginStep_q d@@121)) )))
(assert (forall ((|a#12#0#0@@0| T@U) ) (!  (=> (= (type |a#12#0#0@@0|) (SeqType BoxType)) (= ($Is (|#AsyncMapSpec.Step.QueryBeginStep| |a#12#0#0@@0|) Tclass.AsyncMapSpec.Step) ($Is |a#12#0#0@@0| Tclass.KeyType.Key))) :qid |AsyncMapidfy.20:24| :skolemid |2615| :pattern ( ($Is (|#AsyncMapSpec.Step.QueryBeginStep| |a#12#0#0@@0|) Tclass.AsyncMapSpec.Step)) )))
(assert (forall ((|a#13#0#0@@0| T@U) ($h@@134 T@U) ) (!  (=> (and (and (= (type |a#13#0#0@@0|) (SeqType BoxType)) (= (type $h@@134) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@134)) (= ($IsAlloc (|#AsyncMapSpec.Step.QueryBeginStep| |a#13#0#0@@0|) Tclass.AsyncMapSpec.Step $h@@134) ($IsAlloc |a#13#0#0@@0| Tclass.KeyType.Key $h@@134))) :qid |AsyncMapidfy.20:24| :skolemid |2616| :pattern ( ($IsAlloc (|#AsyncMapSpec.Step.QueryBeginStep| |a#13#0#0@@0|) Tclass.AsyncMapSpec.Step $h@@134)) )))
(assert (forall ((arg0@@513 T@U) ) (! (= (type (AsyncMapSpec.Step.key arg0@@513)) (SeqType BoxType)) :qid |funType:AsyncMapSpec.Step.key| :pattern ( (AsyncMapSpec.Step.key arg0@@513)) )))
(assert (forall ((d@@122 T@U) ($h@@135 T@U) ) (!  (=> (and (and (= (type d@@122) DatatypeTypeType) (= (type $h@@135) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@135) (and (AsyncMapSpec.Step.QueryBeginStep_q d@@122) ($IsAlloc d@@122 Tclass.AsyncMapSpec.Step $h@@135)))) ($IsAlloc (AsyncMapSpec.Step.key d@@122) Tclass.KeyType.Key $h@@135)) :qid |unknown.0:0| :skolemid |2617| :pattern ( ($IsAlloc (AsyncMapSpec.Step.key d@@122) Tclass.KeyType.Key $h@@135)) )))
(assert (forall ((|a#14#0#0@@1| T@U) ) (!  (=> (= (type |a#14#0#0@@1|) (SeqType BoxType)) (= (|#AsyncMapSpec.Step.QueryBeginStep| (Lit |a#14#0#0@@1|)) (Lit (|#AsyncMapSpec.Step.QueryBeginStep| |a#14#0#0@@1|)))) :qid |AsyncMapidfy.20:24| :skolemid |2618| :pattern ( (|#AsyncMapSpec.Step.QueryBeginStep| (Lit |a#14#0#0@@1|))) )))
(assert (forall ((|a#15#0#0@@1| T@U) ) (!  (=> (= (type |a#15#0#0@@1|) (SeqType BoxType)) (= (AsyncMapSpec.Step.key (|#AsyncMapSpec.Step.QueryBeginStep| |a#15#0#0@@1|)) |a#15#0#0@@1|)) :qid |AsyncMapidfy.20:24| :skolemid |2619| :pattern ( (|#AsyncMapSpec.Step.QueryBeginStep| |a#15#0#0@@1|)) )))
(assert (forall ((arg0@@514 T@U) ) (! (= (type (|#AsyncMapSpec.Step.QueryEndStep| arg0@@514)) DatatypeTypeType) :qid |funType:#AsyncMapSpec.Step.QueryEndStep| :pattern ( (|#AsyncMapSpec.Step.QueryEndStep| arg0@@514)) )))
(assert (forall ((|a#16#0#0@@1| T@U) ) (!  (=> (= (type |a#16#0#0@@1|) (SeqType BoxType)) (= (DatatypeCtorId (|#AsyncMapSpec.Step.QueryEndStep| |a#16#0#0@@1|)) |##AsyncMapSpec.Step.QueryEndStep|)) :qid |AsyncMapidfy.21:22| :skolemid |2620| :pattern ( (|#AsyncMapSpec.Step.QueryEndStep| |a#16#0#0@@1|)) )))
(assert (forall ((d@@123 T@U) ) (!  (=> (= (type d@@123) DatatypeTypeType) (= (AsyncMapSpec.Step.QueryEndStep_q d@@123) (= (DatatypeCtorId d@@123) |##AsyncMapSpec.Step.QueryEndStep|))) :qid |unknown.0:0| :skolemid |2621| :pattern ( (AsyncMapSpec.Step.QueryEndStep_q d@@123)) )))
(assert (forall ((d@@124 T@U) ) (!  (=> (and (= (type d@@124) DatatypeTypeType) (AsyncMapSpec.Step.QueryEndStep_q d@@124)) (exists ((|a#17#0#0@@2| T@U) ) (!  (and (= (type |a#17#0#0@@2|) (SeqType BoxType)) (= d@@124 (|#AsyncMapSpec.Step.QueryEndStep| |a#17#0#0@@2|))) :qid |AsyncMapidfy.21:22| :skolemid |2622| :no-pattern (type |a#17#0#0@@2|) :no-pattern (U_2_int |a#17#0#0@@2|) :no-pattern (U_2_bool |a#17#0#0@@2|) ))) :qid |unknown.0:0| :skolemid |2623| :pattern ( (AsyncMapSpec.Step.QueryEndStep_q d@@124)) )))
(assert (forall ((|a#18#0#0@@2| T@U) ) (!  (=> (= (type |a#18#0#0@@2|) (SeqType BoxType)) (= ($Is (|#AsyncMapSpec.Step.QueryEndStep| |a#18#0#0@@2|) Tclass.AsyncMapSpec.Step) ($Is |a#18#0#0@@2| Tclass.ValueType.Value))) :qid |AsyncMapidfy.21:22| :skolemid |2624| :pattern ( ($Is (|#AsyncMapSpec.Step.QueryEndStep| |a#18#0#0@@2|) Tclass.AsyncMapSpec.Step)) )))
(assert (forall ((|a#19#0#0@@2| T@U) ($h@@136 T@U) ) (!  (=> (and (and (= (type |a#19#0#0@@2|) (SeqType BoxType)) (= (type $h@@136) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@136)) (= ($IsAlloc (|#AsyncMapSpec.Step.QueryEndStep| |a#19#0#0@@2|) Tclass.AsyncMapSpec.Step $h@@136) ($IsAlloc |a#19#0#0@@2| Tclass.ValueType.Value $h@@136))) :qid |AsyncMapidfy.21:22| :skolemid |2625| :pattern ( ($IsAlloc (|#AsyncMapSpec.Step.QueryEndStep| |a#19#0#0@@2|) Tclass.AsyncMapSpec.Step $h@@136)) )))
(assert (forall ((arg0@@515 T@U) ) (! (= (type (AsyncMapSpec.Step.result arg0@@515)) (SeqType BoxType)) :qid |funType:AsyncMapSpec.Step.result| :pattern ( (AsyncMapSpec.Step.result arg0@@515)) )))
(assert (forall ((d@@125 T@U) ($h@@137 T@U) ) (!  (=> (and (and (= (type d@@125) DatatypeTypeType) (= (type $h@@137) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@137) (and (AsyncMapSpec.Step.QueryEndStep_q d@@125) ($IsAlloc d@@125 Tclass.AsyncMapSpec.Step $h@@137)))) ($IsAlloc (AsyncMapSpec.Step.result d@@125) Tclass.ValueType.Value $h@@137)) :qid |unknown.0:0| :skolemid |2626| :pattern ( ($IsAlloc (AsyncMapSpec.Step.result d@@125) Tclass.ValueType.Value $h@@137)) )))
(assert (forall ((|a#20#0#0@@2| T@U) ) (!  (=> (= (type |a#20#0#0@@2|) (SeqType BoxType)) (= (|#AsyncMapSpec.Step.QueryEndStep| (Lit |a#20#0#0@@2|)) (Lit (|#AsyncMapSpec.Step.QueryEndStep| |a#20#0#0@@2|)))) :qid |AsyncMapidfy.21:22| :skolemid |2627| :pattern ( (|#AsyncMapSpec.Step.QueryEndStep| (Lit |a#20#0#0@@2|))) )))
(assert (forall ((|a#21#0#0@@2| T@U) ) (!  (=> (= (type |a#21#0#0@@2|) (SeqType BoxType)) (= (AsyncMapSpec.Step.result (|#AsyncMapSpec.Step.QueryEndStep| |a#21#0#0@@2|)) |a#21#0#0@@2|)) :qid |AsyncMapidfy.21:22| :skolemid |2628| :pattern ( (|#AsyncMapSpec.Step.QueryEndStep| |a#21#0#0@@2|)) )))
(assert (forall ((arg0@@516 T@U) (arg1@@218 T@U) ) (! (= (type (|#AsyncMapSpec.Step.QueryStep| arg0@@516 arg1@@218)) DatatypeTypeType) :qid |funType:#AsyncMapSpec.Step.QueryStep| :pattern ( (|#AsyncMapSpec.Step.QueryStep| arg0@@516 arg1@@218)) )))
(assert (forall ((|a#22#0#0@@2| T@U) (|a#22#1#0@@1| T@U) ) (!  (=> (and (= (type |a#22#0#0@@2|) (SeqType BoxType)) (= (type |a#22#1#0@@1|) (SeqType BoxType))) (= (DatatypeCtorId (|#AsyncMapSpec.Step.QueryStep| |a#22#0#0@@2| |a#22#1#0@@1|)) |##AsyncMapSpec.Step.QueryStep|)) :qid |AsyncMapidfy.22:19| :skolemid |2629| :pattern ( (|#AsyncMapSpec.Step.QueryStep| |a#22#0#0@@2| |a#22#1#0@@1|)) )))
(assert (forall ((d@@126 T@U) ) (!  (=> (= (type d@@126) DatatypeTypeType) (= (AsyncMapSpec.Step.QueryStep_q d@@126) (= (DatatypeCtorId d@@126) |##AsyncMapSpec.Step.QueryStep|))) :qid |unknown.0:0| :skolemid |2630| :pattern ( (AsyncMapSpec.Step.QueryStep_q d@@126)) )))
(assert (forall ((d@@127 T@U) ) (!  (=> (and (= (type d@@127) DatatypeTypeType) (AsyncMapSpec.Step.QueryStep_q d@@127)) (exists ((|a#23#0#0@@1| T@U) (|a#23#1#0@@0| T@U) ) (!  (and (and (= (type |a#23#0#0@@1|) (SeqType BoxType)) (= (type |a#23#1#0@@0|) (SeqType BoxType))) (= d@@127 (|#AsyncMapSpec.Step.QueryStep| |a#23#0#0@@1| |a#23#1#0@@0|))) :qid |AsyncMapidfy.22:19| :skolemid |2631| :no-pattern (type |a#23#0#0@@1|) :no-pattern (type |a#23#1#0@@0|) :no-pattern (U_2_int |a#23#0#0@@1|) :no-pattern (U_2_bool |a#23#0#0@@1|) :no-pattern (U_2_int |a#23#1#0@@0|) :no-pattern (U_2_bool |a#23#1#0@@0|) ))) :qid |unknown.0:0| :skolemid |2632| :pattern ( (AsyncMapSpec.Step.QueryStep_q d@@127)) )))
(assert (forall ((|a#24#0#0@@1| T@U) (|a#24#1#0@@0| T@U) ) (!  (=> (and (= (type |a#24#0#0@@1|) (SeqType BoxType)) (= (type |a#24#1#0@@0|) (SeqType BoxType))) (= ($Is (|#AsyncMapSpec.Step.QueryStep| |a#24#0#0@@1| |a#24#1#0@@0|) Tclass.AsyncMapSpec.Step)  (and ($Is |a#24#0#0@@1| Tclass.KeyType.Key) ($Is |a#24#1#0@@0| Tclass.ValueType.Value)))) :qid |AsyncMapidfy.22:19| :skolemid |2633| :pattern ( ($Is (|#AsyncMapSpec.Step.QueryStep| |a#24#0#0@@1| |a#24#1#0@@0|) Tclass.AsyncMapSpec.Step)) )))
(assert (forall ((|a#25#0#0@@1| T@U) (|a#25#1#0@@0| T@U) ($h@@138 T@U) ) (!  (=> (and (and (and (= (type |a#25#0#0@@1|) (SeqType BoxType)) (= (type |a#25#1#0@@0|) (SeqType BoxType))) (= (type $h@@138) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@138)) (= ($IsAlloc (|#AsyncMapSpec.Step.QueryStep| |a#25#0#0@@1| |a#25#1#0@@0|) Tclass.AsyncMapSpec.Step $h@@138)  (and ($IsAlloc |a#25#0#0@@1| Tclass.KeyType.Key $h@@138) ($IsAlloc |a#25#1#0@@0| Tclass.ValueType.Value $h@@138)))) :qid |AsyncMapidfy.22:19| :skolemid |2634| :pattern ( ($IsAlloc (|#AsyncMapSpec.Step.QueryStep| |a#25#0#0@@1| |a#25#1#0@@0|) Tclass.AsyncMapSpec.Step $h@@138)) )))
(assert (forall ((d@@128 T@U) ($h@@139 T@U) ) (!  (=> (and (and (= (type d@@128) DatatypeTypeType) (= (type $h@@139) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@139) (and (AsyncMapSpec.Step.QueryStep_q d@@128) ($IsAlloc d@@128 Tclass.AsyncMapSpec.Step $h@@139)))) ($IsAlloc (AsyncMapSpec.Step.key d@@128) Tclass.KeyType.Key $h@@139)) :qid |unknown.0:0| :skolemid |2635| :pattern ( ($IsAlloc (AsyncMapSpec.Step.key d@@128) Tclass.KeyType.Key $h@@139)) )))
(assert (forall ((d@@129 T@U) ($h@@140 T@U) ) (!  (=> (and (and (= (type d@@129) DatatypeTypeType) (= (type $h@@140) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@140) (and (AsyncMapSpec.Step.QueryStep_q d@@129) ($IsAlloc d@@129 Tclass.AsyncMapSpec.Step $h@@140)))) ($IsAlloc (AsyncMapSpec.Step.result d@@129) Tclass.ValueType.Value $h@@140)) :qid |unknown.0:0| :skolemid |2636| :pattern ( ($IsAlloc (AsyncMapSpec.Step.result d@@129) Tclass.ValueType.Value $h@@140)) )))
(assert (forall ((|a#26#0#0@@1| T@U) (|a#26#1#0@@0| T@U) ) (!  (=> (and (= (type |a#26#0#0@@1|) (SeqType BoxType)) (= (type |a#26#1#0@@0|) (SeqType BoxType))) (= (|#AsyncMapSpec.Step.QueryStep| (Lit |a#26#0#0@@1|) (Lit |a#26#1#0@@0|)) (Lit (|#AsyncMapSpec.Step.QueryStep| |a#26#0#0@@1| |a#26#1#0@@0|)))) :qid |AsyncMapidfy.22:19| :skolemid |2637| :pattern ( (|#AsyncMapSpec.Step.QueryStep| (Lit |a#26#0#0@@1|) (Lit |a#26#1#0@@0|))) )))
(assert (forall ((|a#27#0#0@@1| T@U) (|a#27#1#0@@0| T@U) ) (!  (=> (and (= (type |a#27#0#0@@1|) (SeqType BoxType)) (= (type |a#27#1#0@@0|) (SeqType BoxType))) (= (AsyncMapSpec.Step.key (|#AsyncMapSpec.Step.QueryStep| |a#27#0#0@@1| |a#27#1#0@@0|)) |a#27#0#0@@1|)) :qid |AsyncMapidfy.22:19| :skolemid |2638| :pattern ( (|#AsyncMapSpec.Step.QueryStep| |a#27#0#0@@1| |a#27#1#0@@0|)) )))
(assert (forall ((|a#28#0#0@@1| T@U) (|a#28#1#0@@0| T@U) ) (!  (=> (and (= (type |a#28#0#0@@1|) (SeqType BoxType)) (= (type |a#28#1#0@@0|) (SeqType BoxType))) (= (AsyncMapSpec.Step.result (|#AsyncMapSpec.Step.QueryStep| |a#28#0#0@@1| |a#28#1#0@@0|)) |a#28#1#0@@0|)) :qid |AsyncMapidfy.22:19| :skolemid |2639| :pattern ( (|#AsyncMapSpec.Step.QueryStep| |a#28#0#0@@1| |a#28#1#0@@0|)) )))
(assert (forall ((arg0@@517 T@U) (arg1@@219 T@U) ) (! (= (type (|#AsyncMapSpec.Step.WriteStep| arg0@@517 arg1@@219)) DatatypeTypeType) :qid |funType:#AsyncMapSpec.Step.WriteStep| :pattern ( (|#AsyncMapSpec.Step.WriteStep| arg0@@517 arg1@@219)) )))
(assert (forall ((|a#29#0#0@@0| T@U) (|a#29#1#0@@0| T@U) ) (!  (=> (and (= (type |a#29#0#0@@0|) (SeqType BoxType)) (= (type |a#29#1#0@@0|) (SeqType BoxType))) (= (DatatypeCtorId (|#AsyncMapSpec.Step.WriteStep| |a#29#0#0@@0| |a#29#1#0@@0|)) |##AsyncMapSpec.Step.WriteStep|)) :qid |AsyncMapidfy.23:19| :skolemid |2640| :pattern ( (|#AsyncMapSpec.Step.WriteStep| |a#29#0#0@@0| |a#29#1#0@@0|)) )))
(assert (forall ((d@@130 T@U) ) (!  (=> (= (type d@@130) DatatypeTypeType) (= (AsyncMapSpec.Step.WriteStep_q d@@130) (= (DatatypeCtorId d@@130) |##AsyncMapSpec.Step.WriteStep|))) :qid |unknown.0:0| :skolemid |2641| :pattern ( (AsyncMapSpec.Step.WriteStep_q d@@130)) )))
(assert (forall ((d@@131 T@U) ) (!  (=> (and (= (type d@@131) DatatypeTypeType) (AsyncMapSpec.Step.WriteStep_q d@@131)) (exists ((|a#30#0#0@@0| T@U) (|a#30#1#0@@0| T@U) ) (!  (and (and (= (type |a#30#0#0@@0|) (SeqType BoxType)) (= (type |a#30#1#0@@0|) (SeqType BoxType))) (= d@@131 (|#AsyncMapSpec.Step.WriteStep| |a#30#0#0@@0| |a#30#1#0@@0|))) :qid |AsyncMapidfy.23:19| :skolemid |2642| :no-pattern (type |a#30#0#0@@0|) :no-pattern (type |a#30#1#0@@0|) :no-pattern (U_2_int |a#30#0#0@@0|) :no-pattern (U_2_bool |a#30#0#0@@0|) :no-pattern (U_2_int |a#30#1#0@@0|) :no-pattern (U_2_bool |a#30#1#0@@0|) ))) :qid |unknown.0:0| :skolemid |2643| :pattern ( (AsyncMapSpec.Step.WriteStep_q d@@131)) )))
(assert (forall ((|a#31#0#0@@0| T@U) (|a#31#1#0@@0| T@U) ) (!  (=> (and (= (type |a#31#0#0@@0|) (SeqType BoxType)) (= (type |a#31#1#0@@0|) (SeqType BoxType))) (= ($Is (|#AsyncMapSpec.Step.WriteStep| |a#31#0#0@@0| |a#31#1#0@@0|) Tclass.AsyncMapSpec.Step)  (and ($Is |a#31#0#0@@0| Tclass.KeyType.Key) ($Is |a#31#1#0@@0| Tclass.ValueType.Value)))) :qid |AsyncMapidfy.23:19| :skolemid |2644| :pattern ( ($Is (|#AsyncMapSpec.Step.WriteStep| |a#31#0#0@@0| |a#31#1#0@@0|) Tclass.AsyncMapSpec.Step)) )))
(assert (forall ((|a#32#0#0@@0| T@U) (|a#32#1#0@@0| T@U) ($h@@141 T@U) ) (!  (=> (and (and (and (= (type |a#32#0#0@@0|) (SeqType BoxType)) (= (type |a#32#1#0@@0|) (SeqType BoxType))) (= (type $h@@141) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@141)) (= ($IsAlloc (|#AsyncMapSpec.Step.WriteStep| |a#32#0#0@@0| |a#32#1#0@@0|) Tclass.AsyncMapSpec.Step $h@@141)  (and ($IsAlloc |a#32#0#0@@0| Tclass.KeyType.Key $h@@141) ($IsAlloc |a#32#1#0@@0| Tclass.ValueType.Value $h@@141)))) :qid |AsyncMapidfy.23:19| :skolemid |2645| :pattern ( ($IsAlloc (|#AsyncMapSpec.Step.WriteStep| |a#32#0#0@@0| |a#32#1#0@@0|) Tclass.AsyncMapSpec.Step $h@@141)) )))
(assert (forall ((d@@132 T@U) ($h@@142 T@U) ) (!  (=> (and (and (= (type d@@132) DatatypeTypeType) (= (type $h@@142) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@142) (and (AsyncMapSpec.Step.WriteStep_q d@@132) ($IsAlloc d@@132 Tclass.AsyncMapSpec.Step $h@@142)))) ($IsAlloc (AsyncMapSpec.Step.key d@@132) Tclass.KeyType.Key $h@@142)) :qid |unknown.0:0| :skolemid |2646| :pattern ( ($IsAlloc (AsyncMapSpec.Step.key d@@132) Tclass.KeyType.Key $h@@142)) )))
(assert (forall ((arg0@@518 T@U) ) (! (= (type (AsyncMapSpec.Step.new__value arg0@@518)) (SeqType BoxType)) :qid |funType:AsyncMapSpec.Step.new__value| :pattern ( (AsyncMapSpec.Step.new__value arg0@@518)) )))
(assert (forall ((d@@133 T@U) ($h@@143 T@U) ) (!  (=> (and (and (= (type d@@133) DatatypeTypeType) (= (type $h@@143) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@143) (and (AsyncMapSpec.Step.WriteStep_q d@@133) ($IsAlloc d@@133 Tclass.AsyncMapSpec.Step $h@@143)))) ($IsAlloc (AsyncMapSpec.Step.new__value d@@133) Tclass.ValueType.Value $h@@143)) :qid |unknown.0:0| :skolemid |2647| :pattern ( ($IsAlloc (AsyncMapSpec.Step.new__value d@@133) Tclass.ValueType.Value $h@@143)) )))
(assert (forall ((|a#33#0#0@@0| T@U) (|a#33#1#0@@0| T@U) ) (!  (=> (and (= (type |a#33#0#0@@0|) (SeqType BoxType)) (= (type |a#33#1#0@@0|) (SeqType BoxType))) (= (|#AsyncMapSpec.Step.WriteStep| (Lit |a#33#0#0@@0|) (Lit |a#33#1#0@@0|)) (Lit (|#AsyncMapSpec.Step.WriteStep| |a#33#0#0@@0| |a#33#1#0@@0|)))) :qid |AsyncMapidfy.23:19| :skolemid |2648| :pattern ( (|#AsyncMapSpec.Step.WriteStep| (Lit |a#33#0#0@@0|) (Lit |a#33#1#0@@0|))) )))
(assert (forall ((|a#34#0#0@@0| T@U) (|a#34#1#0@@0| T@U) ) (!  (=> (and (= (type |a#34#0#0@@0|) (SeqType BoxType)) (= (type |a#34#1#0@@0|) (SeqType BoxType))) (= (AsyncMapSpec.Step.key (|#AsyncMapSpec.Step.WriteStep| |a#34#0#0@@0| |a#34#1#0@@0|)) |a#34#0#0@@0|)) :qid |AsyncMapidfy.23:19| :skolemid |2649| :pattern ( (|#AsyncMapSpec.Step.WriteStep| |a#34#0#0@@0| |a#34#1#0@@0|)) )))
(assert (forall ((|a#35#0#0@@0| T@U) (|a#35#1#0@@0| T@U) ) (!  (=> (and (= (type |a#35#0#0@@0|) (SeqType BoxType)) (= (type |a#35#1#0@@0|) (SeqType BoxType))) (= (AsyncMapSpec.Step.new__value (|#AsyncMapSpec.Step.WriteStep| |a#35#0#0@@0| |a#35#1#0@@0|)) |a#35#1#0@@0|)) :qid |AsyncMapidfy.23:19| :skolemid |2650| :pattern ( (|#AsyncMapSpec.Step.WriteStep| |a#35#0#0@@0| |a#35#1#0@@0|)) )))
(assert (forall ((arg0@@519 T@U) (arg1@@220 T@U) (arg2@@140 T@U) ) (! (= (type (|#AsyncMapSpec.Step.SuccStep| arg0@@519 arg1@@220 arg2@@140)) DatatypeTypeType) :qid |funType:#AsyncMapSpec.Step.SuccStep| :pattern ( (|#AsyncMapSpec.Step.SuccStep| arg0@@519 arg1@@220 arg2@@140)) )))
(assert (forall ((|a#36#0#0@@0| T@U) (|a#36#1#0@@0| T@U) (|a#36#2#0| T@U) ) (!  (=> (and (and (= (type |a#36#0#0@@0|) DatatypeTypeType) (= (type |a#36#1#0@@0|) (SeqType BoxType))) (= (type |a#36#2#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#AsyncMapSpec.Step.SuccStep| |a#36#0#0@@0| |a#36#1#0@@0| |a#36#2#0|)) |##AsyncMapSpec.Step.SuccStep|)) :qid |AsyncMapidfy.24:18| :skolemid |2651| :pattern ( (|#AsyncMapSpec.Step.SuccStep| |a#36#0#0@@0| |a#36#1#0@@0| |a#36#2#0|)) )))
(assert (forall ((d@@134 T@U) ) (!  (=> (= (type d@@134) DatatypeTypeType) (= (AsyncMapSpec.Step.SuccStep_q d@@134) (= (DatatypeCtorId d@@134) |##AsyncMapSpec.Step.SuccStep|))) :qid |unknown.0:0| :skolemid |2652| :pattern ( (AsyncMapSpec.Step.SuccStep_q d@@134)) )))
(assert (forall ((d@@135 T@U) ) (!  (=> (and (= (type d@@135) DatatypeTypeType) (AsyncMapSpec.Step.SuccStep_q d@@135)) (exists ((|a#37#0#0@@0| T@U) (|a#37#1#0@@0| T@U) (|a#37#2#0| T@U) ) (!  (and (and (and (= (type |a#37#0#0@@0|) DatatypeTypeType) (= (type |a#37#1#0@@0|) (SeqType BoxType))) (= (type |a#37#2#0|) DatatypeTypeType)) (= d@@135 (|#AsyncMapSpec.Step.SuccStep| |a#37#0#0@@0| |a#37#1#0@@0| |a#37#2#0|))) :qid |AsyncMapidfy.24:18| :skolemid |2653| :no-pattern (type |a#37#0#0@@0|) :no-pattern (type |a#37#1#0@@0|) :no-pattern (type |a#37#2#0|) :no-pattern (U_2_int |a#37#0#0@@0|) :no-pattern (U_2_bool |a#37#0#0@@0|) :no-pattern (U_2_int |a#37#1#0@@0|) :no-pattern (U_2_bool |a#37#1#0@@0|) :no-pattern (U_2_int |a#37#2#0|) :no-pattern (U_2_bool |a#37#2#0|) ))) :qid |unknown.0:0| :skolemid |2654| :pattern ( (AsyncMapSpec.Step.SuccStep_q d@@135)) )))
(assert (forall ((|a#38#0#0@@0| T@U) (|a#38#1#0@@0| T@U) (|a#38#2#0| T@U) ) (!  (=> (and (and (= (type |a#38#0#0@@0|) DatatypeTypeType) (= (type |a#38#1#0@@0|) (SeqType BoxType))) (= (type |a#38#2#0|) DatatypeTypeType)) (= ($Is (|#AsyncMapSpec.Step.SuccStep| |a#38#0#0@@0| |a#38#1#0@@0| |a#38#2#0|) Tclass.AsyncMapSpec.Step)  (and (and ($Is |a#38#0#0@@0| Tclass.UI.RangeStart) ($Is |a#38#1#0@@0| (TSeq Tclass.UI.SuccResult))) ($Is |a#38#2#0| Tclass.UI.RangeEnd)))) :qid |AsyncMapidfy.24:18| :skolemid |2655| :pattern ( ($Is (|#AsyncMapSpec.Step.SuccStep| |a#38#0#0@@0| |a#38#1#0@@0| |a#38#2#0|) Tclass.AsyncMapSpec.Step)) )))
(assert (forall ((|a#39#0#0@@0| T@U) (|a#39#1#0@@0| T@U) (|a#39#2#0| T@U) ($h@@144 T@U) ) (!  (=> (and (and (and (and (= (type |a#39#0#0@@0|) DatatypeTypeType) (= (type |a#39#1#0@@0|) (SeqType BoxType))) (= (type |a#39#2#0|) DatatypeTypeType)) (= (type $h@@144) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@144)) (= ($IsAlloc (|#AsyncMapSpec.Step.SuccStep| |a#39#0#0@@0| |a#39#1#0@@0| |a#39#2#0|) Tclass.AsyncMapSpec.Step $h@@144)  (and (and ($IsAlloc |a#39#0#0@@0| Tclass.UI.RangeStart $h@@144) ($IsAlloc |a#39#1#0@@0| (TSeq Tclass.UI.SuccResult) $h@@144)) ($IsAlloc |a#39#2#0| Tclass.UI.RangeEnd $h@@144)))) :qid |AsyncMapidfy.24:18| :skolemid |2656| :pattern ( ($IsAlloc (|#AsyncMapSpec.Step.SuccStep| |a#39#0#0@@0| |a#39#1#0@@0| |a#39#2#0|) Tclass.AsyncMapSpec.Step $h@@144)) )))
(assert (forall ((arg0@@520 T@U) ) (! (= (type (AsyncMapSpec.Step.start arg0@@520)) DatatypeTypeType) :qid |funType:AsyncMapSpec.Step.start| :pattern ( (AsyncMapSpec.Step.start arg0@@520)) )))
(assert (forall ((d@@136 T@U) ($h@@145 T@U) ) (!  (=> (and (and (= (type d@@136) DatatypeTypeType) (= (type $h@@145) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@145) (and (AsyncMapSpec.Step.SuccStep_q d@@136) ($IsAlloc d@@136 Tclass.AsyncMapSpec.Step $h@@145)))) ($IsAlloc (AsyncMapSpec.Step.start d@@136) Tclass.UI.RangeStart $h@@145)) :qid |unknown.0:0| :skolemid |2657| :pattern ( ($IsAlloc (AsyncMapSpec.Step.start d@@136) Tclass.UI.RangeStart $h@@145)) )))
(assert (forall ((arg0@@521 T@U) ) (! (= (type (AsyncMapSpec.Step.results arg0@@521)) (SeqType BoxType)) :qid |funType:AsyncMapSpec.Step.results| :pattern ( (AsyncMapSpec.Step.results arg0@@521)) )))
(assert (forall ((d@@137 T@U) ($h@@146 T@U) ) (!  (=> (and (and (= (type d@@137) DatatypeTypeType) (= (type $h@@146) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@146) (and (AsyncMapSpec.Step.SuccStep_q d@@137) ($IsAlloc d@@137 Tclass.AsyncMapSpec.Step $h@@146)))) ($IsAlloc (AsyncMapSpec.Step.results d@@137) (TSeq Tclass.UI.SuccResult) $h@@146)) :qid |unknown.0:0| :skolemid |2658| :pattern ( ($IsAlloc (AsyncMapSpec.Step.results d@@137) (TSeq Tclass.UI.SuccResult) $h@@146)) )))
(assert (forall ((arg0@@522 T@U) ) (! (= (type (AsyncMapSpec.Step.end arg0@@522)) DatatypeTypeType) :qid |funType:AsyncMapSpec.Step.end| :pattern ( (AsyncMapSpec.Step.end arg0@@522)) )))
(assert (forall ((d@@138 T@U) ($h@@147 T@U) ) (!  (=> (and (and (= (type d@@138) DatatypeTypeType) (= (type $h@@147) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@147) (and (AsyncMapSpec.Step.SuccStep_q d@@138) ($IsAlloc d@@138 Tclass.AsyncMapSpec.Step $h@@147)))) ($IsAlloc (AsyncMapSpec.Step.end d@@138) Tclass.UI.RangeEnd $h@@147)) :qid |unknown.0:0| :skolemid |2659| :pattern ( ($IsAlloc (AsyncMapSpec.Step.end d@@138) Tclass.UI.RangeEnd $h@@147)) )))
(assert (forall ((|a#40#0#0@@0| T@U) (|a#40#1#0@@0| T@U) (|a#40#2#0| T@U) ) (!  (=> (and (and (= (type |a#40#0#0@@0|) DatatypeTypeType) (= (type |a#40#1#0@@0|) (SeqType BoxType))) (= (type |a#40#2#0|) DatatypeTypeType)) (= (|#AsyncMapSpec.Step.SuccStep| (Lit |a#40#0#0@@0|) (Lit |a#40#1#0@@0|) (Lit |a#40#2#0|)) (Lit (|#AsyncMapSpec.Step.SuccStep| |a#40#0#0@@0| |a#40#1#0@@0| |a#40#2#0|)))) :qid |AsyncMapidfy.24:18| :skolemid |2660| :pattern ( (|#AsyncMapSpec.Step.SuccStep| (Lit |a#40#0#0@@0|) (Lit |a#40#1#0@@0|) (Lit |a#40#2#0|))) )))
(assert (forall ((|a#41#0#0@@0| T@U) (|a#41#1#0@@0| T@U) (|a#41#2#0| T@U) ) (!  (=> (and (and (= (type |a#41#0#0@@0|) DatatypeTypeType) (= (type |a#41#1#0@@0|) (SeqType BoxType))) (= (type |a#41#2#0|) DatatypeTypeType)) (= (AsyncMapSpec.Step.start (|#AsyncMapSpec.Step.SuccStep| |a#41#0#0@@0| |a#41#1#0@@0| |a#41#2#0|)) |a#41#0#0@@0|)) :qid |AsyncMapidfy.24:18| :skolemid |2661| :pattern ( (|#AsyncMapSpec.Step.SuccStep| |a#41#0#0@@0| |a#41#1#0@@0| |a#41#2#0|)) )))
(assert (forall ((|a#42#0#0@@0| T@U) (|a#42#1#0@@0| T@U) (|a#42#2#0| T@U) ) (!  (=> (and (and (= (type |a#42#0#0@@0|) DatatypeTypeType) (= (type |a#42#1#0@@0|) (SeqType BoxType))) (= (type |a#42#2#0|) DatatypeTypeType)) (< (DtRank |a#42#0#0@@0|) (DtRank (|#AsyncMapSpec.Step.SuccStep| |a#42#0#0@@0| |a#42#1#0@@0| |a#42#2#0|)))) :qid |AsyncMapidfy.24:18| :skolemid |2662| :pattern ( (|#AsyncMapSpec.Step.SuccStep| |a#42#0#0@@0| |a#42#1#0@@0| |a#42#2#0|)) )))
(assert (forall ((|a#43#0#0@@0| T@U) (|a#43#1#0@@0| T@U) (|a#43#2#0| T@U) ) (!  (=> (and (and (= (type |a#43#0#0@@0|) DatatypeTypeType) (= (type |a#43#1#0@@0|) (SeqType BoxType))) (= (type |a#43#2#0|) DatatypeTypeType)) (= (AsyncMapSpec.Step.results (|#AsyncMapSpec.Step.SuccStep| |a#43#0#0@@0| |a#43#1#0@@0| |a#43#2#0|)) |a#43#1#0@@0|)) :qid |AsyncMapidfy.24:18| :skolemid |2663| :pattern ( (|#AsyncMapSpec.Step.SuccStep| |a#43#0#0@@0| |a#43#1#0@@0| |a#43#2#0|)) )))
(assert (forall ((|a#44#0#0@@0| T@U) (|a#44#1#0@@0| T@U) (|a#44#2#0| T@U) (i@@28 Int) ) (!  (=> (and (and (and (= (type |a#44#0#0@@0|) DatatypeTypeType) (= (type |a#44#1#0@@0|) (SeqType BoxType))) (= (type |a#44#2#0|) DatatypeTypeType)) (and (<= 0 i@@28) (< i@@28 (|Seq#Length| |a#44#1#0@@0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#44#1#0@@0| i@@28))) (DtRank (|#AsyncMapSpec.Step.SuccStep| |a#44#0#0@@0| |a#44#1#0@@0| |a#44#2#0|)))) :qid |AsyncMapidfy.24:18| :skolemid |2664| :pattern ( (|Seq#Index| |a#44#1#0@@0| i@@28) (|#AsyncMapSpec.Step.SuccStep| |a#44#0#0@@0| |a#44#1#0@@0| |a#44#2#0|)) )))
(assert (forall ((|a#45#0#0@@0| T@U) (|a#45#1#0@@0| T@U) (|a#45#2#0| T@U) ) (!  (=> (and (and (= (type |a#45#0#0@@0|) DatatypeTypeType) (= (type |a#45#1#0@@0|) (SeqType BoxType))) (= (type |a#45#2#0|) DatatypeTypeType)) (< (|Seq#Rank| |a#45#1#0@@0|) (DtRank (|#AsyncMapSpec.Step.SuccStep| |a#45#0#0@@0| |a#45#1#0@@0| |a#45#2#0|)))) :qid |AsyncMapidfy.24:18| :skolemid |2665| :pattern ( (|#AsyncMapSpec.Step.SuccStep| |a#45#0#0@@0| |a#45#1#0@@0| |a#45#2#0|)) )))
(assert (forall ((|a#46#0#0@@0| T@U) (|a#46#1#0@@0| T@U) (|a#46#2#0| T@U) ) (!  (=> (and (and (= (type |a#46#0#0@@0|) DatatypeTypeType) (= (type |a#46#1#0@@0|) (SeqType BoxType))) (= (type |a#46#2#0|) DatatypeTypeType)) (= (AsyncMapSpec.Step.end (|#AsyncMapSpec.Step.SuccStep| |a#46#0#0@@0| |a#46#1#0@@0| |a#46#2#0|)) |a#46#2#0|)) :qid |AsyncMapidfy.24:18| :skolemid |2666| :pattern ( (|#AsyncMapSpec.Step.SuccStep| |a#46#0#0@@0| |a#46#1#0@@0| |a#46#2#0|)) )))
(assert (forall ((|a#47#0#0@@0| T@U) (|a#47#1#0@@0| T@U) (|a#47#2#0| T@U) ) (!  (=> (and (and (= (type |a#47#0#0@@0|) DatatypeTypeType) (= (type |a#47#1#0@@0|) (SeqType BoxType))) (= (type |a#47#2#0|) DatatypeTypeType)) (< (DtRank |a#47#2#0|) (DtRank (|#AsyncMapSpec.Step.SuccStep| |a#47#0#0@@0| |a#47#1#0@@0| |a#47#2#0|)))) :qid |AsyncMapidfy.24:18| :skolemid |2667| :pattern ( (|#AsyncMapSpec.Step.SuccStep| |a#47#0#0@@0| |a#47#1#0@@0| |a#47#2#0|)) )))
(assert (= (type |#AsyncMapSpec.Step.StutterStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#AsyncMapSpec.Step.StutterStep|) |##AsyncMapSpec.Step.StutterStep|))
(assert (forall ((d@@139 T@U) ) (!  (=> (= (type d@@139) DatatypeTypeType) (= (AsyncMapSpec.Step.StutterStep_q d@@139) (= (DatatypeCtorId d@@139) |##AsyncMapSpec.Step.StutterStep|))) :qid |unknown.0:0| :skolemid |2668| :pattern ( (AsyncMapSpec.Step.StutterStep_q d@@139)) )))
(assert (forall ((d@@140 T@U) ) (!  (=> (and (= (type d@@140) DatatypeTypeType) (AsyncMapSpec.Step.StutterStep_q d@@140)) (= d@@140 |#AsyncMapSpec.Step.StutterStep|)) :qid |unknown.0:0| :skolemid |2669| :pattern ( (AsyncMapSpec.Step.StutterStep_q d@@140)) )))
(assert ($Is |#AsyncMapSpec.Step.StutterStep| Tclass.AsyncMapSpec.Step))
(assert (forall (($h@@148 T@U) ) (!  (=> (and (= (type $h@@148) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@148)) ($IsAlloc |#AsyncMapSpec.Step.StutterStep| Tclass.AsyncMapSpec.Step $h@@148)) :qid |DafnyPreludebpl.545:12| :skolemid |2670| :pattern ( ($IsAlloc |#AsyncMapSpec.Step.StutterStep| Tclass.AsyncMapSpec.Step $h@@148)) )))
(assert (= |#AsyncMapSpec.Step.StutterStep| (Lit |#AsyncMapSpec.Step.StutterStep|)))
(assert (forall ((d@@141 T@U) ) (!  (=> (and (= (type d@@141) DatatypeTypeType) (|$IsA#AsyncMapSpec.Step| d@@141)) (or (or (or (or (or (AsyncMapSpec.Step.QueryBeginStep_q d@@141) (AsyncMapSpec.Step.QueryEndStep_q d@@141)) (AsyncMapSpec.Step.QueryStep_q d@@141)) (AsyncMapSpec.Step.WriteStep_q d@@141)) (AsyncMapSpec.Step.SuccStep_q d@@141)) (AsyncMapSpec.Step.StutterStep_q d@@141))) :qid |unknown.0:0| :skolemid |2671| :pattern ( (|$IsA#AsyncMapSpec.Step| d@@141)) )))
(assert (forall ((d@@142 T@U) ) (!  (=> (and (= (type d@@142) DatatypeTypeType) ($Is d@@142 Tclass.AsyncMapSpec.Step)) (or (or (or (or (or (AsyncMapSpec.Step.QueryBeginStep_q d@@142) (AsyncMapSpec.Step.QueryEndStep_q d@@142)) (AsyncMapSpec.Step.QueryStep_q d@@142)) (AsyncMapSpec.Step.WriteStep_q d@@142)) (AsyncMapSpec.Step.SuccStep_q d@@142)) (AsyncMapSpec.Step.StutterStep_q d@@142))) :qid |unknown.0:0| :skolemid |2672| :pattern ( (AsyncMapSpec.Step.StutterStep_q d@@142) ($Is d@@142 Tclass.AsyncMapSpec.Step)) :pattern ( (AsyncMapSpec.Step.SuccStep_q d@@142) ($Is d@@142 Tclass.AsyncMapSpec.Step)) :pattern ( (AsyncMapSpec.Step.WriteStep_q d@@142) ($Is d@@142 Tclass.AsyncMapSpec.Step)) :pattern ( (AsyncMapSpec.Step.QueryStep_q d@@142) ($Is d@@142 Tclass.AsyncMapSpec.Step)) :pattern ( (AsyncMapSpec.Step.QueryEndStep_q d@@142) ($Is d@@142 Tclass.AsyncMapSpec.Step)) :pattern ( (AsyncMapSpec.Step.QueryBeginStep_q d@@142) ($Is d@@142 Tclass.AsyncMapSpec.Step)) )))
(assert (forall ((a@@165 T@U) (b@@102 T@U) ) (!  (=> (and (and (= (type a@@165) DatatypeTypeType) (= (type b@@102) DatatypeTypeType)) (and (AsyncMapSpec.Step.QueryBeginStep_q a@@165) (AsyncMapSpec.Step.QueryBeginStep_q b@@102))) (= (|AsyncMapSpec.Step#Equal| a@@165 b@@102) (|Seq#Equal| (AsyncMapSpec.Step.key a@@165) (AsyncMapSpec.Step.key b@@102)))) :qid |unknown.0:0| :skolemid |2673| :pattern ( (|AsyncMapSpec.Step#Equal| a@@165 b@@102) (AsyncMapSpec.Step.QueryBeginStep_q a@@165)) :pattern ( (|AsyncMapSpec.Step#Equal| a@@165 b@@102) (AsyncMapSpec.Step.QueryBeginStep_q b@@102)) )))
(assert (forall ((a@@166 T@U) (b@@103 T@U) ) (!  (=> (and (and (= (type a@@166) DatatypeTypeType) (= (type b@@103) DatatypeTypeType)) (and (AsyncMapSpec.Step.QueryEndStep_q a@@166) (AsyncMapSpec.Step.QueryEndStep_q b@@103))) (= (|AsyncMapSpec.Step#Equal| a@@166 b@@103) (|Seq#Equal| (AsyncMapSpec.Step.result a@@166) (AsyncMapSpec.Step.result b@@103)))) :qid |unknown.0:0| :skolemid |2674| :pattern ( (|AsyncMapSpec.Step#Equal| a@@166 b@@103) (AsyncMapSpec.Step.QueryEndStep_q a@@166)) :pattern ( (|AsyncMapSpec.Step#Equal| a@@166 b@@103) (AsyncMapSpec.Step.QueryEndStep_q b@@103)) )))
(assert (forall ((a@@167 T@U) (b@@104 T@U) ) (!  (=> (and (and (= (type a@@167) DatatypeTypeType) (= (type b@@104) DatatypeTypeType)) (and (AsyncMapSpec.Step.QueryStep_q a@@167) (AsyncMapSpec.Step.QueryStep_q b@@104))) (= (|AsyncMapSpec.Step#Equal| a@@167 b@@104)  (and (|Seq#Equal| (AsyncMapSpec.Step.key a@@167) (AsyncMapSpec.Step.key b@@104)) (|Seq#Equal| (AsyncMapSpec.Step.result a@@167) (AsyncMapSpec.Step.result b@@104))))) :qid |unknown.0:0| :skolemid |2675| :pattern ( (|AsyncMapSpec.Step#Equal| a@@167 b@@104) (AsyncMapSpec.Step.QueryStep_q a@@167)) :pattern ( (|AsyncMapSpec.Step#Equal| a@@167 b@@104) (AsyncMapSpec.Step.QueryStep_q b@@104)) )))
(assert (forall ((a@@168 T@U) (b@@105 T@U) ) (!  (=> (and (and (= (type a@@168) DatatypeTypeType) (= (type b@@105) DatatypeTypeType)) (and (AsyncMapSpec.Step.WriteStep_q a@@168) (AsyncMapSpec.Step.WriteStep_q b@@105))) (= (|AsyncMapSpec.Step#Equal| a@@168 b@@105)  (and (|Seq#Equal| (AsyncMapSpec.Step.key a@@168) (AsyncMapSpec.Step.key b@@105)) (|Seq#Equal| (AsyncMapSpec.Step.new__value a@@168) (AsyncMapSpec.Step.new__value b@@105))))) :qid |unknown.0:0| :skolemid |2676| :pattern ( (|AsyncMapSpec.Step#Equal| a@@168 b@@105) (AsyncMapSpec.Step.WriteStep_q a@@168)) :pattern ( (|AsyncMapSpec.Step#Equal| a@@168 b@@105) (AsyncMapSpec.Step.WriteStep_q b@@105)) )))
(assert (forall ((a@@169 T@U) (b@@106 T@U) ) (!  (=> (and (and (= (type a@@169) DatatypeTypeType) (= (type b@@106) DatatypeTypeType)) (and (AsyncMapSpec.Step.SuccStep_q a@@169) (AsyncMapSpec.Step.SuccStep_q b@@106))) (= (|AsyncMapSpec.Step#Equal| a@@169 b@@106)  (and (and (|UI.RangeStart#Equal| (AsyncMapSpec.Step.start a@@169) (AsyncMapSpec.Step.start b@@106)) (|Seq#Equal| (AsyncMapSpec.Step.results a@@169) (AsyncMapSpec.Step.results b@@106))) (|UI.RangeEnd#Equal| (AsyncMapSpec.Step.end a@@169) (AsyncMapSpec.Step.end b@@106))))) :qid |unknown.0:0| :skolemid |2677| :pattern ( (|AsyncMapSpec.Step#Equal| a@@169 b@@106) (AsyncMapSpec.Step.SuccStep_q a@@169)) :pattern ( (|AsyncMapSpec.Step#Equal| a@@169 b@@106) (AsyncMapSpec.Step.SuccStep_q b@@106)) )))
(assert (forall ((a@@170 T@U) (b@@107 T@U) ) (!  (=> (and (and (= (type a@@170) DatatypeTypeType) (= (type b@@107) DatatypeTypeType)) (and (AsyncMapSpec.Step.StutterStep_q a@@170) (AsyncMapSpec.Step.StutterStep_q b@@107))) (= (|AsyncMapSpec.Step#Equal| a@@170 b@@107) true)) :qid |unknown.0:0| :skolemid |2678| :pattern ( (|AsyncMapSpec.Step#Equal| a@@170 b@@107) (AsyncMapSpec.Step.StutterStep_q a@@170)) :pattern ( (|AsyncMapSpec.Step#Equal| a@@170 b@@107) (AsyncMapSpec.Step.StutterStep_q b@@107)) )))
(assert (forall ((a@@171 T@U) (b@@108 T@U) ) (!  (=> (and (= (type a@@171) DatatypeTypeType) (= (type b@@108) DatatypeTypeType)) (= (|AsyncMapSpec.Step#Equal| a@@171 b@@108) (= a@@171 b@@108))) :qid |unknown.0:0| :skolemid |2679| :pattern ( (|AsyncMapSpec.Step#Equal| a@@171 b@@108)) )))
(assert (= (type Tclass.AsyncMapSpec.__default) TyType))
(assert (= (Tag Tclass.AsyncMapSpec.__default) Tagclass.AsyncMapSpec.__default))
(assert (= (TagFamily Tclass.AsyncMapSpec.__default) tytagFamily$_default))
(assert (forall ((bx@@177 T@U) ) (!  (=> (and (= (type bx@@177) BoxType) ($IsBox bx@@177 Tclass.AsyncMapSpec.__default)) (and (= ($Box ($Unbox refType bx@@177)) bx@@177) ($Is ($Unbox refType bx@@177) Tclass.AsyncMapSpec.__default))) :qid |unknown.0:0| :skolemid |2680| :pattern ( ($IsBox bx@@177 Tclass.AsyncMapSpec.__default)) )))
(assert (forall (($o@@31 T@U) ) (!  (=> (= (type $o@@31) refType) (= ($Is $o@@31 Tclass.AsyncMapSpec.__default)  (or (= $o@@31 null) (= (dtype $o@@31) Tclass.AsyncMapSpec.__default)))) :qid |unknown.0:0| :skolemid |2681| :pattern ( ($Is $o@@31 Tclass.AsyncMapSpec.__default)) )))
(assert (forall (($o@@32 T@U) ($h@@149 T@U) ) (!  (=> (and (= (type $o@@32) refType) (= (type $h@@149) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@32 Tclass.AsyncMapSpec.__default $h@@149)  (or (= $o@@32 null) (U_2_bool (MapType1Select (MapType0Select $h@@149 $o@@32) alloc))))) :qid |unknown.0:0| :skolemid |2682| :pattern ( ($IsAlloc $o@@32 Tclass.AsyncMapSpec.__default $h@@149)) )))
(assert  (=> true (forall ((|s#0@@53| T@U) ) (!  (=> (and (= (type |s#0@@53|) DatatypeTypeType) (or (|AsyncMapSpec.__default.Init#canCall| |s#0@@53|) ($Is |s#0@@53| Tclass.AsyncMapSpec.Variables))) true) :qid |AsyncMapidfy.27:18| :skolemid |2683| :pattern ( (AsyncMapSpec.__default.Init |s#0@@53|)) ))))
(assert (forall ((|s#0@@54| T@U) ) (!  (=> (and (= (type |s#0@@54|) DatatypeTypeType) ($Is |s#0@@54| Tclass.AsyncMapSpec.Variables)) (= (|AsyncMapSpec.__default.Init#requires| |s#0@@54|) true)) :qid |AsyncMapidfy.27:18| :skolemid |2684| :pattern ( (|AsyncMapSpec.__default.Init#requires| |s#0@@54|)) )))
(assert  (=> true (forall ((|s#0@@55| T@U) ) (!  (=> (and (= (type |s#0@@55|) DatatypeTypeType) (or (|AsyncMapSpec.__default.Init#canCall| |s#0@@55|) ($Is |s#0@@55| Tclass.AsyncMapSpec.Variables))) (and (and (and (AsyncMapSpec.Variables.Variables_q |s#0@@55|) (|MapSpec.__default.Init#canCall| (AsyncMapSpec.Variables.dict |s#0@@55|))) (=> (MapSpec.__default.Init (AsyncMapSpec.Variables.dict |s#0@@55|)) (AsyncMapSpec.Variables.Variables_q |s#0@@55|))) (= (AsyncMapSpec.__default.Init |s#0@@55|)  (and (MapSpec.__default.Init (AsyncMapSpec.Variables.dict |s#0@@55|)) (|Map#Equal| (AsyncMapSpec.Variables.queries |s#0@@55|) (|Map#Empty| BoxType BoxType)))))) :qid |AsyncMapidfy.27:18| :skolemid |2685| :pattern ( (AsyncMapSpec.__default.Init |s#0@@55|)) ))))
(assert  (=> true (forall ((|s#0@@56| T@U) ) (!  (=> (and (= (type |s#0@@56|) DatatypeTypeType) (or (|AsyncMapSpec.__default.Init#canCall| (Lit |s#0@@56|)) ($Is |s#0@@56| Tclass.AsyncMapSpec.Variables))) (and (and (and (AsyncMapSpec.Variables.Variables_q (Lit |s#0@@56|)) (|MapSpec.__default.Init#canCall| (Lit (AsyncMapSpec.Variables.dict (Lit |s#0@@56|))))) (=> (U_2_bool (Lit (bool_2_U (MapSpec.__default.Init (Lit (AsyncMapSpec.Variables.dict (Lit |s#0@@56|))))))) (AsyncMapSpec.Variables.Variables_q (Lit |s#0@@56|)))) (= (AsyncMapSpec.__default.Init (Lit |s#0@@56|))  (and (MapSpec.__default.Init (Lit (AsyncMapSpec.Variables.dict (Lit |s#0@@56|)))) (|Map#Equal| (AsyncMapSpec.Variables.queries (Lit |s#0@@56|)) (|Map#Empty| BoxType BoxType)))))) :qid |AsyncMapidfy.27:18| :weight 3 :skolemid |2686| :pattern ( (AsyncMapSpec.__default.Init (Lit |s#0@@56|))) ))))
(assert  (=> true (forall ((|s#0@@57| T@U) (|s'#0@@25| T@U) (|uiop#0@@25| T@U) (|key#0@@37| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@57|) DatatypeTypeType) (= (type |s'#0@@25|) DatatypeTypeType)) (= (type |uiop#0@@25|) DatatypeTypeType)) (= (type |key#0@@37|) (SeqType BoxType))) (or (|AsyncMapSpec.__default.QueryBegin#canCall| |s#0@@57| |s'#0@@25| |uiop#0@@25| |key#0@@37|) (and (and (and ($Is |s#0@@57| Tclass.AsyncMapSpec.Variables) ($Is |s'#0@@25| Tclass.AsyncMapSpec.Variables)) ($Is |uiop#0@@25| Tclass.UI.Op)) ($Is |key#0@@37| Tclass.KeyType.Key)))) true) :qid |AsyncMapidfy.33:24| :skolemid |2687| :pattern ( (AsyncMapSpec.__default.QueryBegin |s#0@@57| |s'#0@@25| |uiop#0@@25| |key#0@@37|)) ))))
(assert (forall ((|s#0@@58| T@U) (|s'#0@@26| T@U) (|uiop#0@@26| T@U) (|key#0@@38| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@58|) DatatypeTypeType) (= (type |s'#0@@26|) DatatypeTypeType)) (= (type |uiop#0@@26|) DatatypeTypeType)) (= (type |key#0@@38|) (SeqType BoxType))) (and (and (and ($Is |s#0@@58| Tclass.AsyncMapSpec.Variables) ($Is |s'#0@@26| Tclass.AsyncMapSpec.Variables)) ($Is |uiop#0@@26| Tclass.UI.Op)) ($Is |key#0@@38| Tclass.KeyType.Key))) (= (|AsyncMapSpec.__default.QueryBegin#requires| |s#0@@58| |s'#0@@26| |uiop#0@@26| |key#0@@38|) true)) :qid |AsyncMapidfy.33:24| :skolemid |2688| :pattern ( (|AsyncMapSpec.__default.QueryBegin#requires| |s#0@@58| |s'#0@@26| |uiop#0@@26| |key#0@@38|)) )))
(assert  (=> true (forall ((|s#0@@59| T@U) (|s'#0@@27| T@U) (|uiop#0@@27| T@U) (|key#0@@39| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@59|) DatatypeTypeType) (= (type |s'#0@@27|) DatatypeTypeType)) (= (type |uiop#0@@27|) DatatypeTypeType)) (= (type |key#0@@39|) (SeqType BoxType))) (or (|AsyncMapSpec.__default.QueryBegin#canCall| |s#0@@59| |s'#0@@27| |uiop#0@@27| |key#0@@39|) (and (and (and ($Is |s#0@@59| Tclass.AsyncMapSpec.Variables) ($Is |s'#0@@27| Tclass.AsyncMapSpec.Variables)) ($Is |uiop#0@@27| Tclass.UI.Op)) ($Is |key#0@@39| Tclass.KeyType.Key)))) (and (=> (UI.Op.GetBeginOp_q |uiop#0@@27|) (=> (|Seq#Equal| (UI.Op.key |uiop#0@@27|) |key#0@@39|) (and (and (and (|$IsA#MapSpec.Variables| (AsyncMapSpec.Variables.dict |s'#0@@27|)) (|$IsA#MapSpec.Variables| (AsyncMapSpec.Variables.dict |s#0@@59|))) (and (AsyncMapSpec.Variables.Variables_q |s'#0@@27|) (AsyncMapSpec.Variables.Variables_q |s#0@@59|))) (=> (|MapSpec.Variables#Equal| (AsyncMapSpec.Variables.dict |s'#0@@27|) (AsyncMapSpec.Variables.dict |s#0@@59|)) (and (AsyncMapSpec.Variables.Variables_q |s#0@@59|) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncMapSpec.Variables.queries |s#0@@59|)) ($Box (int_2_U (UI.Op.id |uiop#0@@27|)))))) (and (and (AsyncMapSpec.Variables.Variables_q |s#0@@59|) (|MapSpec.__default.WF#canCall| (AsyncMapSpec.Variables.dict |s#0@@59|))) (=> (MapSpec.__default.WF (AsyncMapSpec.Variables.dict |s#0@@59|)) (and (AsyncMapSpec.Variables.Variables_q |s'#0@@27|) (and (AsyncMapSpec.Variables.Variables_q |s#0@@59|) (and (AsyncMapSpec.Variables.Variables_q |s#0@@59|) (MapSpec.Variables.Variables_q (AsyncMapSpec.Variables.dict |s#0@@59|))))))))))))) (= (AsyncMapSpec.__default.QueryBegin |s#0@@59| |s'#0@@27| |uiop#0@@27| |key#0@@39|)  (and (and (and (and (and (UI.Op.GetBeginOp_q |uiop#0@@27|) (|Seq#Equal| (UI.Op.key |uiop#0@@27|) |key#0@@39|)) (|MapSpec.Variables#Equal| (AsyncMapSpec.Variables.dict |s'#0@@27|) (AsyncMapSpec.Variables.dict |s#0@@59|))) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncMapSpec.Variables.queries |s#0@@59|)) ($Box (int_2_U (UI.Op.id |uiop#0@@27|))))))) (MapSpec.__default.WF (AsyncMapSpec.Variables.dict |s#0@@59|))) (|Map#Equal| (AsyncMapSpec.Variables.queries |s'#0@@27|) (|Map#Build| (AsyncMapSpec.Variables.queries |s#0@@59|) ($Box (int_2_U (UI.Op.id |uiop#0@@27|))) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view (AsyncMapSpec.Variables.dict |s#0@@59|))) ($Box |key#0@@39|)))))))) :qid |AsyncMapidfy.33:24| :skolemid |2689| :pattern ( (AsyncMapSpec.__default.QueryBegin |s#0@@59| |s'#0@@27| |uiop#0@@27| |key#0@@39|)) ))))
(assert  (=> true (forall ((|s#0@@60| T@U) (|s'#0@@28| T@U) (|uiop#0@@28| T@U) (|key#0@@40| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@60|) DatatypeTypeType) (= (type |s'#0@@28|) DatatypeTypeType)) (= (type |uiop#0@@28|) DatatypeTypeType)) (= (type |key#0@@40|) (SeqType BoxType))) (or (|AsyncMapSpec.__default.QueryBegin#canCall| (Lit |s#0@@60|) (Lit |s'#0@@28|) (Lit |uiop#0@@28|) (Lit |key#0@@40|)) (and (and (and ($Is |s#0@@60| Tclass.AsyncMapSpec.Variables) ($Is |s'#0@@28| Tclass.AsyncMapSpec.Variables)) ($Is |uiop#0@@28| Tclass.UI.Op)) ($Is |key#0@@40| Tclass.KeyType.Key)))) (and (=> (U_2_bool (Lit (bool_2_U (UI.Op.GetBeginOp_q (Lit |uiop#0@@28|))))) (=> (|Seq#Equal| (UI.Op.key (Lit |uiop#0@@28|)) |key#0@@40|) (and (and (and (|$IsA#MapSpec.Variables| (Lit (AsyncMapSpec.Variables.dict (Lit |s'#0@@28|)))) (|$IsA#MapSpec.Variables| (Lit (AsyncMapSpec.Variables.dict (Lit |s#0@@60|))))) (and (AsyncMapSpec.Variables.Variables_q (Lit |s'#0@@28|)) (AsyncMapSpec.Variables.Variables_q (Lit |s#0@@60|)))) (=> (|MapSpec.Variables#Equal| (AsyncMapSpec.Variables.dict (Lit |s'#0@@28|)) (AsyncMapSpec.Variables.dict (Lit |s#0@@60|))) (and (AsyncMapSpec.Variables.Variables_q (Lit |s#0@@60|)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncMapSpec.Variables.queries (Lit |s#0@@60|))) ($Box (int_2_U (UI.Op.id (Lit |uiop#0@@28|))))))) (and (and (AsyncMapSpec.Variables.Variables_q (Lit |s#0@@60|)) (|MapSpec.__default.WF#canCall| (Lit (AsyncMapSpec.Variables.dict (Lit |s#0@@60|))))) (=> (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit (AsyncMapSpec.Variables.dict (Lit |s#0@@60|))))))) (and (AsyncMapSpec.Variables.Variables_q (Lit |s'#0@@28|)) (and (AsyncMapSpec.Variables.Variables_q (Lit |s#0@@60|)) (and (AsyncMapSpec.Variables.Variables_q (Lit |s#0@@60|)) (MapSpec.Variables.Variables_q (Lit (AsyncMapSpec.Variables.dict (Lit |s#0@@60|))))))))))))))) (= (AsyncMapSpec.__default.QueryBegin (Lit |s#0@@60|) (Lit |s'#0@@28|) (Lit |uiop#0@@28|) (Lit |key#0@@40|))  (and (and (and (and (and (UI.Op.GetBeginOp_q (Lit |uiop#0@@28|)) (|Seq#Equal| (UI.Op.key (Lit |uiop#0@@28|)) |key#0@@40|)) (|MapSpec.Variables#Equal| (AsyncMapSpec.Variables.dict (Lit |s'#0@@28|)) (AsyncMapSpec.Variables.dict (Lit |s#0@@60|)))) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncMapSpec.Variables.queries (Lit |s#0@@60|))) ($Box (int_2_U (UI.Op.id (Lit |uiop#0@@28|)))))))) (MapSpec.__default.WF (Lit (AsyncMapSpec.Variables.dict (Lit |s#0@@60|))))) (|Map#Equal| (AsyncMapSpec.Variables.queries (Lit |s'#0@@28|)) (|Map#Build| (Lit (AsyncMapSpec.Variables.queries (Lit |s#0@@60|))) ($Box (int_2_U (LitInt (UI.Op.id (Lit |uiop#0@@28|))))) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit (AsyncMapSpec.Variables.dict (Lit |s#0@@60|)))))) ($Box (Lit |key#0@@40|))))))))) :qid |AsyncMapidfy.33:24| :weight 3 :skolemid |2690| :pattern ( (AsyncMapSpec.__default.QueryBegin (Lit |s#0@@60|) (Lit |s'#0@@28|) (Lit |uiop#0@@28|) (Lit |key#0@@40|))) ))))
(assert  (=> true (forall ((|s#0@@61| T@U) (|s'#0@@29| T@U) (|uiop#0@@29| T@U) (|result#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@61|) DatatypeTypeType) (= (type |s'#0@@29|) DatatypeTypeType)) (= (type |uiop#0@@29|) DatatypeTypeType)) (= (type |result#0@@5|) (SeqType BoxType))) (or (|AsyncMapSpec.__default.QueryEnd#canCall| |s#0@@61| |s'#0@@29| |uiop#0@@29| |result#0@@5|) (and (and (and ($Is |s#0@@61| Tclass.AsyncMapSpec.Variables) ($Is |s'#0@@29| Tclass.AsyncMapSpec.Variables)) ($Is |uiop#0@@29| Tclass.UI.Op)) ($Is |result#0@@5| Tclass.ValueType.Value)))) true) :qid |AsyncMapidfy.43:22| :skolemid |2691| :pattern ( (AsyncMapSpec.__default.QueryEnd |s#0@@61| |s'#0@@29| |uiop#0@@29| |result#0@@5|)) ))))
(assert (forall ((|s#0@@62| T@U) (|s'#0@@30| T@U) (|uiop#0@@30| T@U) (|result#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@62|) DatatypeTypeType) (= (type |s'#0@@30|) DatatypeTypeType)) (= (type |uiop#0@@30|) DatatypeTypeType)) (= (type |result#0@@6|) (SeqType BoxType))) (and (and (and ($Is |s#0@@62| Tclass.AsyncMapSpec.Variables) ($Is |s'#0@@30| Tclass.AsyncMapSpec.Variables)) ($Is |uiop#0@@30| Tclass.UI.Op)) ($Is |result#0@@6| Tclass.ValueType.Value))) (= (|AsyncMapSpec.__default.QueryEnd#requires| |s#0@@62| |s'#0@@30| |uiop#0@@30| |result#0@@6|) true)) :qid |AsyncMapidfy.43:22| :skolemid |2692| :pattern ( (|AsyncMapSpec.__default.QueryEnd#requires| |s#0@@62| |s'#0@@30| |uiop#0@@30| |result#0@@6|)) )))
(assert  (=> true (forall ((|s#0@@63| T@U) (|s'#0@@31| T@U) (|uiop#0@@31| T@U) (|result#0@@7| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@63|) DatatypeTypeType) (= (type |s'#0@@31|) DatatypeTypeType)) (= (type |uiop#0@@31|) DatatypeTypeType)) (= (type |result#0@@7|) (SeqType BoxType))) (or (|AsyncMapSpec.__default.QueryEnd#canCall| |s#0@@63| |s'#0@@31| |uiop#0@@31| |result#0@@7|) (and (and (and ($Is |s#0@@63| Tclass.AsyncMapSpec.Variables) ($Is |s'#0@@31| Tclass.AsyncMapSpec.Variables)) ($Is |uiop#0@@31| Tclass.UI.Op)) ($Is |result#0@@7| Tclass.ValueType.Value)))) (and (=> (UI.Op.GetEndOp_q |uiop#0@@31|) (=> (= (UI.Op.value |uiop#0@@31|) |result#0@@7|) (and (and (and (|$IsA#MapSpec.Variables| (AsyncMapSpec.Variables.dict |s'#0@@31|)) (|$IsA#MapSpec.Variables| (AsyncMapSpec.Variables.dict |s#0@@63|))) (and (AsyncMapSpec.Variables.Variables_q |s'#0@@31|) (AsyncMapSpec.Variables.Variables_q |s#0@@63|))) (=> (|MapSpec.Variables#Equal| (AsyncMapSpec.Variables.dict |s'#0@@31|) (AsyncMapSpec.Variables.dict |s#0@@63|)) (and (AsyncMapSpec.Variables.Variables_q |s#0@@63|) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncMapSpec.Variables.queries |s#0@@63|)) ($Box (int_2_U (UI.Op.id |uiop#0@@31|))))) (and (and (AsyncMapSpec.Variables.Variables_q |s'#0@@31|) (and (AsyncMapSpec.Variables.Variables_q |s#0@@63|) (|Maps.__default.MapRemove1#canCall| TInt Tclass.ValueType.Value (AsyncMapSpec.Variables.queries |s#0@@63|) ($Box (int_2_U (UI.Op.id |uiop#0@@31|)))))) (=> (|Map#Equal| (AsyncMapSpec.Variables.queries |s'#0@@31|) (Maps.__default.MapRemove1 TInt Tclass.ValueType.Value (AsyncMapSpec.Variables.queries |s#0@@63|) ($Box (int_2_U (UI.Op.id |uiop#0@@31|))))) (AsyncMapSpec.Variables.Variables_q |s#0@@63|))))))))) (= (AsyncMapSpec.__default.QueryEnd |s#0@@63| |s'#0@@31| |uiop#0@@31| |result#0@@7|)  (and (and (and (and (and (UI.Op.GetEndOp_q |uiop#0@@31|) (= (UI.Op.value |uiop#0@@31|) |result#0@@7|)) (|MapSpec.Variables#Equal| (AsyncMapSpec.Variables.dict |s'#0@@31|) (AsyncMapSpec.Variables.dict |s#0@@63|))) (U_2_bool (MapType0Select (|Map#Domain| (AsyncMapSpec.Variables.queries |s#0@@63|)) ($Box (int_2_U (UI.Op.id |uiop#0@@31|)))))) (|Map#Equal| (AsyncMapSpec.Variables.queries |s'#0@@31|) (Maps.__default.MapRemove1 TInt Tclass.ValueType.Value (AsyncMapSpec.Variables.queries |s#0@@63|) ($Box (int_2_U (UI.Op.id |uiop#0@@31|)))))) (= |result#0@@7| ($Unbox (SeqType BoxType) (MapType0Select (|Map#Elements| (AsyncMapSpec.Variables.queries |s#0@@63|)) ($Box (int_2_U (UI.Op.id |uiop#0@@31|)))))))))) :qid |AsyncMapidfy.43:22| :skolemid |2693| :pattern ( (AsyncMapSpec.__default.QueryEnd |s#0@@63| |s'#0@@31| |uiop#0@@31| |result#0@@7|)) ))))
(assert  (=> true (forall ((|s#0@@64| T@U) (|s'#0@@32| T@U) (|uiop#0@@32| T@U) (|result#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@64|) DatatypeTypeType) (= (type |s'#0@@32|) DatatypeTypeType)) (= (type |uiop#0@@32|) DatatypeTypeType)) (= (type |result#0@@8|) (SeqType BoxType))) (or (|AsyncMapSpec.__default.QueryEnd#canCall| (Lit |s#0@@64|) (Lit |s'#0@@32|) (Lit |uiop#0@@32|) |result#0@@8|) (and (and (and ($Is |s#0@@64| Tclass.AsyncMapSpec.Variables) ($Is |s'#0@@32| Tclass.AsyncMapSpec.Variables)) ($Is |uiop#0@@32| Tclass.UI.Op)) ($Is |result#0@@8| Tclass.ValueType.Value)))) (and (=> (U_2_bool (Lit (bool_2_U (UI.Op.GetEndOp_q (Lit |uiop#0@@32|))))) (=> (= (Lit (UI.Op.value (Lit |uiop#0@@32|))) |result#0@@8|) (and (and (and (|$IsA#MapSpec.Variables| (Lit (AsyncMapSpec.Variables.dict (Lit |s'#0@@32|)))) (|$IsA#MapSpec.Variables| (Lit (AsyncMapSpec.Variables.dict (Lit |s#0@@64|))))) (and (AsyncMapSpec.Variables.Variables_q (Lit |s'#0@@32|)) (AsyncMapSpec.Variables.Variables_q (Lit |s#0@@64|)))) (=> (|MapSpec.Variables#Equal| (AsyncMapSpec.Variables.dict (Lit |s'#0@@32|)) (AsyncMapSpec.Variables.dict (Lit |s#0@@64|))) (and (AsyncMapSpec.Variables.Variables_q (Lit |s#0@@64|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncMapSpec.Variables.queries (Lit |s#0@@64|))) ($Box (int_2_U (UI.Op.id (Lit |uiop#0@@32|)))))) (and (and (AsyncMapSpec.Variables.Variables_q (Lit |s'#0@@32|)) (and (AsyncMapSpec.Variables.Variables_q (Lit |s#0@@64|)) (|Maps.__default.MapRemove1#canCall| TInt Tclass.ValueType.Value (Lit (AsyncMapSpec.Variables.queries (Lit |s#0@@64|))) ($Box (int_2_U (LitInt (UI.Op.id (Lit |uiop#0@@32|)))))))) (=> (|Map#Equal| (AsyncMapSpec.Variables.queries (Lit |s'#0@@32|)) (Maps.__default.MapRemove1 TInt Tclass.ValueType.Value (Lit (AsyncMapSpec.Variables.queries (Lit |s#0@@64|))) ($Box (int_2_U (LitInt (UI.Op.id (Lit |uiop#0@@32|))))))) (AsyncMapSpec.Variables.Variables_q (Lit |s#0@@64|)))))))))) (= (AsyncMapSpec.__default.QueryEnd (Lit |s#0@@64|) (Lit |s'#0@@32|) (Lit |uiop#0@@32|) |result#0@@8|)  (and (and (and (and (and (UI.Op.GetEndOp_q (Lit |uiop#0@@32|)) (= (Lit (UI.Op.value (Lit |uiop#0@@32|))) |result#0@@8|)) (|MapSpec.Variables#Equal| (AsyncMapSpec.Variables.dict (Lit |s'#0@@32|)) (AsyncMapSpec.Variables.dict (Lit |s#0@@64|)))) (U_2_bool (MapType0Select (|Map#Domain| (AsyncMapSpec.Variables.queries (Lit |s#0@@64|))) ($Box (int_2_U (UI.Op.id (Lit |uiop#0@@32|))))))) (|Map#Equal| (AsyncMapSpec.Variables.queries (Lit |s'#0@@32|)) (Maps.__default.MapRemove1 TInt Tclass.ValueType.Value (Lit (AsyncMapSpec.Variables.queries (Lit |s#0@@64|))) ($Box (int_2_U (LitInt (UI.Op.id (Lit |uiop#0@@32|)))))))) (= |result#0@@8| ($Unbox (SeqType BoxType) (MapType0Select (|Map#Elements| (Lit (AsyncMapSpec.Variables.queries (Lit |s#0@@64|)))) ($Box (int_2_U (LitInt (UI.Op.id (Lit |uiop#0@@32|)))))))))))) :qid |AsyncMapidfy.43:22| :weight 3 :skolemid |2694| :pattern ( (AsyncMapSpec.__default.QueryEnd (Lit |s#0@@64|) (Lit |s'#0@@32|) (Lit |uiop#0@@32|) |result#0@@8|)) ))))
(assert  (=> true (forall ((|s#0@@65| T@U) (|s'#0@@33| T@U) (|uiop#0@@33| T@U) (|result#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@65|) DatatypeTypeType) (= (type |s'#0@@33|) DatatypeTypeType)) (= (type |uiop#0@@33|) DatatypeTypeType)) (= (type |result#0@@9|) (SeqType BoxType))) (or (|AsyncMapSpec.__default.QueryEnd#canCall| (Lit |s#0@@65|) (Lit |s'#0@@33|) (Lit |uiop#0@@33|) (Lit |result#0@@9|)) (and (and (and ($Is |s#0@@65| Tclass.AsyncMapSpec.Variables) ($Is |s'#0@@33| Tclass.AsyncMapSpec.Variables)) ($Is |uiop#0@@33| Tclass.UI.Op)) ($Is |result#0@@9| Tclass.ValueType.Value)))) (and (=> (U_2_bool (Lit (bool_2_U (UI.Op.GetEndOp_q (Lit |uiop#0@@33|))))) (=> (= (Lit (UI.Op.value (Lit |uiop#0@@33|))) (Lit |result#0@@9|)) (and (and (and (|$IsA#MapSpec.Variables| (Lit (AsyncMapSpec.Variables.dict (Lit |s'#0@@33|)))) (|$IsA#MapSpec.Variables| (Lit (AsyncMapSpec.Variables.dict (Lit |s#0@@65|))))) (and (AsyncMapSpec.Variables.Variables_q (Lit |s'#0@@33|)) (AsyncMapSpec.Variables.Variables_q (Lit |s#0@@65|)))) (=> (|MapSpec.Variables#Equal| (AsyncMapSpec.Variables.dict (Lit |s'#0@@33|)) (AsyncMapSpec.Variables.dict (Lit |s#0@@65|))) (and (AsyncMapSpec.Variables.Variables_q (Lit |s#0@@65|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncMapSpec.Variables.queries (Lit |s#0@@65|))) ($Box (int_2_U (UI.Op.id (Lit |uiop#0@@33|)))))) (and (and (AsyncMapSpec.Variables.Variables_q (Lit |s'#0@@33|)) (and (AsyncMapSpec.Variables.Variables_q (Lit |s#0@@65|)) (|Maps.__default.MapRemove1#canCall| TInt Tclass.ValueType.Value (Lit (AsyncMapSpec.Variables.queries (Lit |s#0@@65|))) ($Box (int_2_U (LitInt (UI.Op.id (Lit |uiop#0@@33|)))))))) (=> (|Map#Equal| (AsyncMapSpec.Variables.queries (Lit |s'#0@@33|)) (Maps.__default.MapRemove1 TInt Tclass.ValueType.Value (Lit (AsyncMapSpec.Variables.queries (Lit |s#0@@65|))) ($Box (int_2_U (LitInt (UI.Op.id (Lit |uiop#0@@33|))))))) (AsyncMapSpec.Variables.Variables_q (Lit |s#0@@65|)))))))))) (= (AsyncMapSpec.__default.QueryEnd (Lit |s#0@@65|) (Lit |s'#0@@33|) (Lit |uiop#0@@33|) (Lit |result#0@@9|))  (and (and (and (and (and (UI.Op.GetEndOp_q (Lit |uiop#0@@33|)) (= (Lit (UI.Op.value (Lit |uiop#0@@33|))) (Lit |result#0@@9|))) (|MapSpec.Variables#Equal| (AsyncMapSpec.Variables.dict (Lit |s'#0@@33|)) (AsyncMapSpec.Variables.dict (Lit |s#0@@65|)))) (U_2_bool (MapType0Select (|Map#Domain| (AsyncMapSpec.Variables.queries (Lit |s#0@@65|))) ($Box (int_2_U (UI.Op.id (Lit |uiop#0@@33|))))))) (|Map#Equal| (AsyncMapSpec.Variables.queries (Lit |s'#0@@33|)) (Maps.__default.MapRemove1 TInt Tclass.ValueType.Value (Lit (AsyncMapSpec.Variables.queries (Lit |s#0@@65|))) ($Box (int_2_U (LitInt (UI.Op.id (Lit |uiop#0@@33|)))))))) (= (Lit |result#0@@9|) ($Unbox (SeqType BoxType) (MapType0Select (|Map#Elements| (Lit (AsyncMapSpec.Variables.queries (Lit |s#0@@65|)))) ($Box (int_2_U (LitInt (UI.Op.id (Lit |uiop#0@@33|)))))))))))) :qid |AsyncMapidfy.43:22| :weight 3 :skolemid |2695| :pattern ( (AsyncMapSpec.__default.QueryEnd (Lit |s#0@@65|) (Lit |s'#0@@33|) (Lit |uiop#0@@33|) (Lit |result#0@@9|))) ))))
(assert  (=> true (forall ((|s#0@@66| T@U) (|s'#0@@34| T@U) (|uiop#0@@34| T@U) (|key#0@@41| T@U) (|result#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@66|) DatatypeTypeType) (= (type |s'#0@@34|) DatatypeTypeType)) (= (type |uiop#0@@34|) DatatypeTypeType)) (= (type |key#0@@41|) (SeqType BoxType))) (= (type |result#0@@10|) (SeqType BoxType))) (or (|AsyncMapSpec.__default.Query#canCall| |s#0@@66| |s'#0@@34| |uiop#0@@34| |key#0@@41| |result#0@@10|) (and (and (and (and ($Is |s#0@@66| Tclass.AsyncMapSpec.Variables) ($Is |s'#0@@34| Tclass.AsyncMapSpec.Variables)) ($Is |uiop#0@@34| Tclass.UI.Op)) ($Is |key#0@@41| Tclass.KeyType.Key)) ($Is |result#0@@10| Tclass.ValueType.Value)))) true) :qid |AsyncMapidfy.53:19| :skolemid |2696| :pattern ( (AsyncMapSpec.__default.Query |s#0@@66| |s'#0@@34| |uiop#0@@34| |key#0@@41| |result#0@@10|)) ))))
(assert (forall ((|s#0@@67| T@U) (|s'#0@@35| T@U) (|uiop#0@@35| T@U) (|key#0@@42| T@U) (|result#0@@11| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@67|) DatatypeTypeType) (= (type |s'#0@@35|) DatatypeTypeType)) (= (type |uiop#0@@35|) DatatypeTypeType)) (= (type |key#0@@42|) (SeqType BoxType))) (= (type |result#0@@11|) (SeqType BoxType))) (and (and (and (and ($Is |s#0@@67| Tclass.AsyncMapSpec.Variables) ($Is |s'#0@@35| Tclass.AsyncMapSpec.Variables)) ($Is |uiop#0@@35| Tclass.UI.Op)) ($Is |key#0@@42| Tclass.KeyType.Key)) ($Is |result#0@@11| Tclass.ValueType.Value))) (= (|AsyncMapSpec.__default.Query#requires| |s#0@@67| |s'#0@@35| |uiop#0@@35| |key#0@@42| |result#0@@11|) true)) :qid |AsyncMapidfy.53:19| :skolemid |2697| :pattern ( (|AsyncMapSpec.__default.Query#requires| |s#0@@67| |s'#0@@35| |uiop#0@@35| |key#0@@42| |result#0@@11|)) )))
(assert  (=> true (forall ((|s#0@@68| T@U) (|s'#0@@36| T@U) (|uiop#0@@36| T@U) (|key#0@@43| T@U) (|result#0@@12| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@68|) DatatypeTypeType) (= (type |s'#0@@36|) DatatypeTypeType)) (= (type |uiop#0@@36|) DatatypeTypeType)) (= (type |key#0@@43|) (SeqType BoxType))) (= (type |result#0@@12|) (SeqType BoxType))) (or (|AsyncMapSpec.__default.Query#canCall| |s#0@@68| |s'#0@@36| |uiop#0@@36| |key#0@@43| |result#0@@12|) (and (and (and (and ($Is |s#0@@68| Tclass.AsyncMapSpec.Variables) ($Is |s'#0@@36| Tclass.AsyncMapSpec.Variables)) ($Is |uiop#0@@36| Tclass.UI.Op)) ($Is |key#0@@43| Tclass.KeyType.Key)) ($Is |result#0@@12| Tclass.ValueType.Value)))) (and (and (and (AsyncMapSpec.Variables.Variables_q |s'#0@@36|) (AsyncMapSpec.Variables.Variables_q |s#0@@68|)) (=> (|Map#Equal| (AsyncMapSpec.Variables.queries |s'#0@@36|) (AsyncMapSpec.Variables.queries |s#0@@68|)) (and (and (AsyncMapSpec.Variables.Variables_q |s#0@@68|) (AsyncMapSpec.Variables.Variables_q |s'#0@@36|)) (|MapSpec.__default.Query#canCall| (AsyncMapSpec.Variables.dict |s#0@@68|) (AsyncMapSpec.Variables.dict |s'#0@@36|) |uiop#0@@36| |key#0@@43| |result#0@@12|)))) (= (AsyncMapSpec.__default.Query |s#0@@68| |s'#0@@36| |uiop#0@@36| |key#0@@43| |result#0@@12|)  (and (|Map#Equal| (AsyncMapSpec.Variables.queries |s'#0@@36|) (AsyncMapSpec.Variables.queries |s#0@@68|)) (MapSpec.__default.Query (AsyncMapSpec.Variables.dict |s#0@@68|) (AsyncMapSpec.Variables.dict |s'#0@@36|) |uiop#0@@36| |key#0@@43| |result#0@@12|))))) :qid |AsyncMapidfy.53:19| :skolemid |2698| :pattern ( (AsyncMapSpec.__default.Query |s#0@@68| |s'#0@@36| |uiop#0@@36| |key#0@@43| |result#0@@12|)) ))))
(assert  (=> true (forall ((|s#0@@69| T@U) (|s'#0@@37| T@U) (|uiop#0@@37| T@U) (|key#0@@44| T@U) (|result#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@69|) DatatypeTypeType) (= (type |s'#0@@37|) DatatypeTypeType)) (= (type |uiop#0@@37|) DatatypeTypeType)) (= (type |key#0@@44|) (SeqType BoxType))) (= (type |result#0@@13|) (SeqType BoxType))) (or (|AsyncMapSpec.__default.Query#canCall| (Lit |s#0@@69|) (Lit |s'#0@@37|) (Lit |uiop#0@@37|) (Lit |key#0@@44|) |result#0@@13|) (and (and (and (and ($Is |s#0@@69| Tclass.AsyncMapSpec.Variables) ($Is |s'#0@@37| Tclass.AsyncMapSpec.Variables)) ($Is |uiop#0@@37| Tclass.UI.Op)) ($Is |key#0@@44| Tclass.KeyType.Key)) ($Is |result#0@@13| Tclass.ValueType.Value)))) (and (and (and (AsyncMapSpec.Variables.Variables_q (Lit |s'#0@@37|)) (AsyncMapSpec.Variables.Variables_q (Lit |s#0@@69|))) (=> (|Map#Equal| (AsyncMapSpec.Variables.queries (Lit |s'#0@@37|)) (AsyncMapSpec.Variables.queries (Lit |s#0@@69|))) (and (and (AsyncMapSpec.Variables.Variables_q (Lit |s#0@@69|)) (AsyncMapSpec.Variables.Variables_q (Lit |s'#0@@37|))) (|MapSpec.__default.Query#canCall| (Lit (AsyncMapSpec.Variables.dict (Lit |s#0@@69|))) (Lit (AsyncMapSpec.Variables.dict (Lit |s'#0@@37|))) (Lit |uiop#0@@37|) (Lit |key#0@@44|) |result#0@@13|)))) (= (AsyncMapSpec.__default.Query (Lit |s#0@@69|) (Lit |s'#0@@37|) (Lit |uiop#0@@37|) (Lit |key#0@@44|) |result#0@@13|)  (and (|Map#Equal| (AsyncMapSpec.Variables.queries (Lit |s'#0@@37|)) (AsyncMapSpec.Variables.queries (Lit |s#0@@69|))) (MapSpec.__default.Query (Lit (AsyncMapSpec.Variables.dict (Lit |s#0@@69|))) (Lit (AsyncMapSpec.Variables.dict (Lit |s'#0@@37|))) (Lit |uiop#0@@37|) (Lit |key#0@@44|) |result#0@@13|))))) :qid |AsyncMapidfy.53:19| :weight 3 :skolemid |2699| :pattern ( (AsyncMapSpec.__default.Query (Lit |s#0@@69|) (Lit |s'#0@@37|) (Lit |uiop#0@@37|) (Lit |key#0@@44|) |result#0@@13|)) ))))
(assert  (=> true (forall ((|s#0@@70| T@U) (|s'#0@@38| T@U) (|uiop#0@@38| T@U) (|key#0@@45| T@U) (|result#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@70|) DatatypeTypeType) (= (type |s'#0@@38|) DatatypeTypeType)) (= (type |uiop#0@@38|) DatatypeTypeType)) (= (type |key#0@@45|) (SeqType BoxType))) (= (type |result#0@@14|) (SeqType BoxType))) (or (|AsyncMapSpec.__default.Query#canCall| (Lit |s#0@@70|) (Lit |s'#0@@38|) (Lit |uiop#0@@38|) (Lit |key#0@@45|) (Lit |result#0@@14|)) (and (and (and (and ($Is |s#0@@70| Tclass.AsyncMapSpec.Variables) ($Is |s'#0@@38| Tclass.AsyncMapSpec.Variables)) ($Is |uiop#0@@38| Tclass.UI.Op)) ($Is |key#0@@45| Tclass.KeyType.Key)) ($Is |result#0@@14| Tclass.ValueType.Value)))) (and (and (and (AsyncMapSpec.Variables.Variables_q (Lit |s'#0@@38|)) (AsyncMapSpec.Variables.Variables_q (Lit |s#0@@70|))) (=> (|Map#Equal| (AsyncMapSpec.Variables.queries (Lit |s'#0@@38|)) (AsyncMapSpec.Variables.queries (Lit |s#0@@70|))) (and (and (AsyncMapSpec.Variables.Variables_q (Lit |s#0@@70|)) (AsyncMapSpec.Variables.Variables_q (Lit |s'#0@@38|))) (|MapSpec.__default.Query#canCall| (Lit (AsyncMapSpec.Variables.dict (Lit |s#0@@70|))) (Lit (AsyncMapSpec.Variables.dict (Lit |s'#0@@38|))) (Lit |uiop#0@@38|) (Lit |key#0@@45|) (Lit |result#0@@14|))))) (= (AsyncMapSpec.__default.Query (Lit |s#0@@70|) (Lit |s'#0@@38|) (Lit |uiop#0@@38|) (Lit |key#0@@45|) (Lit |result#0@@14|))  (and (|Map#Equal| (AsyncMapSpec.Variables.queries (Lit |s'#0@@38|)) (AsyncMapSpec.Variables.queries (Lit |s#0@@70|))) (MapSpec.__default.Query (Lit (AsyncMapSpec.Variables.dict (Lit |s#0@@70|))) (Lit (AsyncMapSpec.Variables.dict (Lit |s'#0@@38|))) (Lit |uiop#0@@38|) (Lit |key#0@@45|) (Lit |result#0@@14|)))))) :qid |AsyncMapidfy.53:19| :weight 3 :skolemid |2700| :pattern ( (AsyncMapSpec.__default.Query (Lit |s#0@@70|) (Lit |s'#0@@38|) (Lit |uiop#0@@38|) (Lit |key#0@@45|) (Lit |result#0@@14|))) ))))
(assert  (=> true (forall ((|s#0@@71| T@U) (|s'#0@@39| T@U) (|uiop#0@@39| T@U) (|key#0@@46| T@U) (|new_value#0@@5| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@71|) DatatypeTypeType) (= (type |s'#0@@39|) DatatypeTypeType)) (= (type |uiop#0@@39|) DatatypeTypeType)) (= (type |key#0@@46|) (SeqType BoxType))) (= (type |new_value#0@@5|) (SeqType BoxType))) (or (|AsyncMapSpec.__default.Write#canCall| |s#0@@71| |s'#0@@39| |uiop#0@@39| |key#0@@46| |new_value#0@@5|) (and (and (and (and ($Is |s#0@@71| Tclass.AsyncMapSpec.Variables) ($Is |s'#0@@39| Tclass.AsyncMapSpec.Variables)) ($Is |uiop#0@@39| Tclass.UI.Op)) ($Is |key#0@@46| Tclass.KeyType.Key)) ($Is |new_value#0@@5| Tclass.ValueType.Value)))) true) :qid |AsyncMapidfy.59:19| :skolemid |2701| :pattern ( (AsyncMapSpec.__default.Write |s#0@@71| |s'#0@@39| |uiop#0@@39| |key#0@@46| |new_value#0@@5|)) ))))
(assert (forall ((|s#0@@72| T@U) (|s'#0@@40| T@U) (|uiop#0@@40| T@U) (|key#0@@47| T@U) (|new_value#0@@6| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@72|) DatatypeTypeType) (= (type |s'#0@@40|) DatatypeTypeType)) (= (type |uiop#0@@40|) DatatypeTypeType)) (= (type |key#0@@47|) (SeqType BoxType))) (= (type |new_value#0@@6|) (SeqType BoxType))) (and (and (and (and ($Is |s#0@@72| Tclass.AsyncMapSpec.Variables) ($Is |s'#0@@40| Tclass.AsyncMapSpec.Variables)) ($Is |uiop#0@@40| Tclass.UI.Op)) ($Is |key#0@@47| Tclass.KeyType.Key)) ($Is |new_value#0@@6| Tclass.ValueType.Value))) (= (|AsyncMapSpec.__default.Write#requires| |s#0@@72| |s'#0@@40| |uiop#0@@40| |key#0@@47| |new_value#0@@6|) true)) :qid |AsyncMapidfy.59:19| :skolemid |2702| :pattern ( (|AsyncMapSpec.__default.Write#requires| |s#0@@72| |s'#0@@40| |uiop#0@@40| |key#0@@47| |new_value#0@@6|)) )))
(assert  (=> true (forall ((|s#0@@73| T@U) (|s'#0@@41| T@U) (|uiop#0@@41| T@U) (|key#0@@48| T@U) (|new_value#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@73|) DatatypeTypeType) (= (type |s'#0@@41|) DatatypeTypeType)) (= (type |uiop#0@@41|) DatatypeTypeType)) (= (type |key#0@@48|) (SeqType BoxType))) (= (type |new_value#0@@7|) (SeqType BoxType))) (or (|AsyncMapSpec.__default.Write#canCall| |s#0@@73| |s'#0@@41| |uiop#0@@41| |key#0@@48| |new_value#0@@7|) (and (and (and (and ($Is |s#0@@73| Tclass.AsyncMapSpec.Variables) ($Is |s'#0@@41| Tclass.AsyncMapSpec.Variables)) ($Is |uiop#0@@41| Tclass.UI.Op)) ($Is |key#0@@48| Tclass.KeyType.Key)) ($Is |new_value#0@@7| Tclass.ValueType.Value)))) (and (and (and (AsyncMapSpec.Variables.Variables_q |s'#0@@41|) (AsyncMapSpec.Variables.Variables_q |s#0@@73|)) (=> (|Map#Equal| (AsyncMapSpec.Variables.queries |s'#0@@41|) (AsyncMapSpec.Variables.queries |s#0@@73|)) (and (and (AsyncMapSpec.Variables.Variables_q |s#0@@73|) (AsyncMapSpec.Variables.Variables_q |s'#0@@41|)) (|MapSpec.__default.Write#canCall| (AsyncMapSpec.Variables.dict |s#0@@73|) (AsyncMapSpec.Variables.dict |s'#0@@41|) |uiop#0@@41| |key#0@@48| |new_value#0@@7|)))) (= (AsyncMapSpec.__default.Write |s#0@@73| |s'#0@@41| |uiop#0@@41| |key#0@@48| |new_value#0@@7|)  (and (|Map#Equal| (AsyncMapSpec.Variables.queries |s'#0@@41|) (AsyncMapSpec.Variables.queries |s#0@@73|)) (MapSpec.__default.Write (AsyncMapSpec.Variables.dict |s#0@@73|) (AsyncMapSpec.Variables.dict |s'#0@@41|) |uiop#0@@41| |key#0@@48| |new_value#0@@7|))))) :qid |AsyncMapidfy.59:19| :skolemid |2703| :pattern ( (AsyncMapSpec.__default.Write |s#0@@73| |s'#0@@41| |uiop#0@@41| |key#0@@48| |new_value#0@@7|)) ))))
(assert  (=> true (forall ((|s#0@@74| T@U) (|s'#0@@42| T@U) (|uiop#0@@42| T@U) (|key#0@@49| T@U) (|new_value#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@74|) DatatypeTypeType) (= (type |s'#0@@42|) DatatypeTypeType)) (= (type |uiop#0@@42|) DatatypeTypeType)) (= (type |key#0@@49|) (SeqType BoxType))) (= (type |new_value#0@@8|) (SeqType BoxType))) (or (|AsyncMapSpec.__default.Write#canCall| (Lit |s#0@@74|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|) (Lit |key#0@@49|) |new_value#0@@8|) (and (and (and (and ($Is |s#0@@74| Tclass.AsyncMapSpec.Variables) ($Is |s'#0@@42| Tclass.AsyncMapSpec.Variables)) ($Is |uiop#0@@42| Tclass.UI.Op)) ($Is |key#0@@49| Tclass.KeyType.Key)) ($Is |new_value#0@@8| Tclass.ValueType.Value)))) (and (and (and (AsyncMapSpec.Variables.Variables_q (Lit |s'#0@@42|)) (AsyncMapSpec.Variables.Variables_q (Lit |s#0@@74|))) (=> (|Map#Equal| (AsyncMapSpec.Variables.queries (Lit |s'#0@@42|)) (AsyncMapSpec.Variables.queries (Lit |s#0@@74|))) (and (and (AsyncMapSpec.Variables.Variables_q (Lit |s#0@@74|)) (AsyncMapSpec.Variables.Variables_q (Lit |s'#0@@42|))) (|MapSpec.__default.Write#canCall| (Lit (AsyncMapSpec.Variables.dict (Lit |s#0@@74|))) (Lit (AsyncMapSpec.Variables.dict (Lit |s'#0@@42|))) (Lit |uiop#0@@42|) (Lit |key#0@@49|) |new_value#0@@8|)))) (= (AsyncMapSpec.__default.Write (Lit |s#0@@74|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|) (Lit |key#0@@49|) |new_value#0@@8|)  (and (|Map#Equal| (AsyncMapSpec.Variables.queries (Lit |s'#0@@42|)) (AsyncMapSpec.Variables.queries (Lit |s#0@@74|))) (MapSpec.__default.Write (Lit (AsyncMapSpec.Variables.dict (Lit |s#0@@74|))) (Lit (AsyncMapSpec.Variables.dict (Lit |s'#0@@42|))) (Lit |uiop#0@@42|) (Lit |key#0@@49|) |new_value#0@@8|))))) :qid |AsyncMapidfy.59:19| :weight 3 :skolemid |2704| :pattern ( (AsyncMapSpec.__default.Write (Lit |s#0@@74|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|) (Lit |key#0@@49|) |new_value#0@@8|)) ))))
(assert  (=> true (forall ((|s#0@@75| T@U) (|s'#0@@43| T@U) (|uiop#0@@43| T@U) (|key#0@@50| T@U) (|new_value#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@75|) DatatypeTypeType) (= (type |s'#0@@43|) DatatypeTypeType)) (= (type |uiop#0@@43|) DatatypeTypeType)) (= (type |key#0@@50|) (SeqType BoxType))) (= (type |new_value#0@@9|) (SeqType BoxType))) (or (|AsyncMapSpec.__default.Write#canCall| (Lit |s#0@@75|) (Lit |s'#0@@43|) (Lit |uiop#0@@43|) (Lit |key#0@@50|) (Lit |new_value#0@@9|)) (and (and (and (and ($Is |s#0@@75| Tclass.AsyncMapSpec.Variables) ($Is |s'#0@@43| Tclass.AsyncMapSpec.Variables)) ($Is |uiop#0@@43| Tclass.UI.Op)) ($Is |key#0@@50| Tclass.KeyType.Key)) ($Is |new_value#0@@9| Tclass.ValueType.Value)))) (and (and (and (AsyncMapSpec.Variables.Variables_q (Lit |s'#0@@43|)) (AsyncMapSpec.Variables.Variables_q (Lit |s#0@@75|))) (=> (|Map#Equal| (AsyncMapSpec.Variables.queries (Lit |s'#0@@43|)) (AsyncMapSpec.Variables.queries (Lit |s#0@@75|))) (and (and (AsyncMapSpec.Variables.Variables_q (Lit |s#0@@75|)) (AsyncMapSpec.Variables.Variables_q (Lit |s'#0@@43|))) (|MapSpec.__default.Write#canCall| (Lit (AsyncMapSpec.Variables.dict (Lit |s#0@@75|))) (Lit (AsyncMapSpec.Variables.dict (Lit |s'#0@@43|))) (Lit |uiop#0@@43|) (Lit |key#0@@50|) (Lit |new_value#0@@9|))))) (= (AsyncMapSpec.__default.Write (Lit |s#0@@75|) (Lit |s'#0@@43|) (Lit |uiop#0@@43|) (Lit |key#0@@50|) (Lit |new_value#0@@9|))  (and (|Map#Equal| (AsyncMapSpec.Variables.queries (Lit |s'#0@@43|)) (AsyncMapSpec.Variables.queries (Lit |s#0@@75|))) (MapSpec.__default.Write (Lit (AsyncMapSpec.Variables.dict (Lit |s#0@@75|))) (Lit (AsyncMapSpec.Variables.dict (Lit |s'#0@@43|))) (Lit |uiop#0@@43|) (Lit |key#0@@50|) (Lit |new_value#0@@9|)))))) :qid |AsyncMapidfy.59:19| :weight 3 :skolemid |2705| :pattern ( (AsyncMapSpec.__default.Write (Lit |s#0@@75|) (Lit |s'#0@@43|) (Lit |uiop#0@@43|) (Lit |key#0@@50|) (Lit |new_value#0@@9|))) ))))
(assert  (=> true (forall ((|s#0@@76| T@U) (|s'#0@@44| T@U) (|uiop#0@@44| T@U) (|start#0@@16| T@U) (|results#0@@4| T@U) (|end#0@@16| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |s#0@@76|) DatatypeTypeType) (= (type |s'#0@@44|) DatatypeTypeType)) (= (type |uiop#0@@44|) DatatypeTypeType)) (= (type |start#0@@16|) DatatypeTypeType)) (= (type |results#0@@4|) (SeqType BoxType))) (= (type |end#0@@16|) DatatypeTypeType)) (or (|AsyncMapSpec.__default.Succ#canCall| |s#0@@76| |s'#0@@44| |uiop#0@@44| |start#0@@16| |results#0@@4| |end#0@@16|) (and (and (and (and (and ($Is |s#0@@76| Tclass.AsyncMapSpec.Variables) ($Is |s'#0@@44| Tclass.AsyncMapSpec.Variables)) ($Is |uiop#0@@44| Tclass.UI.Op)) ($Is |start#0@@16| Tclass.UI.RangeStart)) ($Is |results#0@@4| (TSeq Tclass.UI.SuccResult))) ($Is |end#0@@16| Tclass.UI.RangeEnd)))) true) :qid |AsyncMapidfy.65:18| :skolemid |2706| :pattern ( (AsyncMapSpec.__default.Succ |s#0@@76| |s'#0@@44| |uiop#0@@44| |start#0@@16| |results#0@@4| |end#0@@16|)) ))))
(assert (forall ((|s#0@@77| T@U) (|s'#0@@45| T@U) (|uiop#0@@45| T@U) (|start#0@@17| T@U) (|results#0@@5| T@U) (|end#0@@17| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |s#0@@77|) DatatypeTypeType) (= (type |s'#0@@45|) DatatypeTypeType)) (= (type |uiop#0@@45|) DatatypeTypeType)) (= (type |start#0@@17|) DatatypeTypeType)) (= (type |results#0@@5|) (SeqType BoxType))) (= (type |end#0@@17|) DatatypeTypeType)) (and (and (and (and (and ($Is |s#0@@77| Tclass.AsyncMapSpec.Variables) ($Is |s'#0@@45| Tclass.AsyncMapSpec.Variables)) ($Is |uiop#0@@45| Tclass.UI.Op)) ($Is |start#0@@17| Tclass.UI.RangeStart)) ($Is |results#0@@5| (TSeq Tclass.UI.SuccResult))) ($Is |end#0@@17| Tclass.UI.RangeEnd))) (= (|AsyncMapSpec.__default.Succ#requires| |s#0@@77| |s'#0@@45| |uiop#0@@45| |start#0@@17| |results#0@@5| |end#0@@17|) true)) :qid |AsyncMapidfy.65:18| :skolemid |2707| :pattern ( (|AsyncMapSpec.__default.Succ#requires| |s#0@@77| |s'#0@@45| |uiop#0@@45| |start#0@@17| |results#0@@5| |end#0@@17|)) )))
(assert  (=> true (forall ((|s#0@@78| T@U) (|s'#0@@46| T@U) (|uiop#0@@46| T@U) (|start#0@@18| T@U) (|results#0@@6| T@U) (|end#0@@18| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |s#0@@78|) DatatypeTypeType) (= (type |s'#0@@46|) DatatypeTypeType)) (= (type |uiop#0@@46|) DatatypeTypeType)) (= (type |start#0@@18|) DatatypeTypeType)) (= (type |results#0@@6|) (SeqType BoxType))) (= (type |end#0@@18|) DatatypeTypeType)) (or (|AsyncMapSpec.__default.Succ#canCall| |s#0@@78| |s'#0@@46| |uiop#0@@46| |start#0@@18| |results#0@@6| |end#0@@18|) (and (and (and (and (and ($Is |s#0@@78| Tclass.AsyncMapSpec.Variables) ($Is |s'#0@@46| Tclass.AsyncMapSpec.Variables)) ($Is |uiop#0@@46| Tclass.UI.Op)) ($Is |start#0@@18| Tclass.UI.RangeStart)) ($Is |results#0@@6| (TSeq Tclass.UI.SuccResult))) ($Is |end#0@@18| Tclass.UI.RangeEnd)))) (and (and (and (AsyncMapSpec.Variables.Variables_q |s'#0@@46|) (AsyncMapSpec.Variables.Variables_q |s#0@@78|)) (=> (|Map#Equal| (AsyncMapSpec.Variables.queries |s'#0@@46|) (AsyncMapSpec.Variables.queries |s#0@@78|)) (and (and (AsyncMapSpec.Variables.Variables_q |s#0@@78|) (AsyncMapSpec.Variables.Variables_q |s'#0@@46|)) (|MapSpec.__default.Succ#canCall| (AsyncMapSpec.Variables.dict |s#0@@78|) (AsyncMapSpec.Variables.dict |s'#0@@46|) |uiop#0@@46| |start#0@@18| |results#0@@6| |end#0@@18|)))) (= (AsyncMapSpec.__default.Succ |s#0@@78| |s'#0@@46| |uiop#0@@46| |start#0@@18| |results#0@@6| |end#0@@18|)  (and (|Map#Equal| (AsyncMapSpec.Variables.queries |s'#0@@46|) (AsyncMapSpec.Variables.queries |s#0@@78|)) (MapSpec.__default.Succ (AsyncMapSpec.Variables.dict |s#0@@78|) (AsyncMapSpec.Variables.dict |s'#0@@46|) |uiop#0@@46| |start#0@@18| |results#0@@6| |end#0@@18|))))) :qid |AsyncMapidfy.65:18| :skolemid |2708| :pattern ( (AsyncMapSpec.__default.Succ |s#0@@78| |s'#0@@46| |uiop#0@@46| |start#0@@18| |results#0@@6| |end#0@@18|)) ))))
(assert  (=> true (forall ((|s#0@@79| T@U) (|s'#0@@47| T@U) (|uiop#0@@47| T@U) (|start#0@@19| T@U) (|results#0@@7| T@U) (|end#0@@19| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |s#0@@79|) DatatypeTypeType) (= (type |s'#0@@47|) DatatypeTypeType)) (= (type |uiop#0@@47|) DatatypeTypeType)) (= (type |start#0@@19|) DatatypeTypeType)) (= (type |results#0@@7|) (SeqType BoxType))) (= (type |end#0@@19|) DatatypeTypeType)) (or (|AsyncMapSpec.__default.Succ#canCall| (Lit |s#0@@79|) (Lit |s'#0@@47|) (Lit |uiop#0@@47|) (Lit |start#0@@19|) (Lit |results#0@@7|) (Lit |end#0@@19|)) (and (and (and (and (and ($Is |s#0@@79| Tclass.AsyncMapSpec.Variables) ($Is |s'#0@@47| Tclass.AsyncMapSpec.Variables)) ($Is |uiop#0@@47| Tclass.UI.Op)) ($Is |start#0@@19| Tclass.UI.RangeStart)) ($Is |results#0@@7| (TSeq Tclass.UI.SuccResult))) ($Is |end#0@@19| Tclass.UI.RangeEnd)))) (and (and (and (AsyncMapSpec.Variables.Variables_q (Lit |s'#0@@47|)) (AsyncMapSpec.Variables.Variables_q (Lit |s#0@@79|))) (=> (|Map#Equal| (AsyncMapSpec.Variables.queries (Lit |s'#0@@47|)) (AsyncMapSpec.Variables.queries (Lit |s#0@@79|))) (and (and (AsyncMapSpec.Variables.Variables_q (Lit |s#0@@79|)) (AsyncMapSpec.Variables.Variables_q (Lit |s'#0@@47|))) (|MapSpec.__default.Succ#canCall| (Lit (AsyncMapSpec.Variables.dict (Lit |s#0@@79|))) (Lit (AsyncMapSpec.Variables.dict (Lit |s'#0@@47|))) (Lit |uiop#0@@47|) (Lit |start#0@@19|) (Lit |results#0@@7|) (Lit |end#0@@19|))))) (= (AsyncMapSpec.__default.Succ (Lit |s#0@@79|) (Lit |s'#0@@47|) (Lit |uiop#0@@47|) (Lit |start#0@@19|) (Lit |results#0@@7|) (Lit |end#0@@19|))  (and (|Map#Equal| (AsyncMapSpec.Variables.queries (Lit |s'#0@@47|)) (AsyncMapSpec.Variables.queries (Lit |s#0@@79|))) (MapSpec.__default.Succ (Lit (AsyncMapSpec.Variables.dict (Lit |s#0@@79|))) (Lit (AsyncMapSpec.Variables.dict (Lit |s'#0@@47|))) (Lit |uiop#0@@47|) (Lit |start#0@@19|) (Lit |results#0@@7|) (Lit |end#0@@19|)))))) :qid |AsyncMapidfy.65:18| :weight 3 :skolemid |2709| :pattern ( (AsyncMapSpec.__default.Succ (Lit |s#0@@79|) (Lit |s'#0@@47|) (Lit |uiop#0@@47|) (Lit |start#0@@19|) (Lit |results#0@@7|) (Lit |end#0@@19|))) ))))
(assert  (=> true (forall ((|s#0@@80| T@U) (|s'#0@@48| T@U) (|uiop#0@@48| T@U) (|step#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@80|) DatatypeTypeType) (= (type |s'#0@@48|) DatatypeTypeType)) (= (type |uiop#0@@48|) DatatypeTypeType)) (= (type |step#0@@5|) DatatypeTypeType)) (or (|AsyncMapSpec.__default.NextStep#canCall| |s#0@@80| |s'#0@@48| |uiop#0@@48| |step#0@@5|) (and (and (and ($Is |s#0@@80| Tclass.AsyncMapSpec.Variables) ($Is |s'#0@@48| Tclass.AsyncMapSpec.Variables)) ($Is |uiop#0@@48| Tclass.UI.Op)) ($Is |step#0@@5| Tclass.AsyncMapSpec.Step)))) true) :qid |AsyncMapidfy.72:22| :skolemid |2710| :pattern ( (AsyncMapSpec.__default.NextStep |s#0@@80| |s'#0@@48| |uiop#0@@48| |step#0@@5|)) ))))
(assert (forall ((|s#0@@81| T@U) (|s'#0@@49| T@U) (|uiop#0@@49| T@U) (|step#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@81|) DatatypeTypeType) (= (type |s'#0@@49|) DatatypeTypeType)) (= (type |uiop#0@@49|) DatatypeTypeType)) (= (type |step#0@@6|) DatatypeTypeType)) (and (and (and ($Is |s#0@@81| Tclass.AsyncMapSpec.Variables) ($Is |s'#0@@49| Tclass.AsyncMapSpec.Variables)) ($Is |uiop#0@@49| Tclass.UI.Op)) ($Is |step#0@@6| Tclass.AsyncMapSpec.Step))) (= (|AsyncMapSpec.__default.NextStep#requires| |s#0@@81| |s'#0@@49| |uiop#0@@49| |step#0@@6|) true)) :qid |AsyncMapidfy.72:22| :skolemid |2711| :pattern ( (|AsyncMapSpec.__default.NextStep#requires| |s#0@@81| |s'#0@@49| |uiop#0@@49| |step#0@@6|)) )))
(assert  (=> true (forall ((|s#0@@82| T@U) (|s'#0@@50| T@U) (|uiop#0@@50| T@U) (|step#0@@7| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@82|) DatatypeTypeType) (= (type |s'#0@@50|) DatatypeTypeType)) (= (type |uiop#0@@50|) DatatypeTypeType)) (= (type |step#0@@7|) DatatypeTypeType)) (or (|AsyncMapSpec.__default.NextStep#canCall| |s#0@@82| |s'#0@@50| |uiop#0@@50| |step#0@@7|) (and (and (and ($Is |s#0@@82| Tclass.AsyncMapSpec.Variables) ($Is |s'#0@@50| Tclass.AsyncMapSpec.Variables)) ($Is |uiop#0@@50| Tclass.UI.Op)) ($Is |step#0@@7| Tclass.AsyncMapSpec.Step)))) (and (and (=> (AsyncMapSpec.Step.QueryBeginStep_q |step#0@@7|) (let ((|key#3@@0| (AsyncMapSpec.Step.key |step#0@@7|))) (|AsyncMapSpec.__default.QueryBegin#canCall| |s#0@@82| |s'#0@@50| |uiop#0@@50| |key#3@@0|))) (=> (not (AsyncMapSpec.Step.QueryBeginStep_q |step#0@@7|)) (and (=> (AsyncMapSpec.Step.QueryEndStep_q |step#0@@7|) (let ((|result#2@@0| (AsyncMapSpec.Step.result |step#0@@7|))) (|AsyncMapSpec.__default.QueryEnd#canCall| |s#0@@82| |s'#0@@50| |uiop#0@@50| |result#2@@0|))) (=> (not (AsyncMapSpec.Step.QueryEndStep_q |step#0@@7|)) (and (=> (AsyncMapSpec.Step.QueryStep_q |step#0@@7|) (let ((|result#3@@0| (AsyncMapSpec.Step.result |step#0@@7|))) (let ((|key#4@@0| (AsyncMapSpec.Step.key |step#0@@7|))) (|AsyncMapSpec.__default.Query#canCall| |s#0@@82| |s'#0@@50| |uiop#0@@50| |key#4@@0| |result#3@@0|)))) (=> (not (AsyncMapSpec.Step.QueryStep_q |step#0@@7|)) (and (=> (AsyncMapSpec.Step.WriteStep_q |step#0@@7|) (let ((|new_value#1@@0| (AsyncMapSpec.Step.new__value |step#0@@7|))) (let ((|key#5@@0| (AsyncMapSpec.Step.key |step#0@@7|))) (|AsyncMapSpec.__default.Write#canCall| |s#0@@82| |s'#0@@50| |uiop#0@@50| |key#5@@0| |new_value#1@@0|)))) (=> (not (AsyncMapSpec.Step.WriteStep_q |step#0@@7|)) (and (=> (AsyncMapSpec.Step.SuccStep_q |step#0@@7|) (let ((|end#1@@0| (AsyncMapSpec.Step.end |step#0@@7|))) (let ((|results#1@@0| (AsyncMapSpec.Step.results |step#0@@7|))) (let ((|start#1@@0| (AsyncMapSpec.Step.start |step#0@@7|))) (|AsyncMapSpec.__default.Succ#canCall| |s#0@@82| |s'#0@@50| |uiop#0@@50| |start#1@@0| |results#1@@0| |end#1@@0|))))) (=> (not (AsyncMapSpec.Step.SuccStep_q |step#0@@7|)) (and (|$IsA#AsyncMapSpec.Variables| |s#0@@82|) (|$IsA#AsyncMapSpec.Variables| |s'#0@@50|)))))))))))) (= (AsyncMapSpec.__default.NextStep |s#0@@82| |s'#0@@50| |uiop#0@@50| |step#0@@7|) (ite (AsyncMapSpec.Step.QueryBeginStep_q |step#0@@7|) (let ((|key#0@@51| (AsyncMapSpec.Step.key |step#0@@7|))) (AsyncMapSpec.__default.QueryBegin |s#0@@82| |s'#0@@50| |uiop#0@@50| |key#0@@51|)) (ite (AsyncMapSpec.Step.QueryEndStep_q |step#0@@7|) (let ((|result#0@@15| (AsyncMapSpec.Step.result |step#0@@7|))) (AsyncMapSpec.__default.QueryEnd |s#0@@82| |s'#0@@50| |uiop#0@@50| |result#0@@15|)) (ite (AsyncMapSpec.Step.QueryStep_q |step#0@@7|) (let ((|result#1@@0| (AsyncMapSpec.Step.result |step#0@@7|))) (let ((|key#1@@6| (AsyncMapSpec.Step.key |step#0@@7|))) (AsyncMapSpec.__default.Query |s#0@@82| |s'#0@@50| |uiop#0@@50| |key#1@@6| |result#1@@0|))) (ite (AsyncMapSpec.Step.WriteStep_q |step#0@@7|) (let ((|new_value#0@@10| (AsyncMapSpec.Step.new__value |step#0@@7|))) (let ((|key#2@@0| (AsyncMapSpec.Step.key |step#0@@7|))) (AsyncMapSpec.__default.Write |s#0@@82| |s'#0@@50| |uiop#0@@50| |key#2@@0| |new_value#0@@10|))) (ite (AsyncMapSpec.Step.SuccStep_q |step#0@@7|) (let ((|end#0@@20| (AsyncMapSpec.Step.end |step#0@@7|))) (let ((|results#0@@8| (AsyncMapSpec.Step.results |step#0@@7|))) (let ((|start#0@@20| (AsyncMapSpec.Step.start |step#0@@7|))) (AsyncMapSpec.__default.Succ |s#0@@82| |s'#0@@50| |uiop#0@@50| |start#0@@20| |results#0@@8| |end#0@@20|)))) (|AsyncMapSpec.Variables#Equal| |s#0@@82| |s'#0@@50|))))))))) :qid |AsyncMapidfy.72:22| :skolemid |2712| :pattern ( (AsyncMapSpec.__default.NextStep |s#0@@82| |s'#0@@50| |uiop#0@@50| |step#0@@7|)) ))))
(assert  (=> true (forall ((|s#0@@83| T@U) (|s'#0@@51| T@U) (|uiop#0@@51| T@U) (|step#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@83|) DatatypeTypeType) (= (type |s'#0@@51|) DatatypeTypeType)) (= (type |uiop#0@@51|) DatatypeTypeType)) (= (type |step#0@@8|) DatatypeTypeType)) (or (|AsyncMapSpec.__default.NextStep#canCall| (Lit |s#0@@83|) (Lit |s'#0@@51|) (Lit |uiop#0@@51|) (Lit |step#0@@8|)) (and (and (and ($Is |s#0@@83| Tclass.AsyncMapSpec.Variables) ($Is |s'#0@@51| Tclass.AsyncMapSpec.Variables)) ($Is |uiop#0@@51| Tclass.UI.Op)) ($Is |step#0@@8| Tclass.AsyncMapSpec.Step)))) (and (and (=> (U_2_bool (Lit (bool_2_U (AsyncMapSpec.Step.QueryBeginStep_q (Lit |step#0@@8|))))) (let ((|key#9| (Lit (AsyncMapSpec.Step.key (Lit |step#0@@8|))))) (|AsyncMapSpec.__default.QueryBegin#canCall| (Lit |s#0@@83|) (Lit |s'#0@@51|) (Lit |uiop#0@@51|) |key#9|))) (=> (not (U_2_bool (Lit (bool_2_U (AsyncMapSpec.Step.QueryBeginStep_q (Lit |step#0@@8|)))))) (and (=> (U_2_bool (Lit (bool_2_U (AsyncMapSpec.Step.QueryEndStep_q (Lit |step#0@@8|))))) (let ((|result#6| (Lit (AsyncMapSpec.Step.result (Lit |step#0@@8|))))) (|AsyncMapSpec.__default.QueryEnd#canCall| (Lit |s#0@@83|) (Lit |s'#0@@51|) (Lit |uiop#0@@51|) |result#6|))) (=> (not (U_2_bool (Lit (bool_2_U (AsyncMapSpec.Step.QueryEndStep_q (Lit |step#0@@8|)))))) (and (=> (U_2_bool (Lit (bool_2_U (AsyncMapSpec.Step.QueryStep_q (Lit |step#0@@8|))))) (let ((|result#7| (Lit (AsyncMapSpec.Step.result (Lit |step#0@@8|))))) (let ((|key#10| (Lit (AsyncMapSpec.Step.key (Lit |step#0@@8|))))) (|AsyncMapSpec.__default.Query#canCall| (Lit |s#0@@83|) (Lit |s'#0@@51|) (Lit |uiop#0@@51|) |key#10| |result#7|)))) (=> (not (U_2_bool (Lit (bool_2_U (AsyncMapSpec.Step.QueryStep_q (Lit |step#0@@8|)))))) (and (=> (U_2_bool (Lit (bool_2_U (AsyncMapSpec.Step.WriteStep_q (Lit |step#0@@8|))))) (let ((|new_value#3@@0| (Lit (AsyncMapSpec.Step.new__value (Lit |step#0@@8|))))) (let ((|key#11| (Lit (AsyncMapSpec.Step.key (Lit |step#0@@8|))))) (|AsyncMapSpec.__default.Write#canCall| (Lit |s#0@@83|) (Lit |s'#0@@51|) (Lit |uiop#0@@51|) |key#11| |new_value#3@@0|)))) (=> (not (U_2_bool (Lit (bool_2_U (AsyncMapSpec.Step.WriteStep_q (Lit |step#0@@8|)))))) (and (=> (U_2_bool (Lit (bool_2_U (AsyncMapSpec.Step.SuccStep_q (Lit |step#0@@8|))))) (let ((|end#3@@0| (Lit (AsyncMapSpec.Step.end (Lit |step#0@@8|))))) (let ((|results#3@@0| (Lit (AsyncMapSpec.Step.results (Lit |step#0@@8|))))) (let ((|start#3@@0| (Lit (AsyncMapSpec.Step.start (Lit |step#0@@8|))))) (|AsyncMapSpec.__default.Succ#canCall| (Lit |s#0@@83|) (Lit |s'#0@@51|) (Lit |uiop#0@@51|) |start#3@@0| |results#3@@0| |end#3@@0|))))) (=> (not (U_2_bool (Lit (bool_2_U (AsyncMapSpec.Step.SuccStep_q (Lit |step#0@@8|)))))) (and (|$IsA#AsyncMapSpec.Variables| (Lit |s#0@@83|)) (|$IsA#AsyncMapSpec.Variables| (Lit |s'#0@@51|))))))))))))) (= (AsyncMapSpec.__default.NextStep (Lit |s#0@@83|) (Lit |s'#0@@51|) (Lit |uiop#0@@51|) (Lit |step#0@@8|)) (ite (AsyncMapSpec.Step.QueryBeginStep_q (Lit |step#0@@8|)) (U_2_bool (let ((|key#6@@0| (Lit (AsyncMapSpec.Step.key (Lit |step#0@@8|))))) (Lit (bool_2_U (AsyncMapSpec.__default.QueryBegin (Lit |s#0@@83|) (Lit |s'#0@@51|) (Lit |uiop#0@@51|) |key#6@@0|))))) (ite (AsyncMapSpec.Step.QueryEndStep_q (Lit |step#0@@8|)) (U_2_bool (let ((|result#4| (Lit (AsyncMapSpec.Step.result (Lit |step#0@@8|))))) (Lit (bool_2_U (AsyncMapSpec.__default.QueryEnd (Lit |s#0@@83|) (Lit |s'#0@@51|) (Lit |uiop#0@@51|) |result#4|))))) (ite (AsyncMapSpec.Step.QueryStep_q (Lit |step#0@@8|)) (U_2_bool (let ((|result#5| (Lit (AsyncMapSpec.Step.result (Lit |step#0@@8|))))) (let ((|key#7@@0| (Lit (AsyncMapSpec.Step.key (Lit |step#0@@8|))))) (Lit (bool_2_U (AsyncMapSpec.__default.Query (Lit |s#0@@83|) (Lit |s'#0@@51|) (Lit |uiop#0@@51|) |key#7@@0| |result#5|)))))) (ite (AsyncMapSpec.Step.WriteStep_q (Lit |step#0@@8|)) (U_2_bool (let ((|new_value#2@@0| (Lit (AsyncMapSpec.Step.new__value (Lit |step#0@@8|))))) (let ((|key#8| (Lit (AsyncMapSpec.Step.key (Lit |step#0@@8|))))) (Lit (bool_2_U (AsyncMapSpec.__default.Write (Lit |s#0@@83|) (Lit |s'#0@@51|) (Lit |uiop#0@@51|) |key#8| |new_value#2@@0|)))))) (ite (AsyncMapSpec.Step.SuccStep_q (Lit |step#0@@8|)) (U_2_bool (let ((|end#2@@0| (Lit (AsyncMapSpec.Step.end (Lit |step#0@@8|))))) (let ((|results#2@@0| (Lit (AsyncMapSpec.Step.results (Lit |step#0@@8|))))) (let ((|start#2@@0| (Lit (AsyncMapSpec.Step.start (Lit |step#0@@8|))))) (Lit (bool_2_U (AsyncMapSpec.__default.Succ (Lit |s#0@@83|) (Lit |s'#0@@51|) (Lit |uiop#0@@51|) |start#2@@0| |results#2@@0| |end#2@@0|))))))) (|AsyncMapSpec.Variables#Equal| |s#0@@83| |s'#0@@51|))))))))) :qid |AsyncMapidfy.72:22| :weight 3 :skolemid |2713| :pattern ( (AsyncMapSpec.__default.NextStep (Lit |s#0@@83|) (Lit |s'#0@@51|) (Lit |uiop#0@@51|) (Lit |step#0@@8|))) ))))
(assert  (=> true (forall ((|s#0@@84| T@U) (|s'#0@@52| T@U) (|uiop#0@@52| T@U) ) (!  (=> (and (and (and (= (type |s#0@@84|) DatatypeTypeType) (= (type |s'#0@@52|) DatatypeTypeType)) (= (type |uiop#0@@52|) DatatypeTypeType)) (or (|AsyncMapSpec.__default.Next#canCall| |s#0@@84| |s'#0@@52| |uiop#0@@52|) (and (and ($Is |s#0@@84| Tclass.AsyncMapSpec.Variables) ($Is |s'#0@@52| Tclass.AsyncMapSpec.Variables)) ($Is |uiop#0@@52| Tclass.UI.Op)))) true) :qid |AsyncMapidfy.84:18| :skolemid |2714| :pattern ( (AsyncMapSpec.__default.Next |s#0@@84| |s'#0@@52| |uiop#0@@52|)) ))))
(assert (forall ((|s#0@@85| T@U) (|s'#0@@53| T@U) (|uiop#0@@53| T@U) ) (!  (=> (and (and (and (= (type |s#0@@85|) DatatypeTypeType) (= (type |s'#0@@53|) DatatypeTypeType)) (= (type |uiop#0@@53|) DatatypeTypeType)) (and (and ($Is |s#0@@85| Tclass.AsyncMapSpec.Variables) ($Is |s'#0@@53| Tclass.AsyncMapSpec.Variables)) ($Is |uiop#0@@53| Tclass.UI.Op))) (= (|AsyncMapSpec.__default.Next#requires| |s#0@@85| |s'#0@@53| |uiop#0@@53|) true)) :qid |AsyncMapidfy.84:18| :skolemid |2715| :pattern ( (|AsyncMapSpec.__default.Next#requires| |s#0@@85| |s'#0@@53| |uiop#0@@53|)) )))
(assert  (=> true (forall ((|s#0@@86| T@U) (|s'#0@@54| T@U) (|uiop#0@@54| T@U) ) (!  (=> (and (and (and (= (type |s#0@@86|) DatatypeTypeType) (= (type |s'#0@@54|) DatatypeTypeType)) (= (type |uiop#0@@54|) DatatypeTypeType)) (or (|AsyncMapSpec.__default.Next#canCall| |s#0@@86| |s'#0@@54| |uiop#0@@54|) (and (and ($Is |s#0@@86| Tclass.AsyncMapSpec.Variables) ($Is |s'#0@@54| Tclass.AsyncMapSpec.Variables)) ($Is |uiop#0@@54| Tclass.UI.Op)))) (and (forall ((|step#0@@9| T@U) ) (!  (=> (and (= (type |step#0@@9|) DatatypeTypeType) ($Is |step#0@@9| Tclass.AsyncMapSpec.Step)) (|AsyncMapSpec.__default.NextStep#canCall| |s#0@@86| |s'#0@@54| |uiop#0@@54| |step#0@@9|)) :qid |AsyncMapidfy.86:12| :skolemid |2717| :pattern ( (AsyncMapSpec.__default.NextStep |s#0@@86| |s'#0@@54| |uiop#0@@54| |step#0@@9|)) )) (= (AsyncMapSpec.__default.Next |s#0@@86| |s'#0@@54| |uiop#0@@54|) (exists ((|step#0@@10| T@U) ) (!  (and (= (type |step#0@@10|) DatatypeTypeType) (and ($Is |step#0@@10| Tclass.AsyncMapSpec.Step) (AsyncMapSpec.__default.NextStep |s#0@@86| |s'#0@@54| |uiop#0@@54| |step#0@@10|))) :qid |AsyncMapidfy.86:12| :skolemid |2716| :pattern ( (AsyncMapSpec.__default.NextStep |s#0@@86| |s'#0@@54| |uiop#0@@54| |step#0@@10|)) ))))) :qid |AsyncMapidfy.84:18| :skolemid |2718| :pattern ( (AsyncMapSpec.__default.Next |s#0@@86| |s'#0@@54| |uiop#0@@54|)) ))))
(assert  (=> true (forall ((|s#0@@87| T@U) (|s'#0@@55| T@U) (|uiop#0@@55| T@U) ) (!  (=> (and (and (and (= (type |s#0@@87|) DatatypeTypeType) (= (type |s'#0@@55|) DatatypeTypeType)) (= (type |uiop#0@@55|) DatatypeTypeType)) (or (|AsyncMapSpec.__default.Next#canCall| (Lit |s#0@@87|) (Lit |s'#0@@55|) (Lit |uiop#0@@55|)) (and (and ($Is |s#0@@87| Tclass.AsyncMapSpec.Variables) ($Is |s'#0@@55| Tclass.AsyncMapSpec.Variables)) ($Is |uiop#0@@55| Tclass.UI.Op)))) (and (forall ((|step#1@@1| T@U) ) (!  (=> (and (= (type |step#1@@1|) DatatypeTypeType) ($Is |step#1@@1| Tclass.AsyncMapSpec.Step)) (|AsyncMapSpec.__default.NextStep#canCall| (Lit |s#0@@87|) (Lit |s'#0@@55|) (Lit |uiop#0@@55|) |step#1@@1|)) :qid |AsyncMapidfy.86:12| :skolemid |2720| :pattern ( (AsyncMapSpec.__default.NextStep |s#0@@87| |s'#0@@55| |uiop#0@@55| |step#1@@1|)) )) (= (AsyncMapSpec.__default.Next (Lit |s#0@@87|) (Lit |s'#0@@55|) (Lit |uiop#0@@55|)) (exists ((|step#1@@2| T@U) ) (!  (and (= (type |step#1@@2|) DatatypeTypeType) (and ($Is |step#1@@2| Tclass.AsyncMapSpec.Step) (AsyncMapSpec.__default.NextStep (Lit |s#0@@87|) (Lit |s'#0@@55|) (Lit |uiop#0@@55|) |step#1@@2|))) :qid |AsyncMapidfy.86:12| :skolemid |2719| :pattern ( (AsyncMapSpec.__default.NextStep |s#0@@87| |s'#0@@55| |uiop#0@@55| |step#1@@2|)) ))))) :qid |AsyncMapidfy.84:18| :weight 3 :skolemid |2721| :pattern ( (AsyncMapSpec.__default.Next (Lit |s#0@@87|) (Lit |s'#0@@55|) (Lit |uiop#0@@55|))) ))))
(assert (= (type Tclass.SequencesLite.__default) TyType))
(assert (= (Tag Tclass.SequencesLite.__default) Tagclass.SequencesLite.__default))
(assert (= (TagFamily Tclass.SequencesLite.__default) tytagFamily$_default))
(assert (forall ((bx@@178 T@U) ) (!  (=> (and (= (type bx@@178) BoxType) ($IsBox bx@@178 Tclass.SequencesLite.__default)) (and (= ($Box ($Unbox refType bx@@178)) bx@@178) ($Is ($Unbox refType bx@@178) Tclass.SequencesLite.__default))) :qid |unknown.0:0| :skolemid |2722| :pattern ( ($IsBox bx@@178 Tclass.SequencesLite.__default)) )))
(assert (forall (($o@@33 T@U) ) (!  (=> (= (type $o@@33) refType) (= ($Is $o@@33 Tclass.SequencesLite.__default)  (or (= $o@@33 null) (= (dtype $o@@33) Tclass.SequencesLite.__default)))) :qid |unknown.0:0| :skolemid |2723| :pattern ( ($Is $o@@33 Tclass.SequencesLite.__default)) )))
(assert (forall (($o@@34 T@U) ($h@@150 T@U) ) (!  (=> (and (= (type $o@@34) refType) (= (type $h@@150) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@34 Tclass.SequencesLite.__default $h@@150)  (or (= $o@@34 null) (U_2_bool (MapType1Select (MapType0Select $h@@150 $o@@34) alloc))))) :qid |unknown.0:0| :skolemid |2724| :pattern ( ($IsAlloc $o@@34 Tclass.SequencesLite.__default $h@@150)) )))
(assert (forall ((arg0@@523 T@U) (arg1@@221 T@U) ) (! (= (type (SequencesLite.__default.Last arg0@@523 arg1@@221)) BoxType) :qid |funType:SequencesLite.__default.Last| :pattern ( (SequencesLite.__default.Last arg0@@523 arg1@@221)) )))
(assert  (=> true (forall ((SequencesLite._default.Last$E T@U) (|run#0| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E) TyType) (= (type |run#0|) (SeqType BoxType))) (or (|SequencesLite.__default.Last#canCall| SequencesLite._default.Last$E |run#0|) (and ($Is |run#0| (TSeq SequencesLite._default.Last$E)) (> (|Seq#Length| |run#0|) 0)))) ($IsBox (SequencesLite.__default.Last SequencesLite._default.Last$E |run#0|) SequencesLite._default.Last$E)) :qid |unknown.0:0| :skolemid |2725| :pattern ( (SequencesLite.__default.Last SequencesLite._default.Last$E |run#0|)) ))))
(assert (forall ((SequencesLite._default.Last$E@@0 T@U) (|run#0@@0| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E@@0) TyType) (= (type |run#0@@0|) (SeqType BoxType))) ($Is |run#0@@0| (TSeq SequencesLite._default.Last$E@@0))) (= (|SequencesLite.__default.Last#requires| SequencesLite._default.Last$E@@0 |run#0@@0|) (> (|Seq#Length| |run#0@@0|) 0))) :qid |unknown.0:0| :skolemid |2726| :pattern ( (|SequencesLite.__default.Last#requires| SequencesLite._default.Last$E@@0 |run#0@@0|)) )))
(assert  (=> true (forall ((SequencesLite._default.Last$E@@1 T@U) (|run#0@@1| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E@@1) TyType) (= (type |run#0@@1|) (SeqType BoxType))) (or (|SequencesLite.__default.Last#canCall| SequencesLite._default.Last$E@@1 |run#0@@1|) (and ($Is |run#0@@1| (TSeq SequencesLite._default.Last$E@@1)) (> (|Seq#Length| |run#0@@1|) 0)))) (= (SequencesLite.__default.Last SequencesLite._default.Last$E@@1 |run#0@@1|) (|Seq#Index| |run#0@@1| (- (|Seq#Length| |run#0@@1|) 1)))) :qid |unknown.0:0| :skolemid |2727| :pattern ( (SequencesLite.__default.Last SequencesLite._default.Last$E@@1 |run#0@@1|)) ))))
(assert  (=> true (forall ((SequencesLite._default.Last$E@@2 T@U) (|run#0@@2| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E@@2) TyType) (= (type |run#0@@2|) (SeqType BoxType))) (or (|SequencesLite.__default.Last#canCall| SequencesLite._default.Last$E@@2 (Lit |run#0@@2|)) (and ($Is |run#0@@2| (TSeq SequencesLite._default.Last$E@@2)) (> (|Seq#Length| (Lit |run#0@@2|)) 0)))) (= (SequencesLite.__default.Last SequencesLite._default.Last$E@@2 (Lit |run#0@@2|)) (|Seq#Index| (Lit |run#0@@2|) (- (|Seq#Length| (Lit |run#0@@2|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |2728| :pattern ( (SequencesLite.__default.Last SequencesLite._default.Last$E@@2 (Lit |run#0@@2|))) ))))
(assert (forall ((arg0@@524 T@U) (arg1@@222 T@U) ) (! (= (type (SequencesLite.__default.DropLast arg0@@524 arg1@@222)) (SeqType BoxType)) :qid |funType:SequencesLite.__default.DropLast| :pattern ( (SequencesLite.__default.DropLast arg0@@524 arg1@@222)) )))
(assert  (=> true (forall ((SequencesLite._default.DropLast$E T@U) (|run#0@@3| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E) TyType) (= (type |run#0@@3|) (SeqType BoxType))) (or (|SequencesLite.__default.DropLast#canCall| SequencesLite._default.DropLast$E |run#0@@3|) (and ($Is |run#0@@3| (TSeq SequencesLite._default.DropLast$E)) (> (|Seq#Length| |run#0@@3|) 0)))) ($Is (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E |run#0@@3|) (TSeq SequencesLite._default.DropLast$E))) :qid |unknown.0:0| :skolemid |2729| :pattern ( (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E |run#0@@3|)) ))))
(assert (forall ((SequencesLite._default.DropLast$E@@0 T@U) (|run#0@@4| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E@@0) TyType) (= (type |run#0@@4|) (SeqType BoxType))) ($Is |run#0@@4| (TSeq SequencesLite._default.DropLast$E@@0))) (= (|SequencesLite.__default.DropLast#requires| SequencesLite._default.DropLast$E@@0 |run#0@@4|) (> (|Seq#Length| |run#0@@4|) 0))) :qid |unknown.0:0| :skolemid |2730| :pattern ( (|SequencesLite.__default.DropLast#requires| SequencesLite._default.DropLast$E@@0 |run#0@@4|)) )))
(assert  (=> true (forall ((SequencesLite._default.DropLast$E@@1 T@U) (|run#0@@5| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E@@1) TyType) (= (type |run#0@@5|) (SeqType BoxType))) (or (|SequencesLite.__default.DropLast#canCall| SequencesLite._default.DropLast$E@@1 |run#0@@5|) (and ($Is |run#0@@5| (TSeq SequencesLite._default.DropLast$E@@1)) (> (|Seq#Length| |run#0@@5|) 0)))) (= (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@1 |run#0@@5|) (|Seq#Take| |run#0@@5| (- (|Seq#Length| |run#0@@5|) 1)))) :qid |unknown.0:0| :skolemid |2731| :pattern ( (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@1 |run#0@@5|)) ))))
(assert  (=> true (forall ((SequencesLite._default.DropLast$E@@2 T@U) (|run#0@@6| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E@@2) TyType) (= (type |run#0@@6|) (SeqType BoxType))) (or (|SequencesLite.__default.DropLast#canCall| SequencesLite._default.DropLast$E@@2 (Lit |run#0@@6|)) (and ($Is |run#0@@6| (TSeq SequencesLite._default.DropLast$E@@2)) (> (|Seq#Length| (Lit |run#0@@6|)) 0)))) (= (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@2 (Lit |run#0@@6|)) (|Seq#Take| (Lit |run#0@@6|) (- (|Seq#Length| (Lit |run#0@@6|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |2732| :pattern ( (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@2 (Lit |run#0@@6|))) ))))
(assert (= (type Tclass.Mathematics.__default) TyType))
(assert (= (Tag Tclass.Mathematics.__default) Tagclass.Mathematics.__default))
(assert (= (TagFamily Tclass.Mathematics.__default) tytagFamily$_default))
(assert (forall ((bx@@179 T@U) ) (!  (=> (and (= (type bx@@179) BoxType) ($IsBox bx@@179 Tclass.Mathematics.__default)) (and (= ($Box ($Unbox refType bx@@179)) bx@@179) ($Is ($Unbox refType bx@@179) Tclass.Mathematics.__default))) :qid |unknown.0:0| :skolemid |2733| :pattern ( ($IsBox bx@@179 Tclass.Mathematics.__default)) )))
(assert (forall (($o@@35 T@U) ) (!  (=> (= (type $o@@35) refType) (= ($Is $o@@35 Tclass.Mathematics.__default)  (or (= $o@@35 null) (= (dtype $o@@35) Tclass.Mathematics.__default)))) :qid |unknown.0:0| :skolemid |2734| :pattern ( ($Is $o@@35 Tclass.Mathematics.__default)) )))
(assert (forall (($o@@36 T@U) ($h@@151 T@U) ) (!  (=> (and (= (type $o@@36) refType) (= (type $h@@151) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@36 Tclass.Mathematics.__default $h@@151)  (or (= $o@@36 null) (U_2_bool (MapType1Select (MapType0Select $h@@151 $o@@36) alloc))))) :qid |unknown.0:0| :skolemid |2735| :pattern ( ($IsAlloc $o@@36 Tclass.Mathematics.__default $h@@151)) )))
(assert  (=> true (forall ((|a#0@@12| Int) (|b#0@@12| Int) ) (!  (=> true true) :qid |mathematicsidfy.6:15| :skolemid |2736| :pattern ( (Mathematics.__default.min |a#0@@12| |b#0@@12|)) ))))
(assert (forall ((|a#0@@13| Int) (|b#0@@13| Int) ) (! (= (|Mathematics.__default.min#requires| |a#0@@13| |b#0@@13|) true) :qid |mathematicsidfy.6:15| :skolemid |2737| :pattern ( (|Mathematics.__default.min#requires| |a#0@@13| |b#0@@13|)) )))
(assert  (=> true (forall ((|a#0@@14| Int) (|b#0@@14| Int) ) (!  (=> true (= (Mathematics.__default.min |a#0@@14| |b#0@@14|) (ite (< |a#0@@14| |b#0@@14|) |a#0@@14| |b#0@@14|))) :qid |mathematicsidfy.6:15| :skolemid |2738| :pattern ( (Mathematics.__default.min |a#0@@14| |b#0@@14|)) ))))
(assert  (=> true (forall ((|a#0@@15| Int) (|b#0@@15| Int) ) (!  (=> true (= (Mathematics.__default.min (LitInt |a#0@@15|) (LitInt |b#0@@15|)) (ite (< |a#0@@15| |b#0@@15|) |a#0@@15| |b#0@@15|))) :qid |mathematicsidfy.6:15| :weight 3 :skolemid |2739| :pattern ( (Mathematics.__default.min (LitInt |a#0@@15|) (LitInt |b#0@@15|))) ))))
(assert  (=> true (forall ((|a#0@@16| Int) (|b#0@@16| Int) ) (!  (=> true true) :qid |mathematicsidfy.14:15| :skolemid |2740| :pattern ( (Mathematics.__default.max |a#0@@16| |b#0@@16|)) ))))
(assert (forall ((|a#0@@17| Int) (|b#0@@17| Int) ) (! (= (|Mathematics.__default.max#requires| |a#0@@17| |b#0@@17|) true) :qid |mathematicsidfy.14:15| :skolemid |2741| :pattern ( (|Mathematics.__default.max#requires| |a#0@@17| |b#0@@17|)) )))
(assert  (=> true (forall ((|a#0@@18| Int) (|b#0@@18| Int) ) (!  (=> true (= (Mathematics.__default.max |a#0@@18| |b#0@@18|) (ite (< |a#0@@18| |b#0@@18|) |b#0@@18| |a#0@@18|))) :qid |mathematicsidfy.14:15| :skolemid |2742| :pattern ( (Mathematics.__default.max |a#0@@18| |b#0@@18|)) ))))
(assert  (=> true (forall ((|a#0@@19| Int) (|b#0@@19| Int) ) (!  (=> true (= (Mathematics.__default.max (LitInt |a#0@@19|) (LitInt |b#0@@19|)) (ite (< |a#0@@19| |b#0@@19|) |b#0@@19| |a#0@@19|))) :qid |mathematicsidfy.14:15| :weight 3 :skolemid |2743| :pattern ( (Mathematics.__default.max (LitInt |a#0@@19|) (LitInt |b#0@@19|))) ))))
(assert (forall ((arg0@@525 T@U) (arg1@@223 T@U) ) (! (= (type (Mathematics.__default.Set arg0@@525 arg1@@223)) (MapType0Type BoxType boolType)) :qid |funType:Mathematics.__default.Set| :pattern ( (Mathematics.__default.Set arg0@@525 arg1@@223)) )))
(assert  (=> true (forall ((Mathematics._default.Set$T T@U) (|ms#0| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T) TyType) (= (type |ms#0|) (MapType0Type BoxType intType))) (or (|Mathematics.__default.Set#canCall| Mathematics._default.Set$T |ms#0|) ($Is |ms#0| (TMultiSet Mathematics._default.Set$T)))) ($Is (Mathematics.__default.Set Mathematics._default.Set$T |ms#0|) (TSet Mathematics._default.Set$T))) :qid |unknown.0:0| :skolemid |2744| :pattern ( (Mathematics.__default.Set Mathematics._default.Set$T |ms#0|)) ))))
(assert (forall ((Mathematics._default.Set$T@@0 T@U) (|ms#0@@0| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T@@0) TyType) (= (type |ms#0@@0|) (MapType0Type BoxType intType))) ($Is |ms#0@@0| (TMultiSet Mathematics._default.Set$T@@0))) (= (|Mathematics.__default.Set#requires| Mathematics._default.Set$T@@0 |ms#0@@0|) true)) :qid |unknown.0:0| :skolemid |2745| :pattern ( (|Mathematics.__default.Set#requires| Mathematics._default.Set$T@@0 |ms#0@@0|)) )))
(assert (forall ((arg0@@526 T@U) (arg1@@224 T@U) (arg2@@141 Int) ) (! (= (type (|lambda#90| arg0@@526 arg1@@224 arg2@@141)) (MapType0Type BoxType boolType)) :qid |funType:lambda#90| :pattern ( (|lambda#90| arg0@@526 arg1@@224 arg2@@141)) )))
(assert  (=> true (forall ((Mathematics._default.Set$T@@1 T@U) (|ms#0@@1| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T@@1) TyType) (= (type |ms#0@@1|) (MapType0Type BoxType intType))) (or (|Mathematics.__default.Set#canCall| Mathematics._default.Set$T@@1 |ms#0@@1|) ($Is |ms#0@@1| (TMultiSet Mathematics._default.Set$T@@1)))) (= (Mathematics.__default.Set Mathematics._default.Set$T@@1 |ms#0@@1|) (|lambda#90| Mathematics._default.Set$T@@1 |ms#0@@1| 0))) :qid |unknown.0:0| :skolemid |2746| :pattern ( (Mathematics.__default.Set Mathematics._default.Set$T@@1 |ms#0@@1|)) ))))
(assert  (=> true (forall ((Mathematics._default.Set$T@@2 T@U) (|ms#0@@2| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T@@2) TyType) (= (type |ms#0@@2|) (MapType0Type BoxType intType))) (or (|Mathematics.__default.Set#canCall| Mathematics._default.Set$T@@2 (Lit |ms#0@@2|)) ($Is |ms#0@@2| (TMultiSet Mathematics._default.Set$T@@2)))) (= (Mathematics.__default.Set Mathematics._default.Set$T@@2 (Lit |ms#0@@2|)) (|lambda#90| Mathematics._default.Set$T@@2 (Lit |ms#0@@2|) 0))) :qid |unknown.0:0| :weight 3 :skolemid |2747| :pattern ( (Mathematics.__default.Set Mathematics._default.Set$T@@2 (Lit |ms#0@@2|))) ))))
(assert (forall ((arg0@@527 T@U) (arg1@@225 T@U) ) (! (= (type (Mathematics.__default.ISet arg0@@527 arg1@@225)) (MapType0Type BoxType boolType)) :qid |funType:Mathematics.__default.ISet| :pattern ( (Mathematics.__default.ISet arg0@@527 arg1@@225)) )))
(assert  (=> true (forall ((Mathematics._default.ISet$T T@U) (|ms#0@@3| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T) TyType) (= (type |ms#0@@3|) (MapType0Type BoxType boolType))) (or (|Mathematics.__default.ISet#canCall| Mathematics._default.ISet$T |ms#0@@3|) ($Is |ms#0@@3| (TSet Mathematics._default.ISet$T)))) ($Is (Mathematics.__default.ISet Mathematics._default.ISet$T |ms#0@@3|) (TISet Mathematics._default.ISet$T))) :qid |unknown.0:0| :skolemid |2748| :pattern ( (Mathematics.__default.ISet Mathematics._default.ISet$T |ms#0@@3|)) ))))
(assert (forall ((Mathematics._default.ISet$T@@0 T@U) (|ms#0@@4| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T@@0) TyType) (= (type |ms#0@@4|) (MapType0Type BoxType boolType))) ($Is |ms#0@@4| (TSet Mathematics._default.ISet$T@@0))) (= (|Mathematics.__default.ISet#requires| Mathematics._default.ISet$T@@0 |ms#0@@4|) true)) :qid |unknown.0:0| :skolemid |2749| :pattern ( (|Mathematics.__default.ISet#requires| Mathematics._default.ISet$T@@0 |ms#0@@4|)) )))
(assert  (=> true (forall ((Mathematics._default.ISet$T@@1 T@U) (|ms#0@@5| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T@@1) TyType) (= (type |ms#0@@5|) (MapType0Type BoxType boolType))) (or (|Mathematics.__default.ISet#canCall| Mathematics._default.ISet$T@@1 |ms#0@@5|) ($Is |ms#0@@5| (TSet Mathematics._default.ISet$T@@1)))) (= (Mathematics.__default.ISet Mathematics._default.ISet$T@@1 |ms#0@@5|) (|lambda#2| Mathematics._default.ISet$T@@1 |ms#0@@5|))) :qid |unknown.0:0| :skolemid |2750| :pattern ( (Mathematics.__default.ISet Mathematics._default.ISet$T@@1 |ms#0@@5|)) ))))
(assert  (=> true (forall ((Mathematics._default.ISet$T@@2 T@U) (|ms#0@@6| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T@@2) TyType) (= (type |ms#0@@6|) (MapType0Type BoxType boolType))) (or (|Mathematics.__default.ISet#canCall| Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|)) ($Is |ms#0@@6| (TSet Mathematics._default.ISet$T@@2)))) (= (Mathematics.__default.ISet Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|)) (|lambda#2| Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|)))) :qid |unknown.0:0| :weight 3 :skolemid |2751| :pattern ( (Mathematics.__default.ISet Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|))) ))))
(assert (= (type Tclass.Sequences.__default) TyType))
(assert (= (Tag Tclass.Sequences.__default) Tagclass.Sequences.__default))
(assert (= (TagFamily Tclass.Sequences.__default) tytagFamily$_default))
(assert (forall ((bx@@180 T@U) ) (!  (=> (and (= (type bx@@180) BoxType) ($IsBox bx@@180 Tclass.Sequences.__default)) (and (= ($Box ($Unbox refType bx@@180)) bx@@180) ($Is ($Unbox refType bx@@180) Tclass.Sequences.__default))) :qid |unknown.0:0| :skolemid |2752| :pattern ( ($IsBox bx@@180 Tclass.Sequences.__default)) )))
(assert (forall (($o@@37 T@U) ) (!  (=> (= (type $o@@37) refType) (= ($Is $o@@37 Tclass.Sequences.__default)  (or (= $o@@37 null) (= (dtype $o@@37) Tclass.Sequences.__default)))) :qid |unknown.0:0| :skolemid |2753| :pattern ( ($Is $o@@37 Tclass.Sequences.__default)) )))
(assert (forall (($o@@38 T@U) ($h@@152 T@U) ) (!  (=> (and (= (type $o@@38) refType) (= (type $h@@152) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@38 Tclass.Sequences.__default $h@@152)  (or (= $o@@38 null) (U_2_bool (MapType1Select (MapType0Select $h@@152 $o@@38) alloc))))) :qid |unknown.0:0| :skolemid |2754| :pattern ( ($IsAlloc $o@@38 Tclass.Sequences.__default $h@@152)) )))
(assert (forall ((arg0@@528 T@U) (arg1@@226 T@U) ) (! (= (type (Sequences.__default.Last arg0@@528 arg1@@226)) BoxType) :qid |funType:Sequences.__default.Last| :pattern ( (Sequences.__default.Last arg0@@528 arg1@@226)) )))
(assert  (=> true (forall ((Sequences._default.Last$E T@U) (|run#0@@7| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E) TyType) (= (type |run#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E |run#0@@7|) (and ($Is |run#0@@7| (TSeq Sequences._default.Last$E)) (> (|Seq#Length| |run#0@@7|) 0)))) ($IsBox (Sequences.__default.Last Sequences._default.Last$E |run#0@@7|) Sequences._default.Last$E)) :qid |unknown.0:0| :skolemid |2755| :pattern ( (Sequences.__default.Last Sequences._default.Last$E |run#0@@7|)) ))))
(assert (forall ((Sequences._default.Last$E@@0 T@U) (|run#0@@8| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@0) TyType) (= (type |run#0@@8|) (SeqType BoxType))) ($Is |run#0@@8| (TSeq Sequences._default.Last$E@@0))) (= (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@8|) (> (|Seq#Length| |run#0@@8|) 0))) :qid |unknown.0:0| :skolemid |2756| :pattern ( (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@8|)) )))
(assert  (=> true (forall ((Sequences._default.Last$E@@1 T@U) (|run#0@@9| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@1) TyType) (= (type |run#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@1 |run#0@@9|) (and ($Is |run#0@@9| (TSeq Sequences._default.Last$E@@1)) (> (|Seq#Length| |run#0@@9|) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@9|) (|Seq#Index| |run#0@@9| (- (|Seq#Length| |run#0@@9|) 1)))) :qid |unknown.0:0| :skolemid |2757| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@9|)) ))))
(assert  (=> true (forall ((Sequences._default.Last$E@@2 T@U) (|run#0@@10| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@2) TyType) (= (type |run#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@2 (Lit |run#0@@10|)) (and ($Is |run#0@@10| (TSeq Sequences._default.Last$E@@2)) (> (|Seq#Length| (Lit |run#0@@10|)) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@10|)) (|Seq#Index| (Lit |run#0@@10|) (- (|Seq#Length| (Lit |run#0@@10|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |2758| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@10|))) ))))
(assert (forall ((arg0@@529 T@U) (arg1@@227 T@U) ) (! (= (type (Sequences.__default.FirstOpt arg0@@529 arg1@@227)) DatatypeTypeType) :qid |funType:Sequences.__default.FirstOpt| :pattern ( (Sequences.__default.FirstOpt arg0@@529 arg1@@227)) )))
(assert  (=> true (forall ((Sequences._default.FirstOpt$E T@U) (|run#0@@11| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E) TyType) (= (type |run#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.FirstOpt#canCall| Sequences._default.FirstOpt$E |run#0@@11|) ($Is |run#0@@11| (TSeq Sequences._default.FirstOpt$E)))) ($Is (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E |run#0@@11|) (Tclass.Options.Option Sequences._default.FirstOpt$E))) :qid |unknown.0:0| :skolemid |2759| :pattern ( (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E |run#0@@11|)) ))))
(assert (forall ((Sequences._default.FirstOpt$E@@0 T@U) (|run#0@@12| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E@@0) TyType) (= (type |run#0@@12|) (SeqType BoxType))) ($Is |run#0@@12| (TSeq Sequences._default.FirstOpt$E@@0))) (= (|Sequences.__default.FirstOpt#requires| Sequences._default.FirstOpt$E@@0 |run#0@@12|) true)) :qid |unknown.0:0| :skolemid |2760| :pattern ( (|Sequences.__default.FirstOpt#requires| Sequences._default.FirstOpt$E@@0 |run#0@@12|)) )))
(assert  (=> true (forall ((Sequences._default.FirstOpt$E@@1 T@U) (|run#0@@13| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E@@1) TyType) (= (type |run#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.FirstOpt#canCall| Sequences._default.FirstOpt$E@@1 |run#0@@13|) ($Is |run#0@@13| (TSeq Sequences._default.FirstOpt$E@@1)))) (= (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@1 |run#0@@13|) (ite (= (|Seq#Length| |run#0@@13|) (LitInt 0)) |#Options.Option.None| (|#Options.Option.Some| (|Seq#Index| |run#0@@13| (LitInt 0)))))) :qid |unknown.0:0| :skolemid |2761| :pattern ( (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@1 |run#0@@13|)) ))))
(assert  (=> true (forall ((Sequences._default.FirstOpt$E@@2 T@U) (|run#0@@14| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E@@2) TyType) (= (type |run#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.FirstOpt#canCall| Sequences._default.FirstOpt$E@@2 (Lit |run#0@@14|)) ($Is |run#0@@14| (TSeq Sequences._default.FirstOpt$E@@2)))) (= (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@2 (Lit |run#0@@14|)) (ite (= (|Seq#Length| (Lit |run#0@@14|)) (LitInt 0)) |#Options.Option.None| (|#Options.Option.Some| (|Seq#Index| (Lit |run#0@@14|) (LitInt 0)))))) :qid |unknown.0:0| :weight 3 :skolemid |2762| :pattern ( (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@2 (Lit |run#0@@14|))) ))))
(assert (forall ((arg0@@530 T@U) (arg1@@228 T@U) ) (! (= (type (Sequences.__default.DropLast arg0@@530 arg1@@228)) (SeqType BoxType)) :qid |funType:Sequences.__default.DropLast| :pattern ( (Sequences.__default.DropLast arg0@@530 arg1@@228)) )))
(assert  (=> true (forall ((Sequences._default.DropLast$E T@U) (|run#0@@15| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E) TyType) (= (type |run#0@@15|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E |run#0@@15|) (and ($Is |run#0@@15| (TSeq Sequences._default.DropLast$E)) (> (|Seq#Length| |run#0@@15|) 0)))) ($Is (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@15|) (TSeq Sequences._default.DropLast$E))) :qid |unknown.0:0| :skolemid |2763| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@15|)) ))))
(assert (forall ((Sequences._default.DropLast$E@@0 T@U) (|run#0@@16| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@0) TyType) (= (type |run#0@@16|) (SeqType BoxType))) ($Is |run#0@@16| (TSeq Sequences._default.DropLast$E@@0))) (= (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@16|) (> (|Seq#Length| |run#0@@16|) 0))) :qid |unknown.0:0| :skolemid |2764| :pattern ( (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@16|)) )))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@1 T@U) (|run#0@@17| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@1) TyType) (= (type |run#0@@17|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@1 |run#0@@17|) (and ($Is |run#0@@17| (TSeq Sequences._default.DropLast$E@@1)) (> (|Seq#Length| |run#0@@17|) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@17|) (|Seq#Take| |run#0@@17| (- (|Seq#Length| |run#0@@17|) 1)))) :qid |unknown.0:0| :skolemid |2765| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@17|)) ))))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@2 T@U) (|run#0@@18| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@2) TyType) (= (type |run#0@@18|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@2 (Lit |run#0@@18|)) (and ($Is |run#0@@18| (TSeq Sequences._default.DropLast$E@@2)) (> (|Seq#Length| (Lit |run#0@@18|)) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@18|)) (|Seq#Take| (Lit |run#0@@18|) (- (|Seq#Length| (Lit |run#0@@18|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |2766| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@18|))) ))))
(assert (forall ((arg0@@531 T@U) (arg1@@229 T@U) ) (! (= (type (Sequences.__default.Set arg0@@531 arg1@@229)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.Set| :pattern ( (Sequences.__default.Set arg0@@531 arg1@@229)) )))
(assert  (=> true (forall ((Sequences._default.Set$T T@U) (|run#0@@19| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T) TyType) (= (type |run#0@@19|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T |run#0@@19|) ($Is |run#0@@19| (TSeq Sequences._default.Set$T)))) ($Is (Sequences.__default.Set Sequences._default.Set$T |run#0@@19|) (TSet Sequences._default.Set$T))) :qid |unknown.0:0| :skolemid |2767| :pattern ( (Sequences.__default.Set Sequences._default.Set$T |run#0@@19|)) ))))
(assert (forall ((Sequences._default.Set$T@@0 T@U) (|run#0@@20| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@0) TyType) (= (type |run#0@@20|) (SeqType BoxType))) ($Is |run#0@@20| (TSeq Sequences._default.Set$T@@0))) (= (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@20|) true)) :qid |unknown.0:0| :skolemid |2768| :pattern ( (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@20|)) )))
(assert  (=> true (forall ((Sequences._default.Set$T@@1 T@U) (|run#0@@21| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@1) TyType) (= (type |run#0@@21|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@1 |run#0@@21|) ($Is |run#0@@21| (TSeq Sequences._default.Set$T@@1)))) (= (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@21|) (|lambda#90| Sequences._default.Set$T@@1 (|MultiSet#FromSeq| |run#0@@21|) 0))) :qid |unknown.0:0| :skolemid |2769| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@21|)) ))))
(assert  (=> true (forall ((Sequences._default.Set$T@@2 T@U) (|run#0@@22| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@2) TyType) (= (type |run#0@@22|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@2 (Lit |run#0@@22|)) ($Is |run#0@@22| (TSeq Sequences._default.Set$T@@2)))) (= (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@22|)) (|lambda#90| Sequences._default.Set$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@22|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |2770| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@22|))) ))))
(assert (forall ((arg0@@532 T@U) (arg1@@230 T@U) ) (! (= (type (Sequences.__default.ISet arg0@@532 arg1@@230)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.ISet| :pattern ( (Sequences.__default.ISet arg0@@532 arg1@@230)) )))
(assert  (=> true (forall ((Sequences._default.ISet$T T@U) (|run#0@@23| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T) TyType) (= (type |run#0@@23|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T |run#0@@23|) ($Is |run#0@@23| (TSeq Sequences._default.ISet$T)))) ($Is (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@23|) (TISet Sequences._default.ISet$T))) :qid |unknown.0:0| :skolemid |2771| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@23|)) ))))
(assert (forall ((Sequences._default.ISet$T@@0 T@U) (|run#0@@24| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@0) TyType) (= (type |run#0@@24|) (SeqType BoxType))) ($Is |run#0@@24| (TSeq Sequences._default.ISet$T@@0))) (= (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@24|) true)) :qid |unknown.0:0| :skolemid |2772| :pattern ( (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@24|)) )))
(assert  (=> true (forall ((Sequences._default.ISet$T@@1 T@U) (|run#0@@25| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@1) TyType) (= (type |run#0@@25|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@1 |run#0@@25|) ($Is |run#0@@25| (TSeq Sequences._default.ISet$T@@1)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@25|) (|lambda#90| Sequences._default.ISet$T@@1 (|MultiSet#FromSeq| |run#0@@25|) 0))) :qid |unknown.0:0| :skolemid |2773| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@25|)) ))))
(assert  (=> true (forall ((Sequences._default.ISet$T@@2 T@U) (|run#0@@26| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@2) TyType) (= (type |run#0@@26|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@2 (Lit |run#0@@26|)) ($Is |run#0@@26| (TSeq Sequences._default.ISet$T@@2)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@26|)) (|lambda#90| Sequences._default.ISet$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@26|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |2774| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@26|))) ))))
(assert (forall ((Sequences._default.NoDupes$T T@U) ($ly@@92 T@U) (|a#0@@20| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T) TyType) (= (type $ly@@92) LayerTypeType)) (= (type |a#0@@20|) (SeqType BoxType))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@92) |a#0@@20|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T $ly@@92 |a#0@@20|))) :qid |unknown.0:0| :skolemid |2775| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@92) |a#0@@20|)) )))
(assert (forall ((Sequences._default.NoDupes$T@@0 T@U) ($ly@@93 T@U) (|a#0@@21| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T@@0) TyType) (= (type $ly@@93) LayerTypeType)) (= (type |a#0@@21|) (SeqType BoxType))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $ly@@93 |a#0@@21|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $LZ |a#0@@21|))) :qid |unknown.0:0| :skolemid |2776| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 (AsFuelBottom $ly@@93) |a#0@@21|)) )))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@1 T@U) ($ly@@94 T@U) (|a#0@@22| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@1) TyType) (= (type $ly@@94) LayerTypeType)) (= (type |a#0@@22|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@1 |a#0@@22|) ($Is |a#0@@22| (TSeq Sequences._default.NoDupes$T@@1)))) true) :qid |unknown.0:0| :skolemid |2777| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@1 $ly@@94 |a#0@@22|)) ))))
(assert (forall ((Sequences._default.NoDupes$T@@2 T@U) ($ly@@95 T@U) (|a#0@@23| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@2) TyType) (= (type $ly@@95) LayerTypeType)) (= (type |a#0@@23|) (SeqType BoxType))) ($Is |a#0@@23| (TSeq Sequences._default.NoDupes$T@@2))) (= (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@95 |a#0@@23|) true)) :qid |unknown.0:0| :skolemid |2778| :pattern ( (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@95 |a#0@@23|)) )))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@3 T@U) ($ly@@96 T@U) (|a#0@@24| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@3) TyType) (= (type $ly@@96) LayerTypeType)) (= (type |a#0@@24|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@3 |a#0@@24|) ($Is |a#0@@24| (TSeq Sequences._default.NoDupes$T@@3)))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@96) |a#0@@24|) (forall ((|i#0@@30| Int) (|j#0@@9| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#0@@30|) (< |i#0@@30| (|Seq#Length| |a#0@@24|))) (and (<= (LitInt 0) |j#0@@9|) (< |j#0@@9| (|Seq#Length| |a#0@@24|)))) (not (= |i#0@@30| |j#0@@9|))) (not (= (|Seq#Index| |a#0@@24| |i#0@@30|) (|Seq#Index| |a#0@@24| |j#0@@9|))))) :qid |Sequencesidfy.66:13| :skolemid |2779| :pattern ( (|Seq#Index| |a#0@@24| |j#0@@9|) (|Seq#Index| |a#0@@24| |i#0@@30|)) )))) :qid |unknown.0:0| :skolemid |2780| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@96) |a#0@@24|)) ))))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@4 T@U) ($ly@@97 T@U) (|a#0@@25| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@4) TyType) (= (type $ly@@97) LayerTypeType)) (= (type |a#0@@25|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@4 (Lit |a#0@@25|)) ($Is |a#0@@25| (TSeq Sequences._default.NoDupes$T@@4)))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@97) (Lit |a#0@@25|)) (forall ((|i#1@@4| Int) (|j#1@@4| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#1@@4|) (< |i#1@@4| (|Seq#Length| (Lit |a#0@@25|)))) (and (<= (LitInt 0) |j#1@@4|) (< |j#1@@4| (|Seq#Length| (Lit |a#0@@25|))))) (not (= |i#1@@4| |j#1@@4|))) (not (= (|Seq#Index| (Lit |a#0@@25|) |i#1@@4|) (|Seq#Index| (Lit |a#0@@25|) |j#1@@4|))))) :qid |Sequencesidfy.66:13| :skolemid |2781| :pattern ( (|Seq#Index| |a#0@@25| |j#1@@4|) (|Seq#Index| |a#0@@25| |i#1@@4|)) )))) :qid |unknown.0:0| :weight 3 :skolemid |2782| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@97) (Lit |a#0@@25|))) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T T@U) (|s#0@@88| T@U) (|e#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T) TyType) (= (type |s#0@@88|) (SeqType BoxType))) (= (type |e#0|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T |s#0@@88| |e#0|) (and (and ($Is |s#0@@88| (TSeq Sequences._default.IndexOf$T)) ($IsBox |e#0| Sequences._default.IndexOf$T)) (|Seq#Contains| |s#0@@88| |e#0|)))) (and (and (<= (LitInt 0) (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@88| |e#0|)) (< (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@88| |e#0|) (|Seq#Length| |s#0@@88|))) (= (|Seq#Index| |s#0@@88| (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@88| |e#0|)) |e#0|))) :qid |unknown.0:0| :skolemid |2783| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@88| |e#0|)) ))))
(assert (forall ((Sequences._default.IndexOf$T@@0 T@U) ($Heap@@5 T@U) (|s#0@@89| T@U) (|e#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@0) TyType) (= (type $Heap@@5) (MapType0Type refType MapType1Type))) (= (type |s#0@@89|) (SeqType BoxType))) (= (type |e#0@@0|) BoxType)) (and (and ($IsGoodHeap $Heap@@5) ($Is |s#0@@89| (TSeq Sequences._default.IndexOf$T@@0))) ($IsBox |e#0@@0| Sequences._default.IndexOf$T@@0))) (= (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@89| |e#0@@0|) (|Seq#Contains| |s#0@@89| |e#0@@0|))) :qid |unknown.0:0| :skolemid |2784| :pattern ( (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@89| |e#0@@0|) ($IsGoodHeap $Heap@@5)) )))
(assert (forall ((Sequences._default.IndexOf$T@@1 T@U) (s@@49 T@U) (e T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T@@1) TyType) (= (type s@@49) (SeqType BoxType))) (= (type e) BoxType)) (|$let#0$canCall| Sequences._default.IndexOf$T@@1 s@@49 e)) (and (and (<= (LitInt 0) (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e)) (< (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e) (|Seq#Length| s@@49))) (= (|Seq#Index| s@@49 (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e)) e))) :qid |Sequencesidfy.117:5| :skolemid |2785| :pattern ( (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e)) )))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@2 T@U) ($Heap@@6 T@U) (|s#0@@90| T@U) (|e#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@2) TyType) (= (type $Heap@@6) (MapType0Type refType MapType1Type))) (= (type |s#0@@90|) (SeqType BoxType))) (= (type |e#0@@1|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@2 |s#0@@90| |e#0@@1|) (and (and (and ($IsGoodHeap $Heap@@6) ($Is |s#0@@90| (TSeq Sequences._default.IndexOf$T@@2))) ($IsBox |e#0@@1| Sequences._default.IndexOf$T@@2)) (|Seq#Contains| |s#0@@90| |e#0@@1|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@2 |s#0@@90| |e#0@@1|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@90| |e#0@@1|) (let ((|i#0@@31| (|$let#0_i| Sequences._default.IndexOf$T@@2 |s#0@@90| |e#0@@1|))) |i#0@@31|)))) :qid |unknown.0:0| :skolemid |2786| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@90| |e#0@@1|) ($IsGoodHeap $Heap@@6)) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@3 T@U) ($Heap@@7 T@U) (|s#0@@91| T@U) (|e#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@3) TyType) (= (type $Heap@@7) (MapType0Type refType MapType1Type))) (= (type |s#0@@91|) (SeqType BoxType))) (= (type |e#0@@2|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@91|) |e#0@@2|) (and (and (and ($IsGoodHeap $Heap@@7) ($Is |s#0@@91| (TSeq Sequences._default.IndexOf$T@@3))) ($IsBox |e#0@@2| Sequences._default.IndexOf$T@@3)) (|Seq#Contains| |s#0@@91| |e#0@@2|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@91|) |e#0@@2|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@91|) |e#0@@2|) (let ((|i#1@@5| (|$let#0_i| Sequences._default.IndexOf$T@@3 (Lit |s#0@@91|) |e#0@@2|))) |i#1@@5|)))) :qid |unknown.0:0| :weight 3 :skolemid |2787| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@91|) |e#0@@2|) ($IsGoodHeap $Heap@@7)) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@4 T@U) ($Heap@@8 T@U) (|s#0@@92| T@U) (|e#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@4) TyType) (= (type $Heap@@8) (MapType0Type refType MapType1Type))) (= (type |s#0@@92|) (SeqType BoxType))) (= (type |e#0@@3|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@92|) (Lit |e#0@@3|)) (and (and (and ($IsGoodHeap $Heap@@8) ($Is |s#0@@92| (TSeq Sequences._default.IndexOf$T@@4))) ($IsBox |e#0@@3| Sequences._default.IndexOf$T@@4)) (|Seq#Contains| |s#0@@92| |e#0@@3|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@92|) (Lit |e#0@@3|)) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@92|) (Lit |e#0@@3|)) (let ((|i#2@@2| (|$let#0_i| Sequences._default.IndexOf$T@@4 (Lit |s#0@@92|) (Lit |e#0@@3|)))) |i#2@@2|)))) :qid |unknown.0:0| :weight 3 :skolemid |2788| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@92|) (Lit |e#0@@3|)) ($IsGoodHeap $Heap@@8)) ))))
(assert (forall ((arg0@@533 T@U) (arg1@@231 Int) ) (! (= (type (Sequences.__default.Range arg0@@533 arg1@@231)) (SeqType BoxType)) :qid |funType:Sequences.__default.Range| :pattern ( (Sequences.__default.Range arg0@@533 arg1@@231)) )))
(assert (forall (($ly@@98 T@U) (|n#0| Int) ) (!  (=> (= (type $ly@@98) LayerTypeType) (= (Sequences.__default.Range ($LS $ly@@98) |n#0|) (Sequences.__default.Range $ly@@98 |n#0|))) :qid |Sequencesidfy.121:22| :skolemid |2789| :pattern ( (Sequences.__default.Range ($LS $ly@@98) |n#0|)) )))
(assert (forall (($ly@@99 T@U) (|n#0@@0| Int) ) (!  (=> (= (type $ly@@99) LayerTypeType) (= (Sequences.__default.Range $ly@@99 |n#0@@0|) (Sequences.__default.Range $LZ |n#0@@0|))) :qid |Sequencesidfy.121:22| :skolemid |2790| :pattern ( (Sequences.__default.Range (AsFuelBottom $ly@@99) |n#0@@0|)) )))
(assert  (=> true (forall (($ly@@100 T@U) (|n#0@@1| Int) ) (!  (=> (and (= (type $ly@@100) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@1|) (>= |n#0@@1| (LitInt 0)))) (and (and (= (|Seq#Length| (Sequences.__default.Range $ly@@100 |n#0@@1|)) |n#0@@1|) (forall ((|i#0@@32| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@32|) (< |i#0@@32| |n#0@@1|)) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@100 |n#0@@1|) |i#0@@32|))) |i#0@@32|)) :qid |Sequencesidfy.124:20| :skolemid |2791| :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@100 |n#0@@1|) |i#0@@32|))) ))) ($Is (Sequences.__default.Range $ly@@100 |n#0@@1|) (TSeq TInt)))) :qid |Sequencesidfy.121:22| :skolemid |2792| :pattern ( (Sequences.__default.Range $ly@@100 |n#0@@1|)) ))))
(assert (forall (($ly@@101 T@U) (|n#0@@2| Int) ) (!  (=> (= (type $ly@@101) LayerTypeType) (= (|Sequences.__default.Range#requires| $ly@@101 |n#0@@2|) (>= |n#0@@2| (LitInt 0)))) :qid |Sequencesidfy.121:22| :skolemid |2793| :pattern ( (|Sequences.__default.Range#requires| $ly@@101 |n#0@@2|)) )))
(assert  (=> true (forall (($ly@@102 T@U) (|n#0@@3| Int) ) (!  (=> (and (= (type $ly@@102) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@3|) (>= |n#0@@3| (LitInt 0)))) (and (=> (not (= |n#0@@3| (LitInt 0))) (|Sequences.__default.Range#canCall| (- |n#0@@3| 1))) (= (Sequences.__default.Range ($LS $ly@@102) |n#0@@3|) (ite (= |n#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range $ly@@102 (- |n#0@@3| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (- |n#0@@3| 1))))))))) :qid |Sequencesidfy.121:22| :skolemid |2794| :pattern ( (Sequences.__default.Range ($LS $ly@@102) |n#0@@3|)) ))))
(assert  (=> true (forall (($ly@@103 T@U) (|n#0@@4| Int) ) (!  (=> (and (= (type $ly@@103) LayerTypeType) (or (|Sequences.__default.Range#canCall| (LitInt |n#0@@4|)) (>= (LitInt |n#0@@4|) (LitInt 0)))) (and (=> (not (= (LitInt |n#0@@4|) (LitInt 0))) (|Sequences.__default.Range#canCall| (LitInt (- |n#0@@4| 1)))) (= (Sequences.__default.Range ($LS $ly@@103) (LitInt |n#0@@4|)) (ite (= (LitInt |n#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range ($LS $ly@@103) (LitInt (- |n#0@@4| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt (- |n#0@@4| 1)))))))))) :qid |Sequencesidfy.121:22| :weight 3 :skolemid |2795| :pattern ( (Sequences.__default.Range ($LS $ly@@103) (LitInt |n#0@@4|))) ))))
(assert (forall ((arg0@@534 T@U) (arg1@@232 T@U) (arg2@@142 T@U) (arg3@@99 T@U) (arg4@@76 T@U) (arg5@@47 T@U) ) (! (= (type (Sequences.__default.Apply arg0@@534 arg1@@232 arg2@@142 arg3@@99 arg4@@76 arg5@@47)) (SeqType BoxType)) :qid |funType:Sequences.__default.Apply| :pattern ( (Sequences.__default.Apply arg0@@534 arg1@@232 arg2@@142 arg3@@99 arg4@@76 arg5@@47)) )))
(assert (forall ((Sequences._default.Apply$E T@U) (Sequences._default.Apply$R T@U) ($ly@@104 T@U) ($Heap@@9 T@U) (|f#0@@79| T@U) (|run#0@@27| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E) TyType) (= (type Sequences._default.Apply$R) TyType)) (= (type $ly@@104) LayerTypeType)) (= (type $Heap@@9) (MapType0Type refType MapType1Type))) (= (type |f#0@@79|) HandleTypeType)) (= (type |run#0@@27|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@104) $Heap@@9 |f#0@@79| |run#0@@27|) (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R $ly@@104 $Heap@@9 |f#0@@79| |run#0@@27|))) :qid |unknown.0:0| :skolemid |2796| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@104) $Heap@@9 |f#0@@79| |run#0@@27|)) )))
(assert (forall ((Sequences._default.Apply$E@@0 T@U) (Sequences._default.Apply$R@@0 T@U) ($ly@@105 T@U) ($Heap@@10 T@U) (|f#0@@80| T@U) (|run#0@@28| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E@@0) TyType) (= (type Sequences._default.Apply$R@@0) TyType)) (= (type $ly@@105) LayerTypeType)) (= (type $Heap@@10) (MapType0Type refType MapType1Type))) (= (type |f#0@@80|) HandleTypeType)) (= (type |run#0@@28|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $ly@@105 $Heap@@10 |f#0@@80| |run#0@@28|) (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $LZ $Heap@@10 |f#0@@80| |run#0@@28|))) :qid |unknown.0:0| :skolemid |2797| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 (AsFuelBottom $ly@@105) $Heap@@10 |f#0@@80| |run#0@@28|)) )))
(assert (forall ((Sequences._default.Apply$E@@1 T@U) (Sequences._default.Apply$R@@1 T@U) ($ly@@106 T@U) ($h0@@1 T@U) ($h1@@1 T@U) (|f#0@@81| T@U) (|run#0@@29| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@1) TyType) (= (type Sequences._default.Apply$R@@1) TyType)) (= (type $ly@@106) LayerTypeType)) (= (type $h0@@1) (MapType0Type refType MapType1Type))) (= (type $h1@@1) (MapType0Type refType MapType1Type))) (= (type |f#0@@81|) HandleTypeType)) (= (type |run#0@@29|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@1) ($IsGoodHeap $h1@@1)) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@81| |run#0@@29|) (and ($Is |f#0@@81| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1)) ($Is |run#0@@29| (TSeq Sequences._default.Apply$E@@1))))) (and ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1)))) (forall (($o@@39 T@U) ($f@@1 T@U) ) (! (let ((alpha@@8 (FieldTypeInv0 (type $f@@1)))) (=> (and (and (= (type $o@@39) refType) (= (type $f@@1) (FieldType alpha@@8))) (and (not (= $o@@39 null)) (exists ((|i#0@@33| Int) (|o#0| T@U) ) (!  (and (= (type |o#0|) refType) (and (and ($Is |o#0| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@33|) (< |i#0@@33| (|Seq#Length| |run#0@@29|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@81| (|Seq#Index| |run#0@@29| |i#0@@33|)) ($Box |o#0|))))) (= ($Box $o@@39) ($Box |o#0|)))) :qid |Sequencesidfy.133:15| :skolemid |2798| :pattern ( (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@81| (|Seq#Index| |run#0@@29| |i#0@@33|)) ($Box |o#0|))) )))) (= (MapType1Select (MapType0Select $h0@@1 $o@@39) $f@@1) (MapType1Select (MapType0Select $h1@@1 $o@@39) $f@@1)))) :qid |unknown.0:0| :skolemid |2799| :no-pattern (type $o@@39) :no-pattern (type $f@@1) :no-pattern (U_2_int $o@@39) :no-pattern (U_2_bool $o@@39) :no-pattern (U_2_int $f@@1) :no-pattern (U_2_bool $f@@1) ))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@106 $h0@@1 |f#0@@81| |run#0@@29|) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@106 $h1@@1 |f#0@@81| |run#0@@29|))) :qid |unknown.0:0| :skolemid |2800| :pattern ( ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@106 $h1@@1 |f#0@@81| |run#0@@29|)) )))
(assert  (=> true (forall ((Sequences._default.Apply$E@@2 T@U) (Sequences._default.Apply$R@@2 T@U) ($ly@@107 T@U) ($Heap@@11 T@U) (|f#0@@82| T@U) (|run#0@@30| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@2) TyType) (= (type Sequences._default.Apply$R@@2) TyType)) (= (type $ly@@107) LayerTypeType)) (= (type $Heap@@11) (MapType0Type refType MapType1Type))) (= (type |f#0@@82|) HandleTypeType)) (= (type |run#0@@30|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@11 |f#0@@82| |run#0@@30|) (and (and (and ($IsGoodHeap $Heap@@11) ($Is |f#0@@82| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2))) ($Is |run#0@@30| (TSeq Sequences._default.Apply$E@@2))) (forall ((|i#1@@6| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@6|) (< |i#1@@6| (|Seq#Length| |run#0@@30|))) (Requires1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@11 |f#0@@82| (|Seq#Index| |run#0@@30| |i#1@@6|)))) :qid |Sequencesidfy.130:21| :skolemid |2801| :pattern ( (|Seq#Index| |run#0@@30| |i#1@@6|)) ))))) (and (and (= (|Seq#Length| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@107 $Heap@@11 |f#0@@82| |run#0@@30|)) (|Seq#Length| |run#0@@30|)) (forall ((|i#2@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@3|) (< |i#2@@3| (|Seq#Length| |run#0@@30|))) (= (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@107 $Heap@@11 |f#0@@82| |run#0@@30|) |i#2@@3|) (Apply1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@11 |f#0@@82| (|Seq#Index| |run#0@@30| |i#2@@3|))))) :qid |Sequencesidfy.132:20| :skolemid |2802| :pattern ( (|Seq#Index| |run#0@@30| |i#2@@3|)) :pattern ( (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@107 $Heap@@11 |f#0@@82| |run#0@@30|) |i#2@@3|)) ))) ($Is (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@107 $Heap@@11 |f#0@@82| |run#0@@30|) (TSeq Sequences._default.Apply$R@@2)))) :qid |unknown.0:0| :skolemid |2803| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@107 $Heap@@11 |f#0@@82| |run#0@@30|)) ))))
(assert (forall ((Sequences._default.Apply$E@@3 T@U) (Sequences._default.Apply$R@@3 T@U) ($ly@@108 T@U) ($Heap@@12 T@U) (|f#0@@83| T@U) (|run#0@@31| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@3) TyType) (= (type Sequences._default.Apply$R@@3) TyType)) (= (type $ly@@108) LayerTypeType)) (= (type $Heap@@12) (MapType0Type refType MapType1Type))) (= (type |f#0@@83|) HandleTypeType)) (= (type |run#0@@31|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@12) ($Is |f#0@@83| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3))) ($Is |run#0@@31| (TSeq Sequences._default.Apply$E@@3)))) (= (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@108 $Heap@@12 |f#0@@83| |run#0@@31|) (forall ((|i#3@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@2|) (< |i#3@@2| (|Seq#Length| |run#0@@31|))) (Requires1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $Heap@@12 |f#0@@83| (|Seq#Index| |run#0@@31| |i#3@@2|)))) :qid |Sequencesidfy.130:21| :skolemid |2804| :pattern ( (|Seq#Index| |run#0@@31| |i#3@@2|)) )))) :qid |unknown.0:0| :skolemid |2805| :pattern ( (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@108 $Heap@@12 |f#0@@83| |run#0@@31|) ($IsGoodHeap $Heap@@12)) )))
(assert  (=> true (forall ((Sequences._default.Apply$E@@4 T@U) (Sequences._default.Apply$R@@4 T@U) ($ly@@109 T@U) ($Heap@@13 T@U) (|f#0@@84| T@U) (|run#0@@32| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@4) TyType) (= (type Sequences._default.Apply$R@@4) TyType)) (= (type $ly@@109) LayerTypeType)) (= (type $Heap@@13) (MapType0Type refType MapType1Type))) (= (type |f#0@@84|) HandleTypeType)) (= (type |run#0@@32|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@13 |f#0@@84| |run#0@@32|) (and (and (and ($IsGoodHeap $Heap@@13) ($Is |f#0@@84| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4))) ($Is |run#0@@32| (TSeq Sequences._default.Apply$E@@4))) (forall ((|i#3@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@3|) (< |i#3@@3| (|Seq#Length| |run#0@@32|))) (Requires1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@13 |f#0@@84| (|Seq#Index| |run#0@@32| |i#3@@3|)))) :qid |Sequencesidfy.130:21| :skolemid |2804| :pattern ( (|Seq#Index| |run#0@@32| |i#3@@3|)) ))))) (and (=> (not (= (|Seq#Length| |run#0@@32|) (LitInt 0))) (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@13 |f#0@@84| (|Seq#Drop| |run#0@@32| (LitInt 1)))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@109) $Heap@@13 |f#0@@84| |run#0@@32|) (ite (= (|Seq#Length| |run#0@@32|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Apply1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@13 |f#0@@84| (|Seq#Index| |run#0@@32| (LitInt 0)))) (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $ly@@109 $Heap@@13 |f#0@@84| (|Seq#Drop| |run#0@@32| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |2806| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@109) $Heap@@13 |f#0@@84| |run#0@@32|) ($IsGoodHeap $Heap@@13)) ))))
(assert (forall ((arg0@@535 T@U) (arg1@@233 T@U) (arg2@@143 T@U) (arg3@@100 T@U) (arg4@@77 T@U) (arg5@@48 T@U) ) (! (= (type (Sequences.__default.ApplyOpaque arg0@@535 arg1@@233 arg2@@143 arg3@@100 arg4@@77 arg5@@48)) (SeqType BoxType)) :qid |funType:Sequences.__default.ApplyOpaque| :pattern ( (Sequences.__default.ApplyOpaque arg0@@535 arg1@@233 arg2@@143 arg3@@100 arg4@@77 arg5@@48)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E T@U) (Sequences._default.ApplyOpaque$R T@U) ($ly@@110 T@U) ($Heap@@14 T@U) (|f#0@@85| T@U) (|run#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E) TyType) (= (type Sequences._default.ApplyOpaque$R) TyType)) (= (type $ly@@110) LayerTypeType)) (= (type $Heap@@14) (MapType0Type refType MapType1Type))) (= (type |f#0@@85|) HandleTypeType)) (= (type |run#0@@33|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@110) $Heap@@14 |f#0@@85| |run#0@@33|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R $ly@@110 $Heap@@14 |f#0@@85| |run#0@@33|))) :qid |unknown.0:0| :skolemid |2807| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@110) $Heap@@14 |f#0@@85| |run#0@@33|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@0 T@U) (Sequences._default.ApplyOpaque$R@@0 T@U) ($ly@@111 T@U) ($Heap@@15 T@U) (|f#0@@86| T@U) (|run#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@0) TyType) (= (type Sequences._default.ApplyOpaque$R@@0) TyType)) (= (type $ly@@111) LayerTypeType)) (= (type $Heap@@15) (MapType0Type refType MapType1Type))) (= (type |f#0@@86|) HandleTypeType)) (= (type |run#0@@34|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $ly@@111 $Heap@@15 |f#0@@86| |run#0@@34|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $LZ $Heap@@15 |f#0@@86| |run#0@@34|))) :qid |unknown.0:0| :skolemid |2808| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 (AsFuelBottom $ly@@111) $Heap@@15 |f#0@@86| |run#0@@34|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@1 T@U) (Sequences._default.ApplyOpaque$R@@1 T@U) ($ly@@112 T@U) ($h0@@2 T@U) ($h1@@2 T@U) (|f#0@@87| T@U) (|run#0@@35| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@1) TyType) (= (type Sequences._default.ApplyOpaque$R@@1) TyType)) (= (type $ly@@112) LayerTypeType)) (= (type $h0@@2) (MapType0Type refType MapType1Type))) (= (type $h1@@2) (MapType0Type refType MapType1Type))) (= (type |f#0@@87|) HandleTypeType)) (= (type |run#0@@35|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@2) ($IsGoodHeap $h1@@2)) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@87| |run#0@@35|) (and ($Is |f#0@@87| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1)) ($Is |run#0@@35| (TSeq Sequences._default.ApplyOpaque$E@@1))))) (and ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2)))) (forall (($o@@40 T@U) ($f@@2 T@U) ) (! (let ((alpha@@9 (FieldTypeInv0 (type $f@@2)))) (=> (and (and (= (type $o@@40) refType) (= (type $f@@2) (FieldType alpha@@9))) (and (not (= $o@@40 null)) (exists ((|i#0@@34| Int) (|o#0@@0| T@U) ) (!  (and (= (type |o#0@@0|) refType) (and (and ($Is |o#0@@0| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@34|) (< |i#0@@34| (|Seq#Length| |run#0@@35|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@87| (|Seq#Index| |run#0@@35| |i#0@@34|)) ($Box |o#0@@0|))))) (= ($Box $o@@40) ($Box |o#0@@0|)))) :qid |Sequencesidfy.144:15| :skolemid |2809| :pattern ( (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@87| (|Seq#Index| |run#0@@35| |i#0@@34|)) ($Box |o#0@@0|))) )))) (= (MapType1Select (MapType0Select $h0@@2 $o@@40) $f@@2) (MapType1Select (MapType0Select $h1@@2 $o@@40) $f@@2)))) :qid |unknown.0:0| :skolemid |2810| :no-pattern (type $o@@40) :no-pattern (type $f@@2) :no-pattern (U_2_int $o@@40) :no-pattern (U_2_bool $o@@40) :no-pattern (U_2_int $f@@2) :no-pattern (U_2_bool $f@@2) ))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@112 $h0@@2 |f#0@@87| |run#0@@35|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@112 $h1@@2 |f#0@@87| |run#0@@35|))) :qid |unknown.0:0| :skolemid |2811| :pattern ( ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@112 $h1@@2 |f#0@@87| |run#0@@35|)) )))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@2 T@U) (Sequences._default.ApplyOpaque$R@@2 T@U) ($ly@@113 T@U) ($Heap@@16 T@U) (|f#0@@88| T@U) (|run#0@@36| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@2) TyType) (= (type Sequences._default.ApplyOpaque$R@@2) TyType)) (= (type $ly@@113) LayerTypeType)) (= (type $Heap@@16) (MapType0Type refType MapType1Type))) (= (type |f#0@@88|) HandleTypeType)) (= (type |run#0@@36|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@16 |f#0@@88| |run#0@@36|) (and (and (and ($IsGoodHeap $Heap@@16) ($Is |f#0@@88| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2))) ($Is |run#0@@36| (TSeq Sequences._default.ApplyOpaque$E@@2))) (forall ((|i#1@@7| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@7|) (< |i#1@@7| (|Seq#Length| |run#0@@36|))) (Requires1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@16 |f#0@@88| (|Seq#Index| |run#0@@36| |i#1@@7|)))) :qid |Sequencesidfy.141:21| :skolemid |2812| :pattern ( (|Seq#Index| |run#0@@36| |i#1@@7|)) ))))) (and (and (= (|Seq#Length| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@113 $Heap@@16 |f#0@@88| |run#0@@36|)) (|Seq#Length| |run#0@@36|)) (forall ((|i#2@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@4|) (< |i#2@@4| (|Seq#Length| |run#0@@36|))) (= (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@113 $Heap@@16 |f#0@@88| |run#0@@36|) |i#2@@4|) (Apply1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@16 |f#0@@88| (|Seq#Index| |run#0@@36| |i#2@@4|))))) :qid |Sequencesidfy.143:20| :skolemid |2813| :pattern ( (|Seq#Index| |run#0@@36| |i#2@@4|)) :pattern ( (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@113 $Heap@@16 |f#0@@88| |run#0@@36|) |i#2@@4|)) ))) ($Is (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@113 $Heap@@16 |f#0@@88| |run#0@@36|) (TSeq Sequences._default.ApplyOpaque$R@@2)))) :qid |unknown.0:0| :skolemid |2814| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@113 $Heap@@16 |f#0@@88| |run#0@@36|)) ))))
(assert (forall ((Sequences._default.ApplyOpaque$E@@3 T@U) (Sequences._default.ApplyOpaque$R@@3 T@U) ($ly@@114 T@U) ($Heap@@17 T@U) (|f#0@@89| T@U) (|run#0@@37| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@3) TyType) (= (type Sequences._default.ApplyOpaque$R@@3) TyType)) (= (type $ly@@114) LayerTypeType)) (= (type $Heap@@17) (MapType0Type refType MapType1Type))) (= (type |f#0@@89|) HandleTypeType)) (= (type |run#0@@37|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@17) ($Is |f#0@@89| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3))) ($Is |run#0@@37| (TSeq Sequences._default.ApplyOpaque$E@@3)))) (= (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@114 $Heap@@17 |f#0@@89| |run#0@@37|) (forall ((|i#3@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@4|) (< |i#3@@4| (|Seq#Length| |run#0@@37|))) (Requires1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $Heap@@17 |f#0@@89| (|Seq#Index| |run#0@@37| |i#3@@4|)))) :qid |Sequencesidfy.141:21| :skolemid |2815| :pattern ( (|Seq#Index| |run#0@@37| |i#3@@4|)) )))) :qid |unknown.0:0| :skolemid |2816| :pattern ( (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@114 $Heap@@17 |f#0@@89| |run#0@@37|) ($IsGoodHeap $Heap@@17)) )))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@4 T@U) (Sequences._default.ApplyOpaque$R@@4 T@U) ($ly@@115 T@U) ($Heap@@18 T@U) (|f#0@@90| T@U) (|run#0@@38| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@4) TyType) (= (type Sequences._default.ApplyOpaque$R@@4) TyType)) (= (type $ly@@115) LayerTypeType)) (= (type $Heap@@18) (MapType0Type refType MapType1Type))) (= (type |f#0@@90|) HandleTypeType)) (= (type |run#0@@38|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@18 |f#0@@90| |run#0@@38|) (and (and (and ($IsGoodHeap $Heap@@18) ($Is |f#0@@90| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4))) ($Is |run#0@@38| (TSeq Sequences._default.ApplyOpaque$E@@4))) (forall ((|i#3@@5| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@5|) (< |i#3@@5| (|Seq#Length| |run#0@@38|))) (Requires1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@18 |f#0@@90| (|Seq#Index| |run#0@@38| |i#3@@5|)))) :qid |Sequencesidfy.141:21| :skolemid |2815| :pattern ( (|Seq#Index| |run#0@@38| |i#3@@5|)) ))))) (and (|Sequences.__default.Apply#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@18 |f#0@@90| |run#0@@38|) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@115) $Heap@@18 |f#0@@90| |run#0@@38|) (Sequences.__default.Apply Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $LZ) $Heap@@18 |f#0@@90| |run#0@@38|)))) :qid |unknown.0:0| :skolemid |2817| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@115) $Heap@@18 |f#0@@90| |run#0@@38|) ($IsGoodHeap $Heap@@18)) ))))
(assert (forall ((arg0@@536 T@U) (arg1@@234 T@U) (arg2@@144 T@U) (arg3@@101 T@U) (arg4@@78 T@U) ) (! (= (type (Sequences.__default.Filter arg0@@536 arg1@@234 arg2@@144 arg3@@101 arg4@@78)) (SeqType BoxType)) :qid |funType:Sequences.__default.Filter| :pattern ( (Sequences.__default.Filter arg0@@536 arg1@@234 arg2@@144 arg3@@101 arg4@@78)) )))
(assert (forall ((Sequences._default.Filter$E T@U) ($ly@@116 T@U) ($Heap@@19 T@U) (|f#0@@91| T@U) (|run#0@@39| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E) TyType) (= (type $ly@@116) LayerTypeType)) (= (type $Heap@@19) (MapType0Type refType MapType1Type))) (= (type |f#0@@91|) HandleTypeType)) (= (type |run#0@@39|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@116) $Heap@@19 |f#0@@91| |run#0@@39|) (Sequences.__default.Filter Sequences._default.Filter$E $ly@@116 $Heap@@19 |f#0@@91| |run#0@@39|))) :qid |unknown.0:0| :skolemid |2818| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@116) $Heap@@19 |f#0@@91| |run#0@@39|)) )))
(assert (forall ((Sequences._default.Filter$E@@0 T@U) ($ly@@117 T@U) ($Heap@@20 T@U) (|f#0@@92| T@U) (|run#0@@40| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E@@0) TyType) (= (type $ly@@117) LayerTypeType)) (= (type $Heap@@20) (MapType0Type refType MapType1Type))) (= (type |f#0@@92|) HandleTypeType)) (= (type |run#0@@40|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@0 $ly@@117 $Heap@@20 |f#0@@92| |run#0@@40|) (Sequences.__default.Filter Sequences._default.Filter$E@@0 $LZ $Heap@@20 |f#0@@92| |run#0@@40|))) :qid |unknown.0:0| :skolemid |2819| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@0 (AsFuelBottom $ly@@117) $Heap@@20 |f#0@@92| |run#0@@40|)) )))
(assert (forall ((Sequences._default.Filter$E@@1 T@U) ($ly@@118 T@U) ($h0@@3 T@U) ($h1@@3 T@U) (|f#0@@93| T@U) (|run#0@@41| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.Filter$E@@1) TyType) (= (type $ly@@118) LayerTypeType)) (= (type $h0@@3) (MapType0Type refType MapType1Type))) (= (type $h1@@3) (MapType0Type refType MapType1Type))) (= (type |f#0@@93|) HandleTypeType)) (= (type |run#0@@41|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@3) ($IsGoodHeap $h1@@3)) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@1 $h0@@3 |f#0@@93| |run#0@@41|) (and ($Is |f#0@@93| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@1 TBool)) ($Is |run#0@@41| (TSeq Sequences._default.Filter$E@@1))))) (and ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3)))) (forall (($o@@41 T@U) ($f@@3 T@U) ) (! (let ((alpha@@10 (FieldTypeInv0 (type $f@@3)))) (=> (and (and (= (type $o@@41) refType) (= (type $f@@3) (FieldType alpha@@10))) (and (not (= $o@@41 null)) (exists ((|_x0#0| T@U) (|_o0#0| T@U) ) (!  (and (and (= (type |_x0#0|) BoxType) (= (type |_o0#0|) refType)) (and (and (and ($IsBox |_x0#0| Sequences._default.Filter$E@@1) ($Is |_o0#0| Tclass._System.object?)) (U_2_bool (MapType0Select (Reads1 Sequences._default.Filter$E@@1 TBool $h0@@3 |f#0@@93| |_x0#0|) ($Box |_o0#0|)))) (= ($Box $o@@41) ($Box |_o0#0|)))) :qid |Sequencesidfy.153:13| :skolemid |2820| :no-pattern (type |_x0#0|) :no-pattern (type |_o0#0|) :no-pattern (U_2_int |_x0#0|) :no-pattern (U_2_bool |_x0#0|) :no-pattern (U_2_int |_o0#0|) :no-pattern (U_2_bool |_o0#0|) )))) (= (MapType1Select (MapType0Select $h0@@3 $o@@41) $f@@3) (MapType1Select (MapType0Select $h1@@3 $o@@41) $f@@3)))) :qid |unknown.0:0| :skolemid |2821| :no-pattern (type $o@@41) :no-pattern (type $f@@3) :no-pattern (U_2_int $o@@41) :no-pattern (U_2_bool $o@@41) :no-pattern (U_2_int $f@@3) :no-pattern (U_2_bool $f@@3) ))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@118 $h0@@3 |f#0@@93| |run#0@@41|) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@118 $h1@@3 |f#0@@93| |run#0@@41|))) :qid |unknown.0:0| :skolemid |2822| :pattern ( ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@118 $h1@@3 |f#0@@93| |run#0@@41|)) )))
(assert  (=> true (forall ((Sequences._default.Filter$E@@2 T@U) ($ly@@119 T@U) ($Heap@@21 T@U) (|f#0@@94| T@U) (|run#0@@42| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@2) TyType) (= (type $ly@@119) LayerTypeType)) (= (type $Heap@@21) (MapType0Type refType MapType1Type))) (= (type |f#0@@94|) HandleTypeType)) (= (type |run#0@@42|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@2 $Heap@@21 |f#0@@94| |run#0@@42|) (and (and (and ($IsGoodHeap $Heap@@21) ($Is |f#0@@94| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@2 TBool))) ($Is |run#0@@42| (TSeq Sequences._default.Filter$E@@2))) (forall ((|i#0@@35| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@35|) (< |i#0@@35| (|Seq#Length| |run#0@@42|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@21 |f#0@@94| (|Seq#Index| |run#0@@42| |i#0@@35|)))) :qid |Sequencesidfy.150:21| :skolemid |2823| :pattern ( (|Seq#Index| |run#0@@42| |i#0@@35|)) ))))) (and (and (<= (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@119 $Heap@@21 |f#0@@94| |run#0@@42|)) (|Seq#Length| |run#0@@42|)) (forall ((|i#1@@8| Int) ) (!  (=> (<= (LitInt 0) |i#1@@8|) (=> (and (< |i#1@@8| (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@119 $Heap@@21 |f#0@@94| |run#0@@42|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@21 |f#0@@94| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@119 $Heap@@21 |f#0@@94| |run#0@@42|) |i#1@@8|))) (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@2 TBool $Heap@@21 |f#0@@94| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@119 $Heap@@21 |f#0@@94| |run#0@@42|) |i#1@@8|)))))) :qid |Sequencesidfy.152:20| :skolemid |2824| :pattern ( (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@119 $Heap@@21 |f#0@@94| |run#0@@42|) |i#1@@8|)) ))) ($Is (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@119 $Heap@@21 |f#0@@94| |run#0@@42|) (TSeq Sequences._default.Filter$E@@2)))) :qid |unknown.0:0| :skolemid |2825| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@119 $Heap@@21 |f#0@@94| |run#0@@42|)) ))))
(assert (forall ((Sequences._default.Filter$E@@3 T@U) ($ly@@120 T@U) ($Heap@@22 T@U) (|f#0@@95| T@U) (|run#0@@43| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@3) TyType) (= (type $ly@@120) LayerTypeType)) (= (type $Heap@@22) (MapType0Type refType MapType1Type))) (= (type |f#0@@95|) HandleTypeType)) (= (type |run#0@@43|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@22) ($Is |f#0@@95| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@3 TBool))) ($Is |run#0@@43| (TSeq Sequences._default.Filter$E@@3)))) (= (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@120 $Heap@@22 |f#0@@95| |run#0@@43|) (forall ((|i#2@@5| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@5|) (< |i#2@@5| (|Seq#Length| |run#0@@43|))) (Requires1 Sequences._default.Filter$E@@3 TBool $Heap@@22 |f#0@@95| (|Seq#Index| |run#0@@43| |i#2@@5|)))) :qid |Sequencesidfy.150:21| :skolemid |2826| :pattern ( (|Seq#Index| |run#0@@43| |i#2@@5|)) )))) :qid |unknown.0:0| :skolemid |2827| :pattern ( (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@120 $Heap@@22 |f#0@@95| |run#0@@43|) ($IsGoodHeap $Heap@@22)) )))
(assert  (=> true (forall ((Sequences._default.Filter$E@@4 T@U) ($ly@@121 T@U) ($Heap@@23 T@U) (|f#0@@96| T@U) (|run#0@@44| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@4) TyType) (= (type $ly@@121) LayerTypeType)) (= (type $Heap@@23) (MapType0Type refType MapType1Type))) (= (type |f#0@@96|) HandleTypeType)) (= (type |run#0@@44|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@23 |f#0@@96| |run#0@@44|) (and (and (and ($IsGoodHeap $Heap@@23) ($Is |f#0@@96| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@4 TBool))) ($Is |run#0@@44| (TSeq Sequences._default.Filter$E@@4))) (forall ((|i#2@@6| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@6|) (< |i#2@@6| (|Seq#Length| |run#0@@44|))) (Requires1 Sequences._default.Filter$E@@4 TBool $Heap@@23 |f#0@@96| (|Seq#Index| |run#0@@44| |i#2@@6|)))) :qid |Sequencesidfy.150:21| :skolemid |2826| :pattern ( (|Seq#Index| |run#0@@44| |i#2@@6|)) ))))) (and (=> (not (= (|Seq#Length| |run#0@@44|) (LitInt 0))) (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@23 |f#0@@96| (|Seq#Drop| |run#0@@44| (LitInt 1)))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@121) $Heap@@23 |f#0@@96| |run#0@@44|) (ite (= (|Seq#Length| |run#0@@44|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ite (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@4 TBool $Heap@@23 |f#0@@96| (|Seq#Index| |run#0@@44| (LitInt 0))))) (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |run#0@@44| (LitInt 0))) (|Seq#Empty| BoxType)) (Sequences.__default.Filter Sequences._default.Filter$E@@4 $ly@@121 $Heap@@23 |f#0@@96| (|Seq#Drop| |run#0@@44| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |2828| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@121) $Heap@@23 |f#0@@96| |run#0@@44|) ($IsGoodHeap $Heap@@23)) ))))
(assert (forall ((arg0@@537 T@U) (arg1@@235 T@U) (arg2@@145 T@U) (arg3@@102 T@U) (arg4@@79 T@U) (arg5@@49 T@U) ) (! (= (type (Sequences.__default.FoldLeft arg0@@537 arg1@@235 arg2@@145 arg3@@102 arg4@@79 arg5@@49)) BoxType) :qid |funType:Sequences.__default.FoldLeft| :pattern ( (Sequences.__default.FoldLeft arg0@@537 arg1@@235 arg2@@145 arg3@@102 arg4@@79 arg5@@49)) )))
(assert (forall ((Sequences._default.FoldLeft$A T@U) (Sequences._default.FoldLeft$E T@U) ($ly@@122 T@U) (|f#0@@97| T@U) (|init#0| T@U) (|run#0@@45| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A) TyType) (= (type Sequences._default.FoldLeft$E) TyType)) (= (type $ly@@122) LayerTypeType)) (= (type |f#0@@97|) HandleTypeType)) (= (type |init#0|) BoxType)) (= (type |run#0@@45|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@122) |f#0@@97| |init#0| |run#0@@45|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E $ly@@122 |f#0@@97| |init#0| |run#0@@45|))) :qid |unknown.0:0| :skolemid |2829| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@122) |f#0@@97| |init#0| |run#0@@45|)) )))
(assert (forall ((Sequences._default.FoldLeft$A@@0 T@U) (Sequences._default.FoldLeft$E@@0 T@U) ($ly@@123 T@U) (|f#0@@98| T@U) (|init#0@@0| T@U) (|run#0@@46| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@0) TyType) (= (type Sequences._default.FoldLeft$E@@0) TyType)) (= (type $ly@@123) LayerTypeType)) (= (type |f#0@@98|) HandleTypeType)) (= (type |init#0@@0|) BoxType)) (= (type |run#0@@46|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $ly@@123 |f#0@@98| |init#0@@0| |run#0@@46|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $LZ |f#0@@98| |init#0@@0| |run#0@@46|))) :qid |unknown.0:0| :skolemid |2830| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 (AsFuelBottom $ly@@123) |f#0@@98| |init#0@@0| |run#0@@46|)) )))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@1 T@U) (Sequences._default.FoldLeft$E@@1 T@U) ($ly@@124 T@U) (|f#0@@99| T@U) (|init#0@@1| T@U) (|run#0@@47| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@1) TyType) (= (type Sequences._default.FoldLeft$E@@1) TyType)) (= (type $ly@@124) LayerTypeType)) (= (type |f#0@@99|) HandleTypeType)) (= (type |init#0@@1|) BoxType)) (= (type |run#0@@47|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 |f#0@@99| |init#0@@1| |run#0@@47|) (and (and ($Is |f#0@@99| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 Sequences._default.FoldLeft$A@@1)) ($IsBox |init#0@@1| Sequences._default.FoldLeft$A@@1)) ($Is |run#0@@47| (TSeq Sequences._default.FoldLeft$E@@1))))) ($IsBox (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@124 |f#0@@99| |init#0@@1| |run#0@@47|) Sequences._default.FoldLeft$A@@1)) :qid |unknown.0:0| :skolemid |2831| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@124 |f#0@@99| |init#0@@1| |run#0@@47|)) ))))
(assert (forall ((Sequences._default.FoldLeft$A@@2 T@U) (Sequences._default.FoldLeft$E@@2 T@U) ($ly@@125 T@U) ($Heap@@24 T@U) (|f#0@@100| T@U) (|init#0@@2| T@U) (|run#0@@48| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@2) TyType) (= (type Sequences._default.FoldLeft$E@@2) TyType)) (= (type $ly@@125) LayerTypeType)) (= (type $Heap@@24) (MapType0Type refType MapType1Type))) (= (type |f#0@@100|) HandleTypeType)) (= (type |init#0@@2|) BoxType)) (= (type |run#0@@48|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@24) ($Is |f#0@@100| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 Sequences._default.FoldLeft$A@@2))) ($IsBox |init#0@@2| Sequences._default.FoldLeft$A@@2)) ($Is |run#0@@48| (TSeq Sequences._default.FoldLeft$E@@2)))) (= (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@125 |f#0@@100| |init#0@@2| |run#0@@48|) true)) :qid |unknown.0:0| :skolemid |2832| :pattern ( (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@125 |f#0@@100| |init#0@@2| |run#0@@48|) ($IsGoodHeap $Heap@@24)) )))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@3 T@U) (Sequences._default.FoldLeft$E@@3 T@U) ($ly@@126 T@U) ($Heap@@25 T@U) (|f#0@@101| T@U) (|init#0@@3| T@U) (|run#0@@49| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@3) TyType) (= (type Sequences._default.FoldLeft$E@@3) TyType)) (= (type $ly@@126) LayerTypeType)) (= (type $Heap@@25) (MapType0Type refType MapType1Type))) (= (type |f#0@@101|) HandleTypeType)) (= (type |init#0@@3|) BoxType)) (= (type |run#0@@49|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@101| |init#0@@3| |run#0@@49|) (and (and (and ($IsGoodHeap $Heap@@25) ($Is |f#0@@101| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3))) ($IsBox |init#0@@3| Sequences._default.FoldLeft$A@@3)) ($Is |run#0@@49| (TSeq Sequences._default.FoldLeft$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@49|) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@101| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@25 |f#0@@101| |init#0@@3| (|Seq#Index| |run#0@@49| (LitInt 0))) (|Seq#Drop| |run#0@@49| (LitInt 1)))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@126) |f#0@@101| |init#0@@3| |run#0@@49|) (ite (= (|Seq#Length| |run#0@@49|) (LitInt 0)) |init#0@@3| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 $ly@@126 |f#0@@101| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@25 |f#0@@101| |init#0@@3| (|Seq#Index| |run#0@@49| (LitInt 0))) (|Seq#Drop| |run#0@@49| (LitInt 1))))))) :qid |unknown.0:0| :skolemid |2833| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@126) |f#0@@101| |init#0@@3| |run#0@@49|) ($IsGoodHeap $Heap@@25)) ))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@4 T@U) (Sequences._default.FoldLeft$E@@4 T@U) ($ly@@127 T@U) ($Heap@@26 T@U) (|f#0@@102| T@U) (|init#0@@4| T@U) (|run#0@@50| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@4) TyType) (= (type Sequences._default.FoldLeft$E@@4) TyType)) (= (type $ly@@127) LayerTypeType)) (= (type $Heap@@26) (MapType0Type refType MapType1Type))) (= (type |f#0@@102|) HandleTypeType)) (= (type |init#0@@4|) BoxType)) (= (type |run#0@@50|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@102| |init#0@@4| (Lit |run#0@@50|)) (and (and (and ($IsGoodHeap $Heap@@26) ($Is |f#0@@102| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4))) ($IsBox |init#0@@4| Sequences._default.FoldLeft$A@@4)) ($Is |run#0@@50| (TSeq Sequences._default.FoldLeft$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@50|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@102| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@26 |f#0@@102| |init#0@@4| (|Seq#Index| (Lit |run#0@@50|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@50|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@127) |f#0@@102| |init#0@@4| (Lit |run#0@@50|)) (ite (= (|Seq#Length| (Lit |run#0@@50|)) (LitInt 0)) |init#0@@4| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@127) |f#0@@102| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@26 |f#0@@102| |init#0@@4| (|Seq#Index| (Lit |run#0@@50|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@50|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2834| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@127) |f#0@@102| |init#0@@4| (Lit |run#0@@50|)) ($IsGoodHeap $Heap@@26)) ))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@5 T@U) (Sequences._default.FoldLeft$E@@5 T@U) ($ly@@128 T@U) ($Heap@@27 T@U) (|f#0@@103| T@U) (|init#0@@5| T@U) (|run#0@@51| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@5) TyType) (= (type Sequences._default.FoldLeft$E@@5) TyType)) (= (type $ly@@128) LayerTypeType)) (= (type $Heap@@27) (MapType0Type refType MapType1Type))) (= (type |f#0@@103|) HandleTypeType)) (= (type |init#0@@5|) BoxType)) (= (type |run#0@@51|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@103|) (Lit |init#0@@5|) (Lit |run#0@@51|)) (and (and (and ($IsGoodHeap $Heap@@27) ($Is |f#0@@103| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5))) ($IsBox |init#0@@5| Sequences._default.FoldLeft$A@@5)) ($Is |run#0@@51| (TSeq Sequences._default.FoldLeft$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@51|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@103|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@27 (Lit |f#0@@103|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@51|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@51|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@128) (Lit |f#0@@103|) (Lit |init#0@@5|) (Lit |run#0@@51|)) (ite (= (|Seq#Length| (Lit |run#0@@51|)) (LitInt 0)) |init#0@@5| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@128) (Lit |f#0@@103|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@27 (Lit |f#0@@103|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@51|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@51|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2835| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@128) (Lit |f#0@@103|) (Lit |init#0@@5|) (Lit |run#0@@51|)) ($IsGoodHeap $Heap@@27)) ))))
(assert (forall ((arg0@@538 T@U) (arg1@@236 T@U) (arg2@@146 T@U) (arg3@@103 T@U) (arg4@@80 T@U) (arg5@@50 T@U) ) (! (= (type (Sequences.__default.FoldRight arg0@@538 arg1@@236 arg2@@146 arg3@@103 arg4@@80 arg5@@50)) BoxType) :qid |funType:Sequences.__default.FoldRight| :pattern ( (Sequences.__default.FoldRight arg0@@538 arg1@@236 arg2@@146 arg3@@103 arg4@@80 arg5@@50)) )))
(assert (forall ((Sequences._default.FoldRight$A T@U) (Sequences._default.FoldRight$E T@U) ($ly@@129 T@U) (|f#0@@104| T@U) (|init#0@@6| T@U) (|run#0@@52| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A) TyType) (= (type Sequences._default.FoldRight$E) TyType)) (= (type $ly@@129) LayerTypeType)) (= (type |f#0@@104|) HandleTypeType)) (= (type |init#0@@6|) BoxType)) (= (type |run#0@@52|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@129) |f#0@@104| |init#0@@6| |run#0@@52|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E $ly@@129 |f#0@@104| |init#0@@6| |run#0@@52|))) :qid |unknown.0:0| :skolemid |2836| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@129) |f#0@@104| |init#0@@6| |run#0@@52|)) )))
(assert (forall ((Sequences._default.FoldRight$A@@0 T@U) (Sequences._default.FoldRight$E@@0 T@U) ($ly@@130 T@U) (|f#0@@105| T@U) (|init#0@@7| T@U) (|run#0@@53| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@0) TyType) (= (type Sequences._default.FoldRight$E@@0) TyType)) (= (type $ly@@130) LayerTypeType)) (= (type |f#0@@105|) HandleTypeType)) (= (type |init#0@@7|) BoxType)) (= (type |run#0@@53|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $ly@@130 |f#0@@105| |init#0@@7| |run#0@@53|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $LZ |f#0@@105| |init#0@@7| |run#0@@53|))) :qid |unknown.0:0| :skolemid |2837| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 (AsFuelBottom $ly@@130) |f#0@@105| |init#0@@7| |run#0@@53|)) )))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@1 T@U) (Sequences._default.FoldRight$E@@1 T@U) ($ly@@131 T@U) (|f#0@@106| T@U) (|init#0@@8| T@U) (|run#0@@54| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@1) TyType) (= (type Sequences._default.FoldRight$E@@1) TyType)) (= (type $ly@@131) LayerTypeType)) (= (type |f#0@@106|) HandleTypeType)) (= (type |init#0@@8|) BoxType)) (= (type |run#0@@54|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 |f#0@@106| |init#0@@8| |run#0@@54|) (and (and ($Is |f#0@@106| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 Sequences._default.FoldRight$A@@1)) ($IsBox |init#0@@8| Sequences._default.FoldRight$A@@1)) ($Is |run#0@@54| (TSeq Sequences._default.FoldRight$E@@1))))) ($IsBox (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@131 |f#0@@106| |init#0@@8| |run#0@@54|) Sequences._default.FoldRight$A@@1)) :qid |unknown.0:0| :skolemid |2838| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@131 |f#0@@106| |init#0@@8| |run#0@@54|)) ))))
(assert (forall ((Sequences._default.FoldRight$A@@2 T@U) (Sequences._default.FoldRight$E@@2 T@U) ($ly@@132 T@U) ($Heap@@28 T@U) (|f#0@@107| T@U) (|init#0@@9| T@U) (|run#0@@55| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@2) TyType) (= (type Sequences._default.FoldRight$E@@2) TyType)) (= (type $ly@@132) LayerTypeType)) (= (type $Heap@@28) (MapType0Type refType MapType1Type))) (= (type |f#0@@107|) HandleTypeType)) (= (type |init#0@@9|) BoxType)) (= (type |run#0@@55|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@28) ($Is |f#0@@107| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 Sequences._default.FoldRight$A@@2))) ($IsBox |init#0@@9| Sequences._default.FoldRight$A@@2)) ($Is |run#0@@55| (TSeq Sequences._default.FoldRight$E@@2)))) (= (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@132 |f#0@@107| |init#0@@9| |run#0@@55|) true)) :qid |unknown.0:0| :skolemid |2839| :pattern ( (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@132 |f#0@@107| |init#0@@9| |run#0@@55|) ($IsGoodHeap $Heap@@28)) )))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@3 T@U) (Sequences._default.FoldRight$E@@3 T@U) ($ly@@133 T@U) ($Heap@@29 T@U) (|f#0@@108| T@U) (|init#0@@10| T@U) (|run#0@@56| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@3) TyType) (= (type Sequences._default.FoldRight$E@@3) TyType)) (= (type $ly@@133) LayerTypeType)) (= (type $Heap@@29) (MapType0Type refType MapType1Type))) (= (type |f#0@@108|) HandleTypeType)) (= (type |init#0@@10|) BoxType)) (= (type |run#0@@56|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@108| |init#0@@10| |run#0@@56|) (and (and (and ($IsGoodHeap $Heap@@29) ($Is |f#0@@108| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3))) ($IsBox |init#0@@10| Sequences._default.FoldRight$A@@3)) ($Is |run#0@@56| (TSeq Sequences._default.FoldRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@56|) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@108| |init#0@@10| (|Seq#Drop| |run#0@@56| (LitInt 1)))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@133) |f#0@@108| |init#0@@10| |run#0@@56|) (ite (= (|Seq#Length| |run#0@@56|) (LitInt 0)) |init#0@@10| (Apply2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3 $Heap@@29 |f#0@@108| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 $ly@@133 |f#0@@108| |init#0@@10| (|Seq#Drop| |run#0@@56| (LitInt 1))) (|Seq#Index| |run#0@@56| (LitInt 0))))))) :qid |unknown.0:0| :skolemid |2840| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@133) |f#0@@108| |init#0@@10| |run#0@@56|) ($IsGoodHeap $Heap@@29)) ))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@4 T@U) (Sequences._default.FoldRight$E@@4 T@U) ($ly@@134 T@U) ($Heap@@30 T@U) (|f#0@@109| T@U) (|init#0@@11| T@U) (|run#0@@57| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@4) TyType) (= (type Sequences._default.FoldRight$E@@4) TyType)) (= (type $ly@@134) LayerTypeType)) (= (type $Heap@@30) (MapType0Type refType MapType1Type))) (= (type |f#0@@109|) HandleTypeType)) (= (type |init#0@@11|) BoxType)) (= (type |run#0@@57|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@109| |init#0@@11| (Lit |run#0@@57|)) (and (and (and ($IsGoodHeap $Heap@@30) ($Is |f#0@@109| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4))) ($IsBox |init#0@@11| Sequences._default.FoldRight$A@@4)) ($Is |run#0@@57| (TSeq Sequences._default.FoldRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@57|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@109| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@57|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@134) |f#0@@109| |init#0@@11| (Lit |run#0@@57|)) (ite (= (|Seq#Length| (Lit |run#0@@57|)) (LitInt 0)) |init#0@@11| (Apply2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4 $Heap@@30 |f#0@@109| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@134) |f#0@@109| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@57|) (LitInt 1)))) (|Seq#Index| (Lit |run#0@@57|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |2841| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@134) |f#0@@109| |init#0@@11| (Lit |run#0@@57|)) ($IsGoodHeap $Heap@@30)) ))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@5 T@U) (Sequences._default.FoldRight$E@@5 T@U) ($ly@@135 T@U) ($Heap@@31 T@U) (|f#0@@110| T@U) (|init#0@@12| T@U) (|run#0@@58| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@5) TyType) (= (type Sequences._default.FoldRight$E@@5) TyType)) (= (type $ly@@135) LayerTypeType)) (= (type $Heap@@31) (MapType0Type refType MapType1Type))) (= (type |f#0@@110|) HandleTypeType)) (= (type |init#0@@12|) BoxType)) (= (type |run#0@@58|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@110|) (Lit |init#0@@12|) (Lit |run#0@@58|)) (and (and (and ($IsGoodHeap $Heap@@31) ($Is |f#0@@110| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5))) ($IsBox |init#0@@12| Sequences._default.FoldRight$A@@5)) ($Is |run#0@@58| (TSeq Sequences._default.FoldRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@58|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@110|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@58|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@135) (Lit |f#0@@110|) (Lit |init#0@@12|) (Lit |run#0@@58|)) (ite (= (|Seq#Length| (Lit |run#0@@58|)) (LitInt 0)) |init#0@@12| (Apply2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5 $Heap@@31 (Lit |f#0@@110|) (Lit (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@135) (Lit |f#0@@110|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@58|) (LitInt 1))))) (|Seq#Index| (Lit |run#0@@58|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |2842| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@135) (Lit |f#0@@110|) (Lit |init#0@@12|) (Lit |run#0@@58|)) ($IsGoodHeap $Heap@@31)) ))))
(assert (forall ((arg0@@539 T@U) (arg1@@237 T@U) (arg2@@147 T@U) (arg3@@104 T@U) (arg4@@81 T@U) (arg5@@51 T@U) ) (! (= (type (Sequences.__default.FoldFromRight arg0@@539 arg1@@237 arg2@@147 arg3@@104 arg4@@81 arg5@@51)) BoxType) :qid |funType:Sequences.__default.FoldFromRight| :pattern ( (Sequences.__default.FoldFromRight arg0@@539 arg1@@237 arg2@@147 arg3@@104 arg4@@81 arg5@@51)) )))
(assert (forall ((Sequences._default.FoldFromRight$A T@U) (Sequences._default.FoldFromRight$E T@U) ($ly@@136 T@U) (|f#0@@111| T@U) (|init#0@@13| T@U) (|run#0@@59| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A) TyType) (= (type Sequences._default.FoldFromRight$E) TyType)) (= (type $ly@@136) LayerTypeType)) (= (type |f#0@@111|) HandleTypeType)) (= (type |init#0@@13|) BoxType)) (= (type |run#0@@59|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@136) |f#0@@111| |init#0@@13| |run#0@@59|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E $ly@@136 |f#0@@111| |init#0@@13| |run#0@@59|))) :qid |unknown.0:0| :skolemid |2843| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@136) |f#0@@111| |init#0@@13| |run#0@@59|)) )))
(assert (forall ((Sequences._default.FoldFromRight$A@@0 T@U) (Sequences._default.FoldFromRight$E@@0 T@U) ($ly@@137 T@U) (|f#0@@112| T@U) (|init#0@@14| T@U) (|run#0@@60| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@0) TyType) (= (type Sequences._default.FoldFromRight$E@@0) TyType)) (= (type $ly@@137) LayerTypeType)) (= (type |f#0@@112|) HandleTypeType)) (= (type |init#0@@14|) BoxType)) (= (type |run#0@@60|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $ly@@137 |f#0@@112| |init#0@@14| |run#0@@60|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $LZ |f#0@@112| |init#0@@14| |run#0@@60|))) :qid |unknown.0:0| :skolemid |2844| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 (AsFuelBottom $ly@@137) |f#0@@112| |init#0@@14| |run#0@@60|)) )))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@1 T@U) (Sequences._default.FoldFromRight$E@@1 T@U) ($ly@@138 T@U) (|f#0@@113| T@U) (|init#0@@15| T@U) (|run#0@@61| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@1) TyType) (= (type Sequences._default.FoldFromRight$E@@1) TyType)) (= (type $ly@@138) LayerTypeType)) (= (type |f#0@@113|) HandleTypeType)) (= (type |init#0@@15|) BoxType)) (= (type |run#0@@61|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 |f#0@@113| |init#0@@15| |run#0@@61|) (and (and ($Is |f#0@@113| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 Sequences._default.FoldFromRight$A@@1)) ($IsBox |init#0@@15| Sequences._default.FoldFromRight$A@@1)) ($Is |run#0@@61| (TSeq Sequences._default.FoldFromRight$E@@1))))) ($IsBox (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@138 |f#0@@113| |init#0@@15| |run#0@@61|) Sequences._default.FoldFromRight$A@@1)) :qid |unknown.0:0| :skolemid |2845| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@138 |f#0@@113| |init#0@@15| |run#0@@61|)) ))))
(assert (forall ((Sequences._default.FoldFromRight$A@@2 T@U) (Sequences._default.FoldFromRight$E@@2 T@U) ($ly@@139 T@U) ($Heap@@32 T@U) (|f#0@@114| T@U) (|init#0@@16| T@U) (|run#0@@62| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@2) TyType) (= (type Sequences._default.FoldFromRight$E@@2) TyType)) (= (type $ly@@139) LayerTypeType)) (= (type $Heap@@32) (MapType0Type refType MapType1Type))) (= (type |f#0@@114|) HandleTypeType)) (= (type |init#0@@16|) BoxType)) (= (type |run#0@@62|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@32) ($Is |f#0@@114| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 Sequences._default.FoldFromRight$A@@2))) ($IsBox |init#0@@16| Sequences._default.FoldFromRight$A@@2)) ($Is |run#0@@62| (TSeq Sequences._default.FoldFromRight$E@@2)))) (= (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@139 |f#0@@114| |init#0@@16| |run#0@@62|) true)) :qid |unknown.0:0| :skolemid |2846| :pattern ( (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@139 |f#0@@114| |init#0@@16| |run#0@@62|) ($IsGoodHeap $Heap@@32)) )))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@3 T@U) (Sequences._default.FoldFromRight$E@@3 T@U) ($ly@@140 T@U) ($Heap@@33 T@U) (|f#0@@115| T@U) (|init#0@@17| T@U) (|run#0@@63| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@3) TyType) (= (type Sequences._default.FoldFromRight$E@@3) TyType)) (= (type $ly@@140) LayerTypeType)) (= (type $Heap@@33) (MapType0Type refType MapType1Type))) (= (type |f#0@@115|) HandleTypeType)) (= (type |init#0@@17|) BoxType)) (= (type |run#0@@63|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@115| |init#0@@17| |run#0@@63|) (and (and (and ($IsGoodHeap $Heap@@33) ($Is |f#0@@115| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3))) ($IsBox |init#0@@17| Sequences._default.FoldFromRight$A@@3)) ($Is |run#0@@63| (TSeq Sequences._default.FoldFromRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@63|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@63|) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@115| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@63|))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@63|))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@140) |f#0@@115| |init#0@@17| |run#0@@63|) (ite (= (|Seq#Length| |run#0@@63|) (LitInt 0)) |init#0@@17| (Apply2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3 $Heap@@33 |f#0@@115| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 $ly@@140 |f#0@@115| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@63|)) (Sequences.__default.Last Sequences._default.FoldFromRight$E@@3 |run#0@@63|)))))) :qid |unknown.0:0| :skolemid |2847| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@140) |f#0@@115| |init#0@@17| |run#0@@63|) ($IsGoodHeap $Heap@@33)) ))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@4 T@U) (Sequences._default.FoldFromRight$E@@4 T@U) ($ly@@141 T@U) ($Heap@@34 T@U) (|f#0@@116| T@U) (|init#0@@18| T@U) (|run#0@@64| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@4) TyType) (= (type Sequences._default.FoldFromRight$E@@4) TyType)) (= (type $ly@@141) LayerTypeType)) (= (type $Heap@@34) (MapType0Type refType MapType1Type))) (= (type |f#0@@116|) HandleTypeType)) (= (type |init#0@@18|) BoxType)) (= (type |run#0@@64|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@116| |init#0@@18| (Lit |run#0@@64|)) (and (and (and ($IsGoodHeap $Heap@@34) ($Is |f#0@@116| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4))) ($IsBox |init#0@@18| Sequences._default.FoldFromRight$A@@4)) ($Is |run#0@@64| (TSeq Sequences._default.FoldFromRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@64|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@64|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@116| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@64|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@64|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@141) |f#0@@116| |init#0@@18| (Lit |run#0@@64|)) (ite (= (|Seq#Length| (Lit |run#0@@64|)) (LitInt 0)) |init#0@@18| (Apply2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4 $Heap@@34 |f#0@@116| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@141) |f#0@@116| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@64|)))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@64|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2848| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@141) |f#0@@116| |init#0@@18| (Lit |run#0@@64|)) ($IsGoodHeap $Heap@@34)) ))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@5 T@U) (Sequences._default.FoldFromRight$E@@5 T@U) ($ly@@142 T@U) ($Heap@@35 T@U) (|f#0@@117| T@U) (|init#0@@19| T@U) (|run#0@@65| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@5) TyType) (= (type Sequences._default.FoldFromRight$E@@5) TyType)) (= (type $ly@@142) LayerTypeType)) (= (type $Heap@@35) (MapType0Type refType MapType1Type))) (= (type |f#0@@117|) HandleTypeType)) (= (type |init#0@@19|) BoxType)) (= (type |run#0@@65|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@117|) (Lit |init#0@@19|) (Lit |run#0@@65|)) (and (and (and ($IsGoodHeap $Heap@@35) ($Is |f#0@@117| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5))) ($IsBox |init#0@@19| Sequences._default.FoldFromRight$A@@5)) ($Is |run#0@@65| (TSeq Sequences._default.FoldFromRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@65|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@65|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@117|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@65|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@65|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@142) (Lit |f#0@@117|) (Lit |init#0@@19|) (Lit |run#0@@65|)) (ite (= (|Seq#Length| (Lit |run#0@@65|)) (LitInt 0)) |init#0@@19| (Apply2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5 $Heap@@35 (Lit |f#0@@117|) (Lit (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@142) (Lit |f#0@@117|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@65|))))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@65|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2849| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@142) (Lit |f#0@@117|) (Lit |init#0@@19|) (Lit |run#0@@65|)) ($IsGoodHeap $Heap@@35)) ))))
(assert (forall ((arg0@@540 T@U) (arg1@@238 T@U) (arg2@@148 T@U) (arg3@@105 Int) ) (! (= (type (Sequences.__default.remove arg0@@540 arg1@@238 arg2@@148 arg3@@105)) (SeqType BoxType)) :qid |funType:Sequences.__default.remove| :pattern ( (Sequences.__default.remove arg0@@540 arg1@@238 arg2@@148 arg3@@105)) )))
(assert (forall ((Sequences._default.remove$A T@U) ($ly@@143 T@U) (|s#0@@93| T@U) (|pos#0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A) TyType) (= (type $ly@@143) LayerTypeType)) (= (type |s#0@@93|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@143) |s#0@@93| |pos#0|) (Sequences.__default.remove Sequences._default.remove$A $ly@@143 |s#0@@93| |pos#0|))) :qid |unknown.0:0| :skolemid |2850| :pattern ( (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@143) |s#0@@93| |pos#0|)) )))
(assert (forall ((Sequences._default.remove$A@@0 T@U) ($ly@@144 T@U) (|s#0@@94| T@U) (|pos#0@@0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A@@0) TyType) (= (type $ly@@144) LayerTypeType)) (= (type |s#0@@94|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A@@0 $ly@@144 |s#0@@94| |pos#0@@0|) (Sequences.__default.remove Sequences._default.remove$A@@0 $LZ |s#0@@94| |pos#0@@0|))) :qid |unknown.0:0| :skolemid |2851| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@0 (AsFuelBottom $ly@@144) |s#0@@94| |pos#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.remove$A@@1 T@U) ($ly@@145 T@U) (|s#0@@95| T@U) (|pos#0@@1| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@1) TyType) (= (type $ly@@145) LayerTypeType)) (= (type |s#0@@95|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@1 |s#0@@95| |pos#0@@1|) (and ($Is |s#0@@95| (TSeq Sequences._default.remove$A@@1)) (and (<= (LitInt 0) |pos#0@@1|) (< |pos#0@@1| (|Seq#Length| |s#0@@95|)))))) (and (and (and (= (|Seq#Length| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@145 |s#0@@95| |pos#0@@1|)) (- (|Seq#Length| |s#0@@95|) 1)) (forall ((|i#0@@36| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@36|) (< |i#0@@36| |pos#0@@1|)) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@145 |s#0@@95| |pos#0@@1|) |i#0@@36|) (|Seq#Index| |s#0@@95| |i#0@@36|))) :qid |Sequencesidfy.180:18| :skolemid |2852| :pattern ( (|Seq#Index| |s#0@@95| |i#0@@36|)) :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@145 |s#0@@95| |pos#0@@1|) |i#0@@36|)) ))) (forall ((|i#1@@9| Int) ) (!  (=> (and (<= |pos#0@@1| |i#1@@9|) (< |i#1@@9| (- (|Seq#Length| |s#0@@95|) 1))) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@145 |s#0@@95| |pos#0@@1|) |i#1@@9|) (|Seq#Index| |s#0@@95| (+ |i#1@@9| 1)))) :qid |Sequencesidfy.181:18| :skolemid |2853| :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@145 |s#0@@95| |pos#0@@1|) |i#1@@9|)) ))) ($Is (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@145 |s#0@@95| |pos#0@@1|) (TSeq Sequences._default.remove$A@@1)))) :qid |unknown.0:0| :skolemid |2854| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@145 |s#0@@95| |pos#0@@1|)) ))))
(assert (forall ((Sequences._default.remove$A@@2 T@U) ($ly@@146 T@U) (|s#0@@96| T@U) (|pos#0@@2| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@2) TyType) (= (type $ly@@146) LayerTypeType)) (= (type |s#0@@96|) (SeqType BoxType))) ($Is |s#0@@96| (TSeq Sequences._default.remove$A@@2))) (= (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@146 |s#0@@96| |pos#0@@2|)  (and (<= (LitInt 0) |pos#0@@2|) (< |pos#0@@2| (|Seq#Length| |s#0@@96|))))) :qid |unknown.0:0| :skolemid |2855| :pattern ( (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@146 |s#0@@96| |pos#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.remove$A@@3 T@U) ($ly@@147 T@U) (|s#0@@97| T@U) (|pos#0@@3| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@3) TyType) (= (type $ly@@147) LayerTypeType)) (= (type |s#0@@97|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@3 |s#0@@97| |pos#0@@3|) (and ($Is |s#0@@97| (TSeq Sequences._default.remove$A@@3)) (and (<= (LitInt 0) |pos#0@@3|) (< |pos#0@@3| (|Seq#Length| |s#0@@97|)))))) (= (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@147) |s#0@@97| |pos#0@@3|) (|Seq#Append| (|Seq#Take| |s#0@@97| |pos#0@@3|) (|Seq#Drop| |s#0@@97| (+ |pos#0@@3| 1))))) :qid |unknown.0:0| :skolemid |2856| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@147) |s#0@@97| |pos#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.remove$A@@4 T@U) ($ly@@148 T@U) (|s#0@@98| T@U) (|pos#0@@4| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@4) TyType) (= (type $ly@@148) LayerTypeType)) (= (type |s#0@@98|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@4 (Lit |s#0@@98|) (LitInt |pos#0@@4|)) (and ($Is |s#0@@98| (TSeq Sequences._default.remove$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@4|)) (< |pos#0@@4| (|Seq#Length| (Lit |s#0@@98|))))))) (= (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@148) (Lit |s#0@@98|) (LitInt |pos#0@@4|)) (|Seq#Append| (|Seq#Take| (Lit |s#0@@98|) (LitInt |pos#0@@4|)) (|Seq#Drop| (Lit |s#0@@98|) (LitInt (+ |pos#0@@4| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2857| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@148) (Lit |s#0@@98|) (LitInt |pos#0@@4|))) ))))
(assert (forall ((arg0@@541 T@U) (arg1@@239 T@U) (arg2@@149 T@U) (arg3@@106 T@U) ) (! (= (type (Sequences.__default.RemoveOneValue arg0@@541 arg1@@239 arg2@@149 arg3@@106)) (SeqType BoxType)) :qid |funType:Sequences.__default.RemoveOneValue| :pattern ( (Sequences.__default.RemoveOneValue arg0@@541 arg1@@239 arg2@@149 arg3@@106)) )))
(assert (forall ((Sequences._default.RemoveOneValue$V T@U) ($ly@@149 T@U) (|s#0@@99| T@U) (|v#0@@14| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.RemoveOneValue$V) TyType) (= (type $ly@@149) LayerTypeType)) (= (type |s#0@@99|) (SeqType BoxType))) (= (type |v#0@@14|) BoxType)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V ($LS $ly@@149) |s#0@@99| |v#0@@14|) (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V $ly@@149 |s#0@@99| |v#0@@14|))) :qid |unknown.0:0| :skolemid |2858| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V ($LS $ly@@149) |s#0@@99| |v#0@@14|)) )))
(assert (forall ((Sequences._default.RemoveOneValue$V@@0 T@U) ($ly@@150 T@U) (|s#0@@100| T@U) (|v#0@@15| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.RemoveOneValue$V@@0) TyType) (= (type $ly@@150) LayerTypeType)) (= (type |s#0@@100|) (SeqType BoxType))) (= (type |v#0@@15|) BoxType)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@0 $ly@@150 |s#0@@100| |v#0@@15|) (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@0 $LZ |s#0@@100| |v#0@@15|))) :qid |unknown.0:0| :skolemid |2859| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@0 (AsFuelBottom $ly@@150) |s#0@@100| |v#0@@15|)) )))
(assert (= (type StartFuel_Sequences._default.NoDupes) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.RemoveOneValue$V@@1 T@U) ($ly@@151 T@U) (|s#0@@101| T@U) (|v#0@@16| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@1) TyType) (= (type $ly@@151) LayerTypeType)) (= (type |s#0@@101|) (SeqType BoxType))) (= (type |v#0@@16|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@1 |s#0@@101| |v#0@@16|) (and ($Is |s#0@@101| (TSeq Sequences._default.RemoveOneValue$V@@1)) ($IsBox |v#0@@16| Sequences._default.RemoveOneValue$V@@1)))) (and (=> (Sequences.__default.NoDupes Sequences._default.RemoveOneValue$V@@1 StartFuel_Sequences._default.NoDupes |s#0@@101|) (and (Sequences.__default.NoDupes Sequences._default.RemoveOneValue$V@@1 StartFuel_Sequences._default.NoDupes (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@151 |s#0@@101| |v#0@@16|)) (|Set#Equal| (Sequences.__default.Set Sequences._default.RemoveOneValue$V@@1 (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@151 |s#0@@101| |v#0@@16|)) (|Set#Difference| (Sequences.__default.Set Sequences._default.RemoveOneValue$V@@1 |s#0@@101|) (|Set#UnionOne| (|Set#Empty| BoxType) |v#0@@16|))))) ($Is (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@151 |s#0@@101| |v#0@@16|) (TSeq Sequences._default.RemoveOneValue$V@@1)))) :qid |unknown.0:0| :skolemid |2860| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@151 |s#0@@101| |v#0@@16|)) ))))
(assert (forall ((Sequences._default.RemoveOneValue$V@@2 T@U) ($ly@@152 T@U) ($Heap@@36 T@U) (|s#0@@102| T@U) (|v#0@@17| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@2) TyType) (= (type $ly@@152) LayerTypeType)) (= (type $Heap@@36) (MapType0Type refType MapType1Type))) (= (type |s#0@@102|) (SeqType BoxType))) (= (type |v#0@@17|) BoxType)) (and (and ($IsGoodHeap $Heap@@36) ($Is |s#0@@102| (TSeq Sequences._default.RemoveOneValue$V@@2))) ($IsBox |v#0@@17| Sequences._default.RemoveOneValue$V@@2))) (= (|Sequences.__default.RemoveOneValue#requires| Sequences._default.RemoveOneValue$V@@2 $ly@@152 |s#0@@102| |v#0@@17|) true)) :qid |unknown.0:0| :skolemid |2861| :pattern ( (|Sequences.__default.RemoveOneValue#requires| Sequences._default.RemoveOneValue$V@@2 $ly@@152 |s#0@@102| |v#0@@17|) ($IsGoodHeap $Heap@@36)) )))
(assert (forall ((Sequences._default.RemoveOneValue$V@@3 T@U) (s@@50 T@U) (v@@52 T@U) ) (!  (=> (and (and (and (= (type Sequences._default.RemoveOneValue$V@@3) TyType) (= (type s@@50) (SeqType BoxType))) (= (type v@@52) BoxType)) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@52)) (and (and (<= (LitInt 0) (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@52)) (< (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@52) (|Seq#Length| s@@50))) (= (|Seq#Index| s@@50 (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@52)) v@@52))) :qid |Sequencesidfy.191:5| :skolemid |2862| :pattern ( (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@52)) )))
(assert  (and (= (type MoreFuel_Sequences._default.NoDupes0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.NoDupes) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.RemoveOneValue$V@@4 T@U) ($ly@@153 T@U) ($Heap@@37 T@U) (|s#0@@103| T@U) (|v#0@@18| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@4) TyType) (= (type $ly@@153) LayerTypeType)) (= (type $Heap@@37) (MapType0Type refType MapType1Type))) (= (type |s#0@@103|) (SeqType BoxType))) (= (type |v#0@@18|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@4 |s#0@@103| |v#0@@18|) (and (and ($IsGoodHeap $Heap@@37) ($Is |s#0@@103| (TSeq Sequences._default.RemoveOneValue$V@@4))) ($IsBox |v#0@@18| Sequences._default.RemoveOneValue$V@@4)))) (and (=> (|Seq#Contains| |s#0@@103| |v#0@@18|) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@4 |s#0@@103| |v#0@@18|)) (and (and (and (= StartFuel_Sequences._default.NoDupes ($LS MoreFuel_Sequences._default.NoDupes0)) (= StartFuelAssert_Sequences._default.NoDupes ($LS ($LS MoreFuel_Sequences._default.NoDupes0)))) (= (AsFuelBottom MoreFuel_Sequences._default.NoDupes0) MoreFuel_Sequences._default.NoDupes0)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@4 ($LS $ly@@153) |s#0@@103| |v#0@@18|) (ite  (not (|Seq#Contains| |s#0@@103| |v#0@@18|)) |s#0@@103| (let ((|i#0@@37| (|$let#4_i| Sequences._default.RemoveOneValue$V@@4 |s#0@@103| |v#0@@18|))) (|Seq#Append| (|Seq#Take| |s#0@@103| |i#0@@37|) (|Seq#Drop| |s#0@@103| (+ |i#0@@37| 1))))))))) :qid |unknown.0:0| :skolemid |2863| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@4 ($LS $ly@@153) |s#0@@103| |v#0@@18|) ($IsGoodHeap $Heap@@37)) ))))
(assert (= (type MoreFuel_Sequences._default.NoDupes1) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.RemoveOneValue$V@@5 T@U) ($ly@@154 T@U) ($Heap@@38 T@U) (|s#0@@104| T@U) (|v#0@@19| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@5) TyType) (= (type $ly@@154) LayerTypeType)) (= (type $Heap@@38) (MapType0Type refType MapType1Type))) (= (type |s#0@@104|) (SeqType BoxType))) (= (type |v#0@@19|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@5 (Lit |s#0@@104|) |v#0@@19|) (and (and ($IsGoodHeap $Heap@@38) ($Is |s#0@@104| (TSeq Sequences._default.RemoveOneValue$V@@5))) ($IsBox |v#0@@19| Sequences._default.RemoveOneValue$V@@5)))) (and (=> (|Seq#Contains| |s#0@@104| |v#0@@19|) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@5 (Lit |s#0@@104|) |v#0@@19|)) (and (and (and (= StartFuel_Sequences._default.NoDupes ($LS MoreFuel_Sequences._default.NoDupes1)) (= StartFuelAssert_Sequences._default.NoDupes ($LS ($LS MoreFuel_Sequences._default.NoDupes1)))) (= (AsFuelBottom MoreFuel_Sequences._default.NoDupes1) MoreFuel_Sequences._default.NoDupes1)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@5 ($LS $ly@@154) (Lit |s#0@@104|) |v#0@@19|) (ite  (not (|Seq#Contains| |s#0@@104| |v#0@@19|)) |s#0@@104| (let ((|i#1@@10| (|$let#4_i| Sequences._default.RemoveOneValue$V@@5 (Lit |s#0@@104|) |v#0@@19|))) (|Seq#Append| (|Seq#Take| (Lit |s#0@@104|) |i#1@@10|) (|Seq#Drop| (Lit |s#0@@104|) (+ |i#1@@10| 1))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2864| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@5 ($LS $ly@@154) (Lit |s#0@@104|) |v#0@@19|) ($IsGoodHeap $Heap@@38)) ))))
(assert (= (type MoreFuel_Sequences._default.NoDupes2) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.RemoveOneValue$V@@6 T@U) ($ly@@155 T@U) ($Heap@@39 T@U) (|s#0@@105| T@U) (|v#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@6) TyType) (= (type $ly@@155) LayerTypeType)) (= (type $Heap@@39) (MapType0Type refType MapType1Type))) (= (type |s#0@@105|) (SeqType BoxType))) (= (type |v#0@@20|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@6 (Lit |s#0@@105|) (Lit |v#0@@20|)) (and (and ($IsGoodHeap $Heap@@39) ($Is |s#0@@105| (TSeq Sequences._default.RemoveOneValue$V@@6))) ($IsBox |v#0@@20| Sequences._default.RemoveOneValue$V@@6)))) (and (=> (|Seq#Contains| |s#0@@105| |v#0@@20|) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@6 (Lit |s#0@@105|) (Lit |v#0@@20|))) (and (and (and (= StartFuel_Sequences._default.NoDupes ($LS MoreFuel_Sequences._default.NoDupes2)) (= StartFuelAssert_Sequences._default.NoDupes ($LS ($LS MoreFuel_Sequences._default.NoDupes2)))) (= (AsFuelBottom MoreFuel_Sequences._default.NoDupes2) MoreFuel_Sequences._default.NoDupes2)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@6 ($LS $ly@@155) (Lit |s#0@@105|) (Lit |v#0@@20|)) (ite  (not (|Seq#Contains| |s#0@@105| |v#0@@20|)) |s#0@@105| (let ((|i#2@@7| (|$let#4_i| Sequences._default.RemoveOneValue$V@@6 (Lit |s#0@@105|) (Lit |v#0@@20|)))) (|Seq#Append| (|Seq#Take| (Lit |s#0@@105|) |i#2@@7|) (|Seq#Drop| (Lit |s#0@@105|) (+ |i#2@@7| 1))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2865| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@6 ($LS $ly@@155) (Lit |s#0@@105|) (Lit |v#0@@20|)) ($IsGoodHeap $Heap@@39)) ))))
(assert (forall ((arg0@@542 T@U) (arg1@@240 T@U) (arg2@@150 T@U) (arg3@@107 T@U) (arg4@@82 Int) ) (! (= (type (Sequences.__default.insert arg0@@542 arg1@@240 arg2@@150 arg3@@107 arg4@@82)) (SeqType BoxType)) :qid |funType:Sequences.__default.insert| :pattern ( (Sequences.__default.insert arg0@@542 arg1@@240 arg2@@150 arg3@@107 arg4@@82)) )))
(assert (forall ((Sequences._default.insert$A T@U) ($ly@@156 T@U) (|s#0@@106| T@U) (|a#0@@26| T@U) (|pos#0@@5| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A) TyType) (= (type $ly@@156) LayerTypeType)) (= (type |s#0@@106|) (SeqType BoxType))) (= (type |a#0@@26|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@156) |s#0@@106| |a#0@@26| |pos#0@@5|) (Sequences.__default.insert Sequences._default.insert$A $ly@@156 |s#0@@106| |a#0@@26| |pos#0@@5|))) :qid |unknown.0:0| :skolemid |2866| :pattern ( (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@156) |s#0@@106| |a#0@@26| |pos#0@@5|)) )))
(assert (forall ((Sequences._default.insert$A@@0 T@U) ($ly@@157 T@U) (|s#0@@107| T@U) (|a#0@@27| T@U) (|pos#0@@6| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A@@0) TyType) (= (type $ly@@157) LayerTypeType)) (= (type |s#0@@107|) (SeqType BoxType))) (= (type |a#0@@27|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A@@0 $ly@@157 |s#0@@107| |a#0@@27| |pos#0@@6|) (Sequences.__default.insert Sequences._default.insert$A@@0 $LZ |s#0@@107| |a#0@@27| |pos#0@@6|))) :qid |unknown.0:0| :skolemid |2867| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@0 (AsFuelBottom $ly@@157) |s#0@@107| |a#0@@27| |pos#0@@6|)) )))
(assert  (=> true (forall ((Sequences._default.insert$A@@1 T@U) ($ly@@158 T@U) (|s#0@@108| T@U) (|a#0@@28| T@U) (|pos#0@@7| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@1) TyType) (= (type $ly@@158) LayerTypeType)) (= (type |s#0@@108|) (SeqType BoxType))) (= (type |a#0@@28|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@1 |s#0@@108| |a#0@@28| |pos#0@@7|) (and (and ($Is |s#0@@108| (TSeq Sequences._default.insert$A@@1)) ($IsBox |a#0@@28| Sequences._default.insert$A@@1)) (and (<= (LitInt 0) |pos#0@@7|) (<= |pos#0@@7| (|Seq#Length| |s#0@@108|)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@158 |s#0@@108| |a#0@@28| |pos#0@@7|)) (+ (|Seq#Length| |s#0@@108|) 1)) (forall ((|i#0@@38| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@38|) (< |i#0@@38| |pos#0@@7|)) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@158 |s#0@@108| |a#0@@28| |pos#0@@7|) |i#0@@38|) (|Seq#Index| |s#0@@108| |i#0@@38|)))) :qid |Sequencesidfy.198:18| :skolemid |2868| :pattern ( (|Seq#Index| |s#0@@108| |i#0@@38|)) :pattern ( (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@158 |s#0@@108| |a#0@@28| |pos#0@@7|) |i#0@@38|)) ))) (forall ((|i#1@@11| Int) ) (!  (=> true (=> (and (<= |pos#0@@7| |i#1@@11|) (< |i#1@@11| (|Seq#Length| |s#0@@108|))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@158 |s#0@@108| |a#0@@28| |pos#0@@7|) (+ |i#1@@11| 1)) (|Seq#Index| |s#0@@108| |i#1@@11|)))) :qid |Sequencesidfy.199:18| :skolemid |2869| :pattern ( (|Seq#Index| |s#0@@108| |i#1@@11|)) ))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@158 |s#0@@108| |a#0@@28| |pos#0@@7|) |pos#0@@7|) |a#0@@28|)) ($Is (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@158 |s#0@@108| |a#0@@28| |pos#0@@7|) (TSeq Sequences._default.insert$A@@1)))) :qid |unknown.0:0| :skolemid |2870| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@158 |s#0@@108| |a#0@@28| |pos#0@@7|)) ))))
(assert (forall ((Sequences._default.insert$A@@2 T@U) ($ly@@159 T@U) (|s#0@@109| T@U) (|a#0@@29| T@U) (|pos#0@@8| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@2) TyType) (= (type $ly@@159) LayerTypeType)) (= (type |s#0@@109|) (SeqType BoxType))) (= (type |a#0@@29|) BoxType)) (and ($Is |s#0@@109| (TSeq Sequences._default.insert$A@@2)) ($IsBox |a#0@@29| Sequences._default.insert$A@@2))) (= (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@159 |s#0@@109| |a#0@@29| |pos#0@@8|)  (and (<= (LitInt 0) |pos#0@@8|) (<= |pos#0@@8| (|Seq#Length| |s#0@@109|))))) :qid |unknown.0:0| :skolemid |2871| :pattern ( (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@159 |s#0@@109| |a#0@@29| |pos#0@@8|)) )))
(assert  (=> true (forall ((Sequences._default.insert$A@@3 T@U) ($ly@@160 T@U) (|s#0@@110| T@U) (|a#0@@30| T@U) (|pos#0@@9| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@3) TyType) (= (type $ly@@160) LayerTypeType)) (= (type |s#0@@110|) (SeqType BoxType))) (= (type |a#0@@30|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@3 |s#0@@110| |a#0@@30| |pos#0@@9|) (and (and ($Is |s#0@@110| (TSeq Sequences._default.insert$A@@3)) ($IsBox |a#0@@30| Sequences._default.insert$A@@3)) (and (<= (LitInt 0) |pos#0@@9|) (<= |pos#0@@9| (|Seq#Length| |s#0@@110|)))))) (= (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@160) |s#0@@110| |a#0@@30| |pos#0@@9|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@110| |pos#0@@9|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@30|)) (|Seq#Drop| |s#0@@110| |pos#0@@9|)))) :qid |unknown.0:0| :skolemid |2872| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@160) |s#0@@110| |a#0@@30| |pos#0@@9|)) ))))
(assert  (=> true (forall ((Sequences._default.insert$A@@4 T@U) ($ly@@161 T@U) (|s#0@@111| T@U) (|a#0@@31| T@U) (|pos#0@@10| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@4) TyType) (= (type $ly@@161) LayerTypeType)) (= (type |s#0@@111|) (SeqType BoxType))) (= (type |a#0@@31|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@4 (Lit |s#0@@111|) |a#0@@31| (LitInt |pos#0@@10|)) (and (and ($Is |s#0@@111| (TSeq Sequences._default.insert$A@@4)) ($IsBox |a#0@@31| Sequences._default.insert$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@10|)) (<= (LitInt |pos#0@@10|) (|Seq#Length| (Lit |s#0@@111|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@161) (Lit |s#0@@111|) |a#0@@31| (LitInt |pos#0@@10|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@111|) (LitInt |pos#0@@10|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@31|)) (|Seq#Drop| (Lit |s#0@@111|) (LitInt |pos#0@@10|))))) :qid |unknown.0:0| :weight 3 :skolemid |2873| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@161) (Lit |s#0@@111|) |a#0@@31| (LitInt |pos#0@@10|))) ))))
(assert  (=> true (forall ((Sequences._default.insert$A@@5 T@U) ($ly@@162 T@U) (|s#0@@112| T@U) (|a#0@@32| T@U) (|pos#0@@11| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@5) TyType) (= (type $ly@@162) LayerTypeType)) (= (type |s#0@@112|) (SeqType BoxType))) (= (type |a#0@@32|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@5 (Lit |s#0@@112|) (Lit |a#0@@32|) (LitInt |pos#0@@11|)) (and (and ($Is |s#0@@112| (TSeq Sequences._default.insert$A@@5)) ($IsBox |a#0@@32| Sequences._default.insert$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@11|)) (<= (LitInt |pos#0@@11|) (|Seq#Length| (Lit |s#0@@112|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@162) (Lit |s#0@@112|) (Lit |a#0@@32|) (LitInt |pos#0@@11|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@112|) (LitInt |pos#0@@11|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@32|))) (|Seq#Drop| (Lit |s#0@@112|) (LitInt |pos#0@@11|))))) :qid |unknown.0:0| :weight 3 :skolemid |2874| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@162) (Lit |s#0@@112|) (Lit |a#0@@32|) (LitInt |pos#0@@11|))) ))))
(assert (forall ((arg0@@543 T@U) (arg1@@241 T@U) (arg2@@151 T@U) (arg3@@108 T@U) (arg4@@83 T@U) (arg5@@52 Int) ) (! (= (type (Sequences.__default.replace1with2 arg0@@543 arg1@@241 arg2@@151 arg3@@108 arg4@@83 arg5@@52)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace1with2| :pattern ( (Sequences.__default.replace1with2 arg0@@543 arg1@@241 arg2@@151 arg3@@108 arg4@@83 arg5@@52)) )))
(assert (forall ((Sequences._default.replace1with2$A T@U) ($ly@@163 T@U) (|s#0@@113| T@U) (|a#0@@33| T@U) (|b#0@@20| T@U) (|pos#0@@12| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A) TyType) (= (type $ly@@163) LayerTypeType)) (= (type |s#0@@113|) (SeqType BoxType))) (= (type |a#0@@33|) BoxType)) (= (type |b#0@@20|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@163) |s#0@@113| |a#0@@33| |b#0@@20| |pos#0@@12|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A $ly@@163 |s#0@@113| |a#0@@33| |b#0@@20| |pos#0@@12|))) :qid |unknown.0:0| :skolemid |2875| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@163) |s#0@@113| |a#0@@33| |b#0@@20| |pos#0@@12|)) )))
(assert (forall ((Sequences._default.replace1with2$A@@0 T@U) ($ly@@164 T@U) (|s#0@@114| T@U) (|a#0@@34| T@U) (|b#0@@21| T@U) (|pos#0@@13| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A@@0) TyType) (= (type $ly@@164) LayerTypeType)) (= (type |s#0@@114|) (SeqType BoxType))) (= (type |a#0@@34|) BoxType)) (= (type |b#0@@21|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $ly@@164 |s#0@@114| |a#0@@34| |b#0@@21| |pos#0@@13|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $LZ |s#0@@114| |a#0@@34| |b#0@@21| |pos#0@@13|))) :qid |unknown.0:0| :skolemid |2876| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 (AsFuelBottom $ly@@164) |s#0@@114| |a#0@@34| |b#0@@21| |pos#0@@13|)) )))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@1 T@U) ($ly@@165 T@U) (|s#0@@115| T@U) (|a#0@@35| T@U) (|b#0@@22| T@U) (|pos#0@@14| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@1) TyType) (= (type $ly@@165) LayerTypeType)) (= (type |s#0@@115|) (SeqType BoxType))) (= (type |a#0@@35|) BoxType)) (= (type |b#0@@22|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@1 |s#0@@115| |a#0@@35| |b#0@@22| |pos#0@@14|) (and (and (and ($Is |s#0@@115| (TSeq Sequences._default.replace1with2$A@@1)) ($IsBox |a#0@@35| Sequences._default.replace1with2$A@@1)) ($IsBox |b#0@@22| Sequences._default.replace1with2$A@@1)) (and (<= (LitInt 0) |pos#0@@14|) (< |pos#0@@14| (|Seq#Length| |s#0@@115|)))))) (and (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@165 |s#0@@115| |a#0@@35| |b#0@@22| |pos#0@@14|)) (+ (|Seq#Length| |s#0@@115|) 1)) (forall ((|i#0@@39| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@39|) (< |i#0@@39| |pos#0@@14|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@165 |s#0@@115| |a#0@@35| |b#0@@22| |pos#0@@14|) |i#0@@39|) (|Seq#Index| |s#0@@115| |i#0@@39|)))) :qid |Sequencesidfy.223:18| :skolemid |2877| :pattern ( (|Seq#Index| |s#0@@115| |i#0@@39|)) :pattern ( (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@165 |s#0@@115| |a#0@@35| |b#0@@22| |pos#0@@14|) |i#0@@39|)) ))) (forall ((|i#1@@12| Int) ) (!  (=> true (=> (and (< |pos#0@@14| |i#1@@12|) (< |i#1@@12| (|Seq#Length| |s#0@@115|))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@165 |s#0@@115| |a#0@@35| |b#0@@22| |pos#0@@14|) (+ |i#1@@12| 1)) (|Seq#Index| |s#0@@115| |i#1@@12|)))) :qid |Sequencesidfy.224:18| :skolemid |2878| :pattern ( (|Seq#Index| |s#0@@115| |i#1@@12|)) ))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@165 |s#0@@115| |a#0@@35| |b#0@@22| |pos#0@@14|) |pos#0@@14|) |a#0@@35|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@165 |s#0@@115| |a#0@@35| |b#0@@22| |pos#0@@14|) (+ |pos#0@@14| 1)) |b#0@@22|)) ($Is (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@165 |s#0@@115| |a#0@@35| |b#0@@22| |pos#0@@14|) (TSeq Sequences._default.replace1with2$A@@1)))) :qid |unknown.0:0| :skolemid |2879| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@165 |s#0@@115| |a#0@@35| |b#0@@22| |pos#0@@14|)) ))))
(assert (forall ((Sequences._default.replace1with2$A@@2 T@U) ($ly@@166 T@U) (|s#0@@116| T@U) (|a#0@@36| T@U) (|b#0@@23| T@U) (|pos#0@@15| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@2) TyType) (= (type $ly@@166) LayerTypeType)) (= (type |s#0@@116|) (SeqType BoxType))) (= (type |a#0@@36|) BoxType)) (= (type |b#0@@23|) BoxType)) (and (and ($Is |s#0@@116| (TSeq Sequences._default.replace1with2$A@@2)) ($IsBox |a#0@@36| Sequences._default.replace1with2$A@@2)) ($IsBox |b#0@@23| Sequences._default.replace1with2$A@@2))) (= (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@166 |s#0@@116| |a#0@@36| |b#0@@23| |pos#0@@15|)  (and (<= (LitInt 0) |pos#0@@15|) (< |pos#0@@15| (|Seq#Length| |s#0@@116|))))) :qid |unknown.0:0| :skolemid |2880| :pattern ( (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@166 |s#0@@116| |a#0@@36| |b#0@@23| |pos#0@@15|)) )))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@3 T@U) ($ly@@167 T@U) (|s#0@@117| T@U) (|a#0@@37| T@U) (|b#0@@24| T@U) (|pos#0@@16| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@3) TyType) (= (type $ly@@167) LayerTypeType)) (= (type |s#0@@117|) (SeqType BoxType))) (= (type |a#0@@37|) BoxType)) (= (type |b#0@@24|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@3 |s#0@@117| |a#0@@37| |b#0@@24| |pos#0@@16|) (and (and (and ($Is |s#0@@117| (TSeq Sequences._default.replace1with2$A@@3)) ($IsBox |a#0@@37| Sequences._default.replace1with2$A@@3)) ($IsBox |b#0@@24| Sequences._default.replace1with2$A@@3)) (and (<= (LitInt 0) |pos#0@@16|) (< |pos#0@@16| (|Seq#Length| |s#0@@117|)))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@167) |s#0@@117| |a#0@@37| |b#0@@24| |pos#0@@16|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@117| |pos#0@@16|) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@37|) |b#0@@24|)) (|Seq#Drop| |s#0@@117| (+ |pos#0@@16| 1))))) :qid |unknown.0:0| :skolemid |2881| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@167) |s#0@@117| |a#0@@37| |b#0@@24| |pos#0@@16|)) ))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@4 T@U) ($ly@@168 T@U) (|s#0@@118| T@U) (|a#0@@38| T@U) (|b#0@@25| T@U) (|pos#0@@17| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@4) TyType) (= (type $ly@@168) LayerTypeType)) (= (type |s#0@@118|) (SeqType BoxType))) (= (type |a#0@@38|) BoxType)) (= (type |b#0@@25|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@4 (Lit |s#0@@118|) |a#0@@38| |b#0@@25| (LitInt |pos#0@@17|)) (and (and (and ($Is |s#0@@118| (TSeq Sequences._default.replace1with2$A@@4)) ($IsBox |a#0@@38| Sequences._default.replace1with2$A@@4)) ($IsBox |b#0@@25| Sequences._default.replace1with2$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@17|)) (< |pos#0@@17| (|Seq#Length| (Lit |s#0@@118|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@168) (Lit |s#0@@118|) |a#0@@38| |b#0@@25| (LitInt |pos#0@@17|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@118|) (LitInt |pos#0@@17|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@38|) |b#0@@25|)) (|Seq#Drop| (Lit |s#0@@118|) (LitInt (+ |pos#0@@17| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2882| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@168) (Lit |s#0@@118|) |a#0@@38| |b#0@@25| (LitInt |pos#0@@17|))) ))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@5 T@U) ($ly@@169 T@U) (|s#0@@119| T@U) (|a#0@@39| T@U) (|b#0@@26| T@U) (|pos#0@@18| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@5) TyType) (= (type $ly@@169) LayerTypeType)) (= (type |s#0@@119|) (SeqType BoxType))) (= (type |a#0@@39|) BoxType)) (= (type |b#0@@26|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@5 (Lit |s#0@@119|) (Lit |a#0@@39|) (Lit |b#0@@26|) (LitInt |pos#0@@18|)) (and (and (and ($Is |s#0@@119| (TSeq Sequences._default.replace1with2$A@@5)) ($IsBox |a#0@@39| Sequences._default.replace1with2$A@@5)) ($IsBox |b#0@@26| Sequences._default.replace1with2$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@18|)) (< |pos#0@@18| (|Seq#Length| (Lit |s#0@@119|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@169) (Lit |s#0@@119|) (Lit |a#0@@39|) (Lit |b#0@@26|) (LitInt |pos#0@@18|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@119|) (LitInt |pos#0@@18|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@39|)) (Lit |b#0@@26|))) (|Seq#Drop| (Lit |s#0@@119|) (LitInt (+ |pos#0@@18| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2883| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@169) (Lit |s#0@@119|) (Lit |a#0@@39|) (Lit |b#0@@26|) (LitInt |pos#0@@18|))) ))))
(assert (forall ((arg0@@544 T@U) (arg1@@242 T@U) (arg2@@152 T@U) (arg3@@109 T@U) (arg4@@84 Int) ) (! (= (type (Sequences.__default.replace2with1 arg0@@544 arg1@@242 arg2@@152 arg3@@109 arg4@@84)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace2with1| :pattern ( (Sequences.__default.replace2with1 arg0@@544 arg1@@242 arg2@@152 arg3@@109 arg4@@84)) )))
(assert (forall ((Sequences._default.replace2with1$A T@U) ($ly@@170 T@U) (|s#0@@120| T@U) (|a#0@@40| T@U) (|pos#0@@19| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A) TyType) (= (type $ly@@170) LayerTypeType)) (= (type |s#0@@120|) (SeqType BoxType))) (= (type |a#0@@40|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@170) |s#0@@120| |a#0@@40| |pos#0@@19|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A $ly@@170 |s#0@@120| |a#0@@40| |pos#0@@19|))) :qid |unknown.0:0| :skolemid |2884| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@170) |s#0@@120| |a#0@@40| |pos#0@@19|)) )))
(assert (forall ((Sequences._default.replace2with1$A@@0 T@U) ($ly@@171 T@U) (|s#0@@121| T@U) (|a#0@@41| T@U) (|pos#0@@20| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A@@0) TyType) (= (type $ly@@171) LayerTypeType)) (= (type |s#0@@121|) (SeqType BoxType))) (= (type |a#0@@41|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $ly@@171 |s#0@@121| |a#0@@41| |pos#0@@20|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $LZ |s#0@@121| |a#0@@41| |pos#0@@20|))) :qid |unknown.0:0| :skolemid |2885| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 (AsFuelBottom $ly@@171) |s#0@@121| |a#0@@41| |pos#0@@20|)) )))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@1 T@U) ($ly@@172 T@U) (|s#0@@122| T@U) (|a#0@@42| T@U) (|pos#0@@21| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@1) TyType) (= (type $ly@@172) LayerTypeType)) (= (type |s#0@@122|) (SeqType BoxType))) (= (type |a#0@@42|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@1 |s#0@@122| |a#0@@42| |pos#0@@21|) (and (and ($Is |s#0@@122| (TSeq Sequences._default.replace2with1$A@@1)) ($IsBox |a#0@@42| Sequences._default.replace2with1$A@@1)) (and (<= (LitInt 0) |pos#0@@21|) (< |pos#0@@21| (- (|Seq#Length| |s#0@@122|) 1)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@172 |s#0@@122| |a#0@@42| |pos#0@@21|)) (- (|Seq#Length| |s#0@@122|) 1)) (forall ((|i#0@@40| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@40|) (< |i#0@@40| |pos#0@@21|)) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@172 |s#0@@122| |a#0@@42| |pos#0@@21|) |i#0@@40|) (|Seq#Index| |s#0@@122| |i#0@@40|)))) :qid |Sequencesidfy.242:18| :skolemid |2886| :pattern ( (|Seq#Index| |s#0@@122| |i#0@@40|)) :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@172 |s#0@@122| |a#0@@42| |pos#0@@21|) |i#0@@40|)) ))) (forall ((|i#1@@13| Int) ) (!  (=> true (=> (and (< |pos#0@@21| |i#1@@13|) (< |i#1@@13| (- (|Seq#Length| |s#0@@122|) 1))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@172 |s#0@@122| |a#0@@42| |pos#0@@21|) |i#1@@13|) (|Seq#Index| |s#0@@122| (+ |i#1@@13| 1))))) :qid |Sequencesidfy.243:18| :skolemid |2887| :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@172 |s#0@@122| |a#0@@42| |pos#0@@21|) |i#1@@13|)) ))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@172 |s#0@@122| |a#0@@42| |pos#0@@21|) |pos#0@@21|) |a#0@@42|)) ($Is (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@172 |s#0@@122| |a#0@@42| |pos#0@@21|) (TSeq Sequences._default.replace2with1$A@@1)))) :qid |unknown.0:0| :skolemid |2888| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@172 |s#0@@122| |a#0@@42| |pos#0@@21|)) ))))
(assert (forall ((Sequences._default.replace2with1$A@@2 T@U) ($ly@@173 T@U) (|s#0@@123| T@U) (|a#0@@43| T@U) (|pos#0@@22| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@2) TyType) (= (type $ly@@173) LayerTypeType)) (= (type |s#0@@123|) (SeqType BoxType))) (= (type |a#0@@43|) BoxType)) (and ($Is |s#0@@123| (TSeq Sequences._default.replace2with1$A@@2)) ($IsBox |a#0@@43| Sequences._default.replace2with1$A@@2))) (= (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@173 |s#0@@123| |a#0@@43| |pos#0@@22|)  (and (<= (LitInt 0) |pos#0@@22|) (< |pos#0@@22| (- (|Seq#Length| |s#0@@123|) 1))))) :qid |unknown.0:0| :skolemid |2889| :pattern ( (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@173 |s#0@@123| |a#0@@43| |pos#0@@22|)) )))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@3 T@U) ($ly@@174 T@U) (|s#0@@124| T@U) (|a#0@@44| T@U) (|pos#0@@23| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@3) TyType) (= (type $ly@@174) LayerTypeType)) (= (type |s#0@@124|) (SeqType BoxType))) (= (type |a#0@@44|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@3 |s#0@@124| |a#0@@44| |pos#0@@23|) (and (and ($Is |s#0@@124| (TSeq Sequences._default.replace2with1$A@@3)) ($IsBox |a#0@@44| Sequences._default.replace2with1$A@@3)) (and (<= (LitInt 0) |pos#0@@23|) (< |pos#0@@23| (- (|Seq#Length| |s#0@@124|) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@174) |s#0@@124| |a#0@@44| |pos#0@@23|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@124| |pos#0@@23|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@44|)) (|Seq#Drop| |s#0@@124| (+ |pos#0@@23| 2))))) :qid |unknown.0:0| :skolemid |2890| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@174) |s#0@@124| |a#0@@44| |pos#0@@23|)) ))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@4 T@U) ($ly@@175 T@U) (|s#0@@125| T@U) (|a#0@@45| T@U) (|pos#0@@24| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@4) TyType) (= (type $ly@@175) LayerTypeType)) (= (type |s#0@@125|) (SeqType BoxType))) (= (type |a#0@@45|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@4 (Lit |s#0@@125|) |a#0@@45| (LitInt |pos#0@@24|)) (and (and ($Is |s#0@@125| (TSeq Sequences._default.replace2with1$A@@4)) ($IsBox |a#0@@45| Sequences._default.replace2with1$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@24|)) (< |pos#0@@24| (- (|Seq#Length| (Lit |s#0@@125|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@175) (Lit |s#0@@125|) |a#0@@45| (LitInt |pos#0@@24|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@125|) (LitInt |pos#0@@24|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@45|)) (|Seq#Drop| (Lit |s#0@@125|) (LitInt (+ |pos#0@@24| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |2891| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@175) (Lit |s#0@@125|) |a#0@@45| (LitInt |pos#0@@24|))) ))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@5 T@U) ($ly@@176 T@U) (|s#0@@126| T@U) (|a#0@@46| T@U) (|pos#0@@25| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@5) TyType) (= (type $ly@@176) LayerTypeType)) (= (type |s#0@@126|) (SeqType BoxType))) (= (type |a#0@@46|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@5 (Lit |s#0@@126|) (Lit |a#0@@46|) (LitInt |pos#0@@25|)) (and (and ($Is |s#0@@126| (TSeq Sequences._default.replace2with1$A@@5)) ($IsBox |a#0@@46| Sequences._default.replace2with1$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@25|)) (< |pos#0@@25| (- (|Seq#Length| (Lit |s#0@@126|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@176) (Lit |s#0@@126|) (Lit |a#0@@46|) (LitInt |pos#0@@25|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@126|) (LitInt |pos#0@@25|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@46|))) (|Seq#Drop| (Lit |s#0@@126|) (LitInt (+ |pos#0@@25| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |2892| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@176) (Lit |s#0@@126|) (Lit |a#0@@46|) (LitInt |pos#0@@25|))) ))))
(assert (forall ((arg0@@545 T@U) (arg1@@243 T@U) (arg2@@153 T@U) (arg3@@110 T@U) ) (! (= (type (Sequences.__default.concat arg0@@545 arg1@@243 arg2@@153 arg3@@110)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat| :pattern ( (Sequences.__default.concat arg0@@545 arg1@@243 arg2@@153 arg3@@110)) )))
(assert (forall ((Sequences._default.concat$A T@U) ($ly@@177 T@U) (|a#0@@47| T@U) (|b#0@@27| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A) TyType) (= (type $ly@@177) LayerTypeType)) (= (type |a#0@@47|) (SeqType BoxType))) (= (type |b#0@@27|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@177) |a#0@@47| |b#0@@27|) (Sequences.__default.concat Sequences._default.concat$A $ly@@177 |a#0@@47| |b#0@@27|))) :qid |unknown.0:0| :skolemid |2893| :pattern ( (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@177) |a#0@@47| |b#0@@27|)) )))
(assert (forall ((Sequences._default.concat$A@@0 T@U) ($ly@@178 T@U) (|a#0@@48| T@U) (|b#0@@28| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A@@0) TyType) (= (type $ly@@178) LayerTypeType)) (= (type |a#0@@48|) (SeqType BoxType))) (= (type |b#0@@28|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A@@0 $ly@@178 |a#0@@48| |b#0@@28|) (Sequences.__default.concat Sequences._default.concat$A@@0 $LZ |a#0@@48| |b#0@@28|))) :qid |unknown.0:0| :skolemid |2894| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@0 (AsFuelBottom $ly@@178) |a#0@@48| |b#0@@28|)) )))
(assert  (=> true (forall ((Sequences._default.concat$A@@1 T@U) ($ly@@179 T@U) (|a#0@@49| T@U) (|b#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@1) TyType) (= (type $ly@@179) LayerTypeType)) (= (type |a#0@@49|) (SeqType BoxType))) (= (type |b#0@@29|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@1 |a#0@@49| |b#0@@29|) (and ($Is |a#0@@49| (TSeq Sequences._default.concat$A@@1)) ($Is |b#0@@29| (TSeq Sequences._default.concat$A@@1))))) (and (and (and (= (|Seq#Length| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@179 |a#0@@49| |b#0@@29|)) (+ (|Seq#Length| |a#0@@49|) (|Seq#Length| |b#0@@29|))) (forall ((|i#0@@41| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@41|) (< |i#0@@41| (|Seq#Length| |a#0@@49|))) (= (|Seq#Index| |a#0@@49| |i#0@@41|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@179 |a#0@@49| |b#0@@29|) |i#0@@41|)))) :qid |Sequencesidfy.251:18| :skolemid |2895| :pattern ( (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@179 |a#0@@49| |b#0@@29|) |i#0@@41|)) :pattern ( (|Seq#Index| |a#0@@49| |i#0@@41|)) ))) (forall ((|i#1@@14| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@14|) (< |i#1@@14| (|Seq#Length| |b#0@@29|))) (= (|Seq#Index| |b#0@@29| |i#1@@14|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@179 |a#0@@49| |b#0@@29|) (+ (|Seq#Length| |a#0@@49|) |i#1@@14|))))) :qid |Sequencesidfy.252:18| :skolemid |2896| :pattern ( (|Seq#Index| |b#0@@29| |i#1@@14|)) ))) ($Is (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@179 |a#0@@49| |b#0@@29|) (TSeq Sequences._default.concat$A@@1)))) :qid |unknown.0:0| :skolemid |2897| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@179 |a#0@@49| |b#0@@29|)) ))))
(assert (forall ((Sequences._default.concat$A@@2 T@U) ($ly@@180 T@U) (|a#0@@50| T@U) (|b#0@@30| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@2) TyType) (= (type $ly@@180) LayerTypeType)) (= (type |a#0@@50|) (SeqType BoxType))) (= (type |b#0@@30|) (SeqType BoxType))) (and ($Is |a#0@@50| (TSeq Sequences._default.concat$A@@2)) ($Is |b#0@@30| (TSeq Sequences._default.concat$A@@2)))) (= (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@180 |a#0@@50| |b#0@@30|) true)) :qid |unknown.0:0| :skolemid |2898| :pattern ( (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@180 |a#0@@50| |b#0@@30|)) )))
(assert  (=> true (forall ((Sequences._default.concat$A@@3 T@U) ($ly@@181 T@U) (|a#0@@51| T@U) (|b#0@@31| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@3) TyType) (= (type $ly@@181) LayerTypeType)) (= (type |a#0@@51|) (SeqType BoxType))) (= (type |b#0@@31|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@3 |a#0@@51| |b#0@@31|) (and ($Is |a#0@@51| (TSeq Sequences._default.concat$A@@3)) ($Is |b#0@@31| (TSeq Sequences._default.concat$A@@3))))) (= (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@181) |a#0@@51| |b#0@@31|) (|Seq#Append| |a#0@@51| |b#0@@31|))) :qid |unknown.0:0| :skolemid |2899| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@181) |a#0@@51| |b#0@@31|)) ))))
(assert  (=> true (forall ((Sequences._default.concat$A@@4 T@U) ($ly@@182 T@U) (|a#0@@52| T@U) (|b#0@@32| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@4) TyType) (= (type $ly@@182) LayerTypeType)) (= (type |a#0@@52|) (SeqType BoxType))) (= (type |b#0@@32|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@4 (Lit |a#0@@52|) (Lit |b#0@@32|)) (and ($Is |a#0@@52| (TSeq Sequences._default.concat$A@@4)) ($Is |b#0@@32| (TSeq Sequences._default.concat$A@@4))))) (= (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@182) (Lit |a#0@@52|) (Lit |b#0@@32|)) (|Seq#Append| |a#0@@52| |b#0@@32|))) :qid |unknown.0:0| :weight 3 :skolemid |2900| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@182) (Lit |a#0@@52|) (Lit |b#0@@32|))) ))))
(assert (forall ((arg0@@546 T@U) (arg1@@244 T@U) (arg2@@154 T@U) (arg3@@111 T@U) (arg4@@85 T@U) ) (! (= (type (Sequences.__default.concat3 arg0@@546 arg1@@244 arg2@@154 arg3@@111 arg4@@85)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat3| :pattern ( (Sequences.__default.concat3 arg0@@546 arg1@@244 arg2@@154 arg3@@111 arg4@@85)) )))
(assert (forall ((Sequences._default.concat3$A T@U) ($ly@@183 T@U) (|a#0@@53| T@U) (|b#0@@33| T@U) (|c#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A) TyType) (= (type $ly@@183) LayerTypeType)) (= (type |a#0@@53|) (SeqType BoxType))) (= (type |b#0@@33|) BoxType)) (= (type |c#0@@3|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@183) |a#0@@53| |b#0@@33| |c#0@@3|) (Sequences.__default.concat3 Sequences._default.concat3$A $ly@@183 |a#0@@53| |b#0@@33| |c#0@@3|))) :qid |unknown.0:0| :skolemid |2901| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@183) |a#0@@53| |b#0@@33| |c#0@@3|)) )))
(assert (forall ((Sequences._default.concat3$A@@0 T@U) ($ly@@184 T@U) (|a#0@@54| T@U) (|b#0@@34| T@U) (|c#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A@@0) TyType) (= (type $ly@@184) LayerTypeType)) (= (type |a#0@@54|) (SeqType BoxType))) (= (type |b#0@@34|) BoxType)) (= (type |c#0@@4|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $ly@@184 |a#0@@54| |b#0@@34| |c#0@@4|) (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $LZ |a#0@@54| |b#0@@34| |c#0@@4|))) :qid |unknown.0:0| :skolemid |2902| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@0 (AsFuelBottom $ly@@184) |a#0@@54| |b#0@@34| |c#0@@4|)) )))
(assert  (=> true (forall ((Sequences._default.concat3$A@@1 T@U) ($ly@@185 T@U) (|a#0@@55| T@U) (|b#0@@35| T@U) (|c#0@@5| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@1) TyType) (= (type $ly@@185) LayerTypeType)) (= (type |a#0@@55|) (SeqType BoxType))) (= (type |b#0@@35|) BoxType)) (= (type |c#0@@5|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@1 |a#0@@55| |b#0@@35| |c#0@@5|) (and (and ($Is |a#0@@55| (TSeq Sequences._default.concat3$A@@1)) ($IsBox |b#0@@35| Sequences._default.concat3$A@@1)) ($Is |c#0@@5| (TSeq Sequences._default.concat3$A@@1))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@185 |a#0@@55| |b#0@@35| |c#0@@5|)) (+ (+ (|Seq#Length| |a#0@@55|) (|Seq#Length| |c#0@@5|)) 1)) (forall ((|i#0@@42| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@42|) (< |i#0@@42| (|Seq#Length| |a#0@@55|))) (= (|Seq#Index| |a#0@@55| |i#0@@42|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@185 |a#0@@55| |b#0@@35| |c#0@@5|) |i#0@@42|)))) :qid |Sequencesidfy.259:18| :skolemid |2903| :pattern ( (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@185 |a#0@@55| |b#0@@35| |c#0@@5|) |i#0@@42|)) :pattern ( (|Seq#Index| |a#0@@55| |i#0@@42|)) ))) (= (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@185 |a#0@@55| |b#0@@35| |c#0@@5|) (|Seq#Length| |a#0@@55|)) |b#0@@35|)) (forall ((|i#1@@15| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@15|) (< |i#1@@15| (|Seq#Length| |c#0@@5|))) (= (|Seq#Index| |c#0@@5| |i#1@@15|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@185 |a#0@@55| |b#0@@35| |c#0@@5|) (+ (+ (|Seq#Length| |a#0@@55|) 1) |i#1@@15|))))) :qid |Sequencesidfy.261:18| :skolemid |2904| :pattern ( (|Seq#Index| |c#0@@5| |i#1@@15|)) ))) ($Is (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@185 |a#0@@55| |b#0@@35| |c#0@@5|) (TSeq Sequences._default.concat3$A@@1)))) :qid |unknown.0:0| :skolemid |2905| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@185 |a#0@@55| |b#0@@35| |c#0@@5|)) ))))
(assert (forall ((Sequences._default.concat3$A@@2 T@U) ($ly@@186 T@U) (|a#0@@56| T@U) (|b#0@@36| T@U) (|c#0@@6| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@2) TyType) (= (type $ly@@186) LayerTypeType)) (= (type |a#0@@56|) (SeqType BoxType))) (= (type |b#0@@36|) BoxType)) (= (type |c#0@@6|) (SeqType BoxType))) (and (and ($Is |a#0@@56| (TSeq Sequences._default.concat3$A@@2)) ($IsBox |b#0@@36| Sequences._default.concat3$A@@2)) ($Is |c#0@@6| (TSeq Sequences._default.concat3$A@@2)))) (= (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@186 |a#0@@56| |b#0@@36| |c#0@@6|) true)) :qid |unknown.0:0| :skolemid |2906| :pattern ( (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@186 |a#0@@56| |b#0@@36| |c#0@@6|)) )))
(assert  (=> true (forall ((Sequences._default.concat3$A@@3 T@U) ($ly@@187 T@U) (|a#0@@57| T@U) (|b#0@@37| T@U) (|c#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@3) TyType) (= (type $ly@@187) LayerTypeType)) (= (type |a#0@@57|) (SeqType BoxType))) (= (type |b#0@@37|) BoxType)) (= (type |c#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@3 |a#0@@57| |b#0@@37| |c#0@@7|) (and (and ($Is |a#0@@57| (TSeq Sequences._default.concat3$A@@3)) ($IsBox |b#0@@37| Sequences._default.concat3$A@@3)) ($Is |c#0@@7| (TSeq Sequences._default.concat3$A@@3))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@187) |a#0@@57| |b#0@@37| |c#0@@7|) (|Seq#Append| (|Seq#Append| |a#0@@57| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@37|)) |c#0@@7|))) :qid |unknown.0:0| :skolemid |2907| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@187) |a#0@@57| |b#0@@37| |c#0@@7|)) ))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@4 T@U) ($ly@@188 T@U) (|a#0@@58| T@U) (|b#0@@38| T@U) (|c#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@4) TyType) (= (type $ly@@188) LayerTypeType)) (= (type |a#0@@58|) (SeqType BoxType))) (= (type |b#0@@38|) BoxType)) (= (type |c#0@@8|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@4 (Lit |a#0@@58|) |b#0@@38| (Lit |c#0@@8|)) (and (and ($Is |a#0@@58| (TSeq Sequences._default.concat3$A@@4)) ($IsBox |b#0@@38| Sequences._default.concat3$A@@4)) ($Is |c#0@@8| (TSeq Sequences._default.concat3$A@@4))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@188) (Lit |a#0@@58|) |b#0@@38| (Lit |c#0@@8|)) (|Seq#Append| (|Seq#Append| |a#0@@58| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@38|)) |c#0@@8|))) :qid |unknown.0:0| :weight 3 :skolemid |2908| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@188) (Lit |a#0@@58|) |b#0@@38| (Lit |c#0@@8|))) ))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@5 T@U) ($ly@@189 T@U) (|a#0@@59| T@U) (|b#0@@39| T@U) (|c#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@5) TyType) (= (type $ly@@189) LayerTypeType)) (= (type |a#0@@59|) (SeqType BoxType))) (= (type |b#0@@39|) BoxType)) (= (type |c#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@5 (Lit |a#0@@59|) (Lit |b#0@@39|) (Lit |c#0@@9|)) (and (and ($Is |a#0@@59| (TSeq Sequences._default.concat3$A@@5)) ($IsBox |b#0@@39| Sequences._default.concat3$A@@5)) ($Is |c#0@@9| (TSeq Sequences._default.concat3$A@@5))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@189) (Lit |a#0@@59|) (Lit |b#0@@39|) (Lit |c#0@@9|)) (|Seq#Append| (|Seq#Append| |a#0@@59| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |b#0@@39|))) |c#0@@9|))) :qid |unknown.0:0| :weight 3 :skolemid |2909| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@189) (Lit |a#0@@59|) (Lit |b#0@@39|) (Lit |c#0@@9|))) ))))
(assert (forall ((arg0@@547 T@U) (arg1@@245 T@U) (arg2@@155 T@U) ) (! (= (type (Sequences.__default.concatSeq arg0@@547 arg1@@245 arg2@@155)) (SeqType BoxType)) :qid |funType:Sequences.__default.concatSeq| :pattern ( (Sequences.__default.concatSeq arg0@@547 arg1@@245 arg2@@155)) )))
(assert (forall ((Sequences._default.concatSeq$A T@U) ($ly@@190 T@U) (|a#0@@60| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A) TyType) (= (type $ly@@190) LayerTypeType)) (= (type |a#0@@60|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@190) |a#0@@60|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A $ly@@190 |a#0@@60|))) :qid |unknown.0:0| :skolemid |2910| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@190) |a#0@@60|)) )))
(assert (forall ((Sequences._default.concatSeq$A@@0 T@U) ($ly@@191 T@U) (|a#0@@61| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A@@0) TyType) (= (type $ly@@191) LayerTypeType)) (= (type |a#0@@61|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $ly@@191 |a#0@@61|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $LZ |a#0@@61|))) :qid |unknown.0:0| :skolemid |2911| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 (AsFuelBottom $ly@@191) |a#0@@61|)) )))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@1 T@U) ($ly@@192 T@U) (|a#0@@62| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@1) TyType) (= (type $ly@@192) LayerTypeType)) (= (type |a#0@@62|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@1 |a#0@@62|) ($Is |a#0@@62| (TSeq (TSeq Sequences._default.concatSeq$A@@1))))) ($Is (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@192 |a#0@@62|) (TSeq Sequences._default.concatSeq$A@@1))) :qid |unknown.0:0| :skolemid |2912| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@192 |a#0@@62|)) ))))
(assert (forall ((Sequences._default.concatSeq$A@@2 T@U) ($ly@@193 T@U) (|a#0@@63| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@2) TyType) (= (type $ly@@193) LayerTypeType)) (= (type |a#0@@63|) (SeqType BoxType))) ($Is |a#0@@63| (TSeq (TSeq Sequences._default.concatSeq$A@@2)))) (= (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@193 |a#0@@63|) true)) :qid |unknown.0:0| :skolemid |2913| :pattern ( (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@193 |a#0@@63|)) )))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@3 T@U) ($ly@@194 T@U) (|a#0@@64| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@3) TyType) (= (type $ly@@194) LayerTypeType)) (= (type |a#0@@64|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 |a#0@@64|) ($Is |a#0@@64| (TSeq (TSeq Sequences._default.concatSeq$A@@3))))) (and (=> (not (= (|Seq#Length| |a#0@@64|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@64|) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@64|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@64|))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@194) |a#0@@64|) (ite (= (|Seq#Length| |a#0@@64|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 $ly@@194 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@64|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@3) |a#0@@64|))))))) :qid |unknown.0:0| :skolemid |2914| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@194) |a#0@@64|)) ))))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@4 T@U) ($ly@@195 T@U) (|a#0@@65| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@4) TyType) (= (type $ly@@195) LayerTypeType)) (= (type |a#0@@65|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit |a#0@@65|)) ($Is |a#0@@65| (TSeq (TSeq Sequences._default.concatSeq$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@65|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@65|)) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@65|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@65|)))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@195) (Lit |a#0@@65|)) (ite (= (|Seq#Length| (Lit |a#0@@65|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@195) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@65|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@65|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2915| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@195) (Lit |a#0@@65|))) ))))
(assert (forall ((Sequences._default.IsPrefix$A T@U) ($ly@@196 T@U) (|a#0@@66| T@U) (|b#0@@40| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A) TyType) (= (type $ly@@196) LayerTypeType)) (= (type |a#0@@66|) (SeqType BoxType))) (= (type |b#0@@40|) (SeqType BoxType))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@196) |a#0@@66| |b#0@@40|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A $ly@@196 |a#0@@66| |b#0@@40|))) :qid |unknown.0:0| :skolemid |2916| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@196) |a#0@@66| |b#0@@40|)) )))
(assert (forall ((Sequences._default.IsPrefix$A@@0 T@U) ($ly@@197 T@U) (|a#0@@67| T@U) (|b#0@@41| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A@@0) TyType) (= (type $ly@@197) LayerTypeType)) (= (type |a#0@@67|) (SeqType BoxType))) (= (type |b#0@@41|) (SeqType BoxType))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $ly@@197 |a#0@@67| |b#0@@41|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $LZ |a#0@@67| |b#0@@41|))) :qid |unknown.0:0| :skolemid |2917| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 (AsFuelBottom $ly@@197) |a#0@@67| |b#0@@41|)) )))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@1 T@U) ($ly@@198 T@U) (|a#0@@68| T@U) (|b#0@@42| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.IsPrefix$A@@1) TyType) (= (type $ly@@198) LayerTypeType)) (= (type |a#0@@68|) (SeqType BoxType))) (= (type |b#0@@42|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@1 |a#0@@68| |b#0@@42|) (and ($Is |a#0@@68| (TSeq Sequences._default.IsPrefix$A@@1)) ($Is |b#0@@42| (TSeq Sequences._default.IsPrefix$A@@1))))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@198 |a#0@@68| |b#0@@42|)) (<= (|Seq#Length| |a#0@@68|) (|Seq#Length| |b#0@@42|))) :qid |unknown.0:0| :skolemid |2918| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@198 |a#0@@68| |b#0@@42|)) ))))
(assert (forall ((Sequences._default.IsPrefix$A@@2 T@U) ($ly@@199 T@U) (|a#0@@69| T@U) (|b#0@@43| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@2) TyType) (= (type $ly@@199) LayerTypeType)) (= (type |a#0@@69|) (SeqType BoxType))) (= (type |b#0@@43|) (SeqType BoxType))) (and ($Is |a#0@@69| (TSeq Sequences._default.IsPrefix$A@@2)) ($Is |b#0@@43| (TSeq Sequences._default.IsPrefix$A@@2)))) (= (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@199 |a#0@@69| |b#0@@43|) true)) :qid |unknown.0:0| :skolemid |2919| :pattern ( (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@199 |a#0@@69| |b#0@@43|)) )))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@3 T@U) ($ly@@200 T@U) (|a#0@@70| T@U) (|b#0@@44| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@3) TyType) (= (type $ly@@200) LayerTypeType)) (= (type |a#0@@70|) (SeqType BoxType))) (= (type |b#0@@44|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@3 |a#0@@70| |b#0@@44|) (and ($Is |a#0@@70| (TSeq Sequences._default.IsPrefix$A@@3)) ($Is |b#0@@44| (TSeq Sequences._default.IsPrefix$A@@3))))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@200) |a#0@@70| |b#0@@44|)  (and (<= (|Seq#Length| |a#0@@70|) (|Seq#Length| |b#0@@44|)) (|Seq#Equal| |a#0@@70| (|Seq#Take| |b#0@@44| (|Seq#Length| |a#0@@70|)))))) :qid |unknown.0:0| :skolemid |2920| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@200) |a#0@@70| |b#0@@44|)) ))))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@4 T@U) ($ly@@201 T@U) (|a#0@@71| T@U) (|b#0@@45| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@4) TyType) (= (type $ly@@201) LayerTypeType)) (= (type |a#0@@71|) (SeqType BoxType))) (= (type |b#0@@45|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@4 (Lit |a#0@@71|) (Lit |b#0@@45|)) (and ($Is |a#0@@71| (TSeq Sequences._default.IsPrefix$A@@4)) ($Is |b#0@@45| (TSeq Sequences._default.IsPrefix$A@@4))))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@201) (Lit |a#0@@71|) (Lit |b#0@@45|))  (and (<= (|Seq#Length| (Lit |a#0@@71|)) (|Seq#Length| (Lit |b#0@@45|))) (|Seq#Equal| |a#0@@71| (|Seq#Take| (Lit |b#0@@45|) (|Seq#Length| (Lit |a#0@@71|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2921| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@201) (Lit |a#0@@71|) (Lit |b#0@@45|))) ))))
(assert (forall ((Sequences._default.IsSuffix$A T@U) ($ly@@202 T@U) (|a#0@@72| T@U) (|b#0@@46| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A) TyType) (= (type $ly@@202) LayerTypeType)) (= (type |a#0@@72|) (SeqType BoxType))) (= (type |b#0@@46|) (SeqType BoxType))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@202) |a#0@@72| |b#0@@46|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A $ly@@202 |a#0@@72| |b#0@@46|))) :qid |unknown.0:0| :skolemid |2922| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@202) |a#0@@72| |b#0@@46|)) )))
(assert (forall ((Sequences._default.IsSuffix$A@@0 T@U) ($ly@@203 T@U) (|a#0@@73| T@U) (|b#0@@47| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A@@0) TyType) (= (type $ly@@203) LayerTypeType)) (= (type |a#0@@73|) (SeqType BoxType))) (= (type |b#0@@47|) (SeqType BoxType))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $ly@@203 |a#0@@73| |b#0@@47|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $LZ |a#0@@73| |b#0@@47|))) :qid |unknown.0:0| :skolemid |2923| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 (AsFuelBottom $ly@@203) |a#0@@73| |b#0@@47|)) )))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@1 T@U) ($ly@@204 T@U) (|a#0@@74| T@U) (|b#0@@48| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@1) TyType) (= (type $ly@@204) LayerTypeType)) (= (type |a#0@@74|) (SeqType BoxType))) (= (type |b#0@@48|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@1 |a#0@@74| |b#0@@48|) (and ($Is |a#0@@74| (TSeq Sequences._default.IsSuffix$A@@1)) ($Is |b#0@@48| (TSeq Sequences._default.IsSuffix$A@@1))))) true) :qid |unknown.0:0| :skolemid |2924| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@1 $ly@@204 |a#0@@74| |b#0@@48|)) ))))
(assert (forall ((Sequences._default.IsSuffix$A@@2 T@U) ($ly@@205 T@U) (|a#0@@75| T@U) (|b#0@@49| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@2) TyType) (= (type $ly@@205) LayerTypeType)) (= (type |a#0@@75|) (SeqType BoxType))) (= (type |b#0@@49|) (SeqType BoxType))) (and ($Is |a#0@@75| (TSeq Sequences._default.IsSuffix$A@@2)) ($Is |b#0@@49| (TSeq Sequences._default.IsSuffix$A@@2)))) (= (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@205 |a#0@@75| |b#0@@49|) true)) :qid |unknown.0:0| :skolemid |2925| :pattern ( (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@205 |a#0@@75| |b#0@@49|)) )))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@3 T@U) ($ly@@206 T@U) (|a#0@@76| T@U) (|b#0@@50| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@3) TyType) (= (type $ly@@206) LayerTypeType)) (= (type |a#0@@76|) (SeqType BoxType))) (= (type |b#0@@50|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@3 |a#0@@76| |b#0@@50|) (and ($Is |a#0@@76| (TSeq Sequences._default.IsSuffix$A@@3)) ($Is |b#0@@50| (TSeq Sequences._default.IsSuffix$A@@3))))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@206) |a#0@@76| |b#0@@50|)  (and (<= (|Seq#Length| |a#0@@76|) (|Seq#Length| |b#0@@50|)) (|Seq#Equal| |a#0@@76| (|Seq#Drop| |b#0@@50| (- (|Seq#Length| |b#0@@50|) (|Seq#Length| |a#0@@76|))))))) :qid |unknown.0:0| :skolemid |2926| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@206) |a#0@@76| |b#0@@50|)) ))))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@4 T@U) ($ly@@207 T@U) (|a#0@@77| T@U) (|b#0@@51| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@4) TyType) (= (type $ly@@207) LayerTypeType)) (= (type |a#0@@77|) (SeqType BoxType))) (= (type |b#0@@51|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@4 (Lit |a#0@@77|) (Lit |b#0@@51|)) (and ($Is |a#0@@77| (TSeq Sequences._default.IsSuffix$A@@4)) ($Is |b#0@@51| (TSeq Sequences._default.IsSuffix$A@@4))))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@207) (Lit |a#0@@77|) (Lit |b#0@@51|))  (and (<= (|Seq#Length| (Lit |a#0@@77|)) (|Seq#Length| (Lit |b#0@@51|))) (|Seq#Equal| |a#0@@77| (|Seq#Drop| (Lit |b#0@@51|) (- (|Seq#Length| (Lit |b#0@@51|)) (|Seq#Length| (Lit |a#0@@77|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2927| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@207) (Lit |a#0@@77|) (Lit |b#0@@51|))) ))))
(assert (forall ((arg0@@548 T@U) (arg1@@246 T@U) (arg2@@156 T@U) (arg3@@112 T@U) (arg4@@86 Int) ) (! (= (type (Sequences.__default.SeqIndexIterate arg0@@548 arg1@@246 arg2@@156 arg3@@112 arg4@@86)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndexIterate| :pattern ( (Sequences.__default.SeqIndexIterate arg0@@548 arg1@@246 arg2@@156 arg3@@112 arg4@@86)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A T@U) ($ly@@208 T@U) (|run#0@@66| T@U) (|needle#0| T@U) (|i#0@@43| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A) TyType) (= (type $ly@@208) LayerTypeType)) (= (type |run#0@@66|) (SeqType BoxType))) (= (type |needle#0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@208) |run#0@@66| |needle#0| |i#0@@43|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A $ly@@208 |run#0@@66| |needle#0| |i#0@@43|))) :qid |unknown.0:0| :skolemid |2928| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@208) |run#0@@66| |needle#0| |i#0@@43|)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@0 T@U) ($ly@@209 T@U) (|run#0@@67| T@U) (|needle#0@@0| T@U) (|i#0@@44| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@0) TyType) (= (type $ly@@209) LayerTypeType)) (= (type |run#0@@67|) (SeqType BoxType))) (= (type |needle#0@@0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $ly@@209 |run#0@@67| |needle#0@@0| |i#0@@44|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $LZ |run#0@@67| |needle#0@@0| |i#0@@44|))) :qid |unknown.0:0| :skolemid |2929| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 (AsFuelBottom $ly@@209) |run#0@@67| |needle#0@@0| |i#0@@44|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@1 T@U) ($ly@@210 T@U) (|run#0@@68| T@U) (|needle#0@@1| T@U) (|i#0@@45| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@1) TyType) (= (type $ly@@210) LayerTypeType)) (= (type |run#0@@68|) (SeqType BoxType))) (= (type |needle#0@@1|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@1 |run#0@@68| |needle#0@@1| |i#0@@45|) (and (and ($Is |run#0@@68| (TSeq Sequences._default.SeqIndexIterate$A@@1)) ($IsBox |needle#0@@1| Sequences._default.SeqIndexIterate$A@@1)) (and (<= (LitInt 0) |i#0@@45|) (<= |i#0@@45| (|Seq#Length| |run#0@@68|)))))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@210 |run#0@@68| |needle#0@@1| |i#0@@45|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@210 |run#0@@68| |needle#0@@1| |i#0@@45|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@210 |run#0@@68| |needle#0@@1| |i#0@@45|)))) (|Seq#Length| |run#0@@68|))) (= (|Seq#Index| |run#0@@68| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@210 |run#0@@68| |needle#0@@1| |i#0@@45|))))) |needle#0@@1|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@210 |run#0@@68| |needle#0@@1| |i#0@@45|)) (forall ((|j#0@@10| Int) ) (!  (=> (and (<= |i#0@@45| |j#0@@10|) (< |j#0@@10| (|Seq#Length| |run#0@@68|))) (not (= (|Seq#Index| |run#0@@68| |j#0@@10|) |needle#0@@1|))) :qid |Sequencesidfy.341:32| :skolemid |2930| :pattern ( (|Seq#Index| |run#0@@68| |j#0@@10|)) )))) ($Is (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@210 |run#0@@68| |needle#0@@1| |i#0@@45|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |2931| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@210 |run#0@@68| |needle#0@@1| |i#0@@45|)) ))))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@2 T@U) ($ly@@211 T@U) (|run#0@@69| T@U) (|needle#0@@2| T@U) (|i#0@@46| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@2) TyType) (= (type $ly@@211) LayerTypeType)) (= (type |run#0@@69|) (SeqType BoxType))) (= (type |needle#0@@2|) BoxType)) (and ($Is |run#0@@69| (TSeq Sequences._default.SeqIndexIterate$A@@2)) ($IsBox |needle#0@@2| Sequences._default.SeqIndexIterate$A@@2))) (= (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@211 |run#0@@69| |needle#0@@2| |i#0@@46|)  (and (<= (LitInt 0) |i#0@@46|) (<= |i#0@@46| (|Seq#Length| |run#0@@69|))))) :qid |unknown.0:0| :skolemid |2932| :pattern ( (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@211 |run#0@@69| |needle#0@@2| |i#0@@46|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@3 T@U) ($ly@@212 T@U) (|run#0@@70| T@U) (|needle#0@@3| T@U) (|i#0@@47| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@3) TyType) (= (type $ly@@212) LayerTypeType)) (= (type |run#0@@70|) (SeqType BoxType))) (= (type |needle#0@@3|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@70| |needle#0@@3| |i#0@@47|) (and (and ($Is |run#0@@70| (TSeq Sequences._default.SeqIndexIterate$A@@3)) ($IsBox |needle#0@@3| Sequences._default.SeqIndexIterate$A@@3)) (and (<= (LitInt 0) |i#0@@47|) (<= |i#0@@47| (|Seq#Length| |run#0@@70|)))))) (and (=> (not (= |i#0@@47| (|Seq#Length| |run#0@@70|))) (=> (not (= (|Seq#Index| |run#0@@70| |i#0@@47|) |needle#0@@3|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@70| |needle#0@@3| (+ |i#0@@47| 1)))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@212) |run#0@@70| |needle#0@@3| |i#0@@47|) (ite (= |i#0@@47| (|Seq#Length| |run#0@@70|)) |#Options.Option.None| (ite (= (|Seq#Index| |run#0@@70| |i#0@@47|) |needle#0@@3|) (|#Options.Option.Some| ($Box (int_2_U |i#0@@47|))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 $ly@@212 |run#0@@70| |needle#0@@3| (+ |i#0@@47| 1))))))) :qid |unknown.0:0| :skolemid |2933| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@212) |run#0@@70| |needle#0@@3| |i#0@@47|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@4 T@U) ($ly@@213 T@U) (|run#0@@71| T@U) (|needle#0@@4| T@U) (|i#0@@48| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@4) TyType) (= (type $ly@@213) LayerTypeType)) (= (type |run#0@@71|) (SeqType BoxType))) (= (type |needle#0@@4|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@71|) |needle#0@@4| (LitInt |i#0@@48|)) (and (and ($Is |run#0@@71| (TSeq Sequences._default.SeqIndexIterate$A@@4)) ($IsBox |needle#0@@4| Sequences._default.SeqIndexIterate$A@@4)) (and (<= (LitInt 0) (LitInt |i#0@@48|)) (<= (LitInt |i#0@@48|) (|Seq#Length| (Lit |run#0@@71|))))))) (and (=> (not (= (LitInt |i#0@@48|) (|Seq#Length| (Lit |run#0@@71|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@71|) (LitInt |i#0@@48|)) |needle#0@@4|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@71|) |needle#0@@4| (LitInt (+ |i#0@@48| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@213) (Lit |run#0@@71|) |needle#0@@4| (LitInt |i#0@@48|)) (ite (= (LitInt |i#0@@48|) (|Seq#Length| (Lit |run#0@@71|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@71|) (LitInt |i#0@@48|)) |needle#0@@4|) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@48|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@213) (Lit |run#0@@71|) |needle#0@@4| (LitInt (+ |i#0@@48| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2934| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@213) (Lit |run#0@@71|) |needle#0@@4| (LitInt |i#0@@48|))) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@5 T@U) ($ly@@214 T@U) (|run#0@@72| T@U) (|needle#0@@5| T@U) (|i#0@@49| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@5) TyType) (= (type $ly@@214) LayerTypeType)) (= (type |run#0@@72|) (SeqType BoxType))) (= (type |needle#0@@5|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@72|) (Lit |needle#0@@5|) (LitInt |i#0@@49|)) (and (and ($Is |run#0@@72| (TSeq Sequences._default.SeqIndexIterate$A@@5)) ($IsBox |needle#0@@5| Sequences._default.SeqIndexIterate$A@@5)) (and (<= (LitInt 0) (LitInt |i#0@@49|)) (<= (LitInt |i#0@@49|) (|Seq#Length| (Lit |run#0@@72|))))))) (and (=> (not (= (LitInt |i#0@@49|) (|Seq#Length| (Lit |run#0@@72|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@72|) (LitInt |i#0@@49|)) (Lit |needle#0@@5|))) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@72|) (Lit |needle#0@@5|) (LitInt (+ |i#0@@49| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@214) (Lit |run#0@@72|) (Lit |needle#0@@5|) (LitInt |i#0@@49|)) (ite (= (LitInt |i#0@@49|) (|Seq#Length| (Lit |run#0@@72|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@72|) (LitInt |i#0@@49|)) (Lit |needle#0@@5|)) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@49|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@214) (Lit |run#0@@72|) (Lit |needle#0@@5|) (LitInt (+ |i#0@@49| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2935| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@214) (Lit |run#0@@72|) (Lit |needle#0@@5|) (LitInt |i#0@@49|))) ))))
(assert (forall ((arg0@@549 T@U) (arg1@@247 T@U) (arg2@@157 T@U) (arg3@@113 T@U) ) (! (= (type (Sequences.__default.SeqIndex arg0@@549 arg1@@247 arg2@@157 arg3@@113)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndex| :pattern ( (Sequences.__default.SeqIndex arg0@@549 arg1@@247 arg2@@157 arg3@@113)) )))
(assert (forall ((Sequences._default.SeqIndex$A T@U) ($ly@@215 T@U) (|run#0@@73| T@U) (|needle#0@@6| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A) TyType) (= (type $ly@@215) LayerTypeType)) (= (type |run#0@@73|) (SeqType BoxType))) (= (type |needle#0@@6|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@215) |run#0@@73| |needle#0@@6|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A $ly@@215 |run#0@@73| |needle#0@@6|))) :qid |unknown.0:0| :skolemid |2936| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@215) |run#0@@73| |needle#0@@6|)) )))
(assert (forall ((Sequences._default.SeqIndex$A@@0 T@U) ($ly@@216 T@U) (|run#0@@74| T@U) (|needle#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A@@0) TyType) (= (type $ly@@216) LayerTypeType)) (= (type |run#0@@74|) (SeqType BoxType))) (= (type |needle#0@@7|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $ly@@216 |run#0@@74| |needle#0@@7|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $LZ |run#0@@74| |needle#0@@7|))) :qid |unknown.0:0| :skolemid |2937| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 (AsFuelBottom $ly@@216) |run#0@@74| |needle#0@@7|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@1 T@U) ($ly@@217 T@U) (|run#0@@75| T@U) (|needle#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@1) TyType) (= (type $ly@@217) LayerTypeType)) (= (type |run#0@@75|) (SeqType BoxType))) (= (type |needle#0@@8|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@1 |run#0@@75| |needle#0@@8|) (and ($Is |run#0@@75| (TSeq Sequences._default.SeqIndex$A@@1)) ($IsBox |needle#0@@8| Sequences._default.SeqIndex$A@@1)))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@217 |run#0@@75| |needle#0@@8|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@217 |run#0@@75| |needle#0@@8|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@217 |run#0@@75| |needle#0@@8|)))) (|Seq#Length| |run#0@@75|))) (= (|Seq#Index| |run#0@@75| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@217 |run#0@@75| |needle#0@@8|))))) |needle#0@@8|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@217 |run#0@@75| |needle#0@@8|)) (forall ((|i#0@@50| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@50|) (< |i#0@@50| (|Seq#Length| |run#0@@75|))) (not (= (|Seq#Index| |run#0@@75| |i#0@@50|) |needle#0@@8|))) :qid |Sequencesidfy.351:32| :skolemid |2938| :pattern ( (|Seq#Index| |run#0@@75| |i#0@@50|)) )))) ($Is (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@217 |run#0@@75| |needle#0@@8|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |2939| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@217 |run#0@@75| |needle#0@@8|)) ))))
(assert (forall ((Sequences._default.SeqIndex$A@@2 T@U) ($ly@@218 T@U) (|run#0@@76| T@U) (|needle#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@2) TyType) (= (type $ly@@218) LayerTypeType)) (= (type |run#0@@76|) (SeqType BoxType))) (= (type |needle#0@@9|) BoxType)) (and ($Is |run#0@@76| (TSeq Sequences._default.SeqIndex$A@@2)) ($IsBox |needle#0@@9| Sequences._default.SeqIndex$A@@2))) (= (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@218 |run#0@@76| |needle#0@@9|) true)) :qid |unknown.0:0| :skolemid |2940| :pattern ( (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@218 |run#0@@76| |needle#0@@9|)) )))
(assert (= (type StartFuel_Sequences._default.SeqIndexIterate) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@3 T@U) ($ly@@219 T@U) (|run#0@@77| T@U) (|needle#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@3) TyType) (= (type $ly@@219) LayerTypeType)) (= (type |run#0@@77|) (SeqType BoxType))) (= (type |needle#0@@10|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@77| |needle#0@@10|) (and ($Is |run#0@@77| (TSeq Sequences._default.SeqIndex$A@@3)) ($IsBox |needle#0@@10| Sequences._default.SeqIndex$A@@3)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@77| |needle#0@@10| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@219) |run#0@@77| |needle#0@@10|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@3 StartFuel_Sequences._default.SeqIndexIterate |run#0@@77| |needle#0@@10| (LitInt 0))))) :qid |unknown.0:0| :skolemid |2941| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@219) |run#0@@77| |needle#0@@10|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@4 T@U) ($ly@@220 T@U) (|run#0@@78| T@U) (|needle#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@4) TyType) (= (type $ly@@220) LayerTypeType)) (= (type |run#0@@78|) (SeqType BoxType))) (= (type |needle#0@@11|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@78|) |needle#0@@11|) (and ($Is |run#0@@78| (TSeq Sequences._default.SeqIndex$A@@4)) ($IsBox |needle#0@@11| Sequences._default.SeqIndex$A@@4)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@78|) |needle#0@@11| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@220) (Lit |run#0@@78|) |needle#0@@11|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@4 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@78|) |needle#0@@11| (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |2942| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@220) (Lit |run#0@@78|) |needle#0@@11|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@5 T@U) ($ly@@221 T@U) (|run#0@@79| T@U) (|needle#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@5) TyType) (= (type $ly@@221) LayerTypeType)) (= (type |run#0@@79|) (SeqType BoxType))) (= (type |needle#0@@12|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@79|) (Lit |needle#0@@12|)) (and ($Is |run#0@@79| (TSeq Sequences._default.SeqIndex$A@@5)) ($IsBox |needle#0@@12| Sequences._default.SeqIndex$A@@5)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@79|) (Lit |needle#0@@12|) (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@221) (Lit |run#0@@79|) (Lit |needle#0@@12|)) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@5 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@79|) (Lit |needle#0@@12|) (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |2943| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@221) (Lit |run#0@@79|) (Lit |needle#0@@12|))) ))))
(assert (forall ((arg0@@550 T@U) (arg1@@248 T@U) (arg2@@158 Int) (arg3@@114 T@U) ) (! (= (type (Sequences.__default.SeqOfLength arg0@@550 arg1@@248 arg2@@158 arg3@@114)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqOfLength| :pattern ( (Sequences.__default.SeqOfLength arg0@@550 arg1@@248 arg2@@158 arg3@@114)) )))
(assert (forall ((Sequences._default.SeqOfLength$V T@U) ($ly@@222 T@U) (|length#0| Int) (|v#0@@21| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V) TyType) (= (type $ly@@222) LayerTypeType)) (= (type |v#0@@21|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@222) |length#0| |v#0@@21|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V $ly@@222 |length#0| |v#0@@21|))) :qid |unknown.0:0| :skolemid |2944| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@222) |length#0| |v#0@@21|)) )))
(assert (forall ((Sequences._default.SeqOfLength$V@@0 T@U) ($ly@@223 T@U) (|length#0@@0| Int) (|v#0@@22| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V@@0) TyType) (= (type $ly@@223) LayerTypeType)) (= (type |v#0@@22|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $ly@@223 |length#0@@0| |v#0@@22|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $LZ |length#0@@0| |v#0@@22|))) :qid |unknown.0:0| :skolemid |2945| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 (AsFuelBottom $ly@@223) |length#0@@0| |v#0@@22|)) )))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@1 T@U) ($ly@@224 T@U) (|length#0@@1| Int) (|v#0@@23| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@1) TyType) (= (type $ly@@224) LayerTypeType)) (= (type |v#0@@23|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@1 |length#0@@1| |v#0@@23|) (and (<= (LitInt 0) |length#0@@1|) ($IsBox |v#0@@23| Sequences._default.SeqOfLength$V@@1)))) (and (and (= (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@224 |length#0@@1| |v#0@@23|)) |length#0@@1|) (forall ((|i#0@@51| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@51|) (< |i#0@@51| (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@224 |length#0@@1| |v#0@@23|)))) (= (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@224 |length#0@@1| |v#0@@23|) |i#0@@51|) |v#0@@23|)) :qid |Sequencesidfy.358:18| :skolemid |2946| :pattern ( (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@224 |length#0@@1| |v#0@@23|) |i#0@@51|)) ))) ($Is (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@224 |length#0@@1| |v#0@@23|) (TSeq Sequences._default.SeqOfLength$V@@1)))) :qid |unknown.0:0| :skolemid |2947| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@224 |length#0@@1| |v#0@@23|)) ))))
(assert (forall ((Sequences._default.SeqOfLength$V@@2 T@U) ($ly@@225 T@U) (|length#0@@2| Int) (|v#0@@24| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@2) TyType) (= (type $ly@@225) LayerTypeType)) (= (type |v#0@@24|) BoxType)) (and (<= (LitInt 0) |length#0@@2|) ($IsBox |v#0@@24| Sequences._default.SeqOfLength$V@@2))) (= (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@225 |length#0@@2| |v#0@@24|) true)) :qid |unknown.0:0| :skolemid |2948| :pattern ( (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@225 |length#0@@2| |v#0@@24|)) )))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@3 T@U) ($ly@@226 T@U) (|length#0@@3| Int) (|v#0@@25| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@3) TyType) (= (type $ly@@226) LayerTypeType)) (= (type |v#0@@25|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 |length#0@@3| |v#0@@25|) (and (<= (LitInt 0) |length#0@@3|) ($IsBox |v#0@@25| Sequences._default.SeqOfLength$V@@3)))) (and (=> (not (= |length#0@@3| (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 (- |length#0@@3| 1) |v#0@@25|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@226) |length#0@@3| |v#0@@25|) (ite (= |length#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@25|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 $ly@@226 (- |length#0@@3| 1) |v#0@@25|)))))) :qid |unknown.0:0| :skolemid |2949| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@226) |length#0@@3| |v#0@@25|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@4 T@U) ($ly@@227 T@U) (|length#0@@4| Int) (|v#0@@26| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@4) TyType) (= (type $ly@@227) LayerTypeType)) (= (type |v#0@@26|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt |length#0@@4|) |v#0@@26|) (and (<= (LitInt 0) |length#0@@4|) ($IsBox |v#0@@26| Sequences._default.SeqOfLength$V@@4)))) (and (=> (not (= (LitInt |length#0@@4|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt (- |length#0@@4| 1)) |v#0@@26|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@227) (LitInt |length#0@@4|) |v#0@@26|) (ite (= (LitInt |length#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@26|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@227) (LitInt (- |length#0@@4| 1)) |v#0@@26|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2950| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@227) (LitInt |length#0@@4|) |v#0@@26|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@5 T@U) ($ly@@228 T@U) (|length#0@@5| Int) (|v#0@@27| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@5) TyType) (= (type $ly@@228) LayerTypeType)) (= (type |v#0@@27|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt |length#0@@5|) (Lit |v#0@@27|)) (and (<= (LitInt 0) |length#0@@5|) ($IsBox |v#0@@27| Sequences._default.SeqOfLength$V@@5)))) (and (=> (not (= (LitInt |length#0@@5|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt (- |length#0@@5| 1)) (Lit |v#0@@27|))) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@228) (LitInt |length#0@@5|) (Lit |v#0@@27|)) (ite (= (LitInt |length#0@@5|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |v#0@@27|)) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@228) (LitInt (- |length#0@@5| 1)) (Lit |v#0@@27|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2951| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@228) (LitInt |length#0@@5|) (Lit |v#0@@27|))) ))))
(assert (forall ((arg0@@551 T@U) (arg1@@249 T@U) (arg2@@159 T@U) (arg3@@115 Int) (arg4@@87 T@U) ) (! (= (type (Sequences.__default.SeqIndexUpdate arg0@@551 arg1@@249 arg2@@159 arg3@@115 arg4@@87)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqIndexUpdate| :pattern ( (Sequences.__default.SeqIndexUpdate arg0@@551 arg1@@249 arg2@@159 arg3@@115 arg4@@87)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T T@U) ($ly@@229 T@U) (|s#0@@127| T@U) (|i#0@@52| Int) (|t#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T) TyType) (= (type $ly@@229) LayerTypeType)) (= (type |s#0@@127|) (SeqType BoxType))) (= (type |t#0|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@229) |s#0@@127| |i#0@@52| |t#0|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T $ly@@229 |s#0@@127| |i#0@@52| |t#0|))) :qid |unknown.0:0| :skolemid |2952| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@229) |s#0@@127| |i#0@@52| |t#0|)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@0 T@U) ($ly@@230 T@U) (|s#0@@128| T@U) (|i#0@@53| Int) (|t#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@0) TyType) (= (type $ly@@230) LayerTypeType)) (= (type |s#0@@128|) (SeqType BoxType))) (= (type |t#0@@0|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $ly@@230 |s#0@@128| |i#0@@53| |t#0@@0|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $LZ |s#0@@128| |i#0@@53| |t#0@@0|))) :qid |unknown.0:0| :skolemid |2953| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 (AsFuelBottom $ly@@230) |s#0@@128| |i#0@@53| |t#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@1 T@U) ($ly@@231 T@U) (|s#0@@129| T@U) (|i#0@@54| Int) (|t#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@1) TyType) (= (type $ly@@231) LayerTypeType)) (= (type |s#0@@129|) (SeqType BoxType))) (= (type |t#0@@1|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@1 |s#0@@129| |i#0@@54| |t#0@@1|) (and (and (and ($Is |s#0@@129| (TSeq Sequences._default.SeqIndexUpdate$T@@1)) (and (<= (LitInt 0) |i#0@@54|) (< |i#0@@54| 18446744073709551616))) ($IsBox |t#0@@1| Sequences._default.SeqIndexUpdate$T@@1)) (and (< (+ |i#0@@54| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@54|) (< |i#0@@54| (|Seq#Length| |s#0@@129|))))))) (and (|Seq#Equal| (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@231 |s#0@@129| |i#0@@54| |t#0@@1|) (|Seq#Update| |s#0@@129| |i#0@@54| |t#0@@1|)) ($Is (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@231 |s#0@@129| |i#0@@54| |t#0@@1|) (TSeq Sequences._default.SeqIndexUpdate$T@@1)))) :qid |unknown.0:0| :skolemid |2954| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@231 |s#0@@129| |i#0@@54| |t#0@@1|)) ))))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@2 T@U) ($ly@@232 T@U) (|s#0@@130| T@U) (|i#0@@55| Int) (|t#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@2) TyType) (= (type $ly@@232) LayerTypeType)) (= (type |s#0@@130|) (SeqType BoxType))) (= (type |t#0@@2|) BoxType)) (and (and ($Is |s#0@@130| (TSeq Sequences._default.SeqIndexUpdate$T@@2)) (and (<= (LitInt 0) |i#0@@55|) (< |i#0@@55| 18446744073709551616))) ($IsBox |t#0@@2| Sequences._default.SeqIndexUpdate$T@@2))) (= (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@232 |s#0@@130| |i#0@@55| |t#0@@2|)  (and (< (+ |i#0@@55| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@55|) (< |i#0@@55| (|Seq#Length| |s#0@@130|)))))) :qid |unknown.0:0| :skolemid |2955| :pattern ( (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@232 |s#0@@130| |i#0@@55| |t#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@3 T@U) ($ly@@233 T@U) (|s#0@@131| T@U) (|i#0@@56| Int) (|t#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@3) TyType) (= (type $ly@@233) LayerTypeType)) (= (type |s#0@@131|) (SeqType BoxType))) (= (type |t#0@@3|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@3 |s#0@@131| |i#0@@56| |t#0@@3|) (and (and (and ($Is |s#0@@131| (TSeq Sequences._default.SeqIndexUpdate$T@@3)) (and (<= (LitInt 0) |i#0@@56|) (< |i#0@@56| 18446744073709551616))) ($IsBox |t#0@@3| Sequences._default.SeqIndexUpdate$T@@3)) (and (< (+ |i#0@@56| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@56|) (< |i#0@@56| (|Seq#Length| |s#0@@131|))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@233) |s#0@@131| |i#0@@56| |t#0@@3|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@131| |i#0@@56|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@3|)) (|Seq#Drop| |s#0@@131| (+ |i#0@@56| 1))))) :qid |unknown.0:0| :skolemid |2956| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@233) |s#0@@131| |i#0@@56| |t#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@4 T@U) ($ly@@234 T@U) (|s#0@@132| T@U) (|i#0@@57| Int) (|t#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@4) TyType) (= (type $ly@@234) LayerTypeType)) (= (type |s#0@@132|) (SeqType BoxType))) (= (type |t#0@@4|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@4 (Lit |s#0@@132|) (LitInt |i#0@@57|) |t#0@@4|) (and (and (and ($Is |s#0@@132| (TSeq Sequences._default.SeqIndexUpdate$T@@4)) (and (<= (LitInt 0) |i#0@@57|) (< |i#0@@57| 18446744073709551616))) ($IsBox |t#0@@4| Sequences._default.SeqIndexUpdate$T@@4)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@57| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@57|)) (< |i#0@@57| (|Seq#Length| (Lit |s#0@@132|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@234) (Lit |s#0@@132|) (LitInt |i#0@@57|) |t#0@@4|) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@132|) (LitInt |i#0@@57|)) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@4|)) (|Seq#Drop| (Lit |s#0@@132|) (LitInt (+ |i#0@@57| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2957| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@234) (Lit |s#0@@132|) (LitInt |i#0@@57|) |t#0@@4|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@5 T@U) ($ly@@235 T@U) (|s#0@@133| T@U) (|i#0@@58| Int) (|t#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@5) TyType) (= (type $ly@@235) LayerTypeType)) (= (type |s#0@@133|) (SeqType BoxType))) (= (type |t#0@@5|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@5 (Lit |s#0@@133|) (LitInt |i#0@@58|) (Lit |t#0@@5|)) (and (and (and ($Is |s#0@@133| (TSeq Sequences._default.SeqIndexUpdate$T@@5)) (and (<= (LitInt 0) |i#0@@58|) (< |i#0@@58| 18446744073709551616))) ($IsBox |t#0@@5| Sequences._default.SeqIndexUpdate$T@@5)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@58| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@58|)) (< |i#0@@58| (|Seq#Length| (Lit |s#0@@133|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@235) (Lit |s#0@@133|) (LitInt |i#0@@58|) (Lit |t#0@@5|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@133|) (LitInt |i#0@@58|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@5|))) (|Seq#Drop| (Lit |s#0@@133|) (LitInt (+ |i#0@@58| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2958| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@235) (Lit |s#0@@133|) (LitInt |i#0@@58|) (Lit |t#0@@5|))) ))))
(assert (forall ((arg0@@552 T@U) (arg1@@250 T@U) (arg2@@160 T@U) (arg3@@116 T@U) (arg4@@88 T@U) ) (! (= (type (Sequences.__default.Zip arg0@@552 arg1@@250 arg2@@160 arg3@@116 arg4@@88)) (SeqType BoxType)) :qid |funType:Sequences.__default.Zip| :pattern ( (Sequences.__default.Zip arg0@@552 arg1@@250 arg2@@160 arg3@@116 arg4@@88)) )))
(assert (forall ((Sequences._default.Zip$A T@U) (Sequences._default.Zip$B T@U) ($ly@@236 T@U) (|a#0@@78| T@U) (|b#0@@52| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A) TyType) (= (type Sequences._default.Zip$B) TyType)) (= (type $ly@@236) LayerTypeType)) (= (type |a#0@@78|) (SeqType BoxType))) (= (type |b#0@@52|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@236) |a#0@@78| |b#0@@52|) (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B $ly@@236 |a#0@@78| |b#0@@52|))) :qid |unknown.0:0| :skolemid |2959| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@236) |a#0@@78| |b#0@@52|)) )))
(assert (forall ((Sequences._default.Zip$A@@0 T@U) (Sequences._default.Zip$B@@0 T@U) ($ly@@237 T@U) (|a#0@@79| T@U) (|b#0@@53| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A@@0) TyType) (= (type Sequences._default.Zip$B@@0) TyType)) (= (type $ly@@237) LayerTypeType)) (= (type |a#0@@79|) (SeqType BoxType))) (= (type |b#0@@53|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $ly@@237 |a#0@@79| |b#0@@53|) (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $LZ |a#0@@79| |b#0@@53|))) :qid |unknown.0:0| :skolemid |2960| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 (AsFuelBottom $ly@@237) |a#0@@79| |b#0@@53|)) )))
(assert  (=> true (forall ((Sequences._default.Zip$A@@1 T@U) (Sequences._default.Zip$B@@1 T@U) ($ly@@238 T@U) (|a#0@@80| T@U) (|b#0@@54| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@1) TyType) (= (type Sequences._default.Zip$B@@1) TyType)) (= (type $ly@@238) LayerTypeType)) (= (type |a#0@@80|) (SeqType BoxType))) (= (type |b#0@@54|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 |a#0@@80| |b#0@@54|) (and (and ($Is |a#0@@80| (TSeq Sequences._default.Zip$A@@1)) ($Is |b#0@@54| (TSeq Sequences._default.Zip$B@@1))) (= (|Seq#Length| |a#0@@80|) (|Seq#Length| |b#0@@54|))))) (and (and (= (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@238 |a#0@@80| |b#0@@54|)) (|Seq#Length| |a#0@@80|)) (forall ((|i#0@@59| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@59|) (< |i#0@@59| (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@238 |a#0@@80| |b#0@@54|)))) (|_System.Tuple2#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@238 |a#0@@80| |b#0@@54|) |i#0@@59|)) (|#_System._tuple#2._#Make2| (|Seq#Index| |a#0@@80| |i#0@@59|) (|Seq#Index| |b#0@@54| |i#0@@59|))))) :qid |Sequencesidfy.379:20| :skolemid |2961| :pattern ( (|Seq#Index| |b#0@@54| |i#0@@59|)) :pattern ( (|Seq#Index| |a#0@@80| |i#0@@59|)) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@238 |a#0@@80| |b#0@@54|) |i#0@@59|))) ))) ($Is (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@238 |a#0@@80| |b#0@@54|) (TSeq (Tclass._System.Tuple2 Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1))))) :qid |unknown.0:0| :skolemid |2962| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@238 |a#0@@80| |b#0@@54|)) ))))
(assert (forall ((Sequences._default.Zip$A@@2 T@U) (Sequences._default.Zip$B@@2 T@U) ($ly@@239 T@U) (|a#0@@81| T@U) (|b#0@@55| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@2) TyType) (= (type Sequences._default.Zip$B@@2) TyType)) (= (type $ly@@239) LayerTypeType)) (= (type |a#0@@81|) (SeqType BoxType))) (= (type |b#0@@55|) (SeqType BoxType))) (and ($Is |a#0@@81| (TSeq Sequences._default.Zip$A@@2)) ($Is |b#0@@55| (TSeq Sequences._default.Zip$B@@2)))) (= (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@239 |a#0@@81| |b#0@@55|) (= (|Seq#Length| |a#0@@81|) (|Seq#Length| |b#0@@55|)))) :qid |unknown.0:0| :skolemid |2963| :pattern ( (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@239 |a#0@@81| |b#0@@55|)) )))
(assert  (=> true (forall ((Sequences._default.Zip$A@@3 T@U) (Sequences._default.Zip$B@@3 T@U) ($ly@@240 T@U) (|a#0@@82| T@U) (|b#0@@56| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@3) TyType) (= (type Sequences._default.Zip$B@@3) TyType)) (= (type $ly@@240) LayerTypeType)) (= (type |a#0@@82|) (SeqType BoxType))) (= (type |b#0@@56|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 |a#0@@82| |b#0@@56|) (and (and ($Is |a#0@@82| (TSeq Sequences._default.Zip$A@@3)) ($Is |b#0@@56| (TSeq Sequences._default.Zip$B@@3))) (= (|Seq#Length| |a#0@@82|) (|Seq#Length| |b#0@@56|))))) (and (=> (not (= (|Seq#Length| |a#0@@82|) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@3 |a#0@@82|) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@3 |b#0@@56|)) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@82|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@56|))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@3 |a#0@@82|) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@3 |b#0@@56|)))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@240) |a#0@@82| |b#0@@56|) (ite (= (|Seq#Length| |a#0@@82|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 $ly@@240 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@82|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@56|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#_System._tuple#2._#Make2| (Sequences.__default.Last Sequences._default.Zip$A@@3 |a#0@@82|) (Sequences.__default.Last Sequences._default.Zip$B@@3 |b#0@@56|))))))))) :qid |unknown.0:0| :skolemid |2964| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@240) |a#0@@82| |b#0@@56|)) ))))
(assert  (=> true (forall ((Sequences._default.Zip$A@@4 T@U) (Sequences._default.Zip$B@@4 T@U) ($ly@@241 T@U) (|a#0@@83| T@U) (|b#0@@57| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@4) TyType) (= (type Sequences._default.Zip$B@@4) TyType)) (= (type $ly@@241) LayerTypeType)) (= (type |a#0@@83|) (SeqType BoxType))) (= (type |b#0@@57|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit |a#0@@83|) (Lit |b#0@@57|)) (and (and ($Is |a#0@@83| (TSeq Sequences._default.Zip$A@@4)) ($Is |b#0@@57| (TSeq Sequences._default.Zip$B@@4))) (= (|Seq#Length| (Lit |a#0@@83|)) (|Seq#Length| (Lit |b#0@@57|)))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@83|)) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@83|)) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@57|))) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@83|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@57|))))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@83|)) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@57|))))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@241) (Lit |a#0@@83|) (Lit |b#0@@57|)) (ite (= (|Seq#Length| (Lit |a#0@@83|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@241) (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@83|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@57|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#_System._tuple#2._#Make2| (Lit (Sequences.__default.Last Sequences._default.Zip$A@@4 (Lit |a#0@@83|))) (Lit (Sequences.__default.Last Sequences._default.Zip$B@@4 (Lit |b#0@@57|)))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2965| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@241) (Lit |a#0@@83|) (Lit |b#0@@57|))) ))))
(assert (forall ((arg0@@553 T@U) (arg1@@251 T@U) (arg2@@161 T@U) (arg3@@117 T@U) ) (! (= (type (Sequences.__default.Unzip arg0@@553 arg1@@251 arg2@@161 arg3@@117)) DatatypeTypeType) :qid |funType:Sequences.__default.Unzip| :pattern ( (Sequences.__default.Unzip arg0@@553 arg1@@251 arg2@@161 arg3@@117)) )))
(assert (forall ((Sequences._default.Unzip$A T@U) (Sequences._default.Unzip$B T@U) ($ly@@242 T@U) (|z#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A) TyType) (= (type Sequences._default.Unzip$B) TyType)) (= (type $ly@@242) LayerTypeType)) (= (type |z#0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@242) |z#0|) (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B $ly@@242 |z#0|))) :qid |unknown.0:0| :skolemid |2966| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@242) |z#0|)) )))
(assert (forall ((Sequences._default.Unzip$A@@0 T@U) (Sequences._default.Unzip$B@@0 T@U) ($ly@@243 T@U) (|z#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A@@0) TyType) (= (type Sequences._default.Unzip$B@@0) TyType)) (= (type $ly@@243) LayerTypeType)) (= (type |z#0@@0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $ly@@243 |z#0@@0|) (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $LZ |z#0@@0|))) :qid |unknown.0:0| :skolemid |2967| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 (AsFuelBottom $ly@@243) |z#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@1 T@U) (Sequences._default.Unzip$B@@1 T@U) ($ly@@244 T@U) (|z#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@1) TyType) (= (type Sequences._default.Unzip$B@@1) TyType)) (= (type $ly@@244) LayerTypeType)) (= (type |z#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 |z#0@@1|) ($Is |z#0@@1| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1))))) (and (and (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@244 |z#0@@1|)))) (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@244 |z#0@@1|))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@244 |z#0@@1|)))) (|Seq#Length| |z#0@@1|))) (forall ((|i#0@@60| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@60|) (< |i#0@@60| (|Seq#Length| |z#0@@1|))) (|_System.Tuple2#Equal| (|#_System._tuple#2._#Make2| (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@244 |z#0@@1|))) |i#0@@60|) (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@244 |z#0@@1|))) |i#0@@60|)) ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#0@@60|))))) :qid |Sequencesidfy.387:20| :skolemid |2968| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#0@@60|))) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@244 |z#0@@1|))) |i#0@@60|)) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@244 |z#0@@1|))) |i#0@@60|)) ))) ($Is (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@244 |z#0@@1|) (Tclass._System.Tuple2 (TSeq Sequences._default.Unzip$A@@1) (TSeq Sequences._default.Unzip$B@@1))))) :qid |unknown.0:0| :skolemid |2969| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@244 |z#0@@1|)) ))))
(assert (forall ((Sequences._default.Unzip$A@@2 T@U) (Sequences._default.Unzip$B@@2 T@U) ($ly@@245 T@U) (|z#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@2) TyType) (= (type Sequences._default.Unzip$B@@2) TyType)) (= (type $ly@@245) LayerTypeType)) (= (type |z#0@@2|) (SeqType BoxType))) ($Is |z#0@@2| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2)))) (= (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@245 |z#0@@2|) true)) :qid |unknown.0:0| :skolemid |2970| :pattern ( (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@245 |z#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@3 T@U) (Sequences._default.Unzip$B@@3 T@U) ($ly@@246 T@U) (|z#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@3) TyType) (= (type Sequences._default.Unzip$B@@3) TyType)) (= (type $ly@@246) LayerTypeType)) (= (type |z#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 |z#0@@3|) ($Is |z#0@@3| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3))))) (and (=> (not (= (|Seq#Length| |z#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@246) |z#0@@3|) (ite (= (|Seq#Length| |z#0@@3|) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#0@@58| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@246 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (let ((|a#0@@84| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@246 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#0@@84| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) ($Box (|Seq#Append| |b#0@@58| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._1 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))))))))) :qid |unknown.0:0| :skolemid |2971| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@246) |z#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@4 T@U) (Sequences._default.Unzip$B@@4 T@U) ($ly@@247 T@U) (|z#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@4) TyType) (= (type Sequences._default.Unzip$B@@4) TyType)) (= (type $ly@@247) LayerTypeType)) (= (type |z#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit |z#0@@4|)) ($Is |z#0@@4| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4))))) (and (=> (not (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@247) (Lit |z#0@@4|)) (ite (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#1| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@247) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (let ((|a#1| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@247) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#1| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._0 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) ($Box (|Seq#Append| |b#1| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._1 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2972| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@247) (Lit |z#0@@4|))) ))))
(assert (forall ((arg0@@554 T@U) (arg1@@252 T@U) (arg2@@162 T@U) ) (! (= (type (Sequences.__default.FlattenShape arg0@@554 arg1@@252 arg2@@162)) (SeqType BoxType)) :qid |funType:Sequences.__default.FlattenShape| :pattern ( (Sequences.__default.FlattenShape arg0@@554 arg1@@252 arg2@@162)) )))
(assert (forall ((Sequences._default.FlattenShape$A T@U) ($ly@@248 T@U) (|seqs#0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A) TyType) (= (type $ly@@248) LayerTypeType)) (= (type |seqs#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@248) |seqs#0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A $ly@@248 |seqs#0|))) :qid |unknown.0:0| :skolemid |2973| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@248) |seqs#0|)) )))
(assert (forall ((Sequences._default.FlattenShape$A@@0 T@U) ($ly@@249 T@U) (|seqs#0@@0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A@@0) TyType) (= (type $ly@@249) LayerTypeType)) (= (type |seqs#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $ly@@249 |seqs#0@@0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $LZ |seqs#0@@0|))) :qid |unknown.0:0| :skolemid |2974| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 (AsFuelBottom $ly@@249) |seqs#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@1 T@U) ($ly@@250 T@U) (|seqs#0@@1| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@1) TyType) (= (type $ly@@250) LayerTypeType)) (= (type |seqs#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@1 |seqs#0@@1|) ($Is |seqs#0@@1| (TSeq (TSeq Sequences._default.FlattenShape$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@250 |seqs#0@@1|)) (|Seq#Length| |seqs#0@@1|)) (forall ((|i#0@@61| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@61|) (< |i#0@@61| (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@250 |seqs#0@@1|)))) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@250 |seqs#0@@1|) |i#0@@61|))) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#0@@61|)))))) :qid |Sequencesidfy.409:20| :skolemid |2975| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#0@@61|))) :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@250 |seqs#0@@1|) |i#0@@61|))) ))) ($Is (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@250 |seqs#0@@1|) (TSeq Tclass._System.nat)))) :qid |unknown.0:0| :skolemid |2976| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@250 |seqs#0@@1|)) ))))
(assert (forall ((Sequences._default.FlattenShape$A@@2 T@U) ($ly@@251 T@U) (|seqs#0@@2| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@2) TyType) (= (type $ly@@251) LayerTypeType)) (= (type |seqs#0@@2|) (SeqType BoxType))) ($Is |seqs#0@@2| (TSeq (TSeq Sequences._default.FlattenShape$A@@2)))) (= (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@251 |seqs#0@@2|) true)) :qid |unknown.0:0| :skolemid |2977| :pattern ( (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@251 |seqs#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@3 T@U) ($ly@@252 T@U) (|seqs#0@@3| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@3) TyType) (= (type $ly@@252) LayerTypeType)) (= (type |seqs#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 |seqs#0@@3|) ($Is |seqs#0@@3| (TSeq (TSeq Sequences._default.FlattenShape$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@252) |seqs#0@@3|) (ite (= (|Seq#Length| |seqs#0@@3|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 $ly@@252 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))))))))))) :qid |unknown.0:0| :skolemid |2978| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@252) |seqs#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@4 T@U) ($ly@@253 T@U) (|seqs#0@@4| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@4) TyType) (= (type $ly@@253) LayerTypeType)) (= (type |seqs#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit |seqs#0@@4|)) ($Is |seqs#0@@4| (TSeq (TSeq Sequences._default.FlattenShape$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@253) (Lit |seqs#0@@4|)) (ite (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@253) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2979| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@253) (Lit |seqs#0@@4|))) ))))
(assert (forall (($ly@@254 T@U) (|shape#0| T@U) ) (!  (=> (and (= (type $ly@@254) LayerTypeType) (= (type |shape#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength ($LS $ly@@254) |shape#0|) (Sequences.__default.FlattenLength $ly@@254 |shape#0|))) :qid |Sequencesidfy.420:22| :skolemid |2980| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@254) |shape#0|)) )))
(assert (forall (($ly@@255 T@U) (|shape#0@@0| T@U) ) (!  (=> (and (= (type $ly@@255) LayerTypeType) (= (type |shape#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength $ly@@255 |shape#0@@0|) (Sequences.__default.FlattenLength $LZ |shape#0@@0|))) :qid |Sequencesidfy.420:22| :skolemid |2981| :pattern ( (Sequences.__default.FlattenLength (AsFuelBottom $ly@@255) |shape#0@@0|)) )))
(assert  (=> true (forall (($ly@@256 T@U) (|shape#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@256) LayerTypeType) (= (type |shape#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@1|) ($Is |shape#0@@1| (TSeq Tclass._System.nat)))) (and (=> (= (|Seq#Length| |shape#0@@1|) (LitInt 0)) (= (Sequences.__default.FlattenLength $ly@@256 |shape#0@@1|) (LitInt 0))) (<= (LitInt 0) (Sequences.__default.FlattenLength $ly@@256 |shape#0@@1|)))) :qid |Sequencesidfy.420:22| :skolemid |2982| :pattern ( (Sequences.__default.FlattenLength $ly@@256 |shape#0@@1|)) ))))
(assert (forall (($ly@@257 T@U) (|shape#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@257) LayerTypeType) (= (type |shape#0@@2|) (SeqType BoxType))) ($Is |shape#0@@2| (TSeq Tclass._System.nat))) (= (|Sequences.__default.FlattenLength#requires| $ly@@257 |shape#0@@2|) true)) :qid |Sequencesidfy.420:22| :skolemid |2983| :pattern ( (|Sequences.__default.FlattenLength#requires| $ly@@257 |shape#0@@2|)) )))
(assert  (=> true (forall (($ly@@258 T@U) (|shape#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@258) LayerTypeType) (= (type |shape#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@3|) ($Is |shape#0@@3| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| |shape#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@3|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|))) (|Sequences.__default.Last#canCall| Tclass._System.nat |shape#0@@3|))) (= (Sequences.__default.FlattenLength ($LS $ly@@258) |shape#0@@3|) (ite (= (|Seq#Length| |shape#0@@3|) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength $ly@@258 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|)) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat |shape#0@@3|)))))))) :qid |Sequencesidfy.420:22| :skolemid |2984| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@258) |shape#0@@3|)) ))))
(assert  (=> true (forall (($ly@@259 T@U) (|shape#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@259) LayerTypeType) (= (type |shape#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| (Lit |shape#0@@4|)) ($Is |shape#0@@4| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@4|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|))))) (|Sequences.__default.Last#canCall| Tclass._System.nat (Lit |shape#0@@4|)))) (= (Sequences.__default.FlattenLength ($LS $ly@@259) (Lit |shape#0@@4|)) (ite (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength ($LS $ly@@259) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|)))) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat (Lit |shape#0@@4|))))))))) :qid |Sequencesidfy.420:22| :weight 3 :skolemid |2985| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@259) (Lit |shape#0@@4|))) ))))
(assert (forall ((arg0@@555 T@U) (arg1@@253 T@U) (arg2@@163 T@U) ) (! (= (type (Sequences.__default.Flatten arg0@@555 arg1@@253 arg2@@163)) (SeqType BoxType)) :qid |funType:Sequences.__default.Flatten| :pattern ( (Sequences.__default.Flatten arg0@@555 arg1@@253 arg2@@163)) )))
(assert (forall ((Sequences._default.Flatten$A T@U) ($ly@@260 T@U) (|seqs#0@@5| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A) TyType) (= (type $ly@@260) LayerTypeType)) (= (type |seqs#0@@5|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@260) |seqs#0@@5|) (Sequences.__default.Flatten Sequences._default.Flatten$A $ly@@260 |seqs#0@@5|))) :qid |unknown.0:0| :skolemid |2986| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@260) |seqs#0@@5|)) )))
(assert (forall ((Sequences._default.Flatten$A@@0 T@U) ($ly@@261 T@U) (|seqs#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A@@0) TyType) (= (type $ly@@261) LayerTypeType)) (= (type |seqs#0@@6|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $ly@@261 |seqs#0@@6|) (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $LZ |seqs#0@@6|))) :qid |unknown.0:0| :skolemid |2987| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 (AsFuelBottom $ly@@261) |seqs#0@@6|)) )))
(assert  (and (= (type StartFuel_Sequences._default.FlattenLength) LayerTypeType) (= (type StartFuel_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@1 T@U) ($ly@@262 T@U) (|seqs#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@1) TyType) (= (type $ly@@262) LayerTypeType)) (= (type |seqs#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@1 |seqs#0@@7|) ($Is |seqs#0@@7| (TSeq (TSeq Sequences._default.Flatten$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@262 |seqs#0@@7|)) (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.FlattenShape Sequences._default.Flatten$A@@1 StartFuel_Sequences._default.FlattenShape |seqs#0@@7|))) (=> (= (|Seq#Length| |seqs#0@@7|) (LitInt 0)) (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@262 |seqs#0@@7|)) (LitInt 0)))) ($Is (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@262 |seqs#0@@7|) (TSeq Sequences._default.Flatten$A@@1)))) :qid |unknown.0:0| :skolemid |2988| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@262 |seqs#0@@7|)) ))))
(assert (forall ((Sequences._default.Flatten$A@@2 T@U) ($ly@@263 T@U) (|seqs#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@2) TyType) (= (type $ly@@263) LayerTypeType)) (= (type |seqs#0@@8|) (SeqType BoxType))) ($Is |seqs#0@@8| (TSeq (TSeq Sequences._default.Flatten$A@@2)))) (= (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@263 |seqs#0@@8|) true)) :qid |unknown.0:0| :skolemid |2989| :pattern ( (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@263 |seqs#0@@8|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenShape0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@3 T@U) ($ly@@264 T@U) (|seqs#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@3) TyType) (= (type $ly@@264) LayerTypeType)) (= (type |seqs#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 |seqs#0@@9|) ($Is |seqs#0@@9| (TSeq (TSeq Sequences._default.Flatten$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@9|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape0)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape0)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape0) MoreFuel_Sequences._default.FlattenShape0)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@264) |seqs#0@@9|) (ite (= (|Seq#Length| |seqs#0@@9|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 $ly@@264 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|)))))))) :qid |unknown.0:0| :skolemid |2990| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@264) |seqs#0@@9|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenShape1) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@4 T@U) ($ly@@265 T@U) (|seqs#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@4) TyType) (= (type $ly@@265) LayerTypeType)) (= (type |seqs#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit |seqs#0@@10|)) ($Is |seqs#0@@10| (TSeq (TSeq Sequences._default.Flatten$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape1)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape1)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape1) MoreFuel_Sequences._default.FlattenShape1)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@265) (Lit |seqs#0@@10|)) (ite (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@265) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2991| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@265) (Lit |seqs#0@@10|))) ))))
(assert  (=> true (forall ((|shape#0@@5| T@U) (|i#0@@62| Int) (|j#0@@11| Int) ) (!  (=> (and (= (type |shape#0@@5|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@5| |i#0@@62| |j#0@@11|) (and (and (and ($Is |shape#0@@5| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@62|)) (<= (LitInt 0) |j#0@@11|)) (and (< |i#0@@62| (|Seq#Length| |shape#0@@5|)) (< |j#0@@11| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@5| |i#0@@62|)))))))) (<= (LitInt 0) (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@62| |j#0@@11|))) :qid |Sequencesidfy.489:25| :skolemid |2992| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@62| |j#0@@11|)) ))))
(assert (forall ((|shape#0@@6| T@U) (|i#0@@63| Int) (|j#0@@12| Int) ) (!  (=> (= (type |shape#0@@6|) (SeqType BoxType)) (=> (and (and ($Is |shape#0@@6| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@63|)) (<= (LitInt 0) |j#0@@12|)) (= (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@63| |j#0@@12|)  (and (< |i#0@@63| (|Seq#Length| |shape#0@@6|)) (< |j#0@@12| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@6| |i#0@@63|)))))))) :qid |Sequencesidfy.489:25| :skolemid |2993| :pattern ( (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@63| |j#0@@12|)) )))
(assert  (=> true (forall ((|shape#0@@7| T@U) (|i#0@@64| Int) (|j#0@@13| Int) ) (!  (=> (and (= (type |shape#0@@7|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@7| |i#0@@64| |j#0@@13|) (and (and (and ($Is |shape#0@@7| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@64|)) (<= (LitInt 0) |j#0@@13|)) (and (< |i#0@@64| (|Seq#Length| |shape#0@@7|)) (< |j#0@@13| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@7| |i#0@@64|)))))))) (and (|Sequences.__default.FlattenLength#canCall| (|Seq#Take| |shape#0@@7| |i#0@@64|)) (= (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@64| |j#0@@13|) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (|Seq#Take| |shape#0@@7| |i#0@@64|)) |j#0@@13|)))) :qid |Sequencesidfy.489:25| :skolemid |2994| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@64| |j#0@@13|)) ))))
(assert  (=> true (forall ((|shape#0@@8| T@U) (|i#0@@65| Int) (|j#0@@14| Int) ) (!  (=> (and (= (type |shape#0@@8|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| (Lit |shape#0@@8|) (LitInt |i#0@@65|) (LitInt |j#0@@14|)) (and (and (and ($Is |shape#0@@8| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@65|)) (<= (LitInt 0) |j#0@@14|)) (and (< |i#0@@65| (|Seq#Length| (Lit |shape#0@@8|))) (< |j#0@@14| (U_2_int ($Unbox intType (|Seq#Index| (Lit |shape#0@@8|) (LitInt |i#0@@65|))))))))) (and (|Sequences.__default.FlattenLength#canCall| (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@65|)))) (= (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@65|) (LitInt |j#0@@14|)) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@65|)))) |j#0@@14|)))) :qid |Sequencesidfy.489:25| :weight 3 :skolemid |2995| :pattern ( (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@65|) (LitInt |j#0@@14|))) ))))
(assert (forall ((arg0@@556 T@U) (arg1@@254 T@U) (arg2@@164 Int) ) (! (= (type (Sequences.__default.UnflattenIndex arg0@@556 arg1@@254 arg2@@164)) DatatypeTypeType) :qid |funType:Sequences.__default.UnflattenIndex| :pattern ( (Sequences.__default.UnflattenIndex arg0@@556 arg1@@254 arg2@@164)) )))
(assert (forall (($ly@@266 T@U) (|shape#0@@9| T@U) (|i#0@@66| Int) ) (!  (=> (and (= (type $ly@@266) LayerTypeType) (= (type |shape#0@@9|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex ($LS $ly@@266) |shape#0@@9| |i#0@@66|) (Sequences.__default.UnflattenIndex $ly@@266 |shape#0@@9| |i#0@@66|))) :qid |Sequencesidfy.496:12| :skolemid |2996| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@266) |shape#0@@9| |i#0@@66|)) )))
(assert (forall (($ly@@267 T@U) (|shape#0@@10| T@U) (|i#0@@67| Int) ) (!  (=> (and (= (type $ly@@267) LayerTypeType) (= (type |shape#0@@10|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex $ly@@267 |shape#0@@10| |i#0@@67|) (Sequences.__default.UnflattenIndex $LZ |shape#0@@10| |i#0@@67|))) :qid |Sequencesidfy.496:12| :skolemid |2997| :pattern ( (Sequences.__default.UnflattenIndex (AsFuelBottom $ly@@267) |shape#0@@10| |i#0@@67|)) )))
(assert  (=> true (forall (($ly@@268 T@U) (|shape#0@@11| T@U) (|i#0@@68| Int) ) (!  (=> (and (and (= (type $ly@@268) LayerTypeType) (= (type |shape#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@11| |i#0@@68|) (and (and ($Is |shape#0@@11| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@68|)) (< |i#0@@68| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@11|))))) ($Is (Sequences.__default.UnflattenIndex $ly@@268 |shape#0@@11| |i#0@@68|) (Tclass._System.Tuple2 Tclass._System.nat Tclass._System.nat))) :qid |Sequencesidfy.496:12| :skolemid |2998| :pattern ( (Sequences.__default.UnflattenIndex $ly@@268 |shape#0@@11| |i#0@@68|)) ))))
(assert (forall (($ly@@269 T@U) (|shape#0@@12| T@U) (|i#0@@69| Int) ) (!  (=> (and (and (= (type $ly@@269) LayerTypeType) (= (type |shape#0@@12|) (SeqType BoxType))) (and ($Is |shape#0@@12| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@69|))) (= (|Sequences.__default.UnflattenIndex#requires| $ly@@269 |shape#0@@12| |i#0@@69|) (< |i#0@@69| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@12|)))) :qid |Sequencesidfy.496:12| :skolemid |2999| :pattern ( (|Sequences.__default.UnflattenIndex#requires| $ly@@269 |shape#0@@12| |i#0@@69|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenLength0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenLength) LayerTypeType)))
(assert  (=> true (forall (($ly@@270 T@U) (|shape#0@@13| T@U) (|i#0@@70| Int) ) (!  (=> (and (and (= (type $ly@@270) LayerTypeType) (= (type |shape#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@13| |i#0@@70|) (and (and ($Is |shape#0@@13| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@70|)) (< |i#0@@70| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@13|))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (=> (< |i#0@@70| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.UnflattenIndex#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@70|)))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|)) |i#0@@70|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength0)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength0)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength0) MoreFuel_Sequences._default.FlattenLength0)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@270) |shape#0@@13| |i#0@@70|) (ite (< |i#0@@70| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (Sequences.__default.UnflattenIndex $ly@@270 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@70|) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| |shape#0@@13|) 1))) ($Box (int_2_U (- |i#0@@70| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))))))))) :qid |Sequencesidfy.496:12| :skolemid |3000| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@270) |shape#0@@13| |i#0@@70|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenLength1) LayerTypeType))
(assert  (=> true (forall (($ly@@271 T@U) (|shape#0@@14| T@U) (|i#0@@71| Int) ) (!  (=> (and (and (= (type $ly@@271) LayerTypeType) (= (type |shape#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| (Lit |shape#0@@14|) (LitInt |i#0@@71|)) (and (and ($Is |shape#0@@14| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@71|)) (< |i#0@@71| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit |shape#0@@14|)))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (=> (< |i#0@@71| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.UnflattenIndex#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@71|))))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|)))) |i#0@@71|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength1)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength1)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength1) MoreFuel_Sequences._default.FlattenLength1)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@271) (Lit |shape#0@@14|) (LitInt |i#0@@71|)) (ite (< |i#0@@71| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (Sequences.__default.UnflattenIndex ($LS $ly@@271) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@71|)) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| (Lit |shape#0@@14|)) 1))) ($Box (int_2_U (- |i#0@@71| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))))))))) :qid |Sequencesidfy.496:12| :weight 3 :skolemid |3001| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@271) (Lit |shape#0@@14|) (LitInt |i#0@@71|))) ))))
(assert (forall (($ly@@272 T@U) (|s#0@@134| T@U) ) (!  (=> (and (= (type $ly@@272) LayerTypeType) (= (type |s#0@@134|) (SeqType BoxType))) (= (Sequences.__default.seqMax ($LS $ly@@272) |s#0@@134|) (Sequences.__default.seqMax $ly@@272 |s#0@@134|))) :qid |Sequencesidfy.606:22| :skolemid |3002| :pattern ( (Sequences.__default.seqMax ($LS $ly@@272) |s#0@@134|)) )))
(assert (forall (($ly@@273 T@U) (|s#0@@135| T@U) ) (!  (=> (and (= (type $ly@@273) LayerTypeType) (= (type |s#0@@135|) (SeqType BoxType))) (= (Sequences.__default.seqMax $ly@@273 |s#0@@135|) (Sequences.__default.seqMax $LZ |s#0@@135|))) :qid |Sequencesidfy.606:22| :skolemid |3003| :pattern ( (Sequences.__default.seqMax (AsFuelBottom $ly@@273) |s#0@@135|)) )))
(assert  (=> true (forall (($ly@@274 T@U) (|s#0@@136| T@U) ) (!  (=> (and (and (= (type $ly@@274) LayerTypeType) (= (type |s#0@@136|) (SeqType BoxType))) (or (|Sequences.__default.seqMax#canCall| |s#0@@136|) (and ($Is |s#0@@136| (TSeq TInt)) (< 0 (|Seq#Length| |s#0@@136|))))) (and (forall ((|k#0@@58| T@U) ) (!  (=> (and (and (= (type |k#0@@58|) intType) true) (|Seq#Contains| |s#0@@136| ($Box |k#0@@58|))) (>= (Sequences.__default.seqMax $ly@@274 |s#0@@136|) (U_2_int |k#0@@58|))) :qid |Sequencesidfy.608:20| :skolemid |3004| :pattern ( (|Seq#Contains| |s#0@@136| ($Box |k#0@@58|))) )) (|Seq#Contains| |s#0@@136| ($Box (int_2_U (Sequences.__default.seqMax $ly@@274 |s#0@@136|)))))) :qid |Sequencesidfy.606:22| :skolemid |3005| :pattern ( (Sequences.__default.seqMax $ly@@274 |s#0@@136|)) ))))
(assert (forall (($ly@@275 T@U) (|s#0@@137| T@U) ) (!  (=> (and (and (= (type $ly@@275) LayerTypeType) (= (type |s#0@@137|) (SeqType BoxType))) ($Is |s#0@@137| (TSeq TInt))) (= (|Sequences.__default.seqMax#requires| $ly@@275 |s#0@@137|) (< 0 (|Seq#Length| |s#0@@137|)))) :qid |Sequencesidfy.606:22| :skolemid |3006| :pattern ( (|Sequences.__default.seqMax#requires| $ly@@275 |s#0@@137|)) )))
(assert  (=> true (forall (($ly@@276 T@U) (|s#0@@138| T@U) ) (!  (=> (and (and (= (type $ly@@276) LayerTypeType) (= (type |s#0@@138|) (SeqType BoxType))) (or (|Sequences.__default.seqMax#canCall| |s#0@@138|) (and ($Is |s#0@@138| (TSeq TInt)) (< 0 (|Seq#Length| |s#0@@138|))))) (and (=> (not (= (|Seq#Length| |s#0@@138|) (LitInt 1))) (and (and (and (|Sequences.__default.DropLast#canCall| TInt |s#0@@138|) (|Sequences.__default.seqMax#canCall| (Sequences.__default.DropLast TInt |s#0@@138|))) (|Sequences.__default.Last#canCall| TInt |s#0@@138|)) (|Mathematics.__default.max#canCall| (Sequences.__default.seqMax $ly@@276 (Sequences.__default.DropLast TInt |s#0@@138|)) (U_2_int ($Unbox intType (Sequences.__default.Last TInt |s#0@@138|)))))) (= (Sequences.__default.seqMax ($LS $ly@@276) |s#0@@138|) (ite (= (|Seq#Length| |s#0@@138|) (LitInt 1)) (U_2_int ($Unbox intType (|Seq#Index| |s#0@@138| (LitInt 0)))) (Mathematics.__default.max (Sequences.__default.seqMax $ly@@276 (Sequences.__default.DropLast TInt |s#0@@138|)) (U_2_int ($Unbox intType (Sequences.__default.Last TInt |s#0@@138|)))))))) :qid |Sequencesidfy.606:22| :skolemid |3007| :pattern ( (Sequences.__default.seqMax ($LS $ly@@276) |s#0@@138|)) ))))
(assert  (=> true (forall (($ly@@277 T@U) (|s#0@@139| T@U) ) (!  (=> (and (and (= (type $ly@@277) LayerTypeType) (= (type |s#0@@139|) (SeqType BoxType))) (or (|Sequences.__default.seqMax#canCall| (Lit |s#0@@139|)) (and ($Is |s#0@@139| (TSeq TInt)) (< 0 (|Seq#Length| (Lit |s#0@@139|)))))) (and (=> (not (= (|Seq#Length| (Lit |s#0@@139|)) (LitInt 1))) (and (and (and (|Sequences.__default.DropLast#canCall| TInt (Lit |s#0@@139|)) (|Sequences.__default.seqMax#canCall| (Lit (Sequences.__default.DropLast TInt (Lit |s#0@@139|))))) (|Sequences.__default.Last#canCall| TInt (Lit |s#0@@139|))) (|Mathematics.__default.max#canCall| (Sequences.__default.seqMax ($LS $ly@@277) (Lit (Sequences.__default.DropLast TInt (Lit |s#0@@139|)))) (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last TInt (Lit |s#0@@139|)))))))) (= (Sequences.__default.seqMax ($LS $ly@@277) (Lit |s#0@@139|)) (ite (= (|Seq#Length| (Lit |s#0@@139|)) (LitInt 1)) (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@139|) (LitInt 0)))) (Mathematics.__default.max (Sequences.__default.seqMax ($LS $ly@@277) (Lit (Sequences.__default.DropLast TInt (Lit |s#0@@139|)))) (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last TInt (Lit |s#0@@139|)))))))))) :qid |Sequencesidfy.606:22| :weight 3 :skolemid |3008| :pattern ( (Sequences.__default.seqMax ($LS $ly@@277) (Lit |s#0@@139|))) ))))
(assert (forall ((arg0@@557 T@U) (arg1@@255 T@U) (arg2@@165 Int) (arg3@@118 T@U) ) (! (= (type (Sequences.__default.fill arg0@@557 arg1@@255 arg2@@165 arg3@@118)) (SeqType BoxType)) :qid |funType:Sequences.__default.fill| :pattern ( (Sequences.__default.fill arg0@@557 arg1@@255 arg2@@165 arg3@@118)) )))
(assert (forall ((Sequences._default.fill$T T@U) ($ly@@278 T@U) (|n#0@@5| Int) (|t#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T) TyType) (= (type $ly@@278) LayerTypeType)) (= (type |t#0@@6|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@278) |n#0@@5| |t#0@@6|) (Sequences.__default.fill Sequences._default.fill$T $ly@@278 |n#0@@5| |t#0@@6|))) :qid |unknown.0:0| :skolemid |3009| :pattern ( (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@278) |n#0@@5| |t#0@@6|)) )))
(assert (forall ((Sequences._default.fill$T@@0 T@U) ($ly@@279 T@U) (|n#0@@6| Int) (|t#0@@7| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T@@0) TyType) (= (type $ly@@279) LayerTypeType)) (= (type |t#0@@7|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T@@0 $ly@@279 |n#0@@6| |t#0@@7|) (Sequences.__default.fill Sequences._default.fill$T@@0 $LZ |n#0@@6| |t#0@@7|))) :qid |unknown.0:0| :skolemid |3010| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@0 (AsFuelBottom $ly@@279) |n#0@@6| |t#0@@7|)) )))
(assert  (=> true (forall ((Sequences._default.fill$T@@1 T@U) ($ly@@280 T@U) (|n#0@@7| Int) (|t#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@1) TyType) (= (type $ly@@280) LayerTypeType)) (= (type |t#0@@8|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@1 |n#0@@7| |t#0@@8|) (and ($IsBox |t#0@@8| Sequences._default.fill$T@@1) (>= |n#0@@7| (LitInt 0))))) (and (and (= (|Seq#Length| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@280 |n#0@@7| |t#0@@8|)) |n#0@@7|) (forall ((|i#0@@72| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@72|) (< |i#0@@72| |n#0@@7|)) (= (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@280 |n#0@@7| |t#0@@8|) |i#0@@72|) |t#0@@8|)) :qid |Sequencesidfy.695:18| :skolemid |3011| :pattern ( (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@280 |n#0@@7| |t#0@@8|) |i#0@@72|)) ))) ($Is (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@280 |n#0@@7| |t#0@@8|) (TSeq Sequences._default.fill$T@@1)))) :qid |unknown.0:0| :skolemid |3012| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@280 |n#0@@7| |t#0@@8|)) ))))
(assert (forall ((Sequences._default.fill$T@@2 T@U) ($ly@@281 T@U) (|n#0@@8| Int) (|t#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@2) TyType) (= (type $ly@@281) LayerTypeType)) (= (type |t#0@@9|) BoxType)) ($IsBox |t#0@@9| Sequences._default.fill$T@@2)) (= (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@281 |n#0@@8| |t#0@@9|) (>= |n#0@@8| (LitInt 0)))) :qid |unknown.0:0| :skolemid |3013| :pattern ( (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@281 |n#0@@8| |t#0@@9|)) )))
(assert  (=> true (forall ((Sequences._default.fill$T@@3 T@U) ($ly@@282 T@U) (|n#0@@9| Int) (|t#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@3) TyType) (= (type $ly@@282) LayerTypeType)) (= (type |t#0@@10|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 |n#0@@9| |t#0@@10|) (and ($IsBox |t#0@@10| Sequences._default.fill$T@@3) (>= |n#0@@9| (LitInt 0))))) (and (=> (not (= |n#0@@9| (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 (- |n#0@@9| 1) |t#0@@10|)) (= (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@282) |n#0@@9| |t#0@@10|) (ite (= |n#0@@9| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@3 $ly@@282 (- |n#0@@9| 1) |t#0@@10|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@10|)))))) :qid |unknown.0:0| :skolemid |3014| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@282) |n#0@@9| |t#0@@10|)) ))))
(assert  (=> true (forall ((Sequences._default.fill$T@@4 T@U) ($ly@@283 T@U) (|n#0@@10| Int) (|t#0@@11| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@4) TyType) (= (type $ly@@283) LayerTypeType)) (= (type |t#0@@11|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt |n#0@@10|) |t#0@@11|) (and ($IsBox |t#0@@11| Sequences._default.fill$T@@4) (>= (LitInt |n#0@@10|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@10|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt (- |n#0@@10| 1)) |t#0@@11|)) (= (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@283) (LitInt |n#0@@10|) |t#0@@11|) (ite (= (LitInt |n#0@@10|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@283) (LitInt (- |n#0@@10| 1)) |t#0@@11|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@11|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3015| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@283) (LitInt |n#0@@10|) |t#0@@11|)) ))))
(assert  (=> true (forall ((Sequences._default.fill$T@@5 T@U) ($ly@@284 T@U) (|n#0@@11| Int) (|t#0@@12| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@5) TyType) (= (type $ly@@284) LayerTypeType)) (= (type |t#0@@12|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt |n#0@@11|) (Lit |t#0@@12|)) (and ($IsBox |t#0@@12| Sequences._default.fill$T@@5) (>= (LitInt |n#0@@11|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@11|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt (- |n#0@@11| 1)) (Lit |t#0@@12|))) (= (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@284) (LitInt |n#0@@11|) (Lit |t#0@@12|)) (ite (= (LitInt |n#0@@11|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@284) (LitInt (- |n#0@@11| 1)) (Lit |t#0@@12|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@12|))))))) :qid |unknown.0:0| :weight 3 :skolemid |3016| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@284) (LitInt |n#0@@11|) (Lit |t#0@@12|))) ))))
(assert (= (type Tclass.ReferenceType.__default) TyType))
(assert (= (Tag Tclass.ReferenceType.__default) Tagclass.ReferenceType.__default))
(assert (= (TagFamily Tclass.ReferenceType.__default) tytagFamily$_default))
(assert (forall (($o@@42 T@U) ) (!  (=> (= (type $o@@42) refType) (= ($Is $o@@42 Tclass.ReferenceType.__default)  (or (= $o@@42 null) (= (dtype $o@@42) Tclass.ReferenceType.__default)))) :qid |unknown.0:0| :skolemid |3017| :pattern ( ($Is $o@@42 Tclass.ReferenceType.__default)) )))
(assert (forall (($o@@43 T@U) ($h@@153 T@U) ) (!  (=> (and (= (type $o@@43) refType) (= (type $h@@153) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@43 Tclass.ReferenceType.__default $h@@153)  (or (= $o@@43 null) (U_2_bool (MapType1Select (MapType0Select $h@@153 $o@@43) alloc))))) :qid |unknown.0:0| :skolemid |3018| :pattern ( ($IsAlloc $o@@43 Tclass.ReferenceType.__default $h@@153)) )))
(assert (= (type ReferenceType.__default.Root) BoxType))
(assert  (=> true (=> true ($IsBox ReferenceType.__default.Root Tclass.ReferenceType.Reference))))
(assert (= |ReferenceType.__default.Root#requires| true))
(assert (forall ((arg0@@558 Int) ) (! (= (type (ReferenceType.__default.toRef arg0@@558)) BoxType) :qid |funType:ReferenceType.__default.toRef| :pattern ( (ReferenceType.__default.toRef arg0@@558)) )))
(assert  (=> true (forall ((|i#0@@73| Int) ) (!  (=> (or (|ReferenceType.__default.toRef#canCall| |i#0@@73|) (and (<= (LitInt 0) |i#0@@73|) (< |i#0@@73| 18446744073709551616))) ($IsBox (ReferenceType.__default.toRef |i#0@@73|) Tclass.ReferenceType.Reference)) :qid |Graphidfy.21:25| :skolemid |3019| :pattern ( (ReferenceType.__default.toRef |i#0@@73|)) ))))
(assert (forall ((|i#0@@74| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@74|) (< |i#0@@74| 18446744073709551616)) (= (|ReferenceType.__default.toRef#requires| |i#0@@74|) true)) :qid |Graphidfy.21:25| :skolemid |3020| :pattern ( (|ReferenceType.__default.toRef#requires| |i#0@@74|)) )))
(assert  (=> true (forall ((|i#0@@75| T@U) ) (!  (=> (and (= (type |i#0@@75|) BoxType) (or (|ReferenceType.__default.toUint64#canCall| |i#0@@75|) ($IsBox |i#0@@75| Tclass.ReferenceType.Reference))) (and (<= (LitInt 0) (ReferenceType.__default.toUint64 |i#0@@75|)) (< (ReferenceType.__default.toUint64 |i#0@@75|) 18446744073709551616))) :qid |Graphidfy.22:28| :skolemid |3021| :pattern ( (ReferenceType.__default.toUint64 |i#0@@75|)) ))))
(assert (forall ((|i#0@@76| T@U) ) (!  (=> (and (= (type |i#0@@76|) BoxType) ($IsBox |i#0@@76| Tclass.ReferenceType.Reference)) (= (|ReferenceType.__default.toUint64#requires| |i#0@@76|) true)) :qid |Graphidfy.22:28| :skolemid |3022| :pattern ( (|ReferenceType.__default.toUint64#requires| |i#0@@76|)) )))
(assert (= (type Tclass.LinearMaybe.__default) TyType))
(assert (= (Tag Tclass.LinearMaybe.__default) Tagclass.LinearMaybe.__default))
(assert (= (TagFamily Tclass.LinearMaybe.__default) tytagFamily$_default))
(assert (forall ((bx@@181 T@U) ) (!  (=> (and (= (type bx@@181) BoxType) ($IsBox bx@@181 Tclass.LinearMaybe.__default)) (and (= ($Box ($Unbox refType bx@@181)) bx@@181) ($Is ($Unbox refType bx@@181) Tclass.LinearMaybe.__default))) :qid |unknown.0:0| :skolemid |3023| :pattern ( ($IsBox bx@@181 Tclass.LinearMaybe.__default)) )))
(assert (forall (($o@@44 T@U) ) (!  (=> (= (type $o@@44) refType) (= ($Is $o@@44 Tclass.LinearMaybe.__default)  (or (= $o@@44 null) (= (dtype $o@@44) Tclass.LinearMaybe.__default)))) :qid |unknown.0:0| :skolemid |3024| :pattern ( ($Is $o@@44 Tclass.LinearMaybe.__default)) )))
(assert (forall (($o@@45 T@U) ($h@@154 T@U) ) (!  (=> (and (= (type $o@@45) refType) (= (type $h@@154) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@45 Tclass.LinearMaybe.__default $h@@154)  (or (= $o@@45 null) (U_2_bool (MapType1Select (MapType0Select $h@@154 $o@@45) alloc))))) :qid |unknown.0:0| :skolemid |3025| :pattern ( ($IsAlloc $o@@45 Tclass.LinearMaybe.__default $h@@154)) )))
(assert (forall ((arg0@@559 T@U) ) (! (= (type (|#$maybe| arg0@@559)) TyType) :qid |funType:#$maybe| :pattern ( (|#$maybe| arg0@@559)) )))
(assert  (=> true (forall ((LinearMaybe._default.has$A T@U) (|m#0@@86| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.has$A) TyType) (= (type |m#0@@86|) BoxType)) (or (|LinearMaybe.__default.has#canCall| LinearMaybe._default.has$A |m#0@@86|) ($IsBox |m#0@@86| (|#$maybe| LinearMaybe._default.has$A)))) true) :qid |unknown.0:0| :skolemid |3026| :pattern ( (LinearMaybe.__default.has LinearMaybe._default.has$A |m#0@@86|)) ))))
(assert (forall ((LinearMaybe._default.has$A@@0 T@U) (|m#0@@87| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.has$A@@0) TyType) (= (type |m#0@@87|) BoxType)) ($IsBox |m#0@@87| (|#$maybe| LinearMaybe._default.has$A@@0))) (= (|LinearMaybe.__default.has#requires| LinearMaybe._default.has$A@@0 |m#0@@87|) true)) :qid |unknown.0:0| :skolemid |3027| :pattern ( (|LinearMaybe.__default.has#requires| LinearMaybe._default.has$A@@0 |m#0@@87|)) )))
(assert (forall ((arg0@@560 T@U) (arg1@@256 T@U) ) (! (= (type (LinearMaybe.__default.read arg0@@560 arg1@@256)) BoxType) :qid |funType:LinearMaybe.__default.read| :pattern ( (LinearMaybe.__default.read arg0@@560 arg1@@256)) )))
(assert  (=> true (forall ((LinearMaybe._default.read$A T@U) (|m#0@@88| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.read$A) TyType) (= (type |m#0@@88|) BoxType)) (or (|LinearMaybe.__default.read#canCall| LinearMaybe._default.read$A |m#0@@88|) ($IsBox |m#0@@88| (|#$maybe| LinearMaybe._default.read$A)))) ($IsBox (LinearMaybe.__default.read LinearMaybe._default.read$A |m#0@@88|) LinearMaybe._default.read$A)) :qid |unknown.0:0| :skolemid |3028| :pattern ( (LinearMaybe.__default.read LinearMaybe._default.read$A |m#0@@88|)) ))))
(assert (forall ((LinearMaybe._default.read$A@@0 T@U) (|m#0@@89| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.read$A@@0) TyType) (= (type |m#0@@89|) BoxType)) ($IsBox |m#0@@89| (|#$maybe| LinearMaybe._default.read$A@@0))) (= (|LinearMaybe.__default.read#requires| LinearMaybe._default.read$A@@0 |m#0@@89|) true)) :qid |unknown.0:0| :skolemid |3029| :pattern ( (|LinearMaybe.__default.read#requires| LinearMaybe._default.read$A@@0 |m#0@@89|)) )))
(assert (forall ((arg0@@561 T@U) (arg1@@257 T@U) ) (! (= (type (LinearMaybe.__default.peek arg0@@561 arg1@@257)) BoxType) :qid |funType:LinearMaybe.__default.peek| :pattern ( (LinearMaybe.__default.peek arg0@@561 arg1@@257)) )))
(assert  (=> true (forall ((LinearMaybe._default.peek$A T@U) (|m#0@@90| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.peek$A) TyType) (= (type |m#0@@90|) BoxType)) (or (|LinearMaybe.__default.peek#canCall| LinearMaybe._default.peek$A |m#0@@90|) (and ($IsBox |m#0@@90| (|#$maybe| LinearMaybe._default.peek$A)) (LinearMaybe.__default.has LinearMaybe._default.peek$A |m#0@@90|)))) (and (= (LinearMaybe.__default.peek LinearMaybe._default.peek$A |m#0@@90|) (LinearMaybe.__default.read LinearMaybe._default.peek$A |m#0@@90|)) ($IsBox (LinearMaybe.__default.peek LinearMaybe._default.peek$A |m#0@@90|) LinearMaybe._default.peek$A))) :qid |unknown.0:0| :skolemid |3030| :pattern ( (LinearMaybe.__default.peek LinearMaybe._default.peek$A |m#0@@90|)) ))))
(assert (forall ((LinearMaybe._default.peek$A@@0 T@U) (|m#0@@91| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.peek$A@@0) TyType) (= (type |m#0@@91|) BoxType)) ($IsBox |m#0@@91| (|#$maybe| LinearMaybe._default.peek$A@@0))) (= (|LinearMaybe.__default.peek#requires| LinearMaybe._default.peek$A@@0 |m#0@@91|) (LinearMaybe.__default.has LinearMaybe._default.peek$A@@0 |m#0@@91|))) :qid |unknown.0:0| :skolemid |3031| :pattern ( (|LinearMaybe.__default.peek#requires| LinearMaybe._default.peek$A@@0 |m#0@@91|)) )))
(assert (forall ((arg0@@562 T@U) (arg1@@258 T@U) ) (! (= (type (LinearMaybe.__default.unwrap arg0@@562 arg1@@258)) BoxType) :qid |funType:LinearMaybe.__default.unwrap| :pattern ( (LinearMaybe.__default.unwrap arg0@@562 arg1@@258)) )))
(assert  (=> true (forall ((LinearMaybe._default.unwrap$A T@U) (|m#0@@92| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.unwrap$A) TyType) (= (type |m#0@@92|) BoxType)) (or (|LinearMaybe.__default.unwrap#canCall| LinearMaybe._default.unwrap$A |m#0@@92|) (and ($IsBox |m#0@@92| (|#$maybe| LinearMaybe._default.unwrap$A)) (LinearMaybe.__default.has LinearMaybe._default.unwrap$A |m#0@@92|)))) (and (= (LinearMaybe.__default.unwrap LinearMaybe._default.unwrap$A |m#0@@92|) (LinearMaybe.__default.read LinearMaybe._default.unwrap$A |m#0@@92|)) ($IsBox (LinearMaybe.__default.unwrap LinearMaybe._default.unwrap$A |m#0@@92|) LinearMaybe._default.unwrap$A))) :qid |unknown.0:0| :skolemid |3032| :pattern ( (LinearMaybe.__default.unwrap LinearMaybe._default.unwrap$A |m#0@@92|)) ))))
(assert (forall ((LinearMaybe._default.unwrap$A@@0 T@U) (|m#0@@93| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.unwrap$A@@0) TyType) (= (type |m#0@@93|) BoxType)) ($IsBox |m#0@@93| (|#$maybe| LinearMaybe._default.unwrap$A@@0))) (= (|LinearMaybe.__default.unwrap#requires| LinearMaybe._default.unwrap$A@@0 |m#0@@93|) (LinearMaybe.__default.has LinearMaybe._default.unwrap$A@@0 |m#0@@93|))) :qid |unknown.0:0| :skolemid |3033| :pattern ( (|LinearMaybe.__default.unwrap#requires| LinearMaybe._default.unwrap$A@@0 |m#0@@93|)) )))
(assert (forall ((arg0@@563 T@U) (arg1@@259 T@U) (arg2@@166 T@U) ) (! (= (type (LinearMaybe.__default.give arg0@@563 arg1@@259 arg2@@166)) BoxType) :qid |funType:LinearMaybe.__default.give| :pattern ( (LinearMaybe.__default.give arg0@@563 arg1@@259 arg2@@166)) )))
(assert (forall ((LinearMaybe._default.give$A T@U) ($ly@@285 T@U) (|a#0@@85| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.give$A) TyType) (= (type $ly@@285) LayerTypeType)) (= (type |a#0@@85|) BoxType)) (= (LinearMaybe.__default.give LinearMaybe._default.give$A ($LS $ly@@285) |a#0@@85|) (LinearMaybe.__default.give LinearMaybe._default.give$A $ly@@285 |a#0@@85|))) :qid |unknown.0:0| :skolemid |3034| :pattern ( (LinearMaybe.__default.give LinearMaybe._default.give$A ($LS $ly@@285) |a#0@@85|)) )))
(assert (forall ((LinearMaybe._default.give$A@@0 T@U) ($ly@@286 T@U) (|a#0@@86| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.give$A@@0) TyType) (= (type $ly@@286) LayerTypeType)) (= (type |a#0@@86|) BoxType)) (= (LinearMaybe.__default.give LinearMaybe._default.give$A@@0 $ly@@286 |a#0@@86|) (LinearMaybe.__default.give LinearMaybe._default.give$A@@0 $LZ |a#0@@86|))) :qid |unknown.0:0| :skolemid |3035| :pattern ( (LinearMaybe.__default.give LinearMaybe._default.give$A@@0 (AsFuelBottom $ly@@286) |a#0@@86|)) )))
(assert  (=> true (forall ((LinearMaybe._default.give$A@@1 T@U) ($ly@@287 T@U) (|a#0@@87| T@U) ) (!  (=> (and (and (and (= (type LinearMaybe._default.give$A@@1) TyType) (= (type $ly@@287) LayerTypeType)) (= (type |a#0@@87|) BoxType)) (or (|LinearMaybe.__default.give#canCall| LinearMaybe._default.give$A@@1 |a#0@@87|) ($IsBox |a#0@@87| LinearMaybe._default.give$A@@1))) (and (and (and (LinearMaybe.__default.has LinearMaybe._default.give$A@@1 (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@287 |a#0@@87|)) (= (LinearMaybe.__default.read LinearMaybe._default.give$A@@1 (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@287 |a#0@@87|)) |a#0@@87|)) (forall ((|x#0@@1| T@U) ) (!  (=> (= (type |x#0@@1|) BoxType) (=> (and ($IsBox |x#0@@1| (|#$maybe| LinearMaybe._default.give$A@@1)) (and (LinearMaybe.__default.has LinearMaybe._default.give$A@@1 |x#0@@1|) (= |a#0@@87| (LinearMaybe.__default.read LinearMaybe._default.give$A@@1 |x#0@@1|)))) (= (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@287 |a#0@@87|) |x#0@@1|))) :qid |LinearMaybesdfy.25:20| :skolemid |3036| :pattern ( (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@287 (LinearMaybe.__default.read LinearMaybe._default.give$A@@1 |x#0@@1|))) ))) ($IsBox (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@287 |a#0@@87|) (|#$maybe| LinearMaybe._default.give$A@@1)))) :qid |unknown.0:0| :skolemid |3037| :pattern ( (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@287 |a#0@@87|)) ))))
(assert (forall ((LinearMaybe._default.give$A@@2 T@U) ($ly@@288 T@U) (|a#0@@88| T@U) ) (!  (=> (and (and (and (= (type LinearMaybe._default.give$A@@2) TyType) (= (type $ly@@288) LayerTypeType)) (= (type |a#0@@88|) BoxType)) ($IsBox |a#0@@88| LinearMaybe._default.give$A@@2)) (= (|LinearMaybe.__default.give#requires| LinearMaybe._default.give$A@@2 $ly@@288 |a#0@@88|) true)) :qid |unknown.0:0| :skolemid |3038| :pattern ( (|LinearMaybe.__default.give#requires| LinearMaybe._default.give$A@@2 $ly@@288 |a#0@@88|)) )))
(assert (forall ((arg0@@564 T@U) ) (! (= (type (LinearMaybe.__default.empty arg0@@564)) BoxType) :qid |funType:LinearMaybe.__default.empty| :pattern ( (LinearMaybe.__default.empty arg0@@564)) )))
(assert  (=> true (forall ((LinearMaybe._default.empty$A T@U) ) (!  (=> (and (= (type LinearMaybe._default.empty$A) TyType) true) (and (not (LinearMaybe.__default.has LinearMaybe._default.empty$A (LinearMaybe.__default.empty LinearMaybe._default.empty$A))) ($IsBox (LinearMaybe.__default.empty LinearMaybe._default.empty$A) (|#$maybe| LinearMaybe._default.empty$A)))) :qid |unknown.0:0| :skolemid |3039| :pattern ( (LinearMaybe.__default.empty LinearMaybe._default.empty$A)) ))))
(assert (forall ((LinearMaybe._default.empty$A@@0 T@U) ) (!  (=> (= (type LinearMaybe._default.empty$A@@0) TyType) (= (|LinearMaybe.__default.empty#requires| LinearMaybe._default.empty$A@@0) true)) :qid |unknown.0:0| :skolemid |3040| :pattern ( (|LinearMaybe.__default.empty#requires| LinearMaybe._default.empty$A@@0)) )))
(assert (forall ((arg0@@565 T@U) (arg1@@260 T@U) ) (! (= (type (LinearMaybe.__default.discard arg0@@565 arg1@@260)) DatatypeTypeType) :qid |funType:LinearMaybe.__default.discard| :pattern ( (LinearMaybe.__default.discard arg0@@565 arg1@@260)) )))
(assert  (=> true (forall ((LinearMaybe._default.discard$A T@U) (|m#0@@94| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.discard$A) TyType) (= (type |m#0@@94|) BoxType)) (or (|LinearMaybe.__default.discard#canCall| LinearMaybe._default.discard$A |m#0@@94|) (and ($IsBox |m#0@@94| (|#$maybe| LinearMaybe._default.discard$A)) (not (LinearMaybe.__default.has LinearMaybe._default.discard$A |m#0@@94|))))) ($Is (LinearMaybe.__default.discard LinearMaybe._default.discard$A |m#0@@94|) Tclass._System.Tuple0)) :qid |unknown.0:0| :skolemid |3041| :pattern ( (LinearMaybe.__default.discard LinearMaybe._default.discard$A |m#0@@94|)) ))))
(assert (forall ((LinearMaybe._default.discard$A@@0 T@U) (|m#0@@95| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.discard$A@@0) TyType) (= (type |m#0@@95|) BoxType)) ($IsBox |m#0@@95| (|#$maybe| LinearMaybe._default.discard$A@@0))) (= (|LinearMaybe.__default.discard#requires| LinearMaybe._default.discard$A@@0 |m#0@@95|)  (not (LinearMaybe.__default.has LinearMaybe._default.discard$A@@0 |m#0@@95|)))) :qid |unknown.0:0| :skolemid |3042| :pattern ( (|LinearMaybe.__default.discard#requires| LinearMaybe._default.discard$A@@0 |m#0@@95|)) )))
(assert (forall ((arg0@@566 T@U) (arg1@@261 Bool) (arg2@@167 T@U) ) (! (= (type (LinearMaybe.__default.imagine arg0@@566 arg1@@261 arg2@@167)) BoxType) :qid |funType:LinearMaybe.__default.imagine| :pattern ( (LinearMaybe.__default.imagine arg0@@566 arg1@@261 arg2@@167)) )))
(assert  (=> true (forall ((LinearMaybe._default.imagine$A T@U) (|h#0| Bool) (|a#0@@89| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.imagine$A) TyType) (= (type |a#0@@89|) BoxType)) (or (|LinearMaybe.__default.imagine#canCall| LinearMaybe._default.imagine$A |h#0| |a#0@@89|) ($IsBox |a#0@@89| LinearMaybe._default.imagine$A))) (and (and (= (LinearMaybe.__default.has LinearMaybe._default.imagine$A (LinearMaybe.__default.imagine LinearMaybe._default.imagine$A |h#0| |a#0@@89|)) |h#0|) (= (LinearMaybe.__default.read LinearMaybe._default.imagine$A (LinearMaybe.__default.imagine LinearMaybe._default.imagine$A |h#0| |a#0@@89|)) |a#0@@89|)) ($IsBox (LinearMaybe.__default.imagine LinearMaybe._default.imagine$A |h#0| |a#0@@89|) (|#$maybe| LinearMaybe._default.imagine$A)))) :qid |unknown.0:0| :skolemid |3043| :pattern ( (LinearMaybe.__default.imagine LinearMaybe._default.imagine$A |h#0| |a#0@@89|)) ))))
(assert (forall ((LinearMaybe._default.imagine$A@@0 T@U) (|h#0@@0| Bool) (|a#0@@90| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.imagine$A@@0) TyType) (= (type |a#0@@90|) BoxType)) ($IsBox |a#0@@90| LinearMaybe._default.imagine$A@@0)) (= (|LinearMaybe.__default.imagine#requires| LinearMaybe._default.imagine$A@@0 |h#0@@0| |a#0@@90|) true)) :qid |unknown.0:0| :skolemid |3044| :pattern ( (|LinearMaybe.__default.imagine#requires| LinearMaybe._default.imagine$A@@0 |h#0@@0| |a#0@@90|)) )))
(assert (= (type Tclass.LinearExtern.__default) TyType))
(assert (= (Tag Tclass.LinearExtern.__default) Tagclass.LinearExtern.__default))
(assert (= (TagFamily Tclass.LinearExtern.__default) tytagFamily$_default))
(assert (forall ((bx@@182 T@U) ) (!  (=> (and (= (type bx@@182) BoxType) ($IsBox bx@@182 Tclass.LinearExtern.__default)) (and (= ($Box ($Unbox refType bx@@182)) bx@@182) ($Is ($Unbox refType bx@@182) Tclass.LinearExtern.__default))) :qid |unknown.0:0| :skolemid |3045| :pattern ( ($IsBox bx@@182 Tclass.LinearExtern.__default)) )))
(assert (forall (($o@@46 T@U) ) (!  (=> (= (type $o@@46) refType) (= ($Is $o@@46 Tclass.LinearExtern.__default)  (or (= $o@@46 null) (= (dtype $o@@46) Tclass.LinearExtern.__default)))) :qid |unknown.0:0| :skolemid |3046| :pattern ( ($Is $o@@46 Tclass.LinearExtern.__default)) )))
(assert (forall (($o@@47 T@U) ($h@@155 T@U) ) (!  (=> (and (= (type $o@@47) refType) (= (type $h@@155) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@47 Tclass.LinearExtern.__default $h@@155)  (or (= $o@@47 null) (U_2_bool (MapType1Select (MapType0Select $h@@155 $o@@47) alloc))))) :qid |unknown.0:0| :skolemid |3047| :pattern ( ($IsAlloc $o@@47 Tclass.LinearExtern.__default $h@@155)) )))
(assert (forall ((arg0@@567 T@U) (arg1@@262 T@U) (arg2@@168 Int) ) (! (= (type (LinearExtern.__default.seq_get arg0@@567 arg1@@262 arg2@@168)) BoxType) :qid |funType:LinearExtern.__default.seq_get| :pattern ( (LinearExtern.__default.seq_get arg0@@567 arg1@@262 arg2@@168)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_get$A T@U) (|s#0@@140| T@U) (|i#0@@77| Int) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_get$A) TyType) (= (type |s#0@@140|) (SeqType BoxType))) (or (|LinearExtern.__default.seq_get#canCall| LinearSequence_s._default.seq_get$A |s#0@@140| |i#0@@77|) (and (and ($Is |s#0@@140| (TSeq LinearSequence_s._default.seq_get$A)) (and (<= (LitInt 0) |i#0@@77|) (< |i#0@@77| 18446744073709551616))) (< |i#0@@77| (|Seq#Length| |s#0@@140|))))) (and (= (LinearExtern.__default.seq_get LinearSequence_s._default.seq_get$A |s#0@@140| |i#0@@77|) (|Seq#Index| |s#0@@140| |i#0@@77|)) ($IsBox (LinearExtern.__default.seq_get LinearSequence_s._default.seq_get$A |s#0@@140| |i#0@@77|) LinearSequence_s._default.seq_get$A))) :qid |unknown.0:0| :skolemid |3048| :pattern ( (LinearExtern.__default.seq_get LinearSequence_s._default.seq_get$A |s#0@@140| |i#0@@77|)) ))))
(assert (forall ((LinearSequence_s._default.seq_get$A@@0 T@U) (|s#0@@141| T@U) (|i#0@@78| Int) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_get$A@@0) TyType) (= (type |s#0@@141|) (SeqType BoxType))) (and ($Is |s#0@@141| (TSeq LinearSequence_s._default.seq_get$A@@0)) (and (<= (LitInt 0) |i#0@@78|) (< |i#0@@78| 18446744073709551616)))) (= (|LinearExtern.__default.seq_get#requires| LinearSequence_s._default.seq_get$A@@0 |s#0@@141| |i#0@@78|) (< |i#0@@78| (|Seq#Length| |s#0@@141|)))) :qid |unknown.0:0| :skolemid |3049| :pattern ( (|LinearExtern.__default.seq_get#requires| LinearSequence_s._default.seq_get$A@@0 |s#0@@141| |i#0@@78|)) )))
(assert (forall ((arg0@@568 T@U) (arg1@@263 T@U) (arg2@@169 Int) (arg3@@119 T@U) ) (! (= (type (LinearExtern.__default.seq_set arg0@@568 arg1@@263 arg2@@169 arg3@@119)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.seq_set| :pattern ( (LinearExtern.__default.seq_set arg0@@568 arg1@@263 arg2@@169 arg3@@119)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_set$A T@U) (|s1#0| T@U) (|i#0@@79| Int) (|a#0@@91| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.seq_set$A) TyType) (= (type |s1#0|) (SeqType BoxType))) (= (type |a#0@@91|) BoxType)) (or (|LinearExtern.__default.seq_set#canCall| LinearSequence_s._default.seq_set$A |s1#0| |i#0@@79| |a#0@@91|) (and (and (and ($Is |s1#0| (TSeq LinearSequence_s._default.seq_set$A)) (and (<= (LitInt 0) |i#0@@79|) (< |i#0@@79| 18446744073709551616))) ($IsBox |a#0@@91| LinearSequence_s._default.seq_set$A)) (< |i#0@@79| (|Seq#Length| |s1#0|))))) (and (|Seq#Equal| (LinearExtern.__default.seq_set LinearSequence_s._default.seq_set$A |s1#0| |i#0@@79| |a#0@@91|) (|Seq#Update| |s1#0| |i#0@@79| |a#0@@91|)) ($Is (LinearExtern.__default.seq_set LinearSequence_s._default.seq_set$A |s1#0| |i#0@@79| |a#0@@91|) (TSeq LinearSequence_s._default.seq_set$A)))) :qid |unknown.0:0| :skolemid |3050| :pattern ( (LinearExtern.__default.seq_set LinearSequence_s._default.seq_set$A |s1#0| |i#0@@79| |a#0@@91|)) ))))
(assert (forall ((LinearSequence_s._default.seq_set$A@@0 T@U) (|s1#0@@0| T@U) (|i#0@@80| Int) (|a#0@@92| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.seq_set$A@@0) TyType) (= (type |s1#0@@0|) (SeqType BoxType))) (= (type |a#0@@92|) BoxType)) (and (and ($Is |s1#0@@0| (TSeq LinearSequence_s._default.seq_set$A@@0)) (and (<= (LitInt 0) |i#0@@80|) (< |i#0@@80| 18446744073709551616))) ($IsBox |a#0@@92| LinearSequence_s._default.seq_set$A@@0))) (= (|LinearExtern.__default.seq_set#requires| LinearSequence_s._default.seq_set$A@@0 |s1#0@@0| |i#0@@80| |a#0@@92|) (< |i#0@@80| (|Seq#Length| |s1#0@@0|)))) :qid |unknown.0:0| :skolemid |3051| :pattern ( (|LinearExtern.__default.seq_set#requires| LinearSequence_s._default.seq_set$A@@0 |s1#0@@0| |i#0@@80| |a#0@@92|)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_length$A T@U) (|s#0@@142| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_length$A) TyType) (= (type |s#0@@142|) (SeqType BoxType))) (or (|LinearExtern.__default.seq_length#canCall| LinearSequence_s._default.seq_length$A |s#0@@142|) (and ($Is |s#0@@142| (TSeq LinearSequence_s._default.seq_length$A)) (<= (|Seq#Length| |s#0@@142|) (LitInt 18446744073709551615))))) (and (= (LinearExtern.__default.seq_length LinearSequence_s._default.seq_length$A |s#0@@142|) (|Seq#Length| |s#0@@142|)) (and (<= (LitInt 0) (LinearExtern.__default.seq_length LinearSequence_s._default.seq_length$A |s#0@@142|)) (< (LinearExtern.__default.seq_length LinearSequence_s._default.seq_length$A |s#0@@142|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |3052| :pattern ( (LinearExtern.__default.seq_length LinearSequence_s._default.seq_length$A |s#0@@142|)) ))))
(assert (forall ((LinearSequence_s._default.seq_length$A@@0 T@U) (|s#0@@143| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_length$A@@0) TyType) (= (type |s#0@@143|) (SeqType BoxType))) ($Is |s#0@@143| (TSeq LinearSequence_s._default.seq_length$A@@0))) (= (|LinearExtern.__default.seq_length#requires| LinearSequence_s._default.seq_length$A@@0 |s#0@@143|) (<= (|Seq#Length| |s#0@@143|) (LitInt 18446744073709551615)))) :qid |unknown.0:0| :skolemid |3053| :pattern ( (|LinearExtern.__default.seq_length#requires| LinearSequence_s._default.seq_length$A@@0 |s#0@@143|)) )))
(assert (forall ((arg0@@569 T@U) ) (! (= (type (LinearExtern.__default.seq_empty arg0@@569)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.seq_empty| :pattern ( (LinearExtern.__default.seq_empty arg0@@569)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_empty$A T@U) ) (!  (=> (and (= (type LinearSequence_s._default.seq_empty$A) TyType) true) (and (= (|Seq#Length| (LinearExtern.__default.seq_empty LinearSequence_s._default.seq_empty$A)) (LitInt 0)) ($Is (LinearExtern.__default.seq_empty LinearSequence_s._default.seq_empty$A) (TSeq LinearSequence_s._default.seq_empty$A)))) :qid |unknown.0:0| :skolemid |3054| :pattern ( (LinearExtern.__default.seq_empty LinearSequence_s._default.seq_empty$A)) ))))
(assert (forall ((LinearSequence_s._default.seq_empty$A@@0 T@U) ) (!  (=> (= (type LinearSequence_s._default.seq_empty$A@@0) TyType) (= (|LinearExtern.__default.seq_empty#requires| LinearSequence_s._default.seq_empty$A@@0) true)) :qid |unknown.0:0| :skolemid |3055| :pattern ( (|LinearExtern.__default.seq_empty#requires| LinearSequence_s._default.seq_empty$A@@0)) )))
(assert (forall ((arg0@@570 T@U) (arg1@@264 Int) (arg2@@170 T@U) ) (! (= (type (LinearExtern.__default.seq_alloc arg0@@570 arg1@@264 arg2@@170)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.seq_alloc| :pattern ( (LinearExtern.__default.seq_alloc arg0@@570 arg1@@264 arg2@@170)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_alloc$A T@U) (|length#0@@6| Int) (|a#0@@93| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_alloc$A) TyType) (= (type |a#0@@93|) BoxType)) (or (|LinearExtern.__default.seq_alloc#canCall| LinearSequence_s._default.seq_alloc$A |length#0@@6| |a#0@@93|) (and (and (<= (LitInt 0) |length#0@@6|) (< |length#0@@6| 18446744073709551616)) ($IsBox |a#0@@93| LinearSequence_s._default.seq_alloc$A)))) (and (and (= (|Seq#Length| (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0@@6| |a#0@@93|)) |length#0@@6|) (forall ((|i#0@@81| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@81|) (< |i#0@@81| (|Seq#Length| (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0@@6| |a#0@@93|)))) (= (|Seq#Index| (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0@@6| |a#0@@93|) |i#0@@81|) |a#0@@93|))) :qid |LinearSequencesdfy.32:20| :skolemid |3056| :pattern ( (|Seq#Index| (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0@@6| |a#0@@93|) |i#0@@81|)) ))) ($Is (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0@@6| |a#0@@93|) (TSeq LinearSequence_s._default.seq_alloc$A)))) :qid |unknown.0:0| :skolemid |3057| :pattern ( (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0@@6| |a#0@@93|)) ))))
(assert (forall ((LinearSequence_s._default.seq_alloc$A@@0 T@U) (|length#0@@7| Int) (|a#0@@94| T@U) ) (!  (=> (and (= (type LinearSequence_s._default.seq_alloc$A@@0) TyType) (= (type |a#0@@94|) BoxType)) (=> (and (and (<= (LitInt 0) |length#0@@7|) (< |length#0@@7| 18446744073709551616)) ($IsBox |a#0@@94| LinearSequence_s._default.seq_alloc$A@@0)) (= (|LinearExtern.__default.seq_alloc#requires| LinearSequence_s._default.seq_alloc$A@@0 |length#0@@7| |a#0@@94|) true))) :qid |unknown.0:0| :skolemid |3058| :pattern ( (|LinearExtern.__default.seq_alloc#requires| LinearSequence_s._default.seq_alloc$A@@0 |length#0@@7| |a#0@@94|)) )))
(assert (forall ((arg0@@571 T@U) (arg1@@265 T@U) ) (! (= (type (LinearExtern.__default.seq_free arg0@@571 arg1@@265)) DatatypeTypeType) :qid |funType:LinearExtern.__default.seq_free| :pattern ( (LinearExtern.__default.seq_free arg0@@571 arg1@@265)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_free$A T@U) (|s#0@@144| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_free$A) TyType) (= (type |s#0@@144|) (SeqType BoxType))) (or (|LinearExtern.__default.seq_free#canCall| LinearSequence_s._default.seq_free$A |s#0@@144|) ($Is |s#0@@144| (TSeq LinearSequence_s._default.seq_free$A)))) ($Is (LinearExtern.__default.seq_free LinearSequence_s._default.seq_free$A |s#0@@144|) Tclass._System.Tuple0)) :qid |unknown.0:0| :skolemid |3059| :pattern ( (LinearExtern.__default.seq_free LinearSequence_s._default.seq_free$A |s#0@@144|)) ))))
(assert (forall ((LinearSequence_s._default.seq_free$A@@0 T@U) (|s#0@@145| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_free$A@@0) TyType) (= (type |s#0@@145|) (SeqType BoxType))) ($Is |s#0@@145| (TSeq LinearSequence_s._default.seq_free$A@@0))) (= (|LinearExtern.__default.seq_free#requires| LinearSequence_s._default.seq_free$A@@0 |s#0@@145|) true)) :qid |unknown.0:0| :skolemid |3060| :pattern ( (|LinearExtern.__default.seq_free#requires| LinearSequence_s._default.seq_free$A@@0 |s#0@@145|)) )))
(assert (forall ((arg0@@572 T@U) (arg1@@266 T@U) ) (! (= (type (LinearExtern.__default.seq_unleash arg0@@572 arg1@@266)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.seq_unleash| :pattern ( (LinearExtern.__default.seq_unleash arg0@@572 arg1@@266)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_unleash$A T@U) (|s1#0@@1| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_unleash$A) TyType) (= (type |s1#0@@1|) (SeqType BoxType))) (or (|LinearExtern.__default.seq_unleash#canCall| LinearSequence_s._default.seq_unleash$A |s1#0@@1|) ($Is |s1#0@@1| (TSeq LinearSequence_s._default.seq_unleash$A)))) (and (|Seq#Equal| |s1#0@@1| (LinearExtern.__default.seq_unleash LinearSequence_s._default.seq_unleash$A |s1#0@@1|)) ($Is (LinearExtern.__default.seq_unleash LinearSequence_s._default.seq_unleash$A |s1#0@@1|) (TSeq LinearSequence_s._default.seq_unleash$A)))) :qid |unknown.0:0| :skolemid |3061| :pattern ( (LinearExtern.__default.seq_unleash LinearSequence_s._default.seq_unleash$A |s1#0@@1|)) ))))
(assert (forall ((LinearSequence_s._default.seq_unleash$A@@0 T@U) (|s1#0@@2| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_unleash$A@@0) TyType) (= (type |s1#0@@2|) (SeqType BoxType))) ($Is |s1#0@@2| (TSeq LinearSequence_s._default.seq_unleash$A@@0))) (= (|LinearExtern.__default.seq_unleash#requires| LinearSequence_s._default.seq_unleash$A@@0 |s1#0@@2|) true)) :qid |unknown.0:0| :skolemid |3062| :pattern ( (|LinearExtern.__default.seq_unleash#requires| LinearSequence_s._default.seq_unleash$A@@0 |s1#0@@2|)) )))
(assert  (and (forall ((arg0@@573 T@U) (arg1@@267 T@U) ) (! (= (type (LinearExtern.__default.lseqs__raw arg0@@573 arg1@@267)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.lseqs__raw| :pattern ( (LinearExtern.__default.lseqs__raw arg0@@573 arg1@@267)) )) (forall ((arg0@@574 T@U) ) (! (= (type (|#$lseq| arg0@@574)) TyType) :qid |funType:#$lseq| :pattern ( (|#$lseq| arg0@@574)) ))))
(assert  (=> true (forall ((LinearSequence_s._default.lseqs_raw$A T@U) (|l#0| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseqs_raw$A) TyType) (= (type |l#0|) BoxType)) (or (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseqs_raw$A |l#0|) ($IsBox |l#0| (|#$lseq| LinearSequence_s._default.lseqs_raw$A)))) ($Is (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseqs_raw$A |l#0|) (TSeq (|#$maybe| LinearSequence_s._default.lseqs_raw$A)))) :qid |unknown.0:0| :skolemid |3063| :pattern ( (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseqs_raw$A |l#0|)) ))))
(assert (forall ((LinearSequence_s._default.lseqs_raw$A@@0 T@U) (|l#0@@0| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseqs_raw$A@@0) TyType) (= (type |l#0@@0|) BoxType)) ($IsBox |l#0@@0| (|#$lseq| LinearSequence_s._default.lseqs_raw$A@@0))) (= (|LinearExtern.__default.lseqs__raw#requires| LinearSequence_s._default.lseqs_raw$A@@0 |l#0@@0|) true)) :qid |unknown.0:0| :skolemid |3064| :pattern ( (|LinearExtern.__default.lseqs__raw#requires| LinearSequence_s._default.lseqs_raw$A@@0 |l#0@@0|)) )))
(assert (forall ((arg0@@575 T@U) (arg1@@268 T@U) ) (! (= (type (LinearExtern.__default.lseq__has arg0@@575 arg1@@268)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.lseq__has| :pattern ( (LinearExtern.__default.lseq__has arg0@@575 arg1@@268)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_has$A T@U) (|l#0@@1| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_has$A) TyType) (= (type |l#0@@1|) BoxType)) (or (|LinearExtern.__default.lseq__has#canCall| LinearSequence_s._default.lseq_has$A |l#0@@1|) ($IsBox |l#0@@1| (|#$lseq| LinearSequence_s._default.lseq_has$A)))) (and (= (|Seq#Length| (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A |l#0@@1|)) (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A |l#0@@1|))) ($Is (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A |l#0@@1|) (TSeq TBool)))) :qid |unknown.0:0| :skolemid |3065| :pattern ( (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A |l#0@@1|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_has$A@@0 T@U) ($Heap@@40 T@U) (|l#0@@2| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_has$A@@0) TyType) (= (type $Heap@@40) (MapType0Type refType MapType1Type))) (= (type |l#0@@2|) BoxType)) (and ($IsGoodHeap $Heap@@40) ($IsBox |l#0@@2| (|#$lseq| LinearSequence_s._default.lseq_has$A@@0)))) (= (|LinearExtern.__default.lseq__has#requires| LinearSequence_s._default.lseq_has$A@@0 |l#0@@2|) true)) :qid |unknown.0:0| :skolemid |3066| :pattern ( (|LinearExtern.__default.lseq__has#requires| LinearSequence_s._default.lseq_has$A@@0 |l#0@@2|) ($IsGoodHeap $Heap@@40)) )))
(assert  (and (and (and (and (forall ((arg0@@576 T@U) ) (! (= (type (|lambda#102| arg0@@576)) (MapType0Type LayerTypeType HandleTypeType)) :qid |funType:lambda#102| :pattern ( (|lambda#102| arg0@@576)) )) (forall ((arg0@@577 T@U) (arg1@@269 T@U) ) (! (= (type (|lambda#98| arg0@@577 arg1@@269)) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType)) :qid |funType:lambda#98| :pattern ( (|lambda#98| arg0@@577 arg1@@269)) ))) (forall ((arg0@@578 T@U) (arg1@@270 Int) (arg2@@171 Int) ) (! (= (type (|lambda#99| arg0@@578 arg1@@270 arg2@@171)) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType)) :qid |funType:lambda#99| :pattern ( (|lambda#99| arg0@@578 arg1@@270 arg2@@171)) ))) (forall ((arg0@@579 T@U) ) (! (= (type (|lambda#101| arg0@@579)) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType))) :qid |funType:lambda#101| :pattern ( (|lambda#101| arg0@@579)) ))) (forall ((arg0@@580 Bool) ) (! (= (type (|lambda#100| arg0@@580)) (MapType0Type refType boolType)) :qid |funType:lambda#100| :pattern ( (|lambda#100| arg0@@580)) ))))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_has$A@@1 T@U) ($Heap@@41 T@U) (|l#0@@3| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_has$A@@1) TyType) (= (type $Heap@@41) (MapType0Type refType MapType1Type))) (= (type |l#0@@3|) BoxType)) (or (|LinearExtern.__default.lseq__has#canCall| LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|) (and ($IsGoodHeap $Heap@@41) ($IsBox |l#0@@3| (|#$lseq| LinearSequence_s._default.lseq_has$A@@1))))) (and (and (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|) (forall ((|$l#1#i#0| Int) ) (!  (and (=> (<= (LitInt 0) |$l#1#i#0|) (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|)) (=> (and (<= (LitInt 0) |$l#1#i#0|) (< |$l#1#i#0| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|)))) (and (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|) (|LinearMaybe.__default.has#canCall| LinearSequence_s._default.lseq_has$A@@1 (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|) |$l#1#i#0|))))) :qid |unknown.0:0| :skolemid |3067| ))) (= (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|) (|Seq#Create| TBool $Heap@@41 (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|)) (Lit (AtLayer (|lambda#102| (Handle1 (|lambda#98| LinearSequence_s._default.lseq_has$A@@1 (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|)) (|lambda#99| TInt (LitInt 0) (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|))) (|lambda#101| (SetRef_to_SetBox (|lambda#100| false))))) ($LS $LZ))))))) :qid |unknown.0:0| :skolemid |3068| :pattern ( (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|) ($IsGoodHeap $Heap@@41)) ))))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_has$A@@2 T@U) ($Heap@@42 T@U) (|l#0@@4| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_has$A@@2) TyType) (= (type $Heap@@42) (MapType0Type refType MapType1Type))) (= (type |l#0@@4|) BoxType)) (or (|LinearExtern.__default.lseq__has#canCall| LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)) (and ($IsGoodHeap $Heap@@42) ($IsBox |l#0@@4| (|#$lseq| LinearSequence_s._default.lseq_has$A@@2))))) (and (and (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)) (forall ((|$l#3#i#0| Int) ) (!  (and (=> (<= (LitInt 0) |$l#3#i#0|) (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|))) (=> (and (<= (LitInt 0) |$l#3#i#0|) (< |$l#3#i#0| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|))))) (and (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)) (|LinearMaybe.__default.has#canCall| LinearSequence_s._default.lseq_has$A@@2 (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)) |$l#3#i#0|))))) :qid |unknown.0:0| :skolemid |3069| ))) (= (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)) (|Seq#Create| TBool $Heap@@42 (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|))) (Lit (AtLayer (|lambda#102| (Handle1 (|lambda#98| LinearSequence_s._default.lseq_has$A@@2 (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|))) (|lambda#99| TInt (LitInt 0) (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)))) (|lambda#101| (SetRef_to_SetBox (|lambda#100| false))))) ($LS $LZ))))))) :qid |unknown.0:0| :weight 3 :skolemid |3070| :pattern ( (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)) ($IsGoodHeap $Heap@@42)) ))))
(assert (forall ((arg0@@581 T@U) (arg1@@271 T@U) ) (! (= (type (LinearExtern.__default.imagine__lseq__raw arg0@@581 arg1@@271)) BoxType) :qid |funType:LinearExtern.__default.imagine__lseq__raw| :pattern ( (LinearExtern.__default.imagine__lseq__raw arg0@@581 arg1@@271)) )))
(assert  (=> true (forall ((LinearSequence_s._default.imagine_lseq_raw$A T@U) (|s#0@@146| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.imagine_lseq_raw$A) TyType) (= (type |s#0@@146|) (SeqType BoxType))) (or (|LinearExtern.__default.imagine__lseq__raw#canCall| LinearSequence_s._default.imagine_lseq_raw$A |s#0@@146|) ($Is |s#0@@146| (TSeq (|#$maybe| LinearSequence_s._default.imagine_lseq_raw$A))))) (and (|Seq#Equal| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.imagine_lseq_raw$A (LinearExtern.__default.imagine__lseq__raw LinearSequence_s._default.imagine_lseq_raw$A |s#0@@146|)) |s#0@@146|) ($IsBox (LinearExtern.__default.imagine__lseq__raw LinearSequence_s._default.imagine_lseq_raw$A |s#0@@146|) (|#$lseq| LinearSequence_s._default.imagine_lseq_raw$A)))) :qid |unknown.0:0| :skolemid |3071| :pattern ( (LinearExtern.__default.imagine__lseq__raw LinearSequence_s._default.imagine_lseq_raw$A |s#0@@146|)) ))))
(assert (forall ((LinearSequence_s._default.imagine_lseq_raw$A@@0 T@U) (|s#0@@147| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.imagine_lseq_raw$A@@0) TyType) (= (type |s#0@@147|) (SeqType BoxType))) ($Is |s#0@@147| (TSeq (|#$maybe| LinearSequence_s._default.imagine_lseq_raw$A@@0)))) (= (|LinearExtern.__default.imagine__lseq__raw#requires| LinearSequence_s._default.imagine_lseq_raw$A@@0 |s#0@@147|) true)) :qid |unknown.0:0| :skolemid |3072| :pattern ( (|LinearExtern.__default.imagine__lseq__raw#requires| LinearSequence_s._default.imagine_lseq_raw$A@@0 |s#0@@147|)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_length_raw$A T@U) (|s#0@@148| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_length_raw$A) TyType) (= (type |s#0@@148|) BoxType)) (or (|LinearExtern.__default.lseq_length_raw#canCall| LinearSequence_s._default.lseq_length_raw$A |s#0@@148|) (and ($IsBox |s#0@@148| (|#$lseq| LinearSequence_s._default.lseq_length_raw$A)) (<= (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_length_raw$A |s#0@@148|)) (LitInt 18446744073709551615))))) (and (= (LinearExtern.__default.lseq_length_raw LinearSequence_s._default.lseq_length_raw$A |s#0@@148|) (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_length_raw$A |s#0@@148|))) (and (<= (LitInt 0) (LinearExtern.__default.lseq_length_raw LinearSequence_s._default.lseq_length_raw$A |s#0@@148|)) (< (LinearExtern.__default.lseq_length_raw LinearSequence_s._default.lseq_length_raw$A |s#0@@148|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |3073| :pattern ( (LinearExtern.__default.lseq_length_raw LinearSequence_s._default.lseq_length_raw$A |s#0@@148|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_length_raw$A@@0 T@U) (|s#0@@149| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_length_raw$A@@0) TyType) (= (type |s#0@@149|) BoxType)) ($IsBox |s#0@@149| (|#$lseq| LinearSequence_s._default.lseq_length_raw$A@@0))) (= (|LinearExtern.__default.lseq_length_raw#requires| LinearSequence_s._default.lseq_length_raw$A@@0 |s#0@@149|) (<= (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_length_raw$A@@0 |s#0@@149|)) (LitInt 18446744073709551615)))) :qid |unknown.0:0| :skolemid |3074| :pattern ( (|LinearExtern.__default.lseq_length_raw#requires| LinearSequence_s._default.lseq_length_raw$A@@0 |s#0@@149|)) )))
(assert (forall ((arg0@@582 T@U) (arg1@@272 Int) ) (! (= (type (LinearExtern.__default.lseq_alloc_raw arg0@@582 arg1@@272)) BoxType) :qid |funType:LinearExtern.__default.lseq_alloc_raw| :pattern ( (LinearExtern.__default.lseq_alloc_raw arg0@@582 arg1@@272)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_alloc_raw$A T@U) (|length#0@@8| Int) ) (!  (=> (and (= (type LinearSequence_s._default.lseq_alloc_raw$A) TyType) (or (|LinearExtern.__default.lseq_alloc_raw#canCall| LinearSequence_s._default.lseq_alloc_raw$A |length#0@@8|) (and (<= (LitInt 0) |length#0@@8|) (< |length#0@@8| 18446744073709551616)))) (and (and (= (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_alloc_raw$A (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@8|))) |length#0@@8|) (forall ((|i#0@@82| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@82|) (< |i#0@@82| |length#0@@8|)) (not (LinearMaybe.__default.has LinearSequence_s._default.lseq_alloc_raw$A (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_alloc_raw$A (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@8|)) |i#0@@82|)))) :qid |LinearSequencesdfy.90:22| :skolemid |3075| :pattern ( (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_alloc_raw$A (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@8|)) |i#0@@82|)) ))) ($IsBox (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@8|) (|#$lseq| LinearSequence_s._default.lseq_alloc_raw$A)))) :qid |unknown.0:0| :skolemid |3076| :pattern ( (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@8|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_alloc_raw$A@@0 T@U) (|length#0@@9| Int) ) (!  (=> (= (type LinearSequence_s._default.lseq_alloc_raw$A@@0) TyType) (=> (and (<= (LitInt 0) |length#0@@9|) (< |length#0@@9| 18446744073709551616)) (= (|LinearExtern.__default.lseq_alloc_raw#requires| LinearSequence_s._default.lseq_alloc_raw$A@@0 |length#0@@9|) true))) :qid |unknown.0:0| :skolemid |3077| :pattern ( (|LinearExtern.__default.lseq_alloc_raw#requires| LinearSequence_s._default.lseq_alloc_raw$A@@0 |length#0@@9|)) )))
(assert (forall ((arg0@@583 T@U) (arg1@@273 T@U) ) (! (= (type (LinearExtern.__default.lseq_free_raw arg0@@583 arg1@@273)) DatatypeTypeType) :qid |funType:LinearExtern.__default.lseq_free_raw| :pattern ( (LinearExtern.__default.lseq_free_raw arg0@@583 arg1@@273)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_free_raw$A T@U) (|s#0@@150| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_free_raw$A) TyType) (= (type |s#0@@150|) BoxType)) (or (|LinearExtern.__default.lseq_free_raw#canCall| LinearSequence_s._default.lseq_free_raw$A |s#0@@150|) (and ($IsBox |s#0@@150| (|#$lseq| LinearSequence_s._default.lseq_free_raw$A)) (forall ((|i#0@@83| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@83|) (< |i#0@@83| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A |s#0@@150|)))) (not (LinearMaybe.__default.has LinearSequence_s._default.lseq_free_raw$A (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A |s#0@@150|) |i#0@@83|)))) :qid |LinearSequencesdfy.93:23| :skolemid |3078| :pattern ( (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A |s#0@@150|) |i#0@@83|)) ))))) ($Is (LinearExtern.__default.lseq_free_raw LinearSequence_s._default.lseq_free_raw$A |s#0@@150|) Tclass._System.Tuple0)) :qid |unknown.0:0| :skolemid |3079| :pattern ( (LinearExtern.__default.lseq_free_raw LinearSequence_s._default.lseq_free_raw$A |s#0@@150|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_free_raw$A@@0 T@U) (|s#0@@151| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_free_raw$A@@0) TyType) (= (type |s#0@@151|) BoxType)) ($IsBox |s#0@@151| (|#$lseq| LinearSequence_s._default.lseq_free_raw$A@@0))) (= (|LinearExtern.__default.lseq_free_raw#requires| LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@151|) (forall ((|i#1@@16| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@16|) (< |i#1@@16| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@151|)))) (not (LinearMaybe.__default.has LinearSequence_s._default.lseq_free_raw$A@@0 (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@151|) |i#1@@16|)))) :qid |LinearSequencesdfy.93:23| :skolemid |3080| :pattern ( (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@151|) |i#1@@16|)) )))) :qid |unknown.0:0| :skolemid |3081| :pattern ( (|LinearExtern.__default.lseq_free_raw#requires| LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@151|)) )))
(assert (forall ((arg0@@584 T@U) (arg1@@274 T@U) (arg2@@172 Int) (arg3@@120 T@U) ) (! (= (type (LinearExtern.__default.lseq_swap_raw_fun arg0@@584 arg1@@274 arg2@@172 arg3@@120)) DatatypeTypeType) :qid |funType:LinearExtern.__default.lseq_swap_raw_fun| :pattern ( (LinearExtern.__default.lseq_swap_raw_fun arg0@@584 arg1@@274 arg2@@172 arg3@@120)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_swap_raw_fun$A T@U) (|s1#0@@3| T@U) (|i#0@@84| Int) (|a1#0| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_swap_raw_fun$A) TyType) (= (type |s1#0@@3|) BoxType)) (= (type |a1#0|) BoxType)) (or (|LinearExtern.__default.lseq_swap_raw_fun#canCall| LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@84| |a1#0|) (and (and (and ($IsBox |s1#0@@3| (|#$lseq| LinearSequence_s._default.lseq_swap_raw_fun$A)) (and (<= (LitInt 0) |i#0@@84|) (< |i#0@@84| 18446744073709551616))) ($IsBox |a1#0| (|#$maybe| LinearSequence_s._default.lseq_swap_raw_fun$A))) (< |i#0@@84| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3|)))))) (and (and (= (_System.Tuple2OLL._1 (LinearExtern.__default.lseq_swap_raw_fun LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@84| |a1#0|)) (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3|) |i#0@@84|)) (|Seq#Equal| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A (_System.Tuple2OLL._0 (LinearExtern.__default.lseq_swap_raw_fun LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@84| |a1#0|))) (|Seq#Update| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3|) |i#0@@84| |a1#0|))) ($Is (LinearExtern.__default.lseq_swap_raw_fun LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@84| |a1#0|) (Tclass._System.Tuple2OLL (|#$lseq| LinearSequence_s._default.lseq_swap_raw_fun$A) (|#$maybe| LinearSequence_s._default.lseq_swap_raw_fun$A))))) :qid |unknown.0:0| :skolemid |3082| :pattern ( (LinearExtern.__default.lseq_swap_raw_fun LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@84| |a1#0|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_swap_raw_fun$A@@0 T@U) (|s1#0@@4| T@U) (|i#0@@85| Int) (|a1#0@@0| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_swap_raw_fun$A@@0) TyType) (= (type |s1#0@@4|) BoxType)) (= (type |a1#0@@0|) BoxType)) (and (and ($IsBox |s1#0@@4| (|#$lseq| LinearSequence_s._default.lseq_swap_raw_fun$A@@0)) (and (<= (LitInt 0) |i#0@@85|) (< |i#0@@85| 18446744073709551616))) ($IsBox |a1#0@@0| (|#$maybe| LinearSequence_s._default.lseq_swap_raw_fun$A@@0)))) (= (|LinearExtern.__default.lseq_swap_raw_fun#requires| LinearSequence_s._default.lseq_swap_raw_fun$A@@0 |s1#0@@4| |i#0@@85| |a1#0@@0|) (< |i#0@@85| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A@@0 |s1#0@@4|))))) :qid |unknown.0:0| :skolemid |3083| :pattern ( (|LinearExtern.__default.lseq_swap_raw_fun#requires| LinearSequence_s._default.lseq_swap_raw_fun$A@@0 |s1#0@@4| |i#0@@85| |a1#0@@0|)) )))
(assert (forall ((arg0@@585 T@U) (arg1@@275 T@U) (arg2@@173 Int) ) (! (= (type (LinearExtern.__default.lseq_share_raw arg0@@585 arg1@@275 arg2@@173)) BoxType) :qid |funType:LinearExtern.__default.lseq_share_raw| :pattern ( (LinearExtern.__default.lseq_share_raw arg0@@585 arg1@@275 arg2@@173)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_share_raw$A T@U) (|s#0@@152| T@U) (|i#0@@86| Int) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_share_raw$A) TyType) (= (type |s#0@@152|) BoxType)) (or (|LinearExtern.__default.lseq_share_raw#canCall| LinearSequence_s._default.lseq_share_raw$A |s#0@@152| |i#0@@86|) (and (and ($IsBox |s#0@@152| (|#$lseq| LinearSequence_s._default.lseq_share_raw$A)) (and (<= (LitInt 0) |i#0@@86|) (< |i#0@@86| 18446744073709551616))) (< |i#0@@86| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_share_raw$A |s#0@@152|)))))) (and (= (LinearExtern.__default.lseq_share_raw LinearSequence_s._default.lseq_share_raw$A |s#0@@152| |i#0@@86|) (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_share_raw$A |s#0@@152|) |i#0@@86|)) ($IsBox (LinearExtern.__default.lseq_share_raw LinearSequence_s._default.lseq_share_raw$A |s#0@@152| |i#0@@86|) (|#$maybe| LinearSequence_s._default.lseq_share_raw$A)))) :qid |unknown.0:0| :skolemid |3084| :pattern ( (LinearExtern.__default.lseq_share_raw LinearSequence_s._default.lseq_share_raw$A |s#0@@152| |i#0@@86|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_share_raw$A@@0 T@U) (|s#0@@153| T@U) (|i#0@@87| Int) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_share_raw$A@@0) TyType) (= (type |s#0@@153|) BoxType)) (and ($IsBox |s#0@@153| (|#$lseq| LinearSequence_s._default.lseq_share_raw$A@@0)) (and (<= (LitInt 0) |i#0@@87|) (< |i#0@@87| 18446744073709551616)))) (= (|LinearExtern.__default.lseq_share_raw#requires| LinearSequence_s._default.lseq_share_raw$A@@0 |s#0@@153| |i#0@@87|) (< |i#0@@87| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_share_raw$A@@0 |s#0@@153|))))) :qid |unknown.0:0| :skolemid |3085| :pattern ( (|LinearExtern.__default.lseq_share_raw#requires| LinearSequence_s._default.lseq_share_raw$A@@0 |s#0@@153| |i#0@@87|)) )))
(assert (= (type |#ValueMessage.Delta.NoDelta|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#ValueMessage.Delta.NoDelta|) |##ValueMessage.Delta.NoDelta|))
(assert (forall ((d@@143 T@U) ) (!  (=> (= (type d@@143) DatatypeTypeType) (= (ValueMessage.Delta.NoDelta_q d@@143) (= (DatatypeCtorId d@@143) |##ValueMessage.Delta.NoDelta|))) :qid |unknown.0:0| :skolemid |3086| :pattern ( (ValueMessage.Delta.NoDelta_q d@@143)) )))
(assert (forall ((d@@144 T@U) ) (!  (=> (and (= (type d@@144) DatatypeTypeType) (ValueMessage.Delta.NoDelta_q d@@144)) (= d@@144 |#ValueMessage.Delta.NoDelta|)) :qid |unknown.0:0| :skolemid |3087| :pattern ( (ValueMessage.Delta.NoDelta_q d@@144)) )))
(assert ($Is |#ValueMessage.Delta.NoDelta| Tclass.ValueMessage.Delta))
(assert (forall (($h@@156 T@U) ) (!  (=> (and (= (type $h@@156) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@156)) ($IsAlloc |#ValueMessage.Delta.NoDelta| Tclass.ValueMessage.Delta $h@@156)) :qid |DafnyPreludebpl.545:12| :skolemid |3088| :pattern ( ($IsAlloc |#ValueMessage.Delta.NoDelta| Tclass.ValueMessage.Delta $h@@156)) )))
(assert (= |#ValueMessage.Delta.NoDelta| (Lit |#ValueMessage.Delta.NoDelta|)))
(assert (forall ((d@@145 T@U) ) (!  (=> (and (= (type d@@145) DatatypeTypeType) (|$IsA#ValueMessage.Delta| d@@145)) (ValueMessage.Delta.NoDelta_q d@@145)) :qid |unknown.0:0| :skolemid |3089| :pattern ( (|$IsA#ValueMessage.Delta| d@@145)) )))
(assert (forall ((d@@146 T@U) ) (!  (=> (and (= (type d@@146) DatatypeTypeType) ($Is d@@146 Tclass.ValueMessage.Delta)) (ValueMessage.Delta.NoDelta_q d@@146)) :qid |unknown.0:0| :skolemid |3090| :pattern ( (ValueMessage.Delta.NoDelta_q d@@146) ($Is d@@146 Tclass.ValueMessage.Delta)) )))
(assert (forall ((a@@172 T@U) (b@@109 T@U) ) (!  (=> (and (and (= (type a@@172) DatatypeTypeType) (= (type b@@109) DatatypeTypeType)) true) (= (|ValueMessage.Delta#Equal| a@@172 b@@109) true)) :qid |unknown.0:0| :skolemid |3091| :pattern ( (|ValueMessage.Delta#Equal| a@@172 b@@109)) )))
(assert (forall ((a@@173 T@U) (b@@110 T@U) ) (!  (=> (and (= (type a@@173) DatatypeTypeType) (= (type b@@110) DatatypeTypeType)) (= (|ValueMessage.Delta#Equal| a@@173 b@@110) (= a@@173 b@@110))) :qid |unknown.0:0| :skolemid |3092| :pattern ( (|ValueMessage.Delta#Equal| a@@173 b@@110)) )))
(assert (= (type Tclass.ValueMessage.__default) TyType))
(assert (= (Tag Tclass.ValueMessage.__default) Tagclass.ValueMessage.__default))
(assert (= (TagFamily Tclass.ValueMessage.__default) tytagFamily$_default))
(assert (forall (($o@@48 T@U) ) (!  (=> (= (type $o@@48) refType) (= ($Is $o@@48 Tclass.ValueMessage.__default)  (or (= $o@@48 null) (= (dtype $o@@48) Tclass.ValueMessage.__default)))) :qid |unknown.0:0| :skolemid |3093| :pattern ( ($Is $o@@48 Tclass.ValueMessage.__default)) )))
(assert (forall (($o@@49 T@U) ($h@@157 T@U) ) (!  (=> (and (= (type $o@@49) refType) (= (type $h@@157) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@49 Tclass.ValueMessage.__default $h@@157)  (or (= $o@@49 null) (U_2_bool (MapType1Select (MapType0Select $h@@157 $o@@49) alloc))))) :qid |unknown.0:0| :skolemid |3094| :pattern ( ($IsAlloc $o@@49 Tclass.ValueMessage.__default $h@@157)) )))
(assert (= (type ValueMessage.__default.NopDelta) DatatypeTypeType))
(assert  (=> true (=> true ($Is ValueMessage.__default.NopDelta Tclass.ValueMessage.Delta))))
(assert (= |ValueMessage.__default.NopDelta#requires| true))
(assert  (=> true (=> true (= ValueMessage.__default.NopDelta (Lit |#ValueMessage.Delta.NoDelta|)))))
(assert  (=> true (=> true (= ValueMessage.__default.NopDelta (Lit |#ValueMessage.Delta.NoDelta|)))))
(assert (= (type ValueMessage.__default.DefaultValue) (SeqType BoxType)))
(assert  (=> true (=> true ($Is ValueMessage.__default.DefaultValue Tclass.ValueType.Value))))
(assert (= |ValueMessage.__default.DefaultValue#requires| true))
(assert  (=> true (=> true (and |ValueType.__default.DefaultValue#canCall| (= ValueMessage.__default.DefaultValue (Lit ValueType.__default.DefaultValue))))))
(assert  (=> true (=> true (and |ValueType.__default.DefaultValue#canCall| (= ValueMessage.__default.DefaultValue (Lit ValueType.__default.DefaultValue))))))
(assert (forall ((arg0@@586 T@U) (arg1@@276 T@U) ) (! (= (type (ValueMessage.__default.CombineDeltas arg0@@586 arg1@@276)) DatatypeTypeType) :qid |funType:ValueMessage.__default.CombineDeltas| :pattern ( (ValueMessage.__default.CombineDeltas arg0@@586 arg1@@276)) )))
(assert  (=> true (forall ((|newdelta#0| T@U) (|olddelta#0| T@U) ) (!  (=> (and (and (= (type |newdelta#0|) DatatypeTypeType) (= (type |olddelta#0|) DatatypeTypeType)) (or (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#0| |olddelta#0|) (and ($Is |newdelta#0| Tclass.ValueMessage.Delta) ($Is |olddelta#0| Tclass.ValueMessage.Delta)))) (and (and (=> (|ValueMessage.Delta#Equal| |newdelta#0| ValueMessage.__default.NopDelta) (|ValueMessage.Delta#Equal| (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|) |olddelta#0|)) (=> (|ValueMessage.Delta#Equal| |olddelta#0| ValueMessage.__default.NopDelta) (|ValueMessage.Delta#Equal| (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|) |newdelta#0|))) ($Is (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|) Tclass.ValueMessage.Delta))) :qid |MessageidfyValueMessage.29:33| :skolemid |3095| :pattern ( (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|)) ))))
(assert (forall ((|newdelta#0@@0| T@U) (|olddelta#0@@0| T@U) ) (!  (=> (and (and (= (type |newdelta#0@@0|) DatatypeTypeType) (= (type |olddelta#0@@0|) DatatypeTypeType)) (and ($Is |newdelta#0@@0| Tclass.ValueMessage.Delta) ($Is |olddelta#0@@0| Tclass.ValueMessage.Delta))) (= (|ValueMessage.__default.CombineDeltas#requires| |newdelta#0@@0| |olddelta#0@@0|) true)) :qid |MessageidfyValueMessage.29:33| :skolemid |3096| :pattern ( (|ValueMessage.__default.CombineDeltas#requires| |newdelta#0@@0| |olddelta#0@@0|)) )))
(assert  (=> true (forall ((|newdelta#0@@1| T@U) (|olddelta#0@@1| T@U) ) (!  (=> (and (and (= (type |newdelta#0@@1|) DatatypeTypeType) (= (type |olddelta#0@@1|) DatatypeTypeType)) (or (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#0@@1| |olddelta#0@@1|) (and ($Is |newdelta#0@@1| Tclass.ValueMessage.Delta) ($Is |olddelta#0@@1| Tclass.ValueMessage.Delta)))) (= (ValueMessage.__default.CombineDeltas |newdelta#0@@1| |olddelta#0@@1|) (Lit |#ValueMessage.Delta.NoDelta|))) :qid |MessageidfyValueMessage.29:33| :skolemid |3097| :pattern ( (ValueMessage.__default.CombineDeltas |newdelta#0@@1| |olddelta#0@@1|)) ))))
(assert  (=> true (forall ((|newdelta#0@@2| T@U) (|olddelta#0@@2| T@U) ) (!  (=> (and (and (= (type |newdelta#0@@2|) DatatypeTypeType) (= (type |olddelta#0@@2|) DatatypeTypeType)) (or (|ValueMessage.__default.CombineDeltas#canCall| (Lit |newdelta#0@@2|) (Lit |olddelta#0@@2|)) (and ($Is |newdelta#0@@2| Tclass.ValueMessage.Delta) ($Is |olddelta#0@@2| Tclass.ValueMessage.Delta)))) (= (ValueMessage.__default.CombineDeltas (Lit |newdelta#0@@2|) (Lit |olddelta#0@@2|)) (Lit |#ValueMessage.Delta.NoDelta|))) :qid |MessageidfyValueMessage.29:33| :weight 3 :skolemid |3098| :pattern ( (ValueMessage.__default.CombineDeltas (Lit |newdelta#0@@2|) (Lit |olddelta#0@@2|))) ))))
(assert  (=> true (forall ((|delta#0@@0| T@U) (|value#0| T@U) ) (!  (=> (and (and (= (type |delta#0@@0|) DatatypeTypeType) (= (type |value#0|) (SeqType BoxType))) (or (|ValueMessage.__default.ApplyDelta#canCall| |delta#0@@0| |value#0|) (and ($Is |delta#0@@0| Tclass.ValueMessage.Delta) ($Is |value#0| Tclass.ValueType.Value)))) (and (=> (|ValueMessage.Delta#Equal| |delta#0@@0| ValueMessage.__default.NopDelta) (|Seq#Equal| (ValueMessage.__default.ApplyDelta |delta#0@@0| |value#0|) |value#0|)) ($Is (ValueMessage.__default.ApplyDelta |delta#0@@0| |value#0|) Tclass.ValueType.Value))) :qid |MessageidfyValueMessage.33:30| :skolemid |3099| :pattern ( (ValueMessage.__default.ApplyDelta |delta#0@@0| |value#0|)) ))))
(assert (forall ((|delta#0@@1| T@U) (|value#0@@0| T@U) ) (!  (=> (and (and (= (type |delta#0@@1|) DatatypeTypeType) (= (type |value#0@@0|) (SeqType BoxType))) (and ($Is |delta#0@@1| Tclass.ValueMessage.Delta) ($Is |value#0@@0| Tclass.ValueType.Value))) (= (|ValueMessage.__default.ApplyDelta#requires| |delta#0@@1| |value#0@@0|) true)) :qid |MessageidfyValueMessage.33:30| :skolemid |3100| :pattern ( (|ValueMessage.__default.ApplyDelta#requires| |delta#0@@1| |value#0@@0|)) )))
(assert  (=> true (forall ((|delta#0@@2| T@U) (|value#0@@1| T@U) ) (!  (=> (and (and (= (type |delta#0@@2|) DatatypeTypeType) (= (type |value#0@@1|) (SeqType BoxType))) (or (|ValueMessage.__default.ApplyDelta#canCall| |delta#0@@2| |value#0@@1|) (and ($Is |delta#0@@2| Tclass.ValueMessage.Delta) ($Is |value#0@@1| Tclass.ValueType.Value)))) (= (ValueMessage.__default.ApplyDelta |delta#0@@2| |value#0@@1|) |value#0@@1|)) :qid |MessageidfyValueMessage.33:30| :skolemid |3101| :pattern ( (ValueMessage.__default.ApplyDelta |delta#0@@2| |value#0@@1|)) ))))
(assert  (=> true (forall ((|delta#0@@3| T@U) (|value#0@@2| T@U) ) (!  (=> (and (and (= (type |delta#0@@3|) DatatypeTypeType) (= (type |value#0@@2|) (SeqType BoxType))) (or (|ValueMessage.__default.ApplyDelta#canCall| (Lit |delta#0@@3|) (Lit |value#0@@2|)) (and ($Is |delta#0@@3| Tclass.ValueMessage.Delta) ($Is |value#0@@2| Tclass.ValueType.Value)))) (= (ValueMessage.__default.ApplyDelta (Lit |delta#0@@3|) (Lit |value#0@@2|)) (Lit |value#0@@2|))) :qid |MessageidfyValueMessage.33:30| :weight 3 :skolemid |3102| :pattern ( (ValueMessage.__default.ApplyDelta (Lit |delta#0@@3|) (Lit |value#0@@2|))) ))))
(assert (= (type Tclass.ValueMessage.Message) TyType))
(assert (= (Tag Tclass.ValueMessage.Message) Tagclass.ValueMessage.Message))
(assert (= (TagFamily Tclass.ValueMessage.Message) tytagFamily$Message))
(assert (forall ((bx@@183 T@U) ) (!  (=> (and (= (type bx@@183) BoxType) ($IsBox bx@@183 Tclass.ValueMessage.Message)) (and (= ($Box ($Unbox DatatypeTypeType bx@@183)) bx@@183) ($Is ($Unbox DatatypeTypeType bx@@183) Tclass.ValueMessage.Message))) :qid |unknown.0:0| :skolemid |3103| :pattern ( ($IsBox bx@@183 Tclass.ValueMessage.Message)) )))
(assert (forall ((arg0@@587 T@U) ) (! (= (type (ValueMessage.__default.bytestring__to__Message arg0@@587)) DatatypeTypeType) :qid |funType:ValueMessage.__default.bytestring__to__Message| :pattern ( (ValueMessage.__default.bytestring__to__Message arg0@@587)) )))
(assert  (=> true (forall ((|s#0@@154| T@U) ) (!  (=> (and (= (type |s#0@@154|) (SeqType BoxType)) (or (|ValueMessage.__default.bytestring__to__Message#canCall| |s#0@@154|) (and ($Is |s#0@@154| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| |s#0@@154|) 4294967296)))) ($Is (ValueMessage.__default.bytestring__to__Message |s#0@@154|) Tclass.ValueMessage.Message)) :qid |Messageidfy.105:41| :skolemid |3104| :pattern ( (ValueMessage.__default.bytestring__to__Message |s#0@@154|)) ))))
(assert (forall ((|s#0@@155| T@U) ) (!  (=> (and (= (type |s#0@@155|) (SeqType BoxType)) ($Is |s#0@@155| (TSeq Tclass.NativeTypes.byte))) (= (|ValueMessage.__default.bytestring__to__Message#requires| |s#0@@155|) (< (|Seq#Length| |s#0@@155|) 4294967296))) :qid |Messageidfy.105:41| :skolemid |3105| :pattern ( (|ValueMessage.__default.bytestring__to__Message#requires| |s#0@@155|)) )))
(assert (forall ((arg0@@588 T@U) ) (! (= (type (|#ValueMessage.Message.Define| arg0@@588)) DatatypeTypeType) :qid |funType:#ValueMessage.Message.Define| :pattern ( (|#ValueMessage.Message.Define| arg0@@588)) )))
(assert  (=> true (forall ((|s#0@@156| T@U) ) (!  (=> (and (= (type |s#0@@156|) (SeqType BoxType)) (or (|ValueMessage.__default.bytestring__to__Message#canCall| |s#0@@156|) (and ($Is |s#0@@156| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| |s#0@@156|) 4294967296)))) (and (and |ValueType.__default.MaxLen#canCall| (=> (< (LitInt ValueType.__default.MaxLen) (|Seq#Length| |s#0@@156|)) |ValueType.__default.DefaultValue#canCall|)) (= (ValueMessage.__default.bytestring__to__Message |s#0@@156|) (ite (<= (|Seq#Length| |s#0@@156|) (LitInt ValueType.__default.MaxLen)) (|#ValueMessage.Message.Define| |s#0@@156|) (|#ValueMessage.Message.Define| (Lit ValueType.__default.DefaultValue)))))) :qid |Messageidfy.105:41| :skolemid |3106| :pattern ( (ValueMessage.__default.bytestring__to__Message |s#0@@156|)) ))))
(assert  (=> true (forall ((|s#0@@157| T@U) ) (!  (=> (and (= (type |s#0@@157|) (SeqType BoxType)) (or (|ValueMessage.__default.bytestring__to__Message#canCall| (Lit |s#0@@157|)) (and ($Is |s#0@@157| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| (Lit |s#0@@157|)) 4294967296)))) (and (and |ValueType.__default.MaxLen#canCall| (=> (< (LitInt ValueType.__default.MaxLen) (|Seq#Length| (Lit |s#0@@157|))) |ValueType.__default.DefaultValue#canCall|)) (= (ValueMessage.__default.bytestring__to__Message (Lit |s#0@@157|)) (ite (<= (|Seq#Length| (Lit |s#0@@157|)) (LitInt ValueType.__default.MaxLen)) (|#ValueMessage.Message.Define| (Lit |s#0@@157|)) (|#ValueMessage.Message.Define| (Lit ValueType.__default.DefaultValue)))))) :qid |Messageidfy.105:41| :weight 3 :skolemid |3107| :pattern ( (ValueMessage.__default.bytestring__to__Message (Lit |s#0@@157|))) ))))
(assert  (=> true (forall ((|msg#0| T@U) ) (!  (=> (and (= (type |msg#0|) DatatypeTypeType) (or (|ValueMessage.__default.EncodableMessage#canCall| |msg#0|) ($Is |msg#0| Tclass.ValueMessage.Message))) true) :qid |Messageidfy.118:30| :skolemid |3108| :pattern ( (ValueMessage.__default.EncodableMessage |msg#0|)) ))))
(assert (forall ((|msg#0@@0| T@U) ) (!  (=> (and (= (type |msg#0@@0|) DatatypeTypeType) ($Is |msg#0@@0| Tclass.ValueMessage.Message)) (= (|ValueMessage.__default.EncodableMessage#requires| |msg#0@@0|) true)) :qid |Messageidfy.118:30| :skolemid |3109| :pattern ( (|ValueMessage.__default.EncodableMessage#requires| |msg#0@@0|)) )))
(assert  (=> true (forall ((|msg#0@@1| T@U) ) (!  (=> (and (= (type |msg#0@@1|) DatatypeTypeType) (or (|ValueMessage.__default.EncodableMessage#canCall| |msg#0@@1|) ($Is |msg#0@@1| Tclass.ValueMessage.Message))) (= (ValueMessage.__default.EncodableMessage |msg#0@@1|)  (and true (ValueMessage.Message.Define_q |msg#0@@1|)))) :qid |Messageidfy.118:30| :skolemid |3110| :pattern ( (ValueMessage.__default.EncodableMessage |msg#0@@1|)) ))))
(assert  (=> true (forall ((|msg#0@@2| T@U) ) (!  (=> (and (= (type |msg#0@@2|) DatatypeTypeType) (or (|ValueMessage.__default.EncodableMessage#canCall| (Lit |msg#0@@2|)) ($Is |msg#0@@2| Tclass.ValueMessage.Message))) (= (ValueMessage.__default.EncodableMessage (Lit |msg#0@@2|)) (U_2_bool (Lit (bool_2_U  (and true (ValueMessage.Message.Define_q (Lit |msg#0@@2|)))))))) :qid |Messageidfy.118:30| :weight 3 :skolemid |3111| :pattern ( (ValueMessage.__default.EncodableMessage (Lit |msg#0@@2|))) ))))
(assert  (=> true (forall ((|msgs#0| T@U) ) (!  (=> (and (= (type |msgs#0|) (SeqType BoxType)) (or (|ValueMessage.__default.EncodableMessageSeq#canCall| |msgs#0|) ($Is |msgs#0| (TSeq Tclass.ValueMessage.Message)))) true) :qid |Messageidfy.123:33| :skolemid |3112| :pattern ( (ValueMessage.__default.EncodableMessageSeq |msgs#0|)) ))))
(assert (forall ((|msgs#0@@0| T@U) ) (!  (=> (and (= (type |msgs#0@@0|) (SeqType BoxType)) ($Is |msgs#0@@0| (TSeq Tclass.ValueMessage.Message))) (= (|ValueMessage.__default.EncodableMessageSeq#requires| |msgs#0@@0|) true)) :qid |Messageidfy.123:33| :skolemid |3113| :pattern ( (|ValueMessage.__default.EncodableMessageSeq#requires| |msgs#0@@0|)) )))
(assert  (=> true (forall ((|msgs#0@@1| T@U) ) (!  (=> (and (= (type |msgs#0@@1|) (SeqType BoxType)) (or (|ValueMessage.__default.EncodableMessageSeq#canCall| |msgs#0@@1|) ($Is |msgs#0@@1| (TSeq Tclass.ValueMessage.Message)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|i#0@@88| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@88|) (< |i#0@@88| (|Seq#Length| |msgs#0@@1|))) (|ValueMessage.__default.EncodableMessage#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@1| |i#0@@88|)))) :qid |Messageidfy.125:16| :skolemid |3115| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@1| |i#0@@88|))) ))) (= (ValueMessage.__default.EncodableMessageSeq |msgs#0@@1|)  (and true (forall ((|i#0@@89| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@89|) (< |i#0@@89| (|Seq#Length| |msgs#0@@1|))) (ValueMessage.__default.EncodableMessage ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@1| |i#0@@89|)))) :qid |Messageidfy.125:16| :skolemid |3114| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@1| |i#0@@89|))) )))))) :qid |Messageidfy.123:33| :skolemid |3116| :pattern ( (ValueMessage.__default.EncodableMessageSeq |msgs#0@@1|)) ))))
(assert  (=> true (forall ((|msgs#0@@2| T@U) ) (!  (=> (and (= (type |msgs#0@@2|) (SeqType BoxType)) (or (|ValueMessage.__default.EncodableMessageSeq#canCall| (Lit |msgs#0@@2|)) ($Is |msgs#0@@2| (TSeq Tclass.ValueMessage.Message)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|i#1@@17| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@17|) (< |i#1@@17| (|Seq#Length| (Lit |msgs#0@@2|)))) (|ValueMessage.__default.EncodableMessage#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |msgs#0@@2|) |i#1@@17|)))) :qid |Messageidfy.125:16| :skolemid |3118| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@2| |i#1@@17|))) ))) (= (ValueMessage.__default.EncodableMessageSeq (Lit |msgs#0@@2|))  (and true (forall ((|i#1@@18| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@18|) (< |i#1@@18| (|Seq#Length| (Lit |msgs#0@@2|)))) (ValueMessage.__default.EncodableMessage ($Unbox DatatypeTypeType (|Seq#Index| (Lit |msgs#0@@2|) |i#1@@18|)))) :qid |Messageidfy.125:16| :skolemid |3117| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@2| |i#1@@18|))) )))))) :qid |Messageidfy.123:33| :weight 3 :skolemid |3119| :pattern ( (ValueMessage.__default.EncodableMessageSeq (Lit |msgs#0@@2|))) ))))
(assert (forall ((arg0@@589 T@U) ) (! (= (type (ValueMessage.__default.Message__to__bytestring arg0@@589)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.Message__to__bytestring| :pattern ( (ValueMessage.__default.Message__to__bytestring arg0@@589)) )))
(assert  (=> true (forall ((|msg#0@@3| T@U) ) (!  (=> (and (= (type |msg#0@@3|) DatatypeTypeType) (or (|ValueMessage.__default.Message__to__bytestring#canCall| |msg#0@@3|) (and ($Is |msg#0@@3| Tclass.ValueMessage.Message) (ValueMessage.Message.Define_q |msg#0@@3|)))) ($Is (ValueMessage.__default.Message__to__bytestring |msg#0@@3|) (TSeq Tclass.NativeTypes.byte))) :qid |Messageidfy.128:41| :skolemid |3120| :pattern ( (ValueMessage.__default.Message__to__bytestring |msg#0@@3|)) ))))
(assert (forall ((|msg#0@@4| T@U) ) (!  (=> (and (= (type |msg#0@@4|) DatatypeTypeType) ($Is |msg#0@@4| Tclass.ValueMessage.Message)) (= (|ValueMessage.__default.Message__to__bytestring#requires| |msg#0@@4|) (ValueMessage.Message.Define_q |msg#0@@4|))) :qid |Messageidfy.128:41| :skolemid |3121| :pattern ( (|ValueMessage.__default.Message__to__bytestring#requires| |msg#0@@4|)) )))
(assert (forall ((arg0@@590 T@U) ) (! (= (type (ValueMessage.Message.value arg0@@590)) (SeqType BoxType)) :qid |funType:ValueMessage.Message.value| :pattern ( (ValueMessage.Message.value arg0@@590)) )))
(assert  (=> true (forall ((|msg#0@@5| T@U) ) (!  (=> (and (= (type |msg#0@@5|) DatatypeTypeType) (or (|ValueMessage.__default.Message__to__bytestring#canCall| |msg#0@@5|) (and ($Is |msg#0@@5| Tclass.ValueMessage.Message) (ValueMessage.Message.Define_q |msg#0@@5|)))) (= (ValueMessage.__default.Message__to__bytestring |msg#0@@5|) (ValueMessage.Message.value |msg#0@@5|))) :qid |Messageidfy.128:41| :skolemid |3122| :pattern ( (ValueMessage.__default.Message__to__bytestring |msg#0@@5|)) ))))
(assert  (=> true (forall ((|msg#0@@6| T@U) ) (!  (=> (and (= (type |msg#0@@6|) DatatypeTypeType) (or (|ValueMessage.__default.Message__to__bytestring#canCall| (Lit |msg#0@@6|)) (and ($Is |msg#0@@6| Tclass.ValueMessage.Message) (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit |msg#0@@6|)))))))) (= (ValueMessage.__default.Message__to__bytestring (Lit |msg#0@@6|)) (Lit (ValueMessage.Message.value (Lit |msg#0@@6|))))) :qid |Messageidfy.128:41| :weight 3 :skolemid |3123| :pattern ( (ValueMessage.__default.Message__to__bytestring (Lit |msg#0@@6|))) ))))
(assert (forall ((arg0@@591 T@U) (arg1@@277 T@U) ) (! (= (type (ValueMessage.__default.messageSeq__to__bytestringSeq arg0@@591 arg1@@277)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.messageSeq__to__bytestringSeq| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq arg0@@591 arg1@@277)) )))
(assert (forall (($ly@@289 T@U) (|msgs#0@@3| T@U) ) (!  (=> (and (= (type $ly@@289) LayerTypeType) (= (type |msgs#0@@3|) (SeqType BoxType))) (= (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@289) |msgs#0@@3|) (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@289 |msgs#0@@3|))) :qid |Messageidfy.134:12| :skolemid |3124| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@289) |msgs#0@@3|)) )))
(assert (forall (($ly@@290 T@U) (|msgs#0@@4| T@U) ) (!  (=> (and (= (type $ly@@290) LayerTypeType) (= (type |msgs#0@@4|) (SeqType BoxType))) (= (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@290 |msgs#0@@4|) (ValueMessage.__default.messageSeq__to__bytestringSeq $LZ |msgs#0@@4|))) :qid |Messageidfy.134:12| :skolemid |3125| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq (AsFuelBottom $ly@@290) |msgs#0@@4|)) )))
(assert  (=> true (forall (($ly@@291 T@U) (|msgs#0@@5| T@U) ) (!  (=> (and (and (= (type $ly@@291) LayerTypeType) (= (type |msgs#0@@5|) (SeqType BoxType))) (or (|ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| |msgs#0@@5|) (and ($Is |msgs#0@@5| (TSeq Tclass.ValueMessage.Message)) (ValueMessage.__default.EncodableMessageSeq |msgs#0@@5|)))) (and (and (= (|Seq#Length| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@291 |msgs#0@@5|)) (|Seq#Length| |msgs#0@@5|)) (forall ((|i#0@@90| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@90|) (< |i#0@@90| (|Seq#Length| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@291 |msgs#0@@5|)))) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@291 |msgs#0@@5|) |i#0@@90|)) (ValueMessage.__default.Message__to__bytestring ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@5| |i#0@@90|))))) :qid |Messageidfy.137:20| :skolemid |3126| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@5| |i#0@@90|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@291 |msgs#0@@5|) |i#0@@90|))) ))) ($Is (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@291 |msgs#0@@5|) (TSeq (TSeq Tclass.NativeTypes.byte))))) :qid |Messageidfy.134:12| :skolemid |3127| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@291 |msgs#0@@5|)) ))))
(assert (forall (($ly@@292 T@U) (|msgs#0@@6| T@U) ) (!  (=> (and (and (= (type $ly@@292) LayerTypeType) (= (type |msgs#0@@6|) (SeqType BoxType))) ($Is |msgs#0@@6| (TSeq Tclass.ValueMessage.Message))) (= (|ValueMessage.__default.messageSeq__to__bytestringSeq#requires| $ly@@292 |msgs#0@@6|) (ValueMessage.__default.EncodableMessageSeq |msgs#0@@6|))) :qid |Messageidfy.134:12| :skolemid |3128| :pattern ( (|ValueMessage.__default.messageSeq__to__bytestringSeq#requires| $ly@@292 |msgs#0@@6|)) )))
(assert  (=> true (forall (($ly@@293 T@U) (|msgs#0@@7| T@U) ) (!  (=> (and (and (= (type $ly@@293) LayerTypeType) (= (type |msgs#0@@7|) (SeqType BoxType))) (or (|ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| |msgs#0@@7|) (and ($Is |msgs#0@@7| (TSeq Tclass.ValueMessage.Message)) (ValueMessage.__default.EncodableMessageSeq |msgs#0@@7|)))) (and (=> (not (= (|Seq#Length| |msgs#0@@7|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.ValueMessage.Message |msgs#0@@7|) (|ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| (Sequences.__default.DropLast Tclass.ValueMessage.Message |msgs#0@@7|))) (and (|Sequences.__default.Last#canCall| Tclass.ValueMessage.Message |msgs#0@@7|) (|ValueMessage.__default.Message__to__bytestring#canCall| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.ValueMessage.Message |msgs#0@@7|)))))) (= (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@293) |msgs#0@@7|) (ite (= (|Seq#Length| |msgs#0@@7|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@293 (Sequences.__default.DropLast Tclass.ValueMessage.Message |msgs#0@@7|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (ValueMessage.__default.Message__to__bytestring ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.ValueMessage.Message |msgs#0@@7|)))))))))) :qid |Messageidfy.134:12| :skolemid |3129| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@293) |msgs#0@@7|)) ))))
(assert  (=> true (forall (($ly@@294 T@U) (|msgs#0@@8| T@U) ) (!  (=> (and (and (= (type $ly@@294) LayerTypeType) (= (type |msgs#0@@8|) (SeqType BoxType))) (or (|ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| (Lit |msgs#0@@8|)) (and ($Is |msgs#0@@8| (TSeq Tclass.ValueMessage.Message)) (U_2_bool (Lit (bool_2_U (ValueMessage.__default.EncodableMessageSeq (Lit |msgs#0@@8|)))))))) (and (=> (not (= (|Seq#Length| (Lit |msgs#0@@8|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.ValueMessage.Message (Lit |msgs#0@@8|)) (|ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| (Lit (Sequences.__default.DropLast Tclass.ValueMessage.Message (Lit |msgs#0@@8|))))) (and (|Sequences.__default.Last#canCall| Tclass.ValueMessage.Message (Lit |msgs#0@@8|)) (|ValueMessage.__default.Message__to__bytestring#canCall| (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.ValueMessage.Message (Lit |msgs#0@@8|)))))))) (= (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@294) (Lit |msgs#0@@8|)) (ite (= (|Seq#Length| (Lit |msgs#0@@8|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@294) (Lit (Sequences.__default.DropLast Tclass.ValueMessage.Message (Lit |msgs#0@@8|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (ValueMessage.__default.Message__to__bytestring (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.ValueMessage.Message (Lit |msgs#0@@8|))))))))))))) :qid |Messageidfy.134:12| :weight 3 :skolemid |3130| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@294) (Lit |msgs#0@@8|))) ))))
(assert (forall ((arg0@@592 T@U) (arg1@@278 T@U) ) (! (= (type (ValueMessage.__default.bytestringSeq__to__MessageSeq arg0@@592 arg1@@278)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.bytestringSeq__to__MessageSeq| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq arg0@@592 arg1@@278)) )))
(assert (forall (($ly@@295 T@U) (|strings#0| T@U) ) (!  (=> (and (= (type $ly@@295) LayerTypeType) (= (type |strings#0|) (SeqType BoxType))) (= (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@295) |strings#0|) (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@295 |strings#0|))) :qid |Messageidfy.145:12| :skolemid |3131| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@295) |strings#0|)) )))
(assert (forall (($ly@@296 T@U) (|strings#0@@0| T@U) ) (!  (=> (and (= (type $ly@@296) LayerTypeType) (= (type |strings#0@@0|) (SeqType BoxType))) (= (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@296 |strings#0@@0|) (ValueMessage.__default.bytestringSeq__to__MessageSeq $LZ |strings#0@@0|))) :qid |Messageidfy.145:12| :skolemid |3132| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq (AsFuelBottom $ly@@296) |strings#0@@0|)) )))
(assert  (=> true (forall (($ly@@297 T@U) (|strings#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@297) LayerTypeType) (= (type |strings#0@@1|) (SeqType BoxType))) (or (|ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| |strings#0@@1|) (and ($Is |strings#0@@1| (TSeq (TSeq Tclass.NativeTypes.byte))) (forall ((|i#0@@91| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@91|) (< |i#0@@91| (|Seq#Length| |strings#0@@1|))) (< (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#0@@91|))) 4294967296)) :qid |Messageidfy.146:21| :skolemid |3133| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#0@@91|))) ))))) (and (and (= (|Seq#Length| (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@297 |strings#0@@1|)) (|Seq#Length| |strings#0@@1|)) (forall ((|i#1@@19| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@19|) (< |i#1@@19| (|Seq#Length| |strings#0@@1|))) (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@297 |strings#0@@1|) |i#1@@19|)) (ValueMessage.__default.bytestring__to__Message ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#1@@19|))))) :qid |Messageidfy.148:20| :skolemid |3134| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#1@@19|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@297 |strings#0@@1|) |i#1@@19|))) ))) ($Is (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@297 |strings#0@@1|) (TSeq Tclass.ValueMessage.Message)))) :qid |Messageidfy.145:12| :skolemid |3135| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@297 |strings#0@@1|)) ))))
(assert (forall (($ly@@298 T@U) (|strings#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@298) LayerTypeType) (= (type |strings#0@@2|) (SeqType BoxType))) ($Is |strings#0@@2| (TSeq (TSeq Tclass.NativeTypes.byte)))) (= (|ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| $ly@@298 |strings#0@@2|) (forall ((|i#2@@8| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@8|) (< |i#2@@8| (|Seq#Length| |strings#0@@2|))) (< (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@2| |i#2@@8|))) 4294967296)) :qid |Messageidfy.146:21| :skolemid |3136| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@2| |i#2@@8|))) )))) :qid |Messageidfy.145:12| :skolemid |3137| :pattern ( (|ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| $ly@@298 |strings#0@@2|)) )))
(assert  (=> true (forall (($ly@@299 T@U) (|strings#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@299) LayerTypeType) (= (type |strings#0@@3|) (SeqType BoxType))) (or (|ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| |strings#0@@3|) (and ($Is |strings#0@@3| (TSeq (TSeq Tclass.NativeTypes.byte))) (forall ((|i#2@@9| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@9|) (< |i#2@@9| (|Seq#Length| |strings#0@@3|))) (< (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@3| |i#2@@9|))) 4294967296)) :qid |Messageidfy.146:21| :skolemid |3136| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@3| |i#2@@9|))) ))))) (and (=> (not (= (|Seq#Length| |strings#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) |strings#0@@3|) (|ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |strings#0@@3|))) (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) |strings#0@@3|) (|ValueMessage.__default.bytestring__to__Message#canCall| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |strings#0@@3|)))))) (= (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@299) |strings#0@@3|) (ite (= (|Seq#Length| |strings#0@@3|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@299 (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |strings#0@@3|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (ValueMessage.__default.bytestring__to__Message ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |strings#0@@3|)))))))))) :qid |Messageidfy.145:12| :skolemid |3138| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@299) |strings#0@@3|)) ))))
(assert  (=> true (forall (($ly@@300 T@U) (|strings#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@300) LayerTypeType) (= (type |strings#0@@4|) (SeqType BoxType))) (or (|ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| (Lit |strings#0@@4|)) (and ($Is |strings#0@@4| (TSeq (TSeq Tclass.NativeTypes.byte))) (forall ((|i#3@@6| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@6|) (< |i#3@@6| (|Seq#Length| (Lit |strings#0@@4|)))) (< (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |strings#0@@4|) |i#3@@6|))) 4294967296)) :qid |Messageidfy.146:21| :skolemid |3139| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@4| |i#3@@6|))) ))))) (and (=> (not (= (|Seq#Length| (Lit |strings#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |strings#0@@4|)) (|ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |strings#0@@4|))))) (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |strings#0@@4|)) (|ValueMessage.__default.bytestring__to__Message#canCall| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |strings#0@@4|)))))))) (= (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@300) (Lit |strings#0@@4|)) (ite (= (|Seq#Length| (Lit |strings#0@@4|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@300) (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |strings#0@@4|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (ValueMessage.__default.bytestring__to__Message (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |strings#0@@4|))))))))))))) :qid |Messageidfy.145:12| :weight 3 :skolemid |3140| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@300) (Lit |strings#0@@4|))) ))))
(assert (forall ((arg0@@593 T@U) (arg1@@279 T@U) ) (! (= (type (ValueMessage.__default.Merge arg0@@593 arg1@@279)) DatatypeTypeType) :qid |funType:ValueMessage.__default.Merge| :pattern ( (ValueMessage.__default.Merge arg0@@593 arg1@@279)) )))
(assert  (=> true (forall ((|newmessage#0| T@U) (|oldmessage#0| T@U) ) (!  (=> (and (and (= (type |newmessage#0|) DatatypeTypeType) (= (type |oldmessage#0|) DatatypeTypeType)) (or (|ValueMessage.__default.Merge#canCall| |newmessage#0| |oldmessage#0|) (and ($Is |newmessage#0| Tclass.ValueMessage.Message) ($Is |oldmessage#0| Tclass.ValueMessage.Message)))) ($Is (ValueMessage.__default.Merge |newmessage#0| |oldmessage#0|) Tclass.ValueMessage.Message)) :qid |MessageidfyValueMessage.36:25| :skolemid |3155| :pattern ( (ValueMessage.__default.Merge |newmessage#0| |oldmessage#0|)) ))))
(assert (forall ((|newmessage#0@@0| T@U) (|oldmessage#0@@0| T@U) ) (!  (=> (and (and (= (type |newmessage#0@@0|) DatatypeTypeType) (= (type |oldmessage#0@@0|) DatatypeTypeType)) (and ($Is |newmessage#0@@0| Tclass.ValueMessage.Message) ($Is |oldmessage#0@@0| Tclass.ValueMessage.Message))) (= (|ValueMessage.__default.Merge#requires| |newmessage#0@@0| |oldmessage#0@@0|) true)) :qid |MessageidfyValueMessage.36:25| :skolemid |3156| :pattern ( (|ValueMessage.__default.Merge#requires| |newmessage#0@@0| |oldmessage#0@@0|)) )))
(assert  (and (forall ((arg0@@594 T@U) ) (! (= (type (ValueMessage.Message.delta arg0@@594)) DatatypeTypeType) :qid |funType:ValueMessage.Message.delta| :pattern ( (ValueMessage.Message.delta arg0@@594)) )) (forall ((arg0@@595 T@U) ) (! (= (type (|#ValueMessage.Message.Update| arg0@@595)) DatatypeTypeType) :qid |funType:#ValueMessage.Message.Update| :pattern ( (|#ValueMessage.Message.Update| arg0@@595)) ))))
(assert  (=> true (forall ((|newmessage#0@@1| T@U) (|oldmessage#0@@1| T@U) ) (!  (=> (and (and (= (type |newmessage#0@@1|) DatatypeTypeType) (= (type |oldmessage#0@@1|) DatatypeTypeType)) (or (|ValueMessage.__default.Merge#canCall| |newmessage#0@@1| |oldmessage#0@@1|) (and ($Is |newmessage#0@@1| Tclass.ValueMessage.Message) ($Is |oldmessage#0@@1| Tclass.ValueMessage.Message)))) (and (and (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (=> (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (=> (not (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|)))))) (and (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (=> (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|value#1| (ValueMessage.Message.value ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|delta#1@@0| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|ValueMessage.__default.ApplyDelta#canCall| |delta#1@@0| |value#1|))))))) (=> (not (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|)))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|olddelta#1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|newdelta#1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#1| |olddelta#1|))))))))) (= (ValueMessage.__default.Merge |newmessage#0@@1| |oldmessage#0@@1|) (ite (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (let ((|newvalue#0| (ValueMessage.Message.value ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|#ValueMessage.Message.Define| |newvalue#0|)) (ite (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (let ((|value#0@@3| (ValueMessage.Message.value ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (let ((|delta#0@@4| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|#ValueMessage.Message.Define| (ValueMessage.__default.ApplyDelta |delta#0@@4| |value#0@@3|)))) (let ((|olddelta#0@@3| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (let ((|newdelta#0@@3| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|#ValueMessage.Message.Update| (ValueMessage.__default.CombineDeltas |newdelta#0@@3| |olddelta#0@@3|))))))))) :qid |MessageidfyValueMessage.36:25| :skolemid |3157| :pattern ( (ValueMessage.__default.Merge |newmessage#0@@1| |oldmessage#0@@1|)) ))))
(assert  (=> true (forall ((|newmessage#0@@2| T@U) (|oldmessage#0@@2| T@U) ) (!  (=> (and (and (= (type |newmessage#0@@2|) DatatypeTypeType) (= (type |oldmessage#0@@2|) DatatypeTypeType)) (or (|ValueMessage.__default.Merge#canCall| (Lit |newmessage#0@@2|) (Lit |oldmessage#0@@2|)) (and ($Is |newmessage#0@@2| Tclass.ValueMessage.Message) ($Is |oldmessage#0@@2| Tclass.ValueMessage.Message)))) (and (and (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))) (=> (not (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))))))) (and (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|value#3| (Lit (ValueMessage.Message.value (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|delta#3@@0| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (|ValueMessage.__default.ApplyDelta#canCall| |delta#3@@0| |value#3|))))))) (=> (not (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|olddelta#3| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|newdelta#3| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#3| |olddelta#3|))))))))) (= (ValueMessage.__default.Merge (Lit |newmessage#0@@2|) (Lit |oldmessage#0@@2|)) (ite (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))) (let ((|newvalue#2| (Lit (ValueMessage.Message.value (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (Lit (|#ValueMessage.Message.Define| |newvalue#2|))) (ite (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))) (let ((|value#2| (Lit (ValueMessage.Message.value (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (let ((|delta#2@@0| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (Lit (|#ValueMessage.Message.Define| (Lit (ValueMessage.__default.ApplyDelta |delta#2@@0| |value#2|)))))) (let ((|olddelta#2| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (let ((|newdelta#2| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (Lit (|#ValueMessage.Message.Update| (Lit (ValueMessage.__default.CombineDeltas |newdelta#2| |olddelta#2|))))))))))) :qid |MessageidfyValueMessage.36:25| :weight 3 :skolemid |3158| :pattern ( (ValueMessage.__default.Merge (Lit |newmessage#0@@2|) (Lit |oldmessage#0@@2|))) ))))
(assert (= (type ValueMessage.__default.IdentityMessage) DatatypeTypeType))
(assert  (=> true (=> true ($Is ValueMessage.__default.IdentityMessage Tclass.ValueMessage.Message))))
(assert (= |ValueMessage.__default.IdentityMessage#requires| true))
(assert  (=> true (=> true (and |ValueMessage.__default.NopDelta#canCall| (= ValueMessage.__default.IdentityMessage (Lit (|#ValueMessage.Message.Update| (Lit ValueMessage.__default.NopDelta))))))))
(assert  (=> true (=> true (and |ValueMessage.__default.NopDelta#canCall| (= ValueMessage.__default.IdentityMessage (Lit (|#ValueMessage.Message.Update| (Lit ValueMessage.__default.NopDelta))))))))
(assert (= (type ValueMessage.__default.DefineDefault) DatatypeTypeType))
(assert  (=> true (=> true ($Is ValueMessage.__default.DefineDefault Tclass.ValueMessage.Message))))
(assert (= |ValueMessage.__default.DefineDefault#requires| true))
(assert  (=> true (=> true (and |ValueMessage.__default.DefaultValue#canCall| (= ValueMessage.__default.DefineDefault (Lit (|#ValueMessage.Message.Define| (Lit ValueMessage.__default.DefaultValue))))))))
(assert  (=> true (=> true (and |ValueMessage.__default.DefaultValue#canCall| (= ValueMessage.__default.DefineDefault (Lit (|#ValueMessage.Message.Define| (Lit ValueMessage.__default.DefaultValue))))))))
(assert (forall ((|a#0#0#0@@3| T@U) ) (!  (=> (= (type |a#0#0#0@@3|) (SeqType BoxType)) (= (DatatypeCtorId (|#ValueMessage.Message.Define| |a#0#0#0@@3|)) |##ValueMessage.Message.Define|)) :qid |MessageidfyValueMessage.26:14| :skolemid |3159| :pattern ( (|#ValueMessage.Message.Define| |a#0#0#0@@3|)) )))
(assert (forall ((d@@147 T@U) ) (!  (=> (= (type d@@147) DatatypeTypeType) (= (ValueMessage.Message.Define_q d@@147) (= (DatatypeCtorId d@@147) |##ValueMessage.Message.Define|))) :qid |unknown.0:0| :skolemid |3160| :pattern ( (ValueMessage.Message.Define_q d@@147)) )))
(assert (forall ((d@@148 T@U) ) (!  (=> (and (= (type d@@148) DatatypeTypeType) (ValueMessage.Message.Define_q d@@148)) (exists ((|a#1#0#0@@3| T@U) ) (!  (and (= (type |a#1#0#0@@3|) (SeqType BoxType)) (= d@@148 (|#ValueMessage.Message.Define| |a#1#0#0@@3|))) :qid |MessageidfyValueMessage.26:14| :skolemid |3161| :no-pattern (type |a#1#0#0@@3|) :no-pattern (U_2_int |a#1#0#0@@3|) :no-pattern (U_2_bool |a#1#0#0@@3|) ))) :qid |unknown.0:0| :skolemid |3162| :pattern ( (ValueMessage.Message.Define_q d@@148)) )))
(assert (forall ((|a#2#0#0@@3| T@U) ) (!  (=> (= (type |a#2#0#0@@3|) (SeqType BoxType)) (= ($Is (|#ValueMessage.Message.Define| |a#2#0#0@@3|) Tclass.ValueMessage.Message) ($Is |a#2#0#0@@3| Tclass.ValueType.Value))) :qid |MessageidfyValueMessage.26:14| :skolemid |3163| :pattern ( ($Is (|#ValueMessage.Message.Define| |a#2#0#0@@3|) Tclass.ValueMessage.Message)) )))
(assert (forall ((|a#3#0#0@@3| T@U) ($h@@158 T@U) ) (!  (=> (and (and (= (type |a#3#0#0@@3|) (SeqType BoxType)) (= (type $h@@158) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@158)) (= ($IsAlloc (|#ValueMessage.Message.Define| |a#3#0#0@@3|) Tclass.ValueMessage.Message $h@@158) ($IsAlloc |a#3#0#0@@3| Tclass.ValueType.Value $h@@158))) :qid |MessageidfyValueMessage.26:14| :skolemid |3164| :pattern ( ($IsAlloc (|#ValueMessage.Message.Define| |a#3#0#0@@3|) Tclass.ValueMessage.Message $h@@158)) )))
(assert (forall ((d@@149 T@U) ($h@@159 T@U) ) (!  (=> (and (and (= (type d@@149) DatatypeTypeType) (= (type $h@@159) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@159) (and (ValueMessage.Message.Define_q d@@149) ($IsAlloc d@@149 Tclass.ValueMessage.Message $h@@159)))) ($IsAlloc (ValueMessage.Message.value d@@149) Tclass.ValueType.Value $h@@159)) :qid |unknown.0:0| :skolemid |3165| :pattern ( ($IsAlloc (ValueMessage.Message.value d@@149) Tclass.ValueType.Value $h@@159)) )))
(assert (forall ((|a#4#0#0@@3| T@U) ) (!  (=> (= (type |a#4#0#0@@3|) (SeqType BoxType)) (= (|#ValueMessage.Message.Define| (Lit |a#4#0#0@@3|)) (Lit (|#ValueMessage.Message.Define| |a#4#0#0@@3|)))) :qid |MessageidfyValueMessage.26:14| :skolemid |3166| :pattern ( (|#ValueMessage.Message.Define| (Lit |a#4#0#0@@3|))) )))
(assert (forall ((|a#5#0#0@@4| T@U) ) (!  (=> (= (type |a#5#0#0@@4|) (SeqType BoxType)) (= (ValueMessage.Message.value (|#ValueMessage.Message.Define| |a#5#0#0@@4|)) |a#5#0#0@@4|)) :qid |MessageidfyValueMessage.26:14| :skolemid |3167| :pattern ( (|#ValueMessage.Message.Define| |a#5#0#0@@4|)) )))
(assert (forall ((|a#6#0#0@@4| T@U) ) (!  (=> (= (type |a#6#0#0@@4|) DatatypeTypeType) (= (DatatypeCtorId (|#ValueMessage.Message.Update| |a#6#0#0@@4|)) |##ValueMessage.Message.Update|)) :qid |MessageidfyValueMessage.27:14| :skolemid |3168| :pattern ( (|#ValueMessage.Message.Update| |a#6#0#0@@4|)) )))
(assert (forall ((d@@150 T@U) ) (!  (=> (= (type d@@150) DatatypeTypeType) (= (ValueMessage.Message.Update_q d@@150) (= (DatatypeCtorId d@@150) |##ValueMessage.Message.Update|))) :qid |unknown.0:0| :skolemid |3169| :pattern ( (ValueMessage.Message.Update_q d@@150)) )))
(assert (forall ((d@@151 T@U) ) (!  (=> (and (= (type d@@151) DatatypeTypeType) (ValueMessage.Message.Update_q d@@151)) (exists ((|a#7#0#0@@4| T@U) ) (!  (and (= (type |a#7#0#0@@4|) DatatypeTypeType) (= d@@151 (|#ValueMessage.Message.Update| |a#7#0#0@@4|))) :qid |MessageidfyValueMessage.27:14| :skolemid |3170| :no-pattern (type |a#7#0#0@@4|) :no-pattern (U_2_int |a#7#0#0@@4|) :no-pattern (U_2_bool |a#7#0#0@@4|) ))) :qid |unknown.0:0| :skolemid |3171| :pattern ( (ValueMessage.Message.Update_q d@@151)) )))
(assert (forall ((|a#8#0#0@@4| T@U) ) (!  (=> (= (type |a#8#0#0@@4|) DatatypeTypeType) (= ($Is (|#ValueMessage.Message.Update| |a#8#0#0@@4|) Tclass.ValueMessage.Message) ($Is |a#8#0#0@@4| Tclass.ValueMessage.Delta))) :qid |MessageidfyValueMessage.27:14| :skolemid |3172| :pattern ( ($Is (|#ValueMessage.Message.Update| |a#8#0#0@@4|) Tclass.ValueMessage.Message)) )))
(assert (forall ((|a#9#0#0@@3| T@U) ($h@@160 T@U) ) (!  (=> (and (and (= (type |a#9#0#0@@3|) DatatypeTypeType) (= (type $h@@160) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@160)) (= ($IsAlloc (|#ValueMessage.Message.Update| |a#9#0#0@@3|) Tclass.ValueMessage.Message $h@@160) ($IsAlloc |a#9#0#0@@3| Tclass.ValueMessage.Delta $h@@160))) :qid |MessageidfyValueMessage.27:14| :skolemid |3173| :pattern ( ($IsAlloc (|#ValueMessage.Message.Update| |a#9#0#0@@3|) Tclass.ValueMessage.Message $h@@160)) )))
(assert (forall ((d@@152 T@U) ($h@@161 T@U) ) (!  (=> (and (and (= (type d@@152) DatatypeTypeType) (= (type $h@@161) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@161) (and (ValueMessage.Message.Update_q d@@152) ($IsAlloc d@@152 Tclass.ValueMessage.Message $h@@161)))) ($IsAlloc (ValueMessage.Message.delta d@@152) Tclass.ValueMessage.Delta $h@@161)) :qid |unknown.0:0| :skolemid |3174| :pattern ( ($IsAlloc (ValueMessage.Message.delta d@@152) Tclass.ValueMessage.Delta $h@@161)) )))
(assert (forall ((|a#10#0#0@@3| T@U) ) (!  (=> (= (type |a#10#0#0@@3|) DatatypeTypeType) (= (|#ValueMessage.Message.Update| (Lit |a#10#0#0@@3|)) (Lit (|#ValueMessage.Message.Update| |a#10#0#0@@3|)))) :qid |MessageidfyValueMessage.27:14| :skolemid |3175| :pattern ( (|#ValueMessage.Message.Update| (Lit |a#10#0#0@@3|))) )))
(assert (forall ((|a#11#0#0@@3| T@U) ) (!  (=> (= (type |a#11#0#0@@3|) DatatypeTypeType) (= (ValueMessage.Message.delta (|#ValueMessage.Message.Update| |a#11#0#0@@3|)) |a#11#0#0@@3|)) :qid |MessageidfyValueMessage.27:14| :skolemid |3176| :pattern ( (|#ValueMessage.Message.Update| |a#11#0#0@@3|)) )))
(assert (forall ((|a#12#0#0@@1| T@U) ) (!  (=> (= (type |a#12#0#0@@1|) DatatypeTypeType) (< (DtRank |a#12#0#0@@1|) (DtRank (|#ValueMessage.Message.Update| |a#12#0#0@@1|)))) :qid |MessageidfyValueMessage.27:14| :skolemid |3177| :pattern ( (|#ValueMessage.Message.Update| |a#12#0#0@@1|)) )))
(assert (forall ((d@@153 T@U) ) (!  (=> (and (= (type d@@153) DatatypeTypeType) (|$IsA#ValueMessage.Message| d@@153)) (or (ValueMessage.Message.Define_q d@@153) (ValueMessage.Message.Update_q d@@153))) :qid |unknown.0:0| :skolemid |3178| :pattern ( (|$IsA#ValueMessage.Message| d@@153)) )))
(assert (forall ((d@@154 T@U) ) (!  (=> (and (= (type d@@154) DatatypeTypeType) ($Is d@@154 Tclass.ValueMessage.Message)) (or (ValueMessage.Message.Define_q d@@154) (ValueMessage.Message.Update_q d@@154))) :qid |unknown.0:0| :skolemid |3179| :pattern ( (ValueMessage.Message.Update_q d@@154) ($Is d@@154 Tclass.ValueMessage.Message)) :pattern ( (ValueMessage.Message.Define_q d@@154) ($Is d@@154 Tclass.ValueMessage.Message)) )))
(assert (forall ((a@@174 T@U) (b@@111 T@U) ) (!  (=> (and (and (= (type a@@174) DatatypeTypeType) (= (type b@@111) DatatypeTypeType)) (and (ValueMessage.Message.Define_q a@@174) (ValueMessage.Message.Define_q b@@111))) (= (|ValueMessage.Message#Equal| a@@174 b@@111) (|Seq#Equal| (ValueMessage.Message.value a@@174) (ValueMessage.Message.value b@@111)))) :qid |unknown.0:0| :skolemid |3180| :pattern ( (|ValueMessage.Message#Equal| a@@174 b@@111) (ValueMessage.Message.Define_q a@@174)) :pattern ( (|ValueMessage.Message#Equal| a@@174 b@@111) (ValueMessage.Message.Define_q b@@111)) )))
(assert (forall ((a@@175 T@U) (b@@112 T@U) ) (!  (=> (and (and (= (type a@@175) DatatypeTypeType) (= (type b@@112) DatatypeTypeType)) (and (ValueMessage.Message.Update_q a@@175) (ValueMessage.Message.Update_q b@@112))) (= (|ValueMessage.Message#Equal| a@@175 b@@112) (|ValueMessage.Delta#Equal| (ValueMessage.Message.delta a@@175) (ValueMessage.Message.delta b@@112)))) :qid |unknown.0:0| :skolemid |3181| :pattern ( (|ValueMessage.Message#Equal| a@@175 b@@112) (ValueMessage.Message.Update_q a@@175)) :pattern ( (|ValueMessage.Message#Equal| a@@175 b@@112) (ValueMessage.Message.Update_q b@@112)) )))
(assert (forall ((a@@176 T@U) (b@@113 T@U) ) (!  (=> (and (= (type a@@176) DatatypeTypeType) (= (type b@@113) DatatypeTypeType)) (= (|ValueMessage.Message#Equal| a@@176 b@@113) (= a@@176 b@@113))) :qid |unknown.0:0| :skolemid |3182| :pattern ( (|ValueMessage.Message#Equal| a@@176 b@@113)) )))
(assert (forall ((arg0@@596 T@U) (arg1@@280 T@U) ) (! (= (type (|#BetreeGraph.Node.Node| arg0@@596 arg1@@280)) DatatypeTypeType) :qid |funType:#BetreeGraph.Node.Node| :pattern ( (|#BetreeGraph.Node.Node| arg0@@596 arg1@@280)) )))
(assert (forall ((|a#13#0#0@@1| T@U) (|a#13#1#0@@0| T@U) ) (!  (=> (and (= (type |a#13#0#0@@1|) (IMapType BoxType BoxType)) (= (type |a#13#1#0@@0|) (IMapType BoxType BoxType))) (= (DatatypeCtorId (|#BetreeGraph.Node.Node| |a#13#0#0@@1| |a#13#1#0@@0|)) |##BetreeGraph.Node.Node|)) :qid |BetreeSpecidfy.30:24| :skolemid |3183| :pattern ( (|#BetreeGraph.Node.Node| |a#13#0#0@@1| |a#13#1#0@@0|)) )))
(assert (forall ((d@@155 T@U) ) (!  (=> (= (type d@@155) DatatypeTypeType) (= (BetreeGraph.Node.Node_q d@@155) (= (DatatypeCtorId d@@155) |##BetreeGraph.Node.Node|))) :qid |unknown.0:0| :skolemid |3184| :pattern ( (BetreeGraph.Node.Node_q d@@155)) )))
(assert (forall ((d@@156 T@U) ) (!  (=> (and (= (type d@@156) DatatypeTypeType) (BetreeGraph.Node.Node_q d@@156)) (exists ((|a#14#0#0@@2| T@U) (|a#14#1#0@@1| T@U) ) (!  (and (and (= (type |a#14#0#0@@2|) (IMapType BoxType BoxType)) (= (type |a#14#1#0@@1|) (IMapType BoxType BoxType))) (= d@@156 (|#BetreeGraph.Node.Node| |a#14#0#0@@2| |a#14#1#0@@1|))) :qid |BetreeSpecidfy.30:24| :skolemid |3185| :no-pattern (type |a#14#0#0@@2|) :no-pattern (type |a#14#1#0@@1|) :no-pattern (U_2_int |a#14#0#0@@2|) :no-pattern (U_2_bool |a#14#0#0@@2|) :no-pattern (U_2_int |a#14#1#0@@1|) :no-pattern (U_2_bool |a#14#1#0@@1|) ))) :qid |unknown.0:0| :skolemid |3186| :pattern ( (BetreeGraph.Node.Node_q d@@156)) )))
(assert (forall ((|a#15#0#0@@2| T@U) (|a#15#1#0@@1| T@U) ) (!  (=> (and (= (type |a#15#0#0@@2|) (IMapType BoxType BoxType)) (= (type |a#15#1#0@@1|) (IMapType BoxType BoxType))) (= ($Is (|#BetreeGraph.Node.Node| |a#15#0#0@@2| |a#15#1#0@@1|) Tclass.BetreeGraph.Node)  (and ($Is |a#15#0#0@@2| (TIMap Tclass.KeyType.Key Tclass.ReferenceType.Reference)) ($Is |a#15#1#0@@1| (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) :qid |BetreeSpecidfy.30:24| :skolemid |3187| :pattern ( ($Is (|#BetreeGraph.Node.Node| |a#15#0#0@@2| |a#15#1#0@@1|) Tclass.BetreeGraph.Node)) )))
(assert (forall ((|a#16#0#0@@2| T@U) (|a#16#1#0@@1| T@U) ($h@@162 T@U) ) (!  (=> (and (and (and (= (type |a#16#0#0@@2|) (IMapType BoxType BoxType)) (= (type |a#16#1#0@@1|) (IMapType BoxType BoxType))) (= (type $h@@162) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@162)) (= ($IsAlloc (|#BetreeGraph.Node.Node| |a#16#0#0@@2| |a#16#1#0@@1|) Tclass.BetreeGraph.Node $h@@162)  (and ($IsAlloc |a#16#0#0@@2| (TIMap Tclass.KeyType.Key Tclass.ReferenceType.Reference) $h@@162) ($IsAlloc |a#16#1#0@@1| (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $h@@162)))) :qid |BetreeSpecidfy.30:24| :skolemid |3188| :pattern ( ($IsAlloc (|#BetreeGraph.Node.Node| |a#16#0#0@@2| |a#16#1#0@@1|) Tclass.BetreeGraph.Node $h@@162)) )))
(assert (forall ((arg0@@597 T@U) ) (! (= (type (BetreeGraph.Node.children arg0@@597)) (IMapType BoxType BoxType)) :qid |funType:BetreeGraph.Node.children| :pattern ( (BetreeGraph.Node.children arg0@@597)) )))
(assert (forall ((d@@157 T@U) ($h@@163 T@U) ) (!  (=> (and (and (= (type d@@157) DatatypeTypeType) (= (type $h@@163) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@163) (and (BetreeGraph.Node.Node_q d@@157) ($IsAlloc d@@157 Tclass.BetreeGraph.Node $h@@163)))) ($IsAlloc (BetreeGraph.Node.children d@@157) (TIMap Tclass.KeyType.Key Tclass.ReferenceType.Reference) $h@@163)) :qid |unknown.0:0| :skolemid |3189| :pattern ( ($IsAlloc (BetreeGraph.Node.children d@@157) (TIMap Tclass.KeyType.Key Tclass.ReferenceType.Reference) $h@@163)) )))
(assert (forall ((arg0@@598 T@U) ) (! (= (type (BetreeGraph.Node.buffer arg0@@598)) (IMapType BoxType BoxType)) :qid |funType:BetreeGraph.Node.buffer| :pattern ( (BetreeGraph.Node.buffer arg0@@598)) )))
(assert (forall ((d@@158 T@U) ($h@@164 T@U) ) (!  (=> (and (and (= (type d@@158) DatatypeTypeType) (= (type $h@@164) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@164) (and (BetreeGraph.Node.Node_q d@@158) ($IsAlloc d@@158 Tclass.BetreeGraph.Node $h@@164)))) ($IsAlloc (BetreeGraph.Node.buffer d@@158) (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $h@@164)) :qid |unknown.0:0| :skolemid |3190| :pattern ( ($IsAlloc (BetreeGraph.Node.buffer d@@158) (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $h@@164)) )))
(assert (forall ((|a#17#0#0@@3| T@U) (|a#17#1#0@@1| T@U) ) (!  (=> (and (= (type |a#17#0#0@@3|) (IMapType BoxType BoxType)) (= (type |a#17#1#0@@1|) (IMapType BoxType BoxType))) (= (|#BetreeGraph.Node.Node| (Lit |a#17#0#0@@3|) (Lit |a#17#1#0@@1|)) (Lit (|#BetreeGraph.Node.Node| |a#17#0#0@@3| |a#17#1#0@@1|)))) :qid |BetreeSpecidfy.30:24| :skolemid |3191| :pattern ( (|#BetreeGraph.Node.Node| (Lit |a#17#0#0@@3|) (Lit |a#17#1#0@@1|))) )))
(assert (forall ((|a#18#0#0@@3| T@U) (|a#18#1#0@@1| T@U) ) (!  (=> (and (= (type |a#18#0#0@@3|) (IMapType BoxType BoxType)) (= (type |a#18#1#0@@1|) (IMapType BoxType BoxType))) (= (BetreeGraph.Node.children (|#BetreeGraph.Node.Node| |a#18#0#0@@3| |a#18#1#0@@1|)) |a#18#0#0@@3|)) :qid |BetreeSpecidfy.30:24| :skolemid |3192| :pattern ( (|#BetreeGraph.Node.Node| |a#18#0#0@@3| |a#18#1#0@@1|)) )))
(assert (forall ((|a#19#0#0@@3| T@U) (|a#19#1#0@@1| T@U) (d@@159 T@U) ) (!  (=> (and (and (and (= (type |a#19#0#0@@3|) (IMapType BoxType BoxType)) (= (type |a#19#1#0@@1|) (IMapType BoxType BoxType))) (= (type d@@159) DatatypeTypeType)) (U_2_bool (MapType0Select (|IMap#Domain| |a#19#0#0@@3|) ($Box d@@159)))) (< (DtRank d@@159) (DtRank (|#BetreeGraph.Node.Node| |a#19#0#0@@3| |a#19#1#0@@1|)))) :qid |BetreeSpecidfy.30:24| :skolemid |3193| :pattern ( (MapType0Select (|IMap#Domain| |a#19#0#0@@3|) ($Box d@@159)) (|#BetreeGraph.Node.Node| |a#19#0#0@@3| |a#19#1#0@@1|)) )))
(assert (forall ((|a#20#0#0@@3| T@U) (|a#20#1#0@@1| T@U) (bx@@184 T@U) ) (!  (=> (and (and (and (= (type |a#20#0#0@@3|) (IMapType BoxType BoxType)) (= (type |a#20#1#0@@1|) (IMapType BoxType BoxType))) (= (type bx@@184) BoxType)) (U_2_bool (MapType0Select (|IMap#Domain| |a#20#0#0@@3|) bx@@184))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |a#20#0#0@@3|) bx@@184))) (DtRank (|#BetreeGraph.Node.Node| |a#20#0#0@@3| |a#20#1#0@@1|)))) :qid |BetreeSpecidfy.30:24| :skolemid |3194| :pattern ( (MapType0Select (|IMap#Domain| |a#20#0#0@@3|) bx@@184) (|#BetreeGraph.Node.Node| |a#20#0#0@@3| |a#20#1#0@@1|)) )))
(assert (forall ((|a#21#0#0@@3| T@U) (|a#21#1#0@@1| T@U) ) (!  (=> (and (= (type |a#21#0#0@@3|) (IMapType BoxType BoxType)) (= (type |a#21#1#0@@1|) (IMapType BoxType BoxType))) (= (BetreeGraph.Node.buffer (|#BetreeGraph.Node.Node| |a#21#0#0@@3| |a#21#1#0@@1|)) |a#21#1#0@@1|)) :qid |BetreeSpecidfy.30:24| :skolemid |3195| :pattern ( (|#BetreeGraph.Node.Node| |a#21#0#0@@3| |a#21#1#0@@1|)) )))
(assert (forall ((|a#22#0#0@@3| T@U) (|a#22#1#0@@2| T@U) (d@@160 T@U) ) (!  (=> (and (and (and (= (type |a#22#0#0@@3|) (IMapType BoxType BoxType)) (= (type |a#22#1#0@@2|) (IMapType BoxType BoxType))) (= (type d@@160) DatatypeTypeType)) (U_2_bool (MapType0Select (|IMap#Domain| |a#22#1#0@@2|) ($Box d@@160)))) (< (DtRank d@@160) (DtRank (|#BetreeGraph.Node.Node| |a#22#0#0@@3| |a#22#1#0@@2|)))) :qid |BetreeSpecidfy.30:24| :skolemid |3196| :pattern ( (MapType0Select (|IMap#Domain| |a#22#1#0@@2|) ($Box d@@160)) (|#BetreeGraph.Node.Node| |a#22#0#0@@3| |a#22#1#0@@2|)) )))
(assert (forall ((|a#23#0#0@@2| T@U) (|a#23#1#0@@1| T@U) (bx@@185 T@U) ) (!  (=> (and (and (and (= (type |a#23#0#0@@2|) (IMapType BoxType BoxType)) (= (type |a#23#1#0@@1|) (IMapType BoxType BoxType))) (= (type bx@@185) BoxType)) (U_2_bool (MapType0Select (|IMap#Domain| |a#23#1#0@@1|) bx@@185))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |a#23#1#0@@1|) bx@@185))) (DtRank (|#BetreeGraph.Node.Node| |a#23#0#0@@2| |a#23#1#0@@1|)))) :qid |BetreeSpecidfy.30:24| :skolemid |3197| :pattern ( (MapType0Select (|IMap#Domain| |a#23#1#0@@1|) bx@@185) (|#BetreeGraph.Node.Node| |a#23#0#0@@2| |a#23#1#0@@1|)) )))
(assert (forall ((d@@161 T@U) ) (!  (=> (and (= (type d@@161) DatatypeTypeType) (|$IsA#BetreeGraph.Node| d@@161)) (BetreeGraph.Node.Node_q d@@161)) :qid |unknown.0:0| :skolemid |3198| :pattern ( (|$IsA#BetreeGraph.Node| d@@161)) )))
(assert (forall ((d@@162 T@U) ) (!  (=> (and (= (type d@@162) DatatypeTypeType) ($Is d@@162 Tclass.BetreeGraph.Node)) (BetreeGraph.Node.Node_q d@@162)) :qid |unknown.0:0| :skolemid |3199| :pattern ( (BetreeGraph.Node.Node_q d@@162) ($Is d@@162 Tclass.BetreeGraph.Node)) )))
(assert (forall ((a@@177 T@U) (b@@114 T@U) ) (!  (=> (and (and (= (type a@@177) DatatypeTypeType) (= (type b@@114) DatatypeTypeType)) true) (= (|BetreeGraph.Node#Equal| a@@177 b@@114)  (and (|IMap#Equal| (BetreeGraph.Node.children a@@177) (BetreeGraph.Node.children b@@114)) (|IMap#Equal| (BetreeGraph.Node.buffer a@@177) (BetreeGraph.Node.buffer b@@114))))) :qid |unknown.0:0| :skolemid |3200| :pattern ( (|BetreeGraph.Node#Equal| a@@177 b@@114)) )))
(assert (forall ((a@@178 T@U) (b@@115 T@U) ) (!  (=> (and (= (type a@@178) DatatypeTypeType) (= (type b@@115) DatatypeTypeType)) (= (|BetreeGraph.Node#Equal| a@@178 b@@115) (= a@@178 b@@115))) :qid |unknown.0:0| :skolemid |3201| :pattern ( (|BetreeGraph.Node#Equal| a@@178 b@@115)) )))
(assert (= (type Tclass.BetreeGraph.__default) TyType))
(assert (= (Tag Tclass.BetreeGraph.__default) Tagclass.BetreeGraph.__default))
(assert (= (TagFamily Tclass.BetreeGraph.__default) tytagFamily$_default))
(assert (forall ((bx@@186 T@U) ) (!  (=> (and (= (type bx@@186) BoxType) ($IsBox bx@@186 Tclass.BetreeGraph.__default)) (and (= ($Box ($Unbox refType bx@@186)) bx@@186) ($Is ($Unbox refType bx@@186) Tclass.BetreeGraph.__default))) :qid |unknown.0:0| :skolemid |3202| :pattern ( ($IsBox bx@@186 Tclass.BetreeGraph.__default)) )))
(assert (forall (($o@@50 T@U) ) (!  (=> (= (type $o@@50) refType) (= ($Is $o@@50 Tclass.BetreeGraph.__default)  (or (= $o@@50 null) (= (dtype $o@@50) Tclass.BetreeGraph.__default)))) :qid |unknown.0:0| :skolemid |3203| :pattern ( ($Is $o@@50 Tclass.BetreeGraph.__default)) )))
(assert (forall (($o@@51 T@U) ($h@@165 T@U) ) (!  (=> (and (= (type $o@@51) refType) (= (type $h@@165) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@51 Tclass.BetreeGraph.__default $h@@165)  (or (= $o@@51 null) (U_2_bool (MapType1Select (MapType0Select $h@@165 $o@@51) alloc))))) :qid |unknown.0:0| :skolemid |3204| :pattern ( ($IsAlloc $o@@51 Tclass.BetreeGraph.__default $h@@165)) )))
(assert (forall ((arg0@@599 T@U) ) (! (= (type (BetreeGraph.__default.Successors arg0@@599)) (MapType0Type BoxType boolType)) :qid |funType:BetreeGraph.__default.Successors| :pattern ( (BetreeGraph.__default.Successors arg0@@599)) )))
(assert  (=> true (forall ((|node#0| T@U) ) (!  (=> (and (= (type |node#0|) DatatypeTypeType) (or (|BetreeGraph.__default.Successors#canCall| |node#0|) ($Is |node#0| Tclass.BetreeGraph.Node))) ($Is (BetreeGraph.__default.Successors |node#0|) (TISet Tclass.ReferenceType.Reference))) :qid |GraphidfyBetreeGraph.37:23| :skolemid |3205| :pattern ( (BetreeGraph.__default.Successors |node#0|)) ))))
(assert (forall ((|node#0@@0| T@U) ) (!  (=> (and (= (type |node#0@@0|) DatatypeTypeType) ($Is |node#0@@0| Tclass.BetreeGraph.Node)) (= (|BetreeGraph.__default.Successors#requires| |node#0@@0|) true)) :qid |GraphidfyBetreeGraph.37:23| :skolemid |3206| :pattern ( (|BetreeGraph.__default.Successors#requires| |node#0@@0|)) )))
(assert (forall ((arg0@@600 T@U) (arg1@@281 T@U) (arg2@@174 T@U) (arg3@@121 T@U) (arg4@@89 T@U) ) (! (= (type (|lambda#108| arg0@@600 arg1@@281 arg2@@174 arg3@@121 arg4@@89)) (MapType0Type BoxType boolType)) :qid |funType:lambda#108| :pattern ( (|lambda#108| arg0@@600 arg1@@281 arg2@@174 arg3@@121 arg4@@89)) )))
(assert  (=> true (forall ((|node#0@@1| T@U) ) (!  (=> (and (= (type |node#0@@1|) DatatypeTypeType) (or (|BetreeGraph.__default.Successors#canCall| |node#0@@1|) ($Is |node#0@@1| Tclass.BetreeGraph.Node))) (and (forall ((|k#0@@59| T@U) ) (!  (=> (and (= (type |k#0@@59|) (SeqType BoxType)) ($Is |k#0@@59| (TSeq Tclass.NativeTypes.byte))) (and (BetreeGraph.Node.Node_q |node#0@@1|) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children |node#0@@1|)) ($Box |k#0@@59|))) (BetreeGraph.Node.Node_q |node#0@@1|)))) :qid |BetreeSpecidfy.34:10| :skolemid |3208| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children |node#0@@1|)) ($Box |k#0@@59|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children |node#0@@1|)) ($Box |k#0@@59|))) )) (= (BetreeGraph.__default.Successors |node#0@@1|) (|lambda#108| (TSeq Tclass.NativeTypes.byte) (|IMap#Domain| (BetreeGraph.Node.children |node#0@@1|)) (|IMap#Elements| (BetreeGraph.Node.children |node#0@@1|)) (|IMap#Domain| (BetreeGraph.Node.children |node#0@@1|)) (|IMap#Elements| (BetreeGraph.Node.children |node#0@@1|)))))) :qid |GraphidfyBetreeGraph.37:23| :skolemid |3209| :pattern ( (BetreeGraph.__default.Successors |node#0@@1|)) ))))
(assert  (=> true (forall ((|node#0@@2| T@U) ) (!  (=> (and (= (type |node#0@@2|) DatatypeTypeType) (or (|BetreeGraph.__default.Successors#canCall| (Lit |node#0@@2|)) ($Is |node#0@@2| Tclass.BetreeGraph.Node))) (and (forall ((|k#1@@9| T@U) ) (!  (=> (and (= (type |k#1@@9|) (SeqType BoxType)) ($Is |k#1@@9| (TSeq Tclass.NativeTypes.byte))) (and (BetreeGraph.Node.Node_q (Lit |node#0@@2|)) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (Lit |node#0@@2|))) ($Box |k#1@@9|))) (BetreeGraph.Node.Node_q (Lit |node#0@@2|))))) :qid |BetreeSpecidfy.34:10| :skolemid |3211| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children |node#0@@2|)) ($Box |k#1@@9|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children |node#0@@2|)) ($Box |k#1@@9|))) )) (= (BetreeGraph.__default.Successors (Lit |node#0@@2|)) (|lambda#108| (TSeq Tclass.NativeTypes.byte) (|IMap#Domain| (BetreeGraph.Node.children (Lit |node#0@@2|))) (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit |node#0@@2|)))) (|IMap#Domain| (BetreeGraph.Node.children |node#0@@2|)) (|IMap#Elements| (BetreeGraph.Node.children |node#0@@2|)))))) :qid |GraphidfyBetreeGraph.37:23| :weight 3 :skolemid |3212| :pattern ( (BetreeGraph.__default.Successors (Lit |node#0@@2|))) ))))
(assert (= (type BetreeGraph.__default.Root) BoxType))
(assert  (=> true (=> true ($IsBox BetreeGraph.__default.Root Tclass.ReferenceType.Reference))))
(assert (= |BetreeGraph.__default.Root#requires| true))
(assert  (=> true (=> true (and |ReferenceType.__default.Root#canCall| (= BetreeGraph.__default.Root ReferenceType.__default.Root)))))
(assert  (=> true (=> true (and |ReferenceType.__default.Root#canCall| (= BetreeGraph.__default.Root ReferenceType.__default.Root)))))
(assert  (=> true (forall ((|g#0| T@U) ) (!  (=> (and (= (type |g#0|) (IMapType BoxType BoxType)) (or (|BetreeGraph.__default.IsClosed#canCall| |g#0|) ($Is |g#0| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)))) true) :qid |GraphidfyBetreeGraph.54:22| :skolemid |3213| :pattern ( (BetreeGraph.__default.IsClosed |g#0|)) ))))
(assert (forall ((|g#0@@0| T@U) ) (!  (=> (and (= (type |g#0@@0|) (IMapType BoxType BoxType)) ($Is |g#0@@0| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) (= (|BetreeGraph.__default.IsClosed#requires| |g#0@@0|) true)) :qid |GraphidfyBetreeGraph.54:22| :skolemid |3214| :pattern ( (|BetreeGraph.__default.IsClosed#requires| |g#0@@0|)) )))
(assert  (=> true (forall ((|g#0@@1| T@U) ) (!  (=> (and (= (type |g#0@@1|) (IMapType BoxType BoxType)) (or (|BetreeGraph.__default.IsClosed#canCall| |g#0@@1|) ($Is |g#0@@1| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)))) (and (forall ((|ref#0@@0| T@U) ) (!  (=> (and (and (= (type |ref#0@@0|) BoxType) ($IsBox |ref#0@@0| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@1|) |ref#0@@0|))) (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@1|) |ref#0@@0|)))) :qid |GraphidfyBetreeGraph.55:12| :skolemid |3216| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@1|) |ref#0@@0|))) :pattern ( (MapType0Select (|IMap#Domain| |g#0@@1|) |ref#0@@0|)) )) (= (BetreeGraph.__default.IsClosed |g#0@@1|) (forall ((|ref#0@@1| T@U) ) (!  (=> (and (and (= (type |ref#0@@1|) BoxType) ($IsBox |ref#0@@1| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@1|) |ref#0@@1|))) (|ISet#Subset| (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@1|) |ref#0@@1|))) (|IMap#Domain| |g#0@@1|))) :qid |GraphidfyBetreeGraph.55:12| :skolemid |3215| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@1|) |ref#0@@1|))) :pattern ( (MapType0Select (|IMap#Domain| |g#0@@1|) |ref#0@@1|)) ))))) :qid |GraphidfyBetreeGraph.54:22| :skolemid |3217| :pattern ( (BetreeGraph.__default.IsClosed |g#0@@1|)) ))))
(assert  (=> true (forall ((|g#0@@2| T@U) ) (!  (=> (and (= (type |g#0@@2|) (IMapType BoxType BoxType)) (or (|BetreeGraph.__default.IsClosed#canCall| (Lit |g#0@@2|)) ($Is |g#0@@2| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)))) (and (forall ((|ref#1@@0| T@U) ) (!  (=> (and (and (= (type |ref#1@@0|) BoxType) ($IsBox |ref#1@@0| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@2|) |ref#1@@0|))) (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@2|)) |ref#1@@0|)))) :qid |GraphidfyBetreeGraph.55:12| :skolemid |3219| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@2|) |ref#1@@0|))) :pattern ( (MapType0Select (|IMap#Domain| |g#0@@2|) |ref#1@@0|)) )) (= (BetreeGraph.__default.IsClosed (Lit |g#0@@2|)) (forall ((|ref#1@@1| T@U) ) (!  (=> (and (and (= (type |ref#1@@1|) BoxType) ($IsBox |ref#1@@1| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@2|) |ref#1@@1|))) (|ISet#Subset| (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@2|)) |ref#1@@1|))) (|IMap#Domain| (Lit |g#0@@2|)))) :qid |GraphidfyBetreeGraph.55:12| :skolemid |3218| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@2|) |ref#1@@1|))) :pattern ( (MapType0Select (|IMap#Domain| |g#0@@2|) |ref#1@@1|)) ))))) :qid |GraphidfyBetreeGraph.54:22| :weight 3 :skolemid |3220| :pattern ( (BetreeGraph.__default.IsClosed (Lit |g#0@@2|))) ))))
(assert  (=> true (forall ((|g#0@@3| T@U) (|path#0| T@U) ) (!  (=> (and (and (= (type |g#0@@3|) (IMapType BoxType BoxType)) (= (type |path#0|) (SeqType BoxType))) (or (|BetreeGraph.__default.IsPath#canCall| |g#0@@3| |path#0|) (and ($Is |g#0@@3| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0| (TSeq Tclass.ReferenceType.Reference))))) true) :qid |GraphidfyBetreeGraph.58:20| :skolemid |3221| :pattern ( (BetreeGraph.__default.IsPath |g#0@@3| |path#0|)) ))))
(assert (forall ((|g#0@@4| T@U) (|path#0@@0| T@U) ) (!  (=> (and (and (= (type |g#0@@4|) (IMapType BoxType BoxType)) (= (type |path#0@@0|) (SeqType BoxType))) (and ($Is |g#0@@4| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@0| (TSeq Tclass.ReferenceType.Reference)))) (= (|BetreeGraph.__default.IsPath#requires| |g#0@@4| |path#0@@0|) true)) :qid |GraphidfyBetreeGraph.58:20| :skolemid |3222| :pattern ( (|BetreeGraph.__default.IsPath#requires| |g#0@@4| |path#0@@0|)) )))
(assert  (=> true (forall ((|g#0@@5| T@U) (|path#0@@1| T@U) ) (!  (=> (and (and (= (type |g#0@@5|) (IMapType BoxType BoxType)) (= (type |path#0@@1|) (SeqType BoxType))) (or (|BetreeGraph.__default.IsPath#canCall| |g#0@@5| |path#0@@1|) (and ($Is |g#0@@5| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@1| (TSeq Tclass.ReferenceType.Reference))))) (and (=> (forall ((|i#0@@92| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@92|) (< |i#0@@92| (- (|Seq#Length| |path#0@@1|) 1))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@5|) (|Seq#Index| |path#0@@1| |i#0@@92|))))) :qid |GraphidfyBetreeGraph.59:12| :skolemid |3226| :pattern ( (|Seq#Index| |path#0@@1| |i#0@@92|)) )) (forall ((|i#1@@20| Int) (|_t#0#0| Int) ) (!  (=> (= |_t#0#0| (+ |i#1@@20| 1)) (=> (<= (LitInt 0) |i#1@@20|) (=> (< |i#1@@20| (- (|Seq#Length| |path#0@@1|) 1)) (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@5|) (|Seq#Index| |path#0@@1| |i#1@@20|))))))) :qid |GraphidfyBetreeGraph.59:12| :skolemid |3225| :pattern ( (|Seq#Index| |path#0@@1| |i#1@@20|) (|Seq#Index| |path#0@@1| |_t#0#0|)) ))) (= (BetreeGraph.__default.IsPath |g#0@@5| |path#0@@1|)  (and (forall ((|i#0@@93| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@93|) (< |i#0@@93| (- (|Seq#Length| |path#0@@1|) 1))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@5|) (|Seq#Index| |path#0@@1| |i#0@@93|))))) :qid |GraphidfyBetreeGraph.59:12| :skolemid |3223| :pattern ( (|Seq#Index| |path#0@@1| |i#0@@93|)) )) (forall ((|i#1@@21| Int) (|_t#0#0@@0| Int) ) (!  (=> (= |_t#0#0@@0| (+ |i#1@@21| 1)) (=> (and (<= (LitInt 0) |i#1@@21|) (< |i#1@@21| (- (|Seq#Length| |path#0@@1|) 1))) (U_2_bool (MapType0Select (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@5|) (|Seq#Index| |path#0@@1| |i#1@@21|)))) (|Seq#Index| |path#0@@1| |_t#0#0@@0|))))) :qid |GraphidfyBetreeGraph.59:12| :skolemid |3224| :pattern ( (|Seq#Index| |path#0@@1| |i#1@@21|) (|Seq#Index| |path#0@@1| |_t#0#0@@0|)) )))))) :qid |GraphidfyBetreeGraph.58:20| :skolemid |3227| :pattern ( (BetreeGraph.__default.IsPath |g#0@@5| |path#0@@1|)) ))))
(assert  (=> true (forall ((|g#0@@6| T@U) (|path#0@@2| T@U) ) (!  (=> (and (and (= (type |g#0@@6|) (IMapType BoxType BoxType)) (= (type |path#0@@2|) (SeqType BoxType))) (or (|BetreeGraph.__default.IsPath#canCall| |g#0@@6| (Lit |path#0@@2|)) (and ($Is |g#0@@6| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@2| (TSeq Tclass.ReferenceType.Reference))))) (and (=> (forall ((|i#2@@10| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@10|) (< |i#2@@10| (- (|Seq#Length| (Lit |path#0@@2|)) 1))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@6|) (|Seq#Index| (Lit |path#0@@2|) |i#2@@10|))))) :qid |GraphidfyBetreeGraph.59:12| :skolemid |3231| :pattern ( (|Seq#Index| |path#0@@2| |i#2@@10|)) )) (forall ((|i#3@@7| Int) (|_t#0#1| Int) ) (!  (=> (= |_t#0#1| (+ |i#3@@7| 1)) (=> (<= (LitInt 0) |i#3@@7|) (=> (< |i#3@@7| (- (|Seq#Length| (Lit |path#0@@2|)) 1)) (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@6|) (|Seq#Index| (Lit |path#0@@2|) |i#3@@7|))))))) :qid |GraphidfyBetreeGraph.59:12| :skolemid |3230| :pattern ( (|Seq#Index| |path#0@@2| |i#3@@7|) (|Seq#Index| |path#0@@2| |_t#0#1|)) ))) (= (BetreeGraph.__default.IsPath |g#0@@6| (Lit |path#0@@2|))  (and (forall ((|i#2@@11| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@11|) (< |i#2@@11| (- (|Seq#Length| (Lit |path#0@@2|)) 1))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@6|) (|Seq#Index| (Lit |path#0@@2|) |i#2@@11|))))) :qid |GraphidfyBetreeGraph.59:12| :skolemid |3228| :pattern ( (|Seq#Index| |path#0@@2| |i#2@@11|)) )) (forall ((|i#3@@8| Int) (|_t#0#1@@0| Int) ) (!  (=> (= |_t#0#1@@0| (+ |i#3@@8| 1)) (=> (and (<= (LitInt 0) |i#3@@8|) (< |i#3@@8| (- (|Seq#Length| (Lit |path#0@@2|)) 1))) (U_2_bool (MapType0Select (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@6|) (|Seq#Index| (Lit |path#0@@2|) |i#3@@8|)))) (|Seq#Index| (Lit |path#0@@2|) |_t#0#1@@0|))))) :qid |GraphidfyBetreeGraph.59:12| :skolemid |3229| :pattern ( (|Seq#Index| |path#0@@2| |i#3@@8|) (|Seq#Index| |path#0@@2| |_t#0#1@@0|)) )))))) :qid |GraphidfyBetreeGraph.58:20| :weight 3 :skolemid |3232| :pattern ( (BetreeGraph.__default.IsPath |g#0@@6| (Lit |path#0@@2|))) ))))
(assert  (=> true (forall ((|g#0@@7| T@U) (|path#0@@3| T@U) ) (!  (=> (and (and (= (type |g#0@@7|) (IMapType BoxType BoxType)) (= (type |path#0@@3|) (SeqType BoxType))) (or (|BetreeGraph.__default.IsPath#canCall| (Lit |g#0@@7|) (Lit |path#0@@3|)) (and ($Is |g#0@@7| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@3| (TSeq Tclass.ReferenceType.Reference))))) (and (=> (forall ((|i#4@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#4@@1|) (< |i#4@@1| (- (|Seq#Length| (Lit |path#0@@3|)) 1))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@7|) (|Seq#Index| (Lit |path#0@@3|) |i#4@@1|))))) :qid |GraphidfyBetreeGraph.59:12| :skolemid |3236| :pattern ( (|Seq#Index| |path#0@@3| |i#4@@1|)) )) (forall ((|i#5@@2| Int) (|_t#0#2| Int) ) (!  (=> (= |_t#0#2| (+ |i#5@@2| 1)) (=> (<= (LitInt 0) |i#5@@2|) (=> (< |i#5@@2| (- (|Seq#Length| (Lit |path#0@@3|)) 1)) (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@7|)) (|Seq#Index| (Lit |path#0@@3|) |i#5@@2|))))))) :qid |GraphidfyBetreeGraph.59:12| :skolemid |3235| :pattern ( (|Seq#Index| |path#0@@3| |i#5@@2|) (|Seq#Index| |path#0@@3| |_t#0#2|)) ))) (= (BetreeGraph.__default.IsPath (Lit |g#0@@7|) (Lit |path#0@@3|))  (and (forall ((|i#4@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#4@@2|) (< |i#4@@2| (- (|Seq#Length| (Lit |path#0@@3|)) 1))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@7|) (|Seq#Index| (Lit |path#0@@3|) |i#4@@2|))))) :qid |GraphidfyBetreeGraph.59:12| :skolemid |3233| :pattern ( (|Seq#Index| |path#0@@3| |i#4@@2|)) )) (forall ((|i#5@@3| Int) (|_t#0#2@@0| Int) ) (!  (=> (= |_t#0#2@@0| (+ |i#5@@3| 1)) (=> (and (<= (LitInt 0) |i#5@@3|) (< |i#5@@3| (- (|Seq#Length| (Lit |path#0@@3|)) 1))) (U_2_bool (MapType0Select (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@7|)) (|Seq#Index| (Lit |path#0@@3|) |i#5@@3|)))) (|Seq#Index| (Lit |path#0@@3|) |_t#0#2@@0|))))) :qid |GraphidfyBetreeGraph.59:12| :skolemid |3234| :pattern ( (|Seq#Index| |path#0@@3| |i#5@@3|) (|Seq#Index| |path#0@@3| |_t#0#2@@0|)) )))))) :qid |GraphidfyBetreeGraph.58:20| :weight 3 :skolemid |3237| :pattern ( (BetreeGraph.__default.IsPath (Lit |g#0@@7|) (Lit |path#0@@3|))) ))))
(assert  (=> true (forall ((|g#0@@8| T@U) (|path#0@@4| T@U) ) (!  (=> (and (and (= (type |g#0@@8|) (IMapType BoxType BoxType)) (= (type |path#0@@4|) (SeqType BoxType))) (or (|BetreeGraph.__default.IsCycle#canCall| |g#0@@8| |path#0@@4|) (and ($Is |g#0@@8| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@4| (TSeq Tclass.ReferenceType.Reference))))) true) :qid |GraphidfyBetreeGraph.62:21| :skolemid |3238| :pattern ( (BetreeGraph.__default.IsCycle |g#0@@8| |path#0@@4|)) ))))
(assert (forall ((|g#0@@9| T@U) (|path#0@@5| T@U) ) (!  (=> (and (and (= (type |g#0@@9|) (IMapType BoxType BoxType)) (= (type |path#0@@5|) (SeqType BoxType))) (and ($Is |g#0@@9| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@5| (TSeq Tclass.ReferenceType.Reference)))) (= (|BetreeGraph.__default.IsCycle#requires| |g#0@@9| |path#0@@5|) true)) :qid |GraphidfyBetreeGraph.62:21| :skolemid |3239| :pattern ( (|BetreeGraph.__default.IsCycle#requires| |g#0@@9| |path#0@@5|)) )))
(assert  (=> true (forall ((|g#0@@10| T@U) (|path#0@@6| T@U) ) (!  (=> (and (and (= (type |g#0@@10|) (IMapType BoxType BoxType)) (= (type |path#0@@6|) (SeqType BoxType))) (or (|BetreeGraph.__default.IsCycle#canCall| |g#0@@10| |path#0@@6|) (and ($Is |g#0@@10| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@6| (TSeq Tclass.ReferenceType.Reference))))) (and (and (|BetreeGraph.__default.IsPath#canCall| |g#0@@10| |path#0@@6|) (=> (BetreeGraph.__default.IsPath |g#0@@10| |path#0@@6|) (=> (< 0 (|Seq#Length| |path#0@@6|)) (and (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |path#0@@6|) (=> (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@10|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@6|))) (and (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |path#0@@6|) (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@10|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@6|)))))))))) (= (BetreeGraph.__default.IsCycle |g#0@@10| |path#0@@6|)  (and (and (and (BetreeGraph.__default.IsPath |g#0@@10| |path#0@@6|) (< 0 (|Seq#Length| |path#0@@6|))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@10|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@6|)))) (U_2_bool (MapType0Select (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@10|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@6|)))) (|Seq#Index| |path#0@@6| (LitInt 0)))))))) :qid |GraphidfyBetreeGraph.62:21| :skolemid |3240| :pattern ( (BetreeGraph.__default.IsCycle |g#0@@10| |path#0@@6|)) ))))
(assert  (=> true (forall ((|g#0@@11| T@U) (|path#0@@7| T@U) ) (!  (=> (and (and (= (type |g#0@@11|) (IMapType BoxType BoxType)) (= (type |path#0@@7|) (SeqType BoxType))) (or (|BetreeGraph.__default.IsCycle#canCall| |g#0@@11| (Lit |path#0@@7|)) (and ($Is |g#0@@11| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@7| (TSeq Tclass.ReferenceType.Reference))))) (and (and (|BetreeGraph.__default.IsPath#canCall| |g#0@@11| (Lit |path#0@@7|)) (=> (BetreeGraph.__default.IsPath |g#0@@11| (Lit |path#0@@7|)) (=> (< 0 (|Seq#Length| (Lit |path#0@@7|))) (and (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |path#0@@7|)) (=> (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@11|) (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@7|)))) (and (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |path#0@@7|)) (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@11|) (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@7|)))))))))))) (= (BetreeGraph.__default.IsCycle |g#0@@11| (Lit |path#0@@7|))  (and (and (and (BetreeGraph.__default.IsPath |g#0@@11| (Lit |path#0@@7|)) (< 0 (|Seq#Length| (Lit |path#0@@7|)))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@11|) (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@7|))))) (U_2_bool (MapType0Select (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@11|) (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@7|)))))) (|Seq#Index| (Lit |path#0@@7|) (LitInt 0)))))))) :qid |GraphidfyBetreeGraph.62:21| :weight 3 :skolemid |3241| :pattern ( (BetreeGraph.__default.IsCycle |g#0@@11| (Lit |path#0@@7|))) ))))
(assert  (=> true (forall ((|g#0@@12| T@U) (|path#0@@8| T@U) ) (!  (=> (and (and (= (type |g#0@@12|) (IMapType BoxType BoxType)) (= (type |path#0@@8|) (SeqType BoxType))) (or (|BetreeGraph.__default.IsCycle#canCall| (Lit |g#0@@12|) (Lit |path#0@@8|)) (and ($Is |g#0@@12| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@8| (TSeq Tclass.ReferenceType.Reference))))) (and (and (|BetreeGraph.__default.IsPath#canCall| (Lit |g#0@@12|) (Lit |path#0@@8|)) (=> (U_2_bool (Lit (bool_2_U (BetreeGraph.__default.IsPath (Lit |g#0@@12|) (Lit |path#0@@8|))))) (=> (< 0 (|Seq#Length| (Lit |path#0@@8|))) (and (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |path#0@@8|)) (=> (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@12|) (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@8|)))) (and (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |path#0@@8|)) (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@12|)) (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@8|)))))))))))) (= (BetreeGraph.__default.IsCycle (Lit |g#0@@12|) (Lit |path#0@@8|))  (and (and (and (BetreeGraph.__default.IsPath (Lit |g#0@@12|) (Lit |path#0@@8|)) (< 0 (|Seq#Length| (Lit |path#0@@8|)))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@12|) (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@8|))))) (U_2_bool (MapType0Select (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@12|)) (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@8|)))))) (|Seq#Index| (Lit |path#0@@8|) (LitInt 0)))))))) :qid |GraphidfyBetreeGraph.62:21| :weight 3 :skolemid |3242| :pattern ( (BetreeGraph.__default.IsCycle (Lit |g#0@@12|) (Lit |path#0@@8|))) ))))
(assert  (=> true (forall ((|g#0@@13| T@U) (|path#0@@9| T@U) ) (!  (=> (and (and (= (type |g#0@@13|) (IMapType BoxType BoxType)) (= (type |path#0@@9|) (SeqType BoxType))) (or (|BetreeGraph.__default.IsSimple#canCall| |g#0@@13| |path#0@@9|) (and ($Is |g#0@@13| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@9| (TSeq Tclass.ReferenceType.Reference))))) true) :qid |GraphidfyBetreeGraph.69:22| :skolemid |3243| :pattern ( (BetreeGraph.__default.IsSimple |g#0@@13| |path#0@@9|)) ))))
(assert (forall ((|g#0@@14| T@U) (|path#0@@10| T@U) ) (!  (=> (and (and (= (type |g#0@@14|) (IMapType BoxType BoxType)) (= (type |path#0@@10|) (SeqType BoxType))) (and ($Is |g#0@@14| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@10| (TSeq Tclass.ReferenceType.Reference)))) (= (|BetreeGraph.__default.IsSimple#requires| |g#0@@14| |path#0@@10|) true)) :qid |GraphidfyBetreeGraph.69:22| :skolemid |3244| :pattern ( (|BetreeGraph.__default.IsSimple#requires| |g#0@@14| |path#0@@10|)) )))
(assert  (=> true (forall ((|g#0@@15| T@U) (|path#0@@11| T@U) ) (!  (=> (and (and (= (type |g#0@@15|) (IMapType BoxType BoxType)) (= (type |path#0@@11|) (SeqType BoxType))) (or (|BetreeGraph.__default.IsSimple#canCall| |g#0@@15| |path#0@@11|) (and ($Is |g#0@@15| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@11| (TSeq Tclass.ReferenceType.Reference))))) (and (|BetreeGraph.__default.IsPath#canCall| |g#0@@15| |path#0@@11|) (= (BetreeGraph.__default.IsSimple |g#0@@15| |path#0@@11|)  (and (BetreeGraph.__default.IsPath |g#0@@15| |path#0@@11|) (forall ((|i#0@@94| Int) (|j#0@@15| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#0@@94|) (< |i#0@@94| (|Seq#Length| |path#0@@11|))) (and (<= (LitInt 0) |j#0@@15|) (< |j#0@@15| (|Seq#Length| |path#0@@11|)))) (not (= |i#0@@94| |j#0@@15|))) (not (= (|Seq#Index| |path#0@@11| |i#0@@94|) (|Seq#Index| |path#0@@11| |j#0@@15|))))) :qid |GraphidfyBetreeGraph.71:16| :skolemid |3245| :pattern ( (|Seq#Index| |path#0@@11| |j#0@@15|) (|Seq#Index| |path#0@@11| |i#0@@94|)) )))))) :qid |GraphidfyBetreeGraph.69:22| :skolemid |3246| :pattern ( (BetreeGraph.__default.IsSimple |g#0@@15| |path#0@@11|)) ))))
(assert  (=> true (forall ((|g#0@@16| T@U) (|path#0@@12| T@U) ) (!  (=> (and (and (= (type |g#0@@16|) (IMapType BoxType BoxType)) (= (type |path#0@@12|) (SeqType BoxType))) (or (|BetreeGraph.__default.IsSimple#canCall| |g#0@@16| (Lit |path#0@@12|)) (and ($Is |g#0@@16| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@12| (TSeq Tclass.ReferenceType.Reference))))) (and (|BetreeGraph.__default.IsPath#canCall| |g#0@@16| (Lit |path#0@@12|)) (= (BetreeGraph.__default.IsSimple |g#0@@16| (Lit |path#0@@12|))  (and (BetreeGraph.__default.IsPath |g#0@@16| (Lit |path#0@@12|)) (forall ((|i#1@@22| Int) (|j#1@@5| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#1@@22|) (< |i#1@@22| (|Seq#Length| (Lit |path#0@@12|)))) (and (<= (LitInt 0) |j#1@@5|) (< |j#1@@5| (|Seq#Length| (Lit |path#0@@12|))))) (not (= |i#1@@22| |j#1@@5|))) (not (= (|Seq#Index| (Lit |path#0@@12|) |i#1@@22|) (|Seq#Index| (Lit |path#0@@12|) |j#1@@5|))))) :qid |GraphidfyBetreeGraph.71:16| :skolemid |3247| :pattern ( (|Seq#Index| |path#0@@12| |j#1@@5|) (|Seq#Index| |path#0@@12| |i#1@@22|)) )))))) :qid |GraphidfyBetreeGraph.69:22| :weight 3 :skolemid |3248| :pattern ( (BetreeGraph.__default.IsSimple |g#0@@16| (Lit |path#0@@12|))) ))))
(assert  (=> true (forall ((|g#0@@17| T@U) (|path#0@@13| T@U) ) (!  (=> (and (and (= (type |g#0@@17|) (IMapType BoxType BoxType)) (= (type |path#0@@13|) (SeqType BoxType))) (or (|BetreeGraph.__default.IsSimple#canCall| (Lit |g#0@@17|) (Lit |path#0@@13|)) (and ($Is |g#0@@17| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@13| (TSeq Tclass.ReferenceType.Reference))))) (and (|BetreeGraph.__default.IsPath#canCall| (Lit |g#0@@17|) (Lit |path#0@@13|)) (= (BetreeGraph.__default.IsSimple (Lit |g#0@@17|) (Lit |path#0@@13|))  (and (BetreeGraph.__default.IsPath (Lit |g#0@@17|) (Lit |path#0@@13|)) (forall ((|i#2@@12| Int) (|j#2@@1| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#2@@12|) (< |i#2@@12| (|Seq#Length| (Lit |path#0@@13|)))) (and (<= (LitInt 0) |j#2@@1|) (< |j#2@@1| (|Seq#Length| (Lit |path#0@@13|))))) (not (= |i#2@@12| |j#2@@1|))) (not (= (|Seq#Index| (Lit |path#0@@13|) |i#2@@12|) (|Seq#Index| (Lit |path#0@@13|) |j#2@@1|))))) :qid |GraphidfyBetreeGraph.71:16| :skolemid |3249| :pattern ( (|Seq#Index| |path#0@@13| |j#2@@1|) (|Seq#Index| |path#0@@13| |i#2@@12|)) )))))) :qid |GraphidfyBetreeGraph.69:22| :weight 3 :skolemid |3250| :pattern ( (BetreeGraph.__default.IsSimple (Lit |g#0@@17|) (Lit |path#0@@13|))) ))))
(assert  (=> true (forall ((|g#0@@18| T@U) ) (!  (=> (and (= (type |g#0@@18|) (IMapType BoxType BoxType)) (or (|BetreeGraph.__default.IsAcyclic#canCall| |g#0@@18|) ($Is |g#0@@18| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)))) true) :qid |GraphidfyBetreeGraph.74:23| :skolemid |3251| :pattern ( (BetreeGraph.__default.IsAcyclic |g#0@@18|)) ))))
(assert (forall ((|g#0@@19| T@U) ) (!  (=> (and (= (type |g#0@@19|) (IMapType BoxType BoxType)) ($Is |g#0@@19| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) (= (|BetreeGraph.__default.IsAcyclic#requires| |g#0@@19|) true)) :qid |GraphidfyBetreeGraph.74:23| :skolemid |3252| :pattern ( (|BetreeGraph.__default.IsAcyclic#requires| |g#0@@19|)) )))
(assert  (=> true (forall ((|g#0@@20| T@U) ) (!  (=> (and (= (type |g#0@@20|) (IMapType BoxType BoxType)) (or (|BetreeGraph.__default.IsAcyclic#canCall| |g#0@@20|) ($Is |g#0@@20| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)))) (and (forall ((|path#0@@14| T@U) ) (!  (=> (and (= (type |path#0@@14|) (SeqType BoxType)) ($Is |path#0@@14| (TSeq Tclass.ReferenceType.Reference))) (and (|BetreeGraph.__default.IsPath#canCall| |g#0@@20| |path#0@@14|) (=> (BetreeGraph.__default.IsPath |g#0@@20| |path#0@@14|) (|BetreeGraph.__default.IsCycle#canCall| |g#0@@20| |path#0@@14|)))) :qid |GraphidfyBetreeGraph.75:12| :skolemid |3254| :pattern ( (BetreeGraph.__default.IsCycle |g#0@@20| |path#0@@14|)) :pattern ( (BetreeGraph.__default.IsPath |g#0@@20| |path#0@@14|)) )) (= (BetreeGraph.__default.IsAcyclic |g#0@@20|) (forall ((|path#0@@15| T@U) ) (!  (=> (and (and (= (type |path#0@@15|) (SeqType BoxType)) ($Is |path#0@@15| (TSeq Tclass.ReferenceType.Reference))) (BetreeGraph.__default.IsPath |g#0@@20| |path#0@@15|)) (not (BetreeGraph.__default.IsCycle |g#0@@20| |path#0@@15|))) :qid |GraphidfyBetreeGraph.75:12| :skolemid |3253| :pattern ( (BetreeGraph.__default.IsCycle |g#0@@20| |path#0@@15|)) :pattern ( (BetreeGraph.__default.IsPath |g#0@@20| |path#0@@15|)) ))))) :qid |GraphidfyBetreeGraph.74:23| :skolemid |3255| :pattern ( (BetreeGraph.__default.IsAcyclic |g#0@@20|)) ))))
(assert  (=> true (forall ((|g#0@@21| T@U) ) (!  (=> (and (= (type |g#0@@21|) (IMapType BoxType BoxType)) (or (|BetreeGraph.__default.IsAcyclic#canCall| (Lit |g#0@@21|)) ($Is |g#0@@21| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)))) (and (forall ((|path#1| T@U) ) (!  (=> (and (= (type |path#1|) (SeqType BoxType)) ($Is |path#1| (TSeq Tclass.ReferenceType.Reference))) (and (|BetreeGraph.__default.IsPath#canCall| (Lit |g#0@@21|) |path#1|) (=> (BetreeGraph.__default.IsPath (Lit |g#0@@21|) |path#1|) (|BetreeGraph.__default.IsCycle#canCall| (Lit |g#0@@21|) |path#1|)))) :qid |GraphidfyBetreeGraph.75:12| :skolemid |3257| :pattern ( (BetreeGraph.__default.IsCycle |g#0@@21| |path#1|)) :pattern ( (BetreeGraph.__default.IsPath |g#0@@21| |path#1|)) )) (= (BetreeGraph.__default.IsAcyclic (Lit |g#0@@21|)) (forall ((|path#1@@0| T@U) ) (!  (=> (and (and (= (type |path#1@@0|) (SeqType BoxType)) ($Is |path#1@@0| (TSeq Tclass.ReferenceType.Reference))) (BetreeGraph.__default.IsPath (Lit |g#0@@21|) |path#1@@0|)) (not (BetreeGraph.__default.IsCycle (Lit |g#0@@21|) |path#1@@0|))) :qid |GraphidfyBetreeGraph.75:12| :skolemid |3256| :pattern ( (BetreeGraph.__default.IsCycle |g#0@@21| |path#1@@0|)) :pattern ( (BetreeGraph.__default.IsPath |g#0@@21| |path#1@@0|)) ))))) :qid |GraphidfyBetreeGraph.74:23| :weight 3 :skolemid |3258| :pattern ( (BetreeGraph.__default.IsAcyclic (Lit |g#0@@21|))) ))))
(assert  (=> true (forall ((|g#0@@22| T@U) (|path#0@@16| T@U) (|start#0@@21| T@U) (|end#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type |g#0@@22|) (IMapType BoxType BoxType)) (= (type |path#0@@16|) (SeqType BoxType))) (= (type |start#0@@21|) BoxType)) (= (type |end#0@@21|) BoxType)) (or (|BetreeGraph.__default.IsPathFromTo#canCall| |g#0@@22| |path#0@@16| |start#0@@21| |end#0@@21|) (and (and (and ($Is |g#0@@22| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@16| (TSeq Tclass.ReferenceType.Reference))) ($IsBox |start#0@@21| Tclass.ReferenceType.Reference)) ($IsBox |end#0@@21| Tclass.ReferenceType.Reference)))) true) :qid |GraphidfyBetreeGraph.90:26| :skolemid |3259| :pattern ( (BetreeGraph.__default.IsPathFromTo |g#0@@22| |path#0@@16| |start#0@@21| |end#0@@21|)) ))))
(assert (forall ((|g#0@@23| T@U) (|path#0@@17| T@U) (|start#0@@22| T@U) (|end#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type |g#0@@23|) (IMapType BoxType BoxType)) (= (type |path#0@@17|) (SeqType BoxType))) (= (type |start#0@@22|) BoxType)) (= (type |end#0@@22|) BoxType)) (and (and (and ($Is |g#0@@23| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@17| (TSeq Tclass.ReferenceType.Reference))) ($IsBox |start#0@@22| Tclass.ReferenceType.Reference)) ($IsBox |end#0@@22| Tclass.ReferenceType.Reference))) (= (|BetreeGraph.__default.IsPathFromTo#requires| |g#0@@23| |path#0@@17| |start#0@@22| |end#0@@22|) true)) :qid |GraphidfyBetreeGraph.90:26| :skolemid |3260| :pattern ( (|BetreeGraph.__default.IsPathFromTo#requires| |g#0@@23| |path#0@@17| |start#0@@22| |end#0@@22|)) )))
(assert  (=> true (forall ((|g#0@@24| T@U) (|path#0@@18| T@U) (|start#0@@23| T@U) (|end#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type |g#0@@24|) (IMapType BoxType BoxType)) (= (type |path#0@@18|) (SeqType BoxType))) (= (type |start#0@@23|) BoxType)) (= (type |end#0@@23|) BoxType)) (or (|BetreeGraph.__default.IsPathFromTo#canCall| |g#0@@24| |path#0@@18| |start#0@@23| |end#0@@23|) (and (and (and ($Is |g#0@@24| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@18| (TSeq Tclass.ReferenceType.Reference))) ($IsBox |start#0@@23| Tclass.ReferenceType.Reference)) ($IsBox |end#0@@23| Tclass.ReferenceType.Reference)))) (and (and (|BetreeGraph.__default.IsPath#canCall| |g#0@@24| |path#0@@18|) (=> (BetreeGraph.__default.IsPath |g#0@@24| |path#0@@18|) (=> (< 1 (|Seq#Length| |path#0@@18|)) (=> (= (|Seq#Index| |path#0@@18| (LitInt 0)) |start#0@@23|) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |path#0@@18|))))) (= (BetreeGraph.__default.IsPathFromTo |g#0@@24| |path#0@@18| |start#0@@23| |end#0@@23|)  (and (and (and (BetreeGraph.__default.IsPath |g#0@@24| |path#0@@18|) (< 1 (|Seq#Length| |path#0@@18|))) (= (|Seq#Index| |path#0@@18| (LitInt 0)) |start#0@@23|)) (= (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@18|) |end#0@@23|))))) :qid |GraphidfyBetreeGraph.90:26| :skolemid |3261| :pattern ( (BetreeGraph.__default.IsPathFromTo |g#0@@24| |path#0@@18| |start#0@@23| |end#0@@23|)) ))))
(assert  (=> true (forall ((|g#0@@25| T@U) (|path#0@@19| T@U) (|start#0@@24| T@U) (|end#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type |g#0@@25|) (IMapType BoxType BoxType)) (= (type |path#0@@19|) (SeqType BoxType))) (= (type |start#0@@24|) BoxType)) (= (type |end#0@@24|) BoxType)) (or (|BetreeGraph.__default.IsPathFromTo#canCall| |g#0@@25| (Lit |path#0@@19|) |start#0@@24| |end#0@@24|) (and (and (and ($Is |g#0@@25| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@19| (TSeq Tclass.ReferenceType.Reference))) ($IsBox |start#0@@24| Tclass.ReferenceType.Reference)) ($IsBox |end#0@@24| Tclass.ReferenceType.Reference)))) (and (and (|BetreeGraph.__default.IsPath#canCall| |g#0@@25| (Lit |path#0@@19|)) (=> (BetreeGraph.__default.IsPath |g#0@@25| (Lit |path#0@@19|)) (=> (< 1 (|Seq#Length| (Lit |path#0@@19|))) (=> (= (|Seq#Index| (Lit |path#0@@19|) (LitInt 0)) |start#0@@24|) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |path#0@@19|)))))) (= (BetreeGraph.__default.IsPathFromTo |g#0@@25| (Lit |path#0@@19|) |start#0@@24| |end#0@@24|)  (and (and (and (BetreeGraph.__default.IsPath |g#0@@25| (Lit |path#0@@19|)) (< 1 (|Seq#Length| (Lit |path#0@@19|)))) (= (|Seq#Index| (Lit |path#0@@19|) (LitInt 0)) |start#0@@24|)) (= (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@19|))) |end#0@@24|))))) :qid |GraphidfyBetreeGraph.90:26| :weight 3 :skolemid |3262| :pattern ( (BetreeGraph.__default.IsPathFromTo |g#0@@25| (Lit |path#0@@19|) |start#0@@24| |end#0@@24|)) ))))
(assert  (=> true (forall ((|g#0@@26| T@U) (|path#0@@20| T@U) (|start#0@@25| T@U) (|end#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type |g#0@@26|) (IMapType BoxType BoxType)) (= (type |path#0@@20|) (SeqType BoxType))) (= (type |start#0@@25|) BoxType)) (= (type |end#0@@25|) BoxType)) (or (|BetreeGraph.__default.IsPathFromTo#canCall| (Lit |g#0@@26|) (Lit |path#0@@20|) (Lit |start#0@@25|) (Lit |end#0@@25|)) (and (and (and ($Is |g#0@@26| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@20| (TSeq Tclass.ReferenceType.Reference))) ($IsBox |start#0@@25| Tclass.ReferenceType.Reference)) ($IsBox |end#0@@25| Tclass.ReferenceType.Reference)))) (and (and (|BetreeGraph.__default.IsPath#canCall| (Lit |g#0@@26|) (Lit |path#0@@20|)) (=> (U_2_bool (Lit (bool_2_U (BetreeGraph.__default.IsPath (Lit |g#0@@26|) (Lit |path#0@@20|))))) (=> (< 1 (|Seq#Length| (Lit |path#0@@20|))) (=> (= (|Seq#Index| (Lit |path#0@@20|) (LitInt 0)) (Lit |start#0@@25|)) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |path#0@@20|)))))) (= (BetreeGraph.__default.IsPathFromTo (Lit |g#0@@26|) (Lit |path#0@@20|) (Lit |start#0@@25|) (Lit |end#0@@25|))  (and (and (and (BetreeGraph.__default.IsPath (Lit |g#0@@26|) (Lit |path#0@@20|)) (< 1 (|Seq#Length| (Lit |path#0@@20|)))) (= (|Seq#Index| (Lit |path#0@@20|) (LitInt 0)) (Lit |start#0@@25|))) (= (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@20|))) (Lit |end#0@@25|)))))) :qid |GraphidfyBetreeGraph.90:26| :weight 3 :skolemid |3263| :pattern ( (BetreeGraph.__default.IsPathFromTo (Lit |g#0@@26|) (Lit |path#0@@20|) (Lit |start#0@@25|) (Lit |end#0@@25|))) ))))
(assert (forall ((arg0@@601 T@U) (arg1@@282 T@U) ) (! (= (type (BetreeGraph.__default.ReachableReferences arg0@@601 arg1@@282)) (MapType0Type BoxType boolType)) :qid |funType:BetreeGraph.__default.ReachableReferences| :pattern ( (BetreeGraph.__default.ReachableReferences arg0@@601 arg1@@282)) )))
(assert  (=> true (forall ((|g#0@@27| T@U) (|p#0| T@U) ) (!  (=> (and (and (= (type |g#0@@27|) (IMapType BoxType BoxType)) (= (type |p#0|) BoxType)) (or (|BetreeGraph.__default.ReachableReferences#canCall| |g#0@@27| |p#0|) (and ($Is |g#0@@27| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($IsBox |p#0| Tclass.ReferenceType.Reference)))) ($Is (BetreeGraph.__default.ReachableReferences |g#0@@27| |p#0|) (TISet Tclass.ReferenceType.Reference))) :qid |GraphidfyBetreeGraph.95:32| :skolemid |3264| :pattern ( (BetreeGraph.__default.ReachableReferences |g#0@@27| |p#0|)) ))))
(assert (forall ((|g#0@@28| T@U) (|p#0@@0| T@U) ) (!  (=> (and (and (= (type |g#0@@28|) (IMapType BoxType BoxType)) (= (type |p#0@@0|) BoxType)) (and ($Is |g#0@@28| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($IsBox |p#0@@0| Tclass.ReferenceType.Reference))) (= (|BetreeGraph.__default.ReachableReferences#requires| |g#0@@28| |p#0@@0|) true)) :qid |GraphidfyBetreeGraph.95:32| :skolemid |3265| :pattern ( (|BetreeGraph.__default.ReachableReferences#requires| |g#0@@28| |p#0@@0|)) )))
(assert (forall ((arg0@@602 T@U) (arg1@@283 T@U) (arg2@@175 Int) (arg3@@122 Int) (arg4@@90 T@U) (arg5@@53 T@U) (arg6@@34 T@U) (arg7@@19 Int) (arg8@@8 T@U) ) (! (= (type (|lambda#110| arg0@@602 arg1@@283 arg2@@175 arg3@@122 arg4@@90 arg5@@53 arg6@@34 arg7@@19 arg8@@8)) (MapType0Type BoxType boolType)) :qid |funType:lambda#110| :pattern ( (|lambda#110| arg0@@602 arg1@@283 arg2@@175 arg3@@122 arg4@@90 arg5@@53 arg6@@34 arg7@@19 arg8@@8)) )))
(assert  (=> true (forall ((|g#0@@29| T@U) (|p#0@@1| T@U) ) (!  (=> (and (and (= (type |g#0@@29|) (IMapType BoxType BoxType)) (= (type |p#0@@1|) BoxType)) (or (|BetreeGraph.__default.ReachableReferences#canCall| |g#0@@29| |p#0@@1|) (and ($Is |g#0@@29| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($IsBox |p#0@@1| Tclass.ReferenceType.Reference)))) (and (forall ((|path#0@@21| T@U) ) (!  (=> (and (= (type |path#0@@21|) (SeqType BoxType)) ($Is |path#0@@21| (TSeq Tclass.ReferenceType.Reference))) (and (|BetreeGraph.__default.IsPath#canCall| |g#0@@29| |path#0@@21|) (=> (and (and (BetreeGraph.__default.IsPath |g#0@@29| |path#0@@21|) (< 1 (|Seq#Length| |path#0@@21|))) (= (|Seq#Index| |path#0@@21| (LitInt 0)) |p#0@@1|)) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |path#0@@21|)))) :qid |GraphidfyBetreeGraph.97:10| :skolemid |3267| :pattern ( (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@21|)) :pattern ( (|Seq#Index| |path#0@@21| 0)) :pattern ( (|Seq#Length| |path#0@@21|)) :pattern ( (BetreeGraph.__default.IsPath |g#0@@29| |path#0@@21|)) )) (= (BetreeGraph.__default.ReachableReferences |g#0@@29| |p#0@@1|) (|lambda#110| (TSeq Tclass.ReferenceType.Reference) |g#0@@29| 1 (LitInt 0) |p#0@@1| Tclass.ReferenceType.Reference |g#0@@29| 0 Tclass.ReferenceType.Reference)))) :qid |GraphidfyBetreeGraph.95:32| :skolemid |3268| :pattern ( (BetreeGraph.__default.ReachableReferences |g#0@@29| |p#0@@1|)) ))))
(assert  (=> true (forall ((|g#0@@30| T@U) (|p#0@@2| T@U) ) (!  (=> (and (and (= (type |g#0@@30|) (IMapType BoxType BoxType)) (= (type |p#0@@2|) BoxType)) (or (|BetreeGraph.__default.ReachableReferences#canCall| (Lit |g#0@@30|) (Lit |p#0@@2|)) (and ($Is |g#0@@30| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($IsBox |p#0@@2| Tclass.ReferenceType.Reference)))) (and (forall ((|path#1@@1| T@U) ) (!  (=> (and (= (type |path#1@@1|) (SeqType BoxType)) ($Is |path#1@@1| (TSeq Tclass.ReferenceType.Reference))) (and (|BetreeGraph.__default.IsPath#canCall| (Lit |g#0@@30|) |path#1@@1|) (=> (and (and (BetreeGraph.__default.IsPath (Lit |g#0@@30|) |path#1@@1|) (< 1 (|Seq#Length| |path#1@@1|))) (= (|Seq#Index| |path#1@@1| (LitInt 0)) (Lit |p#0@@2|))) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |path#1@@1|)))) :qid |GraphidfyBetreeGraph.97:10| :skolemid |3270| :pattern ( (Sequences.__default.Last Tclass.ReferenceType.Reference |path#1@@1|)) :pattern ( (|Seq#Index| |path#1@@1| 0)) :pattern ( (|Seq#Length| |path#1@@1|)) :pattern ( (BetreeGraph.__default.IsPath |g#0@@30| |path#1@@1|)) )) (= (BetreeGraph.__default.ReachableReferences (Lit |g#0@@30|) (Lit |p#0@@2|)) (|lambda#110| (TSeq Tclass.ReferenceType.Reference) (Lit |g#0@@30|) 1 (LitInt 0) (Lit |p#0@@2|) Tclass.ReferenceType.Reference |g#0@@30| 0 Tclass.ReferenceType.Reference)))) :qid |GraphidfyBetreeGraph.95:32| :weight 3 :skolemid |3271| :pattern ( (BetreeGraph.__default.ReachableReferences (Lit |g#0@@30|) (Lit |p#0@@2|))) ))))
(assert  (=> true (forall ((|g#0@@31| T@U) (|g'#0| T@U) (|p#0@@3| T@U) (|path#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type |g#0@@31|) (IMapType BoxType BoxType)) (= (type |g'#0|) (IMapType BoxType BoxType))) (= (type |p#0@@3|) BoxType)) (= (type |path#0@@22|) (SeqType BoxType))) (or (|BetreeGraph.__default.NewPath#canCall| |g#0@@31| |g'#0| |p#0@@3| |path#0@@22|) (and (and (and ($Is |g#0@@31| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@3| Tclass.ReferenceType.Reference)) ($Is |path#0@@22| (TSeq Tclass.ReferenceType.Reference))))) true) :qid |GraphidfyBetreeGraph.104:21| :skolemid |3272| :pattern ( (BetreeGraph.__default.NewPath |g#0@@31| |g'#0| |p#0@@3| |path#0@@22|)) ))))
(assert (forall ((|g#0@@32| T@U) (|g'#0@@0| T@U) (|p#0@@4| T@U) (|path#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type |g#0@@32|) (IMapType BoxType BoxType)) (= (type |g'#0@@0|) (IMapType BoxType BoxType))) (= (type |p#0@@4|) BoxType)) (= (type |path#0@@23|) (SeqType BoxType))) (and (and (and ($Is |g#0@@32| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@0| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@4| Tclass.ReferenceType.Reference)) ($Is |path#0@@23| (TSeq Tclass.ReferenceType.Reference)))) (= (|BetreeGraph.__default.NewPath#requires| |g#0@@32| |g'#0@@0| |p#0@@4| |path#0@@23|) true)) :qid |GraphidfyBetreeGraph.104:21| :skolemid |3273| :pattern ( (|BetreeGraph.__default.NewPath#requires| |g#0@@32| |g'#0@@0| |p#0@@4| |path#0@@23|)) )))
(assert  (=> true (forall ((|g#0@@33| T@U) (|g'#0@@1| T@U) (|p#0@@5| T@U) (|path#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type |g#0@@33|) (IMapType BoxType BoxType)) (= (type |g'#0@@1|) (IMapType BoxType BoxType))) (= (type |p#0@@5|) BoxType)) (= (type |path#0@@24|) (SeqType BoxType))) (or (|BetreeGraph.__default.NewPath#canCall| |g#0@@33| |g'#0@@1| |p#0@@5| |path#0@@24|) (and (and (and ($Is |g#0@@33| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@1| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@5| Tclass.ReferenceType.Reference)) ($Is |path#0@@24| (TSeq Tclass.ReferenceType.Reference))))) (and (and (|BetreeGraph.__default.IsPath#canCall| |g'#0@@1| |path#0@@24|) (=> (BetreeGraph.__default.IsPath |g'#0@@1| |path#0@@24|) (=> (< 1 (|Seq#Length| |path#0@@24|)) (=> (= (|Seq#Index| |path#0@@24| (LitInt 0)) |p#0@@5|) (=> (forall ((|i#0@@95| Int) ) (!  (=> true (=> (and (< 0 |i#0@@95|) (< |i#0@@95| (- (|Seq#Length| |path#0@@24|) 1))) (U_2_bool (MapType0Select (|ISet#Difference| (|IMap#Domain| |g'#0@@1|) (|IMap#Domain| |g#0@@33|)) (|Seq#Index| |path#0@@24| |i#0@@95|))))) :qid |GraphidfyBetreeGraph.108:16| :skolemid |3275| :pattern ( (|Seq#Index| |path#0@@24| |i#0@@95|)) )) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |path#0@@24|)))))) (= (BetreeGraph.__default.NewPath |g#0@@33| |g'#0@@1| |p#0@@5| |path#0@@24|)  (and (and (and (and (BetreeGraph.__default.IsPath |g'#0@@1| |path#0@@24|) (< 1 (|Seq#Length| |path#0@@24|))) (= (|Seq#Index| |path#0@@24| (LitInt 0)) |p#0@@5|)) (forall ((|i#0@@96| Int) ) (!  (=> true (=> (and (< 0 |i#0@@96|) (< |i#0@@96| (- (|Seq#Length| |path#0@@24|) 1))) (U_2_bool (MapType0Select (|ISet#Difference| (|IMap#Domain| |g'#0@@1|) (|IMap#Domain| |g#0@@33|)) (|Seq#Index| |path#0@@24| |i#0@@96|))))) :qid |GraphidfyBetreeGraph.108:16| :skolemid |3274| :pattern ( (|Seq#Index| |path#0@@24| |i#0@@96|)) ))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@33|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@24|))))))) :qid |GraphidfyBetreeGraph.104:21| :skolemid |3276| :pattern ( (BetreeGraph.__default.NewPath |g#0@@33| |g'#0@@1| |p#0@@5| |path#0@@24|)) ))))
(assert  (=> true (forall ((|g#0@@34| T@U) (|g'#0@@2| T@U) (|p#0@@6| T@U) (|path#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type |g#0@@34|) (IMapType BoxType BoxType)) (= (type |g'#0@@2|) (IMapType BoxType BoxType))) (= (type |p#0@@6|) BoxType)) (= (type |path#0@@25|) (SeqType BoxType))) (or (|BetreeGraph.__default.NewPath#canCall| |g#0@@34| |g'#0@@2| |p#0@@6| (Lit |path#0@@25|)) (and (and (and ($Is |g#0@@34| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@2| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@6| Tclass.ReferenceType.Reference)) ($Is |path#0@@25| (TSeq Tclass.ReferenceType.Reference))))) (and (and (|BetreeGraph.__default.IsPath#canCall| |g'#0@@2| (Lit |path#0@@25|)) (=> (BetreeGraph.__default.IsPath |g'#0@@2| (Lit |path#0@@25|)) (=> (< 1 (|Seq#Length| (Lit |path#0@@25|))) (=> (= (|Seq#Index| (Lit |path#0@@25|) (LitInt 0)) |p#0@@6|) (=> (forall ((|i#1@@23| Int) ) (!  (=> true (=> (and (< 0 |i#1@@23|) (< |i#1@@23| (- (|Seq#Length| (Lit |path#0@@25|)) 1))) (U_2_bool (MapType0Select (|ISet#Difference| (|IMap#Domain| |g'#0@@2|) (|IMap#Domain| |g#0@@34|)) (|Seq#Index| (Lit |path#0@@25|) |i#1@@23|))))) :qid |GraphidfyBetreeGraph.108:16| :skolemid |3278| :pattern ( (|Seq#Index| |path#0@@25| |i#1@@23|)) )) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |path#0@@25|))))))) (= (BetreeGraph.__default.NewPath |g#0@@34| |g'#0@@2| |p#0@@6| (Lit |path#0@@25|))  (and (and (and (and (BetreeGraph.__default.IsPath |g'#0@@2| (Lit |path#0@@25|)) (< 1 (|Seq#Length| (Lit |path#0@@25|)))) (= (|Seq#Index| (Lit |path#0@@25|) (LitInt 0)) |p#0@@6|)) (forall ((|i#1@@24| Int) ) (!  (=> true (=> (and (< 0 |i#1@@24|) (< |i#1@@24| (- (|Seq#Length| (Lit |path#0@@25|)) 1))) (U_2_bool (MapType0Select (|ISet#Difference| (|IMap#Domain| |g'#0@@2|) (|IMap#Domain| |g#0@@34|)) (|Seq#Index| (Lit |path#0@@25|) |i#1@@24|))))) :qid |GraphidfyBetreeGraph.108:16| :skolemid |3277| :pattern ( (|Seq#Index| |path#0@@25| |i#1@@24|)) ))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@34|) (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@25|)))))))) :qid |GraphidfyBetreeGraph.104:21| :weight 3 :skolemid |3279| :pattern ( (BetreeGraph.__default.NewPath |g#0@@34| |g'#0@@2| |p#0@@6| (Lit |path#0@@25|))) ))))
(assert  (=> true (forall ((|g#0@@35| T@U) (|g'#0@@3| T@U) (|p#0@@7| T@U) (|path#0@@26| T@U) ) (!  (=> (and (and (and (and (= (type |g#0@@35|) (IMapType BoxType BoxType)) (= (type |g'#0@@3|) (IMapType BoxType BoxType))) (= (type |p#0@@7|) BoxType)) (= (type |path#0@@26|) (SeqType BoxType))) (or (|BetreeGraph.__default.NewPath#canCall| (Lit |g#0@@35|) (Lit |g'#0@@3|) (Lit |p#0@@7|) (Lit |path#0@@26|)) (and (and (and ($Is |g#0@@35| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@3| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@7| Tclass.ReferenceType.Reference)) ($Is |path#0@@26| (TSeq Tclass.ReferenceType.Reference))))) (and (and (|BetreeGraph.__default.IsPath#canCall| (Lit |g'#0@@3|) (Lit |path#0@@26|)) (=> (U_2_bool (Lit (bool_2_U (BetreeGraph.__default.IsPath (Lit |g'#0@@3|) (Lit |path#0@@26|))))) (=> (< 1 (|Seq#Length| (Lit |path#0@@26|))) (=> (= (|Seq#Index| (Lit |path#0@@26|) (LitInt 0)) (Lit |p#0@@7|)) (=> (forall ((|i#2@@13| Int) ) (!  (=> true (=> (and (< 0 |i#2@@13|) (< |i#2@@13| (- (|Seq#Length| (Lit |path#0@@26|)) 1))) (U_2_bool (MapType0Select (|ISet#Difference| (|IMap#Domain| (Lit |g'#0@@3|)) (|IMap#Domain| (Lit |g#0@@35|))) (|Seq#Index| (Lit |path#0@@26|) |i#2@@13|))))) :qid |GraphidfyBetreeGraph.108:16| :skolemid |3281| :pattern ( (|Seq#Index| |path#0@@26| |i#2@@13|)) )) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |path#0@@26|))))))) (= (BetreeGraph.__default.NewPath (Lit |g#0@@35|) (Lit |g'#0@@3|) (Lit |p#0@@7|) (Lit |path#0@@26|))  (and (and (and (and (BetreeGraph.__default.IsPath (Lit |g'#0@@3|) (Lit |path#0@@26|)) (< 1 (|Seq#Length| (Lit |path#0@@26|)))) (= (|Seq#Index| (Lit |path#0@@26|) (LitInt 0)) (Lit |p#0@@7|))) (forall ((|i#2@@14| Int) ) (!  (=> true (=> (and (< 0 |i#2@@14|) (< |i#2@@14| (- (|Seq#Length| (Lit |path#0@@26|)) 1))) (U_2_bool (MapType0Select (|ISet#Difference| (|IMap#Domain| (Lit |g'#0@@3|)) (|IMap#Domain| (Lit |g#0@@35|))) (|Seq#Index| (Lit |path#0@@26|) |i#2@@14|))))) :qid |GraphidfyBetreeGraph.108:16| :skolemid |3280| :pattern ( (|Seq#Index| |path#0@@26| |i#2@@14|)) ))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@35|) (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@26|)))))))) :qid |GraphidfyBetreeGraph.104:21| :weight 3 :skolemid |3282| :pattern ( (BetreeGraph.__default.NewPath (Lit |g#0@@35|) (Lit |g'#0@@3|) (Lit |p#0@@7|) (Lit |path#0@@26|))) ))))
(assert (forall ((arg0@@603 T@U) (arg1@@284 T@U) (arg2@@176 T@U) ) (! (= (type (BetreeGraph.__default.NewlyReachableReferences arg0@@603 arg1@@284 arg2@@176)) (MapType0Type BoxType boolType)) :qid |funType:BetreeGraph.__default.NewlyReachableReferences| :pattern ( (BetreeGraph.__default.NewlyReachableReferences arg0@@603 arg1@@284 arg2@@176)) )))
(assert  (=> true (forall ((|g#0@@36| T@U) (|g'#0@@4| T@U) (|p#0@@8| T@U) ) (!  (=> (and (and (and (= (type |g#0@@36|) (IMapType BoxType BoxType)) (= (type |g'#0@@4|) (IMapType BoxType BoxType))) (= (type |p#0@@8|) BoxType)) (or (|BetreeGraph.__default.NewlyReachableReferences#canCall| |g#0@@36| |g'#0@@4| |p#0@@8|) (and (and ($Is |g#0@@36| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@4| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@8| Tclass.ReferenceType.Reference)))) ($Is (BetreeGraph.__default.NewlyReachableReferences |g#0@@36| |g'#0@@4| |p#0@@8|) (TISet Tclass.ReferenceType.Reference))) :qid |GraphidfyBetreeGraph.112:37| :skolemid |3283| :pattern ( (BetreeGraph.__default.NewlyReachableReferences |g#0@@36| |g'#0@@4| |p#0@@8|)) ))))
(assert (forall ((|g#0@@37| T@U) (|g'#0@@5| T@U) (|p#0@@9| T@U) ) (!  (=> (and (and (and (= (type |g#0@@37|) (IMapType BoxType BoxType)) (= (type |g'#0@@5|) (IMapType BoxType BoxType))) (= (type |p#0@@9|) BoxType)) (and (and ($Is |g#0@@37| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@5| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@9| Tclass.ReferenceType.Reference))) (= (|BetreeGraph.__default.NewlyReachableReferences#requires| |g#0@@37| |g'#0@@5| |p#0@@9|) true)) :qid |GraphidfyBetreeGraph.112:37| :skolemid |3284| :pattern ( (|BetreeGraph.__default.NewlyReachableReferences#requires| |g#0@@37| |g'#0@@5| |p#0@@9|)) )))
(assert (forall ((arg0@@604 T@U) (arg1@@285 T@U) (arg2@@177 T@U) (arg3@@123 T@U) (arg4@@91 T@U) (arg5@@54 T@U) (arg6@@35 T@U) (arg7@@20 T@U) (arg8@@9 T@U) ) (! (= (type (|lambda#112| arg0@@604 arg1@@285 arg2@@177 arg3@@123 arg4@@91 arg5@@54 arg6@@35 arg7@@20 arg8@@9)) (MapType0Type BoxType boolType)) :qid |funType:lambda#112| :pattern ( (|lambda#112| arg0@@604 arg1@@285 arg2@@177 arg3@@123 arg4@@91 arg5@@54 arg6@@35 arg7@@20 arg8@@9)) )))
(assert  (=> true (forall ((|g#0@@38| T@U) (|g'#0@@6| T@U) (|p#0@@10| T@U) ) (!  (=> (and (and (and (= (type |g#0@@38|) (IMapType BoxType BoxType)) (= (type |g'#0@@6|) (IMapType BoxType BoxType))) (= (type |p#0@@10|) BoxType)) (or (|BetreeGraph.__default.NewlyReachableReferences#canCall| |g#0@@38| |g'#0@@6| |p#0@@10|) (and (and ($Is |g#0@@38| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@6| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@10| Tclass.ReferenceType.Reference)))) (and (forall ((|path#0@@27| T@U) ) (!  (=> (and (= (type |path#0@@27|) (SeqType BoxType)) ($Is |path#0@@27| (TSeq Tclass.ReferenceType.Reference))) (and (|BetreeGraph.__default.NewPath#canCall| |g#0@@38| |g'#0@@6| |p#0@@10| |path#0@@27|) (=> (BetreeGraph.__default.NewPath |g#0@@38| |g'#0@@6| |p#0@@10| |path#0@@27|) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |path#0@@27|)))) :qid |GraphidfyBetreeGraph.114:10| :skolemid |3286| :pattern ( (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@27|)) :pattern ( (BetreeGraph.__default.NewPath |g#0@@38| |g'#0@@6| |p#0@@10| |path#0@@27|)) )) (= (BetreeGraph.__default.NewlyReachableReferences |g#0@@38| |g'#0@@6| |p#0@@10|) (|lambda#112| (TSeq Tclass.ReferenceType.Reference) |g#0@@38| |g'#0@@6| |p#0@@10| Tclass.ReferenceType.Reference |g#0@@38| |g'#0@@6| |p#0@@10| Tclass.ReferenceType.Reference)))) :qid |GraphidfyBetreeGraph.112:37| :skolemid |3287| :pattern ( (BetreeGraph.__default.NewlyReachableReferences |g#0@@38| |g'#0@@6| |p#0@@10|)) ))))
(assert  (=> true (forall ((|g#0@@39| T@U) (|g'#0@@7| T@U) (|p#0@@11| T@U) ) (!  (=> (and (and (and (= (type |g#0@@39|) (IMapType BoxType BoxType)) (= (type |g'#0@@7|) (IMapType BoxType BoxType))) (= (type |p#0@@11|) BoxType)) (or (|BetreeGraph.__default.NewlyReachableReferences#canCall| (Lit |g#0@@39|) (Lit |g'#0@@7|) (Lit |p#0@@11|)) (and (and ($Is |g#0@@39| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@7| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@11| Tclass.ReferenceType.Reference)))) (and (forall ((|path#1@@2| T@U) ) (!  (=> (and (= (type |path#1@@2|) (SeqType BoxType)) ($Is |path#1@@2| (TSeq Tclass.ReferenceType.Reference))) (and (|BetreeGraph.__default.NewPath#canCall| (Lit |g#0@@39|) (Lit |g'#0@@7|) (Lit |p#0@@11|) |path#1@@2|) (=> (BetreeGraph.__default.NewPath (Lit |g#0@@39|) (Lit |g'#0@@7|) (Lit |p#0@@11|) |path#1@@2|) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |path#1@@2|)))) :qid |GraphidfyBetreeGraph.114:10| :skolemid |3289| :pattern ( (Sequences.__default.Last Tclass.ReferenceType.Reference |path#1@@2|)) :pattern ( (BetreeGraph.__default.NewPath |g#0@@39| |g'#0@@7| |p#0@@11| |path#1@@2|)) )) (= (BetreeGraph.__default.NewlyReachableReferences (Lit |g#0@@39|) (Lit |g'#0@@7|) (Lit |p#0@@11|)) (|lambda#112| (TSeq Tclass.ReferenceType.Reference) (Lit |g#0@@39|) (Lit |g'#0@@7|) (Lit |p#0@@11|) Tclass.ReferenceType.Reference |g#0@@39| |g'#0@@7| |p#0@@11| Tclass.ReferenceType.Reference)))) :qid |GraphidfyBetreeGraph.112:37| :weight 3 :skolemid |3290| :pattern ( (BetreeGraph.__default.NewlyReachableReferences (Lit |g#0@@39|) (Lit |g'#0@@7|) (Lit |p#0@@11|))) ))))
(assert  (=> true (forall ((|g#0@@40| T@U) (|g'#0@@8| T@U) (|p#0@@12| T@U) ) (!  (=> (and (and (and (= (type |g#0@@40|) (IMapType BoxType BoxType)) (= (type |g'#0@@8|) (IMapType BoxType BoxType))) (= (type |p#0@@12|) BoxType)) (or (|BetreeGraph.__default.EditIsLocal#canCall| |g#0@@40| |g'#0@@8| |p#0@@12|) (and (and ($Is |g#0@@40| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@8| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@12| Tclass.ReferenceType.Reference)))) true) :qid |GraphidfyBetreeGraph.117:25| :skolemid |3291| :pattern ( (BetreeGraph.__default.EditIsLocal |g#0@@40| |g'#0@@8| |p#0@@12|)) ))))
(assert (forall ((|g#0@@41| T@U) (|g'#0@@9| T@U) (|p#0@@13| T@U) ) (!  (=> (and (and (and (= (type |g#0@@41|) (IMapType BoxType BoxType)) (= (type |g'#0@@9|) (IMapType BoxType BoxType))) (= (type |p#0@@13|) BoxType)) (and (and ($Is |g#0@@41| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@9| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@13| Tclass.ReferenceType.Reference))) (= (|BetreeGraph.__default.EditIsLocal#requires| |g#0@@41| |g'#0@@9| |p#0@@13|) true)) :qid |GraphidfyBetreeGraph.117:25| :skolemid |3292| :pattern ( (|BetreeGraph.__default.EditIsLocal#requires| |g#0@@41| |g'#0@@9| |p#0@@13|)) )))
(assert  (=> true (forall ((|g#0@@42| T@U) (|g'#0@@10| T@U) (|p#0@@14| T@U) ) (!  (=> (and (and (and (= (type |g#0@@42|) (IMapType BoxType BoxType)) (= (type |g'#0@@10|) (IMapType BoxType BoxType))) (= (type |p#0@@14|) BoxType)) (or (|BetreeGraph.__default.EditIsLocal#canCall| |g#0@@42| |g'#0@@10| |p#0@@14|) (and (and ($Is |g#0@@42| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@10| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@14| Tclass.ReferenceType.Reference)))) (and (and (forall ((|ref#0@@2| T@U) ) (!  (=> (and (and (= (type |ref#0@@2|) BoxType) ($IsBox |ref#0@@2| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|ISet#Difference| (|ISet#Intersection| (|IMap#Domain| |g#0@@42|) (|IMap#Domain| |g'#0@@10|)) (|ISet#UnionOne| (|ISet#Empty| BoxType) |p#0@@14|)) |ref#0@@2|))) (and (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@42|) |ref#0@@2|))) (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@10|) |ref#0@@2|))))) :qid |GraphidfyBetreeGraph.119:16| :skolemid |3294| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@10|) |ref#0@@2|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@42|) |ref#0@@2|))) :pattern ( (MapType0Select (|ISet#Difference| (|ISet#Intersection| (|IMap#Domain| |g#0@@42|) (|IMap#Domain| |g'#0@@10|)) (|ISet#UnionOne| (|ISet#Empty| BoxType) |p#0@@14|)) |ref#0@@2|)) )) (=> (forall ((|ref#0@@3| T@U) ) (!  (=> (and (and (= (type |ref#0@@3|) BoxType) ($IsBox |ref#0@@3| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|ISet#Difference| (|ISet#Intersection| (|IMap#Domain| |g#0@@42|) (|IMap#Domain| |g'#0@@10|)) (|ISet#UnionOne| (|ISet#Empty| BoxType) |p#0@@14|)) |ref#0@@3|))) (|ISet#Equal| (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@42|) |ref#0@@3|))) (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@10|) |ref#0@@3|))))) :qid |GraphidfyBetreeGraph.119:16| :skolemid |3295| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@10|) |ref#0@@3|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@42|) |ref#0@@3|))) :pattern ( (MapType0Select (|ISet#Difference| (|ISet#Intersection| (|IMap#Domain| |g#0@@42|) (|IMap#Domain| |g'#0@@10|)) (|ISet#UnionOne| (|ISet#Empty| BoxType) |p#0@@14|)) |ref#0@@3|)) )) (and (|BetreeGraph.__default.NewlyReachableReferences#canCall| |g#0@@42| |g'#0@@10| |p#0@@14|) (|BetreeGraph.__default.ReachableReferences#canCall| |g#0@@42| |p#0@@14|)))) (= (BetreeGraph.__default.EditIsLocal |g#0@@42| |g'#0@@10| |p#0@@14|)  (and (forall ((|ref#0@@4| T@U) ) (!  (=> (and (and (= (type |ref#0@@4|) BoxType) ($IsBox |ref#0@@4| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|ISet#Difference| (|ISet#Intersection| (|IMap#Domain| |g#0@@42|) (|IMap#Domain| |g'#0@@10|)) (|ISet#UnionOne| (|ISet#Empty| BoxType) |p#0@@14|)) |ref#0@@4|))) (|ISet#Equal| (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@42|) |ref#0@@4|))) (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@10|) |ref#0@@4|))))) :qid |GraphidfyBetreeGraph.119:16| :skolemid |3293| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@10|) |ref#0@@4|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@42|) |ref#0@@4|))) :pattern ( (MapType0Select (|ISet#Difference| (|ISet#Intersection| (|IMap#Domain| |g#0@@42|) (|IMap#Domain| |g'#0@@10|)) (|ISet#UnionOne| (|ISet#Empty| BoxType) |p#0@@14|)) |ref#0@@4|)) )) (|ISet#Subset| (BetreeGraph.__default.NewlyReachableReferences |g#0@@42| |g'#0@@10| |p#0@@14|) (BetreeGraph.__default.ReachableReferences |g#0@@42| |p#0@@14|)))))) :qid |GraphidfyBetreeGraph.117:25| :skolemid |3296| :pattern ( (BetreeGraph.__default.EditIsLocal |g#0@@42| |g'#0@@10| |p#0@@14|)) ))))
(assert  (=> true (forall ((|g#0@@43| T@U) (|g'#0@@11| T@U) (|p#0@@15| T@U) ) (!  (=> (and (and (and (= (type |g#0@@43|) (IMapType BoxType BoxType)) (= (type |g'#0@@11|) (IMapType BoxType BoxType))) (= (type |p#0@@15|) BoxType)) (or (|BetreeGraph.__default.EditIsLocal#canCall| (Lit |g#0@@43|) (Lit |g'#0@@11|) (Lit |p#0@@15|)) (and (and ($Is |g#0@@43| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@11| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@15| Tclass.ReferenceType.Reference)))) (and (and (forall ((|ref#1@@2| T@U) ) (!  (=> (and (and (= (type |ref#1@@2|) BoxType) ($IsBox |ref#1@@2| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|ISet#Difference| (|ISet#Intersection| (|IMap#Domain| (Lit |g#0@@43|)) (|IMap#Domain| (Lit |g'#0@@11|))) (|ISet#UnionOne| (|ISet#Empty| BoxType) (Lit |p#0@@15|))) |ref#1@@2|))) (and (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@43|)) |ref#1@@2|))) (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g'#0@@11|)) |ref#1@@2|))))) :qid |GraphidfyBetreeGraph.119:16| :skolemid |3298| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@11|) |ref#1@@2|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@43|) |ref#1@@2|))) :pattern ( (MapType0Select (|ISet#Difference| (|ISet#Intersection| (|IMap#Domain| |g#0@@43|) (|IMap#Domain| |g'#0@@11|)) (|ISet#UnionOne| (|ISet#Empty| BoxType) |p#0@@15|)) |ref#1@@2|)) )) (=> (forall ((|ref#1@@3| T@U) ) (!  (=> (and (and (= (type |ref#1@@3|) BoxType) ($IsBox |ref#1@@3| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|ISet#Difference| (|ISet#Intersection| (|IMap#Domain| (Lit |g#0@@43|)) (|IMap#Domain| (Lit |g'#0@@11|))) (|ISet#UnionOne| (|ISet#Empty| BoxType) (Lit |p#0@@15|))) |ref#1@@3|))) (|ISet#Equal| (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@43|)) |ref#1@@3|))) (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g'#0@@11|)) |ref#1@@3|))))) :qid |GraphidfyBetreeGraph.119:16| :skolemid |3299| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@11|) |ref#1@@3|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@43|) |ref#1@@3|))) :pattern ( (MapType0Select (|ISet#Difference| (|ISet#Intersection| (|IMap#Domain| |g#0@@43|) (|IMap#Domain| |g'#0@@11|)) (|ISet#UnionOne| (|ISet#Empty| BoxType) |p#0@@15|)) |ref#1@@3|)) )) (and (|BetreeGraph.__default.NewlyReachableReferences#canCall| (Lit |g#0@@43|) (Lit |g'#0@@11|) (Lit |p#0@@15|)) (|BetreeGraph.__default.ReachableReferences#canCall| (Lit |g#0@@43|) (Lit |p#0@@15|))))) (= (BetreeGraph.__default.EditIsLocal (Lit |g#0@@43|) (Lit |g'#0@@11|) (Lit |p#0@@15|))  (and (forall ((|ref#1@@4| T@U) ) (!  (=> (and (and (= (type |ref#1@@4|) BoxType) ($IsBox |ref#1@@4| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|ISet#Difference| (|ISet#Intersection| (|IMap#Domain| (Lit |g#0@@43|)) (|IMap#Domain| (Lit |g'#0@@11|))) (|ISet#UnionOne| (|ISet#Empty| BoxType) (Lit |p#0@@15|))) |ref#1@@4|))) (|ISet#Equal| (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@43|)) |ref#1@@4|))) (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g'#0@@11|)) |ref#1@@4|))))) :qid |GraphidfyBetreeGraph.119:16| :skolemid |3297| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@11|) |ref#1@@4|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@43|) |ref#1@@4|))) :pattern ( (MapType0Select (|ISet#Difference| (|ISet#Intersection| (|IMap#Domain| |g#0@@43|) (|IMap#Domain| |g'#0@@11|)) (|ISet#UnionOne| (|ISet#Empty| BoxType) |p#0@@15|)) |ref#1@@4|)) )) (|ISet#Subset| (BetreeGraph.__default.NewlyReachableReferences (Lit |g#0@@43|) (Lit |g'#0@@11|) (Lit |p#0@@15|)) (BetreeGraph.__default.ReachableReferences (Lit |g#0@@43|) (Lit |p#0@@15|))))))) :qid |GraphidfyBetreeGraph.117:25| :weight 3 :skolemid |3300| :pattern ( (BetreeGraph.__default.EditIsLocal (Lit |g#0@@43|) (Lit |g'#0@@11|) (Lit |p#0@@15|))) ))))
(assert  (=> true (forall ((|g#0@@44| T@U) (|g'#0@@12| T@U) ) (!  (=> (and (and (= (type |g#0@@44|) (IMapType BoxType BoxType)) (= (type |g'#0@@12|) (IMapType BoxType BoxType))) (or (|BetreeGraph.__default.NewNodesAreCycleFree#canCall| |g#0@@44| |g'#0@@12|) (and ($Is |g#0@@44| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@12| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))))) true) :qid |GraphidfyBetreeGraph.123:34| :skolemid |3301| :pattern ( (BetreeGraph.__default.NewNodesAreCycleFree |g#0@@44| |g'#0@@12|)) ))))
(assert (forall ((|g#0@@45| T@U) (|g'#0@@13| T@U) ) (!  (=> (and (and (= (type |g#0@@45|) (IMapType BoxType BoxType)) (= (type |g'#0@@13|) (IMapType BoxType BoxType))) (and ($Is |g#0@@45| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@13| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)))) (= (|BetreeGraph.__default.NewNodesAreCycleFree#requires| |g#0@@45| |g'#0@@13|) true)) :qid |GraphidfyBetreeGraph.123:34| :skolemid |3302| :pattern ( (|BetreeGraph.__default.NewNodesAreCycleFree#requires| |g#0@@45| |g'#0@@13|)) )))
(assert  (=> true (forall ((|g#0@@46| T@U) (|g'#0@@14| T@U) ) (!  (=> (and (and (= (type |g#0@@46|) (IMapType BoxType BoxType)) (= (type |g'#0@@14|) (IMapType BoxType BoxType))) (or (|BetreeGraph.__default.NewNodesAreCycleFree#canCall| |g#0@@46| |g'#0@@14|) (and ($Is |g#0@@46| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@14| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))))) (and (forall ((|path#0@@28| T@U) ) (!  (=> (and (= (type |path#0@@28|) (SeqType BoxType)) ($Is |path#0@@28| (TSeq Tclass.ReferenceType.Reference))) (and (|BetreeGraph.__default.IsPath#canCall| |g'#0@@14| |path#0@@28|) (=> (BetreeGraph.__default.IsPath |g'#0@@14| |path#0@@28|) (=> (forall ((|i#0@@97| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@97|) (< |i#0@@97| (|Seq#Length| |path#0@@28|))) (U_2_bool (MapType0Select (|ISet#Difference| (|IMap#Domain| |g'#0@@14|) (|IMap#Domain| |g#0@@46|)) (|Seq#Index| |path#0@@28| |i#0@@97|))))) :qid |GraphidfyBetreeGraph.127:18| :skolemid |3305| :pattern ( (|Seq#Index| |path#0@@28| |i#0@@97|)) )) (|BetreeGraph.__default.IsCycle#canCall| |g'#0@@14| |path#0@@28|))))) :qid |GraphidfyBetreeGraph.125:12| :skolemid |3306| :pattern ( (BetreeGraph.__default.IsCycle |g'#0@@14| |path#0@@28|)) :pattern ( (|Seq#Length| |path#0@@28|)) :pattern ( (BetreeGraph.__default.IsPath |g'#0@@14| |path#0@@28|)) )) (= (BetreeGraph.__default.NewNodesAreCycleFree |g#0@@46| |g'#0@@14|) (forall ((|path#0@@29| T@U) ) (!  (=> (and (and (= (type |path#0@@29|) (SeqType BoxType)) ($Is |path#0@@29| (TSeq Tclass.ReferenceType.Reference))) (and (BetreeGraph.__default.IsPath |g'#0@@14| |path#0@@29|) (forall ((|i#0@@98| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@98|) (< |i#0@@98| (|Seq#Length| |path#0@@29|))) (U_2_bool (MapType0Select (|ISet#Difference| (|IMap#Domain| |g'#0@@14|) (|IMap#Domain| |g#0@@46|)) (|Seq#Index| |path#0@@29| |i#0@@98|))))) :qid |GraphidfyBetreeGraph.127:18| :skolemid |3303| :pattern ( (|Seq#Index| |path#0@@29| |i#0@@98|)) )))) (not (BetreeGraph.__default.IsCycle |g'#0@@14| |path#0@@29|))) :qid |GraphidfyBetreeGraph.125:12| :skolemid |3304| :pattern ( (BetreeGraph.__default.IsCycle |g'#0@@14| |path#0@@29|)) :pattern ( (|Seq#Length| |path#0@@29|)) :pattern ( (BetreeGraph.__default.IsPath |g'#0@@14| |path#0@@29|)) ))))) :qid |GraphidfyBetreeGraph.123:34| :skolemid |3307| :pattern ( (BetreeGraph.__default.NewNodesAreCycleFree |g#0@@46| |g'#0@@14|)) ))))
(assert  (=> true (forall ((|g#0@@47| T@U) (|g'#0@@15| T@U) ) (!  (=> (and (and (= (type |g#0@@47|) (IMapType BoxType BoxType)) (= (type |g'#0@@15|) (IMapType BoxType BoxType))) (or (|BetreeGraph.__default.NewNodesAreCycleFree#canCall| (Lit |g#0@@47|) (Lit |g'#0@@15|)) (and ($Is |g#0@@47| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@15| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))))) (and (forall ((|path#1@@3| T@U) ) (!  (=> (and (= (type |path#1@@3|) (SeqType BoxType)) ($Is |path#1@@3| (TSeq Tclass.ReferenceType.Reference))) (and (|BetreeGraph.__default.IsPath#canCall| (Lit |g'#0@@15|) |path#1@@3|) (=> (BetreeGraph.__default.IsPath (Lit |g'#0@@15|) |path#1@@3|) (=> (forall ((|i#1@@25| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@25|) (< |i#1@@25| (|Seq#Length| |path#1@@3|))) (U_2_bool (MapType0Select (|ISet#Difference| (|IMap#Domain| (Lit |g'#0@@15|)) (|IMap#Domain| (Lit |g#0@@47|))) (|Seq#Index| |path#1@@3| |i#1@@25|))))) :qid |GraphidfyBetreeGraph.127:18| :skolemid |3310| :pattern ( (|Seq#Index| |path#1@@3| |i#1@@25|)) )) (|BetreeGraph.__default.IsCycle#canCall| (Lit |g'#0@@15|) |path#1@@3|))))) :qid |GraphidfyBetreeGraph.125:12| :skolemid |3311| :pattern ( (BetreeGraph.__default.IsCycle |g'#0@@15| |path#1@@3|)) :pattern ( (|Seq#Length| |path#1@@3|)) :pattern ( (BetreeGraph.__default.IsPath |g'#0@@15| |path#1@@3|)) )) (= (BetreeGraph.__default.NewNodesAreCycleFree (Lit |g#0@@47|) (Lit |g'#0@@15|)) (forall ((|path#1@@4| T@U) ) (!  (=> (and (and (= (type |path#1@@4|) (SeqType BoxType)) ($Is |path#1@@4| (TSeq Tclass.ReferenceType.Reference))) (and (BetreeGraph.__default.IsPath (Lit |g'#0@@15|) |path#1@@4|) (forall ((|i#1@@26| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@26|) (< |i#1@@26| (|Seq#Length| |path#1@@4|))) (U_2_bool (MapType0Select (|ISet#Difference| (|IMap#Domain| (Lit |g'#0@@15|)) (|IMap#Domain| (Lit |g#0@@47|))) (|Seq#Index| |path#1@@4| |i#1@@26|))))) :qid |GraphidfyBetreeGraph.127:18| :skolemid |3308| :pattern ( (|Seq#Index| |path#1@@4| |i#1@@26|)) )))) (not (BetreeGraph.__default.IsCycle (Lit |g'#0@@15|) |path#1@@4|))) :qid |GraphidfyBetreeGraph.125:12| :skolemid |3309| :pattern ( (BetreeGraph.__default.IsCycle |g'#0@@15| |path#1@@4|)) :pattern ( (|Seq#Length| |path#1@@4|)) :pattern ( (BetreeGraph.__default.IsPath |g'#0@@15| |path#1@@4|)) ))))) :qid |GraphidfyBetreeGraph.123:34| :weight 3 :skolemid |3312| :pattern ( (BetreeGraph.__default.NewNodesAreCycleFree (Lit |g#0@@47|) (Lit |g'#0@@15|))) ))))
(assert (forall (($ly@@301 T@U) (|path#0@@30| T@U) (|g#0@@48| T@U) ) (!  (=> (and (and (= (type $ly@@301) LayerTypeType) (= (type |path#0@@30|) (SeqType BoxType))) (= (type |g#0@@48|) (IMapType BoxType BoxType))) (= (BetreeGraph.__default.FirstInGraph ($LS $ly@@301) |path#0@@30| |g#0@@48|) (BetreeGraph.__default.FirstInGraph $ly@@301 |path#0@@30| |g#0@@48|))) :qid |GraphidfyBetreeGraph.131:12| :skolemid |3313| :pattern ( (BetreeGraph.__default.FirstInGraph ($LS $ly@@301) |path#0@@30| |g#0@@48|)) )))
(assert (forall (($ly@@302 T@U) (|path#0@@31| T@U) (|g#0@@49| T@U) ) (!  (=> (and (and (= (type $ly@@302) LayerTypeType) (= (type |path#0@@31|) (SeqType BoxType))) (= (type |g#0@@49|) (IMapType BoxType BoxType))) (= (BetreeGraph.__default.FirstInGraph $ly@@302 |path#0@@31| |g#0@@49|) (BetreeGraph.__default.FirstInGraph $LZ |path#0@@31| |g#0@@49|))) :qid |GraphidfyBetreeGraph.131:12| :skolemid |3314| :pattern ( (BetreeGraph.__default.FirstInGraph (AsFuelBottom $ly@@302) |path#0@@31| |g#0@@49|)) )))
(assert  (=> true (forall (($ly@@303 T@U) (|path#0@@32| T@U) (|g#0@@50| T@U) ) (!  (=> (and (and (and (= (type $ly@@303) LayerTypeType) (= (type |path#0@@32|) (SeqType BoxType))) (= (type |g#0@@50|) (IMapType BoxType BoxType))) (or (|BetreeGraph.__default.FirstInGraph#canCall| |path#0@@32| |g#0@@50|) (and (and ($Is |path#0@@32| (TSeq Tclass.ReferenceType.Reference)) ($Is |g#0@@50| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) (exists ((|i#0@@99| Int) ) (!  (and (and (<= (LitInt 0) |i#0@@99|) (< |i#0@@99| (|Seq#Length| |path#0@@32|))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@50|) (|Seq#Index| |path#0@@32| |i#0@@99|)))) :qid |GraphidfyBetreeGraph.132:21| :skolemid |3315| :pattern ( (|Seq#Index| |path#0@@32| |i#0@@99|)) ))))) (and (and (and (<= (LitInt 0) (BetreeGraph.__default.FirstInGraph $ly@@303 |path#0@@32| |g#0@@50|)) (< (BetreeGraph.__default.FirstInGraph $ly@@303 |path#0@@32| |g#0@@50|) (|Seq#Length| |path#0@@32|))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@50|) (|Seq#Index| |path#0@@32| (BetreeGraph.__default.FirstInGraph $ly@@303 |path#0@@32| |g#0@@50|))))) (forall ((|i#1@@27| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@27|) (< |i#1@@27| (BetreeGraph.__default.FirstInGraph $ly@@303 |path#0@@32| |g#0@@50|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@50|) (|Seq#Index| |path#0@@32| |i#1@@27|)))))) :qid |GraphidfyBetreeGraph.135:20| :skolemid |3316| :pattern ( (|Seq#Index| |path#0@@32| |i#1@@27|)) )))) :qid |GraphidfyBetreeGraph.131:12| :skolemid |3317| :pattern ( (BetreeGraph.__default.FirstInGraph $ly@@303 |path#0@@32| |g#0@@50|)) ))))
(assert (forall (($ly@@304 T@U) (|path#0@@33| T@U) (|g#0@@51| T@U) ) (!  (=> (and (and (and (= (type $ly@@304) LayerTypeType) (= (type |path#0@@33|) (SeqType BoxType))) (= (type |g#0@@51|) (IMapType BoxType BoxType))) (and ($Is |path#0@@33| (TSeq Tclass.ReferenceType.Reference)) ($Is |g#0@@51| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)))) (= (|BetreeGraph.__default.FirstInGraph#requires| $ly@@304 |path#0@@33| |g#0@@51|) (exists ((|i#2@@15| Int) ) (!  (and (and (<= (LitInt 0) |i#2@@15|) (< |i#2@@15| (|Seq#Length| |path#0@@33|))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@51|) (|Seq#Index| |path#0@@33| |i#2@@15|)))) :qid |GraphidfyBetreeGraph.132:21| :skolemid |3318| :pattern ( (|Seq#Index| |path#0@@33| |i#2@@15|)) )))) :qid |GraphidfyBetreeGraph.131:12| :skolemid |3319| :pattern ( (|BetreeGraph.__default.FirstInGraph#requires| $ly@@304 |path#0@@33| |g#0@@51|)) )))
(assert  (=> true (forall (($ly@@305 T@U) (|path#0@@34| T@U) (|g#0@@52| T@U) ) (!  (=> (and (and (and (= (type $ly@@305) LayerTypeType) (= (type |path#0@@34|) (SeqType BoxType))) (= (type |g#0@@52|) (IMapType BoxType BoxType))) (or (|BetreeGraph.__default.FirstInGraph#canCall| |path#0@@34| |g#0@@52|) (and (and ($Is |path#0@@34| (TSeq Tclass.ReferenceType.Reference)) ($Is |g#0@@52| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) (exists ((|i#2@@16| Int) ) (!  (and (and (<= (LitInt 0) |i#2@@16|) (< |i#2@@16| (|Seq#Length| |path#0@@34|))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@52|) (|Seq#Index| |path#0@@34| |i#2@@16|)))) :qid |GraphidfyBetreeGraph.132:21| :skolemid |3318| :pattern ( (|Seq#Index| |path#0@@34| |i#2@@16|)) ))))) (and (=> (not (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@52|) (|Seq#Index| |path#0@@34| (LitInt 0))))) (|BetreeGraph.__default.FirstInGraph#canCall| (|Seq#Drop| |path#0@@34| (LitInt 1)) |g#0@@52|)) (= (BetreeGraph.__default.FirstInGraph ($LS $ly@@305) |path#0@@34| |g#0@@52|) (ite (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@52|) (|Seq#Index| |path#0@@34| (LitInt 0)))) 0 (+ 1 (BetreeGraph.__default.FirstInGraph $ly@@305 (|Seq#Drop| |path#0@@34| (LitInt 1)) |g#0@@52|)))))) :qid |GraphidfyBetreeGraph.131:12| :skolemid |3320| :pattern ( (BetreeGraph.__default.FirstInGraph ($LS $ly@@305) |path#0@@34| |g#0@@52|)) ))))
(assert  (=> true (forall (($ly@@306 T@U) (|path#0@@35| T@U) (|g#0@@53| T@U) ) (!  (=> (and (and (and (= (type $ly@@306) LayerTypeType) (= (type |path#0@@35|) (SeqType BoxType))) (= (type |g#0@@53|) (IMapType BoxType BoxType))) (or (|BetreeGraph.__default.FirstInGraph#canCall| (Lit |path#0@@35|) |g#0@@53|) (and (and ($Is |path#0@@35| (TSeq Tclass.ReferenceType.Reference)) ($Is |g#0@@53| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) (exists ((|i#3@@9| Int) ) (!  (and (and (<= (LitInt 0) |i#3@@9|) (< |i#3@@9| (|Seq#Length| (Lit |path#0@@35|)))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@53|) (|Seq#Index| (Lit |path#0@@35|) |i#3@@9|)))) :qid |GraphidfyBetreeGraph.132:21| :skolemid |3321| :pattern ( (|Seq#Index| |path#0@@35| |i#3@@9|)) ))))) (and (=> (not (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@53|) (|Seq#Index| (Lit |path#0@@35|) (LitInt 0))))) (|BetreeGraph.__default.FirstInGraph#canCall| (Lit (|Seq#Drop| (Lit |path#0@@35|) (LitInt 1))) |g#0@@53|)) (= (BetreeGraph.__default.FirstInGraph ($LS $ly@@306) (Lit |path#0@@35|) |g#0@@53|) (ite (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@53|) (|Seq#Index| (Lit |path#0@@35|) (LitInt 0)))) 0 (+ 1 (BetreeGraph.__default.FirstInGraph ($LS $ly@@306) (Lit (|Seq#Drop| (Lit |path#0@@35|) (LitInt 1))) |g#0@@53|)))))) :qid |GraphidfyBetreeGraph.131:12| :weight 3 :skolemid |3322| :pattern ( (BetreeGraph.__default.FirstInGraph ($LS $ly@@306) (Lit |path#0@@35|) |g#0@@53|)) ))))
(assert  (=> true (forall (($ly@@307 T@U) (|path#0@@36| T@U) (|g#0@@54| T@U) ) (!  (=> (and (and (and (= (type $ly@@307) LayerTypeType) (= (type |path#0@@36|) (SeqType BoxType))) (= (type |g#0@@54|) (IMapType BoxType BoxType))) (or (|BetreeGraph.__default.FirstInGraph#canCall| (Lit |path#0@@36|) (Lit |g#0@@54|)) (and (and ($Is |path#0@@36| (TSeq Tclass.ReferenceType.Reference)) ($Is |g#0@@54| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) (exists ((|i#4@@3| Int) ) (!  (and (and (<= (LitInt 0) |i#4@@3|) (< |i#4@@3| (|Seq#Length| (Lit |path#0@@36|)))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@54|) (|Seq#Index| (Lit |path#0@@36|) |i#4@@3|)))) :qid |GraphidfyBetreeGraph.132:21| :skolemid |3323| :pattern ( (|Seq#Index| |path#0@@36| |i#4@@3|)) ))))) (and (=> (not (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@54|) (|Seq#Index| (Lit |path#0@@36|) (LitInt 0))))) (|BetreeGraph.__default.FirstInGraph#canCall| (Lit (|Seq#Drop| (Lit |path#0@@36|) (LitInt 1))) (Lit |g#0@@54|))) (= (BetreeGraph.__default.FirstInGraph ($LS $ly@@307) (Lit |path#0@@36|) (Lit |g#0@@54|)) (ite (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@54|) (|Seq#Index| (Lit |path#0@@36|) (LitInt 0)))) 0 (+ 1 (BetreeGraph.__default.FirstInGraph ($LS $ly@@307) (Lit (|Seq#Drop| (Lit |path#0@@36|) (LitInt 1))) (Lit |g#0@@54|))))))) :qid |GraphidfyBetreeGraph.131:12| :weight 3 :skolemid |3324| :pattern ( (BetreeGraph.__default.FirstInGraph ($LS $ly@@307) (Lit |path#0@@36|) (Lit |g#0@@54|))) ))))
(assert (forall ((arg0@@605 T@U) (arg1@@286 T@U) (arg2@@178 T@U) (arg3@@124 T@U) (arg4@@92 T@U) ) (! (= (type (BetreeGraph.__default.UndoLocalEdit arg0@@605 arg1@@286 arg2@@178 arg3@@124 arg4@@92)) (SeqType BoxType)) :qid |funType:BetreeGraph.__default.UndoLocalEdit| :pattern ( (BetreeGraph.__default.UndoLocalEdit arg0@@605 arg1@@286 arg2@@178 arg3@@124 arg4@@92)) )))
(assert (forall (($ly@@308 T@U) (|g#0@@55| T@U) (|g'#0@@16| T@U) (|p#0@@16| T@U) (|path#0@@37| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@308) LayerTypeType) (= (type |g#0@@55|) (IMapType BoxType BoxType))) (= (type |g'#0@@16|) (IMapType BoxType BoxType))) (= (type |p#0@@16|) BoxType)) (= (type |path#0@@37|) (SeqType BoxType))) (= (BetreeGraph.__default.UndoLocalEdit ($LS $ly@@308) |g#0@@55| |g'#0@@16| |p#0@@16| |path#0@@37|) (BetreeGraph.__default.UndoLocalEdit $ly@@308 |g#0@@55| |g'#0@@16| |p#0@@16| |path#0@@37|))) :qid |GraphidfyBetreeGraph.141:12| :skolemid |3325| :pattern ( (BetreeGraph.__default.UndoLocalEdit ($LS $ly@@308) |g#0@@55| |g'#0@@16| |p#0@@16| |path#0@@37|)) )))
(assert (forall (($ly@@309 T@U) (|g#0@@56| T@U) (|g'#0@@17| T@U) (|p#0@@17| T@U) (|path#0@@38| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@309) LayerTypeType) (= (type |g#0@@56|) (IMapType BoxType BoxType))) (= (type |g'#0@@17|) (IMapType BoxType BoxType))) (= (type |p#0@@17|) BoxType)) (= (type |path#0@@38|) (SeqType BoxType))) (= (BetreeGraph.__default.UndoLocalEdit $ly@@309 |g#0@@56| |g'#0@@17| |p#0@@17| |path#0@@38|) (BetreeGraph.__default.UndoLocalEdit $LZ |g#0@@56| |g'#0@@17| |p#0@@17| |path#0@@38|))) :qid |GraphidfyBetreeGraph.141:12| :skolemid |3326| :pattern ( (BetreeGraph.__default.UndoLocalEdit (AsFuelBottom $ly@@309) |g#0@@56| |g'#0@@17| |p#0@@17| |path#0@@38|)) )))
(assert  (=> true (forall (($ly@@310 T@U) (|g#0@@57| T@U) (|g'#0@@18| T@U) (|p#0@@18| T@U) (|path#0@@39| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@310) LayerTypeType) (= (type |g#0@@57|) (IMapType BoxType BoxType))) (= (type |g'#0@@18|) (IMapType BoxType BoxType))) (= (type |p#0@@18|) BoxType)) (= (type |path#0@@39|) (SeqType BoxType))) (or (|BetreeGraph.__default.UndoLocalEdit#canCall| |g#0@@57| |g'#0@@18| |p#0@@18| |path#0@@39|) (and (and (and (and ($Is |g#0@@57| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@18| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@18| Tclass.ReferenceType.Reference)) ($Is |path#0@@39| (TSeq Tclass.ReferenceType.Reference))) (and (and (and (and (and (BetreeGraph.__default.IsClosed |g#0@@57|) (< 1 (|Seq#Length| |path#0@@39|))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@57|) (|Seq#Index| |path#0@@39| (LitInt 0))))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@57|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@39|)))) (BetreeGraph.__default.EditIsLocal |g#0@@57| |g'#0@@18| |p#0@@18|)) (BetreeGraph.__default.IsPath |g'#0@@18| |path#0@@39|))))) (and (BetreeGraph.__default.IsPathFromTo |g#0@@57| (BetreeGraph.__default.UndoLocalEdit $ly@@310 |g#0@@57| |g'#0@@18| |p#0@@18| |path#0@@39|) (|Seq#Index| |path#0@@39| (LitInt 0)) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@39|)) ($Is (BetreeGraph.__default.UndoLocalEdit $ly@@310 |g#0@@57| |g'#0@@18| |p#0@@18| |path#0@@39|) (TSeq Tclass.ReferenceType.Reference)))) :qid |GraphidfyBetreeGraph.141:12| :skolemid |3327| :pattern ( (BetreeGraph.__default.UndoLocalEdit $ly@@310 |g#0@@57| |g'#0@@18| |p#0@@18| |path#0@@39|)) ))))
(assert (forall (($ly@@311 T@U) ($Heap@@43 T@U) (|g#0@@58| T@U) (|g'#0@@19| T@U) (|p#0@@19| T@U) (|path#0@@40| T@U) ) (!  (=> (and (and (and (and (and (and (= (type $ly@@311) LayerTypeType) (= (type $Heap@@43) (MapType0Type refType MapType1Type))) (= (type |g#0@@58|) (IMapType BoxType BoxType))) (= (type |g'#0@@19|) (IMapType BoxType BoxType))) (= (type |p#0@@19|) BoxType)) (= (type |path#0@@40|) (SeqType BoxType))) (and (and (and (and ($IsGoodHeap $Heap@@43) ($Is |g#0@@58| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($Is |g'#0@@19| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@19| Tclass.ReferenceType.Reference)) ($Is |path#0@@40| (TSeq Tclass.ReferenceType.Reference)))) (= (|BetreeGraph.__default.UndoLocalEdit#requires| $ly@@311 |g#0@@58| |g'#0@@19| |p#0@@19| |path#0@@40|)  (and (and (and (and (and (BetreeGraph.__default.IsClosed |g#0@@58|) (< 1 (|Seq#Length| |path#0@@40|))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@58|) (|Seq#Index| |path#0@@40| (LitInt 0))))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@58|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@40|)))) (BetreeGraph.__default.EditIsLocal |g#0@@58| |g'#0@@19| |p#0@@19|)) (BetreeGraph.__default.IsPath |g'#0@@19| |path#0@@40|)))) :qid |GraphidfyBetreeGraph.141:12| :skolemid |3328| :pattern ( (|BetreeGraph.__default.UndoLocalEdit#requires| $ly@@311 |g#0@@58| |g'#0@@19| |p#0@@19| |path#0@@40|) ($IsGoodHeap $Heap@@43)) )))
(assert (forall ((arg0@@606 T@U) (arg1@@287 T@U) (arg2@@179 T@U) ) (! (= (type (|$let#8_replacement| arg0@@606 arg1@@287 arg2@@179)) (SeqType BoxType)) :qid |funType:$let#8_replacement| :pattern ( (|$let#8_replacement| arg0@@606 arg1@@287 arg2@@179)) )))
(assert (forall ((g T@U) (path T@U) (wit T@U) ) (!  (=> (and (and (and (= (type g) (IMapType BoxType BoxType)) (= (type path) (SeqType BoxType))) (= (type wit) (SeqType BoxType))) (|$let#8$canCall| g path wit)) (and ($Is (|$let#8_replacement| g path wit) (TSeq Tclass.ReferenceType.Reference)) (BetreeGraph.__default.IsPathFromTo g (|$let#8_replacement| g path wit) (|Seq#Index| path (LitInt 0)) (Sequences.__default.Last Tclass.ReferenceType.Reference wit)))) :qid |GraphidfyBetreeGraph.154:7| :skolemid |3329| :pattern ( (|$let#8_replacement| g path wit)) )))
(assert  (=> true (forall (($ly@@312 T@U) ($Heap@@44 T@U) (|g#0@@59| T@U) (|g'#0@@20| T@U) (|p#0@@20| T@U) (|path#0@@41| T@U) ) (!  (=> (and (and (and (and (and (and (= (type $ly@@312) LayerTypeType) (= (type $Heap@@44) (MapType0Type refType MapType1Type))) (= (type |g#0@@59|) (IMapType BoxType BoxType))) (= (type |g'#0@@20|) (IMapType BoxType BoxType))) (= (type |p#0@@20|) BoxType)) (= (type |path#0@@41|) (SeqType BoxType))) (or (|BetreeGraph.__default.UndoLocalEdit#canCall| |g#0@@59| |g'#0@@20| |p#0@@20| |path#0@@41|) (and (and (and (and (and ($IsGoodHeap $Heap@@44) ($Is |g#0@@59| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($Is |g'#0@@20| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@20| Tclass.ReferenceType.Reference)) ($Is |path#0@@41| (TSeq Tclass.ReferenceType.Reference))) (and (and (and (and (and (BetreeGraph.__default.IsClosed |g#0@@59|) (< 1 (|Seq#Length| |path#0@@41|))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@59|) (|Seq#Index| |path#0@@41| (LitInt 0))))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@59|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@41|)))) (BetreeGraph.__default.EditIsLocal |g#0@@59| |g'#0@@20| |p#0@@20|)) (BetreeGraph.__default.IsPath |g'#0@@20| |path#0@@41|))))) (and (and (=> (= (|Seq#Index| |path#0@@41| (LitInt 0)) |p#0@@20|) (and (|BetreeGraph.__default.FirstInGraph#canCall| (|Seq#Drop| |path#0@@41| (LitInt 1)) |g#0@@59|) (let ((|len#0| (+ 1 (BetreeGraph.__default.FirstInGraph ($LS $LZ) (|Seq#Drop| |path#0@@41| (LitInt 1)) |g#0@@59|)))) (let ((|wit#0| (|Seq#Take| |path#0@@41| (+ |len#0| 1)))) (and (|$let#8$canCall| |g#0@@59| |path#0@@41| |wit#0|) (=> (< |len#0| (- (|Seq#Length| |path#0@@41|) 1)) (and (|Sequences.__default.DropLast#canCall| Tclass.ReferenceType.Reference (|$let#8_replacement| |g#0@@59| |path#0@@41| |wit#0|)) (|BetreeGraph.__default.UndoLocalEdit#canCall| |g#0@@59| |g'#0@@20| |p#0@@20| (|Seq#Drop| |path#0@@41| |len#0|))))))))) (=> (not (= (|Seq#Index| |path#0@@41| (LitInt 0)) |p#0@@20|)) (=> (not (= (|Seq#Length| |path#0@@41|) (LitInt 2))) (|BetreeGraph.__default.UndoLocalEdit#canCall| |g#0@@59| |g'#0@@20| |p#0@@20| (|Seq#Drop| |path#0@@41| (LitInt 1)))))) (= (BetreeGraph.__default.UndoLocalEdit ($LS $ly@@312) |g#0@@59| |g'#0@@20| |p#0@@20| |path#0@@41|) (ite (= (|Seq#Index| |path#0@@41| (LitInt 0)) |p#0@@20|) (let ((|len#0@@0| (+ 1 (BetreeGraph.__default.FirstInGraph ($LS $LZ) (|Seq#Drop| |path#0@@41| (LitInt 1)) |g#0@@59|)))) (let ((|wit#0@@0| (|Seq#Take| |path#0@@41| (+ |len#0@@0| 1)))) (let ((|replacement#0| (|$let#8_replacement| |g#0@@59| |path#0@@41| |wit#0@@0|))) (ite (< |len#0@@0| (- (|Seq#Length| |path#0@@41|) 1)) (|Seq#Append| (Sequences.__default.DropLast Tclass.ReferenceType.Reference |replacement#0|) (BetreeGraph.__default.UndoLocalEdit $ly@@312 |g#0@@59| |g'#0@@20| |p#0@@20| (|Seq#Drop| |path#0@@41| |len#0@@0|))) |replacement#0|)))) (ite (= (|Seq#Length| |path#0@@41|) (LitInt 2)) |path#0@@41| (|Seq#Append| (|Seq#Take| |path#0@@41| (LitInt 1)) (BetreeGraph.__default.UndoLocalEdit $ly@@312 |g#0@@59| |g'#0@@20| |p#0@@20| (|Seq#Drop| |path#0@@41| (LitInt 1))))))))) :qid |GraphidfyBetreeGraph.141:12| :skolemid |3330| :pattern ( (BetreeGraph.__default.UndoLocalEdit ($LS $ly@@312) |g#0@@59| |g'#0@@20| |p#0@@20| |path#0@@41|) ($IsGoodHeap $Heap@@44)) ))))
(assert  (=> true (forall (($ly@@313 T@U) ($Heap@@45 T@U) (|g#0@@60| T@U) (|g'#0@@21| T@U) (|p#0@@21| T@U) (|path#0@@42| T@U) ) (!  (=> (and (and (and (and (and (and (= (type $ly@@313) LayerTypeType) (= (type $Heap@@45) (MapType0Type refType MapType1Type))) (= (type |g#0@@60|) (IMapType BoxType BoxType))) (= (type |g'#0@@21|) (IMapType BoxType BoxType))) (= (type |p#0@@21|) BoxType)) (= (type |path#0@@42|) (SeqType BoxType))) (or (|BetreeGraph.__default.UndoLocalEdit#canCall| |g#0@@60| |g'#0@@21| |p#0@@21| (Lit |path#0@@42|)) (and (and (and (and (and ($IsGoodHeap $Heap@@45) ($Is |g#0@@60| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($Is |g'#0@@21| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@21| Tclass.ReferenceType.Reference)) ($Is |path#0@@42| (TSeq Tclass.ReferenceType.Reference))) (and (and (and (and (and (BetreeGraph.__default.IsClosed |g#0@@60|) (< 1 (|Seq#Length| (Lit |path#0@@42|)))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@60|) (|Seq#Index| (Lit |path#0@@42|) (LitInt 0))))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@60|) (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@42|)))))) (BetreeGraph.__default.EditIsLocal |g#0@@60| |g'#0@@21| |p#0@@21|)) (BetreeGraph.__default.IsPath |g'#0@@21| (Lit |path#0@@42|)))))) (and (and (=> (= (|Seq#Index| (Lit |path#0@@42|) (LitInt 0)) |p#0@@21|) (and (|BetreeGraph.__default.FirstInGraph#canCall| (Lit (|Seq#Drop| (Lit |path#0@@42|) (LitInt 1))) |g#0@@60|) (let ((|len#1| (+ 1 (BetreeGraph.__default.FirstInGraph ($LS $LZ) (Lit (|Seq#Drop| (Lit |path#0@@42|) (LitInt 1))) |g#0@@60|)))) (let ((|wit#2| (|Seq#Take| (Lit |path#0@@42|) (+ |len#1| 1)))) (and (|$let#8$canCall| |g#0@@60| (Lit |path#0@@42|) |wit#2|) (=> (< |len#1| (- (|Seq#Length| (Lit |path#0@@42|)) 1)) (and (|Sequences.__default.DropLast#canCall| Tclass.ReferenceType.Reference (|$let#8_replacement| |g#0@@60| (Lit |path#0@@42|) |wit#2|)) (|BetreeGraph.__default.UndoLocalEdit#canCall| |g#0@@60| |g'#0@@21| |p#0@@21| (|Seq#Drop| (Lit |path#0@@42|) |len#1|))))))))) (=> (not (= (|Seq#Index| (Lit |path#0@@42|) (LitInt 0)) |p#0@@21|)) (=> (not (= (|Seq#Length| (Lit |path#0@@42|)) (LitInt 2))) (|BetreeGraph.__default.UndoLocalEdit#canCall| |g#0@@60| |g'#0@@21| |p#0@@21| (Lit (|Seq#Drop| (Lit |path#0@@42|) (LitInt 1))))))) (= (BetreeGraph.__default.UndoLocalEdit ($LS $ly@@313) |g#0@@60| |g'#0@@21| |p#0@@21| (Lit |path#0@@42|)) (ite (= (|Seq#Index| (Lit |path#0@@42|) (LitInt 0)) |p#0@@21|) (let ((|len#1@@0| (+ 1 (BetreeGraph.__default.FirstInGraph ($LS $LZ) (Lit (|Seq#Drop| (Lit |path#0@@42|) (LitInt 1))) |g#0@@60|)))) (let ((|wit#2@@0| (|Seq#Take| (Lit |path#0@@42|) (+ |len#1@@0| 1)))) (let ((|replacement#1| (|$let#8_replacement| |g#0@@60| (Lit |path#0@@42|) |wit#2@@0|))) (ite (< |len#1@@0| (- (|Seq#Length| (Lit |path#0@@42|)) 1)) (|Seq#Append| (Sequences.__default.DropLast Tclass.ReferenceType.Reference |replacement#1|) (BetreeGraph.__default.UndoLocalEdit ($LS $ly@@313) |g#0@@60| |g'#0@@21| |p#0@@21| (|Seq#Drop| (Lit |path#0@@42|) |len#1@@0|))) |replacement#1|)))) (ite (= (|Seq#Length| (Lit |path#0@@42|)) (LitInt 2)) |path#0@@42| (|Seq#Append| (|Seq#Take| (Lit |path#0@@42|) (LitInt 1)) (BetreeGraph.__default.UndoLocalEdit ($LS $ly@@313) |g#0@@60| |g'#0@@21| |p#0@@21| (Lit (|Seq#Drop| (Lit |path#0@@42|) (LitInt 1)))))))))) :qid |GraphidfyBetreeGraph.141:12| :weight 3 :skolemid |3331| :pattern ( (BetreeGraph.__default.UndoLocalEdit ($LS $ly@@313) |g#0@@60| |g'#0@@21| |p#0@@21| (Lit |path#0@@42|)) ($IsGoodHeap $Heap@@45)) ))))
(assert  (=> true (forall (($ly@@314 T@U) ($Heap@@46 T@U) (|g#0@@61| T@U) (|g'#0@@22| T@U) (|p#0@@22| T@U) (|path#0@@43| T@U) ) (!  (=> (and (and (and (and (and (and (= (type $ly@@314) LayerTypeType) (= (type $Heap@@46) (MapType0Type refType MapType1Type))) (= (type |g#0@@61|) (IMapType BoxType BoxType))) (= (type |g'#0@@22|) (IMapType BoxType BoxType))) (= (type |p#0@@22|) BoxType)) (= (type |path#0@@43|) (SeqType BoxType))) (or (|BetreeGraph.__default.UndoLocalEdit#canCall| (Lit |g#0@@61|) (Lit |g'#0@@22|) (Lit |p#0@@22|) (Lit |path#0@@43|)) (and (and (and (and (and ($IsGoodHeap $Heap@@46) ($Is |g#0@@61| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($Is |g'#0@@22| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@22| Tclass.ReferenceType.Reference)) ($Is |path#0@@43| (TSeq Tclass.ReferenceType.Reference))) (and (and (and (and (and (U_2_bool (Lit (bool_2_U (BetreeGraph.__default.IsClosed (Lit |g#0@@61|))))) (< 1 (|Seq#Length| (Lit |path#0@@43|)))) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g#0@@61|))) (|Seq#Index| (Lit |path#0@@43|) (LitInt 0))))) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g#0@@61|))) (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@43|)))))) (U_2_bool (Lit (bool_2_U (BetreeGraph.__default.EditIsLocal (Lit |g#0@@61|) (Lit |g'#0@@22|) (Lit |p#0@@22|)))))) (U_2_bool (Lit (bool_2_U (BetreeGraph.__default.IsPath (Lit |g'#0@@22|) (Lit |path#0@@43|))))))))) (and (and (=> (= (|Seq#Index| (Lit |path#0@@43|) (LitInt 0)) (Lit |p#0@@22|)) (and (|BetreeGraph.__default.FirstInGraph#canCall| (Lit (|Seq#Drop| (Lit |path#0@@43|) (LitInt 1))) (Lit |g#0@@61|)) (let ((|len#2| (LitInt (+ 1 (BetreeGraph.__default.FirstInGraph ($LS $LZ) (Lit (|Seq#Drop| (Lit |path#0@@43|) (LitInt 1))) (Lit |g#0@@61|)))))) (let ((|wit#3| (|Seq#Take| (Lit |path#0@@43|) (+ |len#2| 1)))) (and (|$let#8$canCall| (Lit |g#0@@61|) (Lit |path#0@@43|) |wit#3|) (=> (< |len#2| (- (|Seq#Length| (Lit |path#0@@43|)) 1)) (and (|Sequences.__default.DropLast#canCall| Tclass.ReferenceType.Reference (|$let#8_replacement| (Lit |g#0@@61|) (Lit |path#0@@43|) |wit#3|)) (|BetreeGraph.__default.UndoLocalEdit#canCall| (Lit |g#0@@61|) (Lit |g'#0@@22|) (Lit |p#0@@22|) (|Seq#Drop| (Lit |path#0@@43|) |len#2|))))))))) (=> (not (= (|Seq#Index| (Lit |path#0@@43|) (LitInt 0)) (Lit |p#0@@22|))) (=> (not (= (|Seq#Length| (Lit |path#0@@43|)) (LitInt 2))) (|BetreeGraph.__default.UndoLocalEdit#canCall| (Lit |g#0@@61|) (Lit |g'#0@@22|) (Lit |p#0@@22|) (Lit (|Seq#Drop| (Lit |path#0@@43|) (LitInt 1))))))) (= (BetreeGraph.__default.UndoLocalEdit ($LS $ly@@314) (Lit |g#0@@61|) (Lit |g'#0@@22|) (Lit |p#0@@22|) (Lit |path#0@@43|)) (ite (= (|Seq#Index| (Lit |path#0@@43|) (LitInt 0)) (Lit |p#0@@22|)) (let ((|len#2@@0| (LitInt (+ 1 (BetreeGraph.__default.FirstInGraph ($LS $LZ) (Lit (|Seq#Drop| (Lit |path#0@@43|) (LitInt 1))) (Lit |g#0@@61|)))))) (let ((|wit#3@@0| (Lit (|Seq#Take| (Lit |path#0@@43|) (LitInt (+ |len#2@@0| 1)))))) (let ((|replacement#2| (|$let#8_replacement| (Lit |g#0@@61|) (Lit |path#0@@43|) |wit#3@@0|))) (ite (< |len#2@@0| (- (|Seq#Length| (Lit |path#0@@43|)) 1)) (|Seq#Append| (Sequences.__default.DropLast Tclass.ReferenceType.Reference |replacement#2|) (BetreeGraph.__default.UndoLocalEdit ($LS $ly@@314) (Lit |g#0@@61|) (Lit |g'#0@@22|) (Lit |p#0@@22|) (Lit (|Seq#Drop| (Lit |path#0@@43|) |len#2@@0|)))) |replacement#2|)))) (ite (= (|Seq#Length| (Lit |path#0@@43|)) (LitInt 2)) |path#0@@43| (|Seq#Append| (|Seq#Take| (Lit |path#0@@43|) (LitInt 1)) (BetreeGraph.__default.UndoLocalEdit ($LS $ly@@314) (Lit |g#0@@61|) (Lit |g'#0@@22|) (Lit |p#0@@22|) (Lit (|Seq#Drop| (Lit |path#0@@43|) (LitInt 1)))))))))) :qid |GraphidfyBetreeGraph.141:12| :weight 3 :skolemid |3332| :pattern ( (BetreeGraph.__default.UndoLocalEdit ($LS $ly@@314) (Lit |g#0@@61|) (Lit |g'#0@@22|) (Lit |p#0@@22|) (Lit |path#0@@43|)) ($IsGoodHeap $Heap@@46)) ))))
(assert (forall ((arg0@@607 T@U) (arg1@@288 T@U) ) (! (= (type (|#BetreeGraph.Op.AllocOp| arg0@@607 arg1@@288)) DatatypeTypeType) :qid |funType:#BetreeGraph.Op.AllocOp| :pattern ( (|#BetreeGraph.Op.AllocOp| arg0@@607 arg1@@288)) )))
(assert (forall ((|a#0#0#0@@4| T@U) (|a#0#1#0@@1| T@U) ) (!  (=> (and (= (type |a#0#0#0@@4|) BoxType) (= (type |a#0#1#0@@1|) DatatypeTypeType)) (= (DatatypeCtorId (|#BetreeGraph.Op.AllocOp| |a#0#0#0@@4| |a#0#1#0@@1|)) |##BetreeGraph.Op.AllocOp|)) :qid |GraphidfyBetreeGraph.44:15| :skolemid |3333| :pattern ( (|#BetreeGraph.Op.AllocOp| |a#0#0#0@@4| |a#0#1#0@@1|)) )))
(assert (forall ((d@@163 T@U) ) (!  (=> (= (type d@@163) DatatypeTypeType) (= (BetreeGraph.Op.AllocOp_q d@@163) (= (DatatypeCtorId d@@163) |##BetreeGraph.Op.AllocOp|))) :qid |unknown.0:0| :skolemid |3334| :pattern ( (BetreeGraph.Op.AllocOp_q d@@163)) )))
(assert (forall ((d@@164 T@U) ) (!  (=> (and (= (type d@@164) DatatypeTypeType) (BetreeGraph.Op.AllocOp_q d@@164)) (exists ((|a#1#0#0@@4| T@U) (|a#1#1#0@@1| T@U) ) (!  (and (and (= (type |a#1#0#0@@4|) BoxType) (= (type |a#1#1#0@@1|) DatatypeTypeType)) (= d@@164 (|#BetreeGraph.Op.AllocOp| |a#1#0#0@@4| |a#1#1#0@@1|))) :qid |GraphidfyBetreeGraph.44:15| :skolemid |3335| :no-pattern (type |a#1#0#0@@4|) :no-pattern (type |a#1#1#0@@1|) :no-pattern (U_2_int |a#1#0#0@@4|) :no-pattern (U_2_bool |a#1#0#0@@4|) :no-pattern (U_2_int |a#1#1#0@@1|) :no-pattern (U_2_bool |a#1#1#0@@1|) ))) :qid |unknown.0:0| :skolemid |3336| :pattern ( (BetreeGraph.Op.AllocOp_q d@@164)) )))
(assert (= (type Tclass.BetreeGraph.Op) TyType))
(assert (= (Tag Tclass.BetreeGraph.Op) Tagclass.BetreeGraph.Op))
(assert (= (TagFamily Tclass.BetreeGraph.Op) tytagFamily$Op))
(assert (forall ((bx@@187 T@U) ) (!  (=> (and (= (type bx@@187) BoxType) ($IsBox bx@@187 Tclass.BetreeGraph.Op)) (and (= ($Box ($Unbox DatatypeTypeType bx@@187)) bx@@187) ($Is ($Unbox DatatypeTypeType bx@@187) Tclass.BetreeGraph.Op))) :qid |unknown.0:0| :skolemid |3337| :pattern ( ($IsBox bx@@187 Tclass.BetreeGraph.Op)) )))
(assert (forall ((|a#2#0#0@@4| T@U) (|a#2#1#0@@1| T@U) ) (!  (=> (and (= (type |a#2#0#0@@4|) BoxType) (= (type |a#2#1#0@@1|) DatatypeTypeType)) (= ($Is (|#BetreeGraph.Op.AllocOp| |a#2#0#0@@4| |a#2#1#0@@1|) Tclass.BetreeGraph.Op)  (and ($IsBox |a#2#0#0@@4| Tclass.ReferenceType.Reference) ($Is |a#2#1#0@@1| Tclass.BetreeGraph.Node)))) :qid |GraphidfyBetreeGraph.44:15| :skolemid |3338| :pattern ( ($Is (|#BetreeGraph.Op.AllocOp| |a#2#0#0@@4| |a#2#1#0@@1|) Tclass.BetreeGraph.Op)) )))
(assert (forall ((|a#3#0#0@@4| T@U) (|a#3#1#0@@1| T@U) ($h@@166 T@U) ) (!  (=> (and (and (and (= (type |a#3#0#0@@4|) BoxType) (= (type |a#3#1#0@@1|) DatatypeTypeType)) (= (type $h@@166) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@166)) (= ($IsAlloc (|#BetreeGraph.Op.AllocOp| |a#3#0#0@@4| |a#3#1#0@@1|) Tclass.BetreeGraph.Op $h@@166)  (and ($IsAllocBox |a#3#0#0@@4| Tclass.ReferenceType.Reference $h@@166) ($IsAlloc |a#3#1#0@@1| Tclass.BetreeGraph.Node $h@@166)))) :qid |GraphidfyBetreeGraph.44:15| :skolemid |3339| :pattern ( ($IsAlloc (|#BetreeGraph.Op.AllocOp| |a#3#0#0@@4| |a#3#1#0@@1|) Tclass.BetreeGraph.Op $h@@166)) )))
(assert (forall ((arg0@@608 T@U) ) (! (= (type (BetreeGraph.Op.ref arg0@@608)) BoxType) :qid |funType:BetreeGraph.Op.ref| :pattern ( (BetreeGraph.Op.ref arg0@@608)) )))
(assert (forall ((d@@165 T@U) ($h@@167 T@U) ) (!  (=> (and (and (= (type d@@165) DatatypeTypeType) (= (type $h@@167) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@167) (and (BetreeGraph.Op.AllocOp_q d@@165) ($IsAlloc d@@165 Tclass.BetreeGraph.Op $h@@167)))) ($IsAllocBox (BetreeGraph.Op.ref d@@165) Tclass.ReferenceType.Reference $h@@167)) :qid |unknown.0:0| :skolemid |3340| :pattern ( ($IsAllocBox (BetreeGraph.Op.ref d@@165) Tclass.ReferenceType.Reference $h@@167)) )))
(assert (forall ((arg0@@609 T@U) ) (! (= (type (BetreeGraph.Op.node arg0@@609)) DatatypeTypeType) :qid |funType:BetreeGraph.Op.node| :pattern ( (BetreeGraph.Op.node arg0@@609)) )))
(assert (forall ((d@@166 T@U) ($h@@168 T@U) ) (!  (=> (and (and (= (type d@@166) DatatypeTypeType) (= (type $h@@168) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@168) (and (BetreeGraph.Op.AllocOp_q d@@166) ($IsAlloc d@@166 Tclass.BetreeGraph.Op $h@@168)))) ($IsAlloc (BetreeGraph.Op.node d@@166) Tclass.BetreeGraph.Node $h@@168)) :qid |unknown.0:0| :skolemid |3341| :pattern ( ($IsAlloc (BetreeGraph.Op.node d@@166) Tclass.BetreeGraph.Node $h@@168)) )))
(assert (forall ((|a#4#0#0@@4| T@U) (|a#4#1#0@@1| T@U) ) (!  (=> (and (= (type |a#4#0#0@@4|) BoxType) (= (type |a#4#1#0@@1|) DatatypeTypeType)) (= (|#BetreeGraph.Op.AllocOp| (Lit |a#4#0#0@@4|) (Lit |a#4#1#0@@1|)) (Lit (|#BetreeGraph.Op.AllocOp| |a#4#0#0@@4| |a#4#1#0@@1|)))) :qid |GraphidfyBetreeGraph.44:15| :skolemid |3342| :pattern ( (|#BetreeGraph.Op.AllocOp| (Lit |a#4#0#0@@4|) (Lit |a#4#1#0@@1|))) )))
(assert (forall ((|a#5#0#0@@5| T@U) (|a#5#1#0@@1| T@U) ) (!  (=> (and (= (type |a#5#0#0@@5|) BoxType) (= (type |a#5#1#0@@1|) DatatypeTypeType)) (= (BetreeGraph.Op.ref (|#BetreeGraph.Op.AllocOp| |a#5#0#0@@5| |a#5#1#0@@1|)) |a#5#0#0@@5|)) :qid |GraphidfyBetreeGraph.44:15| :skolemid |3343| :pattern ( (|#BetreeGraph.Op.AllocOp| |a#5#0#0@@5| |a#5#1#0@@1|)) )))
(assert (forall ((|a#6#0#0@@5| T@U) (|a#6#1#0@@1| T@U) ) (!  (=> (and (= (type |a#6#0#0@@5|) BoxType) (= (type |a#6#1#0@@1|) DatatypeTypeType)) (= (BetreeGraph.Op.node (|#BetreeGraph.Op.AllocOp| |a#6#0#0@@5| |a#6#1#0@@1|)) |a#6#1#0@@1|)) :qid |GraphidfyBetreeGraph.44:15| :skolemid |3344| :pattern ( (|#BetreeGraph.Op.AllocOp| |a#6#0#0@@5| |a#6#1#0@@1|)) )))
(assert (forall ((|a#7#0#0@@5| T@U) (|a#7#1#0@@1| T@U) ) (!  (=> (and (= (type |a#7#0#0@@5|) BoxType) (= (type |a#7#1#0@@1|) DatatypeTypeType)) (< (DtRank |a#7#1#0@@1|) (DtRank (|#BetreeGraph.Op.AllocOp| |a#7#0#0@@5| |a#7#1#0@@1|)))) :qid |GraphidfyBetreeGraph.44:15| :skolemid |3345| :pattern ( (|#BetreeGraph.Op.AllocOp| |a#7#0#0@@5| |a#7#1#0@@1|)) )))
(assert (forall ((arg0@@610 T@U) (arg1@@289 T@U) ) (! (= (type (|#BetreeGraph.Op.WriteOp| arg0@@610 arg1@@289)) DatatypeTypeType) :qid |funType:#BetreeGraph.Op.WriteOp| :pattern ( (|#BetreeGraph.Op.WriteOp| arg0@@610 arg1@@289)) )))
(assert (forall ((|a#8#0#0@@5| T@U) (|a#8#1#0@@2| T@U) ) (!  (=> (and (= (type |a#8#0#0@@5|) BoxType) (= (type |a#8#1#0@@2|) DatatypeTypeType)) (= (DatatypeCtorId (|#BetreeGraph.Op.WriteOp| |a#8#0#0@@5| |a#8#1#0@@2|)) |##BetreeGraph.Op.WriteOp|)) :qid |GraphidfyBetreeGraph.45:15| :skolemid |3346| :pattern ( (|#BetreeGraph.Op.WriteOp| |a#8#0#0@@5| |a#8#1#0@@2|)) )))
(assert (forall ((d@@167 T@U) ) (!  (=> (= (type d@@167) DatatypeTypeType) (= (BetreeGraph.Op.WriteOp_q d@@167) (= (DatatypeCtorId d@@167) |##BetreeGraph.Op.WriteOp|))) :qid |unknown.0:0| :skolemid |3347| :pattern ( (BetreeGraph.Op.WriteOp_q d@@167)) )))
(assert (forall ((d@@168 T@U) ) (!  (=> (and (= (type d@@168) DatatypeTypeType) (BetreeGraph.Op.WriteOp_q d@@168)) (exists ((|a#9#0#0@@4| T@U) (|a#9#1#0@@1| T@U) ) (!  (and (and (= (type |a#9#0#0@@4|) BoxType) (= (type |a#9#1#0@@1|) DatatypeTypeType)) (= d@@168 (|#BetreeGraph.Op.WriteOp| |a#9#0#0@@4| |a#9#1#0@@1|))) :qid |GraphidfyBetreeGraph.45:15| :skolemid |3348| :no-pattern (type |a#9#0#0@@4|) :no-pattern (type |a#9#1#0@@1|) :no-pattern (U_2_int |a#9#0#0@@4|) :no-pattern (U_2_bool |a#9#0#0@@4|) :no-pattern (U_2_int |a#9#1#0@@1|) :no-pattern (U_2_bool |a#9#1#0@@1|) ))) :qid |unknown.0:0| :skolemid |3349| :pattern ( (BetreeGraph.Op.WriteOp_q d@@168)) )))
(assert (forall ((|a#10#0#0@@4| T@U) (|a#10#1#0@@0| T@U) ) (!  (=> (and (= (type |a#10#0#0@@4|) BoxType) (= (type |a#10#1#0@@0|) DatatypeTypeType)) (= ($Is (|#BetreeGraph.Op.WriteOp| |a#10#0#0@@4| |a#10#1#0@@0|) Tclass.BetreeGraph.Op)  (and ($IsBox |a#10#0#0@@4| Tclass.ReferenceType.Reference) ($Is |a#10#1#0@@0| Tclass.BetreeGraph.Node)))) :qid |GraphidfyBetreeGraph.45:15| :skolemid |3350| :pattern ( ($Is (|#BetreeGraph.Op.WriteOp| |a#10#0#0@@4| |a#10#1#0@@0|) Tclass.BetreeGraph.Op)) )))
(assert (forall ((|a#11#0#0@@4| T@U) (|a#11#1#0@@0| T@U) ($h@@169 T@U) ) (!  (=> (and (and (and (= (type |a#11#0#0@@4|) BoxType) (= (type |a#11#1#0@@0|) DatatypeTypeType)) (= (type $h@@169) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@169)) (= ($IsAlloc (|#BetreeGraph.Op.WriteOp| |a#11#0#0@@4| |a#11#1#0@@0|) Tclass.BetreeGraph.Op $h@@169)  (and ($IsAllocBox |a#11#0#0@@4| Tclass.ReferenceType.Reference $h@@169) ($IsAlloc |a#11#1#0@@0| Tclass.BetreeGraph.Node $h@@169)))) :qid |GraphidfyBetreeGraph.45:15| :skolemid |3351| :pattern ( ($IsAlloc (|#BetreeGraph.Op.WriteOp| |a#11#0#0@@4| |a#11#1#0@@0|) Tclass.BetreeGraph.Op $h@@169)) )))
(assert (forall ((d@@169 T@U) ($h@@170 T@U) ) (!  (=> (and (and (= (type d@@169) DatatypeTypeType) (= (type $h@@170) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@170) (and (BetreeGraph.Op.WriteOp_q d@@169) ($IsAlloc d@@169 Tclass.BetreeGraph.Op $h@@170)))) ($IsAllocBox (BetreeGraph.Op.ref d@@169) Tclass.ReferenceType.Reference $h@@170)) :qid |unknown.0:0| :skolemid |3352| :pattern ( ($IsAllocBox (BetreeGraph.Op.ref d@@169) Tclass.ReferenceType.Reference $h@@170)) )))
(assert (forall ((d@@170 T@U) ($h@@171 T@U) ) (!  (=> (and (and (= (type d@@170) DatatypeTypeType) (= (type $h@@171) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@171) (and (BetreeGraph.Op.WriteOp_q d@@170) ($IsAlloc d@@170 Tclass.BetreeGraph.Op $h@@171)))) ($IsAlloc (BetreeGraph.Op.node d@@170) Tclass.BetreeGraph.Node $h@@171)) :qid |unknown.0:0| :skolemid |3353| :pattern ( ($IsAlloc (BetreeGraph.Op.node d@@170) Tclass.BetreeGraph.Node $h@@171)) )))
(assert (forall ((|a#12#0#0@@2| T@U) (|a#12#1#0@@0| T@U) ) (!  (=> (and (= (type |a#12#0#0@@2|) BoxType) (= (type |a#12#1#0@@0|) DatatypeTypeType)) (= (|#BetreeGraph.Op.WriteOp| (Lit |a#12#0#0@@2|) (Lit |a#12#1#0@@0|)) (Lit (|#BetreeGraph.Op.WriteOp| |a#12#0#0@@2| |a#12#1#0@@0|)))) :qid |GraphidfyBetreeGraph.45:15| :skolemid |3354| :pattern ( (|#BetreeGraph.Op.WriteOp| (Lit |a#12#0#0@@2|) (Lit |a#12#1#0@@0|))) )))
(assert (forall ((|a#13#0#0@@2| T@U) (|a#13#1#0@@1| T@U) ) (!  (=> (and (= (type |a#13#0#0@@2|) BoxType) (= (type |a#13#1#0@@1|) DatatypeTypeType)) (= (BetreeGraph.Op.ref (|#BetreeGraph.Op.WriteOp| |a#13#0#0@@2| |a#13#1#0@@1|)) |a#13#0#0@@2|)) :qid |GraphidfyBetreeGraph.45:15| :skolemid |3355| :pattern ( (|#BetreeGraph.Op.WriteOp| |a#13#0#0@@2| |a#13#1#0@@1|)) )))
(assert (forall ((|a#14#0#0@@3| T@U) (|a#14#1#0@@2| T@U) ) (!  (=> (and (= (type |a#14#0#0@@3|) BoxType) (= (type |a#14#1#0@@2|) DatatypeTypeType)) (= (BetreeGraph.Op.node (|#BetreeGraph.Op.WriteOp| |a#14#0#0@@3| |a#14#1#0@@2|)) |a#14#1#0@@2|)) :qid |GraphidfyBetreeGraph.45:15| :skolemid |3356| :pattern ( (|#BetreeGraph.Op.WriteOp| |a#14#0#0@@3| |a#14#1#0@@2|)) )))
(assert (forall ((|a#15#0#0@@3| T@U) (|a#15#1#0@@2| T@U) ) (!  (=> (and (= (type |a#15#0#0@@3|) BoxType) (= (type |a#15#1#0@@2|) DatatypeTypeType)) (< (DtRank |a#15#1#0@@2|) (DtRank (|#BetreeGraph.Op.WriteOp| |a#15#0#0@@3| |a#15#1#0@@2|)))) :qid |GraphidfyBetreeGraph.45:15| :skolemid |3357| :pattern ( (|#BetreeGraph.Op.WriteOp| |a#15#0#0@@3| |a#15#1#0@@2|)) )))
(assert (forall ((d@@171 T@U) ) (!  (=> (and (= (type d@@171) DatatypeTypeType) (|$IsA#BetreeGraph.Op| d@@171)) (or (BetreeGraph.Op.AllocOp_q d@@171) (BetreeGraph.Op.WriteOp_q d@@171))) :qid |unknown.0:0| :skolemid |3358| :pattern ( (|$IsA#BetreeGraph.Op| d@@171)) )))
(assert (forall ((d@@172 T@U) ) (!  (=> (and (= (type d@@172) DatatypeTypeType) ($Is d@@172 Tclass.BetreeGraph.Op)) (or (BetreeGraph.Op.AllocOp_q d@@172) (BetreeGraph.Op.WriteOp_q d@@172))) :qid |unknown.0:0| :skolemid |3359| :pattern ( (BetreeGraph.Op.WriteOp_q d@@172) ($Is d@@172 Tclass.BetreeGraph.Op)) :pattern ( (BetreeGraph.Op.AllocOp_q d@@172) ($Is d@@172 Tclass.BetreeGraph.Op)) )))
(assert (forall ((a@@179 T@U) (b@@116 T@U) ) (!  (=> (and (and (= (type a@@179) DatatypeTypeType) (= (type b@@116) DatatypeTypeType)) (and (BetreeGraph.Op.AllocOp_q a@@179) (BetreeGraph.Op.AllocOp_q b@@116))) (= (|BetreeGraph.Op#Equal| a@@179 b@@116)  (and (= (BetreeGraph.Op.ref a@@179) (BetreeGraph.Op.ref b@@116)) (|BetreeGraph.Node#Equal| (BetreeGraph.Op.node a@@179) (BetreeGraph.Op.node b@@116))))) :qid |unknown.0:0| :skolemid |3360| :pattern ( (|BetreeGraph.Op#Equal| a@@179 b@@116) (BetreeGraph.Op.AllocOp_q a@@179)) :pattern ( (|BetreeGraph.Op#Equal| a@@179 b@@116) (BetreeGraph.Op.AllocOp_q b@@116)) )))
(assert (forall ((a@@180 T@U) (b@@117 T@U) ) (!  (=> (and (and (= (type a@@180) DatatypeTypeType) (= (type b@@117) DatatypeTypeType)) (and (BetreeGraph.Op.WriteOp_q a@@180) (BetreeGraph.Op.WriteOp_q b@@117))) (= (|BetreeGraph.Op#Equal| a@@180 b@@117)  (and (= (BetreeGraph.Op.ref a@@180) (BetreeGraph.Op.ref b@@117)) (|BetreeGraph.Node#Equal| (BetreeGraph.Op.node a@@180) (BetreeGraph.Op.node b@@117))))) :qid |unknown.0:0| :skolemid |3361| :pattern ( (|BetreeGraph.Op#Equal| a@@180 b@@117) (BetreeGraph.Op.WriteOp_q a@@180)) :pattern ( (|BetreeGraph.Op#Equal| a@@180 b@@117) (BetreeGraph.Op.WriteOp_q b@@117)) )))
(assert (forall ((a@@181 T@U) (b@@118 T@U) ) (!  (=> (and (= (type a@@181) DatatypeTypeType) (= (type b@@118) DatatypeTypeType)) (= (|BetreeGraph.Op#Equal| a@@181 b@@118) (= a@@181 b@@118))) :qid |unknown.0:0| :skolemid |3362| :pattern ( (|BetreeGraph.Op#Equal| a@@181 b@@118)) )))
(assert (forall ((arg0@@611 T@U) (arg1@@290 T@U) ) (! (= (type (|#BetreeGraph.ReadOp.ReadOp| arg0@@611 arg1@@290)) DatatypeTypeType) :qid |funType:#BetreeGraph.ReadOp.ReadOp| :pattern ( (|#BetreeGraph.ReadOp.ReadOp| arg0@@611 arg1@@290)) )))
(assert (forall ((|a#16#0#0@@3| T@U) (|a#16#1#0@@2| T@U) ) (!  (=> (and (= (type |a#16#0#0@@3|) BoxType) (= (type |a#16#1#0@@2|) DatatypeTypeType)) (= (DatatypeCtorId (|#BetreeGraph.ReadOp.ReadOp| |a#16#0#0@@3| |a#16#1#0@@2|)) |##BetreeGraph.ReadOp.ReadOp|)) :qid |GraphidfyBetreeGraph.48:14| :skolemid |3363| :pattern ( (|#BetreeGraph.ReadOp.ReadOp| |a#16#0#0@@3| |a#16#1#0@@2|)) )))
(assert (forall ((d@@173 T@U) ) (!  (=> (= (type d@@173) DatatypeTypeType) (= (BetreeGraph.ReadOp.ReadOp_q d@@173) (= (DatatypeCtorId d@@173) |##BetreeGraph.ReadOp.ReadOp|))) :qid |unknown.0:0| :skolemid |3364| :pattern ( (BetreeGraph.ReadOp.ReadOp_q d@@173)) )))
(assert (forall ((d@@174 T@U) ) (!  (=> (and (= (type d@@174) DatatypeTypeType) (BetreeGraph.ReadOp.ReadOp_q d@@174)) (exists ((|a#17#0#0@@4| T@U) (|a#17#1#0@@2| T@U) ) (!  (and (and (= (type |a#17#0#0@@4|) BoxType) (= (type |a#17#1#0@@2|) DatatypeTypeType)) (= d@@174 (|#BetreeGraph.ReadOp.ReadOp| |a#17#0#0@@4| |a#17#1#0@@2|))) :qid |GraphidfyBetreeGraph.48:14| :skolemid |3365| :no-pattern (type |a#17#0#0@@4|) :no-pattern (type |a#17#1#0@@2|) :no-pattern (U_2_int |a#17#0#0@@4|) :no-pattern (U_2_bool |a#17#0#0@@4|) :no-pattern (U_2_int |a#17#1#0@@2|) :no-pattern (U_2_bool |a#17#1#0@@2|) ))) :qid |unknown.0:0| :skolemid |3366| :pattern ( (BetreeGraph.ReadOp.ReadOp_q d@@174)) )))
(assert (forall ((|a#18#0#0@@4| T@U) (|a#18#1#0@@2| T@U) ) (!  (=> (and (= (type |a#18#0#0@@4|) BoxType) (= (type |a#18#1#0@@2|) DatatypeTypeType)) (= ($Is (|#BetreeGraph.ReadOp.ReadOp| |a#18#0#0@@4| |a#18#1#0@@2|) Tclass.BetreeGraph.ReadOp)  (and ($IsBox |a#18#0#0@@4| Tclass.ReferenceType.Reference) ($Is |a#18#1#0@@2| Tclass.BetreeGraph.Node)))) :qid |GraphidfyBetreeGraph.48:14| :skolemid |3367| :pattern ( ($Is (|#BetreeGraph.ReadOp.ReadOp| |a#18#0#0@@4| |a#18#1#0@@2|) Tclass.BetreeGraph.ReadOp)) )))
(assert (forall ((|a#19#0#0@@4| T@U) (|a#19#1#0@@2| T@U) ($h@@172 T@U) ) (!  (=> (and (and (and (= (type |a#19#0#0@@4|) BoxType) (= (type |a#19#1#0@@2|) DatatypeTypeType)) (= (type $h@@172) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@172)) (= ($IsAlloc (|#BetreeGraph.ReadOp.ReadOp| |a#19#0#0@@4| |a#19#1#0@@2|) Tclass.BetreeGraph.ReadOp $h@@172)  (and ($IsAllocBox |a#19#0#0@@4| Tclass.ReferenceType.Reference $h@@172) ($IsAlloc |a#19#1#0@@2| Tclass.BetreeGraph.Node $h@@172)))) :qid |GraphidfyBetreeGraph.48:14| :skolemid |3368| :pattern ( ($IsAlloc (|#BetreeGraph.ReadOp.ReadOp| |a#19#0#0@@4| |a#19#1#0@@2|) Tclass.BetreeGraph.ReadOp $h@@172)) )))
(assert (forall ((arg0@@612 T@U) ) (! (= (type (BetreeGraph.ReadOp.ref arg0@@612)) BoxType) :qid |funType:BetreeGraph.ReadOp.ref| :pattern ( (BetreeGraph.ReadOp.ref arg0@@612)) )))
(assert (forall ((d@@175 T@U) ($h@@173 T@U) ) (!  (=> (and (and (= (type d@@175) DatatypeTypeType) (= (type $h@@173) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@173) (and (BetreeGraph.ReadOp.ReadOp_q d@@175) ($IsAlloc d@@175 Tclass.BetreeGraph.ReadOp $h@@173)))) ($IsAllocBox (BetreeGraph.ReadOp.ref d@@175) Tclass.ReferenceType.Reference $h@@173)) :qid |unknown.0:0| :skolemid |3369| :pattern ( ($IsAllocBox (BetreeGraph.ReadOp.ref d@@175) Tclass.ReferenceType.Reference $h@@173)) )))
(assert (forall ((arg0@@613 T@U) ) (! (= (type (BetreeGraph.ReadOp.node arg0@@613)) DatatypeTypeType) :qid |funType:BetreeGraph.ReadOp.node| :pattern ( (BetreeGraph.ReadOp.node arg0@@613)) )))
(assert (forall ((d@@176 T@U) ($h@@174 T@U) ) (!  (=> (and (and (= (type d@@176) DatatypeTypeType) (= (type $h@@174) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@174) (and (BetreeGraph.ReadOp.ReadOp_q d@@176) ($IsAlloc d@@176 Tclass.BetreeGraph.ReadOp $h@@174)))) ($IsAlloc (BetreeGraph.ReadOp.node d@@176) Tclass.BetreeGraph.Node $h@@174)) :qid |unknown.0:0| :skolemid |3370| :pattern ( ($IsAlloc (BetreeGraph.ReadOp.node d@@176) Tclass.BetreeGraph.Node $h@@174)) )))
(assert (forall ((|a#20#0#0@@4| T@U) (|a#20#1#0@@2| T@U) ) (!  (=> (and (= (type |a#20#0#0@@4|) BoxType) (= (type |a#20#1#0@@2|) DatatypeTypeType)) (= (|#BetreeGraph.ReadOp.ReadOp| (Lit |a#20#0#0@@4|) (Lit |a#20#1#0@@2|)) (Lit (|#BetreeGraph.ReadOp.ReadOp| |a#20#0#0@@4| |a#20#1#0@@2|)))) :qid |GraphidfyBetreeGraph.48:14| :skolemid |3371| :pattern ( (|#BetreeGraph.ReadOp.ReadOp| (Lit |a#20#0#0@@4|) (Lit |a#20#1#0@@2|))) )))
(assert (forall ((|a#21#0#0@@4| T@U) (|a#21#1#0@@2| T@U) ) (!  (=> (and (= (type |a#21#0#0@@4|) BoxType) (= (type |a#21#1#0@@2|) DatatypeTypeType)) (= (BetreeGraph.ReadOp.ref (|#BetreeGraph.ReadOp.ReadOp| |a#21#0#0@@4| |a#21#1#0@@2|)) |a#21#0#0@@4|)) :qid |GraphidfyBetreeGraph.48:14| :skolemid |3372| :pattern ( (|#BetreeGraph.ReadOp.ReadOp| |a#21#0#0@@4| |a#21#1#0@@2|)) )))
(assert (forall ((|a#22#0#0@@4| T@U) (|a#22#1#0@@3| T@U) ) (!  (=> (and (= (type |a#22#0#0@@4|) BoxType) (= (type |a#22#1#0@@3|) DatatypeTypeType)) (= (BetreeGraph.ReadOp.node (|#BetreeGraph.ReadOp.ReadOp| |a#22#0#0@@4| |a#22#1#0@@3|)) |a#22#1#0@@3|)) :qid |GraphidfyBetreeGraph.48:14| :skolemid |3373| :pattern ( (|#BetreeGraph.ReadOp.ReadOp| |a#22#0#0@@4| |a#22#1#0@@3|)) )))
(assert (forall ((|a#23#0#0@@3| T@U) (|a#23#1#0@@2| T@U) ) (!  (=> (and (= (type |a#23#0#0@@3|) BoxType) (= (type |a#23#1#0@@2|) DatatypeTypeType)) (< (DtRank |a#23#1#0@@2|) (DtRank (|#BetreeGraph.ReadOp.ReadOp| |a#23#0#0@@3| |a#23#1#0@@2|)))) :qid |GraphidfyBetreeGraph.48:14| :skolemid |3374| :pattern ( (|#BetreeGraph.ReadOp.ReadOp| |a#23#0#0@@3| |a#23#1#0@@2|)) )))
(assert (forall ((d@@177 T@U) ) (!  (=> (and (= (type d@@177) DatatypeTypeType) (|$IsA#BetreeGraph.ReadOp| d@@177)) (BetreeGraph.ReadOp.ReadOp_q d@@177)) :qid |unknown.0:0| :skolemid |3375| :pattern ( (|$IsA#BetreeGraph.ReadOp| d@@177)) )))
(assert (forall ((d@@178 T@U) ) (!  (=> (and (= (type d@@178) DatatypeTypeType) ($Is d@@178 Tclass.BetreeGraph.ReadOp)) (BetreeGraph.ReadOp.ReadOp_q d@@178)) :qid |unknown.0:0| :skolemid |3376| :pattern ( (BetreeGraph.ReadOp.ReadOp_q d@@178) ($Is d@@178 Tclass.BetreeGraph.ReadOp)) )))
(assert (forall ((a@@182 T@U) (b@@119 T@U) ) (!  (=> (and (and (= (type a@@182) DatatypeTypeType) (= (type b@@119) DatatypeTypeType)) true) (= (|BetreeGraph.ReadOp#Equal| a@@182 b@@119)  (and (= (BetreeGraph.ReadOp.ref a@@182) (BetreeGraph.ReadOp.ref b@@119)) (|BetreeGraph.Node#Equal| (BetreeGraph.ReadOp.node a@@182) (BetreeGraph.ReadOp.node b@@119))))) :qid |unknown.0:0| :skolemid |3377| :pattern ( (|BetreeGraph.ReadOp#Equal| a@@182 b@@119)) )))
(assert (forall ((a@@183 T@U) (b@@120 T@U) ) (!  (=> (and (= (type a@@183) DatatypeTypeType) (= (type b@@120) DatatypeTypeType)) (= (|BetreeGraph.ReadOp#Equal| a@@183 b@@120) (= a@@183 b@@120))) :qid |unknown.0:0| :skolemid |3378| :pattern ( (|BetreeGraph.ReadOp#Equal| a@@183 b@@120)) )))
(assert (= (type Tclass.Sets.__default) TyType))
(assert (= (Tag Tclass.Sets.__default) Tagclass.Sets.__default))
(assert (= (TagFamily Tclass.Sets.__default) tytagFamily$_default))
(assert (forall ((bx@@188 T@U) ) (!  (=> (and (= (type bx@@188) BoxType) ($IsBox bx@@188 Tclass.Sets.__default)) (and (= ($Box ($Unbox refType bx@@188)) bx@@188) ($Is ($Unbox refType bx@@188) Tclass.Sets.__default))) :qid |unknown.0:0| :skolemid |3379| :pattern ( ($IsBox bx@@188 Tclass.Sets.__default)) )))
(assert (forall (($o@@52 T@U) ) (!  (=> (= (type $o@@52) refType) (= ($Is $o@@52 Tclass.Sets.__default)  (or (= $o@@52 null) (= (dtype $o@@52) Tclass.Sets.__default)))) :qid |unknown.0:0| :skolemid |3380| :pattern ( ($Is $o@@52 Tclass.Sets.__default)) )))
(assert (forall (($o@@53 T@U) ($h@@175 T@U) ) (!  (=> (and (= (type $o@@53) refType) (= (type $h@@175) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@53 Tclass.Sets.__default $h@@175)  (or (= $o@@53 null) (U_2_bool (MapType1Select (MapType0Select $h@@175 $o@@53) alloc))))) :qid |unknown.0:0| :skolemid |3381| :pattern ( ($IsAlloc $o@@53 Tclass.Sets.__default $h@@175)) )))
(assert (forall ((arg0@@614 Int) ) (! (= (type (Sets.__default.SetRange arg0@@614)) (MapType0Type BoxType boolType)) :qid |funType:Sets.__default.SetRange| :pattern ( (Sets.__default.SetRange arg0@@614)) )))
(assert  (=> true (forall ((|n#0@@12| Int) ) (!  (=> true ($Is (Sets.__default.SetRange |n#0@@12|) (TSet TInt))) :qid |Setsidfy.35:21| :skolemid |3382| :pattern ( (Sets.__default.SetRange |n#0@@12|)) ))))
(assert (forall ((|n#0@@13| Int) ) (! (= (|Sets.__default.SetRange#requires| |n#0@@13|) true) :qid |Setsidfy.35:21| :skolemid |3383| :pattern ( (|Sets.__default.SetRange#requires| |n#0@@13|)) )))
(assert (forall ((arg0@@615 T@U) (arg1@@291 Int) (arg2@@180 Int) ) (! (= (type (|lambda#114| arg0@@615 arg1@@291 arg2@@180)) (MapType0Type BoxType boolType)) :qid |funType:lambda#114| :pattern ( (|lambda#114| arg0@@615 arg1@@291 arg2@@180)) )))
(assert  (=> true (forall ((|n#0@@14| Int) ) (!  (=> true (= (Sets.__default.SetRange |n#0@@14|) (|lambda#114| TInt (LitInt 0) |n#0@@14|))) :qid |Setsidfy.35:21| :skolemid |3384| :pattern ( (Sets.__default.SetRange |n#0@@14|)) ))))
(assert  (=> true (forall ((|n#0@@15| Int) ) (!  (=> true (= (Sets.__default.SetRange (LitInt |n#0@@15|)) (|lambda#114| TInt (LitInt 0) |n#0@@15|))) :qid |Setsidfy.35:21| :weight 3 :skolemid |3385| :pattern ( (Sets.__default.SetRange (LitInt |n#0@@15|))) ))))
(assert (= (type Tclass.NativeArrays.__default) TyType))
(assert (= (Tag Tclass.NativeArrays.__default) Tagclass.NativeArrays.__default))
(assert (= (TagFamily Tclass.NativeArrays.__default) tytagFamily$_default))
(assert (forall ((bx@@189 T@U) ) (!  (=> (and (= (type bx@@189) BoxType) ($IsBox bx@@189 Tclass.NativeArrays.__default)) (and (= ($Box ($Unbox refType bx@@189)) bx@@189) ($Is ($Unbox refType bx@@189) Tclass.NativeArrays.__default))) :qid |unknown.0:0| :skolemid |3386| :pattern ( ($IsBox bx@@189 Tclass.NativeArrays.__default)) )))
(assert (forall (($o@@54 T@U) ) (!  (=> (= (type $o@@54) refType) (= ($Is $o@@54 Tclass.NativeArrays.__default)  (or (= $o@@54 null) (= (dtype $o@@54) Tclass.NativeArrays.__default)))) :qid |unknown.0:0| :skolemid |3387| :pattern ( ($Is $o@@54 Tclass.NativeArrays.__default)) )))
(assert (forall (($o@@55 T@U) ($h@@176 T@U) ) (!  (=> (and (= (type $o@@55) refType) (= (type $h@@176) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@55 Tclass.NativeArrays.__default $h@@176)  (or (= $o@@55 null) (U_2_bool (MapType1Select (MapType0Select $h@@176 $o@@55) alloc))))) :qid |unknown.0:0| :skolemid |3388| :pattern ( ($IsAlloc $o@@55 Tclass.NativeArrays.__default $h@@176)) )))
(assert (= (type Tclass.Byte__Order.__default) TyType))
(assert (= (Tag Tclass.Byte__Order.__default) Tagclass.Byte__Order.__default))
(assert (= (TagFamily Tclass.Byte__Order.__default) tytagFamily$_default))
(assert (forall ((bx@@190 T@U) ) (!  (=> (and (= (type bx@@190) BoxType) ($IsBox bx@@190 Tclass.Byte__Order.__default)) (and (= ($Box ($Unbox refType bx@@190)) bx@@190) ($Is ($Unbox refType bx@@190) Tclass.Byte__Order.__default))) :qid |unknown.0:0| :skolemid |3389| :pattern ( ($IsBox bx@@190 Tclass.Byte__Order.__default)) )))
(assert (forall (($o@@56 T@U) ) (!  (=> (= (type $o@@56) refType) (= ($Is $o@@56 Tclass.Byte__Order.__default)  (or (= $o@@56 null) (= (dtype $o@@56) Tclass.Byte__Order.__default)))) :qid |unknown.0:0| :skolemid |3390| :pattern ( ($Is $o@@56 Tclass.Byte__Order.__default)) )))
(assert (forall (($o@@57 T@U) ($h@@177 T@U) ) (!  (=> (and (= (type $o@@57) refType) (= (type $h@@177) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@57 Tclass.Byte__Order.__default $h@@177)  (or (= $o@@57 null) (U_2_bool (MapType1Select (MapType0Select $h@@177 $o@@57) alloc))))) :qid |unknown.0:0| :skolemid |3391| :pattern ( ($IsAlloc $o@@57 Tclass.Byte__Order.__default $h@@177)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) Byte__Order.__default.SomeElement) (< Byte__Order.__default.SomeElement 256)))))
(assert (= |Byte__Order.__default.SomeElement#requires| true))
(assert  (=> true (=> true (= Byte__Order.__default.SomeElement (LitInt 0)))))
(assert  (=> true (=> true (= Byte__Order.__default.SomeElement (LitInt 0)))))
(assert (forall (($ly@@315 T@U) (|a#0@@95| Int) (|b#0@@59| Int) ) (!  (=> (= (type $ly@@315) LayerTypeType) (= (Byte__Order.__default.lte ($LS $ly@@315) |a#0@@95| |b#0@@59|) (Byte__Order.__default.lte $ly@@315 |a#0@@95| |b#0@@59|))) :qid |totalorderidfy.910:30| :skolemid |3392| :pattern ( (Byte__Order.__default.lte ($LS $ly@@315) |a#0@@95| |b#0@@59|)) )))
(assert (forall (($ly@@316 T@U) (|a#0@@96| Int) (|b#0@@60| Int) ) (!  (=> (= (type $ly@@316) LayerTypeType) (= (Byte__Order.__default.lte $ly@@316 |a#0@@96| |b#0@@60|) (Byte__Order.__default.lte $LZ |a#0@@96| |b#0@@60|))) :qid |totalorderidfy.910:30| :skolemid |3393| :pattern ( (Byte__Order.__default.lte (AsFuelBottom $ly@@316) |a#0@@96| |b#0@@60|)) )))
(assert (= (type StartFuel_Byte_Order._default.ltedef) LayerTypeType))
(assert  (=> true (forall (($ly@@317 T@U) (|a#0@@97| Int) (|b#0@@61| Int) ) (!  (=> (and (= (type $ly@@317) LayerTypeType) (or (|Byte__Order.__default.lte#canCall| |a#0@@97| |b#0@@61|) (and (and (<= (LitInt 0) |a#0@@97|) (< |a#0@@97| 256)) (and (<= (LitInt 0) |b#0@@61|) (< |b#0@@61| 256))))) (and (and (and (and (and (and (= (Byte__Order.__default.lte $ly@@317 |a#0@@97| |b#0@@61|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@97| |b#0@@61|)) (or (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@97| |b#0@@61|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#0@@61| |a#0@@97|))) (forall ((|a#1@@0| Int) (|b#1@@0| Int) (|c#0@@10| Int) ) (!  (=> (and (and (and (<= (LitInt 0) |a#1@@0|) (< |a#1@@0| 256)) (and (<= (LitInt 0) |b#1@@0|) (< |b#1@@0| 256))) (and (<= (LitInt 0) |c#0@@10|) (< |c#0@@10| 256))) (=> (and (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#1@@0| |b#1@@0|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#1@@0| |c#0@@10|)) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#1@@0| |c#0@@10|))) :qid |totalorderidfy.25:20| :skolemid |3394| :pattern ( (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#1@@0| |c#0@@10|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#1@@0| |c#0@@10|)) :pattern ( (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#1@@0| |c#0@@10|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#1@@0| |b#1@@0|)) ))) (= (Byte__Order.__default.lte $ly@@317 |a#0@@97| |b#0@@61|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@97| |b#0@@61|))) (or (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@97| |b#0@@61|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#0@@61| |a#0@@97|))) (=> (and (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@97| |b#0@@61|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#0@@61| |a#0@@97|)) (= |a#0@@97| |b#0@@61|))) (forall ((|a#2| Int) (|b#2| Int) (|c#1| Int) ) (!  (=> (and (and (and (<= (LitInt 0) |a#2|) (< |a#2| 256)) (and (<= (LitInt 0) |b#2|) (< |b#2| 256))) (and (<= (LitInt 0) |c#1|) (< |c#1| 256))) (=> (and (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#2| |b#2|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#2| |c#1|)) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#2| |c#1|))) :qid |totalorderidfy.199:20| :skolemid |3395| :pattern ( (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#2| |c#1|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#2| |c#1|)) :pattern ( (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#2| |c#1|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#2| |b#2|)) )))) :qid |totalorderidfy.910:30| :skolemid |3396| :pattern ( (Byte__Order.__default.lte $ly@@317 |a#0@@97| |b#0@@61|)) ))))
(assert (forall (($ly@@318 T@U) (|a#0@@98| Int) (|b#0@@62| Int) ) (!  (=> (= (type $ly@@318) LayerTypeType) (=> (and (and (<= (LitInt 0) |a#0@@98|) (< |a#0@@98| 256)) (and (<= (LitInt 0) |b#0@@62|) (< |b#0@@62| 256))) (= (|Byte__Order.__default.lte#requires| $ly@@318 |a#0@@98| |b#0@@62|) true))) :qid |totalorderidfy.910:30| :skolemid |3397| :pattern ( (|Byte__Order.__default.lte#requires| $ly@@318 |a#0@@98| |b#0@@62|)) )))
(assert  (and (= (type MoreFuel_Byte_Order._default.ltedef0) LayerTypeType) (= (type StartFuelAssert_Byte_Order._default.ltedef) LayerTypeType)))
(assert  (=> true (forall (($ly@@319 T@U) (|a#0@@99| Int) (|b#0@@63| Int) ) (!  (=> (and (= (type $ly@@319) LayerTypeType) (or (|Byte__Order.__default.lte#canCall| |a#0@@99| |b#0@@63|) (and (and (<= (LitInt 0) |a#0@@99|) (< |a#0@@99| 256)) (and (<= (LitInt 0) |b#0@@63|) (< |b#0@@63| 256))))) (and (and (and (= StartFuel_Byte_Order._default.ltedef ($LS MoreFuel_Byte_Order._default.ltedef0)) (= StartFuelAssert_Byte_Order._default.ltedef ($LS ($LS MoreFuel_Byte_Order._default.ltedef0)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.ltedef0) MoreFuel_Byte_Order._default.ltedef0)) (= (Byte__Order.__default.lte ($LS $ly@@319) |a#0@@99| |b#0@@63|) (<= |a#0@@99| |b#0@@63|)))) :qid |totalorderidfy.910:30| :skolemid |3398| :pattern ( (Byte__Order.__default.lte ($LS $ly@@319) |a#0@@99| |b#0@@63|)) ))))
(assert (= (type MoreFuel_Byte_Order._default.ltedef1) LayerTypeType))
(assert  (=> true (forall (($ly@@320 T@U) (|a#0@@100| Int) (|b#0@@64| Int) ) (!  (=> (and (= (type $ly@@320) LayerTypeType) (or (|Byte__Order.__default.lte#canCall| (LitInt |a#0@@100|) (LitInt |b#0@@64|)) (and (and (<= (LitInt 0) |a#0@@100|) (< |a#0@@100| 256)) (and (<= (LitInt 0) |b#0@@64|) (< |b#0@@64| 256))))) (and (and (and (= StartFuel_Byte_Order._default.ltedef ($LS MoreFuel_Byte_Order._default.ltedef1)) (= StartFuelAssert_Byte_Order._default.ltedef ($LS ($LS MoreFuel_Byte_Order._default.ltedef1)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.ltedef1) MoreFuel_Byte_Order._default.ltedef1)) (= (Byte__Order.__default.lte ($LS $ly@@320) (LitInt |a#0@@100|) (LitInt |b#0@@64|)) (<= (LitInt |a#0@@100|) (LitInt |b#0@@64|))))) :qid |totalorderidfy.910:30| :weight 3 :skolemid |3399| :pattern ( (Byte__Order.__default.lte ($LS $ly@@320) (LitInt |a#0@@100|) (LitInt |b#0@@64|))) ))))
(assert (forall (($ly@@321 T@U) (|a#0@@101| Int) (|b#0@@65| Int) ) (!  (=> (= (type $ly@@321) LayerTypeType) (= (Byte__Order.__default.ltedef ($LS $ly@@321) |a#0@@101| |b#0@@65|) (Byte__Order.__default.ltedef $ly@@321 |a#0@@101| |b#0@@65|))) :qid |totalorderidfy.915:30| :skolemid |3400| :pattern ( (Byte__Order.__default.ltedef ($LS $ly@@321) |a#0@@101| |b#0@@65|)) )))
(assert (forall (($ly@@322 T@U) (|a#0@@102| Int) (|b#0@@66| Int) ) (!  (=> (= (type $ly@@322) LayerTypeType) (= (Byte__Order.__default.ltedef $ly@@322 |a#0@@102| |b#0@@66|) (Byte__Order.__default.ltedef $LZ |a#0@@102| |b#0@@66|))) :qid |totalorderidfy.915:30| :skolemid |3401| :pattern ( (Byte__Order.__default.ltedef (AsFuelBottom $ly@@322) |a#0@@102| |b#0@@66|)) )))
(assert  (=> true (forall (($ly@@323 T@U) (|a#0@@103| Int) (|b#0@@67| Int) ) (!  (=> (and (= (type $ly@@323) LayerTypeType) (or (|Byte__Order.__default.ltedef#canCall| |a#0@@103| |b#0@@67|) (and (and (<= (LitInt 0) |a#0@@103|) (< |a#0@@103| 256)) (and (<= (LitInt 0) |b#0@@67|) (< |b#0@@67| 256))))) true) :qid |totalorderidfy.915:30| :skolemid |3402| :pattern ( (Byte__Order.__default.ltedef $ly@@323 |a#0@@103| |b#0@@67|)) ))))
(assert (forall (($ly@@324 T@U) (|a#0@@104| Int) (|b#0@@68| Int) ) (!  (=> (= (type $ly@@324) LayerTypeType) (=> (and (and (<= (LitInt 0) |a#0@@104|) (< |a#0@@104| 256)) (and (<= (LitInt 0) |b#0@@68|) (< |b#0@@68| 256))) (= (|Byte__Order.__default.ltedef#requires| $ly@@324 |a#0@@104| |b#0@@68|) true))) :qid |totalorderidfy.915:30| :skolemid |3403| :pattern ( (|Byte__Order.__default.ltedef#requires| $ly@@324 |a#0@@104| |b#0@@68|)) )))
(assert  (=> true (forall (($ly@@325 T@U) (|a#0@@105| Int) (|b#0@@69| Int) ) (!  (=> (and (= (type $ly@@325) LayerTypeType) (or (|Byte__Order.__default.ltedef#canCall| |a#0@@105| |b#0@@69|) (and (and (<= (LitInt 0) |a#0@@105|) (< |a#0@@105| 256)) (and (<= (LitInt 0) |b#0@@69|) (< |b#0@@69| 256))))) (= (Byte__Order.__default.ltedef ($LS $ly@@325) |a#0@@105| |b#0@@69|) (<= |a#0@@105| |b#0@@69|))) :qid |totalorderidfy.915:30| :skolemid |3404| :pattern ( (Byte__Order.__default.ltedef ($LS $ly@@325) |a#0@@105| |b#0@@69|)) ))))
(assert  (=> true (forall (($ly@@326 T@U) (|a#0@@106| Int) (|b#0@@70| Int) ) (!  (=> (and (= (type $ly@@326) LayerTypeType) (or (|Byte__Order.__default.ltedef#canCall| (LitInt |a#0@@106|) (LitInt |b#0@@70|)) (and (and (<= (LitInt 0) |a#0@@106|) (< |a#0@@106| 256)) (and (<= (LitInt 0) |b#0@@70|) (< |b#0@@70| 256))))) (= (Byte__Order.__default.ltedef ($LS $ly@@326) (LitInt |a#0@@106|) (LitInt |b#0@@70|)) (<= (LitInt |a#0@@106|) (LitInt |b#0@@70|)))) :qid |totalorderidfy.915:30| :weight 3 :skolemid |3405| :pattern ( (Byte__Order.__default.ltedef ($LS $ly@@326) (LitInt |a#0@@106|) (LitInt |b#0@@70|))) ))))
(assert (forall (($ly@@327 T@U) (|run#0@@80| T@U) (|needle#0@@13| Int) ) (!  (=> (and (= (type $ly@@327) LayerTypeType) (= (type |run#0@@80|) (SeqType BoxType))) (= (Byte__Order.__default.LargestLte ($LS $ly@@327) |run#0@@80| |needle#0@@13|) (Byte__Order.__default.LargestLte $ly@@327 |run#0@@80| |needle#0@@13|))) :qid |totalorderidfyByteOrder.264:12| :skolemid |3406| :pattern ( (Byte__Order.__default.LargestLte ($LS $ly@@327) |run#0@@80| |needle#0@@13|)) )))
(assert (forall (($ly@@328 T@U) (|run#0@@81| T@U) (|needle#0@@14| Int) ) (!  (=> (and (= (type $ly@@328) LayerTypeType) (= (type |run#0@@81|) (SeqType BoxType))) (= (Byte__Order.__default.LargestLte $ly@@328 |run#0@@81| |needle#0@@14|) (Byte__Order.__default.LargestLte $LZ |run#0@@81| |needle#0@@14|))) :qid |totalorderidfyByteOrder.264:12| :skolemid |3407| :pattern ( (Byte__Order.__default.LargestLte (AsFuelBottom $ly@@328) |run#0@@81| |needle#0@@14|)) )))
(assert  (and (= (type StartFuel_Byte_Order._default.IsSorted) LayerTypeType) (= (type StartFuel_Byte_Order._default.lte) LayerTypeType)))
(assert  (=> true (forall (($ly@@329 T@U) (|run#0@@82| T@U) (|needle#0@@15| Int) ) (!  (=> (and (and (= (type $ly@@329) LayerTypeType) (= (type |run#0@@82|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLte#canCall| |run#0@@82| |needle#0@@15|) (and (and ($Is |run#0@@82| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@15|) (< |needle#0@@15| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@82|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Byte__Order.__default.LargestLte $ly@@329 |run#0@@82| |needle#0@@15|)) (< (Byte__Order.__default.LargestLte $ly@@329 |run#0@@82| |needle#0@@15|) (|Seq#Length| |run#0@@82|))) (forall ((|i#0@@100| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@100|) (<= |i#0@@100| (Byte__Order.__default.LargestLte $ly@@329 |run#0@@82| |needle#0@@15|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@82| |i#0@@100|))) |needle#0@@15|))) :qid |totalorderidfyByteOrder.267:20| :skolemid |3408| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@82| |i#0@@100|))) ))) (forall ((|i#1@@28| Int) ) (!  (=> true (=> (and (< (Byte__Order.__default.LargestLte $ly@@329 |run#0@@82| |needle#0@@15|) |i#1@@28|) (< |i#1@@28| (|Seq#Length| |run#0@@82|))) (Byte__Order.__default.lt |needle#0@@15| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@82| |i#1@@28|)))))) :qid |totalorderidfyByteOrder.268:20| :skolemid |3409| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@82| |i#1@@28|))) ))) (=> (|Seq#Contains| |run#0@@82| ($Box (int_2_U |needle#0@@15|))) (and (<= (LitInt 0) (Byte__Order.__default.LargestLte $ly@@329 |run#0@@82| |needle#0@@15|)) (= (U_2_int ($Unbox intType (|Seq#Index| |run#0@@82| (Byte__Order.__default.LargestLte $ly@@329 |run#0@@82| |needle#0@@15|)))) |needle#0@@15|))))) :qid |totalorderidfyByteOrder.264:12| :skolemid |3410| :pattern ( (Byte__Order.__default.LargestLte $ly@@329 |run#0@@82| |needle#0@@15|)) ))))
(assert (forall (($ly@@330 T@U) (|run#0@@83| T@U) (|needle#0@@16| Int) ) (!  (=> (and (and (= (type $ly@@330) LayerTypeType) (= (type |run#0@@83|) (SeqType BoxType))) (and ($Is |run#0@@83| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@16|) (< |needle#0@@16| 256)))) (= (|Byte__Order.__default.LargestLte#requires| $ly@@330 |run#0@@83| |needle#0@@16|) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@83|))) :qid |totalorderidfyByteOrder.264:12| :skolemid |3411| :pattern ( (|Byte__Order.__default.LargestLte#requires| $ly@@330 |run#0@@83| |needle#0@@16|)) )))
(assert  (and (= (type MoreFuel_Byte_Order._default.IsSorted0) LayerTypeType) (= (type StartFuelAssert_Byte_Order._default.IsSorted) LayerTypeType)))
(assert  (=> true (forall (($ly@@331 T@U) (|run#0@@84| T@U) (|needle#0@@17| Int) ) (!  (=> (and (and (= (type $ly@@331) LayerTypeType) (= (type |run#0@@84|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLte#canCall| |run#0@@84| |needle#0@@17|) (and (and ($Is |run#0@@84| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@17|) (< |needle#0@@17| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@84|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@84|) (LitInt 0))) (|Byte__Order.__default.lt#canCall| |needle#0@@17| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@84| (LitInt 0)))))) (=> (not (or (= (|Seq#Length| |run#0@@84|) (LitInt 0)) (Byte__Order.__default.lt |needle#0@@17| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@84| (LitInt 0))))))) (|Byte__Order.__default.LargestLte#canCall| (|Seq#Drop| |run#0@@84| (LitInt 1)) |needle#0@@17|))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted0)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted0)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted0) MoreFuel_Byte_Order._default.IsSorted0)) (= (Byte__Order.__default.LargestLte ($LS $ly@@331) |run#0@@84| |needle#0@@17|) (ite  (or (= (|Seq#Length| |run#0@@84|) (LitInt 0)) (Byte__Order.__default.lt |needle#0@@17| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@84| (LitInt 0)))))) (- 0 1) (+ 1 (Byte__Order.__default.LargestLte $ly@@331 (|Seq#Drop| |run#0@@84| (LitInt 1)) |needle#0@@17|))))))) :qid |totalorderidfyByteOrder.264:12| :skolemid |3412| :pattern ( (Byte__Order.__default.LargestLte ($LS $ly@@331) |run#0@@84| |needle#0@@17|)) ))))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted1) LayerTypeType))
(assert  (=> true (forall (($ly@@332 T@U) (|run#0@@85| T@U) (|needle#0@@18| Int) ) (!  (=> (and (and (= (type $ly@@332) LayerTypeType) (= (type |run#0@@85|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLte#canCall| (Lit |run#0@@85|) (LitInt |needle#0@@18|)) (and (and ($Is |run#0@@85| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@18|) (< |needle#0@@18| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted (Lit |run#0@@85|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@85|)) (LitInt 0))) (|Byte__Order.__default.lt#canCall| (LitInt |needle#0@@18|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@85|) (LitInt 0)))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@85|)) (LitInt 0)) (Byte__Order.__default.lt (LitInt |needle#0@@18|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@85|) (LitInt 0))))))) (|Byte__Order.__default.LargestLte#canCall| (Lit (|Seq#Drop| (Lit |run#0@@85|) (LitInt 1))) (LitInt |needle#0@@18|)))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted1)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted1)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted1) MoreFuel_Byte_Order._default.IsSorted1)) (= (Byte__Order.__default.LargestLte ($LS $ly@@332) (Lit |run#0@@85|) (LitInt |needle#0@@18|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@85|)) (LitInt 0)) (Byte__Order.__default.lt (LitInt |needle#0@@18|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@85|) (LitInt 0)))))) (- 0 1) (+ 1 (Byte__Order.__default.LargestLte ($LS $ly@@332) (Lit (|Seq#Drop| (Lit |run#0@@85|) (LitInt 1))) (LitInt |needle#0@@18|)))))))) :qid |totalorderidfyByteOrder.264:12| :weight 3 :skolemid |3413| :pattern ( (Byte__Order.__default.LargestLte ($LS $ly@@332) (Lit |run#0@@85|) (LitInt |needle#0@@18|))) ))))
(assert (forall (($ly@@333 T@U) (|run#0@@86| T@U) (|needle#0@@19| Int) ) (!  (=> (and (= (type $ly@@333) LayerTypeType) (= (type |run#0@@86|) (SeqType BoxType))) (= (Byte__Order.__default.LargestLt ($LS $ly@@333) |run#0@@86| |needle#0@@19|) (Byte__Order.__default.LargestLt $ly@@333 |run#0@@86| |needle#0@@19|))) :qid |totalorderidfyByteOrder.360:12| :skolemid |3414| :pattern ( (Byte__Order.__default.LargestLt ($LS $ly@@333) |run#0@@86| |needle#0@@19|)) )))
(assert (forall (($ly@@334 T@U) (|run#0@@87| T@U) (|needle#0@@20| Int) ) (!  (=> (and (= (type $ly@@334) LayerTypeType) (= (type |run#0@@87|) (SeqType BoxType))) (= (Byte__Order.__default.LargestLt $ly@@334 |run#0@@87| |needle#0@@20|) (Byte__Order.__default.LargestLt $LZ |run#0@@87| |needle#0@@20|))) :qid |totalorderidfyByteOrder.360:12| :skolemid |3415| :pattern ( (Byte__Order.__default.LargestLt (AsFuelBottom $ly@@334) |run#0@@87| |needle#0@@20|)) )))
(assert  (=> true (forall (($ly@@335 T@U) (|run#0@@88| T@U) (|needle#0@@21| Int) ) (!  (=> (and (and (= (type $ly@@335) LayerTypeType) (= (type |run#0@@88|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLt#canCall| |run#0@@88| |needle#0@@21|) (and (and ($Is |run#0@@88| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@21|) (< |needle#0@@21| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@88|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Byte__Order.__default.LargestLt $ly@@335 |run#0@@88| |needle#0@@21|)) (< (Byte__Order.__default.LargestLt $ly@@335 |run#0@@88| |needle#0@@21|) (|Seq#Length| |run#0@@88|))) (forall ((|i#0@@101| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@101|) (<= |i#0@@101| (Byte__Order.__default.LargestLt $ly@@335 |run#0@@88| |needle#0@@21|))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@88| |i#0@@101|))) |needle#0@@21|))) :qid |totalorderidfyByteOrder.363:20| :skolemid |3416| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@88| |i#0@@101|))) ))) (forall ((|i#1@@29| Int) ) (!  (=> true (=> (and (< (Byte__Order.__default.LargestLt $ly@@335 |run#0@@88| |needle#0@@21|) |i#1@@29|) (< |i#1@@29| (|Seq#Length| |run#0@@88|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |needle#0@@21| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@88| |i#1@@29|)))))) :qid |totalorderidfyByteOrder.364:20| :skolemid |3417| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@88| |i#1@@29|))) ))) (=> (|Seq#Contains| |run#0@@88| ($Box (int_2_U |needle#0@@21|))) (and (< (+ (Byte__Order.__default.LargestLt $ly@@335 |run#0@@88| |needle#0@@21|) 1) (|Seq#Length| |run#0@@88|)) (= (U_2_int ($Unbox intType (|Seq#Index| |run#0@@88| (+ (Byte__Order.__default.LargestLt $ly@@335 |run#0@@88| |needle#0@@21|) 1)))) |needle#0@@21|))))) :qid |totalorderidfyByteOrder.360:12| :skolemid |3418| :pattern ( (Byte__Order.__default.LargestLt $ly@@335 |run#0@@88| |needle#0@@21|)) ))))
(assert (forall (($ly@@336 T@U) (|run#0@@89| T@U) (|needle#0@@22| Int) ) (!  (=> (and (and (= (type $ly@@336) LayerTypeType) (= (type |run#0@@89|) (SeqType BoxType))) (and ($Is |run#0@@89| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@22|) (< |needle#0@@22| 256)))) (= (|Byte__Order.__default.LargestLt#requires| $ly@@336 |run#0@@89| |needle#0@@22|) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@89|))) :qid |totalorderidfyByteOrder.360:12| :skolemid |3419| :pattern ( (|Byte__Order.__default.LargestLt#requires| $ly@@336 |run#0@@89| |needle#0@@22|)) )))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted2) LayerTypeType))
(assert  (=> true (forall (($ly@@337 T@U) (|run#0@@90| T@U) (|needle#0@@23| Int) ) (!  (=> (and (and (= (type $ly@@337) LayerTypeType) (= (type |run#0@@90|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLt#canCall| |run#0@@90| |needle#0@@23|) (and (and ($Is |run#0@@90| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@23|) (< |needle#0@@23| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@90|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@90|) (LitInt 0))) (|Byte__Order.__default.lte#canCall| |needle#0@@23| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@90| (LitInt 0)))))) (=> (not (or (= (|Seq#Length| |run#0@@90|) (LitInt 0)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |needle#0@@23| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@90| (LitInt 0))))))) (|Byte__Order.__default.LargestLt#canCall| (|Seq#Drop| |run#0@@90| (LitInt 1)) |needle#0@@23|))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted2)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted2)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted2) MoreFuel_Byte_Order._default.IsSorted2)) (= (Byte__Order.__default.LargestLt ($LS $ly@@337) |run#0@@90| |needle#0@@23|) (ite  (or (= (|Seq#Length| |run#0@@90|) (LitInt 0)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |needle#0@@23| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@90| (LitInt 0)))))) (- 0 1) (+ 1 (Byte__Order.__default.LargestLt $ly@@337 (|Seq#Drop| |run#0@@90| (LitInt 1)) |needle#0@@23|))))))) :qid |totalorderidfyByteOrder.360:12| :skolemid |3420| :pattern ( (Byte__Order.__default.LargestLt ($LS $ly@@337) |run#0@@90| |needle#0@@23|)) ))))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted3) LayerTypeType))
(assert  (=> true (forall (($ly@@338 T@U) (|run#0@@91| T@U) (|needle#0@@24| Int) ) (!  (=> (and (and (= (type $ly@@338) LayerTypeType) (= (type |run#0@@91|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLt#canCall| (Lit |run#0@@91|) (LitInt |needle#0@@24|)) (and (and ($Is |run#0@@91| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@24|) (< |needle#0@@24| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted (Lit |run#0@@91|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@91|)) (LitInt 0))) (|Byte__Order.__default.lte#canCall| (LitInt |needle#0@@24|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@91|) (LitInt 0)))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@91|)) (LitInt 0)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |needle#0@@24|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@91|) (LitInt 0))))))) (|Byte__Order.__default.LargestLt#canCall| (Lit (|Seq#Drop| (Lit |run#0@@91|) (LitInt 1))) (LitInt |needle#0@@24|)))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted3)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted3)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted3) MoreFuel_Byte_Order._default.IsSorted3)) (= (Byte__Order.__default.LargestLt ($LS $ly@@338) (Lit |run#0@@91|) (LitInt |needle#0@@24|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@91|)) (LitInt 0)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |needle#0@@24|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@91|) (LitInt 0)))))) (- 0 1) (+ 1 (Byte__Order.__default.LargestLt ($LS $ly@@338) (Lit (|Seq#Drop| (Lit |run#0@@91|) (LitInt 1))) (LitInt |needle#0@@24|)))))))) :qid |totalorderidfyByteOrder.360:12| :weight 3 :skolemid |3421| :pattern ( (Byte__Order.__default.LargestLt ($LS $ly@@338) (Lit |run#0@@91|) (LitInt |needle#0@@24|))) ))))
(assert (forall (($ly@@339 T@U) (|run#0@@92| T@U) (|needle#0@@25| Int) ) (!  (=> (and (= (type $ly@@339) LayerTypeType) (= (type |run#0@@92|) (SeqType BoxType))) (= (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@339) |run#0@@92| |needle#0@@25|) (Byte__Order.__default.IndexOfFirstGte $ly@@339 |run#0@@92| |needle#0@@25|))) :qid |totalorderidfyByteOrder.392:12| :skolemid |3422| :pattern ( (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@339) |run#0@@92| |needle#0@@25|)) )))
(assert (forall (($ly@@340 T@U) (|run#0@@93| T@U) (|needle#0@@26| Int) ) (!  (=> (and (= (type $ly@@340) LayerTypeType) (= (type |run#0@@93|) (SeqType BoxType))) (= (Byte__Order.__default.IndexOfFirstGte $ly@@340 |run#0@@93| |needle#0@@26|) (Byte__Order.__default.IndexOfFirstGte $LZ |run#0@@93| |needle#0@@26|))) :qid |totalorderidfyByteOrder.392:12| :skolemid |3423| :pattern ( (Byte__Order.__default.IndexOfFirstGte (AsFuelBottom $ly@@340) |run#0@@93| |needle#0@@26|)) )))
(assert  (=> true (forall (($ly@@341 T@U) (|run#0@@94| T@U) (|needle#0@@27| Int) ) (!  (=> (and (and (= (type $ly@@341) LayerTypeType) (= (type |run#0@@94|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGte#canCall| |run#0@@94| |needle#0@@27|) (and (and ($Is |run#0@@94| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@27|) (< |needle#0@@27| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@94|)))) (and (and (and (<= (Byte__Order.__default.IndexOfFirstGte $ly@@341 |run#0@@94| |needle#0@@27|) (|Seq#Length| |run#0@@94|)) (forall ((|i#0@@102| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@102|) (< |i#0@@102| (Byte__Order.__default.IndexOfFirstGte $ly@@341 |run#0@@94| |needle#0@@27|))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@94| |i#0@@102|))) |needle#0@@27|)) :qid |totalorderidfyByteOrder.395:20| :skolemid |3424| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@94| |i#0@@102|))) ))) (forall ((|i#1@@30| Int) ) (!  (=> (and (<= (Byte__Order.__default.IndexOfFirstGte $ly@@341 |run#0@@94| |needle#0@@27|) |i#1@@30|) (< |i#1@@30| (|Seq#Length| |run#0@@94|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |needle#0@@27| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@94| |i#1@@30|))))) :qid |totalorderidfyByteOrder.396:20| :skolemid |3425| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@94| |i#1@@30|))) ))) (<= (LitInt 0) (Byte__Order.__default.IndexOfFirstGte $ly@@341 |run#0@@94| |needle#0@@27|)))) :qid |totalorderidfyByteOrder.392:12| :skolemid |3426| :pattern ( (Byte__Order.__default.IndexOfFirstGte $ly@@341 |run#0@@94| |needle#0@@27|)) ))))
(assert (forall (($ly@@342 T@U) (|run#0@@95| T@U) (|needle#0@@28| Int) ) (!  (=> (and (and (= (type $ly@@342) LayerTypeType) (= (type |run#0@@95|) (SeqType BoxType))) (and ($Is |run#0@@95| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@28|) (< |needle#0@@28| 256)))) (= (|Byte__Order.__default.IndexOfFirstGte#requires| $ly@@342 |run#0@@95| |needle#0@@28|) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@95|))) :qid |totalorderidfyByteOrder.392:12| :skolemid |3427| :pattern ( (|Byte__Order.__default.IndexOfFirstGte#requires| $ly@@342 |run#0@@95| |needle#0@@28|)) )))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted4) LayerTypeType))
(assert  (=> true (forall (($ly@@343 T@U) (|run#0@@96| T@U) (|needle#0@@29| Int) ) (!  (=> (and (and (= (type $ly@@343) LayerTypeType) (= (type |run#0@@96|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGte#canCall| |run#0@@96| |needle#0@@29|) (and (and ($Is |run#0@@96| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@29|) (< |needle#0@@29| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@96|)))) (and (=> (not (= (|Seq#Length| |run#0@@96|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.NativeTypes.byte |run#0@@96|) (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@96|))) |needle#0@@29|)) (=> (not (Byte__Order.__default.lt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@96|))) |needle#0@@29|)) (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.byte |run#0@@96|) (|Byte__Order.__default.IndexOfFirstGte#canCall| (Sequences.__default.DropLast Tclass.NativeTypes.byte |run#0@@96|) |needle#0@@29|))))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted4)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted4)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted4) MoreFuel_Byte_Order._default.IsSorted4)) (= (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@343) |run#0@@96| |needle#0@@29|) (ite (= (|Seq#Length| |run#0@@96|) (LitInt 0)) 0 (ite (Byte__Order.__default.lt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@96|))) |needle#0@@29|) (|Seq#Length| |run#0@@96|) (Byte__Order.__default.IndexOfFirstGte $ly@@343 (Sequences.__default.DropLast Tclass.NativeTypes.byte |run#0@@96|) |needle#0@@29|))))))) :qid |totalorderidfyByteOrder.392:12| :skolemid |3428| :pattern ( (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@343) |run#0@@96| |needle#0@@29|)) ))))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted5) LayerTypeType))
(assert  (=> true (forall (($ly@@344 T@U) (|run#0@@97| T@U) (|needle#0@@30| Int) ) (!  (=> (and (and (= (type $ly@@344) LayerTypeType) (= (type |run#0@@97|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGte#canCall| (Lit |run#0@@97|) (LitInt |needle#0@@30|)) (and (and ($Is |run#0@@97| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@30|) (< |needle#0@@30| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted (Lit |run#0@@97|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@97|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.NativeTypes.byte (Lit |run#0@@97|)) (|Byte__Order.__default.lt#canCall| (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@97|))))) (LitInt |needle#0@@30|))) (=> (not (U_2_bool (Lit (bool_2_U (Byte__Order.__default.lt (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@97|))))) (LitInt |needle#0@@30|)))))) (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.byte (Lit |run#0@@97|)) (|Byte__Order.__default.IndexOfFirstGte#canCall| (Lit (Sequences.__default.DropLast Tclass.NativeTypes.byte (Lit |run#0@@97|))) (LitInt |needle#0@@30|)))))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted5)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted5)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted5) MoreFuel_Byte_Order._default.IsSorted5)) (= (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@344) (Lit |run#0@@97|) (LitInt |needle#0@@30|)) (ite (= (|Seq#Length| (Lit |run#0@@97|)) (LitInt 0)) 0 (ite (Byte__Order.__default.lt (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@97|))))) (LitInt |needle#0@@30|)) (|Seq#Length| (Lit |run#0@@97|)) (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@344) (Lit (Sequences.__default.DropLast Tclass.NativeTypes.byte (Lit |run#0@@97|))) (LitInt |needle#0@@30|)))))))) :qid |totalorderidfyByteOrder.392:12| :weight 3 :skolemid |3429| :pattern ( (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@344) (Lit |run#0@@97|) (LitInt |needle#0@@30|))) ))))
(assert (forall (($ly@@345 T@U) (|s#0@@158| T@U) (|key#0@@52| Int) (|lo#0| Int) (|hi#0| Int) ) (!  (=> (and (= (type $ly@@345) LayerTypeType) (= (type |s#0@@158|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@345) |s#0@@158| |key#0@@52| |lo#0| |hi#0|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@345 |s#0@@158| |key#0@@52| |lo#0| |hi#0|))) :qid |totalorderidfyByteOrder.423:12| :skolemid |3430| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@345) |s#0@@158| |key#0@@52| |lo#0| |hi#0|)) )))
(assert (forall (($ly@@346 T@U) (|s#0@@159| T@U) (|key#0@@53| Int) (|lo#0@@0| Int) (|hi#0@@0| Int) ) (!  (=> (and (= (type $ly@@346) LayerTypeType) (= (type |s#0@@159|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@346 |s#0@@159| |key#0@@53| |lo#0@@0| |hi#0@@0|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $LZ |s#0@@159| |key#0@@53| |lo#0@@0| |hi#0@@0|))) :qid |totalorderidfyByteOrder.423:12| :skolemid |3431| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter (AsFuelBottom $ly@@346) |s#0@@159| |key#0@@53| |lo#0@@0| |hi#0@@0|)) )))
(assert  (=> true (forall (($ly@@347 T@U) (|s#0@@160| T@U) (|key#0@@54| Int) (|lo#0@@1| Int) (|hi#0@@1| Int) ) (!  (=> (and (and (= (type $ly@@347) LayerTypeType) (= (type |s#0@@160|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@160| |key#0@@54| |lo#0@@1| |hi#0@@1|) (and (and ($Is |s#0@@160| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@54|) (< |key#0@@54| 256))) (and (and (and (and (<= (LitInt 0) |lo#0@@1|) (< |lo#0@@1| |hi#0@@1|)) (<= |hi#0@@1| (+ (|Seq#Length| |s#0@@160|) 1))) (=> (> |lo#0@@1| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@160| (- |lo#0@@1| 1)))) |key#0@@54|))) (=> (<= |hi#0@@1| (|Seq#Length| |s#0@@160|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@54| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@160| (- |hi#0@@1| 1)))))))))) (and (and (and (<= (LitInt 0) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@347 |s#0@@160| |key#0@@54| |lo#0@@1| |hi#0@@1|)) (<= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@347 |s#0@@160| |key#0@@54| |lo#0@@1| |hi#0@@1|) (|Seq#Length| |s#0@@160|))) (=> (> (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@347 |s#0@@160| |key#0@@54| |lo#0@@1| |hi#0@@1|) 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@160| (- (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@347 |s#0@@160| |key#0@@54| |lo#0@@1| |hi#0@@1|) 1)))) |key#0@@54|))) (=> (< (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@347 |s#0@@160| |key#0@@54| |lo#0@@1| |hi#0@@1|) (|Seq#Length| |s#0@@160|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@54| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@160| (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@347 |s#0@@160| |key#0@@54| |lo#0@@1| |hi#0@@1|)))))))) :qid |totalorderidfyByteOrder.423:12| :skolemid |3432| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@347 |s#0@@160| |key#0@@54| |lo#0@@1| |hi#0@@1|)) ))))
(assert (forall (($ly@@348 T@U) (|s#0@@161| T@U) (|key#0@@55| Int) (|lo#0@@2| Int) (|hi#0@@2| Int) ) (!  (=> (and (and (= (type $ly@@348) LayerTypeType) (= (type |s#0@@161|) (SeqType BoxType))) (and ($Is |s#0@@161| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@55|) (< |key#0@@55| 256)))) (= (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@348 |s#0@@161| |key#0@@55| |lo#0@@2| |hi#0@@2|)  (and (and (and (and (<= (LitInt 0) |lo#0@@2|) (< |lo#0@@2| |hi#0@@2|)) (<= |hi#0@@2| (+ (|Seq#Length| |s#0@@161|) 1))) (=> (> |lo#0@@2| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@161| (- |lo#0@@2| 1)))) |key#0@@55|))) (=> (<= |hi#0@@2| (|Seq#Length| |s#0@@161|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@55| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@161| (- |hi#0@@2| 1))))))))) :qid |totalorderidfyByteOrder.423:12| :skolemid |3433| :pattern ( (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@348 |s#0@@161| |key#0@@55| |lo#0@@2| |hi#0@@2|)) )))
(assert  (=> true (forall (($ly@@349 T@U) (|s#0@@162| T@U) (|key#0@@56| Int) (|lo#0@@3| Int) (|hi#0@@3| Int) ) (!  (=> (and (and (= (type $ly@@349) LayerTypeType) (= (type |s#0@@162|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@162| |key#0@@56| |lo#0@@3| |hi#0@@3|) (and (and ($Is |s#0@@162| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@56|) (< |key#0@@56| 256))) (and (and (and (and (<= (LitInt 0) |lo#0@@3|) (< |lo#0@@3| |hi#0@@3|)) (<= |hi#0@@3| (+ (|Seq#Length| |s#0@@162|) 1))) (=> (> |lo#0@@3| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@162| (- |lo#0@@3| 1)))) |key#0@@56|))) (=> (<= |hi#0@@3| (|Seq#Length| |s#0@@162|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@56| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@162| (- |hi#0@@3| 1)))))))))) (and (=> (< (+ |lo#0@@3| 1) |hi#0@@3|) (let ((|mid#0| (Div (+ |lo#0@@3| |hi#0@@3|) (LitInt 2)))) (and (and (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@162| (- |mid#0| 1)))) |key#0@@56|) (=> (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@162| (- |mid#0| 1)))) |key#0@@56|) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@162| |key#0@@56| |mid#0| |hi#0@@3|))) (=> (not (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@162| (- |mid#0| 1)))) |key#0@@56|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@162| |key#0@@56| |lo#0@@3| |mid#0|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@349) |s#0@@162| |key#0@@56| |lo#0@@3| |hi#0@@3|) (ite (< (+ |lo#0@@3| 1) |hi#0@@3|) (let ((|mid#0@@0| (Div (+ |lo#0@@3| |hi#0@@3|) (LitInt 2)))) (ite (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@162| (- |mid#0@@0| 1)))) |key#0@@56|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@349 |s#0@@162| |key#0@@56| |mid#0@@0| |hi#0@@3|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@349 |s#0@@162| |key#0@@56| |lo#0@@3| |mid#0@@0|))) |lo#0@@3|)))) :qid |totalorderidfyByteOrder.423:12| :skolemid |3434| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@349) |s#0@@162| |key#0@@56| |lo#0@@3| |hi#0@@3|)) ))))
(assert  (=> true (forall (($ly@@350 T@U) (|s#0@@163| T@U) (|key#0@@57| Int) (|lo#0@@4| Int) (|hi#0@@4| Int) ) (!  (=> (and (and (= (type $ly@@350) LayerTypeType) (= (type |s#0@@163|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@163| |key#0@@57| (LitInt |lo#0@@4|) (LitInt |hi#0@@4|)) (and (and ($Is |s#0@@163| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@57|) (< |key#0@@57| 256))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@4|)) (< |lo#0@@4| |hi#0@@4|)) (<= (LitInt |hi#0@@4|) (+ (|Seq#Length| |s#0@@163|) 1))) (=> (> |lo#0@@4| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@163| (LitInt (- |lo#0@@4| 1))))) |key#0@@57|))) (=> (<= (LitInt |hi#0@@4|) (|Seq#Length| |s#0@@163|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@57| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@163| (LitInt (- |hi#0@@4| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@4| 1) |hi#0@@4|)))) (let ((|mid#1| (LitInt (Div (+ |lo#0@@4| |hi#0@@4|) (LitInt 2))))) (and (and (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@163| (- |mid#1| 1)))) |key#0@@57|) (=> (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@163| (- |mid#1| 1)))) |key#0@@57|) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@163| |key#0@@57| |mid#1| (LitInt |hi#0@@4|)))) (=> (not (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@163| (- |mid#1| 1)))) |key#0@@57|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@163| |key#0@@57| (LitInt |lo#0@@4|) |mid#1|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@350) |s#0@@163| |key#0@@57| (LitInt |lo#0@@4|) (LitInt |hi#0@@4|)) (ite (< (+ |lo#0@@4| 1) |hi#0@@4|) (let ((|mid#1@@0| (LitInt (Div (+ |lo#0@@4| |hi#0@@4|) (LitInt 2))))) (ite (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@163| (LitInt (- |mid#1@@0| 1))))) |key#0@@57|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@350) |s#0@@163| |key#0@@57| |mid#1@@0| (LitInt |hi#0@@4|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@350) |s#0@@163| |key#0@@57| (LitInt |lo#0@@4|) |mid#1@@0|))) |lo#0@@4|)))) :qid |totalorderidfyByteOrder.423:12| :weight 3 :skolemid |3435| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@350) |s#0@@163| |key#0@@57| (LitInt |lo#0@@4|) (LitInt |hi#0@@4|))) ))))
(assert  (=> true (forall (($ly@@351 T@U) (|s#0@@164| T@U) (|key#0@@58| Int) (|lo#0@@5| Int) (|hi#0@@5| Int) ) (!  (=> (and (and (= (type $ly@@351) LayerTypeType) (= (type |s#0@@164|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@164|) (LitInt |key#0@@58|) (LitInt |lo#0@@5|) (LitInt |hi#0@@5|)) (and (and ($Is |s#0@@164| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@58|) (< |key#0@@58| 256))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@5|)) (< |lo#0@@5| |hi#0@@5|)) (<= (LitInt |hi#0@@5|) (+ (|Seq#Length| (Lit |s#0@@164|)) 1))) (=> (> |lo#0@@5| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@164|) (LitInt (- |lo#0@@5| 1))))) (LitInt |key#0@@58|)))) (=> (<= (LitInt |hi#0@@5|) (|Seq#Length| (Lit |s#0@@164|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |key#0@@58|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@164|) (LitInt (- |hi#0@@5| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@5| 1) |hi#0@@5|)))) (let ((|mid#2| (LitInt (Div (+ |lo#0@@5| |hi#0@@5|) (LitInt 2))))) (and (and (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@164|) (- |mid#2| 1)))) (LitInt |key#0@@58|)) (=> (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@164|) (- |mid#2| 1)))) (LitInt |key#0@@58|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@164|) (LitInt |key#0@@58|) |mid#2| (LitInt |hi#0@@5|)))) (=> (not (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@164|) (- |mid#2| 1)))) (LitInt |key#0@@58|))) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@164|) (LitInt |key#0@@58|) (LitInt |lo#0@@5|) |mid#2|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@351) (Lit |s#0@@164|) (LitInt |key#0@@58|) (LitInt |lo#0@@5|) (LitInt |hi#0@@5|)) (ite (< (+ |lo#0@@5| 1) |hi#0@@5|) (let ((|mid#2@@0| (LitInt (Div (+ |lo#0@@5| |hi#0@@5|) (LitInt 2))))) (ite (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@164|) (LitInt (- |mid#2@@0| 1))))) (LitInt |key#0@@58|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@351) (Lit |s#0@@164|) (LitInt |key#0@@58|) |mid#2@@0| (LitInt |hi#0@@5|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@351) (Lit |s#0@@164|) (LitInt |key#0@@58|) (LitInt |lo#0@@5|) |mid#2@@0|))) |lo#0@@5|)))) :qid |totalorderidfyByteOrder.423:12| :weight 3 :skolemid |3436| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@351) (Lit |s#0@@164|) (LitInt |key#0@@58|) (LitInt |lo#0@@5|) (LitInt |hi#0@@5|))) ))))
(assert (forall (($ly@@352 T@U) (|s#0@@165| T@U) (|key#0@@59| Int) ) (!  (=> (and (= (type $ly@@352) LayerTypeType) (= (type |s#0@@165|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@352) |s#0@@165| |key#0@@59|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@352 |s#0@@165| |key#0@@59|))) :qid |totalorderidfyByteOrder.443:22| :skolemid |3437| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@352) |s#0@@165| |key#0@@59|)) )))
(assert (forall (($ly@@353 T@U) (|s#0@@166| T@U) (|key#0@@60| Int) ) (!  (=> (and (= (type $ly@@353) LayerTypeType) (= (type |s#0@@166|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@353 |s#0@@166| |key#0@@60|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $LZ |s#0@@166| |key#0@@60|))) :qid |totalorderidfyByteOrder.443:22| :skolemid |3438| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGte (AsFuelBottom $ly@@353) |s#0@@166| |key#0@@60|)) )))
(assert  (=> true (forall (($ly@@354 T@U) (|s#0@@167| T@U) (|key#0@@61| Int) ) (!  (=> (and (and (= (type $ly@@354) LayerTypeType) (= (type |s#0@@167|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@167| |key#0@@61|) (and ($Is |s#0@@167| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@61|) (< |key#0@@61| 256))))) (and (and (and (<= (LitInt 0) (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@354 |s#0@@167| |key#0@@61|)) (<= (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@354 |s#0@@167| |key#0@@61|) (|Seq#Length| |s#0@@167|))) (=> (> (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@354 |s#0@@167| |key#0@@61|) 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@167| (- (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@354 |s#0@@167| |key#0@@61|) 1)))) |key#0@@61|))) (=> (< (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@354 |s#0@@167| |key#0@@61|) (|Seq#Length| |s#0@@167|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@61| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@167| (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@354 |s#0@@167| |key#0@@61|)))))))) :qid |totalorderidfyByteOrder.443:22| :skolemid |3439| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@354 |s#0@@167| |key#0@@61|)) ))))
(assert (forall (($ly@@355 T@U) (|s#0@@168| T@U) (|key#0@@62| Int) ) (!  (=> (and (and (= (type $ly@@355) LayerTypeType) (= (type |s#0@@168|) (SeqType BoxType))) (and ($Is |s#0@@168| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@62|) (< |key#0@@62| 256)))) (= (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@355 |s#0@@168| |key#0@@62|) true)) :qid |totalorderidfyByteOrder.443:22| :skolemid |3440| :pattern ( (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@355 |s#0@@168| |key#0@@62|)) )))
(assert  (=> true (forall (($ly@@356 T@U) (|s#0@@169| T@U) (|key#0@@63| Int) ) (!  (=> (and (and (= (type $ly@@356) LayerTypeType) (= (type |s#0@@169|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@169| |key#0@@63|) (and ($Is |s#0@@169| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@63|) (< |key#0@@63| 256))))) (and (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@169| |key#0@@63| (LitInt 0) (+ (|Seq#Length| |s#0@@169|) 1)) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@356) |s#0@@169| |key#0@@63|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) |s#0@@169| |key#0@@63| (LitInt 0) (+ (|Seq#Length| |s#0@@169|) 1))))) :qid |totalorderidfyByteOrder.443:22| :skolemid |3441| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@356) |s#0@@169| |key#0@@63|)) ))))
(assert  (=> true (forall (($ly@@357 T@U) (|s#0@@170| T@U) (|key#0@@64| Int) ) (!  (=> (and (and (= (type $ly@@357) LayerTypeType) (= (type |s#0@@170|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (Lit |s#0@@170|) (LitInt |key#0@@64|)) (and ($Is |s#0@@170| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@64|) (< |key#0@@64| 256))))) (and (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@170|) (LitInt |key#0@@64|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@170|)) 1)) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@357) (Lit |s#0@@170|) (LitInt |key#0@@64|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) (Lit |s#0@@170|) (LitInt |key#0@@64|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@170|)) 1))))) :qid |totalorderidfyByteOrder.443:22| :weight 3 :skolemid |3442| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@357) (Lit |s#0@@170|) (LitInt |key#0@@64|))) ))))
(assert (forall (($ly@@358 T@U) (|run#0@@98| T@U) (|needle#0@@31| Int) ) (!  (=> (and (= (type $ly@@358) LayerTypeType) (= (type |run#0@@98|) (SeqType BoxType))) (= (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@358) |run#0@@98| |needle#0@@31|) (Byte__Order.__default.IndexOfFirstGt $ly@@358 |run#0@@98| |needle#0@@31|))) :qid |totalorderidfyByteOrder.451:12| :skolemid |3443| :pattern ( (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@358) |run#0@@98| |needle#0@@31|)) )))
(assert (forall (($ly@@359 T@U) (|run#0@@99| T@U) (|needle#0@@32| Int) ) (!  (=> (and (= (type $ly@@359) LayerTypeType) (= (type |run#0@@99|) (SeqType BoxType))) (= (Byte__Order.__default.IndexOfFirstGt $ly@@359 |run#0@@99| |needle#0@@32|) (Byte__Order.__default.IndexOfFirstGt $LZ |run#0@@99| |needle#0@@32|))) :qid |totalorderidfyByteOrder.451:12| :skolemid |3444| :pattern ( (Byte__Order.__default.IndexOfFirstGt (AsFuelBottom $ly@@359) |run#0@@99| |needle#0@@32|)) )))
(assert  (=> true (forall (($ly@@360 T@U) (|run#0@@100| T@U) (|needle#0@@33| Int) ) (!  (=> (and (and (= (type $ly@@360) LayerTypeType) (= (type |run#0@@100|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGt#canCall| |run#0@@100| |needle#0@@33|) (and (and ($Is |run#0@@100| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@33|) (< |needle#0@@33| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@100|)))) (and (and (and (<= (Byte__Order.__default.IndexOfFirstGt $ly@@360 |run#0@@100| |needle#0@@33|) (|Seq#Length| |run#0@@100|)) (forall ((|i#0@@103| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@103|) (< |i#0@@103| (Byte__Order.__default.IndexOfFirstGt $ly@@360 |run#0@@100| |needle#0@@33|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@100| |i#0@@103|))) |needle#0@@33|)) :qid |totalorderidfyByteOrder.454:20| :skolemid |3445| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@100| |i#0@@103|))) ))) (forall ((|i#1@@31| Int) ) (!  (=> (and (<= (Byte__Order.__default.IndexOfFirstGt $ly@@360 |run#0@@100| |needle#0@@33|) |i#1@@31|) (< |i#1@@31| (|Seq#Length| |run#0@@100|))) (Byte__Order.__default.lt |needle#0@@33| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@100| |i#1@@31|))))) :qid |totalorderidfyByteOrder.455:20| :skolemid |3446| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@100| |i#1@@31|))) ))) (<= (LitInt 0) (Byte__Order.__default.IndexOfFirstGt $ly@@360 |run#0@@100| |needle#0@@33|)))) :qid |totalorderidfyByteOrder.451:12| :skolemid |3447| :pattern ( (Byte__Order.__default.IndexOfFirstGt $ly@@360 |run#0@@100| |needle#0@@33|)) ))))
(assert (forall (($ly@@361 T@U) (|run#0@@101| T@U) (|needle#0@@34| Int) ) (!  (=> (and (and (= (type $ly@@361) LayerTypeType) (= (type |run#0@@101|) (SeqType BoxType))) (and ($Is |run#0@@101| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@34|) (< |needle#0@@34| 256)))) (= (|Byte__Order.__default.IndexOfFirstGt#requires| $ly@@361 |run#0@@101| |needle#0@@34|) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@101|))) :qid |totalorderidfyByteOrder.451:12| :skolemid |3448| :pattern ( (|Byte__Order.__default.IndexOfFirstGt#requires| $ly@@361 |run#0@@101| |needle#0@@34|)) )))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted6) LayerTypeType))
(assert  (=> true (forall (($ly@@362 T@U) (|run#0@@102| T@U) (|needle#0@@35| Int) ) (!  (=> (and (and (= (type $ly@@362) LayerTypeType) (= (type |run#0@@102|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGt#canCall| |run#0@@102| |needle#0@@35|) (and (and ($Is |run#0@@102| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@35|) (< |needle#0@@35| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@102|)))) (and (=> (not (= (|Seq#Length| |run#0@@102|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.NativeTypes.byte |run#0@@102|) (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@102|))) |needle#0@@35|)) (=> (not (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@102|))) |needle#0@@35|)) (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.byte |run#0@@102|) (|Byte__Order.__default.IndexOfFirstGt#canCall| (Sequences.__default.DropLast Tclass.NativeTypes.byte |run#0@@102|) |needle#0@@35|))))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted6)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted6)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted6) MoreFuel_Byte_Order._default.IsSorted6)) (= (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@362) |run#0@@102| |needle#0@@35|) (ite (= (|Seq#Length| |run#0@@102|) (LitInt 0)) 0 (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@102|))) |needle#0@@35|) (|Seq#Length| |run#0@@102|) (Byte__Order.__default.IndexOfFirstGt $ly@@362 (Sequences.__default.DropLast Tclass.NativeTypes.byte |run#0@@102|) |needle#0@@35|))))))) :qid |totalorderidfyByteOrder.451:12| :skolemid |3449| :pattern ( (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@362) |run#0@@102| |needle#0@@35|)) ))))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted7) LayerTypeType))
(assert  (=> true (forall (($ly@@363 T@U) (|run#0@@103| T@U) (|needle#0@@36| Int) ) (!  (=> (and (and (= (type $ly@@363) LayerTypeType) (= (type |run#0@@103|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGt#canCall| (Lit |run#0@@103|) (LitInt |needle#0@@36|)) (and (and ($Is |run#0@@103| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@36|) (< |needle#0@@36| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted (Lit |run#0@@103|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@103|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.NativeTypes.byte (Lit |run#0@@103|)) (|Byte__Order.__default.lte#canCall| (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@103|))))) (LitInt |needle#0@@36|))) (=> (not (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@103|))))) (LitInt |needle#0@@36|))) (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.byte (Lit |run#0@@103|)) (|Byte__Order.__default.IndexOfFirstGt#canCall| (Lit (Sequences.__default.DropLast Tclass.NativeTypes.byte (Lit |run#0@@103|))) (LitInt |needle#0@@36|)))))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted7)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted7)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted7) MoreFuel_Byte_Order._default.IsSorted7)) (= (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@363) (Lit |run#0@@103|) (LitInt |needle#0@@36|)) (ite (= (|Seq#Length| (Lit |run#0@@103|)) (LitInt 0)) 0 (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@103|))))) (LitInt |needle#0@@36|)) (|Seq#Length| (Lit |run#0@@103|)) (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@363) (Lit (Sequences.__default.DropLast Tclass.NativeTypes.byte (Lit |run#0@@103|))) (LitInt |needle#0@@36|)))))))) :qid |totalorderidfyByteOrder.451:12| :weight 3 :skolemid |3450| :pattern ( (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@363) (Lit |run#0@@103|) (LitInt |needle#0@@36|))) ))))
(assert (forall (($ly@@364 T@U) (|s#0@@171| T@U) (|key#0@@65| Int) (|lo#0@@6| Int) (|hi#0@@6| Int) ) (!  (=> (and (= (type $ly@@364) LayerTypeType) (= (type |s#0@@171|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@364) |s#0@@171| |key#0@@65| |lo#0@@6| |hi#0@@6|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@364 |s#0@@171| |key#0@@65| |lo#0@@6| |hi#0@@6|))) :qid |totalorderidfyByteOrder.482:12| :skolemid |3451| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@364) |s#0@@171| |key#0@@65| |lo#0@@6| |hi#0@@6|)) )))
(assert (forall (($ly@@365 T@U) (|s#0@@172| T@U) (|key#0@@66| Int) (|lo#0@@7| Int) (|hi#0@@7| Int) ) (!  (=> (and (= (type $ly@@365) LayerTypeType) (= (type |s#0@@172|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@365 |s#0@@172| |key#0@@66| |lo#0@@7| |hi#0@@7|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $LZ |s#0@@172| |key#0@@66| |lo#0@@7| |hi#0@@7|))) :qid |totalorderidfyByteOrder.482:12| :skolemid |3452| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter (AsFuelBottom $ly@@365) |s#0@@172| |key#0@@66| |lo#0@@7| |hi#0@@7|)) )))
(assert  (=> true (forall (($ly@@366 T@U) (|s#0@@173| T@U) (|key#0@@67| Int) (|lo#0@@8| Int) (|hi#0@@8| Int) ) (!  (=> (and (and (= (type $ly@@366) LayerTypeType) (= (type |s#0@@173|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@173| |key#0@@67| |lo#0@@8| |hi#0@@8|) (and (and ($Is |s#0@@173| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@67|) (< |key#0@@67| 256))) (and (and (and (and (<= (LitInt 0) |lo#0@@8|) (< |lo#0@@8| |hi#0@@8|)) (<= |hi#0@@8| (+ (|Seq#Length| |s#0@@173|) 1))) (=> (> |lo#0@@8| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@173| (- |lo#0@@8| 1)))) |key#0@@67|))) (=> (<= |hi#0@@8| (|Seq#Length| |s#0@@173|)) (Byte__Order.__default.lt |key#0@@67| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@173| (- |hi#0@@8| 1)))))))))) (and (and (and (<= (LitInt 0) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@366 |s#0@@173| |key#0@@67| |lo#0@@8| |hi#0@@8|)) (<= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@366 |s#0@@173| |key#0@@67| |lo#0@@8| |hi#0@@8|) (|Seq#Length| |s#0@@173|))) (=> (> (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@366 |s#0@@173| |key#0@@67| |lo#0@@8| |hi#0@@8|) 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@173| (- (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@366 |s#0@@173| |key#0@@67| |lo#0@@8| |hi#0@@8|) 1)))) |key#0@@67|))) (=> (< (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@366 |s#0@@173| |key#0@@67| |lo#0@@8| |hi#0@@8|) (|Seq#Length| |s#0@@173|)) (Byte__Order.__default.lt |key#0@@67| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@173| (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@366 |s#0@@173| |key#0@@67| |lo#0@@8| |hi#0@@8|)))))))) :qid |totalorderidfyByteOrder.482:12| :skolemid |3453| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@366 |s#0@@173| |key#0@@67| |lo#0@@8| |hi#0@@8|)) ))))
(assert (forall (($ly@@367 T@U) (|s#0@@174| T@U) (|key#0@@68| Int) (|lo#0@@9| Int) (|hi#0@@9| Int) ) (!  (=> (and (and (= (type $ly@@367) LayerTypeType) (= (type |s#0@@174|) (SeqType BoxType))) (and ($Is |s#0@@174| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@68|) (< |key#0@@68| 256)))) (= (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@367 |s#0@@174| |key#0@@68| |lo#0@@9| |hi#0@@9|)  (and (and (and (and (<= (LitInt 0) |lo#0@@9|) (< |lo#0@@9| |hi#0@@9|)) (<= |hi#0@@9| (+ (|Seq#Length| |s#0@@174|) 1))) (=> (> |lo#0@@9| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@174| (- |lo#0@@9| 1)))) |key#0@@68|))) (=> (<= |hi#0@@9| (|Seq#Length| |s#0@@174|)) (Byte__Order.__default.lt |key#0@@68| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@174| (- |hi#0@@9| 1))))))))) :qid |totalorderidfyByteOrder.482:12| :skolemid |3454| :pattern ( (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@367 |s#0@@174| |key#0@@68| |lo#0@@9| |hi#0@@9|)) )))
(assert  (=> true (forall (($ly@@368 T@U) (|s#0@@175| T@U) (|key#0@@69| Int) (|lo#0@@10| Int) (|hi#0@@10| Int) ) (!  (=> (and (and (= (type $ly@@368) LayerTypeType) (= (type |s#0@@175|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@175| |key#0@@69| |lo#0@@10| |hi#0@@10|) (and (and ($Is |s#0@@175| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@69|) (< |key#0@@69| 256))) (and (and (and (and (<= (LitInt 0) |lo#0@@10|) (< |lo#0@@10| |hi#0@@10|)) (<= |hi#0@@10| (+ (|Seq#Length| |s#0@@175|) 1))) (=> (> |lo#0@@10| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@175| (- |lo#0@@10| 1)))) |key#0@@69|))) (=> (<= |hi#0@@10| (|Seq#Length| |s#0@@175|)) (Byte__Order.__default.lt |key#0@@69| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@175| (- |hi#0@@10| 1)))))))))) (and (=> (< (+ |lo#0@@10| 1) |hi#0@@10|) (let ((|mid#0@@1| (Div (+ |lo#0@@10| |hi#0@@10|) (LitInt 2)))) (and (and (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@175| (- |mid#0@@1| 1)))) |key#0@@69|) (=> (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@175| (- |mid#0@@1| 1)))) |key#0@@69|) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@175| |key#0@@69| |mid#0@@1| |hi#0@@10|))) (=> (not (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@175| (- |mid#0@@1| 1)))) |key#0@@69|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@175| |key#0@@69| |lo#0@@10| |mid#0@@1|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@368) |s#0@@175| |key#0@@69| |lo#0@@10| |hi#0@@10|) (ite (< (+ |lo#0@@10| 1) |hi#0@@10|) (let ((|mid#0@@2| (Div (+ |lo#0@@10| |hi#0@@10|) (LitInt 2)))) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@175| (- |mid#0@@2| 1)))) |key#0@@69|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@368 |s#0@@175| |key#0@@69| |mid#0@@2| |hi#0@@10|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@368 |s#0@@175| |key#0@@69| |lo#0@@10| |mid#0@@2|))) |lo#0@@10|)))) :qid |totalorderidfyByteOrder.482:12| :skolemid |3455| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@368) |s#0@@175| |key#0@@69| |lo#0@@10| |hi#0@@10|)) ))))
(assert  (=> true (forall (($ly@@369 T@U) (|s#0@@176| T@U) (|key#0@@70| Int) (|lo#0@@11| Int) (|hi#0@@11| Int) ) (!  (=> (and (and (= (type $ly@@369) LayerTypeType) (= (type |s#0@@176|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@176| |key#0@@70| (LitInt |lo#0@@11|) (LitInt |hi#0@@11|)) (and (and ($Is |s#0@@176| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@70|) (< |key#0@@70| 256))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@11|)) (< |lo#0@@11| |hi#0@@11|)) (<= (LitInt |hi#0@@11|) (+ (|Seq#Length| |s#0@@176|) 1))) (=> (> |lo#0@@11| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@176| (LitInt (- |lo#0@@11| 1))))) |key#0@@70|))) (=> (<= (LitInt |hi#0@@11|) (|Seq#Length| |s#0@@176|)) (Byte__Order.__default.lt |key#0@@70| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@176| (LitInt (- |hi#0@@11| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@11| 1) |hi#0@@11|)))) (let ((|mid#1@@1| (LitInt (Div (+ |lo#0@@11| |hi#0@@11|) (LitInt 2))))) (and (and (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@176| (- |mid#1@@1| 1)))) |key#0@@70|) (=> (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@176| (- |mid#1@@1| 1)))) |key#0@@70|) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@176| |key#0@@70| |mid#1@@1| (LitInt |hi#0@@11|)))) (=> (not (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@176| (- |mid#1@@1| 1)))) |key#0@@70|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@176| |key#0@@70| (LitInt |lo#0@@11|) |mid#1@@1|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@369) |s#0@@176| |key#0@@70| (LitInt |lo#0@@11|) (LitInt |hi#0@@11|)) (ite (< (+ |lo#0@@11| 1) |hi#0@@11|) (let ((|mid#1@@2| (LitInt (Div (+ |lo#0@@11| |hi#0@@11|) (LitInt 2))))) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@176| (LitInt (- |mid#1@@2| 1))))) |key#0@@70|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@369) |s#0@@176| |key#0@@70| |mid#1@@2| (LitInt |hi#0@@11|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@369) |s#0@@176| |key#0@@70| (LitInt |lo#0@@11|) |mid#1@@2|))) |lo#0@@11|)))) :qid |totalorderidfyByteOrder.482:12| :weight 3 :skolemid |3456| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@369) |s#0@@176| |key#0@@70| (LitInt |lo#0@@11|) (LitInt |hi#0@@11|))) ))))
(assert  (=> true (forall (($ly@@370 T@U) (|s#0@@177| T@U) (|key#0@@71| Int) (|lo#0@@12| Int) (|hi#0@@12| Int) ) (!  (=> (and (and (= (type $ly@@370) LayerTypeType) (= (type |s#0@@177|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@177|) (LitInt |key#0@@71|) (LitInt |lo#0@@12|) (LitInt |hi#0@@12|)) (and (and ($Is |s#0@@177| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@71|) (< |key#0@@71| 256))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@12|)) (< |lo#0@@12| |hi#0@@12|)) (<= (LitInt |hi#0@@12|) (+ (|Seq#Length| (Lit |s#0@@177|)) 1))) (=> (> |lo#0@@12| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@177|) (LitInt (- |lo#0@@12| 1))))) (LitInt |key#0@@71|)))) (=> (<= (LitInt |hi#0@@12|) (|Seq#Length| (Lit |s#0@@177|))) (Byte__Order.__default.lt (LitInt |key#0@@71|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@177|) (LitInt (- |hi#0@@12| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@12| 1) |hi#0@@12|)))) (let ((|mid#2@@1| (LitInt (Div (+ |lo#0@@12| |hi#0@@12|) (LitInt 2))))) (and (and (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@177|) (- |mid#2@@1| 1)))) (LitInt |key#0@@71|)) (=> (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@177|) (- |mid#2@@1| 1)))) (LitInt |key#0@@71|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@177|) (LitInt |key#0@@71|) |mid#2@@1| (LitInt |hi#0@@12|)))) (=> (not (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@177|) (- |mid#2@@1| 1)))) (LitInt |key#0@@71|))) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@177|) (LitInt |key#0@@71|) (LitInt |lo#0@@12|) |mid#2@@1|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@370) (Lit |s#0@@177|) (LitInt |key#0@@71|) (LitInt |lo#0@@12|) (LitInt |hi#0@@12|)) (ite (< (+ |lo#0@@12| 1) |hi#0@@12|) (let ((|mid#2@@2| (LitInt (Div (+ |lo#0@@12| |hi#0@@12|) (LitInt 2))))) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@177|) (LitInt (- |mid#2@@2| 1))))) (LitInt |key#0@@71|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@370) (Lit |s#0@@177|) (LitInt |key#0@@71|) |mid#2@@2| (LitInt |hi#0@@12|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@370) (Lit |s#0@@177|) (LitInt |key#0@@71|) (LitInt |lo#0@@12|) |mid#2@@2|))) |lo#0@@12|)))) :qid |totalorderidfyByteOrder.482:12| :weight 3 :skolemid |3457| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@370) (Lit |s#0@@177|) (LitInt |key#0@@71|) (LitInt |lo#0@@12|) (LitInt |hi#0@@12|))) ))))
(assert (forall (($ly@@371 T@U) (|s#0@@178| T@U) (|key#0@@72| Int) ) (!  (=> (and (= (type $ly@@371) LayerTypeType) (= (type |s#0@@178|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@371) |s#0@@178| |key#0@@72|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@371 |s#0@@178| |key#0@@72|))) :qid |totalorderidfyByteOrder.502:22| :skolemid |3458| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@371) |s#0@@178| |key#0@@72|)) )))
(assert (forall (($ly@@372 T@U) (|s#0@@179| T@U) (|key#0@@73| Int) ) (!  (=> (and (= (type $ly@@372) LayerTypeType) (= (type |s#0@@179|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@372 |s#0@@179| |key#0@@73|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $LZ |s#0@@179| |key#0@@73|))) :qid |totalorderidfyByteOrder.502:22| :skolemid |3459| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGt (AsFuelBottom $ly@@372) |s#0@@179| |key#0@@73|)) )))
(assert  (=> true (forall (($ly@@373 T@U) (|s#0@@180| T@U) (|key#0@@74| Int) ) (!  (=> (and (and (= (type $ly@@373) LayerTypeType) (= (type |s#0@@180|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@180| |key#0@@74|) (and ($Is |s#0@@180| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@74|) (< |key#0@@74| 256))))) (and (and (and (<= (LitInt 0) (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@373 |s#0@@180| |key#0@@74|)) (<= (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@373 |s#0@@180| |key#0@@74|) (|Seq#Length| |s#0@@180|))) (=> (> (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@373 |s#0@@180| |key#0@@74|) 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@180| (- (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@373 |s#0@@180| |key#0@@74|) 1)))) |key#0@@74|))) (=> (< (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@373 |s#0@@180| |key#0@@74|) (|Seq#Length| |s#0@@180|)) (Byte__Order.__default.lt |key#0@@74| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@180| (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@373 |s#0@@180| |key#0@@74|)))))))) :qid |totalorderidfyByteOrder.502:22| :skolemid |3460| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@373 |s#0@@180| |key#0@@74|)) ))))
(assert (forall (($ly@@374 T@U) (|s#0@@181| T@U) (|key#0@@75| Int) ) (!  (=> (and (and (= (type $ly@@374) LayerTypeType) (= (type |s#0@@181|) (SeqType BoxType))) (and ($Is |s#0@@181| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@75|) (< |key#0@@75| 256)))) (= (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@374 |s#0@@181| |key#0@@75|) true)) :qid |totalorderidfyByteOrder.502:22| :skolemid |3461| :pattern ( (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@374 |s#0@@181| |key#0@@75|)) )))
(assert  (=> true (forall (($ly@@375 T@U) (|s#0@@182| T@U) (|key#0@@76| Int) ) (!  (=> (and (and (= (type $ly@@375) LayerTypeType) (= (type |s#0@@182|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@182| |key#0@@76|) (and ($Is |s#0@@182| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@76|) (< |key#0@@76| 256))))) (and (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@182| |key#0@@76| (LitInt 0) (+ (|Seq#Length| |s#0@@182|) 1)) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@375) |s#0@@182| |key#0@@76|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) |s#0@@182| |key#0@@76| (LitInt 0) (+ (|Seq#Length| |s#0@@182|) 1))))) :qid |totalorderidfyByteOrder.502:22| :skolemid |3462| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@375) |s#0@@182| |key#0@@76|)) ))))
(assert  (=> true (forall (($ly@@376 T@U) (|s#0@@183| T@U) (|key#0@@77| Int) ) (!  (=> (and (and (= (type $ly@@376) LayerTypeType) (= (type |s#0@@183|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (Lit |s#0@@183|) (LitInt |key#0@@77|)) (and ($Is |s#0@@183| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@77|) (< |key#0@@77| 256))))) (and (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@183|) (LitInt |key#0@@77|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@183|)) 1)) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@376) (Lit |s#0@@183|) (LitInt |key#0@@77|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) (Lit |s#0@@183|) (LitInt |key#0@@77|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@183|)) 1))))) :qid |totalorderidfyByteOrder.502:22| :weight 3 :skolemid |3463| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@376) (Lit |s#0@@183|) (LitInt |key#0@@77|))) ))))
(assert  (=> true (forall ((|a#0@@107| T@U) (|b#0@@71| T@U) ) (!  (=> (and (and (= (type |a#0@@107|) (MapType0Type BoxType boolType)) (= (type |b#0@@71|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLte#canCall| |a#0@@107| |b#0@@71|) (and ($Is |a#0@@107| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@71| (TSet Tclass.NativeTypes.byte))))) true) :qid |totalorderidfyByteOrder.658:23| :skolemid |3464| :pattern ( (Byte__Order.__default.SetAllLte |a#0@@107| |b#0@@71|)) ))))
(assert (forall ((|a#0@@108| T@U) (|b#0@@72| T@U) ) (!  (=> (and (and (= (type |a#0@@108|) (MapType0Type BoxType boolType)) (= (type |b#0@@72|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@108| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@72| (TSet Tclass.NativeTypes.byte)))) (= (|Byte__Order.__default.SetAllLte#requires| |a#0@@108| |b#0@@72|) true)) :qid |totalorderidfyByteOrder.658:23| :skolemid |3465| :pattern ( (|Byte__Order.__default.SetAllLte#requires| |a#0@@108| |b#0@@72|)) )))
(assert  (=> true (forall ((|a#0@@109| T@U) (|b#0@@73| T@U) ) (!  (=> (and (and (= (type |a#0@@109|) (MapType0Type BoxType boolType)) (= (type |b#0@@73|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLte#canCall| |a#0@@109| |b#0@@73|) (and ($Is |a#0@@109| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@73| (TSet Tclass.NativeTypes.byte))))) (and (forall ((|x#0@@2| Int) (|y#0| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@2|) (< |x#0@@2| 256)) (and (<= (LitInt 0) |y#0|) (< |y#0| 256))) (=> (U_2_bool (MapType0Select |a#0@@109| ($Box (int_2_U |x#0@@2|)))) (=> (U_2_bool (MapType0Select |b#0@@73| ($Box (int_2_U |y#0|)))) (|Byte__Order.__default.lte#canCall| |x#0@@2| |y#0|)))) :qid |totalorderidfyByteOrder.659:12| :skolemid |3467| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#0@@2| |y#0|)) :pattern ( (MapType0Select |b#0@@73| ($Box (int_2_U |y#0|))) (MapType0Select |a#0@@109| ($Box (int_2_U |x#0@@2|)))) )) (= (Byte__Order.__default.SetAllLte |a#0@@109| |b#0@@73|) (forall ((|x#0@@3| Int) (|y#0@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@3|) (< |x#0@@3| 256)) (and (<= (LitInt 0) |y#0@@0|) (< |y#0@@0| 256))) (=> (and (U_2_bool (MapType0Select |a#0@@109| ($Box (int_2_U |x#0@@3|)))) (U_2_bool (MapType0Select |b#0@@73| ($Box (int_2_U |y#0@@0|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#0@@3| |y#0@@0|))) :qid |totalorderidfyByteOrder.659:12| :skolemid |3466| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#0@@3| |y#0@@0|)) :pattern ( (MapType0Select |b#0@@73| ($Box (int_2_U |y#0@@0|))) (MapType0Select |a#0@@109| ($Box (int_2_U |x#0@@3|)))) ))))) :qid |totalorderidfyByteOrder.658:23| :skolemid |3468| :pattern ( (Byte__Order.__default.SetAllLte |a#0@@109| |b#0@@73|)) ))))
(assert  (=> true (forall ((|a#0@@110| T@U) (|b#0@@74| T@U) ) (!  (=> (and (and (= (type |a#0@@110|) (MapType0Type BoxType boolType)) (= (type |b#0@@74|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLte#canCall| (Lit |a#0@@110|) (Lit |b#0@@74|)) (and ($Is |a#0@@110| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@74| (TSet Tclass.NativeTypes.byte))))) (and (forall ((|x#1| Int) (|y#1| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1|) (< |x#1| 256)) (and (<= (LitInt 0) |y#1|) (< |y#1| 256))) (=> (U_2_bool (MapType0Select (Lit |a#0@@110|) ($Box (int_2_U |x#1|)))) (=> (U_2_bool (MapType0Select (Lit |b#0@@74|) ($Box (int_2_U |y#1|)))) (|Byte__Order.__default.lte#canCall| |x#1| |y#1|)))) :qid |totalorderidfyByteOrder.659:12| :skolemid |3470| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#1| |y#1|)) :pattern ( (MapType0Select |b#0@@74| ($Box (int_2_U |y#1|))) (MapType0Select |a#0@@110| ($Box (int_2_U |x#1|)))) )) (= (Byte__Order.__default.SetAllLte (Lit |a#0@@110|) (Lit |b#0@@74|)) (forall ((|x#1@@0| Int) (|y#1@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1@@0|) (< |x#1@@0| 256)) (and (<= (LitInt 0) |y#1@@0|) (< |y#1@@0| 256))) (=> (and (U_2_bool (MapType0Select (Lit |a#0@@110|) ($Box (int_2_U |x#1@@0|)))) (U_2_bool (MapType0Select (Lit |b#0@@74|) ($Box (int_2_U |y#1@@0|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#1@@0| |y#1@@0|))) :qid |totalorderidfyByteOrder.659:12| :skolemid |3469| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#1@@0| |y#1@@0|)) :pattern ( (MapType0Select |b#0@@74| ($Box (int_2_U |y#1@@0|))) (MapType0Select |a#0@@110| ($Box (int_2_U |x#1@@0|)))) ))))) :qid |totalorderidfyByteOrder.658:23| :weight 3 :skolemid |3471| :pattern ( (Byte__Order.__default.SetAllLte (Lit |a#0@@110|) (Lit |b#0@@74|))) ))))
(assert  (=> true (forall ((|a#0@@111| T@U) (|b#0@@75| T@U) ) (!  (=> (and (and (= (type |a#0@@111|) (MapType0Type BoxType boolType)) (= (type |b#0@@75|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLt#canCall| |a#0@@111| |b#0@@75|) (and ($Is |a#0@@111| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@75| (TSet Tclass.NativeTypes.byte))))) true) :qid |totalorderidfyByteOrder.662:22| :skolemid |3472| :pattern ( (Byte__Order.__default.SetAllLt |a#0@@111| |b#0@@75|)) ))))
(assert (forall ((|a#0@@112| T@U) (|b#0@@76| T@U) ) (!  (=> (and (and (= (type |a#0@@112|) (MapType0Type BoxType boolType)) (= (type |b#0@@76|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@112| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@76| (TSet Tclass.NativeTypes.byte)))) (= (|Byte__Order.__default.SetAllLt#requires| |a#0@@112| |b#0@@76|) true)) :qid |totalorderidfyByteOrder.662:22| :skolemid |3473| :pattern ( (|Byte__Order.__default.SetAllLt#requires| |a#0@@112| |b#0@@76|)) )))
(assert  (=> true (forall ((|a#0@@113| T@U) (|b#0@@77| T@U) ) (!  (=> (and (and (= (type |a#0@@113|) (MapType0Type BoxType boolType)) (= (type |b#0@@77|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLt#canCall| |a#0@@113| |b#0@@77|) (and ($Is |a#0@@113| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@77| (TSet Tclass.NativeTypes.byte))))) (and (forall ((|x#0@@4| Int) (|y#0@@1| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@4|) (< |x#0@@4| 256)) (and (<= (LitInt 0) |y#0@@1|) (< |y#0@@1| 256))) (=> (U_2_bool (MapType0Select |a#0@@113| ($Box (int_2_U |x#0@@4|)))) (=> (U_2_bool (MapType0Select |b#0@@77| ($Box (int_2_U |y#0@@1|)))) (|Byte__Order.__default.lt#canCall| |x#0@@4| |y#0@@1|)))) :qid |totalorderidfyByteOrder.663:12| :skolemid |3475| :pattern ( (Byte__Order.__default.lt |x#0@@4| |y#0@@1|)) :pattern ( (MapType0Select |b#0@@77| ($Box (int_2_U |y#0@@1|))) (MapType0Select |a#0@@113| ($Box (int_2_U |x#0@@4|)))) )) (= (Byte__Order.__default.SetAllLt |a#0@@113| |b#0@@77|) (forall ((|x#0@@5| Int) (|y#0@@2| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@5|) (< |x#0@@5| 256)) (and (<= (LitInt 0) |y#0@@2|) (< |y#0@@2| 256))) (=> (and (U_2_bool (MapType0Select |a#0@@113| ($Box (int_2_U |x#0@@5|)))) (U_2_bool (MapType0Select |b#0@@77| ($Box (int_2_U |y#0@@2|))))) (Byte__Order.__default.lt |x#0@@5| |y#0@@2|))) :qid |totalorderidfyByteOrder.663:12| :skolemid |3474| :pattern ( (Byte__Order.__default.lt |x#0@@5| |y#0@@2|)) :pattern ( (MapType0Select |b#0@@77| ($Box (int_2_U |y#0@@2|))) (MapType0Select |a#0@@113| ($Box (int_2_U |x#0@@5|)))) ))))) :qid |totalorderidfyByteOrder.662:22| :skolemid |3476| :pattern ( (Byte__Order.__default.SetAllLt |a#0@@113| |b#0@@77|)) ))))
(assert  (=> true (forall ((|a#0@@114| T@U) (|b#0@@78| T@U) ) (!  (=> (and (and (= (type |a#0@@114|) (MapType0Type BoxType boolType)) (= (type |b#0@@78|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLt#canCall| (Lit |a#0@@114|) (Lit |b#0@@78|)) (and ($Is |a#0@@114| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@78| (TSet Tclass.NativeTypes.byte))))) (and (forall ((|x#1@@1| Int) (|y#1@@1| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1@@1|) (< |x#1@@1| 256)) (and (<= (LitInt 0) |y#1@@1|) (< |y#1@@1| 256))) (=> (U_2_bool (MapType0Select (Lit |a#0@@114|) ($Box (int_2_U |x#1@@1|)))) (=> (U_2_bool (MapType0Select (Lit |b#0@@78|) ($Box (int_2_U |y#1@@1|)))) (|Byte__Order.__default.lt#canCall| |x#1@@1| |y#1@@1|)))) :qid |totalorderidfyByteOrder.663:12| :skolemid |3478| :pattern ( (Byte__Order.__default.lt |x#1@@1| |y#1@@1|)) :pattern ( (MapType0Select |b#0@@78| ($Box (int_2_U |y#1@@1|))) (MapType0Select |a#0@@114| ($Box (int_2_U |x#1@@1|)))) )) (= (Byte__Order.__default.SetAllLt (Lit |a#0@@114|) (Lit |b#0@@78|)) (forall ((|x#1@@2| Int) (|y#1@@2| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1@@2|) (< |x#1@@2| 256)) (and (<= (LitInt 0) |y#1@@2|) (< |y#1@@2| 256))) (=> (and (U_2_bool (MapType0Select (Lit |a#0@@114|) ($Box (int_2_U |x#1@@2|)))) (U_2_bool (MapType0Select (Lit |b#0@@78|) ($Box (int_2_U |y#1@@2|))))) (Byte__Order.__default.lt |x#1@@2| |y#1@@2|))) :qid |totalorderidfyByteOrder.663:12| :skolemid |3477| :pattern ( (Byte__Order.__default.lt |x#1@@2| |y#1@@2|)) :pattern ( (MapType0Select |b#0@@78| ($Box (int_2_U |y#1@@2|))) (MapType0Select |a#0@@114| ($Box (int_2_U |x#1@@2|)))) ))))) :qid |totalorderidfyByteOrder.662:22| :weight 3 :skolemid |3479| :pattern ( (Byte__Order.__default.SetAllLt (Lit |a#0@@114|) (Lit |b#0@@78|))) ))))
(assert (forall (($ly@@377 T@U) (|a#0@@115| Int) ) (!  (=> (= (type $ly@@377) LayerTypeType) (= (Byte__Order.__default.NotMinimum ($LS $ly@@377) |a#0@@115|) (Byte__Order.__default.NotMinimum $ly@@377 |a#0@@115|))) :qid |totalorderidfyByteOrder.674:23| :skolemid |3480| :pattern ( (Byte__Order.__default.NotMinimum ($LS $ly@@377) |a#0@@115|)) )))
(assert (forall (($ly@@378 T@U) (|a#0@@116| Int) ) (!  (=> (= (type $ly@@378) LayerTypeType) (= (Byte__Order.__default.NotMinimum $ly@@378 |a#0@@116|) (Byte__Order.__default.NotMinimum $LZ |a#0@@116|))) :qid |totalorderidfyByteOrder.674:23| :skolemid |3481| :pattern ( (Byte__Order.__default.NotMinimum (AsFuelBottom $ly@@378) |a#0@@116|)) )))
(assert  (=> true (forall (($ly@@379 T@U) (|a#0@@117| Int) ) (!  (=> (and (= (type $ly@@379) LayerTypeType) (or (|Byte__Order.__default.NotMinimum#canCall| |a#0@@117|) (and (<= (LitInt 0) |a#0@@117|) (< |a#0@@117| 256)))) true) :qid |totalorderidfyByteOrder.674:23| :skolemid |3482| :pattern ( (Byte__Order.__default.NotMinimum $ly@@379 |a#0@@117|)) ))))
(assert (forall (($ly@@380 T@U) (|a#0@@118| Int) ) (!  (=> (= (type $ly@@380) LayerTypeType) (=> (and (<= (LitInt 0) |a#0@@118|) (< |a#0@@118| 256)) (= (|Byte__Order.__default.NotMinimum#requires| $ly@@380 |a#0@@118|) true))) :qid |totalorderidfyByteOrder.674:23| :skolemid |3483| :pattern ( (|Byte__Order.__default.NotMinimum#requires| $ly@@380 |a#0@@118|)) )))
(assert  (=> true (forall (($ly@@381 T@U) (|a#0@@119| Int) ) (!  (=> (and (= (type $ly@@381) LayerTypeType) (or (|Byte__Order.__default.NotMinimum#canCall| |a#0@@119|) (and (<= (LitInt 0) |a#0@@119|) (< |a#0@@119| 256)))) (and (forall ((|b#0@@79| Int) ) (!  (=> (and (<= (LitInt 0) |b#0@@79|) (< |b#0@@79| 256)) (|Byte__Order.__default.lt#canCall| |b#0@@79| |a#0@@119|)) :qid |totalorderidfyByteOrder.675:12| :skolemid |3485| :pattern ( (Byte__Order.__default.lt |b#0@@79| |a#0@@119|)) )) (= (Byte__Order.__default.NotMinimum ($LS $ly@@381) |a#0@@119|) (exists ((|b#0@@80| Int) ) (!  (and (and (<= (LitInt 0) |b#0@@80|) (< |b#0@@80| 256)) (Byte__Order.__default.lt |b#0@@80| |a#0@@119|)) :qid |totalorderidfyByteOrder.675:12| :skolemid |3484| :pattern ( (Byte__Order.__default.lt |b#0@@80| |a#0@@119|)) ))))) :qid |totalorderidfyByteOrder.674:23| :skolemid |3486| :pattern ( (Byte__Order.__default.NotMinimum ($LS $ly@@381) |a#0@@119|)) ))))
(assert  (=> true (forall (($ly@@382 T@U) (|a#0@@120| Int) ) (!  (=> (and (= (type $ly@@382) LayerTypeType) (or (|Byte__Order.__default.NotMinimum#canCall| (LitInt |a#0@@120|)) (and (<= (LitInt 0) |a#0@@120|) (< |a#0@@120| 256)))) (and (forall ((|b#1@@1| Int) ) (!  (=> (and (<= (LitInt 0) |b#1@@1|) (< |b#1@@1| 256)) (|Byte__Order.__default.lt#canCall| |b#1@@1| (LitInt |a#0@@120|))) :qid |totalorderidfyByteOrder.675:12| :skolemid |3488| :pattern ( (Byte__Order.__default.lt |b#1@@1| |a#0@@120|)) )) (= (Byte__Order.__default.NotMinimum ($LS $ly@@382) (LitInt |a#0@@120|)) (exists ((|b#1@@2| Int) ) (!  (and (and (<= (LitInt 0) |b#1@@2|) (< |b#1@@2| 256)) (Byte__Order.__default.lt |b#1@@2| (LitInt |a#0@@120|))) :qid |totalorderidfyByteOrder.675:12| :skolemid |3487| :pattern ( (Byte__Order.__default.lt |b#1@@2| |a#0@@120|)) ))))) :qid |totalorderidfyByteOrder.674:23| :weight 3 :skolemid |3489| :pattern ( (Byte__Order.__default.NotMinimum ($LS $ly@@382) (LitInt |a#0@@120|))) ))))
(assert (forall ((arg0@@616 T@U) (arg1@@292 T@U) (arg2@@181 Int) (arg3@@125 T@U) ) (! (= (type (Byte__Order.__default.MapPivotedUnion arg0@@616 arg1@@292 arg2@@181 arg3@@125)) (MapType BoxType BoxType)) :qid |funType:Byte__Order.__default.MapPivotedUnion| :pattern ( (Byte__Order.__default.MapPivotedUnion arg0@@616 arg1@@292 arg2@@181 arg3@@125)) )))
(assert  (=> true (forall ((Byte_Order._default.MapPivotedUnion$Value T@U) (|left#0| T@U) (|pivot#0| Int) (|right#0| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.MapPivotedUnion$Value) TyType) (= (type |left#0|) (MapType BoxType BoxType))) (= (type |right#0|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapPivotedUnion#canCall| Byte_Order._default.MapPivotedUnion$Value |left#0| |pivot#0| |right#0|) (and (and ($Is |left#0| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value)) (and (<= (LitInt 0) |pivot#0|) (< |pivot#0| 256))) ($Is |right#0| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value))))) ($Is (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value |left#0| |pivot#0| |right#0|) (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value))) :qid |unknown.0:0| :skolemid |3490| :pattern ( (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value |left#0| |pivot#0| |right#0|)) ))))
(assert (forall ((Byte_Order._default.MapPivotedUnion$Value@@0 T@U) (|left#0@@0| T@U) (|pivot#0@@0| Int) (|right#0@@0| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.MapPivotedUnion$Value@@0) TyType) (= (type |left#0@@0|) (MapType BoxType BoxType))) (= (type |right#0@@0|) (MapType BoxType BoxType))) (and (and ($Is |left#0@@0| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@0)) (and (<= (LitInt 0) |pivot#0@@0|) (< |pivot#0@@0| 256))) ($Is |right#0@@0| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@0)))) (= (|Byte__Order.__default.MapPivotedUnion#requires| Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@0| |pivot#0@@0| |right#0@@0|) true)) :qid |unknown.0:0| :skolemid |3491| :pattern ( (|Byte__Order.__default.MapPivotedUnion#requires| Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@0| |pivot#0@@0| |right#0@@0|)) )))
(assert  (and (forall ((arg0@@617 T@U) (arg1@@293 Int) ) (! (= (type (|lambda#116| arg0@@617 arg1@@293)) (MapType0Type BoxType boolType)) :qid |funType:lambda#116| :pattern ( (|lambda#116| arg0@@617 arg1@@293)) )) (forall ((arg0@@618 T@U) (arg1@@294 T@U) (arg2@@182 Int) ) (! (= (type (|lambda#118| arg0@@618 arg1@@294 arg2@@182)) (MapType0Type BoxType boolType)) :qid |funType:lambda#118| :pattern ( (|lambda#118| arg0@@618 arg1@@294 arg2@@182)) ))))
(assert  (=> true (forall ((Byte_Order._default.MapPivotedUnion$Value@@1 T@U) (|left#0@@1| T@U) (|pivot#0@@1| Int) (|right#0@@1| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.MapPivotedUnion$Value@@1) TyType) (= (type |left#0@@1|) (MapType BoxType BoxType))) (= (type |right#0@@1|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapPivotedUnion#canCall| Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| |pivot#0@@1| |right#0@@1|) (and (and ($Is |left#0@@1| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1)) (and (<= (LitInt 0) |pivot#0@@1|) (< |pivot#0@@1| 256))) ($Is |right#0@@1| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1))))) (and (and (and (forall ((|k#0@@60| Int) ) (!  (=> (and (<= (LitInt 0) |k#0@@60|) (< |k#0@@60| 256)) (|Byte__Order.__default.lt#canCall| |k#0@@60| |pivot#0@@1|)) :qid |totalorderidfyByteOrder.694:57| :skolemid |3492| :pattern ( (Byte__Order.__default.lt |k#0@@60| |pivot#0@@1|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| (|lambda#116| Tclass.NativeTypes.byte |pivot#0@@1|))) (let ((|restricted_left#0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| (|lambda#116| Tclass.NativeTypes.byte |pivot#0@@1|)))) (and (and (forall ((|k#1@@10| Int) ) (!  (=> (and (<= (LitInt 0) |k#1@@10|) (< |k#1@@10| 256)) (|Byte__Order.__default.lte#canCall| |pivot#0@@1| |k#1@@10|)) :qid |totalorderidfyByteOrder.695:59| :skolemid |3493| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |pivot#0@@1| |k#1@@10|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@1| (|lambda#118| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte |pivot#0@@1|))) (let ((|restricted_right#0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@1| (|lambda#118| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte |pivot#0@@1|)))) (|Maps.__default.MapDisjointUnion#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |restricted_left#0| |restricted_right#0|))))) (= (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| |pivot#0@@1| |right#0@@1|) (let ((|restricted_left#0@@0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| (|lambda#116| Tclass.NativeTypes.byte |pivot#0@@1|)))) (let ((|restricted_right#0@@0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@1| (|lambda#118| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte |pivot#0@@1|)))) (Maps.__default.MapDisjointUnion Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 StartFuel_Maps._default.MapDisjointUnion |restricted_left#0@@0| |restricted_right#0@@0|)))))) :qid |unknown.0:0| :skolemid |3494| :pattern ( (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| |pivot#0@@1| |right#0@@1|)) ))))
(assert  (=> true (forall ((Byte_Order._default.MapPivotedUnion$Value@@2 T@U) (|left#0@@2| T@U) (|pivot#0@@2| Int) (|right#0@@2| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.MapPivotedUnion$Value@@2) TyType) (= (type |left#0@@2|) (MapType BoxType BoxType))) (= (type |right#0@@2|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapPivotedUnion#canCall| Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (LitInt |pivot#0@@2|) (Lit |right#0@@2|)) (and (and ($Is |left#0@@2| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2)) (and (<= (LitInt 0) |pivot#0@@2|) (< |pivot#0@@2| 256))) ($Is |right#0@@2| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2))))) (and (and (and (forall ((|k#2@@6| Int) ) (!  (=> (and (<= (LitInt 0) |k#2@@6|) (< |k#2@@6| 256)) (|Byte__Order.__default.lt#canCall| |k#2@@6| (LitInt |pivot#0@@2|))) :qid |totalorderidfyByteOrder.694:57| :skolemid |3495| :pattern ( (Byte__Order.__default.lt |k#2@@6| |pivot#0@@2|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (|lambda#116| Tclass.NativeTypes.byte (LitInt |pivot#0@@2|)))) (let ((|restricted_left#1| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (|lambda#116| Tclass.NativeTypes.byte (LitInt |pivot#0@@2|))))) (and (and (forall ((|k#3| Int) ) (!  (=> (and (<= (LitInt 0) |k#3|) (< |k#3| 256)) (|Byte__Order.__default.lte#canCall| (LitInt |pivot#0@@2|) |k#3|)) :qid |totalorderidfyByteOrder.695:59| :skolemid |3496| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |pivot#0@@2| |k#3|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@2|) (|lambda#118| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte (LitInt |pivot#0@@2|)))) (let ((|restricted_right#1| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@2|) (|lambda#118| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte (LitInt |pivot#0@@2|))))) (|Maps.__default.MapDisjointUnion#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 |restricted_left#1| |restricted_right#1|))))) (= (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (LitInt |pivot#0@@2|) (Lit |right#0@@2|)) (let ((|restricted_left#1@@0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (|lambda#116| Tclass.NativeTypes.byte (LitInt |pivot#0@@2|))))) (let ((|restricted_right#1@@0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@2|) (|lambda#118| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte (LitInt |pivot#0@@2|))))) (Maps.__default.MapDisjointUnion Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 StartFuel_Maps._default.MapDisjointUnion |restricted_left#1@@0| |restricted_right#1@@0|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3497| :pattern ( (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (LitInt |pivot#0@@2|) (Lit |right#0@@2|))) ))))
(assert (forall ((arg0@@619 T@U) (arg1@@295 Int) ) (! (= (type (Byte__Order.__default.SetSuccessor arg0@@619 arg1@@295)) DatatypeTypeType) :qid |funType:Byte__Order.__default.SetSuccessor| :pattern ( (Byte__Order.__default.SetSuccessor arg0@@619 arg1@@295)) )))
(assert  (=> true (forall ((|m#0@@96| T@U) (|key#0@@78| Int) ) (!  (=> (and (= (type |m#0@@96|) (MapType0Type BoxType boolType)) (or (|Byte__Order.__default.SetSuccessor#canCall| |m#0@@96| |key#0@@78|) (and ($Is |m#0@@96| (TSet Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@78|) (< |key#0@@78| 256))))) ($Is (Byte__Order.__default.SetSuccessor |m#0@@96| |key#0@@78|) (Tclass.Options.Option Tclass.NativeTypes.byte))) :qid |totalorderidfyByteOrder.699:25| :skolemid |3498| :pattern ( (Byte__Order.__default.SetSuccessor |m#0@@96| |key#0@@78|)) ))))
(assert (forall (($Heap@@47 T@U) (|m#0@@97| T@U) (|key#0@@79| Int) ) (!  (=> (and (= (type $Heap@@47) (MapType0Type refType MapType1Type)) (= (type |m#0@@97|) (MapType0Type BoxType boolType))) (=> (and (and ($IsGoodHeap $Heap@@47) ($Is |m#0@@97| (TSet Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |key#0@@79|) (< |key#0@@79| 256))) (= (|Byte__Order.__default.SetSuccessor#requires| |m#0@@97| |key#0@@79|) true))) :qid |totalorderidfyByteOrder.699:12| :skolemid |3499| :pattern ( (|Byte__Order.__default.SetSuccessor#requires| |m#0@@97| |key#0@@79|) ($IsGoodHeap $Heap@@47)) )))
(assert (forall ((m@@84 T@U) (key Int) ) (!  (=> (and (= (type m@@84) (MapType0Type BoxType boolType)) (|$let#12$canCall| m@@84 key)) (and (and (<= (LitInt 0) (|$let#12_next| m@@84 key)) (< (|$let#12_next| m@@84 key) 256)) (and (and (U_2_bool (MapType0Select m@@84 ($Box (int_2_U (|$let#12_next| m@@84 key))))) (Byte__Order.__default.lt key (|$let#12_next| m@@84 key))) (forall ((|other#1| Int) ) (!  (=> (and (<= (LitInt 0) |other#1|) (< |other#1| 256)) (=> (and (and (U_2_bool (MapType0Select m@@84 ($Box (int_2_U |other#1|)))) (not (= |other#1| (|$let#12_next| m@@84 key)))) (Byte__Order.__default.lt key |other#1|)) (Byte__Order.__default.lt (|$let#12_next| m@@84 key) |other#1|))) :qid |totalorderidfyByteOrder.704:18| :skolemid |3502| :pattern ( (Byte__Order.__default.lt (|$let#12_next| m@@84 key) |other#1|)) :pattern ( (Byte__Order.__default.lt key |other#1|)) :pattern ( (MapType0Select m@@84 ($Box (int_2_U |other#1|)))) ))))) :qid |totalorderidfyByteOrder.701:8| :skolemid |3503| :pattern ( (|$let#12_next| m@@84 key)) )))
(assert  (=> true (forall (($Heap@@48 T@U) (|m#0@@98| T@U) (|key#0@@80| Int) ) (!  (=> (and (and (= (type $Heap@@48) (MapType0Type refType MapType1Type)) (= (type |m#0@@98|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetSuccessor#canCall| |m#0@@98| |key#0@@80|) (and (and ($IsGoodHeap $Heap@@48) ($Is |m#0@@98| (TSet Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |key#0@@80|) (< |key#0@@80| 256))))) (and (and (forall ((|next#0| Int) ) (!  (=> (and (<= (LitInt 0) |next#0|) (< |next#0| 256)) (=> (U_2_bool (MapType0Select |m#0@@98| ($Box (int_2_U |next#0|)))) (and (|Byte__Order.__default.lt#canCall| |key#0@@80| |next#0|) (=> (Byte__Order.__default.lt |key#0@@80| |next#0|) (forall ((|other#0| Int) ) (!  (=> (and (<= (LitInt 0) |other#0|) (< |other#0| 256)) (=> (U_2_bool (MapType0Select |m#0@@98| ($Box (int_2_U |other#0|)))) (=> (not (= |other#0| |next#0|)) (and (|Byte__Order.__default.lt#canCall| |key#0@@80| |other#0|) (=> (Byte__Order.__default.lt |key#0@@80| |other#0|) (|Byte__Order.__default.lt#canCall| |next#0| |other#0|)))))) :qid |totalorderidfyByteOrder.704:18| :skolemid |3504| :pattern ( (Byte__Order.__default.lt |next#0| |other#0|)) :pattern ( (Byte__Order.__default.lt |key#0@@80| |other#0|)) :pattern ( (MapType0Select |m#0@@98| ($Box (int_2_U |other#0|)))) )))))) :qid |totalorderidfyByteOrder.701:8| :skolemid |3505| :pattern ( (Byte__Order.__default.lt |key#0@@80| |next#0|)) :pattern ( (MapType0Select |m#0@@98| ($Box (int_2_U |next#0|)))) )) (=> (exists ((|next#0@@0| Int) ) (!  (and (and (<= (LitInt 0) |next#0@@0|) (< |next#0@@0| 256)) (and (and (U_2_bool (MapType0Select |m#0@@98| ($Box (int_2_U |next#0@@0|)))) (Byte__Order.__default.lt |key#0@@80| |next#0@@0|)) (forall ((|other#0@@0| Int) ) (!  (=> (and (<= (LitInt 0) |other#0@@0|) (< |other#0@@0| 256)) (=> (and (and (U_2_bool (MapType0Select |m#0@@98| ($Box (int_2_U |other#0@@0|)))) (not (= |other#0@@0| |next#0@@0|))) (Byte__Order.__default.lt |key#0@@80| |other#0@@0|)) (Byte__Order.__default.lt |next#0@@0| |other#0@@0|))) :qid |totalorderidfyByteOrder.704:18| :skolemid |3506| :pattern ( (Byte__Order.__default.lt |next#0@@0| |other#0@@0|)) :pattern ( (Byte__Order.__default.lt |key#0@@80| |other#0@@0|)) :pattern ( (MapType0Select |m#0@@98| ($Box (int_2_U |other#0@@0|)))) )))) :qid |totalorderidfyByteOrder.701:8| :skolemid |3507| :pattern ( (Byte__Order.__default.lt |key#0@@80| |next#0@@0|)) :pattern ( (MapType0Select |m#0@@98| ($Box (int_2_U |next#0@@0|)))) )) (|$let#12$canCall| |m#0@@98| |key#0@@80|))) (= (Byte__Order.__default.SetSuccessor |m#0@@98| |key#0@@80|) (ite (exists ((|next#0@@1| Int) ) (!  (and (and (<= (LitInt 0) |next#0@@1|) (< |next#0@@1| 256)) (and (and (U_2_bool (MapType0Select |m#0@@98| ($Box (int_2_U |next#0@@1|)))) (Byte__Order.__default.lt |key#0@@80| |next#0@@1|)) (forall ((|other#0@@1| Int) ) (!  (=> (and (<= (LitInt 0) |other#0@@1|) (< |other#0@@1| 256)) (=> (and (and (U_2_bool (MapType0Select |m#0@@98| ($Box (int_2_U |other#0@@1|)))) (not (= |other#0@@1| |next#0@@1|))) (Byte__Order.__default.lt |key#0@@80| |other#0@@1|)) (Byte__Order.__default.lt |next#0@@1| |other#0@@1|))) :qid |totalorderidfyByteOrder.704:18| :skolemid |3500| :pattern ( (Byte__Order.__default.lt |next#0@@1| |other#0@@1|)) :pattern ( (Byte__Order.__default.lt |key#0@@80| |other#0@@1|)) :pattern ( (MapType0Select |m#0@@98| ($Box (int_2_U |other#0@@1|)))) )))) :qid |totalorderidfyByteOrder.701:8| :skolemid |3501| :pattern ( (Byte__Order.__default.lt |key#0@@80| |next#0@@1|)) :pattern ( (MapType0Select |m#0@@98| ($Box (int_2_U |next#0@@1|)))) )) (let ((|next#1| (|$let#12_next| |m#0@@98| |key#0@@80|))) (|#Options.Option.Some| ($Box (int_2_U |next#1|)))) |#Options.Option.None|)))) :qid |totalorderidfyByteOrder.699:12| :skolemid |3508| :pattern ( (Byte__Order.__default.SetSuccessor |m#0@@98| |key#0@@80|) ($IsGoodHeap $Heap@@48)) ))))
(assert  (=> true (forall (($Heap@@49 T@U) (|m#0@@99| T@U) (|key#0@@81| Int) ) (!  (=> (and (and (= (type $Heap@@49) (MapType0Type refType MapType1Type)) (= (type |m#0@@99|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetSuccessor#canCall| (Lit |m#0@@99|) (LitInt |key#0@@81|)) (and (and ($IsGoodHeap $Heap@@49) ($Is |m#0@@99| (TSet Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |key#0@@81|) (< |key#0@@81| 256))))) (and (and (forall ((|next#2| Int) ) (!  (=> (and (<= (LitInt 0) |next#2|) (< |next#2| 256)) (=> (U_2_bool (MapType0Select (Lit |m#0@@99|) ($Box (int_2_U |next#2|)))) (and (|Byte__Order.__default.lt#canCall| (LitInt |key#0@@81|) |next#2|) (=> (Byte__Order.__default.lt (LitInt |key#0@@81|) |next#2|) (forall ((|other#2| Int) ) (!  (=> (and (<= (LitInt 0) |other#2|) (< |other#2| 256)) (=> (U_2_bool (MapType0Select (Lit |m#0@@99|) ($Box (int_2_U |other#2|)))) (=> (not (= |other#2| |next#2|)) (and (|Byte__Order.__default.lt#canCall| (LitInt |key#0@@81|) |other#2|) (=> (Byte__Order.__default.lt (LitInt |key#0@@81|) |other#2|) (|Byte__Order.__default.lt#canCall| |next#2| |other#2|)))))) :qid |totalorderidfyByteOrder.704:18| :skolemid |3511| :pattern ( (Byte__Order.__default.lt |next#2| |other#2|)) :pattern ( (Byte__Order.__default.lt |key#0@@81| |other#2|)) :pattern ( (MapType0Select |m#0@@99| ($Box (int_2_U |other#2|)))) )))))) :qid |totalorderidfyByteOrder.701:8| :skolemid |3512| :pattern ( (Byte__Order.__default.lt |key#0@@81| |next#2|)) :pattern ( (MapType0Select |m#0@@99| ($Box (int_2_U |next#2|)))) )) (=> (exists ((|next#2@@0| Int) ) (!  (and (and (<= (LitInt 0) |next#2@@0|) (< |next#2@@0| 256)) (and (and (U_2_bool (MapType0Select (Lit |m#0@@99|) ($Box (int_2_U |next#2@@0|)))) (Byte__Order.__default.lt (LitInt |key#0@@81|) |next#2@@0|)) (forall ((|other#2@@0| Int) ) (!  (=> (and (<= (LitInt 0) |other#2@@0|) (< |other#2@@0| 256)) (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@99|) ($Box (int_2_U |other#2@@0|)))) (not (= |other#2@@0| |next#2@@0|))) (Byte__Order.__default.lt (LitInt |key#0@@81|) |other#2@@0|)) (Byte__Order.__default.lt |next#2@@0| |other#2@@0|))) :qid |totalorderidfyByteOrder.704:18| :skolemid |3513| :pattern ( (Byte__Order.__default.lt |next#2@@0| |other#2@@0|)) :pattern ( (Byte__Order.__default.lt |key#0@@81| |other#2@@0|)) :pattern ( (MapType0Select |m#0@@99| ($Box (int_2_U |other#2@@0|)))) )))) :qid |totalorderidfyByteOrder.701:8| :skolemid |3514| :pattern ( (Byte__Order.__default.lt |key#0@@81| |next#2@@0|)) :pattern ( (MapType0Select |m#0@@99| ($Box (int_2_U |next#2@@0|)))) )) (|$let#12$canCall| (Lit |m#0@@99|) (LitInt |key#0@@81|)))) (= (Byte__Order.__default.SetSuccessor (Lit |m#0@@99|) (LitInt |key#0@@81|)) (ite (exists ((|next#2@@1| Int) ) (!  (and (and (<= (LitInt 0) |next#2@@1|) (< |next#2@@1| 256)) (and (and (U_2_bool (MapType0Select (Lit |m#0@@99|) ($Box (int_2_U |next#2@@1|)))) (Byte__Order.__default.lt (LitInt |key#0@@81|) |next#2@@1|)) (forall ((|other#2@@1| Int) ) (!  (=> (and (<= (LitInt 0) |other#2@@1|) (< |other#2@@1| 256)) (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@99|) ($Box (int_2_U |other#2@@1|)))) (not (= |other#2@@1| |next#2@@1|))) (Byte__Order.__default.lt (LitInt |key#0@@81|) |other#2@@1|)) (Byte__Order.__default.lt |next#2@@1| |other#2@@1|))) :qid |totalorderidfyByteOrder.704:18| :skolemid |3509| :pattern ( (Byte__Order.__default.lt |next#2@@1| |other#2@@1|)) :pattern ( (Byte__Order.__default.lt |key#0@@81| |other#2@@1|)) :pattern ( (MapType0Select |m#0@@99| ($Box (int_2_U |other#2@@1|)))) )))) :qid |totalorderidfyByteOrder.701:8| :skolemid |3510| :pattern ( (Byte__Order.__default.lt |key#0@@81| |next#2@@1|)) :pattern ( (MapType0Select |m#0@@99| ($Box (int_2_U |next#2@@1|)))) )) (let ((|next#3| (|$let#12_next| (Lit |m#0@@99|) (LitInt |key#0@@81|)))) (|#Options.Option.Some| ($Box (int_2_U |next#3|)))) |#Options.Option.None|)))) :qid |totalorderidfyByteOrder.699:12| :weight 3 :skolemid |3515| :pattern ( (Byte__Order.__default.SetSuccessor (Lit |m#0@@99|) (LitInt |key#0@@81|)) ($IsGoodHeap $Heap@@49)) ))))
(assert (forall ((arg0@@620 T@U) (arg1@@296 T@U) (arg2@@183 Int) ) (! (= (type (Byte__Order.__default.MapSuccessor arg0@@620 arg1@@296 arg2@@183)) DatatypeTypeType) :qid |funType:Byte__Order.__default.MapSuccessor| :pattern ( (Byte__Order.__default.MapSuccessor arg0@@620 arg1@@296 arg2@@183)) )))
(assert  (=> true (forall ((Byte_Order._default.MapSuccessor$V T@U) (|m#0@@100| T@U) (|key#0@@82| Int) ) (!  (=> (and (and (= (type Byte_Order._default.MapSuccessor$V) TyType) (= (type |m#0@@100|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapSuccessor#canCall| Byte_Order._default.MapSuccessor$V |m#0@@100| |key#0@@82|) (and ($Is |m#0@@100| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapSuccessor$V)) (and (<= (LitInt 0) |key#0@@82|) (< |key#0@@82| 256))))) ($Is (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V |m#0@@100| |key#0@@82|) (Tclass.Options.Option Tclass.NativeTypes.byte))) :qid |unknown.0:0| :skolemid |3516| :pattern ( (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V |m#0@@100| |key#0@@82|)) ))))
(assert (forall ((Byte_Order._default.MapSuccessor$V@@0 T@U) (|m#0@@101| T@U) (|key#0@@83| Int) ) (!  (=> (and (and (= (type Byte_Order._default.MapSuccessor$V@@0) TyType) (= (type |m#0@@101|) (MapType BoxType BoxType))) (and ($Is |m#0@@101| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapSuccessor$V@@0)) (and (<= (LitInt 0) |key#0@@83|) (< |key#0@@83| 256)))) (= (|Byte__Order.__default.MapSuccessor#requires| Byte_Order._default.MapSuccessor$V@@0 |m#0@@101| |key#0@@83|) true)) :qid |unknown.0:0| :skolemid |3517| :pattern ( (|Byte__Order.__default.MapSuccessor#requires| Byte_Order._default.MapSuccessor$V@@0 |m#0@@101| |key#0@@83|)) )))
(assert  (=> true (forall ((Byte_Order._default.MapSuccessor$V@@1 T@U) (|m#0@@102| T@U) (|key#0@@84| Int) ) (!  (=> (and (and (= (type Byte_Order._default.MapSuccessor$V@@1) TyType) (= (type |m#0@@102|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapSuccessor#canCall| Byte_Order._default.MapSuccessor$V@@1 |m#0@@102| |key#0@@84|) (and ($Is |m#0@@102| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapSuccessor$V@@1)) (and (<= (LitInt 0) |key#0@@84|) (< |key#0@@84| 256))))) (and (|Byte__Order.__default.SetSuccessor#canCall| (|Map#Domain| |m#0@@102|) |key#0@@84|) (= (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V@@1 |m#0@@102| |key#0@@84|) (Byte__Order.__default.SetSuccessor (|Map#Domain| |m#0@@102|) |key#0@@84|)))) :qid |unknown.0:0| :skolemid |3518| :pattern ( (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V@@1 |m#0@@102| |key#0@@84|)) ))))
(assert  (=> true (forall ((Byte_Order._default.MapSuccessor$V@@2 T@U) (|m#0@@103| T@U) (|key#0@@85| Int) ) (!  (=> (and (and (= (type Byte_Order._default.MapSuccessor$V@@2) TyType) (= (type |m#0@@103|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapSuccessor#canCall| Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@103|) (LitInt |key#0@@85|)) (and ($Is |m#0@@103| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapSuccessor$V@@2)) (and (<= (LitInt 0) |key#0@@85|) (< |key#0@@85| 256))))) (and (|Byte__Order.__default.SetSuccessor#canCall| (Lit (|Map#Domain| (Lit |m#0@@103|))) (LitInt |key#0@@85|)) (= (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@103|) (LitInt |key#0@@85|)) (Lit (Byte__Order.__default.SetSuccessor (Lit (|Map#Domain| (Lit |m#0@@103|))) (LitInt |key#0@@85|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3519| :pattern ( (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@103|) (LitInt |key#0@@85|))) ))))
(assert (forall ((arg0@@621 T@U) (arg1@@297 Int) ) (! (= (type (Byte__Order.__default.SeqSuccessor arg0@@621 arg1@@297)) DatatypeTypeType) :qid |funType:Byte__Order.__default.SeqSuccessor| :pattern ( (Byte__Order.__default.SeqSuccessor arg0@@621 arg1@@297)) )))
(assert  (=> true (forall ((|m#0@@104| T@U) (|key#0@@86| Int) ) (!  (=> (and (= (type |m#0@@104|) (SeqType BoxType)) (or (|Byte__Order.__default.SeqSuccessor#canCall| |m#0@@104| |key#0@@86|) (and ($Is |m#0@@104| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@86|) (< |key#0@@86| 256))))) ($Is (Byte__Order.__default.SeqSuccessor |m#0@@104| |key#0@@86|) (Tclass.Options.Option Tclass.NativeTypes.byte))) :qid |totalorderidfyByteOrder.715:25| :skolemid |3520| :pattern ( (Byte__Order.__default.SeqSuccessor |m#0@@104| |key#0@@86|)) ))))
(assert (forall ((|m#0@@105| T@U) (|key#0@@87| Int) ) (!  (=> (= (type |m#0@@105|) (SeqType BoxType)) (=> (and ($Is |m#0@@105| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@87|) (< |key#0@@87| 256))) (= (|Byte__Order.__default.SeqSuccessor#requires| |m#0@@105| |key#0@@87|) true))) :qid |totalorderidfyByteOrder.715:25| :skolemid |3521| :pattern ( (|Byte__Order.__default.SeqSuccessor#requires| |m#0@@105| |key#0@@87|)) )))
(assert (forall ((arg0@@622 T@U) (arg1@@298 T@U) ) (! (= (type (|lambda#128| arg0@@622 arg1@@298)) (MapType0Type BoxType boolType)) :qid |funType:lambda#128| :pattern ( (|lambda#128| arg0@@622 arg1@@298)) )))
(assert  (=> true (forall ((|m#0@@106| T@U) (|key#0@@88| Int) ) (!  (=> (and (= (type |m#0@@106|) (SeqType BoxType)) (or (|Byte__Order.__default.SeqSuccessor#canCall| |m#0@@106| |key#0@@88|) (and ($Is |m#0@@106| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@88|) (< |key#0@@88| 256))))) (and (|Byte__Order.__default.SetSuccessor#canCall| (|lambda#128| Tclass.NativeTypes.byte |m#0@@106|) |key#0@@88|) (= (Byte__Order.__default.SeqSuccessor |m#0@@106| |key#0@@88|) (Byte__Order.__default.SetSuccessor (|lambda#128| Tclass.NativeTypes.byte |m#0@@106|) |key#0@@88|)))) :qid |totalorderidfyByteOrder.715:25| :skolemid |3522| :pattern ( (Byte__Order.__default.SeqSuccessor |m#0@@106| |key#0@@88|)) ))))
(assert  (=> true (forall ((|m#0@@107| T@U) (|key#0@@89| Int) ) (!  (=> (and (= (type |m#0@@107|) (SeqType BoxType)) (or (|Byte__Order.__default.SeqSuccessor#canCall| (Lit |m#0@@107|) (LitInt |key#0@@89|)) (and ($Is |m#0@@107| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@89|) (< |key#0@@89| 256))))) (and (|Byte__Order.__default.SetSuccessor#canCall| (|lambda#128| Tclass.NativeTypes.byte |m#0@@107|) (LitInt |key#0@@89|)) (= (Byte__Order.__default.SeqSuccessor (Lit |m#0@@107|) (LitInt |key#0@@89|)) (Byte__Order.__default.SetSuccessor (|lambda#128| Tclass.NativeTypes.byte |m#0@@107|) (LitInt |key#0@@89|))))) :qid |totalorderidfyByteOrder.715:25| :weight 3 :skolemid |3523| :pattern ( (Byte__Order.__default.SeqSuccessor (Lit |m#0@@107|) (LitInt |key#0@@89|))) ))))
(assert (forall ((Byte_Order._default.SortedSeqForMap$V T@U) ($ly@@383 T@U) (|s#0@@184| T@U) (|m#0@@108| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V) TyType) (= (type $ly@@383) LayerTypeType)) (= (type |s#0@@184|) (SeqType BoxType))) (= (type |m#0@@108|) (MapType BoxType BoxType))) (= (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V ($LS $ly@@383) |s#0@@184| |m#0@@108|) (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V $ly@@383 |s#0@@184| |m#0@@108|))) :qid |unknown.0:0| :skolemid |3524| :pattern ( (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V ($LS $ly@@383) |s#0@@184| |m#0@@108|)) )))
(assert (forall ((Byte_Order._default.SortedSeqForMap$V@@0 T@U) ($ly@@384 T@U) (|s#0@@185| T@U) (|m#0@@109| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V@@0) TyType) (= (type $ly@@384) LayerTypeType)) (= (type |s#0@@185|) (SeqType BoxType))) (= (type |m#0@@109|) (MapType BoxType BoxType))) (= (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@0 $ly@@384 |s#0@@185| |m#0@@109|) (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@0 $LZ |s#0@@185| |m#0@@109|))) :qid |unknown.0:0| :skolemid |3525| :pattern ( (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@0 (AsFuelBottom $ly@@384) |s#0@@185| |m#0@@109|)) )))
(assert  (=> true (forall ((Byte_Order._default.SortedSeqForMap$V@@1 T@U) ($ly@@385 T@U) (|s#0@@186| T@U) (|m#0@@110| T@U) ) (!  (=> (and (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V@@1) TyType) (= (type $ly@@385) LayerTypeType)) (= (type |s#0@@186|) (SeqType BoxType))) (= (type |m#0@@110|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.SortedSeqForMap#canCall| Byte_Order._default.SortedSeqForMap$V@@1 |s#0@@186| |m#0@@110|) (and ($Is |s#0@@186| (TSeq (Tclass._System.Tuple2 Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@1))) ($Is |m#0@@110| (TMap Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@1))))) true) :qid |unknown.0:0| :skolemid |3526| :pattern ( (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@1 $ly@@385 |s#0@@186| |m#0@@110|)) ))))
(assert (forall ((Byte_Order._default.SortedSeqForMap$V@@2 T@U) ($ly@@386 T@U) (|s#0@@187| T@U) (|m#0@@111| T@U) ) (!  (=> (and (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V@@2) TyType) (= (type $ly@@386) LayerTypeType)) (= (type |s#0@@187|) (SeqType BoxType))) (= (type |m#0@@111|) (MapType BoxType BoxType))) (and ($Is |s#0@@187| (TSeq (Tclass._System.Tuple2 Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@2))) ($Is |m#0@@111| (TMap Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@2)))) (= (|Byte__Order.__default.SortedSeqForMap#requires| Byte_Order._default.SortedSeqForMap$V@@2 $ly@@386 |s#0@@187| |m#0@@111|) true)) :qid |unknown.0:0| :skolemid |3527| :pattern ( (|Byte__Order.__default.SortedSeqForMap#requires| Byte_Order._default.SortedSeqForMap$V@@2 $ly@@386 |s#0@@187| |m#0@@111|)) )))
(assert  (and (= (type StartFuel_Sequences._default.Unzip) LayerTypeType) (= (type StartFuel_Byte_Order._default.IsStrictlySorted) LayerTypeType)))
(assert  (=> true (forall ((Byte_Order._default.SortedSeqForMap$V@@3 T@U) ($ly@@387 T@U) (|s#0@@188| T@U) (|m#0@@112| T@U) ) (!  (=> (and (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V@@3) TyType) (= (type $ly@@387) LayerTypeType)) (= (type |s#0@@188|) (SeqType BoxType))) (= (type |m#0@@112|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.SortedSeqForMap#canCall| Byte_Order._default.SortedSeqForMap$V@@3 |s#0@@188| |m#0@@112|) (and ($Is |s#0@@188| (TSeq (Tclass._System.Tuple2 Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3))) ($Is |m#0@@112| (TMap Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3))))) (and (and (and (and (|Sequences.__default.Unzip#canCall| Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 |s#0@@188|) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@188|))) (|Byte__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@188|))))) (=> (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@188|)))) (and (forall ((|i#0@@104| Int) ) (!  (and (=> (<= (LitInt 0) |i#0@@104|) (=> (< |i#0@@104| (|Seq#Length| |s#0@@188|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@188| |i#0@@104|))))) (=> (=> (and (<= (LitInt 0) |i#0@@104|) (< |i#0@@104| (|Seq#Length| |s#0@@188|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@112|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@188| |i#0@@104|)))))) (=> (<= (LitInt 0) |i#0@@104|) (=> (< |i#0@@104| (|Seq#Length| |s#0@@188|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@188| |i#0@@104|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@188| |i#0@@104|)))))))) :qid |totalorderidfyByteOrder.723:16| :skolemid |3531| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@188| |i#0@@104|))) )) (=> (forall ((|i#0@@105| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@105|) (< |i#0@@105| (|Seq#Length| |s#0@@188|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@112|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@188| |i#0@@105|)))))) (=> (and (<= (LitInt 0) |i#0@@105|) (< |i#0@@105| (|Seq#Length| |s#0@@188|))) (= (MapType0Select (|Map#Elements| |m#0@@112|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@188| |i#0@@105|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@188| |i#0@@105|))))))) :qid |totalorderidfyByteOrder.723:16| :skolemid |3534| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@188| |i#0@@105|))) )) (forall ((|key#0@@90| T@U) ) (!  (=> (= (type |key#0@@90|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#0@@90|)) (< (U_2_int |key#0@@90|) 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@112|) ($Box |key#0@@90|))) (forall ((|i#1@@32| Int) ) (!  (=> (<= (LitInt 0) |i#1@@32|) (=> (< |i#1@@32| (|Seq#Length| |s#0@@188|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@188| |i#1@@32|))) (=> (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@188| |i#1@@32|))))) (U_2_int |key#0@@90|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@188| |i#1@@32|))))))) :qid |totalorderidfyByteOrder.724:44| :skolemid |3532| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@188| |i#1@@32|))) ))))) :qid |totalorderidfyByteOrder.724:16| :skolemid |3533| :pattern ( (MapType0Select (|Map#Elements| |m#0@@112|) ($Box |key#0@@90|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@112|) ($Box |key#0@@90|))) )))))) (= (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@387) |s#0@@188| |m#0@@112|)  (and (and (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@188|)))) (forall ((|i#0@@106| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@106|) (< |i#0@@106| (|Seq#Length| |s#0@@188|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@112|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@188| |i#0@@106|)))))) (=> (and (<= (LitInt 0) |i#0@@106|) (< |i#0@@106| (|Seq#Length| |s#0@@188|))) (= (MapType0Select (|Map#Elements| |m#0@@112|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@188| |i#0@@106|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@188| |i#0@@106|))))))) :qid |totalorderidfyByteOrder.723:16| :skolemid |3528| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@188| |i#0@@106|))) ))) (forall ((|key#0@@91| Int) ) (!  (=> (and (<= (LitInt 0) |key#0@@91|) (< |key#0@@91| 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@112|) ($Box (int_2_U |key#0@@91|)))) (exists ((|i#1@@33| Int) ) (!  (and (and (and (<= (LitInt 0) |i#1@@33|) (< |i#1@@33| (|Seq#Length| |s#0@@188|))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@188| |i#1@@33|))))) |key#0@@91|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@188| |i#1@@33|))) (MapType0Select (|Map#Elements| |m#0@@112|) ($Box (int_2_U |key#0@@91|))))) :qid |totalorderidfyByteOrder.724:44| :skolemid |3529| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@188| |i#1@@33|))) )))) :qid |totalorderidfyByteOrder.724:16| :skolemid |3530| :pattern ( (MapType0Select (|Map#Elements| |m#0@@112|) ($Box (int_2_U |key#0@@91|)))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@112|) ($Box (int_2_U |key#0@@91|)))) )))))) :qid |unknown.0:0| :skolemid |3535| :pattern ( (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@387) |s#0@@188| |m#0@@112|)) ))))
(assert  (=> true (forall ((Byte_Order._default.SortedSeqForMap$V@@4 T@U) ($ly@@388 T@U) (|s#0@@189| T@U) (|m#0@@113| T@U) ) (!  (=> (and (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V@@4) TyType) (= (type $ly@@388) LayerTypeType)) (= (type |s#0@@189|) (SeqType BoxType))) (= (type |m#0@@113|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.SortedSeqForMap#canCall| Byte_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@189|) (Lit |m#0@@113|)) (and ($Is |s#0@@189| (TSeq (Tclass._System.Tuple2 Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4))) ($Is |m#0@@113| (TMap Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4))))) (and (and (and (and (|Sequences.__default.Unzip#canCall| Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@189|)) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@189|)))) (|Byte__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@189|)))))) (=> (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@189|))))) (and (forall ((|i#2@@17| Int) ) (!  (and (=> (<= (LitInt 0) |i#2@@17|) (=> (< |i#2@@17| (|Seq#Length| (Lit |s#0@@189|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@189|) |i#2@@17|))))) (=> (=> (and (<= (LitInt 0) |i#2@@17|) (< |i#2@@17| (|Seq#Length| (Lit |s#0@@189|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@113|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@189|) |i#2@@17|)))))) (=> (<= (LitInt 0) |i#2@@17|) (=> (< |i#2@@17| (|Seq#Length| (Lit |s#0@@189|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@189|) |i#2@@17|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@189|) |i#2@@17|)))))))) :qid |totalorderidfyByteOrder.723:16| :skolemid |3539| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@189| |i#2@@17|))) )) (=> (forall ((|i#2@@18| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@18|) (< |i#2@@18| (|Seq#Length| (Lit |s#0@@189|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@113|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@189|) |i#2@@18|)))))) (=> (and (<= (LitInt 0) |i#2@@18|) (< |i#2@@18| (|Seq#Length| (Lit |s#0@@189|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@113|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@189|) |i#2@@18|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@189|) |i#2@@18|))))))) :qid |totalorderidfyByteOrder.723:16| :skolemid |3542| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@189| |i#2@@18|))) )) (forall ((|key#1@@7| T@U) ) (!  (=> (= (type |key#1@@7|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#1@@7|)) (< (U_2_int |key#1@@7|) 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@113|) ($Box |key#1@@7|))) (forall ((|i#3@@10| Int) ) (!  (=> (<= (LitInt 0) |i#3@@10|) (=> (< |i#3@@10| (|Seq#Length| (Lit |s#0@@189|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@189|) |i#3@@10|))) (=> (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@189|) |i#3@@10|))))) (U_2_int |key#1@@7|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@189|) |i#3@@10|))))))) :qid |totalorderidfyByteOrder.724:44| :skolemid |3540| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@189| |i#3@@10|))) ))))) :qid |totalorderidfyByteOrder.724:16| :skolemid |3541| :pattern ( (MapType0Select (|Map#Elements| |m#0@@113|) ($Box |key#1@@7|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@113|) ($Box |key#1@@7|))) )))))) (= (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@388) (Lit |s#0@@189|) (Lit |m#0@@113|))  (and (and (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@189|))))) (forall ((|i#2@@19| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@19|) (< |i#2@@19| (|Seq#Length| (Lit |s#0@@189|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@113|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@189|) |i#2@@19|)))))) (=> (and (<= (LitInt 0) |i#2@@19|) (< |i#2@@19| (|Seq#Length| (Lit |s#0@@189|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@113|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@189|) |i#2@@19|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@189|) |i#2@@19|))))))) :qid |totalorderidfyByteOrder.723:16| :skolemid |3536| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@189| |i#2@@19|))) ))) (forall ((|key#1@@8| Int) ) (!  (=> (and (<= (LitInt 0) |key#1@@8|) (< |key#1@@8| 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@113|) ($Box (int_2_U |key#1@@8|)))) (exists ((|i#3@@11| Int) ) (!  (and (and (and (<= (LitInt 0) |i#3@@11|) (< |i#3@@11| (|Seq#Length| (Lit |s#0@@189|)))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@189|) |i#3@@11|))))) |key#1@@8|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@189|) |i#3@@11|))) (MapType0Select (|Map#Elements| (Lit |m#0@@113|)) ($Box (int_2_U |key#1@@8|))))) :qid |totalorderidfyByteOrder.724:44| :skolemid |3537| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@189| |i#3@@11|))) )))) :qid |totalorderidfyByteOrder.724:16| :skolemid |3538| :pattern ( (MapType0Select (|Map#Elements| |m#0@@113|) ($Box (int_2_U |key#1@@8|)))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@113|) ($Box (int_2_U |key#1@@8|)))) )))))) :qid |unknown.0:0| :weight 3 :skolemid |3543| :pattern ( (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@388) (Lit |s#0@@189|) (Lit |m#0@@113|))) ))))
(assert (forall (($ly@@389 T@U) (|s#0@@190| T@U) ) (!  (=> (and (= (type $ly@@389) LayerTypeType) (= (type |s#0@@190|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.minimum ($LS $ly@@389) |s#0@@190|) (Byte__Order.__default.minimum $ly@@389 |s#0@@190|))) :qid |totalorderidfyByteOrder.727:22| :skolemid |3544| :pattern ( (Byte__Order.__default.minimum ($LS $ly@@389) |s#0@@190|)) )))
(assert (forall (($ly@@390 T@U) (|s#0@@191| T@U) ) (!  (=> (and (= (type $ly@@390) LayerTypeType) (= (type |s#0@@191|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.minimum $ly@@390 |s#0@@191|) (Byte__Order.__default.minimum $LZ |s#0@@191|))) :qid |totalorderidfyByteOrder.727:22| :skolemid |3545| :pattern ( (Byte__Order.__default.minimum (AsFuelBottom $ly@@390) |s#0@@191|)) )))
(assert  (=> true (forall (($ly@@391 T@U) (|s#0@@192| T@U) ) (!  (=> (and (and (= (type $ly@@391) LayerTypeType) (= (type |s#0@@192|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimum#canCall| |s#0@@192|) (and ($Is |s#0@@192| (TSet Tclass.NativeTypes.byte)) (>= (|Set#Card| |s#0@@192|) (LitInt 1))))) (and (and (U_2_bool (MapType0Select |s#0@@192| ($Box (int_2_U (Byte__Order.__default.minimum $ly@@391 |s#0@@192|))))) (forall ((|y#0@@3| Int) ) (!  (=> (and (and (<= (LitInt 0) |y#0@@3|) (< |y#0@@3| 256)) (U_2_bool (MapType0Select |s#0@@192| ($Box (int_2_U |y#0@@3|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (Byte__Order.__default.minimum $ly@@391 |s#0@@192|) |y#0@@3|)) :qid |totalorderidfyByteOrder.730:18| :skolemid |3546| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (Byte__Order.__default.minimum $ly@@391 |s#0@@192|) |y#0@@3|)) :pattern ( (MapType0Select |s#0@@192| ($Box (int_2_U |y#0@@3|)))) ))) (and (<= (LitInt 0) (Byte__Order.__default.minimum $ly@@391 |s#0@@192|)) (< (Byte__Order.__default.minimum $ly@@391 |s#0@@192|) 256)))) :qid |totalorderidfyByteOrder.727:22| :skolemid |3547| :pattern ( (Byte__Order.__default.minimum $ly@@391 |s#0@@192|)) ))))
(assert (forall (($ly@@392 T@U) ($Heap@@50 T@U) (|s#0@@193| T@U) ) (!  (=> (and (and (and (= (type $ly@@392) LayerTypeType) (= (type $Heap@@50) (MapType0Type refType MapType1Type))) (= (type |s#0@@193|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@50) ($Is |s#0@@193| (TSet Tclass.NativeTypes.byte)))) (= (|Byte__Order.__default.minimum#requires| $ly@@392 |s#0@@193|) (>= (|Set#Card| |s#0@@193|) (LitInt 1)))) :qid |totalorderidfyByteOrder.727:22| :skolemid |3548| :pattern ( (|Byte__Order.__default.minimum#requires| $ly@@392 |s#0@@193|) ($IsGoodHeap $Heap@@50)) )))
(assert (forall ((s@@51 T@U) ) (!  (=> (and (= (type s@@51) (MapType0Type BoxType boolType)) (|$let#15$canCall| s@@51)) (and (and (<= (LitInt 0) (|$let#15_a| s@@51)) (< (|$let#15_a| s@@51) 256)) (U_2_bool (MapType0Select s@@51 ($Box (int_2_U (|$let#15_a| s@@51))))))) :qid |totalorderidfyByteOrder.734:5| :skolemid |3549| :pattern ( (|$let#15_a| s@@51)) )))
(assert  (=> true (forall (($ly@@393 T@U) ($Heap@@51 T@U) (|s#0@@194| T@U) ) (!  (=> (and (and (and (= (type $ly@@393) LayerTypeType) (= (type $Heap@@51) (MapType0Type refType MapType1Type))) (= (type |s#0@@194|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimum#canCall| |s#0@@194|) (and (and ($IsGoodHeap $Heap@@51) ($Is |s#0@@194| (TSet Tclass.NativeTypes.byte))) (>= (|Set#Card| |s#0@@194|) (LitInt 1))))) (and (and (|$let#15$canCall| |s#0@@194|) (let ((|s'#1| (|Set#Difference| |s#0@@194| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#15_a| |s#0@@194|))))))) (=> (not (|Set#Equal| |s'#1| (|Set#Empty| BoxType))) (and (|Byte__Order.__default.minimum#canCall| |s'#1|) (let ((|m'#1@@1| (Byte__Order.__default.minimum $ly@@393 |s'#1|))) (|Byte__Order.__default.lt#canCall| (|$let#15_a| |s#0@@194|) |m'#1@@1|)))))) (= (Byte__Order.__default.minimum ($LS $ly@@393) |s#0@@194|) (let ((|a#0@@121| (|$let#15_a| |s#0@@194|))) (let ((|s'#0@@56| (|Set#Difference| |s#0@@194| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#0@@121|)))))) (ite (|Set#Equal| |s'#0@@56| (|Set#Empty| BoxType)) |a#0@@121| (let ((|m'#0@@10| (Byte__Order.__default.minimum $ly@@393 |s'#0@@56|))) (ite (Byte__Order.__default.lt |a#0@@121| |m'#0@@10|) |a#0@@121| |m'#0@@10|)))))))) :qid |totalorderidfyByteOrder.727:22| :skolemid |3550| :pattern ( (Byte__Order.__default.minimum ($LS $ly@@393) |s#0@@194|) ($IsGoodHeap $Heap@@51)) ))))
(assert  (=> true (forall (($ly@@394 T@U) ($Heap@@52 T@U) (|s#0@@195| T@U) ) (!  (=> (and (and (and (= (type $ly@@394) LayerTypeType) (= (type $Heap@@52) (MapType0Type refType MapType1Type))) (= (type |s#0@@195|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimum#canCall| (Lit |s#0@@195|)) (and (and ($IsGoodHeap $Heap@@52) ($Is |s#0@@195| (TSet Tclass.NativeTypes.byte))) (>= (|Set#Card| (Lit |s#0@@195|)) (LitInt 1))))) (and (and (|$let#15$canCall| (Lit |s#0@@195|)) (let ((|s'#3| (|Set#Difference| |s#0@@195| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#15_a| (Lit |s#0@@195|)))))))) (=> (not (|Set#Equal| |s'#3| (|Set#Empty| BoxType))) (and (|Byte__Order.__default.minimum#canCall| |s'#3|) (let ((|m'#3| (Byte__Order.__default.minimum ($LS $ly@@394) |s'#3|))) (|Byte__Order.__default.lt#canCall| (|$let#15_a| (Lit |s#0@@195|)) |m'#3|)))))) (= (Byte__Order.__default.minimum ($LS $ly@@394) (Lit |s#0@@195|)) (let ((|a#1@@1| (|$let#15_a| (Lit |s#0@@195|)))) (let ((|s'#2| (|Set#Difference| |s#0@@195| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#1@@1|)))))) (ite (|Set#Equal| |s'#2| (|Set#Empty| BoxType)) |a#1@@1| (let ((|m'#2@@0| (Byte__Order.__default.minimum ($LS $ly@@394) |s'#2|))) (ite (Byte__Order.__default.lt |a#1@@1| |m'#2@@0|) |a#1@@1| |m'#2@@0|)))))))) :qid |totalorderidfyByteOrder.727:22| :weight 3 :skolemid |3551| :pattern ( (Byte__Order.__default.minimum ($LS $ly@@394) (Lit |s#0@@195|)) ($IsGoodHeap $Heap@@52)) ))))
(assert (forall ((arg0@@623 T@U) (arg1@@299 T@U) ) (! (= (type (Byte__Order.__default.minimumOpt arg0@@623 arg1@@299)) DatatypeTypeType) :qid |funType:Byte__Order.__default.minimumOpt| :pattern ( (Byte__Order.__default.minimumOpt arg0@@623 arg1@@299)) )))
(assert (forall (($ly@@395 T@U) (|s#0@@196| T@U) ) (!  (=> (and (= (type $ly@@395) LayerTypeType) (= (type |s#0@@196|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.minimumOpt ($LS $ly@@395) |s#0@@196|) (Byte__Order.__default.minimumOpt $ly@@395 |s#0@@196|))) :qid |totalorderidfyByteOrder.750:22| :skolemid |3552| :pattern ( (Byte__Order.__default.minimumOpt ($LS $ly@@395) |s#0@@196|)) )))
(assert (forall (($ly@@396 T@U) (|s#0@@197| T@U) ) (!  (=> (and (= (type $ly@@396) LayerTypeType) (= (type |s#0@@197|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.minimumOpt $ly@@396 |s#0@@197|) (Byte__Order.__default.minimumOpt $LZ |s#0@@197|))) :qid |totalorderidfyByteOrder.750:22| :skolemid |3553| :pattern ( (Byte__Order.__default.minimumOpt (AsFuelBottom $ly@@396) |s#0@@197|)) )))
(assert  (=> true (forall (($ly@@397 T@U) (|s#0@@198| T@U) ) (!  (=> (and (and (= (type $ly@@397) LayerTypeType) (= (type |s#0@@198|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimumOpt#canCall| |s#0@@198|) ($Is |s#0@@198| (TSet Tclass.NativeTypes.byte)))) (and (and (and (=> (Options.Option.Some_q (Byte__Order.__default.minimumOpt $ly@@397 |s#0@@198|)) (U_2_bool (MapType0Select |s#0@@198| (Options.Option.value (Byte__Order.__default.minimumOpt $ly@@397 |s#0@@198|))))) (=> (Options.Option.Some_q (Byte__Order.__default.minimumOpt $ly@@397 |s#0@@198|)) (forall ((|y#0@@4| Int) ) (!  (=> (and (and (<= (LitInt 0) |y#0@@4|) (< |y#0@@4| 256)) (U_2_bool (MapType0Select |s#0@@198| ($Box (int_2_U |y#0@@4|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (Options.Option.value (Byte__Order.__default.minimumOpt $ly@@397 |s#0@@198|)))) |y#0@@4|)) :qid |totalorderidfyByteOrder.752:30| :skolemid |3554| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (Options.Option.value (Byte__Order.__default.minimumOpt $ly@@397 |s#0@@198|)))) |y#0@@4|)) :pattern ( (MapType0Select |s#0@@198| ($Box (int_2_U |y#0@@4|)))) )))) (=> (Options.Option.None_q (Byte__Order.__default.minimumOpt $ly@@397 |s#0@@198|)) (|Set#Equal| |s#0@@198| (|Set#Empty| BoxType)))) ($Is (Byte__Order.__default.minimumOpt $ly@@397 |s#0@@198|) (Tclass.Options.Option Tclass.NativeTypes.byte)))) :qid |totalorderidfyByteOrder.750:22| :skolemid |3555| :pattern ( (Byte__Order.__default.minimumOpt $ly@@397 |s#0@@198|)) ))))
(assert (forall (($ly@@398 T@U) (|s#0@@199| T@U) ) (!  (=> (and (and (= (type $ly@@398) LayerTypeType) (= (type |s#0@@199|) (MapType0Type BoxType boolType))) ($Is |s#0@@199| (TSet Tclass.NativeTypes.byte))) (= (|Byte__Order.__default.minimumOpt#requires| $ly@@398 |s#0@@199|) true)) :qid |totalorderidfyByteOrder.750:22| :skolemid |3556| :pattern ( (|Byte__Order.__default.minimumOpt#requires| $ly@@398 |s#0@@199|)) )))
(assert (= (type StartFuel_Byte_Order._default.minimum) LayerTypeType))
(assert  (=> true (forall (($ly@@399 T@U) (|s#0@@200| T@U) ) (!  (=> (and (and (= (type $ly@@399) LayerTypeType) (= (type |s#0@@200|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimumOpt#canCall| |s#0@@200|) ($Is |s#0@@200| (TSet Tclass.NativeTypes.byte)))) (and (=> (not (|Set#Equal| |s#0@@200| (|Set#Empty| BoxType))) (|Byte__Order.__default.minimum#canCall| |s#0@@200|)) (= (Byte__Order.__default.minimumOpt ($LS $ly@@399) |s#0@@200|) (ite (|Set#Equal| |s#0@@200| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Byte__Order.__default.minimum StartFuel_Byte_Order._default.minimum |s#0@@200|)))))))) :qid |totalorderidfyByteOrder.750:22| :skolemid |3557| :pattern ( (Byte__Order.__default.minimumOpt ($LS $ly@@399) |s#0@@200|)) ))))
(assert  (=> true (forall (($ly@@400 T@U) (|s#0@@201| T@U) ) (!  (=> (and (and (= (type $ly@@400) LayerTypeType) (= (type |s#0@@201|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimumOpt#canCall| (Lit |s#0@@201|)) ($Is |s#0@@201| (TSet Tclass.NativeTypes.byte)))) (and (=> (not (|Set#Equal| |s#0@@201| (|Set#Empty| BoxType))) (|Byte__Order.__default.minimum#canCall| (Lit |s#0@@201|))) (= (Byte__Order.__default.minimumOpt ($LS $ly@@400) (Lit |s#0@@201|)) (ite (|Set#Equal| |s#0@@201| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Byte__Order.__default.minimum StartFuel_Byte_Order._default.minimum (Lit |s#0@@201|))))))))) :qid |totalorderidfyByteOrder.750:22| :weight 3 :skolemid |3558| :pattern ( (Byte__Order.__default.minimumOpt ($LS $ly@@400) (Lit |s#0@@201|))) ))))
(assert (forall (($ly@@401 T@U) (|s#0@@202| T@U) ) (!  (=> (and (= (type $ly@@401) LayerTypeType) (= (type |s#0@@202|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.maximum ($LS $ly@@401) |s#0@@202|) (Byte__Order.__default.maximum $ly@@401 |s#0@@202|))) :qid |totalorderidfyByteOrder.758:22| :skolemid |3559| :pattern ( (Byte__Order.__default.maximum ($LS $ly@@401) |s#0@@202|)) )))
(assert (forall (($ly@@402 T@U) (|s#0@@203| T@U) ) (!  (=> (and (= (type $ly@@402) LayerTypeType) (= (type |s#0@@203|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.maximum $ly@@402 |s#0@@203|) (Byte__Order.__default.maximum $LZ |s#0@@203|))) :qid |totalorderidfyByteOrder.758:22| :skolemid |3560| :pattern ( (Byte__Order.__default.maximum (AsFuelBottom $ly@@402) |s#0@@203|)) )))
(assert  (=> true (forall (($ly@@403 T@U) (|s#0@@204| T@U) ) (!  (=> (and (and (= (type $ly@@403) LayerTypeType) (= (type |s#0@@204|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximum#canCall| |s#0@@204|) (and ($Is |s#0@@204| (TSet Tclass.NativeTypes.byte)) (>= (|Set#Card| |s#0@@204|) (LitInt 1))))) (and (and (U_2_bool (MapType0Select |s#0@@204| ($Box (int_2_U (Byte__Order.__default.maximum $ly@@403 |s#0@@204|))))) (forall ((|y#0@@5| Int) ) (!  (=> (and (and (<= (LitInt 0) |y#0@@5|) (< |y#0@@5| 256)) (U_2_bool (MapType0Select |s#0@@204| ($Box (int_2_U |y#0@@5|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |y#0@@5| (Byte__Order.__default.maximum $ly@@403 |s#0@@204|))) :qid |totalorderidfyByteOrder.761:18| :skolemid |3561| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |y#0@@5| (Byte__Order.__default.maximum $ly@@403 |s#0@@204|))) :pattern ( (MapType0Select |s#0@@204| ($Box (int_2_U |y#0@@5|)))) ))) (and (<= (LitInt 0) (Byte__Order.__default.maximum $ly@@403 |s#0@@204|)) (< (Byte__Order.__default.maximum $ly@@403 |s#0@@204|) 256)))) :qid |totalorderidfyByteOrder.758:22| :skolemid |3562| :pattern ( (Byte__Order.__default.maximum $ly@@403 |s#0@@204|)) ))))
(assert (forall (($ly@@404 T@U) ($Heap@@53 T@U) (|s#0@@205| T@U) ) (!  (=> (and (and (and (= (type $ly@@404) LayerTypeType) (= (type $Heap@@53) (MapType0Type refType MapType1Type))) (= (type |s#0@@205|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@53) ($Is |s#0@@205| (TSet Tclass.NativeTypes.byte)))) (= (|Byte__Order.__default.maximum#requires| $ly@@404 |s#0@@205|) (>= (|Set#Card| |s#0@@205|) (LitInt 1)))) :qid |totalorderidfyByteOrder.758:22| :skolemid |3563| :pattern ( (|Byte__Order.__default.maximum#requires| $ly@@404 |s#0@@205|) ($IsGoodHeap $Heap@@53)) )))
(assert (forall ((s@@52 T@U) ) (!  (=> (and (= (type s@@52) (MapType0Type BoxType boolType)) (|$let#18$canCall| s@@52)) (and (and (<= (LitInt 0) (|$let#18_a| s@@52)) (< (|$let#18_a| s@@52) 256)) (U_2_bool (MapType0Select s@@52 ($Box (int_2_U (|$let#18_a| s@@52))))))) :qid |totalorderidfyByteOrder.763:5| :skolemid |3564| :pattern ( (|$let#18_a| s@@52)) )))
(assert  (=> true (forall (($ly@@405 T@U) ($Heap@@54 T@U) (|s#0@@206| T@U) ) (!  (=> (and (and (and (= (type $ly@@405) LayerTypeType) (= (type $Heap@@54) (MapType0Type refType MapType1Type))) (= (type |s#0@@206|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximum#canCall| |s#0@@206|) (and (and ($IsGoodHeap $Heap@@54) ($Is |s#0@@206| (TSet Tclass.NativeTypes.byte))) (>= (|Set#Card| |s#0@@206|) (LitInt 1))))) (and (and (|$let#18$canCall| |s#0@@206|) (let ((|s'#1@@0| (|Set#Difference| |s#0@@206| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#18_a| |s#0@@206|))))))) (=> (not (|Set#Equal| |s'#1@@0| (|Set#Empty| BoxType))) (and (|Byte__Order.__default.maximum#canCall| |s'#1@@0|) (let ((|m'#1@@2| (Byte__Order.__default.maximum $ly@@405 |s'#1@@0|))) (|Byte__Order.__default.lt#canCall| |m'#1@@2| (|$let#18_a| |s#0@@206|))))))) (= (Byte__Order.__default.maximum ($LS $ly@@405) |s#0@@206|) (let ((|a#0@@122| (|$let#18_a| |s#0@@206|))) (let ((|s'#0@@57| (|Set#Difference| |s#0@@206| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#0@@122|)))))) (ite (|Set#Equal| |s'#0@@57| (|Set#Empty| BoxType)) |a#0@@122| (let ((|m'#0@@11| (Byte__Order.__default.maximum $ly@@405 |s'#0@@57|))) (ite (Byte__Order.__default.lt |m'#0@@11| |a#0@@122|) |a#0@@122| |m'#0@@11|)))))))) :qid |totalorderidfyByteOrder.758:22| :skolemid |3565| :pattern ( (Byte__Order.__default.maximum ($LS $ly@@405) |s#0@@206|) ($IsGoodHeap $Heap@@54)) ))))
(assert  (=> true (forall (($ly@@406 T@U) ($Heap@@55 T@U) (|s#0@@207| T@U) ) (!  (=> (and (and (and (= (type $ly@@406) LayerTypeType) (= (type $Heap@@55) (MapType0Type refType MapType1Type))) (= (type |s#0@@207|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximum#canCall| (Lit |s#0@@207|)) (and (and ($IsGoodHeap $Heap@@55) ($Is |s#0@@207| (TSet Tclass.NativeTypes.byte))) (>= (|Set#Card| (Lit |s#0@@207|)) (LitInt 1))))) (and (and (|$let#18$canCall| (Lit |s#0@@207|)) (let ((|s'#3@@0| (|Set#Difference| |s#0@@207| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#18_a| (Lit |s#0@@207|)))))))) (=> (not (|Set#Equal| |s'#3@@0| (|Set#Empty| BoxType))) (and (|Byte__Order.__default.maximum#canCall| |s'#3@@0|) (let ((|m'#3@@0| (Byte__Order.__default.maximum ($LS $ly@@406) |s'#3@@0|))) (|Byte__Order.__default.lt#canCall| |m'#3@@0| (|$let#18_a| (Lit |s#0@@207|)))))))) (= (Byte__Order.__default.maximum ($LS $ly@@406) (Lit |s#0@@207|)) (let ((|a#1@@2| (|$let#18_a| (Lit |s#0@@207|)))) (let ((|s'#2@@0| (|Set#Difference| |s#0@@207| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#1@@2|)))))) (ite (|Set#Equal| |s'#2@@0| (|Set#Empty| BoxType)) |a#1@@2| (let ((|m'#2@@1| (Byte__Order.__default.maximum ($LS $ly@@406) |s'#2@@0|))) (ite (Byte__Order.__default.lt |m'#2@@1| |a#1@@2|) |a#1@@2| |m'#2@@1|)))))))) :qid |totalorderidfyByteOrder.758:22| :weight 3 :skolemid |3566| :pattern ( (Byte__Order.__default.maximum ($LS $ly@@406) (Lit |s#0@@207|)) ($IsGoodHeap $Heap@@55)) ))))
(assert (forall ((arg0@@624 T@U) (arg1@@300 T@U) ) (! (= (type (Byte__Order.__default.maximumOpt arg0@@624 arg1@@300)) DatatypeTypeType) :qid |funType:Byte__Order.__default.maximumOpt| :pattern ( (Byte__Order.__default.maximumOpt arg0@@624 arg1@@300)) )))
(assert (forall (($ly@@407 T@U) (|s#0@@208| T@U) ) (!  (=> (and (= (type $ly@@407) LayerTypeType) (= (type |s#0@@208|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.maximumOpt ($LS $ly@@407) |s#0@@208|) (Byte__Order.__default.maximumOpt $ly@@407 |s#0@@208|))) :qid |totalorderidfyByteOrder.779:22| :skolemid |3567| :pattern ( (Byte__Order.__default.maximumOpt ($LS $ly@@407) |s#0@@208|)) )))
(assert (forall (($ly@@408 T@U) (|s#0@@209| T@U) ) (!  (=> (and (= (type $ly@@408) LayerTypeType) (= (type |s#0@@209|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.maximumOpt $ly@@408 |s#0@@209|) (Byte__Order.__default.maximumOpt $LZ |s#0@@209|))) :qid |totalorderidfyByteOrder.779:22| :skolemid |3568| :pattern ( (Byte__Order.__default.maximumOpt (AsFuelBottom $ly@@408) |s#0@@209|)) )))
(assert  (=> true (forall (($ly@@409 T@U) (|s#0@@210| T@U) ) (!  (=> (and (and (= (type $ly@@409) LayerTypeType) (= (type |s#0@@210|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximumOpt#canCall| |s#0@@210|) ($Is |s#0@@210| (TSet Tclass.NativeTypes.byte)))) (and (and (and (=> (Options.Option.Some_q (Byte__Order.__default.maximumOpt $ly@@409 |s#0@@210|)) (U_2_bool (MapType0Select |s#0@@210| (Options.Option.value (Byte__Order.__default.maximumOpt $ly@@409 |s#0@@210|))))) (=> (Options.Option.Some_q (Byte__Order.__default.maximumOpt $ly@@409 |s#0@@210|)) (forall ((|y#0@@6| Int) ) (!  (=> (and (and (<= (LitInt 0) |y#0@@6|) (< |y#0@@6| 256)) (U_2_bool (MapType0Select |s#0@@210| ($Box (int_2_U |y#0@@6|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |y#0@@6| (U_2_int ($Unbox intType (Options.Option.value (Byte__Order.__default.maximumOpt $ly@@409 |s#0@@210|)))))) :qid |totalorderidfyByteOrder.781:30| :skolemid |3569| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |y#0@@6| (U_2_int ($Unbox intType (Options.Option.value (Byte__Order.__default.maximumOpt $ly@@409 |s#0@@210|)))))) :pattern ( (MapType0Select |s#0@@210| ($Box (int_2_U |y#0@@6|)))) )))) (=> (Options.Option.None_q (Byte__Order.__default.maximumOpt $ly@@409 |s#0@@210|)) (|Set#Equal| |s#0@@210| (|Set#Empty| BoxType)))) ($Is (Byte__Order.__default.maximumOpt $ly@@409 |s#0@@210|) (Tclass.Options.Option Tclass.NativeTypes.byte)))) :qid |totalorderidfyByteOrder.779:22| :skolemid |3570| :pattern ( (Byte__Order.__default.maximumOpt $ly@@409 |s#0@@210|)) ))))
(assert (forall (($ly@@410 T@U) (|s#0@@211| T@U) ) (!  (=> (and (and (= (type $ly@@410) LayerTypeType) (= (type |s#0@@211|) (MapType0Type BoxType boolType))) ($Is |s#0@@211| (TSet Tclass.NativeTypes.byte))) (= (|Byte__Order.__default.maximumOpt#requires| $ly@@410 |s#0@@211|) true)) :qid |totalorderidfyByteOrder.779:22| :skolemid |3571| :pattern ( (|Byte__Order.__default.maximumOpt#requires| $ly@@410 |s#0@@211|)) )))
(assert (= (type StartFuel_Byte_Order._default.maximum) LayerTypeType))
(assert  (=> true (forall (($ly@@411 T@U) (|s#0@@212| T@U) ) (!  (=> (and (and (= (type $ly@@411) LayerTypeType) (= (type |s#0@@212|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximumOpt#canCall| |s#0@@212|) ($Is |s#0@@212| (TSet Tclass.NativeTypes.byte)))) (and (=> (not (|Set#Equal| |s#0@@212| (|Set#Empty| BoxType))) (|Byte__Order.__default.maximum#canCall| |s#0@@212|)) (= (Byte__Order.__default.maximumOpt ($LS $ly@@411) |s#0@@212|) (ite (|Set#Equal| |s#0@@212| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Byte__Order.__default.maximum StartFuel_Byte_Order._default.maximum |s#0@@212|)))))))) :qid |totalorderidfyByteOrder.779:22| :skolemid |3572| :pattern ( (Byte__Order.__default.maximumOpt ($LS $ly@@411) |s#0@@212|)) ))))
(assert  (=> true (forall (($ly@@412 T@U) (|s#0@@213| T@U) ) (!  (=> (and (and (= (type $ly@@412) LayerTypeType) (= (type |s#0@@213|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximumOpt#canCall| (Lit |s#0@@213|)) ($Is |s#0@@213| (TSet Tclass.NativeTypes.byte)))) (and (=> (not (|Set#Equal| |s#0@@213| (|Set#Empty| BoxType))) (|Byte__Order.__default.maximum#canCall| (Lit |s#0@@213|))) (= (Byte__Order.__default.maximumOpt ($LS $ly@@412) (Lit |s#0@@213|)) (ite (|Set#Equal| |s#0@@213| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Byte__Order.__default.maximum StartFuel_Byte_Order._default.maximum (Lit |s#0@@213|))))))))) :qid |totalorderidfyByteOrder.779:22| :weight 3 :skolemid |3573| :pattern ( (Byte__Order.__default.maximumOpt ($LS $ly@@412) (Lit |s#0@@213|))) ))))
(assert  (=> true (forall ((|a#0@@123| Int) (|b#0@@81| Int) ) (!  (=> (or (|Byte__Order.__default.lt#canCall| |a#0@@123| |b#0@@81|) (and (and (<= (LitInt 0) |a#0@@123|) (< |a#0@@123| 256)) (and (<= (LitInt 0) |b#0@@81|) (< |b#0@@81| 256)))) true) :qid |totalorderidfyTotalOrderByteOrder.17:16| :skolemid |3574| :pattern ( (Byte__Order.__default.lt |a#0@@123| |b#0@@81|)) ))))
(assert (forall ((|a#0@@124| Int) (|b#0@@82| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@124|) (< |a#0@@124| 256)) (and (<= (LitInt 0) |b#0@@82|) (< |b#0@@82| 256))) (= (|Byte__Order.__default.lt#requires| |a#0@@124| |b#0@@82|) true)) :qid |totalorderidfyTotalOrderByteOrder.17:16| :skolemid |3575| :pattern ( (|Byte__Order.__default.lt#requires| |a#0@@124| |b#0@@82|)) )))
(assert  (=> true (forall ((|a#0@@125| Int) (|b#0@@83| Int) ) (!  (=> (or (|Byte__Order.__default.lt#canCall| |a#0@@125| |b#0@@83|) (and (and (<= (LitInt 0) |a#0@@125|) (< |a#0@@125| 256)) (and (<= (LitInt 0) |b#0@@83|) (< |b#0@@83| 256)))) (and (|Byte__Order.__default.lte#canCall| |a#0@@125| |b#0@@83|) (= (Byte__Order.__default.lt |a#0@@125| |b#0@@83|)  (and (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |a#0@@125| |b#0@@83|) (not (= |a#0@@125| |b#0@@83|)))))) :qid |totalorderidfyTotalOrderByteOrder.17:16| :skolemid |3576| :pattern ( (Byte__Order.__default.lt |a#0@@125| |b#0@@83|)) ))))
(assert  (=> true (forall ((|a#0@@126| Int) (|b#0@@84| Int) ) (!  (=> (or (|Byte__Order.__default.lt#canCall| (LitInt |a#0@@126|) (LitInt |b#0@@84|)) (and (and (<= (LitInt 0) |a#0@@126|) (< |a#0@@126| 256)) (and (<= (LitInt 0) |b#0@@84|) (< |b#0@@84| 256)))) (and (|Byte__Order.__default.lte#canCall| (LitInt |a#0@@126|) (LitInt |b#0@@84|)) (= (Byte__Order.__default.lt (LitInt |a#0@@126|) (LitInt |b#0@@84|))  (and (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |a#0@@126|) (LitInt |b#0@@84|)) (not (= |a#0@@126| |b#0@@84|)))))) :qid |totalorderidfyTotalOrderByteOrder.17:16| :weight 3 :skolemid |3577| :pattern ( (Byte__Order.__default.lt (LitInt |a#0@@126|) (LitInt |b#0@@84|))) ))))
(assert  (=> true (forall ((|a#0@@127| Int) (|b#0@@85| Int) ) (!  (=> (or (|Byte__Order.__default.Min#canCall| |a#0@@127| |b#0@@85|) (and (and (<= (LitInt 0) |a#0@@127|) (< |a#0@@127| 256)) (and (<= (LitInt 0) |b#0@@85|) (< |b#0@@85| 256)))) (and (<= (LitInt 0) (Byte__Order.__default.Min |a#0@@127| |b#0@@85|)) (< (Byte__Order.__default.Min |a#0@@127| |b#0@@85|) 256))) :qid |totalorderidfyTotalOrderByteOrder.29:16| :skolemid |3578| :pattern ( (Byte__Order.__default.Min |a#0@@127| |b#0@@85|)) ))))
(assert (forall ((|a#0@@128| Int) (|b#0@@86| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@128|) (< |a#0@@128| 256)) (and (<= (LitInt 0) |b#0@@86|) (< |b#0@@86| 256))) (= (|Byte__Order.__default.Min#requires| |a#0@@128| |b#0@@86|) true)) :qid |totalorderidfyTotalOrderByteOrder.29:16| :skolemid |3579| :pattern ( (|Byte__Order.__default.Min#requires| |a#0@@128| |b#0@@86|)) )))
(assert  (=> true (forall ((|a#0@@129| Int) (|b#0@@87| Int) ) (!  (=> (or (|Byte__Order.__default.Min#canCall| |a#0@@129| |b#0@@87|) (and (and (<= (LitInt 0) |a#0@@129|) (< |a#0@@129| 256)) (and (<= (LitInt 0) |b#0@@87|) (< |b#0@@87| 256)))) (and (|Byte__Order.__default.lte#canCall| |a#0@@129| |b#0@@87|) (= (Byte__Order.__default.Min |a#0@@129| |b#0@@87|) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |a#0@@129| |b#0@@87|) |a#0@@129| |b#0@@87|)))) :qid |totalorderidfyTotalOrderByteOrder.29:16| :skolemid |3580| :pattern ( (Byte__Order.__default.Min |a#0@@129| |b#0@@87|)) ))))
(assert  (=> true (forall ((|a#0@@130| Int) (|b#0@@88| Int) ) (!  (=> (or (|Byte__Order.__default.Min#canCall| (LitInt |a#0@@130|) (LitInt |b#0@@88|)) (and (and (<= (LitInt 0) |a#0@@130|) (< |a#0@@130| 256)) (and (<= (LitInt 0) |b#0@@88|) (< |b#0@@88| 256)))) (and (|Byte__Order.__default.lte#canCall| (LitInt |a#0@@130|) (LitInt |b#0@@88|)) (= (Byte__Order.__default.Min (LitInt |a#0@@130|) (LitInt |b#0@@88|)) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |a#0@@130|) (LitInt |b#0@@88|)) |a#0@@130| |b#0@@88|)))) :qid |totalorderidfyTotalOrderByteOrder.29:16| :weight 3 :skolemid |3581| :pattern ( (Byte__Order.__default.Min (LitInt |a#0@@130|) (LitInt |b#0@@88|))) ))))
(assert  (=> true (forall ((|a#0@@131| Int) (|b#0@@89| Int) ) (!  (=> (or (|Byte__Order.__default.Max#canCall| |a#0@@131| |b#0@@89|) (and (and (<= (LitInt 0) |a#0@@131|) (< |a#0@@131| 256)) (and (<= (LitInt 0) |b#0@@89|) (< |b#0@@89| 256)))) (and (<= (LitInt 0) (Byte__Order.__default.Max |a#0@@131| |b#0@@89|)) (< (Byte__Order.__default.Max |a#0@@131| |b#0@@89|) 256))) :qid |totalorderidfyTotalOrderByteOrder.34:16| :skolemid |3582| :pattern ( (Byte__Order.__default.Max |a#0@@131| |b#0@@89|)) ))))
(assert (forall ((|a#0@@132| Int) (|b#0@@90| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@132|) (< |a#0@@132| 256)) (and (<= (LitInt 0) |b#0@@90|) (< |b#0@@90| 256))) (= (|Byte__Order.__default.Max#requires| |a#0@@132| |b#0@@90|) true)) :qid |totalorderidfyTotalOrderByteOrder.34:16| :skolemid |3583| :pattern ( (|Byte__Order.__default.Max#requires| |a#0@@132| |b#0@@90|)) )))
(assert  (=> true (forall ((|a#0@@133| Int) (|b#0@@91| Int) ) (!  (=> (or (|Byte__Order.__default.Max#canCall| |a#0@@133| |b#0@@91|) (and (and (<= (LitInt 0) |a#0@@133|) (< |a#0@@133| 256)) (and (<= (LitInt 0) |b#0@@91|) (< |b#0@@91| 256)))) (and (|Byte__Order.__default.lte#canCall| |a#0@@133| |b#0@@91|) (= (Byte__Order.__default.Max |a#0@@133| |b#0@@91|) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |a#0@@133| |b#0@@91|) |b#0@@91| |a#0@@133|)))) :qid |totalorderidfyTotalOrderByteOrder.34:16| :skolemid |3584| :pattern ( (Byte__Order.__default.Max |a#0@@133| |b#0@@91|)) ))))
(assert  (=> true (forall ((|a#0@@134| Int) (|b#0@@92| Int) ) (!  (=> (or (|Byte__Order.__default.Max#canCall| (LitInt |a#0@@134|) (LitInt |b#0@@92|)) (and (and (<= (LitInt 0) |a#0@@134|) (< |a#0@@134| 256)) (and (<= (LitInt 0) |b#0@@92|) (< |b#0@@92| 256)))) (and (|Byte__Order.__default.lte#canCall| (LitInt |a#0@@134|) (LitInt |b#0@@92|)) (= (Byte__Order.__default.Max (LitInt |a#0@@134|) (LitInt |b#0@@92|)) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |a#0@@134|) (LitInt |b#0@@92|)) |b#0@@92| |a#0@@134|)))) :qid |totalorderidfyTotalOrderByteOrder.34:16| :weight 3 :skolemid |3585| :pattern ( (Byte__Order.__default.Max (LitInt |a#0@@134|) (LitInt |b#0@@92|))) ))))
(assert (forall (($ly@@413 T@U) (|run#0@@104| T@U) ) (!  (=> (and (= (type $ly@@413) LayerTypeType) (= (type |run#0@@104|) (SeqType BoxType))) (= (Byte__Order.__default.IsSorted ($LS $ly@@413) |run#0@@104|) (Byte__Order.__default.IsSorted $ly@@413 |run#0@@104|))) :qid |totalorderidfyTotalOrderByteOrder.46:23| :skolemid |3586| :pattern ( (Byte__Order.__default.IsSorted ($LS $ly@@413) |run#0@@104|)) )))
(assert (forall (($ly@@414 T@U) (|run#0@@105| T@U) ) (!  (=> (and (= (type $ly@@414) LayerTypeType) (= (type |run#0@@105|) (SeqType BoxType))) (= (Byte__Order.__default.IsSorted $ly@@414 |run#0@@105|) (Byte__Order.__default.IsSorted $LZ |run#0@@105|))) :qid |totalorderidfyTotalOrderByteOrder.46:23| :skolemid |3587| :pattern ( (Byte__Order.__default.IsSorted (AsFuelBottom $ly@@414) |run#0@@105|)) )))
(assert  (=> true (forall (($ly@@415 T@U) (|run#0@@106| T@U) ) (!  (=> (and (and (= (type $ly@@415) LayerTypeType) (= (type |run#0@@106|) (SeqType BoxType))) (or (|Byte__Order.__default.IsSorted#canCall| |run#0@@106|) ($Is |run#0@@106| (TSeq Tclass.NativeTypes.byte)))) (and (=> (= (|Seq#Length| |run#0@@106|) (LitInt 0)) (Byte__Order.__default.IsSorted $ly@@415 |run#0@@106|)) (=> (= (|Seq#Length| |run#0@@106|) (LitInt 1)) (Byte__Order.__default.IsSorted $ly@@415 |run#0@@106|)))) :qid |totalorderidfyTotalOrderByteOrder.46:23| :skolemid |3588| :pattern ( (Byte__Order.__default.IsSorted $ly@@415 |run#0@@106|)) ))))
(assert (forall (($ly@@416 T@U) (|run#0@@107| T@U) ) (!  (=> (and (and (= (type $ly@@416) LayerTypeType) (= (type |run#0@@107|) (SeqType BoxType))) ($Is |run#0@@107| (TSeq Tclass.NativeTypes.byte))) (= (|Byte__Order.__default.IsSorted#requires| $ly@@416 |run#0@@107|) true)) :qid |totalorderidfyTotalOrderByteOrder.46:23| :skolemid |3589| :pattern ( (|Byte__Order.__default.IsSorted#requires| $ly@@416 |run#0@@107|)) )))
(assert  (=> true (forall (($ly@@417 T@U) (|run#0@@108| T@U) ) (!  (=> (and (and (= (type $ly@@417) LayerTypeType) (= (type |run#0@@108|) (SeqType BoxType))) (or (|Byte__Order.__default.IsSorted#canCall| |run#0@@108|) ($Is |run#0@@108| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|i#0@@107| Int) (|j#0@@16| Int) ) (!  (=> (<= (LitInt 0) |i#0@@107|) (=> (<= |i#0@@107| |j#0@@16|) (=> (< |j#0@@16| (|Seq#Length| |run#0@@108|)) (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@108| |i#0@@107|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@108| |j#0@@16|))))))) :qid |totalorderidfyTotalOrderByteOrder.50:12| :skolemid |3591| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@108| |j#0@@16|)) ($Unbox intType (|Seq#Index| |run#0@@108| |i#0@@107|))) )) (= (Byte__Order.__default.IsSorted ($LS $ly@@417) |run#0@@108|) (forall ((|i#0@@108| Int) (|j#0@@17| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@108|) (<= |i#0@@108| |j#0@@17|)) (< |j#0@@17| (|Seq#Length| |run#0@@108|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@108| |i#0@@108|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@108| |j#0@@17|)))))) :qid |totalorderidfyTotalOrderByteOrder.50:12| :skolemid |3590| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@108| |j#0@@17|)) ($Unbox intType (|Seq#Index| |run#0@@108| |i#0@@108|))) ))))) :qid |totalorderidfyTotalOrderByteOrder.46:23| :skolemid |3592| :pattern ( (Byte__Order.__default.IsSorted ($LS $ly@@417) |run#0@@108|)) ))))
(assert  (=> true (forall (($ly@@418 T@U) (|run#0@@109| T@U) ) (!  (=> (and (and (= (type $ly@@418) LayerTypeType) (= (type |run#0@@109|) (SeqType BoxType))) (or (|Byte__Order.__default.IsSorted#canCall| (Lit |run#0@@109|)) ($Is |run#0@@109| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|i#1@@34| Int) (|j#1@@6| Int) ) (!  (=> (<= (LitInt 0) |i#1@@34|) (=> (<= |i#1@@34| |j#1@@6|) (=> (< |j#1@@6| (|Seq#Length| (Lit |run#0@@109|))) (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@109|) |i#1@@34|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@109|) |j#1@@6|))))))) :qid |totalorderidfyTotalOrderByteOrder.50:12| :skolemid |3594| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@109| |j#1@@6|)) ($Unbox intType (|Seq#Index| |run#0@@109| |i#1@@34|))) )) (= (Byte__Order.__default.IsSorted ($LS $ly@@418) (Lit |run#0@@109|)) (forall ((|i#1@@35| Int) (|j#1@@7| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@35|) (<= |i#1@@35| |j#1@@7|)) (< |j#1@@7| (|Seq#Length| (Lit |run#0@@109|)))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@109|) |i#1@@35|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@109|) |j#1@@7|)))))) :qid |totalorderidfyTotalOrderByteOrder.50:12| :skolemid |3593| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@109| |j#1@@7|)) ($Unbox intType (|Seq#Index| |run#0@@109| |i#1@@35|))) ))))) :qid |totalorderidfyTotalOrderByteOrder.46:23| :weight 3 :skolemid |3595| :pattern ( (Byte__Order.__default.IsSorted ($LS $ly@@418) (Lit |run#0@@109|))) ))))
(assert  (=> true (forall ((|run#0@@110| T@U) ) (!  (=> (and (= (type |run#0@@110|) (SeqType BoxType)) (or (|Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@110|) ($Is |run#0@@110| (TSeq Tclass.NativeTypes.byte)))) true) :qid |totalorderidfyTotalOrderByteOrder.53:38| :skolemid |3596| :pattern ( (Byte__Order.__default.IsStrictlySortedInternal |run#0@@110|)) ))))
(assert (forall ((|run#0@@111| T@U) ) (!  (=> (and (= (type |run#0@@111|) (SeqType BoxType)) ($Is |run#0@@111| (TSeq Tclass.NativeTypes.byte))) (= (|Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@111|) true)) :qid |totalorderidfyTotalOrderByteOrder.53:38| :skolemid |3597| :pattern ( (|Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@111|)) )))
(assert  (=> true (forall ((|run#0@@112| T@U) ) (!  (=> (and (= (type |run#0@@112|) (SeqType BoxType)) (or (|Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@112|) ($Is |run#0@@112| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|i#0@@109| Int) (|j#0@@18| Int) ) (!  (=> (<= (LitInt 0) |i#0@@109|) (=> (< |i#0@@109| |j#0@@18|) (=> (< |j#0@@18| (|Seq#Length| |run#0@@112|)) (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@112| |i#0@@109|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@112| |j#0@@18|))))))) :qid |totalorderidfyTotalOrderByteOrder.55:12| :skolemid |3599| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@112| |j#0@@18|)) ($Unbox intType (|Seq#Index| |run#0@@112| |i#0@@109|))) )) (= (Byte__Order.__default.IsStrictlySortedInternal |run#0@@112|) (forall ((|i#0@@110| Int) (|j#0@@19| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@110|) (< |i#0@@110| |j#0@@19|)) (< |j#0@@19| (|Seq#Length| |run#0@@112|))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@112| |i#0@@110|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@112| |j#0@@19|)))))) :qid |totalorderidfyTotalOrderByteOrder.55:12| :skolemid |3598| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@112| |j#0@@19|)) ($Unbox intType (|Seq#Index| |run#0@@112| |i#0@@110|))) ))))) :qid |totalorderidfyTotalOrderByteOrder.53:38| :skolemid |3600| :pattern ( (Byte__Order.__default.IsStrictlySortedInternal |run#0@@112|)) ))))
(assert  (=> true (forall ((|run#0@@113| T@U) ) (!  (=> (and (= (type |run#0@@113|) (SeqType BoxType)) (or (|Byte__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@113|)) ($Is |run#0@@113| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|i#1@@36| Int) (|j#1@@8| Int) ) (!  (=> (<= (LitInt 0) |i#1@@36|) (=> (< |i#1@@36| |j#1@@8|) (=> (< |j#1@@8| (|Seq#Length| (Lit |run#0@@113|))) (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@113|) |i#1@@36|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@113|) |j#1@@8|))))))) :qid |totalorderidfyTotalOrderByteOrder.55:12| :skolemid |3602| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@113| |j#1@@8|)) ($Unbox intType (|Seq#Index| |run#0@@113| |i#1@@36|))) )) (= (Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@113|)) (forall ((|i#1@@37| Int) (|j#1@@9| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@37|) (< |i#1@@37| |j#1@@9|)) (< |j#1@@9| (|Seq#Length| (Lit |run#0@@113|)))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@113|) |i#1@@37|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@113|) |j#1@@9|)))))) :qid |totalorderidfyTotalOrderByteOrder.55:12| :skolemid |3601| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@113| |j#1@@9|)) ($Unbox intType (|Seq#Index| |run#0@@113| |i#1@@37|))) ))))) :qid |totalorderidfyTotalOrderByteOrder.53:38| :weight 3 :skolemid |3603| :pattern ( (Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@113|))) ))))
(assert (forall (($ly@@419 T@U) (|run#0@@114| T@U) ) (!  (=> (and (= (type $ly@@419) LayerTypeType) (= (type |run#0@@114|) (SeqType BoxType))) (= (Byte__Order.__default.IsStrictlySorted ($LS $ly@@419) |run#0@@114|) (Byte__Order.__default.IsStrictlySorted $ly@@419 |run#0@@114|))) :qid |totalorderidfyTotalOrderByteOrder.69:23| :skolemid |3604| :pattern ( (Byte__Order.__default.IsStrictlySorted ($LS $ly@@419) |run#0@@114|)) )))
(assert (forall (($ly@@420 T@U) (|run#0@@115| T@U) ) (!  (=> (and (= (type $ly@@420) LayerTypeType) (= (type |run#0@@115|) (SeqType BoxType))) (= (Byte__Order.__default.IsStrictlySorted $ly@@420 |run#0@@115|) (Byte__Order.__default.IsStrictlySorted $LZ |run#0@@115|))) :qid |totalorderidfyTotalOrderByteOrder.69:23| :skolemid |3605| :pattern ( (Byte__Order.__default.IsStrictlySorted (AsFuelBottom $ly@@420) |run#0@@115|)) )))
(assert  (=> true (forall (($ly@@421 T@U) (|run#0@@116| T@U) ) (!  (=> (and (and (= (type $ly@@421) LayerTypeType) (= (type |run#0@@116|) (SeqType BoxType))) (or (|Byte__Order.__default.IsStrictlySorted#canCall| |run#0@@116|) ($Is |run#0@@116| (TSeq Tclass.NativeTypes.byte)))) (and (and (=> (= (|Seq#Length| |run#0@@116|) (LitInt 0)) (Byte__Order.__default.IsStrictlySorted $ly@@421 |run#0@@116|)) (=> (= (|Seq#Length| |run#0@@116|) (LitInt 1)) (Byte__Order.__default.IsStrictlySorted $ly@@421 |run#0@@116|))) (=> (Byte__Order.__default.IsStrictlySorted $ly@@421 |run#0@@116|) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@116|)))) :qid |totalorderidfyTotalOrderByteOrder.69:23| :skolemid |3606| :pattern ( (Byte__Order.__default.IsStrictlySorted $ly@@421 |run#0@@116|)) ))))
(assert (forall (($ly@@422 T@U) (|run#0@@117| T@U) ) (!  (=> (and (and (= (type $ly@@422) LayerTypeType) (= (type |run#0@@117|) (SeqType BoxType))) ($Is |run#0@@117| (TSeq Tclass.NativeTypes.byte))) (= (|Byte__Order.__default.IsStrictlySorted#requires| $ly@@422 |run#0@@117|) true)) :qid |totalorderidfyTotalOrderByteOrder.69:23| :skolemid |3607| :pattern ( (|Byte__Order.__default.IsStrictlySorted#requires| $ly@@422 |run#0@@117|)) )))
(assert  (=> true (forall (($ly@@423 T@U) (|run#0@@118| T@U) ) (!  (=> (and (and (= (type $ly@@423) LayerTypeType) (= (type |run#0@@118|) (SeqType BoxType))) (or (|Byte__Order.__default.IsStrictlySorted#canCall| |run#0@@118|) ($Is |run#0@@118| (TSeq Tclass.NativeTypes.byte)))) (and (|Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@118|) (= (Byte__Order.__default.IsStrictlySorted ($LS $ly@@423) |run#0@@118|) (let ((|b#0@@93| (Byte__Order.__default.IsStrictlySortedInternal |run#0@@118|))) (ite |b#0@@93| |b#0@@93| |b#0@@93|))))) :qid |totalorderidfyTotalOrderByteOrder.69:23| :skolemid |3608| :pattern ( (Byte__Order.__default.IsStrictlySorted ($LS $ly@@423) |run#0@@118|)) ))))
(assert  (=> true (forall (($ly@@424 T@U) (|run#0@@119| T@U) ) (!  (=> (and (and (= (type $ly@@424) LayerTypeType) (= (type |run#0@@119|) (SeqType BoxType))) (or (|Byte__Order.__default.IsStrictlySorted#canCall| (Lit |run#0@@119|)) ($Is |run#0@@119| (TSeq Tclass.NativeTypes.byte)))) (and (|Byte__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@119|)) (= (Byte__Order.__default.IsStrictlySorted ($LS $ly@@424) (Lit |run#0@@119|)) (let ((|b#1@@3| (U_2_bool (Lit (bool_2_U (Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@119|))))))) (ite |b#1@@3| |b#1@@3| |b#1@@3|))))) :qid |totalorderidfyTotalOrderByteOrder.69:23| :weight 3 :skolemid |3609| :pattern ( (Byte__Order.__default.IsStrictlySorted ($LS $ly@@424) (Lit |run#0@@119|))) ))))
(assert  (=> true (forall ((|e#0@@4| Int) (|s#0@@214| T@U) ) (!  (=> (and (= (type |s#0@@214|) (MapType0Type BoxType boolType)) (or (|Byte__Order.__default.BiggestInSet#canCall| |e#0@@4| |s#0@@214|) (and (and (and (<= (LitInt 0) |e#0@@4|) (< |e#0@@4| 256)) ($Is |s#0@@214| (TSet Tclass.NativeTypes.byte))) (< 0 (|Set#Card| |s#0@@214|))))) true) :qid |totalorderidfyTotalOrderByteOrder.138:26| :skolemid |3610| :pattern ( (Byte__Order.__default.BiggestInSet |e#0@@4| |s#0@@214|)) ))))
(assert (forall ((|e#0@@5| Int) (|s#0@@215| T@U) ) (!  (=> (= (type |s#0@@215|) (MapType0Type BoxType boolType)) (=> (and (and (<= (LitInt 0) |e#0@@5|) (< |e#0@@5| 256)) ($Is |s#0@@215| (TSet Tclass.NativeTypes.byte))) (= (|Byte__Order.__default.BiggestInSet#requires| |e#0@@5| |s#0@@215|) (< 0 (|Set#Card| |s#0@@215|))))) :qid |totalorderidfyTotalOrderByteOrder.138:26| :skolemid |3611| :pattern ( (|Byte__Order.__default.BiggestInSet#requires| |e#0@@5| |s#0@@215|)) )))
(assert  (=> true (forall ((|e#0@@6| Int) (|s#0@@216| T@U) ) (!  (=> (and (= (type |s#0@@216|) (MapType0Type BoxType boolType)) (or (|Byte__Order.__default.BiggestInSet#canCall| |e#0@@6| |s#0@@216|) (and (and (and (<= (LitInt 0) |e#0@@6|) (< |e#0@@6| 256)) ($Is |s#0@@216| (TSet Tclass.NativeTypes.byte))) (< 0 (|Set#Card| |s#0@@216|))))) (and (=> (U_2_bool (MapType0Select |s#0@@216| ($Box (int_2_U |e#0@@6|)))) (forall ((|e2#0| Int) ) (!  (=> (and (<= (LitInt 0) |e2#0|) (< |e2#0| 256)) (=> (and (U_2_bool (MapType0Select |s#0@@216| ($Box (int_2_U |e2#0|)))) (not (= |e2#0| |e#0@@6|))) (|Byte__Order.__default.lt#canCall| |e2#0| |e#0@@6|))) :qid |totalorderidfyTotalOrderByteOrder.141:22| :skolemid |3613| :pattern ( (Byte__Order.__default.lt |e2#0| |e#0@@6|)) :pattern ( (MapType0Select |s#0@@216| ($Box (int_2_U |e2#0|)))) ))) (= (Byte__Order.__default.BiggestInSet |e#0@@6| |s#0@@216|)  (and (U_2_bool (MapType0Select |s#0@@216| ($Box (int_2_U |e#0@@6|)))) (forall ((|e2#0@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |e2#0@@0|) (< |e2#0@@0| 256)) (and (U_2_bool (MapType0Select |s#0@@216| ($Box (int_2_U |e2#0@@0|)))) (not (= |e2#0@@0| |e#0@@6|)))) (Byte__Order.__default.lt |e2#0@@0| |e#0@@6|)) :qid |totalorderidfyTotalOrderByteOrder.141:22| :skolemid |3612| :pattern ( (Byte__Order.__default.lt |e2#0@@0| |e#0@@6|)) :pattern ( (MapType0Select |s#0@@216| ($Box (int_2_U |e2#0@@0|)))) )))))) :qid |totalorderidfyTotalOrderByteOrder.138:26| :skolemid |3614| :pattern ( (Byte__Order.__default.BiggestInSet |e#0@@6| |s#0@@216|)) ))))
(assert  (=> true (forall ((|e#0@@7| Int) (|s#0@@217| T@U) ) (!  (=> (and (= (type |s#0@@217|) (MapType0Type BoxType boolType)) (or (|Byte__Order.__default.BiggestInSet#canCall| (LitInt |e#0@@7|) (Lit |s#0@@217|)) (and (and (and (<= (LitInt 0) |e#0@@7|) (< |e#0@@7| 256)) ($Is |s#0@@217| (TSet Tclass.NativeTypes.byte))) (< 0 (|Set#Card| (Lit |s#0@@217|)))))) (and (=> (U_2_bool (MapType0Select (Lit |s#0@@217|) ($Box (int_2_U (LitInt |e#0@@7|))))) (forall ((|e2#1| Int) ) (!  (=> (and (<= (LitInt 0) |e2#1|) (< |e2#1| 256)) (=> (and (U_2_bool (MapType0Select (Lit |s#0@@217|) ($Box (int_2_U |e2#1|)))) (not (= |e2#1| |e#0@@7|))) (|Byte__Order.__default.lt#canCall| |e2#1| (LitInt |e#0@@7|)))) :qid |totalorderidfyTotalOrderByteOrder.141:22| :skolemid |3616| :pattern ( (Byte__Order.__default.lt |e2#1| |e#0@@7|)) :pattern ( (MapType0Select |s#0@@217| ($Box (int_2_U |e2#1|)))) ))) (= (Byte__Order.__default.BiggestInSet (LitInt |e#0@@7|) (Lit |s#0@@217|))  (and (U_2_bool (MapType0Select (Lit |s#0@@217|) ($Box (int_2_U (LitInt |e#0@@7|))))) (forall ((|e2#1@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |e2#1@@0|) (< |e2#1@@0| 256)) (and (U_2_bool (MapType0Select (Lit |s#0@@217|) ($Box (int_2_U |e2#1@@0|)))) (not (= |e2#1@@0| |e#0@@7|)))) (Byte__Order.__default.lt |e2#1@@0| (LitInt |e#0@@7|))) :qid |totalorderidfyTotalOrderByteOrder.141:22| :skolemid |3615| :pattern ( (Byte__Order.__default.lt |e2#1@@0| |e#0@@7|)) :pattern ( (MapType0Select |s#0@@217| ($Box (int_2_U |e2#1@@0|)))) )))))) :qid |totalorderidfyTotalOrderByteOrder.138:26| :weight 3 :skolemid |3617| :pattern ( (Byte__Order.__default.BiggestInSet (LitInt |e#0@@7|) (Lit |s#0@@217|))) ))))
(assert (forall ((arg0@@625 T@U) (arg1@@301 T@U) ) (! (= (type (Byte__Order.__default.SortSet arg0@@625 arg1@@301)) (SeqType BoxType)) :qid |funType:Byte__Order.__default.SortSet| :pattern ( (Byte__Order.__default.SortSet arg0@@625 arg1@@301)) )))
(assert (forall (($ly@@425 T@U) (|s#0@@218| T@U) ) (!  (=> (and (= (type $ly@@425) LayerTypeType) (= (type |s#0@@218|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.SortSet ($LS $ly@@425) |s#0@@218|) (Byte__Order.__default.SortSet $ly@@425 |s#0@@218|))) :qid |totalorderidfyTotalOrderByteOrder.169:12| :skolemid |3618| :pattern ( (Byte__Order.__default.SortSet ($LS $ly@@425) |s#0@@218|)) )))
(assert (forall (($ly@@426 T@U) (|s#0@@219| T@U) ) (!  (=> (and (= (type $ly@@426) LayerTypeType) (= (type |s#0@@219|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.SortSet $ly@@426 |s#0@@219|) (Byte__Order.__default.SortSet $LZ |s#0@@219|))) :qid |totalorderidfyTotalOrderByteOrder.169:12| :skolemid |3619| :pattern ( (Byte__Order.__default.SortSet (AsFuelBottom $ly@@426) |s#0@@219|)) )))
(assert  (=> true (forall (($ly@@427 T@U) (|s#0@@220| T@U) ) (!  (=> (and (and (= (type $ly@@427) LayerTypeType) (= (type |s#0@@220|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SortSet#canCall| |s#0@@220|) ($Is |s#0@@220| (TSet Tclass.NativeTypes.byte)))) (and (and (and (= (|Set#Card| |s#0@@220|) (|Seq#Length| (Byte__Order.__default.SortSet $ly@@427 |s#0@@220|))) (forall ((|t#0@@13| T@U) ) (!  (=> (= (type |t#0@@13|) intType) (=> (and (<= (LitInt 0) (U_2_int |t#0@@13|)) (< (U_2_int |t#0@@13|) 256)) (= (U_2_bool (MapType0Select |s#0@@220| ($Box |t#0@@13|))) (|Seq#Contains| (Byte__Order.__default.SortSet $ly@@427 |s#0@@220|) ($Box |t#0@@13|))))) :qid |totalorderidfyTotalOrderByteOrder.171:20| :skolemid |3620| :pattern ( (|Seq#Contains| (Byte__Order.__default.SortSet $ly@@427 |s#0@@220|) ($Box |t#0@@13|))) :pattern ( (MapType0Select |s#0@@220| ($Box |t#0@@13|))) ))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted (Byte__Order.__default.SortSet $ly@@427 |s#0@@220|))) ($Is (Byte__Order.__default.SortSet $ly@@427 |s#0@@220|) (TSeq Tclass.NativeTypes.byte)))) :qid |totalorderidfyTotalOrderByteOrder.169:12| :skolemid |3621| :pattern ( (Byte__Order.__default.SortSet $ly@@427 |s#0@@220|)) ))))
(assert (forall (($ly@@428 T@U) ($Heap@@56 T@U) (|s#0@@221| T@U) ) (!  (=> (and (and (and (= (type $ly@@428) LayerTypeType) (= (type $Heap@@56) (MapType0Type refType MapType1Type))) (= (type |s#0@@221|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@56) ($Is |s#0@@221| (TSet Tclass.NativeTypes.byte)))) (= (|Byte__Order.__default.SortSet#requires| $ly@@428 |s#0@@221|) true)) :qid |totalorderidfyTotalOrderByteOrder.169:12| :skolemid |3622| :pattern ( (|Byte__Order.__default.SortSet#requires| $ly@@428 |s#0@@221|) ($IsGoodHeap $Heap@@56)) )))
(assert (forall ((s@@53 T@U) ) (!  (=> (and (= (type s@@53) (MapType0Type BoxType boolType)) (|$let#21$canCall| s@@53)) (and (and (<= (LitInt 0) (|$let#21_e| s@@53)) (< (|$let#21_e| s@@53) 256)) (Byte__Order.__default.BiggestInSet (|$let#21_e| s@@53) s@@53))) :qid |totalorderidfyTotalOrderByteOrder.180:7| :skolemid |3623| :pattern ( (|$let#21_e| s@@53)) )))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted8) LayerTypeType))
(assert  (=> true (forall (($ly@@429 T@U) ($Heap@@57 T@U) (|s#0@@222| T@U) ) (!  (=> (and (and (and (= (type $ly@@429) LayerTypeType) (= (type $Heap@@57) (MapType0Type refType MapType1Type))) (= (type |s#0@@222|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SortSet#canCall| |s#0@@222|) (and ($IsGoodHeap $Heap@@57) ($Is |s#0@@222| (TSet Tclass.NativeTypes.byte))))) (and (=> (not (= (|Set#Card| |s#0@@222|) (LitInt 0))) (and (|$let#21$canCall| |s#0@@222|) (|Byte__Order.__default.SortSet#canCall| (|Set#Difference| |s#0@@222| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#21_e| |s#0@@222|)))))))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted8)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted8)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted8) MoreFuel_Byte_Order._default.IsSorted8)) (= (Byte__Order.__default.SortSet ($LS $ly@@429) |s#0@@222|) (ite (= (|Set#Card| |s#0@@222|) (LitInt 0)) (|Seq#Empty| BoxType) (let ((|e#0@@8| (|$let#21_e| |s#0@@222|))) (|Seq#Append| (Byte__Order.__default.SortSet $ly@@429 (|Set#Difference| |s#0@@222| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |e#0@@8|))))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U |e#0@@8|)))))))))) :qid |totalorderidfyTotalOrderByteOrder.169:12| :skolemid |3624| :pattern ( (Byte__Order.__default.SortSet ($LS $ly@@429) |s#0@@222|) ($IsGoodHeap $Heap@@57)) ))))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted9) LayerTypeType))
(assert  (=> true (forall (($ly@@430 T@U) ($Heap@@58 T@U) (|s#0@@223| T@U) ) (!  (=> (and (and (and (= (type $ly@@430) LayerTypeType) (= (type $Heap@@58) (MapType0Type refType MapType1Type))) (= (type |s#0@@223|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SortSet#canCall| (Lit |s#0@@223|)) (and ($IsGoodHeap $Heap@@58) ($Is |s#0@@223| (TSet Tclass.NativeTypes.byte))))) (and (=> (not (= (|Set#Card| (Lit |s#0@@223|)) (LitInt 0))) (and (|$let#21$canCall| (Lit |s#0@@223|)) (|Byte__Order.__default.SortSet#canCall| (|Set#Difference| |s#0@@223| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#21_e| (Lit |s#0@@223|))))))))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted9)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted9)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted9) MoreFuel_Byte_Order._default.IsSorted9)) (= (Byte__Order.__default.SortSet ($LS $ly@@430) (Lit |s#0@@223|)) (ite (= (|Set#Card| (Lit |s#0@@223|)) (LitInt 0)) (|Seq#Empty| BoxType) (let ((|e#1| (|$let#21_e| (Lit |s#0@@223|)))) (|Seq#Append| (Byte__Order.__default.SortSet ($LS $ly@@430) (|Set#Difference| |s#0@@223| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |e#1|))))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U |e#1|)))))))))) :qid |totalorderidfyTotalOrderByteOrder.169:12| :weight 3 :skolemid |3625| :pattern ( (Byte__Order.__default.SortSet ($LS $ly@@430) (Lit |s#0@@223|)) ($IsGoodHeap $Heap@@58)) ))))
(assert (= (type Tclass.Lexicographic__Byte__Order.__default) TyType))
(assert (= (Tag Tclass.Lexicographic__Byte__Order.__default) Tagclass.Lexicographic__Byte__Order.__default))
(assert (= (TagFamily Tclass.Lexicographic__Byte__Order.__default) tytagFamily$_default))
(assert (forall ((bx@@191 T@U) ) (!  (=> (and (= (type bx@@191) BoxType) ($IsBox bx@@191 Tclass.Lexicographic__Byte__Order.__default)) (and (= ($Box ($Unbox refType bx@@191)) bx@@191) ($Is ($Unbox refType bx@@191) Tclass.Lexicographic__Byte__Order.__default))) :qid |unknown.0:0| :skolemid |3626| :pattern ( ($IsBox bx@@191 Tclass.Lexicographic__Byte__Order.__default)) )))
(assert (forall (($o@@58 T@U) ) (!  (=> (= (type $o@@58) refType) (= ($Is $o@@58 Tclass.Lexicographic__Byte__Order.__default)  (or (= $o@@58 null) (= (dtype $o@@58) Tclass.Lexicographic__Byte__Order.__default)))) :qid |unknown.0:0| :skolemid |3627| :pattern ( ($Is $o@@58 Tclass.Lexicographic__Byte__Order.__default)) )))
(assert (forall (($o@@59 T@U) ($h@@178 T@U) ) (!  (=> (and (= (type $o@@59) refType) (= (type $h@@178) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@59 Tclass.Lexicographic__Byte__Order.__default $h@@178)  (or (= $o@@59 null) (U_2_bool (MapType1Select (MapType0Select $h@@178 $o@@59) alloc))))) :qid |unknown.0:0| :skolemid |3628| :pattern ( ($IsAlloc $o@@59 Tclass.Lexicographic__Byte__Order.__default $h@@178)) )))
(assert (= (type Lexicographic__Byte__Order.__default.SomeElement) (SeqType BoxType)))
(assert  (=> true (=> true ($Is Lexicographic__Byte__Order.__default.SomeElement (TSeq Tclass.NativeTypes.byte)))))
(assert (= |Lexicographic__Byte__Order.__default.SomeElement#requires| true))
(assert  (=> true (=> true (= Lexicographic__Byte__Order.__default.SomeElement (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (=> true (= Lexicographic__Byte__Order.__default.SomeElement (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (forall ((|a#0@@135| T@U) (|b#0@@94| T@U) ) (!  (=> (and (and (= (type |a#0@@135|) (SeqType BoxType)) (= (type |b#0@@94|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@135| |b#0@@94|) (and ($Is |a#0@@135| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@94| (TSeq Tclass.NativeTypes.byte))))) (and (and (and (and (and (and (= (Lexicographic__Byte__Order.__default.lte |a#0@@135| |b#0@@94|) (Lexicographic__Byte__Order.__default.ltedef |a#0@@135| |b#0@@94|)) (or (Lexicographic__Byte__Order.__default.ltedef |a#0@@135| |b#0@@94|) (Lexicographic__Byte__Order.__default.ltedef |b#0@@94| |a#0@@135|))) (forall ((|a#1@@3| T@U) (|b#1@@4| T@U) (|c#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type |a#1@@3|) (SeqType BoxType)) (= (type |b#1@@4|) (SeqType BoxType))) (= (type |c#0@@11|) (SeqType BoxType))) (and (and ($Is |a#1@@3| (TSeq Tclass.NativeTypes.byte)) ($Is |b#1@@4| (TSeq Tclass.NativeTypes.byte))) ($Is |c#0@@11| (TSeq Tclass.NativeTypes.byte)))) (and (Lexicographic__Byte__Order.__default.ltedef |a#1@@3| |b#1@@4|) (Lexicographic__Byte__Order.__default.ltedef |b#1@@4| |c#0@@11|))) (Lexicographic__Byte__Order.__default.ltedef |a#1@@3| |c#0@@11|)) :qid |totalorderidfy.25:20| :skolemid |3629| :pattern ( (Lexicographic__Byte__Order.__default.ltedef |a#1@@3| |c#0@@11|) (Lexicographic__Byte__Order.__default.ltedef |b#1@@4| |c#0@@11|)) :pattern ( (Lexicographic__Byte__Order.__default.ltedef |b#1@@4| |c#0@@11|) (Lexicographic__Byte__Order.__default.ltedef |a#1@@3| |b#1@@4|)) ))) (= (Lexicographic__Byte__Order.__default.lte |a#0@@135| |b#0@@94|) (Lexicographic__Byte__Order.__default.ltedef |a#0@@135| |b#0@@94|))) (or (Lexicographic__Byte__Order.__default.ltedef |a#0@@135| |b#0@@94|) (Lexicographic__Byte__Order.__default.ltedef |b#0@@94| |a#0@@135|))) (=> (and (Lexicographic__Byte__Order.__default.ltedef |a#0@@135| |b#0@@94|) (Lexicographic__Byte__Order.__default.ltedef |b#0@@94| |a#0@@135|)) (|Seq#Equal| |a#0@@135| |b#0@@94|))) (forall ((|a#2@@0| T@U) (|b#2@@0| T@U) (|c#1@@0| T@U) ) (!  (=> (and (and (and (and (= (type |a#2@@0|) (SeqType BoxType)) (= (type |b#2@@0|) (SeqType BoxType))) (= (type |c#1@@0|) (SeqType BoxType))) (and (and ($Is |a#2@@0| (TSeq Tclass.NativeTypes.byte)) ($Is |b#2@@0| (TSeq Tclass.NativeTypes.byte))) ($Is |c#1@@0| (TSeq Tclass.NativeTypes.byte)))) (and (Lexicographic__Byte__Order.__default.ltedef |a#2@@0| |b#2@@0|) (Lexicographic__Byte__Order.__default.ltedef |b#2@@0| |c#1@@0|))) (Lexicographic__Byte__Order.__default.ltedef |a#2@@0| |c#1@@0|)) :qid |totalorderidfy.199:20| :skolemid |3630| :pattern ( (Lexicographic__Byte__Order.__default.ltedef |a#2@@0| |c#1@@0|) (Lexicographic__Byte__Order.__default.ltedef |b#2@@0| |c#1@@0|)) :pattern ( (Lexicographic__Byte__Order.__default.ltedef |b#2@@0| |c#1@@0|) (Lexicographic__Byte__Order.__default.ltedef |a#2@@0| |b#2@@0|)) )))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.22:17| :skolemid |3631| :pattern ( (Lexicographic__Byte__Order.__default.lte |a#0@@135| |b#0@@94|)) ))))
(assert (forall ((|a#0@@136| T@U) (|b#0@@95| T@U) ) (!  (=> (and (and (= (type |a#0@@136|) (SeqType BoxType)) (= (type |b#0@@95|) (SeqType BoxType))) (and ($Is |a#0@@136| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@95| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.lte#requires| |a#0@@136| |b#0@@95|) true)) :qid |totalorderidfyTotalOrderLexicographicByteOrder.22:17| :skolemid |3632| :pattern ( (|Lexicographic__Byte__Order.__default.lte#requires| |a#0@@136| |b#0@@95|)) )))
(assert  (=> true (forall ((|a#0@@137| T@U) (|b#0@@96| T@U) ) (!  (=> (and (and (= (type |a#0@@137|) (SeqType BoxType)) (= (type |b#0@@96|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@137| |b#0@@96|) (and ($Is |a#0@@137| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@96| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| |a#0@@137| |b#0@@96|) (= (Lexicographic__Byte__Order.__default.lte |a#0@@137| |b#0@@96|) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@137| |b#0@@96|)))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.22:17| :skolemid |3633| :pattern ( (Lexicographic__Byte__Order.__default.lte |a#0@@137| |b#0@@96|)) ))))
(assert  (=> true (forall ((|a#0@@138| T@U) (|b#0@@97| T@U) ) (!  (=> (and (and (= (type |a#0@@138|) (SeqType BoxType)) (= (type |b#0@@97|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |a#0@@138|) (Lit |b#0@@97|)) (and ($Is |a#0@@138| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@97| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| (Lit |a#0@@138|) (Lit |b#0@@97|)) (= (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@138|) (Lit |b#0@@97|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@138|) (Lit |b#0@@97|))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.22:17| :weight 3 :skolemid |3634| :pattern ( (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@138|) (Lit |b#0@@97|))) ))))
(assert  (=> true (forall ((|a#0@@139| T@U) (|b#0@@98| T@U) ) (!  (=> (and (and (= (type |a#0@@139|) (SeqType BoxType)) (= (type |b#0@@98|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.ltedef#canCall| |a#0@@139| |b#0@@98|) (and ($Is |a#0@@139| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@98| (TSeq Tclass.NativeTypes.byte))))) true) :qid |totalorderidfyTotalOrderLexicographicByteOrder.27:20| :skolemid |3635| :pattern ( (Lexicographic__Byte__Order.__default.ltedef |a#0@@139| |b#0@@98|)) ))))
(assert (forall ((|a#0@@140| T@U) (|b#0@@99| T@U) ) (!  (=> (and (and (= (type |a#0@@140|) (SeqType BoxType)) (= (type |b#0@@99|) (SeqType BoxType))) (and ($Is |a#0@@140| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@99| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.ltedef#requires| |a#0@@140| |b#0@@99|) true)) :qid |totalorderidfyTotalOrderLexicographicByteOrder.27:20| :skolemid |3636| :pattern ( (|Lexicographic__Byte__Order.__default.ltedef#requires| |a#0@@140| |b#0@@99|)) )))
(assert  (=> true (forall ((|a#0@@141| T@U) (|b#0@@100| T@U) ) (!  (=> (and (and (= (type |a#0@@141|) (SeqType BoxType)) (= (type |b#0@@100|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.ltedef#canCall| |a#0@@141| |b#0@@100|) (and ($Is |a#0@@141| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@100| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| |a#0@@141| |b#0@@100|) (= (Lexicographic__Byte__Order.__default.ltedef |a#0@@141| |b#0@@100|) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@141| |b#0@@100|)))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.27:20| :skolemid |3637| :pattern ( (Lexicographic__Byte__Order.__default.ltedef |a#0@@141| |b#0@@100|)) ))))
(assert  (=> true (forall ((|a#0@@142| T@U) (|b#0@@101| T@U) ) (!  (=> (and (and (= (type |a#0@@142|) (SeqType BoxType)) (= (type |b#0@@101|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.ltedef#canCall| (Lit |a#0@@142|) (Lit |b#0@@101|)) (and ($Is |a#0@@142| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@101| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| (Lit |a#0@@142|) (Lit |b#0@@101|)) (= (Lexicographic__Byte__Order.__default.ltedef (Lit |a#0@@142|) (Lit |b#0@@101|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@142|) (Lit |b#0@@101|))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.27:20| :weight 3 :skolemid |3638| :pattern ( (Lexicographic__Byte__Order.__default.ltedef (Lit |a#0@@142|) (Lit |b#0@@101|))) ))))
(assert (forall (($ly@@431 T@U) (|run#0@@120| T@U) (|needle#0@@37| T@U) ) (!  (=> (and (and (= (type $ly@@431) LayerTypeType) (= (type |run#0@@120|) (SeqType BoxType))) (= (type |needle#0@@37|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@431) |run#0@@120| |needle#0@@37|) (Lexicographic__Byte__Order.__default.LargestLte $ly@@431 |run#0@@120| |needle#0@@37|))) :qid |totalorderidfyLexicographicByteOrder.264:12| :skolemid |3639| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@431) |run#0@@120| |needle#0@@37|)) )))
(assert (forall (($ly@@432 T@U) (|run#0@@121| T@U) (|needle#0@@38| T@U) ) (!  (=> (and (and (= (type $ly@@432) LayerTypeType) (= (type |run#0@@121|) (SeqType BoxType))) (= (type |needle#0@@38|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.LargestLte $ly@@432 |run#0@@121| |needle#0@@38|) (Lexicographic__Byte__Order.__default.LargestLte $LZ |run#0@@121| |needle#0@@38|))) :qid |totalorderidfyLexicographicByteOrder.264:12| :skolemid |3640| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte (AsFuelBottom $ly@@432) |run#0@@121| |needle#0@@38|)) )))
(assert (= (type StartFuel_Lexicographic_Byte_Order._default.IsSorted) LayerTypeType))
(assert  (=> true (forall (($ly@@433 T@U) (|run#0@@122| T@U) (|needle#0@@39| T@U) ) (!  (=> (and (and (and (= (type $ly@@433) LayerTypeType) (= (type |run#0@@122|) (SeqType BoxType))) (= (type |needle#0@@39|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLte#canCall| |run#0@@122| |needle#0@@39|) (and (and ($Is |run#0@@122| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@39| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@122|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Lexicographic__Byte__Order.__default.LargestLte $ly@@433 |run#0@@122| |needle#0@@39|)) (< (Lexicographic__Byte__Order.__default.LargestLte $ly@@433 |run#0@@122| |needle#0@@39|) (|Seq#Length| |run#0@@122|))) (forall ((|i#0@@111| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@111|) (<= |i#0@@111| (Lexicographic__Byte__Order.__default.LargestLte $ly@@433 |run#0@@122| |needle#0@@39|))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@122| |i#0@@111|)) |needle#0@@39|))) :qid |totalorderidfyLexicographicByteOrder.267:20| :skolemid |3641| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@122| |i#0@@111|))) ))) (forall ((|i#1@@38| Int) ) (!  (=> true (=> (and (< (Lexicographic__Byte__Order.__default.LargestLte $ly@@433 |run#0@@122| |needle#0@@39|) |i#1@@38|) (< |i#1@@38| (|Seq#Length| |run#0@@122|))) (Lexicographic__Byte__Order.__default.lt |needle#0@@39| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@122| |i#1@@38|))))) :qid |totalorderidfyLexicographicByteOrder.268:20| :skolemid |3642| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@122| |i#1@@38|))) ))) (=> (|Seq#Contains| |run#0@@122| ($Box |needle#0@@39|)) (and (<= (LitInt 0) (Lexicographic__Byte__Order.__default.LargestLte $ly@@433 |run#0@@122| |needle#0@@39|)) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@122| (Lexicographic__Byte__Order.__default.LargestLte $ly@@433 |run#0@@122| |needle#0@@39|))) |needle#0@@39|))))) :qid |totalorderidfyLexicographicByteOrder.264:12| :skolemid |3643| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte $ly@@433 |run#0@@122| |needle#0@@39|)) ))))
(assert (forall (($ly@@434 T@U) (|run#0@@123| T@U) (|needle#0@@40| T@U) ) (!  (=> (and (and (and (= (type $ly@@434) LayerTypeType) (= (type |run#0@@123|) (SeqType BoxType))) (= (type |needle#0@@40|) (SeqType BoxType))) (and ($Is |run#0@@123| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@40| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.LargestLte#requires| $ly@@434 |run#0@@123| |needle#0@@40|) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@123|))) :qid |totalorderidfyLexicographicByteOrder.264:12| :skolemid |3644| :pattern ( (|Lexicographic__Byte__Order.__default.LargestLte#requires| $ly@@434 |run#0@@123| |needle#0@@40|)) )))
(assert  (and (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted0) LayerTypeType) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted) LayerTypeType)))
(assert  (=> true (forall (($ly@@435 T@U) (|run#0@@124| T@U) (|needle#0@@41| T@U) ) (!  (=> (and (and (and (= (type $ly@@435) LayerTypeType) (= (type |run#0@@124|) (SeqType BoxType))) (= (type |needle#0@@41|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLte#canCall| |run#0@@124| |needle#0@@41|) (and (and ($Is |run#0@@124| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@41| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@124|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@124|) (LitInt 0))) (|Lexicographic__Byte__Order.__default.lt#canCall| |needle#0@@41| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@124| (LitInt 0))))) (=> (not (or (= (|Seq#Length| |run#0@@124|) (LitInt 0)) (Lexicographic__Byte__Order.__default.lt |needle#0@@41| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@124| (LitInt 0)))))) (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (|Seq#Drop| |run#0@@124| (LitInt 1)) |needle#0@@41|))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted0)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted0)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted0) MoreFuel_Lexicographic_Byte_Order._default.IsSorted0)) (= (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@435) |run#0@@124| |needle#0@@41|) (ite  (or (= (|Seq#Length| |run#0@@124|) (LitInt 0)) (Lexicographic__Byte__Order.__default.lt |needle#0@@41| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@124| (LitInt 0))))) (- 0 1) (+ 1 (Lexicographic__Byte__Order.__default.LargestLte $ly@@435 (|Seq#Drop| |run#0@@124| (LitInt 1)) |needle#0@@41|))))))) :qid |totalorderidfyLexicographicByteOrder.264:12| :skolemid |3645| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@435) |run#0@@124| |needle#0@@41|)) ))))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted1) LayerTypeType))
(assert  (=> true (forall (($ly@@436 T@U) (|run#0@@125| T@U) (|needle#0@@42| T@U) ) (!  (=> (and (and (and (= (type $ly@@436) LayerTypeType) (= (type |run#0@@125|) (SeqType BoxType))) (= (type |needle#0@@42|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (Lit |run#0@@125|) (Lit |needle#0@@42|)) (and (and ($Is |run#0@@125| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@42| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted (Lit |run#0@@125|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@125|)) (LitInt 0))) (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |needle#0@@42|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@125|) (LitInt 0))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@125|)) (LitInt 0)) (Lexicographic__Byte__Order.__default.lt (Lit |needle#0@@42|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@125|) (LitInt 0)))))) (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (Lit (|Seq#Drop| (Lit |run#0@@125|) (LitInt 1))) (Lit |needle#0@@42|)))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted1)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted1)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted1) MoreFuel_Lexicographic_Byte_Order._default.IsSorted1)) (= (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@436) (Lit |run#0@@125|) (Lit |needle#0@@42|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@125|)) (LitInt 0)) (Lexicographic__Byte__Order.__default.lt (Lit |needle#0@@42|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@125|) (LitInt 0))))) (- 0 1) (+ 1 (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@436) (Lit (|Seq#Drop| (Lit |run#0@@125|) (LitInt 1))) (Lit |needle#0@@42|)))))))) :qid |totalorderidfyLexicographicByteOrder.264:12| :weight 3 :skolemid |3646| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@436) (Lit |run#0@@125|) (Lit |needle#0@@42|))) ))))
(assert (forall (($ly@@437 T@U) (|run#0@@126| T@U) (|needle#0@@43| T@U) ) (!  (=> (and (and (= (type $ly@@437) LayerTypeType) (= (type |run#0@@126|) (SeqType BoxType))) (= (type |needle#0@@43|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@437) |run#0@@126| |needle#0@@43|) (Lexicographic__Byte__Order.__default.LargestLt $ly@@437 |run#0@@126| |needle#0@@43|))) :qid |totalorderidfyLexicographicByteOrder.360:12| :skolemid |3647| :pattern ( (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@437) |run#0@@126| |needle#0@@43|)) )))
(assert (forall (($ly@@438 T@U) (|run#0@@127| T@U) (|needle#0@@44| T@U) ) (!  (=> (and (and (= (type $ly@@438) LayerTypeType) (= (type |run#0@@127|) (SeqType BoxType))) (= (type |needle#0@@44|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.LargestLt $ly@@438 |run#0@@127| |needle#0@@44|) (Lexicographic__Byte__Order.__default.LargestLt $LZ |run#0@@127| |needle#0@@44|))) :qid |totalorderidfyLexicographicByteOrder.360:12| :skolemid |3648| :pattern ( (Lexicographic__Byte__Order.__default.LargestLt (AsFuelBottom $ly@@438) |run#0@@127| |needle#0@@44|)) )))
(assert  (=> true (forall (($ly@@439 T@U) (|run#0@@128| T@U) (|needle#0@@45| T@U) ) (!  (=> (and (and (and (= (type $ly@@439) LayerTypeType) (= (type |run#0@@128|) (SeqType BoxType))) (= (type |needle#0@@45|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLt#canCall| |run#0@@128| |needle#0@@45|) (and (and ($Is |run#0@@128| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@45| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@128|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Lexicographic__Byte__Order.__default.LargestLt $ly@@439 |run#0@@128| |needle#0@@45|)) (< (Lexicographic__Byte__Order.__default.LargestLt $ly@@439 |run#0@@128| |needle#0@@45|) (|Seq#Length| |run#0@@128|))) (forall ((|i#0@@112| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@112|) (<= |i#0@@112| (Lexicographic__Byte__Order.__default.LargestLt $ly@@439 |run#0@@128| |needle#0@@45|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@128| |i#0@@112|)) |needle#0@@45|))) :qid |totalorderidfyLexicographicByteOrder.363:20| :skolemid |3649| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@128| |i#0@@112|))) ))) (forall ((|i#1@@39| Int) ) (!  (=> true (=> (and (< (Lexicographic__Byte__Order.__default.LargestLt $ly@@439 |run#0@@128| |needle#0@@45|) |i#1@@39|) (< |i#1@@39| (|Seq#Length| |run#0@@128|))) (Lexicographic__Byte__Order.__default.lte |needle#0@@45| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@128| |i#1@@39|))))) :qid |totalorderidfyLexicographicByteOrder.364:20| :skolemid |3650| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@128| |i#1@@39|))) ))) (=> (|Seq#Contains| |run#0@@128| ($Box |needle#0@@45|)) (and (< (+ (Lexicographic__Byte__Order.__default.LargestLt $ly@@439 |run#0@@128| |needle#0@@45|) 1) (|Seq#Length| |run#0@@128|)) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@128| (+ (Lexicographic__Byte__Order.__default.LargestLt $ly@@439 |run#0@@128| |needle#0@@45|) 1))) |needle#0@@45|))))) :qid |totalorderidfyLexicographicByteOrder.360:12| :skolemid |3651| :pattern ( (Lexicographic__Byte__Order.__default.LargestLt $ly@@439 |run#0@@128| |needle#0@@45|)) ))))
(assert (forall (($ly@@440 T@U) (|run#0@@129| T@U) (|needle#0@@46| T@U) ) (!  (=> (and (and (and (= (type $ly@@440) LayerTypeType) (= (type |run#0@@129|) (SeqType BoxType))) (= (type |needle#0@@46|) (SeqType BoxType))) (and ($Is |run#0@@129| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@46| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.LargestLt#requires| $ly@@440 |run#0@@129| |needle#0@@46|) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@129|))) :qid |totalorderidfyLexicographicByteOrder.360:12| :skolemid |3652| :pattern ( (|Lexicographic__Byte__Order.__default.LargestLt#requires| $ly@@440 |run#0@@129| |needle#0@@46|)) )))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted2) LayerTypeType))
(assert  (=> true (forall (($ly@@441 T@U) (|run#0@@130| T@U) (|needle#0@@47| T@U) ) (!  (=> (and (and (and (= (type $ly@@441) LayerTypeType) (= (type |run#0@@130|) (SeqType BoxType))) (= (type |needle#0@@47|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLt#canCall| |run#0@@130| |needle#0@@47|) (and (and ($Is |run#0@@130| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@47| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@130|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@130|) (LitInt 0))) (|Lexicographic__Byte__Order.__default.lte#canCall| |needle#0@@47| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@130| (LitInt 0))))) (=> (not (or (= (|Seq#Length| |run#0@@130|) (LitInt 0)) (Lexicographic__Byte__Order.__default.lte |needle#0@@47| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@130| (LitInt 0)))))) (|Lexicographic__Byte__Order.__default.LargestLt#canCall| (|Seq#Drop| |run#0@@130| (LitInt 1)) |needle#0@@47|))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted2)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted2)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted2) MoreFuel_Lexicographic_Byte_Order._default.IsSorted2)) (= (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@441) |run#0@@130| |needle#0@@47|) (ite  (or (= (|Seq#Length| |run#0@@130|) (LitInt 0)) (Lexicographic__Byte__Order.__default.lte |needle#0@@47| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@130| (LitInt 0))))) (- 0 1) (+ 1 (Lexicographic__Byte__Order.__default.LargestLt $ly@@441 (|Seq#Drop| |run#0@@130| (LitInt 1)) |needle#0@@47|))))))) :qid |totalorderidfyLexicographicByteOrder.360:12| :skolemid |3653| :pattern ( (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@441) |run#0@@130| |needle#0@@47|)) ))))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted3) LayerTypeType))
(assert  (=> true (forall (($ly@@442 T@U) (|run#0@@131| T@U) (|needle#0@@48| T@U) ) (!  (=> (and (and (and (= (type $ly@@442) LayerTypeType) (= (type |run#0@@131|) (SeqType BoxType))) (= (type |needle#0@@48|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLt#canCall| (Lit |run#0@@131|) (Lit |needle#0@@48|)) (and (and ($Is |run#0@@131| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@48| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted (Lit |run#0@@131|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@131|)) (LitInt 0))) (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |needle#0@@48|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@131|) (LitInt 0))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@131|)) (LitInt 0)) (Lexicographic__Byte__Order.__default.lte (Lit |needle#0@@48|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@131|) (LitInt 0)))))) (|Lexicographic__Byte__Order.__default.LargestLt#canCall| (Lit (|Seq#Drop| (Lit |run#0@@131|) (LitInt 1))) (Lit |needle#0@@48|)))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted3)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted3)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted3) MoreFuel_Lexicographic_Byte_Order._default.IsSorted3)) (= (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@442) (Lit |run#0@@131|) (Lit |needle#0@@48|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@131|)) (LitInt 0)) (Lexicographic__Byte__Order.__default.lte (Lit |needle#0@@48|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@131|) (LitInt 0))))) (- 0 1) (+ 1 (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@442) (Lit (|Seq#Drop| (Lit |run#0@@131|) (LitInt 1))) (Lit |needle#0@@48|)))))))) :qid |totalorderidfyLexicographicByteOrder.360:12| :weight 3 :skolemid |3654| :pattern ( (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@442) (Lit |run#0@@131|) (Lit |needle#0@@48|))) ))))
(assert (forall (($ly@@443 T@U) (|run#0@@132| T@U) (|needle#0@@49| T@U) ) (!  (=> (and (and (= (type $ly@@443) LayerTypeType) (= (type |run#0@@132|) (SeqType BoxType))) (= (type |needle#0@@49|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@443) |run#0@@132| |needle#0@@49|) (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@443 |run#0@@132| |needle#0@@49|))) :qid |totalorderidfyLexicographicByteOrder.392:12| :skolemid |3655| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@443) |run#0@@132| |needle#0@@49|)) )))
(assert (forall (($ly@@444 T@U) (|run#0@@133| T@U) (|needle#0@@50| T@U) ) (!  (=> (and (and (= (type $ly@@444) LayerTypeType) (= (type |run#0@@133|) (SeqType BoxType))) (= (type |needle#0@@50|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@444 |run#0@@133| |needle#0@@50|) (Lexicographic__Byte__Order.__default.IndexOfFirstGte $LZ |run#0@@133| |needle#0@@50|))) :qid |totalorderidfyLexicographicByteOrder.392:12| :skolemid |3656| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGte (AsFuelBottom $ly@@444) |run#0@@133| |needle#0@@50|)) )))
(assert  (=> true (forall (($ly@@445 T@U) (|run#0@@134| T@U) (|needle#0@@51| T@U) ) (!  (=> (and (and (and (= (type $ly@@445) LayerTypeType) (= (type |run#0@@134|) (SeqType BoxType))) (= (type |needle#0@@51|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| |run#0@@134| |needle#0@@51|) (and (and ($Is |run#0@@134| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@51| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@134|)))) (and (and (and (<= (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@445 |run#0@@134| |needle#0@@51|) (|Seq#Length| |run#0@@134|)) (forall ((|i#0@@113| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@113|) (< |i#0@@113| (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@445 |run#0@@134| |needle#0@@51|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@134| |i#0@@113|)) |needle#0@@51|)) :qid |totalorderidfyLexicographicByteOrder.395:20| :skolemid |3657| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@134| |i#0@@113|))) ))) (forall ((|i#1@@40| Int) ) (!  (=> (and (<= (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@445 |run#0@@134| |needle#0@@51|) |i#1@@40|) (< |i#1@@40| (|Seq#Length| |run#0@@134|))) (Lexicographic__Byte__Order.__default.lte |needle#0@@51| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@134| |i#1@@40|)))) :qid |totalorderidfyLexicographicByteOrder.396:20| :skolemid |3658| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@134| |i#1@@40|))) ))) (<= (LitInt 0) (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@445 |run#0@@134| |needle#0@@51|)))) :qid |totalorderidfyLexicographicByteOrder.392:12| :skolemid |3659| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@445 |run#0@@134| |needle#0@@51|)) ))))
(assert (forall (($ly@@446 T@U) (|run#0@@135| T@U) (|needle#0@@52| T@U) ) (!  (=> (and (and (and (= (type $ly@@446) LayerTypeType) (= (type |run#0@@135|) (SeqType BoxType))) (= (type |needle#0@@52|) (SeqType BoxType))) (and ($Is |run#0@@135| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@52| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#requires| $ly@@446 |run#0@@135| |needle#0@@52|) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@135|))) :qid |totalorderidfyLexicographicByteOrder.392:12| :skolemid |3660| :pattern ( (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#requires| $ly@@446 |run#0@@135| |needle#0@@52|)) )))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted4) LayerTypeType))
(assert  (=> true (forall (($ly@@447 T@U) (|run#0@@136| T@U) (|needle#0@@53| T@U) ) (!  (=> (and (and (and (= (type $ly@@447) LayerTypeType) (= (type |run#0@@136|) (SeqType BoxType))) (= (type |needle#0@@53|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| |run#0@@136| |needle#0@@53|) (and (and ($Is |run#0@@136| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@53| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@136|)))) (and (=> (not (= (|Seq#Length| |run#0@@136|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) |run#0@@136|) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@136|)) |needle#0@@53|)) (=> (not (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@136|)) |needle#0@@53|)) (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) |run#0@@136|) (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |run#0@@136|) |needle#0@@53|))))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted4)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted4)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted4) MoreFuel_Lexicographic_Byte_Order._default.IsSorted4)) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@447) |run#0@@136| |needle#0@@53|) (ite (= (|Seq#Length| |run#0@@136|) (LitInt 0)) 0 (ite (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@136|)) |needle#0@@53|) (|Seq#Length| |run#0@@136|) (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@447 (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |run#0@@136|) |needle#0@@53|))))))) :qid |totalorderidfyLexicographicByteOrder.392:12| :skolemid |3661| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@447) |run#0@@136| |needle#0@@53|)) ))))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted5) LayerTypeType))
(assert  (=> true (forall (($ly@@448 T@U) (|run#0@@137| T@U) (|needle#0@@54| T@U) ) (!  (=> (and (and (and (= (type $ly@@448) LayerTypeType) (= (type |run#0@@137|) (SeqType BoxType))) (= (type |needle#0@@54|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| (Lit |run#0@@137|) (Lit |needle#0@@54|)) (and (and ($Is |run#0@@137| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@54| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted (Lit |run#0@@137|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@137|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@137|)) (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@137|)))) (Lit |needle#0@@54|))) (=> (not (U_2_bool (Lit (bool_2_U (Lexicographic__Byte__Order.__default.lt (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@137|)))) (Lit |needle#0@@54|)))))) (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@137|)) (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@137|))) (Lit |needle#0@@54|)))))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted5)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted5)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted5) MoreFuel_Lexicographic_Byte_Order._default.IsSorted5)) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@448) (Lit |run#0@@137|) (Lit |needle#0@@54|)) (ite (= (|Seq#Length| (Lit |run#0@@137|)) (LitInt 0)) 0 (ite (Lexicographic__Byte__Order.__default.lt (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@137|)))) (Lit |needle#0@@54|)) (|Seq#Length| (Lit |run#0@@137|)) (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@448) (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@137|))) (Lit |needle#0@@54|)))))))) :qid |totalorderidfyLexicographicByteOrder.392:12| :weight 3 :skolemid |3662| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@448) (Lit |run#0@@137|) (Lit |needle#0@@54|))) ))))
(assert (forall (($ly@@449 T@U) (|s#0@@224| T@U) (|key#0@@92| T@U) (|lo#0@@13| Int) (|hi#0@@13| Int) ) (!  (=> (and (and (= (type $ly@@449) LayerTypeType) (= (type |s#0@@224|) (SeqType BoxType))) (= (type |key#0@@92|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@449) |s#0@@224| |key#0@@92| |lo#0@@13| |hi#0@@13|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@449 |s#0@@224| |key#0@@92| |lo#0@@13| |hi#0@@13|))) :qid |totalorderidfyLexicographicByteOrder.423:12| :skolemid |3663| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@449) |s#0@@224| |key#0@@92| |lo#0@@13| |hi#0@@13|)) )))
(assert (forall (($ly@@450 T@U) (|s#0@@225| T@U) (|key#0@@93| T@U) (|lo#0@@14| Int) (|hi#0@@14| Int) ) (!  (=> (and (and (= (type $ly@@450) LayerTypeType) (= (type |s#0@@225|) (SeqType BoxType))) (= (type |key#0@@93|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@450 |s#0@@225| |key#0@@93| |lo#0@@14| |hi#0@@14|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $LZ |s#0@@225| |key#0@@93| |lo#0@@14| |hi#0@@14|))) :qid |totalorderidfyLexicographicByteOrder.423:12| :skolemid |3664| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter (AsFuelBottom $ly@@450) |s#0@@225| |key#0@@93| |lo#0@@14| |hi#0@@14|)) )))
(assert  (=> true (forall (($ly@@451 T@U) (|s#0@@226| T@U) (|key#0@@94| T@U) (|lo#0@@15| Int) (|hi#0@@15| Int) ) (!  (=> (and (and (and (= (type $ly@@451) LayerTypeType) (= (type |s#0@@226|) (SeqType BoxType))) (= (type |key#0@@94|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@226| |key#0@@94| |lo#0@@15| |hi#0@@15|) (and (and ($Is |s#0@@226| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@94| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) |lo#0@@15|) (< |lo#0@@15| |hi#0@@15|)) (<= |hi#0@@15| (+ (|Seq#Length| |s#0@@226|) 1))) (=> (> |lo#0@@15| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@226| (- |lo#0@@15| 1))) |key#0@@94|))) (=> (<= |hi#0@@15| (|Seq#Length| |s#0@@226|)) (Lexicographic__Byte__Order.__default.lte |key#0@@94| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@226| (- |hi#0@@15| 1))))))))) (and (and (and (<= (LitInt 0) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@451 |s#0@@226| |key#0@@94| |lo#0@@15| |hi#0@@15|)) (<= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@451 |s#0@@226| |key#0@@94| |lo#0@@15| |hi#0@@15|) (|Seq#Length| |s#0@@226|))) (=> (> (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@451 |s#0@@226| |key#0@@94| |lo#0@@15| |hi#0@@15|) 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@226| (- (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@451 |s#0@@226| |key#0@@94| |lo#0@@15| |hi#0@@15|) 1))) |key#0@@94|))) (=> (< (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@451 |s#0@@226| |key#0@@94| |lo#0@@15| |hi#0@@15|) (|Seq#Length| |s#0@@226|)) (Lexicographic__Byte__Order.__default.lte |key#0@@94| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@226| (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@451 |s#0@@226| |key#0@@94| |lo#0@@15| |hi#0@@15|))))))) :qid |totalorderidfyLexicographicByteOrder.423:12| :skolemid |3665| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@451 |s#0@@226| |key#0@@94| |lo#0@@15| |hi#0@@15|)) ))))
(assert (forall (($ly@@452 T@U) (|s#0@@227| T@U) (|key#0@@95| T@U) (|lo#0@@16| Int) (|hi#0@@16| Int) ) (!  (=> (and (and (and (= (type $ly@@452) LayerTypeType) (= (type |s#0@@227|) (SeqType BoxType))) (= (type |key#0@@95|) (SeqType BoxType))) (and ($Is |s#0@@227| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@95| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@452 |s#0@@227| |key#0@@95| |lo#0@@16| |hi#0@@16|)  (and (and (and (and (<= (LitInt 0) |lo#0@@16|) (< |lo#0@@16| |hi#0@@16|)) (<= |hi#0@@16| (+ (|Seq#Length| |s#0@@227|) 1))) (=> (> |lo#0@@16| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@227| (- |lo#0@@16| 1))) |key#0@@95|))) (=> (<= |hi#0@@16| (|Seq#Length| |s#0@@227|)) (Lexicographic__Byte__Order.__default.lte |key#0@@95| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@227| (- |hi#0@@16| 1)))))))) :qid |totalorderidfyLexicographicByteOrder.423:12| :skolemid |3666| :pattern ( (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@452 |s#0@@227| |key#0@@95| |lo#0@@16| |hi#0@@16|)) )))
(assert  (=> true (forall (($ly@@453 T@U) (|s#0@@228| T@U) (|key#0@@96| T@U) (|lo#0@@17| Int) (|hi#0@@17| Int) ) (!  (=> (and (and (and (= (type $ly@@453) LayerTypeType) (= (type |s#0@@228|) (SeqType BoxType))) (= (type |key#0@@96|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@228| |key#0@@96| |lo#0@@17| |hi#0@@17|) (and (and ($Is |s#0@@228| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@96| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) |lo#0@@17|) (< |lo#0@@17| |hi#0@@17|)) (<= |hi#0@@17| (+ (|Seq#Length| |s#0@@228|) 1))) (=> (> |lo#0@@17| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@228| (- |lo#0@@17| 1))) |key#0@@96|))) (=> (<= |hi#0@@17| (|Seq#Length| |s#0@@228|)) (Lexicographic__Byte__Order.__default.lte |key#0@@96| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@228| (- |hi#0@@17| 1))))))))) (and (=> (< (+ |lo#0@@17| 1) |hi#0@@17|) (let ((|mid#0@@3| (Div (+ |lo#0@@17| |hi#0@@17|) (LitInt 2)))) (and (and (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@228| (- |mid#0@@3| 1))) |key#0@@96|) (=> (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@228| (- |mid#0@@3| 1))) |key#0@@96|) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@228| |key#0@@96| |mid#0@@3| |hi#0@@17|))) (=> (not (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@228| (- |mid#0@@3| 1))) |key#0@@96|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@228| |key#0@@96| |lo#0@@17| |mid#0@@3|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@453) |s#0@@228| |key#0@@96| |lo#0@@17| |hi#0@@17|) (ite (< (+ |lo#0@@17| 1) |hi#0@@17|) (let ((|mid#0@@4| (Div (+ |lo#0@@17| |hi#0@@17|) (LitInt 2)))) (ite (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@228| (- |mid#0@@4| 1))) |key#0@@96|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@453 |s#0@@228| |key#0@@96| |mid#0@@4| |hi#0@@17|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@453 |s#0@@228| |key#0@@96| |lo#0@@17| |mid#0@@4|))) |lo#0@@17|)))) :qid |totalorderidfyLexicographicByteOrder.423:12| :skolemid |3667| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@453) |s#0@@228| |key#0@@96| |lo#0@@17| |hi#0@@17|)) ))))
(assert  (=> true (forall (($ly@@454 T@U) (|s#0@@229| T@U) (|key#0@@97| T@U) (|lo#0@@18| Int) (|hi#0@@18| Int) ) (!  (=> (and (and (and (= (type $ly@@454) LayerTypeType) (= (type |s#0@@229|) (SeqType BoxType))) (= (type |key#0@@97|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@229| |key#0@@97| (LitInt |lo#0@@18|) (LitInt |hi#0@@18|)) (and (and ($Is |s#0@@229| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@97| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@18|)) (< |lo#0@@18| |hi#0@@18|)) (<= (LitInt |hi#0@@18|) (+ (|Seq#Length| |s#0@@229|) 1))) (=> (> |lo#0@@18| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@229| (LitInt (- |lo#0@@18| 1)))) |key#0@@97|))) (=> (<= (LitInt |hi#0@@18|) (|Seq#Length| |s#0@@229|)) (Lexicographic__Byte__Order.__default.lte |key#0@@97| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@229| (LitInt (- |hi#0@@18| 1)))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@18| 1) |hi#0@@18|)))) (let ((|mid#1@@3| (LitInt (Div (+ |lo#0@@18| |hi#0@@18|) (LitInt 2))))) (and (and (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@229| (- |mid#1@@3| 1))) |key#0@@97|) (=> (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@229| (- |mid#1@@3| 1))) |key#0@@97|) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@229| |key#0@@97| |mid#1@@3| (LitInt |hi#0@@18|)))) (=> (not (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@229| (- |mid#1@@3| 1))) |key#0@@97|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@229| |key#0@@97| (LitInt |lo#0@@18|) |mid#1@@3|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@454) |s#0@@229| |key#0@@97| (LitInt |lo#0@@18|) (LitInt |hi#0@@18|)) (ite (< (+ |lo#0@@18| 1) |hi#0@@18|) (let ((|mid#1@@4| (LitInt (Div (+ |lo#0@@18| |hi#0@@18|) (LitInt 2))))) (ite (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@229| (LitInt (- |mid#1@@4| 1)))) |key#0@@97|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@454) |s#0@@229| |key#0@@97| |mid#1@@4| (LitInt |hi#0@@18|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@454) |s#0@@229| |key#0@@97| (LitInt |lo#0@@18|) |mid#1@@4|))) |lo#0@@18|)))) :qid |totalorderidfyLexicographicByteOrder.423:12| :weight 3 :skolemid |3668| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@454) |s#0@@229| |key#0@@97| (LitInt |lo#0@@18|) (LitInt |hi#0@@18|))) ))))
(assert  (=> true (forall (($ly@@455 T@U) (|s#0@@230| T@U) (|key#0@@98| T@U) (|lo#0@@19| Int) (|hi#0@@19| Int) ) (!  (=> (and (and (and (= (type $ly@@455) LayerTypeType) (= (type |s#0@@230|) (SeqType BoxType))) (= (type |key#0@@98|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@230|) (Lit |key#0@@98|) (LitInt |lo#0@@19|) (LitInt |hi#0@@19|)) (and (and ($Is |s#0@@230| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@98| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@19|)) (< |lo#0@@19| |hi#0@@19|)) (<= (LitInt |hi#0@@19|) (+ (|Seq#Length| (Lit |s#0@@230|)) 1))) (=> (> |lo#0@@19| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@230|) (LitInt (- |lo#0@@19| 1)))) (Lit |key#0@@98|)))) (=> (<= (LitInt |hi#0@@19|) (|Seq#Length| (Lit |s#0@@230|))) (Lexicographic__Byte__Order.__default.lte (Lit |key#0@@98|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@230|) (LitInt (- |hi#0@@19| 1)))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@19| 1) |hi#0@@19|)))) (let ((|mid#2@@3| (LitInt (Div (+ |lo#0@@19| |hi#0@@19|) (LitInt 2))))) (and (and (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@230|) (- |mid#2@@3| 1))) (Lit |key#0@@98|)) (=> (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@230|) (- |mid#2@@3| 1))) (Lit |key#0@@98|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@230|) (Lit |key#0@@98|) |mid#2@@3| (LitInt |hi#0@@19|)))) (=> (not (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@230|) (- |mid#2@@3| 1))) (Lit |key#0@@98|))) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@230|) (Lit |key#0@@98|) (LitInt |lo#0@@19|) |mid#2@@3|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@455) (Lit |s#0@@230|) (Lit |key#0@@98|) (LitInt |lo#0@@19|) (LitInt |hi#0@@19|)) (ite (< (+ |lo#0@@19| 1) |hi#0@@19|) (let ((|mid#2@@4| (LitInt (Div (+ |lo#0@@19| |hi#0@@19|) (LitInt 2))))) (ite (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@230|) (LitInt (- |mid#2@@4| 1)))) (Lit |key#0@@98|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@455) (Lit |s#0@@230|) (Lit |key#0@@98|) |mid#2@@4| (LitInt |hi#0@@19|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@455) (Lit |s#0@@230|) (Lit |key#0@@98|) (LitInt |lo#0@@19|) |mid#2@@4|))) |lo#0@@19|)))) :qid |totalorderidfyLexicographicByteOrder.423:12| :weight 3 :skolemid |3669| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@455) (Lit |s#0@@230|) (Lit |key#0@@98|) (LitInt |lo#0@@19|) (LitInt |hi#0@@19|))) ))))
(assert (forall (($ly@@456 T@U) (|s#0@@231| T@U) (|key#0@@99| T@U) ) (!  (=> (and (and (= (type $ly@@456) LayerTypeType) (= (type |s#0@@231|) (SeqType BoxType))) (= (type |key#0@@99|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@456) |s#0@@231| |key#0@@99|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@456 |s#0@@231| |key#0@@99|))) :qid |totalorderidfyLexicographicByteOrder.443:22| :skolemid |3670| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@456) |s#0@@231| |key#0@@99|)) )))
(assert (forall (($ly@@457 T@U) (|s#0@@232| T@U) (|key#0@@100| T@U) ) (!  (=> (and (and (= (type $ly@@457) LayerTypeType) (= (type |s#0@@232|) (SeqType BoxType))) (= (type |key#0@@100|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@457 |s#0@@232| |key#0@@100|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $LZ |s#0@@232| |key#0@@100|))) :qid |totalorderidfyLexicographicByteOrder.443:22| :skolemid |3671| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte (AsFuelBottom $ly@@457) |s#0@@232| |key#0@@100|)) )))
(assert  (=> true (forall (($ly@@458 T@U) (|s#0@@233| T@U) (|key#0@@101| T@U) ) (!  (=> (and (and (and (= (type $ly@@458) LayerTypeType) (= (type |s#0@@233|) (SeqType BoxType))) (= (type |key#0@@101|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@233| |key#0@@101|) (and ($Is |s#0@@233| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@101| (TSeq Tclass.NativeTypes.byte))))) (and (and (and (<= (LitInt 0) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@458 |s#0@@233| |key#0@@101|)) (<= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@458 |s#0@@233| |key#0@@101|) (|Seq#Length| |s#0@@233|))) (=> (> (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@458 |s#0@@233| |key#0@@101|) 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@233| (- (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@458 |s#0@@233| |key#0@@101|) 1))) |key#0@@101|))) (=> (< (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@458 |s#0@@233| |key#0@@101|) (|Seq#Length| |s#0@@233|)) (Lexicographic__Byte__Order.__default.lte |key#0@@101| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@233| (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@458 |s#0@@233| |key#0@@101|))))))) :qid |totalorderidfyLexicographicByteOrder.443:22| :skolemid |3672| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@458 |s#0@@233| |key#0@@101|)) ))))
(assert (forall (($ly@@459 T@U) (|s#0@@234| T@U) (|key#0@@102| T@U) ) (!  (=> (and (and (and (= (type $ly@@459) LayerTypeType) (= (type |s#0@@234|) (SeqType BoxType))) (= (type |key#0@@102|) (SeqType BoxType))) (and ($Is |s#0@@234| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@102| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@459 |s#0@@234| |key#0@@102|) true)) :qid |totalorderidfyLexicographicByteOrder.443:22| :skolemid |3673| :pattern ( (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@459 |s#0@@234| |key#0@@102|)) )))
(assert  (=> true (forall (($ly@@460 T@U) (|s#0@@235| T@U) (|key#0@@103| T@U) ) (!  (=> (and (and (and (= (type $ly@@460) LayerTypeType) (= (type |s#0@@235|) (SeqType BoxType))) (= (type |key#0@@103|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@235| |key#0@@103|) (and ($Is |s#0@@235| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@103| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@235| |key#0@@103| (LitInt 0) (+ (|Seq#Length| |s#0@@235|) 1)) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@460) |s#0@@235| |key#0@@103|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) |s#0@@235| |key#0@@103| (LitInt 0) (+ (|Seq#Length| |s#0@@235|) 1))))) :qid |totalorderidfyLexicographicByteOrder.443:22| :skolemid |3674| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@460) |s#0@@235| |key#0@@103|)) ))))
(assert  (=> true (forall (($ly@@461 T@U) (|s#0@@236| T@U) (|key#0@@104| T@U) ) (!  (=> (and (and (and (= (type $ly@@461) LayerTypeType) (= (type |s#0@@236|) (SeqType BoxType))) (= (type |key#0@@104|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (Lit |s#0@@236|) (Lit |key#0@@104|)) (and ($Is |s#0@@236| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@104| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@236|) (Lit |key#0@@104|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@236|)) 1)) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@461) (Lit |s#0@@236|) (Lit |key#0@@104|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) (Lit |s#0@@236|) (Lit |key#0@@104|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@236|)) 1))))) :qid |totalorderidfyLexicographicByteOrder.443:22| :weight 3 :skolemid |3675| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@461) (Lit |s#0@@236|) (Lit |key#0@@104|))) ))))
(assert (forall (($ly@@462 T@U) (|run#0@@138| T@U) (|needle#0@@55| T@U) ) (!  (=> (and (and (= (type $ly@@462) LayerTypeType) (= (type |run#0@@138|) (SeqType BoxType))) (= (type |needle#0@@55|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@462) |run#0@@138| |needle#0@@55|) (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@462 |run#0@@138| |needle#0@@55|))) :qid |totalorderidfyLexicographicByteOrder.451:12| :skolemid |3676| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@462) |run#0@@138| |needle#0@@55|)) )))
(assert (forall (($ly@@463 T@U) (|run#0@@139| T@U) (|needle#0@@56| T@U) ) (!  (=> (and (and (= (type $ly@@463) LayerTypeType) (= (type |run#0@@139|) (SeqType BoxType))) (= (type |needle#0@@56|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@463 |run#0@@139| |needle#0@@56|) (Lexicographic__Byte__Order.__default.IndexOfFirstGt $LZ |run#0@@139| |needle#0@@56|))) :qid |totalorderidfyLexicographicByteOrder.451:12| :skolemid |3677| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGt (AsFuelBottom $ly@@463) |run#0@@139| |needle#0@@56|)) )))
(assert  (=> true (forall (($ly@@464 T@U) (|run#0@@140| T@U) (|needle#0@@57| T@U) ) (!  (=> (and (and (and (= (type $ly@@464) LayerTypeType) (= (type |run#0@@140|) (SeqType BoxType))) (= (type |needle#0@@57|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| |run#0@@140| |needle#0@@57|) (and (and ($Is |run#0@@140| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@57| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@140|)))) (and (and (and (<= (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@464 |run#0@@140| |needle#0@@57|) (|Seq#Length| |run#0@@140|)) (forall ((|i#0@@114| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@114|) (< |i#0@@114| (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@464 |run#0@@140| |needle#0@@57|))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#0@@114|)) |needle#0@@57|)) :qid |totalorderidfyLexicographicByteOrder.454:20| :skolemid |3678| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#0@@114|))) ))) (forall ((|i#1@@41| Int) ) (!  (=> (and (<= (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@464 |run#0@@140| |needle#0@@57|) |i#1@@41|) (< |i#1@@41| (|Seq#Length| |run#0@@140|))) (Lexicographic__Byte__Order.__default.lt |needle#0@@57| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#1@@41|)))) :qid |totalorderidfyLexicographicByteOrder.455:20| :skolemid |3679| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#1@@41|))) ))) (<= (LitInt 0) (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@464 |run#0@@140| |needle#0@@57|)))) :qid |totalorderidfyLexicographicByteOrder.451:12| :skolemid |3680| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@464 |run#0@@140| |needle#0@@57|)) ))))
(assert (forall (($ly@@465 T@U) (|run#0@@141| T@U) (|needle#0@@58| T@U) ) (!  (=> (and (and (and (= (type $ly@@465) LayerTypeType) (= (type |run#0@@141|) (SeqType BoxType))) (= (type |needle#0@@58|) (SeqType BoxType))) (and ($Is |run#0@@141| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@58| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#requires| $ly@@465 |run#0@@141| |needle#0@@58|) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@141|))) :qid |totalorderidfyLexicographicByteOrder.451:12| :skolemid |3681| :pattern ( (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#requires| $ly@@465 |run#0@@141| |needle#0@@58|)) )))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted6) LayerTypeType))
(assert  (=> true (forall (($ly@@466 T@U) (|run#0@@142| T@U) (|needle#0@@59| T@U) ) (!  (=> (and (and (and (= (type $ly@@466) LayerTypeType) (= (type |run#0@@142|) (SeqType BoxType))) (= (type |needle#0@@59|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| |run#0@@142| |needle#0@@59|) (and (and ($Is |run#0@@142| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@59| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@142|)))) (and (=> (not (= (|Seq#Length| |run#0@@142|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) |run#0@@142|) (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@142|)) |needle#0@@59|)) (=> (not (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@142|)) |needle#0@@59|)) (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) |run#0@@142|) (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |run#0@@142|) |needle#0@@59|))))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted6)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted6)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted6) MoreFuel_Lexicographic_Byte_Order._default.IsSorted6)) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@466) |run#0@@142| |needle#0@@59|) (ite (= (|Seq#Length| |run#0@@142|) (LitInt 0)) 0 (ite (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@142|)) |needle#0@@59|) (|Seq#Length| |run#0@@142|) (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@466 (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |run#0@@142|) |needle#0@@59|))))))) :qid |totalorderidfyLexicographicByteOrder.451:12| :skolemid |3682| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@466) |run#0@@142| |needle#0@@59|)) ))))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted7) LayerTypeType))
(assert  (=> true (forall (($ly@@467 T@U) (|run#0@@143| T@U) (|needle#0@@60| T@U) ) (!  (=> (and (and (and (= (type $ly@@467) LayerTypeType) (= (type |run#0@@143|) (SeqType BoxType))) (= (type |needle#0@@60|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| (Lit |run#0@@143|) (Lit |needle#0@@60|)) (and (and ($Is |run#0@@143| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@60| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted (Lit |run#0@@143|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@143|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@143|)) (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@143|)))) (Lit |needle#0@@60|))) (=> (not (U_2_bool (Lit (bool_2_U (Lexicographic__Byte__Order.__default.lte (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@143|)))) (Lit |needle#0@@60|)))))) (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@143|)) (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@143|))) (Lit |needle#0@@60|)))))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted7)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted7)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted7) MoreFuel_Lexicographic_Byte_Order._default.IsSorted7)) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@467) (Lit |run#0@@143|) (Lit |needle#0@@60|)) (ite (= (|Seq#Length| (Lit |run#0@@143|)) (LitInt 0)) 0 (ite (Lexicographic__Byte__Order.__default.lte (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@143|)))) (Lit |needle#0@@60|)) (|Seq#Length| (Lit |run#0@@143|)) (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@467) (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@143|))) (Lit |needle#0@@60|)))))))) :qid |totalorderidfyLexicographicByteOrder.451:12| :weight 3 :skolemid |3683| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@467) (Lit |run#0@@143|) (Lit |needle#0@@60|))) ))))
(assert (forall (($ly@@468 T@U) (|s#0@@237| T@U) (|key#0@@105| T@U) (|lo#0@@20| Int) (|hi#0@@20| Int) ) (!  (=> (and (and (= (type $ly@@468) LayerTypeType) (= (type |s#0@@237|) (SeqType BoxType))) (= (type |key#0@@105|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@468) |s#0@@237| |key#0@@105| |lo#0@@20| |hi#0@@20|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@468 |s#0@@237| |key#0@@105| |lo#0@@20| |hi#0@@20|))) :qid |totalorderidfyLexicographicByteOrder.482:12| :skolemid |3684| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@468) |s#0@@237| |key#0@@105| |lo#0@@20| |hi#0@@20|)) )))
(assert (forall (($ly@@469 T@U) (|s#0@@238| T@U) (|key#0@@106| T@U) (|lo#0@@21| Int) (|hi#0@@21| Int) ) (!  (=> (and (and (= (type $ly@@469) LayerTypeType) (= (type |s#0@@238|) (SeqType BoxType))) (= (type |key#0@@106|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@469 |s#0@@238| |key#0@@106| |lo#0@@21| |hi#0@@21|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $LZ |s#0@@238| |key#0@@106| |lo#0@@21| |hi#0@@21|))) :qid |totalorderidfyLexicographicByteOrder.482:12| :skolemid |3685| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter (AsFuelBottom $ly@@469) |s#0@@238| |key#0@@106| |lo#0@@21| |hi#0@@21|)) )))
(assert  (=> true (forall (($ly@@470 T@U) (|s#0@@239| T@U) (|key#0@@107| T@U) (|lo#0@@22| Int) (|hi#0@@22| Int) ) (!  (=> (and (and (and (= (type $ly@@470) LayerTypeType) (= (type |s#0@@239|) (SeqType BoxType))) (= (type |key#0@@107|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@239| |key#0@@107| |lo#0@@22| |hi#0@@22|) (and (and ($Is |s#0@@239| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@107| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) |lo#0@@22|) (< |lo#0@@22| |hi#0@@22|)) (<= |hi#0@@22| (+ (|Seq#Length| |s#0@@239|) 1))) (=> (> |lo#0@@22| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@239| (- |lo#0@@22| 1))) |key#0@@107|))) (=> (<= |hi#0@@22| (|Seq#Length| |s#0@@239|)) (Lexicographic__Byte__Order.__default.lt |key#0@@107| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@239| (- |hi#0@@22| 1))))))))) (and (and (and (<= (LitInt 0) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@470 |s#0@@239| |key#0@@107| |lo#0@@22| |hi#0@@22|)) (<= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@470 |s#0@@239| |key#0@@107| |lo#0@@22| |hi#0@@22|) (|Seq#Length| |s#0@@239|))) (=> (> (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@470 |s#0@@239| |key#0@@107| |lo#0@@22| |hi#0@@22|) 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@239| (- (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@470 |s#0@@239| |key#0@@107| |lo#0@@22| |hi#0@@22|) 1))) |key#0@@107|))) (=> (< (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@470 |s#0@@239| |key#0@@107| |lo#0@@22| |hi#0@@22|) (|Seq#Length| |s#0@@239|)) (Lexicographic__Byte__Order.__default.lt |key#0@@107| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@239| (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@470 |s#0@@239| |key#0@@107| |lo#0@@22| |hi#0@@22|))))))) :qid |totalorderidfyLexicographicByteOrder.482:12| :skolemid |3686| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@470 |s#0@@239| |key#0@@107| |lo#0@@22| |hi#0@@22|)) ))))
(assert (forall (($ly@@471 T@U) (|s#0@@240| T@U) (|key#0@@108| T@U) (|lo#0@@23| Int) (|hi#0@@23| Int) ) (!  (=> (and (and (and (= (type $ly@@471) LayerTypeType) (= (type |s#0@@240|) (SeqType BoxType))) (= (type |key#0@@108|) (SeqType BoxType))) (and ($Is |s#0@@240| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@108| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@471 |s#0@@240| |key#0@@108| |lo#0@@23| |hi#0@@23|)  (and (and (and (and (<= (LitInt 0) |lo#0@@23|) (< |lo#0@@23| |hi#0@@23|)) (<= |hi#0@@23| (+ (|Seq#Length| |s#0@@240|) 1))) (=> (> |lo#0@@23| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@240| (- |lo#0@@23| 1))) |key#0@@108|))) (=> (<= |hi#0@@23| (|Seq#Length| |s#0@@240|)) (Lexicographic__Byte__Order.__default.lt |key#0@@108| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@240| (- |hi#0@@23| 1)))))))) :qid |totalorderidfyLexicographicByteOrder.482:12| :skolemid |3687| :pattern ( (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@471 |s#0@@240| |key#0@@108| |lo#0@@23| |hi#0@@23|)) )))
(assert  (=> true (forall (($ly@@472 T@U) (|s#0@@241| T@U) (|key#0@@109| T@U) (|lo#0@@24| Int) (|hi#0@@24| Int) ) (!  (=> (and (and (and (= (type $ly@@472) LayerTypeType) (= (type |s#0@@241|) (SeqType BoxType))) (= (type |key#0@@109|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@241| |key#0@@109| |lo#0@@24| |hi#0@@24|) (and (and ($Is |s#0@@241| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@109| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) |lo#0@@24|) (< |lo#0@@24| |hi#0@@24|)) (<= |hi#0@@24| (+ (|Seq#Length| |s#0@@241|) 1))) (=> (> |lo#0@@24| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@241| (- |lo#0@@24| 1))) |key#0@@109|))) (=> (<= |hi#0@@24| (|Seq#Length| |s#0@@241|)) (Lexicographic__Byte__Order.__default.lt |key#0@@109| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@241| (- |hi#0@@24| 1))))))))) (and (=> (< (+ |lo#0@@24| 1) |hi#0@@24|) (let ((|mid#0@@5| (Div (+ |lo#0@@24| |hi#0@@24|) (LitInt 2)))) (and (and (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@241| (- |mid#0@@5| 1))) |key#0@@109|) (=> (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@241| (- |mid#0@@5| 1))) |key#0@@109|) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@241| |key#0@@109| |mid#0@@5| |hi#0@@24|))) (=> (not (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@241| (- |mid#0@@5| 1))) |key#0@@109|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@241| |key#0@@109| |lo#0@@24| |mid#0@@5|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@472) |s#0@@241| |key#0@@109| |lo#0@@24| |hi#0@@24|) (ite (< (+ |lo#0@@24| 1) |hi#0@@24|) (let ((|mid#0@@6| (Div (+ |lo#0@@24| |hi#0@@24|) (LitInt 2)))) (ite (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@241| (- |mid#0@@6| 1))) |key#0@@109|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@472 |s#0@@241| |key#0@@109| |mid#0@@6| |hi#0@@24|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@472 |s#0@@241| |key#0@@109| |lo#0@@24| |mid#0@@6|))) |lo#0@@24|)))) :qid |totalorderidfyLexicographicByteOrder.482:12| :skolemid |3688| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@472) |s#0@@241| |key#0@@109| |lo#0@@24| |hi#0@@24|)) ))))
(assert  (=> true (forall (($ly@@473 T@U) (|s#0@@242| T@U) (|key#0@@110| T@U) (|lo#0@@25| Int) (|hi#0@@25| Int) ) (!  (=> (and (and (and (= (type $ly@@473) LayerTypeType) (= (type |s#0@@242|) (SeqType BoxType))) (= (type |key#0@@110|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@242| |key#0@@110| (LitInt |lo#0@@25|) (LitInt |hi#0@@25|)) (and (and ($Is |s#0@@242| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@110| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@25|)) (< |lo#0@@25| |hi#0@@25|)) (<= (LitInt |hi#0@@25|) (+ (|Seq#Length| |s#0@@242|) 1))) (=> (> |lo#0@@25| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@242| (LitInt (- |lo#0@@25| 1)))) |key#0@@110|))) (=> (<= (LitInt |hi#0@@25|) (|Seq#Length| |s#0@@242|)) (Lexicographic__Byte__Order.__default.lt |key#0@@110| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@242| (LitInt (- |hi#0@@25| 1)))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@25| 1) |hi#0@@25|)))) (let ((|mid#1@@5| (LitInt (Div (+ |lo#0@@25| |hi#0@@25|) (LitInt 2))))) (and (and (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@242| (- |mid#1@@5| 1))) |key#0@@110|) (=> (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@242| (- |mid#1@@5| 1))) |key#0@@110|) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@242| |key#0@@110| |mid#1@@5| (LitInt |hi#0@@25|)))) (=> (not (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@242| (- |mid#1@@5| 1))) |key#0@@110|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@242| |key#0@@110| (LitInt |lo#0@@25|) |mid#1@@5|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@473) |s#0@@242| |key#0@@110| (LitInt |lo#0@@25|) (LitInt |hi#0@@25|)) (ite (< (+ |lo#0@@25| 1) |hi#0@@25|) (let ((|mid#1@@6| (LitInt (Div (+ |lo#0@@25| |hi#0@@25|) (LitInt 2))))) (ite (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@242| (LitInt (- |mid#1@@6| 1)))) |key#0@@110|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@473) |s#0@@242| |key#0@@110| |mid#1@@6| (LitInt |hi#0@@25|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@473) |s#0@@242| |key#0@@110| (LitInt |lo#0@@25|) |mid#1@@6|))) |lo#0@@25|)))) :qid |totalorderidfyLexicographicByteOrder.482:12| :weight 3 :skolemid |3689| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@473) |s#0@@242| |key#0@@110| (LitInt |lo#0@@25|) (LitInt |hi#0@@25|))) ))))
(assert  (=> true (forall (($ly@@474 T@U) (|s#0@@243| T@U) (|key#0@@111| T@U) (|lo#0@@26| Int) (|hi#0@@26| Int) ) (!  (=> (and (and (and (= (type $ly@@474) LayerTypeType) (= (type |s#0@@243|) (SeqType BoxType))) (= (type |key#0@@111|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@243|) (Lit |key#0@@111|) (LitInt |lo#0@@26|) (LitInt |hi#0@@26|)) (and (and ($Is |s#0@@243| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@111| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@26|)) (< |lo#0@@26| |hi#0@@26|)) (<= (LitInt |hi#0@@26|) (+ (|Seq#Length| (Lit |s#0@@243|)) 1))) (=> (> |lo#0@@26| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@243|) (LitInt (- |lo#0@@26| 1)))) (Lit |key#0@@111|)))) (=> (<= (LitInt |hi#0@@26|) (|Seq#Length| (Lit |s#0@@243|))) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@111|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@243|) (LitInt (- |hi#0@@26| 1)))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@26| 1) |hi#0@@26|)))) (let ((|mid#2@@5| (LitInt (Div (+ |lo#0@@26| |hi#0@@26|) (LitInt 2))))) (and (and (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@243|) (- |mid#2@@5| 1))) (Lit |key#0@@111|)) (=> (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@243|) (- |mid#2@@5| 1))) (Lit |key#0@@111|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@243|) (Lit |key#0@@111|) |mid#2@@5| (LitInt |hi#0@@26|)))) (=> (not (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@243|) (- |mid#2@@5| 1))) (Lit |key#0@@111|))) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@243|) (Lit |key#0@@111|) (LitInt |lo#0@@26|) |mid#2@@5|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@474) (Lit |s#0@@243|) (Lit |key#0@@111|) (LitInt |lo#0@@26|) (LitInt |hi#0@@26|)) (ite (< (+ |lo#0@@26| 1) |hi#0@@26|) (let ((|mid#2@@6| (LitInt (Div (+ |lo#0@@26| |hi#0@@26|) (LitInt 2))))) (ite (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@243|) (LitInt (- |mid#2@@6| 1)))) (Lit |key#0@@111|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@474) (Lit |s#0@@243|) (Lit |key#0@@111|) |mid#2@@6| (LitInt |hi#0@@26|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@474) (Lit |s#0@@243|) (Lit |key#0@@111|) (LitInt |lo#0@@26|) |mid#2@@6|))) |lo#0@@26|)))) :qid |totalorderidfyLexicographicByteOrder.482:12| :weight 3 :skolemid |3690| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@474) (Lit |s#0@@243|) (Lit |key#0@@111|) (LitInt |lo#0@@26|) (LitInt |hi#0@@26|))) ))))
(assert (forall (($ly@@475 T@U) (|s#0@@244| T@U) (|key#0@@112| T@U) ) (!  (=> (and (and (= (type $ly@@475) LayerTypeType) (= (type |s#0@@244|) (SeqType BoxType))) (= (type |key#0@@112|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@475) |s#0@@244| |key#0@@112|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@475 |s#0@@244| |key#0@@112|))) :qid |totalorderidfyLexicographicByteOrder.502:22| :skolemid |3691| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@475) |s#0@@244| |key#0@@112|)) )))
(assert (forall (($ly@@476 T@U) (|s#0@@245| T@U) (|key#0@@113| T@U) ) (!  (=> (and (and (= (type $ly@@476) LayerTypeType) (= (type |s#0@@245|) (SeqType BoxType))) (= (type |key#0@@113|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@476 |s#0@@245| |key#0@@113|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $LZ |s#0@@245| |key#0@@113|))) :qid |totalorderidfyLexicographicByteOrder.502:22| :skolemid |3692| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt (AsFuelBottom $ly@@476) |s#0@@245| |key#0@@113|)) )))
(assert  (=> true (forall (($ly@@477 T@U) (|s#0@@246| T@U) (|key#0@@114| T@U) ) (!  (=> (and (and (and (= (type $ly@@477) LayerTypeType) (= (type |s#0@@246|) (SeqType BoxType))) (= (type |key#0@@114|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@246| |key#0@@114|) (and ($Is |s#0@@246| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@114| (TSeq Tclass.NativeTypes.byte))))) (and (and (and (<= (LitInt 0) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@477 |s#0@@246| |key#0@@114|)) (<= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@477 |s#0@@246| |key#0@@114|) (|Seq#Length| |s#0@@246|))) (=> (> (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@477 |s#0@@246| |key#0@@114|) 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@246| (- (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@477 |s#0@@246| |key#0@@114|) 1))) |key#0@@114|))) (=> (< (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@477 |s#0@@246| |key#0@@114|) (|Seq#Length| |s#0@@246|)) (Lexicographic__Byte__Order.__default.lt |key#0@@114| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@246| (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@477 |s#0@@246| |key#0@@114|))))))) :qid |totalorderidfyLexicographicByteOrder.502:22| :skolemid |3693| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@477 |s#0@@246| |key#0@@114|)) ))))
(assert (forall (($ly@@478 T@U) (|s#0@@247| T@U) (|key#0@@115| T@U) ) (!  (=> (and (and (and (= (type $ly@@478) LayerTypeType) (= (type |s#0@@247|) (SeqType BoxType))) (= (type |key#0@@115|) (SeqType BoxType))) (and ($Is |s#0@@247| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@115| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@478 |s#0@@247| |key#0@@115|) true)) :qid |totalorderidfyLexicographicByteOrder.502:22| :skolemid |3694| :pattern ( (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@478 |s#0@@247| |key#0@@115|)) )))
(assert  (=> true (forall (($ly@@479 T@U) (|s#0@@248| T@U) (|key#0@@116| T@U) ) (!  (=> (and (and (and (= (type $ly@@479) LayerTypeType) (= (type |s#0@@248|) (SeqType BoxType))) (= (type |key#0@@116|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@248| |key#0@@116|) (and ($Is |s#0@@248| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@116| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@248| |key#0@@116| (LitInt 0) (+ (|Seq#Length| |s#0@@248|) 1)) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@479) |s#0@@248| |key#0@@116|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) |s#0@@248| |key#0@@116| (LitInt 0) (+ (|Seq#Length| |s#0@@248|) 1))))) :qid |totalorderidfyLexicographicByteOrder.502:22| :skolemid |3695| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@479) |s#0@@248| |key#0@@116|)) ))))
(assert  (=> true (forall (($ly@@480 T@U) (|s#0@@249| T@U) (|key#0@@117| T@U) ) (!  (=> (and (and (and (= (type $ly@@480) LayerTypeType) (= (type |s#0@@249|) (SeqType BoxType))) (= (type |key#0@@117|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (Lit |s#0@@249|) (Lit |key#0@@117|)) (and ($Is |s#0@@249| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@117| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@249|) (Lit |key#0@@117|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@249|)) 1)) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@480) (Lit |s#0@@249|) (Lit |key#0@@117|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) (Lit |s#0@@249|) (Lit |key#0@@117|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@249|)) 1))))) :qid |totalorderidfyLexicographicByteOrder.502:22| :weight 3 :skolemid |3696| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@480) (Lit |s#0@@249|) (Lit |key#0@@117|))) ))))
(assert  (=> true (forall ((|a#0@@143| T@U) (|b#0@@102| T@U) ) (!  (=> (and (and (= (type |a#0@@143|) (MapType0Type BoxType boolType)) (= (type |b#0@@102|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLte#canCall| |a#0@@143| |b#0@@102|) (and ($Is |a#0@@143| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@102| (TSet (TSeq Tclass.NativeTypes.byte)))))) true) :qid |totalorderidfyLexicographicByteOrder.658:23| :skolemid |3697| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLte |a#0@@143| |b#0@@102|)) ))))
(assert (forall ((|a#0@@144| T@U) (|b#0@@103| T@U) ) (!  (=> (and (and (= (type |a#0@@144|) (MapType0Type BoxType boolType)) (= (type |b#0@@103|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@144| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@103| (TSet (TSeq Tclass.NativeTypes.byte))))) (= (|Lexicographic__Byte__Order.__default.SetAllLte#requires| |a#0@@144| |b#0@@103|) true)) :qid |totalorderidfyLexicographicByteOrder.658:23| :skolemid |3698| :pattern ( (|Lexicographic__Byte__Order.__default.SetAllLte#requires| |a#0@@144| |b#0@@103|)) )))
(assert  (=> true (forall ((|a#0@@145| T@U) (|b#0@@104| T@U) ) (!  (=> (and (and (= (type |a#0@@145|) (MapType0Type BoxType boolType)) (= (type |b#0@@104|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLte#canCall| |a#0@@145| |b#0@@104|) (and ($Is |a#0@@145| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@104| (TSet (TSeq Tclass.NativeTypes.byte)))))) (and (forall ((|x#0@@6| T@U) (|y#0@@7| T@U) ) (!  (=> (and (and (and (and (= (type |x#0@@6|) (SeqType BoxType)) (= (type |y#0@@7|) (SeqType BoxType))) (and ($Is |x#0@@6| (TSeq Tclass.NativeTypes.byte)) ($Is |y#0@@7| (TSeq Tclass.NativeTypes.byte)))) (U_2_bool (MapType0Select |a#0@@145| ($Box |x#0@@6|)))) (U_2_bool (MapType0Select |b#0@@104| ($Box |y#0@@7|)))) (|Lexicographic__Byte__Order.__default.lte#canCall| |x#0@@6| |y#0@@7|)) :qid |totalorderidfyLexicographicByteOrder.659:12| :skolemid |3700| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#0@@6| |y#0@@7|)) :pattern ( (MapType0Select |b#0@@104| ($Box |y#0@@7|)) (MapType0Select |a#0@@145| ($Box |x#0@@6|))) )) (= (Lexicographic__Byte__Order.__default.SetAllLte |a#0@@145| |b#0@@104|) (forall ((|x#0@@7| T@U) (|y#0@@8| T@U) ) (!  (=> (and (and (and (= (type |x#0@@7|) (SeqType BoxType)) (= (type |y#0@@8|) (SeqType BoxType))) (and ($Is |x#0@@7| (TSeq Tclass.NativeTypes.byte)) ($Is |y#0@@8| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select |a#0@@145| ($Box |x#0@@7|))) (U_2_bool (MapType0Select |b#0@@104| ($Box |y#0@@8|))))) (Lexicographic__Byte__Order.__default.lte |x#0@@7| |y#0@@8|)) :qid |totalorderidfyLexicographicByteOrder.659:12| :skolemid |3699| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#0@@7| |y#0@@8|)) :pattern ( (MapType0Select |b#0@@104| ($Box |y#0@@8|)) (MapType0Select |a#0@@145| ($Box |x#0@@7|))) ))))) :qid |totalorderidfyLexicographicByteOrder.658:23| :skolemid |3701| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLte |a#0@@145| |b#0@@104|)) ))))
(assert  (=> true (forall ((|a#0@@146| T@U) (|b#0@@105| T@U) ) (!  (=> (and (and (= (type |a#0@@146|) (MapType0Type BoxType boolType)) (= (type |b#0@@105|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLte#canCall| (Lit |a#0@@146|) (Lit |b#0@@105|)) (and ($Is |a#0@@146| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@105| (TSet (TSeq Tclass.NativeTypes.byte)))))) (and (forall ((|x#1@@3| T@U) (|y#1@@3| T@U) ) (!  (=> (and (and (and (and (= (type |x#1@@3|) (SeqType BoxType)) (= (type |y#1@@3|) (SeqType BoxType))) (and ($Is |x#1@@3| (TSeq Tclass.NativeTypes.byte)) ($Is |y#1@@3| (TSeq Tclass.NativeTypes.byte)))) (U_2_bool (MapType0Select (Lit |a#0@@146|) ($Box |x#1@@3|)))) (U_2_bool (MapType0Select (Lit |b#0@@105|) ($Box |y#1@@3|)))) (|Lexicographic__Byte__Order.__default.lte#canCall| |x#1@@3| |y#1@@3|)) :qid |totalorderidfyLexicographicByteOrder.659:12| :skolemid |3703| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#1@@3| |y#1@@3|)) :pattern ( (MapType0Select |b#0@@105| ($Box |y#1@@3|)) (MapType0Select |a#0@@146| ($Box |x#1@@3|))) )) (= (Lexicographic__Byte__Order.__default.SetAllLte (Lit |a#0@@146|) (Lit |b#0@@105|)) (forall ((|x#1@@4| T@U) (|y#1@@4| T@U) ) (!  (=> (and (and (and (= (type |x#1@@4|) (SeqType BoxType)) (= (type |y#1@@4|) (SeqType BoxType))) (and ($Is |x#1@@4| (TSeq Tclass.NativeTypes.byte)) ($Is |y#1@@4| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select (Lit |a#0@@146|) ($Box |x#1@@4|))) (U_2_bool (MapType0Select (Lit |b#0@@105|) ($Box |y#1@@4|))))) (Lexicographic__Byte__Order.__default.lte |x#1@@4| |y#1@@4|)) :qid |totalorderidfyLexicographicByteOrder.659:12| :skolemid |3702| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#1@@4| |y#1@@4|)) :pattern ( (MapType0Select |b#0@@105| ($Box |y#1@@4|)) (MapType0Select |a#0@@146| ($Box |x#1@@4|))) ))))) :qid |totalorderidfyLexicographicByteOrder.658:23| :weight 3 :skolemid |3704| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLte (Lit |a#0@@146|) (Lit |b#0@@105|))) ))))
(assert  (=> true (forall ((|a#0@@147| T@U) (|b#0@@106| T@U) ) (!  (=> (and (and (= (type |a#0@@147|) (MapType0Type BoxType boolType)) (= (type |b#0@@106|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLt#canCall| |a#0@@147| |b#0@@106|) (and ($Is |a#0@@147| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@106| (TSet (TSeq Tclass.NativeTypes.byte)))))) true) :qid |totalorderidfyLexicographicByteOrder.662:22| :skolemid |3705| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLt |a#0@@147| |b#0@@106|)) ))))
(assert (forall ((|a#0@@148| T@U) (|b#0@@107| T@U) ) (!  (=> (and (and (= (type |a#0@@148|) (MapType0Type BoxType boolType)) (= (type |b#0@@107|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@148| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@107| (TSet (TSeq Tclass.NativeTypes.byte))))) (= (|Lexicographic__Byte__Order.__default.SetAllLt#requires| |a#0@@148| |b#0@@107|) true)) :qid |totalorderidfyLexicographicByteOrder.662:22| :skolemid |3706| :pattern ( (|Lexicographic__Byte__Order.__default.SetAllLt#requires| |a#0@@148| |b#0@@107|)) )))
(assert  (=> true (forall ((|a#0@@149| T@U) (|b#0@@108| T@U) ) (!  (=> (and (and (= (type |a#0@@149|) (MapType0Type BoxType boolType)) (= (type |b#0@@108|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLt#canCall| |a#0@@149| |b#0@@108|) (and ($Is |a#0@@149| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@108| (TSet (TSeq Tclass.NativeTypes.byte)))))) (and (forall ((|x#0@@8| T@U) (|y#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type |x#0@@8|) (SeqType BoxType)) (= (type |y#0@@9|) (SeqType BoxType))) (and ($Is |x#0@@8| (TSeq Tclass.NativeTypes.byte)) ($Is |y#0@@9| (TSeq Tclass.NativeTypes.byte)))) (U_2_bool (MapType0Select |a#0@@149| ($Box |x#0@@8|)))) (U_2_bool (MapType0Select |b#0@@108| ($Box |y#0@@9|)))) (|Lexicographic__Byte__Order.__default.lt#canCall| |x#0@@8| |y#0@@9|)) :qid |totalorderidfyLexicographicByteOrder.663:12| :skolemid |3708| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#0@@8| |y#0@@9|)) :pattern ( (MapType0Select |b#0@@108| ($Box |y#0@@9|)) (MapType0Select |a#0@@149| ($Box |x#0@@8|))) )) (= (Lexicographic__Byte__Order.__default.SetAllLt |a#0@@149| |b#0@@108|) (forall ((|x#0@@9| T@U) (|y#0@@10| T@U) ) (!  (=> (and (and (and (= (type |x#0@@9|) (SeqType BoxType)) (= (type |y#0@@10|) (SeqType BoxType))) (and ($Is |x#0@@9| (TSeq Tclass.NativeTypes.byte)) ($Is |y#0@@10| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select |a#0@@149| ($Box |x#0@@9|))) (U_2_bool (MapType0Select |b#0@@108| ($Box |y#0@@10|))))) (Lexicographic__Byte__Order.__default.lt |x#0@@9| |y#0@@10|)) :qid |totalorderidfyLexicographicByteOrder.663:12| :skolemid |3707| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#0@@9| |y#0@@10|)) :pattern ( (MapType0Select |b#0@@108| ($Box |y#0@@10|)) (MapType0Select |a#0@@149| ($Box |x#0@@9|))) ))))) :qid |totalorderidfyLexicographicByteOrder.662:22| :skolemid |3709| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLt |a#0@@149| |b#0@@108|)) ))))
(assert  (=> true (forall ((|a#0@@150| T@U) (|b#0@@109| T@U) ) (!  (=> (and (and (= (type |a#0@@150|) (MapType0Type BoxType boolType)) (= (type |b#0@@109|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLt#canCall| (Lit |a#0@@150|) (Lit |b#0@@109|)) (and ($Is |a#0@@150| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@109| (TSet (TSeq Tclass.NativeTypes.byte)))))) (and (forall ((|x#1@@5| T@U) (|y#1@@5| T@U) ) (!  (=> (and (and (and (and (= (type |x#1@@5|) (SeqType BoxType)) (= (type |y#1@@5|) (SeqType BoxType))) (and ($Is |x#1@@5| (TSeq Tclass.NativeTypes.byte)) ($Is |y#1@@5| (TSeq Tclass.NativeTypes.byte)))) (U_2_bool (MapType0Select (Lit |a#0@@150|) ($Box |x#1@@5|)))) (U_2_bool (MapType0Select (Lit |b#0@@109|) ($Box |y#1@@5|)))) (|Lexicographic__Byte__Order.__default.lt#canCall| |x#1@@5| |y#1@@5|)) :qid |totalorderidfyLexicographicByteOrder.663:12| :skolemid |3711| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#1@@5| |y#1@@5|)) :pattern ( (MapType0Select |b#0@@109| ($Box |y#1@@5|)) (MapType0Select |a#0@@150| ($Box |x#1@@5|))) )) (= (Lexicographic__Byte__Order.__default.SetAllLt (Lit |a#0@@150|) (Lit |b#0@@109|)) (forall ((|x#1@@6| T@U) (|y#1@@6| T@U) ) (!  (=> (and (and (and (= (type |x#1@@6|) (SeqType BoxType)) (= (type |y#1@@6|) (SeqType BoxType))) (and ($Is |x#1@@6| (TSeq Tclass.NativeTypes.byte)) ($Is |y#1@@6| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select (Lit |a#0@@150|) ($Box |x#1@@6|))) (U_2_bool (MapType0Select (Lit |b#0@@109|) ($Box |y#1@@6|))))) (Lexicographic__Byte__Order.__default.lt |x#1@@6| |y#1@@6|)) :qid |totalorderidfyLexicographicByteOrder.663:12| :skolemid |3710| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#1@@6| |y#1@@6|)) :pattern ( (MapType0Select |b#0@@109| ($Box |y#1@@6|)) (MapType0Select |a#0@@150| ($Box |x#1@@6|))) ))))) :qid |totalorderidfyLexicographicByteOrder.662:22| :weight 3 :skolemid |3712| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLt (Lit |a#0@@150|) (Lit |b#0@@109|))) ))))
(assert (forall (($ly@@481 T@U) (|a#0@@151| T@U) ) (!  (=> (and (= (type $ly@@481) LayerTypeType) (= (type |a#0@@151|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@481) |a#0@@151|) (Lexicographic__Byte__Order.__default.NotMinimum $ly@@481 |a#0@@151|))) :qid |totalorderidfyLexicographicByteOrder.674:23| :skolemid |3713| :pattern ( (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@481) |a#0@@151|)) )))
(assert (forall (($ly@@482 T@U) (|a#0@@152| T@U) ) (!  (=> (and (= (type $ly@@482) LayerTypeType) (= (type |a#0@@152|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.NotMinimum $ly@@482 |a#0@@152|) (Lexicographic__Byte__Order.__default.NotMinimum $LZ |a#0@@152|))) :qid |totalorderidfyLexicographicByteOrder.674:23| :skolemid |3714| :pattern ( (Lexicographic__Byte__Order.__default.NotMinimum (AsFuelBottom $ly@@482) |a#0@@152|)) )))
(assert  (=> true (forall (($ly@@483 T@U) (|a#0@@153| T@U) ) (!  (=> (and (and (= (type $ly@@483) LayerTypeType) (= (type |a#0@@153|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.NotMinimum#canCall| |a#0@@153|) ($Is |a#0@@153| (TSeq Tclass.NativeTypes.byte)))) true) :qid |totalorderidfyLexicographicByteOrder.674:23| :skolemid |3715| :pattern ( (Lexicographic__Byte__Order.__default.NotMinimum $ly@@483 |a#0@@153|)) ))))
(assert (forall (($ly@@484 T@U) (|a#0@@154| T@U) ) (!  (=> (and (and (= (type $ly@@484) LayerTypeType) (= (type |a#0@@154|) (SeqType BoxType))) ($Is |a#0@@154| (TSeq Tclass.NativeTypes.byte))) (= (|Lexicographic__Byte__Order.__default.NotMinimum#requires| $ly@@484 |a#0@@154|) true)) :qid |totalorderidfyLexicographicByteOrder.674:23| :skolemid |3716| :pattern ( (|Lexicographic__Byte__Order.__default.NotMinimum#requires| $ly@@484 |a#0@@154|)) )))
(assert  (=> true (forall (($ly@@485 T@U) (|a#0@@155| T@U) ) (!  (=> (and (and (= (type $ly@@485) LayerTypeType) (= (type |a#0@@155|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.NotMinimum#canCall| |a#0@@155|) ($Is |a#0@@155| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|b#0@@110| T@U) ) (!  (=> (and (= (type |b#0@@110|) (SeqType BoxType)) ($Is |b#0@@110| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lt#canCall| |b#0@@110| |a#0@@155|)) :qid |totalorderidfyLexicographicByteOrder.675:12| :skolemid |3718| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#0@@110| |a#0@@155|)) )) (= (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@485) |a#0@@155|) (exists ((|b#0@@111| T@U) ) (!  (and (= (type |b#0@@111|) (SeqType BoxType)) (and ($Is |b#0@@111| (TSeq Tclass.NativeTypes.byte)) (Lexicographic__Byte__Order.__default.lt |b#0@@111| |a#0@@155|))) :qid |totalorderidfyLexicographicByteOrder.675:12| :skolemid |3717| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#0@@111| |a#0@@155|)) ))))) :qid |totalorderidfyLexicographicByteOrder.674:23| :skolemid |3719| :pattern ( (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@485) |a#0@@155|)) ))))
(assert  (=> true (forall (($ly@@486 T@U) (|a#0@@156| T@U) ) (!  (=> (and (and (= (type $ly@@486) LayerTypeType) (= (type |a#0@@156|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.NotMinimum#canCall| (Lit |a#0@@156|)) ($Is |a#0@@156| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|b#1@@5| T@U) ) (!  (=> (and (= (type |b#1@@5|) (SeqType BoxType)) ($Is |b#1@@5| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lt#canCall| |b#1@@5| (Lit |a#0@@156|))) :qid |totalorderidfyLexicographicByteOrder.675:12| :skolemid |3721| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#1@@5| |a#0@@156|)) )) (= (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@486) (Lit |a#0@@156|)) (exists ((|b#1@@6| T@U) ) (!  (and (= (type |b#1@@6|) (SeqType BoxType)) (and ($Is |b#1@@6| (TSeq Tclass.NativeTypes.byte)) (Lexicographic__Byte__Order.__default.lt |b#1@@6| (Lit |a#0@@156|)))) :qid |totalorderidfyLexicographicByteOrder.675:12| :skolemid |3720| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#1@@6| |a#0@@156|)) ))))) :qid |totalorderidfyLexicographicByteOrder.674:23| :weight 3 :skolemid |3722| :pattern ( (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@486) (Lit |a#0@@156|))) ))))
(assert (forall ((arg0@@626 T@U) (arg1@@302 T@U) (arg2@@184 T@U) (arg3@@126 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.MapPivotedUnion arg0@@626 arg1@@302 arg2@@184 arg3@@126)) (MapType BoxType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.MapPivotedUnion| :pattern ( (Lexicographic__Byte__Order.__default.MapPivotedUnion arg0@@626 arg1@@302 arg2@@184 arg3@@126)) )))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapPivotedUnion$Value T@U) (|left#0@@3| T@U) (|pivot#0@@3| T@U) (|right#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.MapPivotedUnion$Value) TyType) (= (type |left#0@@3|) (MapType BoxType BoxType))) (= (type |pivot#0@@3|) (SeqType BoxType))) (= (type |right#0@@3|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapPivotedUnion#canCall| Lexicographic_Byte_Order._default.MapPivotedUnion$Value |left#0@@3| |pivot#0@@3| |right#0@@3|) (and (and ($Is |left#0@@3| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value)) ($Is |pivot#0@@3| (TSeq Tclass.NativeTypes.byte))) ($Is |right#0@@3| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value))))) ($Is (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value |left#0@@3| |pivot#0@@3| |right#0@@3|) (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value))) :qid |unknown.0:0| :skolemid |3723| :pattern ( (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value |left#0@@3| |pivot#0@@3| |right#0@@3|)) ))))
(assert (forall ((Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0 T@U) (|left#0@@4| T@U) (|pivot#0@@4| T@U) (|right#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0) TyType) (= (type |left#0@@4|) (MapType BoxType BoxType))) (= (type |pivot#0@@4|) (SeqType BoxType))) (= (type |right#0@@4|) (MapType BoxType BoxType))) (and (and ($Is |left#0@@4| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0)) ($Is |pivot#0@@4| (TSeq Tclass.NativeTypes.byte))) ($Is |right#0@@4| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0)))) (= (|Lexicographic__Byte__Order.__default.MapPivotedUnion#requires| Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@4| |pivot#0@@4| |right#0@@4|) true)) :qid |unknown.0:0| :skolemid |3724| :pattern ( (|Lexicographic__Byte__Order.__default.MapPivotedUnion#requires| Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@4| |pivot#0@@4| |right#0@@4|)) )))
(assert  (and (forall ((arg0@@627 T@U) (arg1@@303 T@U) ) (! (= (type (|lambda#132| arg0@@627 arg1@@303)) (MapType0Type BoxType boolType)) :qid |funType:lambda#132| :pattern ( (|lambda#132| arg0@@627 arg1@@303)) )) (forall ((arg0@@628 T@U) (arg1@@304 T@U) ) (! (= (type (|lambda#134| arg0@@628 arg1@@304)) (MapType0Type BoxType boolType)) :qid |funType:lambda#134| :pattern ( (|lambda#134| arg0@@628 arg1@@304)) ))))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 T@U) (|left#0@@5| T@U) (|pivot#0@@5| T@U) (|right#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1) TyType) (= (type |left#0@@5|) (MapType BoxType BoxType))) (= (type |pivot#0@@5|) (SeqType BoxType))) (= (type |right#0@@5|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapPivotedUnion#canCall| Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@5| |pivot#0@@5| |right#0@@5|) (and (and ($Is |left#0@@5| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1)) ($Is |pivot#0@@5| (TSeq Tclass.NativeTypes.byte))) ($Is |right#0@@5| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1))))) (and (and (and (forall ((|k#0@@61| T@U) ) (!  (=> (and (= (type |k#0@@61|) (SeqType BoxType)) ($Is |k#0@@61| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lt#canCall| |k#0@@61| |pivot#0@@5|)) :qid |totalorderidfyLexicographicByteOrder.694:57| :skolemid |3725| :pattern ( (Lexicographic__Byte__Order.__default.lt |k#0@@61| |pivot#0@@5|)) )) (|Maps.__default.MapIRestrict#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@5| (|lambda#132| (TSeq Tclass.NativeTypes.byte) |pivot#0@@5|))) (let ((|restricted_left#0@@1| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@5| (|lambda#132| (TSeq Tclass.NativeTypes.byte) |pivot#0@@5|)))) (and (and (forall ((|k#1@@11| T@U) ) (!  (=> (and (= (type |k#1@@11|) (SeqType BoxType)) ($Is |k#1@@11| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lte#canCall| |pivot#0@@5| |k#1@@11|)) :qid |totalorderidfyLexicographicByteOrder.695:59| :skolemid |3726| :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@@5| |k#1@@11|)) )) (|Maps.__default.MapIRestrict#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@5| (|lambda#134| (TSeq Tclass.NativeTypes.byte) |pivot#0@@5|))) (let ((|restricted_right#0@@1| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@5| (|lambda#134| (TSeq Tclass.NativeTypes.byte) |pivot#0@@5|)))) (|Maps.__default.MapDisjointUnion#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |restricted_left#0@@1| |restricted_right#0@@1|))))) (= (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@5| |pivot#0@@5| |right#0@@5|) (let ((|restricted_left#0@@2| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@5| (|lambda#132| (TSeq Tclass.NativeTypes.byte) |pivot#0@@5|)))) (let ((|restricted_right#0@@2| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@5| (|lambda#134| (TSeq Tclass.NativeTypes.byte) |pivot#0@@5|)))) (Maps.__default.MapDisjointUnion (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 StartFuel_Maps._default.MapDisjointUnion |restricted_left#0@@2| |restricted_right#0@@2|)))))) :qid |unknown.0:0| :skolemid |3727| :pattern ( (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@5| |pivot#0@@5| |right#0@@5|)) ))))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 T@U) (|left#0@@6| T@U) (|pivot#0@@6| T@U) (|right#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2) TyType) (= (type |left#0@@6|) (MapType BoxType BoxType))) (= (type |pivot#0@@6|) (SeqType BoxType))) (= (type |right#0@@6|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapPivotedUnion#canCall| Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@6|) (Lit |pivot#0@@6|) (Lit |right#0@@6|)) (and (and ($Is |left#0@@6| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2)) ($Is |pivot#0@@6| (TSeq Tclass.NativeTypes.byte))) ($Is |right#0@@6| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2))))) (and (and (and (forall ((|k#2@@7| T@U) ) (!  (=> (and (= (type |k#2@@7|) (SeqType BoxType)) ($Is |k#2@@7| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lt#canCall| |k#2@@7| (Lit |pivot#0@@6|))) :qid |totalorderidfyLexicographicByteOrder.694:57| :skolemid |3728| :pattern ( (Lexicographic__Byte__Order.__default.lt |k#2@@7| |pivot#0@@6|)) )) (|Maps.__default.MapIRestrict#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@6|) (|lambda#132| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@6|)))) (let ((|restricted_left#1@@1| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@6|) (|lambda#132| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@6|))))) (and (and (forall ((|k#3@@0| T@U) ) (!  (=> (and (= (type |k#3@@0|) (SeqType BoxType)) ($Is |k#3@@0| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |pivot#0@@6|) |k#3@@0|)) :qid |totalorderidfyLexicographicByteOrder.695:59| :skolemid |3729| :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@@6| |k#3@@0|)) )) (|Maps.__default.MapIRestrict#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@6|) (|lambda#134| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@6|)))) (let ((|restricted_right#1@@1| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@6|) (|lambda#134| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@6|))))) (|Maps.__default.MapDisjointUnion#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 |restricted_left#1@@1| |restricted_right#1@@1|))))) (= (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@6|) (Lit |pivot#0@@6|) (Lit |right#0@@6|)) (let ((|restricted_left#1@@2| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@6|) (|lambda#132| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@6|))))) (let ((|restricted_right#1@@2| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@6|) (|lambda#134| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@6|))))) (Maps.__default.MapDisjointUnion (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 StartFuel_Maps._default.MapDisjointUnion |restricted_left#1@@2| |restricted_right#1@@2|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3730| :pattern ( (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@6|) (Lit |pivot#0@@6|) (Lit |right#0@@6|))) ))))
(assert (forall ((arg0@@629 T@U) (arg1@@305 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.SetSuccessor arg0@@629 arg1@@305)) DatatypeTypeType) :qid |funType:Lexicographic__Byte__Order.__default.SetSuccessor| :pattern ( (Lexicographic__Byte__Order.__default.SetSuccessor arg0@@629 arg1@@305)) )))
(assert  (=> true (forall ((|m#0@@114| T@U) (|key#0@@118| T@U) ) (!  (=> (and (and (= (type |m#0@@114|) (MapType0Type BoxType boolType)) (= (type |key#0@@118|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| |m#0@@114| |key#0@@118|) (and ($Is |m#0@@114| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@118| (TSeq Tclass.NativeTypes.byte))))) ($Is (Lexicographic__Byte__Order.__default.SetSuccessor |m#0@@114| |key#0@@118|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte)))) :qid |totalorderidfyLexicographicByteOrder.699:25| :skolemid |3731| :pattern ( (Lexicographic__Byte__Order.__default.SetSuccessor |m#0@@114| |key#0@@118|)) ))))
(assert (forall (($Heap@@59 T@U) (|m#0@@115| T@U) (|key#0@@119| T@U) ) (!  (=> (and (and (and (= (type $Heap@@59) (MapType0Type refType MapType1Type)) (= (type |m#0@@115|) (MapType0Type BoxType boolType))) (= (type |key#0@@119|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@59) ($Is |m#0@@115| (TSet (TSeq Tclass.NativeTypes.byte)))) ($Is |key#0@@119| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.SetSuccessor#requires| |m#0@@115| |key#0@@119|) true)) :qid |totalorderidfyLexicographicByteOrder.699:12| :skolemid |3732| :pattern ( (|Lexicographic__Byte__Order.__default.SetSuccessor#requires| |m#0@@115| |key#0@@119|) ($IsGoodHeap $Heap@@59)) )))
(assert (forall ((arg0@@630 T@U) (arg1@@306 T@U) ) (! (= (type (|$let#24_next| arg0@@630 arg1@@306)) (SeqType BoxType)) :qid |funType:$let#24_next| :pattern ( (|$let#24_next| arg0@@630 arg1@@306)) )))
(assert (forall ((m@@85 T@U) (key@@0 T@U) ) (!  (=> (and (and (= (type m@@85) (MapType0Type BoxType boolType)) (= (type key@@0) (SeqType BoxType))) (|$let#24$canCall| m@@85 key@@0)) (and ($Is (|$let#24_next| m@@85 key@@0) (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select m@@85 ($Box (|$let#24_next| m@@85 key@@0)))) (Lexicographic__Byte__Order.__default.lt key@@0 (|$let#24_next| m@@85 key@@0))) (forall ((|other#1@@0| T@U) ) (!  (=> (and (= (type |other#1@@0|) (SeqType BoxType)) ($Is |other#1@@0| (TSeq Tclass.NativeTypes.byte))) (=> (and (and (U_2_bool (MapType0Select m@@85 ($Box |other#1@@0|))) (not (|Seq#Equal| |other#1@@0| (|$let#24_next| m@@85 key@@0)))) (Lexicographic__Byte__Order.__default.lt key@@0 |other#1@@0|)) (Lexicographic__Byte__Order.__default.lt (|$let#24_next| m@@85 key@@0) |other#1@@0|))) :qid |totalorderidfyLexicographicByteOrder.704:18| :skolemid |3735| :pattern ( (Lexicographic__Byte__Order.__default.lt (|$let#24_next| m@@85 key@@0) |other#1@@0|)) :pattern ( (Lexicographic__Byte__Order.__default.lt key@@0 |other#1@@0|)) :pattern ( (MapType0Select m@@85 ($Box |other#1@@0|))) ))))) :qid |totalorderidfyLexicographicByteOrder.701:8| :skolemid |3736| :pattern ( (|$let#24_next| m@@85 key@@0)) )))
(assert  (=> true (forall (($Heap@@60 T@U) (|m#0@@116| T@U) (|key#0@@120| T@U) ) (!  (=> (and (and (and (= (type $Heap@@60) (MapType0Type refType MapType1Type)) (= (type |m#0@@116|) (MapType0Type BoxType boolType))) (= (type |key#0@@120|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| |m#0@@116| |key#0@@120|) (and (and ($IsGoodHeap $Heap@@60) ($Is |m#0@@116| (TSet (TSeq Tclass.NativeTypes.byte)))) ($Is |key#0@@120| (TSeq Tclass.NativeTypes.byte))))) (and (and (forall ((|next#0@@2| T@U) ) (!  (=> (and (and (= (type |next#0@@2|) (SeqType BoxType)) ($Is |next#0@@2| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select |m#0@@116| ($Box |next#0@@2|)))) (and (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@120| |next#0@@2|) (=> (Lexicographic__Byte__Order.__default.lt |key#0@@120| |next#0@@2|) (forall ((|other#0@@2| T@U) ) (!  (=> (and (and (and (= (type |other#0@@2|) (SeqType BoxType)) ($Is |other#0@@2| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select |m#0@@116| ($Box |other#0@@2|)))) (not (|Seq#Equal| |other#0@@2| |next#0@@2|))) (and (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@120| |other#0@@2|) (=> (Lexicographic__Byte__Order.__default.lt |key#0@@120| |other#0@@2|) (|Lexicographic__Byte__Order.__default.lt#canCall| |next#0@@2| |other#0@@2|)))) :qid |totalorderidfyLexicographicByteOrder.704:18| :skolemid |3737| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#0@@2| |other#0@@2|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@120| |other#0@@2|)) :pattern ( (MapType0Select |m#0@@116| ($Box |other#0@@2|))) ))))) :qid |totalorderidfyLexicographicByteOrder.701:8| :skolemid |3738| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@120| |next#0@@2|)) :pattern ( (MapType0Select |m#0@@116| ($Box |next#0@@2|))) )) (=> (exists ((|next#0@@3| T@U) ) (!  (and (= (type |next#0@@3|) (SeqType BoxType)) (and ($Is |next#0@@3| (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select |m#0@@116| ($Box |next#0@@3|))) (Lexicographic__Byte__Order.__default.lt |key#0@@120| |next#0@@3|)) (forall ((|other#0@@3| T@U) ) (!  (=> (and (= (type |other#0@@3|) (SeqType BoxType)) ($Is |other#0@@3| (TSeq Tclass.NativeTypes.byte))) (=> (and (and (U_2_bool (MapType0Select |m#0@@116| ($Box |other#0@@3|))) (not (|Seq#Equal| |other#0@@3| |next#0@@3|))) (Lexicographic__Byte__Order.__default.lt |key#0@@120| |other#0@@3|)) (Lexicographic__Byte__Order.__default.lt |next#0@@3| |other#0@@3|))) :qid |totalorderidfyLexicographicByteOrder.704:18| :skolemid |3739| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#0@@3| |other#0@@3|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@120| |other#0@@3|)) :pattern ( (MapType0Select |m#0@@116| ($Box |other#0@@3|))) ))))) :qid |totalorderidfyLexicographicByteOrder.701:8| :skolemid |3740| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@120| |next#0@@3|)) :pattern ( (MapType0Select |m#0@@116| ($Box |next#0@@3|))) )) (|$let#24$canCall| |m#0@@116| |key#0@@120|))) (= (Lexicographic__Byte__Order.__default.SetSuccessor |m#0@@116| |key#0@@120|) (ite (exists ((|next#0@@4| T@U) ) (!  (and (= (type |next#0@@4|) (SeqType BoxType)) (and ($Is |next#0@@4| (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select |m#0@@116| ($Box |next#0@@4|))) (Lexicographic__Byte__Order.__default.lt |key#0@@120| |next#0@@4|)) (forall ((|other#0@@4| T@U) ) (!  (=> (and (= (type |other#0@@4|) (SeqType BoxType)) ($Is |other#0@@4| (TSeq Tclass.NativeTypes.byte))) (=> (and (and (U_2_bool (MapType0Select |m#0@@116| ($Box |other#0@@4|))) (not (|Seq#Equal| |other#0@@4| |next#0@@4|))) (Lexicographic__Byte__Order.__default.lt |key#0@@120| |other#0@@4|)) (Lexicographic__Byte__Order.__default.lt |next#0@@4| |other#0@@4|))) :qid |totalorderidfyLexicographicByteOrder.704:18| :skolemid |3733| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#0@@4| |other#0@@4|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@120| |other#0@@4|)) :pattern ( (MapType0Select |m#0@@116| ($Box |other#0@@4|))) ))))) :qid |totalorderidfyLexicographicByteOrder.701:8| :skolemid |3734| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@120| |next#0@@4|)) :pattern ( (MapType0Select |m#0@@116| ($Box |next#0@@4|))) )) (let ((|next#1@@0| (|$let#24_next| |m#0@@116| |key#0@@120|))) (|#Options.Option.Some| ($Box |next#1@@0|))) |#Options.Option.None|)))) :qid |totalorderidfyLexicographicByteOrder.699:12| :skolemid |3741| :pattern ( (Lexicographic__Byte__Order.__default.SetSuccessor |m#0@@116| |key#0@@120|) ($IsGoodHeap $Heap@@60)) ))))
(assert  (=> true (forall (($Heap@@61 T@U) (|m#0@@117| T@U) (|key#0@@121| T@U) ) (!  (=> (and (and (and (= (type $Heap@@61) (MapType0Type refType MapType1Type)) (= (type |m#0@@117|) (MapType0Type BoxType boolType))) (= (type |key#0@@121|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (Lit |m#0@@117|) (Lit |key#0@@121|)) (and (and ($IsGoodHeap $Heap@@61) ($Is |m#0@@117| (TSet (TSeq Tclass.NativeTypes.byte)))) ($Is |key#0@@121| (TSeq Tclass.NativeTypes.byte))))) (and (and (forall ((|next#2@@2| T@U) ) (!  (=> (and (and (= (type |next#2@@2|) (SeqType BoxType)) ($Is |next#2@@2| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (Lit |m#0@@117|) ($Box |next#2@@2|)))) (and (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |key#0@@121|) |next#2@@2|) (=> (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@121|) |next#2@@2|) (forall ((|other#2@@2| T@U) ) (!  (=> (and (and (and (= (type |other#2@@2|) (SeqType BoxType)) ($Is |other#2@@2| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (Lit |m#0@@117|) ($Box |other#2@@2|)))) (not (|Seq#Equal| |other#2@@2| |next#2@@2|))) (and (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |key#0@@121|) |other#2@@2|) (=> (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@121|) |other#2@@2|) (|Lexicographic__Byte__Order.__default.lt#canCall| |next#2@@2| |other#2@@2|)))) :qid |totalorderidfyLexicographicByteOrder.704:18| :skolemid |3744| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#2@@2| |other#2@@2|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@121| |other#2@@2|)) :pattern ( (MapType0Select |m#0@@117| ($Box |other#2@@2|))) ))))) :qid |totalorderidfyLexicographicByteOrder.701:8| :skolemid |3745| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@121| |next#2@@2|)) :pattern ( (MapType0Select |m#0@@117| ($Box |next#2@@2|))) )) (=> (exists ((|next#2@@3| T@U) ) (!  (and (= (type |next#2@@3|) (SeqType BoxType)) (and ($Is |next#2@@3| (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select (Lit |m#0@@117|) ($Box |next#2@@3|))) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@121|) |next#2@@3|)) (forall ((|other#2@@3| T@U) ) (!  (=> (and (= (type |other#2@@3|) (SeqType BoxType)) ($Is |other#2@@3| (TSeq Tclass.NativeTypes.byte))) (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@117|) ($Box |other#2@@3|))) (not (|Seq#Equal| |other#2@@3| |next#2@@3|))) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@121|) |other#2@@3|)) (Lexicographic__Byte__Order.__default.lt |next#2@@3| |other#2@@3|))) :qid |totalorderidfyLexicographicByteOrder.704:18| :skolemid |3746| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#2@@3| |other#2@@3|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@121| |other#2@@3|)) :pattern ( (MapType0Select |m#0@@117| ($Box |other#2@@3|))) ))))) :qid |totalorderidfyLexicographicByteOrder.701:8| :skolemid |3747| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@121| |next#2@@3|)) :pattern ( (MapType0Select |m#0@@117| ($Box |next#2@@3|))) )) (|$let#24$canCall| (Lit |m#0@@117|) (Lit |key#0@@121|)))) (= (Lexicographic__Byte__Order.__default.SetSuccessor (Lit |m#0@@117|) (Lit |key#0@@121|)) (ite (exists ((|next#2@@4| T@U) ) (!  (and (= (type |next#2@@4|) (SeqType BoxType)) (and ($Is |next#2@@4| (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select (Lit |m#0@@117|) ($Box |next#2@@4|))) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@121|) |next#2@@4|)) (forall ((|other#2@@4| T@U) ) (!  (=> (and (= (type |other#2@@4|) (SeqType BoxType)) ($Is |other#2@@4| (TSeq Tclass.NativeTypes.byte))) (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@117|) ($Box |other#2@@4|))) (not (|Seq#Equal| |other#2@@4| |next#2@@4|))) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@121|) |other#2@@4|)) (Lexicographic__Byte__Order.__default.lt |next#2@@4| |other#2@@4|))) :qid |totalorderidfyLexicographicByteOrder.704:18| :skolemid |3742| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#2@@4| |other#2@@4|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@121| |other#2@@4|)) :pattern ( (MapType0Select |m#0@@117| ($Box |other#2@@4|))) ))))) :qid |totalorderidfyLexicographicByteOrder.701:8| :skolemid |3743| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@121| |next#2@@4|)) :pattern ( (MapType0Select |m#0@@117| ($Box |next#2@@4|))) )) (let ((|next#3@@0| (|$let#24_next| (Lit |m#0@@117|) (Lit |key#0@@121|)))) (|#Options.Option.Some| ($Box |next#3@@0|))) |#Options.Option.None|)))) :qid |totalorderidfyLexicographicByteOrder.699:12| :weight 3 :skolemid |3748| :pattern ( (Lexicographic__Byte__Order.__default.SetSuccessor (Lit |m#0@@117|) (Lit |key#0@@121|)) ($IsGoodHeap $Heap@@61)) ))))
(assert (forall ((arg0@@631 T@U) (arg1@@307 T@U) (arg2@@185 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.MapSuccessor arg0@@631 arg1@@307 arg2@@185)) DatatypeTypeType) :qid |funType:Lexicographic__Byte__Order.__default.MapSuccessor| :pattern ( (Lexicographic__Byte__Order.__default.MapSuccessor arg0@@631 arg1@@307 arg2@@185)) )))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapSuccessor$V T@U) (|m#0@@118| T@U) (|key#0@@122| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.MapSuccessor$V) TyType) (= (type |m#0@@118|) (MapType BoxType BoxType))) (= (type |key#0@@122|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapSuccessor#canCall| Lexicographic_Byte_Order._default.MapSuccessor$V |m#0@@118| |key#0@@122|) (and ($Is |m#0@@118| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapSuccessor$V)) ($Is |key#0@@122| (TSeq Tclass.NativeTypes.byte))))) ($Is (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V |m#0@@118| |key#0@@122|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte)))) :qid |unknown.0:0| :skolemid |3749| :pattern ( (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V |m#0@@118| |key#0@@122|)) ))))
(assert (forall ((Lexicographic_Byte_Order._default.MapSuccessor$V@@0 T@U) (|m#0@@119| T@U) (|key#0@@123| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.MapSuccessor$V@@0) TyType) (= (type |m#0@@119|) (MapType BoxType BoxType))) (= (type |key#0@@123|) (SeqType BoxType))) (and ($Is |m#0@@119| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapSuccessor$V@@0)) ($Is |key#0@@123| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.MapSuccessor#requires| Lexicographic_Byte_Order._default.MapSuccessor$V@@0 |m#0@@119| |key#0@@123|) true)) :qid |unknown.0:0| :skolemid |3750| :pattern ( (|Lexicographic__Byte__Order.__default.MapSuccessor#requires| Lexicographic_Byte_Order._default.MapSuccessor$V@@0 |m#0@@119| |key#0@@123|)) )))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapSuccessor$V@@1 T@U) (|m#0@@120| T@U) (|key#0@@124| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.MapSuccessor$V@@1) TyType) (= (type |m#0@@120|) (MapType BoxType BoxType))) (= (type |key#0@@124|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapSuccessor#canCall| Lexicographic_Byte_Order._default.MapSuccessor$V@@1 |m#0@@120| |key#0@@124|) (and ($Is |m#0@@120| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapSuccessor$V@@1)) ($Is |key#0@@124| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (|Map#Domain| |m#0@@120|) |key#0@@124|) (= (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V@@1 |m#0@@120| |key#0@@124|) (Lexicographic__Byte__Order.__default.SetSuccessor (|Map#Domain| |m#0@@120|) |key#0@@124|)))) :qid |unknown.0:0| :skolemid |3751| :pattern ( (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V@@1 |m#0@@120| |key#0@@124|)) ))))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapSuccessor$V@@2 T@U) (|m#0@@121| T@U) (|key#0@@125| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.MapSuccessor$V@@2) TyType) (= (type |m#0@@121|) (MapType BoxType BoxType))) (= (type |key#0@@125|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapSuccessor#canCall| Lexicographic_Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@121|) (Lit |key#0@@125|)) (and ($Is |m#0@@121| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapSuccessor$V@@2)) ($Is |key#0@@125| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (Lit (|Map#Domain| (Lit |m#0@@121|))) (Lit |key#0@@125|)) (= (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@121|) (Lit |key#0@@125|)) (Lit (Lexicographic__Byte__Order.__default.SetSuccessor (Lit (|Map#Domain| (Lit |m#0@@121|))) (Lit |key#0@@125|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3752| :pattern ( (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@121|) (Lit |key#0@@125|))) ))))
(assert (forall ((arg0@@632 T@U) (arg1@@308 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.SeqSuccessor arg0@@632 arg1@@308)) DatatypeTypeType) :qid |funType:Lexicographic__Byte__Order.__default.SeqSuccessor| :pattern ( (Lexicographic__Byte__Order.__default.SeqSuccessor arg0@@632 arg1@@308)) )))
(assert  (=> true (forall ((|m#0@@122| T@U) (|key#0@@126| T@U) ) (!  (=> (and (and (= (type |m#0@@122|) (SeqType BoxType)) (= (type |key#0@@126|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SeqSuccessor#canCall| |m#0@@122| |key#0@@126|) (and ($Is |m#0@@122| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@126| (TSeq Tclass.NativeTypes.byte))))) ($Is (Lexicographic__Byte__Order.__default.SeqSuccessor |m#0@@122| |key#0@@126|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte)))) :qid |totalorderidfyLexicographicByteOrder.715:25| :skolemid |3753| :pattern ( (Lexicographic__Byte__Order.__default.SeqSuccessor |m#0@@122| |key#0@@126|)) ))))
(assert (forall ((|m#0@@123| T@U) (|key#0@@127| T@U) ) (!  (=> (and (and (= (type |m#0@@123|) (SeqType BoxType)) (= (type |key#0@@127|) (SeqType BoxType))) (and ($Is |m#0@@123| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@127| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.SeqSuccessor#requires| |m#0@@123| |key#0@@127|) true)) :qid |totalorderidfyLexicographicByteOrder.715:25| :skolemid |3754| :pattern ( (|Lexicographic__Byte__Order.__default.SeqSuccessor#requires| |m#0@@123| |key#0@@127|)) )))
(assert  (=> true (forall ((|m#0@@124| T@U) (|key#0@@128| T@U) ) (!  (=> (and (and (= (type |m#0@@124|) (SeqType BoxType)) (= (type |key#0@@128|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SeqSuccessor#canCall| |m#0@@124| |key#0@@128|) (and ($Is |m#0@@124| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@128| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (|lambda#128| (TSeq Tclass.NativeTypes.byte) |m#0@@124|) |key#0@@128|) (= (Lexicographic__Byte__Order.__default.SeqSuccessor |m#0@@124| |key#0@@128|) (Lexicographic__Byte__Order.__default.SetSuccessor (|lambda#128| (TSeq Tclass.NativeTypes.byte) |m#0@@124|) |key#0@@128|)))) :qid |totalorderidfyLexicographicByteOrder.715:25| :skolemid |3755| :pattern ( (Lexicographic__Byte__Order.__default.SeqSuccessor |m#0@@124| |key#0@@128|)) ))))
(assert  (=> true (forall ((|m#0@@125| T@U) (|key#0@@129| T@U) ) (!  (=> (and (and (= (type |m#0@@125|) (SeqType BoxType)) (= (type |key#0@@129|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SeqSuccessor#canCall| (Lit |m#0@@125|) (Lit |key#0@@129|)) (and ($Is |m#0@@125| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@129| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (|lambda#128| (TSeq Tclass.NativeTypes.byte) |m#0@@125|) (Lit |key#0@@129|)) (= (Lexicographic__Byte__Order.__default.SeqSuccessor (Lit |m#0@@125|) (Lit |key#0@@129|)) (Lexicographic__Byte__Order.__default.SetSuccessor (|lambda#128| (TSeq Tclass.NativeTypes.byte) |m#0@@125|) (Lit |key#0@@129|))))) :qid |totalorderidfyLexicographicByteOrder.715:25| :weight 3 :skolemid |3756| :pattern ( (Lexicographic__Byte__Order.__default.SeqSuccessor (Lit |m#0@@125|) (Lit |key#0@@129|))) ))))
(assert (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V T@U) ($ly@@487 T@U) (|s#0@@250| T@U) (|m#0@@126| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V) TyType) (= (type $ly@@487) LayerTypeType)) (= (type |s#0@@250|) (SeqType BoxType))) (= (type |m#0@@126|) (MapType BoxType BoxType))) (= (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V ($LS $ly@@487) |s#0@@250| |m#0@@126|) (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V $ly@@487 |s#0@@250| |m#0@@126|))) :qid |unknown.0:0| :skolemid |3757| :pattern ( (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V ($LS $ly@@487) |s#0@@250| |m#0@@126|)) )))
(assert (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 T@U) ($ly@@488 T@U) (|s#0@@251| T@U) (|m#0@@127| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0) TyType) (= (type $ly@@488) LayerTypeType)) (= (type |s#0@@251|) (SeqType BoxType))) (= (type |m#0@@127|) (MapType BoxType BoxType))) (= (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 $ly@@488 |s#0@@251| |m#0@@127|) (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 $LZ |s#0@@251| |m#0@@127|))) :qid |unknown.0:0| :skolemid |3758| :pattern ( (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 (AsFuelBottom $ly@@488) |s#0@@251| |m#0@@127|)) )))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1 T@U) ($ly@@489 T@U) (|s#0@@252| T@U) (|m#0@@128| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1) TyType) (= (type $ly@@489) LayerTypeType)) (= (type |s#0@@252|) (SeqType BoxType))) (= (type |m#0@@128|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.SortedSeqForMap#canCall| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1 |s#0@@252| |m#0@@128|) (and ($Is |s#0@@252| (TSeq (Tclass._System.Tuple2 (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1))) ($Is |m#0@@128| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1))))) true) :qid |unknown.0:0| :skolemid |3759| :pattern ( (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1 $ly@@489 |s#0@@252| |m#0@@128|)) ))))
(assert (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2 T@U) ($ly@@490 T@U) (|s#0@@253| T@U) (|m#0@@129| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2) TyType) (= (type $ly@@490) LayerTypeType)) (= (type |s#0@@253|) (SeqType BoxType))) (= (type |m#0@@129|) (MapType BoxType BoxType))) (and ($Is |s#0@@253| (TSeq (Tclass._System.Tuple2 (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2))) ($Is |m#0@@129| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2)))) (= (|Lexicographic__Byte__Order.__default.SortedSeqForMap#requires| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2 $ly@@490 |s#0@@253| |m#0@@129|) true)) :qid |unknown.0:0| :skolemid |3760| :pattern ( (|Lexicographic__Byte__Order.__default.SortedSeqForMap#requires| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2 $ly@@490 |s#0@@253| |m#0@@129|)) )))
(assert (= (type StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted) LayerTypeType))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 T@U) ($ly@@491 T@U) (|s#0@@254| T@U) (|m#0@@130| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3) TyType) (= (type $ly@@491) LayerTypeType)) (= (type |s#0@@254|) (SeqType BoxType))) (= (type |m#0@@130|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.SortedSeqForMap#canCall| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 |s#0@@254| |m#0@@130|) (and ($Is |s#0@@254| (TSeq (Tclass._System.Tuple2 (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3))) ($Is |m#0@@130| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3))))) (and (and (and (and (|Sequences.__default.Unzip#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 |s#0@@254|) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@254|))) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@254|))))) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@254|)))) (and (forall ((|i#0@@115| Int) ) (!  (and (=> (<= (LitInt 0) |i#0@@115|) (=> (< |i#0@@115| (|Seq#Length| |s#0@@254|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@254| |i#0@@115|))))) (=> (=> (and (<= (LitInt 0) |i#0@@115|) (< |i#0@@115| (|Seq#Length| |s#0@@254|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@130|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@254| |i#0@@115|)))))) (=> (<= (LitInt 0) |i#0@@115|) (=> (< |i#0@@115| (|Seq#Length| |s#0@@254|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@254| |i#0@@115|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@254| |i#0@@115|)))))))) :qid |totalorderidfyLexicographicByteOrder.723:16| :skolemid |3764| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@254| |i#0@@115|))) )) (=> (forall ((|i#0@@116| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@116|) (< |i#0@@116| (|Seq#Length| |s#0@@254|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@130|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@254| |i#0@@116|)))))) (=> (and (<= (LitInt 0) |i#0@@116|) (< |i#0@@116| (|Seq#Length| |s#0@@254|))) (= (MapType0Select (|Map#Elements| |m#0@@130|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@254| |i#0@@116|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@254| |i#0@@116|))))))) :qid |totalorderidfyLexicographicByteOrder.723:16| :skolemid |3767| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@254| |i#0@@116|))) )) (forall ((|key#0@@130| T@U) ) (!  (=> (and (and (= (type |key#0@@130|) (SeqType BoxType)) ($Is |key#0@@130| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@130|) ($Box |key#0@@130|)))) (forall ((|i#1@@42| Int) ) (!  (=> (<= (LitInt 0) |i#1@@42|) (=> (< |i#1@@42| (|Seq#Length| |s#0@@254|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@254| |i#1@@42|))) (=> (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@254| |i#1@@42|)))) |key#0@@130|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@254| |i#1@@42|))))))) :qid |totalorderidfyLexicographicByteOrder.724:44| :skolemid |3765| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@254| |i#1@@42|))) ))) :qid |totalorderidfyLexicographicByteOrder.724:16| :skolemid |3766| :pattern ( (MapType0Select (|Map#Elements| |m#0@@130|) ($Box |key#0@@130|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@130|) ($Box |key#0@@130|))) )))))) (= (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@491) |s#0@@254| |m#0@@130|)  (and (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@254|)))) (forall ((|i#0@@117| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@117|) (< |i#0@@117| (|Seq#Length| |s#0@@254|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@130|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@254| |i#0@@117|)))))) (=> (and (<= (LitInt 0) |i#0@@117|) (< |i#0@@117| (|Seq#Length| |s#0@@254|))) (= (MapType0Select (|Map#Elements| |m#0@@130|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@254| |i#0@@117|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@254| |i#0@@117|))))))) :qid |totalorderidfyLexicographicByteOrder.723:16| :skolemid |3761| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@254| |i#0@@117|))) ))) (forall ((|key#0@@131| T@U) ) (!  (=> (and (and (= (type |key#0@@131|) (SeqType BoxType)) ($Is |key#0@@131| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@130|) ($Box |key#0@@131|)))) (exists ((|i#1@@43| Int) ) (!  (and (and (and (<= (LitInt 0) |i#1@@43|) (< |i#1@@43| (|Seq#Length| |s#0@@254|))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@254| |i#1@@43|)))) |key#0@@131|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@254| |i#1@@43|))) (MapType0Select (|Map#Elements| |m#0@@130|) ($Box |key#0@@131|)))) :qid |totalorderidfyLexicographicByteOrder.724:44| :skolemid |3762| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@254| |i#1@@43|))) ))) :qid |totalorderidfyLexicographicByteOrder.724:16| :skolemid |3763| :pattern ( (MapType0Select (|Map#Elements| |m#0@@130|) ($Box |key#0@@131|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@130|) ($Box |key#0@@131|))) )))))) :qid |unknown.0:0| :skolemid |3768| :pattern ( (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@491) |s#0@@254| |m#0@@130|)) ))))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 T@U) ($ly@@492 T@U) (|s#0@@255| T@U) (|m#0@@131| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4) TyType) (= (type $ly@@492) LayerTypeType)) (= (type |s#0@@255|) (SeqType BoxType))) (= (type |m#0@@131|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.SortedSeqForMap#canCall| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@255|) (Lit |m#0@@131|)) (and ($Is |s#0@@255| (TSeq (Tclass._System.Tuple2 (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4))) ($Is |m#0@@131| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4))))) (and (and (and (and (|Sequences.__default.Unzip#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@255|)) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@255|)))) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@255|)))))) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@255|))))) (and (forall ((|i#2@@20| Int) ) (!  (and (=> (<= (LitInt 0) |i#2@@20|) (=> (< |i#2@@20| (|Seq#Length| (Lit |s#0@@255|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@255|) |i#2@@20|))))) (=> (=> (and (<= (LitInt 0) |i#2@@20|) (< |i#2@@20| (|Seq#Length| (Lit |s#0@@255|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@131|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@255|) |i#2@@20|)))))) (=> (<= (LitInt 0) |i#2@@20|) (=> (< |i#2@@20| (|Seq#Length| (Lit |s#0@@255|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@255|) |i#2@@20|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@255|) |i#2@@20|)))))))) :qid |totalorderidfyLexicographicByteOrder.723:16| :skolemid |3772| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@255| |i#2@@20|))) )) (=> (forall ((|i#2@@21| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@21|) (< |i#2@@21| (|Seq#Length| (Lit |s#0@@255|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@131|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@255|) |i#2@@21|)))))) (=> (and (<= (LitInt 0) |i#2@@21|) (< |i#2@@21| (|Seq#Length| (Lit |s#0@@255|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@131|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@255|) |i#2@@21|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@255|) |i#2@@21|))))))) :qid |totalorderidfyLexicographicByteOrder.723:16| :skolemid |3775| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@255| |i#2@@21|))) )) (forall ((|key#1@@9| T@U) ) (!  (=> (and (and (= (type |key#1@@9|) (SeqType BoxType)) ($Is |key#1@@9| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@131|) ($Box |key#1@@9|)))) (forall ((|i#3@@12| Int) ) (!  (=> (<= (LitInt 0) |i#3@@12|) (=> (< |i#3@@12| (|Seq#Length| (Lit |s#0@@255|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@255|) |i#3@@12|))) (=> (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@255|) |i#3@@12|)))) |key#1@@9|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@255|) |i#3@@12|))))))) :qid |totalorderidfyLexicographicByteOrder.724:44| :skolemid |3773| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@255| |i#3@@12|))) ))) :qid |totalorderidfyLexicographicByteOrder.724:16| :skolemid |3774| :pattern ( (MapType0Select (|Map#Elements| |m#0@@131|) ($Box |key#1@@9|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@131|) ($Box |key#1@@9|))) )))))) (= (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@492) (Lit |s#0@@255|) (Lit |m#0@@131|))  (and (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@255|))))) (forall ((|i#2@@22| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@22|) (< |i#2@@22| (|Seq#Length| (Lit |s#0@@255|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@131|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@255|) |i#2@@22|)))))) (=> (and (<= (LitInt 0) |i#2@@22|) (< |i#2@@22| (|Seq#Length| (Lit |s#0@@255|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@131|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@255|) |i#2@@22|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@255|) |i#2@@22|))))))) :qid |totalorderidfyLexicographicByteOrder.723:16| :skolemid |3769| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@255| |i#2@@22|))) ))) (forall ((|key#1@@10| T@U) ) (!  (=> (and (and (= (type |key#1@@10|) (SeqType BoxType)) ($Is |key#1@@10| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@131|) ($Box |key#1@@10|)))) (exists ((|i#3@@13| Int) ) (!  (and (and (and (<= (LitInt 0) |i#3@@13|) (< |i#3@@13| (|Seq#Length| (Lit |s#0@@255|)))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@255|) |i#3@@13|)))) |key#1@@10|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@255|) |i#3@@13|))) (MapType0Select (|Map#Elements| (Lit |m#0@@131|)) ($Box |key#1@@10|)))) :qid |totalorderidfyLexicographicByteOrder.724:44| :skolemid |3770| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@255| |i#3@@13|))) ))) :qid |totalorderidfyLexicographicByteOrder.724:16| :skolemid |3771| :pattern ( (MapType0Select (|Map#Elements| |m#0@@131|) ($Box |key#1@@10|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@131|) ($Box |key#1@@10|))) )))))) :qid |unknown.0:0| :weight 3 :skolemid |3776| :pattern ( (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@492) (Lit |s#0@@255|) (Lit |m#0@@131|))) ))))
(assert (forall ((arg0@@633 T@U) (arg1@@309 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.minimum arg0@@633 arg1@@309)) (SeqType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.minimum| :pattern ( (Lexicographic__Byte__Order.__default.minimum arg0@@633 arg1@@309)) )))
(assert (forall (($ly@@493 T@U) (|s#0@@256| T@U) ) (!  (=> (and (= (type $ly@@493) LayerTypeType) (= (type |s#0@@256|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@493) |s#0@@256|) (Lexicographic__Byte__Order.__default.minimum $ly@@493 |s#0@@256|))) :qid |totalorderidfyLexicographicByteOrder.727:22| :skolemid |3777| :pattern ( (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@493) |s#0@@256|)) )))
(assert (forall (($ly@@494 T@U) (|s#0@@257| T@U) ) (!  (=> (and (= (type $ly@@494) LayerTypeType) (= (type |s#0@@257|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.minimum $ly@@494 |s#0@@257|) (Lexicographic__Byte__Order.__default.minimum $LZ |s#0@@257|))) :qid |totalorderidfyLexicographicByteOrder.727:22| :skolemid |3778| :pattern ( (Lexicographic__Byte__Order.__default.minimum (AsFuelBottom $ly@@494) |s#0@@257|)) )))
(assert  (=> true (forall (($ly@@495 T@U) (|s#0@@258| T@U) ) (!  (=> (and (and (= (type $ly@@495) LayerTypeType) (= (type |s#0@@258|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimum#canCall| |s#0@@258|) (and ($Is |s#0@@258| (TSet (TSeq Tclass.NativeTypes.byte))) (>= (|Set#Card| |s#0@@258|) (LitInt 1))))) (and (and (U_2_bool (MapType0Select |s#0@@258| ($Box (Lexicographic__Byte__Order.__default.minimum $ly@@495 |s#0@@258|)))) (forall ((|y#0@@11| T@U) ) (!  (=> (= (type |y#0@@11|) (SeqType BoxType)) (=> (and ($Is |y#0@@11| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select |s#0@@258| ($Box |y#0@@11|)))) (Lexicographic__Byte__Order.__default.lte (Lexicographic__Byte__Order.__default.minimum $ly@@495 |s#0@@258|) |y#0@@11|))) :qid |totalorderidfyLexicographicByteOrder.730:18| :skolemid |3779| :pattern ( (Lexicographic__Byte__Order.__default.lte (Lexicographic__Byte__Order.__default.minimum $ly@@495 |s#0@@258|) |y#0@@11|)) :pattern ( (MapType0Select |s#0@@258| ($Box |y#0@@11|))) ))) ($Is (Lexicographic__Byte__Order.__default.minimum $ly@@495 |s#0@@258|) (TSeq Tclass.NativeTypes.byte)))) :qid |totalorderidfyLexicographicByteOrder.727:22| :skolemid |3780| :pattern ( (Lexicographic__Byte__Order.__default.minimum $ly@@495 |s#0@@258|)) ))))
(assert (forall (($ly@@496 T@U) ($Heap@@62 T@U) (|s#0@@259| T@U) ) (!  (=> (and (and (and (= (type $ly@@496) LayerTypeType) (= (type $Heap@@62) (MapType0Type refType MapType1Type))) (= (type |s#0@@259|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@62) ($Is |s#0@@259| (TSet (TSeq Tclass.NativeTypes.byte))))) (= (|Lexicographic__Byte__Order.__default.minimum#requires| $ly@@496 |s#0@@259|) (>= (|Set#Card| |s#0@@259|) (LitInt 1)))) :qid |totalorderidfyLexicographicByteOrder.727:22| :skolemid |3781| :pattern ( (|Lexicographic__Byte__Order.__default.minimum#requires| $ly@@496 |s#0@@259|) ($IsGoodHeap $Heap@@62)) )))
(assert (forall ((arg0@@634 T@U) ) (! (= (type (|$let#27_a| arg0@@634)) (SeqType BoxType)) :qid |funType:$let#27_a| :pattern ( (|$let#27_a| arg0@@634)) )))
(assert (forall ((s@@54 T@U) ) (!  (=> (and (= (type s@@54) (MapType0Type BoxType boolType)) (|$let#27$canCall| s@@54)) (and ($Is (|$let#27_a| s@@54) (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select s@@54 ($Box (|$let#27_a| s@@54)))))) :qid |totalorderidfyLexicographicByteOrder.734:5| :skolemid |3782| :pattern ( (|$let#27_a| s@@54)) )))
(assert  (=> true (forall (($ly@@497 T@U) ($Heap@@63 T@U) (|s#0@@260| T@U) ) (!  (=> (and (and (and (= (type $ly@@497) LayerTypeType) (= (type $Heap@@63) (MapType0Type refType MapType1Type))) (= (type |s#0@@260|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimum#canCall| |s#0@@260|) (and (and ($IsGoodHeap $Heap@@63) ($Is |s#0@@260| (TSet (TSeq Tclass.NativeTypes.byte)))) (>= (|Set#Card| |s#0@@260|) (LitInt 1))))) (and (and (|$let#27$canCall| |s#0@@260|) (let ((|s'#1@@1| (|Set#Difference| |s#0@@260| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#27_a| |s#0@@260|)))))) (=> (not (|Set#Equal| |s'#1@@1| (|Set#Empty| BoxType))) (and (|Lexicographic__Byte__Order.__default.minimum#canCall| |s'#1@@1|) (let ((|m'#1@@3| (Lexicographic__Byte__Order.__default.minimum $ly@@497 |s'#1@@1|))) (|Lexicographic__Byte__Order.__default.lt#canCall| (|$let#27_a| |s#0@@260|) |m'#1@@3|)))))) (= (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@497) |s#0@@260|) (let ((|a#0@@157| (|$let#27_a| |s#0@@260|))) (let ((|s'#0@@58| (|Set#Difference| |s#0@@260| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#0@@157|))))) (ite (|Set#Equal| |s'#0@@58| (|Set#Empty| BoxType)) |a#0@@157| (let ((|m'#0@@12| (Lexicographic__Byte__Order.__default.minimum $ly@@497 |s'#0@@58|))) (ite (Lexicographic__Byte__Order.__default.lt |a#0@@157| |m'#0@@12|) |a#0@@157| |m'#0@@12|)))))))) :qid |totalorderidfyLexicographicByteOrder.727:22| :skolemid |3783| :pattern ( (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@497) |s#0@@260|) ($IsGoodHeap $Heap@@63)) ))))
(assert  (=> true (forall (($ly@@498 T@U) ($Heap@@64 T@U) (|s#0@@261| T@U) ) (!  (=> (and (and (and (= (type $ly@@498) LayerTypeType) (= (type $Heap@@64) (MapType0Type refType MapType1Type))) (= (type |s#0@@261|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimum#canCall| (Lit |s#0@@261|)) (and (and ($IsGoodHeap $Heap@@64) ($Is |s#0@@261| (TSet (TSeq Tclass.NativeTypes.byte)))) (>= (|Set#Card| (Lit |s#0@@261|)) (LitInt 1))))) (and (and (|$let#27$canCall| (Lit |s#0@@261|)) (let ((|s'#3@@1| (|Set#Difference| |s#0@@261| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#27_a| (Lit |s#0@@261|))))))) (=> (not (|Set#Equal| |s'#3@@1| (|Set#Empty| BoxType))) (and (|Lexicographic__Byte__Order.__default.minimum#canCall| |s'#3@@1|) (let ((|m'#3@@1| (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@498) |s'#3@@1|))) (|Lexicographic__Byte__Order.__default.lt#canCall| (|$let#27_a| (Lit |s#0@@261|)) |m'#3@@1|)))))) (= (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@498) (Lit |s#0@@261|)) (let ((|a#1@@4| (|$let#27_a| (Lit |s#0@@261|)))) (let ((|s'#2@@1| (|Set#Difference| |s#0@@261| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#1@@4|))))) (ite (|Set#Equal| |s'#2@@1| (|Set#Empty| BoxType)) |a#1@@4| (let ((|m'#2@@2| (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@498) |s'#2@@1|))) (ite (Lexicographic__Byte__Order.__default.lt |a#1@@4| |m'#2@@2|) |a#1@@4| |m'#2@@2|)))))))) :qid |totalorderidfyLexicographicByteOrder.727:22| :weight 3 :skolemid |3784| :pattern ( (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@498) (Lit |s#0@@261|)) ($IsGoodHeap $Heap@@64)) ))))
(assert (forall ((arg0@@635 T@U) (arg1@@310 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.minimumOpt arg0@@635 arg1@@310)) DatatypeTypeType) :qid |funType:Lexicographic__Byte__Order.__default.minimumOpt| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt arg0@@635 arg1@@310)) )))
(assert (forall (($ly@@499 T@U) (|s#0@@262| T@U) ) (!  (=> (and (= (type $ly@@499) LayerTypeType) (= (type |s#0@@262|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@499) |s#0@@262|) (Lexicographic__Byte__Order.__default.minimumOpt $ly@@499 |s#0@@262|))) :qid |totalorderidfyLexicographicByteOrder.750:22| :skolemid |3785| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@499) |s#0@@262|)) )))
(assert (forall (($ly@@500 T@U) (|s#0@@263| T@U) ) (!  (=> (and (= (type $ly@@500) LayerTypeType) (= (type |s#0@@263|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.minimumOpt $ly@@500 |s#0@@263|) (Lexicographic__Byte__Order.__default.minimumOpt $LZ |s#0@@263|))) :qid |totalorderidfyLexicographicByteOrder.750:22| :skolemid |3786| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt (AsFuelBottom $ly@@500) |s#0@@263|)) )))
(assert  (=> true (forall (($ly@@501 T@U) (|s#0@@264| T@U) ) (!  (=> (and (and (= (type $ly@@501) LayerTypeType) (= (type |s#0@@264|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimumOpt#canCall| |s#0@@264|) ($Is |s#0@@264| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (and (and (=> (Options.Option.Some_q (Lexicographic__Byte__Order.__default.minimumOpt $ly@@501 |s#0@@264|)) (U_2_bool (MapType0Select |s#0@@264| (Options.Option.value (Lexicographic__Byte__Order.__default.minimumOpt $ly@@501 |s#0@@264|))))) (=> (Options.Option.Some_q (Lexicographic__Byte__Order.__default.minimumOpt $ly@@501 |s#0@@264|)) (forall ((|y#0@@12| T@U) ) (!  (=> (= (type |y#0@@12|) (SeqType BoxType)) (=> (and ($Is |y#0@@12| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select |s#0@@264| ($Box |y#0@@12|)))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Options.Option.value (Lexicographic__Byte__Order.__default.minimumOpt $ly@@501 |s#0@@264|))) |y#0@@12|))) :qid |totalorderidfyLexicographicByteOrder.752:30| :skolemid |3787| :pattern ( (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Options.Option.value (Lexicographic__Byte__Order.__default.minimumOpt $ly@@501 |s#0@@264|))) |y#0@@12|)) :pattern ( (MapType0Select |s#0@@264| ($Box |y#0@@12|))) )))) (=> (Options.Option.None_q (Lexicographic__Byte__Order.__default.minimumOpt $ly@@501 |s#0@@264|)) (|Set#Equal| |s#0@@264| (|Set#Empty| BoxType)))) ($Is (Lexicographic__Byte__Order.__default.minimumOpt $ly@@501 |s#0@@264|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte))))) :qid |totalorderidfyLexicographicByteOrder.750:22| :skolemid |3788| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt $ly@@501 |s#0@@264|)) ))))
(assert (forall (($ly@@502 T@U) (|s#0@@265| T@U) ) (!  (=> (and (and (= (type $ly@@502) LayerTypeType) (= (type |s#0@@265|) (MapType0Type BoxType boolType))) ($Is |s#0@@265| (TSet (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.minimumOpt#requires| $ly@@502 |s#0@@265|) true)) :qid |totalorderidfyLexicographicByteOrder.750:22| :skolemid |3789| :pattern ( (|Lexicographic__Byte__Order.__default.minimumOpt#requires| $ly@@502 |s#0@@265|)) )))
(assert (= (type StartFuel_Lexicographic_Byte_Order._default.minimum) LayerTypeType))
(assert  (=> true (forall (($ly@@503 T@U) (|s#0@@266| T@U) ) (!  (=> (and (and (= (type $ly@@503) LayerTypeType) (= (type |s#0@@266|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimumOpt#canCall| |s#0@@266|) ($Is |s#0@@266| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (|Set#Equal| |s#0@@266| (|Set#Empty| BoxType))) (|Lexicographic__Byte__Order.__default.minimum#canCall| |s#0@@266|)) (= (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@503) |s#0@@266|) (ite (|Set#Equal| |s#0@@266| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Lexicographic__Byte__Order.__default.minimum StartFuel_Lexicographic_Byte_Order._default.minimum |s#0@@266|))))))) :qid |totalorderidfyLexicographicByteOrder.750:22| :skolemid |3790| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@503) |s#0@@266|)) ))))
(assert  (=> true (forall (($ly@@504 T@U) (|s#0@@267| T@U) ) (!  (=> (and (and (= (type $ly@@504) LayerTypeType) (= (type |s#0@@267|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimumOpt#canCall| (Lit |s#0@@267|)) ($Is |s#0@@267| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (|Set#Equal| |s#0@@267| (|Set#Empty| BoxType))) (|Lexicographic__Byte__Order.__default.minimum#canCall| (Lit |s#0@@267|))) (= (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@504) (Lit |s#0@@267|)) (ite (|Set#Equal| |s#0@@267| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Lexicographic__Byte__Order.__default.minimum StartFuel_Lexicographic_Byte_Order._default.minimum (Lit |s#0@@267|)))))))) :qid |totalorderidfyLexicographicByteOrder.750:22| :weight 3 :skolemid |3791| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@504) (Lit |s#0@@267|))) ))))
(assert (forall ((arg0@@636 T@U) (arg1@@311 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.maximum arg0@@636 arg1@@311)) (SeqType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.maximum| :pattern ( (Lexicographic__Byte__Order.__default.maximum arg0@@636 arg1@@311)) )))
(assert (forall (($ly@@505 T@U) (|s#0@@268| T@U) ) (!  (=> (and (= (type $ly@@505) LayerTypeType) (= (type |s#0@@268|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@505) |s#0@@268|) (Lexicographic__Byte__Order.__default.maximum $ly@@505 |s#0@@268|))) :qid |totalorderidfyLexicographicByteOrder.758:22| :skolemid |3792| :pattern ( (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@505) |s#0@@268|)) )))
(assert (forall (($ly@@506 T@U) (|s#0@@269| T@U) ) (!  (=> (and (= (type $ly@@506) LayerTypeType) (= (type |s#0@@269|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.maximum $ly@@506 |s#0@@269|) (Lexicographic__Byte__Order.__default.maximum $LZ |s#0@@269|))) :qid |totalorderidfyLexicographicByteOrder.758:22| :skolemid |3793| :pattern ( (Lexicographic__Byte__Order.__default.maximum (AsFuelBottom $ly@@506) |s#0@@269|)) )))
(assert  (=> true (forall (($ly@@507 T@U) (|s#0@@270| T@U) ) (!  (=> (and (and (= (type $ly@@507) LayerTypeType) (= (type |s#0@@270|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximum#canCall| |s#0@@270|) (and ($Is |s#0@@270| (TSet (TSeq Tclass.NativeTypes.byte))) (>= (|Set#Card| |s#0@@270|) (LitInt 1))))) (and (and (U_2_bool (MapType0Select |s#0@@270| ($Box (Lexicographic__Byte__Order.__default.maximum $ly@@507 |s#0@@270|)))) (forall ((|y#0@@13| T@U) ) (!  (=> (= (type |y#0@@13|) (SeqType BoxType)) (=> (and ($Is |y#0@@13| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select |s#0@@270| ($Box |y#0@@13|)))) (Lexicographic__Byte__Order.__default.lte |y#0@@13| (Lexicographic__Byte__Order.__default.maximum $ly@@507 |s#0@@270|)))) :qid |totalorderidfyLexicographicByteOrder.761:18| :skolemid |3794| :pattern ( (Lexicographic__Byte__Order.__default.lte |y#0@@13| (Lexicographic__Byte__Order.__default.maximum $ly@@507 |s#0@@270|))) :pattern ( (MapType0Select |s#0@@270| ($Box |y#0@@13|))) ))) ($Is (Lexicographic__Byte__Order.__default.maximum $ly@@507 |s#0@@270|) (TSeq Tclass.NativeTypes.byte)))) :qid |totalorderidfyLexicographicByteOrder.758:22| :skolemid |3795| :pattern ( (Lexicographic__Byte__Order.__default.maximum $ly@@507 |s#0@@270|)) ))))
(assert (forall (($ly@@508 T@U) ($Heap@@65 T@U) (|s#0@@271| T@U) ) (!  (=> (and (and (and (= (type $ly@@508) LayerTypeType) (= (type $Heap@@65) (MapType0Type refType MapType1Type))) (= (type |s#0@@271|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@65) ($Is |s#0@@271| (TSet (TSeq Tclass.NativeTypes.byte))))) (= (|Lexicographic__Byte__Order.__default.maximum#requires| $ly@@508 |s#0@@271|) (>= (|Set#Card| |s#0@@271|) (LitInt 1)))) :qid |totalorderidfyLexicographicByteOrder.758:22| :skolemid |3796| :pattern ( (|Lexicographic__Byte__Order.__default.maximum#requires| $ly@@508 |s#0@@271|) ($IsGoodHeap $Heap@@65)) )))
(assert (forall ((arg0@@637 T@U) ) (! (= (type (|$let#30_a| arg0@@637)) (SeqType BoxType)) :qid |funType:$let#30_a| :pattern ( (|$let#30_a| arg0@@637)) )))
(assert (forall ((s@@55 T@U) ) (!  (=> (and (= (type s@@55) (MapType0Type BoxType boolType)) (|$let#30$canCall| s@@55)) (and ($Is (|$let#30_a| s@@55) (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select s@@55 ($Box (|$let#30_a| s@@55)))))) :qid |totalorderidfyLexicographicByteOrder.763:5| :skolemid |3797| :pattern ( (|$let#30_a| s@@55)) )))
(assert  (=> true (forall (($ly@@509 T@U) ($Heap@@66 T@U) (|s#0@@272| T@U) ) (!  (=> (and (and (and (= (type $ly@@509) LayerTypeType) (= (type $Heap@@66) (MapType0Type refType MapType1Type))) (= (type |s#0@@272|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximum#canCall| |s#0@@272|) (and (and ($IsGoodHeap $Heap@@66) ($Is |s#0@@272| (TSet (TSeq Tclass.NativeTypes.byte)))) (>= (|Set#Card| |s#0@@272|) (LitInt 1))))) (and (and (|$let#30$canCall| |s#0@@272|) (let ((|s'#1@@2| (|Set#Difference| |s#0@@272| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#30_a| |s#0@@272|)))))) (=> (not (|Set#Equal| |s'#1@@2| (|Set#Empty| BoxType))) (and (|Lexicographic__Byte__Order.__default.maximum#canCall| |s'#1@@2|) (let ((|m'#1@@4| (Lexicographic__Byte__Order.__default.maximum $ly@@509 |s'#1@@2|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |m'#1@@4| (|$let#30_a| |s#0@@272|))))))) (= (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@509) |s#0@@272|) (let ((|a#0@@158| (|$let#30_a| |s#0@@272|))) (let ((|s'#0@@59| (|Set#Difference| |s#0@@272| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#0@@158|))))) (ite (|Set#Equal| |s'#0@@59| (|Set#Empty| BoxType)) |a#0@@158| (let ((|m'#0@@13| (Lexicographic__Byte__Order.__default.maximum $ly@@509 |s'#0@@59|))) (ite (Lexicographic__Byte__Order.__default.lt |m'#0@@13| |a#0@@158|) |a#0@@158| |m'#0@@13|)))))))) :qid |totalorderidfyLexicographicByteOrder.758:22| :skolemid |3798| :pattern ( (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@509) |s#0@@272|) ($IsGoodHeap $Heap@@66)) ))))
(assert  (=> true (forall (($ly@@510 T@U) ($Heap@@67 T@U) (|s#0@@273| T@U) ) (!  (=> (and (and (and (= (type $ly@@510) LayerTypeType) (= (type $Heap@@67) (MapType0Type refType MapType1Type))) (= (type |s#0@@273|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximum#canCall| (Lit |s#0@@273|)) (and (and ($IsGoodHeap $Heap@@67) ($Is |s#0@@273| (TSet (TSeq Tclass.NativeTypes.byte)))) (>= (|Set#Card| (Lit |s#0@@273|)) (LitInt 1))))) (and (and (|$let#30$canCall| (Lit |s#0@@273|)) (let ((|s'#3@@2| (|Set#Difference| |s#0@@273| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#30_a| (Lit |s#0@@273|))))))) (=> (not (|Set#Equal| |s'#3@@2| (|Set#Empty| BoxType))) (and (|Lexicographic__Byte__Order.__default.maximum#canCall| |s'#3@@2|) (let ((|m'#3@@2| (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@510) |s'#3@@2|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |m'#3@@2| (|$let#30_a| (Lit |s#0@@273|)))))))) (= (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@510) (Lit |s#0@@273|)) (let ((|a#1@@5| (|$let#30_a| (Lit |s#0@@273|)))) (let ((|s'#2@@2| (|Set#Difference| |s#0@@273| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#1@@5|))))) (ite (|Set#Equal| |s'#2@@2| (|Set#Empty| BoxType)) |a#1@@5| (let ((|m'#2@@3| (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@510) |s'#2@@2|))) (ite (Lexicographic__Byte__Order.__default.lt |m'#2@@3| |a#1@@5|) |a#1@@5| |m'#2@@3|)))))))) :qid |totalorderidfyLexicographicByteOrder.758:22| :weight 3 :skolemid |3799| :pattern ( (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@510) (Lit |s#0@@273|)) ($IsGoodHeap $Heap@@67)) ))))
(assert (forall ((arg0@@638 T@U) (arg1@@312 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.maximumOpt arg0@@638 arg1@@312)) DatatypeTypeType) :qid |funType:Lexicographic__Byte__Order.__default.maximumOpt| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt arg0@@638 arg1@@312)) )))
(assert (forall (($ly@@511 T@U) (|s#0@@274| T@U) ) (!  (=> (and (= (type $ly@@511) LayerTypeType) (= (type |s#0@@274|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@511) |s#0@@274|) (Lexicographic__Byte__Order.__default.maximumOpt $ly@@511 |s#0@@274|))) :qid |totalorderidfyLexicographicByteOrder.779:22| :skolemid |3800| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@511) |s#0@@274|)) )))
(assert (forall (($ly@@512 T@U) (|s#0@@275| T@U) ) (!  (=> (and (= (type $ly@@512) LayerTypeType) (= (type |s#0@@275|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.maximumOpt $ly@@512 |s#0@@275|) (Lexicographic__Byte__Order.__default.maximumOpt $LZ |s#0@@275|))) :qid |totalorderidfyLexicographicByteOrder.779:22| :skolemid |3801| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt (AsFuelBottom $ly@@512) |s#0@@275|)) )))
(assert  (=> true (forall (($ly@@513 T@U) (|s#0@@276| T@U) ) (!  (=> (and (and (= (type $ly@@513) LayerTypeType) (= (type |s#0@@276|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximumOpt#canCall| |s#0@@276|) ($Is |s#0@@276| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (and (and (=> (Options.Option.Some_q (Lexicographic__Byte__Order.__default.maximumOpt $ly@@513 |s#0@@276|)) (U_2_bool (MapType0Select |s#0@@276| (Options.Option.value (Lexicographic__Byte__Order.__default.maximumOpt $ly@@513 |s#0@@276|))))) (=> (Options.Option.Some_q (Lexicographic__Byte__Order.__default.maximumOpt $ly@@513 |s#0@@276|)) (forall ((|y#0@@14| T@U) ) (!  (=> (= (type |y#0@@14|) (SeqType BoxType)) (=> (and ($Is |y#0@@14| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select |s#0@@276| ($Box |y#0@@14|)))) (Lexicographic__Byte__Order.__default.lte |y#0@@14| ($Unbox (SeqType BoxType) (Options.Option.value (Lexicographic__Byte__Order.__default.maximumOpt $ly@@513 |s#0@@276|)))))) :qid |totalorderidfyLexicographicByteOrder.781:30| :skolemid |3802| :pattern ( (Lexicographic__Byte__Order.__default.lte |y#0@@14| ($Unbox (SeqType BoxType) (Options.Option.value (Lexicographic__Byte__Order.__default.maximumOpt $ly@@513 |s#0@@276|))))) :pattern ( (MapType0Select |s#0@@276| ($Box |y#0@@14|))) )))) (=> (Options.Option.None_q (Lexicographic__Byte__Order.__default.maximumOpt $ly@@513 |s#0@@276|)) (|Set#Equal| |s#0@@276| (|Set#Empty| BoxType)))) ($Is (Lexicographic__Byte__Order.__default.maximumOpt $ly@@513 |s#0@@276|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte))))) :qid |totalorderidfyLexicographicByteOrder.779:22| :skolemid |3803| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt $ly@@513 |s#0@@276|)) ))))
(assert (forall (($ly@@514 T@U) (|s#0@@277| T@U) ) (!  (=> (and (and (= (type $ly@@514) LayerTypeType) (= (type |s#0@@277|) (MapType0Type BoxType boolType))) ($Is |s#0@@277| (TSet (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.maximumOpt#requires| $ly@@514 |s#0@@277|) true)) :qid |totalorderidfyLexicographicByteOrder.779:22| :skolemid |3804| :pattern ( (|Lexicographic__Byte__Order.__default.maximumOpt#requires| $ly@@514 |s#0@@277|)) )))
(assert (= (type StartFuel_Lexicographic_Byte_Order._default.maximum) LayerTypeType))
(assert  (=> true (forall (($ly@@515 T@U) (|s#0@@278| T@U) ) (!  (=> (and (and (= (type $ly@@515) LayerTypeType) (= (type |s#0@@278|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximumOpt#canCall| |s#0@@278|) ($Is |s#0@@278| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (|Set#Equal| |s#0@@278| (|Set#Empty| BoxType))) (|Lexicographic__Byte__Order.__default.maximum#canCall| |s#0@@278|)) (= (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@515) |s#0@@278|) (ite (|Set#Equal| |s#0@@278| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Lexicographic__Byte__Order.__default.maximum StartFuel_Lexicographic_Byte_Order._default.maximum |s#0@@278|))))))) :qid |totalorderidfyLexicographicByteOrder.779:22| :skolemid |3805| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@515) |s#0@@278|)) ))))
(assert  (=> true (forall (($ly@@516 T@U) (|s#0@@279| T@U) ) (!  (=> (and (and (= (type $ly@@516) LayerTypeType) (= (type |s#0@@279|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximumOpt#canCall| (Lit |s#0@@279|)) ($Is |s#0@@279| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (|Set#Equal| |s#0@@279| (|Set#Empty| BoxType))) (|Lexicographic__Byte__Order.__default.maximum#canCall| (Lit |s#0@@279|))) (= (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@516) (Lit |s#0@@279|)) (ite (|Set#Equal| |s#0@@279| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Lexicographic__Byte__Order.__default.maximum StartFuel_Lexicographic_Byte_Order._default.maximum (Lit |s#0@@279|)))))))) :qid |totalorderidfyLexicographicByteOrder.779:22| :weight 3 :skolemid |3806| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@516) (Lit |s#0@@279|))) ))))
(assert  (=> true (forall ((|a#0@@159| T@U) (|b#0@@112| T@U) ) (!  (=> (and (and (= (type |a#0@@159|) (SeqType BoxType)) (= (type |b#0@@112|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lt#canCall| |a#0@@159| |b#0@@112|) (and ($Is |a#0@@159| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@112| (TSeq Tclass.NativeTypes.byte))))) true) :qid |totalorderidfyTotalOrderLexicographicByteOrder.17:16| :skolemid |3807| :pattern ( (Lexicographic__Byte__Order.__default.lt |a#0@@159| |b#0@@112|)) ))))
(assert (forall ((|a#0@@160| T@U) (|b#0@@113| T@U) ) (!  (=> (and (and (= (type |a#0@@160|) (SeqType BoxType)) (= (type |b#0@@113|) (SeqType BoxType))) (and ($Is |a#0@@160| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@113| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.lt#requires| |a#0@@160| |b#0@@113|) true)) :qid |totalorderidfyTotalOrderLexicographicByteOrder.17:16| :skolemid |3808| :pattern ( (|Lexicographic__Byte__Order.__default.lt#requires| |a#0@@160| |b#0@@113|)) )))
(assert  (=> true (forall ((|a#0@@161| T@U) (|b#0@@114| T@U) ) (!  (=> (and (and (= (type |a#0@@161|) (SeqType BoxType)) (= (type |b#0@@114|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lt#canCall| |a#0@@161| |b#0@@114|) (and ($Is |a#0@@161| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@114| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@161| |b#0@@114|) (= (Lexicographic__Byte__Order.__default.lt |a#0@@161| |b#0@@114|)  (and (Lexicographic__Byte__Order.__default.lte |a#0@@161| |b#0@@114|) (not (|Seq#Equal| |a#0@@161| |b#0@@114|)))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.17:16| :skolemid |3809| :pattern ( (Lexicographic__Byte__Order.__default.lt |a#0@@161| |b#0@@114|)) ))))
(assert  (=> true (forall ((|a#0@@162| T@U) (|b#0@@115| T@U) ) (!  (=> (and (and (= (type |a#0@@162|) (SeqType BoxType)) (= (type |b#0@@115|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |a#0@@162|) (Lit |b#0@@115|)) (and ($Is |a#0@@162| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@115| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |a#0@@162|) (Lit |b#0@@115|)) (= (Lexicographic__Byte__Order.__default.lt (Lit |a#0@@162|) (Lit |b#0@@115|))  (and (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@162|) (Lit |b#0@@115|)) (not (|Seq#Equal| |a#0@@162| |b#0@@115|)))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.17:16| :weight 3 :skolemid |3810| :pattern ( (Lexicographic__Byte__Order.__default.lt (Lit |a#0@@162|) (Lit |b#0@@115|))) ))))
(assert (forall ((arg0@@639 T@U) (arg1@@313 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.Min arg0@@639 arg1@@313)) (SeqType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.Min| :pattern ( (Lexicographic__Byte__Order.__default.Min arg0@@639 arg1@@313)) )))
(assert  (=> true (forall ((|a#0@@163| T@U) (|b#0@@116| T@U) ) (!  (=> (and (and (= (type |a#0@@163|) (SeqType BoxType)) (= (type |b#0@@116|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Min#canCall| |a#0@@163| |b#0@@116|) (and ($Is |a#0@@163| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@116| (TSeq Tclass.NativeTypes.byte))))) ($Is (Lexicographic__Byte__Order.__default.Min |a#0@@163| |b#0@@116|) (TSeq Tclass.NativeTypes.byte))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.29:16| :skolemid |3811| :pattern ( (Lexicographic__Byte__Order.__default.Min |a#0@@163| |b#0@@116|)) ))))
(assert (forall ((|a#0@@164| T@U) (|b#0@@117| T@U) ) (!  (=> (and (and (= (type |a#0@@164|) (SeqType BoxType)) (= (type |b#0@@117|) (SeqType BoxType))) (and ($Is |a#0@@164| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@117| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.Min#requires| |a#0@@164| |b#0@@117|) true)) :qid |totalorderidfyTotalOrderLexicographicByteOrder.29:16| :skolemid |3812| :pattern ( (|Lexicographic__Byte__Order.__default.Min#requires| |a#0@@164| |b#0@@117|)) )))
(assert  (=> true (forall ((|a#0@@165| T@U) (|b#0@@118| T@U) ) (!  (=> (and (and (= (type |a#0@@165|) (SeqType BoxType)) (= (type |b#0@@118|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Min#canCall| |a#0@@165| |b#0@@118|) (and ($Is |a#0@@165| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@118| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@165| |b#0@@118|) (= (Lexicographic__Byte__Order.__default.Min |a#0@@165| |b#0@@118|) (ite (Lexicographic__Byte__Order.__default.lte |a#0@@165| |b#0@@118|) |a#0@@165| |b#0@@118|)))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.29:16| :skolemid |3813| :pattern ( (Lexicographic__Byte__Order.__default.Min |a#0@@165| |b#0@@118|)) ))))
(assert  (=> true (forall ((|a#0@@166| T@U) (|b#0@@119| T@U) ) (!  (=> (and (and (= (type |a#0@@166|) (SeqType BoxType)) (= (type |b#0@@119|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Min#canCall| (Lit |a#0@@166|) (Lit |b#0@@119|)) (and ($Is |a#0@@166| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@119| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |a#0@@166|) (Lit |b#0@@119|)) (= (Lexicographic__Byte__Order.__default.Min (Lit |a#0@@166|) (Lit |b#0@@119|)) (ite (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@166|) (Lit |b#0@@119|)) |a#0@@166| |b#0@@119|)))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.29:16| :weight 3 :skolemid |3814| :pattern ( (Lexicographic__Byte__Order.__default.Min (Lit |a#0@@166|) (Lit |b#0@@119|))) ))))
(assert (forall ((arg0@@640 T@U) (arg1@@314 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.Max arg0@@640 arg1@@314)) (SeqType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.Max| :pattern ( (Lexicographic__Byte__Order.__default.Max arg0@@640 arg1@@314)) )))
(assert  (=> true (forall ((|a#0@@167| T@U) (|b#0@@120| T@U) ) (!  (=> (and (and (= (type |a#0@@167|) (SeqType BoxType)) (= (type |b#0@@120|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Max#canCall| |a#0@@167| |b#0@@120|) (and ($Is |a#0@@167| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@120| (TSeq Tclass.NativeTypes.byte))))) ($Is (Lexicographic__Byte__Order.__default.Max |a#0@@167| |b#0@@120|) (TSeq Tclass.NativeTypes.byte))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.34:16| :skolemid |3815| :pattern ( (Lexicographic__Byte__Order.__default.Max |a#0@@167| |b#0@@120|)) ))))
(assert (forall ((|a#0@@168| T@U) (|b#0@@121| T@U) ) (!  (=> (and (and (= (type |a#0@@168|) (SeqType BoxType)) (= (type |b#0@@121|) (SeqType BoxType))) (and ($Is |a#0@@168| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@121| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.Max#requires| |a#0@@168| |b#0@@121|) true)) :qid |totalorderidfyTotalOrderLexicographicByteOrder.34:16| :skolemid |3816| :pattern ( (|Lexicographic__Byte__Order.__default.Max#requires| |a#0@@168| |b#0@@121|)) )))
(assert  (=> true (forall ((|a#0@@169| T@U) (|b#0@@122| T@U) ) (!  (=> (and (and (= (type |a#0@@169|) (SeqType BoxType)) (= (type |b#0@@122|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Max#canCall| |a#0@@169| |b#0@@122|) (and ($Is |a#0@@169| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@122| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@169| |b#0@@122|) (= (Lexicographic__Byte__Order.__default.Max |a#0@@169| |b#0@@122|) (ite (Lexicographic__Byte__Order.__default.lte |a#0@@169| |b#0@@122|) |b#0@@122| |a#0@@169|)))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.34:16| :skolemid |3817| :pattern ( (Lexicographic__Byte__Order.__default.Max |a#0@@169| |b#0@@122|)) ))))
(assert  (=> true (forall ((|a#0@@170| T@U) (|b#0@@123| T@U) ) (!  (=> (and (and (= (type |a#0@@170|) (SeqType BoxType)) (= (type |b#0@@123|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Max#canCall| (Lit |a#0@@170|) (Lit |b#0@@123|)) (and ($Is |a#0@@170| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@123| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |a#0@@170|) (Lit |b#0@@123|)) (= (Lexicographic__Byte__Order.__default.Max (Lit |a#0@@170|) (Lit |b#0@@123|)) (ite (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@170|) (Lit |b#0@@123|)) |b#0@@123| |a#0@@170|)))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.34:16| :weight 3 :skolemid |3818| :pattern ( (Lexicographic__Byte__Order.__default.Max (Lit |a#0@@170|) (Lit |b#0@@123|))) ))))
(assert (forall (($ly@@517 T@U) (|run#0@@144| T@U) ) (!  (=> (and (= (type $ly@@517) LayerTypeType) (= (type |run#0@@144|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@517) |run#0@@144|) (Lexicographic__Byte__Order.__default.IsSorted $ly@@517 |run#0@@144|))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.46:23| :skolemid |3819| :pattern ( (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@517) |run#0@@144|)) )))
(assert (forall (($ly@@518 T@U) (|run#0@@145| T@U) ) (!  (=> (and (= (type $ly@@518) LayerTypeType) (= (type |run#0@@145|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IsSorted $ly@@518 |run#0@@145|) (Lexicographic__Byte__Order.__default.IsSorted $LZ |run#0@@145|))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.46:23| :skolemid |3820| :pattern ( (Lexicographic__Byte__Order.__default.IsSorted (AsFuelBottom $ly@@518) |run#0@@145|)) )))
(assert  (=> true (forall (($ly@@519 T@U) (|run#0@@146| T@U) ) (!  (=> (and (and (= (type $ly@@519) LayerTypeType) (= (type |run#0@@146|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsSorted#canCall| |run#0@@146|) ($Is |run#0@@146| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (=> (= (|Seq#Length| |run#0@@146|) (LitInt 0)) (Lexicographic__Byte__Order.__default.IsSorted $ly@@519 |run#0@@146|)) (=> (= (|Seq#Length| |run#0@@146|) (LitInt 1)) (Lexicographic__Byte__Order.__default.IsSorted $ly@@519 |run#0@@146|)))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.46:23| :skolemid |3821| :pattern ( (Lexicographic__Byte__Order.__default.IsSorted $ly@@519 |run#0@@146|)) ))))
(assert (forall (($ly@@520 T@U) (|run#0@@147| T@U) ) (!  (=> (and (and (= (type $ly@@520) LayerTypeType) (= (type |run#0@@147|) (SeqType BoxType))) ($Is |run#0@@147| (TSeq (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.IsSorted#requires| $ly@@520 |run#0@@147|) true)) :qid |totalorderidfyTotalOrderLexicographicByteOrder.46:23| :skolemid |3822| :pattern ( (|Lexicographic__Byte__Order.__default.IsSorted#requires| $ly@@520 |run#0@@147|)) )))
(assert  (=> true (forall (($ly@@521 T@U) (|run#0@@148| T@U) ) (!  (=> (and (and (= (type $ly@@521) LayerTypeType) (= (type |run#0@@148|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsSorted#canCall| |run#0@@148|) ($Is |run#0@@148| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#0@@118| Int) (|j#0@@20| Int) ) (!  (=> (<= (LitInt 0) |i#0@@118|) (=> (<= |i#0@@118| |j#0@@20|) (=> (< |j#0@@20| (|Seq#Length| |run#0@@148|)) (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@148| |i#0@@118|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@148| |j#0@@20|)))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.50:12| :skolemid |3824| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@148| |j#0@@20|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@148| |i#0@@118|))) )) (= (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@521) |run#0@@148|) (forall ((|i#0@@119| Int) (|j#0@@21| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@119|) (<= |i#0@@119| |j#0@@21|)) (< |j#0@@21| (|Seq#Length| |run#0@@148|))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@148| |i#0@@119|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@148| |j#0@@21|))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.50:12| :skolemid |3823| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@148| |j#0@@21|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@148| |i#0@@119|))) ))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.46:23| :skolemid |3825| :pattern ( (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@521) |run#0@@148|)) ))))
(assert  (=> true (forall (($ly@@522 T@U) (|run#0@@149| T@U) ) (!  (=> (and (and (= (type $ly@@522) LayerTypeType) (= (type |run#0@@149|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsSorted#canCall| (Lit |run#0@@149|)) ($Is |run#0@@149| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#1@@44| Int) (|j#1@@10| Int) ) (!  (=> (<= (LitInt 0) |i#1@@44|) (=> (<= |i#1@@44| |j#1@@10|) (=> (< |j#1@@10| (|Seq#Length| (Lit |run#0@@149|))) (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@149|) |i#1@@44|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@149|) |j#1@@10|)))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.50:12| :skolemid |3827| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@149| |j#1@@10|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@149| |i#1@@44|))) )) (= (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@522) (Lit |run#0@@149|)) (forall ((|i#1@@45| Int) (|j#1@@11| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@45|) (<= |i#1@@45| |j#1@@11|)) (< |j#1@@11| (|Seq#Length| (Lit |run#0@@149|)))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@149|) |i#1@@45|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@149|) |j#1@@11|))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.50:12| :skolemid |3826| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@149| |j#1@@11|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@149| |i#1@@45|))) ))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.46:23| :weight 3 :skolemid |3828| :pattern ( (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@522) (Lit |run#0@@149|))) ))))
(assert  (=> true (forall ((|run#0@@150| T@U) ) (!  (=> (and (= (type |run#0@@150|) (SeqType BoxType)) (or (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@150|) ($Is |run#0@@150| (TSeq (TSeq Tclass.NativeTypes.byte))))) true) :qid |totalorderidfyTotalOrderLexicographicByteOrder.53:38| :skolemid |3829| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@150|)) ))))
(assert (forall ((|run#0@@151| T@U) ) (!  (=> (and (= (type |run#0@@151|) (SeqType BoxType)) ($Is |run#0@@151| (TSeq (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@151|) true)) :qid |totalorderidfyTotalOrderLexicographicByteOrder.53:38| :skolemid |3830| :pattern ( (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@151|)) )))
(assert  (=> true (forall ((|run#0@@152| T@U) ) (!  (=> (and (= (type |run#0@@152|) (SeqType BoxType)) (or (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@152|) ($Is |run#0@@152| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#0@@120| Int) (|j#0@@22| Int) ) (!  (=> (<= (LitInt 0) |i#0@@120|) (=> (< |i#0@@120| |j#0@@22|) (=> (< |j#0@@22| (|Seq#Length| |run#0@@152|)) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@152| |i#0@@120|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@152| |j#0@@22|)))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.55:12| :skolemid |3832| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@152| |j#0@@22|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@152| |i#0@@120|))) )) (= (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@152|) (forall ((|i#0@@121| Int) (|j#0@@23| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@121|) (< |i#0@@121| |j#0@@23|)) (< |j#0@@23| (|Seq#Length| |run#0@@152|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@152| |i#0@@121|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@152| |j#0@@23|))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.55:12| :skolemid |3831| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@152| |j#0@@23|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@152| |i#0@@121|))) ))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.53:38| :skolemid |3833| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@152|)) ))))
(assert  (=> true (forall ((|run#0@@153| T@U) ) (!  (=> (and (= (type |run#0@@153|) (SeqType BoxType)) (or (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@153|)) ($Is |run#0@@153| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#1@@46| Int) (|j#1@@12| Int) ) (!  (=> (<= (LitInt 0) |i#1@@46|) (=> (< |i#1@@46| |j#1@@12|) (=> (< |j#1@@12| (|Seq#Length| (Lit |run#0@@153|))) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@153|) |i#1@@46|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@153|) |j#1@@12|)))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.55:12| :skolemid |3835| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@153| |j#1@@12|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@153| |i#1@@46|))) )) (= (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@153|)) (forall ((|i#1@@47| Int) (|j#1@@13| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@47|) (< |i#1@@47| |j#1@@13|)) (< |j#1@@13| (|Seq#Length| (Lit |run#0@@153|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@153|) |i#1@@47|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@153|) |j#1@@13|))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.55:12| :skolemid |3834| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@153| |j#1@@13|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@153| |i#1@@47|))) ))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.53:38| :weight 3 :skolemid |3836| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@153|))) ))))
(assert (forall (($ly@@523 T@U) (|run#0@@154| T@U) ) (!  (=> (and (= (type $ly@@523) LayerTypeType) (= (type |run#0@@154|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@523) |run#0@@154|) (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@523 |run#0@@154|))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.69:23| :skolemid |3837| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@523) |run#0@@154|)) )))
(assert (forall (($ly@@524 T@U) (|run#0@@155| T@U) ) (!  (=> (and (= (type $ly@@524) LayerTypeType) (= (type |run#0@@155|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@524 |run#0@@155|) (Lexicographic__Byte__Order.__default.IsStrictlySorted $LZ |run#0@@155|))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.69:23| :skolemid |3838| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySorted (AsFuelBottom $ly@@524) |run#0@@155|)) )))
(assert  (=> true (forall (($ly@@525 T@U) (|run#0@@156| T@U) ) (!  (=> (and (and (= (type $ly@@525) LayerTypeType) (= (type |run#0@@156|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| |run#0@@156|) ($Is |run#0@@156| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (and (=> (= (|Seq#Length| |run#0@@156|) (LitInt 0)) (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@525 |run#0@@156|)) (=> (= (|Seq#Length| |run#0@@156|) (LitInt 1)) (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@525 |run#0@@156|))) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@525 |run#0@@156|) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@156|)))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.69:23| :skolemid |3839| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@525 |run#0@@156|)) ))))
(assert (forall (($ly@@526 T@U) (|run#0@@157| T@U) ) (!  (=> (and (and (= (type $ly@@526) LayerTypeType) (= (type |run#0@@157|) (SeqType BoxType))) ($Is |run#0@@157| (TSeq (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.IsStrictlySorted#requires| $ly@@526 |run#0@@157|) true)) :qid |totalorderidfyTotalOrderLexicographicByteOrder.69:23| :skolemid |3840| :pattern ( (|Lexicographic__Byte__Order.__default.IsStrictlySorted#requires| $ly@@526 |run#0@@157|)) )))
(assert  (=> true (forall (($ly@@527 T@U) (|run#0@@158| T@U) ) (!  (=> (and (and (= (type $ly@@527) LayerTypeType) (= (type |run#0@@158|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| |run#0@@158|) ($Is |run#0@@158| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@158|) (= (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@527) |run#0@@158|) (let ((|b#0@@124| (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@158|))) (ite |b#0@@124| |b#0@@124| |b#0@@124|))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.69:23| :skolemid |3841| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@527) |run#0@@158|)) ))))
(assert  (=> true (forall (($ly@@528 T@U) (|run#0@@159| T@U) ) (!  (=> (and (and (= (type $ly@@528) LayerTypeType) (= (type |run#0@@159|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (Lit |run#0@@159|)) ($Is |run#0@@159| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@159|)) (= (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@528) (Lit |run#0@@159|)) (let ((|b#1@@7| (U_2_bool (Lit (bool_2_U (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@159|))))))) (ite |b#1@@7| |b#1@@7| |b#1@@7|))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.69:23| :weight 3 :skolemid |3842| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@528) (Lit |run#0@@159|))) ))))
(assert  (=> true (forall ((|e#0@@9| T@U) (|s#0@@280| T@U) ) (!  (=> (and (and (= (type |e#0@@9|) (SeqType BoxType)) (= (type |s#0@@280|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.BiggestInSet#canCall| |e#0@@9| |s#0@@280|) (and (and ($Is |e#0@@9| (TSeq Tclass.NativeTypes.byte)) ($Is |s#0@@280| (TSet (TSeq Tclass.NativeTypes.byte)))) (< 0 (|Set#Card| |s#0@@280|))))) true) :qid |totalorderidfyTotalOrderLexicographicByteOrder.138:26| :skolemid |3843| :pattern ( (Lexicographic__Byte__Order.__default.BiggestInSet |e#0@@9| |s#0@@280|)) ))))
(assert (forall ((|e#0@@10| T@U) (|s#0@@281| T@U) ) (!  (=> (and (and (= (type |e#0@@10|) (SeqType BoxType)) (= (type |s#0@@281|) (MapType0Type BoxType boolType))) (and ($Is |e#0@@10| (TSeq Tclass.NativeTypes.byte)) ($Is |s#0@@281| (TSet (TSeq Tclass.NativeTypes.byte))))) (= (|Lexicographic__Byte__Order.__default.BiggestInSet#requires| |e#0@@10| |s#0@@281|) (< 0 (|Set#Card| |s#0@@281|)))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.138:26| :skolemid |3844| :pattern ( (|Lexicographic__Byte__Order.__default.BiggestInSet#requires| |e#0@@10| |s#0@@281|)) )))
(assert  (=> true (forall ((|e#0@@11| T@U) (|s#0@@282| T@U) ) (!  (=> (and (and (= (type |e#0@@11|) (SeqType BoxType)) (= (type |s#0@@282|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.BiggestInSet#canCall| |e#0@@11| |s#0@@282|) (and (and ($Is |e#0@@11| (TSeq Tclass.NativeTypes.byte)) ($Is |s#0@@282| (TSet (TSeq Tclass.NativeTypes.byte)))) (< 0 (|Set#Card| |s#0@@282|))))) (and (=> (U_2_bool (MapType0Select |s#0@@282| ($Box |e#0@@11|))) (forall ((|e2#0@@1| T@U) ) (!  (=> (and (and (= (type |e2#0@@1|) (SeqType BoxType)) ($Is |e2#0@@1| (TSeq Tclass.NativeTypes.byte))) (and (U_2_bool (MapType0Select |s#0@@282| ($Box |e2#0@@1|))) (not (|Seq#Equal| |e2#0@@1| |e#0@@11|)))) (|Lexicographic__Byte__Order.__default.lt#canCall| |e2#0@@1| |e#0@@11|)) :qid |totalorderidfyTotalOrderLexicographicByteOrder.141:22| :skolemid |3846| :pattern ( (Lexicographic__Byte__Order.__default.lt |e2#0@@1| |e#0@@11|)) :pattern ( (MapType0Select |s#0@@282| ($Box |e2#0@@1|))) ))) (= (Lexicographic__Byte__Order.__default.BiggestInSet |e#0@@11| |s#0@@282|)  (and (U_2_bool (MapType0Select |s#0@@282| ($Box |e#0@@11|))) (forall ((|e2#0@@2| T@U) ) (!  (=> (= (type |e2#0@@2|) (SeqType BoxType)) (=> (and ($Is |e2#0@@2| (TSeq Tclass.NativeTypes.byte)) (and (U_2_bool (MapType0Select |s#0@@282| ($Box |e2#0@@2|))) (not (|Seq#Equal| |e2#0@@2| |e#0@@11|)))) (Lexicographic__Byte__Order.__default.lt |e2#0@@2| |e#0@@11|))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.141:22| :skolemid |3845| :pattern ( (Lexicographic__Byte__Order.__default.lt |e2#0@@2| |e#0@@11|)) :pattern ( (MapType0Select |s#0@@282| ($Box |e2#0@@2|))) )))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.138:26| :skolemid |3847| :pattern ( (Lexicographic__Byte__Order.__default.BiggestInSet |e#0@@11| |s#0@@282|)) ))))
(assert  (=> true (forall ((|e#0@@12| T@U) (|s#0@@283| T@U) ) (!  (=> (and (and (= (type |e#0@@12|) (SeqType BoxType)) (= (type |s#0@@283|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.BiggestInSet#canCall| (Lit |e#0@@12|) (Lit |s#0@@283|)) (and (and ($Is |e#0@@12| (TSeq Tclass.NativeTypes.byte)) ($Is |s#0@@283| (TSet (TSeq Tclass.NativeTypes.byte)))) (< 0 (|Set#Card| (Lit |s#0@@283|)))))) (and (=> (U_2_bool (MapType0Select (Lit |s#0@@283|) ($Box (Lit |e#0@@12|)))) (forall ((|e2#1@@1| T@U) ) (!  (=> (and (and (= (type |e2#1@@1|) (SeqType BoxType)) ($Is |e2#1@@1| (TSeq Tclass.NativeTypes.byte))) (and (U_2_bool (MapType0Select (Lit |s#0@@283|) ($Box |e2#1@@1|))) (not (|Seq#Equal| |e2#1@@1| |e#0@@12|)))) (|Lexicographic__Byte__Order.__default.lt#canCall| |e2#1@@1| (Lit |e#0@@12|))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.141:22| :skolemid |3849| :pattern ( (Lexicographic__Byte__Order.__default.lt |e2#1@@1| |e#0@@12|)) :pattern ( (MapType0Select |s#0@@283| ($Box |e2#1@@1|))) ))) (= (Lexicographic__Byte__Order.__default.BiggestInSet (Lit |e#0@@12|) (Lit |s#0@@283|))  (and (U_2_bool (MapType0Select (Lit |s#0@@283|) ($Box (Lit |e#0@@12|)))) (forall ((|e2#1@@2| T@U) ) (!  (=> (= (type |e2#1@@2|) (SeqType BoxType)) (=> (and ($Is |e2#1@@2| (TSeq Tclass.NativeTypes.byte)) (and (U_2_bool (MapType0Select (Lit |s#0@@283|) ($Box |e2#1@@2|))) (not (|Seq#Equal| |e2#1@@2| |e#0@@12|)))) (Lexicographic__Byte__Order.__default.lt |e2#1@@2| (Lit |e#0@@12|)))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.141:22| :skolemid |3848| :pattern ( (Lexicographic__Byte__Order.__default.lt |e2#1@@2| |e#0@@12|)) :pattern ( (MapType0Select |s#0@@283| ($Box |e2#1@@2|))) )))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.138:26| :weight 3 :skolemid |3850| :pattern ( (Lexicographic__Byte__Order.__default.BiggestInSet (Lit |e#0@@12|) (Lit |s#0@@283|))) ))))
(assert (forall ((arg0@@641 T@U) (arg1@@315 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.SortSet arg0@@641 arg1@@315)) (SeqType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.SortSet| :pattern ( (Lexicographic__Byte__Order.__default.SortSet arg0@@641 arg1@@315)) )))
(assert (forall (($ly@@529 T@U) (|s#0@@284| T@U) ) (!  (=> (and (= (type $ly@@529) LayerTypeType) (= (type |s#0@@284|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.SortSet ($LS $ly@@529) |s#0@@284|) (Lexicographic__Byte__Order.__default.SortSet $ly@@529 |s#0@@284|))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.169:12| :skolemid |3851| :pattern ( (Lexicographic__Byte__Order.__default.SortSet ($LS $ly@@529) |s#0@@284|)) )))
(assert (forall (($ly@@530 T@U) (|s#0@@285| T@U) ) (!  (=> (and (= (type $ly@@530) LayerTypeType) (= (type |s#0@@285|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.SortSet $ly@@530 |s#0@@285|) (Lexicographic__Byte__Order.__default.SortSet $LZ |s#0@@285|))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.169:12| :skolemid |3852| :pattern ( (Lexicographic__Byte__Order.__default.SortSet (AsFuelBottom $ly@@530) |s#0@@285|)) )))
(assert  (=> true (forall (($ly@@531 T@U) (|s#0@@286| T@U) ) (!  (=> (and (and (= (type $ly@@531) LayerTypeType) (= (type |s#0@@286|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SortSet#canCall| |s#0@@286|) ($Is |s#0@@286| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (and (and (= (|Set#Card| |s#0@@286|) (|Seq#Length| (Lexicographic__Byte__Order.__default.SortSet $ly@@531 |s#0@@286|))) (forall ((|t#0@@14| T@U) ) (!  (=> (and (= (type |t#0@@14|) (SeqType BoxType)) ($Is |t#0@@14| (TSeq Tclass.NativeTypes.byte))) (= (U_2_bool (MapType0Select |s#0@@286| ($Box |t#0@@14|))) (|Seq#Contains| (Lexicographic__Byte__Order.__default.SortSet $ly@@531 |s#0@@286|) ($Box |t#0@@14|)))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.171:20| :skolemid |3853| :pattern ( (|Seq#Contains| (Lexicographic__Byte__Order.__default.SortSet $ly@@531 |s#0@@286|) ($Box |t#0@@14|))) :pattern ( (MapType0Select |s#0@@286| ($Box |t#0@@14|))) ))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted (Lexicographic__Byte__Order.__default.SortSet $ly@@531 |s#0@@286|))) ($Is (Lexicographic__Byte__Order.__default.SortSet $ly@@531 |s#0@@286|) (TSeq (TSeq Tclass.NativeTypes.byte))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.169:12| :skolemid |3854| :pattern ( (Lexicographic__Byte__Order.__default.SortSet $ly@@531 |s#0@@286|)) ))))
(assert (forall (($ly@@532 T@U) ($Heap@@68 T@U) (|s#0@@287| T@U) ) (!  (=> (and (and (and (= (type $ly@@532) LayerTypeType) (= (type $Heap@@68) (MapType0Type refType MapType1Type))) (= (type |s#0@@287|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@68) ($Is |s#0@@287| (TSet (TSeq Tclass.NativeTypes.byte))))) (= (|Lexicographic__Byte__Order.__default.SortSet#requires| $ly@@532 |s#0@@287|) true)) :qid |totalorderidfyTotalOrderLexicographicByteOrder.169:12| :skolemid |3855| :pattern ( (|Lexicographic__Byte__Order.__default.SortSet#requires| $ly@@532 |s#0@@287|) ($IsGoodHeap $Heap@@68)) )))
(assert (forall ((arg0@@642 T@U) ) (! (= (type (|$let#33_e| arg0@@642)) (SeqType BoxType)) :qid |funType:$let#33_e| :pattern ( (|$let#33_e| arg0@@642)) )))
(assert (forall ((s@@56 T@U) ) (!  (=> (and (= (type s@@56) (MapType0Type BoxType boolType)) (|$let#33$canCall| s@@56)) (and ($Is (|$let#33_e| s@@56) (TSeq Tclass.NativeTypes.byte)) (Lexicographic__Byte__Order.__default.BiggestInSet (|$let#33_e| s@@56) s@@56))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.180:7| :skolemid |3856| :pattern ( (|$let#33_e| s@@56)) )))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted8) LayerTypeType))
(assert  (=> true (forall (($ly@@533 T@U) ($Heap@@69 T@U) (|s#0@@288| T@U) ) (!  (=> (and (and (and (= (type $ly@@533) LayerTypeType) (= (type $Heap@@69) (MapType0Type refType MapType1Type))) (= (type |s#0@@288|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SortSet#canCall| |s#0@@288|) (and ($IsGoodHeap $Heap@@69) ($Is |s#0@@288| (TSet (TSeq Tclass.NativeTypes.byte)))))) (and (=> (not (= (|Set#Card| |s#0@@288|) (LitInt 0))) (and (|$let#33$canCall| |s#0@@288|) (|Lexicographic__Byte__Order.__default.SortSet#canCall| (|Set#Difference| |s#0@@288| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#33_e| |s#0@@288|))))))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted8)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted8)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted8) MoreFuel_Lexicographic_Byte_Order._default.IsSorted8)) (= (Lexicographic__Byte__Order.__default.SortSet ($LS $ly@@533) |s#0@@288|) (ite (= (|Set#Card| |s#0@@288|) (LitInt 0)) (|Seq#Empty| BoxType) (let ((|e#0@@13| (|$let#33_e| |s#0@@288|))) (|Seq#Append| (Lexicographic__Byte__Order.__default.SortSet $ly@@533 (|Set#Difference| |s#0@@288| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |e#0@@13|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box |e#0@@13|))))))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.169:12| :skolemid |3857| :pattern ( (Lexicographic__Byte__Order.__default.SortSet ($LS $ly@@533) |s#0@@288|) ($IsGoodHeap $Heap@@69)) ))))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted9) LayerTypeType))
(assert  (=> true (forall (($ly@@534 T@U) ($Heap@@70 T@U) (|s#0@@289| T@U) ) (!  (=> (and (and (and (= (type $ly@@534) LayerTypeType) (= (type $Heap@@70) (MapType0Type refType MapType1Type))) (= (type |s#0@@289|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SortSet#canCall| (Lit |s#0@@289|)) (and ($IsGoodHeap $Heap@@70) ($Is |s#0@@289| (TSet (TSeq Tclass.NativeTypes.byte)))))) (and (=> (not (= (|Set#Card| (Lit |s#0@@289|)) (LitInt 0))) (and (|$let#33$canCall| (Lit |s#0@@289|)) (|Lexicographic__Byte__Order.__default.SortSet#canCall| (|Set#Difference| |s#0@@289| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#33_e| (Lit |s#0@@289|)))))))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted9)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted9)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted9) MoreFuel_Lexicographic_Byte_Order._default.IsSorted9)) (= (Lexicographic__Byte__Order.__default.SortSet ($LS $ly@@534) (Lit |s#0@@289|)) (ite (= (|Set#Card| (Lit |s#0@@289|)) (LitInt 0)) (|Seq#Empty| BoxType) (let ((|e#1@@0| (|$let#33_e| (Lit |s#0@@289|)))) (|Seq#Append| (Lexicographic__Byte__Order.__default.SortSet ($LS $ly@@534) (|Set#Difference| |s#0@@289| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |e#1@@0|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box |e#1@@0|))))))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.169:12| :weight 3 :skolemid |3858| :pattern ( (Lexicographic__Byte__Order.__default.SortSet ($LS $ly@@534) (Lit |s#0@@289|)) ($IsGoodHeap $Heap@@70)) ))))
(assert (forall ((arg0@@643 T@U) (arg1@@316 T@U) (arg2@@186 T@U) ) (! (= (type (|#BetreeSpec.LookupQuery.LookupQuery| arg0@@643 arg1@@316 arg2@@186)) DatatypeTypeType) :qid |funType:#BetreeSpec.LookupQuery.LookupQuery| :pattern ( (|#BetreeSpec.LookupQuery.LookupQuery| arg0@@643 arg1@@316 arg2@@186)) )))
(assert (forall ((|a#0#0#0@@5| T@U) (|a#0#1#0@@2| T@U) (|a#0#2#0| T@U) ) (!  (=> (and (and (= (type |a#0#0#0@@5|) (SeqType BoxType)) (= (type |a#0#1#0@@2|) (SeqType BoxType))) (= (type |a#0#2#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#BetreeSpec.LookupQuery.LookupQuery| |a#0#0#0@@5| |a#0#1#0@@2| |a#0#2#0|)) |##BetreeSpec.LookupQuery.LookupQuery|)) :qid |BetreeSpecidfy.76:38| :skolemid |3859| :pattern ( (|#BetreeSpec.LookupQuery.LookupQuery| |a#0#0#0@@5| |a#0#1#0@@2| |a#0#2#0|)) )))
(assert (forall ((d@@179 T@U) ) (!  (=> (= (type d@@179) DatatypeTypeType) (= (BetreeSpec.LookupQuery.LookupQuery_q d@@179) (= (DatatypeCtorId d@@179) |##BetreeSpec.LookupQuery.LookupQuery|))) :qid |unknown.0:0| :skolemid |3860| :pattern ( (BetreeSpec.LookupQuery.LookupQuery_q d@@179)) )))
(assert (forall ((d@@180 T@U) ) (!  (=> (and (= (type d@@180) DatatypeTypeType) (BetreeSpec.LookupQuery.LookupQuery_q d@@180)) (exists ((|a#1#0#0@@5| T@U) (|a#1#1#0@@2| T@U) (|a#1#2#0| T@U) ) (!  (and (and (and (= (type |a#1#0#0@@5|) (SeqType BoxType)) (= (type |a#1#1#0@@2|) (SeqType BoxType))) (= (type |a#1#2#0|) (SeqType BoxType))) (= d@@180 (|#BetreeSpec.LookupQuery.LookupQuery| |a#1#0#0@@5| |a#1#1#0@@2| |a#1#2#0|))) :qid |BetreeSpecidfy.76:38| :skolemid |3861| :no-pattern (type |a#1#0#0@@5|) :no-pattern (type |a#1#1#0@@2|) :no-pattern (type |a#1#2#0|) :no-pattern (U_2_int |a#1#0#0@@5|) :no-pattern (U_2_bool |a#1#0#0@@5|) :no-pattern (U_2_int |a#1#1#0@@2|) :no-pattern (U_2_bool |a#1#1#0@@2|) :no-pattern (U_2_int |a#1#2#0|) :no-pattern (U_2_bool |a#1#2#0|) ))) :qid |unknown.0:0| :skolemid |3862| :pattern ( (BetreeSpec.LookupQuery.LookupQuery_q d@@180)) )))
(assert (forall ((|a#2#0#0@@5| T@U) (|a#2#1#0@@2| T@U) (|a#2#2#0| T@U) ) (!  (=> (and (and (= (type |a#2#0#0@@5|) (SeqType BoxType)) (= (type |a#2#1#0@@2|) (SeqType BoxType))) (= (type |a#2#2#0|) (SeqType BoxType))) (= ($Is (|#BetreeSpec.LookupQuery.LookupQuery| |a#2#0#0@@5| |a#2#1#0@@2| |a#2#2#0|) Tclass.BetreeSpec.LookupQuery)  (and (and ($Is |a#2#0#0@@5| Tclass.KeyType.Key) ($Is |a#2#1#0@@2| Tclass.ValueType.Value)) ($Is |a#2#2#0| (TSeq Tclass.BetreeGraph.ReadOp))))) :qid |BetreeSpecidfy.76:38| :skolemid |3863| :pattern ( ($Is (|#BetreeSpec.LookupQuery.LookupQuery| |a#2#0#0@@5| |a#2#1#0@@2| |a#2#2#0|) Tclass.BetreeSpec.LookupQuery)) )))
(assert (forall ((|a#3#0#0@@5| T@U) (|a#3#1#0@@2| T@U) (|a#3#2#0| T@U) ($h@@179 T@U) ) (!  (=> (and (and (and (and (= (type |a#3#0#0@@5|) (SeqType BoxType)) (= (type |a#3#1#0@@2|) (SeqType BoxType))) (= (type |a#3#2#0|) (SeqType BoxType))) (= (type $h@@179) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@179)) (= ($IsAlloc (|#BetreeSpec.LookupQuery.LookupQuery| |a#3#0#0@@5| |a#3#1#0@@2| |a#3#2#0|) Tclass.BetreeSpec.LookupQuery $h@@179)  (and (and ($IsAlloc |a#3#0#0@@5| Tclass.KeyType.Key $h@@179) ($IsAlloc |a#3#1#0@@2| Tclass.ValueType.Value $h@@179)) ($IsAlloc |a#3#2#0| (TSeq Tclass.BetreeGraph.ReadOp) $h@@179)))) :qid |BetreeSpecidfy.76:38| :skolemid |3864| :pattern ( ($IsAlloc (|#BetreeSpec.LookupQuery.LookupQuery| |a#3#0#0@@5| |a#3#1#0@@2| |a#3#2#0|) Tclass.BetreeSpec.LookupQuery $h@@179)) )))
(assert (forall ((arg0@@644 T@U) ) (! (= (type (BetreeSpec.LookupQuery.key arg0@@644)) (SeqType BoxType)) :qid |funType:BetreeSpec.LookupQuery.key| :pattern ( (BetreeSpec.LookupQuery.key arg0@@644)) )))
(assert (forall ((d@@181 T@U) ($h@@180 T@U) ) (!  (=> (and (and (= (type d@@181) DatatypeTypeType) (= (type $h@@180) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@180) (and (BetreeSpec.LookupQuery.LookupQuery_q d@@181) ($IsAlloc d@@181 Tclass.BetreeSpec.LookupQuery $h@@180)))) ($IsAlloc (BetreeSpec.LookupQuery.key d@@181) Tclass.KeyType.Key $h@@180)) :qid |unknown.0:0| :skolemid |3865| :pattern ( ($IsAlloc (BetreeSpec.LookupQuery.key d@@181) Tclass.KeyType.Key $h@@180)) )))
(assert (forall ((arg0@@645 T@U) ) (! (= (type (BetreeSpec.LookupQuery.value arg0@@645)) (SeqType BoxType)) :qid |funType:BetreeSpec.LookupQuery.value| :pattern ( (BetreeSpec.LookupQuery.value arg0@@645)) )))
(assert (forall ((d@@182 T@U) ($h@@181 T@U) ) (!  (=> (and (and (= (type d@@182) DatatypeTypeType) (= (type $h@@181) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@181) (and (BetreeSpec.LookupQuery.LookupQuery_q d@@182) ($IsAlloc d@@182 Tclass.BetreeSpec.LookupQuery $h@@181)))) ($IsAlloc (BetreeSpec.LookupQuery.value d@@182) Tclass.ValueType.Value $h@@181)) :qid |unknown.0:0| :skolemid |3866| :pattern ( ($IsAlloc (BetreeSpec.LookupQuery.value d@@182) Tclass.ValueType.Value $h@@181)) )))
(assert (forall ((arg0@@646 T@U) ) (! (= (type (BetreeSpec.LookupQuery.lookup arg0@@646)) (SeqType BoxType)) :qid |funType:BetreeSpec.LookupQuery.lookup| :pattern ( (BetreeSpec.LookupQuery.lookup arg0@@646)) )))
(assert (forall ((d@@183 T@U) ($h@@182 T@U) ) (!  (=> (and (and (= (type d@@183) DatatypeTypeType) (= (type $h@@182) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@182) (and (BetreeSpec.LookupQuery.LookupQuery_q d@@183) ($IsAlloc d@@183 Tclass.BetreeSpec.LookupQuery $h@@182)))) ($IsAlloc (BetreeSpec.LookupQuery.lookup d@@183) (TSeq Tclass.BetreeGraph.ReadOp) $h@@182)) :qid |unknown.0:0| :skolemid |3867| :pattern ( ($IsAlloc (BetreeSpec.LookupQuery.lookup d@@183) (TSeq Tclass.BetreeGraph.ReadOp) $h@@182)) )))
(assert (forall ((|a#4#0#0@@5| T@U) (|a#4#1#0@@2| T@U) (|a#4#2#0| T@U) ) (!  (=> (and (and (= (type |a#4#0#0@@5|) (SeqType BoxType)) (= (type |a#4#1#0@@2|) (SeqType BoxType))) (= (type |a#4#2#0|) (SeqType BoxType))) (= (|#BetreeSpec.LookupQuery.LookupQuery| (Lit |a#4#0#0@@5|) (Lit |a#4#1#0@@2|) (Lit |a#4#2#0|)) (Lit (|#BetreeSpec.LookupQuery.LookupQuery| |a#4#0#0@@5| |a#4#1#0@@2| |a#4#2#0|)))) :qid |BetreeSpecidfy.76:38| :skolemid |3868| :pattern ( (|#BetreeSpec.LookupQuery.LookupQuery| (Lit |a#4#0#0@@5|) (Lit |a#4#1#0@@2|) (Lit |a#4#2#0|))) )))
(assert (forall ((|a#5#0#0@@6| T@U) (|a#5#1#0@@2| T@U) (|a#5#2#0| T@U) ) (!  (=> (and (and (= (type |a#5#0#0@@6|) (SeqType BoxType)) (= (type |a#5#1#0@@2|) (SeqType BoxType))) (= (type |a#5#2#0|) (SeqType BoxType))) (= (BetreeSpec.LookupQuery.key (|#BetreeSpec.LookupQuery.LookupQuery| |a#5#0#0@@6| |a#5#1#0@@2| |a#5#2#0|)) |a#5#0#0@@6|)) :qid |BetreeSpecidfy.76:38| :skolemid |3869| :pattern ( (|#BetreeSpec.LookupQuery.LookupQuery| |a#5#0#0@@6| |a#5#1#0@@2| |a#5#2#0|)) )))
(assert (forall ((|a#6#0#0@@6| T@U) (|a#6#1#0@@2| T@U) (|a#6#2#0| T@U) ) (!  (=> (and (and (= (type |a#6#0#0@@6|) (SeqType BoxType)) (= (type |a#6#1#0@@2|) (SeqType BoxType))) (= (type |a#6#2#0|) (SeqType BoxType))) (= (BetreeSpec.LookupQuery.value (|#BetreeSpec.LookupQuery.LookupQuery| |a#6#0#0@@6| |a#6#1#0@@2| |a#6#2#0|)) |a#6#1#0@@2|)) :qid |BetreeSpecidfy.76:38| :skolemid |3870| :pattern ( (|#BetreeSpec.LookupQuery.LookupQuery| |a#6#0#0@@6| |a#6#1#0@@2| |a#6#2#0|)) )))
(assert (forall ((|a#7#0#0@@6| T@U) (|a#7#1#0@@2| T@U) (|a#7#2#0| T@U) ) (!  (=> (and (and (= (type |a#7#0#0@@6|) (SeqType BoxType)) (= (type |a#7#1#0@@2|) (SeqType BoxType))) (= (type |a#7#2#0|) (SeqType BoxType))) (= (BetreeSpec.LookupQuery.lookup (|#BetreeSpec.LookupQuery.LookupQuery| |a#7#0#0@@6| |a#7#1#0@@2| |a#7#2#0|)) |a#7#2#0|)) :qid |BetreeSpecidfy.76:38| :skolemid |3871| :pattern ( (|#BetreeSpec.LookupQuery.LookupQuery| |a#7#0#0@@6| |a#7#1#0@@2| |a#7#2#0|)) )))
(assert (forall ((|a#8#0#0@@6| T@U) (|a#8#1#0@@3| T@U) (|a#8#2#0| T@U) (i@@29 Int) ) (!  (=> (and (and (and (= (type |a#8#0#0@@6|) (SeqType BoxType)) (= (type |a#8#1#0@@3|) (SeqType BoxType))) (= (type |a#8#2#0|) (SeqType BoxType))) (and (<= 0 i@@29) (< i@@29 (|Seq#Length| |a#8#2#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#8#2#0| i@@29))) (DtRank (|#BetreeSpec.LookupQuery.LookupQuery| |a#8#0#0@@6| |a#8#1#0@@3| |a#8#2#0|)))) :qid |BetreeSpecidfy.76:38| :skolemid |3872| :pattern ( (|Seq#Index| |a#8#2#0| i@@29) (|#BetreeSpec.LookupQuery.LookupQuery| |a#8#0#0@@6| |a#8#1#0@@3| |a#8#2#0|)) )))
(assert (forall ((|a#9#0#0@@5| T@U) (|a#9#1#0@@2| T@U) (|a#9#2#0| T@U) ) (!  (=> (and (and (= (type |a#9#0#0@@5|) (SeqType BoxType)) (= (type |a#9#1#0@@2|) (SeqType BoxType))) (= (type |a#9#2#0|) (SeqType BoxType))) (< (|Seq#Rank| |a#9#2#0|) (DtRank (|#BetreeSpec.LookupQuery.LookupQuery| |a#9#0#0@@5| |a#9#1#0@@2| |a#9#2#0|)))) :qid |BetreeSpecidfy.76:38| :skolemid |3873| :pattern ( (|#BetreeSpec.LookupQuery.LookupQuery| |a#9#0#0@@5| |a#9#1#0@@2| |a#9#2#0|)) )))
(assert (forall ((d@@184 T@U) ) (!  (=> (and (= (type d@@184) DatatypeTypeType) (|$IsA#BetreeSpec.LookupQuery| d@@184)) (BetreeSpec.LookupQuery.LookupQuery_q d@@184)) :qid |unknown.0:0| :skolemid |3874| :pattern ( (|$IsA#BetreeSpec.LookupQuery| d@@184)) )))
(assert (forall ((d@@185 T@U) ) (!  (=> (and (= (type d@@185) DatatypeTypeType) ($Is d@@185 Tclass.BetreeSpec.LookupQuery)) (BetreeSpec.LookupQuery.LookupQuery_q d@@185)) :qid |unknown.0:0| :skolemid |3875| :pattern ( (BetreeSpec.LookupQuery.LookupQuery_q d@@185) ($Is d@@185 Tclass.BetreeSpec.LookupQuery)) )))
(assert (forall ((a@@184 T@U) (b@@121 T@U) ) (!  (=> (and (and (= (type a@@184) DatatypeTypeType) (= (type b@@121) DatatypeTypeType)) true) (= (|BetreeSpec.LookupQuery#Equal| a@@184 b@@121)  (and (and (|Seq#Equal| (BetreeSpec.LookupQuery.key a@@184) (BetreeSpec.LookupQuery.key b@@121)) (|Seq#Equal| (BetreeSpec.LookupQuery.value a@@184) (BetreeSpec.LookupQuery.value b@@121))) (|Seq#Equal| (BetreeSpec.LookupQuery.lookup a@@184) (BetreeSpec.LookupQuery.lookup b@@121))))) :qid |unknown.0:0| :skolemid |3876| :pattern ( (|BetreeSpec.LookupQuery#Equal| a@@184 b@@121)) )))
(assert (forall ((a@@185 T@U) (b@@122 T@U) ) (!  (=> (and (= (type a@@185) DatatypeTypeType) (= (type b@@122) DatatypeTypeType)) (= (|BetreeSpec.LookupQuery#Equal| a@@185 b@@122) (= a@@185 b@@122))) :qid |unknown.0:0| :skolemid |3877| :pattern ( (|BetreeSpec.LookupQuery#Equal| a@@185 b@@122)) )))
(assert (forall ((arg0@@647 T@U) (arg1@@317 T@U) (arg2@@187 T@U) (arg3@@127 T@U) ) (! (= (type (|#BetreeSpec.SuccQuery.SuccQuery| arg0@@647 arg1@@317 arg2@@187 arg3@@127)) DatatypeTypeType) :qid |funType:#BetreeSpec.SuccQuery.SuccQuery| :pattern ( (|#BetreeSpec.SuccQuery.SuccQuery| arg0@@647 arg1@@317 arg2@@187 arg3@@127)) )))
(assert (forall ((|a#10#0#0@@5| T@U) (|a#10#1#0@@1| T@U) (|a#10#2#0| T@U) (|a#10#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#10#0#0@@5|) DatatypeTypeType) (= (type |a#10#1#0@@1|) (SeqType BoxType))) (= (type |a#10#2#0|) DatatypeTypeType)) (= (type |a#10#3#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#BetreeSpec.SuccQuery.SuccQuery| |a#10#0#0@@5| |a#10#1#0@@1| |a#10#2#0| |a#10#3#0|)) |##BetreeSpec.SuccQuery.SuccQuery|)) :qid |BetreeSpecidfy.131:7| :skolemid |3878| :pattern ( (|#BetreeSpec.SuccQuery.SuccQuery| |a#10#0#0@@5| |a#10#1#0@@1| |a#10#2#0| |a#10#3#0|)) )))
(assert (forall ((d@@186 T@U) ) (!  (=> (= (type d@@186) DatatypeTypeType) (= (BetreeSpec.SuccQuery.SuccQuery_q d@@186) (= (DatatypeCtorId d@@186) |##BetreeSpec.SuccQuery.SuccQuery|))) :qid |unknown.0:0| :skolemid |3879| :pattern ( (BetreeSpec.SuccQuery.SuccQuery_q d@@186)) )))
(assert (forall ((d@@187 T@U) ) (!  (=> (and (= (type d@@187) DatatypeTypeType) (BetreeSpec.SuccQuery.SuccQuery_q d@@187)) (exists ((|a#11#0#0@@5| T@U) (|a#11#1#0@@1| T@U) (|a#11#2#0| T@U) (|a#11#3#0| T@U) ) (!  (and (and (and (and (= (type |a#11#0#0@@5|) DatatypeTypeType) (= (type |a#11#1#0@@1|) (SeqType BoxType))) (= (type |a#11#2#0|) DatatypeTypeType)) (= (type |a#11#3#0|) (SeqType BoxType))) (= d@@187 (|#BetreeSpec.SuccQuery.SuccQuery| |a#11#0#0@@5| |a#11#1#0@@1| |a#11#2#0| |a#11#3#0|))) :qid |BetreeSpecidfy.131:7| :skolemid |3880| :no-pattern (type |a#11#0#0@@5|) :no-pattern (type |a#11#1#0@@1|) :no-pattern (type |a#11#2#0|) :no-pattern (type |a#11#3#0|) :no-pattern (U_2_int |a#11#0#0@@5|) :no-pattern (U_2_bool |a#11#0#0@@5|) :no-pattern (U_2_int |a#11#1#0@@1|) :no-pattern (U_2_bool |a#11#1#0@@1|) :no-pattern (U_2_int |a#11#2#0|) :no-pattern (U_2_bool |a#11#2#0|) :no-pattern (U_2_int |a#11#3#0|) :no-pattern (U_2_bool |a#11#3#0|) ))) :qid |unknown.0:0| :skolemid |3881| :pattern ( (BetreeSpec.SuccQuery.SuccQuery_q d@@187)) )))
(assert (forall ((|a#12#0#0@@3| T@U) (|a#12#1#0@@1| T@U) (|a#12#2#0| T@U) (|a#12#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#12#0#0@@3|) DatatypeTypeType) (= (type |a#12#1#0@@1|) (SeqType BoxType))) (= (type |a#12#2#0|) DatatypeTypeType)) (= (type |a#12#3#0|) (SeqType BoxType))) (= ($Is (|#BetreeSpec.SuccQuery.SuccQuery| |a#12#0#0@@3| |a#12#1#0@@1| |a#12#2#0| |a#12#3#0|) Tclass.BetreeSpec.SuccQuery)  (and (and (and ($Is |a#12#0#0@@3| Tclass.UI.RangeStart) ($Is |a#12#1#0@@1| (TSeq Tclass.UI.SuccResult))) ($Is |a#12#2#0| Tclass.UI.RangeEnd)) ($Is |a#12#3#0| (TSeq Tclass.BetreeGraph.ReadOp))))) :qid |BetreeSpecidfy.131:7| :skolemid |3882| :pattern ( ($Is (|#BetreeSpec.SuccQuery.SuccQuery| |a#12#0#0@@3| |a#12#1#0@@1| |a#12#2#0| |a#12#3#0|) Tclass.BetreeSpec.SuccQuery)) )))
(assert (forall ((|a#13#0#0@@3| T@U) (|a#13#1#0@@2| T@U) (|a#13#2#0| T@U) (|a#13#3#0| T@U) ($h@@183 T@U) ) (!  (=> (and (and (and (and (and (= (type |a#13#0#0@@3|) DatatypeTypeType) (= (type |a#13#1#0@@2|) (SeqType BoxType))) (= (type |a#13#2#0|) DatatypeTypeType)) (= (type |a#13#3#0|) (SeqType BoxType))) (= (type $h@@183) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@183)) (= ($IsAlloc (|#BetreeSpec.SuccQuery.SuccQuery| |a#13#0#0@@3| |a#13#1#0@@2| |a#13#2#0| |a#13#3#0|) Tclass.BetreeSpec.SuccQuery $h@@183)  (and (and (and ($IsAlloc |a#13#0#0@@3| Tclass.UI.RangeStart $h@@183) ($IsAlloc |a#13#1#0@@2| (TSeq Tclass.UI.SuccResult) $h@@183)) ($IsAlloc |a#13#2#0| Tclass.UI.RangeEnd $h@@183)) ($IsAlloc |a#13#3#0| (TSeq Tclass.BetreeGraph.ReadOp) $h@@183)))) :qid |BetreeSpecidfy.131:7| :skolemid |3883| :pattern ( ($IsAlloc (|#BetreeSpec.SuccQuery.SuccQuery| |a#13#0#0@@3| |a#13#1#0@@2| |a#13#2#0| |a#13#3#0|) Tclass.BetreeSpec.SuccQuery $h@@183)) )))
(assert (forall ((arg0@@648 T@U) ) (! (= (type (BetreeSpec.SuccQuery.start arg0@@648)) DatatypeTypeType) :qid |funType:BetreeSpec.SuccQuery.start| :pattern ( (BetreeSpec.SuccQuery.start arg0@@648)) )))
(assert (forall ((d@@188 T@U) ($h@@184 T@U) ) (!  (=> (and (and (= (type d@@188) DatatypeTypeType) (= (type $h@@184) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@184) (and (BetreeSpec.SuccQuery.SuccQuery_q d@@188) ($IsAlloc d@@188 Tclass.BetreeSpec.SuccQuery $h@@184)))) ($IsAlloc (BetreeSpec.SuccQuery.start d@@188) Tclass.UI.RangeStart $h@@184)) :qid |unknown.0:0| :skolemid |3884| :pattern ( ($IsAlloc (BetreeSpec.SuccQuery.start d@@188) Tclass.UI.RangeStart $h@@184)) )))
(assert (forall ((arg0@@649 T@U) ) (! (= (type (BetreeSpec.SuccQuery.results arg0@@649)) (SeqType BoxType)) :qid |funType:BetreeSpec.SuccQuery.results| :pattern ( (BetreeSpec.SuccQuery.results arg0@@649)) )))
(assert (forall ((d@@189 T@U) ($h@@185 T@U) ) (!  (=> (and (and (= (type d@@189) DatatypeTypeType) (= (type $h@@185) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@185) (and (BetreeSpec.SuccQuery.SuccQuery_q d@@189) ($IsAlloc d@@189 Tclass.BetreeSpec.SuccQuery $h@@185)))) ($IsAlloc (BetreeSpec.SuccQuery.results d@@189) (TSeq Tclass.UI.SuccResult) $h@@185)) :qid |unknown.0:0| :skolemid |3885| :pattern ( ($IsAlloc (BetreeSpec.SuccQuery.results d@@189) (TSeq Tclass.UI.SuccResult) $h@@185)) )))
(assert (forall ((arg0@@650 T@U) ) (! (= (type (BetreeSpec.SuccQuery.end arg0@@650)) DatatypeTypeType) :qid |funType:BetreeSpec.SuccQuery.end| :pattern ( (BetreeSpec.SuccQuery.end arg0@@650)) )))
(assert (forall ((d@@190 T@U) ($h@@186 T@U) ) (!  (=> (and (and (= (type d@@190) DatatypeTypeType) (= (type $h@@186) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@186) (and (BetreeSpec.SuccQuery.SuccQuery_q d@@190) ($IsAlloc d@@190 Tclass.BetreeSpec.SuccQuery $h@@186)))) ($IsAlloc (BetreeSpec.SuccQuery.end d@@190) Tclass.UI.RangeEnd $h@@186)) :qid |unknown.0:0| :skolemid |3886| :pattern ( ($IsAlloc (BetreeSpec.SuccQuery.end d@@190) Tclass.UI.RangeEnd $h@@186)) )))
(assert (forall ((arg0@@651 T@U) ) (! (= (type (BetreeSpec.SuccQuery.lookup arg0@@651)) (SeqType BoxType)) :qid |funType:BetreeSpec.SuccQuery.lookup| :pattern ( (BetreeSpec.SuccQuery.lookup arg0@@651)) )))
(assert (forall ((d@@191 T@U) ($h@@187 T@U) ) (!  (=> (and (and (= (type d@@191) DatatypeTypeType) (= (type $h@@187) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@187) (and (BetreeSpec.SuccQuery.SuccQuery_q d@@191) ($IsAlloc d@@191 Tclass.BetreeSpec.SuccQuery $h@@187)))) ($IsAlloc (BetreeSpec.SuccQuery.lookup d@@191) (TSeq Tclass.BetreeGraph.ReadOp) $h@@187)) :qid |unknown.0:0| :skolemid |3887| :pattern ( ($IsAlloc (BetreeSpec.SuccQuery.lookup d@@191) (TSeq Tclass.BetreeGraph.ReadOp) $h@@187)) )))
(assert (forall ((|a#14#0#0@@4| T@U) (|a#14#1#0@@3| T@U) (|a#14#2#0| T@U) (|a#14#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#14#0#0@@4|) DatatypeTypeType) (= (type |a#14#1#0@@3|) (SeqType BoxType))) (= (type |a#14#2#0|) DatatypeTypeType)) (= (type |a#14#3#0|) (SeqType BoxType))) (= (|#BetreeSpec.SuccQuery.SuccQuery| (Lit |a#14#0#0@@4|) (Lit |a#14#1#0@@3|) (Lit |a#14#2#0|) (Lit |a#14#3#0|)) (Lit (|#BetreeSpec.SuccQuery.SuccQuery| |a#14#0#0@@4| |a#14#1#0@@3| |a#14#2#0| |a#14#3#0|)))) :qid |BetreeSpecidfy.131:7| :skolemid |3888| :pattern ( (|#BetreeSpec.SuccQuery.SuccQuery| (Lit |a#14#0#0@@4|) (Lit |a#14#1#0@@3|) (Lit |a#14#2#0|) (Lit |a#14#3#0|))) )))
(assert (forall ((|a#15#0#0@@4| T@U) (|a#15#1#0@@3| T@U) (|a#15#2#0| T@U) (|a#15#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#15#0#0@@4|) DatatypeTypeType) (= (type |a#15#1#0@@3|) (SeqType BoxType))) (= (type |a#15#2#0|) DatatypeTypeType)) (= (type |a#15#3#0|) (SeqType BoxType))) (= (BetreeSpec.SuccQuery.start (|#BetreeSpec.SuccQuery.SuccQuery| |a#15#0#0@@4| |a#15#1#0@@3| |a#15#2#0| |a#15#3#0|)) |a#15#0#0@@4|)) :qid |BetreeSpecidfy.131:7| :skolemid |3889| :pattern ( (|#BetreeSpec.SuccQuery.SuccQuery| |a#15#0#0@@4| |a#15#1#0@@3| |a#15#2#0| |a#15#3#0|)) )))
(assert (forall ((|a#16#0#0@@4| T@U) (|a#16#1#0@@3| T@U) (|a#16#2#0| T@U) (|a#16#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#16#0#0@@4|) DatatypeTypeType) (= (type |a#16#1#0@@3|) (SeqType BoxType))) (= (type |a#16#2#0|) DatatypeTypeType)) (= (type |a#16#3#0|) (SeqType BoxType))) (< (DtRank |a#16#0#0@@4|) (DtRank (|#BetreeSpec.SuccQuery.SuccQuery| |a#16#0#0@@4| |a#16#1#0@@3| |a#16#2#0| |a#16#3#0|)))) :qid |BetreeSpecidfy.131:7| :skolemid |3890| :pattern ( (|#BetreeSpec.SuccQuery.SuccQuery| |a#16#0#0@@4| |a#16#1#0@@3| |a#16#2#0| |a#16#3#0|)) )))
(assert (forall ((|a#17#0#0@@5| T@U) (|a#17#1#0@@3| T@U) (|a#17#2#0| T@U) (|a#17#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#17#0#0@@5|) DatatypeTypeType) (= (type |a#17#1#0@@3|) (SeqType BoxType))) (= (type |a#17#2#0|) DatatypeTypeType)) (= (type |a#17#3#0|) (SeqType BoxType))) (= (BetreeSpec.SuccQuery.results (|#BetreeSpec.SuccQuery.SuccQuery| |a#17#0#0@@5| |a#17#1#0@@3| |a#17#2#0| |a#17#3#0|)) |a#17#1#0@@3|)) :qid |BetreeSpecidfy.131:7| :skolemid |3891| :pattern ( (|#BetreeSpec.SuccQuery.SuccQuery| |a#17#0#0@@5| |a#17#1#0@@3| |a#17#2#0| |a#17#3#0|)) )))
(assert (forall ((|a#18#0#0@@5| T@U) (|a#18#1#0@@3| T@U) (|a#18#2#0| T@U) (|a#18#3#0| T@U) (i@@30 Int) ) (!  (=> (and (and (and (and (= (type |a#18#0#0@@5|) DatatypeTypeType) (= (type |a#18#1#0@@3|) (SeqType BoxType))) (= (type |a#18#2#0|) DatatypeTypeType)) (= (type |a#18#3#0|) (SeqType BoxType))) (and (<= 0 i@@30) (< i@@30 (|Seq#Length| |a#18#1#0@@3|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#18#1#0@@3| i@@30))) (DtRank (|#BetreeSpec.SuccQuery.SuccQuery| |a#18#0#0@@5| |a#18#1#0@@3| |a#18#2#0| |a#18#3#0|)))) :qid |BetreeSpecidfy.131:7| :skolemid |3892| :pattern ( (|Seq#Index| |a#18#1#0@@3| i@@30) (|#BetreeSpec.SuccQuery.SuccQuery| |a#18#0#0@@5| |a#18#1#0@@3| |a#18#2#0| |a#18#3#0|)) )))
(assert (forall ((|a#19#0#0@@5| T@U) (|a#19#1#0@@3| T@U) (|a#19#2#0| T@U) (|a#19#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#19#0#0@@5|) DatatypeTypeType) (= (type |a#19#1#0@@3|) (SeqType BoxType))) (= (type |a#19#2#0|) DatatypeTypeType)) (= (type |a#19#3#0|) (SeqType BoxType))) (< (|Seq#Rank| |a#19#1#0@@3|) (DtRank (|#BetreeSpec.SuccQuery.SuccQuery| |a#19#0#0@@5| |a#19#1#0@@3| |a#19#2#0| |a#19#3#0|)))) :qid |BetreeSpecidfy.131:7| :skolemid |3893| :pattern ( (|#BetreeSpec.SuccQuery.SuccQuery| |a#19#0#0@@5| |a#19#1#0@@3| |a#19#2#0| |a#19#3#0|)) )))
(assert (forall ((|a#20#0#0@@5| T@U) (|a#20#1#0@@3| T@U) (|a#20#2#0| T@U) (|a#20#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#20#0#0@@5|) DatatypeTypeType) (= (type |a#20#1#0@@3|) (SeqType BoxType))) (= (type |a#20#2#0|) DatatypeTypeType)) (= (type |a#20#3#0|) (SeqType BoxType))) (= (BetreeSpec.SuccQuery.end (|#BetreeSpec.SuccQuery.SuccQuery| |a#20#0#0@@5| |a#20#1#0@@3| |a#20#2#0| |a#20#3#0|)) |a#20#2#0|)) :qid |BetreeSpecidfy.131:7| :skolemid |3894| :pattern ( (|#BetreeSpec.SuccQuery.SuccQuery| |a#20#0#0@@5| |a#20#1#0@@3| |a#20#2#0| |a#20#3#0|)) )))
(assert (forall ((|a#21#0#0@@5| T@U) (|a#21#1#0@@3| T@U) (|a#21#2#0| T@U) (|a#21#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#21#0#0@@5|) DatatypeTypeType) (= (type |a#21#1#0@@3|) (SeqType BoxType))) (= (type |a#21#2#0|) DatatypeTypeType)) (= (type |a#21#3#0|) (SeqType BoxType))) (< (DtRank |a#21#2#0|) (DtRank (|#BetreeSpec.SuccQuery.SuccQuery| |a#21#0#0@@5| |a#21#1#0@@3| |a#21#2#0| |a#21#3#0|)))) :qid |BetreeSpecidfy.131:7| :skolemid |3895| :pattern ( (|#BetreeSpec.SuccQuery.SuccQuery| |a#21#0#0@@5| |a#21#1#0@@3| |a#21#2#0| |a#21#3#0|)) )))
(assert (forall ((|a#22#0#0@@5| T@U) (|a#22#1#0@@4| T@U) (|a#22#2#0@@0| T@U) (|a#22#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#22#0#0@@5|) DatatypeTypeType) (= (type |a#22#1#0@@4|) (SeqType BoxType))) (= (type |a#22#2#0@@0|) DatatypeTypeType)) (= (type |a#22#3#0|) (SeqType BoxType))) (= (BetreeSpec.SuccQuery.lookup (|#BetreeSpec.SuccQuery.SuccQuery| |a#22#0#0@@5| |a#22#1#0@@4| |a#22#2#0@@0| |a#22#3#0|)) |a#22#3#0|)) :qid |BetreeSpecidfy.131:7| :skolemid |3896| :pattern ( (|#BetreeSpec.SuccQuery.SuccQuery| |a#22#0#0@@5| |a#22#1#0@@4| |a#22#2#0@@0| |a#22#3#0|)) )))
(assert (forall ((|a#23#0#0@@4| T@U) (|a#23#1#0@@3| T@U) (|a#23#2#0@@0| T@U) (|a#23#3#0| T@U) (i@@31 Int) ) (!  (=> (and (and (and (and (= (type |a#23#0#0@@4|) DatatypeTypeType) (= (type |a#23#1#0@@3|) (SeqType BoxType))) (= (type |a#23#2#0@@0|) DatatypeTypeType)) (= (type |a#23#3#0|) (SeqType BoxType))) (and (<= 0 i@@31) (< i@@31 (|Seq#Length| |a#23#3#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#23#3#0| i@@31))) (DtRank (|#BetreeSpec.SuccQuery.SuccQuery| |a#23#0#0@@4| |a#23#1#0@@3| |a#23#2#0@@0| |a#23#3#0|)))) :qid |BetreeSpecidfy.131:7| :skolemid |3897| :pattern ( (|Seq#Index| |a#23#3#0| i@@31) (|#BetreeSpec.SuccQuery.SuccQuery| |a#23#0#0@@4| |a#23#1#0@@3| |a#23#2#0@@0| |a#23#3#0|)) )))
(assert (forall ((|a#24#0#0@@2| T@U) (|a#24#1#0@@1| T@U) (|a#24#2#0@@0| T@U) (|a#24#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#24#0#0@@2|) DatatypeTypeType) (= (type |a#24#1#0@@1|) (SeqType BoxType))) (= (type |a#24#2#0@@0|) DatatypeTypeType)) (= (type |a#24#3#0|) (SeqType BoxType))) (< (|Seq#Rank| |a#24#3#0|) (DtRank (|#BetreeSpec.SuccQuery.SuccQuery| |a#24#0#0@@2| |a#24#1#0@@1| |a#24#2#0@@0| |a#24#3#0|)))) :qid |BetreeSpecidfy.131:7| :skolemid |3898| :pattern ( (|#BetreeSpec.SuccQuery.SuccQuery| |a#24#0#0@@2| |a#24#1#0@@1| |a#24#2#0@@0| |a#24#3#0|)) )))
(assert (forall ((d@@192 T@U) ) (!  (=> (and (= (type d@@192) DatatypeTypeType) (|$IsA#BetreeSpec.SuccQuery| d@@192)) (BetreeSpec.SuccQuery.SuccQuery_q d@@192)) :qid |unknown.0:0| :skolemid |3899| :pattern ( (|$IsA#BetreeSpec.SuccQuery| d@@192)) )))
(assert (forall ((d@@193 T@U) ) (!  (=> (and (= (type d@@193) DatatypeTypeType) ($Is d@@193 Tclass.BetreeSpec.SuccQuery)) (BetreeSpec.SuccQuery.SuccQuery_q d@@193)) :qid |unknown.0:0| :skolemid |3900| :pattern ( (BetreeSpec.SuccQuery.SuccQuery_q d@@193) ($Is d@@193 Tclass.BetreeSpec.SuccQuery)) )))
(assert (forall ((a@@186 T@U) (b@@123 T@U) ) (!  (=> (and (and (= (type a@@186) DatatypeTypeType) (= (type b@@123) DatatypeTypeType)) true) (= (|BetreeSpec.SuccQuery#Equal| a@@186 b@@123)  (and (and (and (|UI.RangeStart#Equal| (BetreeSpec.SuccQuery.start a@@186) (BetreeSpec.SuccQuery.start b@@123)) (|Seq#Equal| (BetreeSpec.SuccQuery.results a@@186) (BetreeSpec.SuccQuery.results b@@123))) (|UI.RangeEnd#Equal| (BetreeSpec.SuccQuery.end a@@186) (BetreeSpec.SuccQuery.end b@@123))) (|Seq#Equal| (BetreeSpec.SuccQuery.lookup a@@186) (BetreeSpec.SuccQuery.lookup b@@123))))) :qid |unknown.0:0| :skolemid |3901| :pattern ( (|BetreeSpec.SuccQuery#Equal| a@@186 b@@123)) )))
(assert (forall ((a@@187 T@U) (b@@124 T@U) ) (!  (=> (and (= (type a@@187) DatatypeTypeType) (= (type b@@124) DatatypeTypeType)) (= (|BetreeSpec.SuccQuery#Equal| a@@187 b@@124) (= a@@187 b@@124))) :qid |unknown.0:0| :skolemid |3902| :pattern ( (|BetreeSpec.SuccQuery#Equal| a@@187 b@@124)) )))
(assert (forall ((arg0@@652 T@U) (arg1@@318 T@U) (arg2@@188 T@U) ) (! (= (type (|#BetreeSpec.MessageInsertion.MessageInsertion| arg0@@652 arg1@@318 arg2@@188)) DatatypeTypeType) :qid |funType:#BetreeSpec.MessageInsertion.MessageInsertion| :pattern ( (|#BetreeSpec.MessageInsertion.MessageInsertion| arg0@@652 arg1@@318 arg2@@188)) )))
(assert (forall ((|a#25#0#0@@2| T@U) (|a#25#1#0@@1| T@U) (|a#25#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#25#0#0@@2|) (SeqType BoxType)) (= (type |a#25#1#0@@1|) DatatypeTypeType)) (= (type |a#25#2#0@@0|) DatatypeTypeType)) (= (DatatypeCtorId (|#BetreeSpec.MessageInsertion.MessageInsertion| |a#25#0#0@@2| |a#25#1#0@@1| |a#25#2#0@@0|)) |##BetreeSpec.MessageInsertion.MessageInsertion|)) :qid |BetreeSpecidfy.179:48| :skolemid |3903| :pattern ( (|#BetreeSpec.MessageInsertion.MessageInsertion| |a#25#0#0@@2| |a#25#1#0@@1| |a#25#2#0@@0|)) )))
(assert (forall ((d@@194 T@U) ) (!  (=> (= (type d@@194) DatatypeTypeType) (= (BetreeSpec.MessageInsertion.MessageInsertion_q d@@194) (= (DatatypeCtorId d@@194) |##BetreeSpec.MessageInsertion.MessageInsertion|))) :qid |unknown.0:0| :skolemid |3904| :pattern ( (BetreeSpec.MessageInsertion.MessageInsertion_q d@@194)) )))
(assert (forall ((d@@195 T@U) ) (!  (=> (and (= (type d@@195) DatatypeTypeType) (BetreeSpec.MessageInsertion.MessageInsertion_q d@@195)) (exists ((|a#26#0#0@@2| T@U) (|a#26#1#0@@1| T@U) (|a#26#2#0@@0| T@U) ) (!  (and (and (and (= (type |a#26#0#0@@2|) (SeqType BoxType)) (= (type |a#26#1#0@@1|) DatatypeTypeType)) (= (type |a#26#2#0@@0|) DatatypeTypeType)) (= d@@195 (|#BetreeSpec.MessageInsertion.MessageInsertion| |a#26#0#0@@2| |a#26#1#0@@1| |a#26#2#0@@0|))) :qid |BetreeSpecidfy.179:48| :skolemid |3905| :no-pattern (type |a#26#0#0@@2|) :no-pattern (type |a#26#1#0@@1|) :no-pattern (type |a#26#2#0@@0|) :no-pattern (U_2_int |a#26#0#0@@2|) :no-pattern (U_2_bool |a#26#0#0@@2|) :no-pattern (U_2_int |a#26#1#0@@1|) :no-pattern (U_2_bool |a#26#1#0@@1|) :no-pattern (U_2_int |a#26#2#0@@0|) :no-pattern (U_2_bool |a#26#2#0@@0|) ))) :qid |unknown.0:0| :skolemid |3906| :pattern ( (BetreeSpec.MessageInsertion.MessageInsertion_q d@@195)) )))
(assert (forall ((|a#27#0#0@@2| T@U) (|a#27#1#0@@1| T@U) (|a#27#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#27#0#0@@2|) (SeqType BoxType)) (= (type |a#27#1#0@@1|) DatatypeTypeType)) (= (type |a#27#2#0@@0|) DatatypeTypeType)) (= ($Is (|#BetreeSpec.MessageInsertion.MessageInsertion| |a#27#0#0@@2| |a#27#1#0@@1| |a#27#2#0@@0|) Tclass.BetreeSpec.MessageInsertion)  (and (and ($Is |a#27#0#0@@2| Tclass.KeyType.Key) ($Is |a#27#1#0@@1| Tclass.ValueMessage.Message)) ($Is |a#27#2#0@@0| Tclass.BetreeGraph.Node)))) :qid |BetreeSpecidfy.179:48| :skolemid |3907| :pattern ( ($Is (|#BetreeSpec.MessageInsertion.MessageInsertion| |a#27#0#0@@2| |a#27#1#0@@1| |a#27#2#0@@0|) Tclass.BetreeSpec.MessageInsertion)) )))
(assert (forall ((|a#28#0#0@@2| T@U) (|a#28#1#0@@1| T@U) (|a#28#2#0@@0| T@U) ($h@@188 T@U) ) (!  (=> (and (and (and (and (= (type |a#28#0#0@@2|) (SeqType BoxType)) (= (type |a#28#1#0@@1|) DatatypeTypeType)) (= (type |a#28#2#0@@0|) DatatypeTypeType)) (= (type $h@@188) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@188)) (= ($IsAlloc (|#BetreeSpec.MessageInsertion.MessageInsertion| |a#28#0#0@@2| |a#28#1#0@@1| |a#28#2#0@@0|) Tclass.BetreeSpec.MessageInsertion $h@@188)  (and (and ($IsAlloc |a#28#0#0@@2| Tclass.KeyType.Key $h@@188) ($IsAlloc |a#28#1#0@@1| Tclass.ValueMessage.Message $h@@188)) ($IsAlloc |a#28#2#0@@0| Tclass.BetreeGraph.Node $h@@188)))) :qid |BetreeSpecidfy.179:48| :skolemid |3908| :pattern ( ($IsAlloc (|#BetreeSpec.MessageInsertion.MessageInsertion| |a#28#0#0@@2| |a#28#1#0@@1| |a#28#2#0@@0|) Tclass.BetreeSpec.MessageInsertion $h@@188)) )))
(assert (forall ((arg0@@653 T@U) ) (! (= (type (BetreeSpec.MessageInsertion.key arg0@@653)) (SeqType BoxType)) :qid |funType:BetreeSpec.MessageInsertion.key| :pattern ( (BetreeSpec.MessageInsertion.key arg0@@653)) )))
(assert (forall ((d@@196 T@U) ($h@@189 T@U) ) (!  (=> (and (and (= (type d@@196) DatatypeTypeType) (= (type $h@@189) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@189) (and (BetreeSpec.MessageInsertion.MessageInsertion_q d@@196) ($IsAlloc d@@196 Tclass.BetreeSpec.MessageInsertion $h@@189)))) ($IsAlloc (BetreeSpec.MessageInsertion.key d@@196) Tclass.KeyType.Key $h@@189)) :qid |unknown.0:0| :skolemid |3909| :pattern ( ($IsAlloc (BetreeSpec.MessageInsertion.key d@@196) Tclass.KeyType.Key $h@@189)) )))
(assert (forall ((arg0@@654 T@U) ) (! (= (type (BetreeSpec.MessageInsertion.msg arg0@@654)) DatatypeTypeType) :qid |funType:BetreeSpec.MessageInsertion.msg| :pattern ( (BetreeSpec.MessageInsertion.msg arg0@@654)) )))
(assert (forall ((d@@197 T@U) ($h@@190 T@U) ) (!  (=> (and (and (= (type d@@197) DatatypeTypeType) (= (type $h@@190) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@190) (and (BetreeSpec.MessageInsertion.MessageInsertion_q d@@197) ($IsAlloc d@@197 Tclass.BetreeSpec.MessageInsertion $h@@190)))) ($IsAlloc (BetreeSpec.MessageInsertion.msg d@@197) Tclass.ValueMessage.Message $h@@190)) :qid |unknown.0:0| :skolemid |3910| :pattern ( ($IsAlloc (BetreeSpec.MessageInsertion.msg d@@197) Tclass.ValueMessage.Message $h@@190)) )))
(assert (forall ((arg0@@655 T@U) ) (! (= (type (BetreeSpec.MessageInsertion.oldroot arg0@@655)) DatatypeTypeType) :qid |funType:BetreeSpec.MessageInsertion.oldroot| :pattern ( (BetreeSpec.MessageInsertion.oldroot arg0@@655)) )))
(assert (forall ((d@@198 T@U) ($h@@191 T@U) ) (!  (=> (and (and (= (type d@@198) DatatypeTypeType) (= (type $h@@191) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@191) (and (BetreeSpec.MessageInsertion.MessageInsertion_q d@@198) ($IsAlloc d@@198 Tclass.BetreeSpec.MessageInsertion $h@@191)))) ($IsAlloc (BetreeSpec.MessageInsertion.oldroot d@@198) Tclass.BetreeGraph.Node $h@@191)) :qid |unknown.0:0| :skolemid |3911| :pattern ( ($IsAlloc (BetreeSpec.MessageInsertion.oldroot d@@198) Tclass.BetreeGraph.Node $h@@191)) )))
(assert (forall ((|a#29#0#0@@1| T@U) (|a#29#1#0@@1| T@U) (|a#29#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#29#0#0@@1|) (SeqType BoxType)) (= (type |a#29#1#0@@1|) DatatypeTypeType)) (= (type |a#29#2#0@@0|) DatatypeTypeType)) (= (|#BetreeSpec.MessageInsertion.MessageInsertion| (Lit |a#29#0#0@@1|) (Lit |a#29#1#0@@1|) (Lit |a#29#2#0@@0|)) (Lit (|#BetreeSpec.MessageInsertion.MessageInsertion| |a#29#0#0@@1| |a#29#1#0@@1| |a#29#2#0@@0|)))) :qid |BetreeSpecidfy.179:48| :skolemid |3912| :pattern ( (|#BetreeSpec.MessageInsertion.MessageInsertion| (Lit |a#29#0#0@@1|) (Lit |a#29#1#0@@1|) (Lit |a#29#2#0@@0|))) )))
(assert (forall ((|a#30#0#0@@1| T@U) (|a#30#1#0@@1| T@U) (|a#30#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#30#0#0@@1|) (SeqType BoxType)) (= (type |a#30#1#0@@1|) DatatypeTypeType)) (= (type |a#30#2#0@@0|) DatatypeTypeType)) (= (BetreeSpec.MessageInsertion.key (|#BetreeSpec.MessageInsertion.MessageInsertion| |a#30#0#0@@1| |a#30#1#0@@1| |a#30#2#0@@0|)) |a#30#0#0@@1|)) :qid |BetreeSpecidfy.179:48| :skolemid |3913| :pattern ( (|#BetreeSpec.MessageInsertion.MessageInsertion| |a#30#0#0@@1| |a#30#1#0@@1| |a#30#2#0@@0|)) )))
(assert (forall ((|a#31#0#0@@1| T@U) (|a#31#1#0@@1| T@U) (|a#31#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#31#0#0@@1|) (SeqType BoxType)) (= (type |a#31#1#0@@1|) DatatypeTypeType)) (= (type |a#31#2#0@@0|) DatatypeTypeType)) (= (BetreeSpec.MessageInsertion.msg (|#BetreeSpec.MessageInsertion.MessageInsertion| |a#31#0#0@@1| |a#31#1#0@@1| |a#31#2#0@@0|)) |a#31#1#0@@1|)) :qid |BetreeSpecidfy.179:48| :skolemid |3914| :pattern ( (|#BetreeSpec.MessageInsertion.MessageInsertion| |a#31#0#0@@1| |a#31#1#0@@1| |a#31#2#0@@0|)) )))
(assert (forall ((|a#32#0#0@@1| T@U) (|a#32#1#0@@1| T@U) (|a#32#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#32#0#0@@1|) (SeqType BoxType)) (= (type |a#32#1#0@@1|) DatatypeTypeType)) (= (type |a#32#2#0@@0|) DatatypeTypeType)) (< (DtRank |a#32#1#0@@1|) (DtRank (|#BetreeSpec.MessageInsertion.MessageInsertion| |a#32#0#0@@1| |a#32#1#0@@1| |a#32#2#0@@0|)))) :qid |BetreeSpecidfy.179:48| :skolemid |3915| :pattern ( (|#BetreeSpec.MessageInsertion.MessageInsertion| |a#32#0#0@@1| |a#32#1#0@@1| |a#32#2#0@@0|)) )))
(assert (forall ((|a#33#0#0@@1| T@U) (|a#33#1#0@@1| T@U) (|a#33#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#33#0#0@@1|) (SeqType BoxType)) (= (type |a#33#1#0@@1|) DatatypeTypeType)) (= (type |a#33#2#0@@0|) DatatypeTypeType)) (= (BetreeSpec.MessageInsertion.oldroot (|#BetreeSpec.MessageInsertion.MessageInsertion| |a#33#0#0@@1| |a#33#1#0@@1| |a#33#2#0@@0|)) |a#33#2#0@@0|)) :qid |BetreeSpecidfy.179:48| :skolemid |3916| :pattern ( (|#BetreeSpec.MessageInsertion.MessageInsertion| |a#33#0#0@@1| |a#33#1#0@@1| |a#33#2#0@@0|)) )))
(assert (forall ((|a#34#0#0@@1| T@U) (|a#34#1#0@@1| T@U) (|a#34#2#0| T@U) ) (!  (=> (and (and (= (type |a#34#0#0@@1|) (SeqType BoxType)) (= (type |a#34#1#0@@1|) DatatypeTypeType)) (= (type |a#34#2#0|) DatatypeTypeType)) (< (DtRank |a#34#2#0|) (DtRank (|#BetreeSpec.MessageInsertion.MessageInsertion| |a#34#0#0@@1| |a#34#1#0@@1| |a#34#2#0|)))) :qid |BetreeSpecidfy.179:48| :skolemid |3917| :pattern ( (|#BetreeSpec.MessageInsertion.MessageInsertion| |a#34#0#0@@1| |a#34#1#0@@1| |a#34#2#0|)) )))
(assert (forall ((d@@199 T@U) ) (!  (=> (and (= (type d@@199) DatatypeTypeType) (|$IsA#BetreeSpec.MessageInsertion| d@@199)) (BetreeSpec.MessageInsertion.MessageInsertion_q d@@199)) :qid |unknown.0:0| :skolemid |3918| :pattern ( (|$IsA#BetreeSpec.MessageInsertion| d@@199)) )))
(assert (forall ((d@@200 T@U) ) (!  (=> (and (= (type d@@200) DatatypeTypeType) ($Is d@@200 Tclass.BetreeSpec.MessageInsertion)) (BetreeSpec.MessageInsertion.MessageInsertion_q d@@200)) :qid |unknown.0:0| :skolemid |3919| :pattern ( (BetreeSpec.MessageInsertion.MessageInsertion_q d@@200) ($Is d@@200 Tclass.BetreeSpec.MessageInsertion)) )))
(assert (forall ((a@@188 T@U) (b@@125 T@U) ) (!  (=> (and (and (= (type a@@188) DatatypeTypeType) (= (type b@@125) DatatypeTypeType)) true) (= (|BetreeSpec.MessageInsertion#Equal| a@@188 b@@125)  (and (and (|Seq#Equal| (BetreeSpec.MessageInsertion.key a@@188) (BetreeSpec.MessageInsertion.key b@@125)) (|ValueMessage.Message#Equal| (BetreeSpec.MessageInsertion.msg a@@188) (BetreeSpec.MessageInsertion.msg b@@125))) (|BetreeGraph.Node#Equal| (BetreeSpec.MessageInsertion.oldroot a@@188) (BetreeSpec.MessageInsertion.oldroot b@@125))))) :qid |unknown.0:0| :skolemid |3920| :pattern ( (|BetreeSpec.MessageInsertion#Equal| a@@188 b@@125)) )))
(assert (forall ((a@@189 T@U) (b@@126 T@U) ) (!  (=> (and (= (type a@@189) DatatypeTypeType) (= (type b@@126) DatatypeTypeType)) (= (|BetreeSpec.MessageInsertion#Equal| a@@189 b@@126) (= a@@189 b@@126))) :qid |unknown.0:0| :skolemid |3921| :pattern ( (|BetreeSpec.MessageInsertion#Equal| a@@189 b@@126)) )))
(assert (forall ((arg0@@656 T@U) (arg1@@319 T@U) (arg2@@189 T@U) (arg3@@128 T@U) (arg4@@93 T@U) (arg5@@55 T@U) (arg6@@36 T@U) (arg7@@21 T@U) (arg8@@10 T@U) ) (! (= (type (|#BetreeSpec.NodeFlush.NodeFlush| arg0@@656 arg1@@319 arg2@@189 arg3@@128 arg4@@93 arg5@@55 arg6@@36 arg7@@21 arg8@@10)) DatatypeTypeType) :qid |funType:#BetreeSpec.NodeFlush.NodeFlush| :pattern ( (|#BetreeSpec.NodeFlush.NodeFlush| arg0@@656 arg1@@319 arg2@@189 arg3@@128 arg4@@93 arg5@@55 arg6@@36 arg7@@21 arg8@@10)) )))
(assert (forall ((|a#35#0#0@@1| T@U) (|a#35#1#0@@1| T@U) (|a#35#2#0| T@U) (|a#35#3#0| T@U) (|a#35#4#0| T@U) (|a#35#5#0| T@U) (|a#35#6#0| T@U) (|a#35#7#0| T@U) (|a#35#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#35#0#0@@1|) BoxType) (= (type |a#35#1#0@@1|) DatatypeTypeType)) (= (type |a#35#2#0|) DatatypeTypeType)) (= (type |a#35#3#0|) BoxType)) (= (type |a#35#4#0|) DatatypeTypeType)) (= (type |a#35#5#0|) BoxType)) (= (type |a#35#6#0|) DatatypeTypeType)) (= (type |a#35#7#0|) (MapType0Type BoxType boolType))) (= (type |a#35#8#0|) (MapType0Type BoxType boolType))) (= (DatatypeCtorId (|#BetreeSpec.NodeFlush.NodeFlush| |a#35#0#0@@1| |a#35#1#0@@1| |a#35#2#0| |a#35#3#0| |a#35#4#0| |a#35#5#0| |a#35#6#0| |a#35#7#0| |a#35#8#0|)) |##BetreeSpec.NodeFlush.NodeFlush|)) :qid |BetreeSpecidfy.202:7| :skolemid |3922| :pattern ( (|#BetreeSpec.NodeFlush.NodeFlush| |a#35#0#0@@1| |a#35#1#0@@1| |a#35#2#0| |a#35#3#0| |a#35#4#0| |a#35#5#0| |a#35#6#0| |a#35#7#0| |a#35#8#0|)) )))
(assert (forall ((d@@201 T@U) ) (!  (=> (= (type d@@201) DatatypeTypeType) (= (BetreeSpec.NodeFlush.NodeFlush_q d@@201) (= (DatatypeCtorId d@@201) |##BetreeSpec.NodeFlush.NodeFlush|))) :qid |unknown.0:0| :skolemid |3923| :pattern ( (BetreeSpec.NodeFlush.NodeFlush_q d@@201)) )))
(assert (forall ((d@@202 T@U) ) (!  (=> (and (= (type d@@202) DatatypeTypeType) (BetreeSpec.NodeFlush.NodeFlush_q d@@202)) (exists ((|a#36#0#0@@1| T@U) (|a#36#1#0@@1| T@U) (|a#36#2#0@@0| T@U) (|a#36#3#0| T@U) (|a#36#4#0| T@U) (|a#36#5#0| T@U) (|a#36#6#0| T@U) (|a#36#7#0| T@U) (|a#36#8#0| T@U) ) (!  (and (and (and (and (and (and (and (and (and (= (type |a#36#0#0@@1|) BoxType) (= (type |a#36#1#0@@1|) DatatypeTypeType)) (= (type |a#36#2#0@@0|) DatatypeTypeType)) (= (type |a#36#3#0|) BoxType)) (= (type |a#36#4#0|) DatatypeTypeType)) (= (type |a#36#5#0|) BoxType)) (= (type |a#36#6#0|) DatatypeTypeType)) (= (type |a#36#7#0|) (MapType0Type BoxType boolType))) (= (type |a#36#8#0|) (MapType0Type BoxType boolType))) (= d@@202 (|#BetreeSpec.NodeFlush.NodeFlush| |a#36#0#0@@1| |a#36#1#0@@1| |a#36#2#0@@0| |a#36#3#0| |a#36#4#0| |a#36#5#0| |a#36#6#0| |a#36#7#0| |a#36#8#0|))) :qid |BetreeSpecidfy.202:7| :skolemid |3924| :no-pattern (type |a#36#0#0@@1|) :no-pattern (type |a#36#1#0@@1|) :no-pattern (type |a#36#2#0@@0|) :no-pattern (type |a#36#3#0|) :no-pattern (type |a#36#4#0|) :no-pattern (type |a#36#5#0|) :no-pattern (type |a#36#6#0|) :no-pattern (type |a#36#7#0|) :no-pattern (type |a#36#8#0|) :no-pattern (U_2_int |a#36#0#0@@1|) :no-pattern (U_2_bool |a#36#0#0@@1|) :no-pattern (U_2_int |a#36#1#0@@1|) :no-pattern (U_2_bool |a#36#1#0@@1|) :no-pattern (U_2_int |a#36#2#0@@0|) :no-pattern (U_2_bool |a#36#2#0@@0|) :no-pattern (U_2_int |a#36#3#0|) :no-pattern (U_2_bool |a#36#3#0|) :no-pattern (U_2_int |a#36#4#0|) :no-pattern (U_2_bool |a#36#4#0|) :no-pattern (U_2_int |a#36#5#0|) :no-pattern (U_2_bool |a#36#5#0|) :no-pattern (U_2_int |a#36#6#0|) :no-pattern (U_2_bool |a#36#6#0|) :no-pattern (U_2_int |a#36#7#0|) :no-pattern (U_2_bool |a#36#7#0|) :no-pattern (U_2_int |a#36#8#0|) :no-pattern (U_2_bool |a#36#8#0|) ))) :qid |unknown.0:0| :skolemid |3925| :pattern ( (BetreeSpec.NodeFlush.NodeFlush_q d@@202)) )))
(assert (forall ((|a#37#0#0@@1| T@U) (|a#37#1#0@@1| T@U) (|a#37#2#0@@0| T@U) (|a#37#3#0| T@U) (|a#37#4#0| T@U) (|a#37#5#0| T@U) (|a#37#6#0| T@U) (|a#37#7#0| T@U) (|a#37#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#37#0#0@@1|) BoxType) (= (type |a#37#1#0@@1|) DatatypeTypeType)) (= (type |a#37#2#0@@0|) DatatypeTypeType)) (= (type |a#37#3#0|) BoxType)) (= (type |a#37#4#0|) DatatypeTypeType)) (= (type |a#37#5#0|) BoxType)) (= (type |a#37#6#0|) DatatypeTypeType)) (= (type |a#37#7#0|) (MapType0Type BoxType boolType))) (= (type |a#37#8#0|) (MapType0Type BoxType boolType))) (= ($Is (|#BetreeSpec.NodeFlush.NodeFlush| |a#37#0#0@@1| |a#37#1#0@@1| |a#37#2#0@@0| |a#37#3#0| |a#37#4#0| |a#37#5#0| |a#37#6#0| |a#37#7#0| |a#37#8#0|) Tclass.BetreeSpec.NodeFlush)  (and (and (and (and (and (and (and (and ($IsBox |a#37#0#0@@1| Tclass.ReferenceType.Reference) ($Is |a#37#1#0@@1| Tclass.BetreeGraph.Node)) ($Is |a#37#2#0@@0| Tclass.BetreeGraph.Node)) ($IsBox |a#37#3#0| Tclass.ReferenceType.Reference)) ($Is |a#37#4#0| Tclass.BetreeGraph.Node)) ($IsBox |a#37#5#0| Tclass.ReferenceType.Reference)) ($Is |a#37#6#0| Tclass.BetreeGraph.Node)) ($Is |a#37#7#0| (TISet Tclass.KeyType.Key))) ($Is |a#37#8#0| (TISet Tclass.KeyType.Key))))) :qid |BetreeSpecidfy.202:7| :skolemid |3926| :pattern ( ($Is (|#BetreeSpec.NodeFlush.NodeFlush| |a#37#0#0@@1| |a#37#1#0@@1| |a#37#2#0@@0| |a#37#3#0| |a#37#4#0| |a#37#5#0| |a#37#6#0| |a#37#7#0| |a#37#8#0|) Tclass.BetreeSpec.NodeFlush)) )))
(assert (forall ((|a#38#0#0@@1| T@U) (|a#38#1#0@@1| T@U) (|a#38#2#0@@0| T@U) (|a#38#3#0| T@U) (|a#38#4#0| T@U) (|a#38#5#0| T@U) (|a#38#6#0| T@U) (|a#38#7#0| T@U) (|a#38#8#0| T@U) ($h@@192 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |a#38#0#0@@1|) BoxType) (= (type |a#38#1#0@@1|) DatatypeTypeType)) (= (type |a#38#2#0@@0|) DatatypeTypeType)) (= (type |a#38#3#0|) BoxType)) (= (type |a#38#4#0|) DatatypeTypeType)) (= (type |a#38#5#0|) BoxType)) (= (type |a#38#6#0|) DatatypeTypeType)) (= (type |a#38#7#0|) (MapType0Type BoxType boolType))) (= (type |a#38#8#0|) (MapType0Type BoxType boolType))) (= (type $h@@192) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@192)) (= ($IsAlloc (|#BetreeSpec.NodeFlush.NodeFlush| |a#38#0#0@@1| |a#38#1#0@@1| |a#38#2#0@@0| |a#38#3#0| |a#38#4#0| |a#38#5#0| |a#38#6#0| |a#38#7#0| |a#38#8#0|) Tclass.BetreeSpec.NodeFlush $h@@192)  (and (and (and (and (and (and (and (and ($IsAllocBox |a#38#0#0@@1| Tclass.ReferenceType.Reference $h@@192) ($IsAlloc |a#38#1#0@@1| Tclass.BetreeGraph.Node $h@@192)) ($IsAlloc |a#38#2#0@@0| Tclass.BetreeGraph.Node $h@@192)) ($IsAllocBox |a#38#3#0| Tclass.ReferenceType.Reference $h@@192)) ($IsAlloc |a#38#4#0| Tclass.BetreeGraph.Node $h@@192)) ($IsAllocBox |a#38#5#0| Tclass.ReferenceType.Reference $h@@192)) ($IsAlloc |a#38#6#0| Tclass.BetreeGraph.Node $h@@192)) ($IsAlloc |a#38#7#0| (TISet Tclass.KeyType.Key) $h@@192)) ($IsAlloc |a#38#8#0| (TISet Tclass.KeyType.Key) $h@@192)))) :qid |BetreeSpecidfy.202:7| :skolemid |3927| :pattern ( ($IsAlloc (|#BetreeSpec.NodeFlush.NodeFlush| |a#38#0#0@@1| |a#38#1#0@@1| |a#38#2#0@@0| |a#38#3#0| |a#38#4#0| |a#38#5#0| |a#38#6#0| |a#38#7#0| |a#38#8#0|) Tclass.BetreeSpec.NodeFlush $h@@192)) )))
(assert (forall ((arg0@@657 T@U) ) (! (= (type (BetreeSpec.NodeFlush.parentref arg0@@657)) BoxType) :qid |funType:BetreeSpec.NodeFlush.parentref| :pattern ( (BetreeSpec.NodeFlush.parentref arg0@@657)) )))
(assert (forall ((d@@203 T@U) ($h@@193 T@U) ) (!  (=> (and (and (= (type d@@203) DatatypeTypeType) (= (type $h@@193) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@193) (and (BetreeSpec.NodeFlush.NodeFlush_q d@@203) ($IsAlloc d@@203 Tclass.BetreeSpec.NodeFlush $h@@193)))) ($IsAllocBox (BetreeSpec.NodeFlush.parentref d@@203) Tclass.ReferenceType.Reference $h@@193)) :qid |unknown.0:0| :skolemid |3928| :pattern ( ($IsAllocBox (BetreeSpec.NodeFlush.parentref d@@203) Tclass.ReferenceType.Reference $h@@193)) )))
(assert (forall ((arg0@@658 T@U) ) (! (= (type (BetreeSpec.NodeFlush.parent arg0@@658)) DatatypeTypeType) :qid |funType:BetreeSpec.NodeFlush.parent| :pattern ( (BetreeSpec.NodeFlush.parent arg0@@658)) )))
(assert (forall ((d@@204 T@U) ($h@@194 T@U) ) (!  (=> (and (and (= (type d@@204) DatatypeTypeType) (= (type $h@@194) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@194) (and (BetreeSpec.NodeFlush.NodeFlush_q d@@204) ($IsAlloc d@@204 Tclass.BetreeSpec.NodeFlush $h@@194)))) ($IsAlloc (BetreeSpec.NodeFlush.parent d@@204) Tclass.BetreeGraph.Node $h@@194)) :qid |unknown.0:0| :skolemid |3929| :pattern ( ($IsAlloc (BetreeSpec.NodeFlush.parent d@@204) Tclass.BetreeGraph.Node $h@@194)) )))
(assert (forall ((arg0@@659 T@U) ) (! (= (type (BetreeSpec.NodeFlush.newparent arg0@@659)) DatatypeTypeType) :qid |funType:BetreeSpec.NodeFlush.newparent| :pattern ( (BetreeSpec.NodeFlush.newparent arg0@@659)) )))
(assert (forall ((d@@205 T@U) ($h@@195 T@U) ) (!  (=> (and (and (= (type d@@205) DatatypeTypeType) (= (type $h@@195) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@195) (and (BetreeSpec.NodeFlush.NodeFlush_q d@@205) ($IsAlloc d@@205 Tclass.BetreeSpec.NodeFlush $h@@195)))) ($IsAlloc (BetreeSpec.NodeFlush.newparent d@@205) Tclass.BetreeGraph.Node $h@@195)) :qid |unknown.0:0| :skolemid |3930| :pattern ( ($IsAlloc (BetreeSpec.NodeFlush.newparent d@@205) Tclass.BetreeGraph.Node $h@@195)) )))
(assert (forall ((arg0@@660 T@U) ) (! (= (type (BetreeSpec.NodeFlush.childref arg0@@660)) BoxType) :qid |funType:BetreeSpec.NodeFlush.childref| :pattern ( (BetreeSpec.NodeFlush.childref arg0@@660)) )))
(assert (forall ((d@@206 T@U) ($h@@196 T@U) ) (!  (=> (and (and (= (type d@@206) DatatypeTypeType) (= (type $h@@196) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@196) (and (BetreeSpec.NodeFlush.NodeFlush_q d@@206) ($IsAlloc d@@206 Tclass.BetreeSpec.NodeFlush $h@@196)))) ($IsAllocBox (BetreeSpec.NodeFlush.childref d@@206) Tclass.ReferenceType.Reference $h@@196)) :qid |unknown.0:0| :skolemid |3931| :pattern ( ($IsAllocBox (BetreeSpec.NodeFlush.childref d@@206) Tclass.ReferenceType.Reference $h@@196)) )))
(assert (forall ((arg0@@661 T@U) ) (! (= (type (BetreeSpec.NodeFlush.child arg0@@661)) DatatypeTypeType) :qid |funType:BetreeSpec.NodeFlush.child| :pattern ( (BetreeSpec.NodeFlush.child arg0@@661)) )))
(assert (forall ((d@@207 T@U) ($h@@197 T@U) ) (!  (=> (and (and (= (type d@@207) DatatypeTypeType) (= (type $h@@197) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@197) (and (BetreeSpec.NodeFlush.NodeFlush_q d@@207) ($IsAlloc d@@207 Tclass.BetreeSpec.NodeFlush $h@@197)))) ($IsAlloc (BetreeSpec.NodeFlush.child d@@207) Tclass.BetreeGraph.Node $h@@197)) :qid |unknown.0:0| :skolemid |3932| :pattern ( ($IsAlloc (BetreeSpec.NodeFlush.child d@@207) Tclass.BetreeGraph.Node $h@@197)) )))
(assert (forall ((arg0@@662 T@U) ) (! (= (type (BetreeSpec.NodeFlush.newchildref arg0@@662)) BoxType) :qid |funType:BetreeSpec.NodeFlush.newchildref| :pattern ( (BetreeSpec.NodeFlush.newchildref arg0@@662)) )))
(assert (forall ((d@@208 T@U) ($h@@198 T@U) ) (!  (=> (and (and (= (type d@@208) DatatypeTypeType) (= (type $h@@198) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@198) (and (BetreeSpec.NodeFlush.NodeFlush_q d@@208) ($IsAlloc d@@208 Tclass.BetreeSpec.NodeFlush $h@@198)))) ($IsAllocBox (BetreeSpec.NodeFlush.newchildref d@@208) Tclass.ReferenceType.Reference $h@@198)) :qid |unknown.0:0| :skolemid |3933| :pattern ( ($IsAllocBox (BetreeSpec.NodeFlush.newchildref d@@208) Tclass.ReferenceType.Reference $h@@198)) )))
(assert (forall ((arg0@@663 T@U) ) (! (= (type (BetreeSpec.NodeFlush.newchild arg0@@663)) DatatypeTypeType) :qid |funType:BetreeSpec.NodeFlush.newchild| :pattern ( (BetreeSpec.NodeFlush.newchild arg0@@663)) )))
(assert (forall ((d@@209 T@U) ($h@@199 T@U) ) (!  (=> (and (and (= (type d@@209) DatatypeTypeType) (= (type $h@@199) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@199) (and (BetreeSpec.NodeFlush.NodeFlush_q d@@209) ($IsAlloc d@@209 Tclass.BetreeSpec.NodeFlush $h@@199)))) ($IsAlloc (BetreeSpec.NodeFlush.newchild d@@209) Tclass.BetreeGraph.Node $h@@199)) :qid |unknown.0:0| :skolemid |3934| :pattern ( ($IsAlloc (BetreeSpec.NodeFlush.newchild d@@209) Tclass.BetreeGraph.Node $h@@199)) )))
(assert (forall ((arg0@@664 T@U) ) (! (= (type (BetreeSpec.NodeFlush.movedKeys arg0@@664)) (MapType0Type BoxType boolType)) :qid |funType:BetreeSpec.NodeFlush.movedKeys| :pattern ( (BetreeSpec.NodeFlush.movedKeys arg0@@664)) )))
(assert (forall ((d@@210 T@U) ($h@@200 T@U) ) (!  (=> (and (and (= (type d@@210) DatatypeTypeType) (= (type $h@@200) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@200) (and (BetreeSpec.NodeFlush.NodeFlush_q d@@210) ($IsAlloc d@@210 Tclass.BetreeSpec.NodeFlush $h@@200)))) ($IsAlloc (BetreeSpec.NodeFlush.movedKeys d@@210) (TISet Tclass.KeyType.Key) $h@@200)) :qid |unknown.0:0| :skolemid |3935| :pattern ( ($IsAlloc (BetreeSpec.NodeFlush.movedKeys d@@210) (TISet Tclass.KeyType.Key) $h@@200)) )))
(assert (forall ((arg0@@665 T@U) ) (! (= (type (BetreeSpec.NodeFlush.flushedKeys arg0@@665)) (MapType0Type BoxType boolType)) :qid |funType:BetreeSpec.NodeFlush.flushedKeys| :pattern ( (BetreeSpec.NodeFlush.flushedKeys arg0@@665)) )))
(assert (forall ((d@@211 T@U) ($h@@201 T@U) ) (!  (=> (and (and (= (type d@@211) DatatypeTypeType) (= (type $h@@201) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@201) (and (BetreeSpec.NodeFlush.NodeFlush_q d@@211) ($IsAlloc d@@211 Tclass.BetreeSpec.NodeFlush $h@@201)))) ($IsAlloc (BetreeSpec.NodeFlush.flushedKeys d@@211) (TISet Tclass.KeyType.Key) $h@@201)) :qid |unknown.0:0| :skolemid |3936| :pattern ( ($IsAlloc (BetreeSpec.NodeFlush.flushedKeys d@@211) (TISet Tclass.KeyType.Key) $h@@201)) )))
(assert (forall ((|a#39#0#0@@1| T@U) (|a#39#1#0@@1| T@U) (|a#39#2#0@@0| T@U) (|a#39#3#0| T@U) (|a#39#4#0| T@U) (|a#39#5#0| T@U) (|a#39#6#0| T@U) (|a#39#7#0| T@U) (|a#39#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#39#0#0@@1|) BoxType) (= (type |a#39#1#0@@1|) DatatypeTypeType)) (= (type |a#39#2#0@@0|) DatatypeTypeType)) (= (type |a#39#3#0|) BoxType)) (= (type |a#39#4#0|) DatatypeTypeType)) (= (type |a#39#5#0|) BoxType)) (= (type |a#39#6#0|) DatatypeTypeType)) (= (type |a#39#7#0|) (MapType0Type BoxType boolType))) (= (type |a#39#8#0|) (MapType0Type BoxType boolType))) (= (|#BetreeSpec.NodeFlush.NodeFlush| (Lit |a#39#0#0@@1|) (Lit |a#39#1#0@@1|) (Lit |a#39#2#0@@0|) (Lit |a#39#3#0|) (Lit |a#39#4#0|) (Lit |a#39#5#0|) (Lit |a#39#6#0|) (Lit |a#39#7#0|) (Lit |a#39#8#0|)) (Lit (|#BetreeSpec.NodeFlush.NodeFlush| |a#39#0#0@@1| |a#39#1#0@@1| |a#39#2#0@@0| |a#39#3#0| |a#39#4#0| |a#39#5#0| |a#39#6#0| |a#39#7#0| |a#39#8#0|)))) :qid |BetreeSpecidfy.202:7| :skolemid |3937| :pattern ( (|#BetreeSpec.NodeFlush.NodeFlush| (Lit |a#39#0#0@@1|) (Lit |a#39#1#0@@1|) (Lit |a#39#2#0@@0|) (Lit |a#39#3#0|) (Lit |a#39#4#0|) (Lit |a#39#5#0|) (Lit |a#39#6#0|) (Lit |a#39#7#0|) (Lit |a#39#8#0|))) )))
(assert (forall ((|a#40#0#0@@1| T@U) (|a#40#1#0@@1| T@U) (|a#40#2#0@@0| T@U) (|a#40#3#0| T@U) (|a#40#4#0| T@U) (|a#40#5#0| T@U) (|a#40#6#0| T@U) (|a#40#7#0| T@U) (|a#40#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#40#0#0@@1|) BoxType) (= (type |a#40#1#0@@1|) DatatypeTypeType)) (= (type |a#40#2#0@@0|) DatatypeTypeType)) (= (type |a#40#3#0|) BoxType)) (= (type |a#40#4#0|) DatatypeTypeType)) (= (type |a#40#5#0|) BoxType)) (= (type |a#40#6#0|) DatatypeTypeType)) (= (type |a#40#7#0|) (MapType0Type BoxType boolType))) (= (type |a#40#8#0|) (MapType0Type BoxType boolType))) (= (BetreeSpec.NodeFlush.parentref (|#BetreeSpec.NodeFlush.NodeFlush| |a#40#0#0@@1| |a#40#1#0@@1| |a#40#2#0@@0| |a#40#3#0| |a#40#4#0| |a#40#5#0| |a#40#6#0| |a#40#7#0| |a#40#8#0|)) |a#40#0#0@@1|)) :qid |BetreeSpecidfy.202:7| :skolemid |3938| :pattern ( (|#BetreeSpec.NodeFlush.NodeFlush| |a#40#0#0@@1| |a#40#1#0@@1| |a#40#2#0@@0| |a#40#3#0| |a#40#4#0| |a#40#5#0| |a#40#6#0| |a#40#7#0| |a#40#8#0|)) )))
(assert (forall ((|a#41#0#0@@1| T@U) (|a#41#1#0@@1| T@U) (|a#41#2#0@@0| T@U) (|a#41#3#0| T@U) (|a#41#4#0| T@U) (|a#41#5#0| T@U) (|a#41#6#0| T@U) (|a#41#7#0| T@U) (|a#41#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#41#0#0@@1|) BoxType) (= (type |a#41#1#0@@1|) DatatypeTypeType)) (= (type |a#41#2#0@@0|) DatatypeTypeType)) (= (type |a#41#3#0|) BoxType)) (= (type |a#41#4#0|) DatatypeTypeType)) (= (type |a#41#5#0|) BoxType)) (= (type |a#41#6#0|) DatatypeTypeType)) (= (type |a#41#7#0|) (MapType0Type BoxType boolType))) (= (type |a#41#8#0|) (MapType0Type BoxType boolType))) (= (BetreeSpec.NodeFlush.parent (|#BetreeSpec.NodeFlush.NodeFlush| |a#41#0#0@@1| |a#41#1#0@@1| |a#41#2#0@@0| |a#41#3#0| |a#41#4#0| |a#41#5#0| |a#41#6#0| |a#41#7#0| |a#41#8#0|)) |a#41#1#0@@1|)) :qid |BetreeSpecidfy.202:7| :skolemid |3939| :pattern ( (|#BetreeSpec.NodeFlush.NodeFlush| |a#41#0#0@@1| |a#41#1#0@@1| |a#41#2#0@@0| |a#41#3#0| |a#41#4#0| |a#41#5#0| |a#41#6#0| |a#41#7#0| |a#41#8#0|)) )))
(assert (forall ((|a#42#0#0@@1| T@U) (|a#42#1#0@@1| T@U) (|a#42#2#0@@0| T@U) (|a#42#3#0| T@U) (|a#42#4#0| T@U) (|a#42#5#0| T@U) (|a#42#6#0| T@U) (|a#42#7#0| T@U) (|a#42#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#42#0#0@@1|) BoxType) (= (type |a#42#1#0@@1|) DatatypeTypeType)) (= (type |a#42#2#0@@0|) DatatypeTypeType)) (= (type |a#42#3#0|) BoxType)) (= (type |a#42#4#0|) DatatypeTypeType)) (= (type |a#42#5#0|) BoxType)) (= (type |a#42#6#0|) DatatypeTypeType)) (= (type |a#42#7#0|) (MapType0Type BoxType boolType))) (= (type |a#42#8#0|) (MapType0Type BoxType boolType))) (< (DtRank |a#42#1#0@@1|) (DtRank (|#BetreeSpec.NodeFlush.NodeFlush| |a#42#0#0@@1| |a#42#1#0@@1| |a#42#2#0@@0| |a#42#3#0| |a#42#4#0| |a#42#5#0| |a#42#6#0| |a#42#7#0| |a#42#8#0|)))) :qid |BetreeSpecidfy.202:7| :skolemid |3940| :pattern ( (|#BetreeSpec.NodeFlush.NodeFlush| |a#42#0#0@@1| |a#42#1#0@@1| |a#42#2#0@@0| |a#42#3#0| |a#42#4#0| |a#42#5#0| |a#42#6#0| |a#42#7#0| |a#42#8#0|)) )))
(assert (forall ((|a#43#0#0@@1| T@U) (|a#43#1#0@@1| T@U) (|a#43#2#0@@0| T@U) (|a#43#3#0| T@U) (|a#43#4#0| T@U) (|a#43#5#0| T@U) (|a#43#6#0| T@U) (|a#43#7#0| T@U) (|a#43#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#43#0#0@@1|) BoxType) (= (type |a#43#1#0@@1|) DatatypeTypeType)) (= (type |a#43#2#0@@0|) DatatypeTypeType)) (= (type |a#43#3#0|) BoxType)) (= (type |a#43#4#0|) DatatypeTypeType)) (= (type |a#43#5#0|) BoxType)) (= (type |a#43#6#0|) DatatypeTypeType)) (= (type |a#43#7#0|) (MapType0Type BoxType boolType))) (= (type |a#43#8#0|) (MapType0Type BoxType boolType))) (= (BetreeSpec.NodeFlush.newparent (|#BetreeSpec.NodeFlush.NodeFlush| |a#43#0#0@@1| |a#43#1#0@@1| |a#43#2#0@@0| |a#43#3#0| |a#43#4#0| |a#43#5#0| |a#43#6#0| |a#43#7#0| |a#43#8#0|)) |a#43#2#0@@0|)) :qid |BetreeSpecidfy.202:7| :skolemid |3941| :pattern ( (|#BetreeSpec.NodeFlush.NodeFlush| |a#43#0#0@@1| |a#43#1#0@@1| |a#43#2#0@@0| |a#43#3#0| |a#43#4#0| |a#43#5#0| |a#43#6#0| |a#43#7#0| |a#43#8#0|)) )))
(assert (forall ((|a#44#0#0@@1| T@U) (|a#44#1#0@@1| T@U) (|a#44#2#0@@0| T@U) (|a#44#3#0| T@U) (|a#44#4#0| T@U) (|a#44#5#0| T@U) (|a#44#6#0| T@U) (|a#44#7#0| T@U) (|a#44#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#44#0#0@@1|) BoxType) (= (type |a#44#1#0@@1|) DatatypeTypeType)) (= (type |a#44#2#0@@0|) DatatypeTypeType)) (= (type |a#44#3#0|) BoxType)) (= (type |a#44#4#0|) DatatypeTypeType)) (= (type |a#44#5#0|) BoxType)) (= (type |a#44#6#0|) DatatypeTypeType)) (= (type |a#44#7#0|) (MapType0Type BoxType boolType))) (= (type |a#44#8#0|) (MapType0Type BoxType boolType))) (< (DtRank |a#44#2#0@@0|) (DtRank (|#BetreeSpec.NodeFlush.NodeFlush| |a#44#0#0@@1| |a#44#1#0@@1| |a#44#2#0@@0| |a#44#3#0| |a#44#4#0| |a#44#5#0| |a#44#6#0| |a#44#7#0| |a#44#8#0|)))) :qid |BetreeSpecidfy.202:7| :skolemid |3942| :pattern ( (|#BetreeSpec.NodeFlush.NodeFlush| |a#44#0#0@@1| |a#44#1#0@@1| |a#44#2#0@@0| |a#44#3#0| |a#44#4#0| |a#44#5#0| |a#44#6#0| |a#44#7#0| |a#44#8#0|)) )))
(assert (forall ((|a#45#0#0@@1| T@U) (|a#45#1#0@@1| T@U) (|a#45#2#0@@0| T@U) (|a#45#3#0| T@U) (|a#45#4#0| T@U) (|a#45#5#0| T@U) (|a#45#6#0| T@U) (|a#45#7#0| T@U) (|a#45#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#45#0#0@@1|) BoxType) (= (type |a#45#1#0@@1|) DatatypeTypeType)) (= (type |a#45#2#0@@0|) DatatypeTypeType)) (= (type |a#45#3#0|) BoxType)) (= (type |a#45#4#0|) DatatypeTypeType)) (= (type |a#45#5#0|) BoxType)) (= (type |a#45#6#0|) DatatypeTypeType)) (= (type |a#45#7#0|) (MapType0Type BoxType boolType))) (= (type |a#45#8#0|) (MapType0Type BoxType boolType))) (= (BetreeSpec.NodeFlush.childref (|#BetreeSpec.NodeFlush.NodeFlush| |a#45#0#0@@1| |a#45#1#0@@1| |a#45#2#0@@0| |a#45#3#0| |a#45#4#0| |a#45#5#0| |a#45#6#0| |a#45#7#0| |a#45#8#0|)) |a#45#3#0|)) :qid |BetreeSpecidfy.202:7| :skolemid |3943| :pattern ( (|#BetreeSpec.NodeFlush.NodeFlush| |a#45#0#0@@1| |a#45#1#0@@1| |a#45#2#0@@0| |a#45#3#0| |a#45#4#0| |a#45#5#0| |a#45#6#0| |a#45#7#0| |a#45#8#0|)) )))
(assert (forall ((|a#46#0#0@@1| T@U) (|a#46#1#0@@1| T@U) (|a#46#2#0@@0| T@U) (|a#46#3#0| T@U) (|a#46#4#0| T@U) (|a#46#5#0| T@U) (|a#46#6#0| T@U) (|a#46#7#0| T@U) (|a#46#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#46#0#0@@1|) BoxType) (= (type |a#46#1#0@@1|) DatatypeTypeType)) (= (type |a#46#2#0@@0|) DatatypeTypeType)) (= (type |a#46#3#0|) BoxType)) (= (type |a#46#4#0|) DatatypeTypeType)) (= (type |a#46#5#0|) BoxType)) (= (type |a#46#6#0|) DatatypeTypeType)) (= (type |a#46#7#0|) (MapType0Type BoxType boolType))) (= (type |a#46#8#0|) (MapType0Type BoxType boolType))) (= (BetreeSpec.NodeFlush.child (|#BetreeSpec.NodeFlush.NodeFlush| |a#46#0#0@@1| |a#46#1#0@@1| |a#46#2#0@@0| |a#46#3#0| |a#46#4#0| |a#46#5#0| |a#46#6#0| |a#46#7#0| |a#46#8#0|)) |a#46#4#0|)) :qid |BetreeSpecidfy.202:7| :skolemid |3944| :pattern ( (|#BetreeSpec.NodeFlush.NodeFlush| |a#46#0#0@@1| |a#46#1#0@@1| |a#46#2#0@@0| |a#46#3#0| |a#46#4#0| |a#46#5#0| |a#46#6#0| |a#46#7#0| |a#46#8#0|)) )))
(assert (forall ((|a#47#0#0@@1| T@U) (|a#47#1#0@@1| T@U) (|a#47#2#0@@0| T@U) (|a#47#3#0| T@U) (|a#47#4#0| T@U) (|a#47#5#0| T@U) (|a#47#6#0| T@U) (|a#47#7#0| T@U) (|a#47#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#47#0#0@@1|) BoxType) (= (type |a#47#1#0@@1|) DatatypeTypeType)) (= (type |a#47#2#0@@0|) DatatypeTypeType)) (= (type |a#47#3#0|) BoxType)) (= (type |a#47#4#0|) DatatypeTypeType)) (= (type |a#47#5#0|) BoxType)) (= (type |a#47#6#0|) DatatypeTypeType)) (= (type |a#47#7#0|) (MapType0Type BoxType boolType))) (= (type |a#47#8#0|) (MapType0Type BoxType boolType))) (< (DtRank |a#47#4#0|) (DtRank (|#BetreeSpec.NodeFlush.NodeFlush| |a#47#0#0@@1| |a#47#1#0@@1| |a#47#2#0@@0| |a#47#3#0| |a#47#4#0| |a#47#5#0| |a#47#6#0| |a#47#7#0| |a#47#8#0|)))) :qid |BetreeSpecidfy.202:7| :skolemid |3945| :pattern ( (|#BetreeSpec.NodeFlush.NodeFlush| |a#47#0#0@@1| |a#47#1#0@@1| |a#47#2#0@@0| |a#47#3#0| |a#47#4#0| |a#47#5#0| |a#47#6#0| |a#47#7#0| |a#47#8#0|)) )))
(assert (forall ((|a#48#0#0@@0| T@U) (|a#48#1#0@@0| T@U) (|a#48#2#0| T@U) (|a#48#3#0| T@U) (|a#48#4#0| T@U) (|a#48#5#0| T@U) (|a#48#6#0| T@U) (|a#48#7#0| T@U) (|a#48#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#48#0#0@@0|) BoxType) (= (type |a#48#1#0@@0|) DatatypeTypeType)) (= (type |a#48#2#0|) DatatypeTypeType)) (= (type |a#48#3#0|) BoxType)) (= (type |a#48#4#0|) DatatypeTypeType)) (= (type |a#48#5#0|) BoxType)) (= (type |a#48#6#0|) DatatypeTypeType)) (= (type |a#48#7#0|) (MapType0Type BoxType boolType))) (= (type |a#48#8#0|) (MapType0Type BoxType boolType))) (= (BetreeSpec.NodeFlush.newchildref (|#BetreeSpec.NodeFlush.NodeFlush| |a#48#0#0@@0| |a#48#1#0@@0| |a#48#2#0| |a#48#3#0| |a#48#4#0| |a#48#5#0| |a#48#6#0| |a#48#7#0| |a#48#8#0|)) |a#48#5#0|)) :qid |BetreeSpecidfy.202:7| :skolemid |3946| :pattern ( (|#BetreeSpec.NodeFlush.NodeFlush| |a#48#0#0@@0| |a#48#1#0@@0| |a#48#2#0| |a#48#3#0| |a#48#4#0| |a#48#5#0| |a#48#6#0| |a#48#7#0| |a#48#8#0|)) )))
(assert (forall ((|a#49#0#0@@0| T@U) (|a#49#1#0@@0| T@U) (|a#49#2#0| T@U) (|a#49#3#0| T@U) (|a#49#4#0| T@U) (|a#49#5#0| T@U) (|a#49#6#0| T@U) (|a#49#7#0| T@U) (|a#49#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#49#0#0@@0|) BoxType) (= (type |a#49#1#0@@0|) DatatypeTypeType)) (= (type |a#49#2#0|) DatatypeTypeType)) (= (type |a#49#3#0|) BoxType)) (= (type |a#49#4#0|) DatatypeTypeType)) (= (type |a#49#5#0|) BoxType)) (= (type |a#49#6#0|) DatatypeTypeType)) (= (type |a#49#7#0|) (MapType0Type BoxType boolType))) (= (type |a#49#8#0|) (MapType0Type BoxType boolType))) (= (BetreeSpec.NodeFlush.newchild (|#BetreeSpec.NodeFlush.NodeFlush| |a#49#0#0@@0| |a#49#1#0@@0| |a#49#2#0| |a#49#3#0| |a#49#4#0| |a#49#5#0| |a#49#6#0| |a#49#7#0| |a#49#8#0|)) |a#49#6#0|)) :qid |BetreeSpecidfy.202:7| :skolemid |3947| :pattern ( (|#BetreeSpec.NodeFlush.NodeFlush| |a#49#0#0@@0| |a#49#1#0@@0| |a#49#2#0| |a#49#3#0| |a#49#4#0| |a#49#5#0| |a#49#6#0| |a#49#7#0| |a#49#8#0|)) )))
(assert (forall ((|a#50#0#0@@0| T@U) (|a#50#1#0@@0| T@U) (|a#50#2#0| T@U) (|a#50#3#0| T@U) (|a#50#4#0| T@U) (|a#50#5#0| T@U) (|a#50#6#0| T@U) (|a#50#7#0| T@U) (|a#50#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#50#0#0@@0|) BoxType) (= (type |a#50#1#0@@0|) DatatypeTypeType)) (= (type |a#50#2#0|) DatatypeTypeType)) (= (type |a#50#3#0|) BoxType)) (= (type |a#50#4#0|) DatatypeTypeType)) (= (type |a#50#5#0|) BoxType)) (= (type |a#50#6#0|) DatatypeTypeType)) (= (type |a#50#7#0|) (MapType0Type BoxType boolType))) (= (type |a#50#8#0|) (MapType0Type BoxType boolType))) (< (DtRank |a#50#6#0|) (DtRank (|#BetreeSpec.NodeFlush.NodeFlush| |a#50#0#0@@0| |a#50#1#0@@0| |a#50#2#0| |a#50#3#0| |a#50#4#0| |a#50#5#0| |a#50#6#0| |a#50#7#0| |a#50#8#0|)))) :qid |BetreeSpecidfy.202:7| :skolemid |3948| :pattern ( (|#BetreeSpec.NodeFlush.NodeFlush| |a#50#0#0@@0| |a#50#1#0@@0| |a#50#2#0| |a#50#3#0| |a#50#4#0| |a#50#5#0| |a#50#6#0| |a#50#7#0| |a#50#8#0|)) )))
(assert (forall ((|a#51#0#0| T@U) (|a#51#1#0| T@U) (|a#51#2#0| T@U) (|a#51#3#0| T@U) (|a#51#4#0| T@U) (|a#51#5#0| T@U) (|a#51#6#0| T@U) (|a#51#7#0| T@U) (|a#51#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#51#0#0|) BoxType) (= (type |a#51#1#0|) DatatypeTypeType)) (= (type |a#51#2#0|) DatatypeTypeType)) (= (type |a#51#3#0|) BoxType)) (= (type |a#51#4#0|) DatatypeTypeType)) (= (type |a#51#5#0|) BoxType)) (= (type |a#51#6#0|) DatatypeTypeType)) (= (type |a#51#7#0|) (MapType0Type BoxType boolType))) (= (type |a#51#8#0|) (MapType0Type BoxType boolType))) (= (BetreeSpec.NodeFlush.movedKeys (|#BetreeSpec.NodeFlush.NodeFlush| |a#51#0#0| |a#51#1#0| |a#51#2#0| |a#51#3#0| |a#51#4#0| |a#51#5#0| |a#51#6#0| |a#51#7#0| |a#51#8#0|)) |a#51#7#0|)) :qid |BetreeSpecidfy.202:7| :skolemid |3949| :pattern ( (|#BetreeSpec.NodeFlush.NodeFlush| |a#51#0#0| |a#51#1#0| |a#51#2#0| |a#51#3#0| |a#51#4#0| |a#51#5#0| |a#51#6#0| |a#51#7#0| |a#51#8#0|)) )))
(assert (forall ((|a#52#0#0| T@U) (|a#52#1#0| T@U) (|a#52#2#0| T@U) (|a#52#3#0| T@U) (|a#52#4#0| T@U) (|a#52#5#0| T@U) (|a#52#6#0| T@U) (|a#52#7#0| T@U) (|a#52#8#0| T@U) (d@@212 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |a#52#0#0|) BoxType) (= (type |a#52#1#0|) DatatypeTypeType)) (= (type |a#52#2#0|) DatatypeTypeType)) (= (type |a#52#3#0|) BoxType)) (= (type |a#52#4#0|) DatatypeTypeType)) (= (type |a#52#5#0|) BoxType)) (= (type |a#52#6#0|) DatatypeTypeType)) (= (type |a#52#7#0|) (MapType0Type BoxType boolType))) (= (type |a#52#8#0|) (MapType0Type BoxType boolType))) (= (type d@@212) DatatypeTypeType)) (U_2_bool (MapType0Select |a#52#7#0| ($Box d@@212)))) (< (DtRank d@@212) (DtRank (|#BetreeSpec.NodeFlush.NodeFlush| |a#52#0#0| |a#52#1#0| |a#52#2#0| |a#52#3#0| |a#52#4#0| |a#52#5#0| |a#52#6#0| |a#52#7#0| |a#52#8#0|)))) :qid |BetreeSpecidfy.202:7| :skolemid |3950| :pattern ( (MapType0Select |a#52#7#0| ($Box d@@212)) (|#BetreeSpec.NodeFlush.NodeFlush| |a#52#0#0| |a#52#1#0| |a#52#2#0| |a#52#3#0| |a#52#4#0| |a#52#5#0| |a#52#6#0| |a#52#7#0| |a#52#8#0|)) )))
(assert (forall ((|a#53#0#0| T@U) (|a#53#1#0| T@U) (|a#53#2#0| T@U) (|a#53#3#0| T@U) (|a#53#4#0| T@U) (|a#53#5#0| T@U) (|a#53#6#0| T@U) (|a#53#7#0| T@U) (|a#53#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#53#0#0|) BoxType) (= (type |a#53#1#0|) DatatypeTypeType)) (= (type |a#53#2#0|) DatatypeTypeType)) (= (type |a#53#3#0|) BoxType)) (= (type |a#53#4#0|) DatatypeTypeType)) (= (type |a#53#5#0|) BoxType)) (= (type |a#53#6#0|) DatatypeTypeType)) (= (type |a#53#7#0|) (MapType0Type BoxType boolType))) (= (type |a#53#8#0|) (MapType0Type BoxType boolType))) (= (BetreeSpec.NodeFlush.flushedKeys (|#BetreeSpec.NodeFlush.NodeFlush| |a#53#0#0| |a#53#1#0| |a#53#2#0| |a#53#3#0| |a#53#4#0| |a#53#5#0| |a#53#6#0| |a#53#7#0| |a#53#8#0|)) |a#53#8#0|)) :qid |BetreeSpecidfy.202:7| :skolemid |3951| :pattern ( (|#BetreeSpec.NodeFlush.NodeFlush| |a#53#0#0| |a#53#1#0| |a#53#2#0| |a#53#3#0| |a#53#4#0| |a#53#5#0| |a#53#6#0| |a#53#7#0| |a#53#8#0|)) )))
(assert (forall ((|a#54#0#0| T@U) (|a#54#1#0| T@U) (|a#54#2#0| T@U) (|a#54#3#0| T@U) (|a#54#4#0| T@U) (|a#54#5#0| T@U) (|a#54#6#0| T@U) (|a#54#7#0| T@U) (|a#54#8#0| T@U) (d@@213 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |a#54#0#0|) BoxType) (= (type |a#54#1#0|) DatatypeTypeType)) (= (type |a#54#2#0|) DatatypeTypeType)) (= (type |a#54#3#0|) BoxType)) (= (type |a#54#4#0|) DatatypeTypeType)) (= (type |a#54#5#0|) BoxType)) (= (type |a#54#6#0|) DatatypeTypeType)) (= (type |a#54#7#0|) (MapType0Type BoxType boolType))) (= (type |a#54#8#0|) (MapType0Type BoxType boolType))) (= (type d@@213) DatatypeTypeType)) (U_2_bool (MapType0Select |a#54#8#0| ($Box d@@213)))) (< (DtRank d@@213) (DtRank (|#BetreeSpec.NodeFlush.NodeFlush| |a#54#0#0| |a#54#1#0| |a#54#2#0| |a#54#3#0| |a#54#4#0| |a#54#5#0| |a#54#6#0| |a#54#7#0| |a#54#8#0|)))) :qid |BetreeSpecidfy.202:7| :skolemid |3952| :pattern ( (MapType0Select |a#54#8#0| ($Box d@@213)) (|#BetreeSpec.NodeFlush.NodeFlush| |a#54#0#0| |a#54#1#0| |a#54#2#0| |a#54#3#0| |a#54#4#0| |a#54#5#0| |a#54#6#0| |a#54#7#0| |a#54#8#0|)) )))
(assert (forall ((d@@214 T@U) ) (!  (=> (and (= (type d@@214) DatatypeTypeType) (|$IsA#BetreeSpec.NodeFlush| d@@214)) (BetreeSpec.NodeFlush.NodeFlush_q d@@214)) :qid |unknown.0:0| :skolemid |3953| :pattern ( (|$IsA#BetreeSpec.NodeFlush| d@@214)) )))
(assert (forall ((d@@215 T@U) ) (!  (=> (and (= (type d@@215) DatatypeTypeType) ($Is d@@215 Tclass.BetreeSpec.NodeFlush)) (BetreeSpec.NodeFlush.NodeFlush_q d@@215)) :qid |unknown.0:0| :skolemid |3954| :pattern ( (BetreeSpec.NodeFlush.NodeFlush_q d@@215) ($Is d@@215 Tclass.BetreeSpec.NodeFlush)) )))
(assert (forall ((a@@190 T@U) (b@@127 T@U) ) (!  (=> (and (and (= (type a@@190) DatatypeTypeType) (= (type b@@127) DatatypeTypeType)) true) (= (|BetreeSpec.NodeFlush#Equal| a@@190 b@@127)  (and (and (and (and (and (and (and (and (= (BetreeSpec.NodeFlush.parentref a@@190) (BetreeSpec.NodeFlush.parentref b@@127)) (|BetreeGraph.Node#Equal| (BetreeSpec.NodeFlush.parent a@@190) (BetreeSpec.NodeFlush.parent b@@127))) (|BetreeGraph.Node#Equal| (BetreeSpec.NodeFlush.newparent a@@190) (BetreeSpec.NodeFlush.newparent b@@127))) (= (BetreeSpec.NodeFlush.childref a@@190) (BetreeSpec.NodeFlush.childref b@@127))) (|BetreeGraph.Node#Equal| (BetreeSpec.NodeFlush.child a@@190) (BetreeSpec.NodeFlush.child b@@127))) (= (BetreeSpec.NodeFlush.newchildref a@@190) (BetreeSpec.NodeFlush.newchildref b@@127))) (|BetreeGraph.Node#Equal| (BetreeSpec.NodeFlush.newchild a@@190) (BetreeSpec.NodeFlush.newchild b@@127))) (|ISet#Equal| (BetreeSpec.NodeFlush.movedKeys a@@190) (BetreeSpec.NodeFlush.movedKeys b@@127))) (|ISet#Equal| (BetreeSpec.NodeFlush.flushedKeys a@@190) (BetreeSpec.NodeFlush.flushedKeys b@@127))))) :qid |unknown.0:0| :skolemid |3955| :pattern ( (|BetreeSpec.NodeFlush#Equal| a@@190 b@@127)) )))
(assert (forall ((a@@191 T@U) (b@@128 T@U) ) (!  (=> (and (= (type a@@191) DatatypeTypeType) (= (type b@@128) DatatypeTypeType)) (= (|BetreeSpec.NodeFlush#Equal| a@@191 b@@128) (= a@@191 b@@128))) :qid |unknown.0:0| :skolemid |3956| :pattern ( (|BetreeSpec.NodeFlush#Equal| a@@191 b@@128)) )))
(assert (forall ((arg0@@666 T@U) (arg1@@320 T@U) ) (! (= (type (|#BetreeSpec.RootGrowth.RootGrowth| arg0@@666 arg1@@320)) DatatypeTypeType) :qid |funType:#BetreeSpec.RootGrowth.RootGrowth| :pattern ( (|#BetreeSpec.RootGrowth.RootGrowth| arg0@@666 arg1@@320)) )))
(assert (forall ((|a#55#0#0| T@U) (|a#55#1#0| T@U) ) (!  (=> (and (= (type |a#55#0#0|) DatatypeTypeType) (= (type |a#55#1#0|) BoxType)) (= (DatatypeCtorId (|#BetreeSpec.RootGrowth.RootGrowth| |a#55#0#0| |a#55#1#0|)) |##BetreeSpec.RootGrowth.RootGrowth|)) :qid |BetreeSpecidfy.245:36| :skolemid |3957| :pattern ( (|#BetreeSpec.RootGrowth.RootGrowth| |a#55#0#0| |a#55#1#0|)) )))
(assert (forall ((d@@216 T@U) ) (!  (=> (= (type d@@216) DatatypeTypeType) (= (BetreeSpec.RootGrowth.RootGrowth_q d@@216) (= (DatatypeCtorId d@@216) |##BetreeSpec.RootGrowth.RootGrowth|))) :qid |unknown.0:0| :skolemid |3958| :pattern ( (BetreeSpec.RootGrowth.RootGrowth_q d@@216)) )))
(assert (forall ((d@@217 T@U) ) (!  (=> (and (= (type d@@217) DatatypeTypeType) (BetreeSpec.RootGrowth.RootGrowth_q d@@217)) (exists ((|a#56#0#0| T@U) (|a#56#1#0| T@U) ) (!  (and (and (= (type |a#56#0#0|) DatatypeTypeType) (= (type |a#56#1#0|) BoxType)) (= d@@217 (|#BetreeSpec.RootGrowth.RootGrowth| |a#56#0#0| |a#56#1#0|))) :qid |BetreeSpecidfy.245:36| :skolemid |3959| :no-pattern (type |a#56#0#0|) :no-pattern (type |a#56#1#0|) :no-pattern (U_2_int |a#56#0#0|) :no-pattern (U_2_bool |a#56#0#0|) :no-pattern (U_2_int |a#56#1#0|) :no-pattern (U_2_bool |a#56#1#0|) ))) :qid |unknown.0:0| :skolemid |3960| :pattern ( (BetreeSpec.RootGrowth.RootGrowth_q d@@217)) )))
(assert (forall ((|a#57#0#0| T@U) (|a#57#1#0| T@U) ) (!  (=> (and (= (type |a#57#0#0|) DatatypeTypeType) (= (type |a#57#1#0|) BoxType)) (= ($Is (|#BetreeSpec.RootGrowth.RootGrowth| |a#57#0#0| |a#57#1#0|) Tclass.BetreeSpec.RootGrowth)  (and ($Is |a#57#0#0| Tclass.BetreeGraph.Node) ($IsBox |a#57#1#0| Tclass.ReferenceType.Reference)))) :qid |BetreeSpecidfy.245:36| :skolemid |3961| :pattern ( ($Is (|#BetreeSpec.RootGrowth.RootGrowth| |a#57#0#0| |a#57#1#0|) Tclass.BetreeSpec.RootGrowth)) )))
(assert (forall ((|a#58#0#0| T@U) (|a#58#1#0| T@U) ($h@@202 T@U) ) (!  (=> (and (and (and (= (type |a#58#0#0|) DatatypeTypeType) (= (type |a#58#1#0|) BoxType)) (= (type $h@@202) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@202)) (= ($IsAlloc (|#BetreeSpec.RootGrowth.RootGrowth| |a#58#0#0| |a#58#1#0|) Tclass.BetreeSpec.RootGrowth $h@@202)  (and ($IsAlloc |a#58#0#0| Tclass.BetreeGraph.Node $h@@202) ($IsAllocBox |a#58#1#0| Tclass.ReferenceType.Reference $h@@202)))) :qid |BetreeSpecidfy.245:36| :skolemid |3962| :pattern ( ($IsAlloc (|#BetreeSpec.RootGrowth.RootGrowth| |a#58#0#0| |a#58#1#0|) Tclass.BetreeSpec.RootGrowth $h@@202)) )))
(assert (forall ((arg0@@667 T@U) ) (! (= (type (BetreeSpec.RootGrowth.oldroot arg0@@667)) DatatypeTypeType) :qid |funType:BetreeSpec.RootGrowth.oldroot| :pattern ( (BetreeSpec.RootGrowth.oldroot arg0@@667)) )))
(assert (forall ((d@@218 T@U) ($h@@203 T@U) ) (!  (=> (and (and (= (type d@@218) DatatypeTypeType) (= (type $h@@203) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@203) (and (BetreeSpec.RootGrowth.RootGrowth_q d@@218) ($IsAlloc d@@218 Tclass.BetreeSpec.RootGrowth $h@@203)))) ($IsAlloc (BetreeSpec.RootGrowth.oldroot d@@218) Tclass.BetreeGraph.Node $h@@203)) :qid |unknown.0:0| :skolemid |3963| :pattern ( ($IsAlloc (BetreeSpec.RootGrowth.oldroot d@@218) Tclass.BetreeGraph.Node $h@@203)) )))
(assert (forall ((arg0@@668 T@U) ) (! (= (type (BetreeSpec.RootGrowth.newchildref arg0@@668)) BoxType) :qid |funType:BetreeSpec.RootGrowth.newchildref| :pattern ( (BetreeSpec.RootGrowth.newchildref arg0@@668)) )))
(assert (forall ((d@@219 T@U) ($h@@204 T@U) ) (!  (=> (and (and (= (type d@@219) DatatypeTypeType) (= (type $h@@204) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@204) (and (BetreeSpec.RootGrowth.RootGrowth_q d@@219) ($IsAlloc d@@219 Tclass.BetreeSpec.RootGrowth $h@@204)))) ($IsAllocBox (BetreeSpec.RootGrowth.newchildref d@@219) Tclass.ReferenceType.Reference $h@@204)) :qid |unknown.0:0| :skolemid |3964| :pattern ( ($IsAllocBox (BetreeSpec.RootGrowth.newchildref d@@219) Tclass.ReferenceType.Reference $h@@204)) )))
(assert (forall ((|a#59#0#0| T@U) (|a#59#1#0| T@U) ) (!  (=> (and (= (type |a#59#0#0|) DatatypeTypeType) (= (type |a#59#1#0|) BoxType)) (= (|#BetreeSpec.RootGrowth.RootGrowth| (Lit |a#59#0#0|) (Lit |a#59#1#0|)) (Lit (|#BetreeSpec.RootGrowth.RootGrowth| |a#59#0#0| |a#59#1#0|)))) :qid |BetreeSpecidfy.245:36| :skolemid |3965| :pattern ( (|#BetreeSpec.RootGrowth.RootGrowth| (Lit |a#59#0#0|) (Lit |a#59#1#0|))) )))
(assert (forall ((|a#60#0#0| T@U) (|a#60#1#0| T@U) ) (!  (=> (and (= (type |a#60#0#0|) DatatypeTypeType) (= (type |a#60#1#0|) BoxType)) (= (BetreeSpec.RootGrowth.oldroot (|#BetreeSpec.RootGrowth.RootGrowth| |a#60#0#0| |a#60#1#0|)) |a#60#0#0|)) :qid |BetreeSpecidfy.245:36| :skolemid |3966| :pattern ( (|#BetreeSpec.RootGrowth.RootGrowth| |a#60#0#0| |a#60#1#0|)) )))
(assert (forall ((|a#61#0#0| T@U) (|a#61#1#0| T@U) ) (!  (=> (and (= (type |a#61#0#0|) DatatypeTypeType) (= (type |a#61#1#0|) BoxType)) (< (DtRank |a#61#0#0|) (DtRank (|#BetreeSpec.RootGrowth.RootGrowth| |a#61#0#0| |a#61#1#0|)))) :qid |BetreeSpecidfy.245:36| :skolemid |3967| :pattern ( (|#BetreeSpec.RootGrowth.RootGrowth| |a#61#0#0| |a#61#1#0|)) )))
(assert (forall ((|a#62#0#0| T@U) (|a#62#1#0| T@U) ) (!  (=> (and (= (type |a#62#0#0|) DatatypeTypeType) (= (type |a#62#1#0|) BoxType)) (= (BetreeSpec.RootGrowth.newchildref (|#BetreeSpec.RootGrowth.RootGrowth| |a#62#0#0| |a#62#1#0|)) |a#62#1#0|)) :qid |BetreeSpecidfy.245:36| :skolemid |3968| :pattern ( (|#BetreeSpec.RootGrowth.RootGrowth| |a#62#0#0| |a#62#1#0|)) )))
(assert (forall ((d@@220 T@U) ) (!  (=> (and (= (type d@@220) DatatypeTypeType) (|$IsA#BetreeSpec.RootGrowth| d@@220)) (BetreeSpec.RootGrowth.RootGrowth_q d@@220)) :qid |unknown.0:0| :skolemid |3969| :pattern ( (|$IsA#BetreeSpec.RootGrowth| d@@220)) )))
(assert (forall ((d@@221 T@U) ) (!  (=> (and (= (type d@@221) DatatypeTypeType) ($Is d@@221 Tclass.BetreeSpec.RootGrowth)) (BetreeSpec.RootGrowth.RootGrowth_q d@@221)) :qid |unknown.0:0| :skolemid |3970| :pattern ( (BetreeSpec.RootGrowth.RootGrowth_q d@@221) ($Is d@@221 Tclass.BetreeSpec.RootGrowth)) )))
(assert (forall ((a@@192 T@U) (b@@129 T@U) ) (!  (=> (and (and (= (type a@@192) DatatypeTypeType) (= (type b@@129) DatatypeTypeType)) true) (= (|BetreeSpec.RootGrowth#Equal| a@@192 b@@129)  (and (|BetreeGraph.Node#Equal| (BetreeSpec.RootGrowth.oldroot a@@192) (BetreeSpec.RootGrowth.oldroot b@@129)) (= (BetreeSpec.RootGrowth.newchildref a@@192) (BetreeSpec.RootGrowth.newchildref b@@129))))) :qid |unknown.0:0| :skolemid |3971| :pattern ( (|BetreeSpec.RootGrowth#Equal| a@@192 b@@129)) )))
(assert (forall ((a@@193 T@U) (b@@130 T@U) ) (!  (=> (and (= (type a@@193) DatatypeTypeType) (= (type b@@130) DatatypeTypeType)) (= (|BetreeSpec.RootGrowth#Equal| a@@193 b@@130) (= a@@193 b@@130))) :qid |unknown.0:0| :skolemid |3972| :pattern ( (|BetreeSpec.RootGrowth#Equal| a@@193 b@@130)) )))
(assert (forall ((arg0@@669 T@U) (arg1@@321 T@U) (arg2@@190 T@U) (arg3@@129 T@U) (arg4@@94 T@U) (arg5@@56 T@U) (arg6@@37 T@U) (arg7@@22 T@U) ) (! (= (type (|#BetreeSpec.Redirect.Redirect| arg0@@669 arg1@@321 arg2@@190 arg3@@129 arg4@@94 arg5@@56 arg6@@37 arg7@@22)) DatatypeTypeType) :qid |funType:#BetreeSpec.Redirect.Redirect| :pattern ( (|#BetreeSpec.Redirect.Redirect| arg0@@669 arg1@@321 arg2@@190 arg3@@129 arg4@@94 arg5@@56 arg6@@37 arg7@@22)) )))
(assert (forall ((|a#63#0#0| T@U) (|a#63#1#0| T@U) (|a#63#2#0| T@U) (|a#63#3#0| T@U) (|a#63#4#0| T@U) (|a#63#5#0| T@U) (|a#63#6#0| T@U) (|a#63#7#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |a#63#0#0|) BoxType) (= (type |a#63#1#0|) DatatypeTypeType)) (= (type |a#63#2#0|) (SeqType BoxType))) (= (type |a#63#3#0|) (IMapType BoxType BoxType))) (= (type |a#63#4#0|) DatatypeTypeType)) (= (type |a#63#5#0|) (SeqType BoxType))) (= (type |a#63#6#0|) (IMapType BoxType BoxType))) (= (type |a#63#7#0|) (MapType0Type BoxType boolType))) (= (DatatypeCtorId (|#BetreeSpec.Redirect.Redirect| |a#63#0#0| |a#63#1#0| |a#63#2#0| |a#63#3#0| |a#63#4#0| |a#63#5#0| |a#63#6#0| |a#63#7#0|)) |##BetreeSpec.Redirect.Redirect|)) :qid |BetreeSpecidfy.272:5| :skolemid |3973| :pattern ( (|#BetreeSpec.Redirect.Redirect| |a#63#0#0| |a#63#1#0| |a#63#2#0| |a#63#3#0| |a#63#4#0| |a#63#5#0| |a#63#6#0| |a#63#7#0|)) )))
(assert (forall ((d@@222 T@U) ) (!  (=> (= (type d@@222) DatatypeTypeType) (= (BetreeSpec.Redirect.Redirect_q d@@222) (= (DatatypeCtorId d@@222) |##BetreeSpec.Redirect.Redirect|))) :qid |unknown.0:0| :skolemid |3974| :pattern ( (BetreeSpec.Redirect.Redirect_q d@@222)) )))
(assert (forall ((d@@223 T@U) ) (!  (=> (and (= (type d@@223) DatatypeTypeType) (BetreeSpec.Redirect.Redirect_q d@@223)) (exists ((|a#64#0#0| T@U) (|a#64#1#0| T@U) (|a#64#2#0| T@U) (|a#64#3#0| T@U) (|a#64#4#0| T@U) (|a#64#5#0| T@U) (|a#64#6#0| T@U) (|a#64#7#0| T@U) ) (!  (and (and (and (and (and (and (and (and (= (type |a#64#0#0|) BoxType) (= (type |a#64#1#0|) DatatypeTypeType)) (= (type |a#64#2#0|) (SeqType BoxType))) (= (type |a#64#3#0|) (IMapType BoxType BoxType))) (= (type |a#64#4#0|) DatatypeTypeType)) (= (type |a#64#5#0|) (SeqType BoxType))) (= (type |a#64#6#0|) (IMapType BoxType BoxType))) (= (type |a#64#7#0|) (MapType0Type BoxType boolType))) (= d@@223 (|#BetreeSpec.Redirect.Redirect| |a#64#0#0| |a#64#1#0| |a#64#2#0| |a#64#3#0| |a#64#4#0| |a#64#5#0| |a#64#6#0| |a#64#7#0|))) :qid |BetreeSpecidfy.272:5| :skolemid |3975| :no-pattern (type |a#64#0#0|) :no-pattern (type |a#64#1#0|) :no-pattern (type |a#64#2#0|) :no-pattern (type |a#64#3#0|) :no-pattern (type |a#64#4#0|) :no-pattern (type |a#64#5#0|) :no-pattern (type |a#64#6#0|) :no-pattern (type |a#64#7#0|) :no-pattern (U_2_int |a#64#0#0|) :no-pattern (U_2_bool |a#64#0#0|) :no-pattern (U_2_int |a#64#1#0|) :no-pattern (U_2_bool |a#64#1#0|) :no-pattern (U_2_int |a#64#2#0|) :no-pattern (U_2_bool |a#64#2#0|) :no-pattern (U_2_int |a#64#3#0|) :no-pattern (U_2_bool |a#64#3#0|) :no-pattern (U_2_int |a#64#4#0|) :no-pattern (U_2_bool |a#64#4#0|) :no-pattern (U_2_int |a#64#5#0|) :no-pattern (U_2_bool |a#64#5#0|) :no-pattern (U_2_int |a#64#6#0|) :no-pattern (U_2_bool |a#64#6#0|) :no-pattern (U_2_int |a#64#7#0|) :no-pattern (U_2_bool |a#64#7#0|) ))) :qid |unknown.0:0| :skolemid |3976| :pattern ( (BetreeSpec.Redirect.Redirect_q d@@223)) )))
(assert (forall ((|a#65#0#0| T@U) (|a#65#1#0| T@U) (|a#65#2#0| T@U) (|a#65#3#0| T@U) (|a#65#4#0| T@U) (|a#65#5#0| T@U) (|a#65#6#0| T@U) (|a#65#7#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |a#65#0#0|) BoxType) (= (type |a#65#1#0|) DatatypeTypeType)) (= (type |a#65#2#0|) (SeqType BoxType))) (= (type |a#65#3#0|) (IMapType BoxType BoxType))) (= (type |a#65#4#0|) DatatypeTypeType)) (= (type |a#65#5#0|) (SeqType BoxType))) (= (type |a#65#6#0|) (IMapType BoxType BoxType))) (= (type |a#65#7#0|) (MapType0Type BoxType boolType))) (= ($Is (|#BetreeSpec.Redirect.Redirect| |a#65#0#0| |a#65#1#0| |a#65#2#0| |a#65#3#0| |a#65#4#0| |a#65#5#0| |a#65#6#0| |a#65#7#0|) Tclass.BetreeSpec.Redirect)  (and (and (and (and (and (and (and ($IsBox |a#65#0#0| Tclass.ReferenceType.Reference) ($Is |a#65#1#0| Tclass.BetreeGraph.Node)) ($Is |a#65#2#0| (TSeq Tclass.ReferenceType.Reference))) ($Is |a#65#3#0| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($Is |a#65#4#0| Tclass.BetreeGraph.Node)) ($Is |a#65#5#0| (TSeq Tclass.ReferenceType.Reference))) ($Is |a#65#6#0| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($Is |a#65#7#0| (TISet Tclass.KeyType.Key))))) :qid |BetreeSpecidfy.272:5| :skolemid |3977| :pattern ( ($Is (|#BetreeSpec.Redirect.Redirect| |a#65#0#0| |a#65#1#0| |a#65#2#0| |a#65#3#0| |a#65#4#0| |a#65#5#0| |a#65#6#0| |a#65#7#0|) Tclass.BetreeSpec.Redirect)) )))
(assert (forall ((|a#66#0#0@@0| T@U) (|a#66#1#0| T@U) (|a#66#2#0| T@U) (|a#66#3#0| T@U) (|a#66#4#0| T@U) (|a#66#5#0| T@U) (|a#66#6#0| T@U) (|a#66#7#0| T@U) ($h@@205 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#66#0#0@@0|) BoxType) (= (type |a#66#1#0|) DatatypeTypeType)) (= (type |a#66#2#0|) (SeqType BoxType))) (= (type |a#66#3#0|) (IMapType BoxType BoxType))) (= (type |a#66#4#0|) DatatypeTypeType)) (= (type |a#66#5#0|) (SeqType BoxType))) (= (type |a#66#6#0|) (IMapType BoxType BoxType))) (= (type |a#66#7#0|) (MapType0Type BoxType boolType))) (= (type $h@@205) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@205)) (= ($IsAlloc (|#BetreeSpec.Redirect.Redirect| |a#66#0#0@@0| |a#66#1#0| |a#66#2#0| |a#66#3#0| |a#66#4#0| |a#66#5#0| |a#66#6#0| |a#66#7#0|) Tclass.BetreeSpec.Redirect $h@@205)  (and (and (and (and (and (and (and ($IsAllocBox |a#66#0#0@@0| Tclass.ReferenceType.Reference $h@@205) ($IsAlloc |a#66#1#0| Tclass.BetreeGraph.Node $h@@205)) ($IsAlloc |a#66#2#0| (TSeq Tclass.ReferenceType.Reference) $h@@205)) ($IsAlloc |a#66#3#0| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node) $h@@205)) ($IsAlloc |a#66#4#0| Tclass.BetreeGraph.Node $h@@205)) ($IsAlloc |a#66#5#0| (TSeq Tclass.ReferenceType.Reference) $h@@205)) ($IsAlloc |a#66#6#0| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node) $h@@205)) ($IsAlloc |a#66#7#0| (TISet Tclass.KeyType.Key) $h@@205)))) :qid |BetreeSpecidfy.272:5| :skolemid |3978| :pattern ( ($IsAlloc (|#BetreeSpec.Redirect.Redirect| |a#66#0#0@@0| |a#66#1#0| |a#66#2#0| |a#66#3#0| |a#66#4#0| |a#66#5#0| |a#66#6#0| |a#66#7#0|) Tclass.BetreeSpec.Redirect $h@@205)) )))
(assert (forall ((arg0@@670 T@U) ) (! (= (type (BetreeSpec.Redirect.parentref arg0@@670)) BoxType) :qid |funType:BetreeSpec.Redirect.parentref| :pattern ( (BetreeSpec.Redirect.parentref arg0@@670)) )))
(assert (forall ((d@@224 T@U) ($h@@206 T@U) ) (!  (=> (and (and (= (type d@@224) DatatypeTypeType) (= (type $h@@206) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@206) (and (BetreeSpec.Redirect.Redirect_q d@@224) ($IsAlloc d@@224 Tclass.BetreeSpec.Redirect $h@@206)))) ($IsAllocBox (BetreeSpec.Redirect.parentref d@@224) Tclass.ReferenceType.Reference $h@@206)) :qid |unknown.0:0| :skolemid |3979| :pattern ( ($IsAllocBox (BetreeSpec.Redirect.parentref d@@224) Tclass.ReferenceType.Reference $h@@206)) )))
(assert (forall ((arg0@@671 T@U) ) (! (= (type (BetreeSpec.Redirect.old__parent arg0@@671)) DatatypeTypeType) :qid |funType:BetreeSpec.Redirect.old__parent| :pattern ( (BetreeSpec.Redirect.old__parent arg0@@671)) )))
(assert (forall ((d@@225 T@U) ($h@@207 T@U) ) (!  (=> (and (and (= (type d@@225) DatatypeTypeType) (= (type $h@@207) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@207) (and (BetreeSpec.Redirect.Redirect_q d@@225) ($IsAlloc d@@225 Tclass.BetreeSpec.Redirect $h@@207)))) ($IsAlloc (BetreeSpec.Redirect.old__parent d@@225) Tclass.BetreeGraph.Node $h@@207)) :qid |unknown.0:0| :skolemid |3980| :pattern ( ($IsAlloc (BetreeSpec.Redirect.old__parent d@@225) Tclass.BetreeGraph.Node $h@@207)) )))
(assert (forall ((arg0@@672 T@U) ) (! (= (type (BetreeSpec.Redirect.old__childrefs arg0@@672)) (SeqType BoxType)) :qid |funType:BetreeSpec.Redirect.old__childrefs| :pattern ( (BetreeSpec.Redirect.old__childrefs arg0@@672)) )))
(assert (forall ((d@@226 T@U) ($h@@208 T@U) ) (!  (=> (and (and (= (type d@@226) DatatypeTypeType) (= (type $h@@208) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@208) (and (BetreeSpec.Redirect.Redirect_q d@@226) ($IsAlloc d@@226 Tclass.BetreeSpec.Redirect $h@@208)))) ($IsAlloc (BetreeSpec.Redirect.old__childrefs d@@226) (TSeq Tclass.ReferenceType.Reference) $h@@208)) :qid |unknown.0:0| :skolemid |3981| :pattern ( ($IsAlloc (BetreeSpec.Redirect.old__childrefs d@@226) (TSeq Tclass.ReferenceType.Reference) $h@@208)) )))
(assert (forall ((arg0@@673 T@U) ) (! (= (type (BetreeSpec.Redirect.old__children arg0@@673)) (IMapType BoxType BoxType)) :qid |funType:BetreeSpec.Redirect.old__children| :pattern ( (BetreeSpec.Redirect.old__children arg0@@673)) )))
(assert (forall ((d@@227 T@U) ($h@@209 T@U) ) (!  (=> (and (and (= (type d@@227) DatatypeTypeType) (= (type $h@@209) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@209) (and (BetreeSpec.Redirect.Redirect_q d@@227) ($IsAlloc d@@227 Tclass.BetreeSpec.Redirect $h@@209)))) ($IsAlloc (BetreeSpec.Redirect.old__children d@@227) (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node) $h@@209)) :qid |unknown.0:0| :skolemid |3982| :pattern ( ($IsAlloc (BetreeSpec.Redirect.old__children d@@227) (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node) $h@@209)) )))
(assert (forall ((arg0@@674 T@U) ) (! (= (type (BetreeSpec.Redirect.new__parent arg0@@674)) DatatypeTypeType) :qid |funType:BetreeSpec.Redirect.new__parent| :pattern ( (BetreeSpec.Redirect.new__parent arg0@@674)) )))
(assert (forall ((d@@228 T@U) ($h@@210 T@U) ) (!  (=> (and (and (= (type d@@228) DatatypeTypeType) (= (type $h@@210) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@210) (and (BetreeSpec.Redirect.Redirect_q d@@228) ($IsAlloc d@@228 Tclass.BetreeSpec.Redirect $h@@210)))) ($IsAlloc (BetreeSpec.Redirect.new__parent d@@228) Tclass.BetreeGraph.Node $h@@210)) :qid |unknown.0:0| :skolemid |3983| :pattern ( ($IsAlloc (BetreeSpec.Redirect.new__parent d@@228) Tclass.BetreeGraph.Node $h@@210)) )))
(assert (forall ((arg0@@675 T@U) ) (! (= (type (BetreeSpec.Redirect.new__childrefs arg0@@675)) (SeqType BoxType)) :qid |funType:BetreeSpec.Redirect.new__childrefs| :pattern ( (BetreeSpec.Redirect.new__childrefs arg0@@675)) )))
(assert (forall ((d@@229 T@U) ($h@@211 T@U) ) (!  (=> (and (and (= (type d@@229) DatatypeTypeType) (= (type $h@@211) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@211) (and (BetreeSpec.Redirect.Redirect_q d@@229) ($IsAlloc d@@229 Tclass.BetreeSpec.Redirect $h@@211)))) ($IsAlloc (BetreeSpec.Redirect.new__childrefs d@@229) (TSeq Tclass.ReferenceType.Reference) $h@@211)) :qid |unknown.0:0| :skolemid |3984| :pattern ( ($IsAlloc (BetreeSpec.Redirect.new__childrefs d@@229) (TSeq Tclass.ReferenceType.Reference) $h@@211)) )))
(assert (forall ((arg0@@676 T@U) ) (! (= (type (BetreeSpec.Redirect.new__children arg0@@676)) (IMapType BoxType BoxType)) :qid |funType:BetreeSpec.Redirect.new__children| :pattern ( (BetreeSpec.Redirect.new__children arg0@@676)) )))
(assert (forall ((d@@230 T@U) ($h@@212 T@U) ) (!  (=> (and (and (= (type d@@230) DatatypeTypeType) (= (type $h@@212) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@212) (and (BetreeSpec.Redirect.Redirect_q d@@230) ($IsAlloc d@@230 Tclass.BetreeSpec.Redirect $h@@212)))) ($IsAlloc (BetreeSpec.Redirect.new__children d@@230) (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node) $h@@212)) :qid |unknown.0:0| :skolemid |3985| :pattern ( ($IsAlloc (BetreeSpec.Redirect.new__children d@@230) (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node) $h@@212)) )))
(assert (forall ((arg0@@677 T@U) ) (! (= (type (BetreeSpec.Redirect.keys arg0@@677)) (MapType0Type BoxType boolType)) :qid |funType:BetreeSpec.Redirect.keys| :pattern ( (BetreeSpec.Redirect.keys arg0@@677)) )))
(assert (forall ((d@@231 T@U) ($h@@213 T@U) ) (!  (=> (and (and (= (type d@@231) DatatypeTypeType) (= (type $h@@213) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@213) (and (BetreeSpec.Redirect.Redirect_q d@@231) ($IsAlloc d@@231 Tclass.BetreeSpec.Redirect $h@@213)))) ($IsAlloc (BetreeSpec.Redirect.keys d@@231) (TISet Tclass.KeyType.Key) $h@@213)) :qid |unknown.0:0| :skolemid |3986| :pattern ( ($IsAlloc (BetreeSpec.Redirect.keys d@@231) (TISet Tclass.KeyType.Key) $h@@213)) )))
(assert (forall ((|a#67#0#0@@0| T@U) (|a#67#1#0| T@U) (|a#67#2#0| T@U) (|a#67#3#0| T@U) (|a#67#4#0| T@U) (|a#67#5#0| T@U) (|a#67#6#0| T@U) (|a#67#7#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |a#67#0#0@@0|) BoxType) (= (type |a#67#1#0|) DatatypeTypeType)) (= (type |a#67#2#0|) (SeqType BoxType))) (= (type |a#67#3#0|) (IMapType BoxType BoxType))) (= (type |a#67#4#0|) DatatypeTypeType)) (= (type |a#67#5#0|) (SeqType BoxType))) (= (type |a#67#6#0|) (IMapType BoxType BoxType))) (= (type |a#67#7#0|) (MapType0Type BoxType boolType))) (= (|#BetreeSpec.Redirect.Redirect| (Lit |a#67#0#0@@0|) (Lit |a#67#1#0|) (Lit |a#67#2#0|) (Lit |a#67#3#0|) (Lit |a#67#4#0|) (Lit |a#67#5#0|) (Lit |a#67#6#0|) (Lit |a#67#7#0|)) (Lit (|#BetreeSpec.Redirect.Redirect| |a#67#0#0@@0| |a#67#1#0| |a#67#2#0| |a#67#3#0| |a#67#4#0| |a#67#5#0| |a#67#6#0| |a#67#7#0|)))) :qid |BetreeSpecidfy.272:5| :skolemid |3987| :pattern ( (|#BetreeSpec.Redirect.Redirect| (Lit |a#67#0#0@@0|) (Lit |a#67#1#0|) (Lit |a#67#2#0|) (Lit |a#67#3#0|) (Lit |a#67#4#0|) (Lit |a#67#5#0|) (Lit |a#67#6#0|) (Lit |a#67#7#0|))) )))
(assert (forall ((|a#68#0#0@@0| T@U) (|a#68#1#0| T@U) (|a#68#2#0| T@U) (|a#68#3#0| T@U) (|a#68#4#0| T@U) (|a#68#5#0| T@U) (|a#68#6#0| T@U) (|a#68#7#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |a#68#0#0@@0|) BoxType) (= (type |a#68#1#0|) DatatypeTypeType)) (= (type |a#68#2#0|) (SeqType BoxType))) (= (type |a#68#3#0|) (IMapType BoxType BoxType))) (= (type |a#68#4#0|) DatatypeTypeType)) (= (type |a#68#5#0|) (SeqType BoxType))) (= (type |a#68#6#0|) (IMapType BoxType BoxType))) (= (type |a#68#7#0|) (MapType0Type BoxType boolType))) (= (BetreeSpec.Redirect.parentref (|#BetreeSpec.Redirect.Redirect| |a#68#0#0@@0| |a#68#1#0| |a#68#2#0| |a#68#3#0| |a#68#4#0| |a#68#5#0| |a#68#6#0| |a#68#7#0|)) |a#68#0#0@@0|)) :qid |BetreeSpecidfy.272:5| :skolemid |3988| :pattern ( (|#BetreeSpec.Redirect.Redirect| |a#68#0#0@@0| |a#68#1#0| |a#68#2#0| |a#68#3#0| |a#68#4#0| |a#68#5#0| |a#68#6#0| |a#68#7#0|)) )))
(assert (forall ((|a#69#0#0@@0| T@U) (|a#69#1#0| T@U) (|a#69#2#0| T@U) (|a#69#3#0| T@U) (|a#69#4#0| T@U) (|a#69#5#0| T@U) (|a#69#6#0| T@U) (|a#69#7#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |a#69#0#0@@0|) BoxType) (= (type |a#69#1#0|) DatatypeTypeType)) (= (type |a#69#2#0|) (SeqType BoxType))) (= (type |a#69#3#0|) (IMapType BoxType BoxType))) (= (type |a#69#4#0|) DatatypeTypeType)) (= (type |a#69#5#0|) (SeqType BoxType))) (= (type |a#69#6#0|) (IMapType BoxType BoxType))) (= (type |a#69#7#0|) (MapType0Type BoxType boolType))) (= (BetreeSpec.Redirect.old__parent (|#BetreeSpec.Redirect.Redirect| |a#69#0#0@@0| |a#69#1#0| |a#69#2#0| |a#69#3#0| |a#69#4#0| |a#69#5#0| |a#69#6#0| |a#69#7#0|)) |a#69#1#0|)) :qid |BetreeSpecidfy.272:5| :skolemid |3989| :pattern ( (|#BetreeSpec.Redirect.Redirect| |a#69#0#0@@0| |a#69#1#0| |a#69#2#0| |a#69#3#0| |a#69#4#0| |a#69#5#0| |a#69#6#0| |a#69#7#0|)) )))
(assert (forall ((|a#70#0#0@@0| T@U) (|a#70#1#0| T@U) (|a#70#2#0| T@U) (|a#70#3#0| T@U) (|a#70#4#0| T@U) (|a#70#5#0| T@U) (|a#70#6#0| T@U) (|a#70#7#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |a#70#0#0@@0|) BoxType) (= (type |a#70#1#0|) DatatypeTypeType)) (= (type |a#70#2#0|) (SeqType BoxType))) (= (type |a#70#3#0|) (IMapType BoxType BoxType))) (= (type |a#70#4#0|) DatatypeTypeType)) (= (type |a#70#5#0|) (SeqType BoxType))) (= (type |a#70#6#0|) (IMapType BoxType BoxType))) (= (type |a#70#7#0|) (MapType0Type BoxType boolType))) (< (DtRank |a#70#1#0|) (DtRank (|#BetreeSpec.Redirect.Redirect| |a#70#0#0@@0| |a#70#1#0| |a#70#2#0| |a#70#3#0| |a#70#4#0| |a#70#5#0| |a#70#6#0| |a#70#7#0|)))) :qid |BetreeSpecidfy.272:5| :skolemid |3990| :pattern ( (|#BetreeSpec.Redirect.Redirect| |a#70#0#0@@0| |a#70#1#0| |a#70#2#0| |a#70#3#0| |a#70#4#0| |a#70#5#0| |a#70#6#0| |a#70#7#0|)) )))
(assert (forall ((|a#71#0#0@@0| T@U) (|a#71#1#0| T@U) (|a#71#2#0| T@U) (|a#71#3#0| T@U) (|a#71#4#0| T@U) (|a#71#5#0| T@U) (|a#71#6#0| T@U) (|a#71#7#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |a#71#0#0@@0|) BoxType) (= (type |a#71#1#0|) DatatypeTypeType)) (= (type |a#71#2#0|) (SeqType BoxType))) (= (type |a#71#3#0|) (IMapType BoxType BoxType))) (= (type |a#71#4#0|) DatatypeTypeType)) (= (type |a#71#5#0|) (SeqType BoxType))) (= (type |a#71#6#0|) (IMapType BoxType BoxType))) (= (type |a#71#7#0|) (MapType0Type BoxType boolType))) (= (BetreeSpec.Redirect.old__childrefs (|#BetreeSpec.Redirect.Redirect| |a#71#0#0@@0| |a#71#1#0| |a#71#2#0| |a#71#3#0| |a#71#4#0| |a#71#5#0| |a#71#6#0| |a#71#7#0|)) |a#71#2#0|)) :qid |BetreeSpecidfy.272:5| :skolemid |3991| :pattern ( (|#BetreeSpec.Redirect.Redirect| |a#71#0#0@@0| |a#71#1#0| |a#71#2#0| |a#71#3#0| |a#71#4#0| |a#71#5#0| |a#71#6#0| |a#71#7#0|)) )))
(assert (forall ((|a#72#0#0@@0| T@U) (|a#72#1#0| T@U) (|a#72#2#0| T@U) (|a#72#3#0| T@U) (|a#72#4#0| T@U) (|a#72#5#0| T@U) (|a#72#6#0| T@U) (|a#72#7#0| T@U) (i@@32 Int) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#72#0#0@@0|) BoxType) (= (type |a#72#1#0|) DatatypeTypeType)) (= (type |a#72#2#0|) (SeqType BoxType))) (= (type |a#72#3#0|) (IMapType BoxType BoxType))) (= (type |a#72#4#0|) DatatypeTypeType)) (= (type |a#72#5#0|) (SeqType BoxType))) (= (type |a#72#6#0|) (IMapType BoxType BoxType))) (= (type |a#72#7#0|) (MapType0Type BoxType boolType))) (and (<= 0 i@@32) (< i@@32 (|Seq#Length| |a#72#2#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#72#2#0| i@@32))) (DtRank (|#BetreeSpec.Redirect.Redirect| |a#72#0#0@@0| |a#72#1#0| |a#72#2#0| |a#72#3#0| |a#72#4#0| |a#72#5#0| |a#72#6#0| |a#72#7#0|)))) :qid |BetreeSpecidfy.272:5| :skolemid |3992| :pattern ( (|Seq#Index| |a#72#2#0| i@@32) (|#BetreeSpec.Redirect.Redirect| |a#72#0#0@@0| |a#72#1#0| |a#72#2#0| |a#72#3#0| |a#72#4#0| |a#72#5#0| |a#72#6#0| |a#72#7#0|)) )))
(assert (forall ((|a#73#0#0@@0| T@U) (|a#73#1#0| T@U) (|a#73#2#0| T@U) (|a#73#3#0| T@U) (|a#73#4#0| T@U) (|a#73#5#0| T@U) (|a#73#6#0| T@U) (|a#73#7#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |a#73#0#0@@0|) BoxType) (= (type |a#73#1#0|) DatatypeTypeType)) (= (type |a#73#2#0|) (SeqType BoxType))) (= (type |a#73#3#0|) (IMapType BoxType BoxType))) (= (type |a#73#4#0|) DatatypeTypeType)) (= (type |a#73#5#0|) (SeqType BoxType))) (= (type |a#73#6#0|) (IMapType BoxType BoxType))) (= (type |a#73#7#0|) (MapType0Type BoxType boolType))) (< (|Seq#Rank| |a#73#2#0|) (DtRank (|#BetreeSpec.Redirect.Redirect| |a#73#0#0@@0| |a#73#1#0| |a#73#2#0| |a#73#3#0| |a#73#4#0| |a#73#5#0| |a#73#6#0| |a#73#7#0|)))) :qid |BetreeSpecidfy.272:5| :skolemid |3993| :pattern ( (|#BetreeSpec.Redirect.Redirect| |a#73#0#0@@0| |a#73#1#0| |a#73#2#0| |a#73#3#0| |a#73#4#0| |a#73#5#0| |a#73#6#0| |a#73#7#0|)) )))
(assert (forall ((|a#74#0#0@@0| T@U) (|a#74#1#0| T@U) (|a#74#2#0| T@U) (|a#74#3#0| T@U) (|a#74#4#0| T@U) (|a#74#5#0| T@U) (|a#74#6#0| T@U) (|a#74#7#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |a#74#0#0@@0|) BoxType) (= (type |a#74#1#0|) DatatypeTypeType)) (= (type |a#74#2#0|) (SeqType BoxType))) (= (type |a#74#3#0|) (IMapType BoxType BoxType))) (= (type |a#74#4#0|) DatatypeTypeType)) (= (type |a#74#5#0|) (SeqType BoxType))) (= (type |a#74#6#0|) (IMapType BoxType BoxType))) (= (type |a#74#7#0|) (MapType0Type BoxType boolType))) (= (BetreeSpec.Redirect.old__children (|#BetreeSpec.Redirect.Redirect| |a#74#0#0@@0| |a#74#1#0| |a#74#2#0| |a#74#3#0| |a#74#4#0| |a#74#5#0| |a#74#6#0| |a#74#7#0|)) |a#74#3#0|)) :qid |BetreeSpecidfy.272:5| :skolemid |3994| :pattern ( (|#BetreeSpec.Redirect.Redirect| |a#74#0#0@@0| |a#74#1#0| |a#74#2#0| |a#74#3#0| |a#74#4#0| |a#74#5#0| |a#74#6#0| |a#74#7#0|)) )))
(assert (forall ((|a#75#0#0@@0| T@U) (|a#75#1#0| T@U) (|a#75#2#0| T@U) (|a#75#3#0| T@U) (|a#75#4#0| T@U) (|a#75#5#0| T@U) (|a#75#6#0| T@U) (|a#75#7#0| T@U) (d@@232 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#75#0#0@@0|) BoxType) (= (type |a#75#1#0|) DatatypeTypeType)) (= (type |a#75#2#0|) (SeqType BoxType))) (= (type |a#75#3#0|) (IMapType BoxType BoxType))) (= (type |a#75#4#0|) DatatypeTypeType)) (= (type |a#75#5#0|) (SeqType BoxType))) (= (type |a#75#6#0|) (IMapType BoxType BoxType))) (= (type |a#75#7#0|) (MapType0Type BoxType boolType))) (= (type d@@232) DatatypeTypeType)) (U_2_bool (MapType0Select (|IMap#Domain| |a#75#3#0|) ($Box d@@232)))) (< (DtRank d@@232) (DtRank (|#BetreeSpec.Redirect.Redirect| |a#75#0#0@@0| |a#75#1#0| |a#75#2#0| |a#75#3#0| |a#75#4#0| |a#75#5#0| |a#75#6#0| |a#75#7#0|)))) :qid |BetreeSpecidfy.272:5| :skolemid |3995| :pattern ( (MapType0Select (|IMap#Domain| |a#75#3#0|) ($Box d@@232)) (|#BetreeSpec.Redirect.Redirect| |a#75#0#0@@0| |a#75#1#0| |a#75#2#0| |a#75#3#0| |a#75#4#0| |a#75#5#0| |a#75#6#0| |a#75#7#0|)) )))
(assert (forall ((|a#76#0#0@@0| T@U) (|a#76#1#0| T@U) (|a#76#2#0| T@U) (|a#76#3#0| T@U) (|a#76#4#0| T@U) (|a#76#5#0| T@U) (|a#76#6#0| T@U) (|a#76#7#0| T@U) (bx@@192 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#76#0#0@@0|) BoxType) (= (type |a#76#1#0|) DatatypeTypeType)) (= (type |a#76#2#0|) (SeqType BoxType))) (= (type |a#76#3#0|) (IMapType BoxType BoxType))) (= (type |a#76#4#0|) DatatypeTypeType)) (= (type |a#76#5#0|) (SeqType BoxType))) (= (type |a#76#6#0|) (IMapType BoxType BoxType))) (= (type |a#76#7#0|) (MapType0Type BoxType boolType))) (= (type bx@@192) BoxType)) (U_2_bool (MapType0Select (|IMap#Domain| |a#76#3#0|) bx@@192))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |a#76#3#0|) bx@@192))) (DtRank (|#BetreeSpec.Redirect.Redirect| |a#76#0#0@@0| |a#76#1#0| |a#76#2#0| |a#76#3#0| |a#76#4#0| |a#76#5#0| |a#76#6#0| |a#76#7#0|)))) :qid |BetreeSpecidfy.272:5| :skolemid |3996| :pattern ( (MapType0Select (|IMap#Domain| |a#76#3#0|) bx@@192) (|#BetreeSpec.Redirect.Redirect| |a#76#0#0@@0| |a#76#1#0| |a#76#2#0| |a#76#3#0| |a#76#4#0| |a#76#5#0| |a#76#6#0| |a#76#7#0|)) )))
(assert (forall ((|a#77#0#0@@0| T@U) (|a#77#1#0| T@U) (|a#77#2#0| T@U) (|a#77#3#0| T@U) (|a#77#4#0| T@U) (|a#77#5#0| T@U) (|a#77#6#0| T@U) (|a#77#7#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |a#77#0#0@@0|) BoxType) (= (type |a#77#1#0|) DatatypeTypeType)) (= (type |a#77#2#0|) (SeqType BoxType))) (= (type |a#77#3#0|) (IMapType BoxType BoxType))) (= (type |a#77#4#0|) DatatypeTypeType)) (= (type |a#77#5#0|) (SeqType BoxType))) (= (type |a#77#6#0|) (IMapType BoxType BoxType))) (= (type |a#77#7#0|) (MapType0Type BoxType boolType))) (= (BetreeSpec.Redirect.new__parent (|#BetreeSpec.Redirect.Redirect| |a#77#0#0@@0| |a#77#1#0| |a#77#2#0| |a#77#3#0| |a#77#4#0| |a#77#5#0| |a#77#6#0| |a#77#7#0|)) |a#77#4#0|)) :qid |BetreeSpecidfy.272:5| :skolemid |3997| :pattern ( (|#BetreeSpec.Redirect.Redirect| |a#77#0#0@@0| |a#77#1#0| |a#77#2#0| |a#77#3#0| |a#77#4#0| |a#77#5#0| |a#77#6#0| |a#77#7#0|)) )))
(assert (forall ((|a#78#0#0@@0| T@U) (|a#78#1#0@@0| T@U) (|a#78#2#0| T@U) (|a#78#3#0| T@U) (|a#78#4#0| T@U) (|a#78#5#0| T@U) (|a#78#6#0| T@U) (|a#78#7#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |a#78#0#0@@0|) BoxType) (= (type |a#78#1#0@@0|) DatatypeTypeType)) (= (type |a#78#2#0|) (SeqType BoxType))) (= (type |a#78#3#0|) (IMapType BoxType BoxType))) (= (type |a#78#4#0|) DatatypeTypeType)) (= (type |a#78#5#0|) (SeqType BoxType))) (= (type |a#78#6#0|) (IMapType BoxType BoxType))) (= (type |a#78#7#0|) (MapType0Type BoxType boolType))) (< (DtRank |a#78#4#0|) (DtRank (|#BetreeSpec.Redirect.Redirect| |a#78#0#0@@0| |a#78#1#0@@0| |a#78#2#0| |a#78#3#0| |a#78#4#0| |a#78#5#0| |a#78#6#0| |a#78#7#0|)))) :qid |BetreeSpecidfy.272:5| :skolemid |3998| :pattern ( (|#BetreeSpec.Redirect.Redirect| |a#78#0#0@@0| |a#78#1#0@@0| |a#78#2#0| |a#78#3#0| |a#78#4#0| |a#78#5#0| |a#78#6#0| |a#78#7#0|)) )))
(assert (forall ((|a#79#0#0@@0| T@U) (|a#79#1#0@@0| T@U) (|a#79#2#0| T@U) (|a#79#3#0| T@U) (|a#79#4#0| T@U) (|a#79#5#0| T@U) (|a#79#6#0| T@U) (|a#79#7#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |a#79#0#0@@0|) BoxType) (= (type |a#79#1#0@@0|) DatatypeTypeType)) (= (type |a#79#2#0|) (SeqType BoxType))) (= (type |a#79#3#0|) (IMapType BoxType BoxType))) (= (type |a#79#4#0|) DatatypeTypeType)) (= (type |a#79#5#0|) (SeqType BoxType))) (= (type |a#79#6#0|) (IMapType BoxType BoxType))) (= (type |a#79#7#0|) (MapType0Type BoxType boolType))) (= (BetreeSpec.Redirect.new__childrefs (|#BetreeSpec.Redirect.Redirect| |a#79#0#0@@0| |a#79#1#0@@0| |a#79#2#0| |a#79#3#0| |a#79#4#0| |a#79#5#0| |a#79#6#0| |a#79#7#0|)) |a#79#5#0|)) :qid |BetreeSpecidfy.272:5| :skolemid |3999| :pattern ( (|#BetreeSpec.Redirect.Redirect| |a#79#0#0@@0| |a#79#1#0@@0| |a#79#2#0| |a#79#3#0| |a#79#4#0| |a#79#5#0| |a#79#6#0| |a#79#7#0|)) )))
(assert (forall ((|a#80#0#0@@0| T@U) (|a#80#1#0@@0| T@U) (|a#80#2#0| T@U) (|a#80#3#0| T@U) (|a#80#4#0| T@U) (|a#80#5#0| T@U) (|a#80#6#0| T@U) (|a#80#7#0| T@U) (i@@33 Int) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#80#0#0@@0|) BoxType) (= (type |a#80#1#0@@0|) DatatypeTypeType)) (= (type |a#80#2#0|) (SeqType BoxType))) (= (type |a#80#3#0|) (IMapType BoxType BoxType))) (= (type |a#80#4#0|) DatatypeTypeType)) (= (type |a#80#5#0|) (SeqType BoxType))) (= (type |a#80#6#0|) (IMapType BoxType BoxType))) (= (type |a#80#7#0|) (MapType0Type BoxType boolType))) (and (<= 0 i@@33) (< i@@33 (|Seq#Length| |a#80#5#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#80#5#0| i@@33))) (DtRank (|#BetreeSpec.Redirect.Redirect| |a#80#0#0@@0| |a#80#1#0@@0| |a#80#2#0| |a#80#3#0| |a#80#4#0| |a#80#5#0| |a#80#6#0| |a#80#7#0|)))) :qid |BetreeSpecidfy.272:5| :skolemid |4000| :pattern ( (|Seq#Index| |a#80#5#0| i@@33) (|#BetreeSpec.Redirect.Redirect| |a#80#0#0@@0| |a#80#1#0@@0| |a#80#2#0| |a#80#3#0| |a#80#4#0| |a#80#5#0| |a#80#6#0| |a#80#7#0|)) )))
(assert (forall ((|a#81#0#0@@0| T@U) (|a#81#1#0@@0| T@U) (|a#81#2#0| T@U) (|a#81#3#0| T@U) (|a#81#4#0| T@U) (|a#81#5#0| T@U) (|a#81#6#0| T@U) (|a#81#7#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |a#81#0#0@@0|) BoxType) (= (type |a#81#1#0@@0|) DatatypeTypeType)) (= (type |a#81#2#0|) (SeqType BoxType))) (= (type |a#81#3#0|) (IMapType BoxType BoxType))) (= (type |a#81#4#0|) DatatypeTypeType)) (= (type |a#81#5#0|) (SeqType BoxType))) (= (type |a#81#6#0|) (IMapType BoxType BoxType))) (= (type |a#81#7#0|) (MapType0Type BoxType boolType))) (< (|Seq#Rank| |a#81#5#0|) (DtRank (|#BetreeSpec.Redirect.Redirect| |a#81#0#0@@0| |a#81#1#0@@0| |a#81#2#0| |a#81#3#0| |a#81#4#0| |a#81#5#0| |a#81#6#0| |a#81#7#0|)))) :qid |BetreeSpecidfy.272:5| :skolemid |4001| :pattern ( (|#BetreeSpec.Redirect.Redirect| |a#81#0#0@@0| |a#81#1#0@@0| |a#81#2#0| |a#81#3#0| |a#81#4#0| |a#81#5#0| |a#81#6#0| |a#81#7#0|)) )))
(assert (forall ((|a#82#0#0@@0| T@U) (|a#82#1#0@@0| T@U) (|a#82#2#0| T@U) (|a#82#3#0| T@U) (|a#82#4#0| T@U) (|a#82#5#0| T@U) (|a#82#6#0| T@U) (|a#82#7#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |a#82#0#0@@0|) BoxType) (= (type |a#82#1#0@@0|) DatatypeTypeType)) (= (type |a#82#2#0|) (SeqType BoxType))) (= (type |a#82#3#0|) (IMapType BoxType BoxType))) (= (type |a#82#4#0|) DatatypeTypeType)) (= (type |a#82#5#0|) (SeqType BoxType))) (= (type |a#82#6#0|) (IMapType BoxType BoxType))) (= (type |a#82#7#0|) (MapType0Type BoxType boolType))) (= (BetreeSpec.Redirect.new__children (|#BetreeSpec.Redirect.Redirect| |a#82#0#0@@0| |a#82#1#0@@0| |a#82#2#0| |a#82#3#0| |a#82#4#0| |a#82#5#0| |a#82#6#0| |a#82#7#0|)) |a#82#6#0|)) :qid |BetreeSpecidfy.272:5| :skolemid |4002| :pattern ( (|#BetreeSpec.Redirect.Redirect| |a#82#0#0@@0| |a#82#1#0@@0| |a#82#2#0| |a#82#3#0| |a#82#4#0| |a#82#5#0| |a#82#6#0| |a#82#7#0|)) )))
(assert (forall ((|a#83#0#0@@0| T@U) (|a#83#1#0@@0| T@U) (|a#83#2#0| T@U) (|a#83#3#0| T@U) (|a#83#4#0| T@U) (|a#83#5#0| T@U) (|a#83#6#0| T@U) (|a#83#7#0| T@U) (d@@233 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#83#0#0@@0|) BoxType) (= (type |a#83#1#0@@0|) DatatypeTypeType)) (= (type |a#83#2#0|) (SeqType BoxType))) (= (type |a#83#3#0|) (IMapType BoxType BoxType))) (= (type |a#83#4#0|) DatatypeTypeType)) (= (type |a#83#5#0|) (SeqType BoxType))) (= (type |a#83#6#0|) (IMapType BoxType BoxType))) (= (type |a#83#7#0|) (MapType0Type BoxType boolType))) (= (type d@@233) DatatypeTypeType)) (U_2_bool (MapType0Select (|IMap#Domain| |a#83#6#0|) ($Box d@@233)))) (< (DtRank d@@233) (DtRank (|#BetreeSpec.Redirect.Redirect| |a#83#0#0@@0| |a#83#1#0@@0| |a#83#2#0| |a#83#3#0| |a#83#4#0| |a#83#5#0| |a#83#6#0| |a#83#7#0|)))) :qid |BetreeSpecidfy.272:5| :skolemid |4003| :pattern ( (MapType0Select (|IMap#Domain| |a#83#6#0|) ($Box d@@233)) (|#BetreeSpec.Redirect.Redirect| |a#83#0#0@@0| |a#83#1#0@@0| |a#83#2#0| |a#83#3#0| |a#83#4#0| |a#83#5#0| |a#83#6#0| |a#83#7#0|)) )))
(assert (forall ((|a#84#0#0@@0| T@U) (|a#84#1#0@@0| T@U) (|a#84#2#0| T@U) (|a#84#3#0| T@U) (|a#84#4#0| T@U) (|a#84#5#0| T@U) (|a#84#6#0| T@U) (|a#84#7#0| T@U) (bx@@193 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#84#0#0@@0|) BoxType) (= (type |a#84#1#0@@0|) DatatypeTypeType)) (= (type |a#84#2#0|) (SeqType BoxType))) (= (type |a#84#3#0|) (IMapType BoxType BoxType))) (= (type |a#84#4#0|) DatatypeTypeType)) (= (type |a#84#5#0|) (SeqType BoxType))) (= (type |a#84#6#0|) (IMapType BoxType BoxType))) (= (type |a#84#7#0|) (MapType0Type BoxType boolType))) (= (type bx@@193) BoxType)) (U_2_bool (MapType0Select (|IMap#Domain| |a#84#6#0|) bx@@193))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |a#84#6#0|) bx@@193))) (DtRank (|#BetreeSpec.Redirect.Redirect| |a#84#0#0@@0| |a#84#1#0@@0| |a#84#2#0| |a#84#3#0| |a#84#4#0| |a#84#5#0| |a#84#6#0| |a#84#7#0|)))) :qid |BetreeSpecidfy.272:5| :skolemid |4004| :pattern ( (MapType0Select (|IMap#Domain| |a#84#6#0|) bx@@193) (|#BetreeSpec.Redirect.Redirect| |a#84#0#0@@0| |a#84#1#0@@0| |a#84#2#0| |a#84#3#0| |a#84#4#0| |a#84#5#0| |a#84#6#0| |a#84#7#0|)) )))
(assert (forall ((|a#85#0#0@@0| T@U) (|a#85#1#0@@0| T@U) (|a#85#2#0| T@U) (|a#85#3#0| T@U) (|a#85#4#0| T@U) (|a#85#5#0| T@U) (|a#85#6#0| T@U) (|a#85#7#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |a#85#0#0@@0|) BoxType) (= (type |a#85#1#0@@0|) DatatypeTypeType)) (= (type |a#85#2#0|) (SeqType BoxType))) (= (type |a#85#3#0|) (IMapType BoxType BoxType))) (= (type |a#85#4#0|) DatatypeTypeType)) (= (type |a#85#5#0|) (SeqType BoxType))) (= (type |a#85#6#0|) (IMapType BoxType BoxType))) (= (type |a#85#7#0|) (MapType0Type BoxType boolType))) (= (BetreeSpec.Redirect.keys (|#BetreeSpec.Redirect.Redirect| |a#85#0#0@@0| |a#85#1#0@@0| |a#85#2#0| |a#85#3#0| |a#85#4#0| |a#85#5#0| |a#85#6#0| |a#85#7#0|)) |a#85#7#0|)) :qid |BetreeSpecidfy.272:5| :skolemid |4005| :pattern ( (|#BetreeSpec.Redirect.Redirect| |a#85#0#0@@0| |a#85#1#0@@0| |a#85#2#0| |a#85#3#0| |a#85#4#0| |a#85#5#0| |a#85#6#0| |a#85#7#0|)) )))
(assert (forall ((|a#86#0#0@@0| T@U) (|a#86#1#0@@0| T@U) (|a#86#2#0| T@U) (|a#86#3#0| T@U) (|a#86#4#0| T@U) (|a#86#5#0| T@U) (|a#86#6#0| T@U) (|a#86#7#0| T@U) (d@@234 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#86#0#0@@0|) BoxType) (= (type |a#86#1#0@@0|) DatatypeTypeType)) (= (type |a#86#2#0|) (SeqType BoxType))) (= (type |a#86#3#0|) (IMapType BoxType BoxType))) (= (type |a#86#4#0|) DatatypeTypeType)) (= (type |a#86#5#0|) (SeqType BoxType))) (= (type |a#86#6#0|) (IMapType BoxType BoxType))) (= (type |a#86#7#0|) (MapType0Type BoxType boolType))) (= (type d@@234) DatatypeTypeType)) (U_2_bool (MapType0Select |a#86#7#0| ($Box d@@234)))) (< (DtRank d@@234) (DtRank (|#BetreeSpec.Redirect.Redirect| |a#86#0#0@@0| |a#86#1#0@@0| |a#86#2#0| |a#86#3#0| |a#86#4#0| |a#86#5#0| |a#86#6#0| |a#86#7#0|)))) :qid |BetreeSpecidfy.272:5| :skolemid |4006| :pattern ( (MapType0Select |a#86#7#0| ($Box d@@234)) (|#BetreeSpec.Redirect.Redirect| |a#86#0#0@@0| |a#86#1#0@@0| |a#86#2#0| |a#86#3#0| |a#86#4#0| |a#86#5#0| |a#86#6#0| |a#86#7#0|)) )))
(assert (forall ((d@@235 T@U) ) (!  (=> (and (= (type d@@235) DatatypeTypeType) (|$IsA#BetreeSpec.Redirect| d@@235)) (BetreeSpec.Redirect.Redirect_q d@@235)) :qid |unknown.0:0| :skolemid |4007| :pattern ( (|$IsA#BetreeSpec.Redirect| d@@235)) )))
(assert (forall ((d@@236 T@U) ) (!  (=> (and (= (type d@@236) DatatypeTypeType) ($Is d@@236 Tclass.BetreeSpec.Redirect)) (BetreeSpec.Redirect.Redirect_q d@@236)) :qid |unknown.0:0| :skolemid |4008| :pattern ( (BetreeSpec.Redirect.Redirect_q d@@236) ($Is d@@236 Tclass.BetreeSpec.Redirect)) )))
(assert (forall ((a@@194 T@U) (b@@131 T@U) ) (!  (=> (and (and (= (type a@@194) DatatypeTypeType) (= (type b@@131) DatatypeTypeType)) true) (= (|BetreeSpec.Redirect#Equal| a@@194 b@@131)  (and (and (and (and (and (and (and (= (BetreeSpec.Redirect.parentref a@@194) (BetreeSpec.Redirect.parentref b@@131)) (|BetreeGraph.Node#Equal| (BetreeSpec.Redirect.old__parent a@@194) (BetreeSpec.Redirect.old__parent b@@131))) (|Seq#Equal| (BetreeSpec.Redirect.old__childrefs a@@194) (BetreeSpec.Redirect.old__childrefs b@@131))) (|IMap#Equal| (BetreeSpec.Redirect.old__children a@@194) (BetreeSpec.Redirect.old__children b@@131))) (|BetreeGraph.Node#Equal| (BetreeSpec.Redirect.new__parent a@@194) (BetreeSpec.Redirect.new__parent b@@131))) (|Seq#Equal| (BetreeSpec.Redirect.new__childrefs a@@194) (BetreeSpec.Redirect.new__childrefs b@@131))) (|IMap#Equal| (BetreeSpec.Redirect.new__children a@@194) (BetreeSpec.Redirect.new__children b@@131))) (|ISet#Equal| (BetreeSpec.Redirect.keys a@@194) (BetreeSpec.Redirect.keys b@@131))))) :qid |unknown.0:0| :skolemid |4009| :pattern ( (|BetreeSpec.Redirect#Equal| a@@194 b@@131)) )))
(assert (forall ((a@@195 T@U) (b@@132 T@U) ) (!  (=> (and (= (type a@@195) DatatypeTypeType) (= (type b@@132) DatatypeTypeType)) (= (|BetreeSpec.Redirect#Equal| a@@195 b@@132) (= a@@195 b@@132))) :qid |unknown.0:0| :skolemid |4010| :pattern ( (|BetreeSpec.Redirect#Equal| a@@195 b@@132)) )))
(assert (forall ((arg0@@678 T@U) ) (! (= (type (|#BetreeSpec.BetreeStep.BetreeQuery| arg0@@678)) DatatypeTypeType) :qid |funType:#BetreeSpec.BetreeStep.BetreeQuery| :pattern ( (|#BetreeSpec.BetreeStep.BetreeQuery| arg0@@678)) )))
(assert (forall ((|a#87#0#0@@0| T@U) ) (!  (=> (= (type |a#87#0#0@@0|) DatatypeTypeType) (= (DatatypeCtorId (|#BetreeSpec.BetreeStep.BetreeQuery| |a#87#0#0@@0|)) |##BetreeSpec.BetreeStep.BetreeQuery|)) :qid |BetreeSpecidfy.390:19| :skolemid |4011| :pattern ( (|#BetreeSpec.BetreeStep.BetreeQuery| |a#87#0#0@@0|)) )))
(assert (forall ((d@@237 T@U) ) (!  (=> (= (type d@@237) DatatypeTypeType) (= (BetreeSpec.BetreeStep.BetreeQuery_q d@@237) (= (DatatypeCtorId d@@237) |##BetreeSpec.BetreeStep.BetreeQuery|))) :qid |unknown.0:0| :skolemid |4012| :pattern ( (BetreeSpec.BetreeStep.BetreeQuery_q d@@237)) )))
(assert (forall ((d@@238 T@U) ) (!  (=> (and (= (type d@@238) DatatypeTypeType) (BetreeSpec.BetreeStep.BetreeQuery_q d@@238)) (exists ((|a#88#0#0@@0| T@U) ) (!  (and (= (type |a#88#0#0@@0|) DatatypeTypeType) (= d@@238 (|#BetreeSpec.BetreeStep.BetreeQuery| |a#88#0#0@@0|))) :qid |BetreeSpecidfy.390:19| :skolemid |4013| :no-pattern (type |a#88#0#0@@0|) :no-pattern (U_2_int |a#88#0#0@@0|) :no-pattern (U_2_bool |a#88#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |4014| :pattern ( (BetreeSpec.BetreeStep.BetreeQuery_q d@@238)) )))
(assert (forall ((|a#89#0#0@@0| T@U) ) (!  (=> (= (type |a#89#0#0@@0|) DatatypeTypeType) (= ($Is (|#BetreeSpec.BetreeStep.BetreeQuery| |a#89#0#0@@0|) Tclass.BetreeSpec.BetreeStep) ($Is |a#89#0#0@@0| Tclass.BetreeSpec.LookupQuery))) :qid |BetreeSpecidfy.390:19| :skolemid |4015| :pattern ( ($Is (|#BetreeSpec.BetreeStep.BetreeQuery| |a#89#0#0@@0|) Tclass.BetreeSpec.BetreeStep)) )))
(assert (forall ((|a#90#0#0@@0| T@U) ($h@@214 T@U) ) (!  (=> (and (and (= (type |a#90#0#0@@0|) DatatypeTypeType) (= (type $h@@214) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@214)) (= ($IsAlloc (|#BetreeSpec.BetreeStep.BetreeQuery| |a#90#0#0@@0|) Tclass.BetreeSpec.BetreeStep $h@@214) ($IsAlloc |a#90#0#0@@0| Tclass.BetreeSpec.LookupQuery $h@@214))) :qid |BetreeSpecidfy.390:19| :skolemid |4016| :pattern ( ($IsAlloc (|#BetreeSpec.BetreeStep.BetreeQuery| |a#90#0#0@@0|) Tclass.BetreeSpec.BetreeStep $h@@214)) )))
(assert (forall ((arg0@@679 T@U) ) (! (= (type (BetreeSpec.BetreeStep.q arg0@@679)) DatatypeTypeType) :qid |funType:BetreeSpec.BetreeStep.q| :pattern ( (BetreeSpec.BetreeStep.q arg0@@679)) )))
(assert (forall ((d@@239 T@U) ($h@@215 T@U) ) (!  (=> (and (and (= (type d@@239) DatatypeTypeType) (= (type $h@@215) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@215) (and (BetreeSpec.BetreeStep.BetreeQuery_q d@@239) ($IsAlloc d@@239 Tclass.BetreeSpec.BetreeStep $h@@215)))) ($IsAlloc (BetreeSpec.BetreeStep.q d@@239) Tclass.BetreeSpec.LookupQuery $h@@215)) :qid |unknown.0:0| :skolemid |4017| :pattern ( ($IsAlloc (BetreeSpec.BetreeStep.q d@@239) Tclass.BetreeSpec.LookupQuery $h@@215)) )))
(assert (forall ((|a#91#0#0@@0| T@U) ) (!  (=> (= (type |a#91#0#0@@0|) DatatypeTypeType) (= (|#BetreeSpec.BetreeStep.BetreeQuery| (Lit |a#91#0#0@@0|)) (Lit (|#BetreeSpec.BetreeStep.BetreeQuery| |a#91#0#0@@0|)))) :qid |BetreeSpecidfy.390:19| :skolemid |4018| :pattern ( (|#BetreeSpec.BetreeStep.BetreeQuery| (Lit |a#91#0#0@@0|))) )))
(assert (forall ((|a#92#0#0@@0| T@U) ) (!  (=> (= (type |a#92#0#0@@0|) DatatypeTypeType) (= (BetreeSpec.BetreeStep.q (|#BetreeSpec.BetreeStep.BetreeQuery| |a#92#0#0@@0|)) |a#92#0#0@@0|)) :qid |BetreeSpecidfy.390:19| :skolemid |4019| :pattern ( (|#BetreeSpec.BetreeStep.BetreeQuery| |a#92#0#0@@0|)) )))
(assert (forall ((|a#93#0#0@@0| T@U) ) (!  (=> (= (type |a#93#0#0@@0|) DatatypeTypeType) (< (DtRank |a#93#0#0@@0|) (DtRank (|#BetreeSpec.BetreeStep.BetreeQuery| |a#93#0#0@@0|)))) :qid |BetreeSpecidfy.390:19| :skolemid |4020| :pattern ( (|#BetreeSpec.BetreeStep.BetreeQuery| |a#93#0#0@@0|)) )))
(assert (forall ((arg0@@680 T@U) ) (! (= (type (|#BetreeSpec.BetreeStep.BetreeSuccQuery| arg0@@680)) DatatypeTypeType) :qid |funType:#BetreeSpec.BetreeStep.BetreeSuccQuery| :pattern ( (|#BetreeSpec.BetreeStep.BetreeSuccQuery| arg0@@680)) )))
(assert (forall ((|a#94#0#0@@0| T@U) ) (!  (=> (= (type |a#94#0#0@@0|) DatatypeTypeType) (= (DatatypeCtorId (|#BetreeSpec.BetreeStep.BetreeSuccQuery| |a#94#0#0@@0|)) |##BetreeSpec.BetreeStep.BetreeSuccQuery|)) :qid |BetreeSpecidfy.391:23| :skolemid |4021| :pattern ( (|#BetreeSpec.BetreeStep.BetreeSuccQuery| |a#94#0#0@@0|)) )))
(assert (forall ((d@@240 T@U) ) (!  (=> (= (type d@@240) DatatypeTypeType) (= (BetreeSpec.BetreeStep.BetreeSuccQuery_q d@@240) (= (DatatypeCtorId d@@240) |##BetreeSpec.BetreeStep.BetreeSuccQuery|))) :qid |unknown.0:0| :skolemid |4022| :pattern ( (BetreeSpec.BetreeStep.BetreeSuccQuery_q d@@240)) )))
(assert (forall ((d@@241 T@U) ) (!  (=> (and (= (type d@@241) DatatypeTypeType) (BetreeSpec.BetreeStep.BetreeSuccQuery_q d@@241)) (exists ((|a#95#0#0@@0| T@U) ) (!  (and (= (type |a#95#0#0@@0|) DatatypeTypeType) (= d@@241 (|#BetreeSpec.BetreeStep.BetreeSuccQuery| |a#95#0#0@@0|))) :qid |BetreeSpecidfy.391:23| :skolemid |4023| :no-pattern (type |a#95#0#0@@0|) :no-pattern (U_2_int |a#95#0#0@@0|) :no-pattern (U_2_bool |a#95#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |4024| :pattern ( (BetreeSpec.BetreeStep.BetreeSuccQuery_q d@@241)) )))
(assert (forall ((|a#96#0#0@@0| T@U) ) (!  (=> (= (type |a#96#0#0@@0|) DatatypeTypeType) (= ($Is (|#BetreeSpec.BetreeStep.BetreeSuccQuery| |a#96#0#0@@0|) Tclass.BetreeSpec.BetreeStep) ($Is |a#96#0#0@@0| Tclass.BetreeSpec.SuccQuery))) :qid |BetreeSpecidfy.391:23| :skolemid |4025| :pattern ( ($Is (|#BetreeSpec.BetreeStep.BetreeSuccQuery| |a#96#0#0@@0|) Tclass.BetreeSpec.BetreeStep)) )))
(assert (forall ((|a#97#0#0@@0| T@U) ($h@@216 T@U) ) (!  (=> (and (and (= (type |a#97#0#0@@0|) DatatypeTypeType) (= (type $h@@216) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@216)) (= ($IsAlloc (|#BetreeSpec.BetreeStep.BetreeSuccQuery| |a#97#0#0@@0|) Tclass.BetreeSpec.BetreeStep $h@@216) ($IsAlloc |a#97#0#0@@0| Tclass.BetreeSpec.SuccQuery $h@@216))) :qid |BetreeSpecidfy.391:23| :skolemid |4026| :pattern ( ($IsAlloc (|#BetreeSpec.BetreeStep.BetreeSuccQuery| |a#97#0#0@@0|) Tclass.BetreeSpec.BetreeStep $h@@216)) )))
(assert (forall ((arg0@@681 T@U) ) (! (= (type (BetreeSpec.BetreeStep.sq arg0@@681)) DatatypeTypeType) :qid |funType:BetreeSpec.BetreeStep.sq| :pattern ( (BetreeSpec.BetreeStep.sq arg0@@681)) )))
(assert (forall ((d@@242 T@U) ($h@@217 T@U) ) (!  (=> (and (and (= (type d@@242) DatatypeTypeType) (= (type $h@@217) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@217) (and (BetreeSpec.BetreeStep.BetreeSuccQuery_q d@@242) ($IsAlloc d@@242 Tclass.BetreeSpec.BetreeStep $h@@217)))) ($IsAlloc (BetreeSpec.BetreeStep.sq d@@242) Tclass.BetreeSpec.SuccQuery $h@@217)) :qid |unknown.0:0| :skolemid |4027| :pattern ( ($IsAlloc (BetreeSpec.BetreeStep.sq d@@242) Tclass.BetreeSpec.SuccQuery $h@@217)) )))
(assert (forall ((|a#98#0#0@@0| T@U) ) (!  (=> (= (type |a#98#0#0@@0|) DatatypeTypeType) (= (|#BetreeSpec.BetreeStep.BetreeSuccQuery| (Lit |a#98#0#0@@0|)) (Lit (|#BetreeSpec.BetreeStep.BetreeSuccQuery| |a#98#0#0@@0|)))) :qid |BetreeSpecidfy.391:23| :skolemid |4028| :pattern ( (|#BetreeSpec.BetreeStep.BetreeSuccQuery| (Lit |a#98#0#0@@0|))) )))
(assert (forall ((|a#99#0#0@@0| T@U) ) (!  (=> (= (type |a#99#0#0@@0|) DatatypeTypeType) (= (BetreeSpec.BetreeStep.sq (|#BetreeSpec.BetreeStep.BetreeSuccQuery| |a#99#0#0@@0|)) |a#99#0#0@@0|)) :qid |BetreeSpecidfy.391:23| :skolemid |4029| :pattern ( (|#BetreeSpec.BetreeStep.BetreeSuccQuery| |a#99#0#0@@0|)) )))
(assert (forall ((|a#100#0#0@@0| T@U) ) (!  (=> (= (type |a#100#0#0@@0|) DatatypeTypeType) (< (DtRank |a#100#0#0@@0|) (DtRank (|#BetreeSpec.BetreeStep.BetreeSuccQuery| |a#100#0#0@@0|)))) :qid |BetreeSpecidfy.391:23| :skolemid |4030| :pattern ( (|#BetreeSpec.BetreeStep.BetreeSuccQuery| |a#100#0#0@@0|)) )))
(assert (forall ((arg0@@682 T@U) ) (! (= (type (|#BetreeSpec.BetreeStep.BetreeInsert| arg0@@682)) DatatypeTypeType) :qid |funType:#BetreeSpec.BetreeStep.BetreeInsert| :pattern ( (|#BetreeSpec.BetreeStep.BetreeInsert| arg0@@682)) )))
(assert (forall ((|a#101#0#0@@0| T@U) ) (!  (=> (= (type |a#101#0#0@@0|) DatatypeTypeType) (= (DatatypeCtorId (|#BetreeSpec.BetreeStep.BetreeInsert| |a#101#0#0@@0|)) |##BetreeSpec.BetreeStep.BetreeInsert|)) :qid |BetreeSpecidfy.392:20| :skolemid |4031| :pattern ( (|#BetreeSpec.BetreeStep.BetreeInsert| |a#101#0#0@@0|)) )))
(assert (forall ((d@@243 T@U) ) (!  (=> (= (type d@@243) DatatypeTypeType) (= (BetreeSpec.BetreeStep.BetreeInsert_q d@@243) (= (DatatypeCtorId d@@243) |##BetreeSpec.BetreeStep.BetreeInsert|))) :qid |unknown.0:0| :skolemid |4032| :pattern ( (BetreeSpec.BetreeStep.BetreeInsert_q d@@243)) )))
(assert (forall ((d@@244 T@U) ) (!  (=> (and (= (type d@@244) DatatypeTypeType) (BetreeSpec.BetreeStep.BetreeInsert_q d@@244)) (exists ((|a#102#0#0@@0| T@U) ) (!  (and (= (type |a#102#0#0@@0|) DatatypeTypeType) (= d@@244 (|#BetreeSpec.BetreeStep.BetreeInsert| |a#102#0#0@@0|))) :qid |BetreeSpecidfy.392:20| :skolemid |4033| :no-pattern (type |a#102#0#0@@0|) :no-pattern (U_2_int |a#102#0#0@@0|) :no-pattern (U_2_bool |a#102#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |4034| :pattern ( (BetreeSpec.BetreeStep.BetreeInsert_q d@@244)) )))
(assert (forall ((|a#103#0#0@@0| T@U) ) (!  (=> (= (type |a#103#0#0@@0|) DatatypeTypeType) (= ($Is (|#BetreeSpec.BetreeStep.BetreeInsert| |a#103#0#0@@0|) Tclass.BetreeSpec.BetreeStep) ($Is |a#103#0#0@@0| Tclass.BetreeSpec.MessageInsertion))) :qid |BetreeSpecidfy.392:20| :skolemid |4035| :pattern ( ($Is (|#BetreeSpec.BetreeStep.BetreeInsert| |a#103#0#0@@0|) Tclass.BetreeSpec.BetreeStep)) )))
(assert (forall ((|a#104#0#0@@0| T@U) ($h@@218 T@U) ) (!  (=> (and (and (= (type |a#104#0#0@@0|) DatatypeTypeType) (= (type $h@@218) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@218)) (= ($IsAlloc (|#BetreeSpec.BetreeStep.BetreeInsert| |a#104#0#0@@0|) Tclass.BetreeSpec.BetreeStep $h@@218) ($IsAlloc |a#104#0#0@@0| Tclass.BetreeSpec.MessageInsertion $h@@218))) :qid |BetreeSpecidfy.392:20| :skolemid |4036| :pattern ( ($IsAlloc (|#BetreeSpec.BetreeStep.BetreeInsert| |a#104#0#0@@0|) Tclass.BetreeSpec.BetreeStep $h@@218)) )))
(assert (forall ((arg0@@683 T@U) ) (! (= (type (BetreeSpec.BetreeStep.ins arg0@@683)) DatatypeTypeType) :qid |funType:BetreeSpec.BetreeStep.ins| :pattern ( (BetreeSpec.BetreeStep.ins arg0@@683)) )))
(assert (forall ((d@@245 T@U) ($h@@219 T@U) ) (!  (=> (and (and (= (type d@@245) DatatypeTypeType) (= (type $h@@219) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@219) (and (BetreeSpec.BetreeStep.BetreeInsert_q d@@245) ($IsAlloc d@@245 Tclass.BetreeSpec.BetreeStep $h@@219)))) ($IsAlloc (BetreeSpec.BetreeStep.ins d@@245) Tclass.BetreeSpec.MessageInsertion $h@@219)) :qid |unknown.0:0| :skolemid |4037| :pattern ( ($IsAlloc (BetreeSpec.BetreeStep.ins d@@245) Tclass.BetreeSpec.MessageInsertion $h@@219)) )))
(assert (forall ((|a#105#0#0@@0| T@U) ) (!  (=> (= (type |a#105#0#0@@0|) DatatypeTypeType) (= (|#BetreeSpec.BetreeStep.BetreeInsert| (Lit |a#105#0#0@@0|)) (Lit (|#BetreeSpec.BetreeStep.BetreeInsert| |a#105#0#0@@0|)))) :qid |BetreeSpecidfy.392:20| :skolemid |4038| :pattern ( (|#BetreeSpec.BetreeStep.BetreeInsert| (Lit |a#105#0#0@@0|))) )))
(assert (forall ((|a#106#0#0@@0| T@U) ) (!  (=> (= (type |a#106#0#0@@0|) DatatypeTypeType) (= (BetreeSpec.BetreeStep.ins (|#BetreeSpec.BetreeStep.BetreeInsert| |a#106#0#0@@0|)) |a#106#0#0@@0|)) :qid |BetreeSpecidfy.392:20| :skolemid |4039| :pattern ( (|#BetreeSpec.BetreeStep.BetreeInsert| |a#106#0#0@@0|)) )))
(assert (forall ((|a#107#0#0@@0| T@U) ) (!  (=> (= (type |a#107#0#0@@0|) DatatypeTypeType) (< (DtRank |a#107#0#0@@0|) (DtRank (|#BetreeSpec.BetreeStep.BetreeInsert| |a#107#0#0@@0|)))) :qid |BetreeSpecidfy.392:20| :skolemid |4040| :pattern ( (|#BetreeSpec.BetreeStep.BetreeInsert| |a#107#0#0@@0|)) )))
(assert (forall ((arg0@@684 T@U) ) (! (= (type (|#BetreeSpec.BetreeStep.BetreeFlush| arg0@@684)) DatatypeTypeType) :qid |funType:#BetreeSpec.BetreeStep.BetreeFlush| :pattern ( (|#BetreeSpec.BetreeStep.BetreeFlush| arg0@@684)) )))
(assert (forall ((|a#108#0#0@@0| T@U) ) (!  (=> (= (type |a#108#0#0@@0|) DatatypeTypeType) (= (DatatypeCtorId (|#BetreeSpec.BetreeStep.BetreeFlush| |a#108#0#0@@0|)) |##BetreeSpec.BetreeStep.BetreeFlush|)) :qid |BetreeSpecidfy.393:19| :skolemid |4041| :pattern ( (|#BetreeSpec.BetreeStep.BetreeFlush| |a#108#0#0@@0|)) )))
(assert (forall ((d@@246 T@U) ) (!  (=> (= (type d@@246) DatatypeTypeType) (= (BetreeSpec.BetreeStep.BetreeFlush_q d@@246) (= (DatatypeCtorId d@@246) |##BetreeSpec.BetreeStep.BetreeFlush|))) :qid |unknown.0:0| :skolemid |4042| :pattern ( (BetreeSpec.BetreeStep.BetreeFlush_q d@@246)) )))
(assert (forall ((d@@247 T@U) ) (!  (=> (and (= (type d@@247) DatatypeTypeType) (BetreeSpec.BetreeStep.BetreeFlush_q d@@247)) (exists ((|a#109#0#0@@0| T@U) ) (!  (and (= (type |a#109#0#0@@0|) DatatypeTypeType) (= d@@247 (|#BetreeSpec.BetreeStep.BetreeFlush| |a#109#0#0@@0|))) :qid |BetreeSpecidfy.393:19| :skolemid |4043| :no-pattern (type |a#109#0#0@@0|) :no-pattern (U_2_int |a#109#0#0@@0|) :no-pattern (U_2_bool |a#109#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |4044| :pattern ( (BetreeSpec.BetreeStep.BetreeFlush_q d@@247)) )))
(assert (forall ((|a#110#0#0@@0| T@U) ) (!  (=> (= (type |a#110#0#0@@0|) DatatypeTypeType) (= ($Is (|#BetreeSpec.BetreeStep.BetreeFlush| |a#110#0#0@@0|) Tclass.BetreeSpec.BetreeStep) ($Is |a#110#0#0@@0| Tclass.BetreeSpec.NodeFlush))) :qid |BetreeSpecidfy.393:19| :skolemid |4045| :pattern ( ($Is (|#BetreeSpec.BetreeStep.BetreeFlush| |a#110#0#0@@0|) Tclass.BetreeSpec.BetreeStep)) )))
(assert (forall ((|a#111#0#0@@0| T@U) ($h@@220 T@U) ) (!  (=> (and (and (= (type |a#111#0#0@@0|) DatatypeTypeType) (= (type $h@@220) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@220)) (= ($IsAlloc (|#BetreeSpec.BetreeStep.BetreeFlush| |a#111#0#0@@0|) Tclass.BetreeSpec.BetreeStep $h@@220) ($IsAlloc |a#111#0#0@@0| Tclass.BetreeSpec.NodeFlush $h@@220))) :qid |BetreeSpecidfy.393:19| :skolemid |4046| :pattern ( ($IsAlloc (|#BetreeSpec.BetreeStep.BetreeFlush| |a#111#0#0@@0|) Tclass.BetreeSpec.BetreeStep $h@@220)) )))
(assert (forall ((arg0@@685 T@U) ) (! (= (type (BetreeSpec.BetreeStep.flush arg0@@685)) DatatypeTypeType) :qid |funType:BetreeSpec.BetreeStep.flush| :pattern ( (BetreeSpec.BetreeStep.flush arg0@@685)) )))
(assert (forall ((d@@248 T@U) ($h@@221 T@U) ) (!  (=> (and (and (= (type d@@248) DatatypeTypeType) (= (type $h@@221) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@221) (and (BetreeSpec.BetreeStep.BetreeFlush_q d@@248) ($IsAlloc d@@248 Tclass.BetreeSpec.BetreeStep $h@@221)))) ($IsAlloc (BetreeSpec.BetreeStep.flush d@@248) Tclass.BetreeSpec.NodeFlush $h@@221)) :qid |unknown.0:0| :skolemid |4047| :pattern ( ($IsAlloc (BetreeSpec.BetreeStep.flush d@@248) Tclass.BetreeSpec.NodeFlush $h@@221)) )))
(assert (forall ((|a#112#0#0@@0| T@U) ) (!  (=> (= (type |a#112#0#0@@0|) DatatypeTypeType) (= (|#BetreeSpec.BetreeStep.BetreeFlush| (Lit |a#112#0#0@@0|)) (Lit (|#BetreeSpec.BetreeStep.BetreeFlush| |a#112#0#0@@0|)))) :qid |BetreeSpecidfy.393:19| :skolemid |4048| :pattern ( (|#BetreeSpec.BetreeStep.BetreeFlush| (Lit |a#112#0#0@@0|))) )))
(assert (forall ((|a#113#0#0@@0| T@U) ) (!  (=> (= (type |a#113#0#0@@0|) DatatypeTypeType) (= (BetreeSpec.BetreeStep.flush (|#BetreeSpec.BetreeStep.BetreeFlush| |a#113#0#0@@0|)) |a#113#0#0@@0|)) :qid |BetreeSpecidfy.393:19| :skolemid |4049| :pattern ( (|#BetreeSpec.BetreeStep.BetreeFlush| |a#113#0#0@@0|)) )))
(assert (forall ((|a#114#0#0@@0| T@U) ) (!  (=> (= (type |a#114#0#0@@0|) DatatypeTypeType) (< (DtRank |a#114#0#0@@0|) (DtRank (|#BetreeSpec.BetreeStep.BetreeFlush| |a#114#0#0@@0|)))) :qid |BetreeSpecidfy.393:19| :skolemid |4050| :pattern ( (|#BetreeSpec.BetreeStep.BetreeFlush| |a#114#0#0@@0|)) )))
(assert (forall ((arg0@@686 T@U) ) (! (= (type (|#BetreeSpec.BetreeStep.BetreeGrow| arg0@@686)) DatatypeTypeType) :qid |funType:#BetreeSpec.BetreeStep.BetreeGrow| :pattern ( (|#BetreeSpec.BetreeStep.BetreeGrow| arg0@@686)) )))
(assert (forall ((|a#115#0#0@@0| T@U) ) (!  (=> (= (type |a#115#0#0@@0|) DatatypeTypeType) (= (DatatypeCtorId (|#BetreeSpec.BetreeStep.BetreeGrow| |a#115#0#0@@0|)) |##BetreeSpec.BetreeStep.BetreeGrow|)) :qid |BetreeSpecidfy.394:18| :skolemid |4051| :pattern ( (|#BetreeSpec.BetreeStep.BetreeGrow| |a#115#0#0@@0|)) )))
(assert (forall ((d@@249 T@U) ) (!  (=> (= (type d@@249) DatatypeTypeType) (= (BetreeSpec.BetreeStep.BetreeGrow_q d@@249) (= (DatatypeCtorId d@@249) |##BetreeSpec.BetreeStep.BetreeGrow|))) :qid |unknown.0:0| :skolemid |4052| :pattern ( (BetreeSpec.BetreeStep.BetreeGrow_q d@@249)) )))
(assert (forall ((d@@250 T@U) ) (!  (=> (and (= (type d@@250) DatatypeTypeType) (BetreeSpec.BetreeStep.BetreeGrow_q d@@250)) (exists ((|a#116#0#0@@0| T@U) ) (!  (and (= (type |a#116#0#0@@0|) DatatypeTypeType) (= d@@250 (|#BetreeSpec.BetreeStep.BetreeGrow| |a#116#0#0@@0|))) :qid |BetreeSpecidfy.394:18| :skolemid |4053| :no-pattern (type |a#116#0#0@@0|) :no-pattern (U_2_int |a#116#0#0@@0|) :no-pattern (U_2_bool |a#116#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |4054| :pattern ( (BetreeSpec.BetreeStep.BetreeGrow_q d@@250)) )))
(assert (forall ((|a#117#0#0@@0| T@U) ) (!  (=> (= (type |a#117#0#0@@0|) DatatypeTypeType) (= ($Is (|#BetreeSpec.BetreeStep.BetreeGrow| |a#117#0#0@@0|) Tclass.BetreeSpec.BetreeStep) ($Is |a#117#0#0@@0| Tclass.BetreeSpec.RootGrowth))) :qid |BetreeSpecidfy.394:18| :skolemid |4055| :pattern ( ($Is (|#BetreeSpec.BetreeStep.BetreeGrow| |a#117#0#0@@0|) Tclass.BetreeSpec.BetreeStep)) )))
(assert (forall ((|a#118#0#0| T@U) ($h@@222 T@U) ) (!  (=> (and (and (= (type |a#118#0#0|) DatatypeTypeType) (= (type $h@@222) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@222)) (= ($IsAlloc (|#BetreeSpec.BetreeStep.BetreeGrow| |a#118#0#0|) Tclass.BetreeSpec.BetreeStep $h@@222) ($IsAlloc |a#118#0#0| Tclass.BetreeSpec.RootGrowth $h@@222))) :qid |BetreeSpecidfy.394:18| :skolemid |4056| :pattern ( ($IsAlloc (|#BetreeSpec.BetreeStep.BetreeGrow| |a#118#0#0|) Tclass.BetreeSpec.BetreeStep $h@@222)) )))
(assert (forall ((arg0@@687 T@U) ) (! (= (type (BetreeSpec.BetreeStep.growth arg0@@687)) DatatypeTypeType) :qid |funType:BetreeSpec.BetreeStep.growth| :pattern ( (BetreeSpec.BetreeStep.growth arg0@@687)) )))
(assert (forall ((d@@251 T@U) ($h@@223 T@U) ) (!  (=> (and (and (= (type d@@251) DatatypeTypeType) (= (type $h@@223) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@223) (and (BetreeSpec.BetreeStep.BetreeGrow_q d@@251) ($IsAlloc d@@251 Tclass.BetreeSpec.BetreeStep $h@@223)))) ($IsAlloc (BetreeSpec.BetreeStep.growth d@@251) Tclass.BetreeSpec.RootGrowth $h@@223)) :qid |unknown.0:0| :skolemid |4057| :pattern ( ($IsAlloc (BetreeSpec.BetreeStep.growth d@@251) Tclass.BetreeSpec.RootGrowth $h@@223)) )))
(assert (forall ((|a#119#0#0| T@U) ) (!  (=> (= (type |a#119#0#0|) DatatypeTypeType) (= (|#BetreeSpec.BetreeStep.BetreeGrow| (Lit |a#119#0#0|)) (Lit (|#BetreeSpec.BetreeStep.BetreeGrow| |a#119#0#0|)))) :qid |BetreeSpecidfy.394:18| :skolemid |4058| :pattern ( (|#BetreeSpec.BetreeStep.BetreeGrow| (Lit |a#119#0#0|))) )))
(assert (forall ((|a#120#0#0| T@U) ) (!  (=> (= (type |a#120#0#0|) DatatypeTypeType) (= (BetreeSpec.BetreeStep.growth (|#BetreeSpec.BetreeStep.BetreeGrow| |a#120#0#0|)) |a#120#0#0|)) :qid |BetreeSpecidfy.394:18| :skolemid |4059| :pattern ( (|#BetreeSpec.BetreeStep.BetreeGrow| |a#120#0#0|)) )))
(assert (forall ((|a#121#0#0| T@U) ) (!  (=> (= (type |a#121#0#0|) DatatypeTypeType) (< (DtRank |a#121#0#0|) (DtRank (|#BetreeSpec.BetreeStep.BetreeGrow| |a#121#0#0|)))) :qid |BetreeSpecidfy.394:18| :skolemid |4060| :pattern ( (|#BetreeSpec.BetreeStep.BetreeGrow| |a#121#0#0|)) )))
(assert (forall ((arg0@@688 T@U) ) (! (= (type (|#BetreeSpec.BetreeStep.BetreeRedirect| arg0@@688)) DatatypeTypeType) :qid |funType:#BetreeSpec.BetreeStep.BetreeRedirect| :pattern ( (|#BetreeSpec.BetreeStep.BetreeRedirect| arg0@@688)) )))
(assert (forall ((|a#122#0#0| T@U) ) (!  (=> (= (type |a#122#0#0|) DatatypeTypeType) (= (DatatypeCtorId (|#BetreeSpec.BetreeStep.BetreeRedirect| |a#122#0#0|)) |##BetreeSpec.BetreeStep.BetreeRedirect|)) :qid |BetreeSpecidfy.395:22| :skolemid |4061| :pattern ( (|#BetreeSpec.BetreeStep.BetreeRedirect| |a#122#0#0|)) )))
(assert (forall ((d@@252 T@U) ) (!  (=> (= (type d@@252) DatatypeTypeType) (= (BetreeSpec.BetreeStep.BetreeRedirect_q d@@252) (= (DatatypeCtorId d@@252) |##BetreeSpec.BetreeStep.BetreeRedirect|))) :qid |unknown.0:0| :skolemid |4062| :pattern ( (BetreeSpec.BetreeStep.BetreeRedirect_q d@@252)) )))
(assert (forall ((d@@253 T@U) ) (!  (=> (and (= (type d@@253) DatatypeTypeType) (BetreeSpec.BetreeStep.BetreeRedirect_q d@@253)) (exists ((|a#123#0#0| T@U) ) (!  (and (= (type |a#123#0#0|) DatatypeTypeType) (= d@@253 (|#BetreeSpec.BetreeStep.BetreeRedirect| |a#123#0#0|))) :qid |BetreeSpecidfy.395:22| :skolemid |4063| :no-pattern (type |a#123#0#0|) :no-pattern (U_2_int |a#123#0#0|) :no-pattern (U_2_bool |a#123#0#0|) ))) :qid |unknown.0:0| :skolemid |4064| :pattern ( (BetreeSpec.BetreeStep.BetreeRedirect_q d@@253)) )))
(assert (forall ((|a#124#0#0| T@U) ) (!  (=> (= (type |a#124#0#0|) DatatypeTypeType) (= ($Is (|#BetreeSpec.BetreeStep.BetreeRedirect| |a#124#0#0|) Tclass.BetreeSpec.BetreeStep) ($Is |a#124#0#0| Tclass.BetreeSpec.Redirect))) :qid |BetreeSpecidfy.395:22| :skolemid |4065| :pattern ( ($Is (|#BetreeSpec.BetreeStep.BetreeRedirect| |a#124#0#0|) Tclass.BetreeSpec.BetreeStep)) )))
(assert (forall ((|a#125#0#0| T@U) ($h@@224 T@U) ) (!  (=> (and (and (= (type |a#125#0#0|) DatatypeTypeType) (= (type $h@@224) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@224)) (= ($IsAlloc (|#BetreeSpec.BetreeStep.BetreeRedirect| |a#125#0#0|) Tclass.BetreeSpec.BetreeStep $h@@224) ($IsAlloc |a#125#0#0| Tclass.BetreeSpec.Redirect $h@@224))) :qid |BetreeSpecidfy.395:22| :skolemid |4066| :pattern ( ($IsAlloc (|#BetreeSpec.BetreeStep.BetreeRedirect| |a#125#0#0|) Tclass.BetreeSpec.BetreeStep $h@@224)) )))
(assert (forall ((arg0@@689 T@U) ) (! (= (type (BetreeSpec.BetreeStep.redirect arg0@@689)) DatatypeTypeType) :qid |funType:BetreeSpec.BetreeStep.redirect| :pattern ( (BetreeSpec.BetreeStep.redirect arg0@@689)) )))
(assert (forall ((d@@254 T@U) ($h@@225 T@U) ) (!  (=> (and (and (= (type d@@254) DatatypeTypeType) (= (type $h@@225) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@225) (and (BetreeSpec.BetreeStep.BetreeRedirect_q d@@254) ($IsAlloc d@@254 Tclass.BetreeSpec.BetreeStep $h@@225)))) ($IsAlloc (BetreeSpec.BetreeStep.redirect d@@254) Tclass.BetreeSpec.Redirect $h@@225)) :qid |unknown.0:0| :skolemid |4067| :pattern ( ($IsAlloc (BetreeSpec.BetreeStep.redirect d@@254) Tclass.BetreeSpec.Redirect $h@@225)) )))
(assert (forall ((|a#126#0#0| T@U) ) (!  (=> (= (type |a#126#0#0|) DatatypeTypeType) (= (|#BetreeSpec.BetreeStep.BetreeRedirect| (Lit |a#126#0#0|)) (Lit (|#BetreeSpec.BetreeStep.BetreeRedirect| |a#126#0#0|)))) :qid |BetreeSpecidfy.395:22| :skolemid |4068| :pattern ( (|#BetreeSpec.BetreeStep.BetreeRedirect| (Lit |a#126#0#0|))) )))
(assert (forall ((|a#127#0#0| T@U) ) (!  (=> (= (type |a#127#0#0|) DatatypeTypeType) (= (BetreeSpec.BetreeStep.redirect (|#BetreeSpec.BetreeStep.BetreeRedirect| |a#127#0#0|)) |a#127#0#0|)) :qid |BetreeSpecidfy.395:22| :skolemid |4069| :pattern ( (|#BetreeSpec.BetreeStep.BetreeRedirect| |a#127#0#0|)) )))
(assert (forall ((|a#128#0#0| T@U) ) (!  (=> (= (type |a#128#0#0|) DatatypeTypeType) (< (DtRank |a#128#0#0|) (DtRank (|#BetreeSpec.BetreeStep.BetreeRedirect| |a#128#0#0|)))) :qid |BetreeSpecidfy.395:22| :skolemid |4070| :pattern ( (|#BetreeSpec.BetreeStep.BetreeRedirect| |a#128#0#0|)) )))
(assert (forall ((d@@255 T@U) ) (!  (=> (and (= (type d@@255) DatatypeTypeType) (|$IsA#BetreeSpec.BetreeStep| d@@255)) (or (or (or (or (or (BetreeSpec.BetreeStep.BetreeQuery_q d@@255) (BetreeSpec.BetreeStep.BetreeSuccQuery_q d@@255)) (BetreeSpec.BetreeStep.BetreeInsert_q d@@255)) (BetreeSpec.BetreeStep.BetreeFlush_q d@@255)) (BetreeSpec.BetreeStep.BetreeGrow_q d@@255)) (BetreeSpec.BetreeStep.BetreeRedirect_q d@@255))) :qid |unknown.0:0| :skolemid |4071| :pattern ( (|$IsA#BetreeSpec.BetreeStep| d@@255)) )))
(assert (forall ((d@@256 T@U) ) (!  (=> (and (= (type d@@256) DatatypeTypeType) ($Is d@@256 Tclass.BetreeSpec.BetreeStep)) (or (or (or (or (or (BetreeSpec.BetreeStep.BetreeQuery_q d@@256) (BetreeSpec.BetreeStep.BetreeSuccQuery_q d@@256)) (BetreeSpec.BetreeStep.BetreeInsert_q d@@256)) (BetreeSpec.BetreeStep.BetreeFlush_q d@@256)) (BetreeSpec.BetreeStep.BetreeGrow_q d@@256)) (BetreeSpec.BetreeStep.BetreeRedirect_q d@@256))) :qid |unknown.0:0| :skolemid |4072| :pattern ( (BetreeSpec.BetreeStep.BetreeRedirect_q d@@256) ($Is d@@256 Tclass.BetreeSpec.BetreeStep)) :pattern ( (BetreeSpec.BetreeStep.BetreeGrow_q d@@256) ($Is d@@256 Tclass.BetreeSpec.BetreeStep)) :pattern ( (BetreeSpec.BetreeStep.BetreeFlush_q d@@256) ($Is d@@256 Tclass.BetreeSpec.BetreeStep)) :pattern ( (BetreeSpec.BetreeStep.BetreeInsert_q d@@256) ($Is d@@256 Tclass.BetreeSpec.BetreeStep)) :pattern ( (BetreeSpec.BetreeStep.BetreeSuccQuery_q d@@256) ($Is d@@256 Tclass.BetreeSpec.BetreeStep)) :pattern ( (BetreeSpec.BetreeStep.BetreeQuery_q d@@256) ($Is d@@256 Tclass.BetreeSpec.BetreeStep)) )))
(assert (forall ((a@@196 T@U) (b@@133 T@U) ) (!  (=> (and (and (= (type a@@196) DatatypeTypeType) (= (type b@@133) DatatypeTypeType)) (and (BetreeSpec.BetreeStep.BetreeQuery_q a@@196) (BetreeSpec.BetreeStep.BetreeQuery_q b@@133))) (= (|BetreeSpec.BetreeStep#Equal| a@@196 b@@133) (|BetreeSpec.LookupQuery#Equal| (BetreeSpec.BetreeStep.q a@@196) (BetreeSpec.BetreeStep.q b@@133)))) :qid |unknown.0:0| :skolemid |4073| :pattern ( (|BetreeSpec.BetreeStep#Equal| a@@196 b@@133) (BetreeSpec.BetreeStep.BetreeQuery_q a@@196)) :pattern ( (|BetreeSpec.BetreeStep#Equal| a@@196 b@@133) (BetreeSpec.BetreeStep.BetreeQuery_q b@@133)) )))
(assert (forall ((a@@197 T@U) (b@@134 T@U) ) (!  (=> (and (and (= (type a@@197) DatatypeTypeType) (= (type b@@134) DatatypeTypeType)) (and (BetreeSpec.BetreeStep.BetreeSuccQuery_q a@@197) (BetreeSpec.BetreeStep.BetreeSuccQuery_q b@@134))) (= (|BetreeSpec.BetreeStep#Equal| a@@197 b@@134) (|BetreeSpec.SuccQuery#Equal| (BetreeSpec.BetreeStep.sq a@@197) (BetreeSpec.BetreeStep.sq b@@134)))) :qid |unknown.0:0| :skolemid |4074| :pattern ( (|BetreeSpec.BetreeStep#Equal| a@@197 b@@134) (BetreeSpec.BetreeStep.BetreeSuccQuery_q a@@197)) :pattern ( (|BetreeSpec.BetreeStep#Equal| a@@197 b@@134) (BetreeSpec.BetreeStep.BetreeSuccQuery_q b@@134)) )))
(assert (forall ((a@@198 T@U) (b@@135 T@U) ) (!  (=> (and (and (= (type a@@198) DatatypeTypeType) (= (type b@@135) DatatypeTypeType)) (and (BetreeSpec.BetreeStep.BetreeInsert_q a@@198) (BetreeSpec.BetreeStep.BetreeInsert_q b@@135))) (= (|BetreeSpec.BetreeStep#Equal| a@@198 b@@135) (|BetreeSpec.MessageInsertion#Equal| (BetreeSpec.BetreeStep.ins a@@198) (BetreeSpec.BetreeStep.ins b@@135)))) :qid |unknown.0:0| :skolemid |4075| :pattern ( (|BetreeSpec.BetreeStep#Equal| a@@198 b@@135) (BetreeSpec.BetreeStep.BetreeInsert_q a@@198)) :pattern ( (|BetreeSpec.BetreeStep#Equal| a@@198 b@@135) (BetreeSpec.BetreeStep.BetreeInsert_q b@@135)) )))
(assert (forall ((a@@199 T@U) (b@@136 T@U) ) (!  (=> (and (and (= (type a@@199) DatatypeTypeType) (= (type b@@136) DatatypeTypeType)) (and (BetreeSpec.BetreeStep.BetreeFlush_q a@@199) (BetreeSpec.BetreeStep.BetreeFlush_q b@@136))) (= (|BetreeSpec.BetreeStep#Equal| a@@199 b@@136) (|BetreeSpec.NodeFlush#Equal| (BetreeSpec.BetreeStep.flush a@@199) (BetreeSpec.BetreeStep.flush b@@136)))) :qid |unknown.0:0| :skolemid |4076| :pattern ( (|BetreeSpec.BetreeStep#Equal| a@@199 b@@136) (BetreeSpec.BetreeStep.BetreeFlush_q a@@199)) :pattern ( (|BetreeSpec.BetreeStep#Equal| a@@199 b@@136) (BetreeSpec.BetreeStep.BetreeFlush_q b@@136)) )))
(assert (forall ((a@@200 T@U) (b@@137 T@U) ) (!  (=> (and (and (= (type a@@200) DatatypeTypeType) (= (type b@@137) DatatypeTypeType)) (and (BetreeSpec.BetreeStep.BetreeGrow_q a@@200) (BetreeSpec.BetreeStep.BetreeGrow_q b@@137))) (= (|BetreeSpec.BetreeStep#Equal| a@@200 b@@137) (|BetreeSpec.RootGrowth#Equal| (BetreeSpec.BetreeStep.growth a@@200) (BetreeSpec.BetreeStep.growth b@@137)))) :qid |unknown.0:0| :skolemid |4077| :pattern ( (|BetreeSpec.BetreeStep#Equal| a@@200 b@@137) (BetreeSpec.BetreeStep.BetreeGrow_q a@@200)) :pattern ( (|BetreeSpec.BetreeStep#Equal| a@@200 b@@137) (BetreeSpec.BetreeStep.BetreeGrow_q b@@137)) )))
(assert (forall ((a@@201 T@U) (b@@138 T@U) ) (!  (=> (and (and (= (type a@@201) DatatypeTypeType) (= (type b@@138) DatatypeTypeType)) (and (BetreeSpec.BetreeStep.BetreeRedirect_q a@@201) (BetreeSpec.BetreeStep.BetreeRedirect_q b@@138))) (= (|BetreeSpec.BetreeStep#Equal| a@@201 b@@138) (|BetreeSpec.Redirect#Equal| (BetreeSpec.BetreeStep.redirect a@@201) (BetreeSpec.BetreeStep.redirect b@@138)))) :qid |unknown.0:0| :skolemid |4078| :pattern ( (|BetreeSpec.BetreeStep#Equal| a@@201 b@@138) (BetreeSpec.BetreeStep.BetreeRedirect_q a@@201)) :pattern ( (|BetreeSpec.BetreeStep#Equal| a@@201 b@@138) (BetreeSpec.BetreeStep.BetreeRedirect_q b@@138)) )))
(assert (forall ((a@@202 T@U) (b@@139 T@U) ) (!  (=> (and (= (type a@@202) DatatypeTypeType) (= (type b@@139) DatatypeTypeType)) (= (|BetreeSpec.BetreeStep#Equal| a@@202 b@@139) (= a@@202 b@@139))) :qid |unknown.0:0| :skolemid |4079| :pattern ( (|BetreeSpec.BetreeStep#Equal| a@@202 b@@139)) )))
(assert (= (type Tclass.BetreeSpec.__default) TyType))
(assert (= (Tag Tclass.BetreeSpec.__default) Tagclass.BetreeSpec.__default))
(assert (= (TagFamily Tclass.BetreeSpec.__default) tytagFamily$_default))
(assert (forall (($o@@60 T@U) ) (!  (=> (= (type $o@@60) refType) (= ($Is $o@@60 Tclass.BetreeSpec.__default)  (or (= $o@@60 null) (= (dtype $o@@60) Tclass.BetreeSpec.__default)))) :qid |unknown.0:0| :skolemid |4080| :pattern ( ($Is $o@@60 Tclass.BetreeSpec.__default)) )))
(assert (forall (($o@@61 T@U) ($h@@226 T@U) ) (!  (=> (and (= (type $o@@61) refType) (= (type $h@@226) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@61 Tclass.BetreeSpec.__default $h@@226)  (or (= $o@@61 null) (U_2_bool (MapType1Select (MapType0Select $h@@226 $o@@61) alloc))))) :qid |unknown.0:0| :skolemid |4081| :pattern ( ($IsAlloc $o@@61 Tclass.BetreeSpec.__default $h@@226)) )))
(assert  (=> true (forall ((|entry#0| T@U) ) (!  (=> (and (= (type |entry#0|) DatatypeTypeType) (or (|BetreeSpec.__default.BufferIsDefining#canCall| |entry#0|) ($Is |entry#0| Tclass.ValueMessage.Message))) true) :qid |BetreeSpecidfy.57:30| :skolemid |4082| :pattern ( (BetreeSpec.__default.BufferIsDefining |entry#0|)) ))))
(assert (forall ((|entry#0@@0| T@U) ) (!  (=> (and (= (type |entry#0@@0|) DatatypeTypeType) ($Is |entry#0@@0| Tclass.ValueMessage.Message)) (= (|BetreeSpec.__default.BufferIsDefining#requires| |entry#0@@0|) true)) :qid |BetreeSpecidfy.57:30| :skolemid |4083| :pattern ( (|BetreeSpec.__default.BufferIsDefining#requires| |entry#0@@0|)) )))
(assert  (=> true (forall ((|entry#0@@1| T@U) ) (!  (=> (and (= (type |entry#0@@1|) DatatypeTypeType) (or (|BetreeSpec.__default.BufferIsDefining#canCall| |entry#0@@1|) ($Is |entry#0@@1| Tclass.ValueMessage.Message))) (= (BetreeSpec.__default.BufferIsDefining |entry#0@@1|)  (and true (ValueMessage.Message.Define_q |entry#0@@1|)))) :qid |BetreeSpecidfy.57:30| :skolemid |4084| :pattern ( (BetreeSpec.__default.BufferIsDefining |entry#0@@1|)) ))))
(assert  (=> true (forall ((|entry#0@@2| T@U) ) (!  (=> (and (= (type |entry#0@@2|) DatatypeTypeType) (or (|BetreeSpec.__default.BufferIsDefining#canCall| (Lit |entry#0@@2|)) ($Is |entry#0@@2| Tclass.ValueMessage.Message))) (= (BetreeSpec.__default.BufferIsDefining (Lit |entry#0@@2|)) (U_2_bool (Lit (bool_2_U  (and true (ValueMessage.Message.Define_q (Lit |entry#0@@2|)))))))) :qid |BetreeSpecidfy.57:30| :weight 3 :skolemid |4085| :pattern ( (BetreeSpec.__default.BufferIsDefining (Lit |entry#0@@2|))) ))))
(assert  (=> true (forall ((|log#0| T@U) (|value#0@@4| T@U) ) (!  (=> (and (and (= (type |log#0|) DatatypeTypeType) (= (type |value#0@@4|) (SeqType BoxType))) (or (|BetreeSpec.__default.BufferDefinesValue#canCall| |log#0| |value#0@@4|) (and ($Is |log#0| Tclass.ValueMessage.Message) ($Is |value#0@@4| Tclass.ValueType.Value)))) true) :qid |BetreeSpecidfy.61:32| :skolemid |4086| :pattern ( (BetreeSpec.__default.BufferDefinesValue |log#0| |value#0@@4|)) ))))
(assert (forall ((|log#0@@0| T@U) (|value#0@@5| T@U) ) (!  (=> (and (and (= (type |log#0@@0|) DatatypeTypeType) (= (type |value#0@@5|) (SeqType BoxType))) (and ($Is |log#0@@0| Tclass.ValueMessage.Message) ($Is |value#0@@5| Tclass.ValueType.Value))) (= (|BetreeSpec.__default.BufferDefinesValue#requires| |log#0@@0| |value#0@@5|) true)) :qid |BetreeSpecidfy.61:32| :skolemid |4087| :pattern ( (|BetreeSpec.__default.BufferDefinesValue#requires| |log#0@@0| |value#0@@5|)) )))
(assert  (=> true (forall ((|log#0@@1| T@U) (|value#0@@6| T@U) ) (!  (=> (and (and (= (type |log#0@@1|) DatatypeTypeType) (= (type |value#0@@6|) (SeqType BoxType))) (or (|BetreeSpec.__default.BufferDefinesValue#canCall| |log#0@@1| |value#0@@6|) (and ($Is |log#0@@1| Tclass.ValueMessage.Message) ($Is |value#0@@6| Tclass.ValueType.Value)))) (and (|BetreeSpec.__default.BufferIsDefining#canCall| |log#0@@1|) (= (BetreeSpec.__default.BufferDefinesValue |log#0@@1| |value#0@@6|)  (and (BetreeSpec.__default.BufferIsDefining |log#0@@1|) (|Seq#Equal| (ValueMessage.Message.value |log#0@@1|) |value#0@@6|))))) :qid |BetreeSpecidfy.61:32| :skolemid |4088| :pattern ( (BetreeSpec.__default.BufferDefinesValue |log#0@@1| |value#0@@6|)) ))))
(assert  (=> true (forall ((|log#0@@2| T@U) (|value#0@@7| T@U) ) (!  (=> (and (and (= (type |log#0@@2|) DatatypeTypeType) (= (type |value#0@@7|) (SeqType BoxType))) (or (|BetreeSpec.__default.BufferDefinesValue#canCall| (Lit |log#0@@2|) (Lit |value#0@@7|)) (and ($Is |log#0@@2| Tclass.ValueMessage.Message) ($Is |value#0@@7| Tclass.ValueType.Value)))) (and (|BetreeSpec.__default.BufferIsDefining#canCall| (Lit |log#0@@2|)) (= (BetreeSpec.__default.BufferDefinesValue (Lit |log#0@@2|) (Lit |value#0@@7|))  (and (BetreeSpec.__default.BufferIsDefining (Lit |log#0@@2|)) (|Seq#Equal| (ValueMessage.Message.value (Lit |log#0@@2|)) |value#0@@7|))))) :qid |BetreeSpecidfy.61:32| :weight 3 :skolemid |4089| :pattern ( (BetreeSpec.__default.BufferDefinesValue (Lit |log#0@@2|) (Lit |value#0@@7|))) ))))
(assert  (=> true (forall ((|node#0@@3| T@U) ) (!  (=> (and (= (type |node#0@@3|) DatatypeTypeType) (or (|BetreeSpec.__default.WFNode#canCall| |node#0@@3|) ($Is |node#0@@3| Tclass.BetreeGraph.Node))) true) :qid |BetreeSpecidfy.66:20| :skolemid |4090| :pattern ( (BetreeSpec.__default.WFNode |node#0@@3|)) ))))
(assert (forall ((|node#0@@4| T@U) ) (!  (=> (and (= (type |node#0@@4|) DatatypeTypeType) ($Is |node#0@@4| Tclass.BetreeGraph.Node)) (= (|BetreeSpec.__default.WFNode#requires| |node#0@@4|) true)) :qid |BetreeSpecidfy.66:20| :skolemid |4091| :pattern ( (|BetreeSpec.__default.WFNode#requires| |node#0@@4|)) )))
(assert  (=> true (forall ((|node#0@@5| T@U) ) (!  (=> (and (= (type |node#0@@5|) DatatypeTypeType) (or (|BetreeSpec.__default.WFNode#canCall| |node#0@@5|) ($Is |node#0@@5| Tclass.BetreeGraph.Node))) (and (and (BetreeGraph.Node.Node_q |node#0@@5|) (=> (forall ((|k#0@@62| T@U) ) (!  (=> (and (= (type |k#0@@62|) (SeqType BoxType)) ($Is |k#0@@62| Tclass.KeyType.Key)) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.buffer |node#0@@5|)) ($Box |k#0@@62|)))) :qid |BetreeSpecidfy.67:16| :skolemid |4095| :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.buffer |node#0@@5|)) ($Box |k#0@@62|))) )) (forall ((|k#1@@12| T@U) ) (!  (=> (and (= (type |k#1@@12|) (SeqType BoxType)) ($Is |k#1@@12| Tclass.KeyType.Key)) (and (BetreeGraph.Node.Node_q |node#0@@5|) (=> (not (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children |node#0@@5|)) ($Box |k#1@@12|)))) (and (BetreeGraph.Node.Node_q |node#0@@5|) (|BetreeSpec.__default.BufferIsDefining#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeGraph.Node.buffer |node#0@@5|)) ($Box |k#1@@12|)))))))) :qid |BetreeSpecidfy.68:16| :skolemid |4094| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeGraph.Node.buffer |node#0@@5|)) ($Box |k#1@@12|)))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children |node#0@@5|)) ($Box |k#1@@12|))) )))) (= (BetreeSpec.__default.WFNode |node#0@@5|)  (and (forall ((|k#0@@63| T@U) ) (!  (=> (and (= (type |k#0@@63|) (SeqType BoxType)) ($Is |k#0@@63| Tclass.KeyType.Key)) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.buffer |node#0@@5|)) ($Box |k#0@@63|)))) :qid |BetreeSpecidfy.67:16| :skolemid |4092| :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.buffer |node#0@@5|)) ($Box |k#0@@63|))) )) (forall ((|k#1@@13| T@U) ) (!  (=> (and (and (= (type |k#1@@13|) (SeqType BoxType)) ($Is |k#1@@13| Tclass.KeyType.Key)) (not (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children |node#0@@5|)) ($Box |k#1@@13|))))) (BetreeSpec.__default.BufferIsDefining ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeGraph.Node.buffer |node#0@@5|)) ($Box |k#1@@13|))))) :qid |BetreeSpecidfy.68:16| :skolemid |4093| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeGraph.Node.buffer |node#0@@5|)) ($Box |k#1@@13|)))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children |node#0@@5|)) ($Box |k#1@@13|))) )))))) :qid |BetreeSpecidfy.66:20| :skolemid |4096| :pattern ( (BetreeSpec.__default.WFNode |node#0@@5|)) ))))
(assert  (=> true (forall ((|node#0@@6| T@U) ) (!  (=> (and (= (type |node#0@@6|) DatatypeTypeType) (or (|BetreeSpec.__default.WFNode#canCall| (Lit |node#0@@6|)) ($Is |node#0@@6| Tclass.BetreeGraph.Node))) (and (and (BetreeGraph.Node.Node_q (Lit |node#0@@6|)) (=> (forall ((|k#2@@8| T@U) ) (!  (=> (and (= (type |k#2@@8|) (SeqType BoxType)) ($Is |k#2@@8| Tclass.KeyType.Key)) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.buffer (Lit |node#0@@6|))) ($Box |k#2@@8|)))) :qid |BetreeSpecidfy.67:16| :skolemid |4100| :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.buffer |node#0@@6|)) ($Box |k#2@@8|))) )) (forall ((|k#3@@1| T@U) ) (!  (=> (and (= (type |k#3@@1|) (SeqType BoxType)) ($Is |k#3@@1| Tclass.KeyType.Key)) (and (BetreeGraph.Node.Node_q (Lit |node#0@@6|)) (=> (not (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (Lit |node#0@@6|))) ($Box |k#3@@1|)))) (and (BetreeGraph.Node.Node_q (Lit |node#0@@6|)) (|BetreeSpec.__default.BufferIsDefining#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.buffer (Lit |node#0@@6|)))) ($Box |k#3@@1|)))))))) :qid |BetreeSpecidfy.68:16| :skolemid |4099| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeGraph.Node.buffer |node#0@@6|)) ($Box |k#3@@1|)))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children |node#0@@6|)) ($Box |k#3@@1|))) )))) (= (BetreeSpec.__default.WFNode (Lit |node#0@@6|))  (and (forall ((|k#2@@9| T@U) ) (!  (=> (and (= (type |k#2@@9|) (SeqType BoxType)) ($Is |k#2@@9| Tclass.KeyType.Key)) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.buffer (Lit |node#0@@6|))) ($Box |k#2@@9|)))) :qid |BetreeSpecidfy.67:16| :skolemid |4097| :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.buffer |node#0@@6|)) ($Box |k#2@@9|))) )) (forall ((|k#3@@2| T@U) ) (!  (=> (and (and (= (type |k#3@@2|) (SeqType BoxType)) ($Is |k#3@@2| Tclass.KeyType.Key)) (not (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (Lit |node#0@@6|))) ($Box |k#3@@2|))))) (BetreeSpec.__default.BufferIsDefining ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.buffer (Lit |node#0@@6|)))) ($Box |k#3@@2|))))) :qid |BetreeSpecidfy.68:16| :skolemid |4098| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeGraph.Node.buffer |node#0@@6|)) ($Box |k#3@@2|)))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children |node#0@@6|)) ($Box |k#3@@2|))) )))))) :qid |BetreeSpecidfy.66:20| :weight 3 :skolemid |4101| :pattern ( (BetreeSpec.__default.WFNode (Lit |node#0@@6|))) ))))
(assert  (=> true (forall ((|lookup#0| T@U) (|idx#0| Int) ) (!  (=> (and (= (type |lookup#0|) (SeqType BoxType)) (or (|BetreeSpec.__default.ValidLayerIndex#canCall| |lookup#0| |idx#0|) ($Is |lookup#0| (TSeq Tclass.BetreeGraph.ReadOp)))) true) :qid |BetreeSpecidfy.78:29| :skolemid |4102| :pattern ( (BetreeSpec.__default.ValidLayerIndex |lookup#0| |idx#0|)) ))))
(assert (forall ((|lookup#0@@0| T@U) (|idx#0@@0| Int) ) (!  (=> (and (= (type |lookup#0@@0|) (SeqType BoxType)) ($Is |lookup#0@@0| (TSeq Tclass.BetreeGraph.ReadOp))) (= (|BetreeSpec.__default.ValidLayerIndex#requires| |lookup#0@@0| |idx#0@@0|) true)) :qid |BetreeSpecidfy.78:29| :skolemid |4103| :pattern ( (|BetreeSpec.__default.ValidLayerIndex#requires| |lookup#0@@0| |idx#0@@0|)) )))
(assert  (=> true (forall ((|lookup#0@@1| T@U) (|idx#0@@1| Int) ) (!  (=> (and (= (type |lookup#0@@1|) (SeqType BoxType)) (or (|BetreeSpec.__default.ValidLayerIndex#canCall| |lookup#0@@1| |idx#0@@1|) ($Is |lookup#0@@1| (TSeq Tclass.BetreeGraph.ReadOp)))) (= (BetreeSpec.__default.ValidLayerIndex |lookup#0@@1| |idx#0@@1|)  (and true (and (<= (LitInt 0) |idx#0@@1|) (< |idx#0@@1| (|Seq#Length| |lookup#0@@1|)))))) :qid |BetreeSpecidfy.78:29| :skolemid |4104| :pattern ( (BetreeSpec.__default.ValidLayerIndex |lookup#0@@1| |idx#0@@1|)) ))))
(assert  (=> true (forall ((|lookup#0@@2| T@U) (|idx#0@@2| Int) ) (!  (=> (and (= (type |lookup#0@@2|) (SeqType BoxType)) (or (|BetreeSpec.__default.ValidLayerIndex#canCall| (Lit |lookup#0@@2|) (LitInt |idx#0@@2|)) ($Is |lookup#0@@2| (TSeq Tclass.BetreeGraph.ReadOp)))) (= (BetreeSpec.__default.ValidLayerIndex (Lit |lookup#0@@2|) (LitInt |idx#0@@2|))  (and true (and (<= (LitInt 0) (LitInt |idx#0@@2|)) (< |idx#0@@2| (|Seq#Length| (Lit |lookup#0@@2|))))))) :qid |BetreeSpecidfy.78:29| :weight 3 :skolemid |4105| :pattern ( (BetreeSpec.__default.ValidLayerIndex (Lit |lookup#0@@2|) (LitInt |idx#0@@2|))) ))))
(assert  (=> true (forall ((|lookup#0@@3| T@U) ) (!  (=> (and (= (type |lookup#0@@3|) (SeqType BoxType)) (or (|BetreeSpec.__default.LookupVisitsWFNodes#canCall| |lookup#0@@3|) ($Is |lookup#0@@3| (TSeq Tclass.BetreeGraph.ReadOp)))) true) :qid |BetreeSpecidfy.82:33| :skolemid |4106| :pattern ( (BetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@3|)) ))))
(assert (forall ((|lookup#0@@4| T@U) ) (!  (=> (and (= (type |lookup#0@@4|) (SeqType BoxType)) ($Is |lookup#0@@4| (TSeq Tclass.BetreeGraph.ReadOp))) (= (|BetreeSpec.__default.LookupVisitsWFNodes#requires| |lookup#0@@4|) true)) :qid |BetreeSpecidfy.82:33| :skolemid |4107| :pattern ( (|BetreeSpec.__default.LookupVisitsWFNodes#requires| |lookup#0@@4|)) )))
(assert  (=> true (forall ((|lookup#0@@5| T@U) ) (!  (=> (and (= (type |lookup#0@@5|) (SeqType BoxType)) (or (|BetreeSpec.__default.LookupVisitsWFNodes#canCall| |lookup#0@@5|) ($Is |lookup#0@@5| (TSeq Tclass.BetreeGraph.ReadOp)))) (and (forall ((|i#0@@122| Int) ) (!  (=> (<= (LitInt 0) |i#0@@122|) (=> (< |i#0@@122| (|Seq#Length| |lookup#0@@5|)) (and (BetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@5| |i#0@@122|))) (|BetreeSpec.__default.WFNode#canCall| (BetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@5| |i#0@@122|))))))) :qid |BetreeSpecidfy.83:12| :skolemid |4109| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@5| |i#0@@122|))) )) (= (BetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@5|) (forall ((|i#0@@123| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@123|) (< |i#0@@123| (|Seq#Length| |lookup#0@@5|))) (BetreeSpec.__default.WFNode (BetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@5| |i#0@@123|)))))) :qid |BetreeSpecidfy.83:12| :skolemid |4108| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@5| |i#0@@123|))) ))))) :qid |BetreeSpecidfy.82:33| :skolemid |4110| :pattern ( (BetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@5|)) ))))
(assert  (=> true (forall ((|lookup#0@@6| T@U) ) (!  (=> (and (= (type |lookup#0@@6|) (SeqType BoxType)) (or (|BetreeSpec.__default.LookupVisitsWFNodes#canCall| (Lit |lookup#0@@6|)) ($Is |lookup#0@@6| (TSeq Tclass.BetreeGraph.ReadOp)))) (and (forall ((|i#1@@48| Int) ) (!  (=> (<= (LitInt 0) |i#1@@48|) (=> (< |i#1@@48| (|Seq#Length| (Lit |lookup#0@@6|))) (and (BetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@6|) |i#1@@48|))) (|BetreeSpec.__default.WFNode#canCall| (BetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@6|) |i#1@@48|))))))) :qid |BetreeSpecidfy.83:12| :skolemid |4112| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@6| |i#1@@48|))) )) (= (BetreeSpec.__default.LookupVisitsWFNodes (Lit |lookup#0@@6|)) (forall ((|i#1@@49| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@49|) (< |i#1@@49| (|Seq#Length| (Lit |lookup#0@@6|)))) (BetreeSpec.__default.WFNode (BetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@6|) |i#1@@49|)))))) :qid |BetreeSpecidfy.83:12| :skolemid |4111| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@6| |i#1@@49|))) ))))) :qid |BetreeSpecidfy.82:33| :weight 3 :skolemid |4113| :pattern ( (BetreeSpec.__default.LookupVisitsWFNodes (Lit |lookup#0@@6|))) ))))
(assert  (=> true (forall ((|key#0@@132| T@U) (|lookup#0@@7| T@U) (|idx#0@@3| Int) ) (!  (=> (and (and (= (type |key#0@@132|) (SeqType BoxType)) (= (type |lookup#0@@7|) (SeqType BoxType))) (or (|BetreeSpec.__default.LookupFollowsChildRefAtLayer#canCall| |key#0@@132| |lookup#0@@7| |idx#0@@3|) (and (and ($Is |key#0@@132| Tclass.KeyType.Key) ($Is |lookup#0@@7| (TSeq Tclass.BetreeGraph.ReadOp))) (and (<= (LitInt 0) |idx#0@@3|) (< |idx#0@@3| (- (|Seq#Length| |lookup#0@@7|) 1)))))) true) :qid |BetreeSpecidfy.86:42| :skolemid |4114| :pattern ( (BetreeSpec.__default.LookupFollowsChildRefAtLayer |key#0@@132| |lookup#0@@7| |idx#0@@3|)) ))))
(assert (forall ((|key#0@@133| T@U) (|lookup#0@@8| T@U) (|idx#0@@4| Int) ) (!  (=> (and (and (= (type |key#0@@133|) (SeqType BoxType)) (= (type |lookup#0@@8|) (SeqType BoxType))) (and ($Is |key#0@@133| Tclass.KeyType.Key) ($Is |lookup#0@@8| (TSeq Tclass.BetreeGraph.ReadOp)))) (= (|BetreeSpec.__default.LookupFollowsChildRefAtLayer#requires| |key#0@@133| |lookup#0@@8| |idx#0@@4|)  (and (<= (LitInt 0) |idx#0@@4|) (< |idx#0@@4| (- (|Seq#Length| |lookup#0@@8|) 1))))) :qid |BetreeSpecidfy.86:42| :skolemid |4115| :pattern ( (|BetreeSpec.__default.LookupFollowsChildRefAtLayer#requires| |key#0@@133| |lookup#0@@8| |idx#0@@4|)) )))
(assert  (=> true (forall ((|key#0@@134| T@U) (|lookup#0@@9| T@U) (|idx#0@@5| Int) ) (!  (=> (and (and (= (type |key#0@@134|) (SeqType BoxType)) (= (type |lookup#0@@9|) (SeqType BoxType))) (or (|BetreeSpec.__default.LookupFollowsChildRefAtLayer#canCall| |key#0@@134| |lookup#0@@9| |idx#0@@5|) (and (and ($Is |key#0@@134| Tclass.KeyType.Key) ($Is |lookup#0@@9| (TSeq Tclass.BetreeGraph.ReadOp))) (and (<= (LitInt 0) |idx#0@@5|) (< |idx#0@@5| (- (|Seq#Length| |lookup#0@@9|) 1)))))) (and (and (and (and (BetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@9| |idx#0@@5|))) (BetreeGraph.Node.Node_q (BetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@9| |idx#0@@5|))))) (BetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@9| (+ |idx#0@@5| 1))))) (|Maps.__default.IMapsTo#canCall| Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (BetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@9| |idx#0@@5|)))) ($Box |key#0@@134|) (BetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@9| (+ |idx#0@@5| 1)))))) (= (BetreeSpec.__default.LookupFollowsChildRefAtLayer |key#0@@134| |lookup#0@@9| |idx#0@@5|) (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (BetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@9| |idx#0@@5|)))) ($Box |key#0@@134|) (BetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@9| (+ |idx#0@@5| 1)))))))) :qid |BetreeSpecidfy.86:42| :skolemid |4116| :pattern ( (BetreeSpec.__default.LookupFollowsChildRefAtLayer |key#0@@134| |lookup#0@@9| |idx#0@@5|)) ))))
(assert  (=> true (forall ((|key#0@@135| T@U) (|lookup#0@@10| T@U) (|idx#0@@6| Int) ) (!  (=> (and (and (= (type |key#0@@135|) (SeqType BoxType)) (= (type |lookup#0@@10|) (SeqType BoxType))) (or (|BetreeSpec.__default.LookupFollowsChildRefAtLayer#canCall| (Lit |key#0@@135|) (Lit |lookup#0@@10|) (LitInt |idx#0@@6|)) (and (and ($Is |key#0@@135| Tclass.KeyType.Key) ($Is |lookup#0@@10| (TSeq Tclass.BetreeGraph.ReadOp))) (and (<= (LitInt 0) (LitInt |idx#0@@6|)) (< |idx#0@@6| (- (|Seq#Length| (Lit |lookup#0@@10|)) 1)))))) (and (and (and (and (BetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@10|) (LitInt |idx#0@@6|)))) (BetreeGraph.Node.Node_q (BetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@10|) (LitInt |idx#0@@6|)))))) (BetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@10|) (LitInt (+ |idx#0@@6| 1)))))) (|Maps.__default.IMapsTo#canCall| Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (BetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@10|) (LitInt |idx#0@@6|))))) ($Box (Lit |key#0@@135|)) (BetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@10|) (LitInt (+ |idx#0@@6| 1))))))) (= (BetreeSpec.__default.LookupFollowsChildRefAtLayer (Lit |key#0@@135|) (Lit |lookup#0@@10|) (LitInt |idx#0@@6|)) (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (BetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@10|) (LitInt |idx#0@@6|))))) ($Box (Lit |key#0@@135|)) (BetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@10|) (LitInt (+ |idx#0@@6| 1))))))))) :qid |BetreeSpecidfy.86:42| :weight 3 :skolemid |4117| :pattern ( (BetreeSpec.__default.LookupFollowsChildRefAtLayer (Lit |key#0@@135|) (Lit |lookup#0@@10|) (LitInt |idx#0@@6|))) ))))
(assert  (=> true (forall ((|key#0@@136| T@U) (|lookup#0@@11| T@U) ) (!  (=> (and (and (= (type |key#0@@136|) (SeqType BoxType)) (= (type |lookup#0@@11|) (SeqType BoxType))) (or (|BetreeSpec.__default.LookupFollowsChildRefs#canCall| |key#0@@136| |lookup#0@@11|) (and ($Is |key#0@@136| Tclass.KeyType.Key) ($Is |lookup#0@@11| (TSeq Tclass.BetreeGraph.ReadOp))))) true) :qid |BetreeSpecidfy.92:36| :skolemid |4118| :pattern ( (BetreeSpec.__default.LookupFollowsChildRefs |key#0@@136| |lookup#0@@11|)) ))))
(assert (forall ((|key#0@@137| T@U) (|lookup#0@@12| T@U) ) (!  (=> (and (and (= (type |key#0@@137|) (SeqType BoxType)) (= (type |lookup#0@@12|) (SeqType BoxType))) (and ($Is |key#0@@137| Tclass.KeyType.Key) ($Is |lookup#0@@12| (TSeq Tclass.BetreeGraph.ReadOp)))) (= (|BetreeSpec.__default.LookupFollowsChildRefs#requires| |key#0@@137| |lookup#0@@12|) true)) :qid |BetreeSpecidfy.92:36| :skolemid |4119| :pattern ( (|BetreeSpec.__default.LookupFollowsChildRefs#requires| |key#0@@137| |lookup#0@@12|)) )))
(assert  (=> true (forall ((|key#0@@138| T@U) (|lookup#0@@13| T@U) ) (!  (=> (and (and (= (type |key#0@@138|) (SeqType BoxType)) (= (type |lookup#0@@13|) (SeqType BoxType))) (or (|BetreeSpec.__default.LookupFollowsChildRefs#canCall| |key#0@@138| |lookup#0@@13|) (and ($Is |key#0@@138| Tclass.KeyType.Key) ($Is |lookup#0@@13| (TSeq Tclass.BetreeGraph.ReadOp))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|idx#0@@7| Int) ) (!  (=> (<= (LitInt 0) |idx#0@@7|) (=> (< |idx#0@@7| (- (|Seq#Length| |lookup#0@@13|) 1)) (|BetreeSpec.__default.LookupFollowsChildRefAtLayer#canCall| |key#0@@138| |lookup#0@@13| |idx#0@@7|))) :qid |BetreeSpecidfy.94:16| :skolemid |4121| :pattern ( (BetreeSpec.__default.LookupFollowsChildRefAtLayer |key#0@@138| |lookup#0@@13| |idx#0@@7|)) ))) (= (BetreeSpec.__default.LookupFollowsChildRefs |key#0@@138| |lookup#0@@13|)  (and true (forall ((|idx#0@@8| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |idx#0@@8|) (< |idx#0@@8| (- (|Seq#Length| |lookup#0@@13|) 1))) (BetreeSpec.__default.LookupFollowsChildRefAtLayer |key#0@@138| |lookup#0@@13| |idx#0@@8|))) :qid |BetreeSpecidfy.94:16| :skolemid |4120| :pattern ( (BetreeSpec.__default.LookupFollowsChildRefAtLayer |key#0@@138| |lookup#0@@13| |idx#0@@8|)) )))))) :qid |BetreeSpecidfy.92:36| :skolemid |4122| :pattern ( (BetreeSpec.__default.LookupFollowsChildRefs |key#0@@138| |lookup#0@@13|)) ))))
(assert  (=> true (forall ((|key#0@@139| T@U) (|lookup#0@@14| T@U) ) (!  (=> (and (and (= (type |key#0@@139|) (SeqType BoxType)) (= (type |lookup#0@@14|) (SeqType BoxType))) (or (|BetreeSpec.__default.LookupFollowsChildRefs#canCall| (Lit |key#0@@139|) (Lit |lookup#0@@14|)) (and ($Is |key#0@@139| Tclass.KeyType.Key) ($Is |lookup#0@@14| (TSeq Tclass.BetreeGraph.ReadOp))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|idx#1| Int) ) (!  (=> (<= (LitInt 0) |idx#1|) (=> (< |idx#1| (- (|Seq#Length| (Lit |lookup#0@@14|)) 1)) (|BetreeSpec.__default.LookupFollowsChildRefAtLayer#canCall| (Lit |key#0@@139|) (Lit |lookup#0@@14|) |idx#1|))) :qid |BetreeSpecidfy.94:16| :skolemid |4124| :pattern ( (BetreeSpec.__default.LookupFollowsChildRefAtLayer |key#0@@139| |lookup#0@@14| |idx#1|)) ))) (= (BetreeSpec.__default.LookupFollowsChildRefs (Lit |key#0@@139|) (Lit |lookup#0@@14|))  (and true (forall ((|idx#1@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |idx#1@@0|) (< |idx#1@@0| (- (|Seq#Length| (Lit |lookup#0@@14|)) 1))) (BetreeSpec.__default.LookupFollowsChildRefAtLayer (Lit |key#0@@139|) (Lit |lookup#0@@14|) |idx#1@@0|))) :qid |BetreeSpecidfy.94:16| :skolemid |4123| :pattern ( (BetreeSpec.__default.LookupFollowsChildRefAtLayer |key#0@@139| |lookup#0@@14| |idx#1@@0|)) )))))) :qid |BetreeSpecidfy.92:36| :weight 3 :skolemid |4125| :pattern ( (BetreeSpec.__default.LookupFollowsChildRefs (Lit |key#0@@139|) (Lit |lookup#0@@14|))) ))))
(assert  (=> true (forall ((|lookup#0@@15| T@U) (|key#0@@140| T@U) ) (!  (=> (and (and (= (type |lookup#0@@15|) (SeqType BoxType)) (= (type |key#0@@140|) (SeqType BoxType))) (or (|BetreeSpec.__default.WFLookupForKey#canCall| |lookup#0@@15| |key#0@@140|) (and ($Is |lookup#0@@15| (TSeq Tclass.BetreeGraph.ReadOp)) ($Is |key#0@@140| Tclass.KeyType.Key)))) true) :qid |BetreeSpecidfy.97:28| :skolemid |4126| :pattern ( (BetreeSpec.__default.WFLookupForKey |lookup#0@@15| |key#0@@140|)) ))))
(assert (forall ((|lookup#0@@16| T@U) (|key#0@@141| T@U) ) (!  (=> (and (and (= (type |lookup#0@@16|) (SeqType BoxType)) (= (type |key#0@@141|) (SeqType BoxType))) (and ($Is |lookup#0@@16| (TSeq Tclass.BetreeGraph.ReadOp)) ($Is |key#0@@141| Tclass.KeyType.Key))) (= (|BetreeSpec.__default.WFLookupForKey#requires| |lookup#0@@16| |key#0@@141|) true)) :qid |BetreeSpecidfy.97:28| :skolemid |4127| :pattern ( (|BetreeSpec.__default.WFLookupForKey#requires| |lookup#0@@16| |key#0@@141|)) )))
(assert  (=> true (forall ((|lookup#0@@17| T@U) (|key#0@@142| T@U) ) (!  (=> (and (and (= (type |lookup#0@@17|) (SeqType BoxType)) (= (type |key#0@@142|) (SeqType BoxType))) (or (|BetreeSpec.__default.WFLookupForKey#canCall| |lookup#0@@17| |key#0@@142|) (and ($Is |lookup#0@@17| (TSeq Tclass.BetreeGraph.ReadOp)) ($Is |key#0@@142| Tclass.KeyType.Key)))) (and (=> (> (|Seq#Length| |lookup#0@@17|) 0) (and (and (BetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@17| (LitInt 0)))) |BetreeGraph.__default.Root#canCall|) (=> (= (BetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@17| (LitInt 0)))) (Lit BetreeGraph.__default.Root)) (and (|BetreeSpec.__default.LookupFollowsChildRefs#canCall| |key#0@@142| |lookup#0@@17|) (=> (BetreeSpec.__default.LookupFollowsChildRefs |key#0@@142| |lookup#0@@17|) (|BetreeSpec.__default.LookupVisitsWFNodes#canCall| |lookup#0@@17|)))))) (= (BetreeSpec.__default.WFLookupForKey |lookup#0@@17| |key#0@@142|)  (and (and (and (> (|Seq#Length| |lookup#0@@17|) 0) (= (BetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@17| (LitInt 0)))) (Lit BetreeGraph.__default.Root))) (BetreeSpec.__default.LookupFollowsChildRefs |key#0@@142| |lookup#0@@17|)) (BetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@17|))))) :qid |BetreeSpecidfy.97:28| :skolemid |4128| :pattern ( (BetreeSpec.__default.WFLookupForKey |lookup#0@@17| |key#0@@142|)) ))))
(assert  (=> true (forall ((|lookup#0@@18| T@U) (|key#0@@143| T@U) ) (!  (=> (and (and (= (type |lookup#0@@18|) (SeqType BoxType)) (= (type |key#0@@143|) (SeqType BoxType))) (or (|BetreeSpec.__default.WFLookupForKey#canCall| (Lit |lookup#0@@18|) (Lit |key#0@@143|)) (and ($Is |lookup#0@@18| (TSeq Tclass.BetreeGraph.ReadOp)) ($Is |key#0@@143| Tclass.KeyType.Key)))) (and (=> (> (|Seq#Length| (Lit |lookup#0@@18|)) 0) (and (and (BetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@18|) (LitInt 0)))) |BetreeGraph.__default.Root#canCall|) (=> (= (BetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@18|) (LitInt 0)))) (Lit BetreeGraph.__default.Root)) (and (|BetreeSpec.__default.LookupFollowsChildRefs#canCall| (Lit |key#0@@143|) (Lit |lookup#0@@18|)) (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.__default.LookupFollowsChildRefs (Lit |key#0@@143|) (Lit |lookup#0@@18|))))) (|BetreeSpec.__default.LookupVisitsWFNodes#canCall| (Lit |lookup#0@@18|))))))) (= (BetreeSpec.__default.WFLookupForKey (Lit |lookup#0@@18|) (Lit |key#0@@143|))  (and (and (and (> (|Seq#Length| (Lit |lookup#0@@18|)) 0) (= (BetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@18|) (LitInt 0)))) (Lit BetreeGraph.__default.Root))) (BetreeSpec.__default.LookupFollowsChildRefs (Lit |key#0@@143|) (Lit |lookup#0@@18|))) (BetreeSpec.__default.LookupVisitsWFNodes (Lit |lookup#0@@18|)))))) :qid |BetreeSpecidfy.97:28| :weight 3 :skolemid |4129| :pattern ( (BetreeSpec.__default.WFLookupForKey (Lit |lookup#0@@18|) (Lit |key#0@@143|))) ))))
(assert (forall ((arg0@@690 T@U) (arg1@@322 T@U) (arg2@@191 T@U) ) (! (= (type (BetreeSpec.__default.InterpretLookup arg0@@690 arg1@@322 arg2@@191)) DatatypeTypeType) :qid |funType:BetreeSpec.__default.InterpretLookup| :pattern ( (BetreeSpec.__default.InterpretLookup arg0@@690 arg1@@322 arg2@@191)) )))
(assert (forall (($ly@@535 T@U) (|lookup#0@@19| T@U) (|key#0@@144| T@U) ) (!  (=> (and (and (= (type $ly@@535) LayerTypeType) (= (type |lookup#0@@19|) (SeqType BoxType))) (= (type |key#0@@144|) (SeqType BoxType))) (= (BetreeSpec.__default.InterpretLookup ($LS $ly@@535) |lookup#0@@19| |key#0@@144|) (BetreeSpec.__default.InterpretLookup $ly@@535 |lookup#0@@19| |key#0@@144|))) :qid |BetreeSpecidfy.105:12| :skolemid |4130| :pattern ( (BetreeSpec.__default.InterpretLookup ($LS $ly@@535) |lookup#0@@19| |key#0@@144|)) )))
(assert (forall (($ly@@536 T@U) (|lookup#0@@20| T@U) (|key#0@@145| T@U) ) (!  (=> (and (and (= (type $ly@@536) LayerTypeType) (= (type |lookup#0@@20|) (SeqType BoxType))) (= (type |key#0@@145|) (SeqType BoxType))) (= (BetreeSpec.__default.InterpretLookup $ly@@536 |lookup#0@@20| |key#0@@145|) (BetreeSpec.__default.InterpretLookup $LZ |lookup#0@@20| |key#0@@145|))) :qid |BetreeSpecidfy.105:12| :skolemid |4131| :pattern ( (BetreeSpec.__default.InterpretLookup (AsFuelBottom $ly@@536) |lookup#0@@20| |key#0@@145|)) )))
(assert  (=> true (forall (($ly@@537 T@U) (|lookup#0@@21| T@U) (|key#0@@146| T@U) ) (!  (=> (and (and (and (= (type $ly@@537) LayerTypeType) (= (type |lookup#0@@21|) (SeqType BoxType))) (= (type |key#0@@146|) (SeqType BoxType))) (or (|BetreeSpec.__default.InterpretLookup#canCall| |lookup#0@@21| |key#0@@146|) (and (and ($Is |lookup#0@@21| (TSeq Tclass.BetreeGraph.ReadOp)) ($Is |key#0@@146| Tclass.KeyType.Key)) (BetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@21|)))) ($Is (BetreeSpec.__default.InterpretLookup $ly@@537 |lookup#0@@21| |key#0@@146|) Tclass.ValueMessage.Message)) :qid |BetreeSpecidfy.105:12| :skolemid |4132| :pattern ( (BetreeSpec.__default.InterpretLookup $ly@@537 |lookup#0@@21| |key#0@@146|)) ))))
(assert (forall (($ly@@538 T@U) (|lookup#0@@22| T@U) (|key#0@@147| T@U) ) (!  (=> (and (and (and (= (type $ly@@538) LayerTypeType) (= (type |lookup#0@@22|) (SeqType BoxType))) (= (type |key#0@@147|) (SeqType BoxType))) (and ($Is |lookup#0@@22| (TSeq Tclass.BetreeGraph.ReadOp)) ($Is |key#0@@147| Tclass.KeyType.Key))) (= (|BetreeSpec.__default.InterpretLookup#requires| $ly@@538 |lookup#0@@22| |key#0@@147|) (BetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@22|))) :qid |BetreeSpecidfy.105:12| :skolemid |4133| :pattern ( (|BetreeSpec.__default.InterpretLookup#requires| $ly@@538 |lookup#0@@22| |key#0@@147|)) )))
(assert  (=> true (forall (($ly@@539 T@U) (|lookup#0@@23| T@U) (|key#0@@148| T@U) ) (!  (=> (and (and (and (= (type $ly@@539) LayerTypeType) (= (type |lookup#0@@23|) (SeqType BoxType))) (= (type |key#0@@148|) (SeqType BoxType))) (or (|BetreeSpec.__default.InterpretLookup#canCall| |lookup#0@@23| |key#0@@148|) (and (and ($Is |lookup#0@@23| (TSeq Tclass.BetreeGraph.ReadOp)) ($Is |key#0@@148| Tclass.KeyType.Key)) (BetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@23|)))) (and (and (=> (= (|Seq#Length| |lookup#0@@23|) (LitInt 0)) |ValueMessage.__default.NopDelta#canCall|) (=> (not (= (|Seq#Length| |lookup#0@@23|) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Tclass.BetreeGraph.ReadOp |lookup#0@@23|) (|BetreeSpec.__default.InterpretLookup#canCall| (Sequences.__default.DropLast Tclass.BetreeGraph.ReadOp |lookup#0@@23|) |key#0@@148|)) (and (and (|Sequences.__default.Last#canCall| Tclass.BetreeGraph.ReadOp |lookup#0@@23|) (BetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BetreeGraph.ReadOp |lookup#0@@23|)))) (BetreeGraph.Node.Node_q (BetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BetreeGraph.ReadOp |lookup#0@@23|)))))) (|ValueMessage.__default.Merge#canCall| (BetreeSpec.__default.InterpretLookup $ly@@539 (Sequences.__default.DropLast Tclass.BetreeGraph.ReadOp |lookup#0@@23|) |key#0@@148|) ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeGraph.Node.buffer (BetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BetreeGraph.ReadOp |lookup#0@@23|))))) ($Box |key#0@@148|))))))) (= (BetreeSpec.__default.InterpretLookup ($LS $ly@@539) |lookup#0@@23| |key#0@@148|) (ite (= (|Seq#Length| |lookup#0@@23|) (LitInt 0)) (|#ValueMessage.Message.Update| (Lit ValueMessage.__default.NopDelta)) (ValueMessage.__default.Merge (BetreeSpec.__default.InterpretLookup $ly@@539 (Sequences.__default.DropLast Tclass.BetreeGraph.ReadOp |lookup#0@@23|) |key#0@@148|) ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeGraph.Node.buffer (BetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BetreeGraph.ReadOp |lookup#0@@23|))))) ($Box |key#0@@148|)))))))) :qid |BetreeSpecidfy.105:12| :skolemid |4134| :pattern ( (BetreeSpec.__default.InterpretLookup ($LS $ly@@539) |lookup#0@@23| |key#0@@148|)) ))))
(assert  (=> true (forall (($ly@@540 T@U) (|lookup#0@@24| T@U) (|key#0@@149| T@U) ) (!  (=> (and (and (and (= (type $ly@@540) LayerTypeType) (= (type |lookup#0@@24|) (SeqType BoxType))) (= (type |key#0@@149|) (SeqType BoxType))) (or (|BetreeSpec.__default.InterpretLookup#canCall| (Lit |lookup#0@@24|) (Lit |key#0@@149|)) (and (and ($Is |lookup#0@@24| (TSeq Tclass.BetreeGraph.ReadOp)) ($Is |key#0@@149| Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U (BetreeSpec.__default.LookupVisitsWFNodes (Lit |lookup#0@@24|)))))))) (and (and (=> (= (|Seq#Length| (Lit |lookup#0@@24|)) (LitInt 0)) |ValueMessage.__default.NopDelta#canCall|) (=> (not (= (|Seq#Length| (Lit |lookup#0@@24|)) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Tclass.BetreeGraph.ReadOp (Lit |lookup#0@@24|)) (|BetreeSpec.__default.InterpretLookup#canCall| (Lit (Sequences.__default.DropLast Tclass.BetreeGraph.ReadOp (Lit |lookup#0@@24|))) (Lit |key#0@@149|))) (and (and (|Sequences.__default.Last#canCall| Tclass.BetreeGraph.ReadOp (Lit |lookup#0@@24|)) (BetreeGraph.ReadOp.ReadOp_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BetreeGraph.ReadOp (Lit |lookup#0@@24|)))))) (BetreeGraph.Node.Node_q (Lit (BetreeGraph.ReadOp.node (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BetreeGraph.ReadOp (Lit |lookup#0@@24|))))))))) (|ValueMessage.__default.Merge#canCall| (Lit (BetreeSpec.__default.InterpretLookup ($LS $ly@@540) (Lit (Sequences.__default.DropLast Tclass.BetreeGraph.ReadOp (Lit |lookup#0@@24|))) (Lit |key#0@@149|))) ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.buffer (Lit (BetreeGraph.ReadOp.node (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BetreeGraph.ReadOp (Lit |lookup#0@@24|))))))))) ($Box (Lit |key#0@@149|)))))))) (= (BetreeSpec.__default.InterpretLookup ($LS $ly@@540) (Lit |lookup#0@@24|) (Lit |key#0@@149|)) (ite (= (|Seq#Length| (Lit |lookup#0@@24|)) (LitInt 0)) (|#ValueMessage.Message.Update| (Lit ValueMessage.__default.NopDelta)) (ValueMessage.__default.Merge (Lit (BetreeSpec.__default.InterpretLookup ($LS $ly@@540) (Lit (Sequences.__default.DropLast Tclass.BetreeGraph.ReadOp (Lit |lookup#0@@24|))) (Lit |key#0@@149|))) ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.buffer (Lit (BetreeGraph.ReadOp.node (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BetreeGraph.ReadOp (Lit |lookup#0@@24|))))))))) ($Box (Lit |key#0@@149|))))))))) :qid |BetreeSpecidfy.105:12| :weight 3 :skolemid |4135| :pattern ( (BetreeSpec.__default.InterpretLookup ($LS $ly@@540) (Lit |lookup#0@@24|) (Lit |key#0@@149|))) ))))
(assert  (=> true (forall ((|q#0| T@U) ) (!  (=> (and (= (type |q#0|) DatatypeTypeType) (or (|BetreeSpec.__default.ValidQuery#canCall| |q#0|) ($Is |q#0| Tclass.BetreeSpec.LookupQuery))) true) :qid |BetreeSpecidfy.115:24| :skolemid |4136| :pattern ( (BetreeSpec.__default.ValidQuery |q#0|)) ))))
(assert (forall ((|q#0@@0| T@U) ) (!  (=> (and (= (type |q#0@@0|) DatatypeTypeType) ($Is |q#0@@0| Tclass.BetreeSpec.LookupQuery)) (= (|BetreeSpec.__default.ValidQuery#requires| |q#0@@0|) true)) :qid |BetreeSpecidfy.115:24| :skolemid |4137| :pattern ( (|BetreeSpec.__default.ValidQuery#requires| |q#0@@0|)) )))
(assert  (=> true (forall ((|q#0@@1| T@U) ) (!  (=> (and (= (type |q#0@@1|) DatatypeTypeType) (or (|BetreeSpec.__default.ValidQuery#canCall| |q#0@@1|) ($Is |q#0@@1| Tclass.BetreeSpec.LookupQuery))) (and (and (and (and (BetreeSpec.LookupQuery.LookupQuery_q |q#0@@1|) (BetreeSpec.LookupQuery.LookupQuery_q |q#0@@1|)) (|BetreeSpec.__default.WFLookupForKey#canCall| (BetreeSpec.LookupQuery.lookup |q#0@@1|) (BetreeSpec.LookupQuery.key |q#0@@1|))) (=> (BetreeSpec.__default.WFLookupForKey (BetreeSpec.LookupQuery.lookup |q#0@@1|) (BetreeSpec.LookupQuery.key |q#0@@1|)) (and (and (and (and (BetreeSpec.LookupQuery.LookupQuery_q |q#0@@1|) (BetreeSpec.LookupQuery.LookupQuery_q |q#0@@1|)) (|BetreeSpec.__default.InterpretLookup#canCall| (BetreeSpec.LookupQuery.lookup |q#0@@1|) (BetreeSpec.LookupQuery.key |q#0@@1|))) (BetreeSpec.LookupQuery.LookupQuery_q |q#0@@1|)) (|BetreeSpec.__default.BufferDefinesValue#canCall| (BetreeSpec.__default.InterpretLookup ($LS $LZ) (BetreeSpec.LookupQuery.lookup |q#0@@1|) (BetreeSpec.LookupQuery.key |q#0@@1|)) (BetreeSpec.LookupQuery.value |q#0@@1|))))) (= (BetreeSpec.__default.ValidQuery |q#0@@1|)  (and (BetreeSpec.__default.WFLookupForKey (BetreeSpec.LookupQuery.lookup |q#0@@1|) (BetreeSpec.LookupQuery.key |q#0@@1|)) (BetreeSpec.__default.BufferDefinesValue (BetreeSpec.__default.InterpretLookup ($LS $LZ) (BetreeSpec.LookupQuery.lookup |q#0@@1|) (BetreeSpec.LookupQuery.key |q#0@@1|)) (BetreeSpec.LookupQuery.value |q#0@@1|)))))) :qid |BetreeSpecidfy.115:24| :skolemid |4138| :pattern ( (BetreeSpec.__default.ValidQuery |q#0@@1|)) ))))
(assert  (=> true (forall ((|q#0@@2| T@U) ) (!  (=> (and (= (type |q#0@@2|) DatatypeTypeType) (or (|BetreeSpec.__default.ValidQuery#canCall| (Lit |q#0@@2|)) ($Is |q#0@@2| Tclass.BetreeSpec.LookupQuery))) (and (and (and (and (BetreeSpec.LookupQuery.LookupQuery_q (Lit |q#0@@2|)) (BetreeSpec.LookupQuery.LookupQuery_q (Lit |q#0@@2|))) (|BetreeSpec.__default.WFLookupForKey#canCall| (Lit (BetreeSpec.LookupQuery.lookup (Lit |q#0@@2|))) (Lit (BetreeSpec.LookupQuery.key (Lit |q#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.__default.WFLookupForKey (Lit (BetreeSpec.LookupQuery.lookup (Lit |q#0@@2|))) (Lit (BetreeSpec.LookupQuery.key (Lit |q#0@@2|))))))) (and (and (and (and (BetreeSpec.LookupQuery.LookupQuery_q (Lit |q#0@@2|)) (BetreeSpec.LookupQuery.LookupQuery_q (Lit |q#0@@2|))) (|BetreeSpec.__default.InterpretLookup#canCall| (Lit (BetreeSpec.LookupQuery.lookup (Lit |q#0@@2|))) (Lit (BetreeSpec.LookupQuery.key (Lit |q#0@@2|))))) (BetreeSpec.LookupQuery.LookupQuery_q (Lit |q#0@@2|))) (|BetreeSpec.__default.BufferDefinesValue#canCall| (Lit (BetreeSpec.__default.InterpretLookup ($LS $LZ) (Lit (BetreeSpec.LookupQuery.lookup (Lit |q#0@@2|))) (Lit (BetreeSpec.LookupQuery.key (Lit |q#0@@2|))))) (Lit (BetreeSpec.LookupQuery.value (Lit |q#0@@2|))))))) (= (BetreeSpec.__default.ValidQuery (Lit |q#0@@2|)) (U_2_bool (Lit (bool_2_U  (and (BetreeSpec.__default.WFLookupForKey (Lit (BetreeSpec.LookupQuery.lookup (Lit |q#0@@2|))) (Lit (BetreeSpec.LookupQuery.key (Lit |q#0@@2|)))) (BetreeSpec.__default.BufferDefinesValue (Lit (BetreeSpec.__default.InterpretLookup ($LS $LZ) (Lit (BetreeSpec.LookupQuery.lookup (Lit |q#0@@2|))) (Lit (BetreeSpec.LookupQuery.key (Lit |q#0@@2|))))) (Lit (BetreeSpec.LookupQuery.value (Lit |q#0@@2|))))))))))) :qid |BetreeSpecidfy.115:24| :weight 3 :skolemid |4139| :pattern ( (BetreeSpec.__default.ValidQuery (Lit |q#0@@2|))) ))))
(assert (forall ((arg0@@691 T@U) ) (! (= (type (BetreeSpec.__default.QueryReads arg0@@691)) (SeqType BoxType)) :qid |funType:BetreeSpec.__default.QueryReads| :pattern ( (BetreeSpec.__default.QueryReads arg0@@691)) )))
(assert  (=> true (forall ((|q#0@@3| T@U) ) (!  (=> (and (= (type |q#0@@3|) DatatypeTypeType) (or (|BetreeSpec.__default.QueryReads#canCall| |q#0@@3|) ($Is |q#0@@3| Tclass.BetreeSpec.LookupQuery))) ($Is (BetreeSpec.__default.QueryReads |q#0@@3|) (TSeq Tclass.BetreeGraph.ReadOp))) :qid |BetreeSpecidfy.120:23| :skolemid |4140| :pattern ( (BetreeSpec.__default.QueryReads |q#0@@3|)) ))))
(assert (forall ((|q#0@@4| T@U) ) (!  (=> (and (= (type |q#0@@4|) DatatypeTypeType) ($Is |q#0@@4| Tclass.BetreeSpec.LookupQuery)) (= (|BetreeSpec.__default.QueryReads#requires| |q#0@@4|) true)) :qid |BetreeSpecidfy.120:23| :skolemid |4141| :pattern ( (|BetreeSpec.__default.QueryReads#requires| |q#0@@4|)) )))
(assert  (=> true (forall ((|q#0@@5| T@U) ) (!  (=> (and (= (type |q#0@@5|) DatatypeTypeType) (or (|BetreeSpec.__default.QueryReads#canCall| |q#0@@5|) ($Is |q#0@@5| Tclass.BetreeSpec.LookupQuery))) (and (BetreeSpec.LookupQuery.LookupQuery_q |q#0@@5|) (= (BetreeSpec.__default.QueryReads |q#0@@5|) (BetreeSpec.LookupQuery.lookup |q#0@@5|)))) :qid |BetreeSpecidfy.120:23| :skolemid |4142| :pattern ( (BetreeSpec.__default.QueryReads |q#0@@5|)) ))))
(assert  (=> true (forall ((|q#0@@6| T@U) ) (!  (=> (and (= (type |q#0@@6|) DatatypeTypeType) (or (|BetreeSpec.__default.QueryReads#canCall| (Lit |q#0@@6|)) ($Is |q#0@@6| Tclass.BetreeSpec.LookupQuery))) (and (BetreeSpec.LookupQuery.LookupQuery_q (Lit |q#0@@6|)) (= (BetreeSpec.__default.QueryReads (Lit |q#0@@6|)) (Lit (BetreeSpec.LookupQuery.lookup (Lit |q#0@@6|)))))) :qid |BetreeSpecidfy.120:23| :weight 3 :skolemid |4143| :pattern ( (BetreeSpec.__default.QueryReads (Lit |q#0@@6|))) ))))
(assert (forall ((arg0@@692 T@U) ) (! (= (type (BetreeSpec.__default.QueryOps arg0@@692)) (SeqType BoxType)) :qid |funType:BetreeSpec.__default.QueryOps| :pattern ( (BetreeSpec.__default.QueryOps arg0@@692)) )))
(assert  (=> true (forall ((|q#0@@7| T@U) ) (!  (=> (and (= (type |q#0@@7|) DatatypeTypeType) (or (|BetreeSpec.__default.QueryOps#canCall| |q#0@@7|) ($Is |q#0@@7| Tclass.BetreeSpec.LookupQuery))) ($Is (BetreeSpec.__default.QueryOps |q#0@@7|) (TSeq Tclass.BetreeGraph.Op))) :qid |BetreeSpecidfy.124:21| :skolemid |4144| :pattern ( (BetreeSpec.__default.QueryOps |q#0@@7|)) ))))
(assert (forall ((|q#0@@8| T@U) ) (!  (=> (and (= (type |q#0@@8|) DatatypeTypeType) ($Is |q#0@@8| Tclass.BetreeSpec.LookupQuery)) (= (|BetreeSpec.__default.QueryOps#requires| |q#0@@8|) true)) :qid |BetreeSpecidfy.124:21| :skolemid |4145| :pattern ( (|BetreeSpec.__default.QueryOps#requires| |q#0@@8|)) )))
(assert  (=> true (forall ((|q#0@@9| T@U) ) (!  (=> (and (= (type |q#0@@9|) DatatypeTypeType) (or (|BetreeSpec.__default.QueryOps#canCall| |q#0@@9|) ($Is |q#0@@9| Tclass.BetreeSpec.LookupQuery))) (= (BetreeSpec.__default.QueryOps |q#0@@9|) (Lit (|Seq#Empty| BoxType)))) :qid |BetreeSpecidfy.124:21| :skolemid |4146| :pattern ( (BetreeSpec.__default.QueryOps |q#0@@9|)) ))))
(assert  (=> true (forall ((|q#0@@10| T@U) ) (!  (=> (and (= (type |q#0@@10|) DatatypeTypeType) (or (|BetreeSpec.__default.QueryOps#canCall| (Lit |q#0@@10|)) ($Is |q#0@@10| Tclass.BetreeSpec.LookupQuery))) (= (BetreeSpec.__default.QueryOps (Lit |q#0@@10|)) (Lit (|Seq#Empty| BoxType)))) :qid |BetreeSpecidfy.124:21| :weight 3 :skolemid |4147| :pattern ( (BetreeSpec.__default.QueryOps (Lit |q#0@@10|))) ))))
(assert  (=> true (forall ((|l#0@@5| T@U) (|key#0@@150| T@U) (|value#0@@8| T@U) ) (!  (=> (and (and (and (= (type |l#0@@5|) (SeqType BoxType)) (= (type |key#0@@150|) (SeqType BoxType))) (= (type |value#0@@8|) (SeqType BoxType))) (or (|BetreeSpec.__default.LookupKeyValue#canCall| |l#0@@5| |key#0@@150| |value#0@@8|) (and (and ($Is |l#0@@5| (TSeq Tclass.BetreeGraph.ReadOp)) ($Is |key#0@@150| Tclass.KeyType.Key)) ($Is |value#0@@8| Tclass.ValueType.Value)))) true) :qid |BetreeSpecidfy.136:28| :skolemid |4148| :pattern ( (BetreeSpec.__default.LookupKeyValue |l#0@@5| |key#0@@150| |value#0@@8|)) ))))
(assert (forall ((|l#0@@6| T@U) (|key#0@@151| T@U) (|value#0@@9| T@U) ) (!  (=> (and (and (and (= (type |l#0@@6|) (SeqType BoxType)) (= (type |key#0@@151|) (SeqType BoxType))) (= (type |value#0@@9|) (SeqType BoxType))) (and (and ($Is |l#0@@6| (TSeq Tclass.BetreeGraph.ReadOp)) ($Is |key#0@@151| Tclass.KeyType.Key)) ($Is |value#0@@9| Tclass.ValueType.Value))) (= (|BetreeSpec.__default.LookupKeyValue#requires| |l#0@@6| |key#0@@151| |value#0@@9|) true)) :qid |BetreeSpecidfy.136:28| :skolemid |4149| :pattern ( (|BetreeSpec.__default.LookupKeyValue#requires| |l#0@@6| |key#0@@151| |value#0@@9|)) )))
(assert  (=> true (forall ((|l#0@@7| T@U) (|key#0@@152| T@U) (|value#0@@10| T@U) ) (!  (=> (and (and (and (= (type |l#0@@7|) (SeqType BoxType)) (= (type |key#0@@152|) (SeqType BoxType))) (= (type |value#0@@10|) (SeqType BoxType))) (or (|BetreeSpec.__default.LookupKeyValue#canCall| |l#0@@7| |key#0@@152| |value#0@@10|) (and (and ($Is |l#0@@7| (TSeq Tclass.BetreeGraph.ReadOp)) ($Is |key#0@@152| Tclass.KeyType.Key)) ($Is |value#0@@10| Tclass.ValueType.Value)))) (and (and (|BetreeSpec.__default.WFLookupForKey#canCall| |l#0@@7| |key#0@@152|) (=> (BetreeSpec.__default.WFLookupForKey |l#0@@7| |key#0@@152|) (and (|BetreeSpec.__default.InterpretLookup#canCall| |l#0@@7| |key#0@@152|) (|BetreeSpec.__default.BufferDefinesValue#canCall| (BetreeSpec.__default.InterpretLookup ($LS $LZ) |l#0@@7| |key#0@@152|) |value#0@@10|)))) (= (BetreeSpec.__default.LookupKeyValue |l#0@@7| |key#0@@152| |value#0@@10|)  (and (BetreeSpec.__default.WFLookupForKey |l#0@@7| |key#0@@152|) (BetreeSpec.__default.BufferDefinesValue (BetreeSpec.__default.InterpretLookup ($LS $LZ) |l#0@@7| |key#0@@152|) |value#0@@10|))))) :qid |BetreeSpecidfy.136:28| :skolemid |4150| :pattern ( (BetreeSpec.__default.LookupKeyValue |l#0@@7| |key#0@@152| |value#0@@10|)) ))))
(assert  (=> true (forall ((|l#0@@8| T@U) (|key#0@@153| T@U) (|value#0@@11| T@U) ) (!  (=> (and (and (and (= (type |l#0@@8|) (SeqType BoxType)) (= (type |key#0@@153|) (SeqType BoxType))) (= (type |value#0@@11|) (SeqType BoxType))) (or (|BetreeSpec.__default.LookupKeyValue#canCall| (Lit |l#0@@8|) (Lit |key#0@@153|) (Lit |value#0@@11|)) (and (and ($Is |l#0@@8| (TSeq Tclass.BetreeGraph.ReadOp)) ($Is |key#0@@153| Tclass.KeyType.Key)) ($Is |value#0@@11| Tclass.ValueType.Value)))) (and (and (|BetreeSpec.__default.WFLookupForKey#canCall| (Lit |l#0@@8|) (Lit |key#0@@153|)) (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.__default.WFLookupForKey (Lit |l#0@@8|) (Lit |key#0@@153|))))) (and (|BetreeSpec.__default.InterpretLookup#canCall| (Lit |l#0@@8|) (Lit |key#0@@153|)) (|BetreeSpec.__default.BufferDefinesValue#canCall| (Lit (BetreeSpec.__default.InterpretLookup ($LS $LZ) (Lit |l#0@@8|) (Lit |key#0@@153|))) (Lit |value#0@@11|))))) (= (BetreeSpec.__default.LookupKeyValue (Lit |l#0@@8|) (Lit |key#0@@153|) (Lit |value#0@@11|)) (U_2_bool (Lit (bool_2_U  (and (BetreeSpec.__default.WFLookupForKey (Lit |l#0@@8|) (Lit |key#0@@153|)) (BetreeSpec.__default.BufferDefinesValue (Lit (BetreeSpec.__default.InterpretLookup ($LS $LZ) (Lit |l#0@@8|) (Lit |key#0@@153|))) (Lit |value#0@@11|))))))))) :qid |BetreeSpecidfy.136:28| :weight 3 :skolemid |4151| :pattern ( (BetreeSpec.__default.LookupKeyValue (Lit |l#0@@8|) (Lit |key#0@@153|) (Lit |value#0@@11|))) ))))
(assert  (=> true (forall ((|q#0@@11| T@U) ) (!  (=> (and (= (type |q#0@@11|) DatatypeTypeType) (or (|BetreeSpec.__default.ValidSuccQuery#canCall| |q#0@@11|) ($Is |q#0@@11| Tclass.BetreeSpec.SuccQuery))) true) :qid |BetreeSpecidfy.142:28| :skolemid |4152| :pattern ( (BetreeSpec.__default.ValidSuccQuery |q#0@@11|)) ))))
(assert (forall ((|q#0@@12| T@U) ) (!  (=> (and (= (type |q#0@@12|) DatatypeTypeType) ($Is |q#0@@12| Tclass.BetreeSpec.SuccQuery)) (= (|BetreeSpec.__default.ValidSuccQuery#requires| |q#0@@12|) true)) :qid |BetreeSpecidfy.142:28| :skolemid |4153| :pattern ( (|BetreeSpec.__default.ValidSuccQuery#requires| |q#0@@12|)) )))
(assert  (=> true (forall ((|q#0@@13| T@U) ) (!  (=> (and (= (type |q#0@@13|) DatatypeTypeType) (or (|BetreeSpec.__default.ValidSuccQuery#canCall| |q#0@@13|) ($Is |q#0@@13| Tclass.BetreeSpec.SuccQuery))) (and (and (and (and (BetreeSpec.SuccQuery.SuccQuery_q |q#0@@13|) (BetreeSpec.SuccQuery.SuccQuery_q |q#0@@13|)) (|MapSpec.__default.NonEmptyRange#canCall| (BetreeSpec.SuccQuery.start |q#0@@13|) (BetreeSpec.SuccQuery.end |q#0@@13|))) (=> (MapSpec.__default.NonEmptyRange (BetreeSpec.SuccQuery.start |q#0@@13|) (BetreeSpec.SuccQuery.end |q#0@@13|)) (and (forall ((|i#0@@124| Int) ) (!  (and (=> (<= (LitInt 0) |i#0@@124|) (BetreeSpec.SuccQuery.SuccQuery_q |q#0@@13|)) (=> (and (<= (LitInt 0) |i#0@@124|) (< |i#0@@124| (|Seq#Length| (BetreeSpec.SuccQuery.results |q#0@@13|)))) (and (and (and (BetreeSpec.SuccQuery.SuccQuery_q |q#0@@13|) (and (BetreeSpec.SuccQuery.SuccQuery_q |q#0@@13|) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#0@@124|))))) (and (BetreeSpec.SuccQuery.SuccQuery_q |q#0@@13|) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#0@@124|))))) (|BetreeSpec.__default.LookupKeyValue#canCall| (BetreeSpec.SuccQuery.lookup |q#0@@13|) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#0@@124|))) (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#0@@124|))))))) :qid |BetreeSpecidfy.145:16| :skolemid |4160| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#0@@124|))) )) (=> (forall ((|i#0@@125| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@125|) (< |i#0@@125| (|Seq#Length| (BetreeSpec.SuccQuery.results |q#0@@13|)))) (BetreeSpec.__default.LookupKeyValue (BetreeSpec.SuccQuery.lookup |q#0@@13|) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#0@@125|))) (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#0@@125|))))) :qid |BetreeSpecidfy.145:16| :skolemid |4170| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#0@@125|))) )) (and (forall ((|i#1@@50| Int) ) (!  (and (=> (<= (LitInt 0) |i#1@@50|) (BetreeSpec.SuccQuery.SuccQuery_q |q#0@@13|)) (=> (and (<= (LitInt 0) |i#1@@50|) (< |i#1@@50| (|Seq#Length| (BetreeSpec.SuccQuery.results |q#0@@13|)))) (and (and (BetreeSpec.SuccQuery.SuccQuery_q |q#0@@13|) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#1@@50|)))) |MapSpec.__default.EmptyValue#canCall|))) :qid |BetreeSpecidfy.146:16| :skolemid |4161| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#1@@50|))) )) (=> (forall ((|i#1@@51| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@51|) (< |i#1@@51| (|Seq#Length| (BetreeSpec.SuccQuery.results |q#0@@13|)))) (not (|Seq#Equal| (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#1@@51|))) MapSpec.__default.EmptyValue))) :qid |BetreeSpecidfy.146:16| :skolemid |4169| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#1@@51|))) )) (and (forall ((|i#2@@23| Int) ) (!  (and (=> (<= (LitInt 0) |i#2@@23|) (BetreeSpec.SuccQuery.SuccQuery_q |q#0@@13|)) (=> (and (<= (LitInt 0) |i#2@@23|) (< |i#2@@23| (|Seq#Length| (BetreeSpec.SuccQuery.results |q#0@@13|)))) (and (and (and (BetreeSpec.SuccQuery.SuccQuery_q |q#0@@13|) (and (BetreeSpec.SuccQuery.SuccQuery_q |q#0@@13|) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#2@@23|))))) (BetreeSpec.SuccQuery.SuccQuery_q |q#0@@13|)) (|MapSpec.__default.InRange#canCall| (BetreeSpec.SuccQuery.start |q#0@@13|) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#2@@23|))) (BetreeSpec.SuccQuery.end |q#0@@13|))))) :qid |BetreeSpecidfy.147:16| :skolemid |4162| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#2@@23|))) )) (=> (forall ((|i#2@@24| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@24|) (< |i#2@@24| (|Seq#Length| (BetreeSpec.SuccQuery.results |q#0@@13|)))) (MapSpec.__default.InRange (BetreeSpec.SuccQuery.start |q#0@@13|) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#2@@24|))) (BetreeSpec.SuccQuery.end |q#0@@13|))) :qid |BetreeSpecidfy.147:16| :skolemid |4168| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#2@@24|))) )) (and (forall ((|i#3@@14| Int) (|j#0@@24| Int) ) (!  (and (=> (<= (LitInt 0) |i#3@@14|) (=> (< |i#3@@14| |j#0@@24|) (BetreeSpec.SuccQuery.SuccQuery_q |q#0@@13|))) (=> (and (and (<= (LitInt 0) |i#3@@14|) (< |i#3@@14| |j#0@@24|)) (< |j#0@@24| (|Seq#Length| (BetreeSpec.SuccQuery.results |q#0@@13|)))) (and (and (and (BetreeSpec.SuccQuery.SuccQuery_q |q#0@@13|) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#3@@14|)))) (and (BetreeSpec.SuccQuery.SuccQuery_q |q#0@@13|) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |j#0@@24|))))) (|Lexicographic__Byte__Order.__default.lt#canCall| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#3@@14|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |j#0@@24|))))))) :qid |BetreeSpecidfy.148:16| :skolemid |4163| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |j#0@@24|)) ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#3@@14|))) )) (=> (forall ((|i#3@@15| Int) (|j#0@@25| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#3@@15|) (< |i#3@@15| |j#0@@25|)) (< |j#0@@25| (|Seq#Length| (BetreeSpec.SuccQuery.results |q#0@@13|)))) (Lexicographic__Byte__Order.__default.lt (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#3@@15|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |j#0@@25|))))) :qid |BetreeSpecidfy.148:16| :skolemid |4167| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |j#0@@25|)) ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#3@@15|))) )) (forall ((|key#0@@154| T@U) ) (!  (=> (and (= (type |key#0@@154|) (SeqType BoxType)) ($Is |key#0@@154| Tclass.KeyType.Key)) (and (and (and (BetreeSpec.SuccQuery.SuccQuery_q |q#0@@13|) (BetreeSpec.SuccQuery.SuccQuery_q |q#0@@13|)) (|MapSpec.__default.InRange#canCall| (BetreeSpec.SuccQuery.start |q#0@@13|) |key#0@@154| (BetreeSpec.SuccQuery.end |q#0@@13|))) (=> (MapSpec.__default.InRange (BetreeSpec.SuccQuery.start |q#0@@13|) |key#0@@154| (BetreeSpec.SuccQuery.end |q#0@@13|)) (and (forall ((|i#4@@4| Int) ) (!  (and (=> (<= (LitInt 0) |i#4@@4|) (BetreeSpec.SuccQuery.SuccQuery_q |q#0@@13|)) (=> (and (<= (LitInt 0) |i#4@@4|) (< |i#4@@4| (|Seq#Length| (BetreeSpec.SuccQuery.results |q#0@@13|)))) (and (BetreeSpec.SuccQuery.SuccQuery_q |q#0@@13|) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#4@@4|)))))) :qid |BetreeSpecidfy.150:17| :skolemid |4164| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#4@@4|))) )) (=> (forall ((|i#4@@5| Int) ) (!  (=> (and (<= (LitInt 0) |i#4@@5|) (< |i#4@@5| (|Seq#Length| (BetreeSpec.SuccQuery.results |q#0@@13|)))) (not (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#4@@5|))) |key#0@@154|))) :qid |BetreeSpecidfy.150:17| :skolemid |4165| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#4@@5|))) )) (and (and (BetreeSpec.SuccQuery.SuccQuery_q |q#0@@13|) |MapSpec.__default.EmptyValue#canCall|) (|BetreeSpec.__default.LookupKeyValue#canCall| (BetreeSpec.SuccQuery.lookup |q#0@@13|) |key#0@@154| (Lit MapSpec.__default.EmptyValue)))))))) :qid |BetreeSpecidfy.149:16| :skolemid |4166| :pattern ( (BetreeSpec.__default.LookupKeyValue (BetreeSpec.SuccQuery.lookup |q#0@@13|) |key#0@@154| MapSpec.__default.EmptyValue)) :pattern ( (MapSpec.__default.InRange (BetreeSpec.SuccQuery.start |q#0@@13|) |key#0@@154| (BetreeSpec.SuccQuery.end |q#0@@13|))) )))))))))))) (= (BetreeSpec.__default.ValidSuccQuery |q#0@@13|)  (and (and (and (and (and (MapSpec.__default.NonEmptyRange (BetreeSpec.SuccQuery.start |q#0@@13|) (BetreeSpec.SuccQuery.end |q#0@@13|)) (forall ((|i#0@@126| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@126|) (< |i#0@@126| (|Seq#Length| (BetreeSpec.SuccQuery.results |q#0@@13|)))) (BetreeSpec.__default.LookupKeyValue (BetreeSpec.SuccQuery.lookup |q#0@@13|) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#0@@126|))) (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#0@@126|))))) :qid |BetreeSpecidfy.145:16| :skolemid |4154| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#0@@126|))) ))) (forall ((|i#1@@52| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@52|) (< |i#1@@52| (|Seq#Length| (BetreeSpec.SuccQuery.results |q#0@@13|)))) (not (|Seq#Equal| (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#1@@52|))) MapSpec.__default.EmptyValue))) :qid |BetreeSpecidfy.146:16| :skolemid |4155| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#1@@52|))) ))) (forall ((|i#2@@25| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@25|) (< |i#2@@25| (|Seq#Length| (BetreeSpec.SuccQuery.results |q#0@@13|)))) (MapSpec.__default.InRange (BetreeSpec.SuccQuery.start |q#0@@13|) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#2@@25|))) (BetreeSpec.SuccQuery.end |q#0@@13|))) :qid |BetreeSpecidfy.147:16| :skolemid |4156| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#2@@25|))) ))) (forall ((|i#3@@16| Int) (|j#0@@26| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#3@@16|) (< |i#3@@16| |j#0@@26|)) (< |j#0@@26| (|Seq#Length| (BetreeSpec.SuccQuery.results |q#0@@13|)))) (Lexicographic__Byte__Order.__default.lt (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#3@@16|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |j#0@@26|))))) :qid |BetreeSpecidfy.148:16| :skolemid |4157| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |j#0@@26|)) ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#3@@16|))) ))) (forall ((|key#0@@155| T@U) ) (!  (=> (= (type |key#0@@155|) (SeqType BoxType)) (=> (and ($Is |key#0@@155| Tclass.KeyType.Key) (MapSpec.__default.InRange (BetreeSpec.SuccQuery.start |q#0@@13|) |key#0@@155| (BetreeSpec.SuccQuery.end |q#0@@13|))) (=> (forall ((|i#4@@6| Int) ) (!  (=> (and (<= (LitInt 0) |i#4@@6|) (< |i#4@@6| (|Seq#Length| (BetreeSpec.SuccQuery.results |q#0@@13|)))) (not (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#4@@6|))) |key#0@@155|))) :qid |BetreeSpecidfy.150:17| :skolemid |4158| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@13|) |i#4@@6|))) )) (BetreeSpec.__default.LookupKeyValue (BetreeSpec.SuccQuery.lookup |q#0@@13|) |key#0@@155| (Lit MapSpec.__default.EmptyValue))))) :qid |BetreeSpecidfy.149:16| :skolemid |4159| :pattern ( (BetreeSpec.__default.LookupKeyValue (BetreeSpec.SuccQuery.lookup |q#0@@13|) |key#0@@155| MapSpec.__default.EmptyValue)) :pattern ( (MapSpec.__default.InRange (BetreeSpec.SuccQuery.start |q#0@@13|) |key#0@@155| (BetreeSpec.SuccQuery.end |q#0@@13|))) )))))) :qid |BetreeSpecidfy.142:28| :skolemid |4171| :pattern ( (BetreeSpec.__default.ValidSuccQuery |q#0@@13|)) ))))
(assert  (=> true (forall ((|q#0@@14| T@U) ) (!  (=> (and (= (type |q#0@@14|) DatatypeTypeType) (or (|BetreeSpec.__default.ValidSuccQuery#canCall| (Lit |q#0@@14|)) ($Is |q#0@@14| Tclass.BetreeSpec.SuccQuery))) (and (and (and (and (BetreeSpec.SuccQuery.SuccQuery_q (Lit |q#0@@14|)) (BetreeSpec.SuccQuery.SuccQuery_q (Lit |q#0@@14|))) (|MapSpec.__default.NonEmptyRange#canCall| (Lit (BetreeSpec.SuccQuery.start (Lit |q#0@@14|))) (Lit (BetreeSpec.SuccQuery.end (Lit |q#0@@14|))))) (=> (U_2_bool (Lit (bool_2_U (MapSpec.__default.NonEmptyRange (Lit (BetreeSpec.SuccQuery.start (Lit |q#0@@14|))) (Lit (BetreeSpec.SuccQuery.end (Lit |q#0@@14|))))))) (and (forall ((|i#5@@4| Int) ) (!  (and (=> (<= (LitInt 0) |i#5@@4|) (BetreeSpec.SuccQuery.SuccQuery_q (Lit |q#0@@14|))) (=> (and (<= (LitInt 0) |i#5@@4|) (< |i#5@@4| (|Seq#Length| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|)))))) (and (and (and (BetreeSpec.SuccQuery.SuccQuery_q (Lit |q#0@@14|)) (and (BetreeSpec.SuccQuery.SuccQuery_q (Lit |q#0@@14|)) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|))) |i#5@@4|))))) (and (BetreeSpec.SuccQuery.SuccQuery_q (Lit |q#0@@14|)) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|))) |i#5@@4|))))) (|BetreeSpec.__default.LookupKeyValue#canCall| (Lit (BetreeSpec.SuccQuery.lookup (Lit |q#0@@14|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|))) |i#5@@4|))) (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|))) |i#5@@4|))))))) :qid |BetreeSpecidfy.145:16| :skolemid |4178| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@14|) |i#5@@4|))) )) (=> (forall ((|i#5@@5| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@5|) (< |i#5@@5| (|Seq#Length| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|)))))) (BetreeSpec.__default.LookupKeyValue (Lit (BetreeSpec.SuccQuery.lookup (Lit |q#0@@14|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|))) |i#5@@5|))) (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|))) |i#5@@5|))))) :qid |BetreeSpecidfy.145:16| :skolemid |4188| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@14|) |i#5@@5|))) )) (and (forall ((|i#6@@2| Int) ) (!  (and (=> (<= (LitInt 0) |i#6@@2|) (BetreeSpec.SuccQuery.SuccQuery_q (Lit |q#0@@14|))) (=> (and (<= (LitInt 0) |i#6@@2|) (< |i#6@@2| (|Seq#Length| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|)))))) (and (and (BetreeSpec.SuccQuery.SuccQuery_q (Lit |q#0@@14|)) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|))) |i#6@@2|)))) |MapSpec.__default.EmptyValue#canCall|))) :qid |BetreeSpecidfy.146:16| :skolemid |4179| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@14|) |i#6@@2|))) )) (=> (forall ((|i#6@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#6@@3|) (< |i#6@@3| (|Seq#Length| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|)))))) (not (|Seq#Equal| (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|))) |i#6@@3|))) MapSpec.__default.EmptyValue))) :qid |BetreeSpecidfy.146:16| :skolemid |4187| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@14|) |i#6@@3|))) )) (and (forall ((|i#7@@2| Int) ) (!  (and (=> (<= (LitInt 0) |i#7@@2|) (BetreeSpec.SuccQuery.SuccQuery_q (Lit |q#0@@14|))) (=> (and (<= (LitInt 0) |i#7@@2|) (< |i#7@@2| (|Seq#Length| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|)))))) (and (and (and (BetreeSpec.SuccQuery.SuccQuery_q (Lit |q#0@@14|)) (and (BetreeSpec.SuccQuery.SuccQuery_q (Lit |q#0@@14|)) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|))) |i#7@@2|))))) (BetreeSpec.SuccQuery.SuccQuery_q (Lit |q#0@@14|))) (|MapSpec.__default.InRange#canCall| (Lit (BetreeSpec.SuccQuery.start (Lit |q#0@@14|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|))) |i#7@@2|))) (Lit (BetreeSpec.SuccQuery.end (Lit |q#0@@14|))))))) :qid |BetreeSpecidfy.147:16| :skolemid |4180| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@14|) |i#7@@2|))) )) (=> (forall ((|i#7@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#7@@3|) (< |i#7@@3| (|Seq#Length| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|)))))) (MapSpec.__default.InRange (Lit (BetreeSpec.SuccQuery.start (Lit |q#0@@14|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|))) |i#7@@3|))) (Lit (BetreeSpec.SuccQuery.end (Lit |q#0@@14|))))) :qid |BetreeSpecidfy.147:16| :skolemid |4186| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@14|) |i#7@@3|))) )) (and (forall ((|i#8@@2| Int) (|j#1@@14| Int) ) (!  (and (=> (<= (LitInt 0) |i#8@@2|) (=> (< |i#8@@2| |j#1@@14|) (BetreeSpec.SuccQuery.SuccQuery_q (Lit |q#0@@14|)))) (=> (and (and (<= (LitInt 0) |i#8@@2|) (< |i#8@@2| |j#1@@14|)) (< |j#1@@14| (|Seq#Length| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|)))))) (and (and (and (BetreeSpec.SuccQuery.SuccQuery_q (Lit |q#0@@14|)) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|))) |i#8@@2|)))) (and (BetreeSpec.SuccQuery.SuccQuery_q (Lit |q#0@@14|)) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|))) |j#1@@14|))))) (|Lexicographic__Byte__Order.__default.lt#canCall| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|))) |i#8@@2|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|))) |j#1@@14|))))))) :qid |BetreeSpecidfy.148:16| :skolemid |4181| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@14|) |j#1@@14|)) ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@14|) |i#8@@2|))) )) (=> (forall ((|i#8@@3| Int) (|j#1@@15| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#8@@3|) (< |i#8@@3| |j#1@@15|)) (< |j#1@@15| (|Seq#Length| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|)))))) (Lexicographic__Byte__Order.__default.lt (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|))) |i#8@@3|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|))) |j#1@@15|))))) :qid |BetreeSpecidfy.148:16| :skolemid |4185| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@14|) |j#1@@15|)) ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@14|) |i#8@@3|))) )) (forall ((|key#1@@11| T@U) ) (!  (=> (and (= (type |key#1@@11|) (SeqType BoxType)) ($Is |key#1@@11| Tclass.KeyType.Key)) (and (and (and (BetreeSpec.SuccQuery.SuccQuery_q (Lit |q#0@@14|)) (BetreeSpec.SuccQuery.SuccQuery_q (Lit |q#0@@14|))) (|MapSpec.__default.InRange#canCall| (Lit (BetreeSpec.SuccQuery.start (Lit |q#0@@14|))) |key#1@@11| (Lit (BetreeSpec.SuccQuery.end (Lit |q#0@@14|))))) (=> (MapSpec.__default.InRange (Lit (BetreeSpec.SuccQuery.start (Lit |q#0@@14|))) |key#1@@11| (Lit (BetreeSpec.SuccQuery.end (Lit |q#0@@14|)))) (and (forall ((|i#9@@1| Int) ) (!  (and (=> (<= (LitInt 0) |i#9@@1|) (BetreeSpec.SuccQuery.SuccQuery_q (Lit |q#0@@14|))) (=> (and (<= (LitInt 0) |i#9@@1|) (< |i#9@@1| (|Seq#Length| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|)))))) (and (BetreeSpec.SuccQuery.SuccQuery_q (Lit |q#0@@14|)) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|))) |i#9@@1|)))))) :qid |BetreeSpecidfy.150:17| :skolemid |4182| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@14|) |i#9@@1|))) )) (=> (forall ((|i#9@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#9@@2|) (< |i#9@@2| (|Seq#Length| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|)))))) (not (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|))) |i#9@@2|))) |key#1@@11|))) :qid |BetreeSpecidfy.150:17| :skolemid |4183| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@14|) |i#9@@2|))) )) (and (and (BetreeSpec.SuccQuery.SuccQuery_q (Lit |q#0@@14|)) |MapSpec.__default.EmptyValue#canCall|) (|BetreeSpec.__default.LookupKeyValue#canCall| (Lit (BetreeSpec.SuccQuery.lookup (Lit |q#0@@14|))) |key#1@@11| (Lit MapSpec.__default.EmptyValue)))))))) :qid |BetreeSpecidfy.149:16| :skolemid |4184| :pattern ( (BetreeSpec.__default.LookupKeyValue (BetreeSpec.SuccQuery.lookup |q#0@@14|) |key#1@@11| MapSpec.__default.EmptyValue)) :pattern ( (MapSpec.__default.InRange (BetreeSpec.SuccQuery.start |q#0@@14|) |key#1@@11| (BetreeSpec.SuccQuery.end |q#0@@14|))) )))))))))))) (= (BetreeSpec.__default.ValidSuccQuery (Lit |q#0@@14|))  (and (and (and (and (and (MapSpec.__default.NonEmptyRange (Lit (BetreeSpec.SuccQuery.start (Lit |q#0@@14|))) (Lit (BetreeSpec.SuccQuery.end (Lit |q#0@@14|)))) (forall ((|i#5@@6| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@6|) (< |i#5@@6| (|Seq#Length| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|)))))) (BetreeSpec.__default.LookupKeyValue (Lit (BetreeSpec.SuccQuery.lookup (Lit |q#0@@14|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|))) |i#5@@6|))) (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|))) |i#5@@6|))))) :qid |BetreeSpecidfy.145:16| :skolemid |4172| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@14|) |i#5@@6|))) ))) (forall ((|i#6@@4| Int) ) (!  (=> (and (<= (LitInt 0) |i#6@@4|) (< |i#6@@4| (|Seq#Length| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|)))))) (not (|Seq#Equal| (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|))) |i#6@@4|))) MapSpec.__default.EmptyValue))) :qid |BetreeSpecidfy.146:16| :skolemid |4173| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@14|) |i#6@@4|))) ))) (forall ((|i#7@@4| Int) ) (!  (=> (and (<= (LitInt 0) |i#7@@4|) (< |i#7@@4| (|Seq#Length| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|)))))) (MapSpec.__default.InRange (Lit (BetreeSpec.SuccQuery.start (Lit |q#0@@14|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|))) |i#7@@4|))) (Lit (BetreeSpec.SuccQuery.end (Lit |q#0@@14|))))) :qid |BetreeSpecidfy.147:16| :skolemid |4174| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@14|) |i#7@@4|))) ))) (forall ((|i#8@@4| Int) (|j#1@@16| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#8@@4|) (< |i#8@@4| |j#1@@16|)) (< |j#1@@16| (|Seq#Length| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|)))))) (Lexicographic__Byte__Order.__default.lt (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|))) |i#8@@4|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|))) |j#1@@16|))))) :qid |BetreeSpecidfy.148:16| :skolemid |4175| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@14|) |j#1@@16|)) ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@14|) |i#8@@4|))) ))) (forall ((|key#1@@12| T@U) ) (!  (=> (= (type |key#1@@12|) (SeqType BoxType)) (=> (and ($Is |key#1@@12| Tclass.KeyType.Key) (MapSpec.__default.InRange (Lit (BetreeSpec.SuccQuery.start (Lit |q#0@@14|))) |key#1@@12| (Lit (BetreeSpec.SuccQuery.end (Lit |q#0@@14|))))) (=> (forall ((|i#9@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#9@@3|) (< |i#9@@3| (|Seq#Length| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|)))))) (not (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (BetreeSpec.SuccQuery.results (Lit |q#0@@14|))) |i#9@@3|))) |key#1@@12|))) :qid |BetreeSpecidfy.150:17| :skolemid |4176| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.SuccQuery.results |q#0@@14|) |i#9@@3|))) )) (BetreeSpec.__default.LookupKeyValue (Lit (BetreeSpec.SuccQuery.lookup (Lit |q#0@@14|))) |key#1@@12| (Lit MapSpec.__default.EmptyValue))))) :qid |BetreeSpecidfy.149:16| :skolemid |4177| :pattern ( (BetreeSpec.__default.LookupKeyValue (BetreeSpec.SuccQuery.lookup |q#0@@14|) |key#1@@12| MapSpec.__default.EmptyValue)) :pattern ( (MapSpec.__default.InRange (BetreeSpec.SuccQuery.start |q#0@@14|) |key#1@@12| (BetreeSpec.SuccQuery.end |q#0@@14|))) )))))) :qid |BetreeSpecidfy.142:28| :weight 3 :skolemid |4189| :pattern ( (BetreeSpec.__default.ValidSuccQuery (Lit |q#0@@14|))) ))))
(assert (forall ((arg0@@693 T@U) ) (! (= (type (BetreeSpec.__default.SuccQueryReads arg0@@693)) (SeqType BoxType)) :qid |funType:BetreeSpec.__default.SuccQueryReads| :pattern ( (BetreeSpec.__default.SuccQueryReads arg0@@693)) )))
(assert  (=> true (forall ((|q#0@@15| T@U) ) (!  (=> (and (= (type |q#0@@15|) DatatypeTypeType) (or (|BetreeSpec.__default.SuccQueryReads#canCall| |q#0@@15|) ($Is |q#0@@15| Tclass.BetreeSpec.SuccQuery))) ($Is (BetreeSpec.__default.SuccQueryReads |q#0@@15|) (TSeq Tclass.BetreeGraph.ReadOp))) :qid |BetreeSpecidfy.155:27| :skolemid |4190| :pattern ( (BetreeSpec.__default.SuccQueryReads |q#0@@15|)) ))))
(assert (forall ((|q#0@@16| T@U) ) (!  (=> (and (= (type |q#0@@16|) DatatypeTypeType) ($Is |q#0@@16| Tclass.BetreeSpec.SuccQuery)) (= (|BetreeSpec.__default.SuccQueryReads#requires| |q#0@@16|) true)) :qid |BetreeSpecidfy.155:27| :skolemid |4191| :pattern ( (|BetreeSpec.__default.SuccQueryReads#requires| |q#0@@16|)) )))
(assert  (=> true (forall ((|q#0@@17| T@U) ) (!  (=> (and (= (type |q#0@@17|) DatatypeTypeType) (or (|BetreeSpec.__default.SuccQueryReads#canCall| |q#0@@17|) ($Is |q#0@@17| Tclass.BetreeSpec.SuccQuery))) (and (BetreeSpec.SuccQuery.SuccQuery_q |q#0@@17|) (= (BetreeSpec.__default.SuccQueryReads |q#0@@17|) (BetreeSpec.SuccQuery.lookup |q#0@@17|)))) :qid |BetreeSpecidfy.155:27| :skolemid |4192| :pattern ( (BetreeSpec.__default.SuccQueryReads |q#0@@17|)) ))))
(assert  (=> true (forall ((|q#0@@18| T@U) ) (!  (=> (and (= (type |q#0@@18|) DatatypeTypeType) (or (|BetreeSpec.__default.SuccQueryReads#canCall| (Lit |q#0@@18|)) ($Is |q#0@@18| Tclass.BetreeSpec.SuccQuery))) (and (BetreeSpec.SuccQuery.SuccQuery_q (Lit |q#0@@18|)) (= (BetreeSpec.__default.SuccQueryReads (Lit |q#0@@18|)) (Lit (BetreeSpec.SuccQuery.lookup (Lit |q#0@@18|)))))) :qid |BetreeSpecidfy.155:27| :weight 3 :skolemid |4193| :pattern ( (BetreeSpec.__default.SuccQueryReads (Lit |q#0@@18|))) ))))
(assert (forall ((arg0@@694 T@U) ) (! (= (type (BetreeSpec.__default.SuccQueryOps arg0@@694)) (SeqType BoxType)) :qid |funType:BetreeSpec.__default.SuccQueryOps| :pattern ( (BetreeSpec.__default.SuccQueryOps arg0@@694)) )))
(assert  (=> true (forall ((|q#0@@19| T@U) ) (!  (=> (and (= (type |q#0@@19|) DatatypeTypeType) (or (|BetreeSpec.__default.SuccQueryOps#canCall| |q#0@@19|) ($Is |q#0@@19| Tclass.BetreeSpec.SuccQuery))) ($Is (BetreeSpec.__default.SuccQueryOps |q#0@@19|) (TSeq Tclass.BetreeGraph.Op))) :qid |BetreeSpecidfy.160:25| :skolemid |4194| :pattern ( (BetreeSpec.__default.SuccQueryOps |q#0@@19|)) ))))
(assert (forall ((|q#0@@20| T@U) ) (!  (=> (and (= (type |q#0@@20|) DatatypeTypeType) ($Is |q#0@@20| Tclass.BetreeSpec.SuccQuery)) (= (|BetreeSpec.__default.SuccQueryOps#requires| |q#0@@20|) true)) :qid |BetreeSpecidfy.160:25| :skolemid |4195| :pattern ( (|BetreeSpec.__default.SuccQueryOps#requires| |q#0@@20|)) )))
(assert  (=> true (forall ((|q#0@@21| T@U) ) (!  (=> (and (= (type |q#0@@21|) DatatypeTypeType) (or (|BetreeSpec.__default.SuccQueryOps#canCall| |q#0@@21|) ($Is |q#0@@21| Tclass.BetreeSpec.SuccQuery))) (= (BetreeSpec.__default.SuccQueryOps |q#0@@21|) (Lit (|Seq#Empty| BoxType)))) :qid |BetreeSpecidfy.160:25| :skolemid |4196| :pattern ( (BetreeSpec.__default.SuccQueryOps |q#0@@21|)) ))))
(assert  (=> true (forall ((|q#0@@22| T@U) ) (!  (=> (and (= (type |q#0@@22|) DatatypeTypeType) (or (|BetreeSpec.__default.SuccQueryOps#canCall| (Lit |q#0@@22|)) ($Is |q#0@@22| Tclass.BetreeSpec.SuccQuery))) (= (BetreeSpec.__default.SuccQueryOps (Lit |q#0@@22|)) (Lit (|Seq#Empty| BoxType)))) :qid |BetreeSpecidfy.160:25| :weight 3 :skolemid |4197| :pattern ( (BetreeSpec.__default.SuccQueryOps (Lit |q#0@@22|))) ))))
(assert (forall ((arg0@@695 T@U) (arg1@@323 T@U) (arg2@@192 T@U) ) (! (= (type (BetreeSpec.__default.AddMessageToBuffer arg0@@695 arg1@@323 arg2@@192)) (IMapType BoxType BoxType)) :qid |funType:BetreeSpec.__default.AddMessageToBuffer| :pattern ( (BetreeSpec.__default.AddMessageToBuffer arg0@@695 arg1@@323 arg2@@192)) )))
(assert  (=> true (forall ((|buffer#0| T@U) (|key#0@@156| T@U) (|msg#0@@7| T@U) ) (!  (=> (and (and (and (= (type |buffer#0|) (IMapType BoxType BoxType)) (= (type |key#0@@156|) (SeqType BoxType))) (= (type |msg#0@@7|) DatatypeTypeType)) (or (|BetreeSpec.__default.AddMessageToBuffer#canCall| |buffer#0| |key#0@@156| |msg#0@@7|) (and (and (and ($Is |buffer#0| (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |key#0@@156| Tclass.KeyType.Key)) ($Is |msg#0@@7| Tclass.ValueMessage.Message)) (U_2_bool (MapType0Select (|IMap#Domain| |buffer#0|) ($Box |key#0@@156|)))))) ($Is (BetreeSpec.__default.AddMessageToBuffer |buffer#0| |key#0@@156| |msg#0@@7|) (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) :qid |BetreeSpecidfy.167:31| :skolemid |4198| :pattern ( (BetreeSpec.__default.AddMessageToBuffer |buffer#0| |key#0@@156| |msg#0@@7|)) ))))
(assert (forall ((|buffer#0@@0| T@U) (|key#0@@157| T@U) (|msg#0@@8| T@U) ) (!  (=> (and (and (and (= (type |buffer#0@@0|) (IMapType BoxType BoxType)) (= (type |key#0@@157|) (SeqType BoxType))) (= (type |msg#0@@8|) DatatypeTypeType)) (and (and ($Is |buffer#0@@0| (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |key#0@@157| Tclass.KeyType.Key)) ($Is |msg#0@@8| Tclass.ValueMessage.Message))) (= (|BetreeSpec.__default.AddMessageToBuffer#requires| |buffer#0@@0| |key#0@@157| |msg#0@@8|) (U_2_bool (MapType0Select (|IMap#Domain| |buffer#0@@0|) ($Box |key#0@@157|))))) :qid |BetreeSpecidfy.167:31| :skolemid |4199| :pattern ( (|BetreeSpec.__default.AddMessageToBuffer#requires| |buffer#0@@0| |key#0@@157| |msg#0@@8|)) )))
(assert  (=> true (forall ((|buffer#0@@1| T@U) (|key#0@@158| T@U) (|msg#0@@9| T@U) ) (!  (=> (and (and (and (= (type |buffer#0@@1|) (IMapType BoxType BoxType)) (= (type |key#0@@158|) (SeqType BoxType))) (= (type |msg#0@@9|) DatatypeTypeType)) (or (|BetreeSpec.__default.AddMessageToBuffer#canCall| |buffer#0@@1| |key#0@@158| |msg#0@@9|) (and (and (and ($Is |buffer#0@@1| (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |key#0@@158| Tclass.KeyType.Key)) ($Is |msg#0@@9| Tclass.ValueMessage.Message)) (U_2_bool (MapType0Select (|IMap#Domain| |buffer#0@@1|) ($Box |key#0@@158|)))))) (and (|ValueMessage.__default.Merge#canCall| |msg#0@@9| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |buffer#0@@1|) ($Box |key#0@@158|)))) (= (BetreeSpec.__default.AddMessageToBuffer |buffer#0@@1| |key#0@@158| |msg#0@@9|) (|IMap#Build| |buffer#0@@1| ($Box |key#0@@158|) ($Box (ValueMessage.__default.Merge |msg#0@@9| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |buffer#0@@1|) ($Box |key#0@@158|))))))))) :qid |BetreeSpecidfy.167:31| :skolemid |4200| :pattern ( (BetreeSpec.__default.AddMessageToBuffer |buffer#0@@1| |key#0@@158| |msg#0@@9|)) ))))
(assert  (=> true (forall ((|buffer#0@@2| T@U) (|key#0@@159| T@U) (|msg#0@@10| T@U) ) (!  (=> (and (and (and (= (type |buffer#0@@2|) (IMapType BoxType BoxType)) (= (type |key#0@@159|) (SeqType BoxType))) (= (type |msg#0@@10|) DatatypeTypeType)) (or (|BetreeSpec.__default.AddMessageToBuffer#canCall| |buffer#0@@2| (Lit |key#0@@159|) (Lit |msg#0@@10|)) (and (and (and ($Is |buffer#0@@2| (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |key#0@@159| Tclass.KeyType.Key)) ($Is |msg#0@@10| Tclass.ValueMessage.Message)) (U_2_bool (MapType0Select (|IMap#Domain| |buffer#0@@2|) ($Box |key#0@@159|)))))) (and (|ValueMessage.__default.Merge#canCall| (Lit |msg#0@@10|) ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |buffer#0@@2|) ($Box (Lit |key#0@@159|))))) (= (BetreeSpec.__default.AddMessageToBuffer |buffer#0@@2| (Lit |key#0@@159|) (Lit |msg#0@@10|)) (|IMap#Build| |buffer#0@@2| ($Box (Lit |key#0@@159|)) ($Box (ValueMessage.__default.Merge (Lit |msg#0@@10|) ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |buffer#0@@2|) ($Box (Lit |key#0@@159|)))))))))) :qid |BetreeSpecidfy.167:31| :weight 3 :skolemid |4201| :pattern ( (BetreeSpec.__default.AddMessageToBuffer |buffer#0@@2| (Lit |key#0@@159|) (Lit |msg#0@@10|))) ))))
(assert  (=> true (forall ((|buffer#0@@3| T@U) (|key#0@@160| T@U) (|msg#0@@11| T@U) ) (!  (=> (and (and (and (= (type |buffer#0@@3|) (IMapType BoxType BoxType)) (= (type |key#0@@160|) (SeqType BoxType))) (= (type |msg#0@@11|) DatatypeTypeType)) (or (|BetreeSpec.__default.AddMessageToBuffer#canCall| (Lit |buffer#0@@3|) (Lit |key#0@@160|) (Lit |msg#0@@11|)) (and (and (and ($Is |buffer#0@@3| (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |key#0@@160| Tclass.KeyType.Key)) ($Is |msg#0@@11| Tclass.ValueMessage.Message)) (U_2_bool (MapType0Select (|IMap#Domain| |buffer#0@@3|) ($Box |key#0@@160|)))))) (and (|ValueMessage.__default.Merge#canCall| (Lit |msg#0@@11|) ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |buffer#0@@3|)) ($Box (Lit |key#0@@160|))))) (= (BetreeSpec.__default.AddMessageToBuffer (Lit |buffer#0@@3|) (Lit |key#0@@160|) (Lit |msg#0@@11|)) (|IMap#Build| (Lit |buffer#0@@3|) ($Box (Lit |key#0@@160|)) ($Box (ValueMessage.__default.Merge (Lit |msg#0@@11|) ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |buffer#0@@3|)) ($Box (Lit |key#0@@160|)))))))))) :qid |BetreeSpecidfy.167:31| :weight 3 :skolemid |4202| :pattern ( (BetreeSpec.__default.AddMessageToBuffer (Lit |buffer#0@@3|) (Lit |key#0@@160|) (Lit |msg#0@@11|))) ))))
(assert (forall ((arg0@@696 T@U) (arg1@@324 T@U) (arg2@@193 T@U) ) (! (= (type (BetreeSpec.__default.AddMessageToNode arg0@@696 arg1@@324 arg2@@193)) DatatypeTypeType) :qid |funType:BetreeSpec.__default.AddMessageToNode| :pattern ( (BetreeSpec.__default.AddMessageToNode arg0@@696 arg1@@324 arg2@@193)) )))
(assert  (=> true (forall ((|node#0@@7| T@U) (|key#0@@161| T@U) (|msg#0@@12| T@U) ) (!  (=> (and (and (and (= (type |node#0@@7|) DatatypeTypeType) (= (type |key#0@@161|) (SeqType BoxType))) (= (type |msg#0@@12|) DatatypeTypeType)) (or (|BetreeSpec.__default.AddMessageToNode#canCall| |node#0@@7| |key#0@@161| |msg#0@@12|) (and (and (and ($Is |node#0@@7| Tclass.BetreeGraph.Node) ($Is |key#0@@161| Tclass.KeyType.Key)) ($Is |msg#0@@12| Tclass.ValueMessage.Message)) (BetreeSpec.__default.WFNode |node#0@@7|)))) ($Is (BetreeSpec.__default.AddMessageToNode |node#0@@7| |key#0@@161| |msg#0@@12|) Tclass.BetreeGraph.Node)) :qid |BetreeSpecidfy.173:29| :skolemid |4203| :pattern ( (BetreeSpec.__default.AddMessageToNode |node#0@@7| |key#0@@161| |msg#0@@12|)) ))))
(assert (forall ((|node#0@@8| T@U) (|key#0@@162| T@U) (|msg#0@@13| T@U) ) (!  (=> (and (and (and (= (type |node#0@@8|) DatatypeTypeType) (= (type |key#0@@162|) (SeqType BoxType))) (= (type |msg#0@@13|) DatatypeTypeType)) (and (and ($Is |node#0@@8| Tclass.BetreeGraph.Node) ($Is |key#0@@162| Tclass.KeyType.Key)) ($Is |msg#0@@13| Tclass.ValueMessage.Message))) (= (|BetreeSpec.__default.AddMessageToNode#requires| |node#0@@8| |key#0@@162| |msg#0@@13|) (BetreeSpec.__default.WFNode |node#0@@8|))) :qid |BetreeSpecidfy.173:29| :skolemid |4204| :pattern ( (|BetreeSpec.__default.AddMessageToNode#requires| |node#0@@8| |key#0@@162| |msg#0@@13|)) )))
(assert  (=> true (forall ((|node#0@@9| T@U) (|key#0@@163| T@U) (|msg#0@@14| T@U) ) (!  (=> (and (and (and (= (type |node#0@@9|) DatatypeTypeType) (= (type |key#0@@163|) (SeqType BoxType))) (= (type |msg#0@@14|) DatatypeTypeType)) (or (|BetreeSpec.__default.AddMessageToNode#canCall| |node#0@@9| |key#0@@163| |msg#0@@14|) (and (and (and ($Is |node#0@@9| Tclass.BetreeGraph.Node) ($Is |key#0@@163| Tclass.KeyType.Key)) ($Is |msg#0@@14| Tclass.ValueMessage.Message)) (BetreeSpec.__default.WFNode |node#0@@9|)))) (and (and (BetreeGraph.Node.Node_q |node#0@@9|) (and (BetreeGraph.Node.Node_q |node#0@@9|) (|BetreeSpec.__default.AddMessageToBuffer#canCall| (BetreeGraph.Node.buffer |node#0@@9|) |key#0@@163| |msg#0@@14|))) (= (BetreeSpec.__default.AddMessageToNode |node#0@@9| |key#0@@163| |msg#0@@14|) (|#BetreeGraph.Node.Node| (BetreeGraph.Node.children |node#0@@9|) (BetreeSpec.__default.AddMessageToBuffer (BetreeGraph.Node.buffer |node#0@@9|) |key#0@@163| |msg#0@@14|))))) :qid |BetreeSpecidfy.173:29| :skolemid |4205| :pattern ( (BetreeSpec.__default.AddMessageToNode |node#0@@9| |key#0@@163| |msg#0@@14|)) ))))
(assert  (=> true (forall ((|node#0@@10| T@U) (|key#0@@164| T@U) (|msg#0@@15| T@U) ) (!  (=> (and (and (and (= (type |node#0@@10|) DatatypeTypeType) (= (type |key#0@@164|) (SeqType BoxType))) (= (type |msg#0@@15|) DatatypeTypeType)) (or (|BetreeSpec.__default.AddMessageToNode#canCall| (Lit |node#0@@10|) (Lit |key#0@@164|) (Lit |msg#0@@15|)) (and (and (and ($Is |node#0@@10| Tclass.BetreeGraph.Node) ($Is |key#0@@164| Tclass.KeyType.Key)) ($Is |msg#0@@15| Tclass.ValueMessage.Message)) (U_2_bool (Lit (bool_2_U (BetreeSpec.__default.WFNode (Lit |node#0@@10|)))))))) (and (and (BetreeGraph.Node.Node_q (Lit |node#0@@10|)) (and (BetreeGraph.Node.Node_q (Lit |node#0@@10|)) (|BetreeSpec.__default.AddMessageToBuffer#canCall| (Lit (BetreeGraph.Node.buffer (Lit |node#0@@10|))) (Lit |key#0@@164|) (Lit |msg#0@@15|)))) (= (BetreeSpec.__default.AddMessageToNode (Lit |node#0@@10|) (Lit |key#0@@164|) (Lit |msg#0@@15|)) (Lit (|#BetreeGraph.Node.Node| (Lit (BetreeGraph.Node.children (Lit |node#0@@10|))) (Lit (BetreeSpec.__default.AddMessageToBuffer (Lit (BetreeGraph.Node.buffer (Lit |node#0@@10|))) (Lit |key#0@@164|) (Lit |msg#0@@15|)))))))) :qid |BetreeSpecidfy.173:29| :weight 3 :skolemid |4206| :pattern ( (BetreeSpec.__default.AddMessageToNode (Lit |node#0@@10|) (Lit |key#0@@164|) (Lit |msg#0@@15|))) ))))
(assert  (=> true (forall ((|ins#0| T@U) ) (!  (=> (and (= (type |ins#0|) DatatypeTypeType) (or (|BetreeSpec.__default.ValidInsertion#canCall| |ins#0|) ($Is |ins#0| Tclass.BetreeSpec.MessageInsertion))) true) :qid |BetreeSpecidfy.181:28| :skolemid |4207| :pattern ( (BetreeSpec.__default.ValidInsertion |ins#0|)) ))))
(assert (forall ((|ins#0@@0| T@U) ) (!  (=> (and (= (type |ins#0@@0|) DatatypeTypeType) ($Is |ins#0@@0| Tclass.BetreeSpec.MessageInsertion)) (= (|BetreeSpec.__default.ValidInsertion#requires| |ins#0@@0|) true)) :qid |BetreeSpecidfy.181:28| :skolemid |4208| :pattern ( (|BetreeSpec.__default.ValidInsertion#requires| |ins#0@@0|)) )))
(assert  (=> true (forall ((|ins#0@@1| T@U) ) (!  (=> (and (= (type |ins#0@@1|) DatatypeTypeType) (or (|BetreeSpec.__default.ValidInsertion#canCall| |ins#0@@1|) ($Is |ins#0@@1| Tclass.BetreeSpec.MessageInsertion))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (BetreeSpec.MessageInsertion.MessageInsertion_q |ins#0@@1|) (|BetreeSpec.__default.WFNode#canCall| (BetreeSpec.MessageInsertion.oldroot |ins#0@@1|)))) (= (BetreeSpec.__default.ValidInsertion |ins#0@@1|)  (and true (BetreeSpec.__default.WFNode (BetreeSpec.MessageInsertion.oldroot |ins#0@@1|)))))) :qid |BetreeSpecidfy.181:28| :skolemid |4209| :pattern ( (BetreeSpec.__default.ValidInsertion |ins#0@@1|)) ))))
(assert  (=> true (forall ((|ins#0@@2| T@U) ) (!  (=> (and (= (type |ins#0@@2|) DatatypeTypeType) (or (|BetreeSpec.__default.ValidInsertion#canCall| (Lit |ins#0@@2|)) ($Is |ins#0@@2| Tclass.BetreeSpec.MessageInsertion))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (BetreeSpec.MessageInsertion.MessageInsertion_q (Lit |ins#0@@2|)) (|BetreeSpec.__default.WFNode#canCall| (Lit (BetreeSpec.MessageInsertion.oldroot (Lit |ins#0@@2|)))))) (= (BetreeSpec.__default.ValidInsertion (Lit |ins#0@@2|)) (U_2_bool (Lit (bool_2_U  (and true (BetreeSpec.__default.WFNode (Lit (BetreeSpec.MessageInsertion.oldroot (Lit |ins#0@@2|))))))))))) :qid |BetreeSpecidfy.181:28| :weight 3 :skolemid |4210| :pattern ( (BetreeSpec.__default.ValidInsertion (Lit |ins#0@@2|))) ))))
(assert (forall ((arg0@@697 T@U) ) (! (= (type (BetreeSpec.__default.InsertionReads arg0@@697)) (SeqType BoxType)) :qid |funType:BetreeSpec.__default.InsertionReads| :pattern ( (BetreeSpec.__default.InsertionReads arg0@@697)) )))
(assert  (=> true (forall ((|ins#0@@3| T@U) ) (!  (=> (and (= (type |ins#0@@3|) DatatypeTypeType) (or (|BetreeSpec.__default.InsertionReads#canCall| |ins#0@@3|) (and ($Is |ins#0@@3| Tclass.BetreeSpec.MessageInsertion) (BetreeSpec.__default.ValidInsertion |ins#0@@3|)))) ($Is (BetreeSpec.__default.InsertionReads |ins#0@@3|) (TSeq Tclass.BetreeGraph.ReadOp))) :qid |BetreeSpecidfy.185:27| :skolemid |4211| :pattern ( (BetreeSpec.__default.InsertionReads |ins#0@@3|)) ))))
(assert (forall ((|ins#0@@4| T@U) ) (!  (=> (and (= (type |ins#0@@4|) DatatypeTypeType) ($Is |ins#0@@4| Tclass.BetreeSpec.MessageInsertion)) (= (|BetreeSpec.__default.InsertionReads#requires| |ins#0@@4|) (BetreeSpec.__default.ValidInsertion |ins#0@@4|))) :qid |BetreeSpecidfy.185:27| :skolemid |4212| :pattern ( (|BetreeSpec.__default.InsertionReads#requires| |ins#0@@4|)) )))
(assert  (=> true (forall ((|ins#0@@5| T@U) ) (!  (=> (and (= (type |ins#0@@5|) DatatypeTypeType) (or (|BetreeSpec.__default.InsertionReads#canCall| |ins#0@@5|) (and ($Is |ins#0@@5| Tclass.BetreeSpec.MessageInsertion) (BetreeSpec.__default.ValidInsertion |ins#0@@5|)))) (and (and |BetreeGraph.__default.Root#canCall| (BetreeSpec.MessageInsertion.MessageInsertion_q |ins#0@@5|)) (= (BetreeSpec.__default.InsertionReads |ins#0@@5|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#BetreeGraph.ReadOp.ReadOp| (Lit BetreeGraph.__default.Root) (BetreeSpec.MessageInsertion.oldroot |ins#0@@5|))))))) :qid |BetreeSpecidfy.185:27| :skolemid |4213| :pattern ( (BetreeSpec.__default.InsertionReads |ins#0@@5|)) ))))
(assert  (=> true (forall ((|ins#0@@6| T@U) ) (!  (=> (and (= (type |ins#0@@6|) DatatypeTypeType) (or (|BetreeSpec.__default.InsertionReads#canCall| (Lit |ins#0@@6|)) (and ($Is |ins#0@@6| Tclass.BetreeSpec.MessageInsertion) (U_2_bool (Lit (bool_2_U (BetreeSpec.__default.ValidInsertion (Lit |ins#0@@6|)))))))) (and (and |BetreeGraph.__default.Root#canCall| (BetreeSpec.MessageInsertion.MessageInsertion_q (Lit |ins#0@@6|))) (= (BetreeSpec.__default.InsertionReads (Lit |ins#0@@6|)) (Lit (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#BetreeGraph.ReadOp.ReadOp| (Lit BetreeGraph.__default.Root) (Lit (BetreeSpec.MessageInsertion.oldroot (Lit |ins#0@@6|))))))))))) :qid |BetreeSpecidfy.185:27| :weight 3 :skolemid |4214| :pattern ( (BetreeSpec.__default.InsertionReads (Lit |ins#0@@6|))) ))))
(assert (forall ((arg0@@698 T@U) ) (! (= (type (BetreeSpec.__default.InsertionOps arg0@@698)) (SeqType BoxType)) :qid |funType:BetreeSpec.__default.InsertionOps| :pattern ( (BetreeSpec.__default.InsertionOps arg0@@698)) )))
(assert  (=> true (forall ((|ins#0@@7| T@U) ) (!  (=> (and (= (type |ins#0@@7|) DatatypeTypeType) (or (|BetreeSpec.__default.InsertionOps#canCall| |ins#0@@7|) (and ($Is |ins#0@@7| Tclass.BetreeSpec.MessageInsertion) (BetreeSpec.__default.ValidInsertion |ins#0@@7|)))) ($Is (BetreeSpec.__default.InsertionOps |ins#0@@7|) (TSeq Tclass.BetreeGraph.Op))) :qid |BetreeSpecidfy.191:25| :skolemid |4215| :pattern ( (BetreeSpec.__default.InsertionOps |ins#0@@7|)) ))))
(assert (forall ((|ins#0@@8| T@U) ) (!  (=> (and (= (type |ins#0@@8|) DatatypeTypeType) ($Is |ins#0@@8| Tclass.BetreeSpec.MessageInsertion)) (= (|BetreeSpec.__default.InsertionOps#requires| |ins#0@@8|) (BetreeSpec.__default.ValidInsertion |ins#0@@8|))) :qid |BetreeSpecidfy.191:25| :skolemid |4216| :pattern ( (|BetreeSpec.__default.InsertionOps#requires| |ins#0@@8|)) )))
(assert  (=> true (forall ((|ins#0@@9| T@U) ) (!  (=> (and (= (type |ins#0@@9|) DatatypeTypeType) (or (|BetreeSpec.__default.InsertionOps#canCall| |ins#0@@9|) (and ($Is |ins#0@@9| Tclass.BetreeSpec.MessageInsertion) (BetreeSpec.__default.ValidInsertion |ins#0@@9|)))) (and (and (and (and (and (BetreeSpec.MessageInsertion.MessageInsertion_q |ins#0@@9|) (BetreeSpec.MessageInsertion.MessageInsertion_q |ins#0@@9|)) (BetreeSpec.MessageInsertion.MessageInsertion_q |ins#0@@9|)) (|BetreeSpec.__default.AddMessageToNode#canCall| (BetreeSpec.MessageInsertion.oldroot |ins#0@@9|) (BetreeSpec.MessageInsertion.key |ins#0@@9|) (BetreeSpec.MessageInsertion.msg |ins#0@@9|))) |BetreeGraph.__default.Root#canCall|) (= (BetreeSpec.__default.InsertionOps |ins#0@@9|) (let ((|newroot#0| (BetreeSpec.__default.AddMessageToNode (BetreeSpec.MessageInsertion.oldroot |ins#0@@9|) (BetreeSpec.MessageInsertion.key |ins#0@@9|) (BetreeSpec.MessageInsertion.msg |ins#0@@9|)))) (let ((|writeop#0| (|#BetreeGraph.Op.WriteOp| (Lit BetreeGraph.__default.Root) |newroot#0|))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box |writeop#0|))))))) :qid |BetreeSpecidfy.191:25| :skolemid |4217| :pattern ( (BetreeSpec.__default.InsertionOps |ins#0@@9|)) ))))
(assert  (=> true (forall ((|ins#0@@10| T@U) ) (!  (=> (and (= (type |ins#0@@10|) DatatypeTypeType) (or (|BetreeSpec.__default.InsertionOps#canCall| (Lit |ins#0@@10|)) (and ($Is |ins#0@@10| Tclass.BetreeSpec.MessageInsertion) (U_2_bool (Lit (bool_2_U (BetreeSpec.__default.ValidInsertion (Lit |ins#0@@10|)))))))) (and (and (and (and (and (BetreeSpec.MessageInsertion.MessageInsertion_q (Lit |ins#0@@10|)) (BetreeSpec.MessageInsertion.MessageInsertion_q (Lit |ins#0@@10|))) (BetreeSpec.MessageInsertion.MessageInsertion_q (Lit |ins#0@@10|))) (|BetreeSpec.__default.AddMessageToNode#canCall| (Lit (BetreeSpec.MessageInsertion.oldroot (Lit |ins#0@@10|))) (Lit (BetreeSpec.MessageInsertion.key (Lit |ins#0@@10|))) (Lit (BetreeSpec.MessageInsertion.msg (Lit |ins#0@@10|))))) |BetreeGraph.__default.Root#canCall|) (= (BetreeSpec.__default.InsertionOps (Lit |ins#0@@10|)) (let ((|newroot#1| (Lit (BetreeSpec.__default.AddMessageToNode (Lit (BetreeSpec.MessageInsertion.oldroot (Lit |ins#0@@10|))) (Lit (BetreeSpec.MessageInsertion.key (Lit |ins#0@@10|))) (Lit (BetreeSpec.MessageInsertion.msg (Lit |ins#0@@10|))))))) (let ((|writeop#1| (Lit (|#BetreeGraph.Op.WriteOp| (Lit BetreeGraph.__default.Root) |newroot#1|)))) (Lit (|Seq#Build| (|Seq#Empty| BoxType) ($Box |writeop#1|)))))))) :qid |BetreeSpecidfy.191:25| :weight 3 :skolemid |4218| :pattern ( (BetreeSpec.__default.InsertionOps (Lit |ins#0@@10|))) ))))
(assert  (=> true (forall ((|flush#0| T@U) ) (!  (=> (and (= (type |flush#0|) DatatypeTypeType) (or (|BetreeSpec.__default.ValidFlush#canCall| |flush#0|) ($Is |flush#0| Tclass.BetreeSpec.NodeFlush))) true) :qid |BetreeSpecidfy.212:24| :skolemid |4219| :pattern ( (BetreeSpec.__default.ValidFlush |flush#0|)) ))))
(assert (forall ((|flush#0@@0| T@U) ) (!  (=> (and (= (type |flush#0@@0|) DatatypeTypeType) ($Is |flush#0@@0| Tclass.BetreeSpec.NodeFlush)) (= (|BetreeSpec.__default.ValidFlush#requires| |flush#0@@0|) true)) :qid |BetreeSpecidfy.212:24| :skolemid |4220| :pattern ( (|BetreeSpec.__default.ValidFlush#requires| |flush#0@@0|)) )))
(assert  (and (and (and (forall ((arg0@@699 T@U) (arg1@@325 T@U) (arg2@@194 T@U) ) (! (= (type (|lambda#149| arg0@@699 arg1@@325 arg2@@194)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#149| :pattern ( (|lambda#149| arg0@@699 arg1@@325 arg2@@194)) )) (forall ((arg0@@700 T@U) (arg1@@326 Bool) ) (! (= (type (|lambda#150| arg0@@700 arg1@@326)) (MapType0Type BoxType boolType)) :qid |funType:lambda#150| :pattern ( (|lambda#150| arg0@@700 arg1@@326)) ))) (forall ((arg0@@701 T@U) (arg1@@327 T@U) (arg2@@195 T@U) ) (! (= (type (|lambda#151| arg0@@701 arg1@@327 arg2@@195)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#151| :pattern ( (|lambda#151| arg0@@701 arg1@@327 arg2@@195)) ))) (forall ((arg0@@702 T@U) (arg1@@328 T@U) (arg2@@196 T@U) (arg3@@130 T@U) ) (! (= (type (|lambda#157| arg0@@702 arg1@@328 arg2@@196 arg3@@130)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#157| :pattern ( (|lambda#157| arg0@@702 arg1@@328 arg2@@196 arg3@@130)) ))))
(assert  (=> true (forall ((|flush#0@@1| T@U) ) (!  (=> (and (= (type |flush#0@@1|) DatatypeTypeType) (or (|BetreeSpec.__default.ValidFlush#canCall| |flush#0@@1|) ($Is |flush#0@@1| Tclass.BetreeSpec.NodeFlush))) (and (and (and (BetreeSpec.NodeFlush.NodeFlush_q |flush#0@@1|) (|BetreeSpec.__default.WFNode#canCall| (BetreeSpec.NodeFlush.parent |flush#0@@1|))) (=> (BetreeSpec.__default.WFNode (BetreeSpec.NodeFlush.parent |flush#0@@1|)) (and (and (BetreeSpec.NodeFlush.NodeFlush_q |flush#0@@1|) (|BetreeSpec.__default.WFNode#canCall| (BetreeSpec.NodeFlush.child |flush#0@@1|))) (=> (BetreeSpec.__default.WFNode (BetreeSpec.NodeFlush.child |flush#0@@1|)) (and (forall ((|key#0@@165| T@U) ) (!  (=> (and (= (type |key#0@@165|) (SeqType BoxType)) ($Is |key#0@@165| Tclass.KeyType.Key)) (and (BetreeSpec.NodeFlush.NodeFlush_q |flush#0@@1|) (=> (U_2_bool (MapType0Select (BetreeSpec.NodeFlush.flushedKeys |flush#0@@1|) ($Box |key#0@@165|))) (BetreeSpec.NodeFlush.NodeFlush_q |flush#0@@1|)))) :qid |BetreeSpecidfy.217:16| :skolemid |4223| :pattern ( (MapType0Select (BetreeSpec.NodeFlush.movedKeys |flush#0@@1|) ($Box |key#0@@165|))) :pattern ( (MapType0Select (BetreeSpec.NodeFlush.flushedKeys |flush#0@@1|) ($Box |key#0@@165|))) )) (=> (forall ((|key#0@@166| T@U) ) (!  (=> (= (type |key#0@@166|) (SeqType BoxType)) (=> (and ($Is |key#0@@166| Tclass.KeyType.Key) (U_2_bool (MapType0Select (BetreeSpec.NodeFlush.flushedKeys |flush#0@@1|) ($Box |key#0@@166|)))) (U_2_bool (MapType0Select (BetreeSpec.NodeFlush.movedKeys |flush#0@@1|) ($Box |key#0@@166|))))) :qid |BetreeSpecidfy.217:16| :skolemid |4229| :pattern ( (MapType0Select (BetreeSpec.NodeFlush.movedKeys |flush#0@@1|) ($Box |key#0@@166|))) :pattern ( (MapType0Select (BetreeSpec.NodeFlush.flushedKeys |flush#0@@1|) ($Box |key#0@@166|))) )) (and (forall ((|key#1@@13| T@U) ) (!  (=> (and (= (type |key#1@@13|) (SeqType BoxType)) ($Is |key#1@@13| Tclass.KeyType.Key)) (and (BetreeSpec.NodeFlush.NodeFlush_q |flush#0@@1|) (=> (U_2_bool (MapType0Select (BetreeSpec.NodeFlush.movedKeys |flush#0@@1|) ($Box |key#1@@13|))) (and (and (and (BetreeSpec.NodeFlush.NodeFlush_q |flush#0@@1|) (BetreeGraph.Node.Node_q (BetreeSpec.NodeFlush.parent |flush#0@@1|))) (BetreeSpec.NodeFlush.NodeFlush_q |flush#0@@1|)) (|Maps.__default.IMapsTo#canCall| Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (BetreeSpec.NodeFlush.parent |flush#0@@1|)) ($Box |key#1@@13|) (BetreeSpec.NodeFlush.childref |flush#0@@1|)))))) :qid |BetreeSpecidfy.218:16| :skolemid |4224| :pattern ( (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (BetreeSpec.NodeFlush.parent |flush#0@@1|)) ($Box |key#1@@13|) (BetreeSpec.NodeFlush.childref |flush#0@@1|))) :pattern ( (MapType0Select (BetreeSpec.NodeFlush.movedKeys |flush#0@@1|) ($Box |key#1@@13|))) )) (=> (forall ((|key#1@@14| T@U) ) (!  (=> (= (type |key#1@@14|) (SeqType BoxType)) (=> (and ($Is |key#1@@14| Tclass.KeyType.Key) (U_2_bool (MapType0Select (BetreeSpec.NodeFlush.movedKeys |flush#0@@1|) ($Box |key#1@@14|)))) (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (BetreeSpec.NodeFlush.parent |flush#0@@1|)) ($Box |key#1@@14|) (BetreeSpec.NodeFlush.childref |flush#0@@1|)))) :qid |BetreeSpecidfy.218:16| :skolemid |4228| :pattern ( (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (BetreeSpec.NodeFlush.parent |flush#0@@1|)) ($Box |key#1@@14|) (BetreeSpec.NodeFlush.childref |flush#0@@1|))) :pattern ( (MapType0Select (BetreeSpec.NodeFlush.movedKeys |flush#0@@1|) ($Box |key#1@@14|))) )) (and (and (and (BetreeSpec.NodeFlush.NodeFlush_q |flush#0@@1|) (BetreeGraph.Node.Node_q (BetreeSpec.NodeFlush.newparent |flush#0@@1|))) (forall ((|k#0@@64| T@U) ) (!  (=> (and (= (type |k#0@@64|) (SeqType BoxType)) ($Is |k#0@@64| (TSeq Tclass.NativeTypes.byte))) (and (and (BetreeSpec.NodeFlush.NodeFlush_q |flush#0@@1|) (BetreeGraph.Node.Node_q (BetreeSpec.NodeFlush.parent |flush#0@@1|))) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.NodeFlush.parent |flush#0@@1|))) ($Box |k#0@@64|))) (and (and (BetreeSpec.NodeFlush.NodeFlush_q |flush#0@@1|) (=> (U_2_bool (MapType0Select (BetreeSpec.NodeFlush.movedKeys |flush#0@@1|) ($Box |k#0@@64|))) (BetreeSpec.NodeFlush.NodeFlush_q |flush#0@@1|))) (=> (not (U_2_bool (MapType0Select (BetreeSpec.NodeFlush.movedKeys |flush#0@@1|) ($Box |k#0@@64|)))) (and (BetreeSpec.NodeFlush.NodeFlush_q |flush#0@@1|) (BetreeGraph.Node.Node_q (BetreeSpec.NodeFlush.parent |flush#0@@1|)))))))) :qid |BetreeSpecidfy.220:42| :skolemid |4225| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.NodeFlush.parent |flush#0@@1|))) ($Box |k#0@@64|))) :pattern ( (MapType0Select (BetreeSpec.NodeFlush.movedKeys |flush#0@@1|) ($Box |k#0@@64|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.NodeFlush.parent |flush#0@@1|))) ($Box |k#0@@64|))) ))) (=> (|IMap#Equal| (BetreeGraph.Node.children (BetreeSpec.NodeFlush.newparent |flush#0@@1|)) (|IMap#Glue| (|lambda#2| (TSeq Tclass.NativeTypes.byte) (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.NodeFlush.parent |flush#0@@1|)))) (|lambda#149| (BetreeSpec.NodeFlush.movedKeys |flush#0@@1|) (BetreeSpec.NodeFlush.newchildref |flush#0@@1|) (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.NodeFlush.parent |flush#0@@1|)))) (TIMap (TSeq Tclass.NativeTypes.byte) Tclass.ReferenceType.Reference))) (and (and (and (BetreeSpec.NodeFlush.NodeFlush_q |flush#0@@1|) (BetreeGraph.Node.Node_q (BetreeSpec.NodeFlush.newparent |flush#0@@1|))) (forall ((|k#1@@14| T@U) ) (!  (=> (and (and (= (type |k#1@@14|) (SeqType BoxType)) ($Is |k#1@@14| Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U true)))) (and (and (BetreeSpec.NodeFlush.NodeFlush_q |flush#0@@1|) (=> (U_2_bool (MapType0Select (BetreeSpec.NodeFlush.flushedKeys |flush#0@@1|) ($Box |k#1@@14|))) |ValueMessage.__default.IdentityMessage#canCall|)) (=> (not (U_2_bool (MapType0Select (BetreeSpec.NodeFlush.flushedKeys |flush#0@@1|) ($Box |k#1@@14|)))) (and (BetreeSpec.NodeFlush.NodeFlush_q |flush#0@@1|) (BetreeGraph.Node.Node_q (BetreeSpec.NodeFlush.parent |flush#0@@1|)))))) :qid |BetreeSpecidfy.221:40| :skolemid |4226| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeGraph.Node.buffer (BetreeSpec.NodeFlush.parent |flush#0@@1|))) ($Box |k#1@@14|)))) :pattern ( (MapType0Select (BetreeSpec.NodeFlush.flushedKeys |flush#0@@1|) ($Box |k#1@@14|))) ))) (=> (|IMap#Equal| (BetreeGraph.Node.buffer (BetreeSpec.NodeFlush.newparent |flush#0@@1|)) (|IMap#Glue| (|lambda#150| Tclass.KeyType.Key (U_2_bool (Lit (bool_2_U true)))) (|lambda#151| (BetreeSpec.NodeFlush.flushedKeys |flush#0@@1|) ValueMessage.__default.IdentityMessage (|IMap#Elements| (BetreeGraph.Node.buffer (BetreeSpec.NodeFlush.parent |flush#0@@1|)))) (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) (and (and (and (BetreeSpec.NodeFlush.NodeFlush_q |flush#0@@1|) (BetreeGraph.Node.Node_q (BetreeSpec.NodeFlush.newchild |flush#0@@1|))) (and (BetreeSpec.NodeFlush.NodeFlush_q |flush#0@@1|) (BetreeGraph.Node.Node_q (BetreeSpec.NodeFlush.child |flush#0@@1|)))) (=> (|IMap#Equal| (BetreeGraph.Node.children (BetreeSpec.NodeFlush.newchild |flush#0@@1|)) (BetreeGraph.Node.children (BetreeSpec.NodeFlush.child |flush#0@@1|))) (and (and (BetreeSpec.NodeFlush.NodeFlush_q |flush#0@@1|) (BetreeGraph.Node.Node_q (BetreeSpec.NodeFlush.newchild |flush#0@@1|))) (forall ((|k#2@@10| T@U) ) (!  (=> (and (and (= (type |k#2@@10|) (SeqType BoxType)) ($Is |k#2@@10| Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U true)))) (and (and (BetreeSpec.NodeFlush.NodeFlush_q |flush#0@@1|) (=> (U_2_bool (MapType0Select (BetreeSpec.NodeFlush.flushedKeys |flush#0@@1|) ($Box |k#2@@10|))) (and (and (and (BetreeSpec.NodeFlush.NodeFlush_q |flush#0@@1|) (BetreeGraph.Node.Node_q (BetreeSpec.NodeFlush.parent |flush#0@@1|))) (and (BetreeSpec.NodeFlush.NodeFlush_q |flush#0@@1|) (BetreeGraph.Node.Node_q (BetreeSpec.NodeFlush.child |flush#0@@1|)))) (|ValueMessage.__default.Merge#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeGraph.Node.buffer (BetreeSpec.NodeFlush.parent |flush#0@@1|))) ($Box |k#2@@10|))) ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeGraph.Node.buffer (BetreeSpec.NodeFlush.child |flush#0@@1|))) ($Box |k#2@@10|))))))) (=> (not (U_2_bool (MapType0Select (BetreeSpec.NodeFlush.flushedKeys |flush#0@@1|) ($Box |k#2@@10|)))) (and (BetreeSpec.NodeFlush.NodeFlush_q |flush#0@@1|) (BetreeGraph.Node.Node_q (BetreeSpec.NodeFlush.child |flush#0@@1|)))))) :qid |BetreeSpecidfy.223:39| :skolemid |4227| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeGraph.Node.buffer (BetreeSpec.NodeFlush.child |flush#0@@1|))) ($Box |k#2@@10|)))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeGraph.Node.buffer (BetreeSpec.NodeFlush.parent |flush#0@@1|))) ($Box |k#2@@10|)))) :pattern ( (MapType0Select (BetreeSpec.NodeFlush.flushedKeys |flush#0@@1|) ($Box |k#2@@10|))) ))))))))))))))))) (= (BetreeSpec.__default.ValidFlush |flush#0@@1|)  (and (and (and (and (and (and (and (BetreeSpec.__default.WFNode (BetreeSpec.NodeFlush.parent |flush#0@@1|)) (BetreeSpec.__default.WFNode (BetreeSpec.NodeFlush.child |flush#0@@1|))) (forall ((|key#0@@167| T@U) ) (!  (=> (= (type |key#0@@167|) (SeqType BoxType)) (=> (and ($Is |key#0@@167| Tclass.KeyType.Key) (U_2_bool (MapType0Select (BetreeSpec.NodeFlush.flushedKeys |flush#0@@1|) ($Box |key#0@@167|)))) (U_2_bool (MapType0Select (BetreeSpec.NodeFlush.movedKeys |flush#0@@1|) ($Box |key#0@@167|))))) :qid |BetreeSpecidfy.217:16| :skolemid |4221| :pattern ( (MapType0Select (BetreeSpec.NodeFlush.movedKeys |flush#0@@1|) ($Box |key#0@@167|))) :pattern ( (MapType0Select (BetreeSpec.NodeFlush.flushedKeys |flush#0@@1|) ($Box |key#0@@167|))) ))) (forall ((|key#1@@15| T@U) ) (!  (=> (= (type |key#1@@15|) (SeqType BoxType)) (=> (and ($Is |key#1@@15| Tclass.KeyType.Key) (U_2_bool (MapType0Select (BetreeSpec.NodeFlush.movedKeys |flush#0@@1|) ($Box |key#1@@15|)))) (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (BetreeSpec.NodeFlush.parent |flush#0@@1|)) ($Box |key#1@@15|) (BetreeSpec.NodeFlush.childref |flush#0@@1|)))) :qid |BetreeSpecidfy.218:16| :skolemid |4222| :pattern ( (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (BetreeSpec.NodeFlush.parent |flush#0@@1|)) ($Box |key#1@@15|) (BetreeSpec.NodeFlush.childref |flush#0@@1|))) :pattern ( (MapType0Select (BetreeSpec.NodeFlush.movedKeys |flush#0@@1|) ($Box |key#1@@15|))) ))) (|IMap#Equal| (BetreeGraph.Node.children (BetreeSpec.NodeFlush.newparent |flush#0@@1|)) (|IMap#Glue| (|lambda#2| (TSeq Tclass.NativeTypes.byte) (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.NodeFlush.parent |flush#0@@1|)))) (|lambda#149| (BetreeSpec.NodeFlush.movedKeys |flush#0@@1|) (BetreeSpec.NodeFlush.newchildref |flush#0@@1|) (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.NodeFlush.parent |flush#0@@1|)))) (TIMap (TSeq Tclass.NativeTypes.byte) Tclass.ReferenceType.Reference)))) (|IMap#Equal| (BetreeGraph.Node.buffer (BetreeSpec.NodeFlush.newparent |flush#0@@1|)) (|IMap#Glue| (|lambda#150| Tclass.KeyType.Key (U_2_bool (Lit (bool_2_U true)))) (|lambda#151| (BetreeSpec.NodeFlush.flushedKeys |flush#0@@1|) ValueMessage.__default.IdentityMessage (|IMap#Elements| (BetreeGraph.Node.buffer (BetreeSpec.NodeFlush.parent |flush#0@@1|)))) (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (|IMap#Equal| (BetreeGraph.Node.children (BetreeSpec.NodeFlush.newchild |flush#0@@1|)) (BetreeGraph.Node.children (BetreeSpec.NodeFlush.child |flush#0@@1|)))) (|IMap#Equal| (BetreeGraph.Node.buffer (BetreeSpec.NodeFlush.newchild |flush#0@@1|)) (|IMap#Glue| (|lambda#150| Tclass.KeyType.Key (U_2_bool (Lit (bool_2_U true)))) (|lambda#157| (BetreeSpec.NodeFlush.flushedKeys |flush#0@@1|) (|IMap#Elements| (BetreeGraph.Node.buffer (BetreeSpec.NodeFlush.parent |flush#0@@1|))) (|IMap#Elements| (BetreeGraph.Node.buffer (BetreeSpec.NodeFlush.child |flush#0@@1|))) (|IMap#Elements| (BetreeGraph.Node.buffer (BetreeSpec.NodeFlush.child |flush#0@@1|)))) (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))))) :qid |BetreeSpecidfy.212:24| :skolemid |4230| :pattern ( (BetreeSpec.__default.ValidFlush |flush#0@@1|)) ))))
(assert  (=> true (forall ((|flush#0@@2| T@U) ) (!  (=> (and (= (type |flush#0@@2|) DatatypeTypeType) (or (|BetreeSpec.__default.ValidFlush#canCall| (Lit |flush#0@@2|)) ($Is |flush#0@@2| Tclass.BetreeSpec.NodeFlush))) (and (and (and (BetreeSpec.NodeFlush.NodeFlush_q (Lit |flush#0@@2|)) (|BetreeSpec.__default.WFNode#canCall| (Lit (BetreeSpec.NodeFlush.parent (Lit |flush#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.__default.WFNode (Lit (BetreeSpec.NodeFlush.parent (Lit |flush#0@@2|))))))) (and (and (BetreeSpec.NodeFlush.NodeFlush_q (Lit |flush#0@@2|)) (|BetreeSpec.__default.WFNode#canCall| (Lit (BetreeSpec.NodeFlush.child (Lit |flush#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.__default.WFNode (Lit (BetreeSpec.NodeFlush.child (Lit |flush#0@@2|))))))) (and (forall ((|key#2@@1| T@U) ) (!  (=> (and (= (type |key#2@@1|) (SeqType BoxType)) ($Is |key#2@@1| Tclass.KeyType.Key)) (and (BetreeSpec.NodeFlush.NodeFlush_q (Lit |flush#0@@2|)) (=> (U_2_bool (MapType0Select (Lit (BetreeSpec.NodeFlush.flushedKeys (Lit |flush#0@@2|))) ($Box |key#2@@1|))) (BetreeSpec.NodeFlush.NodeFlush_q (Lit |flush#0@@2|))))) :qid |BetreeSpecidfy.217:16| :skolemid |4233| :pattern ( (MapType0Select (BetreeSpec.NodeFlush.movedKeys |flush#0@@2|) ($Box |key#2@@1|))) :pattern ( (MapType0Select (BetreeSpec.NodeFlush.flushedKeys |flush#0@@2|) ($Box |key#2@@1|))) )) (=> (forall ((|key#2@@2| T@U) ) (!  (=> (= (type |key#2@@2|) (SeqType BoxType)) (=> (and ($Is |key#2@@2| Tclass.KeyType.Key) (U_2_bool (MapType0Select (Lit (BetreeSpec.NodeFlush.flushedKeys (Lit |flush#0@@2|))) ($Box |key#2@@2|)))) (U_2_bool (MapType0Select (Lit (BetreeSpec.NodeFlush.movedKeys (Lit |flush#0@@2|))) ($Box |key#2@@2|))))) :qid |BetreeSpecidfy.217:16| :skolemid |4239| :pattern ( (MapType0Select (BetreeSpec.NodeFlush.movedKeys |flush#0@@2|) ($Box |key#2@@2|))) :pattern ( (MapType0Select (BetreeSpec.NodeFlush.flushedKeys |flush#0@@2|) ($Box |key#2@@2|))) )) (and (forall ((|key#3@@1| T@U) ) (!  (=> (and (= (type |key#3@@1|) (SeqType BoxType)) ($Is |key#3@@1| Tclass.KeyType.Key)) (and (BetreeSpec.NodeFlush.NodeFlush_q (Lit |flush#0@@2|)) (=> (U_2_bool (MapType0Select (Lit (BetreeSpec.NodeFlush.movedKeys (Lit |flush#0@@2|))) ($Box |key#3@@1|))) (and (and (and (BetreeSpec.NodeFlush.NodeFlush_q (Lit |flush#0@@2|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.NodeFlush.parent (Lit |flush#0@@2|))))) (BetreeSpec.NodeFlush.NodeFlush_q (Lit |flush#0@@2|))) (|Maps.__default.IMapsTo#canCall| Tclass.KeyType.Key Tclass.ReferenceType.Reference (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.NodeFlush.parent (Lit |flush#0@@2|))))) ($Box |key#3@@1|) (Lit (BetreeSpec.NodeFlush.childref (Lit |flush#0@@2|)))))))) :qid |BetreeSpecidfy.218:16| :skolemid |4234| :pattern ( (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (BetreeSpec.NodeFlush.parent |flush#0@@2|)) ($Box |key#3@@1|) (BetreeSpec.NodeFlush.childref |flush#0@@2|))) :pattern ( (MapType0Select (BetreeSpec.NodeFlush.movedKeys |flush#0@@2|) ($Box |key#3@@1|))) )) (=> (forall ((|key#3@@2| T@U) ) (!  (=> (= (type |key#3@@2|) (SeqType BoxType)) (=> (and ($Is |key#3@@2| Tclass.KeyType.Key) (U_2_bool (MapType0Select (Lit (BetreeSpec.NodeFlush.movedKeys (Lit |flush#0@@2|))) ($Box |key#3@@2|)))) (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.NodeFlush.parent (Lit |flush#0@@2|))))) ($Box |key#3@@2|) (Lit (BetreeSpec.NodeFlush.childref (Lit |flush#0@@2|)))))) :qid |BetreeSpecidfy.218:16| :skolemid |4238| :pattern ( (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (BetreeSpec.NodeFlush.parent |flush#0@@2|)) ($Box |key#3@@2|) (BetreeSpec.NodeFlush.childref |flush#0@@2|))) :pattern ( (MapType0Select (BetreeSpec.NodeFlush.movedKeys |flush#0@@2|) ($Box |key#3@@2|))) )) (and (and (and (BetreeSpec.NodeFlush.NodeFlush_q (Lit |flush#0@@2|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.NodeFlush.newparent (Lit |flush#0@@2|))))) (forall ((|k#0@@65| T@U) ) (!  (=> (and (= (type |k#0@@65|) (SeqType BoxType)) ($Is |k#0@@65| (TSeq Tclass.NativeTypes.byte))) (and (and (BetreeSpec.NodeFlush.NodeFlush_q (Lit |flush#0@@2|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.NodeFlush.parent (Lit |flush#0@@2|))))) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (Lit (BetreeSpec.NodeFlush.parent (Lit |flush#0@@2|))))) ($Box |k#0@@65|))) (and (and (BetreeSpec.NodeFlush.NodeFlush_q (Lit |flush#0@@2|)) (=> (U_2_bool (MapType0Select (Lit (BetreeSpec.NodeFlush.movedKeys (Lit |flush#0@@2|))) ($Box |k#0@@65|))) (BetreeSpec.NodeFlush.NodeFlush_q (Lit |flush#0@@2|)))) (=> (not (U_2_bool (MapType0Select (Lit (BetreeSpec.NodeFlush.movedKeys (Lit |flush#0@@2|))) ($Box |k#0@@65|)))) (and (BetreeSpec.NodeFlush.NodeFlush_q (Lit |flush#0@@2|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.NodeFlush.parent (Lit |flush#0@@2|)))))))))) :qid |BetreeSpecidfy.220:42| :skolemid |4235| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.NodeFlush.parent |flush#0@@2|))) ($Box |k#0@@65|))) :pattern ( (MapType0Select (BetreeSpec.NodeFlush.movedKeys |flush#0@@2|) ($Box |k#0@@65|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.NodeFlush.parent |flush#0@@2|))) ($Box |k#0@@65|))) ))) (=> (|IMap#Equal| (BetreeGraph.Node.children (Lit (BetreeSpec.NodeFlush.newparent (Lit |flush#0@@2|)))) (|IMap#Glue| (|lambda#2| (TSeq Tclass.NativeTypes.byte) (|IMap#Domain| (BetreeGraph.Node.children (Lit (BetreeSpec.NodeFlush.parent (Lit |flush#0@@2|)))))) (|lambda#149| (Lit (BetreeSpec.NodeFlush.movedKeys (Lit |flush#0@@2|))) (BetreeSpec.NodeFlush.newchildref (Lit |flush#0@@2|)) (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.NodeFlush.parent (Lit |flush#0@@2|))))))) (TIMap (TSeq Tclass.NativeTypes.byte) Tclass.ReferenceType.Reference))) (and (and (and (BetreeSpec.NodeFlush.NodeFlush_q (Lit |flush#0@@2|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.NodeFlush.newparent (Lit |flush#0@@2|))))) (forall ((|k#1@@15| T@U) ) (!  (=> (and (and (= (type |k#1@@15|) (SeqType BoxType)) ($Is |k#1@@15| Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U true)))) (and (and (BetreeSpec.NodeFlush.NodeFlush_q (Lit |flush#0@@2|)) (=> (U_2_bool (MapType0Select (Lit (BetreeSpec.NodeFlush.flushedKeys (Lit |flush#0@@2|))) ($Box |k#1@@15|))) |ValueMessage.__default.IdentityMessage#canCall|)) (=> (not (U_2_bool (MapType0Select (Lit (BetreeSpec.NodeFlush.flushedKeys (Lit |flush#0@@2|))) ($Box |k#1@@15|)))) (and (BetreeSpec.NodeFlush.NodeFlush_q (Lit |flush#0@@2|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.NodeFlush.parent (Lit |flush#0@@2|)))))))) :qid |BetreeSpecidfy.221:40| :skolemid |4236| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeGraph.Node.buffer (BetreeSpec.NodeFlush.parent |flush#0@@2|))) ($Box |k#1@@15|)))) :pattern ( (MapType0Select (BetreeSpec.NodeFlush.flushedKeys |flush#0@@2|) ($Box |k#1@@15|))) ))) (=> (|IMap#Equal| (BetreeGraph.Node.buffer (Lit (BetreeSpec.NodeFlush.newparent (Lit |flush#0@@2|)))) (|IMap#Glue| (|lambda#150| Tclass.KeyType.Key (U_2_bool (Lit (bool_2_U true)))) (|lambda#151| (Lit (BetreeSpec.NodeFlush.flushedKeys (Lit |flush#0@@2|))) ValueMessage.__default.IdentityMessage (|IMap#Elements| (Lit (BetreeGraph.Node.buffer (Lit (BetreeSpec.NodeFlush.parent (Lit |flush#0@@2|))))))) (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) (and (and (and (BetreeSpec.NodeFlush.NodeFlush_q (Lit |flush#0@@2|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.NodeFlush.newchild (Lit |flush#0@@2|))))) (and (BetreeSpec.NodeFlush.NodeFlush_q (Lit |flush#0@@2|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.NodeFlush.child (Lit |flush#0@@2|)))))) (=> (|IMap#Equal| (BetreeGraph.Node.children (Lit (BetreeSpec.NodeFlush.newchild (Lit |flush#0@@2|)))) (BetreeGraph.Node.children (Lit (BetreeSpec.NodeFlush.child (Lit |flush#0@@2|))))) (and (and (BetreeSpec.NodeFlush.NodeFlush_q (Lit |flush#0@@2|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.NodeFlush.newchild (Lit |flush#0@@2|))))) (forall ((|k#2@@11| T@U) ) (!  (=> (and (and (= (type |k#2@@11|) (SeqType BoxType)) ($Is |k#2@@11| Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U true)))) (and (and (BetreeSpec.NodeFlush.NodeFlush_q (Lit |flush#0@@2|)) (=> (U_2_bool (MapType0Select (Lit (BetreeSpec.NodeFlush.flushedKeys (Lit |flush#0@@2|))) ($Box |k#2@@11|))) (and (and (and (BetreeSpec.NodeFlush.NodeFlush_q (Lit |flush#0@@2|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.NodeFlush.parent (Lit |flush#0@@2|))))) (and (BetreeSpec.NodeFlush.NodeFlush_q (Lit |flush#0@@2|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.NodeFlush.child (Lit |flush#0@@2|)))))) (|ValueMessage.__default.Merge#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.buffer (Lit (BetreeSpec.NodeFlush.parent (Lit |flush#0@@2|)))))) ($Box |k#2@@11|))) ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.buffer (Lit (BetreeSpec.NodeFlush.child (Lit |flush#0@@2|)))))) ($Box |k#2@@11|))))))) (=> (not (U_2_bool (MapType0Select (Lit (BetreeSpec.NodeFlush.flushedKeys (Lit |flush#0@@2|))) ($Box |k#2@@11|)))) (and (BetreeSpec.NodeFlush.NodeFlush_q (Lit |flush#0@@2|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.NodeFlush.child (Lit |flush#0@@2|)))))))) :qid |BetreeSpecidfy.223:39| :skolemid |4237| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeGraph.Node.buffer (BetreeSpec.NodeFlush.child |flush#0@@2|))) ($Box |k#2@@11|)))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeGraph.Node.buffer (BetreeSpec.NodeFlush.parent |flush#0@@2|))) ($Box |k#2@@11|)))) :pattern ( (MapType0Select (BetreeSpec.NodeFlush.flushedKeys |flush#0@@2|) ($Box |k#2@@11|))) ))))))))))))))))) (= (BetreeSpec.__default.ValidFlush (Lit |flush#0@@2|))  (and (and (and (and (and (and (and (BetreeSpec.__default.WFNode (Lit (BetreeSpec.NodeFlush.parent (Lit |flush#0@@2|)))) (BetreeSpec.__default.WFNode (Lit (BetreeSpec.NodeFlush.child (Lit |flush#0@@2|))))) (forall ((|key#2@@3| T@U) ) (!  (=> (= (type |key#2@@3|) (SeqType BoxType)) (=> (and ($Is |key#2@@3| Tclass.KeyType.Key) (U_2_bool (MapType0Select (Lit (BetreeSpec.NodeFlush.flushedKeys (Lit |flush#0@@2|))) ($Box |key#2@@3|)))) (U_2_bool (MapType0Select (Lit (BetreeSpec.NodeFlush.movedKeys (Lit |flush#0@@2|))) ($Box |key#2@@3|))))) :qid |BetreeSpecidfy.217:16| :skolemid |4231| :pattern ( (MapType0Select (BetreeSpec.NodeFlush.movedKeys |flush#0@@2|) ($Box |key#2@@3|))) :pattern ( (MapType0Select (BetreeSpec.NodeFlush.flushedKeys |flush#0@@2|) ($Box |key#2@@3|))) ))) (forall ((|key#3@@3| T@U) ) (!  (=> (= (type |key#3@@3|) (SeqType BoxType)) (=> (and ($Is |key#3@@3| Tclass.KeyType.Key) (U_2_bool (MapType0Select (Lit (BetreeSpec.NodeFlush.movedKeys (Lit |flush#0@@2|))) ($Box |key#3@@3|)))) (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.NodeFlush.parent (Lit |flush#0@@2|))))) ($Box |key#3@@3|) (Lit (BetreeSpec.NodeFlush.childref (Lit |flush#0@@2|)))))) :qid |BetreeSpecidfy.218:16| :skolemid |4232| :pattern ( (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (BetreeSpec.NodeFlush.parent |flush#0@@2|)) ($Box |key#3@@3|) (BetreeSpec.NodeFlush.childref |flush#0@@2|))) :pattern ( (MapType0Select (BetreeSpec.NodeFlush.movedKeys |flush#0@@2|) ($Box |key#3@@3|))) ))) (|IMap#Equal| (BetreeGraph.Node.children (Lit (BetreeSpec.NodeFlush.newparent (Lit |flush#0@@2|)))) (|IMap#Glue| (|lambda#2| (TSeq Tclass.NativeTypes.byte) (|IMap#Domain| (BetreeGraph.Node.children (Lit (BetreeSpec.NodeFlush.parent (Lit |flush#0@@2|)))))) (|lambda#149| (Lit (BetreeSpec.NodeFlush.movedKeys (Lit |flush#0@@2|))) (BetreeSpec.NodeFlush.newchildref (Lit |flush#0@@2|)) (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.NodeFlush.parent (Lit |flush#0@@2|))))))) (TIMap (TSeq Tclass.NativeTypes.byte) Tclass.ReferenceType.Reference)))) (|IMap#Equal| (BetreeGraph.Node.buffer (Lit (BetreeSpec.NodeFlush.newparent (Lit |flush#0@@2|)))) (|IMap#Glue| (|lambda#150| Tclass.KeyType.Key (U_2_bool (Lit (bool_2_U true)))) (|lambda#151| (Lit (BetreeSpec.NodeFlush.flushedKeys (Lit |flush#0@@2|))) ValueMessage.__default.IdentityMessage (|IMap#Elements| (Lit (BetreeGraph.Node.buffer (Lit (BetreeSpec.NodeFlush.parent (Lit |flush#0@@2|))))))) (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (|IMap#Equal| (BetreeGraph.Node.children (Lit (BetreeSpec.NodeFlush.newchild (Lit |flush#0@@2|)))) (BetreeGraph.Node.children (Lit (BetreeSpec.NodeFlush.child (Lit |flush#0@@2|)))))) (|IMap#Equal| (BetreeGraph.Node.buffer (Lit (BetreeSpec.NodeFlush.newchild (Lit |flush#0@@2|)))) (|IMap#Glue| (|lambda#150| Tclass.KeyType.Key (U_2_bool (Lit (bool_2_U true)))) (|lambda#157| (Lit (BetreeSpec.NodeFlush.flushedKeys (Lit |flush#0@@2|))) (|IMap#Elements| (Lit (BetreeGraph.Node.buffer (Lit (BetreeSpec.NodeFlush.parent (Lit |flush#0@@2|)))))) (|IMap#Elements| (Lit (BetreeGraph.Node.buffer (Lit (BetreeSpec.NodeFlush.child (Lit |flush#0@@2|)))))) (|IMap#Elements| (Lit (BetreeGraph.Node.buffer (Lit (BetreeSpec.NodeFlush.child (Lit |flush#0@@2|))))))) (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))))) :qid |BetreeSpecidfy.212:24| :weight 3 :skolemid |4240| :pattern ( (BetreeSpec.__default.ValidFlush (Lit |flush#0@@2|))) ))))
(assert (forall ((arg0@@703 T@U) ) (! (= (type (BetreeSpec.__default.FlushReads arg0@@703)) (SeqType BoxType)) :qid |funType:BetreeSpec.__default.FlushReads| :pattern ( (BetreeSpec.__default.FlushReads arg0@@703)) )))
(assert  (=> true (forall ((|flush#0@@3| T@U) ) (!  (=> (and (= (type |flush#0@@3|) DatatypeTypeType) (or (|BetreeSpec.__default.FlushReads#canCall| |flush#0@@3|) (and ($Is |flush#0@@3| Tclass.BetreeSpec.NodeFlush) (BetreeSpec.__default.ValidFlush |flush#0@@3|)))) ($Is (BetreeSpec.__default.FlushReads |flush#0@@3|) (TSeq Tclass.BetreeGraph.ReadOp))) :qid |BetreeSpecidfy.226:23| :skolemid |4241| :pattern ( (BetreeSpec.__default.FlushReads |flush#0@@3|)) ))))
(assert (forall ((|flush#0@@4| T@U) ) (!  (=> (and (= (type |flush#0@@4|) DatatypeTypeType) ($Is |flush#0@@4| Tclass.BetreeSpec.NodeFlush)) (= (|BetreeSpec.__default.FlushReads#requires| |flush#0@@4|) (BetreeSpec.__default.ValidFlush |flush#0@@4|))) :qid |BetreeSpecidfy.226:23| :skolemid |4242| :pattern ( (|BetreeSpec.__default.FlushReads#requires| |flush#0@@4|)) )))
(assert  (=> true (forall ((|flush#0@@5| T@U) ) (!  (=> (and (= (type |flush#0@@5|) DatatypeTypeType) (or (|BetreeSpec.__default.FlushReads#canCall| |flush#0@@5|) (and ($Is |flush#0@@5| Tclass.BetreeSpec.NodeFlush) (BetreeSpec.__default.ValidFlush |flush#0@@5|)))) (and (and (and (BetreeSpec.NodeFlush.NodeFlush_q |flush#0@@5|) (BetreeSpec.NodeFlush.NodeFlush_q |flush#0@@5|)) (and (BetreeSpec.NodeFlush.NodeFlush_q |flush#0@@5|) (BetreeSpec.NodeFlush.NodeFlush_q |flush#0@@5|))) (= (BetreeSpec.__default.FlushReads |flush#0@@5|) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#BetreeGraph.ReadOp.ReadOp| (BetreeSpec.NodeFlush.parentref |flush#0@@5|) (BetreeSpec.NodeFlush.parent |flush#0@@5|)))) ($Box (|#BetreeGraph.ReadOp.ReadOp| (BetreeSpec.NodeFlush.childref |flush#0@@5|) (BetreeSpec.NodeFlush.child |flush#0@@5|))))))) :qid |BetreeSpecidfy.226:23| :skolemid |4243| :pattern ( (BetreeSpec.__default.FlushReads |flush#0@@5|)) ))))
(assert  (=> true (forall ((|flush#0@@6| T@U) ) (!  (=> (and (= (type |flush#0@@6|) DatatypeTypeType) (or (|BetreeSpec.__default.FlushReads#canCall| (Lit |flush#0@@6|)) (and ($Is |flush#0@@6| Tclass.BetreeSpec.NodeFlush) (U_2_bool (Lit (bool_2_U (BetreeSpec.__default.ValidFlush (Lit |flush#0@@6|)))))))) (and (and (and (BetreeSpec.NodeFlush.NodeFlush_q (Lit |flush#0@@6|)) (BetreeSpec.NodeFlush.NodeFlush_q (Lit |flush#0@@6|))) (and (BetreeSpec.NodeFlush.NodeFlush_q (Lit |flush#0@@6|)) (BetreeSpec.NodeFlush.NodeFlush_q (Lit |flush#0@@6|)))) (= (BetreeSpec.__default.FlushReads (Lit |flush#0@@6|)) (Lit (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#BetreeGraph.ReadOp.ReadOp| (Lit (BetreeSpec.NodeFlush.parentref (Lit |flush#0@@6|))) (Lit (BetreeSpec.NodeFlush.parent (Lit |flush#0@@6|))))))) ($Box (Lit (|#BetreeGraph.ReadOp.ReadOp| (Lit (BetreeSpec.NodeFlush.childref (Lit |flush#0@@6|))) (Lit (BetreeSpec.NodeFlush.child (Lit |flush#0@@6|))))))))))) :qid |BetreeSpecidfy.226:23| :weight 3 :skolemid |4244| :pattern ( (BetreeSpec.__default.FlushReads (Lit |flush#0@@6|))) ))))
(assert (forall ((arg0@@704 T@U) ) (! (= (type (BetreeSpec.__default.FlushOps arg0@@704)) (SeqType BoxType)) :qid |funType:BetreeSpec.__default.FlushOps| :pattern ( (BetreeSpec.__default.FlushOps arg0@@704)) )))
(assert  (=> true (forall ((|flush#0@@7| T@U) ) (!  (=> (and (= (type |flush#0@@7|) DatatypeTypeType) (or (|BetreeSpec.__default.FlushOps#canCall| |flush#0@@7|) (and ($Is |flush#0@@7| Tclass.BetreeSpec.NodeFlush) (BetreeSpec.__default.ValidFlush |flush#0@@7|)))) ($Is (BetreeSpec.__default.FlushOps |flush#0@@7|) (TSeq Tclass.BetreeGraph.Op))) :qid |BetreeSpecidfy.235:21| :skolemid |4245| :pattern ( (BetreeSpec.__default.FlushOps |flush#0@@7|)) ))))
(assert (forall ((|flush#0@@8| T@U) ) (!  (=> (and (= (type |flush#0@@8|) DatatypeTypeType) ($Is |flush#0@@8| Tclass.BetreeSpec.NodeFlush)) (= (|BetreeSpec.__default.FlushOps#requires| |flush#0@@8|) (BetreeSpec.__default.ValidFlush |flush#0@@8|))) :qid |BetreeSpecidfy.235:21| :skolemid |4246| :pattern ( (|BetreeSpec.__default.FlushOps#requires| |flush#0@@8|)) )))
(assert  (=> true (forall ((|flush#0@@9| T@U) ) (!  (=> (and (= (type |flush#0@@9|) DatatypeTypeType) (or (|BetreeSpec.__default.FlushOps#canCall| |flush#0@@9|) (and ($Is |flush#0@@9| Tclass.BetreeSpec.NodeFlush) (BetreeSpec.__default.ValidFlush |flush#0@@9|)))) (and (and (and (BetreeSpec.NodeFlush.NodeFlush_q |flush#0@@9|) (BetreeSpec.NodeFlush.NodeFlush_q |flush#0@@9|)) (and (BetreeSpec.NodeFlush.NodeFlush_q |flush#0@@9|) (BetreeSpec.NodeFlush.NodeFlush_q |flush#0@@9|))) (= (BetreeSpec.__default.FlushOps |flush#0@@9|) (let ((|allocop#0| (|#BetreeGraph.Op.AllocOp| (BetreeSpec.NodeFlush.newchildref |flush#0@@9|) (BetreeSpec.NodeFlush.newchild |flush#0@@9|)))) (let ((|writeop#0@@0| (|#BetreeGraph.Op.WriteOp| (BetreeSpec.NodeFlush.parentref |flush#0@@9|) (BetreeSpec.NodeFlush.newparent |flush#0@@9|)))) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |allocop#0|)) ($Box |writeop#0@@0|))))))) :qid |BetreeSpecidfy.235:21| :skolemid |4247| :pattern ( (BetreeSpec.__default.FlushOps |flush#0@@9|)) ))))
(assert  (=> true (forall ((|flush#0@@10| T@U) ) (!  (=> (and (= (type |flush#0@@10|) DatatypeTypeType) (or (|BetreeSpec.__default.FlushOps#canCall| (Lit |flush#0@@10|)) (and ($Is |flush#0@@10| Tclass.BetreeSpec.NodeFlush) (U_2_bool (Lit (bool_2_U (BetreeSpec.__default.ValidFlush (Lit |flush#0@@10|)))))))) (and (and (and (BetreeSpec.NodeFlush.NodeFlush_q (Lit |flush#0@@10|)) (BetreeSpec.NodeFlush.NodeFlush_q (Lit |flush#0@@10|))) (and (BetreeSpec.NodeFlush.NodeFlush_q (Lit |flush#0@@10|)) (BetreeSpec.NodeFlush.NodeFlush_q (Lit |flush#0@@10|)))) (= (BetreeSpec.__default.FlushOps (Lit |flush#0@@10|)) (let ((|allocop#1| (Lit (|#BetreeGraph.Op.AllocOp| (Lit (BetreeSpec.NodeFlush.newchildref (Lit |flush#0@@10|))) (Lit (BetreeSpec.NodeFlush.newchild (Lit |flush#0@@10|))))))) (let ((|writeop#1@@0| (Lit (|#BetreeGraph.Op.WriteOp| (Lit (BetreeSpec.NodeFlush.parentref (Lit |flush#0@@10|))) (Lit (BetreeSpec.NodeFlush.newparent (Lit |flush#0@@10|))))))) (Lit (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |allocop#1|)) ($Box |writeop#1@@0|)))))))) :qid |BetreeSpecidfy.235:21| :weight 3 :skolemid |4248| :pattern ( (BetreeSpec.__default.FlushOps (Lit |flush#0@@10|))) ))))
(assert  (=> true (forall ((|growth#0| T@U) ) (!  (=> (and (= (type |growth#0|) DatatypeTypeType) (or (|BetreeSpec.__default.ValidGrow#canCall| |growth#0|) ($Is |growth#0| Tclass.BetreeSpec.RootGrowth))) true) :qid |BetreeSpecidfy.247:23| :skolemid |4249| :pattern ( (BetreeSpec.__default.ValidGrow |growth#0|)) ))))
(assert (forall ((|growth#0@@0| T@U) ) (!  (=> (and (= (type |growth#0@@0|) DatatypeTypeType) ($Is |growth#0@@0| Tclass.BetreeSpec.RootGrowth)) (= (|BetreeSpec.__default.ValidGrow#requires| |growth#0@@0|) true)) :qid |BetreeSpecidfy.247:23| :skolemid |4250| :pattern ( (|BetreeSpec.__default.ValidGrow#requires| |growth#0@@0|)) )))
(assert  (=> true (forall ((|growth#0@@1| T@U) ) (!  (=> (and (= (type |growth#0@@1|) DatatypeTypeType) (or (|BetreeSpec.__default.ValidGrow#canCall| |growth#0@@1|) ($Is |growth#0@@1| Tclass.BetreeSpec.RootGrowth))) (= (BetreeSpec.__default.ValidGrow |growth#0@@1|) (U_2_bool (Lit (bool_2_U true))))) :qid |BetreeSpecidfy.247:23| :skolemid |4251| :pattern ( (BetreeSpec.__default.ValidGrow |growth#0@@1|)) ))))
(assert  (=> true (forall ((|growth#0@@2| T@U) ) (!  (=> (and (= (type |growth#0@@2|) DatatypeTypeType) (or (|BetreeSpec.__default.ValidGrow#canCall| (Lit |growth#0@@2|)) ($Is |growth#0@@2| Tclass.BetreeSpec.RootGrowth))) (= (BetreeSpec.__default.ValidGrow (Lit |growth#0@@2|)) (U_2_bool (Lit (bool_2_U true))))) :qid |BetreeSpecidfy.247:23| :weight 3 :skolemid |4252| :pattern ( (BetreeSpec.__default.ValidGrow (Lit |growth#0@@2|))) ))))
(assert (forall ((arg0@@705 T@U) ) (! (= (type (BetreeSpec.__default.GrowReads arg0@@705)) (SeqType BoxType)) :qid |funType:BetreeSpec.__default.GrowReads| :pattern ( (BetreeSpec.__default.GrowReads arg0@@705)) )))
(assert  (=> true (forall ((|growth#0@@3| T@U) ) (!  (=> (and (= (type |growth#0@@3|) DatatypeTypeType) (or (|BetreeSpec.__default.GrowReads#canCall| |growth#0@@3|) (and ($Is |growth#0@@3| Tclass.BetreeSpec.RootGrowth) (BetreeSpec.__default.ValidGrow |growth#0@@3|)))) ($Is (BetreeSpec.__default.GrowReads |growth#0@@3|) (TSeq Tclass.BetreeGraph.ReadOp))) :qid |BetreeSpecidfy.252:22| :skolemid |4253| :pattern ( (BetreeSpec.__default.GrowReads |growth#0@@3|)) ))))
(assert (forall ((|growth#0@@4| T@U) ) (!  (=> (and (= (type |growth#0@@4|) DatatypeTypeType) ($Is |growth#0@@4| Tclass.BetreeSpec.RootGrowth)) (= (|BetreeSpec.__default.GrowReads#requires| |growth#0@@4|) (BetreeSpec.__default.ValidGrow |growth#0@@4|))) :qid |BetreeSpecidfy.252:22| :skolemid |4254| :pattern ( (|BetreeSpec.__default.GrowReads#requires| |growth#0@@4|)) )))
(assert  (=> true (forall ((|growth#0@@5| T@U) ) (!  (=> (and (= (type |growth#0@@5|) DatatypeTypeType) (or (|BetreeSpec.__default.GrowReads#canCall| |growth#0@@5|) (and ($Is |growth#0@@5| Tclass.BetreeSpec.RootGrowth) (BetreeSpec.__default.ValidGrow |growth#0@@5|)))) (and (and |BetreeGraph.__default.Root#canCall| (BetreeSpec.RootGrowth.RootGrowth_q |growth#0@@5|)) (= (BetreeSpec.__default.GrowReads |growth#0@@5|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#BetreeGraph.ReadOp.ReadOp| (Lit BetreeGraph.__default.Root) (BetreeSpec.RootGrowth.oldroot |growth#0@@5|))))))) :qid |BetreeSpecidfy.252:22| :skolemid |4255| :pattern ( (BetreeSpec.__default.GrowReads |growth#0@@5|)) ))))
(assert  (=> true (forall ((|growth#0@@6| T@U) ) (!  (=> (and (= (type |growth#0@@6|) DatatypeTypeType) (or (|BetreeSpec.__default.GrowReads#canCall| (Lit |growth#0@@6|)) (and ($Is |growth#0@@6| Tclass.BetreeSpec.RootGrowth) (U_2_bool (Lit (bool_2_U (BetreeSpec.__default.ValidGrow (Lit |growth#0@@6|)))))))) (and (and |BetreeGraph.__default.Root#canCall| (BetreeSpec.RootGrowth.RootGrowth_q (Lit |growth#0@@6|))) (= (BetreeSpec.__default.GrowReads (Lit |growth#0@@6|)) (Lit (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#BetreeGraph.ReadOp.ReadOp| (Lit BetreeGraph.__default.Root) (Lit (BetreeSpec.RootGrowth.oldroot (Lit |growth#0@@6|))))))))))) :qid |BetreeSpecidfy.252:22| :weight 3 :skolemid |4256| :pattern ( (BetreeSpec.__default.GrowReads (Lit |growth#0@@6|))) ))))
(assert (forall ((arg0@@706 T@U) ) (! (= (type (BetreeSpec.__default.GrowOps arg0@@706)) (SeqType BoxType)) :qid |funType:BetreeSpec.__default.GrowOps| :pattern ( (BetreeSpec.__default.GrowOps arg0@@706)) )))
(assert  (=> true (forall ((|growth#0@@7| T@U) ) (!  (=> (and (= (type |growth#0@@7|) DatatypeTypeType) (or (|BetreeSpec.__default.GrowOps#canCall| |growth#0@@7|) (and ($Is |growth#0@@7| Tclass.BetreeSpec.RootGrowth) (BetreeSpec.__default.ValidGrow |growth#0@@7|)))) ($Is (BetreeSpec.__default.GrowOps |growth#0@@7|) (TSeq Tclass.BetreeGraph.Op))) :qid |BetreeSpecidfy.258:20| :skolemid |4257| :pattern ( (BetreeSpec.__default.GrowOps |growth#0@@7|)) ))))
(assert (forall ((|growth#0@@8| T@U) ) (!  (=> (and (= (type |growth#0@@8|) DatatypeTypeType) ($Is |growth#0@@8| Tclass.BetreeSpec.RootGrowth)) (= (|BetreeSpec.__default.GrowOps#requires| |growth#0@@8|) (BetreeSpec.__default.ValidGrow |growth#0@@8|))) :qid |BetreeSpecidfy.258:20| :skolemid |4258| :pattern ( (|BetreeSpec.__default.GrowOps#requires| |growth#0@@8|)) )))
(assert  (=> true (forall ((|growth#0@@9| T@U) ) (!  (=> (and (= (type |growth#0@@9|) DatatypeTypeType) (or (|BetreeSpec.__default.GrowOps#canCall| |growth#0@@9|) (and ($Is |growth#0@@9| Tclass.BetreeSpec.RootGrowth) (BetreeSpec.__default.ValidGrow |growth#0@@9|)))) (and (and (and (forall ((|key#0@@168| T@U) ) (!  (=> (and (= (type |key#0@@168|) (SeqType BoxType)) ($Is |key#0@@168| Tclass.KeyType.Key)) (and (|MapSpec.__default.InDomain#canCall| |key#0@@168|) (=> (MapSpec.__default.InDomain |key#0@@168|) (BetreeSpec.RootGrowth.RootGrowth_q |growth#0@@9|)))) :qid |BetreeSpecidfy.262:14| :skolemid |4259| :pattern ( (MapSpec.__default.InDomain |key#0@@168|)) )) (forall ((|key#1@@16| T@U) ) (!  (=> (and (= (type |key#1@@16|) (SeqType BoxType)) ($Is |key#1@@16| Tclass.KeyType.Key)) (and (|MapSpec.__default.InDomain#canCall| |key#1@@16|) (=> (MapSpec.__default.InDomain |key#1@@16|) |ValueMessage.__default.NopDelta#canCall|))) :qid |BetreeSpecidfy.263:14| :skolemid |4260| :pattern ( (MapSpec.__default.InDomain |key#1@@16|)) ))) (and (and (BetreeSpec.RootGrowth.RootGrowth_q |growth#0@@9|) (BetreeSpec.RootGrowth.RootGrowth_q |growth#0@@9|)) |BetreeGraph.__default.Root#canCall|)) (= (BetreeSpec.__default.GrowOps |growth#0@@9|) (let ((|newroot#0@@0| (|#BetreeGraph.Node.Node| (|IMap#Glue| (|lambda#26| Tclass.KeyType.Key) (|lambda#27| (BetreeSpec.RootGrowth.newchildref |growth#0@@9|)) (TIMap Tclass.KeyType.Key Tclass.ReferenceType.Reference)) (|IMap#Glue| (|lambda#26| Tclass.KeyType.Key) (|lambda#27| ($Box (Lit (|#ValueMessage.Message.Update| (Lit ValueMessage.__default.NopDelta))))) (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (let ((|allocop#0@@0| (|#BetreeGraph.Op.AllocOp| (BetreeSpec.RootGrowth.newchildref |growth#0@@9|) (BetreeSpec.RootGrowth.oldroot |growth#0@@9|)))) (let ((|writeop#0@@1| (|#BetreeGraph.Op.WriteOp| (Lit BetreeGraph.__default.Root) |newroot#0@@0|))) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |allocop#0@@0|)) ($Box |writeop#0@@1|)))))))) :qid |BetreeSpecidfy.258:20| :skolemid |4261| :pattern ( (BetreeSpec.__default.GrowOps |growth#0@@9|)) ))))
(assert  (=> true (forall ((|growth#0@@10| T@U) ) (!  (=> (and (= (type |growth#0@@10|) DatatypeTypeType) (or (|BetreeSpec.__default.GrowOps#canCall| (Lit |growth#0@@10|)) (and ($Is |growth#0@@10| Tclass.BetreeSpec.RootGrowth) (U_2_bool (Lit (bool_2_U (BetreeSpec.__default.ValidGrow (Lit |growth#0@@10|)))))))) (and (and (and (forall ((|key#0@@169| T@U) ) (!  (=> (and (= (type |key#0@@169|) (SeqType BoxType)) ($Is |key#0@@169| Tclass.KeyType.Key)) (and (|MapSpec.__default.InDomain#canCall| |key#0@@169|) (=> (MapSpec.__default.InDomain |key#0@@169|) (BetreeSpec.RootGrowth.RootGrowth_q (Lit |growth#0@@10|))))) :qid |BetreeSpecidfy.262:14| :skolemid |4262| :pattern ( (MapSpec.__default.InDomain |key#0@@169|)) )) (forall ((|key#1@@17| T@U) ) (!  (=> (and (= (type |key#1@@17|) (SeqType BoxType)) ($Is |key#1@@17| Tclass.KeyType.Key)) (and (|MapSpec.__default.InDomain#canCall| |key#1@@17|) (=> (MapSpec.__default.InDomain |key#1@@17|) |ValueMessage.__default.NopDelta#canCall|))) :qid |BetreeSpecidfy.263:14| :skolemid |4263| :pattern ( (MapSpec.__default.InDomain |key#1@@17|)) ))) (and (and (BetreeSpec.RootGrowth.RootGrowth_q (Lit |growth#0@@10|)) (BetreeSpec.RootGrowth.RootGrowth_q (Lit |growth#0@@10|))) |BetreeGraph.__default.Root#canCall|)) (= (BetreeSpec.__default.GrowOps (Lit |growth#0@@10|)) (let ((|newroot#1@@0| (|#BetreeGraph.Node.Node| (|IMap#Glue| (|lambda#26| Tclass.KeyType.Key) (|lambda#27| (Lit (BetreeSpec.RootGrowth.newchildref (Lit |growth#0@@10|)))) (TIMap Tclass.KeyType.Key Tclass.ReferenceType.Reference)) (|IMap#Glue| (|lambda#26| Tclass.KeyType.Key) (|lambda#27| ($Box (Lit (|#ValueMessage.Message.Update| (Lit ValueMessage.__default.NopDelta))))) (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (let ((|allocop#1@@0| (Lit (|#BetreeGraph.Op.AllocOp| (Lit (BetreeSpec.RootGrowth.newchildref (Lit |growth#0@@10|))) (Lit (BetreeSpec.RootGrowth.oldroot (Lit |growth#0@@10|))))))) (let ((|writeop#1@@1| (|#BetreeGraph.Op.WriteOp| (Lit BetreeGraph.__default.Root) |newroot#1@@0|))) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |allocop#1@@0|)) ($Box |writeop#1@@1|)))))))) :qid |BetreeSpecidfy.258:20| :weight 3 :skolemid |4264| :pattern ( (BetreeSpec.__default.GrowOps (Lit |growth#0@@10|))) ))))
(assert  (=> true (forall ((|redirect#0| T@U) (|ref#0@@5| T@U) ) (!  (=> (and (and (= (type |redirect#0|) DatatypeTypeType) (= (type |ref#0@@5|) BoxType)) (or (|BetreeSpec.__default.RedirectRefInOldChildren#canCall| |redirect#0| |ref#0@@5|) (and ($Is |redirect#0| Tclass.BetreeSpec.Redirect) ($IsBox |ref#0@@5| Tclass.ReferenceType.Reference)))) true) :qid |BetreeSpecidfy.284:38| :skolemid |4265| :pattern ( (BetreeSpec.__default.RedirectRefInOldChildren |redirect#0| |ref#0@@5|)) ))))
(assert (forall ((|redirect#0@@0| T@U) (|ref#0@@6| T@U) ) (!  (=> (and (and (= (type |redirect#0@@0|) DatatypeTypeType) (= (type |ref#0@@6|) BoxType)) (and ($Is |redirect#0@@0| Tclass.BetreeSpec.Redirect) ($IsBox |ref#0@@6| Tclass.ReferenceType.Reference))) (= (|BetreeSpec.__default.RedirectRefInOldChildren#requires| |redirect#0@@0| |ref#0@@6|) true)) :qid |BetreeSpecidfy.284:38| :skolemid |4266| :pattern ( (|BetreeSpec.__default.RedirectRefInOldChildren#requires| |redirect#0@@0| |ref#0@@6|)) )))
(assert  (=> true (forall ((|redirect#0@@1| T@U) (|ref#0@@7| T@U) ) (!  (=> (and (and (= (type |redirect#0@@1|) DatatypeTypeType) (= (type |ref#0@@7|) BoxType)) (or (|BetreeSpec.__default.RedirectRefInOldChildren#canCall| |redirect#0@@1| |ref#0@@7|) (and ($Is |redirect#0@@1| Tclass.BetreeSpec.Redirect) ($IsBox |ref#0@@7| Tclass.ReferenceType.Reference)))) (and (forall ((|key#0@@170| T@U) ) (!  (=> (and (= (type |key#0@@170|) (SeqType BoxType)) ($Is |key#0@@170| (TSeq Tclass.NativeTypes.byte))) (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@1|) (BetreeGraph.Node.Node_q (BetreeSpec.Redirect.old__parent |redirect#0@@1|))) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@1|))) ($Box |key#0@@170|))) (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@1|) (=> (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@1|) ($Box |key#0@@170|))) (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@1|) (BetreeGraph.Node.Node_q (BetreeSpec.Redirect.old__parent |redirect#0@@1|)))))))) :qid |BetreeSpecidfy.286:12| :skolemid |4268| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@1|))) ($Box |key#0@@170|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@1|) ($Box |key#0@@170|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@1|))) ($Box |key#0@@170|))) )) (= (BetreeSpec.__default.RedirectRefInOldChildren |redirect#0@@1| |ref#0@@7|) (exists ((|key#0@@171| T@U) ) (!  (and (= (type |key#0@@171|) (SeqType BoxType)) (and ($Is |key#0@@171| (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@1|))) ($Box |key#0@@171|))) (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@1|) ($Box |key#0@@171|)))) (= (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@1|))) ($Box |key#0@@171|)) |ref#0@@7|)))) :qid |BetreeSpecidfy.286:12| :skolemid |4267| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@1|))) ($Box |key#0@@171|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@1|) ($Box |key#0@@171|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@1|))) ($Box |key#0@@171|))) ))))) :qid |BetreeSpecidfy.284:38| :skolemid |4269| :pattern ( (BetreeSpec.__default.RedirectRefInOldChildren |redirect#0@@1| |ref#0@@7|)) ))))
(assert  (=> true (forall ((|redirect#0@@2| T@U) (|ref#0@@8| T@U) ) (!  (=> (and (and (= (type |redirect#0@@2|) DatatypeTypeType) (= (type |ref#0@@8|) BoxType)) (or (|BetreeSpec.__default.RedirectRefInOldChildren#canCall| (Lit |redirect#0@@2|) |ref#0@@8|) (and ($Is |redirect#0@@2| Tclass.BetreeSpec.Redirect) ($IsBox |ref#0@@8| Tclass.ReferenceType.Reference)))) (and (forall ((|key#1@@18| T@U) ) (!  (=> (and (= (type |key#1@@18|) (SeqType BoxType)) ($Is |key#1@@18| (TSeq Tclass.NativeTypes.byte))) (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@2|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@2|))))) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@2|))))) ($Box |key#1@@18|))) (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@2|)) (=> (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@2|))) ($Box |key#1@@18|))) (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@2|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@2|)))))))))) :qid |BetreeSpecidfy.286:12| :skolemid |4271| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@2|))) ($Box |key#1@@18|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@2|) ($Box |key#1@@18|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@2|))) ($Box |key#1@@18|))) )) (= (BetreeSpec.__default.RedirectRefInOldChildren (Lit |redirect#0@@2|) |ref#0@@8|) (exists ((|key#1@@19| T@U) ) (!  (and (= (type |key#1@@19|) (SeqType BoxType)) (and ($Is |key#1@@19| (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@2|))))) ($Box |key#1@@19|))) (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@2|))) ($Box |key#1@@19|)))) (= (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@2|)))))) ($Box |key#1@@19|)) |ref#0@@8|)))) :qid |BetreeSpecidfy.286:12| :skolemid |4270| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@2|))) ($Box |key#1@@19|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@2|) ($Box |key#1@@19|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@2|))) ($Box |key#1@@19|))) ))))) :qid |BetreeSpecidfy.284:38| :weight 3 :skolemid |4272| :pattern ( (BetreeSpec.__default.RedirectRefInOldChildren (Lit |redirect#0@@2|) |ref#0@@8|)) ))))
(assert  (=> true (forall ((|redirect#0@@3| T@U) (|ref#0@@9| T@U) ) (!  (=> (and (and (= (type |redirect#0@@3|) DatatypeTypeType) (= (type |ref#0@@9|) BoxType)) (or (|BetreeSpec.__default.RedirectRefInOldChildren#canCall| (Lit |redirect#0@@3|) (Lit |ref#0@@9|)) (and ($Is |redirect#0@@3| Tclass.BetreeSpec.Redirect) ($IsBox |ref#0@@9| Tclass.ReferenceType.Reference)))) (and (forall ((|key#2@@4| T@U) ) (!  (=> (and (= (type |key#2@@4|) (SeqType BoxType)) ($Is |key#2@@4| (TSeq Tclass.NativeTypes.byte))) (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@3|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@3|))))) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@3|))))) ($Box |key#2@@4|))) (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@3|)) (=> (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@3|))) ($Box |key#2@@4|))) (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@3|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@3|)))))))))) :qid |BetreeSpecidfy.286:12| :skolemid |4274| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@3|))) ($Box |key#2@@4|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@3|) ($Box |key#2@@4|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@3|))) ($Box |key#2@@4|))) )) (= (BetreeSpec.__default.RedirectRefInOldChildren (Lit |redirect#0@@3|) (Lit |ref#0@@9|)) (exists ((|key#2@@5| T@U) ) (!  (and (= (type |key#2@@5|) (SeqType BoxType)) (and ($Is |key#2@@5| (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@3|))))) ($Box |key#2@@5|))) (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@3|))) ($Box |key#2@@5|)))) (= (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@3|)))))) ($Box |key#2@@5|)) (Lit |ref#0@@9|))))) :qid |BetreeSpecidfy.286:12| :skolemid |4273| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@3|))) ($Box |key#2@@5|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@3|) ($Box |key#2@@5|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@3|))) ($Box |key#2@@5|))) ))))) :qid |BetreeSpecidfy.284:38| :weight 3 :skolemid |4275| :pattern ( (BetreeSpec.__default.RedirectRefInOldChildren (Lit |redirect#0@@3|) (Lit |ref#0@@9|))) ))))
(assert  (=> true (forall ((|redirect#0@@4| T@U) (|childref#0| T@U) (|ref#0@@10| T@U) ) (!  (=> (and (and (and (= (type |redirect#0@@4|) DatatypeTypeType) (= (type |childref#0|) BoxType)) (= (type |ref#0@@10|) BoxType)) (or (|BetreeSpec.__default.RedirectChildChildInOld#canCall| |redirect#0@@4| |childref#0| |ref#0@@10|) (and (and (and ($Is |redirect#0@@4| Tclass.BetreeSpec.Redirect) ($IsBox |childref#0| Tclass.ReferenceType.Reference)) ($IsBox |ref#0@@10| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children |redirect#0@@4|)) |childref#0|))))) true) :qid |BetreeSpecidfy.292:37| :skolemid |4276| :pattern ( (BetreeSpec.__default.RedirectChildChildInOld |redirect#0@@4| |childref#0| |ref#0@@10|)) ))))
(assert (forall ((|redirect#0@@5| T@U) (|childref#0@@0| T@U) (|ref#0@@11| T@U) ) (!  (=> (and (and (and (= (type |redirect#0@@5|) DatatypeTypeType) (= (type |childref#0@@0|) BoxType)) (= (type |ref#0@@11|) BoxType)) (and (and ($Is |redirect#0@@5| Tclass.BetreeSpec.Redirect) ($IsBox |childref#0@@0| Tclass.ReferenceType.Reference)) ($IsBox |ref#0@@11| Tclass.ReferenceType.Reference))) (= (|BetreeSpec.__default.RedirectChildChildInOld#requires| |redirect#0@@5| |childref#0@@0| |ref#0@@11|) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children |redirect#0@@5|)) |childref#0@@0|)))) :qid |BetreeSpecidfy.292:37| :skolemid |4277| :pattern ( (|BetreeSpec.__default.RedirectChildChildInOld#requires| |redirect#0@@5| |childref#0@@0| |ref#0@@11|)) )))
(assert  (=> true (forall ((|redirect#0@@6| T@U) (|childref#0@@1| T@U) (|ref#0@@12| T@U) ) (!  (=> (and (and (and (= (type |redirect#0@@6|) DatatypeTypeType) (= (type |childref#0@@1|) BoxType)) (= (type |ref#0@@12|) BoxType)) (or (|BetreeSpec.__default.RedirectChildChildInOld#canCall| |redirect#0@@6| |childref#0@@1| |ref#0@@12|) (and (and (and ($Is |redirect#0@@6| Tclass.BetreeSpec.Redirect) ($IsBox |childref#0@@1| Tclass.ReferenceType.Reference)) ($IsBox |ref#0@@12| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children |redirect#0@@6|)) |childref#0@@1|))))) (and (forall ((|key#0@@172| T@U) ) (!  (=> (and (= (type |key#0@@172|) (SeqType BoxType)) ($Is |key#0@@172| Tclass.KeyType.Key)) (and (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@6|) (BetreeGraph.Node.Node_q (BetreeSpec.Redirect.new__parent |redirect#0@@6|))) (|Maps.__default.IMapsTo#canCall| Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@6|)) ($Box |key#0@@172|) |childref#0@@1|)) (=> (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@6|)) ($Box |key#0@@172|) |childref#0@@1|) (and (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@6|) (BetreeGraph.Node.Node_q ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeSpec.Redirect.new__children |redirect#0@@6|)) |childref#0@@1|)))) (|Maps.__default.IMapsTo#canCall| Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeSpec.Redirect.new__children |redirect#0@@6|)) |childref#0@@1|))) ($Box |key#0@@172|) |ref#0@@12|)) (=> (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeSpec.Redirect.new__children |redirect#0@@6|)) |childref#0@@1|))) ($Box |key#0@@172|) |ref#0@@12|) (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@6|) (=> (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@6|) ($Box |key#0@@172|))) (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@6|) (BetreeGraph.Node.Node_q (BetreeSpec.Redirect.old__parent |redirect#0@@6|)))))))))) :qid |BetreeSpecidfy.296:12| :skolemid |4279| :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@6|))) ($Box |key#0@@172|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@6|) ($Box |key#0@@172|))) :pattern ( (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeSpec.Redirect.new__children |redirect#0@@6|)) |childref#0@@1|))) ($Box |key#0@@172|) |ref#0@@12|)) :pattern ( (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@6|)) ($Box |key#0@@172|) |childref#0@@1|)) )) (= (BetreeSpec.__default.RedirectChildChildInOld |redirect#0@@6| |childref#0@@1| |ref#0@@12|) (exists ((|key#0@@173| T@U) ) (!  (and (= (type |key#0@@173|) (SeqType BoxType)) (and ($Is |key#0@@173| Tclass.KeyType.Key) (and (and (and (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@6|)) ($Box |key#0@@173|) |childref#0@@1|) (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeSpec.Redirect.new__children |redirect#0@@6|)) |childref#0@@1|))) ($Box |key#0@@173|) |ref#0@@12|)) (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@6|) ($Box |key#0@@173|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@6|))) ($Box |key#0@@173|)))))) :qid |BetreeSpecidfy.296:12| :skolemid |4278| :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@6|))) ($Box |key#0@@173|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@6|) ($Box |key#0@@173|))) :pattern ( (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeSpec.Redirect.new__children |redirect#0@@6|)) |childref#0@@1|))) ($Box |key#0@@173|) |ref#0@@12|)) :pattern ( (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@6|)) ($Box |key#0@@173|) |childref#0@@1|)) ))))) :qid |BetreeSpecidfy.292:37| :skolemid |4280| :pattern ( (BetreeSpec.__default.RedirectChildChildInOld |redirect#0@@6| |childref#0@@1| |ref#0@@12|)) ))))
(assert  (=> true (forall ((|redirect#0@@7| T@U) (|childref#0@@2| T@U) (|ref#0@@13| T@U) ) (!  (=> (and (and (and (= (type |redirect#0@@7|) DatatypeTypeType) (= (type |childref#0@@2|) BoxType)) (= (type |ref#0@@13|) BoxType)) (or (|BetreeSpec.__default.RedirectChildChildInOld#canCall| (Lit |redirect#0@@7|) |childref#0@@2| |ref#0@@13|) (and (and (and ($Is |redirect#0@@7| Tclass.BetreeSpec.Redirect) ($IsBox |childref#0@@2| Tclass.ReferenceType.Reference)) ($IsBox |ref#0@@13| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children (Lit |redirect#0@@7|))) |childref#0@@2|))))) (and (forall ((|key#1@@20| T@U) ) (!  (=> (and (= (type |key#1@@20|) (SeqType BoxType)) ($Is |key#1@@20| Tclass.KeyType.Key)) (and (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@7|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@7|))))) (|Maps.__default.IMapsTo#canCall| Tclass.KeyType.Key Tclass.ReferenceType.Reference (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@7|))))) ($Box |key#1@@20|) |childref#0@@2|)) (=> (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@7|))))) ($Box |key#1@@20|) |childref#0@@2|) (and (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@7|)) (BetreeGraph.Node.Node_q ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeSpec.Redirect.new__children (Lit |redirect#0@@7|)))) |childref#0@@2|)))) (|Maps.__default.IMapsTo#canCall| Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeSpec.Redirect.new__children (Lit |redirect#0@@7|)))) |childref#0@@2|))) ($Box |key#1@@20|) |ref#0@@13|)) (=> (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeSpec.Redirect.new__children (Lit |redirect#0@@7|)))) |childref#0@@2|))) ($Box |key#1@@20|) |ref#0@@13|) (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@7|)) (=> (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@7|))) ($Box |key#1@@20|))) (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@7|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@7|)))))))))))) :qid |BetreeSpecidfy.296:12| :skolemid |4282| :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@7|))) ($Box |key#1@@20|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@7|) ($Box |key#1@@20|))) :pattern ( (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeSpec.Redirect.new__children |redirect#0@@7|)) |childref#0@@2|))) ($Box |key#1@@20|) |ref#0@@13|)) :pattern ( (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@7|)) ($Box |key#1@@20|) |childref#0@@2|)) )) (= (BetreeSpec.__default.RedirectChildChildInOld (Lit |redirect#0@@7|) |childref#0@@2| |ref#0@@13|) (exists ((|key#1@@21| T@U) ) (!  (and (= (type |key#1@@21|) (SeqType BoxType)) (and ($Is |key#1@@21| Tclass.KeyType.Key) (and (and (and (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@7|))))) ($Box |key#1@@21|) |childref#0@@2|) (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeSpec.Redirect.new__children (Lit |redirect#0@@7|)))) |childref#0@@2|))) ($Box |key#1@@21|) |ref#0@@13|)) (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@7|))) ($Box |key#1@@21|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@7|))))) ($Box |key#1@@21|)))))) :qid |BetreeSpecidfy.296:12| :skolemid |4281| :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@7|))) ($Box |key#1@@21|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@7|) ($Box |key#1@@21|))) :pattern ( (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeSpec.Redirect.new__children |redirect#0@@7|)) |childref#0@@2|))) ($Box |key#1@@21|) |ref#0@@13|)) :pattern ( (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@7|)) ($Box |key#1@@21|) |childref#0@@2|)) ))))) :qid |BetreeSpecidfy.292:37| :weight 3 :skolemid |4283| :pattern ( (BetreeSpec.__default.RedirectChildChildInOld (Lit |redirect#0@@7|) |childref#0@@2| |ref#0@@13|)) ))))
(assert  (=> true (forall ((|redirect#0@@8| T@U) (|childref#0@@3| T@U) (|ref#0@@14| T@U) ) (!  (=> (and (and (and (= (type |redirect#0@@8|) DatatypeTypeType) (= (type |childref#0@@3|) BoxType)) (= (type |ref#0@@14|) BoxType)) (or (|BetreeSpec.__default.RedirectChildChildInOld#canCall| (Lit |redirect#0@@8|) (Lit |childref#0@@3|) (Lit |ref#0@@14|)) (and (and (and ($Is |redirect#0@@8| Tclass.BetreeSpec.Redirect) ($IsBox |childref#0@@3| Tclass.ReferenceType.Reference)) ($IsBox |ref#0@@14| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children (Lit |redirect#0@@8|))) |childref#0@@3|))))) (and (forall ((|key#2@@6| T@U) ) (!  (=> (and (= (type |key#2@@6|) (SeqType BoxType)) ($Is |key#2@@6| Tclass.KeyType.Key)) (and (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@8|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@8|))))) (|Maps.__default.IMapsTo#canCall| Tclass.KeyType.Key Tclass.ReferenceType.Reference (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@8|))))) ($Box |key#2@@6|) (Lit |childref#0@@3|))) (=> (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@8|))))) ($Box |key#2@@6|) (Lit |childref#0@@3|)) (and (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@8|)) (BetreeGraph.Node.Node_q ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeSpec.Redirect.new__children (Lit |redirect#0@@8|)))) (Lit |childref#0@@3|))))) (|Maps.__default.IMapsTo#canCall| Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeSpec.Redirect.new__children (Lit |redirect#0@@8|)))) (Lit |childref#0@@3|)))) ($Box |key#2@@6|) (Lit |ref#0@@14|))) (=> (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeSpec.Redirect.new__children (Lit |redirect#0@@8|)))) (Lit |childref#0@@3|)))) ($Box |key#2@@6|) (Lit |ref#0@@14|)) (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@8|)) (=> (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@8|))) ($Box |key#2@@6|))) (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@8|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@8|)))))))))))) :qid |BetreeSpecidfy.296:12| :skolemid |4285| :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@8|))) ($Box |key#2@@6|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@8|) ($Box |key#2@@6|))) :pattern ( (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeSpec.Redirect.new__children |redirect#0@@8|)) |childref#0@@3|))) ($Box |key#2@@6|) |ref#0@@14|)) :pattern ( (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@8|)) ($Box |key#2@@6|) |childref#0@@3|)) )) (= (BetreeSpec.__default.RedirectChildChildInOld (Lit |redirect#0@@8|) (Lit |childref#0@@3|) (Lit |ref#0@@14|)) (exists ((|key#2@@7| T@U) ) (!  (and (= (type |key#2@@7|) (SeqType BoxType)) (and ($Is |key#2@@7| Tclass.KeyType.Key) (and (and (and (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@8|))))) ($Box |key#2@@7|) (Lit |childref#0@@3|)) (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeSpec.Redirect.new__children (Lit |redirect#0@@8|)))) (Lit |childref#0@@3|)))) ($Box |key#2@@7|) (Lit |ref#0@@14|))) (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@8|))) ($Box |key#2@@7|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@8|))))) ($Box |key#2@@7|)))))) :qid |BetreeSpecidfy.296:12| :skolemid |4284| :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@8|))) ($Box |key#2@@7|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@8|) ($Box |key#2@@7|))) :pattern ( (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeSpec.Redirect.new__children |redirect#0@@8|)) |childref#0@@3|))) ($Box |key#2@@7|) |ref#0@@14|)) :pattern ( (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@8|)) ($Box |key#2@@7|) |childref#0@@3|)) ))))) :qid |BetreeSpecidfy.292:37| :weight 3 :skolemid |4286| :pattern ( (BetreeSpec.__default.RedirectChildChildInOld (Lit |redirect#0@@8|) (Lit |childref#0@@3|) (Lit |ref#0@@14|))) ))))
(assert  (=> true (forall ((|redirect#0@@9| T@U) ) (!  (=> (and (= (type |redirect#0@@9|) DatatypeTypeType) (or (|BetreeSpec.__default.ValidRedirect#canCall| |redirect#0@@9|) ($Is |redirect#0@@9| Tclass.BetreeSpec.Redirect))) true) :qid |BetreeSpecidfy.303:27| :skolemid |4287| :pattern ( (BetreeSpec.__default.ValidRedirect |redirect#0@@9|)) ))))
(assert (forall ((|redirect#0@@10| T@U) ) (!  (=> (and (= (type |redirect#0@@10|) DatatypeTypeType) ($Is |redirect#0@@10| Tclass.BetreeSpec.Redirect)) (= (|BetreeSpec.__default.ValidRedirect#requires| |redirect#0@@10|) true)) :qid |BetreeSpecidfy.303:27| :skolemid |4288| :pattern ( (|BetreeSpec.__default.ValidRedirect#requires| |redirect#0@@10|)) )))
(assert  (=> true (forall ((|redirect#0@@11| T@U) ) (!  (=> (and (= (type |redirect#0@@11|) DatatypeTypeType) (or (|BetreeSpec.__default.ValidRedirect#canCall| |redirect#0@@11|) ($Is |redirect#0@@11| Tclass.BetreeSpec.Redirect))) (and (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (|BetreeSpec.__default.WFNode#canCall| (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) (=> (BetreeSpec.__default.WFNode (BetreeSpec.Redirect.old__parent |redirect#0@@11|)) (and (forall ((|node#0@@11| T@U) ) (!  (=> (and (= (type |node#0@@11|) DatatypeTypeType) ($Is |node#0@@11| Tclass.BetreeGraph.Node)) (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (=> (U_2_bool (MapType0Select (|IMap#Values| (BetreeSpec.Redirect.old__children |redirect#0@@11|)) ($Box |node#0@@11|))) (|BetreeSpec.__default.WFNode#canCall| |node#0@@11|)))) :qid |BetreeSpecidfy.305:16| :skolemid |4305| :pattern ( (BetreeSpec.__default.WFNode |node#0@@11|)) :pattern ( (MapType0Select (|IMap#Values| (BetreeSpec.Redirect.old__children |redirect#0@@11|)) ($Box |node#0@@11|))) )) (=> (forall ((|node#0@@12| T@U) ) (!  (=> (and (and (= (type |node#0@@12|) DatatypeTypeType) ($Is |node#0@@12| Tclass.BetreeGraph.Node)) (U_2_bool (MapType0Select (|IMap#Values| (BetreeSpec.Redirect.old__children |redirect#0@@11|)) ($Box |node#0@@12|)))) (BetreeSpec.__default.WFNode |node#0@@12|)) :qid |BetreeSpecidfy.305:16| :skolemid |4335| :pattern ( (BetreeSpec.__default.WFNode |node#0@@12|)) :pattern ( (MapType0Select (|IMap#Values| (BetreeSpec.Redirect.old__children |redirect#0@@11|)) ($Box |node#0@@12|))) )) (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (|BetreeSpec.__default.WFNode#canCall| (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) (=> (BetreeSpec.__default.WFNode (BetreeSpec.Redirect.new__parent |redirect#0@@11|)) (and (forall ((|node#1| T@U) ) (!  (=> (and (= (type |node#1|) DatatypeTypeType) ($Is |node#1| Tclass.BetreeGraph.Node)) (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (=> (U_2_bool (MapType0Select (|IMap#Values| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) ($Box |node#1|))) (|BetreeSpec.__default.WFNode#canCall| |node#1|)))) :qid |BetreeSpecidfy.307:16| :skolemid |4306| :pattern ( (BetreeSpec.__default.WFNode |node#1|)) :pattern ( (MapType0Select (|IMap#Values| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) ($Box |node#1|))) )) (=> (forall ((|node#1@@0| T@U) ) (!  (=> (and (and (= (type |node#1@@0|) DatatypeTypeType) ($Is |node#1@@0| Tclass.BetreeGraph.Node)) (U_2_bool (MapType0Select (|IMap#Values| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) ($Box |node#1@@0|)))) (BetreeSpec.__default.WFNode |node#1@@0|)) :qid |BetreeSpecidfy.307:16| :skolemid |4334| :pattern ( (BetreeSpec.__default.WFNode |node#1@@0|)) :pattern ( (MapType0Select (|IMap#Values| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) ($Box |node#1@@0|))) )) (and (forall ((|key#0@@174| T@U) ) (!  (=> (and (= (type |key#0@@174|) (SeqType BoxType)) ($Is |key#0@@174| (TSeq Tclass.NativeTypes.byte))) (and (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (BetreeGraph.Node.Node_q (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#0@@174|))) (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#0@@174|))) (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#0@@174|)))) (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (BetreeGraph.Node.Node_q (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|))))) :qid |BetreeSpecidfy.310:16| :skolemid |4307| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#0@@174|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#0@@174|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#0@@174|))) )) (=> (forall ((|key#0@@175| T@U) ) (!  (=> (= (type |key#0@@175|) (SeqType BoxType)) (=> (and ($Is |key#0@@175| (TSeq Tclass.NativeTypes.byte)) (and (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#0@@175|))) (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#0@@175|))))) (|Seq#Contains| (BetreeSpec.Redirect.old__childrefs |redirect#0@@11|) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#0@@175|))))) :qid |BetreeSpecidfy.310:16| :skolemid |4333| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#0@@175|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#0@@175|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#0@@175|))) )) (and (forall ((|key#1@@22| T@U) ) (!  (=> (and (= (type |key#1@@22|) (SeqType BoxType)) ($Is |key#1@@22| (TSeq Tclass.NativeTypes.byte))) (and (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (BetreeGraph.Node.Node_q (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#1@@22|))) (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#1@@22|))) (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#1@@22|)))) (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (BetreeGraph.Node.Node_q (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|))))) :qid |BetreeSpecidfy.311:16| :skolemid |4308| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#1@@22|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#1@@22|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#1@@22|))) )) (=> (forall ((|key#1@@23| T@U) ) (!  (=> (= (type |key#1@@23|) (SeqType BoxType)) (=> (and ($Is |key#1@@23| (TSeq Tclass.NativeTypes.byte)) (and (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#1@@23|))) (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#1@@23|))))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children |redirect#0@@11|)) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#1@@23|)))))) :qid |BetreeSpecidfy.311:16| :skolemid |4332| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#1@@23|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#1@@23|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#1@@23|))) )) (and (forall ((|ref#0@@15| T@U) ) (!  (=> (and (= (type |ref#0@@15|) BoxType) ($IsBox |ref#0@@15| Tclass.ReferenceType.Reference)) (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (=> (|Seq#Contains| (BetreeSpec.Redirect.old__childrefs |redirect#0@@11|) |ref#0@@15|) (|BetreeSpec.__default.RedirectRefInOldChildren#canCall| |redirect#0@@11| |ref#0@@15|)))) :qid |BetreeSpecidfy.312:16| :skolemid |4309| :pattern ( (BetreeSpec.__default.RedirectRefInOldChildren |redirect#0@@11| |ref#0@@15|)) )) (=> (forall ((|ref#0@@16| T@U) ) (!  (=> (= (type |ref#0@@16|) BoxType) (=> (and ($IsBox |ref#0@@16| Tclass.ReferenceType.Reference) (|Seq#Contains| (BetreeSpec.Redirect.old__childrefs |redirect#0@@11|) |ref#0@@16|)) (BetreeSpec.__default.RedirectRefInOldChildren |redirect#0@@11| |ref#0@@16|))) :qid |BetreeSpecidfy.312:16| :skolemid |4331| :pattern ( (BetreeSpec.__default.RedirectRefInOldChildren |redirect#0@@11| |ref#0@@16|)) )) (and (forall ((|ref#1@@5| T@U) ) (!  (=> (and (= (type |ref#1@@5|) BoxType) ($IsBox |ref#1@@5| Tclass.ReferenceType.Reference)) (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children |redirect#0@@11|)) |ref#1@@5|)) (|BetreeSpec.__default.RedirectRefInOldChildren#canCall| |redirect#0@@11| |ref#1@@5|)))) :qid |BetreeSpecidfy.313:16| :skolemid |4310| :pattern ( (BetreeSpec.__default.RedirectRefInOldChildren |redirect#0@@11| |ref#1@@5|)) )) (=> (forall ((|ref#1@@6| T@U) ) (!  (=> (= (type |ref#1@@6|) BoxType) (=> (and ($IsBox |ref#1@@6| Tclass.ReferenceType.Reference) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children |redirect#0@@11|)) |ref#1@@6|))) (BetreeSpec.__default.RedirectRefInOldChildren |redirect#0@@11| |ref#1@@6|))) :qid |BetreeSpecidfy.313:16| :skolemid |4330| :pattern ( (BetreeSpec.__default.RedirectRefInOldChildren |redirect#0@@11| |ref#1@@6|)) )) (and (forall ((|ref#2@@0| T@U) ) (!  (=> (and (= (type |ref#2@@0|) BoxType) ($IsBox |ref#2@@0| Tclass.ReferenceType.Reference)) (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (=> (|Seq#Contains| (BetreeSpec.Redirect.old__childrefs |redirect#0@@11|) |ref#2@@0|) (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|)))) :qid |BetreeSpecidfy.314:16| :skolemid |4311| :pattern ( (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children |redirect#0@@11|)) |ref#2@@0|)) :pattern ( (|Seq#Contains| (BetreeSpec.Redirect.old__childrefs |redirect#0@@11|) |ref#2@@0|)) )) (=> (forall ((|ref#2@@1| T@U) ) (!  (=> (and (and (= (type |ref#2@@1|) BoxType) ($IsBox |ref#2@@1| Tclass.ReferenceType.Reference)) (|Seq#Contains| (BetreeSpec.Redirect.old__childrefs |redirect#0@@11|) |ref#2@@1|)) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children |redirect#0@@11|)) |ref#2@@1|))) :qid |BetreeSpecidfy.314:16| :skolemid |4329| :pattern ( (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children |redirect#0@@11|)) |ref#2@@1|)) :pattern ( (|Seq#Contains| (BetreeSpec.Redirect.old__childrefs |redirect#0@@11|) |ref#2@@1|)) )) (and (forall ((|key#2@@8| T@U) ) (!  (=> (and (= (type |key#2@@8|) (SeqType BoxType)) ($Is |key#2@@8| (TSeq Tclass.NativeTypes.byte))) (and (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (BetreeGraph.Node.Node_q (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#2@@8|))) (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#2@@8|))) (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#2@@8|)))) (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (BetreeGraph.Node.Node_q (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|))))) :qid |BetreeSpecidfy.317:16| :skolemid |4312| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#2@@8|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#2@@8|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#2@@8|))) )) (=> (forall ((|key#2@@9| T@U) ) (!  (=> (= (type |key#2@@9|) (SeqType BoxType)) (=> (and ($Is |key#2@@9| (TSeq Tclass.NativeTypes.byte)) (and (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#2@@9|))) (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#2@@9|))))) (|Seq#Contains| (BetreeSpec.Redirect.new__childrefs |redirect#0@@11|) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#2@@9|))))) :qid |BetreeSpecidfy.317:16| :skolemid |4328| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#2@@9|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#2@@9|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#2@@9|))) )) (and (forall ((|ref#3@@0| T@U) ) (!  (=> (and (= (type |ref#3@@0|) BoxType) ($IsBox |ref#3@@0| Tclass.ReferenceType.Reference)) (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) |ref#3@@0|)) (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|)))) :qid |BetreeSpecidfy.318:16| :skolemid |4313| :pattern ( (|Seq#Contains| (BetreeSpec.Redirect.new__childrefs |redirect#0@@11|) |ref#3@@0|)) :pattern ( (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) |ref#3@@0|)) )) (=> (forall ((|ref#3@@1| T@U) ) (!  (=> (= (type |ref#3@@1|) BoxType) (=> (and ($IsBox |ref#3@@1| Tclass.ReferenceType.Reference) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) |ref#3@@1|))) (|Seq#Contains| (BetreeSpec.Redirect.new__childrefs |redirect#0@@11|) |ref#3@@1|))) :qid |BetreeSpecidfy.318:16| :skolemid |4327| :pattern ( (|Seq#Contains| (BetreeSpec.Redirect.new__childrefs |redirect#0@@11|) |ref#3@@1|)) :pattern ( (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) |ref#3@@1|)) )) (and (forall ((|ref#4| T@U) ) (!  (=> (and (= (type |ref#4|) BoxType) ($IsBox |ref#4| Tclass.ReferenceType.Reference)) (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (=> (|Seq#Contains| (BetreeSpec.Redirect.new__childrefs |redirect#0@@11|) |ref#4|) (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|)))) :qid |BetreeSpecidfy.319:16| :skolemid |4314| :pattern ( (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) |ref#4|)) :pattern ( (|Seq#Contains| (BetreeSpec.Redirect.new__childrefs |redirect#0@@11|) |ref#4|)) )) (=> (forall ((|ref#4@@0| T@U) ) (!  (=> (= (type |ref#4@@0|) BoxType) (=> (and ($IsBox |ref#4@@0| Tclass.ReferenceType.Reference) (|Seq#Contains| (BetreeSpec.Redirect.new__childrefs |redirect#0@@11|) |ref#4@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) |ref#4@@0|)))) :qid |BetreeSpecidfy.319:16| :skolemid |4326| :pattern ( (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) |ref#4@@0|)) :pattern ( (|Seq#Contains| (BetreeSpec.Redirect.new__childrefs |redirect#0@@11|) |ref#4@@0|)) )) (and (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (BetreeGraph.Node.Node_q (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (BetreeGraph.Node.Node_q (BetreeSpec.Redirect.old__parent |redirect#0@@11|)))) (=> (|IMap#Equal| (BetreeGraph.Node.buffer (BetreeSpec.Redirect.new__parent |redirect#0@@11|)) (BetreeGraph.Node.buffer (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) (and (forall ((|key#3@@4| T@U) ) (!  (=> (and (= (type |key#3@@4|) (SeqType BoxType)) ($Is |key#3@@4| Tclass.KeyType.Key)) (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (=> (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#3@@4|))) (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (BetreeGraph.Node.Node_q (BetreeSpec.Redirect.new__parent |redirect#0@@11|)))))) :qid |BetreeSpecidfy.323:16| :skolemid |4315| :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#3@@4|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#3@@4|))) )) (=> (forall ((|key#3@@5| T@U) ) (!  (=> (and (and (= (type |key#3@@5|) (SeqType BoxType)) ($Is |key#3@@5| Tclass.KeyType.Key)) (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#3@@5|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#3@@5|)))) :qid |BetreeSpecidfy.323:16| :skolemid |4325| :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#3@@5|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#3@@5|))) )) (and (forall ((|key#4@@1| T@U) ) (!  (=> (and (= (type |key#4@@1|) (SeqType BoxType)) ($Is |key#4@@1| (TSeq Tclass.NativeTypes.byte))) (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (=> (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#4@@1|))) (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (BetreeGraph.Node.Node_q (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|))))) :qid |BetreeSpecidfy.324:16| :skolemid |4316| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#4@@1|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#4@@1|))) )) (=> (forall ((|key#4@@2| T@U) ) (!  (=> (and (and (= (type |key#4@@2|) (SeqType BoxType)) ($Is |key#4@@2| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#4@@2|)))) (|Seq#Contains| (BetreeSpec.Redirect.new__childrefs |redirect#0@@11|) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#4@@2|)))) :qid |BetreeSpecidfy.324:16| :skolemid |4324| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#4@@2|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#4@@2|))) )) (and (forall ((|key#5@@1| T@U) ) (!  (=> (and (= (type |key#5@@1|) (SeqType BoxType)) ($Is |key#5@@1| Tclass.KeyType.Key)) (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (=> (not (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#5@@1|)))) (and (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (BetreeGraph.Node.Node_q (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (BetreeGraph.Node.Node_q (BetreeSpec.Redirect.old__parent |redirect#0@@11|)))) (|Maps.__default.IMapsAgreeOnKey#canCall| Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|)) (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|)) ($Box |key#5@@1|)))))) :qid |BetreeSpecidfy.325:16| :skolemid |4317| :pattern ( (Maps.__default.IMapsAgreeOnKey Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|)) (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|)) ($Box |key#5@@1|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#5@@1|))) )) (=> (forall ((|key#5@@2| T@U) ) (!  (=> (and (and (= (type |key#5@@2|) (SeqType BoxType)) ($Is |key#5@@2| Tclass.KeyType.Key)) (not (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#5@@2|))))) (Maps.__default.IMapsAgreeOnKey Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|)) (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|)) ($Box |key#5@@2|))) :qid |BetreeSpecidfy.325:16| :skolemid |4323| :pattern ( (Maps.__default.IMapsAgreeOnKey Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|)) (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|)) ($Box |key#5@@2|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#5@@2|))) )) (and (forall ((|key#6@@1| T@U) ) (!  (=> (and (= (type |key#6@@1|) (SeqType BoxType)) ($Is |key#6@@1| Tclass.KeyType.Key)) (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (=> (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#6@@1|))) (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (BetreeGraph.Node.Node_q (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#6@@1|))) (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (BetreeGraph.Node.Node_q (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|)))))) (=> (=> (and (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#6@@1|))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#6@@1|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children |redirect#0@@11|)) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#6@@1|))))) (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (=> (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#6@@1|))) (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (BetreeGraph.Node.Node_q (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#6@@1|))) (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (BetreeGraph.Node.Node_q (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|)))))) (=> (=> (and (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#6@@1|))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#6@@1|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#6@@1|))))) (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (=> (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#6@@1|))) (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (BetreeGraph.Node.Node_q (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#6@@1|))) (and (and (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (BetreeGraph.Node.Node_q (BetreeSpec.Redirect.new__parent |redirect#0@@11|)))) (BetreeGraph.Node.Node_q ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#6@@1|)))))) (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (BetreeGraph.Node.Node_q (BetreeSpec.Redirect.old__parent |redirect#0@@11|)))) (BetreeGraph.Node.Node_q ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeSpec.Redirect.old__children |redirect#0@@11|)) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#6@@1|))))))) (|Maps.__default.IMapsAgreeOnKey#canCall| Tclass.KeyType.Key Tclass.ValueMessage.Message (BetreeGraph.Node.buffer ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#6@@1|))))) (BetreeGraph.Node.buffer ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeSpec.Redirect.old__children |redirect#0@@11|)) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#6@@1|))))) ($Box |key#6@@1|)))))))))))) :qid |BetreeSpecidfy.328:16| :skolemid |4318| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#6@@1|))) :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#6@@1|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#6@@1|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#6@@1|))) )) (=> (forall ((|key#6@@2| T@U) ) (!  (=> (and (= (type |key#6@@2|) (SeqType BoxType)) ($Is |key#6@@2| Tclass.KeyType.Key)) (and (and (=> (and (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#6@@2|))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#6@@2|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children |redirect#0@@11|)) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#6@@2|))))) (=> (and (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#6@@2|))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#6@@2|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#6@@2|)))))) (=> (and (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#6@@2|))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#6@@2|)))) (Maps.__default.IMapsAgreeOnKey Tclass.KeyType.Key Tclass.ValueMessage.Message (BetreeGraph.Node.buffer ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#6@@2|))))) (BetreeGraph.Node.buffer ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeSpec.Redirect.old__children |redirect#0@@11|)) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#6@@2|))))) ($Box |key#6@@2|))))) :qid |BetreeSpecidfy.328:16| :skolemid |4322| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#6@@2|))) :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#6@@2|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#6@@2|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#6@@2|))) )) (and (forall ((|key#7@@1| T@U) ) (!  (=> (and (= (type |key#7@@1|) (SeqType BoxType)) ($Is |key#7@@1| Tclass.KeyType.Key)) (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (=> (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#7@@1|))) (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (BetreeGraph.Node.Node_q (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#7@@1|))) (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (BetreeGraph.Node.Node_q (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|)))))) (=> (=> (and (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#7@@1|))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#7@@1|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children |redirect#0@@11|)) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#7@@1|))))) (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (=> (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#7@@1|))) (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (BetreeGraph.Node.Node_q (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#7@@1|))) (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (BetreeGraph.Node.Node_q (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|)))))) (=> (=> (and (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#7@@1|))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#7@@1|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#7@@1|))))) (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (=> (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#7@@1|))) (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (BetreeGraph.Node.Node_q (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#7@@1|))) (and (and (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (BetreeGraph.Node.Node_q (BetreeSpec.Redirect.new__parent |redirect#0@@11|)))) (BetreeGraph.Node.Node_q ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#7@@1|)))))) (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (BetreeGraph.Node.Node_q (BetreeSpec.Redirect.old__parent |redirect#0@@11|)))) (BetreeGraph.Node.Node_q ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeSpec.Redirect.old__children |redirect#0@@11|)) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#7@@1|))))))) (|Maps.__default.IMapsAgreeOnKey#canCall| Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#7@@1|))))) (BetreeGraph.Node.children ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeSpec.Redirect.old__children |redirect#0@@11|)) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#7@@1|))))) ($Box |key#7@@1|)))))))))))) :qid |BetreeSpecidfy.337:16| :skolemid |4319| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#7@@1|))) :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#7@@1|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#7@@1|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#7@@1|))) )) (=> (forall ((|key#7@@2| T@U) ) (!  (=> (and (= (type |key#7@@2|) (SeqType BoxType)) ($Is |key#7@@2| Tclass.KeyType.Key)) (and (and (=> (and (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#7@@2|))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#7@@2|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children |redirect#0@@11|)) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#7@@2|))))) (=> (and (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#7@@2|))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#7@@2|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#7@@2|)))))) (=> (and (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#7@@2|))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#7@@2|)))) (Maps.__default.IMapsAgreeOnKey Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#7@@2|))))) (BetreeGraph.Node.children ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeSpec.Redirect.old__children |redirect#0@@11|)) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#7@@2|))))) ($Box |key#7@@2|))))) :qid |BetreeSpecidfy.337:16| :skolemid |4321| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#7@@2|))) :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#7@@2|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#7@@2|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#7@@2|))) )) (forall ((|childref#0@@4| T@U) (|ref#5| T@U) ) (!  (=> (and (and (= (type |childref#0@@4|) BoxType) (= (type |ref#5|) BoxType)) (and ($IsBox |childref#0@@4| Tclass.ReferenceType.Reference) ($IsBox |ref#5| Tclass.ReferenceType.Reference))) (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) |childref#0@@4|)) (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@11|) (BetreeGraph.Node.Node_q ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) |childref#0@@4|)))))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) |childref#0@@4|)) (U_2_bool (MapType0Select (|IMap#Values| (BetreeGraph.Node.children ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) |childref#0@@4|)))) |ref#5|))) (|BetreeSpec.__default.RedirectChildChildInOld#canCall| |redirect#0@@11| |childref#0@@4| |ref#5|)))) :qid |BetreeSpecidfy.348:16| :skolemid |4320| :pattern ( (BetreeSpec.__default.RedirectChildChildInOld |redirect#0@@11| |childref#0@@4| |ref#5|)) )))))))))))))))))))))))))))))))))))))) (= (BetreeSpec.__default.ValidRedirect |redirect#0@@11|)  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (BetreeSpec.__default.WFNode (BetreeSpec.Redirect.old__parent |redirect#0@@11|)) (forall ((|node#0@@13| T@U) ) (!  (=> (and (and (= (type |node#0@@13|) DatatypeTypeType) ($Is |node#0@@13| Tclass.BetreeGraph.Node)) (U_2_bool (MapType0Select (|IMap#Values| (BetreeSpec.Redirect.old__children |redirect#0@@11|)) ($Box |node#0@@13|)))) (BetreeSpec.__default.WFNode |node#0@@13|)) :qid |BetreeSpecidfy.305:16| :skolemid |4289| :pattern ( (BetreeSpec.__default.WFNode |node#0@@13|)) :pattern ( (MapType0Select (|IMap#Values| (BetreeSpec.Redirect.old__children |redirect#0@@11|)) ($Box |node#0@@13|))) ))) (BetreeSpec.__default.WFNode (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) (forall ((|node#1@@1| T@U) ) (!  (=> (and (and (= (type |node#1@@1|) DatatypeTypeType) ($Is |node#1@@1| Tclass.BetreeGraph.Node)) (U_2_bool (MapType0Select (|IMap#Values| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) ($Box |node#1@@1|)))) (BetreeSpec.__default.WFNode |node#1@@1|)) :qid |BetreeSpecidfy.307:16| :skolemid |4290| :pattern ( (BetreeSpec.__default.WFNode |node#1@@1|)) :pattern ( (MapType0Select (|IMap#Values| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) ($Box |node#1@@1|))) ))) (forall ((|key#0@@176| T@U) ) (!  (=> (= (type |key#0@@176|) (SeqType BoxType)) (=> (and ($Is |key#0@@176| (TSeq Tclass.NativeTypes.byte)) (and (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#0@@176|))) (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#0@@176|))))) (|Seq#Contains| (BetreeSpec.Redirect.old__childrefs |redirect#0@@11|) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#0@@176|))))) :qid |BetreeSpecidfy.310:16| :skolemid |4291| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#0@@176|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#0@@176|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#0@@176|))) ))) (forall ((|key#1@@24| T@U) ) (!  (=> (= (type |key#1@@24|) (SeqType BoxType)) (=> (and ($Is |key#1@@24| (TSeq Tclass.NativeTypes.byte)) (and (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#1@@24|))) (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#1@@24|))))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children |redirect#0@@11|)) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#1@@24|)))))) :qid |BetreeSpecidfy.311:16| :skolemid |4292| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#1@@24|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#1@@24|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#1@@24|))) ))) (forall ((|ref#0@@17| T@U) ) (!  (=> (= (type |ref#0@@17|) BoxType) (=> (and ($IsBox |ref#0@@17| Tclass.ReferenceType.Reference) (|Seq#Contains| (BetreeSpec.Redirect.old__childrefs |redirect#0@@11|) |ref#0@@17|)) (BetreeSpec.__default.RedirectRefInOldChildren |redirect#0@@11| |ref#0@@17|))) :qid |BetreeSpecidfy.312:16| :skolemid |4293| :pattern ( (BetreeSpec.__default.RedirectRefInOldChildren |redirect#0@@11| |ref#0@@17|)) ))) (forall ((|ref#1@@7| T@U) ) (!  (=> (= (type |ref#1@@7|) BoxType) (=> (and ($IsBox |ref#1@@7| Tclass.ReferenceType.Reference) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children |redirect#0@@11|)) |ref#1@@7|))) (BetreeSpec.__default.RedirectRefInOldChildren |redirect#0@@11| |ref#1@@7|))) :qid |BetreeSpecidfy.313:16| :skolemid |4294| :pattern ( (BetreeSpec.__default.RedirectRefInOldChildren |redirect#0@@11| |ref#1@@7|)) ))) (forall ((|ref#2@@2| T@U) ) (!  (=> (and (and (= (type |ref#2@@2|) BoxType) ($IsBox |ref#2@@2| Tclass.ReferenceType.Reference)) (|Seq#Contains| (BetreeSpec.Redirect.old__childrefs |redirect#0@@11|) |ref#2@@2|)) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children |redirect#0@@11|)) |ref#2@@2|))) :qid |BetreeSpecidfy.314:16| :skolemid |4295| :pattern ( (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children |redirect#0@@11|)) |ref#2@@2|)) :pattern ( (|Seq#Contains| (BetreeSpec.Redirect.old__childrefs |redirect#0@@11|) |ref#2@@2|)) ))) (forall ((|key#2@@10| T@U) ) (!  (=> (= (type |key#2@@10|) (SeqType BoxType)) (=> (and ($Is |key#2@@10| (TSeq Tclass.NativeTypes.byte)) (and (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#2@@10|))) (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#2@@10|))))) (|Seq#Contains| (BetreeSpec.Redirect.new__childrefs |redirect#0@@11|) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#2@@10|))))) :qid |BetreeSpecidfy.317:16| :skolemid |4296| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#2@@10|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#2@@10|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#2@@10|))) ))) (forall ((|ref#3@@2| T@U) ) (!  (=> (= (type |ref#3@@2|) BoxType) (=> (and ($IsBox |ref#3@@2| Tclass.ReferenceType.Reference) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) |ref#3@@2|))) (|Seq#Contains| (BetreeSpec.Redirect.new__childrefs |redirect#0@@11|) |ref#3@@2|))) :qid |BetreeSpecidfy.318:16| :skolemid |4297| :pattern ( (|Seq#Contains| (BetreeSpec.Redirect.new__childrefs |redirect#0@@11|) |ref#3@@2|)) :pattern ( (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) |ref#3@@2|)) ))) (forall ((|ref#4@@1| T@U) ) (!  (=> (= (type |ref#4@@1|) BoxType) (=> (and ($IsBox |ref#4@@1| Tclass.ReferenceType.Reference) (|Seq#Contains| (BetreeSpec.Redirect.new__childrefs |redirect#0@@11|) |ref#4@@1|)) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) |ref#4@@1|)))) :qid |BetreeSpecidfy.319:16| :skolemid |4298| :pattern ( (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) |ref#4@@1|)) :pattern ( (|Seq#Contains| (BetreeSpec.Redirect.new__childrefs |redirect#0@@11|) |ref#4@@1|)) ))) (|IMap#Equal| (BetreeGraph.Node.buffer (BetreeSpec.Redirect.new__parent |redirect#0@@11|)) (BetreeGraph.Node.buffer (BetreeSpec.Redirect.old__parent |redirect#0@@11|)))) (forall ((|key#3@@6| T@U) ) (!  (=> (and (and (= (type |key#3@@6|) (SeqType BoxType)) ($Is |key#3@@6| Tclass.KeyType.Key)) (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#3@@6|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#3@@6|)))) :qid |BetreeSpecidfy.323:16| :skolemid |4299| :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#3@@6|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#3@@6|))) ))) (forall ((|key#4@@3| T@U) ) (!  (=> (and (and (= (type |key#4@@3|) (SeqType BoxType)) ($Is |key#4@@3| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#4@@3|)))) (|Seq#Contains| (BetreeSpec.Redirect.new__childrefs |redirect#0@@11|) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#4@@3|)))) :qid |BetreeSpecidfy.324:16| :skolemid |4300| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#4@@3|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#4@@3|))) ))) (forall ((|key#5@@3| T@U) ) (!  (=> (and (and (= (type |key#5@@3|) (SeqType BoxType)) ($Is |key#5@@3| Tclass.KeyType.Key)) (not (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#5@@3|))))) (Maps.__default.IMapsAgreeOnKey Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|)) (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|)) ($Box |key#5@@3|))) :qid |BetreeSpecidfy.325:16| :skolemid |4301| :pattern ( (Maps.__default.IMapsAgreeOnKey Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|)) (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|)) ($Box |key#5@@3|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#5@@3|))) ))) (forall ((|key#6@@3| T@U) ) (!  (=> (and (= (type |key#6@@3|) (SeqType BoxType)) ($Is |key#6@@3| Tclass.KeyType.Key)) (and (and (=> (and (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#6@@3|))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#6@@3|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children |redirect#0@@11|)) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#6@@3|))))) (=> (and (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#6@@3|))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#6@@3|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#6@@3|)))))) (=> (and (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#6@@3|))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#6@@3|)))) (Maps.__default.IMapsAgreeOnKey Tclass.KeyType.Key Tclass.ValueMessage.Message (BetreeGraph.Node.buffer ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#6@@3|))))) (BetreeGraph.Node.buffer ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeSpec.Redirect.old__children |redirect#0@@11|)) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#6@@3|))))) ($Box |key#6@@3|))))) :qid |BetreeSpecidfy.328:16| :skolemid |4302| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#6@@3|))) :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#6@@3|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#6@@3|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#6@@3|))) ))) (forall ((|key#7@@3| T@U) ) (!  (=> (and (= (type |key#7@@3|) (SeqType BoxType)) ($Is |key#7@@3| Tclass.KeyType.Key)) (and (and (=> (and (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#7@@3|))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#7@@3|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children |redirect#0@@11|)) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#7@@3|))))) (=> (and (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#7@@3|))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#7@@3|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#7@@3|)))))) (=> (and (U_2_bool (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#7@@3|))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#7@@3|)))) (Maps.__default.IMapsAgreeOnKey Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#7@@3|))))) (BetreeGraph.Node.children ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeSpec.Redirect.old__children |redirect#0@@11|)) (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#7@@3|))))) ($Box |key#7@@3|))))) :qid |BetreeSpecidfy.337:16| :skolemid |4303| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@11|))) ($Box |key#7@@3|))) :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#7@@3|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@11|))) ($Box |key#7@@3|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@11|) ($Box |key#7@@3|))) ))) (forall ((|childref#0@@5| T@U) (|ref#5@@0| T@U) ) (!  (=> (and (= (type |childref#0@@5|) BoxType) (= (type |ref#5@@0|) BoxType)) (=> (and (and ($IsBox |childref#0@@5| Tclass.ReferenceType.Reference) ($IsBox |ref#5@@0| Tclass.ReferenceType.Reference)) (and (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) |childref#0@@5|)) (U_2_bool (MapType0Select (|IMap#Values| (BetreeGraph.Node.children ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeSpec.Redirect.new__children |redirect#0@@11|)) |childref#0@@5|)))) |ref#5@@0|)))) (BetreeSpec.__default.RedirectChildChildInOld |redirect#0@@11| |childref#0@@5| |ref#5@@0|))) :qid |BetreeSpecidfy.348:16| :skolemid |4304| :pattern ( (BetreeSpec.__default.RedirectChildChildInOld |redirect#0@@11| |childref#0@@5| |ref#5@@0|)) )))))) :qid |BetreeSpecidfy.303:27| :skolemid |4336| :pattern ( (BetreeSpec.__default.ValidRedirect |redirect#0@@11|)) ))))
(assert  (=> true (forall ((|redirect#0@@12| T@U) ) (!  (=> (and (= (type |redirect#0@@12|) DatatypeTypeType) (or (|BetreeSpec.__default.ValidRedirect#canCall| (Lit |redirect#0@@12|)) ($Is |redirect#0@@12| Tclass.BetreeSpec.Redirect))) (and (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (|BetreeSpec.__default.WFNode#canCall| (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))) (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.__default.WFNode (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))))) (and (forall ((|node#2| T@U) ) (!  (=> (and (= (type |node#2|) DatatypeTypeType) ($Is |node#2| Tclass.BetreeGraph.Node)) (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (=> (U_2_bool (MapType0Select (Lit (|IMap#Values| (Lit (BetreeSpec.Redirect.old__children (Lit |redirect#0@@12|))))) ($Box |node#2|))) (|BetreeSpec.__default.WFNode#canCall| |node#2|)))) :qid |BetreeSpecidfy.305:16| :skolemid |4353| :pattern ( (BetreeSpec.__default.WFNode |node#2|)) :pattern ( (MapType0Select (|IMap#Values| (BetreeSpec.Redirect.old__children |redirect#0@@12|)) ($Box |node#2|))) )) (=> (forall ((|node#2@@0| T@U) ) (!  (=> (and (and (= (type |node#2@@0|) DatatypeTypeType) ($Is |node#2@@0| Tclass.BetreeGraph.Node)) (U_2_bool (MapType0Select (Lit (|IMap#Values| (Lit (BetreeSpec.Redirect.old__children (Lit |redirect#0@@12|))))) ($Box |node#2@@0|)))) (BetreeSpec.__default.WFNode |node#2@@0|)) :qid |BetreeSpecidfy.305:16| :skolemid |4383| :pattern ( (BetreeSpec.__default.WFNode |node#2@@0|)) :pattern ( (MapType0Select (|IMap#Values| (BetreeSpec.Redirect.old__children |redirect#0@@12|)) ($Box |node#2@@0|))) )) (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (|BetreeSpec.__default.WFNode#canCall| (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|))))) (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.__default.WFNode (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|))))))) (and (forall ((|node#3| T@U) ) (!  (=> (and (= (type |node#3|) DatatypeTypeType) ($Is |node#3| Tclass.BetreeGraph.Node)) (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (=> (U_2_bool (MapType0Select (Lit (|IMap#Values| (Lit (BetreeSpec.Redirect.new__children (Lit |redirect#0@@12|))))) ($Box |node#3|))) (|BetreeSpec.__default.WFNode#canCall| |node#3|)))) :qid |BetreeSpecidfy.307:16| :skolemid |4354| :pattern ( (BetreeSpec.__default.WFNode |node#3|)) :pattern ( (MapType0Select (|IMap#Values| (BetreeSpec.Redirect.new__children |redirect#0@@12|)) ($Box |node#3|))) )) (=> (forall ((|node#3@@0| T@U) ) (!  (=> (and (and (= (type |node#3@@0|) DatatypeTypeType) ($Is |node#3@@0| Tclass.BetreeGraph.Node)) (U_2_bool (MapType0Select (Lit (|IMap#Values| (Lit (BetreeSpec.Redirect.new__children (Lit |redirect#0@@12|))))) ($Box |node#3@@0|)))) (BetreeSpec.__default.WFNode |node#3@@0|)) :qid |BetreeSpecidfy.307:16| :skolemid |4382| :pattern ( (BetreeSpec.__default.WFNode |node#3@@0|)) :pattern ( (MapType0Select (|IMap#Values| (BetreeSpec.Redirect.new__children |redirect#0@@12|)) ($Box |node#3@@0|))) )) (and (forall ((|key#8@@0| T@U) ) (!  (=> (and (= (type |key#8@@0|) (SeqType BoxType)) ($Is |key#8@@0| (TSeq Tclass.NativeTypes.byte))) (and (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))) ($Box |key#8@@0|))) (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))) ($Box |key#8@@0|))) (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#8@@0|)))) (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))) (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)))))) :qid |BetreeSpecidfy.310:16| :skolemid |4355| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@12|))) ($Box |key#8@@0|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@12|) ($Box |key#8@@0|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@12|))) ($Box |key#8@@0|))) )) (=> (forall ((|key#8@@1| T@U) ) (!  (=> (= (type |key#8@@1|) (SeqType BoxType)) (=> (and ($Is |key#8@@1| (TSeq Tclass.NativeTypes.byte)) (and (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))) ($Box |key#8@@1|))) (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#8@@1|))))) (|Seq#Contains| (BetreeSpec.Redirect.old__childrefs (Lit |redirect#0@@12|)) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|)))))) ($Box |key#8@@1|))))) :qid |BetreeSpecidfy.310:16| :skolemid |4381| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@12|))) ($Box |key#8@@1|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@12|) ($Box |key#8@@1|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@12|))) ($Box |key#8@@1|))) )) (and (forall ((|key#9@@0| T@U) ) (!  (=> (and (= (type |key#9@@0|) (SeqType BoxType)) ($Is |key#9@@0| (TSeq Tclass.NativeTypes.byte))) (and (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))) ($Box |key#9@@0|))) (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))) ($Box |key#9@@0|))) (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#9@@0|)))) (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))) (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)))))) :qid |BetreeSpecidfy.311:16| :skolemid |4356| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@12|))) ($Box |key#9@@0|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@12|) ($Box |key#9@@0|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@12|))) ($Box |key#9@@0|))) )) (=> (forall ((|key#9@@1| T@U) ) (!  (=> (= (type |key#9@@1|) (SeqType BoxType)) (=> (and ($Is |key#9@@1| (TSeq Tclass.NativeTypes.byte)) (and (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))) ($Box |key#9@@1|))) (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#9@@1|))))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children (Lit |redirect#0@@12|))) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|)))))) ($Box |key#9@@1|)))))) :qid |BetreeSpecidfy.311:16| :skolemid |4380| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@12|))) ($Box |key#9@@1|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@12|) ($Box |key#9@@1|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@12|))) ($Box |key#9@@1|))) )) (and (forall ((|ref#6| T@U) ) (!  (=> (and (= (type |ref#6|) BoxType) ($IsBox |ref#6| Tclass.ReferenceType.Reference)) (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (=> (|Seq#Contains| (BetreeSpec.Redirect.old__childrefs (Lit |redirect#0@@12|)) |ref#6|) (|BetreeSpec.__default.RedirectRefInOldChildren#canCall| (Lit |redirect#0@@12|) |ref#6|)))) :qid |BetreeSpecidfy.312:16| :skolemid |4357| :pattern ( (BetreeSpec.__default.RedirectRefInOldChildren |redirect#0@@12| |ref#6|)) )) (=> (forall ((|ref#6@@0| T@U) ) (!  (=> (= (type |ref#6@@0|) BoxType) (=> (and ($IsBox |ref#6@@0| Tclass.ReferenceType.Reference) (|Seq#Contains| (BetreeSpec.Redirect.old__childrefs (Lit |redirect#0@@12|)) |ref#6@@0|)) (BetreeSpec.__default.RedirectRefInOldChildren (Lit |redirect#0@@12|) |ref#6@@0|))) :qid |BetreeSpecidfy.312:16| :skolemid |4379| :pattern ( (BetreeSpec.__default.RedirectRefInOldChildren |redirect#0@@12| |ref#6@@0|)) )) (and (forall ((|ref#7| T@U) ) (!  (=> (and (= (type |ref#7|) BoxType) ($IsBox |ref#7| Tclass.ReferenceType.Reference)) (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children (Lit |redirect#0@@12|))) |ref#7|)) (|BetreeSpec.__default.RedirectRefInOldChildren#canCall| (Lit |redirect#0@@12|) |ref#7|)))) :qid |BetreeSpecidfy.313:16| :skolemid |4358| :pattern ( (BetreeSpec.__default.RedirectRefInOldChildren |redirect#0@@12| |ref#7|)) )) (=> (forall ((|ref#7@@0| T@U) ) (!  (=> (= (type |ref#7@@0|) BoxType) (=> (and ($IsBox |ref#7@@0| Tclass.ReferenceType.Reference) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children (Lit |redirect#0@@12|))) |ref#7@@0|))) (BetreeSpec.__default.RedirectRefInOldChildren (Lit |redirect#0@@12|) |ref#7@@0|))) :qid |BetreeSpecidfy.313:16| :skolemid |4378| :pattern ( (BetreeSpec.__default.RedirectRefInOldChildren |redirect#0@@12| |ref#7@@0|)) )) (and (forall ((|ref#8| T@U) ) (!  (=> (and (= (type |ref#8|) BoxType) ($IsBox |ref#8| Tclass.ReferenceType.Reference)) (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (=> (|Seq#Contains| (BetreeSpec.Redirect.old__childrefs (Lit |redirect#0@@12|)) |ref#8|) (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|))))) :qid |BetreeSpecidfy.314:16| :skolemid |4359| :pattern ( (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children |redirect#0@@12|)) |ref#8|)) :pattern ( (|Seq#Contains| (BetreeSpec.Redirect.old__childrefs |redirect#0@@12|) |ref#8|)) )) (=> (forall ((|ref#8@@0| T@U) ) (!  (=> (and (and (= (type |ref#8@@0|) BoxType) ($IsBox |ref#8@@0| Tclass.ReferenceType.Reference)) (|Seq#Contains| (BetreeSpec.Redirect.old__childrefs (Lit |redirect#0@@12|)) |ref#8@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children (Lit |redirect#0@@12|))) |ref#8@@0|))) :qid |BetreeSpecidfy.314:16| :skolemid |4377| :pattern ( (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children |redirect#0@@12|)) |ref#8@@0|)) :pattern ( (|Seq#Contains| (BetreeSpec.Redirect.old__childrefs |redirect#0@@12|) |ref#8@@0|)) )) (and (forall ((|key#10@@0| T@U) ) (!  (=> (and (= (type |key#10@@0|) (SeqType BoxType)) ($Is |key#10@@0| (TSeq Tclass.NativeTypes.byte))) (and (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|))))) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|))))) ($Box |key#10@@0|))) (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|))))) ($Box |key#10@@0|))) (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#10@@0|)))) (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|))))) (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)))))) :qid |BetreeSpecidfy.317:16| :skolemid |4360| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@12|))) ($Box |key#10@@0|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@12|) ($Box |key#10@@0|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@12|))) ($Box |key#10@@0|))) )) (=> (forall ((|key#10@@1| T@U) ) (!  (=> (= (type |key#10@@1|) (SeqType BoxType)) (=> (and ($Is |key#10@@1| (TSeq Tclass.NativeTypes.byte)) (and (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|))))) ($Box |key#10@@1|))) (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#10@@1|))))) (|Seq#Contains| (BetreeSpec.Redirect.new__childrefs (Lit |redirect#0@@12|)) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|)))))) ($Box |key#10@@1|))))) :qid |BetreeSpecidfy.317:16| :skolemid |4376| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@12|))) ($Box |key#10@@1|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@12|) ($Box |key#10@@1|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@12|))) ($Box |key#10@@1|))) )) (and (forall ((|ref#9| T@U) ) (!  (=> (and (= (type |ref#9|) BoxType) ($IsBox |ref#9| Tclass.ReferenceType.Reference)) (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children (Lit |redirect#0@@12|))) |ref#9|)) (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|))))) :qid |BetreeSpecidfy.318:16| :skolemid |4361| :pattern ( (|Seq#Contains| (BetreeSpec.Redirect.new__childrefs |redirect#0@@12|) |ref#9|)) :pattern ( (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children |redirect#0@@12|)) |ref#9|)) )) (=> (forall ((|ref#9@@0| T@U) ) (!  (=> (= (type |ref#9@@0|) BoxType) (=> (and ($IsBox |ref#9@@0| Tclass.ReferenceType.Reference) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children (Lit |redirect#0@@12|))) |ref#9@@0|))) (|Seq#Contains| (BetreeSpec.Redirect.new__childrefs (Lit |redirect#0@@12|)) |ref#9@@0|))) :qid |BetreeSpecidfy.318:16| :skolemid |4375| :pattern ( (|Seq#Contains| (BetreeSpec.Redirect.new__childrefs |redirect#0@@12|) |ref#9@@0|)) :pattern ( (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children |redirect#0@@12|)) |ref#9@@0|)) )) (and (forall ((|ref#10| T@U) ) (!  (=> (and (= (type |ref#10|) BoxType) ($IsBox |ref#10| Tclass.ReferenceType.Reference)) (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (=> (|Seq#Contains| (BetreeSpec.Redirect.new__childrefs (Lit |redirect#0@@12|)) |ref#10|) (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|))))) :qid |BetreeSpecidfy.319:16| :skolemid |4362| :pattern ( (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children |redirect#0@@12|)) |ref#10|)) :pattern ( (|Seq#Contains| (BetreeSpec.Redirect.new__childrefs |redirect#0@@12|) |ref#10|)) )) (=> (forall ((|ref#10@@0| T@U) ) (!  (=> (= (type |ref#10@@0|) BoxType) (=> (and ($IsBox |ref#10@@0| Tclass.ReferenceType.Reference) (|Seq#Contains| (BetreeSpec.Redirect.new__childrefs (Lit |redirect#0@@12|)) |ref#10@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children (Lit |redirect#0@@12|))) |ref#10@@0|)))) :qid |BetreeSpecidfy.319:16| :skolemid |4374| :pattern ( (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children |redirect#0@@12|)) |ref#10@@0|)) :pattern ( (|Seq#Contains| (BetreeSpec.Redirect.new__childrefs |redirect#0@@12|) |ref#10@@0|)) )) (and (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|))))) (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|)))))) (=> (|IMap#Equal| (BetreeGraph.Node.buffer (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|)))) (BetreeGraph.Node.buffer (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))) (and (forall ((|key#11@@0| T@U) ) (!  (=> (and (= (type |key#11@@0|) (SeqType BoxType)) ($Is |key#11@@0| Tclass.KeyType.Key)) (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (=> (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#11@@0|))) (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|)))))))) :qid |BetreeSpecidfy.323:16| :skolemid |4363| :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@12|))) ($Box |key#11@@0|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@12|) ($Box |key#11@@0|))) )) (=> (forall ((|key#11@@1| T@U) ) (!  (=> (and (and (= (type |key#11@@1|) (SeqType BoxType)) ($Is |key#11@@1| Tclass.KeyType.Key)) (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#11@@1|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|))))) ($Box |key#11@@1|)))) :qid |BetreeSpecidfy.323:16| :skolemid |4373| :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@12|))) ($Box |key#11@@1|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@12|) ($Box |key#11@@1|))) )) (and (forall ((|key#12| T@U) ) (!  (=> (and (= (type |key#12|) (SeqType BoxType)) ($Is |key#12| (TSeq Tclass.NativeTypes.byte))) (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (=> (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#12|))) (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|))))) (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)))))) :qid |BetreeSpecidfy.324:16| :skolemid |4364| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@12|))) ($Box |key#12|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@12|) ($Box |key#12|))) )) (=> (forall ((|key#12@@0| T@U) ) (!  (=> (and (and (= (type |key#12@@0|) (SeqType BoxType)) ($Is |key#12@@0| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#12@@0|)))) (|Seq#Contains| (BetreeSpec.Redirect.new__childrefs (Lit |redirect#0@@12|)) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|)))))) ($Box |key#12@@0|)))) :qid |BetreeSpecidfy.324:16| :skolemid |4372| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@12|))) ($Box |key#12@@0|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@12|) ($Box |key#12@@0|))) )) (and (forall ((|key#13| T@U) ) (!  (=> (and (= (type |key#13|) (SeqType BoxType)) ($Is |key#13| Tclass.KeyType.Key)) (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (=> (not (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#13|)))) (and (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|))))) (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|)))))) (|Maps.__default.IMapsAgreeOnKey#canCall| Tclass.KeyType.Key Tclass.ReferenceType.Reference (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|))))) (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))) ($Box |key#13|)))))) :qid |BetreeSpecidfy.325:16| :skolemid |4365| :pattern ( (Maps.__default.IMapsAgreeOnKey Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@12|)) (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@12|)) ($Box |key#13|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@12|) ($Box |key#13|))) )) (=> (forall ((|key#13@@0| T@U) ) (!  (=> (and (and (= (type |key#13@@0|) (SeqType BoxType)) ($Is |key#13@@0| Tclass.KeyType.Key)) (not (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#13@@0|))))) (Maps.__default.IMapsAgreeOnKey Tclass.KeyType.Key Tclass.ReferenceType.Reference (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|))))) (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))) ($Box |key#13@@0|))) :qid |BetreeSpecidfy.325:16| :skolemid |4371| :pattern ( (Maps.__default.IMapsAgreeOnKey Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@12|)) (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@12|)) ($Box |key#13@@0|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@12|) ($Box |key#13@@0|))) )) (and (forall ((|key#14| T@U) ) (!  (=> (and (= (type |key#14|) (SeqType BoxType)) ($Is |key#14| Tclass.KeyType.Key)) (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (=> (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#14|))) (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))) (=> (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))))) ($Box |key#14|))) (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))) (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|))))))) (=> (=> (and (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#14|))) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))))) ($Box |key#14|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children (Lit |redirect#0@@12|))) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|)))))) ($Box |key#14|))))) (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (=> (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#14|))) (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))) (=> (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))))) ($Box |key#14|))) (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|))))) (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|))))))) (=> (=> (and (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#14|))) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))))) ($Box |key#14|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children (Lit |redirect#0@@12|))) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|)))))) ($Box |key#14|))))) (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (=> (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#14|))) (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))) (=> (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))))) ($Box |key#14|))) (and (and (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|)))))) (BetreeGraph.Node.Node_q ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeSpec.Redirect.new__children (Lit |redirect#0@@12|)))) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|)))))) ($Box |key#14|)))))) (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|)))))) (BetreeGraph.Node.Node_q ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeSpec.Redirect.old__children (Lit |redirect#0@@12|)))) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|)))))) ($Box |key#14|))))))) (|Maps.__default.IMapsAgreeOnKey#canCall| Tclass.KeyType.Key Tclass.ValueMessage.Message (BetreeGraph.Node.buffer ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeSpec.Redirect.new__children (Lit |redirect#0@@12|)))) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|)))))) ($Box |key#14|))))) (BetreeGraph.Node.buffer ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeSpec.Redirect.old__children (Lit |redirect#0@@12|)))) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|)))))) ($Box |key#14|))))) ($Box |key#14|)))))))))))) :qid |BetreeSpecidfy.328:16| :skolemid |4366| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@12|))) ($Box |key#14|))) :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@12|))) ($Box |key#14|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@12|))) ($Box |key#14|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@12|) ($Box |key#14|))) )) (=> (forall ((|key#14@@0| T@U) ) (!  (=> (and (= (type |key#14@@0|) (SeqType BoxType)) ($Is |key#14@@0| Tclass.KeyType.Key)) (and (and (=> (and (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#14@@0|))) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))))) ($Box |key#14@@0|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children (Lit |redirect#0@@12|))) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|)))))) ($Box |key#14@@0|))))) (=> (and (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#14@@0|))) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))))) ($Box |key#14@@0|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children (Lit |redirect#0@@12|))) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|)))))) ($Box |key#14@@0|)))))) (=> (and (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#14@@0|))) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))))) ($Box |key#14@@0|)))) (Maps.__default.IMapsAgreeOnKey Tclass.KeyType.Key Tclass.ValueMessage.Message (BetreeGraph.Node.buffer ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeSpec.Redirect.new__children (Lit |redirect#0@@12|)))) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|)))))) ($Box |key#14@@0|))))) (BetreeGraph.Node.buffer ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeSpec.Redirect.old__children (Lit |redirect#0@@12|)))) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|)))))) ($Box |key#14@@0|))))) ($Box |key#14@@0|))))) :qid |BetreeSpecidfy.328:16| :skolemid |4370| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@12|))) ($Box |key#14@@0|))) :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@12|))) ($Box |key#14@@0|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@12|))) ($Box |key#14@@0|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@12|) ($Box |key#14@@0|))) )) (and (forall ((|key#15| T@U) ) (!  (=> (and (= (type |key#15|) (SeqType BoxType)) ($Is |key#15| Tclass.KeyType.Key)) (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (=> (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#15|))) (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))) (=> (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))))) ($Box |key#15|))) (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))) (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|))))))) (=> (=> (and (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#15|))) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))))) ($Box |key#15|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children (Lit |redirect#0@@12|))) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|)))))) ($Box |key#15|))))) (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (=> (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#15|))) (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))) (=> (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))))) ($Box |key#15|))) (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|))))) (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|))))))) (=> (=> (and (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#15|))) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))))) ($Box |key#15|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children (Lit |redirect#0@@12|))) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|)))))) ($Box |key#15|))))) (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (=> (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#15|))) (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))) (=> (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))))) ($Box |key#15|))) (and (and (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|)))))) (BetreeGraph.Node.Node_q ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeSpec.Redirect.new__children (Lit |redirect#0@@12|)))) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|)))))) ($Box |key#15|)))))) (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (BetreeGraph.Node.Node_q (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|)))))) (BetreeGraph.Node.Node_q ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeSpec.Redirect.old__children (Lit |redirect#0@@12|)))) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|)))))) ($Box |key#15|))))))) (|Maps.__default.IMapsAgreeOnKey#canCall| Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeSpec.Redirect.new__children (Lit |redirect#0@@12|)))) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|)))))) ($Box |key#15|))))) (BetreeGraph.Node.children ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeSpec.Redirect.old__children (Lit |redirect#0@@12|)))) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|)))))) ($Box |key#15|))))) ($Box |key#15|)))))))))))) :qid |BetreeSpecidfy.337:16| :skolemid |4367| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@12|))) ($Box |key#15|))) :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@12|))) ($Box |key#15|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@12|))) ($Box |key#15|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@12|) ($Box |key#15|))) )) (=> (forall ((|key#15@@0| T@U) ) (!  (=> (and (= (type |key#15@@0|) (SeqType BoxType)) ($Is |key#15@@0| Tclass.KeyType.Key)) (and (and (=> (and (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#15@@0|))) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))))) ($Box |key#15@@0|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children (Lit |redirect#0@@12|))) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|)))))) ($Box |key#15@@0|))))) (=> (and (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#15@@0|))) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))))) ($Box |key#15@@0|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children (Lit |redirect#0@@12|))) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|)))))) ($Box |key#15@@0|)))))) (=> (and (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#15@@0|))) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))))) ($Box |key#15@@0|)))) (Maps.__default.IMapsAgreeOnKey Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeSpec.Redirect.new__children (Lit |redirect#0@@12|)))) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|)))))) ($Box |key#15@@0|))))) (BetreeGraph.Node.children ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeSpec.Redirect.old__children (Lit |redirect#0@@12|)))) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|)))))) ($Box |key#15@@0|))))) ($Box |key#15@@0|))))) :qid |BetreeSpecidfy.337:16| :skolemid |4369| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@12|))) ($Box |key#15@@0|))) :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@12|))) ($Box |key#15@@0|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@12|))) ($Box |key#15@@0|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@12|) ($Box |key#15@@0|))) )) (forall ((|childref#1| T@U) (|ref#11| T@U) ) (!  (=> (and (and (= (type |childref#1|) BoxType) (= (type |ref#11|) BoxType)) (and ($IsBox |childref#1| Tclass.ReferenceType.Reference) ($IsBox |ref#11| Tclass.ReferenceType.Reference))) (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children (Lit |redirect#0@@12|))) |childref#1|)) (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@12|)) (BetreeGraph.Node.Node_q ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeSpec.Redirect.new__children (Lit |redirect#0@@12|)))) |childref#1|)))))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children (Lit |redirect#0@@12|))) |childref#1|)) (U_2_bool (MapType0Select (|IMap#Values| (BetreeGraph.Node.children ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeSpec.Redirect.new__children (Lit |redirect#0@@12|)))) |childref#1|)))) |ref#11|))) (|BetreeSpec.__default.RedirectChildChildInOld#canCall| (Lit |redirect#0@@12|) |childref#1| |ref#11|)))) :qid |BetreeSpecidfy.348:16| :skolemid |4368| :pattern ( (BetreeSpec.__default.RedirectChildChildInOld |redirect#0@@12| |childref#1| |ref#11|)) )))))))))))))))))))))))))))))))))))))) (= (BetreeSpec.__default.ValidRedirect (Lit |redirect#0@@12|))  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (BetreeSpec.__default.WFNode (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|)))) (forall ((|node#2@@1| T@U) ) (!  (=> (and (and (= (type |node#2@@1|) DatatypeTypeType) ($Is |node#2@@1| Tclass.BetreeGraph.Node)) (U_2_bool (MapType0Select (Lit (|IMap#Values| (Lit (BetreeSpec.Redirect.old__children (Lit |redirect#0@@12|))))) ($Box |node#2@@1|)))) (BetreeSpec.__default.WFNode |node#2@@1|)) :qid |BetreeSpecidfy.305:16| :skolemid |4337| :pattern ( (BetreeSpec.__default.WFNode |node#2@@1|)) :pattern ( (MapType0Select (|IMap#Values| (BetreeSpec.Redirect.old__children |redirect#0@@12|)) ($Box |node#2@@1|))) ))) (BetreeSpec.__default.WFNode (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|))))) (forall ((|node#3@@1| T@U) ) (!  (=> (and (and (= (type |node#3@@1|) DatatypeTypeType) ($Is |node#3@@1| Tclass.BetreeGraph.Node)) (U_2_bool (MapType0Select (Lit (|IMap#Values| (Lit (BetreeSpec.Redirect.new__children (Lit |redirect#0@@12|))))) ($Box |node#3@@1|)))) (BetreeSpec.__default.WFNode |node#3@@1|)) :qid |BetreeSpecidfy.307:16| :skolemid |4338| :pattern ( (BetreeSpec.__default.WFNode |node#3@@1|)) :pattern ( (MapType0Select (|IMap#Values| (BetreeSpec.Redirect.new__children |redirect#0@@12|)) ($Box |node#3@@1|))) ))) (forall ((|key#8@@2| T@U) ) (!  (=> (= (type |key#8@@2|) (SeqType BoxType)) (=> (and ($Is |key#8@@2| (TSeq Tclass.NativeTypes.byte)) (and (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))) ($Box |key#8@@2|))) (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#8@@2|))))) (|Seq#Contains| (BetreeSpec.Redirect.old__childrefs (Lit |redirect#0@@12|)) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|)))))) ($Box |key#8@@2|))))) :qid |BetreeSpecidfy.310:16| :skolemid |4339| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@12|))) ($Box |key#8@@2|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@12|) ($Box |key#8@@2|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@12|))) ($Box |key#8@@2|))) ))) (forall ((|key#9@@2| T@U) ) (!  (=> (= (type |key#9@@2|) (SeqType BoxType)) (=> (and ($Is |key#9@@2| (TSeq Tclass.NativeTypes.byte)) (and (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))) ($Box |key#9@@2|))) (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#9@@2|))))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children (Lit |redirect#0@@12|))) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|)))))) ($Box |key#9@@2|)))))) :qid |BetreeSpecidfy.311:16| :skolemid |4340| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@12|))) ($Box |key#9@@2|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@12|) ($Box |key#9@@2|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@12|))) ($Box |key#9@@2|))) ))) (forall ((|ref#6@@1| T@U) ) (!  (=> (= (type |ref#6@@1|) BoxType) (=> (and ($IsBox |ref#6@@1| Tclass.ReferenceType.Reference) (|Seq#Contains| (BetreeSpec.Redirect.old__childrefs (Lit |redirect#0@@12|)) |ref#6@@1|)) (BetreeSpec.__default.RedirectRefInOldChildren (Lit |redirect#0@@12|) |ref#6@@1|))) :qid |BetreeSpecidfy.312:16| :skolemid |4341| :pattern ( (BetreeSpec.__default.RedirectRefInOldChildren |redirect#0@@12| |ref#6@@1|)) ))) (forall ((|ref#7@@1| T@U) ) (!  (=> (= (type |ref#7@@1|) BoxType) (=> (and ($IsBox |ref#7@@1| Tclass.ReferenceType.Reference) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children (Lit |redirect#0@@12|))) |ref#7@@1|))) (BetreeSpec.__default.RedirectRefInOldChildren (Lit |redirect#0@@12|) |ref#7@@1|))) :qid |BetreeSpecidfy.313:16| :skolemid |4342| :pattern ( (BetreeSpec.__default.RedirectRefInOldChildren |redirect#0@@12| |ref#7@@1|)) ))) (forall ((|ref#8@@1| T@U) ) (!  (=> (and (and (= (type |ref#8@@1|) BoxType) ($IsBox |ref#8@@1| Tclass.ReferenceType.Reference)) (|Seq#Contains| (BetreeSpec.Redirect.old__childrefs (Lit |redirect#0@@12|)) |ref#8@@1|)) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children (Lit |redirect#0@@12|))) |ref#8@@1|))) :qid |BetreeSpecidfy.314:16| :skolemid |4343| :pattern ( (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children |redirect#0@@12|)) |ref#8@@1|)) :pattern ( (|Seq#Contains| (BetreeSpec.Redirect.old__childrefs |redirect#0@@12|) |ref#8@@1|)) ))) (forall ((|key#10@@2| T@U) ) (!  (=> (= (type |key#10@@2|) (SeqType BoxType)) (=> (and ($Is |key#10@@2| (TSeq Tclass.NativeTypes.byte)) (and (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|))))) ($Box |key#10@@2|))) (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#10@@2|))))) (|Seq#Contains| (BetreeSpec.Redirect.new__childrefs (Lit |redirect#0@@12|)) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|)))))) ($Box |key#10@@2|))))) :qid |BetreeSpecidfy.317:16| :skolemid |4344| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@12|))) ($Box |key#10@@2|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@12|) ($Box |key#10@@2|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@12|))) ($Box |key#10@@2|))) ))) (forall ((|ref#9@@1| T@U) ) (!  (=> (= (type |ref#9@@1|) BoxType) (=> (and ($IsBox |ref#9@@1| Tclass.ReferenceType.Reference) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children (Lit |redirect#0@@12|))) |ref#9@@1|))) (|Seq#Contains| (BetreeSpec.Redirect.new__childrefs (Lit |redirect#0@@12|)) |ref#9@@1|))) :qid |BetreeSpecidfy.318:16| :skolemid |4345| :pattern ( (|Seq#Contains| (BetreeSpec.Redirect.new__childrefs |redirect#0@@12|) |ref#9@@1|)) :pattern ( (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children |redirect#0@@12|)) |ref#9@@1|)) ))) (forall ((|ref#10@@1| T@U) ) (!  (=> (= (type |ref#10@@1|) BoxType) (=> (and ($IsBox |ref#10@@1| Tclass.ReferenceType.Reference) (|Seq#Contains| (BetreeSpec.Redirect.new__childrefs (Lit |redirect#0@@12|)) |ref#10@@1|)) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children (Lit |redirect#0@@12|))) |ref#10@@1|)))) :qid |BetreeSpecidfy.319:16| :skolemid |4346| :pattern ( (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children |redirect#0@@12|)) |ref#10@@1|)) :pattern ( (|Seq#Contains| (BetreeSpec.Redirect.new__childrefs |redirect#0@@12|) |ref#10@@1|)) ))) (|IMap#Equal| (BetreeGraph.Node.buffer (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|)))) (BetreeGraph.Node.buffer (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|)))))) (forall ((|key#11@@2| T@U) ) (!  (=> (and (and (= (type |key#11@@2|) (SeqType BoxType)) ($Is |key#11@@2| Tclass.KeyType.Key)) (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#11@@2|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|))))) ($Box |key#11@@2|)))) :qid |BetreeSpecidfy.323:16| :skolemid |4347| :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@12|))) ($Box |key#11@@2|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@12|) ($Box |key#11@@2|))) ))) (forall ((|key#12@@1| T@U) ) (!  (=> (and (and (= (type |key#12@@1|) (SeqType BoxType)) ($Is |key#12@@1| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#12@@1|)))) (|Seq#Contains| (BetreeSpec.Redirect.new__childrefs (Lit |redirect#0@@12|)) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|)))))) ($Box |key#12@@1|)))) :qid |BetreeSpecidfy.324:16| :skolemid |4348| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@12|))) ($Box |key#12@@1|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@12|) ($Box |key#12@@1|))) ))) (forall ((|key#13@@1| T@U) ) (!  (=> (and (and (= (type |key#13@@1|) (SeqType BoxType)) ($Is |key#13@@1| Tclass.KeyType.Key)) (not (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#13@@1|))))) (Maps.__default.IMapsAgreeOnKey Tclass.KeyType.Key Tclass.ReferenceType.Reference (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|))))) (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))) ($Box |key#13@@1|))) :qid |BetreeSpecidfy.325:16| :skolemid |4349| :pattern ( (Maps.__default.IMapsAgreeOnKey Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@12|)) (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@12|)) ($Box |key#13@@1|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@12|) ($Box |key#13@@1|))) ))) (forall ((|key#14@@1| T@U) ) (!  (=> (and (= (type |key#14@@1|) (SeqType BoxType)) ($Is |key#14@@1| Tclass.KeyType.Key)) (and (and (=> (and (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#14@@1|))) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))))) ($Box |key#14@@1|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children (Lit |redirect#0@@12|))) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|)))))) ($Box |key#14@@1|))))) (=> (and (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#14@@1|))) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))))) ($Box |key#14@@1|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children (Lit |redirect#0@@12|))) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|)))))) ($Box |key#14@@1|)))))) (=> (and (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#14@@1|))) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))))) ($Box |key#14@@1|)))) (Maps.__default.IMapsAgreeOnKey Tclass.KeyType.Key Tclass.ValueMessage.Message (BetreeGraph.Node.buffer ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeSpec.Redirect.new__children (Lit |redirect#0@@12|)))) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|)))))) ($Box |key#14@@1|))))) (BetreeGraph.Node.buffer ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeSpec.Redirect.old__children (Lit |redirect#0@@12|)))) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|)))))) ($Box |key#14@@1|))))) ($Box |key#14@@1|))))) :qid |BetreeSpecidfy.328:16| :skolemid |4350| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@12|))) ($Box |key#14@@1|))) :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@12|))) ($Box |key#14@@1|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@12|))) ($Box |key#14@@1|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@12|) ($Box |key#14@@1|))) ))) (forall ((|key#15@@1| T@U) ) (!  (=> (and (= (type |key#15@@1|) (SeqType BoxType)) ($Is |key#15@@1| Tclass.KeyType.Key)) (and (and (=> (and (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#15@@1|))) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))))) ($Box |key#15@@1|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.old__children (Lit |redirect#0@@12|))) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|)))))) ($Box |key#15@@1|))))) (=> (and (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#15@@1|))) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))))) ($Box |key#15@@1|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children (Lit |redirect#0@@12|))) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|)))))) ($Box |key#15@@1|)))))) (=> (and (U_2_bool (MapType0Select (Lit (BetreeSpec.Redirect.keys (Lit |redirect#0@@12|))) ($Box |key#15@@1|))) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|))))))) ($Box |key#15@@1|)))) (Maps.__default.IMapsAgreeOnKey Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeSpec.Redirect.new__children (Lit |redirect#0@@12|)))) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@12|)))))) ($Box |key#15@@1|))))) (BetreeGraph.Node.children ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeSpec.Redirect.old__children (Lit |redirect#0@@12|)))) (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@12|)))))) ($Box |key#15@@1|))))) ($Box |key#15@@1|))))) :qid |BetreeSpecidfy.337:16| :skolemid |4351| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.new__parent |redirect#0@@12|))) ($Box |key#15@@1|))) :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@12|))) ($Box |key#15@@1|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (BetreeSpec.Redirect.old__parent |redirect#0@@12|))) ($Box |key#15@@1|))) :pattern ( (MapType0Select (BetreeSpec.Redirect.keys |redirect#0@@12|) ($Box |key#15@@1|))) ))) (forall ((|childref#1@@0| T@U) (|ref#11@@0| T@U) ) (!  (=> (and (= (type |childref#1@@0|) BoxType) (= (type |ref#11@@0|) BoxType)) (=> (and (and ($IsBox |childref#1@@0| Tclass.ReferenceType.Reference) ($IsBox |ref#11@@0| Tclass.ReferenceType.Reference)) (and (U_2_bool (MapType0Select (|IMap#Domain| (BetreeSpec.Redirect.new__children (Lit |redirect#0@@12|))) |childref#1@@0|)) (U_2_bool (MapType0Select (|IMap#Values| (BetreeGraph.Node.children ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeSpec.Redirect.new__children (Lit |redirect#0@@12|)))) |childref#1@@0|)))) |ref#11@@0|)))) (BetreeSpec.__default.RedirectChildChildInOld (Lit |redirect#0@@12|) |childref#1@@0| |ref#11@@0|))) :qid |BetreeSpecidfy.348:16| :skolemid |4352| :pattern ( (BetreeSpec.__default.RedirectChildChildInOld |redirect#0@@12| |childref#1@@0| |ref#11@@0|)) )))))) :qid |BetreeSpecidfy.303:27| :weight 3 :skolemid |4384| :pattern ( (BetreeSpec.__default.ValidRedirect (Lit |redirect#0@@12|))) ))))
(assert (forall ((arg0@@707 T@U) (arg1@@329 T@U) (arg2@@197 T@U) ) (! (= (type (BetreeSpec.__default.RedirectChildReads arg0@@707 arg1@@329 arg2@@197)) (SeqType BoxType)) :qid |funType:BetreeSpec.__default.RedirectChildReads| :pattern ( (BetreeSpec.__default.RedirectChildReads arg0@@707 arg1@@329 arg2@@197)) )))
(assert (forall (($ly@@541 T@U) (|childrefs#0| T@U) (|children#0| T@U) ) (!  (=> (and (and (= (type $ly@@541) LayerTypeType) (= (type |childrefs#0|) (SeqType BoxType))) (= (type |children#0|) (IMapType BoxType BoxType))) (= (BetreeSpec.__default.RedirectChildReads ($LS $ly@@541) |childrefs#0| |children#0|) (BetreeSpec.__default.RedirectChildReads $ly@@541 |childrefs#0| |children#0|))) :qid |BetreeSpecidfy.354:12| :skolemid |4385| :pattern ( (BetreeSpec.__default.RedirectChildReads ($LS $ly@@541) |childrefs#0| |children#0|)) )))
(assert (forall (($ly@@542 T@U) (|childrefs#0@@0| T@U) (|children#0@@0| T@U) ) (!  (=> (and (and (= (type $ly@@542) LayerTypeType) (= (type |childrefs#0@@0|) (SeqType BoxType))) (= (type |children#0@@0|) (IMapType BoxType BoxType))) (= (BetreeSpec.__default.RedirectChildReads $ly@@542 |childrefs#0@@0| |children#0@@0|) (BetreeSpec.__default.RedirectChildReads $LZ |childrefs#0@@0| |children#0@@0|))) :qid |BetreeSpecidfy.354:12| :skolemid |4386| :pattern ( (BetreeSpec.__default.RedirectChildReads (AsFuelBottom $ly@@542) |childrefs#0@@0| |children#0@@0|)) )))
(assert  (=> true (forall (($ly@@543 T@U) (|childrefs#0@@1| T@U) (|children#0@@1| T@U) ) (!  (=> (and (and (and (= (type $ly@@543) LayerTypeType) (= (type |childrefs#0@@1|) (SeqType BoxType))) (= (type |children#0@@1|) (IMapType BoxType BoxType))) (or (|BetreeSpec.__default.RedirectChildReads#canCall| |childrefs#0@@1| |children#0@@1|) (and (and ($Is |childrefs#0@@1| (TSeq Tclass.ReferenceType.Reference)) ($Is |children#0@@1| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) (forall ((|ref#0@@18| T@U) ) (!  (=> (and (and (= (type |ref#0@@18|) BoxType) ($IsBox |ref#0@@18| Tclass.ReferenceType.Reference)) (|Seq#Contains| |childrefs#0@@1| |ref#0@@18|)) (U_2_bool (MapType0Select (|IMap#Domain| |children#0@@1|) |ref#0@@18|))) :qid |BetreeSpecidfy.355:21| :skolemid |4387| :pattern ( (MapType0Select (|IMap#Domain| |children#0@@1|) |ref#0@@18|)) :pattern ( (|Seq#Contains| |childrefs#0@@1| |ref#0@@18|)) ))))) (and (and (= (|Seq#Length| (BetreeSpec.__default.RedirectChildReads $ly@@543 |childrefs#0@@1| |children#0@@1|)) (|Seq#Length| |childrefs#0@@1|)) (forall ((|i#0@@127| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@127|) (< |i#0@@127| (|Seq#Length| |childrefs#0@@1|))) (|BetreeGraph.ReadOp#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.__default.RedirectChildReads $ly@@543 |childrefs#0@@1| |children#0@@1|) |i#0@@127|)) (|#BetreeGraph.ReadOp.ReadOp| (|Seq#Index| |childrefs#0@@1| |i#0@@127|) ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |children#0@@1|) (|Seq#Index| |childrefs#0@@1| |i#0@@127|))))))) :qid |BetreeSpecidfy.357:20| :skolemid |4388| :pattern ( (|Seq#Index| |childrefs#0@@1| |i#0@@127|)) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.__default.RedirectChildReads $ly@@543 |childrefs#0@@1| |children#0@@1|) |i#0@@127|))) ))) ($Is (BetreeSpec.__default.RedirectChildReads $ly@@543 |childrefs#0@@1| |children#0@@1|) (TSeq Tclass.BetreeGraph.ReadOp)))) :qid |BetreeSpecidfy.354:12| :skolemid |4389| :pattern ( (BetreeSpec.__default.RedirectChildReads $ly@@543 |childrefs#0@@1| |children#0@@1|)) ))))
(assert (forall (($ly@@544 T@U) (|childrefs#0@@2| T@U) (|children#0@@2| T@U) ) (!  (=> (and (and (and (= (type $ly@@544) LayerTypeType) (= (type |childrefs#0@@2|) (SeqType BoxType))) (= (type |children#0@@2|) (IMapType BoxType BoxType))) (and ($Is |childrefs#0@@2| (TSeq Tclass.ReferenceType.Reference)) ($Is |children#0@@2| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)))) (= (|BetreeSpec.__default.RedirectChildReads#requires| $ly@@544 |childrefs#0@@2| |children#0@@2|) (forall ((|ref#1@@8| T@U) ) (!  (=> (and (and (= (type |ref#1@@8|) BoxType) ($IsBox |ref#1@@8| Tclass.ReferenceType.Reference)) (|Seq#Contains| |childrefs#0@@2| |ref#1@@8|)) (U_2_bool (MapType0Select (|IMap#Domain| |children#0@@2|) |ref#1@@8|))) :qid |BetreeSpecidfy.355:21| :skolemid |4390| :pattern ( (MapType0Select (|IMap#Domain| |children#0@@2|) |ref#1@@8|)) :pattern ( (|Seq#Contains| |childrefs#0@@2| |ref#1@@8|)) )))) :qid |BetreeSpecidfy.354:12| :skolemid |4391| :pattern ( (|BetreeSpec.__default.RedirectChildReads#requires| $ly@@544 |childrefs#0@@2| |children#0@@2|)) )))
(assert  (=> true (forall (($ly@@545 T@U) (|childrefs#0@@3| T@U) (|children#0@@3| T@U) ) (!  (=> (and (and (and (= (type $ly@@545) LayerTypeType) (= (type |childrefs#0@@3|) (SeqType BoxType))) (= (type |children#0@@3|) (IMapType BoxType BoxType))) (or (|BetreeSpec.__default.RedirectChildReads#canCall| |childrefs#0@@3| |children#0@@3|) (and (and ($Is |childrefs#0@@3| (TSeq Tclass.ReferenceType.Reference)) ($Is |children#0@@3| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) (forall ((|ref#1@@9| T@U) ) (!  (=> (and (and (= (type |ref#1@@9|) BoxType) ($IsBox |ref#1@@9| Tclass.ReferenceType.Reference)) (|Seq#Contains| |childrefs#0@@3| |ref#1@@9|)) (U_2_bool (MapType0Select (|IMap#Domain| |children#0@@3|) |ref#1@@9|))) :qid |BetreeSpecidfy.355:21| :skolemid |4390| :pattern ( (MapType0Select (|IMap#Domain| |children#0@@3|) |ref#1@@9|)) :pattern ( (|Seq#Contains| |childrefs#0@@3| |ref#1@@9|)) ))))) (and (=> (not (|Seq#Equal| |childrefs#0@@3| (|Seq#Empty| BoxType))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.ReferenceType.Reference |childrefs#0@@3|) (|BetreeSpec.__default.RedirectChildReads#canCall| (Sequences.__default.DropLast Tclass.ReferenceType.Reference |childrefs#0@@3|) |children#0@@3|)) (and (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |childrefs#0@@3|) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |childrefs#0@@3|)))) (= (BetreeSpec.__default.RedirectChildReads ($LS $ly@@545) |childrefs#0@@3| |children#0@@3|) (ite (|Seq#Equal| |childrefs#0@@3| (|Seq#Empty| BoxType)) (|Seq#Empty| BoxType) (|Seq#Append| (BetreeSpec.__default.RedirectChildReads $ly@@545 (Sequences.__default.DropLast Tclass.ReferenceType.Reference |childrefs#0@@3|) |children#0@@3|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#BetreeGraph.ReadOp.ReadOp| (Sequences.__default.Last Tclass.ReferenceType.Reference |childrefs#0@@3|) ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |children#0@@3|) (Sequences.__default.Last Tclass.ReferenceType.Reference |childrefs#0@@3|))))))))))) :qid |BetreeSpecidfy.354:12| :skolemid |4392| :pattern ( (BetreeSpec.__default.RedirectChildReads ($LS $ly@@545) |childrefs#0@@3| |children#0@@3|)) ))))
(assert  (=> true (forall (($ly@@546 T@U) (|childrefs#0@@4| T@U) (|children#0@@4| T@U) ) (!  (=> (and (and (and (= (type $ly@@546) LayerTypeType) (= (type |childrefs#0@@4|) (SeqType BoxType))) (= (type |children#0@@4|) (IMapType BoxType BoxType))) (or (|BetreeSpec.__default.RedirectChildReads#canCall| (Lit |childrefs#0@@4|) |children#0@@4|) (and (and ($Is |childrefs#0@@4| (TSeq Tclass.ReferenceType.Reference)) ($Is |children#0@@4| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) (forall ((|ref#2@@3| T@U) ) (!  (=> (and (and (= (type |ref#2@@3|) BoxType) ($IsBox |ref#2@@3| Tclass.ReferenceType.Reference)) (|Seq#Contains| |childrefs#0@@4| |ref#2@@3|)) (U_2_bool (MapType0Select (|IMap#Domain| |children#0@@4|) |ref#2@@3|))) :qid |BetreeSpecidfy.355:21| :skolemid |4393| :pattern ( (MapType0Select (|IMap#Domain| |children#0@@4|) |ref#2@@3|)) :pattern ( (|Seq#Contains| |childrefs#0@@4| |ref#2@@3|)) ))))) (and (=> (not (|Seq#Equal| |childrefs#0@@4| (|Seq#Empty| BoxType))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.ReferenceType.Reference (Lit |childrefs#0@@4|)) (|BetreeSpec.__default.RedirectChildReads#canCall| (Lit (Sequences.__default.DropLast Tclass.ReferenceType.Reference (Lit |childrefs#0@@4|))) |children#0@@4|)) (and (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |childrefs#0@@4|)) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |childrefs#0@@4|))))) (= (BetreeSpec.__default.RedirectChildReads ($LS $ly@@546) (Lit |childrefs#0@@4|) |children#0@@4|) (ite (|Seq#Equal| |childrefs#0@@4| (|Seq#Empty| BoxType)) (|Seq#Empty| BoxType) (|Seq#Append| (BetreeSpec.__default.RedirectChildReads ($LS $ly@@546) (Lit (Sequences.__default.DropLast Tclass.ReferenceType.Reference (Lit |childrefs#0@@4|))) |children#0@@4|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#BetreeGraph.ReadOp.ReadOp| (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |childrefs#0@@4|))) ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |children#0@@4|) (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |childrefs#0@@4|))))))))))))) :qid |BetreeSpecidfy.354:12| :weight 3 :skolemid |4394| :pattern ( (BetreeSpec.__default.RedirectChildReads ($LS $ly@@546) (Lit |childrefs#0@@4|) |children#0@@4|)) ))))
(assert  (=> true (forall (($ly@@547 T@U) (|childrefs#0@@5| T@U) (|children#0@@5| T@U) ) (!  (=> (and (and (and (= (type $ly@@547) LayerTypeType) (= (type |childrefs#0@@5|) (SeqType BoxType))) (= (type |children#0@@5|) (IMapType BoxType BoxType))) (or (|BetreeSpec.__default.RedirectChildReads#canCall| (Lit |childrefs#0@@5|) (Lit |children#0@@5|)) (and (and ($Is |childrefs#0@@5| (TSeq Tclass.ReferenceType.Reference)) ($Is |children#0@@5| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) (forall ((|ref#3@@3| T@U) ) (!  (=> (and (and (= (type |ref#3@@3|) BoxType) ($IsBox |ref#3@@3| Tclass.ReferenceType.Reference)) (|Seq#Contains| |childrefs#0@@5| |ref#3@@3|)) (U_2_bool (MapType0Select (|IMap#Domain| |children#0@@5|) |ref#3@@3|))) :qid |BetreeSpecidfy.355:21| :skolemid |4395| :pattern ( (MapType0Select (|IMap#Domain| |children#0@@5|) |ref#3@@3|)) :pattern ( (|Seq#Contains| |childrefs#0@@5| |ref#3@@3|)) ))))) (and (=> (not (|Seq#Equal| |childrefs#0@@5| (|Seq#Empty| BoxType))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.ReferenceType.Reference (Lit |childrefs#0@@5|)) (|BetreeSpec.__default.RedirectChildReads#canCall| (Lit (Sequences.__default.DropLast Tclass.ReferenceType.Reference (Lit |childrefs#0@@5|))) (Lit |children#0@@5|))) (and (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |childrefs#0@@5|)) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |childrefs#0@@5|))))) (= (BetreeSpec.__default.RedirectChildReads ($LS $ly@@547) (Lit |childrefs#0@@5|) (Lit |children#0@@5|)) (ite (|Seq#Equal| |childrefs#0@@5| (|Seq#Empty| BoxType)) (|Seq#Empty| BoxType) (|Seq#Append| (BetreeSpec.__default.RedirectChildReads ($LS $ly@@547) (Lit (Sequences.__default.DropLast Tclass.ReferenceType.Reference (Lit |childrefs#0@@5|))) (Lit |children#0@@5|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#BetreeGraph.ReadOp.ReadOp| (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |childrefs#0@@5|))) ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |children#0@@5|)) (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |childrefs#0@@5|))))))))))))) :qid |BetreeSpecidfy.354:12| :weight 3 :skolemid |4396| :pattern ( (BetreeSpec.__default.RedirectChildReads ($LS $ly@@547) (Lit |childrefs#0@@5|) (Lit |children#0@@5|))) ))))
(assert (forall ((arg0@@708 T@U) (arg1@@330 T@U) ) (! (= (type (BetreeSpec.__default.RedirectReads arg0@@708 arg1@@330)) (SeqType BoxType)) :qid |funType:BetreeSpec.__default.RedirectReads| :pattern ( (BetreeSpec.__default.RedirectReads arg0@@708 arg1@@330)) )))
(assert (forall (($ly@@548 T@U) (|redirect#0@@13| T@U) ) (!  (=> (and (= (type $ly@@548) LayerTypeType) (= (type |redirect#0@@13|) DatatypeTypeType)) (= (BetreeSpec.__default.RedirectReads ($LS $ly@@548) |redirect#0@@13|) (BetreeSpec.__default.RedirectReads $ly@@548 |redirect#0@@13|))) :qid |BetreeSpecidfy.363:22| :skolemid |4397| :pattern ( (BetreeSpec.__default.RedirectReads ($LS $ly@@548) |redirect#0@@13|)) )))
(assert (forall (($ly@@549 T@U) (|redirect#0@@14| T@U) ) (!  (=> (and (= (type $ly@@549) LayerTypeType) (= (type |redirect#0@@14|) DatatypeTypeType)) (= (BetreeSpec.__default.RedirectReads $ly@@549 |redirect#0@@14|) (BetreeSpec.__default.RedirectReads $LZ |redirect#0@@14|))) :qid |BetreeSpecidfy.363:22| :skolemid |4398| :pattern ( (BetreeSpec.__default.RedirectReads (AsFuelBottom $ly@@549) |redirect#0@@14|)) )))
(assert  (=> true (forall (($ly@@550 T@U) (|redirect#0@@15| T@U) ) (!  (=> (and (and (= (type $ly@@550) LayerTypeType) (= (type |redirect#0@@15|) DatatypeTypeType)) (or (|BetreeSpec.__default.RedirectReads#canCall| |redirect#0@@15|) (and ($Is |redirect#0@@15| Tclass.BetreeSpec.Redirect) (BetreeSpec.__default.ValidRedirect |redirect#0@@15|)))) (and (= (|Seq#Length| (BetreeSpec.__default.RedirectReads $ly@@550 |redirect#0@@15|)) (+ (|Seq#Length| (BetreeSpec.Redirect.old__childrefs |redirect#0@@15|)) 1)) ($Is (BetreeSpec.__default.RedirectReads $ly@@550 |redirect#0@@15|) (TSeq Tclass.BetreeGraph.ReadOp)))) :qid |BetreeSpecidfy.363:22| :skolemid |4399| :pattern ( (BetreeSpec.__default.RedirectReads $ly@@550 |redirect#0@@15|)) ))))
(assert (forall (($ly@@551 T@U) (|redirect#0@@16| T@U) ) (!  (=> (and (and (= (type $ly@@551) LayerTypeType) (= (type |redirect#0@@16|) DatatypeTypeType)) ($Is |redirect#0@@16| Tclass.BetreeSpec.Redirect)) (= (|BetreeSpec.__default.RedirectReads#requires| $ly@@551 |redirect#0@@16|) (BetreeSpec.__default.ValidRedirect |redirect#0@@16|))) :qid |BetreeSpecidfy.363:22| :skolemid |4400| :pattern ( (|BetreeSpec.__default.RedirectReads#requires| $ly@@551 |redirect#0@@16|)) )))
(assert  (=> true (forall (($ly@@552 T@U) (|redirect#0@@17| T@U) ) (!  (=> (and (and (= (type $ly@@552) LayerTypeType) (= (type |redirect#0@@17|) DatatypeTypeType)) (or (|BetreeSpec.__default.RedirectReads#canCall| |redirect#0@@17|) (and ($Is |redirect#0@@17| Tclass.BetreeSpec.Redirect) (BetreeSpec.__default.ValidRedirect |redirect#0@@17|)))) (and (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@17|) (BetreeSpec.Redirect.Redirect_q |redirect#0@@17|)) (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@17|) (BetreeSpec.Redirect.Redirect_q |redirect#0@@17|)) (|BetreeSpec.__default.RedirectChildReads#canCall| (BetreeSpec.Redirect.old__childrefs |redirect#0@@17|) (BetreeSpec.Redirect.old__children |redirect#0@@17|)))) (= (BetreeSpec.__default.RedirectReads ($LS $ly@@552) |redirect#0@@17|) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#BetreeGraph.ReadOp.ReadOp| (BetreeSpec.Redirect.parentref |redirect#0@@17|) (BetreeSpec.Redirect.old__parent |redirect#0@@17|)))) (BetreeSpec.__default.RedirectChildReads ($LS $LZ) (BetreeSpec.Redirect.old__childrefs |redirect#0@@17|) (BetreeSpec.Redirect.old__children |redirect#0@@17|)))))) :qid |BetreeSpecidfy.363:22| :skolemid |4401| :pattern ( (BetreeSpec.__default.RedirectReads ($LS $ly@@552) |redirect#0@@17|)) ))))
(assert  (=> true (forall (($ly@@553 T@U) (|redirect#0@@18| T@U) ) (!  (=> (and (and (= (type $ly@@553) LayerTypeType) (= (type |redirect#0@@18|) DatatypeTypeType)) (or (|BetreeSpec.__default.RedirectReads#canCall| (Lit |redirect#0@@18|)) (and ($Is |redirect#0@@18| Tclass.BetreeSpec.Redirect) (U_2_bool (Lit (bool_2_U (BetreeSpec.__default.ValidRedirect (Lit |redirect#0@@18|)))))))) (and (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@18|)) (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@18|))) (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@18|)) (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@18|))) (|BetreeSpec.__default.RedirectChildReads#canCall| (Lit (BetreeSpec.Redirect.old__childrefs (Lit |redirect#0@@18|))) (Lit (BetreeSpec.Redirect.old__children (Lit |redirect#0@@18|)))))) (= (BetreeSpec.__default.RedirectReads ($LS $ly@@553) (Lit |redirect#0@@18|)) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#BetreeGraph.ReadOp.ReadOp| (Lit (BetreeSpec.Redirect.parentref (Lit |redirect#0@@18|))) (Lit (BetreeSpec.Redirect.old__parent (Lit |redirect#0@@18|))))))) (BetreeSpec.__default.RedirectChildReads ($LS $LZ) (Lit (BetreeSpec.Redirect.old__childrefs (Lit |redirect#0@@18|))) (Lit (BetreeSpec.Redirect.old__children (Lit |redirect#0@@18|)))))))) :qid |BetreeSpecidfy.363:22| :weight 3 :skolemid |4402| :pattern ( (BetreeSpec.__default.RedirectReads ($LS $ly@@553) (Lit |redirect#0@@18|))) ))))
(assert (forall ((arg0@@709 T@U) (arg1@@331 T@U) (arg2@@198 T@U) ) (! (= (type (BetreeSpec.__default.RedirectChildAllocs arg0@@709 arg1@@331 arg2@@198)) (SeqType BoxType)) :qid |funType:BetreeSpec.__default.RedirectChildAllocs| :pattern ( (BetreeSpec.__default.RedirectChildAllocs arg0@@709 arg1@@331 arg2@@198)) )))
(assert (forall (($ly@@554 T@U) (|childrefs#0@@6| T@U) (|children#0@@6| T@U) ) (!  (=> (and (and (= (type $ly@@554) LayerTypeType) (= (type |childrefs#0@@6|) (SeqType BoxType))) (= (type |children#0@@6|) (IMapType BoxType BoxType))) (= (BetreeSpec.__default.RedirectChildAllocs ($LS $ly@@554) |childrefs#0@@6| |children#0@@6|) (BetreeSpec.__default.RedirectChildAllocs $ly@@554 |childrefs#0@@6| |children#0@@6|))) :qid |BetreeSpecidfy.371:12| :skolemid |4403| :pattern ( (BetreeSpec.__default.RedirectChildAllocs ($LS $ly@@554) |childrefs#0@@6| |children#0@@6|)) )))
(assert (forall (($ly@@555 T@U) (|childrefs#0@@7| T@U) (|children#0@@7| T@U) ) (!  (=> (and (and (= (type $ly@@555) LayerTypeType) (= (type |childrefs#0@@7|) (SeqType BoxType))) (= (type |children#0@@7|) (IMapType BoxType BoxType))) (= (BetreeSpec.__default.RedirectChildAllocs $ly@@555 |childrefs#0@@7| |children#0@@7|) (BetreeSpec.__default.RedirectChildAllocs $LZ |childrefs#0@@7| |children#0@@7|))) :qid |BetreeSpecidfy.371:12| :skolemid |4404| :pattern ( (BetreeSpec.__default.RedirectChildAllocs (AsFuelBottom $ly@@555) |childrefs#0@@7| |children#0@@7|)) )))
(assert  (=> true (forall (($ly@@556 T@U) (|childrefs#0@@8| T@U) (|children#0@@8| T@U) ) (!  (=> (and (and (and (= (type $ly@@556) LayerTypeType) (= (type |childrefs#0@@8|) (SeqType BoxType))) (= (type |children#0@@8|) (IMapType BoxType BoxType))) (or (|BetreeSpec.__default.RedirectChildAllocs#canCall| |childrefs#0@@8| |children#0@@8|) (and (and ($Is |childrefs#0@@8| (TSeq Tclass.ReferenceType.Reference)) ($Is |children#0@@8| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) (forall ((|ref#0@@19| T@U) ) (!  (=> (and (and (= (type |ref#0@@19|) BoxType) ($IsBox |ref#0@@19| Tclass.ReferenceType.Reference)) (|Seq#Contains| |childrefs#0@@8| |ref#0@@19|)) (U_2_bool (MapType0Select (|IMap#Domain| |children#0@@8|) |ref#0@@19|))) :qid |BetreeSpecidfy.372:21| :skolemid |4405| :pattern ( (MapType0Select (|IMap#Domain| |children#0@@8|) |ref#0@@19|)) :pattern ( (|Seq#Contains| |childrefs#0@@8| |ref#0@@19|)) ))))) (and (and (= (|Seq#Length| (BetreeSpec.__default.RedirectChildAllocs $ly@@556 |childrefs#0@@8| |children#0@@8|)) (|Seq#Length| |childrefs#0@@8|)) (forall ((|i#0@@128| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@128|) (< |i#0@@128| (|Seq#Length| |childrefs#0@@8|))) (|BetreeGraph.Op#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.__default.RedirectChildAllocs $ly@@556 |childrefs#0@@8| |children#0@@8|) |i#0@@128|)) (|#BetreeGraph.Op.AllocOp| (|Seq#Index| |childrefs#0@@8| |i#0@@128|) ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |children#0@@8|) (|Seq#Index| |childrefs#0@@8| |i#0@@128|))))))) :qid |BetreeSpecidfy.374:20| :skolemid |4406| :pattern ( (|Seq#Index| |childrefs#0@@8| |i#0@@128|)) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BetreeSpec.__default.RedirectChildAllocs $ly@@556 |childrefs#0@@8| |children#0@@8|) |i#0@@128|))) ))) ($Is (BetreeSpec.__default.RedirectChildAllocs $ly@@556 |childrefs#0@@8| |children#0@@8|) (TSeq Tclass.BetreeGraph.Op)))) :qid |BetreeSpecidfy.371:12| :skolemid |4407| :pattern ( (BetreeSpec.__default.RedirectChildAllocs $ly@@556 |childrefs#0@@8| |children#0@@8|)) ))))
(assert (forall (($ly@@557 T@U) (|childrefs#0@@9| T@U) (|children#0@@9| T@U) ) (!  (=> (and (and (and (= (type $ly@@557) LayerTypeType) (= (type |childrefs#0@@9|) (SeqType BoxType))) (= (type |children#0@@9|) (IMapType BoxType BoxType))) (and ($Is |childrefs#0@@9| (TSeq Tclass.ReferenceType.Reference)) ($Is |children#0@@9| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)))) (= (|BetreeSpec.__default.RedirectChildAllocs#requires| $ly@@557 |childrefs#0@@9| |children#0@@9|) (forall ((|ref#1@@10| T@U) ) (!  (=> (and (and (= (type |ref#1@@10|) BoxType) ($IsBox |ref#1@@10| Tclass.ReferenceType.Reference)) (|Seq#Contains| |childrefs#0@@9| |ref#1@@10|)) (U_2_bool (MapType0Select (|IMap#Domain| |children#0@@9|) |ref#1@@10|))) :qid |BetreeSpecidfy.372:21| :skolemid |4408| :pattern ( (MapType0Select (|IMap#Domain| |children#0@@9|) |ref#1@@10|)) :pattern ( (|Seq#Contains| |childrefs#0@@9| |ref#1@@10|)) )))) :qid |BetreeSpecidfy.371:12| :skolemid |4409| :pattern ( (|BetreeSpec.__default.RedirectChildAllocs#requires| $ly@@557 |childrefs#0@@9| |children#0@@9|)) )))
(assert  (=> true (forall (($ly@@558 T@U) (|childrefs#0@@10| T@U) (|children#0@@10| T@U) ) (!  (=> (and (and (and (= (type $ly@@558) LayerTypeType) (= (type |childrefs#0@@10|) (SeqType BoxType))) (= (type |children#0@@10|) (IMapType BoxType BoxType))) (or (|BetreeSpec.__default.RedirectChildAllocs#canCall| |childrefs#0@@10| |children#0@@10|) (and (and ($Is |childrefs#0@@10| (TSeq Tclass.ReferenceType.Reference)) ($Is |children#0@@10| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) (forall ((|ref#1@@11| T@U) ) (!  (=> (and (and (= (type |ref#1@@11|) BoxType) ($IsBox |ref#1@@11| Tclass.ReferenceType.Reference)) (|Seq#Contains| |childrefs#0@@10| |ref#1@@11|)) (U_2_bool (MapType0Select (|IMap#Domain| |children#0@@10|) |ref#1@@11|))) :qid |BetreeSpecidfy.372:21| :skolemid |4408| :pattern ( (MapType0Select (|IMap#Domain| |children#0@@10|) |ref#1@@11|)) :pattern ( (|Seq#Contains| |childrefs#0@@10| |ref#1@@11|)) ))))) (and (=> (not (|Seq#Equal| |childrefs#0@@10| (|Seq#Empty| BoxType))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.ReferenceType.Reference |childrefs#0@@10|) (|BetreeSpec.__default.RedirectChildAllocs#canCall| (Sequences.__default.DropLast Tclass.ReferenceType.Reference |childrefs#0@@10|) |children#0@@10|)) (and (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |childrefs#0@@10|) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |childrefs#0@@10|)))) (= (BetreeSpec.__default.RedirectChildAllocs ($LS $ly@@558) |childrefs#0@@10| |children#0@@10|) (ite (|Seq#Equal| |childrefs#0@@10| (|Seq#Empty| BoxType)) (|Seq#Empty| BoxType) (|Seq#Append| (BetreeSpec.__default.RedirectChildAllocs $ly@@558 (Sequences.__default.DropLast Tclass.ReferenceType.Reference |childrefs#0@@10|) |children#0@@10|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#BetreeGraph.Op.AllocOp| (Sequences.__default.Last Tclass.ReferenceType.Reference |childrefs#0@@10|) ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |children#0@@10|) (Sequences.__default.Last Tclass.ReferenceType.Reference |childrefs#0@@10|))))))))))) :qid |BetreeSpecidfy.371:12| :skolemid |4410| :pattern ( (BetreeSpec.__default.RedirectChildAllocs ($LS $ly@@558) |childrefs#0@@10| |children#0@@10|)) ))))
(assert  (=> true (forall (($ly@@559 T@U) (|childrefs#0@@11| T@U) (|children#0@@11| T@U) ) (!  (=> (and (and (and (= (type $ly@@559) LayerTypeType) (= (type |childrefs#0@@11|) (SeqType BoxType))) (= (type |children#0@@11|) (IMapType BoxType BoxType))) (or (|BetreeSpec.__default.RedirectChildAllocs#canCall| (Lit |childrefs#0@@11|) |children#0@@11|) (and (and ($Is |childrefs#0@@11| (TSeq Tclass.ReferenceType.Reference)) ($Is |children#0@@11| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) (forall ((|ref#2@@4| T@U) ) (!  (=> (and (and (= (type |ref#2@@4|) BoxType) ($IsBox |ref#2@@4| Tclass.ReferenceType.Reference)) (|Seq#Contains| |childrefs#0@@11| |ref#2@@4|)) (U_2_bool (MapType0Select (|IMap#Domain| |children#0@@11|) |ref#2@@4|))) :qid |BetreeSpecidfy.372:21| :skolemid |4411| :pattern ( (MapType0Select (|IMap#Domain| |children#0@@11|) |ref#2@@4|)) :pattern ( (|Seq#Contains| |childrefs#0@@11| |ref#2@@4|)) ))))) (and (=> (not (|Seq#Equal| |childrefs#0@@11| (|Seq#Empty| BoxType))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.ReferenceType.Reference (Lit |childrefs#0@@11|)) (|BetreeSpec.__default.RedirectChildAllocs#canCall| (Lit (Sequences.__default.DropLast Tclass.ReferenceType.Reference (Lit |childrefs#0@@11|))) |children#0@@11|)) (and (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |childrefs#0@@11|)) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |childrefs#0@@11|))))) (= (BetreeSpec.__default.RedirectChildAllocs ($LS $ly@@559) (Lit |childrefs#0@@11|) |children#0@@11|) (ite (|Seq#Equal| |childrefs#0@@11| (|Seq#Empty| BoxType)) (|Seq#Empty| BoxType) (|Seq#Append| (BetreeSpec.__default.RedirectChildAllocs ($LS $ly@@559) (Lit (Sequences.__default.DropLast Tclass.ReferenceType.Reference (Lit |childrefs#0@@11|))) |children#0@@11|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#BetreeGraph.Op.AllocOp| (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |childrefs#0@@11|))) ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |children#0@@11|) (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |childrefs#0@@11|))))))))))))) :qid |BetreeSpecidfy.371:12| :weight 3 :skolemid |4412| :pattern ( (BetreeSpec.__default.RedirectChildAllocs ($LS $ly@@559) (Lit |childrefs#0@@11|) |children#0@@11|)) ))))
(assert  (=> true (forall (($ly@@560 T@U) (|childrefs#0@@12| T@U) (|children#0@@12| T@U) ) (!  (=> (and (and (and (= (type $ly@@560) LayerTypeType) (= (type |childrefs#0@@12|) (SeqType BoxType))) (= (type |children#0@@12|) (IMapType BoxType BoxType))) (or (|BetreeSpec.__default.RedirectChildAllocs#canCall| (Lit |childrefs#0@@12|) (Lit |children#0@@12|)) (and (and ($Is |childrefs#0@@12| (TSeq Tclass.ReferenceType.Reference)) ($Is |children#0@@12| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) (forall ((|ref#3@@4| T@U) ) (!  (=> (and (and (= (type |ref#3@@4|) BoxType) ($IsBox |ref#3@@4| Tclass.ReferenceType.Reference)) (|Seq#Contains| |childrefs#0@@12| |ref#3@@4|)) (U_2_bool (MapType0Select (|IMap#Domain| |children#0@@12|) |ref#3@@4|))) :qid |BetreeSpecidfy.372:21| :skolemid |4413| :pattern ( (MapType0Select (|IMap#Domain| |children#0@@12|) |ref#3@@4|)) :pattern ( (|Seq#Contains| |childrefs#0@@12| |ref#3@@4|)) ))))) (and (=> (not (|Seq#Equal| |childrefs#0@@12| (|Seq#Empty| BoxType))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.ReferenceType.Reference (Lit |childrefs#0@@12|)) (|BetreeSpec.__default.RedirectChildAllocs#canCall| (Lit (Sequences.__default.DropLast Tclass.ReferenceType.Reference (Lit |childrefs#0@@12|))) (Lit |children#0@@12|))) (and (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |childrefs#0@@12|)) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |childrefs#0@@12|))))) (= (BetreeSpec.__default.RedirectChildAllocs ($LS $ly@@560) (Lit |childrefs#0@@12|) (Lit |children#0@@12|)) (ite (|Seq#Equal| |childrefs#0@@12| (|Seq#Empty| BoxType)) (|Seq#Empty| BoxType) (|Seq#Append| (BetreeSpec.__default.RedirectChildAllocs ($LS $ly@@560) (Lit (Sequences.__default.DropLast Tclass.ReferenceType.Reference (Lit |childrefs#0@@12|))) (Lit |children#0@@12|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#BetreeGraph.Op.AllocOp| (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |childrefs#0@@12|))) ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |children#0@@12|)) (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |childrefs#0@@12|))))))))))))) :qid |BetreeSpecidfy.371:12| :weight 3 :skolemid |4414| :pattern ( (BetreeSpec.__default.RedirectChildAllocs ($LS $ly@@560) (Lit |childrefs#0@@12|) (Lit |children#0@@12|))) ))))
(assert (forall ((arg0@@710 T@U) (arg1@@332 T@U) ) (! (= (type (BetreeSpec.__default.RedirectOps arg0@@710 arg1@@332)) (SeqType BoxType)) :qid |funType:BetreeSpec.__default.RedirectOps| :pattern ( (BetreeSpec.__default.RedirectOps arg0@@710 arg1@@332)) )))
(assert (forall (($ly@@561 T@U) (|redirect#0@@19| T@U) ) (!  (=> (and (= (type $ly@@561) LayerTypeType) (= (type |redirect#0@@19|) DatatypeTypeType)) (= (BetreeSpec.__default.RedirectOps ($LS $ly@@561) |redirect#0@@19|) (BetreeSpec.__default.RedirectOps $ly@@561 |redirect#0@@19|))) :qid |BetreeSpecidfy.380:22| :skolemid |4415| :pattern ( (BetreeSpec.__default.RedirectOps ($LS $ly@@561) |redirect#0@@19|)) )))
(assert (forall (($ly@@562 T@U) (|redirect#0@@20| T@U) ) (!  (=> (and (= (type $ly@@562) LayerTypeType) (= (type |redirect#0@@20|) DatatypeTypeType)) (= (BetreeSpec.__default.RedirectOps $ly@@562 |redirect#0@@20|) (BetreeSpec.__default.RedirectOps $LZ |redirect#0@@20|))) :qid |BetreeSpecidfy.380:22| :skolemid |4416| :pattern ( (BetreeSpec.__default.RedirectOps (AsFuelBottom $ly@@562) |redirect#0@@20|)) )))
(assert  (=> true (forall (($ly@@563 T@U) (|redirect#0@@21| T@U) ) (!  (=> (and (and (= (type $ly@@563) LayerTypeType) (= (type |redirect#0@@21|) DatatypeTypeType)) (or (|BetreeSpec.__default.RedirectOps#canCall| |redirect#0@@21|) (and ($Is |redirect#0@@21| Tclass.BetreeSpec.Redirect) (BetreeSpec.__default.ValidRedirect |redirect#0@@21|)))) ($Is (BetreeSpec.__default.RedirectOps $ly@@563 |redirect#0@@21|) (TSeq Tclass.BetreeGraph.Op))) :qid |BetreeSpecidfy.380:22| :skolemid |4417| :pattern ( (BetreeSpec.__default.RedirectOps $ly@@563 |redirect#0@@21|)) ))))
(assert (forall (($ly@@564 T@U) (|redirect#0@@22| T@U) ) (!  (=> (and (and (= (type $ly@@564) LayerTypeType) (= (type |redirect#0@@22|) DatatypeTypeType)) ($Is |redirect#0@@22| Tclass.BetreeSpec.Redirect)) (= (|BetreeSpec.__default.RedirectOps#requires| $ly@@564 |redirect#0@@22|) (BetreeSpec.__default.ValidRedirect |redirect#0@@22|))) :qid |BetreeSpecidfy.380:22| :skolemid |4418| :pattern ( (|BetreeSpec.__default.RedirectOps#requires| $ly@@564 |redirect#0@@22|)) )))
(assert  (=> true (forall (($ly@@565 T@U) (|redirect#0@@23| T@U) ) (!  (=> (and (and (= (type $ly@@565) LayerTypeType) (= (type |redirect#0@@23|) DatatypeTypeType)) (or (|BetreeSpec.__default.RedirectOps#canCall| |redirect#0@@23|) (and ($Is |redirect#0@@23| Tclass.BetreeSpec.Redirect) (BetreeSpec.__default.ValidRedirect |redirect#0@@23|)))) (and (and (and (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@23|) (BetreeSpec.Redirect.Redirect_q |redirect#0@@23|)) (|BetreeSpec.__default.RedirectChildAllocs#canCall| (BetreeSpec.Redirect.new__childrefs |redirect#0@@23|) (BetreeSpec.Redirect.new__children |redirect#0@@23|))) (and (BetreeSpec.Redirect.Redirect_q |redirect#0@@23|) (BetreeSpec.Redirect.Redirect_q |redirect#0@@23|))) (= (BetreeSpec.__default.RedirectOps ($LS $ly@@565) |redirect#0@@23|) (|Seq#Append| (BetreeSpec.__default.RedirectChildAllocs ($LS $LZ) (BetreeSpec.Redirect.new__childrefs |redirect#0@@23|) (BetreeSpec.Redirect.new__children |redirect#0@@23|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#BetreeGraph.Op.WriteOp| (BetreeSpec.Redirect.parentref |redirect#0@@23|) (BetreeSpec.Redirect.new__parent |redirect#0@@23|)))))))) :qid |BetreeSpecidfy.380:22| :skolemid |4419| :pattern ( (BetreeSpec.__default.RedirectOps ($LS $ly@@565) |redirect#0@@23|)) ))))
(assert  (=> true (forall (($ly@@566 T@U) (|redirect#0@@24| T@U) ) (!  (=> (and (and (= (type $ly@@566) LayerTypeType) (= (type |redirect#0@@24|) DatatypeTypeType)) (or (|BetreeSpec.__default.RedirectOps#canCall| (Lit |redirect#0@@24|)) (and ($Is |redirect#0@@24| Tclass.BetreeSpec.Redirect) (U_2_bool (Lit (bool_2_U (BetreeSpec.__default.ValidRedirect (Lit |redirect#0@@24|)))))))) (and (and (and (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@24|)) (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@24|))) (|BetreeSpec.__default.RedirectChildAllocs#canCall| (Lit (BetreeSpec.Redirect.new__childrefs (Lit |redirect#0@@24|))) (Lit (BetreeSpec.Redirect.new__children (Lit |redirect#0@@24|))))) (and (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@24|)) (BetreeSpec.Redirect.Redirect_q (Lit |redirect#0@@24|)))) (= (BetreeSpec.__default.RedirectOps ($LS $ly@@566) (Lit |redirect#0@@24|)) (|Seq#Append| (BetreeSpec.__default.RedirectChildAllocs ($LS $LZ) (Lit (BetreeSpec.Redirect.new__childrefs (Lit |redirect#0@@24|))) (Lit (BetreeSpec.Redirect.new__children (Lit |redirect#0@@24|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#BetreeGraph.Op.WriteOp| (Lit (BetreeSpec.Redirect.parentref (Lit |redirect#0@@24|))) (Lit (BetreeSpec.Redirect.new__parent (Lit |redirect#0@@24|))))))))))) :qid |BetreeSpecidfy.380:22| :weight 3 :skolemid |4420| :pattern ( (BetreeSpec.__default.RedirectOps ($LS $ly@@566) (Lit |redirect#0@@24|))) ))))
(assert  (=> true (forall ((|step#0@@11| T@U) ) (!  (=> (and (= (type |step#0@@11|) DatatypeTypeType) (or (|BetreeSpec.__default.ValidBetreeStep#canCall| |step#0@@11|) ($Is |step#0@@11| Tclass.BetreeSpec.BetreeStep))) true) :qid |BetreeSpecidfy.398:29| :skolemid |4421| :pattern ( (BetreeSpec.__default.ValidBetreeStep |step#0@@11|)) ))))
(assert (forall ((|step#0@@12| T@U) ) (!  (=> (and (= (type |step#0@@12|) DatatypeTypeType) ($Is |step#0@@12| Tclass.BetreeSpec.BetreeStep)) (= (|BetreeSpec.__default.ValidBetreeStep#requires| |step#0@@12|) true)) :qid |BetreeSpecidfy.398:29| :skolemid |4422| :pattern ( (|BetreeSpec.__default.ValidBetreeStep#requires| |step#0@@12|)) )))
(assert  (=> true (forall ((|step#0@@13| T@U) ) (!  (=> (and (= (type |step#0@@13|) DatatypeTypeType) (or (|BetreeSpec.__default.ValidBetreeStep#canCall| |step#0@@13|) ($Is |step#0@@13| Tclass.BetreeSpec.BetreeStep))) (and (and (=> (BetreeSpec.BetreeStep.BetreeQuery_q |step#0@@13|) (let ((|q#1| (BetreeSpec.BetreeStep.q |step#0@@13|))) (|BetreeSpec.__default.ValidQuery#canCall| |q#1|))) (=> (not (BetreeSpec.BetreeStep.BetreeQuery_q |step#0@@13|)) (and (=> (BetreeSpec.BetreeStep.BetreeSuccQuery_q |step#0@@13|) (let ((|sq#1| (BetreeSpec.BetreeStep.sq |step#0@@13|))) (|BetreeSpec.__default.ValidSuccQuery#canCall| |sq#1|))) (=> (not (BetreeSpec.BetreeStep.BetreeSuccQuery_q |step#0@@13|)) (and (=> (BetreeSpec.BetreeStep.BetreeInsert_q |step#0@@13|) (let ((|ins#1| (BetreeSpec.BetreeStep.ins |step#0@@13|))) (|BetreeSpec.__default.ValidInsertion#canCall| |ins#1|))) (=> (not (BetreeSpec.BetreeStep.BetreeInsert_q |step#0@@13|)) (and (=> (BetreeSpec.BetreeStep.BetreeFlush_q |step#0@@13|) (let ((|flush#1| (BetreeSpec.BetreeStep.flush |step#0@@13|))) (|BetreeSpec.__default.ValidFlush#canCall| |flush#1|))) (=> (not (BetreeSpec.BetreeStep.BetreeFlush_q |step#0@@13|)) (and (=> (BetreeSpec.BetreeStep.BetreeGrow_q |step#0@@13|) (let ((|growth#1| (BetreeSpec.BetreeStep.growth |step#0@@13|))) (|BetreeSpec.__default.ValidGrow#canCall| |growth#1|))) (=> (not (BetreeSpec.BetreeStep.BetreeGrow_q |step#0@@13|)) (let ((|redirect#1| (BetreeSpec.BetreeStep.redirect |step#0@@13|))) (|BetreeSpec.__default.ValidRedirect#canCall| |redirect#1|)))))))))))) (= (BetreeSpec.__default.ValidBetreeStep |step#0@@13|) (ite (BetreeSpec.BetreeStep.BetreeQuery_q |step#0@@13|) (let ((|q#0@@23| (BetreeSpec.BetreeStep.q |step#0@@13|))) (BetreeSpec.__default.ValidQuery |q#0@@23|)) (ite (BetreeSpec.BetreeStep.BetreeSuccQuery_q |step#0@@13|) (let ((|sq#0| (BetreeSpec.BetreeStep.sq |step#0@@13|))) (BetreeSpec.__default.ValidSuccQuery |sq#0|)) (ite (BetreeSpec.BetreeStep.BetreeInsert_q |step#0@@13|) (let ((|ins#0@@11| (BetreeSpec.BetreeStep.ins |step#0@@13|))) (BetreeSpec.__default.ValidInsertion |ins#0@@11|)) (ite (BetreeSpec.BetreeStep.BetreeFlush_q |step#0@@13|) (let ((|flush#0@@11| (BetreeSpec.BetreeStep.flush |step#0@@13|))) (BetreeSpec.__default.ValidFlush |flush#0@@11|)) (ite (BetreeSpec.BetreeStep.BetreeGrow_q |step#0@@13|) (let ((|growth#0@@11| (BetreeSpec.BetreeStep.growth |step#0@@13|))) (BetreeSpec.__default.ValidGrow |growth#0@@11|)) (let ((|redirect#0@@25| (BetreeSpec.BetreeStep.redirect |step#0@@13|))) (BetreeSpec.__default.ValidRedirect |redirect#0@@25|)))))))))) :qid |BetreeSpecidfy.398:29| :skolemid |4423| :pattern ( (BetreeSpec.__default.ValidBetreeStep |step#0@@13|)) ))))
(assert  (=> true (forall ((|step#0@@14| T@U) ) (!  (=> (and (= (type |step#0@@14|) DatatypeTypeType) (or (|BetreeSpec.__default.ValidBetreeStep#canCall| (Lit |step#0@@14|)) ($Is |step#0@@14| Tclass.BetreeSpec.BetreeStep))) (and (and (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeQuery_q (Lit |step#0@@14|))))) (let ((|q#3| (Lit (BetreeSpec.BetreeStep.q (Lit |step#0@@14|))))) (|BetreeSpec.__default.ValidQuery#canCall| |q#3|))) (=> (not (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeQuery_q (Lit |step#0@@14|)))))) (and (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeSuccQuery_q (Lit |step#0@@14|))))) (let ((|sq#3| (Lit (BetreeSpec.BetreeStep.sq (Lit |step#0@@14|))))) (|BetreeSpec.__default.ValidSuccQuery#canCall| |sq#3|))) (=> (not (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeSuccQuery_q (Lit |step#0@@14|)))))) (and (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeInsert_q (Lit |step#0@@14|))))) (let ((|ins#3| (Lit (BetreeSpec.BetreeStep.ins (Lit |step#0@@14|))))) (|BetreeSpec.__default.ValidInsertion#canCall| |ins#3|))) (=> (not (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeInsert_q (Lit |step#0@@14|)))))) (and (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeFlush_q (Lit |step#0@@14|))))) (let ((|flush#3| (Lit (BetreeSpec.BetreeStep.flush (Lit |step#0@@14|))))) (|BetreeSpec.__default.ValidFlush#canCall| |flush#3|))) (=> (not (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeFlush_q (Lit |step#0@@14|)))))) (and (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeGrow_q (Lit |step#0@@14|))))) (let ((|growth#3| (Lit (BetreeSpec.BetreeStep.growth (Lit |step#0@@14|))))) (|BetreeSpec.__default.ValidGrow#canCall| |growth#3|))) (=> (not (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeGrow_q (Lit |step#0@@14|)))))) (let ((|redirect#3| (Lit (BetreeSpec.BetreeStep.redirect (Lit |step#0@@14|))))) (|BetreeSpec.__default.ValidRedirect#canCall| |redirect#3|)))))))))))) (= (BetreeSpec.__default.ValidBetreeStep (Lit |step#0@@14|)) (ite (BetreeSpec.BetreeStep.BetreeQuery_q (Lit |step#0@@14|)) (U_2_bool (let ((|q#2| (Lit (BetreeSpec.BetreeStep.q (Lit |step#0@@14|))))) (Lit (bool_2_U (BetreeSpec.__default.ValidQuery |q#2|))))) (ite (BetreeSpec.BetreeStep.BetreeSuccQuery_q (Lit |step#0@@14|)) (U_2_bool (let ((|sq#2| (Lit (BetreeSpec.BetreeStep.sq (Lit |step#0@@14|))))) (Lit (bool_2_U (BetreeSpec.__default.ValidSuccQuery |sq#2|))))) (ite (BetreeSpec.BetreeStep.BetreeInsert_q (Lit |step#0@@14|)) (U_2_bool (let ((|ins#2| (Lit (BetreeSpec.BetreeStep.ins (Lit |step#0@@14|))))) (Lit (bool_2_U (BetreeSpec.__default.ValidInsertion |ins#2|))))) (ite (BetreeSpec.BetreeStep.BetreeFlush_q (Lit |step#0@@14|)) (U_2_bool (let ((|flush#2| (Lit (BetreeSpec.BetreeStep.flush (Lit |step#0@@14|))))) (Lit (bool_2_U (BetreeSpec.__default.ValidFlush |flush#2|))))) (ite (BetreeSpec.BetreeStep.BetreeGrow_q (Lit |step#0@@14|)) (U_2_bool (let ((|growth#2| (Lit (BetreeSpec.BetreeStep.growth (Lit |step#0@@14|))))) (Lit (bool_2_U (BetreeSpec.__default.ValidGrow |growth#2|))))) (U_2_bool (let ((|redirect#2| (Lit (BetreeSpec.BetreeStep.redirect (Lit |step#0@@14|))))) (Lit (bool_2_U (BetreeSpec.__default.ValidRedirect |redirect#2|))))))))))))) :qid |BetreeSpecidfy.398:29| :weight 3 :skolemid |4424| :pattern ( (BetreeSpec.__default.ValidBetreeStep (Lit |step#0@@14|))) ))))
(assert (forall ((arg0@@711 T@U) ) (! (= (type (BetreeSpec.__default.BetreeStepReads arg0@@711)) (SeqType BoxType)) :qid |funType:BetreeSpec.__default.BetreeStepReads| :pattern ( (BetreeSpec.__default.BetreeStepReads arg0@@711)) )))
(assert  (=> true (forall ((|step#0@@15| T@U) ) (!  (=> (and (= (type |step#0@@15|) DatatypeTypeType) (or (|BetreeSpec.__default.BetreeStepReads#canCall| |step#0@@15|) (and ($Is |step#0@@15| Tclass.BetreeSpec.BetreeStep) (BetreeSpec.__default.ValidBetreeStep |step#0@@15|)))) ($Is (BetreeSpec.__default.BetreeStepReads |step#0@@15|) (TSeq Tclass.BetreeGraph.ReadOp))) :qid |BetreeSpecidfy.410:28| :skolemid |4425| :pattern ( (BetreeSpec.__default.BetreeStepReads |step#0@@15|)) ))))
(assert (forall ((|step#0@@16| T@U) ) (!  (=> (and (= (type |step#0@@16|) DatatypeTypeType) ($Is |step#0@@16| Tclass.BetreeSpec.BetreeStep)) (= (|BetreeSpec.__default.BetreeStepReads#requires| |step#0@@16|) (BetreeSpec.__default.ValidBetreeStep |step#0@@16|))) :qid |BetreeSpecidfy.410:28| :skolemid |4426| :pattern ( (|BetreeSpec.__default.BetreeStepReads#requires| |step#0@@16|)) )))
(assert (= (type StartFuel_BetreeSpec._default.RedirectReads) LayerTypeType))
(assert  (=> true (forall ((|step#0@@17| T@U) ) (!  (=> (and (= (type |step#0@@17|) DatatypeTypeType) (or (|BetreeSpec.__default.BetreeStepReads#canCall| |step#0@@17|) (and ($Is |step#0@@17| Tclass.BetreeSpec.BetreeStep) (BetreeSpec.__default.ValidBetreeStep |step#0@@17|)))) (and (and (=> (BetreeSpec.BetreeStep.BetreeQuery_q |step#0@@17|) (let ((|q#1@@0| (BetreeSpec.BetreeStep.q |step#0@@17|))) (|BetreeSpec.__default.QueryReads#canCall| |q#1@@0|))) (=> (not (BetreeSpec.BetreeStep.BetreeQuery_q |step#0@@17|)) (and (=> (BetreeSpec.BetreeStep.BetreeSuccQuery_q |step#0@@17|) (let ((|sq#1@@0| (BetreeSpec.BetreeStep.sq |step#0@@17|))) (|BetreeSpec.__default.SuccQueryReads#canCall| |sq#1@@0|))) (=> (not (BetreeSpec.BetreeStep.BetreeSuccQuery_q |step#0@@17|)) (and (=> (BetreeSpec.BetreeStep.BetreeInsert_q |step#0@@17|) (let ((|ins#1@@0| (BetreeSpec.BetreeStep.ins |step#0@@17|))) (|BetreeSpec.__default.InsertionReads#canCall| |ins#1@@0|))) (=> (not (BetreeSpec.BetreeStep.BetreeInsert_q |step#0@@17|)) (and (=> (BetreeSpec.BetreeStep.BetreeFlush_q |step#0@@17|) (let ((|flush#1@@0| (BetreeSpec.BetreeStep.flush |step#0@@17|))) (|BetreeSpec.__default.FlushReads#canCall| |flush#1@@0|))) (=> (not (BetreeSpec.BetreeStep.BetreeFlush_q |step#0@@17|)) (and (=> (BetreeSpec.BetreeStep.BetreeGrow_q |step#0@@17|) (let ((|growth#1@@0| (BetreeSpec.BetreeStep.growth |step#0@@17|))) (|BetreeSpec.__default.GrowReads#canCall| |growth#1@@0|))) (=> (not (BetreeSpec.BetreeStep.BetreeGrow_q |step#0@@17|)) (let ((|redirect#1@@0| (BetreeSpec.BetreeStep.redirect |step#0@@17|))) (|BetreeSpec.__default.RedirectReads#canCall| |redirect#1@@0|)))))))))))) (= (BetreeSpec.__default.BetreeStepReads |step#0@@17|) (ite (BetreeSpec.BetreeStep.BetreeQuery_q |step#0@@17|) (let ((|q#0@@24| (BetreeSpec.BetreeStep.q |step#0@@17|))) (BetreeSpec.__default.QueryReads |q#0@@24|)) (ite (BetreeSpec.BetreeStep.BetreeSuccQuery_q |step#0@@17|) (let ((|sq#0@@0| (BetreeSpec.BetreeStep.sq |step#0@@17|))) (BetreeSpec.__default.SuccQueryReads |sq#0@@0|)) (ite (BetreeSpec.BetreeStep.BetreeInsert_q |step#0@@17|) (let ((|ins#0@@12| (BetreeSpec.BetreeStep.ins |step#0@@17|))) (BetreeSpec.__default.InsertionReads |ins#0@@12|)) (ite (BetreeSpec.BetreeStep.BetreeFlush_q |step#0@@17|) (let ((|flush#0@@12| (BetreeSpec.BetreeStep.flush |step#0@@17|))) (BetreeSpec.__default.FlushReads |flush#0@@12|)) (ite (BetreeSpec.BetreeStep.BetreeGrow_q |step#0@@17|) (let ((|growth#0@@12| (BetreeSpec.BetreeStep.growth |step#0@@17|))) (BetreeSpec.__default.GrowReads |growth#0@@12|)) (let ((|redirect#0@@26| (BetreeSpec.BetreeStep.redirect |step#0@@17|))) (BetreeSpec.__default.RedirectReads StartFuel_BetreeSpec._default.RedirectReads |redirect#0@@26|)))))))))) :qid |BetreeSpecidfy.410:28| :skolemid |4427| :pattern ( (BetreeSpec.__default.BetreeStepReads |step#0@@17|)) ))))
(assert  (=> true (forall ((|step#0@@18| T@U) ) (!  (=> (and (= (type |step#0@@18|) DatatypeTypeType) (or (|BetreeSpec.__default.BetreeStepReads#canCall| (Lit |step#0@@18|)) (and ($Is |step#0@@18| Tclass.BetreeSpec.BetreeStep) (U_2_bool (Lit (bool_2_U (BetreeSpec.__default.ValidBetreeStep (Lit |step#0@@18|)))))))) (and (and (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeQuery_q (Lit |step#0@@18|))))) (let ((|q#3@@0| (Lit (BetreeSpec.BetreeStep.q (Lit |step#0@@18|))))) (|BetreeSpec.__default.QueryReads#canCall| |q#3@@0|))) (=> (not (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeQuery_q (Lit |step#0@@18|)))))) (and (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeSuccQuery_q (Lit |step#0@@18|))))) (let ((|sq#3@@0| (Lit (BetreeSpec.BetreeStep.sq (Lit |step#0@@18|))))) (|BetreeSpec.__default.SuccQueryReads#canCall| |sq#3@@0|))) (=> (not (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeSuccQuery_q (Lit |step#0@@18|)))))) (and (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeInsert_q (Lit |step#0@@18|))))) (let ((|ins#3@@0| (Lit (BetreeSpec.BetreeStep.ins (Lit |step#0@@18|))))) (|BetreeSpec.__default.InsertionReads#canCall| |ins#3@@0|))) (=> (not (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeInsert_q (Lit |step#0@@18|)))))) (and (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeFlush_q (Lit |step#0@@18|))))) (let ((|flush#3@@0| (Lit (BetreeSpec.BetreeStep.flush (Lit |step#0@@18|))))) (|BetreeSpec.__default.FlushReads#canCall| |flush#3@@0|))) (=> (not (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeFlush_q (Lit |step#0@@18|)))))) (and (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeGrow_q (Lit |step#0@@18|))))) (let ((|growth#3@@0| (Lit (BetreeSpec.BetreeStep.growth (Lit |step#0@@18|))))) (|BetreeSpec.__default.GrowReads#canCall| |growth#3@@0|))) (=> (not (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeGrow_q (Lit |step#0@@18|)))))) (let ((|redirect#3@@0| (Lit (BetreeSpec.BetreeStep.redirect (Lit |step#0@@18|))))) (|BetreeSpec.__default.RedirectReads#canCall| |redirect#3@@0|)))))))))))) (= (BetreeSpec.__default.BetreeStepReads (Lit |step#0@@18|)) (ite (BetreeSpec.BetreeStep.BetreeQuery_q (Lit |step#0@@18|)) (let ((|q#2@@0| (Lit (BetreeSpec.BetreeStep.q (Lit |step#0@@18|))))) (Lit (BetreeSpec.__default.QueryReads |q#2@@0|))) (ite (BetreeSpec.BetreeStep.BetreeSuccQuery_q (Lit |step#0@@18|)) (let ((|sq#2@@0| (Lit (BetreeSpec.BetreeStep.sq (Lit |step#0@@18|))))) (Lit (BetreeSpec.__default.SuccQueryReads |sq#2@@0|))) (ite (BetreeSpec.BetreeStep.BetreeInsert_q (Lit |step#0@@18|)) (let ((|ins#2@@0| (Lit (BetreeSpec.BetreeStep.ins (Lit |step#0@@18|))))) (Lit (BetreeSpec.__default.InsertionReads |ins#2@@0|))) (ite (BetreeSpec.BetreeStep.BetreeFlush_q (Lit |step#0@@18|)) (let ((|flush#2@@0| (Lit (BetreeSpec.BetreeStep.flush (Lit |step#0@@18|))))) (Lit (BetreeSpec.__default.FlushReads |flush#2@@0|))) (ite (BetreeSpec.BetreeStep.BetreeGrow_q (Lit |step#0@@18|)) (let ((|growth#2@@0| (Lit (BetreeSpec.BetreeStep.growth (Lit |step#0@@18|))))) (Lit (BetreeSpec.__default.GrowReads |growth#2@@0|))) (let ((|redirect#2@@0| (Lit (BetreeSpec.BetreeStep.redirect (Lit |step#0@@18|))))) (BetreeSpec.__default.RedirectReads StartFuel_BetreeSpec._default.RedirectReads |redirect#2@@0|)))))))))) :qid |BetreeSpecidfy.410:28| :weight 3 :skolemid |4428| :pattern ( (BetreeSpec.__default.BetreeStepReads (Lit |step#0@@18|))) ))))
(assert (forall ((arg0@@712 T@U) ) (! (= (type (BetreeSpec.__default.BetreeStepOps arg0@@712)) (SeqType BoxType)) :qid |funType:BetreeSpec.__default.BetreeStepOps| :pattern ( (BetreeSpec.__default.BetreeStepOps arg0@@712)) )))
(assert  (=> true (forall ((|step#0@@19| T@U) ) (!  (=> (and (= (type |step#0@@19|) DatatypeTypeType) (or (|BetreeSpec.__default.BetreeStepOps#canCall| |step#0@@19|) (and ($Is |step#0@@19| Tclass.BetreeSpec.BetreeStep) (BetreeSpec.__default.ValidBetreeStep |step#0@@19|)))) ($Is (BetreeSpec.__default.BetreeStepOps |step#0@@19|) (TSeq Tclass.BetreeGraph.Op))) :qid |BetreeSpecidfy.423:26| :skolemid |4429| :pattern ( (BetreeSpec.__default.BetreeStepOps |step#0@@19|)) ))))
(assert (forall ((|step#0@@20| T@U) ) (!  (=> (and (= (type |step#0@@20|) DatatypeTypeType) ($Is |step#0@@20| Tclass.BetreeSpec.BetreeStep)) (= (|BetreeSpec.__default.BetreeStepOps#requires| |step#0@@20|) (BetreeSpec.__default.ValidBetreeStep |step#0@@20|))) :qid |BetreeSpecidfy.423:26| :skolemid |4430| :pattern ( (|BetreeSpec.__default.BetreeStepOps#requires| |step#0@@20|)) )))
(assert (= (type StartFuel_BetreeSpec._default.RedirectOps) LayerTypeType))
(assert  (=> true (forall ((|step#0@@21| T@U) ) (!  (=> (and (= (type |step#0@@21|) DatatypeTypeType) (or (|BetreeSpec.__default.BetreeStepOps#canCall| |step#0@@21|) (and ($Is |step#0@@21| Tclass.BetreeSpec.BetreeStep) (BetreeSpec.__default.ValidBetreeStep |step#0@@21|)))) (and (and (=> (BetreeSpec.BetreeStep.BetreeQuery_q |step#0@@21|) (let ((|q#1@@1| (BetreeSpec.BetreeStep.q |step#0@@21|))) (|BetreeSpec.__default.QueryOps#canCall| |q#1@@1|))) (=> (not (BetreeSpec.BetreeStep.BetreeQuery_q |step#0@@21|)) (and (=> (BetreeSpec.BetreeStep.BetreeSuccQuery_q |step#0@@21|) (let ((|sq#1@@1| (BetreeSpec.BetreeStep.sq |step#0@@21|))) (|BetreeSpec.__default.SuccQueryOps#canCall| |sq#1@@1|))) (=> (not (BetreeSpec.BetreeStep.BetreeSuccQuery_q |step#0@@21|)) (and (=> (BetreeSpec.BetreeStep.BetreeInsert_q |step#0@@21|) (let ((|ins#1@@1| (BetreeSpec.BetreeStep.ins |step#0@@21|))) (|BetreeSpec.__default.InsertionOps#canCall| |ins#1@@1|))) (=> (not (BetreeSpec.BetreeStep.BetreeInsert_q |step#0@@21|)) (and (=> (BetreeSpec.BetreeStep.BetreeFlush_q |step#0@@21|) (let ((|flush#1@@1| (BetreeSpec.BetreeStep.flush |step#0@@21|))) (|BetreeSpec.__default.FlushOps#canCall| |flush#1@@1|))) (=> (not (BetreeSpec.BetreeStep.BetreeFlush_q |step#0@@21|)) (and (=> (BetreeSpec.BetreeStep.BetreeGrow_q |step#0@@21|) (let ((|growth#1@@1| (BetreeSpec.BetreeStep.growth |step#0@@21|))) (|BetreeSpec.__default.GrowOps#canCall| |growth#1@@1|))) (=> (not (BetreeSpec.BetreeStep.BetreeGrow_q |step#0@@21|)) (let ((|redirect#1@@1| (BetreeSpec.BetreeStep.redirect |step#0@@21|))) (|BetreeSpec.__default.RedirectOps#canCall| |redirect#1@@1|)))))))))))) (= (BetreeSpec.__default.BetreeStepOps |step#0@@21|) (ite (BetreeSpec.BetreeStep.BetreeQuery_q |step#0@@21|) (let ((|q#0@@25| (BetreeSpec.BetreeStep.q |step#0@@21|))) (BetreeSpec.__default.QueryOps |q#0@@25|)) (ite (BetreeSpec.BetreeStep.BetreeSuccQuery_q |step#0@@21|) (let ((|sq#0@@1| (BetreeSpec.BetreeStep.sq |step#0@@21|))) (BetreeSpec.__default.SuccQueryOps |sq#0@@1|)) (ite (BetreeSpec.BetreeStep.BetreeInsert_q |step#0@@21|) (let ((|ins#0@@13| (BetreeSpec.BetreeStep.ins |step#0@@21|))) (BetreeSpec.__default.InsertionOps |ins#0@@13|)) (ite (BetreeSpec.BetreeStep.BetreeFlush_q |step#0@@21|) (let ((|flush#0@@13| (BetreeSpec.BetreeStep.flush |step#0@@21|))) (BetreeSpec.__default.FlushOps |flush#0@@13|)) (ite (BetreeSpec.BetreeStep.BetreeGrow_q |step#0@@21|) (let ((|growth#0@@13| (BetreeSpec.BetreeStep.growth |step#0@@21|))) (BetreeSpec.__default.GrowOps |growth#0@@13|)) (let ((|redirect#0@@27| (BetreeSpec.BetreeStep.redirect |step#0@@21|))) (BetreeSpec.__default.RedirectOps StartFuel_BetreeSpec._default.RedirectOps |redirect#0@@27|)))))))))) :qid |BetreeSpecidfy.423:26| :skolemid |4431| :pattern ( (BetreeSpec.__default.BetreeStepOps |step#0@@21|)) ))))
(assert  (=> true (forall ((|step#0@@22| T@U) ) (!  (=> (and (= (type |step#0@@22|) DatatypeTypeType) (or (|BetreeSpec.__default.BetreeStepOps#canCall| (Lit |step#0@@22|)) (and ($Is |step#0@@22| Tclass.BetreeSpec.BetreeStep) (U_2_bool (Lit (bool_2_U (BetreeSpec.__default.ValidBetreeStep (Lit |step#0@@22|)))))))) (and (and (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeQuery_q (Lit |step#0@@22|))))) (let ((|q#3@@1| (Lit (BetreeSpec.BetreeStep.q (Lit |step#0@@22|))))) (|BetreeSpec.__default.QueryOps#canCall| |q#3@@1|))) (=> (not (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeQuery_q (Lit |step#0@@22|)))))) (and (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeSuccQuery_q (Lit |step#0@@22|))))) (let ((|sq#3@@1| (Lit (BetreeSpec.BetreeStep.sq (Lit |step#0@@22|))))) (|BetreeSpec.__default.SuccQueryOps#canCall| |sq#3@@1|))) (=> (not (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeSuccQuery_q (Lit |step#0@@22|)))))) (and (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeInsert_q (Lit |step#0@@22|))))) (let ((|ins#3@@1| (Lit (BetreeSpec.BetreeStep.ins (Lit |step#0@@22|))))) (|BetreeSpec.__default.InsertionOps#canCall| |ins#3@@1|))) (=> (not (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeInsert_q (Lit |step#0@@22|)))))) (and (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeFlush_q (Lit |step#0@@22|))))) (let ((|flush#3@@1| (Lit (BetreeSpec.BetreeStep.flush (Lit |step#0@@22|))))) (|BetreeSpec.__default.FlushOps#canCall| |flush#3@@1|))) (=> (not (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeFlush_q (Lit |step#0@@22|)))))) (and (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeGrow_q (Lit |step#0@@22|))))) (let ((|growth#3@@1| (Lit (BetreeSpec.BetreeStep.growth (Lit |step#0@@22|))))) (|BetreeSpec.__default.GrowOps#canCall| |growth#3@@1|))) (=> (not (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeGrow_q (Lit |step#0@@22|)))))) (let ((|redirect#3@@1| (Lit (BetreeSpec.BetreeStep.redirect (Lit |step#0@@22|))))) (|BetreeSpec.__default.RedirectOps#canCall| |redirect#3@@1|)))))))))))) (= (BetreeSpec.__default.BetreeStepOps (Lit |step#0@@22|)) (ite (BetreeSpec.BetreeStep.BetreeQuery_q (Lit |step#0@@22|)) (let ((|q#2@@1| (Lit (BetreeSpec.BetreeStep.q (Lit |step#0@@22|))))) (Lit (BetreeSpec.__default.QueryOps |q#2@@1|))) (ite (BetreeSpec.BetreeStep.BetreeSuccQuery_q (Lit |step#0@@22|)) (let ((|sq#2@@1| (Lit (BetreeSpec.BetreeStep.sq (Lit |step#0@@22|))))) (Lit (BetreeSpec.__default.SuccQueryOps |sq#2@@1|))) (ite (BetreeSpec.BetreeStep.BetreeInsert_q (Lit |step#0@@22|)) (let ((|ins#2@@1| (Lit (BetreeSpec.BetreeStep.ins (Lit |step#0@@22|))))) (Lit (BetreeSpec.__default.InsertionOps |ins#2@@1|))) (ite (BetreeSpec.BetreeStep.BetreeFlush_q (Lit |step#0@@22|)) (let ((|flush#2@@1| (Lit (BetreeSpec.BetreeStep.flush (Lit |step#0@@22|))))) (Lit (BetreeSpec.__default.FlushOps |flush#2@@1|))) (ite (BetreeSpec.BetreeStep.BetreeGrow_q (Lit |step#0@@22|)) (let ((|growth#2@@1| (Lit (BetreeSpec.BetreeStep.growth (Lit |step#0@@22|))))) (Lit (BetreeSpec.__default.GrowOps |growth#2@@1|))) (let ((|redirect#2@@1| (Lit (BetreeSpec.BetreeStep.redirect (Lit |step#0@@22|))))) (BetreeSpec.__default.RedirectOps StartFuel_BetreeSpec._default.RedirectOps |redirect#2@@1|)))))))))) :qid |BetreeSpecidfy.423:26| :weight 3 :skolemid |4432| :pattern ( (BetreeSpec.__default.BetreeStepOps (Lit |step#0@@22|))) ))))
(assert  (=> true (forall ((|step#0@@23| T@U) (|uiop#0@@56| T@U) ) (!  (=> (and (and (= (type |step#0@@23|) DatatypeTypeType) (= (type |uiop#0@@56|) DatatypeTypeType)) (or (|BetreeSpec.__default.BetreeStepUI#canCall| |step#0@@23| |uiop#0@@56|) (and ($Is |step#0@@23| Tclass.BetreeSpec.BetreeStep) ($Is |uiop#0@@56| Tclass.UI.Op)))) true) :qid |BetreeSpecidfy.436:26| :skolemid |4433| :pattern ( (BetreeSpec.__default.BetreeStepUI |step#0@@23| |uiop#0@@56|)) ))))
(assert (forall ((|step#0@@24| T@U) (|uiop#0@@57| T@U) ) (!  (=> (and (and (= (type |step#0@@24|) DatatypeTypeType) (= (type |uiop#0@@57|) DatatypeTypeType)) (and ($Is |step#0@@24| Tclass.BetreeSpec.BetreeStep) ($Is |uiop#0@@57| Tclass.UI.Op))) (= (|BetreeSpec.__default.BetreeStepUI#requires| |step#0@@24| |uiop#0@@57|) true)) :qid |BetreeSpecidfy.436:26| :skolemid |4434| :pattern ( (|BetreeSpec.__default.BetreeStepUI#requires| |step#0@@24| |uiop#0@@57|)) )))
(assert  (=> true (forall ((|step#0@@25| T@U) (|uiop#0@@58| T@U) ) (!  (=> (and (and (= (type |step#0@@25|) DatatypeTypeType) (= (type |uiop#0@@58|) DatatypeTypeType)) (or (|BetreeSpec.__default.BetreeStepUI#canCall| |step#0@@25| |uiop#0@@58|) (and ($Is |step#0@@25| Tclass.BetreeSpec.BetreeStep) ($Is |uiop#0@@58| Tclass.UI.Op)))) (and (and (=> (BetreeSpec.BetreeStep.BetreeQuery_q |step#0@@25|) (let ((|q#1@@2| (BetreeSpec.BetreeStep.q |step#0@@25|))) (and (|$IsA#UI.Op| |uiop#0@@58|) (and (BetreeSpec.LookupQuery.LookupQuery_q |q#1@@2|) (BetreeSpec.LookupQuery.LookupQuery_q |q#1@@2|))))) (=> (not (BetreeSpec.BetreeStep.BetreeQuery_q |step#0@@25|)) (and (=> (BetreeSpec.BetreeStep.BetreeSuccQuery_q |step#0@@25|) (let ((|sq#1@@2| (BetreeSpec.BetreeStep.sq |step#0@@25|))) (and (|$IsA#UI.Op| |uiop#0@@58|) (and (and (BetreeSpec.SuccQuery.SuccQuery_q |sq#1@@2|) (BetreeSpec.SuccQuery.SuccQuery_q |sq#1@@2|)) (BetreeSpec.SuccQuery.SuccQuery_q |sq#1@@2|))))) (=> (not (BetreeSpec.BetreeStep.BetreeSuccQuery_q |step#0@@25|)) (=> (BetreeSpec.BetreeStep.BetreeInsert_q |step#0@@25|) (let ((|ins#1@@2| (BetreeSpec.BetreeStep.ins |step#0@@25|))) (and (BetreeSpec.MessageInsertion.MessageInsertion_q |ins#1@@2|) (=> (ValueMessage.Message.Define_q (BetreeSpec.MessageInsertion.msg |ins#1@@2|)) (and (|$IsA#UI.Op| |uiop#0@@58|) (and (BetreeSpec.MessageInsertion.MessageInsertion_q |ins#1@@2|) (BetreeSpec.MessageInsertion.MessageInsertion_q |ins#1@@2|))))))))))) (= (BetreeSpec.__default.BetreeStepUI |step#0@@25| |uiop#0@@58|) (ite (BetreeSpec.BetreeStep.BetreeQuery_q |step#0@@25|) (let ((|q#0@@26| (BetreeSpec.BetreeStep.q |step#0@@25|))) (|UI.Op#Equal| |uiop#0@@58| (|#UI.Op.GetOp| (BetreeSpec.LookupQuery.key |q#0@@26|) (BetreeSpec.LookupQuery.value |q#0@@26|)))) (ite (BetreeSpec.BetreeStep.BetreeSuccQuery_q |step#0@@25|) (let ((|sq#0@@2| (BetreeSpec.BetreeStep.sq |step#0@@25|))) (|UI.Op#Equal| |uiop#0@@58| (|#UI.Op.SuccOp| (BetreeSpec.SuccQuery.start |sq#0@@2|) (BetreeSpec.SuccQuery.results |sq#0@@2|) (BetreeSpec.SuccQuery.end |sq#0@@2|)))) (ite (BetreeSpec.BetreeStep.BetreeInsert_q |step#0@@25|) (let ((|ins#0@@14| (BetreeSpec.BetreeStep.ins |step#0@@25|))) (and (ValueMessage.Message.Define_q (BetreeSpec.MessageInsertion.msg |ins#0@@14|)) (|UI.Op#Equal| |uiop#0@@58| (|#UI.Op.PutOp| (BetreeSpec.MessageInsertion.key |ins#0@@14|) (ValueMessage.Message.value (BetreeSpec.MessageInsertion.msg |ins#0@@14|)))))) (ite (BetreeSpec.BetreeStep.BetreeFlush_q |step#0@@25|) (UI.Op.NoOp_q |uiop#0@@58|) (ite (BetreeSpec.BetreeStep.BetreeGrow_q |step#0@@25|) (UI.Op.NoOp_q |uiop#0@@58|) (UI.Op.NoOp_q |uiop#0@@58|))))))))) :qid |BetreeSpecidfy.436:26| :skolemid |4435| :pattern ( (BetreeSpec.__default.BetreeStepUI |step#0@@25| |uiop#0@@58|)) ))))
(assert  (=> true (forall ((|step#0@@26| T@U) (|uiop#0@@59| T@U) ) (!  (=> (and (and (= (type |step#0@@26|) DatatypeTypeType) (= (type |uiop#0@@59|) DatatypeTypeType)) (or (|BetreeSpec.__default.BetreeStepUI#canCall| (Lit |step#0@@26|) (Lit |uiop#0@@59|)) (and ($Is |step#0@@26| Tclass.BetreeSpec.BetreeStep) ($Is |uiop#0@@59| Tclass.UI.Op)))) (and (and (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeQuery_q (Lit |step#0@@26|))))) (let ((|q#3@@2| (Lit (BetreeSpec.BetreeStep.q (Lit |step#0@@26|))))) (and (|$IsA#UI.Op| (Lit |uiop#0@@59|)) (and (BetreeSpec.LookupQuery.LookupQuery_q |q#3@@2|) (BetreeSpec.LookupQuery.LookupQuery_q |q#3@@2|))))) (=> (not (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeQuery_q (Lit |step#0@@26|)))))) (and (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeSuccQuery_q (Lit |step#0@@26|))))) (let ((|sq#3@@2| (Lit (BetreeSpec.BetreeStep.sq (Lit |step#0@@26|))))) (and (|$IsA#UI.Op| (Lit |uiop#0@@59|)) (and (and (BetreeSpec.SuccQuery.SuccQuery_q |sq#3@@2|) (BetreeSpec.SuccQuery.SuccQuery_q |sq#3@@2|)) (BetreeSpec.SuccQuery.SuccQuery_q |sq#3@@2|))))) (=> (not (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeSuccQuery_q (Lit |step#0@@26|)))))) (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeInsert_q (Lit |step#0@@26|))))) (let ((|ins#3@@2| (Lit (BetreeSpec.BetreeStep.ins (Lit |step#0@@26|))))) (and (BetreeSpec.MessageInsertion.MessageInsertion_q |ins#3@@2|) (=> (ValueMessage.Message.Define_q (BetreeSpec.MessageInsertion.msg |ins#3@@2|)) (and (|$IsA#UI.Op| (Lit |uiop#0@@59|)) (and (BetreeSpec.MessageInsertion.MessageInsertion_q |ins#3@@2|) (BetreeSpec.MessageInsertion.MessageInsertion_q |ins#3@@2|))))))))))) (= (BetreeSpec.__default.BetreeStepUI (Lit |step#0@@26|) (Lit |uiop#0@@59|)) (ite (BetreeSpec.BetreeStep.BetreeQuery_q (Lit |step#0@@26|)) (let ((|q#2@@2| (Lit (BetreeSpec.BetreeStep.q (Lit |step#0@@26|))))) (|UI.Op#Equal| |uiop#0@@59| (|#UI.Op.GetOp| (Lit (BetreeSpec.LookupQuery.key |q#2@@2|)) (Lit (BetreeSpec.LookupQuery.value |q#2@@2|))))) (ite (BetreeSpec.BetreeStep.BetreeSuccQuery_q (Lit |step#0@@26|)) (let ((|sq#2@@2| (Lit (BetreeSpec.BetreeStep.sq (Lit |step#0@@26|))))) (|UI.Op#Equal| |uiop#0@@59| (|#UI.Op.SuccOp| (Lit (BetreeSpec.SuccQuery.start |sq#2@@2|)) (Lit (BetreeSpec.SuccQuery.results |sq#2@@2|)) (Lit (BetreeSpec.SuccQuery.end |sq#2@@2|))))) (ite (BetreeSpec.BetreeStep.BetreeInsert_q (Lit |step#0@@26|)) (let ((|ins#2@@2| (Lit (BetreeSpec.BetreeStep.ins (Lit |step#0@@26|))))) (and (ValueMessage.Message.Define_q (Lit (BetreeSpec.MessageInsertion.msg |ins#2@@2|))) (|UI.Op#Equal| |uiop#0@@59| (|#UI.Op.PutOp| (Lit (BetreeSpec.MessageInsertion.key |ins#2@@2|)) (Lit (ValueMessage.Message.value (Lit (BetreeSpec.MessageInsertion.msg |ins#2@@2|)))))))) (ite (BetreeSpec.BetreeStep.BetreeFlush_q (Lit |step#0@@26|)) (U_2_bool (Lit (bool_2_U (UI.Op.NoOp_q (Lit |uiop#0@@59|))))) (ite (BetreeSpec.BetreeStep.BetreeGrow_q (Lit |step#0@@26|)) (U_2_bool (Lit (bool_2_U (UI.Op.NoOp_q (Lit |uiop#0@@59|))))) (U_2_bool (Lit (bool_2_U (UI.Op.NoOp_q (Lit |uiop#0@@59|))))))))))))) :qid |BetreeSpecidfy.436:26| :weight 3 :skolemid |4436| :pattern ( (BetreeSpec.__default.BetreeStepUI (Lit |step#0@@26|) (Lit |uiop#0@@59|))) ))))
(assert (= (type Tclass.BetreeBlockInterface.__default) TyType))
(assert (= (Tag Tclass.BetreeBlockInterface.__default) Tagclass.BetreeBlockInterface.__default))
(assert (= (TagFamily Tclass.BetreeBlockInterface.__default) tytagFamily$_default))
(assert (forall ((bx@@194 T@U) ) (!  (=> (and (= (type bx@@194) BoxType) ($IsBox bx@@194 Tclass.BetreeBlockInterface.__default)) (and (= ($Box ($Unbox refType bx@@194)) bx@@194) ($Is ($Unbox refType bx@@194) Tclass.BetreeBlockInterface.__default))) :qid |unknown.0:0| :skolemid |4437| :pattern ( ($IsBox bx@@194 Tclass.BetreeBlockInterface.__default)) )))
(assert (forall (($o@@62 T@U) ) (!  (=> (= (type $o@@62) refType) (= ($Is $o@@62 Tclass.BetreeBlockInterface.__default)  (or (= $o@@62 null) (= (dtype $o@@62) Tclass.BetreeBlockInterface.__default)))) :qid |unknown.0:0| :skolemid |4438| :pattern ( ($Is $o@@62 Tclass.BetreeBlockInterface.__default)) )))
(assert (forall (($o@@63 T@U) ($h@@227 T@U) ) (!  (=> (and (= (type $o@@63) refType) (= (type $h@@227) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@63 Tclass.BetreeBlockInterface.__default $h@@227)  (or (= $o@@63 null) (U_2_bool (MapType1Select (MapType0Select $h@@227 $o@@63) alloc))))) :qid |unknown.0:0| :skolemid |4439| :pattern ( ($IsAlloc $o@@63 Tclass.BetreeBlockInterface.__default $h@@227)) )))
(assert (= (type Tclass.BetreeBlockInterface.Variables) TyType))
(assert (= (Tag Tclass.BetreeBlockInterface.Variables) Tagclass.BetreeBlockInterface.Variables))
(assert (= (TagFamily Tclass.BetreeBlockInterface.Variables) tytagFamily$Variables))
(assert (forall ((bx@@195 T@U) ) (!  (=> (and (= (type bx@@195) BoxType) ($IsBox bx@@195 Tclass.BetreeBlockInterface.Variables)) (and (= ($Box ($Unbox DatatypeTypeType bx@@195)) bx@@195) ($Is ($Unbox DatatypeTypeType bx@@195) Tclass.BetreeBlockInterface.Variables))) :qid |unknown.0:0| :skolemid |4440| :pattern ( ($IsBox bx@@195 Tclass.BetreeBlockInterface.Variables)) )))
(assert  (=> true (forall ((|s#0@@290| T@U) ) (!  (=> (and (= (type |s#0@@290|) DatatypeTypeType) (or (|BetreeBlockInterface.__default.RefGraphIsClosed#canCall| |s#0@@290|) ($Is |s#0@@290| Tclass.BetreeBlockInterface.Variables))) true) :qid |BlockInterfaceidfyBetreeBlockInterface.25:30| :skolemid |4441| :pattern ( (BetreeBlockInterface.__default.RefGraphIsClosed |s#0@@290|)) ))))
(assert (forall ((|s#0@@291| T@U) ) (!  (=> (and (= (type |s#0@@291|) DatatypeTypeType) ($Is |s#0@@291| Tclass.BetreeBlockInterface.Variables)) (= (|BetreeBlockInterface.__default.RefGraphIsClosed#requires| |s#0@@291|) true)) :qid |BlockInterfaceidfyBetreeBlockInterface.25:30| :skolemid |4442| :pattern ( (|BetreeBlockInterface.__default.RefGraphIsClosed#requires| |s#0@@291|)) )))
(assert  (=> true (forall ((|s#0@@292| T@U) ) (!  (=> (and (= (type |s#0@@292|) DatatypeTypeType) (or (|BetreeBlockInterface.__default.RefGraphIsClosed#canCall| |s#0@@292|) ($Is |s#0@@292| Tclass.BetreeBlockInterface.Variables))) (and (forall ((|key#0@@177| T@U) ) (!  (=> (and (= (type |key#0@@177|) BoxType) ($IsBox |key#0@@177| Tclass.ReferenceType.Reference)) (and (BetreeBlockInterface.Variables.Variables_q |s#0@@292|) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view |s#0@@292|)) |key#0@@177|)) (and (and (BetreeBlockInterface.Variables.Variables_q |s#0@@292|) (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeBlockInterface.Variables.view |s#0@@292|)) |key#0@@177|)))) (BetreeBlockInterface.Variables.Variables_q |s#0@@292|))))) :qid |BlockInterfaceidfyBetreeBlockInterface.26:12| :skolemid |4444| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeBlockInterface.Variables.view |s#0@@292|)) |key#0@@177|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view |s#0@@292|)) |key#0@@177|)) )) (= (BetreeBlockInterface.__default.RefGraphIsClosed |s#0@@292|) (forall ((|key#0@@178| T@U) ) (!  (=> (and (and (= (type |key#0@@178|) BoxType) ($IsBox |key#0@@178| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view |s#0@@292|)) |key#0@@178|))) (|ISet#Subset| (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeBlockInterface.Variables.view |s#0@@292|)) |key#0@@178|))) (|IMap#Domain| (BetreeBlockInterface.Variables.view |s#0@@292|)))) :qid |BlockInterfaceidfyBetreeBlockInterface.26:12| :skolemid |4443| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeBlockInterface.Variables.view |s#0@@292|)) |key#0@@178|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view |s#0@@292|)) |key#0@@178|)) ))))) :qid |BlockInterfaceidfyBetreeBlockInterface.25:30| :skolemid |4445| :pattern ( (BetreeBlockInterface.__default.RefGraphIsClosed |s#0@@292|)) ))))
(assert  (=> true (forall ((|s#0@@293| T@U) ) (!  (=> (and (= (type |s#0@@293|) DatatypeTypeType) (or (|BetreeBlockInterface.__default.RefGraphIsClosed#canCall| (Lit |s#0@@293|)) ($Is |s#0@@293| Tclass.BetreeBlockInterface.Variables))) (and (forall ((|key#1@@25| T@U) ) (!  (=> (and (= (type |key#1@@25|) BoxType) ($IsBox |key#1@@25| Tclass.ReferenceType.Reference)) (and (BetreeBlockInterface.Variables.Variables_q (Lit |s#0@@293|)) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view (Lit |s#0@@293|))) |key#1@@25|)) (and (and (BetreeBlockInterface.Variables.Variables_q (Lit |s#0@@293|)) (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@293|)))) |key#1@@25|)))) (BetreeBlockInterface.Variables.Variables_q (Lit |s#0@@293|)))))) :qid |BlockInterfaceidfyBetreeBlockInterface.26:12| :skolemid |4447| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeBlockInterface.Variables.view |s#0@@293|)) |key#1@@25|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view |s#0@@293|)) |key#1@@25|)) )) (= (BetreeBlockInterface.__default.RefGraphIsClosed (Lit |s#0@@293|)) (forall ((|key#1@@26| T@U) ) (!  (=> (and (and (= (type |key#1@@26|) BoxType) ($IsBox |key#1@@26| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view (Lit |s#0@@293|))) |key#1@@26|))) (|ISet#Subset| (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@293|)))) |key#1@@26|))) (|IMap#Domain| (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@293|)))))) :qid |BlockInterfaceidfyBetreeBlockInterface.26:12| :skolemid |4446| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeBlockInterface.Variables.view |s#0@@293|)) |key#1@@26|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view |s#0@@293|)) |key#1@@26|)) ))))) :qid |BlockInterfaceidfyBetreeBlockInterface.25:30| :weight 3 :skolemid |4448| :pattern ( (BetreeBlockInterface.__default.RefGraphIsClosed (Lit |s#0@@293|))) ))))
(assert  (=> true (forall ((|s#0@@294| T@U) (|lookup#0@@25| T@U) ) (!  (=> (and (and (= (type |s#0@@294|) DatatypeTypeType) (= (type |lookup#0@@25|) (SeqType BoxType))) (or (|BetreeBlockInterface.__default.LookupIsValid#canCall| |s#0@@294| |lookup#0@@25|) (and ($Is |s#0@@294| Tclass.BetreeBlockInterface.Variables) ($Is |lookup#0@@25| (TSeq Tclass.ReferenceType.Reference))))) true) :qid |BlockInterfaceidfyBetreeBlockInterface.31:27| :skolemid |4449| :pattern ( (BetreeBlockInterface.__default.LookupIsValid |s#0@@294| |lookup#0@@25|)) ))))
(assert (forall ((|s#0@@295| T@U) (|lookup#0@@26| T@U) ) (!  (=> (and (and (= (type |s#0@@295|) DatatypeTypeType) (= (type |lookup#0@@26|) (SeqType BoxType))) (and ($Is |s#0@@295| Tclass.BetreeBlockInterface.Variables) ($Is |lookup#0@@26| (TSeq Tclass.ReferenceType.Reference)))) (= (|BetreeBlockInterface.__default.LookupIsValid#requires| |s#0@@295| |lookup#0@@26|) true)) :qid |BlockInterfaceidfyBetreeBlockInterface.31:27| :skolemid |4450| :pattern ( (|BetreeBlockInterface.__default.LookupIsValid#requires| |s#0@@295| |lookup#0@@26|)) )))
(assert  (=> true (forall ((|s#0@@296| T@U) (|lookup#0@@27| T@U) ) (!  (=> (and (and (= (type |s#0@@296|) DatatypeTypeType) (= (type |lookup#0@@27|) (SeqType BoxType))) (or (|BetreeBlockInterface.__default.LookupIsValid#canCall| |s#0@@296| |lookup#0@@27|) (and ($Is |s#0@@296| Tclass.BetreeBlockInterface.Variables) ($Is |lookup#0@@27| (TSeq Tclass.ReferenceType.Reference))))) (and (=> (> (|Seq#Length| |lookup#0@@27|) 0) (and |BetreeGraph.__default.Root#canCall| (=> (= (|Seq#Index| |lookup#0@@27| (LitInt 0)) (Lit BetreeGraph.__default.Root)) (and (forall ((|i#0@@129| Int) ) (!  (=> (<= (LitInt 0) |i#0@@129|) (=> (< |i#0@@129| (|Seq#Length| |lookup#0@@27|)) (BetreeBlockInterface.Variables.Variables_q |s#0@@296|))) :qid |BlockInterfaceidfyBetreeBlockInterface.35:16| :skolemid |4453| :pattern ( (|Seq#Index| |lookup#0@@27| |i#0@@129|)) )) (=> (forall ((|i#0@@130| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@130|) (< |i#0@@130| (|Seq#Length| |lookup#0@@27|))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view |s#0@@296|)) (|Seq#Index| |lookup#0@@27| |i#0@@130|))))) :qid |BlockInterfaceidfyBetreeBlockInterface.35:16| :skolemid |4455| :pattern ( (|Seq#Index| |lookup#0@@27| |i#0@@130|)) )) (forall ((|i#1@@53| Int) (|_t#0#0@@1| Int) ) (!  (=> (= |_t#0#0@@1| (+ |i#1@@53| 1)) (=> (<= (LitInt 0) |i#1@@53|) (=> (< |i#1@@53| (- (|Seq#Length| |lookup#0@@27|) 1)) (and (BetreeBlockInterface.Variables.Variables_q |s#0@@296|) (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeBlockInterface.Variables.view |s#0@@296|)) (|Seq#Index| |lookup#0@@27| |i#1@@53|)))))))) :qid |BlockInterfaceidfyBetreeBlockInterface.36:16| :skolemid |4454| :pattern ( (|Seq#Index| |lookup#0@@27| |i#1@@53|) (|Seq#Index| |lookup#0@@27| |_t#0#0@@1|)) ))))))) (= (BetreeBlockInterface.__default.LookupIsValid |s#0@@296| |lookup#0@@27|)  (and (and (and (> (|Seq#Length| |lookup#0@@27|) 0) (= (|Seq#Index| |lookup#0@@27| (LitInt 0)) (Lit BetreeGraph.__default.Root))) (forall ((|i#0@@131| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@131|) (< |i#0@@131| (|Seq#Length| |lookup#0@@27|))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view |s#0@@296|)) (|Seq#Index| |lookup#0@@27| |i#0@@131|))))) :qid |BlockInterfaceidfyBetreeBlockInterface.35:16| :skolemid |4451| :pattern ( (|Seq#Index| |lookup#0@@27| |i#0@@131|)) ))) (forall ((|i#1@@54| Int) (|_t#0#0@@2| Int) ) (!  (=> (= |_t#0#0@@2| (+ |i#1@@54| 1)) (=> (and (<= (LitInt 0) |i#1@@54|) (< |i#1@@54| (- (|Seq#Length| |lookup#0@@27|) 1))) (U_2_bool (MapType0Select (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeBlockInterface.Variables.view |s#0@@296|)) (|Seq#Index| |lookup#0@@27| |i#1@@54|)))) (|Seq#Index| |lookup#0@@27| |_t#0#0@@2|))))) :qid |BlockInterfaceidfyBetreeBlockInterface.36:16| :skolemid |4452| :pattern ( (|Seq#Index| |lookup#0@@27| |i#1@@54|) (|Seq#Index| |lookup#0@@27| |_t#0#0@@2|)) )))))) :qid |BlockInterfaceidfyBetreeBlockInterface.31:27| :skolemid |4456| :pattern ( (BetreeBlockInterface.__default.LookupIsValid |s#0@@296| |lookup#0@@27|)) ))))
(assert  (=> true (forall ((|s#0@@297| T@U) (|lookup#0@@28| T@U) ) (!  (=> (and (and (= (type |s#0@@297|) DatatypeTypeType) (= (type |lookup#0@@28|) (SeqType BoxType))) (or (|BetreeBlockInterface.__default.LookupIsValid#canCall| (Lit |s#0@@297|) (Lit |lookup#0@@28|)) (and ($Is |s#0@@297| Tclass.BetreeBlockInterface.Variables) ($Is |lookup#0@@28| (TSeq Tclass.ReferenceType.Reference))))) (and (=> (> (|Seq#Length| (Lit |lookup#0@@28|)) 0) (and |BetreeGraph.__default.Root#canCall| (=> (= (|Seq#Index| (Lit |lookup#0@@28|) (LitInt 0)) (Lit BetreeGraph.__default.Root)) (and (forall ((|i#2@@26| Int) ) (!  (=> (<= (LitInt 0) |i#2@@26|) (=> (< |i#2@@26| (|Seq#Length| (Lit |lookup#0@@28|))) (BetreeBlockInterface.Variables.Variables_q (Lit |s#0@@297|)))) :qid |BlockInterfaceidfyBetreeBlockInterface.35:16| :skolemid |4459| :pattern ( (|Seq#Index| |lookup#0@@28| |i#2@@26|)) )) (=> (forall ((|i#2@@27| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@27|) (< |i#2@@27| (|Seq#Length| (Lit |lookup#0@@28|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view (Lit |s#0@@297|))) (|Seq#Index| (Lit |lookup#0@@28|) |i#2@@27|))))) :qid |BlockInterfaceidfyBetreeBlockInterface.35:16| :skolemid |4461| :pattern ( (|Seq#Index| |lookup#0@@28| |i#2@@27|)) )) (forall ((|i#3@@17| Int) (|_t#0#1@@1| Int) ) (!  (=> (= |_t#0#1@@1| (+ |i#3@@17| 1)) (=> (<= (LitInt 0) |i#3@@17|) (=> (< |i#3@@17| (- (|Seq#Length| (Lit |lookup#0@@28|)) 1)) (and (BetreeBlockInterface.Variables.Variables_q (Lit |s#0@@297|)) (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@297|)))) (|Seq#Index| (Lit |lookup#0@@28|) |i#3@@17|)))))))) :qid |BlockInterfaceidfyBetreeBlockInterface.36:16| :skolemid |4460| :pattern ( (|Seq#Index| |lookup#0@@28| |i#3@@17|) (|Seq#Index| |lookup#0@@28| |_t#0#1@@1|)) ))))))) (= (BetreeBlockInterface.__default.LookupIsValid (Lit |s#0@@297|) (Lit |lookup#0@@28|))  (and (and (and (> (|Seq#Length| (Lit |lookup#0@@28|)) 0) (= (|Seq#Index| (Lit |lookup#0@@28|) (LitInt 0)) (Lit BetreeGraph.__default.Root))) (forall ((|i#2@@28| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@28|) (< |i#2@@28| (|Seq#Length| (Lit |lookup#0@@28|)))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view (Lit |s#0@@297|))) (|Seq#Index| (Lit |lookup#0@@28|) |i#2@@28|))))) :qid |BlockInterfaceidfyBetreeBlockInterface.35:16| :skolemid |4457| :pattern ( (|Seq#Index| |lookup#0@@28| |i#2@@28|)) ))) (forall ((|i#3@@18| Int) (|_t#0#1@@2| Int) ) (!  (=> (= |_t#0#1@@2| (+ |i#3@@18| 1)) (=> (and (<= (LitInt 0) |i#3@@18|) (< |i#3@@18| (- (|Seq#Length| (Lit |lookup#0@@28|)) 1))) (U_2_bool (MapType0Select (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@297|)))) (|Seq#Index| (Lit |lookup#0@@28|) |i#3@@18|)))) (|Seq#Index| (Lit |lookup#0@@28|) |_t#0#1@@2|))))) :qid |BlockInterfaceidfyBetreeBlockInterface.36:16| :skolemid |4458| :pattern ( (|Seq#Index| |lookup#0@@28| |i#3@@18|) (|Seq#Index| |lookup#0@@28| |_t#0#1@@2|)) )))))) :qid |BlockInterfaceidfyBetreeBlockInterface.31:27| :weight 3 :skolemid |4462| :pattern ( (BetreeBlockInterface.__default.LookupIsValid (Lit |s#0@@297|) (Lit |lookup#0@@28|))) ))))
(assert  (=> true (forall ((|s#0@@298| T@U) (|ref#0@@20| T@U) ) (!  (=> (and (and (= (type |s#0@@298|) DatatypeTypeType) (= (type |ref#0@@20|) BoxType)) (or (|BetreeBlockInterface.__default.ReachableReference#canCall| |s#0@@298| |ref#0@@20|) (and ($Is |s#0@@298| Tclass.BetreeBlockInterface.Variables) ($IsBox |ref#0@@20| Tclass.ReferenceType.Reference)))) true) :qid |BlockInterfaceidfyBetreeBlockInterface.39:32| :skolemid |4463| :pattern ( (BetreeBlockInterface.__default.ReachableReference |s#0@@298| |ref#0@@20|)) ))))
(assert (forall ((|s#0@@299| T@U) (|ref#0@@21| T@U) ) (!  (=> (and (and (= (type |s#0@@299|) DatatypeTypeType) (= (type |ref#0@@21|) BoxType)) (and ($Is |s#0@@299| Tclass.BetreeBlockInterface.Variables) ($IsBox |ref#0@@21| Tclass.ReferenceType.Reference))) (= (|BetreeBlockInterface.__default.ReachableReference#requires| |s#0@@299| |ref#0@@21|) true)) :qid |BlockInterfaceidfyBetreeBlockInterface.39:32| :skolemid |4464| :pattern ( (|BetreeBlockInterface.__default.ReachableReference#requires| |s#0@@299| |ref#0@@21|)) )))
(assert  (=> true (forall ((|s#0@@300| T@U) (|ref#0@@22| T@U) ) (!  (=> (and (and (= (type |s#0@@300|) DatatypeTypeType) (= (type |ref#0@@22|) BoxType)) (or (|BetreeBlockInterface.__default.ReachableReference#canCall| |s#0@@300| |ref#0@@22|) (and ($Is |s#0@@300| Tclass.BetreeBlockInterface.Variables) ($IsBox |ref#0@@22| Tclass.ReferenceType.Reference)))) (and (forall ((|lookup#0@@29| T@U) ) (!  (=> (and (= (type |lookup#0@@29|) (SeqType BoxType)) ($Is |lookup#0@@29| (TSeq Tclass.ReferenceType.Reference))) (and (|BetreeBlockInterface.__default.LookupIsValid#canCall| |s#0@@300| |lookup#0@@29|) (=> (BetreeBlockInterface.__default.LookupIsValid |s#0@@300| |lookup#0@@29|) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |lookup#0@@29|)))) :qid |BlockInterfaceidfyBetreeBlockInterface.41:12| :skolemid |4466| :pattern ( (Sequences.__default.Last Tclass.ReferenceType.Reference |lookup#0@@29|)) :pattern ( (BetreeBlockInterface.__default.LookupIsValid |s#0@@300| |lookup#0@@29|)) )) (= (BetreeBlockInterface.__default.ReachableReference |s#0@@300| |ref#0@@22|) (exists ((|lookup#0@@30| T@U) ) (!  (and (= (type |lookup#0@@30|) (SeqType BoxType)) (and ($Is |lookup#0@@30| (TSeq Tclass.ReferenceType.Reference)) (and (BetreeBlockInterface.__default.LookupIsValid |s#0@@300| |lookup#0@@30|) (= (Sequences.__default.Last Tclass.ReferenceType.Reference |lookup#0@@30|) |ref#0@@22|)))) :qid |BlockInterfaceidfyBetreeBlockInterface.41:12| :skolemid |4465| :pattern ( (Sequences.__default.Last Tclass.ReferenceType.Reference |lookup#0@@30|)) :pattern ( (BetreeBlockInterface.__default.LookupIsValid |s#0@@300| |lookup#0@@30|)) ))))) :qid |BlockInterfaceidfyBetreeBlockInterface.39:32| :skolemid |4467| :pattern ( (BetreeBlockInterface.__default.ReachableReference |s#0@@300| |ref#0@@22|)) ))))
(assert  (=> true (forall ((|s#0@@301| T@U) (|ref#0@@23| T@U) ) (!  (=> (and (and (= (type |s#0@@301|) DatatypeTypeType) (= (type |ref#0@@23|) BoxType)) (or (|BetreeBlockInterface.__default.ReachableReference#canCall| (Lit |s#0@@301|) |ref#0@@23|) (and ($Is |s#0@@301| Tclass.BetreeBlockInterface.Variables) ($IsBox |ref#0@@23| Tclass.ReferenceType.Reference)))) (and (forall ((|lookup#1| T@U) ) (!  (=> (and (= (type |lookup#1|) (SeqType BoxType)) ($Is |lookup#1| (TSeq Tclass.ReferenceType.Reference))) (and (|BetreeBlockInterface.__default.LookupIsValid#canCall| (Lit |s#0@@301|) |lookup#1|) (=> (BetreeBlockInterface.__default.LookupIsValid (Lit |s#0@@301|) |lookup#1|) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |lookup#1|)))) :qid |BlockInterfaceidfyBetreeBlockInterface.41:12| :skolemid |4469| :pattern ( (Sequences.__default.Last Tclass.ReferenceType.Reference |lookup#1|)) :pattern ( (BetreeBlockInterface.__default.LookupIsValid |s#0@@301| |lookup#1|)) )) (= (BetreeBlockInterface.__default.ReachableReference (Lit |s#0@@301|) |ref#0@@23|) (exists ((|lookup#1@@0| T@U) ) (!  (and (= (type |lookup#1@@0|) (SeqType BoxType)) (and ($Is |lookup#1@@0| (TSeq Tclass.ReferenceType.Reference)) (and (BetreeBlockInterface.__default.LookupIsValid (Lit |s#0@@301|) |lookup#1@@0|) (= (Sequences.__default.Last Tclass.ReferenceType.Reference |lookup#1@@0|) |ref#0@@23|)))) :qid |BlockInterfaceidfyBetreeBlockInterface.41:12| :skolemid |4468| :pattern ( (Sequences.__default.Last Tclass.ReferenceType.Reference |lookup#1@@0|)) :pattern ( (BetreeBlockInterface.__default.LookupIsValid |s#0@@301| |lookup#1@@0|)) ))))) :qid |BlockInterfaceidfyBetreeBlockInterface.39:32| :weight 3 :skolemid |4470| :pattern ( (BetreeBlockInterface.__default.ReachableReference (Lit |s#0@@301|) |ref#0@@23|)) ))))
(assert  (=> true (forall ((|s#0@@302| T@U) (|ref#0@@24| T@U) ) (!  (=> (and (and (= (type |s#0@@302|) DatatypeTypeType) (= (type |ref#0@@24|) BoxType)) (or (|BetreeBlockInterface.__default.ReachableReference#canCall| (Lit |s#0@@302|) (Lit |ref#0@@24|)) (and ($Is |s#0@@302| Tclass.BetreeBlockInterface.Variables) ($IsBox |ref#0@@24| Tclass.ReferenceType.Reference)))) (and (forall ((|lookup#2| T@U) ) (!  (=> (and (= (type |lookup#2|) (SeqType BoxType)) ($Is |lookup#2| (TSeq Tclass.ReferenceType.Reference))) (and (|BetreeBlockInterface.__default.LookupIsValid#canCall| (Lit |s#0@@302|) |lookup#2|) (=> (BetreeBlockInterface.__default.LookupIsValid (Lit |s#0@@302|) |lookup#2|) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |lookup#2|)))) :qid |BlockInterfaceidfyBetreeBlockInterface.41:12| :skolemid |4472| :pattern ( (Sequences.__default.Last Tclass.ReferenceType.Reference |lookup#2|)) :pattern ( (BetreeBlockInterface.__default.LookupIsValid |s#0@@302| |lookup#2|)) )) (= (BetreeBlockInterface.__default.ReachableReference (Lit |s#0@@302|) (Lit |ref#0@@24|)) (exists ((|lookup#2@@0| T@U) ) (!  (and (= (type |lookup#2@@0|) (SeqType BoxType)) (and ($Is |lookup#2@@0| (TSeq Tclass.ReferenceType.Reference)) (and (BetreeBlockInterface.__default.LookupIsValid (Lit |s#0@@302|) |lookup#2@@0|) (= (Sequences.__default.Last Tclass.ReferenceType.Reference |lookup#2@@0|) (Lit |ref#0@@24|))))) :qid |BlockInterfaceidfyBetreeBlockInterface.41:12| :skolemid |4471| :pattern ( (Sequences.__default.Last Tclass.ReferenceType.Reference |lookup#2@@0|)) :pattern ( (BetreeBlockInterface.__default.LookupIsValid |s#0@@302| |lookup#2@@0|)) ))))) :qid |BlockInterfaceidfyBetreeBlockInterface.39:32| :weight 3 :skolemid |4473| :pattern ( (BetreeBlockInterface.__default.ReachableReference (Lit |s#0@@302|) (Lit |ref#0@@24|))) ))))
(assert (forall ((arg0@@713 T@U) ) (! (= (type (BetreeBlockInterface.__default.LiveReferences arg0@@713)) (MapType0Type BoxType boolType)) :qid |funType:BetreeBlockInterface.__default.LiveReferences| :pattern ( (BetreeBlockInterface.__default.LiveReferences arg0@@713)) )))
(assert  (=> true (forall ((|s#0@@303| T@U) ) (!  (=> (and (= (type |s#0@@303|) DatatypeTypeType) (or (|BetreeBlockInterface.__default.LiveReferences#canCall| |s#0@@303|) ($Is |s#0@@303| Tclass.BetreeBlockInterface.Variables))) ($Is (BetreeBlockInterface.__default.LiveReferences |s#0@@303|) (TISet Tclass.ReferenceType.Reference))) :qid |BlockInterfaceidfyBetreeBlockInterface.44:27| :skolemid |4474| :pattern ( (BetreeBlockInterface.__default.LiveReferences |s#0@@303|)) ))))
(assert (forall ((|s#0@@304| T@U) ) (!  (=> (and (= (type |s#0@@304|) DatatypeTypeType) ($Is |s#0@@304| Tclass.BetreeBlockInterface.Variables)) (= (|BetreeBlockInterface.__default.LiveReferences#requires| |s#0@@304|) true)) :qid |BlockInterfaceidfyBetreeBlockInterface.44:27| :skolemid |4475| :pattern ( (|BetreeBlockInterface.__default.LiveReferences#requires| |s#0@@304|)) )))
(assert (forall ((arg0@@714 T@U) (arg1@@333 T@U) ) (! (= (type (|lambda#176| arg0@@714 arg1@@333)) (MapType0Type BoxType boolType)) :qid |funType:lambda#176| :pattern ( (|lambda#176| arg0@@714 arg1@@333)) )))
(assert  (=> true (forall ((|s#0@@305| T@U) ) (!  (=> (and (= (type |s#0@@305|) DatatypeTypeType) (or (|BetreeBlockInterface.__default.LiveReferences#canCall| |s#0@@305|) ($Is |s#0@@305| Tclass.BetreeBlockInterface.Variables))) (and (forall ((|ref#0@@25| T@U) ) (!  (=> (and (= (type |ref#0@@25|) BoxType) ($IsBox |ref#0@@25| Tclass.ReferenceType.Reference)) (|BetreeBlockInterface.__default.ReachableReference#canCall| |s#0@@305| |ref#0@@25|)) :qid |BlockInterfaceidfyBetreeBlockInterface.45:10| :skolemid |4476| :pattern ( (BetreeBlockInterface.__default.ReachableReference |s#0@@305| |ref#0@@25|)) )) (= (BetreeBlockInterface.__default.LiveReferences |s#0@@305|) (|lambda#176| Tclass.ReferenceType.Reference |s#0@@305|)))) :qid |BlockInterfaceidfyBetreeBlockInterface.44:27| :skolemid |4477| :pattern ( (BetreeBlockInterface.__default.LiveReferences |s#0@@305|)) ))))
(assert  (=> true (forall ((|s#0@@306| T@U) ) (!  (=> (and (= (type |s#0@@306|) DatatypeTypeType) (or (|BetreeBlockInterface.__default.LiveReferences#canCall| (Lit |s#0@@306|)) ($Is |s#0@@306| Tclass.BetreeBlockInterface.Variables))) (and (forall ((|ref#1@@12| T@U) ) (!  (=> (and (= (type |ref#1@@12|) BoxType) ($IsBox |ref#1@@12| Tclass.ReferenceType.Reference)) (|BetreeBlockInterface.__default.ReachableReference#canCall| (Lit |s#0@@306|) |ref#1@@12|)) :qid |BlockInterfaceidfyBetreeBlockInterface.45:10| :skolemid |4478| :pattern ( (BetreeBlockInterface.__default.ReachableReference |s#0@@306| |ref#1@@12|)) )) (= (BetreeBlockInterface.__default.LiveReferences (Lit |s#0@@306|)) (|lambda#176| Tclass.ReferenceType.Reference (Lit |s#0@@306|))))) :qid |BlockInterfaceidfyBetreeBlockInterface.44:27| :weight 3 :skolemid |4479| :pattern ( (BetreeBlockInterface.__default.LiveReferences (Lit |s#0@@306|))) ))))
(assert  (=> true (forall ((|s#0@@307| T@U) ) (!  (=> (and (= (type |s#0@@307|) DatatypeTypeType) (or (|BetreeBlockInterface.__default.LiveDataAvailable#canCall| |s#0@@307|) ($Is |s#0@@307| Tclass.BetreeBlockInterface.Variables))) true) :qid |BlockInterfaceidfyBetreeBlockInterface.48:31| :skolemid |4480| :pattern ( (BetreeBlockInterface.__default.LiveDataAvailable |s#0@@307|)) ))))
(assert (forall ((|s#0@@308| T@U) ) (!  (=> (and (= (type |s#0@@308|) DatatypeTypeType) ($Is |s#0@@308| Tclass.BetreeBlockInterface.Variables)) (= (|BetreeBlockInterface.__default.LiveDataAvailable#requires| |s#0@@308|) true)) :qid |BlockInterfaceidfyBetreeBlockInterface.48:31| :skolemid |4481| :pattern ( (|BetreeBlockInterface.__default.LiveDataAvailable#requires| |s#0@@308|)) )))
(assert  (=> true (forall ((|s#0@@309| T@U) ) (!  (=> (and (= (type |s#0@@309|) DatatypeTypeType) (or (|BetreeBlockInterface.__default.LiveDataAvailable#canCall| |s#0@@309|) ($Is |s#0@@309| Tclass.BetreeBlockInterface.Variables))) (and (and (|BetreeBlockInterface.__default.LiveReferences#canCall| |s#0@@309|) (BetreeBlockInterface.Variables.Variables_q |s#0@@309|)) (= (BetreeBlockInterface.__default.LiveDataAvailable |s#0@@309|) (|ISet#Subset| (BetreeBlockInterface.__default.LiveReferences |s#0@@309|) (|IMap#Domain| (BetreeBlockInterface.Variables.view |s#0@@309|)))))) :qid |BlockInterfaceidfyBetreeBlockInterface.48:31| :skolemid |4482| :pattern ( (BetreeBlockInterface.__default.LiveDataAvailable |s#0@@309|)) ))))
(assert  (=> true (forall ((|s#0@@310| T@U) ) (!  (=> (and (= (type |s#0@@310|) DatatypeTypeType) (or (|BetreeBlockInterface.__default.LiveDataAvailable#canCall| (Lit |s#0@@310|)) ($Is |s#0@@310| Tclass.BetreeBlockInterface.Variables))) (and (and (|BetreeBlockInterface.__default.LiveReferences#canCall| (Lit |s#0@@310|)) (BetreeBlockInterface.Variables.Variables_q (Lit |s#0@@310|))) (= (BetreeBlockInterface.__default.LiveDataAvailable (Lit |s#0@@310|)) (|ISet#Subset| (BetreeBlockInterface.__default.LiveReferences (Lit |s#0@@310|)) (|IMap#Domain| (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@310|)))))))) :qid |BlockInterfaceidfyBetreeBlockInterface.48:31| :weight 3 :skolemid |4483| :pattern ( (BetreeBlockInterface.__default.LiveDataAvailable (Lit |s#0@@310|))) ))))
(assert (forall ((arg0@@715 T@U) (arg1@@334 T@U) ) (! (= (type (BetreeBlockInterface.__default.Read arg0@@715 arg1@@334)) DatatypeTypeType) :qid |funType:BetreeBlockInterface.__default.Read| :pattern ( (BetreeBlockInterface.__default.Read arg0@@715 arg1@@334)) )))
(assert  (=> true (forall ((|s#0@@311| T@U) (|ref#0@@26| T@U) ) (!  (=> (and (and (= (type |s#0@@311|) DatatypeTypeType) (= (type |ref#0@@26|) BoxType)) (or (|BetreeBlockInterface.__default.Read#canCall| |s#0@@311| |ref#0@@26|) (and (and ($Is |s#0@@311| Tclass.BetreeBlockInterface.Variables) ($IsBox |ref#0@@26| Tclass.ReferenceType.Reference)) (and (BetreeBlockInterface.__default.LiveDataAvailable |s#0@@311|) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view |s#0@@311|)) |ref#0@@26|)))))) ($Is (BetreeBlockInterface.__default.Read |s#0@@311| |ref#0@@26|) Tclass.BetreeGraph.Node)) :qid |BlockInterfaceidfyBetreeBlockInterface.52:17| :skolemid |4484| :pattern ( (BetreeBlockInterface.__default.Read |s#0@@311| |ref#0@@26|)) ))))
(assert (forall ((|s#0@@312| T@U) (|ref#0@@27| T@U) ) (!  (=> (and (and (= (type |s#0@@312|) DatatypeTypeType) (= (type |ref#0@@27|) BoxType)) (and ($Is |s#0@@312| Tclass.BetreeBlockInterface.Variables) ($IsBox |ref#0@@27| Tclass.ReferenceType.Reference))) (= (|BetreeBlockInterface.__default.Read#requires| |s#0@@312| |ref#0@@27|)  (and (BetreeBlockInterface.__default.LiveDataAvailable |s#0@@312|) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view |s#0@@312|)) |ref#0@@27|))))) :qid |BlockInterfaceidfyBetreeBlockInterface.52:17| :skolemid |4485| :pattern ( (|BetreeBlockInterface.__default.Read#requires| |s#0@@312| |ref#0@@27|)) )))
(assert  (=> true (forall ((|s#0@@313| T@U) (|ref#0@@28| T@U) ) (!  (=> (and (and (= (type |s#0@@313|) DatatypeTypeType) (= (type |ref#0@@28|) BoxType)) (or (|BetreeBlockInterface.__default.Read#canCall| |s#0@@313| |ref#0@@28|) (and (and ($Is |s#0@@313| Tclass.BetreeBlockInterface.Variables) ($IsBox |ref#0@@28| Tclass.ReferenceType.Reference)) (and (BetreeBlockInterface.__default.LiveDataAvailable |s#0@@313|) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view |s#0@@313|)) |ref#0@@28|)))))) (and (BetreeBlockInterface.Variables.Variables_q |s#0@@313|) (= (BetreeBlockInterface.__default.Read |s#0@@313| |ref#0@@28|) ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeBlockInterface.Variables.view |s#0@@313|)) |ref#0@@28|))))) :qid |BlockInterfaceidfyBetreeBlockInterface.52:17| :skolemid |4486| :pattern ( (BetreeBlockInterface.__default.Read |s#0@@313| |ref#0@@28|)) ))))
(assert  (=> true (forall ((|s#0@@314| T@U) (|ref#0@@29| T@U) ) (!  (=> (and (and (= (type |s#0@@314|) DatatypeTypeType) (= (type |ref#0@@29|) BoxType)) (or (|BetreeBlockInterface.__default.Read#canCall| (Lit |s#0@@314|) |ref#0@@29|) (and (and ($Is |s#0@@314| Tclass.BetreeBlockInterface.Variables) ($IsBox |ref#0@@29| Tclass.ReferenceType.Reference)) (and (U_2_bool (Lit (bool_2_U (BetreeBlockInterface.__default.LiveDataAvailable (Lit |s#0@@314|))))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view (Lit |s#0@@314|))) |ref#0@@29|)))))) (and (BetreeBlockInterface.Variables.Variables_q (Lit |s#0@@314|)) (= (BetreeBlockInterface.__default.Read (Lit |s#0@@314|) |ref#0@@29|) ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@314|)))) |ref#0@@29|))))) :qid |BlockInterfaceidfyBetreeBlockInterface.52:17| :weight 3 :skolemid |4487| :pattern ( (BetreeBlockInterface.__default.Read (Lit |s#0@@314|) |ref#0@@29|)) ))))
(assert  (=> true (forall ((|s#0@@315| T@U) (|ref#0@@30| T@U) ) (!  (=> (and (and (= (type |s#0@@315|) DatatypeTypeType) (= (type |ref#0@@30|) BoxType)) (or (|BetreeBlockInterface.__default.Read#canCall| (Lit |s#0@@315|) (Lit |ref#0@@30|)) (and (and ($Is |s#0@@315| Tclass.BetreeBlockInterface.Variables) ($IsBox |ref#0@@30| Tclass.ReferenceType.Reference)) (and (U_2_bool (Lit (bool_2_U (BetreeBlockInterface.__default.LiveDataAvailable (Lit |s#0@@315|))))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view (Lit |s#0@@315|))) |ref#0@@30|)))))) (and (BetreeBlockInterface.Variables.Variables_q (Lit |s#0@@315|)) (= (BetreeBlockInterface.__default.Read (Lit |s#0@@315|) (Lit |ref#0@@30|)) ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@315|)))) (Lit |ref#0@@30|)))))) :qid |BlockInterfaceidfyBetreeBlockInterface.52:17| :weight 3 :skolemid |4488| :pattern ( (BetreeBlockInterface.__default.Read (Lit |s#0@@315|) (Lit |ref#0@@30|))) ))))
(assert  (=> true (forall ((|s#0@@316| T@U) ) (!  (=> (and (= (type |s#0@@316|) DatatypeTypeType) (or (|BetreeBlockInterface.__default.Init#canCall| |s#0@@316|) ($Is |s#0@@316| Tclass.BetreeBlockInterface.Variables))) true) :qid |BlockInterfaceidfyBetreeBlockInterface.59:18| :skolemid |4489| :pattern ( (BetreeBlockInterface.__default.Init |s#0@@316|)) ))))
(assert (forall ((|s#0@@317| T@U) ) (!  (=> (and (= (type |s#0@@317|) DatatypeTypeType) ($Is |s#0@@317| Tclass.BetreeBlockInterface.Variables)) (= (|BetreeBlockInterface.__default.Init#requires| |s#0@@317|) true)) :qid |BlockInterfaceidfyBetreeBlockInterface.59:18| :skolemid |4490| :pattern ( (|BetreeBlockInterface.__default.Init#requires| |s#0@@317|)) )))
(assert  (=> true (forall ((|s#0@@318| T@U) ) (!  (=> (and (= (type |s#0@@318|) DatatypeTypeType) (or (|BetreeBlockInterface.__default.Init#canCall| |s#0@@318|) ($Is |s#0@@318| Tclass.BetreeBlockInterface.Variables))) (and (and (and (BetreeBlockInterface.Variables.Variables_q |s#0@@318|) |BetreeGraph.__default.Root#canCall|) (=> (|ISet#Equal| (|IMap#Domain| (BetreeBlockInterface.Variables.view |s#0@@318|)) (|ISet#UnionOne| (|ISet#Empty| BoxType) (Lit BetreeGraph.__default.Root))) (and (and (BetreeBlockInterface.Variables.Variables_q |s#0@@318|) |BetreeGraph.__default.Root#canCall|) (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeBlockInterface.Variables.view |s#0@@318|)) (Lit BetreeGraph.__default.Root))))))) (= (BetreeBlockInterface.__default.Init |s#0@@318|)  (and (|ISet#Equal| (|IMap#Domain| (BetreeBlockInterface.Variables.view |s#0@@318|)) (|ISet#UnionOne| (|ISet#Empty| BoxType) (Lit BetreeGraph.__default.Root))) (|ISet#Equal| (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeBlockInterface.Variables.view |s#0@@318|)) (Lit BetreeGraph.__default.Root)))) (|ISet#Empty| BoxType)))))) :qid |BlockInterfaceidfyBetreeBlockInterface.59:18| :skolemid |4491| :pattern ( (BetreeBlockInterface.__default.Init |s#0@@318|)) ))))
(assert  (=> true (forall ((|s#0@@319| T@U) ) (!  (=> (and (= (type |s#0@@319|) DatatypeTypeType) (or (|BetreeBlockInterface.__default.Init#canCall| (Lit |s#0@@319|)) ($Is |s#0@@319| Tclass.BetreeBlockInterface.Variables))) (and (and (and (BetreeBlockInterface.Variables.Variables_q (Lit |s#0@@319|)) |BetreeGraph.__default.Root#canCall|) (=> (|ISet#Equal| (|IMap#Domain| (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@319|)))) (|ISet#UnionOne| (|ISet#Empty| BoxType) (Lit BetreeGraph.__default.Root))) (and (and (BetreeBlockInterface.Variables.Variables_q (Lit |s#0@@319|)) |BetreeGraph.__default.Root#canCall|) (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@319|)))) (Lit BetreeGraph.__default.Root))))))) (= (BetreeBlockInterface.__default.Init (Lit |s#0@@319|))  (and (|ISet#Equal| (|IMap#Domain| (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@319|)))) (|ISet#UnionOne| (|ISet#Empty| BoxType) (Lit BetreeGraph.__default.Root))) (|ISet#Equal| (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@319|)))) (Lit BetreeGraph.__default.Root)))) (|ISet#Empty| BoxType)))))) :qid |BlockInterfaceidfyBetreeBlockInterface.59:18| :weight 3 :skolemid |4492| :pattern ( (BetreeBlockInterface.__default.Init (Lit |s#0@@319|))) ))))
(assert  (=> true (forall ((|s#0@@320| T@U) (|s'#0@@60| T@U) (|block#0| T@U) (|ref#0@@31| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@320|) DatatypeTypeType) (= (type |s'#0@@60|) DatatypeTypeType)) (= (type |block#0|) DatatypeTypeType)) (= (type |ref#0@@31|) BoxType)) (or (|BetreeBlockInterface.__default.Alloc#canCall| |s#0@@320| |s'#0@@60| |block#0| |ref#0@@31|) (and (and (and ($Is |s#0@@320| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@60| Tclass.BetreeBlockInterface.Variables)) ($Is |block#0| Tclass.BetreeGraph.Node)) ($IsBox |ref#0@@31| Tclass.ReferenceType.Reference)))) true) :qid |BlockInterfaceidfyBetreeBlockInterface.64:19| :skolemid |4493| :pattern ( (BetreeBlockInterface.__default.Alloc |s#0@@320| |s'#0@@60| |block#0| |ref#0@@31|)) ))))
(assert (forall ((|s#0@@321| T@U) (|s'#0@@61| T@U) (|block#0@@0| T@U) (|ref#0@@32| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@321|) DatatypeTypeType) (= (type |s'#0@@61|) DatatypeTypeType)) (= (type |block#0@@0|) DatatypeTypeType)) (= (type |ref#0@@32|) BoxType)) (and (and (and ($Is |s#0@@321| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@61| Tclass.BetreeBlockInterface.Variables)) ($Is |block#0@@0| Tclass.BetreeGraph.Node)) ($IsBox |ref#0@@32| Tclass.ReferenceType.Reference))) (= (|BetreeBlockInterface.__default.Alloc#requires| |s#0@@321| |s'#0@@61| |block#0@@0| |ref#0@@32|) true)) :qid |BlockInterfaceidfyBetreeBlockInterface.64:19| :skolemid |4494| :pattern ( (|BetreeBlockInterface.__default.Alloc#requires| |s#0@@321| |s'#0@@61| |block#0@@0| |ref#0@@32|)) )))
(assert  (=> true (forall ((|s#0@@322| T@U) (|s'#0@@62| T@U) (|block#0@@1| T@U) (|ref#0@@33| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@322|) DatatypeTypeType) (= (type |s'#0@@62|) DatatypeTypeType)) (= (type |block#0@@1|) DatatypeTypeType)) (= (type |ref#0@@33|) BoxType)) (or (|BetreeBlockInterface.__default.Alloc#canCall| |s#0@@322| |s'#0@@62| |block#0@@1| |ref#0@@33|) (and (and (and ($Is |s#0@@322| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@62| Tclass.BetreeBlockInterface.Variables)) ($Is |block#0@@1| Tclass.BetreeGraph.Node)) ($IsBox |ref#0@@33| Tclass.ReferenceType.Reference)))) (and (and (and (|BetreeGraph.__default.Successors#canCall| |block#0@@1|) (BetreeBlockInterface.Variables.Variables_q |s#0@@322|)) (=> (|ISet#Subset| (BetreeGraph.__default.Successors |block#0@@1|) (|IMap#Domain| (BetreeBlockInterface.Variables.view |s#0@@322|))) (and (BetreeBlockInterface.Variables.Variables_q |s#0@@322|) (=> (not (U_2_bool (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view |s#0@@322|)) |ref#0@@33|))) (and (BetreeBlockInterface.Variables.Variables_q |s'#0@@62|) (BetreeBlockInterface.Variables.Variables_q |s#0@@322|)))))) (= (BetreeBlockInterface.__default.Alloc |s#0@@322| |s'#0@@62| |block#0@@1| |ref#0@@33|)  (and (and (|ISet#Subset| (BetreeGraph.__default.Successors |block#0@@1|) (|IMap#Domain| (BetreeBlockInterface.Variables.view |s#0@@322|))) (not (U_2_bool (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view |s#0@@322|)) |ref#0@@33|)))) (|IMap#Equal| (BetreeBlockInterface.Variables.view |s'#0@@62|) (|IMap#Build| (BetreeBlockInterface.Variables.view |s#0@@322|) |ref#0@@33| ($Box |block#0@@1|))))))) :qid |BlockInterfaceidfyBetreeBlockInterface.64:19| :skolemid |4495| :pattern ( (BetreeBlockInterface.__default.Alloc |s#0@@322| |s'#0@@62| |block#0@@1| |ref#0@@33|)) ))))
(assert  (=> true (forall ((|s#0@@323| T@U) (|s'#0@@63| T@U) (|block#0@@2| T@U) (|ref#0@@34| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@323|) DatatypeTypeType) (= (type |s'#0@@63|) DatatypeTypeType)) (= (type |block#0@@2|) DatatypeTypeType)) (= (type |ref#0@@34|) BoxType)) (or (|BetreeBlockInterface.__default.Alloc#canCall| (Lit |s#0@@323|) (Lit |s'#0@@63|) (Lit |block#0@@2|) |ref#0@@34|) (and (and (and ($Is |s#0@@323| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@63| Tclass.BetreeBlockInterface.Variables)) ($Is |block#0@@2| Tclass.BetreeGraph.Node)) ($IsBox |ref#0@@34| Tclass.ReferenceType.Reference)))) (and (and (and (|BetreeGraph.__default.Successors#canCall| (Lit |block#0@@2|)) (BetreeBlockInterface.Variables.Variables_q (Lit |s#0@@323|))) (=> (|ISet#Subset| (BetreeGraph.__default.Successors (Lit |block#0@@2|)) (|IMap#Domain| (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@323|))))) (and (BetreeBlockInterface.Variables.Variables_q (Lit |s#0@@323|)) (=> (not (U_2_bool (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view (Lit |s#0@@323|))) |ref#0@@34|))) (and (BetreeBlockInterface.Variables.Variables_q (Lit |s'#0@@63|)) (BetreeBlockInterface.Variables.Variables_q (Lit |s#0@@323|))))))) (= (BetreeBlockInterface.__default.Alloc (Lit |s#0@@323|) (Lit |s'#0@@63|) (Lit |block#0@@2|) |ref#0@@34|)  (and (and (|ISet#Subset| (BetreeGraph.__default.Successors (Lit |block#0@@2|)) (|IMap#Domain| (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@323|))))) (not (U_2_bool (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view (Lit |s#0@@323|))) |ref#0@@34|)))) (|IMap#Equal| (BetreeBlockInterface.Variables.view (Lit |s'#0@@63|)) (|IMap#Build| (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@323|))) |ref#0@@34| ($Box (Lit |block#0@@2|)))))))) :qid |BlockInterfaceidfyBetreeBlockInterface.64:19| :weight 3 :skolemid |4496| :pattern ( (BetreeBlockInterface.__default.Alloc (Lit |s#0@@323|) (Lit |s'#0@@63|) (Lit |block#0@@2|) |ref#0@@34|)) ))))
(assert  (=> true (forall ((|s#0@@324| T@U) (|s'#0@@64| T@U) (|block#0@@3| T@U) (|ref#0@@35| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@324|) DatatypeTypeType) (= (type |s'#0@@64|) DatatypeTypeType)) (= (type |block#0@@3|) DatatypeTypeType)) (= (type |ref#0@@35|) BoxType)) (or (|BetreeBlockInterface.__default.Alloc#canCall| (Lit |s#0@@324|) (Lit |s'#0@@64|) (Lit |block#0@@3|) (Lit |ref#0@@35|)) (and (and (and ($Is |s#0@@324| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@64| Tclass.BetreeBlockInterface.Variables)) ($Is |block#0@@3| Tclass.BetreeGraph.Node)) ($IsBox |ref#0@@35| Tclass.ReferenceType.Reference)))) (and (and (and (|BetreeGraph.__default.Successors#canCall| (Lit |block#0@@3|)) (BetreeBlockInterface.Variables.Variables_q (Lit |s#0@@324|))) (=> (|ISet#Subset| (BetreeGraph.__default.Successors (Lit |block#0@@3|)) (|IMap#Domain| (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@324|))))) (and (BetreeBlockInterface.Variables.Variables_q (Lit |s#0@@324|)) (=> (not (U_2_bool (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view (Lit |s#0@@324|))) |ref#0@@35|))) (and (BetreeBlockInterface.Variables.Variables_q (Lit |s'#0@@64|)) (BetreeBlockInterface.Variables.Variables_q (Lit |s#0@@324|))))))) (= (BetreeBlockInterface.__default.Alloc (Lit |s#0@@324|) (Lit |s'#0@@64|) (Lit |block#0@@3|) (Lit |ref#0@@35|))  (and (and (|ISet#Subset| (BetreeGraph.__default.Successors (Lit |block#0@@3|)) (|IMap#Domain| (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@324|))))) (not (U_2_bool (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view (Lit |s#0@@324|))) |ref#0@@35|)))) (|IMap#Equal| (BetreeBlockInterface.Variables.view (Lit |s'#0@@64|)) (|IMap#Build| (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@324|))) (Lit |ref#0@@35|) ($Box (Lit |block#0@@3|)))))))) :qid |BlockInterfaceidfyBetreeBlockInterface.64:19| :weight 3 :skolemid |4497| :pattern ( (BetreeBlockInterface.__default.Alloc (Lit |s#0@@324|) (Lit |s'#0@@64|) (Lit |block#0@@3|) (Lit |ref#0@@35|))) ))))
(assert  (=> true (forall ((|s#0@@325| T@U) (|s'#0@@65| T@U) (|ref#0@@36| T@U) (|block#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@325|) DatatypeTypeType) (= (type |s'#0@@65|) DatatypeTypeType)) (= (type |ref#0@@36|) BoxType)) (= (type |block#0@@4|) DatatypeTypeType)) (or (|BetreeBlockInterface.__default.Write#canCall| |s#0@@325| |s'#0@@65| |ref#0@@36| |block#0@@4|) (and (and (and ($Is |s#0@@325| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@65| Tclass.BetreeBlockInterface.Variables)) ($IsBox |ref#0@@36| Tclass.ReferenceType.Reference)) ($Is |block#0@@4| Tclass.BetreeGraph.Node)))) true) :qid |BlockInterfaceidfyBetreeBlockInterface.71:19| :skolemid |4498| :pattern ( (BetreeBlockInterface.__default.Write |s#0@@325| |s'#0@@65| |ref#0@@36| |block#0@@4|)) ))))
(assert (forall ((|s#0@@326| T@U) (|s'#0@@66| T@U) (|ref#0@@37| T@U) (|block#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@326|) DatatypeTypeType) (= (type |s'#0@@66|) DatatypeTypeType)) (= (type |ref#0@@37|) BoxType)) (= (type |block#0@@5|) DatatypeTypeType)) (and (and (and ($Is |s#0@@326| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@66| Tclass.BetreeBlockInterface.Variables)) ($IsBox |ref#0@@37| Tclass.ReferenceType.Reference)) ($Is |block#0@@5| Tclass.BetreeGraph.Node))) (= (|BetreeBlockInterface.__default.Write#requires| |s#0@@326| |s'#0@@66| |ref#0@@37| |block#0@@5|) true)) :qid |BlockInterfaceidfyBetreeBlockInterface.71:19| :skolemid |4499| :pattern ( (|BetreeBlockInterface.__default.Write#requires| |s#0@@326| |s'#0@@66| |ref#0@@37| |block#0@@5|)) )))
(assert  (=> true (forall ((|s#0@@327| T@U) (|s'#0@@67| T@U) (|ref#0@@38| T@U) (|block#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@327|) DatatypeTypeType) (= (type |s'#0@@67|) DatatypeTypeType)) (= (type |ref#0@@38|) BoxType)) (= (type |block#0@@6|) DatatypeTypeType)) (or (|BetreeBlockInterface.__default.Write#canCall| |s#0@@327| |s'#0@@67| |ref#0@@38| |block#0@@6|) (and (and (and ($Is |s#0@@327| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@67| Tclass.BetreeBlockInterface.Variables)) ($IsBox |ref#0@@38| Tclass.ReferenceType.Reference)) ($Is |block#0@@6| Tclass.BetreeGraph.Node)))) (and (and (and (|BetreeGraph.__default.Successors#canCall| |block#0@@6|) (BetreeBlockInterface.Variables.Variables_q |s#0@@327|)) (=> (|ISet#Subset| (BetreeGraph.__default.Successors |block#0@@6|) (|IMap#Domain| (BetreeBlockInterface.Variables.view |s#0@@327|))) (and (BetreeBlockInterface.Variables.Variables_q |s#0@@327|) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view |s#0@@327|)) |ref#0@@38|)) (and (BetreeBlockInterface.Variables.Variables_q |s'#0@@67|) (BetreeBlockInterface.Variables.Variables_q |s#0@@327|)))))) (= (BetreeBlockInterface.__default.Write |s#0@@327| |s'#0@@67| |ref#0@@38| |block#0@@6|)  (and (and (|ISet#Subset| (BetreeGraph.__default.Successors |block#0@@6|) (|IMap#Domain| (BetreeBlockInterface.Variables.view |s#0@@327|))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view |s#0@@327|)) |ref#0@@38|))) (|IMap#Equal| (BetreeBlockInterface.Variables.view |s'#0@@67|) (|IMap#Build| (BetreeBlockInterface.Variables.view |s#0@@327|) |ref#0@@38| ($Box |block#0@@6|))))))) :qid |BlockInterfaceidfyBetreeBlockInterface.71:19| :skolemid |4500| :pattern ( (BetreeBlockInterface.__default.Write |s#0@@327| |s'#0@@67| |ref#0@@38| |block#0@@6|)) ))))
(assert  (=> true (forall ((|s#0@@328| T@U) (|s'#0@@68| T@U) (|ref#0@@39| T@U) (|block#0@@7| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@328|) DatatypeTypeType) (= (type |s'#0@@68|) DatatypeTypeType)) (= (type |ref#0@@39|) BoxType)) (= (type |block#0@@7|) DatatypeTypeType)) (or (|BetreeBlockInterface.__default.Write#canCall| (Lit |s#0@@328|) (Lit |s'#0@@68|) |ref#0@@39| (Lit |block#0@@7|)) (and (and (and ($Is |s#0@@328| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@68| Tclass.BetreeBlockInterface.Variables)) ($IsBox |ref#0@@39| Tclass.ReferenceType.Reference)) ($Is |block#0@@7| Tclass.BetreeGraph.Node)))) (and (and (and (|BetreeGraph.__default.Successors#canCall| (Lit |block#0@@7|)) (BetreeBlockInterface.Variables.Variables_q (Lit |s#0@@328|))) (=> (|ISet#Subset| (BetreeGraph.__default.Successors (Lit |block#0@@7|)) (|IMap#Domain| (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@328|))))) (and (BetreeBlockInterface.Variables.Variables_q (Lit |s#0@@328|)) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view (Lit |s#0@@328|))) |ref#0@@39|)) (and (BetreeBlockInterface.Variables.Variables_q (Lit |s'#0@@68|)) (BetreeBlockInterface.Variables.Variables_q (Lit |s#0@@328|))))))) (= (BetreeBlockInterface.__default.Write (Lit |s#0@@328|) (Lit |s'#0@@68|) |ref#0@@39| (Lit |block#0@@7|))  (and (and (|ISet#Subset| (BetreeGraph.__default.Successors (Lit |block#0@@7|)) (|IMap#Domain| (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@328|))))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view (Lit |s#0@@328|))) |ref#0@@39|))) (|IMap#Equal| (BetreeBlockInterface.Variables.view (Lit |s'#0@@68|)) (|IMap#Build| (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@328|))) |ref#0@@39| ($Box (Lit |block#0@@7|)))))))) :qid |BlockInterfaceidfyBetreeBlockInterface.71:19| :weight 3 :skolemid |4501| :pattern ( (BetreeBlockInterface.__default.Write (Lit |s#0@@328|) (Lit |s'#0@@68|) |ref#0@@39| (Lit |block#0@@7|))) ))))
(assert  (=> true (forall ((|s#0@@329| T@U) (|s'#0@@69| T@U) (|ref#0@@40| T@U) (|block#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@329|) DatatypeTypeType) (= (type |s'#0@@69|) DatatypeTypeType)) (= (type |ref#0@@40|) BoxType)) (= (type |block#0@@8|) DatatypeTypeType)) (or (|BetreeBlockInterface.__default.Write#canCall| (Lit |s#0@@329|) (Lit |s'#0@@69|) (Lit |ref#0@@40|) (Lit |block#0@@8|)) (and (and (and ($Is |s#0@@329| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@69| Tclass.BetreeBlockInterface.Variables)) ($IsBox |ref#0@@40| Tclass.ReferenceType.Reference)) ($Is |block#0@@8| Tclass.BetreeGraph.Node)))) (and (and (and (|BetreeGraph.__default.Successors#canCall| (Lit |block#0@@8|)) (BetreeBlockInterface.Variables.Variables_q (Lit |s#0@@329|))) (=> (|ISet#Subset| (BetreeGraph.__default.Successors (Lit |block#0@@8|)) (|IMap#Domain| (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@329|))))) (and (BetreeBlockInterface.Variables.Variables_q (Lit |s#0@@329|)) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view (Lit |s#0@@329|))) |ref#0@@40|)) (and (BetreeBlockInterface.Variables.Variables_q (Lit |s'#0@@69|)) (BetreeBlockInterface.Variables.Variables_q (Lit |s#0@@329|))))))) (= (BetreeBlockInterface.__default.Write (Lit |s#0@@329|) (Lit |s'#0@@69|) (Lit |ref#0@@40|) (Lit |block#0@@8|))  (and (and (|ISet#Subset| (BetreeGraph.__default.Successors (Lit |block#0@@8|)) (|IMap#Domain| (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@329|))))) (U_2_bool (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view (Lit |s#0@@329|))) |ref#0@@40|))) (|IMap#Equal| (BetreeBlockInterface.Variables.view (Lit |s'#0@@69|)) (|IMap#Build| (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@329|))) (Lit |ref#0@@40|) ($Box (Lit |block#0@@8|)))))))) :qid |BlockInterfaceidfyBetreeBlockInterface.71:19| :weight 3 :skolemid |4502| :pattern ( (BetreeBlockInterface.__default.Write (Lit |s#0@@329|) (Lit |s'#0@@69|) (Lit |ref#0@@40|) (Lit |block#0@@8|))) ))))
(assert  (=> true (forall ((|s#0@@330| T@U) (|op#0| T@U) ) (!  (=> (and (and (= (type |s#0@@330|) DatatypeTypeType) (= (type |op#0|) DatatypeTypeType)) (or (|BetreeBlockInterface.__default.ReadStep#canCall| |s#0@@330| |op#0|) (and ($Is |s#0@@330| Tclass.BetreeBlockInterface.Variables) ($Is |op#0| Tclass.BetreeGraph.ReadOp)))) true) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.34:22| :skolemid |4503| :pattern ( (BetreeBlockInterface.__default.ReadStep |s#0@@330| |op#0|)) ))))
(assert (forall ((|s#0@@331| T@U) (|op#0@@0| T@U) ) (!  (=> (and (and (= (type |s#0@@331|) DatatypeTypeType) (= (type |op#0@@0|) DatatypeTypeType)) (and ($Is |s#0@@331| Tclass.BetreeBlockInterface.Variables) ($Is |op#0@@0| Tclass.BetreeGraph.ReadOp))) (= (|BetreeBlockInterface.__default.ReadStep#requires| |s#0@@331| |op#0@@0|) true)) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.34:22| :skolemid |4504| :pattern ( (|BetreeBlockInterface.__default.ReadStep#requires| |s#0@@331| |op#0@@0|)) )))
(assert  (=> true (forall ((|s#0@@332| T@U) (|op#0@@1| T@U) ) (!  (=> (and (and (= (type |s#0@@332|) DatatypeTypeType) (= (type |op#0@@1|) DatatypeTypeType)) (or (|BetreeBlockInterface.__default.ReadStep#canCall| |s#0@@332| |op#0@@1|) (and ($Is |s#0@@332| Tclass.BetreeBlockInterface.Variables) ($Is |op#0@@1| Tclass.BetreeGraph.ReadOp)))) (and (and (and (and (BetreeBlockInterface.Variables.Variables_q |s#0@@332|) (BetreeGraph.ReadOp.ReadOp_q |op#0@@1|)) (BetreeGraph.ReadOp.ReadOp_q |op#0@@1|)) (|Maps.__default.IMapsTo#canCall| Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node (BetreeBlockInterface.Variables.view |s#0@@332|) (BetreeGraph.ReadOp.ref |op#0@@1|) ($Box (BetreeGraph.ReadOp.node |op#0@@1|)))) (= (BetreeBlockInterface.__default.ReadStep |s#0@@332| |op#0@@1|) (Maps.__default.IMapsTo Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node (BetreeBlockInterface.Variables.view |s#0@@332|) (BetreeGraph.ReadOp.ref |op#0@@1|) ($Box (BetreeGraph.ReadOp.node |op#0@@1|)))))) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.34:22| :skolemid |4505| :pattern ( (BetreeBlockInterface.__default.ReadStep |s#0@@332| |op#0@@1|)) ))))
(assert  (=> true (forall ((|s#0@@333| T@U) (|op#0@@2| T@U) ) (!  (=> (and (and (= (type |s#0@@333|) DatatypeTypeType) (= (type |op#0@@2|) DatatypeTypeType)) (or (|BetreeBlockInterface.__default.ReadStep#canCall| (Lit |s#0@@333|) (Lit |op#0@@2|)) (and ($Is |s#0@@333| Tclass.BetreeBlockInterface.Variables) ($Is |op#0@@2| Tclass.BetreeGraph.ReadOp)))) (and (and (and (and (BetreeBlockInterface.Variables.Variables_q (Lit |s#0@@333|)) (BetreeGraph.ReadOp.ReadOp_q (Lit |op#0@@2|))) (BetreeGraph.ReadOp.ReadOp_q (Lit |op#0@@2|))) (|Maps.__default.IMapsTo#canCall| Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@333|))) (Lit (BetreeGraph.ReadOp.ref (Lit |op#0@@2|))) ($Box (Lit (BetreeGraph.ReadOp.node (Lit |op#0@@2|)))))) (= (BetreeBlockInterface.__default.ReadStep (Lit |s#0@@333|) (Lit |op#0@@2|)) (U_2_bool (Lit (bool_2_U (Maps.__default.IMapsTo Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@333|))) (Lit (BetreeGraph.ReadOp.ref (Lit |op#0@@2|))) ($Box (Lit (BetreeGraph.ReadOp.node (Lit |op#0@@2|))))))))))) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.34:22| :weight 3 :skolemid |4506| :pattern ( (BetreeBlockInterface.__default.ReadStep (Lit |s#0@@333|) (Lit |op#0@@2|))) ))))
(assert  (=> true (forall ((|s#0@@334| T@U) (|s'#0@@70| T@U) (|op#0@@3| T@U) ) (!  (=> (and (and (and (= (type |s#0@@334|) DatatypeTypeType) (= (type |s'#0@@70|) DatatypeTypeType)) (= (type |op#0@@3|) DatatypeTypeType)) (or (|BetreeBlockInterface.__default.OpStep#canCall| |s#0@@334| |s'#0@@70| |op#0@@3|) (and (and ($Is |s#0@@334| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@70| Tclass.BetreeBlockInterface.Variables)) ($Is |op#0@@3| Tclass.BetreeGraph.Op)))) true) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.35:20| :skolemid |4507| :pattern ( (BetreeBlockInterface.__default.OpStep |s#0@@334| |s'#0@@70| |op#0@@3|)) ))))
(assert (forall ((|s#0@@335| T@U) (|s'#0@@71| T@U) (|op#0@@4| T@U) ) (!  (=> (and (and (and (= (type |s#0@@335|) DatatypeTypeType) (= (type |s'#0@@71|) DatatypeTypeType)) (= (type |op#0@@4|) DatatypeTypeType)) (and (and ($Is |s#0@@335| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@71| Tclass.BetreeBlockInterface.Variables)) ($Is |op#0@@4| Tclass.BetreeGraph.Op))) (= (|BetreeBlockInterface.__default.OpStep#requires| |s#0@@335| |s'#0@@71| |op#0@@4|) true)) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.35:20| :skolemid |4508| :pattern ( (|BetreeBlockInterface.__default.OpStep#requires| |s#0@@335| |s'#0@@71| |op#0@@4|)) )))
(assert  (=> true (forall ((|s#0@@336| T@U) (|s'#0@@72| T@U) (|op#0@@5| T@U) ) (!  (=> (and (and (and (= (type |s#0@@336|) DatatypeTypeType) (= (type |s'#0@@72|) DatatypeTypeType)) (= (type |op#0@@5|) DatatypeTypeType)) (or (|BetreeBlockInterface.__default.OpStep#canCall| |s#0@@336| |s'#0@@72| |op#0@@5|) (and (and ($Is |s#0@@336| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@72| Tclass.BetreeBlockInterface.Variables)) ($Is |op#0@@5| Tclass.BetreeGraph.Op)))) (and (and (=> (BetreeGraph.Op.AllocOp_q |op#0@@5|) (and (or (BetreeGraph.Op.AllocOp_q |op#0@@5|) (BetreeGraph.Op.WriteOp_q |op#0@@5|)) (let ((|block#2| (BetreeGraph.Op.node |op#0@@5|))) (and (or (BetreeGraph.Op.AllocOp_q |op#0@@5|) (BetreeGraph.Op.WriteOp_q |op#0@@5|)) (let ((|ref#2@@5| (BetreeGraph.Op.ref |op#0@@5|))) (|BetreeBlockInterface.__default.Alloc#canCall| |s#0@@336| |s'#0@@72| |block#2| |ref#2@@5|)))))) (=> (not (BetreeGraph.Op.AllocOp_q |op#0@@5|)) (and (or (BetreeGraph.Op.AllocOp_q |op#0@@5|) (BetreeGraph.Op.WriteOp_q |op#0@@5|)) (let ((|block#3| (BetreeGraph.Op.node |op#0@@5|))) (and (or (BetreeGraph.Op.AllocOp_q |op#0@@5|) (BetreeGraph.Op.WriteOp_q |op#0@@5|)) (let ((|ref#3@@5| (BetreeGraph.Op.ref |op#0@@5|))) (|BetreeBlockInterface.__default.Write#canCall| |s#0@@336| |s'#0@@72| |ref#3@@5| |block#3|))))))) (= (BetreeBlockInterface.__default.OpStep |s#0@@336| |s'#0@@72| |op#0@@5|) (ite (BetreeGraph.Op.AllocOp_q |op#0@@5|) (let ((|block#0@@9| (BetreeGraph.Op.node |op#0@@5|))) (let ((|ref#0@@41| (BetreeGraph.Op.ref |op#0@@5|))) (BetreeBlockInterface.__default.Alloc |s#0@@336| |s'#0@@72| |block#0@@9| |ref#0@@41|))) (let ((|block#1| (BetreeGraph.Op.node |op#0@@5|))) (let ((|ref#1@@13| (BetreeGraph.Op.ref |op#0@@5|))) (BetreeBlockInterface.__default.Write |s#0@@336| |s'#0@@72| |ref#1@@13| |block#1|))))))) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.35:20| :skolemid |4509| :pattern ( (BetreeBlockInterface.__default.OpStep |s#0@@336| |s'#0@@72| |op#0@@5|)) ))))
(assert  (=> true (forall ((|s#0@@337| T@U) (|s'#0@@73| T@U) (|op#0@@6| T@U) ) (!  (=> (and (and (and (= (type |s#0@@337|) DatatypeTypeType) (= (type |s'#0@@73|) DatatypeTypeType)) (= (type |op#0@@6|) DatatypeTypeType)) (or (|BetreeBlockInterface.__default.OpStep#canCall| (Lit |s#0@@337|) (Lit |s'#0@@73|) (Lit |op#0@@6|)) (and (and ($Is |s#0@@337| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@73| Tclass.BetreeBlockInterface.Variables)) ($Is |op#0@@6| Tclass.BetreeGraph.Op)))) (and (and (=> (U_2_bool (Lit (bool_2_U (BetreeGraph.Op.AllocOp_q (Lit |op#0@@6|))))) (and (or (BetreeGraph.Op.AllocOp_q (Lit |op#0@@6|)) (BetreeGraph.Op.WriteOp_q (Lit |op#0@@6|))) (let ((|block#6| (Lit (BetreeGraph.Op.node (Lit |op#0@@6|))))) (and (or (BetreeGraph.Op.AllocOp_q (Lit |op#0@@6|)) (BetreeGraph.Op.WriteOp_q (Lit |op#0@@6|))) (let ((|ref#6@@2| (Lit (BetreeGraph.Op.ref (Lit |op#0@@6|))))) (|BetreeBlockInterface.__default.Alloc#canCall| (Lit |s#0@@337|) (Lit |s'#0@@73|) |block#6| |ref#6@@2|)))))) (=> (not (U_2_bool (Lit (bool_2_U (BetreeGraph.Op.AllocOp_q (Lit |op#0@@6|)))))) (and (or (BetreeGraph.Op.AllocOp_q (Lit |op#0@@6|)) (BetreeGraph.Op.WriteOp_q (Lit |op#0@@6|))) (let ((|block#7| (Lit (BetreeGraph.Op.node (Lit |op#0@@6|))))) (and (or (BetreeGraph.Op.AllocOp_q (Lit |op#0@@6|)) (BetreeGraph.Op.WriteOp_q (Lit |op#0@@6|))) (let ((|ref#7@@2| (Lit (BetreeGraph.Op.ref (Lit |op#0@@6|))))) (|BetreeBlockInterface.__default.Write#canCall| (Lit |s#0@@337|) (Lit |s'#0@@73|) |ref#7@@2| |block#7|))))))) (= (BetreeBlockInterface.__default.OpStep (Lit |s#0@@337|) (Lit |s'#0@@73|) (Lit |op#0@@6|)) (ite (BetreeGraph.Op.AllocOp_q (Lit |op#0@@6|)) (U_2_bool (let ((|block#4| (Lit (BetreeGraph.Op.node (Lit |op#0@@6|))))) (let ((|ref#4@@2| (Lit (BetreeGraph.Op.ref (Lit |op#0@@6|))))) (Lit (bool_2_U (BetreeBlockInterface.__default.Alloc (Lit |s#0@@337|) (Lit |s'#0@@73|) |block#4| |ref#4@@2|)))))) (U_2_bool (let ((|block#5| (Lit (BetreeGraph.Op.node (Lit |op#0@@6|))))) (let ((|ref#5@@1| (Lit (BetreeGraph.Op.ref (Lit |op#0@@6|))))) (Lit (bool_2_U (BetreeBlockInterface.__default.Write (Lit |s#0@@337|) (Lit |s'#0@@73|) |ref#5@@1| |block#5|)))))))))) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.35:20| :weight 3 :skolemid |4510| :pattern ( (BetreeBlockInterface.__default.OpStep (Lit |s#0@@337|) (Lit |s'#0@@73|) (Lit |op#0@@6|))) ))))
(assert (forall ((arg0@@716 T@U) (arg1@@335 T@U) ) (! (= (type (BetreeBlockInterface.__default.Predecessors arg0@@716 arg1@@335)) (MapType0Type BoxType boolType)) :qid |funType:BetreeBlockInterface.__default.Predecessors| :pattern ( (BetreeBlockInterface.__default.Predecessors arg0@@716 arg1@@335)) )))
(assert  (=> true (forall ((|view#0@@3| T@U) (|ref#0@@42| T@U) ) (!  (=> (and (and (= (type |view#0@@3|) (IMapType BoxType BoxType)) (= (type |ref#0@@42|) BoxType)) (or (|BetreeBlockInterface.__default.Predecessors#canCall| |view#0@@3| |ref#0@@42|) (and ($Is |view#0@@3| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($IsBox |ref#0@@42| Tclass.ReferenceType.Reference)))) ($Is (BetreeBlockInterface.__default.Predecessors |view#0@@3| |ref#0@@42|) (TISet Tclass.ReferenceType.Reference))) :qid |BlockInterfaceidfyBetreeBlockInterface.91:25| :skolemid |4511| :pattern ( (BetreeBlockInterface.__default.Predecessors |view#0@@3| |ref#0@@42|)) ))))
(assert (forall ((|view#0@@4| T@U) (|ref#0@@43| T@U) ) (!  (=> (and (and (= (type |view#0@@4|) (IMapType BoxType BoxType)) (= (type |ref#0@@43|) BoxType)) (and ($Is |view#0@@4| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($IsBox |ref#0@@43| Tclass.ReferenceType.Reference))) (= (|BetreeBlockInterface.__default.Predecessors#requires| |view#0@@4| |ref#0@@43|) true)) :qid |BlockInterfaceidfyBetreeBlockInterface.91:25| :skolemid |4512| :pattern ( (|BetreeBlockInterface.__default.Predecessors#requires| |view#0@@4| |ref#0@@43|)) )))
(assert (forall ((arg0@@717 T@U) (arg1@@336 T@U) (arg2@@199 T@U) (arg3@@131 T@U) ) (! (= (type (|lambda#178| arg0@@717 arg1@@336 arg2@@199 arg3@@131)) (MapType0Type BoxType boolType)) :qid |funType:lambda#178| :pattern ( (|lambda#178| arg0@@717 arg1@@336 arg2@@199 arg3@@131)) )))
(assert  (=> true (forall ((|view#0@@5| T@U) (|ref#0@@44| T@U) ) (!  (=> (and (and (= (type |view#0@@5|) (IMapType BoxType BoxType)) (= (type |ref#0@@44|) BoxType)) (or (|BetreeBlockInterface.__default.Predecessors#canCall| |view#0@@5| |ref#0@@44|) (and ($Is |view#0@@5| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($IsBox |ref#0@@44| Tclass.ReferenceType.Reference)))) (and (forall ((|ref1#0| T@U) ) (!  (=> (and (and (= (type |ref1#0|) BoxType) ($IsBox |ref1#0| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|IMap#Domain| |view#0@@5|) |ref1#0|))) (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |view#0@@5|) |ref1#0|)))) :qid |BlockInterfaceidfyBetreeBlockInterface.92:10| :skolemid |4513| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |view#0@@5|) |ref1#0|))) :pattern ( (MapType0Select (|IMap#Domain| |view#0@@5|) |ref1#0|)) )) (= (BetreeBlockInterface.__default.Predecessors |view#0@@5| |ref#0@@44|) (|lambda#178| Tclass.ReferenceType.Reference (|IMap#Domain| |view#0@@5|) (|IMap#Elements| |view#0@@5|) |ref#0@@44|)))) :qid |BlockInterfaceidfyBetreeBlockInterface.91:25| :skolemid |4514| :pattern ( (BetreeBlockInterface.__default.Predecessors |view#0@@5| |ref#0@@44|)) ))))
(assert  (=> true (forall ((|view#0@@6| T@U) (|ref#0@@45| T@U) ) (!  (=> (and (and (= (type |view#0@@6|) (IMapType BoxType BoxType)) (= (type |ref#0@@45|) BoxType)) (or (|BetreeBlockInterface.__default.Predecessors#canCall| (Lit |view#0@@6|) (Lit |ref#0@@45|)) (and ($Is |view#0@@6| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($IsBox |ref#0@@45| Tclass.ReferenceType.Reference)))) (and (forall ((|ref1#1| T@U) ) (!  (=> (and (and (= (type |ref1#1|) BoxType) ($IsBox |ref1#1| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|IMap#Domain| |view#0@@6|) |ref1#1|))) (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |view#0@@6|)) |ref1#1|)))) :qid |BlockInterfaceidfyBetreeBlockInterface.92:10| :skolemid |4515| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |view#0@@6|) |ref1#1|))) :pattern ( (MapType0Select (|IMap#Domain| |view#0@@6|) |ref1#1|)) )) (= (BetreeBlockInterface.__default.Predecessors (Lit |view#0@@6|) (Lit |ref#0@@45|)) (|lambda#178| Tclass.ReferenceType.Reference (|IMap#Domain| |view#0@@6|) (|IMap#Elements| (Lit |view#0@@6|)) (Lit |ref#0@@45|))))) :qid |BlockInterfaceidfyBetreeBlockInterface.91:25| :weight 3 :skolemid |4516| :pattern ( (BetreeBlockInterface.__default.Predecessors (Lit |view#0@@6|) (Lit |ref#0@@45|))) ))))
(assert  (=> true (forall ((|view#0@@7| T@U) (|refs#0| T@U) ) (!  (=> (and (and (= (type |view#0@@7|) (IMapType BoxType BoxType)) (= (type |refs#0|) (MapType0Type BoxType boolType))) (or (|BetreeBlockInterface.__default.ClosedUnderPredecessor#canCall| |view#0@@7| |refs#0|) (and ($Is |view#0@@7| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |refs#0| (TISet Tclass.ReferenceType.Reference))))) true) :qid |BlockInterfaceidfyBetreeBlockInterface.95:36| :skolemid |4517| :pattern ( (BetreeBlockInterface.__default.ClosedUnderPredecessor |view#0@@7| |refs#0|)) ))))
(assert (forall ((|view#0@@8| T@U) (|refs#0@@0| T@U) ) (!  (=> (and (and (= (type |view#0@@8|) (IMapType BoxType BoxType)) (= (type |refs#0@@0|) (MapType0Type BoxType boolType))) (and ($Is |view#0@@8| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |refs#0@@0| (TISet Tclass.ReferenceType.Reference)))) (= (|BetreeBlockInterface.__default.ClosedUnderPredecessor#requires| |view#0@@8| |refs#0@@0|) true)) :qid |BlockInterfaceidfyBetreeBlockInterface.95:36| :skolemid |4518| :pattern ( (|BetreeBlockInterface.__default.ClosedUnderPredecessor#requires| |view#0@@8| |refs#0@@0|)) )))
(assert  (=> true (forall ((|view#0@@9| T@U) (|refs#0@@1| T@U) ) (!  (=> (and (and (= (type |view#0@@9|) (IMapType BoxType BoxType)) (= (type |refs#0@@1|) (MapType0Type BoxType boolType))) (or (|BetreeBlockInterface.__default.ClosedUnderPredecessor#canCall| |view#0@@9| |refs#0@@1|) (and ($Is |view#0@@9| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |refs#0@@1| (TISet Tclass.ReferenceType.Reference))))) (and (forall ((|ref#0@@46| T@U) ) (!  (=> (and (and (= (type |ref#0@@46|) BoxType) ($IsBox |ref#0@@46| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select |refs#0@@1| |ref#0@@46|))) (|BetreeBlockInterface.__default.Predecessors#canCall| |view#0@@9| |ref#0@@46|)) :qid |BlockInterfaceidfyBetreeBlockInterface.96:12| :skolemid |4520| :pattern ( (BetreeBlockInterface.__default.Predecessors |view#0@@9| |ref#0@@46|)) :pattern ( (MapType0Select |refs#0@@1| |ref#0@@46|)) )) (= (BetreeBlockInterface.__default.ClosedUnderPredecessor |view#0@@9| |refs#0@@1|) (forall ((|ref#0@@47| T@U) ) (!  (=> (and (and (= (type |ref#0@@47|) BoxType) ($IsBox |ref#0@@47| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select |refs#0@@1| |ref#0@@47|))) (|ISet#Subset| (BetreeBlockInterface.__default.Predecessors |view#0@@9| |ref#0@@47|) |refs#0@@1|)) :qid |BlockInterfaceidfyBetreeBlockInterface.96:12| :skolemid |4519| :pattern ( (BetreeBlockInterface.__default.Predecessors |view#0@@9| |ref#0@@47|)) :pattern ( (MapType0Select |refs#0@@1| |ref#0@@47|)) ))))) :qid |BlockInterfaceidfyBetreeBlockInterface.95:36| :skolemid |4521| :pattern ( (BetreeBlockInterface.__default.ClosedUnderPredecessor |view#0@@9| |refs#0@@1|)) ))))
(assert  (=> true (forall ((|view#0@@10| T@U) (|refs#0@@2| T@U) ) (!  (=> (and (and (= (type |view#0@@10|) (IMapType BoxType BoxType)) (= (type |refs#0@@2|) (MapType0Type BoxType boolType))) (or (|BetreeBlockInterface.__default.ClosedUnderPredecessor#canCall| (Lit |view#0@@10|) (Lit |refs#0@@2|)) (and ($Is |view#0@@10| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |refs#0@@2| (TISet Tclass.ReferenceType.Reference))))) (and (forall ((|ref#1@@14| T@U) ) (!  (=> (and (and (= (type |ref#1@@14|) BoxType) ($IsBox |ref#1@@14| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (Lit |refs#0@@2|) |ref#1@@14|))) (|BetreeBlockInterface.__default.Predecessors#canCall| (Lit |view#0@@10|) |ref#1@@14|)) :qid |BlockInterfaceidfyBetreeBlockInterface.96:12| :skolemid |4523| :pattern ( (BetreeBlockInterface.__default.Predecessors |view#0@@10| |ref#1@@14|)) :pattern ( (MapType0Select |refs#0@@2| |ref#1@@14|)) )) (= (BetreeBlockInterface.__default.ClosedUnderPredecessor (Lit |view#0@@10|) (Lit |refs#0@@2|)) (forall ((|ref#1@@15| T@U) ) (!  (=> (and (and (= (type |ref#1@@15|) BoxType) ($IsBox |ref#1@@15| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (Lit |refs#0@@2|) |ref#1@@15|))) (|ISet#Subset| (BetreeBlockInterface.__default.Predecessors (Lit |view#0@@10|) |ref#1@@15|) |refs#0@@2|)) :qid |BlockInterfaceidfyBetreeBlockInterface.96:12| :skolemid |4522| :pattern ( (BetreeBlockInterface.__default.Predecessors |view#0@@10| |ref#1@@15|)) :pattern ( (MapType0Select |refs#0@@2| |ref#1@@15|)) ))))) :qid |BlockInterfaceidfyBetreeBlockInterface.95:36| :weight 3 :skolemid |4524| :pattern ( (BetreeBlockInterface.__default.ClosedUnderPredecessor (Lit |view#0@@10|) (Lit |refs#0@@2|))) ))))
(assert  (=> true (forall ((|view#0@@11| T@U) ) (!  (=> (and (= (type |view#0@@11|) (IMapType BoxType BoxType)) (or (|BetreeBlockInterface.__default.RootHasNoPredecessor#canCall| |view#0@@11|) ($Is |view#0@@11| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)))) true) :qid |BlockInterfaceidfyBetreeBlockInterface.99:34| :skolemid |4525| :pattern ( (BetreeBlockInterface.__default.RootHasNoPredecessor |view#0@@11|)) ))))
(assert (forall ((|view#0@@12| T@U) ) (!  (=> (and (= (type |view#0@@12|) (IMapType BoxType BoxType)) ($Is |view#0@@12| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) (= (|BetreeBlockInterface.__default.RootHasNoPredecessor#requires| |view#0@@12|) true)) :qid |BlockInterfaceidfyBetreeBlockInterface.99:34| :skolemid |4526| :pattern ( (|BetreeBlockInterface.__default.RootHasNoPredecessor#requires| |view#0@@12|)) )))
(assert  (=> true (forall ((|view#0@@13| T@U) ) (!  (=> (and (= (type |view#0@@13|) (IMapType BoxType BoxType)) (or (|BetreeBlockInterface.__default.RootHasNoPredecessor#canCall| |view#0@@13|) ($Is |view#0@@13| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)))) (and (forall ((|ref#0@@48| T@U) ) (!  (=> (and (and (= (type |ref#0@@48|) BoxType) ($IsBox |ref#0@@48| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|IMap#Domain| |view#0@@13|) |ref#0@@48|))) (and |BetreeGraph.__default.Root#canCall| (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |view#0@@13|) |ref#0@@48|))))) :qid |BlockInterfaceidfyBetreeBlockInterface.101:12| :skolemid |4528| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |view#0@@13|) |ref#0@@48|))) :pattern ( (MapType0Select (|IMap#Domain| |view#0@@13|) |ref#0@@48|)) )) (= (BetreeBlockInterface.__default.RootHasNoPredecessor |view#0@@13|) (forall ((|ref#0@@49| T@U) ) (!  (=> (= (type |ref#0@@49|) BoxType) (=> (and ($IsBox |ref#0@@49| Tclass.ReferenceType.Reference) (U_2_bool (MapType0Select (|IMap#Domain| |view#0@@13|) |ref#0@@49|))) (not (U_2_bool (MapType0Select (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |view#0@@13|) |ref#0@@49|))) (Lit BetreeGraph.__default.Root)))))) :qid |BlockInterfaceidfyBetreeBlockInterface.101:12| :skolemid |4527| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |view#0@@13|) |ref#0@@49|))) :pattern ( (MapType0Select (|IMap#Domain| |view#0@@13|) |ref#0@@49|)) ))))) :qid |BlockInterfaceidfyBetreeBlockInterface.99:34| :skolemid |4529| :pattern ( (BetreeBlockInterface.__default.RootHasNoPredecessor |view#0@@13|)) ))))
(assert  (=> true (forall ((|view#0@@14| T@U) ) (!  (=> (and (= (type |view#0@@14|) (IMapType BoxType BoxType)) (or (|BetreeBlockInterface.__default.RootHasNoPredecessor#canCall| (Lit |view#0@@14|)) ($Is |view#0@@14| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)))) (and (forall ((|ref#1@@16| T@U) ) (!  (=> (and (and (= (type |ref#1@@16|) BoxType) ($IsBox |ref#1@@16| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|IMap#Domain| |view#0@@14|) |ref#1@@16|))) (and |BetreeGraph.__default.Root#canCall| (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |view#0@@14|)) |ref#1@@16|))))) :qid |BlockInterfaceidfyBetreeBlockInterface.101:12| :skolemid |4531| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |view#0@@14|) |ref#1@@16|))) :pattern ( (MapType0Select (|IMap#Domain| |view#0@@14|) |ref#1@@16|)) )) (= (BetreeBlockInterface.__default.RootHasNoPredecessor (Lit |view#0@@14|)) (forall ((|ref#1@@17| T@U) ) (!  (=> (= (type |ref#1@@17|) BoxType) (=> (and ($IsBox |ref#1@@17| Tclass.ReferenceType.Reference) (U_2_bool (MapType0Select (|IMap#Domain| |view#0@@14|) |ref#1@@17|))) (not (U_2_bool (MapType0Select (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |view#0@@14|)) |ref#1@@17|))) (Lit BetreeGraph.__default.Root)))))) :qid |BlockInterfaceidfyBetreeBlockInterface.101:12| :skolemid |4530| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |view#0@@14|) |ref#1@@17|))) :pattern ( (MapType0Select (|IMap#Domain| |view#0@@14|) |ref#1@@17|)) ))))) :qid |BlockInterfaceidfyBetreeBlockInterface.99:34| :weight 3 :skolemid |4532| :pattern ( (BetreeBlockInterface.__default.RootHasNoPredecessor (Lit |view#0@@14|))) ))))
(assert  (=> true (forall ((|s#0@@338| T@U) (|s'#0@@74| T@U) (|ops#0| T@U) ) (!  (=> (and (and (and (= (type |s#0@@338|) DatatypeTypeType) (= (type |s'#0@@74|) DatatypeTypeType)) (= (type |ops#0|) (SeqType BoxType))) (or (|BetreeBlockInterface.__default.Transaction#canCall| |s#0@@338| |s'#0@@74| |ops#0|) (and (and ($Is |s#0@@338| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@74| Tclass.BetreeBlockInterface.Variables)) ($Is |ops#0| (TSeq Tclass.BetreeGraph.Op))))) true) :qid |BlockInterfaceidfyBetreeBlockInterface.104:25| :skolemid |4533| :pattern ( (BetreeBlockInterface.__default.Transaction |s#0@@338| |s'#0@@74| |ops#0|)) ))))
(assert (forall ((|s#0@@339| T@U) (|s'#0@@75| T@U) (|ops#0@@0| T@U) ) (!  (=> (and (and (and (= (type |s#0@@339|) DatatypeTypeType) (= (type |s'#0@@75|) DatatypeTypeType)) (= (type |ops#0@@0|) (SeqType BoxType))) (and (and ($Is |s#0@@339| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@75| Tclass.BetreeBlockInterface.Variables)) ($Is |ops#0@@0| (TSeq Tclass.BetreeGraph.Op)))) (= (|BetreeBlockInterface.__default.Transaction#requires| |s#0@@339| |s'#0@@75| |ops#0@@0|) true)) :qid |BlockInterfaceidfyBetreeBlockInterface.104:25| :skolemid |4534| :pattern ( (|BetreeBlockInterface.__default.Transaction#requires| |s#0@@339| |s'#0@@75| |ops#0@@0|)) )))
(assert (= (type StartFuel_BetreeBlockInterface._default.OpTransaction) LayerTypeType))
(assert  (=> true (forall ((|s#0@@340| T@U) (|s'#0@@76| T@U) (|ops#0@@1| T@U) ) (!  (=> (and (and (and (= (type |s#0@@340|) DatatypeTypeType) (= (type |s'#0@@76|) DatatypeTypeType)) (= (type |ops#0@@1|) (SeqType BoxType))) (or (|BetreeBlockInterface.__default.Transaction#canCall| |s#0@@340| |s'#0@@76| |ops#0@@1|) (and (and ($Is |s#0@@340| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@76| Tclass.BetreeBlockInterface.Variables)) ($Is |ops#0@@1| (TSeq Tclass.BetreeGraph.Op))))) (and (|BetreeBlockInterface.__default.OpTransaction#canCall| |s#0@@340| |s'#0@@76| |ops#0@@1|) (= (BetreeBlockInterface.__default.Transaction |s#0@@340| |s'#0@@76| |ops#0@@1|) (BetreeBlockInterface.__default.OpTransaction StartFuel_BetreeBlockInterface._default.OpTransaction |s#0@@340| |s'#0@@76| |ops#0@@1|)))) :qid |BlockInterfaceidfyBetreeBlockInterface.104:25| :skolemid |4535| :pattern ( (BetreeBlockInterface.__default.Transaction |s#0@@340| |s'#0@@76| |ops#0@@1|)) ))))
(assert  (=> true (forall ((|s#0@@341| T@U) (|s'#0@@77| T@U) (|ops#0@@2| T@U) ) (!  (=> (and (and (and (= (type |s#0@@341|) DatatypeTypeType) (= (type |s'#0@@77|) DatatypeTypeType)) (= (type |ops#0@@2|) (SeqType BoxType))) (or (|BetreeBlockInterface.__default.Transaction#canCall| (Lit |s#0@@341|) (Lit |s'#0@@77|) (Lit |ops#0@@2|)) (and (and ($Is |s#0@@341| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@77| Tclass.BetreeBlockInterface.Variables)) ($Is |ops#0@@2| (TSeq Tclass.BetreeGraph.Op))))) (and (|BetreeBlockInterface.__default.OpTransaction#canCall| (Lit |s#0@@341|) (Lit |s'#0@@77|) (Lit |ops#0@@2|)) (= (BetreeBlockInterface.__default.Transaction (Lit |s#0@@341|) (Lit |s'#0@@77|) (Lit |ops#0@@2|)) (BetreeBlockInterface.__default.OpTransaction StartFuel_BetreeBlockInterface._default.OpTransaction (Lit |s#0@@341|) (Lit |s'#0@@77|) (Lit |ops#0@@2|))))) :qid |BlockInterfaceidfyBetreeBlockInterface.104:25| :weight 3 :skolemid |4536| :pattern ( (BetreeBlockInterface.__default.Transaction (Lit |s#0@@341|) (Lit |s'#0@@77|) (Lit |ops#0@@2|))) ))))
(assert  (=> true (forall ((|s#0@@342| T@U) (|refs#0@@3| T@U) ) (!  (=> (and (and (= (type |s#0@@342|) DatatypeTypeType) (= (type |refs#0@@3|) (MapType0Type BoxType boolType))) (or (|BetreeBlockInterface.__default.CanGCRefs#canCall| |s#0@@342| |refs#0@@3|) (and ($Is |s#0@@342| Tclass.BetreeBlockInterface.Variables) ($Is |refs#0@@3| (TISet Tclass.ReferenceType.Reference))))) true) :qid |BlockInterfaceidfyBetreeBlockInterface.109:23| :skolemid |4537| :pattern ( (BetreeBlockInterface.__default.CanGCRefs |s#0@@342| |refs#0@@3|)) ))))
(assert (forall ((|s#0@@343| T@U) (|refs#0@@4| T@U) ) (!  (=> (and (and (= (type |s#0@@343|) DatatypeTypeType) (= (type |refs#0@@4|) (MapType0Type BoxType boolType))) (and ($Is |s#0@@343| Tclass.BetreeBlockInterface.Variables) ($Is |refs#0@@4| (TISet Tclass.ReferenceType.Reference)))) (= (|BetreeBlockInterface.__default.CanGCRefs#requires| |s#0@@343| |refs#0@@4|) true)) :qid |BlockInterfaceidfyBetreeBlockInterface.109:23| :skolemid |4538| :pattern ( (|BetreeBlockInterface.__default.CanGCRefs#requires| |s#0@@343| |refs#0@@4|)) )))
(assert  (=> true (forall ((|s#0@@344| T@U) (|refs#0@@5| T@U) ) (!  (=> (and (and (= (type |s#0@@344|) DatatypeTypeType) (= (type |refs#0@@5|) (MapType0Type BoxType boolType))) (or (|BetreeBlockInterface.__default.CanGCRefs#canCall| |s#0@@344| |refs#0@@5|) (and ($Is |s#0@@344| Tclass.BetreeBlockInterface.Variables) ($Is |refs#0@@5| (TISet Tclass.ReferenceType.Reference))))) (and (and (|BetreeBlockInterface.__default.LiveReferences#canCall| |s#0@@344|) (=> (|ISet#Disjoint| |refs#0@@5| (BetreeBlockInterface.__default.LiveReferences |s#0@@344|)) (and (BetreeBlockInterface.Variables.Variables_q |s#0@@344|) (=> (|ISet#Subset| |refs#0@@5| (|IMap#Domain| (BetreeBlockInterface.Variables.view |s#0@@344|))) (and (BetreeBlockInterface.Variables.Variables_q |s#0@@344|) (|BetreeBlockInterface.__default.ClosedUnderPredecessor#canCall| (BetreeBlockInterface.Variables.view |s#0@@344|) |refs#0@@5|)))))) (= (BetreeBlockInterface.__default.CanGCRefs |s#0@@344| |refs#0@@5|)  (and (and (|ISet#Disjoint| |refs#0@@5| (BetreeBlockInterface.__default.LiveReferences |s#0@@344|)) (|ISet#Subset| |refs#0@@5| (|IMap#Domain| (BetreeBlockInterface.Variables.view |s#0@@344|)))) (BetreeBlockInterface.__default.ClosedUnderPredecessor (BetreeBlockInterface.Variables.view |s#0@@344|) |refs#0@@5|))))) :qid |BlockInterfaceidfyBetreeBlockInterface.109:23| :skolemid |4539| :pattern ( (BetreeBlockInterface.__default.CanGCRefs |s#0@@344| |refs#0@@5|)) ))))
(assert  (=> true (forall ((|s#0@@345| T@U) (|refs#0@@6| T@U) ) (!  (=> (and (and (= (type |s#0@@345|) DatatypeTypeType) (= (type |refs#0@@6|) (MapType0Type BoxType boolType))) (or (|BetreeBlockInterface.__default.CanGCRefs#canCall| (Lit |s#0@@345|) |refs#0@@6|) (and ($Is |s#0@@345| Tclass.BetreeBlockInterface.Variables) ($Is |refs#0@@6| (TISet Tclass.ReferenceType.Reference))))) (and (and (|BetreeBlockInterface.__default.LiveReferences#canCall| (Lit |s#0@@345|)) (=> (|ISet#Disjoint| |refs#0@@6| (BetreeBlockInterface.__default.LiveReferences (Lit |s#0@@345|))) (and (BetreeBlockInterface.Variables.Variables_q (Lit |s#0@@345|)) (=> (|ISet#Subset| |refs#0@@6| (|IMap#Domain| (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@345|))))) (and (BetreeBlockInterface.Variables.Variables_q (Lit |s#0@@345|)) (|BetreeBlockInterface.__default.ClosedUnderPredecessor#canCall| (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@345|))) |refs#0@@6|)))))) (= (BetreeBlockInterface.__default.CanGCRefs (Lit |s#0@@345|) |refs#0@@6|)  (and (and (|ISet#Disjoint| |refs#0@@6| (BetreeBlockInterface.__default.LiveReferences (Lit |s#0@@345|))) (|ISet#Subset| |refs#0@@6| (|IMap#Domain| (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@345|)))))) (BetreeBlockInterface.__default.ClosedUnderPredecessor (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@345|))) |refs#0@@6|))))) :qid |BlockInterfaceidfyBetreeBlockInterface.109:23| :weight 3 :skolemid |4540| :pattern ( (BetreeBlockInterface.__default.CanGCRefs (Lit |s#0@@345|) |refs#0@@6|)) ))))
(assert  (=> true (forall ((|s#0@@346| T@U) (|refs#0@@7| T@U) ) (!  (=> (and (and (= (type |s#0@@346|) DatatypeTypeType) (= (type |refs#0@@7|) (MapType0Type BoxType boolType))) (or (|BetreeBlockInterface.__default.CanGCRefs#canCall| (Lit |s#0@@346|) (Lit |refs#0@@7|)) (and ($Is |s#0@@346| Tclass.BetreeBlockInterface.Variables) ($Is |refs#0@@7| (TISet Tclass.ReferenceType.Reference))))) (and (and (|BetreeBlockInterface.__default.LiveReferences#canCall| (Lit |s#0@@346|)) (=> (|ISet#Disjoint| |refs#0@@7| (BetreeBlockInterface.__default.LiveReferences (Lit |s#0@@346|))) (and (BetreeBlockInterface.Variables.Variables_q (Lit |s#0@@346|)) (=> (|ISet#Subset| |refs#0@@7| (|IMap#Domain| (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@346|))))) (and (BetreeBlockInterface.Variables.Variables_q (Lit |s#0@@346|)) (|BetreeBlockInterface.__default.ClosedUnderPredecessor#canCall| (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@346|))) (Lit |refs#0@@7|))))))) (= (BetreeBlockInterface.__default.CanGCRefs (Lit |s#0@@346|) (Lit |refs#0@@7|))  (and (and (|ISet#Disjoint| |refs#0@@7| (BetreeBlockInterface.__default.LiveReferences (Lit |s#0@@346|))) (|ISet#Subset| |refs#0@@7| (|IMap#Domain| (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@346|)))))) (BetreeBlockInterface.__default.ClosedUnderPredecessor (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@346|))) (Lit |refs#0@@7|)))))) :qid |BlockInterfaceidfyBetreeBlockInterface.109:23| :weight 3 :skolemid |4541| :pattern ( (BetreeBlockInterface.__default.CanGCRefs (Lit |s#0@@346|) (Lit |refs#0@@7|))) ))))
(assert  (=> true (forall ((|s#0@@347| T@U) (|s'#0@@78| T@U) (|refs#0@@8| T@U) ) (!  (=> (and (and (and (= (type |s#0@@347|) DatatypeTypeType) (= (type |s'#0@@78|) DatatypeTypeType)) (= (type |refs#0@@8|) (MapType0Type BoxType boolType))) (or (|BetreeBlockInterface.__default.GC#canCall| |s#0@@347| |s'#0@@78| |refs#0@@8|) (and (and ($Is |s#0@@347| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@78| Tclass.BetreeBlockInterface.Variables)) ($Is |refs#0@@8| (TISet Tclass.ReferenceType.Reference))))) true) :qid |BlockInterfaceidfyBetreeBlockInterface.116:16| :skolemid |4542| :pattern ( (BetreeBlockInterface.__default.GC |s#0@@347| |s'#0@@78| |refs#0@@8|)) ))))
(assert (forall ((|s#0@@348| T@U) (|s'#0@@79| T@U) (|refs#0@@9| T@U) ) (!  (=> (and (and (and (= (type |s#0@@348|) DatatypeTypeType) (= (type |s'#0@@79|) DatatypeTypeType)) (= (type |refs#0@@9|) (MapType0Type BoxType boolType))) (and (and ($Is |s#0@@348| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@79| Tclass.BetreeBlockInterface.Variables)) ($Is |refs#0@@9| (TISet Tclass.ReferenceType.Reference)))) (= (|BetreeBlockInterface.__default.GC#requires| |s#0@@348| |s'#0@@79| |refs#0@@9|) true)) :qid |BlockInterfaceidfyBetreeBlockInterface.116:16| :skolemid |4543| :pattern ( (|BetreeBlockInterface.__default.GC#requires| |s#0@@348| |s'#0@@79| |refs#0@@9|)) )))
(assert (= (type StartFuel_Maps._default.IMapRemove) LayerTypeType))
(assert  (=> true (forall ((|s#0@@349| T@U) (|s'#0@@80| T@U) (|refs#0@@10| T@U) ) (!  (=> (and (and (and (= (type |s#0@@349|) DatatypeTypeType) (= (type |s'#0@@80|) DatatypeTypeType)) (= (type |refs#0@@10|) (MapType0Type BoxType boolType))) (or (|BetreeBlockInterface.__default.GC#canCall| |s#0@@349| |s'#0@@80| |refs#0@@10|) (and (and ($Is |s#0@@349| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@80| Tclass.BetreeBlockInterface.Variables)) ($Is |refs#0@@10| (TISet Tclass.ReferenceType.Reference))))) (and (and (|BetreeBlockInterface.__default.CanGCRefs#canCall| |s#0@@349| |refs#0@@10|) (=> (BetreeBlockInterface.__default.CanGCRefs |s#0@@349| |refs#0@@10|) (and (BetreeBlockInterface.Variables.Variables_q |s'#0@@80|) (and (BetreeBlockInterface.Variables.Variables_q |s#0@@349|) (|Maps.__default.IMapRemove#canCall| Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node (BetreeBlockInterface.Variables.view |s#0@@349|) |refs#0@@10|))))) (= (BetreeBlockInterface.__default.GC |s#0@@349| |s'#0@@80| |refs#0@@10|)  (and (BetreeBlockInterface.__default.CanGCRefs |s#0@@349| |refs#0@@10|) (|IMap#Equal| (BetreeBlockInterface.Variables.view |s'#0@@80|) (Maps.__default.IMapRemove Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node StartFuel_Maps._default.IMapRemove (BetreeBlockInterface.Variables.view |s#0@@349|) |refs#0@@10|)))))) :qid |BlockInterfaceidfyBetreeBlockInterface.116:16| :skolemid |4544| :pattern ( (BetreeBlockInterface.__default.GC |s#0@@349| |s'#0@@80| |refs#0@@10|)) ))))
(assert  (=> true (forall ((|s#0@@350| T@U) (|s'#0@@81| T@U) (|refs#0@@11| T@U) ) (!  (=> (and (and (and (= (type |s#0@@350|) DatatypeTypeType) (= (type |s'#0@@81|) DatatypeTypeType)) (= (type |refs#0@@11|) (MapType0Type BoxType boolType))) (or (|BetreeBlockInterface.__default.GC#canCall| (Lit |s#0@@350|) (Lit |s'#0@@81|) |refs#0@@11|) (and (and ($Is |s#0@@350| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@81| Tclass.BetreeBlockInterface.Variables)) ($Is |refs#0@@11| (TISet Tclass.ReferenceType.Reference))))) (and (and (|BetreeBlockInterface.__default.CanGCRefs#canCall| (Lit |s#0@@350|) |refs#0@@11|) (=> (BetreeBlockInterface.__default.CanGCRefs (Lit |s#0@@350|) |refs#0@@11|) (and (BetreeBlockInterface.Variables.Variables_q (Lit |s'#0@@81|)) (and (BetreeBlockInterface.Variables.Variables_q (Lit |s#0@@350|)) (|Maps.__default.IMapRemove#canCall| Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@350|))) |refs#0@@11|))))) (= (BetreeBlockInterface.__default.GC (Lit |s#0@@350|) (Lit |s'#0@@81|) |refs#0@@11|)  (and (BetreeBlockInterface.__default.CanGCRefs (Lit |s#0@@350|) |refs#0@@11|) (|IMap#Equal| (BetreeBlockInterface.Variables.view (Lit |s'#0@@81|)) (Maps.__default.IMapRemove Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node StartFuel_Maps._default.IMapRemove (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@350|))) |refs#0@@11|)))))) :qid |BlockInterfaceidfyBetreeBlockInterface.116:16| :weight 3 :skolemid |4545| :pattern ( (BetreeBlockInterface.__default.GC (Lit |s#0@@350|) (Lit |s'#0@@81|) |refs#0@@11|)) ))))
(assert  (=> true (forall ((|s#0@@351| T@U) (|s'#0@@82| T@U) (|refs#0@@12| T@U) ) (!  (=> (and (and (and (= (type |s#0@@351|) DatatypeTypeType) (= (type |s'#0@@82|) DatatypeTypeType)) (= (type |refs#0@@12|) (MapType0Type BoxType boolType))) (or (|BetreeBlockInterface.__default.GC#canCall| (Lit |s#0@@351|) (Lit |s'#0@@82|) (Lit |refs#0@@12|)) (and (and ($Is |s#0@@351| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@82| Tclass.BetreeBlockInterface.Variables)) ($Is |refs#0@@12| (TISet Tclass.ReferenceType.Reference))))) (and (and (|BetreeBlockInterface.__default.CanGCRefs#canCall| (Lit |s#0@@351|) (Lit |refs#0@@12|)) (=> (U_2_bool (Lit (bool_2_U (BetreeBlockInterface.__default.CanGCRefs (Lit |s#0@@351|) (Lit |refs#0@@12|))))) (and (BetreeBlockInterface.Variables.Variables_q (Lit |s'#0@@82|)) (and (BetreeBlockInterface.Variables.Variables_q (Lit |s#0@@351|)) (|Maps.__default.IMapRemove#canCall| Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@351|))) (Lit |refs#0@@12|)))))) (= (BetreeBlockInterface.__default.GC (Lit |s#0@@351|) (Lit |s'#0@@82|) (Lit |refs#0@@12|))  (and (BetreeBlockInterface.__default.CanGCRefs (Lit |s#0@@351|) (Lit |refs#0@@12|)) (|IMap#Equal| (BetreeBlockInterface.Variables.view (Lit |s'#0@@82|)) (Maps.__default.IMapRemove Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node StartFuel_Maps._default.IMapRemove (Lit (BetreeBlockInterface.Variables.view (Lit |s#0@@351|))) (Lit |refs#0@@12|))))))) :qid |BlockInterfaceidfyBetreeBlockInterface.116:16| :weight 3 :skolemid |4546| :pattern ( (BetreeBlockInterface.__default.GC (Lit |s#0@@351|) (Lit |s'#0@@82|) (Lit |refs#0@@12|))) ))))
(assert (= (type Tclass.BetreeBlockInterface.Step) TyType))
(assert (= (Tag Tclass.BetreeBlockInterface.Step) Tagclass.BetreeBlockInterface.Step))
(assert (= (TagFamily Tclass.BetreeBlockInterface.Step) tytagFamily$Step))
(assert (forall ((bx@@196 T@U) ) (!  (=> (and (= (type bx@@196) BoxType) ($IsBox bx@@196 Tclass.BetreeBlockInterface.Step)) (and (= ($Box ($Unbox DatatypeTypeType bx@@196)) bx@@196) ($Is ($Unbox DatatypeTypeType bx@@196) Tclass.BetreeBlockInterface.Step))) :qid |unknown.0:0| :skolemid |4547| :pattern ( ($IsBox bx@@196 Tclass.BetreeBlockInterface.Step)) )))
(assert  (=> true (forall ((|s#0@@352| T@U) (|s'#0@@83| T@U) (|step#0@@27| T@U) ) (!  (=> (and (and (and (= (type |s#0@@352|) DatatypeTypeType) (= (type |s'#0@@83|) DatatypeTypeType)) (= (type |step#0@@27|) DatatypeTypeType)) (or (|BetreeBlockInterface.__default.NextStep#canCall| |s#0@@352| |s'#0@@83| |step#0@@27|) (and (and ($Is |s#0@@352| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@83| Tclass.BetreeBlockInterface.Variables)) ($Is |step#0@@27| Tclass.BetreeBlockInterface.Step)))) true) :qid |BlockInterfaceidfyBetreeBlockInterface.128:22| :skolemid |4548| :pattern ( (BetreeBlockInterface.__default.NextStep |s#0@@352| |s'#0@@83| |step#0@@27|)) ))))
(assert (forall ((|s#0@@353| T@U) (|s'#0@@84| T@U) (|step#0@@28| T@U) ) (!  (=> (and (and (and (= (type |s#0@@353|) DatatypeTypeType) (= (type |s'#0@@84|) DatatypeTypeType)) (= (type |step#0@@28|) DatatypeTypeType)) (and (and ($Is |s#0@@353| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@84| Tclass.BetreeBlockInterface.Variables)) ($Is |step#0@@28| Tclass.BetreeBlockInterface.Step))) (= (|BetreeBlockInterface.__default.NextStep#requires| |s#0@@353| |s'#0@@84| |step#0@@28|) true)) :qid |BlockInterfaceidfyBetreeBlockInterface.128:22| :skolemid |4549| :pattern ( (|BetreeBlockInterface.__default.NextStep#requires| |s#0@@353| |s'#0@@84| |step#0@@28|)) )))
(assert  (and (forall ((arg0@@718 T@U) ) (! (= (type (BetreeBlockInterface.Step.ops arg0@@718)) (SeqType BoxType)) :qid |funType:BetreeBlockInterface.Step.ops| :pattern ( (BetreeBlockInterface.Step.ops arg0@@718)) )) (forall ((arg0@@719 T@U) ) (! (= (type (BetreeBlockInterface.Step.refs arg0@@719)) (MapType0Type BoxType boolType)) :qid |funType:BetreeBlockInterface.Step.refs| :pattern ( (BetreeBlockInterface.Step.refs arg0@@719)) ))))
(assert  (=> true (forall ((|s#0@@354| T@U) (|s'#0@@85| T@U) (|step#0@@29| T@U) ) (!  (=> (and (and (and (= (type |s#0@@354|) DatatypeTypeType) (= (type |s'#0@@85|) DatatypeTypeType)) (= (type |step#0@@29|) DatatypeTypeType)) (or (|BetreeBlockInterface.__default.NextStep#canCall| |s#0@@354| |s'#0@@85| |step#0@@29|) (and (and ($Is |s#0@@354| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@85| Tclass.BetreeBlockInterface.Variables)) ($Is |step#0@@29| Tclass.BetreeBlockInterface.Step)))) (and (and (=> (BetreeBlockInterface.Step.TransactionStep_q |step#0@@29|) (let ((|ops#1| (BetreeBlockInterface.Step.ops |step#0@@29|))) (|BetreeBlockInterface.__default.Transaction#canCall| |s#0@@354| |s'#0@@85| |ops#1|))) (=> (not (BetreeBlockInterface.Step.TransactionStep_q |step#0@@29|)) (and (=> (BetreeBlockInterface.Step.GCStep_q |step#0@@29|) (let ((|refs#1| (BetreeBlockInterface.Step.refs |step#0@@29|))) (|BetreeBlockInterface.__default.GC#canCall| |s#0@@354| |s'#0@@85| |refs#1|))) (=> (not (BetreeBlockInterface.Step.GCStep_q |step#0@@29|)) (and (|$IsA#BetreeBlockInterface.Variables| |s#0@@354|) (|$IsA#BetreeBlockInterface.Variables| |s'#0@@85|)))))) (= (BetreeBlockInterface.__default.NextStep |s#0@@354| |s'#0@@85| |step#0@@29|) (ite (BetreeBlockInterface.Step.TransactionStep_q |step#0@@29|) (let ((|ops#0@@3| (BetreeBlockInterface.Step.ops |step#0@@29|))) (BetreeBlockInterface.__default.Transaction |s#0@@354| |s'#0@@85| |ops#0@@3|)) (ite (BetreeBlockInterface.Step.GCStep_q |step#0@@29|) (let ((|refs#0@@13| (BetreeBlockInterface.Step.refs |step#0@@29|))) (BetreeBlockInterface.__default.GC |s#0@@354| |s'#0@@85| |refs#0@@13|)) (|BetreeBlockInterface.Variables#Equal| |s#0@@354| |s'#0@@85|)))))) :qid |BlockInterfaceidfyBetreeBlockInterface.128:22| :skolemid |4550| :pattern ( (BetreeBlockInterface.__default.NextStep |s#0@@354| |s'#0@@85| |step#0@@29|)) ))))
(assert  (=> true (forall ((|s#0@@355| T@U) (|s'#0@@86| T@U) (|step#0@@30| T@U) ) (!  (=> (and (and (and (= (type |s#0@@355|) DatatypeTypeType) (= (type |s'#0@@86|) DatatypeTypeType)) (= (type |step#0@@30|) DatatypeTypeType)) (or (|BetreeBlockInterface.__default.NextStep#canCall| (Lit |s#0@@355|) (Lit |s'#0@@86|) (Lit |step#0@@30|)) (and (and ($Is |s#0@@355| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@86| Tclass.BetreeBlockInterface.Variables)) ($Is |step#0@@30| Tclass.BetreeBlockInterface.Step)))) (and (and (=> (U_2_bool (Lit (bool_2_U (BetreeBlockInterface.Step.TransactionStep_q (Lit |step#0@@30|))))) (let ((|ops#3| (Lit (BetreeBlockInterface.Step.ops (Lit |step#0@@30|))))) (|BetreeBlockInterface.__default.Transaction#canCall| (Lit |s#0@@355|) (Lit |s'#0@@86|) |ops#3|))) (=> (not (U_2_bool (Lit (bool_2_U (BetreeBlockInterface.Step.TransactionStep_q (Lit |step#0@@30|)))))) (and (=> (U_2_bool (Lit (bool_2_U (BetreeBlockInterface.Step.GCStep_q (Lit |step#0@@30|))))) (let ((|refs#3| (Lit (BetreeBlockInterface.Step.refs (Lit |step#0@@30|))))) (|BetreeBlockInterface.__default.GC#canCall| (Lit |s#0@@355|) (Lit |s'#0@@86|) |refs#3|))) (=> (not (U_2_bool (Lit (bool_2_U (BetreeBlockInterface.Step.GCStep_q (Lit |step#0@@30|)))))) (and (|$IsA#BetreeBlockInterface.Variables| (Lit |s#0@@355|)) (|$IsA#BetreeBlockInterface.Variables| (Lit |s'#0@@86|))))))) (= (BetreeBlockInterface.__default.NextStep (Lit |s#0@@355|) (Lit |s'#0@@86|) (Lit |step#0@@30|)) (ite (BetreeBlockInterface.Step.TransactionStep_q (Lit |step#0@@30|)) (U_2_bool (let ((|ops#2| (Lit (BetreeBlockInterface.Step.ops (Lit |step#0@@30|))))) (Lit (bool_2_U (BetreeBlockInterface.__default.Transaction (Lit |s#0@@355|) (Lit |s'#0@@86|) |ops#2|))))) (ite (BetreeBlockInterface.Step.GCStep_q (Lit |step#0@@30|)) (U_2_bool (let ((|refs#2| (Lit (BetreeBlockInterface.Step.refs (Lit |step#0@@30|))))) (Lit (bool_2_U (BetreeBlockInterface.__default.GC (Lit |s#0@@355|) (Lit |s'#0@@86|) |refs#2|))))) (|BetreeBlockInterface.Variables#Equal| |s#0@@355| |s'#0@@86|)))))) :qid |BlockInterfaceidfyBetreeBlockInterface.128:22| :weight 3 :skolemid |4551| :pattern ( (BetreeBlockInterface.__default.NextStep (Lit |s#0@@355|) (Lit |s'#0@@86|) (Lit |step#0@@30|))) ))))
(assert  (=> true (forall ((|s#0@@356| T@U) (|s'#0@@87| T@U) ) (!  (=> (and (and (= (type |s#0@@356|) DatatypeTypeType) (= (type |s'#0@@87|) DatatypeTypeType)) (or (|BetreeBlockInterface.__default.Next#canCall| |s#0@@356| |s'#0@@87|) (and ($Is |s#0@@356| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@87| Tclass.BetreeBlockInterface.Variables)))) true) :qid |BlockInterfaceidfyBetreeBlockInterface.139:18| :skolemid |4552| :pattern ( (BetreeBlockInterface.__default.Next |s#0@@356| |s'#0@@87|)) ))))
(assert (forall ((|s#0@@357| T@U) (|s'#0@@88| T@U) ) (!  (=> (and (and (= (type |s#0@@357|) DatatypeTypeType) (= (type |s'#0@@88|) DatatypeTypeType)) (and ($Is |s#0@@357| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@88| Tclass.BetreeBlockInterface.Variables))) (= (|BetreeBlockInterface.__default.Next#requires| |s#0@@357| |s'#0@@88|) true)) :qid |BlockInterfaceidfyBetreeBlockInterface.139:18| :skolemid |4553| :pattern ( (|BetreeBlockInterface.__default.Next#requires| |s#0@@357| |s'#0@@88|)) )))
(assert  (=> true (forall ((|s#0@@358| T@U) (|s'#0@@89| T@U) ) (!  (=> (and (and (= (type |s#0@@358|) DatatypeTypeType) (= (type |s'#0@@89|) DatatypeTypeType)) (or (|BetreeBlockInterface.__default.Next#canCall| |s#0@@358| |s'#0@@89|) (and ($Is |s#0@@358| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@89| Tclass.BetreeBlockInterface.Variables)))) (and (forall ((|step#0@@31| T@U) ) (!  (=> (and (= (type |step#0@@31|) DatatypeTypeType) ($Is |step#0@@31| Tclass.BetreeBlockInterface.Step)) (|BetreeBlockInterface.__default.NextStep#canCall| |s#0@@358| |s'#0@@89| |step#0@@31|)) :qid |BlockInterfaceidfyBetreeBlockInterface.140:12| :skolemid |4555| :pattern ( (BetreeBlockInterface.__default.NextStep |s#0@@358| |s'#0@@89| |step#0@@31|)) )) (= (BetreeBlockInterface.__default.Next |s#0@@358| |s'#0@@89|) (exists ((|step#0@@32| T@U) ) (!  (and (= (type |step#0@@32|) DatatypeTypeType) (and ($Is |step#0@@32| Tclass.BetreeBlockInterface.Step) (BetreeBlockInterface.__default.NextStep |s#0@@358| |s'#0@@89| |step#0@@32|))) :qid |BlockInterfaceidfyBetreeBlockInterface.140:12| :skolemid |4554| :pattern ( (BetreeBlockInterface.__default.NextStep |s#0@@358| |s'#0@@89| |step#0@@32|)) ))))) :qid |BlockInterfaceidfyBetreeBlockInterface.139:18| :skolemid |4556| :pattern ( (BetreeBlockInterface.__default.Next |s#0@@358| |s'#0@@89|)) ))))
(assert  (=> true (forall ((|s#0@@359| T@U) (|s'#0@@90| T@U) ) (!  (=> (and (and (= (type |s#0@@359|) DatatypeTypeType) (= (type |s'#0@@90|) DatatypeTypeType)) (or (|BetreeBlockInterface.__default.Next#canCall| (Lit |s#0@@359|) (Lit |s'#0@@90|)) (and ($Is |s#0@@359| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@90| Tclass.BetreeBlockInterface.Variables)))) (and (forall ((|step#1@@3| T@U) ) (!  (=> (and (= (type |step#1@@3|) DatatypeTypeType) ($Is |step#1@@3| Tclass.BetreeBlockInterface.Step)) (|BetreeBlockInterface.__default.NextStep#canCall| (Lit |s#0@@359|) (Lit |s'#0@@90|) |step#1@@3|)) :qid |BlockInterfaceidfyBetreeBlockInterface.140:12| :skolemid |4558| :pattern ( (BetreeBlockInterface.__default.NextStep |s#0@@359| |s'#0@@90| |step#1@@3|)) )) (= (BetreeBlockInterface.__default.Next (Lit |s#0@@359|) (Lit |s'#0@@90|)) (exists ((|step#1@@4| T@U) ) (!  (and (= (type |step#1@@4|) DatatypeTypeType) (and ($Is |step#1@@4| Tclass.BetreeBlockInterface.Step) (BetreeBlockInterface.__default.NextStep (Lit |s#0@@359|) (Lit |s'#0@@90|) |step#1@@4|))) :qid |BlockInterfaceidfyBetreeBlockInterface.140:12| :skolemid |4557| :pattern ( (BetreeBlockInterface.__default.NextStep |s#0@@359| |s'#0@@90| |step#1@@4|)) ))))) :qid |BlockInterfaceidfyBetreeBlockInterface.139:18| :weight 3 :skolemid |4559| :pattern ( (BetreeBlockInterface.__default.Next (Lit |s#0@@359|) (Lit |s'#0@@90|))) ))))
(assert  (=> true (forall ((|s#0@@360| T@U) ) (!  (=> (and (= (type |s#0@@360|) DatatypeTypeType) (or (|BetreeBlockInterface.__default.Inv#canCall| |s#0@@360|) ($Is |s#0@@360| Tclass.BetreeBlockInterface.Variables))) true) :qid |BlockInterfaceidfyBetreeBlockInterface.178:17| :skolemid |4560| :pattern ( (BetreeBlockInterface.__default.Inv |s#0@@360|)) ))))
(assert (forall ((|s#0@@361| T@U) ) (!  (=> (and (= (type |s#0@@361|) DatatypeTypeType) ($Is |s#0@@361| Tclass.BetreeBlockInterface.Variables)) (= (|BetreeBlockInterface.__default.Inv#requires| |s#0@@361|) true)) :qid |BlockInterfaceidfyBetreeBlockInterface.178:17| :skolemid |4561| :pattern ( (|BetreeBlockInterface.__default.Inv#requires| |s#0@@361|)) )))
(assert  (=> true (forall ((|s#0@@362| T@U) ) (!  (=> (and (= (type |s#0@@362|) DatatypeTypeType) (or (|BetreeBlockInterface.__default.Inv#canCall| |s#0@@362|) ($Is |s#0@@362| Tclass.BetreeBlockInterface.Variables))) (and (and (and |BetreeGraph.__default.Root#canCall| (BetreeBlockInterface.Variables.Variables_q |s#0@@362|)) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view |s#0@@362|)) BetreeGraph.__default.Root)) (and (|BetreeBlockInterface.__default.RefGraphIsClosed#canCall| |s#0@@362|) (=> (BetreeBlockInterface.__default.RefGraphIsClosed |s#0@@362|) (|BetreeBlockInterface.__default.LiveDataAvailable#canCall| |s#0@@362|))))) (= (BetreeBlockInterface.__default.Inv |s#0@@362|)  (and (and (U_2_bool (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view |s#0@@362|)) BetreeGraph.__default.Root)) (BetreeBlockInterface.__default.RefGraphIsClosed |s#0@@362|)) (BetreeBlockInterface.__default.LiveDataAvailable |s#0@@362|))))) :qid |BlockInterfaceidfyBetreeBlockInterface.178:17| :skolemid |4562| :pattern ( (BetreeBlockInterface.__default.Inv |s#0@@362|)) ))))
(assert  (=> true (forall ((|s#0@@363| T@U) ) (!  (=> (and (= (type |s#0@@363|) DatatypeTypeType) (or (|BetreeBlockInterface.__default.Inv#canCall| (Lit |s#0@@363|)) ($Is |s#0@@363| Tclass.BetreeBlockInterface.Variables))) (and (and (and |BetreeGraph.__default.Root#canCall| (BetreeBlockInterface.Variables.Variables_q (Lit |s#0@@363|))) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view (Lit |s#0@@363|))) BetreeGraph.__default.Root)) (and (|BetreeBlockInterface.__default.RefGraphIsClosed#canCall| (Lit |s#0@@363|)) (=> (U_2_bool (Lit (bool_2_U (BetreeBlockInterface.__default.RefGraphIsClosed (Lit |s#0@@363|))))) (|BetreeBlockInterface.__default.LiveDataAvailable#canCall| (Lit |s#0@@363|)))))) (= (BetreeBlockInterface.__default.Inv (Lit |s#0@@363|))  (and (and (U_2_bool (MapType0Select (|IMap#Domain| (BetreeBlockInterface.Variables.view (Lit |s#0@@363|))) BetreeGraph.__default.Root)) (BetreeBlockInterface.__default.RefGraphIsClosed (Lit |s#0@@363|))) (BetreeBlockInterface.__default.LiveDataAvailable (Lit |s#0@@363|)))))) :qid |BlockInterfaceidfyBetreeBlockInterface.178:17| :weight 3 :skolemid |4563| :pattern ( (BetreeBlockInterface.__default.Inv (Lit |s#0@@363|))) ))))
(assert  (=> true (forall ((|s#0@@364| T@U) (|ops#0@@4| T@U) ) (!  (=> (and (and (= (type |s#0@@364|) DatatypeTypeType) (= (type |ops#0@@4|) (SeqType BoxType))) (or (|BetreeBlockInterface.__default.Reads#canCall| |s#0@@364| |ops#0@@4|) (and ($Is |s#0@@364| Tclass.BetreeBlockInterface.Variables) ($Is |ops#0@@4| (TSeq Tclass.BetreeGraph.ReadOp))))) (and (and (=> (and (BetreeBlockInterface.__default.Reads |s#0@@364| |ops#0@@4|) (< 0 (|Seq#Length| |ops#0@@4|))) (BetreeBlockInterface.__default.ReadStep |s#0@@364| ($Unbox DatatypeTypeType (|Seq#Index| |ops#0@@4| (LitInt 0))))) (=> (and (BetreeBlockInterface.__default.Reads |s#0@@364| |ops#0@@4|) (< 1 (|Seq#Length| |ops#0@@4|))) (BetreeBlockInterface.__default.ReadStep |s#0@@364| ($Unbox DatatypeTypeType (|Seq#Index| |ops#0@@4| (LitInt 1)))))) (=> (and (BetreeBlockInterface.__default.Reads |s#0@@364| |ops#0@@4|) (< 2 (|Seq#Length| |ops#0@@4|))) (BetreeBlockInterface.__default.ReadStep |s#0@@364| ($Unbox DatatypeTypeType (|Seq#Index| |ops#0@@4| (LitInt 2))))))) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.37:19| :skolemid |4564| :pattern ( (BetreeBlockInterface.__default.Reads |s#0@@364| |ops#0@@4|)) ))))
(assert (forall ((|s#0@@365| T@U) (|ops#0@@5| T@U) ) (!  (=> (and (and (= (type |s#0@@365|) DatatypeTypeType) (= (type |ops#0@@5|) (SeqType BoxType))) (and ($Is |s#0@@365| Tclass.BetreeBlockInterface.Variables) ($Is |ops#0@@5| (TSeq Tclass.BetreeGraph.ReadOp)))) (= (|BetreeBlockInterface.__default.Reads#requires| |s#0@@365| |ops#0@@5|) true)) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.37:19| :skolemid |4565| :pattern ( (|BetreeBlockInterface.__default.Reads#requires| |s#0@@365| |ops#0@@5|)) )))
(assert  (=> true (forall ((|s#0@@366| T@U) (|ops#0@@6| T@U) ) (!  (=> (and (and (= (type |s#0@@366|) DatatypeTypeType) (= (type |ops#0@@6|) (SeqType BoxType))) (or (|BetreeBlockInterface.__default.Reads#canCall| |s#0@@366| |ops#0@@6|) (and ($Is |s#0@@366| Tclass.BetreeBlockInterface.Variables) ($Is |ops#0@@6| (TSeq Tclass.BetreeGraph.ReadOp))))) (and (forall ((|op#0@@7| T@U) ) (!  (=> (and (and (= (type |op#0@@7|) DatatypeTypeType) ($Is |op#0@@7| Tclass.BetreeGraph.ReadOp)) (|Seq#Contains| |ops#0@@6| ($Box |op#0@@7|))) (|BetreeBlockInterface.__default.ReadStep#canCall| |s#0@@366| |op#0@@7|)) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.42:12| :skolemid |4567| :pattern ( (BetreeBlockInterface.__default.ReadStep |s#0@@366| |op#0@@7|)) :pattern ( (|Seq#Contains| |ops#0@@6| ($Box |op#0@@7|))) )) (= (BetreeBlockInterface.__default.Reads |s#0@@366| |ops#0@@6|) (forall ((|op#0@@8| T@U) ) (!  (=> (and (and (= (type |op#0@@8|) DatatypeTypeType) ($Is |op#0@@8| Tclass.BetreeGraph.ReadOp)) (|Seq#Contains| |ops#0@@6| ($Box |op#0@@8|))) (BetreeBlockInterface.__default.ReadStep |s#0@@366| |op#0@@8|)) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.42:12| :skolemid |4566| :pattern ( (BetreeBlockInterface.__default.ReadStep |s#0@@366| |op#0@@8|)) :pattern ( (|Seq#Contains| |ops#0@@6| ($Box |op#0@@8|))) ))))) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.37:19| :skolemid |4568| :pattern ( (BetreeBlockInterface.__default.Reads |s#0@@366| |ops#0@@6|)) ))))
(assert  (=> true (forall ((|s#0@@367| T@U) (|ops#0@@7| T@U) ) (!  (=> (and (and (= (type |s#0@@367|) DatatypeTypeType) (= (type |ops#0@@7|) (SeqType BoxType))) (or (|BetreeBlockInterface.__default.Reads#canCall| (Lit |s#0@@367|) (Lit |ops#0@@7|)) (and ($Is |s#0@@367| Tclass.BetreeBlockInterface.Variables) ($Is |ops#0@@7| (TSeq Tclass.BetreeGraph.ReadOp))))) (and (forall ((|op#1| T@U) ) (!  (=> (and (and (= (type |op#1|) DatatypeTypeType) ($Is |op#1| Tclass.BetreeGraph.ReadOp)) (|Seq#Contains| |ops#0@@7| ($Box |op#1|))) (|BetreeBlockInterface.__default.ReadStep#canCall| (Lit |s#0@@367|) |op#1|)) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.42:12| :skolemid |4570| :pattern ( (BetreeBlockInterface.__default.ReadStep |s#0@@367| |op#1|)) :pattern ( (|Seq#Contains| |ops#0@@7| ($Box |op#1|))) )) (= (BetreeBlockInterface.__default.Reads (Lit |s#0@@367|) (Lit |ops#0@@7|)) (forall ((|op#1@@0| T@U) ) (!  (=> (and (and (= (type |op#1@@0|) DatatypeTypeType) ($Is |op#1@@0| Tclass.BetreeGraph.ReadOp)) (|Seq#Contains| |ops#0@@7| ($Box |op#1@@0|))) (BetreeBlockInterface.__default.ReadStep (Lit |s#0@@367|) |op#1@@0|)) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.42:12| :skolemid |4569| :pattern ( (BetreeBlockInterface.__default.ReadStep |s#0@@367| |op#1@@0|)) :pattern ( (|Seq#Contains| |ops#0@@7| ($Box |op#1@@0|))) ))))) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.37:19| :weight 3 :skolemid |4571| :pattern ( (BetreeBlockInterface.__default.Reads (Lit |s#0@@367|) (Lit |ops#0@@7|))) ))))
(assert  (=> true (forall ((|s#0@@368| T@U) (|s'#0@@91| T@U) (|ops#0@@8| T@U) (|path#0@@44| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@368|) DatatypeTypeType) (= (type |s'#0@@91|) DatatypeTypeType)) (= (type |ops#0@@8|) (SeqType BoxType))) (= (type |path#0@@44|) (SeqType BoxType))) (or (|BetreeBlockInterface.__default.IsStatePath#canCall| |s#0@@368| |s'#0@@91| |ops#0@@8| |path#0@@44|) (and (and (and ($Is |s#0@@368| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@91| Tclass.BetreeBlockInterface.Variables)) ($Is |ops#0@@8| (TSeq Tclass.BetreeGraph.Op))) ($Is |path#0@@44| (TSeq Tclass.BetreeBlockInterface.Variables))))) true) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.45:25| :skolemid |4572| :pattern ( (BetreeBlockInterface.__default.IsStatePath |s#0@@368| |s'#0@@91| |ops#0@@8| |path#0@@44|)) ))))
(assert (forall ((|s#0@@369| T@U) (|s'#0@@92| T@U) (|ops#0@@9| T@U) (|path#0@@45| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@369|) DatatypeTypeType) (= (type |s'#0@@92|) DatatypeTypeType)) (= (type |ops#0@@9|) (SeqType BoxType))) (= (type |path#0@@45|) (SeqType BoxType))) (and (and (and ($Is |s#0@@369| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@92| Tclass.BetreeBlockInterface.Variables)) ($Is |ops#0@@9| (TSeq Tclass.BetreeGraph.Op))) ($Is |path#0@@45| (TSeq Tclass.BetreeBlockInterface.Variables)))) (= (|BetreeBlockInterface.__default.IsStatePath#requires| |s#0@@369| |s'#0@@92| |ops#0@@9| |path#0@@45|) true)) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.45:25| :skolemid |4573| :pattern ( (|BetreeBlockInterface.__default.IsStatePath#requires| |s#0@@369| |s'#0@@92| |ops#0@@9| |path#0@@45|)) )))
(assert  (=> true (forall ((|s#0@@370| T@U) (|s'#0@@93| T@U) (|ops#0@@10| T@U) (|path#0@@46| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@370|) DatatypeTypeType) (= (type |s'#0@@93|) DatatypeTypeType)) (= (type |ops#0@@10|) (SeqType BoxType))) (= (type |path#0@@46|) (SeqType BoxType))) (or (|BetreeBlockInterface.__default.IsStatePath#canCall| |s#0@@370| |s'#0@@93| |ops#0@@10| |path#0@@46|) (and (and (and ($Is |s#0@@370| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@93| Tclass.BetreeBlockInterface.Variables)) ($Is |ops#0@@10| (TSeq Tclass.BetreeGraph.Op))) ($Is |path#0@@46| (TSeq Tclass.BetreeBlockInterface.Variables))))) (and (=> (= (|Seq#Length| |path#0@@46|) (+ (|Seq#Length| |ops#0@@10|) 1)) (and (and (|$IsA#BetreeBlockInterface.Variables| ($Unbox DatatypeTypeType (|Seq#Index| |path#0@@46| (LitInt 0)))) (|$IsA#BetreeBlockInterface.Variables| |s#0@@370|)) (=> (|BetreeBlockInterface.Variables#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |path#0@@46| (LitInt 0))) |s#0@@370|) (and (and (and (|$IsA#BetreeBlockInterface.Variables| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BetreeBlockInterface.Variables |path#0@@46|))) (|$IsA#BetreeBlockInterface.Variables| |s'#0@@93|)) (|Sequences.__default.Last#canCall| Tclass.BetreeBlockInterface.Variables |path#0@@46|)) (=> (|BetreeBlockInterface.Variables#Equal| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BetreeBlockInterface.Variables |path#0@@46|)) |s'#0@@93|) (forall ((|i#0@@132| Int) (|_t#0#0@@3| Int) ) (!  (=> (= |_t#0#0@@3| (+ |i#0@@132| 1)) (=> (<= (LitInt 0) |i#0@@132|) (=> (< |i#0@@132| (|Seq#Length| |ops#0@@10|)) (|BetreeBlockInterface.__default.OpStep#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |path#0@@46| |i#0@@132|)) ($Unbox DatatypeTypeType (|Seq#Index| |path#0@@46| |_t#0#0@@3|)) ($Unbox DatatypeTypeType (|Seq#Index| |ops#0@@10| |i#0@@132|)))))) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.50:16| :skolemid |4575| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |ops#0@@10| |i#0@@132|)) ($Unbox DatatypeTypeType (|Seq#Index| |path#0@@46| |_t#0#0@@3|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |path#0@@46| |_t#0#0@@3|)) ($Unbox DatatypeTypeType (|Seq#Index| |path#0@@46| |i#0@@132|))) ))))))) (= (BetreeBlockInterface.__default.IsStatePath |s#0@@370| |s'#0@@93| |ops#0@@10| |path#0@@46|)  (and (and (and (= (|Seq#Length| |path#0@@46|) (+ (|Seq#Length| |ops#0@@10|) 1)) (|BetreeBlockInterface.Variables#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |path#0@@46| (LitInt 0))) |s#0@@370|)) (|BetreeBlockInterface.Variables#Equal| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BetreeBlockInterface.Variables |path#0@@46|)) |s'#0@@93|)) (forall ((|i#0@@133| Int) (|_t#0#0@@4| Int) ) (!  (=> (= |_t#0#0@@4| (+ |i#0@@133| 1)) (=> (and (<= (LitInt 0) |i#0@@133|) (< |i#0@@133| (|Seq#Length| |ops#0@@10|))) (BetreeBlockInterface.__default.OpStep ($Unbox DatatypeTypeType (|Seq#Index| |path#0@@46| |i#0@@133|)) ($Unbox DatatypeTypeType (|Seq#Index| |path#0@@46| |_t#0#0@@4|)) ($Unbox DatatypeTypeType (|Seq#Index| |ops#0@@10| |i#0@@133|))))) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.50:16| :skolemid |4574| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |ops#0@@10| |i#0@@133|)) ($Unbox DatatypeTypeType (|Seq#Index| |path#0@@46| |_t#0#0@@4|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |path#0@@46| |_t#0#0@@4|)) ($Unbox DatatypeTypeType (|Seq#Index| |path#0@@46| |i#0@@133|))) )))))) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.45:25| :skolemid |4576| :pattern ( (BetreeBlockInterface.__default.IsStatePath |s#0@@370| |s'#0@@93| |ops#0@@10| |path#0@@46|)) ))))
(assert  (=> true (forall ((|s#0@@371| T@U) (|s'#0@@94| T@U) (|ops#0@@11| T@U) (|path#0@@47| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@371|) DatatypeTypeType) (= (type |s'#0@@94|) DatatypeTypeType)) (= (type |ops#0@@11|) (SeqType BoxType))) (= (type |path#0@@47|) (SeqType BoxType))) (or (|BetreeBlockInterface.__default.IsStatePath#canCall| (Lit |s#0@@371|) (Lit |s'#0@@94|) (Lit |ops#0@@11|) (Lit |path#0@@47|)) (and (and (and ($Is |s#0@@371| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@94| Tclass.BetreeBlockInterface.Variables)) ($Is |ops#0@@11| (TSeq Tclass.BetreeGraph.Op))) ($Is |path#0@@47| (TSeq Tclass.BetreeBlockInterface.Variables))))) (and (=> (= (|Seq#Length| (Lit |path#0@@47|)) (+ (|Seq#Length| (Lit |ops#0@@11|)) 1)) (and (and (|$IsA#BetreeBlockInterface.Variables| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |path#0@@47|) (LitInt 0)))) (|$IsA#BetreeBlockInterface.Variables| (Lit |s#0@@371|))) (=> (|BetreeBlockInterface.Variables#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |path#0@@47|) (LitInt 0))) |s#0@@371|) (and (and (and (|$IsA#BetreeBlockInterface.Variables| (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BetreeBlockInterface.Variables (Lit |path#0@@47|))))) (|$IsA#BetreeBlockInterface.Variables| (Lit |s'#0@@94|))) (|Sequences.__default.Last#canCall| Tclass.BetreeBlockInterface.Variables (Lit |path#0@@47|))) (=> (|BetreeBlockInterface.Variables#Equal| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BetreeBlockInterface.Variables (Lit |path#0@@47|))) |s'#0@@94|) (forall ((|i#1@@55| Int) (|_t#0#1@@3| Int) ) (!  (=> (= |_t#0#1@@3| (+ |i#1@@55| 1)) (=> (<= (LitInt 0) |i#1@@55|) (=> (< |i#1@@55| (|Seq#Length| (Lit |ops#0@@11|))) (|BetreeBlockInterface.__default.OpStep#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |path#0@@47|) |i#1@@55|)) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |path#0@@47|) |_t#0#1@@3|)) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |ops#0@@11|) |i#1@@55|)))))) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.50:16| :skolemid |4578| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |ops#0@@11| |i#1@@55|)) ($Unbox DatatypeTypeType (|Seq#Index| |path#0@@47| |_t#0#1@@3|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |path#0@@47| |_t#0#1@@3|)) ($Unbox DatatypeTypeType (|Seq#Index| |path#0@@47| |i#1@@55|))) ))))))) (= (BetreeBlockInterface.__default.IsStatePath (Lit |s#0@@371|) (Lit |s'#0@@94|) (Lit |ops#0@@11|) (Lit |path#0@@47|))  (and (and (and (= (|Seq#Length| (Lit |path#0@@47|)) (+ (|Seq#Length| (Lit |ops#0@@11|)) 1)) (|BetreeBlockInterface.Variables#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |path#0@@47|) (LitInt 0))) |s#0@@371|)) (|BetreeBlockInterface.Variables#Equal| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BetreeBlockInterface.Variables (Lit |path#0@@47|))) |s'#0@@94|)) (forall ((|i#1@@56| Int) (|_t#0#1@@4| Int) ) (!  (=> (= |_t#0#1@@4| (+ |i#1@@56| 1)) (=> (and (<= (LitInt 0) |i#1@@56|) (< |i#1@@56| (|Seq#Length| (Lit |ops#0@@11|)))) (BetreeBlockInterface.__default.OpStep ($Unbox DatatypeTypeType (|Seq#Index| (Lit |path#0@@47|) |i#1@@56|)) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |path#0@@47|) |_t#0#1@@4|)) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |ops#0@@11|) |i#1@@56|))))) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.50:16| :skolemid |4577| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |ops#0@@11| |i#1@@56|)) ($Unbox DatatypeTypeType (|Seq#Index| |path#0@@47| |_t#0#1@@4|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |path#0@@47| |_t#0#1@@4|)) ($Unbox DatatypeTypeType (|Seq#Index| |path#0@@47| |i#1@@56|))) )))))) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.45:25| :weight 3 :skolemid |4579| :pattern ( (BetreeBlockInterface.__default.IsStatePath (Lit |s#0@@371|) (Lit |s'#0@@94|) (Lit |ops#0@@11|) (Lit |path#0@@47|))) ))))
(assert (forall (($ly@@567 T@U) (|s#0@@372| T@U) (|s'#0@@95| T@U) (|ops#0@@12| T@U) ) (!  (=> (and (and (and (= (type $ly@@567) LayerTypeType) (= (type |s#0@@372|) DatatypeTypeType)) (= (type |s'#0@@95|) DatatypeTypeType)) (= (type |ops#0@@12|) (SeqType BoxType))) (= (BetreeBlockInterface.__default.OpTransaction ($LS $ly@@567) |s#0@@372| |s'#0@@95| |ops#0@@12|) (BetreeBlockInterface.__default.OpTransaction $ly@@567 |s#0@@372| |s'#0@@95| |ops#0@@12|))) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.133:23| :skolemid |4580| :pattern ( (BetreeBlockInterface.__default.OpTransaction ($LS $ly@@567) |s#0@@372| |s'#0@@95| |ops#0@@12|)) )))
(assert (forall (($ly@@568 T@U) (|s#0@@373| T@U) (|s'#0@@96| T@U) (|ops#0@@13| T@U) ) (!  (=> (and (and (and (= (type $ly@@568) LayerTypeType) (= (type |s#0@@373|) DatatypeTypeType)) (= (type |s'#0@@96|) DatatypeTypeType)) (= (type |ops#0@@13|) (SeqType BoxType))) (= (BetreeBlockInterface.__default.OpTransaction $ly@@568 |s#0@@373| |s'#0@@96| |ops#0@@13|) (BetreeBlockInterface.__default.OpTransaction $LZ |s#0@@373| |s'#0@@96| |ops#0@@13|))) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.133:23| :skolemid |4581| :pattern ( (BetreeBlockInterface.__default.OpTransaction (AsFuelBottom $ly@@568) |s#0@@373| |s'#0@@96| |ops#0@@13|)) )))
(assert  (=> true (forall (($ly@@569 T@U) (|s#0@@374| T@U) (|s'#0@@97| T@U) (|ops#0@@14| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@569) LayerTypeType) (= (type |s#0@@374|) DatatypeTypeType)) (= (type |s'#0@@97|) DatatypeTypeType)) (= (type |ops#0@@14|) (SeqType BoxType))) (or (|BetreeBlockInterface.__default.OpTransaction#canCall| |s#0@@374| |s'#0@@97| |ops#0@@14|) (and (and ($Is |s#0@@374| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@97| Tclass.BetreeBlockInterface.Variables)) ($Is |ops#0@@14| (TSeq Tclass.BetreeGraph.Op))))) (and (and (and (and (and (=> (and (BetreeBlockInterface.__default.OpTransaction $ly@@569 |s#0@@374| |s'#0@@97| |ops#0@@14|) (= (|Seq#Length| |ops#0@@14|) (LitInt 1))) (and true (BetreeBlockInterface.__default.OpStep |s#0@@374| |s'#0@@97| ($Unbox DatatypeTypeType (|Seq#Index| |ops#0@@14| (LitInt 0)))))) (=> (and (BetreeBlockInterface.__default.OpTransaction $ly@@569 |s#0@@374| |s'#0@@97| |ops#0@@14|) (= (|Seq#Length| |ops#0@@14|) (LitInt 2))) (exists ((|sint#0| T@U) ) (!  (and (= (type |sint#0|) DatatypeTypeType) (and ($Is |sint#0| Tclass.BetreeBlockInterface.Variables) (and (BetreeBlockInterface.__default.OpStep |s#0@@374| |sint#0| ($Unbox DatatypeTypeType (|Seq#Index| |ops#0@@14| (LitInt 0)))) (BetreeBlockInterface.__default.OpStep |sint#0| |s'#0@@97| ($Unbox DatatypeTypeType (|Seq#Index| |ops#0@@14| (LitInt 1))))))) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.137:64| :skolemid |4582| :pattern ( (BetreeBlockInterface.__default.OpStep |sint#0| |s'#0@@97| ($Unbox DatatypeTypeType (|Seq#Index| |ops#0@@14| 1)))) :pattern ( (BetreeBlockInterface.__default.OpStep |s#0@@374| |sint#0| ($Unbox DatatypeTypeType (|Seq#Index| |ops#0@@14| 0)))) )))) (=> (and (BetreeBlockInterface.__default.OpTransaction $ly@@569 |s#0@@374| |s'#0@@97| |ops#0@@14|) (= (|Seq#Length| |ops#0@@14|) (LitInt 3))) (exists ((|sint#1| T@U) (|sint'#0| T@U) ) (!  (and (and (= (type |sint#1|) DatatypeTypeType) (= (type |sint'#0|) DatatypeTypeType)) (and (and ($Is |sint#1| Tclass.BetreeBlockInterface.Variables) ($Is |sint'#0| Tclass.BetreeBlockInterface.Variables)) (and (and (BetreeBlockInterface.__default.OpStep |s#0@@374| |sint#1| ($Unbox DatatypeTypeType (|Seq#Index| |ops#0@@14| (LitInt 0)))) (BetreeBlockInterface.__default.OpStep |sint#1| |sint'#0| ($Unbox DatatypeTypeType (|Seq#Index| |ops#0@@14| (LitInt 1))))) (BetreeBlockInterface.__default.OpStep |sint'#0| |s'#0@@97| ($Unbox DatatypeTypeType (|Seq#Index| |ops#0@@14| (LitInt 2))))))) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.140:64| :skolemid |4583| :pattern ( (BetreeBlockInterface.__default.OpStep |sint'#0| |s'#0@@97| ($Unbox DatatypeTypeType (|Seq#Index| |ops#0@@14| 2))) (BetreeBlockInterface.__default.OpStep |s#0@@374| |sint#1| ($Unbox DatatypeTypeType (|Seq#Index| |ops#0@@14| 0)))) :pattern ( (BetreeBlockInterface.__default.OpStep |sint#1| |sint'#0| ($Unbox DatatypeTypeType (|Seq#Index| |ops#0@@14| 1)))) )))) (=> (and (= (|Seq#Length| |ops#0@@14|) (LitInt 1)) (BetreeBlockInterface.__default.OpStep |s#0@@374| |s'#0@@97| ($Unbox DatatypeTypeType (|Seq#Index| |ops#0@@14| (LitInt 0))))) (BetreeBlockInterface.__default.OpTransaction $ly@@569 |s#0@@374| |s'#0@@97| |ops#0@@14|))) (=> (and (BetreeBlockInterface.__default.OpTransaction $ly@@569 |s#0@@374| |s'#0@@97| |ops#0@@14|) (= (|Seq#Length| |ops#0@@14|) (LitInt 0))) (|BetreeBlockInterface.Variables#Equal| |s#0@@374| |s'#0@@97|))) (=> (and (= (|Seq#Length| |ops#0@@14|) (LitInt 0)) (|BetreeBlockInterface.Variables#Equal| |s#0@@374| |s'#0@@97|)) (BetreeBlockInterface.__default.OpTransaction $ly@@569 |s#0@@374| |s'#0@@97| |ops#0@@14|)))) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.133:23| :skolemid |4584| :pattern ( (BetreeBlockInterface.__default.OpTransaction $ly@@569 |s#0@@374| |s'#0@@97| |ops#0@@14|)) ))))
(assert (forall (($ly@@570 T@U) (|s#0@@375| T@U) (|s'#0@@98| T@U) (|ops#0@@15| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@570) LayerTypeType) (= (type |s#0@@375|) DatatypeTypeType)) (= (type |s'#0@@98|) DatatypeTypeType)) (= (type |ops#0@@15|) (SeqType BoxType))) (and (and ($Is |s#0@@375| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@98| Tclass.BetreeBlockInterface.Variables)) ($Is |ops#0@@15| (TSeq Tclass.BetreeGraph.Op)))) (= (|BetreeBlockInterface.__default.OpTransaction#requires| $ly@@570 |s#0@@375| |s'#0@@98| |ops#0@@15|) true)) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.133:23| :skolemid |4585| :pattern ( (|BetreeBlockInterface.__default.OpTransaction#requires| $ly@@570 |s#0@@375| |s'#0@@98| |ops#0@@15|)) )))
(assert  (=> true (forall (($ly@@571 T@U) (|s#0@@376| T@U) (|s'#0@@99| T@U) (|ops#0@@16| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@571) LayerTypeType) (= (type |s#0@@376|) DatatypeTypeType)) (= (type |s'#0@@99|) DatatypeTypeType)) (= (type |ops#0@@16|) (SeqType BoxType))) (or (|BetreeBlockInterface.__default.OpTransaction#canCall| |s#0@@376| |s'#0@@99| |ops#0@@16|) (and (and ($Is |s#0@@376| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@99| Tclass.BetreeBlockInterface.Variables)) ($Is |ops#0@@16| (TSeq Tclass.BetreeGraph.Op))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|path#0@@48| T@U) ) (!  (=> (and (= (type |path#0@@48|) (SeqType BoxType)) ($Is |path#0@@48| (TSeq Tclass.BetreeBlockInterface.Variables))) (|BetreeBlockInterface.__default.IsStatePath#canCall| |s#0@@376| |s'#0@@99| |ops#0@@16| |path#0@@48|)) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.152:16| :skolemid |4587| :pattern ( (BetreeBlockInterface.__default.IsStatePath |s#0@@376| |s'#0@@99| |ops#0@@16| |path#0@@48|)) ))) (= (BetreeBlockInterface.__default.OpTransaction ($LS $ly@@571) |s#0@@376| |s'#0@@99| |ops#0@@16|)  (and true (exists ((|path#0@@49| T@U) ) (!  (and (= (type |path#0@@49|) (SeqType BoxType)) (and ($Is |path#0@@49| (TSeq Tclass.BetreeBlockInterface.Variables)) (BetreeBlockInterface.__default.IsStatePath |s#0@@376| |s'#0@@99| |ops#0@@16| |path#0@@49|))) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.152:16| :skolemid |4586| :pattern ( (BetreeBlockInterface.__default.IsStatePath |s#0@@376| |s'#0@@99| |ops#0@@16| |path#0@@49|)) )))))) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.133:23| :skolemid |4588| :pattern ( (BetreeBlockInterface.__default.OpTransaction ($LS $ly@@571) |s#0@@376| |s'#0@@99| |ops#0@@16|)) ))))
(assert  (=> true (forall (($ly@@572 T@U) (|s#0@@377| T@U) (|s'#0@@100| T@U) (|ops#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@572) LayerTypeType) (= (type |s#0@@377|) DatatypeTypeType)) (= (type |s'#0@@100|) DatatypeTypeType)) (= (type |ops#0@@17|) (SeqType BoxType))) (or (|BetreeBlockInterface.__default.OpTransaction#canCall| (Lit |s#0@@377|) (Lit |s'#0@@100|) (Lit |ops#0@@17|)) (and (and ($Is |s#0@@377| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@100| Tclass.BetreeBlockInterface.Variables)) ($Is |ops#0@@17| (TSeq Tclass.BetreeGraph.Op))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|path#1@@5| T@U) ) (!  (=> (and (= (type |path#1@@5|) (SeqType BoxType)) ($Is |path#1@@5| (TSeq Tclass.BetreeBlockInterface.Variables))) (|BetreeBlockInterface.__default.IsStatePath#canCall| (Lit |s#0@@377|) (Lit |s'#0@@100|) (Lit |ops#0@@17|) |path#1@@5|)) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.152:16| :skolemid |4590| :pattern ( (BetreeBlockInterface.__default.IsStatePath |s#0@@377| |s'#0@@100| |ops#0@@17| |path#1@@5|)) ))) (= (BetreeBlockInterface.__default.OpTransaction ($LS $ly@@572) (Lit |s#0@@377|) (Lit |s'#0@@100|) (Lit |ops#0@@17|))  (and true (exists ((|path#1@@6| T@U) ) (!  (and (= (type |path#1@@6|) (SeqType BoxType)) (and ($Is |path#1@@6| (TSeq Tclass.BetreeBlockInterface.Variables)) (BetreeBlockInterface.__default.IsStatePath (Lit |s#0@@377|) (Lit |s'#0@@100|) (Lit |ops#0@@17|) |path#1@@6|))) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.152:16| :skolemid |4589| :pattern ( (BetreeBlockInterface.__default.IsStatePath |s#0@@377| |s'#0@@100| |ops#0@@17| |path#1@@6|)) )))))) :qid |TransactableidfyBlockInterfaceBetreeBlockInterface.133:23| :weight 3 :skolemid |4591| :pattern ( (BetreeBlockInterface.__default.OpTransaction ($LS $ly@@572) (Lit |s#0@@377|) (Lit |s'#0@@100|) (Lit |ops#0@@17|))) ))))
(assert (forall ((arg0@@720 T@U) ) (! (= (type (|#BetreeBlockInterface.Variables.Variables| arg0@@720)) DatatypeTypeType) :qid |funType:#BetreeBlockInterface.Variables.Variables| :pattern ( (|#BetreeBlockInterface.Variables.Variables| arg0@@720)) )))
(assert (forall ((|a#0#0#0@@6| T@U) ) (!  (=> (= (type |a#0#0#0@@6|) (IMapType BoxType BoxType)) (= (DatatypeCtorId (|#BetreeBlockInterface.Variables.Variables| |a#0#0#0@@6|)) |##BetreeBlockInterface.Variables.Variables|)) :qid |BlockInterfaceidfyBetreeBlockInterface.23:34| :skolemid |4592| :pattern ( (|#BetreeBlockInterface.Variables.Variables| |a#0#0#0@@6|)) )))
(assert (forall ((d@@257 T@U) ) (!  (=> (= (type d@@257) DatatypeTypeType) (= (BetreeBlockInterface.Variables.Variables_q d@@257) (= (DatatypeCtorId d@@257) |##BetreeBlockInterface.Variables.Variables|))) :qid |unknown.0:0| :skolemid |4593| :pattern ( (BetreeBlockInterface.Variables.Variables_q d@@257)) )))
(assert (forall ((d@@258 T@U) ) (!  (=> (and (= (type d@@258) DatatypeTypeType) (BetreeBlockInterface.Variables.Variables_q d@@258)) (exists ((|a#1#0#0@@6| T@U) ) (!  (and (= (type |a#1#0#0@@6|) (IMapType BoxType BoxType)) (= d@@258 (|#BetreeBlockInterface.Variables.Variables| |a#1#0#0@@6|))) :qid |BlockInterfaceidfyBetreeBlockInterface.23:34| :skolemid |4594| :no-pattern (type |a#1#0#0@@6|) :no-pattern (U_2_int |a#1#0#0@@6|) :no-pattern (U_2_bool |a#1#0#0@@6|) ))) :qid |unknown.0:0| :skolemid |4595| :pattern ( (BetreeBlockInterface.Variables.Variables_q d@@258)) )))
(assert (forall ((|a#2#0#0@@6| T@U) ) (!  (=> (= (type |a#2#0#0@@6|) (IMapType BoxType BoxType)) (= ($Is (|#BetreeBlockInterface.Variables.Variables| |a#2#0#0@@6|) Tclass.BetreeBlockInterface.Variables) ($Is |a#2#0#0@@6| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)))) :qid |BlockInterfaceidfyBetreeBlockInterface.23:34| :skolemid |4596| :pattern ( ($Is (|#BetreeBlockInterface.Variables.Variables| |a#2#0#0@@6|) Tclass.BetreeBlockInterface.Variables)) )))
(assert (forall ((|a#3#0#0@@6| T@U) ($h@@228 T@U) ) (!  (=> (and (and (= (type |a#3#0#0@@6|) (IMapType BoxType BoxType)) (= (type $h@@228) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@228)) (= ($IsAlloc (|#BetreeBlockInterface.Variables.Variables| |a#3#0#0@@6|) Tclass.BetreeBlockInterface.Variables $h@@228) ($IsAlloc |a#3#0#0@@6| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node) $h@@228))) :qid |BlockInterfaceidfyBetreeBlockInterface.23:34| :skolemid |4597| :pattern ( ($IsAlloc (|#BetreeBlockInterface.Variables.Variables| |a#3#0#0@@6|) Tclass.BetreeBlockInterface.Variables $h@@228)) )))
(assert (forall ((d@@259 T@U) ($h@@229 T@U) ) (!  (=> (and (and (= (type d@@259) DatatypeTypeType) (= (type $h@@229) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@229) (and (BetreeBlockInterface.Variables.Variables_q d@@259) ($IsAlloc d@@259 Tclass.BetreeBlockInterface.Variables $h@@229)))) ($IsAlloc (BetreeBlockInterface.Variables.view d@@259) (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node) $h@@229)) :qid |unknown.0:0| :skolemid |4598| :pattern ( ($IsAlloc (BetreeBlockInterface.Variables.view d@@259) (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node) $h@@229)) )))
(assert (forall ((|a#4#0#0@@6| T@U) ) (!  (=> (= (type |a#4#0#0@@6|) (IMapType BoxType BoxType)) (= (|#BetreeBlockInterface.Variables.Variables| (Lit |a#4#0#0@@6|)) (Lit (|#BetreeBlockInterface.Variables.Variables| |a#4#0#0@@6|)))) :qid |BlockInterfaceidfyBetreeBlockInterface.23:34| :skolemid |4599| :pattern ( (|#BetreeBlockInterface.Variables.Variables| (Lit |a#4#0#0@@6|))) )))
(assert (forall ((|a#5#0#0@@7| T@U) ) (!  (=> (= (type |a#5#0#0@@7|) (IMapType BoxType BoxType)) (= (BetreeBlockInterface.Variables.view (|#BetreeBlockInterface.Variables.Variables| |a#5#0#0@@7|)) |a#5#0#0@@7|)) :qid |BlockInterfaceidfyBetreeBlockInterface.23:34| :skolemid |4600| :pattern ( (|#BetreeBlockInterface.Variables.Variables| |a#5#0#0@@7|)) )))
(assert (forall ((|a#6#0#0@@7| T@U) (d@@260 T@U) ) (!  (=> (and (and (= (type |a#6#0#0@@7|) (IMapType BoxType BoxType)) (= (type d@@260) DatatypeTypeType)) (U_2_bool (MapType0Select (|IMap#Domain| |a#6#0#0@@7|) ($Box d@@260)))) (< (DtRank d@@260) (DtRank (|#BetreeBlockInterface.Variables.Variables| |a#6#0#0@@7|)))) :qid |BlockInterfaceidfyBetreeBlockInterface.23:34| :skolemid |4601| :pattern ( (MapType0Select (|IMap#Domain| |a#6#0#0@@7|) ($Box d@@260)) (|#BetreeBlockInterface.Variables.Variables| |a#6#0#0@@7|)) )))
(assert (forall ((|a#7#0#0@@7| T@U) (bx@@197 T@U) ) (!  (=> (and (and (= (type |a#7#0#0@@7|) (IMapType BoxType BoxType)) (= (type bx@@197) BoxType)) (U_2_bool (MapType0Select (|IMap#Domain| |a#7#0#0@@7|) bx@@197))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |a#7#0#0@@7|) bx@@197))) (DtRank (|#BetreeBlockInterface.Variables.Variables| |a#7#0#0@@7|)))) :qid |BlockInterfaceidfyBetreeBlockInterface.23:34| :skolemid |4602| :pattern ( (MapType0Select (|IMap#Domain| |a#7#0#0@@7|) bx@@197) (|#BetreeBlockInterface.Variables.Variables| |a#7#0#0@@7|)) )))
(assert (forall ((d@@261 T@U) ) (!  (=> (and (= (type d@@261) DatatypeTypeType) (|$IsA#BetreeBlockInterface.Variables| d@@261)) (BetreeBlockInterface.Variables.Variables_q d@@261)) :qid |unknown.0:0| :skolemid |4603| :pattern ( (|$IsA#BetreeBlockInterface.Variables| d@@261)) )))
(assert (forall ((d@@262 T@U) ) (!  (=> (and (= (type d@@262) DatatypeTypeType) ($Is d@@262 Tclass.BetreeBlockInterface.Variables)) (BetreeBlockInterface.Variables.Variables_q d@@262)) :qid |unknown.0:0| :skolemid |4604| :pattern ( (BetreeBlockInterface.Variables.Variables_q d@@262) ($Is d@@262 Tclass.BetreeBlockInterface.Variables)) )))
(assert (forall ((a@@203 T@U) (b@@140 T@U) ) (!  (=> (and (and (= (type a@@203) DatatypeTypeType) (= (type b@@140) DatatypeTypeType)) true) (= (|BetreeBlockInterface.Variables#Equal| a@@203 b@@140) (|IMap#Equal| (BetreeBlockInterface.Variables.view a@@203) (BetreeBlockInterface.Variables.view b@@140)))) :qid |unknown.0:0| :skolemid |4605| :pattern ( (|BetreeBlockInterface.Variables#Equal| a@@203 b@@140)) )))
(assert (forall ((a@@204 T@U) (b@@141 T@U) ) (!  (=> (and (= (type a@@204) DatatypeTypeType) (= (type b@@141) DatatypeTypeType)) (= (|BetreeBlockInterface.Variables#Equal| a@@204 b@@141) (= a@@204 b@@141))) :qid |unknown.0:0| :skolemid |4606| :pattern ( (|BetreeBlockInterface.Variables#Equal| a@@204 b@@141)) )))
(assert (forall ((arg0@@721 T@U) ) (! (= (type (|#BetreeBlockInterface.Step.TransactionStep| arg0@@721)) DatatypeTypeType) :qid |funType:#BetreeBlockInterface.Step.TransactionStep| :pattern ( (|#BetreeBlockInterface.Step.TransactionStep| arg0@@721)) )))
(assert (forall ((|a#8#0#0@@7| T@U) ) (!  (=> (= (type |a#8#0#0@@7|) (SeqType BoxType)) (= (DatatypeCtorId (|#BetreeBlockInterface.Step.TransactionStep| |a#8#0#0@@7|)) |##BetreeBlockInterface.Step.TransactionStep|)) :qid |BlockInterfaceidfyBetreeBlockInterface.124:23| :skolemid |4607| :pattern ( (|#BetreeBlockInterface.Step.TransactionStep| |a#8#0#0@@7|)) )))
(assert (forall ((d@@263 T@U) ) (!  (=> (= (type d@@263) DatatypeTypeType) (= (BetreeBlockInterface.Step.TransactionStep_q d@@263) (= (DatatypeCtorId d@@263) |##BetreeBlockInterface.Step.TransactionStep|))) :qid |unknown.0:0| :skolemid |4608| :pattern ( (BetreeBlockInterface.Step.TransactionStep_q d@@263)) )))
(assert (forall ((d@@264 T@U) ) (!  (=> (and (= (type d@@264) DatatypeTypeType) (BetreeBlockInterface.Step.TransactionStep_q d@@264)) (exists ((|a#9#0#0@@6| T@U) ) (!  (and (= (type |a#9#0#0@@6|) (SeqType BoxType)) (= d@@264 (|#BetreeBlockInterface.Step.TransactionStep| |a#9#0#0@@6|))) :qid |BlockInterfaceidfyBetreeBlockInterface.124:23| :skolemid |4609| :no-pattern (type |a#9#0#0@@6|) :no-pattern (U_2_int |a#9#0#0@@6|) :no-pattern (U_2_bool |a#9#0#0@@6|) ))) :qid |unknown.0:0| :skolemid |4610| :pattern ( (BetreeBlockInterface.Step.TransactionStep_q d@@264)) )))
(assert (forall ((|a#10#0#0@@6| T@U) ) (!  (=> (= (type |a#10#0#0@@6|) (SeqType BoxType)) (= ($Is (|#BetreeBlockInterface.Step.TransactionStep| |a#10#0#0@@6|) Tclass.BetreeBlockInterface.Step) ($Is |a#10#0#0@@6| (TSeq Tclass.BetreeGraph.Op)))) :qid |BlockInterfaceidfyBetreeBlockInterface.124:23| :skolemid |4611| :pattern ( ($Is (|#BetreeBlockInterface.Step.TransactionStep| |a#10#0#0@@6|) Tclass.BetreeBlockInterface.Step)) )))
(assert (forall ((|a#11#0#0@@6| T@U) ($h@@230 T@U) ) (!  (=> (and (and (= (type |a#11#0#0@@6|) (SeqType BoxType)) (= (type $h@@230) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@230)) (= ($IsAlloc (|#BetreeBlockInterface.Step.TransactionStep| |a#11#0#0@@6|) Tclass.BetreeBlockInterface.Step $h@@230) ($IsAlloc |a#11#0#0@@6| (TSeq Tclass.BetreeGraph.Op) $h@@230))) :qid |BlockInterfaceidfyBetreeBlockInterface.124:23| :skolemid |4612| :pattern ( ($IsAlloc (|#BetreeBlockInterface.Step.TransactionStep| |a#11#0#0@@6|) Tclass.BetreeBlockInterface.Step $h@@230)) )))
(assert (forall ((d@@265 T@U) ($h@@231 T@U) ) (!  (=> (and (and (= (type d@@265) DatatypeTypeType) (= (type $h@@231) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@231) (and (BetreeBlockInterface.Step.TransactionStep_q d@@265) ($IsAlloc d@@265 Tclass.BetreeBlockInterface.Step $h@@231)))) ($IsAlloc (BetreeBlockInterface.Step.ops d@@265) (TSeq Tclass.BetreeGraph.Op) $h@@231)) :qid |unknown.0:0| :skolemid |4613| :pattern ( ($IsAlloc (BetreeBlockInterface.Step.ops d@@265) (TSeq Tclass.BetreeGraph.Op) $h@@231)) )))
(assert (forall ((|a#12#0#0@@4| T@U) ) (!  (=> (= (type |a#12#0#0@@4|) (SeqType BoxType)) (= (|#BetreeBlockInterface.Step.TransactionStep| (Lit |a#12#0#0@@4|)) (Lit (|#BetreeBlockInterface.Step.TransactionStep| |a#12#0#0@@4|)))) :qid |BlockInterfaceidfyBetreeBlockInterface.124:23| :skolemid |4614| :pattern ( (|#BetreeBlockInterface.Step.TransactionStep| (Lit |a#12#0#0@@4|))) )))
(assert (forall ((|a#13#0#0@@4| T@U) ) (!  (=> (= (type |a#13#0#0@@4|) (SeqType BoxType)) (= (BetreeBlockInterface.Step.ops (|#BetreeBlockInterface.Step.TransactionStep| |a#13#0#0@@4|)) |a#13#0#0@@4|)) :qid |BlockInterfaceidfyBetreeBlockInterface.124:23| :skolemid |4615| :pattern ( (|#BetreeBlockInterface.Step.TransactionStep| |a#13#0#0@@4|)) )))
(assert (forall ((|a#14#0#0@@5| T@U) (i@@34 Int) ) (!  (=> (= (type |a#14#0#0@@5|) (SeqType BoxType)) (=> (and (<= 0 i@@34) (< i@@34 (|Seq#Length| |a#14#0#0@@5|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#14#0#0@@5| i@@34))) (DtRank (|#BetreeBlockInterface.Step.TransactionStep| |a#14#0#0@@5|))))) :qid |BlockInterfaceidfyBetreeBlockInterface.124:23| :skolemid |4616| :pattern ( (|Seq#Index| |a#14#0#0@@5| i@@34) (|#BetreeBlockInterface.Step.TransactionStep| |a#14#0#0@@5|)) )))
(assert (forall ((|a#15#0#0@@5| T@U) ) (!  (=> (= (type |a#15#0#0@@5|) (SeqType BoxType)) (< (|Seq#Rank| |a#15#0#0@@5|) (DtRank (|#BetreeBlockInterface.Step.TransactionStep| |a#15#0#0@@5|)))) :qid |BlockInterfaceidfyBetreeBlockInterface.124:23| :skolemid |4617| :pattern ( (|#BetreeBlockInterface.Step.TransactionStep| |a#15#0#0@@5|)) )))
(assert (forall ((arg0@@722 T@U) ) (! (= (type (|#BetreeBlockInterface.Step.GCStep| arg0@@722)) DatatypeTypeType) :qid |funType:#BetreeBlockInterface.Step.GCStep| :pattern ( (|#BetreeBlockInterface.Step.GCStep| arg0@@722)) )))
(assert (forall ((|a#16#0#0@@5| T@U) ) (!  (=> (= (type |a#16#0#0@@5|) (MapType0Type BoxType boolType)) (= (DatatypeCtorId (|#BetreeBlockInterface.Step.GCStep| |a#16#0#0@@5|)) |##BetreeBlockInterface.Step.GCStep|)) :qid |BlockInterfaceidfyBetreeBlockInterface.125:14| :skolemid |4618| :pattern ( (|#BetreeBlockInterface.Step.GCStep| |a#16#0#0@@5|)) )))
(assert (forall ((d@@266 T@U) ) (!  (=> (= (type d@@266) DatatypeTypeType) (= (BetreeBlockInterface.Step.GCStep_q d@@266) (= (DatatypeCtorId d@@266) |##BetreeBlockInterface.Step.GCStep|))) :qid |unknown.0:0| :skolemid |4619| :pattern ( (BetreeBlockInterface.Step.GCStep_q d@@266)) )))
(assert (forall ((d@@267 T@U) ) (!  (=> (and (= (type d@@267) DatatypeTypeType) (BetreeBlockInterface.Step.GCStep_q d@@267)) (exists ((|a#17#0#0@@6| T@U) ) (!  (and (= (type |a#17#0#0@@6|) (MapType0Type BoxType boolType)) (= d@@267 (|#BetreeBlockInterface.Step.GCStep| |a#17#0#0@@6|))) :qid |BlockInterfaceidfyBetreeBlockInterface.125:14| :skolemid |4620| :no-pattern (type |a#17#0#0@@6|) :no-pattern (U_2_int |a#17#0#0@@6|) :no-pattern (U_2_bool |a#17#0#0@@6|) ))) :qid |unknown.0:0| :skolemid |4621| :pattern ( (BetreeBlockInterface.Step.GCStep_q d@@267)) )))
(assert (forall ((|a#18#0#0@@6| T@U) ) (!  (=> (= (type |a#18#0#0@@6|) (MapType0Type BoxType boolType)) (= ($Is (|#BetreeBlockInterface.Step.GCStep| |a#18#0#0@@6|) Tclass.BetreeBlockInterface.Step) ($Is |a#18#0#0@@6| (TISet Tclass.ReferenceType.Reference)))) :qid |BlockInterfaceidfyBetreeBlockInterface.125:14| :skolemid |4622| :pattern ( ($Is (|#BetreeBlockInterface.Step.GCStep| |a#18#0#0@@6|) Tclass.BetreeBlockInterface.Step)) )))
(assert (forall ((|a#19#0#0@@6| T@U) ($h@@232 T@U) ) (!  (=> (and (and (= (type |a#19#0#0@@6|) (MapType0Type BoxType boolType)) (= (type $h@@232) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@232)) (= ($IsAlloc (|#BetreeBlockInterface.Step.GCStep| |a#19#0#0@@6|) Tclass.BetreeBlockInterface.Step $h@@232) ($IsAlloc |a#19#0#0@@6| (TISet Tclass.ReferenceType.Reference) $h@@232))) :qid |BlockInterfaceidfyBetreeBlockInterface.125:14| :skolemid |4623| :pattern ( ($IsAlloc (|#BetreeBlockInterface.Step.GCStep| |a#19#0#0@@6|) Tclass.BetreeBlockInterface.Step $h@@232)) )))
(assert (forall ((d@@268 T@U) ($h@@233 T@U) ) (!  (=> (and (and (= (type d@@268) DatatypeTypeType) (= (type $h@@233) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@233) (and (BetreeBlockInterface.Step.GCStep_q d@@268) ($IsAlloc d@@268 Tclass.BetreeBlockInterface.Step $h@@233)))) ($IsAlloc (BetreeBlockInterface.Step.refs d@@268) (TISet Tclass.ReferenceType.Reference) $h@@233)) :qid |unknown.0:0| :skolemid |4624| :pattern ( ($IsAlloc (BetreeBlockInterface.Step.refs d@@268) (TISet Tclass.ReferenceType.Reference) $h@@233)) )))
(assert (forall ((|a#20#0#0@@6| T@U) ) (!  (=> (= (type |a#20#0#0@@6|) (MapType0Type BoxType boolType)) (= (|#BetreeBlockInterface.Step.GCStep| (Lit |a#20#0#0@@6|)) (Lit (|#BetreeBlockInterface.Step.GCStep| |a#20#0#0@@6|)))) :qid |BlockInterfaceidfyBetreeBlockInterface.125:14| :skolemid |4625| :pattern ( (|#BetreeBlockInterface.Step.GCStep| (Lit |a#20#0#0@@6|))) )))
(assert (forall ((|a#21#0#0@@6| T@U) ) (!  (=> (= (type |a#21#0#0@@6|) (MapType0Type BoxType boolType)) (= (BetreeBlockInterface.Step.refs (|#BetreeBlockInterface.Step.GCStep| |a#21#0#0@@6|)) |a#21#0#0@@6|)) :qid |BlockInterfaceidfyBetreeBlockInterface.125:14| :skolemid |4626| :pattern ( (|#BetreeBlockInterface.Step.GCStep| |a#21#0#0@@6|)) )))
(assert (forall ((|a#22#0#0@@6| T@U) (d@@269 T@U) ) (!  (=> (and (and (= (type |a#22#0#0@@6|) (MapType0Type BoxType boolType)) (= (type d@@269) DatatypeTypeType)) (U_2_bool (MapType0Select |a#22#0#0@@6| ($Box d@@269)))) (< (DtRank d@@269) (DtRank (|#BetreeBlockInterface.Step.GCStep| |a#22#0#0@@6|)))) :qid |BlockInterfaceidfyBetreeBlockInterface.125:14| :skolemid |4627| :pattern ( (MapType0Select |a#22#0#0@@6| ($Box d@@269)) (|#BetreeBlockInterface.Step.GCStep| |a#22#0#0@@6|)) )))
(assert (= (type |#BetreeBlockInterface.Step.StutterStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#BetreeBlockInterface.Step.StutterStep|) |##BetreeBlockInterface.Step.StutterStep|))
(assert (forall ((d@@270 T@U) ) (!  (=> (= (type d@@270) DatatypeTypeType) (= (BetreeBlockInterface.Step.StutterStep_q d@@270) (= (DatatypeCtorId d@@270) |##BetreeBlockInterface.Step.StutterStep|))) :qid |unknown.0:0| :skolemid |4628| :pattern ( (BetreeBlockInterface.Step.StutterStep_q d@@270)) )))
(assert (forall ((d@@271 T@U) ) (!  (=> (and (= (type d@@271) DatatypeTypeType) (BetreeBlockInterface.Step.StutterStep_q d@@271)) (= d@@271 |#BetreeBlockInterface.Step.StutterStep|)) :qid |unknown.0:0| :skolemid |4629| :pattern ( (BetreeBlockInterface.Step.StutterStep_q d@@271)) )))
(assert ($Is |#BetreeBlockInterface.Step.StutterStep| Tclass.BetreeBlockInterface.Step))
(assert (forall (($h@@234 T@U) ) (!  (=> (and (= (type $h@@234) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@234)) ($IsAlloc |#BetreeBlockInterface.Step.StutterStep| Tclass.BetreeBlockInterface.Step $h@@234)) :qid |DafnyPreludebpl.545:12| :skolemid |4630| :pattern ( ($IsAlloc |#BetreeBlockInterface.Step.StutterStep| Tclass.BetreeBlockInterface.Step $h@@234)) )))
(assert (= |#BetreeBlockInterface.Step.StutterStep| (Lit |#BetreeBlockInterface.Step.StutterStep|)))
(assert (forall ((d@@272 T@U) ) (!  (=> (and (= (type d@@272) DatatypeTypeType) (|$IsA#BetreeBlockInterface.Step| d@@272)) (or (or (BetreeBlockInterface.Step.TransactionStep_q d@@272) (BetreeBlockInterface.Step.GCStep_q d@@272)) (BetreeBlockInterface.Step.StutterStep_q d@@272))) :qid |unknown.0:0| :skolemid |4631| :pattern ( (|$IsA#BetreeBlockInterface.Step| d@@272)) )))
(assert (forall ((d@@273 T@U) ) (!  (=> (and (= (type d@@273) DatatypeTypeType) ($Is d@@273 Tclass.BetreeBlockInterface.Step)) (or (or (BetreeBlockInterface.Step.TransactionStep_q d@@273) (BetreeBlockInterface.Step.GCStep_q d@@273)) (BetreeBlockInterface.Step.StutterStep_q d@@273))) :qid |unknown.0:0| :skolemid |4632| :pattern ( (BetreeBlockInterface.Step.StutterStep_q d@@273) ($Is d@@273 Tclass.BetreeBlockInterface.Step)) :pattern ( (BetreeBlockInterface.Step.GCStep_q d@@273) ($Is d@@273 Tclass.BetreeBlockInterface.Step)) :pattern ( (BetreeBlockInterface.Step.TransactionStep_q d@@273) ($Is d@@273 Tclass.BetreeBlockInterface.Step)) )))
(assert (forall ((a@@205 T@U) (b@@142 T@U) ) (!  (=> (and (and (= (type a@@205) DatatypeTypeType) (= (type b@@142) DatatypeTypeType)) (and (BetreeBlockInterface.Step.TransactionStep_q a@@205) (BetreeBlockInterface.Step.TransactionStep_q b@@142))) (= (|BetreeBlockInterface.Step#Equal| a@@205 b@@142) (|Seq#Equal| (BetreeBlockInterface.Step.ops a@@205) (BetreeBlockInterface.Step.ops b@@142)))) :qid |unknown.0:0| :skolemid |4633| :pattern ( (|BetreeBlockInterface.Step#Equal| a@@205 b@@142) (BetreeBlockInterface.Step.TransactionStep_q a@@205)) :pattern ( (|BetreeBlockInterface.Step#Equal| a@@205 b@@142) (BetreeBlockInterface.Step.TransactionStep_q b@@142)) )))
(assert (forall ((a@@206 T@U) (b@@143 T@U) ) (!  (=> (and (and (= (type a@@206) DatatypeTypeType) (= (type b@@143) DatatypeTypeType)) (and (BetreeBlockInterface.Step.GCStep_q a@@206) (BetreeBlockInterface.Step.GCStep_q b@@143))) (= (|BetreeBlockInterface.Step#Equal| a@@206 b@@143) (|ISet#Equal| (BetreeBlockInterface.Step.refs a@@206) (BetreeBlockInterface.Step.refs b@@143)))) :qid |unknown.0:0| :skolemid |4634| :pattern ( (|BetreeBlockInterface.Step#Equal| a@@206 b@@143) (BetreeBlockInterface.Step.GCStep_q a@@206)) :pattern ( (|BetreeBlockInterface.Step#Equal| a@@206 b@@143) (BetreeBlockInterface.Step.GCStep_q b@@143)) )))
(assert (forall ((a@@207 T@U) (b@@144 T@U) ) (!  (=> (and (and (= (type a@@207) DatatypeTypeType) (= (type b@@144) DatatypeTypeType)) (and (BetreeBlockInterface.Step.StutterStep_q a@@207) (BetreeBlockInterface.Step.StutterStep_q b@@144))) (= (|BetreeBlockInterface.Step#Equal| a@@207 b@@144) true)) :qid |unknown.0:0| :skolemid |4635| :pattern ( (|BetreeBlockInterface.Step#Equal| a@@207 b@@144) (BetreeBlockInterface.Step.StutterStep_q a@@207)) :pattern ( (|BetreeBlockInterface.Step#Equal| a@@207 b@@144) (BetreeBlockInterface.Step.StutterStep_q b@@144)) )))
(assert (forall ((a@@208 T@U) (b@@145 T@U) ) (!  (=> (and (= (type a@@208) DatatypeTypeType) (= (type b@@145) DatatypeTypeType)) (= (|BetreeBlockInterface.Step#Equal| a@@208 b@@145) (= a@@208 b@@145))) :qid |unknown.0:0| :skolemid |4636| :pattern ( (|BetreeBlockInterface.Step#Equal| a@@208 b@@145)) )))
(assert (forall ((arg0@@723 T@U) ) (! (= (type (|#Betree.Variables.Variables| arg0@@723)) DatatypeTypeType) :qid |funType:#Betree.Variables.Variables| :pattern ( (|#Betree.Variables.Variables| arg0@@723)) )))
(assert (forall ((|a#28#0#0@@3| T@U) ) (!  (=> (= (type |a#28#0#0@@3|) DatatypeTypeType) (= (DatatypeCtorId (|#Betree.Variables.Variables| |a#28#0#0@@3|)) |##Betree.Variables.Variables|)) :qid |Betreeidfy.31:34| :skolemid |4637| :pattern ( (|#Betree.Variables.Variables| |a#28#0#0@@3|)) )))
(assert (forall ((d@@274 T@U) ) (!  (=> (= (type d@@274) DatatypeTypeType) (= (Betree.Variables.Variables_q d@@274) (= (DatatypeCtorId d@@274) |##Betree.Variables.Variables|))) :qid |unknown.0:0| :skolemid |4638| :pattern ( (Betree.Variables.Variables_q d@@274)) )))
(assert (forall ((d@@275 T@U) ) (!  (=> (and (= (type d@@275) DatatypeTypeType) (Betree.Variables.Variables_q d@@275)) (exists ((|a#29#0#0@@2| T@U) ) (!  (and (= (type |a#29#0#0@@2|) DatatypeTypeType) (= d@@275 (|#Betree.Variables.Variables| |a#29#0#0@@2|))) :qid |Betreeidfy.31:34| :skolemid |4639| :no-pattern (type |a#29#0#0@@2|) :no-pattern (U_2_int |a#29#0#0@@2|) :no-pattern (U_2_bool |a#29#0#0@@2|) ))) :qid |unknown.0:0| :skolemid |4640| :pattern ( (Betree.Variables.Variables_q d@@275)) )))
(assert (forall ((|a#30#0#0@@2| T@U) ) (!  (=> (= (type |a#30#0#0@@2|) DatatypeTypeType) (= ($Is (|#Betree.Variables.Variables| |a#30#0#0@@2|) Tclass.Betree.Variables) ($Is |a#30#0#0@@2| Tclass.BetreeBlockInterface.Variables))) :qid |Betreeidfy.31:34| :skolemid |4641| :pattern ( ($Is (|#Betree.Variables.Variables| |a#30#0#0@@2|) Tclass.Betree.Variables)) )))
(assert (forall ((|a#31#0#0@@2| T@U) ($h@@235 T@U) ) (!  (=> (and (and (= (type |a#31#0#0@@2|) DatatypeTypeType) (= (type $h@@235) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@235)) (= ($IsAlloc (|#Betree.Variables.Variables| |a#31#0#0@@2|) Tclass.Betree.Variables $h@@235) ($IsAlloc |a#31#0#0@@2| Tclass.BetreeBlockInterface.Variables $h@@235))) :qid |Betreeidfy.31:34| :skolemid |4642| :pattern ( ($IsAlloc (|#Betree.Variables.Variables| |a#31#0#0@@2|) Tclass.Betree.Variables $h@@235)) )))
(assert (forall ((d@@276 T@U) ($h@@236 T@U) ) (!  (=> (and (and (= (type d@@276) DatatypeTypeType) (= (type $h@@236) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@236) (and (Betree.Variables.Variables_q d@@276) ($IsAlloc d@@276 Tclass.Betree.Variables $h@@236)))) ($IsAlloc (Betree.Variables.bcv d@@276) Tclass.BetreeBlockInterface.Variables $h@@236)) :qid |unknown.0:0| :skolemid |4643| :pattern ( ($IsAlloc (Betree.Variables.bcv d@@276) Tclass.BetreeBlockInterface.Variables $h@@236)) )))
(assert (forall ((|a#32#0#0@@2| T@U) ) (!  (=> (= (type |a#32#0#0@@2|) DatatypeTypeType) (= (|#Betree.Variables.Variables| (Lit |a#32#0#0@@2|)) (Lit (|#Betree.Variables.Variables| |a#32#0#0@@2|)))) :qid |Betreeidfy.31:34| :skolemid |4644| :pattern ( (|#Betree.Variables.Variables| (Lit |a#32#0#0@@2|))) )))
(assert (forall ((|a#33#0#0@@2| T@U) ) (!  (=> (= (type |a#33#0#0@@2|) DatatypeTypeType) (= (Betree.Variables.bcv (|#Betree.Variables.Variables| |a#33#0#0@@2|)) |a#33#0#0@@2|)) :qid |Betreeidfy.31:34| :skolemid |4645| :pattern ( (|#Betree.Variables.Variables| |a#33#0#0@@2|)) )))
(assert (forall ((|a#34#0#0@@2| T@U) ) (!  (=> (= (type |a#34#0#0@@2|) DatatypeTypeType) (< (DtRank |a#34#0#0@@2|) (DtRank (|#Betree.Variables.Variables| |a#34#0#0@@2|)))) :qid |Betreeidfy.31:34| :skolemid |4646| :pattern ( (|#Betree.Variables.Variables| |a#34#0#0@@2|)) )))
(assert (forall ((d@@277 T@U) ) (!  (=> (and (= (type d@@277) DatatypeTypeType) (|$IsA#Betree.Variables| d@@277)) (Betree.Variables.Variables_q d@@277)) :qid |unknown.0:0| :skolemid |4647| :pattern ( (|$IsA#Betree.Variables| d@@277)) )))
(assert (forall ((d@@278 T@U) ) (!  (=> (and (= (type d@@278) DatatypeTypeType) ($Is d@@278 Tclass.Betree.Variables)) (Betree.Variables.Variables_q d@@278)) :qid |unknown.0:0| :skolemid |4648| :pattern ( (Betree.Variables.Variables_q d@@278) ($Is d@@278 Tclass.Betree.Variables)) )))
(assert (forall ((a@@209 T@U) (b@@146 T@U) ) (!  (=> (and (and (= (type a@@209) DatatypeTypeType) (= (type b@@146) DatatypeTypeType)) true) (= (|Betree.Variables#Equal| a@@209 b@@146) (|BetreeBlockInterface.Variables#Equal| (Betree.Variables.bcv a@@209) (Betree.Variables.bcv b@@146)))) :qid |unknown.0:0| :skolemid |4649| :pattern ( (|Betree.Variables#Equal| a@@209 b@@146)) )))
(assert (forall ((a@@210 T@U) (b@@147 T@U) ) (!  (=> (and (= (type a@@210) DatatypeTypeType) (= (type b@@147) DatatypeTypeType)) (= (|Betree.Variables#Equal| a@@210 b@@147) (= a@@210 b@@147))) :qid |unknown.0:0| :skolemid |4650| :pattern ( (|Betree.Variables#Equal| a@@210 b@@147)) )))
(assert (forall ((arg0@@724 T@U) ) (! (= (type (|#Betree.Step.BetreeStep| arg0@@724)) DatatypeTypeType) :qid |funType:#Betree.Step.BetreeStep| :pattern ( (|#Betree.Step.BetreeStep| arg0@@724)) )))
(assert (forall ((|a#35#0#0@@2| T@U) ) (!  (=> (= (type |a#35#0#0@@2|) DatatypeTypeType) (= (DatatypeCtorId (|#Betree.Step.BetreeStep| |a#35#0#0@@2|)) |##Betree.Step.BetreeStep|)) :qid |Betreeidfy.57:18| :skolemid |4651| :pattern ( (|#Betree.Step.BetreeStep| |a#35#0#0@@2|)) )))
(assert (forall ((d@@279 T@U) ) (!  (=> (= (type d@@279) DatatypeTypeType) (= (Betree.Step.BetreeStep_q d@@279) (= (DatatypeCtorId d@@279) |##Betree.Step.BetreeStep|))) :qid |unknown.0:0| :skolemid |4652| :pattern ( (Betree.Step.BetreeStep_q d@@279)) )))
(assert (forall ((d@@280 T@U) ) (!  (=> (and (= (type d@@280) DatatypeTypeType) (Betree.Step.BetreeStep_q d@@280)) (exists ((|a#36#0#0@@2| T@U) ) (!  (and (= (type |a#36#0#0@@2|) DatatypeTypeType) (= d@@280 (|#Betree.Step.BetreeStep| |a#36#0#0@@2|))) :qid |Betreeidfy.57:18| :skolemid |4653| :no-pattern (type |a#36#0#0@@2|) :no-pattern (U_2_int |a#36#0#0@@2|) :no-pattern (U_2_bool |a#36#0#0@@2|) ))) :qid |unknown.0:0| :skolemid |4654| :pattern ( (Betree.Step.BetreeStep_q d@@280)) )))
(assert (forall ((|a#37#0#0@@2| T@U) ) (!  (=> (= (type |a#37#0#0@@2|) DatatypeTypeType) (= ($Is (|#Betree.Step.BetreeStep| |a#37#0#0@@2|) Tclass.Betree.Step) ($Is |a#37#0#0@@2| Tclass.BetreeSpec.BetreeStep))) :qid |Betreeidfy.57:18| :skolemid |4655| :pattern ( ($Is (|#Betree.Step.BetreeStep| |a#37#0#0@@2|) Tclass.Betree.Step)) )))
(assert (forall ((|a#38#0#0@@2| T@U) ($h@@237 T@U) ) (!  (=> (and (and (= (type |a#38#0#0@@2|) DatatypeTypeType) (= (type $h@@237) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@237)) (= ($IsAlloc (|#Betree.Step.BetreeStep| |a#38#0#0@@2|) Tclass.Betree.Step $h@@237) ($IsAlloc |a#38#0#0@@2| Tclass.BetreeSpec.BetreeStep $h@@237))) :qid |Betreeidfy.57:18| :skolemid |4656| :pattern ( ($IsAlloc (|#Betree.Step.BetreeStep| |a#38#0#0@@2|) Tclass.Betree.Step $h@@237)) )))
(assert (forall ((arg0@@725 T@U) ) (! (= (type (Betree.Step.step arg0@@725)) DatatypeTypeType) :qid |funType:Betree.Step.step| :pattern ( (Betree.Step.step arg0@@725)) )))
(assert (forall ((d@@281 T@U) ($h@@238 T@U) ) (!  (=> (and (and (= (type d@@281) DatatypeTypeType) (= (type $h@@238) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@238) (and (Betree.Step.BetreeStep_q d@@281) ($IsAlloc d@@281 Tclass.Betree.Step $h@@238)))) ($IsAlloc (Betree.Step.step d@@281) Tclass.BetreeSpec.BetreeStep $h@@238)) :qid |unknown.0:0| :skolemid |4657| :pattern ( ($IsAlloc (Betree.Step.step d@@281) Tclass.BetreeSpec.BetreeStep $h@@238)) )))
(assert (forall ((|a#39#0#0@@2| T@U) ) (!  (=> (= (type |a#39#0#0@@2|) DatatypeTypeType) (= (|#Betree.Step.BetreeStep| (Lit |a#39#0#0@@2|)) (Lit (|#Betree.Step.BetreeStep| |a#39#0#0@@2|)))) :qid |Betreeidfy.57:18| :skolemid |4658| :pattern ( (|#Betree.Step.BetreeStep| (Lit |a#39#0#0@@2|))) )))
(assert (forall ((|a#40#0#0@@2| T@U) ) (!  (=> (= (type |a#40#0#0@@2|) DatatypeTypeType) (= (Betree.Step.step (|#Betree.Step.BetreeStep| |a#40#0#0@@2|)) |a#40#0#0@@2|)) :qid |Betreeidfy.57:18| :skolemid |4659| :pattern ( (|#Betree.Step.BetreeStep| |a#40#0#0@@2|)) )))
(assert (forall ((|a#41#0#0@@2| T@U) ) (!  (=> (= (type |a#41#0#0@@2|) DatatypeTypeType) (< (DtRank |a#41#0#0@@2|) (DtRank (|#Betree.Step.BetreeStep| |a#41#0#0@@2|)))) :qid |Betreeidfy.57:18| :skolemid |4660| :pattern ( (|#Betree.Step.BetreeStep| |a#41#0#0@@2|)) )))
(assert (forall ((arg0@@726 T@U) ) (! (= (type (|#Betree.Step.GCStep| arg0@@726)) DatatypeTypeType) :qid |funType:#Betree.Step.GCStep| :pattern ( (|#Betree.Step.GCStep| arg0@@726)) )))
(assert (forall ((|a#42#0#0@@2| T@U) ) (!  (=> (= (type |a#42#0#0@@2|) (MapType0Type BoxType boolType)) (= (DatatypeCtorId (|#Betree.Step.GCStep| |a#42#0#0@@2|)) |##Betree.Step.GCStep|)) :qid |Betreeidfy.58:14| :skolemid |4661| :pattern ( (|#Betree.Step.GCStep| |a#42#0#0@@2|)) )))
(assert (forall ((d@@282 T@U) ) (!  (=> (= (type d@@282) DatatypeTypeType) (= (Betree.Step.GCStep_q d@@282) (= (DatatypeCtorId d@@282) |##Betree.Step.GCStep|))) :qid |unknown.0:0| :skolemid |4662| :pattern ( (Betree.Step.GCStep_q d@@282)) )))
(assert (forall ((d@@283 T@U) ) (!  (=> (and (= (type d@@283) DatatypeTypeType) (Betree.Step.GCStep_q d@@283)) (exists ((|a#43#0#0@@2| T@U) ) (!  (and (= (type |a#43#0#0@@2|) (MapType0Type BoxType boolType)) (= d@@283 (|#Betree.Step.GCStep| |a#43#0#0@@2|))) :qid |Betreeidfy.58:14| :skolemid |4663| :no-pattern (type |a#43#0#0@@2|) :no-pattern (U_2_int |a#43#0#0@@2|) :no-pattern (U_2_bool |a#43#0#0@@2|) ))) :qid |unknown.0:0| :skolemid |4664| :pattern ( (Betree.Step.GCStep_q d@@283)) )))
(assert (forall ((|a#44#0#0@@2| T@U) ) (!  (=> (= (type |a#44#0#0@@2|) (MapType0Type BoxType boolType)) (= ($Is (|#Betree.Step.GCStep| |a#44#0#0@@2|) Tclass.Betree.Step) ($Is |a#44#0#0@@2| (TISet Tclass.ReferenceType.Reference)))) :qid |Betreeidfy.58:14| :skolemid |4665| :pattern ( ($Is (|#Betree.Step.GCStep| |a#44#0#0@@2|) Tclass.Betree.Step)) )))
(assert (forall ((|a#45#0#0@@2| T@U) ($h@@239 T@U) ) (!  (=> (and (and (= (type |a#45#0#0@@2|) (MapType0Type BoxType boolType)) (= (type $h@@239) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@239)) (= ($IsAlloc (|#Betree.Step.GCStep| |a#45#0#0@@2|) Tclass.Betree.Step $h@@239) ($IsAlloc |a#45#0#0@@2| (TISet Tclass.ReferenceType.Reference) $h@@239))) :qid |Betreeidfy.58:14| :skolemid |4666| :pattern ( ($IsAlloc (|#Betree.Step.GCStep| |a#45#0#0@@2|) Tclass.Betree.Step $h@@239)) )))
(assert (forall ((arg0@@727 T@U) ) (! (= (type (Betree.Step.refs arg0@@727)) (MapType0Type BoxType boolType)) :qid |funType:Betree.Step.refs| :pattern ( (Betree.Step.refs arg0@@727)) )))
(assert (forall ((d@@284 T@U) ($h@@240 T@U) ) (!  (=> (and (and (= (type d@@284) DatatypeTypeType) (= (type $h@@240) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@240) (and (Betree.Step.GCStep_q d@@284) ($IsAlloc d@@284 Tclass.Betree.Step $h@@240)))) ($IsAlloc (Betree.Step.refs d@@284) (TISet Tclass.ReferenceType.Reference) $h@@240)) :qid |unknown.0:0| :skolemid |4667| :pattern ( ($IsAlloc (Betree.Step.refs d@@284) (TISet Tclass.ReferenceType.Reference) $h@@240)) )))
(assert (forall ((|a#46#0#0@@2| T@U) ) (!  (=> (= (type |a#46#0#0@@2|) (MapType0Type BoxType boolType)) (= (|#Betree.Step.GCStep| (Lit |a#46#0#0@@2|)) (Lit (|#Betree.Step.GCStep| |a#46#0#0@@2|)))) :qid |Betreeidfy.58:14| :skolemid |4668| :pattern ( (|#Betree.Step.GCStep| (Lit |a#46#0#0@@2|))) )))
(assert (forall ((|a#47#0#0@@2| T@U) ) (!  (=> (= (type |a#47#0#0@@2|) (MapType0Type BoxType boolType)) (= (Betree.Step.refs (|#Betree.Step.GCStep| |a#47#0#0@@2|)) |a#47#0#0@@2|)) :qid |Betreeidfy.58:14| :skolemid |4669| :pattern ( (|#Betree.Step.GCStep| |a#47#0#0@@2|)) )))
(assert (forall ((|a#48#0#0@@1| T@U) (d@@285 T@U) ) (!  (=> (and (and (= (type |a#48#0#0@@1|) (MapType0Type BoxType boolType)) (= (type d@@285) DatatypeTypeType)) (U_2_bool (MapType0Select |a#48#0#0@@1| ($Box d@@285)))) (< (DtRank d@@285) (DtRank (|#Betree.Step.GCStep| |a#48#0#0@@1|)))) :qid |Betreeidfy.58:14| :skolemid |4670| :pattern ( (MapType0Select |a#48#0#0@@1| ($Box d@@285)) (|#Betree.Step.GCStep| |a#48#0#0@@1|)) )))
(assert (= (type |#Betree.Step.StutterStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#Betree.Step.StutterStep|) |##Betree.Step.StutterStep|))
(assert (forall ((d@@286 T@U) ) (!  (=> (= (type d@@286) DatatypeTypeType) (= (Betree.Step.StutterStep_q d@@286) (= (DatatypeCtorId d@@286) |##Betree.Step.StutterStep|))) :qid |unknown.0:0| :skolemid |4671| :pattern ( (Betree.Step.StutterStep_q d@@286)) )))
(assert (forall ((d@@287 T@U) ) (!  (=> (and (= (type d@@287) DatatypeTypeType) (Betree.Step.StutterStep_q d@@287)) (= d@@287 |#Betree.Step.StutterStep|)) :qid |unknown.0:0| :skolemid |4672| :pattern ( (Betree.Step.StutterStep_q d@@287)) )))
(assert ($Is |#Betree.Step.StutterStep| Tclass.Betree.Step))
(assert (forall (($h@@241 T@U) ) (!  (=> (and (= (type $h@@241) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@241)) ($IsAlloc |#Betree.Step.StutterStep| Tclass.Betree.Step $h@@241)) :qid |DafnyPreludebpl.545:12| :skolemid |4673| :pattern ( ($IsAlloc |#Betree.Step.StutterStep| Tclass.Betree.Step $h@@241)) )))
(assert (= |#Betree.Step.StutterStep| (Lit |#Betree.Step.StutterStep|)))
(assert (forall ((d@@288 T@U) ) (!  (=> (and (= (type d@@288) DatatypeTypeType) (|$IsA#Betree.Step| d@@288)) (or (or (Betree.Step.BetreeStep_q d@@288) (Betree.Step.GCStep_q d@@288)) (Betree.Step.StutterStep_q d@@288))) :qid |unknown.0:0| :skolemid |4674| :pattern ( (|$IsA#Betree.Step| d@@288)) )))
(assert (forall ((d@@289 T@U) ) (!  (=> (and (= (type d@@289) DatatypeTypeType) ($Is d@@289 Tclass.Betree.Step)) (or (or (Betree.Step.BetreeStep_q d@@289) (Betree.Step.GCStep_q d@@289)) (Betree.Step.StutterStep_q d@@289))) :qid |unknown.0:0| :skolemid |4675| :pattern ( (Betree.Step.StutterStep_q d@@289) ($Is d@@289 Tclass.Betree.Step)) :pattern ( (Betree.Step.GCStep_q d@@289) ($Is d@@289 Tclass.Betree.Step)) :pattern ( (Betree.Step.BetreeStep_q d@@289) ($Is d@@289 Tclass.Betree.Step)) )))
(assert (forall ((a@@211 T@U) (b@@148 T@U) ) (!  (=> (and (and (= (type a@@211) DatatypeTypeType) (= (type b@@148) DatatypeTypeType)) (and (Betree.Step.BetreeStep_q a@@211) (Betree.Step.BetreeStep_q b@@148))) (= (|Betree.Step#Equal| a@@211 b@@148) (|BetreeSpec.BetreeStep#Equal| (Betree.Step.step a@@211) (Betree.Step.step b@@148)))) :qid |unknown.0:0| :skolemid |4676| :pattern ( (|Betree.Step#Equal| a@@211 b@@148) (Betree.Step.BetreeStep_q a@@211)) :pattern ( (|Betree.Step#Equal| a@@211 b@@148) (Betree.Step.BetreeStep_q b@@148)) )))
(assert (forall ((a@@212 T@U) (b@@149 T@U) ) (!  (=> (and (and (= (type a@@212) DatatypeTypeType) (= (type b@@149) DatatypeTypeType)) (and (Betree.Step.GCStep_q a@@212) (Betree.Step.GCStep_q b@@149))) (= (|Betree.Step#Equal| a@@212 b@@149) (|ISet#Equal| (Betree.Step.refs a@@212) (Betree.Step.refs b@@149)))) :qid |unknown.0:0| :skolemid |4677| :pattern ( (|Betree.Step#Equal| a@@212 b@@149) (Betree.Step.GCStep_q a@@212)) :pattern ( (|Betree.Step#Equal| a@@212 b@@149) (Betree.Step.GCStep_q b@@149)) )))
(assert (forall ((a@@213 T@U) (b@@150 T@U) ) (!  (=> (and (and (= (type a@@213) DatatypeTypeType) (= (type b@@150) DatatypeTypeType)) (and (Betree.Step.StutterStep_q a@@213) (Betree.Step.StutterStep_q b@@150))) (= (|Betree.Step#Equal| a@@213 b@@150) true)) :qid |unknown.0:0| :skolemid |4678| :pattern ( (|Betree.Step#Equal| a@@213 b@@150) (Betree.Step.StutterStep_q a@@213)) :pattern ( (|Betree.Step#Equal| a@@213 b@@150) (Betree.Step.StutterStep_q b@@150)) )))
(assert (forall ((a@@214 T@U) (b@@151 T@U) ) (!  (=> (and (= (type a@@214) DatatypeTypeType) (= (type b@@151) DatatypeTypeType)) (= (|Betree.Step#Equal| a@@214 b@@151) (= a@@214 b@@151))) :qid |unknown.0:0| :skolemid |4679| :pattern ( (|Betree.Step#Equal| a@@214 b@@151)) )))
(assert (= (type Tclass.Betree.__default) TyType))
(assert (= (Tag Tclass.Betree.__default) Tagclass.Betree.__default))
(assert (= (TagFamily Tclass.Betree.__default) tytagFamily$_default))
(assert (forall ((bx@@198 T@U) ) (!  (=> (and (= (type bx@@198) BoxType) ($IsBox bx@@198 Tclass.Betree.__default)) (and (= ($Box ($Unbox refType bx@@198)) bx@@198) ($Is ($Unbox refType bx@@198) Tclass.Betree.__default))) :qid |unknown.0:0| :skolemid |4680| :pattern ( ($IsBox bx@@198 Tclass.Betree.__default)) )))
(assert (forall (($o@@64 T@U) ) (!  (=> (= (type $o@@64) refType) (= ($Is $o@@64 Tclass.Betree.__default)  (or (= $o@@64 null) (= (dtype $o@@64) Tclass.Betree.__default)))) :qid |unknown.0:0| :skolemid |4681| :pattern ( ($Is $o@@64 Tclass.Betree.__default)) )))
(assert (forall (($o@@65 T@U) ($h@@242 T@U) ) (!  (=> (and (= (type $o@@65) refType) (= (type $h@@242) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@65 Tclass.Betree.__default $h@@242)  (or (= $o@@65 null) (U_2_bool (MapType1Select (MapType0Select $h@@242 $o@@65) alloc))))) :qid |unknown.0:0| :skolemid |4682| :pattern ( ($IsAlloc $o@@65 Tclass.Betree.__default $h@@242)) )))
(assert (= (type Betree.__default.EmptyNode) DatatypeTypeType))
(assert  (=> true (=> true ($Is Betree.__default.EmptyNode Tclass.BetreeGraph.Node))))
(assert (= |Betree.__default.EmptyNode#requires| true))
(assert  (=> true (=> true (and (forall ((|key#0@@179| T@U) ) (!  (=> (and (= (type |key#0@@179|) (SeqType BoxType)) ($Is |key#0@@179| Tclass.KeyType.Key)) (and (|MapSpec.__default.InDomain#canCall| |key#0@@179|) (=> (MapSpec.__default.InDomain |key#0@@179|) |ValueMessage.__default.DefaultValue#canCall|))) :qid |Betreeidfy.34:24| :skolemid |4683| :pattern ( (MapSpec.__default.InDomain |key#0@@179|)) )) (= Betree.__default.EmptyNode (let ((|buffer#0@@4| (|IMap#Glue| (|lambda#26| Tclass.KeyType.Key) (|lambda#27| ($Box (Lit (|#ValueMessage.Message.Define| (Lit ValueMessage.__default.DefaultValue))))) (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (|#BetreeGraph.Node.Node| (Lit (|IMap#Empty| BoxType BoxType)) |buffer#0@@4|)))))))
(assert  (=> true (=> true (and (forall ((|key#0@@180| T@U) ) (!  (=> (and (= (type |key#0@@180|) (SeqType BoxType)) ($Is |key#0@@180| Tclass.KeyType.Key)) (and (|MapSpec.__default.InDomain#canCall| |key#0@@180|) (=> (MapSpec.__default.InDomain |key#0@@180|) |ValueMessage.__default.DefaultValue#canCall|))) :qid |Betreeidfy.34:24| :skolemid |4684| :pattern ( (MapSpec.__default.InDomain |key#0@@180|)) )) (= Betree.__default.EmptyNode (let ((|buffer#1| (|IMap#Glue| (|lambda#26| Tclass.KeyType.Key) (|lambda#27| ($Box (Lit (|#ValueMessage.Message.Define| (Lit ValueMessage.__default.DefaultValue))))) (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (|#BetreeGraph.Node.Node| (Lit (|IMap#Empty| BoxType BoxType)) |buffer#1|)))))))
(assert  (=> true (forall ((|s#0@@378| T@U) ) (!  (=> (and (= (type |s#0@@378|) DatatypeTypeType) (or (|Betree.__default.Init#canCall| |s#0@@378|) ($Is |s#0@@378| Tclass.Betree.Variables))) true) :qid |Betreeidfy.38:18| :skolemid |4685| :pattern ( (Betree.__default.Init |s#0@@378|)) ))))
(assert (forall ((|s#0@@379| T@U) ) (!  (=> (and (= (type |s#0@@379|) DatatypeTypeType) ($Is |s#0@@379| Tclass.Betree.Variables)) (= (|Betree.__default.Init#requires| |s#0@@379|) true)) :qid |Betreeidfy.38:18| :skolemid |4686| :pattern ( (|Betree.__default.Init#requires| |s#0@@379|)) )))
(assert  (=> true (forall ((|s#0@@380| T@U) ) (!  (=> (and (= (type |s#0@@380|) DatatypeTypeType) (or (|Betree.__default.Init#canCall| |s#0@@380|) ($Is |s#0@@380| Tclass.Betree.Variables))) (and (and (and (Betree.Variables.Variables_q |s#0@@380|) (|BetreeBlockInterface.__default.Init#canCall| (Betree.Variables.bcv |s#0@@380|))) (=> (BetreeBlockInterface.__default.Init (Betree.Variables.bcv |s#0@@380|)) (and (and (|$IsA#BetreeGraph.Node| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@380|))) (Lit BetreeGraph.__default.Root)))) (|$IsA#BetreeGraph.Node| (Lit Betree.__default.EmptyNode))) (and (and (and (Betree.Variables.Variables_q |s#0@@380|) (BetreeBlockInterface.Variables.Variables_q (Betree.Variables.bcv |s#0@@380|))) |BetreeGraph.__default.Root#canCall|) |Betree.__default.EmptyNode#canCall|)))) (= (Betree.__default.Init |s#0@@380|)  (and (BetreeBlockInterface.__default.Init (Betree.Variables.bcv |s#0@@380|)) (|BetreeGraph.Node#Equal| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@380|))) (Lit BetreeGraph.__default.Root))) Betree.__default.EmptyNode))))) :qid |Betreeidfy.38:18| :skolemid |4687| :pattern ( (Betree.__default.Init |s#0@@380|)) ))))
(assert  (=> true (forall ((|s#0@@381| T@U) ) (!  (=> (and (= (type |s#0@@381|) DatatypeTypeType) (or (|Betree.__default.Init#canCall| (Lit |s#0@@381|)) ($Is |s#0@@381| Tclass.Betree.Variables))) (and (and (and (Betree.Variables.Variables_q (Lit |s#0@@381|)) (|BetreeBlockInterface.__default.Init#canCall| (Lit (Betree.Variables.bcv (Lit |s#0@@381|))))) (=> (U_2_bool (Lit (bool_2_U (BetreeBlockInterface.__default.Init (Lit (Betree.Variables.bcv (Lit |s#0@@381|))))))) (and (and (|$IsA#BetreeGraph.Node| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s#0@@381|)))))) (Lit BetreeGraph.__default.Root)))) (|$IsA#BetreeGraph.Node| (Lit Betree.__default.EmptyNode))) (and (and (and (Betree.Variables.Variables_q (Lit |s#0@@381|)) (BetreeBlockInterface.Variables.Variables_q (Lit (Betree.Variables.bcv (Lit |s#0@@381|))))) |BetreeGraph.__default.Root#canCall|) |Betree.__default.EmptyNode#canCall|)))) (= (Betree.__default.Init (Lit |s#0@@381|))  (and (BetreeBlockInterface.__default.Init (Lit (Betree.Variables.bcv (Lit |s#0@@381|)))) (|BetreeGraph.Node#Equal| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s#0@@381|)))))) (Lit BetreeGraph.__default.Root))) Betree.__default.EmptyNode))))) :qid |Betreeidfy.38:18| :weight 3 :skolemid |4688| :pattern ( (Betree.__default.Init (Lit |s#0@@381|))) ))))
(assert  (=> true (forall ((|s#0@@382| T@U) (|s'#0@@101| T@U) (|uiop#0@@60| T@U) (|refs#0@@14| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@382|) DatatypeTypeType) (= (type |s'#0@@101|) DatatypeTypeType)) (= (type |uiop#0@@60|) DatatypeTypeType)) (= (type |refs#0@@14|) (MapType0Type BoxType boolType))) (or (|Betree.__default.GC#canCall| |s#0@@382| |s'#0@@101| |uiop#0@@60| |refs#0@@14|) (and (and (and ($Is |s#0@@382| Tclass.Betree.Variables) ($Is |s'#0@@101| Tclass.Betree.Variables)) ($Is |uiop#0@@60| Tclass.UI.Op)) ($Is |refs#0@@14| (TISet Tclass.ReferenceType.Reference))))) true) :qid |Betreeidfy.43:16| :skolemid |4689| :pattern ( (Betree.__default.GC |s#0@@382| |s'#0@@101| |uiop#0@@60| |refs#0@@14|)) ))))
(assert (forall ((|s#0@@383| T@U) (|s'#0@@102| T@U) (|uiop#0@@61| T@U) (|refs#0@@15| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@383|) DatatypeTypeType) (= (type |s'#0@@102|) DatatypeTypeType)) (= (type |uiop#0@@61|) DatatypeTypeType)) (= (type |refs#0@@15|) (MapType0Type BoxType boolType))) (and (and (and ($Is |s#0@@383| Tclass.Betree.Variables) ($Is |s'#0@@102| Tclass.Betree.Variables)) ($Is |uiop#0@@61| Tclass.UI.Op)) ($Is |refs#0@@15| (TISet Tclass.ReferenceType.Reference)))) (= (|Betree.__default.GC#requires| |s#0@@383| |s'#0@@102| |uiop#0@@61| |refs#0@@15|) true)) :qid |Betreeidfy.43:16| :skolemid |4690| :pattern ( (|Betree.__default.GC#requires| |s#0@@383| |s'#0@@102| |uiop#0@@61| |refs#0@@15|)) )))
(assert  (=> true (forall ((|s#0@@384| T@U) (|s'#0@@103| T@U) (|uiop#0@@62| T@U) (|refs#0@@16| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@384|) DatatypeTypeType) (= (type |s'#0@@103|) DatatypeTypeType)) (= (type |uiop#0@@62|) DatatypeTypeType)) (= (type |refs#0@@16|) (MapType0Type BoxType boolType))) (or (|Betree.__default.GC#canCall| |s#0@@384| |s'#0@@103| |uiop#0@@62| |refs#0@@16|) (and (and (and ($Is |s#0@@384| Tclass.Betree.Variables) ($Is |s'#0@@103| Tclass.Betree.Variables)) ($Is |uiop#0@@62| Tclass.UI.Op)) ($Is |refs#0@@16| (TISet Tclass.ReferenceType.Reference))))) (and (=> (UI.Op.NoOp_q |uiop#0@@62|) (and (and (Betree.Variables.Variables_q |s#0@@384|) (Betree.Variables.Variables_q |s'#0@@103|)) (|BetreeBlockInterface.__default.GC#canCall| (Betree.Variables.bcv |s#0@@384|) (Betree.Variables.bcv |s'#0@@103|) |refs#0@@16|))) (= (Betree.__default.GC |s#0@@384| |s'#0@@103| |uiop#0@@62| |refs#0@@16|)  (and (UI.Op.NoOp_q |uiop#0@@62|) (BetreeBlockInterface.__default.GC (Betree.Variables.bcv |s#0@@384|) (Betree.Variables.bcv |s'#0@@103|) |refs#0@@16|))))) :qid |Betreeidfy.43:16| :skolemid |4691| :pattern ( (Betree.__default.GC |s#0@@384| |s'#0@@103| |uiop#0@@62| |refs#0@@16|)) ))))
(assert  (=> true (forall ((|s#0@@385| T@U) (|s'#0@@104| T@U) (|uiop#0@@63| T@U) (|refs#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@385|) DatatypeTypeType) (= (type |s'#0@@104|) DatatypeTypeType)) (= (type |uiop#0@@63|) DatatypeTypeType)) (= (type |refs#0@@17|) (MapType0Type BoxType boolType))) (or (|Betree.__default.GC#canCall| (Lit |s#0@@385|) (Lit |s'#0@@104|) (Lit |uiop#0@@63|) |refs#0@@17|) (and (and (and ($Is |s#0@@385| Tclass.Betree.Variables) ($Is |s'#0@@104| Tclass.Betree.Variables)) ($Is |uiop#0@@63| Tclass.UI.Op)) ($Is |refs#0@@17| (TISet Tclass.ReferenceType.Reference))))) (and (=> (U_2_bool (Lit (bool_2_U (UI.Op.NoOp_q (Lit |uiop#0@@63|))))) (and (and (Betree.Variables.Variables_q (Lit |s#0@@385|)) (Betree.Variables.Variables_q (Lit |s'#0@@104|))) (|BetreeBlockInterface.__default.GC#canCall| (Lit (Betree.Variables.bcv (Lit |s#0@@385|))) (Lit (Betree.Variables.bcv (Lit |s'#0@@104|))) |refs#0@@17|))) (= (Betree.__default.GC (Lit |s#0@@385|) (Lit |s'#0@@104|) (Lit |uiop#0@@63|) |refs#0@@17|)  (and (UI.Op.NoOp_q (Lit |uiop#0@@63|)) (BetreeBlockInterface.__default.GC (Lit (Betree.Variables.bcv (Lit |s#0@@385|))) (Lit (Betree.Variables.bcv (Lit |s'#0@@104|))) |refs#0@@17|))))) :qid |Betreeidfy.43:16| :weight 3 :skolemid |4692| :pattern ( (Betree.__default.GC (Lit |s#0@@385|) (Lit |s'#0@@104|) (Lit |uiop#0@@63|) |refs#0@@17|)) ))))
(assert  (=> true (forall ((|s#0@@386| T@U) (|s'#0@@105| T@U) (|uiop#0@@64| T@U) (|refs#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@386|) DatatypeTypeType) (= (type |s'#0@@105|) DatatypeTypeType)) (= (type |uiop#0@@64|) DatatypeTypeType)) (= (type |refs#0@@18|) (MapType0Type BoxType boolType))) (or (|Betree.__default.GC#canCall| (Lit |s#0@@386|) (Lit |s'#0@@105|) (Lit |uiop#0@@64|) (Lit |refs#0@@18|)) (and (and (and ($Is |s#0@@386| Tclass.Betree.Variables) ($Is |s'#0@@105| Tclass.Betree.Variables)) ($Is |uiop#0@@64| Tclass.UI.Op)) ($Is |refs#0@@18| (TISet Tclass.ReferenceType.Reference))))) (and (=> (U_2_bool (Lit (bool_2_U (UI.Op.NoOp_q (Lit |uiop#0@@64|))))) (and (and (Betree.Variables.Variables_q (Lit |s#0@@386|)) (Betree.Variables.Variables_q (Lit |s'#0@@105|))) (|BetreeBlockInterface.__default.GC#canCall| (Lit (Betree.Variables.bcv (Lit |s#0@@386|))) (Lit (Betree.Variables.bcv (Lit |s'#0@@105|))) (Lit |refs#0@@18|)))) (= (Betree.__default.GC (Lit |s#0@@386|) (Lit |s'#0@@105|) (Lit |uiop#0@@64|) (Lit |refs#0@@18|)) (U_2_bool (Lit (bool_2_U  (and (UI.Op.NoOp_q (Lit |uiop#0@@64|)) (BetreeBlockInterface.__default.GC (Lit (Betree.Variables.bcv (Lit |s#0@@386|))) (Lit (Betree.Variables.bcv (Lit |s'#0@@105|))) (Lit |refs#0@@18|))))))))) :qid |Betreeidfy.43:16| :weight 3 :skolemid |4693| :pattern ( (Betree.__default.GC (Lit |s#0@@386|) (Lit |s'#0@@105|) (Lit |uiop#0@@64|) (Lit |refs#0@@18|))) ))))
(assert  (=> true (forall ((|s#0@@387| T@U) (|s'#0@@106| T@U) (|uiop#0@@65| T@U) (|betreeStep#0| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@387|) DatatypeTypeType) (= (type |s'#0@@106|) DatatypeTypeType)) (= (type |uiop#0@@65|) DatatypeTypeType)) (= (type |betreeStep#0|) DatatypeTypeType)) (or (|Betree.__default.Betree#canCall| |s#0@@387| |s'#0@@106| |uiop#0@@65| |betreeStep#0|) (and (and (and ($Is |s#0@@387| Tclass.Betree.Variables) ($Is |s'#0@@106| Tclass.Betree.Variables)) ($Is |uiop#0@@65| Tclass.UI.Op)) ($Is |betreeStep#0| Tclass.BetreeSpec.BetreeStep)))) true) :qid |Betreeidfy.48:20| :skolemid |4694| :pattern ( (Betree.__default.Betree |s#0@@387| |s'#0@@106| |uiop#0@@65| |betreeStep#0|)) ))))
(assert (forall ((|s#0@@388| T@U) (|s'#0@@107| T@U) (|uiop#0@@66| T@U) (|betreeStep#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@388|) DatatypeTypeType) (= (type |s'#0@@107|) DatatypeTypeType)) (= (type |uiop#0@@66|) DatatypeTypeType)) (= (type |betreeStep#0@@0|) DatatypeTypeType)) (and (and (and ($Is |s#0@@388| Tclass.Betree.Variables) ($Is |s'#0@@107| Tclass.Betree.Variables)) ($Is |uiop#0@@66| Tclass.UI.Op)) ($Is |betreeStep#0@@0| Tclass.BetreeSpec.BetreeStep))) (= (|Betree.__default.Betree#requires| |s#0@@388| |s'#0@@107| |uiop#0@@66| |betreeStep#0@@0|) true)) :qid |Betreeidfy.48:20| :skolemid |4695| :pattern ( (|Betree.__default.Betree#requires| |s#0@@388| |s'#0@@107| |uiop#0@@66| |betreeStep#0@@0|)) )))
(assert  (=> true (forall ((|s#0@@389| T@U) (|s'#0@@108| T@U) (|uiop#0@@67| T@U) (|betreeStep#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@389|) DatatypeTypeType) (= (type |s'#0@@108|) DatatypeTypeType)) (= (type |uiop#0@@67|) DatatypeTypeType)) (= (type |betreeStep#0@@1|) DatatypeTypeType)) (or (|Betree.__default.Betree#canCall| |s#0@@389| |s'#0@@108| |uiop#0@@67| |betreeStep#0@@1|) (and (and (and ($Is |s#0@@389| Tclass.Betree.Variables) ($Is |s'#0@@108| Tclass.Betree.Variables)) ($Is |uiop#0@@67| Tclass.UI.Op)) ($Is |betreeStep#0@@1| Tclass.BetreeSpec.BetreeStep)))) (and (and (|BetreeSpec.__default.ValidBetreeStep#canCall| |betreeStep#0@@1|) (=> (BetreeSpec.__default.ValidBetreeStep |betreeStep#0@@1|) (and (|BetreeSpec.__default.BetreeStepUI#canCall| |betreeStep#0@@1| |uiop#0@@67|) (=> (BetreeSpec.__default.BetreeStepUI |betreeStep#0@@1| |uiop#0@@67|) (and (and (and (Betree.Variables.Variables_q |s#0@@389|) (|BetreeSpec.__default.BetreeStepReads#canCall| |betreeStep#0@@1|)) (|BetreeBlockInterface.__default.Reads#canCall| (Betree.Variables.bcv |s#0@@389|) (BetreeSpec.__default.BetreeStepReads |betreeStep#0@@1|))) (=> (BetreeBlockInterface.__default.Reads (Betree.Variables.bcv |s#0@@389|) (BetreeSpec.__default.BetreeStepReads |betreeStep#0@@1|)) (and (and (and (Betree.Variables.Variables_q |s#0@@389|) (Betree.Variables.Variables_q |s'#0@@108|)) (|BetreeSpec.__default.BetreeStepOps#canCall| |betreeStep#0@@1|)) (|BetreeBlockInterface.__default.OpTransaction#canCall| (Betree.Variables.bcv |s#0@@389|) (Betree.Variables.bcv |s'#0@@108|) (BetreeSpec.__default.BetreeStepOps |betreeStep#0@@1|))))))))) (= (Betree.__default.Betree |s#0@@389| |s'#0@@108| |uiop#0@@67| |betreeStep#0@@1|)  (and (and (and (BetreeSpec.__default.ValidBetreeStep |betreeStep#0@@1|) (BetreeSpec.__default.BetreeStepUI |betreeStep#0@@1| |uiop#0@@67|)) (BetreeBlockInterface.__default.Reads (Betree.Variables.bcv |s#0@@389|) (BetreeSpec.__default.BetreeStepReads |betreeStep#0@@1|))) (BetreeBlockInterface.__default.OpTransaction StartFuel_BetreeBlockInterface._default.OpTransaction (Betree.Variables.bcv |s#0@@389|) (Betree.Variables.bcv |s'#0@@108|) (BetreeSpec.__default.BetreeStepOps |betreeStep#0@@1|)))))) :qid |Betreeidfy.48:20| :skolemid |4696| :pattern ( (Betree.__default.Betree |s#0@@389| |s'#0@@108| |uiop#0@@67| |betreeStep#0@@1|)) ))))
(assert  (=> true (forall ((|s#0@@390| T@U) (|s'#0@@109| T@U) (|uiop#0@@68| T@U) (|betreeStep#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@390|) DatatypeTypeType) (= (type |s'#0@@109|) DatatypeTypeType)) (= (type |uiop#0@@68|) DatatypeTypeType)) (= (type |betreeStep#0@@2|) DatatypeTypeType)) (or (|Betree.__default.Betree#canCall| (Lit |s#0@@390|) (Lit |s'#0@@109|) (Lit |uiop#0@@68|) (Lit |betreeStep#0@@2|)) (and (and (and ($Is |s#0@@390| Tclass.Betree.Variables) ($Is |s'#0@@109| Tclass.Betree.Variables)) ($Is |uiop#0@@68| Tclass.UI.Op)) ($Is |betreeStep#0@@2| Tclass.BetreeSpec.BetreeStep)))) (and (and (|BetreeSpec.__default.ValidBetreeStep#canCall| (Lit |betreeStep#0@@2|)) (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.__default.ValidBetreeStep (Lit |betreeStep#0@@2|))))) (and (|BetreeSpec.__default.BetreeStepUI#canCall| (Lit |betreeStep#0@@2|) (Lit |uiop#0@@68|)) (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.__default.BetreeStepUI (Lit |betreeStep#0@@2|) (Lit |uiop#0@@68|))))) (and (and (and (Betree.Variables.Variables_q (Lit |s#0@@390|)) (|BetreeSpec.__default.BetreeStepReads#canCall| (Lit |betreeStep#0@@2|))) (|BetreeBlockInterface.__default.Reads#canCall| (Lit (Betree.Variables.bcv (Lit |s#0@@390|))) (Lit (BetreeSpec.__default.BetreeStepReads (Lit |betreeStep#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (BetreeBlockInterface.__default.Reads (Lit (Betree.Variables.bcv (Lit |s#0@@390|))) (Lit (BetreeSpec.__default.BetreeStepReads (Lit |betreeStep#0@@2|))))))) (and (and (and (Betree.Variables.Variables_q (Lit |s#0@@390|)) (Betree.Variables.Variables_q (Lit |s'#0@@109|))) (|BetreeSpec.__default.BetreeStepOps#canCall| (Lit |betreeStep#0@@2|))) (|BetreeBlockInterface.__default.OpTransaction#canCall| (Lit (Betree.Variables.bcv (Lit |s#0@@390|))) (Lit (Betree.Variables.bcv (Lit |s'#0@@109|))) (Lit (BetreeSpec.__default.BetreeStepOps (Lit |betreeStep#0@@2|))))))))))) (= (Betree.__default.Betree (Lit |s#0@@390|) (Lit |s'#0@@109|) (Lit |uiop#0@@68|) (Lit |betreeStep#0@@2|))  (and (and (and (BetreeSpec.__default.ValidBetreeStep (Lit |betreeStep#0@@2|)) (BetreeSpec.__default.BetreeStepUI (Lit |betreeStep#0@@2|) (Lit |uiop#0@@68|))) (BetreeBlockInterface.__default.Reads (Lit (Betree.Variables.bcv (Lit |s#0@@390|))) (Lit (BetreeSpec.__default.BetreeStepReads (Lit |betreeStep#0@@2|))))) (BetreeBlockInterface.__default.OpTransaction StartFuel_BetreeBlockInterface._default.OpTransaction (Lit (Betree.Variables.bcv (Lit |s#0@@390|))) (Lit (Betree.Variables.bcv (Lit |s'#0@@109|))) (Lit (BetreeSpec.__default.BetreeStepOps (Lit |betreeStep#0@@2|)))))))) :qid |Betreeidfy.48:20| :weight 3 :skolemid |4697| :pattern ( (Betree.__default.Betree (Lit |s#0@@390|) (Lit |s'#0@@109|) (Lit |uiop#0@@68|) (Lit |betreeStep#0@@2|))) ))))
(assert  (=> true (forall ((|s#0@@391| T@U) (|s'#0@@110| T@U) (|uiop#0@@69| T@U) (|step#0@@33| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@391|) DatatypeTypeType) (= (type |s'#0@@110|) DatatypeTypeType)) (= (type |uiop#0@@69|) DatatypeTypeType)) (= (type |step#0@@33|) DatatypeTypeType)) (or (|Betree.__default.NextStep#canCall| |s#0@@391| |s'#0@@110| |uiop#0@@69| |step#0@@33|) (and (and (and ($Is |s#0@@391| Tclass.Betree.Variables) ($Is |s'#0@@110| Tclass.Betree.Variables)) ($Is |uiop#0@@69| Tclass.UI.Op)) ($Is |step#0@@33| Tclass.Betree.Step)))) true) :qid |Betreeidfy.61:22| :skolemid |4698| :pattern ( (Betree.__default.NextStep |s#0@@391| |s'#0@@110| |uiop#0@@69| |step#0@@33|)) ))))
(assert (forall ((|s#0@@392| T@U) (|s'#0@@111| T@U) (|uiop#0@@70| T@U) (|step#0@@34| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@392|) DatatypeTypeType) (= (type |s'#0@@111|) DatatypeTypeType)) (= (type |uiop#0@@70|) DatatypeTypeType)) (= (type |step#0@@34|) DatatypeTypeType)) (and (and (and ($Is |s#0@@392| Tclass.Betree.Variables) ($Is |s'#0@@111| Tclass.Betree.Variables)) ($Is |uiop#0@@70| Tclass.UI.Op)) ($Is |step#0@@34| Tclass.Betree.Step))) (= (|Betree.__default.NextStep#requires| |s#0@@392| |s'#0@@111| |uiop#0@@70| |step#0@@34|) true)) :qid |Betreeidfy.61:22| :skolemid |4699| :pattern ( (|Betree.__default.NextStep#requires| |s#0@@392| |s'#0@@111| |uiop#0@@70| |step#0@@34|)) )))
(assert  (=> true (forall ((|s#0@@393| T@U) (|s'#0@@112| T@U) (|uiop#0@@71| T@U) (|step#0@@35| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@393|) DatatypeTypeType) (= (type |s'#0@@112|) DatatypeTypeType)) (= (type |uiop#0@@71|) DatatypeTypeType)) (= (type |step#0@@35|) DatatypeTypeType)) (or (|Betree.__default.NextStep#canCall| |s#0@@393| |s'#0@@112| |uiop#0@@71| |step#0@@35|) (and (and (and ($Is |s#0@@393| Tclass.Betree.Variables) ($Is |s'#0@@112| Tclass.Betree.Variables)) ($Is |uiop#0@@71| Tclass.UI.Op)) ($Is |step#0@@35| Tclass.Betree.Step)))) (and (and (=> (Betree.Step.BetreeStep_q |step#0@@35|) (let ((|betreeStep#1| (Betree.Step.step |step#0@@35|))) (|Betree.__default.Betree#canCall| |s#0@@393| |s'#0@@112| |uiop#0@@71| |betreeStep#1|))) (=> (not (Betree.Step.BetreeStep_q |step#0@@35|)) (and (=> (Betree.Step.GCStep_q |step#0@@35|) (let ((|refs#1@@0| (Betree.Step.refs |step#0@@35|))) (|Betree.__default.GC#canCall| |s#0@@393| |s'#0@@112| |uiop#0@@71| |refs#1@@0|))) (=> (not (Betree.Step.GCStep_q |step#0@@35|)) (and (|$IsA#Betree.Variables| |s#0@@393|) (|$IsA#Betree.Variables| |s'#0@@112|)))))) (= (Betree.__default.NextStep |s#0@@393| |s'#0@@112| |uiop#0@@71| |step#0@@35|) (ite (Betree.Step.BetreeStep_q |step#0@@35|) (let ((|betreeStep#0@@3| (Betree.Step.step |step#0@@35|))) (Betree.__default.Betree |s#0@@393| |s'#0@@112| |uiop#0@@71| |betreeStep#0@@3|)) (ite (Betree.Step.GCStep_q |step#0@@35|) (let ((|refs#0@@19| (Betree.Step.refs |step#0@@35|))) (Betree.__default.GC |s#0@@393| |s'#0@@112| |uiop#0@@71| |refs#0@@19|))  (and (|Betree.Variables#Equal| |s#0@@393| |s'#0@@112|) (UI.Op.NoOp_q |uiop#0@@71|))))))) :qid |Betreeidfy.61:22| :skolemid |4700| :pattern ( (Betree.__default.NextStep |s#0@@393| |s'#0@@112| |uiop#0@@71| |step#0@@35|)) ))))
(assert  (=> true (forall ((|s#0@@394| T@U) (|s'#0@@113| T@U) (|uiop#0@@72| T@U) (|step#0@@36| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@394|) DatatypeTypeType) (= (type |s'#0@@113|) DatatypeTypeType)) (= (type |uiop#0@@72|) DatatypeTypeType)) (= (type |step#0@@36|) DatatypeTypeType)) (or (|Betree.__default.NextStep#canCall| (Lit |s#0@@394|) (Lit |s'#0@@113|) (Lit |uiop#0@@72|) (Lit |step#0@@36|)) (and (and (and ($Is |s#0@@394| Tclass.Betree.Variables) ($Is |s'#0@@113| Tclass.Betree.Variables)) ($Is |uiop#0@@72| Tclass.UI.Op)) ($Is |step#0@@36| Tclass.Betree.Step)))) (and (and (=> (U_2_bool (Lit (bool_2_U (Betree.Step.BetreeStep_q (Lit |step#0@@36|))))) (let ((|betreeStep#3| (Lit (Betree.Step.step (Lit |step#0@@36|))))) (|Betree.__default.Betree#canCall| (Lit |s#0@@394|) (Lit |s'#0@@113|) (Lit |uiop#0@@72|) |betreeStep#3|))) (=> (not (U_2_bool (Lit (bool_2_U (Betree.Step.BetreeStep_q (Lit |step#0@@36|)))))) (and (=> (U_2_bool (Lit (bool_2_U (Betree.Step.GCStep_q (Lit |step#0@@36|))))) (let ((|refs#3@@0| (Lit (Betree.Step.refs (Lit |step#0@@36|))))) (|Betree.__default.GC#canCall| (Lit |s#0@@394|) (Lit |s'#0@@113|) (Lit |uiop#0@@72|) |refs#3@@0|))) (=> (not (U_2_bool (Lit (bool_2_U (Betree.Step.GCStep_q (Lit |step#0@@36|)))))) (and (|$IsA#Betree.Variables| (Lit |s#0@@394|)) (|$IsA#Betree.Variables| (Lit |s'#0@@113|))))))) (= (Betree.__default.NextStep (Lit |s#0@@394|) (Lit |s'#0@@113|) (Lit |uiop#0@@72|) (Lit |step#0@@36|)) (ite (Betree.Step.BetreeStep_q (Lit |step#0@@36|)) (U_2_bool (let ((|betreeStep#2| (Lit (Betree.Step.step (Lit |step#0@@36|))))) (Lit (bool_2_U (Betree.__default.Betree (Lit |s#0@@394|) (Lit |s'#0@@113|) (Lit |uiop#0@@72|) |betreeStep#2|))))) (ite (Betree.Step.GCStep_q (Lit |step#0@@36|)) (U_2_bool (let ((|refs#2@@0| (Lit (Betree.Step.refs (Lit |step#0@@36|))))) (Lit (bool_2_U (Betree.__default.GC (Lit |s#0@@394|) (Lit |s'#0@@113|) (Lit |uiop#0@@72|) |refs#2@@0|)))))  (and (|Betree.Variables#Equal| |s#0@@394| |s'#0@@113|) (UI.Op.NoOp_q (Lit |uiop#0@@72|)))))))) :qid |Betreeidfy.61:22| :weight 3 :skolemid |4701| :pattern ( (Betree.__default.NextStep (Lit |s#0@@394|) (Lit |s'#0@@113|) (Lit |uiop#0@@72|) (Lit |step#0@@36|))) ))))
(assert  (=> true (forall ((|s#0@@395| T@U) (|s'#0@@114| T@U) (|uiop#0@@73| T@U) ) (!  (=> (and (and (and (= (type |s#0@@395|) DatatypeTypeType) (= (type |s'#0@@114|) DatatypeTypeType)) (= (type |uiop#0@@73|) DatatypeTypeType)) (or (|Betree.__default.Next#canCall| |s#0@@395| |s'#0@@114| |uiop#0@@73|) (and (and ($Is |s#0@@395| Tclass.Betree.Variables) ($Is |s'#0@@114| Tclass.Betree.Variables)) ($Is |uiop#0@@73| Tclass.UI.Op)))) true) :qid |Betreeidfy.69:18| :skolemid |4702| :pattern ( (Betree.__default.Next |s#0@@395| |s'#0@@114| |uiop#0@@73|)) ))))
(assert (forall ((|s#0@@396| T@U) (|s'#0@@115| T@U) (|uiop#0@@74| T@U) ) (!  (=> (and (and (and (= (type |s#0@@396|) DatatypeTypeType) (= (type |s'#0@@115|) DatatypeTypeType)) (= (type |uiop#0@@74|) DatatypeTypeType)) (and (and ($Is |s#0@@396| Tclass.Betree.Variables) ($Is |s'#0@@115| Tclass.Betree.Variables)) ($Is |uiop#0@@74| Tclass.UI.Op))) (= (|Betree.__default.Next#requires| |s#0@@396| |s'#0@@115| |uiop#0@@74|) true)) :qid |Betreeidfy.69:18| :skolemid |4703| :pattern ( (|Betree.__default.Next#requires| |s#0@@396| |s'#0@@115| |uiop#0@@74|)) )))
(assert  (=> true (forall ((|s#0@@397| T@U) (|s'#0@@116| T@U) (|uiop#0@@75| T@U) ) (!  (=> (and (and (and (= (type |s#0@@397|) DatatypeTypeType) (= (type |s'#0@@116|) DatatypeTypeType)) (= (type |uiop#0@@75|) DatatypeTypeType)) (or (|Betree.__default.Next#canCall| |s#0@@397| |s'#0@@116| |uiop#0@@75|) (and (and ($Is |s#0@@397| Tclass.Betree.Variables) ($Is |s'#0@@116| Tclass.Betree.Variables)) ($Is |uiop#0@@75| Tclass.UI.Op)))) (and (forall ((|step#0@@37| T@U) ) (!  (=> (and (= (type |step#0@@37|) DatatypeTypeType) ($Is |step#0@@37| Tclass.Betree.Step)) (|Betree.__default.NextStep#canCall| |s#0@@397| |s'#0@@116| |uiop#0@@75| |step#0@@37|)) :qid |Betreeidfy.70:12| :skolemid |4705| :pattern ( (Betree.__default.NextStep |s#0@@397| |s'#0@@116| |uiop#0@@75| |step#0@@37|)) )) (= (Betree.__default.Next |s#0@@397| |s'#0@@116| |uiop#0@@75|) (exists ((|step#0@@38| T@U) ) (!  (and (= (type |step#0@@38|) DatatypeTypeType) (and ($Is |step#0@@38| Tclass.Betree.Step) (Betree.__default.NextStep |s#0@@397| |s'#0@@116| |uiop#0@@75| |step#0@@38|))) :qid |Betreeidfy.70:12| :skolemid |4704| :pattern ( (Betree.__default.NextStep |s#0@@397| |s'#0@@116| |uiop#0@@75| |step#0@@38|)) ))))) :qid |Betreeidfy.69:18| :skolemid |4706| :pattern ( (Betree.__default.Next |s#0@@397| |s'#0@@116| |uiop#0@@75|)) ))))
(assert  (=> true (forall ((|s#0@@398| T@U) (|s'#0@@117| T@U) (|uiop#0@@76| T@U) ) (!  (=> (and (and (and (= (type |s#0@@398|) DatatypeTypeType) (= (type |s'#0@@117|) DatatypeTypeType)) (= (type |uiop#0@@76|) DatatypeTypeType)) (or (|Betree.__default.Next#canCall| (Lit |s#0@@398|) (Lit |s'#0@@117|) (Lit |uiop#0@@76|)) (and (and ($Is |s#0@@398| Tclass.Betree.Variables) ($Is |s'#0@@117| Tclass.Betree.Variables)) ($Is |uiop#0@@76| Tclass.UI.Op)))) (and (forall ((|step#1@@5| T@U) ) (!  (=> (and (= (type |step#1@@5|) DatatypeTypeType) ($Is |step#1@@5| Tclass.Betree.Step)) (|Betree.__default.NextStep#canCall| (Lit |s#0@@398|) (Lit |s'#0@@117|) (Lit |uiop#0@@76|) |step#1@@5|)) :qid |Betreeidfy.70:12| :skolemid |4708| :pattern ( (Betree.__default.NextStep |s#0@@398| |s'#0@@117| |uiop#0@@76| |step#1@@5|)) )) (= (Betree.__default.Next (Lit |s#0@@398|) (Lit |s'#0@@117|) (Lit |uiop#0@@76|)) (exists ((|step#1@@6| T@U) ) (!  (and (= (type |step#1@@6|) DatatypeTypeType) (and ($Is |step#1@@6| Tclass.Betree.Step) (Betree.__default.NextStep (Lit |s#0@@398|) (Lit |s'#0@@117|) (Lit |uiop#0@@76|) |step#1@@6|))) :qid |Betreeidfy.70:12| :skolemid |4707| :pattern ( (Betree.__default.NextStep |s#0@@398| |s'#0@@117| |uiop#0@@76| |step#1@@6|)) ))))) :qid |Betreeidfy.69:18| :weight 3 :skolemid |4709| :pattern ( (Betree.__default.Next (Lit |s#0@@398|) (Lit |s'#0@@117|) (Lit |uiop#0@@76|))) ))))
(assert (forall ((arg0@@728 T@U) (arg1@@337 T@U) (arg2@@200 T@U) ) (! (= (type (|#QueryStates.QueryState.InProgress| arg0@@728 arg1@@337 arg2@@200)) DatatypeTypeType) :qid |funType:#QueryStates.QueryState.InProgress| :pattern ( (|#QueryStates.QueryState.InProgress| arg0@@728 arg1@@337 arg2@@200)) )))
(assert (forall ((|a#0#0#0@@7| T@U) (|a#0#1#0@@3| T@U) (|a#0#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#0#0#0@@7|) (SeqType BoxType)) (= (type |a#0#1#0@@3|) DatatypeTypeType)) (= (type |a#0#2#0@@0|) BoxType)) (= (DatatypeCtorId (|#QueryStates.QueryState.InProgress| |a#0#0#0@@7| |a#0#1#0@@3| |a#0#2#0@@0|)) |##QueryStates.QueryState.InProgress|)) :qid |QueryStateidfy.16:18| :skolemid |4710| :pattern ( (|#QueryStates.QueryState.InProgress| |a#0#0#0@@7| |a#0#1#0@@3| |a#0#2#0@@0|)) )))
(assert (forall ((d@@290 T@U) ) (!  (=> (= (type d@@290) DatatypeTypeType) (= (QueryStates.QueryState.InProgress_q d@@290) (= (DatatypeCtorId d@@290) |##QueryStates.QueryState.InProgress|))) :qid |unknown.0:0| :skolemid |4711| :pattern ( (QueryStates.QueryState.InProgress_q d@@290)) )))
(assert (forall ((d@@291 T@U) ) (!  (=> (and (= (type d@@291) DatatypeTypeType) (QueryStates.QueryState.InProgress_q d@@291)) (exists ((|a#1#0#0@@7| T@U) (|a#1#1#0@@3| T@U) (|a#1#2#0@@0| T@U) ) (!  (and (and (and (= (type |a#1#0#0@@7|) (SeqType BoxType)) (= (type |a#1#1#0@@3|) DatatypeTypeType)) (= (type |a#1#2#0@@0|) BoxType)) (= d@@291 (|#QueryStates.QueryState.InProgress| |a#1#0#0@@7| |a#1#1#0@@3| |a#1#2#0@@0|))) :qid |QueryStateidfy.16:18| :skolemid |4712| :no-pattern (type |a#1#0#0@@7|) :no-pattern (type |a#1#1#0@@3|) :no-pattern (type |a#1#2#0@@0|) :no-pattern (U_2_int |a#1#0#0@@7|) :no-pattern (U_2_bool |a#1#0#0@@7|) :no-pattern (U_2_int |a#1#1#0@@3|) :no-pattern (U_2_bool |a#1#1#0@@3|) :no-pattern (U_2_int |a#1#2#0@@0|) :no-pattern (U_2_bool |a#1#2#0@@0|) ))) :qid |unknown.0:0| :skolemid |4713| :pattern ( (QueryStates.QueryState.InProgress_q d@@291)) )))
(assert (forall ((|a#2#0#0@@7| T@U) (|a#2#1#0@@3| T@U) (|a#2#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#2#0#0@@7|) (SeqType BoxType)) (= (type |a#2#1#0@@3|) DatatypeTypeType)) (= (type |a#2#2#0@@0|) BoxType)) (= ($Is (|#QueryStates.QueryState.InProgress| |a#2#0#0@@7| |a#2#1#0@@3| |a#2#2#0@@0|) Tclass.QueryStates.QueryState)  (and (and ($Is |a#2#0#0@@7| Tclass.KeyType.Key) ($Is |a#2#1#0@@3| Tclass.ValueMessage.Delta)) ($IsBox |a#2#2#0@@0| Tclass.ReferenceType.Reference)))) :qid |QueryStateidfy.16:18| :skolemid |4714| :pattern ( ($Is (|#QueryStates.QueryState.InProgress| |a#2#0#0@@7| |a#2#1#0@@3| |a#2#2#0@@0|) Tclass.QueryStates.QueryState)) )))
(assert (forall ((|a#3#0#0@@7| T@U) (|a#3#1#0@@3| T@U) (|a#3#2#0@@0| T@U) ($h@@243 T@U) ) (!  (=> (and (and (and (and (= (type |a#3#0#0@@7|) (SeqType BoxType)) (= (type |a#3#1#0@@3|) DatatypeTypeType)) (= (type |a#3#2#0@@0|) BoxType)) (= (type $h@@243) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@243)) (= ($IsAlloc (|#QueryStates.QueryState.InProgress| |a#3#0#0@@7| |a#3#1#0@@3| |a#3#2#0@@0|) Tclass.QueryStates.QueryState $h@@243)  (and (and ($IsAlloc |a#3#0#0@@7| Tclass.KeyType.Key $h@@243) ($IsAlloc |a#3#1#0@@3| Tclass.ValueMessage.Delta $h@@243)) ($IsAllocBox |a#3#2#0@@0| Tclass.ReferenceType.Reference $h@@243)))) :qid |QueryStateidfy.16:18| :skolemid |4715| :pattern ( ($IsAlloc (|#QueryStates.QueryState.InProgress| |a#3#0#0@@7| |a#3#1#0@@3| |a#3#2#0@@0|) Tclass.QueryStates.QueryState $h@@243)) )))
(assert (forall ((d@@292 T@U) ($h@@244 T@U) ) (!  (=> (and (and (= (type d@@292) DatatypeTypeType) (= (type $h@@244) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@244) (and (QueryStates.QueryState.InProgress_q d@@292) ($IsAlloc d@@292 Tclass.QueryStates.QueryState $h@@244)))) ($IsAlloc (QueryStates.QueryState.key d@@292) Tclass.KeyType.Key $h@@244)) :qid |unknown.0:0| :skolemid |4716| :pattern ( ($IsAlloc (QueryStates.QueryState.key d@@292) Tclass.KeyType.Key $h@@244)) )))
(assert (forall ((d@@293 T@U) ($h@@245 T@U) ) (!  (=> (and (and (= (type d@@293) DatatypeTypeType) (= (type $h@@245) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@245) (and (QueryStates.QueryState.InProgress_q d@@293) ($IsAlloc d@@293 Tclass.QueryStates.QueryState $h@@245)))) ($IsAlloc (QueryStates.QueryState.delta d@@293) Tclass.ValueMessage.Delta $h@@245)) :qid |unknown.0:0| :skolemid |4717| :pattern ( ($IsAlloc (QueryStates.QueryState.delta d@@293) Tclass.ValueMessage.Delta $h@@245)) )))
(assert (forall ((d@@294 T@U) ($h@@246 T@U) ) (!  (=> (and (and (= (type d@@294) DatatypeTypeType) (= (type $h@@246) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@246) (and (QueryStates.QueryState.InProgress_q d@@294) ($IsAlloc d@@294 Tclass.QueryStates.QueryState $h@@246)))) ($IsAllocBox (QueryStates.QueryState.ref d@@294) Tclass.ReferenceType.Reference $h@@246)) :qid |unknown.0:0| :skolemid |4718| :pattern ( ($IsAllocBox (QueryStates.QueryState.ref d@@294) Tclass.ReferenceType.Reference $h@@246)) )))
(assert (forall ((|a#4#0#0@@7| T@U) (|a#4#1#0@@3| T@U) (|a#4#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#4#0#0@@7|) (SeqType BoxType)) (= (type |a#4#1#0@@3|) DatatypeTypeType)) (= (type |a#4#2#0@@0|) BoxType)) (= (|#QueryStates.QueryState.InProgress| (Lit |a#4#0#0@@7|) (Lit |a#4#1#0@@3|) (Lit |a#4#2#0@@0|)) (Lit (|#QueryStates.QueryState.InProgress| |a#4#0#0@@7| |a#4#1#0@@3| |a#4#2#0@@0|)))) :qid |QueryStateidfy.16:18| :skolemid |4719| :pattern ( (|#QueryStates.QueryState.InProgress| (Lit |a#4#0#0@@7|) (Lit |a#4#1#0@@3|) (Lit |a#4#2#0@@0|))) )))
(assert (forall ((|a#5#0#0@@8| T@U) (|a#5#1#0@@3| T@U) (|a#5#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#5#0#0@@8|) (SeqType BoxType)) (= (type |a#5#1#0@@3|) DatatypeTypeType)) (= (type |a#5#2#0@@0|) BoxType)) (= (QueryStates.QueryState.key (|#QueryStates.QueryState.InProgress| |a#5#0#0@@8| |a#5#1#0@@3| |a#5#2#0@@0|)) |a#5#0#0@@8|)) :qid |QueryStateidfy.16:18| :skolemid |4720| :pattern ( (|#QueryStates.QueryState.InProgress| |a#5#0#0@@8| |a#5#1#0@@3| |a#5#2#0@@0|)) )))
(assert (forall ((|a#6#0#0@@8| T@U) (|a#6#1#0@@3| T@U) (|a#6#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#6#0#0@@8|) (SeqType BoxType)) (= (type |a#6#1#0@@3|) DatatypeTypeType)) (= (type |a#6#2#0@@0|) BoxType)) (= (QueryStates.QueryState.delta (|#QueryStates.QueryState.InProgress| |a#6#0#0@@8| |a#6#1#0@@3| |a#6#2#0@@0|)) |a#6#1#0@@3|)) :qid |QueryStateidfy.16:18| :skolemid |4721| :pattern ( (|#QueryStates.QueryState.InProgress| |a#6#0#0@@8| |a#6#1#0@@3| |a#6#2#0@@0|)) )))
(assert (forall ((|a#7#0#0@@8| T@U) (|a#7#1#0@@3| T@U) (|a#7#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#7#0#0@@8|) (SeqType BoxType)) (= (type |a#7#1#0@@3|) DatatypeTypeType)) (= (type |a#7#2#0@@0|) BoxType)) (< (DtRank |a#7#1#0@@3|) (DtRank (|#QueryStates.QueryState.InProgress| |a#7#0#0@@8| |a#7#1#0@@3| |a#7#2#0@@0|)))) :qid |QueryStateidfy.16:18| :skolemid |4722| :pattern ( (|#QueryStates.QueryState.InProgress| |a#7#0#0@@8| |a#7#1#0@@3| |a#7#2#0@@0|)) )))
(assert (forall ((|a#8#0#0@@8| T@U) (|a#8#1#0@@4| T@U) (|a#8#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#8#0#0@@8|) (SeqType BoxType)) (= (type |a#8#1#0@@4|) DatatypeTypeType)) (= (type |a#8#2#0@@0|) BoxType)) (= (QueryStates.QueryState.ref (|#QueryStates.QueryState.InProgress| |a#8#0#0@@8| |a#8#1#0@@4| |a#8#2#0@@0|)) |a#8#2#0@@0|)) :qid |QueryStateidfy.16:18| :skolemid |4723| :pattern ( (|#QueryStates.QueryState.InProgress| |a#8#0#0@@8| |a#8#1#0@@4| |a#8#2#0@@0|)) )))
(assert (forall ((arg0@@729 T@U) (arg1@@338 T@U) ) (! (= (type (|#QueryStates.QueryState.Finished| arg0@@729 arg1@@338)) DatatypeTypeType) :qid |funType:#QueryStates.QueryState.Finished| :pattern ( (|#QueryStates.QueryState.Finished| arg0@@729 arg1@@338)) )))
(assert (forall ((|a#9#0#0@@7| T@U) (|a#9#1#0@@3| T@U) ) (!  (=> (and (= (type |a#9#0#0@@7|) (SeqType BoxType)) (= (type |a#9#1#0@@3|) (SeqType BoxType))) (= (DatatypeCtorId (|#QueryStates.QueryState.Finished| |a#9#0#0@@7| |a#9#1#0@@3|)) |##QueryStates.QueryState.Finished|)) :qid |QueryStateidfy.17:16| :skolemid |4724| :pattern ( (|#QueryStates.QueryState.Finished| |a#9#0#0@@7| |a#9#1#0@@3|)) )))
(assert (forall ((d@@295 T@U) ) (!  (=> (= (type d@@295) DatatypeTypeType) (= (QueryStates.QueryState.Finished_q d@@295) (= (DatatypeCtorId d@@295) |##QueryStates.QueryState.Finished|))) :qid |unknown.0:0| :skolemid |4725| :pattern ( (QueryStates.QueryState.Finished_q d@@295)) )))
(assert (forall ((d@@296 T@U) ) (!  (=> (and (= (type d@@296) DatatypeTypeType) (QueryStates.QueryState.Finished_q d@@296)) (exists ((|a#10#0#0@@7| T@U) (|a#10#1#0@@2| T@U) ) (!  (and (and (= (type |a#10#0#0@@7|) (SeqType BoxType)) (= (type |a#10#1#0@@2|) (SeqType BoxType))) (= d@@296 (|#QueryStates.QueryState.Finished| |a#10#0#0@@7| |a#10#1#0@@2|))) :qid |QueryStateidfy.17:16| :skolemid |4726| :no-pattern (type |a#10#0#0@@7|) :no-pattern (type |a#10#1#0@@2|) :no-pattern (U_2_int |a#10#0#0@@7|) :no-pattern (U_2_bool |a#10#0#0@@7|) :no-pattern (U_2_int |a#10#1#0@@2|) :no-pattern (U_2_bool |a#10#1#0@@2|) ))) :qid |unknown.0:0| :skolemid |4727| :pattern ( (QueryStates.QueryState.Finished_q d@@296)) )))
(assert (forall ((|a#11#0#0@@7| T@U) (|a#11#1#0@@2| T@U) ) (!  (=> (and (= (type |a#11#0#0@@7|) (SeqType BoxType)) (= (type |a#11#1#0@@2|) (SeqType BoxType))) (= ($Is (|#QueryStates.QueryState.Finished| |a#11#0#0@@7| |a#11#1#0@@2|) Tclass.QueryStates.QueryState)  (and ($Is |a#11#0#0@@7| Tclass.KeyType.Key) ($Is |a#11#1#0@@2| Tclass.ValueType.Value)))) :qid |QueryStateidfy.17:16| :skolemid |4728| :pattern ( ($Is (|#QueryStates.QueryState.Finished| |a#11#0#0@@7| |a#11#1#0@@2|) Tclass.QueryStates.QueryState)) )))
(assert (forall ((|a#12#0#0@@5| T@U) (|a#12#1#0@@2| T@U) ($h@@247 T@U) ) (!  (=> (and (and (and (= (type |a#12#0#0@@5|) (SeqType BoxType)) (= (type |a#12#1#0@@2|) (SeqType BoxType))) (= (type $h@@247) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@247)) (= ($IsAlloc (|#QueryStates.QueryState.Finished| |a#12#0#0@@5| |a#12#1#0@@2|) Tclass.QueryStates.QueryState $h@@247)  (and ($IsAlloc |a#12#0#0@@5| Tclass.KeyType.Key $h@@247) ($IsAlloc |a#12#1#0@@2| Tclass.ValueType.Value $h@@247)))) :qid |QueryStateidfy.17:16| :skolemid |4729| :pattern ( ($IsAlloc (|#QueryStates.QueryState.Finished| |a#12#0#0@@5| |a#12#1#0@@2|) Tclass.QueryStates.QueryState $h@@247)) )))
(assert (forall ((d@@297 T@U) ($h@@248 T@U) ) (!  (=> (and (and (= (type d@@297) DatatypeTypeType) (= (type $h@@248) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@248) (and (QueryStates.QueryState.Finished_q d@@297) ($IsAlloc d@@297 Tclass.QueryStates.QueryState $h@@248)))) ($IsAlloc (QueryStates.QueryState.key d@@297) Tclass.KeyType.Key $h@@248)) :qid |unknown.0:0| :skolemid |4730| :pattern ( ($IsAlloc (QueryStates.QueryState.key d@@297) Tclass.KeyType.Key $h@@248)) )))
(assert (forall ((d@@298 T@U) ($h@@249 T@U) ) (!  (=> (and (and (= (type d@@298) DatatypeTypeType) (= (type $h@@249) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@249) (and (QueryStates.QueryState.Finished_q d@@298) ($IsAlloc d@@298 Tclass.QueryStates.QueryState $h@@249)))) ($IsAlloc (QueryStates.QueryState.answer d@@298) Tclass.ValueType.Value $h@@249)) :qid |unknown.0:0| :skolemid |4731| :pattern ( ($IsAlloc (QueryStates.QueryState.answer d@@298) Tclass.ValueType.Value $h@@249)) )))
(assert (forall ((|a#13#0#0@@5| T@U) (|a#13#1#0@@3| T@U) ) (!  (=> (and (= (type |a#13#0#0@@5|) (SeqType BoxType)) (= (type |a#13#1#0@@3|) (SeqType BoxType))) (= (|#QueryStates.QueryState.Finished| (Lit |a#13#0#0@@5|) (Lit |a#13#1#0@@3|)) (Lit (|#QueryStates.QueryState.Finished| |a#13#0#0@@5| |a#13#1#0@@3|)))) :qid |QueryStateidfy.17:16| :skolemid |4732| :pattern ( (|#QueryStates.QueryState.Finished| (Lit |a#13#0#0@@5|) (Lit |a#13#1#0@@3|))) )))
(assert (forall ((|a#14#0#0@@6| T@U) (|a#14#1#0@@4| T@U) ) (!  (=> (and (= (type |a#14#0#0@@6|) (SeqType BoxType)) (= (type |a#14#1#0@@4|) (SeqType BoxType))) (= (QueryStates.QueryState.key (|#QueryStates.QueryState.Finished| |a#14#0#0@@6| |a#14#1#0@@4|)) |a#14#0#0@@6|)) :qid |QueryStateidfy.17:16| :skolemid |4733| :pattern ( (|#QueryStates.QueryState.Finished| |a#14#0#0@@6| |a#14#1#0@@4|)) )))
(assert (forall ((|a#15#0#0@@6| T@U) (|a#15#1#0@@4| T@U) ) (!  (=> (and (= (type |a#15#0#0@@6|) (SeqType BoxType)) (= (type |a#15#1#0@@4|) (SeqType BoxType))) (= (QueryStates.QueryState.answer (|#QueryStates.QueryState.Finished| |a#15#0#0@@6| |a#15#1#0@@4|)) |a#15#1#0@@4|)) :qid |QueryStateidfy.17:16| :skolemid |4734| :pattern ( (|#QueryStates.QueryState.Finished| |a#15#0#0@@6| |a#15#1#0@@4|)) )))
(assert (forall ((d@@299 T@U) ) (!  (=> (and (= (type d@@299) DatatypeTypeType) (|$IsA#QueryStates.QueryState| d@@299)) (or (QueryStates.QueryState.InProgress_q d@@299) (QueryStates.QueryState.Finished_q d@@299))) :qid |unknown.0:0| :skolemid |4735| :pattern ( (|$IsA#QueryStates.QueryState| d@@299)) )))
(assert (forall ((d@@300 T@U) ) (!  (=> (and (= (type d@@300) DatatypeTypeType) ($Is d@@300 Tclass.QueryStates.QueryState)) (or (QueryStates.QueryState.InProgress_q d@@300) (QueryStates.QueryState.Finished_q d@@300))) :qid |unknown.0:0| :skolemid |4736| :pattern ( (QueryStates.QueryState.Finished_q d@@300) ($Is d@@300 Tclass.QueryStates.QueryState)) :pattern ( (QueryStates.QueryState.InProgress_q d@@300) ($Is d@@300 Tclass.QueryStates.QueryState)) )))
(assert (forall ((a@@215 T@U) (b@@152 T@U) ) (!  (=> (and (and (= (type a@@215) DatatypeTypeType) (= (type b@@152) DatatypeTypeType)) (and (QueryStates.QueryState.InProgress_q a@@215) (QueryStates.QueryState.InProgress_q b@@152))) (= (|QueryStates.QueryState#Equal| a@@215 b@@152)  (and (and (|Seq#Equal| (QueryStates.QueryState.key a@@215) (QueryStates.QueryState.key b@@152)) (|ValueMessage.Delta#Equal| (QueryStates.QueryState.delta a@@215) (QueryStates.QueryState.delta b@@152))) (= (QueryStates.QueryState.ref a@@215) (QueryStates.QueryState.ref b@@152))))) :qid |unknown.0:0| :skolemid |4737| :pattern ( (|QueryStates.QueryState#Equal| a@@215 b@@152) (QueryStates.QueryState.InProgress_q a@@215)) :pattern ( (|QueryStates.QueryState#Equal| a@@215 b@@152) (QueryStates.QueryState.InProgress_q b@@152)) )))
(assert (forall ((a@@216 T@U) (b@@153 T@U) ) (!  (=> (and (and (= (type a@@216) DatatypeTypeType) (= (type b@@153) DatatypeTypeType)) (and (QueryStates.QueryState.Finished_q a@@216) (QueryStates.QueryState.Finished_q b@@153))) (= (|QueryStates.QueryState#Equal| a@@216 b@@153)  (and (|Seq#Equal| (QueryStates.QueryState.key a@@216) (QueryStates.QueryState.key b@@153)) (|Seq#Equal| (QueryStates.QueryState.answer a@@216) (QueryStates.QueryState.answer b@@153))))) :qid |unknown.0:0| :skolemid |4738| :pattern ( (|QueryStates.QueryState#Equal| a@@216 b@@153) (QueryStates.QueryState.Finished_q a@@216)) :pattern ( (|QueryStates.QueryState#Equal| a@@216 b@@153) (QueryStates.QueryState.Finished_q b@@153)) )))
(assert (forall ((a@@217 T@U) (b@@154 T@U) ) (!  (=> (and (= (type a@@217) DatatypeTypeType) (= (type b@@154) DatatypeTypeType)) (= (|QueryStates.QueryState#Equal| a@@217 b@@154) (= a@@217 b@@154))) :qid |unknown.0:0| :skolemid |4739| :pattern ( (|QueryStates.QueryState#Equal| a@@217 b@@154)) )))
(assert (forall ((arg0@@730 T@U) (arg1@@339 T@U) (arg2@@201 T@U) ) (! (= (type (|#QueryStates.QueryDescent.QueryDescent| arg0@@730 arg1@@339 arg2@@201)) DatatypeTypeType) :qid |funType:#QueryStates.QueryDescent.QueryDescent| :pattern ( (|#QueryStates.QueryDescent.QueryDescent| arg0@@730 arg1@@339 arg2@@201)) )))
(assert (forall ((|a#16#0#0@@6| T@U) (|a#16#1#0@@4| T@U) (|a#16#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#16#0#0@@6|) DatatypeTypeType) (= (type |a#16#1#0@@4|) DatatypeTypeType)) (= (type |a#16#2#0@@0|) DatatypeTypeType)) (= (DatatypeCtorId (|#QueryStates.QueryDescent.QueryDescent| |a#16#0#0@@6| |a#16#1#0@@4| |a#16#2#0@@0|)) |##QueryStates.QueryDescent.QueryDescent|)) :qid |QueryStateidfy.20:7| :skolemid |4740| :pattern ( (|#QueryStates.QueryDescent.QueryDescent| |a#16#0#0@@6| |a#16#1#0@@4| |a#16#2#0@@0|)) )))
(assert (forall ((d@@301 T@U) ) (!  (=> (= (type d@@301) DatatypeTypeType) (= (QueryStates.QueryDescent.QueryDescent_q d@@301) (= (DatatypeCtorId d@@301) |##QueryStates.QueryDescent.QueryDescent|))) :qid |unknown.0:0| :skolemid |4741| :pattern ( (QueryStates.QueryDescent.QueryDescent_q d@@301)) )))
(assert (forall ((d@@302 T@U) ) (!  (=> (and (= (type d@@302) DatatypeTypeType) (QueryStates.QueryDescent.QueryDescent_q d@@302)) (exists ((|a#17#0#0@@7| T@U) (|a#17#1#0@@4| T@U) (|a#17#2#0@@0| T@U) ) (!  (and (and (and (= (type |a#17#0#0@@7|) DatatypeTypeType) (= (type |a#17#1#0@@4|) DatatypeTypeType)) (= (type |a#17#2#0@@0|) DatatypeTypeType)) (= d@@302 (|#QueryStates.QueryDescent.QueryDescent| |a#17#0#0@@7| |a#17#1#0@@4| |a#17#2#0@@0|))) :qid |QueryStateidfy.20:7| :skolemid |4742| :no-pattern (type |a#17#0#0@@7|) :no-pattern (type |a#17#1#0@@4|) :no-pattern (type |a#17#2#0@@0|) :no-pattern (U_2_int |a#17#0#0@@7|) :no-pattern (U_2_bool |a#17#0#0@@7|) :no-pattern (U_2_int |a#17#1#0@@4|) :no-pattern (U_2_bool |a#17#1#0@@4|) :no-pattern (U_2_int |a#17#2#0@@0|) :no-pattern (U_2_bool |a#17#2#0@@0|) ))) :qid |unknown.0:0| :skolemid |4743| :pattern ( (QueryStates.QueryDescent.QueryDescent_q d@@302)) )))
(assert (forall ((|a#18#0#0@@7| T@U) (|a#18#1#0@@4| T@U) (|a#18#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#18#0#0@@7|) DatatypeTypeType) (= (type |a#18#1#0@@4|) DatatypeTypeType)) (= (type |a#18#2#0@@0|) DatatypeTypeType)) (= ($Is (|#QueryStates.QueryDescent.QueryDescent| |a#18#0#0@@7| |a#18#1#0@@4| |a#18#2#0@@0|) Tclass.QueryStates.QueryDescent)  (and (and ($Is |a#18#0#0@@7| Tclass.QueryStates.QueryState) ($Is |a#18#1#0@@4| Tclass.BetreeGraph.Node)) ($Is |a#18#2#0@@0| Tclass.QueryStates.QueryState)))) :qid |QueryStateidfy.20:7| :skolemid |4744| :pattern ( ($Is (|#QueryStates.QueryDescent.QueryDescent| |a#18#0#0@@7| |a#18#1#0@@4| |a#18#2#0@@0|) Tclass.QueryStates.QueryDescent)) )))
(assert (forall ((|a#19#0#0@@7| T@U) (|a#19#1#0@@4| T@U) (|a#19#2#0@@0| T@U) ($h@@250 T@U) ) (!  (=> (and (and (and (and (= (type |a#19#0#0@@7|) DatatypeTypeType) (= (type |a#19#1#0@@4|) DatatypeTypeType)) (= (type |a#19#2#0@@0|) DatatypeTypeType)) (= (type $h@@250) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@250)) (= ($IsAlloc (|#QueryStates.QueryDescent.QueryDescent| |a#19#0#0@@7| |a#19#1#0@@4| |a#19#2#0@@0|) Tclass.QueryStates.QueryDescent $h@@250)  (and (and ($IsAlloc |a#19#0#0@@7| Tclass.QueryStates.QueryState $h@@250) ($IsAlloc |a#19#1#0@@4| Tclass.BetreeGraph.Node $h@@250)) ($IsAlloc |a#19#2#0@@0| Tclass.QueryStates.QueryState $h@@250)))) :qid |QueryStateidfy.20:7| :skolemid |4745| :pattern ( ($IsAlloc (|#QueryStates.QueryDescent.QueryDescent| |a#19#0#0@@7| |a#19#1#0@@4| |a#19#2#0@@0|) Tclass.QueryStates.QueryDescent $h@@250)) )))
(assert (forall ((arg0@@731 T@U) ) (! (= (type (QueryStates.QueryDescent.query arg0@@731)) DatatypeTypeType) :qid |funType:QueryStates.QueryDescent.query| :pattern ( (QueryStates.QueryDescent.query arg0@@731)) )))
(assert (forall ((d@@303 T@U) ($h@@251 T@U) ) (!  (=> (and (and (= (type d@@303) DatatypeTypeType) (= (type $h@@251) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@251) (and (QueryStates.QueryDescent.QueryDescent_q d@@303) ($IsAlloc d@@303 Tclass.QueryStates.QueryDescent $h@@251)))) ($IsAlloc (QueryStates.QueryDescent.query d@@303) Tclass.QueryStates.QueryState $h@@251)) :qid |unknown.0:0| :skolemid |4746| :pattern ( ($IsAlloc (QueryStates.QueryDescent.query d@@303) Tclass.QueryStates.QueryState $h@@251)) )))
(assert (forall ((arg0@@732 T@U) ) (! (= (type (QueryStates.QueryDescent.parent arg0@@732)) DatatypeTypeType) :qid |funType:QueryStates.QueryDescent.parent| :pattern ( (QueryStates.QueryDescent.parent arg0@@732)) )))
(assert (forall ((d@@304 T@U) ($h@@252 T@U) ) (!  (=> (and (and (= (type d@@304) DatatypeTypeType) (= (type $h@@252) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@252) (and (QueryStates.QueryDescent.QueryDescent_q d@@304) ($IsAlloc d@@304 Tclass.QueryStates.QueryDescent $h@@252)))) ($IsAlloc (QueryStates.QueryDescent.parent d@@304) Tclass.BetreeGraph.Node $h@@252)) :qid |unknown.0:0| :skolemid |4747| :pattern ( ($IsAlloc (QueryStates.QueryDescent.parent d@@304) Tclass.BetreeGraph.Node $h@@252)) )))
(assert (forall ((arg0@@733 T@U) ) (! (= (type (QueryStates.QueryDescent.query_k arg0@@733)) DatatypeTypeType) :qid |funType:QueryStates.QueryDescent.query_k| :pattern ( (QueryStates.QueryDescent.query_k arg0@@733)) )))
(assert (forall ((d@@305 T@U) ($h@@253 T@U) ) (!  (=> (and (and (= (type d@@305) DatatypeTypeType) (= (type $h@@253) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@253) (and (QueryStates.QueryDescent.QueryDescent_q d@@305) ($IsAlloc d@@305 Tclass.QueryStates.QueryDescent $h@@253)))) ($IsAlloc (QueryStates.QueryDescent.query_k d@@305) Tclass.QueryStates.QueryState $h@@253)) :qid |unknown.0:0| :skolemid |4748| :pattern ( ($IsAlloc (QueryStates.QueryDescent.query_k d@@305) Tclass.QueryStates.QueryState $h@@253)) )))
(assert (forall ((|a#20#0#0@@7| T@U) (|a#20#1#0@@4| T@U) (|a#20#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#20#0#0@@7|) DatatypeTypeType) (= (type |a#20#1#0@@4|) DatatypeTypeType)) (= (type |a#20#2#0@@0|) DatatypeTypeType)) (= (|#QueryStates.QueryDescent.QueryDescent| (Lit |a#20#0#0@@7|) (Lit |a#20#1#0@@4|) (Lit |a#20#2#0@@0|)) (Lit (|#QueryStates.QueryDescent.QueryDescent| |a#20#0#0@@7| |a#20#1#0@@4| |a#20#2#0@@0|)))) :qid |QueryStateidfy.20:7| :skolemid |4749| :pattern ( (|#QueryStates.QueryDescent.QueryDescent| (Lit |a#20#0#0@@7|) (Lit |a#20#1#0@@4|) (Lit |a#20#2#0@@0|))) )))
(assert (forall ((|a#21#0#0@@7| T@U) (|a#21#1#0@@4| T@U) (|a#21#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#21#0#0@@7|) DatatypeTypeType) (= (type |a#21#1#0@@4|) DatatypeTypeType)) (= (type |a#21#2#0@@0|) DatatypeTypeType)) (= (QueryStates.QueryDescent.query (|#QueryStates.QueryDescent.QueryDescent| |a#21#0#0@@7| |a#21#1#0@@4| |a#21#2#0@@0|)) |a#21#0#0@@7|)) :qid |QueryStateidfy.20:7| :skolemid |4750| :pattern ( (|#QueryStates.QueryDescent.QueryDescent| |a#21#0#0@@7| |a#21#1#0@@4| |a#21#2#0@@0|)) )))
(assert (forall ((|a#22#0#0@@7| T@U) (|a#22#1#0@@5| T@U) (|a#22#2#0@@1| T@U) ) (!  (=> (and (and (= (type |a#22#0#0@@7|) DatatypeTypeType) (= (type |a#22#1#0@@5|) DatatypeTypeType)) (= (type |a#22#2#0@@1|) DatatypeTypeType)) (< (DtRank |a#22#0#0@@7|) (DtRank (|#QueryStates.QueryDescent.QueryDescent| |a#22#0#0@@7| |a#22#1#0@@5| |a#22#2#0@@1|)))) :qid |QueryStateidfy.20:7| :skolemid |4751| :pattern ( (|#QueryStates.QueryDescent.QueryDescent| |a#22#0#0@@7| |a#22#1#0@@5| |a#22#2#0@@1|)) )))
(assert (forall ((|a#23#0#0@@5| T@U) (|a#23#1#0@@4| T@U) (|a#23#2#0@@1| T@U) ) (!  (=> (and (and (= (type |a#23#0#0@@5|) DatatypeTypeType) (= (type |a#23#1#0@@4|) DatatypeTypeType)) (= (type |a#23#2#0@@1|) DatatypeTypeType)) (= (QueryStates.QueryDescent.parent (|#QueryStates.QueryDescent.QueryDescent| |a#23#0#0@@5| |a#23#1#0@@4| |a#23#2#0@@1|)) |a#23#1#0@@4|)) :qid |QueryStateidfy.20:7| :skolemid |4752| :pattern ( (|#QueryStates.QueryDescent.QueryDescent| |a#23#0#0@@5| |a#23#1#0@@4| |a#23#2#0@@1|)) )))
(assert (forall ((|a#24#0#0@@3| T@U) (|a#24#1#0@@2| T@U) (|a#24#2#0@@1| T@U) ) (!  (=> (and (and (= (type |a#24#0#0@@3|) DatatypeTypeType) (= (type |a#24#1#0@@2|) DatatypeTypeType)) (= (type |a#24#2#0@@1|) DatatypeTypeType)) (< (DtRank |a#24#1#0@@2|) (DtRank (|#QueryStates.QueryDescent.QueryDescent| |a#24#0#0@@3| |a#24#1#0@@2| |a#24#2#0@@1|)))) :qid |QueryStateidfy.20:7| :skolemid |4753| :pattern ( (|#QueryStates.QueryDescent.QueryDescent| |a#24#0#0@@3| |a#24#1#0@@2| |a#24#2#0@@1|)) )))
(assert (forall ((|a#25#0#0@@3| T@U) (|a#25#1#0@@2| T@U) (|a#25#2#0@@1| T@U) ) (!  (=> (and (and (= (type |a#25#0#0@@3|) DatatypeTypeType) (= (type |a#25#1#0@@2|) DatatypeTypeType)) (= (type |a#25#2#0@@1|) DatatypeTypeType)) (= (QueryStates.QueryDescent.query_k (|#QueryStates.QueryDescent.QueryDescent| |a#25#0#0@@3| |a#25#1#0@@2| |a#25#2#0@@1|)) |a#25#2#0@@1|)) :qid |QueryStateidfy.20:7| :skolemid |4754| :pattern ( (|#QueryStates.QueryDescent.QueryDescent| |a#25#0#0@@3| |a#25#1#0@@2| |a#25#2#0@@1|)) )))
(assert (forall ((|a#26#0#0@@3| T@U) (|a#26#1#0@@2| T@U) (|a#26#2#0@@1| T@U) ) (!  (=> (and (and (= (type |a#26#0#0@@3|) DatatypeTypeType) (= (type |a#26#1#0@@2|) DatatypeTypeType)) (= (type |a#26#2#0@@1|) DatatypeTypeType)) (< (DtRank |a#26#2#0@@1|) (DtRank (|#QueryStates.QueryDescent.QueryDescent| |a#26#0#0@@3| |a#26#1#0@@2| |a#26#2#0@@1|)))) :qid |QueryStateidfy.20:7| :skolemid |4755| :pattern ( (|#QueryStates.QueryDescent.QueryDescent| |a#26#0#0@@3| |a#26#1#0@@2| |a#26#2#0@@1|)) )))
(assert (forall ((d@@306 T@U) ) (!  (=> (and (= (type d@@306) DatatypeTypeType) (|$IsA#QueryStates.QueryDescent| d@@306)) (QueryStates.QueryDescent.QueryDescent_q d@@306)) :qid |unknown.0:0| :skolemid |4756| :pattern ( (|$IsA#QueryStates.QueryDescent| d@@306)) )))
(assert (forall ((d@@307 T@U) ) (!  (=> (and (= (type d@@307) DatatypeTypeType) ($Is d@@307 Tclass.QueryStates.QueryDescent)) (QueryStates.QueryDescent.QueryDescent_q d@@307)) :qid |unknown.0:0| :skolemid |4757| :pattern ( (QueryStates.QueryDescent.QueryDescent_q d@@307) ($Is d@@307 Tclass.QueryStates.QueryDescent)) )))
(assert (forall ((a@@218 T@U) (b@@155 T@U) ) (!  (=> (and (and (= (type a@@218) DatatypeTypeType) (= (type b@@155) DatatypeTypeType)) true) (= (|QueryStates.QueryDescent#Equal| a@@218 b@@155)  (and (and (|QueryStates.QueryState#Equal| (QueryStates.QueryDescent.query a@@218) (QueryStates.QueryDescent.query b@@155)) (|BetreeGraph.Node#Equal| (QueryStates.QueryDescent.parent a@@218) (QueryStates.QueryDescent.parent b@@155))) (|QueryStates.QueryState#Equal| (QueryStates.QueryDescent.query_k a@@218) (QueryStates.QueryDescent.query_k b@@155))))) :qid |unknown.0:0| :skolemid |4758| :pattern ( (|QueryStates.QueryDescent#Equal| a@@218 b@@155)) )))
(assert (forall ((a@@219 T@U) (b@@156 T@U) ) (!  (=> (and (= (type a@@219) DatatypeTypeType) (= (type b@@156) DatatypeTypeType)) (= (|QueryStates.QueryDescent#Equal| a@@219 b@@156) (= a@@219 b@@156))) :qid |unknown.0:0| :skolemid |4759| :pattern ( (|QueryStates.QueryDescent#Equal| a@@219 b@@156)) )))
(assert (= (type Tclass.QueryStates.__default) TyType))
(assert (= (Tag Tclass.QueryStates.__default) Tagclass.QueryStates.__default))
(assert (= (TagFamily Tclass.QueryStates.__default) tytagFamily$_default))
(assert (forall ((bx@@199 T@U) ) (!  (=> (and (= (type bx@@199) BoxType) ($IsBox bx@@199 Tclass.QueryStates.__default)) (and (= ($Box ($Unbox refType bx@@199)) bx@@199) ($Is ($Unbox refType bx@@199) Tclass.QueryStates.__default))) :qid |unknown.0:0| :skolemid |4760| :pattern ( ($IsBox bx@@199 Tclass.QueryStates.__default)) )))
(assert (forall (($o@@66 T@U) ) (!  (=> (= (type $o@@66) refType) (= ($Is $o@@66 Tclass.QueryStates.__default)  (or (= $o@@66 null) (= (dtype $o@@66) Tclass.QueryStates.__default)))) :qid |unknown.0:0| :skolemid |4761| :pattern ( ($Is $o@@66 Tclass.QueryStates.__default)) )))
(assert (forall (($o@@67 T@U) ($h@@254 T@U) ) (!  (=> (and (= (type $o@@67) refType) (= (type $h@@254) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@67 Tclass.QueryStates.__default $h@@254)  (or (= $o@@67 null) (U_2_bool (MapType1Select (MapType0Select $h@@254 $o@@67) alloc))))) :qid |unknown.0:0| :skolemid |4762| :pattern ( ($IsAlloc $o@@67 Tclass.QueryStates.__default $h@@254)) )))
(assert  (=> true (forall ((|q#0@@27| T@U) ) (!  (=> (and (= (type |q#0@@27|) DatatypeTypeType) (or (|QueryStates.__default.ValidQueryDescent#canCall| |q#0@@27|) ($Is |q#0@@27| Tclass.QueryStates.QueryDescent))) true) :qid |QueryStateidfy.24:31| :skolemid |4763| :pattern ( (QueryStates.__default.ValidQueryDescent |q#0@@27|)) ))))
(assert (forall ((|q#0@@28| T@U) ) (!  (=> (and (= (type |q#0@@28|) DatatypeTypeType) ($Is |q#0@@28| Tclass.QueryStates.QueryDescent)) (= (|QueryStates.__default.ValidQueryDescent#requires| |q#0@@28|) true)) :qid |QueryStateidfy.24:31| :skolemid |4764| :pattern ( (|QueryStates.__default.ValidQueryDescent#requires| |q#0@@28|)) )))
(assert  (=> true (forall ((|q#0@@29| T@U) ) (!  (=> (and (= (type |q#0@@29|) DatatypeTypeType) (or (|QueryStates.__default.ValidQueryDescent#canCall| |q#0@@29|) ($Is |q#0@@29| Tclass.QueryStates.QueryDescent))) (and (and (and (QueryStates.QueryDescent.QueryDescent_q |q#0@@29|) (|BetreeSpec.__default.WFNode#canCall| (QueryStates.QueryDescent.parent |q#0@@29|))) (=> (BetreeSpec.__default.WFNode (QueryStates.QueryDescent.parent |q#0@@29|)) (and (QueryStates.QueryDescent.QueryDescent_q |q#0@@29|) (=> (QueryStates.QueryState.InProgress_q (QueryStates.QueryDescent.query |q#0@@29|)) (and (and (and (QueryStates.QueryDescent.QueryDescent_q |q#0@@29|) (or (QueryStates.QueryState.InProgress_q (QueryStates.QueryDescent.query_k |q#0@@29|)) (QueryStates.QueryState.Finished_q (QueryStates.QueryDescent.query_k |q#0@@29|)))) (and (QueryStates.QueryDescent.QueryDescent_q |q#0@@29|) (or (QueryStates.QueryState.InProgress_q (QueryStates.QueryDescent.query |q#0@@29|)) (QueryStates.QueryState.Finished_q (QueryStates.QueryDescent.query |q#0@@29|))))) (=> (|Seq#Equal| (QueryStates.QueryState.key (QueryStates.QueryDescent.query_k |q#0@@29|)) (QueryStates.QueryState.key (QueryStates.QueryDescent.query |q#0@@29|))) (and (and (and (and (QueryStates.QueryDescent.QueryDescent_q |q#0@@29|) (BetreeGraph.Node.Node_q (QueryStates.QueryDescent.parent |q#0@@29|))) (and (QueryStates.QueryDescent.QueryDescent_q |q#0@@29|) (or (QueryStates.QueryState.InProgress_q (QueryStates.QueryDescent.query |q#0@@29|)) (QueryStates.QueryState.Finished_q (QueryStates.QueryDescent.query |q#0@@29|))))) (=> (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeGraph.Node.buffer (QueryStates.QueryDescent.parent |q#0@@29|))) ($Box (QueryStates.QueryState.key (QueryStates.QueryDescent.query |q#0@@29|)))))) (=> (U_2_bool (Lit (bool_2_U true))) (and (|$IsA#QueryStates.QueryState| (QueryStates.QueryDescent.query_k |q#0@@29|)) (and (QueryStates.QueryDescent.QueryDescent_q |q#0@@29|) (and (and (QueryStates.QueryDescent.QueryDescent_q |q#0@@29|) (or (QueryStates.QueryState.InProgress_q (QueryStates.QueryDescent.query |q#0@@29|)) (QueryStates.QueryState.Finished_q (QueryStates.QueryDescent.query |q#0@@29|)))) (and (and (QueryStates.QueryDescent.QueryDescent_q |q#0@@29|) (and (and (QueryStates.QueryDescent.QueryDescent_q |q#0@@29|) (BetreeGraph.Node.Node_q (QueryStates.QueryDescent.parent |q#0@@29|))) (and (QueryStates.QueryDescent.QueryDescent_q |q#0@@29|) (or (QueryStates.QueryState.InProgress_q (QueryStates.QueryDescent.query |q#0@@29|)) (QueryStates.QueryState.Finished_q (QueryStates.QueryDescent.query |q#0@@29|)))))) (|ValueMessage.__default.ApplyDelta#canCall| (QueryStates.QueryState.delta (QueryStates.QueryDescent.query |q#0@@29|)) (ValueMessage.Message.value ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeGraph.Node.buffer (QueryStates.QueryDescent.parent |q#0@@29|))) ($Box (QueryStates.QueryState.key (QueryStates.QueryDescent.query |q#0@@29|)))))))))))))) (=> (not (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeGraph.Node.buffer (QueryStates.QueryDescent.parent |q#0@@29|))) ($Box (QueryStates.QueryState.key (QueryStates.QueryDescent.query |q#0@@29|))))))) (and (QueryStates.QueryDescent.QueryDescent_q |q#0@@29|) (=> (QueryStates.QueryState.InProgress_q (QueryStates.QueryDescent.query_k |q#0@@29|)) (and (and (and (|$IsA#ValueMessage.Delta| (QueryStates.QueryState.delta (QueryStates.QueryDescent.query_k |q#0@@29|))) (|$IsA#ValueMessage.Delta| (ValueMessage.__default.CombineDeltas (QueryStates.QueryState.delta (QueryStates.QueryDescent.query |q#0@@29|)) (ValueMessage.Message.delta ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeGraph.Node.buffer (QueryStates.QueryDescent.parent |q#0@@29|))) ($Box (QueryStates.QueryState.key (QueryStates.QueryDescent.query |q#0@@29|))))))))) (and (QueryStates.QueryDescent.QueryDescent_q |q#0@@29|) (and (and (QueryStates.QueryDescent.QueryDescent_q |q#0@@29|) (and (and (QueryStates.QueryDescent.QueryDescent_q |q#0@@29|) (BetreeGraph.Node.Node_q (QueryStates.QueryDescent.parent |q#0@@29|))) (and (QueryStates.QueryDescent.QueryDescent_q |q#0@@29|) (or (QueryStates.QueryState.InProgress_q (QueryStates.QueryDescent.query |q#0@@29|)) (QueryStates.QueryState.Finished_q (QueryStates.QueryDescent.query |q#0@@29|)))))) (|ValueMessage.__default.CombineDeltas#canCall| (QueryStates.QueryState.delta (QueryStates.QueryDescent.query |q#0@@29|)) (ValueMessage.Message.delta ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeGraph.Node.buffer (QueryStates.QueryDescent.parent |q#0@@29|))) ($Box (QueryStates.QueryState.key (QueryStates.QueryDescent.query |q#0@@29|)))))))))) (=> (|ValueMessage.Delta#Equal| (QueryStates.QueryState.delta (QueryStates.QueryDescent.query_k |q#0@@29|)) (ValueMessage.__default.CombineDeltas (QueryStates.QueryState.delta (QueryStates.QueryDescent.query |q#0@@29|)) (ValueMessage.Message.delta ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeGraph.Node.buffer (QueryStates.QueryDescent.parent |q#0@@29|))) ($Box (QueryStates.QueryState.key (QueryStates.QueryDescent.query |q#0@@29|)))))))) (and (and (and (and (QueryStates.QueryDescent.QueryDescent_q |q#0@@29|) (BetreeGraph.Node.Node_q (QueryStates.QueryDescent.parent |q#0@@29|))) (and (QueryStates.QueryDescent.QueryDescent_q |q#0@@29|) (or (QueryStates.QueryState.InProgress_q (QueryStates.QueryDescent.query |q#0@@29|)) (QueryStates.QueryState.Finished_q (QueryStates.QueryDescent.query |q#0@@29|))))) (QueryStates.QueryDescent.QueryDescent_q |q#0@@29|)) (|Maps.__default.IMapsTo#canCall| Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (QueryStates.QueryDescent.parent |q#0@@29|)) ($Box (QueryStates.QueryState.key (QueryStates.QueryDescent.query |q#0@@29|))) (QueryStates.QueryState.ref (QueryStates.QueryDescent.query_k |q#0@@29|)))))))))))))))) (= (QueryStates.__default.ValidQueryDescent |q#0@@29|)  (and (and (and (BetreeSpec.__default.WFNode (QueryStates.QueryDescent.parent |q#0@@29|)) (QueryStates.QueryState.InProgress_q (QueryStates.QueryDescent.query |q#0@@29|))) (|Seq#Equal| (QueryStates.QueryState.key (QueryStates.QueryDescent.query_k |q#0@@29|)) (QueryStates.QueryState.key (QueryStates.QueryDescent.query |q#0@@29|)))) (ite (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeGraph.Node.buffer (QueryStates.QueryDescent.parent |q#0@@29|))) ($Box (QueryStates.QueryState.key (QueryStates.QueryDescent.query |q#0@@29|))))))  (and true (|QueryStates.QueryState#Equal| (QueryStates.QueryDescent.query_k |q#0@@29|) (|#QueryStates.QueryState.Finished| (QueryStates.QueryState.key (QueryStates.QueryDescent.query |q#0@@29|)) (ValueMessage.__default.ApplyDelta (QueryStates.QueryState.delta (QueryStates.QueryDescent.query |q#0@@29|)) (ValueMessage.Message.value ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeGraph.Node.buffer (QueryStates.QueryDescent.parent |q#0@@29|))) ($Box (QueryStates.QueryState.key (QueryStates.QueryDescent.query |q#0@@29|))))))))))  (and (and (QueryStates.QueryState.InProgress_q (QueryStates.QueryDescent.query_k |q#0@@29|)) (|ValueMessage.Delta#Equal| (QueryStates.QueryState.delta (QueryStates.QueryDescent.query_k |q#0@@29|)) (ValueMessage.__default.CombineDeltas (QueryStates.QueryState.delta (QueryStates.QueryDescent.query |q#0@@29|)) (ValueMessage.Message.delta ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (BetreeGraph.Node.buffer (QueryStates.QueryDescent.parent |q#0@@29|))) ($Box (QueryStates.QueryState.key (QueryStates.QueryDescent.query |q#0@@29|))))))))) (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (BetreeGraph.Node.children (QueryStates.QueryDescent.parent |q#0@@29|)) ($Box (QueryStates.QueryState.key (QueryStates.QueryDescent.query |q#0@@29|))) (QueryStates.QueryState.ref (QueryStates.QueryDescent.query_k |q#0@@29|))))))))) :qid |QueryStateidfy.24:31| :skolemid |4765| :pattern ( (QueryStates.__default.ValidQueryDescent |q#0@@29|)) ))))
(assert  (=> true (forall ((|q#0@@30| T@U) ) (!  (=> (and (= (type |q#0@@30|) DatatypeTypeType) (or (|QueryStates.__default.ValidQueryDescent#canCall| (Lit |q#0@@30|)) ($Is |q#0@@30| Tclass.QueryStates.QueryDescent))) (and (and (and (QueryStates.QueryDescent.QueryDescent_q (Lit |q#0@@30|)) (|BetreeSpec.__default.WFNode#canCall| (Lit (QueryStates.QueryDescent.parent (Lit |q#0@@30|))))) (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.__default.WFNode (Lit (QueryStates.QueryDescent.parent (Lit |q#0@@30|))))))) (and (QueryStates.QueryDescent.QueryDescent_q (Lit |q#0@@30|)) (=> (U_2_bool (Lit (bool_2_U (QueryStates.QueryState.InProgress_q (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|))))))) (and (and (and (QueryStates.QueryDescent.QueryDescent_q (Lit |q#0@@30|)) (or (QueryStates.QueryState.InProgress_q (Lit (QueryStates.QueryDescent.query_k (Lit |q#0@@30|)))) (QueryStates.QueryState.Finished_q (Lit (QueryStates.QueryDescent.query_k (Lit |q#0@@30|)))))) (and (QueryStates.QueryDescent.QueryDescent_q (Lit |q#0@@30|)) (or (QueryStates.QueryState.InProgress_q (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|)))) (QueryStates.QueryState.Finished_q (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|))))))) (=> (|Seq#Equal| (QueryStates.QueryState.key (Lit (QueryStates.QueryDescent.query_k (Lit |q#0@@30|)))) (QueryStates.QueryState.key (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|))))) (and (and (and (and (QueryStates.QueryDescent.QueryDescent_q (Lit |q#0@@30|)) (BetreeGraph.Node.Node_q (Lit (QueryStates.QueryDescent.parent (Lit |q#0@@30|))))) (and (QueryStates.QueryDescent.QueryDescent_q (Lit |q#0@@30|)) (or (QueryStates.QueryState.InProgress_q (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|)))) (QueryStates.QueryState.Finished_q (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|))))))) (=> (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.buffer (Lit (QueryStates.QueryDescent.parent (Lit |q#0@@30|)))))) ($Box (Lit (QueryStates.QueryState.key (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|))))))))) (=> (U_2_bool (Lit (bool_2_U true))) (and (|$IsA#QueryStates.QueryState| (Lit (QueryStates.QueryDescent.query_k (Lit |q#0@@30|)))) (and (QueryStates.QueryDescent.QueryDescent_q (Lit |q#0@@30|)) (and (and (QueryStates.QueryDescent.QueryDescent_q (Lit |q#0@@30|)) (or (QueryStates.QueryState.InProgress_q (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|)))) (QueryStates.QueryState.Finished_q (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|)))))) (and (and (QueryStates.QueryDescent.QueryDescent_q (Lit |q#0@@30|)) (and (and (QueryStates.QueryDescent.QueryDescent_q (Lit |q#0@@30|)) (BetreeGraph.Node.Node_q (Lit (QueryStates.QueryDescent.parent (Lit |q#0@@30|))))) (and (QueryStates.QueryDescent.QueryDescent_q (Lit |q#0@@30|)) (or (QueryStates.QueryState.InProgress_q (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|)))) (QueryStates.QueryState.Finished_q (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|)))))))) (|ValueMessage.__default.ApplyDelta#canCall| (Lit (QueryStates.QueryState.delta (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|))))) (ValueMessage.Message.value ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.buffer (Lit (QueryStates.QueryDescent.parent (Lit |q#0@@30|)))))) ($Box (Lit (QueryStates.QueryState.key (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|))))))))))))))))) (=> (not (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.buffer (Lit (QueryStates.QueryDescent.parent (Lit |q#0@@30|)))))) ($Box (Lit (QueryStates.QueryState.key (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|)))))))))) (and (QueryStates.QueryDescent.QueryDescent_q (Lit |q#0@@30|)) (=> (U_2_bool (Lit (bool_2_U (QueryStates.QueryState.InProgress_q (Lit (QueryStates.QueryDescent.query_k (Lit |q#0@@30|))))))) (and (and (and (|$IsA#ValueMessage.Delta| (Lit (QueryStates.QueryState.delta (Lit (QueryStates.QueryDescent.query_k (Lit |q#0@@30|)))))) (|$IsA#ValueMessage.Delta| (ValueMessage.__default.CombineDeltas (Lit (QueryStates.QueryState.delta (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|))))) (ValueMessage.Message.delta ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.buffer (Lit (QueryStates.QueryDescent.parent (Lit |q#0@@30|)))))) ($Box (Lit (QueryStates.QueryState.key (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|)))))))))))) (and (QueryStates.QueryDescent.QueryDescent_q (Lit |q#0@@30|)) (and (and (QueryStates.QueryDescent.QueryDescent_q (Lit |q#0@@30|)) (and (and (QueryStates.QueryDescent.QueryDescent_q (Lit |q#0@@30|)) (BetreeGraph.Node.Node_q (Lit (QueryStates.QueryDescent.parent (Lit |q#0@@30|))))) (and (QueryStates.QueryDescent.QueryDescent_q (Lit |q#0@@30|)) (or (QueryStates.QueryState.InProgress_q (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|)))) (QueryStates.QueryState.Finished_q (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|)))))))) (|ValueMessage.__default.CombineDeltas#canCall| (Lit (QueryStates.QueryState.delta (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|))))) (ValueMessage.Message.delta ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.buffer (Lit (QueryStates.QueryDescent.parent (Lit |q#0@@30|)))))) ($Box (Lit (QueryStates.QueryState.key (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|))))))))))))) (=> (|ValueMessage.Delta#Equal| (QueryStates.QueryState.delta (Lit (QueryStates.QueryDescent.query_k (Lit |q#0@@30|)))) (ValueMessage.__default.CombineDeltas (Lit (QueryStates.QueryState.delta (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|))))) (ValueMessage.Message.delta ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.buffer (Lit (QueryStates.QueryDescent.parent (Lit |q#0@@30|)))))) ($Box (Lit (QueryStates.QueryState.key (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|))))))))))) (and (and (and (and (QueryStates.QueryDescent.QueryDescent_q (Lit |q#0@@30|)) (BetreeGraph.Node.Node_q (Lit (QueryStates.QueryDescent.parent (Lit |q#0@@30|))))) (and (QueryStates.QueryDescent.QueryDescent_q (Lit |q#0@@30|)) (or (QueryStates.QueryState.InProgress_q (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|)))) (QueryStates.QueryState.Finished_q (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|))))))) (QueryStates.QueryDescent.QueryDescent_q (Lit |q#0@@30|))) (|Maps.__default.IMapsTo#canCall| Tclass.KeyType.Key Tclass.ReferenceType.Reference (Lit (BetreeGraph.Node.children (Lit (QueryStates.QueryDescent.parent (Lit |q#0@@30|))))) ($Box (Lit (QueryStates.QueryState.key (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|)))))) (Lit (QueryStates.QueryState.ref (Lit (QueryStates.QueryDescent.query_k (Lit |q#0@@30|))))))))))))))))))) (= (QueryStates.__default.ValidQueryDescent (Lit |q#0@@30|))  (and (and (and (BetreeSpec.__default.WFNode (Lit (QueryStates.QueryDescent.parent (Lit |q#0@@30|)))) (QueryStates.QueryState.InProgress_q (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|))))) (|Seq#Equal| (QueryStates.QueryState.key (Lit (QueryStates.QueryDescent.query_k (Lit |q#0@@30|)))) (QueryStates.QueryState.key (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|)))))) (ite (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.buffer (Lit (QueryStates.QueryDescent.parent (Lit |q#0@@30|)))))) ($Box (Lit (QueryStates.QueryState.key (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|)))))))))  (and true (|QueryStates.QueryState#Equal| (QueryStates.QueryDescent.query_k (Lit |q#0@@30|)) (|#QueryStates.QueryState.Finished| (Lit (QueryStates.QueryState.key (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|))))) (ValueMessage.__default.ApplyDelta (Lit (QueryStates.QueryState.delta (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|))))) (ValueMessage.Message.value ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.buffer (Lit (QueryStates.QueryDescent.parent (Lit |q#0@@30|)))))) ($Box (Lit (QueryStates.QueryState.key (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|)))))))))))))  (and (and (QueryStates.QueryState.InProgress_q (Lit (QueryStates.QueryDescent.query_k (Lit |q#0@@30|)))) (|ValueMessage.Delta#Equal| (QueryStates.QueryState.delta (Lit (QueryStates.QueryDescent.query_k (Lit |q#0@@30|)))) (ValueMessage.__default.CombineDeltas (Lit (QueryStates.QueryState.delta (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|))))) (ValueMessage.Message.delta ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (BetreeGraph.Node.buffer (Lit (QueryStates.QueryDescent.parent (Lit |q#0@@30|)))))) ($Box (Lit (QueryStates.QueryState.key (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|)))))))))))) (Maps.__default.IMapsTo Tclass.KeyType.Key Tclass.ReferenceType.Reference (Lit (BetreeGraph.Node.children (Lit (QueryStates.QueryDescent.parent (Lit |q#0@@30|))))) ($Box (Lit (QueryStates.QueryState.key (Lit (QueryStates.QueryDescent.query (Lit |q#0@@30|)))))) (Lit (QueryStates.QueryState.ref (Lit (QueryStates.QueryDescent.query_k (Lit |q#0@@30|)))))))))))) :qid |QueryStateidfy.24:31| :weight 3 :skolemid |4766| :pattern ( (QueryStates.__default.ValidQueryDescent (Lit |q#0@@30|))) ))))
(assert (forall ((arg0@@734 T@U) ) (! (= (type (QueryStates.__default.QueryDescentReads arg0@@734)) (SeqType BoxType)) :qid |funType:QueryStates.__default.QueryDescentReads| :pattern ( (QueryStates.__default.QueryDescentReads arg0@@734)) )))
(assert  (=> true (forall ((|q#0@@31| T@U) ) (!  (=> (and (= (type |q#0@@31|) DatatypeTypeType) (or (|QueryStates.__default.QueryDescentReads#canCall| |q#0@@31|) (and ($Is |q#0@@31| Tclass.QueryStates.QueryDescent) (QueryStates.__default.ValidQueryDescent |q#0@@31|)))) ($Is (QueryStates.__default.QueryDescentReads |q#0@@31|) (TSeq Tclass.BetreeGraph.ReadOp))) :qid |QueryStateidfy.39:30| :skolemid |4767| :pattern ( (QueryStates.__default.QueryDescentReads |q#0@@31|)) ))))
(assert (forall ((|q#0@@32| T@U) ) (!  (=> (and (= (type |q#0@@32|) DatatypeTypeType) ($Is |q#0@@32| Tclass.QueryStates.QueryDescent)) (= (|QueryStates.__default.QueryDescentReads#requires| |q#0@@32|) (QueryStates.__default.ValidQueryDescent |q#0@@32|))) :qid |QueryStateidfy.39:30| :skolemid |4768| :pattern ( (|QueryStates.__default.QueryDescentReads#requires| |q#0@@32|)) )))
(assert  (=> true (forall ((|q#0@@33| T@U) ) (!  (=> (and (= (type |q#0@@33|) DatatypeTypeType) (or (|QueryStates.__default.QueryDescentReads#canCall| |q#0@@33|) (and ($Is |q#0@@33| Tclass.QueryStates.QueryDescent) (QueryStates.__default.ValidQueryDescent |q#0@@33|)))) (and (and (QueryStates.QueryDescent.QueryDescent_q |q#0@@33|) (QueryStates.QueryDescent.QueryDescent_q |q#0@@33|)) (= (QueryStates.__default.QueryDescentReads |q#0@@33|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#BetreeGraph.ReadOp.ReadOp| (QueryStates.QueryState.ref (QueryStates.QueryDescent.query |q#0@@33|)) (QueryStates.QueryDescent.parent |q#0@@33|))))))) :qid |QueryStateidfy.39:30| :skolemid |4769| :pattern ( (QueryStates.__default.QueryDescentReads |q#0@@33|)) ))))
(assert  (=> true (forall ((|q#0@@34| T@U) ) (!  (=> (and (= (type |q#0@@34|) DatatypeTypeType) (or (|QueryStates.__default.QueryDescentReads#canCall| (Lit |q#0@@34|)) (and ($Is |q#0@@34| Tclass.QueryStates.QueryDescent) (U_2_bool (Lit (bool_2_U (QueryStates.__default.ValidQueryDescent (Lit |q#0@@34|)))))))) (and (and (QueryStates.QueryDescent.QueryDescent_q (Lit |q#0@@34|)) (QueryStates.QueryDescent.QueryDescent_q (Lit |q#0@@34|))) (= (QueryStates.__default.QueryDescentReads (Lit |q#0@@34|)) (Lit (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#BetreeGraph.ReadOp.ReadOp| (Lit (QueryStates.QueryState.ref (Lit (QueryStates.QueryDescent.query (Lit |q#0@@34|))))) (Lit (QueryStates.QueryDescent.parent (Lit |q#0@@34|))))))))))) :qid |QueryStateidfy.39:30| :weight 3 :skolemid |4770| :pattern ( (QueryStates.__default.QueryDescentReads (Lit |q#0@@34|))) ))))
(assert (forall ((arg0@@735 T@U) ) (! (= (type (QueryStates.__default.QueryDescentOps arg0@@735)) (SeqType BoxType)) :qid |funType:QueryStates.__default.QueryDescentOps| :pattern ( (QueryStates.__default.QueryDescentOps arg0@@735)) )))
(assert  (=> true (forall ((|q#0@@35| T@U) ) (!  (=> (and (= (type |q#0@@35|) DatatypeTypeType) (or (|QueryStates.__default.QueryDescentOps#canCall| |q#0@@35|) ($Is |q#0@@35| Tclass.QueryStates.QueryDescent))) ($Is (QueryStates.__default.QueryDescentOps |q#0@@35|) (TSeq Tclass.BetreeGraph.Op))) :qid |QueryStateidfy.45:28| :skolemid |4771| :pattern ( (QueryStates.__default.QueryDescentOps |q#0@@35|)) ))))
(assert (forall ((|q#0@@36| T@U) ) (!  (=> (and (= (type |q#0@@36|) DatatypeTypeType) ($Is |q#0@@36| Tclass.QueryStates.QueryDescent)) (= (|QueryStates.__default.QueryDescentOps#requires| |q#0@@36|) true)) :qid |QueryStateidfy.45:28| :skolemid |4772| :pattern ( (|QueryStates.__default.QueryDescentOps#requires| |q#0@@36|)) )))
(assert  (=> true (forall ((|q#0@@37| T@U) ) (!  (=> (and (= (type |q#0@@37|) DatatypeTypeType) (or (|QueryStates.__default.QueryDescentOps#canCall| |q#0@@37|) ($Is |q#0@@37| Tclass.QueryStates.QueryDescent))) (= (QueryStates.__default.QueryDescentOps |q#0@@37|) (Lit (|Seq#Empty| BoxType)))) :qid |QueryStateidfy.45:28| :skolemid |4773| :pattern ( (QueryStates.__default.QueryDescentOps |q#0@@37|)) ))))
(assert  (=> true (forall ((|q#0@@38| T@U) ) (!  (=> (and (= (type |q#0@@38|) DatatypeTypeType) (or (|QueryStates.__default.QueryDescentOps#canCall| (Lit |q#0@@38|)) ($Is |q#0@@38| Tclass.QueryStates.QueryDescent))) (= (QueryStates.__default.QueryDescentOps (Lit |q#0@@38|)) (Lit (|Seq#Empty| BoxType)))) :qid |QueryStateidfy.45:28| :weight 3 :skolemid |4774| :pattern ( (QueryStates.__default.QueryDescentOps (Lit |q#0@@38|))) ))))
(assert (= (type Tclass.BetreeInv.__default) TyType))
(assert (= (Tag Tclass.BetreeInv.__default) Tagclass.BetreeInv.__default))
(assert (= (TagFamily Tclass.BetreeInv.__default) tytagFamily$_default))
(assert (forall ((bx@@200 T@U) ) (!  (=> (and (= (type bx@@200) BoxType) ($IsBox bx@@200 Tclass.BetreeInv.__default)) (and (= ($Box ($Unbox refType bx@@200)) bx@@200) ($Is ($Unbox refType bx@@200) Tclass.BetreeInv.__default))) :qid |unknown.0:0| :skolemid |4775| :pattern ( ($IsBox bx@@200 Tclass.BetreeInv.__default)) )))
(assert (forall (($o@@68 T@U) ) (!  (=> (= (type $o@@68) refType) (= ($Is $o@@68 Tclass.BetreeInv.__default)  (or (= $o@@68 null) (= (dtype $o@@68) Tclass.BetreeInv.__default)))) :qid |unknown.0:0| :skolemid |4776| :pattern ( ($Is $o@@68 Tclass.BetreeInv.__default)) )))
(assert (forall (($o@@69 T@U) ($h@@255 T@U) ) (!  (=> (and (= (type $o@@69) refType) (= (type $h@@255) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@69 Tclass.BetreeInv.__default $h@@255)  (or (= $o@@69 null) (U_2_bool (MapType1Select (MapType0Select $h@@255 $o@@69) alloc))))) :qid |unknown.0:0| :skolemid |4777| :pattern ( ($IsAlloc $o@@69 Tclass.BetreeInv.__default $h@@255)) )))
(assert  (=> true (forall ((|view#0@@15| T@U) (|lookup#0@@31| T@U) ) (!  (=> (and (and (= (type |view#0@@15|) (IMapType BoxType BoxType)) (= (type |lookup#0@@31|) (SeqType BoxType))) (or (|BetreeInv.__default.LookupRespectsView#canCall| |view#0@@15| |lookup#0@@31|) (and ($Is |view#0@@15| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |lookup#0@@31| (TSeq Tclass.BetreeGraph.ReadOp))))) true) :qid |BetreeInvidfy.25:32| :skolemid |4778| :pattern ( (BetreeInv.__default.LookupRespectsView |view#0@@15| |lookup#0@@31|)) ))))
(assert (forall ((|view#0@@16| T@U) (|lookup#0@@32| T@U) ) (!  (=> (and (and (= (type |view#0@@16|) (IMapType BoxType BoxType)) (= (type |lookup#0@@32|) (SeqType BoxType))) (and ($Is |view#0@@16| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |lookup#0@@32| (TSeq Tclass.BetreeGraph.ReadOp)))) (= (|BetreeInv.__default.LookupRespectsView#requires| |view#0@@16| |lookup#0@@32|) true)) :qid |BetreeInvidfy.25:32| :skolemid |4779| :pattern ( (|BetreeInv.__default.LookupRespectsView#requires| |view#0@@16| |lookup#0@@32|)) )))
(assert  (=> true (forall ((|view#0@@17| T@U) (|lookup#0@@33| T@U) ) (!  (=> (and (and (= (type |view#0@@17|) (IMapType BoxType BoxType)) (= (type |lookup#0@@33|) (SeqType BoxType))) (or (|BetreeInv.__default.LookupRespectsView#canCall| |view#0@@17| |lookup#0@@33|) (and ($Is |view#0@@17| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |lookup#0@@33| (TSeq Tclass.BetreeGraph.ReadOp))))) (and (forall ((|i#0@@134| Int) ) (!  (=> (<= (LitInt 0) |i#0@@134|) (=> (< |i#0@@134| (|Seq#Length| |lookup#0@@33|)) (and (and (BetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@33| |i#0@@134|))) (BetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@33| |i#0@@134|)))) (|Maps.__default.IMapsTo#canCall| Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node |view#0@@17| (BetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@33| |i#0@@134|))) ($Box (BetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@33| |i#0@@134|)))))))) :qid |BetreeInvidfy.26:12| :skolemid |4781| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@33| |i#0@@134|))) )) (= (BetreeInv.__default.LookupRespectsView |view#0@@17| |lookup#0@@33|) (forall ((|i#0@@135| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@135|) (< |i#0@@135| (|Seq#Length| |lookup#0@@33|))) (Maps.__default.IMapsTo Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node |view#0@@17| (BetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@33| |i#0@@135|))) ($Box (BetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@33| |i#0@@135|))))))) :qid |BetreeInvidfy.26:12| :skolemid |4780| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@33| |i#0@@135|))) ))))) :qid |BetreeInvidfy.25:32| :skolemid |4782| :pattern ( (BetreeInv.__default.LookupRespectsView |view#0@@17| |lookup#0@@33|)) ))))
(assert  (=> true (forall ((|view#0@@18| T@U) (|lookup#0@@34| T@U) ) (!  (=> (and (and (= (type |view#0@@18|) (IMapType BoxType BoxType)) (= (type |lookup#0@@34|) (SeqType BoxType))) (or (|BetreeInv.__default.LookupRespectsView#canCall| |view#0@@18| (Lit |lookup#0@@34|)) (and ($Is |view#0@@18| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |lookup#0@@34| (TSeq Tclass.BetreeGraph.ReadOp))))) (and (forall ((|i#1@@57| Int) ) (!  (=> (<= (LitInt 0) |i#1@@57|) (=> (< |i#1@@57| (|Seq#Length| (Lit |lookup#0@@34|))) (and (and (BetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@34|) |i#1@@57|))) (BetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@34|) |i#1@@57|)))) (|Maps.__default.IMapsTo#canCall| Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node |view#0@@18| (BetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@34|) |i#1@@57|))) ($Box (BetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@34|) |i#1@@57|)))))))) :qid |BetreeInvidfy.26:12| :skolemid |4784| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@34| |i#1@@57|))) )) (= (BetreeInv.__default.LookupRespectsView |view#0@@18| (Lit |lookup#0@@34|)) (forall ((|i#1@@58| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@58|) (< |i#1@@58| (|Seq#Length| (Lit |lookup#0@@34|)))) (Maps.__default.IMapsTo Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node |view#0@@18| (BetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@34|) |i#1@@58|))) ($Box (BetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@34|) |i#1@@58|))))))) :qid |BetreeInvidfy.26:12| :skolemid |4783| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@34| |i#1@@58|))) ))))) :qid |BetreeInvidfy.25:32| :weight 3 :skolemid |4785| :pattern ( (BetreeInv.__default.LookupRespectsView |view#0@@18| (Lit |lookup#0@@34|))) ))))
(assert  (=> true (forall ((|view#0@@19| T@U) (|lookup#0@@35| T@U) ) (!  (=> (and (and (= (type |view#0@@19|) (IMapType BoxType BoxType)) (= (type |lookup#0@@35|) (SeqType BoxType))) (or (|BetreeInv.__default.LookupRespectsView#canCall| (Lit |view#0@@19|) (Lit |lookup#0@@35|)) (and ($Is |view#0@@19| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |lookup#0@@35| (TSeq Tclass.BetreeGraph.ReadOp))))) (and (forall ((|i#2@@29| Int) ) (!  (=> (<= (LitInt 0) |i#2@@29|) (=> (< |i#2@@29| (|Seq#Length| (Lit |lookup#0@@35|))) (and (and (BetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@35|) |i#2@@29|))) (BetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@35|) |i#2@@29|)))) (|Maps.__default.IMapsTo#canCall| Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node (Lit |view#0@@19|) (BetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@35|) |i#2@@29|))) ($Box (BetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@35|) |i#2@@29|)))))))) :qid |BetreeInvidfy.26:12| :skolemid |4787| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@35| |i#2@@29|))) )) (= (BetreeInv.__default.LookupRespectsView (Lit |view#0@@19|) (Lit |lookup#0@@35|)) (forall ((|i#2@@30| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@30|) (< |i#2@@30| (|Seq#Length| (Lit |lookup#0@@35|)))) (Maps.__default.IMapsTo Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node (Lit |view#0@@19|) (BetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@35|) |i#2@@30|))) ($Box (BetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@35|) |i#2@@30|))))))) :qid |BetreeInvidfy.26:12| :skolemid |4786| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@35| |i#2@@30|))) ))))) :qid |BetreeInvidfy.25:32| :weight 3 :skolemid |4788| :pattern ( (BetreeInv.__default.LookupRespectsView (Lit |view#0@@19|) (Lit |lookup#0@@35|))) ))))
(assert  (=> true (forall ((|view#0@@20| T@U) (|key#0@@181| T@U) (|lookup#0@@36| T@U) ) (!  (=> (and (and (and (= (type |view#0@@20|) (IMapType BoxType BoxType)) (= (type |key#0@@181|) (SeqType BoxType))) (= (type |lookup#0@@36|) (SeqType BoxType))) (or (|BetreeInv.__default.IsPathLookup#canCall| |view#0@@20| |key#0@@181| |lookup#0@@36|) (and (and ($Is |view#0@@20| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |key#0@@181| Tclass.KeyType.Key)) ($Is |lookup#0@@36| (TSeq Tclass.BetreeGraph.ReadOp))))) true) :qid |BetreeInvidfy.29:26| :skolemid |4789| :pattern ( (BetreeInv.__default.IsPathLookup |view#0@@20| |key#0@@181| |lookup#0@@36|)) ))))
(assert (forall ((|view#0@@21| T@U) (|key#0@@182| T@U) (|lookup#0@@37| T@U) ) (!  (=> (and (and (and (= (type |view#0@@21|) (IMapType BoxType BoxType)) (= (type |key#0@@182|) (SeqType BoxType))) (= (type |lookup#0@@37|) (SeqType BoxType))) (and (and ($Is |view#0@@21| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |key#0@@182| Tclass.KeyType.Key)) ($Is |lookup#0@@37| (TSeq Tclass.BetreeGraph.ReadOp)))) (= (|BetreeInv.__default.IsPathLookup#requires| |view#0@@21| |key#0@@182| |lookup#0@@37|) true)) :qid |BetreeInvidfy.29:26| :skolemid |4790| :pattern ( (|BetreeInv.__default.IsPathLookup#requires| |view#0@@21| |key#0@@182| |lookup#0@@37|)) )))
(assert  (=> true (forall ((|view#0@@22| T@U) (|key#0@@183| T@U) (|lookup#0@@38| T@U) ) (!  (=> (and (and (and (= (type |view#0@@22|) (IMapType BoxType BoxType)) (= (type |key#0@@183|) (SeqType BoxType))) (= (type |lookup#0@@38|) (SeqType BoxType))) (or (|BetreeInv.__default.IsPathLookup#canCall| |view#0@@22| |key#0@@183| |lookup#0@@38|) (and (and ($Is |view#0@@22| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |key#0@@183| Tclass.KeyType.Key)) ($Is |lookup#0@@38| (TSeq Tclass.BetreeGraph.ReadOp))))) (and (=> (> (|Seq#Length| |lookup#0@@38|) 0) (and (|BetreeInv.__default.LookupRespectsView#canCall| |view#0@@22| |lookup#0@@38|) (=> (BetreeInv.__default.LookupRespectsView |view#0@@22| |lookup#0@@38|) (|BetreeSpec.__default.LookupFollowsChildRefs#canCall| |key#0@@183| |lookup#0@@38|)))) (= (BetreeInv.__default.IsPathLookup |view#0@@22| |key#0@@183| |lookup#0@@38|)  (and (and (> (|Seq#Length| |lookup#0@@38|) 0) (BetreeInv.__default.LookupRespectsView |view#0@@22| |lookup#0@@38|)) (BetreeSpec.__default.LookupFollowsChildRefs |key#0@@183| |lookup#0@@38|))))) :qid |BetreeInvidfy.29:26| :skolemid |4791| :pattern ( (BetreeInv.__default.IsPathLookup |view#0@@22| |key#0@@183| |lookup#0@@38|)) ))))
(assert  (=> true (forall ((|view#0@@23| T@U) (|key#0@@184| T@U) (|lookup#0@@39| T@U) ) (!  (=> (and (and (and (= (type |view#0@@23|) (IMapType BoxType BoxType)) (= (type |key#0@@184|) (SeqType BoxType))) (= (type |lookup#0@@39|) (SeqType BoxType))) (or (|BetreeInv.__default.IsPathLookup#canCall| |view#0@@23| (Lit |key#0@@184|) (Lit |lookup#0@@39|)) (and (and ($Is |view#0@@23| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |key#0@@184| Tclass.KeyType.Key)) ($Is |lookup#0@@39| (TSeq Tclass.BetreeGraph.ReadOp))))) (and (=> (> (|Seq#Length| (Lit |lookup#0@@39|)) 0) (and (|BetreeInv.__default.LookupRespectsView#canCall| |view#0@@23| (Lit |lookup#0@@39|)) (=> (BetreeInv.__default.LookupRespectsView |view#0@@23| (Lit |lookup#0@@39|)) (|BetreeSpec.__default.LookupFollowsChildRefs#canCall| (Lit |key#0@@184|) (Lit |lookup#0@@39|))))) (= (BetreeInv.__default.IsPathLookup |view#0@@23| (Lit |key#0@@184|) (Lit |lookup#0@@39|))  (and (and (> (|Seq#Length| (Lit |lookup#0@@39|)) 0) (BetreeInv.__default.LookupRespectsView |view#0@@23| (Lit |lookup#0@@39|))) (BetreeSpec.__default.LookupFollowsChildRefs (Lit |key#0@@184|) (Lit |lookup#0@@39|)))))) :qid |BetreeInvidfy.29:26| :weight 3 :skolemid |4792| :pattern ( (BetreeInv.__default.IsPathLookup |view#0@@23| (Lit |key#0@@184|) (Lit |lookup#0@@39|))) ))))
(assert  (=> true (forall ((|view#0@@24| T@U) (|key#0@@185| T@U) (|lookup#0@@40| T@U) ) (!  (=> (and (and (and (= (type |view#0@@24|) (IMapType BoxType BoxType)) (= (type |key#0@@185|) (SeqType BoxType))) (= (type |lookup#0@@40|) (SeqType BoxType))) (or (|BetreeInv.__default.IsPathLookup#canCall| (Lit |view#0@@24|) (Lit |key#0@@185|) (Lit |lookup#0@@40|)) (and (and ($Is |view#0@@24| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |key#0@@185| Tclass.KeyType.Key)) ($Is |lookup#0@@40| (TSeq Tclass.BetreeGraph.ReadOp))))) (and (=> (> (|Seq#Length| (Lit |lookup#0@@40|)) 0) (and (|BetreeInv.__default.LookupRespectsView#canCall| (Lit |view#0@@24|) (Lit |lookup#0@@40|)) (=> (U_2_bool (Lit (bool_2_U (BetreeInv.__default.LookupRespectsView (Lit |view#0@@24|) (Lit |lookup#0@@40|))))) (|BetreeSpec.__default.LookupFollowsChildRefs#canCall| (Lit |key#0@@185|) (Lit |lookup#0@@40|))))) (= (BetreeInv.__default.IsPathLookup (Lit |view#0@@24|) (Lit |key#0@@185|) (Lit |lookup#0@@40|))  (and (and (> (|Seq#Length| (Lit |lookup#0@@40|)) 0) (BetreeInv.__default.LookupRespectsView (Lit |view#0@@24|) (Lit |lookup#0@@40|))) (BetreeSpec.__default.LookupFollowsChildRefs (Lit |key#0@@185|) (Lit |lookup#0@@40|)))))) :qid |BetreeInvidfy.29:26| :weight 3 :skolemid |4793| :pattern ( (BetreeInv.__default.IsPathLookup (Lit |view#0@@24|) (Lit |key#0@@185|) (Lit |lookup#0@@40|))) ))))
(assert (forall (($ly@@573 T@U) (|view#0@@25| T@U) (|key#0@@186| T@U) (|value#0@@12| T@U) (|lookup#0@@41| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@573) LayerTypeType) (= (type |view#0@@25|) (IMapType BoxType BoxType))) (= (type |key#0@@186|) (SeqType BoxType))) (= (type |value#0@@12|) (SeqType BoxType))) (= (type |lookup#0@@41|) (SeqType BoxType))) (= (BetreeInv.__default.IsSatisfyingLookup ($LS $ly@@573) |view#0@@25| |key#0@@186| |value#0@@12| |lookup#0@@41|) (BetreeInv.__default.IsSatisfyingLookup $ly@@573 |view#0@@25| |key#0@@186| |value#0@@12| |lookup#0@@41|))) :qid |BetreeInvidfy.35:13| :skolemid |4794| :pattern ( (BetreeInv.__default.IsSatisfyingLookup ($LS $ly@@573) |view#0@@25| |key#0@@186| |value#0@@12| |lookup#0@@41|)) )))
(assert (forall (($ly@@574 T@U) (|view#0@@26| T@U) (|key#0@@187| T@U) (|value#0@@13| T@U) (|lookup#0@@42| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@574) LayerTypeType) (= (type |view#0@@26|) (IMapType BoxType BoxType))) (= (type |key#0@@187|) (SeqType BoxType))) (= (type |value#0@@13|) (SeqType BoxType))) (= (type |lookup#0@@42|) (SeqType BoxType))) (= (BetreeInv.__default.IsSatisfyingLookup $ly@@574 |view#0@@26| |key#0@@187| |value#0@@13| |lookup#0@@42|) (BetreeInv.__default.IsSatisfyingLookup $LZ |view#0@@26| |key#0@@187| |value#0@@13| |lookup#0@@42|))) :qid |BetreeInvidfy.35:13| :skolemid |4795| :pattern ( (BetreeInv.__default.IsSatisfyingLookup (AsFuelBottom $ly@@574) |view#0@@26| |key#0@@187| |value#0@@13| |lookup#0@@42|)) )))
(assert  (=> true (forall (($ly@@575 T@U) (|view#0@@27| T@U) (|key#0@@188| T@U) (|value#0@@14| T@U) (|lookup#0@@43| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@575) LayerTypeType) (= (type |view#0@@27|) (IMapType BoxType BoxType))) (= (type |key#0@@188|) (SeqType BoxType))) (= (type |value#0@@14|) (SeqType BoxType))) (= (type |lookup#0@@43|) (SeqType BoxType))) (or (|BetreeInv.__default.IsSatisfyingLookup#canCall| |view#0@@27| |key#0@@188| |value#0@@14| |lookup#0@@43|) (and (and (and ($Is |view#0@@27| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |key#0@@188| Tclass.KeyType.Key)) ($Is |value#0@@14| Tclass.ValueType.Value)) ($Is |lookup#0@@43| (TSeq Tclass.BetreeGraph.ReadOp))))) true) :qid |BetreeInvidfy.35:13| :skolemid |4796| :pattern ( (BetreeInv.__default.IsSatisfyingLookup $ly@@575 |view#0@@27| |key#0@@188| |value#0@@14| |lookup#0@@43|)) ))))
(assert (forall (($ly@@576 T@U) (|view#0@@28| T@U) (|key#0@@189| T@U) (|value#0@@15| T@U) (|lookup#0@@44| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@576) LayerTypeType) (= (type |view#0@@28|) (IMapType BoxType BoxType))) (= (type |key#0@@189|) (SeqType BoxType))) (= (type |value#0@@15|) (SeqType BoxType))) (= (type |lookup#0@@44|) (SeqType BoxType))) (and (and (and ($Is |view#0@@28| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |key#0@@189| Tclass.KeyType.Key)) ($Is |value#0@@15| Tclass.ValueType.Value)) ($Is |lookup#0@@44| (TSeq Tclass.BetreeGraph.ReadOp)))) (= (|BetreeInv.__default.IsSatisfyingLookup#requires| $ly@@576 |view#0@@28| |key#0@@189| |value#0@@15| |lookup#0@@44|) true)) :qid |BetreeInvidfy.35:13| :skolemid |4797| :pattern ( (|BetreeInv.__default.IsSatisfyingLookup#requires| $ly@@576 |view#0@@28| |key#0@@189| |value#0@@15| |lookup#0@@44|)) )))
(assert  (=> true (forall (($ly@@577 T@U) (|view#0@@29| T@U) (|key#0@@190| T@U) (|value#0@@16| T@U) (|lookup#0@@45| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@577) LayerTypeType) (= (type |view#0@@29|) (IMapType BoxType BoxType))) (= (type |key#0@@190|) (SeqType BoxType))) (= (type |value#0@@16|) (SeqType BoxType))) (= (type |lookup#0@@45|) (SeqType BoxType))) (or (|BetreeInv.__default.IsSatisfyingLookup#canCall| |view#0@@29| |key#0@@190| |value#0@@16| |lookup#0@@45|) (and (and (and ($Is |view#0@@29| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |key#0@@190| Tclass.KeyType.Key)) ($Is |value#0@@16| Tclass.ValueType.Value)) ($Is |lookup#0@@45| (TSeq Tclass.BetreeGraph.ReadOp))))) (and (and (|BetreeInv.__default.IsPathLookup#canCall| |view#0@@29| |key#0@@190| |lookup#0@@45|) (=> (BetreeInv.__default.IsPathLookup |view#0@@29| |key#0@@190| |lookup#0@@45|) (and (|BetreeSpec.__default.LookupVisitsWFNodes#canCall| |lookup#0@@45|) (=> (BetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@45|) (and (|BetreeSpec.__default.InterpretLookup#canCall| |lookup#0@@45| |key#0@@190|) (|BetreeSpec.__default.BufferDefinesValue#canCall| (BetreeSpec.__default.InterpretLookup ($LS $LZ) |lookup#0@@45| |key#0@@190|) |value#0@@16|)))))) (= (BetreeInv.__default.IsSatisfyingLookup ($LS $ly@@577) |view#0@@29| |key#0@@190| |value#0@@16| |lookup#0@@45|)  (and (and (BetreeInv.__default.IsPathLookup |view#0@@29| |key#0@@190| |lookup#0@@45|) (BetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@45|)) (BetreeSpec.__default.BufferDefinesValue (BetreeSpec.__default.InterpretLookup ($LS $LZ) |lookup#0@@45| |key#0@@190|) |value#0@@16|))))) :qid |BetreeInvidfy.35:13| :skolemid |4798| :pattern ( (BetreeInv.__default.IsSatisfyingLookup ($LS $ly@@577) |view#0@@29| |key#0@@190| |value#0@@16| |lookup#0@@45|)) ))))
(assert  (=> true (forall (($ly@@578 T@U) (|view#0@@30| T@U) (|key#0@@191| T@U) (|value#0@@17| T@U) (|lookup#0@@46| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@578) LayerTypeType) (= (type |view#0@@30|) (IMapType BoxType BoxType))) (= (type |key#0@@191|) (SeqType BoxType))) (= (type |value#0@@17|) (SeqType BoxType))) (= (type |lookup#0@@46|) (SeqType BoxType))) (or (|BetreeInv.__default.IsSatisfyingLookup#canCall| |view#0@@30| (Lit |key#0@@191|) (Lit |value#0@@17|) (Lit |lookup#0@@46|)) (and (and (and ($Is |view#0@@30| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |key#0@@191| Tclass.KeyType.Key)) ($Is |value#0@@17| Tclass.ValueType.Value)) ($Is |lookup#0@@46| (TSeq Tclass.BetreeGraph.ReadOp))))) (and (and (|BetreeInv.__default.IsPathLookup#canCall| |view#0@@30| (Lit |key#0@@191|) (Lit |lookup#0@@46|)) (=> (BetreeInv.__default.IsPathLookup |view#0@@30| (Lit |key#0@@191|) (Lit |lookup#0@@46|)) (and (|BetreeSpec.__default.LookupVisitsWFNodes#canCall| (Lit |lookup#0@@46|)) (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.__default.LookupVisitsWFNodes (Lit |lookup#0@@46|))))) (and (|BetreeSpec.__default.InterpretLookup#canCall| (Lit |lookup#0@@46|) (Lit |key#0@@191|)) (|BetreeSpec.__default.BufferDefinesValue#canCall| (Lit (BetreeSpec.__default.InterpretLookup ($LS $LZ) (Lit |lookup#0@@46|) (Lit |key#0@@191|))) (Lit |value#0@@17|))))))) (= (BetreeInv.__default.IsSatisfyingLookup ($LS $ly@@578) |view#0@@30| (Lit |key#0@@191|) (Lit |value#0@@17|) (Lit |lookup#0@@46|))  (and (and (BetreeInv.__default.IsPathLookup |view#0@@30| (Lit |key#0@@191|) (Lit |lookup#0@@46|)) (BetreeSpec.__default.LookupVisitsWFNodes (Lit |lookup#0@@46|))) (BetreeSpec.__default.BufferDefinesValue (Lit (BetreeSpec.__default.InterpretLookup ($LS $LZ) (Lit |lookup#0@@46|) (Lit |key#0@@191|))) (Lit |value#0@@17|)))))) :qid |BetreeInvidfy.35:13| :weight 3 :skolemid |4799| :pattern ( (BetreeInv.__default.IsSatisfyingLookup ($LS $ly@@578) |view#0@@30| (Lit |key#0@@191|) (Lit |value#0@@17|) (Lit |lookup#0@@46|))) ))))
(assert  (=> true (forall (($ly@@579 T@U) (|view#0@@31| T@U) (|key#0@@192| T@U) (|value#0@@18| T@U) (|lookup#0@@47| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@579) LayerTypeType) (= (type |view#0@@31|) (IMapType BoxType BoxType))) (= (type |key#0@@192|) (SeqType BoxType))) (= (type |value#0@@18|) (SeqType BoxType))) (= (type |lookup#0@@47|) (SeqType BoxType))) (or (|BetreeInv.__default.IsSatisfyingLookup#canCall| (Lit |view#0@@31|) (Lit |key#0@@192|) (Lit |value#0@@18|) (Lit |lookup#0@@47|)) (and (and (and ($Is |view#0@@31| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |key#0@@192| Tclass.KeyType.Key)) ($Is |value#0@@18| Tclass.ValueType.Value)) ($Is |lookup#0@@47| (TSeq Tclass.BetreeGraph.ReadOp))))) (and (and (|BetreeInv.__default.IsPathLookup#canCall| (Lit |view#0@@31|) (Lit |key#0@@192|) (Lit |lookup#0@@47|)) (=> (U_2_bool (Lit (bool_2_U (BetreeInv.__default.IsPathLookup (Lit |view#0@@31|) (Lit |key#0@@192|) (Lit |lookup#0@@47|))))) (and (|BetreeSpec.__default.LookupVisitsWFNodes#canCall| (Lit |lookup#0@@47|)) (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.__default.LookupVisitsWFNodes (Lit |lookup#0@@47|))))) (and (|BetreeSpec.__default.InterpretLookup#canCall| (Lit |lookup#0@@47|) (Lit |key#0@@192|)) (|BetreeSpec.__default.BufferDefinesValue#canCall| (Lit (BetreeSpec.__default.InterpretLookup ($LS $LZ) (Lit |lookup#0@@47|) (Lit |key#0@@192|))) (Lit |value#0@@18|))))))) (= (BetreeInv.__default.IsSatisfyingLookup ($LS $ly@@579) (Lit |view#0@@31|) (Lit |key#0@@192|) (Lit |value#0@@18|) (Lit |lookup#0@@47|)) (U_2_bool (Lit (bool_2_U  (and (and (BetreeInv.__default.IsPathLookup (Lit |view#0@@31|) (Lit |key#0@@192|) (Lit |lookup#0@@47|)) (BetreeSpec.__default.LookupVisitsWFNodes (Lit |lookup#0@@47|))) (BetreeSpec.__default.BufferDefinesValue (Lit (BetreeSpec.__default.InterpretLookup ($LS $LZ) (Lit |lookup#0@@47|) (Lit |key#0@@192|))) (Lit |value#0@@18|))))))))) :qid |BetreeInvidfy.35:13| :weight 3 :skolemid |4800| :pattern ( (BetreeInv.__default.IsSatisfyingLookup ($LS $ly@@579) (Lit |view#0@@31|) (Lit |key#0@@192|) (Lit |value#0@@18|) (Lit |lookup#0@@47|))) ))))
(assert  (=> true (forall ((|view#0@@32| T@U) (|key#0@@193| T@U) (|value#0@@19| T@U) (|lookup#0@@48| T@U) (|start#0@@26| T@U) ) (!  (=> (and (and (and (and (and (= (type |view#0@@32|) (IMapType BoxType BoxType)) (= (type |key#0@@193|) (SeqType BoxType))) (= (type |value#0@@19|) (SeqType BoxType))) (= (type |lookup#0@@48|) (SeqType BoxType))) (= (type |start#0@@26|) BoxType)) (or (|BetreeInv.__default.IsSatisfyingLookupFrom#canCall| |view#0@@32| |key#0@@193| |value#0@@19| |lookup#0@@48| |start#0@@26|) (and (and (and (and ($Is |view#0@@32| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |key#0@@193| Tclass.KeyType.Key)) ($Is |value#0@@19| Tclass.ValueType.Value)) ($Is |lookup#0@@48| (TSeq Tclass.BetreeGraph.ReadOp))) ($IsBox |start#0@@26| Tclass.ReferenceType.Reference)))) true) :qid |BetreeInvidfy.41:36| :skolemid |4801| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom |view#0@@32| |key#0@@193| |value#0@@19| |lookup#0@@48| |start#0@@26|)) ))))
(assert (forall ((|view#0@@33| T@U) (|key#0@@194| T@U) (|value#0@@20| T@U) (|lookup#0@@49| T@U) (|start#0@@27| T@U) ) (!  (=> (and (and (and (and (and (= (type |view#0@@33|) (IMapType BoxType BoxType)) (= (type |key#0@@194|) (SeqType BoxType))) (= (type |value#0@@20|) (SeqType BoxType))) (= (type |lookup#0@@49|) (SeqType BoxType))) (= (type |start#0@@27|) BoxType)) (and (and (and (and ($Is |view#0@@33| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |key#0@@194| Tclass.KeyType.Key)) ($Is |value#0@@20| Tclass.ValueType.Value)) ($Is |lookup#0@@49| (TSeq Tclass.BetreeGraph.ReadOp))) ($IsBox |start#0@@27| Tclass.ReferenceType.Reference))) (= (|BetreeInv.__default.IsSatisfyingLookupFrom#requires| |view#0@@33| |key#0@@194| |value#0@@20| |lookup#0@@49| |start#0@@27|) true)) :qid |BetreeInvidfy.41:36| :skolemid |4802| :pattern ( (|BetreeInv.__default.IsSatisfyingLookupFrom#requires| |view#0@@33| |key#0@@194| |value#0@@20| |lookup#0@@49| |start#0@@27|)) )))
(assert (= (type StartFuel_BetreeInv._default.IsSatisfyingLookup) LayerTypeType))
(assert  (=> true (forall ((|view#0@@34| T@U) (|key#0@@195| T@U) (|value#0@@21| T@U) (|lookup#0@@50| T@U) (|start#0@@28| T@U) ) (!  (=> (and (and (and (and (and (= (type |view#0@@34|) (IMapType BoxType BoxType)) (= (type |key#0@@195|) (SeqType BoxType))) (= (type |value#0@@21|) (SeqType BoxType))) (= (type |lookup#0@@50|) (SeqType BoxType))) (= (type |start#0@@28|) BoxType)) (or (|BetreeInv.__default.IsSatisfyingLookupFrom#canCall| |view#0@@34| |key#0@@195| |value#0@@21| |lookup#0@@50| |start#0@@28|) (and (and (and (and ($Is |view#0@@34| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |key#0@@195| Tclass.KeyType.Key)) ($Is |value#0@@21| Tclass.ValueType.Value)) ($Is |lookup#0@@50| (TSeq Tclass.BetreeGraph.ReadOp))) ($IsBox |start#0@@28| Tclass.ReferenceType.Reference)))) (and (and (|BetreeInv.__default.IsSatisfyingLookup#canCall| |view#0@@34| |key#0@@195| |value#0@@21| |lookup#0@@50|) (=> (BetreeInv.__default.IsSatisfyingLookup StartFuel_BetreeInv._default.IsSatisfyingLookup |view#0@@34| |key#0@@195| |value#0@@21| |lookup#0@@50|) (BetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@50| (LitInt 0)))))) (= (BetreeInv.__default.IsSatisfyingLookupFrom |view#0@@34| |key#0@@195| |value#0@@21| |lookup#0@@50| |start#0@@28|)  (and (BetreeInv.__default.IsSatisfyingLookup StartFuel_BetreeInv._default.IsSatisfyingLookup |view#0@@34| |key#0@@195| |value#0@@21| |lookup#0@@50|) (= (BetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@50| (LitInt 0)))) |start#0@@28|))))) :qid |BetreeInvidfy.41:36| :skolemid |4803| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom |view#0@@34| |key#0@@195| |value#0@@21| |lookup#0@@50| |start#0@@28|)) ))))
(assert  (=> true (forall ((|view#0@@35| T@U) (|key#0@@196| T@U) (|value#0@@22| T@U) (|lookup#0@@51| T@U) (|start#0@@29| T@U) ) (!  (=> (and (and (and (and (and (= (type |view#0@@35|) (IMapType BoxType BoxType)) (= (type |key#0@@196|) (SeqType BoxType))) (= (type |value#0@@22|) (SeqType BoxType))) (= (type |lookup#0@@51|) (SeqType BoxType))) (= (type |start#0@@29|) BoxType)) (or (|BetreeInv.__default.IsSatisfyingLookupFrom#canCall| |view#0@@35| (Lit |key#0@@196|) (Lit |value#0@@22|) (Lit |lookup#0@@51|) |start#0@@29|) (and (and (and (and ($Is |view#0@@35| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |key#0@@196| Tclass.KeyType.Key)) ($Is |value#0@@22| Tclass.ValueType.Value)) ($Is |lookup#0@@51| (TSeq Tclass.BetreeGraph.ReadOp))) ($IsBox |start#0@@29| Tclass.ReferenceType.Reference)))) (and (and (|BetreeInv.__default.IsSatisfyingLookup#canCall| |view#0@@35| (Lit |key#0@@196|) (Lit |value#0@@22|) (Lit |lookup#0@@51|)) (=> (BetreeInv.__default.IsSatisfyingLookup StartFuel_BetreeInv._default.IsSatisfyingLookup |view#0@@35| (Lit |key#0@@196|) (Lit |value#0@@22|) (Lit |lookup#0@@51|)) (BetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@51|) (LitInt 0)))))) (= (BetreeInv.__default.IsSatisfyingLookupFrom |view#0@@35| (Lit |key#0@@196|) (Lit |value#0@@22|) (Lit |lookup#0@@51|) |start#0@@29|)  (and (BetreeInv.__default.IsSatisfyingLookup StartFuel_BetreeInv._default.IsSatisfyingLookup |view#0@@35| (Lit |key#0@@196|) (Lit |value#0@@22|) (Lit |lookup#0@@51|)) (= (BetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@51|) (LitInt 0)))) |start#0@@29|))))) :qid |BetreeInvidfy.41:36| :weight 3 :skolemid |4804| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom |view#0@@35| (Lit |key#0@@196|) (Lit |value#0@@22|) (Lit |lookup#0@@51|) |start#0@@29|)) ))))
(assert  (=> true (forall ((|view#0@@36| T@U) (|key#0@@197| T@U) (|value#0@@23| T@U) (|lookup#0@@52| T@U) (|start#0@@30| T@U) ) (!  (=> (and (and (and (and (and (= (type |view#0@@36|) (IMapType BoxType BoxType)) (= (type |key#0@@197|) (SeqType BoxType))) (= (type |value#0@@23|) (SeqType BoxType))) (= (type |lookup#0@@52|) (SeqType BoxType))) (= (type |start#0@@30|) BoxType)) (or (|BetreeInv.__default.IsSatisfyingLookupFrom#canCall| (Lit |view#0@@36|) (Lit |key#0@@197|) (Lit |value#0@@23|) (Lit |lookup#0@@52|) (Lit |start#0@@30|)) (and (and (and (and ($Is |view#0@@36| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |key#0@@197| Tclass.KeyType.Key)) ($Is |value#0@@23| Tclass.ValueType.Value)) ($Is |lookup#0@@52| (TSeq Tclass.BetreeGraph.ReadOp))) ($IsBox |start#0@@30| Tclass.ReferenceType.Reference)))) (and (and (|BetreeInv.__default.IsSatisfyingLookup#canCall| (Lit |view#0@@36|) (Lit |key#0@@197|) (Lit |value#0@@23|) (Lit |lookup#0@@52|)) (=> (U_2_bool (Lit (bool_2_U (BetreeInv.__default.IsSatisfyingLookup StartFuel_BetreeInv._default.IsSatisfyingLookup (Lit |view#0@@36|) (Lit |key#0@@197|) (Lit |value#0@@23|) (Lit |lookup#0@@52|))))) (BetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@52|) (LitInt 0)))))) (= (BetreeInv.__default.IsSatisfyingLookupFrom (Lit |view#0@@36|) (Lit |key#0@@197|) (Lit |value#0@@23|) (Lit |lookup#0@@52|) (Lit |start#0@@30|))  (and (BetreeInv.__default.IsSatisfyingLookup StartFuel_BetreeInv._default.IsSatisfyingLookup (Lit |view#0@@36|) (Lit |key#0@@197|) (Lit |value#0@@23|) (Lit |lookup#0@@52|)) (= (BetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@52|) (LitInt 0)))) (Lit |start#0@@30|)))))) :qid |BetreeInvidfy.41:36| :weight 3 :skolemid |4805| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom (Lit |view#0@@36|) (Lit |key#0@@197|) (Lit |value#0@@23|) (Lit |lookup#0@@52|) (Lit |start#0@@30|))) ))))
(assert  (=> true (forall ((|view#0@@37| T@U) (|key#0@@198| T@U) (|start#0@@31| T@U) ) (!  (=> (and (and (and (= (type |view#0@@37|) (IMapType BoxType BoxType)) (= (type |key#0@@198|) (SeqType BoxType))) (= (type |start#0@@31|) BoxType)) (or (|BetreeInv.__default.KeyHasSatisfyingLookup#canCall| |view#0@@37| |key#0@@198| |start#0@@31|) (and (and ($Is |view#0@@37| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |key#0@@198| Tclass.KeyType.Key)) ($IsBox |start#0@@31| Tclass.ReferenceType.Reference)))) true) :qid |BetreeInvidfy.46:36| :skolemid |4806| :pattern ( (BetreeInv.__default.KeyHasSatisfyingLookup |view#0@@37| |key#0@@198| |start#0@@31|)) ))))
(assert (forall ((|view#0@@38| T@U) (|key#0@@199| T@U) (|start#0@@32| T@U) ) (!  (=> (and (and (and (= (type |view#0@@38|) (IMapType BoxType BoxType)) (= (type |key#0@@199|) (SeqType BoxType))) (= (type |start#0@@32|) BoxType)) (and (and ($Is |view#0@@38| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |key#0@@199| Tclass.KeyType.Key)) ($IsBox |start#0@@32| Tclass.ReferenceType.Reference))) (= (|BetreeInv.__default.KeyHasSatisfyingLookup#requires| |view#0@@38| |key#0@@199| |start#0@@32|) true)) :qid |BetreeInvidfy.46:36| :skolemid |4807| :pattern ( (|BetreeInv.__default.KeyHasSatisfyingLookup#requires| |view#0@@38| |key#0@@199| |start#0@@32|)) )))
(assert  (=> true (forall ((|view#0@@39| T@U) (|key#0@@200| T@U) (|start#0@@33| T@U) ) (!  (=> (and (and (and (= (type |view#0@@39|) (IMapType BoxType BoxType)) (= (type |key#0@@200|) (SeqType BoxType))) (= (type |start#0@@33|) BoxType)) (or (|BetreeInv.__default.KeyHasSatisfyingLookup#canCall| |view#0@@39| |key#0@@200| |start#0@@33|) (and (and ($Is |view#0@@39| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |key#0@@200| Tclass.KeyType.Key)) ($IsBox |start#0@@33| Tclass.ReferenceType.Reference)))) (and (forall ((|lookup#0@@53| T@U) (|value#0@@24| T@U) ) (!  (=> (and (and (and (= (type |lookup#0@@53|) (SeqType BoxType)) (= (type |value#0@@24|) (SeqType BoxType))) (and ($Is |lookup#0@@53| (TSeq Tclass.BetreeGraph.ReadOp)) ($Is |value#0@@24| Tclass.ValueType.Value))) (U_2_bool (Lit (bool_2_U true)))) (|BetreeInv.__default.IsSatisfyingLookupFrom#canCall| |view#0@@39| |key#0@@200| |value#0@@24| |lookup#0@@53| |start#0@@33|)) :qid |BetreeInvidfy.48:12| :skolemid |4809| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom |view#0@@39| |key#0@@200| |value#0@@24| |lookup#0@@53| |start#0@@33|)) )) (= (BetreeInv.__default.KeyHasSatisfyingLookup |view#0@@39| |key#0@@200| |start#0@@33|) (exists ((|lookup#0@@54| T@U) (|value#0@@25| T@U) ) (!  (and (and (= (type |lookup#0@@54|) (SeqType BoxType)) (= (type |value#0@@25|) (SeqType BoxType))) (and (and ($Is |lookup#0@@54| (TSeq Tclass.BetreeGraph.ReadOp)) ($Is |value#0@@25| Tclass.ValueType.Value)) (and true (BetreeInv.__default.IsSatisfyingLookupFrom |view#0@@39| |key#0@@200| |value#0@@25| |lookup#0@@54| |start#0@@33|)))) :qid |BetreeInvidfy.48:12| :skolemid |4808| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom |view#0@@39| |key#0@@200| |value#0@@25| |lookup#0@@54| |start#0@@33|)) ))))) :qid |BetreeInvidfy.46:36| :skolemid |4810| :pattern ( (BetreeInv.__default.KeyHasSatisfyingLookup |view#0@@39| |key#0@@200| |start#0@@33|)) ))))
(assert  (=> true (forall ((|view#0@@40| T@U) (|key#0@@201| T@U) (|start#0@@34| T@U) ) (!  (=> (and (and (and (= (type |view#0@@40|) (IMapType BoxType BoxType)) (= (type |key#0@@201|) (SeqType BoxType))) (= (type |start#0@@34|) BoxType)) (or (|BetreeInv.__default.KeyHasSatisfyingLookup#canCall| |view#0@@40| (Lit |key#0@@201|) |start#0@@34|) (and (and ($Is |view#0@@40| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |key#0@@201| Tclass.KeyType.Key)) ($IsBox |start#0@@34| Tclass.ReferenceType.Reference)))) (and (forall ((|lookup#1@@1| T@U) (|value#1@@0| T@U) ) (!  (=> (and (and (and (= (type |lookup#1@@1|) (SeqType BoxType)) (= (type |value#1@@0|) (SeqType BoxType))) (and ($Is |lookup#1@@1| (TSeq Tclass.BetreeGraph.ReadOp)) ($Is |value#1@@0| Tclass.ValueType.Value))) (U_2_bool (Lit (bool_2_U true)))) (|BetreeInv.__default.IsSatisfyingLookupFrom#canCall| |view#0@@40| (Lit |key#0@@201|) |value#1@@0| |lookup#1@@1| |start#0@@34|)) :qid |BetreeInvidfy.48:12| :skolemid |4812| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom |view#0@@40| |key#0@@201| |value#1@@0| |lookup#1@@1| |start#0@@34|)) )) (= (BetreeInv.__default.KeyHasSatisfyingLookup |view#0@@40| (Lit |key#0@@201|) |start#0@@34|) (exists ((|lookup#1@@2| T@U) (|value#1@@1| T@U) ) (!  (and (and (= (type |lookup#1@@2|) (SeqType BoxType)) (= (type |value#1@@1|) (SeqType BoxType))) (and (and ($Is |lookup#1@@2| (TSeq Tclass.BetreeGraph.ReadOp)) ($Is |value#1@@1| Tclass.ValueType.Value)) (and true (BetreeInv.__default.IsSatisfyingLookupFrom |view#0@@40| (Lit |key#0@@201|) |value#1@@1| |lookup#1@@2| |start#0@@34|)))) :qid |BetreeInvidfy.48:12| :skolemid |4811| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom |view#0@@40| |key#0@@201| |value#1@@1| |lookup#1@@2| |start#0@@34|)) ))))) :qid |BetreeInvidfy.46:36| :weight 3 :skolemid |4813| :pattern ( (BetreeInv.__default.KeyHasSatisfyingLookup |view#0@@40| (Lit |key#0@@201|) |start#0@@34|)) ))))
(assert  (=> true (forall ((|view#0@@41| T@U) (|key#0@@202| T@U) (|start#0@@35| T@U) ) (!  (=> (and (and (and (= (type |view#0@@41|) (IMapType BoxType BoxType)) (= (type |key#0@@202|) (SeqType BoxType))) (= (type |start#0@@35|) BoxType)) (or (|BetreeInv.__default.KeyHasSatisfyingLookup#canCall| (Lit |view#0@@41|) (Lit |key#0@@202|) (Lit |start#0@@35|)) (and (and ($Is |view#0@@41| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |key#0@@202| Tclass.KeyType.Key)) ($IsBox |start#0@@35| Tclass.ReferenceType.Reference)))) (and (forall ((|lookup#2@@1| T@U) (|value#2@@0| T@U) ) (!  (=> (and (and (and (= (type |lookup#2@@1|) (SeqType BoxType)) (= (type |value#2@@0|) (SeqType BoxType))) (and ($Is |lookup#2@@1| (TSeq Tclass.BetreeGraph.ReadOp)) ($Is |value#2@@0| Tclass.ValueType.Value))) (U_2_bool (Lit (bool_2_U true)))) (|BetreeInv.__default.IsSatisfyingLookupFrom#canCall| (Lit |view#0@@41|) (Lit |key#0@@202|) |value#2@@0| |lookup#2@@1| (Lit |start#0@@35|))) :qid |BetreeInvidfy.48:12| :skolemid |4815| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom |view#0@@41| |key#0@@202| |value#2@@0| |lookup#2@@1| |start#0@@35|)) )) (= (BetreeInv.__default.KeyHasSatisfyingLookup (Lit |view#0@@41|) (Lit |key#0@@202|) (Lit |start#0@@35|)) (exists ((|lookup#2@@2| T@U) (|value#2@@1| T@U) ) (!  (and (and (= (type |lookup#2@@2|) (SeqType BoxType)) (= (type |value#2@@1|) (SeqType BoxType))) (and (and ($Is |lookup#2@@2| (TSeq Tclass.BetreeGraph.ReadOp)) ($Is |value#2@@1| Tclass.ValueType.Value)) (and true (BetreeInv.__default.IsSatisfyingLookupFrom (Lit |view#0@@41|) (Lit |key#0@@202|) |value#2@@1| |lookup#2@@2| (Lit |start#0@@35|))))) :qid |BetreeInvidfy.48:12| :skolemid |4814| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom |view#0@@41| |key#0@@202| |value#2@@1| |lookup#2@@2| |start#0@@35|)) ))))) :qid |BetreeInvidfy.46:36| :weight 3 :skolemid |4816| :pattern ( (BetreeInv.__default.KeyHasSatisfyingLookup (Lit |view#0@@41|) (Lit |key#0@@202|) (Lit |start#0@@35|))) ))))
(assert (forall ((arg0@@736 T@U) (arg1@@340 T@U) ) (! (= (type (BetreeInv.__default.PathOfLookup arg0@@736 arg1@@340)) (SeqType BoxType)) :qid |funType:BetreeInv.__default.PathOfLookup| :pattern ( (BetreeInv.__default.PathOfLookup arg0@@736 arg1@@340)) )))
(assert (forall (($ly@@580 T@U) (|lookup#0@@55| T@U) ) (!  (=> (and (= (type $ly@@580) LayerTypeType) (= (type |lookup#0@@55|) (SeqType BoxType))) (= (BetreeInv.__default.PathOfLookup ($LS $ly@@580) |lookup#0@@55|) (BetreeInv.__default.PathOfLookup $ly@@580 |lookup#0@@55|))) :qid |BetreeInvidfy.52:12| :skolemid |4817| :pattern ( (BetreeInv.__default.PathOfLookup ($LS $ly@@580) |lookup#0@@55|)) )))
(assert (forall (($ly@@581 T@U) (|lookup#0@@56| T@U) ) (!  (=> (and (= (type $ly@@581) LayerTypeType) (= (type |lookup#0@@56|) (SeqType BoxType))) (= (BetreeInv.__default.PathOfLookup $ly@@581 |lookup#0@@56|) (BetreeInv.__default.PathOfLookup $LZ |lookup#0@@56|))) :qid |BetreeInvidfy.52:12| :skolemid |4818| :pattern ( (BetreeInv.__default.PathOfLookup (AsFuelBottom $ly@@581) |lookup#0@@56|)) )))
(assert  (=> true (forall (($ly@@582 T@U) (|lookup#0@@57| T@U) ) (!  (=> (and (and (= (type $ly@@582) LayerTypeType) (= (type |lookup#0@@57|) (SeqType BoxType))) (or (|BetreeInv.__default.PathOfLookup#canCall| |lookup#0@@57|) ($Is |lookup#0@@57| (TSeq Tclass.BetreeGraph.ReadOp)))) (and (and (= (|Seq#Length| (BetreeInv.__default.PathOfLookup $ly@@582 |lookup#0@@57|)) (|Seq#Length| |lookup#0@@57|)) (forall ((|i#0@@136| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@136|) (< |i#0@@136| (|Seq#Length| (BetreeInv.__default.PathOfLookup $ly@@582 |lookup#0@@57|)))) (= (|Seq#Index| (BetreeInv.__default.PathOfLookup $ly@@582 |lookup#0@@57|) |i#0@@136|) (BetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@57| |i#0@@136|)))))) :qid |BetreeInvidfy.54:20| :skolemid |4819| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@57| |i#0@@136|))) :pattern ( (|Seq#Index| (BetreeInv.__default.PathOfLookup $ly@@582 |lookup#0@@57|) |i#0@@136|)) ))) ($Is (BetreeInv.__default.PathOfLookup $ly@@582 |lookup#0@@57|) (TSeq Tclass.ReferenceType.Reference)))) :qid |BetreeInvidfy.52:12| :skolemid |4820| :pattern ( (BetreeInv.__default.PathOfLookup $ly@@582 |lookup#0@@57|)) ))))
(assert (forall (($ly@@583 T@U) (|lookup#0@@58| T@U) ) (!  (=> (and (and (= (type $ly@@583) LayerTypeType) (= (type |lookup#0@@58|) (SeqType BoxType))) ($Is |lookup#0@@58| (TSeq Tclass.BetreeGraph.ReadOp))) (= (|BetreeInv.__default.PathOfLookup#requires| $ly@@583 |lookup#0@@58|) true)) :qid |BetreeInvidfy.52:12| :skolemid |4821| :pattern ( (|BetreeInv.__default.PathOfLookup#requires| $ly@@583 |lookup#0@@58|)) )))
(assert  (=> true (forall (($ly@@584 T@U) (|lookup#0@@59| T@U) ) (!  (=> (and (and (= (type $ly@@584) LayerTypeType) (= (type |lookup#0@@59|) (SeqType BoxType))) (or (|BetreeInv.__default.PathOfLookup#canCall| |lookup#0@@59|) ($Is |lookup#0@@59| (TSeq Tclass.BetreeGraph.ReadOp)))) (and (=> (not (|Seq#Equal| |lookup#0@@59| (|Seq#Empty| BoxType))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.BetreeGraph.ReadOp |lookup#0@@59|) (|BetreeInv.__default.PathOfLookup#canCall| (Sequences.__default.DropLast Tclass.BetreeGraph.ReadOp |lookup#0@@59|))) (and (|Sequences.__default.Last#canCall| Tclass.BetreeGraph.ReadOp |lookup#0@@59|) (BetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BetreeGraph.ReadOp |lookup#0@@59|)))))) (= (BetreeInv.__default.PathOfLookup ($LS $ly@@584) |lookup#0@@59|) (ite (|Seq#Equal| |lookup#0@@59| (|Seq#Empty| BoxType)) (|Seq#Empty| BoxType) (|Seq#Append| (BetreeInv.__default.PathOfLookup $ly@@584 (Sequences.__default.DropLast Tclass.BetreeGraph.ReadOp |lookup#0@@59|)) (|Seq#Build| (|Seq#Empty| BoxType) (BetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BetreeGraph.ReadOp |lookup#0@@59|))))))))) :qid |BetreeInvidfy.52:12| :skolemid |4822| :pattern ( (BetreeInv.__default.PathOfLookup ($LS $ly@@584) |lookup#0@@59|)) ))))
(assert  (=> true (forall (($ly@@585 T@U) (|lookup#0@@60| T@U) ) (!  (=> (and (and (= (type $ly@@585) LayerTypeType) (= (type |lookup#0@@60|) (SeqType BoxType))) (or (|BetreeInv.__default.PathOfLookup#canCall| (Lit |lookup#0@@60|)) ($Is |lookup#0@@60| (TSeq Tclass.BetreeGraph.ReadOp)))) (and (=> (not (|Seq#Equal| |lookup#0@@60| (|Seq#Empty| BoxType))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.BetreeGraph.ReadOp (Lit |lookup#0@@60|)) (|BetreeInv.__default.PathOfLookup#canCall| (Lit (Sequences.__default.DropLast Tclass.BetreeGraph.ReadOp (Lit |lookup#0@@60|))))) (and (|Sequences.__default.Last#canCall| Tclass.BetreeGraph.ReadOp (Lit |lookup#0@@60|)) (BetreeGraph.ReadOp.ReadOp_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BetreeGraph.ReadOp (Lit |lookup#0@@60|)))))))) (= (BetreeInv.__default.PathOfLookup ($LS $ly@@585) (Lit |lookup#0@@60|)) (ite (|Seq#Equal| |lookup#0@@60| (|Seq#Empty| BoxType)) (|Seq#Empty| BoxType) (|Seq#Append| (BetreeInv.__default.PathOfLookup ($LS $ly@@585) (Lit (Sequences.__default.DropLast Tclass.BetreeGraph.ReadOp (Lit |lookup#0@@60|)))) (|Seq#Build| (|Seq#Empty| BoxType) (Lit (BetreeGraph.ReadOp.ref (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BetreeGraph.ReadOp (Lit |lookup#0@@60|)))))))))))) :qid |BetreeInvidfy.52:12| :weight 3 :skolemid |4823| :pattern ( (BetreeInv.__default.PathOfLookup ($LS $ly@@585) (Lit |lookup#0@@60|))) ))))
(assert  (=> true (forall ((|lookup#0@@61| T@U) ) (!  (=> (and (= (type |lookup#0@@61|) (SeqType BoxType)) (or (|BetreeInv.__default.LookupIsAcyclic#canCall| |lookup#0@@61|) ($Is |lookup#0@@61| (TSeq Tclass.BetreeGraph.ReadOp)))) true) :qid |BetreeInvidfy.60:29| :skolemid |4824| :pattern ( (BetreeInv.__default.LookupIsAcyclic |lookup#0@@61|)) ))))
(assert (forall ((|lookup#0@@62| T@U) ) (!  (=> (and (= (type |lookup#0@@62|) (SeqType BoxType)) ($Is |lookup#0@@62| (TSeq Tclass.BetreeGraph.ReadOp))) (= (|BetreeInv.__default.LookupIsAcyclic#requires| |lookup#0@@62|) true)) :qid |BetreeInvidfy.60:29| :skolemid |4825| :pattern ( (|BetreeInv.__default.LookupIsAcyclic#requires| |lookup#0@@62|)) )))
(assert  (=> true (forall ((|lookup#0@@63| T@U) ) (!  (=> (and (= (type |lookup#0@@63|) (SeqType BoxType)) (or (|BetreeInv.__default.LookupIsAcyclic#canCall| |lookup#0@@63|) ($Is |lookup#0@@63| (TSeq Tclass.BetreeGraph.ReadOp)))) (and (forall ((|i#0@@137| Int) (|j#0@@27| Int) ) (!  (=> (<= (LitInt 0) |i#0@@137|) (=> (< |i#0@@137| (|Seq#Length| |lookup#0@@63|)) (=> (<= (LitInt 0) |j#0@@27|) (=> (< |j#0@@27| (|Seq#Length| |lookup#0@@63|)) (=> (not (= |i#0@@137| |j#0@@27|)) (and (BetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@63| |i#0@@137|))) (BetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@63| |j#0@@27|))))))))) :qid |BetreeInvidfy.61:12| :skolemid |4827| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@63| |j#0@@27|)) ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@63| |i#0@@137|))) )) (= (BetreeInv.__default.LookupIsAcyclic |lookup#0@@63|) (forall ((|i#0@@138| Int) (|j#0@@28| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#0@@138|) (< |i#0@@138| (|Seq#Length| |lookup#0@@63|))) (and (<= (LitInt 0) |j#0@@28|) (< |j#0@@28| (|Seq#Length| |lookup#0@@63|)))) (not (= |i#0@@138| |j#0@@28|))) (not (= (BetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@63| |i#0@@138|))) (BetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@63| |j#0@@28|))))))) :qid |BetreeInvidfy.61:12| :skolemid |4826| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@63| |j#0@@28|)) ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@63| |i#0@@138|))) ))))) :qid |BetreeInvidfy.60:29| :skolemid |4828| :pattern ( (BetreeInv.__default.LookupIsAcyclic |lookup#0@@63|)) ))))
(assert  (=> true (forall ((|lookup#0@@64| T@U) ) (!  (=> (and (= (type |lookup#0@@64|) (SeqType BoxType)) (or (|BetreeInv.__default.LookupIsAcyclic#canCall| (Lit |lookup#0@@64|)) ($Is |lookup#0@@64| (TSeq Tclass.BetreeGraph.ReadOp)))) (and (forall ((|i#1@@59| Int) (|j#1@@17| Int) ) (!  (=> (<= (LitInt 0) |i#1@@59|) (=> (< |i#1@@59| (|Seq#Length| (Lit |lookup#0@@64|))) (=> (<= (LitInt 0) |j#1@@17|) (=> (< |j#1@@17| (|Seq#Length| (Lit |lookup#0@@64|))) (=> (not (= |i#1@@59| |j#1@@17|)) (and (BetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@64|) |i#1@@59|))) (BetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@64|) |j#1@@17|))))))))) :qid |BetreeInvidfy.61:12| :skolemid |4830| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@64| |j#1@@17|)) ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@64| |i#1@@59|))) )) (= (BetreeInv.__default.LookupIsAcyclic (Lit |lookup#0@@64|)) (forall ((|i#1@@60| Int) (|j#1@@18| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#1@@60|) (< |i#1@@60| (|Seq#Length| (Lit |lookup#0@@64|)))) (and (<= (LitInt 0) |j#1@@18|) (< |j#1@@18| (|Seq#Length| (Lit |lookup#0@@64|))))) (not (= |i#1@@60| |j#1@@18|))) (not (= (BetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@64|) |i#1@@60|))) (BetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@64|) |j#1@@18|))))))) :qid |BetreeInvidfy.61:12| :skolemid |4829| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@64| |j#1@@18|)) ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@64| |i#1@@60|))) ))))) :qid |BetreeInvidfy.60:29| :weight 3 :skolemid |4831| :pattern ( (BetreeInv.__default.LookupIsAcyclic (Lit |lookup#0@@64|))) ))))
(assert  (=> true (forall ((|s#0@@399| T@U) ) (!  (=> (and (= (type |s#0@@399|) DatatypeTypeType) (or (|BetreeInv.__default.Acyclic#canCall| |s#0@@399|) ($Is |s#0@@399| Tclass.Betree.Variables))) true) :qid |BetreeInvidfy.64:21| :skolemid |4832| :pattern ( (BetreeInv.__default.Acyclic |s#0@@399|)) ))))
(assert (forall ((|s#0@@400| T@U) ) (!  (=> (and (= (type |s#0@@400|) DatatypeTypeType) ($Is |s#0@@400| Tclass.Betree.Variables)) (= (|BetreeInv.__default.Acyclic#requires| |s#0@@400|) true)) :qid |BetreeInvidfy.64:21| :skolemid |4833| :pattern ( (|BetreeInv.__default.Acyclic#requires| |s#0@@400|)) )))
(assert  (=> true (forall ((|s#0@@401| T@U) ) (!  (=> (and (= (type |s#0@@401|) DatatypeTypeType) (or (|BetreeInv.__default.Acyclic#canCall| |s#0@@401|) ($Is |s#0@@401| Tclass.Betree.Variables))) (and (forall ((|key#0@@203| T@U) (|lookup#0@@65| T@U) ) (!  (=> (and (and (= (type |key#0@@203|) (SeqType BoxType)) (= (type |lookup#0@@65|) (SeqType BoxType))) (and ($Is |key#0@@203| Tclass.KeyType.Key) ($Is |lookup#0@@65| (TSeq Tclass.BetreeGraph.ReadOp)))) (and (and (and (Betree.Variables.Variables_q |s#0@@401|) (BetreeBlockInterface.Variables.Variables_q (Betree.Variables.bcv |s#0@@401|))) (|BetreeInv.__default.IsPathLookup#canCall| (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@401|)) |key#0@@203| |lookup#0@@65|)) (=> (BetreeInv.__default.IsPathLookup (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@401|)) |key#0@@203| |lookup#0@@65|) (|BetreeInv.__default.LookupIsAcyclic#canCall| |lookup#0@@65|)))) :qid |BetreeInvidfy.65:12| :skolemid |4835| :pattern ( (BetreeInv.__default.IsPathLookup (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@401|)) |key#0@@203| |lookup#0@@65|)) )) (= (BetreeInv.__default.Acyclic |s#0@@401|) (forall ((|key#0@@204| T@U) (|lookup#0@@66| T@U) ) (!  (=> (and (and (and (= (type |key#0@@204|) (SeqType BoxType)) (= (type |lookup#0@@66|) (SeqType BoxType))) (and ($Is |key#0@@204| Tclass.KeyType.Key) ($Is |lookup#0@@66| (TSeq Tclass.BetreeGraph.ReadOp)))) (BetreeInv.__default.IsPathLookup (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@401|)) |key#0@@204| |lookup#0@@66|)) (BetreeInv.__default.LookupIsAcyclic |lookup#0@@66|)) :qid |BetreeInvidfy.65:12| :skolemid |4834| :pattern ( (BetreeInv.__default.IsPathLookup (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@401|)) |key#0@@204| |lookup#0@@66|)) ))))) :qid |BetreeInvidfy.64:21| :skolemid |4836| :pattern ( (BetreeInv.__default.Acyclic |s#0@@401|)) ))))
(assert  (=> true (forall ((|s#0@@402| T@U) ) (!  (=> (and (= (type |s#0@@402|) DatatypeTypeType) (or (|BetreeInv.__default.Acyclic#canCall| (Lit |s#0@@402|)) ($Is |s#0@@402| Tclass.Betree.Variables))) (and (forall ((|key#1@@27| T@U) (|lookup#1@@3| T@U) ) (!  (=> (and (and (= (type |key#1@@27|) (SeqType BoxType)) (= (type |lookup#1@@3|) (SeqType BoxType))) (and ($Is |key#1@@27| Tclass.KeyType.Key) ($Is |lookup#1@@3| (TSeq Tclass.BetreeGraph.ReadOp)))) (and (and (and (Betree.Variables.Variables_q (Lit |s#0@@402|)) (BetreeBlockInterface.Variables.Variables_q (Lit (Betree.Variables.bcv (Lit |s#0@@402|))))) (|BetreeInv.__default.IsPathLookup#canCall| (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s#0@@402|))))) |key#1@@27| |lookup#1@@3|)) (=> (BetreeInv.__default.IsPathLookup (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s#0@@402|))))) |key#1@@27| |lookup#1@@3|) (|BetreeInv.__default.LookupIsAcyclic#canCall| |lookup#1@@3|)))) :qid |BetreeInvidfy.65:12| :skolemid |4838| :pattern ( (BetreeInv.__default.IsPathLookup (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@402|)) |key#1@@27| |lookup#1@@3|)) )) (= (BetreeInv.__default.Acyclic (Lit |s#0@@402|)) (forall ((|key#1@@28| T@U) (|lookup#1@@4| T@U) ) (!  (=> (and (and (and (= (type |key#1@@28|) (SeqType BoxType)) (= (type |lookup#1@@4|) (SeqType BoxType))) (and ($Is |key#1@@28| Tclass.KeyType.Key) ($Is |lookup#1@@4| (TSeq Tclass.BetreeGraph.ReadOp)))) (BetreeInv.__default.IsPathLookup (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s#0@@402|))))) |key#1@@28| |lookup#1@@4|)) (BetreeInv.__default.LookupIsAcyclic |lookup#1@@4|)) :qid |BetreeInvidfy.65:12| :skolemid |4837| :pattern ( (BetreeInv.__default.IsPathLookup (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@402|)) |key#1@@28| |lookup#1@@4|)) ))))) :qid |BetreeInvidfy.64:21| :weight 3 :skolemid |4839| :pattern ( (BetreeInv.__default.Acyclic (Lit |s#0@@402|))) ))))
(assert  (=> true (forall ((|s#0@@403| T@U) ) (!  (=> (and (= (type |s#0@@403|) DatatypeTypeType) (or (|BetreeInv.__default.Inv#canCall| |s#0@@403|) ($Is |s#0@@403| Tclass.Betree.Variables))) true) :qid |BetreeInvidfy.70:17| :skolemid |4840| :pattern ( (BetreeInv.__default.Inv |s#0@@403|)) ))))
(assert (forall ((|s#0@@404| T@U) ) (!  (=> (and (= (type |s#0@@404|) DatatypeTypeType) ($Is |s#0@@404| Tclass.Betree.Variables)) (= (|BetreeInv.__default.Inv#requires| |s#0@@404|) true)) :qid |BetreeInvidfy.70:17| :skolemid |4841| :pattern ( (|BetreeInv.__default.Inv#requires| |s#0@@404|)) )))
(assert  (=> true (forall ((|s#0@@405| T@U) ) (!  (=> (and (= (type |s#0@@405|) DatatypeTypeType) (or (|BetreeInv.__default.Inv#canCall| |s#0@@405|) ($Is |s#0@@405| Tclass.Betree.Variables))) (and (and (and (Betree.Variables.Variables_q |s#0@@405|) (|BetreeBlockInterface.__default.Inv#canCall| (Betree.Variables.bcv |s#0@@405|))) (=> (BetreeBlockInterface.__default.Inv (Betree.Variables.bcv |s#0@@405|)) (and (and (and (Betree.Variables.Variables_q |s#0@@405|) (BetreeBlockInterface.Variables.Variables_q (Betree.Variables.bcv |s#0@@405|))) (|BetreeGraph.__default.IsAcyclic#canCall| (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@405|)))) (=> (BetreeGraph.__default.IsAcyclic (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@405|))) (and (|BetreeInv.__default.Acyclic#canCall| |s#0@@405|) (=> (BetreeInv.__default.Acyclic |s#0@@405|) (and (forall ((|key#0@@205| T@U) ) (!  (=> (and (= (type |key#0@@205|) (SeqType BoxType)) ($Is |key#0@@205| Tclass.KeyType.Key)) (and (|MapSpec.__default.InDomain#canCall| |key#0@@205|) (=> (MapSpec.__default.InDomain |key#0@@205|) (and (and (and (Betree.Variables.Variables_q |s#0@@405|) (BetreeBlockInterface.Variables.Variables_q (Betree.Variables.bcv |s#0@@405|))) |BetreeGraph.__default.Root#canCall|) (|BetreeInv.__default.KeyHasSatisfyingLookup#canCall| (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@405|)) |key#0@@205| (Lit BetreeGraph.__default.Root)))))) :qid |BetreeInvidfy.75:16| :skolemid |4843| :pattern ( (BetreeInv.__default.KeyHasSatisfyingLookup (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@405|)) |key#0@@205| BetreeGraph.__default.Root)) :pattern ( (MapSpec.__default.InDomain |key#0@@205|)) )) (=> (forall ((|key#0@@206| T@U) ) (!  (=> (= (type |key#0@@206|) (SeqType BoxType)) (=> (and ($Is |key#0@@206| Tclass.KeyType.Key) (MapSpec.__default.InDomain |key#0@@206|)) (BetreeInv.__default.KeyHasSatisfyingLookup (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@405|)) |key#0@@206| (Lit BetreeGraph.__default.Root)))) :qid |BetreeInvidfy.75:16| :skolemid |4844| :pattern ( (BetreeInv.__default.KeyHasSatisfyingLookup (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@405|)) |key#0@@206| BetreeGraph.__default.Root)) :pattern ( (MapSpec.__default.InDomain |key#0@@206|)) )) (and (and (Betree.Variables.Variables_q |s#0@@405|) (BetreeBlockInterface.Variables.Variables_q (Betree.Variables.bcv |s#0@@405|))) (|BetreeBlockInterface.__default.RootHasNoPredecessor#canCall| (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@405|)))))))))))) (= (BetreeInv.__default.Inv |s#0@@405|)  (and (and (and (and (BetreeBlockInterface.__default.Inv (Betree.Variables.bcv |s#0@@405|)) (BetreeGraph.__default.IsAcyclic (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@405|)))) (BetreeInv.__default.Acyclic |s#0@@405|)) (forall ((|key#0@@207| T@U) ) (!  (=> (= (type |key#0@@207|) (SeqType BoxType)) (=> (and ($Is |key#0@@207| Tclass.KeyType.Key) (MapSpec.__default.InDomain |key#0@@207|)) (BetreeInv.__default.KeyHasSatisfyingLookup (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@405|)) |key#0@@207| (Lit BetreeGraph.__default.Root)))) :qid |BetreeInvidfy.75:16| :skolemid |4842| :pattern ( (BetreeInv.__default.KeyHasSatisfyingLookup (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@405|)) |key#0@@207| BetreeGraph.__default.Root)) :pattern ( (MapSpec.__default.InDomain |key#0@@207|)) ))) (BetreeBlockInterface.__default.RootHasNoPredecessor (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@405|))))))) :qid |BetreeInvidfy.70:17| :skolemid |4845| :pattern ( (BetreeInv.__default.Inv |s#0@@405|)) ))))
(assert  (=> true (forall ((|s#0@@406| T@U) ) (!  (=> (and (= (type |s#0@@406|) DatatypeTypeType) (or (|BetreeInv.__default.Inv#canCall| (Lit |s#0@@406|)) ($Is |s#0@@406| Tclass.Betree.Variables))) (and (and (and (Betree.Variables.Variables_q (Lit |s#0@@406|)) (|BetreeBlockInterface.__default.Inv#canCall| (Lit (Betree.Variables.bcv (Lit |s#0@@406|))))) (=> (U_2_bool (Lit (bool_2_U (BetreeBlockInterface.__default.Inv (Lit (Betree.Variables.bcv (Lit |s#0@@406|))))))) (and (and (and (Betree.Variables.Variables_q (Lit |s#0@@406|)) (BetreeBlockInterface.Variables.Variables_q (Lit (Betree.Variables.bcv (Lit |s#0@@406|))))) (|BetreeGraph.__default.IsAcyclic#canCall| (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s#0@@406|))))))) (=> (U_2_bool (Lit (bool_2_U (BetreeGraph.__default.IsAcyclic (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s#0@@406|))))))))) (and (|BetreeInv.__default.Acyclic#canCall| (Lit |s#0@@406|)) (=> (U_2_bool (Lit (bool_2_U (BetreeInv.__default.Acyclic (Lit |s#0@@406|))))) (and (forall ((|key#1@@29| T@U) ) (!  (=> (and (= (type |key#1@@29|) (SeqType BoxType)) ($Is |key#1@@29| Tclass.KeyType.Key)) (and (|MapSpec.__default.InDomain#canCall| |key#1@@29|) (=> (MapSpec.__default.InDomain |key#1@@29|) (and (and (and (Betree.Variables.Variables_q (Lit |s#0@@406|)) (BetreeBlockInterface.Variables.Variables_q (Lit (Betree.Variables.bcv (Lit |s#0@@406|))))) |BetreeGraph.__default.Root#canCall|) (|BetreeInv.__default.KeyHasSatisfyingLookup#canCall| (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s#0@@406|))))) |key#1@@29| (Lit BetreeGraph.__default.Root)))))) :qid |BetreeInvidfy.75:16| :skolemid |4847| :pattern ( (BetreeInv.__default.KeyHasSatisfyingLookup (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@406|)) |key#1@@29| BetreeGraph.__default.Root)) :pattern ( (MapSpec.__default.InDomain |key#1@@29|)) )) (=> (forall ((|key#1@@30| T@U) ) (!  (=> (= (type |key#1@@30|) (SeqType BoxType)) (=> (and ($Is |key#1@@30| Tclass.KeyType.Key) (MapSpec.__default.InDomain |key#1@@30|)) (BetreeInv.__default.KeyHasSatisfyingLookup (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s#0@@406|))))) |key#1@@30| (Lit BetreeGraph.__default.Root)))) :qid |BetreeInvidfy.75:16| :skolemid |4848| :pattern ( (BetreeInv.__default.KeyHasSatisfyingLookup (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@406|)) |key#1@@30| BetreeGraph.__default.Root)) :pattern ( (MapSpec.__default.InDomain |key#1@@30|)) )) (and (and (Betree.Variables.Variables_q (Lit |s#0@@406|)) (BetreeBlockInterface.Variables.Variables_q (Lit (Betree.Variables.bcv (Lit |s#0@@406|))))) (|BetreeBlockInterface.__default.RootHasNoPredecessor#canCall| (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s#0@@406|))))))))))))))) (= (BetreeInv.__default.Inv (Lit |s#0@@406|))  (and (and (and (and (BetreeBlockInterface.__default.Inv (Lit (Betree.Variables.bcv (Lit |s#0@@406|)))) (BetreeGraph.__default.IsAcyclic (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s#0@@406|))))))) (BetreeInv.__default.Acyclic (Lit |s#0@@406|))) (forall ((|key#1@@31| T@U) ) (!  (=> (= (type |key#1@@31|) (SeqType BoxType)) (=> (and ($Is |key#1@@31| Tclass.KeyType.Key) (MapSpec.__default.InDomain |key#1@@31|)) (BetreeInv.__default.KeyHasSatisfyingLookup (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s#0@@406|))))) |key#1@@31| (Lit BetreeGraph.__default.Root)))) :qid |BetreeInvidfy.75:16| :skolemid |4846| :pattern ( (BetreeInv.__default.KeyHasSatisfyingLookup (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@406|)) |key#1@@31| BetreeGraph.__default.Root)) :pattern ( (MapSpec.__default.InDomain |key#1@@31|)) ))) (BetreeBlockInterface.__default.RootHasNoPredecessor (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s#0@@406|)))))))))) :qid |BetreeInvidfy.70:17| :weight 3 :skolemid |4849| :pattern ( (BetreeInv.__default.Inv (Lit |s#0@@406|))) ))))
(assert  (=> true (forall ((|s#0@@407| T@U) (|s'#0@@118| T@U) (|start#0@@36| T@U) ) (!  (=> (and (and (and (= (type |s#0@@407|) DatatypeTypeType) (= (type |s'#0@@118|) DatatypeTypeType)) (= (type |start#0@@36|) BoxType)) (or (|BetreeInv.__default.PreservesLookups#canCall| |s#0@@407| |s'#0@@118| |start#0@@36|) (and (and ($Is |s#0@@407| Tclass.Betree.Variables) ($Is |s'#0@@118| Tclass.Betree.Variables)) ($IsBox |start#0@@36| Tclass.ReferenceType.Reference)))) true) :qid |BetreeInvidfy.83:30| :skolemid |4850| :pattern ( (BetreeInv.__default.PreservesLookups |s#0@@407| |s'#0@@118| |start#0@@36|)) ))))
(assert (forall ((|s#0@@408| T@U) (|s'#0@@119| T@U) (|start#0@@37| T@U) ) (!  (=> (and (and (and (= (type |s#0@@408|) DatatypeTypeType) (= (type |s'#0@@119|) DatatypeTypeType)) (= (type |start#0@@37|) BoxType)) (and (and ($Is |s#0@@408| Tclass.Betree.Variables) ($Is |s'#0@@119| Tclass.Betree.Variables)) ($IsBox |start#0@@37| Tclass.ReferenceType.Reference))) (= (|BetreeInv.__default.PreservesLookups#requires| |s#0@@408| |s'#0@@119| |start#0@@37|) true)) :qid |BetreeInvidfy.83:30| :skolemid |4851| :pattern ( (|BetreeInv.__default.PreservesLookups#requires| |s#0@@408| |s'#0@@119| |start#0@@37|)) )))
(assert  (=> true (forall ((|s#0@@409| T@U) (|s'#0@@120| T@U) (|start#0@@38| T@U) ) (!  (=> (and (and (and (= (type |s#0@@409|) DatatypeTypeType) (= (type |s'#0@@120|) DatatypeTypeType)) (= (type |start#0@@38|) BoxType)) (or (|BetreeInv.__default.PreservesLookups#canCall| |s#0@@409| |s'#0@@120| |start#0@@38|) (and (and ($Is |s#0@@409| Tclass.Betree.Variables) ($Is |s'#0@@120| Tclass.Betree.Variables)) ($IsBox |start#0@@38| Tclass.ReferenceType.Reference)))) (and (forall ((|lookup#0@@67| T@U) (|key#0@@208| T@U) (|value#0@@26| T@U) ) (!  (=> (and (and (and (= (type |lookup#0@@67|) (SeqType BoxType)) (= (type |key#0@@208|) (SeqType BoxType))) (= (type |value#0@@26|) (SeqType BoxType))) (and (and ($Is |lookup#0@@67| (TSeq Tclass.BetreeGraph.ReadOp)) ($Is |key#0@@208| Tclass.KeyType.Key)) ($Is |value#0@@26| Tclass.ValueType.Value))) (and (and (and (Betree.Variables.Variables_q |s#0@@409|) (BetreeBlockInterface.Variables.Variables_q (Betree.Variables.bcv |s#0@@409|))) (|BetreeInv.__default.IsSatisfyingLookupFrom#canCall| (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@409|)) |key#0@@208| |value#0@@26| |lookup#0@@67| |start#0@@38|)) (=> (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@409|)) |key#0@@208| |value#0@@26| |lookup#0@@67| |start#0@@38|) (forall ((|lookup'#0| T@U) ) (!  (=> (and (= (type |lookup'#0|) (SeqType BoxType)) ($Is |lookup'#0| (TSeq Tclass.BetreeGraph.ReadOp))) (and (and (Betree.Variables.Variables_q |s'#0@@120|) (BetreeBlockInterface.Variables.Variables_q (Betree.Variables.bcv |s'#0@@120|))) (|BetreeInv.__default.IsSatisfyingLookupFrom#canCall| (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s'#0@@120|)) |key#0@@208| |value#0@@26| |lookup'#0| |start#0@@38|))) :qid |BetreeInvidfy.86:14| :skolemid |4854| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s'#0@@120|)) |key#0@@208| |value#0@@26| |lookup'#0| |start#0@@38|)) ))))) :qid |BetreeInvidfy.85:12| :skolemid |4855| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@409|)) |key#0@@208| |value#0@@26| |lookup#0@@67| |start#0@@38|)) )) (= (BetreeInv.__default.PreservesLookups |s#0@@409| |s'#0@@120| |start#0@@38|) (forall ((|lookup#0@@68| T@U) (|key#0@@209| T@U) (|value#0@@27| T@U) ) (!  (=> (and (and (and (and (= (type |lookup#0@@68|) (SeqType BoxType)) (= (type |key#0@@209|) (SeqType BoxType))) (= (type |value#0@@27|) (SeqType BoxType))) (and (and ($Is |lookup#0@@68| (TSeq Tclass.BetreeGraph.ReadOp)) ($Is |key#0@@209| Tclass.KeyType.Key)) ($Is |value#0@@27| Tclass.ValueType.Value))) (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@409|)) |key#0@@209| |value#0@@27| |lookup#0@@68| |start#0@@38|)) (exists ((|lookup'#0@@0| T@U) ) (!  (and (= (type |lookup'#0@@0|) (SeqType BoxType)) (and ($Is |lookup'#0@@0| (TSeq Tclass.BetreeGraph.ReadOp)) (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s'#0@@120|)) |key#0@@209| |value#0@@27| |lookup'#0@@0| |start#0@@38|))) :qid |BetreeInvidfy.86:14| :skolemid |4852| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s'#0@@120|)) |key#0@@209| |value#0@@27| |lookup'#0@@0| |start#0@@38|)) ))) :qid |BetreeInvidfy.85:12| :skolemid |4853| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@409|)) |key#0@@209| |value#0@@27| |lookup#0@@68| |start#0@@38|)) ))))) :qid |BetreeInvidfy.83:30| :skolemid |4856| :pattern ( (BetreeInv.__default.PreservesLookups |s#0@@409| |s'#0@@120| |start#0@@38|)) ))))
(assert  (=> true (forall ((|s#0@@410| T@U) (|s'#0@@121| T@U) (|start#0@@39| T@U) ) (!  (=> (and (and (and (= (type |s#0@@410|) DatatypeTypeType) (= (type |s'#0@@121|) DatatypeTypeType)) (= (type |start#0@@39|) BoxType)) (or (|BetreeInv.__default.PreservesLookups#canCall| (Lit |s#0@@410|) (Lit |s'#0@@121|) |start#0@@39|) (and (and ($Is |s#0@@410| Tclass.Betree.Variables) ($Is |s'#0@@121| Tclass.Betree.Variables)) ($IsBox |start#0@@39| Tclass.ReferenceType.Reference)))) (and (forall ((|lookup#1@@5| T@U) (|key#1@@32| T@U) (|value#1@@2| T@U) ) (!  (=> (and (and (and (= (type |lookup#1@@5|) (SeqType BoxType)) (= (type |key#1@@32|) (SeqType BoxType))) (= (type |value#1@@2|) (SeqType BoxType))) (and (and ($Is |lookup#1@@5| (TSeq Tclass.BetreeGraph.ReadOp)) ($Is |key#1@@32| Tclass.KeyType.Key)) ($Is |value#1@@2| Tclass.ValueType.Value))) (and (and (and (Betree.Variables.Variables_q (Lit |s#0@@410|)) (BetreeBlockInterface.Variables.Variables_q (Lit (Betree.Variables.bcv (Lit |s#0@@410|))))) (|BetreeInv.__default.IsSatisfyingLookupFrom#canCall| (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s#0@@410|))))) |key#1@@32| |value#1@@2| |lookup#1@@5| |start#0@@39|)) (=> (BetreeInv.__default.IsSatisfyingLookupFrom (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s#0@@410|))))) |key#1@@32| |value#1@@2| |lookup#1@@5| |start#0@@39|) (forall ((|lookup'#1| T@U) ) (!  (=> (and (= (type |lookup'#1|) (SeqType BoxType)) ($Is |lookup'#1| (TSeq Tclass.BetreeGraph.ReadOp))) (and (and (Betree.Variables.Variables_q (Lit |s'#0@@121|)) (BetreeBlockInterface.Variables.Variables_q (Lit (Betree.Variables.bcv (Lit |s'#0@@121|))))) (|BetreeInv.__default.IsSatisfyingLookupFrom#canCall| (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s'#0@@121|))))) |key#1@@32| |value#1@@2| |lookup'#1| |start#0@@39|))) :qid |BetreeInvidfy.86:14| :skolemid |4859| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s'#0@@121|)) |key#1@@32| |value#1@@2| |lookup'#1| |start#0@@39|)) ))))) :qid |BetreeInvidfy.85:12| :skolemid |4860| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@410|)) |key#1@@32| |value#1@@2| |lookup#1@@5| |start#0@@39|)) )) (= (BetreeInv.__default.PreservesLookups (Lit |s#0@@410|) (Lit |s'#0@@121|) |start#0@@39|) (forall ((|lookup#1@@6| T@U) (|key#1@@33| T@U) (|value#1@@3| T@U) ) (!  (=> (and (and (and (and (= (type |lookup#1@@6|) (SeqType BoxType)) (= (type |key#1@@33|) (SeqType BoxType))) (= (type |value#1@@3|) (SeqType BoxType))) (and (and ($Is |lookup#1@@6| (TSeq Tclass.BetreeGraph.ReadOp)) ($Is |key#1@@33| Tclass.KeyType.Key)) ($Is |value#1@@3| Tclass.ValueType.Value))) (BetreeInv.__default.IsSatisfyingLookupFrom (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s#0@@410|))))) |key#1@@33| |value#1@@3| |lookup#1@@6| |start#0@@39|)) (exists ((|lookup'#1@@0| T@U) ) (!  (and (= (type |lookup'#1@@0|) (SeqType BoxType)) (and ($Is |lookup'#1@@0| (TSeq Tclass.BetreeGraph.ReadOp)) (BetreeInv.__default.IsSatisfyingLookupFrom (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s'#0@@121|))))) |key#1@@33| |value#1@@3| |lookup'#1@@0| |start#0@@39|))) :qid |BetreeInvidfy.86:14| :skolemid |4857| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s'#0@@121|)) |key#1@@33| |value#1@@3| |lookup'#1@@0| |start#0@@39|)) ))) :qid |BetreeInvidfy.85:12| :skolemid |4858| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@410|)) |key#1@@33| |value#1@@3| |lookup#1@@6| |start#0@@39|)) ))))) :qid |BetreeInvidfy.83:30| :weight 3 :skolemid |4861| :pattern ( (BetreeInv.__default.PreservesLookups (Lit |s#0@@410|) (Lit |s'#0@@121|) |start#0@@39|)) ))))
(assert  (=> true (forall ((|s#0@@411| T@U) (|s'#0@@122| T@U) (|start#0@@40| T@U) ) (!  (=> (and (and (and (= (type |s#0@@411|) DatatypeTypeType) (= (type |s'#0@@122|) DatatypeTypeType)) (= (type |start#0@@40|) BoxType)) (or (|BetreeInv.__default.PreservesLookups#canCall| (Lit |s#0@@411|) (Lit |s'#0@@122|) (Lit |start#0@@40|)) (and (and ($Is |s#0@@411| Tclass.Betree.Variables) ($Is |s'#0@@122| Tclass.Betree.Variables)) ($IsBox |start#0@@40| Tclass.ReferenceType.Reference)))) (and (forall ((|lookup#2@@3| T@U) (|key#2@@11| T@U) (|value#2@@2| T@U) ) (!  (=> (and (and (and (= (type |lookup#2@@3|) (SeqType BoxType)) (= (type |key#2@@11|) (SeqType BoxType))) (= (type |value#2@@2|) (SeqType BoxType))) (and (and ($Is |lookup#2@@3| (TSeq Tclass.BetreeGraph.ReadOp)) ($Is |key#2@@11| Tclass.KeyType.Key)) ($Is |value#2@@2| Tclass.ValueType.Value))) (and (and (and (Betree.Variables.Variables_q (Lit |s#0@@411|)) (BetreeBlockInterface.Variables.Variables_q (Lit (Betree.Variables.bcv (Lit |s#0@@411|))))) (|BetreeInv.__default.IsSatisfyingLookupFrom#canCall| (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s#0@@411|))))) |key#2@@11| |value#2@@2| |lookup#2@@3| (Lit |start#0@@40|))) (=> (BetreeInv.__default.IsSatisfyingLookupFrom (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s#0@@411|))))) |key#2@@11| |value#2@@2| |lookup#2@@3| (Lit |start#0@@40|)) (forall ((|lookup'#2| T@U) ) (!  (=> (and (= (type |lookup'#2|) (SeqType BoxType)) ($Is |lookup'#2| (TSeq Tclass.BetreeGraph.ReadOp))) (and (and (Betree.Variables.Variables_q (Lit |s'#0@@122|)) (BetreeBlockInterface.Variables.Variables_q (Lit (Betree.Variables.bcv (Lit |s'#0@@122|))))) (|BetreeInv.__default.IsSatisfyingLookupFrom#canCall| (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s'#0@@122|))))) |key#2@@11| |value#2@@2| |lookup'#2| (Lit |start#0@@40|)))) :qid |BetreeInvidfy.86:14| :skolemid |4864| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s'#0@@122|)) |key#2@@11| |value#2@@2| |lookup'#2| |start#0@@40|)) ))))) :qid |BetreeInvidfy.85:12| :skolemid |4865| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@411|)) |key#2@@11| |value#2@@2| |lookup#2@@3| |start#0@@40|)) )) (= (BetreeInv.__default.PreservesLookups (Lit |s#0@@411|) (Lit |s'#0@@122|) (Lit |start#0@@40|)) (forall ((|lookup#2@@4| T@U) (|key#2@@12| T@U) (|value#2@@3| T@U) ) (!  (=> (and (and (and (and (= (type |lookup#2@@4|) (SeqType BoxType)) (= (type |key#2@@12|) (SeqType BoxType))) (= (type |value#2@@3|) (SeqType BoxType))) (and (and ($Is |lookup#2@@4| (TSeq Tclass.BetreeGraph.ReadOp)) ($Is |key#2@@12| Tclass.KeyType.Key)) ($Is |value#2@@3| Tclass.ValueType.Value))) (BetreeInv.__default.IsSatisfyingLookupFrom (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s#0@@411|))))) |key#2@@12| |value#2@@3| |lookup#2@@4| (Lit |start#0@@40|))) (exists ((|lookup'#2@@0| T@U) ) (!  (and (= (type |lookup'#2@@0|) (SeqType BoxType)) (and ($Is |lookup'#2@@0| (TSeq Tclass.BetreeGraph.ReadOp)) (BetreeInv.__default.IsSatisfyingLookupFrom (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s'#0@@122|))))) |key#2@@12| |value#2@@3| |lookup'#2@@0| (Lit |start#0@@40|)))) :qid |BetreeInvidfy.86:14| :skolemid |4862| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s'#0@@122|)) |key#2@@12| |value#2@@3| |lookup'#2@@0| |start#0@@40|)) ))) :qid |BetreeInvidfy.85:12| :skolemid |4863| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@411|)) |key#2@@12| |value#2@@3| |lookup#2@@4| |start#0@@40|)) ))))) :qid |BetreeInvidfy.83:30| :weight 3 :skolemid |4866| :pattern ( (BetreeInv.__default.PreservesLookups (Lit |s#0@@411|) (Lit |s'#0@@122|) (Lit |start#0@@40|))) ))))
(assert  (=> true (forall ((|s#0@@412| T@U) (|s'#0@@123| T@U) (|start#0@@41| T@U) (|exceptQuery#0| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@412|) DatatypeTypeType) (= (type |s'#0@@123|) DatatypeTypeType)) (= (type |start#0@@41|) BoxType)) (= (type |exceptQuery#0|) (SeqType BoxType))) (or (|BetreeInv.__default.PreservesLookupsExcept#canCall| |s#0@@412| |s'#0@@123| |start#0@@41| |exceptQuery#0|) (and (and (and ($Is |s#0@@412| Tclass.Betree.Variables) ($Is |s'#0@@123| Tclass.Betree.Variables)) ($IsBox |start#0@@41| Tclass.ReferenceType.Reference)) ($Is |exceptQuery#0| Tclass.KeyType.Key)))) true) :qid |BetreeInvidfy.89:36| :skolemid |4867| :pattern ( (BetreeInv.__default.PreservesLookupsExcept |s#0@@412| |s'#0@@123| |start#0@@41| |exceptQuery#0|)) ))))
(assert (forall ((|s#0@@413| T@U) (|s'#0@@124| T@U) (|start#0@@42| T@U) (|exceptQuery#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@413|) DatatypeTypeType) (= (type |s'#0@@124|) DatatypeTypeType)) (= (type |start#0@@42|) BoxType)) (= (type |exceptQuery#0@@0|) (SeqType BoxType))) (and (and (and ($Is |s#0@@413| Tclass.Betree.Variables) ($Is |s'#0@@124| Tclass.Betree.Variables)) ($IsBox |start#0@@42| Tclass.ReferenceType.Reference)) ($Is |exceptQuery#0@@0| Tclass.KeyType.Key))) (= (|BetreeInv.__default.PreservesLookupsExcept#requires| |s#0@@413| |s'#0@@124| |start#0@@42| |exceptQuery#0@@0|) true)) :qid |BetreeInvidfy.89:36| :skolemid |4868| :pattern ( (|BetreeInv.__default.PreservesLookupsExcept#requires| |s#0@@413| |s'#0@@124| |start#0@@42| |exceptQuery#0@@0|)) )))
(assert  (=> true (forall ((|s#0@@414| T@U) (|s'#0@@125| T@U) (|start#0@@43| T@U) (|exceptQuery#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@414|) DatatypeTypeType) (= (type |s'#0@@125|) DatatypeTypeType)) (= (type |start#0@@43|) BoxType)) (= (type |exceptQuery#0@@1|) (SeqType BoxType))) (or (|BetreeInv.__default.PreservesLookupsExcept#canCall| |s#0@@414| |s'#0@@125| |start#0@@43| |exceptQuery#0@@1|) (and (and (and ($Is |s#0@@414| Tclass.Betree.Variables) ($Is |s'#0@@125| Tclass.Betree.Variables)) ($IsBox |start#0@@43| Tclass.ReferenceType.Reference)) ($Is |exceptQuery#0@@1| Tclass.KeyType.Key)))) (and (forall ((|lookup#0@@69| T@U) (|key#0@@210| T@U) (|value#0@@28| T@U) ) (!  (=> (and (and (and (and (= (type |lookup#0@@69|) (SeqType BoxType)) (= (type |key#0@@210|) (SeqType BoxType))) (= (type |value#0@@28|) (SeqType BoxType))) (and (and ($Is |lookup#0@@69| (TSeq Tclass.BetreeGraph.ReadOp)) ($Is |key#0@@210| Tclass.KeyType.Key)) ($Is |value#0@@28| Tclass.ValueType.Value))) (not (|Seq#Equal| |key#0@@210| |exceptQuery#0@@1|))) (and (and (and (Betree.Variables.Variables_q |s#0@@414|) (BetreeBlockInterface.Variables.Variables_q (Betree.Variables.bcv |s#0@@414|))) (|BetreeInv.__default.IsSatisfyingLookupFrom#canCall| (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@414|)) |key#0@@210| |value#0@@28| |lookup#0@@69| |start#0@@43|)) (=> (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@414|)) |key#0@@210| |value#0@@28| |lookup#0@@69| |start#0@@43|) (forall ((|lookup'#0@@1| T@U) ) (!  (=> (and (= (type |lookup'#0@@1|) (SeqType BoxType)) ($Is |lookup'#0@@1| (TSeq Tclass.BetreeGraph.ReadOp))) (and (and (Betree.Variables.Variables_q |s'#0@@125|) (BetreeBlockInterface.Variables.Variables_q (Betree.Variables.bcv |s'#0@@125|))) (|BetreeInv.__default.IsSatisfyingLookupFrom#canCall| (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s'#0@@125|)) |key#0@@210| |value#0@@28| |lookup'#0@@1| |start#0@@43|))) :qid |BetreeInvidfy.92:14| :skolemid |4871| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s'#0@@125|)) |key#0@@210| |value#0@@28| |lookup'#0@@1| |start#0@@43|)) ))))) :qid |BetreeInvidfy.91:12| :skolemid |4872| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@414|)) |key#0@@210| |value#0@@28| |lookup#0@@69| |start#0@@43|)) )) (= (BetreeInv.__default.PreservesLookupsExcept |s#0@@414| |s'#0@@125| |start#0@@43| |exceptQuery#0@@1|) (forall ((|lookup#0@@70| T@U) (|key#0@@211| T@U) (|value#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type |lookup#0@@70|) (SeqType BoxType)) (= (type |key#0@@211|) (SeqType BoxType))) (= (type |value#0@@29|) (SeqType BoxType))) (and (and ($Is |lookup#0@@70| (TSeq Tclass.BetreeGraph.ReadOp)) ($Is |key#0@@211| Tclass.KeyType.Key)) ($Is |value#0@@29| Tclass.ValueType.Value))) (and (not (|Seq#Equal| |key#0@@211| |exceptQuery#0@@1|)) (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@414|)) |key#0@@211| |value#0@@29| |lookup#0@@70| |start#0@@43|))) (exists ((|lookup'#0@@2| T@U) ) (!  (and (= (type |lookup'#0@@2|) (SeqType BoxType)) (and ($Is |lookup'#0@@2| (TSeq Tclass.BetreeGraph.ReadOp)) (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s'#0@@125|)) |key#0@@211| |value#0@@29| |lookup'#0@@2| |start#0@@43|))) :qid |BetreeInvidfy.92:14| :skolemid |4869| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s'#0@@125|)) |key#0@@211| |value#0@@29| |lookup'#0@@2| |start#0@@43|)) ))) :qid |BetreeInvidfy.91:12| :skolemid |4870| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@414|)) |key#0@@211| |value#0@@29| |lookup#0@@70| |start#0@@43|)) ))))) :qid |BetreeInvidfy.89:36| :skolemid |4873| :pattern ( (BetreeInv.__default.PreservesLookupsExcept |s#0@@414| |s'#0@@125| |start#0@@43| |exceptQuery#0@@1|)) ))))
(assert  (=> true (forall ((|s#0@@415| T@U) (|s'#0@@126| T@U) (|start#0@@44| T@U) (|exceptQuery#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@415|) DatatypeTypeType) (= (type |s'#0@@126|) DatatypeTypeType)) (= (type |start#0@@44|) BoxType)) (= (type |exceptQuery#0@@2|) (SeqType BoxType))) (or (|BetreeInv.__default.PreservesLookupsExcept#canCall| (Lit |s#0@@415|) (Lit |s'#0@@126|) |start#0@@44| (Lit |exceptQuery#0@@2|)) (and (and (and ($Is |s#0@@415| Tclass.Betree.Variables) ($Is |s'#0@@126| Tclass.Betree.Variables)) ($IsBox |start#0@@44| Tclass.ReferenceType.Reference)) ($Is |exceptQuery#0@@2| Tclass.KeyType.Key)))) (and (forall ((|lookup#1@@7| T@U) (|key#1@@34| T@U) (|value#1@@4| T@U) ) (!  (=> (and (and (and (and (= (type |lookup#1@@7|) (SeqType BoxType)) (= (type |key#1@@34|) (SeqType BoxType))) (= (type |value#1@@4|) (SeqType BoxType))) (and (and ($Is |lookup#1@@7| (TSeq Tclass.BetreeGraph.ReadOp)) ($Is |key#1@@34| Tclass.KeyType.Key)) ($Is |value#1@@4| Tclass.ValueType.Value))) (not (|Seq#Equal| |key#1@@34| |exceptQuery#0@@2|))) (and (and (and (Betree.Variables.Variables_q (Lit |s#0@@415|)) (BetreeBlockInterface.Variables.Variables_q (Lit (Betree.Variables.bcv (Lit |s#0@@415|))))) (|BetreeInv.__default.IsSatisfyingLookupFrom#canCall| (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s#0@@415|))))) |key#1@@34| |value#1@@4| |lookup#1@@7| |start#0@@44|)) (=> (BetreeInv.__default.IsSatisfyingLookupFrom (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s#0@@415|))))) |key#1@@34| |value#1@@4| |lookup#1@@7| |start#0@@44|) (forall ((|lookup'#1@@1| T@U) ) (!  (=> (and (= (type |lookup'#1@@1|) (SeqType BoxType)) ($Is |lookup'#1@@1| (TSeq Tclass.BetreeGraph.ReadOp))) (and (and (Betree.Variables.Variables_q (Lit |s'#0@@126|)) (BetreeBlockInterface.Variables.Variables_q (Lit (Betree.Variables.bcv (Lit |s'#0@@126|))))) (|BetreeInv.__default.IsSatisfyingLookupFrom#canCall| (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s'#0@@126|))))) |key#1@@34| |value#1@@4| |lookup'#1@@1| |start#0@@44|))) :qid |BetreeInvidfy.92:14| :skolemid |4876| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s'#0@@126|)) |key#1@@34| |value#1@@4| |lookup'#1@@1| |start#0@@44|)) ))))) :qid |BetreeInvidfy.91:12| :skolemid |4877| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@415|)) |key#1@@34| |value#1@@4| |lookup#1@@7| |start#0@@44|)) )) (= (BetreeInv.__default.PreservesLookupsExcept (Lit |s#0@@415|) (Lit |s'#0@@126|) |start#0@@44| (Lit |exceptQuery#0@@2|)) (forall ((|lookup#1@@8| T@U) (|key#1@@35| T@U) (|value#1@@5| T@U) ) (!  (=> (and (and (and (and (= (type |lookup#1@@8|) (SeqType BoxType)) (= (type |key#1@@35|) (SeqType BoxType))) (= (type |value#1@@5|) (SeqType BoxType))) (and (and ($Is |lookup#1@@8| (TSeq Tclass.BetreeGraph.ReadOp)) ($Is |key#1@@35| Tclass.KeyType.Key)) ($Is |value#1@@5| Tclass.ValueType.Value))) (and (not (|Seq#Equal| |key#1@@35| |exceptQuery#0@@2|)) (BetreeInv.__default.IsSatisfyingLookupFrom (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s#0@@415|))))) |key#1@@35| |value#1@@5| |lookup#1@@8| |start#0@@44|))) (exists ((|lookup'#1@@2| T@U) ) (!  (and (= (type |lookup'#1@@2|) (SeqType BoxType)) (and ($Is |lookup'#1@@2| (TSeq Tclass.BetreeGraph.ReadOp)) (BetreeInv.__default.IsSatisfyingLookupFrom (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s'#0@@126|))))) |key#1@@35| |value#1@@5| |lookup'#1@@2| |start#0@@44|))) :qid |BetreeInvidfy.92:14| :skolemid |4874| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s'#0@@126|)) |key#1@@35| |value#1@@5| |lookup'#1@@2| |start#0@@44|)) ))) :qid |BetreeInvidfy.91:12| :skolemid |4875| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@415|)) |key#1@@35| |value#1@@5| |lookup#1@@8| |start#0@@44|)) ))))) :qid |BetreeInvidfy.89:36| :weight 3 :skolemid |4878| :pattern ( (BetreeInv.__default.PreservesLookupsExcept (Lit |s#0@@415|) (Lit |s'#0@@126|) |start#0@@44| (Lit |exceptQuery#0@@2|))) ))))
(assert  (=> true (forall ((|s#0@@416| T@U) (|s'#0@@127| T@U) (|start#0@@45| T@U) (|exceptQuery#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@416|) DatatypeTypeType) (= (type |s'#0@@127|) DatatypeTypeType)) (= (type |start#0@@45|) BoxType)) (= (type |exceptQuery#0@@3|) (SeqType BoxType))) (or (|BetreeInv.__default.PreservesLookupsExcept#canCall| (Lit |s#0@@416|) (Lit |s'#0@@127|) (Lit |start#0@@45|) (Lit |exceptQuery#0@@3|)) (and (and (and ($Is |s#0@@416| Tclass.Betree.Variables) ($Is |s'#0@@127| Tclass.Betree.Variables)) ($IsBox |start#0@@45| Tclass.ReferenceType.Reference)) ($Is |exceptQuery#0@@3| Tclass.KeyType.Key)))) (and (forall ((|lookup#2@@5| T@U) (|key#2@@13| T@U) (|value#2@@4| T@U) ) (!  (=> (and (and (and (and (= (type |lookup#2@@5|) (SeqType BoxType)) (= (type |key#2@@13|) (SeqType BoxType))) (= (type |value#2@@4|) (SeqType BoxType))) (and (and ($Is |lookup#2@@5| (TSeq Tclass.BetreeGraph.ReadOp)) ($Is |key#2@@13| Tclass.KeyType.Key)) ($Is |value#2@@4| Tclass.ValueType.Value))) (not (|Seq#Equal| |key#2@@13| |exceptQuery#0@@3|))) (and (and (and (Betree.Variables.Variables_q (Lit |s#0@@416|)) (BetreeBlockInterface.Variables.Variables_q (Lit (Betree.Variables.bcv (Lit |s#0@@416|))))) (|BetreeInv.__default.IsSatisfyingLookupFrom#canCall| (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s#0@@416|))))) |key#2@@13| |value#2@@4| |lookup#2@@5| (Lit |start#0@@45|))) (=> (BetreeInv.__default.IsSatisfyingLookupFrom (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s#0@@416|))))) |key#2@@13| |value#2@@4| |lookup#2@@5| (Lit |start#0@@45|)) (forall ((|lookup'#2@@1| T@U) ) (!  (=> (and (= (type |lookup'#2@@1|) (SeqType BoxType)) ($Is |lookup'#2@@1| (TSeq Tclass.BetreeGraph.ReadOp))) (and (and (Betree.Variables.Variables_q (Lit |s'#0@@127|)) (BetreeBlockInterface.Variables.Variables_q (Lit (Betree.Variables.bcv (Lit |s'#0@@127|))))) (|BetreeInv.__default.IsSatisfyingLookupFrom#canCall| (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s'#0@@127|))))) |key#2@@13| |value#2@@4| |lookup'#2@@1| (Lit |start#0@@45|)))) :qid |BetreeInvidfy.92:14| :skolemid |4881| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s'#0@@127|)) |key#2@@13| |value#2@@4| |lookup'#2@@1| |start#0@@45|)) ))))) :qid |BetreeInvidfy.91:12| :skolemid |4882| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@416|)) |key#2@@13| |value#2@@4| |lookup#2@@5| |start#0@@45|)) )) (= (BetreeInv.__default.PreservesLookupsExcept (Lit |s#0@@416|) (Lit |s'#0@@127|) (Lit |start#0@@45|) (Lit |exceptQuery#0@@3|)) (forall ((|lookup#2@@6| T@U) (|key#2@@14| T@U) (|value#2@@5| T@U) ) (!  (=> (and (and (and (and (= (type |lookup#2@@6|) (SeqType BoxType)) (= (type |key#2@@14|) (SeqType BoxType))) (= (type |value#2@@5|) (SeqType BoxType))) (and (and ($Is |lookup#2@@6| (TSeq Tclass.BetreeGraph.ReadOp)) ($Is |key#2@@14| Tclass.KeyType.Key)) ($Is |value#2@@5| Tclass.ValueType.Value))) (and (not (|Seq#Equal| |key#2@@14| |exceptQuery#0@@3|)) (BetreeInv.__default.IsSatisfyingLookupFrom (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s#0@@416|))))) |key#2@@14| |value#2@@5| |lookup#2@@6| (Lit |start#0@@45|)))) (exists ((|lookup'#2@@2| T@U) ) (!  (and (= (type |lookup'#2@@2|) (SeqType BoxType)) (and ($Is |lookup'#2@@2| (TSeq Tclass.BetreeGraph.ReadOp)) (BetreeInv.__default.IsSatisfyingLookupFrom (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s'#0@@127|))))) |key#2@@14| |value#2@@5| |lookup'#2@@2| (Lit |start#0@@45|)))) :qid |BetreeInvidfy.92:14| :skolemid |4879| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s'#0@@127|)) |key#2@@14| |value#2@@5| |lookup'#2@@2| |start#0@@45|)) ))) :qid |BetreeInvidfy.91:12| :skolemid |4880| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@416|)) |key#2@@14| |value#2@@5| |lookup#2@@6| |start#0@@45|)) ))))) :qid |BetreeInvidfy.89:36| :weight 3 :skolemid |4883| :pattern ( (BetreeInv.__default.PreservesLookupsExcept (Lit |s#0@@416|) (Lit |s'#0@@127|) (Lit |start#0@@45|) (Lit |exceptQuery#0@@3|))) ))))
(assert  (=> true (forall ((|s#0@@417| T@U) (|s'#0@@128| T@U) (|key#0@@212| T@U) (|value#0@@30| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@417|) DatatypeTypeType) (= (type |s'#0@@128|) DatatypeTypeType)) (= (type |key#0@@212|) (SeqType BoxType))) (= (type |value#0@@30|) (SeqType BoxType))) (or (|BetreeInv.__default.PreservesLookupsPut#canCall| |s#0@@417| |s'#0@@128| |key#0@@212| |value#0@@30|) (and (and (and ($Is |s#0@@417| Tclass.Betree.Variables) ($Is |s'#0@@128| Tclass.Betree.Variables)) ($Is |key#0@@212| Tclass.KeyType.Key)) ($Is |value#0@@30| Tclass.ValueType.Value)))) true) :qid |BetreeInvidfy.97:33| :skolemid |4884| :pattern ( (BetreeInv.__default.PreservesLookupsPut |s#0@@417| |s'#0@@128| |key#0@@212| |value#0@@30|)) ))))
(assert (forall ((|s#0@@418| T@U) (|s'#0@@129| T@U) (|key#0@@213| T@U) (|value#0@@31| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@418|) DatatypeTypeType) (= (type |s'#0@@129|) DatatypeTypeType)) (= (type |key#0@@213|) (SeqType BoxType))) (= (type |value#0@@31|) (SeqType BoxType))) (and (and (and ($Is |s#0@@418| Tclass.Betree.Variables) ($Is |s'#0@@129| Tclass.Betree.Variables)) ($Is |key#0@@213| Tclass.KeyType.Key)) ($Is |value#0@@31| Tclass.ValueType.Value))) (= (|BetreeInv.__default.PreservesLookupsPut#requires| |s#0@@418| |s'#0@@129| |key#0@@213| |value#0@@31|) true)) :qid |BetreeInvidfy.97:33| :skolemid |4885| :pattern ( (|BetreeInv.__default.PreservesLookupsPut#requires| |s#0@@418| |s'#0@@129| |key#0@@213| |value#0@@31|)) )))
(assert  (=> true (forall ((|s#0@@419| T@U) (|s'#0@@130| T@U) (|key#0@@214| T@U) (|value#0@@32| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@419|) DatatypeTypeType) (= (type |s'#0@@130|) DatatypeTypeType)) (= (type |key#0@@214|) (SeqType BoxType))) (= (type |value#0@@32|) (SeqType BoxType))) (or (|BetreeInv.__default.PreservesLookupsPut#canCall| |s#0@@419| |s'#0@@130| |key#0@@214| |value#0@@32|) (and (and (and ($Is |s#0@@419| Tclass.Betree.Variables) ($Is |s'#0@@130| Tclass.Betree.Variables)) ($Is |key#0@@214| Tclass.KeyType.Key)) ($Is |value#0@@32| Tclass.ValueType.Value)))) (and (and (and |BetreeGraph.__default.Root#canCall| (|BetreeInv.__default.PreservesLookupsExcept#canCall| |s#0@@419| |s'#0@@130| (Lit BetreeGraph.__default.Root) |key#0@@214|)) (=> (BetreeInv.__default.PreservesLookupsExcept |s#0@@419| |s'#0@@130| (Lit BetreeGraph.__default.Root) |key#0@@214|) (forall ((|lookup#0@@71| T@U) ) (!  (=> (and (= (type |lookup#0@@71|) (SeqType BoxType)) ($Is |lookup#0@@71| (TSeq Tclass.BetreeGraph.ReadOp))) (and (and (and (Betree.Variables.Variables_q |s'#0@@130|) (BetreeBlockInterface.Variables.Variables_q (Betree.Variables.bcv |s'#0@@130|))) |BetreeGraph.__default.Root#canCall|) (|BetreeInv.__default.IsSatisfyingLookupFrom#canCall| (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s'#0@@130|)) |key#0@@214| |value#0@@32| |lookup#0@@71| (Lit BetreeGraph.__default.Root)))) :qid |BetreeInvidfy.100:15| :skolemid |4887| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s'#0@@130|)) |key#0@@214| |value#0@@32| |lookup#0@@71| BetreeGraph.__default.Root)) )))) (= (BetreeInv.__default.PreservesLookupsPut |s#0@@419| |s'#0@@130| |key#0@@214| |value#0@@32|)  (and (BetreeInv.__default.PreservesLookupsExcept |s#0@@419| |s'#0@@130| (Lit BetreeGraph.__default.Root) |key#0@@214|) (exists ((|lookup#0@@72| T@U) ) (!  (and (= (type |lookup#0@@72|) (SeqType BoxType)) (and ($Is |lookup#0@@72| (TSeq Tclass.BetreeGraph.ReadOp)) (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s'#0@@130|)) |key#0@@214| |value#0@@32| |lookup#0@@72| (Lit BetreeGraph.__default.Root)))) :qid |BetreeInvidfy.100:15| :skolemid |4886| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s'#0@@130|)) |key#0@@214| |value#0@@32| |lookup#0@@72| BetreeGraph.__default.Root)) )))))) :qid |BetreeInvidfy.97:33| :skolemid |4888| :pattern ( (BetreeInv.__default.PreservesLookupsPut |s#0@@419| |s'#0@@130| |key#0@@214| |value#0@@32|)) ))))
(assert  (=> true (forall ((|s#0@@420| T@U) (|s'#0@@131| T@U) (|key#0@@215| T@U) (|value#0@@33| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@420|) DatatypeTypeType) (= (type |s'#0@@131|) DatatypeTypeType)) (= (type |key#0@@215|) (SeqType BoxType))) (= (type |value#0@@33|) (SeqType BoxType))) (or (|BetreeInv.__default.PreservesLookupsPut#canCall| (Lit |s#0@@420|) (Lit |s'#0@@131|) (Lit |key#0@@215|) (Lit |value#0@@33|)) (and (and (and ($Is |s#0@@420| Tclass.Betree.Variables) ($Is |s'#0@@131| Tclass.Betree.Variables)) ($Is |key#0@@215| Tclass.KeyType.Key)) ($Is |value#0@@33| Tclass.ValueType.Value)))) (and (and (and |BetreeGraph.__default.Root#canCall| (|BetreeInv.__default.PreservesLookupsExcept#canCall| (Lit |s#0@@420|) (Lit |s'#0@@131|) (Lit BetreeGraph.__default.Root) (Lit |key#0@@215|))) (=> (U_2_bool (Lit (bool_2_U (BetreeInv.__default.PreservesLookupsExcept (Lit |s#0@@420|) (Lit |s'#0@@131|) (Lit BetreeGraph.__default.Root) (Lit |key#0@@215|))))) (forall ((|lookup#1@@9| T@U) ) (!  (=> (and (= (type |lookup#1@@9|) (SeqType BoxType)) ($Is |lookup#1@@9| (TSeq Tclass.BetreeGraph.ReadOp))) (and (and (and (Betree.Variables.Variables_q (Lit |s'#0@@131|)) (BetreeBlockInterface.Variables.Variables_q (Lit (Betree.Variables.bcv (Lit |s'#0@@131|))))) |BetreeGraph.__default.Root#canCall|) (|BetreeInv.__default.IsSatisfyingLookupFrom#canCall| (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s'#0@@131|))))) (Lit |key#0@@215|) (Lit |value#0@@33|) |lookup#1@@9| (Lit BetreeGraph.__default.Root)))) :qid |BetreeInvidfy.100:15| :skolemid |4890| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s'#0@@131|)) |key#0@@215| |value#0@@33| |lookup#1@@9| BetreeGraph.__default.Root)) )))) (= (BetreeInv.__default.PreservesLookupsPut (Lit |s#0@@420|) (Lit |s'#0@@131|) (Lit |key#0@@215|) (Lit |value#0@@33|))  (and (BetreeInv.__default.PreservesLookupsExcept (Lit |s#0@@420|) (Lit |s'#0@@131|) (Lit BetreeGraph.__default.Root) (Lit |key#0@@215|)) (exists ((|lookup#1@@10| T@U) ) (!  (and (= (type |lookup#1@@10|) (SeqType BoxType)) (and ($Is |lookup#1@@10| (TSeq Tclass.BetreeGraph.ReadOp)) (BetreeInv.__default.IsSatisfyingLookupFrom (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s'#0@@131|))))) (Lit |key#0@@215|) (Lit |value#0@@33|) |lookup#1@@10| (Lit BetreeGraph.__default.Root)))) :qid |BetreeInvidfy.100:15| :skolemid |4889| :pattern ( (BetreeInv.__default.IsSatisfyingLookupFrom (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s'#0@@131|)) |key#0@@215| |value#0@@33| |lookup#1@@10| BetreeGraph.__default.Root)) )))))) :qid |BetreeInvidfy.97:33| :weight 3 :skolemid |4891| :pattern ( (BetreeInv.__default.PreservesLookupsPut (Lit |s#0@@420|) (Lit |s'#0@@131|) (Lit |key#0@@215|) (Lit |value#0@@33|))) ))))
(assert  (=> true (forall ((|s#0@@421| T@U) (|s'#0@@132| T@U) (|key#0@@216| T@U) (|msg#0@@16| T@U) (|oldroot#0| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@421|) DatatypeTypeType) (= (type |s'#0@@132|) DatatypeTypeType)) (= (type |key#0@@216|) (SeqType BoxType))) (= (type |msg#0@@16|) DatatypeTypeType)) (= (type |oldroot#0|) DatatypeTypeType)) (or (|BetreeInv.__default.InsertMessage#canCall| |s#0@@421| |s'#0@@132| |key#0@@216| |msg#0@@16| |oldroot#0|) (and (and (and (and ($Is |s#0@@421| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@132| Tclass.BetreeBlockInterface.Variables)) ($Is |key#0@@216| Tclass.KeyType.Key)) ($Is |msg#0@@16| Tclass.ValueMessage.Message)) ($Is |oldroot#0| Tclass.BetreeGraph.Node)))) true) :qid |BetreeInvidfy.195:27| :skolemid |4896| :pattern ( (BetreeInv.__default.InsertMessage |s#0@@421| |s'#0@@132| |key#0@@216| |msg#0@@16| |oldroot#0|)) ))))
(assert (forall ((|s#0@@422| T@U) (|s'#0@@133| T@U) (|key#0@@217| T@U) (|msg#0@@17| T@U) (|oldroot#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@422|) DatatypeTypeType) (= (type |s'#0@@133|) DatatypeTypeType)) (= (type |key#0@@217|) (SeqType BoxType))) (= (type |msg#0@@17|) DatatypeTypeType)) (= (type |oldroot#0@@0|) DatatypeTypeType)) (and (and (and (and ($Is |s#0@@422| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@133| Tclass.BetreeBlockInterface.Variables)) ($Is |key#0@@217| Tclass.KeyType.Key)) ($Is |msg#0@@17| Tclass.ValueMessage.Message)) ($Is |oldroot#0@@0| Tclass.BetreeGraph.Node))) (= (|BetreeInv.__default.InsertMessage#requires| |s#0@@422| |s'#0@@133| |key#0@@217| |msg#0@@17| |oldroot#0@@0|) true)) :qid |BetreeInvidfy.195:27| :skolemid |4897| :pattern ( (|BetreeInv.__default.InsertMessage#requires| |s#0@@422| |s'#0@@133| |key#0@@217| |msg#0@@17| |oldroot#0@@0|)) )))
(assert  (=> true (forall ((|s#0@@423| T@U) (|s'#0@@134| T@U) (|key#0@@218| T@U) (|msg#0@@18| T@U) (|oldroot#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@423|) DatatypeTypeType) (= (type |s'#0@@134|) DatatypeTypeType)) (= (type |key#0@@218|) (SeqType BoxType))) (= (type |msg#0@@18|) DatatypeTypeType)) (= (type |oldroot#0@@1|) DatatypeTypeType)) (or (|BetreeInv.__default.InsertMessage#canCall| |s#0@@423| |s'#0@@134| |key#0@@218| |msg#0@@18| |oldroot#0@@1|) (and (and (and (and ($Is |s#0@@423| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@134| Tclass.BetreeBlockInterface.Variables)) ($Is |key#0@@218| Tclass.KeyType.Key)) ($Is |msg#0@@18| Tclass.ValueMessage.Message)) ($Is |oldroot#0@@1| Tclass.BetreeGraph.Node)))) (and (and (|BetreeSpec.__default.ValidInsertion#canCall| (|#BetreeSpec.MessageInsertion.MessageInsertion| |key#0@@218| |msg#0@@18| |oldroot#0@@1|)) (=> (BetreeSpec.__default.ValidInsertion (|#BetreeSpec.MessageInsertion.MessageInsertion| |key#0@@218| |msg#0@@18| |oldroot#0@@1|)) (and (and (|BetreeSpec.__default.InsertionReads#canCall| (|#BetreeSpec.MessageInsertion.MessageInsertion| |key#0@@218| |msg#0@@18| |oldroot#0@@1|)) (|BetreeBlockInterface.__default.Reads#canCall| |s#0@@423| (BetreeSpec.__default.InsertionReads (|#BetreeSpec.MessageInsertion.MessageInsertion| |key#0@@218| |msg#0@@18| |oldroot#0@@1|)))) (=> (BetreeBlockInterface.__default.Reads |s#0@@423| (BetreeSpec.__default.InsertionReads (|#BetreeSpec.MessageInsertion.MessageInsertion| |key#0@@218| |msg#0@@18| |oldroot#0@@1|))) (and (|BetreeSpec.__default.InsertionOps#canCall| (|#BetreeSpec.MessageInsertion.MessageInsertion| |key#0@@218| |msg#0@@18| |oldroot#0@@1|)) (|BetreeBlockInterface.__default.OpTransaction#canCall| |s#0@@423| |s'#0@@134| (BetreeSpec.__default.InsertionOps (|#BetreeSpec.MessageInsertion.MessageInsertion| |key#0@@218| |msg#0@@18| |oldroot#0@@1|)))))))) (= (BetreeInv.__default.InsertMessage |s#0@@423| |s'#0@@134| |key#0@@218| |msg#0@@18| |oldroot#0@@1|)  (and (and (BetreeSpec.__default.ValidInsertion (|#BetreeSpec.MessageInsertion.MessageInsertion| |key#0@@218| |msg#0@@18| |oldroot#0@@1|)) (BetreeBlockInterface.__default.Reads |s#0@@423| (BetreeSpec.__default.InsertionReads (|#BetreeSpec.MessageInsertion.MessageInsertion| |key#0@@218| |msg#0@@18| |oldroot#0@@1|)))) (BetreeBlockInterface.__default.OpTransaction StartFuel_BetreeBlockInterface._default.OpTransaction |s#0@@423| |s'#0@@134| (BetreeSpec.__default.InsertionOps (|#BetreeSpec.MessageInsertion.MessageInsertion| |key#0@@218| |msg#0@@18| |oldroot#0@@1|))))))) :qid |BetreeInvidfy.195:27| :skolemid |4898| :pattern ( (BetreeInv.__default.InsertMessage |s#0@@423| |s'#0@@134| |key#0@@218| |msg#0@@18| |oldroot#0@@1|)) ))))
(assert  (=> true (forall ((|s#0@@424| T@U) (|s'#0@@135| T@U) (|key#0@@219| T@U) (|msg#0@@19| T@U) (|oldroot#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@424|) DatatypeTypeType) (= (type |s'#0@@135|) DatatypeTypeType)) (= (type |key#0@@219|) (SeqType BoxType))) (= (type |msg#0@@19|) DatatypeTypeType)) (= (type |oldroot#0@@2|) DatatypeTypeType)) (or (|BetreeInv.__default.InsertMessage#canCall| (Lit |s#0@@424|) (Lit |s'#0@@135|) (Lit |key#0@@219|) (Lit |msg#0@@19|) (Lit |oldroot#0@@2|)) (and (and (and (and ($Is |s#0@@424| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@135| Tclass.BetreeBlockInterface.Variables)) ($Is |key#0@@219| Tclass.KeyType.Key)) ($Is |msg#0@@19| Tclass.ValueMessage.Message)) ($Is |oldroot#0@@2| Tclass.BetreeGraph.Node)))) (and (and (|BetreeSpec.__default.ValidInsertion#canCall| (Lit (|#BetreeSpec.MessageInsertion.MessageInsertion| (Lit |key#0@@219|) (Lit |msg#0@@19|) (Lit |oldroot#0@@2|)))) (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.__default.ValidInsertion (Lit (|#BetreeSpec.MessageInsertion.MessageInsertion| (Lit |key#0@@219|) (Lit |msg#0@@19|) (Lit |oldroot#0@@2|))))))) (and (and (|BetreeSpec.__default.InsertionReads#canCall| (Lit (|#BetreeSpec.MessageInsertion.MessageInsertion| (Lit |key#0@@219|) (Lit |msg#0@@19|) (Lit |oldroot#0@@2|)))) (|BetreeBlockInterface.__default.Reads#canCall| (Lit |s#0@@424|) (Lit (BetreeSpec.__default.InsertionReads (Lit (|#BetreeSpec.MessageInsertion.MessageInsertion| (Lit |key#0@@219|) (Lit |msg#0@@19|) (Lit |oldroot#0@@2|))))))) (=> (U_2_bool (Lit (bool_2_U (BetreeBlockInterface.__default.Reads (Lit |s#0@@424|) (Lit (BetreeSpec.__default.InsertionReads (Lit (|#BetreeSpec.MessageInsertion.MessageInsertion| (Lit |key#0@@219|) (Lit |msg#0@@19|) (Lit |oldroot#0@@2|))))))))) (and (|BetreeSpec.__default.InsertionOps#canCall| (Lit (|#BetreeSpec.MessageInsertion.MessageInsertion| (Lit |key#0@@219|) (Lit |msg#0@@19|) (Lit |oldroot#0@@2|)))) (|BetreeBlockInterface.__default.OpTransaction#canCall| (Lit |s#0@@424|) (Lit |s'#0@@135|) (Lit (BetreeSpec.__default.InsertionOps (Lit (|#BetreeSpec.MessageInsertion.MessageInsertion| (Lit |key#0@@219|) (Lit |msg#0@@19|) (Lit |oldroot#0@@2|))))))))))) (= (BetreeInv.__default.InsertMessage (Lit |s#0@@424|) (Lit |s'#0@@135|) (Lit |key#0@@219|) (Lit |msg#0@@19|) (Lit |oldroot#0@@2|))  (and (and (BetreeSpec.__default.ValidInsertion (Lit (|#BetreeSpec.MessageInsertion.MessageInsertion| (Lit |key#0@@219|) (Lit |msg#0@@19|) (Lit |oldroot#0@@2|)))) (BetreeBlockInterface.__default.Reads (Lit |s#0@@424|) (Lit (BetreeSpec.__default.InsertionReads (Lit (|#BetreeSpec.MessageInsertion.MessageInsertion| (Lit |key#0@@219|) (Lit |msg#0@@19|) (Lit |oldroot#0@@2|))))))) (BetreeBlockInterface.__default.OpTransaction StartFuel_BetreeBlockInterface._default.OpTransaction (Lit |s#0@@424|) (Lit |s'#0@@135|) (Lit (BetreeSpec.__default.InsertionOps (Lit (|#BetreeSpec.MessageInsertion.MessageInsertion| (Lit |key#0@@219|) (Lit |msg#0@@19|) (Lit |oldroot#0@@2|)))))))))) :qid |BetreeInvidfy.195:27| :weight 3 :skolemid |4899| :pattern ( (BetreeInv.__default.InsertMessage (Lit |s#0@@424|) (Lit |s'#0@@135|) (Lit |key#0@@219|) (Lit |msg#0@@19|) (Lit |oldroot#0@@2|))) ))))
(assert  (=> true (forall ((|s#0@@425| T@U) (|s'#0@@136| T@U) (|flush#0@@14| T@U) ) (!  (=> (and (and (and (= (type |s#0@@425|) DatatypeTypeType) (= (type |s'#0@@136|) DatatypeTypeType)) (= (type |flush#0@@14|) DatatypeTypeType)) (or (|BetreeInv.__default.Flush#canCall| |s#0@@425| |s'#0@@136| |flush#0@@14|) (and (and ($Is |s#0@@425| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@136| Tclass.BetreeBlockInterface.Variables)) ($Is |flush#0@@14| Tclass.BetreeSpec.NodeFlush)))) true) :qid |BetreeInvidfy.202:19| :skolemid |4900| :pattern ( (BetreeInv.__default.Flush |s#0@@425| |s'#0@@136| |flush#0@@14|)) ))))
(assert (forall ((|s#0@@426| T@U) (|s'#0@@137| T@U) (|flush#0@@15| T@U) ) (!  (=> (and (and (and (= (type |s#0@@426|) DatatypeTypeType) (= (type |s'#0@@137|) DatatypeTypeType)) (= (type |flush#0@@15|) DatatypeTypeType)) (and (and ($Is |s#0@@426| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@137| Tclass.BetreeBlockInterface.Variables)) ($Is |flush#0@@15| Tclass.BetreeSpec.NodeFlush))) (= (|BetreeInv.__default.Flush#requires| |s#0@@426| |s'#0@@137| |flush#0@@15|) true)) :qid |BetreeInvidfy.202:19| :skolemid |4901| :pattern ( (|BetreeInv.__default.Flush#requires| |s#0@@426| |s'#0@@137| |flush#0@@15|)) )))
(assert  (=> true (forall ((|s#0@@427| T@U) (|s'#0@@138| T@U) (|flush#0@@16| T@U) ) (!  (=> (and (and (and (= (type |s#0@@427|) DatatypeTypeType) (= (type |s'#0@@138|) DatatypeTypeType)) (= (type |flush#0@@16|) DatatypeTypeType)) (or (|BetreeInv.__default.Flush#canCall| |s#0@@427| |s'#0@@138| |flush#0@@16|) (and (and ($Is |s#0@@427| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@138| Tclass.BetreeBlockInterface.Variables)) ($Is |flush#0@@16| Tclass.BetreeSpec.NodeFlush)))) (and (and (|BetreeSpec.__default.ValidFlush#canCall| |flush#0@@16|) (=> (BetreeSpec.__default.ValidFlush |flush#0@@16|) (and (and (|BetreeSpec.__default.FlushReads#canCall| |flush#0@@16|) (|BetreeBlockInterface.__default.Reads#canCall| |s#0@@427| (BetreeSpec.__default.FlushReads |flush#0@@16|))) (=> (BetreeBlockInterface.__default.Reads |s#0@@427| (BetreeSpec.__default.FlushReads |flush#0@@16|)) (and (|BetreeSpec.__default.FlushOps#canCall| |flush#0@@16|) (|BetreeBlockInterface.__default.OpTransaction#canCall| |s#0@@427| |s'#0@@138| (BetreeSpec.__default.FlushOps |flush#0@@16|))))))) (= (BetreeInv.__default.Flush |s#0@@427| |s'#0@@138| |flush#0@@16|)  (and (and (BetreeSpec.__default.ValidFlush |flush#0@@16|) (BetreeBlockInterface.__default.Reads |s#0@@427| (BetreeSpec.__default.FlushReads |flush#0@@16|))) (BetreeBlockInterface.__default.OpTransaction StartFuel_BetreeBlockInterface._default.OpTransaction |s#0@@427| |s'#0@@138| (BetreeSpec.__default.FlushOps |flush#0@@16|)))))) :qid |BetreeInvidfy.202:19| :skolemid |4902| :pattern ( (BetreeInv.__default.Flush |s#0@@427| |s'#0@@138| |flush#0@@16|)) ))))
(assert  (=> true (forall ((|s#0@@428| T@U) (|s'#0@@139| T@U) (|flush#0@@17| T@U) ) (!  (=> (and (and (and (= (type |s#0@@428|) DatatypeTypeType) (= (type |s'#0@@139|) DatatypeTypeType)) (= (type |flush#0@@17|) DatatypeTypeType)) (or (|BetreeInv.__default.Flush#canCall| (Lit |s#0@@428|) (Lit |s'#0@@139|) (Lit |flush#0@@17|)) (and (and ($Is |s#0@@428| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@139| Tclass.BetreeBlockInterface.Variables)) ($Is |flush#0@@17| Tclass.BetreeSpec.NodeFlush)))) (and (and (|BetreeSpec.__default.ValidFlush#canCall| (Lit |flush#0@@17|)) (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.__default.ValidFlush (Lit |flush#0@@17|))))) (and (and (|BetreeSpec.__default.FlushReads#canCall| (Lit |flush#0@@17|)) (|BetreeBlockInterface.__default.Reads#canCall| (Lit |s#0@@428|) (Lit (BetreeSpec.__default.FlushReads (Lit |flush#0@@17|))))) (=> (U_2_bool (Lit (bool_2_U (BetreeBlockInterface.__default.Reads (Lit |s#0@@428|) (Lit (BetreeSpec.__default.FlushReads (Lit |flush#0@@17|))))))) (and (|BetreeSpec.__default.FlushOps#canCall| (Lit |flush#0@@17|)) (|BetreeBlockInterface.__default.OpTransaction#canCall| (Lit |s#0@@428|) (Lit |s'#0@@139|) (Lit (BetreeSpec.__default.FlushOps (Lit |flush#0@@17|))))))))) (= (BetreeInv.__default.Flush (Lit |s#0@@428|) (Lit |s'#0@@139|) (Lit |flush#0@@17|))  (and (and (BetreeSpec.__default.ValidFlush (Lit |flush#0@@17|)) (BetreeBlockInterface.__default.Reads (Lit |s#0@@428|) (Lit (BetreeSpec.__default.FlushReads (Lit |flush#0@@17|))))) (BetreeBlockInterface.__default.OpTransaction StartFuel_BetreeBlockInterface._default.OpTransaction (Lit |s#0@@428|) (Lit |s'#0@@139|) (Lit (BetreeSpec.__default.FlushOps (Lit |flush#0@@17|)))))))) :qid |BetreeInvidfy.202:19| :weight 3 :skolemid |4903| :pattern ( (BetreeInv.__default.Flush (Lit |s#0@@428|) (Lit |s'#0@@139|) (Lit |flush#0@@17|))) ))))
(assert  (=> true (forall ((|s#0@@429| T@U) (|s'#0@@140| T@U) (|oldroot#0@@3| T@U) (|newchildref#0| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@429|) DatatypeTypeType) (= (type |s'#0@@140|) DatatypeTypeType)) (= (type |oldroot#0@@3|) DatatypeTypeType)) (= (type |newchildref#0|) BoxType)) (or (|BetreeInv.__default.Grow#canCall| |s#0@@429| |s'#0@@140| |oldroot#0@@3| |newchildref#0|) (and (and (and ($Is |s#0@@429| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@140| Tclass.BetreeBlockInterface.Variables)) ($Is |oldroot#0@@3| Tclass.BetreeGraph.Node)) ($IsBox |newchildref#0| Tclass.ReferenceType.Reference)))) true) :qid |BetreeInvidfy.209:18| :skolemid |4904| :pattern ( (BetreeInv.__default.Grow |s#0@@429| |s'#0@@140| |oldroot#0@@3| |newchildref#0|)) ))))
(assert (forall ((|s#0@@430| T@U) (|s'#0@@141| T@U) (|oldroot#0@@4| T@U) (|newchildref#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@430|) DatatypeTypeType) (= (type |s'#0@@141|) DatatypeTypeType)) (= (type |oldroot#0@@4|) DatatypeTypeType)) (= (type |newchildref#0@@0|) BoxType)) (and (and (and ($Is |s#0@@430| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@141| Tclass.BetreeBlockInterface.Variables)) ($Is |oldroot#0@@4| Tclass.BetreeGraph.Node)) ($IsBox |newchildref#0@@0| Tclass.ReferenceType.Reference))) (= (|BetreeInv.__default.Grow#requires| |s#0@@430| |s'#0@@141| |oldroot#0@@4| |newchildref#0@@0|) true)) :qid |BetreeInvidfy.209:18| :skolemid |4905| :pattern ( (|BetreeInv.__default.Grow#requires| |s#0@@430| |s'#0@@141| |oldroot#0@@4| |newchildref#0@@0|)) )))
(assert  (=> true (forall ((|s#0@@431| T@U) (|s'#0@@142| T@U) (|oldroot#0@@5| T@U) (|newchildref#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@431|) DatatypeTypeType) (= (type |s'#0@@142|) DatatypeTypeType)) (= (type |oldroot#0@@5|) DatatypeTypeType)) (= (type |newchildref#0@@1|) BoxType)) (or (|BetreeInv.__default.Grow#canCall| |s#0@@431| |s'#0@@142| |oldroot#0@@5| |newchildref#0@@1|) (and (and (and ($Is |s#0@@431| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@142| Tclass.BetreeBlockInterface.Variables)) ($Is |oldroot#0@@5| Tclass.BetreeGraph.Node)) ($IsBox |newchildref#0@@1| Tclass.ReferenceType.Reference)))) (and (and (|BetreeSpec.__default.ValidGrow#canCall| (|#BetreeSpec.RootGrowth.RootGrowth| |oldroot#0@@5| |newchildref#0@@1|)) (=> (BetreeSpec.__default.ValidGrow (|#BetreeSpec.RootGrowth.RootGrowth| |oldroot#0@@5| |newchildref#0@@1|)) (and (and (|BetreeSpec.__default.GrowReads#canCall| (|#BetreeSpec.RootGrowth.RootGrowth| |oldroot#0@@5| |newchildref#0@@1|)) (|BetreeBlockInterface.__default.Reads#canCall| |s#0@@431| (BetreeSpec.__default.GrowReads (|#BetreeSpec.RootGrowth.RootGrowth| |oldroot#0@@5| |newchildref#0@@1|)))) (=> (BetreeBlockInterface.__default.Reads |s#0@@431| (BetreeSpec.__default.GrowReads (|#BetreeSpec.RootGrowth.RootGrowth| |oldroot#0@@5| |newchildref#0@@1|))) (and (|BetreeSpec.__default.GrowOps#canCall| (|#BetreeSpec.RootGrowth.RootGrowth| |oldroot#0@@5| |newchildref#0@@1|)) (|BetreeBlockInterface.__default.OpTransaction#canCall| |s#0@@431| |s'#0@@142| (BetreeSpec.__default.GrowOps (|#BetreeSpec.RootGrowth.RootGrowth| |oldroot#0@@5| |newchildref#0@@1|)))))))) (= (BetreeInv.__default.Grow |s#0@@431| |s'#0@@142| |oldroot#0@@5| |newchildref#0@@1|)  (and (and (BetreeSpec.__default.ValidGrow (|#BetreeSpec.RootGrowth.RootGrowth| |oldroot#0@@5| |newchildref#0@@1|)) (BetreeBlockInterface.__default.Reads |s#0@@431| (BetreeSpec.__default.GrowReads (|#BetreeSpec.RootGrowth.RootGrowth| |oldroot#0@@5| |newchildref#0@@1|)))) (BetreeBlockInterface.__default.OpTransaction StartFuel_BetreeBlockInterface._default.OpTransaction |s#0@@431| |s'#0@@142| (BetreeSpec.__default.GrowOps (|#BetreeSpec.RootGrowth.RootGrowth| |oldroot#0@@5| |newchildref#0@@1|))))))) :qid |BetreeInvidfy.209:18| :skolemid |4906| :pattern ( (BetreeInv.__default.Grow |s#0@@431| |s'#0@@142| |oldroot#0@@5| |newchildref#0@@1|)) ))))
(assert  (=> true (forall ((|s#0@@432| T@U) (|s'#0@@143| T@U) (|oldroot#0@@6| T@U) (|newchildref#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@432|) DatatypeTypeType) (= (type |s'#0@@143|) DatatypeTypeType)) (= (type |oldroot#0@@6|) DatatypeTypeType)) (= (type |newchildref#0@@2|) BoxType)) (or (|BetreeInv.__default.Grow#canCall| (Lit |s#0@@432|) (Lit |s'#0@@143|) (Lit |oldroot#0@@6|) |newchildref#0@@2|) (and (and (and ($Is |s#0@@432| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@143| Tclass.BetreeBlockInterface.Variables)) ($Is |oldroot#0@@6| Tclass.BetreeGraph.Node)) ($IsBox |newchildref#0@@2| Tclass.ReferenceType.Reference)))) (and (and (|BetreeSpec.__default.ValidGrow#canCall| (|#BetreeSpec.RootGrowth.RootGrowth| (Lit |oldroot#0@@6|) |newchildref#0@@2|)) (=> (BetreeSpec.__default.ValidGrow (|#BetreeSpec.RootGrowth.RootGrowth| (Lit |oldroot#0@@6|) |newchildref#0@@2|)) (and (and (|BetreeSpec.__default.GrowReads#canCall| (|#BetreeSpec.RootGrowth.RootGrowth| (Lit |oldroot#0@@6|) |newchildref#0@@2|)) (|BetreeBlockInterface.__default.Reads#canCall| (Lit |s#0@@432|) (BetreeSpec.__default.GrowReads (|#BetreeSpec.RootGrowth.RootGrowth| (Lit |oldroot#0@@6|) |newchildref#0@@2|)))) (=> (BetreeBlockInterface.__default.Reads (Lit |s#0@@432|) (BetreeSpec.__default.GrowReads (|#BetreeSpec.RootGrowth.RootGrowth| (Lit |oldroot#0@@6|) |newchildref#0@@2|))) (and (|BetreeSpec.__default.GrowOps#canCall| (|#BetreeSpec.RootGrowth.RootGrowth| (Lit |oldroot#0@@6|) |newchildref#0@@2|)) (|BetreeBlockInterface.__default.OpTransaction#canCall| (Lit |s#0@@432|) (Lit |s'#0@@143|) (BetreeSpec.__default.GrowOps (|#BetreeSpec.RootGrowth.RootGrowth| (Lit |oldroot#0@@6|) |newchildref#0@@2|)))))))) (= (BetreeInv.__default.Grow (Lit |s#0@@432|) (Lit |s'#0@@143|) (Lit |oldroot#0@@6|) |newchildref#0@@2|)  (and (and (BetreeSpec.__default.ValidGrow (|#BetreeSpec.RootGrowth.RootGrowth| (Lit |oldroot#0@@6|) |newchildref#0@@2|)) (BetreeBlockInterface.__default.Reads (Lit |s#0@@432|) (BetreeSpec.__default.GrowReads (|#BetreeSpec.RootGrowth.RootGrowth| (Lit |oldroot#0@@6|) |newchildref#0@@2|)))) (BetreeBlockInterface.__default.OpTransaction StartFuel_BetreeBlockInterface._default.OpTransaction (Lit |s#0@@432|) (Lit |s'#0@@143|) (BetreeSpec.__default.GrowOps (|#BetreeSpec.RootGrowth.RootGrowth| (Lit |oldroot#0@@6|) |newchildref#0@@2|))))))) :qid |BetreeInvidfy.209:18| :weight 3 :skolemid |4907| :pattern ( (BetreeInv.__default.Grow (Lit |s#0@@432|) (Lit |s'#0@@143|) (Lit |oldroot#0@@6|) |newchildref#0@@2|)) ))))
(assert  (=> true (forall ((|s#0@@433| T@U) (|s'#0@@144| T@U) (|oldroot#0@@7| T@U) (|newchildref#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@433|) DatatypeTypeType) (= (type |s'#0@@144|) DatatypeTypeType)) (= (type |oldroot#0@@7|) DatatypeTypeType)) (= (type |newchildref#0@@3|) BoxType)) (or (|BetreeInv.__default.Grow#canCall| (Lit |s#0@@433|) (Lit |s'#0@@144|) (Lit |oldroot#0@@7|) (Lit |newchildref#0@@3|)) (and (and (and ($Is |s#0@@433| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@144| Tclass.BetreeBlockInterface.Variables)) ($Is |oldroot#0@@7| Tclass.BetreeGraph.Node)) ($IsBox |newchildref#0@@3| Tclass.ReferenceType.Reference)))) (and (and (|BetreeSpec.__default.ValidGrow#canCall| (Lit (|#BetreeSpec.RootGrowth.RootGrowth| (Lit |oldroot#0@@7|) (Lit |newchildref#0@@3|)))) (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.__default.ValidGrow (Lit (|#BetreeSpec.RootGrowth.RootGrowth| (Lit |oldroot#0@@7|) (Lit |newchildref#0@@3|))))))) (and (and (|BetreeSpec.__default.GrowReads#canCall| (Lit (|#BetreeSpec.RootGrowth.RootGrowth| (Lit |oldroot#0@@7|) (Lit |newchildref#0@@3|)))) (|BetreeBlockInterface.__default.Reads#canCall| (Lit |s#0@@433|) (Lit (BetreeSpec.__default.GrowReads (Lit (|#BetreeSpec.RootGrowth.RootGrowth| (Lit |oldroot#0@@7|) (Lit |newchildref#0@@3|))))))) (=> (U_2_bool (Lit (bool_2_U (BetreeBlockInterface.__default.Reads (Lit |s#0@@433|) (Lit (BetreeSpec.__default.GrowReads (Lit (|#BetreeSpec.RootGrowth.RootGrowth| (Lit |oldroot#0@@7|) (Lit |newchildref#0@@3|))))))))) (and (|BetreeSpec.__default.GrowOps#canCall| (Lit (|#BetreeSpec.RootGrowth.RootGrowth| (Lit |oldroot#0@@7|) (Lit |newchildref#0@@3|)))) (|BetreeBlockInterface.__default.OpTransaction#canCall| (Lit |s#0@@433|) (Lit |s'#0@@144|) (Lit (BetreeSpec.__default.GrowOps (Lit (|#BetreeSpec.RootGrowth.RootGrowth| (Lit |oldroot#0@@7|) (Lit |newchildref#0@@3|))))))))))) (= (BetreeInv.__default.Grow (Lit |s#0@@433|) (Lit |s'#0@@144|) (Lit |oldroot#0@@7|) (Lit |newchildref#0@@3|))  (and (and (BetreeSpec.__default.ValidGrow (Lit (|#BetreeSpec.RootGrowth.RootGrowth| (Lit |oldroot#0@@7|) (Lit |newchildref#0@@3|)))) (BetreeBlockInterface.__default.Reads (Lit |s#0@@433|) (Lit (BetreeSpec.__default.GrowReads (Lit (|#BetreeSpec.RootGrowth.RootGrowth| (Lit |oldroot#0@@7|) (Lit |newchildref#0@@3|))))))) (BetreeBlockInterface.__default.OpTransaction StartFuel_BetreeBlockInterface._default.OpTransaction (Lit |s#0@@433|) (Lit |s'#0@@144|) (Lit (BetreeSpec.__default.GrowOps (Lit (|#BetreeSpec.RootGrowth.RootGrowth| (Lit |oldroot#0@@7|) (Lit |newchildref#0@@3|)))))))))) :qid |BetreeInvidfy.209:18| :weight 3 :skolemid |4908| :pattern ( (BetreeInv.__default.Grow (Lit |s#0@@433|) (Lit |s'#0@@144|) (Lit |oldroot#0@@7|) (Lit |newchildref#0@@3|))) ))))
(assert  (=> true (forall ((|s#0@@434| T@U) (|s'#0@@145| T@U) (|redirect#0@@28| T@U) ) (!  (=> (and (and (and (= (type |s#0@@434|) DatatypeTypeType) (= (type |s'#0@@145|) DatatypeTypeType)) (= (type |redirect#0@@28|) DatatypeTypeType)) (or (|BetreeInv.__default.Redirect#canCall| |s#0@@434| |s'#0@@145| |redirect#0@@28|) (and (and ($Is |s#0@@434| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@145| Tclass.BetreeBlockInterface.Variables)) ($Is |redirect#0@@28| Tclass.BetreeSpec.Redirect)))) true) :qid |BetreeInvidfy.216:22| :skolemid |4909| :pattern ( (BetreeInv.__default.Redirect |s#0@@434| |s'#0@@145| |redirect#0@@28|)) ))))
(assert (forall ((|s#0@@435| T@U) (|s'#0@@146| T@U) (|redirect#0@@29| T@U) ) (!  (=> (and (and (and (= (type |s#0@@435|) DatatypeTypeType) (= (type |s'#0@@146|) DatatypeTypeType)) (= (type |redirect#0@@29|) DatatypeTypeType)) (and (and ($Is |s#0@@435| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@146| Tclass.BetreeBlockInterface.Variables)) ($Is |redirect#0@@29| Tclass.BetreeSpec.Redirect))) (= (|BetreeInv.__default.Redirect#requires| |s#0@@435| |s'#0@@146| |redirect#0@@29|) true)) :qid |BetreeInvidfy.216:22| :skolemid |4910| :pattern ( (|BetreeInv.__default.Redirect#requires| |s#0@@435| |s'#0@@146| |redirect#0@@29|)) )))
(assert  (=> true (forall ((|s#0@@436| T@U) (|s'#0@@147| T@U) (|redirect#0@@30| T@U) ) (!  (=> (and (and (and (= (type |s#0@@436|) DatatypeTypeType) (= (type |s'#0@@147|) DatatypeTypeType)) (= (type |redirect#0@@30|) DatatypeTypeType)) (or (|BetreeInv.__default.Redirect#canCall| |s#0@@436| |s'#0@@147| |redirect#0@@30|) (and (and ($Is |s#0@@436| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@147| Tclass.BetreeBlockInterface.Variables)) ($Is |redirect#0@@30| Tclass.BetreeSpec.Redirect)))) (and (and (|BetreeSpec.__default.ValidRedirect#canCall| |redirect#0@@30|) (=> (BetreeSpec.__default.ValidRedirect |redirect#0@@30|) (and (and (|BetreeSpec.__default.RedirectReads#canCall| |redirect#0@@30|) (|BetreeBlockInterface.__default.Reads#canCall| |s#0@@436| (BetreeSpec.__default.RedirectReads StartFuel_BetreeSpec._default.RedirectReads |redirect#0@@30|))) (=> (BetreeBlockInterface.__default.Reads |s#0@@436| (BetreeSpec.__default.RedirectReads StartFuel_BetreeSpec._default.RedirectReads |redirect#0@@30|)) (and (|BetreeSpec.__default.RedirectOps#canCall| |redirect#0@@30|) (|BetreeBlockInterface.__default.OpTransaction#canCall| |s#0@@436| |s'#0@@147| (BetreeSpec.__default.RedirectOps StartFuel_BetreeSpec._default.RedirectOps |redirect#0@@30|))))))) (= (BetreeInv.__default.Redirect |s#0@@436| |s'#0@@147| |redirect#0@@30|)  (and (and (BetreeSpec.__default.ValidRedirect |redirect#0@@30|) (BetreeBlockInterface.__default.Reads |s#0@@436| (BetreeSpec.__default.RedirectReads StartFuel_BetreeSpec._default.RedirectReads |redirect#0@@30|))) (BetreeBlockInterface.__default.OpTransaction StartFuel_BetreeBlockInterface._default.OpTransaction |s#0@@436| |s'#0@@147| (BetreeSpec.__default.RedirectOps StartFuel_BetreeSpec._default.RedirectOps |redirect#0@@30|)))))) :qid |BetreeInvidfy.216:22| :skolemid |4911| :pattern ( (BetreeInv.__default.Redirect |s#0@@436| |s'#0@@147| |redirect#0@@30|)) ))))
(assert  (=> true (forall ((|s#0@@437| T@U) (|s'#0@@148| T@U) (|redirect#0@@31| T@U) ) (!  (=> (and (and (and (= (type |s#0@@437|) DatatypeTypeType) (= (type |s'#0@@148|) DatatypeTypeType)) (= (type |redirect#0@@31|) DatatypeTypeType)) (or (|BetreeInv.__default.Redirect#canCall| (Lit |s#0@@437|) (Lit |s'#0@@148|) (Lit |redirect#0@@31|)) (and (and ($Is |s#0@@437| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@148| Tclass.BetreeBlockInterface.Variables)) ($Is |redirect#0@@31| Tclass.BetreeSpec.Redirect)))) (and (and (|BetreeSpec.__default.ValidRedirect#canCall| (Lit |redirect#0@@31|)) (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.__default.ValidRedirect (Lit |redirect#0@@31|))))) (and (and (|BetreeSpec.__default.RedirectReads#canCall| (Lit |redirect#0@@31|)) (|BetreeBlockInterface.__default.Reads#canCall| (Lit |s#0@@437|) (BetreeSpec.__default.RedirectReads StartFuel_BetreeSpec._default.RedirectReads (Lit |redirect#0@@31|)))) (=> (BetreeBlockInterface.__default.Reads (Lit |s#0@@437|) (BetreeSpec.__default.RedirectReads StartFuel_BetreeSpec._default.RedirectReads (Lit |redirect#0@@31|))) (and (|BetreeSpec.__default.RedirectOps#canCall| (Lit |redirect#0@@31|)) (|BetreeBlockInterface.__default.OpTransaction#canCall| (Lit |s#0@@437|) (Lit |s'#0@@148|) (BetreeSpec.__default.RedirectOps StartFuel_BetreeSpec._default.RedirectOps (Lit |redirect#0@@31|)))))))) (= (BetreeInv.__default.Redirect (Lit |s#0@@437|) (Lit |s'#0@@148|) (Lit |redirect#0@@31|))  (and (and (BetreeSpec.__default.ValidRedirect (Lit |redirect#0@@31|)) (BetreeBlockInterface.__default.Reads (Lit |s#0@@437|) (BetreeSpec.__default.RedirectReads StartFuel_BetreeSpec._default.RedirectReads (Lit |redirect#0@@31|)))) (BetreeBlockInterface.__default.OpTransaction StartFuel_BetreeBlockInterface._default.OpTransaction (Lit |s#0@@437|) (Lit |s'#0@@148|) (BetreeSpec.__default.RedirectOps StartFuel_BetreeSpec._default.RedirectOps (Lit |redirect#0@@31|))))))) :qid |BetreeInvidfy.216:22| :weight 3 :skolemid |4912| :pattern ( (BetreeInv.__default.Redirect (Lit |s#0@@437|) (Lit |s'#0@@148|) (Lit |redirect#0@@31|))) ))))
(assert  (=> true (forall ((|s#0@@438| T@U) (|s'#0@@149| T@U) (|key#0@@220| T@U) (|value#0@@34| T@U) (|lookup#0@@73| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@438|) DatatypeTypeType) (= (type |s'#0@@149|) DatatypeTypeType)) (= (type |key#0@@220|) (SeqType BoxType))) (= (type |value#0@@34|) (SeqType BoxType))) (= (type |lookup#0@@73|) (SeqType BoxType))) (or (|BetreeInv.__default.Query#canCall| |s#0@@438| |s'#0@@149| |key#0@@220| |value#0@@34| |lookup#0@@73|) (and (and (and (and ($Is |s#0@@438| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@149| Tclass.BetreeBlockInterface.Variables)) ($Is |key#0@@220| Tclass.KeyType.Key)) ($Is |value#0@@34| Tclass.ValueType.Value)) ($Is |lookup#0@@73| (TSeq Tclass.BetreeGraph.ReadOp))))) true) :qid |BetreeInvidfy.223:19| :skolemid |4913| :pattern ( (BetreeInv.__default.Query |s#0@@438| |s'#0@@149| |key#0@@220| |value#0@@34| |lookup#0@@73|)) ))))
(assert (forall ((|s#0@@439| T@U) (|s'#0@@150| T@U) (|key#0@@221| T@U) (|value#0@@35| T@U) (|lookup#0@@74| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@439|) DatatypeTypeType) (= (type |s'#0@@150|) DatatypeTypeType)) (= (type |key#0@@221|) (SeqType BoxType))) (= (type |value#0@@35|) (SeqType BoxType))) (= (type |lookup#0@@74|) (SeqType BoxType))) (and (and (and (and ($Is |s#0@@439| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@150| Tclass.BetreeBlockInterface.Variables)) ($Is |key#0@@221| Tclass.KeyType.Key)) ($Is |value#0@@35| Tclass.ValueType.Value)) ($Is |lookup#0@@74| (TSeq Tclass.BetreeGraph.ReadOp)))) (= (|BetreeInv.__default.Query#requires| |s#0@@439| |s'#0@@150| |key#0@@221| |value#0@@35| |lookup#0@@74|) true)) :qid |BetreeInvidfy.223:19| :skolemid |4914| :pattern ( (|BetreeInv.__default.Query#requires| |s#0@@439| |s'#0@@150| |key#0@@221| |value#0@@35| |lookup#0@@74|)) )))
(assert  (=> true (forall ((|s#0@@440| T@U) (|s'#0@@151| T@U) (|key#0@@222| T@U) (|value#0@@36| T@U) (|lookup#0@@75| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@440|) DatatypeTypeType) (= (type |s'#0@@151|) DatatypeTypeType)) (= (type |key#0@@222|) (SeqType BoxType))) (= (type |value#0@@36|) (SeqType BoxType))) (= (type |lookup#0@@75|) (SeqType BoxType))) (or (|BetreeInv.__default.Query#canCall| |s#0@@440| |s'#0@@151| |key#0@@222| |value#0@@36| |lookup#0@@75|) (and (and (and (and ($Is |s#0@@440| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@151| Tclass.BetreeBlockInterface.Variables)) ($Is |key#0@@222| Tclass.KeyType.Key)) ($Is |value#0@@36| Tclass.ValueType.Value)) ($Is |lookup#0@@75| (TSeq Tclass.BetreeGraph.ReadOp))))) (and (and (|BetreeSpec.__default.ValidQuery#canCall| (|#BetreeSpec.LookupQuery.LookupQuery| |key#0@@222| |value#0@@36| |lookup#0@@75|)) (=> (BetreeSpec.__default.ValidQuery (|#BetreeSpec.LookupQuery.LookupQuery| |key#0@@222| |value#0@@36| |lookup#0@@75|)) (and (and (|BetreeSpec.__default.QueryReads#canCall| (|#BetreeSpec.LookupQuery.LookupQuery| |key#0@@222| |value#0@@36| |lookup#0@@75|)) (|BetreeBlockInterface.__default.Reads#canCall| |s#0@@440| (BetreeSpec.__default.QueryReads (|#BetreeSpec.LookupQuery.LookupQuery| |key#0@@222| |value#0@@36| |lookup#0@@75|)))) (=> (BetreeBlockInterface.__default.Reads |s#0@@440| (BetreeSpec.__default.QueryReads (|#BetreeSpec.LookupQuery.LookupQuery| |key#0@@222| |value#0@@36| |lookup#0@@75|))) (and (|BetreeSpec.__default.QueryOps#canCall| (|#BetreeSpec.LookupQuery.LookupQuery| |key#0@@222| |value#0@@36| |lookup#0@@75|)) (|BetreeBlockInterface.__default.OpTransaction#canCall| |s#0@@440| |s'#0@@151| (BetreeSpec.__default.QueryOps (|#BetreeSpec.LookupQuery.LookupQuery| |key#0@@222| |value#0@@36| |lookup#0@@75|)))))))) (= (BetreeInv.__default.Query |s#0@@440| |s'#0@@151| |key#0@@222| |value#0@@36| |lookup#0@@75|)  (and (and (BetreeSpec.__default.ValidQuery (|#BetreeSpec.LookupQuery.LookupQuery| |key#0@@222| |value#0@@36| |lookup#0@@75|)) (BetreeBlockInterface.__default.Reads |s#0@@440| (BetreeSpec.__default.QueryReads (|#BetreeSpec.LookupQuery.LookupQuery| |key#0@@222| |value#0@@36| |lookup#0@@75|)))) (BetreeBlockInterface.__default.OpTransaction StartFuel_BetreeBlockInterface._default.OpTransaction |s#0@@440| |s'#0@@151| (BetreeSpec.__default.QueryOps (|#BetreeSpec.LookupQuery.LookupQuery| |key#0@@222| |value#0@@36| |lookup#0@@75|))))))) :qid |BetreeInvidfy.223:19| :skolemid |4915| :pattern ( (BetreeInv.__default.Query |s#0@@440| |s'#0@@151| |key#0@@222| |value#0@@36| |lookup#0@@75|)) ))))
(assert  (=> true (forall ((|s#0@@441| T@U) (|s'#0@@152| T@U) (|key#0@@223| T@U) (|value#0@@37| T@U) (|lookup#0@@76| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@441|) DatatypeTypeType) (= (type |s'#0@@152|) DatatypeTypeType)) (= (type |key#0@@223|) (SeqType BoxType))) (= (type |value#0@@37|) (SeqType BoxType))) (= (type |lookup#0@@76|) (SeqType BoxType))) (or (|BetreeInv.__default.Query#canCall| (Lit |s#0@@441|) (Lit |s'#0@@152|) (Lit |key#0@@223|) (Lit |value#0@@37|) (Lit |lookup#0@@76|)) (and (and (and (and ($Is |s#0@@441| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@152| Tclass.BetreeBlockInterface.Variables)) ($Is |key#0@@223| Tclass.KeyType.Key)) ($Is |value#0@@37| Tclass.ValueType.Value)) ($Is |lookup#0@@76| (TSeq Tclass.BetreeGraph.ReadOp))))) (and (and (|BetreeSpec.__default.ValidQuery#canCall| (Lit (|#BetreeSpec.LookupQuery.LookupQuery| (Lit |key#0@@223|) (Lit |value#0@@37|) (Lit |lookup#0@@76|)))) (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.__default.ValidQuery (Lit (|#BetreeSpec.LookupQuery.LookupQuery| (Lit |key#0@@223|) (Lit |value#0@@37|) (Lit |lookup#0@@76|))))))) (and (and (|BetreeSpec.__default.QueryReads#canCall| (Lit (|#BetreeSpec.LookupQuery.LookupQuery| (Lit |key#0@@223|) (Lit |value#0@@37|) (Lit |lookup#0@@76|)))) (|BetreeBlockInterface.__default.Reads#canCall| (Lit |s#0@@441|) (Lit (BetreeSpec.__default.QueryReads (Lit (|#BetreeSpec.LookupQuery.LookupQuery| (Lit |key#0@@223|) (Lit |value#0@@37|) (Lit |lookup#0@@76|))))))) (=> (U_2_bool (Lit (bool_2_U (BetreeBlockInterface.__default.Reads (Lit |s#0@@441|) (Lit (BetreeSpec.__default.QueryReads (Lit (|#BetreeSpec.LookupQuery.LookupQuery| (Lit |key#0@@223|) (Lit |value#0@@37|) (Lit |lookup#0@@76|))))))))) (and (|BetreeSpec.__default.QueryOps#canCall| (Lit (|#BetreeSpec.LookupQuery.LookupQuery| (Lit |key#0@@223|) (Lit |value#0@@37|) (Lit |lookup#0@@76|)))) (|BetreeBlockInterface.__default.OpTransaction#canCall| (Lit |s#0@@441|) (Lit |s'#0@@152|) (Lit (BetreeSpec.__default.QueryOps (Lit (|#BetreeSpec.LookupQuery.LookupQuery| (Lit |key#0@@223|) (Lit |value#0@@37|) (Lit |lookup#0@@76|))))))))))) (= (BetreeInv.__default.Query (Lit |s#0@@441|) (Lit |s'#0@@152|) (Lit |key#0@@223|) (Lit |value#0@@37|) (Lit |lookup#0@@76|))  (and (and (BetreeSpec.__default.ValidQuery (Lit (|#BetreeSpec.LookupQuery.LookupQuery| (Lit |key#0@@223|) (Lit |value#0@@37|) (Lit |lookup#0@@76|)))) (BetreeBlockInterface.__default.Reads (Lit |s#0@@441|) (Lit (BetreeSpec.__default.QueryReads (Lit (|#BetreeSpec.LookupQuery.LookupQuery| (Lit |key#0@@223|) (Lit |value#0@@37|) (Lit |lookup#0@@76|))))))) (BetreeBlockInterface.__default.OpTransaction StartFuel_BetreeBlockInterface._default.OpTransaction (Lit |s#0@@441|) (Lit |s'#0@@152|) (Lit (BetreeSpec.__default.QueryOps (Lit (|#BetreeSpec.LookupQuery.LookupQuery| (Lit |key#0@@223|) (Lit |value#0@@37|) (Lit |lookup#0@@76|)))))))))) :qid |BetreeInvidfy.223:19| :weight 3 :skolemid |4916| :pattern ( (BetreeInv.__default.Query (Lit |s#0@@441|) (Lit |s'#0@@152|) (Lit |key#0@@223|) (Lit |value#0@@37|) (Lit |lookup#0@@76|))) ))))
(assert  (=> true (forall ((|s#0@@442| T@U) (|s'#0@@153| T@U) (|redirect#0@@32| T@U) ) (!  (=> (and (and (and (= (type |s#0@@442|) DatatypeTypeType) (= (type |s'#0@@153|) DatatypeTypeType)) (= (type |redirect#0@@32|) DatatypeTypeType)) (or (|BetreeInv.__default.QueryDescent#canCall| |s#0@@442| |s'#0@@153| |redirect#0@@32|) (and (and ($Is |s#0@@442| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@153| Tclass.BetreeBlockInterface.Variables)) ($Is |redirect#0@@32| Tclass.BetreeSpec.Redirect)))) true) :qid |BetreeInvidfy.230:26| :skolemid |4917| :pattern ( (BetreeInv.__default.QueryDescent |s#0@@442| |s'#0@@153| |redirect#0@@32|)) ))))
(assert (forall ((|s#0@@443| T@U) (|s'#0@@154| T@U) (|redirect#0@@33| T@U) ) (!  (=> (and (and (and (= (type |s#0@@443|) DatatypeTypeType) (= (type |s'#0@@154|) DatatypeTypeType)) (= (type |redirect#0@@33|) DatatypeTypeType)) (and (and ($Is |s#0@@443| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@154| Tclass.BetreeBlockInterface.Variables)) ($Is |redirect#0@@33| Tclass.BetreeSpec.Redirect))) (= (|BetreeInv.__default.QueryDescent#requires| |s#0@@443| |s'#0@@154| |redirect#0@@33|) true)) :qid |BetreeInvidfy.230:26| :skolemid |4918| :pattern ( (|BetreeInv.__default.QueryDescent#requires| |s#0@@443| |s'#0@@154| |redirect#0@@33|)) )))
(assert  (=> true (forall ((|s#0@@444| T@U) (|s'#0@@155| T@U) (|redirect#0@@34| T@U) ) (!  (=> (and (and (and (= (type |s#0@@444|) DatatypeTypeType) (= (type |s'#0@@155|) DatatypeTypeType)) (= (type |redirect#0@@34|) DatatypeTypeType)) (or (|BetreeInv.__default.QueryDescent#canCall| |s#0@@444| |s'#0@@155| |redirect#0@@34|) (and (and ($Is |s#0@@444| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@155| Tclass.BetreeBlockInterface.Variables)) ($Is |redirect#0@@34| Tclass.BetreeSpec.Redirect)))) (and (and (|BetreeSpec.__default.ValidRedirect#canCall| |redirect#0@@34|) (=> (BetreeSpec.__default.ValidRedirect |redirect#0@@34|) (and (and (|BetreeSpec.__default.RedirectReads#canCall| |redirect#0@@34|) (|BetreeBlockInterface.__default.Reads#canCall| |s#0@@444| (BetreeSpec.__default.RedirectReads StartFuel_BetreeSpec._default.RedirectReads |redirect#0@@34|))) (=> (BetreeBlockInterface.__default.Reads |s#0@@444| (BetreeSpec.__default.RedirectReads StartFuel_BetreeSpec._default.RedirectReads |redirect#0@@34|)) (and (|BetreeSpec.__default.RedirectOps#canCall| |redirect#0@@34|) (|BetreeBlockInterface.__default.OpTransaction#canCall| |s#0@@444| |s'#0@@155| (BetreeSpec.__default.RedirectOps StartFuel_BetreeSpec._default.RedirectOps |redirect#0@@34|))))))) (= (BetreeInv.__default.QueryDescent |s#0@@444| |s'#0@@155| |redirect#0@@34|)  (and (and (BetreeSpec.__default.ValidRedirect |redirect#0@@34|) (BetreeBlockInterface.__default.Reads |s#0@@444| (BetreeSpec.__default.RedirectReads StartFuel_BetreeSpec._default.RedirectReads |redirect#0@@34|))) (BetreeBlockInterface.__default.OpTransaction StartFuel_BetreeBlockInterface._default.OpTransaction |s#0@@444| |s'#0@@155| (BetreeSpec.__default.RedirectOps StartFuel_BetreeSpec._default.RedirectOps |redirect#0@@34|)))))) :qid |BetreeInvidfy.230:26| :skolemid |4919| :pattern ( (BetreeInv.__default.QueryDescent |s#0@@444| |s'#0@@155| |redirect#0@@34|)) ))))
(assert  (=> true (forall ((|s#0@@445| T@U) (|s'#0@@156| T@U) (|redirect#0@@35| T@U) ) (!  (=> (and (and (and (= (type |s#0@@445|) DatatypeTypeType) (= (type |s'#0@@156|) DatatypeTypeType)) (= (type |redirect#0@@35|) DatatypeTypeType)) (or (|BetreeInv.__default.QueryDescent#canCall| (Lit |s#0@@445|) (Lit |s'#0@@156|) (Lit |redirect#0@@35|)) (and (and ($Is |s#0@@445| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@156| Tclass.BetreeBlockInterface.Variables)) ($Is |redirect#0@@35| Tclass.BetreeSpec.Redirect)))) (and (and (|BetreeSpec.__default.ValidRedirect#canCall| (Lit |redirect#0@@35|)) (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.__default.ValidRedirect (Lit |redirect#0@@35|))))) (and (and (|BetreeSpec.__default.RedirectReads#canCall| (Lit |redirect#0@@35|)) (|BetreeBlockInterface.__default.Reads#canCall| (Lit |s#0@@445|) (BetreeSpec.__default.RedirectReads StartFuel_BetreeSpec._default.RedirectReads (Lit |redirect#0@@35|)))) (=> (BetreeBlockInterface.__default.Reads (Lit |s#0@@445|) (BetreeSpec.__default.RedirectReads StartFuel_BetreeSpec._default.RedirectReads (Lit |redirect#0@@35|))) (and (|BetreeSpec.__default.RedirectOps#canCall| (Lit |redirect#0@@35|)) (|BetreeBlockInterface.__default.OpTransaction#canCall| (Lit |s#0@@445|) (Lit |s'#0@@156|) (BetreeSpec.__default.RedirectOps StartFuel_BetreeSpec._default.RedirectOps (Lit |redirect#0@@35|)))))))) (= (BetreeInv.__default.QueryDescent (Lit |s#0@@445|) (Lit |s'#0@@156|) (Lit |redirect#0@@35|))  (and (and (BetreeSpec.__default.ValidRedirect (Lit |redirect#0@@35|)) (BetreeBlockInterface.__default.Reads (Lit |s#0@@445|) (BetreeSpec.__default.RedirectReads StartFuel_BetreeSpec._default.RedirectReads (Lit |redirect#0@@35|)))) (BetreeBlockInterface.__default.OpTransaction StartFuel_BetreeBlockInterface._default.OpTransaction (Lit |s#0@@445|) (Lit |s'#0@@156|) (BetreeSpec.__default.RedirectOps StartFuel_BetreeSpec._default.RedirectOps (Lit |redirect#0@@35|))))))) :qid |BetreeInvidfy.230:26| :weight 3 :skolemid |4920| :pattern ( (BetreeInv.__default.QueryDescent (Lit |s#0@@445|) (Lit |s'#0@@156|) (Lit |redirect#0@@35|))) ))))
(assert  (=> true (forall ((|s#0@@446| T@U) (|s'#0@@157| T@U) (|start#0@@46| T@U) (|results#0@@9| T@U) (|end#0@@26| T@U) (|lookup#0@@77| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |s#0@@446|) DatatypeTypeType) (= (type |s'#0@@157|) DatatypeTypeType)) (= (type |start#0@@46|) DatatypeTypeType)) (= (type |results#0@@9|) (SeqType BoxType))) (= (type |end#0@@26|) DatatypeTypeType)) (= (type |lookup#0@@77|) (SeqType BoxType))) (or (|BetreeInv.__default.SuccQuery#canCall| |s#0@@446| |s'#0@@157| |start#0@@46| |results#0@@9| |end#0@@26| |lookup#0@@77|) (and (and (and (and (and ($Is |s#0@@446| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@157| Tclass.BetreeBlockInterface.Variables)) ($Is |start#0@@46| Tclass.UI.RangeStart)) ($Is |results#0@@9| (TSeq Tclass.UI.SuccResult))) ($Is |end#0@@26| Tclass.UI.RangeEnd)) ($Is |lookup#0@@77| (TSeq Tclass.BetreeGraph.ReadOp))))) true) :qid |BetreeInvidfy.237:23| :skolemid |4921| :pattern ( (BetreeInv.__default.SuccQuery |s#0@@446| |s'#0@@157| |start#0@@46| |results#0@@9| |end#0@@26| |lookup#0@@77|)) ))))
(assert (forall ((|s#0@@447| T@U) (|s'#0@@158| T@U) (|start#0@@47| T@U) (|results#0@@10| T@U) (|end#0@@27| T@U) (|lookup#0@@78| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |s#0@@447|) DatatypeTypeType) (= (type |s'#0@@158|) DatatypeTypeType)) (= (type |start#0@@47|) DatatypeTypeType)) (= (type |results#0@@10|) (SeqType BoxType))) (= (type |end#0@@27|) DatatypeTypeType)) (= (type |lookup#0@@78|) (SeqType BoxType))) (and (and (and (and (and ($Is |s#0@@447| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@158| Tclass.BetreeBlockInterface.Variables)) ($Is |start#0@@47| Tclass.UI.RangeStart)) ($Is |results#0@@10| (TSeq Tclass.UI.SuccResult))) ($Is |end#0@@27| Tclass.UI.RangeEnd)) ($Is |lookup#0@@78| (TSeq Tclass.BetreeGraph.ReadOp)))) (= (|BetreeInv.__default.SuccQuery#requires| |s#0@@447| |s'#0@@158| |start#0@@47| |results#0@@10| |end#0@@27| |lookup#0@@78|) true)) :qid |BetreeInvidfy.237:23| :skolemid |4922| :pattern ( (|BetreeInv.__default.SuccQuery#requires| |s#0@@447| |s'#0@@158| |start#0@@47| |results#0@@10| |end#0@@27| |lookup#0@@78|)) )))
(assert  (=> true (forall ((|s#0@@448| T@U) (|s'#0@@159| T@U) (|start#0@@48| T@U) (|results#0@@11| T@U) (|end#0@@28| T@U) (|lookup#0@@79| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |s#0@@448|) DatatypeTypeType) (= (type |s'#0@@159|) DatatypeTypeType)) (= (type |start#0@@48|) DatatypeTypeType)) (= (type |results#0@@11|) (SeqType BoxType))) (= (type |end#0@@28|) DatatypeTypeType)) (= (type |lookup#0@@79|) (SeqType BoxType))) (or (|BetreeInv.__default.SuccQuery#canCall| |s#0@@448| |s'#0@@159| |start#0@@48| |results#0@@11| |end#0@@28| |lookup#0@@79|) (and (and (and (and (and ($Is |s#0@@448| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@159| Tclass.BetreeBlockInterface.Variables)) ($Is |start#0@@48| Tclass.UI.RangeStart)) ($Is |results#0@@11| (TSeq Tclass.UI.SuccResult))) ($Is |end#0@@28| Tclass.UI.RangeEnd)) ($Is |lookup#0@@79| (TSeq Tclass.BetreeGraph.ReadOp))))) (and (and (|BetreeSpec.__default.ValidSuccQuery#canCall| (|#BetreeSpec.SuccQuery.SuccQuery| |start#0@@48| |results#0@@11| |end#0@@28| |lookup#0@@79|)) (=> (BetreeSpec.__default.ValidSuccQuery (|#BetreeSpec.SuccQuery.SuccQuery| |start#0@@48| |results#0@@11| |end#0@@28| |lookup#0@@79|)) (and (and (|BetreeSpec.__default.SuccQueryReads#canCall| (|#BetreeSpec.SuccQuery.SuccQuery| |start#0@@48| |results#0@@11| |end#0@@28| |lookup#0@@79|)) (|BetreeBlockInterface.__default.Reads#canCall| |s#0@@448| (BetreeSpec.__default.SuccQueryReads (|#BetreeSpec.SuccQuery.SuccQuery| |start#0@@48| |results#0@@11| |end#0@@28| |lookup#0@@79|)))) (=> (BetreeBlockInterface.__default.Reads |s#0@@448| (BetreeSpec.__default.SuccQueryReads (|#BetreeSpec.SuccQuery.SuccQuery| |start#0@@48| |results#0@@11| |end#0@@28| |lookup#0@@79|))) (and (|BetreeSpec.__default.SuccQueryOps#canCall| (|#BetreeSpec.SuccQuery.SuccQuery| |start#0@@48| |results#0@@11| |end#0@@28| |lookup#0@@79|)) (|BetreeBlockInterface.__default.OpTransaction#canCall| |s#0@@448| |s'#0@@159| (BetreeSpec.__default.SuccQueryOps (|#BetreeSpec.SuccQuery.SuccQuery| |start#0@@48| |results#0@@11| |end#0@@28| |lookup#0@@79|)))))))) (= (BetreeInv.__default.SuccQuery |s#0@@448| |s'#0@@159| |start#0@@48| |results#0@@11| |end#0@@28| |lookup#0@@79|)  (and (and (BetreeSpec.__default.ValidSuccQuery (|#BetreeSpec.SuccQuery.SuccQuery| |start#0@@48| |results#0@@11| |end#0@@28| |lookup#0@@79|)) (BetreeBlockInterface.__default.Reads |s#0@@448| (BetreeSpec.__default.SuccQueryReads (|#BetreeSpec.SuccQuery.SuccQuery| |start#0@@48| |results#0@@11| |end#0@@28| |lookup#0@@79|)))) (BetreeBlockInterface.__default.OpTransaction StartFuel_BetreeBlockInterface._default.OpTransaction |s#0@@448| |s'#0@@159| (BetreeSpec.__default.SuccQueryOps (|#BetreeSpec.SuccQuery.SuccQuery| |start#0@@48| |results#0@@11| |end#0@@28| |lookup#0@@79|))))))) :qid |BetreeInvidfy.237:23| :skolemid |4923| :pattern ( (BetreeInv.__default.SuccQuery |s#0@@448| |s'#0@@159| |start#0@@48| |results#0@@11| |end#0@@28| |lookup#0@@79|)) ))))
(assert  (=> true (forall ((|s#0@@449| T@U) (|s'#0@@160| T@U) (|start#0@@49| T@U) (|results#0@@12| T@U) (|end#0@@29| T@U) (|lookup#0@@80| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |s#0@@449|) DatatypeTypeType) (= (type |s'#0@@160|) DatatypeTypeType)) (= (type |start#0@@49|) DatatypeTypeType)) (= (type |results#0@@12|) (SeqType BoxType))) (= (type |end#0@@29|) DatatypeTypeType)) (= (type |lookup#0@@80|) (SeqType BoxType))) (or (|BetreeInv.__default.SuccQuery#canCall| (Lit |s#0@@449|) (Lit |s'#0@@160|) (Lit |start#0@@49|) (Lit |results#0@@12|) (Lit |end#0@@29|) (Lit |lookup#0@@80|)) (and (and (and (and (and ($Is |s#0@@449| Tclass.BetreeBlockInterface.Variables) ($Is |s'#0@@160| Tclass.BetreeBlockInterface.Variables)) ($Is |start#0@@49| Tclass.UI.RangeStart)) ($Is |results#0@@12| (TSeq Tclass.UI.SuccResult))) ($Is |end#0@@29| Tclass.UI.RangeEnd)) ($Is |lookup#0@@80| (TSeq Tclass.BetreeGraph.ReadOp))))) (and (and (|BetreeSpec.__default.ValidSuccQuery#canCall| (Lit (|#BetreeSpec.SuccQuery.SuccQuery| (Lit |start#0@@49|) (Lit |results#0@@12|) (Lit |end#0@@29|) (Lit |lookup#0@@80|)))) (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.__default.ValidSuccQuery (Lit (|#BetreeSpec.SuccQuery.SuccQuery| (Lit |start#0@@49|) (Lit |results#0@@12|) (Lit |end#0@@29|) (Lit |lookup#0@@80|))))))) (and (and (|BetreeSpec.__default.SuccQueryReads#canCall| (Lit (|#BetreeSpec.SuccQuery.SuccQuery| (Lit |start#0@@49|) (Lit |results#0@@12|) (Lit |end#0@@29|) (Lit |lookup#0@@80|)))) (|BetreeBlockInterface.__default.Reads#canCall| (Lit |s#0@@449|) (Lit (BetreeSpec.__default.SuccQueryReads (Lit (|#BetreeSpec.SuccQuery.SuccQuery| (Lit |start#0@@49|) (Lit |results#0@@12|) (Lit |end#0@@29|) (Lit |lookup#0@@80|))))))) (=> (U_2_bool (Lit (bool_2_U (BetreeBlockInterface.__default.Reads (Lit |s#0@@449|) (Lit (BetreeSpec.__default.SuccQueryReads (Lit (|#BetreeSpec.SuccQuery.SuccQuery| (Lit |start#0@@49|) (Lit |results#0@@12|) (Lit |end#0@@29|) (Lit |lookup#0@@80|))))))))) (and (|BetreeSpec.__default.SuccQueryOps#canCall| (Lit (|#BetreeSpec.SuccQuery.SuccQuery| (Lit |start#0@@49|) (Lit |results#0@@12|) (Lit |end#0@@29|) (Lit |lookup#0@@80|)))) (|BetreeBlockInterface.__default.OpTransaction#canCall| (Lit |s#0@@449|) (Lit |s'#0@@160|) (Lit (BetreeSpec.__default.SuccQueryOps (Lit (|#BetreeSpec.SuccQuery.SuccQuery| (Lit |start#0@@49|) (Lit |results#0@@12|) (Lit |end#0@@29|) (Lit |lookup#0@@80|))))))))))) (= (BetreeInv.__default.SuccQuery (Lit |s#0@@449|) (Lit |s'#0@@160|) (Lit |start#0@@49|) (Lit |results#0@@12|) (Lit |end#0@@29|) (Lit |lookup#0@@80|))  (and (and (BetreeSpec.__default.ValidSuccQuery (Lit (|#BetreeSpec.SuccQuery.SuccQuery| (Lit |start#0@@49|) (Lit |results#0@@12|) (Lit |end#0@@29|) (Lit |lookup#0@@80|)))) (BetreeBlockInterface.__default.Reads (Lit |s#0@@449|) (Lit (BetreeSpec.__default.SuccQueryReads (Lit (|#BetreeSpec.SuccQuery.SuccQuery| (Lit |start#0@@49|) (Lit |results#0@@12|) (Lit |end#0@@29|) (Lit |lookup#0@@80|))))))) (BetreeBlockInterface.__default.OpTransaction StartFuel_BetreeBlockInterface._default.OpTransaction (Lit |s#0@@449|) (Lit |s'#0@@160|) (Lit (BetreeSpec.__default.SuccQueryOps (Lit (|#BetreeSpec.SuccQuery.SuccQuery| (Lit |start#0@@49|) (Lit |results#0@@12|) (Lit |end#0@@29|) (Lit |lookup#0@@80|)))))))))) :qid |BetreeInvidfy.237:23| :weight 3 :skolemid |4924| :pattern ( (BetreeInv.__default.SuccQuery (Lit |s#0@@449|) (Lit |s'#0@@160|) (Lit |start#0@@49|) (Lit |results#0@@12|) (Lit |end#0@@29|) (Lit |lookup#0@@80|))) ))))
(assert (forall ((arg0@@737 T@U) (arg1@@341 T@U) ) (! (= (type (|#AsyncBetree.Variables.Variables| arg0@@737 arg1@@341)) DatatypeTypeType) :qid |funType:#AsyncBetree.Variables.Variables| :pattern ( (|#AsyncBetree.Variables.Variables| arg0@@737 arg1@@341)) )))
(assert (forall ((|a#0#0#0@@8| T@U) (|a#0#1#0@@4| T@U) ) (!  (=> (and (= (type |a#0#0#0@@8|) DatatypeTypeType) (= (type |a#0#1#0@@4|) (MapType BoxType BoxType))) (= (DatatypeCtorId (|#AsyncBetree.Variables.Variables| |a#0#0#0@@8| |a#0#1#0@@4|)) |##AsyncBetree.Variables.Variables|)) :qid |AsyncBetreeidfy.21:7| :skolemid |4977| :pattern ( (|#AsyncBetree.Variables.Variables| |a#0#0#0@@8| |a#0#1#0@@4|)) )))
(assert (forall ((d@@308 T@U) ) (!  (=> (= (type d@@308) DatatypeTypeType) (= (AsyncBetree.Variables.Variables_q d@@308) (= (DatatypeCtorId d@@308) |##AsyncBetree.Variables.Variables|))) :qid |unknown.0:0| :skolemid |4978| :pattern ( (AsyncBetree.Variables.Variables_q d@@308)) )))
(assert (forall ((d@@309 T@U) ) (!  (=> (and (= (type d@@309) DatatypeTypeType) (AsyncBetree.Variables.Variables_q d@@309)) (exists ((|a#1#0#0@@8| T@U) (|a#1#1#0@@4| T@U) ) (!  (and (and (= (type |a#1#0#0@@8|) DatatypeTypeType) (= (type |a#1#1#0@@4|) (MapType BoxType BoxType))) (= d@@309 (|#AsyncBetree.Variables.Variables| |a#1#0#0@@8| |a#1#1#0@@4|))) :qid |AsyncBetreeidfy.21:7| :skolemid |4979| :no-pattern (type |a#1#0#0@@8|) :no-pattern (type |a#1#1#0@@4|) :no-pattern (U_2_int |a#1#0#0@@8|) :no-pattern (U_2_bool |a#1#0#0@@8|) :no-pattern (U_2_int |a#1#1#0@@4|) :no-pattern (U_2_bool |a#1#1#0@@4|) ))) :qid |unknown.0:0| :skolemid |4980| :pattern ( (AsyncBetree.Variables.Variables_q d@@309)) )))
(assert (forall ((|a#2#0#0@@8| T@U) (|a#2#1#0@@4| T@U) ) (!  (=> (and (= (type |a#2#0#0@@8|) DatatypeTypeType) (= (type |a#2#1#0@@4|) (MapType BoxType BoxType))) (= ($Is (|#AsyncBetree.Variables.Variables| |a#2#0#0@@8| |a#2#1#0@@4|) Tclass.AsyncBetree.Variables)  (and ($Is |a#2#0#0@@8| Tclass.Betree.Variables) ($Is |a#2#1#0@@4| (TMap TInt Tclass.QueryStates.QueryState))))) :qid |AsyncBetreeidfy.21:7| :skolemid |4981| :pattern ( ($Is (|#AsyncBetree.Variables.Variables| |a#2#0#0@@8| |a#2#1#0@@4|) Tclass.AsyncBetree.Variables)) )))
(assert (forall ((|a#3#0#0@@8| T@U) (|a#3#1#0@@4| T@U) ($h@@256 T@U) ) (!  (=> (and (and (and (= (type |a#3#0#0@@8|) DatatypeTypeType) (= (type |a#3#1#0@@4|) (MapType BoxType BoxType))) (= (type $h@@256) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@256)) (= ($IsAlloc (|#AsyncBetree.Variables.Variables| |a#3#0#0@@8| |a#3#1#0@@4|) Tclass.AsyncBetree.Variables $h@@256)  (and ($IsAlloc |a#3#0#0@@8| Tclass.Betree.Variables $h@@256) ($IsAlloc |a#3#1#0@@4| (TMap TInt Tclass.QueryStates.QueryState) $h@@256)))) :qid |AsyncBetreeidfy.21:7| :skolemid |4982| :pattern ( ($IsAlloc (|#AsyncBetree.Variables.Variables| |a#3#0#0@@8| |a#3#1#0@@4|) Tclass.AsyncBetree.Variables $h@@256)) )))
(assert (forall ((d@@310 T@U) ($h@@257 T@U) ) (!  (=> (and (and (= (type d@@310) DatatypeTypeType) (= (type $h@@257) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@257) (and (AsyncBetree.Variables.Variables_q d@@310) ($IsAlloc d@@310 Tclass.AsyncBetree.Variables $h@@257)))) ($IsAlloc (AsyncBetree.Variables.betree d@@310) Tclass.Betree.Variables $h@@257)) :qid |unknown.0:0| :skolemid |4983| :pattern ( ($IsAlloc (AsyncBetree.Variables.betree d@@310) Tclass.Betree.Variables $h@@257)) )))
(assert (forall ((d@@311 T@U) ($h@@258 T@U) ) (!  (=> (and (and (= (type d@@311) DatatypeTypeType) (= (type $h@@258) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@258) (and (AsyncBetree.Variables.Variables_q d@@311) ($IsAlloc d@@311 Tclass.AsyncBetree.Variables $h@@258)))) ($IsAlloc (AsyncBetree.Variables.queries d@@311) (TMap TInt Tclass.QueryStates.QueryState) $h@@258)) :qid |unknown.0:0| :skolemid |4984| :pattern ( ($IsAlloc (AsyncBetree.Variables.queries d@@311) (TMap TInt Tclass.QueryStates.QueryState) $h@@258)) )))
(assert (forall ((|a#4#0#0@@8| T@U) (|a#4#1#0@@4| T@U) ) (!  (=> (and (= (type |a#4#0#0@@8|) DatatypeTypeType) (= (type |a#4#1#0@@4|) (MapType BoxType BoxType))) (= (|#AsyncBetree.Variables.Variables| (Lit |a#4#0#0@@8|) (Lit |a#4#1#0@@4|)) (Lit (|#AsyncBetree.Variables.Variables| |a#4#0#0@@8| |a#4#1#0@@4|)))) :qid |AsyncBetreeidfy.21:7| :skolemid |4985| :pattern ( (|#AsyncBetree.Variables.Variables| (Lit |a#4#0#0@@8|) (Lit |a#4#1#0@@4|))) )))
(assert (forall ((|a#5#0#0@@9| T@U) (|a#5#1#0@@4| T@U) ) (!  (=> (and (= (type |a#5#0#0@@9|) DatatypeTypeType) (= (type |a#5#1#0@@4|) (MapType BoxType BoxType))) (= (AsyncBetree.Variables.betree (|#AsyncBetree.Variables.Variables| |a#5#0#0@@9| |a#5#1#0@@4|)) |a#5#0#0@@9|)) :qid |AsyncBetreeidfy.21:7| :skolemid |4986| :pattern ( (|#AsyncBetree.Variables.Variables| |a#5#0#0@@9| |a#5#1#0@@4|)) )))
(assert (forall ((|a#6#0#0@@9| T@U) (|a#6#1#0@@4| T@U) ) (!  (=> (and (= (type |a#6#0#0@@9|) DatatypeTypeType) (= (type |a#6#1#0@@4|) (MapType BoxType BoxType))) (< (DtRank |a#6#0#0@@9|) (DtRank (|#AsyncBetree.Variables.Variables| |a#6#0#0@@9| |a#6#1#0@@4|)))) :qid |AsyncBetreeidfy.21:7| :skolemid |4987| :pattern ( (|#AsyncBetree.Variables.Variables| |a#6#0#0@@9| |a#6#1#0@@4|)) )))
(assert (forall ((|a#7#0#0@@9| T@U) (|a#7#1#0@@4| T@U) ) (!  (=> (and (= (type |a#7#0#0@@9|) DatatypeTypeType) (= (type |a#7#1#0@@4|) (MapType BoxType BoxType))) (= (AsyncBetree.Variables.queries (|#AsyncBetree.Variables.Variables| |a#7#0#0@@9| |a#7#1#0@@4|)) |a#7#1#0@@4|)) :qid |AsyncBetreeidfy.21:7| :skolemid |4988| :pattern ( (|#AsyncBetree.Variables.Variables| |a#7#0#0@@9| |a#7#1#0@@4|)) )))
(assert (forall ((|a#8#0#0@@9| T@U) (|a#8#1#0@@5| T@U) (d@@312 T@U) ) (!  (=> (and (and (and (= (type |a#8#0#0@@9|) DatatypeTypeType) (= (type |a#8#1#0@@5|) (MapType BoxType BoxType))) (= (type d@@312) DatatypeTypeType)) (U_2_bool (MapType0Select (|Map#Domain| |a#8#1#0@@5|) ($Box d@@312)))) (< (DtRank d@@312) (DtRank (|#AsyncBetree.Variables.Variables| |a#8#0#0@@9| |a#8#1#0@@5|)))) :qid |AsyncBetreeidfy.21:7| :skolemid |4989| :pattern ( (MapType0Select (|Map#Domain| |a#8#1#0@@5|) ($Box d@@312)) (|#AsyncBetree.Variables.Variables| |a#8#0#0@@9| |a#8#1#0@@5|)) )))
(assert (forall ((|a#9#0#0@@8| T@U) (|a#9#1#0@@4| T@U) (bx@@201 T@U) ) (!  (=> (and (and (and (= (type |a#9#0#0@@8|) DatatypeTypeType) (= (type |a#9#1#0@@4|) (MapType BoxType BoxType))) (= (type bx@@201) BoxType)) (U_2_bool (MapType0Select (|Map#Domain| |a#9#1#0@@4|) bx@@201))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |a#9#1#0@@4|) bx@@201))) (DtRank (|#AsyncBetree.Variables.Variables| |a#9#0#0@@8| |a#9#1#0@@4|)))) :qid |AsyncBetreeidfy.21:7| :skolemid |4990| :pattern ( (MapType0Select (|Map#Domain| |a#9#1#0@@4|) bx@@201) (|#AsyncBetree.Variables.Variables| |a#9#0#0@@8| |a#9#1#0@@4|)) )))
(assert (forall ((d@@313 T@U) ) (!  (=> (and (= (type d@@313) DatatypeTypeType) (|$IsA#AsyncBetree.Variables| d@@313)) (AsyncBetree.Variables.Variables_q d@@313)) :qid |unknown.0:0| :skolemid |4991| :pattern ( (|$IsA#AsyncBetree.Variables| d@@313)) )))
(assert (forall ((d@@314 T@U) ) (!  (=> (and (= (type d@@314) DatatypeTypeType) ($Is d@@314 Tclass.AsyncBetree.Variables)) (AsyncBetree.Variables.Variables_q d@@314)) :qid |unknown.0:0| :skolemid |4992| :pattern ( (AsyncBetree.Variables.Variables_q d@@314) ($Is d@@314 Tclass.AsyncBetree.Variables)) )))
(assert (forall ((a@@220 T@U) (b@@157 T@U) ) (!  (=> (and (and (= (type a@@220) DatatypeTypeType) (= (type b@@157) DatatypeTypeType)) true) (= (|AsyncBetree.Variables#Equal| a@@220 b@@157)  (and (|Betree.Variables#Equal| (AsyncBetree.Variables.betree a@@220) (AsyncBetree.Variables.betree b@@157)) (|Map#Equal| (AsyncBetree.Variables.queries a@@220) (AsyncBetree.Variables.queries b@@157))))) :qid |unknown.0:0| :skolemid |4993| :pattern ( (|AsyncBetree.Variables#Equal| a@@220 b@@157)) )))
(assert (forall ((a@@221 T@U) (b@@158 T@U) ) (!  (=> (and (= (type a@@221) DatatypeTypeType) (= (type b@@158) DatatypeTypeType)) (= (|AsyncBetree.Variables#Equal| a@@221 b@@158) (= a@@221 b@@158))) :qid |unknown.0:0| :skolemid |4994| :pattern ( (|AsyncBetree.Variables#Equal| a@@221 b@@158)) )))
(assert (forall ((arg0@@738 T@U) ) (! (= (type (|#AsyncBetree.Step.BasicStep| arg0@@738)) DatatypeTypeType) :qid |funType:#AsyncBetree.Step.BasicStep| :pattern ( (|#AsyncBetree.Step.BasicStep| arg0@@738)) )))
(assert (forall ((|a#10#0#0@@8| T@U) ) (!  (=> (= (type |a#10#0#0@@8|) DatatypeTypeType) (= (DatatypeCtorId (|#AsyncBetree.Step.BasicStep| |a#10#0#0@@8|)) |##AsyncBetree.Step.BasicStep|)) :qid |AsyncBetreeidfy.31:17| :skolemid |4995| :pattern ( (|#AsyncBetree.Step.BasicStep| |a#10#0#0@@8|)) )))
(assert (forall ((d@@315 T@U) ) (!  (=> (= (type d@@315) DatatypeTypeType) (= (AsyncBetree.Step.BasicStep_q d@@315) (= (DatatypeCtorId d@@315) |##AsyncBetree.Step.BasicStep|))) :qid |unknown.0:0| :skolemid |4996| :pattern ( (AsyncBetree.Step.BasicStep_q d@@315)) )))
(assert (forall ((d@@316 T@U) ) (!  (=> (and (= (type d@@316) DatatypeTypeType) (AsyncBetree.Step.BasicStep_q d@@316)) (exists ((|a#11#0#0@@8| T@U) ) (!  (and (= (type |a#11#0#0@@8|) DatatypeTypeType) (= d@@316 (|#AsyncBetree.Step.BasicStep| |a#11#0#0@@8|))) :qid |AsyncBetreeidfy.31:17| :skolemid |4997| :no-pattern (type |a#11#0#0@@8|) :no-pattern (U_2_int |a#11#0#0@@8|) :no-pattern (U_2_bool |a#11#0#0@@8|) ))) :qid |unknown.0:0| :skolemid |4998| :pattern ( (AsyncBetree.Step.BasicStep_q d@@316)) )))
(assert (forall ((|a#12#0#0@@6| T@U) ) (!  (=> (= (type |a#12#0#0@@6|) DatatypeTypeType) (= ($Is (|#AsyncBetree.Step.BasicStep| |a#12#0#0@@6|) Tclass.AsyncBetree.Step) ($Is |a#12#0#0@@6| Tclass.Betree.Step))) :qid |AsyncBetreeidfy.31:17| :skolemid |4999| :pattern ( ($Is (|#AsyncBetree.Step.BasicStep| |a#12#0#0@@6|) Tclass.AsyncBetree.Step)) )))
(assert (forall ((|a#13#0#0@@6| T@U) ($h@@259 T@U) ) (!  (=> (and (and (= (type |a#13#0#0@@6|) DatatypeTypeType) (= (type $h@@259) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@259)) (= ($IsAlloc (|#AsyncBetree.Step.BasicStep| |a#13#0#0@@6|) Tclass.AsyncBetree.Step $h@@259) ($IsAlloc |a#13#0#0@@6| Tclass.Betree.Step $h@@259))) :qid |AsyncBetreeidfy.31:17| :skolemid |5000| :pattern ( ($IsAlloc (|#AsyncBetree.Step.BasicStep| |a#13#0#0@@6|) Tclass.AsyncBetree.Step $h@@259)) )))
(assert (forall ((arg0@@739 T@U) ) (! (= (type (AsyncBetree.Step.betreeStep arg0@@739)) DatatypeTypeType) :qid |funType:AsyncBetree.Step.betreeStep| :pattern ( (AsyncBetree.Step.betreeStep arg0@@739)) )))
(assert (forall ((d@@317 T@U) ($h@@260 T@U) ) (!  (=> (and (and (= (type d@@317) DatatypeTypeType) (= (type $h@@260) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@260) (and (AsyncBetree.Step.BasicStep_q d@@317) ($IsAlloc d@@317 Tclass.AsyncBetree.Step $h@@260)))) ($IsAlloc (AsyncBetree.Step.betreeStep d@@317) Tclass.Betree.Step $h@@260)) :qid |unknown.0:0| :skolemid |5001| :pattern ( ($IsAlloc (AsyncBetree.Step.betreeStep d@@317) Tclass.Betree.Step $h@@260)) )))
(assert (forall ((|a#14#0#0@@7| T@U) ) (!  (=> (= (type |a#14#0#0@@7|) DatatypeTypeType) (= (|#AsyncBetree.Step.BasicStep| (Lit |a#14#0#0@@7|)) (Lit (|#AsyncBetree.Step.BasicStep| |a#14#0#0@@7|)))) :qid |AsyncBetreeidfy.31:17| :skolemid |5002| :pattern ( (|#AsyncBetree.Step.BasicStep| (Lit |a#14#0#0@@7|))) )))
(assert (forall ((|a#15#0#0@@7| T@U) ) (!  (=> (= (type |a#15#0#0@@7|) DatatypeTypeType) (= (AsyncBetree.Step.betreeStep (|#AsyncBetree.Step.BasicStep| |a#15#0#0@@7|)) |a#15#0#0@@7|)) :qid |AsyncBetreeidfy.31:17| :skolemid |5003| :pattern ( (|#AsyncBetree.Step.BasicStep| |a#15#0#0@@7|)) )))
(assert (forall ((|a#16#0#0@@7| T@U) ) (!  (=> (= (type |a#16#0#0@@7|) DatatypeTypeType) (< (DtRank |a#16#0#0@@7|) (DtRank (|#AsyncBetree.Step.BasicStep| |a#16#0#0@@7|)))) :qid |AsyncBetreeidfy.31:17| :skolemid |5004| :pattern ( (|#AsyncBetree.Step.BasicStep| |a#16#0#0@@7|)) )))
(assert (= (type |#AsyncBetree.Step.QueryBeginStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#AsyncBetree.Step.QueryBeginStep|) |##AsyncBetree.Step.QueryBeginStep|))
(assert (forall ((d@@318 T@U) ) (!  (=> (= (type d@@318) DatatypeTypeType) (= (AsyncBetree.Step.QueryBeginStep_q d@@318) (= (DatatypeCtorId d@@318) |##AsyncBetree.Step.QueryBeginStep|))) :qid |unknown.0:0| :skolemid |5005| :pattern ( (AsyncBetree.Step.QueryBeginStep_q d@@318)) )))
(assert (forall ((d@@319 T@U) ) (!  (=> (and (= (type d@@319) DatatypeTypeType) (AsyncBetree.Step.QueryBeginStep_q d@@319)) (= d@@319 |#AsyncBetree.Step.QueryBeginStep|)) :qid |unknown.0:0| :skolemid |5006| :pattern ( (AsyncBetree.Step.QueryBeginStep_q d@@319)) )))
(assert ($Is |#AsyncBetree.Step.QueryBeginStep| Tclass.AsyncBetree.Step))
(assert (forall (($h@@261 T@U) ) (!  (=> (and (= (type $h@@261) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@261)) ($IsAlloc |#AsyncBetree.Step.QueryBeginStep| Tclass.AsyncBetree.Step $h@@261)) :qid |DafnyPreludebpl.545:12| :skolemid |5007| :pattern ( ($IsAlloc |#AsyncBetree.Step.QueryBeginStep| Tclass.AsyncBetree.Step $h@@261)) )))
(assert (= |#AsyncBetree.Step.QueryBeginStep| (Lit |#AsyncBetree.Step.QueryBeginStep|)))
(assert (= (type |#AsyncBetree.Step.QueryEndStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#AsyncBetree.Step.QueryEndStep|) |##AsyncBetree.Step.QueryEndStep|))
(assert (forall ((d@@320 T@U) ) (!  (=> (= (type d@@320) DatatypeTypeType) (= (AsyncBetree.Step.QueryEndStep_q d@@320) (= (DatatypeCtorId d@@320) |##AsyncBetree.Step.QueryEndStep|))) :qid |unknown.0:0| :skolemid |5008| :pattern ( (AsyncBetree.Step.QueryEndStep_q d@@320)) )))
(assert (forall ((d@@321 T@U) ) (!  (=> (and (= (type d@@321) DatatypeTypeType) (AsyncBetree.Step.QueryEndStep_q d@@321)) (= d@@321 |#AsyncBetree.Step.QueryEndStep|)) :qid |unknown.0:0| :skolemid |5009| :pattern ( (AsyncBetree.Step.QueryEndStep_q d@@321)) )))
(assert ($Is |#AsyncBetree.Step.QueryEndStep| Tclass.AsyncBetree.Step))
(assert (forall (($h@@262 T@U) ) (!  (=> (and (= (type $h@@262) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@262)) ($IsAlloc |#AsyncBetree.Step.QueryEndStep| Tclass.AsyncBetree.Step $h@@262)) :qid |DafnyPreludebpl.545:12| :skolemid |5010| :pattern ( ($IsAlloc |#AsyncBetree.Step.QueryEndStep| Tclass.AsyncBetree.Step $h@@262)) )))
(assert (= |#AsyncBetree.Step.QueryEndStep| (Lit |#AsyncBetree.Step.QueryEndStep|)))
(assert (forall ((arg0@@740 Int) (arg1@@342 T@U) ) (! (= (type (|#AsyncBetree.Step.QueryAdvanceStep| arg0@@740 arg1@@342)) DatatypeTypeType) :qid |funType:#AsyncBetree.Step.QueryAdvanceStep| :pattern ( (|#AsyncBetree.Step.QueryAdvanceStep| arg0@@740 arg1@@342)) )))
(assert (forall ((|a#27#0#0@@3| Int) (|a#27#1#0@@2| T@U) ) (!  (=> (= (type |a#27#1#0@@2|) DatatypeTypeType) (= (DatatypeCtorId (|#AsyncBetree.Step.QueryAdvanceStep| |a#27#0#0@@3| |a#27#1#0@@2|)) |##AsyncBetree.Step.QueryAdvanceStep|)) :qid |AsyncBetreeidfy.34:30| :skolemid |5011| :pattern ( (|#AsyncBetree.Step.QueryAdvanceStep| |a#27#0#0@@3| |a#27#1#0@@2|)) )))
(assert (forall ((d@@322 T@U) ) (!  (=> (= (type d@@322) DatatypeTypeType) (= (AsyncBetree.Step.QueryAdvanceStep_q d@@322) (= (DatatypeCtorId d@@322) |##AsyncBetree.Step.QueryAdvanceStep|))) :qid |unknown.0:0| :skolemid |5012| :pattern ( (AsyncBetree.Step.QueryAdvanceStep_q d@@322)) )))
(assert (forall ((d@@323 T@U) ) (!  (=> (and (= (type d@@323) DatatypeTypeType) (AsyncBetree.Step.QueryAdvanceStep_q d@@323)) (exists ((|a#28#0#0@@4| Int) (|a#28#1#0@@2| T@U) ) (!  (and (= (type |a#28#1#0@@2|) DatatypeTypeType) (= d@@323 (|#AsyncBetree.Step.QueryAdvanceStep| |a#28#0#0@@4| |a#28#1#0@@2|))) :qid |AsyncBetreeidfy.34:30| :skolemid |5013| :no-pattern (type |a#28#1#0@@2|) :no-pattern (U_2_int |a#28#1#0@@2|) :no-pattern (U_2_bool |a#28#1#0@@2|) ))) :qid |unknown.0:0| :skolemid |5014| :pattern ( (AsyncBetree.Step.QueryAdvanceStep_q d@@323)) )))
(assert (forall ((|a#29#0#0@@3| Int) (|a#29#1#0@@2| T@U) ) (!  (=> (= (type |a#29#1#0@@2|) DatatypeTypeType) (= ($Is (|#AsyncBetree.Step.QueryAdvanceStep| |a#29#0#0@@3| |a#29#1#0@@2|) Tclass.AsyncBetree.Step)  (and ($Is (int_2_U |a#29#0#0@@3|) TInt) ($Is |a#29#1#0@@2| Tclass.QueryStates.QueryDescent)))) :qid |AsyncBetreeidfy.34:30| :skolemid |5015| :pattern ( ($Is (|#AsyncBetree.Step.QueryAdvanceStep| |a#29#0#0@@3| |a#29#1#0@@2|) Tclass.AsyncBetree.Step)) )))
(assert (forall ((|a#30#0#0@@3| Int) (|a#30#1#0@@2| T@U) ($h@@263 T@U) ) (!  (=> (and (and (= (type |a#30#1#0@@2|) DatatypeTypeType) (= (type $h@@263) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@263)) (= ($IsAlloc (|#AsyncBetree.Step.QueryAdvanceStep| |a#30#0#0@@3| |a#30#1#0@@2|) Tclass.AsyncBetree.Step $h@@263)  (and ($IsAlloc (int_2_U |a#30#0#0@@3|) TInt $h@@263) ($IsAlloc |a#30#1#0@@2| Tclass.QueryStates.QueryDescent $h@@263)))) :qid |AsyncBetreeidfy.34:30| :skolemid |5016| :pattern ( ($IsAlloc (|#AsyncBetree.Step.QueryAdvanceStep| |a#30#0#0@@3| |a#30#1#0@@2|) Tclass.AsyncBetree.Step $h@@263)) )))
(assert (forall ((d@@324 T@U) ($h@@264 T@U) ) (!  (=> (and (and (= (type d@@324) DatatypeTypeType) (= (type $h@@264) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@264) (and (AsyncBetree.Step.QueryAdvanceStep_q d@@324) ($IsAlloc d@@324 Tclass.AsyncBetree.Step $h@@264)))) ($IsAlloc (int_2_U (AsyncBetree.Step.id d@@324)) TInt $h@@264)) :qid |unknown.0:0| :skolemid |5017| :pattern ( ($IsAlloc (int_2_U (AsyncBetree.Step.id d@@324)) TInt $h@@264)) )))
(assert (forall ((arg0@@741 T@U) ) (! (= (type (AsyncBetree.Step.descent arg0@@741)) DatatypeTypeType) :qid |funType:AsyncBetree.Step.descent| :pattern ( (AsyncBetree.Step.descent arg0@@741)) )))
(assert (forall ((d@@325 T@U) ($h@@265 T@U) ) (!  (=> (and (and (= (type d@@325) DatatypeTypeType) (= (type $h@@265) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@265) (and (AsyncBetree.Step.QueryAdvanceStep_q d@@325) ($IsAlloc d@@325 Tclass.AsyncBetree.Step $h@@265)))) ($IsAlloc (AsyncBetree.Step.descent d@@325) Tclass.QueryStates.QueryDescent $h@@265)) :qid |unknown.0:0| :skolemid |5018| :pattern ( ($IsAlloc (AsyncBetree.Step.descent d@@325) Tclass.QueryStates.QueryDescent $h@@265)) )))
(assert (forall ((|a#31#0#0@@3| Int) (|a#31#1#0@@2| T@U) ) (!  (=> (= (type |a#31#1#0@@2|) DatatypeTypeType) (= (|#AsyncBetree.Step.QueryAdvanceStep| (LitInt |a#31#0#0@@3|) (Lit |a#31#1#0@@2|)) (Lit (|#AsyncBetree.Step.QueryAdvanceStep| |a#31#0#0@@3| |a#31#1#0@@2|)))) :qid |AsyncBetreeidfy.34:30| :skolemid |5019| :pattern ( (|#AsyncBetree.Step.QueryAdvanceStep| (LitInt |a#31#0#0@@3|) (Lit |a#31#1#0@@2|))) )))
(assert (forall ((|a#32#0#0@@3| Int) (|a#32#1#0@@2| T@U) ) (!  (=> (= (type |a#32#1#0@@2|) DatatypeTypeType) (= (AsyncBetree.Step.id (|#AsyncBetree.Step.QueryAdvanceStep| |a#32#0#0@@3| |a#32#1#0@@2|)) |a#32#0#0@@3|)) :qid |AsyncBetreeidfy.34:30| :skolemid |5020| :pattern ( (|#AsyncBetree.Step.QueryAdvanceStep| |a#32#0#0@@3| |a#32#1#0@@2|)) )))
(assert (forall ((|a#33#0#0@@3| Int) (|a#33#1#0@@2| T@U) ) (!  (=> (= (type |a#33#1#0@@2|) DatatypeTypeType) (= (AsyncBetree.Step.descent (|#AsyncBetree.Step.QueryAdvanceStep| |a#33#0#0@@3| |a#33#1#0@@2|)) |a#33#1#0@@2|)) :qid |AsyncBetreeidfy.34:30| :skolemid |5021| :pattern ( (|#AsyncBetree.Step.QueryAdvanceStep| |a#33#0#0@@3| |a#33#1#0@@2|)) )))
(assert (forall ((|a#34#0#0@@3| Int) (|a#34#1#0@@2| T@U) ) (!  (=> (= (type |a#34#1#0@@2|) DatatypeTypeType) (< (DtRank |a#34#1#0@@2|) (DtRank (|#AsyncBetree.Step.QueryAdvanceStep| |a#34#0#0@@3| |a#34#1#0@@2|)))) :qid |AsyncBetreeidfy.34:30| :skolemid |5022| :pattern ( (|#AsyncBetree.Step.QueryAdvanceStep| |a#34#0#0@@3| |a#34#1#0@@2|)) )))
(assert (= (type |#AsyncBetree.Step.StutterStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#AsyncBetree.Step.StutterStep|) |##AsyncBetree.Step.StutterStep|))
(assert (forall ((d@@326 T@U) ) (!  (=> (= (type d@@326) DatatypeTypeType) (= (AsyncBetree.Step.StutterStep_q d@@326) (= (DatatypeCtorId d@@326) |##AsyncBetree.Step.StutterStep|))) :qid |unknown.0:0| :skolemid |5023| :pattern ( (AsyncBetree.Step.StutterStep_q d@@326)) )))
(assert (forall ((d@@327 T@U) ) (!  (=> (and (= (type d@@327) DatatypeTypeType) (AsyncBetree.Step.StutterStep_q d@@327)) (= d@@327 |#AsyncBetree.Step.StutterStep|)) :qid |unknown.0:0| :skolemid |5024| :pattern ( (AsyncBetree.Step.StutterStep_q d@@327)) )))
(assert ($Is |#AsyncBetree.Step.StutterStep| Tclass.AsyncBetree.Step))
(assert (forall (($h@@266 T@U) ) (!  (=> (and (= (type $h@@266) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@266)) ($IsAlloc |#AsyncBetree.Step.StutterStep| Tclass.AsyncBetree.Step $h@@266)) :qid |DafnyPreludebpl.545:12| :skolemid |5025| :pattern ( ($IsAlloc |#AsyncBetree.Step.StutterStep| Tclass.AsyncBetree.Step $h@@266)) )))
(assert (= |#AsyncBetree.Step.StutterStep| (Lit |#AsyncBetree.Step.StutterStep|)))
(assert (forall ((d@@328 T@U) ) (!  (=> (and (= (type d@@328) DatatypeTypeType) (|$IsA#AsyncBetree.Step| d@@328)) (or (or (or (or (AsyncBetree.Step.BasicStep_q d@@328) (AsyncBetree.Step.QueryBeginStep_q d@@328)) (AsyncBetree.Step.QueryEndStep_q d@@328)) (AsyncBetree.Step.QueryAdvanceStep_q d@@328)) (AsyncBetree.Step.StutterStep_q d@@328))) :qid |unknown.0:0| :skolemid |5026| :pattern ( (|$IsA#AsyncBetree.Step| d@@328)) )))
(assert (forall ((d@@329 T@U) ) (!  (=> (and (= (type d@@329) DatatypeTypeType) ($Is d@@329 Tclass.AsyncBetree.Step)) (or (or (or (or (AsyncBetree.Step.BasicStep_q d@@329) (AsyncBetree.Step.QueryBeginStep_q d@@329)) (AsyncBetree.Step.QueryEndStep_q d@@329)) (AsyncBetree.Step.QueryAdvanceStep_q d@@329)) (AsyncBetree.Step.StutterStep_q d@@329))) :qid |unknown.0:0| :skolemid |5027| :pattern ( (AsyncBetree.Step.StutterStep_q d@@329) ($Is d@@329 Tclass.AsyncBetree.Step)) :pattern ( (AsyncBetree.Step.QueryAdvanceStep_q d@@329) ($Is d@@329 Tclass.AsyncBetree.Step)) :pattern ( (AsyncBetree.Step.QueryEndStep_q d@@329) ($Is d@@329 Tclass.AsyncBetree.Step)) :pattern ( (AsyncBetree.Step.QueryBeginStep_q d@@329) ($Is d@@329 Tclass.AsyncBetree.Step)) :pattern ( (AsyncBetree.Step.BasicStep_q d@@329) ($Is d@@329 Tclass.AsyncBetree.Step)) )))
(assert (forall ((a@@222 T@U) (b@@159 T@U) ) (!  (=> (and (and (= (type a@@222) DatatypeTypeType) (= (type b@@159) DatatypeTypeType)) (and (AsyncBetree.Step.BasicStep_q a@@222) (AsyncBetree.Step.BasicStep_q b@@159))) (= (|AsyncBetree.Step#Equal| a@@222 b@@159) (|Betree.Step#Equal| (AsyncBetree.Step.betreeStep a@@222) (AsyncBetree.Step.betreeStep b@@159)))) :qid |unknown.0:0| :skolemid |5028| :pattern ( (|AsyncBetree.Step#Equal| a@@222 b@@159) (AsyncBetree.Step.BasicStep_q a@@222)) :pattern ( (|AsyncBetree.Step#Equal| a@@222 b@@159) (AsyncBetree.Step.BasicStep_q b@@159)) )))
(assert (forall ((a@@223 T@U) (b@@160 T@U) ) (!  (=> (and (and (= (type a@@223) DatatypeTypeType) (= (type b@@160) DatatypeTypeType)) (and (AsyncBetree.Step.QueryBeginStep_q a@@223) (AsyncBetree.Step.QueryBeginStep_q b@@160))) (= (|AsyncBetree.Step#Equal| a@@223 b@@160) true)) :qid |unknown.0:0| :skolemid |5029| :pattern ( (|AsyncBetree.Step#Equal| a@@223 b@@160) (AsyncBetree.Step.QueryBeginStep_q a@@223)) :pattern ( (|AsyncBetree.Step#Equal| a@@223 b@@160) (AsyncBetree.Step.QueryBeginStep_q b@@160)) )))
(assert (forall ((a@@224 T@U) (b@@161 T@U) ) (!  (=> (and (and (= (type a@@224) DatatypeTypeType) (= (type b@@161) DatatypeTypeType)) (and (AsyncBetree.Step.QueryEndStep_q a@@224) (AsyncBetree.Step.QueryEndStep_q b@@161))) (= (|AsyncBetree.Step#Equal| a@@224 b@@161) true)) :qid |unknown.0:0| :skolemid |5030| :pattern ( (|AsyncBetree.Step#Equal| a@@224 b@@161) (AsyncBetree.Step.QueryEndStep_q a@@224)) :pattern ( (|AsyncBetree.Step#Equal| a@@224 b@@161) (AsyncBetree.Step.QueryEndStep_q b@@161)) )))
(assert (forall ((a@@225 T@U) (b@@162 T@U) ) (!  (=> (and (and (= (type a@@225) DatatypeTypeType) (= (type b@@162) DatatypeTypeType)) (and (AsyncBetree.Step.QueryAdvanceStep_q a@@225) (AsyncBetree.Step.QueryAdvanceStep_q b@@162))) (= (|AsyncBetree.Step#Equal| a@@225 b@@162)  (and (= (AsyncBetree.Step.id a@@225) (AsyncBetree.Step.id b@@162)) (|QueryStates.QueryDescent#Equal| (AsyncBetree.Step.descent a@@225) (AsyncBetree.Step.descent b@@162))))) :qid |unknown.0:0| :skolemid |5031| :pattern ( (|AsyncBetree.Step#Equal| a@@225 b@@162) (AsyncBetree.Step.QueryAdvanceStep_q a@@225)) :pattern ( (|AsyncBetree.Step#Equal| a@@225 b@@162) (AsyncBetree.Step.QueryAdvanceStep_q b@@162)) )))
(assert (forall ((a@@226 T@U) (b@@163 T@U) ) (!  (=> (and (and (= (type a@@226) DatatypeTypeType) (= (type b@@163) DatatypeTypeType)) (and (AsyncBetree.Step.StutterStep_q a@@226) (AsyncBetree.Step.StutterStep_q b@@163))) (= (|AsyncBetree.Step#Equal| a@@226 b@@163) true)) :qid |unknown.0:0| :skolemid |5032| :pattern ( (|AsyncBetree.Step#Equal| a@@226 b@@163) (AsyncBetree.Step.StutterStep_q a@@226)) :pattern ( (|AsyncBetree.Step#Equal| a@@226 b@@163) (AsyncBetree.Step.StutterStep_q b@@163)) )))
(assert (forall ((a@@227 T@U) (b@@164 T@U) ) (!  (=> (and (= (type a@@227) DatatypeTypeType) (= (type b@@164) DatatypeTypeType)) (= (|AsyncBetree.Step#Equal| a@@227 b@@164) (= a@@227 b@@164))) :qid |unknown.0:0| :skolemid |5033| :pattern ( (|AsyncBetree.Step#Equal| a@@227 b@@164)) )))
(assert (= (type Tclass.AsyncBetree.__default) TyType))
(assert (= (Tag Tclass.AsyncBetree.__default) Tagclass.AsyncBetree.__default))
(assert (= (TagFamily Tclass.AsyncBetree.__default) tytagFamily$_default))
(assert (forall ((bx@@202 T@U) ) (!  (=> (and (= (type bx@@202) BoxType) ($IsBox bx@@202 Tclass.AsyncBetree.__default)) (and (= ($Box ($Unbox refType bx@@202)) bx@@202) ($Is ($Unbox refType bx@@202) Tclass.AsyncBetree.__default))) :qid |unknown.0:0| :skolemid |5034| :pattern ( ($IsBox bx@@202 Tclass.AsyncBetree.__default)) )))
(assert (forall (($o@@70 T@U) ) (!  (=> (= (type $o@@70) refType) (= ($Is $o@@70 Tclass.AsyncBetree.__default)  (or (= $o@@70 null) (= (dtype $o@@70) Tclass.AsyncBetree.__default)))) :qid |unknown.0:0| :skolemid |5035| :pattern ( ($Is $o@@70 Tclass.AsyncBetree.__default)) )))
(assert (forall (($o@@71 T@U) ($h@@267 T@U) ) (!  (=> (and (= (type $o@@71) refType) (= (type $h@@267) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@71 Tclass.AsyncBetree.__default $h@@267)  (or (= $o@@71 null) (U_2_bool (MapType1Select (MapType0Select $h@@267 $o@@71) alloc))))) :qid |unknown.0:0| :skolemid |5036| :pattern ( ($IsAlloc $o@@71 Tclass.AsyncBetree.__default $h@@267)) )))
(assert  (=> true (forall ((|s#0@@450| T@U) ) (!  (=> (and (= (type |s#0@@450|) DatatypeTypeType) (or (|AsyncBetree.__default.Init#canCall| |s#0@@450|) ($Is |s#0@@450| Tclass.AsyncBetree.Variables))) true) :qid |AsyncBetreeidfy.24:18| :skolemid |5037| :pattern ( (AsyncBetree.__default.Init |s#0@@450|)) ))))
(assert (forall ((|s#0@@451| T@U) ) (!  (=> (and (= (type |s#0@@451|) DatatypeTypeType) ($Is |s#0@@451| Tclass.AsyncBetree.Variables)) (= (|AsyncBetree.__default.Init#requires| |s#0@@451|) true)) :qid |AsyncBetreeidfy.24:18| :skolemid |5038| :pattern ( (|AsyncBetree.__default.Init#requires| |s#0@@451|)) )))
(assert  (=> true (forall ((|s#0@@452| T@U) ) (!  (=> (and (= (type |s#0@@452|) DatatypeTypeType) (or (|AsyncBetree.__default.Init#canCall| |s#0@@452|) ($Is |s#0@@452| Tclass.AsyncBetree.Variables))) (and (and (and (AsyncBetree.Variables.Variables_q |s#0@@452|) (|Betree.__default.Init#canCall| (AsyncBetree.Variables.betree |s#0@@452|))) (=> (Betree.__default.Init (AsyncBetree.Variables.betree |s#0@@452|)) (AsyncBetree.Variables.Variables_q |s#0@@452|))) (= (AsyncBetree.__default.Init |s#0@@452|)  (and (Betree.__default.Init (AsyncBetree.Variables.betree |s#0@@452|)) (|Map#Equal| (AsyncBetree.Variables.queries |s#0@@452|) (|Map#Empty| BoxType BoxType)))))) :qid |AsyncBetreeidfy.24:18| :skolemid |5039| :pattern ( (AsyncBetree.__default.Init |s#0@@452|)) ))))
(assert  (=> true (forall ((|s#0@@453| T@U) ) (!  (=> (and (= (type |s#0@@453|) DatatypeTypeType) (or (|AsyncBetree.__default.Init#canCall| (Lit |s#0@@453|)) ($Is |s#0@@453| Tclass.AsyncBetree.Variables))) (and (and (and (AsyncBetree.Variables.Variables_q (Lit |s#0@@453|)) (|Betree.__default.Init#canCall| (Lit (AsyncBetree.Variables.betree (Lit |s#0@@453|))))) (=> (U_2_bool (Lit (bool_2_U (Betree.__default.Init (Lit (AsyncBetree.Variables.betree (Lit |s#0@@453|))))))) (AsyncBetree.Variables.Variables_q (Lit |s#0@@453|)))) (= (AsyncBetree.__default.Init (Lit |s#0@@453|))  (and (Betree.__default.Init (Lit (AsyncBetree.Variables.betree (Lit |s#0@@453|)))) (|Map#Equal| (AsyncBetree.Variables.queries (Lit |s#0@@453|)) (|Map#Empty| BoxType BoxType)))))) :qid |AsyncBetreeidfy.24:18| :weight 3 :skolemid |5040| :pattern ( (AsyncBetree.__default.Init (Lit |s#0@@453|))) ))))
(assert  (=> true (forall ((|ref#0@@50| T@U) (|queries#0| T@U) ) (!  (=> (and (and (= (type |ref#0@@50|) BoxType) (= (type |queries#0|) (MapType BoxType BoxType))) (or (|AsyncBetree.__default.AvoidsQueries#canCall| |ref#0@@50| |queries#0|) (and ($IsBox |ref#0@@50| Tclass.ReferenceType.Reference) ($Is |queries#0| (TMap TInt Tclass.QueryStates.QueryState))))) true) :qid |AsyncBetreeidfy.37:27| :skolemid |5041| :pattern ( (AsyncBetree.__default.AvoidsQueries |ref#0@@50| |queries#0|)) ))))
(assert (forall ((|ref#0@@51| T@U) (|queries#0@@0| T@U) ) (!  (=> (and (and (= (type |ref#0@@51|) BoxType) (= (type |queries#0@@0|) (MapType BoxType BoxType))) (and ($IsBox |ref#0@@51| Tclass.ReferenceType.Reference) ($Is |queries#0@@0| (TMap TInt Tclass.QueryStates.QueryState)))) (= (|AsyncBetree.__default.AvoidsQueries#requires| |ref#0@@51| |queries#0@@0|) true)) :qid |AsyncBetreeidfy.37:27| :skolemid |5042| :pattern ( (|AsyncBetree.__default.AvoidsQueries#requires| |ref#0@@51| |queries#0@@0|)) )))
(assert  (=> true (forall ((|ref#0@@52| T@U) (|queries#0@@1| T@U) ) (!  (=> (and (and (= (type |ref#0@@52|) BoxType) (= (type |queries#0@@1|) (MapType BoxType BoxType))) (or (|AsyncBetree.__default.AvoidsQueries#canCall| |ref#0@@52| |queries#0@@1|) (and ($IsBox |ref#0@@52| Tclass.ReferenceType.Reference) ($Is |queries#0@@1| (TMap TInt Tclass.QueryStates.QueryState))))) (= (AsyncBetree.__default.AvoidsQueries |ref#0@@52| |queries#0@@1|) (forall ((|q#0@@39| T@U) ) (!  (=> (= (type |q#0@@39|) DatatypeTypeType) (=> (and ($Is |q#0@@39| Tclass.QueryStates.QueryState) (and (U_2_bool (MapType0Select (|Map#Values| |queries#0@@1|) ($Box |q#0@@39|))) (QueryStates.QueryState.InProgress_q |q#0@@39|))) (not (= |ref#0@@52| (QueryStates.QueryState.ref |q#0@@39|))))) :qid |AsyncBetreeidfy.39:12| :skolemid |5043| :pattern ( (QueryStates.QueryState.ref |q#0@@39|)) :pattern ( (QueryStates.QueryState.InProgress_q |q#0@@39|)) :pattern ( (MapType0Select (|Map#Values| |queries#0@@1|) ($Box |q#0@@39|))) )))) :qid |AsyncBetreeidfy.37:27| :skolemid |5044| :pattern ( (AsyncBetree.__default.AvoidsQueries |ref#0@@52| |queries#0@@1|)) ))))
(assert  (=> true (forall ((|ref#0@@53| T@U) (|queries#0@@2| T@U) ) (!  (=> (and (and (= (type |ref#0@@53|) BoxType) (= (type |queries#0@@2|) (MapType BoxType BoxType))) (or (|AsyncBetree.__default.AvoidsQueries#canCall| |ref#0@@53| (Lit |queries#0@@2|)) (and ($IsBox |ref#0@@53| Tclass.ReferenceType.Reference) ($Is |queries#0@@2| (TMap TInt Tclass.QueryStates.QueryState))))) (= (AsyncBetree.__default.AvoidsQueries |ref#0@@53| (Lit |queries#0@@2|)) (forall ((|q#1@@3| T@U) ) (!  (=> (= (type |q#1@@3|) DatatypeTypeType) (=> (and ($Is |q#1@@3| Tclass.QueryStates.QueryState) (and (U_2_bool (MapType0Select (Lit (|Map#Values| (Lit |queries#0@@2|))) ($Box |q#1@@3|))) (QueryStates.QueryState.InProgress_q |q#1@@3|))) (not (= |ref#0@@53| (QueryStates.QueryState.ref |q#1@@3|))))) :qid |AsyncBetreeidfy.39:12| :skolemid |5045| :pattern ( (QueryStates.QueryState.ref |q#1@@3|)) :pattern ( (QueryStates.QueryState.InProgress_q |q#1@@3|)) :pattern ( (MapType0Select (|Map#Values| |queries#0@@2|) ($Box |q#1@@3|))) )))) :qid |AsyncBetreeidfy.37:27| :weight 3 :skolemid |5046| :pattern ( (AsyncBetree.__default.AvoidsQueries |ref#0@@53| (Lit |queries#0@@2|))) ))))
(assert  (=> true (forall ((|ref#0@@54| T@U) (|queries#0@@3| T@U) ) (!  (=> (and (and (= (type |ref#0@@54|) BoxType) (= (type |queries#0@@3|) (MapType BoxType BoxType))) (or (|AsyncBetree.__default.AvoidsQueries#canCall| (Lit |ref#0@@54|) (Lit |queries#0@@3|)) (and ($IsBox |ref#0@@54| Tclass.ReferenceType.Reference) ($Is |queries#0@@3| (TMap TInt Tclass.QueryStates.QueryState))))) (= (AsyncBetree.__default.AvoidsQueries (Lit |ref#0@@54|) (Lit |queries#0@@3|)) (forall ((|q#2@@3| T@U) ) (!  (=> (= (type |q#2@@3|) DatatypeTypeType) (=> (and ($Is |q#2@@3| Tclass.QueryStates.QueryState) (and (U_2_bool (MapType0Select (Lit (|Map#Values| (Lit |queries#0@@3|))) ($Box |q#2@@3|))) (QueryStates.QueryState.InProgress_q |q#2@@3|))) (not (= |ref#0@@54| (QueryStates.QueryState.ref |q#2@@3|))))) :qid |AsyncBetreeidfy.39:12| :skolemid |5047| :pattern ( (QueryStates.QueryState.ref |q#2@@3|)) :pattern ( (QueryStates.QueryState.InProgress_q |q#2@@3|)) :pattern ( (MapType0Select (|Map#Values| |queries#0@@3|) ($Box |q#2@@3|))) )))) :qid |AsyncBetreeidfy.37:27| :weight 3 :skolemid |5048| :pattern ( (AsyncBetree.__default.AvoidsQueries (Lit |ref#0@@54|) (Lit |queries#0@@3|))) ))))
(assert  (=> true (forall ((|s#0@@454| T@U) (|s'#0@@161| T@U) (|uiop#0@@77| T@U) (|betreeStep#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@454|) DatatypeTypeType) (= (type |s'#0@@161|) DatatypeTypeType)) (= (type |uiop#0@@77|) DatatypeTypeType)) (= (type |betreeStep#0@@4|) DatatypeTypeType)) (or (|AsyncBetree.__default.Basic#canCall| |s#0@@454| |s'#0@@161| |uiop#0@@77| |betreeStep#0@@4|) (and (and (and ($Is |s#0@@454| Tclass.AsyncBetree.Variables) ($Is |s'#0@@161| Tclass.AsyncBetree.Variables)) ($Is |uiop#0@@77| Tclass.UI.Op)) ($Is |betreeStep#0@@4| Tclass.Betree.Step)))) true) :qid |AsyncBetreeidfy.42:19| :skolemid |5049| :pattern ( (AsyncBetree.__default.Basic |s#0@@454| |s'#0@@161| |uiop#0@@77| |betreeStep#0@@4|)) ))))
(assert (forall ((|s#0@@455| T@U) (|s'#0@@162| T@U) (|uiop#0@@78| T@U) (|betreeStep#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@455|) DatatypeTypeType) (= (type |s'#0@@162|) DatatypeTypeType)) (= (type |uiop#0@@78|) DatatypeTypeType)) (= (type |betreeStep#0@@5|) DatatypeTypeType)) (and (and (and ($Is |s#0@@455| Tclass.AsyncBetree.Variables) ($Is |s'#0@@162| Tclass.AsyncBetree.Variables)) ($Is |uiop#0@@78| Tclass.UI.Op)) ($Is |betreeStep#0@@5| Tclass.Betree.Step))) (= (|AsyncBetree.__default.Basic#requires| |s#0@@455| |s'#0@@162| |uiop#0@@78| |betreeStep#0@@5|) true)) :qid |AsyncBetreeidfy.42:19| :skolemid |5050| :pattern ( (|AsyncBetree.__default.Basic#requires| |s#0@@455| |s'#0@@162| |uiop#0@@78| |betreeStep#0@@5|)) )))
(assert  (=> true (forall ((|s#0@@456| T@U) (|s'#0@@163| T@U) (|uiop#0@@79| T@U) (|betreeStep#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@456|) DatatypeTypeType) (= (type |s'#0@@163|) DatatypeTypeType)) (= (type |uiop#0@@79|) DatatypeTypeType)) (= (type |betreeStep#0@@6|) DatatypeTypeType)) (or (|AsyncBetree.__default.Basic#canCall| |s#0@@456| |s'#0@@163| |uiop#0@@79| |betreeStep#0@@6|) (and (and (and ($Is |s#0@@456| Tclass.AsyncBetree.Variables) ($Is |s'#0@@163| Tclass.AsyncBetree.Variables)) ($Is |uiop#0@@79| Tclass.UI.Op)) ($Is |betreeStep#0@@6| Tclass.Betree.Step)))) (and (and (and (AsyncBetree.Variables.Variables_q |s'#0@@163|) (AsyncBetree.Variables.Variables_q |s#0@@456|)) (=> (|Map#Equal| (AsyncBetree.Variables.queries |s'#0@@163|) (AsyncBetree.Variables.queries |s#0@@456|)) (and (and (and (AsyncBetree.Variables.Variables_q |s#0@@456|) (AsyncBetree.Variables.Variables_q |s'#0@@163|)) (|Betree.__default.NextStep#canCall| (AsyncBetree.Variables.betree |s#0@@456|) (AsyncBetree.Variables.betree |s'#0@@163|) |uiop#0@@79| |betreeStep#0@@6|)) (=> (Betree.__default.NextStep (AsyncBetree.Variables.betree |s#0@@456|) (AsyncBetree.Variables.betree |s'#0@@163|) |uiop#0@@79| |betreeStep#0@@6|) (and (=> (Betree.Step.BetreeStep_q |betreeStep#0@@6|) (=> (BetreeSpec.BetreeStep.BetreeInsert_q (Betree.Step.step |betreeStep#0@@6|)) (and (and |BetreeGraph.__default.Root#canCall| (AsyncBetree.Variables.Variables_q |s#0@@456|)) (|AsyncBetree.__default.AvoidsQueries#canCall| (Lit BetreeGraph.__default.Root) (AsyncBetree.Variables.queries |s#0@@456|))))) (=> (=> (and (Betree.Step.BetreeStep_q |betreeStep#0@@6|) (BetreeSpec.BetreeStep.BetreeInsert_q (Betree.Step.step |betreeStep#0@@6|))) (AsyncBetree.__default.AvoidsQueries (Lit BetreeGraph.__default.Root) (AsyncBetree.Variables.queries |s#0@@456|))) (=> (Betree.Step.GCStep_q |betreeStep#0@@6|) (forall ((|r#0| T@U) ) (!  (=> (and (and (= (type |r#0|) BoxType) ($IsBox |r#0| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (Betree.Step.refs |betreeStep#0@@6|) |r#0|))) (and (AsyncBetree.Variables.Variables_q |s#0@@456|) (|AsyncBetree.__default.AvoidsQueries#canCall| |r#0| (AsyncBetree.Variables.queries |s#0@@456|)))) :qid |AsyncBetreeidfy.48:39| :skolemid |5052| :pattern ( (AsyncBetree.__default.AvoidsQueries |r#0| (AsyncBetree.Variables.queries |s#0@@456|))) :pattern ( (MapType0Select (Betree.Step.refs |betreeStep#0@@6|) |r#0|)) ))))))))) (= (AsyncBetree.__default.Basic |s#0@@456| |s'#0@@163| |uiop#0@@79| |betreeStep#0@@6|)  (and (and (and (|Map#Equal| (AsyncBetree.Variables.queries |s'#0@@163|) (AsyncBetree.Variables.queries |s#0@@456|)) (Betree.__default.NextStep (AsyncBetree.Variables.betree |s#0@@456|) (AsyncBetree.Variables.betree |s'#0@@163|) |uiop#0@@79| |betreeStep#0@@6|)) (=> (and (Betree.Step.BetreeStep_q |betreeStep#0@@6|) (BetreeSpec.BetreeStep.BetreeInsert_q (Betree.Step.step |betreeStep#0@@6|))) (AsyncBetree.__default.AvoidsQueries (Lit BetreeGraph.__default.Root) (AsyncBetree.Variables.queries |s#0@@456|)))) (=> (Betree.Step.GCStep_q |betreeStep#0@@6|) (forall ((|r#0@@0| T@U) ) (!  (=> (= (type |r#0@@0|) BoxType) (=> (and ($IsBox |r#0@@0| Tclass.ReferenceType.Reference) (U_2_bool (MapType0Select (Betree.Step.refs |betreeStep#0@@6|) |r#0@@0|))) (AsyncBetree.__default.AvoidsQueries |r#0@@0| (AsyncBetree.Variables.queries |s#0@@456|)))) :qid |AsyncBetreeidfy.48:39| :skolemid |5051| :pattern ( (AsyncBetree.__default.AvoidsQueries |r#0@@0| (AsyncBetree.Variables.queries |s#0@@456|))) :pattern ( (MapType0Select (Betree.Step.refs |betreeStep#0@@6|) |r#0@@0|)) ))))))) :qid |AsyncBetreeidfy.42:19| :skolemid |5053| :pattern ( (AsyncBetree.__default.Basic |s#0@@456| |s'#0@@163| |uiop#0@@79| |betreeStep#0@@6|)) ))))
(assert  (=> true (forall ((|s#0@@457| T@U) (|s'#0@@164| T@U) (|uiop#0@@80| T@U) (|betreeStep#0@@7| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@457|) DatatypeTypeType) (= (type |s'#0@@164|) DatatypeTypeType)) (= (type |uiop#0@@80|) DatatypeTypeType)) (= (type |betreeStep#0@@7|) DatatypeTypeType)) (or (|AsyncBetree.__default.Basic#canCall| (Lit |s#0@@457|) (Lit |s'#0@@164|) (Lit |uiop#0@@80|) (Lit |betreeStep#0@@7|)) (and (and (and ($Is |s#0@@457| Tclass.AsyncBetree.Variables) ($Is |s'#0@@164| Tclass.AsyncBetree.Variables)) ($Is |uiop#0@@80| Tclass.UI.Op)) ($Is |betreeStep#0@@7| Tclass.Betree.Step)))) (and (and (and (AsyncBetree.Variables.Variables_q (Lit |s'#0@@164|)) (AsyncBetree.Variables.Variables_q (Lit |s#0@@457|))) (=> (|Map#Equal| (AsyncBetree.Variables.queries (Lit |s'#0@@164|)) (AsyncBetree.Variables.queries (Lit |s#0@@457|))) (and (and (and (AsyncBetree.Variables.Variables_q (Lit |s#0@@457|)) (AsyncBetree.Variables.Variables_q (Lit |s'#0@@164|))) (|Betree.__default.NextStep#canCall| (Lit (AsyncBetree.Variables.betree (Lit |s#0@@457|))) (Lit (AsyncBetree.Variables.betree (Lit |s'#0@@164|))) (Lit |uiop#0@@80|) (Lit |betreeStep#0@@7|))) (=> (U_2_bool (Lit (bool_2_U (Betree.__default.NextStep (Lit (AsyncBetree.Variables.betree (Lit |s#0@@457|))) (Lit (AsyncBetree.Variables.betree (Lit |s'#0@@164|))) (Lit |uiop#0@@80|) (Lit |betreeStep#0@@7|))))) (and (=> (U_2_bool (Lit (bool_2_U (Betree.Step.BetreeStep_q (Lit |betreeStep#0@@7|))))) (=> (U_2_bool (Lit (bool_2_U (BetreeSpec.BetreeStep.BetreeInsert_q (Lit (Betree.Step.step (Lit |betreeStep#0@@7|))))))) (and (and |BetreeGraph.__default.Root#canCall| (AsyncBetree.Variables.Variables_q (Lit |s#0@@457|))) (|AsyncBetree.__default.AvoidsQueries#canCall| (Lit BetreeGraph.__default.Root) (Lit (AsyncBetree.Variables.queries (Lit |s#0@@457|))))))) (=> (U_2_bool (Lit (bool_2_U  (=> (and (Betree.Step.BetreeStep_q (Lit |betreeStep#0@@7|)) (BetreeSpec.BetreeStep.BetreeInsert_q (Lit (Betree.Step.step (Lit |betreeStep#0@@7|))))) (AsyncBetree.__default.AvoidsQueries (Lit BetreeGraph.__default.Root) (Lit (AsyncBetree.Variables.queries (Lit |s#0@@457|)))))))) (=> (U_2_bool (Lit (bool_2_U (Betree.Step.GCStep_q (Lit |betreeStep#0@@7|))))) (forall ((|r#1| T@U) ) (!  (=> (and (and (= (type |r#1|) BoxType) ($IsBox |r#1| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (Lit (Betree.Step.refs (Lit |betreeStep#0@@7|))) |r#1|))) (and (AsyncBetree.Variables.Variables_q (Lit |s#0@@457|)) (|AsyncBetree.__default.AvoidsQueries#canCall| |r#1| (Lit (AsyncBetree.Variables.queries (Lit |s#0@@457|)))))) :qid |AsyncBetreeidfy.48:39| :skolemid |5055| :pattern ( (AsyncBetree.__default.AvoidsQueries |r#1| (AsyncBetree.Variables.queries |s#0@@457|))) :pattern ( (MapType0Select (Betree.Step.refs |betreeStep#0@@7|) |r#1|)) ))))))))) (= (AsyncBetree.__default.Basic (Lit |s#0@@457|) (Lit |s'#0@@164|) (Lit |uiop#0@@80|) (Lit |betreeStep#0@@7|))  (and (and (and (|Map#Equal| (AsyncBetree.Variables.queries (Lit |s'#0@@164|)) (AsyncBetree.Variables.queries (Lit |s#0@@457|))) (Betree.__default.NextStep (Lit (AsyncBetree.Variables.betree (Lit |s#0@@457|))) (Lit (AsyncBetree.Variables.betree (Lit |s'#0@@164|))) (Lit |uiop#0@@80|) (Lit |betreeStep#0@@7|))) (=> (and (Betree.Step.BetreeStep_q (Lit |betreeStep#0@@7|)) (BetreeSpec.BetreeStep.BetreeInsert_q (Lit (Betree.Step.step (Lit |betreeStep#0@@7|))))) (AsyncBetree.__default.AvoidsQueries (Lit BetreeGraph.__default.Root) (Lit (AsyncBetree.Variables.queries (Lit |s#0@@457|)))))) (=> (Betree.Step.GCStep_q (Lit |betreeStep#0@@7|)) (forall ((|r#1@@0| T@U) ) (!  (=> (= (type |r#1@@0|) BoxType) (=> (and ($IsBox |r#1@@0| Tclass.ReferenceType.Reference) (U_2_bool (MapType0Select (Lit (Betree.Step.refs (Lit |betreeStep#0@@7|))) |r#1@@0|))) (AsyncBetree.__default.AvoidsQueries |r#1@@0| (Lit (AsyncBetree.Variables.queries (Lit |s#0@@457|)))))) :qid |AsyncBetreeidfy.48:39| :skolemid |5054| :pattern ( (AsyncBetree.__default.AvoidsQueries |r#1@@0| (AsyncBetree.Variables.queries |s#0@@457|))) :pattern ( (MapType0Select (Betree.Step.refs |betreeStep#0@@7|) |r#1@@0|)) ))))))) :qid |AsyncBetreeidfy.42:19| :weight 3 :skolemid |5056| :pattern ( (AsyncBetree.__default.Basic (Lit |s#0@@457|) (Lit |s'#0@@164|) (Lit |uiop#0@@80|) (Lit |betreeStep#0@@7|))) ))))
(assert  (=> true (forall ((|s#0@@458| T@U) (|s'#0@@165| T@U) (|uiop#0@@81| T@U) ) (!  (=> (and (and (and (= (type |s#0@@458|) DatatypeTypeType) (= (type |s'#0@@165|) DatatypeTypeType)) (= (type |uiop#0@@81|) DatatypeTypeType)) (or (|AsyncBetree.__default.QueryBegin#canCall| |s#0@@458| |s'#0@@165| |uiop#0@@81|) (and (and ($Is |s#0@@458| Tclass.AsyncBetree.Variables) ($Is |s'#0@@165| Tclass.AsyncBetree.Variables)) ($Is |uiop#0@@81| Tclass.UI.Op)))) true) :qid |AsyncBetreeidfy.51:24| :skolemid |5057| :pattern ( (AsyncBetree.__default.QueryBegin |s#0@@458| |s'#0@@165| |uiop#0@@81|)) ))))
(assert (forall ((|s#0@@459| T@U) (|s'#0@@166| T@U) (|uiop#0@@82| T@U) ) (!  (=> (and (and (and (= (type |s#0@@459|) DatatypeTypeType) (= (type |s'#0@@166|) DatatypeTypeType)) (= (type |uiop#0@@82|) DatatypeTypeType)) (and (and ($Is |s#0@@459| Tclass.AsyncBetree.Variables) ($Is |s'#0@@166| Tclass.AsyncBetree.Variables)) ($Is |uiop#0@@82| Tclass.UI.Op))) (= (|AsyncBetree.__default.QueryBegin#requires| |s#0@@459| |s'#0@@166| |uiop#0@@82|) true)) :qid |AsyncBetreeidfy.51:24| :skolemid |5058| :pattern ( (|AsyncBetree.__default.QueryBegin#requires| |s#0@@459| |s'#0@@166| |uiop#0@@82|)) )))
(assert  (=> true (forall ((|s#0@@460| T@U) (|s'#0@@167| T@U) (|uiop#0@@83| T@U) ) (!  (=> (and (and (and (= (type |s#0@@460|) DatatypeTypeType) (= (type |s'#0@@167|) DatatypeTypeType)) (= (type |uiop#0@@83|) DatatypeTypeType)) (or (|AsyncBetree.__default.QueryBegin#canCall| |s#0@@460| |s'#0@@167| |uiop#0@@83|) (and (and ($Is |s#0@@460| Tclass.AsyncBetree.Variables) ($Is |s'#0@@167| Tclass.AsyncBetree.Variables)) ($Is |uiop#0@@83| Tclass.UI.Op)))) (and (=> (UI.Op.GetBeginOp_q |uiop#0@@83|) (and (AsyncBetree.Variables.Variables_q |s#0@@460|) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s#0@@460|)) ($Box (int_2_U (UI.Op.id |uiop#0@@83|)))))) (and (and (and (|$IsA#Betree.Variables| (AsyncBetree.Variables.betree |s'#0@@167|)) (|$IsA#Betree.Variables| (AsyncBetree.Variables.betree |s#0@@460|))) (and (AsyncBetree.Variables.Variables_q |s'#0@@167|) (AsyncBetree.Variables.Variables_q |s#0@@460|))) (=> (|Betree.Variables#Equal| (AsyncBetree.Variables.betree |s'#0@@167|) (AsyncBetree.Variables.betree |s#0@@460|)) (and (AsyncBetree.Variables.Variables_q |s'#0@@167|) (and (AsyncBetree.Variables.Variables_q |s#0@@460|) (and |ValueMessage.__default.NopDelta#canCall| |BetreeGraph.__default.Root#canCall|)))))))) (= (AsyncBetree.__default.QueryBegin |s#0@@460| |s'#0@@167| |uiop#0@@83|)  (and (and (and (UI.Op.GetBeginOp_q |uiop#0@@83|) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s#0@@460|)) ($Box (int_2_U (UI.Op.id |uiop#0@@83|))))))) (|Betree.Variables#Equal| (AsyncBetree.Variables.betree |s'#0@@167|) (AsyncBetree.Variables.betree |s#0@@460|))) (|Map#Equal| (AsyncBetree.Variables.queries |s'#0@@167|) (|Map#Build| (AsyncBetree.Variables.queries |s#0@@460|) ($Box (int_2_U (UI.Op.id |uiop#0@@83|))) ($Box (|#QueryStates.QueryState.InProgress| (UI.Op.key |uiop#0@@83|) (Lit ValueMessage.__default.NopDelta) (Lit BetreeGraph.__default.Root))))))))) :qid |AsyncBetreeidfy.51:24| :skolemid |5059| :pattern ( (AsyncBetree.__default.QueryBegin |s#0@@460| |s'#0@@167| |uiop#0@@83|)) ))))
(assert  (=> true (forall ((|s#0@@461| T@U) (|s'#0@@168| T@U) (|uiop#0@@84| T@U) ) (!  (=> (and (and (and (= (type |s#0@@461|) DatatypeTypeType) (= (type |s'#0@@168|) DatatypeTypeType)) (= (type |uiop#0@@84|) DatatypeTypeType)) (or (|AsyncBetree.__default.QueryBegin#canCall| (Lit |s#0@@461|) (Lit |s'#0@@168|) (Lit |uiop#0@@84|)) (and (and ($Is |s#0@@461| Tclass.AsyncBetree.Variables) ($Is |s'#0@@168| Tclass.AsyncBetree.Variables)) ($Is |uiop#0@@84| Tclass.UI.Op)))) (and (=> (U_2_bool (Lit (bool_2_U (UI.Op.GetBeginOp_q (Lit |uiop#0@@84|))))) (and (AsyncBetree.Variables.Variables_q (Lit |s#0@@461|)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries (Lit |s#0@@461|))) ($Box (int_2_U (UI.Op.id (Lit |uiop#0@@84|))))))) (and (and (and (|$IsA#Betree.Variables| (Lit (AsyncBetree.Variables.betree (Lit |s'#0@@168|)))) (|$IsA#Betree.Variables| (Lit (AsyncBetree.Variables.betree (Lit |s#0@@461|))))) (and (AsyncBetree.Variables.Variables_q (Lit |s'#0@@168|)) (AsyncBetree.Variables.Variables_q (Lit |s#0@@461|)))) (=> (|Betree.Variables#Equal| (AsyncBetree.Variables.betree (Lit |s'#0@@168|)) (AsyncBetree.Variables.betree (Lit |s#0@@461|))) (and (AsyncBetree.Variables.Variables_q (Lit |s'#0@@168|)) (and (AsyncBetree.Variables.Variables_q (Lit |s#0@@461|)) (and |ValueMessage.__default.NopDelta#canCall| |BetreeGraph.__default.Root#canCall|)))))))) (= (AsyncBetree.__default.QueryBegin (Lit |s#0@@461|) (Lit |s'#0@@168|) (Lit |uiop#0@@84|))  (and (and (and (UI.Op.GetBeginOp_q (Lit |uiop#0@@84|)) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries (Lit |s#0@@461|))) ($Box (int_2_U (UI.Op.id (Lit |uiop#0@@84|)))))))) (|Betree.Variables#Equal| (AsyncBetree.Variables.betree (Lit |s'#0@@168|)) (AsyncBetree.Variables.betree (Lit |s#0@@461|)))) (|Map#Equal| (AsyncBetree.Variables.queries (Lit |s'#0@@168|)) (|Map#Build| (Lit (AsyncBetree.Variables.queries (Lit |s#0@@461|))) ($Box (int_2_U (LitInt (UI.Op.id (Lit |uiop#0@@84|))))) ($Box (Lit (|#QueryStates.QueryState.InProgress| (Lit (UI.Op.key (Lit |uiop#0@@84|))) (Lit ValueMessage.__default.NopDelta) (Lit BetreeGraph.__default.Root)))))))))) :qid |AsyncBetreeidfy.51:24| :weight 3 :skolemid |5060| :pattern ( (AsyncBetree.__default.QueryBegin (Lit |s#0@@461|) (Lit |s'#0@@168|) (Lit |uiop#0@@84|))) ))))
(assert  (=> true (forall ((|s#0@@462| T@U) (|s'#0@@169| T@U) (|uiop#0@@85| T@U) ) (!  (=> (and (and (and (= (type |s#0@@462|) DatatypeTypeType) (= (type |s'#0@@169|) DatatypeTypeType)) (= (type |uiop#0@@85|) DatatypeTypeType)) (or (|AsyncBetree.__default.QueryEnd#canCall| |s#0@@462| |s'#0@@169| |uiop#0@@85|) (and (and ($Is |s#0@@462| Tclass.AsyncBetree.Variables) ($Is |s'#0@@169| Tclass.AsyncBetree.Variables)) ($Is |uiop#0@@85| Tclass.UI.Op)))) true) :qid |AsyncBetreeidfy.60:22| :skolemid |5061| :pattern ( (AsyncBetree.__default.QueryEnd |s#0@@462| |s'#0@@169| |uiop#0@@85|)) ))))
(assert (forall ((|s#0@@463| T@U) (|s'#0@@170| T@U) (|uiop#0@@86| T@U) ) (!  (=> (and (and (and (= (type |s#0@@463|) DatatypeTypeType) (= (type |s'#0@@170|) DatatypeTypeType)) (= (type |uiop#0@@86|) DatatypeTypeType)) (and (and ($Is |s#0@@463| Tclass.AsyncBetree.Variables) ($Is |s'#0@@170| Tclass.AsyncBetree.Variables)) ($Is |uiop#0@@86| Tclass.UI.Op))) (= (|AsyncBetree.__default.QueryEnd#requires| |s#0@@463| |s'#0@@170| |uiop#0@@86|) true)) :qid |AsyncBetreeidfy.60:22| :skolemid |5062| :pattern ( (|AsyncBetree.__default.QueryEnd#requires| |s#0@@463| |s'#0@@170| |uiop#0@@86|)) )))
(assert  (=> true (forall ((|s#0@@464| T@U) (|s'#0@@171| T@U) (|uiop#0@@87| T@U) ) (!  (=> (and (and (and (= (type |s#0@@464|) DatatypeTypeType) (= (type |s'#0@@171|) DatatypeTypeType)) (= (type |uiop#0@@87|) DatatypeTypeType)) (or (|AsyncBetree.__default.QueryEnd#canCall| |s#0@@464| |s'#0@@171| |uiop#0@@87|) (and (and ($Is |s#0@@464| Tclass.AsyncBetree.Variables) ($Is |s'#0@@171| Tclass.AsyncBetree.Variables)) ($Is |uiop#0@@87| Tclass.UI.Op)))) (and (=> (UI.Op.GetEndOp_q |uiop#0@@87|) (and (AsyncBetree.Variables.Variables_q |s#0@@464|) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s#0@@464|)) ($Box (int_2_U (UI.Op.id |uiop#0@@87|))))) (and (and (and (|$IsA#Betree.Variables| (AsyncBetree.Variables.betree |s'#0@@171|)) (|$IsA#Betree.Variables| (AsyncBetree.Variables.betree |s#0@@464|))) (and (AsyncBetree.Variables.Variables_q |s'#0@@171|) (AsyncBetree.Variables.Variables_q |s#0@@464|))) (=> (|Betree.Variables#Equal| (AsyncBetree.Variables.betree |s'#0@@171|) (AsyncBetree.Variables.betree |s#0@@464|)) (and (and (AsyncBetree.Variables.Variables_q |s'#0@@171|) (and (AsyncBetree.Variables.Variables_q |s#0@@464|) (|Maps.__default.MapRemove1#canCall| TInt Tclass.QueryStates.QueryState (AsyncBetree.Variables.queries |s#0@@464|) ($Box (int_2_U (UI.Op.id |uiop#0@@87|)))))) (=> (|Map#Equal| (AsyncBetree.Variables.queries |s'#0@@171|) (Maps.__default.MapRemove1 TInt Tclass.QueryStates.QueryState (AsyncBetree.Variables.queries |s#0@@464|) ($Box (int_2_U (UI.Op.id |uiop#0@@87|))))) (and (AsyncBetree.Variables.Variables_q |s#0@@464|) (=> (QueryStates.QueryState.Finished_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s#0@@464|)) ($Box (int_2_U (UI.Op.id |uiop#0@@87|)))))) (AsyncBetree.Variables.Variables_q |s#0@@464|)))))))))) (= (AsyncBetree.__default.QueryEnd |s#0@@464| |s'#0@@171| |uiop#0@@87|)  (and (and (and (and (and (UI.Op.GetEndOp_q |uiop#0@@87|) (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s#0@@464|)) ($Box (int_2_U (UI.Op.id |uiop#0@@87|)))))) (|Betree.Variables#Equal| (AsyncBetree.Variables.betree |s'#0@@171|) (AsyncBetree.Variables.betree |s#0@@464|))) (|Map#Equal| (AsyncBetree.Variables.queries |s'#0@@171|) (Maps.__default.MapRemove1 TInt Tclass.QueryStates.QueryState (AsyncBetree.Variables.queries |s#0@@464|) ($Box (int_2_U (UI.Op.id |uiop#0@@87|)))))) (QueryStates.QueryState.Finished_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s#0@@464|)) ($Box (int_2_U (UI.Op.id |uiop#0@@87|))))))) (|Seq#Equal| (UI.Op.value |uiop#0@@87|) (QueryStates.QueryState.answer ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s#0@@464|)) ($Box (int_2_U (UI.Op.id |uiop#0@@87|))))))))))) :qid |AsyncBetreeidfy.60:22| :skolemid |5063| :pattern ( (AsyncBetree.__default.QueryEnd |s#0@@464| |s'#0@@171| |uiop#0@@87|)) ))))
(assert  (=> true (forall ((|s#0@@465| T@U) (|s'#0@@172| T@U) (|uiop#0@@88| T@U) ) (!  (=> (and (and (and (= (type |s#0@@465|) DatatypeTypeType) (= (type |s'#0@@172|) DatatypeTypeType)) (= (type |uiop#0@@88|) DatatypeTypeType)) (or (|AsyncBetree.__default.QueryEnd#canCall| (Lit |s#0@@465|) (Lit |s'#0@@172|) (Lit |uiop#0@@88|)) (and (and ($Is |s#0@@465| Tclass.AsyncBetree.Variables) ($Is |s'#0@@172| Tclass.AsyncBetree.Variables)) ($Is |uiop#0@@88| Tclass.UI.Op)))) (and (=> (U_2_bool (Lit (bool_2_U (UI.Op.GetEndOp_q (Lit |uiop#0@@88|))))) (and (AsyncBetree.Variables.Variables_q (Lit |s#0@@465|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries (Lit |s#0@@465|))) ($Box (int_2_U (UI.Op.id (Lit |uiop#0@@88|)))))) (and (and (and (|$IsA#Betree.Variables| (Lit (AsyncBetree.Variables.betree (Lit |s'#0@@172|)))) (|$IsA#Betree.Variables| (Lit (AsyncBetree.Variables.betree (Lit |s#0@@465|))))) (and (AsyncBetree.Variables.Variables_q (Lit |s'#0@@172|)) (AsyncBetree.Variables.Variables_q (Lit |s#0@@465|)))) (=> (|Betree.Variables#Equal| (AsyncBetree.Variables.betree (Lit |s'#0@@172|)) (AsyncBetree.Variables.betree (Lit |s#0@@465|))) (and (and (AsyncBetree.Variables.Variables_q (Lit |s'#0@@172|)) (and (AsyncBetree.Variables.Variables_q (Lit |s#0@@465|)) (|Maps.__default.MapRemove1#canCall| TInt Tclass.QueryStates.QueryState (Lit (AsyncBetree.Variables.queries (Lit |s#0@@465|))) ($Box (int_2_U (LitInt (UI.Op.id (Lit |uiop#0@@88|)))))))) (=> (|Map#Equal| (AsyncBetree.Variables.queries (Lit |s'#0@@172|)) (Maps.__default.MapRemove1 TInt Tclass.QueryStates.QueryState (Lit (AsyncBetree.Variables.queries (Lit |s#0@@465|))) ($Box (int_2_U (LitInt (UI.Op.id (Lit |uiop#0@@88|))))))) (and (AsyncBetree.Variables.Variables_q (Lit |s#0@@465|)) (=> (QueryStates.QueryState.Finished_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncBetree.Variables.queries (Lit |s#0@@465|)))) ($Box (int_2_U (LitInt (UI.Op.id (Lit |uiop#0@@88|)))))))) (AsyncBetree.Variables.Variables_q (Lit |s#0@@465|))))))))))) (= (AsyncBetree.__default.QueryEnd (Lit |s#0@@465|) (Lit |s'#0@@172|) (Lit |uiop#0@@88|))  (and (and (and (and (and (UI.Op.GetEndOp_q (Lit |uiop#0@@88|)) (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries (Lit |s#0@@465|))) ($Box (int_2_U (UI.Op.id (Lit |uiop#0@@88|))))))) (|Betree.Variables#Equal| (AsyncBetree.Variables.betree (Lit |s'#0@@172|)) (AsyncBetree.Variables.betree (Lit |s#0@@465|)))) (|Map#Equal| (AsyncBetree.Variables.queries (Lit |s'#0@@172|)) (Maps.__default.MapRemove1 TInt Tclass.QueryStates.QueryState (Lit (AsyncBetree.Variables.queries (Lit |s#0@@465|))) ($Box (int_2_U (LitInt (UI.Op.id (Lit |uiop#0@@88|)))))))) (QueryStates.QueryState.Finished_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncBetree.Variables.queries (Lit |s#0@@465|)))) ($Box (int_2_U (LitInt (UI.Op.id (Lit |uiop#0@@88|))))))))) (|Seq#Equal| (UI.Op.value (Lit |uiop#0@@88|)) (QueryStates.QueryState.answer ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncBetree.Variables.queries (Lit |s#0@@465|)))) ($Box (int_2_U (LitInt (UI.Op.id (Lit |uiop#0@@88|))))))))))))) :qid |AsyncBetreeidfy.60:22| :weight 3 :skolemid |5064| :pattern ( (AsyncBetree.__default.QueryEnd (Lit |s#0@@465|) (Lit |s'#0@@172|) (Lit |uiop#0@@88|))) ))))
(assert  (=> true (forall ((|s#0@@466| T@U) (|s'#0@@173| T@U) (|uiop#0@@89| T@U) (|id#0@@0| Int) (|qd#0| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@466|) DatatypeTypeType) (= (type |s'#0@@173|) DatatypeTypeType)) (= (type |uiop#0@@89|) DatatypeTypeType)) (= (type |qd#0|) DatatypeTypeType)) (or (|AsyncBetree.__default.QueryAdvance#canCall| |s#0@@466| |s'#0@@173| |uiop#0@@89| |id#0@@0| |qd#0|) (and (and (and ($Is |s#0@@466| Tclass.AsyncBetree.Variables) ($Is |s'#0@@173| Tclass.AsyncBetree.Variables)) ($Is |uiop#0@@89| Tclass.UI.Op)) ($Is |qd#0| Tclass.QueryStates.QueryDescent)))) true) :qid |AsyncBetreeidfy.70:26| :skolemid |5065| :pattern ( (AsyncBetree.__default.QueryAdvance |s#0@@466| |s'#0@@173| |uiop#0@@89| |id#0@@0| |qd#0|)) ))))
(assert (forall ((|s#0@@467| T@U) (|s'#0@@174| T@U) (|uiop#0@@90| T@U) (|id#0@@1| Int) (|qd#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@467|) DatatypeTypeType) (= (type |s'#0@@174|) DatatypeTypeType)) (= (type |uiop#0@@90|) DatatypeTypeType)) (= (type |qd#0@@0|) DatatypeTypeType)) (and (and (and ($Is |s#0@@467| Tclass.AsyncBetree.Variables) ($Is |s'#0@@174| Tclass.AsyncBetree.Variables)) ($Is |uiop#0@@90| Tclass.UI.Op)) ($Is |qd#0@@0| Tclass.QueryStates.QueryDescent))) (= (|AsyncBetree.__default.QueryAdvance#requires| |s#0@@467| |s'#0@@174| |uiop#0@@90| |id#0@@1| |qd#0@@0|) true)) :qid |AsyncBetreeidfy.70:26| :skolemid |5066| :pattern ( (|AsyncBetree.__default.QueryAdvance#requires| |s#0@@467| |s'#0@@174| |uiop#0@@90| |id#0@@1| |qd#0@@0|)) )))
(assert  (=> true (forall ((|s#0@@468| T@U) (|s'#0@@175| T@U) (|uiop#0@@91| T@U) (|id#0@@2| Int) (|qd#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@468|) DatatypeTypeType) (= (type |s'#0@@175|) DatatypeTypeType)) (= (type |uiop#0@@91|) DatatypeTypeType)) (= (type |qd#0@@1|) DatatypeTypeType)) (or (|AsyncBetree.__default.QueryAdvance#canCall| |s#0@@468| |s'#0@@175| |uiop#0@@91| |id#0@@2| |qd#0@@1|) (and (and (and ($Is |s#0@@468| Tclass.AsyncBetree.Variables) ($Is |s'#0@@175| Tclass.AsyncBetree.Variables)) ($Is |uiop#0@@91| Tclass.UI.Op)) ($Is |qd#0@@1| Tclass.QueryStates.QueryDescent)))) (and (and (and (and (|$IsA#Betree.Variables| (AsyncBetree.Variables.betree |s'#0@@175|)) (|$IsA#Betree.Variables| (AsyncBetree.Variables.betree |s#0@@468|))) (and (AsyncBetree.Variables.Variables_q |s'#0@@175|) (AsyncBetree.Variables.Variables_q |s#0@@468|))) (=> (|Betree.Variables#Equal| (AsyncBetree.Variables.betree |s'#0@@175|) (AsyncBetree.Variables.betree |s#0@@468|)) (and (AsyncBetree.Variables.Variables_q |s#0@@468|) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s#0@@468|)) ($Box (int_2_U |id#0@@2|)))) (and (AsyncBetree.Variables.Variables_q |s'#0@@175|) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s'#0@@175|)) ($Box (int_2_U |id#0@@2|)))) (and (|QueryStates.__default.ValidQueryDescent#canCall| |qd#0@@1|) (=> (QueryStates.__default.ValidQueryDescent |qd#0@@1|) (and (and (and (|$IsA#QueryStates.QueryState| (QueryStates.QueryDescent.query |qd#0@@1|)) (|$IsA#QueryStates.QueryState| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s#0@@468|)) ($Box (int_2_U |id#0@@2|)))))) (and (QueryStates.QueryDescent.QueryDescent_q |qd#0@@1|) (AsyncBetree.Variables.Variables_q |s#0@@468|))) (=> (|QueryStates.QueryState#Equal| (QueryStates.QueryDescent.query |qd#0@@1|) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s#0@@468|)) ($Box (int_2_U |id#0@@2|))))) (and (and (and (|$IsA#QueryStates.QueryState| (QueryStates.QueryDescent.query_k |qd#0@@1|)) (|$IsA#QueryStates.QueryState| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s'#0@@175|)) ($Box (int_2_U |id#0@@2|)))))) (and (QueryStates.QueryDescent.QueryDescent_q |qd#0@@1|) (AsyncBetree.Variables.Variables_q |s'#0@@175|))) (=> (|QueryStates.QueryState#Equal| (QueryStates.QueryDescent.query_k |qd#0@@1|) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s'#0@@175|)) ($Box (int_2_U |id#0@@2|))))) (and (and (AsyncBetree.Variables.Variables_q |s'#0@@175|) (and (AsyncBetree.Variables.Variables_q |s#0@@468|) (QueryStates.QueryDescent.QueryDescent_q |qd#0@@1|))) (=> (|Map#Equal| (AsyncBetree.Variables.queries |s'#0@@175|) (|Map#Build| (AsyncBetree.Variables.queries |s#0@@468|) ($Box (int_2_U |id#0@@2|)) ($Box (QueryStates.QueryDescent.query_k |qd#0@@1|)))) (and (and (and (AsyncBetree.Variables.Variables_q |s#0@@468|) (Betree.Variables.Variables_q (AsyncBetree.Variables.betree |s#0@@468|))) (|QueryStates.__default.QueryDescentReads#canCall| |qd#0@@1|)) (|BetreeBlockInterface.__default.Reads#canCall| (Betree.Variables.bcv (AsyncBetree.Variables.betree |s#0@@468|)) (QueryStates.__default.QueryDescentReads |qd#0@@1|))))))))))))))))) (= (AsyncBetree.__default.QueryAdvance |s#0@@468| |s'#0@@175| |uiop#0@@91| |id#0@@2| |qd#0@@1|)  (and (and (and (and (and (and (and (|Betree.Variables#Equal| (AsyncBetree.Variables.betree |s'#0@@175|) (AsyncBetree.Variables.betree |s#0@@468|)) (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s#0@@468|)) ($Box (int_2_U |id#0@@2|))))) (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s'#0@@175|)) ($Box (int_2_U |id#0@@2|))))) (QueryStates.__default.ValidQueryDescent |qd#0@@1|)) (|QueryStates.QueryState#Equal| (QueryStates.QueryDescent.query |qd#0@@1|) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s#0@@468|)) ($Box (int_2_U |id#0@@2|)))))) (|QueryStates.QueryState#Equal| (QueryStates.QueryDescent.query_k |qd#0@@1|) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s'#0@@175|)) ($Box (int_2_U |id#0@@2|)))))) (|Map#Equal| (AsyncBetree.Variables.queries |s'#0@@175|) (|Map#Build| (AsyncBetree.Variables.queries |s#0@@468|) ($Box (int_2_U |id#0@@2|)) ($Box (QueryStates.QueryDescent.query_k |qd#0@@1|))))) (BetreeBlockInterface.__default.Reads (Betree.Variables.bcv (AsyncBetree.Variables.betree |s#0@@468|)) (QueryStates.__default.QueryDescentReads |qd#0@@1|)))))) :qid |AsyncBetreeidfy.70:26| :skolemid |5067| :pattern ( (AsyncBetree.__default.QueryAdvance |s#0@@468| |s'#0@@175| |uiop#0@@91| |id#0@@2| |qd#0@@1|)) ))))
(assert  (=> true (forall ((|s#0@@469| T@U) (|s'#0@@176| T@U) (|uiop#0@@92| T@U) (|id#0@@3| Int) (|qd#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@469|) DatatypeTypeType) (= (type |s'#0@@176|) DatatypeTypeType)) (= (type |uiop#0@@92|) DatatypeTypeType)) (= (type |qd#0@@2|) DatatypeTypeType)) (or (|AsyncBetree.__default.QueryAdvance#canCall| (Lit |s#0@@469|) (Lit |s'#0@@176|) (Lit |uiop#0@@92|) (LitInt |id#0@@3|) (Lit |qd#0@@2|)) (and (and (and ($Is |s#0@@469| Tclass.AsyncBetree.Variables) ($Is |s'#0@@176| Tclass.AsyncBetree.Variables)) ($Is |uiop#0@@92| Tclass.UI.Op)) ($Is |qd#0@@2| Tclass.QueryStates.QueryDescent)))) (and (and (and (and (|$IsA#Betree.Variables| (Lit (AsyncBetree.Variables.betree (Lit |s'#0@@176|)))) (|$IsA#Betree.Variables| (Lit (AsyncBetree.Variables.betree (Lit |s#0@@469|))))) (and (AsyncBetree.Variables.Variables_q (Lit |s'#0@@176|)) (AsyncBetree.Variables.Variables_q (Lit |s#0@@469|)))) (=> (|Betree.Variables#Equal| (AsyncBetree.Variables.betree (Lit |s'#0@@176|)) (AsyncBetree.Variables.betree (Lit |s#0@@469|))) (and (AsyncBetree.Variables.Variables_q (Lit |s#0@@469|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries (Lit |s#0@@469|))) ($Box (int_2_U |id#0@@3|)))) (and (AsyncBetree.Variables.Variables_q (Lit |s'#0@@176|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries (Lit |s'#0@@176|))) ($Box (int_2_U |id#0@@3|)))) (and (|QueryStates.__default.ValidQueryDescent#canCall| (Lit |qd#0@@2|)) (=> (U_2_bool (Lit (bool_2_U (QueryStates.__default.ValidQueryDescent (Lit |qd#0@@2|))))) (and (and (and (|$IsA#QueryStates.QueryState| (Lit (QueryStates.QueryDescent.query (Lit |qd#0@@2|)))) (|$IsA#QueryStates.QueryState| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncBetree.Variables.queries (Lit |s#0@@469|)))) ($Box (int_2_U (LitInt |id#0@@3|))))))) (and (QueryStates.QueryDescent.QueryDescent_q (Lit |qd#0@@2|)) (AsyncBetree.Variables.Variables_q (Lit |s#0@@469|)))) (=> (|QueryStates.QueryState#Equal| (QueryStates.QueryDescent.query (Lit |qd#0@@2|)) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncBetree.Variables.queries (Lit |s#0@@469|)))) ($Box (int_2_U (LitInt |id#0@@3|)))))) (and (and (and (|$IsA#QueryStates.QueryState| (Lit (QueryStates.QueryDescent.query_k (Lit |qd#0@@2|)))) (|$IsA#QueryStates.QueryState| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncBetree.Variables.queries (Lit |s'#0@@176|)))) ($Box (int_2_U (LitInt |id#0@@3|))))))) (and (QueryStates.QueryDescent.QueryDescent_q (Lit |qd#0@@2|)) (AsyncBetree.Variables.Variables_q (Lit |s'#0@@176|)))) (=> (|QueryStates.QueryState#Equal| (QueryStates.QueryDescent.query_k (Lit |qd#0@@2|)) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncBetree.Variables.queries (Lit |s'#0@@176|)))) ($Box (int_2_U (LitInt |id#0@@3|)))))) (and (and (AsyncBetree.Variables.Variables_q (Lit |s'#0@@176|)) (and (AsyncBetree.Variables.Variables_q (Lit |s#0@@469|)) (QueryStates.QueryDescent.QueryDescent_q (Lit |qd#0@@2|)))) (=> (|Map#Equal| (AsyncBetree.Variables.queries (Lit |s'#0@@176|)) (|Map#Build| (Lit (AsyncBetree.Variables.queries (Lit |s#0@@469|))) ($Box (int_2_U (LitInt |id#0@@3|))) ($Box (Lit (QueryStates.QueryDescent.query_k (Lit |qd#0@@2|)))))) (and (and (and (AsyncBetree.Variables.Variables_q (Lit |s#0@@469|)) (Betree.Variables.Variables_q (Lit (AsyncBetree.Variables.betree (Lit |s#0@@469|))))) (|QueryStates.__default.QueryDescentReads#canCall| (Lit |qd#0@@2|))) (|BetreeBlockInterface.__default.Reads#canCall| (Lit (Betree.Variables.bcv (Lit (AsyncBetree.Variables.betree (Lit |s#0@@469|))))) (Lit (QueryStates.__default.QueryDescentReads (Lit |qd#0@@2|))))))))))))))))))) (= (AsyncBetree.__default.QueryAdvance (Lit |s#0@@469|) (Lit |s'#0@@176|) (Lit |uiop#0@@92|) (LitInt |id#0@@3|) (Lit |qd#0@@2|))  (and (and (and (and (and (and (and (|Betree.Variables#Equal| (AsyncBetree.Variables.betree (Lit |s'#0@@176|)) (AsyncBetree.Variables.betree (Lit |s#0@@469|))) (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries (Lit |s#0@@469|))) ($Box (int_2_U |id#0@@3|))))) (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries (Lit |s'#0@@176|))) ($Box (int_2_U |id#0@@3|))))) (QueryStates.__default.ValidQueryDescent (Lit |qd#0@@2|))) (|QueryStates.QueryState#Equal| (QueryStates.QueryDescent.query (Lit |qd#0@@2|)) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncBetree.Variables.queries (Lit |s#0@@469|)))) ($Box (int_2_U (LitInt |id#0@@3|))))))) (|QueryStates.QueryState#Equal| (QueryStates.QueryDescent.query_k (Lit |qd#0@@2|)) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncBetree.Variables.queries (Lit |s'#0@@176|)))) ($Box (int_2_U (LitInt |id#0@@3|))))))) (|Map#Equal| (AsyncBetree.Variables.queries (Lit |s'#0@@176|)) (|Map#Build| (Lit (AsyncBetree.Variables.queries (Lit |s#0@@469|))) ($Box (int_2_U (LitInt |id#0@@3|))) ($Box (Lit (QueryStates.QueryDescent.query_k (Lit |qd#0@@2|))))))) (BetreeBlockInterface.__default.Reads (Lit (Betree.Variables.bcv (Lit (AsyncBetree.Variables.betree (Lit |s#0@@469|))))) (Lit (QueryStates.__default.QueryDescentReads (Lit |qd#0@@2|)))))))) :qid |AsyncBetreeidfy.70:26| :weight 3 :skolemid |5068| :pattern ( (AsyncBetree.__default.QueryAdvance (Lit |s#0@@469|) (Lit |s'#0@@176|) (Lit |uiop#0@@92|) (LitInt |id#0@@3|) (Lit |qd#0@@2|))) ))))
(assert  (=> true (forall ((|s#0@@470| T@U) (|s'#0@@177| T@U) (|uiop#0@@93| T@U) (|step#0@@39| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@470|) DatatypeTypeType) (= (type |s'#0@@177|) DatatypeTypeType)) (= (type |uiop#0@@93|) DatatypeTypeType)) (= (type |step#0@@39|) DatatypeTypeType)) (or (|AsyncBetree.__default.NextStep#canCall| |s#0@@470| |s'#0@@177| |uiop#0@@93| |step#0@@39|) (and (and (and ($Is |s#0@@470| Tclass.AsyncBetree.Variables) ($Is |s'#0@@177| Tclass.AsyncBetree.Variables)) ($Is |uiop#0@@93| Tclass.UI.Op)) ($Is |step#0@@39| Tclass.AsyncBetree.Step)))) true) :qid |AsyncBetreeidfy.82:22| :skolemid |5069| :pattern ( (AsyncBetree.__default.NextStep |s#0@@470| |s'#0@@177| |uiop#0@@93| |step#0@@39|)) ))))
(assert (forall ((|s#0@@471| T@U) (|s'#0@@178| T@U) (|uiop#0@@94| T@U) (|step#0@@40| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@471|) DatatypeTypeType) (= (type |s'#0@@178|) DatatypeTypeType)) (= (type |uiop#0@@94|) DatatypeTypeType)) (= (type |step#0@@40|) DatatypeTypeType)) (and (and (and ($Is |s#0@@471| Tclass.AsyncBetree.Variables) ($Is |s'#0@@178| Tclass.AsyncBetree.Variables)) ($Is |uiop#0@@94| Tclass.UI.Op)) ($Is |step#0@@40| Tclass.AsyncBetree.Step))) (= (|AsyncBetree.__default.NextStep#requires| |s#0@@471| |s'#0@@178| |uiop#0@@94| |step#0@@40|) true)) :qid |AsyncBetreeidfy.82:22| :skolemid |5070| :pattern ( (|AsyncBetree.__default.NextStep#requires| |s#0@@471| |s'#0@@178| |uiop#0@@94| |step#0@@40|)) )))
(assert  (=> true (forall ((|s#0@@472| T@U) (|s'#0@@179| T@U) (|uiop#0@@95| T@U) (|step#0@@41| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@472|) DatatypeTypeType) (= (type |s'#0@@179|) DatatypeTypeType)) (= (type |uiop#0@@95|) DatatypeTypeType)) (= (type |step#0@@41|) DatatypeTypeType)) (or (|AsyncBetree.__default.NextStep#canCall| |s#0@@472| |s'#0@@179| |uiop#0@@95| |step#0@@41|) (and (and (and ($Is |s#0@@472| Tclass.AsyncBetree.Variables) ($Is |s'#0@@179| Tclass.AsyncBetree.Variables)) ($Is |uiop#0@@95| Tclass.UI.Op)) ($Is |step#0@@41| Tclass.AsyncBetree.Step)))) (and (and (=> (AsyncBetree.Step.BasicStep_q |step#0@@41|) (let ((|betreeStep#1@@0| (AsyncBetree.Step.betreeStep |step#0@@41|))) (|AsyncBetree.__default.Basic#canCall| |s#0@@472| |s'#0@@179| |uiop#0@@95| |betreeStep#1@@0|))) (=> (not (AsyncBetree.Step.BasicStep_q |step#0@@41|)) (and (=> (AsyncBetree.Step.QueryBeginStep_q |step#0@@41|) (|AsyncBetree.__default.QueryBegin#canCall| |s#0@@472| |s'#0@@179| |uiop#0@@95|)) (=> (not (AsyncBetree.Step.QueryBeginStep_q |step#0@@41|)) (and (=> (AsyncBetree.Step.QueryEndStep_q |step#0@@41|) (|AsyncBetree.__default.QueryEnd#canCall| |s#0@@472| |s'#0@@179| |uiop#0@@95|)) (=> (not (AsyncBetree.Step.QueryEndStep_q |step#0@@41|)) (and (=> (AsyncBetree.Step.QueryAdvanceStep_q |step#0@@41|) (let ((|qd#1| (AsyncBetree.Step.descent |step#0@@41|))) (let ((|id#1@@1| (AsyncBetree.Step.id |step#0@@41|))) (|AsyncBetree.__default.QueryAdvance#canCall| |s#0@@472| |s'#0@@179| |uiop#0@@95| |id#1@@1| |qd#1|)))) (=> (not (AsyncBetree.Step.QueryAdvanceStep_q |step#0@@41|)) (and (|$IsA#AsyncBetree.Variables| |s#0@@472|) (|$IsA#AsyncBetree.Variables| |s'#0@@179|)))))))))) (= (AsyncBetree.__default.NextStep |s#0@@472| |s'#0@@179| |uiop#0@@95| |step#0@@41|) (ite (AsyncBetree.Step.BasicStep_q |step#0@@41|) (let ((|betreeStep#0@@8| (AsyncBetree.Step.betreeStep |step#0@@41|))) (AsyncBetree.__default.Basic |s#0@@472| |s'#0@@179| |uiop#0@@95| |betreeStep#0@@8|)) (ite (AsyncBetree.Step.QueryBeginStep_q |step#0@@41|) (AsyncBetree.__default.QueryBegin |s#0@@472| |s'#0@@179| |uiop#0@@95|) (ite (AsyncBetree.Step.QueryEndStep_q |step#0@@41|) (AsyncBetree.__default.QueryEnd |s#0@@472| |s'#0@@179| |uiop#0@@95|) (ite (AsyncBetree.Step.QueryAdvanceStep_q |step#0@@41|) (let ((|qd#0@@3| (AsyncBetree.Step.descent |step#0@@41|))) (let ((|id#0@@4| (AsyncBetree.Step.id |step#0@@41|))) (AsyncBetree.__default.QueryAdvance |s#0@@472| |s'#0@@179| |uiop#0@@95| |id#0@@4| |qd#0@@3|)))  (and (|AsyncBetree.Variables#Equal| |s#0@@472| |s'#0@@179|) (UI.Op.NoOp_q |uiop#0@@95|))))))))) :qid |AsyncBetreeidfy.82:22| :skolemid |5071| :pattern ( (AsyncBetree.__default.NextStep |s#0@@472| |s'#0@@179| |uiop#0@@95| |step#0@@41|)) ))))
(assert  (=> true (forall ((|s#0@@473| T@U) (|s'#0@@180| T@U) (|uiop#0@@96| T@U) (|step#0@@42| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@473|) DatatypeTypeType) (= (type |s'#0@@180|) DatatypeTypeType)) (= (type |uiop#0@@96|) DatatypeTypeType)) (= (type |step#0@@42|) DatatypeTypeType)) (or (|AsyncBetree.__default.NextStep#canCall| (Lit |s#0@@473|) (Lit |s'#0@@180|) (Lit |uiop#0@@96|) (Lit |step#0@@42|)) (and (and (and ($Is |s#0@@473| Tclass.AsyncBetree.Variables) ($Is |s'#0@@180| Tclass.AsyncBetree.Variables)) ($Is |uiop#0@@96| Tclass.UI.Op)) ($Is |step#0@@42| Tclass.AsyncBetree.Step)))) (and (and (=> (U_2_bool (Lit (bool_2_U (AsyncBetree.Step.BasicStep_q (Lit |step#0@@42|))))) (let ((|betreeStep#3@@0| (Lit (AsyncBetree.Step.betreeStep (Lit |step#0@@42|))))) (|AsyncBetree.__default.Basic#canCall| (Lit |s#0@@473|) (Lit |s'#0@@180|) (Lit |uiop#0@@96|) |betreeStep#3@@0|))) (=> (not (U_2_bool (Lit (bool_2_U (AsyncBetree.Step.BasicStep_q (Lit |step#0@@42|)))))) (and (=> (U_2_bool (Lit (bool_2_U (AsyncBetree.Step.QueryBeginStep_q (Lit |step#0@@42|))))) (|AsyncBetree.__default.QueryBegin#canCall| (Lit |s#0@@473|) (Lit |s'#0@@180|) (Lit |uiop#0@@96|))) (=> (not (U_2_bool (Lit (bool_2_U (AsyncBetree.Step.QueryBeginStep_q (Lit |step#0@@42|)))))) (and (=> (U_2_bool (Lit (bool_2_U (AsyncBetree.Step.QueryEndStep_q (Lit |step#0@@42|))))) (|AsyncBetree.__default.QueryEnd#canCall| (Lit |s#0@@473|) (Lit |s'#0@@180|) (Lit |uiop#0@@96|))) (=> (not (U_2_bool (Lit (bool_2_U (AsyncBetree.Step.QueryEndStep_q (Lit |step#0@@42|)))))) (and (=> (U_2_bool (Lit (bool_2_U (AsyncBetree.Step.QueryAdvanceStep_q (Lit |step#0@@42|))))) (let ((|qd#3| (Lit (AsyncBetree.Step.descent (Lit |step#0@@42|))))) (let ((|id#3@@0| (LitInt (AsyncBetree.Step.id (Lit |step#0@@42|))))) (|AsyncBetree.__default.QueryAdvance#canCall| (Lit |s#0@@473|) (Lit |s'#0@@180|) (Lit |uiop#0@@96|) |id#3@@0| |qd#3|)))) (=> (not (U_2_bool (Lit (bool_2_U (AsyncBetree.Step.QueryAdvanceStep_q (Lit |step#0@@42|)))))) (and (|$IsA#AsyncBetree.Variables| (Lit |s#0@@473|)) (|$IsA#AsyncBetree.Variables| (Lit |s'#0@@180|))))))))))) (= (AsyncBetree.__default.NextStep (Lit |s#0@@473|) (Lit |s'#0@@180|) (Lit |uiop#0@@96|) (Lit |step#0@@42|)) (ite (AsyncBetree.Step.BasicStep_q (Lit |step#0@@42|)) (U_2_bool (let ((|betreeStep#2@@0| (Lit (AsyncBetree.Step.betreeStep (Lit |step#0@@42|))))) (Lit (bool_2_U (AsyncBetree.__default.Basic (Lit |s#0@@473|) (Lit |s'#0@@180|) (Lit |uiop#0@@96|) |betreeStep#2@@0|))))) (ite (AsyncBetree.Step.QueryBeginStep_q (Lit |step#0@@42|)) (AsyncBetree.__default.QueryBegin (Lit |s#0@@473|) (Lit |s'#0@@180|) (Lit |uiop#0@@96|)) (ite (AsyncBetree.Step.QueryEndStep_q (Lit |step#0@@42|)) (AsyncBetree.__default.QueryEnd (Lit |s#0@@473|) (Lit |s'#0@@180|) (Lit |uiop#0@@96|)) (ite (AsyncBetree.Step.QueryAdvanceStep_q (Lit |step#0@@42|)) (U_2_bool (let ((|qd#2| (Lit (AsyncBetree.Step.descent (Lit |step#0@@42|))))) (let ((|id#2@@1| (LitInt (AsyncBetree.Step.id (Lit |step#0@@42|))))) (Lit (bool_2_U (AsyncBetree.__default.QueryAdvance (Lit |s#0@@473|) (Lit |s'#0@@180|) (Lit |uiop#0@@96|) |id#2@@1| |qd#2|))))))  (and (|AsyncBetree.Variables#Equal| |s#0@@473| |s'#0@@180|) (UI.Op.NoOp_q (Lit |uiop#0@@96|)))))))))) :qid |AsyncBetreeidfy.82:22| :weight 3 :skolemid |5072| :pattern ( (AsyncBetree.__default.NextStep (Lit |s#0@@473|) (Lit |s'#0@@180|) (Lit |uiop#0@@96|) (Lit |step#0@@42|))) ))))
(assert  (=> true (forall ((|s#0@@474| T@U) (|s'#0@@181| T@U) (|uiop#0@@97| T@U) ) (!  (=> (and (and (and (= (type |s#0@@474|) DatatypeTypeType) (= (type |s'#0@@181|) DatatypeTypeType)) (= (type |uiop#0@@97|) DatatypeTypeType)) (or (|AsyncBetree.__default.Next#canCall| |s#0@@474| |s'#0@@181| |uiop#0@@97|) (and (and ($Is |s#0@@474| Tclass.AsyncBetree.Variables) ($Is |s'#0@@181| Tclass.AsyncBetree.Variables)) ($Is |uiop#0@@97| Tclass.UI.Op)))) true) :qid |AsyncBetreeidfy.93:18| :skolemid |5073| :pattern ( (AsyncBetree.__default.Next |s#0@@474| |s'#0@@181| |uiop#0@@97|)) ))))
(assert (forall ((|s#0@@475| T@U) (|s'#0@@182| T@U) (|uiop#0@@98| T@U) ) (!  (=> (and (and (and (= (type |s#0@@475|) DatatypeTypeType) (= (type |s'#0@@182|) DatatypeTypeType)) (= (type |uiop#0@@98|) DatatypeTypeType)) (and (and ($Is |s#0@@475| Tclass.AsyncBetree.Variables) ($Is |s'#0@@182| Tclass.AsyncBetree.Variables)) ($Is |uiop#0@@98| Tclass.UI.Op))) (= (|AsyncBetree.__default.Next#requires| |s#0@@475| |s'#0@@182| |uiop#0@@98|) true)) :qid |AsyncBetreeidfy.93:18| :skolemid |5074| :pattern ( (|AsyncBetree.__default.Next#requires| |s#0@@475| |s'#0@@182| |uiop#0@@98|)) )))
(assert  (=> true (forall ((|s#0@@476| T@U) (|s'#0@@183| T@U) (|uiop#0@@99| T@U) ) (!  (=> (and (and (and (= (type |s#0@@476|) DatatypeTypeType) (= (type |s'#0@@183|) DatatypeTypeType)) (= (type |uiop#0@@99|) DatatypeTypeType)) (or (|AsyncBetree.__default.Next#canCall| |s#0@@476| |s'#0@@183| |uiop#0@@99|) (and (and ($Is |s#0@@476| Tclass.AsyncBetree.Variables) ($Is |s'#0@@183| Tclass.AsyncBetree.Variables)) ($Is |uiop#0@@99| Tclass.UI.Op)))) (and (forall ((|step#0@@43| T@U) ) (!  (=> (and (= (type |step#0@@43|) DatatypeTypeType) ($Is |step#0@@43| Tclass.AsyncBetree.Step)) (|AsyncBetree.__default.NextStep#canCall| |s#0@@476| |s'#0@@183| |uiop#0@@99| |step#0@@43|)) :qid |AsyncBetreeidfy.95:12| :skolemid |5076| :pattern ( (AsyncBetree.__default.NextStep |s#0@@476| |s'#0@@183| |uiop#0@@99| |step#0@@43|)) )) (= (AsyncBetree.__default.Next |s#0@@476| |s'#0@@183| |uiop#0@@99|) (exists ((|step#0@@44| T@U) ) (!  (and (= (type |step#0@@44|) DatatypeTypeType) (and ($Is |step#0@@44| Tclass.AsyncBetree.Step) (AsyncBetree.__default.NextStep |s#0@@476| |s'#0@@183| |uiop#0@@99| |step#0@@44|))) :qid |AsyncBetreeidfy.95:12| :skolemid |5075| :pattern ( (AsyncBetree.__default.NextStep |s#0@@476| |s'#0@@183| |uiop#0@@99| |step#0@@44|)) ))))) :qid |AsyncBetreeidfy.93:18| :skolemid |5077| :pattern ( (AsyncBetree.__default.Next |s#0@@476| |s'#0@@183| |uiop#0@@99|)) ))))
(assert  (=> true (forall ((|s#0@@477| T@U) (|s'#0@@184| T@U) (|uiop#0@@100| T@U) ) (!  (=> (and (and (and (= (type |s#0@@477|) DatatypeTypeType) (= (type |s'#0@@184|) DatatypeTypeType)) (= (type |uiop#0@@100|) DatatypeTypeType)) (or (|AsyncBetree.__default.Next#canCall| (Lit |s#0@@477|) (Lit |s'#0@@184|) (Lit |uiop#0@@100|)) (and (and ($Is |s#0@@477| Tclass.AsyncBetree.Variables) ($Is |s'#0@@184| Tclass.AsyncBetree.Variables)) ($Is |uiop#0@@100| Tclass.UI.Op)))) (and (forall ((|step#1@@7| T@U) ) (!  (=> (and (= (type |step#1@@7|) DatatypeTypeType) ($Is |step#1@@7| Tclass.AsyncBetree.Step)) (|AsyncBetree.__default.NextStep#canCall| (Lit |s#0@@477|) (Lit |s'#0@@184|) (Lit |uiop#0@@100|) |step#1@@7|)) :qid |AsyncBetreeidfy.95:12| :skolemid |5079| :pattern ( (AsyncBetree.__default.NextStep |s#0@@477| |s'#0@@184| |uiop#0@@100| |step#1@@7|)) )) (= (AsyncBetree.__default.Next (Lit |s#0@@477|) (Lit |s'#0@@184|) (Lit |uiop#0@@100|)) (exists ((|step#1@@8| T@U) ) (!  (and (= (type |step#1@@8|) DatatypeTypeType) (and ($Is |step#1@@8| Tclass.AsyncBetree.Step) (AsyncBetree.__default.NextStep (Lit |s#0@@477|) (Lit |s'#0@@184|) (Lit |uiop#0@@100|) |step#1@@8|))) :qid |AsyncBetreeidfy.95:12| :skolemid |5078| :pattern ( (AsyncBetree.__default.NextStep |s#0@@477| |s'#0@@184| |uiop#0@@100| |step#1@@8|)) ))))) :qid |AsyncBetreeidfy.93:18| :weight 3 :skolemid |5080| :pattern ( (AsyncBetree.__default.Next (Lit |s#0@@477|) (Lit |s'#0@@184|) (Lit |uiop#0@@100|))) ))))
(assert  (=> true (forall ((|betree#0@@3| T@U) (|qs#0| T@U) ) (!  (=> (and (and (= (type |betree#0@@3|) DatatypeTypeType) (= (type |qs#0|) DatatypeTypeType)) (or (|AsyncBetree.__default.QueryInv#canCall| |betree#0@@3| |qs#0|) (and ($Is |betree#0@@3| Tclass.Betree.Variables) ($Is |qs#0| Tclass.QueryStates.QueryState)))) true) :qid |AsyncBetreeidfy.98:22| :skolemid |5081| :pattern ( (AsyncBetree.__default.QueryInv |betree#0@@3| |qs#0|)) ))))
(assert (forall ((|betree#0@@4| T@U) (|qs#0@@0| T@U) ) (!  (=> (and (and (= (type |betree#0@@4|) DatatypeTypeType) (= (type |qs#0@@0|) DatatypeTypeType)) (and ($Is |betree#0@@4| Tclass.Betree.Variables) ($Is |qs#0@@0| Tclass.QueryStates.QueryState))) (= (|AsyncBetree.__default.QueryInv#requires| |betree#0@@4| |qs#0@@0|) true)) :qid |AsyncBetreeidfy.98:22| :skolemid |5082| :pattern ( (|AsyncBetree.__default.QueryInv#requires| |betree#0@@4| |qs#0@@0|)) )))
(assert  (=> true (forall ((|betree#0@@5| T@U) (|qs#0@@1| T@U) ) (!  (=> (and (and (= (type |betree#0@@5|) DatatypeTypeType) (= (type |qs#0@@1|) DatatypeTypeType)) (or (|AsyncBetree.__default.QueryInv#canCall| |betree#0@@5| |qs#0@@1|) (and ($Is |betree#0@@5| Tclass.Betree.Variables) ($Is |qs#0@@1| Tclass.QueryStates.QueryState)))) (and (=> (QueryStates.QueryState.InProgress_q |qs#0@@1|) (and (and (and (Betree.Variables.Variables_q |betree#0@@5|) (BetreeBlockInterface.Variables.Variables_q (Betree.Variables.bcv |betree#0@@5|))) (or (QueryStates.QueryState.InProgress_q |qs#0@@1|) (QueryStates.QueryState.Finished_q |qs#0@@1|))) (|BetreeInv.__default.KeyHasSatisfyingLookup#canCall| (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |betree#0@@5|)) (QueryStates.QueryState.key |qs#0@@1|) (QueryStates.QueryState.ref |qs#0@@1|)))) (= (AsyncBetree.__default.QueryInv |betree#0@@5| |qs#0@@1|)  (=> (QueryStates.QueryState.InProgress_q |qs#0@@1|) (BetreeInv.__default.KeyHasSatisfyingLookup (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |betree#0@@5|)) (QueryStates.QueryState.key |qs#0@@1|) (QueryStates.QueryState.ref |qs#0@@1|)))))) :qid |AsyncBetreeidfy.98:22| :skolemid |5083| :pattern ( (AsyncBetree.__default.QueryInv |betree#0@@5| |qs#0@@1|)) ))))
(assert  (=> true (forall ((|betree#0@@6| T@U) (|qs#0@@2| T@U) ) (!  (=> (and (and (= (type |betree#0@@6|) DatatypeTypeType) (= (type |qs#0@@2|) DatatypeTypeType)) (or (|AsyncBetree.__default.QueryInv#canCall| (Lit |betree#0@@6|) (Lit |qs#0@@2|)) (and ($Is |betree#0@@6| Tclass.Betree.Variables) ($Is |qs#0@@2| Tclass.QueryStates.QueryState)))) (and (=> (U_2_bool (Lit (bool_2_U (QueryStates.QueryState.InProgress_q (Lit |qs#0@@2|))))) (and (and (and (Betree.Variables.Variables_q (Lit |betree#0@@6|)) (BetreeBlockInterface.Variables.Variables_q (Lit (Betree.Variables.bcv (Lit |betree#0@@6|))))) (or (QueryStates.QueryState.InProgress_q (Lit |qs#0@@2|)) (QueryStates.QueryState.Finished_q (Lit |qs#0@@2|)))) (|BetreeInv.__default.KeyHasSatisfyingLookup#canCall| (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |betree#0@@6|))))) (Lit (QueryStates.QueryState.key (Lit |qs#0@@2|))) (Lit (QueryStates.QueryState.ref (Lit |qs#0@@2|)))))) (= (AsyncBetree.__default.QueryInv (Lit |betree#0@@6|) (Lit |qs#0@@2|)) (U_2_bool (Lit (bool_2_U  (=> (QueryStates.QueryState.InProgress_q (Lit |qs#0@@2|)) (BetreeInv.__default.KeyHasSatisfyingLookup (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |betree#0@@6|))))) (Lit (QueryStates.QueryState.key (Lit |qs#0@@2|))) (Lit (QueryStates.QueryState.ref (Lit |qs#0@@2|))))))))))) :qid |AsyncBetreeidfy.98:22| :weight 3 :skolemid |5084| :pattern ( (AsyncBetree.__default.QueryInv (Lit |betree#0@@6|) (Lit |qs#0@@2|))) ))))
(assert  (=> true (forall ((|s#0@@478| T@U) ) (!  (=> (and (= (type |s#0@@478|) DatatypeTypeType) (or (|AsyncBetree.__default.Inv#canCall| |s#0@@478|) ($Is |s#0@@478| Tclass.AsyncBetree.Variables))) true) :qid |AsyncBetreeidfy.104:17| :skolemid |5085| :pattern ( (AsyncBetree.__default.Inv |s#0@@478|)) ))))
(assert (forall ((|s#0@@479| T@U) ) (!  (=> (and (= (type |s#0@@479|) DatatypeTypeType) ($Is |s#0@@479| Tclass.AsyncBetree.Variables)) (= (|AsyncBetree.__default.Inv#requires| |s#0@@479|) true)) :qid |AsyncBetreeidfy.104:17| :skolemid |5086| :pattern ( (|AsyncBetree.__default.Inv#requires| |s#0@@479|)) )))
(assert  (=> true (forall ((|s#0@@480| T@U) ) (!  (=> (and (= (type |s#0@@480|) DatatypeTypeType) (or (|AsyncBetree.__default.Inv#canCall| |s#0@@480|) ($Is |s#0@@480| Tclass.AsyncBetree.Variables))) (and (and (and (AsyncBetree.Variables.Variables_q |s#0@@480|) (|BetreeInv.__default.Inv#canCall| (AsyncBetree.Variables.betree |s#0@@480|))) (=> (BetreeInv.__default.Inv (AsyncBetree.Variables.betree |s#0@@480|)) (forall ((|id#0@@5| T@U) ) (!  (=> (= (type |id#0@@5|) intType) (and (AsyncBetree.Variables.Variables_q |s#0@@480|) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s#0@@480|)) ($Box |id#0@@5|))) (and (and (AsyncBetree.Variables.Variables_q |s#0@@480|) (AsyncBetree.Variables.Variables_q |s#0@@480|)) (|AsyncBetree.__default.QueryInv#canCall| (AsyncBetree.Variables.betree |s#0@@480|) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s#0@@480|)) ($Box |id#0@@5|)))))))) :qid |AsyncBetreeidfy.107:16| :skolemid |5088| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s#0@@480|)) ($Box |id#0@@5|)))) :pattern ( (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s#0@@480|)) ($Box |id#0@@5|))) )))) (= (AsyncBetree.__default.Inv |s#0@@480|)  (and (BetreeInv.__default.Inv (AsyncBetree.Variables.betree |s#0@@480|)) (forall ((|id#0@@6| Int) ) (!  (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s#0@@480|)) ($Box (int_2_U |id#0@@6|)))) (AsyncBetree.__default.QueryInv (AsyncBetree.Variables.betree |s#0@@480|) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s#0@@480|)) ($Box (int_2_U |id#0@@6|)))))) :qid |AsyncBetreeidfy.107:16| :skolemid |5087| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s#0@@480|)) ($Box (int_2_U |id#0@@6|))))) :pattern ( (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s#0@@480|)) ($Box (int_2_U |id#0@@6|)))) )))))) :qid |AsyncBetreeidfy.104:17| :skolemid |5089| :pattern ( (AsyncBetree.__default.Inv |s#0@@480|)) ))))
(assert  (=> true (forall ((|s#0@@481| T@U) ) (!  (=> (and (= (type |s#0@@481|) DatatypeTypeType) (or (|AsyncBetree.__default.Inv#canCall| (Lit |s#0@@481|)) ($Is |s#0@@481| Tclass.AsyncBetree.Variables))) (and (and (and (AsyncBetree.Variables.Variables_q (Lit |s#0@@481|)) (|BetreeInv.__default.Inv#canCall| (Lit (AsyncBetree.Variables.betree (Lit |s#0@@481|))))) (=> (U_2_bool (Lit (bool_2_U (BetreeInv.__default.Inv (Lit (AsyncBetree.Variables.betree (Lit |s#0@@481|))))))) (forall ((|id#1@@2| T@U) ) (!  (=> (= (type |id#1@@2|) intType) (and (AsyncBetree.Variables.Variables_q (Lit |s#0@@481|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries (Lit |s#0@@481|))) ($Box |id#1@@2|))) (and (and (AsyncBetree.Variables.Variables_q (Lit |s#0@@481|)) (AsyncBetree.Variables.Variables_q (Lit |s#0@@481|))) (|AsyncBetree.__default.QueryInv#canCall| (Lit (AsyncBetree.Variables.betree (Lit |s#0@@481|))) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncBetree.Variables.queries (Lit |s#0@@481|)))) ($Box |id#1@@2|)))))))) :qid |AsyncBetreeidfy.107:16| :skolemid |5091| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s#0@@481|)) ($Box |id#1@@2|)))) :pattern ( (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s#0@@481|)) ($Box |id#1@@2|))) )))) (= (AsyncBetree.__default.Inv (Lit |s#0@@481|))  (and (BetreeInv.__default.Inv (Lit (AsyncBetree.Variables.betree (Lit |s#0@@481|)))) (forall ((|id#1@@3| Int) ) (!  (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries (Lit |s#0@@481|))) ($Box (int_2_U |id#1@@3|)))) (AsyncBetree.__default.QueryInv (Lit (AsyncBetree.Variables.betree (Lit |s#0@@481|))) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncBetree.Variables.queries (Lit |s#0@@481|)))) ($Box (int_2_U |id#1@@3|)))))) :qid |AsyncBetreeidfy.107:16| :skolemid |5090| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s#0@@481|)) ($Box (int_2_U |id#1@@3|))))) :pattern ( (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s#0@@481|)) ($Box (int_2_U |id#1@@3|)))) )))))) :qid |AsyncBetreeidfy.104:17| :weight 3 :skolemid |5092| :pattern ( (AsyncBetree.__default.Inv (Lit |s#0@@481|))) ))))
(assert (forall ((arg0@@742 T@U) (arg1@@343 T@U) ) (! (= (type (|#Betree_Refines_Map.LookupResult.LookupResult| arg0@@742 arg1@@343)) DatatypeTypeType) :qid |funType:#Betree_Refines_Map.LookupResult.LookupResult| :pattern ( (|#Betree_Refines_Map.LookupResult.LookupResult| arg0@@742 arg1@@343)) )))
(assert (forall ((|a#0#0#0@@9| T@U) (|a#0#1#0@@5| T@U) ) (!  (=> (and (= (type |a#0#0#0@@9|) (SeqType BoxType)) (= (type |a#0#1#0@@5|) (SeqType BoxType))) (= (DatatypeCtorId (|#Betree_Refines_Map.LookupResult.LookupResult| |a#0#0#0@@9| |a#0#1#0@@5|)) |##Betree_Refines_Map.LookupResult.LookupResult|)) :qid |BetreeRefinesMapidfy.24:40| :skolemid |5125| :pattern ( (|#Betree_Refines_Map.LookupResult.LookupResult| |a#0#0#0@@9| |a#0#1#0@@5|)) )))
(assert (forall ((d@@330 T@U) ) (!  (=> (= (type d@@330) DatatypeTypeType) (= (Betree__Refines__Map.LookupResult.LookupResult_q d@@330) (= (DatatypeCtorId d@@330) |##Betree_Refines_Map.LookupResult.LookupResult|))) :qid |unknown.0:0| :skolemid |5126| :pattern ( (Betree__Refines__Map.LookupResult.LookupResult_q d@@330)) )))
(assert (forall ((d@@331 T@U) ) (!  (=> (and (= (type d@@331) DatatypeTypeType) (Betree__Refines__Map.LookupResult.LookupResult_q d@@331)) (exists ((|a#1#0#0@@9| T@U) (|a#1#1#0@@5| T@U) ) (!  (and (and (= (type |a#1#0#0@@9|) (SeqType BoxType)) (= (type |a#1#1#0@@5|) (SeqType BoxType))) (= d@@331 (|#Betree_Refines_Map.LookupResult.LookupResult| |a#1#0#0@@9| |a#1#1#0@@5|))) :qid |BetreeRefinesMapidfy.24:40| :skolemid |5127| :no-pattern (type |a#1#0#0@@9|) :no-pattern (type |a#1#1#0@@5|) :no-pattern (U_2_int |a#1#0#0@@9|) :no-pattern (U_2_bool |a#1#0#0@@9|) :no-pattern (U_2_int |a#1#1#0@@5|) :no-pattern (U_2_bool |a#1#1#0@@5|) ))) :qid |unknown.0:0| :skolemid |5128| :pattern ( (Betree__Refines__Map.LookupResult.LookupResult_q d@@331)) )))
(assert (forall ((|a#2#0#0@@9| T@U) (|a#2#1#0@@5| T@U) ) (!  (=> (and (= (type |a#2#0#0@@9|) (SeqType BoxType)) (= (type |a#2#1#0@@5|) (SeqType BoxType))) (= ($Is (|#Betree_Refines_Map.LookupResult.LookupResult| |a#2#0#0@@9| |a#2#1#0@@5|) Tclass.Betree__Refines__Map.LookupResult)  (and ($Is |a#2#0#0@@9| (TSeq Tclass.BetreeGraph.ReadOp)) ($Is |a#2#1#0@@5| Tclass.ValueType.Value)))) :qid |BetreeRefinesMapidfy.24:40| :skolemid |5129| :pattern ( ($Is (|#Betree_Refines_Map.LookupResult.LookupResult| |a#2#0#0@@9| |a#2#1#0@@5|) Tclass.Betree__Refines__Map.LookupResult)) )))
(assert (forall ((|a#3#0#0@@9| T@U) (|a#3#1#0@@5| T@U) ($h@@268 T@U) ) (!  (=> (and (and (and (= (type |a#3#0#0@@9|) (SeqType BoxType)) (= (type |a#3#1#0@@5|) (SeqType BoxType))) (= (type $h@@268) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@268)) (= ($IsAlloc (|#Betree_Refines_Map.LookupResult.LookupResult| |a#3#0#0@@9| |a#3#1#0@@5|) Tclass.Betree__Refines__Map.LookupResult $h@@268)  (and ($IsAlloc |a#3#0#0@@9| (TSeq Tclass.BetreeGraph.ReadOp) $h@@268) ($IsAlloc |a#3#1#0@@5| Tclass.ValueType.Value $h@@268)))) :qid |BetreeRefinesMapidfy.24:40| :skolemid |5130| :pattern ( ($IsAlloc (|#Betree_Refines_Map.LookupResult.LookupResult| |a#3#0#0@@9| |a#3#1#0@@5|) Tclass.Betree__Refines__Map.LookupResult $h@@268)) )))
(assert (forall ((arg0@@743 T@U) ) (! (= (type (Betree__Refines__Map.LookupResult.lookup arg0@@743)) (SeqType BoxType)) :qid |funType:Betree__Refines__Map.LookupResult.lookup| :pattern ( (Betree__Refines__Map.LookupResult.lookup arg0@@743)) )))
(assert (forall ((d@@332 T@U) ($h@@269 T@U) ) (!  (=> (and (and (= (type d@@332) DatatypeTypeType) (= (type $h@@269) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@269) (and (Betree__Refines__Map.LookupResult.LookupResult_q d@@332) ($IsAlloc d@@332 Tclass.Betree__Refines__Map.LookupResult $h@@269)))) ($IsAlloc (Betree__Refines__Map.LookupResult.lookup d@@332) (TSeq Tclass.BetreeGraph.ReadOp) $h@@269)) :qid |unknown.0:0| :skolemid |5131| :pattern ( ($IsAlloc (Betree__Refines__Map.LookupResult.lookup d@@332) (TSeq Tclass.BetreeGraph.ReadOp) $h@@269)) )))
(assert (forall ((d@@333 T@U) ($h@@270 T@U) ) (!  (=> (and (and (= (type d@@333) DatatypeTypeType) (= (type $h@@270) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@270) (and (Betree__Refines__Map.LookupResult.LookupResult_q d@@333) ($IsAlloc d@@333 Tclass.Betree__Refines__Map.LookupResult $h@@270)))) ($IsAlloc (Betree__Refines__Map.LookupResult.result d@@333) Tclass.ValueType.Value $h@@270)) :qid |unknown.0:0| :skolemid |5132| :pattern ( ($IsAlloc (Betree__Refines__Map.LookupResult.result d@@333) Tclass.ValueType.Value $h@@270)) )))
(assert (forall ((|a#4#0#0@@9| T@U) (|a#4#1#0@@5| T@U) ) (!  (=> (and (= (type |a#4#0#0@@9|) (SeqType BoxType)) (= (type |a#4#1#0@@5|) (SeqType BoxType))) (= (|#Betree_Refines_Map.LookupResult.LookupResult| (Lit |a#4#0#0@@9|) (Lit |a#4#1#0@@5|)) (Lit (|#Betree_Refines_Map.LookupResult.LookupResult| |a#4#0#0@@9| |a#4#1#0@@5|)))) :qid |BetreeRefinesMapidfy.24:40| :skolemid |5133| :pattern ( (|#Betree_Refines_Map.LookupResult.LookupResult| (Lit |a#4#0#0@@9|) (Lit |a#4#1#0@@5|))) )))
(assert (forall ((|a#5#0#0@@10| T@U) (|a#5#1#0@@5| T@U) ) (!  (=> (and (= (type |a#5#0#0@@10|) (SeqType BoxType)) (= (type |a#5#1#0@@5|) (SeqType BoxType))) (= (Betree__Refines__Map.LookupResult.lookup (|#Betree_Refines_Map.LookupResult.LookupResult| |a#5#0#0@@10| |a#5#1#0@@5|)) |a#5#0#0@@10|)) :qid |BetreeRefinesMapidfy.24:40| :skolemid |5134| :pattern ( (|#Betree_Refines_Map.LookupResult.LookupResult| |a#5#0#0@@10| |a#5#1#0@@5|)) )))
(assert (forall ((|a#6#0#0@@10| T@U) (|a#6#1#0@@5| T@U) (i@@35 Int) ) (!  (=> (and (and (= (type |a#6#0#0@@10|) (SeqType BoxType)) (= (type |a#6#1#0@@5|) (SeqType BoxType))) (and (<= 0 i@@35) (< i@@35 (|Seq#Length| |a#6#0#0@@10|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#6#0#0@@10| i@@35))) (DtRank (|#Betree_Refines_Map.LookupResult.LookupResult| |a#6#0#0@@10| |a#6#1#0@@5|)))) :qid |BetreeRefinesMapidfy.24:40| :skolemid |5135| :pattern ( (|Seq#Index| |a#6#0#0@@10| i@@35) (|#Betree_Refines_Map.LookupResult.LookupResult| |a#6#0#0@@10| |a#6#1#0@@5|)) )))
(assert (forall ((|a#7#0#0@@10| T@U) (|a#7#1#0@@5| T@U) ) (!  (=> (and (= (type |a#7#0#0@@10|) (SeqType BoxType)) (= (type |a#7#1#0@@5|) (SeqType BoxType))) (< (|Seq#Rank| |a#7#0#0@@10|) (DtRank (|#Betree_Refines_Map.LookupResult.LookupResult| |a#7#0#0@@10| |a#7#1#0@@5|)))) :qid |BetreeRefinesMapidfy.24:40| :skolemid |5136| :pattern ( (|#Betree_Refines_Map.LookupResult.LookupResult| |a#7#0#0@@10| |a#7#1#0@@5|)) )))
(assert (forall ((|a#8#0#0@@10| T@U) (|a#8#1#0@@6| T@U) ) (!  (=> (and (= (type |a#8#0#0@@10|) (SeqType BoxType)) (= (type |a#8#1#0@@6|) (SeqType BoxType))) (= (Betree__Refines__Map.LookupResult.result (|#Betree_Refines_Map.LookupResult.LookupResult| |a#8#0#0@@10| |a#8#1#0@@6|)) |a#8#1#0@@6|)) :qid |BetreeRefinesMapidfy.24:40| :skolemid |5137| :pattern ( (|#Betree_Refines_Map.LookupResult.LookupResult| |a#8#0#0@@10| |a#8#1#0@@6|)) )))
(assert (forall ((d@@334 T@U) ) (!  (=> (and (= (type d@@334) DatatypeTypeType) (|$IsA#Betree__Refines__Map.LookupResult| d@@334)) (Betree__Refines__Map.LookupResult.LookupResult_q d@@334)) :qid |unknown.0:0| :skolemid |5138| :pattern ( (|$IsA#Betree__Refines__Map.LookupResult| d@@334)) )))
(assert (forall ((d@@335 T@U) ) (!  (=> (and (= (type d@@335) DatatypeTypeType) ($Is d@@335 Tclass.Betree__Refines__Map.LookupResult)) (Betree__Refines__Map.LookupResult.LookupResult_q d@@335)) :qid |unknown.0:0| :skolemid |5139| :pattern ( (Betree__Refines__Map.LookupResult.LookupResult_q d@@335) ($Is d@@335 Tclass.Betree__Refines__Map.LookupResult)) )))
(assert (forall ((a@@228 T@U) (b@@165 T@U) ) (!  (=> (and (and (= (type a@@228) DatatypeTypeType) (= (type b@@165) DatatypeTypeType)) true) (= (|Betree__Refines__Map.LookupResult#Equal| a@@228 b@@165)  (and (|Seq#Equal| (Betree__Refines__Map.LookupResult.lookup a@@228) (Betree__Refines__Map.LookupResult.lookup b@@165)) (|Seq#Equal| (Betree__Refines__Map.LookupResult.result a@@228) (Betree__Refines__Map.LookupResult.result b@@165))))) :qid |unknown.0:0| :skolemid |5140| :pattern ( (|Betree__Refines__Map.LookupResult#Equal| a@@228 b@@165)) )))
(assert (forall ((a@@229 T@U) (b@@166 T@U) ) (!  (=> (and (= (type a@@229) DatatypeTypeType) (= (type b@@166) DatatypeTypeType)) (= (|Betree__Refines__Map.LookupResult#Equal| a@@229 b@@166) (= a@@229 b@@166))) :qid |unknown.0:0| :skolemid |5141| :pattern ( (|Betree__Refines__Map.LookupResult#Equal| a@@229 b@@166)) )))
(assert (= (type Tclass.Betree__Refines__Map.__default) TyType))
(assert (= (Tag Tclass.Betree__Refines__Map.__default) Tagclass.Betree__Refines__Map.__default))
(assert (= (TagFamily Tclass.Betree__Refines__Map.__default) tytagFamily$_default))
(assert (forall ((bx@@203 T@U) ) (!  (=> (and (= (type bx@@203) BoxType) ($IsBox bx@@203 Tclass.Betree__Refines__Map.__default)) (and (= ($Box ($Unbox refType bx@@203)) bx@@203) ($Is ($Unbox refType bx@@203) Tclass.Betree__Refines__Map.__default))) :qid |unknown.0:0| :skolemid |5142| :pattern ( ($IsBox bx@@203 Tclass.Betree__Refines__Map.__default)) )))
(assert (forall (($o@@72 T@U) ) (!  (=> (= (type $o@@72) refType) (= ($Is $o@@72 Tclass.Betree__Refines__Map.__default)  (or (= $o@@72 null) (= (dtype $o@@72) Tclass.Betree__Refines__Map.__default)))) :qid |unknown.0:0| :skolemid |5143| :pattern ( ($Is $o@@72 Tclass.Betree__Refines__Map.__default)) )))
(assert (forall (($o@@73 T@U) ($h@@271 T@U) ) (!  (=> (and (= (type $o@@73) refType) (= (type $h@@271) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@73 Tclass.Betree__Refines__Map.__default $h@@271)  (or (= $o@@73 null) (U_2_bool (MapType1Select (MapType0Select $h@@271 $o@@73) alloc))))) :qid |unknown.0:0| :skolemid |5144| :pattern ( ($IsAlloc $o@@73 Tclass.Betree__Refines__Map.__default $h@@271)) )))
(assert  (=> true (forall ((|view#0@@42| T@U) (|key#0@@224| T@U) (|start#0@@50| T@U) ) (!  (=> (and (and (and (= (type |view#0@@42|) (IMapType BoxType BoxType)) (= (type |key#0@@224|) (SeqType BoxType))) (= (type |start#0@@50|) BoxType)) (or (|Betree__Refines__Map.__default.GetLookup#canCall| |view#0@@42| |key#0@@224| |start#0@@50|) (and (and (and ($Is |view#0@@42| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |key#0@@224| Tclass.KeyType.Key)) ($IsBox |start#0@@50| Tclass.ReferenceType.Reference)) (BetreeInv.__default.KeyHasSatisfyingLookup |view#0@@42| |key#0@@224| |start#0@@50|)))) ($Is (Betree__Refines__Map.__default.GetLookup |view#0@@42| |key#0@@224| |start#0@@50|) Tclass.Betree__Refines__Map.LookupResult)) :qid |BetreeRefinesMapidfy.26:22| :skolemid |5145| :pattern ( (Betree__Refines__Map.__default.GetLookup |view#0@@42| |key#0@@224| |start#0@@50|)) ))))
(assert (forall (($Heap@@71 T@U) (|view#0@@43| T@U) (|key#0@@225| T@U) (|start#0@@51| T@U) ) (!  (=> (and (and (and (and (= (type $Heap@@71) (MapType0Type refType MapType1Type)) (= (type |view#0@@43|) (IMapType BoxType BoxType))) (= (type |key#0@@225|) (SeqType BoxType))) (= (type |start#0@@51|) BoxType)) (and (and (and ($IsGoodHeap $Heap@@71) ($Is |view#0@@43| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($Is |key#0@@225| Tclass.KeyType.Key)) ($IsBox |start#0@@51| Tclass.ReferenceType.Reference))) (= (|Betree__Refines__Map.__default.GetLookup#requires| |view#0@@43| |key#0@@225| |start#0@@51|) (BetreeInv.__default.KeyHasSatisfyingLookup |view#0@@43| |key#0@@225| |start#0@@51|))) :qid |BetreeRefinesMapidfy.26:12| :skolemid |5146| :pattern ( (|Betree__Refines__Map.__default.GetLookup#requires| |view#0@@43| |key#0@@225| |start#0@@51|) ($IsGoodHeap $Heap@@71)) )))
(assert  (and (forall ((arg0@@744 T@U) (arg1@@344 T@U) (arg2@@202 T@U) ) (! (= (type (|$let#36_value| arg0@@744 arg1@@344 arg2@@202)) (SeqType BoxType)) :qid |funType:$let#36_value| :pattern ( (|$let#36_value| arg0@@744 arg1@@344 arg2@@202)) )) (forall ((arg0@@745 T@U) (arg1@@345 T@U) (arg2@@203 T@U) ) (! (= (type (|$let#36_lookup| arg0@@745 arg1@@345 arg2@@203)) (SeqType BoxType)) :qid |funType:$let#36_lookup| :pattern ( (|$let#36_lookup| arg0@@745 arg1@@345 arg2@@203)) ))))
(assert (forall ((view T@U) (key@@1 T@U) (start T@U) ) (!  (=> (and (and (and (= (type view) (IMapType BoxType BoxType)) (= (type key@@1) (SeqType BoxType))) (= (type start) BoxType)) (|$let#36$canCall| view key@@1 start)) (and (and ($Is (|$let#36_lookup| view key@@1 start) (TSeq Tclass.BetreeGraph.ReadOp)) ($Is (|$let#36_value| view key@@1 start) Tclass.ValueType.Value)) (BetreeInv.__default.IsSatisfyingLookupFrom view key@@1 (|$let#36_value| view key@@1 start) (|$let#36_lookup| view key@@1 start) start))) :qid |BetreeRefinesMapidfy.29:5| :skolemid |5147| :pattern ( (|$let#36_value| view key@@1 start)) :pattern ( (|$let#36_lookup| view key@@1 start)) )))
(assert  (=> true (forall (($Heap@@72 T@U) (|view#0@@44| T@U) (|key#0@@226| T@U) (|start#0@@52| T@U) ) (!  (=> (and (and (and (and (= (type $Heap@@72) (MapType0Type refType MapType1Type)) (= (type |view#0@@44|) (IMapType BoxType BoxType))) (= (type |key#0@@226|) (SeqType BoxType))) (= (type |start#0@@52|) BoxType)) (or (|Betree__Refines__Map.__default.GetLookup#canCall| |view#0@@44| |key#0@@226| |start#0@@52|) (and (and (and (and ($IsGoodHeap $Heap@@72) ($Is |view#0@@44| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($Is |key#0@@226| Tclass.KeyType.Key)) ($IsBox |start#0@@52| Tclass.ReferenceType.Reference)) (BetreeInv.__default.KeyHasSatisfyingLookup |view#0@@44| |key#0@@226| |start#0@@52|)))) (and (|$let#36$canCall| |view#0@@44| |key#0@@226| |start#0@@52|) (= (Betree__Refines__Map.__default.GetLookup |view#0@@44| |key#0@@226| |start#0@@52|) (let ((|value#0@@38| (|$let#36_value| |view#0@@44| |key#0@@226| |start#0@@52|))) (let ((|lookup#0@@81| (|$let#36_lookup| |view#0@@44| |key#0@@226| |start#0@@52|))) (|#Betree_Refines_Map.LookupResult.LookupResult| |lookup#0@@81| |value#0@@38|)))))) :qid |BetreeRefinesMapidfy.26:12| :skolemid |5148| :pattern ( (Betree__Refines__Map.__default.GetLookup |view#0@@44| |key#0@@226| |start#0@@52|) ($IsGoodHeap $Heap@@72)) ))))
(assert  (=> true (forall (($Heap@@73 T@U) (|view#0@@45| T@U) (|key#0@@227| T@U) (|start#0@@53| T@U) ) (!  (=> (and (and (and (and (= (type $Heap@@73) (MapType0Type refType MapType1Type)) (= (type |view#0@@45|) (IMapType BoxType BoxType))) (= (type |key#0@@227|) (SeqType BoxType))) (= (type |start#0@@53|) BoxType)) (or (|Betree__Refines__Map.__default.GetLookup#canCall| |view#0@@45| (Lit |key#0@@227|) |start#0@@53|) (and (and (and (and ($IsGoodHeap $Heap@@73) ($Is |view#0@@45| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($Is |key#0@@227| Tclass.KeyType.Key)) ($IsBox |start#0@@53| Tclass.ReferenceType.Reference)) (BetreeInv.__default.KeyHasSatisfyingLookup |view#0@@45| (Lit |key#0@@227|) |start#0@@53|)))) (and (|$let#36$canCall| |view#0@@45| (Lit |key#0@@227|) |start#0@@53|) (= (Betree__Refines__Map.__default.GetLookup |view#0@@45| (Lit |key#0@@227|) |start#0@@53|) (let ((|value#1@@6| (|$let#36_value| |view#0@@45| (Lit |key#0@@227|) |start#0@@53|))) (let ((|lookup#1@@11| (|$let#36_lookup| |view#0@@45| (Lit |key#0@@227|) |start#0@@53|))) (|#Betree_Refines_Map.LookupResult.LookupResult| |lookup#1@@11| |value#1@@6|)))))) :qid |BetreeRefinesMapidfy.26:12| :weight 3 :skolemid |5149| :pattern ( (Betree__Refines__Map.__default.GetLookup |view#0@@45| (Lit |key#0@@227|) |start#0@@53|) ($IsGoodHeap $Heap@@73)) ))))
(assert  (=> true (forall (($Heap@@74 T@U) (|view#0@@46| T@U) (|key#0@@228| T@U) (|start#0@@54| T@U) ) (!  (=> (and (and (and (and (= (type $Heap@@74) (MapType0Type refType MapType1Type)) (= (type |view#0@@46|) (IMapType BoxType BoxType))) (= (type |key#0@@228|) (SeqType BoxType))) (= (type |start#0@@54|) BoxType)) (or (|Betree__Refines__Map.__default.GetLookup#canCall| (Lit |view#0@@46|) (Lit |key#0@@228|) (Lit |start#0@@54|)) (and (and (and (and ($IsGoodHeap $Heap@@74) ($Is |view#0@@46| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($Is |key#0@@228| Tclass.KeyType.Key)) ($IsBox |start#0@@54| Tclass.ReferenceType.Reference)) (U_2_bool (Lit (bool_2_U (BetreeInv.__default.KeyHasSatisfyingLookup (Lit |view#0@@46|) (Lit |key#0@@228|) (Lit |start#0@@54|)))))))) (and (|$let#36$canCall| (Lit |view#0@@46|) (Lit |key#0@@228|) (Lit |start#0@@54|)) (= (Betree__Refines__Map.__default.GetLookup (Lit |view#0@@46|) (Lit |key#0@@228|) (Lit |start#0@@54|)) (let ((|value#2@@6| (|$let#36_value| (Lit |view#0@@46|) (Lit |key#0@@228|) (Lit |start#0@@54|)))) (let ((|lookup#2@@7| (|$let#36_lookup| (Lit |view#0@@46|) (Lit |key#0@@228|) (Lit |start#0@@54|)))) (|#Betree_Refines_Map.LookupResult.LookupResult| |lookup#2@@7| |value#2@@6|)))))) :qid |BetreeRefinesMapidfy.26:12| :weight 3 :skolemid |5150| :pattern ( (Betree__Refines__Map.__default.GetLookup (Lit |view#0@@46|) (Lit |key#0@@228|) (Lit |start#0@@54|)) ($IsGoodHeap $Heap@@74)) ))))
(assert (forall ((arg0@@746 T@U) (arg1@@346 T@U) ) (! (= (type (Betree__Refines__Map.__default.GetValue arg0@@746 arg1@@346)) (SeqType BoxType)) :qid |funType:Betree__Refines__Map.__default.GetValue| :pattern ( (Betree__Refines__Map.__default.GetValue arg0@@746 arg1@@346)) )))
(assert  (=> true (forall ((|view#0@@47| T@U) (|key#0@@229| T@U) ) (!  (=> (and (and (= (type |view#0@@47|) (IMapType BoxType BoxType)) (= (type |key#0@@229|) (SeqType BoxType))) (or (|Betree__Refines__Map.__default.GetValue#canCall| |view#0@@47| |key#0@@229|) (and (and ($Is |view#0@@47| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |key#0@@229| Tclass.KeyType.Key)) (BetreeInv.__default.KeyHasSatisfyingLookup |view#0@@47| |key#0@@229| (Lit BetreeGraph.__default.Root))))) ($Is (Betree__Refines__Map.__default.GetValue |view#0@@47| |key#0@@229|) Tclass.ValueType.Value)) :qid |BetreeRefinesMapidfy.34:21| :skolemid |5151| :pattern ( (Betree__Refines__Map.__default.GetValue |view#0@@47| |key#0@@229|)) ))))
(assert (forall ((|view#0@@48| T@U) (|key#0@@230| T@U) ) (!  (=> (and (and (= (type |view#0@@48|) (IMapType BoxType BoxType)) (= (type |key#0@@230|) (SeqType BoxType))) (and ($Is |view#0@@48| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |key#0@@230| Tclass.KeyType.Key))) (= (|Betree__Refines__Map.__default.GetValue#requires| |view#0@@48| |key#0@@230|) (BetreeInv.__default.KeyHasSatisfyingLookup |view#0@@48| |key#0@@230| (Lit BetreeGraph.__default.Root)))) :qid |BetreeRefinesMapidfy.34:21| :skolemid |5152| :pattern ( (|Betree__Refines__Map.__default.GetValue#requires| |view#0@@48| |key#0@@230|)) )))
(assert  (=> true (forall ((|view#0@@49| T@U) (|key#0@@231| T@U) ) (!  (=> (and (and (= (type |view#0@@49|) (IMapType BoxType BoxType)) (= (type |key#0@@231|) (SeqType BoxType))) (or (|Betree__Refines__Map.__default.GetValue#canCall| |view#0@@49| |key#0@@231|) (and (and ($Is |view#0@@49| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |key#0@@231| Tclass.KeyType.Key)) (BetreeInv.__default.KeyHasSatisfyingLookup |view#0@@49| |key#0@@231| (Lit BetreeGraph.__default.Root))))) (and (and (and |BetreeGraph.__default.Root#canCall| (|Betree__Refines__Map.__default.GetLookup#canCall| |view#0@@49| |key#0@@231| (Lit BetreeGraph.__default.Root))) (Betree__Refines__Map.LookupResult.LookupResult_q (Betree__Refines__Map.__default.GetLookup |view#0@@49| |key#0@@231| (Lit BetreeGraph.__default.Root)))) (= (Betree__Refines__Map.__default.GetValue |view#0@@49| |key#0@@231|) (Betree__Refines__Map.LookupResult.result (Betree__Refines__Map.__default.GetLookup |view#0@@49| |key#0@@231| (Lit BetreeGraph.__default.Root)))))) :qid |BetreeRefinesMapidfy.34:21| :skolemid |5153| :pattern ( (Betree__Refines__Map.__default.GetValue |view#0@@49| |key#0@@231|)) ))))
(assert  (=> true (forall ((|view#0@@50| T@U) (|key#0@@232| T@U) ) (!  (=> (and (and (= (type |view#0@@50|) (IMapType BoxType BoxType)) (= (type |key#0@@232|) (SeqType BoxType))) (or (|Betree__Refines__Map.__default.GetValue#canCall| |view#0@@50| (Lit |key#0@@232|)) (and (and ($Is |view#0@@50| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |key#0@@232| Tclass.KeyType.Key)) (BetreeInv.__default.KeyHasSatisfyingLookup |view#0@@50| (Lit |key#0@@232|) (Lit BetreeGraph.__default.Root))))) (and (and (and |BetreeGraph.__default.Root#canCall| (|Betree__Refines__Map.__default.GetLookup#canCall| |view#0@@50| (Lit |key#0@@232|) (Lit BetreeGraph.__default.Root))) (Betree__Refines__Map.LookupResult.LookupResult_q (Betree__Refines__Map.__default.GetLookup |view#0@@50| (Lit |key#0@@232|) (Lit BetreeGraph.__default.Root)))) (= (Betree__Refines__Map.__default.GetValue |view#0@@50| (Lit |key#0@@232|)) (Betree__Refines__Map.LookupResult.result (Betree__Refines__Map.__default.GetLookup |view#0@@50| (Lit |key#0@@232|) (Lit BetreeGraph.__default.Root)))))) :qid |BetreeRefinesMapidfy.34:21| :weight 3 :skolemid |5154| :pattern ( (Betree__Refines__Map.__default.GetValue |view#0@@50| (Lit |key#0@@232|))) ))))
(assert  (=> true (forall ((|view#0@@51| T@U) (|key#0@@233| T@U) ) (!  (=> (and (and (= (type |view#0@@51|) (IMapType BoxType BoxType)) (= (type |key#0@@233|) (SeqType BoxType))) (or (|Betree__Refines__Map.__default.GetValue#canCall| (Lit |view#0@@51|) (Lit |key#0@@233|)) (and (and ($Is |view#0@@51| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |key#0@@233| Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U (BetreeInv.__default.KeyHasSatisfyingLookup (Lit |view#0@@51|) (Lit |key#0@@233|) (Lit BetreeGraph.__default.Root)))))))) (and (and (and |BetreeGraph.__default.Root#canCall| (|Betree__Refines__Map.__default.GetLookup#canCall| (Lit |view#0@@51|) (Lit |key#0@@233|) (Lit BetreeGraph.__default.Root))) (Betree__Refines__Map.LookupResult.LookupResult_q (Lit (Betree__Refines__Map.__default.GetLookup (Lit |view#0@@51|) (Lit |key#0@@233|) (Lit BetreeGraph.__default.Root))))) (= (Betree__Refines__Map.__default.GetValue (Lit |view#0@@51|) (Lit |key#0@@233|)) (Lit (Betree__Refines__Map.LookupResult.result (Lit (Betree__Refines__Map.__default.GetLookup (Lit |view#0@@51|) (Lit |key#0@@233|) (Lit BetreeGraph.__default.Root)))))))) :qid |BetreeRefinesMapidfy.34:21| :weight 3 :skolemid |5155| :pattern ( (Betree__Refines__Map.__default.GetValue (Lit |view#0@@51|) (Lit |key#0@@233|))) ))))
(assert (forall ((arg0@@747 T@U) ) (! (= (type (Betree__Refines__Map.__default.IView arg0@@747)) (IMapType BoxType BoxType)) :qid |funType:Betree__Refines__Map.__default.IView| :pattern ( (Betree__Refines__Map.__default.IView arg0@@747)) )))
(assert  (=> true (forall ((|view#0@@52| T@U) ) (!  (=> (and (= (type |view#0@@52|) (IMapType BoxType BoxType)) (or (|Betree__Refines__Map.__default.IView#canCall| |view#0@@52|) (and ($Is |view#0@@52| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) (forall ((|key#0@@234| T@U) ) (!  (=> (= (type |key#0@@234|) (SeqType BoxType)) (=> (and ($Is |key#0@@234| Tclass.KeyType.Key) (MapSpec.__default.InDomain |key#0@@234|)) (BetreeInv.__default.KeyHasSatisfyingLookup |view#0@@52| |key#0@@234| (Lit BetreeGraph.__default.Root)))) :qid |BetreeRefinesMapidfy.41:21| :skolemid |5156| :pattern ( (BetreeInv.__default.KeyHasSatisfyingLookup |view#0@@52| |key#0@@234| BetreeGraph.__default.Root)) :pattern ( (MapSpec.__default.InDomain |key#0@@234|)) ))))) ($Is (Betree__Refines__Map.__default.IView |view#0@@52|) (TIMap Tclass.KeyType.Key Tclass.ValueType.Value))) :qid |BetreeRefinesMapidfy.40:18| :skolemid |5157| :pattern ( (Betree__Refines__Map.__default.IView |view#0@@52|)) ))))
(assert (forall ((|view#0@@53| T@U) ) (!  (=> (and (= (type |view#0@@53|) (IMapType BoxType BoxType)) ($Is |view#0@@53| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) (= (|Betree__Refines__Map.__default.IView#requires| |view#0@@53|) (forall ((|key#1@@36| T@U) ) (!  (=> (= (type |key#1@@36|) (SeqType BoxType)) (=> (and ($Is |key#1@@36| Tclass.KeyType.Key) (MapSpec.__default.InDomain |key#1@@36|)) (BetreeInv.__default.KeyHasSatisfyingLookup |view#0@@53| |key#1@@36| (Lit BetreeGraph.__default.Root)))) :qid |BetreeRefinesMapidfy.41:21| :skolemid |5158| :pattern ( (BetreeInv.__default.KeyHasSatisfyingLookup |view#0@@53| |key#1@@36| BetreeGraph.__default.Root)) :pattern ( (MapSpec.__default.InDomain |key#1@@36|)) )))) :qid |BetreeRefinesMapidfy.40:18| :skolemid |5159| :pattern ( (|Betree__Refines__Map.__default.IView#requires| |view#0@@53|)) )))
(assert (forall ((arg0@@748 T@U) ) (! (= (type (|lambda#185| arg0@@748)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#185| :pattern ( (|lambda#185| arg0@@748)) )))
(assert  (=> true (forall ((|view#0@@54| T@U) ) (!  (=> (and (= (type |view#0@@54|) (IMapType BoxType BoxType)) (or (|Betree__Refines__Map.__default.IView#canCall| |view#0@@54|) (and ($Is |view#0@@54| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) (forall ((|key#1@@37| T@U) ) (!  (=> (= (type |key#1@@37|) (SeqType BoxType)) (=> (and ($Is |key#1@@37| Tclass.KeyType.Key) (MapSpec.__default.InDomain |key#1@@37|)) (BetreeInv.__default.KeyHasSatisfyingLookup |view#0@@54| |key#1@@37| (Lit BetreeGraph.__default.Root)))) :qid |BetreeRefinesMapidfy.41:21| :skolemid |5158| :pattern ( (BetreeInv.__default.KeyHasSatisfyingLookup |view#0@@54| |key#1@@37| BetreeGraph.__default.Root)) :pattern ( (MapSpec.__default.InDomain |key#1@@37|)) ))))) (and (forall ((|key#2@@15| T@U) ) (!  (=> (and (= (type |key#2@@15|) (SeqType BoxType)) ($Is |key#2@@15| Tclass.KeyType.Key)) (and (|MapSpec.__default.InDomain#canCall| |key#2@@15|) (=> (MapSpec.__default.InDomain |key#2@@15|) (|Betree__Refines__Map.__default.GetValue#canCall| |view#0@@54| |key#2@@15|)))) :qid |BetreeRefinesMapidfy.43:10| :skolemid |5160| :pattern ( (Betree__Refines__Map.__default.GetValue |view#0@@54| |key#2@@15|)) :pattern ( (MapSpec.__default.InDomain |key#2@@15|)) )) (= (Betree__Refines__Map.__default.IView |view#0@@54|) (|IMap#Glue| (|lambda#26| Tclass.KeyType.Key) (|lambda#185| |view#0@@54|) (TIMap Tclass.KeyType.Key Tclass.ValueType.Value))))) :qid |BetreeRefinesMapidfy.40:18| :skolemid |5161| :pattern ( (Betree__Refines__Map.__default.IView |view#0@@54|)) ))))
(assert  (=> true (forall ((|view#0@@55| T@U) ) (!  (=> (and (= (type |view#0@@55|) (IMapType BoxType BoxType)) (or (|Betree__Refines__Map.__default.IView#canCall| (Lit |view#0@@55|)) (and ($Is |view#0@@55| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) (forall ((|key#3@@7| T@U) ) (!  (=> (= (type |key#3@@7|) (SeqType BoxType)) (=> (and ($Is |key#3@@7| Tclass.KeyType.Key) (MapSpec.__default.InDomain |key#3@@7|)) (BetreeInv.__default.KeyHasSatisfyingLookup (Lit |view#0@@55|) |key#3@@7| (Lit BetreeGraph.__default.Root)))) :qid |BetreeRefinesMapidfy.41:21| :skolemid |5162| :pattern ( (BetreeInv.__default.KeyHasSatisfyingLookup |view#0@@55| |key#3@@7| BetreeGraph.__default.Root)) :pattern ( (MapSpec.__default.InDomain |key#3@@7|)) ))))) (and (forall ((|key#2@@16| T@U) ) (!  (=> (and (= (type |key#2@@16|) (SeqType BoxType)) ($Is |key#2@@16| Tclass.KeyType.Key)) (and (|MapSpec.__default.InDomain#canCall| |key#2@@16|) (=> (MapSpec.__default.InDomain |key#2@@16|) (|Betree__Refines__Map.__default.GetValue#canCall| (Lit |view#0@@55|) |key#2@@16|)))) :qid |BetreeRefinesMapidfy.43:10| :skolemid |5163| :pattern ( (Betree__Refines__Map.__default.GetValue |view#0@@55| |key#2@@16|)) :pattern ( (MapSpec.__default.InDomain |key#2@@16|)) )) (= (Betree__Refines__Map.__default.IView (Lit |view#0@@55|)) (|IMap#Glue| (|lambda#26| Tclass.KeyType.Key) (|lambda#185| (Lit |view#0@@55|)) (TIMap Tclass.KeyType.Key Tclass.ValueType.Value))))) :qid |BetreeRefinesMapidfy.40:18| :weight 3 :skolemid |5164| :pattern ( (Betree__Refines__Map.__default.IView (Lit |view#0@@55|))) ))))
(assert  (=> true (forall ((|s#0@@482| T@U) ) (!  (=> (and (= (type |s#0@@482|) DatatypeTypeType) (or (|Betree__Refines__Map.__default.I#canCall| |s#0@@482|) (and ($Is |s#0@@482| Tclass.Betree.Variables) (BetreeInv.__default.Inv |s#0@@482|)))) ($Is (Betree__Refines__Map.__default.I |s#0@@482|) Tclass.MapSpec.Variables)) :qid |BetreeRefinesMapidfy.46:14| :skolemid |5165| :pattern ( (Betree__Refines__Map.__default.I |s#0@@482|)) ))))
(assert (forall ((|s#0@@483| T@U) ) (!  (=> (and (= (type |s#0@@483|) DatatypeTypeType) ($Is |s#0@@483| Tclass.Betree.Variables)) (= (|Betree__Refines__Map.__default.I#requires| |s#0@@483|) (BetreeInv.__default.Inv |s#0@@483|))) :qid |BetreeRefinesMapidfy.46:14| :skolemid |5166| :pattern ( (|Betree__Refines__Map.__default.I#requires| |s#0@@483|)) )))
(assert  (=> true (forall ((|s#0@@484| T@U) ) (!  (=> (and (= (type |s#0@@484|) DatatypeTypeType) (or (|Betree__Refines__Map.__default.I#canCall| |s#0@@484|) (and ($Is |s#0@@484| Tclass.Betree.Variables) (BetreeInv.__default.Inv |s#0@@484|)))) (and (and (and (Betree.Variables.Variables_q |s#0@@484|) (BetreeBlockInterface.Variables.Variables_q (Betree.Variables.bcv |s#0@@484|))) (|Betree__Refines__Map.__default.IView#canCall| (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@484|)))) (= (Betree__Refines__Map.__default.I |s#0@@484|) (|#MapSpec.Variables.Variables| (Betree__Refines__Map.__default.IView (BetreeBlockInterface.Variables.view (Betree.Variables.bcv |s#0@@484|))))))) :qid |BetreeRefinesMapidfy.46:14| :skolemid |5167| :pattern ( (Betree__Refines__Map.__default.I |s#0@@484|)) ))))
(assert  (=> true (forall ((|s#0@@485| T@U) ) (!  (=> (and (= (type |s#0@@485|) DatatypeTypeType) (or (|Betree__Refines__Map.__default.I#canCall| (Lit |s#0@@485|)) (and ($Is |s#0@@485| Tclass.Betree.Variables) (U_2_bool (Lit (bool_2_U (BetreeInv.__default.Inv (Lit |s#0@@485|)))))))) (and (and (and (Betree.Variables.Variables_q (Lit |s#0@@485|)) (BetreeBlockInterface.Variables.Variables_q (Lit (Betree.Variables.bcv (Lit |s#0@@485|))))) (|Betree__Refines__Map.__default.IView#canCall| (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s#0@@485|))))))) (= (Betree__Refines__Map.__default.I (Lit |s#0@@485|)) (Lit (|#MapSpec.Variables.Variables| (Lit (Betree__Refines__Map.__default.IView (Lit (BetreeBlockInterface.Variables.view (Lit (Betree.Variables.bcv (Lit |s#0@@485|)))))))))))) :qid |BetreeRefinesMapidfy.46:14| :weight 3 :skolemid |5168| :pattern ( (Betree__Refines__Map.__default.I (Lit |s#0@@485|))) ))))
(assert  (and (and (and (and (and (and (and (forall ((arg0@@749 T@T) (arg1@@347 T@T) ) (! (= (Ctor (MapType8Type arg0@@749 arg1@@347)) 30) :qid |ctor:MapType8Type| )) (forall ((arg0@@750 T@T) (arg1@@348 T@T) ) (! (= (MapType8TypeInv0 (MapType8Type arg0@@750 arg1@@348)) arg0@@750) :qid |typeInv:MapType8TypeInv0| :pattern ( (MapType8Type arg0@@750 arg1@@348)) ))) (forall ((arg0@@751 T@T) (arg1@@349 T@T) ) (! (= (MapType8TypeInv1 (MapType8Type arg0@@751 arg1@@349)) arg1@@349) :qid |typeInv:MapType8TypeInv1| :pattern ( (MapType8Type arg0@@751 arg1@@349)) ))) (forall ((arg0@@752 T@U) (arg1@@350 T@U) (arg2@@204 T@U) ) (! (let ((aVar1@@8 (MapType8TypeInv1 (type arg0@@752)))) (= (type (MapType8Select arg0@@752 arg1@@350 arg2@@204)) aVar1@@8)) :qid |funType:MapType8Select| :pattern ( (MapType8Select arg0@@752 arg1@@350 arg2@@204)) ))) (forall ((arg0@@753 T@U) (arg1@@351 T@U) (arg2@@205 T@U) (arg3@@132 T@U) ) (! (let ((aVar1@@9 (type arg3@@132))) (let ((aVar0@@6 (type arg1@@351))) (= (type (MapType8Store arg0@@753 arg1@@351 arg2@@205 arg3@@132)) (MapType8Type aVar0@@6 aVar1@@9)))) :qid |funType:MapType8Store| :pattern ( (MapType8Store arg0@@753 arg1@@351 arg2@@205 arg3@@132)) ))) (forall ((m@@86 T@U) (x0@@44 T@U) (x1@@38 T@U) (val@@45 T@U) ) (! (let ((aVar1@@10 (MapType8TypeInv1 (type m@@86)))) (=> (= (type val@@45) aVar1@@10) (= (MapType8Select (MapType8Store m@@86 x0@@44 x1@@38 val@@45) x0@@44 x1@@38) val@@45))) :qid |mapAx0:MapType8Select| :weight 0 ))) (and (and (forall ((val@@46 T@U) (m@@87 T@U) (x0@@45 T@U) (x1@@39 T@U) (y0@@36 T@U) (y1@@32 T@U) ) (!  (or (= x0@@45 y0@@36) (= (MapType8Select (MapType8Store m@@87 x0@@45 x1@@39 val@@46) y0@@36 y1@@32) (MapType8Select m@@87 y0@@36 y1@@32))) :qid |mapAx1:MapType8Select:0| :weight 0 )) (forall ((val@@47 T@U) (m@@88 T@U) (x0@@46 T@U) (x1@@40 T@U) (y0@@37 T@U) (y1@@33 T@U) ) (!  (or (= x1@@40 y1@@33) (= (MapType8Select (MapType8Store m@@88 x0@@46 x1@@40 val@@47) y0@@37 y1@@33) (MapType8Select m@@88 y0@@37 y1@@33))) :qid |mapAx1:MapType8Select:1| :weight 0 ))) (forall ((val@@48 T@U) (m@@89 T@U) (x0@@47 T@U) (x1@@41 T@U) (y0@@38 T@U) (y1@@34 T@U) ) (!  (or true (= (MapType8Select (MapType8Store m@@89 x0@@47 x1@@41 val@@48) y0@@38 y1@@34) (MapType8Select m@@89 y0@@38 y1@@34))) :qid |mapAx2:MapType8Select| :weight 0 )))) (forall ((arg0@@754 T@U) (arg1@@352 T@U) (arg2@@206 T@U) (arg3@@133 Bool) ) (! (= (type (|lambda#0| arg0@@754 arg1@@352 arg2@@206 arg3@@133)) (MapType8Type refType boolType)) :qid |funType:lambda#0| :pattern ( (|lambda#0| arg0@@754 arg1@@352 arg2@@206 arg3@@133)) ))))
(assert (forall ((|l#0@@9| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@74 T@U) ($f@@4 T@U) ) (! (let ((alpha@@11 (FieldTypeInv0 (type $f@@4)))) (=> (and (and (and (and (= (type |l#0@@9|) refType) (= (type |l#1|) (MapType0Type refType MapType1Type))) (= (type |l#2|) (FieldType boolType))) (= (type $o@@74) refType)) (= (type $f@@4) (FieldType alpha@@11))) (= (U_2_bool (MapType8Select (|lambda#0| |l#0@@9| |l#1| |l#2| |l#3|) $o@@74 $f@@4))  (=> (and (not (= $o@@74 |l#0@@9|)) (U_2_bool (MapType1Select (MapType0Select |l#1| $o@@74) |l#2|))) |l#3|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5189| :pattern ( (MapType8Select (|lambda#0| |l#0@@9| |l#1| |l#2| |l#3|) $o@@74 $f@@4)) )))
(assert (forall ((arg0@@755 T@U) (arg1@@353 T@U) (arg2@@207 T@U) (arg3@@134 Bool) ) (! (= (type (|lambda#1| arg0@@755 arg1@@353 arg2@@207 arg3@@134)) (MapType8Type refType boolType)) :qid |funType:lambda#1| :pattern ( (|lambda#1| arg0@@755 arg1@@353 arg2@@207 arg3@@134)) )))
(assert (forall ((|l#0@@10| T@U) (|l#1@@0| T@U) (|l#2@@0| T@U) (|l#3@@0| Bool) ($o@@75 T@U) ($f@@5 T@U) ) (! (let ((alpha@@12 (FieldTypeInv0 (type $f@@5)))) (=> (and (and (and (and (= (type |l#0@@10|) refType) (= (type |l#1@@0|) (MapType0Type refType MapType1Type))) (= (type |l#2@@0|) (FieldType boolType))) (= (type $o@@75) refType)) (= (type $f@@5) (FieldType alpha@@12))) (= (U_2_bool (MapType8Select (|lambda#1| |l#0@@10| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@75 $f@@5))  (=> (and (not (= $o@@75 |l#0@@10|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@0| $o@@75) |l#2@@0|))) |l#3@@0|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5190| :pattern ( (MapType8Select (|lambda#1| |l#0@@10| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@75 $f@@5)) )))
(assert (forall ((|l#0@@11| T@U) (|l#1@@1| T@U) (|$w#0| T@U) ) (!  (=> (and (and (= (type |l#0@@11|) TyType) (= (type |l#1@@1|) (MapType0Type BoxType boolType))) (= (type |$w#0|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#2| |l#0@@11| |l#1@@1|) |$w#0|))  (and ($IsBox |$w#0| |l#0@@11|) (U_2_bool (MapType0Select |l#1@@1| |$w#0|))))) :qid |DafnyPreludebpl.22:1| :skolemid |5191| :pattern ( (MapType0Select (|lambda#2| |l#0@@11| |l#1@@1|) |$w#0|)) )))
(assert (forall ((|l#0@@12| T@U) (|l#1@@2| T@U) (|$w#0@@0| T@U) ) (!  (=> (and (and (= (type |l#0@@12|) DatatypeTypeType) (= (type |l#1@@2|) (MapType0Type BoxType BoxType))) (= (type |$w#0@@0|) BoxType)) (= (MapType0Select (|lambda#3| |l#0@@12| |l#1@@2|) |$w#0@@0|) ($Box (AsyncBetree__Refines__AsyncMap.__default.QueryAnswer |l#0@@12| ($Unbox DatatypeTypeType (MapType0Select |l#1@@2| |$w#0@@0|)))))) :qid |AsyncBetreeRefinesAsyncMapidfy.35:47| :skolemid |5192| :pattern ( (MapType0Select (|lambda#3| |l#0@@12| |l#1@@2|) |$w#0@@0|)) )))
(assert (forall ((arg0@@756 T@U) (arg1@@354 T@U) (arg2@@208 T@U) (arg3@@135 Bool) ) (! (= (type (|lambda#6| arg0@@756 arg1@@354 arg2@@208 arg3@@135)) (MapType8Type refType boolType)) :qid |funType:lambda#6| :pattern ( (|lambda#6| arg0@@756 arg1@@354 arg2@@208 arg3@@135)) )))
(assert (forall ((|l#0@@13| T@U) (|l#1@@3| T@U) (|l#2@@1| T@U) (|l#3@@1| Bool) ($o@@76 T@U) ($f@@6 T@U) ) (! (let ((alpha@@13 (FieldTypeInv0 (type $f@@6)))) (=> (and (and (and (and (= (type |l#0@@13|) refType) (= (type |l#1@@3|) (MapType0Type refType MapType1Type))) (= (type |l#2@@1|) (FieldType boolType))) (= (type $o@@76) refType)) (= (type $f@@6) (FieldType alpha@@13))) (= (U_2_bool (MapType8Select (|lambda#6| |l#0@@13| |l#1@@3| |l#2@@1| |l#3@@1|) $o@@76 $f@@6))  (=> (and (not (= $o@@76 |l#0@@13|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@3| $o@@76) |l#2@@1|))) |l#3@@1|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5193| :pattern ( (MapType8Select (|lambda#6| |l#0@@13| |l#1@@3| |l#2@@1| |l#3@@1|) $o@@76 $f@@6)) )))
(assert (forall ((arg0@@757 T@U) (arg1@@355 T@U) (arg2@@209 T@U) (arg3@@136 Bool) ) (! (= (type (|lambda#7| arg0@@757 arg1@@355 arg2@@209 arg3@@136)) (MapType8Type refType boolType)) :qid |funType:lambda#7| :pattern ( (|lambda#7| arg0@@757 arg1@@355 arg2@@209 arg3@@136)) )))
(assert (forall ((|l#0@@14| T@U) (|l#1@@4| T@U) (|l#2@@2| T@U) (|l#3@@2| Bool) ($o@@77 T@U) ($f@@7 T@U) ) (! (let ((alpha@@14 (FieldTypeInv0 (type $f@@7)))) (=> (and (and (and (and (= (type |l#0@@14|) refType) (= (type |l#1@@4|) (MapType0Type refType MapType1Type))) (= (type |l#2@@2|) (FieldType boolType))) (= (type $o@@77) refType)) (= (type $f@@7) (FieldType alpha@@14))) (= (U_2_bool (MapType8Select (|lambda#7| |l#0@@14| |l#1@@4| |l#2@@2| |l#3@@2|) $o@@77 $f@@7))  (=> (and (not (= $o@@77 |l#0@@14|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@4| $o@@77) |l#2@@2|))) |l#3@@2|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5194| :pattern ( (MapType8Select (|lambda#7| |l#0@@14| |l#1@@4| |l#2@@2| |l#3@@2|) $o@@77 $f@@7)) )))
(assert (forall ((arg0@@758 T@U) (arg1@@356 T@U) (arg2@@210 T@U) (arg3@@137 Bool) ) (! (= (type (|lambda#10| arg0@@758 arg1@@356 arg2@@210 arg3@@137)) (MapType8Type refType boolType)) :qid |funType:lambda#10| :pattern ( (|lambda#10| arg0@@758 arg1@@356 arg2@@210 arg3@@137)) )))
(assert (forall ((|l#0@@15| T@U) (|l#1@@5| T@U) (|l#2@@3| T@U) (|l#3@@3| Bool) ($o@@78 T@U) ($f@@8 T@U) ) (! (let ((alpha@@15 (FieldTypeInv0 (type $f@@8)))) (=> (and (and (and (and (= (type |l#0@@15|) refType) (= (type |l#1@@5|) (MapType0Type refType MapType1Type))) (= (type |l#2@@3|) (FieldType boolType))) (= (type $o@@78) refType)) (= (type $f@@8) (FieldType alpha@@15))) (= (U_2_bool (MapType8Select (|lambda#10| |l#0@@15| |l#1@@5| |l#2@@3| |l#3@@3|) $o@@78 $f@@8))  (=> (and (not (= $o@@78 |l#0@@15|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@5| $o@@78) |l#2@@3|))) |l#3@@3|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5195| :pattern ( (MapType8Select (|lambda#10| |l#0@@15| |l#1@@5| |l#2@@3| |l#3@@3|) $o@@78 $f@@8)) )))
(assert (forall ((arg0@@759 T@U) (arg1@@357 T@U) (arg2@@211 T@U) (arg3@@138 Bool) ) (! (= (type (|lambda#11| arg0@@759 arg1@@357 arg2@@211 arg3@@138)) (MapType8Type refType boolType)) :qid |funType:lambda#11| :pattern ( (|lambda#11| arg0@@759 arg1@@357 arg2@@211 arg3@@138)) )))
(assert (forall ((|l#0@@16| T@U) (|l#1@@6| T@U) (|l#2@@4| T@U) (|l#3@@4| Bool) ($o@@79 T@U) ($f@@9 T@U) ) (! (let ((alpha@@16 (FieldTypeInv0 (type $f@@9)))) (=> (and (and (and (and (= (type |l#0@@16|) refType) (= (type |l#1@@6|) (MapType0Type refType MapType1Type))) (= (type |l#2@@4|) (FieldType boolType))) (= (type $o@@79) refType)) (= (type $f@@9) (FieldType alpha@@16))) (= (U_2_bool (MapType8Select (|lambda#11| |l#0@@16| |l#1@@6| |l#2@@4| |l#3@@4|) $o@@79 $f@@9))  (=> (and (not (= $o@@79 |l#0@@16|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@6| $o@@79) |l#2@@4|))) |l#3@@4|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5196| :pattern ( (MapType8Select (|lambda#11| |l#0@@16| |l#1@@6| |l#2@@4| |l#3@@4|) $o@@79 $f@@9)) )))
(assert (forall ((arg0@@760 T@U) (arg1@@358 T@U) (arg2@@212 T@U) (arg3@@139 Bool) ) (! (= (type (|lambda#12| arg0@@760 arg1@@358 arg2@@212 arg3@@139)) (MapType8Type refType boolType)) :qid |funType:lambda#12| :pattern ( (|lambda#12| arg0@@760 arg1@@358 arg2@@212 arg3@@139)) )))
(assert (forall ((|l#0@@17| T@U) (|l#1@@7| T@U) (|l#2@@5| T@U) (|l#3@@5| Bool) ($o@@80 T@U) ($f@@10 T@U) ) (! (let ((alpha@@17 (FieldTypeInv0 (type $f@@10)))) (=> (and (and (and (and (= (type |l#0@@17|) refType) (= (type |l#1@@7|) (MapType0Type refType MapType1Type))) (= (type |l#2@@5|) (FieldType boolType))) (= (type $o@@80) refType)) (= (type $f@@10) (FieldType alpha@@17))) (= (U_2_bool (MapType8Select (|lambda#12| |l#0@@17| |l#1@@7| |l#2@@5| |l#3@@5|) $o@@80 $f@@10))  (=> (and (not (= $o@@80 |l#0@@17|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@7| $o@@80) |l#2@@5|))) |l#3@@5|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5197| :pattern ( (MapType8Select (|lambda#12| |l#0@@17| |l#1@@7| |l#2@@5| |l#3@@5|) $o@@80 $f@@10)) )))
(assert (forall ((arg0@@761 T@U) (arg1@@359 T@U) (arg2@@213 T@U) (arg3@@140 Bool) ) (! (= (type (|lambda#13| arg0@@761 arg1@@359 arg2@@213 arg3@@140)) (MapType8Type refType boolType)) :qid |funType:lambda#13| :pattern ( (|lambda#13| arg0@@761 arg1@@359 arg2@@213 arg3@@140)) )))
(assert (forall ((|l#0@@18| T@U) (|l#1@@8| T@U) (|l#2@@6| T@U) (|l#3@@6| Bool) ($o@@81 T@U) ($f@@11 T@U) ) (! (let ((alpha@@18 (FieldTypeInv0 (type $f@@11)))) (=> (and (and (and (and (= (type |l#0@@18|) refType) (= (type |l#1@@8|) (MapType0Type refType MapType1Type))) (= (type |l#2@@6|) (FieldType boolType))) (= (type $o@@81) refType)) (= (type $f@@11) (FieldType alpha@@18))) (= (U_2_bool (MapType8Select (|lambda#13| |l#0@@18| |l#1@@8| |l#2@@6| |l#3@@6|) $o@@81 $f@@11))  (=> (and (not (= $o@@81 |l#0@@18|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@8| $o@@81) |l#2@@6|))) |l#3@@6|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5198| :pattern ( (MapType8Select (|lambda#13| |l#0@@18| |l#1@@8| |l#2@@6| |l#3@@6|) $o@@81 $f@@11)) )))
(assert (forall ((arg0@@762 T@U) (arg1@@360 T@U) (arg2@@214 T@U) (arg3@@141 Bool) ) (! (= (type (|lambda#14| arg0@@762 arg1@@360 arg2@@214 arg3@@141)) (MapType8Type refType boolType)) :qid |funType:lambda#14| :pattern ( (|lambda#14| arg0@@762 arg1@@360 arg2@@214 arg3@@141)) )))
(assert (forall ((|l#0@@19| T@U) (|l#1@@9| T@U) (|l#2@@7| T@U) (|l#3@@7| Bool) ($o@@82 T@U) ($f@@12 T@U) ) (! (let ((alpha@@19 (FieldTypeInv0 (type $f@@12)))) (=> (and (and (and (and (= (type |l#0@@19|) refType) (= (type |l#1@@9|) (MapType0Type refType MapType1Type))) (= (type |l#2@@7|) (FieldType boolType))) (= (type $o@@82) refType)) (= (type $f@@12) (FieldType alpha@@19))) (= (U_2_bool (MapType8Select (|lambda#14| |l#0@@19| |l#1@@9| |l#2@@7| |l#3@@7|) $o@@82 $f@@12))  (=> (and (not (= $o@@82 |l#0@@19|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@9| $o@@82) |l#2@@7|))) |l#3@@7|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5199| :pattern ( (MapType8Select (|lambda#14| |l#0@@19| |l#1@@9| |l#2@@7| |l#3@@7|) $o@@82 $f@@12)) )))
(assert (forall ((arg0@@763 T@U) (arg1@@361 T@U) (arg2@@215 T@U) (arg3@@142 Bool) ) (! (= (type (|lambda#15| arg0@@763 arg1@@361 arg2@@215 arg3@@142)) (MapType8Type refType boolType)) :qid |funType:lambda#15| :pattern ( (|lambda#15| arg0@@763 arg1@@361 arg2@@215 arg3@@142)) )))
(assert (forall ((|l#0@@20| T@U) (|l#1@@10| T@U) (|l#2@@8| T@U) (|l#3@@8| Bool) ($o@@83 T@U) ($f@@13 T@U) ) (! (let ((alpha@@20 (FieldTypeInv0 (type $f@@13)))) (=> (and (and (and (and (= (type |l#0@@20|) refType) (= (type |l#1@@10|) (MapType0Type refType MapType1Type))) (= (type |l#2@@8|) (FieldType boolType))) (= (type $o@@83) refType)) (= (type $f@@13) (FieldType alpha@@20))) (= (U_2_bool (MapType8Select (|lambda#15| |l#0@@20| |l#1@@10| |l#2@@8| |l#3@@8|) $o@@83 $f@@13))  (=> (and (not (= $o@@83 |l#0@@20|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@10| $o@@83) |l#2@@8|))) |l#3@@8|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5200| :pattern ( (MapType8Select (|lambda#15| |l#0@@20| |l#1@@10| |l#2@@8| |l#3@@8|) $o@@83 $f@@13)) )))
(assert (forall ((arg0@@764 T@U) (arg1@@362 T@U) (arg2@@216 T@U) (arg3@@143 Bool) ) (! (= (type (|lambda#16| arg0@@764 arg1@@362 arg2@@216 arg3@@143)) (MapType8Type refType boolType)) :qid |funType:lambda#16| :pattern ( (|lambda#16| arg0@@764 arg1@@362 arg2@@216 arg3@@143)) )))
(assert (forall ((|l#0@@21| T@U) (|l#1@@11| T@U) (|l#2@@9| T@U) (|l#3@@9| Bool) ($o@@84 T@U) ($f@@14 T@U) ) (! (let ((alpha@@21 (FieldTypeInv0 (type $f@@14)))) (=> (and (and (and (and (= (type |l#0@@21|) refType) (= (type |l#1@@11|) (MapType0Type refType MapType1Type))) (= (type |l#2@@9|) (FieldType boolType))) (= (type $o@@84) refType)) (= (type $f@@14) (FieldType alpha@@21))) (= (U_2_bool (MapType8Select (|lambda#16| |l#0@@21| |l#1@@11| |l#2@@9| |l#3@@9|) $o@@84 $f@@14))  (=> (and (not (= $o@@84 |l#0@@21|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@11| $o@@84) |l#2@@9|))) |l#3@@9|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5201| :pattern ( (MapType8Select (|lambda#16| |l#0@@21| |l#1@@11| |l#2@@9| |l#3@@9|) $o@@84 $f@@14)) )))
(assert (forall ((arg0@@765 T@U) (arg1@@363 T@U) (arg2@@217 T@U) (arg3@@144 Bool) ) (! (= (type (|lambda#17| arg0@@765 arg1@@363 arg2@@217 arg3@@144)) (MapType8Type refType boolType)) :qid |funType:lambda#17| :pattern ( (|lambda#17| arg0@@765 arg1@@363 arg2@@217 arg3@@144)) )))
(assert (forall ((|l#0@@22| T@U) (|l#1@@12| T@U) (|l#2@@10| T@U) (|l#3@@10| Bool) ($o@@85 T@U) ($f@@15 T@U) ) (! (let ((alpha@@22 (FieldTypeInv0 (type $f@@15)))) (=> (and (and (and (and (= (type |l#0@@22|) refType) (= (type |l#1@@12|) (MapType0Type refType MapType1Type))) (= (type |l#2@@10|) (FieldType boolType))) (= (type $o@@85) refType)) (= (type $f@@15) (FieldType alpha@@22))) (= (U_2_bool (MapType8Select (|lambda#17| |l#0@@22| |l#1@@12| |l#2@@10| |l#3@@10|) $o@@85 $f@@15))  (=> (and (not (= $o@@85 |l#0@@22|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@12| $o@@85) |l#2@@10|))) |l#3@@10|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5202| :pattern ( (MapType8Select (|lambda#17| |l#0@@22| |l#1@@12| |l#2@@10| |l#3@@10|) $o@@85 $f@@15)) )))
(assert (forall ((arg0@@766 T@U) (arg1@@364 T@U) (arg2@@218 T@U) (arg3@@145 Bool) ) (! (= (type (|lambda#18| arg0@@766 arg1@@364 arg2@@218 arg3@@145)) (MapType8Type refType boolType)) :qid |funType:lambda#18| :pattern ( (|lambda#18| arg0@@766 arg1@@364 arg2@@218 arg3@@145)) )))
(assert (forall ((|l#0@@23| T@U) (|l#1@@13| T@U) (|l#2@@11| T@U) (|l#3@@11| Bool) ($o@@86 T@U) ($f@@16 T@U) ) (! (let ((alpha@@23 (FieldTypeInv0 (type $f@@16)))) (=> (and (and (and (and (= (type |l#0@@23|) refType) (= (type |l#1@@13|) (MapType0Type refType MapType1Type))) (= (type |l#2@@11|) (FieldType boolType))) (= (type $o@@86) refType)) (= (type $f@@16) (FieldType alpha@@23))) (= (U_2_bool (MapType8Select (|lambda#18| |l#0@@23| |l#1@@13| |l#2@@11| |l#3@@11|) $o@@86 $f@@16))  (=> (and (not (= $o@@86 |l#0@@23|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@13| $o@@86) |l#2@@11|))) |l#3@@11|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5203| :pattern ( (MapType8Select (|lambda#18| |l#0@@23| |l#1@@13| |l#2@@11| |l#3@@11|) $o@@86 $f@@16)) )))
(assert (forall ((arg0@@767 T@U) (arg1@@365 T@U) (arg2@@219 T@U) (arg3@@146 Bool) ) (! (= (type (|lambda#19| arg0@@767 arg1@@365 arg2@@219 arg3@@146)) (MapType8Type refType boolType)) :qid |funType:lambda#19| :pattern ( (|lambda#19| arg0@@767 arg1@@365 arg2@@219 arg3@@146)) )))
(assert (forall ((|l#0@@24| T@U) (|l#1@@14| T@U) (|l#2@@12| T@U) (|l#3@@12| Bool) ($o@@87 T@U) ($f@@17 T@U) ) (! (let ((alpha@@24 (FieldTypeInv0 (type $f@@17)))) (=> (and (and (and (and (= (type |l#0@@24|) refType) (= (type |l#1@@14|) (MapType0Type refType MapType1Type))) (= (type |l#2@@12|) (FieldType boolType))) (= (type $o@@87) refType)) (= (type $f@@17) (FieldType alpha@@24))) (= (U_2_bool (MapType8Select (|lambda#19| |l#0@@24| |l#1@@14| |l#2@@12| |l#3@@12|) $o@@87 $f@@17))  (=> (and (not (= $o@@87 |l#0@@24|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@14| $o@@87) |l#2@@12|))) |l#3@@12|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5204| :pattern ( (MapType8Select (|lambda#19| |l#0@@24| |l#1@@14| |l#2@@12| |l#3@@12|) $o@@87 $f@@17)) )))
(assert (forall ((arg0@@768 T@U) (arg1@@366 T@U) (arg2@@220 T@U) (arg3@@147 Bool) ) (! (= (type (|lambda#20| arg0@@768 arg1@@366 arg2@@220 arg3@@147)) (MapType8Type refType boolType)) :qid |funType:lambda#20| :pattern ( (|lambda#20| arg0@@768 arg1@@366 arg2@@220 arg3@@147)) )))
(assert (forall ((|l#0@@25| T@U) (|l#1@@15| T@U) (|l#2@@13| T@U) (|l#3@@13| Bool) ($o@@88 T@U) ($f@@18 T@U) ) (! (let ((alpha@@25 (FieldTypeInv0 (type $f@@18)))) (=> (and (and (and (and (= (type |l#0@@25|) refType) (= (type |l#1@@15|) (MapType0Type refType MapType1Type))) (= (type |l#2@@13|) (FieldType boolType))) (= (type $o@@88) refType)) (= (type $f@@18) (FieldType alpha@@25))) (= (U_2_bool (MapType8Select (|lambda#20| |l#0@@25| |l#1@@15| |l#2@@13| |l#3@@13|) $o@@88 $f@@18))  (=> (and (not (= $o@@88 |l#0@@25|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@15| $o@@88) |l#2@@13|))) |l#3@@13|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5205| :pattern ( (MapType8Select (|lambda#20| |l#0@@25| |l#1@@15| |l#2@@13| |l#3@@13|) $o@@88 $f@@18)) )))
(assert (forall ((arg0@@769 T@U) (arg1@@367 T@U) (arg2@@221 T@U) (arg3@@148 Bool) ) (! (= (type (|lambda#21| arg0@@769 arg1@@367 arg2@@221 arg3@@148)) (MapType8Type refType boolType)) :qid |funType:lambda#21| :pattern ( (|lambda#21| arg0@@769 arg1@@367 arg2@@221 arg3@@148)) )))
(assert (forall ((|l#0@@26| T@U) (|l#1@@16| T@U) (|l#2@@14| T@U) (|l#3@@14| Bool) ($o@@89 T@U) ($f@@19 T@U) ) (! (let ((alpha@@26 (FieldTypeInv0 (type $f@@19)))) (=> (and (and (and (and (= (type |l#0@@26|) refType) (= (type |l#1@@16|) (MapType0Type refType MapType1Type))) (= (type |l#2@@14|) (FieldType boolType))) (= (type $o@@89) refType)) (= (type $f@@19) (FieldType alpha@@26))) (= (U_2_bool (MapType8Select (|lambda#21| |l#0@@26| |l#1@@16| |l#2@@14| |l#3@@14|) $o@@89 $f@@19))  (=> (and (not (= $o@@89 |l#0@@26|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@16| $o@@89) |l#2@@14|))) |l#3@@14|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5206| :pattern ( (MapType8Select (|lambda#21| |l#0@@26| |l#1@@16| |l#2@@14| |l#3@@14|) $o@@89 $f@@19)) )))
(assert (forall ((arg0@@770 T@U) (arg1@@368 T@U) (arg2@@222 T@U) (arg3@@149 Bool) ) (! (= (type (|lambda#22| arg0@@770 arg1@@368 arg2@@222 arg3@@149)) (MapType8Type refType boolType)) :qid |funType:lambda#22| :pattern ( (|lambda#22| arg0@@770 arg1@@368 arg2@@222 arg3@@149)) )))
(assert (forall ((|l#0@@27| T@U) (|l#1@@17| T@U) (|l#2@@15| T@U) (|l#3@@15| Bool) ($o@@90 T@U) ($f@@20 T@U) ) (! (let ((alpha@@27 (FieldTypeInv0 (type $f@@20)))) (=> (and (and (and (and (= (type |l#0@@27|) refType) (= (type |l#1@@17|) (MapType0Type refType MapType1Type))) (= (type |l#2@@15|) (FieldType boolType))) (= (type $o@@90) refType)) (= (type $f@@20) (FieldType alpha@@27))) (= (U_2_bool (MapType8Select (|lambda#22| |l#0@@27| |l#1@@17| |l#2@@15| |l#3@@15|) $o@@90 $f@@20))  (=> (and (not (= $o@@90 |l#0@@27|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@17| $o@@90) |l#2@@15|))) |l#3@@15|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5207| :pattern ( (MapType8Select (|lambda#22| |l#0@@27| |l#1@@17| |l#2@@15| |l#3@@15|) $o@@90 $f@@20)) )))
(assert (forall ((arg0@@771 T@U) (arg1@@369 T@U) (arg2@@223 T@U) (arg3@@150 Bool) ) (! (= (type (|lambda#23| arg0@@771 arg1@@369 arg2@@223 arg3@@150)) (MapType8Type refType boolType)) :qid |funType:lambda#23| :pattern ( (|lambda#23| arg0@@771 arg1@@369 arg2@@223 arg3@@150)) )))
(assert (forall ((|l#0@@28| T@U) (|l#1@@18| T@U) (|l#2@@16| T@U) (|l#3@@16| Bool) ($o@@91 T@U) ($f@@21 T@U) ) (! (let ((alpha@@28 (FieldTypeInv0 (type $f@@21)))) (=> (and (and (and (and (= (type |l#0@@28|) refType) (= (type |l#1@@18|) (MapType0Type refType MapType1Type))) (= (type |l#2@@16|) (FieldType boolType))) (= (type $o@@91) refType)) (= (type $f@@21) (FieldType alpha@@28))) (= (U_2_bool (MapType8Select (|lambda#23| |l#0@@28| |l#1@@18| |l#2@@16| |l#3@@16|) $o@@91 $f@@21))  (=> (and (not (= $o@@91 |l#0@@28|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@18| $o@@91) |l#2@@16|))) |l#3@@16|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5208| :pattern ( (MapType8Select (|lambda#23| |l#0@@28| |l#1@@18| |l#2@@16| |l#3@@16|) $o@@91 $f@@21)) )))
(assert (forall ((arg0@@772 T@U) (arg1@@370 T@U) (arg2@@224 T@U) (arg3@@151 Bool) ) (! (= (type (|lambda#24| arg0@@772 arg1@@370 arg2@@224 arg3@@151)) (MapType8Type refType boolType)) :qid |funType:lambda#24| :pattern ( (|lambda#24| arg0@@772 arg1@@370 arg2@@224 arg3@@151)) )))
(assert (forall ((|l#0@@29| T@U) (|l#1@@19| T@U) (|l#2@@17| T@U) (|l#3@@17| Bool) ($o@@92 T@U) ($f@@22 T@U) ) (! (let ((alpha@@29 (FieldTypeInv0 (type $f@@22)))) (=> (and (and (and (and (= (type |l#0@@29|) refType) (= (type |l#1@@19|) (MapType0Type refType MapType1Type))) (= (type |l#2@@17|) (FieldType boolType))) (= (type $o@@92) refType)) (= (type $f@@22) (FieldType alpha@@29))) (= (U_2_bool (MapType8Select (|lambda#24| |l#0@@29| |l#1@@19| |l#2@@17| |l#3@@17|) $o@@92 $f@@22))  (=> (and (not (= $o@@92 |l#0@@29|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@19| $o@@92) |l#2@@17|))) |l#3@@17|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5209| :pattern ( (MapType8Select (|lambda#24| |l#0@@29| |l#1@@19| |l#2@@17| |l#3@@17|) $o@@92 $f@@22)) )))
(assert (forall ((arg0@@773 T@U) (arg1@@371 T@U) (arg2@@225 T@U) (arg3@@152 Bool) ) (! (= (type (|lambda#25| arg0@@773 arg1@@371 arg2@@225 arg3@@152)) (MapType8Type refType boolType)) :qid |funType:lambda#25| :pattern ( (|lambda#25| arg0@@773 arg1@@371 arg2@@225 arg3@@152)) )))
(assert (forall ((|l#0@@30| T@U) (|l#1@@20| T@U) (|l#2@@18| T@U) (|l#3@@18| Bool) ($o@@93 T@U) ($f@@23 T@U) ) (! (let ((alpha@@30 (FieldTypeInv0 (type $f@@23)))) (=> (and (and (and (and (= (type |l#0@@30|) refType) (= (type |l#1@@20|) (MapType0Type refType MapType1Type))) (= (type |l#2@@18|) (FieldType boolType))) (= (type $o@@93) refType)) (= (type $f@@23) (FieldType alpha@@30))) (= (U_2_bool (MapType8Select (|lambda#25| |l#0@@30| |l#1@@20| |l#2@@18| |l#3@@18|) $o@@93 $f@@23))  (=> (and (not (= $o@@93 |l#0@@30|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@20| $o@@93) |l#2@@18|))) |l#3@@18|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5210| :pattern ( (MapType8Select (|lambda#25| |l#0@@30| |l#1@@20| |l#2@@18| |l#3@@18|) $o@@93 $f@@23)) )))
(assert (forall ((|l#0@@31| T@U) (|$w#0@@1| T@U) ) (!  (=> (and (= (type |l#0@@31|) TyType) (= (type |$w#0@@1|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#26| |l#0@@31|) |$w#0@@1|))  (and ($IsBox |$w#0@@1| |l#0@@31|) (MapSpec.__default.InDomain ($Unbox (SeqType BoxType) |$w#0@@1|))))) :qid |KeyTypesdfy.10:8| :skolemid |5211| :pattern ( (MapType0Select (|lambda#26| |l#0@@31|) |$w#0@@1|)) )))
(assert (forall ((|l#0@@32| T@U) (|$w#0@@2| T@U) ) (!  (=> (and (= (type |l#0@@32|) BoxType) (= (type |$w#0@@2|) BoxType)) (= (MapType0Select (|lambda#27| |l#0@@32|) |$w#0@@2|) |l#0@@32|)) :qid |MapSpecsdfy.47:5| :skolemid |5212| :pattern ( (MapType0Select (|lambda#27| |l#0@@32|) |$w#0@@2|)) )))
(assert (forall ((|l#0@@33| T@U) (|l#1@@21| T@U) (|l#2@@19| T@U) (|$w#0@@3| T@U) ) (!  (=> (and (and (and (= (type |l#0@@33|) TyType) (= (type |l#1@@21|) (MapType0Type BoxType boolType))) (= (type |l#2@@19|) BoxType)) (= (type |$w#0@@3|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#30| |l#0@@33| |l#1@@21| |l#2@@19|) |$w#0@@3|))  (and ($IsBox |$w#0@@3| |l#0@@33|) (and (U_2_bool (MapType0Select |l#1@@21| |$w#0@@3|)) (not (= |$w#0@@3| |l#2@@19|)))))) :qid |unknown.0:0| :skolemid |5213| :pattern ( (MapType0Select (|lambda#30| |l#0@@33| |l#1@@21| |l#2@@19|) |$w#0@@3|)) )))
(assert (forall ((|l#0@@34| T@U) (|$w#0@@4| T@U) ) (!  (=> (and (= (type |l#0@@34|) (MapType0Type BoxType BoxType)) (= (type |$w#0@@4|) BoxType)) (= (MapType0Select (|lambda#31| |l#0@@34|) |$w#0@@4|) (MapType0Select |l#0@@34| |$w#0@@4|))) :qid |MapRemovesdfy.22:44| :skolemid |5214| :pattern ( (MapType0Select (|lambda#31| |l#0@@34|) |$w#0@@4|)) )))
(assert (forall ((|l#0@@35| T@U) (|l#1@@22| T@U) (|l#2@@20| T@U) (|$w#0@@5| T@U) ) (!  (=> (and (and (and (= (type |l#0@@35|) TyType) (= (type |l#1@@22|) (MapType0Type BoxType boolType))) (= (type |l#2@@20|) (MapType0Type BoxType boolType))) (= (type |$w#0@@5|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#36| |l#0@@35| |l#1@@22| |l#2@@20|) |$w#0@@5|))  (and ($IsBox |$w#0@@5| |l#0@@35|) (and (U_2_bool (MapType0Select |l#1@@22| |$w#0@@5|)) (not (U_2_bool (MapType0Select |l#2@@20| |$w#0@@5|))))))) :qid |unknown.0:0| :skolemid |5215| :pattern ( (MapType0Select (|lambda#36| |l#0@@35| |l#1@@22| |l#2@@20|) |$w#0@@5|)) )))
(assert (forall ((|l#0@@36| T@U) (|l#1@@23| T@U) (|l#2@@21| T@U) (|$w#0@@6| T@U) ) (!  (=> (and (and (and (= (type |l#0@@36|) TyType) (= (type |l#1@@23|) (MapType0Type BoxType boolType))) (= (type |l#2@@21|) (MapType0Type BoxType boolType))) (= (type |$w#0@@6|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#48| |l#0@@36| |l#1@@23| |l#2@@21|) |$w#0@@6|))  (and ($IsBox |$w#0@@6| |l#0@@36|) (and (U_2_bool (MapType0Select |l#1@@23| |$w#0@@6|)) (U_2_bool (MapType0Select |l#2@@21| |$w#0@@6|)))))) :qid |unknown.0:0| :skolemid |5216| :pattern ( (MapType0Select (|lambda#48| |l#0@@36| |l#1@@23| |l#2@@21|) |$w#0@@6|)) )))
(assert (forall ((|l#0@@37| T@U) (|l#1@@24| T@U) (|l#2@@22| T@U) (|$w#0@@7| T@U) ) (!  (=> (and (and (and (= (type |l#0@@37|) (MapType0Type BoxType boolType)) (= (type |l#1@@24|) (MapType0Type BoxType BoxType))) (= (type |l#2@@22|) (MapType0Type BoxType BoxType))) (= (type |$w#0@@7|) BoxType)) (= (MapType0Select (|lambda#63| |l#0@@37| |l#1@@24| |l#2@@22|) |$w#0@@7|) (ite (U_2_bool (MapType0Select |l#0@@37| |$w#0@@7|)) (MapType0Select |l#1@@24| |$w#0@@7|) (MapType0Select |l#2@@22| |$w#0@@7|)))) :qid |Mapsidfy.115:52| :skolemid |5217| :pattern ( (MapType0Select (|lambda#63| |l#0@@37| |l#1@@24| |l#2@@22|) |$w#0@@7|)) )))
(assert (forall ((|l#0@@38| T@U) (|l#1@@25| T@U) (|l#2@@23| T@U) (|l#3@@19| T@U) (|l#4| T@U) (|$w#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type |l#0@@38|) (MapType0Type BoxType boolType)) (= (type |l#1@@25|) (MapType0Type BoxType BoxType))) (= (type |l#2@@23|) (MapType0Type BoxType boolType))) (= (type |l#3@@19|) (MapType0Type BoxType BoxType))) (= (type |l#4|) (MapType0Type BoxType BoxType))) (= (type |$w#0@@8|) BoxType)) (= (MapType0Select (|lambda#83| |l#0@@38| |l#1@@25| |l#2@@23| |l#3@@19| |l#4|) |$w#0@@8|) (ite (U_2_bool (MapType0Select |l#0@@38| |$w#0@@8|)) (MapType0Select |l#1@@25| |$w#0@@8|) (ite (U_2_bool (MapType0Select |l#2@@23| |$w#0@@8|)) (MapType0Select |l#3@@19| |$w#0@@8|) (MapType0Select |l#4| |$w#0@@8|))))) :qid |Mapsidfy.190:9| :skolemid |5218| :pattern ( (MapType0Select (|lambda#83| |l#0@@38| |l#1@@25| |l#2@@23| |l#3@@19| |l#4|) |$w#0@@8|)) )))
(assert (forall ((|l#0@@39| T@U) (|l#1@@26| T@U) (|l#2@@24| Int) (|$y#0| T@U) ) (!  (=> (and (and (= (type |l#0@@39|) TyType) (= (type |l#1@@26|) (MapType0Type BoxType intType))) (= (type |$y#0|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#90| |l#0@@39| |l#1@@26| |l#2@@24|) |$y#0|))  (and ($IsBox |$y#0| |l#0@@39|) (> (U_2_int (MapType0Select |l#1@@26| |$y#0|)) |l#2@@24|)))) :qid |unknown.0:0| :skolemid |5219| :pattern ( (MapType0Select (|lambda#90| |l#0@@39| |l#1@@26| |l#2@@24|) |$y#0|)) )))
(assert (forall ((|l#0@@40| T@U) (|l#1@@27| T@U) (|$l#0#heap#0| T@U) (|$l#0#i#0| T@U) ) (!  (=> (and (and (and (= (type |l#0@@40|) TyType) (= (type |l#1@@27|) (SeqType BoxType))) (= (type |$l#0#heap#0|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0|) BoxType)) (= (MapType2Select (|lambda#98| |l#0@@40| |l#1@@27|) |$l#0#heap#0| |$l#0#i#0|) ($Box (bool_2_U (LinearMaybe.__default.has |l#0@@40| (|Seq#Index| |l#1@@27| (U_2_int ($Unbox intType |$l#0#i#0|)))))))) :qid |unknown.0:0| :skolemid |5220| :pattern ( (MapType2Select (|lambda#98| |l#0@@40| |l#1@@27|) |$l#0#heap#0| |$l#0#i#0|)) )))
(assert (forall ((|l#0@@41| T@U) (|l#1@@28| Int) (|l#2@@25| Int) (|$l#0#heap#0@@0| T@U) (|$l#0#i#0@@0| T@U) ) (!  (=> (and (and (= (type |l#0@@41|) TyType) (= (type |$l#0#heap#0@@0|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0@@0|) BoxType)) (= (U_2_bool (MapType2Select (|lambda#99| |l#0@@41| |l#1@@28| |l#2@@25|) |$l#0#heap#0@@0| |$l#0#i#0@@0|))  (and ($IsBox |$l#0#i#0@@0| |l#0@@41|) (and (<= |l#1@@28| (U_2_int ($Unbox intType |$l#0#i#0@@0|))) (< (U_2_int ($Unbox intType |$l#0#i#0@@0|)) |l#2@@25|))))) :qid |DafnyPreludebpl.22:1| :skolemid |5221| :pattern ( (MapType2Select (|lambda#99| |l#0@@41| |l#1@@28| |l#2@@25|) |$l#0#heap#0@@0| |$l#0#i#0@@0|)) )))
(assert (forall ((|l#0@@42| Bool) (|$l#0#o#0| T@U) ) (!  (=> (= (type |$l#0#o#0|) refType) (= (U_2_bool (MapType0Select (|lambda#100| |l#0@@42|) |$l#0#o#0|)) |l#0@@42|)) :qid |unknown.0:0| :skolemid |5222| :pattern ( (MapType0Select (|lambda#100| |l#0@@42|) |$l#0#o#0|)) )))
(assert (forall ((|l#0@@43| T@U) (|$l#0#heap#0@@1| T@U) (|$l#0#i#0@@1| T@U) ) (!  (=> (and (and (= (type |l#0@@43|) (MapType0Type BoxType boolType)) (= (type |$l#0#heap#0@@1|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0@@1|) BoxType)) (= (MapType2Select (|lambda#101| |l#0@@43|) |$l#0#heap#0@@1| |$l#0#i#0@@1|) |l#0@@43|)) :qid |LinearSequencesdfy.68:25| :skolemid |5223| :pattern ( (MapType2Select (|lambda#101| |l#0@@43|) |$l#0#heap#0@@1| |$l#0#i#0@@1|)) )))
(assert (forall ((|l#0@@44| T@U) (|$l#0#ly#0| T@U) ) (!  (=> (and (= (type |l#0@@44|) HandleTypeType) (= (type |$l#0#ly#0|) LayerTypeType)) (= (MapType0Select (|lambda#102| |l#0@@44|) |$l#0#ly#0|) |l#0@@44|)) :qid |LinearSequencesdfy.68:25| :skolemid |5224| :pattern ( (MapType0Select (|lambda#102| |l#0@@44|) |$l#0#ly#0|)) )))
(assert (forall ((|l#0@@45| T@U) (|l#1@@29| T@U) (|l#2@@26| T@U) (|l#3@@20| T@U) (|l#4@@0| T@U) (|$y#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type |l#0@@45|) TyType) (= (type |l#1@@29|) (MapType0Type BoxType boolType))) (= (type |l#2@@26|) (MapType0Type BoxType BoxType))) (= (type |l#3@@20|) (MapType0Type BoxType boolType))) (= (type |l#4@@0|) (MapType0Type BoxType BoxType))) (= (type |$y#0@@0|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#108| |l#0@@45| |l#1@@29| |l#2@@26| |l#3@@20| |l#4@@0|) |$y#0@@0|)) (exists ((|k#0@@66| T@U) ) (!  (and (= (type |k#0@@66|) (SeqType BoxType)) (and (and ($Is |k#0@@66| |l#0@@45|) (U_2_bool (MapType0Select |l#1@@29| ($Box |k#0@@66|)))) (= |$y#0@@0| (MapType0Select |l#2@@26| ($Box |k#0@@66|))))) :qid |BetreeSpecidfy.34:10| :skolemid |3207| :pattern ( (MapType0Select |l#4@@0| ($Box |k#0@@66|))) :pattern ( (MapType0Select |l#3@@20| ($Box |k#0@@66|))) )))) :qid |unknown.0:0| :skolemid |5225| :pattern ( (MapType0Select (|lambda#108| |l#0@@45| |l#1@@29| |l#2@@26| |l#3@@20| |l#4@@0|) |$y#0@@0|)) )))
(assert (forall ((|l#0@@46| T@U) (|l#1@@30| T@U) (|l#2@@27| Int) (|l#3@@21| Int) (|l#4@@1| T@U) (|l#5| T@U) (|l#6| T@U) (|l#7| Int) (|l#8| T@U) (|$y#0@@1| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |l#0@@46|) TyType) (= (type |l#1@@30|) (IMapType BoxType BoxType))) (= (type |l#4@@1|) BoxType)) (= (type |l#5|) TyType)) (= (type |l#6|) (IMapType BoxType BoxType))) (= (type |l#8|) TyType)) (= (type |$y#0@@1|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#110| |l#0@@46| |l#1@@30| |l#2@@27| |l#3@@21| |l#4@@1| |l#5| |l#6| |l#7| |l#8|) |$y#0@@1|)) (exists ((|path#0@@50| T@U) ) (!  (and (= (type |path#0@@50|) (SeqType BoxType)) (and (and ($Is |path#0@@50| |l#0@@46|) (and (and (BetreeGraph.__default.IsPath |l#1@@30| |path#0@@50|) (< |l#2@@27| (|Seq#Length| |path#0@@50|))) (= (|Seq#Index| |path#0@@50| |l#3@@21|) |l#4@@1|))) (= |$y#0@@1| (Sequences.__default.Last |l#5| |path#0@@50|)))) :qid |GraphidfyBetreeGraph.97:10| :skolemid |3266| :pattern ( (Sequences.__default.Last |l#8| |path#0@@50|)) :pattern ( (|Seq#Index| |path#0@@50| |l#7|)) :pattern ( (|Seq#Length| |path#0@@50|)) :pattern ( (BetreeGraph.__default.IsPath |l#6| |path#0@@50|)) )))) :qid |unknown.0:0| :skolemid |5226| :pattern ( (MapType0Select (|lambda#110| |l#0@@46| |l#1@@30| |l#2@@27| |l#3@@21| |l#4@@1| |l#5| |l#6| |l#7| |l#8|) |$y#0@@1|)) )))
(assert (forall ((|l#0@@47| T@U) (|l#1@@31| T@U) (|l#2@@28| T@U) (|l#3@@22| T@U) (|l#4@@2| T@U) (|l#5@@0| T@U) (|l#6@@0| T@U) (|l#7@@0| T@U) (|l#8@@0| T@U) (|$y#0@@2| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |l#0@@47|) TyType) (= (type |l#1@@31|) (IMapType BoxType BoxType))) (= (type |l#2@@28|) (IMapType BoxType BoxType))) (= (type |l#3@@22|) BoxType)) (= (type |l#4@@2|) TyType)) (= (type |l#5@@0|) (IMapType BoxType BoxType))) (= (type |l#6@@0|) (IMapType BoxType BoxType))) (= (type |l#7@@0|) BoxType)) (= (type |l#8@@0|) TyType)) (= (type |$y#0@@2|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#112| |l#0@@47| |l#1@@31| |l#2@@28| |l#3@@22| |l#4@@2| |l#5@@0| |l#6@@0| |l#7@@0| |l#8@@0|) |$y#0@@2|)) (exists ((|path#0@@51| T@U) ) (!  (and (= (type |path#0@@51|) (SeqType BoxType)) (and (and ($Is |path#0@@51| |l#0@@47|) (BetreeGraph.__default.NewPath |l#1@@31| |l#2@@28| |l#3@@22| |path#0@@51|)) (= |$y#0@@2| (Sequences.__default.Last |l#4@@2| |path#0@@51|)))) :qid |GraphidfyBetreeGraph.114:10| :skolemid |3285| :pattern ( (Sequences.__default.Last |l#8@@0| |path#0@@51|)) :pattern ( (BetreeGraph.__default.NewPath |l#5@@0| |l#6@@0| |l#7@@0| |path#0@@51|)) )))) :qid |unknown.0:0| :skolemid |5227| :pattern ( (MapType0Select (|lambda#112| |l#0@@47| |l#1@@31| |l#2@@28| |l#3@@22| |l#4@@2| |l#5@@0| |l#6@@0| |l#7@@0| |l#8@@0|) |$y#0@@2|)) )))
(assert (forall ((|l#0@@48| T@U) (|l#1@@32| Int) (|l#2@@29| Int) (|$y#0@@3| T@U) ) (!  (=> (and (= (type |l#0@@48|) TyType) (= (type |$y#0@@3|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#114| |l#0@@48| |l#1@@32| |l#2@@29|) |$y#0@@3|))  (and ($IsBox |$y#0@@3| |l#0@@48|) (and (<= |l#1@@32| (U_2_int ($Unbox intType |$y#0@@3|))) (< (U_2_int ($Unbox intType |$y#0@@3|)) |l#2@@29|))))) :qid |DafnyPreludebpl.22:1| :skolemid |5228| :pattern ( (MapType0Select (|lambda#114| |l#0@@48| |l#1@@32| |l#2@@29|) |$y#0@@3|)) )))
(assert (forall ((|l#0@@49| T@U) (|l#1@@33| Int) (|$y#2| T@U) ) (!  (=> (and (= (type |l#0@@49|) TyType) (= (type |$y#2|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#116| |l#0@@49| |l#1@@33|) |$y#2|))  (and ($IsBox |$y#2| |l#0@@49|) (Byte__Order.__default.lt (U_2_int ($Unbox intType |$y#2|)) |l#1@@33|)))) :qid |NativeTypessdfy.6:31| :skolemid |5229| :pattern ( (MapType0Select (|lambda#116| |l#0@@49| |l#1@@33|) |$y#2|)) )))
(assert (forall ((|l#0@@50| T@U) (|l#1@@34| T@U) (|l#2@@30| Int) (|$y#3| T@U) ) (!  (=> (and (and (= (type |l#0@@50|) TyType) (= (type |l#1@@34|) LayerTypeType)) (= (type |$y#3|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#118| |l#0@@50| |l#1@@34| |l#2@@30|) |$y#3|))  (and ($IsBox |$y#3| |l#0@@50|) (Byte__Order.__default.lte |l#1@@34| |l#2@@30| (U_2_int ($Unbox intType |$y#3|)))))) :qid |NativeTypessdfy.6:31| :skolemid |5230| :pattern ( (MapType0Select (|lambda#118| |l#0@@50| |l#1@@34| |l#2@@30|) |$y#3|)) )))
(assert (forall ((|l#0@@51| T@U) (|l#1@@35| T@U) (|$y#1| T@U) ) (!  (=> (and (and (= (type |l#0@@51|) TyType) (= (type |l#1@@35|) (SeqType BoxType))) (= (type |$y#1|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#128| |l#0@@51| |l#1@@35|) |$y#1|))  (and ($IsBox |$y#1| |l#0@@51|) (|Seq#Contains| |l#1@@35| |$y#1|)))) :qid |NativeTypessdfy.6:31| :skolemid |5231| :pattern ( (MapType0Select (|lambda#128| |l#0@@51| |l#1@@35|) |$y#1|)) )))
(assert (forall ((|l#0@@52| T@U) (|l#1@@36| T@U) (|$y#2@@0| T@U) ) (!  (=> (and (and (= (type |l#0@@52|) TyType) (= (type |l#1@@36|) (SeqType BoxType))) (= (type |$y#2@@0|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#132| |l#0@@52| |l#1@@36|) |$y#2@@0|))  (and ($IsBox |$y#2@@0| |l#0@@52|) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) |$y#2@@0|) |l#1@@36|)))) :qid |unknown.0:0| :skolemid |5232| :pattern ( (MapType0Select (|lambda#132| |l#0@@52| |l#1@@36|) |$y#2@@0|)) )))
(assert (forall ((|l#0@@53| T@U) (|l#1@@37| T@U) (|$y#3@@0| T@U) ) (!  (=> (and (and (= (type |l#0@@53|) TyType) (= (type |l#1@@37|) (SeqType BoxType))) (= (type |$y#3@@0|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#134| |l#0@@53| |l#1@@37|) |$y#3@@0|))  (and ($IsBox |$y#3@@0| |l#0@@53|) (Lexicographic__Byte__Order.__default.lte |l#1@@37| ($Unbox (SeqType BoxType) |$y#3@@0|))))) :qid |unknown.0:0| :skolemid |5233| :pattern ( (MapType0Select (|lambda#134| |l#0@@53| |l#1@@37|) |$y#3@@0|)) )))
(assert (forall ((|l#0@@54| T@U) (|l#1@@38| T@U) (|l#2@@31| T@U) (|$w#4| T@U) ) (!  (=> (and (and (and (= (type |l#0@@54|) (MapType0Type BoxType boolType)) (= (type |l#1@@38|) BoxType)) (= (type |l#2@@31|) (MapType0Type BoxType BoxType))) (= (type |$w#4|) BoxType)) (= (MapType0Select (|lambda#149| |l#0@@54| |l#1@@38| |l#2@@31|) |$w#4|) (ite (U_2_bool (MapType0Select |l#0@@54| |$w#4|)) |l#1@@38| (MapType0Select |l#2@@31| |$w#4|)))) :qid |BetreeSpecidfy.220:91| :skolemid |5234| :pattern ( (MapType0Select (|lambda#149| |l#0@@54| |l#1@@38| |l#2@@31|) |$w#4|)) )))
(assert (forall ((|l#0@@55| T@U) (|l#1@@39| Bool) (|$w#3| T@U) ) (!  (=> (and (= (type |l#0@@55|) TyType) (= (type |$w#3|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#150| |l#0@@55| |l#1@@39|) |$w#3|))  (and ($IsBox |$w#3| |l#0@@55|) |l#1@@39|))) :qid |KeyTypesdfy.10:8| :skolemid |5235| :pattern ( (MapType0Select (|lambda#150| |l#0@@55| |l#1@@39|) |$w#3|)) )))
(assert (forall ((|l#0@@56| T@U) (|l#1@@40| T@U) (|l#2@@32| T@U) (|$w#3@@0| T@U) ) (!  (=> (and (and (and (= (type |l#0@@56|) (MapType0Type BoxType boolType)) (= (type |l#1@@40|) DatatypeTypeType)) (= (type |l#2@@32|) (MapType0Type BoxType BoxType))) (= (type |$w#3@@0|) BoxType)) (= (MapType0Select (|lambda#151| |l#0@@56| |l#1@@40| |l#2@@32|) |$w#3@@0|) ($Box (ite (U_2_bool (MapType0Select |l#0@@56| |$w#3@@0|)) |l#1@@40| ($Unbox DatatypeTypeType (MapType0Select |l#2@@32| |$w#3@@0|)))))) :qid |BetreeSpecidfy.221:66| :skolemid |5236| :pattern ( (MapType0Select (|lambda#151| |l#0@@56| |l#1@@40| |l#2@@32|) |$w#3@@0|)) )))
(assert (forall ((|l#0@@57| T@U) (|l#1@@41| T@U) (|l#2@@33| T@U) (|l#3@@23| T@U) (|$w#2| T@U) ) (!  (=> (and (and (and (and (= (type |l#0@@57|) (MapType0Type BoxType boolType)) (= (type |l#1@@41|) (MapType0Type BoxType BoxType))) (= (type |l#2@@33|) (MapType0Type BoxType BoxType))) (= (type |l#3@@23|) (MapType0Type BoxType BoxType))) (= (type |$w#2|) BoxType)) (= (MapType0Select (|lambda#157| |l#0@@57| |l#1@@41| |l#2@@33| |l#3@@23|) |$w#2|) ($Box (ite (U_2_bool (MapType0Select |l#0@@57| |$w#2|)) (ValueMessage.__default.Merge ($Unbox DatatypeTypeType (MapType0Select |l#1@@41| |$w#2|)) ($Unbox DatatypeTypeType (MapType0Select |l#2@@33| |$w#2|))) ($Unbox DatatypeTypeType (MapType0Select |l#3@@23| |$w#2|)))))) :qid |BetreeSpecidfy.223:65| :skolemid |5237| :pattern ( (MapType0Select (|lambda#157| |l#0@@57| |l#1@@41| |l#2@@33| |l#3@@23|) |$w#2|)) )))
(assert (forall ((|l#0@@58| T@U) (|l#1@@42| T@U) (|$y#0@@4| T@U) ) (!  (=> (and (and (= (type |l#0@@58|) TyType) (= (type |l#1@@42|) DatatypeTypeType)) (= (type |$y#0@@4|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#176| |l#0@@58| |l#1@@42|) |$y#0@@4|))  (and ($IsBox |$y#0@@4| |l#0@@58|) (BetreeBlockInterface.__default.ReachableReference |l#1@@42| |$y#0@@4|)))) :qid |Graphidfy.18:8| :skolemid |5238| :pattern ( (MapType0Select (|lambda#176| |l#0@@58| |l#1@@42|) |$y#0@@4|)) )))
(assert (forall ((|l#0@@59| T@U) (|l#1@@43| T@U) (|l#2@@34| T@U) (|l#3@@24| T@U) (|$y#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type |l#0@@59|) TyType) (= (type |l#1@@43|) (MapType0Type BoxType boolType))) (= (type |l#2@@34|) (MapType0Type BoxType BoxType))) (= (type |l#3@@24|) BoxType)) (= (type |$y#0@@5|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#178| |l#0@@59| |l#1@@43| |l#2@@34| |l#3@@24|) |$y#0@@5|))  (and ($IsBox |$y#0@@5| |l#0@@59|) (and (U_2_bool (MapType0Select |l#1@@43| |$y#0@@5|)) (U_2_bool (MapType0Select (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select |l#2@@34| |$y#0@@5|))) |l#3@@24|)))))) :qid |Graphidfy.18:8| :skolemid |5239| :pattern ( (MapType0Select (|lambda#178| |l#0@@59| |l#1@@43| |l#2@@34| |l#3@@24|) |$y#0@@5|)) )))
(assert (forall ((|l#0@@60| T@U) (|$w#0@@9| T@U) ) (!  (=> (and (= (type |l#0@@60|) (IMapType BoxType BoxType)) (= (type |$w#0@@9|) BoxType)) (= (MapType0Select (|lambda#185| |l#0@@60|) |$w#0@@9|) ($Box (Betree__Refines__Map.__default.GetValue |l#0@@60| ($Unbox (SeqType BoxType) |$w#0@@9|))))) :qid |BetreeRefinesMapidfy.40:18| :skolemid |5240| :pattern ( (MapType0Select (|lambda#185| |l#0@@60|) |$w#0@@9|)) )))
(declare-fun ControlFlow (Int Int) Int)
(declare-fun StartFuelAssert_SeqComparison._default.lte () T@U)
(declare-fun StartFuel_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuel_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove () T@U)
(declare-fun StartFuel_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuel_Maps._default.MapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuel_Maps._default.IMapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnion () T@U)
(declare-fun StartFuel_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuel_Sequences._default.Range () T@U)
(declare-fun StartFuelAssert_Sequences._default.Range () T@U)
(declare-fun StartFuel_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuelAssert_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuel_Sequences._default.remove () T@U)
(declare-fun StartFuelAssert_Sequences._default.remove () T@U)
(declare-fun StartFuel_Sequences._default.RemoveOneValue () T@U)
(declare-fun StartFuelAssert_Sequences._default.RemoveOneValue () T@U)
(declare-fun StartFuel_Sequences._default.insert () T@U)
(declare-fun StartFuelAssert_Sequences._default.insert () T@U)
(declare-fun StartFuel_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuel_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuel_Sequences._default.concat () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat () T@U)
(declare-fun StartFuel_Sequences._default.concat3 () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat3 () T@U)
(declare-fun StartFuel_Sequences._default.concatSeq () T@U)
(declare-fun StartFuelAssert_Sequences._default.concatSeq () T@U)
(declare-fun StartFuel_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuel_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexIterate () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuel_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuel_Sequences._default.Zip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Zip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Unzip () T@U)
(declare-fun StartFuel_Sequences._default.Flatten () T@U)
(declare-fun StartFuelAssert_Sequences._default.Flatten () T@U)
(declare-fun StartFuel_Sequences._default.seqMax () T@U)
(declare-fun StartFuelAssert_Sequences._default.seqMax () T@U)
(declare-fun StartFuel_Sequences._default.fill () T@U)
(declare-fun StartFuelAssert_Sequences._default.fill () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.lte () T@U)
(declare-fun StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuel_Byte_Order._default.NotMinimum () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.NotMinimum () T@U)
(declare-fun StartFuel_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.minimum () T@U)
(declare-fun StartFuel_Byte_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.maximum () T@U)
(declare-fun StartFuel_Byte_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.NotMinimum () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.minimum () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.maximum () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun StartFuelAssert_BetreeSpec._default.RedirectReads () T@U)
(declare-fun StartFuelAssert_BetreeSpec._default.RedirectOps () T@U)
(declare-fun StartFuelAssert_BetreeBlockInterface._default.OpTransaction () T@U)
(declare-fun BaseFuel_BetreeInv._default.IsSatisfyingLookup () T@U)
(declare-fun StartFuelAssert_BetreeInv._default.IsSatisfyingLookup () T@U)
(declare-fun $_Frame@0 () T@U)
(declare-fun $Heap@@75 () T@U)
(declare-fun |s#0@@486| () T@U)
(declare-fun |uiop#0@@101| () T@U)
(declare-fun |qs#0@0| () T@U)
(declare-fun |s'#0@@185| () T@U)
(declare-fun |##s#8@0| () T@U)
(declare-fun |##s'#2@0| () T@U)
(declare-fun |##step#0@0| () T@U)
(declare-fun |qs#0@@3| () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type StartFuelAssert_SeqComparison._default.lte) LayerTypeType) (= (type StartFuel_Maps._default.MapRemoveStrong) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemoveStrong) LayerTypeType)) (= (type StartFuel_Maps._default.MapRemove1Strong) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemove1Strong) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapRemove) LayerTypeType)) (= (type StartFuel_Maps._default.IMapRemove1) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapRemove1) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapDisjointUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnionPreferA) LayerTypeType)) (= (type StartFuel_Maps._default.MapUnionPreferB) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnionPreferB) LayerTypeType)) (= (type StartFuel_Maps._default.MapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnionPreferA) LayerTypeType)) (= (type StartFuel_Maps._default.IMapUnionPreferB) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnionPreferB) LayerTypeType)) (= (type StartFuel_Maps._default.IMapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnion) LayerTypeType)) (= (type StartFuel_Maps._default.MapDisjointUnion3) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapDisjointUnion3) LayerTypeType)) (= (type StartFuel_Sequences._default.Range) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Range) LayerTypeType)) (= (type StartFuel_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuel_Sequences._default.remove) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.remove) LayerTypeType)) (= (type StartFuel_Sequences._default.RemoveOneValue) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.RemoveOneValue) LayerTypeType)) (= (type StartFuel_Sequences._default.insert) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.insert) LayerTypeType)) (= (type StartFuel_Sequences._default.replace1with2) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace1with2) LayerTypeType)) (= (type StartFuel_Sequences._default.replace2with1) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace2with1) LayerTypeType)) (= (type StartFuel_Sequences._default.concat) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat) LayerTypeType)) (= (type StartFuel_Sequences._default.concat3) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat3) LayerTypeType)) (= (type StartFuel_Sequences._default.concatSeq) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concatSeq) LayerTypeType)) (= (type StartFuel_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuel_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexIterate) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuel_Sequences._default.Zip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Zip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Unzip) LayerTypeType)) (= (type StartFuel_Sequences._default.Flatten) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Flatten) LayerTypeType)) (= (type StartFuel_Sequences._default.seqMax) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.seqMax) LayerTypeType)) (= (type StartFuel_Sequences._default.fill) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.fill) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.lte) LayerTypeType)) (= (type StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuel_Byte_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuel_Byte_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.minimum) LayerTypeType)) (= (type StartFuel_Byte_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.maximum) LayerTypeType)) (= (type StartFuel_Byte_Order._default.maximumOpt) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.maximumOpt) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.IsStrictlySorted) LayerTypeType)) (= (type StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuel_Lexicographic_Byte_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuel_Lexicographic_Byte_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.minimum) LayerTypeType)) (= (type StartFuel_Lexicographic_Byte_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.maximum) LayerTypeType)) (= (type StartFuel_Lexicographic_Byte_Order._default.maximumOpt) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.maximumOpt) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted) LayerTypeType)) (= (type StartFuelAssert_BetreeSpec._default.RedirectReads) LayerTypeType)) (= (type StartFuelAssert_BetreeSpec._default.RedirectOps) LayerTypeType)) (= (type StartFuelAssert_BetreeBlockInterface._default.OpTransaction) LayerTypeType)) (= (type BaseFuel_BetreeInv._default.IsSatisfyingLookup) LayerTypeType)) (= (type StartFuelAssert_BetreeInv._default.IsSatisfyingLookup) LayerTypeType)) (= (type $_Frame@0) (MapType8Type refType boolType))) (= (type $Heap@@75) (MapType0Type refType MapType1Type))) (= (type |s#0@@486|) DatatypeTypeType)) (= (type |uiop#0@@101|) DatatypeTypeType)) (= (type |qs#0@0|) DatatypeTypeType)) (= (type |s'#0@@185|) DatatypeTypeType)) (= (type |##s#8@0|) DatatypeTypeType)) (= (type |##s'#2@0|) DatatypeTypeType)) (= (type |##step#0@0|) DatatypeTypeType)) (= (type |qs#0@@3|) DatatypeTypeType)))
(push 1)
(set-info :boogie-vc-id Impl$$AsyncBetree__Refines__AsyncMap.__default.RefinesQueryEndStep)
(assert (not (=> (= (ControlFlow 0 0) 577775) (let ((anon0_correct  (=> (= (AsFuelBottom StartFuel_SeqComparison._default.lte) StartFuel_SeqComparison._default.lte) (=> (and (and (= (AsFuelBottom StartFuelAssert_SeqComparison._default.lte) StartFuelAssert_SeqComparison._default.lte) (= (AsFuelBottom StartFuel_MapRemove_s._default.MapRemove1) StartFuel_MapRemove_s._default.MapRemove1)) (and (= (AsFuelBottom StartFuelAssert_MapRemove_s._default.MapRemove1) StartFuelAssert_MapRemove_s._default.MapRemove1) (= (AsFuelBottom StartFuel_Maps._default.MapRemove) StartFuel_Maps._default.MapRemove))) (=> (and (and (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove) StartFuelAssert_Maps._default.MapRemove) (= (AsFuelBottom StartFuel_Maps._default.MapRemoveStrong) StartFuel_Maps._default.MapRemoveStrong)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemoveStrong) StartFuelAssert_Maps._default.MapRemoveStrong) (= (AsFuelBottom StartFuel_Maps._default.MapRemove1Strong) StartFuel_Maps._default.MapRemove1Strong))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove1Strong) StartFuelAssert_Maps._default.MapRemove1Strong) (= (AsFuelBottom StartFuel_Maps._default.IMapRemove) StartFuel_Maps._default.IMapRemove)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove) StartFuelAssert_Maps._default.IMapRemove) (= (AsFuelBottom StartFuel_Maps._default.IMapRemove1) StartFuel_Maps._default.IMapRemove1)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove1) StartFuelAssert_Maps._default.IMapRemove1) (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion) StartFuel_Maps._default.MapDisjointUnion)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion) StartFuelAssert_Maps._default.MapDisjointUnion) (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferA) StartFuel_Maps._default.MapUnionPreferA))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferA) StartFuelAssert_Maps._default.MapUnionPreferA) (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferB) StartFuel_Maps._default.MapUnionPreferB)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferB) StartFuelAssert_Maps._default.MapUnionPreferB) (= (AsFuelBottom StartFuel_Maps._default.MapUnion) StartFuel_Maps._default.MapUnion))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnion) StartFuelAssert_Maps._default.MapUnion) (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferA) StartFuel_Maps._default.IMapUnionPreferA)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferA) StartFuelAssert_Maps._default.IMapUnionPreferA) (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferB) StartFuel_Maps._default.IMapUnionPreferB))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferB) StartFuelAssert_Maps._default.IMapUnionPreferB) (= (AsFuelBottom StartFuel_Maps._default.IMapUnion) StartFuel_Maps._default.IMapUnion)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnion) StartFuelAssert_Maps._default.IMapUnion) (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion3) StartFuel_Maps._default.MapDisjointUnion3)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion3) StartFuelAssert_Maps._default.MapDisjointUnion3) (= (AsFuelBottom StartFuel_Sequences._default.NoDupes) StartFuel_Sequences._default.NoDupes)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.NoDupes) StartFuelAssert_Sequences._default.NoDupes) (= (AsFuelBottom StartFuel_Sequences._default.Range) StartFuel_Sequences._default.Range))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Range) StartFuelAssert_Sequences._default.Range) (= (AsFuelBottom StartFuel_Sequences._default.ApplyOpaque) StartFuel_Sequences._default.ApplyOpaque)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.ApplyOpaque) StartFuelAssert_Sequences._default.ApplyOpaque) (= (AsFuelBottom StartFuel_Sequences._default.remove) StartFuel_Sequences._default.remove)))))) (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.remove) StartFuelAssert_Sequences._default.remove) (= (AsFuelBottom StartFuel_Sequences._default.RemoveOneValue) StartFuel_Sequences._default.RemoveOneValue)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.RemoveOneValue) StartFuelAssert_Sequences._default.RemoveOneValue) (= (AsFuelBottom StartFuel_Sequences._default.insert) StartFuel_Sequences._default.insert))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.insert) StartFuelAssert_Sequences._default.insert) (= (AsFuelBottom StartFuel_Sequences._default.replace1with2) StartFuel_Sequences._default.replace1with2)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.replace1with2) StartFuelAssert_Sequences._default.replace1with2) (= (AsFuelBottom StartFuel_Sequences._default.replace2with1) StartFuel_Sequences._default.replace2with1)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.replace2with1) StartFuelAssert_Sequences._default.replace2with1) (= (AsFuelBottom StartFuel_Sequences._default.concat) StartFuel_Sequences._default.concat)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concat) StartFuelAssert_Sequences._default.concat) (= (AsFuelBottom StartFuel_Sequences._default.concat3) StartFuel_Sequences._default.concat3))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concat3) StartFuelAssert_Sequences._default.concat3) (= (AsFuelBottom StartFuel_Sequences._default.concatSeq) StartFuel_Sequences._default.concatSeq)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concatSeq) StartFuelAssert_Sequences._default.concatSeq) (= (AsFuelBottom StartFuel_Sequences._default.IsPrefix) StartFuel_Sequences._default.IsPrefix))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.IsPrefix) StartFuelAssert_Sequences._default.IsPrefix) (= (AsFuelBottom StartFuel_Sequences._default.IsSuffix) StartFuel_Sequences._default.IsSuffix)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.IsSuffix) StartFuelAssert_Sequences._default.IsSuffix) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexIterate) StartFuel_Sequences._default.SeqIndexIterate))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexIterate) StartFuelAssert_Sequences._default.SeqIndexIterate) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndex) StartFuel_Sequences._default.SeqIndex)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndex) StartFuelAssert_Sequences._default.SeqIndex) (= (AsFuelBottom StartFuel_Sequences._default.SeqOfLength) StartFuel_Sequences._default.SeqOfLength)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqOfLength) StartFuelAssert_Sequences._default.SeqOfLength) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexUpdate) StartFuel_Sequences._default.SeqIndexUpdate)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexUpdate) StartFuelAssert_Sequences._default.SeqIndexUpdate) (= (AsFuelBottom StartFuel_Sequences._default.Zip) StartFuel_Sequences._default.Zip))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Zip) StartFuelAssert_Sequences._default.Zip) (= (AsFuelBottom StartFuel_Sequences._default.Unzip) StartFuel_Sequences._default.Unzip)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Unzip) StartFuelAssert_Sequences._default.Unzip) (= (AsFuelBottom StartFuel_Sequences._default.FlattenShape) StartFuel_Sequences._default.FlattenShape))))))) (and (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenShape) StartFuelAssert_Sequences._default.FlattenShape) (= (AsFuelBottom StartFuel_Sequences._default.FlattenLength) StartFuel_Sequences._default.FlattenLength)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenLength) StartFuelAssert_Sequences._default.FlattenLength) (= (AsFuelBottom StartFuel_Sequences._default.Flatten) StartFuel_Sequences._default.Flatten))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Flatten) StartFuelAssert_Sequences._default.Flatten) (= (AsFuelBottom StartFuel_Sequences._default.seqMax) StartFuel_Sequences._default.seqMax)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.seqMax) StartFuelAssert_Sequences._default.seqMax) (= (AsFuelBottom StartFuel_Sequences._default.fill) StartFuel_Sequences._default.fill)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.fill) StartFuelAssert_Sequences._default.fill) (= (AsFuelBottom StartFuel_Byte_Order._default.lte) StartFuel_Byte_Order._default.lte)) (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.lte) StartFuelAssert_Byte_Order._default.lte) (= (AsFuelBottom StartFuel_Byte_Order._default.ltedef) StartFuel_Byte_Order._default.ltedef))) (and (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.ltedef) StartFuelAssert_Byte_Order._default.ltedef) (= (AsFuelBottom StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGte) StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGte)) (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGte) StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGte) (= (AsFuelBottom StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGt) StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGt))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGt) StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGt) (= (AsFuelBottom StartFuel_Byte_Order._default.NotMinimum) StartFuel_Byte_Order._default.NotMinimum)) (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.NotMinimum) StartFuelAssert_Byte_Order._default.NotMinimum) (= (AsFuelBottom StartFuel_Byte_Order._default.SortedSeqForMap) StartFuel_Byte_Order._default.SortedSeqForMap))) (and (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.SortedSeqForMap) StartFuelAssert_Byte_Order._default.SortedSeqForMap) (= (AsFuelBottom StartFuel_Byte_Order._default.minimum) StartFuel_Byte_Order._default.minimum)) (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.minimum) StartFuelAssert_Byte_Order._default.minimum) (= (AsFuelBottom StartFuel_Byte_Order._default.minimumOpt) StartFuel_Byte_Order._default.minimumOpt)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.minimumOpt) StartFuelAssert_Byte_Order._default.minimumOpt) (= (AsFuelBottom StartFuel_Byte_Order._default.maximum) StartFuel_Byte_Order._default.maximum)) (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.maximum) StartFuelAssert_Byte_Order._default.maximum) (= (AsFuelBottom StartFuel_Byte_Order._default.maximumOpt) StartFuel_Byte_Order._default.maximumOpt))) (and (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.maximumOpt) StartFuelAssert_Byte_Order._default.maximumOpt) (= (AsFuelBottom StartFuel_Byte_Order._default.IsSorted) StartFuel_Byte_Order._default.IsSorted)) (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.IsSorted) StartFuelAssert_Byte_Order._default.IsSorted) (= (AsFuelBottom StartFuel_Byte_Order._default.IsStrictlySorted) StartFuel_Byte_Order._default.IsStrictlySorted)))))) (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.IsStrictlySorted) StartFuelAssert_Byte_Order._default.IsStrictlySorted) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte)) (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt))) (and (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.NotMinimum) StartFuel_Lexicographic_Byte_Order._default.NotMinimum)) (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum) StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.SortedSeqForMap) StartFuel_Lexicographic_Byte_Order._default.SortedSeqForMap)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.SortedSeqForMap) StartFuelAssert_Lexicographic_Byte_Order._default.SortedSeqForMap) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.minimum) StartFuel_Lexicographic_Byte_Order._default.minimum)) (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.minimum) StartFuelAssert_Lexicographic_Byte_Order._default.minimum) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.minimumOpt) StartFuel_Lexicographic_Byte_Order._default.minimumOpt))) (and (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.minimumOpt) StartFuelAssert_Lexicographic_Byte_Order._default.minimumOpt) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.maximum) StartFuel_Lexicographic_Byte_Order._default.maximum)) (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.maximum) StartFuelAssert_Lexicographic_Byte_Order._default.maximum) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.maximumOpt) StartFuel_Lexicographic_Byte_Order._default.maximumOpt))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.maximumOpt) StartFuelAssert_Lexicographic_Byte_Order._default.maximumOpt) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.IsSorted) StartFuel_Lexicographic_Byte_Order._default.IsSorted)) (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted) StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted) StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted))) (and (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted) StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted) (= (AsFuelBottom StartFuel_BetreeSpec._default.RedirectReads) StartFuel_BetreeSpec._default.RedirectReads)) (and (= (AsFuelBottom StartFuelAssert_BetreeSpec._default.RedirectReads) StartFuelAssert_BetreeSpec._default.RedirectReads) (= (AsFuelBottom StartFuel_BetreeSpec._default.RedirectOps) StartFuel_BetreeSpec._default.RedirectOps)))) (and (and (and (= (AsFuelBottom StartFuelAssert_BetreeSpec._default.RedirectOps) StartFuelAssert_BetreeSpec._default.RedirectOps) (= (AsFuelBottom StartFuel_BetreeBlockInterface._default.OpTransaction) StartFuel_BetreeBlockInterface._default.OpTransaction)) (and (= (AsFuelBottom StartFuelAssert_BetreeBlockInterface._default.OpTransaction) StartFuelAssert_BetreeBlockInterface._default.OpTransaction) (= StartFuel_BetreeInv._default.IsSatisfyingLookup ($LS BaseFuel_BetreeInv._default.IsSatisfyingLookup)))) (and (and (= StartFuelAssert_BetreeInv._default.IsSatisfyingLookup ($LS ($LS BaseFuel_BetreeInv._default.IsSatisfyingLookup))) (= (AsFuelBottom BaseFuel_BetreeInv._default.IsSatisfyingLookup) BaseFuel_BetreeInv._default.IsSatisfyingLookup)) (and (= $_Frame@0 (|lambda#17| null $Heap@@75 alloc false)) (AsyncBetree.Variables.Variables_q |s#0@@486|)))))))) (and (=> (= (ControlFlow 0 76368) (- 0 579609)) (or (or (or (UI.Op.PushSyncOp_q |uiop#0@@101|) (UI.Op.PopSyncOp_q |uiop#0@@101|)) (UI.Op.GetBeginOp_q |uiop#0@@101|)) (UI.Op.GetEndOp_q |uiop#0@@101|))) (=> (or (or (or (UI.Op.PushSyncOp_q |uiop#0@@101|) (UI.Op.PopSyncOp_q |uiop#0@@101|)) (UI.Op.GetBeginOp_q |uiop#0@@101|)) (UI.Op.GetEndOp_q |uiop#0@@101|)) (and (=> (= (ControlFlow 0 76368) (- 0 579631)) (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s#0@@486|)) ($Box (int_2_U (UI.Op.id |uiop#0@@101|)))))) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s#0@@486|)) ($Box (int_2_U (UI.Op.id |uiop#0@@101|))))) (=> (AsyncBetree.Variables.Variables_q |s#0@@486|) (=> (and (= |qs#0@0| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s#0@@486|)) ($Box (int_2_U (UI.Op.id |uiop#0@@101|)))))) ($IsAlloc |s#0@@486| Tclass.AsyncBetree.Variables $Heap@@75)) (and (=> (= (ControlFlow 0 76368) (- 0 579685)) (=> (|AsyncBetree.__default.Inv#canCall| |s#0@@486|) (or (AsyncBetree.__default.Inv |s#0@@486|) (=> (|BetreeInv.__default.Inv#canCall| (AsyncBetree.Variables.betree |s#0@@486|)) (or (BetreeInv.__default.Inv (AsyncBetree.Variables.betree |s#0@@486|)) (BetreeBlockInterface.__default.Inv (Betree.Variables.bcv (AsyncBetree.Variables.betree |s#0@@486|)))))))) (and (=> (= (ControlFlow 0 76368) (- 0 579716)) (=> (|AsyncBetree.__default.Inv#canCall| |s#0@@486|) (or (AsyncBetree.__default.Inv |s#0@@486|) (=> (|BetreeInv.__default.Inv#canCall| (AsyncBetree.Variables.betree |s#0@@486|)) (or (BetreeInv.__default.Inv (AsyncBetree.Variables.betree |s#0@@486|)) (=> (|BetreeGraph.__default.IsAcyclic#canCall| (BetreeBlockInterface.Variables.view (Betree.Variables.bcv (AsyncBetree.Variables.betree |s#0@@486|)))) (or (BetreeGraph.__default.IsAcyclic (BetreeBlockInterface.Variables.view (Betree.Variables.bcv (AsyncBetree.Variables.betree |s#0@@486|)))) (forall ((|path#6| T@U) ) (!  (=> (and (and (= (type |path#6|) (SeqType BoxType)) ($Is |path#6| (TSeq Tclass.ReferenceType.Reference))) (BetreeGraph.__default.IsPath (BetreeBlockInterface.Variables.view (Betree.Variables.bcv (AsyncBetree.Variables.betree |s#0@@486|))) |path#6|)) (not (BetreeGraph.__default.IsCycle (BetreeBlockInterface.Variables.view (Betree.Variables.bcv (AsyncBetree.Variables.betree |s#0@@486|))) |path#6|))) :qid |GraphidfyBetreeGraph.75:12| :skolemid |1566| :pattern ( (BetreeGraph.__default.IsCycle (BetreeBlockInterface.Variables.view (Betree.Variables.bcv (AsyncBetree.Variables.betree |s#0@@486|))) |path#6|)) :pattern ( (BetreeGraph.__default.IsPath (BetreeBlockInterface.Variables.view (Betree.Variables.bcv (AsyncBetree.Variables.betree |s#0@@486|))) |path#6|)) ))))))))) (and (=> (= (ControlFlow 0 76368) (- 0 579826)) (=> (|AsyncBetree.__default.Inv#canCall| |s#0@@486|) (or (AsyncBetree.__default.Inv |s#0@@486|) (=> (|BetreeInv.__default.Inv#canCall| (AsyncBetree.Variables.betree |s#0@@486|)) (or (BetreeInv.__default.Inv (AsyncBetree.Variables.betree |s#0@@486|)) (=> (|BetreeInv.__default.Acyclic#canCall| (AsyncBetree.Variables.betree |s#0@@486|)) (or (BetreeInv.__default.Acyclic (AsyncBetree.Variables.betree |s#0@@486|)) (forall ((|key#12@@2| T@U) (|lookup#6| T@U) ) (!  (=> (and (and (and (= (type |key#12@@2|) (SeqType BoxType)) (= (type |lookup#6|) (SeqType BoxType))) (and ($Is |key#12@@2| Tclass.KeyType.Key) ($Is |lookup#6| (TSeq Tclass.BetreeGraph.ReadOp)))) (BetreeInv.__default.IsPathLookup (BetreeBlockInterface.Variables.view (Betree.Variables.bcv (AsyncBetree.Variables.betree |s#0@@486|))) |key#12@@2| |lookup#6|)) (BetreeInv.__default.LookupIsAcyclic |lookup#6|)) :qid |BetreeInvidfy.65:12| :skolemid |1568| :pattern ( (BetreeInv.__default.IsPathLookup (BetreeBlockInterface.Variables.view (Betree.Variables.bcv (AsyncBetree.Variables.betree |s#0@@486|))) |key#12@@2| |lookup#6|)) ))))))))) (and (=> (= (ControlFlow 0 76368) (- 0 579918)) (=> (|AsyncBetree.__default.Inv#canCall| |s#0@@486|) (or (AsyncBetree.__default.Inv |s#0@@486|) (=> (|BetreeInv.__default.Inv#canCall| (AsyncBetree.Variables.betree |s#0@@486|)) (or (BetreeInv.__default.Inv (AsyncBetree.Variables.betree |s#0@@486|)) (forall ((|key#13@@2| T@U) ) (!  (=> (= (type |key#13@@2|) (SeqType BoxType)) (=> (and ($Is |key#13@@2| Tclass.KeyType.Key) (MapSpec.__default.InDomain |key#13@@2|)) (BetreeInv.__default.KeyHasSatisfyingLookup (BetreeBlockInterface.Variables.view (Betree.Variables.bcv (AsyncBetree.Variables.betree |s#0@@486|))) |key#13@@2| (Lit BetreeGraph.__default.Root)))) :qid |BetreeInvidfy.75:16| :skolemid |1570| :pattern ( (BetreeInv.__default.KeyHasSatisfyingLookup (BetreeBlockInterface.Variables.view (Betree.Variables.bcv (AsyncBetree.Variables.betree |s#0@@486|))) |key#13@@2| BetreeGraph.__default.Root)) :pattern ( (MapSpec.__default.InDomain |key#13@@2|)) ))))))) (and (=> (= (ControlFlow 0 76368) (- 0 579994)) (=> (|AsyncBetree.__default.Inv#canCall| |s#0@@486|) (or (AsyncBetree.__default.Inv |s#0@@486|) (=> (|BetreeInv.__default.Inv#canCall| (AsyncBetree.Variables.betree |s#0@@486|)) (or (BetreeInv.__default.Inv (AsyncBetree.Variables.betree |s#0@@486|)) (BetreeBlockInterface.__default.RootHasNoPredecessor (BetreeBlockInterface.Variables.view (Betree.Variables.bcv (AsyncBetree.Variables.betree |s#0@@486|))))))))) (and (=> (= (ControlFlow 0 76368) (- 0 580027)) (=> (|AsyncBetree.__default.Inv#canCall| |s#0@@486|) (or (AsyncBetree.__default.Inv |s#0@@486|) (forall ((|id#6| Int) ) (!  (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s#0@@486|)) ($Box (int_2_U |id#6|)))) (AsyncBetree.__default.QueryInv (AsyncBetree.Variables.betree |s#0@@486|) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s#0@@486|)) ($Box (int_2_U |id#6|)))))) :qid |AsyncBetreeidfy.107:16| :skolemid |1572| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s#0@@486|)) ($Box (int_2_U |id#6|))))) :pattern ( (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s#0@@486|)) ($Box (int_2_U |id#6|)))) ))))) (=> (|AsyncBetree__Refines__AsyncMap.__default.I#canCall| |s#0@@486|) (=> (and (AsyncMapSpec.Variables.Variables_q (AsyncBetree__Refines__AsyncMap.__default.I |s#0@@486|)) ($IsAlloc |s'#0@@185| Tclass.AsyncBetree.Variables $Heap@@75)) (and (=> (= (ControlFlow 0 76368) (- 0 580122)) (=> (|AsyncBetree.__default.Inv#canCall| |s'#0@@185|) (or (AsyncBetree.__default.Inv |s'#0@@185|) (=> (|BetreeInv.__default.Inv#canCall| (AsyncBetree.Variables.betree |s'#0@@185|)) (or (BetreeInv.__default.Inv (AsyncBetree.Variables.betree |s'#0@@185|)) (BetreeBlockInterface.__default.Inv (Betree.Variables.bcv (AsyncBetree.Variables.betree |s'#0@@185|)))))))) (and (=> (= (ControlFlow 0 76368) (- 0 580153)) (=> (|AsyncBetree.__default.Inv#canCall| |s'#0@@185|) (or (AsyncBetree.__default.Inv |s'#0@@185|) (=> (|BetreeInv.__default.Inv#canCall| (AsyncBetree.Variables.betree |s'#0@@185|)) (or (BetreeInv.__default.Inv (AsyncBetree.Variables.betree |s'#0@@185|)) (=> (|BetreeGraph.__default.IsAcyclic#canCall| (BetreeBlockInterface.Variables.view (Betree.Variables.bcv (AsyncBetree.Variables.betree |s'#0@@185|)))) (or (BetreeGraph.__default.IsAcyclic (BetreeBlockInterface.Variables.view (Betree.Variables.bcv (AsyncBetree.Variables.betree |s'#0@@185|)))) (forall ((|path#7| T@U) ) (!  (=> (and (and (= (type |path#7|) (SeqType BoxType)) ($Is |path#7| (TSeq Tclass.ReferenceType.Reference))) (BetreeGraph.__default.IsPath (BetreeBlockInterface.Variables.view (Betree.Variables.bcv (AsyncBetree.Variables.betree |s'#0@@185|))) |path#7|)) (not (BetreeGraph.__default.IsCycle (BetreeBlockInterface.Variables.view (Betree.Variables.bcv (AsyncBetree.Variables.betree |s'#0@@185|))) |path#7|))) :qid |GraphidfyBetreeGraph.75:12| :skolemid |1574| :pattern ( (BetreeGraph.__default.IsCycle (BetreeBlockInterface.Variables.view (Betree.Variables.bcv (AsyncBetree.Variables.betree |s'#0@@185|))) |path#7|)) :pattern ( (BetreeGraph.__default.IsPath (BetreeBlockInterface.Variables.view (Betree.Variables.bcv (AsyncBetree.Variables.betree |s'#0@@185|))) |path#7|)) ))))))))) (and (=> (= (ControlFlow 0 76368) (- 0 580263)) (=> (|AsyncBetree.__default.Inv#canCall| |s'#0@@185|) (or (AsyncBetree.__default.Inv |s'#0@@185|) (=> (|BetreeInv.__default.Inv#canCall| (AsyncBetree.Variables.betree |s'#0@@185|)) (or (BetreeInv.__default.Inv (AsyncBetree.Variables.betree |s'#0@@185|)) (=> (|BetreeInv.__default.Acyclic#canCall| (AsyncBetree.Variables.betree |s'#0@@185|)) (or (BetreeInv.__default.Acyclic (AsyncBetree.Variables.betree |s'#0@@185|)) (forall ((|key#14@@2| T@U) (|lookup#7| T@U) ) (!  (=> (and (and (and (= (type |key#14@@2|) (SeqType BoxType)) (= (type |lookup#7|) (SeqType BoxType))) (and ($Is |key#14@@2| Tclass.KeyType.Key) ($Is |lookup#7| (TSeq Tclass.BetreeGraph.ReadOp)))) (BetreeInv.__default.IsPathLookup (BetreeBlockInterface.Variables.view (Betree.Variables.bcv (AsyncBetree.Variables.betree |s'#0@@185|))) |key#14@@2| |lookup#7|)) (BetreeInv.__default.LookupIsAcyclic |lookup#7|)) :qid |BetreeInvidfy.65:12| :skolemid |1576| :pattern ( (BetreeInv.__default.IsPathLookup (BetreeBlockInterface.Variables.view (Betree.Variables.bcv (AsyncBetree.Variables.betree |s'#0@@185|))) |key#14@@2| |lookup#7|)) ))))))))) (and (=> (= (ControlFlow 0 76368) (- 0 580355)) (=> (|AsyncBetree.__default.Inv#canCall| |s'#0@@185|) (or (AsyncBetree.__default.Inv |s'#0@@185|) (=> (|BetreeInv.__default.Inv#canCall| (AsyncBetree.Variables.betree |s'#0@@185|)) (or (BetreeInv.__default.Inv (AsyncBetree.Variables.betree |s'#0@@185|)) (forall ((|key#15@@2| T@U) ) (!  (=> (= (type |key#15@@2|) (SeqType BoxType)) (=> (and ($Is |key#15@@2| Tclass.KeyType.Key) (MapSpec.__default.InDomain |key#15@@2|)) (BetreeInv.__default.KeyHasSatisfyingLookup (BetreeBlockInterface.Variables.view (Betree.Variables.bcv (AsyncBetree.Variables.betree |s'#0@@185|))) |key#15@@2| (Lit BetreeGraph.__default.Root)))) :qid |BetreeInvidfy.75:16| :skolemid |1578| :pattern ( (BetreeInv.__default.KeyHasSatisfyingLookup (BetreeBlockInterface.Variables.view (Betree.Variables.bcv (AsyncBetree.Variables.betree |s'#0@@185|))) |key#15@@2| BetreeGraph.__default.Root)) :pattern ( (MapSpec.__default.InDomain |key#15@@2|)) ))))))) (and (=> (= (ControlFlow 0 76368) (- 0 580431)) (=> (|AsyncBetree.__default.Inv#canCall| |s'#0@@185|) (or (AsyncBetree.__default.Inv |s'#0@@185|) (=> (|BetreeInv.__default.Inv#canCall| (AsyncBetree.Variables.betree |s'#0@@185|)) (or (BetreeInv.__default.Inv (AsyncBetree.Variables.betree |s'#0@@185|)) (BetreeBlockInterface.__default.RootHasNoPredecessor (BetreeBlockInterface.Variables.view (Betree.Variables.bcv (AsyncBetree.Variables.betree |s'#0@@185|))))))))) (and (=> (= (ControlFlow 0 76368) (- 0 580464)) (=> (|AsyncBetree.__default.Inv#canCall| |s'#0@@185|) (or (AsyncBetree.__default.Inv |s'#0@@185|) (forall ((|id#7| Int) ) (!  (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s'#0@@185|)) ($Box (int_2_U |id#7|)))) (AsyncBetree.__default.QueryInv (AsyncBetree.Variables.betree |s'#0@@185|) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s'#0@@185|)) ($Box (int_2_U |id#7|)))))) :qid |AsyncBetreeidfy.107:16| :skolemid |1580| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s'#0@@185|)) ($Box (int_2_U |id#7|))))) :pattern ( (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s'#0@@185|)) ($Box (int_2_U |id#7|)))) ))))) (=> (and (|AsyncBetree__Refines__AsyncMap.__default.I#canCall| |s'#0@@185|) (AsyncMapSpec.Variables.Variables_q (AsyncBetree__Refines__AsyncMap.__default.I |s'#0@@185|))) (and (=> (= (ControlFlow 0 76368) (- 0 580549)) (QueryStates.QueryState.Finished_q |qs#0@0|)) (=> (QueryStates.QueryState.Finished_q |qs#0@0|) (=> (and (and (= |##s#8@0| (AsyncBetree__Refines__AsyncMap.__default.I |s#0@@486|)) ($IsAlloc |##s#8@0| Tclass.AsyncMapSpec.Variables $Heap@@75)) (and (= |##s'#2@0| (AsyncBetree__Refines__AsyncMap.__default.I |s'#0@@185|)) ($IsAlloc |##s'#2@0| Tclass.AsyncMapSpec.Variables $Heap@@75))) (=> (and (and (and ($IsAlloc |uiop#0@@101| Tclass.UI.Op $Heap@@75) (= |##step#0@0| (|#AsyncMapSpec.Step.QueryEndStep| (QueryStates.QueryState.answer |qs#0@0|)))) (and ($IsAlloc |##step#0@0| Tclass.AsyncMapSpec.Step $Heap@@75) (|AsyncMapSpec.__default.NextStep#canCall| (AsyncBetree__Refines__AsyncMap.__default.I |s#0@@486|) (AsyncBetree__Refines__AsyncMap.__default.I |s'#0@@185|) |uiop#0@@101| (|#AsyncMapSpec.Step.QueryEndStep| (QueryStates.QueryState.answer |qs#0@0|))))) (and (and (|AsyncBetree__Refines__AsyncMap.__default.I#canCall| |s#0@@486|) (|AsyncBetree__Refines__AsyncMap.__default.I#canCall| |s'#0@@185|)) (|AsyncMapSpec.__default.NextStep#canCall| (AsyncBetree__Refines__AsyncMap.__default.I |s#0@@486|) (AsyncBetree__Refines__AsyncMap.__default.I |s'#0@@185|) |uiop#0@@101| (|#AsyncMapSpec.Step.QueryEndStep| (QueryStates.QueryState.answer |qs#0@0|))))) (and (=> (= (ControlFlow 0 76368) (- 0 580660)) (AsyncMapSpec.__default.NextStep (AsyncBetree__Refines__AsyncMap.__default.I |s#0@@486|) (AsyncBetree__Refines__AsyncMap.__default.I |s'#0@@185|) |uiop#0@@101| (|#AsyncMapSpec.Step.QueryEndStep| (QueryStates.QueryState.answer |qs#0@0|)))) (=> (AsyncMapSpec.__default.NextStep (AsyncBetree__Refines__AsyncMap.__default.I |s#0@@486|) (AsyncBetree__Refines__AsyncMap.__default.I |s'#0@@185|) |uiop#0@@101| (|#AsyncMapSpec.Step.QueryEndStep| (QueryStates.QueryState.answer |qs#0@0|))) (=> (= (ControlFlow 0 76368) (- 0 580677)) (=> (|AsyncMapSpec.__default.Next#canCall| (AsyncBetree__Refines__AsyncMap.__default.I |s#0@@486|) (AsyncBetree__Refines__AsyncMap.__default.I |s'#0@@185|) |uiop#0@@101|) (or (AsyncMapSpec.__default.Next (AsyncBetree__Refines__AsyncMap.__default.I |s#0@@486|) (AsyncBetree__Refines__AsyncMap.__default.I |s'#0@@185|) |uiop#0@@101|) (exists ((|step#1@@9| T@U) ) (!  (and (= (type |step#1@@9|) DatatypeTypeType) (and ($Is |step#1@@9| Tclass.AsyncMapSpec.Step) (AsyncMapSpec.__default.NextStep (AsyncBetree__Refines__AsyncMap.__default.I |s#0@@486|) (AsyncBetree__Refines__AsyncMap.__default.I |s'#0@@185|) |uiop#0@@101| |step#1@@9|))) :qid |AsyncMapidfy.86:12| :skolemid |1564| :pattern ( (AsyncMapSpec.__default.NextStep (AsyncBetree__Refines__AsyncMap.__default.I |s#0@@486|) (AsyncBetree__Refines__AsyncMap.__default.I |s'#0@@185|) |uiop#0@@101| |step#1@@9|)) ))))))))))))))))))))))))))))))))))))) (let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@75) ($IsHeapAnchor $Heap@@75)) (=> (and (and (and ($Is |s#0@@486| Tclass.AsyncBetree.Variables) ($IsAlloc |s#0@@486| Tclass.AsyncBetree.Variables $Heap@@75)) (|$IsA#AsyncBetree.Variables| |s#0@@486|)) (and (and ($Is |s'#0@@185| Tclass.AsyncBetree.Variables) ($IsAlloc |s'#0@@185| Tclass.AsyncBetree.Variables $Heap@@75)) (|$IsA#AsyncBetree.Variables| |s'#0@@185|))) (=> (and (and (and (and ($Is |uiop#0@@101| Tclass.UI.Op) ($IsAlloc |uiop#0@@101| Tclass.UI.Op $Heap@@75)) (|$IsA#UI.Op| |uiop#0@@101|)) (and (and ($Is |qs#0@@3| Tclass.QueryStates.QueryState) ($IsAlloc |qs#0@@3| Tclass.QueryStates.QueryState $Heap@@75)) (= 11 $FunctionContextHeight))) (and (and (and (|AsyncBetree.__default.Inv#canCall| |s#0@@486|) (and (AsyncBetree.__default.Inv |s#0@@486|) (and (BetreeInv.__default.Inv (AsyncBetree.Variables.betree |s#0@@486|)) (forall ((|id#4| T@U) ) (!  (=> (and (= (type |id#4|) intType) (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s#0@@486|)) ($Box |id#4|)))) (AsyncBetree.__default.QueryInv (AsyncBetree.Variables.betree |s#0@@486|) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s#0@@486|)) ($Box |id#4|))))) :qid |AsyncBetreeidfy.107:16| :skolemid |1555| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s#0@@486|)) ($Box |id#4|)))) :pattern ( (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s#0@@486|)) ($Box |id#4|))) ))))) (and (|AsyncBetree.__default.QueryEnd#canCall| |s#0@@486| |s'#0@@185| |uiop#0@@101|) (and (AsyncBetree.__default.QueryEnd |s#0@@486| |s'#0@@185| |uiop#0@@101|) (and (and (and (and (and (UI.Op.GetEndOp_q |uiop#0@@101|) (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s#0@@486|)) ($Box (int_2_U (UI.Op.id |uiop#0@@101|)))))) (|Betree.Variables#Equal| (AsyncBetree.Variables.betree |s'#0@@185|) (AsyncBetree.Variables.betree |s#0@@486|))) (|Map#Equal| (AsyncBetree.Variables.queries |s'#0@@185|) (Maps.__default.MapRemove1 TInt Tclass.QueryStates.QueryState (AsyncBetree.Variables.queries |s#0@@486|) ($Box (int_2_U (UI.Op.id |uiop#0@@101|)))))) (QueryStates.QueryState.Finished_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s#0@@486|)) ($Box (int_2_U (UI.Op.id |uiop#0@@101|))))))) (|Seq#Equal| (UI.Op.value |uiop#0@@101|) (QueryStates.QueryState.answer ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s#0@@486|)) ($Box (int_2_U (UI.Op.id |uiop#0@@101|))))))))))) (and (and (|AsyncBetree.__default.Inv#canCall| |s'#0@@185|) (and (AsyncBetree.__default.Inv |s'#0@@185|) (and (BetreeInv.__default.Inv (AsyncBetree.Variables.betree |s'#0@@185|)) (forall ((|id#5| T@U) ) (!  (=> (and (= (type |id#5|) intType) (U_2_bool (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s'#0@@185|)) ($Box |id#5|)))) (AsyncBetree.__default.QueryInv (AsyncBetree.Variables.betree |s'#0@@185|) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s'#0@@185|)) ($Box |id#5|))))) :qid |AsyncBetreeidfy.107:16| :skolemid |1563| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncBetree.Variables.queries |s'#0@@185|)) ($Box |id#5|)))) :pattern ( (MapType0Select (|Map#Domain| (AsyncBetree.Variables.queries |s'#0@@185|)) ($Box |id#5|))) ))))) (= (ControlFlow 0 577775) 76368)))) anon0_correct))))) PreconditionGeneratedEntry_correct))) ))
(check-sat)
