(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun TyType () T@T)
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TORDINAL () T@U)
(declare-fun TyTagType () T@T)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun TagORDINAL () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagISet () T@U)
(declare-fun TagMultiSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun TagIMap () T@U)
(declare-fun TagClass () T@U)
(declare-fun ClassNameType () T@T)
(declare-fun class._System.int () T@U)
(declare-fun class._System.bool () T@U)
(declare-fun class._System.set () T@U)
(declare-fun class._System.seq () T@U)
(declare-fun class._System.multiset () T@U)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun alloc () T@U)
(declare-fun NameFamilyType () T@T)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun class._System.object? () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun class._System.array? () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._System.___hFunc0 () T@U)
(declare-fun Tagclass._System.___hPartialFunc0 () T@U)
(declare-fun Tagclass._System.___hTotalFunc0 () T@U)
(declare-fun class._System.__default () T@U)
(declare-fun Tagclass._System.__default () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tagclass._System.___hPartialFunc2 () T@U)
(declare-fun Tagclass._System.___hTotalFunc2 () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun DtCtorIdType () T@T)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun class._System.Tuple2 () T@U)
(declare-fun Tagclass._System.___hFunc3 () T@U)
(declare-fun Tagclass._System.___hPartialFunc3 () T@U)
(declare-fun Tagclass._System.___hTotalFunc3 () T@U)
(declare-fun Tagclass._System.___hFunc4 () T@U)
(declare-fun Tagclass._System.___hPartialFunc4 () T@U)
(declare-fun Tagclass._System.___hTotalFunc4 () T@U)
(declare-fun |##_System._tuple#0._#Make0| () T@U)
(declare-fun Tagclass._System.Tuple0 () T@U)
(declare-fun class._System.Tuple0 () T@U)
(declare-fun |##GenericMarshalling.G.GUint32| () T@U)
(declare-fun Tagclass.GenericMarshalling.G () T@U)
(declare-fun |##GenericMarshalling.G.GUint64| () T@U)
(declare-fun |##GenericMarshalling.G.GArray| () T@U)
(declare-fun |##GenericMarshalling.G.GTuple| () T@U)
(declare-fun |##GenericMarshalling.G.GByteArray| () T@U)
(declare-fun |##GenericMarshalling.G.GUint32Array| () T@U)
(declare-fun |##GenericMarshalling.G.GUint64Array| () T@U)
(declare-fun |##GenericMarshalling.G.GTaggedUnion| () T@U)
(declare-fun class.GenericMarshalling.G () T@U)
(declare-fun |##GenericMarshalling.V.VUint32| () T@U)
(declare-fun Tagclass.NativeTypes.uint32 () T@U)
(declare-fun Tagclass.GenericMarshalling.V () T@U)
(declare-fun |##GenericMarshalling.V.VUint64| () T@U)
(declare-fun Tagclass.NativeTypes.uint64 () T@U)
(declare-fun |##GenericMarshalling.V.VArray| () T@U)
(declare-fun |##GenericMarshalling.V.VTuple| () T@U)
(declare-fun |##GenericMarshalling.V.VByteArray| () T@U)
(declare-fun Tagclass.NativeTypes.byte () T@U)
(declare-fun |##GenericMarshalling.V.VUint32Array| () T@U)
(declare-fun |##GenericMarshalling.V.VUint64Array| () T@U)
(declare-fun |##GenericMarshalling.V.VCase| () T@U)
(declare-fun class.GenericMarshalling.V () T@U)
(declare-fun |##GenericMarshalling.ContentsTraceStep.ContentsTraceStep| () T@U)
(declare-fun Tagclass.Options.Option () T@U)
(declare-fun Tagclass.GenericMarshalling.ContentsTraceStep () T@U)
(declare-fun class.GenericMarshalling.ContentsTraceStep () T@U)
(declare-fun class.GenericMarshalling.__default () T@U)
(declare-fun Tagclass.GenericMarshalling.__default () T@U)
(declare-fun Tagclass.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.byte () T@U)
(declare-fun Tagclass.NativeTypes.int16 () T@U)
(declare-fun class.NativeTypes.int16 () T@U)
(declare-fun Tagclass.NativeTypes.uint16 () T@U)
(declare-fun class.NativeTypes.uint16 () T@U)
(declare-fun Tagclass.NativeTypes.int32 () T@U)
(declare-fun class.NativeTypes.int32 () T@U)
(declare-fun class.NativeTypes.uint32 () T@U)
(declare-fun Tagclass.NativeTypes.int64 () T@U)
(declare-fun class.NativeTypes.int64 () T@U)
(declare-fun class.NativeTypes.uint64 () T@U)
(declare-fun Tagclass.NativeTypes.nat8 () T@U)
(declare-fun class.NativeTypes.nat8 () T@U)
(declare-fun Tagclass.NativeTypes.nat16 () T@U)
(declare-fun class.NativeTypes.nat16 () T@U)
(declare-fun Tagclass.NativeTypes.nat32 () T@U)
(declare-fun class.NativeTypes.nat32 () T@U)
(declare-fun Tagclass.NativeTypes.nat64 () T@U)
(declare-fun class.NativeTypes.nat64 () T@U)
(declare-fun class.NativeTypes.__default () T@U)
(declare-fun Tagclass.NativeTypes.__default () T@U)
(declare-fun class.Collections____Maps__i.__default () T@U)
(declare-fun Tagclass.Collections____Maps__i.__default () T@U)
(declare-fun class.SeqComparison.__default () T@U)
(declare-fun Tagclass.SeqComparison.__default () T@U)
(declare-fun class.NativeArrays.__default () T@U)
(declare-fun Tagclass.NativeArrays.__default () T@U)
(declare-fun class.Collections____Seqs__i.__default () T@U)
(declare-fun Tagclass.Collections____Seqs__i.__default () T@U)
(declare-fun class.Math.__default () T@U)
(declare-fun Tagclass.Math.__default () T@U)
(declare-fun class.Common____Util__i.__default () T@U)
(declare-fun Tagclass.Common____Util__i.__default () T@U)
(declare-fun class.Libraries____base__s.__default () T@U)
(declare-fun Tagclass.Libraries____base__s.__default () T@U)
(declare-fun |##Options.Option.None| () T@U)
(declare-fun |##Options.Option.Some| () T@U)
(declare-fun class.Options.Option () T@U)
(declare-fun class.Options.__default () T@U)
(declare-fun Tagclass.Options.__default () T@U)
(declare-fun class.NativePackedInts.__default () T@U)
(declare-fun Tagclass.NativePackedInts.__default () T@U)
(declare-fun class.Sequences.__default () T@U)
(declare-fun Tagclass.Sequences.__default () T@U)
(declare-fun $$Language$Dafny () Bool)
(declare-fun TBitvector (Int) T@U)
(declare-fun Inv0_TBitvector (T@U) Int)
(declare-fun TSet (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun TISet (T@U) T@U)
(declare-fun Inv0_TISet (T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun TMultiSet (T@U) T@U)
(declare-fun Inv0_TMultiSet (T@U) T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun TIMap (T@U T@U) T@U)
(declare-fun Inv0_TIMap (T@U) T@U)
(declare-fun Inv1_TIMap (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun Lit (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun $Box (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun LitReal (Real) Real)
(declare-fun charType () T@T)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun |char#Plus| (T@U T@U) T@U)
(declare-fun |char#Minus| (T@U T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $Is (T@U T@U) Bool)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U) T@U)
(declare-fun SeqType (T@T) T@T)
(declare-fun SeqTypeInv0 (T@T) T@T)
(declare-fun MapType (T@T T@T) T@T)
(declare-fun MapTypeInv0 (T@T) T@T)
(declare-fun MapTypeInv1 (T@T) T@T)
(declare-fun IMapType (T@T T@T) T@T)
(declare-fun IMapTypeInv0 (T@T) T@T)
(declare-fun IMapTypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Type () T@T)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@U T@U T@U) Bool)
(declare-fun $IsGoodMultiSet (T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |IMap#Elements| (T@U) T@U)
(declare-fun |IMap#Domain| (T@U) T@U)
(declare-fun TypeTuple (T@U T@U) T@U)
(declare-fun TypeTupleCar (T@U) T@U)
(declare-fun TypeTupleCdr (T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun |ORD#LessThanLimit| (T@U T@U) Bool)
(declare-fun |ORD#Plus| (T@U T@U) T@U)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun AtLayer (T@U T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun FDim (T@U) Int)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun MultiIndexField (T@U Int) T@U)
(declare-fun MultiIndexField_Inverse0 (T@U) T@U)
(declare-fun MultiIndexField_Inverse1 (T@U) Int)
(declare-fun FieldOfDecl (T@T T@U T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun q@Int (Real) Int)
(declare-fun q@Real (Int) Real)
(declare-fun $OneHeap () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $HeapSuccGhost (T@U T@U) Bool)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun |Set#Empty| (T@T) T@U)
(declare-fun |Set#Singleton| (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |Set#Intersection| (T@U T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |ISet#Empty| (T@T) T@U)
(declare-fun |ISet#UnionOne| (T@U T@U) T@U)
(declare-fun |ISet#Union| (T@U T@U) T@U)
(declare-fun |ISet#Difference| (T@U T@U) T@U)
(declare-fun |ISet#Disjoint| (T@U T@U) Bool)
(declare-fun |ISet#Intersection| (T@U T@U) T@U)
(declare-fun |ISet#Subset| (T@U T@U) Bool)
(declare-fun |ISet#Equal| (T@U T@U) Bool)
(declare-fun |Math#min| (Int Int) Int)
(declare-fun |Math#clip| (Int) Int)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun |MultiSet#Empty| (T@T) T@U)
(declare-fun |MultiSet#Singleton| (T@U) T@U)
(declare-fun |MultiSet#UnionOne| (T@U T@U) T@U)
(declare-fun |MultiSet#Union| (T@U T@U) T@U)
(declare-fun |MultiSet#Intersection| (T@U T@U) T@U)
(declare-fun |MultiSet#Difference| (T@U T@U) T@U)
(declare-fun |MultiSet#Subset| (T@U T@U) Bool)
(declare-fun |MultiSet#Equal| (T@U T@U) Bool)
(declare-fun |MultiSet#Disjoint| (T@U T@U) Bool)
(declare-fun |MultiSet#FromSet| (T@U) T@U)
(declare-fun |MultiSet#FromSeq| (T@U) T@U)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |Seq#Empty| (T@T) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun |Seq#Singleton| (T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun |Seq#Create| (T@U T@U Int T@U) T@U)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Seq#SameUntil| (T@U T@U Int) Bool)
(declare-fun |Seq#FromArray| (T@U T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun |Map#Card| (T@U) Int)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun |Map#Empty| (T@T T@T) T@U)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(declare-fun |Map#Equal| (T@U T@U) Bool)
(declare-fun |Map#Disjoint| (T@U T@U) Bool)
(declare-fun |IMap#Values| (T@U) T@U)
(declare-fun |IMap#Items| (T@U) T@U)
(declare-fun |IMap#Empty| (T@T T@T) T@U)
(declare-fun |IMap#Glue| (T@U T@U T@U) T@U)
(declare-fun |IMap#Build| (T@U T@U T@U) T@U)
(declare-fun |IMap#Equal| (T@U T@U) Bool)
(declare-fun INTERNAL_add_boogie (Int Int) Int)
(declare-fun INTERNAL_sub_boogie (Int Int) Int)
(declare-fun INTERNAL_mul_boogie (Int Int) Int)
(declare-fun INTERNAL_div_boogie (Int Int) Int)
(declare-fun INTERNAL_mod_boogie (Int Int) Int)
(declare-fun INTERNAL_lt_boogie (Int Int) Bool)
(declare-fun INTERNAL_le_boogie (Int Int) Bool)
(declare-fun INTERNAL_gt_boogie (Int Int) Bool)
(declare-fun INTERNAL_ge_boogie (Int Int) Bool)
(declare-fun Mul (Int Int) Int)
(declare-fun Div (Int Int) Int)
(declare-fun Mod (Int Int) Int)
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun _System.__default.rank__is__less__than (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun null () T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0_0 (T@U) T@U)
(declare-fun Apply0 (T@U T@U T@U) T@U)
(declare-fun Handle0 (T@U T@U T@U) T@U)
(declare-fun Requires0 (T@U T@U T@U) Bool)
(declare-fun Reads0 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.__default () T@U)
(declare-fun |_System.__default.rank__is__less__than#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |_System.__default.rank__is__less__than#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun MapType2Type (T@T T@T T@T T@T) T@T)
(declare-fun MapType2TypeInv0 (T@T) T@T)
(declare-fun MapType2TypeInv1 (T@T) T@T)
(declare-fun MapType2TypeInv2 (T@T) T@T)
(declare-fun MapType2TypeInv3 (T@T) T@T)
(declare-fun MapType2Select (T@U T@U T@U T@U) T@U)
(declare-fun MapType2Store (T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle2 (T@U T@U T@U) T@U)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun MapType3Type (T@T T@T T@T) T@T)
(declare-fun MapType3TypeInv0 (T@T) T@T)
(declare-fun MapType3TypeInv1 (T@T) T@T)
(declare-fun MapType3TypeInv2 (T@T) T@T)
(declare-fun MapType3Select (T@U T@U T@U) T@U)
(declare-fun MapType3Store (T@U T@U T@U T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple2| (T@U) Bool)
(declare-fun |_System.Tuple2#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_3 (T@U) T@U)
(declare-fun MapType4Type (T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType4TypeInv0 (T@T) T@T)
(declare-fun MapType4TypeInv1 (T@T) T@T)
(declare-fun MapType4TypeInv2 (T@T) T@T)
(declare-fun MapType4TypeInv3 (T@T) T@T)
(declare-fun MapType4TypeInv4 (T@T) T@T)
(declare-fun MapType4Select (T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType4Store (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle3 (T@U T@U T@U) T@U)
(declare-fun Requires3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_4 (T@U) T@U)
(declare-fun MapType5Type (T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType5TypeInv0 (T@T) T@T)
(declare-fun MapType5TypeInv1 (T@T) T@T)
(declare-fun MapType5TypeInv2 (T@T) T@T)
(declare-fun MapType5TypeInv3 (T@T) T@T)
(declare-fun MapType5TypeInv4 (T@T) T@T)
(declare-fun MapType5TypeInv5 (T@T) T@T)
(declare-fun MapType5Select (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType5Store (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle4 (T@U T@U T@U) T@U)
(declare-fun Requires4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_4 (T@U) T@U)
(declare-fun |#_System._tuple#0._#Make0| () T@U)
(declare-fun _System.Tuple0.___hMake0_q (T@U) Bool)
(declare-fun Tclass._System.Tuple0 () T@U)
(declare-fun |$IsA#_System.Tuple0| (T@U) Bool)
(declare-fun |_System.Tuple0#Equal| (T@U T@U) Bool)
(declare-fun |#GenericMarshalling.G.GUint32| () T@U)
(declare-fun GenericMarshalling.G.GUint32_q (T@U) Bool)
(declare-fun Tclass.GenericMarshalling.G () T@U)
(declare-fun |#GenericMarshalling.G.GUint64| () T@U)
(declare-fun GenericMarshalling.G.GUint64_q (T@U) Bool)
(declare-fun |#GenericMarshalling.G.GArray| (T@U) T@U)
(declare-fun GenericMarshalling.G.GArray_q (T@U) Bool)
(declare-fun GenericMarshalling.G.elt (T@U) T@U)
(declare-fun |#GenericMarshalling.G.GTuple| (T@U) T@U)
(declare-fun GenericMarshalling.G.GTuple_q (T@U) Bool)
(declare-fun GenericMarshalling.G.t (T@U) T@U)
(declare-fun |#GenericMarshalling.G.GByteArray| () T@U)
(declare-fun GenericMarshalling.G.GByteArray_q (T@U) Bool)
(declare-fun |#GenericMarshalling.G.GUint32Array| () T@U)
(declare-fun GenericMarshalling.G.GUint32Array_q (T@U) Bool)
(declare-fun |#GenericMarshalling.G.GUint64Array| () T@U)
(declare-fun GenericMarshalling.G.GUint64Array_q (T@U) Bool)
(declare-fun |#GenericMarshalling.G.GTaggedUnion| (T@U) T@U)
(declare-fun GenericMarshalling.G.GTaggedUnion_q (T@U) Bool)
(declare-fun GenericMarshalling.G.cases (T@U) T@U)
(declare-fun |$IsA#GenericMarshalling.G| (T@U) Bool)
(declare-fun |GenericMarshalling.G#Equal| (T@U T@U) Bool)
(declare-fun |#GenericMarshalling.V.VUint32| (Int) T@U)
(declare-fun GenericMarshalling.V.VUint32_q (T@U) Bool)
(declare-fun Tclass.NativeTypes.uint32 () T@U)
(declare-fun Tclass.GenericMarshalling.V () T@U)
(declare-fun GenericMarshalling.V.v (T@U) Int)
(declare-fun |#GenericMarshalling.V.VUint64| (Int) T@U)
(declare-fun GenericMarshalling.V.VUint64_q (T@U) Bool)
(declare-fun Tclass.NativeTypes.uint64 () T@U)
(declare-fun GenericMarshalling.V.u (T@U) Int)
(declare-fun |#GenericMarshalling.V.VArray| (T@U) T@U)
(declare-fun GenericMarshalling.V.VArray_q (T@U) Bool)
(declare-fun GenericMarshalling.V.a (T@U) T@U)
(declare-fun |#GenericMarshalling.V.VTuple| (T@U) T@U)
(declare-fun GenericMarshalling.V.VTuple_q (T@U) Bool)
(declare-fun GenericMarshalling.V.t (T@U) T@U)
(declare-fun |#GenericMarshalling.V.VByteArray| (T@U) T@U)
(declare-fun GenericMarshalling.V.VByteArray_q (T@U) Bool)
(declare-fun Tclass.NativeTypes.byte () T@U)
(declare-fun GenericMarshalling.V.b (T@U) T@U)
(declare-fun |#GenericMarshalling.V.VUint32Array| (T@U) T@U)
(declare-fun GenericMarshalling.V.VUint32Array_q (T@U) Bool)
(declare-fun GenericMarshalling.V.va (T@U) T@U)
(declare-fun |#GenericMarshalling.V.VUint64Array| (T@U) T@U)
(declare-fun GenericMarshalling.V.VUint64Array_q (T@U) Bool)
(declare-fun GenericMarshalling.V.ua (T@U) T@U)
(declare-fun |#GenericMarshalling.V.VCase| (Int T@U) T@U)
(declare-fun GenericMarshalling.V.VCase_q (T@U) Bool)
(declare-fun GenericMarshalling.V.c (T@U) Int)
(declare-fun GenericMarshalling.V.val (T@U) T@U)
(declare-fun |$IsA#GenericMarshalling.V| (T@U) Bool)
(declare-fun |GenericMarshalling.V#Equal| (T@U T@U) Bool)
(declare-fun |#GenericMarshalling.ContentsTraceStep.ContentsTraceStep| (T@U T@U) T@U)
(declare-fun GenericMarshalling.ContentsTraceStep.ContentsTraceStep_q (T@U) Bool)
(declare-fun Tclass.Options.Option (T@U) T@U)
(declare-fun Tclass.Options.Option_0 (T@U) T@U)
(declare-fun Tclass.GenericMarshalling.ContentsTraceStep () T@U)
(declare-fun GenericMarshalling.ContentsTraceStep.data (T@U) T@U)
(declare-fun GenericMarshalling.ContentsTraceStep.val (T@U) T@U)
(declare-fun |$IsA#GenericMarshalling.ContentsTraceStep| (T@U) Bool)
(declare-fun |GenericMarshalling.ContentsTraceStep#Equal| (T@U T@U) Bool)
(declare-fun |Options.Option#Equal| (T@U T@U) Bool)
(declare-fun Tclass.GenericMarshalling.__default () T@U)
(declare-fun GenericMarshalling.__default.ValInGrammar (T@U T@U T@U) Bool)
(declare-fun AsFuelBottom (T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun |GenericMarshalling.__default.ValInGrammar#canCall| (T@U T@U) Bool)
(declare-fun |GenericMarshalling.__default.ValInGrammar#requires| (T@U T@U T@U) Bool)
(declare-fun GenericMarshalling.__default.ValidGrammar (T@U T@U) Bool)
(declare-fun |GenericMarshalling.__default.ValidGrammar#canCall| (T@U) Bool)
(declare-fun |GenericMarshalling.__default.ValidGrammar#requires| (T@U T@U) Bool)
(declare-fun GenericMarshalling.__default.ValidVal (T@U T@U) Bool)
(declare-fun |GenericMarshalling.__default.ValidVal#canCall| (T@U) Bool)
(declare-fun |GenericMarshalling.__default.ValidVal#requires| (T@U T@U) Bool)
(declare-fun GenericMarshalling.__default.SeqSum (T@U T@U) Int)
(declare-fun |GenericMarshalling.__default.SeqSum#canCall| (T@U) Bool)
(declare-fun |GenericMarshalling.__default.SeqSum#requires| (T@U T@U) Bool)
(declare-fun |GenericMarshalling.__default.SizeOfV#canCall| (T@U) Bool)
(declare-fun GenericMarshalling.__default.SizeOfV (T@U T@U) Int)
(declare-fun |GenericMarshalling.__default.SizeOfV#requires| (T@U T@U) Bool)
(declare-fun GenericMarshalling.__default.parse__Uint32 (T@U) T@U)
(declare-fun |GenericMarshalling.__default.parse__Uint32#canCall| (T@U) Bool)
(declare-fun |GenericMarshalling.__default.parse__Uint32#requires| (T@U) Bool)
(declare-fun |#Options.Option.Some| (T@U) T@U)
(declare-fun StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 () T@U)
(declare-fun |#Options.Option.None| () T@U)
(declare-fun |NativeTypes.__default.Uint32Size#canCall| () Bool)
(declare-fun NativeTypes.__default.Uint32Size () Int)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (T@U) Bool)
(declare-fun NativePackedInts.__default.unpack__LittleEndian__Uint32 (T@U T@U) Int)
(declare-fun GenericMarshalling.__default.parse__Uint64 (T@U) T@U)
(declare-fun Options.Option.value (T@U) T@U)
(declare-fun |GenericMarshalling.__default.parse__Uint64#canCall| (T@U) Bool)
(declare-fun Options.Option.Some_q (T@U) Bool)
(declare-fun |GenericMarshalling.__default.parse__Uint64#requires| (T@U) Bool)
(declare-fun StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64 () T@U)
(declare-fun |NativeTypes.__default.Uint64Size#canCall| () Bool)
(declare-fun NativeTypes.__default.Uint64Size () Int)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint64#canCall| (T@U) Bool)
(declare-fun NativePackedInts.__default.unpack__LittleEndian__Uint64 (T@U T@U) Int)
(declare-fun GenericMarshalling.__default.parse__Array__contents (T@U T@U T@U Int) T@U)
(declare-fun |GenericMarshalling.__default.parse__Array__contents#canCall| (T@U T@U Int) Bool)
(declare-fun |GenericMarshalling.__default.parse__Array__contents#requires| (T@U T@U T@U Int) Bool)
(declare-fun GenericMarshalling.__default.parse__Val (T@U T@U T@U) T@U)
(declare-fun |GenericMarshalling.__default.parse__Val#canCall| (T@U T@U) Bool)
(declare-fun Options.Option.None_q (T@U) Bool)
(declare-fun GenericMarshalling.__default.parse__Array (T@U T@U T@U) T@U)
(declare-fun |GenericMarshalling.__default.parse__Array#canCall| (T@U T@U) Bool)
(declare-fun |GenericMarshalling.__default.parse__Array#requires| (T@U T@U T@U) Bool)
(declare-fun GenericMarshalling.__default.parse__Tuple__contents (T@U T@U T@U) T@U)
(declare-fun |GenericMarshalling.__default.parse__Tuple__contents#canCall| (T@U T@U) Bool)
(declare-fun |GenericMarshalling.__default.parse__Tuple__contents#requires| (T@U T@U T@U) Bool)
(declare-fun GenericMarshalling.__default.parse__Tuple (T@U T@U T@U) T@U)
(declare-fun |GenericMarshalling.__default.parse__Tuple#canCall| (T@U T@U) Bool)
(declare-fun |GenericMarshalling.__default.parse__Tuple#requires| (T@U T@U T@U) Bool)
(declare-fun GenericMarshalling.__default.parse__ByteArray (T@U) T@U)
(declare-fun |GenericMarshalling.__default.parse__ByteArray#canCall| (T@U) Bool)
(declare-fun |GenericMarshalling.__default.parse__ByteArray#requires| (T@U) Bool)
(declare-fun GenericMarshalling.__default.parse__Uint32Array (T@U) T@U)
(declare-fun |GenericMarshalling.__default.parse__Uint32Array#canCall| (T@U) Bool)
(declare-fun |GenericMarshalling.__default.parse__Uint32Array#requires| (T@U) Bool)
(declare-fun NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq (T@U T@U Int) T@U)
(declare-fun StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq () T@U)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#canCall| (T@U Int) Bool)
(declare-fun GenericMarshalling.__default.parse__Uint64Array (T@U) T@U)
(declare-fun |GenericMarshalling.__default.parse__Uint64Array#canCall| (T@U) Bool)
(declare-fun |GenericMarshalling.__default.parse__Uint64Array#requires| (T@U) Bool)
(declare-fun NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq (T@U T@U Int) T@U)
(declare-fun StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq () T@U)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#canCall| (T@U Int) Bool)
(declare-fun GenericMarshalling.__default.parse__Case (T@U T@U T@U) T@U)
(declare-fun |GenericMarshalling.__default.parse__Case#canCall| (T@U T@U) Bool)
(declare-fun |GenericMarshalling.__default.parse__Case#requires| (T@U T@U T@U) Bool)
(declare-fun |GenericMarshalling.__default.parse__Val#requires| (T@U T@U T@U) Bool)
(declare-fun GenericMarshalling.__default.Demarshallable (T@U T@U) Bool)
(declare-fun |GenericMarshalling.__default.Demarshallable#canCall| (T@U T@U) Bool)
(declare-fun |GenericMarshalling.__default.Demarshallable#requires| (T@U T@U) Bool)
(declare-fun StartFuel_GenericMarshalling._default.parse_Val () T@U)
(declare-fun GenericMarshalling.__default.DemarshallFunc (T@U T@U) T@U)
(declare-fun |GenericMarshalling.__default.DemarshallFunc#canCall| (T@U T@U) Bool)
(declare-fun |GenericMarshalling.__default.DemarshallFunc#requires| (T@U T@U) Bool)
(declare-fun Tclass.NativeTypes.sbyte () T@U)
(declare-fun Tclass.NativeTypes.int16 () T@U)
(declare-fun Tclass.NativeTypes.uint16 () T@U)
(declare-fun Tclass.NativeTypes.int32 () T@U)
(declare-fun Tclass.NativeTypes.int64 () T@U)
(declare-fun Tclass.NativeTypes.nat8 () T@U)
(declare-fun Tclass.NativeTypes.nat16 () T@U)
(declare-fun Tclass.NativeTypes.nat32 () T@U)
(declare-fun Tclass.NativeTypes.nat64 () T@U)
(declare-fun Tclass.NativeTypes.__default () T@U)
(declare-fun |NativeTypes.__default.Uint64Size#requires| () Bool)
(declare-fun |NativeTypes.__default.Uint32Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint16Size () Int)
(declare-fun |NativeTypes.__default.Uint16Size#requires| () Bool)
(declare-fun |NativeTypes.__default.Uint64UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint64UpperBound () Int)
(declare-fun |NativeTypes.__default.Uint32UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32UpperBound () Int)
(declare-fun Tclass.Collections____Maps__i.__default () T@U)
(declare-fun Collections____Maps__i.__default.eq__map (T@U T@U T@U T@U) Bool)
(declare-fun |Collections____Maps__i.__default.eq__map#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Collections____Maps__i.__default.eq__map#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Collections____Maps__i.__default.domain (T@U T@U T@U) T@U)
(declare-fun |Collections____Maps__i.__default.domain#canCall| (T@U T@U T@U) Bool)
(declare-fun |Collections____Maps__i.__default.domain#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#154| (T@U T@U) T@U)
(declare-fun Collections____Maps__i.__default.union (T@U T@U T@U T@U) T@U)
(declare-fun |Collections____Maps__i.__default.union#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Collections____Maps__i.__default.union#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |lambda#156| (T@U T@U T@U) T@U)
(declare-fun |lambda#157| (T@U T@U T@U) T@U)
(declare-fun |lambda#158| (T@U T@U T@U) T@U)
(declare-fun |lambda#159| (T@U T@U T@U) T@U)
(declare-fun Collections____Maps__i.__default.RemoveElt (T@U T@U T@U T@U) T@U)
(declare-fun |Collections____Maps__i.__default.RemoveElt#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Collections____Maps__i.__default.RemoveElt#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |lambda#160| (T@U T@U T@U) T@U)
(declare-fun |lambda#161| (T@U) T@U)
(declare-fun Tclass.SeqComparison.__default () T@U)
(declare-fun SeqComparison.__default.lte (T@U T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lte#canCall| (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lte#requires| (T@U T@U T@U) Bool)
(declare-fun SeqComparison.__default.lt (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lt#canCall| (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_SeqComparison._default.lte () T@U)
(declare-fun Tclass.NativeArrays.__default () T@U)
(declare-fun Tclass.Collections____Seqs__i.__default () T@U)
(declare-fun Collections____Seqs__i.__default.last (T@U T@U) T@U)
(declare-fun |Collections____Seqs__i.__default.last#canCall| (T@U T@U) Bool)
(declare-fun |Collections____Seqs__i.__default.last#requires| (T@U T@U) Bool)
(declare-fun Collections____Seqs__i.__default.all__but__last (T@U T@U) T@U)
(declare-fun |Collections____Seqs__i.__default.all__but__last#canCall| (T@U T@U) Bool)
(declare-fun |Collections____Seqs__i.__default.all__but__last#requires| (T@U T@U) Bool)
(declare-fun Collections____Seqs__i.__default.ItemAtPositionInSeq (T@U T@U T@U Int) Bool)
(declare-fun |Collections____Seqs__i.__default.ItemAtPositionInSeq#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Collections____Seqs__i.__default.ItemAtPositionInSeq#requires| (T@U T@U T@U Int) Bool)
(declare-fun Collections____Seqs__i.__default.FindIndexInSeq (T@U T@U T@U) Int)
(declare-fun |Collections____Seqs__i.__default.FindIndexInSeq#canCall| (T@U T@U T@U) Bool)
(declare-fun |Collections____Seqs__i.__default.FindIndexInSeq#requires| (T@U T@U T@U) Bool)
(declare-fun |$let#0_idx| (T@U T@U T@U) Int)
(declare-fun |$let#0$canCall| (T@U T@U T@U) Bool)
(declare-fun Collections____Seqs__i.__default.SeqCat (T@U T@U T@U) T@U)
(declare-fun |Collections____Seqs__i.__default.SeqCat#canCall| (T@U T@U) Bool)
(declare-fun |Collections____Seqs__i.__default.SeqCat#requires| (T@U T@U T@U) Bool)
(declare-fun Collections____Seqs__i.__default.SeqCatRev (T@U T@U T@U) T@U)
(declare-fun |Collections____Seqs__i.__default.SeqCatRev#canCall| (T@U T@U) Bool)
(declare-fun |Collections____Seqs__i.__default.SeqCatRev#requires| (T@U T@U T@U) Bool)
(declare-fun Tclass.Math.__default () T@U)
(declare-fun Math.__default.power2 (T@U Int) Int)
(declare-fun |Math.__default.power2#canCall| (Int) Bool)
(declare-fun |Math.__default.power2#requires| (T@U Int) Bool)
(declare-fun Tclass.Common____Util__i.__default () T@U)
(declare-fun Common____Util__i.__default.BEByteSeqToInt (T@U T@U) Int)
(declare-fun |Common____Util__i.__default.BEByteSeqToInt#canCall| (T@U) Bool)
(declare-fun |Common____Util__i.__default.BEByteSeqToInt#requires| (T@U T@U) Bool)
(declare-fun Common____Util__i.__default.BEUintToSeqByte (T@U Int Int) T@U)
(declare-fun |Common____Util__i.__default.BEUintToSeqByte#requires| (T@U Int Int) Bool)
(declare-fun |Common____Util__i.__default.BEUintToSeqByte#canCall| (Int Int) Bool)
(declare-fun Common____Util__i.__default.Uint64ToSeqByte (Int) T@U)
(declare-fun |Common____Util__i.__default.Uint64ToSeqByte#canCall| (Int) Bool)
(declare-fun |Common____Util__i.__default.Uint64ToSeqByte#requires| (Int) Bool)
(declare-fun Common____Util__i.__default.SeqByteToUint16 (T@U) Int)
(declare-fun |Common____Util__i.__default.SeqByteToUint16#canCall| (T@U) Bool)
(declare-fun |Common____Util__i.__default.SeqByteToUint16#requires| (T@U) Bool)
(declare-fun Tclass.Libraries____base__s.__default () T@U)
(declare-fun Libraries____base__s.__default.unroll (Int) Bool)
(declare-fun |Libraries____base__s.__default.unroll#requires| (Int) Bool)
(declare-fun Libraries____base__s.__default.Trigger (Int) Bool)
(declare-fun |Libraries____base__s.__default.Trigger#requires| (Int) Bool)
(declare-fun Libraries____base__s.__default.sizeof (T@U T@U) Int)
(declare-fun |Libraries____base__s.__default.sizeof#canCall| (T@U T@U) Bool)
(declare-fun |Libraries____base__s.__default.sizeof#requires| (T@U T@U) Bool)
(declare-fun |$IsA#Options.Option| (T@U) Bool)
(declare-fun Tclass.Options.__default () T@U)
(declare-fun Options.__default.MapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |Options.__default.MapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.MapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Options.__default.FlatMapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.FlatMapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.FlatMapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Tclass.NativePackedInts.__default () T@U)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint32#requires| (T@U T@U) Bool)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint64#requires| (T@U T@U) Bool)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#requires| (T@U T@U Int) Bool)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#requires| (T@U T@U Int) Bool)
(declare-fun Tclass.Sequences.__default () T@U)
(declare-fun Sequences.__default.Last (T@U T@U) T@U)
(declare-fun |Sequences.__default.Last#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Last#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.DropLast (T@U T@U) T@U)
(declare-fun |Sequences.__default.DropLast#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.DropLast#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Set (T@U T@U) T@U)
(declare-fun |Sequences.__default.Set#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Set#requires| (T@U T@U) Bool)
(declare-fun |lambda#166| (T@U T@U Int) T@U)
(declare-fun Sequences.__default.ISet (T@U T@U) T@U)
(declare-fun |Sequences.__default.ISet#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.ISet#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.NoDupes (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IndexOf (T@U T@U T@U) Int)
(declare-fun |Sequences.__default.IndexOf#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IndexOf#requires| (T@U T@U T@U) Bool)
(declare-fun |$let#4_i| (T@U T@U T@U) Int)
(declare-fun |$let#4$canCall| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Range (T@U Int) T@U)
(declare-fun |Sequences.__default.Range#canCall| (Int) Bool)
(declare-fun |Sequences.__default.Range#requires| (T@U Int) Bool)
(declare-fun Sequences.__default.Apply (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Apply#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Apply#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.ApplyOpaque (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.ApplyOpaque#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.ApplyOpaque#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Filter (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Filter#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Filter#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldLeft (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldLeft#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldLeft#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldFromRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldFromRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldFromRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.remove (T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.remove#canCall| (T@U T@U Int) Bool)
(declare-fun |Sequences.__default.remove#requires| (T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.insert (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.insert#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.insert#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace1with2 (T@U T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace1with2#canCall| (T@U T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace1with2#requires| (T@U T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace2with1 (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace2with1#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace2with1#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.concat (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concat3 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat3#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat3#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concatSeq (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concatSeq#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.concatSeq#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsPrefix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsSuffix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.SeqIndexIterate (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.SeqIndexIterate#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.SeqIndexIterate#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.SeqIndex (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.SeqIndex#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.SeqIndex#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.SeqIndexIterate () T@U)
(declare-fun Sequences.__default.SeqOfLength (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqOfLength#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqOfLength#requires| (T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.SeqIndexUpdate (T@U T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqIndexUpdate#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqIndexUpdate#requires| (T@U T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.Zip (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Zip#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Zip#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Unzip (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Unzip#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Unzip#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenShape (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FlattenShape#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.FlattenShape#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenLength (T@U T@U) Int)
(declare-fun |Sequences.__default.FlattenLength#canCall| (T@U) Bool)
(declare-fun |Sequences.__default.FlattenLength#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Flatten (T@U T@U T@U) T@U)
(declare-fun StartFuel_Sequences._default.FlattenLength () T@U)
(declare-fun StartFuel_Sequences._default.FlattenShape () T@U)
(declare-fun |Sequences.__default.Flatten#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Flatten#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenShape0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenShape () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenShape1 () T@U)
(declare-fun Sequences.__default.FlattenIndex (T@U Int Int) Int)
(declare-fun |Sequences.__default.FlattenIndex#canCall| (T@U Int Int) Bool)
(declare-fun |Sequences.__default.FlattenIndex#requires| (T@U Int Int) Bool)
(declare-fun Sequences.__default.UnflattenIndex (T@U T@U Int) T@U)
(declare-fun |Sequences.__default.UnflattenIndex#canCall| (T@U Int) Bool)
(declare-fun |Sequences.__default.UnflattenIndex#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenLength0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenLength () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenLength1 () T@U)
(declare-fun Sequences.__default.fill (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.fill#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.fill#requires| (T@U T@U Int T@U) Bool)
(declare-fun MapType6Type (T@T T@T) T@T)
(declare-fun MapType6TypeInv0 (T@T) T@T)
(declare-fun MapType6TypeInv1 (T@T) T@T)
(declare-fun MapType6Select (T@U T@U T@U) T@U)
(declare-fun MapType6Store (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#1| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#2| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#3| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#4| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#5| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#6| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#7| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#8| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#9| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#10| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#11| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#12| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#13| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#14| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#15| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#16| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#17| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#18| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#19| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#20| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#21| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#22| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#23| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#24| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#25| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#26| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#27| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#28| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#29| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#30| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#31| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#32| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#33| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#34| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#35| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#36| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#37| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#38| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#39| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#40| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#41| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#42| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#43| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#44| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#45| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#46| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#47| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#48| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#49| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#50| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#51| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#52| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#53| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#54| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#55| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#56| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#57| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#58| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#59| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#60| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#61| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#62| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#63| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#64| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#65| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#66| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#67| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#68| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#69| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#70| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#71| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#72| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#73| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#74| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#75| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#76| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#77| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#78| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#79| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#80| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#81| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#82| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#83| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#84| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#85| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#86| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#87| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#88| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#89| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#90| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#91| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#92| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#93| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#94| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#95| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#96| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#97| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#98| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#99| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#100| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#101| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#102| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#103| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#104| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#105| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#106| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#107| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#108| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#109| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#110| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#111| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#112| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#113| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#114| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#115| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#116| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#117| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#118| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#119| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#120| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#121| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#122| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#123| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#124| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#125| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#126| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#127| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#128| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#129| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#130| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#131| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#132| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#133| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#134| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#135| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#136| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#137| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#138| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#139| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#140| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#141| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#142| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#143| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#144| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#145| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#146| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#147| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#148| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#149| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#150| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#151| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#152| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#153| (T@U T@U T@U Bool) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0) :qid |typeInv:U_2_int| :pattern ( (int_2_U arg0)) ))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x)) :qid |cast:U_2_int| :pattern ( (U_2_int x)) ))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType) :qid |funType:int_2_U| :pattern ( (int_2_U arg0@@0)) ))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1) :qid |typeInv:U_2_real| :pattern ( (real_2_U arg0@@1)) ))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0)) :qid |cast:U_2_real| :pattern ( (U_2_real x@@0)) ))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType) :qid |funType:real_2_U| :pattern ( (real_2_U arg0@@2)) ))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3) :qid |typeInv:U_2_bool| :pattern ( (bool_2_U arg0@@3)) ))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1)) :qid |cast:U_2_bool| :pattern ( (U_2_bool x@@1)) ))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType) :qid |funType:bool_2_U| :pattern ( (bool_2_U arg0@@4)) ))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5) :qid |typeInv:U_2_rmode| :pattern ( (rmode_2_U arg0@@5)) ))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2)) :qid |cast:U_2_rmode| :pattern ( (U_2_rmode x@@2)) ))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType) :qid |funType:rmode_2_U| :pattern ( (rmode_2_U arg0@@6)) ))))
(assert (forall ((x@@3 T@U) ) (! (UOrdering2 x@@3 x@@3) :qid |bg:subtype-refl| :no-pattern (U_2_int x@@3) :no-pattern (U_2_bool x@@3) )))
(assert (forall ((x@@4 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@4))) (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@4 y) (UOrdering2 y z))) (UOrdering2 x@@4 z))) :qid |bg:subtype-trans| :pattern ( (UOrdering2 x@@4 y) (UOrdering2 y z)) )))
(assert (forall ((x@@5 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@5))) (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@5 y@@0) (UOrdering2 y@@0 x@@5)) (= x@@5 y@@0)))) :qid |bg:subtype-antisymm| :pattern ( (UOrdering2 x@@5 y@@0) (UOrdering2 y@@0 x@@5)) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor TyType) 4) (= (type TBool) TyType)) (= (type TChar) TyType)) (= (type TInt) TyType)) (= (type TReal) TyType)) (= (type TORDINAL) TyType)) (= (Ctor TyTagType) 5)) (= (type TagBool) TyTagType)) (= (type TagChar) TyTagType)) (= (type TagInt) TyTagType)) (= (type TagReal) TyTagType)) (= (type TagORDINAL) TyTagType)) (= (type TagSet) TyTagType)) (= (type TagISet) TyTagType)) (= (type TagMultiSet) TyTagType)) (= (type TagSeq) TyTagType)) (= (type TagMap) TyTagType)) (= (type TagIMap) TyTagType)) (= (type TagClass) TyTagType)) (= (Ctor ClassNameType) 6)) (= (type class._System.int) ClassNameType)) (= (type class._System.bool) ClassNameType)) (= (type class._System.set) ClassNameType)) (= (type class._System.seq) ClassNameType)) (= (type class._System.multiset) ClassNameType)) (forall ((arg0@@7 T@T) ) (! (= (Ctor (FieldType arg0@@7)) 7) :qid |ctor:FieldType| ))) (forall ((arg0@@8 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@8)) arg0@@8) :qid |typeInv:FieldTypeInv0| :pattern ( (FieldType arg0@@8)) ))) (= (type alloc) (FieldType boolType))) (= (Ctor NameFamilyType) 8)) (= (type allocName) NameFamilyType)) (= (type Tagclass._System.nat) TyTagType)) (= (type class._System.object?) ClassNameType)) (= (type Tagclass._System.object?) TyTagType)) (= (type Tagclass._System.object) TyTagType)) (= (type class._System.array?) ClassNameType)) (= (type Tagclass._System.array?) TyTagType)) (= (type Tagclass._System.array) TyTagType)) (= (type Tagclass._System.___hFunc0) TyTagType)) (= (type Tagclass._System.___hPartialFunc0) TyTagType)) (= (type Tagclass._System.___hTotalFunc0) TyTagType)) (= (type class._System.__default) ClassNameType)) (= (type Tagclass._System.__default) TyTagType)) (= (type Tagclass._System.___hFunc2) TyTagType)) (= (type Tagclass._System.___hPartialFunc2) TyTagType)) (= (type Tagclass._System.___hTotalFunc2) TyTagType)) (= (type Tagclass._System.___hFunc1) TyTagType)) (= (type Tagclass._System.___hPartialFunc1) TyTagType)) (= (type Tagclass._System.___hTotalFunc1) TyTagType)) (= (Ctor DtCtorIdType) 9)) (= (type |##_System._tuple#2._#Make2|) DtCtorIdType)) (= (type Tagclass._System.Tuple2) TyTagType)) (= (type class._System.Tuple2) ClassNameType)) (= (type Tagclass._System.___hFunc3) TyTagType)) (= (type Tagclass._System.___hPartialFunc3) TyTagType)) (= (type Tagclass._System.___hTotalFunc3) TyTagType)) (= (type Tagclass._System.___hFunc4) TyTagType)) (= (type Tagclass._System.___hPartialFunc4) TyTagType)) (= (type Tagclass._System.___hTotalFunc4) TyTagType)) (= (type |##_System._tuple#0._#Make0|) DtCtorIdType)) (= (type Tagclass._System.Tuple0) TyTagType)) (= (type class._System.Tuple0) ClassNameType)) (= (type |##GenericMarshalling.G.GUint32|) DtCtorIdType)) (= (type Tagclass.GenericMarshalling.G) TyTagType)) (= (type |##GenericMarshalling.G.GUint64|) DtCtorIdType)) (= (type |##GenericMarshalling.G.GArray|) DtCtorIdType)) (= (type |##GenericMarshalling.G.GTuple|) DtCtorIdType)) (= (type |##GenericMarshalling.G.GByteArray|) DtCtorIdType)) (= (type |##GenericMarshalling.G.GUint32Array|) DtCtorIdType)) (= (type |##GenericMarshalling.G.GUint64Array|) DtCtorIdType)) (= (type |##GenericMarshalling.G.GTaggedUnion|) DtCtorIdType)) (= (type class.GenericMarshalling.G) ClassNameType)) (= (type |##GenericMarshalling.V.VUint32|) DtCtorIdType)) (= (type Tagclass.NativeTypes.uint32) TyTagType)) (= (type Tagclass.GenericMarshalling.V) TyTagType)) (= (type |##GenericMarshalling.V.VUint64|) DtCtorIdType)) (= (type Tagclass.NativeTypes.uint64) TyTagType)) (= (type |##GenericMarshalling.V.VArray|) DtCtorIdType)) (= (type |##GenericMarshalling.V.VTuple|) DtCtorIdType)) (= (type |##GenericMarshalling.V.VByteArray|) DtCtorIdType)) (= (type Tagclass.NativeTypes.byte) TyTagType)) (= (type |##GenericMarshalling.V.VUint32Array|) DtCtorIdType)) (= (type |##GenericMarshalling.V.VUint64Array|) DtCtorIdType)) (= (type |##GenericMarshalling.V.VCase|) DtCtorIdType)) (= (type class.GenericMarshalling.V) ClassNameType)) (= (type |##GenericMarshalling.ContentsTraceStep.ContentsTraceStep|) DtCtorIdType)) (= (type Tagclass.Options.Option) TyTagType)) (= (type Tagclass.GenericMarshalling.ContentsTraceStep) TyTagType)) (= (type class.GenericMarshalling.ContentsTraceStep) ClassNameType)) (= (type class.GenericMarshalling.__default) ClassNameType)) (= (type Tagclass.GenericMarshalling.__default) TyTagType)) (= (type Tagclass.NativeTypes.sbyte) TyTagType)) (= (type class.NativeTypes.sbyte) ClassNameType)) (= (type class.NativeTypes.byte) ClassNameType)) (= (type Tagclass.NativeTypes.int16) TyTagType)) (= (type class.NativeTypes.int16) ClassNameType)) (= (type Tagclass.NativeTypes.uint16) TyTagType)) (= (type class.NativeTypes.uint16) ClassNameType)) (= (type Tagclass.NativeTypes.int32) TyTagType)) (= (type class.NativeTypes.int32) ClassNameType)) (= (type class.NativeTypes.uint32) ClassNameType)) (= (type Tagclass.NativeTypes.int64) TyTagType)) (= (type class.NativeTypes.int64) ClassNameType)) (= (type class.NativeTypes.uint64) ClassNameType)) (= (type Tagclass.NativeTypes.nat8) TyTagType)) (= (type class.NativeTypes.nat8) ClassNameType)) (= (type Tagclass.NativeTypes.nat16) TyTagType)) (= (type class.NativeTypes.nat16) ClassNameType)) (= (type Tagclass.NativeTypes.nat32) TyTagType)) (= (type class.NativeTypes.nat32) ClassNameType)) (= (type Tagclass.NativeTypes.nat64) TyTagType)) (= (type class.NativeTypes.nat64) ClassNameType)) (= (type class.NativeTypes.__default) ClassNameType)) (= (type Tagclass.NativeTypes.__default) TyTagType)) (= (type class.Collections____Maps__i.__default) ClassNameType)) (= (type Tagclass.Collections____Maps__i.__default) TyTagType)) (= (type class.SeqComparison.__default) ClassNameType)) (= (type Tagclass.SeqComparison.__default) TyTagType)) (= (type class.NativeArrays.__default) ClassNameType)) (= (type Tagclass.NativeArrays.__default) TyTagType)) (= (type class.Collections____Seqs__i.__default) ClassNameType)) (= (type Tagclass.Collections____Seqs__i.__default) TyTagType)) (= (type class.Math.__default) ClassNameType)) (= (type Tagclass.Math.__default) TyTagType)) (= (type class.Common____Util__i.__default) ClassNameType)) (= (type Tagclass.Common____Util__i.__default) TyTagType)) (= (type class.Libraries____base__s.__default) ClassNameType)) (= (type Tagclass.Libraries____base__s.__default) TyTagType)) (= (type |##Options.Option.None|) DtCtorIdType)) (= (type |##Options.Option.Some|) DtCtorIdType)) (= (type class.Options.Option) ClassNameType)) (= (type class.Options.__default) ClassNameType)) (= (type Tagclass.Options.__default) TyTagType)) (= (type class.NativePackedInts.__default) ClassNameType)) (= (type Tagclass.NativePackedInts.__default) TyTagType)) (= (type class.Sequences.__default) ClassNameType)) (= (type Tagclass.Sequences.__default) TyTagType)))
(assert (distinct TBool TChar TInt TReal TORDINAL TagBool TagChar TagInt TagReal TagORDINAL TagSet TagISet TagMultiSet TagSeq TagMap TagIMap TagClass class._System.int class._System.bool class._System.set class._System.seq class._System.multiset alloc allocName Tagclass._System.nat class._System.object? Tagclass._System.object? Tagclass._System.object class._System.array? Tagclass._System.array? Tagclass._System.array Tagclass._System.___hFunc0 Tagclass._System.___hPartialFunc0 Tagclass._System.___hTotalFunc0 class._System.__default Tagclass._System.__default Tagclass._System.___hFunc2 Tagclass._System.___hPartialFunc2 Tagclass._System.___hTotalFunc2 Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 Tagclass._System.___hTotalFunc1 |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 class._System.Tuple2 Tagclass._System.___hFunc3 Tagclass._System.___hPartialFunc3 Tagclass._System.___hTotalFunc3 Tagclass._System.___hFunc4 Tagclass._System.___hPartialFunc4 Tagclass._System.___hTotalFunc4 |##_System._tuple#0._#Make0| Tagclass._System.Tuple0 class._System.Tuple0 |##GenericMarshalling.G.GUint32| Tagclass.GenericMarshalling.G |##GenericMarshalling.G.GUint64| |##GenericMarshalling.G.GArray| |##GenericMarshalling.G.GTuple| |##GenericMarshalling.G.GByteArray| |##GenericMarshalling.G.GUint32Array| |##GenericMarshalling.G.GUint64Array| |##GenericMarshalling.G.GTaggedUnion| class.GenericMarshalling.G |##GenericMarshalling.V.VUint32| Tagclass.NativeTypes.uint32 Tagclass.GenericMarshalling.V |##GenericMarshalling.V.VUint64| Tagclass.NativeTypes.uint64 |##GenericMarshalling.V.VArray| |##GenericMarshalling.V.VTuple| |##GenericMarshalling.V.VByteArray| Tagclass.NativeTypes.byte |##GenericMarshalling.V.VUint32Array| |##GenericMarshalling.V.VUint64Array| |##GenericMarshalling.V.VCase| class.GenericMarshalling.V |##GenericMarshalling.ContentsTraceStep.ContentsTraceStep| Tagclass.Options.Option Tagclass.GenericMarshalling.ContentsTraceStep class.GenericMarshalling.ContentsTraceStep class.GenericMarshalling.__default Tagclass.GenericMarshalling.__default Tagclass.NativeTypes.sbyte class.NativeTypes.sbyte class.NativeTypes.byte Tagclass.NativeTypes.int16 class.NativeTypes.int16 Tagclass.NativeTypes.uint16 class.NativeTypes.uint16 Tagclass.NativeTypes.int32 class.NativeTypes.int32 class.NativeTypes.uint32 Tagclass.NativeTypes.int64 class.NativeTypes.int64 class.NativeTypes.uint64 Tagclass.NativeTypes.nat8 class.NativeTypes.nat8 Tagclass.NativeTypes.nat16 class.NativeTypes.nat16 Tagclass.NativeTypes.nat32 class.NativeTypes.nat32 Tagclass.NativeTypes.nat64 class.NativeTypes.nat64 class.NativeTypes.__default Tagclass.NativeTypes.__default class.Collections____Maps__i.__default Tagclass.Collections____Maps__i.__default class.SeqComparison.__default Tagclass.SeqComparison.__default class.NativeArrays.__default Tagclass.NativeArrays.__default class.Collections____Seqs__i.__default Tagclass.Collections____Seqs__i.__default class.Math.__default Tagclass.Math.__default class.Common____Util__i.__default Tagclass.Common____Util__i.__default class.Libraries____base__s.__default Tagclass.Libraries____base__s.__default |##Options.Option.None| |##Options.Option.Some| class.Options.Option class.Options.__default Tagclass.Options.__default class.NativePackedInts.__default Tagclass.NativePackedInts.__default class.Sequences.__default Tagclass.Sequences.__default) )
(assert $$Language$Dafny)
(assert (forall ((arg0@@9 Int) ) (! (= (type (TBitvector arg0@@9)) TyType) :qid |funType:TBitvector| :pattern ( (TBitvector arg0@@9)) )))
(assert (forall ((w Int) ) (! (= (Inv0_TBitvector (TBitvector w)) w) :qid |DafnyPre.32:15| :skolemid |319| :pattern ( (TBitvector w)) )))
(assert  (and (forall ((arg0@@10 T@U) ) (! (= (type (TSet arg0@@10)) TyType) :qid |funType:TSet| :pattern ( (TSet arg0@@10)) )) (forall ((arg0@@11 T@U) ) (! (= (type (Inv0_TSet arg0@@11)) TyType) :qid |funType:Inv0_TSet| :pattern ( (Inv0_TSet arg0@@11)) ))))
(assert (forall ((t T@U) ) (!  (=> (= (type t) TyType) (= (Inv0_TSet (TSet t)) t)) :qid |DafnyPre.34:15| :skolemid |320| :pattern ( (TSet t)) )))
(assert  (and (forall ((arg0@@12 T@U) ) (! (= (type (TISet arg0@@12)) TyType) :qid |funType:TISet| :pattern ( (TISet arg0@@12)) )) (forall ((arg0@@13 T@U) ) (! (= (type (Inv0_TISet arg0@@13)) TyType) :qid |funType:Inv0_TISet| :pattern ( (Inv0_TISet arg0@@13)) ))))
(assert (forall ((t@@0 T@U) ) (!  (=> (= (type t@@0) TyType) (= (Inv0_TISet (TISet t@@0)) t@@0)) :qid |DafnyPre.36:15| :skolemid |321| :pattern ( (TISet t@@0)) )))
(assert  (and (forall ((arg0@@14 T@U) ) (! (= (type (TSeq arg0@@14)) TyType) :qid |funType:TSeq| :pattern ( (TSeq arg0@@14)) )) (forall ((arg0@@15 T@U) ) (! (= (type (Inv0_TSeq arg0@@15)) TyType) :qid |funType:Inv0_TSeq| :pattern ( (Inv0_TSeq arg0@@15)) ))))
(assert (forall ((t@@1 T@U) ) (!  (=> (= (type t@@1) TyType) (= (Inv0_TSeq (TSeq t@@1)) t@@1)) :qid |DafnyPre.38:15| :skolemid |322| :pattern ( (TSeq t@@1)) )))
(assert  (and (forall ((arg0@@16 T@U) ) (! (= (type (TMultiSet arg0@@16)) TyType) :qid |funType:TMultiSet| :pattern ( (TMultiSet arg0@@16)) )) (forall ((arg0@@17 T@U) ) (! (= (type (Inv0_TMultiSet arg0@@17)) TyType) :qid |funType:Inv0_TMultiSet| :pattern ( (Inv0_TMultiSet arg0@@17)) ))))
(assert (forall ((t@@2 T@U) ) (!  (=> (= (type t@@2) TyType) (= (Inv0_TMultiSet (TMultiSet t@@2)) t@@2)) :qid |DafnyPre.40:15| :skolemid |323| :pattern ( (TMultiSet t@@2)) )))
(assert  (and (forall ((arg0@@18 T@U) (arg1 T@U) ) (! (= (type (TMap arg0@@18 arg1)) TyType) :qid |funType:TMap| :pattern ( (TMap arg0@@18 arg1)) )) (forall ((arg0@@19 T@U) ) (! (= (type (Inv0_TMap arg0@@19)) TyType) :qid |funType:Inv0_TMap| :pattern ( (Inv0_TMap arg0@@19)) ))))
(assert (forall ((t@@3 T@U) (u T@U) ) (!  (=> (and (= (type t@@3) TyType) (= (type u) TyType)) (= (Inv0_TMap (TMap t@@3 u)) t@@3)) :qid |DafnyPre.43:15| :skolemid |324| :pattern ( (TMap t@@3 u)) )))
(assert (forall ((arg0@@20 T@U) ) (! (= (type (Inv1_TMap arg0@@20)) TyType) :qid |funType:Inv1_TMap| :pattern ( (Inv1_TMap arg0@@20)) )))
(assert (forall ((t@@4 T@U) (u@@0 T@U) ) (!  (=> (and (= (type t@@4) TyType) (= (type u@@0) TyType)) (= (Inv1_TMap (TMap t@@4 u@@0)) u@@0)) :qid |DafnyPre.44:15| :skolemid |325| :pattern ( (TMap t@@4 u@@0)) )))
(assert  (and (forall ((arg0@@21 T@U) (arg1@@0 T@U) ) (! (= (type (TIMap arg0@@21 arg1@@0)) TyType) :qid |funType:TIMap| :pattern ( (TIMap arg0@@21 arg1@@0)) )) (forall ((arg0@@22 T@U) ) (! (= (type (Inv0_TIMap arg0@@22)) TyType) :qid |funType:Inv0_TIMap| :pattern ( (Inv0_TIMap arg0@@22)) ))))
(assert (forall ((t@@5 T@U) (u@@1 T@U) ) (!  (=> (and (= (type t@@5) TyType) (= (type u@@1) TyType)) (= (Inv0_TIMap (TIMap t@@5 u@@1)) t@@5)) :qid |DafnyPre.47:15| :skolemid |326| :pattern ( (TIMap t@@5 u@@1)) )))
(assert (forall ((arg0@@23 T@U) ) (! (= (type (Inv1_TIMap arg0@@23)) TyType) :qid |funType:Inv1_TIMap| :pattern ( (Inv1_TIMap arg0@@23)) )))
(assert (forall ((t@@6 T@U) (u@@2 T@U) ) (!  (=> (and (= (type t@@6) TyType) (= (type u@@2) TyType)) (= (Inv1_TIMap (TIMap t@@6 u@@2)) u@@2)) :qid |DafnyPre.48:15| :skolemid |327| :pattern ( (TIMap t@@6 u@@2)) )))
(assert (forall ((arg0@@24 T@U) ) (! (= (type (Tag arg0@@24)) TyTagType) :qid |funType:Tag| :pattern ( (Tag arg0@@24)) )))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert (= (Tag TORDINAL) TagORDINAL))
(assert (forall ((t@@7 T@U) ) (!  (=> (= (type t@@7) TyType) (= (Tag (TSet t@@7)) TagSet)) :qid |DafnyPre.74:15| :skolemid |328| :pattern ( (TSet t@@7)) )))
(assert (forall ((t@@8 T@U) ) (!  (=> (= (type t@@8) TyType) (= (Tag (TISet t@@8)) TagISet)) :qid |DafnyPre.75:15| :skolemid |329| :pattern ( (TISet t@@8)) )))
(assert (forall ((t@@9 T@U) ) (!  (=> (= (type t@@9) TyType) (= (Tag (TMultiSet t@@9)) TagMultiSet)) :qid |DafnyPre.76:15| :skolemid |330| :pattern ( (TMultiSet t@@9)) )))
(assert (forall ((t@@10 T@U) ) (!  (=> (= (type t@@10) TyType) (= (Tag (TSeq t@@10)) TagSeq)) :qid |DafnyPre.77:15| :skolemid |331| :pattern ( (TSeq t@@10)) )))
(assert (forall ((t@@11 T@U) (u@@3 T@U) ) (!  (=> (and (= (type t@@11) TyType) (= (type u@@3) TyType)) (= (Tag (TMap t@@11 u@@3)) TagMap)) :qid |DafnyPre.78:15| :skolemid |332| :pattern ( (TMap t@@11 u@@3)) )))
(assert (forall ((t@@12 T@U) (u@@4 T@U) ) (!  (=> (and (= (type t@@12) TyType) (= (type u@@4) TyType)) (= (Tag (TIMap t@@12 u@@4)) TagIMap)) :qid |DafnyPre.79:15| :skolemid |333| :pattern ( (TIMap t@@12 u@@4)) )))
(assert (forall ((arg0@@25 T@U) ) (! (let ((T (type arg0@@25))) (= (type (Lit arg0@@25)) T)) :qid |funType:Lit| :pattern ( (Lit arg0@@25)) )))
(assert (forall ((x@@6 T@U) ) (! (= (Lit x@@6) x@@6) :qid |DafnyPre.84:29| :skolemid |334| :pattern ( (Lit x@@6)) )))
(assert  (and (= (Ctor BoxType) 10) (forall ((arg0@@26 T@U) ) (! (= (type ($Box arg0@@26)) BoxType) :qid |funType:$Box| :pattern ( ($Box arg0@@26)) ))))
(assert (forall ((x@@7 T@U) ) (! (= ($Box (Lit x@@7)) (Lit ($Box x@@7))) :qid |DafnyPre.85:18| :skolemid |335| :pattern ( ($Box (Lit x@@7))) )))
(assert (forall ((x@@8 Int) ) (! (= (LitInt x@@8) x@@8) :qid |DafnyPre.90:29| :skolemid |336| :pattern ( (LitInt x@@8)) )))
(assert (forall ((x@@9 Int) ) (! (= ($Box (int_2_U (LitInt x@@9))) (Lit ($Box (int_2_U x@@9)))) :qid |DafnyPre.91:15| :skolemid |337| :pattern ( ($Box (int_2_U (LitInt x@@9)))) )))
(assert (forall ((x@@10 Real) ) (! (= (LitReal x@@10) x@@10) :qid |DafnyPre.92:30| :skolemid |338| :pattern ( (LitReal x@@10)) )))
(assert (forall ((x@@11 Real) ) (! (= ($Box (real_2_U (LitReal x@@11))) (Lit ($Box (real_2_U x@@11)))) :qid |DafnyPre.93:15| :skolemid |339| :pattern ( ($Box (real_2_U (LitReal x@@11)))) )))
(assert  (and (= (Ctor charType) 11) (forall ((arg0@@27 Int) ) (! (= (type (|char#FromInt| arg0@@27)) charType) :qid |funType:char#FromInt| :pattern ( (|char#FromInt| arg0@@27)) ))))
(assert (forall ((ch T@U) ) (!  (=> (= (type ch) charType) (and (and (= (|char#FromInt| (|char#ToInt| ch)) ch) (<= 0 (|char#ToInt| ch))) (< (|char#ToInt| ch) 65536))) :qid |DafnyPre.102:15| :skolemid |340| :pattern ( (|char#ToInt| ch)) )))
(assert (forall ((n Int) ) (!  (=> (and (<= 0 n) (< n 65536)) (= (|char#ToInt| (|char#FromInt| n)) n)) :qid |DafnyPre.106:15| :skolemid |341| :pattern ( (|char#FromInt| n)) )))
(assert (forall ((arg0@@28 T@U) (arg1@@1 T@U) ) (! (= (type (|char#Plus| arg0@@28 arg1@@1)) charType) :qid |funType:char#Plus| :pattern ( (|char#Plus| arg0@@28 arg1@@1)) )))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (and (= (type a) charType) (= (type b) charType)) (= (|char#Plus| a b) (|char#FromInt| (+ (|char#ToInt| a) (|char#ToInt| b))))) :qid |DafnyPre.112:15| :skolemid |342| :pattern ( (|char#Plus| a b)) )))
(assert (forall ((arg0@@29 T@U) (arg1@@2 T@U) ) (! (= (type (|char#Minus| arg0@@29 arg1@@2)) charType) :qid |funType:char#Minus| :pattern ( (|char#Minus| arg0@@29 arg1@@2)) )))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (= (type a@@0) charType) (= (type b@@0) charType)) (= (|char#Minus| a@@0 b@@0) (|char#FromInt| (- (|char#ToInt| a@@0) (|char#ToInt| b@@0))))) :qid |DafnyPre.115:15| :skolemid |343| :pattern ( (|char#Minus| a@@0 b@@0)) )))
(assert (forall ((T@@0 T@T) (arg0@@30 T@U) ) (! (= (type ($Unbox T@@0 arg0@@30)) T@@0) :qid |funType:$Unbox| :pattern ( ($Unbox T@@0 arg0@@30)) )))
(assert (forall ((x@@12 T@U) ) (! (let ((T@@1 (type x@@12))) (= ($Unbox T@@1 ($Box x@@12)) x@@12)) :qid |DafnyPre.142:18| :skolemid |344| :pattern ( ($Box x@@12)) )))
(assert (forall ((bx T@U) ) (!  (=> (and (= (type bx) BoxType) ($IsBox bx TInt)) (and (= ($Box ($Unbox intType bx)) bx) ($Is ($Unbox intType bx) TInt))) :qid |DafnyPre.144:15| :skolemid |345| :pattern ( ($IsBox bx TInt)) )))
(assert (forall ((bx@@0 T@U) ) (!  (=> (and (= (type bx@@0) BoxType) ($IsBox bx@@0 TReal)) (and (= ($Box ($Unbox realType bx@@0)) bx@@0) ($Is ($Unbox realType bx@@0) TReal))) :qid |DafnyPre.147:15| :skolemid |346| :pattern ( ($IsBox bx@@0 TReal)) )))
(assert (forall ((bx@@1 T@U) ) (!  (=> (and (= (type bx@@1) BoxType) ($IsBox bx@@1 TBool)) (and (= ($Box ($Unbox boolType bx@@1)) bx@@1) ($Is ($Unbox boolType bx@@1) TBool))) :qid |DafnyPre.150:15| :skolemid |347| :pattern ( ($IsBox bx@@1 TBool)) )))
(assert (forall ((bx@@2 T@U) ) (!  (=> (and (= (type bx@@2) BoxType) ($IsBox bx@@2 TChar)) (and (= ($Box ($Unbox charType bx@@2)) bx@@2) ($Is ($Unbox charType bx@@2) TChar))) :qid |DafnyPre.153:15| :skolemid |348| :pattern ( ($IsBox bx@@2 TChar)) )))
(assert  (and (and (and (and (and (and (forall ((arg0@@31 T@T) (arg1@@3 T@T) ) (! (= (Ctor (MapType0Type arg0@@31 arg1@@3)) 12) :qid |ctor:MapType0Type| )) (forall ((arg0@@32 T@T) (arg1@@4 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@32 arg1@@4)) arg0@@32) :qid |typeInv:MapType0TypeInv0| :pattern ( (MapType0Type arg0@@32 arg1@@4)) ))) (forall ((arg0@@33 T@T) (arg1@@5 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@33 arg1@@5)) arg1@@5) :qid |typeInv:MapType0TypeInv1| :pattern ( (MapType0Type arg0@@33 arg1@@5)) ))) (forall ((arg0@@34 T@U) (arg1@@6 T@U) ) (! (let ((aVar1 (MapType0TypeInv1 (type arg0@@34)))) (= (type (MapType0Select arg0@@34 arg1@@6)) aVar1)) :qid |funType:MapType0Select| :pattern ( (MapType0Select arg0@@34 arg1@@6)) ))) (forall ((arg0@@35 T@U) (arg1@@7 T@U) (arg2 T@U) ) (! (let ((aVar1@@0 (type arg2))) (let ((aVar0 (type arg1@@7))) (= (type (MapType0Store arg0@@35 arg1@@7 arg2)) (MapType0Type aVar0 aVar1@@0)))) :qid |funType:MapType0Store| :pattern ( (MapType0Store arg0@@35 arg1@@7 arg2)) ))) (forall ((m T@U) (x0 T@U) (val T@U) ) (! (let ((aVar1@@1 (MapType0TypeInv1 (type m)))) (=> (= (type val) aVar1@@1) (= (MapType0Select (MapType0Store m x0 val) x0) val))) :qid |mapAx0:MapType0Select| :weight 0 ))) (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 val@@0) y0) (MapType0Select m@@0 y0))) :qid |mapAx1:MapType0Select:0| :weight 0 )) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (y0@@0 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@1 x0@@1 val@@1) y0@@0) (MapType0Select m@@1 y0@@0))) :qid |mapAx2:MapType0Select| :weight 0 )))))
(assert (forall ((bx@@3 T@U) (t@@13 T@U) ) (!  (=> (and (and (= (type bx@@3) BoxType) (= (type t@@13) TyType)) ($IsBox bx@@3 (TSet t@@13))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@3)) bx@@3) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@3) (TSet t@@13)))) :qid |DafnyPre.156:15| :skolemid |349| :pattern ( ($IsBox bx@@3 (TSet t@@13))) )))
(assert (forall ((bx@@4 T@U) (t@@14 T@U) ) (!  (=> (and (and (= (type bx@@4) BoxType) (= (type t@@14) TyType)) ($IsBox bx@@4 (TISet t@@14))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@4)) bx@@4) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@4) (TISet t@@14)))) :qid |DafnyPre.159:15| :skolemid |350| :pattern ( ($IsBox bx@@4 (TISet t@@14))) )))
(assert (forall ((bx@@5 T@U) (t@@15 T@U) ) (!  (=> (and (and (= (type bx@@5) BoxType) (= (type t@@15) TyType)) ($IsBox bx@@5 (TMultiSet t@@15))) (and (= ($Box ($Unbox (MapType0Type BoxType intType) bx@@5)) bx@@5) ($Is ($Unbox (MapType0Type BoxType intType) bx@@5) (TMultiSet t@@15)))) :qid |DafnyPre.162:15| :skolemid |351| :pattern ( ($IsBox bx@@5 (TMultiSet t@@15))) )))
(assert  (and (forall ((arg0@@36 T@T) ) (! (= (Ctor (SeqType arg0@@36)) 13) :qid |ctor:SeqType| )) (forall ((arg0@@37 T@T) ) (! (= (SeqTypeInv0 (SeqType arg0@@37)) arg0@@37) :qid |typeInv:SeqTypeInv0| :pattern ( (SeqType arg0@@37)) ))))
(assert (forall ((bx@@6 T@U) (t@@16 T@U) ) (!  (=> (and (and (= (type bx@@6) BoxType) (= (type t@@16) TyType)) ($IsBox bx@@6 (TSeq t@@16))) (and (= ($Box ($Unbox (SeqType BoxType) bx@@6)) bx@@6) ($Is ($Unbox (SeqType BoxType) bx@@6) (TSeq t@@16)))) :qid |DafnyPre.165:15| :skolemid |352| :pattern ( ($IsBox bx@@6 (TSeq t@@16))) )))
(assert  (and (and (forall ((arg0@@38 T@T) (arg1@@8 T@T) ) (! (= (Ctor (MapType arg0@@38 arg1@@8)) 14) :qid |ctor:MapType| )) (forall ((arg0@@39 T@T) (arg1@@9 T@T) ) (! (= (MapTypeInv0 (MapType arg0@@39 arg1@@9)) arg0@@39) :qid |typeInv:MapTypeInv0| :pattern ( (MapType arg0@@39 arg1@@9)) ))) (forall ((arg0@@40 T@T) (arg1@@10 T@T) ) (! (= (MapTypeInv1 (MapType arg0@@40 arg1@@10)) arg1@@10) :qid |typeInv:MapTypeInv1| :pattern ( (MapType arg0@@40 arg1@@10)) ))))
(assert (forall ((bx@@7 T@U) (s T@U) (t@@17 T@U) ) (!  (=> (and (and (and (= (type bx@@7) BoxType) (= (type s) TyType)) (= (type t@@17) TyType)) ($IsBox bx@@7 (TMap s t@@17))) (and (= ($Box ($Unbox (MapType BoxType BoxType) bx@@7)) bx@@7) ($Is ($Unbox (MapType BoxType BoxType) bx@@7) (TMap s t@@17)))) :qid |DafnyPre.168:15| :skolemid |353| :pattern ( ($IsBox bx@@7 (TMap s t@@17))) )))
(assert  (and (and (forall ((arg0@@41 T@T) (arg1@@11 T@T) ) (! (= (Ctor (IMapType arg0@@41 arg1@@11)) 15) :qid |ctor:IMapType| )) (forall ((arg0@@42 T@T) (arg1@@12 T@T) ) (! (= (IMapTypeInv0 (IMapType arg0@@42 arg1@@12)) arg0@@42) :qid |typeInv:IMapTypeInv0| :pattern ( (IMapType arg0@@42 arg1@@12)) ))) (forall ((arg0@@43 T@T) (arg1@@13 T@T) ) (! (= (IMapTypeInv1 (IMapType arg0@@43 arg1@@13)) arg1@@13) :qid |typeInv:IMapTypeInv1| :pattern ( (IMapType arg0@@43 arg1@@13)) ))))
(assert (forall ((bx@@8 T@U) (s@@0 T@U) (t@@18 T@U) ) (!  (=> (and (and (and (= (type bx@@8) BoxType) (= (type s@@0) TyType)) (= (type t@@18) TyType)) ($IsBox bx@@8 (TIMap s@@0 t@@18))) (and (= ($Box ($Unbox (IMapType BoxType BoxType) bx@@8)) bx@@8) ($Is ($Unbox (IMapType BoxType BoxType) bx@@8) (TIMap s@@0 t@@18)))) :qid |DafnyPre.171:15| :skolemid |354| :pattern ( ($IsBox bx@@8 (TIMap s@@0 t@@18))) )))
(assert (forall ((v T@U) (t@@19 T@U) ) (!  (=> (= (type t@@19) TyType) (and (=> ($IsBox ($Box v) t@@19) ($Is v t@@19)) (=> ($Is v t@@19) ($IsBox ($Box v) t@@19)))) :qid |DafnyPre.175:18| :skolemid |355| :pattern ( ($IsBox ($Box v) t@@19)) )))
(assert  (and (and (and (and (and (forall ((arg0@@44 T@U) (arg1@@14 T@U) ) (! (let ((alpha@@1 (FieldTypeInv0 (type arg1@@14)))) (= (type (MapType1Select arg0@@44 arg1@@14)) alpha@@1)) :qid |funType:MapType1Select| :pattern ( (MapType1Select arg0@@44 arg1@@14)) )) (= (Ctor MapType1Type) 16)) (forall ((arg0@@45 T@U) (arg1@@15 T@U) (arg2@@0 T@U) ) (! (= (type (MapType1Store arg0@@45 arg1@@15 arg2@@0)) MapType1Type) :qid |funType:MapType1Store| :pattern ( (MapType1Store arg0@@45 arg1@@15 arg2@@0)) ))) (forall ((m@@2 T@U) (x0@@2 T@U) (val@@2 T@U) ) (! (let ((alpha@@2 (FieldTypeInv0 (type x0@@2)))) (=> (= (type val@@2) alpha@@2) (= (MapType1Select (MapType1Store m@@2 x0@@2 val@@2) x0@@2) val@@2))) :qid |mapAx0:MapType1Select| :weight 0 ))) (and (forall ((val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 val@@3) y0@@1) (MapType1Select m@@3 y0@@1))) :qid |mapAx1:MapType1Select:0| :weight 0 )) (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@4 x0@@4 val@@4) y0@@2) (MapType1Select m@@4 y0@@2))) :qid |mapAx2:MapType1Select| :weight 0 )))) (= (Ctor refType) 17)))
(assert (forall ((v@@0 T@U) (t@@20 T@U) (h T@U) ) (!  (=> (and (= (type t@@20) TyType) (= (type h) (MapType0Type refType MapType1Type))) (and (=> ($IsAllocBox ($Box v@@0) t@@20 h) ($IsAlloc v@@0 t@@20 h)) (=> ($IsAlloc v@@0 t@@20 h) ($IsAllocBox ($Box v@@0) t@@20 h)))) :qid |DafnyPre.178:18| :skolemid |356| :pattern ( ($IsAllocBox ($Box v@@0) t@@20 h)) )))
(assert (forall ((v@@1 T@U) ) (!  (=> (= (type v@@1) intType) ($Is v@@1 TInt)) :qid |DafnyPre.196:14| :skolemid |357| :pattern ( ($Is v@@1 TInt)) )))
(assert (forall ((v@@2 T@U) ) (!  (=> (= (type v@@2) realType) ($Is v@@2 TReal)) :qid |DafnyPre.197:14| :skolemid |358| :pattern ( ($Is v@@2 TReal)) )))
(assert (forall ((v@@3 T@U) ) (!  (=> (= (type v@@3) boolType) ($Is v@@3 TBool)) :qid |DafnyPre.198:14| :skolemid |359| :pattern ( ($Is v@@3 TBool)) )))
(assert (forall ((v@@4 T@U) ) (!  (=> (= (type v@@4) charType) ($Is v@@4 TChar)) :qid |DafnyPre.199:14| :skolemid |360| :pattern ( ($Is v@@4 TChar)) )))
(assert (forall ((v@@5 T@U) ) (!  (=> (= (type v@@5) BoxType) ($Is v@@5 TORDINAL)) :qid |DafnyPre.200:14| :skolemid |361| :pattern ( ($Is v@@5 TORDINAL)) )))
(assert (forall ((h@@0 T@U) (v@@6 T@U) ) (!  (=> (and (= (type h@@0) (MapType0Type refType MapType1Type)) (= (type v@@6) intType)) ($IsAlloc v@@6 TInt h@@0)) :qid |DafnyPre.202:14| :skolemid |362| :pattern ( ($IsAlloc v@@6 TInt h@@0)) )))
(assert (forall ((h@@1 T@U) (v@@7 T@U) ) (!  (=> (and (= (type h@@1) (MapType0Type refType MapType1Type)) (= (type v@@7) realType)) ($IsAlloc v@@7 TReal h@@1)) :qid |DafnyPre.203:14| :skolemid |363| :pattern ( ($IsAlloc v@@7 TReal h@@1)) )))
(assert (forall ((h@@2 T@U) (v@@8 T@U) ) (!  (=> (and (= (type h@@2) (MapType0Type refType MapType1Type)) (= (type v@@8) boolType)) ($IsAlloc v@@8 TBool h@@2)) :qid |DafnyPre.204:14| :skolemid |364| :pattern ( ($IsAlloc v@@8 TBool h@@2)) )))
(assert (forall ((h@@3 T@U) (v@@9 T@U) ) (!  (=> (and (= (type h@@3) (MapType0Type refType MapType1Type)) (= (type v@@9) charType)) ($IsAlloc v@@9 TChar h@@3)) :qid |DafnyPre.205:14| :skolemid |365| :pattern ( ($IsAlloc v@@9 TChar h@@3)) )))
(assert (forall ((h@@4 T@U) (v@@10 T@U) ) (!  (=> (and (= (type h@@4) (MapType0Type refType MapType1Type)) (= (type v@@10) BoxType)) ($IsAlloc v@@10 TORDINAL h@@4)) :qid |DafnyPre.206:14| :skolemid |366| :pattern ( ($IsAlloc v@@10 TORDINAL h@@4)) )))
(assert (forall ((v@@11 T@U) (t0 T@U) ) (!  (=> (and (= (type v@@11) (MapType0Type BoxType boolType)) (= (type t0) TyType)) (and (=> ($Is v@@11 (TSet t0)) (forall ((bx@@9 T@U) ) (!  (=> (and (= (type bx@@9) BoxType) (U_2_bool (MapType0Select v@@11 bx@@9))) ($IsBox bx@@9 t0)) :qid |DafnyPre.210:11| :skolemid |367| :pattern ( (MapType0Select v@@11 bx@@9)) ))) (=> (forall ((bx@@10 T@U) ) (!  (=> (and (= (type bx@@10) BoxType) (U_2_bool (MapType0Select v@@11 bx@@10))) ($IsBox bx@@10 t0)) :qid |DafnyPre.210:11| :skolemid |367| :pattern ( (MapType0Select v@@11 bx@@10)) )) ($Is v@@11 (TSet t0))))) :qid |DafnyPre.208:15| :skolemid |368| :pattern ( ($Is v@@11 (TSet t0))) )))
(assert (forall ((v@@12 T@U) (t0@@0 T@U) ) (!  (=> (and (= (type v@@12) (MapType0Type BoxType boolType)) (= (type t0@@0) TyType)) (and (=> ($Is v@@12 (TISet t0@@0)) (forall ((bx@@11 T@U) ) (!  (=> (and (= (type bx@@11) BoxType) (U_2_bool (MapType0Select v@@12 bx@@11))) ($IsBox bx@@11 t0@@0)) :qid |DafnyPre.214:11| :skolemid |369| :pattern ( (MapType0Select v@@12 bx@@11)) ))) (=> (forall ((bx@@12 T@U) ) (!  (=> (and (= (type bx@@12) BoxType) (U_2_bool (MapType0Select v@@12 bx@@12))) ($IsBox bx@@12 t0@@0)) :qid |DafnyPre.214:11| :skolemid |369| :pattern ( (MapType0Select v@@12 bx@@12)) )) ($Is v@@12 (TISet t0@@0))))) :qid |DafnyPre.212:15| :skolemid |370| :pattern ( ($Is v@@12 (TISet t0@@0))) )))
(assert (forall ((v@@13 T@U) (t0@@1 T@U) ) (!  (=> (and (= (type v@@13) (MapType0Type BoxType intType)) (= (type t0@@1) TyType)) (and (=> ($Is v@@13 (TMultiSet t0@@1)) (forall ((bx@@13 T@U) ) (!  (=> (and (= (type bx@@13) BoxType) (< 0 (U_2_int (MapType0Select v@@13 bx@@13)))) ($IsBox bx@@13 t0@@1)) :qid |DafnyPre.218:11| :skolemid |371| :pattern ( (MapType0Select v@@13 bx@@13)) ))) (=> (forall ((bx@@14 T@U) ) (!  (=> (and (= (type bx@@14) BoxType) (< 0 (U_2_int (MapType0Select v@@13 bx@@14)))) ($IsBox bx@@14 t0@@1)) :qid |DafnyPre.218:11| :skolemid |371| :pattern ( (MapType0Select v@@13 bx@@14)) )) ($Is v@@13 (TMultiSet t0@@1))))) :qid |DafnyPre.216:15| :skolemid |372| :pattern ( ($Is v@@13 (TMultiSet t0@@1))) )))
(assert (forall ((v@@14 T@U) (t0@@2 T@U) ) (!  (=> (and (and (= (type v@@14) (MapType0Type BoxType intType)) (= (type t0@@2) TyType)) ($Is v@@14 (TMultiSet t0@@2))) ($IsGoodMultiSet v@@14)) :qid |DafnyPre.220:15| :skolemid |373| :pattern ( ($Is v@@14 (TMultiSet t0@@2))) )))
(assert (forall ((arg0@@46 T@U) (arg1@@16 Int) ) (! (let ((T@@2 (SeqTypeInv0 (type arg0@@46)))) (= (type (|Seq#Index| arg0@@46 arg1@@16)) T@@2)) :qid |funType:Seq#Index| :pattern ( (|Seq#Index| arg0@@46 arg1@@16)) )))
(assert (forall ((v@@15 T@U) (t0@@3 T@U) ) (!  (=> (and (= (type v@@15) (SeqType BoxType)) (= (type t0@@3) TyType)) (and (=> ($Is v@@15 (TSeq t0@@3)) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@15))) ($IsBox (|Seq#Index| v@@15 i) t0@@3)) :qid |DafnyPre.224:11| :skolemid |374| :pattern ( (|Seq#Index| v@@15 i)) ))) (=> (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@15))) ($IsBox (|Seq#Index| v@@15 i@@0) t0@@3)) :qid |DafnyPre.224:11| :skolemid |374| :pattern ( (|Seq#Index| v@@15 i@@0)) )) ($Is v@@15 (TSeq t0@@3))))) :qid |DafnyPre.222:15| :skolemid |375| :pattern ( ($Is v@@15 (TSeq t0@@3))) )))
(assert (forall ((v@@16 T@U) (t0@@4 T@U) (h@@5 T@U) ) (!  (=> (and (and (= (type v@@16) (MapType0Type BoxType boolType)) (= (type t0@@4) TyType)) (= (type h@@5) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@16 (TSet t0@@4) h@@5) (forall ((bx@@15 T@U) ) (!  (=> (and (= (type bx@@15) BoxType) (U_2_bool (MapType0Select v@@16 bx@@15))) ($IsAllocBox bx@@15 t0@@4 h@@5)) :qid |DafnyPre.229:11| :skolemid |376| :pattern ( (MapType0Select v@@16 bx@@15)) ))) (=> (forall ((bx@@16 T@U) ) (!  (=> (and (= (type bx@@16) BoxType) (U_2_bool (MapType0Select v@@16 bx@@16))) ($IsAllocBox bx@@16 t0@@4 h@@5)) :qid |DafnyPre.229:11| :skolemid |376| :pattern ( (MapType0Select v@@16 bx@@16)) )) ($IsAlloc v@@16 (TSet t0@@4) h@@5)))) :qid |DafnyPre.227:15| :skolemid |377| :pattern ( ($IsAlloc v@@16 (TSet t0@@4) h@@5)) )))
(assert (forall ((v@@17 T@U) (t0@@5 T@U) (h@@6 T@U) ) (!  (=> (and (and (= (type v@@17) (MapType0Type BoxType boolType)) (= (type t0@@5) TyType)) (= (type h@@6) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@17 (TISet t0@@5) h@@6) (forall ((bx@@17 T@U) ) (!  (=> (and (= (type bx@@17) BoxType) (U_2_bool (MapType0Select v@@17 bx@@17))) ($IsAllocBox bx@@17 t0@@5 h@@6)) :qid |DafnyPre.233:11| :skolemid |378| :pattern ( (MapType0Select v@@17 bx@@17)) ))) (=> (forall ((bx@@18 T@U) ) (!  (=> (and (= (type bx@@18) BoxType) (U_2_bool (MapType0Select v@@17 bx@@18))) ($IsAllocBox bx@@18 t0@@5 h@@6)) :qid |DafnyPre.233:11| :skolemid |378| :pattern ( (MapType0Select v@@17 bx@@18)) )) ($IsAlloc v@@17 (TISet t0@@5) h@@6)))) :qid |DafnyPre.231:15| :skolemid |379| :pattern ( ($IsAlloc v@@17 (TISet t0@@5) h@@6)) )))
(assert (forall ((v@@18 T@U) (t0@@6 T@U) (h@@7 T@U) ) (!  (=> (and (and (= (type v@@18) (MapType0Type BoxType intType)) (= (type t0@@6) TyType)) (= (type h@@7) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@18 (TMultiSet t0@@6) h@@7) (forall ((bx@@19 T@U) ) (!  (=> (and (= (type bx@@19) BoxType) (< 0 (U_2_int (MapType0Select v@@18 bx@@19)))) ($IsAllocBox bx@@19 t0@@6 h@@7)) :qid |DafnyPre.237:11| :skolemid |380| :pattern ( (MapType0Select v@@18 bx@@19)) ))) (=> (forall ((bx@@20 T@U) ) (!  (=> (and (= (type bx@@20) BoxType) (< 0 (U_2_int (MapType0Select v@@18 bx@@20)))) ($IsAllocBox bx@@20 t0@@6 h@@7)) :qid |DafnyPre.237:11| :skolemid |380| :pattern ( (MapType0Select v@@18 bx@@20)) )) ($IsAlloc v@@18 (TMultiSet t0@@6) h@@7)))) :qid |DafnyPre.235:15| :skolemid |381| :pattern ( ($IsAlloc v@@18 (TMultiSet t0@@6) h@@7)) )))
(assert (forall ((v@@19 T@U) (t0@@7 T@U) (h@@8 T@U) ) (!  (=> (and (and (= (type v@@19) (SeqType BoxType)) (= (type t0@@7) TyType)) (= (type h@@8) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@19 (TSeq t0@@7) h@@8) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@19))) ($IsAllocBox (|Seq#Index| v@@19 i@@1) t0@@7 h@@8)) :qid |DafnyPre.241:11| :skolemid |382| :pattern ( (|Seq#Index| v@@19 i@@1)) ))) (=> (forall ((i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| v@@19))) ($IsAllocBox (|Seq#Index| v@@19 i@@2) t0@@7 h@@8)) :qid |DafnyPre.241:11| :skolemid |382| :pattern ( (|Seq#Index| v@@19 i@@2)) )) ($IsAlloc v@@19 (TSeq t0@@7) h@@8)))) :qid |DafnyPre.239:15| :skolemid |383| :pattern ( ($IsAlloc v@@19 (TSeq t0@@7) h@@8)) )))
(assert  (and (forall ((arg0@@47 T@U) ) (! (let ((V (MapTypeInv1 (type arg0@@47)))) (let ((U (MapTypeInv0 (type arg0@@47)))) (= (type (|Map#Elements| arg0@@47)) (MapType0Type U V)))) :qid |funType:Map#Elements| :pattern ( (|Map#Elements| arg0@@47)) )) (forall ((arg0@@48 T@U) ) (! (let ((U@@0 (MapTypeInv0 (type arg0@@48)))) (= (type (|Map#Domain| arg0@@48)) (MapType0Type U@@0 boolType))) :qid |funType:Map#Domain| :pattern ( (|Map#Domain| arg0@@48)) ))))
(assert (forall ((v@@20 T@U) (t0@@8 T@U) (t1 T@U) ) (!  (=> (and (and (= (type v@@20) (MapType BoxType BoxType)) (= (type t0@@8) TyType)) (= (type t1) TyType)) (and (=> ($Is v@@20 (TMap t0@@8 t1)) (forall ((bx@@21 T@U) ) (!  (=> (and (= (type bx@@21) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@20) bx@@21))) (and ($IsBox (MapType0Select (|Map#Elements| v@@20) bx@@21) t1) ($IsBox bx@@21 t0@@8))) :qid |DafnyPre.248:19| :skolemid |384| :pattern ( (MapType0Select (|Map#Elements| v@@20) bx@@21)) :pattern ( (MapType0Select (|Map#Domain| v@@20) bx@@21)) ))) (=> (forall ((bx@@22 T@U) ) (!  (=> (and (= (type bx@@22) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@20) bx@@22))) (and ($IsBox (MapType0Select (|Map#Elements| v@@20) bx@@22) t1) ($IsBox bx@@22 t0@@8))) :qid |DafnyPre.248:19| :skolemid |384| :pattern ( (MapType0Select (|Map#Elements| v@@20) bx@@22)) :pattern ( (MapType0Select (|Map#Domain| v@@20) bx@@22)) )) ($Is v@@20 (TMap t0@@8 t1))))) :qid |DafnyPre.245:15| :skolemid |385| :pattern ( ($Is v@@20 (TMap t0@@8 t1))) )))
(assert (forall ((v@@21 T@U) (t0@@9 T@U) (t1@@0 T@U) (h@@9 T@U) ) (!  (=> (and (and (and (= (type v@@21) (MapType BoxType BoxType)) (= (type t0@@9) TyType)) (= (type t1@@0) TyType)) (= (type h@@9) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@21 (TMap t0@@9 t1@@0) h@@9) (forall ((bx@@23 T@U) ) (!  (=> (and (= (type bx@@23) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@21) bx@@23))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@21) bx@@23) t1@@0 h@@9) ($IsAllocBox bx@@23 t0@@9 h@@9))) :qid |DafnyPre.256:19| :skolemid |386| :pattern ( (MapType0Select (|Map#Elements| v@@21) bx@@23)) :pattern ( (MapType0Select (|Map#Domain| v@@21) bx@@23)) ))) (=> (forall ((bx@@24 T@U) ) (!  (=> (and (= (type bx@@24) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@21) bx@@24))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@21) bx@@24) t1@@0 h@@9) ($IsAllocBox bx@@24 t0@@9 h@@9))) :qid |DafnyPre.256:19| :skolemid |386| :pattern ( (MapType0Select (|Map#Elements| v@@21) bx@@24)) :pattern ( (MapType0Select (|Map#Domain| v@@21) bx@@24)) )) ($IsAlloc v@@21 (TMap t0@@9 t1@@0) h@@9)))) :qid |DafnyPre.253:15| :skolemid |387| :pattern ( ($IsAlloc v@@21 (TMap t0@@9 t1@@0) h@@9)) )))
(assert  (and (forall ((arg0@@49 T@U) ) (! (let ((V@@0 (IMapTypeInv1 (type arg0@@49)))) (let ((U@@1 (IMapTypeInv0 (type arg0@@49)))) (= (type (|IMap#Elements| arg0@@49)) (MapType0Type U@@1 V@@0)))) :qid |funType:IMap#Elements| :pattern ( (|IMap#Elements| arg0@@49)) )) (forall ((arg0@@50 T@U) ) (! (let ((U@@2 (IMapTypeInv0 (type arg0@@50)))) (= (type (|IMap#Domain| arg0@@50)) (MapType0Type U@@2 boolType))) :qid |funType:IMap#Domain| :pattern ( (|IMap#Domain| arg0@@50)) ))))
(assert (forall ((v@@22 T@U) (t0@@10 T@U) (t1@@1 T@U) ) (!  (=> (and (and (= (type v@@22) (IMapType BoxType BoxType)) (= (type t0@@10) TyType)) (= (type t1@@1) TyType)) (and (=> ($Is v@@22 (TIMap t0@@10 t1@@1)) (forall ((bx@@25 T@U) ) (!  (=> (and (= (type bx@@25) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@22) bx@@25))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@22) bx@@25) t1@@1) ($IsBox bx@@25 t0@@10))) :qid |DafnyPre.265:19| :skolemid |388| :pattern ( (MapType0Select (|IMap#Elements| v@@22) bx@@25)) :pattern ( (MapType0Select (|IMap#Domain| v@@22) bx@@25)) ))) (=> (forall ((bx@@26 T@U) ) (!  (=> (and (= (type bx@@26) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@22) bx@@26))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@22) bx@@26) t1@@1) ($IsBox bx@@26 t0@@10))) :qid |DafnyPre.265:19| :skolemid |388| :pattern ( (MapType0Select (|IMap#Elements| v@@22) bx@@26)) :pattern ( (MapType0Select (|IMap#Domain| v@@22) bx@@26)) )) ($Is v@@22 (TIMap t0@@10 t1@@1))))) :qid |DafnyPre.262:15| :skolemid |389| :pattern ( ($Is v@@22 (TIMap t0@@10 t1@@1))) )))
(assert (forall ((v@@23 T@U) (t0@@11 T@U) (t1@@2 T@U) (h@@10 T@U) ) (!  (=> (and (and (and (= (type v@@23) (IMapType BoxType BoxType)) (= (type t0@@11) TyType)) (= (type t1@@2) TyType)) (= (type h@@10) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@23 (TIMap t0@@11 t1@@2) h@@10) (forall ((bx@@27 T@U) ) (!  (=> (and (= (type bx@@27) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@23) bx@@27))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@23) bx@@27) t1@@2 h@@10) ($IsAllocBox bx@@27 t0@@11 h@@10))) :qid |DafnyPre.273:19| :skolemid |390| :pattern ( (MapType0Select (|IMap#Elements| v@@23) bx@@27)) :pattern ( (MapType0Select (|IMap#Domain| v@@23) bx@@27)) ))) (=> (forall ((bx@@28 T@U) ) (!  (=> (and (= (type bx@@28) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@23) bx@@28))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@23) bx@@28) t1@@2 h@@10) ($IsAllocBox bx@@28 t0@@11 h@@10))) :qid |DafnyPre.273:19| :skolemid |390| :pattern ( (MapType0Select (|IMap#Elements| v@@23) bx@@28)) :pattern ( (MapType0Select (|IMap#Domain| v@@23) bx@@28)) )) ($IsAlloc v@@23 (TIMap t0@@11 t1@@2) h@@10)))) :qid |DafnyPre.270:15| :skolemid |391| :pattern ( ($IsAlloc v@@23 (TIMap t0@@11 t1@@2) h@@10)) )))
(assert  (and (and (forall ((arg0@@51 T@U) (arg1@@17 T@U) ) (! (= (type (TypeTuple arg0@@51 arg1@@17)) ClassNameType) :qid |funType:TypeTuple| :pattern ( (TypeTuple arg0@@51 arg1@@17)) )) (forall ((arg0@@52 T@U) ) (! (= (type (TypeTupleCar arg0@@52)) ClassNameType) :qid |funType:TypeTupleCar| :pattern ( (TypeTupleCar arg0@@52)) ))) (forall ((arg0@@53 T@U) ) (! (= (type (TypeTupleCdr arg0@@53)) ClassNameType) :qid |funType:TypeTupleCdr| :pattern ( (TypeTupleCdr arg0@@53)) ))))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (and (= (type a@@1) ClassNameType) (= (type b@@1) ClassNameType)) (and (= (TypeTupleCar (TypeTuple a@@1 b@@1)) a@@1) (= (TypeTupleCdr (TypeTuple a@@1 b@@1)) b@@1))) :qid |DafnyPre.298:15| :skolemid |392| :pattern ( (TypeTuple a@@1 b@@1)) )))
(assert (forall ((arg0@@54 T@U) ) (! (= (type (SetRef_to_SetBox arg0@@54)) (MapType0Type BoxType boolType)) :qid |funType:SetRef_to_SetBox| :pattern ( (SetRef_to_SetBox arg0@@54)) )))
(assert (forall ((s@@1 T@U) (bx@@29 T@U) ) (!  (=> (and (= (type s@@1) (MapType0Type refType boolType)) (= (type bx@@29) BoxType)) (and (=> (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@29)) (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@29)))) (=> (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@29))) (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@29))))) :qid |DafnyPre.307:15| :skolemid |393| :pattern ( (MapType0Select (SetRef_to_SetBox s@@1) bx@@29)) )))
(assert (= (type Tclass._System.object?) TyType))
(assert (forall ((s@@2 T@U) ) (!  (=> (= (type s@@2) (MapType0Type refType boolType)) ($Is (SetRef_to_SetBox s@@2) (TSet Tclass._System.object?))) :qid |DafnyPre.309:15| :skolemid |394| :pattern ( (SetRef_to_SetBox s@@2)) )))
(assert (= (Ctor DatatypeTypeType) 18))
(assert (forall ((d T@U) ) (!  (=> (= (type d) DatatypeTypeType) (= (BoxRank ($Box d)) (DtRank d))) :qid |DafnyPre.328:15| :skolemid |395| :pattern ( (BoxRank ($Box d))) )))
(assert (forall ((o T@U) ) (!  (=> (= (type o) BoxType) (<= 0 (|ORD#Offset| o))) :qid |DafnyPre.343:15| :skolemid |396| :pattern ( (|ORD#Offset| o)) )))
(assert (forall ((arg0@@55 Int) ) (! (= (type (|ORD#FromNat| arg0@@55)) BoxType) :qid |funType:ORD#FromNat| :pattern ( (|ORD#FromNat| arg0@@55)) )))
(assert (forall ((n@@0 Int) ) (!  (=> (<= 0 n@@0) (and (|ORD#IsNat| (|ORD#FromNat| n@@0)) (= (|ORD#Offset| (|ORD#FromNat| n@@0)) n@@0))) :qid |DafnyPre.349:15| :skolemid |397| :pattern ( (|ORD#FromNat| n@@0)) )))
(assert (forall ((o@@0 T@U) ) (!  (=> (and (= (type o@@0) BoxType) (|ORD#IsNat| o@@0)) (= o@@0 (|ORD#FromNat| (|ORD#Offset| o@@0)))) :qid |DafnyPre.351:15| :skolemid |398| :pattern ( (|ORD#Offset| o@@0)) :pattern ( (|ORD#IsNat| o@@0)) )))
(assert (forall ((o@@1 T@U) (p T@U) ) (!  (=> (and (= (type o@@1) BoxType) (= (type p) BoxType)) (and (and (and (=> (|ORD#Less| o@@1 p) (not (= o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (not (|ORD#IsNat| p))) (|ORD#Less| o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (|ORD#IsNat| p)) (and (=> (|ORD#Less| o@@1 p) (< (|ORD#Offset| o@@1) (|ORD#Offset| p))) (=> (< (|ORD#Offset| o@@1) (|ORD#Offset| p)) (|ORD#Less| o@@1 p))))) (=> (and (|ORD#Less| o@@1 p) (|ORD#IsNat| p)) (|ORD#IsNat| o@@1)))) :qid |DafnyPre.355:15| :skolemid |399| :pattern ( (|ORD#Less| o@@1 p)) )))
(assert (forall ((o@@2 T@U) (p@@0 T@U) ) (!  (=> (and (= (type o@@2) BoxType) (= (type p@@0) BoxType)) (or (or (|ORD#Less| o@@2 p@@0) (= o@@2 p@@0)) (|ORD#Less| p@@0 o@@2))) :qid |DafnyPre.361:15| :skolemid |400| :pattern ( (|ORD#Less| o@@2 p@@0) (|ORD#Less| p@@0 o@@2)) )))
(assert (forall ((o@@3 T@U) (p@@1 T@U) (r T@U) ) (!  (=> (and (and (and (= (type o@@3) BoxType) (= (type p@@1) BoxType)) (= (type r) BoxType)) (and (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r))) (|ORD#Less| o@@3 r)) :qid |DafnyPre.364:15| :skolemid |401| :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r)) :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| o@@3 r)) )))
(assert (forall ((o@@4 T@U) (p@@2 T@U) ) (!  (=> (and (= (type o@@4) BoxType) (= (type p@@2) BoxType)) (and (=> (|ORD#LessThanLimit| o@@4 p@@2) (|ORD#Less| o@@4 p@@2)) (=> (|ORD#Less| o@@4 p@@2) (|ORD#LessThanLimit| o@@4 p@@2)))) :qid |DafnyPre.371:15| :skolemid |402| :pattern ( (|ORD#LessThanLimit| o@@4 p@@2)) )))
(assert (forall ((arg0@@56 T@U) (arg1@@18 T@U) ) (! (= (type (|ORD#Plus| arg0@@56 arg1@@18)) BoxType) :qid |funType:ORD#Plus| :pattern ( (|ORD#Plus| arg0@@56 arg1@@18)) )))
(assert (forall ((o@@5 T@U) (p@@3 T@U) ) (!  (=> (and (= (type o@@5) BoxType) (= (type p@@3) BoxType)) (and (=> (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (and (|ORD#IsNat| o@@5) (|ORD#IsNat| p@@3))) (=> (|ORD#IsNat| p@@3) (and (and (=> (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (|ORD#IsNat| o@@5)) (=> (|ORD#IsNat| o@@5) (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)))) (= (|ORD#Offset| (|ORD#Plus| o@@5 p@@3)) (+ (|ORD#Offset| o@@5) (|ORD#Offset| p@@3))))))) :qid |DafnyPre.375:15| :skolemid |403| :pattern ( (|ORD#Plus| o@@5 p@@3)) )))
(assert (forall ((o@@6 T@U) (p@@4 T@U) ) (!  (=> (and (= (type o@@6) BoxType) (= (type p@@4) BoxType)) (and (or (= o@@6 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| o@@6 (|ORD#Plus| o@@6 p@@4))) (or (= p@@4 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| p@@4 (|ORD#Plus| o@@6 p@@4))))) :qid |DafnyPre.380:15| :skolemid |404| :pattern ( (|ORD#Plus| o@@6 p@@4)) )))
(assert (forall ((o@@7 T@U) (p@@5 T@U) ) (!  (=> (and (= (type o@@7) BoxType) (= (type p@@5) BoxType)) (and (=> (= o@@7 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) p@@5)) (=> (= p@@5 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) o@@7)))) :qid |DafnyPre.383:15| :skolemid |405| :pattern ( (|ORD#Plus| o@@7 p@@5)) )))
(assert (forall ((arg0@@57 T@U) (arg1@@19 T@U) ) (! (= (type (|ORD#Minus| arg0@@57 arg1@@19)) BoxType) :qid |funType:ORD#Minus| :pattern ( (|ORD#Minus| arg0@@57 arg1@@19)) )))
(assert (forall ((o@@8 T@U) (p@@6 T@U) ) (!  (=> (and (and (= (type o@@8) BoxType) (= (type p@@6) BoxType)) (and (|ORD#IsNat| p@@6) (<= (|ORD#Offset| p@@6) (|ORD#Offset| o@@8)))) (and (and (=> (|ORD#IsNat| (|ORD#Minus| o@@8 p@@6)) (|ORD#IsNat| o@@8)) (=> (|ORD#IsNat| o@@8) (|ORD#IsNat| (|ORD#Minus| o@@8 p@@6)))) (= (|ORD#Offset| (|ORD#Minus| o@@8 p@@6)) (- (|ORD#Offset| o@@8) (|ORD#Offset| p@@6))))) :qid |DafnyPre.388:15| :skolemid |406| :pattern ( (|ORD#Minus| o@@8 p@@6)) )))
(assert (forall ((o@@9 T@U) (p@@7 T@U) ) (!  (=> (and (and (= (type o@@9) BoxType) (= (type p@@7) BoxType)) (and (|ORD#IsNat| p@@7) (<= (|ORD#Offset| p@@7) (|ORD#Offset| o@@9)))) (or (and (= p@@7 (|ORD#FromNat| 0)) (= (|ORD#Minus| o@@9 p@@7) o@@9)) (and (not (= p@@7 (|ORD#FromNat| 0))) (|ORD#Less| (|ORD#Minus| o@@9 p@@7) o@@9)))) :qid |DafnyPre.392:15| :skolemid |407| :pattern ( (|ORD#Minus| o@@9 p@@7)) )))
(assert (forall ((o@@10 T@U) (m@@5 Int) (n@@1 Int) ) (!  (=> (= (type o@@10) BoxType) (=> (and (<= 0 m@@5) (<= 0 n@@1)) (= (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1)) (|ORD#Plus| o@@10 (|ORD#FromNat| (+ m@@5 n@@1)))))) :qid |DafnyPre.398:15| :skolemid |408| :pattern ( (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1))) )))
(assert (forall ((o@@11 T@U) (m@@6 Int) (n@@2 Int) ) (!  (=> (= (type o@@11) BoxType) (=> (and (and (<= 0 m@@6) (<= 0 n@@2)) (<= (+ m@@6 n@@2) (|ORD#Offset| o@@11))) (= (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2)) (|ORD#Minus| o@@11 (|ORD#FromNat| (+ m@@6 n@@2)))))) :qid |DafnyPre.403:15| :skolemid |409| :pattern ( (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2))) )))
(assert (forall ((o@@12 T@U) (m@@7 Int) (n@@3 Int) ) (!  (=> (= (type o@@12) BoxType) (=> (and (and (<= 0 m@@7) (<= 0 n@@3)) (<= n@@3 (+ (|ORD#Offset| o@@12) m@@7))) (and (=> (<= 0 (- m@@7 n@@3)) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Plus| o@@12 (|ORD#FromNat| (- m@@7 n@@3))))) (=> (<= (- m@@7 n@@3) 0) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Minus| o@@12 (|ORD#FromNat| (- n@@3 m@@7)))))))) :qid |DafnyPre.408:15| :skolemid |410| :pattern ( (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3))) )))
(assert (forall ((o@@13 T@U) (m@@8 Int) (n@@4 Int) ) (!  (=> (= (type o@@13) BoxType) (=> (and (and (<= 0 m@@8) (<= 0 n@@4)) (<= n@@4 (+ (|ORD#Offset| o@@13) m@@8))) (and (=> (<= 0 (- m@@8 n@@4)) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Minus| o@@13 (|ORD#FromNat| (- m@@8 n@@4))))) (=> (<= (- m@@8 n@@4) 0) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Plus| o@@13 (|ORD#FromNat| (- n@@4 m@@8)))))))) :qid |DafnyPre.414:15| :skolemid |411| :pattern ( (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4))) )))
(assert  (and (= (Ctor LayerTypeType) 19) (forall ((arg0@@58 T@U) (arg1@@20 T@U) ) (! (let ((A (MapType0TypeInv1 (type arg0@@58)))) (= (type (AtLayer arg0@@58 arg1@@20)) A)) :qid |funType:AtLayer| :pattern ( (AtLayer arg0@@58 arg1@@20)) ))))
(assert (forall ((f T@U) (ly T@U) ) (! (let ((A@@0 (MapType0TypeInv1 (type f)))) (=> (and (= (type f) (MapType0Type LayerTypeType A@@0)) (= (type ly) LayerTypeType)) (= (AtLayer f ly) (MapType0Select f ly)))) :qid |DafnyPre.438:18| :skolemid |412| :pattern ( (AtLayer f ly)) )))
(assert (forall ((arg0@@59 T@U) ) (! (= (type ($LS arg0@@59)) LayerTypeType) :qid |funType:$LS| :pattern ( ($LS arg0@@59)) )))
(assert (forall ((f@@0 T@U) (ly@@0 T@U) ) (! (let ((A@@1 (MapType0TypeInv1 (type f@@0)))) (=> (and (= (type f@@0) (MapType0Type LayerTypeType A@@1)) (= (type ly@@0) LayerTypeType)) (= (AtLayer f@@0 ($LS ly@@0)) (AtLayer f@@0 ly@@0)))) :qid |DafnyPre.439:18| :skolemid |413| :pattern ( (AtLayer f@@0 ($LS ly@@0))) )))
(assert (forall ((arg0@@60 Int) ) (! (= (type (IndexField arg0@@60)) (FieldType BoxType)) :qid |funType:IndexField| :pattern ( (IndexField arg0@@60)) )))
(assert (forall ((i@@3 Int) ) (! (= (FDim (IndexField i@@3)) 1) :qid |DafnyPre.450:15| :skolemid |414| :pattern ( (IndexField i@@3)) )))
(assert (forall ((i@@4 Int) ) (! (= (IndexField_Inverse (IndexField i@@4)) i@@4) :qid |DafnyPre.452:15| :skolemid |415| :pattern ( (IndexField i@@4)) )))
(assert (forall ((arg0@@61 T@U) (arg1@@21 Int) ) (! (= (type (MultiIndexField arg0@@61 arg1@@21)) (FieldType BoxType)) :qid |funType:MultiIndexField| :pattern ( (MultiIndexField arg0@@61 arg1@@21)) )))
(assert (forall ((f@@1 T@U) (i@@5 Int) ) (!  (=> (= (type f@@1) (FieldType BoxType)) (= (FDim (MultiIndexField f@@1 i@@5)) (+ (FDim f@@1) 1))) :qid |DafnyPre.455:15| :skolemid |416| :pattern ( (MultiIndexField f@@1 i@@5)) )))
(assert (forall ((arg0@@62 T@U) ) (! (let ((T@@3 (FieldTypeInv0 (type arg0@@62)))) (= (type (MultiIndexField_Inverse0 arg0@@62)) (FieldType T@@3))) :qid |funType:MultiIndexField_Inverse0| :pattern ( (MultiIndexField_Inverse0 arg0@@62)) )))
(assert (forall ((f@@2 T@U) (i@@6 Int) ) (!  (=> (= (type f@@2) (FieldType BoxType)) (and (= (MultiIndexField_Inverse0 (MultiIndexField f@@2 i@@6)) f@@2) (= (MultiIndexField_Inverse1 (MultiIndexField f@@2 i@@6)) i@@6))) :qid |DafnyPre.458:15| :skolemid |417| :pattern ( (MultiIndexField f@@2 i@@6)) )))
(assert  (and (and (forall ((alpha@@3 T@T) (arg0@@63 T@U) (arg1@@22 T@U) ) (! (= (type (FieldOfDecl alpha@@3 arg0@@63 arg1@@22)) (FieldType alpha@@3)) :qid |funType:FieldOfDecl| :pattern ( (FieldOfDecl alpha@@3 arg0@@63 arg1@@22)) )) (forall ((arg0@@64 T@U) ) (! (= (type (DeclType arg0@@64)) ClassNameType) :qid |funType:DeclType| :pattern ( (DeclType arg0@@64)) ))) (forall ((arg0@@65 T@U) ) (! (= (type (DeclName arg0@@65)) NameFamilyType) :qid |funType:DeclName| :pattern ( (DeclName arg0@@65)) ))))
(assert (forall ((cl T@U) (nm T@U) (T@@4 T@T) ) (!  (=> (and (= (type cl) ClassNameType) (= (type nm) NameFamilyType)) (and (= (DeclType (FieldOfDecl T@@4 cl nm)) cl) (= (DeclName (FieldOfDecl T@@4 cl nm)) nm))) :qid |DafnyPre.467:18| :skolemid |418| :pattern ( (FieldOfDecl T@@4 cl nm)) )))
(assert (forall ((h@@11 T@U) (k T@U) (v@@24 T@U) (t@@21 T@U) ) (!  (=> (and (and (and (and (= (type h@@11) (MapType0Type refType MapType1Type)) (= (type k) (MapType0Type refType MapType1Type))) (= (type t@@21) TyType)) ($HeapSucc h@@11 k)) ($IsAlloc v@@24 t@@21 h@@11)) ($IsAlloc v@@24 t@@21 k)) :qid |DafnyPre.480:17| :skolemid |419| :pattern ( ($HeapSucc h@@11 k) ($IsAlloc v@@24 t@@21 h@@11)) )))
(assert (forall ((h@@12 T@U) (k@@0 T@U) (bx@@30 T@U) (t@@22 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@12) (MapType0Type refType MapType1Type)) (= (type k@@0) (MapType0Type refType MapType1Type))) (= (type bx@@30) BoxType)) (= (type t@@22) TyType)) ($HeapSucc h@@12 k@@0)) ($IsAllocBox bx@@30 t@@22 h@@12)) ($IsAllocBox bx@@30 t@@22 k@@0)) :qid |DafnyPre.483:14| :skolemid |420| :pattern ( ($HeapSucc h@@12 k@@0) ($IsAllocBox bx@@30 t@@22 h@@12)) )))
(assert (= (FDim alloc) 0))
(assert (= (DeclName alloc) allocName))
(assert  (not ($IsGhostField alloc)))
(assert (forall ((o@@14 T@U) ) (!  (=> (= (type o@@14) refType) (<= 0 (_System.array.Length o@@14))) :qid |DafnyPre.500:15| :skolemid |421| :no-pattern (type o@@14) :no-pattern (U_2_int o@@14) :no-pattern (U_2_bool o@@14) )))
(assert (forall ((x@@13 Real) ) (! (= (q@Int x@@13) (to_int x@@13)) :qid |DafnyPre.506:14| :skolemid |422| :pattern ( (q@Int x@@13)) )))
(assert (forall ((x@@14 Int) ) (! (= (q@Real x@@14) (to_real x@@14)) :qid |DafnyPre.507:15| :skolemid |423| :pattern ( (q@Real x@@14)) )))
(assert (forall ((i@@7 Int) ) (! (= (q@Int (q@Real i@@7)) i@@7) :qid |DafnyPre.508:15| :skolemid |424| :pattern ( (q@Int (q@Real i@@7))) )))
(assert (= (type $OneHeap) (MapType0Type refType MapType1Type)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((h@@13 T@U) (r@@0 T@U) (f@@3 T@U) (x@@15 T@U) ) (! (let ((alpha@@4 (type x@@15))) (=> (and (and (and (= (type h@@13) (MapType0Type refType MapType1Type)) (= (type r@@0) refType)) (= (type f@@3) (FieldType alpha@@4))) ($IsGoodHeap (MapType0Store h@@13 r@@0 (MapType1Store (MapType0Select h@@13 r@@0) f@@3 x@@15)))) ($HeapSucc h@@13 (MapType0Store h@@13 r@@0 (MapType1Store (MapType0Select h@@13 r@@0) f@@3 x@@15))))) :qid |DafnyPre.530:22| :skolemid |425| :pattern ( (MapType0Store h@@13 r@@0 (MapType1Store (MapType0Select h@@13 r@@0) f@@3 x@@15))) )))
(assert (forall ((a@@2 T@U) (b@@2 T@U) (c T@U) ) (!  (=> (and (and (and (and (= (type a@@2) (MapType0Type refType MapType1Type)) (= (type b@@2) (MapType0Type refType MapType1Type))) (= (type c) (MapType0Type refType MapType1Type))) (not (= a@@2 c))) (and ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c))) ($HeapSucc a@@2 c)) :qid |DafnyPre.533:15| :skolemid |426| :pattern ( ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c)) )))
(assert (forall ((h@@14 T@U) (k@@1 T@U) ) (!  (=> (and (and (= (type h@@14) (MapType0Type refType MapType1Type)) (= (type k@@1) (MapType0Type refType MapType1Type))) ($HeapSucc h@@14 k@@1)) (forall ((o@@15 T@U) ) (!  (=> (and (= (type o@@15) refType) (U_2_bool (MapType1Select (MapType0Select h@@14 o@@15) alloc))) (U_2_bool (MapType1Select (MapType0Select k@@1 o@@15) alloc))) :qid |DafnyPre.536:30| :skolemid |427| :pattern ( (MapType1Select (MapType0Select k@@1 o@@15) alloc)) ))) :qid |DafnyPre.535:15| :skolemid |428| :pattern ( ($HeapSucc h@@14 k@@1)) )))
(assert (forall ((h@@15 T@U) (k@@2 T@U) ) (!  (=> (and (and (= (type h@@15) (MapType0Type refType MapType1Type)) (= (type k@@2) (MapType0Type refType MapType1Type))) ($HeapSuccGhost h@@15 k@@2)) (and ($HeapSucc h@@15 k@@2) (forall ((o@@16 T@U) (f@@4 T@U) ) (! (let ((alpha@@5 (FieldTypeInv0 (type f@@4)))) (=> (and (and (= (type o@@16) refType) (= (type f@@4) (FieldType alpha@@5))) (not ($IsGhostField f@@4))) (= (MapType1Select (MapType0Select h@@15 o@@16) f@@4) (MapType1Select (MapType0Select k@@2 o@@16) f@@4)))) :qid |DafnyPre.542:20| :skolemid |429| :pattern ( (MapType1Select (MapType0Select k@@2 o@@16) f@@4)) )))) :qid |DafnyPre.539:15| :skolemid |430| :pattern ( ($HeapSuccGhost h@@15 k@@2)) )))
(assert (forall ((s@@3 T@U) ) (! (let ((T@@5 (MapType0TypeInv0 (type s@@3)))) (=> (= (type s@@3) (MapType0Type T@@5 boolType)) (<= 0 (|Set#Card| s@@3)))) :qid |DafnyPre.600:18| :skolemid |435| :pattern ( (|Set#Card| s@@3)) )))
(assert (forall ((T@@6 T@T) ) (! (= (type (|Set#Empty| T@@6)) (MapType0Type T@@6 boolType)) :qid |funType:Set#Empty| :pattern ( (|Set#Empty| T@@6)) )))
(assert (forall ((o@@17 T@U) ) (! (let ((T@@7 (type o@@17))) (not (U_2_bool (MapType0Select (|Set#Empty| T@@7) o@@17)))) :qid |DafnyPre.603:18| :skolemid |436| :pattern ( (let ((T@@7 (type o@@17))) (MapType0Select (|Set#Empty| T@@7) o@@17))) )))
(assert (forall ((s@@4 T@U) ) (! (let ((T@@8 (MapType0TypeInv0 (type s@@4)))) (=> (= (type s@@4) (MapType0Type T@@8 boolType)) (and (and (=> (= (|Set#Card| s@@4) 0) (= s@@4 (|Set#Empty| T@@8))) (=> (= s@@4 (|Set#Empty| T@@8)) (= (|Set#Card| s@@4) 0))) (=> (not (= (|Set#Card| s@@4) 0)) (exists ((x@@16 T@U) ) (!  (and (= (type x@@16) T@@8) (U_2_bool (MapType0Select s@@4 x@@16))) :qid |DafnyPre.606:33| :skolemid |437| :no-pattern (type x@@16) :no-pattern (U_2_int x@@16) :no-pattern (U_2_bool x@@16) )))))) :qid |DafnyPre.604:18| :skolemid |438| :pattern ( (|Set#Card| s@@4)) )))
(assert (forall ((arg0@@66 T@U) ) (! (let ((T@@9 (type arg0@@66))) (= (type (|Set#Singleton| arg0@@66)) (MapType0Type T@@9 boolType))) :qid |funType:Set#Singleton| :pattern ( (|Set#Singleton| arg0@@66)) )))
(assert (forall ((r@@1 T@U) ) (! (U_2_bool (MapType0Select (|Set#Singleton| r@@1) r@@1)) :qid |DafnyPre.612:18| :skolemid |439| :pattern ( (|Set#Singleton| r@@1)) )))
(assert (forall ((r@@2 T@U) (o@@18 T@U) ) (! (let ((T@@10 (type r@@2))) (=> (= (type o@@18) T@@10) (and (=> (U_2_bool (MapType0Select (|Set#Singleton| r@@2) o@@18)) (= r@@2 o@@18)) (=> (= r@@2 o@@18) (U_2_bool (MapType0Select (|Set#Singleton| r@@2) o@@18)))))) :qid |DafnyPre.613:18| :skolemid |440| :pattern ( (MapType0Select (|Set#Singleton| r@@2) o@@18)) )))
(assert (forall ((r@@3 T@U) ) (! (= (|Set#Card| (|Set#Singleton| r@@3)) 1) :qid |DafnyPre.614:18| :skolemid |441| :pattern ( (|Set#Card| (|Set#Singleton| r@@3))) )))
(assert (forall ((arg0@@67 T@U) (arg1@@23 T@U) ) (! (let ((T@@11 (type arg1@@23))) (= (type (|Set#UnionOne| arg0@@67 arg1@@23)) (MapType0Type T@@11 boolType))) :qid |funType:Set#UnionOne| :pattern ( (|Set#UnionOne| arg0@@67 arg1@@23)) )))
(assert (forall ((a@@3 T@U) (x@@17 T@U) (o@@19 T@U) ) (! (let ((T@@12 (type x@@17))) (=> (and (= (type a@@3) (MapType0Type T@@12 boolType)) (= (type o@@19) T@@12)) (and (=> (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@17) o@@19)) (or (= o@@19 x@@17) (U_2_bool (MapType0Select a@@3 o@@19)))) (=> (or (= o@@19 x@@17) (U_2_bool (MapType0Select a@@3 o@@19))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@17) o@@19)))))) :qid |DafnyPre.617:18| :skolemid |442| :pattern ( (MapType0Select (|Set#UnionOne| a@@3 x@@17) o@@19)) )))
(assert (forall ((a@@4 T@U) (x@@18 T@U) ) (! (let ((T@@13 (type x@@18))) (=> (= (type a@@4) (MapType0Type T@@13 boolType)) (U_2_bool (MapType0Select (|Set#UnionOne| a@@4 x@@18) x@@18)))) :qid |DafnyPre.619:18| :skolemid |443| :pattern ( (|Set#UnionOne| a@@4 x@@18)) )))
(assert (forall ((a@@5 T@U) (x@@19 T@U) (y@@1 T@U) ) (! (let ((T@@14 (type x@@19))) (=> (and (and (= (type a@@5) (MapType0Type T@@14 boolType)) (= (type y@@1) T@@14)) (U_2_bool (MapType0Select a@@5 y@@1))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@5 x@@19) y@@1)))) :qid |DafnyPre.621:18| :skolemid |444| :pattern ( (|Set#UnionOne| a@@5 x@@19) (MapType0Select a@@5 y@@1)) )))
(assert (forall ((a@@6 T@U) (x@@20 T@U) ) (! (let ((T@@15 (type x@@20))) (=> (and (= (type a@@6) (MapType0Type T@@15 boolType)) (U_2_bool (MapType0Select a@@6 x@@20))) (= (|Set#Card| (|Set#UnionOne| a@@6 x@@20)) (|Set#Card| a@@6)))) :qid |DafnyPre.623:18| :skolemid |445| :pattern ( (|Set#Card| (|Set#UnionOne| a@@6 x@@20))) )))
(assert (forall ((a@@7 T@U) (x@@21 T@U) ) (! (let ((T@@16 (type x@@21))) (=> (and (= (type a@@7) (MapType0Type T@@16 boolType)) (not (U_2_bool (MapType0Select a@@7 x@@21)))) (= (|Set#Card| (|Set#UnionOne| a@@7 x@@21)) (+ (|Set#Card| a@@7) 1)))) :qid |DafnyPre.625:18| :skolemid |446| :pattern ( (|Set#Card| (|Set#UnionOne| a@@7 x@@21))) )))
(assert (forall ((arg0@@68 T@U) (arg1@@24 T@U) ) (! (let ((T@@17 (MapType0TypeInv0 (type arg0@@68)))) (= (type (|Set#Union| arg0@@68 arg1@@24)) (MapType0Type T@@17 boolType))) :qid |funType:Set#Union| :pattern ( (|Set#Union| arg0@@68 arg1@@24)) )))
(assert (forall ((a@@8 T@U) (b@@3 T@U) (o@@20 T@U) ) (! (let ((T@@18 (type o@@20))) (=> (and (= (type a@@8) (MapType0Type T@@18 boolType)) (= (type b@@3) (MapType0Type T@@18 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)) (or (U_2_bool (MapType0Select a@@8 o@@20)) (U_2_bool (MapType0Select b@@3 o@@20)))) (=> (or (U_2_bool (MapType0Select a@@8 o@@20)) (U_2_bool (MapType0Select b@@3 o@@20))) (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)))))) :qid |DafnyPre.629:18| :skolemid |447| :pattern ( (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)) )))
(assert (forall ((a@@9 T@U) (b@@4 T@U) (y@@2 T@U) ) (! (let ((T@@19 (type y@@2))) (=> (and (and (= (type a@@9) (MapType0Type T@@19 boolType)) (= (type b@@4) (MapType0Type T@@19 boolType))) (U_2_bool (MapType0Select a@@9 y@@2))) (U_2_bool (MapType0Select (|Set#Union| a@@9 b@@4) y@@2)))) :qid |DafnyPre.631:18| :skolemid |448| :pattern ( (|Set#Union| a@@9 b@@4) (MapType0Select a@@9 y@@2)) )))
(assert (forall ((a@@10 T@U) (b@@5 T@U) (y@@3 T@U) ) (! (let ((T@@20 (type y@@3))) (=> (and (and (= (type a@@10) (MapType0Type T@@20 boolType)) (= (type b@@5) (MapType0Type T@@20 boolType))) (U_2_bool (MapType0Select b@@5 y@@3))) (U_2_bool (MapType0Select (|Set#Union| a@@10 b@@5) y@@3)))) :qid |DafnyPre.633:18| :skolemid |449| :pattern ( (|Set#Union| a@@10 b@@5) (MapType0Select b@@5 y@@3)) )))
(assert (forall ((arg0@@69 T@U) (arg1@@25 T@U) ) (! (let ((T@@21 (MapType0TypeInv0 (type arg0@@69)))) (= (type (|Set#Difference| arg0@@69 arg1@@25)) (MapType0Type T@@21 boolType))) :qid |funType:Set#Difference| :pattern ( (|Set#Difference| arg0@@69 arg1@@25)) )))
(assert (forall ((a@@11 T@U) (b@@6 T@U) ) (! (let ((T@@22 (MapType0TypeInv0 (type a@@11)))) (=> (and (and (= (type a@@11) (MapType0Type T@@22 boolType)) (= (type b@@6) (MapType0Type T@@22 boolType))) (|Set#Disjoint| a@@11 b@@6)) (and (= (|Set#Difference| (|Set#Union| a@@11 b@@6) a@@11) b@@6) (= (|Set#Difference| (|Set#Union| a@@11 b@@6) b@@6) a@@11)))) :qid |DafnyPre.635:18| :skolemid |450| :pattern ( (|Set#Union| a@@11 b@@6)) )))
(assert (forall ((arg0@@70 T@U) (arg1@@26 T@U) ) (! (let ((T@@23 (MapType0TypeInv0 (type arg0@@70)))) (= (type (|Set#Intersection| arg0@@70 arg1@@26)) (MapType0Type T@@23 boolType))) :qid |funType:Set#Intersection| :pattern ( (|Set#Intersection| arg0@@70 arg1@@26)) )))
(assert (forall ((a@@12 T@U) (b@@7 T@U) (o@@21 T@U) ) (! (let ((T@@24 (type o@@21))) (=> (and (= (type a@@12) (MapType0Type T@@24 boolType)) (= (type b@@7) (MapType0Type T@@24 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)) (and (U_2_bool (MapType0Select a@@12 o@@21)) (U_2_bool (MapType0Select b@@7 o@@21)))) (=> (and (U_2_bool (MapType0Select a@@12 o@@21)) (U_2_bool (MapType0Select b@@7 o@@21))) (U_2_bool (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)))))) :qid |DafnyPre.645:18| :skolemid |451| :pattern ( (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)) )))
(assert (forall ((a@@13 T@U) (b@@8 T@U) ) (! (let ((T@@25 (MapType0TypeInv0 (type a@@13)))) (=> (and (= (type a@@13) (MapType0Type T@@25 boolType)) (= (type b@@8) (MapType0Type T@@25 boolType))) (= (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8) (|Set#Union| a@@13 b@@8)))) :qid |DafnyPre.648:18| :skolemid |452| :pattern ( (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8)) )))
(assert (forall ((a@@14 T@U) (b@@9 T@U) ) (! (let ((T@@26 (MapType0TypeInv0 (type a@@14)))) (=> (and (= (type a@@14) (MapType0Type T@@26 boolType)) (= (type b@@9) (MapType0Type T@@26 boolType))) (= (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9)) (|Set#Union| a@@14 b@@9)))) :qid |DafnyPre.650:18| :skolemid |453| :pattern ( (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9))) )))
(assert (forall ((a@@15 T@U) (b@@10 T@U) ) (! (let ((T@@27 (MapType0TypeInv0 (type a@@15)))) (=> (and (= (type a@@15) (MapType0Type T@@27 boolType)) (= (type b@@10) (MapType0Type T@@27 boolType))) (= (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10) (|Set#Intersection| a@@15 b@@10)))) :qid |DafnyPre.652:18| :skolemid |454| :pattern ( (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10)) )))
(assert (forall ((a@@16 T@U) (b@@11 T@U) ) (! (let ((T@@28 (MapType0TypeInv0 (type a@@16)))) (=> (and (= (type a@@16) (MapType0Type T@@28 boolType)) (= (type b@@11) (MapType0Type T@@28 boolType))) (= (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11)) (|Set#Intersection| a@@16 b@@11)))) :qid |DafnyPre.654:18| :skolemid |455| :pattern ( (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11))) )))
(assert (forall ((a@@17 T@U) (b@@12 T@U) ) (! (let ((T@@29 (MapType0TypeInv0 (type a@@17)))) (=> (and (= (type a@@17) (MapType0Type T@@29 boolType)) (= (type b@@12) (MapType0Type T@@29 boolType))) (= (+ (|Set#Card| (|Set#Union| a@@17 b@@12)) (|Set#Card| (|Set#Intersection| a@@17 b@@12))) (+ (|Set#Card| a@@17) (|Set#Card| b@@12))))) :qid |DafnyPre.656:18| :skolemid |456| :pattern ( (|Set#Card| (|Set#Union| a@@17 b@@12))) :pattern ( (|Set#Card| (|Set#Intersection| a@@17 b@@12))) )))
(assert (forall ((a@@18 T@U) (b@@13 T@U) (o@@22 T@U) ) (! (let ((T@@30 (type o@@22))) (=> (and (= (type a@@18) (MapType0Type T@@30 boolType)) (= (type b@@13) (MapType0Type T@@30 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)) (and (U_2_bool (MapType0Select a@@18 o@@22)) (not (U_2_bool (MapType0Select b@@13 o@@22))))) (=> (and (U_2_bool (MapType0Select a@@18 o@@22)) (not (U_2_bool (MapType0Select b@@13 o@@22)))) (U_2_bool (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)))))) :qid |DafnyPre.660:18| :skolemid |457| :pattern ( (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)) )))
(assert (forall ((a@@19 T@U) (b@@14 T@U) (y@@4 T@U) ) (! (let ((T@@31 (type y@@4))) (=> (and (and (= (type a@@19) (MapType0Type T@@31 boolType)) (= (type b@@14) (MapType0Type T@@31 boolType))) (U_2_bool (MapType0Select b@@14 y@@4))) (not (U_2_bool (MapType0Select (|Set#Difference| a@@19 b@@14) y@@4))))) :qid |DafnyPre.662:18| :skolemid |458| :pattern ( (|Set#Difference| a@@19 b@@14) (MapType0Select b@@14 y@@4)) )))
(assert (forall ((a@@20 T@U) (b@@15 T@U) ) (! (let ((T@@32 (MapType0TypeInv0 (type a@@20)))) (=> (and (= (type a@@20) (MapType0Type T@@32 boolType)) (= (type b@@15) (MapType0Type T@@32 boolType))) (and (= (+ (+ (|Set#Card| (|Set#Difference| a@@20 b@@15)) (|Set#Card| (|Set#Difference| b@@15 a@@20))) (|Set#Card| (|Set#Intersection| a@@20 b@@15))) (|Set#Card| (|Set#Union| a@@20 b@@15))) (= (|Set#Card| (|Set#Difference| a@@20 b@@15)) (- (|Set#Card| a@@20) (|Set#Card| (|Set#Intersection| a@@20 b@@15))))))) :qid |DafnyPre.664:18| :skolemid |459| :pattern ( (|Set#Card| (|Set#Difference| a@@20 b@@15))) )))
(assert (forall ((a@@21 T@U) (b@@16 T@U) ) (! (let ((T@@33 (MapType0TypeInv0 (type a@@21)))) (=> (and (= (type a@@21) (MapType0Type T@@33 boolType)) (= (type b@@16) (MapType0Type T@@33 boolType))) (and (=> (|Set#Subset| a@@21 b@@16) (forall ((o@@23 T@U) ) (!  (=> (and (= (type o@@23) T@@33) (U_2_bool (MapType0Select a@@21 o@@23))) (U_2_bool (MapType0Select b@@16 o@@23))) :qid |DafnyPre.673:32| :skolemid |460| :pattern ( (MapType0Select a@@21 o@@23)) :pattern ( (MapType0Select b@@16 o@@23)) ))) (=> (forall ((o@@24 T@U) ) (!  (=> (and (= (type o@@24) T@@33) (U_2_bool (MapType0Select a@@21 o@@24))) (U_2_bool (MapType0Select b@@16 o@@24))) :qid |DafnyPre.673:32| :skolemid |460| :pattern ( (MapType0Select a@@21 o@@24)) :pattern ( (MapType0Select b@@16 o@@24)) )) (|Set#Subset| a@@21 b@@16))))) :qid |DafnyPre.672:17| :skolemid |461| :pattern ( (|Set#Subset| a@@21 b@@16)) )))
(assert (forall ((a@@22 T@U) (b@@17 T@U) ) (! (let ((T@@34 (MapType0TypeInv0 (type a@@22)))) (=> (and (= (type a@@22) (MapType0Type T@@34 boolType)) (= (type b@@17) (MapType0Type T@@34 boolType))) (and (=> (|Set#Equal| a@@22 b@@17) (forall ((o@@25 T@U) ) (!  (=> (= (type o@@25) T@@34) (and (=> (U_2_bool (MapType0Select a@@22 o@@25)) (U_2_bool (MapType0Select b@@17 o@@25))) (=> (U_2_bool (MapType0Select b@@17 o@@25)) (U_2_bool (MapType0Select a@@22 o@@25))))) :qid |DafnyPre.681:31| :skolemid |462| :pattern ( (MapType0Select a@@22 o@@25)) :pattern ( (MapType0Select b@@17 o@@25)) ))) (=> (forall ((o@@26 T@U) ) (!  (=> (= (type o@@26) T@@34) (and (=> (U_2_bool (MapType0Select a@@22 o@@26)) (U_2_bool (MapType0Select b@@17 o@@26))) (=> (U_2_bool (MapType0Select b@@17 o@@26)) (U_2_bool (MapType0Select a@@22 o@@26))))) :qid |DafnyPre.681:31| :skolemid |462| :pattern ( (MapType0Select a@@22 o@@26)) :pattern ( (MapType0Select b@@17 o@@26)) )) (|Set#Equal| a@@22 b@@17))))) :qid |DafnyPre.680:17| :skolemid |463| :pattern ( (|Set#Equal| a@@22 b@@17)) )))
(assert (forall ((a@@23 T@U) (b@@18 T@U) ) (! (let ((T@@35 (MapType0TypeInv0 (type a@@23)))) (=> (and (and (= (type a@@23) (MapType0Type T@@35 boolType)) (= (type b@@18) (MapType0Type T@@35 boolType))) (|Set#Equal| a@@23 b@@18)) (= a@@23 b@@18))) :qid |DafnyPre.682:17| :skolemid |464| :pattern ( (|Set#Equal| a@@23 b@@18)) )))
(assert (forall ((a@@24 T@U) (b@@19 T@U) ) (! (let ((T@@36 (MapType0TypeInv0 (type a@@24)))) (=> (and (= (type a@@24) (MapType0Type T@@36 boolType)) (= (type b@@19) (MapType0Type T@@36 boolType))) (and (=> (|Set#Disjoint| a@@24 b@@19) (forall ((o@@27 T@U) ) (!  (=> (= (type o@@27) T@@36) (or (not (U_2_bool (MapType0Select a@@24 o@@27))) (not (U_2_bool (MapType0Select b@@19 o@@27))))) :qid |DafnyPre.687:34| :skolemid |465| :pattern ( (MapType0Select a@@24 o@@27)) :pattern ( (MapType0Select b@@19 o@@27)) ))) (=> (forall ((o@@28 T@U) ) (!  (=> (= (type o@@28) T@@36) (or (not (U_2_bool (MapType0Select a@@24 o@@28))) (not (U_2_bool (MapType0Select b@@19 o@@28))))) :qid |DafnyPre.687:34| :skolemid |465| :pattern ( (MapType0Select a@@24 o@@28)) :pattern ( (MapType0Select b@@19 o@@28)) )) (|Set#Disjoint| a@@24 b@@19))))) :qid |DafnyPre.686:18| :skolemid |466| :pattern ( (|Set#Disjoint| a@@24 b@@19)) )))
(assert (forall ((T@@37 T@T) ) (! (= (type (|ISet#Empty| T@@37)) (MapType0Type T@@37 boolType)) :qid |funType:ISet#Empty| :pattern ( (|ISet#Empty| T@@37)) )))
(assert (forall ((o@@29 T@U) ) (! (let ((T@@38 (type o@@29))) (not (U_2_bool (MapType0Select (|ISet#Empty| T@@38) o@@29)))) :qid |DafnyPre.696:18| :skolemid |467| :pattern ( (let ((T@@38 (type o@@29))) (MapType0Select (|ISet#Empty| T@@38) o@@29))) )))
(assert (forall ((arg0@@71 T@U) (arg1@@27 T@U) ) (! (let ((T@@39 (type arg1@@27))) (= (type (|ISet#UnionOne| arg0@@71 arg1@@27)) (MapType0Type T@@39 boolType))) :qid |funType:ISet#UnionOne| :pattern ( (|ISet#UnionOne| arg0@@71 arg1@@27)) )))
(assert (forall ((a@@25 T@U) (x@@22 T@U) (o@@30 T@U) ) (! (let ((T@@40 (type x@@22))) (=> (and (= (type a@@25) (MapType0Type T@@40 boolType)) (= (type o@@30) T@@40)) (and (=> (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@22) o@@30)) (or (= o@@30 x@@22) (U_2_bool (MapType0Select a@@25 o@@30)))) (=> (or (= o@@30 x@@22) (U_2_bool (MapType0Select a@@25 o@@30))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@22) o@@30)))))) :qid |DafnyPre.703:18| :skolemid |468| :pattern ( (MapType0Select (|ISet#UnionOne| a@@25 x@@22) o@@30)) )))
(assert (forall ((a@@26 T@U) (x@@23 T@U) ) (! (let ((T@@41 (type x@@23))) (=> (= (type a@@26) (MapType0Type T@@41 boolType)) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@26 x@@23) x@@23)))) :qid |DafnyPre.705:18| :skolemid |469| :pattern ( (|ISet#UnionOne| a@@26 x@@23)) )))
(assert (forall ((a@@27 T@U) (x@@24 T@U) (y@@5 T@U) ) (! (let ((T@@42 (type x@@24))) (=> (and (and (= (type a@@27) (MapType0Type T@@42 boolType)) (= (type y@@5) T@@42)) (U_2_bool (MapType0Select a@@27 y@@5))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@27 x@@24) y@@5)))) :qid |DafnyPre.707:18| :skolemid |470| :pattern ( (|ISet#UnionOne| a@@27 x@@24) (MapType0Select a@@27 y@@5)) )))
(assert (forall ((arg0@@72 T@U) (arg1@@28 T@U) ) (! (let ((T@@43 (MapType0TypeInv0 (type arg0@@72)))) (= (type (|ISet#Union| arg0@@72 arg1@@28)) (MapType0Type T@@43 boolType))) :qid |funType:ISet#Union| :pattern ( (|ISet#Union| arg0@@72 arg1@@28)) )))
(assert (forall ((a@@28 T@U) (b@@20 T@U) (o@@31 T@U) ) (! (let ((T@@44 (type o@@31))) (=> (and (= (type a@@28) (MapType0Type T@@44 boolType)) (= (type b@@20) (MapType0Type T@@44 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) o@@31)) (or (U_2_bool (MapType0Select a@@28 o@@31)) (U_2_bool (MapType0Select b@@20 o@@31)))) (=> (or (U_2_bool (MapType0Select a@@28 o@@31)) (U_2_bool (MapType0Select b@@20 o@@31))) (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) o@@31)))))) :qid |DafnyPre.711:18| :skolemid |471| :pattern ( (MapType0Select (|ISet#Union| a@@28 b@@20) o@@31)) )))
(assert (forall ((a@@29 T@U) (b@@21 T@U) (y@@6 T@U) ) (! (let ((T@@45 (type y@@6))) (=> (and (and (= (type a@@29) (MapType0Type T@@45 boolType)) (= (type b@@21) (MapType0Type T@@45 boolType))) (U_2_bool (MapType0Select a@@29 y@@6))) (U_2_bool (MapType0Select (|ISet#Union| a@@29 b@@21) y@@6)))) :qid |DafnyPre.713:18| :skolemid |472| :pattern ( (|ISet#Union| a@@29 b@@21) (MapType0Select a@@29 y@@6)) )))
(assert (forall ((a@@30 T@U) (b@@22 T@U) (y@@7 T@U) ) (! (let ((T@@46 (type y@@7))) (=> (and (and (= (type a@@30) (MapType0Type T@@46 boolType)) (= (type b@@22) (MapType0Type T@@46 boolType))) (U_2_bool (MapType0Select b@@22 y@@7))) (U_2_bool (MapType0Select (|ISet#Union| a@@30 b@@22) y@@7)))) :qid |DafnyPre.715:18| :skolemid |473| :pattern ( (|ISet#Union| a@@30 b@@22) (MapType0Select b@@22 y@@7)) )))
(assert (forall ((arg0@@73 T@U) (arg1@@29 T@U) ) (! (let ((T@@47 (MapType0TypeInv0 (type arg0@@73)))) (= (type (|ISet#Difference| arg0@@73 arg1@@29)) (MapType0Type T@@47 boolType))) :qid |funType:ISet#Difference| :pattern ( (|ISet#Difference| arg0@@73 arg1@@29)) )))
(assert (forall ((a@@31 T@U) (b@@23 T@U) ) (! (let ((T@@48 (MapType0TypeInv0 (type a@@31)))) (=> (and (and (= (type a@@31) (MapType0Type T@@48 boolType)) (= (type b@@23) (MapType0Type T@@48 boolType))) (|ISet#Disjoint| a@@31 b@@23)) (and (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) a@@31) b@@23) (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) b@@23) a@@31)))) :qid |DafnyPre.717:18| :skolemid |474| :pattern ( (|ISet#Union| a@@31 b@@23)) )))
(assert (forall ((arg0@@74 T@U) (arg1@@30 T@U) ) (! (let ((T@@49 (MapType0TypeInv0 (type arg0@@74)))) (= (type (|ISet#Intersection| arg0@@74 arg1@@30)) (MapType0Type T@@49 boolType))) :qid |funType:ISet#Intersection| :pattern ( (|ISet#Intersection| arg0@@74 arg1@@30)) )))
(assert (forall ((a@@32 T@U) (b@@24 T@U) (o@@32 T@U) ) (! (let ((T@@50 (type o@@32))) (=> (and (= (type a@@32) (MapType0Type T@@50 boolType)) (= (type b@@24) (MapType0Type T@@50 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@32)) (and (U_2_bool (MapType0Select a@@32 o@@32)) (U_2_bool (MapType0Select b@@24 o@@32)))) (=> (and (U_2_bool (MapType0Select a@@32 o@@32)) (U_2_bool (MapType0Select b@@24 o@@32))) (U_2_bool (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@32)))))) :qid |DafnyPre.727:18| :skolemid |475| :pattern ( (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@32)) )))
(assert (forall ((a@@33 T@U) (b@@25 T@U) ) (! (let ((T@@51 (MapType0TypeInv0 (type a@@33)))) (=> (and (= (type a@@33) (MapType0Type T@@51 boolType)) (= (type b@@25) (MapType0Type T@@51 boolType))) (= (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25) (|ISet#Union| a@@33 b@@25)))) :qid |DafnyPre.730:18| :skolemid |476| :pattern ( (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25)) )))
(assert (forall ((a@@34 T@U) (b@@26 T@U) ) (! (let ((T@@52 (MapType0TypeInv0 (type a@@34)))) (=> (and (= (type a@@34) (MapType0Type T@@52 boolType)) (= (type b@@26) (MapType0Type T@@52 boolType))) (= (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26)) (|ISet#Union| a@@34 b@@26)))) :qid |DafnyPre.732:18| :skolemid |477| :pattern ( (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26))) )))
(assert (forall ((a@@35 T@U) (b@@27 T@U) ) (! (let ((T@@53 (MapType0TypeInv0 (type a@@35)))) (=> (and (= (type a@@35) (MapType0Type T@@53 boolType)) (= (type b@@27) (MapType0Type T@@53 boolType))) (= (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27) (|ISet#Intersection| a@@35 b@@27)))) :qid |DafnyPre.734:18| :skolemid |478| :pattern ( (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27)) )))
(assert (forall ((a@@36 T@U) (b@@28 T@U) ) (! (let ((T@@54 (MapType0TypeInv0 (type a@@36)))) (=> (and (= (type a@@36) (MapType0Type T@@54 boolType)) (= (type b@@28) (MapType0Type T@@54 boolType))) (= (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28)) (|ISet#Intersection| a@@36 b@@28)))) :qid |DafnyPre.736:18| :skolemid |479| :pattern ( (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28))) )))
(assert (forall ((a@@37 T@U) (b@@29 T@U) (o@@33 T@U) ) (! (let ((T@@55 (type o@@33))) (=> (and (= (type a@@37) (MapType0Type T@@55 boolType)) (= (type b@@29) (MapType0Type T@@55 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@33)) (and (U_2_bool (MapType0Select a@@37 o@@33)) (not (U_2_bool (MapType0Select b@@29 o@@33))))) (=> (and (U_2_bool (MapType0Select a@@37 o@@33)) (not (U_2_bool (MapType0Select b@@29 o@@33)))) (U_2_bool (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@33)))))) :qid |DafnyPre.741:18| :skolemid |480| :pattern ( (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@33)) )))
(assert (forall ((a@@38 T@U) (b@@30 T@U) (y@@8 T@U) ) (! (let ((T@@56 (type y@@8))) (=> (and (and (= (type a@@38) (MapType0Type T@@56 boolType)) (= (type b@@30) (MapType0Type T@@56 boolType))) (U_2_bool (MapType0Select b@@30 y@@8))) (not (U_2_bool (MapType0Select (|ISet#Difference| a@@38 b@@30) y@@8))))) :qid |DafnyPre.743:18| :skolemid |481| :pattern ( (|ISet#Difference| a@@38 b@@30) (MapType0Select b@@30 y@@8)) )))
(assert (forall ((a@@39 T@U) (b@@31 T@U) ) (! (let ((T@@57 (MapType0TypeInv0 (type a@@39)))) (=> (and (= (type a@@39) (MapType0Type T@@57 boolType)) (= (type b@@31) (MapType0Type T@@57 boolType))) (and (=> (|ISet#Subset| a@@39 b@@31) (forall ((o@@34 T@U) ) (!  (=> (and (= (type o@@34) T@@57) (U_2_bool (MapType0Select a@@39 o@@34))) (U_2_bool (MapType0Select b@@31 o@@34))) :qid |DafnyPre.748:33| :skolemid |482| :pattern ( (MapType0Select a@@39 o@@34)) :pattern ( (MapType0Select b@@31 o@@34)) ))) (=> (forall ((o@@35 T@U) ) (!  (=> (and (= (type o@@35) T@@57) (U_2_bool (MapType0Select a@@39 o@@35))) (U_2_bool (MapType0Select b@@31 o@@35))) :qid |DafnyPre.748:33| :skolemid |482| :pattern ( (MapType0Select a@@39 o@@35)) :pattern ( (MapType0Select b@@31 o@@35)) )) (|ISet#Subset| a@@39 b@@31))))) :qid |DafnyPre.747:17| :skolemid |483| :pattern ( (|ISet#Subset| a@@39 b@@31)) )))
(assert (forall ((a@@40 T@U) (b@@32 T@U) ) (! (let ((T@@58 (MapType0TypeInv0 (type a@@40)))) (=> (and (= (type a@@40) (MapType0Type T@@58 boolType)) (= (type b@@32) (MapType0Type T@@58 boolType))) (and (=> (|ISet#Equal| a@@40 b@@32) (forall ((o@@36 T@U) ) (!  (=> (= (type o@@36) T@@58) (and (=> (U_2_bool (MapType0Select a@@40 o@@36)) (U_2_bool (MapType0Select b@@32 o@@36))) (=> (U_2_bool (MapType0Select b@@32 o@@36)) (U_2_bool (MapType0Select a@@40 o@@36))))) :qid |DafnyPre.756:32| :skolemid |484| :pattern ( (MapType0Select a@@40 o@@36)) :pattern ( (MapType0Select b@@32 o@@36)) ))) (=> (forall ((o@@37 T@U) ) (!  (=> (= (type o@@37) T@@58) (and (=> (U_2_bool (MapType0Select a@@40 o@@37)) (U_2_bool (MapType0Select b@@32 o@@37))) (=> (U_2_bool (MapType0Select b@@32 o@@37)) (U_2_bool (MapType0Select a@@40 o@@37))))) :qid |DafnyPre.756:32| :skolemid |484| :pattern ( (MapType0Select a@@40 o@@37)) :pattern ( (MapType0Select b@@32 o@@37)) )) (|ISet#Equal| a@@40 b@@32))))) :qid |DafnyPre.755:17| :skolemid |485| :pattern ( (|ISet#Equal| a@@40 b@@32)) )))
(assert (forall ((a@@41 T@U) (b@@33 T@U) ) (! (let ((T@@59 (MapType0TypeInv0 (type a@@41)))) (=> (and (and (= (type a@@41) (MapType0Type T@@59 boolType)) (= (type b@@33) (MapType0Type T@@59 boolType))) (|ISet#Equal| a@@41 b@@33)) (= a@@41 b@@33))) :qid |DafnyPre.757:17| :skolemid |486| :pattern ( (|ISet#Equal| a@@41 b@@33)) )))
(assert (forall ((a@@42 T@U) (b@@34 T@U) ) (! (let ((T@@60 (MapType0TypeInv0 (type a@@42)))) (=> (and (= (type a@@42) (MapType0Type T@@60 boolType)) (= (type b@@34) (MapType0Type T@@60 boolType))) (and (=> (|ISet#Disjoint| a@@42 b@@34) (forall ((o@@38 T@U) ) (!  (=> (= (type o@@38) T@@60) (or (not (U_2_bool (MapType0Select a@@42 o@@38))) (not (U_2_bool (MapType0Select b@@34 o@@38))))) :qid |DafnyPre.762:35| :skolemid |487| :pattern ( (MapType0Select a@@42 o@@38)) :pattern ( (MapType0Select b@@34 o@@38)) ))) (=> (forall ((o@@39 T@U) ) (!  (=> (= (type o@@39) T@@60) (or (not (U_2_bool (MapType0Select a@@42 o@@39))) (not (U_2_bool (MapType0Select b@@34 o@@39))))) :qid |DafnyPre.762:35| :skolemid |487| :pattern ( (MapType0Select a@@42 o@@39)) :pattern ( (MapType0Select b@@34 o@@39)) )) (|ISet#Disjoint| a@@42 b@@34))))) :qid |DafnyPre.761:18| :skolemid |488| :pattern ( (|ISet#Disjoint| a@@42 b@@34)) )))
(assert (forall ((a@@43 Int) (b@@35 Int) ) (!  (and (=> (<= a@@43 b@@35) (= (|Math#min| a@@43 b@@35) a@@43)) (=> (= (|Math#min| a@@43 b@@35) a@@43) (<= a@@43 b@@35))) :qid |DafnyPre.769:15| :skolemid |489| :pattern ( (|Math#min| a@@43 b@@35)) )))
(assert (forall ((a@@44 Int) (b@@36 Int) ) (!  (and (=> (<= b@@36 a@@44) (= (|Math#min| a@@44 b@@36) b@@36)) (=> (= (|Math#min| a@@44 b@@36) b@@36) (<= b@@36 a@@44))) :qid |DafnyPre.770:15| :skolemid |490| :pattern ( (|Math#min| a@@44 b@@36)) )))
(assert (forall ((a@@45 Int) (b@@37 Int) ) (!  (or (= (|Math#min| a@@45 b@@37) a@@45) (= (|Math#min| a@@45 b@@37) b@@37)) :qid |DafnyPre.771:15| :skolemid |491| :pattern ( (|Math#min| a@@45 b@@37)) )))
(assert (forall ((a@@46 Int) ) (!  (=> (<= 0 a@@46) (= (|Math#clip| a@@46) a@@46)) :qid |DafnyPre.774:15| :skolemid |492| :pattern ( (|Math#clip| a@@46)) )))
(assert (forall ((a@@47 Int) ) (!  (=> (< a@@47 0) (= (|Math#clip| a@@47) 0)) :qid |DafnyPre.775:15| :skolemid |493| :pattern ( (|Math#clip| a@@47)) )))
(assert (forall ((ms T@U) ) (! (let ((T@@61 (MapType0TypeInv0 (type ms)))) (=> (= (type ms) (MapType0Type T@@61 intType)) (and (=> ($IsGoodMultiSet ms) (forall ((bx@@31 T@U) ) (!  (=> (= (type bx@@31) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@31))) (<= (U_2_int (MapType0Select ms bx@@31)) (|MultiSet#Card| ms)))) :qid |DafnyPre.783:11| :skolemid |494| :pattern ( (MapType0Select ms bx@@31)) ))) (=> (forall ((bx@@32 T@U) ) (!  (=> (= (type bx@@32) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@32))) (<= (U_2_int (MapType0Select ms bx@@32)) (|MultiSet#Card| ms)))) :qid |DafnyPre.783:11| :skolemid |494| :pattern ( (MapType0Select ms bx@@32)) )) ($IsGoodMultiSet ms))))) :qid |DafnyPre.781:18| :skolemid |495| :pattern ( ($IsGoodMultiSet ms)) )))
(assert (forall ((s@@5 T@U) ) (! (let ((T@@62 (MapType0TypeInv0 (type s@@5)))) (=> (= (type s@@5) (MapType0Type T@@62 intType)) (<= 0 (|MultiSet#Card| s@@5)))) :qid |DafnyPre.786:18| :skolemid |496| :pattern ( (|MultiSet#Card| s@@5)) )))
(assert (forall ((s@@6 T@U) (x@@25 T@U) (n@@5 T@U) ) (! (let ((T@@63 (type x@@25))) (=> (and (and (= (type s@@6) (MapType0Type T@@63 intType)) (= (type n@@5) intType)) (<= 0 (U_2_int n@@5))) (= (|MultiSet#Card| (MapType0Store s@@6 x@@25 n@@5)) (+ (- (|MultiSet#Card| s@@6) (U_2_int (MapType0Select s@@6 x@@25))) (U_2_int n@@5))))) :qid |DafnyPre.787:18| :skolemid |497| :pattern ( (|MultiSet#Card| (MapType0Store s@@6 x@@25 n@@5))) )))
(assert (forall ((T@@64 T@T) ) (! (= (type (|MultiSet#Empty| T@@64)) (MapType0Type T@@64 intType)) :qid |funType:MultiSet#Empty| :pattern ( (|MultiSet#Empty| T@@64)) )))
(assert (forall ((o@@40 T@U) ) (! (let ((T@@65 (type o@@40))) (= (U_2_int (MapType0Select (|MultiSet#Empty| T@@65) o@@40)) 0)) :qid |DafnyPre.791:18| :skolemid |498| :pattern ( (let ((T@@65 (type o@@40))) (MapType0Select (|MultiSet#Empty| T@@65) o@@40))) )))
(assert (forall ((s@@7 T@U) ) (! (let ((T@@66 (MapType0TypeInv0 (type s@@7)))) (=> (= (type s@@7) (MapType0Type T@@66 intType)) (and (and (=> (= (|MultiSet#Card| s@@7) 0) (= s@@7 (|MultiSet#Empty| T@@66))) (=> (= s@@7 (|MultiSet#Empty| T@@66)) (= (|MultiSet#Card| s@@7) 0))) (=> (not (= (|MultiSet#Card| s@@7) 0)) (exists ((x@@26 T@U) ) (!  (and (= (type x@@26) T@@66) (< 0 (U_2_int (MapType0Select s@@7 x@@26)))) :qid |DafnyPre.794:38| :skolemid |499| :no-pattern (type x@@26) :no-pattern (U_2_int x@@26) :no-pattern (U_2_bool x@@26) )))))) :qid |DafnyPre.792:18| :skolemid |500| :pattern ( (|MultiSet#Card| s@@7)) )))
(assert (forall ((arg0@@75 T@U) ) (! (let ((T@@67 (type arg0@@75))) (= (type (|MultiSet#Singleton| arg0@@75)) (MapType0Type T@@67 intType))) :qid |funType:MultiSet#Singleton| :pattern ( (|MultiSet#Singleton| arg0@@75)) )))
(assert (forall ((r@@4 T@U) (o@@41 T@U) ) (! (let ((T@@68 (type r@@4))) (=> (= (type o@@41) T@@68) (and (and (=> (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 1) (= r@@4 o@@41)) (=> (= r@@4 o@@41) (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 1))) (and (=> (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 0) (not (= r@@4 o@@41))) (=> (not (= r@@4 o@@41)) (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 0)))))) :qid |DafnyPre.797:18| :skolemid |501| :pattern ( (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) )))
(assert (forall ((arg0@@76 T@U) (arg1@@31 T@U) ) (! (let ((T@@69 (type arg1@@31))) (= (type (|MultiSet#UnionOne| arg0@@76 arg1@@31)) (MapType0Type T@@69 intType))) :qid |funType:MultiSet#UnionOne| :pattern ( (|MultiSet#UnionOne| arg0@@76 arg1@@31)) )))
(assert (forall ((r@@5 T@U) ) (! (let ((T@@70 (type r@@5))) (= (|MultiSet#Singleton| r@@5) (|MultiSet#UnionOne| (|MultiSet#Empty| T@@70) r@@5))) :qid |DafnyPre.799:18| :skolemid |502| :pattern ( (|MultiSet#Singleton| r@@5)) )))
(assert (forall ((a@@48 T@U) (x@@27 T@U) (o@@42 T@U) ) (! (let ((T@@71 (type x@@27))) (=> (and (= (type a@@48) (MapType0Type T@@71 intType)) (= (type o@@42) T@@71)) (and (=> (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@27) o@@42))) (or (= o@@42 x@@27) (< 0 (U_2_int (MapType0Select a@@48 o@@42))))) (=> (or (= o@@42 x@@27) (< 0 (U_2_int (MapType0Select a@@48 o@@42)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@27) o@@42))))))) :qid |DafnyPre.803:18| :skolemid |503| :pattern ( (MapType0Select (|MultiSet#UnionOne| a@@48 x@@27) o@@42)) )))
(assert (forall ((a@@49 T@U) (x@@28 T@U) ) (! (let ((T@@72 (type x@@28))) (=> (= (type a@@49) (MapType0Type T@@72 intType)) (= (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@49 x@@28) x@@28)) (+ (U_2_int (MapType0Select a@@49 x@@28)) 1)))) :qid |DafnyPre.806:18| :skolemid |504| :pattern ( (|MultiSet#UnionOne| a@@49 x@@28)) )))
(assert (forall ((a@@50 T@U) (x@@29 T@U) (y@@9 T@U) ) (! (let ((T@@73 (type x@@29))) (=> (and (and (= (type a@@50) (MapType0Type T@@73 intType)) (= (type y@@9) T@@73)) (< 0 (U_2_int (MapType0Select a@@50 y@@9)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@50 x@@29) y@@9))))) :qid |DafnyPre.809:18| :skolemid |505| :pattern ( (|MultiSet#UnionOne| a@@50 x@@29) (MapType0Select a@@50 y@@9)) )))
(assert (forall ((a@@51 T@U) (x@@30 T@U) (y@@10 T@U) ) (! (let ((T@@74 (type x@@30))) (=> (and (and (= (type a@@51) (MapType0Type T@@74 intType)) (= (type y@@10) T@@74)) (not (= x@@30 y@@10))) (= (U_2_int (MapType0Select a@@51 y@@10)) (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@51 x@@30) y@@10))))) :qid |DafnyPre.812:18| :skolemid |506| :pattern ( (|MultiSet#UnionOne| a@@51 x@@30) (MapType0Select a@@51 y@@10)) )))
(assert (forall ((a@@52 T@U) (x@@31 T@U) ) (! (let ((T@@75 (type x@@31))) (=> (= (type a@@52) (MapType0Type T@@75 intType)) (= (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@31)) (+ (|MultiSet#Card| a@@52) 1)))) :qid |DafnyPre.814:18| :skolemid |507| :pattern ( (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@31))) )))
(assert (forall ((arg0@@77 T@U) (arg1@@32 T@U) ) (! (let ((T@@76 (MapType0TypeInv0 (type arg0@@77)))) (= (type (|MultiSet#Union| arg0@@77 arg1@@32)) (MapType0Type T@@76 intType))) :qid |funType:MultiSet#Union| :pattern ( (|MultiSet#Union| arg0@@77 arg1@@32)) )))
(assert (forall ((a@@53 T@U) (b@@38 T@U) (o@@43 T@U) ) (! (let ((T@@77 (type o@@43))) (=> (and (= (type a@@53) (MapType0Type T@@77 intType)) (= (type b@@38) (MapType0Type T@@77 intType))) (= (U_2_int (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@43)) (+ (U_2_int (MapType0Select a@@53 o@@43)) (U_2_int (MapType0Select b@@38 o@@43)))))) :qid |DafnyPre.820:18| :skolemid |508| :pattern ( (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@43)) )))
(assert (forall ((a@@54 T@U) (b@@39 T@U) ) (! (let ((T@@78 (MapType0TypeInv0 (type a@@54)))) (=> (and (= (type a@@54) (MapType0Type T@@78 intType)) (= (type b@@39) (MapType0Type T@@78 intType))) (= (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39)) (+ (|MultiSet#Card| a@@54) (|MultiSet#Card| b@@39))))) :qid |DafnyPre.822:18| :skolemid |509| :pattern ( (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39))) )))
(assert (forall ((arg0@@78 T@U) (arg1@@33 T@U) ) (! (let ((T@@79 (MapType0TypeInv0 (type arg0@@78)))) (= (type (|MultiSet#Intersection| arg0@@78 arg1@@33)) (MapType0Type T@@79 intType))) :qid |funType:MultiSet#Intersection| :pattern ( (|MultiSet#Intersection| arg0@@78 arg1@@33)) )))
(assert (forall ((a@@55 T@U) (b@@40 T@U) (o@@44 T@U) ) (! (let ((T@@80 (type o@@44))) (=> (and (= (type a@@55) (MapType0Type T@@80 intType)) (= (type b@@40) (MapType0Type T@@80 intType))) (= (U_2_int (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@44)) (|Math#min| (U_2_int (MapType0Select a@@55 o@@44)) (U_2_int (MapType0Select b@@40 o@@44)))))) :qid |DafnyPre.826:18| :skolemid |510| :pattern ( (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@44)) )))
(assert (forall ((a@@56 T@U) (b@@41 T@U) ) (! (let ((T@@81 (MapType0TypeInv0 (type a@@56)))) (=> (and (= (type a@@56) (MapType0Type T@@81 intType)) (= (type b@@41) (MapType0Type T@@81 intType))) (= (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41) (|MultiSet#Intersection| a@@56 b@@41)))) :qid |DafnyPre.830:18| :skolemid |511| :pattern ( (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41)) )))
(assert (forall ((a@@57 T@U) (b@@42 T@U) ) (! (let ((T@@82 (MapType0TypeInv0 (type a@@57)))) (=> (and (= (type a@@57) (MapType0Type T@@82 intType)) (= (type b@@42) (MapType0Type T@@82 intType))) (= (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42)) (|MultiSet#Intersection| a@@57 b@@42)))) :qid |DafnyPre.832:18| :skolemid |512| :pattern ( (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42))) )))
(assert (forall ((arg0@@79 T@U) (arg1@@34 T@U) ) (! (let ((T@@83 (MapType0TypeInv0 (type arg0@@79)))) (= (type (|MultiSet#Difference| arg0@@79 arg1@@34)) (MapType0Type T@@83 intType))) :qid |funType:MultiSet#Difference| :pattern ( (|MultiSet#Difference| arg0@@79 arg1@@34)) )))
(assert (forall ((a@@58 T@U) (b@@43 T@U) (o@@45 T@U) ) (! (let ((T@@84 (type o@@45))) (=> (and (= (type a@@58) (MapType0Type T@@84 intType)) (= (type b@@43) (MapType0Type T@@84 intType))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@45)) (|Math#clip| (- (U_2_int (MapType0Select a@@58 o@@45)) (U_2_int (MapType0Select b@@43 o@@45))))))) :qid |DafnyPre.837:18| :skolemid |513| :pattern ( (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@45)) )))
(assert (forall ((a@@59 T@U) (b@@44 T@U) (y@@11 T@U) ) (! (let ((T@@85 (type y@@11))) (=> (and (and (= (type a@@59) (MapType0Type T@@85 intType)) (= (type b@@44) (MapType0Type T@@85 intType))) (<= (U_2_int (MapType0Select a@@59 y@@11)) (U_2_int (MapType0Select b@@44 y@@11)))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@59 b@@44) y@@11)) 0))) :qid |DafnyPre.839:18| :skolemid |514| :pattern ( (|MultiSet#Difference| a@@59 b@@44) (MapType0Select b@@44 y@@11) (MapType0Select a@@59 y@@11)) )))
(assert (forall ((a@@60 T@U) (b@@45 T@U) ) (! (let ((T@@86 (MapType0TypeInv0 (type a@@60)))) (=> (and (= (type a@@60) (MapType0Type T@@86 intType)) (= (type b@@45) (MapType0Type T@@86 intType))) (and (= (+ (+ (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (|MultiSet#Card| (|MultiSet#Difference| b@@45 a@@60))) (* 2 (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45)))) (|MultiSet#Card| (|MultiSet#Union| a@@60 b@@45))) (= (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (- (|MultiSet#Card| a@@60) (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45))))))) :qid |DafnyPre.841:18| :skolemid |515| :pattern ( (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45))) )))
(assert (forall ((a@@61 T@U) (b@@46 T@U) ) (! (let ((T@@87 (MapType0TypeInv0 (type a@@61)))) (=> (and (= (type a@@61) (MapType0Type T@@87 intType)) (= (type b@@46) (MapType0Type T@@87 intType))) (and (=> (|MultiSet#Subset| a@@61 b@@46) (forall ((o@@46 T@U) ) (!  (=> (= (type o@@46) T@@87) (<= (U_2_int (MapType0Select a@@61 o@@46)) (U_2_int (MapType0Select b@@46 o@@46)))) :qid |DafnyPre.851:37| :skolemid |516| :pattern ( (MapType0Select a@@61 o@@46)) :pattern ( (MapType0Select b@@46 o@@46)) ))) (=> (forall ((o@@47 T@U) ) (!  (=> (= (type o@@47) T@@87) (<= (U_2_int (MapType0Select a@@61 o@@47)) (U_2_int (MapType0Select b@@46 o@@47)))) :qid |DafnyPre.851:37| :skolemid |516| :pattern ( (MapType0Select a@@61 o@@47)) :pattern ( (MapType0Select b@@46 o@@47)) )) (|MultiSet#Subset| a@@61 b@@46))))) :qid |DafnyPre.850:17| :skolemid |517| :pattern ( (|MultiSet#Subset| a@@61 b@@46)) )))
(assert (forall ((a@@62 T@U) (b@@47 T@U) ) (! (let ((T@@88 (MapType0TypeInv0 (type a@@62)))) (=> (and (= (type a@@62) (MapType0Type T@@88 intType)) (= (type b@@47) (MapType0Type T@@88 intType))) (and (=> (|MultiSet#Equal| a@@62 b@@47) (forall ((o@@48 T@U) ) (!  (=> (= (type o@@48) T@@88) (= (U_2_int (MapType0Select a@@62 o@@48)) (U_2_int (MapType0Select b@@47 o@@48)))) :qid |DafnyPre.855:36| :skolemid |518| :pattern ( (MapType0Select a@@62 o@@48)) :pattern ( (MapType0Select b@@47 o@@48)) ))) (=> (forall ((o@@49 T@U) ) (!  (=> (= (type o@@49) T@@88) (= (U_2_int (MapType0Select a@@62 o@@49)) (U_2_int (MapType0Select b@@47 o@@49)))) :qid |DafnyPre.855:36| :skolemid |518| :pattern ( (MapType0Select a@@62 o@@49)) :pattern ( (MapType0Select b@@47 o@@49)) )) (|MultiSet#Equal| a@@62 b@@47))))) :qid |DafnyPre.854:17| :skolemid |519| :pattern ( (|MultiSet#Equal| a@@62 b@@47)) )))
(assert (forall ((a@@63 T@U) (b@@48 T@U) ) (! (let ((T@@89 (MapType0TypeInv0 (type a@@63)))) (=> (and (and (= (type a@@63) (MapType0Type T@@89 intType)) (= (type b@@48) (MapType0Type T@@89 intType))) (|MultiSet#Equal| a@@63 b@@48)) (= a@@63 b@@48))) :qid |DafnyPre.857:17| :skolemid |520| :pattern ( (|MultiSet#Equal| a@@63 b@@48)) )))
(assert (forall ((a@@64 T@U) (b@@49 T@U) ) (! (let ((T@@90 (MapType0TypeInv0 (type a@@64)))) (=> (and (= (type a@@64) (MapType0Type T@@90 intType)) (= (type b@@49) (MapType0Type T@@90 intType))) (and (=> (|MultiSet#Disjoint| a@@64 b@@49) (forall ((o@@50 T@U) ) (!  (=> (= (type o@@50) T@@90) (or (= (U_2_int (MapType0Select a@@64 o@@50)) 0) (= (U_2_int (MapType0Select b@@49 o@@50)) 0))) :qid |DafnyPre.862:39| :skolemid |521| :pattern ( (MapType0Select a@@64 o@@50)) :pattern ( (MapType0Select b@@49 o@@50)) ))) (=> (forall ((o@@51 T@U) ) (!  (=> (= (type o@@51) T@@90) (or (= (U_2_int (MapType0Select a@@64 o@@51)) 0) (= (U_2_int (MapType0Select b@@49 o@@51)) 0))) :qid |DafnyPre.862:39| :skolemid |521| :pattern ( (MapType0Select a@@64 o@@51)) :pattern ( (MapType0Select b@@49 o@@51)) )) (|MultiSet#Disjoint| a@@64 b@@49))))) :qid |DafnyPre.861:18| :skolemid |522| :pattern ( (|MultiSet#Disjoint| a@@64 b@@49)) )))
(assert (forall ((arg0@@80 T@U) ) (! (let ((T@@91 (MapType0TypeInv0 (type arg0@@80)))) (= (type (|MultiSet#FromSet| arg0@@80)) (MapType0Type T@@91 intType))) :qid |funType:MultiSet#FromSet| :pattern ( (|MultiSet#FromSet| arg0@@80)) )))
(assert (forall ((s@@8 T@U) (a@@65 T@U) ) (! (let ((T@@92 (type a@@65))) (=> (= (type s@@8) (MapType0Type T@@92 boolType)) (and (and (=> (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 0) (not (U_2_bool (MapType0Select s@@8 a@@65)))) (=> (not (U_2_bool (MapType0Select s@@8 a@@65))) (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 0))) (and (=> (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 1) (U_2_bool (MapType0Select s@@8 a@@65))) (=> (U_2_bool (MapType0Select s@@8 a@@65)) (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 1)))))) :qid |DafnyPre.866:18| :skolemid |523| :pattern ( (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) )))
(assert (forall ((s@@9 T@U) ) (! (let ((T@@93 (MapType0TypeInv0 (type s@@9)))) (=> (= (type s@@9) (MapType0Type T@@93 boolType)) (= (|MultiSet#Card| (|MultiSet#FromSet| s@@9)) (|Set#Card| s@@9)))) :qid |DafnyPre.869:18| :skolemid |524| :pattern ( (|MultiSet#Card| (|MultiSet#FromSet| s@@9))) )))
(assert (forall ((arg0@@81 T@U) ) (! (let ((T@@94 (SeqTypeInv0 (type arg0@@81)))) (= (type (|MultiSet#FromSeq| arg0@@81)) (MapType0Type T@@94 intType))) :qid |funType:MultiSet#FromSeq| :pattern ( (|MultiSet#FromSeq| arg0@@81)) )))
(assert (forall ((s@@10 T@U) ) (! (let ((T@@95 (SeqTypeInv0 (type s@@10)))) (=> (= (type s@@10) (SeqType T@@95)) ($IsGoodMultiSet (|MultiSet#FromSeq| s@@10)))) :qid |DafnyPre.875:18| :skolemid |525| :pattern ( (|MultiSet#FromSeq| s@@10)) )))
(assert (forall ((s@@11 T@U) ) (! (let ((T@@96 (SeqTypeInv0 (type s@@11)))) (=> (= (type s@@11) (SeqType T@@96)) (= (|MultiSet#Card| (|MultiSet#FromSeq| s@@11)) (|Seq#Length| s@@11)))) :qid |DafnyPre.877:18| :skolemid |526| :pattern ( (|MultiSet#Card| (|MultiSet#FromSeq| s@@11))) )))
(assert (forall ((arg0@@82 T@U) (arg1@@35 T@U) ) (! (let ((T@@97 (type arg1@@35))) (= (type (|Seq#Build| arg0@@82 arg1@@35)) (SeqType T@@97))) :qid |funType:Seq#Build| :pattern ( (|Seq#Build| arg0@@82 arg1@@35)) )))
(assert (forall ((s@@12 T@U) (v@@25 T@U) ) (! (let ((T@@98 (type v@@25))) (=> (= (type s@@12) (SeqType T@@98)) (= (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@25)) (|MultiSet#UnionOne| (|MultiSet#FromSeq| s@@12) v@@25)))) :qid |DafnyPre.881:18| :skolemid |527| :pattern ( (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@25))) )))
(assert (forall ((T@@99 T@T) ) (! (= (type (|Seq#Empty| T@@99)) (SeqType T@@99)) :qid |funType:Seq#Empty| :pattern ( (|Seq#Empty| T@@99)) )))
(assert (forall ((T@@100 T@T) ) (! (= (|MultiSet#FromSeq| (|Seq#Empty| T@@100)) (|MultiSet#Empty| T@@100)) :skolemid |528| )))
(assert (forall ((arg0@@83 T@U) (arg1@@36 T@U) ) (! (let ((T@@101 (SeqTypeInv0 (type arg0@@83)))) (= (type (|Seq#Append| arg0@@83 arg1@@36)) (SeqType T@@101))) :qid |funType:Seq#Append| :pattern ( (|Seq#Append| arg0@@83 arg1@@36)) )))
(assert (forall ((a@@66 T@U) (b@@50 T@U) ) (! (let ((T@@102 (SeqTypeInv0 (type a@@66)))) (=> (and (= (type a@@66) (SeqType T@@102)) (= (type b@@50) (SeqType T@@102))) (= (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50)) (|MultiSet#Union| (|MultiSet#FromSeq| a@@66) (|MultiSet#FromSeq| b@@50))))) :qid |DafnyPre.888:18| :skolemid |529| :pattern ( (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50))) )))
(assert (forall ((arg0@@84 T@U) (arg1@@37 Int) (arg2@@1 T@U) ) (! (let ((T@@103 (type arg2@@1))) (= (type (|Seq#Update| arg0@@84 arg1@@37 arg2@@1)) (SeqType T@@103))) :qid |funType:Seq#Update| :pattern ( (|Seq#Update| arg0@@84 arg1@@37 arg2@@1)) )))
(assert (forall ((s@@13 T@U) (i@@8 Int) (v@@26 T@U) (x@@32 T@U) ) (! (let ((T@@104 (type v@@26))) (=> (and (and (= (type s@@13) (SeqType T@@104)) (= (type x@@32) T@@104)) (and (<= 0 i@@8) (< i@@8 (|Seq#Length| s@@13)))) (= (U_2_int (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@8 v@@26)) x@@32)) (U_2_int (MapType0Select (|MultiSet#Union| (|MultiSet#Difference| (|MultiSet#FromSeq| s@@13) (|MultiSet#Singleton| (|Seq#Index| s@@13 i@@8))) (|MultiSet#Singleton| v@@26)) x@@32))))) :qid |DafnyPre.893:18| :skolemid |530| :pattern ( (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@8 v@@26)) x@@32)) )))
(assert (forall ((s@@14 T@U) (x@@33 T@U) ) (! (let ((T@@105 (type x@@33))) (=> (= (type s@@14) (SeqType T@@105)) (and (=> (exists ((i@@9 Int) ) (!  (and (and (<= 0 i@@9) (< i@@9 (|Seq#Length| s@@14))) (= x@@33 (|Seq#Index| s@@14 i@@9))) :qid |DafnyPre.900:11| :skolemid |531| :pattern ( (|Seq#Index| s@@14 i@@9)) )) (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@33)))) (=> (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@33))) (exists ((i@@10 Int) ) (!  (and (and (<= 0 i@@10) (< i@@10 (|Seq#Length| s@@14))) (= x@@33 (|Seq#Index| s@@14 i@@10))) :qid |DafnyPre.900:11| :skolemid |531| :pattern ( (|Seq#Index| s@@14 i@@10)) )))))) :qid |DafnyPre.899:18| :skolemid |532| :pattern ( (MapType0Select (|MultiSet#FromSeq| s@@14) x@@33)) )))
(assert (forall ((s@@15 T@U) ) (! (let ((T@@106 (SeqTypeInv0 (type s@@15)))) (=> (= (type s@@15) (SeqType T@@106)) (<= 0 (|Seq#Length| s@@15)))) :qid |DafnyPre.909:18| :skolemid |533| :pattern ( (|Seq#Length| s@@15)) )))
(assert (forall ((T@@107 T@T) ) (! (= (|Seq#Length| (|Seq#Empty| T@@107)) 0) :skolemid |534| :pattern ( (|Seq#Empty| T@@107)) )))
(assert (forall ((s@@16 T@U) ) (! (let ((T@@108 (SeqTypeInv0 (type s@@16)))) (=> (and (= (type s@@16) (SeqType T@@108)) (= (|Seq#Length| s@@16) 0)) (= s@@16 (|Seq#Empty| T@@108)))) :qid |DafnyPre.913:18| :skolemid |535| :pattern ( (|Seq#Length| s@@16)) )))
(assert (forall ((t@@23 T@U) (T@@109 T@T) ) (!  (=> (= (type t@@23) TyType) ($Is (|Seq#Empty| T@@109) t@@23)) :qid |DafnyPre.923:18| :skolemid |536| :pattern ( ($Is (|Seq#Empty| T@@109) t@@23)) )))
(assert (forall ((arg0@@85 T@U) ) (! (let ((T@@110 (type arg0@@85))) (= (type (|Seq#Singleton| arg0@@85)) (SeqType T@@110))) :qid |funType:Seq#Singleton| :pattern ( (|Seq#Singleton| arg0@@85)) )))
(assert (forall ((t@@24 T@U) ) (! (= (|Seq#Length| (|Seq#Singleton| t@@24)) 1) :qid |DafnyPre.926:18| :skolemid |537| :pattern ( (|Seq#Length| (|Seq#Singleton| t@@24))) )))
(assert  (and (forall ((arg0@@86 T@U) ) (! (let ((T@@111 (SeqTypeInv0 (type arg0@@86)))) (= (type (|Seq#Build_inv0| arg0@@86)) (SeqType T@@111))) :qid |funType:Seq#Build_inv0| :pattern ( (|Seq#Build_inv0| arg0@@86)) )) (forall ((arg0@@87 T@U) ) (! (let ((T@@112 (SeqTypeInv0 (type arg0@@87)))) (= (type (|Seq#Build_inv1| arg0@@87)) T@@112)) :qid |funType:Seq#Build_inv1| :pattern ( (|Seq#Build_inv1| arg0@@87)) ))))
(assert (forall ((s@@17 T@U) (val@@5 T@U) ) (! (let ((T@@113 (type val@@5))) (=> (= (type s@@17) (SeqType T@@113)) (and (= (|Seq#Build_inv0| (|Seq#Build| s@@17 val@@5)) s@@17) (= (|Seq#Build_inv1| (|Seq#Build| s@@17 val@@5)) val@@5)))) :qid |DafnyPre.931:18| :skolemid |538| :pattern ( (|Seq#Build| s@@17 val@@5)) )))
(assert (forall ((s@@18 T@U) (v@@27 T@U) ) (! (let ((T@@114 (type v@@27))) (=> (= (type s@@18) (SeqType T@@114)) (= (|Seq#Length| (|Seq#Build| s@@18 v@@27)) (+ 1 (|Seq#Length| s@@18))))) :qid |DafnyPre.936:18| :skolemid |539| :pattern ( (|Seq#Build| s@@18 v@@27)) )))
(assert (forall ((s@@19 T@U) (i@@11 Int) (v@@28 T@U) ) (! (let ((T@@115 (type v@@28))) (=> (= (type s@@19) (SeqType T@@115)) (and (=> (= i@@11 (|Seq#Length| s@@19)) (= (|Seq#Index| (|Seq#Build| s@@19 v@@28) i@@11) v@@28)) (=> (not (= i@@11 (|Seq#Length| s@@19))) (= (|Seq#Index| (|Seq#Build| s@@19 v@@28) i@@11) (|Seq#Index| s@@19 i@@11)))))) :qid |DafnyPre.939:18| :skolemid |540| :pattern ( (|Seq#Index| (|Seq#Build| s@@19 v@@28) i@@11)) )))
(assert (forall ((s@@20 T@U) (bx@@33 T@U) (t@@25 T@U) ) (!  (=> (and (and (and (= (type s@@20) (SeqType BoxType)) (= (type bx@@33) BoxType)) (= (type t@@25) TyType)) (and ($Is s@@20 (TSeq t@@25)) ($IsBox bx@@33 t@@25))) ($Is (|Seq#Build| s@@20 bx@@33) (TSeq t@@25))) :qid |DafnyPre.944:15| :skolemid |541| :pattern ( ($Is (|Seq#Build| s@@20 bx@@33) (TSeq t@@25))) )))
(assert  (and (= (Ctor HandleTypeType) 20) (forall ((arg0@@88 T@U) (arg1@@38 T@U) (arg2@@2 Int) (arg3 T@U) ) (! (= (type (|Seq#Create| arg0@@88 arg1@@38 arg2@@2 arg3)) (SeqType BoxType)) :qid |funType:Seq#Create| :pattern ( (|Seq#Create| arg0@@88 arg1@@38 arg2@@2 arg3)) ))))
(assert (forall ((ty T@U) (heap T@U) (len Int) (init T@U) ) (!  (=> (and (and (and (= (type ty) TyType) (= (type heap) (MapType0Type refType MapType1Type))) (= (type init) HandleTypeType)) (and ($IsGoodHeap heap) (<= 0 len))) (= (|Seq#Length| (|Seq#Create| ty heap len init)) len)) :qid |DafnyPre.948:15| :skolemid |542| :pattern ( (|Seq#Length| (|Seq#Create| ty heap len init))) )))
(assert (forall ((arg0@@89 T@U) (arg1@@39 T@U) (arg2@@3 T@U) (arg3@@0 T@U) (arg4 T@U) ) (! (= (type (Apply1 arg0@@89 arg1@@39 arg2@@3 arg3@@0 arg4)) BoxType) :qid |funType:Apply1| :pattern ( (Apply1 arg0@@89 arg1@@39 arg2@@3 arg3@@0 arg4)) )))
(assert (forall ((ty@@0 T@U) (heap@@0 T@U) (len@@0 Int) (init@@0 T@U) (i@@12 Int) ) (!  (=> (and (and (and (= (type ty@@0) TyType) (= (type heap@@0) (MapType0Type refType MapType1Type))) (= (type init@@0) HandleTypeType)) (and (and ($IsGoodHeap heap@@0) (<= 0 i@@12)) (< i@@12 len@@0))) (= (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@12) (Apply1 TInt (TSeq ty@@0) heap@@0 init@@0 ($Box (int_2_U i@@12))))) :qid |DafnyPre.952:15| :skolemid |543| :pattern ( (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@12)) )))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (let ((T@@116 (SeqTypeInv0 (type s0)))) (=> (and (= (type s0) (SeqType T@@116)) (= (type s1) (SeqType T@@116))) (= (|Seq#Length| (|Seq#Append| s0 s1)) (+ (|Seq#Length| s0) (|Seq#Length| s1))))) :qid |DafnyPre.958:18| :skolemid |544| :pattern ( (|Seq#Length| (|Seq#Append| s0 s1))) )))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) (t@@26 T@U) ) (!  (=> (and (and (and (= (type s0@@0) (SeqType BoxType)) (= (type s1@@0) (SeqType BoxType))) (= (type t@@26) TyType)) (and ($Is s0@@0 t@@26) ($Is s1@@0 t@@26))) ($Is (|Seq#Append| s0@@0 s1@@0) t@@26)) :qid |DafnyPre.962:15| :skolemid |545| :pattern ( ($Is (|Seq#Append| s0@@0 s1@@0) t@@26)) )))
(assert (forall ((t@@27 T@U) ) (! (= (|Seq#Index| (|Seq#Singleton| t@@27) 0) t@@27) :qid |DafnyPre.966:18| :skolemid |546| :pattern ( (|Seq#Index| (|Seq#Singleton| t@@27) 0)) )))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) (n@@6 Int) ) (! (let ((T@@117 (SeqTypeInv0 (type s0@@1)))) (=> (and (= (type s0@@1) (SeqType T@@117)) (= (type s1@@1) (SeqType T@@117))) (and (=> (< n@@6 (|Seq#Length| s0@@1)) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@6) (|Seq#Index| s0@@1 n@@6))) (=> (<= (|Seq#Length| s0@@1) n@@6) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@6) (|Seq#Index| s1@@1 (- n@@6 (|Seq#Length| s0@@1)))))))) :qid |DafnyPre.967:18| :skolemid |547| :pattern ( (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@6)) )))
(assert (forall ((s@@21 T@U) (i@@13 Int) (v@@29 T@U) ) (! (let ((T@@118 (type v@@29))) (=> (= (type s@@21) (SeqType T@@118)) (=> (and (<= 0 i@@13) (< i@@13 (|Seq#Length| s@@21))) (= (|Seq#Length| (|Seq#Update| s@@21 i@@13 v@@29)) (|Seq#Length| s@@21))))) :qid |DafnyPre.972:18| :skolemid |548| :pattern ( (|Seq#Length| (|Seq#Update| s@@21 i@@13 v@@29))) )))
(assert (forall ((s@@22 T@U) (i@@14 Int) (v@@30 T@U) (n@@7 Int) ) (! (let ((T@@119 (type v@@30))) (=> (= (type s@@22) (SeqType T@@119)) (=> (and (<= 0 n@@7) (< n@@7 (|Seq#Length| s@@22))) (and (=> (= i@@14 n@@7) (= (|Seq#Index| (|Seq#Update| s@@22 i@@14 v@@30) n@@7) v@@30)) (=> (not (= i@@14 n@@7)) (= (|Seq#Index| (|Seq#Update| s@@22 i@@14 v@@30) n@@7) (|Seq#Index| s@@22 n@@7))))))) :qid |DafnyPre.974:18| :skolemid |549| :pattern ( (|Seq#Index| (|Seq#Update| s@@22 i@@14 v@@30) n@@7)) )))
(assert (forall ((s@@23 T@U) (x@@34 T@U) ) (! (let ((T@@120 (type x@@34))) (=> (= (type s@@23) (SeqType T@@120)) (and (=> (|Seq#Contains| s@@23 x@@34) (exists ((i@@15 Int) ) (!  (and (and (<= 0 i@@15) (< i@@15 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@15) x@@34)) :qid |DafnyPre.982:13| :skolemid |550| :pattern ( (|Seq#Index| s@@23 i@@15)) ))) (=> (exists ((i@@16 Int) ) (!  (and (and (<= 0 i@@16) (< i@@16 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@16) x@@34)) :qid |DafnyPre.982:13| :skolemid |550| :pattern ( (|Seq#Index| s@@23 i@@16)) )) (|Seq#Contains| s@@23 x@@34))))) :qid |DafnyPre.980:18| :skolemid |551| :pattern ( (|Seq#Contains| s@@23 x@@34)) )))
(assert (forall ((x@@35 T@U) ) (! (let ((T@@121 (type x@@35))) (not (|Seq#Contains| (|Seq#Empty| T@@121) x@@35))) :qid |DafnyPre.983:18| :skolemid |552| :pattern ( (let ((T@@121 (type x@@35))) (|Seq#Contains| (|Seq#Empty| T@@121) x@@35))) )))
(assert (forall ((s0@@2 T@U) (s1@@2 T@U) (x@@36 T@U) ) (! (let ((T@@122 (type x@@36))) (=> (and (= (type s0@@2) (SeqType T@@122)) (= (type s1@@2) (SeqType T@@122))) (and (=> (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@36) (or (|Seq#Contains| s0@@2 x@@36) (|Seq#Contains| s1@@2 x@@36))) (=> (or (|Seq#Contains| s0@@2 x@@36) (|Seq#Contains| s1@@2 x@@36)) (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@36))))) :qid |DafnyPre.987:18| :skolemid |553| :pattern ( (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@36)) )))
(assert (forall ((s@@24 T@U) (v@@31 T@U) (x@@37 T@U) ) (! (let ((T@@123 (type v@@31))) (=> (and (= (type s@@24) (SeqType T@@123)) (= (type x@@37) T@@123)) (and (=> (|Seq#Contains| (|Seq#Build| s@@24 v@@31) x@@37) (or (= v@@31 x@@37) (|Seq#Contains| s@@24 x@@37))) (=> (or (= v@@31 x@@37) (|Seq#Contains| s@@24 x@@37)) (|Seq#Contains| (|Seq#Build| s@@24 v@@31) x@@37))))) :qid |DafnyPre.992:18| :skolemid |554| :pattern ( (|Seq#Contains| (|Seq#Build| s@@24 v@@31) x@@37)) )))
(assert (forall ((arg0@@90 T@U) (arg1@@40 Int) ) (! (let ((T@@124 (SeqTypeInv0 (type arg0@@90)))) (= (type (|Seq#Take| arg0@@90 arg1@@40)) (SeqType T@@124))) :qid |funType:Seq#Take| :pattern ( (|Seq#Take| arg0@@90 arg1@@40)) )))
(assert (forall ((s@@25 T@U) (n@@8 Int) (x@@38 T@U) ) (! (let ((T@@125 (type x@@38))) (=> (= (type s@@25) (SeqType T@@125)) (and (=> (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@38) (exists ((i@@17 Int) ) (!  (and (and (and (<= 0 i@@17) (< i@@17 n@@8)) (< i@@17 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@17) x@@38)) :qid |DafnyPre.999:13| :skolemid |555| :pattern ( (|Seq#Index| s@@25 i@@17)) ))) (=> (exists ((i@@18 Int) ) (!  (and (and (and (<= 0 i@@18) (< i@@18 n@@8)) (< i@@18 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@18) x@@38)) :qid |DafnyPre.999:13| :skolemid |555| :pattern ( (|Seq#Index| s@@25 i@@18)) )) (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@38))))) :qid |DafnyPre.996:18| :skolemid |556| :pattern ( (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@38)) )))
(assert (forall ((arg0@@91 T@U) (arg1@@41 Int) ) (! (let ((T@@126 (SeqTypeInv0 (type arg0@@91)))) (= (type (|Seq#Drop| arg0@@91 arg1@@41)) (SeqType T@@126))) :qid |funType:Seq#Drop| :pattern ( (|Seq#Drop| arg0@@91 arg1@@41)) )))
(assert (forall ((s@@26 T@U) (n@@9 Int) (x@@39 T@U) ) (! (let ((T@@127 (type x@@39))) (=> (= (type s@@26) (SeqType T@@127)) (and (=> (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@39) (exists ((i@@19 Int) ) (!  (and (and (and (<= 0 n@@9) (<= n@@9 i@@19)) (< i@@19 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@19) x@@39)) :qid |DafnyPre.1004:13| :skolemid |557| :pattern ( (|Seq#Index| s@@26 i@@19)) ))) (=> (exists ((i@@20 Int) ) (!  (and (and (and (<= 0 n@@9) (<= n@@9 i@@20)) (< i@@20 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@20) x@@39)) :qid |DafnyPre.1004:13| :skolemid |557| :pattern ( (|Seq#Index| s@@26 i@@20)) )) (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@39))))) :qid |DafnyPre.1001:18| :skolemid |558| :pattern ( (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@39)) )))
(assert (forall ((s0@@3 T@U) (s1@@3 T@U) ) (! (let ((T@@128 (SeqTypeInv0 (type s0@@3)))) (=> (and (= (type s0@@3) (SeqType T@@128)) (= (type s1@@3) (SeqType T@@128))) (and (=> (|Seq#Equal| s0@@3 s1@@3) (and (= (|Seq#Length| s0@@3) (|Seq#Length| s1@@3)) (forall ((j Int) ) (!  (=> (and (<= 0 j) (< j (|Seq#Length| s0@@3))) (= (|Seq#Index| s0@@3 j) (|Seq#Index| s1@@3 j))) :qid |DafnyPre.1011:13| :skolemid |559| :pattern ( (|Seq#Index| s0@@3 j)) :pattern ( (|Seq#Index| s1@@3 j)) )))) (=> (and (= (|Seq#Length| s0@@3) (|Seq#Length| s1@@3)) (forall ((j@@0 Int) ) (!  (=> (and (<= 0 j@@0) (< j@@0 (|Seq#Length| s0@@3))) (= (|Seq#Index| s0@@3 j@@0) (|Seq#Index| s1@@3 j@@0))) :qid |DafnyPre.1011:13| :skolemid |559| :pattern ( (|Seq#Index| s0@@3 j@@0)) :pattern ( (|Seq#Index| s1@@3 j@@0)) ))) (|Seq#Equal| s0@@3 s1@@3))))) :qid |DafnyPre.1008:18| :skolemid |560| :pattern ( (|Seq#Equal| s0@@3 s1@@3)) )))
(assert (forall ((a@@67 T@U) (b@@51 T@U) ) (! (let ((T@@129 (SeqTypeInv0 (type a@@67)))) (=> (and (and (= (type a@@67) (SeqType T@@129)) (= (type b@@51) (SeqType T@@129))) (|Seq#Equal| a@@67 b@@51)) (= a@@67 b@@51))) :qid |DafnyPre.1013:18| :skolemid |561| :pattern ( (|Seq#Equal| a@@67 b@@51)) )))
(assert (forall ((s0@@4 T@U) (s1@@4 T@U) (n@@10 Int) ) (! (let ((T@@130 (SeqTypeInv0 (type s0@@4)))) (=> (and (= (type s0@@4) (SeqType T@@130)) (= (type s1@@4) (SeqType T@@130))) (and (=> (|Seq#SameUntil| s0@@4 s1@@4 n@@10) (forall ((j@@1 Int) ) (!  (=> (and (<= 0 j@@1) (< j@@1 n@@10)) (= (|Seq#Index| s0@@4 j@@1) (|Seq#Index| s1@@4 j@@1))) :qid |DafnyPre.1019:13| :skolemid |562| :pattern ( (|Seq#Index| s0@@4 j@@1)) :pattern ( (|Seq#Index| s1@@4 j@@1)) ))) (=> (forall ((j@@2 Int) ) (!  (=> (and (<= 0 j@@2) (< j@@2 n@@10)) (= (|Seq#Index| s0@@4 j@@2) (|Seq#Index| s1@@4 j@@2))) :qid |DafnyPre.1019:13| :skolemid |562| :pattern ( (|Seq#Index| s0@@4 j@@2)) :pattern ( (|Seq#Index| s1@@4 j@@2)) )) (|Seq#SameUntil| s0@@4 s1@@4 n@@10))))) :qid |DafnyPre.1017:18| :skolemid |563| :pattern ( (|Seq#SameUntil| s0@@4 s1@@4 n@@10)) )))
(assert (forall ((s@@27 T@U) (n@@11 Int) ) (! (let ((T@@131 (SeqTypeInv0 (type s@@27)))) (=> (= (type s@@27) (SeqType T@@131)) (=> (and (<= 0 n@@11) (<= n@@11 (|Seq#Length| s@@27))) (= (|Seq#Length| (|Seq#Take| s@@27 n@@11)) n@@11)))) :qid |DafnyPre.1023:18| :skolemid |564| :pattern ( (|Seq#Length| (|Seq#Take| s@@27 n@@11))) )))
(assert (forall ((s@@28 T@U) (n@@12 Int) (j@@3 Int) ) (! (let ((T@@132 (SeqTypeInv0 (type s@@28)))) (=> (= (type s@@28) (SeqType T@@132)) (=> (and (and (<= 0 j@@3) (< j@@3 n@@12)) (< j@@3 (|Seq#Length| s@@28))) (= (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@3) (|Seq#Index| s@@28 j@@3))))) :qid |DafnyPre.1025:18| :weight 25 :skolemid |565| :pattern ( (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@3)) :pattern ( (|Seq#Index| s@@28 j@@3) (|Seq#Take| s@@28 n@@12)) )))
(assert (forall ((s@@29 T@U) (n@@13 Int) ) (! (let ((T@@133 (SeqTypeInv0 (type s@@29)))) (=> (= (type s@@29) (SeqType T@@133)) (=> (and (<= 0 n@@13) (<= n@@13 (|Seq#Length| s@@29))) (= (|Seq#Length| (|Seq#Drop| s@@29 n@@13)) (- (|Seq#Length| s@@29) n@@13))))) :qid |DafnyPre.1033:18| :skolemid |566| :pattern ( (|Seq#Length| (|Seq#Drop| s@@29 n@@13))) )))
(assert (forall ((s@@30 T@U) (n@@14 Int) (j@@4 Int) ) (! (let ((T@@134 (SeqTypeInv0 (type s@@30)))) (=> (= (type s@@30) (SeqType T@@134)) (=> (and (and (<= 0 n@@14) (<= 0 j@@4)) (< j@@4 (- (|Seq#Length| s@@30) n@@14))) (= (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@4) (|Seq#Index| s@@30 (+ j@@4 n@@14)))))) :qid |DafnyPre.1035:18| :weight 25 :skolemid |567| :pattern ( (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@4)) )))
(assert (forall ((s@@31 T@U) (n@@15 Int) (k@@3 Int) ) (! (let ((T@@135 (SeqTypeInv0 (type s@@31)))) (=> (= (type s@@31) (SeqType T@@135)) (=> (and (and (<= 0 n@@15) (<= n@@15 k@@3)) (< k@@3 (|Seq#Length| s@@31))) (= (|Seq#Index| (|Seq#Drop| s@@31 n@@15) (- k@@3 n@@15)) (|Seq#Index| s@@31 k@@3))))) :qid |DafnyPre.1040:18| :weight 25 :skolemid |568| :pattern ( (|Seq#Index| s@@31 k@@3) (|Seq#Drop| s@@31 n@@15)) )))
(assert (forall ((s@@32 T@U) (t@@28 T@U) (n@@16 Int) ) (! (let ((T@@136 (SeqTypeInv0 (type s@@32)))) (=> (and (and (= (type s@@32) (SeqType T@@136)) (= (type t@@28) (SeqType T@@136))) (= n@@16 (|Seq#Length| s@@32))) (and (= (|Seq#Take| (|Seq#Append| s@@32 t@@28) n@@16) s@@32) (= (|Seq#Drop| (|Seq#Append| s@@32 t@@28) n@@16) t@@28)))) :qid |DafnyPre.1046:18| :skolemid |569| :pattern ( (|Seq#Take| (|Seq#Append| s@@32 t@@28) n@@16)) :pattern ( (|Seq#Drop| (|Seq#Append| s@@32 t@@28) n@@16)) )))
(assert (forall ((arg0@@92 T@U) (arg1@@42 T@U) ) (! (= (type (|Seq#FromArray| arg0@@92 arg1@@42)) (SeqType BoxType)) :qid |funType:Seq#FromArray| :pattern ( (|Seq#FromArray| arg0@@92 arg1@@42)) )))
(assert (forall ((h@@16 T@U) (a@@68 T@U) ) (!  (=> (and (= (type h@@16) (MapType0Type refType MapType1Type)) (= (type a@@68) refType)) (= (|Seq#Length| (|Seq#FromArray| h@@16 a@@68)) (_System.array.Length a@@68))) :qid |DafnyPre.1055:15| :skolemid |570| :pattern ( (|Seq#Length| (|Seq#FromArray| h@@16 a@@68))) )))
(assert (forall ((h@@17 T@U) (a@@69 T@U) ) (!  (=> (and (= (type h@@17) (MapType0Type refType MapType1Type)) (= (type a@@69) refType)) (forall ((i@@21 Int) ) (!  (=> (and (<= 0 i@@21) (< i@@21 (|Seq#Length| (|Seq#FromArray| h@@17 a@@69)))) (= (|Seq#Index| (|Seq#FromArray| h@@17 a@@69) i@@21) (MapType1Select (MapType0Select h@@17 a@@69) (IndexField i@@21)))) :qid |DafnyPre.1060:11| :skolemid |571| :pattern ( (MapType1Select (MapType0Select h@@17 a@@69) (IndexField i@@21))) :pattern ( (|Seq#Index| (|Seq#FromArray| h@@17 a@@69) i@@21)) ))) :qid |DafnyPre.1058:15| :skolemid |572| :pattern ( (|Seq#FromArray| h@@17 a@@69)) )))
(assert (forall ((h0 T@U) (h1 T@U) (a@@70 T@U) ) (!  (=> (and (and (= (type h0) (MapType0Type refType MapType1Type)) (= (type h1) (MapType0Type refType MapType1Type))) (= (type a@@70) refType)) (=> (and (and (and ($IsGoodHeap h0) ($IsGoodHeap h1)) ($HeapSucc h0 h1)) (= (MapType0Select h0 a@@70) (MapType0Select h1 a@@70))) (= (|Seq#FromArray| h0 a@@70) (|Seq#FromArray| h1 a@@70)))) :qid |DafnyPre.1070:15| :skolemid |573| :pattern ( (|Seq#FromArray| h1 a@@70) ($HeapSucc h0 h1)) )))
(assert (forall ((h@@18 T@U) (i@@22 Int) (v@@32 T@U) (a@@71 T@U) ) (!  (=> (and (and (and (= (type h@@18) (MapType0Type refType MapType1Type)) (= (type v@@32) BoxType)) (= (type a@@71) refType)) (and (<= 0 i@@22) (< i@@22 (_System.array.Length a@@71)))) (= (|Seq#FromArray| (MapType0Store h@@18 a@@71 (MapType1Store (MapType0Select h@@18 a@@71) (IndexField i@@22) v@@32)) a@@71) (|Seq#Update| (|Seq#FromArray| h@@18 a@@71) i@@22 v@@32))) :qid |DafnyPre.1075:15| :skolemid |574| :pattern ( (|Seq#FromArray| (MapType0Store h@@18 a@@71 (MapType1Store (MapType0Select h@@18 a@@71) (IndexField i@@22) v@@32)) a@@71)) )))
(assert (forall ((s@@33 T@U) (i@@23 Int) (v@@33 T@U) (n@@17 Int) ) (! (let ((T@@137 (type v@@33))) (=> (= (type s@@33) (SeqType T@@137)) (=> (and (and (<= 0 i@@23) (< i@@23 n@@17)) (<= n@@17 (|Seq#Length| s@@33))) (= (|Seq#Take| (|Seq#Update| s@@33 i@@23 v@@33) n@@17) (|Seq#Update| (|Seq#Take| s@@33 n@@17) i@@23 v@@33))))) :qid |DafnyPre.1080:18| :skolemid |575| :pattern ( (|Seq#Take| (|Seq#Update| s@@33 i@@23 v@@33) n@@17)) )))
(assert (forall ((s@@34 T@U) (i@@24 Int) (v@@34 T@U) (n@@18 Int) ) (! (let ((T@@138 (type v@@34))) (=> (= (type s@@34) (SeqType T@@138)) (=> (and (<= n@@18 i@@24) (< i@@24 (|Seq#Length| s@@34))) (= (|Seq#Take| (|Seq#Update| s@@34 i@@24 v@@34) n@@18) (|Seq#Take| s@@34 n@@18))))) :qid |DafnyPre.1083:18| :skolemid |576| :pattern ( (|Seq#Take| (|Seq#Update| s@@34 i@@24 v@@34) n@@18)) )))
(assert (forall ((s@@35 T@U) (i@@25 Int) (v@@35 T@U) (n@@19 Int) ) (! (let ((T@@139 (type v@@35))) (=> (= (type s@@35) (SeqType T@@139)) (=> (and (and (<= 0 n@@19) (<= n@@19 i@@25)) (< i@@25 (|Seq#Length| s@@35))) (= (|Seq#Drop| (|Seq#Update| s@@35 i@@25 v@@35) n@@19) (|Seq#Update| (|Seq#Drop| s@@35 n@@19) (- i@@25 n@@19) v@@35))))) :qid |DafnyPre.1086:18| :skolemid |577| :pattern ( (|Seq#Drop| (|Seq#Update| s@@35 i@@25 v@@35) n@@19)) )))
(assert (forall ((s@@36 T@U) (i@@26 Int) (v@@36 T@U) (n@@20 Int) ) (! (let ((T@@140 (type v@@36))) (=> (= (type s@@36) (SeqType T@@140)) (=> (and (and (<= 0 i@@26) (< i@@26 n@@20)) (< n@@20 (|Seq#Length| s@@36))) (= (|Seq#Drop| (|Seq#Update| s@@36 i@@26 v@@36) n@@20) (|Seq#Drop| s@@36 n@@20))))) :qid |DafnyPre.1089:18| :skolemid |578| :pattern ( (|Seq#Drop| (|Seq#Update| s@@36 i@@26 v@@36) n@@20)) )))
(assert (forall ((h@@19 T@U) (a@@72 T@U) (n0 Int) (n1 Int) ) (!  (=> (and (= (type h@@19) (MapType0Type refType MapType1Type)) (= (type a@@72) refType)) (=> (and (and (= (+ n0 1) n1) (<= 0 n0)) (<= n1 (_System.array.Length a@@72))) (= (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n1) (|Seq#Build| (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n0) (MapType1Select (MapType0Select h@@19 a@@72) (IndexField n0)))))) :qid |DafnyPre.1093:15| :skolemid |579| :pattern ( (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n0) (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n1)) )))
(assert (forall ((s@@37 T@U) (v@@37 T@U) (n@@21 Int) ) (! (let ((T@@141 (type v@@37))) (=> (= (type s@@37) (SeqType T@@141)) (=> (and (<= 0 n@@21) (<= n@@21 (|Seq#Length| s@@37))) (= (|Seq#Drop| (|Seq#Build| s@@37 v@@37) n@@21) (|Seq#Build| (|Seq#Drop| s@@37 n@@21) v@@37))))) :qid |DafnyPre.1097:18| :skolemid |580| :pattern ( (|Seq#Drop| (|Seq#Build| s@@37 v@@37) n@@21)) )))
(assert (forall ((s@@38 T@U) (i@@27 Int) ) (!  (=> (= (type s@@38) (SeqType BoxType)) (=> (and (<= 0 i@@27) (< i@@27 (|Seq#Length| s@@38))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@27))) (|Seq#Rank| s@@38)))) :qid |DafnyPre.1102:15| :skolemid |581| :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@27)))) )))
(assert (forall ((s@@39 T@U) (i@@28 Int) ) (! (let ((T@@142 (SeqTypeInv0 (type s@@39)))) (=> (= (type s@@39) (SeqType T@@142)) (=> (and (< 0 i@@28) (<= i@@28 (|Seq#Length| s@@39))) (< (|Seq#Rank| (|Seq#Drop| s@@39 i@@28)) (|Seq#Rank| s@@39))))) :qid |DafnyPre.1105:18| :skolemid |582| :pattern ( (|Seq#Rank| (|Seq#Drop| s@@39 i@@28))) )))
(assert (forall ((s@@40 T@U) (i@@29 Int) ) (! (let ((T@@143 (SeqTypeInv0 (type s@@40)))) (=> (= (type s@@40) (SeqType T@@143)) (=> (and (<= 0 i@@29) (< i@@29 (|Seq#Length| s@@40))) (< (|Seq#Rank| (|Seq#Take| s@@40 i@@29)) (|Seq#Rank| s@@40))))) :qid |DafnyPre.1108:18| :skolemid |583| :pattern ( (|Seq#Rank| (|Seq#Take| s@@40 i@@29))) )))
(assert (forall ((s@@41 T@U) (i@@30 Int) (j@@5 Int) ) (! (let ((T@@144 (SeqTypeInv0 (type s@@41)))) (=> (= (type s@@41) (SeqType T@@144)) (=> (and (and (<= 0 i@@30) (< i@@30 j@@5)) (<= j@@5 (|Seq#Length| s@@41))) (< (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@30) (|Seq#Drop| s@@41 j@@5))) (|Seq#Rank| s@@41))))) :qid |DafnyPre.1111:18| :skolemid |584| :pattern ( (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@30) (|Seq#Drop| s@@41 j@@5)))) )))
(assert (forall ((s@@42 T@U) (n@@22 Int) ) (! (let ((T@@145 (SeqTypeInv0 (type s@@42)))) (=> (and (= (type s@@42) (SeqType T@@145)) (= n@@22 0)) (= (|Seq#Drop| s@@42 n@@22) s@@42))) :qid |DafnyPre.1116:18| :skolemid |585| :pattern ( (|Seq#Drop| s@@42 n@@22)) )))
(assert (forall ((s@@43 T@U) (n@@23 Int) ) (! (let ((T@@146 (SeqTypeInv0 (type s@@43)))) (=> (and (= (type s@@43) (SeqType T@@146)) (= n@@23 0)) (= (|Seq#Take| s@@43 n@@23) (|Seq#Empty| T@@146)))) :qid |DafnyPre.1118:18| :skolemid |586| :pattern ( (|Seq#Take| s@@43 n@@23)) )))
(assert (forall ((s@@44 T@U) (m@@9 Int) (n@@24 Int) ) (! (let ((T@@147 (SeqTypeInv0 (type s@@44)))) (=> (= (type s@@44) (SeqType T@@147)) (=> (and (and (<= 0 m@@9) (<= 0 n@@24)) (<= (+ m@@9 n@@24) (|Seq#Length| s@@44))) (= (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24) (|Seq#Drop| s@@44 (+ m@@9 n@@24)))))) :qid |DafnyPre.1120:18| :skolemid |587| :pattern ( (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24)) )))
(assert (forall ((m@@10 T@U) ) (! (let ((V@@1 (MapTypeInv1 (type m@@10)))) (let ((U@@3 (MapTypeInv0 (type m@@10)))) (=> (= (type m@@10) (MapType U@@3 V@@1)) (<= 0 (|Map#Card| m@@10))))) :qid |DafnyPre.1138:20| :skolemid |588| :pattern ( (|Map#Card| m@@10)) )))
(assert (forall ((m@@11 T@U) ) (! (let ((V@@2 (MapTypeInv1 (type m@@11)))) (let ((U@@4 (MapTypeInv0 (type m@@11)))) (=> (= (type m@@11) (MapType U@@4 V@@2)) (= (|Set#Card| (|Map#Domain| m@@11)) (|Map#Card| m@@11))))) :qid |DafnyPre.1143:20| :skolemid |589| :pattern ( (|Set#Card| (|Map#Domain| m@@11))) )))
(assert (forall ((arg0@@93 T@U) ) (! (let ((V@@3 (MapTypeInv1 (type arg0@@93)))) (= (type (|Map#Values| arg0@@93)) (MapType0Type V@@3 boolType))) :qid |funType:Map#Values| :pattern ( (|Map#Values| arg0@@93)) )))
(assert (forall ((m@@12 T@U) (v@@38 T@U) ) (! (let ((V@@4 (type v@@38))) (let ((U@@5 (MapTypeInv0 (type m@@12)))) (=> (= (type m@@12) (MapType U@@5 V@@4)) (and (=> (U_2_bool (MapType0Select (|Map#Values| m@@12) v@@38)) (exists ((u@@5 T@U) ) (!  (and (= (type u@@5) U@@5) (and (U_2_bool (MapType0Select (|Map#Domain| m@@12) u@@5)) (= v@@38 (MapType0Select (|Map#Elements| m@@12) u@@5)))) :qid |DafnyPre.1155:10| :skolemid |590| :pattern ( (MapType0Select (|Map#Domain| m@@12) u@@5)) :pattern ( (MapType0Select (|Map#Elements| m@@12) u@@5)) ))) (=> (exists ((u@@6 T@U) ) (!  (and (= (type u@@6) U@@5) (and (U_2_bool (MapType0Select (|Map#Domain| m@@12) u@@6)) (= v@@38 (MapType0Select (|Map#Elements| m@@12) u@@6)))) :qid |DafnyPre.1155:10| :skolemid |590| :pattern ( (MapType0Select (|Map#Domain| m@@12) u@@6)) :pattern ( (MapType0Select (|Map#Elements| m@@12) u@@6)) )) (U_2_bool (MapType0Select (|Map#Values| m@@12) v@@38))))))) :qid |DafnyPre.1153:20| :skolemid |591| :pattern ( (MapType0Select (|Map#Values| m@@12) v@@38)) )))
(assert (forall ((arg0@@94 T@U) ) (! (= (type (|Map#Items| arg0@@94)) (MapType0Type BoxType boolType)) :qid |funType:Map#Items| :pattern ( (|Map#Items| arg0@@94)) )))
(assert (forall ((m@@13 T@U) ) (! (let ((V@@5 (MapTypeInv1 (type m@@13)))) (let ((U@@6 (MapTypeInv0 (type m@@13)))) (=> (= (type m@@13) (MapType U@@6 V@@5)) (= (|Set#Card| (|Map#Items| m@@13)) (|Map#Card| m@@13))))) :qid |DafnyPre.1174:20| :skolemid |592| :pattern ( (|Set#Card| (|Map#Items| m@@13))) )))
(assert  (and (forall ((arg0@@95 T@U) ) (! (= (type (_System.Tuple2._0 arg0@@95)) BoxType) :qid |funType:_System.Tuple2._0| :pattern ( (_System.Tuple2._0 arg0@@95)) )) (forall ((arg0@@96 T@U) ) (! (= (type (_System.Tuple2._1 arg0@@96)) BoxType) :qid |funType:_System.Tuple2._1| :pattern ( (_System.Tuple2._1 arg0@@96)) ))))
(assert (forall ((m@@14 T@U) (item T@U) ) (!  (=> (and (= (type m@@14) (MapType BoxType BoxType)) (= (type item) BoxType)) (and (=> (U_2_bool (MapType0Select (|Map#Items| m@@14) item)) (and (U_2_bool (MapType0Select (|Map#Domain| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item))))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))) (U_2_bool (MapType0Select (|Map#Items| m@@14) item))))) :qid |DafnyPre.1177:15| :skolemid |593| :pattern ( (MapType0Select (|Map#Items| m@@14) item)) )))
(assert (forall ((U@@7 T@T) (V@@6 T@T) ) (! (= (type (|Map#Empty| U@@7 V@@6)) (MapType U@@7 V@@6)) :qid |funType:Map#Empty| :pattern ( (|Map#Empty| U@@7 V@@6)) )))
(assert (forall ((u@@7 T@U) (V@@7 T@T) ) (! (let ((U@@8 (type u@@7))) (not (U_2_bool (MapType0Select (|Map#Domain| (|Map#Empty| U@@8 V@@7)) u@@7)))) :qid |DafnyPre.1185:21| :skolemid |594| :pattern ( (let ((U@@8 (type u@@7))) (MapType0Select (|Map#Domain| (|Map#Empty| U@@8 V@@7)) u@@7))) )))
(assert (forall ((m@@15 T@U) ) (! (let ((V@@8 (MapTypeInv1 (type m@@15)))) (let ((U@@9 (MapTypeInv0 (type m@@15)))) (=> (= (type m@@15) (MapType U@@9 V@@8)) (and (and (=> (= (|Map#Card| m@@15) 0) (= m@@15 (|Map#Empty| U@@9 V@@8))) (=> (= m@@15 (|Map#Empty| U@@9 V@@8)) (= (|Map#Card| m@@15) 0))) (=> (not (= (|Map#Card| m@@15) 0)) (exists ((x@@40 T@U) ) (!  (and (= (type x@@40) U@@9) (U_2_bool (MapType0Select (|Map#Domain| m@@15) x@@40))) :qid |DafnyPre.1190:32| :skolemid |595| :no-pattern (type x@@40) :no-pattern (U_2_int x@@40) :no-pattern (U_2_bool x@@40) ))))))) :qid |DafnyPre.1188:21| :skolemid |596| :pattern ( (|Map#Card| m@@15)) )))
(assert (forall ((arg0@@97 T@U) (arg1@@43 T@U) (arg2@@4 T@U) ) (! (let ((V@@9 (MapType0TypeInv1 (type arg1@@43)))) (let ((U@@10 (MapType0TypeInv0 (type arg0@@97)))) (= (type (|Map#Glue| arg0@@97 arg1@@43 arg2@@4)) (MapType U@@10 V@@9)))) :qid |funType:Map#Glue| :pattern ( (|Map#Glue| arg0@@97 arg1@@43 arg2@@4)) )))
(assert (forall ((a@@73 T@U) (b@@52 T@U) (t@@29 T@U) ) (! (let ((V@@10 (MapType0TypeInv1 (type b@@52)))) (let ((U@@11 (MapType0TypeInv0 (type a@@73)))) (=> (and (and (= (type a@@73) (MapType0Type U@@11 boolType)) (= (type b@@52) (MapType0Type U@@11 V@@10))) (= (type t@@29) TyType)) (= (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@29)) a@@73)))) :qid |DafnyPre.1193:21| :skolemid |597| :pattern ( (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@29))) )))
(assert (forall ((a@@74 T@U) (b@@53 T@U) (t@@30 T@U) ) (! (let ((V@@11 (MapType0TypeInv1 (type b@@53)))) (let ((U@@12 (MapType0TypeInv0 (type a@@74)))) (=> (and (and (= (type a@@74) (MapType0Type U@@12 boolType)) (= (type b@@53) (MapType0Type U@@12 V@@11))) (= (type t@@30) TyType)) (= (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@30)) b@@53)))) :qid |DafnyPre.1196:21| :skolemid |598| :pattern ( (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@30))) )))
(assert (forall ((a@@75 T@U) (b@@54 T@U) (t@@31 T@U) ) (! (let ((V@@12 (MapType0TypeInv1 (type b@@54)))) (let ((U@@13 (MapType0TypeInv0 (type a@@75)))) (=> (and (and (= (type a@@75) (MapType0Type U@@13 boolType)) (= (type b@@54) (MapType0Type U@@13 V@@12))) (= (type t@@31) TyType)) ($Is (|Map#Glue| a@@75 b@@54 t@@31) t@@31)))) :qid |DafnyPre.1199:21| :skolemid |599| :pattern ( ($Is (|Map#Glue| a@@75 b@@54 t@@31) t@@31)) )))
(assert (forall ((arg0@@98 T@U) (arg1@@44 T@U) (arg2@@5 T@U) ) (! (let ((V@@13 (type arg2@@5))) (let ((U@@14 (type arg1@@44))) (= (type (|Map#Build| arg0@@98 arg1@@44 arg2@@5)) (MapType U@@14 V@@13)))) :qid |funType:Map#Build| :pattern ( (|Map#Build| arg0@@98 arg1@@44 arg2@@5)) )))
(assert (forall ((m@@16 T@U) (u@@8 T@U) (|u'| T@U) (v@@39 T@U) ) (! (let ((V@@14 (type v@@39))) (let ((U@@15 (type u@@8))) (=> (and (= (type m@@16) (MapType U@@15 V@@14)) (= (type |u'|) U@@15)) (and (=> (= |u'| u@@8) (and (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@16 u@@8 v@@39)) |u'|) v@@39))) (=> (not (= |u'| u@@8)) (and (and (=> (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| m@@16) |u'|))) (=> (U_2_bool (MapType0Select (|Map#Domain| m@@16) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)))) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@16 u@@8 v@@39)) |u'|) (MapType0Select (|Map#Elements| m@@16) |u'|)))))))) :qid |DafnyPre.1210:21| :skolemid |600| :pattern ( (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) :pattern ( (MapType0Select (|Map#Elements| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) )))
(assert (forall ((m@@17 T@U) (u@@9 T@U) (v@@40 T@U) ) (! (let ((V@@15 (type v@@40))) (let ((U@@16 (type u@@9))) (=> (and (= (type m@@17) (MapType U@@16 V@@15)) (U_2_bool (MapType0Select (|Map#Domain| m@@17) u@@9))) (= (|Map#Card| (|Map#Build| m@@17 u@@9 v@@40)) (|Map#Card| m@@17))))) :qid |DafnyPre.1216:21| :skolemid |601| :pattern ( (|Map#Card| (|Map#Build| m@@17 u@@9 v@@40))) )))
(assert (forall ((m@@18 T@U) (u@@10 T@U) (v@@41 T@U) ) (! (let ((V@@16 (type v@@41))) (let ((U@@17 (type u@@10))) (=> (and (= (type m@@18) (MapType U@@17 V@@16)) (not (U_2_bool (MapType0Select (|Map#Domain| m@@18) u@@10)))) (= (|Map#Card| (|Map#Build| m@@18 u@@10 v@@41)) (+ (|Map#Card| m@@18) 1))))) :qid |DafnyPre.1218:21| :skolemid |602| :pattern ( (|Map#Card| (|Map#Build| m@@18 u@@10 v@@41))) )))
(assert (forall ((m@@19 T@U) (|m'| T@U) ) (! (let ((V@@17 (MapTypeInv1 (type m@@19)))) (let ((U@@18 (MapTypeInv0 (type m@@19)))) (=> (and (= (type m@@19) (MapType U@@18 V@@17)) (= (type |m'|) (MapType U@@18 V@@17))) (and (=> (|Map#Equal| m@@19 |m'|) (and (forall ((u@@11 T@U) ) (!  (=> (= (type u@@11) U@@18) (and (=> (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@11)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@11))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@11)) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@11))))) :qid |DafnyPre.1225:35| :skolemid |603| :no-pattern (type u@@11) :no-pattern (U_2_int u@@11) :no-pattern (U_2_bool u@@11) )) (forall ((u@@12 T@U) ) (!  (=> (and (= (type u@@12) U@@18) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@12))) (= (MapType0Select (|Map#Elements| m@@19) u@@12) (MapType0Select (|Map#Elements| |m'|) u@@12))) :qid |DafnyPre.1226:35| :skolemid |604| :no-pattern (type u@@12) :no-pattern (U_2_int u@@12) :no-pattern (U_2_bool u@@12) )))) (=> (and (forall ((u@@13 T@U) ) (!  (=> (= (type u@@13) U@@18) (and (=> (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@13)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@13))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@13)) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@13))))) :qid |DafnyPre.1225:35| :skolemid |603| :no-pattern (type u@@13) :no-pattern (U_2_int u@@13) :no-pattern (U_2_bool u@@13) )) (forall ((u@@14 T@U) ) (!  (=> (and (= (type u@@14) U@@18) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@14))) (= (MapType0Select (|Map#Elements| m@@19) u@@14) (MapType0Select (|Map#Elements| |m'|) u@@14))) :qid |DafnyPre.1226:35| :skolemid |604| :no-pattern (type u@@14) :no-pattern (U_2_int u@@14) :no-pattern (U_2_bool u@@14) ))) (|Map#Equal| m@@19 |m'|)))))) :qid |DafnyPre.1223:21| :skolemid |605| :pattern ( (|Map#Equal| m@@19 |m'|)) )))
(assert (forall ((m@@20 T@U) (|m'@@0| T@U) ) (! (let ((V@@18 (MapTypeInv1 (type m@@20)))) (let ((U@@19 (MapTypeInv0 (type m@@20)))) (=> (and (and (= (type m@@20) (MapType U@@19 V@@18)) (= (type |m'@@0|) (MapType U@@19 V@@18))) (|Map#Equal| m@@20 |m'@@0|)) (= m@@20 |m'@@0|)))) :qid |DafnyPre.1228:21| :skolemid |606| :pattern ( (|Map#Equal| m@@20 |m'@@0|)) )))
(assert (forall ((m@@21 T@U) (|m'@@1| T@U) ) (! (let ((V@@19 (MapTypeInv1 (type m@@21)))) (let ((U@@20 (MapTypeInv0 (type m@@21)))) (=> (and (= (type m@@21) (MapType U@@20 V@@19)) (= (type |m'@@1|) (MapType U@@20 V@@19))) (and (=> (|Map#Disjoint| m@@21 |m'@@1|) (forall ((o@@52 T@U) ) (!  (=> (= (type o@@52) U@@20) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@21) o@@52))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@52))))) :qid |DafnyPre.1235:38| :skolemid |607| :pattern ( (MapType0Select (|Map#Domain| m@@21) o@@52)) :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@52)) ))) (=> (forall ((o@@53 T@U) ) (!  (=> (= (type o@@53) U@@20) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@21) o@@53))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@53))))) :qid |DafnyPre.1235:38| :skolemid |607| :pattern ( (MapType0Select (|Map#Domain| m@@21) o@@53)) :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@53)) )) (|Map#Disjoint| m@@21 |m'@@1|)))))) :qid |DafnyPre.1233:21| :skolemid |608| :pattern ( (|Map#Disjoint| m@@21 |m'@@1|)) )))
(assert (forall ((arg0@@99 T@U) ) (! (let ((V@@20 (IMapTypeInv1 (type arg0@@99)))) (= (type (|IMap#Values| arg0@@99)) (MapType0Type V@@20 boolType))) :qid |funType:IMap#Values| :pattern ( (|IMap#Values| arg0@@99)) )))
(assert (forall ((m@@22 T@U) (v@@42 T@U) ) (! (let ((V@@21 (type v@@42))) (let ((U@@21 (IMapTypeInv0 (type m@@22)))) (=> (= (type m@@22) (IMapType U@@21 V@@21)) (and (=> (U_2_bool (MapType0Select (|IMap#Values| m@@22) v@@42)) (exists ((u@@15 T@U) ) (!  (and (= (type u@@15) U@@21) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@22) u@@15)) (= v@@42 (MapType0Select (|IMap#Elements| m@@22) u@@15)))) :qid |DafnyPre.1258:10| :skolemid |609| :pattern ( (MapType0Select (|IMap#Domain| m@@22) u@@15)) :pattern ( (MapType0Select (|IMap#Elements| m@@22) u@@15)) ))) (=> (exists ((u@@16 T@U) ) (!  (and (= (type u@@16) U@@21) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@22) u@@16)) (= v@@42 (MapType0Select (|IMap#Elements| m@@22) u@@16)))) :qid |DafnyPre.1258:10| :skolemid |609| :pattern ( (MapType0Select (|IMap#Domain| m@@22) u@@16)) :pattern ( (MapType0Select (|IMap#Elements| m@@22) u@@16)) )) (U_2_bool (MapType0Select (|IMap#Values| m@@22) v@@42))))))) :qid |DafnyPre.1256:20| :skolemid |610| :pattern ( (MapType0Select (|IMap#Values| m@@22) v@@42)) )))
(assert (forall ((arg0@@100 T@U) ) (! (= (type (|IMap#Items| arg0@@100)) (MapType0Type BoxType boolType)) :qid |funType:IMap#Items| :pattern ( (|IMap#Items| arg0@@100)) )))
(assert (forall ((m@@23 T@U) (item@@0 T@U) ) (!  (=> (and (= (type m@@23) (IMapType BoxType BoxType)) (= (type item@@0) BoxType)) (and (=> (U_2_bool (MapType0Select (|IMap#Items| m@@23) item@@0)) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0))))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0)))) (U_2_bool (MapType0Select (|IMap#Items| m@@23) item@@0))))) :qid |DafnyPre.1273:15| :skolemid |611| :pattern ( (MapType0Select (|IMap#Items| m@@23) item@@0)) )))
(assert (forall ((U@@22 T@T) (V@@22 T@T) ) (! (= (type (|IMap#Empty| U@@22 V@@22)) (IMapType U@@22 V@@22)) :qid |funType:IMap#Empty| :pattern ( (|IMap#Empty| U@@22 V@@22)) )))
(assert (forall ((u@@17 T@U) (V@@23 T@T) ) (! (let ((U@@23 (type u@@17))) (not (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@23 V@@23)) u@@17)))) :qid |DafnyPre.1280:21| :skolemid |612| :pattern ( (let ((U@@23 (type u@@17))) (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@23 V@@23)) u@@17))) )))
(assert (forall ((arg0@@101 T@U) (arg1@@45 T@U) (arg2@@6 T@U) ) (! (let ((V@@24 (MapType0TypeInv1 (type arg1@@45)))) (let ((U@@24 (MapType0TypeInv0 (type arg0@@101)))) (= (type (|IMap#Glue| arg0@@101 arg1@@45 arg2@@6)) (IMapType U@@24 V@@24)))) :qid |funType:IMap#Glue| :pattern ( (|IMap#Glue| arg0@@101 arg1@@45 arg2@@6)) )))
(assert (forall ((a@@76 T@U) (b@@55 T@U) (t@@32 T@U) ) (! (let ((V@@25 (MapType0TypeInv1 (type b@@55)))) (let ((U@@25 (MapType0TypeInv0 (type a@@76)))) (=> (and (and (= (type a@@76) (MapType0Type U@@25 boolType)) (= (type b@@55) (MapType0Type U@@25 V@@25))) (= (type t@@32) TyType)) (= (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@32)) a@@76)))) :qid |DafnyPre.1285:21| :skolemid |613| :pattern ( (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@32))) )))
(assert (forall ((a@@77 T@U) (b@@56 T@U) (t@@33 T@U) ) (! (let ((V@@26 (MapType0TypeInv1 (type b@@56)))) (let ((U@@26 (MapType0TypeInv0 (type a@@77)))) (=> (and (and (= (type a@@77) (MapType0Type U@@26 boolType)) (= (type b@@56) (MapType0Type U@@26 V@@26))) (= (type t@@33) TyType)) (= (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@33)) b@@56)))) :qid |DafnyPre.1288:21| :skolemid |614| :pattern ( (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@33))) )))
(assert (forall ((a@@78 T@U) (b@@57 T@U) (t@@34 T@U) ) (! (let ((V@@27 (MapType0TypeInv1 (type b@@57)))) (let ((U@@27 (MapType0TypeInv0 (type a@@78)))) (=> (and (and (= (type a@@78) (MapType0Type U@@27 boolType)) (= (type b@@57) (MapType0Type U@@27 V@@27))) (= (type t@@34) TyType)) ($Is (|IMap#Glue| a@@78 b@@57 t@@34) t@@34)))) :qid |DafnyPre.1291:21| :skolemid |615| :pattern ( ($Is (|IMap#Glue| a@@78 b@@57 t@@34) t@@34)) )))
(assert (forall ((arg0@@102 T@U) (arg1@@46 T@U) (arg2@@7 T@U) ) (! (let ((V@@28 (type arg2@@7))) (let ((U@@28 (type arg1@@46))) (= (type (|IMap#Build| arg0@@102 arg1@@46 arg2@@7)) (IMapType U@@28 V@@28)))) :qid |funType:IMap#Build| :pattern ( (|IMap#Build| arg0@@102 arg1@@46 arg2@@7)) )))
(assert (forall ((m@@24 T@U) (u@@18 T@U) (|u'@@0| T@U) (v@@43 T@U) ) (! (let ((V@@29 (type v@@43))) (let ((U@@29 (type u@@18))) (=> (and (= (type m@@24) (IMapType U@@29 V@@29)) (= (type |u'@@0|) U@@29)) (and (=> (= |u'@@0| u@@18) (and (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|) v@@43))) (=> (not (= |u'@@0| u@@18)) (and (and (=> (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| m@@24) |u'@@0|))) (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@24) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)))) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|) (MapType0Select (|IMap#Elements| m@@24) |u'@@0|)))))))) :qid |DafnyPre.1301:21| :skolemid |616| :pattern ( (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) )))
(assert (forall ((m@@25 T@U) (|m'@@2| T@U) ) (! (let ((V@@30 (IMapTypeInv1 (type m@@25)))) (let ((U@@30 (IMapTypeInv0 (type m@@25)))) (=> (and (= (type m@@25) (IMapType U@@30 V@@30)) (= (type |m'@@2|) (IMapType U@@30 V@@30))) (and (=> (|IMap#Equal| m@@25 |m'@@2|) (and (forall ((u@@19 T@U) ) (!  (=> (= (type u@@19) U@@30) (and (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@19)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@19))) (=> (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@19)) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@19))))) :qid |DafnyPre.1312:36| :skolemid |617| :no-pattern (type u@@19) :no-pattern (U_2_int u@@19) :no-pattern (U_2_bool u@@19) )) (forall ((u@@20 T@U) ) (!  (=> (and (= (type u@@20) U@@30) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@20))) (= (MapType0Select (|IMap#Elements| m@@25) u@@20) (MapType0Select (|IMap#Elements| |m'@@2|) u@@20))) :qid |DafnyPre.1313:35| :skolemid |618| :no-pattern (type u@@20) :no-pattern (U_2_int u@@20) :no-pattern (U_2_bool u@@20) )))) (=> (and (forall ((u@@21 T@U) ) (!  (=> (= (type u@@21) U@@30) (and (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@21)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@21))) (=> (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@21)) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@21))))) :qid |DafnyPre.1312:36| :skolemid |617| :no-pattern (type u@@21) :no-pattern (U_2_int u@@21) :no-pattern (U_2_bool u@@21) )) (forall ((u@@22 T@U) ) (!  (=> (and (= (type u@@22) U@@30) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@22))) (= (MapType0Select (|IMap#Elements| m@@25) u@@22) (MapType0Select (|IMap#Elements| |m'@@2|) u@@22))) :qid |DafnyPre.1313:35| :skolemid |618| :no-pattern (type u@@22) :no-pattern (U_2_int u@@22) :no-pattern (U_2_bool u@@22) ))) (|IMap#Equal| m@@25 |m'@@2|)))))) :qid |DafnyPre.1310:21| :skolemid |619| :pattern ( (|IMap#Equal| m@@25 |m'@@2|)) )))
(assert (forall ((m@@26 T@U) (|m'@@3| T@U) ) (! (let ((V@@31 (IMapTypeInv1 (type m@@26)))) (let ((U@@31 (IMapTypeInv0 (type m@@26)))) (=> (and (and (= (type m@@26) (IMapType U@@31 V@@31)) (= (type |m'@@3|) (IMapType U@@31 V@@31))) (|IMap#Equal| m@@26 |m'@@3|)) (= m@@26 |m'@@3|)))) :qid |DafnyPre.1315:21| :skolemid |620| :pattern ( (|IMap#Equal| m@@26 |m'@@3|)) )))
(assert (forall ((x@@41 Int) (y@@12 Int) ) (! (= (INTERNAL_add_boogie x@@41 y@@12) (+ x@@41 y@@12)) :qid |DafnyPre.1323:30| :skolemid |621| :pattern ( (INTERNAL_add_boogie x@@41 y@@12)) )))
(assert (forall ((x@@42 Int) (y@@13 Int) ) (! (= (INTERNAL_sub_boogie x@@42 y@@13) (- x@@42 y@@13)) :qid |DafnyPre.1324:30| :skolemid |622| :pattern ( (INTERNAL_sub_boogie x@@42 y@@13)) )))
(assert (forall ((x@@43 Int) (y@@14 Int) ) (! (= (INTERNAL_mul_boogie x@@43 y@@14) (* x@@43 y@@14)) :qid |DafnyPre.1325:30| :skolemid |623| :pattern ( (INTERNAL_mul_boogie x@@43 y@@14)) )))
(assert (forall ((x@@44 Int) (y@@15 Int) ) (! (= (INTERNAL_div_boogie x@@44 y@@15) (div x@@44 y@@15)) :qid |DafnyPre.1326:30| :skolemid |624| :pattern ( (INTERNAL_div_boogie x@@44 y@@15)) )))
(assert (forall ((x@@45 Int) (y@@16 Int) ) (! (= (INTERNAL_mod_boogie x@@45 y@@16) (mod x@@45 y@@16)) :qid |DafnyPre.1327:30| :skolemid |625| :pattern ( (INTERNAL_mod_boogie x@@45 y@@16)) )))
(assert (forall ((x@@46 Int) (y@@17 Int) ) (!  (and (=> (INTERNAL_lt_boogie x@@46 y@@17) (< x@@46 y@@17)) (=> (< x@@46 y@@17) (INTERNAL_lt_boogie x@@46 y@@17))) :qid |DafnyPre.1328:51| :skolemid |626| :pattern ( (INTERNAL_lt_boogie x@@46 y@@17)) )))
(assert (forall ((x@@47 Int) (y@@18 Int) ) (!  (and (=> (INTERNAL_le_boogie x@@47 y@@18) (<= x@@47 y@@18)) (=> (<= x@@47 y@@18) (INTERNAL_le_boogie x@@47 y@@18))) :qid |DafnyPre.1329:51| :skolemid |627| :pattern ( (INTERNAL_le_boogie x@@47 y@@18)) )))
(assert (forall ((x@@48 Int) (y@@19 Int) ) (!  (and (=> (INTERNAL_gt_boogie x@@48 y@@19) (> x@@48 y@@19)) (=> (> x@@48 y@@19) (INTERNAL_gt_boogie x@@48 y@@19))) :qid |DafnyPre.1330:51| :skolemid |628| :pattern ( (INTERNAL_gt_boogie x@@48 y@@19)) )))
(assert (forall ((x@@49 Int) (y@@20 Int) ) (!  (and (=> (INTERNAL_ge_boogie x@@49 y@@20) (>= x@@49 y@@20)) (=> (>= x@@49 y@@20) (INTERNAL_ge_boogie x@@49 y@@20))) :qid |DafnyPre.1331:51| :skolemid |629| :pattern ( (INTERNAL_ge_boogie x@@49 y@@20)) )))
(assert (forall ((x@@50 Int) (y@@21 Int) ) (! (= (Mul x@@50 y@@21) (* x@@50 y@@21)) :qid |DafnyPre.1333:14| :skolemid |630| :pattern ( (Mul x@@50 y@@21)) )))
(assert (forall ((x@@51 Int) (y@@22 Int) ) (! (= (Div x@@51 y@@22) (div x@@51 y@@22)) :qid |DafnyPre.1334:14| :skolemid |631| :pattern ( (Div x@@51 y@@22)) )))
(assert (forall ((x@@52 Int) (y@@23 Int) ) (! (= (Mod x@@52 y@@23) (mod x@@52 y@@23)) :qid |DafnyPre.1335:14| :skolemid |632| :pattern ( (Mod x@@52 y@@23)) )))
(assert (forall ((x@@53 Int) (y@@24 Int) ) (! (= (Add x@@53 y@@24) (+ x@@53 y@@24)) :qid |DafnyPre.1336:14| :skolemid |633| :pattern ( (Add x@@53 y@@24)) )))
(assert (forall ((x@@54 Int) (y@@25 Int) ) (! (= (Sub x@@54 y@@25) (- x@@54 y@@25)) :qid |DafnyPre.1337:14| :skolemid |634| :pattern ( (Sub x@@54 y@@25)) )))
(assert (forall ((A@@2 T@U) (B T@U) (a@@79 T@U) (b@@58 T@U) ) (!  (=> (and (and (and (and (= (type A@@2) TyType) (= (type B) TyType)) (= (type a@@79) BoxType)) (= (type b@@58) BoxType)) (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58)) (< (BoxRank a@@79) (BoxRank b@@58))) :qid |DafnyPre.1378:15| :skolemid |635| :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank a@@79)) :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank b@@58)) )))
(assert (forall ((A@@3 T@U) (B@@0 T@U) (a@@80 T@U) (b@@59 T@U) ) (!  (=> (and (and (and (and (= (type A@@3) TyType) (= (type B@@0) TyType)) (= (type a@@80) BoxType)) (= (type b@@59) (SeqType BoxType))) (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59))) (< (BoxRank a@@80) (|Seq#Rank| b@@59))) :qid |DafnyPre.1383:15| :skolemid |636| :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (BoxRank a@@80)) :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (|Seq#Rank| b@@59)) )))
(assert (forall ((A@@4 T@U) (B@@1 T@U) (a@@81 T@U) (b@@60 T@U) ) (!  (=> (and (and (and (and (= (type A@@4) TyType) (= (type B@@1) TyType)) (= (type a@@81) (SeqType BoxType))) (= (type b@@60) BoxType)) (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60)) (< (|Seq#Rank| a@@81) (BoxRank b@@60))) :qid |DafnyPre.1388:15| :skolemid |637| :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (|Seq#Rank| a@@81)) :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (BoxRank b@@60)) )))
(assert (= (type Tclass._System.nat) TyType))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (forall ((bx@@34 T@U) ) (!  (=> (and (= (type bx@@34) BoxType) ($IsBox bx@@34 Tclass._System.nat)) (and (= ($Box ($Unbox intType bx@@34)) bx@@34) ($Is ($Unbox intType bx@@34) Tclass._System.nat))) :qid |unknown.0:0| :skolemid |638| :pattern ( ($IsBox bx@@34 Tclass._System.nat)) )))
(assert (forall ((|x#0| T@U) ) (!  (=> (= (type |x#0|) intType) (and (=> ($Is |x#0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0|))) (=> (<= (LitInt 0) (U_2_int |x#0|)) ($Is |x#0| Tclass._System.nat)))) :qid |unknown.0:0| :skolemid |639| :pattern ( ($Is |x#0| Tclass._System.nat)) )))
(assert (forall ((|x#0@@0| T@U) ($h T@U) ) (!  (=> (and (= (type |x#0@@0|) intType) (= (type $h) (MapType0Type refType MapType1Type))) ($IsAlloc |x#0@@0| Tclass._System.nat $h)) :qid |unknown.0:0| :skolemid |640| :pattern ( ($IsAlloc |x#0@@0| Tclass._System.nat $h)) )))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (forall ((bx@@35 T@U) ) (!  (=> (and (= (type bx@@35) BoxType) ($IsBox bx@@35 Tclass._System.object?)) (and (= ($Box ($Unbox refType bx@@35)) bx@@35) ($Is ($Unbox refType bx@@35) Tclass._System.object?))) :qid |unknown.0:0| :skolemid |641| :pattern ( ($IsBox bx@@35 Tclass._System.object?)) )))
(assert (forall (($o T@U) ) (!  (=> (= (type $o) refType) ($Is $o Tclass._System.object?)) :qid |unknown.0:0| :skolemid |642| :pattern ( ($Is $o Tclass._System.object?)) )))
(assert (= (type null) refType))
(assert (forall (($o@@0 T@U) ($h@@0 T@U) ) (!  (=> (and (= (type $o@@0) refType) (= (type $h@@0) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@0 Tclass._System.object? $h@@0) (or (= $o@@0 null) (U_2_bool (MapType1Select (MapType0Select $h@@0 $o@@0) alloc)))) (=> (or (= $o@@0 null) (U_2_bool (MapType1Select (MapType0Select $h@@0 $o@@0) alloc))) ($IsAlloc $o@@0 Tclass._System.object? $h@@0)))) :qid |unknown.0:0| :skolemid |643| :pattern ( ($IsAlloc $o@@0 Tclass._System.object? $h@@0)) )))
(assert (= (type Tclass._System.object) TyType))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (forall ((bx@@36 T@U) ) (!  (=> (and (= (type bx@@36) BoxType) ($IsBox bx@@36 Tclass._System.object)) (and (= ($Box ($Unbox refType bx@@36)) bx@@36) ($Is ($Unbox refType bx@@36) Tclass._System.object))) :qid |unknown.0:0| :skolemid |644| :pattern ( ($IsBox bx@@36 Tclass._System.object)) )))
(assert (forall ((|c#0| T@U) ) (!  (=> (= (type |c#0|) refType) (and (=> ($Is |c#0| Tclass._System.object) (and ($Is |c#0| Tclass._System.object?) (not (= |c#0| null)))) (=> (and ($Is |c#0| Tclass._System.object?) (not (= |c#0| null))) ($Is |c#0| Tclass._System.object)))) :qid |unknown.0:0| :skolemid |645| :pattern ( ($Is |c#0| Tclass._System.object)) )))
(assert (forall ((|c#0@@0| T@U) ($h@@1 T@U) ) (!  (=> (and (= (type |c#0@@0|) refType) (= (type $h@@1) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |c#0@@0| Tclass._System.object $h@@1) ($IsAlloc |c#0@@0| Tclass._System.object? $h@@1)) (=> ($IsAlloc |c#0@@0| Tclass._System.object? $h@@1) ($IsAlloc |c#0@@0| Tclass._System.object $h@@1)))) :qid |unknown.0:0| :skolemid |646| :pattern ( ($IsAlloc |c#0@@0| Tclass._System.object $h@@1)) )))
(assert (forall ((arg0@@103 T@U) ) (! (= (type (Tclass._System.array? arg0@@103)) TyType) :qid |funType:Tclass._System.array?| :pattern ( (Tclass._System.array? arg0@@103)) )))
(assert (forall ((|#$arg| T@U) ) (!  (=> (= (type |#$arg|) TyType) (= (Tag (Tclass._System.array? |#$arg|)) Tagclass._System.array?)) :qid |unknown.0:0| :skolemid |647| :pattern ( (Tclass._System.array? |#$arg|)) )))
(assert (forall ((arg0@@104 T@U) ) (! (= (type (Tclass._System.array?_0 arg0@@104)) TyType) :qid |funType:Tclass._System.array?_0| :pattern ( (Tclass._System.array?_0 arg0@@104)) )))
(assert (forall ((|#$arg@@0| T@U) ) (!  (=> (= (type |#$arg@@0|) TyType) (= (Tclass._System.array?_0 (Tclass._System.array? |#$arg@@0|)) |#$arg@@0|)) :qid |unknown.0:0| :skolemid |648| :pattern ( (Tclass._System.array? |#$arg@@0|)) )))
(assert (forall ((|#$arg@@1| T@U) (bx@@37 T@U) ) (!  (=> (and (and (= (type |#$arg@@1|) TyType) (= (type bx@@37) BoxType)) ($IsBox bx@@37 (Tclass._System.array? |#$arg@@1|))) (and (= ($Box ($Unbox refType bx@@37)) bx@@37) ($Is ($Unbox refType bx@@37) (Tclass._System.array? |#$arg@@1|)))) :qid |unknown.0:0| :skolemid |649| :pattern ( ($IsBox bx@@37 (Tclass._System.array? |#$arg@@1|))) )))
(assert (forall ((arg0@@105 T@U) ) (! (= (type (dtype arg0@@105)) TyType) :qid |funType:dtype| :pattern ( (dtype arg0@@105)) )))
(assert (forall ((|#$arg@@2| T@U) ($h@@2 T@U) ($o@@1 T@U) ($i0 Int) ) (!  (=> (and (and (and (= (type |#$arg@@2|) TyType) (= (type $h@@2) (MapType0Type refType MapType1Type))) (= (type $o@@1) refType)) (and (and ($IsGoodHeap $h@@2) (and (not (= $o@@1 null)) (= (dtype $o@@1) (Tclass._System.array? |#$arg@@2|)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@1))))) ($IsBox (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) |#$arg@@2|)) :qid |unknown.0:0| :skolemid |650| :pattern ( (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) (Tclass._System.array? |#$arg@@2|)) )))
(assert (forall ((|#$arg@@3| T@U) ($h@@3 T@U) ($o@@2 T@U) ($i0@@0 Int) ) (!  (=> (and (and (= (type |#$arg@@3|) TyType) (= (type $h@@3) (MapType0Type refType MapType1Type))) (= (type $o@@2) refType)) (=> (and (and (and ($IsGoodHeap $h@@3) (and (not (= $o@@2 null)) (= (dtype $o@@2) (Tclass._System.array? |#$arg@@3|)))) (and (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@2)))) (U_2_bool (MapType1Select (MapType0Select $h@@3 $o@@2) alloc))) ($IsAllocBox (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) |#$arg@@3| $h@@3))) :qid |unknown.0:0| :skolemid |651| :pattern ( (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) (Tclass._System.array? |#$arg@@3|)) )))
(assert (forall ((|#$arg@@4| T@U) ($o@@3 T@U) ) (!  (=> (and (= (type |#$arg@@4|) TyType) (= (type $o@@3) refType)) (and (=> ($Is $o@@3 (Tclass._System.array? |#$arg@@4|)) (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? |#$arg@@4|)))) (=> (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? |#$arg@@4|))) ($Is $o@@3 (Tclass._System.array? |#$arg@@4|))))) :qid |unknown.0:0| :skolemid |652| :pattern ( ($Is $o@@3 (Tclass._System.array? |#$arg@@4|))) )))
(assert (forall ((|#$arg@@5| T@U) ($o@@4 T@U) ($h@@4 T@U) ) (!  (=> (and (and (= (type |#$arg@@5|) TyType) (= (type $o@@4) refType)) (= (type $h@@4) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@4 (Tclass._System.array? |#$arg@@5|) $h@@4) (or (= $o@@4 null) (U_2_bool (MapType1Select (MapType0Select $h@@4 $o@@4) alloc)))) (=> (or (= $o@@4 null) (U_2_bool (MapType1Select (MapType0Select $h@@4 $o@@4) alloc))) ($IsAlloc $o@@4 (Tclass._System.array? |#$arg@@5|) $h@@4)))) :qid |unknown.0:0| :skolemid |653| :pattern ( ($IsAlloc $o@@4 (Tclass._System.array? |#$arg@@5|) $h@@4)) )))
(assert (forall ((|#$arg@@6| T@U) ($o@@5 T@U) ) (!  (=> (and (and (= (type |#$arg@@6|) TyType) (= (type $o@@5) refType)) (and (not (= $o@@5 null)) (= (dtype $o@@5) (Tclass._System.array? |#$arg@@6|)))) ($Is (int_2_U (_System.array.Length $o@@5)) TInt)) :qid |unknown.0:0| :skolemid |654| :pattern ( (_System.array.Length $o@@5) (Tclass._System.array? |#$arg@@6|)) )))
(assert (forall ((|#$arg@@7| T@U) ($h@@5 T@U) ($o@@6 T@U) ) (!  (=> (and (and (and (= (type |#$arg@@7|) TyType) (= (type $h@@5) (MapType0Type refType MapType1Type))) (= (type $o@@6) refType)) (and (and ($IsGoodHeap $h@@5) (and (not (= $o@@6 null)) (= (dtype $o@@6) (Tclass._System.array? |#$arg@@7|)))) (U_2_bool (MapType1Select (MapType0Select $h@@5 $o@@6) alloc)))) ($IsAlloc (int_2_U (_System.array.Length $o@@6)) TInt $h@@5)) :qid |unknown.0:0| :skolemid |655| :pattern ( (_System.array.Length $o@@6) (MapType1Select (MapType0Select $h@@5 $o@@6) alloc) (Tclass._System.array? |#$arg@@7|)) )))
(assert (forall ((arg0@@106 T@U) ) (! (= (type (Tclass._System.array arg0@@106)) TyType) :qid |funType:Tclass._System.array| :pattern ( (Tclass._System.array arg0@@106)) )))
(assert (forall ((_System.array$arg T@U) ) (!  (=> (= (type _System.array$arg) TyType) (= (Tag (Tclass._System.array _System.array$arg)) Tagclass._System.array)) :qid |unknown.0:0| :skolemid |656| :pattern ( (Tclass._System.array _System.array$arg)) )))
(assert (forall ((arg0@@107 T@U) ) (! (= (type (Tclass._System.array_0 arg0@@107)) TyType) :qid |funType:Tclass._System.array_0| :pattern ( (Tclass._System.array_0 arg0@@107)) )))
(assert (forall ((_System.array$arg@@0 T@U) ) (!  (=> (= (type _System.array$arg@@0) TyType) (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@0)) _System.array$arg@@0)) :qid |unknown.0:0| :skolemid |657| :pattern ( (Tclass._System.array _System.array$arg@@0)) )))
(assert (forall ((_System.array$arg@@1 T@U) (bx@@38 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@1) TyType) (= (type bx@@38) BoxType)) ($IsBox bx@@38 (Tclass._System.array _System.array$arg@@1))) (and (= ($Box ($Unbox refType bx@@38)) bx@@38) ($Is ($Unbox refType bx@@38) (Tclass._System.array _System.array$arg@@1)))) :qid |unknown.0:0| :skolemid |658| :pattern ( ($IsBox bx@@38 (Tclass._System.array _System.array$arg@@1))) )))
(assert (forall ((_System.array$arg@@2 T@U) (|c#0@@1| T@U) ) (!  (=> (and (= (type _System.array$arg@@2) TyType) (= (type |c#0@@1|) refType)) (and (=> ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@2)) (and ($Is |c#0@@1| (Tclass._System.array? _System.array$arg@@2)) (not (= |c#0@@1| null)))) (=> (and ($Is |c#0@@1| (Tclass._System.array? _System.array$arg@@2)) (not (= |c#0@@1| null))) ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@2))))) :qid |unknown.0:0| :skolemid |659| :pattern ( ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@2))) )))
(assert (forall ((_System.array$arg@@3 T@U) (|c#0@@2| T@U) ($h@@6 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@3) TyType) (= (type |c#0@@2|) refType)) (= (type $h@@6) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@3) $h@@6) ($IsAlloc |c#0@@2| (Tclass._System.array? _System.array$arg@@3) $h@@6)) (=> ($IsAlloc |c#0@@2| (Tclass._System.array? _System.array$arg@@3) $h@@6) ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@3) $h@@6)))) :qid |unknown.0:0| :skolemid |660| :pattern ( ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@3) $h@@6)) )))
(assert (forall ((arg0@@108 T@U) ) (! (= (type (Tclass._System.___hFunc0 arg0@@108)) TyType) :qid |funType:Tclass._System.___hFunc0| :pattern ( (Tclass._System.___hFunc0 arg0@@108)) )))
(assert (forall ((|#$R| T@U) ) (!  (=> (= (type |#$R|) TyType) (= (Tag (Tclass._System.___hFunc0 |#$R|)) Tagclass._System.___hFunc0)) :qid |unknown.0:0| :skolemid |661| :pattern ( (Tclass._System.___hFunc0 |#$R|)) )))
(assert (forall ((arg0@@109 T@U) ) (! (= (type (Tclass._System.___hFunc0_0 arg0@@109)) TyType) :qid |funType:Tclass._System.___hFunc0_0| :pattern ( (Tclass._System.___hFunc0_0 arg0@@109)) )))
(assert (forall ((|#$R@@0| T@U) ) (!  (=> (= (type |#$R@@0|) TyType) (= (Tclass._System.___hFunc0_0 (Tclass._System.___hFunc0 |#$R@@0|)) |#$R@@0|)) :qid |unknown.0:0| :skolemid |662| :pattern ( (Tclass._System.___hFunc0 |#$R@@0|)) )))
(assert (forall ((|#$R@@1| T@U) (bx@@39 T@U) ) (!  (=> (and (and (= (type |#$R@@1|) TyType) (= (type bx@@39) BoxType)) ($IsBox bx@@39 (Tclass._System.___hFunc0 |#$R@@1|))) (and (= ($Box ($Unbox HandleTypeType bx@@39)) bx@@39) ($Is ($Unbox HandleTypeType bx@@39) (Tclass._System.___hFunc0 |#$R@@1|)))) :qid |unknown.0:0| :skolemid |663| :pattern ( ($IsBox bx@@39 (Tclass._System.___hFunc0 |#$R@@1|))) )))
(assert  (and (forall ((arg0@@110 T@U) (arg1@@47 T@U) (arg2@@8 T@U) ) (! (= (type (Apply0 arg0@@110 arg1@@47 arg2@@8)) BoxType) :qid |funType:Apply0| :pattern ( (Apply0 arg0@@110 arg1@@47 arg2@@8)) )) (forall ((arg0@@111 T@U) (arg1@@48 T@U) (arg2@@9 T@U) ) (! (= (type (Handle0 arg0@@111 arg1@@48 arg2@@9)) HandleTypeType) :qid |funType:Handle0| :pattern ( (Handle0 arg0@@111 arg1@@48 arg2@@9)) ))))
(assert (forall ((t0@@12 T@U) (heap@@1 T@U) (h@@20 T@U) (r@@6 T@U) (rd T@U) ) (!  (=> (and (and (and (and (= (type t0@@12) TyType) (= (type heap@@1) (MapType0Type refType MapType1Type))) (= (type h@@20) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@6) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (Apply0 t0@@12 heap@@1 (Handle0 h@@20 r@@6 rd)) (MapType0Select h@@20 heap@@1))) :qid |unknown.0:0| :skolemid |664| :pattern ( (Apply0 t0@@12 heap@@1 (Handle0 h@@20 r@@6 rd))) )))
(assert (forall ((t0@@13 T@U) (heap@@2 T@U) (h@@21 T@U) (r@@7 T@U) (rd@@0 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@13) TyType) (= (type heap@@2) (MapType0Type refType MapType1Type))) (= (type h@@21) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@7) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@0) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (U_2_bool (MapType0Select r@@7 heap@@2))) (Requires0 t0@@13 heap@@2 (Handle0 h@@21 r@@7 rd@@0))) :qid |unknown.0:0| :skolemid |665| :pattern ( (Requires0 t0@@13 heap@@2 (Handle0 h@@21 r@@7 rd@@0))) )))
(assert (forall ((arg0@@112 T@U) (arg1@@49 T@U) (arg2@@10 T@U) ) (! (= (type (Reads0 arg0@@112 arg1@@49 arg2@@10)) (MapType0Type BoxType boolType)) :qid |funType:Reads0| :pattern ( (Reads0 arg0@@112 arg1@@49 arg2@@10)) )))
(assert (forall ((t0@@14 T@U) (heap@@3 T@U) (h@@22 T@U) (r@@8 T@U) (rd@@1 T@U) (bx@@40 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@14) TyType) (= (type heap@@3) (MapType0Type refType MapType1Type))) (= (type h@@22) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@8) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@1) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (type bx@@40) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads0 t0@@14 heap@@3 (Handle0 h@@22 r@@8 rd@@1)) bx@@40)) (U_2_bool (MapType0Select (MapType0Select rd@@1 heap@@3) bx@@40))) (=> (U_2_bool (MapType0Select (MapType0Select rd@@1 heap@@3) bx@@40)) (U_2_bool (MapType0Select (Reads0 t0@@14 heap@@3 (Handle0 h@@22 r@@8 rd@@1)) bx@@40))))) :qid |unknown.0:0| :skolemid |666| :pattern ( (MapType0Select (Reads0 t0@@14 heap@@3 (Handle0 h@@22 r@@8 rd@@1)) bx@@40)) )))
(assert (forall ((t0@@15 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@5 T@U) ) (!  (=> (and (and (and (and (= (type t0@@15) TyType) (= (type h0@@0) (MapType0Type refType MapType1Type))) (= (type h1@@0) (MapType0Type refType MapType1Type))) (= (type f@@5) HandleTypeType)) (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) ($Is f@@5 (Tclass._System.___hFunc0 t0@@15))) (forall ((o@@54 T@U) (fld T@U) ) (! (let ((a@@82 (FieldTypeInv0 (type fld)))) (=> (and (and (= (type o@@54) refType) (= (type fld) (FieldType a@@82))) (and (not (= o@@54 null)) (U_2_bool (MapType0Select (Reads0 t0@@15 h0@@0 f@@5) ($Box o@@54))))) (= (MapType1Select (MapType0Select h0@@0 o@@54) fld) (MapType1Select (MapType0Select h1@@0 o@@54) fld)))) :qid |unknown.0:0| :skolemid |667| :no-pattern (type o@@54) :no-pattern (type fld) :no-pattern (U_2_int o@@54) :no-pattern (U_2_bool o@@54) :no-pattern (U_2_int fld) :no-pattern (U_2_bool fld) )))) (= (Reads0 t0@@15 h0@@0 f@@5) (Reads0 t0@@15 h1@@0 f@@5))) :qid |unknown.0:0| :skolemid |668| :pattern ( ($HeapSucc h0@@0 h1@@0) (Reads0 t0@@15 h1@@0 f@@5)) )))
(assert (forall ((t0@@16 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@6 T@U) ) (!  (=> (and (and (and (and (= (type t0@@16) TyType) (= (type h0@@1) (MapType0Type refType MapType1Type))) (= (type h1@@1) (MapType0Type refType MapType1Type))) (= (type f@@6) HandleTypeType)) (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) ($Is f@@6 (Tclass._System.___hFunc0 t0@@16))) (forall ((o@@55 T@U) (fld@@0 T@U) ) (! (let ((a@@83 (FieldTypeInv0 (type fld@@0)))) (=> (and (and (= (type o@@55) refType) (= (type fld@@0) (FieldType a@@83))) (and (not (= o@@55 null)) (U_2_bool (MapType0Select (Reads0 t0@@16 h1@@1 f@@6) ($Box o@@55))))) (= (MapType1Select (MapType0Select h0@@1 o@@55) fld@@0) (MapType1Select (MapType0Select h1@@1 o@@55) fld@@0)))) :qid |unknown.0:0| :skolemid |669| :no-pattern (type o@@55) :no-pattern (type fld@@0) :no-pattern (U_2_int o@@55) :no-pattern (U_2_bool o@@55) :no-pattern (U_2_int fld@@0) :no-pattern (U_2_bool fld@@0) )))) (= (Reads0 t0@@16 h0@@1 f@@6) (Reads0 t0@@16 h1@@1 f@@6))) :qid |unknown.0:0| :skolemid |670| :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads0 t0@@16 h1@@1 f@@6)) )))
(assert (forall ((t0@@17 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@7 T@U) ) (!  (=> (and (and (and (and (= (type t0@@17) TyType) (= (type h0@@2) (MapType0Type refType MapType1Type))) (= (type h1@@2) (MapType0Type refType MapType1Type))) (= (type f@@7) HandleTypeType)) (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) ($Is f@@7 (Tclass._System.___hFunc0 t0@@17))) (forall ((o@@56 T@U) (fld@@1 T@U) ) (! (let ((a@@84 (FieldTypeInv0 (type fld@@1)))) (=> (and (and (= (type o@@56) refType) (= (type fld@@1) (FieldType a@@84))) (and (not (= o@@56 null)) (U_2_bool (MapType0Select (Reads0 t0@@17 h0@@2 f@@7) ($Box o@@56))))) (= (MapType1Select (MapType0Select h0@@2 o@@56) fld@@1) (MapType1Select (MapType0Select h1@@2 o@@56) fld@@1)))) :qid |unknown.0:0| :skolemid |671| :no-pattern (type o@@56) :no-pattern (type fld@@1) :no-pattern (U_2_int o@@56) :no-pattern (U_2_bool o@@56) :no-pattern (U_2_int fld@@1) :no-pattern (U_2_bool fld@@1) )))) (and (=> (Requires0 t0@@17 h0@@2 f@@7) (Requires0 t0@@17 h1@@2 f@@7)) (=> (Requires0 t0@@17 h1@@2 f@@7) (Requires0 t0@@17 h0@@2 f@@7)))) :qid |unknown.0:0| :skolemid |672| :pattern ( ($HeapSucc h0@@2 h1@@2) (Requires0 t0@@17 h1@@2 f@@7)) )))
(assert (forall ((t0@@18 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@8 T@U) ) (!  (=> (and (and (and (and (= (type t0@@18) TyType) (= (type h0@@3) (MapType0Type refType MapType1Type))) (= (type h1@@3) (MapType0Type refType MapType1Type))) (= (type f@@8) HandleTypeType)) (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) ($Is f@@8 (Tclass._System.___hFunc0 t0@@18))) (forall ((o@@57 T@U) (fld@@2 T@U) ) (! (let ((a@@85 (FieldTypeInv0 (type fld@@2)))) (=> (and (and (= (type o@@57) refType) (= (type fld@@2) (FieldType a@@85))) (and (not (= o@@57 null)) (U_2_bool (MapType0Select (Reads0 t0@@18 h1@@3 f@@8) ($Box o@@57))))) (= (MapType1Select (MapType0Select h0@@3 o@@57) fld@@2) (MapType1Select (MapType0Select h1@@3 o@@57) fld@@2)))) :qid |unknown.0:0| :skolemid |673| :no-pattern (type o@@57) :no-pattern (type fld@@2) :no-pattern (U_2_int o@@57) :no-pattern (U_2_bool o@@57) :no-pattern (U_2_int fld@@2) :no-pattern (U_2_bool fld@@2) )))) (and (=> (Requires0 t0@@18 h0@@3 f@@8) (Requires0 t0@@18 h1@@3 f@@8)) (=> (Requires0 t0@@18 h1@@3 f@@8) (Requires0 t0@@18 h0@@3 f@@8)))) :qid |unknown.0:0| :skolemid |674| :pattern ( ($HeapSucc h0@@3 h1@@3) (Requires0 t0@@18 h1@@3 f@@8)) )))
(assert (forall ((t0@@19 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@9 T@U) ) (!  (=> (and (and (and (and (= (type t0@@19) TyType) (= (type h0@@4) (MapType0Type refType MapType1Type))) (= (type h1@@4) (MapType0Type refType MapType1Type))) (= (type f@@9) HandleTypeType)) (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) ($Is f@@9 (Tclass._System.___hFunc0 t0@@19))) (forall ((o@@58 T@U) (fld@@3 T@U) ) (! (let ((a@@86 (FieldTypeInv0 (type fld@@3)))) (=> (and (and (= (type o@@58) refType) (= (type fld@@3) (FieldType a@@86))) (and (not (= o@@58 null)) (U_2_bool (MapType0Select (Reads0 t0@@19 h0@@4 f@@9) ($Box o@@58))))) (= (MapType1Select (MapType0Select h0@@4 o@@58) fld@@3) (MapType1Select (MapType0Select h1@@4 o@@58) fld@@3)))) :qid |unknown.0:0| :skolemid |675| :no-pattern (type o@@58) :no-pattern (type fld@@3) :no-pattern (U_2_int o@@58) :no-pattern (U_2_bool o@@58) :no-pattern (U_2_int fld@@3) :no-pattern (U_2_bool fld@@3) )))) (= (Apply0 t0@@19 h0@@4 f@@9) (Apply0 t0@@19 h1@@4 f@@9))) :qid |unknown.0:0| :skolemid |676| :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply0 t0@@19 h1@@4 f@@9)) )))
(assert (forall ((t0@@20 T@U) (h0@@5 T@U) (h1@@5 T@U) (f@@10 T@U) ) (!  (=> (and (and (and (and (= (type t0@@20) TyType) (= (type h0@@5) (MapType0Type refType MapType1Type))) (= (type h1@@5) (MapType0Type refType MapType1Type))) (= (type f@@10) HandleTypeType)) (and (and (and ($HeapSucc h0@@5 h1@@5) (and ($IsGoodHeap h0@@5) ($IsGoodHeap h1@@5))) ($Is f@@10 (Tclass._System.___hFunc0 t0@@20))) (forall ((o@@59 T@U) (fld@@4 T@U) ) (! (let ((a@@87 (FieldTypeInv0 (type fld@@4)))) (=> (and (and (= (type o@@59) refType) (= (type fld@@4) (FieldType a@@87))) (and (not (= o@@59 null)) (U_2_bool (MapType0Select (Reads0 t0@@20 h1@@5 f@@10) ($Box o@@59))))) (= (MapType1Select (MapType0Select h0@@5 o@@59) fld@@4) (MapType1Select (MapType0Select h1@@5 o@@59) fld@@4)))) :qid |unknown.0:0| :skolemid |677| :no-pattern (type o@@59) :no-pattern (type fld@@4) :no-pattern (U_2_int o@@59) :no-pattern (U_2_bool o@@59) :no-pattern (U_2_int fld@@4) :no-pattern (U_2_bool fld@@4) )))) (= (Apply0 t0@@20 h0@@5 f@@10) (Apply0 t0@@20 h1@@5 f@@10))) :qid |unknown.0:0| :skolemid |678| :pattern ( ($HeapSucc h0@@5 h1@@5) (Apply0 t0@@20 h1@@5 f@@10)) )))
(assert (forall ((t0@@21 T@U) (heap@@4 T@U) (f@@11 T@U) ) (!  (=> (and (and (and (= (type t0@@21) TyType) (= (type heap@@4) (MapType0Type refType MapType1Type))) (= (type f@@11) HandleTypeType)) (and ($IsGoodHeap heap@@4) ($Is f@@11 (Tclass._System.___hFunc0 t0@@21)))) (and (=> (|Set#Equal| (Reads0 t0@@21 $OneHeap f@@11) (|Set#Empty| BoxType)) (|Set#Equal| (Reads0 t0@@21 heap@@4 f@@11) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads0 t0@@21 heap@@4 f@@11) (|Set#Empty| BoxType)) (|Set#Equal| (Reads0 t0@@21 $OneHeap f@@11) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |679| :pattern ( (Reads0 t0@@21 $OneHeap f@@11) ($IsGoodHeap heap@@4)) :pattern ( (Reads0 t0@@21 heap@@4 f@@11)) )))
(assert (forall ((t0@@22 T@U) (heap@@5 T@U) (f@@12 T@U) ) (!  (=> (and (and (and (= (type t0@@22) TyType) (= (type heap@@5) (MapType0Type refType MapType1Type))) (= (type f@@12) HandleTypeType)) (and (and ($IsGoodHeap heap@@5) ($Is f@@12 (Tclass._System.___hFunc0 t0@@22))) (|Set#Equal| (Reads0 t0@@22 $OneHeap f@@12) (|Set#Empty| BoxType)))) (and (=> (Requires0 t0@@22 $OneHeap f@@12) (Requires0 t0@@22 heap@@5 f@@12)) (=> (Requires0 t0@@22 heap@@5 f@@12) (Requires0 t0@@22 $OneHeap f@@12)))) :qid |unknown.0:0| :skolemid |680| :pattern ( (Requires0 t0@@22 $OneHeap f@@12) ($IsGoodHeap heap@@5)) :pattern ( (Requires0 t0@@22 heap@@5 f@@12)) )))
(assert (forall ((f@@13 T@U) (t0@@23 T@U) ) (!  (=> (and (= (type f@@13) HandleTypeType) (= (type t0@@23) TyType)) (and (=> ($Is f@@13 (Tclass._System.___hFunc0 t0@@23)) (forall ((h@@23 T@U) ) (!  (=> (= (type h@@23) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap h@@23) (Requires0 t0@@23 h@@23 f@@13)) ($IsBox (Apply0 t0@@23 h@@23 f@@13) t0@@23))) :qid |DafnyPre.521:12| :skolemid |681| :pattern ( (Apply0 t0@@23 h@@23 f@@13)) ))) (=> (forall ((h@@24 T@U) ) (!  (=> (= (type h@@24) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap h@@24) (Requires0 t0@@23 h@@24 f@@13)) ($IsBox (Apply0 t0@@23 h@@24 f@@13) t0@@23))) :qid |DafnyPre.521:12| :skolemid |681| :pattern ( (Apply0 t0@@23 h@@24 f@@13)) )) ($Is f@@13 (Tclass._System.___hFunc0 t0@@23))))) :qid |unknown.0:0| :skolemid |682| :pattern ( ($Is f@@13 (Tclass._System.___hFunc0 t0@@23))) )))
(assert (forall ((f@@14 T@U) (t0@@24 T@U) (u0 T@U) ) (!  (=> (and (and (and (= (type f@@14) HandleTypeType) (= (type t0@@24) TyType)) (= (type u0) TyType)) (and ($Is f@@14 (Tclass._System.___hFunc0 t0@@24)) (forall ((bx@@41 T@U) ) (!  (=> (and (= (type bx@@41) BoxType) ($IsBox bx@@41 t0@@24)) ($IsBox bx@@41 u0)) :qid |unknown.0:0| :skolemid |683| :pattern ( ($IsBox bx@@41 t0@@24)) :pattern ( ($IsBox bx@@41 u0)) )))) ($Is f@@14 (Tclass._System.___hFunc0 u0))) :qid |unknown.0:0| :skolemid |684| :pattern ( ($Is f@@14 (Tclass._System.___hFunc0 t0@@24)) ($Is f@@14 (Tclass._System.___hFunc0 u0))) )))
(assert (forall ((f@@15 T@U) (t0@@25 T@U) (h@@25 T@U) ) (!  (=> (and (and (and (= (type f@@15) HandleTypeType) (= (type t0@@25) TyType)) (= (type h@@25) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@25)) (and (=> ($IsAlloc f@@15 (Tclass._System.___hFunc0 t0@@25) h@@25) (=> (Requires0 t0@@25 h@@25 f@@15) (forall ((r@@9 T@U) ) (!  (=> (= (type r@@9) refType) (=> (and (not (= r@@9 null)) (U_2_bool (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@9)))) (U_2_bool (MapType1Select (MapType0Select h@@25 r@@9) alloc)))) :qid |unknown.0:0| :skolemid |685| :pattern ( (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@9))) )))) (=> (=> (Requires0 t0@@25 h@@25 f@@15) (forall ((r@@10 T@U) ) (!  (=> (= (type r@@10) refType) (=> (and (not (= r@@10 null)) (U_2_bool (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@10)))) (U_2_bool (MapType1Select (MapType0Select h@@25 r@@10) alloc)))) :qid |unknown.0:0| :skolemid |685| :pattern ( (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@10))) ))) ($IsAlloc f@@15 (Tclass._System.___hFunc0 t0@@25) h@@25)))) :qid |unknown.0:0| :skolemid |686| :pattern ( ($IsAlloc f@@15 (Tclass._System.___hFunc0 t0@@25) h@@25)) )))
(assert (forall ((f@@16 T@U) (t0@@26 T@U) (h@@26 T@U) ) (!  (=> (and (and (and (and (= (type f@@16) HandleTypeType) (= (type t0@@26) TyType)) (= (type h@@26) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@26) ($IsAlloc f@@16 (Tclass._System.___hFunc0 t0@@26) h@@26))) (Requires0 t0@@26 h@@26 f@@16)) ($IsAllocBox (Apply0 t0@@26 h@@26 f@@16) t0@@26 h@@26)) :qid |unknown.0:0| :skolemid |687| :pattern ( ($IsAlloc f@@16 (Tclass._System.___hFunc0 t0@@26) h@@26)) )))
(assert (forall ((arg0@@113 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0 arg0@@113)) TyType) :qid |funType:Tclass._System.___hPartialFunc0| :pattern ( (Tclass._System.___hPartialFunc0 arg0@@113)) )))
(assert (forall ((|#$R@@2| T@U) ) (!  (=> (= (type |#$R@@2|) TyType) (= (Tag (Tclass._System.___hPartialFunc0 |#$R@@2|)) Tagclass._System.___hPartialFunc0)) :qid |unknown.0:0| :skolemid |688| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@2|)) )))
(assert (forall ((arg0@@114 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0_0 arg0@@114)) TyType) :qid |funType:Tclass._System.___hPartialFunc0_0| :pattern ( (Tclass._System.___hPartialFunc0_0 arg0@@114)) )))
(assert (forall ((|#$R@@3| T@U) ) (!  (=> (= (type |#$R@@3|) TyType) (= (Tclass._System.___hPartialFunc0_0 (Tclass._System.___hPartialFunc0 |#$R@@3|)) |#$R@@3|)) :qid |unknown.0:0| :skolemid |689| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@3|)) )))
(assert (forall ((|#$R@@4| T@U) (bx@@42 T@U) ) (!  (=> (and (and (= (type |#$R@@4|) TyType) (= (type bx@@42) BoxType)) ($IsBox bx@@42 (Tclass._System.___hPartialFunc0 |#$R@@4|))) (and (= ($Box ($Unbox HandleTypeType bx@@42)) bx@@42) ($Is ($Unbox HandleTypeType bx@@42) (Tclass._System.___hPartialFunc0 |#$R@@4|)))) :qid |unknown.0:0| :skolemid |690| :pattern ( ($IsBox bx@@42 (Tclass._System.___hPartialFunc0 |#$R@@4|))) )))
(assert (forall ((|#$R@@5| T@U) (|f#0| T@U) ) (!  (=> (and (= (type |#$R@@5|) TyType) (= (type |f#0|) HandleTypeType)) (and (=> ($Is |f#0| (Tclass._System.___hPartialFunc0 |#$R@@5|)) (and ($Is |f#0| (Tclass._System.___hFunc0 |#$R@@5|)) (|Set#Equal| (Reads0 |#$R@@5| $OneHeap |f#0|) (|Set#Empty| BoxType)))) (=> (and ($Is |f#0| (Tclass._System.___hFunc0 |#$R@@5|)) (|Set#Equal| (Reads0 |#$R@@5| $OneHeap |f#0|) (|Set#Empty| BoxType))) ($Is |f#0| (Tclass._System.___hPartialFunc0 |#$R@@5|))))) :qid |unknown.0:0| :skolemid |691| :pattern ( ($Is |f#0| (Tclass._System.___hPartialFunc0 |#$R@@5|))) )))
(assert (forall ((|#$R@@6| T@U) (|f#0@@0| T@U) ($h@@7 T@U) ) (!  (=> (and (and (= (type |#$R@@6|) TyType) (= (type |f#0@@0|) HandleTypeType)) (= (type $h@@7) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@6|) $h@@7) ($IsAlloc |f#0@@0| (Tclass._System.___hFunc0 |#$R@@6|) $h@@7)) (=> ($IsAlloc |f#0@@0| (Tclass._System.___hFunc0 |#$R@@6|) $h@@7) ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@6|) $h@@7)))) :qid |unknown.0:0| :skolemid |692| :pattern ( ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@6|) $h@@7)) )))
(assert (forall ((arg0@@115 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0 arg0@@115)) TyType) :qid |funType:Tclass._System.___hTotalFunc0| :pattern ( (Tclass._System.___hTotalFunc0 arg0@@115)) )))
(assert (forall ((|#$R@@7| T@U) ) (!  (=> (= (type |#$R@@7|) TyType) (= (Tag (Tclass._System.___hTotalFunc0 |#$R@@7|)) Tagclass._System.___hTotalFunc0)) :qid |unknown.0:0| :skolemid |693| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@7|)) )))
(assert (forall ((arg0@@116 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0_0 arg0@@116)) TyType) :qid |funType:Tclass._System.___hTotalFunc0_0| :pattern ( (Tclass._System.___hTotalFunc0_0 arg0@@116)) )))
(assert (forall ((|#$R@@8| T@U) ) (!  (=> (= (type |#$R@@8|) TyType) (= (Tclass._System.___hTotalFunc0_0 (Tclass._System.___hTotalFunc0 |#$R@@8|)) |#$R@@8|)) :qid |unknown.0:0| :skolemid |694| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@8|)) )))
(assert (forall ((|#$R@@9| T@U) (bx@@43 T@U) ) (!  (=> (and (and (= (type |#$R@@9|) TyType) (= (type bx@@43) BoxType)) ($IsBox bx@@43 (Tclass._System.___hTotalFunc0 |#$R@@9|))) (and (= ($Box ($Unbox HandleTypeType bx@@43)) bx@@43) ($Is ($Unbox HandleTypeType bx@@43) (Tclass._System.___hTotalFunc0 |#$R@@9|)))) :qid |unknown.0:0| :skolemid |695| :pattern ( ($IsBox bx@@43 (Tclass._System.___hTotalFunc0 |#$R@@9|))) )))
(assert (forall ((|#$R@@10| T@U) (|f#0@@1| T@U) ) (!  (=> (and (= (type |#$R@@10|) TyType) (= (type |f#0@@1|) HandleTypeType)) (and (=> ($Is |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|)) (and ($Is |f#0@@1| (Tclass._System.___hPartialFunc0 |#$R@@10|)) (Requires0 |#$R@@10| $OneHeap |f#0@@1|))) (=> (and ($Is |f#0@@1| (Tclass._System.___hPartialFunc0 |#$R@@10|)) (Requires0 |#$R@@10| $OneHeap |f#0@@1|)) ($Is |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|))))) :qid |unknown.0:0| :skolemid |696| :pattern ( ($Is |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|))) )))
(assert (forall ((|#$R@@11| T@U) (|f#0@@2| T@U) ($h@@8 T@U) ) (!  (=> (and (and (= (type |#$R@@11|) TyType) (= (type |f#0@@2|) HandleTypeType)) (= (type $h@@8) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc0 |#$R@@11|) $h@@8) ($IsAlloc |f#0@@2| (Tclass._System.___hPartialFunc0 |#$R@@11|) $h@@8)) (=> ($IsAlloc |f#0@@2| (Tclass._System.___hPartialFunc0 |#$R@@11|) $h@@8) ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc0 |#$R@@11|) $h@@8)))) :qid |unknown.0:0| :skolemid |697| :pattern ( ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc0 |#$R@@11|) $h@@8)) )))
(assert (= (type Tclass._System.__default) TyType))
(assert (= (Tag Tclass._System.__default) Tagclass._System.__default))
(assert (forall ((bx@@44 T@U) ) (!  (=> (and (= (type bx@@44) BoxType) ($IsBox bx@@44 Tclass._System.__default)) (and (= ($Box ($Unbox refType bx@@44)) bx@@44) ($Is ($Unbox refType bx@@44) Tclass._System.__default))) :qid |unknown.0:0| :skolemid |698| :pattern ( ($IsBox bx@@44 Tclass._System.__default)) )))
(assert (forall (($o@@7 T@U) ) (!  (=> (= (type $o@@7) refType) (and (=> ($Is $o@@7 Tclass._System.__default) (or (= $o@@7 null) (= (dtype $o@@7) Tclass._System.__default))) (=> (or (= $o@@7 null) (= (dtype $o@@7) Tclass._System.__default)) ($Is $o@@7 Tclass._System.__default)))) :qid |unknown.0:0| :skolemid |699| :pattern ( ($Is $o@@7 Tclass._System.__default)) )))
(assert (forall (($o@@8 T@U) ($h@@9 T@U) ) (!  (=> (and (= (type $o@@8) refType) (= (type $h@@9) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@8 Tclass._System.__default $h@@9) (or (= $o@@8 null) (U_2_bool (MapType1Select (MapType0Select $h@@9 $o@@8) alloc)))) (=> (or (= $o@@8 null) (U_2_bool (MapType1Select (MapType0Select $h@@9 $o@@8) alloc))) ($IsAlloc $o@@8 Tclass._System.__default $h@@9)))) :qid |unknown.0:0| :skolemid |700| :pattern ( ($IsAlloc $o@@8 Tclass._System.__default $h@@9)) )))
(assert  (=> true (forall ((|#$A| T@U) (|#$B| T@U) (|a#0| T@U) (|b#0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A|) TyType) (= (type |#$B|) TyType)) (= (type |a#0|) BoxType)) (= (type |b#0|) BoxType)) (or (|_System.__default.rank__is__less__than#canCall| |#$A| |#$B| |a#0| |b#0|) (and ($IsBox |a#0| |#$A|) ($IsBox |b#0| |#$B|)))) true) :qid |unknown.0:0| :skolemid |701| :pattern ( (_System.__default.rank__is__less__than |#$A| |#$B| |a#0| |b#0|)) ))))
(assert (forall ((|#$A@@0| T@U) (|#$B@@0| T@U) (|a#0@@0| T@U) (|b#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A@@0|) TyType) (= (type |#$B@@0|) TyType)) (= (type |a#0@@0|) BoxType)) (= (type |b#0@@0|) BoxType)) (and ($IsBox |a#0@@0| |#$A@@0|) ($IsBox |b#0@@0| |#$B@@0|))) (and (=> (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|) true) (=> true (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|)))) :qid |unknown.0:0| :skolemid |702| :pattern ( (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|)) )))
(assert (forall ((arg0@@117 T@U) (arg1@@50 T@U) (arg2@@11 T@U) ) (! (= (type (Tclass._System.___hFunc2 arg0@@117 arg1@@50 arg2@@11)) TyType) :qid |funType:Tclass._System.___hFunc2| :pattern ( (Tclass._System.___hFunc2 arg0@@117 arg1@@50 arg2@@11)) )))
(assert (forall ((|#$T0| T@U) (|#$T1| T@U) (|#$R@@12| T@U) ) (!  (=> (and (and (= (type |#$T0|) TyType) (= (type |#$T1|) TyType)) (= (type |#$R@@12|) TyType)) (= (Tag (Tclass._System.___hFunc2 |#$T0| |#$T1| |#$R@@12|)) Tagclass._System.___hFunc2)) :qid |unknown.0:0| :skolemid |703| :pattern ( (Tclass._System.___hFunc2 |#$T0| |#$T1| |#$R@@12|)) )))
(assert (forall ((arg0@@118 T@U) ) (! (= (type (Tclass._System.___hFunc2_0 arg0@@118)) TyType) :qid |funType:Tclass._System.___hFunc2_0| :pattern ( (Tclass._System.___hFunc2_0 arg0@@118)) )))
(assert (forall ((|#$T0@@0| T@U) (|#$T1@@0| T@U) (|#$R@@13| T@U) ) (!  (=> (and (and (= (type |#$T0@@0|) TyType) (= (type |#$T1@@0|) TyType)) (= (type |#$R@@13|) TyType)) (= (Tclass._System.___hFunc2_0 (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@13|)) |#$T0@@0|)) :qid |unknown.0:0| :skolemid |704| :pattern ( (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@13|)) )))
(assert (forall ((arg0@@119 T@U) ) (! (= (type (Tclass._System.___hFunc2_1 arg0@@119)) TyType) :qid |funType:Tclass._System.___hFunc2_1| :pattern ( (Tclass._System.___hFunc2_1 arg0@@119)) )))
(assert (forall ((|#$T0@@1| T@U) (|#$T1@@1| T@U) (|#$R@@14| T@U) ) (!  (=> (and (and (= (type |#$T0@@1|) TyType) (= (type |#$T1@@1|) TyType)) (= (type |#$R@@14|) TyType)) (= (Tclass._System.___hFunc2_1 (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@14|)) |#$T1@@1|)) :qid |unknown.0:0| :skolemid |705| :pattern ( (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@14|)) )))
(assert (forall ((arg0@@120 T@U) ) (! (= (type (Tclass._System.___hFunc2_2 arg0@@120)) TyType) :qid |funType:Tclass._System.___hFunc2_2| :pattern ( (Tclass._System.___hFunc2_2 arg0@@120)) )))
(assert (forall ((|#$T0@@2| T@U) (|#$T1@@2| T@U) (|#$R@@15| T@U) ) (!  (=> (and (and (= (type |#$T0@@2|) TyType) (= (type |#$T1@@2|) TyType)) (= (type |#$R@@15|) TyType)) (= (Tclass._System.___hFunc2_2 (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@15|)) |#$R@@15|)) :qid |unknown.0:0| :skolemid |706| :pattern ( (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@15|)) )))
(assert (forall ((|#$T0@@3| T@U) (|#$T1@@3| T@U) (|#$R@@16| T@U) (bx@@45 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@3|) TyType) (= (type |#$T1@@3|) TyType)) (= (type |#$R@@16|) TyType)) (= (type bx@@45) BoxType)) ($IsBox bx@@45 (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@16|))) (and (= ($Box ($Unbox HandleTypeType bx@@45)) bx@@45) ($Is ($Unbox HandleTypeType bx@@45) (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@16|)))) :qid |unknown.0:0| :skolemid |707| :pattern ( ($IsBox bx@@45 (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@16|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@121 T@T) (arg1@@51 T@T) (arg2@@12 T@T) (arg3@@1 T@T) ) (! (= (Ctor (MapType2Type arg0@@121 arg1@@51 arg2@@12 arg3@@1)) 21) :qid |ctor:MapType2Type| )) (forall ((arg0@@122 T@T) (arg1@@52 T@T) (arg2@@13 T@T) (arg3@@2 T@T) ) (! (= (MapType2TypeInv0 (MapType2Type arg0@@122 arg1@@52 arg2@@13 arg3@@2)) arg0@@122) :qid |typeInv:MapType2TypeInv0| :pattern ( (MapType2Type arg0@@122 arg1@@52 arg2@@13 arg3@@2)) ))) (forall ((arg0@@123 T@T) (arg1@@53 T@T) (arg2@@14 T@T) (arg3@@3 T@T) ) (! (= (MapType2TypeInv1 (MapType2Type arg0@@123 arg1@@53 arg2@@14 arg3@@3)) arg1@@53) :qid |typeInv:MapType2TypeInv1| :pattern ( (MapType2Type arg0@@123 arg1@@53 arg2@@14 arg3@@3)) ))) (forall ((arg0@@124 T@T) (arg1@@54 T@T) (arg2@@15 T@T) (arg3@@4 T@T) ) (! (= (MapType2TypeInv2 (MapType2Type arg0@@124 arg1@@54 arg2@@15 arg3@@4)) arg2@@15) :qid |typeInv:MapType2TypeInv2| :pattern ( (MapType2Type arg0@@124 arg1@@54 arg2@@15 arg3@@4)) ))) (forall ((arg0@@125 T@T) (arg1@@55 T@T) (arg2@@16 T@T) (arg3@@5 T@T) ) (! (= (MapType2TypeInv3 (MapType2Type arg0@@125 arg1@@55 arg2@@16 arg3@@5)) arg3@@5) :qid |typeInv:MapType2TypeInv3| :pattern ( (MapType2Type arg0@@125 arg1@@55 arg2@@16 arg3@@5)) ))) (forall ((arg0@@126 T@U) (arg1@@56 T@U) (arg2@@17 T@U) (arg3@@6 T@U) ) (! (let ((aVar3 (MapType2TypeInv3 (type arg0@@126)))) (= (type (MapType2Select arg0@@126 arg1@@56 arg2@@17 arg3@@6)) aVar3)) :qid |funType:MapType2Select| :pattern ( (MapType2Select arg0@@126 arg1@@56 arg2@@17 arg3@@6)) ))) (forall ((arg0@@127 T@U) (arg1@@57 T@U) (arg2@@18 T@U) (arg3@@7 T@U) (arg4@@0 T@U) ) (! (let ((aVar3@@0 (type arg4@@0))) (let ((aVar2 (type arg3@@7))) (let ((aVar1@@2 (type arg2@@18))) (let ((aVar0@@0 (type arg1@@57))) (= (type (MapType2Store arg0@@127 arg1@@57 arg2@@18 arg3@@7 arg4@@0)) (MapType2Type aVar0@@0 aVar1@@2 aVar2 aVar3@@0)))))) :qid |funType:MapType2Store| :pattern ( (MapType2Store arg0@@127 arg1@@57 arg2@@18 arg3@@7 arg4@@0)) ))) (forall ((m@@27 T@U) (x0@@5 T@U) (x1 T@U) (x2 T@U) (val@@6 T@U) ) (! (let ((aVar3@@1 (MapType2TypeInv3 (type m@@27)))) (=> (= (type val@@6) aVar3@@1) (= (MapType2Select (MapType2Store m@@27 x0@@5 x1 x2 val@@6) x0@@5 x1 x2) val@@6))) :qid |mapAx0:MapType2Select| :weight 0 ))) (and (and (and (forall ((val@@7 T@U) (m@@28 T@U) (x0@@6 T@U) (x1@@0 T@U) (x2@@0 T@U) (y0@@3 T@U) (y1 T@U) (y2 T@U) ) (!  (or (= x0@@6 y0@@3) (= (MapType2Select (MapType2Store m@@28 x0@@6 x1@@0 x2@@0 val@@7) y0@@3 y1 y2) (MapType2Select m@@28 y0@@3 y1 y2))) :qid |mapAx1:MapType2Select:0| :weight 0 )) (forall ((val@@8 T@U) (m@@29 T@U) (x0@@7 T@U) (x1@@1 T@U) (x2@@1 T@U) (y0@@4 T@U) (y1@@0 T@U) (y2@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType2Select (MapType2Store m@@29 x0@@7 x1@@1 x2@@1 val@@8) y0@@4 y1@@0 y2@@0) (MapType2Select m@@29 y0@@4 y1@@0 y2@@0))) :qid |mapAx1:MapType2Select:1| :weight 0 ))) (forall ((val@@9 T@U) (m@@30 T@U) (x0@@8 T@U) (x1@@2 T@U) (x2@@2 T@U) (y0@@5 T@U) (y1@@1 T@U) (y2@@1 T@U) ) (!  (or (= x2@@2 y2@@1) (= (MapType2Select (MapType2Store m@@30 x0@@8 x1@@2 x2@@2 val@@9) y0@@5 y1@@1 y2@@1) (MapType2Select m@@30 y0@@5 y1@@1 y2@@1))) :qid |mapAx1:MapType2Select:2| :weight 0 ))) (forall ((val@@10 T@U) (m@@31 T@U) (x0@@9 T@U) (x1@@3 T@U) (x2@@3 T@U) (y0@@6 T@U) (y1@@2 T@U) (y2@@2 T@U) ) (!  (or true (= (MapType2Select (MapType2Store m@@31 x0@@9 x1@@3 x2@@3 val@@10) y0@@6 y1@@2 y2@@2) (MapType2Select m@@31 y0@@6 y1@@2 y2@@2))) :qid |mapAx2:MapType2Select| :weight 0 )))) (forall ((arg0@@128 T@U) (arg1@@58 T@U) (arg2@@19 T@U) (arg3@@8 T@U) (arg4@@1 T@U) (arg5 T@U) (arg6 T@U) ) (! (= (type (Apply2 arg0@@128 arg1@@58 arg2@@19 arg3@@8 arg4@@1 arg5 arg6)) BoxType) :qid |funType:Apply2| :pattern ( (Apply2 arg0@@128 arg1@@58 arg2@@19 arg3@@8 arg4@@1 arg5 arg6)) ))) (forall ((arg0@@129 T@U) (arg1@@59 T@U) (arg2@@20 T@U) ) (! (= (type (Handle2 arg0@@129 arg1@@59 arg2@@20)) HandleTypeType) :qid |funType:Handle2| :pattern ( (Handle2 arg0@@129 arg1@@59 arg2@@20)) ))))
(assert (forall ((t0@@27 T@U) (t1@@3 T@U) (t2 T@U) (heap@@6 T@U) (h@@27 T@U) (r@@11 T@U) (rd@@2 T@U) (bx0 T@U) (bx1 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@27) TyType) (= (type t1@@3) TyType)) (= (type t2) TyType)) (= (type heap@@6) (MapType0Type refType MapType1Type))) (= (type h@@27) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@11) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@2) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0) BoxType)) (= (type bx1) BoxType)) (= (Apply2 t0@@27 t1@@3 t2 heap@@6 (Handle2 h@@27 r@@11 rd@@2) bx0 bx1) (MapType2Select h@@27 heap@@6 bx0 bx1))) :qid |unknown.0:0| :skolemid |708| :pattern ( (Apply2 t0@@27 t1@@3 t2 heap@@6 (Handle2 h@@27 r@@11 rd@@2) bx0 bx1)) )))
(assert (forall ((t0@@28 T@U) (t1@@4 T@U) (t2@@0 T@U) (heap@@7 T@U) (h@@28 T@U) (r@@12 T@U) (rd@@3 T@U) (bx0@@0 T@U) (bx1@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@28) TyType) (= (type t1@@4) TyType)) (= (type t2@@0) TyType)) (= (type heap@@7) (MapType0Type refType MapType1Type))) (= (type h@@28) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@12) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@3) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@0) BoxType)) (= (type bx1@@0) BoxType)) (U_2_bool (MapType2Select r@@12 heap@@7 bx0@@0 bx1@@0))) (Requires2 t0@@28 t1@@4 t2@@0 heap@@7 (Handle2 h@@28 r@@12 rd@@3) bx0@@0 bx1@@0)) :qid |unknown.0:0| :skolemid |709| :pattern ( (Requires2 t0@@28 t1@@4 t2@@0 heap@@7 (Handle2 h@@28 r@@12 rd@@3) bx0@@0 bx1@@0)) )))
(assert (forall ((arg0@@130 T@U) (arg1@@60 T@U) (arg2@@21 T@U) (arg3@@9 T@U) (arg4@@2 T@U) (arg5@@0 T@U) (arg6@@0 T@U) ) (! (= (type (Reads2 arg0@@130 arg1@@60 arg2@@21 arg3@@9 arg4@@2 arg5@@0 arg6@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads2| :pattern ( (Reads2 arg0@@130 arg1@@60 arg2@@21 arg3@@9 arg4@@2 arg5@@0 arg6@@0)) )))
(assert (forall ((t0@@29 T@U) (t1@@5 T@U) (t2@@1 T@U) (heap@@8 T@U) (h@@29 T@U) (r@@13 T@U) (rd@@4 T@U) (bx0@@1 T@U) (bx1@@1 T@U) (bx@@46 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@29) TyType) (= (type t1@@5) TyType)) (= (type t2@@1) TyType)) (= (type heap@@8) (MapType0Type refType MapType1Type))) (= (type h@@29) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@13) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@4) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@1) BoxType)) (= (type bx1@@1) BoxType)) (= (type bx@@46) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads2 t0@@29 t1@@5 t2@@1 heap@@8 (Handle2 h@@29 r@@13 rd@@4) bx0@@1 bx1@@1) bx@@46)) (U_2_bool (MapType0Select (MapType2Select rd@@4 heap@@8 bx0@@1 bx1@@1) bx@@46))) (=> (U_2_bool (MapType0Select (MapType2Select rd@@4 heap@@8 bx0@@1 bx1@@1) bx@@46)) (U_2_bool (MapType0Select (Reads2 t0@@29 t1@@5 t2@@1 heap@@8 (Handle2 h@@29 r@@13 rd@@4) bx0@@1 bx1@@1) bx@@46))))) :qid |unknown.0:0| :skolemid |710| :pattern ( (MapType0Select (Reads2 t0@@29 t1@@5 t2@@1 heap@@8 (Handle2 h@@29 r@@13 rd@@4) bx0@@1 bx1@@1) bx@@46)) )))
(assert (forall ((t0@@30 T@U) (t1@@6 T@U) (t2@@2 T@U) (h0@@6 T@U) (h1@@6 T@U) (f@@17 T@U) (bx0@@2 T@U) (bx1@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@30) TyType) (= (type t1@@6) TyType)) (= (type t2@@2) TyType)) (= (type h0@@6) (MapType0Type refType MapType1Type))) (= (type h1@@6) (MapType0Type refType MapType1Type))) (= (type f@@17) HandleTypeType)) (= (type bx0@@2) BoxType)) (= (type bx1@@2) BoxType)) (and (and (and ($HeapSucc h0@@6 h1@@6) (and ($IsGoodHeap h0@@6) ($IsGoodHeap h1@@6))) (and (and ($IsBox bx0@@2 t0@@30) ($IsBox bx1@@2 t1@@6)) ($Is f@@17 (Tclass._System.___hFunc2 t0@@30 t1@@6 t2@@2)))) (forall ((o@@60 T@U) (fld@@5 T@U) ) (! (let ((a@@88 (FieldTypeInv0 (type fld@@5)))) (=> (and (and (= (type o@@60) refType) (= (type fld@@5) (FieldType a@@88))) (and (not (= o@@60 null)) (U_2_bool (MapType0Select (Reads2 t0@@30 t1@@6 t2@@2 h0@@6 f@@17 bx0@@2 bx1@@2) ($Box o@@60))))) (= (MapType1Select (MapType0Select h0@@6 o@@60) fld@@5) (MapType1Select (MapType0Select h1@@6 o@@60) fld@@5)))) :qid |unknown.0:0| :skolemid |711| :no-pattern (type o@@60) :no-pattern (type fld@@5) :no-pattern (U_2_int o@@60) :no-pattern (U_2_bool o@@60) :no-pattern (U_2_int fld@@5) :no-pattern (U_2_bool fld@@5) )))) (= (Reads2 t0@@30 t1@@6 t2@@2 h0@@6 f@@17 bx0@@2 bx1@@2) (Reads2 t0@@30 t1@@6 t2@@2 h1@@6 f@@17 bx0@@2 bx1@@2))) :qid |unknown.0:0| :skolemid |712| :pattern ( ($HeapSucc h0@@6 h1@@6) (Reads2 t0@@30 t1@@6 t2@@2 h1@@6 f@@17 bx0@@2 bx1@@2)) )))
(assert (forall ((t0@@31 T@U) (t1@@7 T@U) (t2@@3 T@U) (h0@@7 T@U) (h1@@7 T@U) (f@@18 T@U) (bx0@@3 T@U) (bx1@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@31) TyType) (= (type t1@@7) TyType)) (= (type t2@@3) TyType)) (= (type h0@@7) (MapType0Type refType MapType1Type))) (= (type h1@@7) (MapType0Type refType MapType1Type))) (= (type f@@18) HandleTypeType)) (= (type bx0@@3) BoxType)) (= (type bx1@@3) BoxType)) (and (and (and ($HeapSucc h0@@7 h1@@7) (and ($IsGoodHeap h0@@7) ($IsGoodHeap h1@@7))) (and (and ($IsBox bx0@@3 t0@@31) ($IsBox bx1@@3 t1@@7)) ($Is f@@18 (Tclass._System.___hFunc2 t0@@31 t1@@7 t2@@3)))) (forall ((o@@61 T@U) (fld@@6 T@U) ) (! (let ((a@@89 (FieldTypeInv0 (type fld@@6)))) (=> (and (and (= (type o@@61) refType) (= (type fld@@6) (FieldType a@@89))) (and (not (= o@@61 null)) (U_2_bool (MapType0Select (Reads2 t0@@31 t1@@7 t2@@3 h1@@7 f@@18 bx0@@3 bx1@@3) ($Box o@@61))))) (= (MapType1Select (MapType0Select h0@@7 o@@61) fld@@6) (MapType1Select (MapType0Select h1@@7 o@@61) fld@@6)))) :qid |unknown.0:0| :skolemid |713| :no-pattern (type o@@61) :no-pattern (type fld@@6) :no-pattern (U_2_int o@@61) :no-pattern (U_2_bool o@@61) :no-pattern (U_2_int fld@@6) :no-pattern (U_2_bool fld@@6) )))) (= (Reads2 t0@@31 t1@@7 t2@@3 h0@@7 f@@18 bx0@@3 bx1@@3) (Reads2 t0@@31 t1@@7 t2@@3 h1@@7 f@@18 bx0@@3 bx1@@3))) :qid |unknown.0:0| :skolemid |714| :pattern ( ($HeapSucc h0@@7 h1@@7) (Reads2 t0@@31 t1@@7 t2@@3 h1@@7 f@@18 bx0@@3 bx1@@3)) )))
(assert (forall ((t0@@32 T@U) (t1@@8 T@U) (t2@@4 T@U) (h0@@8 T@U) (h1@@8 T@U) (f@@19 T@U) (bx0@@4 T@U) (bx1@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@32) TyType) (= (type t1@@8) TyType)) (= (type t2@@4) TyType)) (= (type h0@@8) (MapType0Type refType MapType1Type))) (= (type h1@@8) (MapType0Type refType MapType1Type))) (= (type f@@19) HandleTypeType)) (= (type bx0@@4) BoxType)) (= (type bx1@@4) BoxType)) (and (and (and ($HeapSucc h0@@8 h1@@8) (and ($IsGoodHeap h0@@8) ($IsGoodHeap h1@@8))) (and (and ($IsBox bx0@@4 t0@@32) ($IsBox bx1@@4 t1@@8)) ($Is f@@19 (Tclass._System.___hFunc2 t0@@32 t1@@8 t2@@4)))) (forall ((o@@62 T@U) (fld@@7 T@U) ) (! (let ((a@@90 (FieldTypeInv0 (type fld@@7)))) (=> (and (and (= (type o@@62) refType) (= (type fld@@7) (FieldType a@@90))) (and (not (= o@@62 null)) (U_2_bool (MapType0Select (Reads2 t0@@32 t1@@8 t2@@4 h0@@8 f@@19 bx0@@4 bx1@@4) ($Box o@@62))))) (= (MapType1Select (MapType0Select h0@@8 o@@62) fld@@7) (MapType1Select (MapType0Select h1@@8 o@@62) fld@@7)))) :qid |unknown.0:0| :skolemid |715| :no-pattern (type o@@62) :no-pattern (type fld@@7) :no-pattern (U_2_int o@@62) :no-pattern (U_2_bool o@@62) :no-pattern (U_2_int fld@@7) :no-pattern (U_2_bool fld@@7) )))) (and (=> (Requires2 t0@@32 t1@@8 t2@@4 h0@@8 f@@19 bx0@@4 bx1@@4) (Requires2 t0@@32 t1@@8 t2@@4 h1@@8 f@@19 bx0@@4 bx1@@4)) (=> (Requires2 t0@@32 t1@@8 t2@@4 h1@@8 f@@19 bx0@@4 bx1@@4) (Requires2 t0@@32 t1@@8 t2@@4 h0@@8 f@@19 bx0@@4 bx1@@4)))) :qid |unknown.0:0| :skolemid |716| :pattern ( ($HeapSucc h0@@8 h1@@8) (Requires2 t0@@32 t1@@8 t2@@4 h1@@8 f@@19 bx0@@4 bx1@@4)) )))
(assert (forall ((t0@@33 T@U) (t1@@9 T@U) (t2@@5 T@U) (h0@@9 T@U) (h1@@9 T@U) (f@@20 T@U) (bx0@@5 T@U) (bx1@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@33) TyType) (= (type t1@@9) TyType)) (= (type t2@@5) TyType)) (= (type h0@@9) (MapType0Type refType MapType1Type))) (= (type h1@@9) (MapType0Type refType MapType1Type))) (= (type f@@20) HandleTypeType)) (= (type bx0@@5) BoxType)) (= (type bx1@@5) BoxType)) (and (and (and ($HeapSucc h0@@9 h1@@9) (and ($IsGoodHeap h0@@9) ($IsGoodHeap h1@@9))) (and (and ($IsBox bx0@@5 t0@@33) ($IsBox bx1@@5 t1@@9)) ($Is f@@20 (Tclass._System.___hFunc2 t0@@33 t1@@9 t2@@5)))) (forall ((o@@63 T@U) (fld@@8 T@U) ) (! (let ((a@@91 (FieldTypeInv0 (type fld@@8)))) (=> (and (and (= (type o@@63) refType) (= (type fld@@8) (FieldType a@@91))) (and (not (= o@@63 null)) (U_2_bool (MapType0Select (Reads2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5) ($Box o@@63))))) (= (MapType1Select (MapType0Select h0@@9 o@@63) fld@@8) (MapType1Select (MapType0Select h1@@9 o@@63) fld@@8)))) :qid |unknown.0:0| :skolemid |717| :no-pattern (type o@@63) :no-pattern (type fld@@8) :no-pattern (U_2_int o@@63) :no-pattern (U_2_bool o@@63) :no-pattern (U_2_int fld@@8) :no-pattern (U_2_bool fld@@8) )))) (and (=> (Requires2 t0@@33 t1@@9 t2@@5 h0@@9 f@@20 bx0@@5 bx1@@5) (Requires2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5)) (=> (Requires2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5) (Requires2 t0@@33 t1@@9 t2@@5 h0@@9 f@@20 bx0@@5 bx1@@5)))) :qid |unknown.0:0| :skolemid |718| :pattern ( ($HeapSucc h0@@9 h1@@9) (Requires2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5)) )))
(assert (forall ((t0@@34 T@U) (t1@@10 T@U) (t2@@6 T@U) (h0@@10 T@U) (h1@@10 T@U) (f@@21 T@U) (bx0@@6 T@U) (bx1@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@34) TyType) (= (type t1@@10) TyType)) (= (type t2@@6) TyType)) (= (type h0@@10) (MapType0Type refType MapType1Type))) (= (type h1@@10) (MapType0Type refType MapType1Type))) (= (type f@@21) HandleTypeType)) (= (type bx0@@6) BoxType)) (= (type bx1@@6) BoxType)) (and (and (and ($HeapSucc h0@@10 h1@@10) (and ($IsGoodHeap h0@@10) ($IsGoodHeap h1@@10))) (and (and ($IsBox bx0@@6 t0@@34) ($IsBox bx1@@6 t1@@10)) ($Is f@@21 (Tclass._System.___hFunc2 t0@@34 t1@@10 t2@@6)))) (forall ((o@@64 T@U) (fld@@9 T@U) ) (! (let ((a@@92 (FieldTypeInv0 (type fld@@9)))) (=> (and (and (= (type o@@64) refType) (= (type fld@@9) (FieldType a@@92))) (and (not (= o@@64 null)) (U_2_bool (MapType0Select (Reads2 t0@@34 t1@@10 t2@@6 h0@@10 f@@21 bx0@@6 bx1@@6) ($Box o@@64))))) (= (MapType1Select (MapType0Select h0@@10 o@@64) fld@@9) (MapType1Select (MapType0Select h1@@10 o@@64) fld@@9)))) :qid |unknown.0:0| :skolemid |719| :no-pattern (type o@@64) :no-pattern (type fld@@9) :no-pattern (U_2_int o@@64) :no-pattern (U_2_bool o@@64) :no-pattern (U_2_int fld@@9) :no-pattern (U_2_bool fld@@9) )))) (= (Apply2 t0@@34 t1@@10 t2@@6 h0@@10 f@@21 bx0@@6 bx1@@6) (Apply2 t0@@34 t1@@10 t2@@6 h1@@10 f@@21 bx0@@6 bx1@@6))) :qid |unknown.0:0| :skolemid |720| :pattern ( ($HeapSucc h0@@10 h1@@10) (Apply2 t0@@34 t1@@10 t2@@6 h1@@10 f@@21 bx0@@6 bx1@@6)) )))
(assert (forall ((t0@@35 T@U) (t1@@11 T@U) (t2@@7 T@U) (h0@@11 T@U) (h1@@11 T@U) (f@@22 T@U) (bx0@@7 T@U) (bx1@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@35) TyType) (= (type t1@@11) TyType)) (= (type t2@@7) TyType)) (= (type h0@@11) (MapType0Type refType MapType1Type))) (= (type h1@@11) (MapType0Type refType MapType1Type))) (= (type f@@22) HandleTypeType)) (= (type bx0@@7) BoxType)) (= (type bx1@@7) BoxType)) (and (and (and ($HeapSucc h0@@11 h1@@11) (and ($IsGoodHeap h0@@11) ($IsGoodHeap h1@@11))) (and (and ($IsBox bx0@@7 t0@@35) ($IsBox bx1@@7 t1@@11)) ($Is f@@22 (Tclass._System.___hFunc2 t0@@35 t1@@11 t2@@7)))) (forall ((o@@65 T@U) (fld@@10 T@U) ) (! (let ((a@@93 (FieldTypeInv0 (type fld@@10)))) (=> (and (and (= (type o@@65) refType) (= (type fld@@10) (FieldType a@@93))) (and (not (= o@@65 null)) (U_2_bool (MapType0Select (Reads2 t0@@35 t1@@11 t2@@7 h1@@11 f@@22 bx0@@7 bx1@@7) ($Box o@@65))))) (= (MapType1Select (MapType0Select h0@@11 o@@65) fld@@10) (MapType1Select (MapType0Select h1@@11 o@@65) fld@@10)))) :qid |unknown.0:0| :skolemid |721| :no-pattern (type o@@65) :no-pattern (type fld@@10) :no-pattern (U_2_int o@@65) :no-pattern (U_2_bool o@@65) :no-pattern (U_2_int fld@@10) :no-pattern (U_2_bool fld@@10) )))) (= (Apply2 t0@@35 t1@@11 t2@@7 h0@@11 f@@22 bx0@@7 bx1@@7) (Apply2 t0@@35 t1@@11 t2@@7 h1@@11 f@@22 bx0@@7 bx1@@7))) :qid |unknown.0:0| :skolemid |722| :pattern ( ($HeapSucc h0@@11 h1@@11) (Apply2 t0@@35 t1@@11 t2@@7 h1@@11 f@@22 bx0@@7 bx1@@7)) )))
(assert (forall ((t0@@36 T@U) (t1@@12 T@U) (t2@@8 T@U) (heap@@9 T@U) (f@@23 T@U) (bx0@@8 T@U) (bx1@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@36) TyType) (= (type t1@@12) TyType)) (= (type t2@@8) TyType)) (= (type heap@@9) (MapType0Type refType MapType1Type))) (= (type f@@23) HandleTypeType)) (= (type bx0@@8) BoxType)) (= (type bx1@@8) BoxType)) (and ($IsGoodHeap heap@@9) (and (and ($IsBox bx0@@8 t0@@36) ($IsBox bx1@@8 t1@@12)) ($Is f@@23 (Tclass._System.___hFunc2 t0@@36 t1@@12 t2@@8))))) (and (=> (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 $OneHeap f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 heap@@9 f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 heap@@9 f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 $OneHeap f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |723| :pattern ( (Reads2 t0@@36 t1@@12 t2@@8 $OneHeap f@@23 bx0@@8 bx1@@8) ($IsGoodHeap heap@@9)) :pattern ( (Reads2 t0@@36 t1@@12 t2@@8 heap@@9 f@@23 bx0@@8 bx1@@8)) )))
(assert (forall ((t0@@37 T@U) (t1@@13 T@U) (t2@@9 T@U) (heap@@10 T@U) (f@@24 T@U) (bx0@@9 T@U) (bx1@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@37) TyType) (= (type t1@@13) TyType)) (= (type t2@@9) TyType)) (= (type heap@@10) (MapType0Type refType MapType1Type))) (= (type f@@24) HandleTypeType)) (= (type bx0@@9) BoxType)) (= (type bx1@@9) BoxType)) (and (and ($IsGoodHeap heap@@10) (and (and ($IsBox bx0@@9 t0@@37) ($IsBox bx1@@9 t1@@13)) ($Is f@@24 (Tclass._System.___hFunc2 t0@@37 t1@@13 t2@@9)))) (|Set#Equal| (Reads2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9) (|Set#Empty| BoxType)))) (and (=> (Requires2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9) (Requires2 t0@@37 t1@@13 t2@@9 heap@@10 f@@24 bx0@@9 bx1@@9)) (=> (Requires2 t0@@37 t1@@13 t2@@9 heap@@10 f@@24 bx0@@9 bx1@@9) (Requires2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9)))) :qid |unknown.0:0| :skolemid |724| :pattern ( (Requires2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9) ($IsGoodHeap heap@@10)) :pattern ( (Requires2 t0@@37 t1@@13 t2@@9 heap@@10 f@@24 bx0@@9 bx1@@9)) )))
(assert (forall ((f@@25 T@U) (t0@@38 T@U) (t1@@14 T@U) (t2@@10 T@U) ) (!  (=> (and (and (and (= (type f@@25) HandleTypeType) (= (type t0@@38) TyType)) (= (type t1@@14) TyType)) (= (type t2@@10) TyType)) (and (=> ($Is f@@25 (Tclass._System.___hFunc2 t0@@38 t1@@14 t2@@10)) (forall ((h@@30 T@U) (bx0@@10 T@U) (bx1@@10 T@U) ) (!  (=> (and (and (and (= (type h@@30) (MapType0Type refType MapType1Type)) (= (type bx0@@10) BoxType)) (= (type bx1@@10) BoxType)) (and (and ($IsGoodHeap h@@30) (and ($IsBox bx0@@10 t0@@38) ($IsBox bx1@@10 t1@@14))) (Requires2 t0@@38 t1@@14 t2@@10 h@@30 f@@25 bx0@@10 bx1@@10))) ($IsBox (Apply2 t0@@38 t1@@14 t2@@10 h@@30 f@@25 bx0@@10 bx1@@10) t2@@10)) :qid |DafnyPre.521:12| :skolemid |725| :pattern ( (Apply2 t0@@38 t1@@14 t2@@10 h@@30 f@@25 bx0@@10 bx1@@10)) ))) (=> (forall ((h@@31 T@U) (bx0@@11 T@U) (bx1@@11 T@U) ) (!  (=> (and (and (and (= (type h@@31) (MapType0Type refType MapType1Type)) (= (type bx0@@11) BoxType)) (= (type bx1@@11) BoxType)) (and (and ($IsGoodHeap h@@31) (and ($IsBox bx0@@11 t0@@38) ($IsBox bx1@@11 t1@@14))) (Requires2 t0@@38 t1@@14 t2@@10 h@@31 f@@25 bx0@@11 bx1@@11))) ($IsBox (Apply2 t0@@38 t1@@14 t2@@10 h@@31 f@@25 bx0@@11 bx1@@11) t2@@10)) :qid |DafnyPre.521:12| :skolemid |725| :pattern ( (Apply2 t0@@38 t1@@14 t2@@10 h@@31 f@@25 bx0@@11 bx1@@11)) )) ($Is f@@25 (Tclass._System.___hFunc2 t0@@38 t1@@14 t2@@10))))) :qid |unknown.0:0| :skolemid |726| :pattern ( ($Is f@@25 (Tclass._System.___hFunc2 t0@@38 t1@@14 t2@@10))) )))
(assert (forall ((f@@26 T@U) (t0@@39 T@U) (t1@@15 T@U) (t2@@11 T@U) (u0@@0 T@U) (u1 T@U) (u2 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@26) HandleTypeType) (= (type t0@@39) TyType)) (= (type t1@@15) TyType)) (= (type t2@@11) TyType)) (= (type u0@@0) TyType)) (= (type u1) TyType)) (= (type u2) TyType)) (and (and (and ($Is f@@26 (Tclass._System.___hFunc2 t0@@39 t1@@15 t2@@11)) (forall ((bx@@47 T@U) ) (!  (=> (and (= (type bx@@47) BoxType) ($IsBox bx@@47 u0@@0)) ($IsBox bx@@47 t0@@39)) :qid |unknown.0:0| :skolemid |727| :pattern ( ($IsBox bx@@47 u0@@0)) :pattern ( ($IsBox bx@@47 t0@@39)) ))) (forall ((bx@@48 T@U) ) (!  (=> (and (= (type bx@@48) BoxType) ($IsBox bx@@48 u1)) ($IsBox bx@@48 t1@@15)) :qid |unknown.0:0| :skolemid |728| :pattern ( ($IsBox bx@@48 u1)) :pattern ( ($IsBox bx@@48 t1@@15)) ))) (forall ((bx@@49 T@U) ) (!  (=> (and (= (type bx@@49) BoxType) ($IsBox bx@@49 t2@@11)) ($IsBox bx@@49 u2)) :qid |unknown.0:0| :skolemid |729| :pattern ( ($IsBox bx@@49 t2@@11)) :pattern ( ($IsBox bx@@49 u2)) )))) ($Is f@@26 (Tclass._System.___hFunc2 u0@@0 u1 u2))) :qid |unknown.0:0| :skolemid |730| :pattern ( ($Is f@@26 (Tclass._System.___hFunc2 t0@@39 t1@@15 t2@@11)) ($Is f@@26 (Tclass._System.___hFunc2 u0@@0 u1 u2))) )))
(assert (forall ((f@@27 T@U) (t0@@40 T@U) (t1@@16 T@U) (t2@@12 T@U) (h@@32 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@27) HandleTypeType) (= (type t0@@40) TyType)) (= (type t1@@16) TyType)) (= (type t2@@12) TyType)) (= (type h@@32) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@32)) (and (=> ($IsAlloc f@@27 (Tclass._System.___hFunc2 t0@@40 t1@@16 t2@@12) h@@32) (forall ((bx0@@12 T@U) (bx1@@12 T@U) ) (!  (=> (and (= (type bx0@@12) BoxType) (= (type bx1@@12) BoxType)) (=> (and (and (and ($IsBox bx0@@12 t0@@40) ($IsAllocBox bx0@@12 t0@@40 h@@32)) (and ($IsBox bx1@@12 t1@@16) ($IsAllocBox bx1@@12 t1@@16 h@@32))) (Requires2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12)) (forall ((r@@14 T@U) ) (!  (=> (= (type r@@14) refType) (=> (and (not (= r@@14 null)) (U_2_bool (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12) ($Box r@@14)))) (U_2_bool (MapType1Select (MapType0Select h@@32 r@@14) alloc)))) :qid |unknown.0:0| :skolemid |731| :pattern ( (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12) ($Box r@@14))) )))) :qid |unknown.0:0| :skolemid |732| :pattern ( (Apply2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12)) :pattern ( (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12)) ))) (=> (forall ((bx0@@13 T@U) (bx1@@13 T@U) ) (!  (=> (and (= (type bx0@@13) BoxType) (= (type bx1@@13) BoxType)) (=> (and (and (and ($IsBox bx0@@13 t0@@40) ($IsAllocBox bx0@@13 t0@@40 h@@32)) (and ($IsBox bx1@@13 t1@@16) ($IsAllocBox bx1@@13 t1@@16 h@@32))) (Requires2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13)) (forall ((r@@15 T@U) ) (!  (=> (= (type r@@15) refType) (=> (and (not (= r@@15 null)) (U_2_bool (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13) ($Box r@@15)))) (U_2_bool (MapType1Select (MapType0Select h@@32 r@@15) alloc)))) :qid |unknown.0:0| :skolemid |731| :pattern ( (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13) ($Box r@@15))) )))) :qid |unknown.0:0| :skolemid |732| :pattern ( (Apply2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13)) :pattern ( (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13)) )) ($IsAlloc f@@27 (Tclass._System.___hFunc2 t0@@40 t1@@16 t2@@12) h@@32)))) :qid |unknown.0:0| :skolemid |733| :pattern ( ($IsAlloc f@@27 (Tclass._System.___hFunc2 t0@@40 t1@@16 t2@@12) h@@32)) )))
(assert (forall ((f@@28 T@U) (t0@@41 T@U) (t1@@17 T@U) (t2@@13 T@U) (h@@33 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@28) HandleTypeType) (= (type t0@@41) TyType)) (= (type t1@@17) TyType)) (= (type t2@@13) TyType)) (= (type h@@33) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@33) ($IsAlloc f@@28 (Tclass._System.___hFunc2 t0@@41 t1@@17 t2@@13) h@@33))) (forall ((bx0@@14 T@U) (bx1@@14 T@U) ) (!  (=> (and (= (type bx0@@14) BoxType) (= (type bx1@@14) BoxType)) (=> (and (and ($IsAllocBox bx0@@14 t0@@41 h@@33) ($IsAllocBox bx1@@14 t1@@17 h@@33)) (Requires2 t0@@41 t1@@17 t2@@13 h@@33 f@@28 bx0@@14 bx1@@14)) ($IsAllocBox (Apply2 t0@@41 t1@@17 t2@@13 h@@33 f@@28 bx0@@14 bx1@@14) t2@@13 h@@33))) :qid |unknown.0:0| :skolemid |734| :pattern ( (Apply2 t0@@41 t1@@17 t2@@13 h@@33 f@@28 bx0@@14 bx1@@14)) ))) :qid |unknown.0:0| :skolemid |735| :pattern ( ($IsAlloc f@@28 (Tclass._System.___hFunc2 t0@@41 t1@@17 t2@@13) h@@33)) )))
(assert (forall ((arg0@@131 T@U) (arg1@@61 T@U) (arg2@@22 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2 arg0@@131 arg1@@61 arg2@@22)) TyType) :qid |funType:Tclass._System.___hPartialFunc2| :pattern ( (Tclass._System.___hPartialFunc2 arg0@@131 arg1@@61 arg2@@22)) )))
(assert (forall ((|#$T0@@4| T@U) (|#$T1@@4| T@U) (|#$R@@17| T@U) ) (!  (=> (and (and (= (type |#$T0@@4|) TyType) (= (type |#$T1@@4|) TyType)) (= (type |#$R@@17|) TyType)) (= (Tag (Tclass._System.___hPartialFunc2 |#$T0@@4| |#$T1@@4| |#$R@@17|)) Tagclass._System.___hPartialFunc2)) :qid |unknown.0:0| :skolemid |736| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@4| |#$T1@@4| |#$R@@17|)) )))
(assert (forall ((arg0@@132 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_0 arg0@@132)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_0| :pattern ( (Tclass._System.___hPartialFunc2_0 arg0@@132)) )))
(assert (forall ((|#$T0@@5| T@U) (|#$T1@@5| T@U) (|#$R@@18| T@U) ) (!  (=> (and (and (= (type |#$T0@@5|) TyType) (= (type |#$T1@@5|) TyType)) (= (type |#$R@@18|) TyType)) (= (Tclass._System.___hPartialFunc2_0 (Tclass._System.___hPartialFunc2 |#$T0@@5| |#$T1@@5| |#$R@@18|)) |#$T0@@5|)) :qid |unknown.0:0| :skolemid |737| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@5| |#$T1@@5| |#$R@@18|)) )))
(assert (forall ((arg0@@133 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_1 arg0@@133)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_1| :pattern ( (Tclass._System.___hPartialFunc2_1 arg0@@133)) )))
(assert (forall ((|#$T0@@6| T@U) (|#$T1@@6| T@U) (|#$R@@19| T@U) ) (!  (=> (and (and (= (type |#$T0@@6|) TyType) (= (type |#$T1@@6|) TyType)) (= (type |#$R@@19|) TyType)) (= (Tclass._System.___hPartialFunc2_1 (Tclass._System.___hPartialFunc2 |#$T0@@6| |#$T1@@6| |#$R@@19|)) |#$T1@@6|)) :qid |unknown.0:0| :skolemid |738| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@6| |#$T1@@6| |#$R@@19|)) )))
(assert (forall ((arg0@@134 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_2 arg0@@134)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_2| :pattern ( (Tclass._System.___hPartialFunc2_2 arg0@@134)) )))
(assert (forall ((|#$T0@@7| T@U) (|#$T1@@7| T@U) (|#$R@@20| T@U) ) (!  (=> (and (and (= (type |#$T0@@7|) TyType) (= (type |#$T1@@7|) TyType)) (= (type |#$R@@20|) TyType)) (= (Tclass._System.___hPartialFunc2_2 (Tclass._System.___hPartialFunc2 |#$T0@@7| |#$T1@@7| |#$R@@20|)) |#$R@@20|)) :qid |unknown.0:0| :skolemid |739| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@7| |#$T1@@7| |#$R@@20|)) )))
(assert (forall ((|#$T0@@8| T@U) (|#$T1@@8| T@U) (|#$R@@21| T@U) (bx@@50 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@8|) TyType) (= (type |#$T1@@8|) TyType)) (= (type |#$R@@21|) TyType)) (= (type bx@@50) BoxType)) ($IsBox bx@@50 (Tclass._System.___hPartialFunc2 |#$T0@@8| |#$T1@@8| |#$R@@21|))) (and (= ($Box ($Unbox HandleTypeType bx@@50)) bx@@50) ($Is ($Unbox HandleTypeType bx@@50) (Tclass._System.___hPartialFunc2 |#$T0@@8| |#$T1@@8| |#$R@@21|)))) :qid |unknown.0:0| :skolemid |740| :pattern ( ($IsBox bx@@50 (Tclass._System.___hPartialFunc2 |#$T0@@8| |#$T1@@8| |#$R@@21|))) )))
(assert (forall ((|#$T0@@9| T@U) (|#$T1@@9| T@U) (|#$R@@22| T@U) (|f#0@@3| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@9|) TyType) (= (type |#$T1@@9|) TyType)) (= (type |#$R@@22|) TyType)) (= (type |f#0@@3|) HandleTypeType)) (and (=> ($Is |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|)) (and ($Is |f#0@@3| (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|)) (forall ((|x0#0| T@U) (|x1#0| T@U) ) (!  (=> (and (and (= (type |x0#0|) BoxType) (= (type |x1#0|) BoxType)) (and ($IsBox |x0#0| |#$T0@@9|) ($IsBox |x1#0| |#$T1@@9|))) (|Set#Equal| (Reads2 |#$T0@@9| |#$T1@@9| |#$R@@22| $OneHeap |f#0@@3| |x0#0| |x1#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |741| :no-pattern (type |x0#0|) :no-pattern (type |x1#0|) :no-pattern (U_2_int |x0#0|) :no-pattern (U_2_bool |x0#0|) :no-pattern (U_2_int |x1#0|) :no-pattern (U_2_bool |x1#0|) )))) (=> (and ($Is |f#0@@3| (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|)) (forall ((|x0#0@@0| T@U) (|x1#0@@0| T@U) ) (!  (=> (and (and (= (type |x0#0@@0|) BoxType) (= (type |x1#0@@0|) BoxType)) (and ($IsBox |x0#0@@0| |#$T0@@9|) ($IsBox |x1#0@@0| |#$T1@@9|))) (|Set#Equal| (Reads2 |#$T0@@9| |#$T1@@9| |#$R@@22| $OneHeap |f#0@@3| |x0#0@@0| |x1#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |741| :no-pattern (type |x0#0@@0|) :no-pattern (type |x1#0@@0|) :no-pattern (U_2_int |x0#0@@0|) :no-pattern (U_2_bool |x0#0@@0|) :no-pattern (U_2_int |x1#0@@0|) :no-pattern (U_2_bool |x1#0@@0|) ))) ($Is |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|))))) :qid |unknown.0:0| :skolemid |742| :pattern ( ($Is |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|))) )))
(assert (forall ((|#$T0@@10| T@U) (|#$T1@@10| T@U) (|#$R@@23| T@U) (|f#0@@4| T@U) ($h@@10 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@10|) TyType) (= (type |#$T1@@10|) TyType)) (= (type |#$R@@23|) TyType)) (= (type |f#0@@4|) HandleTypeType)) (= (type $h@@10) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10) ($IsAlloc |f#0@@4| (Tclass._System.___hFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10)) (=> ($IsAlloc |f#0@@4| (Tclass._System.___hFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10) ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10)))) :qid |unknown.0:0| :skolemid |743| :pattern ( ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10)) )))
(assert (forall ((arg0@@135 T@U) (arg1@@62 T@U) (arg2@@23 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2 arg0@@135 arg1@@62 arg2@@23)) TyType) :qid |funType:Tclass._System.___hTotalFunc2| :pattern ( (Tclass._System.___hTotalFunc2 arg0@@135 arg1@@62 arg2@@23)) )))
(assert (forall ((|#$T0@@11| T@U) (|#$T1@@11| T@U) (|#$R@@24| T@U) ) (!  (=> (and (and (= (type |#$T0@@11|) TyType) (= (type |#$T1@@11|) TyType)) (= (type |#$R@@24|) TyType)) (= (Tag (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@24|)) Tagclass._System.___hTotalFunc2)) :qid |unknown.0:0| :skolemid |744| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@24|)) )))
(assert (forall ((arg0@@136 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_0 arg0@@136)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_0| :pattern ( (Tclass._System.___hTotalFunc2_0 arg0@@136)) )))
(assert (forall ((|#$T0@@12| T@U) (|#$T1@@12| T@U) (|#$R@@25| T@U) ) (!  (=> (and (and (= (type |#$T0@@12|) TyType) (= (type |#$T1@@12|) TyType)) (= (type |#$R@@25|) TyType)) (= (Tclass._System.___hTotalFunc2_0 (Tclass._System.___hTotalFunc2 |#$T0@@12| |#$T1@@12| |#$R@@25|)) |#$T0@@12|)) :qid |unknown.0:0| :skolemid |745| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@12| |#$T1@@12| |#$R@@25|)) )))
(assert (forall ((arg0@@137 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_1 arg0@@137)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_1| :pattern ( (Tclass._System.___hTotalFunc2_1 arg0@@137)) )))
(assert (forall ((|#$T0@@13| T@U) (|#$T1@@13| T@U) (|#$R@@26| T@U) ) (!  (=> (and (and (= (type |#$T0@@13|) TyType) (= (type |#$T1@@13|) TyType)) (= (type |#$R@@26|) TyType)) (= (Tclass._System.___hTotalFunc2_1 (Tclass._System.___hTotalFunc2 |#$T0@@13| |#$T1@@13| |#$R@@26|)) |#$T1@@13|)) :qid |unknown.0:0| :skolemid |746| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@13| |#$T1@@13| |#$R@@26|)) )))
(assert (forall ((arg0@@138 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_2 arg0@@138)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_2| :pattern ( (Tclass._System.___hTotalFunc2_2 arg0@@138)) )))
(assert (forall ((|#$T0@@14| T@U) (|#$T1@@14| T@U) (|#$R@@27| T@U) ) (!  (=> (and (and (= (type |#$T0@@14|) TyType) (= (type |#$T1@@14|) TyType)) (= (type |#$R@@27|) TyType)) (= (Tclass._System.___hTotalFunc2_2 (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@27|)) |#$R@@27|)) :qid |unknown.0:0| :skolemid |747| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@27|)) )))
(assert (forall ((|#$T0@@15| T@U) (|#$T1@@15| T@U) (|#$R@@28| T@U) (bx@@51 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@15|) TyType) (= (type |#$T1@@15|) TyType)) (= (type |#$R@@28|) TyType)) (= (type bx@@51) BoxType)) ($IsBox bx@@51 (Tclass._System.___hTotalFunc2 |#$T0@@15| |#$T1@@15| |#$R@@28|))) (and (= ($Box ($Unbox HandleTypeType bx@@51)) bx@@51) ($Is ($Unbox HandleTypeType bx@@51) (Tclass._System.___hTotalFunc2 |#$T0@@15| |#$T1@@15| |#$R@@28|)))) :qid |unknown.0:0| :skolemid |748| :pattern ( ($IsBox bx@@51 (Tclass._System.___hTotalFunc2 |#$T0@@15| |#$T1@@15| |#$R@@28|))) )))
(assert (forall ((|#$T0@@16| T@U) (|#$T1@@16| T@U) (|#$R@@29| T@U) (|f#0@@5| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@16|) TyType) (= (type |#$T1@@16|) TyType)) (= (type |#$R@@29|) TyType)) (= (type |f#0@@5|) HandleTypeType)) (and (=> ($Is |f#0@@5| (Tclass._System.___hTotalFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|)) (and ($Is |f#0@@5| (Tclass._System.___hPartialFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|)) (forall ((|x0#0@@1| T@U) (|x1#0@@1| T@U) ) (!  (=> (and (and (= (type |x0#0@@1|) BoxType) (= (type |x1#0@@1|) BoxType)) (and ($IsBox |x0#0@@1| |#$T0@@16|) ($IsBox |x1#0@@1| |#$T1@@16|))) (Requires2 |#$T0@@16| |#$T1@@16| |#$R@@29| $OneHeap |f#0@@5| |x0#0@@1| |x1#0@@1|)) :qid |unknown.0:0| :skolemid |749| :no-pattern (type |x0#0@@1|) :no-pattern (type |x1#0@@1|) :no-pattern (U_2_int |x0#0@@1|) :no-pattern (U_2_bool |x0#0@@1|) :no-pattern (U_2_int |x1#0@@1|) :no-pattern (U_2_bool |x1#0@@1|) )))) (=> (and ($Is |f#0@@5| (Tclass._System.___hPartialFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|)) (forall ((|x0#0@@2| T@U) (|x1#0@@2| T@U) ) (!  (=> (and (and (= (type |x0#0@@2|) BoxType) (= (type |x1#0@@2|) BoxType)) (and ($IsBox |x0#0@@2| |#$T0@@16|) ($IsBox |x1#0@@2| |#$T1@@16|))) (Requires2 |#$T0@@16| |#$T1@@16| |#$R@@29| $OneHeap |f#0@@5| |x0#0@@2| |x1#0@@2|)) :qid |unknown.0:0| :skolemid |749| :no-pattern (type |x0#0@@2|) :no-pattern (type |x1#0@@2|) :no-pattern (U_2_int |x0#0@@2|) :no-pattern (U_2_bool |x0#0@@2|) :no-pattern (U_2_int |x1#0@@2|) :no-pattern (U_2_bool |x1#0@@2|) ))) ($Is |f#0@@5| (Tclass._System.___hTotalFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|))))) :qid |unknown.0:0| :skolemid |750| :pattern ( ($Is |f#0@@5| (Tclass._System.___hTotalFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|))) )))
(assert (forall ((|#$T0@@17| T@U) (|#$T1@@17| T@U) (|#$R@@30| T@U) (|f#0@@6| T@U) ($h@@11 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@17|) TyType) (= (type |#$T1@@17|) TyType)) (= (type |#$R@@30|) TyType)) (= (type |f#0@@6|) HandleTypeType)) (= (type $h@@11) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11) ($IsAlloc |f#0@@6| (Tclass._System.___hPartialFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11)) (=> ($IsAlloc |f#0@@6| (Tclass._System.___hPartialFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11) ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11)))) :qid |unknown.0:0| :skolemid |751| :pattern ( ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11)) )))
(assert (forall ((arg0@@139 T@U) (arg1@@63 T@U) ) (! (= (type (Tclass._System.___hFunc1 arg0@@139 arg1@@63)) TyType) :qid |funType:Tclass._System.___hFunc1| :pattern ( (Tclass._System.___hFunc1 arg0@@139 arg1@@63)) )))
(assert (forall ((|#$T0@@18| T@U) (|#$R@@31| T@U) ) (!  (=> (and (= (type |#$T0@@18|) TyType) (= (type |#$R@@31|) TyType)) (= (Tag (Tclass._System.___hFunc1 |#$T0@@18| |#$R@@31|)) Tagclass._System.___hFunc1)) :qid |unknown.0:0| :skolemid |752| :pattern ( (Tclass._System.___hFunc1 |#$T0@@18| |#$R@@31|)) )))
(assert (forall ((arg0@@140 T@U) ) (! (= (type (Tclass._System.___hFunc1_0 arg0@@140)) TyType) :qid |funType:Tclass._System.___hFunc1_0| :pattern ( (Tclass._System.___hFunc1_0 arg0@@140)) )))
(assert (forall ((|#$T0@@19| T@U) (|#$R@@32| T@U) ) (!  (=> (and (= (type |#$T0@@19|) TyType) (= (type |#$R@@32|) TyType)) (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@19| |#$R@@32|)) |#$T0@@19|)) :qid |unknown.0:0| :skolemid |753| :pattern ( (Tclass._System.___hFunc1 |#$T0@@19| |#$R@@32|)) )))
(assert (forall ((arg0@@141 T@U) ) (! (= (type (Tclass._System.___hFunc1_1 arg0@@141)) TyType) :qid |funType:Tclass._System.___hFunc1_1| :pattern ( (Tclass._System.___hFunc1_1 arg0@@141)) )))
(assert (forall ((|#$T0@@20| T@U) (|#$R@@33| T@U) ) (!  (=> (and (= (type |#$T0@@20|) TyType) (= (type |#$R@@33|) TyType)) (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@20| |#$R@@33|)) |#$R@@33|)) :qid |unknown.0:0| :skolemid |754| :pattern ( (Tclass._System.___hFunc1 |#$T0@@20| |#$R@@33|)) )))
(assert (forall ((|#$T0@@21| T@U) (|#$R@@34| T@U) (bx@@52 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@21|) TyType) (= (type |#$R@@34|) TyType)) (= (type bx@@52) BoxType)) ($IsBox bx@@52 (Tclass._System.___hFunc1 |#$T0@@21| |#$R@@34|))) (and (= ($Box ($Unbox HandleTypeType bx@@52)) bx@@52) ($Is ($Unbox HandleTypeType bx@@52) (Tclass._System.___hFunc1 |#$T0@@21| |#$R@@34|)))) :qid |unknown.0:0| :skolemid |755| :pattern ( ($IsBox bx@@52 (Tclass._System.___hFunc1 |#$T0@@21| |#$R@@34|))) )))
(assert  (and (and (and (and (and (and (and (and (forall ((arg0@@142 T@T) (arg1@@64 T@T) (arg2@@24 T@T) ) (! (= (Ctor (MapType3Type arg0@@142 arg1@@64 arg2@@24)) 22) :qid |ctor:MapType3Type| )) (forall ((arg0@@143 T@T) (arg1@@65 T@T) (arg2@@25 T@T) ) (! (= (MapType3TypeInv0 (MapType3Type arg0@@143 arg1@@65 arg2@@25)) arg0@@143) :qid |typeInv:MapType3TypeInv0| :pattern ( (MapType3Type arg0@@143 arg1@@65 arg2@@25)) ))) (forall ((arg0@@144 T@T) (arg1@@66 T@T) (arg2@@26 T@T) ) (! (= (MapType3TypeInv1 (MapType3Type arg0@@144 arg1@@66 arg2@@26)) arg1@@66) :qid |typeInv:MapType3TypeInv1| :pattern ( (MapType3Type arg0@@144 arg1@@66 arg2@@26)) ))) (forall ((arg0@@145 T@T) (arg1@@67 T@T) (arg2@@27 T@T) ) (! (= (MapType3TypeInv2 (MapType3Type arg0@@145 arg1@@67 arg2@@27)) arg2@@27) :qid |typeInv:MapType3TypeInv2| :pattern ( (MapType3Type arg0@@145 arg1@@67 arg2@@27)) ))) (forall ((arg0@@146 T@U) (arg1@@68 T@U) (arg2@@28 T@U) ) (! (let ((aVar2@@0 (MapType3TypeInv2 (type arg0@@146)))) (= (type (MapType3Select arg0@@146 arg1@@68 arg2@@28)) aVar2@@0)) :qid |funType:MapType3Select| :pattern ( (MapType3Select arg0@@146 arg1@@68 arg2@@28)) ))) (forall ((arg0@@147 T@U) (arg1@@69 T@U) (arg2@@29 T@U) (arg3@@10 T@U) ) (! (let ((aVar2@@1 (type arg3@@10))) (let ((aVar1@@3 (type arg2@@29))) (let ((aVar0@@1 (type arg1@@69))) (= (type (MapType3Store arg0@@147 arg1@@69 arg2@@29 arg3@@10)) (MapType3Type aVar0@@1 aVar1@@3 aVar2@@1))))) :qid |funType:MapType3Store| :pattern ( (MapType3Store arg0@@147 arg1@@69 arg2@@29 arg3@@10)) ))) (forall ((m@@32 T@U) (x0@@10 T@U) (x1@@4 T@U) (val@@11 T@U) ) (! (let ((aVar2@@2 (MapType3TypeInv2 (type m@@32)))) (=> (= (type val@@11) aVar2@@2) (= (MapType3Select (MapType3Store m@@32 x0@@10 x1@@4 val@@11) x0@@10 x1@@4) val@@11))) :qid |mapAx0:MapType3Select| :weight 0 ))) (and (and (forall ((val@@12 T@U) (m@@33 T@U) (x0@@11 T@U) (x1@@5 T@U) (y0@@7 T@U) (y1@@3 T@U) ) (!  (or (= x0@@11 y0@@7) (= (MapType3Select (MapType3Store m@@33 x0@@11 x1@@5 val@@12) y0@@7 y1@@3) (MapType3Select m@@33 y0@@7 y1@@3))) :qid |mapAx1:MapType3Select:0| :weight 0 )) (forall ((val@@13 T@U) (m@@34 T@U) (x0@@12 T@U) (x1@@6 T@U) (y0@@8 T@U) (y1@@4 T@U) ) (!  (or (= x1@@6 y1@@4) (= (MapType3Select (MapType3Store m@@34 x0@@12 x1@@6 val@@13) y0@@8 y1@@4) (MapType3Select m@@34 y0@@8 y1@@4))) :qid |mapAx1:MapType3Select:1| :weight 0 ))) (forall ((val@@14 T@U) (m@@35 T@U) (x0@@13 T@U) (x1@@7 T@U) (y0@@9 T@U) (y1@@5 T@U) ) (!  (or true (= (MapType3Select (MapType3Store m@@35 x0@@13 x1@@7 val@@14) y0@@9 y1@@5) (MapType3Select m@@35 y0@@9 y1@@5))) :qid |mapAx2:MapType3Select| :weight 0 )))) (forall ((arg0@@148 T@U) (arg1@@70 T@U) (arg2@@30 T@U) ) (! (= (type (Handle1 arg0@@148 arg1@@70 arg2@@30)) HandleTypeType) :qid |funType:Handle1| :pattern ( (Handle1 arg0@@148 arg1@@70 arg2@@30)) ))))
(assert (forall ((t0@@42 T@U) (t1@@18 T@U) (heap@@11 T@U) (h@@34 T@U) (r@@16 T@U) (rd@@5 T@U) (bx0@@15 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@42) TyType) (= (type t1@@18) TyType)) (= (type heap@@11) (MapType0Type refType MapType1Type))) (= (type h@@34) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@16) (MapType3Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@5) (MapType3Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@15) BoxType)) (= (Apply1 t0@@42 t1@@18 heap@@11 (Handle1 h@@34 r@@16 rd@@5) bx0@@15) (MapType3Select h@@34 heap@@11 bx0@@15))) :qid |unknown.0:0| :skolemid |756| :pattern ( (Apply1 t0@@42 t1@@18 heap@@11 (Handle1 h@@34 r@@16 rd@@5) bx0@@15)) )))
(assert (forall ((t0@@43 T@U) (t1@@19 T@U) (heap@@12 T@U) (h@@35 T@U) (r@@17 T@U) (rd@@6 T@U) (bx0@@16 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@43) TyType) (= (type t1@@19) TyType)) (= (type heap@@12) (MapType0Type refType MapType1Type))) (= (type h@@35) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@17) (MapType3Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@6) (MapType3Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@16) BoxType)) (U_2_bool (MapType3Select r@@17 heap@@12 bx0@@16))) (Requires1 t0@@43 t1@@19 heap@@12 (Handle1 h@@35 r@@17 rd@@6) bx0@@16)) :qid |unknown.0:0| :skolemid |757| :pattern ( (Requires1 t0@@43 t1@@19 heap@@12 (Handle1 h@@35 r@@17 rd@@6) bx0@@16)) )))
(assert (forall ((arg0@@149 T@U) (arg1@@71 T@U) (arg2@@31 T@U) (arg3@@11 T@U) (arg4@@3 T@U) ) (! (= (type (Reads1 arg0@@149 arg1@@71 arg2@@31 arg3@@11 arg4@@3)) (MapType0Type BoxType boolType)) :qid |funType:Reads1| :pattern ( (Reads1 arg0@@149 arg1@@71 arg2@@31 arg3@@11 arg4@@3)) )))
(assert (forall ((t0@@44 T@U) (t1@@20 T@U) (heap@@13 T@U) (h@@36 T@U) (r@@18 T@U) (rd@@7 T@U) (bx0@@17 T@U) (bx@@53 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@44) TyType) (= (type t1@@20) TyType)) (= (type heap@@13) (MapType0Type refType MapType1Type))) (= (type h@@36) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@18) (MapType3Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@7) (MapType3Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@17) BoxType)) (= (type bx@@53) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads1 t0@@44 t1@@20 heap@@13 (Handle1 h@@36 r@@18 rd@@7) bx0@@17) bx@@53)) (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@13 bx0@@17) bx@@53))) (=> (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@13 bx0@@17) bx@@53)) (U_2_bool (MapType0Select (Reads1 t0@@44 t1@@20 heap@@13 (Handle1 h@@36 r@@18 rd@@7) bx0@@17) bx@@53))))) :qid |unknown.0:0| :skolemid |758| :pattern ( (MapType0Select (Reads1 t0@@44 t1@@20 heap@@13 (Handle1 h@@36 r@@18 rd@@7) bx0@@17) bx@@53)) )))
(assert (forall ((t0@@45 T@U) (t1@@21 T@U) (h0@@12 T@U) (h1@@12 T@U) (f@@29 T@U) (bx0@@18 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@45) TyType) (= (type t1@@21) TyType)) (= (type h0@@12) (MapType0Type refType MapType1Type))) (= (type h1@@12) (MapType0Type refType MapType1Type))) (= (type f@@29) HandleTypeType)) (= (type bx0@@18) BoxType)) (and (and (and ($HeapSucc h0@@12 h1@@12) (and ($IsGoodHeap h0@@12) ($IsGoodHeap h1@@12))) (and ($IsBox bx0@@18 t0@@45) ($Is f@@29 (Tclass._System.___hFunc1 t0@@45 t1@@21)))) (forall ((o@@66 T@U) (fld@@11 T@U) ) (! (let ((a@@94 (FieldTypeInv0 (type fld@@11)))) (=> (and (and (= (type o@@66) refType) (= (type fld@@11) (FieldType a@@94))) (and (not (= o@@66 null)) (U_2_bool (MapType0Select (Reads1 t0@@45 t1@@21 h0@@12 f@@29 bx0@@18) ($Box o@@66))))) (= (MapType1Select (MapType0Select h0@@12 o@@66) fld@@11) (MapType1Select (MapType0Select h1@@12 o@@66) fld@@11)))) :qid |unknown.0:0| :skolemid |759| :no-pattern (type o@@66) :no-pattern (type fld@@11) :no-pattern (U_2_int o@@66) :no-pattern (U_2_bool o@@66) :no-pattern (U_2_int fld@@11) :no-pattern (U_2_bool fld@@11) )))) (= (Reads1 t0@@45 t1@@21 h0@@12 f@@29 bx0@@18) (Reads1 t0@@45 t1@@21 h1@@12 f@@29 bx0@@18))) :qid |unknown.0:0| :skolemid |760| :pattern ( ($HeapSucc h0@@12 h1@@12) (Reads1 t0@@45 t1@@21 h1@@12 f@@29 bx0@@18)) )))
(assert (forall ((t0@@46 T@U) (t1@@22 T@U) (h0@@13 T@U) (h1@@13 T@U) (f@@30 T@U) (bx0@@19 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@46) TyType) (= (type t1@@22) TyType)) (= (type h0@@13) (MapType0Type refType MapType1Type))) (= (type h1@@13) (MapType0Type refType MapType1Type))) (= (type f@@30) HandleTypeType)) (= (type bx0@@19) BoxType)) (and (and (and ($HeapSucc h0@@13 h1@@13) (and ($IsGoodHeap h0@@13) ($IsGoodHeap h1@@13))) (and ($IsBox bx0@@19 t0@@46) ($Is f@@30 (Tclass._System.___hFunc1 t0@@46 t1@@22)))) (forall ((o@@67 T@U) (fld@@12 T@U) ) (! (let ((a@@95 (FieldTypeInv0 (type fld@@12)))) (=> (and (and (= (type o@@67) refType) (= (type fld@@12) (FieldType a@@95))) (and (not (= o@@67 null)) (U_2_bool (MapType0Select (Reads1 t0@@46 t1@@22 h1@@13 f@@30 bx0@@19) ($Box o@@67))))) (= (MapType1Select (MapType0Select h0@@13 o@@67) fld@@12) (MapType1Select (MapType0Select h1@@13 o@@67) fld@@12)))) :qid |unknown.0:0| :skolemid |761| :no-pattern (type o@@67) :no-pattern (type fld@@12) :no-pattern (U_2_int o@@67) :no-pattern (U_2_bool o@@67) :no-pattern (U_2_int fld@@12) :no-pattern (U_2_bool fld@@12) )))) (= (Reads1 t0@@46 t1@@22 h0@@13 f@@30 bx0@@19) (Reads1 t0@@46 t1@@22 h1@@13 f@@30 bx0@@19))) :qid |unknown.0:0| :skolemid |762| :pattern ( ($HeapSucc h0@@13 h1@@13) (Reads1 t0@@46 t1@@22 h1@@13 f@@30 bx0@@19)) )))
(assert (forall ((t0@@47 T@U) (t1@@23 T@U) (h0@@14 T@U) (h1@@14 T@U) (f@@31 T@U) (bx0@@20 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@47) TyType) (= (type t1@@23) TyType)) (= (type h0@@14) (MapType0Type refType MapType1Type))) (= (type h1@@14) (MapType0Type refType MapType1Type))) (= (type f@@31) HandleTypeType)) (= (type bx0@@20) BoxType)) (and (and (and ($HeapSucc h0@@14 h1@@14) (and ($IsGoodHeap h0@@14) ($IsGoodHeap h1@@14))) (and ($IsBox bx0@@20 t0@@47) ($Is f@@31 (Tclass._System.___hFunc1 t0@@47 t1@@23)))) (forall ((o@@68 T@U) (fld@@13 T@U) ) (! (let ((a@@96 (FieldTypeInv0 (type fld@@13)))) (=> (and (and (= (type o@@68) refType) (= (type fld@@13) (FieldType a@@96))) (and (not (= o@@68 null)) (U_2_bool (MapType0Select (Reads1 t0@@47 t1@@23 h0@@14 f@@31 bx0@@20) ($Box o@@68))))) (= (MapType1Select (MapType0Select h0@@14 o@@68) fld@@13) (MapType1Select (MapType0Select h1@@14 o@@68) fld@@13)))) :qid |unknown.0:0| :skolemid |763| :no-pattern (type o@@68) :no-pattern (type fld@@13) :no-pattern (U_2_int o@@68) :no-pattern (U_2_bool o@@68) :no-pattern (U_2_int fld@@13) :no-pattern (U_2_bool fld@@13) )))) (and (=> (Requires1 t0@@47 t1@@23 h0@@14 f@@31 bx0@@20) (Requires1 t0@@47 t1@@23 h1@@14 f@@31 bx0@@20)) (=> (Requires1 t0@@47 t1@@23 h1@@14 f@@31 bx0@@20) (Requires1 t0@@47 t1@@23 h0@@14 f@@31 bx0@@20)))) :qid |unknown.0:0| :skolemid |764| :pattern ( ($HeapSucc h0@@14 h1@@14) (Requires1 t0@@47 t1@@23 h1@@14 f@@31 bx0@@20)) )))
(assert (forall ((t0@@48 T@U) (t1@@24 T@U) (h0@@15 T@U) (h1@@15 T@U) (f@@32 T@U) (bx0@@21 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@48) TyType) (= (type t1@@24) TyType)) (= (type h0@@15) (MapType0Type refType MapType1Type))) (= (type h1@@15) (MapType0Type refType MapType1Type))) (= (type f@@32) HandleTypeType)) (= (type bx0@@21) BoxType)) (and (and (and ($HeapSucc h0@@15 h1@@15) (and ($IsGoodHeap h0@@15) ($IsGoodHeap h1@@15))) (and ($IsBox bx0@@21 t0@@48) ($Is f@@32 (Tclass._System.___hFunc1 t0@@48 t1@@24)))) (forall ((o@@69 T@U) (fld@@14 T@U) ) (! (let ((a@@97 (FieldTypeInv0 (type fld@@14)))) (=> (and (and (= (type o@@69) refType) (= (type fld@@14) (FieldType a@@97))) (and (not (= o@@69 null)) (U_2_bool (MapType0Select (Reads1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21) ($Box o@@69))))) (= (MapType1Select (MapType0Select h0@@15 o@@69) fld@@14) (MapType1Select (MapType0Select h1@@15 o@@69) fld@@14)))) :qid |unknown.0:0| :skolemid |765| :no-pattern (type o@@69) :no-pattern (type fld@@14) :no-pattern (U_2_int o@@69) :no-pattern (U_2_bool o@@69) :no-pattern (U_2_int fld@@14) :no-pattern (U_2_bool fld@@14) )))) (and (=> (Requires1 t0@@48 t1@@24 h0@@15 f@@32 bx0@@21) (Requires1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21)) (=> (Requires1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21) (Requires1 t0@@48 t1@@24 h0@@15 f@@32 bx0@@21)))) :qid |unknown.0:0| :skolemid |766| :pattern ( ($HeapSucc h0@@15 h1@@15) (Requires1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21)) )))
(assert (forall ((t0@@49 T@U) (t1@@25 T@U) (h0@@16 T@U) (h1@@16 T@U) (f@@33 T@U) (bx0@@22 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@49) TyType) (= (type t1@@25) TyType)) (= (type h0@@16) (MapType0Type refType MapType1Type))) (= (type h1@@16) (MapType0Type refType MapType1Type))) (= (type f@@33) HandleTypeType)) (= (type bx0@@22) BoxType)) (and (and (and ($HeapSucc h0@@16 h1@@16) (and ($IsGoodHeap h0@@16) ($IsGoodHeap h1@@16))) (and ($IsBox bx0@@22 t0@@49) ($Is f@@33 (Tclass._System.___hFunc1 t0@@49 t1@@25)))) (forall ((o@@70 T@U) (fld@@15 T@U) ) (! (let ((a@@98 (FieldTypeInv0 (type fld@@15)))) (=> (and (and (= (type o@@70) refType) (= (type fld@@15) (FieldType a@@98))) (and (not (= o@@70 null)) (U_2_bool (MapType0Select (Reads1 t0@@49 t1@@25 h0@@16 f@@33 bx0@@22) ($Box o@@70))))) (= (MapType1Select (MapType0Select h0@@16 o@@70) fld@@15) (MapType1Select (MapType0Select h1@@16 o@@70) fld@@15)))) :qid |unknown.0:0| :skolemid |767| :no-pattern (type o@@70) :no-pattern (type fld@@15) :no-pattern (U_2_int o@@70) :no-pattern (U_2_bool o@@70) :no-pattern (U_2_int fld@@15) :no-pattern (U_2_bool fld@@15) )))) (= (Apply1 t0@@49 t1@@25 h0@@16 f@@33 bx0@@22) (Apply1 t0@@49 t1@@25 h1@@16 f@@33 bx0@@22))) :qid |unknown.0:0| :skolemid |768| :pattern ( ($HeapSucc h0@@16 h1@@16) (Apply1 t0@@49 t1@@25 h1@@16 f@@33 bx0@@22)) )))
(assert (forall ((t0@@50 T@U) (t1@@26 T@U) (h0@@17 T@U) (h1@@17 T@U) (f@@34 T@U) (bx0@@23 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@50) TyType) (= (type t1@@26) TyType)) (= (type h0@@17) (MapType0Type refType MapType1Type))) (= (type h1@@17) (MapType0Type refType MapType1Type))) (= (type f@@34) HandleTypeType)) (= (type bx0@@23) BoxType)) (and (and (and ($HeapSucc h0@@17 h1@@17) (and ($IsGoodHeap h0@@17) ($IsGoodHeap h1@@17))) (and ($IsBox bx0@@23 t0@@50) ($Is f@@34 (Tclass._System.___hFunc1 t0@@50 t1@@26)))) (forall ((o@@71 T@U) (fld@@16 T@U) ) (! (let ((a@@99 (FieldTypeInv0 (type fld@@16)))) (=> (and (and (= (type o@@71) refType) (= (type fld@@16) (FieldType a@@99))) (and (not (= o@@71 null)) (U_2_bool (MapType0Select (Reads1 t0@@50 t1@@26 h1@@17 f@@34 bx0@@23) ($Box o@@71))))) (= (MapType1Select (MapType0Select h0@@17 o@@71) fld@@16) (MapType1Select (MapType0Select h1@@17 o@@71) fld@@16)))) :qid |unknown.0:0| :skolemid |769| :no-pattern (type o@@71) :no-pattern (type fld@@16) :no-pattern (U_2_int o@@71) :no-pattern (U_2_bool o@@71) :no-pattern (U_2_int fld@@16) :no-pattern (U_2_bool fld@@16) )))) (= (Apply1 t0@@50 t1@@26 h0@@17 f@@34 bx0@@23) (Apply1 t0@@50 t1@@26 h1@@17 f@@34 bx0@@23))) :qid |unknown.0:0| :skolemid |770| :pattern ( ($HeapSucc h0@@17 h1@@17) (Apply1 t0@@50 t1@@26 h1@@17 f@@34 bx0@@23)) )))
(assert (forall ((t0@@51 T@U) (t1@@27 T@U) (heap@@14 T@U) (f@@35 T@U) (bx0@@24 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@51) TyType) (= (type t1@@27) TyType)) (= (type heap@@14) (MapType0Type refType MapType1Type))) (= (type f@@35) HandleTypeType)) (= (type bx0@@24) BoxType)) (and ($IsGoodHeap heap@@14) (and ($IsBox bx0@@24 t0@@51) ($Is f@@35 (Tclass._System.___hFunc1 t0@@51 t1@@27))))) (and (=> (|Set#Equal| (Reads1 t0@@51 t1@@27 $OneHeap f@@35 bx0@@24) (|Set#Empty| BoxType)) (|Set#Equal| (Reads1 t0@@51 t1@@27 heap@@14 f@@35 bx0@@24) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads1 t0@@51 t1@@27 heap@@14 f@@35 bx0@@24) (|Set#Empty| BoxType)) (|Set#Equal| (Reads1 t0@@51 t1@@27 $OneHeap f@@35 bx0@@24) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |771| :pattern ( (Reads1 t0@@51 t1@@27 $OneHeap f@@35 bx0@@24) ($IsGoodHeap heap@@14)) :pattern ( (Reads1 t0@@51 t1@@27 heap@@14 f@@35 bx0@@24)) )))
(assert (forall ((t0@@52 T@U) (t1@@28 T@U) (heap@@15 T@U) (f@@36 T@U) (bx0@@25 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@52) TyType) (= (type t1@@28) TyType)) (= (type heap@@15) (MapType0Type refType MapType1Type))) (= (type f@@36) HandleTypeType)) (= (type bx0@@25) BoxType)) (and (and ($IsGoodHeap heap@@15) (and ($IsBox bx0@@25 t0@@52) ($Is f@@36 (Tclass._System.___hFunc1 t0@@52 t1@@28)))) (|Set#Equal| (Reads1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25) (|Set#Empty| BoxType)))) (and (=> (Requires1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25) (Requires1 t0@@52 t1@@28 heap@@15 f@@36 bx0@@25)) (=> (Requires1 t0@@52 t1@@28 heap@@15 f@@36 bx0@@25) (Requires1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25)))) :qid |unknown.0:0| :skolemid |772| :pattern ( (Requires1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25) ($IsGoodHeap heap@@15)) :pattern ( (Requires1 t0@@52 t1@@28 heap@@15 f@@36 bx0@@25)) )))
(assert (forall ((f@@37 T@U) (t0@@53 T@U) (t1@@29 T@U) ) (!  (=> (and (and (= (type f@@37) HandleTypeType) (= (type t0@@53) TyType)) (= (type t1@@29) TyType)) (and (=> ($Is f@@37 (Tclass._System.___hFunc1 t0@@53 t1@@29)) (forall ((h@@37 T@U) (bx0@@26 T@U) ) (!  (=> (and (= (type h@@37) (MapType0Type refType MapType1Type)) (= (type bx0@@26) BoxType)) (=> (and (and ($IsGoodHeap h@@37) ($IsBox bx0@@26 t0@@53)) (Requires1 t0@@53 t1@@29 h@@37 f@@37 bx0@@26)) ($IsBox (Apply1 t0@@53 t1@@29 h@@37 f@@37 bx0@@26) t1@@29))) :qid |DafnyPre.521:12| :skolemid |773| :pattern ( (Apply1 t0@@53 t1@@29 h@@37 f@@37 bx0@@26)) ))) (=> (forall ((h@@38 T@U) (bx0@@27 T@U) ) (!  (=> (and (= (type h@@38) (MapType0Type refType MapType1Type)) (= (type bx0@@27) BoxType)) (=> (and (and ($IsGoodHeap h@@38) ($IsBox bx0@@27 t0@@53)) (Requires1 t0@@53 t1@@29 h@@38 f@@37 bx0@@27)) ($IsBox (Apply1 t0@@53 t1@@29 h@@38 f@@37 bx0@@27) t1@@29))) :qid |DafnyPre.521:12| :skolemid |773| :pattern ( (Apply1 t0@@53 t1@@29 h@@38 f@@37 bx0@@27)) )) ($Is f@@37 (Tclass._System.___hFunc1 t0@@53 t1@@29))))) :qid |unknown.0:0| :skolemid |774| :pattern ( ($Is f@@37 (Tclass._System.___hFunc1 t0@@53 t1@@29))) )))
(assert (forall ((f@@38 T@U) (t0@@54 T@U) (t1@@30 T@U) (u0@@1 T@U) (u1@@0 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@38) HandleTypeType) (= (type t0@@54) TyType)) (= (type t1@@30) TyType)) (= (type u0@@1) TyType)) (= (type u1@@0) TyType)) (and (and ($Is f@@38 (Tclass._System.___hFunc1 t0@@54 t1@@30)) (forall ((bx@@54 T@U) ) (!  (=> (and (= (type bx@@54) BoxType) ($IsBox bx@@54 u0@@1)) ($IsBox bx@@54 t0@@54)) :qid |unknown.0:0| :skolemid |775| :pattern ( ($IsBox bx@@54 u0@@1)) :pattern ( ($IsBox bx@@54 t0@@54)) ))) (forall ((bx@@55 T@U) ) (!  (=> (and (= (type bx@@55) BoxType) ($IsBox bx@@55 t1@@30)) ($IsBox bx@@55 u1@@0)) :qid |unknown.0:0| :skolemid |776| :pattern ( ($IsBox bx@@55 t1@@30)) :pattern ( ($IsBox bx@@55 u1@@0)) )))) ($Is f@@38 (Tclass._System.___hFunc1 u0@@1 u1@@0))) :qid |unknown.0:0| :skolemid |777| :pattern ( ($Is f@@38 (Tclass._System.___hFunc1 t0@@54 t1@@30)) ($Is f@@38 (Tclass._System.___hFunc1 u0@@1 u1@@0))) )))
(assert (forall ((f@@39 T@U) (t0@@55 T@U) (t1@@31 T@U) (h@@39 T@U) ) (!  (=> (and (and (and (and (= (type f@@39) HandleTypeType) (= (type t0@@55) TyType)) (= (type t1@@31) TyType)) (= (type h@@39) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@39)) (and (=> ($IsAlloc f@@39 (Tclass._System.___hFunc1 t0@@55 t1@@31) h@@39) (forall ((bx0@@28 T@U) ) (!  (=> (= (type bx0@@28) BoxType) (=> (and (and ($IsBox bx0@@28 t0@@55) ($IsAllocBox bx0@@28 t0@@55 h@@39)) (Requires1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28)) (forall ((r@@19 T@U) ) (!  (=> (= (type r@@19) refType) (=> (and (not (= r@@19 null)) (U_2_bool (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28) ($Box r@@19)))) (U_2_bool (MapType1Select (MapType0Select h@@39 r@@19) alloc)))) :qid |unknown.0:0| :skolemid |778| :pattern ( (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28) ($Box r@@19))) )))) :qid |unknown.0:0| :skolemid |779| :pattern ( (Apply1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28)) :pattern ( (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28)) ))) (=> (forall ((bx0@@29 T@U) ) (!  (=> (= (type bx0@@29) BoxType) (=> (and (and ($IsBox bx0@@29 t0@@55) ($IsAllocBox bx0@@29 t0@@55 h@@39)) (Requires1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29)) (forall ((r@@20 T@U) ) (!  (=> (= (type r@@20) refType) (=> (and (not (= r@@20 null)) (U_2_bool (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29) ($Box r@@20)))) (U_2_bool (MapType1Select (MapType0Select h@@39 r@@20) alloc)))) :qid |unknown.0:0| :skolemid |778| :pattern ( (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29) ($Box r@@20))) )))) :qid |unknown.0:0| :skolemid |779| :pattern ( (Apply1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29)) :pattern ( (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29)) )) ($IsAlloc f@@39 (Tclass._System.___hFunc1 t0@@55 t1@@31) h@@39)))) :qid |unknown.0:0| :skolemid |780| :pattern ( ($IsAlloc f@@39 (Tclass._System.___hFunc1 t0@@55 t1@@31) h@@39)) )))
(assert (forall ((f@@40 T@U) (t0@@56 T@U) (t1@@32 T@U) (h@@40 T@U) ) (!  (=> (and (and (and (and (= (type f@@40) HandleTypeType) (= (type t0@@56) TyType)) (= (type t1@@32) TyType)) (= (type h@@40) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@40) ($IsAlloc f@@40 (Tclass._System.___hFunc1 t0@@56 t1@@32) h@@40))) (forall ((bx0@@30 T@U) ) (!  (=> (= (type bx0@@30) BoxType) (=> (and ($IsAllocBox bx0@@30 t0@@56 h@@40) (Requires1 t0@@56 t1@@32 h@@40 f@@40 bx0@@30)) ($IsAllocBox (Apply1 t0@@56 t1@@32 h@@40 f@@40 bx0@@30) t1@@32 h@@40))) :qid |unknown.0:0| :skolemid |781| :pattern ( (Apply1 t0@@56 t1@@32 h@@40 f@@40 bx0@@30)) ))) :qid |unknown.0:0| :skolemid |782| :pattern ( ($IsAlloc f@@40 (Tclass._System.___hFunc1 t0@@56 t1@@32) h@@40)) )))
(assert (forall ((arg0@@150 T@U) (arg1@@72 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1 arg0@@150 arg1@@72)) TyType) :qid |funType:Tclass._System.___hPartialFunc1| :pattern ( (Tclass._System.___hPartialFunc1 arg0@@150 arg1@@72)) )))
(assert (forall ((|#$T0@@22| T@U) (|#$R@@35| T@U) ) (!  (=> (and (= (type |#$T0@@22|) TyType) (= (type |#$R@@35|) TyType)) (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@22| |#$R@@35|)) Tagclass._System.___hPartialFunc1)) :qid |unknown.0:0| :skolemid |783| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@22| |#$R@@35|)) )))
(assert (forall ((arg0@@151 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_0 arg0@@151)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_0| :pattern ( (Tclass._System.___hPartialFunc1_0 arg0@@151)) )))
(assert (forall ((|#$T0@@23| T@U) (|#$R@@36| T@U) ) (!  (=> (and (= (type |#$T0@@23|) TyType) (= (type |#$R@@36|) TyType)) (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@23| |#$R@@36|)) |#$T0@@23|)) :qid |unknown.0:0| :skolemid |784| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@23| |#$R@@36|)) )))
(assert (forall ((arg0@@152 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_1 arg0@@152)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_1| :pattern ( (Tclass._System.___hPartialFunc1_1 arg0@@152)) )))
(assert (forall ((|#$T0@@24| T@U) (|#$R@@37| T@U) ) (!  (=> (and (= (type |#$T0@@24|) TyType) (= (type |#$R@@37|) TyType)) (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@24| |#$R@@37|)) |#$R@@37|)) :qid |unknown.0:0| :skolemid |785| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@24| |#$R@@37|)) )))
(assert (forall ((|#$T0@@25| T@U) (|#$R@@38| T@U) (bx@@56 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@25|) TyType) (= (type |#$R@@38|) TyType)) (= (type bx@@56) BoxType)) ($IsBox bx@@56 (Tclass._System.___hPartialFunc1 |#$T0@@25| |#$R@@38|))) (and (= ($Box ($Unbox HandleTypeType bx@@56)) bx@@56) ($Is ($Unbox HandleTypeType bx@@56) (Tclass._System.___hPartialFunc1 |#$T0@@25| |#$R@@38|)))) :qid |unknown.0:0| :skolemid |786| :pattern ( ($IsBox bx@@56 (Tclass._System.___hPartialFunc1 |#$T0@@25| |#$R@@38|))) )))
(assert (forall ((|#$T0@@26| T@U) (|#$R@@39| T@U) (|f#0@@7| T@U) ) (!  (=> (and (and (= (type |#$T0@@26|) TyType) (= (type |#$R@@39|) TyType)) (= (type |f#0@@7|) HandleTypeType)) (and (=> ($Is |f#0@@7| (Tclass._System.___hPartialFunc1 |#$T0@@26| |#$R@@39|)) (and ($Is |f#0@@7| (Tclass._System.___hFunc1 |#$T0@@26| |#$R@@39|)) (forall ((|x0#0@@3| T@U) ) (!  (=> (and (= (type |x0#0@@3|) BoxType) ($IsBox |x0#0@@3| |#$T0@@26|)) (|Set#Equal| (Reads1 |#$T0@@26| |#$R@@39| $OneHeap |f#0@@7| |x0#0@@3|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |787| :no-pattern (type |x0#0@@3|) :no-pattern (U_2_int |x0#0@@3|) :no-pattern (U_2_bool |x0#0@@3|) )))) (=> (and ($Is |f#0@@7| (Tclass._System.___hFunc1 |#$T0@@26| |#$R@@39|)) (forall ((|x0#0@@4| T@U) ) (!  (=> (and (= (type |x0#0@@4|) BoxType) ($IsBox |x0#0@@4| |#$T0@@26|)) (|Set#Equal| (Reads1 |#$T0@@26| |#$R@@39| $OneHeap |f#0@@7| |x0#0@@4|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |787| :no-pattern (type |x0#0@@4|) :no-pattern (U_2_int |x0#0@@4|) :no-pattern (U_2_bool |x0#0@@4|) ))) ($Is |f#0@@7| (Tclass._System.___hPartialFunc1 |#$T0@@26| |#$R@@39|))))) :qid |unknown.0:0| :skolemid |788| :pattern ( ($Is |f#0@@7| (Tclass._System.___hPartialFunc1 |#$T0@@26| |#$R@@39|))) )))
(assert (forall ((|#$T0@@27| T@U) (|#$R@@40| T@U) (|f#0@@8| T@U) ($h@@12 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@27|) TyType) (= (type |#$R@@40|) TyType)) (= (type |f#0@@8|) HandleTypeType)) (= (type $h@@12) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc1 |#$T0@@27| |#$R@@40|) $h@@12) ($IsAlloc |f#0@@8| (Tclass._System.___hFunc1 |#$T0@@27| |#$R@@40|) $h@@12)) (=> ($IsAlloc |f#0@@8| (Tclass._System.___hFunc1 |#$T0@@27| |#$R@@40|) $h@@12) ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc1 |#$T0@@27| |#$R@@40|) $h@@12)))) :qid |unknown.0:0| :skolemid |789| :pattern ( ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc1 |#$T0@@27| |#$R@@40|) $h@@12)) )))
(assert (forall ((arg0@@153 T@U) (arg1@@73 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1 arg0@@153 arg1@@73)) TyType) :qid |funType:Tclass._System.___hTotalFunc1| :pattern ( (Tclass._System.___hTotalFunc1 arg0@@153 arg1@@73)) )))
(assert (forall ((|#$T0@@28| T@U) (|#$R@@41| T@U) ) (!  (=> (and (= (type |#$T0@@28|) TyType) (= (type |#$R@@41|) TyType)) (= (Tag (Tclass._System.___hTotalFunc1 |#$T0@@28| |#$R@@41|)) Tagclass._System.___hTotalFunc1)) :qid |unknown.0:0| :skolemid |790| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@28| |#$R@@41|)) )))
(assert (forall ((arg0@@154 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_0 arg0@@154)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_0| :pattern ( (Tclass._System.___hTotalFunc1_0 arg0@@154)) )))
(assert (forall ((|#$T0@@29| T@U) (|#$R@@42| T@U) ) (!  (=> (and (= (type |#$T0@@29|) TyType) (= (type |#$R@@42|) TyType)) (= (Tclass._System.___hTotalFunc1_0 (Tclass._System.___hTotalFunc1 |#$T0@@29| |#$R@@42|)) |#$T0@@29|)) :qid |unknown.0:0| :skolemid |791| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@29| |#$R@@42|)) )))
(assert (forall ((arg0@@155 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_1 arg0@@155)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_1| :pattern ( (Tclass._System.___hTotalFunc1_1 arg0@@155)) )))
(assert (forall ((|#$T0@@30| T@U) (|#$R@@43| T@U) ) (!  (=> (and (= (type |#$T0@@30|) TyType) (= (type |#$R@@43|) TyType)) (= (Tclass._System.___hTotalFunc1_1 (Tclass._System.___hTotalFunc1 |#$T0@@30| |#$R@@43|)) |#$R@@43|)) :qid |unknown.0:0| :skolemid |792| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@30| |#$R@@43|)) )))
(assert (forall ((|#$T0@@31| T@U) (|#$R@@44| T@U) (bx@@57 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@31|) TyType) (= (type |#$R@@44|) TyType)) (= (type bx@@57) BoxType)) ($IsBox bx@@57 (Tclass._System.___hTotalFunc1 |#$T0@@31| |#$R@@44|))) (and (= ($Box ($Unbox HandleTypeType bx@@57)) bx@@57) ($Is ($Unbox HandleTypeType bx@@57) (Tclass._System.___hTotalFunc1 |#$T0@@31| |#$R@@44|)))) :qid |unknown.0:0| :skolemid |793| :pattern ( ($IsBox bx@@57 (Tclass._System.___hTotalFunc1 |#$T0@@31| |#$R@@44|))) )))
(assert (forall ((|#$T0@@32| T@U) (|#$R@@45| T@U) (|f#0@@9| T@U) ) (!  (=> (and (and (= (type |#$T0@@32|) TyType) (= (type |#$R@@45|) TyType)) (= (type |f#0@@9|) HandleTypeType)) (and (=> ($Is |f#0@@9| (Tclass._System.___hTotalFunc1 |#$T0@@32| |#$R@@45|)) (and ($Is |f#0@@9| (Tclass._System.___hPartialFunc1 |#$T0@@32| |#$R@@45|)) (forall ((|x0#0@@5| T@U) ) (!  (=> (and (= (type |x0#0@@5|) BoxType) ($IsBox |x0#0@@5| |#$T0@@32|)) (Requires1 |#$T0@@32| |#$R@@45| $OneHeap |f#0@@9| |x0#0@@5|)) :qid |unknown.0:0| :skolemid |794| :no-pattern (type |x0#0@@5|) :no-pattern (U_2_int |x0#0@@5|) :no-pattern (U_2_bool |x0#0@@5|) )))) (=> (and ($Is |f#0@@9| (Tclass._System.___hPartialFunc1 |#$T0@@32| |#$R@@45|)) (forall ((|x0#0@@6| T@U) ) (!  (=> (and (= (type |x0#0@@6|) BoxType) ($IsBox |x0#0@@6| |#$T0@@32|)) (Requires1 |#$T0@@32| |#$R@@45| $OneHeap |f#0@@9| |x0#0@@6|)) :qid |unknown.0:0| :skolemid |794| :no-pattern (type |x0#0@@6|) :no-pattern (U_2_int |x0#0@@6|) :no-pattern (U_2_bool |x0#0@@6|) ))) ($Is |f#0@@9| (Tclass._System.___hTotalFunc1 |#$T0@@32| |#$R@@45|))))) :qid |unknown.0:0| :skolemid |795| :pattern ( ($Is |f#0@@9| (Tclass._System.___hTotalFunc1 |#$T0@@32| |#$R@@45|))) )))
(assert (forall ((|#$T0@@33| T@U) (|#$R@@46| T@U) (|f#0@@10| T@U) ($h@@13 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@33|) TyType) (= (type |#$R@@46|) TyType)) (= (type |f#0@@10|) HandleTypeType)) (= (type $h@@13) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc1 |#$T0@@33| |#$R@@46|) $h@@13) ($IsAlloc |f#0@@10| (Tclass._System.___hPartialFunc1 |#$T0@@33| |#$R@@46|) $h@@13)) (=> ($IsAlloc |f#0@@10| (Tclass._System.___hPartialFunc1 |#$T0@@33| |#$R@@46|) $h@@13) ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc1 |#$T0@@33| |#$R@@46|) $h@@13)))) :qid |unknown.0:0| :skolemid |796| :pattern ( ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc1 |#$T0@@33| |#$R@@46|) $h@@13)) )))
(assert  (and (forall ((arg0@@156 T@U) (arg1@@74 T@U) ) (! (= (type (|#_System._tuple#2._#Make2| arg0@@156 arg1@@74)) DatatypeTypeType) :qid |funType:#_System._tuple#2._#Make2| :pattern ( (|#_System._tuple#2._#Make2| arg0@@156 arg1@@74)) )) (forall ((arg0@@157 T@U) ) (! (= (type (DatatypeCtorId arg0@@157)) DtCtorIdType) :qid |funType:DatatypeCtorId| :pattern ( (DatatypeCtorId arg0@@157)) ))))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (!  (=> (and (= (type |a#0#0#0|) BoxType) (= (type |a#0#1#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)) :qid |unknown.0:0| :skolemid |797| :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) )))
(assert (forall ((d@@0 T@U) ) (!  (=> (= (type d@@0) DatatypeTypeType) (and (=> (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|)) (=> (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|) (_System.Tuple2.___hMake2_q d@@0)))) :qid |unknown.0:0| :skolemid |798| :pattern ( (_System.Tuple2.___hMake2_q d@@0)) )))
(assert (forall ((d@@1 T@U) ) (!  (=> (and (= (type d@@1) DatatypeTypeType) (_System.Tuple2.___hMake2_q d@@1)) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (!  (and (and (= (type |a#1#0#0|) BoxType) (= (type |a#1#1#0|) BoxType)) (= d@@1 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))) :qid |unknown.0:0| :skolemid |799| :no-pattern (type |a#1#0#0|) :no-pattern (type |a#1#1#0|) :no-pattern (U_2_int |a#1#0#0|) :no-pattern (U_2_bool |a#1#0#0|) :no-pattern (U_2_int |a#1#1#0|) :no-pattern (U_2_bool |a#1#1#0|) ))) :qid |unknown.0:0| :skolemid |800| :pattern ( (_System.Tuple2.___hMake2_q d@@1)) )))
(assert (forall ((arg0@@158 T@U) (arg1@@75 T@U) ) (! (= (type (Tclass._System.Tuple2 arg0@@158 arg1@@75)) TyType) :qid |funType:Tclass._System.Tuple2| :pattern ( (Tclass._System.Tuple2 arg0@@158 arg1@@75)) )))
(assert (forall ((|#$T0@@34| T@U) (|#$T1@@18| T@U) ) (!  (=> (and (= (type |#$T0@@34|) TyType) (= (type |#$T1@@18|) TyType)) (= (Tag (Tclass._System.Tuple2 |#$T0@@34| |#$T1@@18|)) Tagclass._System.Tuple2)) :qid |unknown.0:0| :skolemid |801| :pattern ( (Tclass._System.Tuple2 |#$T0@@34| |#$T1@@18|)) )))
(assert (forall ((arg0@@159 T@U) ) (! (= (type (Tclass._System.Tuple2_0 arg0@@159)) TyType) :qid |funType:Tclass._System.Tuple2_0| :pattern ( (Tclass._System.Tuple2_0 arg0@@159)) )))
(assert (forall ((|#$T0@@35| T@U) (|#$T1@@19| T@U) ) (!  (=> (and (= (type |#$T0@@35|) TyType) (= (type |#$T1@@19|) TyType)) (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |#$T0@@35| |#$T1@@19|)) |#$T0@@35|)) :qid |unknown.0:0| :skolemid |802| :pattern ( (Tclass._System.Tuple2 |#$T0@@35| |#$T1@@19|)) )))
(assert (forall ((arg0@@160 T@U) ) (! (= (type (Tclass._System.Tuple2_1 arg0@@160)) TyType) :qid |funType:Tclass._System.Tuple2_1| :pattern ( (Tclass._System.Tuple2_1 arg0@@160)) )))
(assert (forall ((|#$T0@@36| T@U) (|#$T1@@20| T@U) ) (!  (=> (and (= (type |#$T0@@36|) TyType) (= (type |#$T1@@20|) TyType)) (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |#$T0@@36| |#$T1@@20|)) |#$T1@@20|)) :qid |unknown.0:0| :skolemid |803| :pattern ( (Tclass._System.Tuple2 |#$T0@@36| |#$T1@@20|)) )))
(assert (forall ((|#$T0@@37| T@U) (|#$T1@@21| T@U) (bx@@58 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@37|) TyType) (= (type |#$T1@@21|) TyType)) (= (type bx@@58) BoxType)) ($IsBox bx@@58 (Tclass._System.Tuple2 |#$T0@@37| |#$T1@@21|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@58)) bx@@58) ($Is ($Unbox DatatypeTypeType bx@@58) (Tclass._System.Tuple2 |#$T0@@37| |#$T1@@21|)))) :qid |unknown.0:0| :skolemid |804| :pattern ( ($IsBox bx@@58 (Tclass._System.Tuple2 |#$T0@@37| |#$T1@@21|))) )))
(assert (forall ((|#$T0@@38| T@U) (|#$T1@@22| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@38|) TyType) (= (type |#$T1@@22|) TyType)) (= (type |a#2#0#0|) BoxType)) (= (type |a#2#1#0|) BoxType)) (and (=> ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |#$T0@@38| |#$T1@@22|)) (and ($IsBox |a#2#0#0| |#$T0@@38|) ($IsBox |a#2#1#0| |#$T1@@22|))) (=> (and ($IsBox |a#2#0#0| |#$T0@@38|) ($IsBox |a#2#1#0| |#$T1@@22|)) ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |#$T0@@38| |#$T1@@22|))))) :qid |unknown.0:0| :skolemid |805| :pattern ( ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |#$T0@@38| |#$T1@@22|))) )))
(assert (forall ((|#$T0@@39| T@U) (|#$T1@@23| T@U) (|a#3#0#0| T@U) (|a#3#1#0| T@U) ($h@@14 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@39|) TyType) (= (type |#$T1@@23|) TyType)) (= (type |a#3#0#0|) BoxType)) (= (type |a#3#1#0|) BoxType)) (= (type $h@@14) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@14)) (and (=> ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |#$T0@@39| |#$T1@@23|) $h@@14) (and ($IsAllocBox |a#3#0#0| |#$T0@@39| $h@@14) ($IsAllocBox |a#3#1#0| |#$T1@@23| $h@@14))) (=> (and ($IsAllocBox |a#3#0#0| |#$T0@@39| $h@@14) ($IsAllocBox |a#3#1#0| |#$T1@@23| $h@@14)) ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |#$T0@@39| |#$T1@@23|) $h@@14)))) :qid |unknown.0:0| :skolemid |806| :pattern ( ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |#$T0@@39| |#$T1@@23|) $h@@14)) )))
(assert (forall ((d@@2 T@U) (|#$T0@@40| T@U) ($h@@15 T@U) ) (!  (=> (and (and (and (= (type d@@2) DatatypeTypeType) (= (type |#$T0@@40|) TyType)) (= (type $h@@15) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@15) (and (_System.Tuple2.___hMake2_q d@@2) (exists ((|#$T1@@24| T@U) ) (!  (and (= (type |#$T1@@24|) TyType) ($IsAlloc d@@2 (Tclass._System.Tuple2 |#$T0@@40| |#$T1@@24|) $h@@15)) :qid |unknown.0:0| :skolemid |807| :pattern ( ($IsAlloc d@@2 (Tclass._System.Tuple2 |#$T0@@40| |#$T1@@24|) $h@@15)) ))))) ($IsAllocBox (_System.Tuple2._0 d@@2) |#$T0@@40| $h@@15)) :qid |unknown.0:0| :skolemid |808| :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@2) |#$T0@@40| $h@@15)) )))
(assert (forall ((d@@3 T@U) (|#$T1@@25| T@U) ($h@@16 T@U) ) (!  (=> (and (and (and (= (type d@@3) DatatypeTypeType) (= (type |#$T1@@25|) TyType)) (= (type $h@@16) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@16) (and (_System.Tuple2.___hMake2_q d@@3) (exists ((|#$T0@@41| T@U) ) (!  (and (= (type |#$T0@@41|) TyType) ($IsAlloc d@@3 (Tclass._System.Tuple2 |#$T0@@41| |#$T1@@25|) $h@@16)) :qid |unknown.0:0| :skolemid |809| :pattern ( ($IsAlloc d@@3 (Tclass._System.Tuple2 |#$T0@@41| |#$T1@@25|) $h@@16)) ))))) ($IsAllocBox (_System.Tuple2._1 d@@3) |#$T1@@25| $h@@16)) :qid |unknown.0:0| :skolemid |810| :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@3) |#$T1@@25| $h@@16)) )))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (!  (=> (and (= (type |a#4#0#0|) BoxType) (= (type |a#4#1#0|) BoxType)) (= (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|)) (Lit (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)))) :qid |unknown.0:0| :skolemid |811| :pattern ( (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|))) )))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (!  (=> (and (= (type |a#5#0#0|) BoxType) (= (type |a#5#1#0|) BoxType)) (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) |a#5#0#0|)) :qid |unknown.0:0| :skolemid |812| :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) )))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (!  (=> (and (= (type |a#6#0#0|) BoxType) (= (type |a#6#1#0|) BoxType)) (< (BoxRank |a#6#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)))) :qid |unknown.0:0| :skolemid |813| :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) )))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (!  (=> (and (= (type |a#7#0#0|) BoxType) (= (type |a#7#1#0|) BoxType)) (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) |a#7#1#0|)) :qid |unknown.0:0| :skolemid |814| :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) )))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (!  (=> (and (= (type |a#8#0#0|) BoxType) (= (type |a#8#1#0|) BoxType)) (< (BoxRank |a#8#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)))) :qid |unknown.0:0| :skolemid |815| :pattern ( (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)) )))
(assert (forall ((d@@4 T@U) ) (!  (=> (and (= (type d@@4) DatatypeTypeType) (|$IsA#_System.Tuple2| d@@4)) (_System.Tuple2.___hMake2_q d@@4)) :qid |unknown.0:0| :skolemid |816| :pattern ( (|$IsA#_System.Tuple2| d@@4)) )))
(assert (forall ((|#$T0@@42| T@U) (|#$T1@@26| T@U) (d@@5 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@42|) TyType) (= (type |#$T1@@26|) TyType)) (= (type d@@5) DatatypeTypeType)) ($Is d@@5 (Tclass._System.Tuple2 |#$T0@@42| |#$T1@@26|))) (_System.Tuple2.___hMake2_q d@@5)) :qid |unknown.0:0| :skolemid |817| :pattern ( (_System.Tuple2.___hMake2_q d@@5) ($Is d@@5 (Tclass._System.Tuple2 |#$T0@@42| |#$T1@@26|))) )))
(assert (forall ((a@@100 T@U) (b@@61 T@U) ) (!  (=> (and (and (= (type a@@100) DatatypeTypeType) (= (type b@@61) DatatypeTypeType)) true) (and (=> (|_System.Tuple2#Equal| a@@100 b@@61) (and (= (_System.Tuple2._0 a@@100) (_System.Tuple2._0 b@@61)) (= (_System.Tuple2._1 a@@100) (_System.Tuple2._1 b@@61)))) (=> (and (= (_System.Tuple2._0 a@@100) (_System.Tuple2._0 b@@61)) (= (_System.Tuple2._1 a@@100) (_System.Tuple2._1 b@@61))) (|_System.Tuple2#Equal| a@@100 b@@61)))) :qid |unknown.0:0| :skolemid |818| :pattern ( (|_System.Tuple2#Equal| a@@100 b@@61)) )))
(assert (forall ((a@@101 T@U) (b@@62 T@U) ) (!  (=> (and (= (type a@@101) DatatypeTypeType) (= (type b@@62) DatatypeTypeType)) (and (=> (|_System.Tuple2#Equal| a@@101 b@@62) (= a@@101 b@@62)) (=> (= a@@101 b@@62) (|_System.Tuple2#Equal| a@@101 b@@62)))) :qid |unknown.0:0| :skolemid |819| :pattern ( (|_System.Tuple2#Equal| a@@101 b@@62)) )))
(assert (forall ((arg0@@161 T@U) (arg1@@76 T@U) (arg2@@32 T@U) (arg3@@12 T@U) ) (! (= (type (Tclass._System.___hFunc3 arg0@@161 arg1@@76 arg2@@32 arg3@@12)) TyType) :qid |funType:Tclass._System.___hFunc3| :pattern ( (Tclass._System.___hFunc3 arg0@@161 arg1@@76 arg2@@32 arg3@@12)) )))
(assert (forall ((|#$T0@@43| T@U) (|#$T1@@27| T@U) (|#$T2| T@U) (|#$R@@47| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@43|) TyType) (= (type |#$T1@@27|) TyType)) (= (type |#$T2|) TyType)) (= (type |#$R@@47|) TyType)) (= (Tag (Tclass._System.___hFunc3 |#$T0@@43| |#$T1@@27| |#$T2| |#$R@@47|)) Tagclass._System.___hFunc3)) :qid |unknown.0:0| :skolemid |820| :pattern ( (Tclass._System.___hFunc3 |#$T0@@43| |#$T1@@27| |#$T2| |#$R@@47|)) )))
(assert (forall ((arg0@@162 T@U) ) (! (= (type (Tclass._System.___hFunc3_0 arg0@@162)) TyType) :qid |funType:Tclass._System.___hFunc3_0| :pattern ( (Tclass._System.___hFunc3_0 arg0@@162)) )))
(assert (forall ((|#$T0@@44| T@U) (|#$T1@@28| T@U) (|#$T2@@0| T@U) (|#$R@@48| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@44|) TyType) (= (type |#$T1@@28|) TyType)) (= (type |#$T2@@0|) TyType)) (= (type |#$R@@48|) TyType)) (= (Tclass._System.___hFunc3_0 (Tclass._System.___hFunc3 |#$T0@@44| |#$T1@@28| |#$T2@@0| |#$R@@48|)) |#$T0@@44|)) :qid |unknown.0:0| :skolemid |821| :pattern ( (Tclass._System.___hFunc3 |#$T0@@44| |#$T1@@28| |#$T2@@0| |#$R@@48|)) )))
(assert (forall ((arg0@@163 T@U) ) (! (= (type (Tclass._System.___hFunc3_1 arg0@@163)) TyType) :qid |funType:Tclass._System.___hFunc3_1| :pattern ( (Tclass._System.___hFunc3_1 arg0@@163)) )))
(assert (forall ((|#$T0@@45| T@U) (|#$T1@@29| T@U) (|#$T2@@1| T@U) (|#$R@@49| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@45|) TyType) (= (type |#$T1@@29|) TyType)) (= (type |#$T2@@1|) TyType)) (= (type |#$R@@49|) TyType)) (= (Tclass._System.___hFunc3_1 (Tclass._System.___hFunc3 |#$T0@@45| |#$T1@@29| |#$T2@@1| |#$R@@49|)) |#$T1@@29|)) :qid |unknown.0:0| :skolemid |822| :pattern ( (Tclass._System.___hFunc3 |#$T0@@45| |#$T1@@29| |#$T2@@1| |#$R@@49|)) )))
(assert (forall ((arg0@@164 T@U) ) (! (= (type (Tclass._System.___hFunc3_2 arg0@@164)) TyType) :qid |funType:Tclass._System.___hFunc3_2| :pattern ( (Tclass._System.___hFunc3_2 arg0@@164)) )))
(assert (forall ((|#$T0@@46| T@U) (|#$T1@@30| T@U) (|#$T2@@2| T@U) (|#$R@@50| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@46|) TyType) (= (type |#$T1@@30|) TyType)) (= (type |#$T2@@2|) TyType)) (= (type |#$R@@50|) TyType)) (= (Tclass._System.___hFunc3_2 (Tclass._System.___hFunc3 |#$T0@@46| |#$T1@@30| |#$T2@@2| |#$R@@50|)) |#$T2@@2|)) :qid |unknown.0:0| :skolemid |823| :pattern ( (Tclass._System.___hFunc3 |#$T0@@46| |#$T1@@30| |#$T2@@2| |#$R@@50|)) )))
(assert (forall ((arg0@@165 T@U) ) (! (= (type (Tclass._System.___hFunc3_3 arg0@@165)) TyType) :qid |funType:Tclass._System.___hFunc3_3| :pattern ( (Tclass._System.___hFunc3_3 arg0@@165)) )))
(assert (forall ((|#$T0@@47| T@U) (|#$T1@@31| T@U) (|#$T2@@3| T@U) (|#$R@@51| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@47|) TyType) (= (type |#$T1@@31|) TyType)) (= (type |#$T2@@3|) TyType)) (= (type |#$R@@51|) TyType)) (= (Tclass._System.___hFunc3_3 (Tclass._System.___hFunc3 |#$T0@@47| |#$T1@@31| |#$T2@@3| |#$R@@51|)) |#$R@@51|)) :qid |unknown.0:0| :skolemid |824| :pattern ( (Tclass._System.___hFunc3 |#$T0@@47| |#$T1@@31| |#$T2@@3| |#$R@@51|)) )))
(assert (forall ((|#$T0@@48| T@U) (|#$T1@@32| T@U) (|#$T2@@4| T@U) (|#$R@@52| T@U) (bx@@59 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@48|) TyType) (= (type |#$T1@@32|) TyType)) (= (type |#$T2@@4|) TyType)) (= (type |#$R@@52|) TyType)) (= (type bx@@59) BoxType)) ($IsBox bx@@59 (Tclass._System.___hFunc3 |#$T0@@48| |#$T1@@32| |#$T2@@4| |#$R@@52|))) (and (= ($Box ($Unbox HandleTypeType bx@@59)) bx@@59) ($Is ($Unbox HandleTypeType bx@@59) (Tclass._System.___hFunc3 |#$T0@@48| |#$T1@@32| |#$T2@@4| |#$R@@52|)))) :qid |unknown.0:0| :skolemid |825| :pattern ( ($IsBox bx@@59 (Tclass._System.___hFunc3 |#$T0@@48| |#$T1@@32| |#$T2@@4| |#$R@@52|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@166 T@T) (arg1@@77 T@T) (arg2@@33 T@T) (arg3@@13 T@T) (arg4@@4 T@T) ) (! (= (Ctor (MapType4Type arg0@@166 arg1@@77 arg2@@33 arg3@@13 arg4@@4)) 23) :qid |ctor:MapType4Type| )) (forall ((arg0@@167 T@T) (arg1@@78 T@T) (arg2@@34 T@T) (arg3@@14 T@T) (arg4@@5 T@T) ) (! (= (MapType4TypeInv0 (MapType4Type arg0@@167 arg1@@78 arg2@@34 arg3@@14 arg4@@5)) arg0@@167) :qid |typeInv:MapType4TypeInv0| :pattern ( (MapType4Type arg0@@167 arg1@@78 arg2@@34 arg3@@14 arg4@@5)) ))) (forall ((arg0@@168 T@T) (arg1@@79 T@T) (arg2@@35 T@T) (arg3@@15 T@T) (arg4@@6 T@T) ) (! (= (MapType4TypeInv1 (MapType4Type arg0@@168 arg1@@79 arg2@@35 arg3@@15 arg4@@6)) arg1@@79) :qid |typeInv:MapType4TypeInv1| :pattern ( (MapType4Type arg0@@168 arg1@@79 arg2@@35 arg3@@15 arg4@@6)) ))) (forall ((arg0@@169 T@T) (arg1@@80 T@T) (arg2@@36 T@T) (arg3@@16 T@T) (arg4@@7 T@T) ) (! (= (MapType4TypeInv2 (MapType4Type arg0@@169 arg1@@80 arg2@@36 arg3@@16 arg4@@7)) arg2@@36) :qid |typeInv:MapType4TypeInv2| :pattern ( (MapType4Type arg0@@169 arg1@@80 arg2@@36 arg3@@16 arg4@@7)) ))) (forall ((arg0@@170 T@T) (arg1@@81 T@T) (arg2@@37 T@T) (arg3@@17 T@T) (arg4@@8 T@T) ) (! (= (MapType4TypeInv3 (MapType4Type arg0@@170 arg1@@81 arg2@@37 arg3@@17 arg4@@8)) arg3@@17) :qid |typeInv:MapType4TypeInv3| :pattern ( (MapType4Type arg0@@170 arg1@@81 arg2@@37 arg3@@17 arg4@@8)) ))) (forall ((arg0@@171 T@T) (arg1@@82 T@T) (arg2@@38 T@T) (arg3@@18 T@T) (arg4@@9 T@T) ) (! (= (MapType4TypeInv4 (MapType4Type arg0@@171 arg1@@82 arg2@@38 arg3@@18 arg4@@9)) arg4@@9) :qid |typeInv:MapType4TypeInv4| :pattern ( (MapType4Type arg0@@171 arg1@@82 arg2@@38 arg3@@18 arg4@@9)) ))) (forall ((arg0@@172 T@U) (arg1@@83 T@U) (arg2@@39 T@U) (arg3@@19 T@U) (arg4@@10 T@U) ) (! (let ((aVar4 (MapType4TypeInv4 (type arg0@@172)))) (= (type (MapType4Select arg0@@172 arg1@@83 arg2@@39 arg3@@19 arg4@@10)) aVar4)) :qid |funType:MapType4Select| :pattern ( (MapType4Select arg0@@172 arg1@@83 arg2@@39 arg3@@19 arg4@@10)) ))) (forall ((arg0@@173 T@U) (arg1@@84 T@U) (arg2@@40 T@U) (arg3@@20 T@U) (arg4@@11 T@U) (arg5@@1 T@U) ) (! (let ((aVar4@@0 (type arg5@@1))) (let ((aVar3@@2 (type arg4@@11))) (let ((aVar2@@3 (type arg3@@20))) (let ((aVar1@@4 (type arg2@@40))) (let ((aVar0@@2 (type arg1@@84))) (= (type (MapType4Store arg0@@173 arg1@@84 arg2@@40 arg3@@20 arg4@@11 arg5@@1)) (MapType4Type aVar0@@2 aVar1@@4 aVar2@@3 aVar3@@2 aVar4@@0))))))) :qid |funType:MapType4Store| :pattern ( (MapType4Store arg0@@173 arg1@@84 arg2@@40 arg3@@20 arg4@@11 arg5@@1)) ))) (forall ((m@@36 T@U) (x0@@14 T@U) (x1@@8 T@U) (x2@@4 T@U) (x3 T@U) (val@@15 T@U) ) (! (let ((aVar4@@1 (MapType4TypeInv4 (type m@@36)))) (=> (= (type val@@15) aVar4@@1) (= (MapType4Select (MapType4Store m@@36 x0@@14 x1@@8 x2@@4 x3 val@@15) x0@@14 x1@@8 x2@@4 x3) val@@15))) :qid |mapAx0:MapType4Select| :weight 0 ))) (and (and (and (and (forall ((val@@16 T@U) (m@@37 T@U) (x0@@15 T@U) (x1@@9 T@U) (x2@@5 T@U) (x3@@0 T@U) (y0@@10 T@U) (y1@@6 T@U) (y2@@3 T@U) (y3 T@U) ) (!  (or (= x0@@15 y0@@10) (= (MapType4Select (MapType4Store m@@37 x0@@15 x1@@9 x2@@5 x3@@0 val@@16) y0@@10 y1@@6 y2@@3 y3) (MapType4Select m@@37 y0@@10 y1@@6 y2@@3 y3))) :qid |mapAx1:MapType4Select:0| :weight 0 )) (forall ((val@@17 T@U) (m@@38 T@U) (x0@@16 T@U) (x1@@10 T@U) (x2@@6 T@U) (x3@@1 T@U) (y0@@11 T@U) (y1@@7 T@U) (y2@@4 T@U) (y3@@0 T@U) ) (!  (or (= x1@@10 y1@@7) (= (MapType4Select (MapType4Store m@@38 x0@@16 x1@@10 x2@@6 x3@@1 val@@17) y0@@11 y1@@7 y2@@4 y3@@0) (MapType4Select m@@38 y0@@11 y1@@7 y2@@4 y3@@0))) :qid |mapAx1:MapType4Select:1| :weight 0 ))) (forall ((val@@18 T@U) (m@@39 T@U) (x0@@17 T@U) (x1@@11 T@U) (x2@@7 T@U) (x3@@2 T@U) (y0@@12 T@U) (y1@@8 T@U) (y2@@5 T@U) (y3@@1 T@U) ) (!  (or (= x2@@7 y2@@5) (= (MapType4Select (MapType4Store m@@39 x0@@17 x1@@11 x2@@7 x3@@2 val@@18) y0@@12 y1@@8 y2@@5 y3@@1) (MapType4Select m@@39 y0@@12 y1@@8 y2@@5 y3@@1))) :qid |mapAx1:MapType4Select:2| :weight 0 ))) (forall ((val@@19 T@U) (m@@40 T@U) (x0@@18 T@U) (x1@@12 T@U) (x2@@8 T@U) (x3@@3 T@U) (y0@@13 T@U) (y1@@9 T@U) (y2@@6 T@U) (y3@@2 T@U) ) (!  (or (= x3@@3 y3@@2) (= (MapType4Select (MapType4Store m@@40 x0@@18 x1@@12 x2@@8 x3@@3 val@@19) y0@@13 y1@@9 y2@@6 y3@@2) (MapType4Select m@@40 y0@@13 y1@@9 y2@@6 y3@@2))) :qid |mapAx1:MapType4Select:3| :weight 0 ))) (forall ((val@@20 T@U) (m@@41 T@U) (x0@@19 T@U) (x1@@13 T@U) (x2@@9 T@U) (x3@@4 T@U) (y0@@14 T@U) (y1@@10 T@U) (y2@@7 T@U) (y3@@3 T@U) ) (!  (or true (= (MapType4Select (MapType4Store m@@41 x0@@19 x1@@13 x2@@9 x3@@4 val@@20) y0@@14 y1@@10 y2@@7 y3@@3) (MapType4Select m@@41 y0@@14 y1@@10 y2@@7 y3@@3))) :qid |mapAx2:MapType4Select| :weight 0 )))) (forall ((arg0@@174 T@U) (arg1@@85 T@U) (arg2@@41 T@U) (arg3@@21 T@U) (arg4@@12 T@U) (arg5@@2 T@U) (arg6@@1 T@U) (arg7 T@U) (arg8 T@U) ) (! (= (type (Apply3 arg0@@174 arg1@@85 arg2@@41 arg3@@21 arg4@@12 arg5@@2 arg6@@1 arg7 arg8)) BoxType) :qid |funType:Apply3| :pattern ( (Apply3 arg0@@174 arg1@@85 arg2@@41 arg3@@21 arg4@@12 arg5@@2 arg6@@1 arg7 arg8)) ))) (forall ((arg0@@175 T@U) (arg1@@86 T@U) (arg2@@42 T@U) ) (! (= (type (Handle3 arg0@@175 arg1@@86 arg2@@42)) HandleTypeType) :qid |funType:Handle3| :pattern ( (Handle3 arg0@@175 arg1@@86 arg2@@42)) ))))
(assert (forall ((t0@@57 T@U) (t1@@33 T@U) (t2@@14 T@U) (t3 T@U) (heap@@16 T@U) (h@@41 T@U) (r@@21 T@U) (rd@@8 T@U) (bx0@@31 T@U) (bx1@@15 T@U) (bx2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@57) TyType) (= (type t1@@33) TyType)) (= (type t2@@14) TyType)) (= (type t3) TyType)) (= (type heap@@16) (MapType0Type refType MapType1Type))) (= (type h@@41) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@21) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@8) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@31) BoxType)) (= (type bx1@@15) BoxType)) (= (type bx2) BoxType)) (= (Apply3 t0@@57 t1@@33 t2@@14 t3 heap@@16 (Handle3 h@@41 r@@21 rd@@8) bx0@@31 bx1@@15 bx2) (MapType4Select h@@41 heap@@16 bx0@@31 bx1@@15 bx2))) :qid |unknown.0:0| :skolemid |826| :pattern ( (Apply3 t0@@57 t1@@33 t2@@14 t3 heap@@16 (Handle3 h@@41 r@@21 rd@@8) bx0@@31 bx1@@15 bx2)) )))
(assert (forall ((t0@@58 T@U) (t1@@34 T@U) (t2@@15 T@U) (t3@@0 T@U) (heap@@17 T@U) (h@@42 T@U) (r@@22 T@U) (rd@@9 T@U) (bx0@@32 T@U) (bx1@@16 T@U) (bx2@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@58) TyType) (= (type t1@@34) TyType)) (= (type t2@@15) TyType)) (= (type t3@@0) TyType)) (= (type heap@@17) (MapType0Type refType MapType1Type))) (= (type h@@42) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@22) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@9) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@32) BoxType)) (= (type bx1@@16) BoxType)) (= (type bx2@@0) BoxType)) (U_2_bool (MapType4Select r@@22 heap@@17 bx0@@32 bx1@@16 bx2@@0))) (Requires3 t0@@58 t1@@34 t2@@15 t3@@0 heap@@17 (Handle3 h@@42 r@@22 rd@@9) bx0@@32 bx1@@16 bx2@@0)) :qid |unknown.0:0| :skolemid |827| :pattern ( (Requires3 t0@@58 t1@@34 t2@@15 t3@@0 heap@@17 (Handle3 h@@42 r@@22 rd@@9) bx0@@32 bx1@@16 bx2@@0)) )))
(assert (forall ((arg0@@176 T@U) (arg1@@87 T@U) (arg2@@43 T@U) (arg3@@22 T@U) (arg4@@13 T@U) (arg5@@3 T@U) (arg6@@2 T@U) (arg7@@0 T@U) (arg8@@0 T@U) ) (! (= (type (Reads3 arg0@@176 arg1@@87 arg2@@43 arg3@@22 arg4@@13 arg5@@3 arg6@@2 arg7@@0 arg8@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads3| :pattern ( (Reads3 arg0@@176 arg1@@87 arg2@@43 arg3@@22 arg4@@13 arg5@@3 arg6@@2 arg7@@0 arg8@@0)) )))
(assert (forall ((t0@@59 T@U) (t1@@35 T@U) (t2@@16 T@U) (t3@@1 T@U) (heap@@18 T@U) (h@@43 T@U) (r@@23 T@U) (rd@@10 T@U) (bx0@@33 T@U) (bx1@@17 T@U) (bx2@@1 T@U) (bx@@60 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@59) TyType) (= (type t1@@35) TyType)) (= (type t2@@16) TyType)) (= (type t3@@1) TyType)) (= (type heap@@18) (MapType0Type refType MapType1Type))) (= (type h@@43) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@23) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@10) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@33) BoxType)) (= (type bx1@@17) BoxType)) (= (type bx2@@1) BoxType)) (= (type bx@@60) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads3 t0@@59 t1@@35 t2@@16 t3@@1 heap@@18 (Handle3 h@@43 r@@23 rd@@10) bx0@@33 bx1@@17 bx2@@1) bx@@60)) (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@18 bx0@@33 bx1@@17 bx2@@1) bx@@60))) (=> (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@18 bx0@@33 bx1@@17 bx2@@1) bx@@60)) (U_2_bool (MapType0Select (Reads3 t0@@59 t1@@35 t2@@16 t3@@1 heap@@18 (Handle3 h@@43 r@@23 rd@@10) bx0@@33 bx1@@17 bx2@@1) bx@@60))))) :qid |unknown.0:0| :skolemid |828| :pattern ( (MapType0Select (Reads3 t0@@59 t1@@35 t2@@16 t3@@1 heap@@18 (Handle3 h@@43 r@@23 rd@@10) bx0@@33 bx1@@17 bx2@@1) bx@@60)) )))
(assert (forall ((t0@@60 T@U) (t1@@36 T@U) (t2@@17 T@U) (t3@@2 T@U) (h0@@18 T@U) (h1@@18 T@U) (f@@41 T@U) (bx0@@34 T@U) (bx1@@18 T@U) (bx2@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@60) TyType) (= (type t1@@36) TyType)) (= (type t2@@17) TyType)) (= (type t3@@2) TyType)) (= (type h0@@18) (MapType0Type refType MapType1Type))) (= (type h1@@18) (MapType0Type refType MapType1Type))) (= (type f@@41) HandleTypeType)) (= (type bx0@@34) BoxType)) (= (type bx1@@18) BoxType)) (= (type bx2@@2) BoxType)) (and (and (and ($HeapSucc h0@@18 h1@@18) (and ($IsGoodHeap h0@@18) ($IsGoodHeap h1@@18))) (and (and (and ($IsBox bx0@@34 t0@@60) ($IsBox bx1@@18 t1@@36)) ($IsBox bx2@@2 t2@@17)) ($Is f@@41 (Tclass._System.___hFunc3 t0@@60 t1@@36 t2@@17 t3@@2)))) (forall ((o@@72 T@U) (fld@@17 T@U) ) (! (let ((a@@102 (FieldTypeInv0 (type fld@@17)))) (=> (and (and (= (type o@@72) refType) (= (type fld@@17) (FieldType a@@102))) (and (not (= o@@72 null)) (U_2_bool (MapType0Select (Reads3 t0@@60 t1@@36 t2@@17 t3@@2 h0@@18 f@@41 bx0@@34 bx1@@18 bx2@@2) ($Box o@@72))))) (= (MapType1Select (MapType0Select h0@@18 o@@72) fld@@17) (MapType1Select (MapType0Select h1@@18 o@@72) fld@@17)))) :qid |unknown.0:0| :skolemid |829| :no-pattern (type o@@72) :no-pattern (type fld@@17) :no-pattern (U_2_int o@@72) :no-pattern (U_2_bool o@@72) :no-pattern (U_2_int fld@@17) :no-pattern (U_2_bool fld@@17) )))) (= (Reads3 t0@@60 t1@@36 t2@@17 t3@@2 h0@@18 f@@41 bx0@@34 bx1@@18 bx2@@2) (Reads3 t0@@60 t1@@36 t2@@17 t3@@2 h1@@18 f@@41 bx0@@34 bx1@@18 bx2@@2))) :qid |unknown.0:0| :skolemid |830| :pattern ( ($HeapSucc h0@@18 h1@@18) (Reads3 t0@@60 t1@@36 t2@@17 t3@@2 h1@@18 f@@41 bx0@@34 bx1@@18 bx2@@2)) )))
(assert (forall ((t0@@61 T@U) (t1@@37 T@U) (t2@@18 T@U) (t3@@3 T@U) (h0@@19 T@U) (h1@@19 T@U) (f@@42 T@U) (bx0@@35 T@U) (bx1@@19 T@U) (bx2@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@61) TyType) (= (type t1@@37) TyType)) (= (type t2@@18) TyType)) (= (type t3@@3) TyType)) (= (type h0@@19) (MapType0Type refType MapType1Type))) (= (type h1@@19) (MapType0Type refType MapType1Type))) (= (type f@@42) HandleTypeType)) (= (type bx0@@35) BoxType)) (= (type bx1@@19) BoxType)) (= (type bx2@@3) BoxType)) (and (and (and ($HeapSucc h0@@19 h1@@19) (and ($IsGoodHeap h0@@19) ($IsGoodHeap h1@@19))) (and (and (and ($IsBox bx0@@35 t0@@61) ($IsBox bx1@@19 t1@@37)) ($IsBox bx2@@3 t2@@18)) ($Is f@@42 (Tclass._System.___hFunc3 t0@@61 t1@@37 t2@@18 t3@@3)))) (forall ((o@@73 T@U) (fld@@18 T@U) ) (! (let ((a@@103 (FieldTypeInv0 (type fld@@18)))) (=> (and (and (= (type o@@73) refType) (= (type fld@@18) (FieldType a@@103))) (and (not (= o@@73 null)) (U_2_bool (MapType0Select (Reads3 t0@@61 t1@@37 t2@@18 t3@@3 h1@@19 f@@42 bx0@@35 bx1@@19 bx2@@3) ($Box o@@73))))) (= (MapType1Select (MapType0Select h0@@19 o@@73) fld@@18) (MapType1Select (MapType0Select h1@@19 o@@73) fld@@18)))) :qid |unknown.0:0| :skolemid |831| :no-pattern (type o@@73) :no-pattern (type fld@@18) :no-pattern (U_2_int o@@73) :no-pattern (U_2_bool o@@73) :no-pattern (U_2_int fld@@18) :no-pattern (U_2_bool fld@@18) )))) (= (Reads3 t0@@61 t1@@37 t2@@18 t3@@3 h0@@19 f@@42 bx0@@35 bx1@@19 bx2@@3) (Reads3 t0@@61 t1@@37 t2@@18 t3@@3 h1@@19 f@@42 bx0@@35 bx1@@19 bx2@@3))) :qid |unknown.0:0| :skolemid |832| :pattern ( ($HeapSucc h0@@19 h1@@19) (Reads3 t0@@61 t1@@37 t2@@18 t3@@3 h1@@19 f@@42 bx0@@35 bx1@@19 bx2@@3)) )))
(assert (forall ((t0@@62 T@U) (t1@@38 T@U) (t2@@19 T@U) (t3@@4 T@U) (h0@@20 T@U) (h1@@20 T@U) (f@@43 T@U) (bx0@@36 T@U) (bx1@@20 T@U) (bx2@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@62) TyType) (= (type t1@@38) TyType)) (= (type t2@@19) TyType)) (= (type t3@@4) TyType)) (= (type h0@@20) (MapType0Type refType MapType1Type))) (= (type h1@@20) (MapType0Type refType MapType1Type))) (= (type f@@43) HandleTypeType)) (= (type bx0@@36) BoxType)) (= (type bx1@@20) BoxType)) (= (type bx2@@4) BoxType)) (and (and (and ($HeapSucc h0@@20 h1@@20) (and ($IsGoodHeap h0@@20) ($IsGoodHeap h1@@20))) (and (and (and ($IsBox bx0@@36 t0@@62) ($IsBox bx1@@20 t1@@38)) ($IsBox bx2@@4 t2@@19)) ($Is f@@43 (Tclass._System.___hFunc3 t0@@62 t1@@38 t2@@19 t3@@4)))) (forall ((o@@74 T@U) (fld@@19 T@U) ) (! (let ((a@@104 (FieldTypeInv0 (type fld@@19)))) (=> (and (and (= (type o@@74) refType) (= (type fld@@19) (FieldType a@@104))) (and (not (= o@@74 null)) (U_2_bool (MapType0Select (Reads3 t0@@62 t1@@38 t2@@19 t3@@4 h0@@20 f@@43 bx0@@36 bx1@@20 bx2@@4) ($Box o@@74))))) (= (MapType1Select (MapType0Select h0@@20 o@@74) fld@@19) (MapType1Select (MapType0Select h1@@20 o@@74) fld@@19)))) :qid |unknown.0:0| :skolemid |833| :no-pattern (type o@@74) :no-pattern (type fld@@19) :no-pattern (U_2_int o@@74) :no-pattern (U_2_bool o@@74) :no-pattern (U_2_int fld@@19) :no-pattern (U_2_bool fld@@19) )))) (and (=> (Requires3 t0@@62 t1@@38 t2@@19 t3@@4 h0@@20 f@@43 bx0@@36 bx1@@20 bx2@@4) (Requires3 t0@@62 t1@@38 t2@@19 t3@@4 h1@@20 f@@43 bx0@@36 bx1@@20 bx2@@4)) (=> (Requires3 t0@@62 t1@@38 t2@@19 t3@@4 h1@@20 f@@43 bx0@@36 bx1@@20 bx2@@4) (Requires3 t0@@62 t1@@38 t2@@19 t3@@4 h0@@20 f@@43 bx0@@36 bx1@@20 bx2@@4)))) :qid |unknown.0:0| :skolemid |834| :pattern ( ($HeapSucc h0@@20 h1@@20) (Requires3 t0@@62 t1@@38 t2@@19 t3@@4 h1@@20 f@@43 bx0@@36 bx1@@20 bx2@@4)) )))
(assert (forall ((t0@@63 T@U) (t1@@39 T@U) (t2@@20 T@U) (t3@@5 T@U) (h0@@21 T@U) (h1@@21 T@U) (f@@44 T@U) (bx0@@37 T@U) (bx1@@21 T@U) (bx2@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@63) TyType) (= (type t1@@39) TyType)) (= (type t2@@20) TyType)) (= (type t3@@5) TyType)) (= (type h0@@21) (MapType0Type refType MapType1Type))) (= (type h1@@21) (MapType0Type refType MapType1Type))) (= (type f@@44) HandleTypeType)) (= (type bx0@@37) BoxType)) (= (type bx1@@21) BoxType)) (= (type bx2@@5) BoxType)) (and (and (and ($HeapSucc h0@@21 h1@@21) (and ($IsGoodHeap h0@@21) ($IsGoodHeap h1@@21))) (and (and (and ($IsBox bx0@@37 t0@@63) ($IsBox bx1@@21 t1@@39)) ($IsBox bx2@@5 t2@@20)) ($Is f@@44 (Tclass._System.___hFunc3 t0@@63 t1@@39 t2@@20 t3@@5)))) (forall ((o@@75 T@U) (fld@@20 T@U) ) (! (let ((a@@105 (FieldTypeInv0 (type fld@@20)))) (=> (and (and (= (type o@@75) refType) (= (type fld@@20) (FieldType a@@105))) (and (not (= o@@75 null)) (U_2_bool (MapType0Select (Reads3 t0@@63 t1@@39 t2@@20 t3@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5) ($Box o@@75))))) (= (MapType1Select (MapType0Select h0@@21 o@@75) fld@@20) (MapType1Select (MapType0Select h1@@21 o@@75) fld@@20)))) :qid |unknown.0:0| :skolemid |835| :no-pattern (type o@@75) :no-pattern (type fld@@20) :no-pattern (U_2_int o@@75) :no-pattern (U_2_bool o@@75) :no-pattern (U_2_int fld@@20) :no-pattern (U_2_bool fld@@20) )))) (and (=> (Requires3 t0@@63 t1@@39 t2@@20 t3@@5 h0@@21 f@@44 bx0@@37 bx1@@21 bx2@@5) (Requires3 t0@@63 t1@@39 t2@@20 t3@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5)) (=> (Requires3 t0@@63 t1@@39 t2@@20 t3@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5) (Requires3 t0@@63 t1@@39 t2@@20 t3@@5 h0@@21 f@@44 bx0@@37 bx1@@21 bx2@@5)))) :qid |unknown.0:0| :skolemid |836| :pattern ( ($HeapSucc h0@@21 h1@@21) (Requires3 t0@@63 t1@@39 t2@@20 t3@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5)) )))
(assert (forall ((t0@@64 T@U) (t1@@40 T@U) (t2@@21 T@U) (t3@@6 T@U) (h0@@22 T@U) (h1@@22 T@U) (f@@45 T@U) (bx0@@38 T@U) (bx1@@22 T@U) (bx2@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@64) TyType) (= (type t1@@40) TyType)) (= (type t2@@21) TyType)) (= (type t3@@6) TyType)) (= (type h0@@22) (MapType0Type refType MapType1Type))) (= (type h1@@22) (MapType0Type refType MapType1Type))) (= (type f@@45) HandleTypeType)) (= (type bx0@@38) BoxType)) (= (type bx1@@22) BoxType)) (= (type bx2@@6) BoxType)) (and (and (and ($HeapSucc h0@@22 h1@@22) (and ($IsGoodHeap h0@@22) ($IsGoodHeap h1@@22))) (and (and (and ($IsBox bx0@@38 t0@@64) ($IsBox bx1@@22 t1@@40)) ($IsBox bx2@@6 t2@@21)) ($Is f@@45 (Tclass._System.___hFunc3 t0@@64 t1@@40 t2@@21 t3@@6)))) (forall ((o@@76 T@U) (fld@@21 T@U) ) (! (let ((a@@106 (FieldTypeInv0 (type fld@@21)))) (=> (and (and (= (type o@@76) refType) (= (type fld@@21) (FieldType a@@106))) (and (not (= o@@76 null)) (U_2_bool (MapType0Select (Reads3 t0@@64 t1@@40 t2@@21 t3@@6 h0@@22 f@@45 bx0@@38 bx1@@22 bx2@@6) ($Box o@@76))))) (= (MapType1Select (MapType0Select h0@@22 o@@76) fld@@21) (MapType1Select (MapType0Select h1@@22 o@@76) fld@@21)))) :qid |unknown.0:0| :skolemid |837| :no-pattern (type o@@76) :no-pattern (type fld@@21) :no-pattern (U_2_int o@@76) :no-pattern (U_2_bool o@@76) :no-pattern (U_2_int fld@@21) :no-pattern (U_2_bool fld@@21) )))) (= (Apply3 t0@@64 t1@@40 t2@@21 t3@@6 h0@@22 f@@45 bx0@@38 bx1@@22 bx2@@6) (Apply3 t0@@64 t1@@40 t2@@21 t3@@6 h1@@22 f@@45 bx0@@38 bx1@@22 bx2@@6))) :qid |unknown.0:0| :skolemid |838| :pattern ( ($HeapSucc h0@@22 h1@@22) (Apply3 t0@@64 t1@@40 t2@@21 t3@@6 h1@@22 f@@45 bx0@@38 bx1@@22 bx2@@6)) )))
(assert (forall ((t0@@65 T@U) (t1@@41 T@U) (t2@@22 T@U) (t3@@7 T@U) (h0@@23 T@U) (h1@@23 T@U) (f@@46 T@U) (bx0@@39 T@U) (bx1@@23 T@U) (bx2@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@65) TyType) (= (type t1@@41) TyType)) (= (type t2@@22) TyType)) (= (type t3@@7) TyType)) (= (type h0@@23) (MapType0Type refType MapType1Type))) (= (type h1@@23) (MapType0Type refType MapType1Type))) (= (type f@@46) HandleTypeType)) (= (type bx0@@39) BoxType)) (= (type bx1@@23) BoxType)) (= (type bx2@@7) BoxType)) (and (and (and ($HeapSucc h0@@23 h1@@23) (and ($IsGoodHeap h0@@23) ($IsGoodHeap h1@@23))) (and (and (and ($IsBox bx0@@39 t0@@65) ($IsBox bx1@@23 t1@@41)) ($IsBox bx2@@7 t2@@22)) ($Is f@@46 (Tclass._System.___hFunc3 t0@@65 t1@@41 t2@@22 t3@@7)))) (forall ((o@@77 T@U) (fld@@22 T@U) ) (! (let ((a@@107 (FieldTypeInv0 (type fld@@22)))) (=> (and (and (= (type o@@77) refType) (= (type fld@@22) (FieldType a@@107))) (and (not (= o@@77 null)) (U_2_bool (MapType0Select (Reads3 t0@@65 t1@@41 t2@@22 t3@@7 h1@@23 f@@46 bx0@@39 bx1@@23 bx2@@7) ($Box o@@77))))) (= (MapType1Select (MapType0Select h0@@23 o@@77) fld@@22) (MapType1Select (MapType0Select h1@@23 o@@77) fld@@22)))) :qid |unknown.0:0| :skolemid |839| :no-pattern (type o@@77) :no-pattern (type fld@@22) :no-pattern (U_2_int o@@77) :no-pattern (U_2_bool o@@77) :no-pattern (U_2_int fld@@22) :no-pattern (U_2_bool fld@@22) )))) (= (Apply3 t0@@65 t1@@41 t2@@22 t3@@7 h0@@23 f@@46 bx0@@39 bx1@@23 bx2@@7) (Apply3 t0@@65 t1@@41 t2@@22 t3@@7 h1@@23 f@@46 bx0@@39 bx1@@23 bx2@@7))) :qid |unknown.0:0| :skolemid |840| :pattern ( ($HeapSucc h0@@23 h1@@23) (Apply3 t0@@65 t1@@41 t2@@22 t3@@7 h1@@23 f@@46 bx0@@39 bx1@@23 bx2@@7)) )))
(assert (forall ((t0@@66 T@U) (t1@@42 T@U) (t2@@23 T@U) (t3@@8 T@U) (heap@@19 T@U) (f@@47 T@U) (bx0@@40 T@U) (bx1@@24 T@U) (bx2@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@66) TyType) (= (type t1@@42) TyType)) (= (type t2@@23) TyType)) (= (type t3@@8) TyType)) (= (type heap@@19) (MapType0Type refType MapType1Type))) (= (type f@@47) HandleTypeType)) (= (type bx0@@40) BoxType)) (= (type bx1@@24) BoxType)) (= (type bx2@@8) BoxType)) (and ($IsGoodHeap heap@@19) (and (and (and ($IsBox bx0@@40 t0@@66) ($IsBox bx1@@24 t1@@42)) ($IsBox bx2@@8 t2@@23)) ($Is f@@47 (Tclass._System.___hFunc3 t0@@66 t1@@42 t2@@23 t3@@8))))) (and (=> (|Set#Equal| (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 $OneHeap f@@47 bx0@@40 bx1@@24 bx2@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 heap@@19 f@@47 bx0@@40 bx1@@24 bx2@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 heap@@19 f@@47 bx0@@40 bx1@@24 bx2@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 $OneHeap f@@47 bx0@@40 bx1@@24 bx2@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |841| :pattern ( (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 $OneHeap f@@47 bx0@@40 bx1@@24 bx2@@8) ($IsGoodHeap heap@@19)) :pattern ( (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 heap@@19 f@@47 bx0@@40 bx1@@24 bx2@@8)) )))
(assert (forall ((t0@@67 T@U) (t1@@43 T@U) (t2@@24 T@U) (t3@@9 T@U) (heap@@20 T@U) (f@@48 T@U) (bx0@@41 T@U) (bx1@@25 T@U) (bx2@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@67) TyType) (= (type t1@@43) TyType)) (= (type t2@@24) TyType)) (= (type t3@@9) TyType)) (= (type heap@@20) (MapType0Type refType MapType1Type))) (= (type f@@48) HandleTypeType)) (= (type bx0@@41) BoxType)) (= (type bx1@@25) BoxType)) (= (type bx2@@9) BoxType)) (and (and ($IsGoodHeap heap@@20) (and (and (and ($IsBox bx0@@41 t0@@67) ($IsBox bx1@@25 t1@@43)) ($IsBox bx2@@9 t2@@24)) ($Is f@@48 (Tclass._System.___hFunc3 t0@@67 t1@@43 t2@@24 t3@@9)))) (|Set#Equal| (Reads3 t0@@67 t1@@43 t2@@24 t3@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9) (|Set#Empty| BoxType)))) (and (=> (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9) (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 heap@@20 f@@48 bx0@@41 bx1@@25 bx2@@9)) (=> (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 heap@@20 f@@48 bx0@@41 bx1@@25 bx2@@9) (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9)))) :qid |unknown.0:0| :skolemid |842| :pattern ( (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9) ($IsGoodHeap heap@@20)) :pattern ( (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 heap@@20 f@@48 bx0@@41 bx1@@25 bx2@@9)) )))
(assert (forall ((f@@49 T@U) (t0@@68 T@U) (t1@@44 T@U) (t2@@25 T@U) (t3@@10 T@U) ) (!  (=> (and (and (and (and (= (type f@@49) HandleTypeType) (= (type t0@@68) TyType)) (= (type t1@@44) TyType)) (= (type t2@@25) TyType)) (= (type t3@@10) TyType)) (and (=> ($Is f@@49 (Tclass._System.___hFunc3 t0@@68 t1@@44 t2@@25 t3@@10)) (forall ((h@@44 T@U) (bx0@@42 T@U) (bx1@@26 T@U) (bx2@@10 T@U) ) (!  (=> (and (and (and (and (= (type h@@44) (MapType0Type refType MapType1Type)) (= (type bx0@@42) BoxType)) (= (type bx1@@26) BoxType)) (= (type bx2@@10) BoxType)) (and (and ($IsGoodHeap h@@44) (and (and ($IsBox bx0@@42 t0@@68) ($IsBox bx1@@26 t1@@44)) ($IsBox bx2@@10 t2@@25))) (Requires3 t0@@68 t1@@44 t2@@25 t3@@10 h@@44 f@@49 bx0@@42 bx1@@26 bx2@@10))) ($IsBox (Apply3 t0@@68 t1@@44 t2@@25 t3@@10 h@@44 f@@49 bx0@@42 bx1@@26 bx2@@10) t3@@10)) :qid |DafnyPre.521:12| :skolemid |843| :pattern ( (Apply3 t0@@68 t1@@44 t2@@25 t3@@10 h@@44 f@@49 bx0@@42 bx1@@26 bx2@@10)) ))) (=> (forall ((h@@45 T@U) (bx0@@43 T@U) (bx1@@27 T@U) (bx2@@11 T@U) ) (!  (=> (and (and (and (and (= (type h@@45) (MapType0Type refType MapType1Type)) (= (type bx0@@43) BoxType)) (= (type bx1@@27) BoxType)) (= (type bx2@@11) BoxType)) (and (and ($IsGoodHeap h@@45) (and (and ($IsBox bx0@@43 t0@@68) ($IsBox bx1@@27 t1@@44)) ($IsBox bx2@@11 t2@@25))) (Requires3 t0@@68 t1@@44 t2@@25 t3@@10 h@@45 f@@49 bx0@@43 bx1@@27 bx2@@11))) ($IsBox (Apply3 t0@@68 t1@@44 t2@@25 t3@@10 h@@45 f@@49 bx0@@43 bx1@@27 bx2@@11) t3@@10)) :qid |DafnyPre.521:12| :skolemid |843| :pattern ( (Apply3 t0@@68 t1@@44 t2@@25 t3@@10 h@@45 f@@49 bx0@@43 bx1@@27 bx2@@11)) )) ($Is f@@49 (Tclass._System.___hFunc3 t0@@68 t1@@44 t2@@25 t3@@10))))) :qid |unknown.0:0| :skolemid |844| :pattern ( ($Is f@@49 (Tclass._System.___hFunc3 t0@@68 t1@@44 t2@@25 t3@@10))) )))
(assert (forall ((f@@50 T@U) (t0@@69 T@U) (t1@@45 T@U) (t2@@26 T@U) (t3@@11 T@U) (u0@@2 T@U) (u1@@1 T@U) (u2@@0 T@U) (u3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@50) HandleTypeType) (= (type t0@@69) TyType)) (= (type t1@@45) TyType)) (= (type t2@@26) TyType)) (= (type t3@@11) TyType)) (= (type u0@@2) TyType)) (= (type u1@@1) TyType)) (= (type u2@@0) TyType)) (= (type u3) TyType)) (and (and (and (and ($Is f@@50 (Tclass._System.___hFunc3 t0@@69 t1@@45 t2@@26 t3@@11)) (forall ((bx@@61 T@U) ) (!  (=> (and (= (type bx@@61) BoxType) ($IsBox bx@@61 u0@@2)) ($IsBox bx@@61 t0@@69)) :qid |unknown.0:0| :skolemid |845| :pattern ( ($IsBox bx@@61 u0@@2)) :pattern ( ($IsBox bx@@61 t0@@69)) ))) (forall ((bx@@62 T@U) ) (!  (=> (and (= (type bx@@62) BoxType) ($IsBox bx@@62 u1@@1)) ($IsBox bx@@62 t1@@45)) :qid |unknown.0:0| :skolemid |846| :pattern ( ($IsBox bx@@62 u1@@1)) :pattern ( ($IsBox bx@@62 t1@@45)) ))) (forall ((bx@@63 T@U) ) (!  (=> (and (= (type bx@@63) BoxType) ($IsBox bx@@63 u2@@0)) ($IsBox bx@@63 t2@@26)) :qid |unknown.0:0| :skolemid |847| :pattern ( ($IsBox bx@@63 u2@@0)) :pattern ( ($IsBox bx@@63 t2@@26)) ))) (forall ((bx@@64 T@U) ) (!  (=> (and (= (type bx@@64) BoxType) ($IsBox bx@@64 t3@@11)) ($IsBox bx@@64 u3)) :qid |unknown.0:0| :skolemid |848| :pattern ( ($IsBox bx@@64 t3@@11)) :pattern ( ($IsBox bx@@64 u3)) )))) ($Is f@@50 (Tclass._System.___hFunc3 u0@@2 u1@@1 u2@@0 u3))) :qid |unknown.0:0| :skolemid |849| :pattern ( ($Is f@@50 (Tclass._System.___hFunc3 t0@@69 t1@@45 t2@@26 t3@@11)) ($Is f@@50 (Tclass._System.___hFunc3 u0@@2 u1@@1 u2@@0 u3))) )))
(assert (forall ((f@@51 T@U) (t0@@70 T@U) (t1@@46 T@U) (t2@@27 T@U) (t3@@12 T@U) (h@@46 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@51) HandleTypeType) (= (type t0@@70) TyType)) (= (type t1@@46) TyType)) (= (type t2@@27) TyType)) (= (type t3@@12) TyType)) (= (type h@@46) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@46)) (and (=> ($IsAlloc f@@51 (Tclass._System.___hFunc3 t0@@70 t1@@46 t2@@27 t3@@12) h@@46) (forall ((bx0@@44 T@U) (bx1@@28 T@U) (bx2@@12 T@U) ) (!  (=> (and (and (= (type bx0@@44) BoxType) (= (type bx1@@28) BoxType)) (= (type bx2@@12) BoxType)) (=> (and (and (and (and ($IsBox bx0@@44 t0@@70) ($IsAllocBox bx0@@44 t0@@70 h@@46)) (and ($IsBox bx1@@28 t1@@46) ($IsAllocBox bx1@@28 t1@@46 h@@46))) (and ($IsBox bx2@@12 t2@@27) ($IsAllocBox bx2@@12 t2@@27 h@@46))) (Requires3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12)) (forall ((r@@24 T@U) ) (!  (=> (= (type r@@24) refType) (=> (and (not (= r@@24 null)) (U_2_bool (MapType0Select (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12) ($Box r@@24)))) (U_2_bool (MapType1Select (MapType0Select h@@46 r@@24) alloc)))) :qid |unknown.0:0| :skolemid |850| :pattern ( (MapType0Select (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12) ($Box r@@24))) )))) :qid |unknown.0:0| :skolemid |851| :pattern ( (Apply3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12)) :pattern ( (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12)) ))) (=> (forall ((bx0@@45 T@U) (bx1@@29 T@U) (bx2@@13 T@U) ) (!  (=> (and (and (= (type bx0@@45) BoxType) (= (type bx1@@29) BoxType)) (= (type bx2@@13) BoxType)) (=> (and (and (and (and ($IsBox bx0@@45 t0@@70) ($IsAllocBox bx0@@45 t0@@70 h@@46)) (and ($IsBox bx1@@29 t1@@46) ($IsAllocBox bx1@@29 t1@@46 h@@46))) (and ($IsBox bx2@@13 t2@@27) ($IsAllocBox bx2@@13 t2@@27 h@@46))) (Requires3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13)) (forall ((r@@25 T@U) ) (!  (=> (= (type r@@25) refType) (=> (and (not (= r@@25 null)) (U_2_bool (MapType0Select (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13) ($Box r@@25)))) (U_2_bool (MapType1Select (MapType0Select h@@46 r@@25) alloc)))) :qid |unknown.0:0| :skolemid |850| :pattern ( (MapType0Select (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13) ($Box r@@25))) )))) :qid |unknown.0:0| :skolemid |851| :pattern ( (Apply3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13)) :pattern ( (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13)) )) ($IsAlloc f@@51 (Tclass._System.___hFunc3 t0@@70 t1@@46 t2@@27 t3@@12) h@@46)))) :qid |unknown.0:0| :skolemid |852| :pattern ( ($IsAlloc f@@51 (Tclass._System.___hFunc3 t0@@70 t1@@46 t2@@27 t3@@12) h@@46)) )))
(assert (forall ((f@@52 T@U) (t0@@71 T@U) (t1@@47 T@U) (t2@@28 T@U) (t3@@13 T@U) (h@@47 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@52) HandleTypeType) (= (type t0@@71) TyType)) (= (type t1@@47) TyType)) (= (type t2@@28) TyType)) (= (type t3@@13) TyType)) (= (type h@@47) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@47) ($IsAlloc f@@52 (Tclass._System.___hFunc3 t0@@71 t1@@47 t2@@28 t3@@13) h@@47))) (forall ((bx0@@46 T@U) (bx1@@30 T@U) (bx2@@14 T@U) ) (!  (=> (and (and (= (type bx0@@46) BoxType) (= (type bx1@@30) BoxType)) (= (type bx2@@14) BoxType)) (=> (and (and (and ($IsAllocBox bx0@@46 t0@@71 h@@47) ($IsAllocBox bx1@@30 t1@@47 h@@47)) ($IsAllocBox bx2@@14 t2@@28 h@@47)) (Requires3 t0@@71 t1@@47 t2@@28 t3@@13 h@@47 f@@52 bx0@@46 bx1@@30 bx2@@14)) ($IsAllocBox (Apply3 t0@@71 t1@@47 t2@@28 t3@@13 h@@47 f@@52 bx0@@46 bx1@@30 bx2@@14) t3@@13 h@@47))) :qid |unknown.0:0| :skolemid |853| :pattern ( (Apply3 t0@@71 t1@@47 t2@@28 t3@@13 h@@47 f@@52 bx0@@46 bx1@@30 bx2@@14)) ))) :qid |unknown.0:0| :skolemid |854| :pattern ( ($IsAlloc f@@52 (Tclass._System.___hFunc3 t0@@71 t1@@47 t2@@28 t3@@13) h@@47)) )))
(assert (forall ((arg0@@177 T@U) (arg1@@88 T@U) (arg2@@44 T@U) (arg3@@23 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3 arg0@@177 arg1@@88 arg2@@44 arg3@@23)) TyType) :qid |funType:Tclass._System.___hPartialFunc3| :pattern ( (Tclass._System.___hPartialFunc3 arg0@@177 arg1@@88 arg2@@44 arg3@@23)) )))
(assert (forall ((|#$T0@@49| T@U) (|#$T1@@33| T@U) (|#$T2@@5| T@U) (|#$R@@53| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@49|) TyType) (= (type |#$T1@@33|) TyType)) (= (type |#$T2@@5|) TyType)) (= (type |#$R@@53|) TyType)) (= (Tag (Tclass._System.___hPartialFunc3 |#$T0@@49| |#$T1@@33| |#$T2@@5| |#$R@@53|)) Tagclass._System.___hPartialFunc3)) :qid |unknown.0:0| :skolemid |855| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@49| |#$T1@@33| |#$T2@@5| |#$R@@53|)) )))
(assert (forall ((arg0@@178 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_0 arg0@@178)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_0| :pattern ( (Tclass._System.___hPartialFunc3_0 arg0@@178)) )))
(assert (forall ((|#$T0@@50| T@U) (|#$T1@@34| T@U) (|#$T2@@6| T@U) (|#$R@@54| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@50|) TyType) (= (type |#$T1@@34|) TyType)) (= (type |#$T2@@6|) TyType)) (= (type |#$R@@54|) TyType)) (= (Tclass._System.___hPartialFunc3_0 (Tclass._System.___hPartialFunc3 |#$T0@@50| |#$T1@@34| |#$T2@@6| |#$R@@54|)) |#$T0@@50|)) :qid |unknown.0:0| :skolemid |856| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@50| |#$T1@@34| |#$T2@@6| |#$R@@54|)) )))
(assert (forall ((arg0@@179 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_1 arg0@@179)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_1| :pattern ( (Tclass._System.___hPartialFunc3_1 arg0@@179)) )))
(assert (forall ((|#$T0@@51| T@U) (|#$T1@@35| T@U) (|#$T2@@7| T@U) (|#$R@@55| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@51|) TyType) (= (type |#$T1@@35|) TyType)) (= (type |#$T2@@7|) TyType)) (= (type |#$R@@55|) TyType)) (= (Tclass._System.___hPartialFunc3_1 (Tclass._System.___hPartialFunc3 |#$T0@@51| |#$T1@@35| |#$T2@@7| |#$R@@55|)) |#$T1@@35|)) :qid |unknown.0:0| :skolemid |857| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@51| |#$T1@@35| |#$T2@@7| |#$R@@55|)) )))
(assert (forall ((arg0@@180 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_2 arg0@@180)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_2| :pattern ( (Tclass._System.___hPartialFunc3_2 arg0@@180)) )))
(assert (forall ((|#$T0@@52| T@U) (|#$T1@@36| T@U) (|#$T2@@8| T@U) (|#$R@@56| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@52|) TyType) (= (type |#$T1@@36|) TyType)) (= (type |#$T2@@8|) TyType)) (= (type |#$R@@56|) TyType)) (= (Tclass._System.___hPartialFunc3_2 (Tclass._System.___hPartialFunc3 |#$T0@@52| |#$T1@@36| |#$T2@@8| |#$R@@56|)) |#$T2@@8|)) :qid |unknown.0:0| :skolemid |858| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@52| |#$T1@@36| |#$T2@@8| |#$R@@56|)) )))
(assert (forall ((arg0@@181 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_3 arg0@@181)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_3| :pattern ( (Tclass._System.___hPartialFunc3_3 arg0@@181)) )))
(assert (forall ((|#$T0@@53| T@U) (|#$T1@@37| T@U) (|#$T2@@9| T@U) (|#$R@@57| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@53|) TyType) (= (type |#$T1@@37|) TyType)) (= (type |#$T2@@9|) TyType)) (= (type |#$R@@57|) TyType)) (= (Tclass._System.___hPartialFunc3_3 (Tclass._System.___hPartialFunc3 |#$T0@@53| |#$T1@@37| |#$T2@@9| |#$R@@57|)) |#$R@@57|)) :qid |unknown.0:0| :skolemid |859| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@53| |#$T1@@37| |#$T2@@9| |#$R@@57|)) )))
(assert (forall ((|#$T0@@54| T@U) (|#$T1@@38| T@U) (|#$T2@@10| T@U) (|#$R@@58| T@U) (bx@@65 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@54|) TyType) (= (type |#$T1@@38|) TyType)) (= (type |#$T2@@10|) TyType)) (= (type |#$R@@58|) TyType)) (= (type bx@@65) BoxType)) ($IsBox bx@@65 (Tclass._System.___hPartialFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@10| |#$R@@58|))) (and (= ($Box ($Unbox HandleTypeType bx@@65)) bx@@65) ($Is ($Unbox HandleTypeType bx@@65) (Tclass._System.___hPartialFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@10| |#$R@@58|)))) :qid |unknown.0:0| :skolemid |860| :pattern ( ($IsBox bx@@65 (Tclass._System.___hPartialFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@10| |#$R@@58|))) )))
(assert (forall ((|#$T0@@55| T@U) (|#$T1@@39| T@U) (|#$T2@@11| T@U) (|#$R@@59| T@U) (|f#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@55|) TyType) (= (type |#$T1@@39|) TyType)) (= (type |#$T2@@11|) TyType)) (= (type |#$R@@59|) TyType)) (= (type |f#0@@11|) HandleTypeType)) (and (=> ($Is |f#0@@11| (Tclass._System.___hPartialFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@11| |#$R@@59|)) (and ($Is |f#0@@11| (Tclass._System.___hFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@11| |#$R@@59|)) (forall ((|x0#0@@7| T@U) (|x1#0@@3| T@U) (|x2#0| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@7|) BoxType) (= (type |x1#0@@3|) BoxType)) (= (type |x2#0|) BoxType)) (and (and ($IsBox |x0#0@@7| |#$T0@@55|) ($IsBox |x1#0@@3| |#$T1@@39|)) ($IsBox |x2#0| |#$T2@@11|))) (|Set#Equal| (Reads3 |#$T0@@55| |#$T1@@39| |#$T2@@11| |#$R@@59| $OneHeap |f#0@@11| |x0#0@@7| |x1#0@@3| |x2#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |861| :no-pattern (type |x0#0@@7|) :no-pattern (type |x1#0@@3|) :no-pattern (type |x2#0|) :no-pattern (U_2_int |x0#0@@7|) :no-pattern (U_2_bool |x0#0@@7|) :no-pattern (U_2_int |x1#0@@3|) :no-pattern (U_2_bool |x1#0@@3|) :no-pattern (U_2_int |x2#0|) :no-pattern (U_2_bool |x2#0|) )))) (=> (and ($Is |f#0@@11| (Tclass._System.___hFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@11| |#$R@@59|)) (forall ((|x0#0@@8| T@U) (|x1#0@@4| T@U) (|x2#0@@0| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@8|) BoxType) (= (type |x1#0@@4|) BoxType)) (= (type |x2#0@@0|) BoxType)) (and (and ($IsBox |x0#0@@8| |#$T0@@55|) ($IsBox |x1#0@@4| |#$T1@@39|)) ($IsBox |x2#0@@0| |#$T2@@11|))) (|Set#Equal| (Reads3 |#$T0@@55| |#$T1@@39| |#$T2@@11| |#$R@@59| $OneHeap |f#0@@11| |x0#0@@8| |x1#0@@4| |x2#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |861| :no-pattern (type |x0#0@@8|) :no-pattern (type |x1#0@@4|) :no-pattern (type |x2#0@@0|) :no-pattern (U_2_int |x0#0@@8|) :no-pattern (U_2_bool |x0#0@@8|) :no-pattern (U_2_int |x1#0@@4|) :no-pattern (U_2_bool |x1#0@@4|) :no-pattern (U_2_int |x2#0@@0|) :no-pattern (U_2_bool |x2#0@@0|) ))) ($Is |f#0@@11| (Tclass._System.___hPartialFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@11| |#$R@@59|))))) :qid |unknown.0:0| :skolemid |862| :pattern ( ($Is |f#0@@11| (Tclass._System.___hPartialFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@11| |#$R@@59|))) )))
(assert (forall ((|#$T0@@56| T@U) (|#$T1@@40| T@U) (|#$T2@@12| T@U) (|#$R@@60| T@U) (|f#0@@12| T@U) ($h@@17 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@56|) TyType) (= (type |#$T1@@40|) TyType)) (= (type |#$T2@@12|) TyType)) (= (type |#$R@@60|) TyType)) (= (type |f#0@@12|) HandleTypeType)) (= (type $h@@17) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc3 |#$T0@@56| |#$T1@@40| |#$T2@@12| |#$R@@60|) $h@@17) ($IsAlloc |f#0@@12| (Tclass._System.___hFunc3 |#$T0@@56| |#$T1@@40| |#$T2@@12| |#$R@@60|) $h@@17)) (=> ($IsAlloc |f#0@@12| (Tclass._System.___hFunc3 |#$T0@@56| |#$T1@@40| |#$T2@@12| |#$R@@60|) $h@@17) ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc3 |#$T0@@56| |#$T1@@40| |#$T2@@12| |#$R@@60|) $h@@17)))) :qid |unknown.0:0| :skolemid |863| :pattern ( ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc3 |#$T0@@56| |#$T1@@40| |#$T2@@12| |#$R@@60|) $h@@17)) )))
(assert (forall ((arg0@@182 T@U) (arg1@@89 T@U) (arg2@@45 T@U) (arg3@@24 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3 arg0@@182 arg1@@89 arg2@@45 arg3@@24)) TyType) :qid |funType:Tclass._System.___hTotalFunc3| :pattern ( (Tclass._System.___hTotalFunc3 arg0@@182 arg1@@89 arg2@@45 arg3@@24)) )))
(assert (forall ((|#$T0@@57| T@U) (|#$T1@@41| T@U) (|#$T2@@13| T@U) (|#$R@@61| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@57|) TyType) (= (type |#$T1@@41|) TyType)) (= (type |#$T2@@13|) TyType)) (= (type |#$R@@61|) TyType)) (= (Tag (Tclass._System.___hTotalFunc3 |#$T0@@57| |#$T1@@41| |#$T2@@13| |#$R@@61|)) Tagclass._System.___hTotalFunc3)) :qid |unknown.0:0| :skolemid |864| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@57| |#$T1@@41| |#$T2@@13| |#$R@@61|)) )))
(assert (forall ((arg0@@183 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_0 arg0@@183)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_0| :pattern ( (Tclass._System.___hTotalFunc3_0 arg0@@183)) )))
(assert (forall ((|#$T0@@58| T@U) (|#$T1@@42| T@U) (|#$T2@@14| T@U) (|#$R@@62| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@58|) TyType) (= (type |#$T1@@42|) TyType)) (= (type |#$T2@@14|) TyType)) (= (type |#$R@@62|) TyType)) (= (Tclass._System.___hTotalFunc3_0 (Tclass._System.___hTotalFunc3 |#$T0@@58| |#$T1@@42| |#$T2@@14| |#$R@@62|)) |#$T0@@58|)) :qid |unknown.0:0| :skolemid |865| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@58| |#$T1@@42| |#$T2@@14| |#$R@@62|)) )))
(assert (forall ((arg0@@184 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_1 arg0@@184)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_1| :pattern ( (Tclass._System.___hTotalFunc3_1 arg0@@184)) )))
(assert (forall ((|#$T0@@59| T@U) (|#$T1@@43| T@U) (|#$T2@@15| T@U) (|#$R@@63| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@59|) TyType) (= (type |#$T1@@43|) TyType)) (= (type |#$T2@@15|) TyType)) (= (type |#$R@@63|) TyType)) (= (Tclass._System.___hTotalFunc3_1 (Tclass._System.___hTotalFunc3 |#$T0@@59| |#$T1@@43| |#$T2@@15| |#$R@@63|)) |#$T1@@43|)) :qid |unknown.0:0| :skolemid |866| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@59| |#$T1@@43| |#$T2@@15| |#$R@@63|)) )))
(assert (forall ((arg0@@185 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_2 arg0@@185)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_2| :pattern ( (Tclass._System.___hTotalFunc3_2 arg0@@185)) )))
(assert (forall ((|#$T0@@60| T@U) (|#$T1@@44| T@U) (|#$T2@@16| T@U) (|#$R@@64| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@60|) TyType) (= (type |#$T1@@44|) TyType)) (= (type |#$T2@@16|) TyType)) (= (type |#$R@@64|) TyType)) (= (Tclass._System.___hTotalFunc3_2 (Tclass._System.___hTotalFunc3 |#$T0@@60| |#$T1@@44| |#$T2@@16| |#$R@@64|)) |#$T2@@16|)) :qid |unknown.0:0| :skolemid |867| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@60| |#$T1@@44| |#$T2@@16| |#$R@@64|)) )))
(assert (forall ((arg0@@186 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_3 arg0@@186)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_3| :pattern ( (Tclass._System.___hTotalFunc3_3 arg0@@186)) )))
(assert (forall ((|#$T0@@61| T@U) (|#$T1@@45| T@U) (|#$T2@@17| T@U) (|#$R@@65| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@61|) TyType) (= (type |#$T1@@45|) TyType)) (= (type |#$T2@@17|) TyType)) (= (type |#$R@@65|) TyType)) (= (Tclass._System.___hTotalFunc3_3 (Tclass._System.___hTotalFunc3 |#$T0@@61| |#$T1@@45| |#$T2@@17| |#$R@@65|)) |#$R@@65|)) :qid |unknown.0:0| :skolemid |868| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@61| |#$T1@@45| |#$T2@@17| |#$R@@65|)) )))
(assert (forall ((|#$T0@@62| T@U) (|#$T1@@46| T@U) (|#$T2@@18| T@U) (|#$R@@66| T@U) (bx@@66 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@62|) TyType) (= (type |#$T1@@46|) TyType)) (= (type |#$T2@@18|) TyType)) (= (type |#$R@@66|) TyType)) (= (type bx@@66) BoxType)) ($IsBox bx@@66 (Tclass._System.___hTotalFunc3 |#$T0@@62| |#$T1@@46| |#$T2@@18| |#$R@@66|))) (and (= ($Box ($Unbox HandleTypeType bx@@66)) bx@@66) ($Is ($Unbox HandleTypeType bx@@66) (Tclass._System.___hTotalFunc3 |#$T0@@62| |#$T1@@46| |#$T2@@18| |#$R@@66|)))) :qid |unknown.0:0| :skolemid |869| :pattern ( ($IsBox bx@@66 (Tclass._System.___hTotalFunc3 |#$T0@@62| |#$T1@@46| |#$T2@@18| |#$R@@66|))) )))
(assert (forall ((|#$T0@@63| T@U) (|#$T1@@47| T@U) (|#$T2@@19| T@U) (|#$R@@67| T@U) (|f#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@63|) TyType) (= (type |#$T1@@47|) TyType)) (= (type |#$T2@@19|) TyType)) (= (type |#$R@@67|) TyType)) (= (type |f#0@@13|) HandleTypeType)) (and (=> ($Is |f#0@@13| (Tclass._System.___hTotalFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@19| |#$R@@67|)) (and ($Is |f#0@@13| (Tclass._System.___hPartialFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@19| |#$R@@67|)) (forall ((|x0#0@@9| T@U) (|x1#0@@5| T@U) (|x2#0@@1| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@9|) BoxType) (= (type |x1#0@@5|) BoxType)) (= (type |x2#0@@1|) BoxType)) (and (and ($IsBox |x0#0@@9| |#$T0@@63|) ($IsBox |x1#0@@5| |#$T1@@47|)) ($IsBox |x2#0@@1| |#$T2@@19|))) (Requires3 |#$T0@@63| |#$T1@@47| |#$T2@@19| |#$R@@67| $OneHeap |f#0@@13| |x0#0@@9| |x1#0@@5| |x2#0@@1|)) :qid |unknown.0:0| :skolemid |870| :no-pattern (type |x0#0@@9|) :no-pattern (type |x1#0@@5|) :no-pattern (type |x2#0@@1|) :no-pattern (U_2_int |x0#0@@9|) :no-pattern (U_2_bool |x0#0@@9|) :no-pattern (U_2_int |x1#0@@5|) :no-pattern (U_2_bool |x1#0@@5|) :no-pattern (U_2_int |x2#0@@1|) :no-pattern (U_2_bool |x2#0@@1|) )))) (=> (and ($Is |f#0@@13| (Tclass._System.___hPartialFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@19| |#$R@@67|)) (forall ((|x0#0@@10| T@U) (|x1#0@@6| T@U) (|x2#0@@2| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@10|) BoxType) (= (type |x1#0@@6|) BoxType)) (= (type |x2#0@@2|) BoxType)) (and (and ($IsBox |x0#0@@10| |#$T0@@63|) ($IsBox |x1#0@@6| |#$T1@@47|)) ($IsBox |x2#0@@2| |#$T2@@19|))) (Requires3 |#$T0@@63| |#$T1@@47| |#$T2@@19| |#$R@@67| $OneHeap |f#0@@13| |x0#0@@10| |x1#0@@6| |x2#0@@2|)) :qid |unknown.0:0| :skolemid |870| :no-pattern (type |x0#0@@10|) :no-pattern (type |x1#0@@6|) :no-pattern (type |x2#0@@2|) :no-pattern (U_2_int |x0#0@@10|) :no-pattern (U_2_bool |x0#0@@10|) :no-pattern (U_2_int |x1#0@@6|) :no-pattern (U_2_bool |x1#0@@6|) :no-pattern (U_2_int |x2#0@@2|) :no-pattern (U_2_bool |x2#0@@2|) ))) ($Is |f#0@@13| (Tclass._System.___hTotalFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@19| |#$R@@67|))))) :qid |unknown.0:0| :skolemid |871| :pattern ( ($Is |f#0@@13| (Tclass._System.___hTotalFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@19| |#$R@@67|))) )))
(assert (forall ((|#$T0@@64| T@U) (|#$T1@@48| T@U) (|#$T2@@20| T@U) (|#$R@@68| T@U) (|f#0@@14| T@U) ($h@@18 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@64|) TyType) (= (type |#$T1@@48|) TyType)) (= (type |#$T2@@20|) TyType)) (= (type |#$R@@68|) TyType)) (= (type |f#0@@14|) HandleTypeType)) (= (type $h@@18) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@20| |#$R@@68|) $h@@18) ($IsAlloc |f#0@@14| (Tclass._System.___hPartialFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@20| |#$R@@68|) $h@@18)) (=> ($IsAlloc |f#0@@14| (Tclass._System.___hPartialFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@20| |#$R@@68|) $h@@18) ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@20| |#$R@@68|) $h@@18)))) :qid |unknown.0:0| :skolemid |872| :pattern ( ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@20| |#$R@@68|) $h@@18)) )))
(assert (forall ((arg0@@187 T@U) (arg1@@90 T@U) (arg2@@46 T@U) (arg3@@25 T@U) (arg4@@14 T@U) ) (! (= (type (Tclass._System.___hFunc4 arg0@@187 arg1@@90 arg2@@46 arg3@@25 arg4@@14)) TyType) :qid |funType:Tclass._System.___hFunc4| :pattern ( (Tclass._System.___hFunc4 arg0@@187 arg1@@90 arg2@@46 arg3@@25 arg4@@14)) )))
(assert (forall ((|#$T0@@65| T@U) (|#$T1@@49| T@U) (|#$T2@@21| T@U) (|#$T3| T@U) (|#$R@@69| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@65|) TyType) (= (type |#$T1@@49|) TyType)) (= (type |#$T2@@21|) TyType)) (= (type |#$T3|) TyType)) (= (type |#$R@@69|) TyType)) (= (Tag (Tclass._System.___hFunc4 |#$T0@@65| |#$T1@@49| |#$T2@@21| |#$T3| |#$R@@69|)) Tagclass._System.___hFunc4)) :qid |unknown.0:0| :skolemid |873| :pattern ( (Tclass._System.___hFunc4 |#$T0@@65| |#$T1@@49| |#$T2@@21| |#$T3| |#$R@@69|)) )))
(assert (forall ((arg0@@188 T@U) ) (! (= (type (Tclass._System.___hFunc4_0 arg0@@188)) TyType) :qid |funType:Tclass._System.___hFunc4_0| :pattern ( (Tclass._System.___hFunc4_0 arg0@@188)) )))
(assert (forall ((|#$T0@@66| T@U) (|#$T1@@50| T@U) (|#$T2@@22| T@U) (|#$T3@@0| T@U) (|#$R@@70| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@66|) TyType) (= (type |#$T1@@50|) TyType)) (= (type |#$T2@@22|) TyType)) (= (type |#$T3@@0|) TyType)) (= (type |#$R@@70|) TyType)) (= (Tclass._System.___hFunc4_0 (Tclass._System.___hFunc4 |#$T0@@66| |#$T1@@50| |#$T2@@22| |#$T3@@0| |#$R@@70|)) |#$T0@@66|)) :qid |unknown.0:0| :skolemid |874| :pattern ( (Tclass._System.___hFunc4 |#$T0@@66| |#$T1@@50| |#$T2@@22| |#$T3@@0| |#$R@@70|)) )))
(assert (forall ((arg0@@189 T@U) ) (! (= (type (Tclass._System.___hFunc4_1 arg0@@189)) TyType) :qid |funType:Tclass._System.___hFunc4_1| :pattern ( (Tclass._System.___hFunc4_1 arg0@@189)) )))
(assert (forall ((|#$T0@@67| T@U) (|#$T1@@51| T@U) (|#$T2@@23| T@U) (|#$T3@@1| T@U) (|#$R@@71| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@67|) TyType) (= (type |#$T1@@51|) TyType)) (= (type |#$T2@@23|) TyType)) (= (type |#$T3@@1|) TyType)) (= (type |#$R@@71|) TyType)) (= (Tclass._System.___hFunc4_1 (Tclass._System.___hFunc4 |#$T0@@67| |#$T1@@51| |#$T2@@23| |#$T3@@1| |#$R@@71|)) |#$T1@@51|)) :qid |unknown.0:0| :skolemid |875| :pattern ( (Tclass._System.___hFunc4 |#$T0@@67| |#$T1@@51| |#$T2@@23| |#$T3@@1| |#$R@@71|)) )))
(assert (forall ((arg0@@190 T@U) ) (! (= (type (Tclass._System.___hFunc4_2 arg0@@190)) TyType) :qid |funType:Tclass._System.___hFunc4_2| :pattern ( (Tclass._System.___hFunc4_2 arg0@@190)) )))
(assert (forall ((|#$T0@@68| T@U) (|#$T1@@52| T@U) (|#$T2@@24| T@U) (|#$T3@@2| T@U) (|#$R@@72| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@68|) TyType) (= (type |#$T1@@52|) TyType)) (= (type |#$T2@@24|) TyType)) (= (type |#$T3@@2|) TyType)) (= (type |#$R@@72|) TyType)) (= (Tclass._System.___hFunc4_2 (Tclass._System.___hFunc4 |#$T0@@68| |#$T1@@52| |#$T2@@24| |#$T3@@2| |#$R@@72|)) |#$T2@@24|)) :qid |unknown.0:0| :skolemid |876| :pattern ( (Tclass._System.___hFunc4 |#$T0@@68| |#$T1@@52| |#$T2@@24| |#$T3@@2| |#$R@@72|)) )))
(assert (forall ((arg0@@191 T@U) ) (! (= (type (Tclass._System.___hFunc4_3 arg0@@191)) TyType) :qid |funType:Tclass._System.___hFunc4_3| :pattern ( (Tclass._System.___hFunc4_3 arg0@@191)) )))
(assert (forall ((|#$T0@@69| T@U) (|#$T1@@53| T@U) (|#$T2@@25| T@U) (|#$T3@@3| T@U) (|#$R@@73| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@69|) TyType) (= (type |#$T1@@53|) TyType)) (= (type |#$T2@@25|) TyType)) (= (type |#$T3@@3|) TyType)) (= (type |#$R@@73|) TyType)) (= (Tclass._System.___hFunc4_3 (Tclass._System.___hFunc4 |#$T0@@69| |#$T1@@53| |#$T2@@25| |#$T3@@3| |#$R@@73|)) |#$T3@@3|)) :qid |unknown.0:0| :skolemid |877| :pattern ( (Tclass._System.___hFunc4 |#$T0@@69| |#$T1@@53| |#$T2@@25| |#$T3@@3| |#$R@@73|)) )))
(assert (forall ((arg0@@192 T@U) ) (! (= (type (Tclass._System.___hFunc4_4 arg0@@192)) TyType) :qid |funType:Tclass._System.___hFunc4_4| :pattern ( (Tclass._System.___hFunc4_4 arg0@@192)) )))
(assert (forall ((|#$T0@@70| T@U) (|#$T1@@54| T@U) (|#$T2@@26| T@U) (|#$T3@@4| T@U) (|#$R@@74| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@70|) TyType) (= (type |#$T1@@54|) TyType)) (= (type |#$T2@@26|) TyType)) (= (type |#$T3@@4|) TyType)) (= (type |#$R@@74|) TyType)) (= (Tclass._System.___hFunc4_4 (Tclass._System.___hFunc4 |#$T0@@70| |#$T1@@54| |#$T2@@26| |#$T3@@4| |#$R@@74|)) |#$R@@74|)) :qid |unknown.0:0| :skolemid |878| :pattern ( (Tclass._System.___hFunc4 |#$T0@@70| |#$T1@@54| |#$T2@@26| |#$T3@@4| |#$R@@74|)) )))
(assert (forall ((|#$T0@@71| T@U) (|#$T1@@55| T@U) (|#$T2@@27| T@U) (|#$T3@@5| T@U) (|#$R@@75| T@U) (bx@@67 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@71|) TyType) (= (type |#$T1@@55|) TyType)) (= (type |#$T2@@27|) TyType)) (= (type |#$T3@@5|) TyType)) (= (type |#$R@@75|) TyType)) (= (type bx@@67) BoxType)) ($IsBox bx@@67 (Tclass._System.___hFunc4 |#$T0@@71| |#$T1@@55| |#$T2@@27| |#$T3@@5| |#$R@@75|))) (and (= ($Box ($Unbox HandleTypeType bx@@67)) bx@@67) ($Is ($Unbox HandleTypeType bx@@67) (Tclass._System.___hFunc4 |#$T0@@71| |#$T1@@55| |#$T2@@27| |#$T3@@5| |#$R@@75|)))) :qid |unknown.0:0| :skolemid |879| :pattern ( ($IsBox bx@@67 (Tclass._System.___hFunc4 |#$T0@@71| |#$T1@@55| |#$T2@@27| |#$T3@@5| |#$R@@75|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@193 T@T) (arg1@@91 T@T) (arg2@@47 T@T) (arg3@@26 T@T) (arg4@@15 T@T) (arg5@@4 T@T) ) (! (= (Ctor (MapType5Type arg0@@193 arg1@@91 arg2@@47 arg3@@26 arg4@@15 arg5@@4)) 24) :qid |ctor:MapType5Type| )) (forall ((arg0@@194 T@T) (arg1@@92 T@T) (arg2@@48 T@T) (arg3@@27 T@T) (arg4@@16 T@T) (arg5@@5 T@T) ) (! (= (MapType5TypeInv0 (MapType5Type arg0@@194 arg1@@92 arg2@@48 arg3@@27 arg4@@16 arg5@@5)) arg0@@194) :qid |typeInv:MapType5TypeInv0| :pattern ( (MapType5Type arg0@@194 arg1@@92 arg2@@48 arg3@@27 arg4@@16 arg5@@5)) ))) (forall ((arg0@@195 T@T) (arg1@@93 T@T) (arg2@@49 T@T) (arg3@@28 T@T) (arg4@@17 T@T) (arg5@@6 T@T) ) (! (= (MapType5TypeInv1 (MapType5Type arg0@@195 arg1@@93 arg2@@49 arg3@@28 arg4@@17 arg5@@6)) arg1@@93) :qid |typeInv:MapType5TypeInv1| :pattern ( (MapType5Type arg0@@195 arg1@@93 arg2@@49 arg3@@28 arg4@@17 arg5@@6)) ))) (forall ((arg0@@196 T@T) (arg1@@94 T@T) (arg2@@50 T@T) (arg3@@29 T@T) (arg4@@18 T@T) (arg5@@7 T@T) ) (! (= (MapType5TypeInv2 (MapType5Type arg0@@196 arg1@@94 arg2@@50 arg3@@29 arg4@@18 arg5@@7)) arg2@@50) :qid |typeInv:MapType5TypeInv2| :pattern ( (MapType5Type arg0@@196 arg1@@94 arg2@@50 arg3@@29 arg4@@18 arg5@@7)) ))) (forall ((arg0@@197 T@T) (arg1@@95 T@T) (arg2@@51 T@T) (arg3@@30 T@T) (arg4@@19 T@T) (arg5@@8 T@T) ) (! (= (MapType5TypeInv3 (MapType5Type arg0@@197 arg1@@95 arg2@@51 arg3@@30 arg4@@19 arg5@@8)) arg3@@30) :qid |typeInv:MapType5TypeInv3| :pattern ( (MapType5Type arg0@@197 arg1@@95 arg2@@51 arg3@@30 arg4@@19 arg5@@8)) ))) (forall ((arg0@@198 T@T) (arg1@@96 T@T) (arg2@@52 T@T) (arg3@@31 T@T) (arg4@@20 T@T) (arg5@@9 T@T) ) (! (= (MapType5TypeInv4 (MapType5Type arg0@@198 arg1@@96 arg2@@52 arg3@@31 arg4@@20 arg5@@9)) arg4@@20) :qid |typeInv:MapType5TypeInv4| :pattern ( (MapType5Type arg0@@198 arg1@@96 arg2@@52 arg3@@31 arg4@@20 arg5@@9)) ))) (forall ((arg0@@199 T@T) (arg1@@97 T@T) (arg2@@53 T@T) (arg3@@32 T@T) (arg4@@21 T@T) (arg5@@10 T@T) ) (! (= (MapType5TypeInv5 (MapType5Type arg0@@199 arg1@@97 arg2@@53 arg3@@32 arg4@@21 arg5@@10)) arg5@@10) :qid |typeInv:MapType5TypeInv5| :pattern ( (MapType5Type arg0@@199 arg1@@97 arg2@@53 arg3@@32 arg4@@21 arg5@@10)) ))) (forall ((arg0@@200 T@U) (arg1@@98 T@U) (arg2@@54 T@U) (arg3@@33 T@U) (arg4@@22 T@U) (arg5@@11 T@U) ) (! (let ((aVar5 (MapType5TypeInv5 (type arg0@@200)))) (= (type (MapType5Select arg0@@200 arg1@@98 arg2@@54 arg3@@33 arg4@@22 arg5@@11)) aVar5)) :qid |funType:MapType5Select| :pattern ( (MapType5Select arg0@@200 arg1@@98 arg2@@54 arg3@@33 arg4@@22 arg5@@11)) ))) (forall ((arg0@@201 T@U) (arg1@@99 T@U) (arg2@@55 T@U) (arg3@@34 T@U) (arg4@@23 T@U) (arg5@@12 T@U) (arg6@@3 T@U) ) (! (let ((aVar5@@0 (type arg6@@3))) (let ((aVar4@@2 (type arg5@@12))) (let ((aVar3@@3 (type arg4@@23))) (let ((aVar2@@4 (type arg3@@34))) (let ((aVar1@@5 (type arg2@@55))) (let ((aVar0@@3 (type arg1@@99))) (= (type (MapType5Store arg0@@201 arg1@@99 arg2@@55 arg3@@34 arg4@@23 arg5@@12 arg6@@3)) (MapType5Type aVar0@@3 aVar1@@5 aVar2@@4 aVar3@@3 aVar4@@2 aVar5@@0)))))))) :qid |funType:MapType5Store| :pattern ( (MapType5Store arg0@@201 arg1@@99 arg2@@55 arg3@@34 arg4@@23 arg5@@12 arg6@@3)) ))) (forall ((m@@42 T@U) (x0@@20 T@U) (x1@@14 T@U) (x2@@10 T@U) (x3@@5 T@U) (x4 T@U) (val@@21 T@U) ) (! (let ((aVar5@@1 (MapType5TypeInv5 (type m@@42)))) (=> (= (type val@@21) aVar5@@1) (= (MapType5Select (MapType5Store m@@42 x0@@20 x1@@14 x2@@10 x3@@5 x4 val@@21) x0@@20 x1@@14 x2@@10 x3@@5 x4) val@@21))) :qid |mapAx0:MapType5Select| :weight 0 ))) (and (and (and (and (and (forall ((val@@22 T@U) (m@@43 T@U) (x0@@21 T@U) (x1@@15 T@U) (x2@@11 T@U) (x3@@6 T@U) (x4@@0 T@U) (y0@@15 T@U) (y1@@11 T@U) (y2@@8 T@U) (y3@@4 T@U) (y4 T@U) ) (!  (or (= x0@@21 y0@@15) (= (MapType5Select (MapType5Store m@@43 x0@@21 x1@@15 x2@@11 x3@@6 x4@@0 val@@22) y0@@15 y1@@11 y2@@8 y3@@4 y4) (MapType5Select m@@43 y0@@15 y1@@11 y2@@8 y3@@4 y4))) :qid |mapAx1:MapType5Select:0| :weight 0 )) (forall ((val@@23 T@U) (m@@44 T@U) (x0@@22 T@U) (x1@@16 T@U) (x2@@12 T@U) (x3@@7 T@U) (x4@@1 T@U) (y0@@16 T@U) (y1@@12 T@U) (y2@@9 T@U) (y3@@5 T@U) (y4@@0 T@U) ) (!  (or (= x1@@16 y1@@12) (= (MapType5Select (MapType5Store m@@44 x0@@22 x1@@16 x2@@12 x3@@7 x4@@1 val@@23) y0@@16 y1@@12 y2@@9 y3@@5 y4@@0) (MapType5Select m@@44 y0@@16 y1@@12 y2@@9 y3@@5 y4@@0))) :qid |mapAx1:MapType5Select:1| :weight 0 ))) (forall ((val@@24 T@U) (m@@45 T@U) (x0@@23 T@U) (x1@@17 T@U) (x2@@13 T@U) (x3@@8 T@U) (x4@@2 T@U) (y0@@17 T@U) (y1@@13 T@U) (y2@@10 T@U) (y3@@6 T@U) (y4@@1 T@U) ) (!  (or (= x2@@13 y2@@10) (= (MapType5Select (MapType5Store m@@45 x0@@23 x1@@17 x2@@13 x3@@8 x4@@2 val@@24) y0@@17 y1@@13 y2@@10 y3@@6 y4@@1) (MapType5Select m@@45 y0@@17 y1@@13 y2@@10 y3@@6 y4@@1))) :qid |mapAx1:MapType5Select:2| :weight 0 ))) (forall ((val@@25 T@U) (m@@46 T@U) (x0@@24 T@U) (x1@@18 T@U) (x2@@14 T@U) (x3@@9 T@U) (x4@@3 T@U) (y0@@18 T@U) (y1@@14 T@U) (y2@@11 T@U) (y3@@7 T@U) (y4@@2 T@U) ) (!  (or (= x3@@9 y3@@7) (= (MapType5Select (MapType5Store m@@46 x0@@24 x1@@18 x2@@14 x3@@9 x4@@3 val@@25) y0@@18 y1@@14 y2@@11 y3@@7 y4@@2) (MapType5Select m@@46 y0@@18 y1@@14 y2@@11 y3@@7 y4@@2))) :qid |mapAx1:MapType5Select:3| :weight 0 ))) (forall ((val@@26 T@U) (m@@47 T@U) (x0@@25 T@U) (x1@@19 T@U) (x2@@15 T@U) (x3@@10 T@U) (x4@@4 T@U) (y0@@19 T@U) (y1@@15 T@U) (y2@@12 T@U) (y3@@8 T@U) (y4@@3 T@U) ) (!  (or (= x4@@4 y4@@3) (= (MapType5Select (MapType5Store m@@47 x0@@25 x1@@19 x2@@15 x3@@10 x4@@4 val@@26) y0@@19 y1@@15 y2@@12 y3@@8 y4@@3) (MapType5Select m@@47 y0@@19 y1@@15 y2@@12 y3@@8 y4@@3))) :qid |mapAx1:MapType5Select:4| :weight 0 ))) (forall ((val@@27 T@U) (m@@48 T@U) (x0@@26 T@U) (x1@@20 T@U) (x2@@16 T@U) (x3@@11 T@U) (x4@@5 T@U) (y0@@20 T@U) (y1@@16 T@U) (y2@@13 T@U) (y3@@9 T@U) (y4@@4 T@U) ) (!  (or true (= (MapType5Select (MapType5Store m@@48 x0@@26 x1@@20 x2@@16 x3@@11 x4@@5 val@@27) y0@@20 y1@@16 y2@@13 y3@@9 y4@@4) (MapType5Select m@@48 y0@@20 y1@@16 y2@@13 y3@@9 y4@@4))) :qid |mapAx2:MapType5Select| :weight 0 )))) (forall ((arg0@@202 T@U) (arg1@@100 T@U) (arg2@@56 T@U) (arg3@@35 T@U) (arg4@@24 T@U) (arg5@@13 T@U) (arg6@@4 T@U) (arg7@@1 T@U) (arg8@@1 T@U) (arg9 T@U) (arg10 T@U) ) (! (= (type (Apply4 arg0@@202 arg1@@100 arg2@@56 arg3@@35 arg4@@24 arg5@@13 arg6@@4 arg7@@1 arg8@@1 arg9 arg10)) BoxType) :qid |funType:Apply4| :pattern ( (Apply4 arg0@@202 arg1@@100 arg2@@56 arg3@@35 arg4@@24 arg5@@13 arg6@@4 arg7@@1 arg8@@1 arg9 arg10)) ))) (forall ((arg0@@203 T@U) (arg1@@101 T@U) (arg2@@57 T@U) ) (! (= (type (Handle4 arg0@@203 arg1@@101 arg2@@57)) HandleTypeType) :qid |funType:Handle4| :pattern ( (Handle4 arg0@@203 arg1@@101 arg2@@57)) ))))
(assert (forall ((t0@@72 T@U) (t1@@48 T@U) (t2@@29 T@U) (t3@@14 T@U) (t4 T@U) (heap@@21 T@U) (h@@48 T@U) (r@@26 T@U) (rd@@11 T@U) (bx0@@47 T@U) (bx1@@31 T@U) (bx2@@15 T@U) (bx3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@72) TyType) (= (type t1@@48) TyType)) (= (type t2@@29) TyType)) (= (type t3@@14) TyType)) (= (type t4) TyType)) (= (type heap@@21) (MapType0Type refType MapType1Type))) (= (type h@@48) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@26) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@11) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@47) BoxType)) (= (type bx1@@31) BoxType)) (= (type bx2@@15) BoxType)) (= (type bx3) BoxType)) (= (Apply4 t0@@72 t1@@48 t2@@29 t3@@14 t4 heap@@21 (Handle4 h@@48 r@@26 rd@@11) bx0@@47 bx1@@31 bx2@@15 bx3) (MapType5Select h@@48 heap@@21 bx0@@47 bx1@@31 bx2@@15 bx3))) :qid |unknown.0:0| :skolemid |880| :pattern ( (Apply4 t0@@72 t1@@48 t2@@29 t3@@14 t4 heap@@21 (Handle4 h@@48 r@@26 rd@@11) bx0@@47 bx1@@31 bx2@@15 bx3)) )))
(assert (forall ((t0@@73 T@U) (t1@@49 T@U) (t2@@30 T@U) (t3@@15 T@U) (t4@@0 T@U) (heap@@22 T@U) (h@@49 T@U) (r@@27 T@U) (rd@@12 T@U) (bx0@@48 T@U) (bx1@@32 T@U) (bx2@@16 T@U) (bx3@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@73) TyType) (= (type t1@@49) TyType)) (= (type t2@@30) TyType)) (= (type t3@@15) TyType)) (= (type t4@@0) TyType)) (= (type heap@@22) (MapType0Type refType MapType1Type))) (= (type h@@49) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@27) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@12) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@48) BoxType)) (= (type bx1@@32) BoxType)) (= (type bx2@@16) BoxType)) (= (type bx3@@0) BoxType)) (U_2_bool (MapType5Select r@@27 heap@@22 bx0@@48 bx1@@32 bx2@@16 bx3@@0))) (Requires4 t0@@73 t1@@49 t2@@30 t3@@15 t4@@0 heap@@22 (Handle4 h@@49 r@@27 rd@@12) bx0@@48 bx1@@32 bx2@@16 bx3@@0)) :qid |unknown.0:0| :skolemid |881| :pattern ( (Requires4 t0@@73 t1@@49 t2@@30 t3@@15 t4@@0 heap@@22 (Handle4 h@@49 r@@27 rd@@12) bx0@@48 bx1@@32 bx2@@16 bx3@@0)) )))
(assert (forall ((arg0@@204 T@U) (arg1@@102 T@U) (arg2@@58 T@U) (arg3@@36 T@U) (arg4@@25 T@U) (arg5@@14 T@U) (arg6@@5 T@U) (arg7@@2 T@U) (arg8@@2 T@U) (arg9@@0 T@U) (arg10@@0 T@U) ) (! (= (type (Reads4 arg0@@204 arg1@@102 arg2@@58 arg3@@36 arg4@@25 arg5@@14 arg6@@5 arg7@@2 arg8@@2 arg9@@0 arg10@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads4| :pattern ( (Reads4 arg0@@204 arg1@@102 arg2@@58 arg3@@36 arg4@@25 arg5@@14 arg6@@5 arg7@@2 arg8@@2 arg9@@0 arg10@@0)) )))
(assert (forall ((t0@@74 T@U) (t1@@50 T@U) (t2@@31 T@U) (t3@@16 T@U) (t4@@1 T@U) (heap@@23 T@U) (h@@50 T@U) (r@@28 T@U) (rd@@13 T@U) (bx0@@49 T@U) (bx1@@33 T@U) (bx2@@17 T@U) (bx3@@1 T@U) (bx@@68 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@74) TyType) (= (type t1@@50) TyType)) (= (type t2@@31) TyType)) (= (type t3@@16) TyType)) (= (type t4@@1) TyType)) (= (type heap@@23) (MapType0Type refType MapType1Type))) (= (type h@@50) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@28) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@13) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@49) BoxType)) (= (type bx1@@33) BoxType)) (= (type bx2@@17) BoxType)) (= (type bx3@@1) BoxType)) (= (type bx@@68) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads4 t0@@74 t1@@50 t2@@31 t3@@16 t4@@1 heap@@23 (Handle4 h@@50 r@@28 rd@@13) bx0@@49 bx1@@33 bx2@@17 bx3@@1) bx@@68)) (U_2_bool (MapType0Select (MapType5Select rd@@13 heap@@23 bx0@@49 bx1@@33 bx2@@17 bx3@@1) bx@@68))) (=> (U_2_bool (MapType0Select (MapType5Select rd@@13 heap@@23 bx0@@49 bx1@@33 bx2@@17 bx3@@1) bx@@68)) (U_2_bool (MapType0Select (Reads4 t0@@74 t1@@50 t2@@31 t3@@16 t4@@1 heap@@23 (Handle4 h@@50 r@@28 rd@@13) bx0@@49 bx1@@33 bx2@@17 bx3@@1) bx@@68))))) :qid |unknown.0:0| :skolemid |882| :pattern ( (MapType0Select (Reads4 t0@@74 t1@@50 t2@@31 t3@@16 t4@@1 heap@@23 (Handle4 h@@50 r@@28 rd@@13) bx0@@49 bx1@@33 bx2@@17 bx3@@1) bx@@68)) )))
(assert (forall ((t0@@75 T@U) (t1@@51 T@U) (t2@@32 T@U) (t3@@17 T@U) (t4@@2 T@U) (h0@@24 T@U) (h1@@24 T@U) (f@@53 T@U) (bx0@@50 T@U) (bx1@@34 T@U) (bx2@@18 T@U) (bx3@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@75) TyType) (= (type t1@@51) TyType)) (= (type t2@@32) TyType)) (= (type t3@@17) TyType)) (= (type t4@@2) TyType)) (= (type h0@@24) (MapType0Type refType MapType1Type))) (= (type h1@@24) (MapType0Type refType MapType1Type))) (= (type f@@53) HandleTypeType)) (= (type bx0@@50) BoxType)) (= (type bx1@@34) BoxType)) (= (type bx2@@18) BoxType)) (= (type bx3@@2) BoxType)) (and (and (and ($HeapSucc h0@@24 h1@@24) (and ($IsGoodHeap h0@@24) ($IsGoodHeap h1@@24))) (and (and (and (and ($IsBox bx0@@50 t0@@75) ($IsBox bx1@@34 t1@@51)) ($IsBox bx2@@18 t2@@32)) ($IsBox bx3@@2 t3@@17)) ($Is f@@53 (Tclass._System.___hFunc4 t0@@75 t1@@51 t2@@32 t3@@17 t4@@2)))) (forall ((o@@78 T@U) (fld@@23 T@U) ) (! (let ((a@@108 (FieldTypeInv0 (type fld@@23)))) (=> (and (and (= (type o@@78) refType) (= (type fld@@23) (FieldType a@@108))) (and (not (= o@@78 null)) (U_2_bool (MapType0Select (Reads4 t0@@75 t1@@51 t2@@32 t3@@17 t4@@2 h0@@24 f@@53 bx0@@50 bx1@@34 bx2@@18 bx3@@2) ($Box o@@78))))) (= (MapType1Select (MapType0Select h0@@24 o@@78) fld@@23) (MapType1Select (MapType0Select h1@@24 o@@78) fld@@23)))) :qid |unknown.0:0| :skolemid |883| :no-pattern (type o@@78) :no-pattern (type fld@@23) :no-pattern (U_2_int o@@78) :no-pattern (U_2_bool o@@78) :no-pattern (U_2_int fld@@23) :no-pattern (U_2_bool fld@@23) )))) (= (Reads4 t0@@75 t1@@51 t2@@32 t3@@17 t4@@2 h0@@24 f@@53 bx0@@50 bx1@@34 bx2@@18 bx3@@2) (Reads4 t0@@75 t1@@51 t2@@32 t3@@17 t4@@2 h1@@24 f@@53 bx0@@50 bx1@@34 bx2@@18 bx3@@2))) :qid |unknown.0:0| :skolemid |884| :pattern ( ($HeapSucc h0@@24 h1@@24) (Reads4 t0@@75 t1@@51 t2@@32 t3@@17 t4@@2 h1@@24 f@@53 bx0@@50 bx1@@34 bx2@@18 bx3@@2)) )))
(assert (forall ((t0@@76 T@U) (t1@@52 T@U) (t2@@33 T@U) (t3@@18 T@U) (t4@@3 T@U) (h0@@25 T@U) (h1@@25 T@U) (f@@54 T@U) (bx0@@51 T@U) (bx1@@35 T@U) (bx2@@19 T@U) (bx3@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@76) TyType) (= (type t1@@52) TyType)) (= (type t2@@33) TyType)) (= (type t3@@18) TyType)) (= (type t4@@3) TyType)) (= (type h0@@25) (MapType0Type refType MapType1Type))) (= (type h1@@25) (MapType0Type refType MapType1Type))) (= (type f@@54) HandleTypeType)) (= (type bx0@@51) BoxType)) (= (type bx1@@35) BoxType)) (= (type bx2@@19) BoxType)) (= (type bx3@@3) BoxType)) (and (and (and ($HeapSucc h0@@25 h1@@25) (and ($IsGoodHeap h0@@25) ($IsGoodHeap h1@@25))) (and (and (and (and ($IsBox bx0@@51 t0@@76) ($IsBox bx1@@35 t1@@52)) ($IsBox bx2@@19 t2@@33)) ($IsBox bx3@@3 t3@@18)) ($Is f@@54 (Tclass._System.___hFunc4 t0@@76 t1@@52 t2@@33 t3@@18 t4@@3)))) (forall ((o@@79 T@U) (fld@@24 T@U) ) (! (let ((a@@109 (FieldTypeInv0 (type fld@@24)))) (=> (and (and (= (type o@@79) refType) (= (type fld@@24) (FieldType a@@109))) (and (not (= o@@79 null)) (U_2_bool (MapType0Select (Reads4 t0@@76 t1@@52 t2@@33 t3@@18 t4@@3 h1@@25 f@@54 bx0@@51 bx1@@35 bx2@@19 bx3@@3) ($Box o@@79))))) (= (MapType1Select (MapType0Select h0@@25 o@@79) fld@@24) (MapType1Select (MapType0Select h1@@25 o@@79) fld@@24)))) :qid |unknown.0:0| :skolemid |885| :no-pattern (type o@@79) :no-pattern (type fld@@24) :no-pattern (U_2_int o@@79) :no-pattern (U_2_bool o@@79) :no-pattern (U_2_int fld@@24) :no-pattern (U_2_bool fld@@24) )))) (= (Reads4 t0@@76 t1@@52 t2@@33 t3@@18 t4@@3 h0@@25 f@@54 bx0@@51 bx1@@35 bx2@@19 bx3@@3) (Reads4 t0@@76 t1@@52 t2@@33 t3@@18 t4@@3 h1@@25 f@@54 bx0@@51 bx1@@35 bx2@@19 bx3@@3))) :qid |unknown.0:0| :skolemid |886| :pattern ( ($HeapSucc h0@@25 h1@@25) (Reads4 t0@@76 t1@@52 t2@@33 t3@@18 t4@@3 h1@@25 f@@54 bx0@@51 bx1@@35 bx2@@19 bx3@@3)) )))
(assert (forall ((t0@@77 T@U) (t1@@53 T@U) (t2@@34 T@U) (t3@@19 T@U) (t4@@4 T@U) (h0@@26 T@U) (h1@@26 T@U) (f@@55 T@U) (bx0@@52 T@U) (bx1@@36 T@U) (bx2@@20 T@U) (bx3@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@77) TyType) (= (type t1@@53) TyType)) (= (type t2@@34) TyType)) (= (type t3@@19) TyType)) (= (type t4@@4) TyType)) (= (type h0@@26) (MapType0Type refType MapType1Type))) (= (type h1@@26) (MapType0Type refType MapType1Type))) (= (type f@@55) HandleTypeType)) (= (type bx0@@52) BoxType)) (= (type bx1@@36) BoxType)) (= (type bx2@@20) BoxType)) (= (type bx3@@4) BoxType)) (and (and (and ($HeapSucc h0@@26 h1@@26) (and ($IsGoodHeap h0@@26) ($IsGoodHeap h1@@26))) (and (and (and (and ($IsBox bx0@@52 t0@@77) ($IsBox bx1@@36 t1@@53)) ($IsBox bx2@@20 t2@@34)) ($IsBox bx3@@4 t3@@19)) ($Is f@@55 (Tclass._System.___hFunc4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4)))) (forall ((o@@80 T@U) (fld@@25 T@U) ) (! (let ((a@@110 (FieldTypeInv0 (type fld@@25)))) (=> (and (and (= (type o@@80) refType) (= (type fld@@25) (FieldType a@@110))) (and (not (= o@@80 null)) (U_2_bool (MapType0Select (Reads4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 h0@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4) ($Box o@@80))))) (= (MapType1Select (MapType0Select h0@@26 o@@80) fld@@25) (MapType1Select (MapType0Select h1@@26 o@@80) fld@@25)))) :qid |unknown.0:0| :skolemid |887| :no-pattern (type o@@80) :no-pattern (type fld@@25) :no-pattern (U_2_int o@@80) :no-pattern (U_2_bool o@@80) :no-pattern (U_2_int fld@@25) :no-pattern (U_2_bool fld@@25) )))) (and (=> (Requires4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 h0@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4) (Requires4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 h1@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4)) (=> (Requires4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 h1@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4) (Requires4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 h0@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4)))) :qid |unknown.0:0| :skolemid |888| :pattern ( ($HeapSucc h0@@26 h1@@26) (Requires4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 h1@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4)) )))
(assert (forall ((t0@@78 T@U) (t1@@54 T@U) (t2@@35 T@U) (t3@@20 T@U) (t4@@5 T@U) (h0@@27 T@U) (h1@@27 T@U) (f@@56 T@U) (bx0@@53 T@U) (bx1@@37 T@U) (bx2@@21 T@U) (bx3@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@78) TyType) (= (type t1@@54) TyType)) (= (type t2@@35) TyType)) (= (type t3@@20) TyType)) (= (type t4@@5) TyType)) (= (type h0@@27) (MapType0Type refType MapType1Type))) (= (type h1@@27) (MapType0Type refType MapType1Type))) (= (type f@@56) HandleTypeType)) (= (type bx0@@53) BoxType)) (= (type bx1@@37) BoxType)) (= (type bx2@@21) BoxType)) (= (type bx3@@5) BoxType)) (and (and (and ($HeapSucc h0@@27 h1@@27) (and ($IsGoodHeap h0@@27) ($IsGoodHeap h1@@27))) (and (and (and (and ($IsBox bx0@@53 t0@@78) ($IsBox bx1@@37 t1@@54)) ($IsBox bx2@@21 t2@@35)) ($IsBox bx3@@5 t3@@20)) ($Is f@@56 (Tclass._System.___hFunc4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5)))) (forall ((o@@81 T@U) (fld@@26 T@U) ) (! (let ((a@@111 (FieldTypeInv0 (type fld@@26)))) (=> (and (and (= (type o@@81) refType) (= (type fld@@26) (FieldType a@@111))) (and (not (= o@@81 null)) (U_2_bool (MapType0Select (Reads4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5) ($Box o@@81))))) (= (MapType1Select (MapType0Select h0@@27 o@@81) fld@@26) (MapType1Select (MapType0Select h1@@27 o@@81) fld@@26)))) :qid |unknown.0:0| :skolemid |889| :no-pattern (type o@@81) :no-pattern (type fld@@26) :no-pattern (U_2_int o@@81) :no-pattern (U_2_bool o@@81) :no-pattern (U_2_int fld@@26) :no-pattern (U_2_bool fld@@26) )))) (and (=> (Requires4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 h0@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5) (Requires4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5)) (=> (Requires4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5) (Requires4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 h0@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5)))) :qid |unknown.0:0| :skolemid |890| :pattern ( ($HeapSucc h0@@27 h1@@27) (Requires4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5)) )))
(assert (forall ((t0@@79 T@U) (t1@@55 T@U) (t2@@36 T@U) (t3@@21 T@U) (t4@@6 T@U) (h0@@28 T@U) (h1@@28 T@U) (f@@57 T@U) (bx0@@54 T@U) (bx1@@38 T@U) (bx2@@22 T@U) (bx3@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@79) TyType) (= (type t1@@55) TyType)) (= (type t2@@36) TyType)) (= (type t3@@21) TyType)) (= (type t4@@6) TyType)) (= (type h0@@28) (MapType0Type refType MapType1Type))) (= (type h1@@28) (MapType0Type refType MapType1Type))) (= (type f@@57) HandleTypeType)) (= (type bx0@@54) BoxType)) (= (type bx1@@38) BoxType)) (= (type bx2@@22) BoxType)) (= (type bx3@@6) BoxType)) (and (and (and ($HeapSucc h0@@28 h1@@28) (and ($IsGoodHeap h0@@28) ($IsGoodHeap h1@@28))) (and (and (and (and ($IsBox bx0@@54 t0@@79) ($IsBox bx1@@38 t1@@55)) ($IsBox bx2@@22 t2@@36)) ($IsBox bx3@@6 t3@@21)) ($Is f@@57 (Tclass._System.___hFunc4 t0@@79 t1@@55 t2@@36 t3@@21 t4@@6)))) (forall ((o@@82 T@U) (fld@@27 T@U) ) (! (let ((a@@112 (FieldTypeInv0 (type fld@@27)))) (=> (and (and (= (type o@@82) refType) (= (type fld@@27) (FieldType a@@112))) (and (not (= o@@82 null)) (U_2_bool (MapType0Select (Reads4 t0@@79 t1@@55 t2@@36 t3@@21 t4@@6 h0@@28 f@@57 bx0@@54 bx1@@38 bx2@@22 bx3@@6) ($Box o@@82))))) (= (MapType1Select (MapType0Select h0@@28 o@@82) fld@@27) (MapType1Select (MapType0Select h1@@28 o@@82) fld@@27)))) :qid |unknown.0:0| :skolemid |891| :no-pattern (type o@@82) :no-pattern (type fld@@27) :no-pattern (U_2_int o@@82) :no-pattern (U_2_bool o@@82) :no-pattern (U_2_int fld@@27) :no-pattern (U_2_bool fld@@27) )))) (= (Apply4 t0@@79 t1@@55 t2@@36 t3@@21 t4@@6 h0@@28 f@@57 bx0@@54 bx1@@38 bx2@@22 bx3@@6) (Apply4 t0@@79 t1@@55 t2@@36 t3@@21 t4@@6 h1@@28 f@@57 bx0@@54 bx1@@38 bx2@@22 bx3@@6))) :qid |unknown.0:0| :skolemid |892| :pattern ( ($HeapSucc h0@@28 h1@@28) (Apply4 t0@@79 t1@@55 t2@@36 t3@@21 t4@@6 h1@@28 f@@57 bx0@@54 bx1@@38 bx2@@22 bx3@@6)) )))
(assert (forall ((t0@@80 T@U) (t1@@56 T@U) (t2@@37 T@U) (t3@@22 T@U) (t4@@7 T@U) (h0@@29 T@U) (h1@@29 T@U) (f@@58 T@U) (bx0@@55 T@U) (bx1@@39 T@U) (bx2@@23 T@U) (bx3@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@80) TyType) (= (type t1@@56) TyType)) (= (type t2@@37) TyType)) (= (type t3@@22) TyType)) (= (type t4@@7) TyType)) (= (type h0@@29) (MapType0Type refType MapType1Type))) (= (type h1@@29) (MapType0Type refType MapType1Type))) (= (type f@@58) HandleTypeType)) (= (type bx0@@55) BoxType)) (= (type bx1@@39) BoxType)) (= (type bx2@@23) BoxType)) (= (type bx3@@7) BoxType)) (and (and (and ($HeapSucc h0@@29 h1@@29) (and ($IsGoodHeap h0@@29) ($IsGoodHeap h1@@29))) (and (and (and (and ($IsBox bx0@@55 t0@@80) ($IsBox bx1@@39 t1@@56)) ($IsBox bx2@@23 t2@@37)) ($IsBox bx3@@7 t3@@22)) ($Is f@@58 (Tclass._System.___hFunc4 t0@@80 t1@@56 t2@@37 t3@@22 t4@@7)))) (forall ((o@@83 T@U) (fld@@28 T@U) ) (! (let ((a@@113 (FieldTypeInv0 (type fld@@28)))) (=> (and (and (= (type o@@83) refType) (= (type fld@@28) (FieldType a@@113))) (and (not (= o@@83 null)) (U_2_bool (MapType0Select (Reads4 t0@@80 t1@@56 t2@@37 t3@@22 t4@@7 h1@@29 f@@58 bx0@@55 bx1@@39 bx2@@23 bx3@@7) ($Box o@@83))))) (= (MapType1Select (MapType0Select h0@@29 o@@83) fld@@28) (MapType1Select (MapType0Select h1@@29 o@@83) fld@@28)))) :qid |unknown.0:0| :skolemid |893| :no-pattern (type o@@83) :no-pattern (type fld@@28) :no-pattern (U_2_int o@@83) :no-pattern (U_2_bool o@@83) :no-pattern (U_2_int fld@@28) :no-pattern (U_2_bool fld@@28) )))) (= (Apply4 t0@@80 t1@@56 t2@@37 t3@@22 t4@@7 h0@@29 f@@58 bx0@@55 bx1@@39 bx2@@23 bx3@@7) (Apply4 t0@@80 t1@@56 t2@@37 t3@@22 t4@@7 h1@@29 f@@58 bx0@@55 bx1@@39 bx2@@23 bx3@@7))) :qid |unknown.0:0| :skolemid |894| :pattern ( ($HeapSucc h0@@29 h1@@29) (Apply4 t0@@80 t1@@56 t2@@37 t3@@22 t4@@7 h1@@29 f@@58 bx0@@55 bx1@@39 bx2@@23 bx3@@7)) )))
(assert (forall ((t0@@81 T@U) (t1@@57 T@U) (t2@@38 T@U) (t3@@23 T@U) (t4@@8 T@U) (heap@@24 T@U) (f@@59 T@U) (bx0@@56 T@U) (bx1@@40 T@U) (bx2@@24 T@U) (bx3@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@81) TyType) (= (type t1@@57) TyType)) (= (type t2@@38) TyType)) (= (type t3@@23) TyType)) (= (type t4@@8) TyType)) (= (type heap@@24) (MapType0Type refType MapType1Type))) (= (type f@@59) HandleTypeType)) (= (type bx0@@56) BoxType)) (= (type bx1@@40) BoxType)) (= (type bx2@@24) BoxType)) (= (type bx3@@8) BoxType)) (and ($IsGoodHeap heap@@24) (and (and (and (and ($IsBox bx0@@56 t0@@81) ($IsBox bx1@@40 t1@@57)) ($IsBox bx2@@24 t2@@38)) ($IsBox bx3@@8 t3@@23)) ($Is f@@59 (Tclass._System.___hFunc4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8))))) (and (=> (|Set#Equal| (Reads4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 $OneHeap f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 heap@@24 f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 heap@@24 f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 $OneHeap f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |895| :pattern ( (Reads4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 $OneHeap f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8) ($IsGoodHeap heap@@24)) :pattern ( (Reads4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 heap@@24 f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8)) )))
(assert (forall ((t0@@82 T@U) (t1@@58 T@U) (t2@@39 T@U) (t3@@24 T@U) (t4@@9 T@U) (heap@@25 T@U) (f@@60 T@U) (bx0@@57 T@U) (bx1@@41 T@U) (bx2@@25 T@U) (bx3@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@82) TyType) (= (type t1@@58) TyType)) (= (type t2@@39) TyType)) (= (type t3@@24) TyType)) (= (type t4@@9) TyType)) (= (type heap@@25) (MapType0Type refType MapType1Type))) (= (type f@@60) HandleTypeType)) (= (type bx0@@57) BoxType)) (= (type bx1@@41) BoxType)) (= (type bx2@@25) BoxType)) (= (type bx3@@9) BoxType)) (and (and ($IsGoodHeap heap@@25) (and (and (and (and ($IsBox bx0@@57 t0@@82) ($IsBox bx1@@41 t1@@58)) ($IsBox bx2@@25 t2@@39)) ($IsBox bx3@@9 t3@@24)) ($Is f@@60 (Tclass._System.___hFunc4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9)))) (|Set#Equal| (Reads4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9) (|Set#Empty| BoxType)))) (and (=> (Requires4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9) (Requires4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 heap@@25 f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9)) (=> (Requires4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 heap@@25 f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9) (Requires4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9)))) :qid |unknown.0:0| :skolemid |896| :pattern ( (Requires4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9) ($IsGoodHeap heap@@25)) :pattern ( (Requires4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 heap@@25 f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9)) )))
(assert (forall ((f@@61 T@U) (t0@@83 T@U) (t1@@59 T@U) (t2@@40 T@U) (t3@@25 T@U) (t4@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@61) HandleTypeType) (= (type t0@@83) TyType)) (= (type t1@@59) TyType)) (= (type t2@@40) TyType)) (= (type t3@@25) TyType)) (= (type t4@@10) TyType)) (and (=> ($Is f@@61 (Tclass._System.___hFunc4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10)) (forall ((h@@51 T@U) (bx0@@58 T@U) (bx1@@42 T@U) (bx2@@26 T@U) (bx3@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@51) (MapType0Type refType MapType1Type)) (= (type bx0@@58) BoxType)) (= (type bx1@@42) BoxType)) (= (type bx2@@26) BoxType)) (= (type bx3@@10) BoxType)) (and (and ($IsGoodHeap h@@51) (and (and (and ($IsBox bx0@@58 t0@@83) ($IsBox bx1@@42 t1@@59)) ($IsBox bx2@@26 t2@@40)) ($IsBox bx3@@10 t3@@25))) (Requires4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 h@@51 f@@61 bx0@@58 bx1@@42 bx2@@26 bx3@@10))) ($IsBox (Apply4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 h@@51 f@@61 bx0@@58 bx1@@42 bx2@@26 bx3@@10) t4@@10)) :qid |DafnyPre.521:12| :skolemid |897| :pattern ( (Apply4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 h@@51 f@@61 bx0@@58 bx1@@42 bx2@@26 bx3@@10)) ))) (=> (forall ((h@@52 T@U) (bx0@@59 T@U) (bx1@@43 T@U) (bx2@@27 T@U) (bx3@@11 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@52) (MapType0Type refType MapType1Type)) (= (type bx0@@59) BoxType)) (= (type bx1@@43) BoxType)) (= (type bx2@@27) BoxType)) (= (type bx3@@11) BoxType)) (and (and ($IsGoodHeap h@@52) (and (and (and ($IsBox bx0@@59 t0@@83) ($IsBox bx1@@43 t1@@59)) ($IsBox bx2@@27 t2@@40)) ($IsBox bx3@@11 t3@@25))) (Requires4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 h@@52 f@@61 bx0@@59 bx1@@43 bx2@@27 bx3@@11))) ($IsBox (Apply4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 h@@52 f@@61 bx0@@59 bx1@@43 bx2@@27 bx3@@11) t4@@10)) :qid |DafnyPre.521:12| :skolemid |897| :pattern ( (Apply4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 h@@52 f@@61 bx0@@59 bx1@@43 bx2@@27 bx3@@11)) )) ($Is f@@61 (Tclass._System.___hFunc4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10))))) :qid |unknown.0:0| :skolemid |898| :pattern ( ($Is f@@61 (Tclass._System.___hFunc4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10))) )))
(assert (forall ((f@@62 T@U) (t0@@84 T@U) (t1@@60 T@U) (t2@@41 T@U) (t3@@26 T@U) (t4@@11 T@U) (u0@@3 T@U) (u1@@2 T@U) (u2@@1 T@U) (u3@@0 T@U) (u4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type f@@62) HandleTypeType) (= (type t0@@84) TyType)) (= (type t1@@60) TyType)) (= (type t2@@41) TyType)) (= (type t3@@26) TyType)) (= (type t4@@11) TyType)) (= (type u0@@3) TyType)) (= (type u1@@2) TyType)) (= (type u2@@1) TyType)) (= (type u3@@0) TyType)) (= (type u4) TyType)) (and (and (and (and (and ($Is f@@62 (Tclass._System.___hFunc4 t0@@84 t1@@60 t2@@41 t3@@26 t4@@11)) (forall ((bx@@69 T@U) ) (!  (=> (and (= (type bx@@69) BoxType) ($IsBox bx@@69 u0@@3)) ($IsBox bx@@69 t0@@84)) :qid |unknown.0:0| :skolemid |899| :pattern ( ($IsBox bx@@69 u0@@3)) :pattern ( ($IsBox bx@@69 t0@@84)) ))) (forall ((bx@@70 T@U) ) (!  (=> (and (= (type bx@@70) BoxType) ($IsBox bx@@70 u1@@2)) ($IsBox bx@@70 t1@@60)) :qid |unknown.0:0| :skolemid |900| :pattern ( ($IsBox bx@@70 u1@@2)) :pattern ( ($IsBox bx@@70 t1@@60)) ))) (forall ((bx@@71 T@U) ) (!  (=> (and (= (type bx@@71) BoxType) ($IsBox bx@@71 u2@@1)) ($IsBox bx@@71 t2@@41)) :qid |unknown.0:0| :skolemid |901| :pattern ( ($IsBox bx@@71 u2@@1)) :pattern ( ($IsBox bx@@71 t2@@41)) ))) (forall ((bx@@72 T@U) ) (!  (=> (and (= (type bx@@72) BoxType) ($IsBox bx@@72 u3@@0)) ($IsBox bx@@72 t3@@26)) :qid |unknown.0:0| :skolemid |902| :pattern ( ($IsBox bx@@72 u3@@0)) :pattern ( ($IsBox bx@@72 t3@@26)) ))) (forall ((bx@@73 T@U) ) (!  (=> (and (= (type bx@@73) BoxType) ($IsBox bx@@73 t4@@11)) ($IsBox bx@@73 u4)) :qid |unknown.0:0| :skolemid |903| :pattern ( ($IsBox bx@@73 t4@@11)) :pattern ( ($IsBox bx@@73 u4)) )))) ($Is f@@62 (Tclass._System.___hFunc4 u0@@3 u1@@2 u2@@1 u3@@0 u4))) :qid |unknown.0:0| :skolemid |904| :pattern ( ($Is f@@62 (Tclass._System.___hFunc4 t0@@84 t1@@60 t2@@41 t3@@26 t4@@11)) ($Is f@@62 (Tclass._System.___hFunc4 u0@@3 u1@@2 u2@@1 u3@@0 u4))) )))
(assert (forall ((f@@63 T@U) (t0@@85 T@U) (t1@@61 T@U) (t2@@42 T@U) (t3@@27 T@U) (t4@@12 T@U) (h@@53 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@63) HandleTypeType) (= (type t0@@85) TyType)) (= (type t1@@61) TyType)) (= (type t2@@42) TyType)) (= (type t3@@27) TyType)) (= (type t4@@12) TyType)) (= (type h@@53) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@53)) (and (=> ($IsAlloc f@@63 (Tclass._System.___hFunc4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12) h@@53) (forall ((bx0@@60 T@U) (bx1@@44 T@U) (bx2@@28 T@U) (bx3@@12 T@U) ) (!  (=> (and (and (and (= (type bx0@@60) BoxType) (= (type bx1@@44) BoxType)) (= (type bx2@@28) BoxType)) (= (type bx3@@12) BoxType)) (=> (and (and (and (and (and ($IsBox bx0@@60 t0@@85) ($IsAllocBox bx0@@60 t0@@85 h@@53)) (and ($IsBox bx1@@44 t1@@61) ($IsAllocBox bx1@@44 t1@@61 h@@53))) (and ($IsBox bx2@@28 t2@@42) ($IsAllocBox bx2@@28 t2@@42 h@@53))) (and ($IsBox bx3@@12 t3@@27) ($IsAllocBox bx3@@12 t3@@27 h@@53))) (Requires4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28 bx3@@12)) (forall ((r@@29 T@U) ) (!  (=> (= (type r@@29) refType) (=> (and (not (= r@@29 null)) (U_2_bool (MapType0Select (Reads4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28 bx3@@12) ($Box r@@29)))) (U_2_bool (MapType1Select (MapType0Select h@@53 r@@29) alloc)))) :qid |unknown.0:0| :skolemid |905| :pattern ( (MapType0Select (Reads4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28 bx3@@12) ($Box r@@29))) )))) :qid |unknown.0:0| :skolemid |906| :pattern ( (Apply4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28 bx3@@12)) :pattern ( (Reads4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28 bx3@@12)) ))) (=> (forall ((bx0@@61 T@U) (bx1@@45 T@U) (bx2@@29 T@U) (bx3@@13 T@U) ) (!  (=> (and (and (and (= (type bx0@@61) BoxType) (= (type bx1@@45) BoxType)) (= (type bx2@@29) BoxType)) (= (type bx3@@13) BoxType)) (=> (and (and (and (and (and ($IsBox bx0@@61 t0@@85) ($IsAllocBox bx0@@61 t0@@85 h@@53)) (and ($IsBox bx1@@45 t1@@61) ($IsAllocBox bx1@@45 t1@@61 h@@53))) (and ($IsBox bx2@@29 t2@@42) ($IsAllocBox bx2@@29 t2@@42 h@@53))) (and ($IsBox bx3@@13 t3@@27) ($IsAllocBox bx3@@13 t3@@27 h@@53))) (Requires4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29 bx3@@13)) (forall ((r@@30 T@U) ) (!  (=> (= (type r@@30) refType) (=> (and (not (= r@@30 null)) (U_2_bool (MapType0Select (Reads4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29 bx3@@13) ($Box r@@30)))) (U_2_bool (MapType1Select (MapType0Select h@@53 r@@30) alloc)))) :qid |unknown.0:0| :skolemid |905| :pattern ( (MapType0Select (Reads4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29 bx3@@13) ($Box r@@30))) )))) :qid |unknown.0:0| :skolemid |906| :pattern ( (Apply4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29 bx3@@13)) :pattern ( (Reads4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29 bx3@@13)) )) ($IsAlloc f@@63 (Tclass._System.___hFunc4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12) h@@53)))) :qid |unknown.0:0| :skolemid |907| :pattern ( ($IsAlloc f@@63 (Tclass._System.___hFunc4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12) h@@53)) )))
(assert (forall ((f@@64 T@U) (t0@@86 T@U) (t1@@62 T@U) (t2@@43 T@U) (t3@@28 T@U) (t4@@13 T@U) (h@@54 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@64) HandleTypeType) (= (type t0@@86) TyType)) (= (type t1@@62) TyType)) (= (type t2@@43) TyType)) (= (type t3@@28) TyType)) (= (type t4@@13) TyType)) (= (type h@@54) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@54) ($IsAlloc f@@64 (Tclass._System.___hFunc4 t0@@86 t1@@62 t2@@43 t3@@28 t4@@13) h@@54))) (forall ((bx0@@62 T@U) (bx1@@46 T@U) (bx2@@30 T@U) (bx3@@14 T@U) ) (!  (=> (and (and (and (= (type bx0@@62) BoxType) (= (type bx1@@46) BoxType)) (= (type bx2@@30) BoxType)) (= (type bx3@@14) BoxType)) (=> (and (and (and (and ($IsAllocBox bx0@@62 t0@@86 h@@54) ($IsAllocBox bx1@@46 t1@@62 h@@54)) ($IsAllocBox bx2@@30 t2@@43 h@@54)) ($IsAllocBox bx3@@14 t3@@28 h@@54)) (Requires4 t0@@86 t1@@62 t2@@43 t3@@28 t4@@13 h@@54 f@@64 bx0@@62 bx1@@46 bx2@@30 bx3@@14)) ($IsAllocBox (Apply4 t0@@86 t1@@62 t2@@43 t3@@28 t4@@13 h@@54 f@@64 bx0@@62 bx1@@46 bx2@@30 bx3@@14) t4@@13 h@@54))) :qid |unknown.0:0| :skolemid |908| :pattern ( (Apply4 t0@@86 t1@@62 t2@@43 t3@@28 t4@@13 h@@54 f@@64 bx0@@62 bx1@@46 bx2@@30 bx3@@14)) ))) :qid |unknown.0:0| :skolemid |909| :pattern ( ($IsAlloc f@@64 (Tclass._System.___hFunc4 t0@@86 t1@@62 t2@@43 t3@@28 t4@@13) h@@54)) )))
(assert (forall ((arg0@@205 T@U) (arg1@@103 T@U) (arg2@@59 T@U) (arg3@@37 T@U) (arg4@@26 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4 arg0@@205 arg1@@103 arg2@@59 arg3@@37 arg4@@26)) TyType) :qid |funType:Tclass._System.___hPartialFunc4| :pattern ( (Tclass._System.___hPartialFunc4 arg0@@205 arg1@@103 arg2@@59 arg3@@37 arg4@@26)) )))
(assert (forall ((|#$T0@@72| T@U) (|#$T1@@56| T@U) (|#$T2@@28| T@U) (|#$T3@@6| T@U) (|#$R@@76| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@72|) TyType) (= (type |#$T1@@56|) TyType)) (= (type |#$T2@@28|) TyType)) (= (type |#$T3@@6|) TyType)) (= (type |#$R@@76|) TyType)) (= (Tag (Tclass._System.___hPartialFunc4 |#$T0@@72| |#$T1@@56| |#$T2@@28| |#$T3@@6| |#$R@@76|)) Tagclass._System.___hPartialFunc4)) :qid |unknown.0:0| :skolemid |910| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@72| |#$T1@@56| |#$T2@@28| |#$T3@@6| |#$R@@76|)) )))
(assert (forall ((arg0@@206 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_0 arg0@@206)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_0| :pattern ( (Tclass._System.___hPartialFunc4_0 arg0@@206)) )))
(assert (forall ((|#$T0@@73| T@U) (|#$T1@@57| T@U) (|#$T2@@29| T@U) (|#$T3@@7| T@U) (|#$R@@77| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@73|) TyType) (= (type |#$T1@@57|) TyType)) (= (type |#$T2@@29|) TyType)) (= (type |#$T3@@7|) TyType)) (= (type |#$R@@77|) TyType)) (= (Tclass._System.___hPartialFunc4_0 (Tclass._System.___hPartialFunc4 |#$T0@@73| |#$T1@@57| |#$T2@@29| |#$T3@@7| |#$R@@77|)) |#$T0@@73|)) :qid |unknown.0:0| :skolemid |911| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@73| |#$T1@@57| |#$T2@@29| |#$T3@@7| |#$R@@77|)) )))
(assert (forall ((arg0@@207 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_1 arg0@@207)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_1| :pattern ( (Tclass._System.___hPartialFunc4_1 arg0@@207)) )))
(assert (forall ((|#$T0@@74| T@U) (|#$T1@@58| T@U) (|#$T2@@30| T@U) (|#$T3@@8| T@U) (|#$R@@78| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@74|) TyType) (= (type |#$T1@@58|) TyType)) (= (type |#$T2@@30|) TyType)) (= (type |#$T3@@8|) TyType)) (= (type |#$R@@78|) TyType)) (= (Tclass._System.___hPartialFunc4_1 (Tclass._System.___hPartialFunc4 |#$T0@@74| |#$T1@@58| |#$T2@@30| |#$T3@@8| |#$R@@78|)) |#$T1@@58|)) :qid |unknown.0:0| :skolemid |912| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@74| |#$T1@@58| |#$T2@@30| |#$T3@@8| |#$R@@78|)) )))
(assert (forall ((arg0@@208 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_2 arg0@@208)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_2| :pattern ( (Tclass._System.___hPartialFunc4_2 arg0@@208)) )))
(assert (forall ((|#$T0@@75| T@U) (|#$T1@@59| T@U) (|#$T2@@31| T@U) (|#$T3@@9| T@U) (|#$R@@79| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@75|) TyType) (= (type |#$T1@@59|) TyType)) (= (type |#$T2@@31|) TyType)) (= (type |#$T3@@9|) TyType)) (= (type |#$R@@79|) TyType)) (= (Tclass._System.___hPartialFunc4_2 (Tclass._System.___hPartialFunc4 |#$T0@@75| |#$T1@@59| |#$T2@@31| |#$T3@@9| |#$R@@79|)) |#$T2@@31|)) :qid |unknown.0:0| :skolemid |913| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@75| |#$T1@@59| |#$T2@@31| |#$T3@@9| |#$R@@79|)) )))
(assert (forall ((arg0@@209 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_3 arg0@@209)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_3| :pattern ( (Tclass._System.___hPartialFunc4_3 arg0@@209)) )))
(assert (forall ((|#$T0@@76| T@U) (|#$T1@@60| T@U) (|#$T2@@32| T@U) (|#$T3@@10| T@U) (|#$R@@80| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@76|) TyType) (= (type |#$T1@@60|) TyType)) (= (type |#$T2@@32|) TyType)) (= (type |#$T3@@10|) TyType)) (= (type |#$R@@80|) TyType)) (= (Tclass._System.___hPartialFunc4_3 (Tclass._System.___hPartialFunc4 |#$T0@@76| |#$T1@@60| |#$T2@@32| |#$T3@@10| |#$R@@80|)) |#$T3@@10|)) :qid |unknown.0:0| :skolemid |914| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@76| |#$T1@@60| |#$T2@@32| |#$T3@@10| |#$R@@80|)) )))
(assert (forall ((arg0@@210 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_4 arg0@@210)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_4| :pattern ( (Tclass._System.___hPartialFunc4_4 arg0@@210)) )))
(assert (forall ((|#$T0@@77| T@U) (|#$T1@@61| T@U) (|#$T2@@33| T@U) (|#$T3@@11| T@U) (|#$R@@81| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@77|) TyType) (= (type |#$T1@@61|) TyType)) (= (type |#$T2@@33|) TyType)) (= (type |#$T3@@11|) TyType)) (= (type |#$R@@81|) TyType)) (= (Tclass._System.___hPartialFunc4_4 (Tclass._System.___hPartialFunc4 |#$T0@@77| |#$T1@@61| |#$T2@@33| |#$T3@@11| |#$R@@81|)) |#$R@@81|)) :qid |unknown.0:0| :skolemid |915| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@77| |#$T1@@61| |#$T2@@33| |#$T3@@11| |#$R@@81|)) )))
(assert (forall ((|#$T0@@78| T@U) (|#$T1@@62| T@U) (|#$T2@@34| T@U) (|#$T3@@12| T@U) (|#$R@@82| T@U) (bx@@74 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@78|) TyType) (= (type |#$T1@@62|) TyType)) (= (type |#$T2@@34|) TyType)) (= (type |#$T3@@12|) TyType)) (= (type |#$R@@82|) TyType)) (= (type bx@@74) BoxType)) ($IsBox bx@@74 (Tclass._System.___hPartialFunc4 |#$T0@@78| |#$T1@@62| |#$T2@@34| |#$T3@@12| |#$R@@82|))) (and (= ($Box ($Unbox HandleTypeType bx@@74)) bx@@74) ($Is ($Unbox HandleTypeType bx@@74) (Tclass._System.___hPartialFunc4 |#$T0@@78| |#$T1@@62| |#$T2@@34| |#$T3@@12| |#$R@@82|)))) :qid |unknown.0:0| :skolemid |916| :pattern ( ($IsBox bx@@74 (Tclass._System.___hPartialFunc4 |#$T0@@78| |#$T1@@62| |#$T2@@34| |#$T3@@12| |#$R@@82|))) )))
(assert (forall ((|#$T0@@79| T@U) (|#$T1@@63| T@U) (|#$T2@@35| T@U) (|#$T3@@13| T@U) (|#$R@@83| T@U) (|f#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@79|) TyType) (= (type |#$T1@@63|) TyType)) (= (type |#$T2@@35|) TyType)) (= (type |#$T3@@13|) TyType)) (= (type |#$R@@83|) TyType)) (= (type |f#0@@15|) HandleTypeType)) (and (=> ($Is |f#0@@15| (Tclass._System.___hPartialFunc4 |#$T0@@79| |#$T1@@63| |#$T2@@35| |#$T3@@13| |#$R@@83|)) (and ($Is |f#0@@15| (Tclass._System.___hFunc4 |#$T0@@79| |#$T1@@63| |#$T2@@35| |#$T3@@13| |#$R@@83|)) (forall ((|x0#0@@11| T@U) (|x1#0@@7| T@U) (|x2#0@@3| T@U) (|x3#0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@11|) BoxType) (= (type |x1#0@@7|) BoxType)) (= (type |x2#0@@3|) BoxType)) (= (type |x3#0|) BoxType)) (and (and (and ($IsBox |x0#0@@11| |#$T0@@79|) ($IsBox |x1#0@@7| |#$T1@@63|)) ($IsBox |x2#0@@3| |#$T2@@35|)) ($IsBox |x3#0| |#$T3@@13|))) (|Set#Equal| (Reads4 |#$T0@@79| |#$T1@@63| |#$T2@@35| |#$T3@@13| |#$R@@83| $OneHeap |f#0@@15| |x0#0@@11| |x1#0@@7| |x2#0@@3| |x3#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |917| :no-pattern (type |x0#0@@11|) :no-pattern (type |x1#0@@7|) :no-pattern (type |x2#0@@3|) :no-pattern (type |x3#0|) :no-pattern (U_2_int |x0#0@@11|) :no-pattern (U_2_bool |x0#0@@11|) :no-pattern (U_2_int |x1#0@@7|) :no-pattern (U_2_bool |x1#0@@7|) :no-pattern (U_2_int |x2#0@@3|) :no-pattern (U_2_bool |x2#0@@3|) :no-pattern (U_2_int |x3#0|) :no-pattern (U_2_bool |x3#0|) )))) (=> (and ($Is |f#0@@15| (Tclass._System.___hFunc4 |#$T0@@79| |#$T1@@63| |#$T2@@35| |#$T3@@13| |#$R@@83|)) (forall ((|x0#0@@12| T@U) (|x1#0@@8| T@U) (|x2#0@@4| T@U) (|x3#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@12|) BoxType) (= (type |x1#0@@8|) BoxType)) (= (type |x2#0@@4|) BoxType)) (= (type |x3#0@@0|) BoxType)) (and (and (and ($IsBox |x0#0@@12| |#$T0@@79|) ($IsBox |x1#0@@8| |#$T1@@63|)) ($IsBox |x2#0@@4| |#$T2@@35|)) ($IsBox |x3#0@@0| |#$T3@@13|))) (|Set#Equal| (Reads4 |#$T0@@79| |#$T1@@63| |#$T2@@35| |#$T3@@13| |#$R@@83| $OneHeap |f#0@@15| |x0#0@@12| |x1#0@@8| |x2#0@@4| |x3#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |917| :no-pattern (type |x0#0@@12|) :no-pattern (type |x1#0@@8|) :no-pattern (type |x2#0@@4|) :no-pattern (type |x3#0@@0|) :no-pattern (U_2_int |x0#0@@12|) :no-pattern (U_2_bool |x0#0@@12|) :no-pattern (U_2_int |x1#0@@8|) :no-pattern (U_2_bool |x1#0@@8|) :no-pattern (U_2_int |x2#0@@4|) :no-pattern (U_2_bool |x2#0@@4|) :no-pattern (U_2_int |x3#0@@0|) :no-pattern (U_2_bool |x3#0@@0|) ))) ($Is |f#0@@15| (Tclass._System.___hPartialFunc4 |#$T0@@79| |#$T1@@63| |#$T2@@35| |#$T3@@13| |#$R@@83|))))) :qid |unknown.0:0| :skolemid |918| :pattern ( ($Is |f#0@@15| (Tclass._System.___hPartialFunc4 |#$T0@@79| |#$T1@@63| |#$T2@@35| |#$T3@@13| |#$R@@83|))) )))
(assert (forall ((|#$T0@@80| T@U) (|#$T1@@64| T@U) (|#$T2@@36| T@U) (|#$T3@@14| T@U) (|#$R@@84| T@U) (|f#0@@16| T@U) ($h@@19 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@80|) TyType) (= (type |#$T1@@64|) TyType)) (= (type |#$T2@@36|) TyType)) (= (type |#$T3@@14|) TyType)) (= (type |#$R@@84|) TyType)) (= (type |f#0@@16|) HandleTypeType)) (= (type $h@@19) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc4 |#$T0@@80| |#$T1@@64| |#$T2@@36| |#$T3@@14| |#$R@@84|) $h@@19) ($IsAlloc |f#0@@16| (Tclass._System.___hFunc4 |#$T0@@80| |#$T1@@64| |#$T2@@36| |#$T3@@14| |#$R@@84|) $h@@19)) (=> ($IsAlloc |f#0@@16| (Tclass._System.___hFunc4 |#$T0@@80| |#$T1@@64| |#$T2@@36| |#$T3@@14| |#$R@@84|) $h@@19) ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc4 |#$T0@@80| |#$T1@@64| |#$T2@@36| |#$T3@@14| |#$R@@84|) $h@@19)))) :qid |unknown.0:0| :skolemid |919| :pattern ( ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc4 |#$T0@@80| |#$T1@@64| |#$T2@@36| |#$T3@@14| |#$R@@84|) $h@@19)) )))
(assert (forall ((arg0@@211 T@U) (arg1@@104 T@U) (arg2@@60 T@U) (arg3@@38 T@U) (arg4@@27 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4 arg0@@211 arg1@@104 arg2@@60 arg3@@38 arg4@@27)) TyType) :qid |funType:Tclass._System.___hTotalFunc4| :pattern ( (Tclass._System.___hTotalFunc4 arg0@@211 arg1@@104 arg2@@60 arg3@@38 arg4@@27)) )))
(assert (forall ((|#$T0@@81| T@U) (|#$T1@@65| T@U) (|#$T2@@37| T@U) (|#$T3@@15| T@U) (|#$R@@85| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@81|) TyType) (= (type |#$T1@@65|) TyType)) (= (type |#$T2@@37|) TyType)) (= (type |#$T3@@15|) TyType)) (= (type |#$R@@85|) TyType)) (= (Tag (Tclass._System.___hTotalFunc4 |#$T0@@81| |#$T1@@65| |#$T2@@37| |#$T3@@15| |#$R@@85|)) Tagclass._System.___hTotalFunc4)) :qid |unknown.0:0| :skolemid |920| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@81| |#$T1@@65| |#$T2@@37| |#$T3@@15| |#$R@@85|)) )))
(assert (forall ((arg0@@212 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_0 arg0@@212)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_0| :pattern ( (Tclass._System.___hTotalFunc4_0 arg0@@212)) )))
(assert (forall ((|#$T0@@82| T@U) (|#$T1@@66| T@U) (|#$T2@@38| T@U) (|#$T3@@16| T@U) (|#$R@@86| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@82|) TyType) (= (type |#$T1@@66|) TyType)) (= (type |#$T2@@38|) TyType)) (= (type |#$T3@@16|) TyType)) (= (type |#$R@@86|) TyType)) (= (Tclass._System.___hTotalFunc4_0 (Tclass._System.___hTotalFunc4 |#$T0@@82| |#$T1@@66| |#$T2@@38| |#$T3@@16| |#$R@@86|)) |#$T0@@82|)) :qid |unknown.0:0| :skolemid |921| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@82| |#$T1@@66| |#$T2@@38| |#$T3@@16| |#$R@@86|)) )))
(assert (forall ((arg0@@213 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_1 arg0@@213)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_1| :pattern ( (Tclass._System.___hTotalFunc4_1 arg0@@213)) )))
(assert (forall ((|#$T0@@83| T@U) (|#$T1@@67| T@U) (|#$T2@@39| T@U) (|#$T3@@17| T@U) (|#$R@@87| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@83|) TyType) (= (type |#$T1@@67|) TyType)) (= (type |#$T2@@39|) TyType)) (= (type |#$T3@@17|) TyType)) (= (type |#$R@@87|) TyType)) (= (Tclass._System.___hTotalFunc4_1 (Tclass._System.___hTotalFunc4 |#$T0@@83| |#$T1@@67| |#$T2@@39| |#$T3@@17| |#$R@@87|)) |#$T1@@67|)) :qid |unknown.0:0| :skolemid |922| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@83| |#$T1@@67| |#$T2@@39| |#$T3@@17| |#$R@@87|)) )))
(assert (forall ((arg0@@214 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_2 arg0@@214)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_2| :pattern ( (Tclass._System.___hTotalFunc4_2 arg0@@214)) )))
(assert (forall ((|#$T0@@84| T@U) (|#$T1@@68| T@U) (|#$T2@@40| T@U) (|#$T3@@18| T@U) (|#$R@@88| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@84|) TyType) (= (type |#$T1@@68|) TyType)) (= (type |#$T2@@40|) TyType)) (= (type |#$T3@@18|) TyType)) (= (type |#$R@@88|) TyType)) (= (Tclass._System.___hTotalFunc4_2 (Tclass._System.___hTotalFunc4 |#$T0@@84| |#$T1@@68| |#$T2@@40| |#$T3@@18| |#$R@@88|)) |#$T2@@40|)) :qid |unknown.0:0| :skolemid |923| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@84| |#$T1@@68| |#$T2@@40| |#$T3@@18| |#$R@@88|)) )))
(assert (forall ((arg0@@215 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_3 arg0@@215)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_3| :pattern ( (Tclass._System.___hTotalFunc4_3 arg0@@215)) )))
(assert (forall ((|#$T0@@85| T@U) (|#$T1@@69| T@U) (|#$T2@@41| T@U) (|#$T3@@19| T@U) (|#$R@@89| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@85|) TyType) (= (type |#$T1@@69|) TyType)) (= (type |#$T2@@41|) TyType)) (= (type |#$T3@@19|) TyType)) (= (type |#$R@@89|) TyType)) (= (Tclass._System.___hTotalFunc4_3 (Tclass._System.___hTotalFunc4 |#$T0@@85| |#$T1@@69| |#$T2@@41| |#$T3@@19| |#$R@@89|)) |#$T3@@19|)) :qid |unknown.0:0| :skolemid |924| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@85| |#$T1@@69| |#$T2@@41| |#$T3@@19| |#$R@@89|)) )))
(assert (forall ((arg0@@216 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_4 arg0@@216)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_4| :pattern ( (Tclass._System.___hTotalFunc4_4 arg0@@216)) )))
(assert (forall ((|#$T0@@86| T@U) (|#$T1@@70| T@U) (|#$T2@@42| T@U) (|#$T3@@20| T@U) (|#$R@@90| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@86|) TyType) (= (type |#$T1@@70|) TyType)) (= (type |#$T2@@42|) TyType)) (= (type |#$T3@@20|) TyType)) (= (type |#$R@@90|) TyType)) (= (Tclass._System.___hTotalFunc4_4 (Tclass._System.___hTotalFunc4 |#$T0@@86| |#$T1@@70| |#$T2@@42| |#$T3@@20| |#$R@@90|)) |#$R@@90|)) :qid |unknown.0:0| :skolemid |925| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@86| |#$T1@@70| |#$T2@@42| |#$T3@@20| |#$R@@90|)) )))
(assert (forall ((|#$T0@@87| T@U) (|#$T1@@71| T@U) (|#$T2@@43| T@U) (|#$T3@@21| T@U) (|#$R@@91| T@U) (bx@@75 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@87|) TyType) (= (type |#$T1@@71|) TyType)) (= (type |#$T2@@43|) TyType)) (= (type |#$T3@@21|) TyType)) (= (type |#$R@@91|) TyType)) (= (type bx@@75) BoxType)) ($IsBox bx@@75 (Tclass._System.___hTotalFunc4 |#$T0@@87| |#$T1@@71| |#$T2@@43| |#$T3@@21| |#$R@@91|))) (and (= ($Box ($Unbox HandleTypeType bx@@75)) bx@@75) ($Is ($Unbox HandleTypeType bx@@75) (Tclass._System.___hTotalFunc4 |#$T0@@87| |#$T1@@71| |#$T2@@43| |#$T3@@21| |#$R@@91|)))) :qid |unknown.0:0| :skolemid |926| :pattern ( ($IsBox bx@@75 (Tclass._System.___hTotalFunc4 |#$T0@@87| |#$T1@@71| |#$T2@@43| |#$T3@@21| |#$R@@91|))) )))
(assert (forall ((|#$T0@@88| T@U) (|#$T1@@72| T@U) (|#$T2@@44| T@U) (|#$T3@@22| T@U) (|#$R@@92| T@U) (|f#0@@17| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@88|) TyType) (= (type |#$T1@@72|) TyType)) (= (type |#$T2@@44|) TyType)) (= (type |#$T3@@22|) TyType)) (= (type |#$R@@92|) TyType)) (= (type |f#0@@17|) HandleTypeType)) (and (=> ($Is |f#0@@17| (Tclass._System.___hTotalFunc4 |#$T0@@88| |#$T1@@72| |#$T2@@44| |#$T3@@22| |#$R@@92|)) (and ($Is |f#0@@17| (Tclass._System.___hPartialFunc4 |#$T0@@88| |#$T1@@72| |#$T2@@44| |#$T3@@22| |#$R@@92|)) (forall ((|x0#0@@13| T@U) (|x1#0@@9| T@U) (|x2#0@@5| T@U) (|x3#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@13|) BoxType) (= (type |x1#0@@9|) BoxType)) (= (type |x2#0@@5|) BoxType)) (= (type |x3#0@@1|) BoxType)) (and (and (and ($IsBox |x0#0@@13| |#$T0@@88|) ($IsBox |x1#0@@9| |#$T1@@72|)) ($IsBox |x2#0@@5| |#$T2@@44|)) ($IsBox |x3#0@@1| |#$T3@@22|))) (Requires4 |#$T0@@88| |#$T1@@72| |#$T2@@44| |#$T3@@22| |#$R@@92| $OneHeap |f#0@@17| |x0#0@@13| |x1#0@@9| |x2#0@@5| |x3#0@@1|)) :qid |unknown.0:0| :skolemid |927| :no-pattern (type |x0#0@@13|) :no-pattern (type |x1#0@@9|) :no-pattern (type |x2#0@@5|) :no-pattern (type |x3#0@@1|) :no-pattern (U_2_int |x0#0@@13|) :no-pattern (U_2_bool |x0#0@@13|) :no-pattern (U_2_int |x1#0@@9|) :no-pattern (U_2_bool |x1#0@@9|) :no-pattern (U_2_int |x2#0@@5|) :no-pattern (U_2_bool |x2#0@@5|) :no-pattern (U_2_int |x3#0@@1|) :no-pattern (U_2_bool |x3#0@@1|) )))) (=> (and ($Is |f#0@@17| (Tclass._System.___hPartialFunc4 |#$T0@@88| |#$T1@@72| |#$T2@@44| |#$T3@@22| |#$R@@92|)) (forall ((|x0#0@@14| T@U) (|x1#0@@10| T@U) (|x2#0@@6| T@U) (|x3#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@14|) BoxType) (= (type |x1#0@@10|) BoxType)) (= (type |x2#0@@6|) BoxType)) (= (type |x3#0@@2|) BoxType)) (and (and (and ($IsBox |x0#0@@14| |#$T0@@88|) ($IsBox |x1#0@@10| |#$T1@@72|)) ($IsBox |x2#0@@6| |#$T2@@44|)) ($IsBox |x3#0@@2| |#$T3@@22|))) (Requires4 |#$T0@@88| |#$T1@@72| |#$T2@@44| |#$T3@@22| |#$R@@92| $OneHeap |f#0@@17| |x0#0@@14| |x1#0@@10| |x2#0@@6| |x3#0@@2|)) :qid |unknown.0:0| :skolemid |927| :no-pattern (type |x0#0@@14|) :no-pattern (type |x1#0@@10|) :no-pattern (type |x2#0@@6|) :no-pattern (type |x3#0@@2|) :no-pattern (U_2_int |x0#0@@14|) :no-pattern (U_2_bool |x0#0@@14|) :no-pattern (U_2_int |x1#0@@10|) :no-pattern (U_2_bool |x1#0@@10|) :no-pattern (U_2_int |x2#0@@6|) :no-pattern (U_2_bool |x2#0@@6|) :no-pattern (U_2_int |x3#0@@2|) :no-pattern (U_2_bool |x3#0@@2|) ))) ($Is |f#0@@17| (Tclass._System.___hTotalFunc4 |#$T0@@88| |#$T1@@72| |#$T2@@44| |#$T3@@22| |#$R@@92|))))) :qid |unknown.0:0| :skolemid |928| :pattern ( ($Is |f#0@@17| (Tclass._System.___hTotalFunc4 |#$T0@@88| |#$T1@@72| |#$T2@@44| |#$T3@@22| |#$R@@92|))) )))
(assert (forall ((|#$T0@@89| T@U) (|#$T1@@73| T@U) (|#$T2@@45| T@U) (|#$T3@@23| T@U) (|#$R@@93| T@U) (|f#0@@18| T@U) ($h@@20 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@89|) TyType) (= (type |#$T1@@73|) TyType)) (= (type |#$T2@@45|) TyType)) (= (type |#$T3@@23|) TyType)) (= (type |#$R@@93|) TyType)) (= (type |f#0@@18|) HandleTypeType)) (= (type $h@@20) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc4 |#$T0@@89| |#$T1@@73| |#$T2@@45| |#$T3@@23| |#$R@@93|) $h@@20) ($IsAlloc |f#0@@18| (Tclass._System.___hPartialFunc4 |#$T0@@89| |#$T1@@73| |#$T2@@45| |#$T3@@23| |#$R@@93|) $h@@20)) (=> ($IsAlloc |f#0@@18| (Tclass._System.___hPartialFunc4 |#$T0@@89| |#$T1@@73| |#$T2@@45| |#$T3@@23| |#$R@@93|) $h@@20) ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc4 |#$T0@@89| |#$T1@@73| |#$T2@@45| |#$T3@@23| |#$R@@93|) $h@@20)))) :qid |unknown.0:0| :skolemid |929| :pattern ( ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc4 |#$T0@@89| |#$T1@@73| |#$T2@@45| |#$T3@@23| |#$R@@93|) $h@@20)) )))
(assert (= (type |#_System._tuple#0._#Make0|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_System._tuple#0._#Make0|) |##_System._tuple#0._#Make0|))
(assert (forall ((d@@6 T@U) ) (!  (=> (= (type d@@6) DatatypeTypeType) (and (=> (_System.Tuple0.___hMake0_q d@@6) (= (DatatypeCtorId d@@6) |##_System._tuple#0._#Make0|)) (=> (= (DatatypeCtorId d@@6) |##_System._tuple#0._#Make0|) (_System.Tuple0.___hMake0_q d@@6)))) :qid |unknown.0:0| :skolemid |930| :pattern ( (_System.Tuple0.___hMake0_q d@@6)) )))
(assert (forall ((d@@7 T@U) ) (!  (=> (and (= (type d@@7) DatatypeTypeType) (_System.Tuple0.___hMake0_q d@@7)) (= d@@7 |#_System._tuple#0._#Make0|)) :qid |unknown.0:0| :skolemid |931| :pattern ( (_System.Tuple0.___hMake0_q d@@7)) )))
(assert (= (type Tclass._System.Tuple0) TyType))
(assert (= (Tag Tclass._System.Tuple0) Tagclass._System.Tuple0))
(assert (forall ((bx@@76 T@U) ) (!  (=> (and (= (type bx@@76) BoxType) ($IsBox bx@@76 Tclass._System.Tuple0)) (and (= ($Box ($Unbox DatatypeTypeType bx@@76)) bx@@76) ($Is ($Unbox DatatypeTypeType bx@@76) Tclass._System.Tuple0))) :qid |unknown.0:0| :skolemid |932| :pattern ( ($IsBox bx@@76 Tclass._System.Tuple0)) )))
(assert ($Is |#_System._tuple#0._#Make0| Tclass._System.Tuple0))
(assert (forall (($h@@21 T@U) ) (!  (=> (and (= (type $h@@21) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@21)) ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@21)) :qid |DafnyPre.521:12| :skolemid |933| :pattern ( ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@21)) )))
(assert (= |#_System._tuple#0._#Make0| (Lit |#_System._tuple#0._#Make0|)))
(assert (forall ((d@@8 T@U) ) (!  (=> (and (= (type d@@8) DatatypeTypeType) (|$IsA#_System.Tuple0| d@@8)) (_System.Tuple0.___hMake0_q d@@8)) :qid |unknown.0:0| :skolemid |934| :pattern ( (|$IsA#_System.Tuple0| d@@8)) )))
(assert (forall ((d@@9 T@U) ) (!  (=> (and (= (type d@@9) DatatypeTypeType) ($Is d@@9 Tclass._System.Tuple0)) (_System.Tuple0.___hMake0_q d@@9)) :qid |unknown.0:0| :skolemid |935| :pattern ( (_System.Tuple0.___hMake0_q d@@9) ($Is d@@9 Tclass._System.Tuple0)) )))
(assert (forall ((a@@114 T@U) (b@@63 T@U) ) (!  (=> (and (and (= (type a@@114) DatatypeTypeType) (= (type b@@63) DatatypeTypeType)) true) (and (=> (|_System.Tuple0#Equal| a@@114 b@@63) true) (=> true (|_System.Tuple0#Equal| a@@114 b@@63)))) :qid |unknown.0:0| :skolemid |936| :pattern ( (|_System.Tuple0#Equal| a@@114 b@@63)) )))
(assert (forall ((a@@115 T@U) (b@@64 T@U) ) (!  (=> (and (= (type a@@115) DatatypeTypeType) (= (type b@@64) DatatypeTypeType)) (and (=> (|_System.Tuple0#Equal| a@@115 b@@64) (= a@@115 b@@64)) (=> (= a@@115 b@@64) (|_System.Tuple0#Equal| a@@115 b@@64)))) :qid |unknown.0:0| :skolemid |937| :pattern ( (|_System.Tuple0#Equal| a@@115 b@@64)) )))
(assert (= (type |#GenericMarshalling.G.GUint32|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#GenericMarshalling.G.GUint32|) |##GenericMarshalling.G.GUint32|))
(assert (forall ((d@@10 T@U) ) (!  (=> (= (type d@@10) DatatypeTypeType) (and (=> (GenericMarshalling.G.GUint32_q d@@10) (= (DatatypeCtorId d@@10) |##GenericMarshalling.G.GUint32|)) (=> (= (DatatypeCtorId d@@10) |##GenericMarshalling.G.GUint32|) (GenericMarshalling.G.GUint32_q d@@10)))) :qid |unknown.0:0| :skolemid |938| :pattern ( (GenericMarshalling.G.GUint32_q d@@10)) )))
(assert (forall ((d@@11 T@U) ) (!  (=> (and (= (type d@@11) DatatypeTypeType) (GenericMarshalling.G.GUint32_q d@@11)) (= d@@11 |#GenericMarshalling.G.GUint32|)) :qid |unknown.0:0| :skolemid |939| :pattern ( (GenericMarshalling.G.GUint32_q d@@11)) )))
(assert (= (type Tclass.GenericMarshalling.G) TyType))
(assert (= (Tag Tclass.GenericMarshalling.G) Tagclass.GenericMarshalling.G))
(assert (forall ((bx@@77 T@U) ) (!  (=> (and (= (type bx@@77) BoxType) ($IsBox bx@@77 Tclass.GenericMarshalling.G)) (and (= ($Box ($Unbox DatatypeTypeType bx@@77)) bx@@77) ($Is ($Unbox DatatypeTypeType bx@@77) Tclass.GenericMarshalling.G))) :qid |unknown.0:0| :skolemid |940| :pattern ( ($IsBox bx@@77 Tclass.GenericMarshalling.G)) )))
(assert ($Is |#GenericMarshalling.G.GUint32| Tclass.GenericMarshalling.G))
(assert (forall (($h@@22 T@U) ) (!  (=> (and (= (type $h@@22) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@22)) ($IsAlloc |#GenericMarshalling.G.GUint32| Tclass.GenericMarshalling.G $h@@22)) :qid |DafnyPre.521:12| :skolemid |941| :pattern ( ($IsAlloc |#GenericMarshalling.G.GUint32| Tclass.GenericMarshalling.G $h@@22)) )))
(assert (= |#GenericMarshalling.G.GUint32| (Lit |#GenericMarshalling.G.GUint32|)))
(assert (= (type |#GenericMarshalling.G.GUint64|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#GenericMarshalling.G.GUint64|) |##GenericMarshalling.G.GUint64|))
(assert (forall ((d@@12 T@U) ) (!  (=> (= (type d@@12) DatatypeTypeType) (and (=> (GenericMarshalling.G.GUint64_q d@@12) (= (DatatypeCtorId d@@12) |##GenericMarshalling.G.GUint64|)) (=> (= (DatatypeCtorId d@@12) |##GenericMarshalling.G.GUint64|) (GenericMarshalling.G.GUint64_q d@@12)))) :qid |unknown.0:0| :skolemid |942| :pattern ( (GenericMarshalling.G.GUint64_q d@@12)) )))
(assert (forall ((d@@13 T@U) ) (!  (=> (and (= (type d@@13) DatatypeTypeType) (GenericMarshalling.G.GUint64_q d@@13)) (= d@@13 |#GenericMarshalling.G.GUint64|)) :qid |unknown.0:0| :skolemid |943| :pattern ( (GenericMarshalling.G.GUint64_q d@@13)) )))
(assert ($Is |#GenericMarshalling.G.GUint64| Tclass.GenericMarshalling.G))
(assert (forall (($h@@23 T@U) ) (!  (=> (and (= (type $h@@23) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@23)) ($IsAlloc |#GenericMarshalling.G.GUint64| Tclass.GenericMarshalling.G $h@@23)) :qid |DafnyPre.521:12| :skolemid |944| :pattern ( ($IsAlloc |#GenericMarshalling.G.GUint64| Tclass.GenericMarshalling.G $h@@23)) )))
(assert (= |#GenericMarshalling.G.GUint64| (Lit |#GenericMarshalling.G.GUint64|)))
(assert (forall ((arg0@@217 T@U) ) (! (= (type (|#GenericMarshalling.G.GArray| arg0@@217)) DatatypeTypeType) :qid |funType:#GenericMarshalling.G.GArray| :pattern ( (|#GenericMarshalling.G.GArray| arg0@@217)) )))
(assert (forall ((|a#24#0#0| T@U) ) (!  (=> (= (type |a#24#0#0|) DatatypeTypeType) (= (DatatypeCtorId (|#GenericMarshalling.G.GArray| |a#24#0#0|)) |##GenericMarshalling.G.GArray|)) :qid |GenericM.36:21| :skolemid |945| :pattern ( (|#GenericMarshalling.G.GArray| |a#24#0#0|)) )))
(assert (forall ((d@@14 T@U) ) (!  (=> (= (type d@@14) DatatypeTypeType) (and (=> (GenericMarshalling.G.GArray_q d@@14) (= (DatatypeCtorId d@@14) |##GenericMarshalling.G.GArray|)) (=> (= (DatatypeCtorId d@@14) |##GenericMarshalling.G.GArray|) (GenericMarshalling.G.GArray_q d@@14)))) :qid |unknown.0:0| :skolemid |946| :pattern ( (GenericMarshalling.G.GArray_q d@@14)) )))
(assert (forall ((d@@15 T@U) ) (!  (=> (and (= (type d@@15) DatatypeTypeType) (GenericMarshalling.G.GArray_q d@@15)) (exists ((|a#25#0#0| T@U) ) (!  (and (= (type |a#25#0#0|) DatatypeTypeType) (= d@@15 (|#GenericMarshalling.G.GArray| |a#25#0#0|))) :qid |GenericM.36:21| :skolemid |947| :no-pattern (type |a#25#0#0|) :no-pattern (U_2_int |a#25#0#0|) :no-pattern (U_2_bool |a#25#0#0|) ))) :qid |unknown.0:0| :skolemid |948| :pattern ( (GenericMarshalling.G.GArray_q d@@15)) )))
(assert (forall ((|a#26#0#0| T@U) ) (!  (=> (= (type |a#26#0#0|) DatatypeTypeType) (and (=> ($Is (|#GenericMarshalling.G.GArray| |a#26#0#0|) Tclass.GenericMarshalling.G) ($Is |a#26#0#0| Tclass.GenericMarshalling.G)) (=> ($Is |a#26#0#0| Tclass.GenericMarshalling.G) ($Is (|#GenericMarshalling.G.GArray| |a#26#0#0|) Tclass.GenericMarshalling.G)))) :qid |GenericM.36:21| :skolemid |949| :pattern ( ($Is (|#GenericMarshalling.G.GArray| |a#26#0#0|) Tclass.GenericMarshalling.G)) )))
(assert (forall ((|a#27#0#0| T@U) ($h@@24 T@U) ) (!  (=> (and (and (= (type |a#27#0#0|) DatatypeTypeType) (= (type $h@@24) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@24)) (and (=> ($IsAlloc (|#GenericMarshalling.G.GArray| |a#27#0#0|) Tclass.GenericMarshalling.G $h@@24) ($IsAlloc |a#27#0#0| Tclass.GenericMarshalling.G $h@@24)) (=> ($IsAlloc |a#27#0#0| Tclass.GenericMarshalling.G $h@@24) ($IsAlloc (|#GenericMarshalling.G.GArray| |a#27#0#0|) Tclass.GenericMarshalling.G $h@@24)))) :qid |GenericM.36:21| :skolemid |950| :pattern ( ($IsAlloc (|#GenericMarshalling.G.GArray| |a#27#0#0|) Tclass.GenericMarshalling.G $h@@24)) )))
(assert (forall ((arg0@@218 T@U) ) (! (= (type (GenericMarshalling.G.elt arg0@@218)) DatatypeTypeType) :qid |funType:GenericMarshalling.G.elt| :pattern ( (GenericMarshalling.G.elt arg0@@218)) )))
(assert (forall ((d@@16 T@U) ($h@@25 T@U) ) (!  (=> (and (and (= (type d@@16) DatatypeTypeType) (= (type $h@@25) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@25) (and (GenericMarshalling.G.GArray_q d@@16) ($IsAlloc d@@16 Tclass.GenericMarshalling.G $h@@25)))) ($IsAlloc (GenericMarshalling.G.elt d@@16) Tclass.GenericMarshalling.G $h@@25)) :qid |unknown.0:0| :skolemid |951| :pattern ( ($IsAlloc (GenericMarshalling.G.elt d@@16) Tclass.GenericMarshalling.G $h@@25)) )))
(assert (forall ((|a#28#0#0| T@U) ) (!  (=> (= (type |a#28#0#0|) DatatypeTypeType) (= (|#GenericMarshalling.G.GArray| (Lit |a#28#0#0|)) (Lit (|#GenericMarshalling.G.GArray| |a#28#0#0|)))) :qid |GenericM.36:21| :skolemid |952| :pattern ( (|#GenericMarshalling.G.GArray| (Lit |a#28#0#0|))) )))
(assert (forall ((|a#29#0#0| T@U) ) (!  (=> (= (type |a#29#0#0|) DatatypeTypeType) (= (GenericMarshalling.G.elt (|#GenericMarshalling.G.GArray| |a#29#0#0|)) |a#29#0#0|)) :qid |GenericM.36:21| :skolemid |953| :pattern ( (|#GenericMarshalling.G.GArray| |a#29#0#0|)) )))
(assert (forall ((|a#30#0#0| T@U) ) (!  (=> (= (type |a#30#0#0|) DatatypeTypeType) (< (DtRank |a#30#0#0|) (DtRank (|#GenericMarshalling.G.GArray| |a#30#0#0|)))) :qid |GenericM.36:21| :skolemid |954| :pattern ( (|#GenericMarshalling.G.GArray| |a#30#0#0|)) )))
(assert (forall ((arg0@@219 T@U) ) (! (= (type (|#GenericMarshalling.G.GTuple| arg0@@219)) DatatypeTypeType) :qid |funType:#GenericMarshalling.G.GTuple| :pattern ( (|#GenericMarshalling.G.GTuple| arg0@@219)) )))
(assert (forall ((|a#31#0#0| T@U) ) (!  (=> (= (type |a#31#0#0|) (SeqType BoxType)) (= (DatatypeCtorId (|#GenericMarshalling.G.GTuple| |a#31#0#0|)) |##GenericMarshalling.G.GTuple|)) :qid |GenericM.37:21| :skolemid |955| :pattern ( (|#GenericMarshalling.G.GTuple| |a#31#0#0|)) )))
(assert (forall ((d@@17 T@U) ) (!  (=> (= (type d@@17) DatatypeTypeType) (and (=> (GenericMarshalling.G.GTuple_q d@@17) (= (DatatypeCtorId d@@17) |##GenericMarshalling.G.GTuple|)) (=> (= (DatatypeCtorId d@@17) |##GenericMarshalling.G.GTuple|) (GenericMarshalling.G.GTuple_q d@@17)))) :qid |unknown.0:0| :skolemid |956| :pattern ( (GenericMarshalling.G.GTuple_q d@@17)) )))
(assert (forall ((d@@18 T@U) ) (!  (=> (and (= (type d@@18) DatatypeTypeType) (GenericMarshalling.G.GTuple_q d@@18)) (exists ((|a#32#0#0| T@U) ) (!  (and (= (type |a#32#0#0|) (SeqType BoxType)) (= d@@18 (|#GenericMarshalling.G.GTuple| |a#32#0#0|))) :qid |GenericM.37:21| :skolemid |957| :no-pattern (type |a#32#0#0|) :no-pattern (U_2_int |a#32#0#0|) :no-pattern (U_2_bool |a#32#0#0|) ))) :qid |unknown.0:0| :skolemid |958| :pattern ( (GenericMarshalling.G.GTuple_q d@@18)) )))
(assert (forall ((|a#33#0#0| T@U) ) (!  (=> (= (type |a#33#0#0|) (SeqType BoxType)) (and (=> ($Is (|#GenericMarshalling.G.GTuple| |a#33#0#0|) Tclass.GenericMarshalling.G) ($Is |a#33#0#0| (TSeq Tclass.GenericMarshalling.G))) (=> ($Is |a#33#0#0| (TSeq Tclass.GenericMarshalling.G)) ($Is (|#GenericMarshalling.G.GTuple| |a#33#0#0|) Tclass.GenericMarshalling.G)))) :qid |GenericM.37:21| :skolemid |959| :pattern ( ($Is (|#GenericMarshalling.G.GTuple| |a#33#0#0|) Tclass.GenericMarshalling.G)) )))
(assert (forall ((|a#34#0#0| T@U) ($h@@26 T@U) ) (!  (=> (and (and (= (type |a#34#0#0|) (SeqType BoxType)) (= (type $h@@26) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@26)) (and (=> ($IsAlloc (|#GenericMarshalling.G.GTuple| |a#34#0#0|) Tclass.GenericMarshalling.G $h@@26) ($IsAlloc |a#34#0#0| (TSeq Tclass.GenericMarshalling.G) $h@@26)) (=> ($IsAlloc |a#34#0#0| (TSeq Tclass.GenericMarshalling.G) $h@@26) ($IsAlloc (|#GenericMarshalling.G.GTuple| |a#34#0#0|) Tclass.GenericMarshalling.G $h@@26)))) :qid |GenericM.37:21| :skolemid |960| :pattern ( ($IsAlloc (|#GenericMarshalling.G.GTuple| |a#34#0#0|) Tclass.GenericMarshalling.G $h@@26)) )))
(assert (forall ((arg0@@220 T@U) ) (! (= (type (GenericMarshalling.G.t arg0@@220)) (SeqType BoxType)) :qid |funType:GenericMarshalling.G.t| :pattern ( (GenericMarshalling.G.t arg0@@220)) )))
(assert (forall ((d@@19 T@U) ($h@@27 T@U) ) (!  (=> (and (and (= (type d@@19) DatatypeTypeType) (= (type $h@@27) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@27) (and (GenericMarshalling.G.GTuple_q d@@19) ($IsAlloc d@@19 Tclass.GenericMarshalling.G $h@@27)))) ($IsAlloc (GenericMarshalling.G.t d@@19) (TSeq Tclass.GenericMarshalling.G) $h@@27)) :qid |unknown.0:0| :skolemid |961| :pattern ( ($IsAlloc (GenericMarshalling.G.t d@@19) (TSeq Tclass.GenericMarshalling.G) $h@@27)) )))
(assert (forall ((|a#35#0#0| T@U) ) (!  (=> (= (type |a#35#0#0|) (SeqType BoxType)) (= (|#GenericMarshalling.G.GTuple| (Lit |a#35#0#0|)) (Lit (|#GenericMarshalling.G.GTuple| |a#35#0#0|)))) :qid |GenericM.37:21| :skolemid |962| :pattern ( (|#GenericMarshalling.G.GTuple| (Lit |a#35#0#0|))) )))
(assert (forall ((|a#36#0#0| T@U) ) (!  (=> (= (type |a#36#0#0|) (SeqType BoxType)) (= (GenericMarshalling.G.t (|#GenericMarshalling.G.GTuple| |a#36#0#0|)) |a#36#0#0|)) :qid |GenericM.37:21| :skolemid |963| :pattern ( (|#GenericMarshalling.G.GTuple| |a#36#0#0|)) )))
(assert (forall ((|a#37#0#0| T@U) (i@@31 Int) ) (!  (=> (= (type |a#37#0#0|) (SeqType BoxType)) (=> (and (<= 0 i@@31) (< i@@31 (|Seq#Length| |a#37#0#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#37#0#0| i@@31))) (DtRank (|#GenericMarshalling.G.GTuple| |a#37#0#0|))))) :qid |GenericM.37:21| :skolemid |964| :pattern ( (|Seq#Index| |a#37#0#0| i@@31) (|#GenericMarshalling.G.GTuple| |a#37#0#0|)) )))
(assert (forall ((|a#38#0#0| T@U) ) (!  (=> (= (type |a#38#0#0|) (SeqType BoxType)) (< (|Seq#Rank| |a#38#0#0|) (DtRank (|#GenericMarshalling.G.GTuple| |a#38#0#0|)))) :qid |GenericM.37:21| :skolemid |965| :pattern ( (|#GenericMarshalling.G.GTuple| |a#38#0#0|)) )))
(assert (= (type |#GenericMarshalling.G.GByteArray|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#GenericMarshalling.G.GByteArray|) |##GenericMarshalling.G.GByteArray|))
(assert (forall ((d@@20 T@U) ) (!  (=> (= (type d@@20) DatatypeTypeType) (and (=> (GenericMarshalling.G.GByteArray_q d@@20) (= (DatatypeCtorId d@@20) |##GenericMarshalling.G.GByteArray|)) (=> (= (DatatypeCtorId d@@20) |##GenericMarshalling.G.GByteArray|) (GenericMarshalling.G.GByteArray_q d@@20)))) :qid |unknown.0:0| :skolemid |966| :pattern ( (GenericMarshalling.G.GByteArray_q d@@20)) )))
(assert (forall ((d@@21 T@U) ) (!  (=> (and (= (type d@@21) DatatypeTypeType) (GenericMarshalling.G.GByteArray_q d@@21)) (= d@@21 |#GenericMarshalling.G.GByteArray|)) :qid |unknown.0:0| :skolemid |967| :pattern ( (GenericMarshalling.G.GByteArray_q d@@21)) )))
(assert ($Is |#GenericMarshalling.G.GByteArray| Tclass.GenericMarshalling.G))
(assert (forall (($h@@28 T@U) ) (!  (=> (and (= (type $h@@28) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@28)) ($IsAlloc |#GenericMarshalling.G.GByteArray| Tclass.GenericMarshalling.G $h@@28)) :qid |DafnyPre.521:12| :skolemid |968| :pattern ( ($IsAlloc |#GenericMarshalling.G.GByteArray| Tclass.GenericMarshalling.G $h@@28)) )))
(assert (= |#GenericMarshalling.G.GByteArray| (Lit |#GenericMarshalling.G.GByteArray|)))
(assert (= (type |#GenericMarshalling.G.GUint32Array|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#GenericMarshalling.G.GUint32Array|) |##GenericMarshalling.G.GUint32Array|))
(assert (forall ((d@@22 T@U) ) (!  (=> (= (type d@@22) DatatypeTypeType) (and (=> (GenericMarshalling.G.GUint32Array_q d@@22) (= (DatatypeCtorId d@@22) |##GenericMarshalling.G.GUint32Array|)) (=> (= (DatatypeCtorId d@@22) |##GenericMarshalling.G.GUint32Array|) (GenericMarshalling.G.GUint32Array_q d@@22)))) :qid |unknown.0:0| :skolemid |969| :pattern ( (GenericMarshalling.G.GUint32Array_q d@@22)) )))
(assert (forall ((d@@23 T@U) ) (!  (=> (and (= (type d@@23) DatatypeTypeType) (GenericMarshalling.G.GUint32Array_q d@@23)) (= d@@23 |#GenericMarshalling.G.GUint32Array|)) :qid |unknown.0:0| :skolemid |970| :pattern ( (GenericMarshalling.G.GUint32Array_q d@@23)) )))
(assert ($Is |#GenericMarshalling.G.GUint32Array| Tclass.GenericMarshalling.G))
(assert (forall (($h@@29 T@U) ) (!  (=> (and (= (type $h@@29) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@29)) ($IsAlloc |#GenericMarshalling.G.GUint32Array| Tclass.GenericMarshalling.G $h@@29)) :qid |DafnyPre.521:12| :skolemid |971| :pattern ( ($IsAlloc |#GenericMarshalling.G.GUint32Array| Tclass.GenericMarshalling.G $h@@29)) )))
(assert (= |#GenericMarshalling.G.GUint32Array| (Lit |#GenericMarshalling.G.GUint32Array|)))
(assert (= (type |#GenericMarshalling.G.GUint64Array|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#GenericMarshalling.G.GUint64Array|) |##GenericMarshalling.G.GUint64Array|))
(assert (forall ((d@@24 T@U) ) (!  (=> (= (type d@@24) DatatypeTypeType) (and (=> (GenericMarshalling.G.GUint64Array_q d@@24) (= (DatatypeCtorId d@@24) |##GenericMarshalling.G.GUint64Array|)) (=> (= (DatatypeCtorId d@@24) |##GenericMarshalling.G.GUint64Array|) (GenericMarshalling.G.GUint64Array_q d@@24)))) :qid |unknown.0:0| :skolemid |972| :pattern ( (GenericMarshalling.G.GUint64Array_q d@@24)) )))
(assert (forall ((d@@25 T@U) ) (!  (=> (and (= (type d@@25) DatatypeTypeType) (GenericMarshalling.G.GUint64Array_q d@@25)) (= d@@25 |#GenericMarshalling.G.GUint64Array|)) :qid |unknown.0:0| :skolemid |973| :pattern ( (GenericMarshalling.G.GUint64Array_q d@@25)) )))
(assert ($Is |#GenericMarshalling.G.GUint64Array| Tclass.GenericMarshalling.G))
(assert (forall (($h@@30 T@U) ) (!  (=> (and (= (type $h@@30) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@30)) ($IsAlloc |#GenericMarshalling.G.GUint64Array| Tclass.GenericMarshalling.G $h@@30)) :qid |DafnyPre.521:12| :skolemid |974| :pattern ( ($IsAlloc |#GenericMarshalling.G.GUint64Array| Tclass.GenericMarshalling.G $h@@30)) )))
(assert (= |#GenericMarshalling.G.GUint64Array| (Lit |#GenericMarshalling.G.GUint64Array|)))
(assert (forall ((arg0@@221 T@U) ) (! (= (type (|#GenericMarshalling.G.GTaggedUnion| arg0@@221)) DatatypeTypeType) :qid |funType:#GenericMarshalling.G.GTaggedUnion| :pattern ( (|#GenericMarshalling.G.GTaggedUnion| arg0@@221)) )))
(assert (forall ((|a#54#0#0| T@U) ) (!  (=> (= (type |a#54#0#0|) (SeqType BoxType)) (= (DatatypeCtorId (|#GenericMarshalling.G.GTaggedUnion| |a#54#0#0|)) |##GenericMarshalling.G.GTaggedUnion|)) :qid |GenericM.41:27| :skolemid |975| :pattern ( (|#GenericMarshalling.G.GTaggedUnion| |a#54#0#0|)) )))
(assert (forall ((d@@26 T@U) ) (!  (=> (= (type d@@26) DatatypeTypeType) (and (=> (GenericMarshalling.G.GTaggedUnion_q d@@26) (= (DatatypeCtorId d@@26) |##GenericMarshalling.G.GTaggedUnion|)) (=> (= (DatatypeCtorId d@@26) |##GenericMarshalling.G.GTaggedUnion|) (GenericMarshalling.G.GTaggedUnion_q d@@26)))) :qid |unknown.0:0| :skolemid |976| :pattern ( (GenericMarshalling.G.GTaggedUnion_q d@@26)) )))
(assert (forall ((d@@27 T@U) ) (!  (=> (and (= (type d@@27) DatatypeTypeType) (GenericMarshalling.G.GTaggedUnion_q d@@27)) (exists ((|a#55#0#0| T@U) ) (!  (and (= (type |a#55#0#0|) (SeqType BoxType)) (= d@@27 (|#GenericMarshalling.G.GTaggedUnion| |a#55#0#0|))) :qid |GenericM.41:27| :skolemid |977| :no-pattern (type |a#55#0#0|) :no-pattern (U_2_int |a#55#0#0|) :no-pattern (U_2_bool |a#55#0#0|) ))) :qid |unknown.0:0| :skolemid |978| :pattern ( (GenericMarshalling.G.GTaggedUnion_q d@@27)) )))
(assert (forall ((|a#56#0#0| T@U) ) (!  (=> (= (type |a#56#0#0|) (SeqType BoxType)) (and (=> ($Is (|#GenericMarshalling.G.GTaggedUnion| |a#56#0#0|) Tclass.GenericMarshalling.G) ($Is |a#56#0#0| (TSeq Tclass.GenericMarshalling.G))) (=> ($Is |a#56#0#0| (TSeq Tclass.GenericMarshalling.G)) ($Is (|#GenericMarshalling.G.GTaggedUnion| |a#56#0#0|) Tclass.GenericMarshalling.G)))) :qid |GenericM.41:27| :skolemid |979| :pattern ( ($Is (|#GenericMarshalling.G.GTaggedUnion| |a#56#0#0|) Tclass.GenericMarshalling.G)) )))
(assert (forall ((|a#57#0#0| T@U) ($h@@31 T@U) ) (!  (=> (and (and (= (type |a#57#0#0|) (SeqType BoxType)) (= (type $h@@31) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@31)) (and (=> ($IsAlloc (|#GenericMarshalling.G.GTaggedUnion| |a#57#0#0|) Tclass.GenericMarshalling.G $h@@31) ($IsAlloc |a#57#0#0| (TSeq Tclass.GenericMarshalling.G) $h@@31)) (=> ($IsAlloc |a#57#0#0| (TSeq Tclass.GenericMarshalling.G) $h@@31) ($IsAlloc (|#GenericMarshalling.G.GTaggedUnion| |a#57#0#0|) Tclass.GenericMarshalling.G $h@@31)))) :qid |GenericM.41:27| :skolemid |980| :pattern ( ($IsAlloc (|#GenericMarshalling.G.GTaggedUnion| |a#57#0#0|) Tclass.GenericMarshalling.G $h@@31)) )))
(assert (forall ((arg0@@222 T@U) ) (! (= (type (GenericMarshalling.G.cases arg0@@222)) (SeqType BoxType)) :qid |funType:GenericMarshalling.G.cases| :pattern ( (GenericMarshalling.G.cases arg0@@222)) )))
(assert (forall ((d@@28 T@U) ($h@@32 T@U) ) (!  (=> (and (and (= (type d@@28) DatatypeTypeType) (= (type $h@@32) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@32) (and (GenericMarshalling.G.GTaggedUnion_q d@@28) ($IsAlloc d@@28 Tclass.GenericMarshalling.G $h@@32)))) ($IsAlloc (GenericMarshalling.G.cases d@@28) (TSeq Tclass.GenericMarshalling.G) $h@@32)) :qid |unknown.0:0| :skolemid |981| :pattern ( ($IsAlloc (GenericMarshalling.G.cases d@@28) (TSeq Tclass.GenericMarshalling.G) $h@@32)) )))
(assert (forall ((|a#58#0#0| T@U) ) (!  (=> (= (type |a#58#0#0|) (SeqType BoxType)) (= (|#GenericMarshalling.G.GTaggedUnion| (Lit |a#58#0#0|)) (Lit (|#GenericMarshalling.G.GTaggedUnion| |a#58#0#0|)))) :qid |GenericM.41:27| :skolemid |982| :pattern ( (|#GenericMarshalling.G.GTaggedUnion| (Lit |a#58#0#0|))) )))
(assert (forall ((|a#59#0#0| T@U) ) (!  (=> (= (type |a#59#0#0|) (SeqType BoxType)) (= (GenericMarshalling.G.cases (|#GenericMarshalling.G.GTaggedUnion| |a#59#0#0|)) |a#59#0#0|)) :qid |GenericM.41:27| :skolemid |983| :pattern ( (|#GenericMarshalling.G.GTaggedUnion| |a#59#0#0|)) )))
(assert (forall ((|a#60#0#0| T@U) (i@@32 Int) ) (!  (=> (= (type |a#60#0#0|) (SeqType BoxType)) (=> (and (<= 0 i@@32) (< i@@32 (|Seq#Length| |a#60#0#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#60#0#0| i@@32))) (DtRank (|#GenericMarshalling.G.GTaggedUnion| |a#60#0#0|))))) :qid |GenericM.41:27| :skolemid |984| :pattern ( (|Seq#Index| |a#60#0#0| i@@32) (|#GenericMarshalling.G.GTaggedUnion| |a#60#0#0|)) )))
(assert (forall ((|a#61#0#0| T@U) ) (!  (=> (= (type |a#61#0#0|) (SeqType BoxType)) (< (|Seq#Rank| |a#61#0#0|) (DtRank (|#GenericMarshalling.G.GTaggedUnion| |a#61#0#0|)))) :qid |GenericM.41:27| :skolemid |985| :pattern ( (|#GenericMarshalling.G.GTaggedUnion| |a#61#0#0|)) )))
(assert (forall ((d@@29 T@U) ) (!  (=> (and (= (type d@@29) DatatypeTypeType) (|$IsA#GenericMarshalling.G| d@@29)) (or (or (or (or (or (or (or (GenericMarshalling.G.GUint32_q d@@29) (GenericMarshalling.G.GUint64_q d@@29)) (GenericMarshalling.G.GArray_q d@@29)) (GenericMarshalling.G.GTuple_q d@@29)) (GenericMarshalling.G.GByteArray_q d@@29)) (GenericMarshalling.G.GUint32Array_q d@@29)) (GenericMarshalling.G.GUint64Array_q d@@29)) (GenericMarshalling.G.GTaggedUnion_q d@@29))) :qid |unknown.0:0| :skolemid |986| :pattern ( (|$IsA#GenericMarshalling.G| d@@29)) )))
(assert (forall ((d@@30 T@U) ) (!  (=> (and (= (type d@@30) DatatypeTypeType) ($Is d@@30 Tclass.GenericMarshalling.G)) (or (or (or (or (or (or (or (GenericMarshalling.G.GUint32_q d@@30) (GenericMarshalling.G.GUint64_q d@@30)) (GenericMarshalling.G.GArray_q d@@30)) (GenericMarshalling.G.GTuple_q d@@30)) (GenericMarshalling.G.GByteArray_q d@@30)) (GenericMarshalling.G.GUint32Array_q d@@30)) (GenericMarshalling.G.GUint64Array_q d@@30)) (GenericMarshalling.G.GTaggedUnion_q d@@30))) :qid |unknown.0:0| :skolemid |987| :pattern ( (GenericMarshalling.G.GTaggedUnion_q d@@30) ($Is d@@30 Tclass.GenericMarshalling.G)) :pattern ( (GenericMarshalling.G.GUint64Array_q d@@30) ($Is d@@30 Tclass.GenericMarshalling.G)) :pattern ( (GenericMarshalling.G.GUint32Array_q d@@30) ($Is d@@30 Tclass.GenericMarshalling.G)) :pattern ( (GenericMarshalling.G.GByteArray_q d@@30) ($Is d@@30 Tclass.GenericMarshalling.G)) :pattern ( (GenericMarshalling.G.GTuple_q d@@30) ($Is d@@30 Tclass.GenericMarshalling.G)) :pattern ( (GenericMarshalling.G.GArray_q d@@30) ($Is d@@30 Tclass.GenericMarshalling.G)) :pattern ( (GenericMarshalling.G.GUint64_q d@@30) ($Is d@@30 Tclass.GenericMarshalling.G)) :pattern ( (GenericMarshalling.G.GUint32_q d@@30) ($Is d@@30 Tclass.GenericMarshalling.G)) )))
(assert (forall ((a@@116 T@U) (b@@65 T@U) ) (!  (=> (and (and (= (type a@@116) DatatypeTypeType) (= (type b@@65) DatatypeTypeType)) (and (GenericMarshalling.G.GUint32_q a@@116) (GenericMarshalling.G.GUint32_q b@@65))) (and (=> (|GenericMarshalling.G#Equal| a@@116 b@@65) true) (=> true (|GenericMarshalling.G#Equal| a@@116 b@@65)))) :qid |unknown.0:0| :skolemid |988| :pattern ( (|GenericMarshalling.G#Equal| a@@116 b@@65) (GenericMarshalling.G.GUint32_q a@@116)) :pattern ( (|GenericMarshalling.G#Equal| a@@116 b@@65) (GenericMarshalling.G.GUint32_q b@@65)) )))
(assert (forall ((a@@117 T@U) (b@@66 T@U) ) (!  (=> (and (and (= (type a@@117) DatatypeTypeType) (= (type b@@66) DatatypeTypeType)) (and (GenericMarshalling.G.GUint64_q a@@117) (GenericMarshalling.G.GUint64_q b@@66))) (and (=> (|GenericMarshalling.G#Equal| a@@117 b@@66) true) (=> true (|GenericMarshalling.G#Equal| a@@117 b@@66)))) :qid |unknown.0:0| :skolemid |989| :pattern ( (|GenericMarshalling.G#Equal| a@@117 b@@66) (GenericMarshalling.G.GUint64_q a@@117)) :pattern ( (|GenericMarshalling.G#Equal| a@@117 b@@66) (GenericMarshalling.G.GUint64_q b@@66)) )))
(assert (forall ((a@@118 T@U) (b@@67 T@U) ) (!  (=> (and (and (= (type a@@118) DatatypeTypeType) (= (type b@@67) DatatypeTypeType)) (and (GenericMarshalling.G.GArray_q a@@118) (GenericMarshalling.G.GArray_q b@@67))) (and (=> (|GenericMarshalling.G#Equal| a@@118 b@@67) (|GenericMarshalling.G#Equal| (GenericMarshalling.G.elt a@@118) (GenericMarshalling.G.elt b@@67))) (=> (|GenericMarshalling.G#Equal| (GenericMarshalling.G.elt a@@118) (GenericMarshalling.G.elt b@@67)) (|GenericMarshalling.G#Equal| a@@118 b@@67)))) :qid |unknown.0:0| :skolemid |990| :pattern ( (|GenericMarshalling.G#Equal| a@@118 b@@67) (GenericMarshalling.G.GArray_q a@@118)) :pattern ( (|GenericMarshalling.G#Equal| a@@118 b@@67) (GenericMarshalling.G.GArray_q b@@67)) )))
(assert (forall ((a@@119 T@U) (b@@68 T@U) ) (!  (=> (and (and (= (type a@@119) DatatypeTypeType) (= (type b@@68) DatatypeTypeType)) (and (GenericMarshalling.G.GTuple_q a@@119) (GenericMarshalling.G.GTuple_q b@@68))) (and (=> (|GenericMarshalling.G#Equal| a@@119 b@@68) (|Seq#Equal| (GenericMarshalling.G.t a@@119) (GenericMarshalling.G.t b@@68))) (=> (|Seq#Equal| (GenericMarshalling.G.t a@@119) (GenericMarshalling.G.t b@@68)) (|GenericMarshalling.G#Equal| a@@119 b@@68)))) :qid |unknown.0:0| :skolemid |991| :pattern ( (|GenericMarshalling.G#Equal| a@@119 b@@68) (GenericMarshalling.G.GTuple_q a@@119)) :pattern ( (|GenericMarshalling.G#Equal| a@@119 b@@68) (GenericMarshalling.G.GTuple_q b@@68)) )))
(assert (forall ((a@@120 T@U) (b@@69 T@U) ) (!  (=> (and (and (= (type a@@120) DatatypeTypeType) (= (type b@@69) DatatypeTypeType)) (and (GenericMarshalling.G.GByteArray_q a@@120) (GenericMarshalling.G.GByteArray_q b@@69))) (and (=> (|GenericMarshalling.G#Equal| a@@120 b@@69) true) (=> true (|GenericMarshalling.G#Equal| a@@120 b@@69)))) :qid |unknown.0:0| :skolemid |992| :pattern ( (|GenericMarshalling.G#Equal| a@@120 b@@69) (GenericMarshalling.G.GByteArray_q a@@120)) :pattern ( (|GenericMarshalling.G#Equal| a@@120 b@@69) (GenericMarshalling.G.GByteArray_q b@@69)) )))
(assert (forall ((a@@121 T@U) (b@@70 T@U) ) (!  (=> (and (and (= (type a@@121) DatatypeTypeType) (= (type b@@70) DatatypeTypeType)) (and (GenericMarshalling.G.GUint32Array_q a@@121) (GenericMarshalling.G.GUint32Array_q b@@70))) (and (=> (|GenericMarshalling.G#Equal| a@@121 b@@70) true) (=> true (|GenericMarshalling.G#Equal| a@@121 b@@70)))) :qid |unknown.0:0| :skolemid |993| :pattern ( (|GenericMarshalling.G#Equal| a@@121 b@@70) (GenericMarshalling.G.GUint32Array_q a@@121)) :pattern ( (|GenericMarshalling.G#Equal| a@@121 b@@70) (GenericMarshalling.G.GUint32Array_q b@@70)) )))
(assert (forall ((a@@122 T@U) (b@@71 T@U) ) (!  (=> (and (and (= (type a@@122) DatatypeTypeType) (= (type b@@71) DatatypeTypeType)) (and (GenericMarshalling.G.GUint64Array_q a@@122) (GenericMarshalling.G.GUint64Array_q b@@71))) (and (=> (|GenericMarshalling.G#Equal| a@@122 b@@71) true) (=> true (|GenericMarshalling.G#Equal| a@@122 b@@71)))) :qid |unknown.0:0| :skolemid |994| :pattern ( (|GenericMarshalling.G#Equal| a@@122 b@@71) (GenericMarshalling.G.GUint64Array_q a@@122)) :pattern ( (|GenericMarshalling.G#Equal| a@@122 b@@71) (GenericMarshalling.G.GUint64Array_q b@@71)) )))
(assert (forall ((a@@123 T@U) (b@@72 T@U) ) (!  (=> (and (and (= (type a@@123) DatatypeTypeType) (= (type b@@72) DatatypeTypeType)) (and (GenericMarshalling.G.GTaggedUnion_q a@@123) (GenericMarshalling.G.GTaggedUnion_q b@@72))) (and (=> (|GenericMarshalling.G#Equal| a@@123 b@@72) (|Seq#Equal| (GenericMarshalling.G.cases a@@123) (GenericMarshalling.G.cases b@@72))) (=> (|Seq#Equal| (GenericMarshalling.G.cases a@@123) (GenericMarshalling.G.cases b@@72)) (|GenericMarshalling.G#Equal| a@@123 b@@72)))) :qid |unknown.0:0| :skolemid |995| :pattern ( (|GenericMarshalling.G#Equal| a@@123 b@@72) (GenericMarshalling.G.GTaggedUnion_q a@@123)) :pattern ( (|GenericMarshalling.G#Equal| a@@123 b@@72) (GenericMarshalling.G.GTaggedUnion_q b@@72)) )))
(assert (forall ((a@@124 T@U) (b@@73 T@U) ) (!  (=> (and (= (type a@@124) DatatypeTypeType) (= (type b@@73) DatatypeTypeType)) (and (=> (|GenericMarshalling.G#Equal| a@@124 b@@73) (= a@@124 b@@73)) (=> (= a@@124 b@@73) (|GenericMarshalling.G#Equal| a@@124 b@@73)))) :qid |unknown.0:0| :skolemid |996| :pattern ( (|GenericMarshalling.G#Equal| a@@124 b@@73)) )))
(assert (forall ((arg0@@223 Int) ) (! (= (type (|#GenericMarshalling.V.VUint32| arg0@@223)) DatatypeTypeType) :qid |funType:#GenericMarshalling.V.VUint32| :pattern ( (|#GenericMarshalling.V.VUint32| arg0@@223)) )))
(assert (forall ((|a#62#0#0| Int) ) (! (= (DatatypeCtorId (|#GenericMarshalling.V.VUint32| |a#62#0#0|)) |##GenericMarshalling.V.VUint32|) :qid |GenericM.43:22| :skolemid |997| :pattern ( (|#GenericMarshalling.V.VUint32| |a#62#0#0|)) )))
(assert (forall ((d@@31 T@U) ) (!  (=> (= (type d@@31) DatatypeTypeType) (and (=> (GenericMarshalling.V.VUint32_q d@@31) (= (DatatypeCtorId d@@31) |##GenericMarshalling.V.VUint32|)) (=> (= (DatatypeCtorId d@@31) |##GenericMarshalling.V.VUint32|) (GenericMarshalling.V.VUint32_q d@@31)))) :qid |unknown.0:0| :skolemid |998| :pattern ( (GenericMarshalling.V.VUint32_q d@@31)) )))
(assert (forall ((d@@32 T@U) ) (!  (=> (and (= (type d@@32) DatatypeTypeType) (GenericMarshalling.V.VUint32_q d@@32)) (exists ((|a#63#0#0| Int) ) (! (= d@@32 (|#GenericMarshalling.V.VUint32| |a#63#0#0|)) :qid |GenericM.43:22| :skolemid |999| ))) :qid |unknown.0:0| :skolemid |1000| :pattern ( (GenericMarshalling.V.VUint32_q d@@32)) )))
(assert (= (type Tclass.NativeTypes.uint32) TyType))
(assert (= (Tag Tclass.NativeTypes.uint32) Tagclass.NativeTypes.uint32))
(assert (forall ((bx@@78 T@U) ) (!  (=> (and (= (type bx@@78) BoxType) ($IsBox bx@@78 Tclass.NativeTypes.uint32)) (and (= ($Box ($Unbox intType bx@@78)) bx@@78) ($Is ($Unbox intType bx@@78) Tclass.NativeTypes.uint32))) :qid |unknown.0:0| :skolemid |1001| :pattern ( ($IsBox bx@@78 Tclass.NativeTypes.uint32)) )))
(assert (= (type Tclass.GenericMarshalling.V) TyType))
(assert (= (Tag Tclass.GenericMarshalling.V) Tagclass.GenericMarshalling.V))
(assert (forall ((bx@@79 T@U) ) (!  (=> (and (= (type bx@@79) BoxType) ($IsBox bx@@79 Tclass.GenericMarshalling.V)) (and (= ($Box ($Unbox DatatypeTypeType bx@@79)) bx@@79) ($Is ($Unbox DatatypeTypeType bx@@79) Tclass.GenericMarshalling.V))) :qid |unknown.0:0| :skolemid |1002| :pattern ( ($IsBox bx@@79 Tclass.GenericMarshalling.V)) )))
(assert (forall ((|a#64#0#0| Int) ) (!  (and (=> ($Is (|#GenericMarshalling.V.VUint32| |a#64#0#0|) Tclass.GenericMarshalling.V) ($Is (int_2_U |a#64#0#0|) Tclass.NativeTypes.uint32)) (=> ($Is (int_2_U |a#64#0#0|) Tclass.NativeTypes.uint32) ($Is (|#GenericMarshalling.V.VUint32| |a#64#0#0|) Tclass.GenericMarshalling.V))) :qid |GenericM.43:22| :skolemid |1003| :pattern ( ($Is (|#GenericMarshalling.V.VUint32| |a#64#0#0|) Tclass.GenericMarshalling.V)) )))
(assert (forall ((|a#65#0#0| Int) ($h@@33 T@U) ) (!  (=> (and (= (type $h@@33) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@33)) (and (=> ($IsAlloc (|#GenericMarshalling.V.VUint32| |a#65#0#0|) Tclass.GenericMarshalling.V $h@@33) ($IsAlloc (int_2_U |a#65#0#0|) Tclass.NativeTypes.uint32 $h@@33)) (=> ($IsAlloc (int_2_U |a#65#0#0|) Tclass.NativeTypes.uint32 $h@@33) ($IsAlloc (|#GenericMarshalling.V.VUint32| |a#65#0#0|) Tclass.GenericMarshalling.V $h@@33)))) :qid |GenericM.43:22| :skolemid |1004| :pattern ( ($IsAlloc (|#GenericMarshalling.V.VUint32| |a#65#0#0|) Tclass.GenericMarshalling.V $h@@33)) )))
(assert (forall ((d@@33 T@U) ($h@@34 T@U) ) (!  (=> (and (and (= (type d@@33) DatatypeTypeType) (= (type $h@@34) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@34) (and (GenericMarshalling.V.VUint32_q d@@33) ($IsAlloc d@@33 Tclass.GenericMarshalling.V $h@@34)))) ($IsAlloc (int_2_U (GenericMarshalling.V.v d@@33)) Tclass.NativeTypes.uint32 $h@@34)) :qid |unknown.0:0| :skolemid |1005| :pattern ( ($IsAlloc (int_2_U (GenericMarshalling.V.v d@@33)) Tclass.NativeTypes.uint32 $h@@34)) )))
(assert (forall ((|a#66#0#0| Int) ) (! (= (|#GenericMarshalling.V.VUint32| (LitInt |a#66#0#0|)) (Lit (|#GenericMarshalling.V.VUint32| |a#66#0#0|))) :qid |GenericM.43:22| :skolemid |1006| :pattern ( (|#GenericMarshalling.V.VUint32| (LitInt |a#66#0#0|))) )))
(assert (forall ((|a#67#0#0| Int) ) (! (= (GenericMarshalling.V.v (|#GenericMarshalling.V.VUint32| |a#67#0#0|)) |a#67#0#0|) :qid |GenericM.43:22| :skolemid |1007| :pattern ( (|#GenericMarshalling.V.VUint32| |a#67#0#0|)) )))
(assert (forall ((arg0@@224 Int) ) (! (= (type (|#GenericMarshalling.V.VUint64| arg0@@224)) DatatypeTypeType) :qid |funType:#GenericMarshalling.V.VUint64| :pattern ( (|#GenericMarshalling.V.VUint64| arg0@@224)) )))
(assert (forall ((|a#68#0#0| Int) ) (! (= (DatatypeCtorId (|#GenericMarshalling.V.VUint64| |a#68#0#0|)) |##GenericMarshalling.V.VUint64|) :qid |GenericM.44:22| :skolemid |1008| :pattern ( (|#GenericMarshalling.V.VUint64| |a#68#0#0|)) )))
(assert (forall ((d@@34 T@U) ) (!  (=> (= (type d@@34) DatatypeTypeType) (and (=> (GenericMarshalling.V.VUint64_q d@@34) (= (DatatypeCtorId d@@34) |##GenericMarshalling.V.VUint64|)) (=> (= (DatatypeCtorId d@@34) |##GenericMarshalling.V.VUint64|) (GenericMarshalling.V.VUint64_q d@@34)))) :qid |unknown.0:0| :skolemid |1009| :pattern ( (GenericMarshalling.V.VUint64_q d@@34)) )))
(assert (forall ((d@@35 T@U) ) (!  (=> (and (= (type d@@35) DatatypeTypeType) (GenericMarshalling.V.VUint64_q d@@35)) (exists ((|a#69#0#0| Int) ) (! (= d@@35 (|#GenericMarshalling.V.VUint64| |a#69#0#0|)) :qid |GenericM.44:22| :skolemid |1010| ))) :qid |unknown.0:0| :skolemid |1011| :pattern ( (GenericMarshalling.V.VUint64_q d@@35)) )))
(assert (= (type Tclass.NativeTypes.uint64) TyType))
(assert (= (Tag Tclass.NativeTypes.uint64) Tagclass.NativeTypes.uint64))
(assert (forall ((bx@@80 T@U) ) (!  (=> (and (= (type bx@@80) BoxType) ($IsBox bx@@80 Tclass.NativeTypes.uint64)) (and (= ($Box ($Unbox intType bx@@80)) bx@@80) ($Is ($Unbox intType bx@@80) Tclass.NativeTypes.uint64))) :qid |unknown.0:0| :skolemid |1012| :pattern ( ($IsBox bx@@80 Tclass.NativeTypes.uint64)) )))
(assert (forall ((|a#70#0#0| Int) ) (!  (and (=> ($Is (|#GenericMarshalling.V.VUint64| |a#70#0#0|) Tclass.GenericMarshalling.V) ($Is (int_2_U |a#70#0#0|) Tclass.NativeTypes.uint64)) (=> ($Is (int_2_U |a#70#0#0|) Tclass.NativeTypes.uint64) ($Is (|#GenericMarshalling.V.VUint64| |a#70#0#0|) Tclass.GenericMarshalling.V))) :qid |GenericM.44:22| :skolemid |1013| :pattern ( ($Is (|#GenericMarshalling.V.VUint64| |a#70#0#0|) Tclass.GenericMarshalling.V)) )))
(assert (forall ((|a#71#0#0| Int) ($h@@35 T@U) ) (!  (=> (and (= (type $h@@35) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@35)) (and (=> ($IsAlloc (|#GenericMarshalling.V.VUint64| |a#71#0#0|) Tclass.GenericMarshalling.V $h@@35) ($IsAlloc (int_2_U |a#71#0#0|) Tclass.NativeTypes.uint64 $h@@35)) (=> ($IsAlloc (int_2_U |a#71#0#0|) Tclass.NativeTypes.uint64 $h@@35) ($IsAlloc (|#GenericMarshalling.V.VUint64| |a#71#0#0|) Tclass.GenericMarshalling.V $h@@35)))) :qid |GenericM.44:22| :skolemid |1014| :pattern ( ($IsAlloc (|#GenericMarshalling.V.VUint64| |a#71#0#0|) Tclass.GenericMarshalling.V $h@@35)) )))
(assert (forall ((d@@36 T@U) ($h@@36 T@U) ) (!  (=> (and (and (= (type d@@36) DatatypeTypeType) (= (type $h@@36) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@36) (and (GenericMarshalling.V.VUint64_q d@@36) ($IsAlloc d@@36 Tclass.GenericMarshalling.V $h@@36)))) ($IsAlloc (int_2_U (GenericMarshalling.V.u d@@36)) Tclass.NativeTypes.uint64 $h@@36)) :qid |unknown.0:0| :skolemid |1015| :pattern ( ($IsAlloc (int_2_U (GenericMarshalling.V.u d@@36)) Tclass.NativeTypes.uint64 $h@@36)) )))
(assert (forall ((|a#72#0#0| Int) ) (! (= (|#GenericMarshalling.V.VUint64| (LitInt |a#72#0#0|)) (Lit (|#GenericMarshalling.V.VUint64| |a#72#0#0|))) :qid |GenericM.44:22| :skolemid |1016| :pattern ( (|#GenericMarshalling.V.VUint64| (LitInt |a#72#0#0|))) )))
(assert (forall ((|a#73#0#0| Int) ) (! (= (GenericMarshalling.V.u (|#GenericMarshalling.V.VUint64| |a#73#0#0|)) |a#73#0#0|) :qid |GenericM.44:22| :skolemid |1017| :pattern ( (|#GenericMarshalling.V.VUint64| |a#73#0#0|)) )))
(assert (forall ((arg0@@225 T@U) ) (! (= (type (|#GenericMarshalling.V.VArray| arg0@@225)) DatatypeTypeType) :qid |funType:#GenericMarshalling.V.VArray| :pattern ( (|#GenericMarshalling.V.VArray| arg0@@225)) )))
(assert (forall ((|a#74#0#0| T@U) ) (!  (=> (= (type |a#74#0#0|) (SeqType BoxType)) (= (DatatypeCtorId (|#GenericMarshalling.V.VArray| |a#74#0#0|)) |##GenericMarshalling.V.VArray|)) :qid |GenericM.45:21| :skolemid |1018| :pattern ( (|#GenericMarshalling.V.VArray| |a#74#0#0|)) )))
(assert (forall ((d@@37 T@U) ) (!  (=> (= (type d@@37) DatatypeTypeType) (and (=> (GenericMarshalling.V.VArray_q d@@37) (= (DatatypeCtorId d@@37) |##GenericMarshalling.V.VArray|)) (=> (= (DatatypeCtorId d@@37) |##GenericMarshalling.V.VArray|) (GenericMarshalling.V.VArray_q d@@37)))) :qid |unknown.0:0| :skolemid |1019| :pattern ( (GenericMarshalling.V.VArray_q d@@37)) )))
(assert (forall ((d@@38 T@U) ) (!  (=> (and (= (type d@@38) DatatypeTypeType) (GenericMarshalling.V.VArray_q d@@38)) (exists ((|a#75#0#0| T@U) ) (!  (and (= (type |a#75#0#0|) (SeqType BoxType)) (= d@@38 (|#GenericMarshalling.V.VArray| |a#75#0#0|))) :qid |GenericM.45:21| :skolemid |1020| :no-pattern (type |a#75#0#0|) :no-pattern (U_2_int |a#75#0#0|) :no-pattern (U_2_bool |a#75#0#0|) ))) :qid |unknown.0:0| :skolemid |1021| :pattern ( (GenericMarshalling.V.VArray_q d@@38)) )))
(assert (forall ((|a#76#0#0| T@U) ) (!  (=> (= (type |a#76#0#0|) (SeqType BoxType)) (and (=> ($Is (|#GenericMarshalling.V.VArray| |a#76#0#0|) Tclass.GenericMarshalling.V) ($Is |a#76#0#0| (TSeq Tclass.GenericMarshalling.V))) (=> ($Is |a#76#0#0| (TSeq Tclass.GenericMarshalling.V)) ($Is (|#GenericMarshalling.V.VArray| |a#76#0#0|) Tclass.GenericMarshalling.V)))) :qid |GenericM.45:21| :skolemid |1022| :pattern ( ($Is (|#GenericMarshalling.V.VArray| |a#76#0#0|) Tclass.GenericMarshalling.V)) )))
(assert (forall ((|a#77#0#0| T@U) ($h@@37 T@U) ) (!  (=> (and (and (= (type |a#77#0#0|) (SeqType BoxType)) (= (type $h@@37) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@37)) (and (=> ($IsAlloc (|#GenericMarshalling.V.VArray| |a#77#0#0|) Tclass.GenericMarshalling.V $h@@37) ($IsAlloc |a#77#0#0| (TSeq Tclass.GenericMarshalling.V) $h@@37)) (=> ($IsAlloc |a#77#0#0| (TSeq Tclass.GenericMarshalling.V) $h@@37) ($IsAlloc (|#GenericMarshalling.V.VArray| |a#77#0#0|) Tclass.GenericMarshalling.V $h@@37)))) :qid |GenericM.45:21| :skolemid |1023| :pattern ( ($IsAlloc (|#GenericMarshalling.V.VArray| |a#77#0#0|) Tclass.GenericMarshalling.V $h@@37)) )))
(assert (forall ((arg0@@226 T@U) ) (! (= (type (GenericMarshalling.V.a arg0@@226)) (SeqType BoxType)) :qid |funType:GenericMarshalling.V.a| :pattern ( (GenericMarshalling.V.a arg0@@226)) )))
(assert (forall ((d@@39 T@U) ($h@@38 T@U) ) (!  (=> (and (and (= (type d@@39) DatatypeTypeType) (= (type $h@@38) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@38) (and (GenericMarshalling.V.VArray_q d@@39) ($IsAlloc d@@39 Tclass.GenericMarshalling.V $h@@38)))) ($IsAlloc (GenericMarshalling.V.a d@@39) (TSeq Tclass.GenericMarshalling.V) $h@@38)) :qid |unknown.0:0| :skolemid |1024| :pattern ( ($IsAlloc (GenericMarshalling.V.a d@@39) (TSeq Tclass.GenericMarshalling.V) $h@@38)) )))
(assert (forall ((|a#78#0#0| T@U) ) (!  (=> (= (type |a#78#0#0|) (SeqType BoxType)) (= (|#GenericMarshalling.V.VArray| (Lit |a#78#0#0|)) (Lit (|#GenericMarshalling.V.VArray| |a#78#0#0|)))) :qid |GenericM.45:21| :skolemid |1025| :pattern ( (|#GenericMarshalling.V.VArray| (Lit |a#78#0#0|))) )))
(assert (forall ((|a#79#0#0| T@U) ) (!  (=> (= (type |a#79#0#0|) (SeqType BoxType)) (= (GenericMarshalling.V.a (|#GenericMarshalling.V.VArray| |a#79#0#0|)) |a#79#0#0|)) :qid |GenericM.45:21| :skolemid |1026| :pattern ( (|#GenericMarshalling.V.VArray| |a#79#0#0|)) )))
(assert (forall ((|a#80#0#0| T@U) (i@@33 Int) ) (!  (=> (= (type |a#80#0#0|) (SeqType BoxType)) (=> (and (<= 0 i@@33) (< i@@33 (|Seq#Length| |a#80#0#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#80#0#0| i@@33))) (DtRank (|#GenericMarshalling.V.VArray| |a#80#0#0|))))) :qid |GenericM.45:21| :skolemid |1027| :pattern ( (|Seq#Index| |a#80#0#0| i@@33) (|#GenericMarshalling.V.VArray| |a#80#0#0|)) )))
(assert (forall ((|a#81#0#0| T@U) ) (!  (=> (= (type |a#81#0#0|) (SeqType BoxType)) (< (|Seq#Rank| |a#81#0#0|) (DtRank (|#GenericMarshalling.V.VArray| |a#81#0#0|)))) :qid |GenericM.45:21| :skolemid |1028| :pattern ( (|#GenericMarshalling.V.VArray| |a#81#0#0|)) )))
(assert (forall ((arg0@@227 T@U) ) (! (= (type (|#GenericMarshalling.V.VTuple| arg0@@227)) DatatypeTypeType) :qid |funType:#GenericMarshalling.V.VTuple| :pattern ( (|#GenericMarshalling.V.VTuple| arg0@@227)) )))
(assert (forall ((|a#82#0#0| T@U) ) (!  (=> (= (type |a#82#0#0|) (SeqType BoxType)) (= (DatatypeCtorId (|#GenericMarshalling.V.VTuple| |a#82#0#0|)) |##GenericMarshalling.V.VTuple|)) :qid |GenericM.46:21| :skolemid |1029| :pattern ( (|#GenericMarshalling.V.VTuple| |a#82#0#0|)) )))
(assert (forall ((d@@40 T@U) ) (!  (=> (= (type d@@40) DatatypeTypeType) (and (=> (GenericMarshalling.V.VTuple_q d@@40) (= (DatatypeCtorId d@@40) |##GenericMarshalling.V.VTuple|)) (=> (= (DatatypeCtorId d@@40) |##GenericMarshalling.V.VTuple|) (GenericMarshalling.V.VTuple_q d@@40)))) :qid |unknown.0:0| :skolemid |1030| :pattern ( (GenericMarshalling.V.VTuple_q d@@40)) )))
(assert (forall ((d@@41 T@U) ) (!  (=> (and (= (type d@@41) DatatypeTypeType) (GenericMarshalling.V.VTuple_q d@@41)) (exists ((|a#83#0#0| T@U) ) (!  (and (= (type |a#83#0#0|) (SeqType BoxType)) (= d@@41 (|#GenericMarshalling.V.VTuple| |a#83#0#0|))) :qid |GenericM.46:21| :skolemid |1031| :no-pattern (type |a#83#0#0|) :no-pattern (U_2_int |a#83#0#0|) :no-pattern (U_2_bool |a#83#0#0|) ))) :qid |unknown.0:0| :skolemid |1032| :pattern ( (GenericMarshalling.V.VTuple_q d@@41)) )))
(assert (forall ((|a#84#0#0| T@U) ) (!  (=> (= (type |a#84#0#0|) (SeqType BoxType)) (and (=> ($Is (|#GenericMarshalling.V.VTuple| |a#84#0#0|) Tclass.GenericMarshalling.V) ($Is |a#84#0#0| (TSeq Tclass.GenericMarshalling.V))) (=> ($Is |a#84#0#0| (TSeq Tclass.GenericMarshalling.V)) ($Is (|#GenericMarshalling.V.VTuple| |a#84#0#0|) Tclass.GenericMarshalling.V)))) :qid |GenericM.46:21| :skolemid |1033| :pattern ( ($Is (|#GenericMarshalling.V.VTuple| |a#84#0#0|) Tclass.GenericMarshalling.V)) )))
(assert (forall ((|a#85#0#0| T@U) ($h@@39 T@U) ) (!  (=> (and (and (= (type |a#85#0#0|) (SeqType BoxType)) (= (type $h@@39) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@39)) (and (=> ($IsAlloc (|#GenericMarshalling.V.VTuple| |a#85#0#0|) Tclass.GenericMarshalling.V $h@@39) ($IsAlloc |a#85#0#0| (TSeq Tclass.GenericMarshalling.V) $h@@39)) (=> ($IsAlloc |a#85#0#0| (TSeq Tclass.GenericMarshalling.V) $h@@39) ($IsAlloc (|#GenericMarshalling.V.VTuple| |a#85#0#0|) Tclass.GenericMarshalling.V $h@@39)))) :qid |GenericM.46:21| :skolemid |1034| :pattern ( ($IsAlloc (|#GenericMarshalling.V.VTuple| |a#85#0#0|) Tclass.GenericMarshalling.V $h@@39)) )))
(assert (forall ((arg0@@228 T@U) ) (! (= (type (GenericMarshalling.V.t arg0@@228)) (SeqType BoxType)) :qid |funType:GenericMarshalling.V.t| :pattern ( (GenericMarshalling.V.t arg0@@228)) )))
(assert (forall ((d@@42 T@U) ($h@@40 T@U) ) (!  (=> (and (and (= (type d@@42) DatatypeTypeType) (= (type $h@@40) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@40) (and (GenericMarshalling.V.VTuple_q d@@42) ($IsAlloc d@@42 Tclass.GenericMarshalling.V $h@@40)))) ($IsAlloc (GenericMarshalling.V.t d@@42) (TSeq Tclass.GenericMarshalling.V) $h@@40)) :qid |unknown.0:0| :skolemid |1035| :pattern ( ($IsAlloc (GenericMarshalling.V.t d@@42) (TSeq Tclass.GenericMarshalling.V) $h@@40)) )))
(assert (forall ((|a#86#0#0| T@U) ) (!  (=> (= (type |a#86#0#0|) (SeqType BoxType)) (= (|#GenericMarshalling.V.VTuple| (Lit |a#86#0#0|)) (Lit (|#GenericMarshalling.V.VTuple| |a#86#0#0|)))) :qid |GenericM.46:21| :skolemid |1036| :pattern ( (|#GenericMarshalling.V.VTuple| (Lit |a#86#0#0|))) )))
(assert (forall ((|a#87#0#0| T@U) ) (!  (=> (= (type |a#87#0#0|) (SeqType BoxType)) (= (GenericMarshalling.V.t (|#GenericMarshalling.V.VTuple| |a#87#0#0|)) |a#87#0#0|)) :qid |GenericM.46:21| :skolemid |1037| :pattern ( (|#GenericMarshalling.V.VTuple| |a#87#0#0|)) )))
(assert (forall ((|a#88#0#0| T@U) (i@@34 Int) ) (!  (=> (= (type |a#88#0#0|) (SeqType BoxType)) (=> (and (<= 0 i@@34) (< i@@34 (|Seq#Length| |a#88#0#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#88#0#0| i@@34))) (DtRank (|#GenericMarshalling.V.VTuple| |a#88#0#0|))))) :qid |GenericM.46:21| :skolemid |1038| :pattern ( (|Seq#Index| |a#88#0#0| i@@34) (|#GenericMarshalling.V.VTuple| |a#88#0#0|)) )))
(assert (forall ((|a#89#0#0| T@U) ) (!  (=> (= (type |a#89#0#0|) (SeqType BoxType)) (< (|Seq#Rank| |a#89#0#0|) (DtRank (|#GenericMarshalling.V.VTuple| |a#89#0#0|)))) :qid |GenericM.46:21| :skolemid |1039| :pattern ( (|#GenericMarshalling.V.VTuple| |a#89#0#0|)) )))
(assert (forall ((arg0@@229 T@U) ) (! (= (type (|#GenericMarshalling.V.VByteArray| arg0@@229)) DatatypeTypeType) :qid |funType:#GenericMarshalling.V.VByteArray| :pattern ( (|#GenericMarshalling.V.VByteArray| arg0@@229)) )))
(assert (forall ((|a#90#0#0| T@U) ) (!  (=> (= (type |a#90#0#0|) (SeqType BoxType)) (= (DatatypeCtorId (|#GenericMarshalling.V.VByteArray| |a#90#0#0|)) |##GenericMarshalling.V.VByteArray|)) :qid |GenericM.47:25| :skolemid |1040| :pattern ( (|#GenericMarshalling.V.VByteArray| |a#90#0#0|)) )))
(assert (forall ((d@@43 T@U) ) (!  (=> (= (type d@@43) DatatypeTypeType) (and (=> (GenericMarshalling.V.VByteArray_q d@@43) (= (DatatypeCtorId d@@43) |##GenericMarshalling.V.VByteArray|)) (=> (= (DatatypeCtorId d@@43) |##GenericMarshalling.V.VByteArray|) (GenericMarshalling.V.VByteArray_q d@@43)))) :qid |unknown.0:0| :skolemid |1041| :pattern ( (GenericMarshalling.V.VByteArray_q d@@43)) )))
(assert (forall ((d@@44 T@U) ) (!  (=> (and (= (type d@@44) DatatypeTypeType) (GenericMarshalling.V.VByteArray_q d@@44)) (exists ((|a#91#0#0| T@U) ) (!  (and (= (type |a#91#0#0|) (SeqType BoxType)) (= d@@44 (|#GenericMarshalling.V.VByteArray| |a#91#0#0|))) :qid |GenericM.47:25| :skolemid |1042| :no-pattern (type |a#91#0#0|) :no-pattern (U_2_int |a#91#0#0|) :no-pattern (U_2_bool |a#91#0#0|) ))) :qid |unknown.0:0| :skolemid |1043| :pattern ( (GenericMarshalling.V.VByteArray_q d@@44)) )))
(assert (= (type Tclass.NativeTypes.byte) TyType))
(assert (= (Tag Tclass.NativeTypes.byte) Tagclass.NativeTypes.byte))
(assert (forall ((bx@@81 T@U) ) (!  (=> (and (= (type bx@@81) BoxType) ($IsBox bx@@81 Tclass.NativeTypes.byte)) (and (= ($Box ($Unbox intType bx@@81)) bx@@81) ($Is ($Unbox intType bx@@81) Tclass.NativeTypes.byte))) :qid |unknown.0:0| :skolemid |1044| :pattern ( ($IsBox bx@@81 Tclass.NativeTypes.byte)) )))
(assert (forall ((|a#92#0#0| T@U) ) (!  (=> (= (type |a#92#0#0|) (SeqType BoxType)) (and (=> ($Is (|#GenericMarshalling.V.VByteArray| |a#92#0#0|) Tclass.GenericMarshalling.V) ($Is |a#92#0#0| (TSeq Tclass.NativeTypes.byte))) (=> ($Is |a#92#0#0| (TSeq Tclass.NativeTypes.byte)) ($Is (|#GenericMarshalling.V.VByteArray| |a#92#0#0|) Tclass.GenericMarshalling.V)))) :qid |GenericM.47:25| :skolemid |1045| :pattern ( ($Is (|#GenericMarshalling.V.VByteArray| |a#92#0#0|) Tclass.GenericMarshalling.V)) )))
(assert (forall ((|a#93#0#0| T@U) ($h@@41 T@U) ) (!  (=> (and (and (= (type |a#93#0#0|) (SeqType BoxType)) (= (type $h@@41) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@41)) (and (=> ($IsAlloc (|#GenericMarshalling.V.VByteArray| |a#93#0#0|) Tclass.GenericMarshalling.V $h@@41) ($IsAlloc |a#93#0#0| (TSeq Tclass.NativeTypes.byte) $h@@41)) (=> ($IsAlloc |a#93#0#0| (TSeq Tclass.NativeTypes.byte) $h@@41) ($IsAlloc (|#GenericMarshalling.V.VByteArray| |a#93#0#0|) Tclass.GenericMarshalling.V $h@@41)))) :qid |GenericM.47:25| :skolemid |1046| :pattern ( ($IsAlloc (|#GenericMarshalling.V.VByteArray| |a#93#0#0|) Tclass.GenericMarshalling.V $h@@41)) )))
(assert (forall ((arg0@@230 T@U) ) (! (= (type (GenericMarshalling.V.b arg0@@230)) (SeqType BoxType)) :qid |funType:GenericMarshalling.V.b| :pattern ( (GenericMarshalling.V.b arg0@@230)) )))
(assert (forall ((d@@45 T@U) ($h@@42 T@U) ) (!  (=> (and (and (= (type d@@45) DatatypeTypeType) (= (type $h@@42) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@42) (and (GenericMarshalling.V.VByteArray_q d@@45) ($IsAlloc d@@45 Tclass.GenericMarshalling.V $h@@42)))) ($IsAlloc (GenericMarshalling.V.b d@@45) (TSeq Tclass.NativeTypes.byte) $h@@42)) :qid |unknown.0:0| :skolemid |1047| :pattern ( ($IsAlloc (GenericMarshalling.V.b d@@45) (TSeq Tclass.NativeTypes.byte) $h@@42)) )))
(assert (forall ((|a#94#0#0| T@U) ) (!  (=> (= (type |a#94#0#0|) (SeqType BoxType)) (= (|#GenericMarshalling.V.VByteArray| (Lit |a#94#0#0|)) (Lit (|#GenericMarshalling.V.VByteArray| |a#94#0#0|)))) :qid |GenericM.47:25| :skolemid |1048| :pattern ( (|#GenericMarshalling.V.VByteArray| (Lit |a#94#0#0|))) )))
(assert (forall ((|a#95#0#0| T@U) ) (!  (=> (= (type |a#95#0#0|) (SeqType BoxType)) (= (GenericMarshalling.V.b (|#GenericMarshalling.V.VByteArray| |a#95#0#0|)) |a#95#0#0|)) :qid |GenericM.47:25| :skolemid |1049| :pattern ( (|#GenericMarshalling.V.VByteArray| |a#95#0#0|)) )))
(assert (forall ((|a#96#0#0| T@U) (i@@35 Int) ) (!  (=> (= (type |a#96#0#0|) (SeqType BoxType)) (=> (and (<= 0 i@@35) (< i@@35 (|Seq#Length| |a#96#0#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#96#0#0| i@@35))) (DtRank (|#GenericMarshalling.V.VByteArray| |a#96#0#0|))))) :qid |GenericM.47:25| :skolemid |1050| :pattern ( (|Seq#Index| |a#96#0#0| i@@35) (|#GenericMarshalling.V.VByteArray| |a#96#0#0|)) )))
(assert (forall ((|a#97#0#0| T@U) ) (!  (=> (= (type |a#97#0#0|) (SeqType BoxType)) (< (|Seq#Rank| |a#97#0#0|) (DtRank (|#GenericMarshalling.V.VByteArray| |a#97#0#0|)))) :qid |GenericM.47:25| :skolemid |1051| :pattern ( (|#GenericMarshalling.V.VByteArray| |a#97#0#0|)) )))
(assert (forall ((arg0@@231 T@U) ) (! (= (type (|#GenericMarshalling.V.VUint32Array| arg0@@231)) DatatypeTypeType) :qid |funType:#GenericMarshalling.V.VUint32Array| :pattern ( (|#GenericMarshalling.V.VUint32Array| arg0@@231)) )))
(assert (forall ((|a#98#0#0| T@U) ) (!  (=> (= (type |a#98#0#0|) (SeqType BoxType)) (= (DatatypeCtorId (|#GenericMarshalling.V.VUint32Array| |a#98#0#0|)) |##GenericMarshalling.V.VUint32Array|)) :qid |GenericM.48:27| :skolemid |1052| :pattern ( (|#GenericMarshalling.V.VUint32Array| |a#98#0#0|)) )))
(assert (forall ((d@@46 T@U) ) (!  (=> (= (type d@@46) DatatypeTypeType) (and (=> (GenericMarshalling.V.VUint32Array_q d@@46) (= (DatatypeCtorId d@@46) |##GenericMarshalling.V.VUint32Array|)) (=> (= (DatatypeCtorId d@@46) |##GenericMarshalling.V.VUint32Array|) (GenericMarshalling.V.VUint32Array_q d@@46)))) :qid |unknown.0:0| :skolemid |1053| :pattern ( (GenericMarshalling.V.VUint32Array_q d@@46)) )))
(assert (forall ((d@@47 T@U) ) (!  (=> (and (= (type d@@47) DatatypeTypeType) (GenericMarshalling.V.VUint32Array_q d@@47)) (exists ((|a#99#0#0| T@U) ) (!  (and (= (type |a#99#0#0|) (SeqType BoxType)) (= d@@47 (|#GenericMarshalling.V.VUint32Array| |a#99#0#0|))) :qid |GenericM.48:27| :skolemid |1054| :no-pattern (type |a#99#0#0|) :no-pattern (U_2_int |a#99#0#0|) :no-pattern (U_2_bool |a#99#0#0|) ))) :qid |unknown.0:0| :skolemid |1055| :pattern ( (GenericMarshalling.V.VUint32Array_q d@@47)) )))
(assert (forall ((|a#100#0#0| T@U) ) (!  (=> (= (type |a#100#0#0|) (SeqType BoxType)) (and (=> ($Is (|#GenericMarshalling.V.VUint32Array| |a#100#0#0|) Tclass.GenericMarshalling.V) ($Is |a#100#0#0| (TSeq Tclass.NativeTypes.uint32))) (=> ($Is |a#100#0#0| (TSeq Tclass.NativeTypes.uint32)) ($Is (|#GenericMarshalling.V.VUint32Array| |a#100#0#0|) Tclass.GenericMarshalling.V)))) :qid |GenericM.48:27| :skolemid |1056| :pattern ( ($Is (|#GenericMarshalling.V.VUint32Array| |a#100#0#0|) Tclass.GenericMarshalling.V)) )))
(assert (forall ((|a#101#0#0| T@U) ($h@@43 T@U) ) (!  (=> (and (and (= (type |a#101#0#0|) (SeqType BoxType)) (= (type $h@@43) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@43)) (and (=> ($IsAlloc (|#GenericMarshalling.V.VUint32Array| |a#101#0#0|) Tclass.GenericMarshalling.V $h@@43) ($IsAlloc |a#101#0#0| (TSeq Tclass.NativeTypes.uint32) $h@@43)) (=> ($IsAlloc |a#101#0#0| (TSeq Tclass.NativeTypes.uint32) $h@@43) ($IsAlloc (|#GenericMarshalling.V.VUint32Array| |a#101#0#0|) Tclass.GenericMarshalling.V $h@@43)))) :qid |GenericM.48:27| :skolemid |1057| :pattern ( ($IsAlloc (|#GenericMarshalling.V.VUint32Array| |a#101#0#0|) Tclass.GenericMarshalling.V $h@@43)) )))
(assert (forall ((arg0@@232 T@U) ) (! (= (type (GenericMarshalling.V.va arg0@@232)) (SeqType BoxType)) :qid |funType:GenericMarshalling.V.va| :pattern ( (GenericMarshalling.V.va arg0@@232)) )))
(assert (forall ((d@@48 T@U) ($h@@44 T@U) ) (!  (=> (and (and (= (type d@@48) DatatypeTypeType) (= (type $h@@44) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@44) (and (GenericMarshalling.V.VUint32Array_q d@@48) ($IsAlloc d@@48 Tclass.GenericMarshalling.V $h@@44)))) ($IsAlloc (GenericMarshalling.V.va d@@48) (TSeq Tclass.NativeTypes.uint32) $h@@44)) :qid |unknown.0:0| :skolemid |1058| :pattern ( ($IsAlloc (GenericMarshalling.V.va d@@48) (TSeq Tclass.NativeTypes.uint32) $h@@44)) )))
(assert (forall ((|a#102#0#0| T@U) ) (!  (=> (= (type |a#102#0#0|) (SeqType BoxType)) (= (|#GenericMarshalling.V.VUint32Array| (Lit |a#102#0#0|)) (Lit (|#GenericMarshalling.V.VUint32Array| |a#102#0#0|)))) :qid |GenericM.48:27| :skolemid |1059| :pattern ( (|#GenericMarshalling.V.VUint32Array| (Lit |a#102#0#0|))) )))
(assert (forall ((|a#103#0#0| T@U) ) (!  (=> (= (type |a#103#0#0|) (SeqType BoxType)) (= (GenericMarshalling.V.va (|#GenericMarshalling.V.VUint32Array| |a#103#0#0|)) |a#103#0#0|)) :qid |GenericM.48:27| :skolemid |1060| :pattern ( (|#GenericMarshalling.V.VUint32Array| |a#103#0#0|)) )))
(assert (forall ((|a#104#0#0| T@U) (i@@36 Int) ) (!  (=> (= (type |a#104#0#0|) (SeqType BoxType)) (=> (and (<= 0 i@@36) (< i@@36 (|Seq#Length| |a#104#0#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#104#0#0| i@@36))) (DtRank (|#GenericMarshalling.V.VUint32Array| |a#104#0#0|))))) :qid |GenericM.48:27| :skolemid |1061| :pattern ( (|Seq#Index| |a#104#0#0| i@@36) (|#GenericMarshalling.V.VUint32Array| |a#104#0#0|)) )))
(assert (forall ((|a#105#0#0| T@U) ) (!  (=> (= (type |a#105#0#0|) (SeqType BoxType)) (< (|Seq#Rank| |a#105#0#0|) (DtRank (|#GenericMarshalling.V.VUint32Array| |a#105#0#0|)))) :qid |GenericM.48:27| :skolemid |1062| :pattern ( (|#GenericMarshalling.V.VUint32Array| |a#105#0#0|)) )))
(assert (forall ((arg0@@233 T@U) ) (! (= (type (|#GenericMarshalling.V.VUint64Array| arg0@@233)) DatatypeTypeType) :qid |funType:#GenericMarshalling.V.VUint64Array| :pattern ( (|#GenericMarshalling.V.VUint64Array| arg0@@233)) )))
(assert (forall ((|a#106#0#0| T@U) ) (!  (=> (= (type |a#106#0#0|) (SeqType BoxType)) (= (DatatypeCtorId (|#GenericMarshalling.V.VUint64Array| |a#106#0#0|)) |##GenericMarshalling.V.VUint64Array|)) :qid |GenericM.49:27| :skolemid |1063| :pattern ( (|#GenericMarshalling.V.VUint64Array| |a#106#0#0|)) )))
(assert (forall ((d@@49 T@U) ) (!  (=> (= (type d@@49) DatatypeTypeType) (and (=> (GenericMarshalling.V.VUint64Array_q d@@49) (= (DatatypeCtorId d@@49) |##GenericMarshalling.V.VUint64Array|)) (=> (= (DatatypeCtorId d@@49) |##GenericMarshalling.V.VUint64Array|) (GenericMarshalling.V.VUint64Array_q d@@49)))) :qid |unknown.0:0| :skolemid |1064| :pattern ( (GenericMarshalling.V.VUint64Array_q d@@49)) )))
(assert (forall ((d@@50 T@U) ) (!  (=> (and (= (type d@@50) DatatypeTypeType) (GenericMarshalling.V.VUint64Array_q d@@50)) (exists ((|a#107#0#0| T@U) ) (!  (and (= (type |a#107#0#0|) (SeqType BoxType)) (= d@@50 (|#GenericMarshalling.V.VUint64Array| |a#107#0#0|))) :qid |GenericM.49:27| :skolemid |1065| :no-pattern (type |a#107#0#0|) :no-pattern (U_2_int |a#107#0#0|) :no-pattern (U_2_bool |a#107#0#0|) ))) :qid |unknown.0:0| :skolemid |1066| :pattern ( (GenericMarshalling.V.VUint64Array_q d@@50)) )))
(assert (forall ((|a#108#0#0| T@U) ) (!  (=> (= (type |a#108#0#0|) (SeqType BoxType)) (and (=> ($Is (|#GenericMarshalling.V.VUint64Array| |a#108#0#0|) Tclass.GenericMarshalling.V) ($Is |a#108#0#0| (TSeq Tclass.NativeTypes.uint64))) (=> ($Is |a#108#0#0| (TSeq Tclass.NativeTypes.uint64)) ($Is (|#GenericMarshalling.V.VUint64Array| |a#108#0#0|) Tclass.GenericMarshalling.V)))) :qid |GenericM.49:27| :skolemid |1067| :pattern ( ($Is (|#GenericMarshalling.V.VUint64Array| |a#108#0#0|) Tclass.GenericMarshalling.V)) )))
(assert (forall ((|a#109#0#0| T@U) ($h@@45 T@U) ) (!  (=> (and (and (= (type |a#109#0#0|) (SeqType BoxType)) (= (type $h@@45) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@45)) (and (=> ($IsAlloc (|#GenericMarshalling.V.VUint64Array| |a#109#0#0|) Tclass.GenericMarshalling.V $h@@45) ($IsAlloc |a#109#0#0| (TSeq Tclass.NativeTypes.uint64) $h@@45)) (=> ($IsAlloc |a#109#0#0| (TSeq Tclass.NativeTypes.uint64) $h@@45) ($IsAlloc (|#GenericMarshalling.V.VUint64Array| |a#109#0#0|) Tclass.GenericMarshalling.V $h@@45)))) :qid |GenericM.49:27| :skolemid |1068| :pattern ( ($IsAlloc (|#GenericMarshalling.V.VUint64Array| |a#109#0#0|) Tclass.GenericMarshalling.V $h@@45)) )))
(assert (forall ((arg0@@234 T@U) ) (! (= (type (GenericMarshalling.V.ua arg0@@234)) (SeqType BoxType)) :qid |funType:GenericMarshalling.V.ua| :pattern ( (GenericMarshalling.V.ua arg0@@234)) )))
(assert (forall ((d@@51 T@U) ($h@@46 T@U) ) (!  (=> (and (and (= (type d@@51) DatatypeTypeType) (= (type $h@@46) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@46) (and (GenericMarshalling.V.VUint64Array_q d@@51) ($IsAlloc d@@51 Tclass.GenericMarshalling.V $h@@46)))) ($IsAlloc (GenericMarshalling.V.ua d@@51) (TSeq Tclass.NativeTypes.uint64) $h@@46)) :qid |unknown.0:0| :skolemid |1069| :pattern ( ($IsAlloc (GenericMarshalling.V.ua d@@51) (TSeq Tclass.NativeTypes.uint64) $h@@46)) )))
(assert (forall ((|a#110#0#0| T@U) ) (!  (=> (= (type |a#110#0#0|) (SeqType BoxType)) (= (|#GenericMarshalling.V.VUint64Array| (Lit |a#110#0#0|)) (Lit (|#GenericMarshalling.V.VUint64Array| |a#110#0#0|)))) :qid |GenericM.49:27| :skolemid |1070| :pattern ( (|#GenericMarshalling.V.VUint64Array| (Lit |a#110#0#0|))) )))
(assert (forall ((|a#111#0#0| T@U) ) (!  (=> (= (type |a#111#0#0|) (SeqType BoxType)) (= (GenericMarshalling.V.ua (|#GenericMarshalling.V.VUint64Array| |a#111#0#0|)) |a#111#0#0|)) :qid |GenericM.49:27| :skolemid |1071| :pattern ( (|#GenericMarshalling.V.VUint64Array| |a#111#0#0|)) )))
(assert (forall ((|a#112#0#0| T@U) (i@@37 Int) ) (!  (=> (= (type |a#112#0#0|) (SeqType BoxType)) (=> (and (<= 0 i@@37) (< i@@37 (|Seq#Length| |a#112#0#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#112#0#0| i@@37))) (DtRank (|#GenericMarshalling.V.VUint64Array| |a#112#0#0|))))) :qid |GenericM.49:27| :skolemid |1072| :pattern ( (|Seq#Index| |a#112#0#0| i@@37) (|#GenericMarshalling.V.VUint64Array| |a#112#0#0|)) )))
(assert (forall ((|a#113#0#0| T@U) ) (!  (=> (= (type |a#113#0#0|) (SeqType BoxType)) (< (|Seq#Rank| |a#113#0#0|) (DtRank (|#GenericMarshalling.V.VUint64Array| |a#113#0#0|)))) :qid |GenericM.49:27| :skolemid |1073| :pattern ( (|#GenericMarshalling.V.VUint64Array| |a#113#0#0|)) )))
(assert (forall ((arg0@@235 Int) (arg1@@105 T@U) ) (! (= (type (|#GenericMarshalling.V.VCase| arg0@@235 arg1@@105)) DatatypeTypeType) :qid |funType:#GenericMarshalling.V.VCase| :pattern ( (|#GenericMarshalling.V.VCase| arg0@@235 arg1@@105)) )))
(assert (forall ((|a#114#0#0| Int) (|a#114#1#0| T@U) ) (!  (=> (= (type |a#114#1#0|) DatatypeTypeType) (= (DatatypeCtorId (|#GenericMarshalling.V.VCase| |a#114#0#0| |a#114#1#0|)) |##GenericMarshalling.V.VCase|)) :qid |GenericM.50:20| :skolemid |1074| :pattern ( (|#GenericMarshalling.V.VCase| |a#114#0#0| |a#114#1#0|)) )))
(assert (forall ((d@@52 T@U) ) (!  (=> (= (type d@@52) DatatypeTypeType) (and (=> (GenericMarshalling.V.VCase_q d@@52) (= (DatatypeCtorId d@@52) |##GenericMarshalling.V.VCase|)) (=> (= (DatatypeCtorId d@@52) |##GenericMarshalling.V.VCase|) (GenericMarshalling.V.VCase_q d@@52)))) :qid |unknown.0:0| :skolemid |1075| :pattern ( (GenericMarshalling.V.VCase_q d@@52)) )))
(assert (forall ((d@@53 T@U) ) (!  (=> (and (= (type d@@53) DatatypeTypeType) (GenericMarshalling.V.VCase_q d@@53)) (exists ((|a#115#0#0| Int) (|a#115#1#0| T@U) ) (!  (and (= (type |a#115#1#0|) DatatypeTypeType) (= d@@53 (|#GenericMarshalling.V.VCase| |a#115#0#0| |a#115#1#0|))) :qid |GenericM.50:20| :skolemid |1076| :no-pattern (type |a#115#1#0|) :no-pattern (U_2_int |a#115#1#0|) :no-pattern (U_2_bool |a#115#1#0|) ))) :qid |unknown.0:0| :skolemid |1077| :pattern ( (GenericMarshalling.V.VCase_q d@@53)) )))
(assert (forall ((|a#116#0#0| Int) (|a#116#1#0| T@U) ) (!  (=> (= (type |a#116#1#0|) DatatypeTypeType) (and (=> ($Is (|#GenericMarshalling.V.VCase| |a#116#0#0| |a#116#1#0|) Tclass.GenericMarshalling.V) (and ($Is (int_2_U |a#116#0#0|) Tclass.NativeTypes.uint64) ($Is |a#116#1#0| Tclass.GenericMarshalling.V))) (=> (and ($Is (int_2_U |a#116#0#0|) Tclass.NativeTypes.uint64) ($Is |a#116#1#0| Tclass.GenericMarshalling.V)) ($Is (|#GenericMarshalling.V.VCase| |a#116#0#0| |a#116#1#0|) Tclass.GenericMarshalling.V)))) :qid |GenericM.50:20| :skolemid |1078| :pattern ( ($Is (|#GenericMarshalling.V.VCase| |a#116#0#0| |a#116#1#0|) Tclass.GenericMarshalling.V)) )))
(assert (forall ((|a#117#0#0| Int) (|a#117#1#0| T@U) ($h@@47 T@U) ) (!  (=> (and (and (= (type |a#117#1#0|) DatatypeTypeType) (= (type $h@@47) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@47)) (and (=> ($IsAlloc (|#GenericMarshalling.V.VCase| |a#117#0#0| |a#117#1#0|) Tclass.GenericMarshalling.V $h@@47) (and ($IsAlloc (int_2_U |a#117#0#0|) Tclass.NativeTypes.uint64 $h@@47) ($IsAlloc |a#117#1#0| Tclass.GenericMarshalling.V $h@@47))) (=> (and ($IsAlloc (int_2_U |a#117#0#0|) Tclass.NativeTypes.uint64 $h@@47) ($IsAlloc |a#117#1#0| Tclass.GenericMarshalling.V $h@@47)) ($IsAlloc (|#GenericMarshalling.V.VCase| |a#117#0#0| |a#117#1#0|) Tclass.GenericMarshalling.V $h@@47)))) :qid |GenericM.50:20| :skolemid |1079| :pattern ( ($IsAlloc (|#GenericMarshalling.V.VCase| |a#117#0#0| |a#117#1#0|) Tclass.GenericMarshalling.V $h@@47)) )))
(assert (forall ((d@@54 T@U) ($h@@48 T@U) ) (!  (=> (and (and (= (type d@@54) DatatypeTypeType) (= (type $h@@48) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@48) (and (GenericMarshalling.V.VCase_q d@@54) ($IsAlloc d@@54 Tclass.GenericMarshalling.V $h@@48)))) ($IsAlloc (int_2_U (GenericMarshalling.V.c d@@54)) Tclass.NativeTypes.uint64 $h@@48)) :qid |unknown.0:0| :skolemid |1080| :pattern ( ($IsAlloc (int_2_U (GenericMarshalling.V.c d@@54)) Tclass.NativeTypes.uint64 $h@@48)) )))
(assert (forall ((arg0@@236 T@U) ) (! (= (type (GenericMarshalling.V.val arg0@@236)) DatatypeTypeType) :qid |funType:GenericMarshalling.V.val| :pattern ( (GenericMarshalling.V.val arg0@@236)) )))
(assert (forall ((d@@55 T@U) ($h@@49 T@U) ) (!  (=> (and (and (= (type d@@55) DatatypeTypeType) (= (type $h@@49) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@49) (and (GenericMarshalling.V.VCase_q d@@55) ($IsAlloc d@@55 Tclass.GenericMarshalling.V $h@@49)))) ($IsAlloc (GenericMarshalling.V.val d@@55) Tclass.GenericMarshalling.V $h@@49)) :qid |unknown.0:0| :skolemid |1081| :pattern ( ($IsAlloc (GenericMarshalling.V.val d@@55) Tclass.GenericMarshalling.V $h@@49)) )))
(assert (forall ((|a#118#0#0| Int) (|a#118#1#0| T@U) ) (!  (=> (= (type |a#118#1#0|) DatatypeTypeType) (= (|#GenericMarshalling.V.VCase| (LitInt |a#118#0#0|) (Lit |a#118#1#0|)) (Lit (|#GenericMarshalling.V.VCase| |a#118#0#0| |a#118#1#0|)))) :qid |GenericM.50:20| :skolemid |1082| :pattern ( (|#GenericMarshalling.V.VCase| (LitInt |a#118#0#0|) (Lit |a#118#1#0|))) )))
(assert (forall ((|a#119#0#0| Int) (|a#119#1#0| T@U) ) (!  (=> (= (type |a#119#1#0|) DatatypeTypeType) (= (GenericMarshalling.V.c (|#GenericMarshalling.V.VCase| |a#119#0#0| |a#119#1#0|)) |a#119#0#0|)) :qid |GenericM.50:20| :skolemid |1083| :pattern ( (|#GenericMarshalling.V.VCase| |a#119#0#0| |a#119#1#0|)) )))
(assert (forall ((|a#120#0#0| Int) (|a#120#1#0| T@U) ) (!  (=> (= (type |a#120#1#0|) DatatypeTypeType) (= (GenericMarshalling.V.val (|#GenericMarshalling.V.VCase| |a#120#0#0| |a#120#1#0|)) |a#120#1#0|)) :qid |GenericM.50:20| :skolemid |1084| :pattern ( (|#GenericMarshalling.V.VCase| |a#120#0#0| |a#120#1#0|)) )))
(assert (forall ((|a#121#0#0| Int) (|a#121#1#0| T@U) ) (!  (=> (= (type |a#121#1#0|) DatatypeTypeType) (< (DtRank |a#121#1#0|) (DtRank (|#GenericMarshalling.V.VCase| |a#121#0#0| |a#121#1#0|)))) :qid |GenericM.50:20| :skolemid |1085| :pattern ( (|#GenericMarshalling.V.VCase| |a#121#0#0| |a#121#1#0|)) )))
(assert (forall ((d@@56 T@U) ) (!  (=> (and (= (type d@@56) DatatypeTypeType) (|$IsA#GenericMarshalling.V| d@@56)) (or (or (or (or (or (or (or (GenericMarshalling.V.VUint32_q d@@56) (GenericMarshalling.V.VUint64_q d@@56)) (GenericMarshalling.V.VArray_q d@@56)) (GenericMarshalling.V.VTuple_q d@@56)) (GenericMarshalling.V.VByteArray_q d@@56)) (GenericMarshalling.V.VUint32Array_q d@@56)) (GenericMarshalling.V.VUint64Array_q d@@56)) (GenericMarshalling.V.VCase_q d@@56))) :qid |unknown.0:0| :skolemid |1086| :pattern ( (|$IsA#GenericMarshalling.V| d@@56)) )))
(assert (forall ((d@@57 T@U) ) (!  (=> (and (= (type d@@57) DatatypeTypeType) ($Is d@@57 Tclass.GenericMarshalling.V)) (or (or (or (or (or (or (or (GenericMarshalling.V.VUint32_q d@@57) (GenericMarshalling.V.VUint64_q d@@57)) (GenericMarshalling.V.VArray_q d@@57)) (GenericMarshalling.V.VTuple_q d@@57)) (GenericMarshalling.V.VByteArray_q d@@57)) (GenericMarshalling.V.VUint32Array_q d@@57)) (GenericMarshalling.V.VUint64Array_q d@@57)) (GenericMarshalling.V.VCase_q d@@57))) :qid |unknown.0:0| :skolemid |1087| :pattern ( (GenericMarshalling.V.VCase_q d@@57) ($Is d@@57 Tclass.GenericMarshalling.V)) :pattern ( (GenericMarshalling.V.VUint64Array_q d@@57) ($Is d@@57 Tclass.GenericMarshalling.V)) :pattern ( (GenericMarshalling.V.VUint32Array_q d@@57) ($Is d@@57 Tclass.GenericMarshalling.V)) :pattern ( (GenericMarshalling.V.VByteArray_q d@@57) ($Is d@@57 Tclass.GenericMarshalling.V)) :pattern ( (GenericMarshalling.V.VTuple_q d@@57) ($Is d@@57 Tclass.GenericMarshalling.V)) :pattern ( (GenericMarshalling.V.VArray_q d@@57) ($Is d@@57 Tclass.GenericMarshalling.V)) :pattern ( (GenericMarshalling.V.VUint64_q d@@57) ($Is d@@57 Tclass.GenericMarshalling.V)) :pattern ( (GenericMarshalling.V.VUint32_q d@@57) ($Is d@@57 Tclass.GenericMarshalling.V)) )))
(assert (forall ((a@@125 T@U) (b@@74 T@U) ) (!  (=> (and (and (= (type a@@125) DatatypeTypeType) (= (type b@@74) DatatypeTypeType)) (and (GenericMarshalling.V.VUint32_q a@@125) (GenericMarshalling.V.VUint32_q b@@74))) (and (=> (|GenericMarshalling.V#Equal| a@@125 b@@74) (= (GenericMarshalling.V.v a@@125) (GenericMarshalling.V.v b@@74))) (=> (= (GenericMarshalling.V.v a@@125) (GenericMarshalling.V.v b@@74)) (|GenericMarshalling.V#Equal| a@@125 b@@74)))) :qid |unknown.0:0| :skolemid |1088| :pattern ( (|GenericMarshalling.V#Equal| a@@125 b@@74) (GenericMarshalling.V.VUint32_q a@@125)) :pattern ( (|GenericMarshalling.V#Equal| a@@125 b@@74) (GenericMarshalling.V.VUint32_q b@@74)) )))
(assert (forall ((a@@126 T@U) (b@@75 T@U) ) (!  (=> (and (and (= (type a@@126) DatatypeTypeType) (= (type b@@75) DatatypeTypeType)) (and (GenericMarshalling.V.VUint64_q a@@126) (GenericMarshalling.V.VUint64_q b@@75))) (and (=> (|GenericMarshalling.V#Equal| a@@126 b@@75) (= (GenericMarshalling.V.u a@@126) (GenericMarshalling.V.u b@@75))) (=> (= (GenericMarshalling.V.u a@@126) (GenericMarshalling.V.u b@@75)) (|GenericMarshalling.V#Equal| a@@126 b@@75)))) :qid |unknown.0:0| :skolemid |1089| :pattern ( (|GenericMarshalling.V#Equal| a@@126 b@@75) (GenericMarshalling.V.VUint64_q a@@126)) :pattern ( (|GenericMarshalling.V#Equal| a@@126 b@@75) (GenericMarshalling.V.VUint64_q b@@75)) )))
(assert (forall ((a@@127 T@U) (b@@76 T@U) ) (!  (=> (and (and (= (type a@@127) DatatypeTypeType) (= (type b@@76) DatatypeTypeType)) (and (GenericMarshalling.V.VArray_q a@@127) (GenericMarshalling.V.VArray_q b@@76))) (and (=> (|GenericMarshalling.V#Equal| a@@127 b@@76) (|Seq#Equal| (GenericMarshalling.V.a a@@127) (GenericMarshalling.V.a b@@76))) (=> (|Seq#Equal| (GenericMarshalling.V.a a@@127) (GenericMarshalling.V.a b@@76)) (|GenericMarshalling.V#Equal| a@@127 b@@76)))) :qid |unknown.0:0| :skolemid |1090| :pattern ( (|GenericMarshalling.V#Equal| a@@127 b@@76) (GenericMarshalling.V.VArray_q a@@127)) :pattern ( (|GenericMarshalling.V#Equal| a@@127 b@@76) (GenericMarshalling.V.VArray_q b@@76)) )))
(assert (forall ((a@@128 T@U) (b@@77 T@U) ) (!  (=> (and (and (= (type a@@128) DatatypeTypeType) (= (type b@@77) DatatypeTypeType)) (and (GenericMarshalling.V.VTuple_q a@@128) (GenericMarshalling.V.VTuple_q b@@77))) (and (=> (|GenericMarshalling.V#Equal| a@@128 b@@77) (|Seq#Equal| (GenericMarshalling.V.t a@@128) (GenericMarshalling.V.t b@@77))) (=> (|Seq#Equal| (GenericMarshalling.V.t a@@128) (GenericMarshalling.V.t b@@77)) (|GenericMarshalling.V#Equal| a@@128 b@@77)))) :qid |unknown.0:0| :skolemid |1091| :pattern ( (|GenericMarshalling.V#Equal| a@@128 b@@77) (GenericMarshalling.V.VTuple_q a@@128)) :pattern ( (|GenericMarshalling.V#Equal| a@@128 b@@77) (GenericMarshalling.V.VTuple_q b@@77)) )))
(assert (forall ((a@@129 T@U) (b@@78 T@U) ) (!  (=> (and (and (= (type a@@129) DatatypeTypeType) (= (type b@@78) DatatypeTypeType)) (and (GenericMarshalling.V.VByteArray_q a@@129) (GenericMarshalling.V.VByteArray_q b@@78))) (and (=> (|GenericMarshalling.V#Equal| a@@129 b@@78) (|Seq#Equal| (GenericMarshalling.V.b a@@129) (GenericMarshalling.V.b b@@78))) (=> (|Seq#Equal| (GenericMarshalling.V.b a@@129) (GenericMarshalling.V.b b@@78)) (|GenericMarshalling.V#Equal| a@@129 b@@78)))) :qid |unknown.0:0| :skolemid |1092| :pattern ( (|GenericMarshalling.V#Equal| a@@129 b@@78) (GenericMarshalling.V.VByteArray_q a@@129)) :pattern ( (|GenericMarshalling.V#Equal| a@@129 b@@78) (GenericMarshalling.V.VByteArray_q b@@78)) )))
(assert (forall ((a@@130 T@U) (b@@79 T@U) ) (!  (=> (and (and (= (type a@@130) DatatypeTypeType) (= (type b@@79) DatatypeTypeType)) (and (GenericMarshalling.V.VUint32Array_q a@@130) (GenericMarshalling.V.VUint32Array_q b@@79))) (and (=> (|GenericMarshalling.V#Equal| a@@130 b@@79) (|Seq#Equal| (GenericMarshalling.V.va a@@130) (GenericMarshalling.V.va b@@79))) (=> (|Seq#Equal| (GenericMarshalling.V.va a@@130) (GenericMarshalling.V.va b@@79)) (|GenericMarshalling.V#Equal| a@@130 b@@79)))) :qid |unknown.0:0| :skolemid |1093| :pattern ( (|GenericMarshalling.V#Equal| a@@130 b@@79) (GenericMarshalling.V.VUint32Array_q a@@130)) :pattern ( (|GenericMarshalling.V#Equal| a@@130 b@@79) (GenericMarshalling.V.VUint32Array_q b@@79)) )))
(assert (forall ((a@@131 T@U) (b@@80 T@U) ) (!  (=> (and (and (= (type a@@131) DatatypeTypeType) (= (type b@@80) DatatypeTypeType)) (and (GenericMarshalling.V.VUint64Array_q a@@131) (GenericMarshalling.V.VUint64Array_q b@@80))) (and (=> (|GenericMarshalling.V#Equal| a@@131 b@@80) (|Seq#Equal| (GenericMarshalling.V.ua a@@131) (GenericMarshalling.V.ua b@@80))) (=> (|Seq#Equal| (GenericMarshalling.V.ua a@@131) (GenericMarshalling.V.ua b@@80)) (|GenericMarshalling.V#Equal| a@@131 b@@80)))) :qid |unknown.0:0| :skolemid |1094| :pattern ( (|GenericMarshalling.V#Equal| a@@131 b@@80) (GenericMarshalling.V.VUint64Array_q a@@131)) :pattern ( (|GenericMarshalling.V#Equal| a@@131 b@@80) (GenericMarshalling.V.VUint64Array_q b@@80)) )))
(assert (forall ((a@@132 T@U) (b@@81 T@U) ) (!  (=> (and (and (= (type a@@132) DatatypeTypeType) (= (type b@@81) DatatypeTypeType)) (and (GenericMarshalling.V.VCase_q a@@132) (GenericMarshalling.V.VCase_q b@@81))) (and (=> (|GenericMarshalling.V#Equal| a@@132 b@@81) (and (= (GenericMarshalling.V.c a@@132) (GenericMarshalling.V.c b@@81)) (|GenericMarshalling.V#Equal| (GenericMarshalling.V.val a@@132) (GenericMarshalling.V.val b@@81)))) (=> (and (= (GenericMarshalling.V.c a@@132) (GenericMarshalling.V.c b@@81)) (|GenericMarshalling.V#Equal| (GenericMarshalling.V.val a@@132) (GenericMarshalling.V.val b@@81))) (|GenericMarshalling.V#Equal| a@@132 b@@81)))) :qid |unknown.0:0| :skolemid |1095| :pattern ( (|GenericMarshalling.V#Equal| a@@132 b@@81) (GenericMarshalling.V.VCase_q a@@132)) :pattern ( (|GenericMarshalling.V#Equal| a@@132 b@@81) (GenericMarshalling.V.VCase_q b@@81)) )))
(assert (forall ((a@@133 T@U) (b@@82 T@U) ) (!  (=> (and (= (type a@@133) DatatypeTypeType) (= (type b@@82) DatatypeTypeType)) (and (=> (|GenericMarshalling.V#Equal| a@@133 b@@82) (= a@@133 b@@82)) (=> (= a@@133 b@@82) (|GenericMarshalling.V#Equal| a@@133 b@@82)))) :qid |unknown.0:0| :skolemid |1096| :pattern ( (|GenericMarshalling.V#Equal| a@@133 b@@82)) )))
(assert (forall ((arg0@@237 T@U) (arg1@@106 T@U) ) (! (= (type (|#GenericMarshalling.ContentsTraceStep.ContentsTraceStep| arg0@@237 arg1@@106)) DatatypeTypeType) :qid |funType:#GenericMarshalling.ContentsTraceStep.ContentsTraceStep| :pattern ( (|#GenericMarshalling.ContentsTraceStep.ContentsTraceStep| arg0@@237 arg1@@106)) )))
(assert (forall ((|a#122#0#0| T@U) (|a#122#1#0| T@U) ) (!  (=> (and (= (type |a#122#0#0|) (SeqType BoxType)) (= (type |a#122#1#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#GenericMarshalling.ContentsTraceStep.ContentsTraceStep| |a#122#0#0| |a#122#1#0|)) |##GenericMarshalling.ContentsTraceStep.ContentsTraceStep|)) :qid |GenericM.197:48| :skolemid |1097| :pattern ( (|#GenericMarshalling.ContentsTraceStep.ContentsTraceStep| |a#122#0#0| |a#122#1#0|)) )))
(assert (forall ((d@@58 T@U) ) (!  (=> (= (type d@@58) DatatypeTypeType) (and (=> (GenericMarshalling.ContentsTraceStep.ContentsTraceStep_q d@@58) (= (DatatypeCtorId d@@58) |##GenericMarshalling.ContentsTraceStep.ContentsTraceStep|)) (=> (= (DatatypeCtorId d@@58) |##GenericMarshalling.ContentsTraceStep.ContentsTraceStep|) (GenericMarshalling.ContentsTraceStep.ContentsTraceStep_q d@@58)))) :qid |unknown.0:0| :skolemid |1098| :pattern ( (GenericMarshalling.ContentsTraceStep.ContentsTraceStep_q d@@58)) )))
(assert (forall ((d@@59 T@U) ) (!  (=> (and (= (type d@@59) DatatypeTypeType) (GenericMarshalling.ContentsTraceStep.ContentsTraceStep_q d@@59)) (exists ((|a#123#0#0| T@U) (|a#123#1#0| T@U) ) (!  (and (and (= (type |a#123#0#0|) (SeqType BoxType)) (= (type |a#123#1#0|) DatatypeTypeType)) (= d@@59 (|#GenericMarshalling.ContentsTraceStep.ContentsTraceStep| |a#123#0#0| |a#123#1#0|))) :qid |GenericM.197:48| :skolemid |1099| :no-pattern (type |a#123#0#0|) :no-pattern (type |a#123#1#0|) :no-pattern (U_2_int |a#123#0#0|) :no-pattern (U_2_bool |a#123#0#0|) :no-pattern (U_2_int |a#123#1#0|) :no-pattern (U_2_bool |a#123#1#0|) ))) :qid |unknown.0:0| :skolemid |1100| :pattern ( (GenericMarshalling.ContentsTraceStep.ContentsTraceStep_q d@@59)) )))
(assert (forall ((arg0@@238 T@U) ) (! (= (type (Tclass.Options.Option arg0@@238)) TyType) :qid |funType:Tclass.Options.Option| :pattern ( (Tclass.Options.Option arg0@@238)) )))
(assert (forall ((Options.Option$V T@U) ) (!  (=> (= (type Options.Option$V) TyType) (= (Tag (Tclass.Options.Option Options.Option$V)) Tagclass.Options.Option)) :qid |unknown.0:0| :skolemid |1101| :pattern ( (Tclass.Options.Option Options.Option$V)) )))
(assert (forall ((arg0@@239 T@U) ) (! (= (type (Tclass.Options.Option_0 arg0@@239)) TyType) :qid |funType:Tclass.Options.Option_0| :pattern ( (Tclass.Options.Option_0 arg0@@239)) )))
(assert (forall ((Options.Option$V@@0 T@U) ) (!  (=> (= (type Options.Option$V@@0) TyType) (= (Tclass.Options.Option_0 (Tclass.Options.Option Options.Option$V@@0)) Options.Option$V@@0)) :qid |unknown.0:0| :skolemid |1102| :pattern ( (Tclass.Options.Option Options.Option$V@@0)) )))
(assert (forall ((Options.Option$V@@1 T@U) (bx@@82 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@1) TyType) (= (type bx@@82) BoxType)) ($IsBox bx@@82 (Tclass.Options.Option Options.Option$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@82)) bx@@82) ($Is ($Unbox DatatypeTypeType bx@@82) (Tclass.Options.Option Options.Option$V@@1)))) :qid |unknown.0:0| :skolemid |1103| :pattern ( ($IsBox bx@@82 (Tclass.Options.Option Options.Option$V@@1))) )))
(assert (= (type Tclass.GenericMarshalling.ContentsTraceStep) TyType))
(assert (= (Tag Tclass.GenericMarshalling.ContentsTraceStep) Tagclass.GenericMarshalling.ContentsTraceStep))
(assert (forall ((bx@@83 T@U) ) (!  (=> (and (= (type bx@@83) BoxType) ($IsBox bx@@83 Tclass.GenericMarshalling.ContentsTraceStep)) (and (= ($Box ($Unbox DatatypeTypeType bx@@83)) bx@@83) ($Is ($Unbox DatatypeTypeType bx@@83) Tclass.GenericMarshalling.ContentsTraceStep))) :qid |unknown.0:0| :skolemid |1104| :pattern ( ($IsBox bx@@83 Tclass.GenericMarshalling.ContentsTraceStep)) )))
(assert (forall ((|a#124#0#0| T@U) (|a#124#1#0| T@U) ) (!  (=> (and (= (type |a#124#0#0|) (SeqType BoxType)) (= (type |a#124#1#0|) DatatypeTypeType)) (and (=> ($Is (|#GenericMarshalling.ContentsTraceStep.ContentsTraceStep| |a#124#0#0| |a#124#1#0|) Tclass.GenericMarshalling.ContentsTraceStep) (and ($Is |a#124#0#0| (TSeq Tclass.NativeTypes.byte)) ($Is |a#124#1#0| (Tclass.Options.Option Tclass.GenericMarshalling.V)))) (=> (and ($Is |a#124#0#0| (TSeq Tclass.NativeTypes.byte)) ($Is |a#124#1#0| (Tclass.Options.Option Tclass.GenericMarshalling.V))) ($Is (|#GenericMarshalling.ContentsTraceStep.ContentsTraceStep| |a#124#0#0| |a#124#1#0|) Tclass.GenericMarshalling.ContentsTraceStep)))) :qid |GenericM.197:48| :skolemid |1105| :pattern ( ($Is (|#GenericMarshalling.ContentsTraceStep.ContentsTraceStep| |a#124#0#0| |a#124#1#0|) Tclass.GenericMarshalling.ContentsTraceStep)) )))
(assert (forall ((|a#125#0#0| T@U) (|a#125#1#0| T@U) ($h@@50 T@U) ) (!  (=> (and (and (and (= (type |a#125#0#0|) (SeqType BoxType)) (= (type |a#125#1#0|) DatatypeTypeType)) (= (type $h@@50) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@50)) (and (=> ($IsAlloc (|#GenericMarshalling.ContentsTraceStep.ContentsTraceStep| |a#125#0#0| |a#125#1#0|) Tclass.GenericMarshalling.ContentsTraceStep $h@@50) (and ($IsAlloc |a#125#0#0| (TSeq Tclass.NativeTypes.byte) $h@@50) ($IsAlloc |a#125#1#0| (Tclass.Options.Option Tclass.GenericMarshalling.V) $h@@50))) (=> (and ($IsAlloc |a#125#0#0| (TSeq Tclass.NativeTypes.byte) $h@@50) ($IsAlloc |a#125#1#0| (Tclass.Options.Option Tclass.GenericMarshalling.V) $h@@50)) ($IsAlloc (|#GenericMarshalling.ContentsTraceStep.ContentsTraceStep| |a#125#0#0| |a#125#1#0|) Tclass.GenericMarshalling.ContentsTraceStep $h@@50)))) :qid |GenericM.197:48| :skolemid |1106| :pattern ( ($IsAlloc (|#GenericMarshalling.ContentsTraceStep.ContentsTraceStep| |a#125#0#0| |a#125#1#0|) Tclass.GenericMarshalling.ContentsTraceStep $h@@50)) )))
(assert (forall ((arg0@@240 T@U) ) (! (= (type (GenericMarshalling.ContentsTraceStep.data arg0@@240)) (SeqType BoxType)) :qid |funType:GenericMarshalling.ContentsTraceStep.data| :pattern ( (GenericMarshalling.ContentsTraceStep.data arg0@@240)) )))
(assert (forall ((d@@60 T@U) ($h@@51 T@U) ) (!  (=> (and (and (= (type d@@60) DatatypeTypeType) (= (type $h@@51) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@51) (and (GenericMarshalling.ContentsTraceStep.ContentsTraceStep_q d@@60) ($IsAlloc d@@60 Tclass.GenericMarshalling.ContentsTraceStep $h@@51)))) ($IsAlloc (GenericMarshalling.ContentsTraceStep.data d@@60) (TSeq Tclass.NativeTypes.byte) $h@@51)) :qid |unknown.0:0| :skolemid |1107| :pattern ( ($IsAlloc (GenericMarshalling.ContentsTraceStep.data d@@60) (TSeq Tclass.NativeTypes.byte) $h@@51)) )))
(assert (forall ((arg0@@241 T@U) ) (! (= (type (GenericMarshalling.ContentsTraceStep.val arg0@@241)) DatatypeTypeType) :qid |funType:GenericMarshalling.ContentsTraceStep.val| :pattern ( (GenericMarshalling.ContentsTraceStep.val arg0@@241)) )))
(assert (forall ((d@@61 T@U) ($h@@52 T@U) ) (!  (=> (and (and (= (type d@@61) DatatypeTypeType) (= (type $h@@52) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@52) (and (GenericMarshalling.ContentsTraceStep.ContentsTraceStep_q d@@61) ($IsAlloc d@@61 Tclass.GenericMarshalling.ContentsTraceStep $h@@52)))) ($IsAlloc (GenericMarshalling.ContentsTraceStep.val d@@61) (Tclass.Options.Option Tclass.GenericMarshalling.V) $h@@52)) :qid |unknown.0:0| :skolemid |1108| :pattern ( ($IsAlloc (GenericMarshalling.ContentsTraceStep.val d@@61) (Tclass.Options.Option Tclass.GenericMarshalling.V) $h@@52)) )))
(assert (forall ((|a#126#0#0| T@U) (|a#126#1#0| T@U) ) (!  (=> (and (= (type |a#126#0#0|) (SeqType BoxType)) (= (type |a#126#1#0|) DatatypeTypeType)) (= (|#GenericMarshalling.ContentsTraceStep.ContentsTraceStep| (Lit |a#126#0#0|) (Lit |a#126#1#0|)) (Lit (|#GenericMarshalling.ContentsTraceStep.ContentsTraceStep| |a#126#0#0| |a#126#1#0|)))) :qid |GenericM.197:48| :skolemid |1109| :pattern ( (|#GenericMarshalling.ContentsTraceStep.ContentsTraceStep| (Lit |a#126#0#0|) (Lit |a#126#1#0|))) )))
(assert (forall ((|a#127#0#0| T@U) (|a#127#1#0| T@U) ) (!  (=> (and (= (type |a#127#0#0|) (SeqType BoxType)) (= (type |a#127#1#0|) DatatypeTypeType)) (= (GenericMarshalling.ContentsTraceStep.data (|#GenericMarshalling.ContentsTraceStep.ContentsTraceStep| |a#127#0#0| |a#127#1#0|)) |a#127#0#0|)) :qid |GenericM.197:48| :skolemid |1110| :pattern ( (|#GenericMarshalling.ContentsTraceStep.ContentsTraceStep| |a#127#0#0| |a#127#1#0|)) )))
(assert (forall ((|a#128#0#0| T@U) (|a#128#1#0| T@U) (i@@38 Int) ) (!  (=> (and (and (= (type |a#128#0#0|) (SeqType BoxType)) (= (type |a#128#1#0|) DatatypeTypeType)) (and (<= 0 i@@38) (< i@@38 (|Seq#Length| |a#128#0#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#128#0#0| i@@38))) (DtRank (|#GenericMarshalling.ContentsTraceStep.ContentsTraceStep| |a#128#0#0| |a#128#1#0|)))) :qid |GenericM.197:48| :skolemid |1111| :pattern ( (|Seq#Index| |a#128#0#0| i@@38) (|#GenericMarshalling.ContentsTraceStep.ContentsTraceStep| |a#128#0#0| |a#128#1#0|)) )))
(assert (forall ((|a#129#0#0| T@U) (|a#129#1#0| T@U) ) (!  (=> (and (= (type |a#129#0#0|) (SeqType BoxType)) (= (type |a#129#1#0|) DatatypeTypeType)) (< (|Seq#Rank| |a#129#0#0|) (DtRank (|#GenericMarshalling.ContentsTraceStep.ContentsTraceStep| |a#129#0#0| |a#129#1#0|)))) :qid |GenericM.197:48| :skolemid |1112| :pattern ( (|#GenericMarshalling.ContentsTraceStep.ContentsTraceStep| |a#129#0#0| |a#129#1#0|)) )))
(assert (forall ((|a#130#0#0| T@U) (|a#130#1#0| T@U) ) (!  (=> (and (= (type |a#130#0#0|) (SeqType BoxType)) (= (type |a#130#1#0|) DatatypeTypeType)) (= (GenericMarshalling.ContentsTraceStep.val (|#GenericMarshalling.ContentsTraceStep.ContentsTraceStep| |a#130#0#0| |a#130#1#0|)) |a#130#1#0|)) :qid |GenericM.197:48| :skolemid |1113| :pattern ( (|#GenericMarshalling.ContentsTraceStep.ContentsTraceStep| |a#130#0#0| |a#130#1#0|)) )))
(assert (forall ((|a#131#0#0| T@U) (|a#131#1#0| T@U) ) (!  (=> (and (= (type |a#131#0#0|) (SeqType BoxType)) (= (type |a#131#1#0|) DatatypeTypeType)) (< (DtRank |a#131#1#0|) (DtRank (|#GenericMarshalling.ContentsTraceStep.ContentsTraceStep| |a#131#0#0| |a#131#1#0|)))) :qid |GenericM.197:48| :skolemid |1114| :pattern ( (|#GenericMarshalling.ContentsTraceStep.ContentsTraceStep| |a#131#0#0| |a#131#1#0|)) )))
(assert (forall ((d@@62 T@U) ) (!  (=> (and (= (type d@@62) DatatypeTypeType) (|$IsA#GenericMarshalling.ContentsTraceStep| d@@62)) (GenericMarshalling.ContentsTraceStep.ContentsTraceStep_q d@@62)) :qid |unknown.0:0| :skolemid |1115| :pattern ( (|$IsA#GenericMarshalling.ContentsTraceStep| d@@62)) )))
(assert (forall ((d@@63 T@U) ) (!  (=> (and (= (type d@@63) DatatypeTypeType) ($Is d@@63 Tclass.GenericMarshalling.ContentsTraceStep)) (GenericMarshalling.ContentsTraceStep.ContentsTraceStep_q d@@63)) :qid |unknown.0:0| :skolemid |1116| :pattern ( (GenericMarshalling.ContentsTraceStep.ContentsTraceStep_q d@@63) ($Is d@@63 Tclass.GenericMarshalling.ContentsTraceStep)) )))
(assert (forall ((a@@134 T@U) (b@@83 T@U) ) (!  (=> (and (and (= (type a@@134) DatatypeTypeType) (= (type b@@83) DatatypeTypeType)) true) (and (=> (|GenericMarshalling.ContentsTraceStep#Equal| a@@134 b@@83) (and (|Seq#Equal| (GenericMarshalling.ContentsTraceStep.data a@@134) (GenericMarshalling.ContentsTraceStep.data b@@83)) (|Options.Option#Equal| (GenericMarshalling.ContentsTraceStep.val a@@134) (GenericMarshalling.ContentsTraceStep.val b@@83)))) (=> (and (|Seq#Equal| (GenericMarshalling.ContentsTraceStep.data a@@134) (GenericMarshalling.ContentsTraceStep.data b@@83)) (|Options.Option#Equal| (GenericMarshalling.ContentsTraceStep.val a@@134) (GenericMarshalling.ContentsTraceStep.val b@@83))) (|GenericMarshalling.ContentsTraceStep#Equal| a@@134 b@@83)))) :qid |unknown.0:0| :skolemid |1117| :pattern ( (|GenericMarshalling.ContentsTraceStep#Equal| a@@134 b@@83)) )))
(assert (forall ((a@@135 T@U) (b@@84 T@U) ) (!  (=> (and (= (type a@@135) DatatypeTypeType) (= (type b@@84) DatatypeTypeType)) (and (=> (|GenericMarshalling.ContentsTraceStep#Equal| a@@135 b@@84) (= a@@135 b@@84)) (=> (= a@@135 b@@84) (|GenericMarshalling.ContentsTraceStep#Equal| a@@135 b@@84)))) :qid |unknown.0:0| :skolemid |1118| :pattern ( (|GenericMarshalling.ContentsTraceStep#Equal| a@@135 b@@84)) )))
(assert (= (type Tclass.GenericMarshalling.__default) TyType))
(assert (= (Tag Tclass.GenericMarshalling.__default) Tagclass.GenericMarshalling.__default))
(assert (forall ((bx@@84 T@U) ) (!  (=> (and (= (type bx@@84) BoxType) ($IsBox bx@@84 Tclass.GenericMarshalling.__default)) (and (= ($Box ($Unbox refType bx@@84)) bx@@84) ($Is ($Unbox refType bx@@84) Tclass.GenericMarshalling.__default))) :qid |unknown.0:0| :skolemid |1119| :pattern ( ($IsBox bx@@84 Tclass.GenericMarshalling.__default)) )))
(assert (forall (($o@@9 T@U) ) (!  (=> (= (type $o@@9) refType) (and (=> ($Is $o@@9 Tclass.GenericMarshalling.__default) (or (= $o@@9 null) (= (dtype $o@@9) Tclass.GenericMarshalling.__default))) (=> (or (= $o@@9 null) (= (dtype $o@@9) Tclass.GenericMarshalling.__default)) ($Is $o@@9 Tclass.GenericMarshalling.__default)))) :qid |unknown.0:0| :skolemid |1120| :pattern ( ($Is $o@@9 Tclass.GenericMarshalling.__default)) )))
(assert (forall (($o@@10 T@U) ($h@@53 T@U) ) (!  (=> (and (= (type $o@@10) refType) (= (type $h@@53) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@10 Tclass.GenericMarshalling.__default $h@@53) (or (= $o@@10 null) (U_2_bool (MapType1Select (MapType0Select $h@@53 $o@@10) alloc)))) (=> (or (= $o@@10 null) (U_2_bool (MapType1Select (MapType0Select $h@@53 $o@@10) alloc))) ($IsAlloc $o@@10 Tclass.GenericMarshalling.__default $h@@53)))) :qid |unknown.0:0| :skolemid |1121| :pattern ( ($IsAlloc $o@@10 Tclass.GenericMarshalling.__default $h@@53)) )))
(assert (forall (($ly T@U) (|val#0| T@U) (|grammar#0| T@U) ) (!  (=> (and (and (= (type $ly) LayerTypeType) (= (type |val#0|) DatatypeTypeType)) (= (type |grammar#0|) DatatypeTypeType)) (and (=> (GenericMarshalling.__default.ValInGrammar ($LS $ly) |val#0| |grammar#0|) (GenericMarshalling.__default.ValInGrammar $ly |val#0| |grammar#0|)) (=> (GenericMarshalling.__default.ValInGrammar $ly |val#0| |grammar#0|) (GenericMarshalling.__default.ValInGrammar ($LS $ly) |val#0| |grammar#0|)))) :qid |GenericM.52:11| :skolemid |1122| :pattern ( (GenericMarshalling.__default.ValInGrammar ($LS $ly) |val#0| |grammar#0|)) )))
(assert  (and (forall ((arg0@@242 T@U) ) (! (= (type (AsFuelBottom arg0@@242)) LayerTypeType) :qid |funType:AsFuelBottom| :pattern ( (AsFuelBottom arg0@@242)) )) (= (type $LZ) LayerTypeType)))
(assert (forall (($ly@@0 T@U) (|val#0@@0| T@U) (|grammar#0@@0| T@U) ) (!  (=> (and (and (= (type $ly@@0) LayerTypeType) (= (type |val#0@@0|) DatatypeTypeType)) (= (type |grammar#0@@0|) DatatypeTypeType)) (and (=> (GenericMarshalling.__default.ValInGrammar $ly@@0 |val#0@@0| |grammar#0@@0|) (GenericMarshalling.__default.ValInGrammar $LZ |val#0@@0| |grammar#0@@0|)) (=> (GenericMarshalling.__default.ValInGrammar $LZ |val#0@@0| |grammar#0@@0|) (GenericMarshalling.__default.ValInGrammar $ly@@0 |val#0@@0| |grammar#0@@0|)))) :qid |GenericM.52:11| :skolemid |1123| :pattern ( (GenericMarshalling.__default.ValInGrammar (AsFuelBottom $ly@@0) |val#0@@0| |grammar#0@@0|)) )))
(assert  (=> (<= 7 $FunctionContextHeight) (forall (($ly@@1 T@U) (|val#0@@1| T@U) (|grammar#0@@1| T@U) ) (!  (=> (and (and (and (= (type $ly@@1) LayerTypeType) (= (type |val#0@@1|) DatatypeTypeType)) (= (type |grammar#0@@1|) DatatypeTypeType)) (or (|GenericMarshalling.__default.ValInGrammar#canCall| |val#0@@1| |grammar#0@@1|) (and (not (= 7 $FunctionContextHeight)) (and ($Is |val#0@@1| Tclass.GenericMarshalling.V) ($Is |grammar#0@@1| Tclass.GenericMarshalling.G))))) true) :qid |GenericM.52:11| :skolemid |1124| :pattern ( (GenericMarshalling.__default.ValInGrammar $ly@@1 |val#0@@1| |grammar#0@@1|)) ))))
(assert (forall (($ly@@2 T@U) (|val#0@@2| T@U) (|grammar#0@@2| T@U) ) (!  (=> (and (and (and (= (type $ly@@2) LayerTypeType) (= (type |val#0@@2|) DatatypeTypeType)) (= (type |grammar#0@@2|) DatatypeTypeType)) (and ($Is |val#0@@2| Tclass.GenericMarshalling.V) ($Is |grammar#0@@2| Tclass.GenericMarshalling.G))) (and (=> (|GenericMarshalling.__default.ValInGrammar#requires| $ly@@2 |val#0@@2| |grammar#0@@2|) true) (=> true (|GenericMarshalling.__default.ValInGrammar#requires| $ly@@2 |val#0@@2| |grammar#0@@2|)))) :qid |GenericM.52:11| :skolemid |1125| :pattern ( (|GenericMarshalling.__default.ValInGrammar#requires| $ly@@2 |val#0@@2| |grammar#0@@2|)) )))
(assert  (=> (<= 7 $FunctionContextHeight) (forall (($ly@@3 T@U) (|val#0@@3| T@U) (|grammar#0@@3| T@U) ) (!  (=> (and (and (and (= (type $ly@@3) LayerTypeType) (= (type |val#0@@3|) DatatypeTypeType)) (= (type |grammar#0@@3|) DatatypeTypeType)) (or (|GenericMarshalling.__default.ValInGrammar#canCall| |val#0@@3| |grammar#0@@3|) (and (not (= 7 $FunctionContextHeight)) (and ($Is |val#0@@3| Tclass.GenericMarshalling.V) ($Is |grammar#0@@3| Tclass.GenericMarshalling.G))))) (and (=> (not (GenericMarshalling.V.VUint32_q |val#0@@3|)) (=> (not (GenericMarshalling.V.VUint64_q |val#0@@3|)) (and (=> (GenericMarshalling.V.VArray_q |val#0@@3|) (let ((|a#0@@1| (GenericMarshalling.V.a |val#0@@3|))) (=> (GenericMarshalling.G.GArray_q |grammar#0@@3|) (forall ((|v#0| T@U) ) (!  (=> (and (and (= (type |v#0|) DatatypeTypeType) ($Is |v#0| Tclass.GenericMarshalling.V)) (|Seq#Contains| |a#0@@1| ($Box |v#0|))) (|GenericMarshalling.__default.ValInGrammar#canCall| |v#0| (GenericMarshalling.G.elt |grammar#0@@3|))) :qid |GenericM.57:54| :skolemid |1126| :pattern ( (GenericMarshalling.__default.ValInGrammar $ly@@3 |v#0| (GenericMarshalling.G.elt |grammar#0@@3|))) :pattern ( (|Seq#Contains| |a#0@@1| ($Box |v#0|))) ))))) (=> (not (GenericMarshalling.V.VArray_q |val#0@@3|)) (and (=> (GenericMarshalling.V.VTuple_q |val#0@@3|) (let ((|t#0| (GenericMarshalling.V.t |val#0@@3|))) (=> (= (|Seq#Length| |t#0|) (|Seq#Length| (GenericMarshalling.G.t |grammar#0@@3|))) (forall ((|i#0| Int) ) (!  (=> (< |i#0| (|Seq#Length| |t#0|)) (|GenericMarshalling.__default.ValInGrammar#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |t#0| |i#0|)) ($Unbox DatatypeTypeType (|Seq#Index| (GenericMarshalling.G.t |grammar#0@@3|) |i#0|)))) :qid |GenericM.59:41| :skolemid |1127| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (GenericMarshalling.G.t |grammar#0@@3|) |i#0|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |t#0| |i#0|))) ))))) (=> (not (GenericMarshalling.V.VTuple_q |val#0@@3|)) (=> (not (GenericMarshalling.V.VByteArray_q |val#0@@3|)) (=> (not (GenericMarshalling.V.VUint32Array_q |val#0@@3|)) (=> (not (GenericMarshalling.V.VUint64Array_q |val#0@@3|)) (let ((|v#1| (GenericMarshalling.V.val |val#0@@3|))) (let ((|c#0@@3| (GenericMarshalling.V.c |val#0@@3|))) (=> (< |c#0@@3| (|Seq#Length| (GenericMarshalling.G.cases |grammar#0@@3|))) (|GenericMarshalling.__default.ValInGrammar#canCall| |v#1| ($Unbox DatatypeTypeType (|Seq#Index| (GenericMarshalling.G.cases |grammar#0@@3|) |c#0@@3|))))))))))))))) (and (=> (GenericMarshalling.__default.ValInGrammar ($LS $ly@@3) |val#0@@3| |grammar#0@@3|) (ite (GenericMarshalling.V.VUint32_q |val#0@@3|) (GenericMarshalling.G.GUint32_q |grammar#0@@3|) (ite (GenericMarshalling.V.VUint64_q |val#0@@3|) (GenericMarshalling.G.GUint64_q |grammar#0@@3|) (ite (GenericMarshalling.V.VArray_q |val#0@@3|) (let ((|a#1| (GenericMarshalling.V.a |val#0@@3|))) (and (GenericMarshalling.G.GArray_q |grammar#0@@3|) (forall ((|v#2| T@U) ) (!  (=> (and (and (= (type |v#2|) DatatypeTypeType) ($Is |v#2| Tclass.GenericMarshalling.V)) (|Seq#Contains| |a#1| ($Box |v#2|))) (GenericMarshalling.__default.ValInGrammar $ly@@3 |v#2| (GenericMarshalling.G.elt |grammar#0@@3|))) :qid |GenericM.57:54| :skolemid |1128| :pattern ( (GenericMarshalling.__default.ValInGrammar $ly@@3 |v#2| (GenericMarshalling.G.elt |grammar#0@@3|))) :pattern ( (|Seq#Contains| |a#1| ($Box |v#2|))) )))) (ite (GenericMarshalling.V.VTuple_q |val#0@@3|) (let ((|t#1| (GenericMarshalling.V.t |val#0@@3|))) (and (and (GenericMarshalling.G.GTuple_q |grammar#0@@3|) (= (|Seq#Length| |t#1|) (|Seq#Length| (GenericMarshalling.G.t |grammar#0@@3|)))) (forall ((|i#1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1|) (< |i#1| (|Seq#Length| |t#1|))) (GenericMarshalling.__default.ValInGrammar $ly@@3 ($Unbox DatatypeTypeType (|Seq#Index| |t#1| |i#1|)) ($Unbox DatatypeTypeType (|Seq#Index| (GenericMarshalling.G.t |grammar#0@@3|) |i#1|))))) :qid |GenericM.59:41| :skolemid |1129| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (GenericMarshalling.G.t |grammar#0@@3|) |i#1|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |t#1| |i#1|))) )))) (ite (GenericMarshalling.V.VByteArray_q |val#0@@3|) (GenericMarshalling.G.GByteArray_q |grammar#0@@3|) (ite (GenericMarshalling.V.VUint32Array_q |val#0@@3|) (GenericMarshalling.G.GUint32Array_q |grammar#0@@3|) (ite (GenericMarshalling.V.VUint64Array_q |val#0@@3|) (GenericMarshalling.G.GUint64Array_q |grammar#0@@3|) (let ((|v#3| (GenericMarshalling.V.val |val#0@@3|))) (let ((|c#1| (GenericMarshalling.V.c |val#0@@3|))) (and (and (GenericMarshalling.G.GTaggedUnion_q |grammar#0@@3|) (< |c#1| (|Seq#Length| (GenericMarshalling.G.cases |grammar#0@@3|)))) (GenericMarshalling.__default.ValInGrammar $ly@@3 |v#3| ($Unbox DatatypeTypeType (|Seq#Index| (GenericMarshalling.G.cases |grammar#0@@3|) |c#1|)))))))))))))) (=> (ite (GenericMarshalling.V.VUint32_q |val#0@@3|) (GenericMarshalling.G.GUint32_q |grammar#0@@3|) (ite (GenericMarshalling.V.VUint64_q |val#0@@3|) (GenericMarshalling.G.GUint64_q |grammar#0@@3|) (ite (GenericMarshalling.V.VArray_q |val#0@@3|) (let ((|a#1@@0| (GenericMarshalling.V.a |val#0@@3|))) (and (GenericMarshalling.G.GArray_q |grammar#0@@3|) (forall ((|v#2@@0| T@U) ) (!  (=> (and (and (= (type |v#2@@0|) DatatypeTypeType) ($Is |v#2@@0| Tclass.GenericMarshalling.V)) (|Seq#Contains| |a#1@@0| ($Box |v#2@@0|))) (GenericMarshalling.__default.ValInGrammar $ly@@3 |v#2@@0| (GenericMarshalling.G.elt |grammar#0@@3|))) :qid |GenericM.57:54| :skolemid |1128| :pattern ( (GenericMarshalling.__default.ValInGrammar $ly@@3 |v#2@@0| (GenericMarshalling.G.elt |grammar#0@@3|))) :pattern ( (|Seq#Contains| |a#1@@0| ($Box |v#2@@0|))) )))) (ite (GenericMarshalling.V.VTuple_q |val#0@@3|) (let ((|t#1@@0| (GenericMarshalling.V.t |val#0@@3|))) (and (and (GenericMarshalling.G.GTuple_q |grammar#0@@3|) (= (|Seq#Length| |t#1@@0|) (|Seq#Length| (GenericMarshalling.G.t |grammar#0@@3|)))) (forall ((|i#1@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@0|) (< |i#1@@0| (|Seq#Length| |t#1@@0|))) (GenericMarshalling.__default.ValInGrammar $ly@@3 ($Unbox DatatypeTypeType (|Seq#Index| |t#1@@0| |i#1@@0|)) ($Unbox DatatypeTypeType (|Seq#Index| (GenericMarshalling.G.t |grammar#0@@3|) |i#1@@0|))))) :qid |GenericM.59:41| :skolemid |1129| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (GenericMarshalling.G.t |grammar#0@@3|) |i#1@@0|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |t#1@@0| |i#1@@0|))) )))) (ite (GenericMarshalling.V.VByteArray_q |val#0@@3|) (GenericMarshalling.G.GByteArray_q |grammar#0@@3|) (ite (GenericMarshalling.V.VUint32Array_q |val#0@@3|) (GenericMarshalling.G.GUint32Array_q |grammar#0@@3|) (ite (GenericMarshalling.V.VUint64Array_q |val#0@@3|) (GenericMarshalling.G.GUint64Array_q |grammar#0@@3|) (let ((|v#3@@0| (GenericMarshalling.V.val |val#0@@3|))) (let ((|c#1@@0| (GenericMarshalling.V.c |val#0@@3|))) (and (and (GenericMarshalling.G.GTaggedUnion_q |grammar#0@@3|) (< |c#1@@0| (|Seq#Length| (GenericMarshalling.G.cases |grammar#0@@3|)))) (GenericMarshalling.__default.ValInGrammar $ly@@3 |v#3@@0| ($Unbox DatatypeTypeType (|Seq#Index| (GenericMarshalling.G.cases |grammar#0@@3|) |c#1@@0|))))))))))))) (GenericMarshalling.__default.ValInGrammar ($LS $ly@@3) |val#0@@3| |grammar#0@@3|))))) :qid |GenericM.52:11| :skolemid |1130| :pattern ( (GenericMarshalling.__default.ValInGrammar ($LS $ly@@3) |val#0@@3| |grammar#0@@3|)) ))))
(assert  (=> (<= 7 $FunctionContextHeight) (forall (($ly@@4 T@U) (|val#0@@4| T@U) (|grammar#0@@4| T@U) ) (!  (=> (and (and (and (= (type $ly@@4) LayerTypeType) (= (type |val#0@@4|) DatatypeTypeType)) (= (type |grammar#0@@4|) DatatypeTypeType)) (or (|GenericMarshalling.__default.ValInGrammar#canCall| (Lit |val#0@@4|) (Lit |grammar#0@@4|)) (and (not (= 7 $FunctionContextHeight)) (and ($Is |val#0@@4| Tclass.GenericMarshalling.V) ($Is |grammar#0@@4| Tclass.GenericMarshalling.G))))) (and (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.V.VUint32_q (Lit |val#0@@4|)))))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.V.VUint64_q (Lit |val#0@@4|)))))) (and (=> (U_2_bool (Lit (bool_2_U (GenericMarshalling.V.VArray_q (Lit |val#0@@4|))))) (let ((|a#2| (Lit (GenericMarshalling.V.a (Lit |val#0@@4|))))) (=> (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GArray_q (Lit |grammar#0@@4|))))) (forall ((|v#4| T@U) ) (!  (=> (and (and (= (type |v#4|) DatatypeTypeType) ($Is |v#4| Tclass.GenericMarshalling.V)) (|Seq#Contains| |a#2| ($Box |v#4|))) (|GenericMarshalling.__default.ValInGrammar#canCall| |v#4| (Lit (GenericMarshalling.G.elt (Lit |grammar#0@@4|))))) :qid |GenericM.57:54| :skolemid |1131| :pattern ( (GenericMarshalling.__default.ValInGrammar ($LS $ly@@4) |v#4| (GenericMarshalling.G.elt |grammar#0@@4|))) :pattern ( (|Seq#Contains| |a#2| ($Box |v#4|))) ))))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.V.VArray_q (Lit |val#0@@4|)))))) (and (=> (U_2_bool (Lit (bool_2_U (GenericMarshalling.V.VTuple_q (Lit |val#0@@4|))))) (let ((|t#2| (Lit (GenericMarshalling.V.t (Lit |val#0@@4|))))) (=> (= (|Seq#Length| |t#2|) (|Seq#Length| (Lit (GenericMarshalling.G.t (Lit |grammar#0@@4|))))) (forall ((|i#2| Int) ) (!  (=> (< |i#2| (|Seq#Length| |t#2|)) (|GenericMarshalling.__default.ValInGrammar#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |t#2| |i#2|)) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (GenericMarshalling.G.t (Lit |grammar#0@@4|))) |i#2|)))) :qid |GenericM.59:41| :skolemid |1132| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (GenericMarshalling.G.t |grammar#0@@4|) |i#2|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |t#2| |i#2|))) ))))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.V.VTuple_q (Lit |val#0@@4|)))))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.V.VByteArray_q (Lit |val#0@@4|)))))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.V.VUint32Array_q (Lit |val#0@@4|)))))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.V.VUint64Array_q (Lit |val#0@@4|)))))) (let ((|v#5| (Lit (GenericMarshalling.V.val (Lit |val#0@@4|))))) (let ((|c#2| (LitInt (GenericMarshalling.V.c (Lit |val#0@@4|))))) (=> (< |c#2| (|Seq#Length| (Lit (GenericMarshalling.G.cases (Lit |grammar#0@@4|))))) (|GenericMarshalling.__default.ValInGrammar#canCall| |v#5| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (GenericMarshalling.G.cases (Lit |grammar#0@@4|))) |c#2|))))))))))))))) (and (=> (GenericMarshalling.__default.ValInGrammar ($LS $ly@@4) (Lit |val#0@@4|) (Lit |grammar#0@@4|)) (ite (GenericMarshalling.V.VUint32_q (Lit |val#0@@4|)) (GenericMarshalling.G.GUint32_q (Lit |grammar#0@@4|)) (ite (GenericMarshalling.V.VUint64_q (Lit |val#0@@4|)) (GenericMarshalling.G.GUint64_q (Lit |grammar#0@@4|)) (ite (GenericMarshalling.V.VArray_q (Lit |val#0@@4|)) (let ((|a#3| (Lit (GenericMarshalling.V.a (Lit |val#0@@4|))))) (and (GenericMarshalling.G.GArray_q (Lit |grammar#0@@4|)) (forall ((|v#6| T@U) ) (!  (=> (and (and (= (type |v#6|) DatatypeTypeType) ($Is |v#6| Tclass.GenericMarshalling.V)) (|Seq#Contains| |a#3| ($Box |v#6|))) (GenericMarshalling.__default.ValInGrammar ($LS $ly@@4) |v#6| (Lit (GenericMarshalling.G.elt (Lit |grammar#0@@4|))))) :qid |GenericM.57:54| :skolemid |1133| :pattern ( (GenericMarshalling.__default.ValInGrammar ($LS $ly@@4) |v#6| (GenericMarshalling.G.elt |grammar#0@@4|))) :pattern ( (|Seq#Contains| |a#3| ($Box |v#6|))) )))) (ite (GenericMarshalling.V.VTuple_q (Lit |val#0@@4|)) (let ((|t#3| (Lit (GenericMarshalling.V.t (Lit |val#0@@4|))))) (and (and (GenericMarshalling.G.GTuple_q (Lit |grammar#0@@4|)) (= (|Seq#Length| |t#3|) (|Seq#Length| (Lit (GenericMarshalling.G.t (Lit |grammar#0@@4|)))))) (forall ((|i#3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3|) (< |i#3| (|Seq#Length| |t#3|))) (GenericMarshalling.__default.ValInGrammar ($LS $ly@@4) ($Unbox DatatypeTypeType (|Seq#Index| |t#3| |i#3|)) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (GenericMarshalling.G.t (Lit |grammar#0@@4|))) |i#3|))))) :qid |GenericM.59:41| :skolemid |1134| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (GenericMarshalling.G.t |grammar#0@@4|) |i#3|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |t#3| |i#3|))) )))) (ite (GenericMarshalling.V.VByteArray_q (Lit |val#0@@4|)) (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GByteArray_q (Lit |grammar#0@@4|))))) (ite (GenericMarshalling.V.VUint32Array_q (Lit |val#0@@4|)) (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GUint32Array_q (Lit |grammar#0@@4|))))) (ite (GenericMarshalling.V.VUint64Array_q (Lit |val#0@@4|)) (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GUint64Array_q (Lit |grammar#0@@4|))))) (let ((|v#7| (Lit (GenericMarshalling.V.val (Lit |val#0@@4|))))) (let ((|c#3| (LitInt (GenericMarshalling.V.c (Lit |val#0@@4|))))) (and (and (GenericMarshalling.G.GTaggedUnion_q (Lit |grammar#0@@4|)) (< |c#3| (|Seq#Length| (Lit (GenericMarshalling.G.cases (Lit |grammar#0@@4|)))))) (GenericMarshalling.__default.ValInGrammar ($LS $ly@@4) |v#7| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (GenericMarshalling.G.cases (Lit |grammar#0@@4|))) |c#3|)))))))))))))) (=> (ite (GenericMarshalling.V.VUint32_q (Lit |val#0@@4|)) (GenericMarshalling.G.GUint32_q (Lit |grammar#0@@4|)) (ite (GenericMarshalling.V.VUint64_q (Lit |val#0@@4|)) (GenericMarshalling.G.GUint64_q (Lit |grammar#0@@4|)) (ite (GenericMarshalling.V.VArray_q (Lit |val#0@@4|)) (let ((|a#3@@0| (Lit (GenericMarshalling.V.a (Lit |val#0@@4|))))) (and (GenericMarshalling.G.GArray_q (Lit |grammar#0@@4|)) (forall ((|v#6@@0| T@U) ) (!  (=> (and (and (= (type |v#6@@0|) DatatypeTypeType) ($Is |v#6@@0| Tclass.GenericMarshalling.V)) (|Seq#Contains| |a#3@@0| ($Box |v#6@@0|))) (GenericMarshalling.__default.ValInGrammar ($LS $ly@@4) |v#6@@0| (Lit (GenericMarshalling.G.elt (Lit |grammar#0@@4|))))) :qid |GenericM.57:54| :skolemid |1133| :pattern ( (GenericMarshalling.__default.ValInGrammar ($LS $ly@@4) |v#6@@0| (GenericMarshalling.G.elt |grammar#0@@4|))) :pattern ( (|Seq#Contains| |a#3@@0| ($Box |v#6@@0|))) )))) (ite (GenericMarshalling.V.VTuple_q (Lit |val#0@@4|)) (let ((|t#3@@0| (Lit (GenericMarshalling.V.t (Lit |val#0@@4|))))) (and (and (GenericMarshalling.G.GTuple_q (Lit |grammar#0@@4|)) (= (|Seq#Length| |t#3@@0|) (|Seq#Length| (Lit (GenericMarshalling.G.t (Lit |grammar#0@@4|)))))) (forall ((|i#3@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@0|) (< |i#3@@0| (|Seq#Length| |t#3@@0|))) (GenericMarshalling.__default.ValInGrammar ($LS $ly@@4) ($Unbox DatatypeTypeType (|Seq#Index| |t#3@@0| |i#3@@0|)) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (GenericMarshalling.G.t (Lit |grammar#0@@4|))) |i#3@@0|))))) :qid |GenericM.59:41| :skolemid |1134| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (GenericMarshalling.G.t |grammar#0@@4|) |i#3@@0|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |t#3@@0| |i#3@@0|))) )))) (ite (GenericMarshalling.V.VByteArray_q (Lit |val#0@@4|)) (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GByteArray_q (Lit |grammar#0@@4|))))) (ite (GenericMarshalling.V.VUint32Array_q (Lit |val#0@@4|)) (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GUint32Array_q (Lit |grammar#0@@4|))))) (ite (GenericMarshalling.V.VUint64Array_q (Lit |val#0@@4|)) (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GUint64Array_q (Lit |grammar#0@@4|))))) (let ((|v#7@@0| (Lit (GenericMarshalling.V.val (Lit |val#0@@4|))))) (let ((|c#3@@0| (LitInt (GenericMarshalling.V.c (Lit |val#0@@4|))))) (and (and (GenericMarshalling.G.GTaggedUnion_q (Lit |grammar#0@@4|)) (< |c#3@@0| (|Seq#Length| (Lit (GenericMarshalling.G.cases (Lit |grammar#0@@4|)))))) (GenericMarshalling.__default.ValInGrammar ($LS $ly@@4) |v#7@@0| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (GenericMarshalling.G.cases (Lit |grammar#0@@4|))) |c#3@@0|))))))))))))) (GenericMarshalling.__default.ValInGrammar ($LS $ly@@4) (Lit |val#0@@4|) (Lit |grammar#0@@4|)))))) :qid |GenericM.52:11| :weight 3 :skolemid |1135| :pattern ( (GenericMarshalling.__default.ValInGrammar ($LS $ly@@4) (Lit |val#0@@4|) (Lit |grammar#0@@4|))) ))))
(assert (forall (($ly@@5 T@U) (|grammar#0@@5| T@U) ) (!  (=> (and (= (type $ly@@5) LayerTypeType) (= (type |grammar#0@@5|) DatatypeTypeType)) (and (=> (GenericMarshalling.__default.ValidGrammar ($LS $ly@@5) |grammar#0@@5|) (GenericMarshalling.__default.ValidGrammar $ly@@5 |grammar#0@@5|)) (=> (GenericMarshalling.__default.ValidGrammar $ly@@5 |grammar#0@@5|) (GenericMarshalling.__default.ValidGrammar ($LS $ly@@5) |grammar#0@@5|)))) :qid |GenericM.67:11| :skolemid |1143| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $ly@@5) |grammar#0@@5|)) )))
(assert (forall (($ly@@6 T@U) (|grammar#0@@6| T@U) ) (!  (=> (and (= (type $ly@@6) LayerTypeType) (= (type |grammar#0@@6|) DatatypeTypeType)) (and (=> (GenericMarshalling.__default.ValidGrammar $ly@@6 |grammar#0@@6|) (GenericMarshalling.__default.ValidGrammar $LZ |grammar#0@@6|)) (=> (GenericMarshalling.__default.ValidGrammar $LZ |grammar#0@@6|) (GenericMarshalling.__default.ValidGrammar $ly@@6 |grammar#0@@6|)))) :qid |GenericM.67:11| :skolemid |1144| :pattern ( (GenericMarshalling.__default.ValidGrammar (AsFuelBottom $ly@@6) |grammar#0@@6|)) )))
(assert  (=> (<= 8 $FunctionContextHeight) (forall (($ly@@7 T@U) (|grammar#0@@7| T@U) ) (!  (=> (and (and (= (type $ly@@7) LayerTypeType) (= (type |grammar#0@@7|) DatatypeTypeType)) (or (|GenericMarshalling.__default.ValidGrammar#canCall| |grammar#0@@7|) (and (not (= 8 $FunctionContextHeight)) ($Is |grammar#0@@7| Tclass.GenericMarshalling.G)))) true) :qid |GenericM.67:11| :skolemid |1145| :pattern ( (GenericMarshalling.__default.ValidGrammar $ly@@7 |grammar#0@@7|)) ))))
(assert (forall (($ly@@8 T@U) (|grammar#0@@8| T@U) ) (!  (=> (and (and (= (type $ly@@8) LayerTypeType) (= (type |grammar#0@@8|) DatatypeTypeType)) ($Is |grammar#0@@8| Tclass.GenericMarshalling.G)) (and (=> (|GenericMarshalling.__default.ValidGrammar#requires| $ly@@8 |grammar#0@@8|) true) (=> true (|GenericMarshalling.__default.ValidGrammar#requires| $ly@@8 |grammar#0@@8|)))) :qid |GenericM.67:11| :skolemid |1146| :pattern ( (|GenericMarshalling.__default.ValidGrammar#requires| $ly@@8 |grammar#0@@8|)) )))
(assert  (=> (<= 8 $FunctionContextHeight) (forall (($ly@@9 T@U) (|grammar#0@@9| T@U) ) (!  (=> (and (and (= (type $ly@@9) LayerTypeType) (= (type |grammar#0@@9|) DatatypeTypeType)) (or (|GenericMarshalling.__default.ValidGrammar#canCall| |grammar#0@@9|) (and (not (= 8 $FunctionContextHeight)) ($Is |grammar#0@@9| Tclass.GenericMarshalling.G)))) (and (=> (not (GenericMarshalling.G.GUint32_q |grammar#0@@9|)) (=> (not (GenericMarshalling.G.GUint64_q |grammar#0@@9|)) (and (=> (GenericMarshalling.G.GArray_q |grammar#0@@9|) (let ((|elt#0| (GenericMarshalling.G.elt |grammar#0@@9|))) (|GenericMarshalling.__default.ValidGrammar#canCall| |elt#0|))) (=> (not (GenericMarshalling.G.GArray_q |grammar#0@@9|)) (and (=> (GenericMarshalling.G.GTuple_q |grammar#0@@9|) (let ((|t#0@@0| (GenericMarshalling.G.t |grammar#0@@9|))) (=> (< (|Seq#Length| |t#0@@0|) 18446744073709551616) (forall ((|g#0| T@U) ) (!  (=> (and (and (= (type |g#0|) DatatypeTypeType) ($Is |g#0| Tclass.GenericMarshalling.G)) (|Seq#Contains| |t#0@@0| ($Box |g#0|))) (|GenericMarshalling.__default.ValidGrammar#canCall| |g#0|)) :qid |GenericM.73:68| :skolemid |1147| :pattern ( (GenericMarshalling.__default.ValidGrammar $ly@@9 |g#0|)) :pattern ( (|Seq#Contains| |t#0@@0| ($Box |g#0|))) ))))) (=> (not (GenericMarshalling.G.GTuple_q |grammar#0@@9|)) (=> (not (GenericMarshalling.G.GByteArray_q |grammar#0@@9|)) (=> (not (GenericMarshalling.G.GUint32Array_q |grammar#0@@9|)) (=> (not (GenericMarshalling.G.GUint64Array_q |grammar#0@@9|)) (let ((|cases#0| (GenericMarshalling.G.cases |grammar#0@@9|))) (=> (< (|Seq#Length| |cases#0|) 18446744073709551616) (forall ((|g#1| T@U) ) (!  (=> (and (and (= (type |g#1|) DatatypeTypeType) ($Is |g#1| Tclass.GenericMarshalling.G)) (|Seq#Contains| |cases#0| ($Box |g#1|))) (|GenericMarshalling.__default.ValidGrammar#canCall| |g#1|)) :qid |GenericM.77:82| :skolemid |1148| :pattern ( (GenericMarshalling.__default.ValidGrammar $ly@@9 |g#1|)) :pattern ( (|Seq#Contains| |cases#0| ($Box |g#1|))) ))))))))))))) (and (=> (GenericMarshalling.__default.ValidGrammar ($LS $ly@@9) |grammar#0@@9|) (ite (GenericMarshalling.G.GUint32_q |grammar#0@@9|) true (ite (GenericMarshalling.G.GUint64_q |grammar#0@@9|) true (ite (GenericMarshalling.G.GArray_q |grammar#0@@9|) (let ((|elt#1| (GenericMarshalling.G.elt |grammar#0@@9|))) (GenericMarshalling.__default.ValidGrammar $ly@@9 |elt#1|)) (ite (GenericMarshalling.G.GTuple_q |grammar#0@@9|) (let ((|t#1@@1| (GenericMarshalling.G.t |grammar#0@@9|))) (and (< (|Seq#Length| |t#1@@1|) 18446744073709551616) (forall ((|g#2| T@U) ) (!  (=> (and (and (= (type |g#2|) DatatypeTypeType) ($Is |g#2| Tclass.GenericMarshalling.G)) (|Seq#Contains| |t#1@@1| ($Box |g#2|))) (GenericMarshalling.__default.ValidGrammar $ly@@9 |g#2|)) :qid |GenericM.73:68| :skolemid |1149| :pattern ( (GenericMarshalling.__default.ValidGrammar $ly@@9 |g#2|)) :pattern ( (|Seq#Contains| |t#1@@1| ($Box |g#2|))) )))) (ite (GenericMarshalling.G.GByteArray_q |grammar#0@@9|) true (ite (GenericMarshalling.G.GUint32Array_q |grammar#0@@9|) true (ite (GenericMarshalling.G.GUint64Array_q |grammar#0@@9|) true (let ((|cases#1| (GenericMarshalling.G.cases |grammar#0@@9|))) (and (< (|Seq#Length| |cases#1|) 18446744073709551616) (forall ((|g#3| T@U) ) (!  (=> (and (and (= (type |g#3|) DatatypeTypeType) ($Is |g#3| Tclass.GenericMarshalling.G)) (|Seq#Contains| |cases#1| ($Box |g#3|))) (GenericMarshalling.__default.ValidGrammar $ly@@9 |g#3|)) :qid |GenericM.77:82| :skolemid |1150| :pattern ( (GenericMarshalling.__default.ValidGrammar $ly@@9 |g#3|)) :pattern ( (|Seq#Contains| |cases#1| ($Box |g#3|))) )))))))))))) (=> (ite (GenericMarshalling.G.GUint32_q |grammar#0@@9|) true (ite (GenericMarshalling.G.GUint64_q |grammar#0@@9|) true (ite (GenericMarshalling.G.GArray_q |grammar#0@@9|) (let ((|elt#1@@0| (GenericMarshalling.G.elt |grammar#0@@9|))) (GenericMarshalling.__default.ValidGrammar $ly@@9 |elt#1@@0|)) (ite (GenericMarshalling.G.GTuple_q |grammar#0@@9|) (let ((|t#1@@2| (GenericMarshalling.G.t |grammar#0@@9|))) (and (< (|Seq#Length| |t#1@@2|) 18446744073709551616) (forall ((|g#2@@0| T@U) ) (!  (=> (and (and (= (type |g#2@@0|) DatatypeTypeType) ($Is |g#2@@0| Tclass.GenericMarshalling.G)) (|Seq#Contains| |t#1@@2| ($Box |g#2@@0|))) (GenericMarshalling.__default.ValidGrammar $ly@@9 |g#2@@0|)) :qid |GenericM.73:68| :skolemid |1149| :pattern ( (GenericMarshalling.__default.ValidGrammar $ly@@9 |g#2@@0|)) :pattern ( (|Seq#Contains| |t#1@@2| ($Box |g#2@@0|))) )))) (ite (GenericMarshalling.G.GByteArray_q |grammar#0@@9|) true (ite (GenericMarshalling.G.GUint32Array_q |grammar#0@@9|) true (ite (GenericMarshalling.G.GUint64Array_q |grammar#0@@9|) true (let ((|cases#1@@0| (GenericMarshalling.G.cases |grammar#0@@9|))) (and (< (|Seq#Length| |cases#1@@0|) 18446744073709551616) (forall ((|g#3@@0| T@U) ) (!  (=> (and (and (= (type |g#3@@0|) DatatypeTypeType) ($Is |g#3@@0| Tclass.GenericMarshalling.G)) (|Seq#Contains| |cases#1@@0| ($Box |g#3@@0|))) (GenericMarshalling.__default.ValidGrammar $ly@@9 |g#3@@0|)) :qid |GenericM.77:82| :skolemid |1150| :pattern ( (GenericMarshalling.__default.ValidGrammar $ly@@9 |g#3@@0|)) :pattern ( (|Seq#Contains| |cases#1@@0| ($Box |g#3@@0|))) ))))))))))) (GenericMarshalling.__default.ValidGrammar ($LS $ly@@9) |grammar#0@@9|))))) :qid |GenericM.67:11| :skolemid |1151| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $ly@@9) |grammar#0@@9|)) ))))
(assert  (=> (<= 8 $FunctionContextHeight) (forall (($ly@@10 T@U) (|grammar#0@@10| T@U) ) (!  (=> (and (and (= (type $ly@@10) LayerTypeType) (= (type |grammar#0@@10|) DatatypeTypeType)) (or (|GenericMarshalling.__default.ValidGrammar#canCall| (Lit |grammar#0@@10|)) (and (not (= 8 $FunctionContextHeight)) ($Is |grammar#0@@10| Tclass.GenericMarshalling.G)))) (and (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GUint32_q (Lit |grammar#0@@10|)))))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GUint64_q (Lit |grammar#0@@10|)))))) (and (=> (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GArray_q (Lit |grammar#0@@10|))))) (let ((|elt#2| (Lit (GenericMarshalling.G.elt (Lit |grammar#0@@10|))))) (|GenericMarshalling.__default.ValidGrammar#canCall| |elt#2|))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GArray_q (Lit |grammar#0@@10|)))))) (and (=> (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GTuple_q (Lit |grammar#0@@10|))))) (let ((|t#2@@0| (Lit (GenericMarshalling.G.t (Lit |grammar#0@@10|))))) (=> (< (|Seq#Length| |t#2@@0|) 18446744073709551616) (forall ((|g#4| T@U) ) (!  (=> (and (and (= (type |g#4|) DatatypeTypeType) ($Is |g#4| Tclass.GenericMarshalling.G)) (|Seq#Contains| |t#2@@0| ($Box |g#4|))) (|GenericMarshalling.__default.ValidGrammar#canCall| |g#4|)) :qid |GenericM.73:68| :skolemid |1152| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $ly@@10) |g#4|)) :pattern ( (|Seq#Contains| |t#2@@0| ($Box |g#4|))) ))))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GTuple_q (Lit |grammar#0@@10|)))))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GByteArray_q (Lit |grammar#0@@10|)))))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GUint32Array_q (Lit |grammar#0@@10|)))))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GUint64Array_q (Lit |grammar#0@@10|)))))) (let ((|cases#2| (Lit (GenericMarshalling.G.cases (Lit |grammar#0@@10|))))) (=> (< (|Seq#Length| |cases#2|) 18446744073709551616) (forall ((|g#5| T@U) ) (!  (=> (and (and (= (type |g#5|) DatatypeTypeType) ($Is |g#5| Tclass.GenericMarshalling.G)) (|Seq#Contains| |cases#2| ($Box |g#5|))) (|GenericMarshalling.__default.ValidGrammar#canCall| |g#5|)) :qid |GenericM.77:82| :skolemid |1153| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $ly@@10) |g#5|)) :pattern ( (|Seq#Contains| |cases#2| ($Box |g#5|))) ))))))))))))) (and (=> (GenericMarshalling.__default.ValidGrammar ($LS $ly@@10) (Lit |grammar#0@@10|)) (ite (GenericMarshalling.G.GUint32_q (Lit |grammar#0@@10|)) true (ite (GenericMarshalling.G.GUint64_q (Lit |grammar#0@@10|)) true (ite (GenericMarshalling.G.GArray_q (Lit |grammar#0@@10|)) (U_2_bool (let ((|elt#3| (Lit (GenericMarshalling.G.elt (Lit |grammar#0@@10|))))) (Lit (bool_2_U (GenericMarshalling.__default.ValidGrammar ($LS $ly@@10) |elt#3|))))) (ite (GenericMarshalling.G.GTuple_q (Lit |grammar#0@@10|)) (let ((|t#3@@1| (Lit (GenericMarshalling.G.t (Lit |grammar#0@@10|))))) (and (< (|Seq#Length| |t#3@@1|) 18446744073709551616) (forall ((|g#6| T@U) ) (!  (=> (and (and (= (type |g#6|) DatatypeTypeType) ($Is |g#6| Tclass.GenericMarshalling.G)) (|Seq#Contains| |t#3@@1| ($Box |g#6|))) (GenericMarshalling.__default.ValidGrammar ($LS $ly@@10) |g#6|)) :qid |GenericM.73:68| :skolemid |1154| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $ly@@10) |g#6|)) :pattern ( (|Seq#Contains| |t#3@@1| ($Box |g#6|))) )))) (ite (GenericMarshalling.G.GByteArray_q (Lit |grammar#0@@10|)) true (ite (GenericMarshalling.G.GUint32Array_q (Lit |grammar#0@@10|)) true (ite (GenericMarshalling.G.GUint64Array_q (Lit |grammar#0@@10|)) true (let ((|cases#3| (Lit (GenericMarshalling.G.cases (Lit |grammar#0@@10|))))) (and (< (|Seq#Length| |cases#3|) 18446744073709551616) (forall ((|g#7| T@U) ) (!  (=> (and (and (= (type |g#7|) DatatypeTypeType) ($Is |g#7| Tclass.GenericMarshalling.G)) (|Seq#Contains| |cases#3| ($Box |g#7|))) (GenericMarshalling.__default.ValidGrammar ($LS $ly@@10) |g#7|)) :qid |GenericM.77:82| :skolemid |1155| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $ly@@10) |g#7|)) :pattern ( (|Seq#Contains| |cases#3| ($Box |g#7|))) )))))))))))) (=> (ite (GenericMarshalling.G.GUint32_q (Lit |grammar#0@@10|)) true (ite (GenericMarshalling.G.GUint64_q (Lit |grammar#0@@10|)) true (ite (GenericMarshalling.G.GArray_q (Lit |grammar#0@@10|)) (U_2_bool (let ((|elt#3@@0| (Lit (GenericMarshalling.G.elt (Lit |grammar#0@@10|))))) (Lit (bool_2_U (GenericMarshalling.__default.ValidGrammar ($LS $ly@@10) |elt#3@@0|))))) (ite (GenericMarshalling.G.GTuple_q (Lit |grammar#0@@10|)) (let ((|t#3@@2| (Lit (GenericMarshalling.G.t (Lit |grammar#0@@10|))))) (and (< (|Seq#Length| |t#3@@2|) 18446744073709551616) (forall ((|g#6@@0| T@U) ) (!  (=> (and (and (= (type |g#6@@0|) DatatypeTypeType) ($Is |g#6@@0| Tclass.GenericMarshalling.G)) (|Seq#Contains| |t#3@@2| ($Box |g#6@@0|))) (GenericMarshalling.__default.ValidGrammar ($LS $ly@@10) |g#6@@0|)) :qid |GenericM.73:68| :skolemid |1154| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $ly@@10) |g#6@@0|)) :pattern ( (|Seq#Contains| |t#3@@2| ($Box |g#6@@0|))) )))) (ite (GenericMarshalling.G.GByteArray_q (Lit |grammar#0@@10|)) true (ite (GenericMarshalling.G.GUint32Array_q (Lit |grammar#0@@10|)) true (ite (GenericMarshalling.G.GUint64Array_q (Lit |grammar#0@@10|)) true (let ((|cases#3@@0| (Lit (GenericMarshalling.G.cases (Lit |grammar#0@@10|))))) (and (< (|Seq#Length| |cases#3@@0|) 18446744073709551616) (forall ((|g#7@@0| T@U) ) (!  (=> (and (and (= (type |g#7@@0|) DatatypeTypeType) ($Is |g#7@@0| Tclass.GenericMarshalling.G)) (|Seq#Contains| |cases#3@@0| ($Box |g#7@@0|))) (GenericMarshalling.__default.ValidGrammar ($LS $ly@@10) |g#7@@0|)) :qid |GenericM.77:82| :skolemid |1155| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $ly@@10) |g#7@@0|)) :pattern ( (|Seq#Contains| |cases#3@@0| ($Box |g#7@@0|))) ))))))))))) (GenericMarshalling.__default.ValidGrammar ($LS $ly@@10) (Lit |grammar#0@@10|)))))) :qid |GenericM.67:11| :weight 3 :skolemid |1156| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $ly@@10) (Lit |grammar#0@@10|))) ))))
(assert (forall (($ly@@11 T@U) (|val#0@@5| T@U) ) (!  (=> (and (= (type $ly@@11) LayerTypeType) (= (type |val#0@@5|) DatatypeTypeType)) (and (=> (GenericMarshalling.__default.ValidVal ($LS $ly@@11) |val#0@@5|) (GenericMarshalling.__default.ValidVal $ly@@11 |val#0@@5|)) (=> (GenericMarshalling.__default.ValidVal $ly@@11 |val#0@@5|) (GenericMarshalling.__default.ValidVal ($LS $ly@@11) |val#0@@5|)))) :qid |GenericM.81:11| :skolemid |1164| :pattern ( (GenericMarshalling.__default.ValidVal ($LS $ly@@11) |val#0@@5|)) )))
(assert (forall (($ly@@12 T@U) (|val#0@@6| T@U) ) (!  (=> (and (= (type $ly@@12) LayerTypeType) (= (type |val#0@@6|) DatatypeTypeType)) (and (=> (GenericMarshalling.__default.ValidVal $ly@@12 |val#0@@6|) (GenericMarshalling.__default.ValidVal $LZ |val#0@@6|)) (=> (GenericMarshalling.__default.ValidVal $LZ |val#0@@6|) (GenericMarshalling.__default.ValidVal $ly@@12 |val#0@@6|)))) :qid |GenericM.81:11| :skolemid |1165| :pattern ( (GenericMarshalling.__default.ValidVal (AsFuelBottom $ly@@12) |val#0@@6|)) )))
(assert  (=> (<= 9 $FunctionContextHeight) (forall (($ly@@13 T@U) (|val#0@@7| T@U) ) (!  (=> (and (and (= (type $ly@@13) LayerTypeType) (= (type |val#0@@7|) DatatypeTypeType)) (or (|GenericMarshalling.__default.ValidVal#canCall| |val#0@@7|) (and (not (= 9 $FunctionContextHeight)) ($Is |val#0@@7| Tclass.GenericMarshalling.V)))) true) :qid |GenericM.81:11| :skolemid |1166| :pattern ( (GenericMarshalling.__default.ValidVal $ly@@13 |val#0@@7|)) ))))
(assert (forall (($ly@@14 T@U) (|val#0@@8| T@U) ) (!  (=> (and (and (= (type $ly@@14) LayerTypeType) (= (type |val#0@@8|) DatatypeTypeType)) ($Is |val#0@@8| Tclass.GenericMarshalling.V)) (and (=> (|GenericMarshalling.__default.ValidVal#requires| $ly@@14 |val#0@@8|) true) (=> true (|GenericMarshalling.__default.ValidVal#requires| $ly@@14 |val#0@@8|)))) :qid |GenericM.81:11| :skolemid |1167| :pattern ( (|GenericMarshalling.__default.ValidVal#requires| $ly@@14 |val#0@@8|)) )))
(assert  (=> (<= 9 $FunctionContextHeight) (forall (($ly@@15 T@U) (|val#0@@9| T@U) ) (!  (=> (and (and (= (type $ly@@15) LayerTypeType) (= (type |val#0@@9|) DatatypeTypeType)) (or (|GenericMarshalling.__default.ValidVal#canCall| |val#0@@9|) (and (not (= 9 $FunctionContextHeight)) ($Is |val#0@@9| Tclass.GenericMarshalling.V)))) (and (=> (not (GenericMarshalling.V.VUint32_q |val#0@@9|)) (=> (not (GenericMarshalling.V.VUint64_q |val#0@@9|)) (and (=> (GenericMarshalling.V.VArray_q |val#0@@9|) (let ((|a#0@@2| (GenericMarshalling.V.a |val#0@@9|))) (=> (< (|Seq#Length| |a#0@@2|) 18446744073709551616) (forall ((|v#0@@0| T@U) ) (!  (=> (and (and (= (type |v#0@@0|) DatatypeTypeType) ($Is |v#0@@0| Tclass.GenericMarshalling.V)) (|Seq#Contains| |a#0@@2| ($Box |v#0@@0|))) (|GenericMarshalling.__default.ValidVal#canCall| |v#0@@0|)) :qid |GenericM.86:71| :skolemid |1168| :pattern ( (GenericMarshalling.__default.ValidVal $ly@@15 |v#0@@0|)) :pattern ( (|Seq#Contains| |a#0@@2| ($Box |v#0@@0|))) ))))) (=> (not (GenericMarshalling.V.VArray_q |val#0@@9|)) (and (=> (GenericMarshalling.V.VTuple_q |val#0@@9|) (let ((|t#0@@1| (GenericMarshalling.V.t |val#0@@9|))) (=> (< (|Seq#Length| |t#0@@1|) 18446744073709551616) (forall ((|v#1@@0| T@U) ) (!  (=> (and (and (= (type |v#1@@0|) DatatypeTypeType) ($Is |v#1@@0| Tclass.GenericMarshalling.V)) (|Seq#Contains| |t#0@@1| ($Box |v#1@@0|))) (|GenericMarshalling.__default.ValidVal#canCall| |v#1@@0|)) :qid |GenericM.87:71| :skolemid |1169| :pattern ( (GenericMarshalling.__default.ValidVal $ly@@15 |v#1@@0|)) :pattern ( (|Seq#Contains| |t#0@@1| ($Box |v#1@@0|))) ))))) (=> (not (GenericMarshalling.V.VTuple_q |val#0@@9|)) (=> (not (GenericMarshalling.V.VByteArray_q |val#0@@9|)) (=> (not (GenericMarshalling.V.VUint32Array_q |val#0@@9|)) (=> (not (GenericMarshalling.V.VUint64Array_q |val#0@@9|)) (let ((|v#2@@1| (GenericMarshalling.V.val |val#0@@9|))) (|GenericMarshalling.__default.ValidVal#canCall| |v#2@@1|))))))))))) (and (=> (GenericMarshalling.__default.ValidVal ($LS $ly@@15) |val#0@@9|) (ite (GenericMarshalling.V.VUint32_q |val#0@@9|) true (ite (GenericMarshalling.V.VUint64_q |val#0@@9|) true (ite (GenericMarshalling.V.VArray_q |val#0@@9|) (let ((|a#1@@1| (GenericMarshalling.V.a |val#0@@9|))) (and (< (|Seq#Length| |a#1@@1|) 18446744073709551616) (forall ((|v#3@@1| T@U) ) (!  (=> (and (and (= (type |v#3@@1|) DatatypeTypeType) ($Is |v#3@@1| Tclass.GenericMarshalling.V)) (|Seq#Contains| |a#1@@1| ($Box |v#3@@1|))) (GenericMarshalling.__default.ValidVal $ly@@15 |v#3@@1|)) :qid |GenericM.86:71| :skolemid |1170| :pattern ( (GenericMarshalling.__default.ValidVal $ly@@15 |v#3@@1|)) :pattern ( (|Seq#Contains| |a#1@@1| ($Box |v#3@@1|))) )))) (ite (GenericMarshalling.V.VTuple_q |val#0@@9|) (let ((|t#1@@3| (GenericMarshalling.V.t |val#0@@9|))) (and (< (|Seq#Length| |t#1@@3|) 18446744073709551616) (forall ((|v#4@@0| T@U) ) (!  (=> (and (and (= (type |v#4@@0|) DatatypeTypeType) ($Is |v#4@@0| Tclass.GenericMarshalling.V)) (|Seq#Contains| |t#1@@3| ($Box |v#4@@0|))) (GenericMarshalling.__default.ValidVal $ly@@15 |v#4@@0|)) :qid |GenericM.87:71| :skolemid |1171| :pattern ( (GenericMarshalling.__default.ValidVal $ly@@15 |v#4@@0|)) :pattern ( (|Seq#Contains| |t#1@@3| ($Box |v#4@@0|))) )))) (ite (GenericMarshalling.V.VByteArray_q |val#0@@9|) (let ((|b#1| (GenericMarshalling.V.b |val#0@@9|))) (< (|Seq#Length| |b#1|) 18446744073709551616)) (ite (GenericMarshalling.V.VUint32Array_q |val#0@@9|) (let ((|va#1| (GenericMarshalling.V.va |val#0@@9|))) (< (|Seq#Length| |va#1|) 18446744073709551616)) (ite (GenericMarshalling.V.VUint64Array_q |val#0@@9|) (let ((|ua#1| (GenericMarshalling.V.ua |val#0@@9|))) (< (|Seq#Length| |ua#1|) 18446744073709551616)) (let ((|v#5@@0| (GenericMarshalling.V.val |val#0@@9|))) (GenericMarshalling.__default.ValidVal $ly@@15 |v#5@@0|)))))))))) (=> (ite (GenericMarshalling.V.VUint32_q |val#0@@9|) true (ite (GenericMarshalling.V.VUint64_q |val#0@@9|) true (ite (GenericMarshalling.V.VArray_q |val#0@@9|) (let ((|a#1@@2| (GenericMarshalling.V.a |val#0@@9|))) (and (< (|Seq#Length| |a#1@@2|) 18446744073709551616) (forall ((|v#3@@2| T@U) ) (!  (=> (and (and (= (type |v#3@@2|) DatatypeTypeType) ($Is |v#3@@2| Tclass.GenericMarshalling.V)) (|Seq#Contains| |a#1@@2| ($Box |v#3@@2|))) (GenericMarshalling.__default.ValidVal $ly@@15 |v#3@@2|)) :qid |GenericM.86:71| :skolemid |1170| :pattern ( (GenericMarshalling.__default.ValidVal $ly@@15 |v#3@@2|)) :pattern ( (|Seq#Contains| |a#1@@2| ($Box |v#3@@2|))) )))) (ite (GenericMarshalling.V.VTuple_q |val#0@@9|) (let ((|t#1@@4| (GenericMarshalling.V.t |val#0@@9|))) (and (< (|Seq#Length| |t#1@@4|) 18446744073709551616) (forall ((|v#4@@1| T@U) ) (!  (=> (and (and (= (type |v#4@@1|) DatatypeTypeType) ($Is |v#4@@1| Tclass.GenericMarshalling.V)) (|Seq#Contains| |t#1@@4| ($Box |v#4@@1|))) (GenericMarshalling.__default.ValidVal $ly@@15 |v#4@@1|)) :qid |GenericM.87:71| :skolemid |1171| :pattern ( (GenericMarshalling.__default.ValidVal $ly@@15 |v#4@@1|)) :pattern ( (|Seq#Contains| |t#1@@4| ($Box |v#4@@1|))) )))) (ite (GenericMarshalling.V.VByteArray_q |val#0@@9|) (let ((|b#1@@0| (GenericMarshalling.V.b |val#0@@9|))) (< (|Seq#Length| |b#1@@0|) 18446744073709551616)) (ite (GenericMarshalling.V.VUint32Array_q |val#0@@9|) (let ((|va#1@@0| (GenericMarshalling.V.va |val#0@@9|))) (< (|Seq#Length| |va#1@@0|) 18446744073709551616)) (ite (GenericMarshalling.V.VUint64Array_q |val#0@@9|) (let ((|ua#1@@0| (GenericMarshalling.V.ua |val#0@@9|))) (< (|Seq#Length| |ua#1@@0|) 18446744073709551616)) (let ((|v#5@@1| (GenericMarshalling.V.val |val#0@@9|))) (GenericMarshalling.__default.ValidVal $ly@@15 |v#5@@1|))))))))) (GenericMarshalling.__default.ValidVal ($LS $ly@@15) |val#0@@9|))))) :qid |GenericM.81:11| :skolemid |1172| :pattern ( (GenericMarshalling.__default.ValidVal ($LS $ly@@15) |val#0@@9|)) ))))
(assert  (=> (<= 9 $FunctionContextHeight) (forall (($ly@@16 T@U) (|val#0@@10| T@U) ) (!  (=> (and (and (= (type $ly@@16) LayerTypeType) (= (type |val#0@@10|) DatatypeTypeType)) (or (|GenericMarshalling.__default.ValidVal#canCall| (Lit |val#0@@10|)) (and (not (= 9 $FunctionContextHeight)) ($Is |val#0@@10| Tclass.GenericMarshalling.V)))) (and (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.V.VUint32_q (Lit |val#0@@10|)))))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.V.VUint64_q (Lit |val#0@@10|)))))) (and (=> (U_2_bool (Lit (bool_2_U (GenericMarshalling.V.VArray_q (Lit |val#0@@10|))))) (let ((|a#2@@0| (Lit (GenericMarshalling.V.a (Lit |val#0@@10|))))) (=> (< (|Seq#Length| |a#2@@0|) 18446744073709551616) (forall ((|v#6@@1| T@U) ) (!  (=> (and (and (= (type |v#6@@1|) DatatypeTypeType) ($Is |v#6@@1| Tclass.GenericMarshalling.V)) (|Seq#Contains| |a#2@@0| ($Box |v#6@@1|))) (|GenericMarshalling.__default.ValidVal#canCall| |v#6@@1|)) :qid |GenericM.86:71| :skolemid |1173| :pattern ( (GenericMarshalling.__default.ValidVal ($LS $ly@@16) |v#6@@1|)) :pattern ( (|Seq#Contains| |a#2@@0| ($Box |v#6@@1|))) ))))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.V.VArray_q (Lit |val#0@@10|)))))) (and (=> (U_2_bool (Lit (bool_2_U (GenericMarshalling.V.VTuple_q (Lit |val#0@@10|))))) (let ((|t#2@@1| (Lit (GenericMarshalling.V.t (Lit |val#0@@10|))))) (=> (< (|Seq#Length| |t#2@@1|) 18446744073709551616) (forall ((|v#7@@1| T@U) ) (!  (=> (and (and (= (type |v#7@@1|) DatatypeTypeType) ($Is |v#7@@1| Tclass.GenericMarshalling.V)) (|Seq#Contains| |t#2@@1| ($Box |v#7@@1|))) (|GenericMarshalling.__default.ValidVal#canCall| |v#7@@1|)) :qid |GenericM.87:71| :skolemid |1174| :pattern ( (GenericMarshalling.__default.ValidVal ($LS $ly@@16) |v#7@@1|)) :pattern ( (|Seq#Contains| |t#2@@1| ($Box |v#7@@1|))) ))))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.V.VTuple_q (Lit |val#0@@10|)))))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.V.VByteArray_q (Lit |val#0@@10|)))))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.V.VUint32Array_q (Lit |val#0@@10|)))))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.V.VUint64Array_q (Lit |val#0@@10|)))))) (let ((|v#8| (Lit (GenericMarshalling.V.val (Lit |val#0@@10|))))) (|GenericMarshalling.__default.ValidVal#canCall| |v#8|))))))))))) (and (=> (GenericMarshalling.__default.ValidVal ($LS $ly@@16) (Lit |val#0@@10|)) (ite (GenericMarshalling.V.VUint32_q (Lit |val#0@@10|)) true (ite (GenericMarshalling.V.VUint64_q (Lit |val#0@@10|)) true (ite (GenericMarshalling.V.VArray_q (Lit |val#0@@10|)) (let ((|a#3@@1| (Lit (GenericMarshalling.V.a (Lit |val#0@@10|))))) (and (< (|Seq#Length| |a#3@@1|) 18446744073709551616) (forall ((|v#9| T@U) ) (!  (=> (and (and (= (type |v#9|) DatatypeTypeType) ($Is |v#9| Tclass.GenericMarshalling.V)) (|Seq#Contains| |a#3@@1| ($Box |v#9|))) (GenericMarshalling.__default.ValidVal ($LS $ly@@16) |v#9|)) :qid |GenericM.86:71| :skolemid |1175| :pattern ( (GenericMarshalling.__default.ValidVal ($LS $ly@@16) |v#9|)) :pattern ( (|Seq#Contains| |a#3@@1| ($Box |v#9|))) )))) (ite (GenericMarshalling.V.VTuple_q (Lit |val#0@@10|)) (let ((|t#3@@3| (Lit (GenericMarshalling.V.t (Lit |val#0@@10|))))) (and (< (|Seq#Length| |t#3@@3|) 18446744073709551616) (forall ((|v#10| T@U) ) (!  (=> (and (and (= (type |v#10|) DatatypeTypeType) ($Is |v#10| Tclass.GenericMarshalling.V)) (|Seq#Contains| |t#3@@3| ($Box |v#10|))) (GenericMarshalling.__default.ValidVal ($LS $ly@@16) |v#10|)) :qid |GenericM.87:71| :skolemid |1176| :pattern ( (GenericMarshalling.__default.ValidVal ($LS $ly@@16) |v#10|)) :pattern ( (|Seq#Contains| |t#3@@3| ($Box |v#10|))) )))) (ite (GenericMarshalling.V.VByteArray_q (Lit |val#0@@10|)) (let ((|b#3| (Lit (GenericMarshalling.V.b (Lit |val#0@@10|))))) (< (|Seq#Length| |b#3|) 18446744073709551616)) (ite (GenericMarshalling.V.VUint32Array_q (Lit |val#0@@10|)) (let ((|va#3| (Lit (GenericMarshalling.V.va (Lit |val#0@@10|))))) (< (|Seq#Length| |va#3|) 18446744073709551616)) (ite (GenericMarshalling.V.VUint64Array_q (Lit |val#0@@10|)) (let ((|ua#3| (Lit (GenericMarshalling.V.ua (Lit |val#0@@10|))))) (< (|Seq#Length| |ua#3|) 18446744073709551616)) (U_2_bool (let ((|v#11| (Lit (GenericMarshalling.V.val (Lit |val#0@@10|))))) (Lit (bool_2_U (GenericMarshalling.__default.ValidVal ($LS $ly@@16) |v#11|))))))))))))) (=> (ite (GenericMarshalling.V.VUint32_q (Lit |val#0@@10|)) true (ite (GenericMarshalling.V.VUint64_q (Lit |val#0@@10|)) true (ite (GenericMarshalling.V.VArray_q (Lit |val#0@@10|)) (let ((|a#3@@2| (Lit (GenericMarshalling.V.a (Lit |val#0@@10|))))) (and (< (|Seq#Length| |a#3@@2|) 18446744073709551616) (forall ((|v#9@@0| T@U) ) (!  (=> (and (and (= (type |v#9@@0|) DatatypeTypeType) ($Is |v#9@@0| Tclass.GenericMarshalling.V)) (|Seq#Contains| |a#3@@2| ($Box |v#9@@0|))) (GenericMarshalling.__default.ValidVal ($LS $ly@@16) |v#9@@0|)) :qid |GenericM.86:71| :skolemid |1175| :pattern ( (GenericMarshalling.__default.ValidVal ($LS $ly@@16) |v#9@@0|)) :pattern ( (|Seq#Contains| |a#3@@2| ($Box |v#9@@0|))) )))) (ite (GenericMarshalling.V.VTuple_q (Lit |val#0@@10|)) (let ((|t#3@@4| (Lit (GenericMarshalling.V.t (Lit |val#0@@10|))))) (and (< (|Seq#Length| |t#3@@4|) 18446744073709551616) (forall ((|v#10@@0| T@U) ) (!  (=> (and (and (= (type |v#10@@0|) DatatypeTypeType) ($Is |v#10@@0| Tclass.GenericMarshalling.V)) (|Seq#Contains| |t#3@@4| ($Box |v#10@@0|))) (GenericMarshalling.__default.ValidVal ($LS $ly@@16) |v#10@@0|)) :qid |GenericM.87:71| :skolemid |1176| :pattern ( (GenericMarshalling.__default.ValidVal ($LS $ly@@16) |v#10@@0|)) :pattern ( (|Seq#Contains| |t#3@@4| ($Box |v#10@@0|))) )))) (ite (GenericMarshalling.V.VByteArray_q (Lit |val#0@@10|)) (let ((|b#3@@0| (Lit (GenericMarshalling.V.b (Lit |val#0@@10|))))) (< (|Seq#Length| |b#3@@0|) 18446744073709551616)) (ite (GenericMarshalling.V.VUint32Array_q (Lit |val#0@@10|)) (let ((|va#3@@0| (Lit (GenericMarshalling.V.va (Lit |val#0@@10|))))) (< (|Seq#Length| |va#3@@0|) 18446744073709551616)) (ite (GenericMarshalling.V.VUint64Array_q (Lit |val#0@@10|)) (let ((|ua#3@@0| (Lit (GenericMarshalling.V.ua (Lit |val#0@@10|))))) (< (|Seq#Length| |ua#3@@0|) 18446744073709551616)) (U_2_bool (let ((|v#11@@0| (Lit (GenericMarshalling.V.val (Lit |val#0@@10|))))) (Lit (bool_2_U (GenericMarshalling.__default.ValidVal ($LS $ly@@16) |v#11@@0|)))))))))))) (GenericMarshalling.__default.ValidVal ($LS $ly@@16) (Lit |val#0@@10|)))))) :qid |GenericM.81:11| :weight 3 :skolemid |1177| :pattern ( (GenericMarshalling.__default.ValidVal ($LS $ly@@16) (Lit |val#0@@10|))) ))))
(assert (forall (($ly@@17 T@U) (|t#0@@2| T@U) ) (!  (=> (and (= (type $ly@@17) LayerTypeType) (= (type |t#0@@2|) (SeqType BoxType))) (= (GenericMarshalling.__default.SeqSum ($LS $ly@@17) |t#0@@2|) (GenericMarshalling.__default.SeqSum $ly@@17 |t#0@@2|))) :qid |GenericM.95:20| :skolemid |1185| :pattern ( (GenericMarshalling.__default.SeqSum ($LS $ly@@17) |t#0@@2|)) )))
(assert (forall (($ly@@18 T@U) (|t#0@@3| T@U) ) (!  (=> (and (= (type $ly@@18) LayerTypeType) (= (type |t#0@@3|) (SeqType BoxType))) (= (GenericMarshalling.__default.SeqSum $ly@@18 |t#0@@3|) (GenericMarshalling.__default.SeqSum $LZ |t#0@@3|))) :qid |GenericM.95:20| :skolemid |1186| :pattern ( (GenericMarshalling.__default.SeqSum (AsFuelBottom $ly@@18) |t#0@@3|)) )))
(assert  (=> (<= 10 $FunctionContextHeight) (forall (($ly@@19 T@U) (|t#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@19) LayerTypeType) (= (type |t#0@@4|) (SeqType BoxType))) (or (|GenericMarshalling.__default.SeqSum#canCall| |t#0@@4|) (and (not (= 10 $FunctionContextHeight)) ($Is |t#0@@4| (TSeq Tclass.GenericMarshalling.V))))) (>= (GenericMarshalling.__default.SeqSum $ly@@19 |t#0@@4|) (LitInt 0))) :qid |GenericM.95:20| :skolemid |1187| :pattern ( (GenericMarshalling.__default.SeqSum $ly@@19 |t#0@@4|)) ))))
(assert (forall (($ly@@20 T@U) (|t#0@@5| T@U) ) (!  (=> (and (and (= (type $ly@@20) LayerTypeType) (= (type |t#0@@5|) (SeqType BoxType))) ($Is |t#0@@5| (TSeq Tclass.GenericMarshalling.V))) (and (=> (|GenericMarshalling.__default.SeqSum#requires| $ly@@20 |t#0@@5|) true) (=> true (|GenericMarshalling.__default.SeqSum#requires| $ly@@20 |t#0@@5|)))) :qid |GenericM.95:20| :skolemid |1188| :pattern ( (|GenericMarshalling.__default.SeqSum#requires| $ly@@20 |t#0@@5|)) )))
(assert  (=> (<= 10 $FunctionContextHeight) (forall (($ly@@21 T@U) (|t#0@@6| T@U) ) (!  (=> (and (and (= (type $ly@@21) LayerTypeType) (= (type |t#0@@6|) (SeqType BoxType))) (or (|GenericMarshalling.__default.SeqSum#canCall| |t#0@@6|) (and (not (= 10 $FunctionContextHeight)) ($Is |t#0@@6| (TSeq Tclass.GenericMarshalling.V))))) (and (=> (not (= (|Seq#Length| |t#0@@6|) (LitInt 0))) (and (|GenericMarshalling.__default.SizeOfV#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |t#0@@6| (LitInt 0)))) (|GenericMarshalling.__default.SeqSum#canCall| (|Seq#Drop| |t#0@@6| (LitInt 1))))) (= (GenericMarshalling.__default.SeqSum ($LS $ly@@21) |t#0@@6|) (ite (= (|Seq#Length| |t#0@@6|) (LitInt 0)) 0 (+ (GenericMarshalling.__default.SizeOfV $ly@@21 ($Unbox DatatypeTypeType (|Seq#Index| |t#0@@6| (LitInt 0)))) (GenericMarshalling.__default.SeqSum $ly@@21 (|Seq#Drop| |t#0@@6| (LitInt 1)))))))) :qid |GenericM.95:20| :skolemid |1189| :pattern ( (GenericMarshalling.__default.SeqSum ($LS $ly@@21) |t#0@@6|)) ))))
(assert  (=> (<= 10 $FunctionContextHeight) (forall (($ly@@22 T@U) (|t#0@@7| T@U) ) (!  (=> (and (and (= (type $ly@@22) LayerTypeType) (= (type |t#0@@7|) (SeqType BoxType))) (or (|GenericMarshalling.__default.SeqSum#canCall| (Lit |t#0@@7|)) (and (not (= 10 $FunctionContextHeight)) ($Is |t#0@@7| (TSeq Tclass.GenericMarshalling.V))))) (and (=> (not (= (|Seq#Length| (Lit |t#0@@7|)) (LitInt 0))) (and (|GenericMarshalling.__default.SizeOfV#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |t#0@@7|) (LitInt 0)))) (|GenericMarshalling.__default.SeqSum#canCall| (Lit (|Seq#Drop| (Lit |t#0@@7|) (LitInt 1)))))) (= (GenericMarshalling.__default.SeqSum ($LS $ly@@22) (Lit |t#0@@7|)) (ite (= (|Seq#Length| (Lit |t#0@@7|)) (LitInt 0)) 0 (+ (GenericMarshalling.__default.SizeOfV ($LS $ly@@22) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |t#0@@7|) (LitInt 0)))) (GenericMarshalling.__default.SeqSum ($LS $ly@@22) (Lit (|Seq#Drop| (Lit |t#0@@7|) (LitInt 1))))))))) :qid |GenericM.95:20| :weight 3 :skolemid |1190| :pattern ( (GenericMarshalling.__default.SeqSum ($LS $ly@@22) (Lit |t#0@@7|))) ))))
(assert (forall (($ly@@23 T@U) (|val#0@@11| T@U) ) (!  (=> (and (= (type $ly@@23) LayerTypeType) (= (type |val#0@@11|) DatatypeTypeType)) (= (GenericMarshalling.__default.SizeOfV ($LS $ly@@23) |val#0@@11|) (GenericMarshalling.__default.SizeOfV $ly@@23 |val#0@@11|))) :qid |GenericM.102:10| :skolemid |1193| :pattern ( (GenericMarshalling.__default.SizeOfV ($LS $ly@@23) |val#0@@11|)) )))
(assert (forall (($ly@@24 T@U) (|val#0@@12| T@U) ) (!  (=> (and (= (type $ly@@24) LayerTypeType) (= (type |val#0@@12|) DatatypeTypeType)) (= (GenericMarshalling.__default.SizeOfV $ly@@24 |val#0@@12|) (GenericMarshalling.__default.SizeOfV $LZ |val#0@@12|))) :qid |GenericM.102:10| :skolemid |1194| :pattern ( (GenericMarshalling.__default.SizeOfV (AsFuelBottom $ly@@24) |val#0@@12|)) )))
(assert  (=> (<= 10 $FunctionContextHeight) (forall (($ly@@25 T@U) (|val#0@@13| T@U) ) (!  (=> (and (and (= (type $ly@@25) LayerTypeType) (= (type |val#0@@13|) DatatypeTypeType)) (or (|GenericMarshalling.__default.SizeOfV#canCall| |val#0@@13|) (and (not (= 10 $FunctionContextHeight)) ($Is |val#0@@13| Tclass.GenericMarshalling.V)))) (>= (GenericMarshalling.__default.SizeOfV $ly@@25 |val#0@@13|) (LitInt 0))) :qid |GenericM.102:10| :skolemid |1195| :pattern ( (GenericMarshalling.__default.SizeOfV $ly@@25 |val#0@@13|)) ))))
(assert (forall (($ly@@26 T@U) (|val#0@@14| T@U) ) (!  (=> (and (and (= (type $ly@@26) LayerTypeType) (= (type |val#0@@14|) DatatypeTypeType)) ($Is |val#0@@14| Tclass.GenericMarshalling.V)) (and (=> (|GenericMarshalling.__default.SizeOfV#requires| $ly@@26 |val#0@@14|) true) (=> true (|GenericMarshalling.__default.SizeOfV#requires| $ly@@26 |val#0@@14|)))) :qid |GenericM.102:10| :skolemid |1196| :pattern ( (|GenericMarshalling.__default.SizeOfV#requires| $ly@@26 |val#0@@14|)) )))
(assert  (=> (<= 10 $FunctionContextHeight) (forall (($ly@@27 T@U) (|val#0@@15| T@U) ) (!  (=> (and (and (= (type $ly@@27) LayerTypeType) (= (type |val#0@@15|) DatatypeTypeType)) (or (|GenericMarshalling.__default.SizeOfV#canCall| |val#0@@15|) (and (not (= 10 $FunctionContextHeight)) ($Is |val#0@@15| Tclass.GenericMarshalling.V)))) (and (=> (not (GenericMarshalling.V.VUint32_q |val#0@@15|)) (=> (not (GenericMarshalling.V.VUint64_q |val#0@@15|)) (and (=> (GenericMarshalling.V.VArray_q |val#0@@15|) (let ((|a#0@@3| (GenericMarshalling.V.a |val#0@@15|))) (|GenericMarshalling.__default.SeqSum#canCall| |a#0@@3|))) (=> (not (GenericMarshalling.V.VArray_q |val#0@@15|)) (and (=> (GenericMarshalling.V.VTuple_q |val#0@@15|) (let ((|t#0@@8| (GenericMarshalling.V.t |val#0@@15|))) (|GenericMarshalling.__default.SeqSum#canCall| |t#0@@8|))) (=> (not (GenericMarshalling.V.VTuple_q |val#0@@15|)) (=> (not (GenericMarshalling.V.VByteArray_q |val#0@@15|)) (=> (not (GenericMarshalling.V.VUint32Array_q |val#0@@15|)) (=> (not (GenericMarshalling.V.VUint64Array_q |val#0@@15|)) (let ((|v#0@@1| (GenericMarshalling.V.val |val#0@@15|))) (|GenericMarshalling.__default.SizeOfV#canCall| |v#0@@1|))))))))))) (= (GenericMarshalling.__default.SizeOfV ($LS $ly@@27) |val#0@@15|) (ite (GenericMarshalling.V.VUint32_q |val#0@@15|) 4 (ite (GenericMarshalling.V.VUint64_q |val#0@@15|) 8 (ite (GenericMarshalling.V.VArray_q |val#0@@15|) (let ((|a#1@@3| (GenericMarshalling.V.a |val#0@@15|))) (+ 8 (GenericMarshalling.__default.SeqSum $ly@@27 |a#1@@3|))) (ite (GenericMarshalling.V.VTuple_q |val#0@@15|) (let ((|t#1@@5| (GenericMarshalling.V.t |val#0@@15|))) (GenericMarshalling.__default.SeqSum $ly@@27 |t#1@@5|)) (ite (GenericMarshalling.V.VByteArray_q |val#0@@15|) (let ((|b#3@@1| (GenericMarshalling.V.b |val#0@@15|))) (+ 8 (|Seq#Length| |b#3@@1|))) (ite (GenericMarshalling.V.VUint32Array_q |val#0@@15|) (let ((|b#4| (GenericMarshalling.V.va |val#0@@15|))) (+ 8 (Mul (LitInt 4) (|Seq#Length| |b#4|)))) (ite (GenericMarshalling.V.VUint64Array_q |val#0@@15|) (let ((|b#5| (GenericMarshalling.V.ua |val#0@@15|))) (+ 8 (Mul (LitInt 8) (|Seq#Length| |b#5|)))) (let ((|v#1@@1| (GenericMarshalling.V.val |val#0@@15|))) (+ 8 (GenericMarshalling.__default.SizeOfV $ly@@27 |v#1@@1|))))))))))))) :qid |GenericM.102:10| :skolemid |1197| :pattern ( (GenericMarshalling.__default.SizeOfV ($LS $ly@@27) |val#0@@15|)) ))))
(assert  (=> (<= 10 $FunctionContextHeight) (forall (($ly@@28 T@U) (|val#0@@16| T@U) ) (!  (=> (and (and (= (type $ly@@28) LayerTypeType) (= (type |val#0@@16|) DatatypeTypeType)) (or (|GenericMarshalling.__default.SizeOfV#canCall| (Lit |val#0@@16|)) (and (not (= 10 $FunctionContextHeight)) ($Is |val#0@@16| Tclass.GenericMarshalling.V)))) (and (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.V.VUint32_q (Lit |val#0@@16|)))))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.V.VUint64_q (Lit |val#0@@16|)))))) (and (=> (U_2_bool (Lit (bool_2_U (GenericMarshalling.V.VArray_q (Lit |val#0@@16|))))) (let ((|a#2@@1| (Lit (GenericMarshalling.V.a (Lit |val#0@@16|))))) (|GenericMarshalling.__default.SeqSum#canCall| |a#2@@1|))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.V.VArray_q (Lit |val#0@@16|)))))) (and (=> (U_2_bool (Lit (bool_2_U (GenericMarshalling.V.VTuple_q (Lit |val#0@@16|))))) (let ((|t#2@@2| (Lit (GenericMarshalling.V.t (Lit |val#0@@16|))))) (|GenericMarshalling.__default.SeqSum#canCall| |t#2@@2|))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.V.VTuple_q (Lit |val#0@@16|)))))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.V.VByteArray_q (Lit |val#0@@16|)))))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.V.VUint32Array_q (Lit |val#0@@16|)))))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.V.VUint64Array_q (Lit |val#0@@16|)))))) (let ((|v#2@@2| (Lit (GenericMarshalling.V.val (Lit |val#0@@16|))))) (|GenericMarshalling.__default.SizeOfV#canCall| |v#2@@2|))))))))))) (= (GenericMarshalling.__default.SizeOfV ($LS $ly@@28) (Lit |val#0@@16|)) (ite (GenericMarshalling.V.VUint32_q (Lit |val#0@@16|)) 4 (ite (GenericMarshalling.V.VUint64_q (Lit |val#0@@16|)) 8 (ite (GenericMarshalling.V.VArray_q (Lit |val#0@@16|)) (let ((|a#3@@3| (Lit (GenericMarshalling.V.a (Lit |val#0@@16|))))) (+ 8 (GenericMarshalling.__default.SeqSum ($LS $ly@@28) |a#3@@3|))) (ite (GenericMarshalling.V.VTuple_q (Lit |val#0@@16|)) (let ((|t#3@@5| (Lit (GenericMarshalling.V.t (Lit |val#0@@16|))))) (GenericMarshalling.__default.SeqSum ($LS $ly@@28) |t#3@@5|)) (ite (GenericMarshalling.V.VByteArray_q (Lit |val#0@@16|)) (let ((|b#9| (Lit (GenericMarshalling.V.b (Lit |val#0@@16|))))) (+ 8 (|Seq#Length| |b#9|))) (ite (GenericMarshalling.V.VUint32Array_q (Lit |val#0@@16|)) (let ((|b#10| (Lit (GenericMarshalling.V.va (Lit |val#0@@16|))))) (+ 8 (Mul (LitInt 4) (|Seq#Length| |b#10|)))) (ite (GenericMarshalling.V.VUint64Array_q (Lit |val#0@@16|)) (let ((|b#11| (Lit (GenericMarshalling.V.ua (Lit |val#0@@16|))))) (+ 8 (Mul (LitInt 8) (|Seq#Length| |b#11|)))) (let ((|v#3@@3| (Lit (GenericMarshalling.V.val (Lit |val#0@@16|))))) (LitInt (+ 8 (GenericMarshalling.__default.SizeOfV ($LS $ly@@28) |v#3@@3|)))))))))))))) :qid |GenericM.102:10| :weight 3 :skolemid |1198| :pattern ( (GenericMarshalling.__default.SizeOfV ($LS $ly@@28) (Lit |val#0@@16|))) ))))
(assert (forall ((arg0@@243 T@U) ) (! (= (type (GenericMarshalling.__default.parse__Uint32 arg0@@243)) DatatypeTypeType) :qid |funType:GenericMarshalling.__default.parse__Uint32| :pattern ( (GenericMarshalling.__default.parse__Uint32 arg0@@243)) )))
(assert  (=> (<= 12 $FunctionContextHeight) (forall ((|data#0| T@U) ) (!  (=> (and (= (type |data#0|) (SeqType BoxType)) (or (|GenericMarshalling.__default.parse__Uint32#canCall| |data#0|) (and (not (= 12 $FunctionContextHeight)) (and ($Is |data#0| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| |data#0|) 18446744073709551616))))) ($Is (GenericMarshalling.__default.parse__Uint32 |data#0|) (Tclass._System.Tuple2 (Tclass.Options.Option Tclass.GenericMarshalling.V) (TSeq Tclass.NativeTypes.byte)))) :qid |GenericM.116:23| :skolemid |1202| :pattern ( (GenericMarshalling.__default.parse__Uint32 |data#0|)) ))))
(assert (forall ((|data#0@@0| T@U) ) (!  (=> (and (= (type |data#0@@0|) (SeqType BoxType)) ($Is |data#0@@0| (TSeq Tclass.NativeTypes.byte))) (and (=> (|GenericMarshalling.__default.parse__Uint32#requires| |data#0@@0|) (< (|Seq#Length| |data#0@@0|) 18446744073709551616)) (=> (< (|Seq#Length| |data#0@@0|) 18446744073709551616) (|GenericMarshalling.__default.parse__Uint32#requires| |data#0@@0|)))) :qid |GenericM.116:23| :skolemid |1203| :pattern ( (|GenericMarshalling.__default.parse__Uint32#requires| |data#0@@0|)) )))
(assert  (and (and (forall ((arg0@@244 T@U) ) (! (= (type (|#Options.Option.Some| arg0@@244)) DatatypeTypeType) :qid |funType:#Options.Option.Some| :pattern ( (|#Options.Option.Some| arg0@@244)) )) (= (type StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32) LayerTypeType)) (= (type |#Options.Option.None|) DatatypeTypeType)))
(assert  (=> (<= 12 $FunctionContextHeight) (forall ((|data#0@@1| T@U) ) (!  (=> (and (= (type |data#0@@1|) (SeqType BoxType)) (or (|GenericMarshalling.__default.parse__Uint32#canCall| |data#0@@1|) (and (not (= 12 $FunctionContextHeight)) (and ($Is |data#0@@1| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| |data#0@@1|) 18446744073709551616))))) (and (and |NativeTypes.__default.Uint32Size#canCall| (=> (>= (|Seq#Length| |data#0@@1|) (LitInt NativeTypes.__default.Uint32Size)) (and (and |NativeTypes.__default.Uint32Size#canCall| (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (|Seq#Take| |data#0@@1| (LitInt NativeTypes.__default.Uint32Size)))) |NativeTypes.__default.Uint32Size#canCall|))) (= (GenericMarshalling.__default.parse__Uint32 |data#0@@1|) (ite (>= (|Seq#Length| |data#0@@1|) (LitInt NativeTypes.__default.Uint32Size)) (|#_System._tuple#2._#Make2| ($Box (|#Options.Option.Some| ($Box (|#GenericMarshalling.V.VUint32| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Take| |data#0@@1| (LitInt NativeTypes.__default.Uint32Size))))))) ($Box (|Seq#Drop| |data#0@@1| (LitInt NativeTypes.__default.Uint32Size)))) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType)))))))) :qid |GenericM.116:23| :skolemid |1204| :pattern ( (GenericMarshalling.__default.parse__Uint32 |data#0@@1|)) ))))
(assert  (=> (<= 12 $FunctionContextHeight) (forall ((|data#0@@2| T@U) ) (!  (=> (and (= (type |data#0@@2|) (SeqType BoxType)) (or (|GenericMarshalling.__default.parse__Uint32#canCall| (Lit |data#0@@2|)) (and (not (= 12 $FunctionContextHeight)) (and ($Is |data#0@@2| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| (Lit |data#0@@2|)) 18446744073709551616))))) (and (and |NativeTypes.__default.Uint32Size#canCall| (=> (>= (|Seq#Length| (Lit |data#0@@2|)) (LitInt NativeTypes.__default.Uint32Size)) (and (and |NativeTypes.__default.Uint32Size#canCall| (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (Lit (|Seq#Take| (Lit |data#0@@2|) (LitInt NativeTypes.__default.Uint32Size))))) |NativeTypes.__default.Uint32Size#canCall|))) (= (GenericMarshalling.__default.parse__Uint32 (Lit |data#0@@2|)) (ite (>= (|Seq#Length| (Lit |data#0@@2|)) (LitInt NativeTypes.__default.Uint32Size)) (|#_System._tuple#2._#Make2| ($Box (|#Options.Option.Some| ($Box (|#GenericMarshalling.V.VUint32| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (Lit (|Seq#Take| (Lit |data#0@@2|) (LitInt NativeTypes.__default.Uint32Size)))))))) ($Box (Lit (|Seq#Drop| (Lit |data#0@@2|) (LitInt NativeTypes.__default.Uint32Size))))) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType)))))))) :qid |GenericM.116:23| :weight 3 :skolemid |1205| :pattern ( (GenericMarshalling.__default.parse__Uint32 (Lit |data#0@@2|))) ))))
(assert  (and (forall ((arg0@@245 T@U) ) (! (= (type (GenericMarshalling.__default.parse__Uint64 arg0@@245)) DatatypeTypeType) :qid |funType:GenericMarshalling.__default.parse__Uint64| :pattern ( (GenericMarshalling.__default.parse__Uint64 arg0@@245)) )) (forall ((arg0@@246 T@U) ) (! (= (type (Options.Option.value arg0@@246)) BoxType) :qid |funType:Options.Option.value| :pattern ( (Options.Option.value arg0@@246)) ))))
(assert  (=> (<= 13 $FunctionContextHeight) (forall ((|data#0@@3| T@U) ) (!  (=> (and (= (type |data#0@@3|) (SeqType BoxType)) (or (|GenericMarshalling.__default.parse__Uint64#canCall| |data#0@@3|) (and (not (= 13 $FunctionContextHeight)) (and ($Is |data#0@@3| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| |data#0@@3|) 18446744073709551616))))) (and (=> (Options.Option.Some_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Uint64 |data#0@@3|)))) (GenericMarshalling.V.VUint64_q ($Unbox DatatypeTypeType (Options.Option.value ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Uint64 |data#0@@3|))))))) ($Is (GenericMarshalling.__default.parse__Uint64 |data#0@@3|) (Tclass._System.Tuple2 (Tclass.Options.Option Tclass.GenericMarshalling.V) (TSeq Tclass.NativeTypes.byte))))) :qid |GenericM.125:23| :skolemid |1210| :pattern ( (GenericMarshalling.__default.parse__Uint64 |data#0@@3|)) ))))
(assert (forall ((|data#0@@4| T@U) ) (!  (=> (and (= (type |data#0@@4|) (SeqType BoxType)) ($Is |data#0@@4| (TSeq Tclass.NativeTypes.byte))) (and (=> (|GenericMarshalling.__default.parse__Uint64#requires| |data#0@@4|) (< (|Seq#Length| |data#0@@4|) 18446744073709551616)) (=> (< (|Seq#Length| |data#0@@4|) 18446744073709551616) (|GenericMarshalling.__default.parse__Uint64#requires| |data#0@@4|)))) :qid |GenericM.125:23| :skolemid |1211| :pattern ( (|GenericMarshalling.__default.parse__Uint64#requires| |data#0@@4|)) )))
(assert (= (type StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64) LayerTypeType))
(assert  (=> (<= 13 $FunctionContextHeight) (forall ((|data#0@@5| T@U) ) (!  (=> (and (= (type |data#0@@5|) (SeqType BoxType)) (or (|GenericMarshalling.__default.parse__Uint64#canCall| |data#0@@5|) (and (not (= 13 $FunctionContextHeight)) (and ($Is |data#0@@5| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| |data#0@@5|) 18446744073709551616))))) (and (and |NativeTypes.__default.Uint64Size#canCall| (=> (>= (|Seq#Length| |data#0@@5|) (LitInt NativeTypes.__default.Uint64Size)) (and (and |NativeTypes.__default.Uint64Size#canCall| (|NativePackedInts.__default.unpack__LittleEndian__Uint64#canCall| (|Seq#Take| |data#0@@5| (LitInt NativeTypes.__default.Uint64Size)))) |NativeTypes.__default.Uint64Size#canCall|))) (= (GenericMarshalling.__default.parse__Uint64 |data#0@@5|) (ite (>= (|Seq#Length| |data#0@@5|) (LitInt NativeTypes.__default.Uint64Size)) (|#_System._tuple#2._#Make2| ($Box (|#Options.Option.Some| ($Box (|#GenericMarshalling.V.VUint64| (NativePackedInts.__default.unpack__LittleEndian__Uint64 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64 (|Seq#Take| |data#0@@5| (LitInt NativeTypes.__default.Uint64Size))))))) ($Box (|Seq#Drop| |data#0@@5| (LitInt NativeTypes.__default.Uint64Size)))) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType)))))))) :qid |GenericM.125:23| :skolemid |1212| :pattern ( (GenericMarshalling.__default.parse__Uint64 |data#0@@5|)) ))))
(assert  (=> (<= 13 $FunctionContextHeight) (forall ((|data#0@@6| T@U) ) (!  (=> (and (= (type |data#0@@6|) (SeqType BoxType)) (or (|GenericMarshalling.__default.parse__Uint64#canCall| (Lit |data#0@@6|)) (and (not (= 13 $FunctionContextHeight)) (and ($Is |data#0@@6| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| (Lit |data#0@@6|)) 18446744073709551616))))) (and (and |NativeTypes.__default.Uint64Size#canCall| (=> (>= (|Seq#Length| (Lit |data#0@@6|)) (LitInt NativeTypes.__default.Uint64Size)) (and (and |NativeTypes.__default.Uint64Size#canCall| (|NativePackedInts.__default.unpack__LittleEndian__Uint64#canCall| (Lit (|Seq#Take| (Lit |data#0@@6|) (LitInt NativeTypes.__default.Uint64Size))))) |NativeTypes.__default.Uint64Size#canCall|))) (= (GenericMarshalling.__default.parse__Uint64 (Lit |data#0@@6|)) (ite (>= (|Seq#Length| (Lit |data#0@@6|)) (LitInt NativeTypes.__default.Uint64Size)) (|#_System._tuple#2._#Make2| ($Box (|#Options.Option.Some| ($Box (|#GenericMarshalling.V.VUint64| (NativePackedInts.__default.unpack__LittleEndian__Uint64 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64 (Lit (|Seq#Take| (Lit |data#0@@6|) (LitInt NativeTypes.__default.Uint64Size)))))))) ($Box (Lit (|Seq#Drop| (Lit |data#0@@6|) (LitInt NativeTypes.__default.Uint64Size))))) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType)))))))) :qid |GenericM.125:23| :weight 3 :skolemid |1213| :pattern ( (GenericMarshalling.__default.parse__Uint64 (Lit |data#0@@6|))) ))))
(assert (forall ((arg0@@247 T@U) (arg1@@107 T@U) (arg2@@61 T@U) (arg3@@39 Int) ) (! (= (type (GenericMarshalling.__default.parse__Array__contents arg0@@247 arg1@@107 arg2@@61 arg3@@39)) DatatypeTypeType) :qid |funType:GenericMarshalling.__default.parse__Array__contents| :pattern ( (GenericMarshalling.__default.parse__Array__contents arg0@@247 arg1@@107 arg2@@61 arg3@@39)) )))
(assert (forall (($ly@@29 T@U) (|data#0@@7| T@U) (|eltType#0| T@U) (|len#0| Int) ) (!  (=> (and (and (= (type $ly@@29) LayerTypeType) (= (type |data#0@@7|) (SeqType BoxType))) (= (type |eltType#0|) DatatypeTypeType)) (= (GenericMarshalling.__default.parse__Array__contents ($LS $ly@@29) |data#0@@7| |eltType#0| |len#0|) (GenericMarshalling.__default.parse__Array__contents $ly@@29 |data#0@@7| |eltType#0| |len#0|))) :qid |GenericM.177:20| :skolemid |1226| :pattern ( (GenericMarshalling.__default.parse__Array__contents ($LS $ly@@29) |data#0@@7| |eltType#0| |len#0|)) )))
(assert (forall (($ly@@30 T@U) (|data#0@@8| T@U) (|eltType#0@@0| T@U) (|len#0@@0| Int) ) (!  (=> (and (and (= (type $ly@@30) LayerTypeType) (= (type |data#0@@8|) (SeqType BoxType))) (= (type |eltType#0@@0|) DatatypeTypeType)) (= (GenericMarshalling.__default.parse__Array__contents $ly@@30 |data#0@@8| |eltType#0@@0| |len#0@@0|) (GenericMarshalling.__default.parse__Array__contents $LZ |data#0@@8| |eltType#0@@0| |len#0@@0|))) :qid |GenericM.177:20| :skolemid |1227| :pattern ( (GenericMarshalling.__default.parse__Array__contents (AsFuelBottom $ly@@30) |data#0@@8| |eltType#0@@0| |len#0@@0|)) )))
(assert  (=> (<= 19 $FunctionContextHeight) (forall (($ly@@31 T@U) (|data#0@@9| T@U) (|eltType#0@@1| T@U) (|len#0@@1| Int) ) (!  (=> (and (and (and (= (type $ly@@31) LayerTypeType) (= (type |data#0@@9|) (SeqType BoxType))) (= (type |eltType#0@@1|) DatatypeTypeType)) (or (|GenericMarshalling.__default.parse__Array__contents#canCall| |data#0@@9| |eltType#0@@1| |len#0@@1|) (and (not (= 19 $FunctionContextHeight)) (and (and (and ($Is |data#0@@9| (TSeq Tclass.NativeTypes.byte)) ($Is |eltType#0@@1| Tclass.GenericMarshalling.G)) (and (<= (LitInt 0) |len#0@@1|) (< |len#0@@1| 18446744073709551616))) (and (< (|Seq#Length| |data#0@@9|) 18446744073709551616) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |eltType#0@@1|)))))) (and (let ((|rest#0| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Array__contents $ly@@31 |data#0@@9| |eltType#0@@1| |len#0@@1|))))) (let ((|opt_seq#0| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Array__contents $ly@@31 |data#0@@9| |eltType#0@@1| |len#0@@1|))))) (and (<= (|Seq#Length| |rest#0|) (|Seq#Length| |data#0@@9|)) (=> (Options.Option.Some_q |opt_seq#0|) (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value |opt_seq#0|))) |len#0@@1|) (forall ((|i#0@@0| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@0|) (< |i#0@@0| (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value |opt_seq#0|))))) (GenericMarshalling.__default.ValidVal ($LS $LZ) ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (Options.Option.value |opt_seq#0|)) |i#0@@0|)))) (=> (and (<= (LitInt 0) |i#0@@0|) (< |i#0@@0| (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value |opt_seq#0|))))) (GenericMarshalling.__default.ValInGrammar ($LS $LZ) ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (Options.Option.value |opt_seq#0|)) |i#0@@0|)) |eltType#0@@1|)))) :qid |GenericM.184:23| :skolemid |1228| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (Options.Option.value |opt_seq#0|)) |i#0@@0|))) ))))))) ($Is (GenericMarshalling.__default.parse__Array__contents $ly@@31 |data#0@@9| |eltType#0@@1| |len#0@@1|) (Tclass._System.Tuple2 (Tclass.Options.Option (TSeq Tclass.GenericMarshalling.V)) (TSeq Tclass.NativeTypes.byte))))) :qid |GenericM.177:20| :skolemid |1229| :pattern ( (GenericMarshalling.__default.parse__Array__contents $ly@@31 |data#0@@9| |eltType#0@@1| |len#0@@1|)) ))))
(assert (forall (($ly@@32 T@U) (|data#0@@10| T@U) (|eltType#0@@2| T@U) (|len#0@@2| Int) ) (!  (=> (and (and (and (= (type $ly@@32) LayerTypeType) (= (type |data#0@@10|) (SeqType BoxType))) (= (type |eltType#0@@2|) DatatypeTypeType)) (and (and ($Is |data#0@@10| (TSeq Tclass.NativeTypes.byte)) ($Is |eltType#0@@2| Tclass.GenericMarshalling.G)) (and (<= (LitInt 0) |len#0@@2|) (< |len#0@@2| 18446744073709551616)))) (and (=> (|GenericMarshalling.__default.parse__Array__contents#requires| $ly@@32 |data#0@@10| |eltType#0@@2| |len#0@@2|) (and (< (|Seq#Length| |data#0@@10|) 18446744073709551616) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |eltType#0@@2|))) (=> (and (< (|Seq#Length| |data#0@@10|) 18446744073709551616) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |eltType#0@@2|)) (|GenericMarshalling.__default.parse__Array__contents#requires| $ly@@32 |data#0@@10| |eltType#0@@2| |len#0@@2|)))) :qid |GenericM.177:20| :skolemid |1230| :pattern ( (|GenericMarshalling.__default.parse__Array__contents#requires| $ly@@32 |data#0@@10| |eltType#0@@2| |len#0@@2|)) )))
(assert (forall ((arg0@@248 T@U) (arg1@@108 T@U) (arg2@@62 T@U) ) (! (= (type (GenericMarshalling.__default.parse__Val arg0@@248 arg1@@108 arg2@@62)) DatatypeTypeType) :qid |funType:GenericMarshalling.__default.parse__Val| :pattern ( (GenericMarshalling.__default.parse__Val arg0@@248 arg1@@108 arg2@@62)) )))
(assert  (=> (<= 19 $FunctionContextHeight) (forall (($ly@@33 T@U) (|data#0@@11| T@U) (|eltType#0@@3| T@U) (|len#0@@3| Int) ) (!  (=> (and (and (and (= (type $ly@@33) LayerTypeType) (= (type |data#0@@11|) (SeqType BoxType))) (= (type |eltType#0@@3|) DatatypeTypeType)) (or (|GenericMarshalling.__default.parse__Array__contents#canCall| |data#0@@11| |eltType#0@@3| |len#0@@3|) (and (not (= 19 $FunctionContextHeight)) (and (and (and ($Is |data#0@@11| (TSeq Tclass.NativeTypes.byte)) ($Is |eltType#0@@3| Tclass.GenericMarshalling.G)) (and (<= (LitInt 0) |len#0@@3|) (< |len#0@@3| 18446744073709551616))) (and (< (|Seq#Length| |data#0@@11|) 18446744073709551616) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |eltType#0@@3|)))))) (and (=> (not (= |len#0@@3| (LitInt 0))) (and (|GenericMarshalling.__default.parse__Val#canCall| |data#0@@11| |eltType#0@@3|) (let ((|rest1#0| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Val $ly@@33 |data#0@@11| |eltType#0@@3|))))) (|GenericMarshalling.__default.parse__Array__contents#canCall| |rest1#0| |eltType#0@@3| (- |len#0@@3| 1))))) (= (GenericMarshalling.__default.parse__Array__contents ($LS $ly@@33) |data#0@@11| |eltType#0@@3| |len#0@@3|) (ite (= |len#0@@3| (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|#Options.Option.Some| ($Box (Lit (|Seq#Empty| BoxType)))))) ($Box |data#0@@11|)) (let ((|rest1#0@@0| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Val $ly@@33 |data#0@@11| |eltType#0@@3|))))) (let ((|val#0@@17| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val $ly@@33 |data#0@@11| |eltType#0@@3|))))) (let ((|rest2#0| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Array__contents $ly@@33 |rest1#0@@0| |eltType#0@@3| (- |len#0@@3| 1)))))) (let ((|others#0| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Array__contents $ly@@33 |rest1#0@@0| |eltType#0@@3| (- |len#0@@3| 1)))))) (ite  (and (not (Options.Option.None_q |val#0@@17|)) (not (Options.Option.None_q |others#0|))) (|#_System._tuple#2._#Make2| ($Box (|#Options.Option.Some| ($Box (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Options.Option.value |val#0@@17|)) ($Unbox (SeqType BoxType) (Options.Option.value |others#0|)))))) ($Box |rest2#0|)) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType))))))))))))) :qid |GenericM.177:20| :skolemid |1231| :pattern ( (GenericMarshalling.__default.parse__Array__contents ($LS $ly@@33) |data#0@@11| |eltType#0@@3| |len#0@@3|)) ))))
(assert  (=> (<= 19 $FunctionContextHeight) (forall (($ly@@34 T@U) (|data#0@@12| T@U) (|eltType#0@@4| T@U) (|len#0@@4| Int) ) (!  (=> (and (and (and (= (type $ly@@34) LayerTypeType) (= (type |data#0@@12|) (SeqType BoxType))) (= (type |eltType#0@@4|) DatatypeTypeType)) (or (|GenericMarshalling.__default.parse__Array__contents#canCall| |data#0@@12| (Lit |eltType#0@@4|) (LitInt |len#0@@4|)) (and (not (= 19 $FunctionContextHeight)) (and (and (and ($Is |data#0@@12| (TSeq Tclass.NativeTypes.byte)) ($Is |eltType#0@@4| Tclass.GenericMarshalling.G)) (and (<= (LitInt 0) |len#0@@4|) (< |len#0@@4| 18446744073709551616))) (and (< (|Seq#Length| |data#0@@12|) 18446744073709551616) (U_2_bool (Lit (bool_2_U (GenericMarshalling.__default.ValidGrammar ($LS $LZ) (Lit |eltType#0@@4|)))))))))) (and (=> (not (= (LitInt |len#0@@4|) (LitInt 0))) (and (|GenericMarshalling.__default.parse__Val#canCall| |data#0@@12| (Lit |eltType#0@@4|)) (let ((|rest1#1| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Val ($LS $ly@@34) |data#0@@12| (Lit |eltType#0@@4|)))))) (|GenericMarshalling.__default.parse__Array__contents#canCall| |rest1#1| (Lit |eltType#0@@4|) (LitInt (- |len#0@@4| 1)))))) (= (GenericMarshalling.__default.parse__Array__contents ($LS $ly@@34) |data#0@@12| (Lit |eltType#0@@4|) (LitInt |len#0@@4|)) (ite (= (LitInt |len#0@@4|) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|#Options.Option.Some| ($Box (Lit (|Seq#Empty| BoxType)))))) ($Box |data#0@@12|)) (let ((|rest1#1@@0| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Val ($LS $ly@@34) |data#0@@12| (Lit |eltType#0@@4|)))))) (let ((|val#1| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val ($LS $ly@@34) |data#0@@12| (Lit |eltType#0@@4|)))))) (let ((|rest2#1| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Array__contents ($LS $ly@@34) |rest1#1@@0| (Lit |eltType#0@@4|) (LitInt (- |len#0@@4| 1))))))) (let ((|others#1| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Array__contents ($LS $ly@@34) |rest1#1@@0| (Lit |eltType#0@@4|) (LitInt (- |len#0@@4| 1))))))) (ite  (and (not (Options.Option.None_q |val#1|)) (not (Options.Option.None_q |others#1|))) (|#_System._tuple#2._#Make2| ($Box (|#Options.Option.Some| ($Box (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Options.Option.value |val#1|)) ($Unbox (SeqType BoxType) (Options.Option.value |others#1|)))))) ($Box |rest2#1|)) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType))))))))))))) :qid |GenericM.177:20| :weight 3 :skolemid |1232| :pattern ( (GenericMarshalling.__default.parse__Array__contents ($LS $ly@@34) |data#0@@12| (Lit |eltType#0@@4|) (LitInt |len#0@@4|))) ))))
(assert  (=> (<= 19 $FunctionContextHeight) (forall (($ly@@35 T@U) (|data#0@@13| T@U) (|eltType#0@@5| T@U) (|len#0@@5| Int) ) (!  (=> (and (and (and (= (type $ly@@35) LayerTypeType) (= (type |data#0@@13|) (SeqType BoxType))) (= (type |eltType#0@@5|) DatatypeTypeType)) (or (|GenericMarshalling.__default.parse__Array__contents#canCall| (Lit |data#0@@13|) (Lit |eltType#0@@5|) (LitInt |len#0@@5|)) (and (not (= 19 $FunctionContextHeight)) (and (and (and ($Is |data#0@@13| (TSeq Tclass.NativeTypes.byte)) ($Is |eltType#0@@5| Tclass.GenericMarshalling.G)) (and (<= (LitInt 0) |len#0@@5|) (< |len#0@@5| 18446744073709551616))) (and (< (|Seq#Length| (Lit |data#0@@13|)) 18446744073709551616) (U_2_bool (Lit (bool_2_U (GenericMarshalling.__default.ValidGrammar ($LS $LZ) (Lit |eltType#0@@5|)))))))))) (and (=> (not (= (LitInt |len#0@@5|) (LitInt 0))) (and (|GenericMarshalling.__default.parse__Val#canCall| (Lit |data#0@@13|) (Lit |eltType#0@@5|)) (let ((|rest1#2| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Val ($LS $ly@@35) (Lit |data#0@@13|) (Lit |eltType#0@@5|)))))) (|GenericMarshalling.__default.parse__Array__contents#canCall| |rest1#2| (Lit |eltType#0@@5|) (LitInt (- |len#0@@5| 1)))))) (= (GenericMarshalling.__default.parse__Array__contents ($LS $ly@@35) (Lit |data#0@@13|) (Lit |eltType#0@@5|) (LitInt |len#0@@5|)) (ite (= (LitInt |len#0@@5|) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|#Options.Option.Some| ($Box (Lit (|Seq#Empty| BoxType)))))) ($Box (Lit |data#0@@13|))) (let ((|rest1#2@@0| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Val ($LS $ly@@35) (Lit |data#0@@13|) (Lit |eltType#0@@5|)))))) (let ((|val#2| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val ($LS $ly@@35) (Lit |data#0@@13|) (Lit |eltType#0@@5|)))))) (let ((|rest2#2| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Array__contents ($LS $ly@@35) |rest1#2@@0| (Lit |eltType#0@@5|) (LitInt (- |len#0@@5| 1))))))) (let ((|others#2| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Array__contents ($LS $ly@@35) |rest1#2@@0| (Lit |eltType#0@@5|) (LitInt (- |len#0@@5| 1))))))) (ite  (and (not (Options.Option.None_q |val#2|)) (not (Options.Option.None_q |others#2|))) (|#_System._tuple#2._#Make2| ($Box (|#Options.Option.Some| ($Box (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Options.Option.value |val#2|)) ($Unbox (SeqType BoxType) (Options.Option.value |others#2|)))))) ($Box |rest2#2|)) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType))))))))))))) :qid |GenericM.177:20| :weight 3 :skolemid |1233| :pattern ( (GenericMarshalling.__default.parse__Array__contents ($LS $ly@@35) (Lit |data#0@@13|) (Lit |eltType#0@@5|) (LitInt |len#0@@5|))) ))))
(assert (forall ((arg0@@249 T@U) (arg1@@109 T@U) (arg2@@63 T@U) ) (! (= (type (GenericMarshalling.__default.parse__Array arg0@@249 arg1@@109 arg2@@63)) DatatypeTypeType) :qid |funType:GenericMarshalling.__default.parse__Array| :pattern ( (GenericMarshalling.__default.parse__Array arg0@@249 arg1@@109 arg2@@63)) )))
(assert (forall (($ly@@36 T@U) (|data#0@@14| T@U) (|eltType#0@@6| T@U) ) (!  (=> (and (and (= (type $ly@@36) LayerTypeType) (= (type |data#0@@14|) (SeqType BoxType))) (= (type |eltType#0@@6|) DatatypeTypeType)) (= (GenericMarshalling.__default.parse__Array ($LS $ly@@36) |data#0@@14| |eltType#0@@6|) (GenericMarshalling.__default.parse__Array $ly@@36 |data#0@@14| |eltType#0@@6|))) :qid |GenericM.337:10| :skolemid |1332| :pattern ( (GenericMarshalling.__default.parse__Array ($LS $ly@@36) |data#0@@14| |eltType#0@@6|)) )))
(assert (forall (($ly@@37 T@U) (|data#0@@15| T@U) (|eltType#0@@7| T@U) ) (!  (=> (and (and (= (type $ly@@37) LayerTypeType) (= (type |data#0@@15|) (SeqType BoxType))) (= (type |eltType#0@@7|) DatatypeTypeType)) (= (GenericMarshalling.__default.parse__Array $ly@@37 |data#0@@15| |eltType#0@@7|) (GenericMarshalling.__default.parse__Array $LZ |data#0@@15| |eltType#0@@7|))) :qid |GenericM.337:10| :skolemid |1333| :pattern ( (GenericMarshalling.__default.parse__Array (AsFuelBottom $ly@@37) |data#0@@15| |eltType#0@@7|)) )))
(assert  (=> (<= 19 $FunctionContextHeight) (forall (($ly@@38 T@U) (|data#0@@16| T@U) (|eltType#0@@8| T@U) ) (!  (=> (and (and (and (= (type $ly@@38) LayerTypeType) (= (type |data#0@@16|) (SeqType BoxType))) (= (type |eltType#0@@8|) DatatypeTypeType)) (or (|GenericMarshalling.__default.parse__Array#canCall| |data#0@@16| |eltType#0@@8|) (and (not (= 19 $FunctionContextHeight)) (and (and ($Is |data#0@@16| (TSeq Tclass.NativeTypes.byte)) ($Is |eltType#0@@8| Tclass.GenericMarshalling.G)) (and (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |eltType#0@@8|) (< (|Seq#Length| |data#0@@16|) 18446744073709551616)))))) (and (let ((|rest#0@@0| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Array $ly@@38 |data#0@@16| |eltType#0@@8|))))) (let ((|opt_val#0| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Array $ly@@38 |data#0@@16| |eltType#0@@8|))))) (and (<= (|Seq#Length| |rest#0@@0|) (|Seq#Length| |data#0@@16|)) (=> (Options.Option.Some_q |opt_val#0|) (and (GenericMarshalling.__default.ValidVal ($LS $LZ) ($Unbox DatatypeTypeType (Options.Option.value |opt_val#0|))) (GenericMarshalling.__default.ValInGrammar ($LS $LZ) ($Unbox DatatypeTypeType (Options.Option.value |opt_val#0|)) (|#GenericMarshalling.G.GArray| |eltType#0@@8|))))))) ($Is (GenericMarshalling.__default.parse__Array $ly@@38 |data#0@@16| |eltType#0@@8|) (Tclass._System.Tuple2 (Tclass.Options.Option Tclass.GenericMarshalling.V) (TSeq Tclass.NativeTypes.byte))))) :qid |GenericM.337:10| :skolemid |1334| :pattern ( (GenericMarshalling.__default.parse__Array $ly@@38 |data#0@@16| |eltType#0@@8|)) ))))
(assert (forall (($ly@@39 T@U) (|data#0@@17| T@U) (|eltType#0@@9| T@U) ) (!  (=> (and (and (and (= (type $ly@@39) LayerTypeType) (= (type |data#0@@17|) (SeqType BoxType))) (= (type |eltType#0@@9|) DatatypeTypeType)) (and ($Is |data#0@@17| (TSeq Tclass.NativeTypes.byte)) ($Is |eltType#0@@9| Tclass.GenericMarshalling.G))) (and (=> (|GenericMarshalling.__default.parse__Array#requires| $ly@@39 |data#0@@17| |eltType#0@@9|) (and (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |eltType#0@@9|) (< (|Seq#Length| |data#0@@17|) 18446744073709551616))) (=> (and (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |eltType#0@@9|) (< (|Seq#Length| |data#0@@17|) 18446744073709551616)) (|GenericMarshalling.__default.parse__Array#requires| $ly@@39 |data#0@@17| |eltType#0@@9|)))) :qid |GenericM.337:10| :skolemid |1335| :pattern ( (|GenericMarshalling.__default.parse__Array#requires| $ly@@39 |data#0@@17| |eltType#0@@9|)) )))
(assert  (=> (<= 19 $FunctionContextHeight) (forall (($ly@@40 T@U) (|data#0@@18| T@U) (|eltType#0@@10| T@U) ) (!  (=> (and (and (and (= (type $ly@@40) LayerTypeType) (= (type |data#0@@18|) (SeqType BoxType))) (= (type |eltType#0@@10|) DatatypeTypeType)) (or (|GenericMarshalling.__default.parse__Array#canCall| |data#0@@18| |eltType#0@@10|) (and (not (= 19 $FunctionContextHeight)) (and (and ($Is |data#0@@18| (TSeq Tclass.NativeTypes.byte)) ($Is |eltType#0@@10| Tclass.GenericMarshalling.G)) (and (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |eltType#0@@10|) (< (|Seq#Length| |data#0@@18|) 18446744073709551616)))))) (and (and (|GenericMarshalling.__default.parse__Uint64#canCall| |data#0@@18|) (let ((|rest#1| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Uint64 |data#0@@18|))))) (let ((|len#0@@6| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Uint64 |data#0@@18|))))) (=> (not (Options.Option.None_q |len#0@@6|)) (let ((|len64#0| (GenericMarshalling.V.u ($Unbox DatatypeTypeType (Options.Option.value |len#0@@6|))))) (|GenericMarshalling.__default.parse__Array__contents#canCall| |rest#1| |eltType#0@@10| |len64#0|)))))) (= (GenericMarshalling.__default.parse__Array ($LS $ly@@40) |data#0@@18| |eltType#0@@10|) (let ((|rest#1@@0| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Uint64 |data#0@@18|))))) (let ((|len#0@@7| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Uint64 |data#0@@18|))))) (ite  (not (Options.Option.None_q |len#0@@7|)) (let ((|len64#0@@0| (GenericMarshalling.V.u ($Unbox DatatypeTypeType (Options.Option.value |len#0@@7|))))) (let ((|remainder#0| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Array__contents $ly@@40 |rest#1@@0| |eltType#0@@10| |len64#0@@0|))))) (let ((|contents#0| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Array__contents $ly@@40 |rest#1@@0| |eltType#0@@10| |len64#0@@0|))))) (ite  (not (Options.Option.None_q |contents#0|)) (|#_System._tuple#2._#Make2| ($Box (|#Options.Option.Some| ($Box (|#GenericMarshalling.V.VArray| ($Unbox (SeqType BoxType) (Options.Option.value |contents#0|)))))) ($Box |remainder#0|)) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType)))))))) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType)))))))))) :qid |GenericM.337:10| :skolemid |1336| :pattern ( (GenericMarshalling.__default.parse__Array ($LS $ly@@40) |data#0@@18| |eltType#0@@10|)) ))))
(assert  (=> (<= 19 $FunctionContextHeight) (forall (($ly@@41 T@U) (|data#0@@19| T@U) (|eltType#0@@11| T@U) ) (!  (=> (and (and (and (= (type $ly@@41) LayerTypeType) (= (type |data#0@@19|) (SeqType BoxType))) (= (type |eltType#0@@11|) DatatypeTypeType)) (or (|GenericMarshalling.__default.parse__Array#canCall| |data#0@@19| (Lit |eltType#0@@11|)) (and (not (= 19 $FunctionContextHeight)) (and (and ($Is |data#0@@19| (TSeq Tclass.NativeTypes.byte)) ($Is |eltType#0@@11| Tclass.GenericMarshalling.G)) (and (U_2_bool (Lit (bool_2_U (GenericMarshalling.__default.ValidGrammar ($LS $LZ) (Lit |eltType#0@@11|))))) (< (|Seq#Length| |data#0@@19|) 18446744073709551616)))))) (and (and (|GenericMarshalling.__default.parse__Uint64#canCall| |data#0@@19|) (let ((|rest#2| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Uint64 |data#0@@19|))))) (let ((|len#1| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Uint64 |data#0@@19|))))) (=> (not (Options.Option.None_q |len#1|)) (let ((|len64#1| (GenericMarshalling.V.u ($Unbox DatatypeTypeType (Options.Option.value |len#1|))))) (|GenericMarshalling.__default.parse__Array__contents#canCall| |rest#2| (Lit |eltType#0@@11|) |len64#1|)))))) (= (GenericMarshalling.__default.parse__Array ($LS $ly@@41) |data#0@@19| (Lit |eltType#0@@11|)) (let ((|rest#2@@0| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Uint64 |data#0@@19|))))) (let ((|len#1@@0| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Uint64 |data#0@@19|))))) (ite  (not (Options.Option.None_q |len#1@@0|)) (let ((|len64#1@@0| (GenericMarshalling.V.u ($Unbox DatatypeTypeType (Options.Option.value |len#1@@0|))))) (let ((|remainder#1| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Array__contents ($LS $ly@@41) |rest#2@@0| (Lit |eltType#0@@11|) |len64#1@@0|))))) (let ((|contents#1| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Array__contents ($LS $ly@@41) |rest#2@@0| (Lit |eltType#0@@11|) |len64#1@@0|))))) (ite  (not (Options.Option.None_q |contents#1|)) (|#_System._tuple#2._#Make2| ($Box (|#Options.Option.Some| ($Box (|#GenericMarshalling.V.VArray| ($Unbox (SeqType BoxType) (Options.Option.value |contents#1|)))))) ($Box |remainder#1|)) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType)))))))) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType)))))))))) :qid |GenericM.337:10| :weight 3 :skolemid |1337| :pattern ( (GenericMarshalling.__default.parse__Array ($LS $ly@@41) |data#0@@19| (Lit |eltType#0@@11|))) ))))
(assert  (=> (<= 19 $FunctionContextHeight) (forall (($ly@@42 T@U) (|data#0@@20| T@U) (|eltType#0@@12| T@U) ) (!  (=> (and (and (and (= (type $ly@@42) LayerTypeType) (= (type |data#0@@20|) (SeqType BoxType))) (= (type |eltType#0@@12|) DatatypeTypeType)) (or (|GenericMarshalling.__default.parse__Array#canCall| (Lit |data#0@@20|) (Lit |eltType#0@@12|)) (and (not (= 19 $FunctionContextHeight)) (and (and ($Is |data#0@@20| (TSeq Tclass.NativeTypes.byte)) ($Is |eltType#0@@12| Tclass.GenericMarshalling.G)) (and (U_2_bool (Lit (bool_2_U (GenericMarshalling.__default.ValidGrammar ($LS $LZ) (Lit |eltType#0@@12|))))) (< (|Seq#Length| (Lit |data#0@@20|)) 18446744073709551616)))))) (and (and (|GenericMarshalling.__default.parse__Uint64#canCall| (Lit |data#0@@20|)) (let ((|rest#3| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Lit (GenericMarshalling.__default.parse__Uint64 (Lit |data#0@@20|))))))) (let ((|len#2| ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (GenericMarshalling.__default.parse__Uint64 (Lit |data#0@@20|))))))) (=> (not (Options.Option.None_q |len#2|)) (let ((|len64#2| (GenericMarshalling.V.u ($Unbox DatatypeTypeType (Options.Option.value |len#2|))))) (|GenericMarshalling.__default.parse__Array__contents#canCall| |rest#3| (Lit |eltType#0@@12|) |len64#2|)))))) (= (GenericMarshalling.__default.parse__Array ($LS $ly@@42) (Lit |data#0@@20|) (Lit |eltType#0@@12|)) (let ((|rest#3@@0| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Lit (GenericMarshalling.__default.parse__Uint64 (Lit |data#0@@20|))))))) (let ((|len#2@@0| ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (GenericMarshalling.__default.parse__Uint64 (Lit |data#0@@20|))))))) (ite  (not (Options.Option.None_q |len#2@@0|)) (let ((|len64#2@@0| (GenericMarshalling.V.u ($Unbox DatatypeTypeType (Options.Option.value |len#2@@0|))))) (let ((|remainder#2| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Array__contents ($LS $ly@@42) |rest#3@@0| (Lit |eltType#0@@12|) |len64#2@@0|))))) (let ((|contents#2| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Array__contents ($LS $ly@@42) |rest#3@@0| (Lit |eltType#0@@12|) |len64#2@@0|))))) (ite  (not (Options.Option.None_q |contents#2|)) (|#_System._tuple#2._#Make2| ($Box (|#Options.Option.Some| ($Box (|#GenericMarshalling.V.VArray| ($Unbox (SeqType BoxType) (Options.Option.value |contents#2|)))))) ($Box |remainder#2|)) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType)))))))) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType)))))))))) :qid |GenericM.337:10| :weight 3 :skolemid |1338| :pattern ( (GenericMarshalling.__default.parse__Array ($LS $ly@@42) (Lit |data#0@@20|) (Lit |eltType#0@@12|))) ))))
(assert (forall ((arg0@@250 T@U) (arg1@@110 T@U) (arg2@@64 T@U) ) (! (= (type (GenericMarshalling.__default.parse__Tuple__contents arg0@@250 arg1@@110 arg2@@64)) DatatypeTypeType) :qid |funType:GenericMarshalling.__default.parse__Tuple__contents| :pattern ( (GenericMarshalling.__default.parse__Tuple__contents arg0@@250 arg1@@110 arg2@@64)) )))
(assert (forall (($ly@@43 T@U) (|data#0@@21| T@U) (|eltTypes#0| T@U) ) (!  (=> (and (and (= (type $ly@@43) LayerTypeType) (= (type |data#0@@21|) (SeqType BoxType))) (= (type |eltTypes#0|) (SeqType BoxType))) (= (GenericMarshalling.__default.parse__Tuple__contents ($LS $ly@@43) |data#0@@21| |eltTypes#0|) (GenericMarshalling.__default.parse__Tuple__contents $ly@@43 |data#0@@21| |eltTypes#0|))) :qid |GenericM.387:20| :skolemid |1347| :pattern ( (GenericMarshalling.__default.parse__Tuple__contents ($LS $ly@@43) |data#0@@21| |eltTypes#0|)) )))
(assert (forall (($ly@@44 T@U) (|data#0@@22| T@U) (|eltTypes#0@@0| T@U) ) (!  (=> (and (and (= (type $ly@@44) LayerTypeType) (= (type |data#0@@22|) (SeqType BoxType))) (= (type |eltTypes#0@@0|) (SeqType BoxType))) (= (GenericMarshalling.__default.parse__Tuple__contents $ly@@44 |data#0@@22| |eltTypes#0@@0|) (GenericMarshalling.__default.parse__Tuple__contents $LZ |data#0@@22| |eltTypes#0@@0|))) :qid |GenericM.387:20| :skolemid |1348| :pattern ( (GenericMarshalling.__default.parse__Tuple__contents (AsFuelBottom $ly@@44) |data#0@@22| |eltTypes#0@@0|)) )))
(assert  (=> (<= 19 $FunctionContextHeight) (forall (($ly@@45 T@U) (|data#0@@23| T@U) (|eltTypes#0@@1| T@U) ) (!  (=> (and (and (and (= (type $ly@@45) LayerTypeType) (= (type |data#0@@23|) (SeqType BoxType))) (= (type |eltTypes#0@@1|) (SeqType BoxType))) (or (|GenericMarshalling.__default.parse__Tuple__contents#canCall| |data#0@@23| |eltTypes#0@@1|) (and (not (= 19 $FunctionContextHeight)) (and (and ($Is |data#0@@23| (TSeq Tclass.NativeTypes.byte)) ($Is |eltTypes#0@@1| (TSeq Tclass.GenericMarshalling.G))) (and (and (< (|Seq#Length| |data#0@@23|) 18446744073709551616) (< (|Seq#Length| |eltTypes#0@@1|) 18446744073709551616)) (forall ((|elt#0@@0| T@U) ) (!  (=> (and (and (= (type |elt#0@@0|) DatatypeTypeType) ($Is |elt#0@@0| Tclass.GenericMarshalling.G)) (|Seq#Contains| |eltTypes#0@@1| ($Box |elt#0@@0|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#0@@0|)) :qid |GenericM.390:21| :skolemid |1349| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#0@@0|)) :pattern ( (|Seq#Contains| |eltTypes#0@@1| ($Box |elt#0@@0|))) ))))))) (and (let ((|rest#0@@1| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Tuple__contents $ly@@45 |data#0@@23| |eltTypes#0@@1|))))) (let ((|opt_val#0@@0| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Tuple__contents $ly@@45 |data#0@@23| |eltTypes#0@@1|))))) (and (<= (|Seq#Length| |rest#0@@1|) (|Seq#Length| |data#0@@23|)) (=> (Options.Option.Some_q |opt_val#0@@0|) (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value |opt_val#0@@0|))) (|Seq#Length| |eltTypes#0@@1|)) (forall ((|i#0@@1| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@1|) (< |i#0@@1| (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value |opt_val#0@@0|))))) (GenericMarshalling.__default.ValidVal ($LS $LZ) ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (Options.Option.value |opt_val#0@@0|)) |i#0@@1|)))) (=> (and (<= (LitInt 0) |i#0@@1|) (< |i#0@@1| (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value |opt_val#0@@0|))))) (GenericMarshalling.__default.ValInGrammar ($LS $LZ) ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (Options.Option.value |opt_val#0@@0|)) |i#0@@1|)) ($Unbox DatatypeTypeType (|Seq#Index| |eltTypes#0@@1| |i#0@@1|)))))) :qid |GenericM.395:41| :skolemid |1350| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |eltTypes#0@@1| |i#0@@1|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (Options.Option.value |opt_val#0@@0|)) |i#0@@1|))) ))))))) ($Is (GenericMarshalling.__default.parse__Tuple__contents $ly@@45 |data#0@@23| |eltTypes#0@@1|) (Tclass._System.Tuple2 (Tclass.Options.Option (TSeq Tclass.GenericMarshalling.V)) (TSeq Tclass.NativeTypes.byte))))) :qid |GenericM.387:20| :skolemid |1351| :pattern ( (GenericMarshalling.__default.parse__Tuple__contents $ly@@45 |data#0@@23| |eltTypes#0@@1|)) ))))
(assert (forall (($ly@@46 T@U) (|data#0@@24| T@U) (|eltTypes#0@@2| T@U) ) (!  (=> (and (and (and (= (type $ly@@46) LayerTypeType) (= (type |data#0@@24|) (SeqType BoxType))) (= (type |eltTypes#0@@2|) (SeqType BoxType))) (and ($Is |data#0@@24| (TSeq Tclass.NativeTypes.byte)) ($Is |eltTypes#0@@2| (TSeq Tclass.GenericMarshalling.G)))) (and (=> (|GenericMarshalling.__default.parse__Tuple__contents#requires| $ly@@46 |data#0@@24| |eltTypes#0@@2|) (and (and (< (|Seq#Length| |data#0@@24|) 18446744073709551616) (< (|Seq#Length| |eltTypes#0@@2|) 18446744073709551616)) (forall ((|elt#1@@1| T@U) ) (!  (=> (and (and (= (type |elt#1@@1|) DatatypeTypeType) ($Is |elt#1@@1| Tclass.GenericMarshalling.G)) (|Seq#Contains| |eltTypes#0@@2| ($Box |elt#1@@1|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#1@@1|)) :qid |GenericM.390:21| :skolemid |1352| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#1@@1|)) :pattern ( (|Seq#Contains| |eltTypes#0@@2| ($Box |elt#1@@1|))) )))) (=> (and (and (< (|Seq#Length| |data#0@@24|) 18446744073709551616) (< (|Seq#Length| |eltTypes#0@@2|) 18446744073709551616)) (forall ((|elt#1@@2| T@U) ) (!  (=> (and (and (= (type |elt#1@@2|) DatatypeTypeType) ($Is |elt#1@@2| Tclass.GenericMarshalling.G)) (|Seq#Contains| |eltTypes#0@@2| ($Box |elt#1@@2|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#1@@2|)) :qid |GenericM.390:21| :skolemid |1352| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#1@@2|)) :pattern ( (|Seq#Contains| |eltTypes#0@@2| ($Box |elt#1@@2|))) ))) (|GenericMarshalling.__default.parse__Tuple__contents#requires| $ly@@46 |data#0@@24| |eltTypes#0@@2|)))) :qid |GenericM.387:20| :skolemid |1353| :pattern ( (|GenericMarshalling.__default.parse__Tuple__contents#requires| $ly@@46 |data#0@@24| |eltTypes#0@@2|)) )))
(assert  (=> (<= 19 $FunctionContextHeight) (forall (($ly@@47 T@U) (|data#0@@25| T@U) (|eltTypes#0@@3| T@U) ) (!  (=> (and (and (and (= (type $ly@@47) LayerTypeType) (= (type |data#0@@25|) (SeqType BoxType))) (= (type |eltTypes#0@@3|) (SeqType BoxType))) (or (|GenericMarshalling.__default.parse__Tuple__contents#canCall| |data#0@@25| |eltTypes#0@@3|) (and (not (= 19 $FunctionContextHeight)) (and (and ($Is |data#0@@25| (TSeq Tclass.NativeTypes.byte)) ($Is |eltTypes#0@@3| (TSeq Tclass.GenericMarshalling.G))) (and (and (< (|Seq#Length| |data#0@@25|) 18446744073709551616) (< (|Seq#Length| |eltTypes#0@@3|) 18446744073709551616)) (forall ((|elt#1@@3| T@U) ) (!  (=> (and (and (= (type |elt#1@@3|) DatatypeTypeType) ($Is |elt#1@@3| Tclass.GenericMarshalling.G)) (|Seq#Contains| |eltTypes#0@@3| ($Box |elt#1@@3|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#1@@3|)) :qid |GenericM.390:21| :skolemid |1352| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#1@@3|)) :pattern ( (|Seq#Contains| |eltTypes#0@@3| ($Box |elt#1@@3|))) ))))))) (and (=> (not (|Seq#Equal| |eltTypes#0@@3| (|Seq#Empty| BoxType))) (and (|GenericMarshalling.__default.parse__Val#canCall| |data#0@@25| ($Unbox DatatypeTypeType (|Seq#Index| |eltTypes#0@@3| (LitInt 0)))) (let ((|rest1#0@@1| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Val $ly@@47 |data#0@@25| ($Unbox DatatypeTypeType (|Seq#Index| |eltTypes#0@@3| (LitInt 0)))))))) (|GenericMarshalling.__default.parse__Tuple__contents#canCall| |rest1#0@@1| (|Seq#Drop| |eltTypes#0@@3| (LitInt 1)))))) (= (GenericMarshalling.__default.parse__Tuple__contents ($LS $ly@@47) |data#0@@25| |eltTypes#0@@3|) (ite (|Seq#Equal| |eltTypes#0@@3| (|Seq#Empty| BoxType)) (|#_System._tuple#2._#Make2| ($Box (Lit (|#Options.Option.Some| ($Box (Lit (|Seq#Empty| BoxType)))))) ($Box |data#0@@25|)) (let ((|rest1#0@@2| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Val $ly@@47 |data#0@@25| ($Unbox DatatypeTypeType (|Seq#Index| |eltTypes#0@@3| (LitInt 0)))))))) (let ((|val#0@@18| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val $ly@@47 |data#0@@25| ($Unbox DatatypeTypeType (|Seq#Index| |eltTypes#0@@3| (LitInt 0)))))))) (let ((|rest2#0@@0| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Tuple__contents $ly@@47 |rest1#0@@2| (|Seq#Drop| |eltTypes#0@@3| (LitInt 1))))))) (let ((|contents#0@@0| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Tuple__contents $ly@@47 |rest1#0@@2| (|Seq#Drop| |eltTypes#0@@3| (LitInt 1))))))) (ite  (and (not (Options.Option.None_q |val#0@@18|)) (not (Options.Option.None_q |contents#0@@0|))) (|#_System._tuple#2._#Make2| ($Box (|#Options.Option.Some| ($Box (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Options.Option.value |val#0@@18|)) ($Unbox (SeqType BoxType) (Options.Option.value |contents#0@@0|)))))) ($Box |rest2#0@@0|)) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType))))))))))))) :qid |GenericM.387:20| :skolemid |1354| :pattern ( (GenericMarshalling.__default.parse__Tuple__contents ($LS $ly@@47) |data#0@@25| |eltTypes#0@@3|)) ))))
(assert  (=> (<= 19 $FunctionContextHeight) (forall (($ly@@48 T@U) (|data#0@@26| T@U) (|eltTypes#0@@4| T@U) ) (!  (=> (and (and (and (= (type $ly@@48) LayerTypeType) (= (type |data#0@@26|) (SeqType BoxType))) (= (type |eltTypes#0@@4|) (SeqType BoxType))) (or (|GenericMarshalling.__default.parse__Tuple__contents#canCall| |data#0@@26| (Lit |eltTypes#0@@4|)) (and (not (= 19 $FunctionContextHeight)) (and (and ($Is |data#0@@26| (TSeq Tclass.NativeTypes.byte)) ($Is |eltTypes#0@@4| (TSeq Tclass.GenericMarshalling.G))) (and (and (< (|Seq#Length| |data#0@@26|) 18446744073709551616) (< (|Seq#Length| (Lit |eltTypes#0@@4|)) 18446744073709551616)) (forall ((|elt#2@@0| T@U) ) (!  (=> (and (and (= (type |elt#2@@0|) DatatypeTypeType) ($Is |elt#2@@0| Tclass.GenericMarshalling.G)) (|Seq#Contains| |eltTypes#0@@4| ($Box |elt#2@@0|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#2@@0|)) :qid |GenericM.390:21| :skolemid |1355| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#2@@0|)) :pattern ( (|Seq#Contains| |eltTypes#0@@4| ($Box |elt#2@@0|))) ))))))) (and (=> (not (|Seq#Equal| |eltTypes#0@@4| (|Seq#Empty| BoxType))) (and (|GenericMarshalling.__default.parse__Val#canCall| |data#0@@26| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |eltTypes#0@@4|) (LitInt 0)))) (let ((|rest1#1@@1| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Val ($LS $ly@@48) |data#0@@26| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |eltTypes#0@@4|) (LitInt 0)))))))) (|GenericMarshalling.__default.parse__Tuple__contents#canCall| |rest1#1@@1| (Lit (|Seq#Drop| (Lit |eltTypes#0@@4|) (LitInt 1))))))) (= (GenericMarshalling.__default.parse__Tuple__contents ($LS $ly@@48) |data#0@@26| (Lit |eltTypes#0@@4|)) (ite (|Seq#Equal| |eltTypes#0@@4| (|Seq#Empty| BoxType)) (|#_System._tuple#2._#Make2| ($Box (Lit (|#Options.Option.Some| ($Box (Lit (|Seq#Empty| BoxType)))))) ($Box |data#0@@26|)) (let ((|rest1#1@@2| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Val ($LS $ly@@48) |data#0@@26| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |eltTypes#0@@4|) (LitInt 0)))))))) (let ((|val#1@@0| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val ($LS $ly@@48) |data#0@@26| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |eltTypes#0@@4|) (LitInt 0)))))))) (let ((|rest2#1@@0| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Tuple__contents ($LS $ly@@48) |rest1#1@@2| (Lit (|Seq#Drop| (Lit |eltTypes#0@@4|) (LitInt 1)))))))) (let ((|contents#1@@0| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Tuple__contents ($LS $ly@@48) |rest1#1@@2| (Lit (|Seq#Drop| (Lit |eltTypes#0@@4|) (LitInt 1)))))))) (ite  (and (not (Options.Option.None_q |val#1@@0|)) (not (Options.Option.None_q |contents#1@@0|))) (|#_System._tuple#2._#Make2| ($Box (|#Options.Option.Some| ($Box (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Options.Option.value |val#1@@0|)) ($Unbox (SeqType BoxType) (Options.Option.value |contents#1@@0|)))))) ($Box |rest2#1@@0|)) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType))))))))))))) :qid |GenericM.387:20| :weight 3 :skolemid |1356| :pattern ( (GenericMarshalling.__default.parse__Tuple__contents ($LS $ly@@48) |data#0@@26| (Lit |eltTypes#0@@4|))) ))))
(assert  (=> (<= 19 $FunctionContextHeight) (forall (($ly@@49 T@U) (|data#0@@27| T@U) (|eltTypes#0@@5| T@U) ) (!  (=> (and (and (and (= (type $ly@@49) LayerTypeType) (= (type |data#0@@27|) (SeqType BoxType))) (= (type |eltTypes#0@@5|) (SeqType BoxType))) (or (|GenericMarshalling.__default.parse__Tuple__contents#canCall| (Lit |data#0@@27|) (Lit |eltTypes#0@@5|)) (and (not (= 19 $FunctionContextHeight)) (and (and ($Is |data#0@@27| (TSeq Tclass.NativeTypes.byte)) ($Is |eltTypes#0@@5| (TSeq Tclass.GenericMarshalling.G))) (and (and (< (|Seq#Length| (Lit |data#0@@27|)) 18446744073709551616) (< (|Seq#Length| (Lit |eltTypes#0@@5|)) 18446744073709551616)) (forall ((|elt#3@@1| T@U) ) (!  (=> (and (and (= (type |elt#3@@1|) DatatypeTypeType) ($Is |elt#3@@1| Tclass.GenericMarshalling.G)) (|Seq#Contains| |eltTypes#0@@5| ($Box |elt#3@@1|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#3@@1|)) :qid |GenericM.390:21| :skolemid |1357| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#3@@1|)) :pattern ( (|Seq#Contains| |eltTypes#0@@5| ($Box |elt#3@@1|))) ))))))) (and (=> (not (|Seq#Equal| |eltTypes#0@@5| (|Seq#Empty| BoxType))) (and (|GenericMarshalling.__default.parse__Val#canCall| (Lit |data#0@@27|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |eltTypes#0@@5|) (LitInt 0)))) (let ((|rest1#2@@1| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Val ($LS $ly@@49) (Lit |data#0@@27|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |eltTypes#0@@5|) (LitInt 0)))))))) (|GenericMarshalling.__default.parse__Tuple__contents#canCall| |rest1#2@@1| (Lit (|Seq#Drop| (Lit |eltTypes#0@@5|) (LitInt 1))))))) (= (GenericMarshalling.__default.parse__Tuple__contents ($LS $ly@@49) (Lit |data#0@@27|) (Lit |eltTypes#0@@5|)) (ite (|Seq#Equal| |eltTypes#0@@5| (|Seq#Empty| BoxType)) (|#_System._tuple#2._#Make2| ($Box (Lit (|#Options.Option.Some| ($Box (Lit (|Seq#Empty| BoxType)))))) ($Box (Lit |data#0@@27|))) (let ((|rest1#2@@2| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Val ($LS $ly@@49) (Lit |data#0@@27|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |eltTypes#0@@5|) (LitInt 0)))))))) (let ((|val#2@@0| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val ($LS $ly@@49) (Lit |data#0@@27|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |eltTypes#0@@5|) (LitInt 0)))))))) (let ((|rest2#2@@0| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Tuple__contents ($LS $ly@@49) |rest1#2@@2| (Lit (|Seq#Drop| (Lit |eltTypes#0@@5|) (LitInt 1)))))))) (let ((|contents#2@@0| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Tuple__contents ($LS $ly@@49) |rest1#2@@2| (Lit (|Seq#Drop| (Lit |eltTypes#0@@5|) (LitInt 1)))))))) (ite  (and (not (Options.Option.None_q |val#2@@0|)) (not (Options.Option.None_q |contents#2@@0|))) (|#_System._tuple#2._#Make2| ($Box (|#Options.Option.Some| ($Box (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Options.Option.value |val#2@@0|)) ($Unbox (SeqType BoxType) (Options.Option.value |contents#2@@0|)))))) ($Box |rest2#2@@0|)) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType))))))))))))) :qid |GenericM.387:20| :weight 3 :skolemid |1358| :pattern ( (GenericMarshalling.__default.parse__Tuple__contents ($LS $ly@@49) (Lit |data#0@@27|) (Lit |eltTypes#0@@5|))) ))))
(assert (forall ((arg0@@251 T@U) (arg1@@111 T@U) (arg2@@65 T@U) ) (! (= (type (GenericMarshalling.__default.parse__Tuple arg0@@251 arg1@@111 arg2@@65)) DatatypeTypeType) :qid |funType:GenericMarshalling.__default.parse__Tuple| :pattern ( (GenericMarshalling.__default.parse__Tuple arg0@@251 arg1@@111 arg2@@65)) )))
(assert (forall (($ly@@50 T@U) (|data#0@@28| T@U) (|eltTypes#0@@6| T@U) ) (!  (=> (and (and (= (type $ly@@50) LayerTypeType) (= (type |data#0@@28|) (SeqType BoxType))) (= (type |eltTypes#0@@6|) (SeqType BoxType))) (= (GenericMarshalling.__default.parse__Tuple ($LS $ly@@50) |data#0@@28| |eltTypes#0@@6|) (GenericMarshalling.__default.parse__Tuple $ly@@50 |data#0@@28| |eltTypes#0@@6|))) :qid |GenericM.550:10| :skolemid |1653| :pattern ( (GenericMarshalling.__default.parse__Tuple ($LS $ly@@50) |data#0@@28| |eltTypes#0@@6|)) )))
(assert (forall (($ly@@51 T@U) (|data#0@@29| T@U) (|eltTypes#0@@7| T@U) ) (!  (=> (and (and (= (type $ly@@51) LayerTypeType) (= (type |data#0@@29|) (SeqType BoxType))) (= (type |eltTypes#0@@7|) (SeqType BoxType))) (= (GenericMarshalling.__default.parse__Tuple $ly@@51 |data#0@@29| |eltTypes#0@@7|) (GenericMarshalling.__default.parse__Tuple $LZ |data#0@@29| |eltTypes#0@@7|))) :qid |GenericM.550:10| :skolemid |1654| :pattern ( (GenericMarshalling.__default.parse__Tuple (AsFuelBottom $ly@@51) |data#0@@29| |eltTypes#0@@7|)) )))
(assert  (=> (<= 19 $FunctionContextHeight) (forall (($ly@@52 T@U) (|data#0@@30| T@U) (|eltTypes#0@@8| T@U) ) (!  (=> (and (and (and (= (type $ly@@52) LayerTypeType) (= (type |data#0@@30|) (SeqType BoxType))) (= (type |eltTypes#0@@8|) (SeqType BoxType))) (or (|GenericMarshalling.__default.parse__Tuple#canCall| |data#0@@30| |eltTypes#0@@8|) (and (not (= 19 $FunctionContextHeight)) (and (and ($Is |data#0@@30| (TSeq Tclass.NativeTypes.byte)) ($Is |eltTypes#0@@8| (TSeq Tclass.GenericMarshalling.G))) (and (and (< (|Seq#Length| |data#0@@30|) 18446744073709551616) (< (|Seq#Length| |eltTypes#0@@8|) 18446744073709551616)) (forall ((|elt#0@@1| T@U) ) (!  (=> (and (and (= (type |elt#0@@1|) DatatypeTypeType) ($Is |elt#0@@1| Tclass.GenericMarshalling.G)) (|Seq#Contains| |eltTypes#0@@8| ($Box |elt#0@@1|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#0@@1|)) :qid |GenericM.553:21| :skolemid |1655| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#0@@1|)) :pattern ( (|Seq#Contains| |eltTypes#0@@8| ($Box |elt#0@@1|))) ))))))) (and (let ((|rest#0@@2| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Tuple $ly@@52 |data#0@@30| |eltTypes#0@@8|))))) (let ((|opt_val#0@@1| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Tuple $ly@@52 |data#0@@30| |eltTypes#0@@8|))))) (and (<= (|Seq#Length| |rest#0@@2|) (|Seq#Length| |data#0@@30|)) (=> (Options.Option.Some_q |opt_val#0@@1|) (and (GenericMarshalling.__default.ValidVal ($LS $LZ) ($Unbox DatatypeTypeType (Options.Option.value |opt_val#0@@1|))) (GenericMarshalling.__default.ValInGrammar ($LS $LZ) ($Unbox DatatypeTypeType (Options.Option.value |opt_val#0@@1|)) (|#GenericMarshalling.G.GTuple| |eltTypes#0@@8|))))))) ($Is (GenericMarshalling.__default.parse__Tuple $ly@@52 |data#0@@30| |eltTypes#0@@8|) (Tclass._System.Tuple2 (Tclass.Options.Option Tclass.GenericMarshalling.V) (TSeq Tclass.NativeTypes.byte))))) :qid |GenericM.550:10| :skolemid |1656| :pattern ( (GenericMarshalling.__default.parse__Tuple $ly@@52 |data#0@@30| |eltTypes#0@@8|)) ))))
(assert (forall (($ly@@53 T@U) (|data#0@@31| T@U) (|eltTypes#0@@9| T@U) ) (!  (=> (and (and (and (= (type $ly@@53) LayerTypeType) (= (type |data#0@@31|) (SeqType BoxType))) (= (type |eltTypes#0@@9|) (SeqType BoxType))) (and ($Is |data#0@@31| (TSeq Tclass.NativeTypes.byte)) ($Is |eltTypes#0@@9| (TSeq Tclass.GenericMarshalling.G)))) (and (=> (|GenericMarshalling.__default.parse__Tuple#requires| $ly@@53 |data#0@@31| |eltTypes#0@@9|) (and (and (< (|Seq#Length| |data#0@@31|) 18446744073709551616) (< (|Seq#Length| |eltTypes#0@@9|) 18446744073709551616)) (forall ((|elt#1@@4| T@U) ) (!  (=> (and (and (= (type |elt#1@@4|) DatatypeTypeType) ($Is |elt#1@@4| Tclass.GenericMarshalling.G)) (|Seq#Contains| |eltTypes#0@@9| ($Box |elt#1@@4|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#1@@4|)) :qid |GenericM.553:21| :skolemid |1657| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#1@@4|)) :pattern ( (|Seq#Contains| |eltTypes#0@@9| ($Box |elt#1@@4|))) )))) (=> (and (and (< (|Seq#Length| |data#0@@31|) 18446744073709551616) (< (|Seq#Length| |eltTypes#0@@9|) 18446744073709551616)) (forall ((|elt#1@@5| T@U) ) (!  (=> (and (and (= (type |elt#1@@5|) DatatypeTypeType) ($Is |elt#1@@5| Tclass.GenericMarshalling.G)) (|Seq#Contains| |eltTypes#0@@9| ($Box |elt#1@@5|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#1@@5|)) :qid |GenericM.553:21| :skolemid |1657| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#1@@5|)) :pattern ( (|Seq#Contains| |eltTypes#0@@9| ($Box |elt#1@@5|))) ))) (|GenericMarshalling.__default.parse__Tuple#requires| $ly@@53 |data#0@@31| |eltTypes#0@@9|)))) :qid |GenericM.550:10| :skolemid |1658| :pattern ( (|GenericMarshalling.__default.parse__Tuple#requires| $ly@@53 |data#0@@31| |eltTypes#0@@9|)) )))
(assert  (=> (<= 19 $FunctionContextHeight) (forall (($ly@@54 T@U) (|data#0@@32| T@U) (|eltTypes#0@@10| T@U) ) (!  (=> (and (and (and (= (type $ly@@54) LayerTypeType) (= (type |data#0@@32|) (SeqType BoxType))) (= (type |eltTypes#0@@10|) (SeqType BoxType))) (or (|GenericMarshalling.__default.parse__Tuple#canCall| |data#0@@32| |eltTypes#0@@10|) (and (not (= 19 $FunctionContextHeight)) (and (and ($Is |data#0@@32| (TSeq Tclass.NativeTypes.byte)) ($Is |eltTypes#0@@10| (TSeq Tclass.GenericMarshalling.G))) (and (and (< (|Seq#Length| |data#0@@32|) 18446744073709551616) (< (|Seq#Length| |eltTypes#0@@10|) 18446744073709551616)) (forall ((|elt#1@@6| T@U) ) (!  (=> (and (and (= (type |elt#1@@6|) DatatypeTypeType) ($Is |elt#1@@6| Tclass.GenericMarshalling.G)) (|Seq#Contains| |eltTypes#0@@10| ($Box |elt#1@@6|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#1@@6|)) :qid |GenericM.553:21| :skolemid |1657| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#1@@6|)) :pattern ( (|Seq#Contains| |eltTypes#0@@10| ($Box |elt#1@@6|))) ))))))) (and (|GenericMarshalling.__default.parse__Tuple__contents#canCall| |data#0@@32| |eltTypes#0@@10|) (= (GenericMarshalling.__default.parse__Tuple ($LS $ly@@54) |data#0@@32| |eltTypes#0@@10|) (let ((|rest#1@@1| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Tuple__contents $ly@@54 |data#0@@32| |eltTypes#0@@10|))))) (let ((|contents#0@@1| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Tuple__contents $ly@@54 |data#0@@32| |eltTypes#0@@10|))))) (ite  (not (Options.Option.None_q |contents#0@@1|)) (|#_System._tuple#2._#Make2| ($Box (|#Options.Option.Some| ($Box (|#GenericMarshalling.V.VTuple| ($Unbox (SeqType BoxType) (Options.Option.value |contents#0@@1|)))))) ($Box |rest#1@@1|)) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType)))))))))) :qid |GenericM.550:10| :skolemid |1659| :pattern ( (GenericMarshalling.__default.parse__Tuple ($LS $ly@@54) |data#0@@32| |eltTypes#0@@10|)) ))))
(assert  (=> (<= 19 $FunctionContextHeight) (forall (($ly@@55 T@U) (|data#0@@33| T@U) (|eltTypes#0@@11| T@U) ) (!  (=> (and (and (and (= (type $ly@@55) LayerTypeType) (= (type |data#0@@33|) (SeqType BoxType))) (= (type |eltTypes#0@@11|) (SeqType BoxType))) (or (|GenericMarshalling.__default.parse__Tuple#canCall| |data#0@@33| (Lit |eltTypes#0@@11|)) (and (not (= 19 $FunctionContextHeight)) (and (and ($Is |data#0@@33| (TSeq Tclass.NativeTypes.byte)) ($Is |eltTypes#0@@11| (TSeq Tclass.GenericMarshalling.G))) (and (and (< (|Seq#Length| |data#0@@33|) 18446744073709551616) (< (|Seq#Length| (Lit |eltTypes#0@@11|)) 18446744073709551616)) (forall ((|elt#2@@1| T@U) ) (!  (=> (and (and (= (type |elt#2@@1|) DatatypeTypeType) ($Is |elt#2@@1| Tclass.GenericMarshalling.G)) (|Seq#Contains| |eltTypes#0@@11| ($Box |elt#2@@1|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#2@@1|)) :qid |GenericM.553:21| :skolemid |1660| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#2@@1|)) :pattern ( (|Seq#Contains| |eltTypes#0@@11| ($Box |elt#2@@1|))) ))))))) (and (|GenericMarshalling.__default.parse__Tuple__contents#canCall| |data#0@@33| (Lit |eltTypes#0@@11|)) (= (GenericMarshalling.__default.parse__Tuple ($LS $ly@@55) |data#0@@33| (Lit |eltTypes#0@@11|)) (let ((|rest#2@@1| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Tuple__contents ($LS $ly@@55) |data#0@@33| (Lit |eltTypes#0@@11|)))))) (let ((|contents#1@@1| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Tuple__contents ($LS $ly@@55) |data#0@@33| (Lit |eltTypes#0@@11|)))))) (ite  (not (Options.Option.None_q |contents#1@@1|)) (|#_System._tuple#2._#Make2| ($Box (|#Options.Option.Some| ($Box (|#GenericMarshalling.V.VTuple| ($Unbox (SeqType BoxType) (Options.Option.value |contents#1@@1|)))))) ($Box |rest#2@@1|)) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType)))))))))) :qid |GenericM.550:10| :weight 3 :skolemid |1661| :pattern ( (GenericMarshalling.__default.parse__Tuple ($LS $ly@@55) |data#0@@33| (Lit |eltTypes#0@@11|))) ))))
(assert  (=> (<= 19 $FunctionContextHeight) (forall (($ly@@56 T@U) (|data#0@@34| T@U) (|eltTypes#0@@12| T@U) ) (!  (=> (and (and (and (= (type $ly@@56) LayerTypeType) (= (type |data#0@@34|) (SeqType BoxType))) (= (type |eltTypes#0@@12|) (SeqType BoxType))) (or (|GenericMarshalling.__default.parse__Tuple#canCall| (Lit |data#0@@34|) (Lit |eltTypes#0@@12|)) (and (not (= 19 $FunctionContextHeight)) (and (and ($Is |data#0@@34| (TSeq Tclass.NativeTypes.byte)) ($Is |eltTypes#0@@12| (TSeq Tclass.GenericMarshalling.G))) (and (and (< (|Seq#Length| (Lit |data#0@@34|)) 18446744073709551616) (< (|Seq#Length| (Lit |eltTypes#0@@12|)) 18446744073709551616)) (forall ((|elt#3@@2| T@U) ) (!  (=> (and (and (= (type |elt#3@@2|) DatatypeTypeType) ($Is |elt#3@@2| Tclass.GenericMarshalling.G)) (|Seq#Contains| |eltTypes#0@@12| ($Box |elt#3@@2|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#3@@2|)) :qid |GenericM.553:21| :skolemid |1662| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#3@@2|)) :pattern ( (|Seq#Contains| |eltTypes#0@@12| ($Box |elt#3@@2|))) ))))))) (and (|GenericMarshalling.__default.parse__Tuple__contents#canCall| (Lit |data#0@@34|) (Lit |eltTypes#0@@12|)) (= (GenericMarshalling.__default.parse__Tuple ($LS $ly@@56) (Lit |data#0@@34|) (Lit |eltTypes#0@@12|)) (let ((|rest#3@@1| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Tuple__contents ($LS $ly@@56) (Lit |data#0@@34|) (Lit |eltTypes#0@@12|)))))) (let ((|contents#2@@1| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Tuple__contents ($LS $ly@@56) (Lit |data#0@@34|) (Lit |eltTypes#0@@12|)))))) (ite  (not (Options.Option.None_q |contents#2@@1|)) (|#_System._tuple#2._#Make2| ($Box (|#Options.Option.Some| ($Box (|#GenericMarshalling.V.VTuple| ($Unbox (SeqType BoxType) (Options.Option.value |contents#2@@1|)))))) ($Box |rest#3@@1|)) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType)))))))))) :qid |GenericM.550:10| :weight 3 :skolemid |1663| :pattern ( (GenericMarshalling.__default.parse__Tuple ($LS $ly@@56) (Lit |data#0@@34|) (Lit |eltTypes#0@@12|))) ))))
(assert (forall ((arg0@@252 T@U) ) (! (= (type (GenericMarshalling.__default.parse__ByteArray arg0@@252)) DatatypeTypeType) :qid |funType:GenericMarshalling.__default.parse__ByteArray| :pattern ( (GenericMarshalling.__default.parse__ByteArray arg0@@252)) )))
(assert  (=> (<= 16 $FunctionContextHeight) (forall ((|data#0@@35| T@U) ) (!  (=> (and (= (type |data#0@@35|) (SeqType BoxType)) (or (|GenericMarshalling.__default.parse__ByteArray#canCall| |data#0@@35|) (and (not (= 16 $FunctionContextHeight)) (and ($Is |data#0@@35| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| |data#0@@35|) 18446744073709551616))))) (and (< (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__ByteArray |data#0@@35|)))) 18446744073709551616) ($Is (GenericMarshalling.__default.parse__ByteArray |data#0@@35|) (Tclass._System.Tuple2 (Tclass.Options.Option Tclass.GenericMarshalling.V) (TSeq Tclass.NativeTypes.byte))))) :qid |GenericM.589:26| :skolemid |1740| :pattern ( (GenericMarshalling.__default.parse__ByteArray |data#0@@35|)) ))))
(assert (forall ((|data#0@@36| T@U) ) (!  (=> (and (= (type |data#0@@36|) (SeqType BoxType)) ($Is |data#0@@36| (TSeq Tclass.NativeTypes.byte))) (and (=> (|GenericMarshalling.__default.parse__ByteArray#requires| |data#0@@36|) (< (|Seq#Length| |data#0@@36|) 18446744073709551616)) (=> (< (|Seq#Length| |data#0@@36|) 18446744073709551616) (|GenericMarshalling.__default.parse__ByteArray#requires| |data#0@@36|)))) :qid |GenericM.589:26| :skolemid |1741| :pattern ( (|GenericMarshalling.__default.parse__ByteArray#requires| |data#0@@36|)) )))
(assert  (=> (<= 16 $FunctionContextHeight) (forall ((|data#0@@37| T@U) ) (!  (=> (and (= (type |data#0@@37|) (SeqType BoxType)) (or (|GenericMarshalling.__default.parse__ByteArray#canCall| |data#0@@37|) (and (not (= 16 $FunctionContextHeight)) (and ($Is |data#0@@37| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| |data#0@@37|) 18446744073709551616))))) (and (|GenericMarshalling.__default.parse__Uint64#canCall| |data#0@@37|) (= (GenericMarshalling.__default.parse__ByteArray |data#0@@37|) (let ((|rest#0@@3| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Uint64 |data#0@@37|))))) (let ((|len#0@@8| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Uint64 |data#0@@37|))))) (ite  (and (not (Options.Option.None_q |len#0@@8|)) (<= (GenericMarshalling.V.u ($Unbox DatatypeTypeType (Options.Option.value |len#0@@8|))) (|Seq#Length| |rest#0@@3|))) (|#_System._tuple#2._#Make2| ($Box (|#Options.Option.Some| ($Box (|#GenericMarshalling.V.VByteArray| (|Seq#Drop| (|Seq#Take| |rest#0@@3| (GenericMarshalling.V.u ($Unbox DatatypeTypeType (Options.Option.value |len#0@@8|)))) (LitInt 0)))))) ($Box (|Seq#Drop| |rest#0@@3| (GenericMarshalling.V.u ($Unbox DatatypeTypeType (Options.Option.value |len#0@@8|)))))) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType)))))))))) :qid |GenericM.589:26| :skolemid |1742| :pattern ( (GenericMarshalling.__default.parse__ByteArray |data#0@@37|)) ))))
(assert  (=> (<= 16 $FunctionContextHeight) (forall ((|data#0@@38| T@U) ) (!  (=> (and (= (type |data#0@@38|) (SeqType BoxType)) (or (|GenericMarshalling.__default.parse__ByteArray#canCall| (Lit |data#0@@38|)) (and (not (= 16 $FunctionContextHeight)) (and ($Is |data#0@@38| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| (Lit |data#0@@38|)) 18446744073709551616))))) (and (|GenericMarshalling.__default.parse__Uint64#canCall| (Lit |data#0@@38|)) (= (GenericMarshalling.__default.parse__ByteArray (Lit |data#0@@38|)) (let ((|rest#1@@2| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Lit (GenericMarshalling.__default.parse__Uint64 (Lit |data#0@@38|))))))) (let ((|len#1@@1| ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (GenericMarshalling.__default.parse__Uint64 (Lit |data#0@@38|))))))) (ite  (and (not (Options.Option.None_q |len#1@@1|)) (<= (GenericMarshalling.V.u ($Unbox DatatypeTypeType (Options.Option.value |len#1@@1|))) (|Seq#Length| |rest#1@@2|))) (|#_System._tuple#2._#Make2| ($Box (|#Options.Option.Some| ($Box (|#GenericMarshalling.V.VByteArray| (|Seq#Drop| (|Seq#Take| |rest#1@@2| (GenericMarshalling.V.u ($Unbox DatatypeTypeType (Options.Option.value |len#1@@1|)))) (LitInt 0)))))) ($Box (|Seq#Drop| |rest#1@@2| (GenericMarshalling.V.u ($Unbox DatatypeTypeType (Options.Option.value |len#1@@1|)))))) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType)))))))))) :qid |GenericM.589:26| :weight 3 :skolemid |1743| :pattern ( (GenericMarshalling.__default.parse__ByteArray (Lit |data#0@@38|))) ))))
(assert (forall ((arg0@@253 T@U) ) (! (= (type (GenericMarshalling.__default.parse__Uint32Array arg0@@253)) DatatypeTypeType) :qid |funType:GenericMarshalling.__default.parse__Uint32Array| :pattern ( (GenericMarshalling.__default.parse__Uint32Array arg0@@253)) )))
(assert  (=> (<= 17 $FunctionContextHeight) (forall ((|data#0@@39| T@U) ) (!  (=> (and (= (type |data#0@@39|) (SeqType BoxType)) (or (|GenericMarshalling.__default.parse__Uint32Array#canCall| |data#0@@39|) (and (not (= 17 $FunctionContextHeight)) (and ($Is |data#0@@39| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| |data#0@@39|) 18446744073709551616))))) ($Is (GenericMarshalling.__default.parse__Uint32Array |data#0@@39|) (Tclass._System.Tuple2 (Tclass.Options.Option Tclass.GenericMarshalling.V) (TSeq Tclass.NativeTypes.byte)))) :qid |GenericM.625:28| :skolemid |1749| :pattern ( (GenericMarshalling.__default.parse__Uint32Array |data#0@@39|)) ))))
(assert (forall ((|data#0@@40| T@U) ) (!  (=> (and (= (type |data#0@@40|) (SeqType BoxType)) ($Is |data#0@@40| (TSeq Tclass.NativeTypes.byte))) (and (=> (|GenericMarshalling.__default.parse__Uint32Array#requires| |data#0@@40|) (< (|Seq#Length| |data#0@@40|) 18446744073709551616)) (=> (< (|Seq#Length| |data#0@@40|) 18446744073709551616) (|GenericMarshalling.__default.parse__Uint32Array#requires| |data#0@@40|)))) :qid |GenericM.625:28| :skolemid |1750| :pattern ( (|GenericMarshalling.__default.parse__Uint32Array#requires| |data#0@@40|)) )))
(assert  (and (forall ((arg0@@254 T@U) (arg1@@112 T@U) (arg2@@66 Int) ) (! (= (type (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq arg0@@254 arg1@@112 arg2@@66)) (SeqType BoxType)) :qid |funType:NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq arg0@@254 arg1@@112 arg2@@66)) )) (= (type StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq) LayerTypeType)))
(assert  (=> (<= 17 $FunctionContextHeight) (forall ((|data#0@@41| T@U) ) (!  (=> (and (= (type |data#0@@41|) (SeqType BoxType)) (or (|GenericMarshalling.__default.parse__Uint32Array#canCall| |data#0@@41|) (and (not (= 17 $FunctionContextHeight)) (and ($Is |data#0@@41| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| |data#0@@41|) 18446744073709551616))))) (and (=> (>= (|Seq#Length| |data#0@@41|) (LitInt 8)) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint64#canCall| (|Seq#Take| |data#0@@41| (LitInt 8))) (let ((|len#0@@9| (NativePackedInts.__default.unpack__LittleEndian__Uint64 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64 (|Seq#Take| |data#0@@41| (LitInt 8))))) (=> (<= |len#0@@9| (Div (- (|Seq#Length| |data#0@@41|) 8) (LitInt 4))) (|NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#canCall| (|Seq#Drop| (|Seq#Take| |data#0@@41| (+ 8 (Mul (LitInt 4) |len#0@@9|))) (LitInt 8)) |len#0@@9|))))) (= (GenericMarshalling.__default.parse__Uint32Array |data#0@@41|) (ite (>= (|Seq#Length| |data#0@@41|) (LitInt 8)) (let ((|len#0@@10| (NativePackedInts.__default.unpack__LittleEndian__Uint64 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64 (|Seq#Take| |data#0@@41| (LitInt 8))))) (ite (<= |len#0@@10| (Div (- (|Seq#Length| |data#0@@41|) 8) (LitInt 4))) (|#_System._tuple#2._#Make2| ($Box (|#Options.Option.Some| ($Box (|#GenericMarshalling.V.VUint32Array| (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq (|Seq#Drop| (|Seq#Take| |data#0@@41| (+ 8 (Mul (LitInt 4) |len#0@@10|))) (LitInt 8)) |len#0@@10|))))) ($Box (|Seq#Drop| |data#0@@41| (+ 8 (Mul (LitInt 4) |len#0@@10|))))) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType)))))) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType)))))))) :qid |GenericM.625:28| :skolemid |1751| :pattern ( (GenericMarshalling.__default.parse__Uint32Array |data#0@@41|)) ))))
(assert  (=> (<= 17 $FunctionContextHeight) (forall ((|data#0@@42| T@U) ) (!  (=> (and (= (type |data#0@@42|) (SeqType BoxType)) (or (|GenericMarshalling.__default.parse__Uint32Array#canCall| (Lit |data#0@@42|)) (and (not (= 17 $FunctionContextHeight)) (and ($Is |data#0@@42| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| (Lit |data#0@@42|)) 18446744073709551616))))) (and (=> (>= (|Seq#Length| (Lit |data#0@@42|)) (LitInt 8)) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint64#canCall| (Lit (|Seq#Take| (Lit |data#0@@42|) (LitInt 8)))) (let ((|len#1@@2| (NativePackedInts.__default.unpack__LittleEndian__Uint64 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64 (Lit (|Seq#Take| (Lit |data#0@@42|) (LitInt 8)))))) (=> (<= |len#1@@2| (Div (- (|Seq#Length| (Lit |data#0@@42|)) 8) (LitInt 4))) (|NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#canCall| (|Seq#Drop| (|Seq#Take| (Lit |data#0@@42|) (+ 8 (Mul (LitInt 4) |len#1@@2|))) (LitInt 8)) |len#1@@2|))))) (= (GenericMarshalling.__default.parse__Uint32Array (Lit |data#0@@42|)) (ite (>= (|Seq#Length| (Lit |data#0@@42|)) (LitInt 8)) (let ((|len#1@@3| (NativePackedInts.__default.unpack__LittleEndian__Uint64 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64 (Lit (|Seq#Take| (Lit |data#0@@42|) (LitInt 8)))))) (ite (<= |len#1@@3| (Div (- (|Seq#Length| (Lit |data#0@@42|)) 8) (LitInt 4))) (|#_System._tuple#2._#Make2| ($Box (|#Options.Option.Some| ($Box (|#GenericMarshalling.V.VUint32Array| (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq (|Seq#Drop| (|Seq#Take| (Lit |data#0@@42|) (+ 8 (Mul (LitInt 4) |len#1@@3|))) (LitInt 8)) |len#1@@3|))))) ($Box (|Seq#Drop| (Lit |data#0@@42|) (+ 8 (Mul (LitInt 4) |len#1@@3|))))) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType)))))) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType)))))))) :qid |GenericM.625:28| :weight 3 :skolemid |1752| :pattern ( (GenericMarshalling.__default.parse__Uint32Array (Lit |data#0@@42|))) ))))
(assert (forall ((arg0@@255 T@U) ) (! (= (type (GenericMarshalling.__default.parse__Uint64Array arg0@@255)) DatatypeTypeType) :qid |funType:GenericMarshalling.__default.parse__Uint64Array| :pattern ( (GenericMarshalling.__default.parse__Uint64Array arg0@@255)) )))
(assert  (=> (<= 18 $FunctionContextHeight) (forall ((|data#0@@43| T@U) ) (!  (=> (and (= (type |data#0@@43|) (SeqType BoxType)) (or (|GenericMarshalling.__default.parse__Uint64Array#canCall| |data#0@@43|) (and (not (= 18 $FunctionContextHeight)) (and ($Is |data#0@@43| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| |data#0@@43|) 18446744073709551616))))) ($Is (GenericMarshalling.__default.parse__Uint64Array |data#0@@43|) (Tclass._System.Tuple2 (Tclass.Options.Option Tclass.GenericMarshalling.V) (TSeq Tclass.NativeTypes.byte)))) :qid |GenericM.668:28| :skolemid |1760| :pattern ( (GenericMarshalling.__default.parse__Uint64Array |data#0@@43|)) ))))
(assert (forall ((|data#0@@44| T@U) ) (!  (=> (and (= (type |data#0@@44|) (SeqType BoxType)) ($Is |data#0@@44| (TSeq Tclass.NativeTypes.byte))) (and (=> (|GenericMarshalling.__default.parse__Uint64Array#requires| |data#0@@44|) (< (|Seq#Length| |data#0@@44|) 18446744073709551616)) (=> (< (|Seq#Length| |data#0@@44|) 18446744073709551616) (|GenericMarshalling.__default.parse__Uint64Array#requires| |data#0@@44|)))) :qid |GenericM.668:28| :skolemid |1761| :pattern ( (|GenericMarshalling.__default.parse__Uint64Array#requires| |data#0@@44|)) )))
(assert  (and (forall ((arg0@@256 T@U) (arg1@@113 T@U) (arg2@@67 Int) ) (! (= (type (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq arg0@@256 arg1@@113 arg2@@67)) (SeqType BoxType)) :qid |funType:NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq arg0@@256 arg1@@113 arg2@@67)) )) (= (type StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq) LayerTypeType)))
(assert  (=> (<= 18 $FunctionContextHeight) (forall ((|data#0@@45| T@U) ) (!  (=> (and (= (type |data#0@@45|) (SeqType BoxType)) (or (|GenericMarshalling.__default.parse__Uint64Array#canCall| |data#0@@45|) (and (not (= 18 $FunctionContextHeight)) (and ($Is |data#0@@45| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| |data#0@@45|) 18446744073709551616))))) (and (=> (>= (|Seq#Length| |data#0@@45|) (LitInt 8)) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint64#canCall| (|Seq#Take| |data#0@@45| (LitInt 8))) (let ((|len#0@@11| (NativePackedInts.__default.unpack__LittleEndian__Uint64 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64 (|Seq#Take| |data#0@@45| (LitInt 8))))) (=> (<= |len#0@@11| (Div (- (|Seq#Length| |data#0@@45|) 8) (LitInt 8))) (|NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#canCall| (|Seq#Drop| (|Seq#Take| |data#0@@45| (+ 8 (Mul (LitInt 8) |len#0@@11|))) (LitInt 8)) |len#0@@11|))))) (= (GenericMarshalling.__default.parse__Uint64Array |data#0@@45|) (ite (>= (|Seq#Length| |data#0@@45|) (LitInt 8)) (let ((|len#0@@12| (NativePackedInts.__default.unpack__LittleEndian__Uint64 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64 (|Seq#Take| |data#0@@45| (LitInt 8))))) (ite (<= |len#0@@12| (Div (- (|Seq#Length| |data#0@@45|) 8) (LitInt 8))) (|#_System._tuple#2._#Make2| ($Box (|#Options.Option.Some| ($Box (|#GenericMarshalling.V.VUint64Array| (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq (|Seq#Drop| (|Seq#Take| |data#0@@45| (+ 8 (Mul (LitInt 8) |len#0@@12|))) (LitInt 8)) |len#0@@12|))))) ($Box (|Seq#Drop| |data#0@@45| (+ 8 (Mul (LitInt 8) |len#0@@12|))))) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType)))))) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType)))))))) :qid |GenericM.668:28| :skolemid |1762| :pattern ( (GenericMarshalling.__default.parse__Uint64Array |data#0@@45|)) ))))
(assert  (=> (<= 18 $FunctionContextHeight) (forall ((|data#0@@46| T@U) ) (!  (=> (and (= (type |data#0@@46|) (SeqType BoxType)) (or (|GenericMarshalling.__default.parse__Uint64Array#canCall| (Lit |data#0@@46|)) (and (not (= 18 $FunctionContextHeight)) (and ($Is |data#0@@46| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| (Lit |data#0@@46|)) 18446744073709551616))))) (and (=> (>= (|Seq#Length| (Lit |data#0@@46|)) (LitInt 8)) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint64#canCall| (Lit (|Seq#Take| (Lit |data#0@@46|) (LitInt 8)))) (let ((|len#1@@4| (NativePackedInts.__default.unpack__LittleEndian__Uint64 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64 (Lit (|Seq#Take| (Lit |data#0@@46|) (LitInt 8)))))) (=> (<= |len#1@@4| (Div (- (|Seq#Length| (Lit |data#0@@46|)) 8) (LitInt 8))) (|NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#canCall| (|Seq#Drop| (|Seq#Take| (Lit |data#0@@46|) (+ 8 (Mul (LitInt 8) |len#1@@4|))) (LitInt 8)) |len#1@@4|))))) (= (GenericMarshalling.__default.parse__Uint64Array (Lit |data#0@@46|)) (ite (>= (|Seq#Length| (Lit |data#0@@46|)) (LitInt 8)) (let ((|len#1@@5| (NativePackedInts.__default.unpack__LittleEndian__Uint64 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64 (Lit (|Seq#Take| (Lit |data#0@@46|) (LitInt 8)))))) (ite (<= |len#1@@5| (Div (- (|Seq#Length| (Lit |data#0@@46|)) 8) (LitInt 8))) (|#_System._tuple#2._#Make2| ($Box (|#Options.Option.Some| ($Box (|#GenericMarshalling.V.VUint64Array| (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq (|Seq#Drop| (|Seq#Take| (Lit |data#0@@46|) (+ 8 (Mul (LitInt 8) |len#1@@5|))) (LitInt 8)) |len#1@@5|))))) ($Box (|Seq#Drop| (Lit |data#0@@46|) (+ 8 (Mul (LitInt 8) |len#1@@5|))))) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType)))))) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType)))))))) :qid |GenericM.668:28| :weight 3 :skolemid |1763| :pattern ( (GenericMarshalling.__default.parse__Uint64Array (Lit |data#0@@46|))) ))))
(assert (forall ((arg0@@257 T@U) (arg1@@114 T@U) (arg2@@68 T@U) ) (! (= (type (GenericMarshalling.__default.parse__Case arg0@@257 arg1@@114 arg2@@68)) DatatypeTypeType) :qid |funType:GenericMarshalling.__default.parse__Case| :pattern ( (GenericMarshalling.__default.parse__Case arg0@@257 arg1@@114 arg2@@68)) )))
(assert (forall (($ly@@57 T@U) (|data#0@@47| T@U) (|cases#0@@0| T@U) ) (!  (=> (and (and (= (type $ly@@57) LayerTypeType) (= (type |data#0@@47|) (SeqType BoxType))) (= (type |cases#0@@0|) (SeqType BoxType))) (= (GenericMarshalling.__default.parse__Case ($LS $ly@@57) |data#0@@47| |cases#0@@0|) (GenericMarshalling.__default.parse__Case $ly@@57 |data#0@@47| |cases#0@@0|))) :qid |GenericM.711:10| :skolemid |1771| :pattern ( (GenericMarshalling.__default.parse__Case ($LS $ly@@57) |data#0@@47| |cases#0@@0|)) )))
(assert (forall (($ly@@58 T@U) (|data#0@@48| T@U) (|cases#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@58) LayerTypeType) (= (type |data#0@@48|) (SeqType BoxType))) (= (type |cases#0@@1|) (SeqType BoxType))) (= (GenericMarshalling.__default.parse__Case $ly@@58 |data#0@@48| |cases#0@@1|) (GenericMarshalling.__default.parse__Case $LZ |data#0@@48| |cases#0@@1|))) :qid |GenericM.711:10| :skolemid |1772| :pattern ( (GenericMarshalling.__default.parse__Case (AsFuelBottom $ly@@58) |data#0@@48| |cases#0@@1|)) )))
(assert  (=> (<= 19 $FunctionContextHeight) (forall (($ly@@59 T@U) (|data#0@@49| T@U) (|cases#0@@2| T@U) ) (!  (=> (and (and (and (= (type $ly@@59) LayerTypeType) (= (type |data#0@@49|) (SeqType BoxType))) (= (type |cases#0@@2|) (SeqType BoxType))) (or (|GenericMarshalling.__default.parse__Case#canCall| |data#0@@49| |cases#0@@2|) (and (not (= 19 $FunctionContextHeight)) (and (and ($Is |data#0@@49| (TSeq Tclass.NativeTypes.byte)) ($Is |cases#0@@2| (TSeq Tclass.GenericMarshalling.G))) (and (and (< (|Seq#Length| |data#0@@49|) 18446744073709551616) (< (|Seq#Length| |cases#0@@2|) 18446744073709551616)) (forall ((|elt#0@@2| T@U) ) (!  (=> (and (and (= (type |elt#0@@2|) DatatypeTypeType) ($Is |elt#0@@2| Tclass.GenericMarshalling.G)) (|Seq#Contains| |cases#0@@2| ($Box |elt#0@@2|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#0@@2|)) :qid |GenericM.714:21| :skolemid |1773| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#0@@2|)) :pattern ( (|Seq#Contains| |cases#0@@2| ($Box |elt#0@@2|))) ))))))) (and (let ((|rest#0@@4| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Case $ly@@59 |data#0@@49| |cases#0@@2|))))) (let ((|opt_val#0@@2| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Case $ly@@59 |data#0@@49| |cases#0@@2|))))) (and (<= (|Seq#Length| |rest#0@@4|) (|Seq#Length| |data#0@@49|)) (=> (Options.Option.Some_q |opt_val#0@@2|) (and (GenericMarshalling.__default.ValidVal ($LS $LZ) ($Unbox DatatypeTypeType (Options.Option.value |opt_val#0@@2|))) (GenericMarshalling.__default.ValInGrammar ($LS $LZ) ($Unbox DatatypeTypeType (Options.Option.value |opt_val#0@@2|)) (|#GenericMarshalling.G.GTaggedUnion| |cases#0@@2|))))))) ($Is (GenericMarshalling.__default.parse__Case $ly@@59 |data#0@@49| |cases#0@@2|) (Tclass._System.Tuple2 (Tclass.Options.Option Tclass.GenericMarshalling.V) (TSeq Tclass.NativeTypes.byte))))) :qid |GenericM.711:10| :skolemid |1774| :pattern ( (GenericMarshalling.__default.parse__Case $ly@@59 |data#0@@49| |cases#0@@2|)) ))))
(assert (forall (($ly@@60 T@U) (|data#0@@50| T@U) (|cases#0@@3| T@U) ) (!  (=> (and (and (and (= (type $ly@@60) LayerTypeType) (= (type |data#0@@50|) (SeqType BoxType))) (= (type |cases#0@@3|) (SeqType BoxType))) (and ($Is |data#0@@50| (TSeq Tclass.NativeTypes.byte)) ($Is |cases#0@@3| (TSeq Tclass.GenericMarshalling.G)))) (and (=> (|GenericMarshalling.__default.parse__Case#requires| $ly@@60 |data#0@@50| |cases#0@@3|) (and (and (< (|Seq#Length| |data#0@@50|) 18446744073709551616) (< (|Seq#Length| |cases#0@@3|) 18446744073709551616)) (forall ((|elt#1@@7| T@U) ) (!  (=> (and (and (= (type |elt#1@@7|) DatatypeTypeType) ($Is |elt#1@@7| Tclass.GenericMarshalling.G)) (|Seq#Contains| |cases#0@@3| ($Box |elt#1@@7|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#1@@7|)) :qid |GenericM.714:21| :skolemid |1775| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#1@@7|)) :pattern ( (|Seq#Contains| |cases#0@@3| ($Box |elt#1@@7|))) )))) (=> (and (and (< (|Seq#Length| |data#0@@50|) 18446744073709551616) (< (|Seq#Length| |cases#0@@3|) 18446744073709551616)) (forall ((|elt#1@@8| T@U) ) (!  (=> (and (and (= (type |elt#1@@8|) DatatypeTypeType) ($Is |elt#1@@8| Tclass.GenericMarshalling.G)) (|Seq#Contains| |cases#0@@3| ($Box |elt#1@@8|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#1@@8|)) :qid |GenericM.714:21| :skolemid |1775| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#1@@8|)) :pattern ( (|Seq#Contains| |cases#0@@3| ($Box |elt#1@@8|))) ))) (|GenericMarshalling.__default.parse__Case#requires| $ly@@60 |data#0@@50| |cases#0@@3|)))) :qid |GenericM.711:10| :skolemid |1776| :pattern ( (|GenericMarshalling.__default.parse__Case#requires| $ly@@60 |data#0@@50| |cases#0@@3|)) )))
(assert  (=> (<= 19 $FunctionContextHeight) (forall (($ly@@61 T@U) (|data#0@@51| T@U) (|cases#0@@4| T@U) ) (!  (=> (and (and (and (= (type $ly@@61) LayerTypeType) (= (type |data#0@@51|) (SeqType BoxType))) (= (type |cases#0@@4|) (SeqType BoxType))) (or (|GenericMarshalling.__default.parse__Case#canCall| |data#0@@51| |cases#0@@4|) (and (not (= 19 $FunctionContextHeight)) (and (and ($Is |data#0@@51| (TSeq Tclass.NativeTypes.byte)) ($Is |cases#0@@4| (TSeq Tclass.GenericMarshalling.G))) (and (and (< (|Seq#Length| |data#0@@51|) 18446744073709551616) (< (|Seq#Length| |cases#0@@4|) 18446744073709551616)) (forall ((|elt#1@@9| T@U) ) (!  (=> (and (and (= (type |elt#1@@9|) DatatypeTypeType) ($Is |elt#1@@9| Tclass.GenericMarshalling.G)) (|Seq#Contains| |cases#0@@4| ($Box |elt#1@@9|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#1@@9|)) :qid |GenericM.714:21| :skolemid |1775| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#1@@9|)) :pattern ( (|Seq#Contains| |cases#0@@4| ($Box |elt#1@@9|))) ))))))) (and (and (|GenericMarshalling.__default.parse__Uint64#canCall| |data#0@@51|) (let ((|rest1#0@@3| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Uint64 |data#0@@51|))))) (let ((|caseID#0| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Uint64 |data#0@@51|))))) (=> (and (not (Options.Option.None_q |caseID#0|)) (< (GenericMarshalling.V.u ($Unbox DatatypeTypeType (Options.Option.value |caseID#0|))) (|Seq#Length| |cases#0@@4|))) (|GenericMarshalling.__default.parse__Val#canCall| |rest1#0@@3| ($Unbox DatatypeTypeType (|Seq#Index| |cases#0@@4| (GenericMarshalling.V.u ($Unbox DatatypeTypeType (Options.Option.value |caseID#0|)))))))))) (= (GenericMarshalling.__default.parse__Case ($LS $ly@@61) |data#0@@51| |cases#0@@4|) (let ((|rest1#0@@4| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Uint64 |data#0@@51|))))) (let ((|caseID#0@@0| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Uint64 |data#0@@51|))))) (ite  (and (not (Options.Option.None_q |caseID#0@@0|)) (< (GenericMarshalling.V.u ($Unbox DatatypeTypeType (Options.Option.value |caseID#0@@0|))) (|Seq#Length| |cases#0@@4|))) (let ((|rest2#0@@1| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Val $ly@@61 |rest1#0@@4| ($Unbox DatatypeTypeType (|Seq#Index| |cases#0@@4| (GenericMarshalling.V.u ($Unbox DatatypeTypeType (Options.Option.value |caseID#0@@0|)))))))))) (let ((|val#0@@19| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val $ly@@61 |rest1#0@@4| ($Unbox DatatypeTypeType (|Seq#Index| |cases#0@@4| (GenericMarshalling.V.u ($Unbox DatatypeTypeType (Options.Option.value |caseID#0@@0|)))))))))) (ite  (not (Options.Option.None_q |val#0@@19|)) (|#_System._tuple#2._#Make2| ($Box (|#Options.Option.Some| ($Box (|#GenericMarshalling.V.VCase| (GenericMarshalling.V.u ($Unbox DatatypeTypeType (Options.Option.value |caseID#0@@0|))) ($Unbox DatatypeTypeType (Options.Option.value |val#0@@19|)))))) ($Box |rest2#0@@1|)) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType))))))) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType)))))))))) :qid |GenericM.711:10| :skolemid |1777| :pattern ( (GenericMarshalling.__default.parse__Case ($LS $ly@@61) |data#0@@51| |cases#0@@4|)) ))))
(assert  (=> (<= 19 $FunctionContextHeight) (forall (($ly@@62 T@U) (|data#0@@52| T@U) (|cases#0@@5| T@U) ) (!  (=> (and (and (and (= (type $ly@@62) LayerTypeType) (= (type |data#0@@52|) (SeqType BoxType))) (= (type |cases#0@@5|) (SeqType BoxType))) (or (|GenericMarshalling.__default.parse__Case#canCall| |data#0@@52| (Lit |cases#0@@5|)) (and (not (= 19 $FunctionContextHeight)) (and (and ($Is |data#0@@52| (TSeq Tclass.NativeTypes.byte)) ($Is |cases#0@@5| (TSeq Tclass.GenericMarshalling.G))) (and (and (< (|Seq#Length| |data#0@@52|) 18446744073709551616) (< (|Seq#Length| (Lit |cases#0@@5|)) 18446744073709551616)) (forall ((|elt#2@@2| T@U) ) (!  (=> (and (and (= (type |elt#2@@2|) DatatypeTypeType) ($Is |elt#2@@2| Tclass.GenericMarshalling.G)) (|Seq#Contains| |cases#0@@5| ($Box |elt#2@@2|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#2@@2|)) :qid |GenericM.714:21| :skolemid |1778| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#2@@2|)) :pattern ( (|Seq#Contains| |cases#0@@5| ($Box |elt#2@@2|))) ))))))) (and (and (|GenericMarshalling.__default.parse__Uint64#canCall| |data#0@@52|) (let ((|rest1#1@@3| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Uint64 |data#0@@52|))))) (let ((|caseID#1| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Uint64 |data#0@@52|))))) (=> (and (not (Options.Option.None_q |caseID#1|)) (< (GenericMarshalling.V.u ($Unbox DatatypeTypeType (Options.Option.value |caseID#1|))) (|Seq#Length| (Lit |cases#0@@5|)))) (|GenericMarshalling.__default.parse__Val#canCall| |rest1#1@@3| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |cases#0@@5|) (GenericMarshalling.V.u ($Unbox DatatypeTypeType (Options.Option.value |caseID#1|)))))))))) (= (GenericMarshalling.__default.parse__Case ($LS $ly@@62) |data#0@@52| (Lit |cases#0@@5|)) (let ((|rest1#1@@4| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Uint64 |data#0@@52|))))) (let ((|caseID#1@@0| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Uint64 |data#0@@52|))))) (ite  (and (not (Options.Option.None_q |caseID#1@@0|)) (< (GenericMarshalling.V.u ($Unbox DatatypeTypeType (Options.Option.value |caseID#1@@0|))) (|Seq#Length| (Lit |cases#0@@5|)))) (let ((|rest2#1@@1| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Val ($LS $ly@@62) |rest1#1@@4| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |cases#0@@5|) (GenericMarshalling.V.u ($Unbox DatatypeTypeType (Options.Option.value |caseID#1@@0|)))))))))) (let ((|val#1@@1| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val ($LS $ly@@62) |rest1#1@@4| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |cases#0@@5|) (GenericMarshalling.V.u ($Unbox DatatypeTypeType (Options.Option.value |caseID#1@@0|)))))))))) (ite  (not (Options.Option.None_q |val#1@@1|)) (|#_System._tuple#2._#Make2| ($Box (|#Options.Option.Some| ($Box (|#GenericMarshalling.V.VCase| (GenericMarshalling.V.u ($Unbox DatatypeTypeType (Options.Option.value |caseID#1@@0|))) ($Unbox DatatypeTypeType (Options.Option.value |val#1@@1|)))))) ($Box |rest2#1@@1|)) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType))))))) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType)))))))))) :qid |GenericM.711:10| :weight 3 :skolemid |1779| :pattern ( (GenericMarshalling.__default.parse__Case ($LS $ly@@62) |data#0@@52| (Lit |cases#0@@5|))) ))))
(assert  (=> (<= 19 $FunctionContextHeight) (forall (($ly@@63 T@U) (|data#0@@53| T@U) (|cases#0@@6| T@U) ) (!  (=> (and (and (and (= (type $ly@@63) LayerTypeType) (= (type |data#0@@53|) (SeqType BoxType))) (= (type |cases#0@@6|) (SeqType BoxType))) (or (|GenericMarshalling.__default.parse__Case#canCall| (Lit |data#0@@53|) (Lit |cases#0@@6|)) (and (not (= 19 $FunctionContextHeight)) (and (and ($Is |data#0@@53| (TSeq Tclass.NativeTypes.byte)) ($Is |cases#0@@6| (TSeq Tclass.GenericMarshalling.G))) (and (and (< (|Seq#Length| (Lit |data#0@@53|)) 18446744073709551616) (< (|Seq#Length| (Lit |cases#0@@6|)) 18446744073709551616)) (forall ((|elt#3@@3| T@U) ) (!  (=> (and (and (= (type |elt#3@@3|) DatatypeTypeType) ($Is |elt#3@@3| Tclass.GenericMarshalling.G)) (|Seq#Contains| |cases#0@@6| ($Box |elt#3@@3|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#3@@3|)) :qid |GenericM.714:21| :skolemid |1780| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#3@@3|)) :pattern ( (|Seq#Contains| |cases#0@@6| ($Box |elt#3@@3|))) ))))))) (and (and (|GenericMarshalling.__default.parse__Uint64#canCall| (Lit |data#0@@53|)) (let ((|rest1#2@@3| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Lit (GenericMarshalling.__default.parse__Uint64 (Lit |data#0@@53|))))))) (let ((|caseID#2| ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (GenericMarshalling.__default.parse__Uint64 (Lit |data#0@@53|))))))) (=> (and (not (Options.Option.None_q |caseID#2|)) (< (GenericMarshalling.V.u ($Unbox DatatypeTypeType (Options.Option.value |caseID#2|))) (|Seq#Length| (Lit |cases#0@@6|)))) (|GenericMarshalling.__default.parse__Val#canCall| |rest1#2@@3| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |cases#0@@6|) (GenericMarshalling.V.u ($Unbox DatatypeTypeType (Options.Option.value |caseID#2|)))))))))) (= (GenericMarshalling.__default.parse__Case ($LS $ly@@63) (Lit |data#0@@53|) (Lit |cases#0@@6|)) (let ((|rest1#2@@4| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Lit (GenericMarshalling.__default.parse__Uint64 (Lit |data#0@@53|))))))) (let ((|caseID#2@@0| ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (GenericMarshalling.__default.parse__Uint64 (Lit |data#0@@53|))))))) (ite  (and (not (Options.Option.None_q |caseID#2@@0|)) (< (GenericMarshalling.V.u ($Unbox DatatypeTypeType (Options.Option.value |caseID#2@@0|))) (|Seq#Length| (Lit |cases#0@@6|)))) (let ((|rest2#2@@1| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Val ($LS $ly@@63) |rest1#2@@4| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |cases#0@@6|) (GenericMarshalling.V.u ($Unbox DatatypeTypeType (Options.Option.value |caseID#2@@0|)))))))))) (let ((|val#2@@1| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val ($LS $ly@@63) |rest1#2@@4| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |cases#0@@6|) (GenericMarshalling.V.u ($Unbox DatatypeTypeType (Options.Option.value |caseID#2@@0|)))))))))) (ite  (not (Options.Option.None_q |val#2@@1|)) (|#_System._tuple#2._#Make2| ($Box (|#Options.Option.Some| ($Box (|#GenericMarshalling.V.VCase| (GenericMarshalling.V.u ($Unbox DatatypeTypeType (Options.Option.value |caseID#2@@0|))) ($Unbox DatatypeTypeType (Options.Option.value |val#2@@1|)))))) ($Box |rest2#2@@1|)) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType))))))) (|#_System._tuple#2._#Make2| ($Box (Lit |#Options.Option.None|)) ($Box (Lit (|Seq#Empty| BoxType)))))))))) :qid |GenericM.711:10| :weight 3 :skolemid |1781| :pattern ( (GenericMarshalling.__default.parse__Case ($LS $ly@@63) (Lit |data#0@@53|) (Lit |cases#0@@6|))) ))))
(assert (forall (($ly@@64 T@U) (|data#0@@54| T@U) (|grammar#0@@11| T@U) ) (!  (=> (and (and (= (type $ly@@64) LayerTypeType) (= (type |data#0@@54|) (SeqType BoxType))) (= (type |grammar#0@@11|) DatatypeTypeType)) (= (GenericMarshalling.__default.parse__Val ($LS $ly@@64) |data#0@@54| |grammar#0@@11|) (GenericMarshalling.__default.parse__Val $ly@@64 |data#0@@54| |grammar#0@@11|))) :qid |GenericM.761:20| :skolemid |1846| :pattern ( (GenericMarshalling.__default.parse__Val ($LS $ly@@64) |data#0@@54| |grammar#0@@11|)) )))
(assert (forall (($ly@@65 T@U) (|data#0@@55| T@U) (|grammar#0@@12| T@U) ) (!  (=> (and (and (= (type $ly@@65) LayerTypeType) (= (type |data#0@@55|) (SeqType BoxType))) (= (type |grammar#0@@12|) DatatypeTypeType)) (= (GenericMarshalling.__default.parse__Val $ly@@65 |data#0@@55| |grammar#0@@12|) (GenericMarshalling.__default.parse__Val $LZ |data#0@@55| |grammar#0@@12|))) :qid |GenericM.761:20| :skolemid |1847| :pattern ( (GenericMarshalling.__default.parse__Val (AsFuelBottom $ly@@65) |data#0@@55| |grammar#0@@12|)) )))
(assert  (=> (<= 19 $FunctionContextHeight) (forall (($ly@@66 T@U) (|data#0@@56| T@U) (|grammar#0@@13| T@U) ) (!  (=> (and (and (and (= (type $ly@@66) LayerTypeType) (= (type |data#0@@56|) (SeqType BoxType))) (= (type |grammar#0@@13|) DatatypeTypeType)) (or (|GenericMarshalling.__default.parse__Val#canCall| |data#0@@56| |grammar#0@@13|) (and (not (= 19 $FunctionContextHeight)) (and (and ($Is |data#0@@56| (TSeq Tclass.NativeTypes.byte)) ($Is |grammar#0@@13| Tclass.GenericMarshalling.G)) (and (< (|Seq#Length| |data#0@@56|) 18446744073709551616) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |grammar#0@@13|)))))) (and (let ((|rest#0@@5| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Val $ly@@66 |data#0@@56| |grammar#0@@13|))))) (let ((|val#0@@20| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val $ly@@66 |data#0@@56| |grammar#0@@13|))))) (and (<= (|Seq#Length| |rest#0@@5|) (|Seq#Length| |data#0@@56|)) (=> (not (Options.Option.None_q |val#0@@20|)) (and (GenericMarshalling.__default.ValidVal ($LS $LZ) ($Unbox DatatypeTypeType (Options.Option.value |val#0@@20|))) (GenericMarshalling.__default.ValInGrammar ($LS $LZ) ($Unbox DatatypeTypeType (Options.Option.value |val#0@@20|)) |grammar#0@@13|)))))) ($Is (GenericMarshalling.__default.parse__Val $ly@@66 |data#0@@56| |grammar#0@@13|) (Tclass._System.Tuple2 (Tclass.Options.Option Tclass.GenericMarshalling.V) (TSeq Tclass.NativeTypes.byte))))) :qid |GenericM.761:20| :skolemid |1848| :pattern ( (GenericMarshalling.__default.parse__Val $ly@@66 |data#0@@56| |grammar#0@@13|)) ))))
(assert (forall (($ly@@67 T@U) (|data#0@@57| T@U) (|grammar#0@@14| T@U) ) (!  (=> (and (and (and (= (type $ly@@67) LayerTypeType) (= (type |data#0@@57|) (SeqType BoxType))) (= (type |grammar#0@@14|) DatatypeTypeType)) (and ($Is |data#0@@57| (TSeq Tclass.NativeTypes.byte)) ($Is |grammar#0@@14| Tclass.GenericMarshalling.G))) (and (=> (|GenericMarshalling.__default.parse__Val#requires| $ly@@67 |data#0@@57| |grammar#0@@14|) (and (< (|Seq#Length| |data#0@@57|) 18446744073709551616) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |grammar#0@@14|))) (=> (and (< (|Seq#Length| |data#0@@57|) 18446744073709551616) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |grammar#0@@14|)) (|GenericMarshalling.__default.parse__Val#requires| $ly@@67 |data#0@@57| |grammar#0@@14|)))) :qid |GenericM.761:20| :skolemid |1849| :pattern ( (|GenericMarshalling.__default.parse__Val#requires| $ly@@67 |data#0@@57| |grammar#0@@14|)) )))
(assert  (=> (<= 19 $FunctionContextHeight) (forall (($ly@@68 T@U) (|data#0@@58| T@U) (|grammar#0@@15| T@U) ) (!  (=> (and (and (and (= (type $ly@@68) LayerTypeType) (= (type |data#0@@58|) (SeqType BoxType))) (= (type |grammar#0@@15|) DatatypeTypeType)) (or (|GenericMarshalling.__default.parse__Val#canCall| |data#0@@58| |grammar#0@@15|) (and (not (= 19 $FunctionContextHeight)) (and (and ($Is |data#0@@58| (TSeq Tclass.NativeTypes.byte)) ($Is |grammar#0@@15| Tclass.GenericMarshalling.G)) (and (< (|Seq#Length| |data#0@@58|) 18446744073709551616) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |grammar#0@@15|)))))) (and (and (=> (GenericMarshalling.G.GUint32_q |grammar#0@@15|) (|GenericMarshalling.__default.parse__Uint32#canCall| |data#0@@58|)) (=> (not (GenericMarshalling.G.GUint32_q |grammar#0@@15|)) (and (=> (GenericMarshalling.G.GUint64_q |grammar#0@@15|) (|GenericMarshalling.__default.parse__Uint64#canCall| |data#0@@58|)) (=> (not (GenericMarshalling.G.GUint64_q |grammar#0@@15|)) (and (=> (GenericMarshalling.G.GArray_q |grammar#0@@15|) (let ((|elt#0@@3| (GenericMarshalling.G.elt |grammar#0@@15|))) (|GenericMarshalling.__default.parse__Array#canCall| |data#0@@58| |elt#0@@3|))) (=> (not (GenericMarshalling.G.GArray_q |grammar#0@@15|)) (and (=> (GenericMarshalling.G.GTuple_q |grammar#0@@15|) (let ((|t#0@@9| (GenericMarshalling.G.t |grammar#0@@15|))) (|GenericMarshalling.__default.parse__Tuple#canCall| |data#0@@58| |t#0@@9|))) (=> (not (GenericMarshalling.G.GTuple_q |grammar#0@@15|)) (and (=> (GenericMarshalling.G.GByteArray_q |grammar#0@@15|) (|GenericMarshalling.__default.parse__ByteArray#canCall| |data#0@@58|)) (=> (not (GenericMarshalling.G.GByteArray_q |grammar#0@@15|)) (and (=> (GenericMarshalling.G.GUint32Array_q |grammar#0@@15|) (|GenericMarshalling.__default.parse__Uint32Array#canCall| |data#0@@58|)) (=> (not (GenericMarshalling.G.GUint32Array_q |grammar#0@@15|)) (and (=> (GenericMarshalling.G.GUint64Array_q |grammar#0@@15|) (|GenericMarshalling.__default.parse__Uint64Array#canCall| |data#0@@58|)) (=> (not (GenericMarshalling.G.GUint64Array_q |grammar#0@@15|)) (let ((|cases#0@@7| (GenericMarshalling.G.cases |grammar#0@@15|))) (|GenericMarshalling.__default.parse__Case#canCall| |data#0@@58| |cases#0@@7|)))))))))))))))) (= (GenericMarshalling.__default.parse__Val ($LS $ly@@68) |data#0@@58| |grammar#0@@15|) (ite (GenericMarshalling.G.GUint32_q |grammar#0@@15|) (GenericMarshalling.__default.parse__Uint32 |data#0@@58|) (ite (GenericMarshalling.G.GUint64_q |grammar#0@@15|) (GenericMarshalling.__default.parse__Uint64 |data#0@@58|) (ite (GenericMarshalling.G.GArray_q |grammar#0@@15|) (let ((|elt#1@@10| (GenericMarshalling.G.elt |grammar#0@@15|))) (GenericMarshalling.__default.parse__Array $ly@@68 |data#0@@58| |elt#1@@10|)) (ite (GenericMarshalling.G.GTuple_q |grammar#0@@15|) (let ((|t#1@@6| (GenericMarshalling.G.t |grammar#0@@15|))) (GenericMarshalling.__default.parse__Tuple $ly@@68 |data#0@@58| |t#1@@6|)) (ite (GenericMarshalling.G.GByteArray_q |grammar#0@@15|) (GenericMarshalling.__default.parse__ByteArray |data#0@@58|) (ite (GenericMarshalling.G.GUint32Array_q |grammar#0@@15|) (GenericMarshalling.__default.parse__Uint32Array |data#0@@58|) (ite (GenericMarshalling.G.GUint64Array_q |grammar#0@@15|) (GenericMarshalling.__default.parse__Uint64Array |data#0@@58|) (let ((|cases#1@@1| (GenericMarshalling.G.cases |grammar#0@@15|))) (GenericMarshalling.__default.parse__Case $ly@@68 |data#0@@58| |cases#1@@1|)))))))))))) :qid |GenericM.761:20| :skolemid |1850| :pattern ( (GenericMarshalling.__default.parse__Val ($LS $ly@@68) |data#0@@58| |grammar#0@@15|)) ))))
(assert  (=> (<= 19 $FunctionContextHeight) (forall (($ly@@69 T@U) (|data#0@@59| T@U) (|grammar#0@@16| T@U) ) (!  (=> (and (and (and (= (type $ly@@69) LayerTypeType) (= (type |data#0@@59|) (SeqType BoxType))) (= (type |grammar#0@@16|) DatatypeTypeType)) (or (|GenericMarshalling.__default.parse__Val#canCall| |data#0@@59| (Lit |grammar#0@@16|)) (and (not (= 19 $FunctionContextHeight)) (and (and ($Is |data#0@@59| (TSeq Tclass.NativeTypes.byte)) ($Is |grammar#0@@16| Tclass.GenericMarshalling.G)) (and (< (|Seq#Length| |data#0@@59|) 18446744073709551616) (U_2_bool (Lit (bool_2_U (GenericMarshalling.__default.ValidGrammar ($LS $LZ) (Lit |grammar#0@@16|)))))))))) (and (and (=> (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GUint32_q (Lit |grammar#0@@16|))))) (|GenericMarshalling.__default.parse__Uint32#canCall| |data#0@@59|)) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GUint32_q (Lit |grammar#0@@16|)))))) (and (=> (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GUint64_q (Lit |grammar#0@@16|))))) (|GenericMarshalling.__default.parse__Uint64#canCall| |data#0@@59|)) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GUint64_q (Lit |grammar#0@@16|)))))) (and (=> (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GArray_q (Lit |grammar#0@@16|))))) (let ((|elt#2@@3| (Lit (GenericMarshalling.G.elt (Lit |grammar#0@@16|))))) (|GenericMarshalling.__default.parse__Array#canCall| |data#0@@59| |elt#2@@3|))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GArray_q (Lit |grammar#0@@16|)))))) (and (=> (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GTuple_q (Lit |grammar#0@@16|))))) (let ((|t#2@@3| (Lit (GenericMarshalling.G.t (Lit |grammar#0@@16|))))) (|GenericMarshalling.__default.parse__Tuple#canCall| |data#0@@59| |t#2@@3|))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GTuple_q (Lit |grammar#0@@16|)))))) (and (=> (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GByteArray_q (Lit |grammar#0@@16|))))) (|GenericMarshalling.__default.parse__ByteArray#canCall| |data#0@@59|)) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GByteArray_q (Lit |grammar#0@@16|)))))) (and (=> (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GUint32Array_q (Lit |grammar#0@@16|))))) (|GenericMarshalling.__default.parse__Uint32Array#canCall| |data#0@@59|)) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GUint32Array_q (Lit |grammar#0@@16|)))))) (and (=> (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GUint64Array_q (Lit |grammar#0@@16|))))) (|GenericMarshalling.__default.parse__Uint64Array#canCall| |data#0@@59|)) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GUint64Array_q (Lit |grammar#0@@16|)))))) (let ((|cases#2@@0| (Lit (GenericMarshalling.G.cases (Lit |grammar#0@@16|))))) (|GenericMarshalling.__default.parse__Case#canCall| |data#0@@59| |cases#2@@0|)))))))))))))))) (= (GenericMarshalling.__default.parse__Val ($LS $ly@@69) |data#0@@59| (Lit |grammar#0@@16|)) (ite (GenericMarshalling.G.GUint32_q (Lit |grammar#0@@16|)) (GenericMarshalling.__default.parse__Uint32 |data#0@@59|) (ite (GenericMarshalling.G.GUint64_q (Lit |grammar#0@@16|)) (GenericMarshalling.__default.parse__Uint64 |data#0@@59|) (ite (GenericMarshalling.G.GArray_q (Lit |grammar#0@@16|)) (let ((|elt#3@@4| (Lit (GenericMarshalling.G.elt (Lit |grammar#0@@16|))))) (GenericMarshalling.__default.parse__Array ($LS $ly@@69) |data#0@@59| |elt#3@@4|)) (ite (GenericMarshalling.G.GTuple_q (Lit |grammar#0@@16|)) (let ((|t#3@@6| (Lit (GenericMarshalling.G.t (Lit |grammar#0@@16|))))) (GenericMarshalling.__default.parse__Tuple ($LS $ly@@69) |data#0@@59| |t#3@@6|)) (ite (GenericMarshalling.G.GByteArray_q (Lit |grammar#0@@16|)) (GenericMarshalling.__default.parse__ByteArray |data#0@@59|) (ite (GenericMarshalling.G.GUint32Array_q (Lit |grammar#0@@16|)) (GenericMarshalling.__default.parse__Uint32Array |data#0@@59|) (ite (GenericMarshalling.G.GUint64Array_q (Lit |grammar#0@@16|)) (GenericMarshalling.__default.parse__Uint64Array |data#0@@59|) (let ((|cases#3@@1| (Lit (GenericMarshalling.G.cases (Lit |grammar#0@@16|))))) (GenericMarshalling.__default.parse__Case ($LS $ly@@69) |data#0@@59| |cases#3@@1|)))))))))))) :qid |GenericM.761:20| :weight 3 :skolemid |1851| :pattern ( (GenericMarshalling.__default.parse__Val ($LS $ly@@69) |data#0@@59| (Lit |grammar#0@@16|))) ))))
(assert  (=> (<= 19 $FunctionContextHeight) (forall (($ly@@70 T@U) (|data#0@@60| T@U) (|grammar#0@@17| T@U) ) (!  (=> (and (and (and (= (type $ly@@70) LayerTypeType) (= (type |data#0@@60|) (SeqType BoxType))) (= (type |grammar#0@@17|) DatatypeTypeType)) (or (|GenericMarshalling.__default.parse__Val#canCall| (Lit |data#0@@60|) (Lit |grammar#0@@17|)) (and (not (= 19 $FunctionContextHeight)) (and (and ($Is |data#0@@60| (TSeq Tclass.NativeTypes.byte)) ($Is |grammar#0@@17| Tclass.GenericMarshalling.G)) (and (< (|Seq#Length| (Lit |data#0@@60|)) 18446744073709551616) (U_2_bool (Lit (bool_2_U (GenericMarshalling.__default.ValidGrammar ($LS $LZ) (Lit |grammar#0@@17|)))))))))) (and (and (=> (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GUint32_q (Lit |grammar#0@@17|))))) (|GenericMarshalling.__default.parse__Uint32#canCall| (Lit |data#0@@60|))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GUint32_q (Lit |grammar#0@@17|)))))) (and (=> (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GUint64_q (Lit |grammar#0@@17|))))) (|GenericMarshalling.__default.parse__Uint64#canCall| (Lit |data#0@@60|))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GUint64_q (Lit |grammar#0@@17|)))))) (and (=> (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GArray_q (Lit |grammar#0@@17|))))) (let ((|elt#4| (Lit (GenericMarshalling.G.elt (Lit |grammar#0@@17|))))) (|GenericMarshalling.__default.parse__Array#canCall| (Lit |data#0@@60|) |elt#4|))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GArray_q (Lit |grammar#0@@17|)))))) (and (=> (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GTuple_q (Lit |grammar#0@@17|))))) (let ((|t#4| (Lit (GenericMarshalling.G.t (Lit |grammar#0@@17|))))) (|GenericMarshalling.__default.parse__Tuple#canCall| (Lit |data#0@@60|) |t#4|))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GTuple_q (Lit |grammar#0@@17|)))))) (and (=> (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GByteArray_q (Lit |grammar#0@@17|))))) (|GenericMarshalling.__default.parse__ByteArray#canCall| (Lit |data#0@@60|))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GByteArray_q (Lit |grammar#0@@17|)))))) (and (=> (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GUint32Array_q (Lit |grammar#0@@17|))))) (|GenericMarshalling.__default.parse__Uint32Array#canCall| (Lit |data#0@@60|))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GUint32Array_q (Lit |grammar#0@@17|)))))) (and (=> (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GUint64Array_q (Lit |grammar#0@@17|))))) (|GenericMarshalling.__default.parse__Uint64Array#canCall| (Lit |data#0@@60|))) (=> (not (U_2_bool (Lit (bool_2_U (GenericMarshalling.G.GUint64Array_q (Lit |grammar#0@@17|)))))) (let ((|cases#4| (Lit (GenericMarshalling.G.cases (Lit |grammar#0@@17|))))) (|GenericMarshalling.__default.parse__Case#canCall| (Lit |data#0@@60|) |cases#4|)))))))))))))))) (= (GenericMarshalling.__default.parse__Val ($LS $ly@@70) (Lit |data#0@@60|) (Lit |grammar#0@@17|)) (ite (GenericMarshalling.G.GUint32_q (Lit |grammar#0@@17|)) (GenericMarshalling.__default.parse__Uint32 (Lit |data#0@@60|)) (ite (GenericMarshalling.G.GUint64_q (Lit |grammar#0@@17|)) (GenericMarshalling.__default.parse__Uint64 (Lit |data#0@@60|)) (ite (GenericMarshalling.G.GArray_q (Lit |grammar#0@@17|)) (let ((|elt#5| (Lit (GenericMarshalling.G.elt (Lit |grammar#0@@17|))))) (Lit (GenericMarshalling.__default.parse__Array ($LS $ly@@70) (Lit |data#0@@60|) |elt#5|))) (ite (GenericMarshalling.G.GTuple_q (Lit |grammar#0@@17|)) (let ((|t#5| (Lit (GenericMarshalling.G.t (Lit |grammar#0@@17|))))) (Lit (GenericMarshalling.__default.parse__Tuple ($LS $ly@@70) (Lit |data#0@@60|) |t#5|))) (ite (GenericMarshalling.G.GByteArray_q (Lit |grammar#0@@17|)) (GenericMarshalling.__default.parse__ByteArray (Lit |data#0@@60|)) (ite (GenericMarshalling.G.GUint32Array_q (Lit |grammar#0@@17|)) (GenericMarshalling.__default.parse__Uint32Array (Lit |data#0@@60|)) (ite (GenericMarshalling.G.GUint64Array_q (Lit |grammar#0@@17|)) (GenericMarshalling.__default.parse__Uint64Array (Lit |data#0@@60|)) (let ((|cases#5| (Lit (GenericMarshalling.G.cases (Lit |grammar#0@@17|))))) (Lit (GenericMarshalling.__default.parse__Case ($LS $ly@@70) (Lit |data#0@@60|) |cases#5|))))))))))))) :qid |GenericM.761:20| :weight 3 :skolemid |1852| :pattern ( (GenericMarshalling.__default.parse__Val ($LS $ly@@70) (Lit |data#0@@60|) (Lit |grammar#0@@17|))) ))))
(assert  (=> (<= 32 $FunctionContextHeight) (forall ((|data#0@@61| T@U) (|grammar#0@@18| T@U) ) (!  (=> (and (and (= (type |data#0@@61|) (SeqType BoxType)) (= (type |grammar#0@@18|) DatatypeTypeType)) (or (|GenericMarshalling.__default.Demarshallable#canCall| |data#0@@61| |grammar#0@@18|) (and (not (= 32 $FunctionContextHeight)) (and ($Is |data#0@@61| (TSeq Tclass.NativeTypes.byte)) ($Is |grammar#0@@18| Tclass.GenericMarshalling.G))))) true) :qid |GenericM.808:26| :skolemid |1902| :pattern ( (GenericMarshalling.__default.Demarshallable |data#0@@61| |grammar#0@@18|)) ))))
(assert (forall ((|data#0@@62| T@U) (|grammar#0@@19| T@U) ) (!  (=> (and (and (= (type |data#0@@62|) (SeqType BoxType)) (= (type |grammar#0@@19|) DatatypeTypeType)) (and ($Is |data#0@@62| (TSeq Tclass.NativeTypes.byte)) ($Is |grammar#0@@19| Tclass.GenericMarshalling.G))) (and (=> (|GenericMarshalling.__default.Demarshallable#requires| |data#0@@62| |grammar#0@@19|) true) (=> true (|GenericMarshalling.__default.Demarshallable#requires| |data#0@@62| |grammar#0@@19|)))) :qid |GenericM.808:26| :skolemid |1903| :pattern ( (|GenericMarshalling.__default.Demarshallable#requires| |data#0@@62| |grammar#0@@19|)) )))
(assert (= (type StartFuel_GenericMarshalling._default.parse_Val) LayerTypeType))
(assert  (=> (<= 32 $FunctionContextHeight) (forall ((|data#0@@63| T@U) (|grammar#0@@20| T@U) ) (!  (=> (and (and (= (type |data#0@@63|) (SeqType BoxType)) (= (type |grammar#0@@20|) DatatypeTypeType)) (or (|GenericMarshalling.__default.Demarshallable#canCall| |data#0@@63| |grammar#0@@20|) (and (not (= 32 $FunctionContextHeight)) (and ($Is |data#0@@63| (TSeq Tclass.NativeTypes.byte)) ($Is |grammar#0@@20| Tclass.GenericMarshalling.G))))) (and (and (and (and (=> (< (|Seq#Length| |data#0@@63|) 18446744073709551616) (|GenericMarshalling.__default.ValidGrammar#canCall| |grammar#0@@20|)) (=> (and (|GenericMarshalling.__default.ValidGrammar#canCall| |grammar#0@@20|) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |grammar#0@@20|)) (and (|GenericMarshalling.__default.parse__Val#canCall| |data#0@@63| |grammar#0@@20|) (_System.Tuple2.___hMake2_q (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@63| |grammar#0@@20|))))) (=> (and (and (|GenericMarshalling.__default.parse__Val#canCall| |data#0@@63| |grammar#0@@20|) (_System.Tuple2.___hMake2_q (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@63| |grammar#0@@20|))) (not (Options.Option.None_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@63| |grammar#0@@20|)))))) (and (and (|GenericMarshalling.__default.parse__Val#canCall| |data#0@@63| |grammar#0@@20|) (_System.Tuple2.___hMake2_q (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@63| |grammar#0@@20|))) (|GenericMarshalling.__default.ValidVal#canCall| ($Unbox DatatypeTypeType (Options.Option.value ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@63| |grammar#0@@20|))))))))) (=> (and (and (and (|GenericMarshalling.__default.parse__Val#canCall| |data#0@@63| |grammar#0@@20|) (_System.Tuple2.___hMake2_q (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@63| |grammar#0@@20|))) (|GenericMarshalling.__default.ValidVal#canCall| ($Unbox DatatypeTypeType (Options.Option.value ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@63| |grammar#0@@20|))))))) (GenericMarshalling.__default.ValidVal ($LS $LZ) ($Unbox DatatypeTypeType (Options.Option.value ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@63| |grammar#0@@20|))))))) (and (|GenericMarshalling.__default.parse__Val#canCall| |data#0@@63| |grammar#0@@20|) (_System.Tuple2.___hMake2_q (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@63| |grammar#0@@20|))))) (and (=> (GenericMarshalling.__default.Demarshallable |data#0@@63| |grammar#0@@20|) (and (and (and (and (< (|Seq#Length| |data#0@@63|) 18446744073709551616) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |grammar#0@@20|)) (not (Options.Option.None_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@63| |grammar#0@@20|)))))) (GenericMarshalling.__default.ValidVal ($LS $LZ) ($Unbox DatatypeTypeType (Options.Option.value ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@63| |grammar#0@@20|))))))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@63| |grammar#0@@20|))) (|Seq#Empty| BoxType)))) (=> (and (and (and (and (< (|Seq#Length| |data#0@@63|) 18446744073709551616) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |grammar#0@@20|)) (not (Options.Option.None_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@63| |grammar#0@@20|)))))) (GenericMarshalling.__default.ValidVal ($LS $LZ) ($Unbox DatatypeTypeType (Options.Option.value ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@63| |grammar#0@@20|))))))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@63| |grammar#0@@20|))) (|Seq#Empty| BoxType))) (GenericMarshalling.__default.Demarshallable |data#0@@63| |grammar#0@@20|))))) :qid |GenericM.808:26| :skolemid |1904| :pattern ( (GenericMarshalling.__default.Demarshallable |data#0@@63| |grammar#0@@20|)) ))))
(assert  (=> (<= 32 $FunctionContextHeight) (forall ((|data#0@@64| T@U) (|grammar#0@@21| T@U) ) (!  (=> (and (and (= (type |data#0@@64|) (SeqType BoxType)) (= (type |grammar#0@@21|) DatatypeTypeType)) (or (|GenericMarshalling.__default.Demarshallable#canCall| (Lit |data#0@@64|) (Lit |grammar#0@@21|)) (and (not (= 32 $FunctionContextHeight)) (and ($Is |data#0@@64| (TSeq Tclass.NativeTypes.byte)) ($Is |grammar#0@@21| Tclass.GenericMarshalling.G))))) (and (and (and (and (=> (< (|Seq#Length| (Lit |data#0@@64|)) 18446744073709551616) (|GenericMarshalling.__default.ValidGrammar#canCall| (Lit |grammar#0@@21|))) (=> (and (|GenericMarshalling.__default.ValidGrammar#canCall| (Lit |grammar#0@@21|)) (U_2_bool (Lit (bool_2_U (GenericMarshalling.__default.ValidGrammar ($LS $LZ) (Lit |grammar#0@@21|)))))) (and (|GenericMarshalling.__default.parse__Val#canCall| (Lit |data#0@@64|) (Lit |grammar#0@@21|)) (_System.Tuple2.___hMake2_q (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val (Lit |data#0@@64|) (Lit |grammar#0@@21|)))))) (=> (and (and (|GenericMarshalling.__default.parse__Val#canCall| (Lit |data#0@@64|) (Lit |grammar#0@@21|)) (_System.Tuple2.___hMake2_q (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val (Lit |data#0@@64|) (Lit |grammar#0@@21|)))) (not (Options.Option.None_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val (Lit |data#0@@64|) (Lit |grammar#0@@21|))))))) (and (and (|GenericMarshalling.__default.parse__Val#canCall| (Lit |data#0@@64|) (Lit |grammar#0@@21|)) (_System.Tuple2.___hMake2_q (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val (Lit |data#0@@64|) (Lit |grammar#0@@21|)))) (|GenericMarshalling.__default.ValidVal#canCall| ($Unbox DatatypeTypeType (Options.Option.value ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val (Lit |data#0@@64|) (Lit |grammar#0@@21|)))))))))) (=> (and (and (and (|GenericMarshalling.__default.parse__Val#canCall| (Lit |data#0@@64|) (Lit |grammar#0@@21|)) (_System.Tuple2.___hMake2_q (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val (Lit |data#0@@64|) (Lit |grammar#0@@21|)))) (|GenericMarshalling.__default.ValidVal#canCall| ($Unbox DatatypeTypeType (Options.Option.value ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val (Lit |data#0@@64|) (Lit |grammar#0@@21|)))))))) (GenericMarshalling.__default.ValidVal ($LS $LZ) ($Unbox DatatypeTypeType (Options.Option.value ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val (Lit |data#0@@64|) (Lit |grammar#0@@21|)))))))) (and (|GenericMarshalling.__default.parse__Val#canCall| (Lit |data#0@@64|) (Lit |grammar#0@@21|)) (_System.Tuple2.___hMake2_q (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val (Lit |data#0@@64|) (Lit |grammar#0@@21|)))))) (and (=> (GenericMarshalling.__default.Demarshallable (Lit |data#0@@64|) (Lit |grammar#0@@21|)) (and (and (and (and (< (|Seq#Length| (Lit |data#0@@64|)) 18446744073709551616) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) (Lit |grammar#0@@21|))) (not (Options.Option.None_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val (Lit |data#0@@64|) (Lit |grammar#0@@21|))))))) (GenericMarshalling.__default.ValidVal ($LS $LZ) ($Unbox DatatypeTypeType (Options.Option.value ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val (Lit |data#0@@64|) (Lit |grammar#0@@21|)))))))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val (Lit |data#0@@64|) (Lit |grammar#0@@21|)))) (|Seq#Empty| BoxType)))) (=> (and (and (and (and (< (|Seq#Length| (Lit |data#0@@64|)) 18446744073709551616) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) (Lit |grammar#0@@21|))) (not (Options.Option.None_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val (Lit |data#0@@64|) (Lit |grammar#0@@21|))))))) (GenericMarshalling.__default.ValidVal ($LS $LZ) ($Unbox DatatypeTypeType (Options.Option.value ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val (Lit |data#0@@64|) (Lit |grammar#0@@21|)))))))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val (Lit |data#0@@64|) (Lit |grammar#0@@21|)))) (|Seq#Empty| BoxType))) (GenericMarshalling.__default.Demarshallable (Lit |data#0@@64|) (Lit |grammar#0@@21|)))))) :qid |GenericM.808:26| :weight 3 :skolemid |1905| :pattern ( (GenericMarshalling.__default.Demarshallable (Lit |data#0@@64|) (Lit |grammar#0@@21|))) ))))
(assert (forall ((arg0@@258 T@U) (arg1@@115 T@U) ) (! (= (type (GenericMarshalling.__default.DemarshallFunc arg0@@258 arg1@@115)) DatatypeTypeType) :qid |funType:GenericMarshalling.__default.DemarshallFunc| :pattern ( (GenericMarshalling.__default.DemarshallFunc arg0@@258 arg1@@115)) )))
(assert  (=> (<= 33 $FunctionContextHeight) (forall ((|data#0@@65| T@U) (|grammar#0@@22| T@U) ) (!  (=> (and (and (= (type |data#0@@65|) (SeqType BoxType)) (= (type |grammar#0@@22|) DatatypeTypeType)) (or (|GenericMarshalling.__default.DemarshallFunc#canCall| |data#0@@65| |grammar#0@@22|) (and (not (= 33 $FunctionContextHeight)) (and (and ($Is |data#0@@65| (TSeq Tclass.NativeTypes.byte)) ($Is |grammar#0@@22| Tclass.GenericMarshalling.G)) (GenericMarshalling.__default.Demarshallable |data#0@@65| |grammar#0@@22|))))) (and (let ((|val#0@@21| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@65| |grammar#0@@22|))))) (and (not (Options.Option.None_q |val#0@@21|)) (GenericMarshalling.__default.ValInGrammar ($LS $LZ) ($Unbox DatatypeTypeType (Options.Option.value |val#0@@21|)) |grammar#0@@22|))) ($Is (GenericMarshalling.__default.DemarshallFunc |data#0@@65| |grammar#0@@22|) Tclass.GenericMarshalling.V))) :qid |GenericM.817:25| :skolemid |1911| :pattern ( (GenericMarshalling.__default.DemarshallFunc |data#0@@65| |grammar#0@@22|)) ))))
(assert (forall ((|data#0@@66| T@U) (|grammar#0@@23| T@U) ) (!  (=> (and (and (= (type |data#0@@66|) (SeqType BoxType)) (= (type |grammar#0@@23|) DatatypeTypeType)) (and ($Is |data#0@@66| (TSeq Tclass.NativeTypes.byte)) ($Is |grammar#0@@23| Tclass.GenericMarshalling.G))) (and (=> (|GenericMarshalling.__default.DemarshallFunc#requires| |data#0@@66| |grammar#0@@23|) (GenericMarshalling.__default.Demarshallable |data#0@@66| |grammar#0@@23|)) (=> (GenericMarshalling.__default.Demarshallable |data#0@@66| |grammar#0@@23|) (|GenericMarshalling.__default.DemarshallFunc#requires| |data#0@@66| |grammar#0@@23|)))) :qid |GenericM.817:25| :skolemid |1912| :pattern ( (|GenericMarshalling.__default.DemarshallFunc#requires| |data#0@@66| |grammar#0@@23|)) )))
(assert  (=> (<= 33 $FunctionContextHeight) (forall ((|data#0@@67| T@U) (|grammar#0@@24| T@U) ) (!  (=> (and (and (= (type |data#0@@67|) (SeqType BoxType)) (= (type |grammar#0@@24|) DatatypeTypeType)) (or (|GenericMarshalling.__default.DemarshallFunc#canCall| |data#0@@67| |grammar#0@@24|) (and (not (= 33 $FunctionContextHeight)) (and (and ($Is |data#0@@67| (TSeq Tclass.NativeTypes.byte)) ($Is |grammar#0@@24| Tclass.GenericMarshalling.G)) (GenericMarshalling.__default.Demarshallable |data#0@@67| |grammar#0@@24|))))) (and (and (|GenericMarshalling.__default.parse__Val#canCall| |data#0@@67| |grammar#0@@24|) (_System.Tuple2.___hMake2_q (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@67| |grammar#0@@24|))) (= (GenericMarshalling.__default.DemarshallFunc |data#0@@67| |grammar#0@@24|) ($Unbox DatatypeTypeType (Options.Option.value ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@67| |grammar#0@@24|)))))))) :qid |GenericM.817:25| :skolemid |1913| :pattern ( (GenericMarshalling.__default.DemarshallFunc |data#0@@67| |grammar#0@@24|)) ))))
(assert  (=> (<= 33 $FunctionContextHeight) (forall ((|data#0@@68| T@U) (|grammar#0@@25| T@U) ) (!  (=> (and (and (= (type |data#0@@68|) (SeqType BoxType)) (= (type |grammar#0@@25|) DatatypeTypeType)) (or (|GenericMarshalling.__default.DemarshallFunc#canCall| |data#0@@68| (Lit |grammar#0@@25|)) (and (not (= 33 $FunctionContextHeight)) (and (and ($Is |data#0@@68| (TSeq Tclass.NativeTypes.byte)) ($Is |grammar#0@@25| Tclass.GenericMarshalling.G)) (GenericMarshalling.__default.Demarshallable |data#0@@68| (Lit |grammar#0@@25|)))))) (and (and (|GenericMarshalling.__default.parse__Val#canCall| |data#0@@68| (Lit |grammar#0@@25|)) (_System.Tuple2.___hMake2_q (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@68| (Lit |grammar#0@@25|)))) (= (GenericMarshalling.__default.DemarshallFunc |data#0@@68| (Lit |grammar#0@@25|)) ($Unbox DatatypeTypeType (Options.Option.value ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@68| (Lit |grammar#0@@25|))))))))) :qid |GenericM.817:25| :weight 3 :skolemid |1914| :pattern ( (GenericMarshalling.__default.DemarshallFunc |data#0@@68| (Lit |grammar#0@@25|))) ))))
(assert  (=> (<= 33 $FunctionContextHeight) (forall ((|data#0@@69| T@U) (|grammar#0@@26| T@U) ) (!  (=> (and (and (= (type |data#0@@69|) (SeqType BoxType)) (= (type |grammar#0@@26|) DatatypeTypeType)) (or (|GenericMarshalling.__default.DemarshallFunc#canCall| (Lit |data#0@@69|) (Lit |grammar#0@@26|)) (and (not (= 33 $FunctionContextHeight)) (and (and ($Is |data#0@@69| (TSeq Tclass.NativeTypes.byte)) ($Is |grammar#0@@26| Tclass.GenericMarshalling.G)) (U_2_bool (Lit (bool_2_U (GenericMarshalling.__default.Demarshallable (Lit |data#0@@69|) (Lit |grammar#0@@26|))))))))) (and (and (|GenericMarshalling.__default.parse__Val#canCall| (Lit |data#0@@69|) (Lit |grammar#0@@26|)) (_System.Tuple2.___hMake2_q (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val (Lit |data#0@@69|) (Lit |grammar#0@@26|)))) (= (GenericMarshalling.__default.DemarshallFunc (Lit |data#0@@69|) (Lit |grammar#0@@26|)) ($Unbox DatatypeTypeType (Options.Option.value ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val (Lit |data#0@@69|) (Lit |grammar#0@@26|))))))))) :qid |GenericM.817:25| :weight 3 :skolemid |1915| :pattern ( (GenericMarshalling.__default.DemarshallFunc (Lit |data#0@@69|) (Lit |grammar#0@@26|))) ))))
(assert (= (type Tclass.NativeTypes.sbyte) TyType))
(assert (= (Tag Tclass.NativeTypes.sbyte) Tagclass.NativeTypes.sbyte))
(assert (forall ((bx@@85 T@U) ) (!  (=> (and (= (type bx@@85) BoxType) ($IsBox bx@@85 Tclass.NativeTypes.sbyte)) (and (= ($Box ($Unbox intType bx@@85)) bx@@85) ($Is ($Unbox intType bx@@85) Tclass.NativeTypes.sbyte))) :qid |unknown.0:0| :skolemid |3534| :pattern ( ($IsBox bx@@85 Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@2| T@U) ) (!  (=> (= (type |i#0@@2|) intType) (and (=> ($Is |i#0@@2| Tclass.NativeTypes.sbyte) (and (<= (LitInt (- 0 128)) (U_2_int |i#0@@2|)) (< (U_2_int |i#0@@2|) 128))) (=> (and (<= (LitInt (- 0 128)) (U_2_int |i#0@@2|)) (< (U_2_int |i#0@@2|) 128)) ($Is |i#0@@2| Tclass.NativeTypes.sbyte)))) :qid |unknown.0:0| :skolemid |3535| :pattern ( ($Is |i#0@@2| Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@3| T@U) ($h@@54 T@U) ) (!  (=> (and (= (type |i#0@@3|) intType) (= (type $h@@54) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@3| Tclass.NativeTypes.sbyte $h@@54)) :qid |unknown.0:0| :skolemid |3536| :pattern ( ($IsAlloc |i#0@@3| Tclass.NativeTypes.sbyte $h@@54)) )))
(assert (forall ((|i#0@@4| T@U) ) (!  (=> (= (type |i#0@@4|) intType) (and (=> ($Is |i#0@@4| Tclass.NativeTypes.byte) (and (<= (LitInt 0) (U_2_int |i#0@@4|)) (< (U_2_int |i#0@@4|) 256))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@4|)) (< (U_2_int |i#0@@4|) 256)) ($Is |i#0@@4| Tclass.NativeTypes.byte)))) :qid |unknown.0:0| :skolemid |3537| :pattern ( ($Is |i#0@@4| Tclass.NativeTypes.byte)) )))
(assert (forall ((|i#0@@5| T@U) ($h@@55 T@U) ) (!  (=> (and (= (type |i#0@@5|) intType) (= (type $h@@55) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@5| Tclass.NativeTypes.byte $h@@55)) :qid |unknown.0:0| :skolemid |3538| :pattern ( ($IsAlloc |i#0@@5| Tclass.NativeTypes.byte $h@@55)) )))
(assert (= (type Tclass.NativeTypes.int16) TyType))
(assert (= (Tag Tclass.NativeTypes.int16) Tagclass.NativeTypes.int16))
(assert (forall ((bx@@86 T@U) ) (!  (=> (and (= (type bx@@86) BoxType) ($IsBox bx@@86 Tclass.NativeTypes.int16)) (and (= ($Box ($Unbox intType bx@@86)) bx@@86) ($Is ($Unbox intType bx@@86) Tclass.NativeTypes.int16))) :qid |unknown.0:0| :skolemid |3539| :pattern ( ($IsBox bx@@86 Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@6| T@U) ) (!  (=> (= (type |i#0@@6|) intType) (and (=> ($Is |i#0@@6| Tclass.NativeTypes.int16) (and (<= (LitInt (- 0 32768)) (U_2_int |i#0@@6|)) (< (U_2_int |i#0@@6|) 32768))) (=> (and (<= (LitInt (- 0 32768)) (U_2_int |i#0@@6|)) (< (U_2_int |i#0@@6|) 32768)) ($Is |i#0@@6| Tclass.NativeTypes.int16)))) :qid |unknown.0:0| :skolemid |3540| :pattern ( ($Is |i#0@@6| Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@7| T@U) ($h@@56 T@U) ) (!  (=> (and (= (type |i#0@@7|) intType) (= (type $h@@56) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@7| Tclass.NativeTypes.int16 $h@@56)) :qid |unknown.0:0| :skolemid |3541| :pattern ( ($IsAlloc |i#0@@7| Tclass.NativeTypes.int16 $h@@56)) )))
(assert (= (type Tclass.NativeTypes.uint16) TyType))
(assert (= (Tag Tclass.NativeTypes.uint16) Tagclass.NativeTypes.uint16))
(assert (forall ((bx@@87 T@U) ) (!  (=> (and (= (type bx@@87) BoxType) ($IsBox bx@@87 Tclass.NativeTypes.uint16)) (and (= ($Box ($Unbox intType bx@@87)) bx@@87) ($Is ($Unbox intType bx@@87) Tclass.NativeTypes.uint16))) :qid |unknown.0:0| :skolemid |3542| :pattern ( ($IsBox bx@@87 Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@8| T@U) ) (!  (=> (= (type |i#0@@8|) intType) (and (=> ($Is |i#0@@8| Tclass.NativeTypes.uint16) (and (<= (LitInt 0) (U_2_int |i#0@@8|)) (< (U_2_int |i#0@@8|) 65536))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@8|)) (< (U_2_int |i#0@@8|) 65536)) ($Is |i#0@@8| Tclass.NativeTypes.uint16)))) :qid |unknown.0:0| :skolemid |3543| :pattern ( ($Is |i#0@@8| Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@9| T@U) ($h@@57 T@U) ) (!  (=> (and (= (type |i#0@@9|) intType) (= (type $h@@57) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@9| Tclass.NativeTypes.uint16 $h@@57)) :qid |unknown.0:0| :skolemid |3544| :pattern ( ($IsAlloc |i#0@@9| Tclass.NativeTypes.uint16 $h@@57)) )))
(assert (= (type Tclass.NativeTypes.int32) TyType))
(assert (= (Tag Tclass.NativeTypes.int32) Tagclass.NativeTypes.int32))
(assert (forall ((bx@@88 T@U) ) (!  (=> (and (= (type bx@@88) BoxType) ($IsBox bx@@88 Tclass.NativeTypes.int32)) (and (= ($Box ($Unbox intType bx@@88)) bx@@88) ($Is ($Unbox intType bx@@88) Tclass.NativeTypes.int32))) :qid |unknown.0:0| :skolemid |3545| :pattern ( ($IsBox bx@@88 Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@10| T@U) ) (!  (=> (= (type |i#0@@10|) intType) (and (=> ($Is |i#0@@10| Tclass.NativeTypes.int32) (and (<= (LitInt (- 0 2147483648)) (U_2_int |i#0@@10|)) (< (U_2_int |i#0@@10|) 2147483648))) (=> (and (<= (LitInt (- 0 2147483648)) (U_2_int |i#0@@10|)) (< (U_2_int |i#0@@10|) 2147483648)) ($Is |i#0@@10| Tclass.NativeTypes.int32)))) :qid |unknown.0:0| :skolemid |3546| :pattern ( ($Is |i#0@@10| Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@11| T@U) ($h@@58 T@U) ) (!  (=> (and (= (type |i#0@@11|) intType) (= (type $h@@58) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@11| Tclass.NativeTypes.int32 $h@@58)) :qid |unknown.0:0| :skolemid |3547| :pattern ( ($IsAlloc |i#0@@11| Tclass.NativeTypes.int32 $h@@58)) )))
(assert (forall ((|i#0@@12| T@U) ) (!  (=> (= (type |i#0@@12|) intType) (and (=> ($Is |i#0@@12| Tclass.NativeTypes.uint32) (and (<= (LitInt 0) (U_2_int |i#0@@12|)) (< (U_2_int |i#0@@12|) 4294967296))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@12|)) (< (U_2_int |i#0@@12|) 4294967296)) ($Is |i#0@@12| Tclass.NativeTypes.uint32)))) :qid |unknown.0:0| :skolemid |3548| :pattern ( ($Is |i#0@@12| Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@13| T@U) ($h@@59 T@U) ) (!  (=> (and (= (type |i#0@@13|) intType) (= (type $h@@59) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@13| Tclass.NativeTypes.uint32 $h@@59)) :qid |unknown.0:0| :skolemid |3549| :pattern ( ($IsAlloc |i#0@@13| Tclass.NativeTypes.uint32 $h@@59)) )))
(assert (= (type Tclass.NativeTypes.int64) TyType))
(assert (= (Tag Tclass.NativeTypes.int64) Tagclass.NativeTypes.int64))
(assert (forall ((bx@@89 T@U) ) (!  (=> (and (= (type bx@@89) BoxType) ($IsBox bx@@89 Tclass.NativeTypes.int64)) (and (= ($Box ($Unbox intType bx@@89)) bx@@89) ($Is ($Unbox intType bx@@89) Tclass.NativeTypes.int64))) :qid |unknown.0:0| :skolemid |3550| :pattern ( ($IsBox bx@@89 Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@14| T@U) ) (!  (=> (= (type |i#0@@14|) intType) (and (=> ($Is |i#0@@14| Tclass.NativeTypes.int64) (and (<= (LitInt (- 0 9223372036854775808)) (U_2_int |i#0@@14|)) (< (U_2_int |i#0@@14|) 9223372036854775808))) (=> (and (<= (LitInt (- 0 9223372036854775808)) (U_2_int |i#0@@14|)) (< (U_2_int |i#0@@14|) 9223372036854775808)) ($Is |i#0@@14| Tclass.NativeTypes.int64)))) :qid |unknown.0:0| :skolemid |3551| :pattern ( ($Is |i#0@@14| Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@15| T@U) ($h@@60 T@U) ) (!  (=> (and (= (type |i#0@@15|) intType) (= (type $h@@60) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@15| Tclass.NativeTypes.int64 $h@@60)) :qid |unknown.0:0| :skolemid |3552| :pattern ( ($IsAlloc |i#0@@15| Tclass.NativeTypes.int64 $h@@60)) )))
(assert (forall ((|i#0@@16| T@U) ) (!  (=> (= (type |i#0@@16|) intType) (and (=> ($Is |i#0@@16| Tclass.NativeTypes.uint64) (and (<= (LitInt 0) (U_2_int |i#0@@16|)) (< (U_2_int |i#0@@16|) 18446744073709551616))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@16|)) (< (U_2_int |i#0@@16|) 18446744073709551616)) ($Is |i#0@@16| Tclass.NativeTypes.uint64)))) :qid |unknown.0:0| :skolemid |3553| :pattern ( ($Is |i#0@@16| Tclass.NativeTypes.uint64)) )))
(assert (forall ((|i#0@@17| T@U) ($h@@61 T@U) ) (!  (=> (and (= (type |i#0@@17|) intType) (= (type $h@@61) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@17| Tclass.NativeTypes.uint64 $h@@61)) :qid |unknown.0:0| :skolemid |3554| :pattern ( ($IsAlloc |i#0@@17| Tclass.NativeTypes.uint64 $h@@61)) )))
(assert (= (type Tclass.NativeTypes.nat8) TyType))
(assert (= (Tag Tclass.NativeTypes.nat8) Tagclass.NativeTypes.nat8))
(assert (forall ((bx@@90 T@U) ) (!  (=> (and (= (type bx@@90) BoxType) ($IsBox bx@@90 Tclass.NativeTypes.nat8)) (and (= ($Box ($Unbox intType bx@@90)) bx@@90) ($Is ($Unbox intType bx@@90) Tclass.NativeTypes.nat8))) :qid |unknown.0:0| :skolemid |3555| :pattern ( ($IsBox bx@@90 Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@18| T@U) ) (!  (=> (= (type |i#0@@18|) intType) (and (=> ($Is |i#0@@18| Tclass.NativeTypes.nat8) (and (<= (LitInt 0) (U_2_int |i#0@@18|)) (< (U_2_int |i#0@@18|) 128))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@18|)) (< (U_2_int |i#0@@18|) 128)) ($Is |i#0@@18| Tclass.NativeTypes.nat8)))) :qid |unknown.0:0| :skolemid |3556| :pattern ( ($Is |i#0@@18| Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@19| T@U) ($h@@62 T@U) ) (!  (=> (and (= (type |i#0@@19|) intType) (= (type $h@@62) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@19| Tclass.NativeTypes.nat8 $h@@62)) :qid |unknown.0:0| :skolemid |3557| :pattern ( ($IsAlloc |i#0@@19| Tclass.NativeTypes.nat8 $h@@62)) )))
(assert (= (type Tclass.NativeTypes.nat16) TyType))
(assert (= (Tag Tclass.NativeTypes.nat16) Tagclass.NativeTypes.nat16))
(assert (forall ((bx@@91 T@U) ) (!  (=> (and (= (type bx@@91) BoxType) ($IsBox bx@@91 Tclass.NativeTypes.nat16)) (and (= ($Box ($Unbox intType bx@@91)) bx@@91) ($Is ($Unbox intType bx@@91) Tclass.NativeTypes.nat16))) :qid |unknown.0:0| :skolemid |3558| :pattern ( ($IsBox bx@@91 Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@20| T@U) ) (!  (=> (= (type |i#0@@20|) intType) (and (=> ($Is |i#0@@20| Tclass.NativeTypes.nat16) (and (<= (LitInt 0) (U_2_int |i#0@@20|)) (< (U_2_int |i#0@@20|) 32768))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@20|)) (< (U_2_int |i#0@@20|) 32768)) ($Is |i#0@@20| Tclass.NativeTypes.nat16)))) :qid |unknown.0:0| :skolemid |3559| :pattern ( ($Is |i#0@@20| Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@21| T@U) ($h@@63 T@U) ) (!  (=> (and (= (type |i#0@@21|) intType) (= (type $h@@63) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@21| Tclass.NativeTypes.nat16 $h@@63)) :qid |unknown.0:0| :skolemid |3560| :pattern ( ($IsAlloc |i#0@@21| Tclass.NativeTypes.nat16 $h@@63)) )))
(assert (= (type Tclass.NativeTypes.nat32) TyType))
(assert (= (Tag Tclass.NativeTypes.nat32) Tagclass.NativeTypes.nat32))
(assert (forall ((bx@@92 T@U) ) (!  (=> (and (= (type bx@@92) BoxType) ($IsBox bx@@92 Tclass.NativeTypes.nat32)) (and (= ($Box ($Unbox intType bx@@92)) bx@@92) ($Is ($Unbox intType bx@@92) Tclass.NativeTypes.nat32))) :qid |unknown.0:0| :skolemid |3561| :pattern ( ($IsBox bx@@92 Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@22| T@U) ) (!  (=> (= (type |i#0@@22|) intType) (and (=> ($Is |i#0@@22| Tclass.NativeTypes.nat32) (and (<= (LitInt 0) (U_2_int |i#0@@22|)) (< (U_2_int |i#0@@22|) 2147483648))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@22|)) (< (U_2_int |i#0@@22|) 2147483648)) ($Is |i#0@@22| Tclass.NativeTypes.nat32)))) :qid |unknown.0:0| :skolemid |3562| :pattern ( ($Is |i#0@@22| Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@23| T@U) ($h@@64 T@U) ) (!  (=> (and (= (type |i#0@@23|) intType) (= (type $h@@64) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@23| Tclass.NativeTypes.nat32 $h@@64)) :qid |unknown.0:0| :skolemid |3563| :pattern ( ($IsAlloc |i#0@@23| Tclass.NativeTypes.nat32 $h@@64)) )))
(assert (= (type Tclass.NativeTypes.nat64) TyType))
(assert (= (Tag Tclass.NativeTypes.nat64) Tagclass.NativeTypes.nat64))
(assert (forall ((bx@@93 T@U) ) (!  (=> (and (= (type bx@@93) BoxType) ($IsBox bx@@93 Tclass.NativeTypes.nat64)) (and (= ($Box ($Unbox intType bx@@93)) bx@@93) ($Is ($Unbox intType bx@@93) Tclass.NativeTypes.nat64))) :qid |unknown.0:0| :skolemid |3564| :pattern ( ($IsBox bx@@93 Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@24| T@U) ) (!  (=> (= (type |i#0@@24|) intType) (and (=> ($Is |i#0@@24| Tclass.NativeTypes.nat64) (and (<= (LitInt 0) (U_2_int |i#0@@24|)) (< (U_2_int |i#0@@24|) 9223372036854775808))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@24|)) (< (U_2_int |i#0@@24|) 9223372036854775808)) ($Is |i#0@@24| Tclass.NativeTypes.nat64)))) :qid |unknown.0:0| :skolemid |3565| :pattern ( ($Is |i#0@@24| Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@25| T@U) ($h@@65 T@U) ) (!  (=> (and (= (type |i#0@@25|) intType) (= (type $h@@65) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@25| Tclass.NativeTypes.nat64 $h@@65)) :qid |unknown.0:0| :skolemid |3566| :pattern ( ($IsAlloc |i#0@@25| Tclass.NativeTypes.nat64 $h@@65)) )))
(assert (= (type Tclass.NativeTypes.__default) TyType))
(assert (= (Tag Tclass.NativeTypes.__default) Tagclass.NativeTypes.__default))
(assert (forall ((bx@@94 T@U) ) (!  (=> (and (= (type bx@@94) BoxType) ($IsBox bx@@94 Tclass.NativeTypes.__default)) (and (= ($Box ($Unbox refType bx@@94)) bx@@94) ($Is ($Unbox refType bx@@94) Tclass.NativeTypes.__default))) :qid |unknown.0:0| :skolemid |3567| :pattern ( ($IsBox bx@@94 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@11 T@U) ) (!  (=> (= (type $o@@11) refType) (and (=> ($Is $o@@11 Tclass.NativeTypes.__default) (or (= $o@@11 null) (= (dtype $o@@11) Tclass.NativeTypes.__default))) (=> (or (= $o@@11 null) (= (dtype $o@@11) Tclass.NativeTypes.__default)) ($Is $o@@11 Tclass.NativeTypes.__default)))) :qid |unknown.0:0| :skolemid |3568| :pattern ( ($Is $o@@11 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@12 T@U) ($h@@66 T@U) ) (!  (=> (and (= (type $o@@12) refType) (= (type $h@@66) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@12 Tclass.NativeTypes.__default $h@@66) (or (= $o@@12 null) (U_2_bool (MapType1Select (MapType0Select $h@@66 $o@@12) alloc)))) (=> (or (= $o@@12 null) (U_2_bool (MapType1Select (MapType0Select $h@@66 $o@@12) alloc))) ($IsAlloc $o@@12 Tclass.NativeTypes.__default $h@@66)))) :qid |unknown.0:0| :skolemid |3569| :pattern ( ($IsAlloc $o@@12 Tclass.NativeTypes.__default $h@@66)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint64Size) (< NativeTypes.__default.Uint64Size 18446744073709551616)))))
(assert  (=> |NativeTypes.__default.Uint64Size#requires| true))
(assert  (=> true |NativeTypes.__default.Uint64Size#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint32Size) (< NativeTypes.__default.Uint32Size 18446744073709551616)))))
(assert  (=> |NativeTypes.__default.Uint32Size#requires| true))
(assert  (=> true |NativeTypes.__default.Uint32Size#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint16Size) (< NativeTypes.__default.Uint16Size 18446744073709551616)))))
(assert  (=> |NativeTypes.__default.Uint16Size#requires| true))
(assert  (=> true |NativeTypes.__default.Uint16Size#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true true)))
(assert  (=> |NativeTypes.__default.Uint64UpperBound#requires| true))
(assert  (=> true |NativeTypes.__default.Uint64UpperBound#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true true)))
(assert  (=> |NativeTypes.__default.Uint32UpperBound#requires| true))
(assert  (=> true |NativeTypes.__default.Uint32UpperBound#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert (= (type Tclass.Collections____Maps__i.__default) TyType))
(assert (= (Tag Tclass.Collections____Maps__i.__default) Tagclass.Collections____Maps__i.__default))
(assert (forall ((bx@@95 T@U) ) (!  (=> (and (= (type bx@@95) BoxType) ($IsBox bx@@95 Tclass.Collections____Maps__i.__default)) (and (= ($Box ($Unbox refType bx@@95)) bx@@95) ($Is ($Unbox refType bx@@95) Tclass.Collections____Maps__i.__default))) :qid |unknown.0:0| :skolemid |3570| :pattern ( ($IsBox bx@@95 Tclass.Collections____Maps__i.__default)) )))
(assert (forall (($o@@13 T@U) ) (!  (=> (= (type $o@@13) refType) (and (=> ($Is $o@@13 Tclass.Collections____Maps__i.__default) (or (= $o@@13 null) (= (dtype $o@@13) Tclass.Collections____Maps__i.__default))) (=> (or (= $o@@13 null) (= (dtype $o@@13) Tclass.Collections____Maps__i.__default)) ($Is $o@@13 Tclass.Collections____Maps__i.__default)))) :qid |unknown.0:0| :skolemid |3571| :pattern ( ($Is $o@@13 Tclass.Collections____Maps__i.__default)) )))
(assert (forall (($o@@14 T@U) ($h@@67 T@U) ) (!  (=> (and (= (type $o@@14) refType) (= (type $h@@67) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@14 Tclass.Collections____Maps__i.__default $h@@67) (or (= $o@@14 null) (U_2_bool (MapType1Select (MapType0Select $h@@67 $o@@14) alloc)))) (=> (or (= $o@@14 null) (U_2_bool (MapType1Select (MapType0Select $h@@67 $o@@14) alloc))) ($IsAlloc $o@@14 Tclass.Collections____Maps__i.__default $h@@67)))) :qid |unknown.0:0| :skolemid |3572| :pattern ( ($IsAlloc $o@@14 Tclass.Collections____Maps__i.__default $h@@67)) )))
(assert  (=> true (forall ((Collections__Maps_i._default.eq_map$A T@U) (Collections__Maps_i._default.eq_map$B T@U) (|x#0@@1| T@U) (|y#0| T@U) ) (!  (=> (and (and (and (and (and (= (type Collections__Maps_i._default.eq_map$A) TyType) (= (type Collections__Maps_i._default.eq_map$B) TyType)) (= (type |x#0@@1|) (MapType BoxType BoxType))) (= (type |y#0|) (MapType BoxType BoxType))) (or (|Collections____Maps__i.__default.eq__map#canCall| Collections__Maps_i._default.eq_map$A Collections__Maps_i._default.eq_map$B |x#0@@1| |y#0|) (and ($Is |x#0@@1| (TMap Collections__Maps_i._default.eq_map$A Collections__Maps_i._default.eq_map$B)) ($Is |y#0| (TMap Collections__Maps_i._default.eq_map$A Collections__Maps_i._default.eq_map$B))))) (Collections____Maps__i.__default.eq__map Collections__Maps_i._default.eq_map$A Collections__Maps_i._default.eq_map$B |x#0@@1| |y#0|)) (|Map#Equal| |x#0@@1| |y#0|)) :qid |unknown.0:0| :skolemid |3573| :pattern ( (Collections____Maps__i.__default.eq__map Collections__Maps_i._default.eq_map$A Collections__Maps_i._default.eq_map$B |x#0@@1| |y#0|)) ))))
(assert (forall ((Collections__Maps_i._default.eq_map$A@@0 T@U) (Collections__Maps_i._default.eq_map$B@@0 T@U) (|x#0@@2| T@U) (|y#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Collections__Maps_i._default.eq_map$A@@0) TyType) (= (type Collections__Maps_i._default.eq_map$B@@0) TyType)) (= (type |x#0@@2|) (MapType BoxType BoxType))) (= (type |y#0@@0|) (MapType BoxType BoxType))) (and ($Is |x#0@@2| (TMap Collections__Maps_i._default.eq_map$A@@0 Collections__Maps_i._default.eq_map$B@@0)) ($Is |y#0@@0| (TMap Collections__Maps_i._default.eq_map$A@@0 Collections__Maps_i._default.eq_map$B@@0)))) (and (=> (|Collections____Maps__i.__default.eq__map#requires| Collections__Maps_i._default.eq_map$A@@0 Collections__Maps_i._default.eq_map$B@@0 |x#0@@2| |y#0@@0|) true) (=> true (|Collections____Maps__i.__default.eq__map#requires| Collections__Maps_i._default.eq_map$A@@0 Collections__Maps_i._default.eq_map$B@@0 |x#0@@2| |y#0@@0|)))) :qid |unknown.0:0| :skolemid |3574| :pattern ( (|Collections____Maps__i.__default.eq__map#requires| Collections__Maps_i._default.eq_map$A@@0 Collections__Maps_i._default.eq_map$B@@0 |x#0@@2| |y#0@@0|)) )))
(assert  (=> true (forall ((Collections__Maps_i._default.eq_map$A@@1 T@U) (Collections__Maps_i._default.eq_map$B@@1 T@U) (|x#0@@3| T@U) (|y#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Collections__Maps_i._default.eq_map$A@@1) TyType) (= (type Collections__Maps_i._default.eq_map$B@@1) TyType)) (= (type |x#0@@3|) (MapType BoxType BoxType))) (= (type |y#0@@1|) (MapType BoxType BoxType))) (or (|Collections____Maps__i.__default.eq__map#canCall| Collections__Maps_i._default.eq_map$A@@1 Collections__Maps_i._default.eq_map$B@@1 |x#0@@3| |y#0@@1|) (and ($Is |x#0@@3| (TMap Collections__Maps_i._default.eq_map$A@@1 Collections__Maps_i._default.eq_map$B@@1)) ($Is |y#0@@1| (TMap Collections__Maps_i._default.eq_map$A@@1 Collections__Maps_i._default.eq_map$B@@1))))) (and (=> (Collections____Maps__i.__default.eq__map Collections__Maps_i._default.eq_map$A@@1 Collections__Maps_i._default.eq_map$B@@1 |x#0@@3| |y#0@@1|) (and (forall ((|a#0@@4| T@U) ) (!  (=> (and (= (type |a#0@@4|) BoxType) ($IsBox |a#0@@4| Collections__Maps_i._default.eq_map$A@@1)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| |x#0@@3|) |a#0@@4|)) (U_2_bool (MapType0Select (|Map#Domain| |y#0@@1|) |a#0@@4|))) (=> (U_2_bool (MapType0Select (|Map#Domain| |y#0@@1|) |a#0@@4|)) (U_2_bool (MapType0Select (|Map#Domain| |x#0@@3|) |a#0@@4|))))) :qid |Mapsidfy.9:13| :skolemid |3576| :pattern ( (MapType0Select (|Map#Domain| |y#0@@1|) |a#0@@4|)) :pattern ( (MapType0Select (|Map#Domain| |x#0@@3|) |a#0@@4|)) )) (forall ((|a#1@@4| T@U) ) (!  (=> (and (and (= (type |a#1@@4|) BoxType) ($IsBox |a#1@@4| Collections__Maps_i._default.eq_map$A@@1)) (U_2_bool (MapType0Select (|Map#Domain| |x#0@@3|) |a#1@@4|))) (= (MapType0Select (|Map#Elements| |x#0@@3|) |a#1@@4|) (MapType0Select (|Map#Elements| |y#0@@1|) |a#1@@4|))) :qid |Mapsidfy.10:13| :skolemid |3577| :pattern ( (MapType0Select (|Map#Elements| |y#0@@1|) |a#1@@4|)) :pattern ( (MapType0Select (|Map#Elements| |x#0@@3|) |a#1@@4|)) :pattern ( (MapType0Select (|Map#Domain| |x#0@@3|) |a#1@@4|)) )))) (=> (and (forall ((|a#0@@5| T@U) ) (!  (=> (and (= (type |a#0@@5|) BoxType) ($IsBox |a#0@@5| Collections__Maps_i._default.eq_map$A@@1)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| |x#0@@3|) |a#0@@5|)) (U_2_bool (MapType0Select (|Map#Domain| |y#0@@1|) |a#0@@5|))) (=> (U_2_bool (MapType0Select (|Map#Domain| |y#0@@1|) |a#0@@5|)) (U_2_bool (MapType0Select (|Map#Domain| |x#0@@3|) |a#0@@5|))))) :qid |Mapsidfy.9:13| :skolemid |3576| :pattern ( (MapType0Select (|Map#Domain| |y#0@@1|) |a#0@@5|)) :pattern ( (MapType0Select (|Map#Domain| |x#0@@3|) |a#0@@5|)) )) (forall ((|a#1@@5| T@U) ) (!  (=> (and (and (= (type |a#1@@5|) BoxType) ($IsBox |a#1@@5| Collections__Maps_i._default.eq_map$A@@1)) (U_2_bool (MapType0Select (|Map#Domain| |x#0@@3|) |a#1@@5|))) (= (MapType0Select (|Map#Elements| |x#0@@3|) |a#1@@5|) (MapType0Select (|Map#Elements| |y#0@@1|) |a#1@@5|))) :qid |Mapsidfy.10:13| :skolemid |3577| :pattern ( (MapType0Select (|Map#Elements| |y#0@@1|) |a#1@@5|)) :pattern ( (MapType0Select (|Map#Elements| |x#0@@3|) |a#1@@5|)) :pattern ( (MapType0Select (|Map#Domain| |x#0@@3|) |a#1@@5|)) ))) (Collections____Maps__i.__default.eq__map Collections__Maps_i._default.eq_map$A@@1 Collections__Maps_i._default.eq_map$B@@1 |x#0@@3| |y#0@@1|)))) :qid |unknown.0:0| :skolemid |3578| :pattern ( (Collections____Maps__i.__default.eq__map Collections__Maps_i._default.eq_map$A@@1 Collections__Maps_i._default.eq_map$B@@1 |x#0@@3| |y#0@@1|)) ))))
(assert  (=> true (forall ((Collections__Maps_i._default.eq_map$A@@2 T@U) (Collections__Maps_i._default.eq_map$B@@2 T@U) (|x#0@@4| T@U) (|y#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Collections__Maps_i._default.eq_map$A@@2) TyType) (= (type Collections__Maps_i._default.eq_map$B@@2) TyType)) (= (type |x#0@@4|) (MapType BoxType BoxType))) (= (type |y#0@@2|) (MapType BoxType BoxType))) (or (|Collections____Maps__i.__default.eq__map#canCall| Collections__Maps_i._default.eq_map$A@@2 Collections__Maps_i._default.eq_map$B@@2 (Lit |x#0@@4|) (Lit |y#0@@2|)) (and ($Is |x#0@@4| (TMap Collections__Maps_i._default.eq_map$A@@2 Collections__Maps_i._default.eq_map$B@@2)) ($Is |y#0@@2| (TMap Collections__Maps_i._default.eq_map$A@@2 Collections__Maps_i._default.eq_map$B@@2))))) (and (=> (Collections____Maps__i.__default.eq__map Collections__Maps_i._default.eq_map$A@@2 Collections__Maps_i._default.eq_map$B@@2 (Lit |x#0@@4|) (Lit |y#0@@2|)) (and (forall ((|a#2@@2| T@U) ) (!  (=> (and (= (type |a#2@@2|) BoxType) ($IsBox |a#2@@2| Collections__Maps_i._default.eq_map$A@@2)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| |x#0@@4|) |a#2@@2|)) (U_2_bool (MapType0Select (|Map#Domain| |y#0@@2|) |a#2@@2|))) (=> (U_2_bool (MapType0Select (|Map#Domain| |y#0@@2|) |a#2@@2|)) (U_2_bool (MapType0Select (|Map#Domain| |x#0@@4|) |a#2@@2|))))) :qid |Mapsidfy.9:13| :skolemid |3580| :pattern ( (MapType0Select (|Map#Domain| |y#0@@2|) |a#2@@2|)) :pattern ( (MapType0Select (|Map#Domain| |x#0@@4|) |a#2@@2|)) )) (forall ((|a#3@@4| T@U) ) (!  (=> (and (and (= (type |a#3@@4|) BoxType) ($IsBox |a#3@@4| Collections__Maps_i._default.eq_map$A@@2)) (U_2_bool (MapType0Select (|Map#Domain| |x#0@@4|) |a#3@@4|))) (= (MapType0Select (|Map#Elements| (Lit |x#0@@4|)) |a#3@@4|) (MapType0Select (|Map#Elements| (Lit |y#0@@2|)) |a#3@@4|))) :qid |Mapsidfy.10:13| :skolemid |3581| :pattern ( (MapType0Select (|Map#Elements| |y#0@@2|) |a#3@@4|)) :pattern ( (MapType0Select (|Map#Elements| |x#0@@4|) |a#3@@4|)) :pattern ( (MapType0Select (|Map#Domain| |x#0@@4|) |a#3@@4|)) )))) (=> (and (forall ((|a#2@@3| T@U) ) (!  (=> (and (= (type |a#2@@3|) BoxType) ($IsBox |a#2@@3| Collections__Maps_i._default.eq_map$A@@2)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| |x#0@@4|) |a#2@@3|)) (U_2_bool (MapType0Select (|Map#Domain| |y#0@@2|) |a#2@@3|))) (=> (U_2_bool (MapType0Select (|Map#Domain| |y#0@@2|) |a#2@@3|)) (U_2_bool (MapType0Select (|Map#Domain| |x#0@@4|) |a#2@@3|))))) :qid |Mapsidfy.9:13| :skolemid |3580| :pattern ( (MapType0Select (|Map#Domain| |y#0@@2|) |a#2@@3|)) :pattern ( (MapType0Select (|Map#Domain| |x#0@@4|) |a#2@@3|)) )) (forall ((|a#3@@5| T@U) ) (!  (=> (and (and (= (type |a#3@@5|) BoxType) ($IsBox |a#3@@5| Collections__Maps_i._default.eq_map$A@@2)) (U_2_bool (MapType0Select (|Map#Domain| |x#0@@4|) |a#3@@5|))) (= (MapType0Select (|Map#Elements| (Lit |x#0@@4|)) |a#3@@5|) (MapType0Select (|Map#Elements| (Lit |y#0@@2|)) |a#3@@5|))) :qid |Mapsidfy.10:13| :skolemid |3581| :pattern ( (MapType0Select (|Map#Elements| |y#0@@2|) |a#3@@5|)) :pattern ( (MapType0Select (|Map#Elements| |x#0@@4|) |a#3@@5|)) :pattern ( (MapType0Select (|Map#Domain| |x#0@@4|) |a#3@@5|)) ))) (Collections____Maps__i.__default.eq__map Collections__Maps_i._default.eq_map$A@@2 Collections__Maps_i._default.eq_map$B@@2 (Lit |x#0@@4|) (Lit |y#0@@2|))))) :qid |unknown.0:0| :weight 3 :skolemid |3582| :pattern ( (Collections____Maps__i.__default.eq__map Collections__Maps_i._default.eq_map$A@@2 Collections__Maps_i._default.eq_map$B@@2 (Lit |x#0@@4|) (Lit |y#0@@2|))) ))))
(assert (forall ((arg0@@259 T@U) (arg1@@116 T@U) (arg2@@69 T@U) ) (! (= (type (Collections____Maps__i.__default.domain arg0@@259 arg1@@116 arg2@@69)) (MapType0Type BoxType boolType)) :qid |funType:Collections____Maps__i.__default.domain| :pattern ( (Collections____Maps__i.__default.domain arg0@@259 arg1@@116 arg2@@69)) )))
(assert  (=> true (forall ((Collections__Maps_i._default.domain$U T@U) (Collections__Maps_i._default.domain$V T@U) (|m#0| T@U) ) (!  (=> (and (and (and (= (type Collections__Maps_i._default.domain$U) TyType) (= (type Collections__Maps_i._default.domain$V) TyType)) (= (type |m#0|) (MapType BoxType BoxType))) (or (|Collections____Maps__i.__default.domain#canCall| Collections__Maps_i._default.domain$U Collections__Maps_i._default.domain$V |m#0|) ($Is |m#0| (TMap Collections__Maps_i._default.domain$U Collections__Maps_i._default.domain$V)))) (and (forall ((|i#0@@26| T@U) ) (!  (=> (and (= (type |i#0@@26|) BoxType) ($IsBox |i#0@@26| Collections__Maps_i._default.domain$U)) (and (=> (U_2_bool (MapType0Select (Collections____Maps__i.__default.domain Collections__Maps_i._default.domain$U Collections__Maps_i._default.domain$V |m#0|) |i#0@@26|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0|) |i#0@@26|))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0|) |i#0@@26|)) (U_2_bool (MapType0Select (Collections____Maps__i.__default.domain Collections__Maps_i._default.domain$U Collections__Maps_i._default.domain$V |m#0|) |i#0@@26|))))) :qid |Mapsidfy.14:19| :skolemid |3583| :pattern ( (MapType0Select (|Map#Domain| |m#0|) |i#0@@26|)) :pattern ( (MapType0Select (Collections____Maps__i.__default.domain Collections__Maps_i._default.domain$U Collections__Maps_i._default.domain$V |m#0|) |i#0@@26|)) )) ($Is (Collections____Maps__i.__default.domain Collections__Maps_i._default.domain$U Collections__Maps_i._default.domain$V |m#0|) (TSet Collections__Maps_i._default.domain$U)))) :qid |unknown.0:0| :skolemid |3584| :pattern ( (Collections____Maps__i.__default.domain Collections__Maps_i._default.domain$U Collections__Maps_i._default.domain$V |m#0|)) ))))
(assert (forall ((Collections__Maps_i._default.domain$U@@0 T@U) (Collections__Maps_i._default.domain$V@@0 T@U) (|m#0@@0| T@U) ) (!  (=> (and (and (and (= (type Collections__Maps_i._default.domain$U@@0) TyType) (= (type Collections__Maps_i._default.domain$V@@0) TyType)) (= (type |m#0@@0|) (MapType BoxType BoxType))) ($Is |m#0@@0| (TMap Collections__Maps_i._default.domain$U@@0 Collections__Maps_i._default.domain$V@@0))) (and (=> (|Collections____Maps__i.__default.domain#requires| Collections__Maps_i._default.domain$U@@0 Collections__Maps_i._default.domain$V@@0 |m#0@@0|) true) (=> true (|Collections____Maps__i.__default.domain#requires| Collections__Maps_i._default.domain$U@@0 Collections__Maps_i._default.domain$V@@0 |m#0@@0|)))) :qid |unknown.0:0| :skolemid |3585| :pattern ( (|Collections____Maps__i.__default.domain#requires| Collections__Maps_i._default.domain$U@@0 Collections__Maps_i._default.domain$V@@0 |m#0@@0|)) )))
(assert (forall ((arg0@@260 T@U) (arg1@@117 T@U) ) (! (= (type (|lambda#154| arg0@@260 arg1@@117)) (MapType0Type BoxType boolType)) :qid |funType:lambda#154| :pattern ( (|lambda#154| arg0@@260 arg1@@117)) )))
(assert  (=> true (forall ((Collections__Maps_i._default.domain$U@@1 T@U) (Collections__Maps_i._default.domain$V@@1 T@U) (|m#0@@1| T@U) ) (!  (=> (and (and (and (= (type Collections__Maps_i._default.domain$U@@1) TyType) (= (type Collections__Maps_i._default.domain$V@@1) TyType)) (= (type |m#0@@1|) (MapType BoxType BoxType))) (or (|Collections____Maps__i.__default.domain#canCall| Collections__Maps_i._default.domain$U@@1 Collections__Maps_i._default.domain$V@@1 |m#0@@1|) ($Is |m#0@@1| (TMap Collections__Maps_i._default.domain$U@@1 Collections__Maps_i._default.domain$V@@1)))) (= (Collections____Maps__i.__default.domain Collections__Maps_i._default.domain$U@@1 Collections__Maps_i._default.domain$V@@1 |m#0@@1|) (|lambda#154| Collections__Maps_i._default.domain$U@@1 (|Map#Domain| |m#0@@1|)))) :qid |unknown.0:0| :skolemid |3586| :pattern ( (Collections____Maps__i.__default.domain Collections__Maps_i._default.domain$U@@1 Collections__Maps_i._default.domain$V@@1 |m#0@@1|)) ))))
(assert  (=> true (forall ((Collections__Maps_i._default.domain$U@@2 T@U) (Collections__Maps_i._default.domain$V@@2 T@U) (|m#0@@2| T@U) ) (!  (=> (and (and (and (= (type Collections__Maps_i._default.domain$U@@2) TyType) (= (type Collections__Maps_i._default.domain$V@@2) TyType)) (= (type |m#0@@2|) (MapType BoxType BoxType))) (or (|Collections____Maps__i.__default.domain#canCall| Collections__Maps_i._default.domain$U@@2 Collections__Maps_i._default.domain$V@@2 (Lit |m#0@@2|)) ($Is |m#0@@2| (TMap Collections__Maps_i._default.domain$U@@2 Collections__Maps_i._default.domain$V@@2)))) (= (Collections____Maps__i.__default.domain Collections__Maps_i._default.domain$U@@2 Collections__Maps_i._default.domain$V@@2 (Lit |m#0@@2|)) (|lambda#154| Collections__Maps_i._default.domain$U@@2 (|Map#Domain| |m#0@@2|)))) :qid |unknown.0:0| :weight 3 :skolemid |3587| :pattern ( (Collections____Maps__i.__default.domain Collections__Maps_i._default.domain$U@@2 Collections__Maps_i._default.domain$V@@2 (Lit |m#0@@2|))) ))))
(assert (forall ((arg0@@261 T@U) (arg1@@118 T@U) (arg2@@70 T@U) (arg3@@40 T@U) ) (! (= (type (Collections____Maps__i.__default.union arg0@@261 arg1@@118 arg2@@70 arg3@@40)) (MapType BoxType BoxType)) :qid |funType:Collections____Maps__i.__default.union| :pattern ( (Collections____Maps__i.__default.union arg0@@261 arg1@@118 arg2@@70 arg3@@40)) )))
(assert  (=> true (forall ((Collections__Maps_i._default.union$U T@U) (Collections__Maps_i._default.union$V T@U) (|m#0@@3| T@U) (|m'#0| T@U) ) (!  (=> (and (and (and (and (= (type Collections__Maps_i._default.union$U) TyType) (= (type Collections__Maps_i._default.union$V) TyType)) (= (type |m#0@@3|) (MapType BoxType BoxType))) (= (type |m'#0|) (MapType BoxType BoxType))) (or (|Collections____Maps__i.__default.union#canCall| Collections__Maps_i._default.union$U Collections__Maps_i._default.union$V |m#0@@3| |m'#0|) (and (and ($Is |m#0@@3| (TMap Collections__Maps_i._default.union$U Collections__Maps_i._default.union$V)) ($Is |m'#0| (TMap Collections__Maps_i._default.union$U Collections__Maps_i._default.union$V))) (|Set#Disjoint| (|Map#Domain| |m#0@@3|) (|Map#Domain| |m'#0|))))) (and (and (and (forall ((|i#0@@27| T@U) ) (!  (=> (and (= (type |i#0@@27|) BoxType) ($IsBox |i#0@@27| Collections__Maps_i._default.union$U)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (Collections____Maps__i.__default.union Collections__Maps_i._default.union$U Collections__Maps_i._default.union$V |m#0@@3| |m'#0|)) |i#0@@27|)) (or (U_2_bool (MapType0Select (|Map#Domain| |m#0@@3|) |i#0@@27|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0|) |i#0@@27|)))) (=> (or (U_2_bool (MapType0Select (|Map#Domain| |m#0@@3|) |i#0@@27|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0|) |i#0@@27|))) (U_2_bool (MapType0Select (|Map#Domain| (Collections____Maps__i.__default.union Collections__Maps_i._default.union$U Collections__Maps_i._default.union$V |m#0@@3| |m'#0|)) |i#0@@27|))))) :qid |Mapsidfy.21:19| :skolemid |3588| :pattern ( (MapType0Select (|Map#Domain| |m'#0|) |i#0@@27|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@3|) |i#0@@27|)) :pattern ( (MapType0Select (|Map#Domain| (Collections____Maps__i.__default.union Collections__Maps_i._default.union$U Collections__Maps_i._default.union$V |m#0@@3| |m'#0|)) |i#0@@27|)) )) (forall ((|i#1@@1| T@U) ) (!  (=> (and (and (= (type |i#1@@1|) BoxType) ($IsBox |i#1@@1| Collections__Maps_i._default.union$U)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@3|) |i#1@@1|))) (= (MapType0Select (|Map#Elements| (Collections____Maps__i.__default.union Collections__Maps_i._default.union$U Collections__Maps_i._default.union$V |m#0@@3| |m'#0|)) |i#1@@1|) (MapType0Select (|Map#Elements| |m#0@@3|) |i#1@@1|))) :qid |Mapsidfy.22:19| :skolemid |3589| :pattern ( (MapType0Select (|Map#Elements| |m#0@@3|) |i#1@@1|)) :pattern ( (MapType0Select (|Map#Elements| (Collections____Maps__i.__default.union Collections__Maps_i._default.union$U Collections__Maps_i._default.union$V |m#0@@3| |m'#0|)) |i#1@@1|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@3|) |i#1@@1|)) ))) (forall ((|i#2@@0| T@U) ) (!  (=> (and (and (= (type |i#2@@0|) BoxType) ($IsBox |i#2@@0| Collections__Maps_i._default.union$U)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0|) |i#2@@0|))) (= (MapType0Select (|Map#Elements| (Collections____Maps__i.__default.union Collections__Maps_i._default.union$U Collections__Maps_i._default.union$V |m#0@@3| |m'#0|)) |i#2@@0|) (MapType0Select (|Map#Elements| |m'#0|) |i#2@@0|))) :qid |Mapsidfy.23:19| :skolemid |3590| :pattern ( (MapType0Select (|Map#Elements| |m'#0|) |i#2@@0|)) :pattern ( (MapType0Select (|Map#Elements| (Collections____Maps__i.__default.union Collections__Maps_i._default.union$U Collections__Maps_i._default.union$V |m#0@@3| |m'#0|)) |i#2@@0|)) :pattern ( (MapType0Select (|Map#Domain| |m'#0|) |i#2@@0|)) ))) ($Is (Collections____Maps__i.__default.union Collections__Maps_i._default.union$U Collections__Maps_i._default.union$V |m#0@@3| |m'#0|) (TMap Collections__Maps_i._default.union$U Collections__Maps_i._default.union$V)))) :qid |unknown.0:0| :skolemid |3591| :pattern ( (Collections____Maps__i.__default.union Collections__Maps_i._default.union$U Collections__Maps_i._default.union$V |m#0@@3| |m'#0|)) ))))
(assert (forall ((Collections__Maps_i._default.union$U@@0 T@U) (Collections__Maps_i._default.union$V@@0 T@U) (|m#0@@4| T@U) (|m'#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Collections__Maps_i._default.union$U@@0) TyType) (= (type Collections__Maps_i._default.union$V@@0) TyType)) (= (type |m#0@@4|) (MapType BoxType BoxType))) (= (type |m'#0@@0|) (MapType BoxType BoxType))) (and ($Is |m#0@@4| (TMap Collections__Maps_i._default.union$U@@0 Collections__Maps_i._default.union$V@@0)) ($Is |m'#0@@0| (TMap Collections__Maps_i._default.union$U@@0 Collections__Maps_i._default.union$V@@0)))) (and (=> (|Collections____Maps__i.__default.union#requires| Collections__Maps_i._default.union$U@@0 Collections__Maps_i._default.union$V@@0 |m#0@@4| |m'#0@@0|) (|Set#Disjoint| (|Map#Domain| |m#0@@4|) (|Map#Domain| |m'#0@@0|))) (=> (|Set#Disjoint| (|Map#Domain| |m#0@@4|) (|Map#Domain| |m'#0@@0|)) (|Collections____Maps__i.__default.union#requires| Collections__Maps_i._default.union$U@@0 Collections__Maps_i._default.union$V@@0 |m#0@@4| |m'#0@@0|)))) :qid |unknown.0:0| :skolemid |3592| :pattern ( (|Collections____Maps__i.__default.union#requires| Collections__Maps_i._default.union$U@@0 Collections__Maps_i._default.union$V@@0 |m#0@@4| |m'#0@@0|)) )))
(assert  (and (forall ((arg0@@262 T@U) (arg1@@119 T@U) (arg2@@71 T@U) ) (! (= (type (|lambda#156| arg0@@262 arg1@@119 arg2@@71)) (MapType0Type BoxType boolType)) :qid |funType:lambda#156| :pattern ( (|lambda#156| arg0@@262 arg1@@119 arg2@@71)) )) (forall ((arg0@@263 T@U) (arg1@@120 T@U) (arg2@@72 T@U) ) (! (= (type (|lambda#157| arg0@@263 arg1@@120 arg2@@72)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#157| :pattern ( (|lambda#157| arg0@@263 arg1@@120 arg2@@72)) ))))
(assert  (=> true (forall ((Collections__Maps_i._default.union$U@@1 T@U) (Collections__Maps_i._default.union$V@@1 T@U) (|m#0@@5| T@U) (|m'#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Collections__Maps_i._default.union$U@@1) TyType) (= (type Collections__Maps_i._default.union$V@@1) TyType)) (= (type |m#0@@5|) (MapType BoxType BoxType))) (= (type |m'#0@@1|) (MapType BoxType BoxType))) (or (|Collections____Maps__i.__default.union#canCall| Collections__Maps_i._default.union$U@@1 Collections__Maps_i._default.union$V@@1 |m#0@@5| |m'#0@@1|) (and (and ($Is |m#0@@5| (TMap Collections__Maps_i._default.union$U@@1 Collections__Maps_i._default.union$V@@1)) ($Is |m'#0@@1| (TMap Collections__Maps_i._default.union$U@@1 Collections__Maps_i._default.union$V@@1))) (|Set#Disjoint| (|Map#Domain| |m#0@@5|) (|Map#Domain| |m'#0@@1|))))) (and (and (|Collections____Maps__i.__default.domain#canCall| Collections__Maps_i._default.union$U@@1 Collections__Maps_i._default.union$V@@1 |m#0@@5|) (|Collections____Maps__i.__default.domain#canCall| Collections__Maps_i._default.union$U@@1 Collections__Maps_i._default.union$V@@1 |m'#0@@1|)) (= (Collections____Maps__i.__default.union Collections__Maps_i._default.union$U@@1 Collections__Maps_i._default.union$V@@1 |m#0@@5| |m'#0@@1|) (|Map#Glue| (|lambda#156| Collections__Maps_i._default.union$U@@1 (Collections____Maps__i.__default.domain Collections__Maps_i._default.union$U@@1 Collections__Maps_i._default.union$V@@1 |m#0@@5|) (Collections____Maps__i.__default.domain Collections__Maps_i._default.union$U@@1 Collections__Maps_i._default.union$V@@1 |m'#0@@1|)) (|lambda#157| (|Map#Domain| |m#0@@5|) (|Map#Elements| |m#0@@5|) (|Map#Elements| |m'#0@@1|)) (TMap Collections__Maps_i._default.union$U@@1 Collections__Maps_i._default.union$V@@1))))) :qid |unknown.0:0| :skolemid |3593| :pattern ( (Collections____Maps__i.__default.union Collections__Maps_i._default.union$U@@1 Collections__Maps_i._default.union$V@@1 |m#0@@5| |m'#0@@1|)) ))))
(assert  (and (forall ((arg0@@264 T@U) (arg1@@121 T@U) (arg2@@73 T@U) ) (! (= (type (|lambda#158| arg0@@264 arg1@@121 arg2@@73)) (MapType0Type BoxType boolType)) :qid |funType:lambda#158| :pattern ( (|lambda#158| arg0@@264 arg1@@121 arg2@@73)) )) (forall ((arg0@@265 T@U) (arg1@@122 T@U) (arg2@@74 T@U) ) (! (= (type (|lambda#159| arg0@@265 arg1@@122 arg2@@74)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#159| :pattern ( (|lambda#159| arg0@@265 arg1@@122 arg2@@74)) ))))
(assert  (=> true (forall ((Collections__Maps_i._default.union$U@@2 T@U) (Collections__Maps_i._default.union$V@@2 T@U) (|m#0@@6| T@U) (|m'#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Collections__Maps_i._default.union$U@@2) TyType) (= (type Collections__Maps_i._default.union$V@@2) TyType)) (= (type |m#0@@6|) (MapType BoxType BoxType))) (= (type |m'#0@@2|) (MapType BoxType BoxType))) (or (|Collections____Maps__i.__default.union#canCall| Collections__Maps_i._default.union$U@@2 Collections__Maps_i._default.union$V@@2 (Lit |m#0@@6|) (Lit |m'#0@@2|)) (and (and ($Is |m#0@@6| (TMap Collections__Maps_i._default.union$U@@2 Collections__Maps_i._default.union$V@@2)) ($Is |m'#0@@2| (TMap Collections__Maps_i._default.union$U@@2 Collections__Maps_i._default.union$V@@2))) (|Set#Disjoint| (|Map#Domain| (Lit |m#0@@6|)) (|Map#Domain| (Lit |m'#0@@2|)))))) (and (and (|Collections____Maps__i.__default.domain#canCall| Collections__Maps_i._default.union$U@@2 Collections__Maps_i._default.union$V@@2 (Lit |m#0@@6|)) (|Collections____Maps__i.__default.domain#canCall| Collections__Maps_i._default.union$U@@2 Collections__Maps_i._default.union$V@@2 (Lit |m'#0@@2|))) (= (Collections____Maps__i.__default.union Collections__Maps_i._default.union$U@@2 Collections__Maps_i._default.union$V@@2 (Lit |m#0@@6|) (Lit |m'#0@@2|)) (|Map#Glue| (|lambda#158| Collections__Maps_i._default.union$U@@2 (Lit (Collections____Maps__i.__default.domain Collections__Maps_i._default.union$U@@2 Collections__Maps_i._default.union$V@@2 (Lit |m#0@@6|))) (Lit (Collections____Maps__i.__default.domain Collections__Maps_i._default.union$U@@2 Collections__Maps_i._default.union$V@@2 (Lit |m'#0@@2|)))) (|lambda#159| (|Map#Domain| |m#0@@6|) (|Map#Elements| (Lit |m#0@@6|)) (|Map#Elements| (Lit |m'#0@@2|))) (TMap Collections__Maps_i._default.union$U@@2 Collections__Maps_i._default.union$V@@2))))) :qid |unknown.0:0| :weight 3 :skolemid |3594| :pattern ( (Collections____Maps__i.__default.union Collections__Maps_i._default.union$U@@2 Collections__Maps_i._default.union$V@@2 (Lit |m#0@@6|) (Lit |m'#0@@2|))) ))))
(assert (forall ((arg0@@266 T@U) (arg1@@123 T@U) (arg2@@75 T@U) (arg3@@41 T@U) ) (! (= (type (Collections____Maps__i.__default.RemoveElt arg0@@266 arg1@@123 arg2@@75 arg3@@41)) (MapType BoxType BoxType)) :qid |funType:Collections____Maps__i.__default.RemoveElt| :pattern ( (Collections____Maps__i.__default.RemoveElt arg0@@266 arg1@@123 arg2@@75 arg3@@41)) )))
(assert  (=> true (forall ((Collections__Maps_i._default.RemoveElt$U T@U) (Collections__Maps_i._default.RemoveElt$V T@U) (|m#0@@7| T@U) (|elt#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Collections__Maps_i._default.RemoveElt$U) TyType) (= (type Collections__Maps_i._default.RemoveElt$V) TyType)) (= (type |m#0@@7|) (MapType BoxType BoxType))) (= (type |elt#0@@4|) BoxType)) (or (|Collections____Maps__i.__default.RemoveElt#canCall| Collections__Maps_i._default.RemoveElt$U Collections__Maps_i._default.RemoveElt$V |m#0@@7| |elt#0@@4|) (and (and ($Is |m#0@@7| (TMap Collections__Maps_i._default.RemoveElt$U Collections__Maps_i._default.RemoveElt$V)) ($IsBox |elt#0@@4| Collections__Maps_i._default.RemoveElt$U)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@7|) |elt#0@@4|))))) (and (and (and (= (|Map#Card| (Collections____Maps__i.__default.RemoveElt Collections__Maps_i._default.RemoveElt$U Collections__Maps_i._default.RemoveElt$V |m#0@@7| |elt#0@@4|)) (- (|Map#Card| |m#0@@7|) 1)) (not (U_2_bool (MapType0Select (|Map#Domain| (Collections____Maps__i.__default.RemoveElt Collections__Maps_i._default.RemoveElt$U Collections__Maps_i._default.RemoveElt$V |m#0@@7| |elt#0@@4|)) |elt#0@@4|)))) (forall ((|elt'#0| T@U) ) (!  (=> (and (= (type |elt'#0|) BoxType) ($IsBox |elt'#0| Collections__Maps_i._default.RemoveElt$U)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (Collections____Maps__i.__default.RemoveElt Collections__Maps_i._default.RemoveElt$U Collections__Maps_i._default.RemoveElt$V |m#0@@7| |elt#0@@4|)) |elt'#0|)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@7|) |elt'#0|)) (not (= |elt'#0| |elt#0@@4|)))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@7|) |elt'#0|)) (not (= |elt'#0| |elt#0@@4|))) (U_2_bool (MapType0Select (|Map#Domain| (Collections____Maps__i.__default.RemoveElt Collections__Maps_i._default.RemoveElt$U Collections__Maps_i._default.RemoveElt$V |m#0@@7| |elt#0@@4|)) |elt'#0|))))) :qid |Mapsidfy.33:20| :skolemid |3595| :pattern ( (MapType0Select (|Map#Domain| |m#0@@7|) |elt'#0|)) :pattern ( (MapType0Select (|Map#Domain| (Collections____Maps__i.__default.RemoveElt Collections__Maps_i._default.RemoveElt$U Collections__Maps_i._default.RemoveElt$V |m#0@@7| |elt#0@@4|)) |elt'#0|)) ))) ($Is (Collections____Maps__i.__default.RemoveElt Collections__Maps_i._default.RemoveElt$U Collections__Maps_i._default.RemoveElt$V |m#0@@7| |elt#0@@4|) (TMap Collections__Maps_i._default.RemoveElt$U Collections__Maps_i._default.RemoveElt$V)))) :qid |unknown.0:0| :skolemid |3596| :pattern ( (Collections____Maps__i.__default.RemoveElt Collections__Maps_i._default.RemoveElt$U Collections__Maps_i._default.RemoveElt$V |m#0@@7| |elt#0@@4|)) ))))
(assert (forall ((Collections__Maps_i._default.RemoveElt$U@@0 T@U) (Collections__Maps_i._default.RemoveElt$V@@0 T@U) (|m#0@@8| T@U) (|elt#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Collections__Maps_i._default.RemoveElt$U@@0) TyType) (= (type Collections__Maps_i._default.RemoveElt$V@@0) TyType)) (= (type |m#0@@8|) (MapType BoxType BoxType))) (= (type |elt#0@@5|) BoxType)) (and ($Is |m#0@@8| (TMap Collections__Maps_i._default.RemoveElt$U@@0 Collections__Maps_i._default.RemoveElt$V@@0)) ($IsBox |elt#0@@5| Collections__Maps_i._default.RemoveElt$U@@0))) (and (=> (|Collections____Maps__i.__default.RemoveElt#requires| Collections__Maps_i._default.RemoveElt$U@@0 Collections__Maps_i._default.RemoveElt$V@@0 |m#0@@8| |elt#0@@5|) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@8|) |elt#0@@5|))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@8|) |elt#0@@5|)) (|Collections____Maps__i.__default.RemoveElt#requires| Collections__Maps_i._default.RemoveElt$U@@0 Collections__Maps_i._default.RemoveElt$V@@0 |m#0@@8| |elt#0@@5|)))) :qid |unknown.0:0| :skolemid |3597| :pattern ( (|Collections____Maps__i.__default.RemoveElt#requires| Collections__Maps_i._default.RemoveElt$U@@0 Collections__Maps_i._default.RemoveElt$V@@0 |m#0@@8| |elt#0@@5|)) )))
(assert  (and (forall ((arg0@@267 T@U) (arg1@@124 T@U) (arg2@@76 T@U) ) (! (= (type (|lambda#160| arg0@@267 arg1@@124 arg2@@76)) (MapType0Type BoxType boolType)) :qid |funType:lambda#160| :pattern ( (|lambda#160| arg0@@267 arg1@@124 arg2@@76)) )) (forall ((arg0@@268 T@U) ) (! (= (type (|lambda#161| arg0@@268)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#161| :pattern ( (|lambda#161| arg0@@268)) ))))
(assert  (=> true (forall ((Collections__Maps_i._default.RemoveElt$U@@1 T@U) (Collections__Maps_i._default.RemoveElt$V@@1 T@U) (|m#0@@9| T@U) (|elt#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Collections__Maps_i._default.RemoveElt$U@@1) TyType) (= (type Collections__Maps_i._default.RemoveElt$V@@1) TyType)) (= (type |m#0@@9|) (MapType BoxType BoxType))) (= (type |elt#0@@6|) BoxType)) (or (|Collections____Maps__i.__default.RemoveElt#canCall| Collections__Maps_i._default.RemoveElt$U@@1 Collections__Maps_i._default.RemoveElt$V@@1 |m#0@@9| |elt#0@@6|) (and (and ($Is |m#0@@9| (TMap Collections__Maps_i._default.RemoveElt$U@@1 Collections__Maps_i._default.RemoveElt$V@@1)) ($IsBox |elt#0@@6| Collections__Maps_i._default.RemoveElt$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@9|) |elt#0@@6|))))) (= (Collections____Maps__i.__default.RemoveElt Collections__Maps_i._default.RemoveElt$U@@1 Collections__Maps_i._default.RemoveElt$V@@1 |m#0@@9| |elt#0@@6|) (let ((|m'#0@@3| (|Map#Glue| (|lambda#160| Collections__Maps_i._default.RemoveElt$U@@1 (|Map#Domain| |m#0@@9|) |elt#0@@6|) (|lambda#161| (|Map#Elements| |m#0@@9|)) (TMap Collections__Maps_i._default.RemoveElt$U@@1 Collections__Maps_i._default.RemoveElt$V@@1)))) |m'#0@@3|))) :qid |unknown.0:0| :skolemid |3598| :pattern ( (Collections____Maps__i.__default.RemoveElt Collections__Maps_i._default.RemoveElt$U@@1 Collections__Maps_i._default.RemoveElt$V@@1 |m#0@@9| |elt#0@@6|)) ))))
(assert  (=> true (forall ((Collections__Maps_i._default.RemoveElt$U@@2 T@U) (Collections__Maps_i._default.RemoveElt$V@@2 T@U) (|m#0@@10| T@U) (|elt#0@@7| T@U) ) (!  (=> (and (and (and (and (= (type Collections__Maps_i._default.RemoveElt$U@@2) TyType) (= (type Collections__Maps_i._default.RemoveElt$V@@2) TyType)) (= (type |m#0@@10|) (MapType BoxType BoxType))) (= (type |elt#0@@7|) BoxType)) (or (|Collections____Maps__i.__default.RemoveElt#canCall| Collections__Maps_i._default.RemoveElt$U@@2 Collections__Maps_i._default.RemoveElt$V@@2 (Lit |m#0@@10|) |elt#0@@7|) (and (and ($Is |m#0@@10| (TMap Collections__Maps_i._default.RemoveElt$U@@2 Collections__Maps_i._default.RemoveElt$V@@2)) ($IsBox |elt#0@@7| Collections__Maps_i._default.RemoveElt$U@@2)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@10|) |elt#0@@7|))))) (= (Collections____Maps__i.__default.RemoveElt Collections__Maps_i._default.RemoveElt$U@@2 Collections__Maps_i._default.RemoveElt$V@@2 (Lit |m#0@@10|) |elt#0@@7|) (let ((|m'#1| (|Map#Glue| (|lambda#160| Collections__Maps_i._default.RemoveElt$U@@2 (|Map#Domain| |m#0@@10|) |elt#0@@7|) (|lambda#161| (|Map#Elements| (Lit |m#0@@10|))) (TMap Collections__Maps_i._default.RemoveElt$U@@2 Collections__Maps_i._default.RemoveElt$V@@2)))) |m'#1|))) :qid |unknown.0:0| :weight 3 :skolemid |3599| :pattern ( (Collections____Maps__i.__default.RemoveElt Collections__Maps_i._default.RemoveElt$U@@2 Collections__Maps_i._default.RemoveElt$V@@2 (Lit |m#0@@10|) |elt#0@@7|)) ))))
(assert  (=> true (forall ((Collections__Maps_i._default.RemoveElt$U@@3 T@U) (Collections__Maps_i._default.RemoveElt$V@@3 T@U) (|m#0@@11| T@U) (|elt#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type Collections__Maps_i._default.RemoveElt$U@@3) TyType) (= (type Collections__Maps_i._default.RemoveElt$V@@3) TyType)) (= (type |m#0@@11|) (MapType BoxType BoxType))) (= (type |elt#0@@8|) BoxType)) (or (|Collections____Maps__i.__default.RemoveElt#canCall| Collections__Maps_i._default.RemoveElt$U@@3 Collections__Maps_i._default.RemoveElt$V@@3 (Lit |m#0@@11|) (Lit |elt#0@@8|)) (and (and ($Is |m#0@@11| (TMap Collections__Maps_i._default.RemoveElt$U@@3 Collections__Maps_i._default.RemoveElt$V@@3)) ($IsBox |elt#0@@8| Collections__Maps_i._default.RemoveElt$U@@3)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@11|) |elt#0@@8|))))) (= (Collections____Maps__i.__default.RemoveElt Collections__Maps_i._default.RemoveElt$U@@3 Collections__Maps_i._default.RemoveElt$V@@3 (Lit |m#0@@11|) (Lit |elt#0@@8|)) (let ((|m'#2| (|Map#Glue| (|lambda#160| Collections__Maps_i._default.RemoveElt$U@@3 (|Map#Domain| |m#0@@11|) |elt#0@@8|) (|lambda#161| (|Map#Elements| (Lit |m#0@@11|))) (TMap Collections__Maps_i._default.RemoveElt$U@@3 Collections__Maps_i._default.RemoveElt$V@@3)))) |m'#2|))) :qid |unknown.0:0| :weight 3 :skolemid |3600| :pattern ( (Collections____Maps__i.__default.RemoveElt Collections__Maps_i._default.RemoveElt$U@@3 Collections__Maps_i._default.RemoveElt$V@@3 (Lit |m#0@@11|) (Lit |elt#0@@8|))) ))))
(assert (= (type Tclass.SeqComparison.__default) TyType))
(assert (= (Tag Tclass.SeqComparison.__default) Tagclass.SeqComparison.__default))
(assert (forall ((bx@@96 T@U) ) (!  (=> (and (= (type bx@@96) BoxType) ($IsBox bx@@96 Tclass.SeqComparison.__default)) (and (= ($Box ($Unbox refType bx@@96)) bx@@96) ($Is ($Unbox refType bx@@96) Tclass.SeqComparison.__default))) :qid |unknown.0:0| :skolemid |3601| :pattern ( ($IsBox bx@@96 Tclass.SeqComparison.__default)) )))
(assert (forall (($o@@15 T@U) ) (!  (=> (= (type $o@@15) refType) (and (=> ($Is $o@@15 Tclass.SeqComparison.__default) (or (= $o@@15 null) (= (dtype $o@@15) Tclass.SeqComparison.__default))) (=> (or (= $o@@15 null) (= (dtype $o@@15) Tclass.SeqComparison.__default)) ($Is $o@@15 Tclass.SeqComparison.__default)))) :qid |unknown.0:0| :skolemid |3602| :pattern ( ($Is $o@@15 Tclass.SeqComparison.__default)) )))
(assert (forall (($o@@16 T@U) ($h@@68 T@U) ) (!  (=> (and (= (type $o@@16) refType) (= (type $h@@68) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@16 Tclass.SeqComparison.__default $h@@68) (or (= $o@@16 null) (U_2_bool (MapType1Select (MapType0Select $h@@68 $o@@16) alloc)))) (=> (or (= $o@@16 null) (U_2_bool (MapType1Select (MapType0Select $h@@68 $o@@16) alloc))) ($IsAlloc $o@@16 Tclass.SeqComparison.__default $h@@68)))) :qid |unknown.0:0| :skolemid |3603| :pattern ( ($IsAlloc $o@@16 Tclass.SeqComparison.__default $h@@68)) )))
(assert (forall (($ly@@71 T@U) (|a#0@@6| T@U) (|b#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@71) LayerTypeType) (= (type |a#0@@6|) (SeqType BoxType))) (= (type |b#0@@1|) (SeqType BoxType))) (and (=> (SeqComparison.__default.lte ($LS $ly@@71) |a#0@@6| |b#0@@1|) (SeqComparison.__default.lte $ly@@71 |a#0@@6| |b#0@@1|)) (=> (SeqComparison.__default.lte $ly@@71 |a#0@@6| |b#0@@1|) (SeqComparison.__default.lte ($LS $ly@@71) |a#0@@6| |b#0@@1|)))) :qid |SeqCompa.9:23| :skolemid |3604| :pattern ( (SeqComparison.__default.lte ($LS $ly@@71) |a#0@@6| |b#0@@1|)) )))
(assert (forall (($ly@@72 T@U) (|a#0@@7| T@U) (|b#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@72) LayerTypeType) (= (type |a#0@@7|) (SeqType BoxType))) (= (type |b#0@@2|) (SeqType BoxType))) (and (=> (SeqComparison.__default.lte $ly@@72 |a#0@@7| |b#0@@2|) (SeqComparison.__default.lte $LZ |a#0@@7| |b#0@@2|)) (=> (SeqComparison.__default.lte $LZ |a#0@@7| |b#0@@2|) (SeqComparison.__default.lte $ly@@72 |a#0@@7| |b#0@@2|)))) :qid |SeqCompa.9:23| :skolemid |3605| :pattern ( (SeqComparison.__default.lte (AsFuelBottom $ly@@72) |a#0@@7| |b#0@@2|)) )))
(assert  (=> true (forall (($ly@@73 T@U) (|a#0@@8| T@U) (|b#0@@3| T@U) ) (!  (=> (and (and (and (= (type $ly@@73) LayerTypeType) (= (type |a#0@@8|) (SeqType BoxType))) (= (type |b#0@@3|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| |a#0@@8| |b#0@@3|) (and ($Is |a#0@@8| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@3| (TSeq Tclass.NativeTypes.byte))))) true) :qid |SeqCompa.9:23| :skolemid |3606| :pattern ( (SeqComparison.__default.lte $ly@@73 |a#0@@8| |b#0@@3|)) ))))
(assert (forall (($ly@@74 T@U) (|a#0@@9| T@U) (|b#0@@4| T@U) ) (!  (=> (and (and (and (= (type $ly@@74) LayerTypeType) (= (type |a#0@@9|) (SeqType BoxType))) (= (type |b#0@@4|) (SeqType BoxType))) (and ($Is |a#0@@9| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@4| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|SeqComparison.__default.lte#requires| $ly@@74 |a#0@@9| |b#0@@4|) true) (=> true (|SeqComparison.__default.lte#requires| $ly@@74 |a#0@@9| |b#0@@4|)))) :qid |SeqCompa.9:23| :skolemid |3607| :pattern ( (|SeqComparison.__default.lte#requires| $ly@@74 |a#0@@9| |b#0@@4|)) )))
(assert  (=> true (forall (($ly@@75 T@U) (|a#0@@10| T@U) (|b#0@@5| T@U) ) (!  (=> (and (and (and (= (type $ly@@75) LayerTypeType) (= (type |a#0@@10|) (SeqType BoxType))) (= (type |b#0@@5|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| |a#0@@10| |b#0@@5|) (and ($Is |a#0@@10| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@5| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| |a#0@@10|) (LitInt 0))) (=> (not (= (|Seq#Length| |b#0@@5|) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |b#0@@5| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@10| (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |a#0@@10| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@5| (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (|Seq#Drop| |a#0@@10| (LitInt 1)) (|Seq#Drop| |b#0@@5| (LitInt 1))))))) (and (=> (SeqComparison.__default.lte ($LS $ly@@75) |a#0@@10| |b#0@@5|) (ite (= (|Seq#Length| |a#0@@10|) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@5|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| |a#0@@10| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@5| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@5| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@10| (LitInt 0))))) false (SeqComparison.__default.lte $ly@@75 (|Seq#Drop| |a#0@@10| (LitInt 1)) (|Seq#Drop| |b#0@@5| (LitInt 1)))))))) (=> (ite (= (|Seq#Length| |a#0@@10|) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@5|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| |a#0@@10| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@5| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@5| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@10| (LitInt 0))))) false (SeqComparison.__default.lte $ly@@75 (|Seq#Drop| |a#0@@10| (LitInt 1)) (|Seq#Drop| |b#0@@5| (LitInt 1))))))) (SeqComparison.__default.lte ($LS $ly@@75) |a#0@@10| |b#0@@5|))))) :qid |SeqCompa.9:23| :skolemid |3608| :pattern ( (SeqComparison.__default.lte ($LS $ly@@75) |a#0@@10| |b#0@@5|)) ))))
(assert  (=> true (forall (($ly@@76 T@U) (|a#0@@11| T@U) (|b#0@@6| T@U) ) (!  (=> (and (and (and (= (type $ly@@76) LayerTypeType) (= (type |a#0@@11|) (SeqType BoxType))) (= (type |b#0@@6|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| (Lit |a#0@@11|) |b#0@@6|) (and ($Is |a#0@@11| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@6| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@11|)) (LitInt 0))) (=> (not (= (|Seq#Length| |b#0@@6|) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |b#0@@6| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@11|) (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@11|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@6| (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (Lit (|Seq#Drop| (Lit |a#0@@11|) (LitInt 1))) (|Seq#Drop| |b#0@@6| (LitInt 1))))))) (and (=> (SeqComparison.__default.lte ($LS $ly@@76) (Lit |a#0@@11|) |b#0@@6|) (ite (= (|Seq#Length| (Lit |a#0@@11|)) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@6|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@11|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@6| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@6| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@11|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@76) (Lit (|Seq#Drop| (Lit |a#0@@11|) (LitInt 1))) (|Seq#Drop| |b#0@@6| (LitInt 1)))))))) (=> (ite (= (|Seq#Length| (Lit |a#0@@11|)) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@6|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@11|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@6| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@6| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@11|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@76) (Lit (|Seq#Drop| (Lit |a#0@@11|) (LitInt 1))) (|Seq#Drop| |b#0@@6| (LitInt 1))))))) (SeqComparison.__default.lte ($LS $ly@@76) (Lit |a#0@@11|) |b#0@@6|))))) :qid |SeqCompa.9:23| :weight 3 :skolemid |3609| :pattern ( (SeqComparison.__default.lte ($LS $ly@@76) (Lit |a#0@@11|) |b#0@@6|)) ))))
(assert  (=> true (forall (($ly@@77 T@U) (|a#0@@12| T@U) (|b#0@@7| T@U) ) (!  (=> (and (and (and (= (type $ly@@77) LayerTypeType) (= (type |a#0@@12|) (SeqType BoxType))) (= (type |b#0@@7|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| (Lit |a#0@@12|) (Lit |b#0@@7|)) (and ($Is |a#0@@12| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@7| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@12|)) (LitInt 0))) (=> (not (= (|Seq#Length| (Lit |b#0@@7|)) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@7|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@12|) (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@12|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@7|) (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (Lit (|Seq#Drop| (Lit |a#0@@12|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@7|) (LitInt 1)))))))) (and (=> (SeqComparison.__default.lte ($LS $ly@@77) (Lit |a#0@@12|) (Lit |b#0@@7|)) (ite (= (|Seq#Length| (Lit |a#0@@12|)) (LitInt 0)) true (ite (= (|Seq#Length| (Lit |b#0@@7|)) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@12|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@7|) (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@7|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@12|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@77) (Lit (|Seq#Drop| (Lit |a#0@@12|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@7|) (LitInt 1))))))))) (=> (ite (= (|Seq#Length| (Lit |a#0@@12|)) (LitInt 0)) true (ite (= (|Seq#Length| (Lit |b#0@@7|)) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@12|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@7|) (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@7|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@12|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@77) (Lit (|Seq#Drop| (Lit |a#0@@12|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@7|) (LitInt 1)))))))) (SeqComparison.__default.lte ($LS $ly@@77) (Lit |a#0@@12|) (Lit |b#0@@7|)))))) :qid |SeqCompa.9:23| :weight 3 :skolemid |3610| :pattern ( (SeqComparison.__default.lte ($LS $ly@@77) (Lit |a#0@@12|) (Lit |b#0@@7|))) ))))
(assert  (=> true (forall ((|a#0@@13| T@U) (|b#0@@8| T@U) ) (!  (=> (and (and (= (type |a#0@@13|) (SeqType BoxType)) (= (type |b#0@@8|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| |a#0@@13| |b#0@@8|) (and ($Is |a#0@@13| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@8| (TSeq Tclass.NativeTypes.byte))))) true) :qid |SeqCompa.25:16| :skolemid |3611| :pattern ( (SeqComparison.__default.lt |a#0@@13| |b#0@@8|)) ))))
(assert (forall ((|a#0@@14| T@U) (|b#0@@9| T@U) ) (!  (=> (and (and (= (type |a#0@@14|) (SeqType BoxType)) (= (type |b#0@@9|) (SeqType BoxType))) (and ($Is |a#0@@14| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@9| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|SeqComparison.__default.lt#requires| |a#0@@14| |b#0@@9|) true) (=> true (|SeqComparison.__default.lt#requires| |a#0@@14| |b#0@@9|)))) :qid |SeqCompa.25:16| :skolemid |3612| :pattern ( (|SeqComparison.__default.lt#requires| |a#0@@14| |b#0@@9|)) )))
(assert (= (type StartFuel_SeqComparison._default.lte) LayerTypeType))
(assert  (=> true (forall ((|a#0@@15| T@U) (|b#0@@10| T@U) ) (!  (=> (and (and (= (type |a#0@@15|) (SeqType BoxType)) (= (type |b#0@@10|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| |a#0@@15| |b#0@@10|) (and ($Is |a#0@@15| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@10| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| |a#0@@15| |b#0@@10|) (and (=> (SeqComparison.__default.lt |a#0@@15| |b#0@@10|) (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@15| |b#0@@10|) (not (|Seq#Equal| |a#0@@15| |b#0@@10|)))) (=> (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@15| |b#0@@10|) (not (|Seq#Equal| |a#0@@15| |b#0@@10|))) (SeqComparison.__default.lt |a#0@@15| |b#0@@10|))))) :qid |SeqCompa.25:16| :skolemid |3613| :pattern ( (SeqComparison.__default.lt |a#0@@15| |b#0@@10|)) ))))
(assert  (=> true (forall ((|a#0@@16| T@U) (|b#0@@11| T@U) ) (!  (=> (and (and (= (type |a#0@@16|) (SeqType BoxType)) (= (type |b#0@@11|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| (Lit |a#0@@16|) (Lit |b#0@@11|)) (and ($Is |a#0@@16| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@11| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| (Lit |a#0@@16|) (Lit |b#0@@11|)) (and (=> (SeqComparison.__default.lt (Lit |a#0@@16|) (Lit |b#0@@11|)) (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@16|) (Lit |b#0@@11|)) (not (|Seq#Equal| |a#0@@16| |b#0@@11|)))) (=> (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@16|) (Lit |b#0@@11|)) (not (|Seq#Equal| |a#0@@16| |b#0@@11|))) (SeqComparison.__default.lt (Lit |a#0@@16|) (Lit |b#0@@11|)))))) :qid |SeqCompa.25:16| :weight 3 :skolemid |3614| :pattern ( (SeqComparison.__default.lt (Lit |a#0@@16|) (Lit |b#0@@11|))) ))))
(assert (= (type Tclass.NativeArrays.__default) TyType))
(assert (= (Tag Tclass.NativeArrays.__default) Tagclass.NativeArrays.__default))
(assert (forall ((bx@@97 T@U) ) (!  (=> (and (= (type bx@@97) BoxType) ($IsBox bx@@97 Tclass.NativeArrays.__default)) (and (= ($Box ($Unbox refType bx@@97)) bx@@97) ($Is ($Unbox refType bx@@97) Tclass.NativeArrays.__default))) :qid |unknown.0:0| :skolemid |3615| :pattern ( ($IsBox bx@@97 Tclass.NativeArrays.__default)) )))
(assert (forall (($o@@17 T@U) ) (!  (=> (= (type $o@@17) refType) (and (=> ($Is $o@@17 Tclass.NativeArrays.__default) (or (= $o@@17 null) (= (dtype $o@@17) Tclass.NativeArrays.__default))) (=> (or (= $o@@17 null) (= (dtype $o@@17) Tclass.NativeArrays.__default)) ($Is $o@@17 Tclass.NativeArrays.__default)))) :qid |unknown.0:0| :skolemid |3616| :pattern ( ($Is $o@@17 Tclass.NativeArrays.__default)) )))
(assert (forall (($o@@18 T@U) ($h@@69 T@U) ) (!  (=> (and (= (type $o@@18) refType) (= (type $h@@69) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@18 Tclass.NativeArrays.__default $h@@69) (or (= $o@@18 null) (U_2_bool (MapType1Select (MapType0Select $h@@69 $o@@18) alloc)))) (=> (or (= $o@@18 null) (U_2_bool (MapType1Select (MapType0Select $h@@69 $o@@18) alloc))) ($IsAlloc $o@@18 Tclass.NativeArrays.__default $h@@69)))) :qid |unknown.0:0| :skolemid |3617| :pattern ( ($IsAlloc $o@@18 Tclass.NativeArrays.__default $h@@69)) )))
(assert (= (type Tclass.Collections____Seqs__i.__default) TyType))
(assert (= (Tag Tclass.Collections____Seqs__i.__default) Tagclass.Collections____Seqs__i.__default))
(assert (forall ((bx@@98 T@U) ) (!  (=> (and (= (type bx@@98) BoxType) ($IsBox bx@@98 Tclass.Collections____Seqs__i.__default)) (and (= ($Box ($Unbox refType bx@@98)) bx@@98) ($Is ($Unbox refType bx@@98) Tclass.Collections____Seqs__i.__default))) :qid |unknown.0:0| :skolemid |3621| :pattern ( ($IsBox bx@@98 Tclass.Collections____Seqs__i.__default)) )))
(assert (forall (($o@@19 T@U) ) (!  (=> (= (type $o@@19) refType) (and (=> ($Is $o@@19 Tclass.Collections____Seqs__i.__default) (or (= $o@@19 null) (= (dtype $o@@19) Tclass.Collections____Seqs__i.__default))) (=> (or (= $o@@19 null) (= (dtype $o@@19) Tclass.Collections____Seqs__i.__default)) ($Is $o@@19 Tclass.Collections____Seqs__i.__default)))) :qid |unknown.0:0| :skolemid |3622| :pattern ( ($Is $o@@19 Tclass.Collections____Seqs__i.__default)) )))
(assert (forall (($o@@20 T@U) ($h@@70 T@U) ) (!  (=> (and (= (type $o@@20) refType) (= (type $h@@70) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@20 Tclass.Collections____Seqs__i.__default $h@@70) (or (= $o@@20 null) (U_2_bool (MapType1Select (MapType0Select $h@@70 $o@@20) alloc)))) (=> (or (= $o@@20 null) (U_2_bool (MapType1Select (MapType0Select $h@@70 $o@@20) alloc))) ($IsAlloc $o@@20 Tclass.Collections____Seqs__i.__default $h@@70)))) :qid |unknown.0:0| :skolemid |3623| :pattern ( ($IsAlloc $o@@20 Tclass.Collections____Seqs__i.__default $h@@70)) )))
(assert (forall ((arg0@@269 T@U) (arg1@@125 T@U) ) (! (= (type (Collections____Seqs__i.__default.last arg0@@269 arg1@@125)) BoxType) :qid |funType:Collections____Seqs__i.__default.last| :pattern ( (Collections____Seqs__i.__default.last arg0@@269 arg1@@125)) )))
(assert  (=> true (forall ((Collections__Seqs_i._default.last$T T@U) (|s#0| T@U) ) (!  (=> (and (and (= (type Collections__Seqs_i._default.last$T) TyType) (= (type |s#0|) (SeqType BoxType))) (or (|Collections____Seqs__i.__default.last#canCall| Collections__Seqs_i._default.last$T |s#0|) (and ($Is |s#0| (TSeq Collections__Seqs_i._default.last$T)) (> (|Seq#Length| |s#0|) 0)))) ($IsBox (Collections____Seqs__i.__default.last Collections__Seqs_i._default.last$T |s#0|) Collections__Seqs_i._default.last$T)) :qid |unknown.0:0| :skolemid |3624| :pattern ( (Collections____Seqs__i.__default.last Collections__Seqs_i._default.last$T |s#0|)) ))))
(assert (forall ((Collections__Seqs_i._default.last$T@@0 T@U) (|s#0@@0| T@U) ) (!  (=> (and (and (= (type Collections__Seqs_i._default.last$T@@0) TyType) (= (type |s#0@@0|) (SeqType BoxType))) ($Is |s#0@@0| (TSeq Collections__Seqs_i._default.last$T@@0))) (and (=> (|Collections____Seqs__i.__default.last#requires| Collections__Seqs_i._default.last$T@@0 |s#0@@0|) (> (|Seq#Length| |s#0@@0|) 0)) (=> (> (|Seq#Length| |s#0@@0|) 0) (|Collections____Seqs__i.__default.last#requires| Collections__Seqs_i._default.last$T@@0 |s#0@@0|)))) :qid |unknown.0:0| :skolemid |3625| :pattern ( (|Collections____Seqs__i.__default.last#requires| Collections__Seqs_i._default.last$T@@0 |s#0@@0|)) )))
(assert  (=> true (forall ((Collections__Seqs_i._default.last$T@@1 T@U) (|s#0@@1| T@U) ) (!  (=> (and (and (= (type Collections__Seqs_i._default.last$T@@1) TyType) (= (type |s#0@@1|) (SeqType BoxType))) (or (|Collections____Seqs__i.__default.last#canCall| Collections__Seqs_i._default.last$T@@1 |s#0@@1|) (and ($Is |s#0@@1| (TSeq Collections__Seqs_i._default.last$T@@1)) (> (|Seq#Length| |s#0@@1|) 0)))) (= (Collections____Seqs__i.__default.last Collections__Seqs_i._default.last$T@@1 |s#0@@1|) (|Seq#Index| |s#0@@1| (- (|Seq#Length| |s#0@@1|) 1)))) :qid |unknown.0:0| :skolemid |3626| :pattern ( (Collections____Seqs__i.__default.last Collections__Seqs_i._default.last$T@@1 |s#0@@1|)) ))))
(assert  (=> true (forall ((Collections__Seqs_i._default.last$T@@2 T@U) (|s#0@@2| T@U) ) (!  (=> (and (and (= (type Collections__Seqs_i._default.last$T@@2) TyType) (= (type |s#0@@2|) (SeqType BoxType))) (or (|Collections____Seqs__i.__default.last#canCall| Collections__Seqs_i._default.last$T@@2 (Lit |s#0@@2|)) (and ($Is |s#0@@2| (TSeq Collections__Seqs_i._default.last$T@@2)) (> (|Seq#Length| (Lit |s#0@@2|)) 0)))) (= (Collections____Seqs__i.__default.last Collections__Seqs_i._default.last$T@@2 (Lit |s#0@@2|)) (|Seq#Index| (Lit |s#0@@2|) (- (|Seq#Length| (Lit |s#0@@2|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |3627| :pattern ( (Collections____Seqs__i.__default.last Collections__Seqs_i._default.last$T@@2 (Lit |s#0@@2|))) ))))
(assert (forall ((arg0@@270 T@U) (arg1@@126 T@U) ) (! (= (type (Collections____Seqs__i.__default.all__but__last arg0@@270 arg1@@126)) (SeqType BoxType)) :qid |funType:Collections____Seqs__i.__default.all__but__last| :pattern ( (Collections____Seqs__i.__default.all__but__last arg0@@270 arg1@@126)) )))
(assert  (=> true (forall ((Collections__Seqs_i._default.all_but_last$T T@U) (|s#0@@3| T@U) ) (!  (=> (and (and (= (type Collections__Seqs_i._default.all_but_last$T) TyType) (= (type |s#0@@3|) (SeqType BoxType))) (or (|Collections____Seqs__i.__default.all__but__last#canCall| Collections__Seqs_i._default.all_but_last$T |s#0@@3|) (and ($Is |s#0@@3| (TSeq Collections__Seqs_i._default.all_but_last$T)) (> (|Seq#Length| |s#0@@3|) 0)))) (and (= (|Seq#Length| (Collections____Seqs__i.__default.all__but__last Collections__Seqs_i._default.all_but_last$T |s#0@@3|)) (- (|Seq#Length| |s#0@@3|) 1)) ($Is (Collections____Seqs__i.__default.all__but__last Collections__Seqs_i._default.all_but_last$T |s#0@@3|) (TSeq Collections__Seqs_i._default.all_but_last$T)))) :qid |unknown.0:0| :skolemid |3628| :pattern ( (Collections____Seqs__i.__default.all__but__last Collections__Seqs_i._default.all_but_last$T |s#0@@3|)) ))))
(assert (forall ((Collections__Seqs_i._default.all_but_last$T@@0 T@U) (|s#0@@4| T@U) ) (!  (=> (and (and (= (type Collections__Seqs_i._default.all_but_last$T@@0) TyType) (= (type |s#0@@4|) (SeqType BoxType))) ($Is |s#0@@4| (TSeq Collections__Seqs_i._default.all_but_last$T@@0))) (and (=> (|Collections____Seqs__i.__default.all__but__last#requires| Collections__Seqs_i._default.all_but_last$T@@0 |s#0@@4|) (> (|Seq#Length| |s#0@@4|) 0)) (=> (> (|Seq#Length| |s#0@@4|) 0) (|Collections____Seqs__i.__default.all__but__last#requires| Collections__Seqs_i._default.all_but_last$T@@0 |s#0@@4|)))) :qid |unknown.0:0| :skolemid |3629| :pattern ( (|Collections____Seqs__i.__default.all__but__last#requires| Collections__Seqs_i._default.all_but_last$T@@0 |s#0@@4|)) )))
(assert  (=> true (forall ((Collections__Seqs_i._default.all_but_last$T@@1 T@U) (|s#0@@5| T@U) ) (!  (=> (and (and (= (type Collections__Seqs_i._default.all_but_last$T@@1) TyType) (= (type |s#0@@5|) (SeqType BoxType))) (or (|Collections____Seqs__i.__default.all__but__last#canCall| Collections__Seqs_i._default.all_but_last$T@@1 |s#0@@5|) (and ($Is |s#0@@5| (TSeq Collections__Seqs_i._default.all_but_last$T@@1)) (> (|Seq#Length| |s#0@@5|) 0)))) (= (Collections____Seqs__i.__default.all__but__last Collections__Seqs_i._default.all_but_last$T@@1 |s#0@@5|) (|Seq#Take| |s#0@@5| (- (|Seq#Length| |s#0@@5|) 1)))) :qid |unknown.0:0| :skolemid |3630| :pattern ( (Collections____Seqs__i.__default.all__but__last Collections__Seqs_i._default.all_but_last$T@@1 |s#0@@5|)) ))))
(assert  (=> true (forall ((Collections__Seqs_i._default.all_but_last$T@@2 T@U) (|s#0@@6| T@U) ) (!  (=> (and (and (= (type Collections__Seqs_i._default.all_but_last$T@@2) TyType) (= (type |s#0@@6|) (SeqType BoxType))) (or (|Collections____Seqs__i.__default.all__but__last#canCall| Collections__Seqs_i._default.all_but_last$T@@2 (Lit |s#0@@6|)) (and ($Is |s#0@@6| (TSeq Collections__Seqs_i._default.all_but_last$T@@2)) (> (|Seq#Length| (Lit |s#0@@6|)) 0)))) (= (Collections____Seqs__i.__default.all__but__last Collections__Seqs_i._default.all_but_last$T@@2 (Lit |s#0@@6|)) (|Seq#Take| (Lit |s#0@@6|) (- (|Seq#Length| (Lit |s#0@@6|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |3631| :pattern ( (Collections____Seqs__i.__default.all__but__last Collections__Seqs_i._default.all_but_last$T@@2 (Lit |s#0@@6|))) ))))
(assert  (=> true (forall ((Collections__Seqs_i._default.ItemAtPositionInSeq$T T@U) (|s#0@@7| T@U) (|v#0@@2| T@U) (|idx#0| Int) ) (!  (=> (and (and (and (= (type Collections__Seqs_i._default.ItemAtPositionInSeq$T) TyType) (= (type |s#0@@7|) (SeqType BoxType))) (= (type |v#0@@2|) BoxType)) (or (|Collections____Seqs__i.__default.ItemAtPositionInSeq#canCall| Collections__Seqs_i._default.ItemAtPositionInSeq$T |s#0@@7| |v#0@@2| |idx#0|) (and ($Is |s#0@@7| (TSeq Collections__Seqs_i._default.ItemAtPositionInSeq$T)) ($IsBox |v#0@@2| Collections__Seqs_i._default.ItemAtPositionInSeq$T)))) true) :qid |unknown.0:0| :skolemid |3632| :pattern ( (Collections____Seqs__i.__default.ItemAtPositionInSeq Collections__Seqs_i._default.ItemAtPositionInSeq$T |s#0@@7| |v#0@@2| |idx#0|)) ))))
(assert (forall ((Collections__Seqs_i._default.ItemAtPositionInSeq$T@@0 T@U) (|s#0@@8| T@U) (|v#0@@3| T@U) (|idx#0@@0| Int) ) (!  (=> (and (and (and (= (type Collections__Seqs_i._default.ItemAtPositionInSeq$T@@0) TyType) (= (type |s#0@@8|) (SeqType BoxType))) (= (type |v#0@@3|) BoxType)) (and ($Is |s#0@@8| (TSeq Collections__Seqs_i._default.ItemAtPositionInSeq$T@@0)) ($IsBox |v#0@@3| Collections__Seqs_i._default.ItemAtPositionInSeq$T@@0))) (and (=> (|Collections____Seqs__i.__default.ItemAtPositionInSeq#requires| Collections__Seqs_i._default.ItemAtPositionInSeq$T@@0 |s#0@@8| |v#0@@3| |idx#0@@0|) true) (=> true (|Collections____Seqs__i.__default.ItemAtPositionInSeq#requires| Collections__Seqs_i._default.ItemAtPositionInSeq$T@@0 |s#0@@8| |v#0@@3| |idx#0@@0|)))) :qid |unknown.0:0| :skolemid |3633| :pattern ( (|Collections____Seqs__i.__default.ItemAtPositionInSeq#requires| Collections__Seqs_i._default.ItemAtPositionInSeq$T@@0 |s#0@@8| |v#0@@3| |idx#0@@0|)) )))
(assert  (=> true (forall ((Collections__Seqs_i._default.ItemAtPositionInSeq$T@@1 T@U) (|s#0@@9| T@U) (|v#0@@4| T@U) (|idx#0@@1| Int) ) (!  (=> (and (and (and (= (type Collections__Seqs_i._default.ItemAtPositionInSeq$T@@1) TyType) (= (type |s#0@@9|) (SeqType BoxType))) (= (type |v#0@@4|) BoxType)) (or (|Collections____Seqs__i.__default.ItemAtPositionInSeq#canCall| Collections__Seqs_i._default.ItemAtPositionInSeq$T@@1 |s#0@@9| |v#0@@4| |idx#0@@1|) (and ($Is |s#0@@9| (TSeq Collections__Seqs_i._default.ItemAtPositionInSeq$T@@1)) ($IsBox |v#0@@4| Collections__Seqs_i._default.ItemAtPositionInSeq$T@@1)))) (and (=> (Collections____Seqs__i.__default.ItemAtPositionInSeq Collections__Seqs_i._default.ItemAtPositionInSeq$T@@1 |s#0@@9| |v#0@@4| |idx#0@@1|) (and (and (<= (LitInt 0) |idx#0@@1|) (< |idx#0@@1| (|Seq#Length| |s#0@@9|))) (= (|Seq#Index| |s#0@@9| |idx#0@@1|) |v#0@@4|))) (=> (and (and (<= (LitInt 0) |idx#0@@1|) (< |idx#0@@1| (|Seq#Length| |s#0@@9|))) (= (|Seq#Index| |s#0@@9| |idx#0@@1|) |v#0@@4|)) (Collections____Seqs__i.__default.ItemAtPositionInSeq Collections__Seqs_i._default.ItemAtPositionInSeq$T@@1 |s#0@@9| |v#0@@4| |idx#0@@1|)))) :qid |unknown.0:0| :skolemid |3634| :pattern ( (Collections____Seqs__i.__default.ItemAtPositionInSeq Collections__Seqs_i._default.ItemAtPositionInSeq$T@@1 |s#0@@9| |v#0@@4| |idx#0@@1|)) ))))
(assert  (=> true (forall ((Collections__Seqs_i._default.ItemAtPositionInSeq$T@@2 T@U) (|s#0@@10| T@U) (|v#0@@5| T@U) (|idx#0@@2| Int) ) (!  (=> (and (and (and (= (type Collections__Seqs_i._default.ItemAtPositionInSeq$T@@2) TyType) (= (type |s#0@@10|) (SeqType BoxType))) (= (type |v#0@@5|) BoxType)) (or (|Collections____Seqs__i.__default.ItemAtPositionInSeq#canCall| Collections__Seqs_i._default.ItemAtPositionInSeq$T@@2 (Lit |s#0@@10|) |v#0@@5| (LitInt |idx#0@@2|)) (and ($Is |s#0@@10| (TSeq Collections__Seqs_i._default.ItemAtPositionInSeq$T@@2)) ($IsBox |v#0@@5| Collections__Seqs_i._default.ItemAtPositionInSeq$T@@2)))) (and (=> (Collections____Seqs__i.__default.ItemAtPositionInSeq Collections__Seqs_i._default.ItemAtPositionInSeq$T@@2 (Lit |s#0@@10|) |v#0@@5| (LitInt |idx#0@@2|)) (and (and (<= (LitInt 0) (LitInt |idx#0@@2|)) (< |idx#0@@2| (|Seq#Length| (Lit |s#0@@10|)))) (= (|Seq#Index| (Lit |s#0@@10|) (LitInt |idx#0@@2|)) |v#0@@5|))) (=> (and (and (<= (LitInt 0) (LitInt |idx#0@@2|)) (< |idx#0@@2| (|Seq#Length| (Lit |s#0@@10|)))) (= (|Seq#Index| (Lit |s#0@@10|) (LitInt |idx#0@@2|)) |v#0@@5|)) (Collections____Seqs__i.__default.ItemAtPositionInSeq Collections__Seqs_i._default.ItemAtPositionInSeq$T@@2 (Lit |s#0@@10|) |v#0@@5| (LitInt |idx#0@@2|))))) :qid |unknown.0:0| :weight 3 :skolemid |3635| :pattern ( (Collections____Seqs__i.__default.ItemAtPositionInSeq Collections__Seqs_i._default.ItemAtPositionInSeq$T@@2 (Lit |s#0@@10|) |v#0@@5| (LitInt |idx#0@@2|))) ))))
(assert  (=> true (forall ((Collections__Seqs_i._default.ItemAtPositionInSeq$T@@3 T@U) (|s#0@@11| T@U) (|v#0@@6| T@U) (|idx#0@@3| Int) ) (!  (=> (and (and (and (= (type Collections__Seqs_i._default.ItemAtPositionInSeq$T@@3) TyType) (= (type |s#0@@11|) (SeqType BoxType))) (= (type |v#0@@6|) BoxType)) (or (|Collections____Seqs__i.__default.ItemAtPositionInSeq#canCall| Collections__Seqs_i._default.ItemAtPositionInSeq$T@@3 (Lit |s#0@@11|) (Lit |v#0@@6|) (LitInt |idx#0@@3|)) (and ($Is |s#0@@11| (TSeq Collections__Seqs_i._default.ItemAtPositionInSeq$T@@3)) ($IsBox |v#0@@6| Collections__Seqs_i._default.ItemAtPositionInSeq$T@@3)))) (and (=> (Collections____Seqs__i.__default.ItemAtPositionInSeq Collections__Seqs_i._default.ItemAtPositionInSeq$T@@3 (Lit |s#0@@11|) (Lit |v#0@@6|) (LitInt |idx#0@@3|)) (and (and (<= (LitInt 0) (LitInt |idx#0@@3|)) (< |idx#0@@3| (|Seq#Length| (Lit |s#0@@11|)))) (= (|Seq#Index| (Lit |s#0@@11|) (LitInt |idx#0@@3|)) (Lit |v#0@@6|)))) (=> (and (and (<= (LitInt 0) (LitInt |idx#0@@3|)) (< |idx#0@@3| (|Seq#Length| (Lit |s#0@@11|)))) (= (|Seq#Index| (Lit |s#0@@11|) (LitInt |idx#0@@3|)) (Lit |v#0@@6|))) (Collections____Seqs__i.__default.ItemAtPositionInSeq Collections__Seqs_i._default.ItemAtPositionInSeq$T@@3 (Lit |s#0@@11|) (Lit |v#0@@6|) (LitInt |idx#0@@3|))))) :qid |unknown.0:0| :weight 3 :skolemid |3636| :pattern ( (Collections____Seqs__i.__default.ItemAtPositionInSeq Collections__Seqs_i._default.ItemAtPositionInSeq$T@@3 (Lit |s#0@@11|) (Lit |v#0@@6|) (LitInt |idx#0@@3|))) ))))
(assert  (=> true (forall ((Collections__Seqs_i._default.FindIndexInSeq$T T@U) (|s#0@@12| T@U) (|v#0@@7| T@U) ) (!  (=> (and (and (and (= (type Collections__Seqs_i._default.FindIndexInSeq$T) TyType) (= (type |s#0@@12|) (SeqType BoxType))) (= (type |v#0@@7|) BoxType)) (or (|Collections____Seqs__i.__default.FindIndexInSeq#canCall| Collections__Seqs_i._default.FindIndexInSeq$T |s#0@@12| |v#0@@7|) (and ($Is |s#0@@12| (TSeq Collections__Seqs_i._default.FindIndexInSeq$T)) ($IsBox |v#0@@7| Collections__Seqs_i._default.FindIndexInSeq$T)))) (let ((|idx#0@@4| (Collections____Seqs__i.__default.FindIndexInSeq Collections__Seqs_i._default.FindIndexInSeq$T |s#0@@12| |v#0@@7|))) (ite (>= |idx#0@@4| (LitInt 0))  (and (< |idx#0@@4| (|Seq#Length| |s#0@@12|)) (= (|Seq#Index| |s#0@@12| |idx#0@@4|) |v#0@@7|))  (not (|Seq#Contains| |s#0@@12| |v#0@@7|))))) :qid |unknown.0:0| :skolemid |3637| :pattern ( (Collections____Seqs__i.__default.FindIndexInSeq Collections__Seqs_i._default.FindIndexInSeq$T |s#0@@12| |v#0@@7|)) ))))
(assert (forall ((Collections__Seqs_i._default.FindIndexInSeq$T@@0 T@U) ($Heap T@U) (|s#0@@13| T@U) (|v#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type Collections__Seqs_i._default.FindIndexInSeq$T@@0) TyType) (= (type $Heap) (MapType0Type refType MapType1Type))) (= (type |s#0@@13|) (SeqType BoxType))) (= (type |v#0@@8|) BoxType)) (and (and ($IsGoodHeap $Heap) ($Is |s#0@@13| (TSeq Collections__Seqs_i._default.FindIndexInSeq$T@@0))) ($IsBox |v#0@@8| Collections__Seqs_i._default.FindIndexInSeq$T@@0))) (and (=> (|Collections____Seqs__i.__default.FindIndexInSeq#requires| Collections__Seqs_i._default.FindIndexInSeq$T@@0 |s#0@@13| |v#0@@8|) true) (=> true (|Collections____Seqs__i.__default.FindIndexInSeq#requires| Collections__Seqs_i._default.FindIndexInSeq$T@@0 |s#0@@13| |v#0@@8|)))) :qid |unknown.0:0| :skolemid |3638| :pattern ( (|Collections____Seqs__i.__default.FindIndexInSeq#requires| Collections__Seqs_i._default.FindIndexInSeq$T@@0 |s#0@@13| |v#0@@8|) ($IsGoodHeap $Heap)) )))
(assert (forall ((Collections__Seqs_i._default.FindIndexInSeq$T@@1 T@U) (s@@45 T@U) (v@@44 T@U) ) (!  (=> (and (and (and (= (type Collections__Seqs_i._default.FindIndexInSeq$T@@1) TyType) (= (type s@@45) (SeqType BoxType))) (= (type v@@44) BoxType)) (|$let#0$canCall| Collections__Seqs_i._default.FindIndexInSeq$T@@1 s@@45 v@@44)) (Collections____Seqs__i.__default.ItemAtPositionInSeq Collections__Seqs_i._default.FindIndexInSeq$T@@1 s@@45 v@@44 (|$let#0_idx| Collections__Seqs_i._default.FindIndexInSeq$T@@1 s@@45 v@@44))) :qid |Seqsidfy.49:9| :skolemid |3639| :pattern ( (|$let#0_idx| Collections__Seqs_i._default.FindIndexInSeq$T@@1 s@@45 v@@44)) )))
(assert  (=> true (forall ((Collections__Seqs_i._default.FindIndexInSeq$T@@2 T@U) ($Heap@@0 T@U) (|s#0@@14| T@U) (|v#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type Collections__Seqs_i._default.FindIndexInSeq$T@@2) TyType) (= (type $Heap@@0) (MapType0Type refType MapType1Type))) (= (type |s#0@@14|) (SeqType BoxType))) (= (type |v#0@@9|) BoxType)) (or (|Collections____Seqs__i.__default.FindIndexInSeq#canCall| Collections__Seqs_i._default.FindIndexInSeq$T@@2 |s#0@@14| |v#0@@9|) (and (and ($IsGoodHeap $Heap@@0) ($Is |s#0@@14| (TSeq Collections__Seqs_i._default.FindIndexInSeq$T@@2))) ($IsBox |v#0@@9| Collections__Seqs_i._default.FindIndexInSeq$T@@2)))) (and (=> (|Seq#Contains| |s#0@@14| |v#0@@9|) (|$let#0$canCall| Collections__Seqs_i._default.FindIndexInSeq$T@@2 |s#0@@14| |v#0@@9|)) (= (Collections____Seqs__i.__default.FindIndexInSeq Collections__Seqs_i._default.FindIndexInSeq$T@@2 |s#0@@14| |v#0@@9|) (ite (|Seq#Contains| |s#0@@14| |v#0@@9|) (let ((|idx#1| (|$let#0_idx| Collections__Seqs_i._default.FindIndexInSeq$T@@2 |s#0@@14| |v#0@@9|))) |idx#1|) (- 0 1))))) :qid |unknown.0:0| :skolemid |3640| :pattern ( (Collections____Seqs__i.__default.FindIndexInSeq Collections__Seqs_i._default.FindIndexInSeq$T@@2 |s#0@@14| |v#0@@9|) ($IsGoodHeap $Heap@@0)) ))))
(assert  (=> true (forall ((Collections__Seqs_i._default.FindIndexInSeq$T@@3 T@U) ($Heap@@1 T@U) (|s#0@@15| T@U) (|v#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type Collections__Seqs_i._default.FindIndexInSeq$T@@3) TyType) (= (type $Heap@@1) (MapType0Type refType MapType1Type))) (= (type |s#0@@15|) (SeqType BoxType))) (= (type |v#0@@10|) BoxType)) (or (|Collections____Seqs__i.__default.FindIndexInSeq#canCall| Collections__Seqs_i._default.FindIndexInSeq$T@@3 (Lit |s#0@@15|) |v#0@@10|) (and (and ($IsGoodHeap $Heap@@1) ($Is |s#0@@15| (TSeq Collections__Seqs_i._default.FindIndexInSeq$T@@3))) ($IsBox |v#0@@10| Collections__Seqs_i._default.FindIndexInSeq$T@@3)))) (and (=> (|Seq#Contains| |s#0@@15| |v#0@@10|) (|$let#0$canCall| Collections__Seqs_i._default.FindIndexInSeq$T@@3 (Lit |s#0@@15|) |v#0@@10|)) (= (Collections____Seqs__i.__default.FindIndexInSeq Collections__Seqs_i._default.FindIndexInSeq$T@@3 (Lit |s#0@@15|) |v#0@@10|) (ite (|Seq#Contains| |s#0@@15| |v#0@@10|) (let ((|idx#2| (|$let#0_idx| Collections__Seqs_i._default.FindIndexInSeq$T@@3 (Lit |s#0@@15|) |v#0@@10|))) |idx#2|) (- 0 1))))) :qid |unknown.0:0| :weight 3 :skolemid |3641| :pattern ( (Collections____Seqs__i.__default.FindIndexInSeq Collections__Seqs_i._default.FindIndexInSeq$T@@3 (Lit |s#0@@15|) |v#0@@10|) ($IsGoodHeap $Heap@@1)) ))))
(assert  (=> true (forall ((Collections__Seqs_i._default.FindIndexInSeq$T@@4 T@U) ($Heap@@2 T@U) (|s#0@@16| T@U) (|v#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Collections__Seqs_i._default.FindIndexInSeq$T@@4) TyType) (= (type $Heap@@2) (MapType0Type refType MapType1Type))) (= (type |s#0@@16|) (SeqType BoxType))) (= (type |v#0@@11|) BoxType)) (or (|Collections____Seqs__i.__default.FindIndexInSeq#canCall| Collections__Seqs_i._default.FindIndexInSeq$T@@4 (Lit |s#0@@16|) (Lit |v#0@@11|)) (and (and ($IsGoodHeap $Heap@@2) ($Is |s#0@@16| (TSeq Collections__Seqs_i._default.FindIndexInSeq$T@@4))) ($IsBox |v#0@@11| Collections__Seqs_i._default.FindIndexInSeq$T@@4)))) (and (=> (|Seq#Contains| |s#0@@16| |v#0@@11|) (|$let#0$canCall| Collections__Seqs_i._default.FindIndexInSeq$T@@4 (Lit |s#0@@16|) (Lit |v#0@@11|))) (= (Collections____Seqs__i.__default.FindIndexInSeq Collections__Seqs_i._default.FindIndexInSeq$T@@4 (Lit |s#0@@16|) (Lit |v#0@@11|)) (ite (|Seq#Contains| |s#0@@16| |v#0@@11|) (let ((|idx#3| (|$let#0_idx| Collections__Seqs_i._default.FindIndexInSeq$T@@4 (Lit |s#0@@16|) (Lit |v#0@@11|)))) |idx#3|) (- 0 1))))) :qid |unknown.0:0| :weight 3 :skolemid |3642| :pattern ( (Collections____Seqs__i.__default.FindIndexInSeq Collections__Seqs_i._default.FindIndexInSeq$T@@4 (Lit |s#0@@16|) (Lit |v#0@@11|)) ($IsGoodHeap $Heap@@2)) ))))
(assert (forall ((arg0@@271 T@U) (arg1@@127 T@U) (arg2@@77 T@U) ) (! (= (type (Collections____Seqs__i.__default.SeqCat arg0@@271 arg1@@127 arg2@@77)) (SeqType BoxType)) :qid |funType:Collections____Seqs__i.__default.SeqCat| :pattern ( (Collections____Seqs__i.__default.SeqCat arg0@@271 arg1@@127 arg2@@77)) )))
(assert (forall ((Collections__Seqs_i._default.SeqCat$T T@U) ($ly@@78 T@U) (|seqs#0| T@U) ) (!  (=> (and (and (= (type Collections__Seqs_i._default.SeqCat$T) TyType) (= (type $ly@@78) LayerTypeType)) (= (type |seqs#0|) (SeqType BoxType))) (= (Collections____Seqs__i.__default.SeqCat Collections__Seqs_i._default.SeqCat$T ($LS $ly@@78) |seqs#0|) (Collections____Seqs__i.__default.SeqCat Collections__Seqs_i._default.SeqCat$T $ly@@78 |seqs#0|))) :qid |unknown.0:0| :skolemid |3643| :pattern ( (Collections____Seqs__i.__default.SeqCat Collections__Seqs_i._default.SeqCat$T ($LS $ly@@78) |seqs#0|)) )))
(assert (forall ((Collections__Seqs_i._default.SeqCat$T@@0 T@U) ($ly@@79 T@U) (|seqs#0@@0| T@U) ) (!  (=> (and (and (= (type Collections__Seqs_i._default.SeqCat$T@@0) TyType) (= (type $ly@@79) LayerTypeType)) (= (type |seqs#0@@0|) (SeqType BoxType))) (= (Collections____Seqs__i.__default.SeqCat Collections__Seqs_i._default.SeqCat$T@@0 $ly@@79 |seqs#0@@0|) (Collections____Seqs__i.__default.SeqCat Collections__Seqs_i._default.SeqCat$T@@0 $LZ |seqs#0@@0|))) :qid |unknown.0:0| :skolemid |3644| :pattern ( (Collections____Seqs__i.__default.SeqCat Collections__Seqs_i._default.SeqCat$T@@0 (AsFuelBottom $ly@@79) |seqs#0@@0|)) )))
(assert  (=> true (forall ((Collections__Seqs_i._default.SeqCat$T@@1 T@U) ($ly@@80 T@U) (|seqs#0@@1| T@U) ) (!  (=> (and (and (and (= (type Collections__Seqs_i._default.SeqCat$T@@1) TyType) (= (type $ly@@80) LayerTypeType)) (= (type |seqs#0@@1|) (SeqType BoxType))) (or (|Collections____Seqs__i.__default.SeqCat#canCall| Collections__Seqs_i._default.SeqCat$T@@1 |seqs#0@@1|) ($Is |seqs#0@@1| (TSeq (TSeq Collections__Seqs_i._default.SeqCat$T@@1))))) ($Is (Collections____Seqs__i.__default.SeqCat Collections__Seqs_i._default.SeqCat$T@@1 $ly@@80 |seqs#0@@1|) (TSeq Collections__Seqs_i._default.SeqCat$T@@1))) :qid |unknown.0:0| :skolemid |3645| :pattern ( (Collections____Seqs__i.__default.SeqCat Collections__Seqs_i._default.SeqCat$T@@1 $ly@@80 |seqs#0@@1|)) ))))
(assert (forall ((Collections__Seqs_i._default.SeqCat$T@@2 T@U) ($ly@@81 T@U) (|seqs#0@@2| T@U) ) (!  (=> (and (and (and (= (type Collections__Seqs_i._default.SeqCat$T@@2) TyType) (= (type $ly@@81) LayerTypeType)) (= (type |seqs#0@@2|) (SeqType BoxType))) ($Is |seqs#0@@2| (TSeq (TSeq Collections__Seqs_i._default.SeqCat$T@@2)))) (and (=> (|Collections____Seqs__i.__default.SeqCat#requires| Collections__Seqs_i._default.SeqCat$T@@2 $ly@@81 |seqs#0@@2|) true) (=> true (|Collections____Seqs__i.__default.SeqCat#requires| Collections__Seqs_i._default.SeqCat$T@@2 $ly@@81 |seqs#0@@2|)))) :qid |unknown.0:0| :skolemid |3646| :pattern ( (|Collections____Seqs__i.__default.SeqCat#requires| Collections__Seqs_i._default.SeqCat$T@@2 $ly@@81 |seqs#0@@2|)) )))
(assert  (=> true (forall ((Collections__Seqs_i._default.SeqCat$T@@3 T@U) ($ly@@82 T@U) (|seqs#0@@3| T@U) ) (!  (=> (and (and (and (= (type Collections__Seqs_i._default.SeqCat$T@@3) TyType) (= (type $ly@@82) LayerTypeType)) (= (type |seqs#0@@3|) (SeqType BoxType))) (or (|Collections____Seqs__i.__default.SeqCat#canCall| Collections__Seqs_i._default.SeqCat$T@@3 |seqs#0@@3|) ($Is |seqs#0@@3| (TSeq (TSeq Collections__Seqs_i._default.SeqCat$T@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@3|) (LitInt 0))) (|Collections____Seqs__i.__default.SeqCat#canCall| Collections__Seqs_i._default.SeqCat$T@@3 (|Seq#Drop| |seqs#0@@3| (LitInt 1)))) (= (Collections____Seqs__i.__default.SeqCat Collections__Seqs_i._default.SeqCat$T@@3 ($LS $ly@@82) |seqs#0@@3|) (ite (= (|Seq#Length| |seqs#0@@3|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@3| (LitInt 0))) (Collections____Seqs__i.__default.SeqCat Collections__Seqs_i._default.SeqCat$T@@3 $ly@@82 (|Seq#Drop| |seqs#0@@3| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |3647| :pattern ( (Collections____Seqs__i.__default.SeqCat Collections__Seqs_i._default.SeqCat$T@@3 ($LS $ly@@82) |seqs#0@@3|)) ))))
(assert  (=> true (forall ((Collections__Seqs_i._default.SeqCat$T@@4 T@U) ($ly@@83 T@U) (|seqs#0@@4| T@U) ) (!  (=> (and (and (and (= (type Collections__Seqs_i._default.SeqCat$T@@4) TyType) (= (type $ly@@83) LayerTypeType)) (= (type |seqs#0@@4|) (SeqType BoxType))) (or (|Collections____Seqs__i.__default.SeqCat#canCall| Collections__Seqs_i._default.SeqCat$T@@4 (Lit |seqs#0@@4|)) ($Is |seqs#0@@4| (TSeq (TSeq Collections__Seqs_i._default.SeqCat$T@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0))) (|Collections____Seqs__i.__default.SeqCat#canCall| Collections__Seqs_i._default.SeqCat$T@@4 (Lit (|Seq#Drop| (Lit |seqs#0@@4|) (LitInt 1))))) (= (Collections____Seqs__i.__default.SeqCat Collections__Seqs_i._default.SeqCat$T@@4 ($LS $ly@@83) (Lit |seqs#0@@4|)) (ite (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |seqs#0@@4|) (LitInt 0))) (Collections____Seqs__i.__default.SeqCat Collections__Seqs_i._default.SeqCat$T@@4 ($LS $ly@@83) (Lit (|Seq#Drop| (Lit |seqs#0@@4|) (LitInt 1))))))))) :qid |unknown.0:0| :weight 3 :skolemid |3648| :pattern ( (Collections____Seqs__i.__default.SeqCat Collections__Seqs_i._default.SeqCat$T@@4 ($LS $ly@@83) (Lit |seqs#0@@4|))) ))))
(assert (forall ((arg0@@272 T@U) (arg1@@128 T@U) (arg2@@78 T@U) ) (! (= (type (Collections____Seqs__i.__default.SeqCatRev arg0@@272 arg1@@128 arg2@@78)) (SeqType BoxType)) :qid |funType:Collections____Seqs__i.__default.SeqCatRev| :pattern ( (Collections____Seqs__i.__default.SeqCatRev arg0@@272 arg1@@128 arg2@@78)) )))
(assert (forall ((Collections__Seqs_i._default.SeqCatRev$T T@U) ($ly@@84 T@U) (|seqs#0@@5| T@U) ) (!  (=> (and (and (= (type Collections__Seqs_i._default.SeqCatRev$T) TyType) (= (type $ly@@84) LayerTypeType)) (= (type |seqs#0@@5|) (SeqType BoxType))) (= (Collections____Seqs__i.__default.SeqCatRev Collections__Seqs_i._default.SeqCatRev$T ($LS $ly@@84) |seqs#0@@5|) (Collections____Seqs__i.__default.SeqCatRev Collections__Seqs_i._default.SeqCatRev$T $ly@@84 |seqs#0@@5|))) :qid |unknown.0:0| :skolemid |3649| :pattern ( (Collections____Seqs__i.__default.SeqCatRev Collections__Seqs_i._default.SeqCatRev$T ($LS $ly@@84) |seqs#0@@5|)) )))
(assert (forall ((Collections__Seqs_i._default.SeqCatRev$T@@0 T@U) ($ly@@85 T@U) (|seqs#0@@6| T@U) ) (!  (=> (and (and (= (type Collections__Seqs_i._default.SeqCatRev$T@@0) TyType) (= (type $ly@@85) LayerTypeType)) (= (type |seqs#0@@6|) (SeqType BoxType))) (= (Collections____Seqs__i.__default.SeqCatRev Collections__Seqs_i._default.SeqCatRev$T@@0 $ly@@85 |seqs#0@@6|) (Collections____Seqs__i.__default.SeqCatRev Collections__Seqs_i._default.SeqCatRev$T@@0 $LZ |seqs#0@@6|))) :qid |unknown.0:0| :skolemid |3650| :pattern ( (Collections____Seqs__i.__default.SeqCatRev Collections__Seqs_i._default.SeqCatRev$T@@0 (AsFuelBottom $ly@@85) |seqs#0@@6|)) )))
(assert  (=> true (forall ((Collections__Seqs_i._default.SeqCatRev$T@@1 T@U) ($ly@@86 T@U) (|seqs#0@@7| T@U) ) (!  (=> (and (and (and (= (type Collections__Seqs_i._default.SeqCatRev$T@@1) TyType) (= (type $ly@@86) LayerTypeType)) (= (type |seqs#0@@7|) (SeqType BoxType))) (or (|Collections____Seqs__i.__default.SeqCatRev#canCall| Collections__Seqs_i._default.SeqCatRev$T@@1 |seqs#0@@7|) ($Is |seqs#0@@7| (TSeq (TSeq Collections__Seqs_i._default.SeqCatRev$T@@1))))) ($Is (Collections____Seqs__i.__default.SeqCatRev Collections__Seqs_i._default.SeqCatRev$T@@1 $ly@@86 |seqs#0@@7|) (TSeq Collections__Seqs_i._default.SeqCatRev$T@@1))) :qid |unknown.0:0| :skolemid |3651| :pattern ( (Collections____Seqs__i.__default.SeqCatRev Collections__Seqs_i._default.SeqCatRev$T@@1 $ly@@86 |seqs#0@@7|)) ))))
(assert (forall ((Collections__Seqs_i._default.SeqCatRev$T@@2 T@U) ($ly@@87 T@U) (|seqs#0@@8| T@U) ) (!  (=> (and (and (and (= (type Collections__Seqs_i._default.SeqCatRev$T@@2) TyType) (= (type $ly@@87) LayerTypeType)) (= (type |seqs#0@@8|) (SeqType BoxType))) ($Is |seqs#0@@8| (TSeq (TSeq Collections__Seqs_i._default.SeqCatRev$T@@2)))) (and (=> (|Collections____Seqs__i.__default.SeqCatRev#requires| Collections__Seqs_i._default.SeqCatRev$T@@2 $ly@@87 |seqs#0@@8|) true) (=> true (|Collections____Seqs__i.__default.SeqCatRev#requires| Collections__Seqs_i._default.SeqCatRev$T@@2 $ly@@87 |seqs#0@@8|)))) :qid |unknown.0:0| :skolemid |3652| :pattern ( (|Collections____Seqs__i.__default.SeqCatRev#requires| Collections__Seqs_i._default.SeqCatRev$T@@2 $ly@@87 |seqs#0@@8|)) )))
(assert  (=> true (forall ((Collections__Seqs_i._default.SeqCatRev$T@@3 T@U) ($ly@@88 T@U) (|seqs#0@@9| T@U) ) (!  (=> (and (and (and (= (type Collections__Seqs_i._default.SeqCatRev$T@@3) TyType) (= (type $ly@@88) LayerTypeType)) (= (type |seqs#0@@9|) (SeqType BoxType))) (or (|Collections____Seqs__i.__default.SeqCatRev#canCall| Collections__Seqs_i._default.SeqCatRev$T@@3 |seqs#0@@9|) ($Is |seqs#0@@9| (TSeq (TSeq Collections__Seqs_i._default.SeqCatRev$T@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@9|) (LitInt 0))) (and (and (|Collections____Seqs__i.__default.all__but__last#canCall| (TSeq Collections__Seqs_i._default.SeqCatRev$T@@3) |seqs#0@@9|) (|Collections____Seqs__i.__default.SeqCatRev#canCall| Collections__Seqs_i._default.SeqCatRev$T@@3 (Collections____Seqs__i.__default.all__but__last (TSeq Collections__Seqs_i._default.SeqCatRev$T@@3) |seqs#0@@9|))) (|Collections____Seqs__i.__default.last#canCall| (TSeq Collections__Seqs_i._default.SeqCatRev$T@@3) |seqs#0@@9|))) (= (Collections____Seqs__i.__default.SeqCatRev Collections__Seqs_i._default.SeqCatRev$T@@3 ($LS $ly@@88) |seqs#0@@9|) (ite (= (|Seq#Length| |seqs#0@@9|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Collections____Seqs__i.__default.SeqCatRev Collections__Seqs_i._default.SeqCatRev$T@@3 $ly@@88 (Collections____Seqs__i.__default.all__but__last (TSeq Collections__Seqs_i._default.SeqCatRev$T@@3) |seqs#0@@9|)) ($Unbox (SeqType BoxType) (Collections____Seqs__i.__default.last (TSeq Collections__Seqs_i._default.SeqCatRev$T@@3) |seqs#0@@9|))))))) :qid |unknown.0:0| :skolemid |3653| :pattern ( (Collections____Seqs__i.__default.SeqCatRev Collections__Seqs_i._default.SeqCatRev$T@@3 ($LS $ly@@88) |seqs#0@@9|)) ))))
(assert  (=> true (forall ((Collections__Seqs_i._default.SeqCatRev$T@@4 T@U) ($ly@@89 T@U) (|seqs#0@@10| T@U) ) (!  (=> (and (and (and (= (type Collections__Seqs_i._default.SeqCatRev$T@@4) TyType) (= (type $ly@@89) LayerTypeType)) (= (type |seqs#0@@10|) (SeqType BoxType))) (or (|Collections____Seqs__i.__default.SeqCatRev#canCall| Collections__Seqs_i._default.SeqCatRev$T@@4 (Lit |seqs#0@@10|)) ($Is |seqs#0@@10| (TSeq (TSeq Collections__Seqs_i._default.SeqCatRev$T@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0))) (and (and (|Collections____Seqs__i.__default.all__but__last#canCall| (TSeq Collections__Seqs_i._default.SeqCatRev$T@@4) (Lit |seqs#0@@10|)) (|Collections____Seqs__i.__default.SeqCatRev#canCall| Collections__Seqs_i._default.SeqCatRev$T@@4 (Lit (Collections____Seqs__i.__default.all__but__last (TSeq Collections__Seqs_i._default.SeqCatRev$T@@4) (Lit |seqs#0@@10|))))) (|Collections____Seqs__i.__default.last#canCall| (TSeq Collections__Seqs_i._default.SeqCatRev$T@@4) (Lit |seqs#0@@10|)))) (= (Collections____Seqs__i.__default.SeqCatRev Collections__Seqs_i._default.SeqCatRev$T@@4 ($LS $ly@@89) (Lit |seqs#0@@10|)) (ite (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Collections____Seqs__i.__default.SeqCatRev Collections__Seqs_i._default.SeqCatRev$T@@4 ($LS $ly@@89) (Lit (Collections____Seqs__i.__default.all__but__last (TSeq Collections__Seqs_i._default.SeqCatRev$T@@4) (Lit |seqs#0@@10|)))) ($Unbox (SeqType BoxType) (Collections____Seqs__i.__default.last (TSeq Collections__Seqs_i._default.SeqCatRev$T@@4) (Lit |seqs#0@@10|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |3654| :pattern ( (Collections____Seqs__i.__default.SeqCatRev Collections__Seqs_i._default.SeqCatRev$T@@4 ($LS $ly@@89) (Lit |seqs#0@@10|))) ))))
(assert (= (type Tclass.Math.__default) TyType))
(assert (= (Tag Tclass.Math.__default) Tagclass.Math.__default))
(assert (forall ((bx@@99 T@U) ) (!  (=> (and (= (type bx@@99) BoxType) ($IsBox bx@@99 Tclass.Math.__default)) (and (= ($Box ($Unbox refType bx@@99)) bx@@99) ($Is ($Unbox refType bx@@99) Tclass.Math.__default))) :qid |unknown.0:0| :skolemid |3655| :pattern ( ($IsBox bx@@99 Tclass.Math.__default)) )))
(assert (forall (($o@@21 T@U) ) (!  (=> (= (type $o@@21) refType) (and (=> ($Is $o@@21 Tclass.Math.__default) (or (= $o@@21 null) (= (dtype $o@@21) Tclass.Math.__default))) (=> (or (= $o@@21 null) (= (dtype $o@@21) Tclass.Math.__default)) ($Is $o@@21 Tclass.Math.__default)))) :qid |unknown.0:0| :skolemid |3656| :pattern ( ($Is $o@@21 Tclass.Math.__default)) )))
(assert (forall (($o@@22 T@U) ($h@@71 T@U) ) (!  (=> (and (= (type $o@@22) refType) (= (type $h@@71) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@22 Tclass.Math.__default $h@@71) (or (= $o@@22 null) (U_2_bool (MapType1Select (MapType0Select $h@@71 $o@@22) alloc)))) (=> (or (= $o@@22 null) (U_2_bool (MapType1Select (MapType0Select $h@@71 $o@@22) alloc))) ($IsAlloc $o@@22 Tclass.Math.__default $h@@71)))) :qid |unknown.0:0| :skolemid |3657| :pattern ( ($IsAlloc $o@@22 Tclass.Math.__default $h@@71)) )))
(assert (forall (($ly@@90 T@U) (|exp#0| Int) ) (!  (=> (= (type $ly@@90) LayerTypeType) (= (Math.__default.power2 ($LS $ly@@90) |exp#0|) (Math.__default.power2 $ly@@90 |exp#0|))) :qid |Mathidfy.7:22| :skolemid |3658| :pattern ( (Math.__default.power2 ($LS $ly@@90) |exp#0|)) )))
(assert (forall (($ly@@91 T@U) (|exp#0@@0| Int) ) (!  (=> (= (type $ly@@91) LayerTypeType) (= (Math.__default.power2 $ly@@91 |exp#0@@0|) (Math.__default.power2 $LZ |exp#0@@0|))) :qid |Mathidfy.7:22| :skolemid |3659| :pattern ( (Math.__default.power2 (AsFuelBottom $ly@@91) |exp#0@@0|)) )))
(assert  (=> true (forall (($ly@@92 T@U) (|exp#0@@1| Int) ) (!  (=> (and (= (type $ly@@92) LayerTypeType) (or (|Math.__default.power2#canCall| |exp#0@@1|) (<= (LitInt 0) |exp#0@@1|))) (and (> (Math.__default.power2 $ly@@92 |exp#0@@1|) 0) (<= (LitInt 0) (Math.__default.power2 $ly@@92 |exp#0@@1|)))) :qid |Mathidfy.7:22| :skolemid |3660| :pattern ( (Math.__default.power2 $ly@@92 |exp#0@@1|)) ))))
(assert (forall (($ly@@93 T@U) (|exp#0@@2| Int) ) (!  (=> (and (= (type $ly@@93) LayerTypeType) (<= (LitInt 0) |exp#0@@2|)) (and (=> (|Math.__default.power2#requires| $ly@@93 |exp#0@@2|) true) (=> true (|Math.__default.power2#requires| $ly@@93 |exp#0@@2|)))) :qid |Mathidfy.7:22| :skolemid |3661| :pattern ( (|Math.__default.power2#requires| $ly@@93 |exp#0@@2|)) )))
(assert  (=> true (forall (($ly@@94 T@U) (|exp#0@@3| Int) ) (!  (=> (and (= (type $ly@@94) LayerTypeType) (or (|Math.__default.power2#canCall| |exp#0@@3|) (<= (LitInt 0) |exp#0@@3|))) (and (=> (not (= |exp#0@@3| (LitInt 0))) (|Math.__default.power2#canCall| (- |exp#0@@3| 1))) (= (Math.__default.power2 ($LS $ly@@94) |exp#0@@3|) (ite (= |exp#0@@3| (LitInt 0)) 1 (Mul (LitInt 2) (Math.__default.power2 $ly@@94 (- |exp#0@@3| 1))))))) :qid |Mathidfy.7:22| :skolemid |3662| :pattern ( (Math.__default.power2 ($LS $ly@@94) |exp#0@@3|)) ))))
(assert  (=> true (forall (($ly@@95 T@U) (|exp#0@@4| Int) ) (!  (=> (and (= (type $ly@@95) LayerTypeType) (or (|Math.__default.power2#canCall| (LitInt |exp#0@@4|)) (<= (LitInt 0) |exp#0@@4|))) (and (=> (not (= (LitInt |exp#0@@4|) (LitInt 0))) (|Math.__default.power2#canCall| (LitInt (- |exp#0@@4| 1)))) (= (Math.__default.power2 ($LS $ly@@95) (LitInt |exp#0@@4|)) (ite (= (LitInt |exp#0@@4|) (LitInt 0)) 1 (Mul (LitInt 2) (Math.__default.power2 ($LS $ly@@95) (LitInt (- |exp#0@@4| 1)))))))) :qid |Mathidfy.7:22| :weight 3 :skolemid |3663| :pattern ( (Math.__default.power2 ($LS $ly@@95) (LitInt |exp#0@@4|))) ))))
(assert (= (type Tclass.Common____Util__i.__default) TyType))
(assert (= (Tag Tclass.Common____Util__i.__default) Tagclass.Common____Util__i.__default))
(assert (forall ((bx@@100 T@U) ) (!  (=> (and (= (type bx@@100) BoxType) ($IsBox bx@@100 Tclass.Common____Util__i.__default)) (and (= ($Box ($Unbox refType bx@@100)) bx@@100) ($Is ($Unbox refType bx@@100) Tclass.Common____Util__i.__default))) :qid |unknown.0:0| :skolemid |3664| :pattern ( ($IsBox bx@@100 Tclass.Common____Util__i.__default)) )))
(assert (forall (($o@@23 T@U) ) (!  (=> (= (type $o@@23) refType) (and (=> ($Is $o@@23 Tclass.Common____Util__i.__default) (or (= $o@@23 null) (= (dtype $o@@23) Tclass.Common____Util__i.__default))) (=> (or (= $o@@23 null) (= (dtype $o@@23) Tclass.Common____Util__i.__default)) ($Is $o@@23 Tclass.Common____Util__i.__default)))) :qid |unknown.0:0| :skolemid |3665| :pattern ( ($Is $o@@23 Tclass.Common____Util__i.__default)) )))
(assert (forall (($o@@24 T@U) ($h@@72 T@U) ) (!  (=> (and (= (type $o@@24) refType) (= (type $h@@72) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@24 Tclass.Common____Util__i.__default $h@@72) (or (= $o@@24 null) (U_2_bool (MapType1Select (MapType0Select $h@@72 $o@@24) alloc)))) (=> (or (= $o@@24 null) (U_2_bool (MapType1Select (MapType0Select $h@@72 $o@@24) alloc))) ($IsAlloc $o@@24 Tclass.Common____Util__i.__default $h@@72)))) :qid |unknown.0:0| :skolemid |3666| :pattern ( ($IsAlloc $o@@24 Tclass.Common____Util__i.__default $h@@72)) )))
(assert (forall (($ly@@96 T@U) (|bytes#0| T@U) ) (!  (=> (and (= (type $ly@@96) LayerTypeType) (= (type |bytes#0|) (SeqType BoxType))) (= (Common____Util__i.__default.BEByteSeqToInt ($LS $ly@@96) |bytes#0|) (Common____Util__i.__default.BEByteSeqToInt $ly@@96 |bytes#0|))) :qid |Utilidfy.118:10| :skolemid |3667| :pattern ( (Common____Util__i.__default.BEByteSeqToInt ($LS $ly@@96) |bytes#0|)) )))
(assert (forall (($ly@@97 T@U) (|bytes#0@@0| T@U) ) (!  (=> (and (= (type $ly@@97) LayerTypeType) (= (type |bytes#0@@0|) (SeqType BoxType))) (= (Common____Util__i.__default.BEByteSeqToInt $ly@@97 |bytes#0@@0|) (Common____Util__i.__default.BEByteSeqToInt $LZ |bytes#0@@0|))) :qid |Utilidfy.118:10| :skolemid |3668| :pattern ( (Common____Util__i.__default.BEByteSeqToInt (AsFuelBottom $ly@@97) |bytes#0@@0|)) )))
(assert  (=> true (forall (($ly@@98 T@U) (|bytes#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@98) LayerTypeType) (= (type |bytes#0@@1|) (SeqType BoxType))) (or (|Common____Util__i.__default.BEByteSeqToInt#canCall| |bytes#0@@1|) ($Is |bytes#0@@1| (TSeq Tclass.NativeTypes.byte)))) true) :qid |Utilidfy.118:10| :skolemid |3669| :pattern ( (Common____Util__i.__default.BEByteSeqToInt $ly@@98 |bytes#0@@1|)) ))))
(assert (forall (($ly@@99 T@U) (|bytes#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@99) LayerTypeType) (= (type |bytes#0@@2|) (SeqType BoxType))) ($Is |bytes#0@@2| (TSeq Tclass.NativeTypes.byte))) (and (=> (|Common____Util__i.__default.BEByteSeqToInt#requires| $ly@@99 |bytes#0@@2|) true) (=> true (|Common____Util__i.__default.BEByteSeqToInt#requires| $ly@@99 |bytes#0@@2|)))) :qid |Utilidfy.118:10| :skolemid |3670| :pattern ( (|Common____Util__i.__default.BEByteSeqToInt#requires| $ly@@99 |bytes#0@@2|)) )))
(assert  (=> true (forall (($ly@@100 T@U) (|bytes#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@100) LayerTypeType) (= (type |bytes#0@@3|) (SeqType BoxType))) (or (|Common____Util__i.__default.BEByteSeqToInt#canCall| |bytes#0@@3|) ($Is |bytes#0@@3| (TSeq Tclass.NativeTypes.byte)))) (and (=> (not (|Seq#Equal| |bytes#0@@3| (|Seq#Empty| BoxType))) (|Common____Util__i.__default.BEByteSeqToInt#canCall| (|Seq#Take| |bytes#0@@3| (- (|Seq#Length| |bytes#0@@3|) 1)))) (= (Common____Util__i.__default.BEByteSeqToInt ($LS $ly@@100) |bytes#0@@3|) (ite (|Seq#Equal| |bytes#0@@3| (|Seq#Empty| BoxType)) 0 (+ (Mul (Common____Util__i.__default.BEByteSeqToInt $ly@@100 (|Seq#Take| |bytes#0@@3| (- (|Seq#Length| |bytes#0@@3|) 1))) (LitInt 256)) (U_2_int ($Unbox intType (|Seq#Index| |bytes#0@@3| (- (|Seq#Length| |bytes#0@@3|) 1))))))))) :qid |Utilidfy.118:10| :skolemid |3671| :pattern ( (Common____Util__i.__default.BEByteSeqToInt ($LS $ly@@100) |bytes#0@@3|)) ))))
(assert  (=> true (forall (($ly@@101 T@U) (|bytes#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@101) LayerTypeType) (= (type |bytes#0@@4|) (SeqType BoxType))) (or (|Common____Util__i.__default.BEByteSeqToInt#canCall| (Lit |bytes#0@@4|)) ($Is |bytes#0@@4| (TSeq Tclass.NativeTypes.byte)))) (and (=> (not (|Seq#Equal| |bytes#0@@4| (|Seq#Empty| BoxType))) (|Common____Util__i.__default.BEByteSeqToInt#canCall| (|Seq#Take| (Lit |bytes#0@@4|) (- (|Seq#Length| (Lit |bytes#0@@4|)) 1)))) (= (Common____Util__i.__default.BEByteSeqToInt ($LS $ly@@101) (Lit |bytes#0@@4|)) (ite (|Seq#Equal| |bytes#0@@4| (|Seq#Empty| BoxType)) 0 (+ (Mul (Common____Util__i.__default.BEByteSeqToInt ($LS $ly@@101) (|Seq#Take| (Lit |bytes#0@@4|) (- (|Seq#Length| (Lit |bytes#0@@4|)) 1))) (LitInt 256)) (U_2_int ($Unbox intType (|Seq#Index| (Lit |bytes#0@@4|) (- (|Seq#Length| (Lit |bytes#0@@4|)) 1))))))))) :qid |Utilidfy.118:10| :weight 3 :skolemid |3672| :pattern ( (Common____Util__i.__default.BEByteSeqToInt ($LS $ly@@101) (Lit |bytes#0@@4|))) ))))
(assert (forall ((arg0@@273 T@U) (arg1@@129 Int) (arg2@@79 Int) ) (! (= (type (Common____Util__i.__default.BEUintToSeqByte arg0@@273 arg1@@129 arg2@@79)) (SeqType BoxType)) :qid |funType:Common____Util__i.__default.BEUintToSeqByte| :pattern ( (Common____Util__i.__default.BEUintToSeqByte arg0@@273 arg1@@129 arg2@@79)) )))
(assert (forall (($ly@@102 T@U) (|v#0@@12| Int) (|width#0| Int) ) (!  (=> (= (type $ly@@102) LayerTypeType) (= (Common____Util__i.__default.BEUintToSeqByte ($LS $ly@@102) |v#0@@12| |width#0|) (Common____Util__i.__default.BEUintToSeqByte $ly@@102 |v#0@@12| |width#0|))) :qid |Utilidfy.222:10| :skolemid |3673| :pattern ( (Common____Util__i.__default.BEUintToSeqByte ($LS $ly@@102) |v#0@@12| |width#0|)) )))
(assert (forall (($ly@@103 T@U) (|v#0@@13| Int) (|width#0@@0| Int) ) (!  (=> (= (type $ly@@103) LayerTypeType) (= (Common____Util__i.__default.BEUintToSeqByte $ly@@103 |v#0@@13| |width#0@@0|) (Common____Util__i.__default.BEUintToSeqByte $LZ |v#0@@13| |width#0@@0|))) :qid |Utilidfy.222:10| :skolemid |3674| :pattern ( (Common____Util__i.__default.BEUintToSeqByte (AsFuelBottom $ly@@103) |v#0@@13| |width#0@@0|)) )))
(assert  (=> true (forall (($ly@@104 T@U) (|v#0@@14| Int) (|width#0@@1| Int) ) (!  (=> (and (= (type $ly@@104) LayerTypeType) true) (and (=> (and (>= |width#0@@1| (LitInt 0)) (>= |v#0@@14| (LitInt 0))) (= (|Seq#Length| (Common____Util__i.__default.BEUintToSeqByte $ly@@104 |v#0@@14| |width#0@@1|)) |width#0@@1|)) ($Is (Common____Util__i.__default.BEUintToSeqByte $ly@@104 |v#0@@14| |width#0@@1|) (TSeq Tclass.NativeTypes.byte)))) :qid |Utilidfy.222:10| :skolemid |3675| :pattern ( (Common____Util__i.__default.BEUintToSeqByte $ly@@104 |v#0@@14| |width#0@@1|)) ))))
(assert (forall (($ly@@105 T@U) (|v#0@@15| Int) (|width#0@@2| Int) ) (!  (=> (= (type $ly@@105) LayerTypeType) (and (=> (|Common____Util__i.__default.BEUintToSeqByte#requires| $ly@@105 |v#0@@15| |width#0@@2|) true) (=> true (|Common____Util__i.__default.BEUintToSeqByte#requires| $ly@@105 |v#0@@15| |width#0@@2|)))) :qid |Utilidfy.222:10| :skolemid |3676| :pattern ( (|Common____Util__i.__default.BEUintToSeqByte#requires| $ly@@105 |v#0@@15| |width#0@@2|)) )))
(assert  (=> true (forall (($ly@@106 T@U) (|v#0@@16| Int) (|width#0@@3| Int) ) (!  (=> (and (= (type $ly@@106) LayerTypeType) true) (and (=> (and (> |width#0@@3| 0) (>= |v#0@@16| (LitInt 0))) (|Common____Util__i.__default.BEUintToSeqByte#canCall| (Div |v#0@@16| (LitInt 256)) (- |width#0@@3| 1))) (= (Common____Util__i.__default.BEUintToSeqByte ($LS $ly@@106) |v#0@@16| |width#0@@3|) (ite  (and (> |width#0@@3| 0) (>= |v#0@@16| (LitInt 0))) (|Seq#Append| (Common____Util__i.__default.BEUintToSeqByte $ly@@106 (Div |v#0@@16| (LitInt 256)) (- |width#0@@3| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (Mod |v#0@@16| (LitInt 256)))))) (|Seq#Empty| BoxType))))) :qid |Utilidfy.222:10| :skolemid |3677| :pattern ( (Common____Util__i.__default.BEUintToSeqByte ($LS $ly@@106) |v#0@@16| |width#0@@3|)) ))))
(assert  (=> true (forall (($ly@@107 T@U) (|v#0@@17| Int) (|width#0@@4| Int) ) (!  (=> (and (= (type $ly@@107) LayerTypeType) true) (and (=> (and (> |width#0@@4| 0) (>= (LitInt |v#0@@17|) (LitInt 0))) (|Common____Util__i.__default.BEUintToSeqByte#canCall| (LitInt (Div |v#0@@17| (LitInt 256))) (LitInt (- |width#0@@4| 1)))) (= (Common____Util__i.__default.BEUintToSeqByte ($LS $ly@@107) (LitInt |v#0@@17|) (LitInt |width#0@@4|)) (ite  (and (> |width#0@@4| 0) (>= (LitInt |v#0@@17|) (LitInt 0))) (|Seq#Append| (Common____Util__i.__default.BEUintToSeqByte ($LS $ly@@107) (LitInt (Div |v#0@@17| (LitInt 256))) (LitInt (- |width#0@@4| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt (Mod |v#0@@17| (LitInt 256))))))) (|Seq#Empty| BoxType))))) :qid |Utilidfy.222:10| :weight 3 :skolemid |3678| :pattern ( (Common____Util__i.__default.BEUintToSeqByte ($LS $ly@@107) (LitInt |v#0@@17|) (LitInt |width#0@@4|))) ))))
(assert (forall ((arg0@@274 Int) ) (! (= (type (Common____Util__i.__default.Uint64ToSeqByte arg0@@274)) (SeqType BoxType)) :qid |funType:Common____Util__i.__default.Uint64ToSeqByte| :pattern ( (Common____Util__i.__default.Uint64ToSeqByte arg0@@274)) )))
(assert  (=> true (forall ((|u#0| Int) ) (!  (=> (or (|Common____Util__i.__default.Uint64ToSeqByte#canCall| |u#0|) (and (<= (LitInt 0) |u#0|) (< |u#0| 18446744073709551616))) (and (|Seq#Equal| (Common____Util__i.__default.Uint64ToSeqByte |u#0|) (Common____Util__i.__default.BEUintToSeqByte ($LS $LZ) |u#0| (LitInt 8))) ($Is (Common____Util__i.__default.Uint64ToSeqByte |u#0|) (TSeq Tclass.NativeTypes.byte)))) :qid |Utilidfy.315:26| :skolemid |3679| :pattern ( (Common____Util__i.__default.Uint64ToSeqByte |u#0|)) ))))
(assert (forall ((|u#0@@0| Int) ) (!  (=> (and (<= (LitInt 0) |u#0@@0|) (< |u#0@@0| 18446744073709551616)) (and (=> (|Common____Util__i.__default.Uint64ToSeqByte#requires| |u#0@@0|) true) (=> true (|Common____Util__i.__default.Uint64ToSeqByte#requires| |u#0@@0|)))) :qid |Utilidfy.315:26| :skolemid |3680| :pattern ( (|Common____Util__i.__default.Uint64ToSeqByte#requires| |u#0@@0|)) )))
(assert  (=> true (forall ((|u#0@@1| Int) ) (!  (=> (or (|Common____Util__i.__default.Uint64ToSeqByte#canCall| |u#0@@1|) (and (<= (LitInt 0) |u#0@@1|) (< |u#0@@1| 18446744073709551616))) (= (Common____Util__i.__default.Uint64ToSeqByte |u#0@@1|) (let ((|bs#0| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (Div |u#0@@1| (LitInt 72057594037927936))))) ($Box (int_2_U (Mod (Div |u#0@@1| (LitInt 281474976710656)) (LitInt 256))))) ($Box (int_2_U (Mod (Div |u#0@@1| (LitInt 1099511627776)) (LitInt 256))))) ($Box (int_2_U (Mod (Div |u#0@@1| (LitInt 4294967296)) (LitInt 256))))) ($Box (int_2_U (Mod (Div |u#0@@1| (LitInt 16777216)) (LitInt 256))))) ($Box (int_2_U (Mod (Div |u#0@@1| (LitInt 65536)) (LitInt 256))))) ($Box (int_2_U (Mod (Div |u#0@@1| (LitInt 256)) (LitInt 256))))) ($Box (int_2_U (Mod |u#0@@1| (LitInt 256))))))) |bs#0|))) :qid |Utilidfy.315:26| :skolemid |3681| :pattern ( (Common____Util__i.__default.Uint64ToSeqByte |u#0@@1|)) ))))
(assert  (=> true (forall ((|u#0@@2| Int) ) (!  (=> (or (|Common____Util__i.__default.Uint64ToSeqByte#canCall| (LitInt |u#0@@2|)) (and (<= (LitInt 0) |u#0@@2|) (< |u#0@@2| 18446744073709551616))) (= (Common____Util__i.__default.Uint64ToSeqByte (LitInt |u#0@@2|)) (let ((|bs#1| (Lit (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt (Div |u#0@@2| (LitInt 72057594037927936)))))) ($Box (int_2_U (LitInt (Mod (Div |u#0@@2| (LitInt 281474976710656)) (LitInt 256)))))) ($Box (int_2_U (LitInt (Mod (Div |u#0@@2| (LitInt 1099511627776)) (LitInt 256)))))) ($Box (int_2_U (LitInt (Mod (Div |u#0@@2| (LitInt 4294967296)) (LitInt 256)))))) ($Box (int_2_U (LitInt (Mod (Div |u#0@@2| (LitInt 16777216)) (LitInt 256)))))) ($Box (int_2_U (LitInt (Mod (Div |u#0@@2| (LitInt 65536)) (LitInt 256)))))) ($Box (int_2_U (LitInt (Mod (Div |u#0@@2| (LitInt 256)) (LitInt 256)))))) ($Box (int_2_U (LitInt (Mod |u#0@@2| (LitInt 256))))))))) |bs#1|))) :qid |Utilidfy.315:26| :weight 3 :skolemid |3682| :pattern ( (Common____Util__i.__default.Uint64ToSeqByte (LitInt |u#0@@2|))) ))))
(assert  (=> true (forall ((|bs#0@@0| T@U) ) (!  (=> (and (= (type |bs#0@@0|) (SeqType BoxType)) (or (|Common____Util__i.__default.SeqByteToUint16#canCall| |bs#0@@0|) (and ($Is |bs#0@@0| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |bs#0@@0|) (LitInt NativeTypes.__default.Uint16Size))))) (and (and (and (and (<= (LitInt 0) (Common____Util__i.__default.BEByteSeqToInt ($LS $LZ) |bs#0@@0|)) (< (Common____Util__i.__default.BEByteSeqToInt ($LS $LZ) |bs#0@@0|) 18446744073709551616)) (< (Common____Util__i.__default.BEByteSeqToInt ($LS $LZ) |bs#0@@0|) 65536)) (= (Common____Util__i.__default.SeqByteToUint16 |bs#0@@0|) (Common____Util__i.__default.BEByteSeqToInt ($LS $LZ) |bs#0@@0|))) (and (<= (LitInt 0) (Common____Util__i.__default.SeqByteToUint16 |bs#0@@0|)) (< (Common____Util__i.__default.SeqByteToUint16 |bs#0@@0|) 65536)))) :qid |Utilidfy.352:33| :skolemid |3683| :pattern ( (Common____Util__i.__default.SeqByteToUint16 |bs#0@@0|)) ))))
(assert (forall ((|bs#0@@1| T@U) ) (!  (=> (and (= (type |bs#0@@1|) (SeqType BoxType)) ($Is |bs#0@@1| (TSeq Tclass.NativeTypes.byte))) (and (=> (|Common____Util__i.__default.SeqByteToUint16#requires| |bs#0@@1|) (= (|Seq#Length| |bs#0@@1|) (LitInt NativeTypes.__default.Uint16Size))) (=> (= (|Seq#Length| |bs#0@@1|) (LitInt NativeTypes.__default.Uint16Size)) (|Common____Util__i.__default.SeqByteToUint16#requires| |bs#0@@1|)))) :qid |Utilidfy.352:33| :skolemid |3684| :pattern ( (|Common____Util__i.__default.SeqByteToUint16#requires| |bs#0@@1|)) )))
(assert  (=> true (forall ((|bs#0@@2| T@U) ) (!  (=> (and (= (type |bs#0@@2|) (SeqType BoxType)) (or (|Common____Util__i.__default.SeqByteToUint16#canCall| |bs#0@@2|) (and ($Is |bs#0@@2| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |bs#0@@2|) (LitInt NativeTypes.__default.Uint16Size))))) (= (Common____Util__i.__default.SeqByteToUint16 |bs#0@@2|) (+ (Mul (U_2_int ($Unbox intType (|Seq#Index| |bs#0@@2| (LitInt 0)))) (LitInt 256)) (U_2_int ($Unbox intType (|Seq#Index| |bs#0@@2| (LitInt 1))))))) :qid |Utilidfy.352:33| :skolemid |3685| :pattern ( (Common____Util__i.__default.SeqByteToUint16 |bs#0@@2|)) ))))
(assert  (=> true (forall ((|bs#0@@3| T@U) ) (!  (=> (and (= (type |bs#0@@3|) (SeqType BoxType)) (or (|Common____Util__i.__default.SeqByteToUint16#canCall| (Lit |bs#0@@3|)) (and ($Is |bs#0@@3| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| (Lit |bs#0@@3|)) (LitInt NativeTypes.__default.Uint16Size))))) (= (Common____Util__i.__default.SeqByteToUint16 (Lit |bs#0@@3|)) (+ (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |bs#0@@3|) (LitInt 0)))) (LitInt 256)) (U_2_int ($Unbox intType (|Seq#Index| (Lit |bs#0@@3|) (LitInt 1))))))) :qid |Utilidfy.352:33| :weight 3 :skolemid |3686| :pattern ( (Common____Util__i.__default.SeqByteToUint16 (Lit |bs#0@@3|))) ))))
(assert (= (type Tclass.Libraries____base__s.__default) TyType))
(assert (= (Tag Tclass.Libraries____base__s.__default) Tagclass.Libraries____base__s.__default))
(assert (forall ((bx@@101 T@U) ) (!  (=> (and (= (type bx@@101) BoxType) ($IsBox bx@@101 Tclass.Libraries____base__s.__default)) (and (= ($Box ($Unbox refType bx@@101)) bx@@101) ($Is ($Unbox refType bx@@101) Tclass.Libraries____base__s.__default))) :qid |unknown.0:0| :skolemid |3687| :pattern ( ($IsBox bx@@101 Tclass.Libraries____base__s.__default)) )))
(assert (forall (($o@@25 T@U) ) (!  (=> (= (type $o@@25) refType) (and (=> ($Is $o@@25 Tclass.Libraries____base__s.__default) (or (= $o@@25 null) (= (dtype $o@@25) Tclass.Libraries____base__s.__default))) (=> (or (= $o@@25 null) (= (dtype $o@@25) Tclass.Libraries____base__s.__default)) ($Is $o@@25 Tclass.Libraries____base__s.__default)))) :qid |unknown.0:0| :skolemid |3688| :pattern ( ($Is $o@@25 Tclass.Libraries____base__s.__default)) )))
(assert (forall (($o@@26 T@U) ($h@@73 T@U) ) (!  (=> (and (= (type $o@@26) refType) (= (type $h@@73) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@26 Tclass.Libraries____base__s.__default $h@@73) (or (= $o@@26 null) (U_2_bool (MapType1Select (MapType0Select $h@@73 $o@@26) alloc)))) (=> (or (= $o@@26 null) (U_2_bool (MapType1Select (MapType0Select $h@@73 $o@@26) alloc))) ($IsAlloc $o@@26 Tclass.Libraries____base__s.__default $h@@73)))) :qid |unknown.0:0| :skolemid |3689| :pattern ( ($IsAlloc $o@@26 Tclass.Libraries____base__s.__default $h@@73)) )))
(assert  (=> true (forall ((|i#0@@28| Int) ) (!  (=> true true) :qid |basesidf.4:28| :skolemid |3690| :pattern ( (Libraries____base__s.__default.unroll |i#0@@28|)) ))))
(assert (forall ((|i#0@@29| Int) ) (!  (and (=> (|Libraries____base__s.__default.unroll#requires| |i#0@@29|) true) (=> true (|Libraries____base__s.__default.unroll#requires| |i#0@@29|))) :qid |basesidf.4:28| :skolemid |3691| :pattern ( (|Libraries____base__s.__default.unroll#requires| |i#0@@29|)) )))
(assert  (=> true (forall ((|i#0@@30| Int) ) (!  (=> true (and (=> (Libraries____base__s.__default.unroll |i#0@@30|) (U_2_bool (Lit (bool_2_U true)))) (=> (U_2_bool (Lit (bool_2_U true))) (Libraries____base__s.__default.unroll |i#0@@30|)))) :qid |basesidf.4:28| :skolemid |3692| :pattern ( (Libraries____base__s.__default.unroll |i#0@@30|)) ))))
(assert  (=> true (forall ((|i#0@@31| Int) ) (!  (=> true (and (=> (Libraries____base__s.__default.unroll (LitInt |i#0@@31|)) (U_2_bool (Lit (bool_2_U true)))) (=> (U_2_bool (Lit (bool_2_U true))) (Libraries____base__s.__default.unroll (LitInt |i#0@@31|))))) :qid |basesidf.4:28| :weight 3 :skolemid |3693| :pattern ( (Libraries____base__s.__default.unroll (LitInt |i#0@@31|))) ))))
(assert  (=> true (forall ((|i#0@@32| Int) ) (!  (=> true true) :qid |basesidf.5:18| :skolemid |3694| :pattern ( (Libraries____base__s.__default.Trigger |i#0@@32|)) ))))
(assert (forall ((|i#0@@33| Int) ) (!  (and (=> (|Libraries____base__s.__default.Trigger#requires| |i#0@@33|) true) (=> true (|Libraries____base__s.__default.Trigger#requires| |i#0@@33|))) :qid |basesidf.5:18| :skolemid |3695| :pattern ( (|Libraries____base__s.__default.Trigger#requires| |i#0@@33|)) )))
(assert  (=> true (forall ((|i#0@@34| Int) ) (!  (=> true (and (=> (Libraries____base__s.__default.Trigger |i#0@@34|) (U_2_bool (Lit (bool_2_U true)))) (=> (U_2_bool (Lit (bool_2_U true))) (Libraries____base__s.__default.Trigger |i#0@@34|)))) :qid |basesidf.5:18| :skolemid |3696| :pattern ( (Libraries____base__s.__default.Trigger |i#0@@34|)) ))))
(assert  (=> true (forall ((|i#0@@35| Int) ) (!  (=> true (and (=> (Libraries____base__s.__default.Trigger (LitInt |i#0@@35|)) (U_2_bool (Lit (bool_2_U true)))) (=> (U_2_bool (Lit (bool_2_U true))) (Libraries____base__s.__default.Trigger (LitInt |i#0@@35|))))) :qid |basesidf.5:18| :weight 3 :skolemid |3697| :pattern ( (Libraries____base__s.__default.Trigger (LitInt |i#0@@35|))) ))))
(assert  (=> true (forall ((Libraries__base_s._default.sizeof$A T@U) (|a#0@@17| T@U) ) (!  (=> (and (and (= (type Libraries__base_s._default.sizeof$A) TyType) (= (type |a#0@@17|) BoxType)) (or (|Libraries____base__s.__default.sizeof#canCall| Libraries__base_s._default.sizeof$A |a#0@@17|) ($IsBox |a#0@@17| Libraries__base_s._default.sizeof$A))) true) :qid |unknown.0:0| :skolemid |3698| :pattern ( (Libraries____base__s.__default.sizeof Libraries__base_s._default.sizeof$A |a#0@@17|)) ))))
(assert (forall ((Libraries__base_s._default.sizeof$A@@0 T@U) (|a#0@@18| T@U) ) (!  (=> (and (and (= (type Libraries__base_s._default.sizeof$A@@0) TyType) (= (type |a#0@@18|) BoxType)) ($IsBox |a#0@@18| Libraries__base_s._default.sizeof$A@@0)) (and (=> (|Libraries____base__s.__default.sizeof#requires| Libraries__base_s._default.sizeof$A@@0 |a#0@@18|) true) (=> true (|Libraries____base__s.__default.sizeof#requires| Libraries__base_s._default.sizeof$A@@0 |a#0@@18|)))) :qid |unknown.0:0| :skolemid |3699| :pattern ( (|Libraries____base__s.__default.sizeof#requires| Libraries__base_s._default.sizeof$A@@0 |a#0@@18|)) )))
(assert  (=> true (forall ((Libraries__base_s._default.sizeof$A@@1 T@U) (|a#0@@19| T@U) ) (!  (=> (and (and (= (type Libraries__base_s._default.sizeof$A@@1) TyType) (= (type |a#0@@19|) BoxType)) (or (|Libraries____base__s.__default.sizeof#canCall| Libraries__base_s._default.sizeof$A@@1 |a#0@@19|) ($IsBox |a#0@@19| Libraries__base_s._default.sizeof$A@@1))) (= (Libraries____base__s.__default.sizeof Libraries__base_s._default.sizeof$A@@1 |a#0@@19|) (LitInt 1))) :qid |unknown.0:0| :skolemid |3700| :pattern ( (Libraries____base__s.__default.sizeof Libraries__base_s._default.sizeof$A@@1 |a#0@@19|)) ))))
(assert  (=> true (forall ((Libraries__base_s._default.sizeof$A@@2 T@U) (|a#0@@20| T@U) ) (!  (=> (and (and (= (type Libraries__base_s._default.sizeof$A@@2) TyType) (= (type |a#0@@20|) BoxType)) (or (|Libraries____base__s.__default.sizeof#canCall| Libraries__base_s._default.sizeof$A@@2 (Lit |a#0@@20|)) ($IsBox |a#0@@20| Libraries__base_s._default.sizeof$A@@2))) (= (Libraries____base__s.__default.sizeof Libraries__base_s._default.sizeof$A@@2 (Lit |a#0@@20|)) (LitInt 1))) :qid |unknown.0:0| :weight 3 :skolemid |3701| :pattern ( (Libraries____base__s.__default.sizeof Libraries__base_s._default.sizeof$A@@2 (Lit |a#0@@20|))) ))))
(assert (= (DatatypeCtorId |#Options.Option.None|) |##Options.Option.None|))
(assert (forall ((d@@64 T@U) ) (!  (=> (= (type d@@64) DatatypeTypeType) (and (=> (Options.Option.None_q d@@64) (= (DatatypeCtorId d@@64) |##Options.Option.None|)) (=> (= (DatatypeCtorId d@@64) |##Options.Option.None|) (Options.Option.None_q d@@64)))) :qid |unknown.0:0| :skolemid |3702| :pattern ( (Options.Option.None_q d@@64)) )))
(assert (forall ((d@@65 T@U) ) (!  (=> (and (= (type d@@65) DatatypeTypeType) (Options.Option.None_q d@@65)) (= d@@65 |#Options.Option.None|)) :qid |unknown.0:0| :skolemid |3703| :pattern ( (Options.Option.None_q d@@65)) )))
(assert (forall ((Options.Option$V@@2 T@U) ) (!  (=> (= (type Options.Option$V@@2) TyType) ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) :qid |unknown.0:0| :skolemid |3704| :pattern ( ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) )))
(assert (forall ((Options.Option$V@@3 T@U) ($h@@74 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@3) TyType) (= (type $h@@74) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@74)) ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@74)) :qid |unknown.0:0| :skolemid |3705| :pattern ( ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@74)) )))
(assert (= |#Options.Option.None| (Lit |#Options.Option.None|)))
(assert (forall ((|a#5#0#0@@0| T@U) ) (!  (=> (= (type |a#5#0#0@@0|) BoxType) (= (DatatypeCtorId (|#Options.Option.Some| |a#5#0#0@@0|)) |##Options.Option.Some|)) :qid |Optionsd.2:36| :skolemid |3706| :pattern ( (|#Options.Option.Some| |a#5#0#0@@0|)) )))
(assert (forall ((d@@66 T@U) ) (!  (=> (= (type d@@66) DatatypeTypeType) (and (=> (Options.Option.Some_q d@@66) (= (DatatypeCtorId d@@66) |##Options.Option.Some|)) (=> (= (DatatypeCtorId d@@66) |##Options.Option.Some|) (Options.Option.Some_q d@@66)))) :qid |unknown.0:0| :skolemid |3707| :pattern ( (Options.Option.Some_q d@@66)) )))
(assert (forall ((d@@67 T@U) ) (!  (=> (and (= (type d@@67) DatatypeTypeType) (Options.Option.Some_q d@@67)) (exists ((|a#6#0#0@@0| T@U) ) (!  (and (= (type |a#6#0#0@@0|) BoxType) (= d@@67 (|#Options.Option.Some| |a#6#0#0@@0|))) :qid |Optionsd.2:36| :skolemid |3708| :no-pattern (type |a#6#0#0@@0|) :no-pattern (U_2_int |a#6#0#0@@0|) :no-pattern (U_2_bool |a#6#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |3709| :pattern ( (Options.Option.Some_q d@@67)) )))
(assert (forall ((Options.Option$V@@4 T@U) (|a#7#0#0@@0| T@U) ) (!  (=> (and (= (type Options.Option$V@@4) TyType) (= (type |a#7#0#0@@0|) BoxType)) (and (=> ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4)) ($IsBox |a#7#0#0@@0| Options.Option$V@@4)) (=> ($IsBox |a#7#0#0@@0| Options.Option$V@@4) ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4))))) :qid |unknown.0:0| :skolemid |3710| :pattern ( ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4))) )))
(assert (forall ((Options.Option$V@@5 T@U) (|a#8#0#0@@0| T@U) ($h@@75 T@U) ) (!  (=> (and (and (and (= (type Options.Option$V@@5) TyType) (= (type |a#8#0#0@@0|) BoxType)) (= (type $h@@75) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@75)) (and (=> ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@75) ($IsAllocBox |a#8#0#0@@0| Options.Option$V@@5 $h@@75)) (=> ($IsAllocBox |a#8#0#0@@0| Options.Option$V@@5 $h@@75) ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@75)))) :qid |unknown.0:0| :skolemid |3711| :pattern ( ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@75)) )))
(assert (forall ((d@@68 T@U) (Options.Option$V@@6 T@U) ($h@@76 T@U) ) (!  (=> (and (and (and (= (type d@@68) DatatypeTypeType) (= (type Options.Option$V@@6) TyType)) (= (type $h@@76) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@76) (and (Options.Option.Some_q d@@68) ($IsAlloc d@@68 (Tclass.Options.Option Options.Option$V@@6) $h@@76)))) ($IsAllocBox (Options.Option.value d@@68) Options.Option$V@@6 $h@@76)) :qid |unknown.0:0| :skolemid |3712| :pattern ( ($IsAllocBox (Options.Option.value d@@68) Options.Option$V@@6 $h@@76)) )))
(assert (forall ((|a#9#0#0| T@U) ) (!  (=> (= (type |a#9#0#0|) BoxType) (= (|#Options.Option.Some| (Lit |a#9#0#0|)) (Lit (|#Options.Option.Some| |a#9#0#0|)))) :qid |Optionsd.2:36| :skolemid |3713| :pattern ( (|#Options.Option.Some| (Lit |a#9#0#0|))) )))
(assert (forall ((|a#10#0#0| T@U) ) (!  (=> (= (type |a#10#0#0|) BoxType) (= (Options.Option.value (|#Options.Option.Some| |a#10#0#0|)) |a#10#0#0|)) :qid |Optionsd.2:36| :skolemid |3714| :pattern ( (|#Options.Option.Some| |a#10#0#0|)) )))
(assert (forall ((|a#11#0#0| T@U) ) (!  (=> (= (type |a#11#0#0|) BoxType) (< (BoxRank |a#11#0#0|) (DtRank (|#Options.Option.Some| |a#11#0#0|)))) :qid |Optionsd.2:36| :skolemid |3715| :pattern ( (|#Options.Option.Some| |a#11#0#0|)) )))
(assert (forall ((d@@69 T@U) ) (!  (=> (and (= (type d@@69) DatatypeTypeType) (|$IsA#Options.Option| d@@69)) (or (Options.Option.None_q d@@69) (Options.Option.Some_q d@@69))) :qid |unknown.0:0| :skolemid |3716| :pattern ( (|$IsA#Options.Option| d@@69)) )))
(assert (forall ((Options.Option$V@@7 T@U) (d@@70 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@7) TyType) (= (type d@@70) DatatypeTypeType)) ($Is d@@70 (Tclass.Options.Option Options.Option$V@@7))) (or (Options.Option.None_q d@@70) (Options.Option.Some_q d@@70))) :qid |unknown.0:0| :skolemid |3717| :pattern ( (Options.Option.Some_q d@@70) ($Is d@@70 (Tclass.Options.Option Options.Option$V@@7))) :pattern ( (Options.Option.None_q d@@70) ($Is d@@70 (Tclass.Options.Option Options.Option$V@@7))) )))
(assert (forall ((a@@136 T@U) (b@@85 T@U) ) (!  (=> (and (and (= (type a@@136) DatatypeTypeType) (= (type b@@85) DatatypeTypeType)) (and (Options.Option.None_q a@@136) (Options.Option.None_q b@@85))) (and (=> (|Options.Option#Equal| a@@136 b@@85) true) (=> true (|Options.Option#Equal| a@@136 b@@85)))) :qid |unknown.0:0| :skolemid |3718| :pattern ( (|Options.Option#Equal| a@@136 b@@85) (Options.Option.None_q a@@136)) :pattern ( (|Options.Option#Equal| a@@136 b@@85) (Options.Option.None_q b@@85)) )))
(assert (forall ((a@@137 T@U) (b@@86 T@U) ) (!  (=> (and (and (= (type a@@137) DatatypeTypeType) (= (type b@@86) DatatypeTypeType)) (and (Options.Option.Some_q a@@137) (Options.Option.Some_q b@@86))) (and (=> (|Options.Option#Equal| a@@137 b@@86) (= (Options.Option.value a@@137) (Options.Option.value b@@86))) (=> (= (Options.Option.value a@@137) (Options.Option.value b@@86)) (|Options.Option#Equal| a@@137 b@@86)))) :qid |unknown.0:0| :skolemid |3719| :pattern ( (|Options.Option#Equal| a@@137 b@@86) (Options.Option.Some_q a@@137)) :pattern ( (|Options.Option#Equal| a@@137 b@@86) (Options.Option.Some_q b@@86)) )))
(assert (forall ((a@@138 T@U) (b@@87 T@U) ) (!  (=> (and (= (type a@@138) DatatypeTypeType) (= (type b@@87) DatatypeTypeType)) (and (=> (|Options.Option#Equal| a@@138 b@@87) (= a@@138 b@@87)) (=> (= a@@138 b@@87) (|Options.Option#Equal| a@@138 b@@87)))) :qid |unknown.0:0| :skolemid |3720| :pattern ( (|Options.Option#Equal| a@@138 b@@87)) )))
(assert (= (type Tclass.Options.__default) TyType))
(assert (= (Tag Tclass.Options.__default) Tagclass.Options.__default))
(assert (forall ((bx@@102 T@U) ) (!  (=> (and (= (type bx@@102) BoxType) ($IsBox bx@@102 Tclass.Options.__default)) (and (= ($Box ($Unbox refType bx@@102)) bx@@102) ($Is ($Unbox refType bx@@102) Tclass.Options.__default))) :qid |unknown.0:0| :skolemid |3721| :pattern ( ($IsBox bx@@102 Tclass.Options.__default)) )))
(assert (forall (($o@@27 T@U) ) (!  (=> (= (type $o@@27) refType) (and (=> ($Is $o@@27 Tclass.Options.__default) (or (= $o@@27 null) (= (dtype $o@@27) Tclass.Options.__default))) (=> (or (= $o@@27 null) (= (dtype $o@@27) Tclass.Options.__default)) ($Is $o@@27 Tclass.Options.__default)))) :qid |unknown.0:0| :skolemid |3722| :pattern ( ($Is $o@@27 Tclass.Options.__default)) )))
(assert (forall (($o@@28 T@U) ($h@@77 T@U) ) (!  (=> (and (= (type $o@@28) refType) (= (type $h@@77) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@28 Tclass.Options.__default $h@@77) (or (= $o@@28 null) (U_2_bool (MapType1Select (MapType0Select $h@@77 $o@@28) alloc)))) (=> (or (= $o@@28 null) (U_2_bool (MapType1Select (MapType0Select $h@@77 $o@@28) alloc))) ($IsAlloc $o@@28 Tclass.Options.__default $h@@77)))) :qid |unknown.0:0| :skolemid |3723| :pattern ( ($IsAlloc $o@@28 Tclass.Options.__default $h@@77)) )))
(assert (forall ((arg0@@275 T@U) (arg1@@130 T@U) (arg2@@80 T@U) (arg3@@42 T@U) (arg4@@28 T@U) ) (! (= (type (Options.__default.MapOption arg0@@275 arg1@@130 arg2@@80 arg3@@42 arg4@@28)) DatatypeTypeType) :qid |funType:Options.__default.MapOption| :pattern ( (Options.__default.MapOption arg0@@275 arg1@@130 arg2@@80 arg3@@42 arg4@@28)) )))
(assert (forall ((Options._default.MapOption$V0 T@U) (Options._default.MapOption$V1 T@U) ($h0 T@U) ($h1 T@U) (|opt#0| T@U) (|f#0@@19| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.MapOption$V0) TyType) (= (type Options._default.MapOption$V1) TyType)) (= (type $h0) (MapType0Type refType MapType1Type))) (= (type $h1) (MapType0Type refType MapType1Type))) (= (type |opt#0|) DatatypeTypeType)) (= (type |f#0@@19|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |opt#0| |f#0@@19|) (and ($Is |opt#0| (Tclass.Options.Option Options._default.MapOption$V0)) ($Is |f#0@@19| (Tclass._System.___hFunc1 Options._default.MapOption$V0 Options._default.MapOption$V1))))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1)))) (forall (($o@@29 T@U) ($f T@U) ) (! (let ((alpha@@6 (FieldTypeInv0 (type $f)))) (=> (and (and (= (type $o@@29) refType) (= (type $f) (FieldType alpha@@6))) (and (not (= $o@@29 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0|) (Reads1 Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |f#0@@19| (Options.Option.value |opt#0|)) (|Set#Empty| BoxType)) ($Box $o@@29))))) (= (MapType1Select (MapType0Select $h0 $o@@29) $f) (MapType1Select (MapType0Select $h1 $o@@29) $f)))) :qid |unknown.0:0| :skolemid |3724| :no-pattern (type $o@@29) :no-pattern (type $f) :no-pattern (U_2_int $o@@29) :no-pattern (U_2_bool $o@@29) :no-pattern (U_2_int $f) :no-pattern (U_2_bool $f) ))) (= (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |opt#0| |f#0@@19|) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1 |opt#0| |f#0@@19|))) :qid |unknown.0:0| :skolemid |3725| :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1 |opt#0| |f#0@@19|)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@0 T@U) (Options._default.MapOption$V1@@0 T@U) ($Heap@@3 T@U) (|opt#0@@0| T@U) (|f#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@0) TyType) (= (type Options._default.MapOption$V1@@0) TyType)) (= (type $Heap@@3) (MapType0Type refType MapType1Type))) (= (type |opt#0@@0|) DatatypeTypeType)) (= (type |f#0@@20|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@3 |opt#0@@0| |f#0@@20|) (and (and (and ($IsGoodHeap $Heap@@3) ($Is |opt#0@@0| (Tclass.Options.Option Options._default.MapOption$V0@@0))) ($Is |f#0@@20| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0))) (=> (Options.Option.Some_q |opt#0@@0|) (Requires1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@3 |f#0@@20| (Options.Option.value |opt#0@@0|)))))) (and (and (and (=> (Options.Option.Some_q |opt#0@@0|) (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@3 |opt#0@@0| |f#0@@20|))) (=> (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@3 |opt#0@@0| |f#0@@20|)) (Options.Option.Some_q |opt#0@@0|))) (=> (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@3 |opt#0@@0| |f#0@@20|)) (= (Options.Option.value (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@3 |opt#0@@0| |f#0@@20|)) (Apply1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@3 |f#0@@20| (Options.Option.value |opt#0@@0|))))) ($Is (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@3 |opt#0@@0| |f#0@@20|) (Tclass.Options.Option Options._default.MapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |3726| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@3 |opt#0@@0| |f#0@@20|)) ))))
(assert (forall ((Options._default.MapOption$V0@@1 T@U) (Options._default.MapOption$V1@@1 T@U) ($Heap@@4 T@U) (|opt#0@@1| T@U) (|f#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@1) TyType) (= (type Options._default.MapOption$V1@@1) TyType)) (= (type $Heap@@4) (MapType0Type refType MapType1Type))) (= (type |opt#0@@1|) DatatypeTypeType)) (= (type |f#0@@21|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@4) ($Is |opt#0@@1| (Tclass.Options.Option Options._default.MapOption$V0@@1))) ($Is |f#0@@21| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1)))) (and (=> (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@4 |opt#0@@1| |f#0@@21|) (=> (Options.Option.Some_q |opt#0@@1|) (Requires1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@4 |f#0@@21| (Options.Option.value |opt#0@@1|)))) (=> (=> (Options.Option.Some_q |opt#0@@1|) (Requires1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@4 |f#0@@21| (Options.Option.value |opt#0@@1|))) (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@4 |opt#0@@1| |f#0@@21|)))) :qid |unknown.0:0| :skolemid |3727| :pattern ( (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@4 |opt#0@@1| |f#0@@21|)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@2 T@U) (Options._default.MapOption$V1@@2 T@U) ($Heap@@5 T@U) (|opt#0@@2| T@U) (|f#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@2) TyType) (= (type Options._default.MapOption$V1@@2) TyType)) (= (type $Heap@@5) (MapType0Type refType MapType1Type))) (= (type |opt#0@@2|) DatatypeTypeType)) (= (type |f#0@@22|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@5 |opt#0@@2| |f#0@@22|) (and (and (and ($IsGoodHeap $Heap@@5) ($Is |opt#0@@2| (Tclass.Options.Option Options._default.MapOption$V0@@2))) ($Is |f#0@@22| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2))) (=> (Options.Option.Some_q |opt#0@@2|) (Requires1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@5 |f#0@@22| (Options.Option.value |opt#0@@2|)))))) (= (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@5 |opt#0@@2| |f#0@@22|) (ite (Options.Option.None_q |opt#0@@2|) |#Options.Option.None| (let ((|v#1@@2| (Options.Option.value |opt#0@@2|))) (|#Options.Option.Some| (Apply1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@5 |f#0@@22| |v#1@@2|)))))) :qid |unknown.0:0| :skolemid |3728| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@5 |opt#0@@2| |f#0@@22|)) ))))
(assert (forall ((arg0@@276 T@U) (arg1@@131 T@U) (arg2@@81 T@U) (arg3@@43 T@U) (arg4@@29 T@U) ) (! (= (type (Options.__default.FlatMapOption arg0@@276 arg1@@131 arg2@@81 arg3@@43 arg4@@29)) DatatypeTypeType) :qid |funType:Options.__default.FlatMapOption| :pattern ( (Options.__default.FlatMapOption arg0@@276 arg1@@131 arg2@@81 arg3@@43 arg4@@29)) )))
(assert (forall ((Options._default.FlatMapOption$V0 T@U) (Options._default.FlatMapOption$V1 T@U) ($h0@@0 T@U) ($h1@@0 T@U) (|opt#0@@3| T@U) (|f#0@@23| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.FlatMapOption$V0) TyType) (= (type Options._default.FlatMapOption$V1) TyType)) (= (type $h0@@0) (MapType0Type refType MapType1Type))) (= (type $h1@@0) (MapType0Type refType MapType1Type))) (= (type |opt#0@@3|) DatatypeTypeType)) (= (type |f#0@@23|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@0) ($IsGoodHeap $h1@@0)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@0 |opt#0@@3| |f#0@@23|) (and ($Is |opt#0@@3| (Tclass.Options.Option Options._default.FlatMapOption$V0)) ($Is |f#0@@23| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1)))))) (and ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0)))) (forall (($o@@30 T@U) ($f@@0 T@U) ) (! (let ((alpha@@7 (FieldTypeInv0 (type $f@@0)))) (=> (and (and (= (type $o@@30) refType) (= (type $f@@0) (FieldType alpha@@7))) (and (not (= $o@@30 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0@@3|) (Reads1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1) $h0@@0 |f#0@@23| (Options.Option.value |opt#0@@3|)) (|Set#Empty| BoxType)) ($Box $o@@30))))) (= (MapType1Select (MapType0Select $h0@@0 $o@@30) $f@@0) (MapType1Select (MapType0Select $h1@@0 $o@@30) $f@@0)))) :qid |unknown.0:0| :skolemid |3729| :no-pattern (type $o@@30) :no-pattern (type $f@@0) :no-pattern (U_2_int $o@@30) :no-pattern (U_2_bool $o@@30) :no-pattern (U_2_int $f@@0) :no-pattern (U_2_bool $f@@0) ))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@0 |opt#0@@3| |f#0@@23|) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@0 |opt#0@@3| |f#0@@23|))) :qid |unknown.0:0| :skolemid |3730| :pattern ( ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@0 |opt#0@@3| |f#0@@23|)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@0 T@U) (Options._default.FlatMapOption$V1@@0 T@U) ($Heap@@6 T@U) (|opt#0@@4| T@U) (|f#0@@24| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@0) TyType) (= (type Options._default.FlatMapOption$V1@@0) TyType)) (= (type $Heap@@6) (MapType0Type refType MapType1Type))) (= (type |opt#0@@4|) DatatypeTypeType)) (= (type |f#0@@24|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@6 |opt#0@@4| |f#0@@24|) (and (and (and ($IsGoodHeap $Heap@@6) ($Is |opt#0@@4| (Tclass.Options.Option Options._default.FlatMapOption$V0@@0))) ($Is |f#0@@24| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) (=> (Options.Option.Some_q |opt#0@@4|) (Requires1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@6 |f#0@@24| (Options.Option.value |opt#0@@4|)))))) (and (and (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@6 |f#0@@24| (Options.Option.value |opt#0@@4|))))) (Options.Option.Some_q (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@6 |opt#0@@4| |f#0@@24|))) (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@6 |f#0@@24| (Options.Option.value |opt#0@@4|))))) (= (Options.Option.value (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@6 |opt#0@@4| |f#0@@24|)) (Options.Option.value ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@6 |f#0@@24| (Options.Option.value |opt#0@@4|))))))) ($Is (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@6 |opt#0@@4| |f#0@@24|) (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |3731| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@6 |opt#0@@4| |f#0@@24|)) ))))
(assert (forall ((Options._default.FlatMapOption$V0@@1 T@U) (Options._default.FlatMapOption$V1@@1 T@U) ($Heap@@7 T@U) (|opt#0@@5| T@U) (|f#0@@25| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@1) TyType) (= (type Options._default.FlatMapOption$V1@@1) TyType)) (= (type $Heap@@7) (MapType0Type refType MapType1Type))) (= (type |opt#0@@5|) DatatypeTypeType)) (= (type |f#0@@25|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@7) ($Is |opt#0@@5| (Tclass.Options.Option Options._default.FlatMapOption$V0@@1))) ($Is |f#0@@25| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1))))) (and (=> (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@7 |opt#0@@5| |f#0@@25|) (=> (Options.Option.Some_q |opt#0@@5|) (Requires1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1) $Heap@@7 |f#0@@25| (Options.Option.value |opt#0@@5|)))) (=> (=> (Options.Option.Some_q |opt#0@@5|) (Requires1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1) $Heap@@7 |f#0@@25| (Options.Option.value |opt#0@@5|))) (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@7 |opt#0@@5| |f#0@@25|)))) :qid |unknown.0:0| :skolemid |3732| :pattern ( (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@7 |opt#0@@5| |f#0@@25|)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@2 T@U) (Options._default.FlatMapOption$V1@@2 T@U) ($Heap@@8 T@U) (|opt#0@@6| T@U) (|f#0@@26| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@2) TyType) (= (type Options._default.FlatMapOption$V1@@2) TyType)) (= (type $Heap@@8) (MapType0Type refType MapType1Type))) (= (type |opt#0@@6|) DatatypeTypeType)) (= (type |f#0@@26|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@8 |opt#0@@6| |f#0@@26|) (and (and (and ($IsGoodHeap $Heap@@8) ($Is |opt#0@@6| (Tclass.Options.Option Options._default.FlatMapOption$V0@@2))) ($Is |f#0@@26| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2)))) (=> (Options.Option.Some_q |opt#0@@6|) (Requires1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@8 |f#0@@26| (Options.Option.value |opt#0@@6|)))))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@8 |opt#0@@6| |f#0@@26|) (ite (Options.Option.None_q |opt#0@@6|) |#Options.Option.None| (let ((|v#1@@3| (Options.Option.value |opt#0@@6|))) ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@8 |f#0@@26| |v#1@@3|)))))) :qid |unknown.0:0| :skolemid |3733| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@8 |opt#0@@6| |f#0@@26|)) ))))
(assert (= (type Tclass.NativePackedInts.__default) TyType))
(assert (= (Tag Tclass.NativePackedInts.__default) Tagclass.NativePackedInts.__default))
(assert (forall ((bx@@103 T@U) ) (!  (=> (and (= (type bx@@103) BoxType) ($IsBox bx@@103 Tclass.NativePackedInts.__default)) (and (= ($Box ($Unbox refType bx@@103)) bx@@103) ($Is ($Unbox refType bx@@103) Tclass.NativePackedInts.__default))) :qid |unknown.0:0| :skolemid |3734| :pattern ( ($IsBox bx@@103 Tclass.NativePackedInts.__default)) )))
(assert (forall (($o@@31 T@U) ) (!  (=> (= (type $o@@31) refType) (and (=> ($Is $o@@31 Tclass.NativePackedInts.__default) (or (= $o@@31 null) (= (dtype $o@@31) Tclass.NativePackedInts.__default))) (=> (or (= $o@@31 null) (= (dtype $o@@31) Tclass.NativePackedInts.__default)) ($Is $o@@31 Tclass.NativePackedInts.__default)))) :qid |unknown.0:0| :skolemid |3735| :pattern ( ($Is $o@@31 Tclass.NativePackedInts.__default)) )))
(assert (forall (($o@@32 T@U) ($h@@78 T@U) ) (!  (=> (and (= (type $o@@32) refType) (= (type $h@@78) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@32 Tclass.NativePackedInts.__default $h@@78) (or (= $o@@32 null) (U_2_bool (MapType1Select (MapType0Select $h@@78 $o@@32) alloc)))) (=> (or (= $o@@32 null) (U_2_bool (MapType1Select (MapType0Select $h@@78 $o@@32) alloc))) ($IsAlloc $o@@32 Tclass.NativePackedInts.__default $h@@78)))) :qid |unknown.0:0| :skolemid |3736| :pattern ( ($IsAlloc $o@@32 Tclass.NativePackedInts.__default $h@@78)) )))
(assert (forall (($ly@@108 T@U) (|s#0@@17| T@U) ) (!  (=> (and (= (type $ly@@108) LayerTypeType) (= (type |s#0@@17|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 ($LS $ly@@108) |s#0@@17|) (NativePackedInts.__default.unpack__LittleEndian__Uint32 $ly@@108 |s#0@@17|))) :qid |PackedIn.8:22| :skolemid |3737| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32 ($LS $ly@@108) |s#0@@17|)) )))
(assert (forall (($ly@@109 T@U) (|s#0@@18| T@U) ) (!  (=> (and (= (type $ly@@109) LayerTypeType) (= (type |s#0@@18|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 $ly@@109 |s#0@@18|) (NativePackedInts.__default.unpack__LittleEndian__Uint32 $LZ |s#0@@18|))) :qid |PackedIn.8:22| :skolemid |3738| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32 (AsFuelBottom $ly@@109) |s#0@@18|)) )))
(assert  (=> true (forall (($ly@@110 T@U) (|s#0@@19| T@U) ) (!  (=> (and (and (= (type $ly@@110) LayerTypeType) (= (type |s#0@@19|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| |s#0@@19|) (and ($Is |s#0@@19| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |s#0@@19|) (LitInt 4))))) (and (<= (LitInt 0) (NativePackedInts.__default.unpack__LittleEndian__Uint32 $ly@@110 |s#0@@19|)) (< (NativePackedInts.__default.unpack__LittleEndian__Uint32 $ly@@110 |s#0@@19|) 4294967296))) :qid |PackedIn.8:22| :skolemid |3739| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32 $ly@@110 |s#0@@19|)) ))))
(assert (forall (($ly@@111 T@U) (|s#0@@20| T@U) ) (!  (=> (and (and (= (type $ly@@111) LayerTypeType) (= (type |s#0@@20|) (SeqType BoxType))) ($Is |s#0@@20| (TSeq Tclass.NativeTypes.byte))) (and (=> (|NativePackedInts.__default.unpack__LittleEndian__Uint32#requires| $ly@@111 |s#0@@20|) (= (|Seq#Length| |s#0@@20|) (LitInt 4))) (=> (= (|Seq#Length| |s#0@@20|) (LitInt 4)) (|NativePackedInts.__default.unpack__LittleEndian__Uint32#requires| $ly@@111 |s#0@@20|)))) :qid |PackedIn.8:22| :skolemid |3740| :pattern ( (|NativePackedInts.__default.unpack__LittleEndian__Uint32#requires| $ly@@111 |s#0@@20|)) )))
(assert  (=> true (forall (($ly@@112 T@U) (|s#0@@21| T@U) ) (!  (=> (and (and (= (type $ly@@112) LayerTypeType) (= (type |s#0@@21|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| |s#0@@21|) (and ($Is |s#0@@21| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |s#0@@21|) (LitInt 4))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 ($LS $ly@@112) |s#0@@21|) (+ (+ (+ (U_2_int ($Unbox intType (|Seq#Index| |s#0@@21| (LitInt 0)))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@21| (LitInt 1)))) (LitInt 256))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@21| (LitInt 2)))) (LitInt 65536))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@21| (LitInt 3)))) (LitInt 16777216))))) :qid |PackedIn.8:22| :skolemid |3741| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32 ($LS $ly@@112) |s#0@@21|)) ))))
(assert  (=> true (forall (($ly@@113 T@U) (|s#0@@22| T@U) ) (!  (=> (and (and (= (type $ly@@113) LayerTypeType) (= (type |s#0@@22|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (Lit |s#0@@22|)) (and ($Is |s#0@@22| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| (Lit |s#0@@22|)) (LitInt 4))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 ($LS $ly@@113) (Lit |s#0@@22|)) (+ (+ (+ (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@22|) (LitInt 0)))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@22|) (LitInt 1)))) (LitInt 256))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@22|) (LitInt 2)))) (LitInt 65536))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@22|) (LitInt 3)))) (LitInt 16777216))))) :qid |PackedIn.8:22| :weight 3 :skolemid |3742| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32 ($LS $ly@@113) (Lit |s#0@@22|))) ))))
(assert (forall (($ly@@114 T@U) (|s#0@@23| T@U) ) (!  (=> (and (= (type $ly@@114) LayerTypeType) (= (type |s#0@@23|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64 ($LS $ly@@114) |s#0@@23|) (NativePackedInts.__default.unpack__LittleEndian__Uint64 $ly@@114 |s#0@@23|))) :qid |PackedIn.17:22| :skolemid |3743| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64 ($LS $ly@@114) |s#0@@23|)) )))
(assert (forall (($ly@@115 T@U) (|s#0@@24| T@U) ) (!  (=> (and (= (type $ly@@115) LayerTypeType) (= (type |s#0@@24|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64 $ly@@115 |s#0@@24|) (NativePackedInts.__default.unpack__LittleEndian__Uint64 $LZ |s#0@@24|))) :qid |PackedIn.17:22| :skolemid |3744| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64 (AsFuelBottom $ly@@115) |s#0@@24|)) )))
(assert  (=> true (forall (($ly@@116 T@U) (|s#0@@25| T@U) ) (!  (=> (and (and (= (type $ly@@116) LayerTypeType) (= (type |s#0@@25|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint64#canCall| |s#0@@25|) (and ($Is |s#0@@25| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |s#0@@25|) (LitInt 8))))) (and (<= (LitInt 0) (NativePackedInts.__default.unpack__LittleEndian__Uint64 $ly@@116 |s#0@@25|)) (< (NativePackedInts.__default.unpack__LittleEndian__Uint64 $ly@@116 |s#0@@25|) 18446744073709551616))) :qid |PackedIn.17:22| :skolemid |3745| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64 $ly@@116 |s#0@@25|)) ))))
(assert (forall (($ly@@117 T@U) (|s#0@@26| T@U) ) (!  (=> (and (and (= (type $ly@@117) LayerTypeType) (= (type |s#0@@26|) (SeqType BoxType))) ($Is |s#0@@26| (TSeq Tclass.NativeTypes.byte))) (and (=> (|NativePackedInts.__default.unpack__LittleEndian__Uint64#requires| $ly@@117 |s#0@@26|) (= (|Seq#Length| |s#0@@26|) (LitInt 8))) (=> (= (|Seq#Length| |s#0@@26|) (LitInt 8)) (|NativePackedInts.__default.unpack__LittleEndian__Uint64#requires| $ly@@117 |s#0@@26|)))) :qid |PackedIn.17:22| :skolemid |3746| :pattern ( (|NativePackedInts.__default.unpack__LittleEndian__Uint64#requires| $ly@@117 |s#0@@26|)) )))
(assert  (=> true (forall (($ly@@118 T@U) (|s#0@@27| T@U) ) (!  (=> (and (and (= (type $ly@@118) LayerTypeType) (= (type |s#0@@27|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint64#canCall| |s#0@@27|) (and ($Is |s#0@@27| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |s#0@@27|) (LitInt 8))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64 ($LS $ly@@118) |s#0@@27|) (+ (+ (+ (+ (+ (+ (+ (U_2_int ($Unbox intType (|Seq#Index| |s#0@@27| (LitInt 0)))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@27| (LitInt 1)))) (LitInt 256))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@27| (LitInt 2)))) (LitInt 65536))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@27| (LitInt 3)))) (LitInt 16777216))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@27| (LitInt 4)))) (LitInt 4294967296))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@27| (LitInt 5)))) (LitInt 1099511627776))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@27| (LitInt 6)))) (LitInt 281474976710656))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@27| (LitInt 7)))) (LitInt 72057594037927936))))) :qid |PackedIn.17:22| :skolemid |3747| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64 ($LS $ly@@118) |s#0@@27|)) ))))
(assert  (=> true (forall (($ly@@119 T@U) (|s#0@@28| T@U) ) (!  (=> (and (and (= (type $ly@@119) LayerTypeType) (= (type |s#0@@28|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint64#canCall| (Lit |s#0@@28|)) (and ($Is |s#0@@28| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| (Lit |s#0@@28|)) (LitInt 8))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64 ($LS $ly@@119) (Lit |s#0@@28|)) (+ (+ (+ (+ (+ (+ (+ (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@28|) (LitInt 0)))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@28|) (LitInt 1)))) (LitInt 256))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@28|) (LitInt 2)))) (LitInt 65536))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@28|) (LitInt 3)))) (LitInt 16777216))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@28|) (LitInt 4)))) (LitInt 4294967296))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@28|) (LitInt 5)))) (LitInt 1099511627776))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@28|) (LitInt 6)))) (LitInt 281474976710656))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@28|) (LitInt 7)))) (LitInt 72057594037927936))))) :qid |PackedIn.17:22| :weight 3 :skolemid |3748| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64 ($LS $ly@@119) (Lit |s#0@@28|))) ))))
(assert (forall (($ly@@120 T@U) (|packed#0| T@U) (|len#0@@13| Int) ) (!  (=> (and (= (type $ly@@120) LayerTypeType) (= (type |packed#0|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq ($LS $ly@@120) |packed#0| |len#0@@13|) (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@120 |packed#0| |len#0@@13|))) :qid |PackedIn.30:22| :skolemid |3749| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq ($LS $ly@@120) |packed#0| |len#0@@13|)) )))
(assert (forall (($ly@@121 T@U) (|packed#0@@0| T@U) (|len#0@@14| Int) ) (!  (=> (and (= (type $ly@@121) LayerTypeType) (= (type |packed#0@@0|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@121 |packed#0@@0| |len#0@@14|) (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $LZ |packed#0@@0| |len#0@@14|))) :qid |PackedIn.30:22| :skolemid |3750| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq (AsFuelBottom $ly@@121) |packed#0@@0| |len#0@@14|)) )))
(assert  (=> true (forall (($ly@@122 T@U) (|packed#0@@1| T@U) (|len#0@@15| Int) ) (!  (=> (and (and (= (type $ly@@122) LayerTypeType) (= (type |packed#0@@1|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#canCall| |packed#0@@1| |len#0@@15|) (and ($Is |packed#0@@1| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |packed#0@@1|) (Mul |len#0@@15| (LitInt 4)))))) (and (and (= (|Seq#Length| (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@122 |packed#0@@1| |len#0@@15|)) |len#0@@15|) (forall ((|i#0@@36| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@36|) (< |i#0@@36| |len#0@@15|)) (= (U_2_int ($Unbox intType (|Seq#Index| (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@122 |packed#0@@1| |len#0@@15|) |i#0@@36|))) (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |packed#0@@1| (+ (Mul (LitInt 4) |i#0@@36|) 4)) (Mul (LitInt 4) |i#0@@36|))))) :qid |PackedIn.35:18| :skolemid |3751| :pattern ( ($Unbox intType (|Seq#Index| (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@122 |packed#0@@1| |len#0@@15|) |i#0@@36|))) ))) ($Is (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@122 |packed#0@@1| |len#0@@15|) (TSeq Tclass.NativeTypes.uint32)))) :qid |PackedIn.30:22| :skolemid |3752| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@122 |packed#0@@1| |len#0@@15|)) ))))
(assert (forall (($ly@@123 T@U) (|packed#0@@2| T@U) (|len#0@@16| Int) ) (!  (=> (and (and (= (type $ly@@123) LayerTypeType) (= (type |packed#0@@2|) (SeqType BoxType))) ($Is |packed#0@@2| (TSeq Tclass.NativeTypes.byte))) (and (=> (|NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#requires| $ly@@123 |packed#0@@2| |len#0@@16|) (= (|Seq#Length| |packed#0@@2|) (Mul |len#0@@16| (LitInt 4)))) (=> (= (|Seq#Length| |packed#0@@2|) (Mul |len#0@@16| (LitInt 4))) (|NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#requires| $ly@@123 |packed#0@@2| |len#0@@16|)))) :qid |PackedIn.30:22| :skolemid |3753| :pattern ( (|NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#requires| $ly@@123 |packed#0@@2| |len#0@@16|)) )))
(assert  (=> true (forall (($ly@@124 T@U) (|packed#0@@3| T@U) (|len#0@@17| Int) ) (!  (=> (and (and (= (type $ly@@124) LayerTypeType) (= (type |packed#0@@3|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#canCall| |packed#0@@3| |len#0@@17|) (and ($Is |packed#0@@3| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |packed#0@@3|) (Mul |len#0@@17| (LitInt 4)))))) (and (=> (not (= |len#0@@17| (LitInt 0))) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#canCall| (|Seq#Take| |packed#0@@3| (Mul (LitInt 4) (- |len#0@@17| 1))) (- |len#0@@17| 1)) (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (|Seq#Drop| (|Seq#Take| |packed#0@@3| (Mul (LitInt 4) |len#0@@17|)) (Mul (LitInt 4) (- |len#0@@17| 1)))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq ($LS $ly@@124) |packed#0@@3| |len#0@@17|) (ite (= |len#0@@17| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@124 (|Seq#Take| |packed#0@@3| (Mul (LitInt 4) (- |len#0@@17| 1))) (- |len#0@@17| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |packed#0@@3| (Mul (LitInt 4) |len#0@@17|)) (Mul (LitInt 4) (- |len#0@@17| 1)))))))))))) :qid |PackedIn.30:22| :skolemid |3754| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq ($LS $ly@@124) |packed#0@@3| |len#0@@17|)) ))))
(assert  (=> true (forall (($ly@@125 T@U) (|packed#0@@4| T@U) (|len#0@@18| Int) ) (!  (=> (and (and (= (type $ly@@125) LayerTypeType) (= (type |packed#0@@4|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#canCall| (Lit |packed#0@@4|) (LitInt |len#0@@18|)) (and ($Is |packed#0@@4| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| (Lit |packed#0@@4|)) (LitInt (Mul (LitInt |len#0@@18|) (LitInt 4))))))) (and (=> (not (= (LitInt |len#0@@18|) (LitInt 0))) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#canCall| (Lit (|Seq#Take| (Lit |packed#0@@4|) (LitInt (Mul (LitInt 4) (LitInt (- |len#0@@18| 1)))))) (LitInt (- |len#0@@18| 1))) (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (Lit (|Seq#Drop| (|Seq#Take| (Lit |packed#0@@4|) (LitInt (Mul (LitInt 4) (LitInt |len#0@@18|)))) (LitInt (Mul (LitInt 4) (LitInt (- |len#0@@18| 1))))))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq ($LS $ly@@125) (Lit |packed#0@@4|) (LitInt |len#0@@18|)) (ite (= (LitInt |len#0@@18|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq ($LS $ly@@125) (Lit (|Seq#Take| (Lit |packed#0@@4|) (LitInt (Mul (LitInt 4) (LitInt (- |len#0@@18| 1)))))) (LitInt (- |len#0@@18| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (Lit (|Seq#Drop| (|Seq#Take| (Lit |packed#0@@4|) (LitInt (Mul (LitInt 4) (LitInt |len#0@@18|)))) (LitInt (Mul (LitInt 4) (LitInt (- |len#0@@18| 1))))))))))))))) :qid |PackedIn.30:22| :weight 3 :skolemid |3755| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq ($LS $ly@@125) (Lit |packed#0@@4|) (LitInt |len#0@@18|))) ))))
(assert (forall (($ly@@126 T@U) (|packed#0@@5| T@U) (|len#0@@19| Int) ) (!  (=> (and (= (type $ly@@126) LayerTypeType) (= (type |packed#0@@5|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq ($LS $ly@@126) |packed#0@@5| |len#0@@19|) (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@126 |packed#0@@5| |len#0@@19|))) :qid |PackedIn.47:22| :skolemid |3756| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq ($LS $ly@@126) |packed#0@@5| |len#0@@19|)) )))
(assert (forall (($ly@@127 T@U) (|packed#0@@6| T@U) (|len#0@@20| Int) ) (!  (=> (and (= (type $ly@@127) LayerTypeType) (= (type |packed#0@@6|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@127 |packed#0@@6| |len#0@@20|) (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $LZ |packed#0@@6| |len#0@@20|))) :qid |PackedIn.47:22| :skolemid |3757| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq (AsFuelBottom $ly@@127) |packed#0@@6| |len#0@@20|)) )))
(assert  (=> true (forall (($ly@@128 T@U) (|packed#0@@7| T@U) (|len#0@@21| Int) ) (!  (=> (and (and (= (type $ly@@128) LayerTypeType) (= (type |packed#0@@7|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#canCall| |packed#0@@7| |len#0@@21|) (and ($Is |packed#0@@7| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |packed#0@@7|) (Mul |len#0@@21| (LitInt 8)))))) (and (and (= (|Seq#Length| (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@128 |packed#0@@7| |len#0@@21|)) |len#0@@21|) (forall ((|i#0@@37| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@37|) (< |i#0@@37| |len#0@@21|)) (= (U_2_int ($Unbox intType (|Seq#Index| (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@128 |packed#0@@7| |len#0@@21|) |i#0@@37|))) (NativePackedInts.__default.unpack__LittleEndian__Uint64 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64 (|Seq#Drop| (|Seq#Take| |packed#0@@7| (+ (Mul (LitInt 8) |i#0@@37|) 8)) (Mul (LitInt 8) |i#0@@37|))))) :qid |PackedIn.52:18| :skolemid |3758| :pattern ( ($Unbox intType (|Seq#Index| (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@128 |packed#0@@7| |len#0@@21|) |i#0@@37|))) ))) ($Is (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@128 |packed#0@@7| |len#0@@21|) (TSeq Tclass.NativeTypes.uint64)))) :qid |PackedIn.47:22| :skolemid |3759| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@128 |packed#0@@7| |len#0@@21|)) ))))
(assert (forall (($ly@@129 T@U) (|packed#0@@8| T@U) (|len#0@@22| Int) ) (!  (=> (and (and (= (type $ly@@129) LayerTypeType) (= (type |packed#0@@8|) (SeqType BoxType))) ($Is |packed#0@@8| (TSeq Tclass.NativeTypes.byte))) (and (=> (|NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#requires| $ly@@129 |packed#0@@8| |len#0@@22|) (= (|Seq#Length| |packed#0@@8|) (Mul |len#0@@22| (LitInt 8)))) (=> (= (|Seq#Length| |packed#0@@8|) (Mul |len#0@@22| (LitInt 8))) (|NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#requires| $ly@@129 |packed#0@@8| |len#0@@22|)))) :qid |PackedIn.47:22| :skolemid |3760| :pattern ( (|NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#requires| $ly@@129 |packed#0@@8| |len#0@@22|)) )))
(assert  (=> true (forall (($ly@@130 T@U) (|packed#0@@9| T@U) (|len#0@@23| Int) ) (!  (=> (and (and (= (type $ly@@130) LayerTypeType) (= (type |packed#0@@9|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#canCall| |packed#0@@9| |len#0@@23|) (and ($Is |packed#0@@9| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |packed#0@@9|) (Mul |len#0@@23| (LitInt 8)))))) (and (=> (not (= |len#0@@23| (LitInt 0))) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#canCall| (|Seq#Take| |packed#0@@9| (Mul (LitInt 8) (- |len#0@@23| 1))) (- |len#0@@23| 1)) (|NativePackedInts.__default.unpack__LittleEndian__Uint64#canCall| (|Seq#Drop| (|Seq#Take| |packed#0@@9| (Mul (LitInt 8) |len#0@@23|)) (Mul (LitInt 8) (- |len#0@@23| 1)))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq ($LS $ly@@130) |packed#0@@9| |len#0@@23|) (ite (= |len#0@@23| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@130 (|Seq#Take| |packed#0@@9| (Mul (LitInt 8) (- |len#0@@23| 1))) (- |len#0@@23| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (NativePackedInts.__default.unpack__LittleEndian__Uint64 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64 (|Seq#Drop| (|Seq#Take| |packed#0@@9| (Mul (LitInt 8) |len#0@@23|)) (Mul (LitInt 8) (- |len#0@@23| 1)))))))))))) :qid |PackedIn.47:22| :skolemid |3761| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq ($LS $ly@@130) |packed#0@@9| |len#0@@23|)) ))))
(assert  (=> true (forall (($ly@@131 T@U) (|packed#0@@10| T@U) (|len#0@@24| Int) ) (!  (=> (and (and (= (type $ly@@131) LayerTypeType) (= (type |packed#0@@10|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#canCall| (Lit |packed#0@@10|) (LitInt |len#0@@24|)) (and ($Is |packed#0@@10| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| (Lit |packed#0@@10|)) (LitInt (Mul (LitInt |len#0@@24|) (LitInt 8))))))) (and (=> (not (= (LitInt |len#0@@24|) (LitInt 0))) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#canCall| (Lit (|Seq#Take| (Lit |packed#0@@10|) (LitInt (Mul (LitInt 8) (LitInt (- |len#0@@24| 1)))))) (LitInt (- |len#0@@24| 1))) (|NativePackedInts.__default.unpack__LittleEndian__Uint64#canCall| (Lit (|Seq#Drop| (|Seq#Take| (Lit |packed#0@@10|) (LitInt (Mul (LitInt 8) (LitInt |len#0@@24|)))) (LitInt (Mul (LitInt 8) (LitInt (- |len#0@@24| 1))))))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq ($LS $ly@@131) (Lit |packed#0@@10|) (LitInt |len#0@@24|)) (ite (= (LitInt |len#0@@24|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq ($LS $ly@@131) (Lit (|Seq#Take| (Lit |packed#0@@10|) (LitInt (Mul (LitInt 8) (LitInt (- |len#0@@24| 1)))))) (LitInt (- |len#0@@24| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (NativePackedInts.__default.unpack__LittleEndian__Uint64 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64 (Lit (|Seq#Drop| (|Seq#Take| (Lit |packed#0@@10|) (LitInt (Mul (LitInt 8) (LitInt |len#0@@24|)))) (LitInt (Mul (LitInt 8) (LitInt (- |len#0@@24| 1))))))))))))))) :qid |PackedIn.47:22| :weight 3 :skolemid |3762| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq ($LS $ly@@131) (Lit |packed#0@@10|) (LitInt |len#0@@24|))) ))))
(assert (= (type Tclass.Sequences.__default) TyType))
(assert (= (Tag Tclass.Sequences.__default) Tagclass.Sequences.__default))
(assert (forall ((bx@@104 T@U) ) (!  (=> (and (= (type bx@@104) BoxType) ($IsBox bx@@104 Tclass.Sequences.__default)) (and (= ($Box ($Unbox refType bx@@104)) bx@@104) ($Is ($Unbox refType bx@@104) Tclass.Sequences.__default))) :qid |unknown.0:0| :skolemid |3779| :pattern ( ($IsBox bx@@104 Tclass.Sequences.__default)) )))
(assert (forall (($o@@33 T@U) ) (!  (=> (= (type $o@@33) refType) (and (=> ($Is $o@@33 Tclass.Sequences.__default) (or (= $o@@33 null) (= (dtype $o@@33) Tclass.Sequences.__default))) (=> (or (= $o@@33 null) (= (dtype $o@@33) Tclass.Sequences.__default)) ($Is $o@@33 Tclass.Sequences.__default)))) :qid |unknown.0:0| :skolemid |3780| :pattern ( ($Is $o@@33 Tclass.Sequences.__default)) )))
(assert (forall (($o@@34 T@U) ($h@@79 T@U) ) (!  (=> (and (= (type $o@@34) refType) (= (type $h@@79) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@34 Tclass.Sequences.__default $h@@79) (or (= $o@@34 null) (U_2_bool (MapType1Select (MapType0Select $h@@79 $o@@34) alloc)))) (=> (or (= $o@@34 null) (U_2_bool (MapType1Select (MapType0Select $h@@79 $o@@34) alloc))) ($IsAlloc $o@@34 Tclass.Sequences.__default $h@@79)))) :qid |unknown.0:0| :skolemid |3781| :pattern ( ($IsAlloc $o@@34 Tclass.Sequences.__default $h@@79)) )))
(assert (forall ((arg0@@277 T@U) (arg1@@132 T@U) ) (! (= (type (Sequences.__default.Last arg0@@277 arg1@@132)) BoxType) :qid |funType:Sequences.__default.Last| :pattern ( (Sequences.__default.Last arg0@@277 arg1@@132)) )))
(assert  (=> true (forall ((Sequences._default.Last$E T@U) (|run#0| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E) TyType) (= (type |run#0|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E |run#0|) (and ($Is |run#0| (TSeq Sequences._default.Last$E)) (> (|Seq#Length| |run#0|) 0)))) ($IsBox (Sequences.__default.Last Sequences._default.Last$E |run#0|) Sequences._default.Last$E)) :qid |unknown.0:0| :skolemid |3782| :pattern ( (Sequences.__default.Last Sequences._default.Last$E |run#0|)) ))))
(assert (forall ((Sequences._default.Last$E@@0 T@U) (|run#0@@0| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@0) TyType) (= (type |run#0@@0|) (SeqType BoxType))) ($Is |run#0@@0| (TSeq Sequences._default.Last$E@@0))) (and (=> (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@0|) (> (|Seq#Length| |run#0@@0|) 0)) (=> (> (|Seq#Length| |run#0@@0|) 0) (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@0|)))) :qid |unknown.0:0| :skolemid |3783| :pattern ( (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.Last$E@@1 T@U) (|run#0@@1| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@1) TyType) (= (type |run#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@1 |run#0@@1|) (and ($Is |run#0@@1| (TSeq Sequences._default.Last$E@@1)) (> (|Seq#Length| |run#0@@1|) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@1|) (|Seq#Index| |run#0@@1| (- (|Seq#Length| |run#0@@1|) 1)))) :qid |unknown.0:0| :skolemid |3784| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@1|)) ))))
(assert  (=> true (forall ((Sequences._default.Last$E@@2 T@U) (|run#0@@2| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@2) TyType) (= (type |run#0@@2|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@2 (Lit |run#0@@2|)) (and ($Is |run#0@@2| (TSeq Sequences._default.Last$E@@2)) (> (|Seq#Length| (Lit |run#0@@2|)) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@2|)) (|Seq#Index| (Lit |run#0@@2|) (- (|Seq#Length| (Lit |run#0@@2|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |3785| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@2|))) ))))
(assert (forall ((arg0@@278 T@U) (arg1@@133 T@U) ) (! (= (type (Sequences.__default.DropLast arg0@@278 arg1@@133)) (SeqType BoxType)) :qid |funType:Sequences.__default.DropLast| :pattern ( (Sequences.__default.DropLast arg0@@278 arg1@@133)) )))
(assert  (=> true (forall ((Sequences._default.DropLast$E T@U) (|run#0@@3| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E) TyType) (= (type |run#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E |run#0@@3|) (and ($Is |run#0@@3| (TSeq Sequences._default.DropLast$E)) (> (|Seq#Length| |run#0@@3|) 0)))) ($Is (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@3|) (TSeq Sequences._default.DropLast$E))) :qid |unknown.0:0| :skolemid |3786| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@3|)) ))))
(assert (forall ((Sequences._default.DropLast$E@@0 T@U) (|run#0@@4| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@0) TyType) (= (type |run#0@@4|) (SeqType BoxType))) ($Is |run#0@@4| (TSeq Sequences._default.DropLast$E@@0))) (and (=> (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@4|) (> (|Seq#Length| |run#0@@4|) 0)) (=> (> (|Seq#Length| |run#0@@4|) 0) (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@4|)))) :qid |unknown.0:0| :skolemid |3787| :pattern ( (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@4|)) )))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@1 T@U) (|run#0@@5| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@1) TyType) (= (type |run#0@@5|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@1 |run#0@@5|) (and ($Is |run#0@@5| (TSeq Sequences._default.DropLast$E@@1)) (> (|Seq#Length| |run#0@@5|) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@5|) (|Seq#Take| |run#0@@5| (- (|Seq#Length| |run#0@@5|) 1)))) :qid |unknown.0:0| :skolemid |3788| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@5|)) ))))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@2 T@U) (|run#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@2) TyType) (= (type |run#0@@6|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@2 (Lit |run#0@@6|)) (and ($Is |run#0@@6| (TSeq Sequences._default.DropLast$E@@2)) (> (|Seq#Length| (Lit |run#0@@6|)) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@6|)) (|Seq#Take| (Lit |run#0@@6|) (- (|Seq#Length| (Lit |run#0@@6|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |3789| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@6|))) ))))
(assert (forall ((arg0@@279 T@U) (arg1@@134 T@U) ) (! (= (type (Sequences.__default.Set arg0@@279 arg1@@134)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.Set| :pattern ( (Sequences.__default.Set arg0@@279 arg1@@134)) )))
(assert  (=> true (forall ((Sequences._default.Set$T T@U) (|run#0@@7| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T) TyType) (= (type |run#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T |run#0@@7|) ($Is |run#0@@7| (TSeq Sequences._default.Set$T)))) ($Is (Sequences.__default.Set Sequences._default.Set$T |run#0@@7|) (TSet Sequences._default.Set$T))) :qid |unknown.0:0| :skolemid |3790| :pattern ( (Sequences.__default.Set Sequences._default.Set$T |run#0@@7|)) ))))
(assert (forall ((Sequences._default.Set$T@@0 T@U) (|run#0@@8| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@0) TyType) (= (type |run#0@@8|) (SeqType BoxType))) ($Is |run#0@@8| (TSeq Sequences._default.Set$T@@0))) (and (=> (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@8|) true) (=> true (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@8|)))) :qid |unknown.0:0| :skolemid |3791| :pattern ( (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@8|)) )))
(assert (forall ((arg0@@280 T@U) (arg1@@135 T@U) (arg2@@82 Int) ) (! (= (type (|lambda#166| arg0@@280 arg1@@135 arg2@@82)) (MapType0Type BoxType boolType)) :qid |funType:lambda#166| :pattern ( (|lambda#166| arg0@@280 arg1@@135 arg2@@82)) )))
(assert  (=> true (forall ((Sequences._default.Set$T@@1 T@U) (|run#0@@9| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@1) TyType) (= (type |run#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@1 |run#0@@9|) ($Is |run#0@@9| (TSeq Sequences._default.Set$T@@1)))) (= (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@9|) (|lambda#166| Sequences._default.Set$T@@1 (|MultiSet#FromSeq| |run#0@@9|) 0))) :qid |unknown.0:0| :skolemid |3792| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@9|)) ))))
(assert  (=> true (forall ((Sequences._default.Set$T@@2 T@U) (|run#0@@10| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@2) TyType) (= (type |run#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@2 (Lit |run#0@@10|)) ($Is |run#0@@10| (TSeq Sequences._default.Set$T@@2)))) (= (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@10|)) (|lambda#166| Sequences._default.Set$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@10|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |3793| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@10|))) ))))
(assert (forall ((arg0@@281 T@U) (arg1@@136 T@U) ) (! (= (type (Sequences.__default.ISet arg0@@281 arg1@@136)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.ISet| :pattern ( (Sequences.__default.ISet arg0@@281 arg1@@136)) )))
(assert  (=> true (forall ((Sequences._default.ISet$T T@U) (|run#0@@11| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T) TyType) (= (type |run#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T |run#0@@11|) ($Is |run#0@@11| (TSeq Sequences._default.ISet$T)))) ($Is (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@11|) (TISet Sequences._default.ISet$T))) :qid |unknown.0:0| :skolemid |3794| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@11|)) ))))
(assert (forall ((Sequences._default.ISet$T@@0 T@U) (|run#0@@12| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@0) TyType) (= (type |run#0@@12|) (SeqType BoxType))) ($Is |run#0@@12| (TSeq Sequences._default.ISet$T@@0))) (and (=> (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@12|) true) (=> true (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@12|)))) :qid |unknown.0:0| :skolemid |3795| :pattern ( (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@12|)) )))
(assert  (=> true (forall ((Sequences._default.ISet$T@@1 T@U) (|run#0@@13| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@1) TyType) (= (type |run#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@1 |run#0@@13|) ($Is |run#0@@13| (TSeq Sequences._default.ISet$T@@1)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@13|) (|lambda#166| Sequences._default.ISet$T@@1 (|MultiSet#FromSeq| |run#0@@13|) 0))) :qid |unknown.0:0| :skolemid |3796| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@13|)) ))))
(assert  (=> true (forall ((Sequences._default.ISet$T@@2 T@U) (|run#0@@14| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@2) TyType) (= (type |run#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@2 (Lit |run#0@@14|)) ($Is |run#0@@14| (TSeq Sequences._default.ISet$T@@2)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@14|)) (|lambda#166| Sequences._default.ISet$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@14|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |3797| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@14|))) ))))
(assert (forall ((Sequences._default.NoDupes$T T@U) ($ly@@132 T@U) (|a#0@@21| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T) TyType) (= (type $ly@@132) LayerTypeType)) (= (type |a#0@@21|) (SeqType BoxType))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@132) |a#0@@21|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T $ly@@132 |a#0@@21|)) (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T $ly@@132 |a#0@@21|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@132) |a#0@@21|)))) :qid |unknown.0:0| :skolemid |3798| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@132) |a#0@@21|)) )))
(assert (forall ((Sequences._default.NoDupes$T@@0 T@U) ($ly@@133 T@U) (|a#0@@22| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T@@0) TyType) (= (type $ly@@133) LayerTypeType)) (= (type |a#0@@22|) (SeqType BoxType))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $ly@@133 |a#0@@22|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $LZ |a#0@@22|)) (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $LZ |a#0@@22|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $ly@@133 |a#0@@22|)))) :qid |unknown.0:0| :skolemid |3799| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 (AsFuelBottom $ly@@133) |a#0@@22|)) )))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@1 T@U) ($ly@@134 T@U) (|a#0@@23| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@1) TyType) (= (type $ly@@134) LayerTypeType)) (= (type |a#0@@23|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@1 |a#0@@23|) ($Is |a#0@@23| (TSeq Sequences._default.NoDupes$T@@1)))) true) :qid |unknown.0:0| :skolemid |3800| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@1 $ly@@134 |a#0@@23|)) ))))
(assert (forall ((Sequences._default.NoDupes$T@@2 T@U) ($ly@@135 T@U) (|a#0@@24| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@2) TyType) (= (type $ly@@135) LayerTypeType)) (= (type |a#0@@24|) (SeqType BoxType))) ($Is |a#0@@24| (TSeq Sequences._default.NoDupes$T@@2))) (and (=> (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@135 |a#0@@24|) true) (=> true (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@135 |a#0@@24|)))) :qid |unknown.0:0| :skolemid |3801| :pattern ( (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@135 |a#0@@24|)) )))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@3 T@U) ($ly@@136 T@U) (|a#0@@25| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@3) TyType) (= (type $ly@@136) LayerTypeType)) (= (type |a#0@@25|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@3 |a#0@@25|) ($Is |a#0@@25| (TSeq Sequences._default.NoDupes$T@@3)))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@136) |a#0@@25|) (forall ((|i#0@@38| Int) (|j#0| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#0@@38|) (< |i#0@@38| (|Seq#Length| |a#0@@25|))) (and (<= (LitInt 0) |j#0|) (< |j#0| (|Seq#Length| |a#0@@25|)))) (not (= |i#0@@38| |j#0|))) (not (= (|Seq#Index| |a#0@@25| |i#0@@38|) (|Seq#Index| |a#0@@25| |j#0|))))) :qid |sequence.54:13| :skolemid |3802| :pattern ( (|Seq#Index| |a#0@@25| |j#0|) (|Seq#Index| |a#0@@25| |i#0@@38|)) ))) (=> (forall ((|i#0@@39| Int) (|j#0@@0| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#0@@39|) (< |i#0@@39| (|Seq#Length| |a#0@@25|))) (and (<= (LitInt 0) |j#0@@0|) (< |j#0@@0| (|Seq#Length| |a#0@@25|)))) (not (= |i#0@@39| |j#0@@0|))) (not (= (|Seq#Index| |a#0@@25| |i#0@@39|) (|Seq#Index| |a#0@@25| |j#0@@0|))))) :qid |sequence.54:13| :skolemid |3802| :pattern ( (|Seq#Index| |a#0@@25| |j#0@@0|) (|Seq#Index| |a#0@@25| |i#0@@39|)) )) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@136) |a#0@@25|)))) :qid |unknown.0:0| :skolemid |3803| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@136) |a#0@@25|)) ))))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@4 T@U) ($ly@@137 T@U) (|a#0@@26| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@4) TyType) (= (type $ly@@137) LayerTypeType)) (= (type |a#0@@26|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@4 (Lit |a#0@@26|)) ($Is |a#0@@26| (TSeq Sequences._default.NoDupes$T@@4)))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@137) (Lit |a#0@@26|)) (forall ((|i#1@@2| Int) (|j#1| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#1@@2|) (< |i#1@@2| (|Seq#Length| (Lit |a#0@@26|)))) (and (<= (LitInt 0) |j#1|) (< |j#1| (|Seq#Length| (Lit |a#0@@26|))))) (not (= |i#1@@2| |j#1|))) (not (= (|Seq#Index| (Lit |a#0@@26|) |i#1@@2|) (|Seq#Index| (Lit |a#0@@26|) |j#1|))))) :qid |sequence.54:13| :skolemid |3804| :pattern ( (|Seq#Index| |a#0@@26| |j#1|) (|Seq#Index| |a#0@@26| |i#1@@2|)) ))) (=> (forall ((|i#1@@3| Int) (|j#1@@0| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#1@@3|) (< |i#1@@3| (|Seq#Length| (Lit |a#0@@26|)))) (and (<= (LitInt 0) |j#1@@0|) (< |j#1@@0| (|Seq#Length| (Lit |a#0@@26|))))) (not (= |i#1@@3| |j#1@@0|))) (not (= (|Seq#Index| (Lit |a#0@@26|) |i#1@@3|) (|Seq#Index| (Lit |a#0@@26|) |j#1@@0|))))) :qid |sequence.54:13| :skolemid |3804| :pattern ( (|Seq#Index| |a#0@@26| |j#1@@0|) (|Seq#Index| |a#0@@26| |i#1@@3|)) )) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@137) (Lit |a#0@@26|))))) :qid |unknown.0:0| :weight 3 :skolemid |3805| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@137) (Lit |a#0@@26|))) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T T@U) (|s#0@@29| T@U) (|e#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T) TyType) (= (type |s#0@@29|) (SeqType BoxType))) (= (type |e#0|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T |s#0@@29| |e#0|) (and (and ($Is |s#0@@29| (TSeq Sequences._default.IndexOf$T)) ($IsBox |e#0| Sequences._default.IndexOf$T)) (|Seq#Contains| |s#0@@29| |e#0|)))) (and (and (<= (LitInt 0) (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@29| |e#0|)) (< (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@29| |e#0|) (|Seq#Length| |s#0@@29|))) (= (|Seq#Index| |s#0@@29| (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@29| |e#0|)) |e#0|))) :qid |unknown.0:0| :skolemid |3806| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@29| |e#0|)) ))))
(assert (forall ((Sequences._default.IndexOf$T@@0 T@U) ($Heap@@9 T@U) (|s#0@@30| T@U) (|e#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@0) TyType) (= (type $Heap@@9) (MapType0Type refType MapType1Type))) (= (type |s#0@@30|) (SeqType BoxType))) (= (type |e#0@@0|) BoxType)) (and (and ($IsGoodHeap $Heap@@9) ($Is |s#0@@30| (TSeq Sequences._default.IndexOf$T@@0))) ($IsBox |e#0@@0| Sequences._default.IndexOf$T@@0))) (and (=> (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@30| |e#0@@0|) (|Seq#Contains| |s#0@@30| |e#0@@0|)) (=> (|Seq#Contains| |s#0@@30| |e#0@@0|) (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@30| |e#0@@0|)))) :qid |unknown.0:0| :skolemid |3807| :pattern ( (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@30| |e#0@@0|) ($IsGoodHeap $Heap@@9)) )))
(assert (forall ((Sequences._default.IndexOf$T@@1 T@U) (s@@46 T@U) (e T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T@@1) TyType) (= (type s@@46) (SeqType BoxType))) (= (type e) BoxType)) (|$let#4$canCall| Sequences._default.IndexOf$T@@1 s@@46 e)) (and (and (<= (LitInt 0) (|$let#4_i| Sequences._default.IndexOf$T@@1 s@@46 e)) (< (|$let#4_i| Sequences._default.IndexOf$T@@1 s@@46 e) (|Seq#Length| s@@46))) (= (|Seq#Index| s@@46 (|$let#4_i| Sequences._default.IndexOf$T@@1 s@@46 e)) e))) :qid |sequence.105:5| :skolemid |3808| :pattern ( (|$let#4_i| Sequences._default.IndexOf$T@@1 s@@46 e)) )))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@2 T@U) ($Heap@@10 T@U) (|s#0@@31| T@U) (|e#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@2) TyType) (= (type $Heap@@10) (MapType0Type refType MapType1Type))) (= (type |s#0@@31|) (SeqType BoxType))) (= (type |e#0@@1|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@2 |s#0@@31| |e#0@@1|) (and (and (and ($IsGoodHeap $Heap@@10) ($Is |s#0@@31| (TSeq Sequences._default.IndexOf$T@@2))) ($IsBox |e#0@@1| Sequences._default.IndexOf$T@@2)) (|Seq#Contains| |s#0@@31| |e#0@@1|)))) (and (|$let#4$canCall| Sequences._default.IndexOf$T@@2 |s#0@@31| |e#0@@1|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@31| |e#0@@1|) (let ((|i#0@@40| (|$let#4_i| Sequences._default.IndexOf$T@@2 |s#0@@31| |e#0@@1|))) |i#0@@40|)))) :qid |unknown.0:0| :skolemid |3809| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@31| |e#0@@1|) ($IsGoodHeap $Heap@@10)) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@3 T@U) ($Heap@@11 T@U) (|s#0@@32| T@U) (|e#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@3) TyType) (= (type $Heap@@11) (MapType0Type refType MapType1Type))) (= (type |s#0@@32|) (SeqType BoxType))) (= (type |e#0@@2|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@32|) |e#0@@2|) (and (and (and ($IsGoodHeap $Heap@@11) ($Is |s#0@@32| (TSeq Sequences._default.IndexOf$T@@3))) ($IsBox |e#0@@2| Sequences._default.IndexOf$T@@3)) (|Seq#Contains| |s#0@@32| |e#0@@2|)))) (and (|$let#4$canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@32|) |e#0@@2|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@32|) |e#0@@2|) (let ((|i#1@@4| (|$let#4_i| Sequences._default.IndexOf$T@@3 (Lit |s#0@@32|) |e#0@@2|))) |i#1@@4|)))) :qid |unknown.0:0| :weight 3 :skolemid |3810| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@32|) |e#0@@2|) ($IsGoodHeap $Heap@@11)) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@4 T@U) ($Heap@@12 T@U) (|s#0@@33| T@U) (|e#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@4) TyType) (= (type $Heap@@12) (MapType0Type refType MapType1Type))) (= (type |s#0@@33|) (SeqType BoxType))) (= (type |e#0@@3|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@33|) (Lit |e#0@@3|)) (and (and (and ($IsGoodHeap $Heap@@12) ($Is |s#0@@33| (TSeq Sequences._default.IndexOf$T@@4))) ($IsBox |e#0@@3| Sequences._default.IndexOf$T@@4)) (|Seq#Contains| |s#0@@33| |e#0@@3|)))) (and (|$let#4$canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@33|) (Lit |e#0@@3|)) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@33|) (Lit |e#0@@3|)) (let ((|i#2@@1| (|$let#4_i| Sequences._default.IndexOf$T@@4 (Lit |s#0@@33|) (Lit |e#0@@3|)))) |i#2@@1|)))) :qid |unknown.0:0| :weight 3 :skolemid |3811| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@33|) (Lit |e#0@@3|)) ($IsGoodHeap $Heap@@12)) ))))
(assert (forall ((arg0@@282 T@U) (arg1@@137 Int) ) (! (= (type (Sequences.__default.Range arg0@@282 arg1@@137)) (SeqType BoxType)) :qid |funType:Sequences.__default.Range| :pattern ( (Sequences.__default.Range arg0@@282 arg1@@137)) )))
(assert (forall (($ly@@138 T@U) (|n#0| Int) ) (!  (=> (= (type $ly@@138) LayerTypeType) (= (Sequences.__default.Range ($LS $ly@@138) |n#0|) (Sequences.__default.Range $ly@@138 |n#0|))) :qid |sequence.109:22| :skolemid |3812| :pattern ( (Sequences.__default.Range ($LS $ly@@138) |n#0|)) )))
(assert (forall (($ly@@139 T@U) (|n#0@@0| Int) ) (!  (=> (= (type $ly@@139) LayerTypeType) (= (Sequences.__default.Range $ly@@139 |n#0@@0|) (Sequences.__default.Range $LZ |n#0@@0|))) :qid |sequence.109:22| :skolemid |3813| :pattern ( (Sequences.__default.Range (AsFuelBottom $ly@@139) |n#0@@0|)) )))
(assert  (=> true (forall (($ly@@140 T@U) (|n#0@@1| Int) ) (!  (=> (and (= (type $ly@@140) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@1|) (>= |n#0@@1| (LitInt 0)))) (and (and (= (|Seq#Length| (Sequences.__default.Range $ly@@140 |n#0@@1|)) |n#0@@1|) (forall ((|i#0@@41| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@41|) (< |i#0@@41| |n#0@@1|)) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@140 |n#0@@1|) |i#0@@41|))) |i#0@@41|)) :qid |sequence.112:20| :skolemid |3814| :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@140 |n#0@@1|) |i#0@@41|))) ))) ($Is (Sequences.__default.Range $ly@@140 |n#0@@1|) (TSeq TInt)))) :qid |sequence.109:22| :skolemid |3815| :pattern ( (Sequences.__default.Range $ly@@140 |n#0@@1|)) ))))
(assert (forall (($ly@@141 T@U) (|n#0@@2| Int) ) (!  (=> (= (type $ly@@141) LayerTypeType) (and (=> (|Sequences.__default.Range#requires| $ly@@141 |n#0@@2|) (>= |n#0@@2| (LitInt 0))) (=> (>= |n#0@@2| (LitInt 0)) (|Sequences.__default.Range#requires| $ly@@141 |n#0@@2|)))) :qid |sequence.109:22| :skolemid |3816| :pattern ( (|Sequences.__default.Range#requires| $ly@@141 |n#0@@2|)) )))
(assert  (=> true (forall (($ly@@142 T@U) (|n#0@@3| Int) ) (!  (=> (and (= (type $ly@@142) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@3|) (>= |n#0@@3| (LitInt 0)))) (and (=> (not (= |n#0@@3| (LitInt 0))) (|Sequences.__default.Range#canCall| (- |n#0@@3| 1))) (= (Sequences.__default.Range ($LS $ly@@142) |n#0@@3|) (ite (= |n#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range $ly@@142 (- |n#0@@3| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (- |n#0@@3| 1))))))))) :qid |sequence.109:22| :skolemid |3817| :pattern ( (Sequences.__default.Range ($LS $ly@@142) |n#0@@3|)) ))))
(assert  (=> true (forall (($ly@@143 T@U) (|n#0@@4| Int) ) (!  (=> (and (= (type $ly@@143) LayerTypeType) (or (|Sequences.__default.Range#canCall| (LitInt |n#0@@4|)) (>= (LitInt |n#0@@4|) (LitInt 0)))) (and (=> (not (= (LitInt |n#0@@4|) (LitInt 0))) (|Sequences.__default.Range#canCall| (LitInt (- |n#0@@4| 1)))) (= (Sequences.__default.Range ($LS $ly@@143) (LitInt |n#0@@4|)) (ite (= (LitInt |n#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range ($LS $ly@@143) (LitInt (- |n#0@@4| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt (- |n#0@@4| 1)))))))))) :qid |sequence.109:22| :weight 3 :skolemid |3818| :pattern ( (Sequences.__default.Range ($LS $ly@@143) (LitInt |n#0@@4|))) ))))
(assert (forall ((arg0@@283 T@U) (arg1@@138 T@U) (arg2@@83 T@U) (arg3@@44 T@U) (arg4@@30 T@U) (arg5@@15 T@U) ) (! (= (type (Sequences.__default.Apply arg0@@283 arg1@@138 arg2@@83 arg3@@44 arg4@@30 arg5@@15)) (SeqType BoxType)) :qid |funType:Sequences.__default.Apply| :pattern ( (Sequences.__default.Apply arg0@@283 arg1@@138 arg2@@83 arg3@@44 arg4@@30 arg5@@15)) )))
(assert (forall ((Sequences._default.Apply$E T@U) (Sequences._default.Apply$R T@U) ($ly@@144 T@U) ($Heap@@13 T@U) (|f#0@@27| T@U) (|run#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E) TyType) (= (type Sequences._default.Apply$R) TyType)) (= (type $ly@@144) LayerTypeType)) (= (type $Heap@@13) (MapType0Type refType MapType1Type))) (= (type |f#0@@27|) HandleTypeType)) (= (type |run#0@@15|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@144) $Heap@@13 |f#0@@27| |run#0@@15|) (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R $ly@@144 $Heap@@13 |f#0@@27| |run#0@@15|))) :qid |unknown.0:0| :skolemid |3819| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@144) $Heap@@13 |f#0@@27| |run#0@@15|)) )))
(assert (forall ((Sequences._default.Apply$E@@0 T@U) (Sequences._default.Apply$R@@0 T@U) ($ly@@145 T@U) ($Heap@@14 T@U) (|f#0@@28| T@U) (|run#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E@@0) TyType) (= (type Sequences._default.Apply$R@@0) TyType)) (= (type $ly@@145) LayerTypeType)) (= (type $Heap@@14) (MapType0Type refType MapType1Type))) (= (type |f#0@@28|) HandleTypeType)) (= (type |run#0@@16|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $ly@@145 $Heap@@14 |f#0@@28| |run#0@@16|) (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $LZ $Heap@@14 |f#0@@28| |run#0@@16|))) :qid |unknown.0:0| :skolemid |3820| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 (AsFuelBottom $ly@@145) $Heap@@14 |f#0@@28| |run#0@@16|)) )))
(assert (forall ((Sequences._default.Apply$E@@1 T@U) (Sequences._default.Apply$R@@1 T@U) ($ly@@146 T@U) ($h0@@1 T@U) ($h1@@1 T@U) (|f#0@@29| T@U) (|run#0@@17| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@1) TyType) (= (type Sequences._default.Apply$R@@1) TyType)) (= (type $ly@@146) LayerTypeType)) (= (type $h0@@1) (MapType0Type refType MapType1Type))) (= (type $h1@@1) (MapType0Type refType MapType1Type))) (= (type |f#0@@29|) HandleTypeType)) (= (type |run#0@@17|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@1) ($IsGoodHeap $h1@@1)) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@29| |run#0@@17|) (and ($Is |f#0@@29| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1)) ($Is |run#0@@17| (TSeq Sequences._default.Apply$E@@1))))) (and ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1)))) (forall (($o@@35 T@U) ($f@@1 T@U) ) (! (let ((alpha@@8 (FieldTypeInv0 (type $f@@1)))) (=> (and (and (= (type $o@@35) refType) (= (type $f@@1) (FieldType alpha@@8))) (and (not (= $o@@35 null)) (exists ((|i#0@@42| Int) (|o#0| T@U) ) (!  (and (= (type |o#0|) refType) (and (and ($Is |o#0| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@42|) (< |i#0@@42| (|Seq#Length| |run#0@@17|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@29| (|Seq#Index| |run#0@@17| |i#0@@42|)) ($Box |o#0|))))) (= ($Box $o@@35) ($Box |o#0|)))) :qid |sequence.121:15| :skolemid |3821| :pattern ( (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@29| (|Seq#Index| |run#0@@17| |i#0@@42|)) ($Box |o#0|))) )))) (= (MapType1Select (MapType0Select $h0@@1 $o@@35) $f@@1) (MapType1Select (MapType0Select $h1@@1 $o@@35) $f@@1)))) :qid |unknown.0:0| :skolemid |3822| :no-pattern (type $o@@35) :no-pattern (type $f@@1) :no-pattern (U_2_int $o@@35) :no-pattern (U_2_bool $o@@35) :no-pattern (U_2_int $f@@1) :no-pattern (U_2_bool $f@@1) ))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@146 $h0@@1 |f#0@@29| |run#0@@17|) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@146 $h1@@1 |f#0@@29| |run#0@@17|))) :qid |unknown.0:0| :skolemid |3823| :pattern ( ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@146 $h1@@1 |f#0@@29| |run#0@@17|)) )))
(assert  (=> true (forall ((Sequences._default.Apply$E@@2 T@U) (Sequences._default.Apply$R@@2 T@U) ($ly@@147 T@U) ($Heap@@15 T@U) (|f#0@@30| T@U) (|run#0@@18| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@2) TyType) (= (type Sequences._default.Apply$R@@2) TyType)) (= (type $ly@@147) LayerTypeType)) (= (type $Heap@@15) (MapType0Type refType MapType1Type))) (= (type |f#0@@30|) HandleTypeType)) (= (type |run#0@@18|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@15 |f#0@@30| |run#0@@18|) (and (and (and ($IsGoodHeap $Heap@@15) ($Is |f#0@@30| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2))) ($Is |run#0@@18| (TSeq Sequences._default.Apply$E@@2))) (forall ((|i#1@@5| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@5|) (< |i#1@@5| (|Seq#Length| |run#0@@18|))) (Requires1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@15 |f#0@@30| (|Seq#Index| |run#0@@18| |i#1@@5|)))) :qid |sequence.118:21| :skolemid |3824| :pattern ( (|Seq#Index| |run#0@@18| |i#1@@5|)) ))))) (and (and (= (|Seq#Length| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@147 $Heap@@15 |f#0@@30| |run#0@@18|)) (|Seq#Length| |run#0@@18|)) (forall ((|i#2@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@2|) (< |i#2@@2| (|Seq#Length| |run#0@@18|))) (= (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@147 $Heap@@15 |f#0@@30| |run#0@@18|) |i#2@@2|) (Apply1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@15 |f#0@@30| (|Seq#Index| |run#0@@18| |i#2@@2|))))) :qid |sequence.120:20| :skolemid |3825| :pattern ( (|Seq#Index| |run#0@@18| |i#2@@2|)) :pattern ( (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@147 $Heap@@15 |f#0@@30| |run#0@@18|) |i#2@@2|)) ))) ($Is (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@147 $Heap@@15 |f#0@@30| |run#0@@18|) (TSeq Sequences._default.Apply$R@@2)))) :qid |unknown.0:0| :skolemid |3826| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@147 $Heap@@15 |f#0@@30| |run#0@@18|)) ))))
(assert (forall ((Sequences._default.Apply$E@@3 T@U) (Sequences._default.Apply$R@@3 T@U) ($ly@@148 T@U) ($Heap@@16 T@U) (|f#0@@31| T@U) (|run#0@@19| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@3) TyType) (= (type Sequences._default.Apply$R@@3) TyType)) (= (type $ly@@148) LayerTypeType)) (= (type $Heap@@16) (MapType0Type refType MapType1Type))) (= (type |f#0@@31|) HandleTypeType)) (= (type |run#0@@19|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@16) ($Is |f#0@@31| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3))) ($Is |run#0@@19| (TSeq Sequences._default.Apply$E@@3)))) (and (=> (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@148 $Heap@@16 |f#0@@31| |run#0@@19|) (forall ((|i#3@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@1|) (< |i#3@@1| (|Seq#Length| |run#0@@19|))) (Requires1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $Heap@@16 |f#0@@31| (|Seq#Index| |run#0@@19| |i#3@@1|)))) :qid |sequence.118:21| :skolemid |3827| :pattern ( (|Seq#Index| |run#0@@19| |i#3@@1|)) ))) (=> (forall ((|i#3@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@2|) (< |i#3@@2| (|Seq#Length| |run#0@@19|))) (Requires1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $Heap@@16 |f#0@@31| (|Seq#Index| |run#0@@19| |i#3@@2|)))) :qid |sequence.118:21| :skolemid |3827| :pattern ( (|Seq#Index| |run#0@@19| |i#3@@2|)) )) (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@148 $Heap@@16 |f#0@@31| |run#0@@19|)))) :qid |unknown.0:0| :skolemid |3828| :pattern ( (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@148 $Heap@@16 |f#0@@31| |run#0@@19|)) )))
(assert  (=> true (forall ((Sequences._default.Apply$E@@4 T@U) (Sequences._default.Apply$R@@4 T@U) ($ly@@149 T@U) ($Heap@@17 T@U) (|f#0@@32| T@U) (|run#0@@20| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@4) TyType) (= (type Sequences._default.Apply$R@@4) TyType)) (= (type $ly@@149) LayerTypeType)) (= (type $Heap@@17) (MapType0Type refType MapType1Type))) (= (type |f#0@@32|) HandleTypeType)) (= (type |run#0@@20|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@17 |f#0@@32| |run#0@@20|) (and (and (and ($IsGoodHeap $Heap@@17) ($Is |f#0@@32| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4))) ($Is |run#0@@20| (TSeq Sequences._default.Apply$E@@4))) (forall ((|i#3@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@3|) (< |i#3@@3| (|Seq#Length| |run#0@@20|))) (Requires1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@17 |f#0@@32| (|Seq#Index| |run#0@@20| |i#3@@3|)))) :qid |sequence.118:21| :skolemid |3827| :pattern ( (|Seq#Index| |run#0@@20| |i#3@@3|)) ))))) (and (=> (not (= (|Seq#Length| |run#0@@20|) (LitInt 0))) (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@17 |f#0@@32| (|Seq#Drop| |run#0@@20| (LitInt 1)))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@149) $Heap@@17 |f#0@@32| |run#0@@20|) (ite (= (|Seq#Length| |run#0@@20|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Apply1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@17 |f#0@@32| (|Seq#Index| |run#0@@20| (LitInt 0)))) (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $ly@@149 $Heap@@17 |f#0@@32| (|Seq#Drop| |run#0@@20| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |3829| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@149) $Heap@@17 |f#0@@32| |run#0@@20|)) ))))
(assert (forall ((arg0@@284 T@U) (arg1@@139 T@U) (arg2@@84 T@U) (arg3@@45 T@U) (arg4@@31 T@U) (arg5@@16 T@U) ) (! (= (type (Sequences.__default.ApplyOpaque arg0@@284 arg1@@139 arg2@@84 arg3@@45 arg4@@31 arg5@@16)) (SeqType BoxType)) :qid |funType:Sequences.__default.ApplyOpaque| :pattern ( (Sequences.__default.ApplyOpaque arg0@@284 arg1@@139 arg2@@84 arg3@@45 arg4@@31 arg5@@16)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E T@U) (Sequences._default.ApplyOpaque$R T@U) ($ly@@150 T@U) ($Heap@@18 T@U) (|f#0@@33| T@U) (|run#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E) TyType) (= (type Sequences._default.ApplyOpaque$R) TyType)) (= (type $ly@@150) LayerTypeType)) (= (type $Heap@@18) (MapType0Type refType MapType1Type))) (= (type |f#0@@33|) HandleTypeType)) (= (type |run#0@@21|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@150) $Heap@@18 |f#0@@33| |run#0@@21|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R $ly@@150 $Heap@@18 |f#0@@33| |run#0@@21|))) :qid |unknown.0:0| :skolemid |3830| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@150) $Heap@@18 |f#0@@33| |run#0@@21|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@0 T@U) (Sequences._default.ApplyOpaque$R@@0 T@U) ($ly@@151 T@U) ($Heap@@19 T@U) (|f#0@@34| T@U) (|run#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@0) TyType) (= (type Sequences._default.ApplyOpaque$R@@0) TyType)) (= (type $ly@@151) LayerTypeType)) (= (type $Heap@@19) (MapType0Type refType MapType1Type))) (= (type |f#0@@34|) HandleTypeType)) (= (type |run#0@@22|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $ly@@151 $Heap@@19 |f#0@@34| |run#0@@22|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $LZ $Heap@@19 |f#0@@34| |run#0@@22|))) :qid |unknown.0:0| :skolemid |3831| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 (AsFuelBottom $ly@@151) $Heap@@19 |f#0@@34| |run#0@@22|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@1 T@U) (Sequences._default.ApplyOpaque$R@@1 T@U) ($ly@@152 T@U) ($h0@@2 T@U) ($h1@@2 T@U) (|f#0@@35| T@U) (|run#0@@23| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@1) TyType) (= (type Sequences._default.ApplyOpaque$R@@1) TyType)) (= (type $ly@@152) LayerTypeType)) (= (type $h0@@2) (MapType0Type refType MapType1Type))) (= (type $h1@@2) (MapType0Type refType MapType1Type))) (= (type |f#0@@35|) HandleTypeType)) (= (type |run#0@@23|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@2) ($IsGoodHeap $h1@@2)) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@35| |run#0@@23|) (and ($Is |f#0@@35| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1)) ($Is |run#0@@23| (TSeq Sequences._default.ApplyOpaque$E@@1))))) (and ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2)))) (forall (($o@@36 T@U) ($f@@2 T@U) ) (! (let ((alpha@@9 (FieldTypeInv0 (type $f@@2)))) (=> (and (and (= (type $o@@36) refType) (= (type $f@@2) (FieldType alpha@@9))) (and (not (= $o@@36 null)) (exists ((|i#0@@43| Int) (|o#0@@0| T@U) ) (!  (and (= (type |o#0@@0|) refType) (and (and ($Is |o#0@@0| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@43|) (< |i#0@@43| (|Seq#Length| |run#0@@23|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@35| (|Seq#Index| |run#0@@23| |i#0@@43|)) ($Box |o#0@@0|))))) (= ($Box $o@@36) ($Box |o#0@@0|)))) :qid |sequence.132:15| :skolemid |3832| :pattern ( (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@35| (|Seq#Index| |run#0@@23| |i#0@@43|)) ($Box |o#0@@0|))) )))) (= (MapType1Select (MapType0Select $h0@@2 $o@@36) $f@@2) (MapType1Select (MapType0Select $h1@@2 $o@@36) $f@@2)))) :qid |unknown.0:0| :skolemid |3833| :no-pattern (type $o@@36) :no-pattern (type $f@@2) :no-pattern (U_2_int $o@@36) :no-pattern (U_2_bool $o@@36) :no-pattern (U_2_int $f@@2) :no-pattern (U_2_bool $f@@2) ))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@152 $h0@@2 |f#0@@35| |run#0@@23|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@152 $h1@@2 |f#0@@35| |run#0@@23|))) :qid |unknown.0:0| :skolemid |3834| :pattern ( ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@152 $h1@@2 |f#0@@35| |run#0@@23|)) )))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@2 T@U) (Sequences._default.ApplyOpaque$R@@2 T@U) ($ly@@153 T@U) ($Heap@@20 T@U) (|f#0@@36| T@U) (|run#0@@24| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@2) TyType) (= (type Sequences._default.ApplyOpaque$R@@2) TyType)) (= (type $ly@@153) LayerTypeType)) (= (type $Heap@@20) (MapType0Type refType MapType1Type))) (= (type |f#0@@36|) HandleTypeType)) (= (type |run#0@@24|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@20 |f#0@@36| |run#0@@24|) (and (and (and ($IsGoodHeap $Heap@@20) ($Is |f#0@@36| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2))) ($Is |run#0@@24| (TSeq Sequences._default.ApplyOpaque$E@@2))) (forall ((|i#1@@6| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@6|) (< |i#1@@6| (|Seq#Length| |run#0@@24|))) (Requires1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@20 |f#0@@36| (|Seq#Index| |run#0@@24| |i#1@@6|)))) :qid |sequence.129:21| :skolemid |3835| :pattern ( (|Seq#Index| |run#0@@24| |i#1@@6|)) ))))) (and (and (= (|Seq#Length| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@153 $Heap@@20 |f#0@@36| |run#0@@24|)) (|Seq#Length| |run#0@@24|)) (forall ((|i#2@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@3|) (< |i#2@@3| (|Seq#Length| |run#0@@24|))) (= (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@153 $Heap@@20 |f#0@@36| |run#0@@24|) |i#2@@3|) (Apply1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@20 |f#0@@36| (|Seq#Index| |run#0@@24| |i#2@@3|))))) :qid |sequence.131:20| :skolemid |3836| :pattern ( (|Seq#Index| |run#0@@24| |i#2@@3|)) :pattern ( (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@153 $Heap@@20 |f#0@@36| |run#0@@24|) |i#2@@3|)) ))) ($Is (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@153 $Heap@@20 |f#0@@36| |run#0@@24|) (TSeq Sequences._default.ApplyOpaque$R@@2)))) :qid |unknown.0:0| :skolemid |3837| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@153 $Heap@@20 |f#0@@36| |run#0@@24|)) ))))
(assert (forall ((Sequences._default.ApplyOpaque$E@@3 T@U) (Sequences._default.ApplyOpaque$R@@3 T@U) ($ly@@154 T@U) ($Heap@@21 T@U) (|f#0@@37| T@U) (|run#0@@25| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@3) TyType) (= (type Sequences._default.ApplyOpaque$R@@3) TyType)) (= (type $ly@@154) LayerTypeType)) (= (type $Heap@@21) (MapType0Type refType MapType1Type))) (= (type |f#0@@37|) HandleTypeType)) (= (type |run#0@@25|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@21) ($Is |f#0@@37| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3))) ($Is |run#0@@25| (TSeq Sequences._default.ApplyOpaque$E@@3)))) (and (=> (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@154 $Heap@@21 |f#0@@37| |run#0@@25|) (forall ((|i#3@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@4|) (< |i#3@@4| (|Seq#Length| |run#0@@25|))) (Requires1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $Heap@@21 |f#0@@37| (|Seq#Index| |run#0@@25| |i#3@@4|)))) :qid |sequence.129:21| :skolemid |3838| :pattern ( (|Seq#Index| |run#0@@25| |i#3@@4|)) ))) (=> (forall ((|i#3@@5| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@5|) (< |i#3@@5| (|Seq#Length| |run#0@@25|))) (Requires1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $Heap@@21 |f#0@@37| (|Seq#Index| |run#0@@25| |i#3@@5|)))) :qid |sequence.129:21| :skolemid |3838| :pattern ( (|Seq#Index| |run#0@@25| |i#3@@5|)) )) (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@154 $Heap@@21 |f#0@@37| |run#0@@25|)))) :qid |unknown.0:0| :skolemid |3839| :pattern ( (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@154 $Heap@@21 |f#0@@37| |run#0@@25|)) )))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@4 T@U) (Sequences._default.ApplyOpaque$R@@4 T@U) ($ly@@155 T@U) ($Heap@@22 T@U) (|f#0@@38| T@U) (|run#0@@26| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@4) TyType) (= (type Sequences._default.ApplyOpaque$R@@4) TyType)) (= (type $ly@@155) LayerTypeType)) (= (type $Heap@@22) (MapType0Type refType MapType1Type))) (= (type |f#0@@38|) HandleTypeType)) (= (type |run#0@@26|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@22 |f#0@@38| |run#0@@26|) (and (and (and ($IsGoodHeap $Heap@@22) ($Is |f#0@@38| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4))) ($Is |run#0@@26| (TSeq Sequences._default.ApplyOpaque$E@@4))) (forall ((|i#3@@6| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@6|) (< |i#3@@6| (|Seq#Length| |run#0@@26|))) (Requires1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@22 |f#0@@38| (|Seq#Index| |run#0@@26| |i#3@@6|)))) :qid |sequence.129:21| :skolemid |3838| :pattern ( (|Seq#Index| |run#0@@26| |i#3@@6|)) ))))) (and (|Sequences.__default.Apply#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@22 |f#0@@38| |run#0@@26|) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@155) $Heap@@22 |f#0@@38| |run#0@@26|) (Sequences.__default.Apply Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $LZ) $Heap@@22 |f#0@@38| |run#0@@26|)))) :qid |unknown.0:0| :skolemid |3840| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@155) $Heap@@22 |f#0@@38| |run#0@@26|)) ))))
(assert (forall ((arg0@@285 T@U) (arg1@@140 T@U) (arg2@@85 T@U) (arg3@@46 T@U) (arg4@@32 T@U) ) (! (= (type (Sequences.__default.Filter arg0@@285 arg1@@140 arg2@@85 arg3@@46 arg4@@32)) (SeqType BoxType)) :qid |funType:Sequences.__default.Filter| :pattern ( (Sequences.__default.Filter arg0@@285 arg1@@140 arg2@@85 arg3@@46 arg4@@32)) )))
(assert (forall ((Sequences._default.Filter$E T@U) ($ly@@156 T@U) ($Heap@@23 T@U) (|f#0@@39| T@U) (|run#0@@27| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E) TyType) (= (type $ly@@156) LayerTypeType)) (= (type $Heap@@23) (MapType0Type refType MapType1Type))) (= (type |f#0@@39|) HandleTypeType)) (= (type |run#0@@27|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@156) $Heap@@23 |f#0@@39| |run#0@@27|) (Sequences.__default.Filter Sequences._default.Filter$E $ly@@156 $Heap@@23 |f#0@@39| |run#0@@27|))) :qid |unknown.0:0| :skolemid |3841| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@156) $Heap@@23 |f#0@@39| |run#0@@27|)) )))
(assert (forall ((Sequences._default.Filter$E@@0 T@U) ($ly@@157 T@U) ($Heap@@24 T@U) (|f#0@@40| T@U) (|run#0@@28| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E@@0) TyType) (= (type $ly@@157) LayerTypeType)) (= (type $Heap@@24) (MapType0Type refType MapType1Type))) (= (type |f#0@@40|) HandleTypeType)) (= (type |run#0@@28|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@0 $ly@@157 $Heap@@24 |f#0@@40| |run#0@@28|) (Sequences.__default.Filter Sequences._default.Filter$E@@0 $LZ $Heap@@24 |f#0@@40| |run#0@@28|))) :qid |unknown.0:0| :skolemid |3842| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@0 (AsFuelBottom $ly@@157) $Heap@@24 |f#0@@40| |run#0@@28|)) )))
(assert (forall ((Sequences._default.Filter$E@@1 T@U) ($ly@@158 T@U) ($h0@@3 T@U) ($h1@@3 T@U) (|f#0@@41| T@U) (|run#0@@29| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.Filter$E@@1) TyType) (= (type $ly@@158) LayerTypeType)) (= (type $h0@@3) (MapType0Type refType MapType1Type))) (= (type $h1@@3) (MapType0Type refType MapType1Type))) (= (type |f#0@@41|) HandleTypeType)) (= (type |run#0@@29|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@3) ($IsGoodHeap $h1@@3)) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@1 $h0@@3 |f#0@@41| |run#0@@29|) (and ($Is |f#0@@41| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@1 TBool)) ($Is |run#0@@29| (TSeq Sequences._default.Filter$E@@1))))) (and ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3)))) (forall (($o@@37 T@U) ($f@@3 T@U) ) (! (let ((alpha@@10 (FieldTypeInv0 (type $f@@3)))) (=> (and (and (= (type $o@@37) refType) (= (type $f@@3) (FieldType alpha@@10))) (and (not (= $o@@37 null)) (exists ((|_x0#0| T@U) (|_o0#0| T@U) ) (!  (and (and (= (type |_x0#0|) BoxType) (= (type |_o0#0|) refType)) (and (and (and ($IsBox |_x0#0| Sequences._default.Filter$E@@1) ($Is |_o0#0| Tclass._System.object?)) (U_2_bool (MapType0Select (Reads1 Sequences._default.Filter$E@@1 TBool $h0@@3 |f#0@@41| |_x0#0|) ($Box |_o0#0|)))) (= ($Box $o@@37) ($Box |_o0#0|)))) :qid |sequence.141:13| :skolemid |3843| :no-pattern (type |_x0#0|) :no-pattern (type |_o0#0|) :no-pattern (U_2_int |_x0#0|) :no-pattern (U_2_bool |_x0#0|) :no-pattern (U_2_int |_o0#0|) :no-pattern (U_2_bool |_o0#0|) )))) (= (MapType1Select (MapType0Select $h0@@3 $o@@37) $f@@3) (MapType1Select (MapType0Select $h1@@3 $o@@37) $f@@3)))) :qid |unknown.0:0| :skolemid |3844| :no-pattern (type $o@@37) :no-pattern (type $f@@3) :no-pattern (U_2_int $o@@37) :no-pattern (U_2_bool $o@@37) :no-pattern (U_2_int $f@@3) :no-pattern (U_2_bool $f@@3) ))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@158 $h0@@3 |f#0@@41| |run#0@@29|) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@158 $h1@@3 |f#0@@41| |run#0@@29|))) :qid |unknown.0:0| :skolemid |3845| :pattern ( ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@158 $h1@@3 |f#0@@41| |run#0@@29|)) )))
(assert  (=> true (forall ((Sequences._default.Filter$E@@2 T@U) ($ly@@159 T@U) ($Heap@@25 T@U) (|f#0@@42| T@U) (|run#0@@30| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@2) TyType) (= (type $ly@@159) LayerTypeType)) (= (type $Heap@@25) (MapType0Type refType MapType1Type))) (= (type |f#0@@42|) HandleTypeType)) (= (type |run#0@@30|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@2 $Heap@@25 |f#0@@42| |run#0@@30|) (and (and (and ($IsGoodHeap $Heap@@25) ($Is |f#0@@42| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@2 TBool))) ($Is |run#0@@30| (TSeq Sequences._default.Filter$E@@2))) (forall ((|i#0@@44| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@44|) (< |i#0@@44| (|Seq#Length| |run#0@@30|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@25 |f#0@@42| (|Seq#Index| |run#0@@30| |i#0@@44|)))) :qid |sequence.138:21| :skolemid |3846| :pattern ( (|Seq#Index| |run#0@@30| |i#0@@44|)) ))))) (and (and (<= (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@159 $Heap@@25 |f#0@@42| |run#0@@30|)) (|Seq#Length| |run#0@@30|)) (forall ((|i#1@@7| Int) ) (!  (=> (<= (LitInt 0) |i#1@@7|) (=> (and (< |i#1@@7| (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@159 $Heap@@25 |f#0@@42| |run#0@@30|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@25 |f#0@@42| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@159 $Heap@@25 |f#0@@42| |run#0@@30|) |i#1@@7|))) (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@2 TBool $Heap@@25 |f#0@@42| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@159 $Heap@@25 |f#0@@42| |run#0@@30|) |i#1@@7|)))))) :qid |sequence.140:20| :skolemid |3847| :pattern ( (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@159 $Heap@@25 |f#0@@42| |run#0@@30|) |i#1@@7|)) ))) ($Is (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@159 $Heap@@25 |f#0@@42| |run#0@@30|) (TSeq Sequences._default.Filter$E@@2)))) :qid |unknown.0:0| :skolemid |3848| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@159 $Heap@@25 |f#0@@42| |run#0@@30|)) ))))
(assert (forall ((Sequences._default.Filter$E@@3 T@U) ($ly@@160 T@U) ($Heap@@26 T@U) (|f#0@@43| T@U) (|run#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@3) TyType) (= (type $ly@@160) LayerTypeType)) (= (type $Heap@@26) (MapType0Type refType MapType1Type))) (= (type |f#0@@43|) HandleTypeType)) (= (type |run#0@@31|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@26) ($Is |f#0@@43| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@3 TBool))) ($Is |run#0@@31| (TSeq Sequences._default.Filter$E@@3)))) (and (=> (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@160 $Heap@@26 |f#0@@43| |run#0@@31|) (forall ((|i#2@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@4|) (< |i#2@@4| (|Seq#Length| |run#0@@31|))) (Requires1 Sequences._default.Filter$E@@3 TBool $Heap@@26 |f#0@@43| (|Seq#Index| |run#0@@31| |i#2@@4|)))) :qid |sequence.138:21| :skolemid |3849| :pattern ( (|Seq#Index| |run#0@@31| |i#2@@4|)) ))) (=> (forall ((|i#2@@5| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@5|) (< |i#2@@5| (|Seq#Length| |run#0@@31|))) (Requires1 Sequences._default.Filter$E@@3 TBool $Heap@@26 |f#0@@43| (|Seq#Index| |run#0@@31| |i#2@@5|)))) :qid |sequence.138:21| :skolemid |3849| :pattern ( (|Seq#Index| |run#0@@31| |i#2@@5|)) )) (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@160 $Heap@@26 |f#0@@43| |run#0@@31|)))) :qid |unknown.0:0| :skolemid |3850| :pattern ( (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@160 $Heap@@26 |f#0@@43| |run#0@@31|)) )))
(assert  (=> true (forall ((Sequences._default.Filter$E@@4 T@U) ($ly@@161 T@U) ($Heap@@27 T@U) (|f#0@@44| T@U) (|run#0@@32| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@4) TyType) (= (type $ly@@161) LayerTypeType)) (= (type $Heap@@27) (MapType0Type refType MapType1Type))) (= (type |f#0@@44|) HandleTypeType)) (= (type |run#0@@32|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@27 |f#0@@44| |run#0@@32|) (and (and (and ($IsGoodHeap $Heap@@27) ($Is |f#0@@44| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@4 TBool))) ($Is |run#0@@32| (TSeq Sequences._default.Filter$E@@4))) (forall ((|i#2@@6| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@6|) (< |i#2@@6| (|Seq#Length| |run#0@@32|))) (Requires1 Sequences._default.Filter$E@@4 TBool $Heap@@27 |f#0@@44| (|Seq#Index| |run#0@@32| |i#2@@6|)))) :qid |sequence.138:21| :skolemid |3849| :pattern ( (|Seq#Index| |run#0@@32| |i#2@@6|)) ))))) (and (=> (not (= (|Seq#Length| |run#0@@32|) (LitInt 0))) (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@27 |f#0@@44| (|Seq#Drop| |run#0@@32| (LitInt 1)))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@161) $Heap@@27 |f#0@@44| |run#0@@32|) (ite (= (|Seq#Length| |run#0@@32|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ite (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@4 TBool $Heap@@27 |f#0@@44| (|Seq#Index| |run#0@@32| (LitInt 0))))) (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |run#0@@32| (LitInt 0))) (|Seq#Empty| BoxType)) (Sequences.__default.Filter Sequences._default.Filter$E@@4 $ly@@161 $Heap@@27 |f#0@@44| (|Seq#Drop| |run#0@@32| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |3851| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@161) $Heap@@27 |f#0@@44| |run#0@@32|)) ))))
(assert (forall ((arg0@@286 T@U) (arg1@@141 T@U) (arg2@@86 T@U) (arg3@@47 T@U) (arg4@@33 T@U) (arg5@@17 T@U) ) (! (= (type (Sequences.__default.FoldLeft arg0@@286 arg1@@141 arg2@@86 arg3@@47 arg4@@33 arg5@@17)) BoxType) :qid |funType:Sequences.__default.FoldLeft| :pattern ( (Sequences.__default.FoldLeft arg0@@286 arg1@@141 arg2@@86 arg3@@47 arg4@@33 arg5@@17)) )))
(assert (forall ((Sequences._default.FoldLeft$A T@U) (Sequences._default.FoldLeft$E T@U) ($ly@@162 T@U) (|f#0@@45| T@U) (|init#0| T@U) (|run#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A) TyType) (= (type Sequences._default.FoldLeft$E) TyType)) (= (type $ly@@162) LayerTypeType)) (= (type |f#0@@45|) HandleTypeType)) (= (type |init#0|) BoxType)) (= (type |run#0@@33|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@162) |f#0@@45| |init#0| |run#0@@33|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E $ly@@162 |f#0@@45| |init#0| |run#0@@33|))) :qid |unknown.0:0| :skolemid |3852| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@162) |f#0@@45| |init#0| |run#0@@33|)) )))
(assert (forall ((Sequences._default.FoldLeft$A@@0 T@U) (Sequences._default.FoldLeft$E@@0 T@U) ($ly@@163 T@U) (|f#0@@46| T@U) (|init#0@@0| T@U) (|run#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@0) TyType) (= (type Sequences._default.FoldLeft$E@@0) TyType)) (= (type $ly@@163) LayerTypeType)) (= (type |f#0@@46|) HandleTypeType)) (= (type |init#0@@0|) BoxType)) (= (type |run#0@@34|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $ly@@163 |f#0@@46| |init#0@@0| |run#0@@34|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $LZ |f#0@@46| |init#0@@0| |run#0@@34|))) :qid |unknown.0:0| :skolemid |3853| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 (AsFuelBottom $ly@@163) |f#0@@46| |init#0@@0| |run#0@@34|)) )))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@1 T@U) (Sequences._default.FoldLeft$E@@1 T@U) ($ly@@164 T@U) (|f#0@@47| T@U) (|init#0@@1| T@U) (|run#0@@35| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@1) TyType) (= (type Sequences._default.FoldLeft$E@@1) TyType)) (= (type $ly@@164) LayerTypeType)) (= (type |f#0@@47|) HandleTypeType)) (= (type |init#0@@1|) BoxType)) (= (type |run#0@@35|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 |f#0@@47| |init#0@@1| |run#0@@35|) (and (and ($Is |f#0@@47| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 Sequences._default.FoldLeft$A@@1)) ($IsBox |init#0@@1| Sequences._default.FoldLeft$A@@1)) ($Is |run#0@@35| (TSeq Sequences._default.FoldLeft$E@@1))))) ($IsBox (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@164 |f#0@@47| |init#0@@1| |run#0@@35|) Sequences._default.FoldLeft$A@@1)) :qid |unknown.0:0| :skolemid |3854| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@164 |f#0@@47| |init#0@@1| |run#0@@35|)) ))))
(assert (forall ((Sequences._default.FoldLeft$A@@2 T@U) (Sequences._default.FoldLeft$E@@2 T@U) ($ly@@165 T@U) ($Heap@@28 T@U) (|f#0@@48| T@U) (|init#0@@2| T@U) (|run#0@@36| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@2) TyType) (= (type Sequences._default.FoldLeft$E@@2) TyType)) (= (type $ly@@165) LayerTypeType)) (= (type $Heap@@28) (MapType0Type refType MapType1Type))) (= (type |f#0@@48|) HandleTypeType)) (= (type |init#0@@2|) BoxType)) (= (type |run#0@@36|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@28) ($Is |f#0@@48| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 Sequences._default.FoldLeft$A@@2))) ($IsBox |init#0@@2| Sequences._default.FoldLeft$A@@2)) ($Is |run#0@@36| (TSeq Sequences._default.FoldLeft$E@@2)))) (and (=> (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@165 |f#0@@48| |init#0@@2| |run#0@@36|) true) (=> true (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@165 |f#0@@48| |init#0@@2| |run#0@@36|)))) :qid |unknown.0:0| :skolemid |3855| :pattern ( (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@165 |f#0@@48| |init#0@@2| |run#0@@36|) ($IsGoodHeap $Heap@@28)) )))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@3 T@U) (Sequences._default.FoldLeft$E@@3 T@U) ($ly@@166 T@U) ($Heap@@29 T@U) (|f#0@@49| T@U) (|init#0@@3| T@U) (|run#0@@37| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@3) TyType) (= (type Sequences._default.FoldLeft$E@@3) TyType)) (= (type $ly@@166) LayerTypeType)) (= (type $Heap@@29) (MapType0Type refType MapType1Type))) (= (type |f#0@@49|) HandleTypeType)) (= (type |init#0@@3|) BoxType)) (= (type |run#0@@37|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@49| |init#0@@3| |run#0@@37|) (and (and (and ($IsGoodHeap $Heap@@29) ($Is |f#0@@49| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3))) ($IsBox |init#0@@3| Sequences._default.FoldLeft$A@@3)) ($Is |run#0@@37| (TSeq Sequences._default.FoldLeft$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@37|) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@49| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@29 |f#0@@49| |init#0@@3| (|Seq#Index| |run#0@@37| (LitInt 0))) (|Seq#Drop| |run#0@@37| (LitInt 1)))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@166) |f#0@@49| |init#0@@3| |run#0@@37|) (ite (= (|Seq#Length| |run#0@@37|) (LitInt 0)) |init#0@@3| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 $ly@@166 |f#0@@49| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@29 |f#0@@49| |init#0@@3| (|Seq#Index| |run#0@@37| (LitInt 0))) (|Seq#Drop| |run#0@@37| (LitInt 1))))))) :qid |unknown.0:0| :skolemid |3856| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@166) |f#0@@49| |init#0@@3| |run#0@@37|) ($IsGoodHeap $Heap@@29)) ))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@4 T@U) (Sequences._default.FoldLeft$E@@4 T@U) ($ly@@167 T@U) ($Heap@@30 T@U) (|f#0@@50| T@U) (|init#0@@4| T@U) (|run#0@@38| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@4) TyType) (= (type Sequences._default.FoldLeft$E@@4) TyType)) (= (type $ly@@167) LayerTypeType)) (= (type $Heap@@30) (MapType0Type refType MapType1Type))) (= (type |f#0@@50|) HandleTypeType)) (= (type |init#0@@4|) BoxType)) (= (type |run#0@@38|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@50| |init#0@@4| (Lit |run#0@@38|)) (and (and (and ($IsGoodHeap $Heap@@30) ($Is |f#0@@50| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4))) ($IsBox |init#0@@4| Sequences._default.FoldLeft$A@@4)) ($Is |run#0@@38| (TSeq Sequences._default.FoldLeft$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@38|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@50| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@30 |f#0@@50| |init#0@@4| (|Seq#Index| (Lit |run#0@@38|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@38|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@167) |f#0@@50| |init#0@@4| (Lit |run#0@@38|)) (ite (= (|Seq#Length| (Lit |run#0@@38|)) (LitInt 0)) |init#0@@4| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@167) |f#0@@50| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@30 |f#0@@50| |init#0@@4| (|Seq#Index| (Lit |run#0@@38|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@38|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |3857| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@167) |f#0@@50| |init#0@@4| (Lit |run#0@@38|)) ($IsGoodHeap $Heap@@30)) ))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@5 T@U) (Sequences._default.FoldLeft$E@@5 T@U) ($ly@@168 T@U) ($Heap@@31 T@U) (|f#0@@51| T@U) (|init#0@@5| T@U) (|run#0@@39| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@5) TyType) (= (type Sequences._default.FoldLeft$E@@5) TyType)) (= (type $ly@@168) LayerTypeType)) (= (type $Heap@@31) (MapType0Type refType MapType1Type))) (= (type |f#0@@51|) HandleTypeType)) (= (type |init#0@@5|) BoxType)) (= (type |run#0@@39|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@51|) (Lit |init#0@@5|) (Lit |run#0@@39|)) (and (and (and ($IsGoodHeap $Heap@@31) ($Is |f#0@@51| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5))) ($IsBox |init#0@@5| Sequences._default.FoldLeft$A@@5)) ($Is |run#0@@39| (TSeq Sequences._default.FoldLeft$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@39|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@51|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@31 (Lit |f#0@@51|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@39|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@39|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@168) (Lit |f#0@@51|) (Lit |init#0@@5|) (Lit |run#0@@39|)) (ite (= (|Seq#Length| (Lit |run#0@@39|)) (LitInt 0)) |init#0@@5| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@168) (Lit |f#0@@51|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@31 (Lit |f#0@@51|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@39|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@39|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |3858| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@168) (Lit |f#0@@51|) (Lit |init#0@@5|) (Lit |run#0@@39|)) ($IsGoodHeap $Heap@@31)) ))))
(assert (forall ((arg0@@287 T@U) (arg1@@142 T@U) (arg2@@87 T@U) (arg3@@48 T@U) (arg4@@34 T@U) (arg5@@18 T@U) ) (! (= (type (Sequences.__default.FoldRight arg0@@287 arg1@@142 arg2@@87 arg3@@48 arg4@@34 arg5@@18)) BoxType) :qid |funType:Sequences.__default.FoldRight| :pattern ( (Sequences.__default.FoldRight arg0@@287 arg1@@142 arg2@@87 arg3@@48 arg4@@34 arg5@@18)) )))
(assert (forall ((Sequences._default.FoldRight$A T@U) (Sequences._default.FoldRight$E T@U) ($ly@@169 T@U) (|f#0@@52| T@U) (|init#0@@6| T@U) (|run#0@@40| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A) TyType) (= (type Sequences._default.FoldRight$E) TyType)) (= (type $ly@@169) LayerTypeType)) (= (type |f#0@@52|) HandleTypeType)) (= (type |init#0@@6|) BoxType)) (= (type |run#0@@40|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@169) |f#0@@52| |init#0@@6| |run#0@@40|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E $ly@@169 |f#0@@52| |init#0@@6| |run#0@@40|))) :qid |unknown.0:0| :skolemid |3859| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@169) |f#0@@52| |init#0@@6| |run#0@@40|)) )))
(assert (forall ((Sequences._default.FoldRight$A@@0 T@U) (Sequences._default.FoldRight$E@@0 T@U) ($ly@@170 T@U) (|f#0@@53| T@U) (|init#0@@7| T@U) (|run#0@@41| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@0) TyType) (= (type Sequences._default.FoldRight$E@@0) TyType)) (= (type $ly@@170) LayerTypeType)) (= (type |f#0@@53|) HandleTypeType)) (= (type |init#0@@7|) BoxType)) (= (type |run#0@@41|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $ly@@170 |f#0@@53| |init#0@@7| |run#0@@41|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $LZ |f#0@@53| |init#0@@7| |run#0@@41|))) :qid |unknown.0:0| :skolemid |3860| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 (AsFuelBottom $ly@@170) |f#0@@53| |init#0@@7| |run#0@@41|)) )))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@1 T@U) (Sequences._default.FoldRight$E@@1 T@U) ($ly@@171 T@U) (|f#0@@54| T@U) (|init#0@@8| T@U) (|run#0@@42| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@1) TyType) (= (type Sequences._default.FoldRight$E@@1) TyType)) (= (type $ly@@171) LayerTypeType)) (= (type |f#0@@54|) HandleTypeType)) (= (type |init#0@@8|) BoxType)) (= (type |run#0@@42|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 |f#0@@54| |init#0@@8| |run#0@@42|) (and (and ($Is |f#0@@54| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 Sequences._default.FoldRight$A@@1)) ($IsBox |init#0@@8| Sequences._default.FoldRight$A@@1)) ($Is |run#0@@42| (TSeq Sequences._default.FoldRight$E@@1))))) ($IsBox (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@171 |f#0@@54| |init#0@@8| |run#0@@42|) Sequences._default.FoldRight$A@@1)) :qid |unknown.0:0| :skolemid |3861| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@171 |f#0@@54| |init#0@@8| |run#0@@42|)) ))))
(assert (forall ((Sequences._default.FoldRight$A@@2 T@U) (Sequences._default.FoldRight$E@@2 T@U) ($ly@@172 T@U) ($Heap@@32 T@U) (|f#0@@55| T@U) (|init#0@@9| T@U) (|run#0@@43| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@2) TyType) (= (type Sequences._default.FoldRight$E@@2) TyType)) (= (type $ly@@172) LayerTypeType)) (= (type $Heap@@32) (MapType0Type refType MapType1Type))) (= (type |f#0@@55|) HandleTypeType)) (= (type |init#0@@9|) BoxType)) (= (type |run#0@@43|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@32) ($Is |f#0@@55| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 Sequences._default.FoldRight$A@@2))) ($IsBox |init#0@@9| Sequences._default.FoldRight$A@@2)) ($Is |run#0@@43| (TSeq Sequences._default.FoldRight$E@@2)))) (and (=> (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@172 |f#0@@55| |init#0@@9| |run#0@@43|) true) (=> true (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@172 |f#0@@55| |init#0@@9| |run#0@@43|)))) :qid |unknown.0:0| :skolemid |3862| :pattern ( (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@172 |f#0@@55| |init#0@@9| |run#0@@43|) ($IsGoodHeap $Heap@@32)) )))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@3 T@U) (Sequences._default.FoldRight$E@@3 T@U) ($ly@@173 T@U) ($Heap@@33 T@U) (|f#0@@56| T@U) (|init#0@@10| T@U) (|run#0@@44| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@3) TyType) (= (type Sequences._default.FoldRight$E@@3) TyType)) (= (type $ly@@173) LayerTypeType)) (= (type $Heap@@33) (MapType0Type refType MapType1Type))) (= (type |f#0@@56|) HandleTypeType)) (= (type |init#0@@10|) BoxType)) (= (type |run#0@@44|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@56| |init#0@@10| |run#0@@44|) (and (and (and ($IsGoodHeap $Heap@@33) ($Is |f#0@@56| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3))) ($IsBox |init#0@@10| Sequences._default.FoldRight$A@@3)) ($Is |run#0@@44| (TSeq Sequences._default.FoldRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@44|) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@56| |init#0@@10| (|Seq#Drop| |run#0@@44| (LitInt 1)))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@173) |f#0@@56| |init#0@@10| |run#0@@44|) (ite (= (|Seq#Length| |run#0@@44|) (LitInt 0)) |init#0@@10| (Apply2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3 $Heap@@33 |f#0@@56| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 $ly@@173 |f#0@@56| |init#0@@10| (|Seq#Drop| |run#0@@44| (LitInt 1))) (|Seq#Index| |run#0@@44| (LitInt 0))))))) :qid |unknown.0:0| :skolemid |3863| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@173) |f#0@@56| |init#0@@10| |run#0@@44|) ($IsGoodHeap $Heap@@33)) ))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@4 T@U) (Sequences._default.FoldRight$E@@4 T@U) ($ly@@174 T@U) ($Heap@@34 T@U) (|f#0@@57| T@U) (|init#0@@11| T@U) (|run#0@@45| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@4) TyType) (= (type Sequences._default.FoldRight$E@@4) TyType)) (= (type $ly@@174) LayerTypeType)) (= (type $Heap@@34) (MapType0Type refType MapType1Type))) (= (type |f#0@@57|) HandleTypeType)) (= (type |init#0@@11|) BoxType)) (= (type |run#0@@45|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@57| |init#0@@11| (Lit |run#0@@45|)) (and (and (and ($IsGoodHeap $Heap@@34) ($Is |f#0@@57| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4))) ($IsBox |init#0@@11| Sequences._default.FoldRight$A@@4)) ($Is |run#0@@45| (TSeq Sequences._default.FoldRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@45|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@57| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@45|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@174) |f#0@@57| |init#0@@11| (Lit |run#0@@45|)) (ite (= (|Seq#Length| (Lit |run#0@@45|)) (LitInt 0)) |init#0@@11| (Apply2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4 $Heap@@34 |f#0@@57| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@174) |f#0@@57| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@45|) (LitInt 1)))) (|Seq#Index| (Lit |run#0@@45|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |3864| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@174) |f#0@@57| |init#0@@11| (Lit |run#0@@45|)) ($IsGoodHeap $Heap@@34)) ))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@5 T@U) (Sequences._default.FoldRight$E@@5 T@U) ($ly@@175 T@U) ($Heap@@35 T@U) (|f#0@@58| T@U) (|init#0@@12| T@U) (|run#0@@46| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@5) TyType) (= (type Sequences._default.FoldRight$E@@5) TyType)) (= (type $ly@@175) LayerTypeType)) (= (type $Heap@@35) (MapType0Type refType MapType1Type))) (= (type |f#0@@58|) HandleTypeType)) (= (type |init#0@@12|) BoxType)) (= (type |run#0@@46|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit |run#0@@46|)) (and (and (and ($IsGoodHeap $Heap@@35) ($Is |f#0@@58| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5))) ($IsBox |init#0@@12| Sequences._default.FoldRight$A@@5)) ($Is |run#0@@46| (TSeq Sequences._default.FoldRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@46|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@46|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@175) (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit |run#0@@46|)) (ite (= (|Seq#Length| (Lit |run#0@@46|)) (LitInt 0)) |init#0@@12| (Apply2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5 $Heap@@35 (Lit |f#0@@58|) (Lit (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@175) (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@46|) (LitInt 1))))) (|Seq#Index| (Lit |run#0@@46|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |3865| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@175) (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit |run#0@@46|)) ($IsGoodHeap $Heap@@35)) ))))
(assert (forall ((arg0@@288 T@U) (arg1@@143 T@U) (arg2@@88 T@U) (arg3@@49 T@U) (arg4@@35 T@U) (arg5@@19 T@U) ) (! (= (type (Sequences.__default.FoldFromRight arg0@@288 arg1@@143 arg2@@88 arg3@@49 arg4@@35 arg5@@19)) BoxType) :qid |funType:Sequences.__default.FoldFromRight| :pattern ( (Sequences.__default.FoldFromRight arg0@@288 arg1@@143 arg2@@88 arg3@@49 arg4@@35 arg5@@19)) )))
(assert (forall ((Sequences._default.FoldFromRight$A T@U) (Sequences._default.FoldFromRight$E T@U) ($ly@@176 T@U) (|f#0@@59| T@U) (|init#0@@13| T@U) (|run#0@@47| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A) TyType) (= (type Sequences._default.FoldFromRight$E) TyType)) (= (type $ly@@176) LayerTypeType)) (= (type |f#0@@59|) HandleTypeType)) (= (type |init#0@@13|) BoxType)) (= (type |run#0@@47|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@176) |f#0@@59| |init#0@@13| |run#0@@47|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E $ly@@176 |f#0@@59| |init#0@@13| |run#0@@47|))) :qid |unknown.0:0| :skolemid |3866| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@176) |f#0@@59| |init#0@@13| |run#0@@47|)) )))
(assert (forall ((Sequences._default.FoldFromRight$A@@0 T@U) (Sequences._default.FoldFromRight$E@@0 T@U) ($ly@@177 T@U) (|f#0@@60| T@U) (|init#0@@14| T@U) (|run#0@@48| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@0) TyType) (= (type Sequences._default.FoldFromRight$E@@0) TyType)) (= (type $ly@@177) LayerTypeType)) (= (type |f#0@@60|) HandleTypeType)) (= (type |init#0@@14|) BoxType)) (= (type |run#0@@48|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $ly@@177 |f#0@@60| |init#0@@14| |run#0@@48|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $LZ |f#0@@60| |init#0@@14| |run#0@@48|))) :qid |unknown.0:0| :skolemid |3867| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 (AsFuelBottom $ly@@177) |f#0@@60| |init#0@@14| |run#0@@48|)) )))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@1 T@U) (Sequences._default.FoldFromRight$E@@1 T@U) ($ly@@178 T@U) (|f#0@@61| T@U) (|init#0@@15| T@U) (|run#0@@49| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@1) TyType) (= (type Sequences._default.FoldFromRight$E@@1) TyType)) (= (type $ly@@178) LayerTypeType)) (= (type |f#0@@61|) HandleTypeType)) (= (type |init#0@@15|) BoxType)) (= (type |run#0@@49|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 |f#0@@61| |init#0@@15| |run#0@@49|) (and (and ($Is |f#0@@61| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 Sequences._default.FoldFromRight$A@@1)) ($IsBox |init#0@@15| Sequences._default.FoldFromRight$A@@1)) ($Is |run#0@@49| (TSeq Sequences._default.FoldFromRight$E@@1))))) ($IsBox (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@178 |f#0@@61| |init#0@@15| |run#0@@49|) Sequences._default.FoldFromRight$A@@1)) :qid |unknown.0:0| :skolemid |3868| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@178 |f#0@@61| |init#0@@15| |run#0@@49|)) ))))
(assert (forall ((Sequences._default.FoldFromRight$A@@2 T@U) (Sequences._default.FoldFromRight$E@@2 T@U) ($ly@@179 T@U) ($Heap@@36 T@U) (|f#0@@62| T@U) (|init#0@@16| T@U) (|run#0@@50| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@2) TyType) (= (type Sequences._default.FoldFromRight$E@@2) TyType)) (= (type $ly@@179) LayerTypeType)) (= (type $Heap@@36) (MapType0Type refType MapType1Type))) (= (type |f#0@@62|) HandleTypeType)) (= (type |init#0@@16|) BoxType)) (= (type |run#0@@50|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@36) ($Is |f#0@@62| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 Sequences._default.FoldFromRight$A@@2))) ($IsBox |init#0@@16| Sequences._default.FoldFromRight$A@@2)) ($Is |run#0@@50| (TSeq Sequences._default.FoldFromRight$E@@2)))) (and (=> (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@179 |f#0@@62| |init#0@@16| |run#0@@50|) true) (=> true (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@179 |f#0@@62| |init#0@@16| |run#0@@50|)))) :qid |unknown.0:0| :skolemid |3869| :pattern ( (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@179 |f#0@@62| |init#0@@16| |run#0@@50|) ($IsGoodHeap $Heap@@36)) )))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@3 T@U) (Sequences._default.FoldFromRight$E@@3 T@U) ($ly@@180 T@U) ($Heap@@37 T@U) (|f#0@@63| T@U) (|init#0@@17| T@U) (|run#0@@51| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@3) TyType) (= (type Sequences._default.FoldFromRight$E@@3) TyType)) (= (type $ly@@180) LayerTypeType)) (= (type $Heap@@37) (MapType0Type refType MapType1Type))) (= (type |f#0@@63|) HandleTypeType)) (= (type |init#0@@17|) BoxType)) (= (type |run#0@@51|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@63| |init#0@@17| |run#0@@51|) (and (and (and ($IsGoodHeap $Heap@@37) ($Is |f#0@@63| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3))) ($IsBox |init#0@@17| Sequences._default.FoldFromRight$A@@3)) ($Is |run#0@@51| (TSeq Sequences._default.FoldFromRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@51|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@51|) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@63| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@51|))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@51|))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@180) |f#0@@63| |init#0@@17| |run#0@@51|) (ite (= (|Seq#Length| |run#0@@51|) (LitInt 0)) |init#0@@17| (Apply2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3 $Heap@@37 |f#0@@63| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 $ly@@180 |f#0@@63| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@51|)) (Sequences.__default.Last Sequences._default.FoldFromRight$E@@3 |run#0@@51|)))))) :qid |unknown.0:0| :skolemid |3870| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@180) |f#0@@63| |init#0@@17| |run#0@@51|) ($IsGoodHeap $Heap@@37)) ))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@4 T@U) (Sequences._default.FoldFromRight$E@@4 T@U) ($ly@@181 T@U) ($Heap@@38 T@U) (|f#0@@64| T@U) (|init#0@@18| T@U) (|run#0@@52| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@4) TyType) (= (type Sequences._default.FoldFromRight$E@@4) TyType)) (= (type $ly@@181) LayerTypeType)) (= (type $Heap@@38) (MapType0Type refType MapType1Type))) (= (type |f#0@@64|) HandleTypeType)) (= (type |init#0@@18|) BoxType)) (= (type |run#0@@52|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@64| |init#0@@18| (Lit |run#0@@52|)) (and (and (and ($IsGoodHeap $Heap@@38) ($Is |f#0@@64| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4))) ($IsBox |init#0@@18| Sequences._default.FoldFromRight$A@@4)) ($Is |run#0@@52| (TSeq Sequences._default.FoldFromRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@52|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@64| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@181) |f#0@@64| |init#0@@18| (Lit |run#0@@52|)) (ite (= (|Seq#Length| (Lit |run#0@@52|)) (LitInt 0)) |init#0@@18| (Apply2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4 $Heap@@38 |f#0@@64| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@181) |f#0@@64| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |3871| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@181) |f#0@@64| |init#0@@18| (Lit |run#0@@52|)) ($IsGoodHeap $Heap@@38)) ))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@5 T@U) (Sequences._default.FoldFromRight$E@@5 T@U) ($ly@@182 T@U) ($Heap@@39 T@U) (|f#0@@65| T@U) (|init#0@@19| T@U) (|run#0@@53| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@5) TyType) (= (type Sequences._default.FoldFromRight$E@@5) TyType)) (= (type $ly@@182) LayerTypeType)) (= (type $Heap@@39) (MapType0Type refType MapType1Type))) (= (type |f#0@@65|) HandleTypeType)) (= (type |init#0@@19|) BoxType)) (= (type |run#0@@53|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit |run#0@@53|)) (and (and (and ($IsGoodHeap $Heap@@39) ($Is |f#0@@65| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5))) ($IsBox |init#0@@19| Sequences._default.FoldFromRight$A@@5)) ($Is |run#0@@53| (TSeq Sequences._default.FoldFromRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@53|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@182) (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit |run#0@@53|)) (ite (= (|Seq#Length| (Lit |run#0@@53|)) (LitInt 0)) |init#0@@19| (Apply2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5 $Heap@@39 (Lit |f#0@@65|) (Lit (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@182) (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|))))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |3872| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@182) (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit |run#0@@53|)) ($IsGoodHeap $Heap@@39)) ))))
(assert (forall ((arg0@@289 T@U) (arg1@@144 T@U) (arg2@@89 T@U) (arg3@@50 Int) ) (! (= (type (Sequences.__default.remove arg0@@289 arg1@@144 arg2@@89 arg3@@50)) (SeqType BoxType)) :qid |funType:Sequences.__default.remove| :pattern ( (Sequences.__default.remove arg0@@289 arg1@@144 arg2@@89 arg3@@50)) )))
(assert (forall ((Sequences._default.remove$A T@U) ($ly@@183 T@U) (|s#0@@34| T@U) (|pos#0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A) TyType) (= (type $ly@@183) LayerTypeType)) (= (type |s#0@@34|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@183) |s#0@@34| |pos#0|) (Sequences.__default.remove Sequences._default.remove$A $ly@@183 |s#0@@34| |pos#0|))) :qid |unknown.0:0| :skolemid |3873| :pattern ( (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@183) |s#0@@34| |pos#0|)) )))
(assert (forall ((Sequences._default.remove$A@@0 T@U) ($ly@@184 T@U) (|s#0@@35| T@U) (|pos#0@@0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A@@0) TyType) (= (type $ly@@184) LayerTypeType)) (= (type |s#0@@35|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A@@0 $ly@@184 |s#0@@35| |pos#0@@0|) (Sequences.__default.remove Sequences._default.remove$A@@0 $LZ |s#0@@35| |pos#0@@0|))) :qid |unknown.0:0| :skolemid |3874| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@0 (AsFuelBottom $ly@@184) |s#0@@35| |pos#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.remove$A@@1 T@U) ($ly@@185 T@U) (|s#0@@36| T@U) (|pos#0@@1| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@1) TyType) (= (type $ly@@185) LayerTypeType)) (= (type |s#0@@36|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@1 |s#0@@36| |pos#0@@1|) (and ($Is |s#0@@36| (TSeq Sequences._default.remove$A@@1)) (and (<= (LitInt 0) |pos#0@@1|) (< |pos#0@@1| (|Seq#Length| |s#0@@36|)))))) (and (and (and (= (|Seq#Length| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@185 |s#0@@36| |pos#0@@1|)) (- (|Seq#Length| |s#0@@36|) 1)) (forall ((|i#0@@45| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@45|) (< |i#0@@45| |pos#0@@1|)) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@185 |s#0@@36| |pos#0@@1|) |i#0@@45|) (|Seq#Index| |s#0@@36| |i#0@@45|))) :qid |sequence.168:18| :skolemid |3875| :pattern ( (|Seq#Index| |s#0@@36| |i#0@@45|)) :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@185 |s#0@@36| |pos#0@@1|) |i#0@@45|)) ))) (forall ((|i#1@@8| Int) ) (!  (=> (and (<= |pos#0@@1| |i#1@@8|) (< |i#1@@8| (- (|Seq#Length| |s#0@@36|) 1))) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@185 |s#0@@36| |pos#0@@1|) |i#1@@8|) (|Seq#Index| |s#0@@36| (+ |i#1@@8| 1)))) :qid |sequence.169:18| :skolemid |3876| :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@185 |s#0@@36| |pos#0@@1|) |i#1@@8|)) ))) ($Is (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@185 |s#0@@36| |pos#0@@1|) (TSeq Sequences._default.remove$A@@1)))) :qid |unknown.0:0| :skolemid |3877| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@185 |s#0@@36| |pos#0@@1|)) ))))
(assert (forall ((Sequences._default.remove$A@@2 T@U) ($ly@@186 T@U) (|s#0@@37| T@U) (|pos#0@@2| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@2) TyType) (= (type $ly@@186) LayerTypeType)) (= (type |s#0@@37|) (SeqType BoxType))) ($Is |s#0@@37| (TSeq Sequences._default.remove$A@@2))) (and (=> (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@186 |s#0@@37| |pos#0@@2|) (and (<= (LitInt 0) |pos#0@@2|) (< |pos#0@@2| (|Seq#Length| |s#0@@37|)))) (=> (and (<= (LitInt 0) |pos#0@@2|) (< |pos#0@@2| (|Seq#Length| |s#0@@37|))) (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@186 |s#0@@37| |pos#0@@2|)))) :qid |unknown.0:0| :skolemid |3878| :pattern ( (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@186 |s#0@@37| |pos#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.remove$A@@3 T@U) ($ly@@187 T@U) (|s#0@@38| T@U) (|pos#0@@3| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@3) TyType) (= (type $ly@@187) LayerTypeType)) (= (type |s#0@@38|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@3 |s#0@@38| |pos#0@@3|) (and ($Is |s#0@@38| (TSeq Sequences._default.remove$A@@3)) (and (<= (LitInt 0) |pos#0@@3|) (< |pos#0@@3| (|Seq#Length| |s#0@@38|)))))) (= (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@187) |s#0@@38| |pos#0@@3|) (|Seq#Append| (|Seq#Take| |s#0@@38| |pos#0@@3|) (|Seq#Drop| |s#0@@38| (+ |pos#0@@3| 1))))) :qid |unknown.0:0| :skolemid |3879| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@187) |s#0@@38| |pos#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.remove$A@@4 T@U) ($ly@@188 T@U) (|s#0@@39| T@U) (|pos#0@@4| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@4) TyType) (= (type $ly@@188) LayerTypeType)) (= (type |s#0@@39|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@4 (Lit |s#0@@39|) (LitInt |pos#0@@4|)) (and ($Is |s#0@@39| (TSeq Sequences._default.remove$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@4|)) (< |pos#0@@4| (|Seq#Length| (Lit |s#0@@39|))))))) (= (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@188) (Lit |s#0@@39|) (LitInt |pos#0@@4|)) (|Seq#Append| (|Seq#Take| (Lit |s#0@@39|) (LitInt |pos#0@@4|)) (|Seq#Drop| (Lit |s#0@@39|) (LitInt (+ |pos#0@@4| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |3880| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@188) (Lit |s#0@@39|) (LitInt |pos#0@@4|))) ))))
(assert (forall ((arg0@@290 T@U) (arg1@@145 T@U) (arg2@@90 T@U) (arg3@@51 T@U) (arg4@@36 Int) ) (! (= (type (Sequences.__default.insert arg0@@290 arg1@@145 arg2@@90 arg3@@51 arg4@@36)) (SeqType BoxType)) :qid |funType:Sequences.__default.insert| :pattern ( (Sequences.__default.insert arg0@@290 arg1@@145 arg2@@90 arg3@@51 arg4@@36)) )))
(assert (forall ((Sequences._default.insert$A T@U) ($ly@@189 T@U) (|s#0@@40| T@U) (|a#0@@27| T@U) (|pos#0@@5| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A) TyType) (= (type $ly@@189) LayerTypeType)) (= (type |s#0@@40|) (SeqType BoxType))) (= (type |a#0@@27|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@189) |s#0@@40| |a#0@@27| |pos#0@@5|) (Sequences.__default.insert Sequences._default.insert$A $ly@@189 |s#0@@40| |a#0@@27| |pos#0@@5|))) :qid |unknown.0:0| :skolemid |3881| :pattern ( (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@189) |s#0@@40| |a#0@@27| |pos#0@@5|)) )))
(assert (forall ((Sequences._default.insert$A@@0 T@U) ($ly@@190 T@U) (|s#0@@41| T@U) (|a#0@@28| T@U) (|pos#0@@6| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A@@0) TyType) (= (type $ly@@190) LayerTypeType)) (= (type |s#0@@41|) (SeqType BoxType))) (= (type |a#0@@28|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A@@0 $ly@@190 |s#0@@41| |a#0@@28| |pos#0@@6|) (Sequences.__default.insert Sequences._default.insert$A@@0 $LZ |s#0@@41| |a#0@@28| |pos#0@@6|))) :qid |unknown.0:0| :skolemid |3882| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@0 (AsFuelBottom $ly@@190) |s#0@@41| |a#0@@28| |pos#0@@6|)) )))
(assert  (=> true (forall ((Sequences._default.insert$A@@1 T@U) ($ly@@191 T@U) (|s#0@@42| T@U) (|a#0@@29| T@U) (|pos#0@@7| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@1) TyType) (= (type $ly@@191) LayerTypeType)) (= (type |s#0@@42|) (SeqType BoxType))) (= (type |a#0@@29|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@1 |s#0@@42| |a#0@@29| |pos#0@@7|) (and (and ($Is |s#0@@42| (TSeq Sequences._default.insert$A@@1)) ($IsBox |a#0@@29| Sequences._default.insert$A@@1)) (and (<= (LitInt 0) |pos#0@@7|) (<= |pos#0@@7| (|Seq#Length| |s#0@@42|)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@191 |s#0@@42| |a#0@@29| |pos#0@@7|)) (+ (|Seq#Length| |s#0@@42|) 1)) (forall ((|i#0@@46| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@46|) (< |i#0@@46| |pos#0@@7|)) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@191 |s#0@@42| |a#0@@29| |pos#0@@7|) |i#0@@46|) (|Seq#Index| |s#0@@42| |i#0@@46|)))) :qid |sequence.177:18| :skolemid |3883| :pattern ( (|Seq#Index| |s#0@@42| |i#0@@46|)) :pattern ( (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@191 |s#0@@42| |a#0@@29| |pos#0@@7|) |i#0@@46|)) ))) (forall ((|i#1@@9| Int) ) (!  (=> true (=> (and (<= |pos#0@@7| |i#1@@9|) (< |i#1@@9| (|Seq#Length| |s#0@@42|))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@191 |s#0@@42| |a#0@@29| |pos#0@@7|) (+ |i#1@@9| 1)) (|Seq#Index| |s#0@@42| |i#1@@9|)))) :qid |sequence.178:18| :skolemid |3884| :pattern ( (|Seq#Index| |s#0@@42| |i#1@@9|)) ))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@191 |s#0@@42| |a#0@@29| |pos#0@@7|) |pos#0@@7|) |a#0@@29|)) ($Is (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@191 |s#0@@42| |a#0@@29| |pos#0@@7|) (TSeq Sequences._default.insert$A@@1)))) :qid |unknown.0:0| :skolemid |3885| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@191 |s#0@@42| |a#0@@29| |pos#0@@7|)) ))))
(assert (forall ((Sequences._default.insert$A@@2 T@U) ($ly@@192 T@U) (|s#0@@43| T@U) (|a#0@@30| T@U) (|pos#0@@8| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@2) TyType) (= (type $ly@@192) LayerTypeType)) (= (type |s#0@@43|) (SeqType BoxType))) (= (type |a#0@@30|) BoxType)) (and ($Is |s#0@@43| (TSeq Sequences._default.insert$A@@2)) ($IsBox |a#0@@30| Sequences._default.insert$A@@2))) (and (=> (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@192 |s#0@@43| |a#0@@30| |pos#0@@8|) (and (<= (LitInt 0) |pos#0@@8|) (<= |pos#0@@8| (|Seq#Length| |s#0@@43|)))) (=> (and (<= (LitInt 0) |pos#0@@8|) (<= |pos#0@@8| (|Seq#Length| |s#0@@43|))) (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@192 |s#0@@43| |a#0@@30| |pos#0@@8|)))) :qid |unknown.0:0| :skolemid |3886| :pattern ( (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@192 |s#0@@43| |a#0@@30| |pos#0@@8|)) )))
(assert  (=> true (forall ((Sequences._default.insert$A@@3 T@U) ($ly@@193 T@U) (|s#0@@44| T@U) (|a#0@@31| T@U) (|pos#0@@9| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@3) TyType) (= (type $ly@@193) LayerTypeType)) (= (type |s#0@@44|) (SeqType BoxType))) (= (type |a#0@@31|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@3 |s#0@@44| |a#0@@31| |pos#0@@9|) (and (and ($Is |s#0@@44| (TSeq Sequences._default.insert$A@@3)) ($IsBox |a#0@@31| Sequences._default.insert$A@@3)) (and (<= (LitInt 0) |pos#0@@9|) (<= |pos#0@@9| (|Seq#Length| |s#0@@44|)))))) (= (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@193) |s#0@@44| |a#0@@31| |pos#0@@9|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@44| |pos#0@@9|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@31|)) (|Seq#Drop| |s#0@@44| |pos#0@@9|)))) :qid |unknown.0:0| :skolemid |3887| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@193) |s#0@@44| |a#0@@31| |pos#0@@9|)) ))))
(assert  (=> true (forall ((Sequences._default.insert$A@@4 T@U) ($ly@@194 T@U) (|s#0@@45| T@U) (|a#0@@32| T@U) (|pos#0@@10| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@4) TyType) (= (type $ly@@194) LayerTypeType)) (= (type |s#0@@45|) (SeqType BoxType))) (= (type |a#0@@32|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@4 (Lit |s#0@@45|) |a#0@@32| (LitInt |pos#0@@10|)) (and (and ($Is |s#0@@45| (TSeq Sequences._default.insert$A@@4)) ($IsBox |a#0@@32| Sequences._default.insert$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@10|)) (<= (LitInt |pos#0@@10|) (|Seq#Length| (Lit |s#0@@45|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@194) (Lit |s#0@@45|) |a#0@@32| (LitInt |pos#0@@10|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@45|) (LitInt |pos#0@@10|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@32|)) (|Seq#Drop| (Lit |s#0@@45|) (LitInt |pos#0@@10|))))) :qid |unknown.0:0| :weight 3 :skolemid |3888| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@194) (Lit |s#0@@45|) |a#0@@32| (LitInt |pos#0@@10|))) ))))
(assert  (=> true (forall ((Sequences._default.insert$A@@5 T@U) ($ly@@195 T@U) (|s#0@@46| T@U) (|a#0@@33| T@U) (|pos#0@@11| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@5) TyType) (= (type $ly@@195) LayerTypeType)) (= (type |s#0@@46|) (SeqType BoxType))) (= (type |a#0@@33|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@5 (Lit |s#0@@46|) (Lit |a#0@@33|) (LitInt |pos#0@@11|)) (and (and ($Is |s#0@@46| (TSeq Sequences._default.insert$A@@5)) ($IsBox |a#0@@33| Sequences._default.insert$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@11|)) (<= (LitInt |pos#0@@11|) (|Seq#Length| (Lit |s#0@@46|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@195) (Lit |s#0@@46|) (Lit |a#0@@33|) (LitInt |pos#0@@11|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@46|) (LitInt |pos#0@@11|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@33|))) (|Seq#Drop| (Lit |s#0@@46|) (LitInt |pos#0@@11|))))) :qid |unknown.0:0| :weight 3 :skolemid |3889| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@195) (Lit |s#0@@46|) (Lit |a#0@@33|) (LitInt |pos#0@@11|))) ))))
(assert (forall ((arg0@@291 T@U) (arg1@@146 T@U) (arg2@@91 T@U) (arg3@@52 T@U) (arg4@@37 T@U) (arg5@@20 Int) ) (! (= (type (Sequences.__default.replace1with2 arg0@@291 arg1@@146 arg2@@91 arg3@@52 arg4@@37 arg5@@20)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace1with2| :pattern ( (Sequences.__default.replace1with2 arg0@@291 arg1@@146 arg2@@91 arg3@@52 arg4@@37 arg5@@20)) )))
(assert (forall ((Sequences._default.replace1with2$A T@U) ($ly@@196 T@U) (|s#0@@47| T@U) (|a#0@@34| T@U) (|b#0@@12| T@U) (|pos#0@@12| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A) TyType) (= (type $ly@@196) LayerTypeType)) (= (type |s#0@@47|) (SeqType BoxType))) (= (type |a#0@@34|) BoxType)) (= (type |b#0@@12|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@196) |s#0@@47| |a#0@@34| |b#0@@12| |pos#0@@12|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A $ly@@196 |s#0@@47| |a#0@@34| |b#0@@12| |pos#0@@12|))) :qid |unknown.0:0| :skolemid |3890| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@196) |s#0@@47| |a#0@@34| |b#0@@12| |pos#0@@12|)) )))
(assert (forall ((Sequences._default.replace1with2$A@@0 T@U) ($ly@@197 T@U) (|s#0@@48| T@U) (|a#0@@35| T@U) (|b#0@@13| T@U) (|pos#0@@13| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A@@0) TyType) (= (type $ly@@197) LayerTypeType)) (= (type |s#0@@48|) (SeqType BoxType))) (= (type |a#0@@35|) BoxType)) (= (type |b#0@@13|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $ly@@197 |s#0@@48| |a#0@@35| |b#0@@13| |pos#0@@13|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $LZ |s#0@@48| |a#0@@35| |b#0@@13| |pos#0@@13|))) :qid |unknown.0:0| :skolemid |3891| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 (AsFuelBottom $ly@@197) |s#0@@48| |a#0@@35| |b#0@@13| |pos#0@@13|)) )))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@1 T@U) ($ly@@198 T@U) (|s#0@@49| T@U) (|a#0@@36| T@U) (|b#0@@14| T@U) (|pos#0@@14| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@1) TyType) (= (type $ly@@198) LayerTypeType)) (= (type |s#0@@49|) (SeqType BoxType))) (= (type |a#0@@36|) BoxType)) (= (type |b#0@@14|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@1 |s#0@@49| |a#0@@36| |b#0@@14| |pos#0@@14|) (and (and (and ($Is |s#0@@49| (TSeq Sequences._default.replace1with2$A@@1)) ($IsBox |a#0@@36| Sequences._default.replace1with2$A@@1)) ($IsBox |b#0@@14| Sequences._default.replace1with2$A@@1)) (and (<= (LitInt 0) |pos#0@@14|) (< |pos#0@@14| (|Seq#Length| |s#0@@49|)))))) (and (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@198 |s#0@@49| |a#0@@36| |b#0@@14| |pos#0@@14|)) (+ (|Seq#Length| |s#0@@49|) 1)) (forall ((|i#0@@47| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@47|) (< |i#0@@47| |pos#0@@14|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@198 |s#0@@49| |a#0@@36| |b#0@@14| |pos#0@@14|) |i#0@@47|) (|Seq#Index| |s#0@@49| |i#0@@47|)))) :qid |sequence.202:18| :skolemid |3892| :pattern ( (|Seq#Index| |s#0@@49| |i#0@@47|)) :pattern ( (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@198 |s#0@@49| |a#0@@36| |b#0@@14| |pos#0@@14|) |i#0@@47|)) ))) (forall ((|i#1@@10| Int) ) (!  (=> true (=> (and (< |pos#0@@14| |i#1@@10|) (< |i#1@@10| (|Seq#Length| |s#0@@49|))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@198 |s#0@@49| |a#0@@36| |b#0@@14| |pos#0@@14|) (+ |i#1@@10| 1)) (|Seq#Index| |s#0@@49| |i#1@@10|)))) :qid |sequence.203:18| :skolemid |3893| :pattern ( (|Seq#Index| |s#0@@49| |i#1@@10|)) ))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@198 |s#0@@49| |a#0@@36| |b#0@@14| |pos#0@@14|) |pos#0@@14|) |a#0@@36|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@198 |s#0@@49| |a#0@@36| |b#0@@14| |pos#0@@14|) (+ |pos#0@@14| 1)) |b#0@@14|)) ($Is (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@198 |s#0@@49| |a#0@@36| |b#0@@14| |pos#0@@14|) (TSeq Sequences._default.replace1with2$A@@1)))) :qid |unknown.0:0| :skolemid |3894| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@198 |s#0@@49| |a#0@@36| |b#0@@14| |pos#0@@14|)) ))))
(assert (forall ((Sequences._default.replace1with2$A@@2 T@U) ($ly@@199 T@U) (|s#0@@50| T@U) (|a#0@@37| T@U) (|b#0@@15| T@U) (|pos#0@@15| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@2) TyType) (= (type $ly@@199) LayerTypeType)) (= (type |s#0@@50|) (SeqType BoxType))) (= (type |a#0@@37|) BoxType)) (= (type |b#0@@15|) BoxType)) (and (and ($Is |s#0@@50| (TSeq Sequences._default.replace1with2$A@@2)) ($IsBox |a#0@@37| Sequences._default.replace1with2$A@@2)) ($IsBox |b#0@@15| Sequences._default.replace1with2$A@@2))) (and (=> (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@199 |s#0@@50| |a#0@@37| |b#0@@15| |pos#0@@15|) (and (<= (LitInt 0) |pos#0@@15|) (< |pos#0@@15| (|Seq#Length| |s#0@@50|)))) (=> (and (<= (LitInt 0) |pos#0@@15|) (< |pos#0@@15| (|Seq#Length| |s#0@@50|))) (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@199 |s#0@@50| |a#0@@37| |b#0@@15| |pos#0@@15|)))) :qid |unknown.0:0| :skolemid |3895| :pattern ( (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@199 |s#0@@50| |a#0@@37| |b#0@@15| |pos#0@@15|)) )))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@3 T@U) ($ly@@200 T@U) (|s#0@@51| T@U) (|a#0@@38| T@U) (|b#0@@16| T@U) (|pos#0@@16| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@3) TyType) (= (type $ly@@200) LayerTypeType)) (= (type |s#0@@51|) (SeqType BoxType))) (= (type |a#0@@38|) BoxType)) (= (type |b#0@@16|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@3 |s#0@@51| |a#0@@38| |b#0@@16| |pos#0@@16|) (and (and (and ($Is |s#0@@51| (TSeq Sequences._default.replace1with2$A@@3)) ($IsBox |a#0@@38| Sequences._default.replace1with2$A@@3)) ($IsBox |b#0@@16| Sequences._default.replace1with2$A@@3)) (and (<= (LitInt 0) |pos#0@@16|) (< |pos#0@@16| (|Seq#Length| |s#0@@51|)))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@200) |s#0@@51| |a#0@@38| |b#0@@16| |pos#0@@16|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@51| |pos#0@@16|) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@38|) |b#0@@16|)) (|Seq#Drop| |s#0@@51| (+ |pos#0@@16| 1))))) :qid |unknown.0:0| :skolemid |3896| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@200) |s#0@@51| |a#0@@38| |b#0@@16| |pos#0@@16|)) ))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@4 T@U) ($ly@@201 T@U) (|s#0@@52| T@U) (|a#0@@39| T@U) (|b#0@@17| T@U) (|pos#0@@17| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@4) TyType) (= (type $ly@@201) LayerTypeType)) (= (type |s#0@@52|) (SeqType BoxType))) (= (type |a#0@@39|) BoxType)) (= (type |b#0@@17|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@4 (Lit |s#0@@52|) |a#0@@39| |b#0@@17| (LitInt |pos#0@@17|)) (and (and (and ($Is |s#0@@52| (TSeq Sequences._default.replace1with2$A@@4)) ($IsBox |a#0@@39| Sequences._default.replace1with2$A@@4)) ($IsBox |b#0@@17| Sequences._default.replace1with2$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@17|)) (< |pos#0@@17| (|Seq#Length| (Lit |s#0@@52|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@201) (Lit |s#0@@52|) |a#0@@39| |b#0@@17| (LitInt |pos#0@@17|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@52|) (LitInt |pos#0@@17|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@39|) |b#0@@17|)) (|Seq#Drop| (Lit |s#0@@52|) (LitInt (+ |pos#0@@17| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |3897| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@201) (Lit |s#0@@52|) |a#0@@39| |b#0@@17| (LitInt |pos#0@@17|))) ))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@5 T@U) ($ly@@202 T@U) (|s#0@@53| T@U) (|a#0@@40| T@U) (|b#0@@18| T@U) (|pos#0@@18| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@5) TyType) (= (type $ly@@202) LayerTypeType)) (= (type |s#0@@53|) (SeqType BoxType))) (= (type |a#0@@40|) BoxType)) (= (type |b#0@@18|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@5 (Lit |s#0@@53|) (Lit |a#0@@40|) (Lit |b#0@@18|) (LitInt |pos#0@@18|)) (and (and (and ($Is |s#0@@53| (TSeq Sequences._default.replace1with2$A@@5)) ($IsBox |a#0@@40| Sequences._default.replace1with2$A@@5)) ($IsBox |b#0@@18| Sequences._default.replace1with2$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@18|)) (< |pos#0@@18| (|Seq#Length| (Lit |s#0@@53|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@202) (Lit |s#0@@53|) (Lit |a#0@@40|) (Lit |b#0@@18|) (LitInt |pos#0@@18|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@53|) (LitInt |pos#0@@18|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@40|)) (Lit |b#0@@18|))) (|Seq#Drop| (Lit |s#0@@53|) (LitInt (+ |pos#0@@18| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |3898| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@202) (Lit |s#0@@53|) (Lit |a#0@@40|) (Lit |b#0@@18|) (LitInt |pos#0@@18|))) ))))
(assert (forall ((arg0@@292 T@U) (arg1@@147 T@U) (arg2@@92 T@U) (arg3@@53 T@U) (arg4@@38 Int) ) (! (= (type (Sequences.__default.replace2with1 arg0@@292 arg1@@147 arg2@@92 arg3@@53 arg4@@38)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace2with1| :pattern ( (Sequences.__default.replace2with1 arg0@@292 arg1@@147 arg2@@92 arg3@@53 arg4@@38)) )))
(assert (forall ((Sequences._default.replace2with1$A T@U) ($ly@@203 T@U) (|s#0@@54| T@U) (|a#0@@41| T@U) (|pos#0@@19| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A) TyType) (= (type $ly@@203) LayerTypeType)) (= (type |s#0@@54|) (SeqType BoxType))) (= (type |a#0@@41|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@203) |s#0@@54| |a#0@@41| |pos#0@@19|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A $ly@@203 |s#0@@54| |a#0@@41| |pos#0@@19|))) :qid |unknown.0:0| :skolemid |3899| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@203) |s#0@@54| |a#0@@41| |pos#0@@19|)) )))
(assert (forall ((Sequences._default.replace2with1$A@@0 T@U) ($ly@@204 T@U) (|s#0@@55| T@U) (|a#0@@42| T@U) (|pos#0@@20| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A@@0) TyType) (= (type $ly@@204) LayerTypeType)) (= (type |s#0@@55|) (SeqType BoxType))) (= (type |a#0@@42|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $ly@@204 |s#0@@55| |a#0@@42| |pos#0@@20|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $LZ |s#0@@55| |a#0@@42| |pos#0@@20|))) :qid |unknown.0:0| :skolemid |3900| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 (AsFuelBottom $ly@@204) |s#0@@55| |a#0@@42| |pos#0@@20|)) )))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@1 T@U) ($ly@@205 T@U) (|s#0@@56| T@U) (|a#0@@43| T@U) (|pos#0@@21| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@1) TyType) (= (type $ly@@205) LayerTypeType)) (= (type |s#0@@56|) (SeqType BoxType))) (= (type |a#0@@43|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@1 |s#0@@56| |a#0@@43| |pos#0@@21|) (and (and ($Is |s#0@@56| (TSeq Sequences._default.replace2with1$A@@1)) ($IsBox |a#0@@43| Sequences._default.replace2with1$A@@1)) (and (<= (LitInt 0) |pos#0@@21|) (< |pos#0@@21| (- (|Seq#Length| |s#0@@56|) 1)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@205 |s#0@@56| |a#0@@43| |pos#0@@21|)) (- (|Seq#Length| |s#0@@56|) 1)) (forall ((|i#0@@48| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@48|) (< |i#0@@48| |pos#0@@21|)) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@205 |s#0@@56| |a#0@@43| |pos#0@@21|) |i#0@@48|) (|Seq#Index| |s#0@@56| |i#0@@48|)))) :qid |sequence.221:18| :skolemid |3901| :pattern ( (|Seq#Index| |s#0@@56| |i#0@@48|)) :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@205 |s#0@@56| |a#0@@43| |pos#0@@21|) |i#0@@48|)) ))) (forall ((|i#1@@11| Int) ) (!  (=> true (=> (and (< |pos#0@@21| |i#1@@11|) (< |i#1@@11| (- (|Seq#Length| |s#0@@56|) 1))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@205 |s#0@@56| |a#0@@43| |pos#0@@21|) |i#1@@11|) (|Seq#Index| |s#0@@56| (+ |i#1@@11| 1))))) :qid |sequence.222:18| :skolemid |3902| :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@205 |s#0@@56| |a#0@@43| |pos#0@@21|) |i#1@@11|)) ))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@205 |s#0@@56| |a#0@@43| |pos#0@@21|) |pos#0@@21|) |a#0@@43|)) ($Is (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@205 |s#0@@56| |a#0@@43| |pos#0@@21|) (TSeq Sequences._default.replace2with1$A@@1)))) :qid |unknown.0:0| :skolemid |3903| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@205 |s#0@@56| |a#0@@43| |pos#0@@21|)) ))))
(assert (forall ((Sequences._default.replace2with1$A@@2 T@U) ($ly@@206 T@U) (|s#0@@57| T@U) (|a#0@@44| T@U) (|pos#0@@22| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@2) TyType) (= (type $ly@@206) LayerTypeType)) (= (type |s#0@@57|) (SeqType BoxType))) (= (type |a#0@@44|) BoxType)) (and ($Is |s#0@@57| (TSeq Sequences._default.replace2with1$A@@2)) ($IsBox |a#0@@44| Sequences._default.replace2with1$A@@2))) (and (=> (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@206 |s#0@@57| |a#0@@44| |pos#0@@22|) (and (<= (LitInt 0) |pos#0@@22|) (< |pos#0@@22| (- (|Seq#Length| |s#0@@57|) 1)))) (=> (and (<= (LitInt 0) |pos#0@@22|) (< |pos#0@@22| (- (|Seq#Length| |s#0@@57|) 1))) (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@206 |s#0@@57| |a#0@@44| |pos#0@@22|)))) :qid |unknown.0:0| :skolemid |3904| :pattern ( (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@206 |s#0@@57| |a#0@@44| |pos#0@@22|)) )))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@3 T@U) ($ly@@207 T@U) (|s#0@@58| T@U) (|a#0@@45| T@U) (|pos#0@@23| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@3) TyType) (= (type $ly@@207) LayerTypeType)) (= (type |s#0@@58|) (SeqType BoxType))) (= (type |a#0@@45|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@3 |s#0@@58| |a#0@@45| |pos#0@@23|) (and (and ($Is |s#0@@58| (TSeq Sequences._default.replace2with1$A@@3)) ($IsBox |a#0@@45| Sequences._default.replace2with1$A@@3)) (and (<= (LitInt 0) |pos#0@@23|) (< |pos#0@@23| (- (|Seq#Length| |s#0@@58|) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@207) |s#0@@58| |a#0@@45| |pos#0@@23|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@58| |pos#0@@23|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@45|)) (|Seq#Drop| |s#0@@58| (+ |pos#0@@23| 2))))) :qid |unknown.0:0| :skolemid |3905| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@207) |s#0@@58| |a#0@@45| |pos#0@@23|)) ))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@4 T@U) ($ly@@208 T@U) (|s#0@@59| T@U) (|a#0@@46| T@U) (|pos#0@@24| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@4) TyType) (= (type $ly@@208) LayerTypeType)) (= (type |s#0@@59|) (SeqType BoxType))) (= (type |a#0@@46|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@4 (Lit |s#0@@59|) |a#0@@46| (LitInt |pos#0@@24|)) (and (and ($Is |s#0@@59| (TSeq Sequences._default.replace2with1$A@@4)) ($IsBox |a#0@@46| Sequences._default.replace2with1$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@24|)) (< |pos#0@@24| (- (|Seq#Length| (Lit |s#0@@59|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@208) (Lit |s#0@@59|) |a#0@@46| (LitInt |pos#0@@24|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@59|) (LitInt |pos#0@@24|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@46|)) (|Seq#Drop| (Lit |s#0@@59|) (LitInt (+ |pos#0@@24| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |3906| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@208) (Lit |s#0@@59|) |a#0@@46| (LitInt |pos#0@@24|))) ))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@5 T@U) ($ly@@209 T@U) (|s#0@@60| T@U) (|a#0@@47| T@U) (|pos#0@@25| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@5) TyType) (= (type $ly@@209) LayerTypeType)) (= (type |s#0@@60|) (SeqType BoxType))) (= (type |a#0@@47|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@5 (Lit |s#0@@60|) (Lit |a#0@@47|) (LitInt |pos#0@@25|)) (and (and ($Is |s#0@@60| (TSeq Sequences._default.replace2with1$A@@5)) ($IsBox |a#0@@47| Sequences._default.replace2with1$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@25|)) (< |pos#0@@25| (- (|Seq#Length| (Lit |s#0@@60|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@209) (Lit |s#0@@60|) (Lit |a#0@@47|) (LitInt |pos#0@@25|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@60|) (LitInt |pos#0@@25|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@47|))) (|Seq#Drop| (Lit |s#0@@60|) (LitInt (+ |pos#0@@25| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |3907| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@209) (Lit |s#0@@60|) (Lit |a#0@@47|) (LitInt |pos#0@@25|))) ))))
(assert (forall ((arg0@@293 T@U) (arg1@@148 T@U) (arg2@@93 T@U) (arg3@@54 T@U) ) (! (= (type (Sequences.__default.concat arg0@@293 arg1@@148 arg2@@93 arg3@@54)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat| :pattern ( (Sequences.__default.concat arg0@@293 arg1@@148 arg2@@93 arg3@@54)) )))
(assert (forall ((Sequences._default.concat$A T@U) ($ly@@210 T@U) (|a#0@@48| T@U) (|b#0@@19| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A) TyType) (= (type $ly@@210) LayerTypeType)) (= (type |a#0@@48|) (SeqType BoxType))) (= (type |b#0@@19|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@210) |a#0@@48| |b#0@@19|) (Sequences.__default.concat Sequences._default.concat$A $ly@@210 |a#0@@48| |b#0@@19|))) :qid |unknown.0:0| :skolemid |3908| :pattern ( (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@210) |a#0@@48| |b#0@@19|)) )))
(assert (forall ((Sequences._default.concat$A@@0 T@U) ($ly@@211 T@U) (|a#0@@49| T@U) (|b#0@@20| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A@@0) TyType) (= (type $ly@@211) LayerTypeType)) (= (type |a#0@@49|) (SeqType BoxType))) (= (type |b#0@@20|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A@@0 $ly@@211 |a#0@@49| |b#0@@20|) (Sequences.__default.concat Sequences._default.concat$A@@0 $LZ |a#0@@49| |b#0@@20|))) :qid |unknown.0:0| :skolemid |3909| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@0 (AsFuelBottom $ly@@211) |a#0@@49| |b#0@@20|)) )))
(assert  (=> true (forall ((Sequences._default.concat$A@@1 T@U) ($ly@@212 T@U) (|a#0@@50| T@U) (|b#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@1) TyType) (= (type $ly@@212) LayerTypeType)) (= (type |a#0@@50|) (SeqType BoxType))) (= (type |b#0@@21|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@1 |a#0@@50| |b#0@@21|) (and ($Is |a#0@@50| (TSeq Sequences._default.concat$A@@1)) ($Is |b#0@@21| (TSeq Sequences._default.concat$A@@1))))) (and (and (and (= (|Seq#Length| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@212 |a#0@@50| |b#0@@21|)) (+ (|Seq#Length| |a#0@@50|) (|Seq#Length| |b#0@@21|))) (forall ((|i#0@@49| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@49|) (< |i#0@@49| (|Seq#Length| |a#0@@50|))) (= (|Seq#Index| |a#0@@50| |i#0@@49|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@212 |a#0@@50| |b#0@@21|) |i#0@@49|)))) :qid |sequence.230:18| :skolemid |3910| :pattern ( (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@212 |a#0@@50| |b#0@@21|) |i#0@@49|)) :pattern ( (|Seq#Index| |a#0@@50| |i#0@@49|)) ))) (forall ((|i#1@@12| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@12|) (< |i#1@@12| (|Seq#Length| |b#0@@21|))) (= (|Seq#Index| |b#0@@21| |i#1@@12|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@212 |a#0@@50| |b#0@@21|) (+ (|Seq#Length| |a#0@@50|) |i#1@@12|))))) :qid |sequence.231:18| :skolemid |3911| :pattern ( (|Seq#Index| |b#0@@21| |i#1@@12|)) ))) ($Is (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@212 |a#0@@50| |b#0@@21|) (TSeq Sequences._default.concat$A@@1)))) :qid |unknown.0:0| :skolemid |3912| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@212 |a#0@@50| |b#0@@21|)) ))))
(assert (forall ((Sequences._default.concat$A@@2 T@U) ($ly@@213 T@U) (|a#0@@51| T@U) (|b#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@2) TyType) (= (type $ly@@213) LayerTypeType)) (= (type |a#0@@51|) (SeqType BoxType))) (= (type |b#0@@22|) (SeqType BoxType))) (and ($Is |a#0@@51| (TSeq Sequences._default.concat$A@@2)) ($Is |b#0@@22| (TSeq Sequences._default.concat$A@@2)))) (and (=> (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@213 |a#0@@51| |b#0@@22|) true) (=> true (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@213 |a#0@@51| |b#0@@22|)))) :qid |unknown.0:0| :skolemid |3913| :pattern ( (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@213 |a#0@@51| |b#0@@22|)) )))
(assert  (=> true (forall ((Sequences._default.concat$A@@3 T@U) ($ly@@214 T@U) (|a#0@@52| T@U) (|b#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@3) TyType) (= (type $ly@@214) LayerTypeType)) (= (type |a#0@@52|) (SeqType BoxType))) (= (type |b#0@@23|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@3 |a#0@@52| |b#0@@23|) (and ($Is |a#0@@52| (TSeq Sequences._default.concat$A@@3)) ($Is |b#0@@23| (TSeq Sequences._default.concat$A@@3))))) (= (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@214) |a#0@@52| |b#0@@23|) (|Seq#Append| |a#0@@52| |b#0@@23|))) :qid |unknown.0:0| :skolemid |3914| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@214) |a#0@@52| |b#0@@23|)) ))))
(assert  (=> true (forall ((Sequences._default.concat$A@@4 T@U) ($ly@@215 T@U) (|a#0@@53| T@U) (|b#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@4) TyType) (= (type $ly@@215) LayerTypeType)) (= (type |a#0@@53|) (SeqType BoxType))) (= (type |b#0@@24|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@4 (Lit |a#0@@53|) (Lit |b#0@@24|)) (and ($Is |a#0@@53| (TSeq Sequences._default.concat$A@@4)) ($Is |b#0@@24| (TSeq Sequences._default.concat$A@@4))))) (= (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@215) (Lit |a#0@@53|) (Lit |b#0@@24|)) (|Seq#Append| |a#0@@53| |b#0@@24|))) :qid |unknown.0:0| :weight 3 :skolemid |3915| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@215) (Lit |a#0@@53|) (Lit |b#0@@24|))) ))))
(assert (forall ((arg0@@294 T@U) (arg1@@149 T@U) (arg2@@94 T@U) (arg3@@55 T@U) (arg4@@39 T@U) ) (! (= (type (Sequences.__default.concat3 arg0@@294 arg1@@149 arg2@@94 arg3@@55 arg4@@39)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat3| :pattern ( (Sequences.__default.concat3 arg0@@294 arg1@@149 arg2@@94 arg3@@55 arg4@@39)) )))
(assert (forall ((Sequences._default.concat3$A T@U) ($ly@@216 T@U) (|a#0@@54| T@U) (|b#0@@25| T@U) (|c#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A) TyType) (= (type $ly@@216) LayerTypeType)) (= (type |a#0@@54|) (SeqType BoxType))) (= (type |b#0@@25|) BoxType)) (= (type |c#0@@4|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@216) |a#0@@54| |b#0@@25| |c#0@@4|) (Sequences.__default.concat3 Sequences._default.concat3$A $ly@@216 |a#0@@54| |b#0@@25| |c#0@@4|))) :qid |unknown.0:0| :skolemid |3916| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@216) |a#0@@54| |b#0@@25| |c#0@@4|)) )))
(assert (forall ((Sequences._default.concat3$A@@0 T@U) ($ly@@217 T@U) (|a#0@@55| T@U) (|b#0@@26| T@U) (|c#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A@@0) TyType) (= (type $ly@@217) LayerTypeType)) (= (type |a#0@@55|) (SeqType BoxType))) (= (type |b#0@@26|) BoxType)) (= (type |c#0@@5|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $ly@@217 |a#0@@55| |b#0@@26| |c#0@@5|) (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $LZ |a#0@@55| |b#0@@26| |c#0@@5|))) :qid |unknown.0:0| :skolemid |3917| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@0 (AsFuelBottom $ly@@217) |a#0@@55| |b#0@@26| |c#0@@5|)) )))
(assert  (=> true (forall ((Sequences._default.concat3$A@@1 T@U) ($ly@@218 T@U) (|a#0@@56| T@U) (|b#0@@27| T@U) (|c#0@@6| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@1) TyType) (= (type $ly@@218) LayerTypeType)) (= (type |a#0@@56|) (SeqType BoxType))) (= (type |b#0@@27|) BoxType)) (= (type |c#0@@6|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@1 |a#0@@56| |b#0@@27| |c#0@@6|) (and (and ($Is |a#0@@56| (TSeq Sequences._default.concat3$A@@1)) ($IsBox |b#0@@27| Sequences._default.concat3$A@@1)) ($Is |c#0@@6| (TSeq Sequences._default.concat3$A@@1))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@218 |a#0@@56| |b#0@@27| |c#0@@6|)) (+ (+ (|Seq#Length| |a#0@@56|) (|Seq#Length| |c#0@@6|)) 1)) (forall ((|i#0@@50| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@50|) (< |i#0@@50| (|Seq#Length| |a#0@@56|))) (= (|Seq#Index| |a#0@@56| |i#0@@50|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@218 |a#0@@56| |b#0@@27| |c#0@@6|) |i#0@@50|)))) :qid |sequence.238:18| :skolemid |3918| :pattern ( (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@218 |a#0@@56| |b#0@@27| |c#0@@6|) |i#0@@50|)) :pattern ( (|Seq#Index| |a#0@@56| |i#0@@50|)) ))) (= (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@218 |a#0@@56| |b#0@@27| |c#0@@6|) (|Seq#Length| |a#0@@56|)) |b#0@@27|)) (forall ((|i#1@@13| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@13|) (< |i#1@@13| (|Seq#Length| |c#0@@6|))) (= (|Seq#Index| |c#0@@6| |i#1@@13|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@218 |a#0@@56| |b#0@@27| |c#0@@6|) (+ (+ (|Seq#Length| |a#0@@56|) 1) |i#1@@13|))))) :qid |sequence.240:18| :skolemid |3919| :pattern ( (|Seq#Index| |c#0@@6| |i#1@@13|)) ))) ($Is (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@218 |a#0@@56| |b#0@@27| |c#0@@6|) (TSeq Sequences._default.concat3$A@@1)))) :qid |unknown.0:0| :skolemid |3920| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@218 |a#0@@56| |b#0@@27| |c#0@@6|)) ))))
(assert (forall ((Sequences._default.concat3$A@@2 T@U) ($ly@@219 T@U) (|a#0@@57| T@U) (|b#0@@28| T@U) (|c#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@2) TyType) (= (type $ly@@219) LayerTypeType)) (= (type |a#0@@57|) (SeqType BoxType))) (= (type |b#0@@28|) BoxType)) (= (type |c#0@@7|) (SeqType BoxType))) (and (and ($Is |a#0@@57| (TSeq Sequences._default.concat3$A@@2)) ($IsBox |b#0@@28| Sequences._default.concat3$A@@2)) ($Is |c#0@@7| (TSeq Sequences._default.concat3$A@@2)))) (and (=> (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@219 |a#0@@57| |b#0@@28| |c#0@@7|) true) (=> true (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@219 |a#0@@57| |b#0@@28| |c#0@@7|)))) :qid |unknown.0:0| :skolemid |3921| :pattern ( (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@219 |a#0@@57| |b#0@@28| |c#0@@7|)) )))
(assert  (=> true (forall ((Sequences._default.concat3$A@@3 T@U) ($ly@@220 T@U) (|a#0@@58| T@U) (|b#0@@29| T@U) (|c#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@3) TyType) (= (type $ly@@220) LayerTypeType)) (= (type |a#0@@58|) (SeqType BoxType))) (= (type |b#0@@29|) BoxType)) (= (type |c#0@@8|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@3 |a#0@@58| |b#0@@29| |c#0@@8|) (and (and ($Is |a#0@@58| (TSeq Sequences._default.concat3$A@@3)) ($IsBox |b#0@@29| Sequences._default.concat3$A@@3)) ($Is |c#0@@8| (TSeq Sequences._default.concat3$A@@3))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@220) |a#0@@58| |b#0@@29| |c#0@@8|) (|Seq#Append| (|Seq#Append| |a#0@@58| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@29|)) |c#0@@8|))) :qid |unknown.0:0| :skolemid |3922| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@220) |a#0@@58| |b#0@@29| |c#0@@8|)) ))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@4 T@U) ($ly@@221 T@U) (|a#0@@59| T@U) (|b#0@@30| T@U) (|c#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@4) TyType) (= (type $ly@@221) LayerTypeType)) (= (type |a#0@@59|) (SeqType BoxType))) (= (type |b#0@@30|) BoxType)) (= (type |c#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@4 (Lit |a#0@@59|) |b#0@@30| (Lit |c#0@@9|)) (and (and ($Is |a#0@@59| (TSeq Sequences._default.concat3$A@@4)) ($IsBox |b#0@@30| Sequences._default.concat3$A@@4)) ($Is |c#0@@9| (TSeq Sequences._default.concat3$A@@4))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@221) (Lit |a#0@@59|) |b#0@@30| (Lit |c#0@@9|)) (|Seq#Append| (|Seq#Append| |a#0@@59| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@30|)) |c#0@@9|))) :qid |unknown.0:0| :weight 3 :skolemid |3923| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@221) (Lit |a#0@@59|) |b#0@@30| (Lit |c#0@@9|))) ))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@5 T@U) ($ly@@222 T@U) (|a#0@@60| T@U) (|b#0@@31| T@U) (|c#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@5) TyType) (= (type $ly@@222) LayerTypeType)) (= (type |a#0@@60|) (SeqType BoxType))) (= (type |b#0@@31|) BoxType)) (= (type |c#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@5 (Lit |a#0@@60|) (Lit |b#0@@31|) (Lit |c#0@@10|)) (and (and ($Is |a#0@@60| (TSeq Sequences._default.concat3$A@@5)) ($IsBox |b#0@@31| Sequences._default.concat3$A@@5)) ($Is |c#0@@10| (TSeq Sequences._default.concat3$A@@5))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@222) (Lit |a#0@@60|) (Lit |b#0@@31|) (Lit |c#0@@10|)) (|Seq#Append| (|Seq#Append| |a#0@@60| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |b#0@@31|))) |c#0@@10|))) :qid |unknown.0:0| :weight 3 :skolemid |3924| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@222) (Lit |a#0@@60|) (Lit |b#0@@31|) (Lit |c#0@@10|))) ))))
(assert (forall ((arg0@@295 T@U) (arg1@@150 T@U) (arg2@@95 T@U) ) (! (= (type (Sequences.__default.concatSeq arg0@@295 arg1@@150 arg2@@95)) (SeqType BoxType)) :qid |funType:Sequences.__default.concatSeq| :pattern ( (Sequences.__default.concatSeq arg0@@295 arg1@@150 arg2@@95)) )))
(assert (forall ((Sequences._default.concatSeq$A T@U) ($ly@@223 T@U) (|a#0@@61| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A) TyType) (= (type $ly@@223) LayerTypeType)) (= (type |a#0@@61|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@223) |a#0@@61|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A $ly@@223 |a#0@@61|))) :qid |unknown.0:0| :skolemid |3925| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@223) |a#0@@61|)) )))
(assert (forall ((Sequences._default.concatSeq$A@@0 T@U) ($ly@@224 T@U) (|a#0@@62| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A@@0) TyType) (= (type $ly@@224) LayerTypeType)) (= (type |a#0@@62|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $ly@@224 |a#0@@62|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $LZ |a#0@@62|))) :qid |unknown.0:0| :skolemid |3926| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 (AsFuelBottom $ly@@224) |a#0@@62|)) )))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@1 T@U) ($ly@@225 T@U) (|a#0@@63| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@1) TyType) (= (type $ly@@225) LayerTypeType)) (= (type |a#0@@63|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@1 |a#0@@63|) ($Is |a#0@@63| (TSeq (TSeq Sequences._default.concatSeq$A@@1))))) ($Is (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@225 |a#0@@63|) (TSeq Sequences._default.concatSeq$A@@1))) :qid |unknown.0:0| :skolemid |3927| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@225 |a#0@@63|)) ))))
(assert (forall ((Sequences._default.concatSeq$A@@2 T@U) ($ly@@226 T@U) (|a#0@@64| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@2) TyType) (= (type $ly@@226) LayerTypeType)) (= (type |a#0@@64|) (SeqType BoxType))) ($Is |a#0@@64| (TSeq (TSeq Sequences._default.concatSeq$A@@2)))) (and (=> (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@226 |a#0@@64|) true) (=> true (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@226 |a#0@@64|)))) :qid |unknown.0:0| :skolemid |3928| :pattern ( (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@226 |a#0@@64|)) )))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@3 T@U) ($ly@@227 T@U) (|a#0@@65| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@3) TyType) (= (type $ly@@227) LayerTypeType)) (= (type |a#0@@65|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 |a#0@@65|) ($Is |a#0@@65| (TSeq (TSeq Sequences._default.concatSeq$A@@3))))) (and (=> (not (= (|Seq#Length| |a#0@@65|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@65|) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@65|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@65|))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@227) |a#0@@65|) (ite (= (|Seq#Length| |a#0@@65|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 $ly@@227 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@65|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@3) |a#0@@65|))))))) :qid |unknown.0:0| :skolemid |3929| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@227) |a#0@@65|)) ))))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@4 T@U) ($ly@@228 T@U) (|a#0@@66| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@4) TyType) (= (type $ly@@228) LayerTypeType)) (= (type |a#0@@66|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit |a#0@@66|)) ($Is |a#0@@66| (TSeq (TSeq Sequences._default.concatSeq$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@66|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@66|)) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@66|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@66|)))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@228) (Lit |a#0@@66|)) (ite (= (|Seq#Length| (Lit |a#0@@66|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@228) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@66|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@66|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |3930| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@228) (Lit |a#0@@66|))) ))))
(assert (forall ((Sequences._default.IsPrefix$A T@U) ($ly@@229 T@U) (|a#0@@67| T@U) (|b#0@@32| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A) TyType) (= (type $ly@@229) LayerTypeType)) (= (type |a#0@@67|) (SeqType BoxType))) (= (type |b#0@@32|) (SeqType BoxType))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@229) |a#0@@67| |b#0@@32|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A $ly@@229 |a#0@@67| |b#0@@32|)) (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A $ly@@229 |a#0@@67| |b#0@@32|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@229) |a#0@@67| |b#0@@32|)))) :qid |unknown.0:0| :skolemid |3931| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@229) |a#0@@67| |b#0@@32|)) )))
(assert (forall ((Sequences._default.IsPrefix$A@@0 T@U) ($ly@@230 T@U) (|a#0@@68| T@U) (|b#0@@33| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A@@0) TyType) (= (type $ly@@230) LayerTypeType)) (= (type |a#0@@68|) (SeqType BoxType))) (= (type |b#0@@33|) (SeqType BoxType))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $ly@@230 |a#0@@68| |b#0@@33|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $LZ |a#0@@68| |b#0@@33|)) (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $LZ |a#0@@68| |b#0@@33|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $ly@@230 |a#0@@68| |b#0@@33|)))) :qid |unknown.0:0| :skolemid |3932| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 (AsFuelBottom $ly@@230) |a#0@@68| |b#0@@33|)) )))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@1 T@U) ($ly@@231 T@U) (|a#0@@69| T@U) (|b#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.IsPrefix$A@@1) TyType) (= (type $ly@@231) LayerTypeType)) (= (type |a#0@@69|) (SeqType BoxType))) (= (type |b#0@@34|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@1 |a#0@@69| |b#0@@34|) (and ($Is |a#0@@69| (TSeq Sequences._default.IsPrefix$A@@1)) ($Is |b#0@@34| (TSeq Sequences._default.IsPrefix$A@@1))))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@231 |a#0@@69| |b#0@@34|)) (<= (|Seq#Length| |a#0@@69|) (|Seq#Length| |b#0@@34|))) :qid |unknown.0:0| :skolemid |3933| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@231 |a#0@@69| |b#0@@34|)) ))))
(assert (forall ((Sequences._default.IsPrefix$A@@2 T@U) ($ly@@232 T@U) (|a#0@@70| T@U) (|b#0@@35| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@2) TyType) (= (type $ly@@232) LayerTypeType)) (= (type |a#0@@70|) (SeqType BoxType))) (= (type |b#0@@35|) (SeqType BoxType))) (and ($Is |a#0@@70| (TSeq Sequences._default.IsPrefix$A@@2)) ($Is |b#0@@35| (TSeq Sequences._default.IsPrefix$A@@2)))) (and (=> (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@232 |a#0@@70| |b#0@@35|) true) (=> true (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@232 |a#0@@70| |b#0@@35|)))) :qid |unknown.0:0| :skolemid |3934| :pattern ( (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@232 |a#0@@70| |b#0@@35|)) )))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@3 T@U) ($ly@@233 T@U) (|a#0@@71| T@U) (|b#0@@36| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@3) TyType) (= (type $ly@@233) LayerTypeType)) (= (type |a#0@@71|) (SeqType BoxType))) (= (type |b#0@@36|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@3 |a#0@@71| |b#0@@36|) (and ($Is |a#0@@71| (TSeq Sequences._default.IsPrefix$A@@3)) ($Is |b#0@@36| (TSeq Sequences._default.IsPrefix$A@@3))))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@233) |a#0@@71| |b#0@@36|) (and (<= (|Seq#Length| |a#0@@71|) (|Seq#Length| |b#0@@36|)) (|Seq#Equal| |a#0@@71| (|Seq#Take| |b#0@@36| (|Seq#Length| |a#0@@71|))))) (=> (and (<= (|Seq#Length| |a#0@@71|) (|Seq#Length| |b#0@@36|)) (|Seq#Equal| |a#0@@71| (|Seq#Take| |b#0@@36| (|Seq#Length| |a#0@@71|)))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@233) |a#0@@71| |b#0@@36|)))) :qid |unknown.0:0| :skolemid |3935| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@233) |a#0@@71| |b#0@@36|)) ))))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@4 T@U) ($ly@@234 T@U) (|a#0@@72| T@U) (|b#0@@37| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@4) TyType) (= (type $ly@@234) LayerTypeType)) (= (type |a#0@@72|) (SeqType BoxType))) (= (type |b#0@@37|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@4 (Lit |a#0@@72|) (Lit |b#0@@37|)) (and ($Is |a#0@@72| (TSeq Sequences._default.IsPrefix$A@@4)) ($Is |b#0@@37| (TSeq Sequences._default.IsPrefix$A@@4))))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@234) (Lit |a#0@@72|) (Lit |b#0@@37|)) (and (<= (|Seq#Length| (Lit |a#0@@72|)) (|Seq#Length| (Lit |b#0@@37|))) (|Seq#Equal| |a#0@@72| (|Seq#Take| (Lit |b#0@@37|) (|Seq#Length| (Lit |a#0@@72|)))))) (=> (and (<= (|Seq#Length| (Lit |a#0@@72|)) (|Seq#Length| (Lit |b#0@@37|))) (|Seq#Equal| |a#0@@72| (|Seq#Take| (Lit |b#0@@37|) (|Seq#Length| (Lit |a#0@@72|))))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@234) (Lit |a#0@@72|) (Lit |b#0@@37|))))) :qid |unknown.0:0| :weight 3 :skolemid |3936| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@234) (Lit |a#0@@72|) (Lit |b#0@@37|))) ))))
(assert (forall ((Sequences._default.IsSuffix$A T@U) ($ly@@235 T@U) (|a#0@@73| T@U) (|b#0@@38| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A) TyType) (= (type $ly@@235) LayerTypeType)) (= (type |a#0@@73|) (SeqType BoxType))) (= (type |b#0@@38|) (SeqType BoxType))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@235) |a#0@@73| |b#0@@38|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A $ly@@235 |a#0@@73| |b#0@@38|)) (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A $ly@@235 |a#0@@73| |b#0@@38|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@235) |a#0@@73| |b#0@@38|)))) :qid |unknown.0:0| :skolemid |3937| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@235) |a#0@@73| |b#0@@38|)) )))
(assert (forall ((Sequences._default.IsSuffix$A@@0 T@U) ($ly@@236 T@U) (|a#0@@74| T@U) (|b#0@@39| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A@@0) TyType) (= (type $ly@@236) LayerTypeType)) (= (type |a#0@@74|) (SeqType BoxType))) (= (type |b#0@@39|) (SeqType BoxType))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $ly@@236 |a#0@@74| |b#0@@39|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $LZ |a#0@@74| |b#0@@39|)) (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $LZ |a#0@@74| |b#0@@39|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $ly@@236 |a#0@@74| |b#0@@39|)))) :qid |unknown.0:0| :skolemid |3938| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 (AsFuelBottom $ly@@236) |a#0@@74| |b#0@@39|)) )))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@1 T@U) ($ly@@237 T@U) (|a#0@@75| T@U) (|b#0@@40| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@1) TyType) (= (type $ly@@237) LayerTypeType)) (= (type |a#0@@75|) (SeqType BoxType))) (= (type |b#0@@40|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@1 |a#0@@75| |b#0@@40|) (and ($Is |a#0@@75| (TSeq Sequences._default.IsSuffix$A@@1)) ($Is |b#0@@40| (TSeq Sequences._default.IsSuffix$A@@1))))) true) :qid |unknown.0:0| :skolemid |3939| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@1 $ly@@237 |a#0@@75| |b#0@@40|)) ))))
(assert (forall ((Sequences._default.IsSuffix$A@@2 T@U) ($ly@@238 T@U) (|a#0@@76| T@U) (|b#0@@41| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@2) TyType) (= (type $ly@@238) LayerTypeType)) (= (type |a#0@@76|) (SeqType BoxType))) (= (type |b#0@@41|) (SeqType BoxType))) (and ($Is |a#0@@76| (TSeq Sequences._default.IsSuffix$A@@2)) ($Is |b#0@@41| (TSeq Sequences._default.IsSuffix$A@@2)))) (and (=> (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@238 |a#0@@76| |b#0@@41|) true) (=> true (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@238 |a#0@@76| |b#0@@41|)))) :qid |unknown.0:0| :skolemid |3940| :pattern ( (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@238 |a#0@@76| |b#0@@41|)) )))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@3 T@U) ($ly@@239 T@U) (|a#0@@77| T@U) (|b#0@@42| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@3) TyType) (= (type $ly@@239) LayerTypeType)) (= (type |a#0@@77|) (SeqType BoxType))) (= (type |b#0@@42|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@3 |a#0@@77| |b#0@@42|) (and ($Is |a#0@@77| (TSeq Sequences._default.IsSuffix$A@@3)) ($Is |b#0@@42| (TSeq Sequences._default.IsSuffix$A@@3))))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@239) |a#0@@77| |b#0@@42|) (and (<= (|Seq#Length| |a#0@@77|) (|Seq#Length| |b#0@@42|)) (|Seq#Equal| |a#0@@77| (|Seq#Drop| |b#0@@42| (- (|Seq#Length| |b#0@@42|) (|Seq#Length| |a#0@@77|)))))) (=> (and (<= (|Seq#Length| |a#0@@77|) (|Seq#Length| |b#0@@42|)) (|Seq#Equal| |a#0@@77| (|Seq#Drop| |b#0@@42| (- (|Seq#Length| |b#0@@42|) (|Seq#Length| |a#0@@77|))))) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@239) |a#0@@77| |b#0@@42|)))) :qid |unknown.0:0| :skolemid |3941| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@239) |a#0@@77| |b#0@@42|)) ))))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@4 T@U) ($ly@@240 T@U) (|a#0@@78| T@U) (|b#0@@43| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@4) TyType) (= (type $ly@@240) LayerTypeType)) (= (type |a#0@@78|) (SeqType BoxType))) (= (type |b#0@@43|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@4 (Lit |a#0@@78|) (Lit |b#0@@43|)) (and ($Is |a#0@@78| (TSeq Sequences._default.IsSuffix$A@@4)) ($Is |b#0@@43| (TSeq Sequences._default.IsSuffix$A@@4))))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@240) (Lit |a#0@@78|) (Lit |b#0@@43|)) (and (<= (|Seq#Length| (Lit |a#0@@78|)) (|Seq#Length| (Lit |b#0@@43|))) (|Seq#Equal| |a#0@@78| (|Seq#Drop| (Lit |b#0@@43|) (- (|Seq#Length| (Lit |b#0@@43|)) (|Seq#Length| (Lit |a#0@@78|))))))) (=> (and (<= (|Seq#Length| (Lit |a#0@@78|)) (|Seq#Length| (Lit |b#0@@43|))) (|Seq#Equal| |a#0@@78| (|Seq#Drop| (Lit |b#0@@43|) (- (|Seq#Length| (Lit |b#0@@43|)) (|Seq#Length| (Lit |a#0@@78|)))))) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@240) (Lit |a#0@@78|) (Lit |b#0@@43|))))) :qid |unknown.0:0| :weight 3 :skolemid |3942| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@240) (Lit |a#0@@78|) (Lit |b#0@@43|))) ))))
(assert (forall ((arg0@@296 T@U) (arg1@@151 T@U) (arg2@@96 T@U) (arg3@@56 T@U) (arg4@@40 Int) ) (! (= (type (Sequences.__default.SeqIndexIterate arg0@@296 arg1@@151 arg2@@96 arg3@@56 arg4@@40)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndexIterate| :pattern ( (Sequences.__default.SeqIndexIterate arg0@@296 arg1@@151 arg2@@96 arg3@@56 arg4@@40)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A T@U) ($ly@@241 T@U) (|run#0@@54| T@U) (|needle#0| T@U) (|i#0@@51| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A) TyType) (= (type $ly@@241) LayerTypeType)) (= (type |run#0@@54|) (SeqType BoxType))) (= (type |needle#0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@241) |run#0@@54| |needle#0| |i#0@@51|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A $ly@@241 |run#0@@54| |needle#0| |i#0@@51|))) :qid |unknown.0:0| :skolemid |3943| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@241) |run#0@@54| |needle#0| |i#0@@51|)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@0 T@U) ($ly@@242 T@U) (|run#0@@55| T@U) (|needle#0@@0| T@U) (|i#0@@52| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@0) TyType) (= (type $ly@@242) LayerTypeType)) (= (type |run#0@@55|) (SeqType BoxType))) (= (type |needle#0@@0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $ly@@242 |run#0@@55| |needle#0@@0| |i#0@@52|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $LZ |run#0@@55| |needle#0@@0| |i#0@@52|))) :qid |unknown.0:0| :skolemid |3944| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 (AsFuelBottom $ly@@242) |run#0@@55| |needle#0@@0| |i#0@@52|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@1 T@U) ($ly@@243 T@U) (|run#0@@56| T@U) (|needle#0@@1| T@U) (|i#0@@53| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@1) TyType) (= (type $ly@@243) LayerTypeType)) (= (type |run#0@@56|) (SeqType BoxType))) (= (type |needle#0@@1|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@1 |run#0@@56| |needle#0@@1| |i#0@@53|) (and (and ($Is |run#0@@56| (TSeq Sequences._default.SeqIndexIterate$A@@1)) ($IsBox |needle#0@@1| Sequences._default.SeqIndexIterate$A@@1)) (and (<= (LitInt 0) |i#0@@53|) (<= |i#0@@53| (|Seq#Length| |run#0@@56|)))))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@243 |run#0@@56| |needle#0@@1| |i#0@@53|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@243 |run#0@@56| |needle#0@@1| |i#0@@53|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@243 |run#0@@56| |needle#0@@1| |i#0@@53|)))) (|Seq#Length| |run#0@@56|))) (= (|Seq#Index| |run#0@@56| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@243 |run#0@@56| |needle#0@@1| |i#0@@53|))))) |needle#0@@1|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@243 |run#0@@56| |needle#0@@1| |i#0@@53|)) (forall ((|j#0@@1| Int) ) (!  (=> (and (<= |i#0@@53| |j#0@@1|) (< |j#0@@1| (|Seq#Length| |run#0@@56|))) (not (= (|Seq#Index| |run#0@@56| |j#0@@1|) |needle#0@@1|))) :qid |sequence.340:32| :skolemid |3945| :pattern ( (|Seq#Index| |run#0@@56| |j#0@@1|)) )))) ($Is (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@243 |run#0@@56| |needle#0@@1| |i#0@@53|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |3946| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@243 |run#0@@56| |needle#0@@1| |i#0@@53|)) ))))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@2 T@U) ($ly@@244 T@U) (|run#0@@57| T@U) (|needle#0@@2| T@U) (|i#0@@54| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@2) TyType) (= (type $ly@@244) LayerTypeType)) (= (type |run#0@@57|) (SeqType BoxType))) (= (type |needle#0@@2|) BoxType)) (and ($Is |run#0@@57| (TSeq Sequences._default.SeqIndexIterate$A@@2)) ($IsBox |needle#0@@2| Sequences._default.SeqIndexIterate$A@@2))) (and (=> (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@244 |run#0@@57| |needle#0@@2| |i#0@@54|) (and (<= (LitInt 0) |i#0@@54|) (<= |i#0@@54| (|Seq#Length| |run#0@@57|)))) (=> (and (<= (LitInt 0) |i#0@@54|) (<= |i#0@@54| (|Seq#Length| |run#0@@57|))) (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@244 |run#0@@57| |needle#0@@2| |i#0@@54|)))) :qid |unknown.0:0| :skolemid |3947| :pattern ( (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@244 |run#0@@57| |needle#0@@2| |i#0@@54|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@3 T@U) ($ly@@245 T@U) (|run#0@@58| T@U) (|needle#0@@3| T@U) (|i#0@@55| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@3) TyType) (= (type $ly@@245) LayerTypeType)) (= (type |run#0@@58|) (SeqType BoxType))) (= (type |needle#0@@3|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@58| |needle#0@@3| |i#0@@55|) (and (and ($Is |run#0@@58| (TSeq Sequences._default.SeqIndexIterate$A@@3)) ($IsBox |needle#0@@3| Sequences._default.SeqIndexIterate$A@@3)) (and (<= (LitInt 0) |i#0@@55|) (<= |i#0@@55| (|Seq#Length| |run#0@@58|)))))) (and (=> (not (= |i#0@@55| (|Seq#Length| |run#0@@58|))) (=> (not (= (|Seq#Index| |run#0@@58| |i#0@@55|) |needle#0@@3|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@58| |needle#0@@3| (+ |i#0@@55| 1)))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@245) |run#0@@58| |needle#0@@3| |i#0@@55|) (ite (= |i#0@@55| (|Seq#Length| |run#0@@58|)) |#Options.Option.None| (ite (= (|Seq#Index| |run#0@@58| |i#0@@55|) |needle#0@@3|) (|#Options.Option.Some| ($Box (int_2_U |i#0@@55|))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 $ly@@245 |run#0@@58| |needle#0@@3| (+ |i#0@@55| 1))))))) :qid |unknown.0:0| :skolemid |3948| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@245) |run#0@@58| |needle#0@@3| |i#0@@55|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@4 T@U) ($ly@@246 T@U) (|run#0@@59| T@U) (|needle#0@@4| T@U) (|i#0@@56| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@4) TyType) (= (type $ly@@246) LayerTypeType)) (= (type |run#0@@59|) (SeqType BoxType))) (= (type |needle#0@@4|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@59|) |needle#0@@4| (LitInt |i#0@@56|)) (and (and ($Is |run#0@@59| (TSeq Sequences._default.SeqIndexIterate$A@@4)) ($IsBox |needle#0@@4| Sequences._default.SeqIndexIterate$A@@4)) (and (<= (LitInt 0) (LitInt |i#0@@56|)) (<= (LitInt |i#0@@56|) (|Seq#Length| (Lit |run#0@@59|))))))) (and (=> (not (= (LitInt |i#0@@56|) (|Seq#Length| (Lit |run#0@@59|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@59|) (LitInt |i#0@@56|)) |needle#0@@4|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@59|) |needle#0@@4| (LitInt (+ |i#0@@56| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@246) (Lit |run#0@@59|) |needle#0@@4| (LitInt |i#0@@56|)) (ite (= (LitInt |i#0@@56|) (|Seq#Length| (Lit |run#0@@59|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@59|) (LitInt |i#0@@56|)) |needle#0@@4|) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@56|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@246) (Lit |run#0@@59|) |needle#0@@4| (LitInt (+ |i#0@@56| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |3949| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@246) (Lit |run#0@@59|) |needle#0@@4| (LitInt |i#0@@56|))) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@5 T@U) ($ly@@247 T@U) (|run#0@@60| T@U) (|needle#0@@5| T@U) (|i#0@@57| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@5) TyType) (= (type $ly@@247) LayerTypeType)) (= (type |run#0@@60|) (SeqType BoxType))) (= (type |needle#0@@5|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt |i#0@@57|)) (and (and ($Is |run#0@@60| (TSeq Sequences._default.SeqIndexIterate$A@@5)) ($IsBox |needle#0@@5| Sequences._default.SeqIndexIterate$A@@5)) (and (<= (LitInt 0) (LitInt |i#0@@57|)) (<= (LitInt |i#0@@57|) (|Seq#Length| (Lit |run#0@@60|))))))) (and (=> (not (= (LitInt |i#0@@57|) (|Seq#Length| (Lit |run#0@@60|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@60|) (LitInt |i#0@@57|)) (Lit |needle#0@@5|))) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt (+ |i#0@@57| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@247) (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt |i#0@@57|)) (ite (= (LitInt |i#0@@57|) (|Seq#Length| (Lit |run#0@@60|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@60|) (LitInt |i#0@@57|)) (Lit |needle#0@@5|)) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@57|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@247) (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt (+ |i#0@@57| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |3950| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@247) (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt |i#0@@57|))) ))))
(assert (forall ((arg0@@297 T@U) (arg1@@152 T@U) (arg2@@97 T@U) (arg3@@57 T@U) ) (! (= (type (Sequences.__default.SeqIndex arg0@@297 arg1@@152 arg2@@97 arg3@@57)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndex| :pattern ( (Sequences.__default.SeqIndex arg0@@297 arg1@@152 arg2@@97 arg3@@57)) )))
(assert (forall ((Sequences._default.SeqIndex$A T@U) ($ly@@248 T@U) (|run#0@@61| T@U) (|needle#0@@6| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A) TyType) (= (type $ly@@248) LayerTypeType)) (= (type |run#0@@61|) (SeqType BoxType))) (= (type |needle#0@@6|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@248) |run#0@@61| |needle#0@@6|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A $ly@@248 |run#0@@61| |needle#0@@6|))) :qid |unknown.0:0| :skolemid |3951| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@248) |run#0@@61| |needle#0@@6|)) )))
(assert (forall ((Sequences._default.SeqIndex$A@@0 T@U) ($ly@@249 T@U) (|run#0@@62| T@U) (|needle#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A@@0) TyType) (= (type $ly@@249) LayerTypeType)) (= (type |run#0@@62|) (SeqType BoxType))) (= (type |needle#0@@7|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $ly@@249 |run#0@@62| |needle#0@@7|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $LZ |run#0@@62| |needle#0@@7|))) :qid |unknown.0:0| :skolemid |3952| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 (AsFuelBottom $ly@@249) |run#0@@62| |needle#0@@7|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@1 T@U) ($ly@@250 T@U) (|run#0@@63| T@U) (|needle#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@1) TyType) (= (type $ly@@250) LayerTypeType)) (= (type |run#0@@63|) (SeqType BoxType))) (= (type |needle#0@@8|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@1 |run#0@@63| |needle#0@@8|) (and ($Is |run#0@@63| (TSeq Sequences._default.SeqIndex$A@@1)) ($IsBox |needle#0@@8| Sequences._default.SeqIndex$A@@1)))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@250 |run#0@@63| |needle#0@@8|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@250 |run#0@@63| |needle#0@@8|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@250 |run#0@@63| |needle#0@@8|)))) (|Seq#Length| |run#0@@63|))) (= (|Seq#Index| |run#0@@63| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@250 |run#0@@63| |needle#0@@8|))))) |needle#0@@8|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@250 |run#0@@63| |needle#0@@8|)) (forall ((|i#0@@58| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@58|) (< |i#0@@58| (|Seq#Length| |run#0@@63|))) (not (= (|Seq#Index| |run#0@@63| |i#0@@58|) |needle#0@@8|))) :qid |sequence.350:32| :skolemid |3953| :pattern ( (|Seq#Index| |run#0@@63| |i#0@@58|)) )))) ($Is (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@250 |run#0@@63| |needle#0@@8|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |3954| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@250 |run#0@@63| |needle#0@@8|)) ))))
(assert (forall ((Sequences._default.SeqIndex$A@@2 T@U) ($ly@@251 T@U) (|run#0@@64| T@U) (|needle#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@2) TyType) (= (type $ly@@251) LayerTypeType)) (= (type |run#0@@64|) (SeqType BoxType))) (= (type |needle#0@@9|) BoxType)) (and ($Is |run#0@@64| (TSeq Sequences._default.SeqIndex$A@@2)) ($IsBox |needle#0@@9| Sequences._default.SeqIndex$A@@2))) (and (=> (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@251 |run#0@@64| |needle#0@@9|) true) (=> true (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@251 |run#0@@64| |needle#0@@9|)))) :qid |unknown.0:0| :skolemid |3955| :pattern ( (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@251 |run#0@@64| |needle#0@@9|)) )))
(assert (= (type StartFuel_Sequences._default.SeqIndexIterate) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@3 T@U) ($ly@@252 T@U) (|run#0@@65| T@U) (|needle#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@3) TyType) (= (type $ly@@252) LayerTypeType)) (= (type |run#0@@65|) (SeqType BoxType))) (= (type |needle#0@@10|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@65| |needle#0@@10|) (and ($Is |run#0@@65| (TSeq Sequences._default.SeqIndex$A@@3)) ($IsBox |needle#0@@10| Sequences._default.SeqIndex$A@@3)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@65| |needle#0@@10| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@252) |run#0@@65| |needle#0@@10|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@3 StartFuel_Sequences._default.SeqIndexIterate |run#0@@65| |needle#0@@10| (LitInt 0))))) :qid |unknown.0:0| :skolemid |3956| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@252) |run#0@@65| |needle#0@@10|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@4 T@U) ($ly@@253 T@U) (|run#0@@66| T@U) (|needle#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@4) TyType) (= (type $ly@@253) LayerTypeType)) (= (type |run#0@@66|) (SeqType BoxType))) (= (type |needle#0@@11|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@66|) |needle#0@@11|) (and ($Is |run#0@@66| (TSeq Sequences._default.SeqIndex$A@@4)) ($IsBox |needle#0@@11| Sequences._default.SeqIndex$A@@4)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@66|) |needle#0@@11| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@253) (Lit |run#0@@66|) |needle#0@@11|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@4 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@66|) |needle#0@@11| (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |3957| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@253) (Lit |run#0@@66|) |needle#0@@11|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@5 T@U) ($ly@@254 T@U) (|run#0@@67| T@U) (|needle#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@5) TyType) (= (type $ly@@254) LayerTypeType)) (= (type |run#0@@67|) (SeqType BoxType))) (= (type |needle#0@@12|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@67|) (Lit |needle#0@@12|)) (and ($Is |run#0@@67| (TSeq Sequences._default.SeqIndex$A@@5)) ($IsBox |needle#0@@12| Sequences._default.SeqIndex$A@@5)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@67|) (Lit |needle#0@@12|) (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@254) (Lit |run#0@@67|) (Lit |needle#0@@12|)) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@5 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@67|) (Lit |needle#0@@12|) (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |3958| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@254) (Lit |run#0@@67|) (Lit |needle#0@@12|))) ))))
(assert (forall ((arg0@@298 T@U) (arg1@@153 T@U) (arg2@@98 Int) (arg3@@58 T@U) ) (! (= (type (Sequences.__default.SeqOfLength arg0@@298 arg1@@153 arg2@@98 arg3@@58)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqOfLength| :pattern ( (Sequences.__default.SeqOfLength arg0@@298 arg1@@153 arg2@@98 arg3@@58)) )))
(assert (forall ((Sequences._default.SeqOfLength$V T@U) ($ly@@255 T@U) (|length#0| Int) (|v#0@@18| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V) TyType) (= (type $ly@@255) LayerTypeType)) (= (type |v#0@@18|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@255) |length#0| |v#0@@18|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V $ly@@255 |length#0| |v#0@@18|))) :qid |unknown.0:0| :skolemid |3959| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@255) |length#0| |v#0@@18|)) )))
(assert (forall ((Sequences._default.SeqOfLength$V@@0 T@U) ($ly@@256 T@U) (|length#0@@0| Int) (|v#0@@19| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V@@0) TyType) (= (type $ly@@256) LayerTypeType)) (= (type |v#0@@19|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $ly@@256 |length#0@@0| |v#0@@19|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $LZ |length#0@@0| |v#0@@19|))) :qid |unknown.0:0| :skolemid |3960| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 (AsFuelBottom $ly@@256) |length#0@@0| |v#0@@19|)) )))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@1 T@U) ($ly@@257 T@U) (|length#0@@1| Int) (|v#0@@20| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@1) TyType) (= (type $ly@@257) LayerTypeType)) (= (type |v#0@@20|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@1 |length#0@@1| |v#0@@20|) (and (<= (LitInt 0) |length#0@@1|) ($IsBox |v#0@@20| Sequences._default.SeqOfLength$V@@1)))) (and (and (= (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@257 |length#0@@1| |v#0@@20|)) |length#0@@1|) (forall ((|i#0@@59| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@59|) (< |i#0@@59| (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@257 |length#0@@1| |v#0@@20|)))) (= (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@257 |length#0@@1| |v#0@@20|) |i#0@@59|) |v#0@@20|)) :qid |sequence.357:18| :skolemid |3961| :pattern ( (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@257 |length#0@@1| |v#0@@20|) |i#0@@59|)) ))) ($Is (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@257 |length#0@@1| |v#0@@20|) (TSeq Sequences._default.SeqOfLength$V@@1)))) :qid |unknown.0:0| :skolemid |3962| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@257 |length#0@@1| |v#0@@20|)) ))))
(assert (forall ((Sequences._default.SeqOfLength$V@@2 T@U) ($ly@@258 T@U) (|length#0@@2| Int) (|v#0@@21| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@2) TyType) (= (type $ly@@258) LayerTypeType)) (= (type |v#0@@21|) BoxType)) (and (<= (LitInt 0) |length#0@@2|) ($IsBox |v#0@@21| Sequences._default.SeqOfLength$V@@2))) (and (=> (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@258 |length#0@@2| |v#0@@21|) true) (=> true (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@258 |length#0@@2| |v#0@@21|)))) :qid |unknown.0:0| :skolemid |3963| :pattern ( (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@258 |length#0@@2| |v#0@@21|)) )))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@3 T@U) ($ly@@259 T@U) (|length#0@@3| Int) (|v#0@@22| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@3) TyType) (= (type $ly@@259) LayerTypeType)) (= (type |v#0@@22|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 |length#0@@3| |v#0@@22|) (and (<= (LitInt 0) |length#0@@3|) ($IsBox |v#0@@22| Sequences._default.SeqOfLength$V@@3)))) (and (=> (not (= |length#0@@3| (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 (- |length#0@@3| 1) |v#0@@22|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@259) |length#0@@3| |v#0@@22|) (ite (= |length#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@22|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 $ly@@259 (- |length#0@@3| 1) |v#0@@22|)))))) :qid |unknown.0:0| :skolemid |3964| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@259) |length#0@@3| |v#0@@22|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@4 T@U) ($ly@@260 T@U) (|length#0@@4| Int) (|v#0@@23| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@4) TyType) (= (type $ly@@260) LayerTypeType)) (= (type |v#0@@23|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt |length#0@@4|) |v#0@@23|) (and (<= (LitInt 0) |length#0@@4|) ($IsBox |v#0@@23| Sequences._default.SeqOfLength$V@@4)))) (and (=> (not (= (LitInt |length#0@@4|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt (- |length#0@@4| 1)) |v#0@@23|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@260) (LitInt |length#0@@4|) |v#0@@23|) (ite (= (LitInt |length#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@23|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@260) (LitInt (- |length#0@@4| 1)) |v#0@@23|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3965| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@260) (LitInt |length#0@@4|) |v#0@@23|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@5 T@U) ($ly@@261 T@U) (|length#0@@5| Int) (|v#0@@24| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@5) TyType) (= (type $ly@@261) LayerTypeType)) (= (type |v#0@@24|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt |length#0@@5|) (Lit |v#0@@24|)) (and (<= (LitInt 0) |length#0@@5|) ($IsBox |v#0@@24| Sequences._default.SeqOfLength$V@@5)))) (and (=> (not (= (LitInt |length#0@@5|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt (- |length#0@@5| 1)) (Lit |v#0@@24|))) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@261) (LitInt |length#0@@5|) (Lit |v#0@@24|)) (ite (= (LitInt |length#0@@5|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |v#0@@24|)) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@261) (LitInt (- |length#0@@5| 1)) (Lit |v#0@@24|))))))) :qid |unknown.0:0| :weight 3 :skolemid |3966| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@261) (LitInt |length#0@@5|) (Lit |v#0@@24|))) ))))
(assert (forall ((arg0@@299 T@U) (arg1@@154 T@U) (arg2@@99 T@U) (arg3@@59 Int) (arg4@@41 T@U) ) (! (= (type (Sequences.__default.SeqIndexUpdate arg0@@299 arg1@@154 arg2@@99 arg3@@59 arg4@@41)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqIndexUpdate| :pattern ( (Sequences.__default.SeqIndexUpdate arg0@@299 arg1@@154 arg2@@99 arg3@@59 arg4@@41)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T T@U) ($ly@@262 T@U) (|s#0@@61| T@U) (|i#0@@60| Int) (|t#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T) TyType) (= (type $ly@@262) LayerTypeType)) (= (type |s#0@@61|) (SeqType BoxType))) (= (type |t#0@@10|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@262) |s#0@@61| |i#0@@60| |t#0@@10|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T $ly@@262 |s#0@@61| |i#0@@60| |t#0@@10|))) :qid |unknown.0:0| :skolemid |3967| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@262) |s#0@@61| |i#0@@60| |t#0@@10|)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@0 T@U) ($ly@@263 T@U) (|s#0@@62| T@U) (|i#0@@61| Int) (|t#0@@11| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@0) TyType) (= (type $ly@@263) LayerTypeType)) (= (type |s#0@@62|) (SeqType BoxType))) (= (type |t#0@@11|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $ly@@263 |s#0@@62| |i#0@@61| |t#0@@11|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $LZ |s#0@@62| |i#0@@61| |t#0@@11|))) :qid |unknown.0:0| :skolemid |3968| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 (AsFuelBottom $ly@@263) |s#0@@62| |i#0@@61| |t#0@@11|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@1 T@U) ($ly@@264 T@U) (|s#0@@63| T@U) (|i#0@@62| Int) (|t#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@1) TyType) (= (type $ly@@264) LayerTypeType)) (= (type |s#0@@63|) (SeqType BoxType))) (= (type |t#0@@12|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@1 |s#0@@63| |i#0@@62| |t#0@@12|) (and (and (and ($Is |s#0@@63| (TSeq Sequences._default.SeqIndexUpdate$T@@1)) (and (<= (LitInt 0) |i#0@@62|) (< |i#0@@62| 18446744073709551616))) ($IsBox |t#0@@12| Sequences._default.SeqIndexUpdate$T@@1)) (and (< (+ |i#0@@62| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@62|) (< |i#0@@62| (|Seq#Length| |s#0@@63|))))))) (and (|Seq#Equal| (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@264 |s#0@@63| |i#0@@62| |t#0@@12|) (|Seq#Update| |s#0@@63| |i#0@@62| |t#0@@12|)) ($Is (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@264 |s#0@@63| |i#0@@62| |t#0@@12|) (TSeq Sequences._default.SeqIndexUpdate$T@@1)))) :qid |unknown.0:0| :skolemid |3969| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@264 |s#0@@63| |i#0@@62| |t#0@@12|)) ))))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@2 T@U) ($ly@@265 T@U) (|s#0@@64| T@U) (|i#0@@63| Int) (|t#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@2) TyType) (= (type $ly@@265) LayerTypeType)) (= (type |s#0@@64|) (SeqType BoxType))) (= (type |t#0@@13|) BoxType)) (and (and ($Is |s#0@@64| (TSeq Sequences._default.SeqIndexUpdate$T@@2)) (and (<= (LitInt 0) |i#0@@63|) (< |i#0@@63| 18446744073709551616))) ($IsBox |t#0@@13| Sequences._default.SeqIndexUpdate$T@@2))) (and (=> (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@265 |s#0@@64| |i#0@@63| |t#0@@13|) (and (< (+ |i#0@@63| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@63|) (< |i#0@@63| (|Seq#Length| |s#0@@64|))))) (=> (and (< (+ |i#0@@63| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@63|) (< |i#0@@63| (|Seq#Length| |s#0@@64|)))) (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@265 |s#0@@64| |i#0@@63| |t#0@@13|)))) :qid |unknown.0:0| :skolemid |3970| :pattern ( (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@265 |s#0@@64| |i#0@@63| |t#0@@13|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@3 T@U) ($ly@@266 T@U) (|s#0@@65| T@U) (|i#0@@64| Int) (|t#0@@14| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@3) TyType) (= (type $ly@@266) LayerTypeType)) (= (type |s#0@@65|) (SeqType BoxType))) (= (type |t#0@@14|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@3 |s#0@@65| |i#0@@64| |t#0@@14|) (and (and (and ($Is |s#0@@65| (TSeq Sequences._default.SeqIndexUpdate$T@@3)) (and (<= (LitInt 0) |i#0@@64|) (< |i#0@@64| 18446744073709551616))) ($IsBox |t#0@@14| Sequences._default.SeqIndexUpdate$T@@3)) (and (< (+ |i#0@@64| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@64|) (< |i#0@@64| (|Seq#Length| |s#0@@65|))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@266) |s#0@@65| |i#0@@64| |t#0@@14|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@65| |i#0@@64|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@14|)) (|Seq#Drop| |s#0@@65| (+ |i#0@@64| 1))))) :qid |unknown.0:0| :skolemid |3971| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@266) |s#0@@65| |i#0@@64| |t#0@@14|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@4 T@U) ($ly@@267 T@U) (|s#0@@66| T@U) (|i#0@@65| Int) (|t#0@@15| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@4) TyType) (= (type $ly@@267) LayerTypeType)) (= (type |s#0@@66|) (SeqType BoxType))) (= (type |t#0@@15|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@4 (Lit |s#0@@66|) (LitInt |i#0@@65|) |t#0@@15|) (and (and (and ($Is |s#0@@66| (TSeq Sequences._default.SeqIndexUpdate$T@@4)) (and (<= (LitInt 0) |i#0@@65|) (< |i#0@@65| 18446744073709551616))) ($IsBox |t#0@@15| Sequences._default.SeqIndexUpdate$T@@4)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@65| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@65|)) (< |i#0@@65| (|Seq#Length| (Lit |s#0@@66|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@267) (Lit |s#0@@66|) (LitInt |i#0@@65|) |t#0@@15|) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@66|) (LitInt |i#0@@65|)) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@15|)) (|Seq#Drop| (Lit |s#0@@66|) (LitInt (+ |i#0@@65| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |3972| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@267) (Lit |s#0@@66|) (LitInt |i#0@@65|) |t#0@@15|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@5 T@U) ($ly@@268 T@U) (|s#0@@67| T@U) (|i#0@@66| Int) (|t#0@@16| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@5) TyType) (= (type $ly@@268) LayerTypeType)) (= (type |s#0@@67|) (SeqType BoxType))) (= (type |t#0@@16|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@5 (Lit |s#0@@67|) (LitInt |i#0@@66|) (Lit |t#0@@16|)) (and (and (and ($Is |s#0@@67| (TSeq Sequences._default.SeqIndexUpdate$T@@5)) (and (<= (LitInt 0) |i#0@@66|) (< |i#0@@66| 18446744073709551616))) ($IsBox |t#0@@16| Sequences._default.SeqIndexUpdate$T@@5)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@66| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@66|)) (< |i#0@@66| (|Seq#Length| (Lit |s#0@@67|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@268) (Lit |s#0@@67|) (LitInt |i#0@@66|) (Lit |t#0@@16|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@67|) (LitInt |i#0@@66|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@16|))) (|Seq#Drop| (Lit |s#0@@67|) (LitInt (+ |i#0@@66| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |3973| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@268) (Lit |s#0@@67|) (LitInt |i#0@@66|) (Lit |t#0@@16|))) ))))
(assert (forall ((arg0@@300 T@U) (arg1@@155 T@U) (arg2@@100 T@U) (arg3@@60 T@U) (arg4@@42 T@U) ) (! (= (type (Sequences.__default.Zip arg0@@300 arg1@@155 arg2@@100 arg3@@60 arg4@@42)) (SeqType BoxType)) :qid |funType:Sequences.__default.Zip| :pattern ( (Sequences.__default.Zip arg0@@300 arg1@@155 arg2@@100 arg3@@60 arg4@@42)) )))
(assert (forall ((Sequences._default.Zip$A T@U) (Sequences._default.Zip$B T@U) ($ly@@269 T@U) (|a#0@@79| T@U) (|b#0@@44| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A) TyType) (= (type Sequences._default.Zip$B) TyType)) (= (type $ly@@269) LayerTypeType)) (= (type |a#0@@79|) (SeqType BoxType))) (= (type |b#0@@44|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@269) |a#0@@79| |b#0@@44|) (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B $ly@@269 |a#0@@79| |b#0@@44|))) :qid |unknown.0:0| :skolemid |3974| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@269) |a#0@@79| |b#0@@44|)) )))
(assert (forall ((Sequences._default.Zip$A@@0 T@U) (Sequences._default.Zip$B@@0 T@U) ($ly@@270 T@U) (|a#0@@80| T@U) (|b#0@@45| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A@@0) TyType) (= (type Sequences._default.Zip$B@@0) TyType)) (= (type $ly@@270) LayerTypeType)) (= (type |a#0@@80|) (SeqType BoxType))) (= (type |b#0@@45|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $ly@@270 |a#0@@80| |b#0@@45|) (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $LZ |a#0@@80| |b#0@@45|))) :qid |unknown.0:0| :skolemid |3975| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 (AsFuelBottom $ly@@270) |a#0@@80| |b#0@@45|)) )))
(assert  (=> true (forall ((Sequences._default.Zip$A@@1 T@U) (Sequences._default.Zip$B@@1 T@U) ($ly@@271 T@U) (|a#0@@81| T@U) (|b#0@@46| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@1) TyType) (= (type Sequences._default.Zip$B@@1) TyType)) (= (type $ly@@271) LayerTypeType)) (= (type |a#0@@81|) (SeqType BoxType))) (= (type |b#0@@46|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 |a#0@@81| |b#0@@46|) (and (and ($Is |a#0@@81| (TSeq Sequences._default.Zip$A@@1)) ($Is |b#0@@46| (TSeq Sequences._default.Zip$B@@1))) (= (|Seq#Length| |a#0@@81|) (|Seq#Length| |b#0@@46|))))) (and (and (= (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@271 |a#0@@81| |b#0@@46|)) (|Seq#Length| |a#0@@81|)) (forall ((|i#0@@67| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@67|) (< |i#0@@67| (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@271 |a#0@@81| |b#0@@46|)))) (|_System.Tuple2#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@271 |a#0@@81| |b#0@@46|) |i#0@@67|)) (|#_System._tuple#2._#Make2| (|Seq#Index| |a#0@@81| |i#0@@67|) (|Seq#Index| |b#0@@46| |i#0@@67|))))) :qid |sequence.378:20| :skolemid |3976| :pattern ( (|Seq#Index| |b#0@@46| |i#0@@67|)) :pattern ( (|Seq#Index| |a#0@@81| |i#0@@67|)) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@271 |a#0@@81| |b#0@@46|) |i#0@@67|))) ))) ($Is (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@271 |a#0@@81| |b#0@@46|) (TSeq (Tclass._System.Tuple2 Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1))))) :qid |unknown.0:0| :skolemid |3977| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@271 |a#0@@81| |b#0@@46|)) ))))
(assert (forall ((Sequences._default.Zip$A@@2 T@U) (Sequences._default.Zip$B@@2 T@U) ($ly@@272 T@U) (|a#0@@82| T@U) (|b#0@@47| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@2) TyType) (= (type Sequences._default.Zip$B@@2) TyType)) (= (type $ly@@272) LayerTypeType)) (= (type |a#0@@82|) (SeqType BoxType))) (= (type |b#0@@47|) (SeqType BoxType))) (and ($Is |a#0@@82| (TSeq Sequences._default.Zip$A@@2)) ($Is |b#0@@47| (TSeq Sequences._default.Zip$B@@2)))) (and (=> (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@272 |a#0@@82| |b#0@@47|) (= (|Seq#Length| |a#0@@82|) (|Seq#Length| |b#0@@47|))) (=> (= (|Seq#Length| |a#0@@82|) (|Seq#Length| |b#0@@47|)) (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@272 |a#0@@82| |b#0@@47|)))) :qid |unknown.0:0| :skolemid |3978| :pattern ( (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@272 |a#0@@82| |b#0@@47|)) )))
(assert  (=> true (forall ((Sequences._default.Zip$A@@3 T@U) (Sequences._default.Zip$B@@3 T@U) ($ly@@273 T@U) (|a#0@@83| T@U) (|b#0@@48| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@3) TyType) (= (type Sequences._default.Zip$B@@3) TyType)) (= (type $ly@@273) LayerTypeType)) (= (type |a#0@@83|) (SeqType BoxType))) (= (type |b#0@@48|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 |a#0@@83| |b#0@@48|) (and (and ($Is |a#0@@83| (TSeq Sequences._default.Zip$A@@3)) ($Is |b#0@@48| (TSeq Sequences._default.Zip$B@@3))) (= (|Seq#Length| |a#0@@83|) (|Seq#Length| |b#0@@48|))))) (and (=> (not (= (|Seq#Length| |a#0@@83|) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@3 |a#0@@83|) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@3 |b#0@@48|)) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@83|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@48|))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@3 |a#0@@83|) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@3 |b#0@@48|)))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@273) |a#0@@83| |b#0@@48|) (ite (= (|Seq#Length| |a#0@@83|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 $ly@@273 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@83|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@48|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#_System._tuple#2._#Make2| (Sequences.__default.Last Sequences._default.Zip$A@@3 |a#0@@83|) (Sequences.__default.Last Sequences._default.Zip$B@@3 |b#0@@48|))))))))) :qid |unknown.0:0| :skolemid |3979| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@273) |a#0@@83| |b#0@@48|)) ))))
(assert  (=> true (forall ((Sequences._default.Zip$A@@4 T@U) (Sequences._default.Zip$B@@4 T@U) ($ly@@274 T@U) (|a#0@@84| T@U) (|b#0@@49| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@4) TyType) (= (type Sequences._default.Zip$B@@4) TyType)) (= (type $ly@@274) LayerTypeType)) (= (type |a#0@@84|) (SeqType BoxType))) (= (type |b#0@@49|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit |a#0@@84|) (Lit |b#0@@49|)) (and (and ($Is |a#0@@84| (TSeq Sequences._default.Zip$A@@4)) ($Is |b#0@@49| (TSeq Sequences._default.Zip$B@@4))) (= (|Seq#Length| (Lit |a#0@@84|)) (|Seq#Length| (Lit |b#0@@49|)))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@84|)) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@84|)) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@49|))) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@84|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@49|))))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@84|)) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@49|))))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@274) (Lit |a#0@@84|) (Lit |b#0@@49|)) (ite (= (|Seq#Length| (Lit |a#0@@84|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@274) (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@84|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@49|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#_System._tuple#2._#Make2| (Lit (Sequences.__default.Last Sequences._default.Zip$A@@4 (Lit |a#0@@84|))) (Lit (Sequences.__default.Last Sequences._default.Zip$B@@4 (Lit |b#0@@49|)))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |3980| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@274) (Lit |a#0@@84|) (Lit |b#0@@49|))) ))))
(assert (forall ((arg0@@301 T@U) (arg1@@156 T@U) (arg2@@101 T@U) (arg3@@61 T@U) ) (! (= (type (Sequences.__default.Unzip arg0@@301 arg1@@156 arg2@@101 arg3@@61)) DatatypeTypeType) :qid |funType:Sequences.__default.Unzip| :pattern ( (Sequences.__default.Unzip arg0@@301 arg1@@156 arg2@@101 arg3@@61)) )))
(assert (forall ((Sequences._default.Unzip$A T@U) (Sequences._default.Unzip$B T@U) ($ly@@275 T@U) (|z#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A) TyType) (= (type Sequences._default.Unzip$B) TyType)) (= (type $ly@@275) LayerTypeType)) (= (type |z#0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@275) |z#0|) (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B $ly@@275 |z#0|))) :qid |unknown.0:0| :skolemid |3981| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@275) |z#0|)) )))
(assert (forall ((Sequences._default.Unzip$A@@0 T@U) (Sequences._default.Unzip$B@@0 T@U) ($ly@@276 T@U) (|z#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A@@0) TyType) (= (type Sequences._default.Unzip$B@@0) TyType)) (= (type $ly@@276) LayerTypeType)) (= (type |z#0@@0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $ly@@276 |z#0@@0|) (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $LZ |z#0@@0|))) :qid |unknown.0:0| :skolemid |3982| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 (AsFuelBottom $ly@@276) |z#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@1 T@U) (Sequences._default.Unzip$B@@1 T@U) ($ly@@277 T@U) (|z#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@1) TyType) (= (type Sequences._default.Unzip$B@@1) TyType)) (= (type $ly@@277) LayerTypeType)) (= (type |z#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 |z#0@@1|) ($Is |z#0@@1| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1))))) (and (and (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@277 |z#0@@1|)))) (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@277 |z#0@@1|))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@277 |z#0@@1|)))) (|Seq#Length| |z#0@@1|))) (forall ((|i#0@@68| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@68|) (< |i#0@@68| (|Seq#Length| |z#0@@1|))) (|_System.Tuple2#Equal| (|#_System._tuple#2._#Make2| (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@277 |z#0@@1|))) |i#0@@68|) (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@277 |z#0@@1|))) |i#0@@68|)) ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#0@@68|))))) :qid |sequence.386:20| :skolemid |3983| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#0@@68|))) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@277 |z#0@@1|))) |i#0@@68|)) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@277 |z#0@@1|))) |i#0@@68|)) ))) ($Is (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@277 |z#0@@1|) (Tclass._System.Tuple2 (TSeq Sequences._default.Unzip$A@@1) (TSeq Sequences._default.Unzip$B@@1))))) :qid |unknown.0:0| :skolemid |3984| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@277 |z#0@@1|)) ))))
(assert (forall ((Sequences._default.Unzip$A@@2 T@U) (Sequences._default.Unzip$B@@2 T@U) ($ly@@278 T@U) (|z#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@2) TyType) (= (type Sequences._default.Unzip$B@@2) TyType)) (= (type $ly@@278) LayerTypeType)) (= (type |z#0@@2|) (SeqType BoxType))) ($Is |z#0@@2| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2)))) (and (=> (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@278 |z#0@@2|) true) (=> true (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@278 |z#0@@2|)))) :qid |unknown.0:0| :skolemid |3985| :pattern ( (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@278 |z#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@3 T@U) (Sequences._default.Unzip$B@@3 T@U) ($ly@@279 T@U) (|z#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@3) TyType) (= (type Sequences._default.Unzip$B@@3) TyType)) (= (type $ly@@279) LayerTypeType)) (= (type |z#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 |z#0@@3|) ($Is |z#0@@3| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3))))) (and (=> (not (= (|Seq#Length| |z#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@279) |z#0@@3|) (ite (= (|Seq#Length| |z#0@@3|) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#0@@50| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@279 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (let ((|a#0@@85| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@279 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#0@@85| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) ($Box (|Seq#Append| |b#0@@50| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._1 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))))))))) :qid |unknown.0:0| :skolemid |3986| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@279) |z#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@4 T@U) (Sequences._default.Unzip$B@@4 T@U) ($ly@@280 T@U) (|z#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@4) TyType) (= (type Sequences._default.Unzip$B@@4) TyType)) (= (type $ly@@280) LayerTypeType)) (= (type |z#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit |z#0@@4|)) ($Is |z#0@@4| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4))))) (and (=> (not (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@280) (Lit |z#0@@4|)) (ite (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#1@@1| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@280) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (let ((|a#1@@6| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@280) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#1@@6| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._0 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) ($Box (|Seq#Append| |b#1@@1| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._1 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |3987| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@280) (Lit |z#0@@4|))) ))))
(assert (forall ((arg0@@302 T@U) (arg1@@157 T@U) (arg2@@102 T@U) ) (! (= (type (Sequences.__default.FlattenShape arg0@@302 arg1@@157 arg2@@102)) (SeqType BoxType)) :qid |funType:Sequences.__default.FlattenShape| :pattern ( (Sequences.__default.FlattenShape arg0@@302 arg1@@157 arg2@@102)) )))
(assert (forall ((Sequences._default.FlattenShape$A T@U) ($ly@@281 T@U) (|seqs#0@@11| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A) TyType) (= (type $ly@@281) LayerTypeType)) (= (type |seqs#0@@11|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@281) |seqs#0@@11|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A $ly@@281 |seqs#0@@11|))) :qid |unknown.0:0| :skolemid |3988| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@281) |seqs#0@@11|)) )))
(assert (forall ((Sequences._default.FlattenShape$A@@0 T@U) ($ly@@282 T@U) (|seqs#0@@12| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A@@0) TyType) (= (type $ly@@282) LayerTypeType)) (= (type |seqs#0@@12|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $ly@@282 |seqs#0@@12|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $LZ |seqs#0@@12|))) :qid |unknown.0:0| :skolemid |3989| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 (AsFuelBottom $ly@@282) |seqs#0@@12|)) )))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@1 T@U) ($ly@@283 T@U) (|seqs#0@@13| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@1) TyType) (= (type $ly@@283) LayerTypeType)) (= (type |seqs#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@1 |seqs#0@@13|) ($Is |seqs#0@@13| (TSeq (TSeq Sequences._default.FlattenShape$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@283 |seqs#0@@13|)) (|Seq#Length| |seqs#0@@13|)) (forall ((|i#0@@69| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@69|) (< |i#0@@69| (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@283 |seqs#0@@13|)))) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@283 |seqs#0@@13|) |i#0@@69|))) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@13| |i#0@@69|)))))) :qid |sequence.408:20| :skolemid |3990| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@13| |i#0@@69|))) :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@283 |seqs#0@@13|) |i#0@@69|))) ))) ($Is (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@283 |seqs#0@@13|) (TSeq Tclass._System.nat)))) :qid |unknown.0:0| :skolemid |3991| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@283 |seqs#0@@13|)) ))))
(assert (forall ((Sequences._default.FlattenShape$A@@2 T@U) ($ly@@284 T@U) (|seqs#0@@14| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@2) TyType) (= (type $ly@@284) LayerTypeType)) (= (type |seqs#0@@14|) (SeqType BoxType))) ($Is |seqs#0@@14| (TSeq (TSeq Sequences._default.FlattenShape$A@@2)))) (and (=> (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@284 |seqs#0@@14|) true) (=> true (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@284 |seqs#0@@14|)))) :qid |unknown.0:0| :skolemid |3992| :pattern ( (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@284 |seqs#0@@14|)) )))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@3 T@U) ($ly@@285 T@U) (|seqs#0@@15| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@3) TyType) (= (type $ly@@285) LayerTypeType)) (= (type |seqs#0@@15|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 |seqs#0@@15|) ($Is |seqs#0@@15| (TSeq (TSeq Sequences._default.FlattenShape$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@15|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@15|) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@15|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@15|))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@285) |seqs#0@@15|) (ite (= (|Seq#Length| |seqs#0@@15|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 $ly@@285 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@15|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@15|))))))))))) :qid |unknown.0:0| :skolemid |3993| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@285) |seqs#0@@15|)) ))))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@4 T@U) ($ly@@286 T@U) (|seqs#0@@16| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@4) TyType) (= (type $ly@@286) LayerTypeType)) (= (type |seqs#0@@16|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit |seqs#0@@16|)) ($Is |seqs#0@@16| (TSeq (TSeq Sequences._default.FlattenShape$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@16|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@16|)) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@16|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@16|)))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@286) (Lit |seqs#0@@16|)) (ite (= (|Seq#Length| (Lit |seqs#0@@16|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@286) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@16|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@16|))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |3994| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@286) (Lit |seqs#0@@16|))) ))))
(assert (forall (($ly@@287 T@U) (|shape#0| T@U) ) (!  (=> (and (= (type $ly@@287) LayerTypeType) (= (type |shape#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength ($LS $ly@@287) |shape#0|) (Sequences.__default.FlattenLength $ly@@287 |shape#0|))) :qid |sequence.419:22| :skolemid |3995| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@287) |shape#0|)) )))
(assert (forall (($ly@@288 T@U) (|shape#0@@0| T@U) ) (!  (=> (and (= (type $ly@@288) LayerTypeType) (= (type |shape#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength $ly@@288 |shape#0@@0|) (Sequences.__default.FlattenLength $LZ |shape#0@@0|))) :qid |sequence.419:22| :skolemid |3996| :pattern ( (Sequences.__default.FlattenLength (AsFuelBottom $ly@@288) |shape#0@@0|)) )))
(assert  (=> true (forall (($ly@@289 T@U) (|shape#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@289) LayerTypeType) (= (type |shape#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@1|) ($Is |shape#0@@1| (TSeq Tclass._System.nat)))) (and (=> (= (|Seq#Length| |shape#0@@1|) (LitInt 0)) (= (Sequences.__default.FlattenLength $ly@@289 |shape#0@@1|) (LitInt 0))) (<= (LitInt 0) (Sequences.__default.FlattenLength $ly@@289 |shape#0@@1|)))) :qid |sequence.419:22| :skolemid |3997| :pattern ( (Sequences.__default.FlattenLength $ly@@289 |shape#0@@1|)) ))))
(assert (forall (($ly@@290 T@U) (|shape#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@290) LayerTypeType) (= (type |shape#0@@2|) (SeqType BoxType))) ($Is |shape#0@@2| (TSeq Tclass._System.nat))) (and (=> (|Sequences.__default.FlattenLength#requires| $ly@@290 |shape#0@@2|) true) (=> true (|Sequences.__default.FlattenLength#requires| $ly@@290 |shape#0@@2|)))) :qid |sequence.419:22| :skolemid |3998| :pattern ( (|Sequences.__default.FlattenLength#requires| $ly@@290 |shape#0@@2|)) )))
(assert  (=> true (forall (($ly@@291 T@U) (|shape#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@291) LayerTypeType) (= (type |shape#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@3|) ($Is |shape#0@@3| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| |shape#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@3|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|))) (|Sequences.__default.Last#canCall| Tclass._System.nat |shape#0@@3|))) (= (Sequences.__default.FlattenLength ($LS $ly@@291) |shape#0@@3|) (ite (= (|Seq#Length| |shape#0@@3|) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength $ly@@291 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|)) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat |shape#0@@3|)))))))) :qid |sequence.419:22| :skolemid |3999| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@291) |shape#0@@3|)) ))))
(assert  (=> true (forall (($ly@@292 T@U) (|shape#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@292) LayerTypeType) (= (type |shape#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| (Lit |shape#0@@4|)) ($Is |shape#0@@4| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@4|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|))))) (|Sequences.__default.Last#canCall| Tclass._System.nat (Lit |shape#0@@4|)))) (= (Sequences.__default.FlattenLength ($LS $ly@@292) (Lit |shape#0@@4|)) (ite (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength ($LS $ly@@292) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|)))) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat (Lit |shape#0@@4|))))))))) :qid |sequence.419:22| :weight 3 :skolemid |4000| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@292) (Lit |shape#0@@4|))) ))))
(assert (forall ((arg0@@303 T@U) (arg1@@158 T@U) (arg2@@103 T@U) ) (! (= (type (Sequences.__default.Flatten arg0@@303 arg1@@158 arg2@@103)) (SeqType BoxType)) :qid |funType:Sequences.__default.Flatten| :pattern ( (Sequences.__default.Flatten arg0@@303 arg1@@158 arg2@@103)) )))
(assert (forall ((Sequences._default.Flatten$A T@U) ($ly@@293 T@U) (|seqs#0@@17| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A) TyType) (= (type $ly@@293) LayerTypeType)) (= (type |seqs#0@@17|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@293) |seqs#0@@17|) (Sequences.__default.Flatten Sequences._default.Flatten$A $ly@@293 |seqs#0@@17|))) :qid |unknown.0:0| :skolemid |4001| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@293) |seqs#0@@17|)) )))
(assert (forall ((Sequences._default.Flatten$A@@0 T@U) ($ly@@294 T@U) (|seqs#0@@18| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A@@0) TyType) (= (type $ly@@294) LayerTypeType)) (= (type |seqs#0@@18|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $ly@@294 |seqs#0@@18|) (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $LZ |seqs#0@@18|))) :qid |unknown.0:0| :skolemid |4002| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 (AsFuelBottom $ly@@294) |seqs#0@@18|)) )))
(assert  (and (= (type StartFuel_Sequences._default.FlattenLength) LayerTypeType) (= (type StartFuel_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@1 T@U) ($ly@@295 T@U) (|seqs#0@@19| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@1) TyType) (= (type $ly@@295) LayerTypeType)) (= (type |seqs#0@@19|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@1 |seqs#0@@19|) ($Is |seqs#0@@19| (TSeq (TSeq Sequences._default.Flatten$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@295 |seqs#0@@19|)) (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.FlattenShape Sequences._default.Flatten$A@@1 StartFuel_Sequences._default.FlattenShape |seqs#0@@19|))) (=> (= (|Seq#Length| |seqs#0@@19|) (LitInt 0)) (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@295 |seqs#0@@19|)) (LitInt 0)))) ($Is (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@295 |seqs#0@@19|) (TSeq Sequences._default.Flatten$A@@1)))) :qid |unknown.0:0| :skolemid |4003| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@295 |seqs#0@@19|)) ))))
(assert (forall ((Sequences._default.Flatten$A@@2 T@U) ($ly@@296 T@U) (|seqs#0@@20| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@2) TyType) (= (type $ly@@296) LayerTypeType)) (= (type |seqs#0@@20|) (SeqType BoxType))) ($Is |seqs#0@@20| (TSeq (TSeq Sequences._default.Flatten$A@@2)))) (and (=> (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@296 |seqs#0@@20|) true) (=> true (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@296 |seqs#0@@20|)))) :qid |unknown.0:0| :skolemid |4004| :pattern ( (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@296 |seqs#0@@20|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenShape0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@3 T@U) ($ly@@297 T@U) (|seqs#0@@21| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@3) TyType) (= (type $ly@@297) LayerTypeType)) (= (type |seqs#0@@21|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 |seqs#0@@21|) ($Is |seqs#0@@21| (TSeq (TSeq Sequences._default.Flatten$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@21|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@21|) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@21|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@21|))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape0)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape0)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape0) MoreFuel_Sequences._default.FlattenShape0)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@297) |seqs#0@@21|) (ite (= (|Seq#Length| |seqs#0@@21|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 $ly@@297 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@21|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@21|)))))))) :qid |unknown.0:0| :skolemid |4005| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@297) |seqs#0@@21|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenShape1) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@4 T@U) ($ly@@298 T@U) (|seqs#0@@22| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@4) TyType) (= (type $ly@@298) LayerTypeType)) (= (type |seqs#0@@22|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit |seqs#0@@22|)) ($Is |seqs#0@@22| (TSeq (TSeq Sequences._default.Flatten$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@22|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@22|)) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@22|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@22|)))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape1)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape1)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape1) MoreFuel_Sequences._default.FlattenShape1)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@298) (Lit |seqs#0@@22|)) (ite (= (|Seq#Length| (Lit |seqs#0@@22|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@298) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@22|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@22|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |4006| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@298) (Lit |seqs#0@@22|))) ))))
(assert  (=> true (forall ((|shape#0@@5| T@U) (|i#0@@70| Int) (|j#0@@2| Int) ) (!  (=> (and (= (type |shape#0@@5|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@5| |i#0@@70| |j#0@@2|) (and (and (and ($Is |shape#0@@5| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@70|)) (<= (LitInt 0) |j#0@@2|)) (and (< |i#0@@70| (|Seq#Length| |shape#0@@5|)) (< |j#0@@2| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@5| |i#0@@70|)))))))) (<= (LitInt 0) (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@70| |j#0@@2|))) :qid |sequence.488:25| :skolemid |4007| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@70| |j#0@@2|)) ))))
(assert (forall ((|shape#0@@6| T@U) (|i#0@@71| Int) (|j#0@@3| Int) ) (!  (=> (= (type |shape#0@@6|) (SeqType BoxType)) (=> (and (and ($Is |shape#0@@6| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@71|)) (<= (LitInt 0) |j#0@@3|)) (and (=> (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@71| |j#0@@3|) (and (< |i#0@@71| (|Seq#Length| |shape#0@@6|)) (< |j#0@@3| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@6| |i#0@@71|)))))) (=> (and (< |i#0@@71| (|Seq#Length| |shape#0@@6|)) (< |j#0@@3| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@6| |i#0@@71|))))) (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@71| |j#0@@3|))))) :qid |sequence.488:25| :skolemid |4008| :pattern ( (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@71| |j#0@@3|)) )))
(assert  (=> true (forall ((|shape#0@@7| T@U) (|i#0@@72| Int) (|j#0@@4| Int) ) (!  (=> (and (= (type |shape#0@@7|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@7| |i#0@@72| |j#0@@4|) (and (and (and ($Is |shape#0@@7| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@72|)) (<= (LitInt 0) |j#0@@4|)) (and (< |i#0@@72| (|Seq#Length| |shape#0@@7|)) (< |j#0@@4| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@7| |i#0@@72|)))))))) (and (|Sequences.__default.FlattenLength#canCall| (|Seq#Take| |shape#0@@7| |i#0@@72|)) (= (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@72| |j#0@@4|) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (|Seq#Take| |shape#0@@7| |i#0@@72|)) |j#0@@4|)))) :qid |sequence.488:25| :skolemid |4009| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@72| |j#0@@4|)) ))))
(assert  (=> true (forall ((|shape#0@@8| T@U) (|i#0@@73| Int) (|j#0@@5| Int) ) (!  (=> (and (= (type |shape#0@@8|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| (Lit |shape#0@@8|) (LitInt |i#0@@73|) (LitInt |j#0@@5|)) (and (and (and ($Is |shape#0@@8| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@73|)) (<= (LitInt 0) |j#0@@5|)) (and (< |i#0@@73| (|Seq#Length| (Lit |shape#0@@8|))) (< |j#0@@5| (U_2_int ($Unbox intType (|Seq#Index| (Lit |shape#0@@8|) (LitInt |i#0@@73|))))))))) (and (|Sequences.__default.FlattenLength#canCall| (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@73|)))) (= (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@73|) (LitInt |j#0@@5|)) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@73|)))) |j#0@@5|)))) :qid |sequence.488:25| :weight 3 :skolemid |4010| :pattern ( (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@73|) (LitInt |j#0@@5|))) ))))
(assert (forall ((arg0@@304 T@U) (arg1@@159 T@U) (arg2@@104 Int) ) (! (= (type (Sequences.__default.UnflattenIndex arg0@@304 arg1@@159 arg2@@104)) DatatypeTypeType) :qid |funType:Sequences.__default.UnflattenIndex| :pattern ( (Sequences.__default.UnflattenIndex arg0@@304 arg1@@159 arg2@@104)) )))
(assert (forall (($ly@@299 T@U) (|shape#0@@9| T@U) (|i#0@@74| Int) ) (!  (=> (and (= (type $ly@@299) LayerTypeType) (= (type |shape#0@@9|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex ($LS $ly@@299) |shape#0@@9| |i#0@@74|) (Sequences.__default.UnflattenIndex $ly@@299 |shape#0@@9| |i#0@@74|))) :qid |sequence.495:12| :skolemid |4011| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@299) |shape#0@@9| |i#0@@74|)) )))
(assert (forall (($ly@@300 T@U) (|shape#0@@10| T@U) (|i#0@@75| Int) ) (!  (=> (and (= (type $ly@@300) LayerTypeType) (= (type |shape#0@@10|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex $ly@@300 |shape#0@@10| |i#0@@75|) (Sequences.__default.UnflattenIndex $LZ |shape#0@@10| |i#0@@75|))) :qid |sequence.495:12| :skolemid |4012| :pattern ( (Sequences.__default.UnflattenIndex (AsFuelBottom $ly@@300) |shape#0@@10| |i#0@@75|)) )))
(assert  (=> true (forall (($ly@@301 T@U) (|shape#0@@11| T@U) (|i#0@@76| Int) ) (!  (=> (and (and (= (type $ly@@301) LayerTypeType) (= (type |shape#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@11| |i#0@@76|) (and (and ($Is |shape#0@@11| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@76|)) (< |i#0@@76| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@11|))))) ($Is (Sequences.__default.UnflattenIndex $ly@@301 |shape#0@@11| |i#0@@76|) (Tclass._System.Tuple2 Tclass._System.nat Tclass._System.nat))) :qid |sequence.495:12| :skolemid |4013| :pattern ( (Sequences.__default.UnflattenIndex $ly@@301 |shape#0@@11| |i#0@@76|)) ))))
(assert (forall (($ly@@302 T@U) (|shape#0@@12| T@U) (|i#0@@77| Int) ) (!  (=> (and (and (= (type $ly@@302) LayerTypeType) (= (type |shape#0@@12|) (SeqType BoxType))) (and ($Is |shape#0@@12| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@77|))) (and (=> (|Sequences.__default.UnflattenIndex#requires| $ly@@302 |shape#0@@12| |i#0@@77|) (< |i#0@@77| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@12|))) (=> (< |i#0@@77| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@12|)) (|Sequences.__default.UnflattenIndex#requires| $ly@@302 |shape#0@@12| |i#0@@77|)))) :qid |sequence.495:12| :skolemid |4014| :pattern ( (|Sequences.__default.UnflattenIndex#requires| $ly@@302 |shape#0@@12| |i#0@@77|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenLength0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenLength) LayerTypeType)))
(assert  (=> true (forall (($ly@@303 T@U) (|shape#0@@13| T@U) (|i#0@@78| Int) ) (!  (=> (and (and (= (type $ly@@303) LayerTypeType) (= (type |shape#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@13| |i#0@@78|) (and (and ($Is |shape#0@@13| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@78|)) (< |i#0@@78| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@13|))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (=> (< |i#0@@78| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.UnflattenIndex#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@78|)))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|)) |i#0@@78|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength0)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength0)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength0) MoreFuel_Sequences._default.FlattenLength0)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@303) |shape#0@@13| |i#0@@78|) (ite (< |i#0@@78| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (Sequences.__default.UnflattenIndex $ly@@303 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@78|) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| |shape#0@@13|) 1))) ($Box (int_2_U (- |i#0@@78| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))))))))) :qid |sequence.495:12| :skolemid |4015| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@303) |shape#0@@13| |i#0@@78|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenLength1) LayerTypeType))
(assert  (=> true (forall (($ly@@304 T@U) (|shape#0@@14| T@U) (|i#0@@79| Int) ) (!  (=> (and (and (= (type $ly@@304) LayerTypeType) (= (type |shape#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| (Lit |shape#0@@14|) (LitInt |i#0@@79|)) (and (and ($Is |shape#0@@14| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@79|)) (< |i#0@@79| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit |shape#0@@14|)))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (=> (< |i#0@@79| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.UnflattenIndex#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@79|))))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|)))) |i#0@@79|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength1)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength1)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength1) MoreFuel_Sequences._default.FlattenLength1)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@304) (Lit |shape#0@@14|) (LitInt |i#0@@79|)) (ite (< |i#0@@79| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (Sequences.__default.UnflattenIndex ($LS $ly@@304) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@79|)) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| (Lit |shape#0@@14|)) 1))) ($Box (int_2_U (- |i#0@@79| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))))))))) :qid |sequence.495:12| :weight 3 :skolemid |4016| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@304) (Lit |shape#0@@14|) (LitInt |i#0@@79|))) ))))
(assert (forall ((arg0@@305 T@U) (arg1@@160 T@U) (arg2@@105 Int) (arg3@@62 T@U) ) (! (= (type (Sequences.__default.fill arg0@@305 arg1@@160 arg2@@105 arg3@@62)) (SeqType BoxType)) :qid |funType:Sequences.__default.fill| :pattern ( (Sequences.__default.fill arg0@@305 arg1@@160 arg2@@105 arg3@@62)) )))
(assert (forall ((Sequences._default.fill$T T@U) ($ly@@305 T@U) (|n#0@@5| Int) (|t#0@@17| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T) TyType) (= (type $ly@@305) LayerTypeType)) (= (type |t#0@@17|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@305) |n#0@@5| |t#0@@17|) (Sequences.__default.fill Sequences._default.fill$T $ly@@305 |n#0@@5| |t#0@@17|))) :qid |unknown.0:0| :skolemid |4017| :pattern ( (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@305) |n#0@@5| |t#0@@17|)) )))
(assert (forall ((Sequences._default.fill$T@@0 T@U) ($ly@@306 T@U) (|n#0@@6| Int) (|t#0@@18| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T@@0) TyType) (= (type $ly@@306) LayerTypeType)) (= (type |t#0@@18|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T@@0 $ly@@306 |n#0@@6| |t#0@@18|) (Sequences.__default.fill Sequences._default.fill$T@@0 $LZ |n#0@@6| |t#0@@18|))) :qid |unknown.0:0| :skolemid |4018| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@0 (AsFuelBottom $ly@@306) |n#0@@6| |t#0@@18|)) )))
(assert  (=> true (forall ((Sequences._default.fill$T@@1 T@U) ($ly@@307 T@U) (|n#0@@7| Int) (|t#0@@19| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@1) TyType) (= (type $ly@@307) LayerTypeType)) (= (type |t#0@@19|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@1 |n#0@@7| |t#0@@19|) (and ($IsBox |t#0@@19| Sequences._default.fill$T@@1) (>= |n#0@@7| (LitInt 0))))) (and (and (= (|Seq#Length| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@307 |n#0@@7| |t#0@@19|)) |n#0@@7|) (forall ((|i#0@@80| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@80|) (< |i#0@@80| |n#0@@7|)) (= (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@307 |n#0@@7| |t#0@@19|) |i#0@@80|) |t#0@@19|)) :qid |sequence.680:18| :skolemid |4019| :pattern ( (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@307 |n#0@@7| |t#0@@19|) |i#0@@80|)) ))) ($Is (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@307 |n#0@@7| |t#0@@19|) (TSeq Sequences._default.fill$T@@1)))) :qid |unknown.0:0| :skolemid |4020| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@307 |n#0@@7| |t#0@@19|)) ))))
(assert (forall ((Sequences._default.fill$T@@2 T@U) ($ly@@308 T@U) (|n#0@@8| Int) (|t#0@@20| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@2) TyType) (= (type $ly@@308) LayerTypeType)) (= (type |t#0@@20|) BoxType)) ($IsBox |t#0@@20| Sequences._default.fill$T@@2)) (and (=> (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@308 |n#0@@8| |t#0@@20|) (>= |n#0@@8| (LitInt 0))) (=> (>= |n#0@@8| (LitInt 0)) (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@308 |n#0@@8| |t#0@@20|)))) :qid |unknown.0:0| :skolemid |4021| :pattern ( (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@308 |n#0@@8| |t#0@@20|)) )))
(assert  (=> true (forall ((Sequences._default.fill$T@@3 T@U) ($ly@@309 T@U) (|n#0@@9| Int) (|t#0@@21| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@3) TyType) (= (type $ly@@309) LayerTypeType)) (= (type |t#0@@21|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 |n#0@@9| |t#0@@21|) (and ($IsBox |t#0@@21| Sequences._default.fill$T@@3) (>= |n#0@@9| (LitInt 0))))) (and (=> (not (= |n#0@@9| (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 (- |n#0@@9| 1) |t#0@@21|)) (= (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@309) |n#0@@9| |t#0@@21|) (ite (= |n#0@@9| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@3 $ly@@309 (- |n#0@@9| 1) |t#0@@21|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@21|)))))) :qid |unknown.0:0| :skolemid |4022| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@309) |n#0@@9| |t#0@@21|)) ))))
(assert  (=> true (forall ((Sequences._default.fill$T@@4 T@U) ($ly@@310 T@U) (|n#0@@10| Int) (|t#0@@22| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@4) TyType) (= (type $ly@@310) LayerTypeType)) (= (type |t#0@@22|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt |n#0@@10|) |t#0@@22|) (and ($IsBox |t#0@@22| Sequences._default.fill$T@@4) (>= (LitInt |n#0@@10|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@10|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt (- |n#0@@10| 1)) |t#0@@22|)) (= (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@310) (LitInt |n#0@@10|) |t#0@@22|) (ite (= (LitInt |n#0@@10|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@310) (LitInt (- |n#0@@10| 1)) |t#0@@22|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@22|)))))) :qid |unknown.0:0| :weight 3 :skolemid |4023| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@310) (LitInt |n#0@@10|) |t#0@@22|)) ))))
(assert  (=> true (forall ((Sequences._default.fill$T@@5 T@U) ($ly@@311 T@U) (|n#0@@11| Int) (|t#0@@23| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@5) TyType) (= (type $ly@@311) LayerTypeType)) (= (type |t#0@@23|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt |n#0@@11|) (Lit |t#0@@23|)) (and ($IsBox |t#0@@23| Sequences._default.fill$T@@5) (>= (LitInt |n#0@@11|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@11|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt (- |n#0@@11| 1)) (Lit |t#0@@23|))) (= (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@311) (LitInt |n#0@@11|) (Lit |t#0@@23|)) (ite (= (LitInt |n#0@@11|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@311) (LitInt (- |n#0@@11| 1)) (Lit |t#0@@23|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@23|))))))) :qid |unknown.0:0| :weight 3 :skolemid |4024| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@311) (LitInt |n#0@@11|) (Lit |t#0@@23|))) ))))
(assert  (and (and (and (and (and (and (and (forall ((arg0@@306 T@T) (arg1@@161 T@T) ) (! (= (Ctor (MapType6Type arg0@@306 arg1@@161)) 25) :qid |ctor:MapType6Type| )) (forall ((arg0@@307 T@T) (arg1@@162 T@T) ) (! (= (MapType6TypeInv0 (MapType6Type arg0@@307 arg1@@162)) arg0@@307) :qid |typeInv:MapType6TypeInv0| :pattern ( (MapType6Type arg0@@307 arg1@@162)) ))) (forall ((arg0@@308 T@T) (arg1@@163 T@T) ) (! (= (MapType6TypeInv1 (MapType6Type arg0@@308 arg1@@163)) arg1@@163) :qid |typeInv:MapType6TypeInv1| :pattern ( (MapType6Type arg0@@308 arg1@@163)) ))) (forall ((arg0@@309 T@U) (arg1@@164 T@U) (arg2@@106 T@U) ) (! (let ((aVar1@@6 (MapType6TypeInv1 (type arg0@@309)))) (= (type (MapType6Select arg0@@309 arg1@@164 arg2@@106)) aVar1@@6)) :qid |funType:MapType6Select| :pattern ( (MapType6Select arg0@@309 arg1@@164 arg2@@106)) ))) (forall ((arg0@@310 T@U) (arg1@@165 T@U) (arg2@@107 T@U) (arg3@@63 T@U) ) (! (let ((aVar1@@7 (type arg3@@63))) (let ((aVar0@@4 (type arg1@@165))) (= (type (MapType6Store arg0@@310 arg1@@165 arg2@@107 arg3@@63)) (MapType6Type aVar0@@4 aVar1@@7)))) :qid |funType:MapType6Store| :pattern ( (MapType6Store arg0@@310 arg1@@165 arg2@@107 arg3@@63)) ))) (forall ((m@@49 T@U) (x0@@27 T@U) (x1@@21 T@U) (val@@28 T@U) ) (! (let ((aVar1@@8 (MapType6TypeInv1 (type m@@49)))) (=> (= (type val@@28) aVar1@@8) (= (MapType6Select (MapType6Store m@@49 x0@@27 x1@@21 val@@28) x0@@27 x1@@21) val@@28))) :qid |mapAx0:MapType6Select| :weight 0 ))) (and (and (forall ((val@@29 T@U) (m@@50 T@U) (x0@@28 T@U) (x1@@22 T@U) (y0@@21 T@U) (y1@@17 T@U) ) (!  (or (= x0@@28 y0@@21) (= (MapType6Select (MapType6Store m@@50 x0@@28 x1@@22 val@@29) y0@@21 y1@@17) (MapType6Select m@@50 y0@@21 y1@@17))) :qid |mapAx1:MapType6Select:0| :weight 0 )) (forall ((val@@30 T@U) (m@@51 T@U) (x0@@29 T@U) (x1@@23 T@U) (y0@@22 T@U) (y1@@18 T@U) ) (!  (or (= x1@@23 y1@@18) (= (MapType6Select (MapType6Store m@@51 x0@@29 x1@@23 val@@30) y0@@22 y1@@18) (MapType6Select m@@51 y0@@22 y1@@18))) :qid |mapAx1:MapType6Select:1| :weight 0 ))) (forall ((val@@31 T@U) (m@@52 T@U) (x0@@30 T@U) (x1@@24 T@U) (y0@@23 T@U) (y1@@19 T@U) ) (!  (or true (= (MapType6Select (MapType6Store m@@52 x0@@30 x1@@24 val@@31) y0@@23 y1@@19) (MapType6Select m@@52 y0@@23 y1@@19))) :qid |mapAx2:MapType6Select| :weight 0 )))) (forall ((arg0@@311 T@U) (arg1@@166 T@U) (arg2@@108 T@U) (arg3@@64 Bool) ) (! (= (type (|lambda#0| arg0@@311 arg1@@166 arg2@@108 arg3@@64)) (MapType6Type refType boolType)) :qid |funType:lambda#0| :pattern ( (|lambda#0| arg0@@311 arg1@@166 arg2@@108 arg3@@64)) ))))
(assert (forall (($o@@38 T@U) ($f@@4 T@U) (|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ) (! (let ((alpha@@11 (FieldTypeInv0 (type $f@@4)))) (=> (and (and (and (and (= (type $o@@38) refType) (= (type $f@@4) (FieldType alpha@@11))) (= (type |l#0|) refType)) (= (type |l#1|) (MapType0Type refType MapType1Type))) (= (type |l#2|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@38 $f@@4))  (=> (and (not (= $o@@38 |l#0|)) (U_2_bool (MapType1Select (MapType0Select |l#1| $o@@38) |l#2|))) |l#3|)))) :qid |GenericM.52:11| :skolemid |4025| :pattern ( (MapType6Select (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@38 $f@@4)) )))
(assert (forall ((arg0@@312 T@U) (arg1@@167 T@U) (arg2@@109 T@U) (arg3@@65 Bool) ) (! (= (type (|lambda#1| arg0@@312 arg1@@167 arg2@@109 arg3@@65)) (MapType6Type refType boolType)) :qid |funType:lambda#1| :pattern ( (|lambda#1| arg0@@312 arg1@@167 arg2@@109 arg3@@65)) )))
(assert (forall (($o@@39 T@U) ($f@@5 T@U) (|l#0@@0| T@U) (|l#1@@0| T@U) (|l#2@@0| T@U) (|l#3@@0| Bool) ) (! (let ((alpha@@12 (FieldTypeInv0 (type $f@@5)))) (=> (and (and (and (and (= (type $o@@39) refType) (= (type $f@@5) (FieldType alpha@@12))) (= (type |l#0@@0|) refType)) (= (type |l#1@@0|) (MapType0Type refType MapType1Type))) (= (type |l#2@@0|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#1| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@39 $f@@5))  (=> (and (not (= $o@@39 |l#0@@0|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@0| $o@@39) |l#2@@0|))) |l#3@@0|)))) :qid |GenericM.52:11| :skolemid |4026| :pattern ( (MapType6Select (|lambda#1| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@39 $f@@5)) )))
(assert (forall ((arg0@@313 T@U) (arg1@@168 T@U) (arg2@@110 T@U) (arg3@@66 Bool) ) (! (= (type (|lambda#2| arg0@@313 arg1@@168 arg2@@110 arg3@@66)) (MapType6Type refType boolType)) :qid |funType:lambda#2| :pattern ( (|lambda#2| arg0@@313 arg1@@168 arg2@@110 arg3@@66)) )))
(assert (forall (($o@@40 T@U) ($f@@6 T@U) (|l#0@@1| T@U) (|l#1@@1| T@U) (|l#2@@1| T@U) (|l#3@@1| Bool) ) (! (let ((alpha@@13 (FieldTypeInv0 (type $f@@6)))) (=> (and (and (and (and (= (type $o@@40) refType) (= (type $f@@6) (FieldType alpha@@13))) (= (type |l#0@@1|) refType)) (= (type |l#1@@1|) (MapType0Type refType MapType1Type))) (= (type |l#2@@1|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#2| |l#0@@1| |l#1@@1| |l#2@@1| |l#3@@1|) $o@@40 $f@@6))  (=> (and (not (= $o@@40 |l#0@@1|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@1| $o@@40) |l#2@@1|))) |l#3@@1|)))) :qid |GenericM.67:11| :skolemid |4027| :pattern ( (MapType6Select (|lambda#2| |l#0@@1| |l#1@@1| |l#2@@1| |l#3@@1|) $o@@40 $f@@6)) )))
(assert (forall ((arg0@@314 T@U) (arg1@@169 T@U) (arg2@@111 T@U) (arg3@@67 Bool) ) (! (= (type (|lambda#3| arg0@@314 arg1@@169 arg2@@111 arg3@@67)) (MapType6Type refType boolType)) :qid |funType:lambda#3| :pattern ( (|lambda#3| arg0@@314 arg1@@169 arg2@@111 arg3@@67)) )))
(assert (forall (($o@@41 T@U) ($f@@7 T@U) (|l#0@@2| T@U) (|l#1@@2| T@U) (|l#2@@2| T@U) (|l#3@@2| Bool) ) (! (let ((alpha@@14 (FieldTypeInv0 (type $f@@7)))) (=> (and (and (and (and (= (type $o@@41) refType) (= (type $f@@7) (FieldType alpha@@14))) (= (type |l#0@@2|) refType)) (= (type |l#1@@2|) (MapType0Type refType MapType1Type))) (= (type |l#2@@2|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#3| |l#0@@2| |l#1@@2| |l#2@@2| |l#3@@2|) $o@@41 $f@@7))  (=> (and (not (= $o@@41 |l#0@@2|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@2| $o@@41) |l#2@@2|))) |l#3@@2|)))) :qid |GenericM.67:11| :skolemid |4028| :pattern ( (MapType6Select (|lambda#3| |l#0@@2| |l#1@@2| |l#2@@2| |l#3@@2|) $o@@41 $f@@7)) )))
(assert (forall ((arg0@@315 T@U) (arg1@@170 T@U) (arg2@@112 T@U) (arg3@@68 Bool) ) (! (= (type (|lambda#4| arg0@@315 arg1@@170 arg2@@112 arg3@@68)) (MapType6Type refType boolType)) :qid |funType:lambda#4| :pattern ( (|lambda#4| arg0@@315 arg1@@170 arg2@@112 arg3@@68)) )))
(assert (forall (($o@@42 T@U) ($f@@8 T@U) (|l#0@@3| T@U) (|l#1@@3| T@U) (|l#2@@3| T@U) (|l#3@@3| Bool) ) (! (let ((alpha@@15 (FieldTypeInv0 (type $f@@8)))) (=> (and (and (and (and (= (type $o@@42) refType) (= (type $f@@8) (FieldType alpha@@15))) (= (type |l#0@@3|) refType)) (= (type |l#1@@3|) (MapType0Type refType MapType1Type))) (= (type |l#2@@3|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#4| |l#0@@3| |l#1@@3| |l#2@@3| |l#3@@3|) $o@@42 $f@@8))  (=> (and (not (= $o@@42 |l#0@@3|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@3| $o@@42) |l#2@@3|))) |l#3@@3|)))) :qid |GenericM.81:11| :skolemid |4029| :pattern ( (MapType6Select (|lambda#4| |l#0@@3| |l#1@@3| |l#2@@3| |l#3@@3|) $o@@42 $f@@8)) )))
(assert (forall ((arg0@@316 T@U) (arg1@@171 T@U) (arg2@@113 T@U) (arg3@@69 Bool) ) (! (= (type (|lambda#5| arg0@@316 arg1@@171 arg2@@113 arg3@@69)) (MapType6Type refType boolType)) :qid |funType:lambda#5| :pattern ( (|lambda#5| arg0@@316 arg1@@171 arg2@@113 arg3@@69)) )))
(assert (forall (($o@@43 T@U) ($f@@9 T@U) (|l#0@@4| T@U) (|l#1@@4| T@U) (|l#2@@4| T@U) (|l#3@@4| Bool) ) (! (let ((alpha@@16 (FieldTypeInv0 (type $f@@9)))) (=> (and (and (and (and (= (type $o@@43) refType) (= (type $f@@9) (FieldType alpha@@16))) (= (type |l#0@@4|) refType)) (= (type |l#1@@4|) (MapType0Type refType MapType1Type))) (= (type |l#2@@4|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#5| |l#0@@4| |l#1@@4| |l#2@@4| |l#3@@4|) $o@@43 $f@@9))  (=> (and (not (= $o@@43 |l#0@@4|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@4| $o@@43) |l#2@@4|))) |l#3@@4|)))) :qid |GenericM.81:11| :skolemid |4030| :pattern ( (MapType6Select (|lambda#5| |l#0@@4| |l#1@@4| |l#2@@4| |l#3@@4|) $o@@43 $f@@9)) )))
(assert (forall ((arg0@@317 T@U) (arg1@@172 T@U) (arg2@@114 T@U) (arg3@@70 Bool) ) (! (= (type (|lambda#6| arg0@@317 arg1@@172 arg2@@114 arg3@@70)) (MapType6Type refType boolType)) :qid |funType:lambda#6| :pattern ( (|lambda#6| arg0@@317 arg1@@172 arg2@@114 arg3@@70)) )))
(assert (forall (($o@@44 T@U) ($f@@10 T@U) (|l#0@@5| T@U) (|l#1@@5| T@U) (|l#2@@5| T@U) (|l#3@@5| Bool) ) (! (let ((alpha@@17 (FieldTypeInv0 (type $f@@10)))) (=> (and (and (and (and (= (type $o@@44) refType) (= (type $f@@10) (FieldType alpha@@17))) (= (type |l#0@@5|) refType)) (= (type |l#1@@5|) (MapType0Type refType MapType1Type))) (= (type |l#2@@5|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#6| |l#0@@5| |l#1@@5| |l#2@@5| |l#3@@5|) $o@@44 $f@@10))  (=> (and (not (= $o@@44 |l#0@@5|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@5| $o@@44) |l#2@@5|))) |l#3@@5|)))) :qid |GenericM.95:20| :skolemid |4031| :pattern ( (MapType6Select (|lambda#6| |l#0@@5| |l#1@@5| |l#2@@5| |l#3@@5|) $o@@44 $f@@10)) )))
(assert (forall ((arg0@@318 T@U) (arg1@@173 T@U) (arg2@@115 T@U) (arg3@@71 Bool) ) (! (= (type (|lambda#7| arg0@@318 arg1@@173 arg2@@115 arg3@@71)) (MapType6Type refType boolType)) :qid |funType:lambda#7| :pattern ( (|lambda#7| arg0@@318 arg1@@173 arg2@@115 arg3@@71)) )))
(assert (forall (($o@@45 T@U) ($f@@11 T@U) (|l#0@@6| T@U) (|l#1@@6| T@U) (|l#2@@6| T@U) (|l#3@@6| Bool) ) (! (let ((alpha@@18 (FieldTypeInv0 (type $f@@11)))) (=> (and (and (and (and (= (type $o@@45) refType) (= (type $f@@11) (FieldType alpha@@18))) (= (type |l#0@@6|) refType)) (= (type |l#1@@6|) (MapType0Type refType MapType1Type))) (= (type |l#2@@6|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#7| |l#0@@6| |l#1@@6| |l#2@@6| |l#3@@6|) $o@@45 $f@@11))  (=> (and (not (= $o@@45 |l#0@@6|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@6| $o@@45) |l#2@@6|))) |l#3@@6|)))) :qid |GenericM.95:20| :skolemid |4032| :pattern ( (MapType6Select (|lambda#7| |l#0@@6| |l#1@@6| |l#2@@6| |l#3@@6|) $o@@45 $f@@11)) )))
(assert (forall ((arg0@@319 T@U) (arg1@@174 T@U) (arg2@@116 T@U) (arg3@@72 Bool) ) (! (= (type (|lambda#8| arg0@@319 arg1@@174 arg2@@116 arg3@@72)) (MapType6Type refType boolType)) :qid |funType:lambda#8| :pattern ( (|lambda#8| arg0@@319 arg1@@174 arg2@@116 arg3@@72)) )))
(assert (forall (($o@@46 T@U) ($f@@12 T@U) (|l#0@@7| T@U) (|l#1@@7| T@U) (|l#2@@7| T@U) (|l#3@@7| Bool) ) (! (let ((alpha@@19 (FieldTypeInv0 (type $f@@12)))) (=> (and (and (and (and (= (type $o@@46) refType) (= (type $f@@12) (FieldType alpha@@19))) (= (type |l#0@@7|) refType)) (= (type |l#1@@7|) (MapType0Type refType MapType1Type))) (= (type |l#2@@7|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#8| |l#0@@7| |l#1@@7| |l#2@@7| |l#3@@7|) $o@@46 $f@@12))  (=> (and (not (= $o@@46 |l#0@@7|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@7| $o@@46) |l#2@@7|))) |l#3@@7|)))) :qid |GenericM.102:10| :skolemid |4033| :pattern ( (MapType6Select (|lambda#8| |l#0@@7| |l#1@@7| |l#2@@7| |l#3@@7|) $o@@46 $f@@12)) )))
(assert (forall ((arg0@@320 T@U) (arg1@@175 T@U) (arg2@@117 T@U) (arg3@@73 Bool) ) (! (= (type (|lambda#9| arg0@@320 arg1@@175 arg2@@117 arg3@@73)) (MapType6Type refType boolType)) :qid |funType:lambda#9| :pattern ( (|lambda#9| arg0@@320 arg1@@175 arg2@@117 arg3@@73)) )))
(assert (forall (($o@@47 T@U) ($f@@13 T@U) (|l#0@@8| T@U) (|l#1@@8| T@U) (|l#2@@8| T@U) (|l#3@@8| Bool) ) (! (let ((alpha@@20 (FieldTypeInv0 (type $f@@13)))) (=> (and (and (and (and (= (type $o@@47) refType) (= (type $f@@13) (FieldType alpha@@20))) (= (type |l#0@@8|) refType)) (= (type |l#1@@8|) (MapType0Type refType MapType1Type))) (= (type |l#2@@8|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#9| |l#0@@8| |l#1@@8| |l#2@@8| |l#3@@8|) $o@@47 $f@@13))  (=> (and (not (= $o@@47 |l#0@@8|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@8| $o@@47) |l#2@@8|))) |l#3@@8|)))) :qid |GenericM.102:10| :skolemid |4034| :pattern ( (MapType6Select (|lambda#9| |l#0@@8| |l#1@@8| |l#2@@8| |l#3@@8|) $o@@47 $f@@13)) )))
(assert (forall ((arg0@@321 T@U) (arg1@@176 T@U) (arg2@@118 T@U) (arg3@@74 Bool) ) (! (= (type (|lambda#10| arg0@@321 arg1@@176 arg2@@118 arg3@@74)) (MapType6Type refType boolType)) :qid |funType:lambda#10| :pattern ( (|lambda#10| arg0@@321 arg1@@176 arg2@@118 arg3@@74)) )))
(assert (forall (($o@@48 T@U) ($f@@14 T@U) (|l#0@@9| T@U) (|l#1@@9| T@U) (|l#2@@9| T@U) (|l#3@@9| Bool) ) (! (let ((alpha@@21 (FieldTypeInv0 (type $f@@14)))) (=> (and (and (and (and (= (type $o@@48) refType) (= (type $f@@14) (FieldType alpha@@21))) (= (type |l#0@@9|) refType)) (= (type |l#1@@9|) (MapType0Type refType MapType1Type))) (= (type |l#2@@9|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#10| |l#0@@9| |l#1@@9| |l#2@@9| |l#3@@9|) $o@@48 $f@@14))  (=> (and (not (= $o@@48 |l#0@@9|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@9| $o@@48) |l#2@@9|))) |l#3@@9|)))) :qid |GenericM.116:10| :skolemid |4035| :pattern ( (MapType6Select (|lambda#10| |l#0@@9| |l#1@@9| |l#2@@9| |l#3@@9|) $o@@48 $f@@14)) )))
(assert (forall ((arg0@@322 T@U) (arg1@@177 T@U) (arg2@@119 T@U) (arg3@@75 Bool) ) (! (= (type (|lambda#11| arg0@@322 arg1@@177 arg2@@119 arg3@@75)) (MapType6Type refType boolType)) :qid |funType:lambda#11| :pattern ( (|lambda#11| arg0@@322 arg1@@177 arg2@@119 arg3@@75)) )))
(assert (forall (($o@@49 T@U) ($f@@15 T@U) (|l#0@@10| T@U) (|l#1@@10| T@U) (|l#2@@10| T@U) (|l#3@@10| Bool) ) (! (let ((alpha@@22 (FieldTypeInv0 (type $f@@15)))) (=> (and (and (and (and (= (type $o@@49) refType) (= (type $f@@15) (FieldType alpha@@22))) (= (type |l#0@@10|) refType)) (= (type |l#1@@10|) (MapType0Type refType MapType1Type))) (= (type |l#2@@10|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#11| |l#0@@10| |l#1@@10| |l#2@@10| |l#3@@10|) $o@@49 $f@@15))  (=> (and (not (= $o@@49 |l#0@@10|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@10| $o@@49) |l#2@@10|))) |l#3@@10|)))) :qid |GenericM.116:10| :skolemid |4036| :pattern ( (MapType6Select (|lambda#11| |l#0@@10| |l#1@@10| |l#2@@10| |l#3@@10|) $o@@49 $f@@15)) )))
(assert (forall ((arg0@@323 T@U) (arg1@@178 T@U) (arg2@@120 T@U) (arg3@@76 Bool) ) (! (= (type (|lambda#12| arg0@@323 arg1@@178 arg2@@120 arg3@@76)) (MapType6Type refType boolType)) :qid |funType:lambda#12| :pattern ( (|lambda#12| arg0@@323 arg1@@178 arg2@@120 arg3@@76)) )))
(assert (forall (($o@@50 T@U) ($f@@16 T@U) (|l#0@@11| T@U) (|l#1@@11| T@U) (|l#2@@11| T@U) (|l#3@@11| Bool) ) (! (let ((alpha@@23 (FieldTypeInv0 (type $f@@16)))) (=> (and (and (and (and (= (type $o@@50) refType) (= (type $f@@16) (FieldType alpha@@23))) (= (type |l#0@@11|) refType)) (= (type |l#1@@11|) (MapType0Type refType MapType1Type))) (= (type |l#2@@11|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#12| |l#0@@11| |l#1@@11| |l#2@@11| |l#3@@11|) $o@@50 $f@@16))  (=> (and (not (= $o@@50 |l#0@@11|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@11| $o@@50) |l#2@@11|))) |l#3@@11|)))) :qid |GenericM.125:10| :skolemid |4037| :pattern ( (MapType6Select (|lambda#12| |l#0@@11| |l#1@@11| |l#2@@11| |l#3@@11|) $o@@50 $f@@16)) )))
(assert (forall ((arg0@@324 T@U) (arg1@@179 T@U) (arg2@@121 T@U) (arg3@@77 Bool) ) (! (= (type (|lambda#13| arg0@@324 arg1@@179 arg2@@121 arg3@@77)) (MapType6Type refType boolType)) :qid |funType:lambda#13| :pattern ( (|lambda#13| arg0@@324 arg1@@179 arg2@@121 arg3@@77)) )))
(assert (forall (($o@@51 T@U) ($f@@17 T@U) (|l#0@@12| T@U) (|l#1@@12| T@U) (|l#2@@12| T@U) (|l#3@@12| Bool) ) (! (let ((alpha@@24 (FieldTypeInv0 (type $f@@17)))) (=> (and (and (and (and (= (type $o@@51) refType) (= (type $f@@17) (FieldType alpha@@24))) (= (type |l#0@@12|) refType)) (= (type |l#1@@12|) (MapType0Type refType MapType1Type))) (= (type |l#2@@12|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#13| |l#0@@12| |l#1@@12| |l#2@@12| |l#3@@12|) $o@@51 $f@@17))  (=> (and (not (= $o@@51 |l#0@@12|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@12| $o@@51) |l#2@@12|))) |l#3@@12|)))) :qid |GenericM.125:10| :skolemid |4038| :pattern ( (MapType6Select (|lambda#13| |l#0@@12| |l#1@@12| |l#2@@12| |l#3@@12|) $o@@51 $f@@17)) )))
(assert (forall ((arg0@@325 T@U) (arg1@@180 T@U) (arg2@@122 T@U) (arg3@@78 Bool) ) (! (= (type (|lambda#14| arg0@@325 arg1@@180 arg2@@122 arg3@@78)) (MapType6Type refType boolType)) :qid |funType:lambda#14| :pattern ( (|lambda#14| arg0@@325 arg1@@180 arg2@@122 arg3@@78)) )))
(assert (forall (($o@@52 T@U) ($f@@18 T@U) (|l#0@@13| T@U) (|l#1@@13| T@U) (|l#2@@13| T@U) (|l#3@@13| Bool) ) (! (let ((alpha@@25 (FieldTypeInv0 (type $f@@18)))) (=> (and (and (and (and (= (type $o@@52) refType) (= (type $f@@18) (FieldType alpha@@25))) (= (type |l#0@@13|) refType)) (= (type |l#1@@13|) (MapType0Type refType MapType1Type))) (= (type |l#2@@13|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#14| |l#0@@13| |l#1@@13| |l#2@@13| |l#3@@13|) $o@@52 $f@@18))  (=> (and (not (= $o@@52 |l#0@@13|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@13| $o@@52) |l#2@@13|))) |l#3@@13|)))) :qid |GenericM.135:8| :skolemid |4039| :pattern ( (MapType6Select (|lambda#14| |l#0@@13| |l#1@@13| |l#2@@13| |l#3@@13|) $o@@52 $f@@18)) )))
(assert (forall ((arg0@@326 T@U) (arg1@@181 T@U) (arg2@@123 T@U) (arg3@@79 Bool) ) (! (= (type (|lambda#15| arg0@@326 arg1@@181 arg2@@123 arg3@@79)) (MapType6Type refType boolType)) :qid |funType:lambda#15| :pattern ( (|lambda#15| arg0@@326 arg1@@181 arg2@@123 arg3@@79)) )))
(assert (forall (($o@@53 T@U) ($f@@19 T@U) (|l#0@@14| T@U) (|l#1@@14| T@U) (|l#2@@14| T@U) (|l#3@@14| Bool) ) (! (let ((alpha@@26 (FieldTypeInv0 (type $f@@19)))) (=> (and (and (and (and (= (type $o@@53) refType) (= (type $f@@19) (FieldType alpha@@26))) (= (type |l#0@@14|) refType)) (= (type |l#1@@14|) (MapType0Type refType MapType1Type))) (= (type |l#2@@14|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#15| |l#0@@14| |l#1@@14| |l#2@@14| |l#3@@14|) $o@@53 $f@@19))  (=> (and (not (= $o@@53 |l#0@@14|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@14| $o@@53) |l#2@@14|))) |l#3@@14|)))) :qid |GenericM.135:8| :skolemid |4040| :pattern ( (MapType6Select (|lambda#15| |l#0@@14| |l#1@@14| |l#2@@14| |l#3@@14|) $o@@53 $f@@19)) )))
(assert (forall ((arg0@@327 T@U) (arg1@@182 T@U) (arg2@@124 T@U) (arg3@@80 Bool) ) (! (= (type (|lambda#16| arg0@@327 arg1@@182 arg2@@124 arg3@@80)) (MapType6Type refType boolType)) :qid |funType:lambda#16| :pattern ( (|lambda#16| arg0@@327 arg1@@182 arg2@@124 arg3@@80)) )))
(assert (forall (($o@@54 T@U) ($f@@20 T@U) (|l#0@@15| T@U) (|l#1@@15| T@U) (|l#2@@15| T@U) (|l#3@@15| Bool) ) (! (let ((alpha@@27 (FieldTypeInv0 (type $f@@20)))) (=> (and (and (and (and (= (type $o@@54) refType) (= (type $f@@20) (FieldType alpha@@27))) (= (type |l#0@@15|) refType)) (= (type |l#1@@15|) (MapType0Type refType MapType1Type))) (= (type |l#2@@15|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#16| |l#0@@15| |l#1@@15| |l#2@@15| |l#3@@15|) $o@@54 $f@@20))  (=> (and (not (= $o@@54 |l#0@@15|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@15| $o@@54) |l#2@@15|))) |l#3@@15|)))) :qid |GenericM.156:8| :skolemid |4041| :pattern ( (MapType6Select (|lambda#16| |l#0@@15| |l#1@@15| |l#2@@15| |l#3@@15|) $o@@54 $f@@20)) )))
(assert (forall ((arg0@@328 T@U) (arg1@@183 T@U) (arg2@@125 T@U) (arg3@@81 Bool) ) (! (= (type (|lambda#17| arg0@@328 arg1@@183 arg2@@125 arg3@@81)) (MapType6Type refType boolType)) :qid |funType:lambda#17| :pattern ( (|lambda#17| arg0@@328 arg1@@183 arg2@@125 arg3@@81)) )))
(assert (forall (($o@@55 T@U) ($f@@21 T@U) (|l#0@@16| T@U) (|l#1@@16| T@U) (|l#2@@16| T@U) (|l#3@@16| Bool) ) (! (let ((alpha@@28 (FieldTypeInv0 (type $f@@21)))) (=> (and (and (and (and (= (type $o@@55) refType) (= (type $f@@21) (FieldType alpha@@28))) (= (type |l#0@@16|) refType)) (= (type |l#1@@16|) (MapType0Type refType MapType1Type))) (= (type |l#2@@16|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#17| |l#0@@16| |l#1@@16| |l#2@@16| |l#3@@16|) $o@@55 $f@@21))  (=> (and (not (= $o@@55 |l#0@@16|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@16| $o@@55) |l#2@@16|))) |l#3@@16|)))) :qid |GenericM.156:8| :skolemid |4042| :pattern ( (MapType6Select (|lambda#17| |l#0@@16| |l#1@@16| |l#2@@16| |l#3@@16|) $o@@55 $f@@21)) )))
(assert (forall ((arg0@@329 T@U) (arg1@@184 T@U) (arg2@@126 T@U) (arg3@@82 Bool) ) (! (= (type (|lambda#18| arg0@@329 arg1@@184 arg2@@126 arg3@@82)) (MapType6Type refType boolType)) :qid |funType:lambda#18| :pattern ( (|lambda#18| arg0@@329 arg1@@184 arg2@@126 arg3@@82)) )))
(assert (forall (($o@@56 T@U) ($f@@22 T@U) (|l#0@@17| T@U) (|l#1@@17| T@U) (|l#2@@17| T@U) (|l#3@@17| Bool) ) (! (let ((alpha@@29 (FieldTypeInv0 (type $f@@22)))) (=> (and (and (and (and (= (type $o@@56) refType) (= (type $f@@22) (FieldType alpha@@29))) (= (type |l#0@@17|) refType)) (= (type |l#1@@17|) (MapType0Type refType MapType1Type))) (= (type |l#2@@17|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#18| |l#0@@17| |l#1@@17| |l#2@@17| |l#3@@17|) $o@@56 $f@@22))  (=> (and (not (= $o@@56 |l#0@@17|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@17| $o@@56) |l#2@@17|))) |l#3@@17|)))) :qid |GenericM.177:20| :skolemid |4043| :pattern ( (MapType6Select (|lambda#18| |l#0@@17| |l#1@@17| |l#2@@17| |l#3@@17|) $o@@56 $f@@22)) )))
(assert (forall ((arg0@@330 T@U) (arg1@@185 T@U) (arg2@@127 T@U) (arg3@@83 Bool) ) (! (= (type (|lambda#19| arg0@@330 arg1@@185 arg2@@127 arg3@@83)) (MapType6Type refType boolType)) :qid |funType:lambda#19| :pattern ( (|lambda#19| arg0@@330 arg1@@185 arg2@@127 arg3@@83)) )))
(assert (forall (($o@@57 T@U) ($f@@23 T@U) (|l#0@@18| T@U) (|l#1@@18| T@U) (|l#2@@18| T@U) (|l#3@@18| Bool) ) (! (let ((alpha@@30 (FieldTypeInv0 (type $f@@23)))) (=> (and (and (and (and (= (type $o@@57) refType) (= (type $f@@23) (FieldType alpha@@30))) (= (type |l#0@@18|) refType)) (= (type |l#1@@18|) (MapType0Type refType MapType1Type))) (= (type |l#2@@18|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#19| |l#0@@18| |l#1@@18| |l#2@@18| |l#3@@18|) $o@@57 $f@@23))  (=> (and (not (= $o@@57 |l#0@@18|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@18| $o@@57) |l#2@@18|))) |l#3@@18|)))) :qid |GenericM.177:20| :skolemid |4044| :pattern ( (MapType6Select (|lambda#19| |l#0@@18| |l#1@@18| |l#2@@18| |l#3@@18|) $o@@57 $f@@23)) )))
(assert (forall ((arg0@@331 T@U) (arg1@@186 T@U) (arg2@@128 T@U) (arg3@@84 Bool) ) (! (= (type (|lambda#20| arg0@@331 arg1@@186 arg2@@128 arg3@@84)) (MapType6Type refType boolType)) :qid |funType:lambda#20| :pattern ( (|lambda#20| arg0@@331 arg1@@186 arg2@@128 arg3@@84)) )))
(assert (forall (($o@@58 T@U) ($f@@24 T@U) (|l#0@@19| T@U) (|l#1@@19| T@U) (|l#2@@19| T@U) (|l#3@@19| Bool) ) (! (let ((alpha@@31 (FieldTypeInv0 (type $f@@24)))) (=> (and (and (and (and (= (type $o@@58) refType) (= (type $f@@24) (FieldType alpha@@31))) (= (type |l#0@@19|) refType)) (= (type |l#1@@19|) (MapType0Type refType MapType1Type))) (= (type |l#2@@19|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#20| |l#0@@19| |l#1@@19| |l#2@@19| |l#3@@19|) $o@@58 $f@@24))  (=> (and (not (= $o@@58 |l#0@@19|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@19| $o@@58) |l#2@@19|))) |l#3@@19|)))) :qid |GenericM.199:7| :skolemid |4045| :pattern ( (MapType6Select (|lambda#20| |l#0@@19| |l#1@@19| |l#2@@19| |l#3@@19|) $o@@58 $f@@24)) )))
(assert (forall ((arg0@@332 T@U) (arg1@@187 T@U) (arg2@@129 T@U) (arg3@@85 Bool) ) (! (= (type (|lambda#21| arg0@@332 arg1@@187 arg2@@129 arg3@@85)) (MapType6Type refType boolType)) :qid |funType:lambda#21| :pattern ( (|lambda#21| arg0@@332 arg1@@187 arg2@@129 arg3@@85)) )))
(assert (forall (($o@@59 T@U) ($f@@25 T@U) (|l#0@@20| T@U) (|l#1@@20| T@U) (|l#2@@20| T@U) (|l#3@@20| Bool) ) (! (let ((alpha@@32 (FieldTypeInv0 (type $f@@25)))) (=> (and (and (and (and (= (type $o@@59) refType) (= (type $f@@25) (FieldType alpha@@32))) (= (type |l#0@@20|) refType)) (= (type |l#1@@20|) (MapType0Type refType MapType1Type))) (= (type |l#2@@20|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#21| |l#0@@20| |l#1@@20| |l#2@@20| |l#3@@20|) $o@@59 $f@@25))  (=> (and (not (= $o@@59 |l#0@@20|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@20| $o@@59) |l#2@@20|))) |l#3@@20|)))) :qid |GenericM.199:7| :skolemid |4046| :pattern ( (MapType6Select (|lambda#21| |l#0@@20| |l#1@@20| |l#2@@20| |l#3@@20|) $o@@59 $f@@25)) )))
(assert (forall ((arg0@@333 T@U) (arg1@@188 T@U) (arg2@@130 T@U) (arg3@@86 Bool) ) (! (= (type (|lambda#22| arg0@@333 arg1@@188 arg2@@130 arg3@@86)) (MapType6Type refType boolType)) :qid |funType:lambda#22| :pattern ( (|lambda#22| arg0@@333 arg1@@188 arg2@@130 arg3@@86)) )))
(assert (forall (($o@@60 T@U) ($f@@26 T@U) (|l#0@@21| T@U) (|l#1@@21| T@U) (|l#2@@21| T@U) (|l#3@@21| Bool) ) (! (let ((alpha@@33 (FieldTypeInv0 (type $f@@26)))) (=> (and (and (and (and (= (type $o@@60) refType) (= (type $f@@26) (FieldType alpha@@33))) (= (type |l#0@@21|) refType)) (= (type |l#1@@21|) (MapType0Type refType MapType1Type))) (= (type |l#2@@21|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#22| |l#0@@21| |l#1@@21| |l#2@@21| |l#3@@21|) $o@@60 $f@@26))  (=> (and (not (= $o@@60 |l#0@@21|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@21| $o@@60) |l#2@@21|))) |l#3@@21|)))) :qid |GenericM.245:7| :skolemid |4047| :pattern ( (MapType6Select (|lambda#22| |l#0@@21| |l#1@@21| |l#2@@21| |l#3@@21|) $o@@60 $f@@26)) )))
(assert (forall ((arg0@@334 T@U) (arg1@@189 T@U) (arg2@@131 T@U) (arg3@@87 Bool) ) (! (= (type (|lambda#23| arg0@@334 arg1@@189 arg2@@131 arg3@@87)) (MapType6Type refType boolType)) :qid |funType:lambda#23| :pattern ( (|lambda#23| arg0@@334 arg1@@189 arg2@@131 arg3@@87)) )))
(assert (forall (($o@@61 T@U) ($f@@27 T@U) (|l#0@@22| T@U) (|l#1@@22| T@U) (|l#2@@22| T@U) (|l#3@@22| Bool) ) (! (let ((alpha@@34 (FieldTypeInv0 (type $f@@27)))) (=> (and (and (and (and (= (type $o@@61) refType) (= (type $f@@27) (FieldType alpha@@34))) (= (type |l#0@@22|) refType)) (= (type |l#1@@22|) (MapType0Type refType MapType1Type))) (= (type |l#2@@22|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#23| |l#0@@22| |l#1@@22| |l#2@@22| |l#3@@22|) $o@@61 $f@@27))  (=> (and (not (= $o@@61 |l#0@@22|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@22| $o@@61) |l#2@@22|))) |l#3@@22|)))) :qid |GenericM.245:7| :skolemid |4048| :pattern ( (MapType6Select (|lambda#23| |l#0@@22| |l#1@@22| |l#2@@22| |l#3@@22|) $o@@61 $f@@27)) )))
(assert (forall ((arg0@@335 T@U) (arg1@@190 T@U) (arg2@@132 T@U) (arg3@@88 Bool) ) (! (= (type (|lambda#24| arg0@@335 arg1@@190 arg2@@132 arg3@@88)) (MapType6Type refType boolType)) :qid |funType:lambda#24| :pattern ( (|lambda#24| arg0@@335 arg1@@190 arg2@@132 arg3@@88)) )))
(assert (forall (($o@@62 T@U) ($f@@28 T@U) (|l#0@@23| T@U) (|l#1@@23| T@U) (|l#2@@23| T@U) (|l#3@@23| Bool) ) (! (let ((alpha@@35 (FieldTypeInv0 (type $f@@28)))) (=> (and (and (and (and (= (type $o@@62) refType) (= (type $f@@28) (FieldType alpha@@35))) (= (type |l#0@@23|) refType)) (= (type |l#1@@23|) (MapType0Type refType MapType1Type))) (= (type |l#2@@23|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#24| |l#0@@23| |l#1@@23| |l#2@@23| |l#3@@23|) $o@@62 $f@@28))  (=> (and (not (= $o@@62 |l#0@@23|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@23| $o@@62) |l#2@@23|))) |l#3@@23|)))) :qid |GenericM.278:32| :skolemid |4049| :pattern ( (MapType6Select (|lambda#24| |l#0@@23| |l#1@@23| |l#2@@23| |l#3@@23|) $o@@62 $f@@28)) )))
(assert (forall ((arg0@@336 T@U) (arg1@@191 T@U) (arg2@@133 T@U) (arg3@@89 Bool) ) (! (= (type (|lambda#25| arg0@@336 arg1@@191 arg2@@133 arg3@@89)) (MapType6Type refType boolType)) :qid |funType:lambda#25| :pattern ( (|lambda#25| arg0@@336 arg1@@191 arg2@@133 arg3@@89)) )))
(assert (forall (($o@@63 T@U) ($f@@29 T@U) (|l#0@@24| T@U) (|l#1@@24| T@U) (|l#2@@24| T@U) (|l#3@@24| Bool) ) (! (let ((alpha@@36 (FieldTypeInv0 (type $f@@29)))) (=> (and (and (and (and (= (type $o@@63) refType) (= (type $f@@29) (FieldType alpha@@36))) (= (type |l#0@@24|) refType)) (= (type |l#1@@24|) (MapType0Type refType MapType1Type))) (= (type |l#2@@24|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#25| |l#0@@24| |l#1@@24| |l#2@@24| |l#3@@24|) $o@@63 $f@@29))  (=> (and (not (= $o@@63 |l#0@@24|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@24| $o@@63) |l#2@@24|))) |l#3@@24|)))) :qid |GenericM.278:32| :skolemid |4050| :pattern ( (MapType6Select (|lambda#25| |l#0@@24| |l#1@@24| |l#2@@24| |l#3@@24|) $o@@63 $f@@29)) )))
(assert (forall ((arg0@@337 T@U) (arg1@@192 T@U) (arg2@@134 T@U) (arg3@@90 Bool) ) (! (= (type (|lambda#26| arg0@@337 arg1@@192 arg2@@134 arg3@@90)) (MapType6Type refType boolType)) :qid |funType:lambda#26| :pattern ( (|lambda#26| arg0@@337 arg1@@192 arg2@@134 arg3@@90)) )))
(assert (forall (($o@@64 T@U) ($f@@30 T@U) (|l#0@@25| T@U) (|l#1@@25| T@U) (|l#2@@25| T@U) (|l#3@@25| Bool) ) (! (let ((alpha@@37 (FieldTypeInv0 (type $f@@30)))) (=> (and (and (and (and (= (type $o@@64) refType) (= (type $f@@30) (FieldType alpha@@37))) (= (type |l#0@@25|) refType)) (= (type |l#1@@25|) (MapType0Type refType MapType1Type))) (= (type |l#2@@25|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#26| |l#0@@25| |l#1@@25| |l#2@@25| |l#3@@25|) $o@@64 $f@@30))  (=> (and (not (= $o@@64 |l#0@@25|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@25| $o@@64) |l#2@@25|))) |l#3@@25|)))) :qid |GenericM.337:10| :skolemid |4051| :pattern ( (MapType6Select (|lambda#26| |l#0@@25| |l#1@@25| |l#2@@25| |l#3@@25|) $o@@64 $f@@30)) )))
(assert (forall ((arg0@@338 T@U) (arg1@@193 T@U) (arg2@@135 T@U) (arg3@@91 Bool) ) (! (= (type (|lambda#27| arg0@@338 arg1@@193 arg2@@135 arg3@@91)) (MapType6Type refType boolType)) :qid |funType:lambda#27| :pattern ( (|lambda#27| arg0@@338 arg1@@193 arg2@@135 arg3@@91)) )))
(assert (forall (($o@@65 T@U) ($f@@31 T@U) (|l#0@@26| T@U) (|l#1@@26| T@U) (|l#2@@26| T@U) (|l#3@@26| Bool) ) (! (let ((alpha@@38 (FieldTypeInv0 (type $f@@31)))) (=> (and (and (and (and (= (type $o@@65) refType) (= (type $f@@31) (FieldType alpha@@38))) (= (type |l#0@@26|) refType)) (= (type |l#1@@26|) (MapType0Type refType MapType1Type))) (= (type |l#2@@26|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#27| |l#0@@26| |l#1@@26| |l#2@@26| |l#3@@26|) $o@@65 $f@@31))  (=> (and (not (= $o@@65 |l#0@@26|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@26| $o@@65) |l#2@@26|))) |l#3@@26|)))) :qid |GenericM.337:10| :skolemid |4052| :pattern ( (MapType6Select (|lambda#27| |l#0@@26| |l#1@@26| |l#2@@26| |l#3@@26|) $o@@65 $f@@31)) )))
(assert (forall ((arg0@@339 T@U) (arg1@@194 T@U) (arg2@@136 T@U) (arg3@@92 Bool) ) (! (= (type (|lambda#28| arg0@@339 arg1@@194 arg2@@136 arg3@@92)) (MapType6Type refType boolType)) :qid |funType:lambda#28| :pattern ( (|lambda#28| arg0@@339 arg1@@194 arg2@@136 arg3@@92)) )))
(assert (forall (($o@@66 T@U) ($f@@32 T@U) (|l#0@@27| T@U) (|l#1@@27| T@U) (|l#2@@27| T@U) (|l#3@@27| Bool) ) (! (let ((alpha@@39 (FieldTypeInv0 (type $f@@32)))) (=> (and (and (and (and (= (type $o@@66) refType) (= (type $f@@32) (FieldType alpha@@39))) (= (type |l#0@@27|) refType)) (= (type |l#1@@27|) (MapType0Type refType MapType1Type))) (= (type |l#2@@27|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#28| |l#0@@27| |l#1@@27| |l#2@@27| |l#3@@27|) $o@@66 $f@@32))  (=> (and (not (= $o@@66 |l#0@@27|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@27| $o@@66) |l#2@@27|))) |l#3@@27|)))) :qid |GenericM.359:8| :skolemid |4053| :pattern ( (MapType6Select (|lambda#28| |l#0@@27| |l#1@@27| |l#2@@27| |l#3@@27|) $o@@66 $f@@32)) )))
(assert (forall ((arg0@@340 T@U) (arg1@@195 T@U) (arg2@@137 T@U) (arg3@@93 Bool) ) (! (= (type (|lambda#29| arg0@@340 arg1@@195 arg2@@137 arg3@@93)) (MapType6Type refType boolType)) :qid |funType:lambda#29| :pattern ( (|lambda#29| arg0@@340 arg1@@195 arg2@@137 arg3@@93)) )))
(assert (forall (($o@@67 T@U) ($f@@33 T@U) (|l#0@@28| T@U) (|l#1@@28| T@U) (|l#2@@28| T@U) (|l#3@@28| Bool) ) (! (let ((alpha@@40 (FieldTypeInv0 (type $f@@33)))) (=> (and (and (and (and (= (type $o@@67) refType) (= (type $f@@33) (FieldType alpha@@40))) (= (type |l#0@@28|) refType)) (= (type |l#1@@28|) (MapType0Type refType MapType1Type))) (= (type |l#2@@28|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#29| |l#0@@28| |l#1@@28| |l#2@@28| |l#3@@28|) $o@@67 $f@@33))  (=> (and (not (= $o@@67 |l#0@@28|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@28| $o@@67) |l#2@@28|))) |l#3@@28|)))) :qid |GenericM.359:8| :skolemid |4054| :pattern ( (MapType6Select (|lambda#29| |l#0@@28| |l#1@@28| |l#2@@28| |l#3@@28|) $o@@67 $f@@33)) )))
(assert (forall ((arg0@@341 T@U) (arg1@@196 T@U) (arg2@@138 T@U) (arg3@@94 Bool) ) (! (= (type (|lambda#30| arg0@@341 arg1@@196 arg2@@138 arg3@@94)) (MapType6Type refType boolType)) :qid |funType:lambda#30| :pattern ( (|lambda#30| arg0@@341 arg1@@196 arg2@@138 arg3@@94)) )))
(assert (forall (($o@@68 T@U) ($f@@34 T@U) (|l#0@@29| T@U) (|l#1@@29| T@U) (|l#2@@29| T@U) (|l#3@@29| Bool) ) (! (let ((alpha@@41 (FieldTypeInv0 (type $f@@34)))) (=> (and (and (and (and (= (type $o@@68) refType) (= (type $f@@34) (FieldType alpha@@41))) (= (type |l#0@@29|) refType)) (= (type |l#1@@29|) (MapType0Type refType MapType1Type))) (= (type |l#2@@29|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#30| |l#0@@29| |l#1@@29| |l#2@@29| |l#3@@29|) $o@@68 $f@@34))  (=> (and (not (= $o@@68 |l#0@@29|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@29| $o@@68) |l#2@@29|))) |l#3@@29|)))) :qid |GenericM.387:20| :skolemid |4055| :pattern ( (MapType6Select (|lambda#30| |l#0@@29| |l#1@@29| |l#2@@29| |l#3@@29|) $o@@68 $f@@34)) )))
(assert (forall ((arg0@@342 T@U) (arg1@@197 T@U) (arg2@@139 T@U) (arg3@@95 Bool) ) (! (= (type (|lambda#31| arg0@@342 arg1@@197 arg2@@139 arg3@@95)) (MapType6Type refType boolType)) :qid |funType:lambda#31| :pattern ( (|lambda#31| arg0@@342 arg1@@197 arg2@@139 arg3@@95)) )))
(assert (forall (($o@@69 T@U) ($f@@35 T@U) (|l#0@@30| T@U) (|l#1@@30| T@U) (|l#2@@30| T@U) (|l#3@@30| Bool) ) (! (let ((alpha@@42 (FieldTypeInv0 (type $f@@35)))) (=> (and (and (and (and (= (type $o@@69) refType) (= (type $f@@35) (FieldType alpha@@42))) (= (type |l#0@@30|) refType)) (= (type |l#1@@30|) (MapType0Type refType MapType1Type))) (= (type |l#2@@30|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#31| |l#0@@30| |l#1@@30| |l#2@@30| |l#3@@30|) $o@@69 $f@@35))  (=> (and (not (= $o@@69 |l#0@@30|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@30| $o@@69) |l#2@@30|))) |l#3@@30|)))) :qid |GenericM.387:20| :skolemid |4056| :pattern ( (MapType6Select (|lambda#31| |l#0@@30| |l#1@@30| |l#2@@30| |l#3@@30|) $o@@69 $f@@35)) )))
(assert (forall ((arg0@@343 T@U) (arg1@@198 T@U) (arg2@@140 T@U) (arg3@@96 Bool) ) (! (= (type (|lambda#32| arg0@@343 arg1@@198 arg2@@140 arg3@@96)) (MapType6Type refType boolType)) :qid |funType:lambda#32| :pattern ( (|lambda#32| arg0@@343 arg1@@198 arg2@@140 arg3@@96)) )))
(assert (forall (($o@@70 T@U) ($f@@36 T@U) (|l#0@@31| T@U) (|l#1@@31| T@U) (|l#2@@31| T@U) (|l#3@@31| Bool) ) (! (let ((alpha@@43 (FieldTypeInv0 (type $f@@36)))) (=> (and (and (and (and (= (type $o@@70) refType) (= (type $f@@36) (FieldType alpha@@43))) (= (type |l#0@@31|) refType)) (= (type |l#1@@31|) (MapType0Type refType MapType1Type))) (= (type |l#2@@31|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#32| |l#0@@31| |l#1@@31| |l#2@@31| |l#3@@31|) $o@@70 $f@@36))  (=> (and (not (= $o@@70 |l#0@@31|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@31| $o@@70) |l#2@@31|))) |l#3@@31|)))) :qid |GenericM.410:7| :skolemid |4057| :pattern ( (MapType6Select (|lambda#32| |l#0@@31| |l#1@@31| |l#2@@31| |l#3@@31|) $o@@70 $f@@36)) )))
(assert (forall ((arg0@@344 T@U) (arg1@@199 T@U) (arg2@@141 T@U) (arg3@@97 Bool) ) (! (= (type (|lambda#33| arg0@@344 arg1@@199 arg2@@141 arg3@@97)) (MapType6Type refType boolType)) :qid |funType:lambda#33| :pattern ( (|lambda#33| arg0@@344 arg1@@199 arg2@@141 arg3@@97)) )))
(assert (forall (($o@@71 T@U) ($f@@37 T@U) (|l#0@@32| T@U) (|l#1@@32| T@U) (|l#2@@32| T@U) (|l#3@@32| Bool) ) (! (let ((alpha@@44 (FieldTypeInv0 (type $f@@37)))) (=> (and (and (and (and (= (type $o@@71) refType) (= (type $f@@37) (FieldType alpha@@44))) (= (type |l#0@@32|) refType)) (= (type |l#1@@32|) (MapType0Type refType MapType1Type))) (= (type |l#2@@32|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#33| |l#0@@32| |l#1@@32| |l#2@@32| |l#3@@32|) $o@@71 $f@@37))  (=> (and (not (= $o@@71 |l#0@@32|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@32| $o@@71) |l#2@@32|))) |l#3@@32|)))) :qid |GenericM.410:7| :skolemid |4058| :pattern ( (MapType6Select (|lambda#33| |l#0@@32| |l#1@@32| |l#2@@32| |l#3@@32|) $o@@71 $f@@37)) )))
(assert (forall ((arg0@@345 T@U) (arg1@@200 T@U) (arg2@@142 T@U) (arg3@@98 Bool) ) (! (= (type (|lambda#34| arg0@@345 arg1@@200 arg2@@142 arg3@@98)) (MapType6Type refType boolType)) :qid |funType:lambda#34| :pattern ( (|lambda#34| arg0@@345 arg1@@200 arg2@@142 arg3@@98)) )))
(assert (forall (($o@@72 T@U) ($f@@38 T@U) (|l#0@@33| T@U) (|l#1@@33| T@U) (|l#2@@33| T@U) (|l#3@@33| Bool) ) (! (let ((alpha@@45 (FieldTypeInv0 (type $f@@38)))) (=> (and (and (and (and (= (type $o@@72) refType) (= (type $f@@38) (FieldType alpha@@45))) (= (type |l#0@@33|) refType)) (= (type |l#1@@33|) (MapType0Type refType MapType1Type))) (= (type |l#2@@33|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#34| |l#0@@33| |l#1@@33| |l#2@@33| |l#3@@33|) $o@@72 $f@@38))  (=> (and (not (= $o@@72 |l#0@@33|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@33| $o@@72) |l#2@@33|))) |l#3@@33|)))) :qid |GenericM.457:7| :skolemid |4059| :pattern ( (MapType6Select (|lambda#34| |l#0@@33| |l#1@@33| |l#2@@33| |l#3@@33|) $o@@72 $f@@38)) )))
(assert (forall ((arg0@@346 T@U) (arg1@@201 T@U) (arg2@@143 T@U) (arg3@@99 Bool) ) (! (= (type (|lambda#35| arg0@@346 arg1@@201 arg2@@143 arg3@@99)) (MapType6Type refType boolType)) :qid |funType:lambda#35| :pattern ( (|lambda#35| arg0@@346 arg1@@201 arg2@@143 arg3@@99)) )))
(assert (forall (($o@@73 T@U) ($f@@39 T@U) (|l#0@@34| T@U) (|l#1@@34| T@U) (|l#2@@34| T@U) (|l#3@@34| Bool) ) (! (let ((alpha@@46 (FieldTypeInv0 (type $f@@39)))) (=> (and (and (and (and (= (type $o@@73) refType) (= (type $f@@39) (FieldType alpha@@46))) (= (type |l#0@@34|) refType)) (= (type |l#1@@34|) (MapType0Type refType MapType1Type))) (= (type |l#2@@34|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#35| |l#0@@34| |l#1@@34| |l#2@@34| |l#3@@34|) $o@@73 $f@@39))  (=> (and (not (= $o@@73 |l#0@@34|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@34| $o@@73) |l#2@@34|))) |l#3@@34|)))) :qid |GenericM.457:7| :skolemid |4060| :pattern ( (MapType6Select (|lambda#35| |l#0@@34| |l#1@@34| |l#2@@34| |l#3@@34|) $o@@73 $f@@39)) )))
(assert (forall ((arg0@@347 T@U) (arg1@@202 T@U) (arg2@@144 T@U) (arg3@@100 Bool) ) (! (= (type (|lambda#36| arg0@@347 arg1@@202 arg2@@144 arg3@@100)) (MapType6Type refType boolType)) :qid |funType:lambda#36| :pattern ( (|lambda#36| arg0@@347 arg1@@202 arg2@@144 arg3@@100)) )))
(assert (forall (($o@@74 T@U) ($f@@40 T@U) (|l#0@@35| T@U) (|l#1@@35| T@U) (|l#2@@35| T@U) (|l#3@@35| Bool) ) (! (let ((alpha@@47 (FieldTypeInv0 (type $f@@40)))) (=> (and (and (and (and (= (type $o@@74) refType) (= (type $f@@40) (FieldType alpha@@47))) (= (type |l#0@@35|) refType)) (= (type |l#1@@35|) (MapType0Type refType MapType1Type))) (= (type |l#2@@35|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#36| |l#0@@35| |l#1@@35| |l#2@@35| |l#3@@35|) $o@@74 $f@@40))  (=> (and (not (= $o@@74 |l#0@@35|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@35| $o@@74) |l#2@@35|))) |l#3@@35|)))) :qid |GenericM.490:32| :skolemid |4061| :pattern ( (MapType6Select (|lambda#36| |l#0@@35| |l#1@@35| |l#2@@35| |l#3@@35|) $o@@74 $f@@40)) )))
(assert (forall ((arg0@@348 T@U) (arg1@@203 T@U) (arg2@@145 T@U) (arg3@@101 Bool) ) (! (= (type (|lambda#37| arg0@@348 arg1@@203 arg2@@145 arg3@@101)) (MapType6Type refType boolType)) :qid |funType:lambda#37| :pattern ( (|lambda#37| arg0@@348 arg1@@203 arg2@@145 arg3@@101)) )))
(assert (forall (($o@@75 T@U) ($f@@41 T@U) (|l#0@@36| T@U) (|l#1@@36| T@U) (|l#2@@36| T@U) (|l#3@@36| Bool) ) (! (let ((alpha@@48 (FieldTypeInv0 (type $f@@41)))) (=> (and (and (and (and (= (type $o@@75) refType) (= (type $f@@41) (FieldType alpha@@48))) (= (type |l#0@@36|) refType)) (= (type |l#1@@36|) (MapType0Type refType MapType1Type))) (= (type |l#2@@36|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#37| |l#0@@36| |l#1@@36| |l#2@@36| |l#3@@36|) $o@@75 $f@@41))  (=> (and (not (= $o@@75 |l#0@@36|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@36| $o@@75) |l#2@@36|))) |l#3@@36|)))) :qid |GenericM.490:32| :skolemid |4062| :pattern ( (MapType6Select (|lambda#37| |l#0@@36| |l#1@@36| |l#2@@36| |l#3@@36|) $o@@75 $f@@41)) )))
(assert (forall ((arg0@@349 T@U) (arg1@@204 T@U) (arg2@@146 T@U) (arg3@@102 Bool) ) (! (= (type (|lambda#38| arg0@@349 arg1@@204 arg2@@146 arg3@@102)) (MapType6Type refType boolType)) :qid |funType:lambda#38| :pattern ( (|lambda#38| arg0@@349 arg1@@204 arg2@@146 arg3@@102)) )))
(assert (forall (($o@@76 T@U) ($f@@42 T@U) (|l#0@@37| T@U) (|l#1@@37| T@U) (|l#2@@37| T@U) (|l#3@@37| Bool) ) (! (let ((alpha@@49 (FieldTypeInv0 (type $f@@42)))) (=> (and (and (and (and (= (type $o@@76) refType) (= (type $f@@42) (FieldType alpha@@49))) (= (type |l#0@@37|) refType)) (= (type |l#1@@37|) (MapType0Type refType MapType1Type))) (= (type |l#2@@37|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#38| |l#0@@37| |l#1@@37| |l#2@@37| |l#3@@37|) $o@@76 $f@@42))  (=> (and (not (= $o@@76 |l#0@@37|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@37| $o@@76) |l#2@@37|))) |l#3@@37|)))) :qid |GenericM.550:10| :skolemid |4063| :pattern ( (MapType6Select (|lambda#38| |l#0@@37| |l#1@@37| |l#2@@37| |l#3@@37|) $o@@76 $f@@42)) )))
(assert (forall ((arg0@@350 T@U) (arg1@@205 T@U) (arg2@@147 T@U) (arg3@@103 Bool) ) (! (= (type (|lambda#39| arg0@@350 arg1@@205 arg2@@147 arg3@@103)) (MapType6Type refType boolType)) :qid |funType:lambda#39| :pattern ( (|lambda#39| arg0@@350 arg1@@205 arg2@@147 arg3@@103)) )))
(assert (forall (($o@@77 T@U) ($f@@43 T@U) (|l#0@@38| T@U) (|l#1@@38| T@U) (|l#2@@38| T@U) (|l#3@@38| Bool) ) (! (let ((alpha@@50 (FieldTypeInv0 (type $f@@43)))) (=> (and (and (and (and (= (type $o@@77) refType) (= (type $f@@43) (FieldType alpha@@50))) (= (type |l#0@@38|) refType)) (= (type |l#1@@38|) (MapType0Type refType MapType1Type))) (= (type |l#2@@38|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#39| |l#0@@38| |l#1@@38| |l#2@@38| |l#3@@38|) $o@@77 $f@@43))  (=> (and (not (= $o@@77 |l#0@@38|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@38| $o@@77) |l#2@@38|))) |l#3@@38|)))) :qid |GenericM.550:10| :skolemid |4064| :pattern ( (MapType6Select (|lambda#39| |l#0@@38| |l#1@@38| |l#2@@38| |l#3@@38|) $o@@77 $f@@43)) )))
(assert (forall ((arg0@@351 T@U) (arg1@@206 T@U) (arg2@@148 T@U) (arg3@@104 Bool) ) (! (= (type (|lambda#40| arg0@@351 arg1@@206 arg2@@148 arg3@@104)) (MapType6Type refType boolType)) :qid |funType:lambda#40| :pattern ( (|lambda#40| arg0@@351 arg1@@206 arg2@@148 arg3@@104)) )))
(assert (forall (($o@@78 T@U) ($f@@44 T@U) (|l#0@@39| T@U) (|l#1@@39| T@U) (|l#2@@39| T@U) (|l#3@@39| Bool) ) (! (let ((alpha@@51 (FieldTypeInv0 (type $f@@44)))) (=> (and (and (and (and (= (type $o@@78) refType) (= (type $f@@44) (FieldType alpha@@51))) (= (type |l#0@@39|) refType)) (= (type |l#1@@39|) (MapType0Type refType MapType1Type))) (= (type |l#2@@39|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#40| |l#0@@39| |l#1@@39| |l#2@@39| |l#3@@39|) $o@@78 $f@@44))  (=> (and (not (= $o@@78 |l#0@@39|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@39| $o@@78) |l#2@@39|))) |l#3@@39|)))) :qid |GenericM.566:8| :skolemid |4065| :pattern ( (MapType6Select (|lambda#40| |l#0@@39| |l#1@@39| |l#2@@39| |l#3@@39|) $o@@78 $f@@44)) )))
(assert (forall ((arg0@@352 T@U) (arg1@@207 T@U) (arg2@@149 T@U) (arg3@@105 Bool) ) (! (= (type (|lambda#41| arg0@@352 arg1@@207 arg2@@149 arg3@@105)) (MapType6Type refType boolType)) :qid |funType:lambda#41| :pattern ( (|lambda#41| arg0@@352 arg1@@207 arg2@@149 arg3@@105)) )))
(assert (forall (($o@@79 T@U) ($f@@45 T@U) (|l#0@@40| T@U) (|l#1@@40| T@U) (|l#2@@40| T@U) (|l#3@@40| Bool) ) (! (let ((alpha@@52 (FieldTypeInv0 (type $f@@45)))) (=> (and (and (and (and (= (type $o@@79) refType) (= (type $f@@45) (FieldType alpha@@52))) (= (type |l#0@@40|) refType)) (= (type |l#1@@40|) (MapType0Type refType MapType1Type))) (= (type |l#2@@40|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#41| |l#0@@40| |l#1@@40| |l#2@@40| |l#3@@40|) $o@@79 $f@@45))  (=> (and (not (= $o@@79 |l#0@@40|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@40| $o@@79) |l#2@@40|))) |l#3@@40|)))) :qid |GenericM.566:8| :skolemid |4066| :pattern ( (MapType6Select (|lambda#41| |l#0@@40| |l#1@@40| |l#2@@40| |l#3@@40|) $o@@79 $f@@45)) )))
(assert (forall ((arg0@@353 T@U) (arg1@@208 T@U) (arg2@@150 T@U) (arg3@@106 Bool) ) (! (= (type (|lambda#42| arg0@@353 arg1@@208 arg2@@150 arg3@@106)) (MapType6Type refType boolType)) :qid |funType:lambda#42| :pattern ( (|lambda#42| arg0@@353 arg1@@208 arg2@@150 arg3@@106)) )))
(assert (forall (($o@@80 T@U) ($f@@46 T@U) (|l#0@@41| T@U) (|l#1@@41| T@U) (|l#2@@41| T@U) (|l#3@@41| Bool) ) (! (let ((alpha@@53 (FieldTypeInv0 (type $f@@46)))) (=> (and (and (and (and (= (type $o@@80) refType) (= (type $f@@46) (FieldType alpha@@53))) (= (type |l#0@@41|) refType)) (= (type |l#1@@41|) (MapType0Type refType MapType1Type))) (= (type |l#2@@41|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#42| |l#0@@41| |l#1@@41| |l#2@@41| |l#3@@41|) $o@@80 $f@@46))  (=> (and (not (= $o@@80 |l#0@@41|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@41| $o@@80) |l#2@@41|))) |l#3@@41|)))) :qid |GenericM.589:10| :skolemid |4067| :pattern ( (MapType6Select (|lambda#42| |l#0@@41| |l#1@@41| |l#2@@41| |l#3@@41|) $o@@80 $f@@46)) )))
(assert (forall ((arg0@@354 T@U) (arg1@@209 T@U) (arg2@@151 T@U) (arg3@@107 Bool) ) (! (= (type (|lambda#43| arg0@@354 arg1@@209 arg2@@151 arg3@@107)) (MapType6Type refType boolType)) :qid |funType:lambda#43| :pattern ( (|lambda#43| arg0@@354 arg1@@209 arg2@@151 arg3@@107)) )))
(assert (forall (($o@@81 T@U) ($f@@47 T@U) (|l#0@@42| T@U) (|l#1@@42| T@U) (|l#2@@42| T@U) (|l#3@@42| Bool) ) (! (let ((alpha@@54 (FieldTypeInv0 (type $f@@47)))) (=> (and (and (and (and (= (type $o@@81) refType) (= (type $f@@47) (FieldType alpha@@54))) (= (type |l#0@@42|) refType)) (= (type |l#1@@42|) (MapType0Type refType MapType1Type))) (= (type |l#2@@42|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#43| |l#0@@42| |l#1@@42| |l#2@@42| |l#3@@42|) $o@@81 $f@@47))  (=> (and (not (= $o@@81 |l#0@@42|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@42| $o@@81) |l#2@@42|))) |l#3@@42|)))) :qid |GenericM.589:10| :skolemid |4068| :pattern ( (MapType6Select (|lambda#43| |l#0@@42| |l#1@@42| |l#2@@42| |l#3@@42|) $o@@81 $f@@47)) )))
(assert (forall ((arg0@@355 T@U) (arg1@@210 T@U) (arg2@@152 T@U) (arg3@@108 Bool) ) (! (= (type (|lambda#44| arg0@@355 arg1@@210 arg2@@152 arg3@@108)) (MapType6Type refType boolType)) :qid |funType:lambda#44| :pattern ( (|lambda#44| arg0@@355 arg1@@210 arg2@@152 arg3@@108)) )))
(assert (forall (($o@@82 T@U) ($f@@48 T@U) (|l#0@@43| T@U) (|l#1@@43| T@U) (|l#2@@43| T@U) (|l#3@@43| Bool) ) (! (let ((alpha@@55 (FieldTypeInv0 (type $f@@48)))) (=> (and (and (and (and (= (type $o@@82) refType) (= (type $f@@48) (FieldType alpha@@55))) (= (type |l#0@@43|) refType)) (= (type |l#1@@43|) (MapType0Type refType MapType1Type))) (= (type |l#2@@43|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#44| |l#0@@43| |l#1@@43| |l#2@@43| |l#3@@43|) $o@@82 $f@@48))  (=> (and (not (= $o@@82 |l#0@@43|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@43| $o@@82) |l#2@@43|))) |l#3@@43|)))) :qid |GenericM.600:8| :skolemid |4069| :pattern ( (MapType6Select (|lambda#44| |l#0@@43| |l#1@@43| |l#2@@43| |l#3@@43|) $o@@82 $f@@48)) )))
(assert (forall ((arg0@@356 T@U) (arg1@@211 T@U) (arg2@@153 T@U) (arg3@@109 Bool) ) (! (= (type (|lambda#45| arg0@@356 arg1@@211 arg2@@153 arg3@@109)) (MapType6Type refType boolType)) :qid |funType:lambda#45| :pattern ( (|lambda#45| arg0@@356 arg1@@211 arg2@@153 arg3@@109)) )))
(assert (forall (($o@@83 T@U) ($f@@49 T@U) (|l#0@@44| T@U) (|l#1@@44| T@U) (|l#2@@44| T@U) (|l#3@@44| Bool) ) (! (let ((alpha@@56 (FieldTypeInv0 (type $f@@49)))) (=> (and (and (and (and (= (type $o@@83) refType) (= (type $f@@49) (FieldType alpha@@56))) (= (type |l#0@@44|) refType)) (= (type |l#1@@44|) (MapType0Type refType MapType1Type))) (= (type |l#2@@44|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#45| |l#0@@44| |l#1@@44| |l#2@@44| |l#3@@44|) $o@@83 $f@@49))  (=> (and (not (= $o@@83 |l#0@@44|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@44| $o@@83) |l#2@@44|))) |l#3@@44|)))) :qid |GenericM.600:8| :skolemid |4070| :pattern ( (MapType6Select (|lambda#45| |l#0@@44| |l#1@@44| |l#2@@44| |l#3@@44|) $o@@83 $f@@49)) )))
(assert (forall ((arg0@@357 T@U) (arg1@@212 T@U) (arg2@@154 T@U) (arg3@@110 Bool) ) (! (= (type (|lambda#46| arg0@@357 arg1@@212 arg2@@154 arg3@@110)) (MapType6Type refType boolType)) :qid |funType:lambda#46| :pattern ( (|lambda#46| arg0@@357 arg1@@212 arg2@@154 arg3@@110)) )))
(assert (forall (($o@@84 T@U) ($f@@50 T@U) (|l#0@@45| T@U) (|l#1@@45| T@U) (|l#2@@45| T@U) (|l#3@@45| Bool) ) (! (let ((alpha@@57 (FieldTypeInv0 (type $f@@50)))) (=> (and (and (and (and (= (type $o@@84) refType) (= (type $f@@50) (FieldType alpha@@57))) (= (type |l#0@@45|) refType)) (= (type |l#1@@45|) (MapType0Type refType MapType1Type))) (= (type |l#2@@45|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#46| |l#0@@45| |l#1@@45| |l#2@@45| |l#3@@45|) $o@@84 $f@@50))  (=> (and (not (= $o@@84 |l#0@@45|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@45| $o@@84) |l#2@@45|))) |l#3@@45|)))) :qid |GenericM.625:10| :skolemid |4071| :pattern ( (MapType6Select (|lambda#46| |l#0@@45| |l#1@@45| |l#2@@45| |l#3@@45|) $o@@84 $f@@50)) )))
(assert (forall ((arg0@@358 T@U) (arg1@@213 T@U) (arg2@@155 T@U) (arg3@@111 Bool) ) (! (= (type (|lambda#47| arg0@@358 arg1@@213 arg2@@155 arg3@@111)) (MapType6Type refType boolType)) :qid |funType:lambda#47| :pattern ( (|lambda#47| arg0@@358 arg1@@213 arg2@@155 arg3@@111)) )))
(assert (forall (($o@@85 T@U) ($f@@51 T@U) (|l#0@@46| T@U) (|l#1@@46| T@U) (|l#2@@46| T@U) (|l#3@@46| Bool) ) (! (let ((alpha@@58 (FieldTypeInv0 (type $f@@51)))) (=> (and (and (and (and (= (type $o@@85) refType) (= (type $f@@51) (FieldType alpha@@58))) (= (type |l#0@@46|) refType)) (= (type |l#1@@46|) (MapType0Type refType MapType1Type))) (= (type |l#2@@46|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#47| |l#0@@46| |l#1@@46| |l#2@@46| |l#3@@46|) $o@@85 $f@@51))  (=> (and (not (= $o@@85 |l#0@@46|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@46| $o@@85) |l#2@@46|))) |l#3@@46|)))) :qid |GenericM.625:10| :skolemid |4072| :pattern ( (MapType6Select (|lambda#47| |l#0@@46| |l#1@@46| |l#2@@46| |l#3@@46|) $o@@85 $f@@51)) )))
(assert (forall ((arg0@@359 T@U) (arg1@@214 T@U) (arg2@@156 T@U) (arg3@@112 Bool) ) (! (= (type (|lambda#48| arg0@@359 arg1@@214 arg2@@156 arg3@@112)) (MapType6Type refType boolType)) :qid |funType:lambda#48| :pattern ( (|lambda#48| arg0@@359 arg1@@214 arg2@@156 arg3@@112)) )))
(assert (forall (($o@@86 T@U) ($f@@52 T@U) (|l#0@@47| T@U) (|l#1@@47| T@U) (|l#2@@47| T@U) (|l#3@@47| Bool) ) (! (let ((alpha@@59 (FieldTypeInv0 (type $f@@52)))) (=> (and (and (and (and (= (type $o@@86) refType) (= (type $f@@52) (FieldType alpha@@59))) (= (type |l#0@@47|) refType)) (= (type |l#1@@47|) (MapType0Type refType MapType1Type))) (= (type |l#2@@47|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#48| |l#0@@47| |l#1@@47| |l#2@@47| |l#3@@47|) $o@@86 $f@@52))  (=> (and (not (= $o@@86 |l#0@@47|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@47| $o@@86) |l#2@@47|))) |l#3@@47|)))) :qid |GenericM.639:8| :skolemid |4073| :pattern ( (MapType6Select (|lambda#48| |l#0@@47| |l#1@@47| |l#2@@47| |l#3@@47|) $o@@86 $f@@52)) )))
(assert (forall ((arg0@@360 T@U) (arg1@@215 T@U) (arg2@@157 T@U) (arg3@@113 Bool) ) (! (= (type (|lambda#49| arg0@@360 arg1@@215 arg2@@157 arg3@@113)) (MapType6Type refType boolType)) :qid |funType:lambda#49| :pattern ( (|lambda#49| arg0@@360 arg1@@215 arg2@@157 arg3@@113)) )))
(assert (forall (($o@@87 T@U) ($f@@53 T@U) (|l#0@@48| T@U) (|l#1@@48| T@U) (|l#2@@48| T@U) (|l#3@@48| Bool) ) (! (let ((alpha@@60 (FieldTypeInv0 (type $f@@53)))) (=> (and (and (and (and (= (type $o@@87) refType) (= (type $f@@53) (FieldType alpha@@60))) (= (type |l#0@@48|) refType)) (= (type |l#1@@48|) (MapType0Type refType MapType1Type))) (= (type |l#2@@48|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#49| |l#0@@48| |l#1@@48| |l#2@@48| |l#3@@48|) $o@@87 $f@@53))  (=> (and (not (= $o@@87 |l#0@@48|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@48| $o@@87) |l#2@@48|))) |l#3@@48|)))) :qid |GenericM.639:8| :skolemid |4074| :pattern ( (MapType6Select (|lambda#49| |l#0@@48| |l#1@@48| |l#2@@48| |l#3@@48|) $o@@87 $f@@53)) )))
(assert (forall ((arg0@@361 T@U) (arg1@@216 T@U) (arg2@@158 T@U) (arg3@@114 Bool) ) (! (= (type (|lambda#50| arg0@@361 arg1@@216 arg2@@158 arg3@@114)) (MapType6Type refType boolType)) :qid |funType:lambda#50| :pattern ( (|lambda#50| arg0@@361 arg1@@216 arg2@@158 arg3@@114)) )))
(assert (forall (($o@@88 T@U) ($f@@54 T@U) (|l#0@@49| T@U) (|l#1@@49| T@U) (|l#2@@49| T@U) (|l#3@@49| Bool) ) (! (let ((alpha@@61 (FieldTypeInv0 (type $f@@54)))) (=> (and (and (and (and (= (type $o@@88) refType) (= (type $f@@54) (FieldType alpha@@61))) (= (type |l#0@@49|) refType)) (= (type |l#1@@49|) (MapType0Type refType MapType1Type))) (= (type |l#2@@49|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#50| |l#0@@49| |l#1@@49| |l#2@@49| |l#3@@49|) $o@@88 $f@@54))  (=> (and (not (= $o@@88 |l#0@@49|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@49| $o@@88) |l#2@@49|))) |l#3@@49|)))) :qid |GenericM.668:10| :skolemid |4075| :pattern ( (MapType6Select (|lambda#50| |l#0@@49| |l#1@@49| |l#2@@49| |l#3@@49|) $o@@88 $f@@54)) )))
(assert (forall ((arg0@@362 T@U) (arg1@@217 T@U) (arg2@@159 T@U) (arg3@@115 Bool) ) (! (= (type (|lambda#51| arg0@@362 arg1@@217 arg2@@159 arg3@@115)) (MapType6Type refType boolType)) :qid |funType:lambda#51| :pattern ( (|lambda#51| arg0@@362 arg1@@217 arg2@@159 arg3@@115)) )))
(assert (forall (($o@@89 T@U) ($f@@55 T@U) (|l#0@@50| T@U) (|l#1@@50| T@U) (|l#2@@50| T@U) (|l#3@@50| Bool) ) (! (let ((alpha@@62 (FieldTypeInv0 (type $f@@55)))) (=> (and (and (and (and (= (type $o@@89) refType) (= (type $f@@55) (FieldType alpha@@62))) (= (type |l#0@@50|) refType)) (= (type |l#1@@50|) (MapType0Type refType MapType1Type))) (= (type |l#2@@50|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#51| |l#0@@50| |l#1@@50| |l#2@@50| |l#3@@50|) $o@@89 $f@@55))  (=> (and (not (= $o@@89 |l#0@@50|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@50| $o@@89) |l#2@@50|))) |l#3@@50|)))) :qid |GenericM.668:10| :skolemid |4076| :pattern ( (MapType6Select (|lambda#51| |l#0@@50| |l#1@@50| |l#2@@50| |l#3@@50|) $o@@89 $f@@55)) )))
(assert (forall ((arg0@@363 T@U) (arg1@@218 T@U) (arg2@@160 T@U) (arg3@@116 Bool) ) (! (= (type (|lambda#52| arg0@@363 arg1@@218 arg2@@160 arg3@@116)) (MapType6Type refType boolType)) :qid |funType:lambda#52| :pattern ( (|lambda#52| arg0@@363 arg1@@218 arg2@@160 arg3@@116)) )))
(assert (forall (($o@@90 T@U) ($f@@56 T@U) (|l#0@@51| T@U) (|l#1@@51| T@U) (|l#2@@51| T@U) (|l#3@@51| Bool) ) (! (let ((alpha@@63 (FieldTypeInv0 (type $f@@56)))) (=> (and (and (and (and (= (type $o@@90) refType) (= (type $f@@56) (FieldType alpha@@63))) (= (type |l#0@@51|) refType)) (= (type |l#1@@51|) (MapType0Type refType MapType1Type))) (= (type |l#2@@51|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#52| |l#0@@51| |l#1@@51| |l#2@@51| |l#3@@51|) $o@@90 $f@@56))  (=> (and (not (= $o@@90 |l#0@@51|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@51| $o@@90) |l#2@@51|))) |l#3@@51|)))) :qid |GenericM.682:8| :skolemid |4077| :pattern ( (MapType6Select (|lambda#52| |l#0@@51| |l#1@@51| |l#2@@51| |l#3@@51|) $o@@90 $f@@56)) )))
(assert (forall ((arg0@@364 T@U) (arg1@@219 T@U) (arg2@@161 T@U) (arg3@@117 Bool) ) (! (= (type (|lambda#53| arg0@@364 arg1@@219 arg2@@161 arg3@@117)) (MapType6Type refType boolType)) :qid |funType:lambda#53| :pattern ( (|lambda#53| arg0@@364 arg1@@219 arg2@@161 arg3@@117)) )))
(assert (forall (($o@@91 T@U) ($f@@57 T@U) (|l#0@@52| T@U) (|l#1@@52| T@U) (|l#2@@52| T@U) (|l#3@@52| Bool) ) (! (let ((alpha@@64 (FieldTypeInv0 (type $f@@57)))) (=> (and (and (and (and (= (type $o@@91) refType) (= (type $f@@57) (FieldType alpha@@64))) (= (type |l#0@@52|) refType)) (= (type |l#1@@52|) (MapType0Type refType MapType1Type))) (= (type |l#2@@52|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#53| |l#0@@52| |l#1@@52| |l#2@@52| |l#3@@52|) $o@@91 $f@@57))  (=> (and (not (= $o@@91 |l#0@@52|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@52| $o@@91) |l#2@@52|))) |l#3@@52|)))) :qid |GenericM.682:8| :skolemid |4078| :pattern ( (MapType6Select (|lambda#53| |l#0@@52| |l#1@@52| |l#2@@52| |l#3@@52|) $o@@91 $f@@57)) )))
(assert (forall ((arg0@@365 T@U) (arg1@@220 T@U) (arg2@@162 T@U) (arg3@@118 Bool) ) (! (= (type (|lambda#54| arg0@@365 arg1@@220 arg2@@162 arg3@@118)) (MapType6Type refType boolType)) :qid |funType:lambda#54| :pattern ( (|lambda#54| arg0@@365 arg1@@220 arg2@@162 arg3@@118)) )))
(assert (forall (($o@@92 T@U) ($f@@58 T@U) (|l#0@@53| T@U) (|l#1@@53| T@U) (|l#2@@53| T@U) (|l#3@@53| Bool) ) (! (let ((alpha@@65 (FieldTypeInv0 (type $f@@58)))) (=> (and (and (and (and (= (type $o@@92) refType) (= (type $f@@58) (FieldType alpha@@65))) (= (type |l#0@@53|) refType)) (= (type |l#1@@53|) (MapType0Type refType MapType1Type))) (= (type |l#2@@53|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#54| |l#0@@53| |l#1@@53| |l#2@@53| |l#3@@53|) $o@@92 $f@@58))  (=> (and (not (= $o@@92 |l#0@@53|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@53| $o@@92) |l#2@@53|))) |l#3@@53|)))) :qid |GenericM.711:10| :skolemid |4079| :pattern ( (MapType6Select (|lambda#54| |l#0@@53| |l#1@@53| |l#2@@53| |l#3@@53|) $o@@92 $f@@58)) )))
(assert (forall ((arg0@@366 T@U) (arg1@@221 T@U) (arg2@@163 T@U) (arg3@@119 Bool) ) (! (= (type (|lambda#55| arg0@@366 arg1@@221 arg2@@163 arg3@@119)) (MapType6Type refType boolType)) :qid |funType:lambda#55| :pattern ( (|lambda#55| arg0@@366 arg1@@221 arg2@@163 arg3@@119)) )))
(assert (forall (($o@@93 T@U) ($f@@59 T@U) (|l#0@@54| T@U) (|l#1@@54| T@U) (|l#2@@54| T@U) (|l#3@@54| Bool) ) (! (let ((alpha@@66 (FieldTypeInv0 (type $f@@59)))) (=> (and (and (and (and (= (type $o@@93) refType) (= (type $f@@59) (FieldType alpha@@66))) (= (type |l#0@@54|) refType)) (= (type |l#1@@54|) (MapType0Type refType MapType1Type))) (= (type |l#2@@54|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#55| |l#0@@54| |l#1@@54| |l#2@@54| |l#3@@54|) $o@@93 $f@@59))  (=> (and (not (= $o@@93 |l#0@@54|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@54| $o@@93) |l#2@@54|))) |l#3@@54|)))) :qid |GenericM.711:10| :skolemid |4080| :pattern ( (MapType6Select (|lambda#55| |l#0@@54| |l#1@@54| |l#2@@54| |l#3@@54|) $o@@93 $f@@59)) )))
(assert (forall ((arg0@@367 T@U) (arg1@@222 T@U) (arg2@@164 T@U) (arg3@@120 Bool) ) (! (= (type (|lambda#56| arg0@@367 arg1@@222 arg2@@164 arg3@@120)) (MapType6Type refType boolType)) :qid |funType:lambda#56| :pattern ( (|lambda#56| arg0@@367 arg1@@222 arg2@@164 arg3@@120)) )))
(assert (forall (($o@@94 T@U) ($f@@60 T@U) (|l#0@@55| T@U) (|l#1@@55| T@U) (|l#2@@55| T@U) (|l#3@@55| Bool) ) (! (let ((alpha@@67 (FieldTypeInv0 (type $f@@60)))) (=> (and (and (and (and (= (type $o@@94) refType) (= (type $f@@60) (FieldType alpha@@67))) (= (type |l#0@@55|) refType)) (= (type |l#1@@55|) (MapType0Type refType MapType1Type))) (= (type |l#2@@55|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#56| |l#0@@55| |l#1@@55| |l#2@@55| |l#3@@55|) $o@@94 $f@@60))  (=> (and (not (= $o@@94 |l#0@@55|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@55| $o@@94) |l#2@@55|))) |l#3@@55|)))) :qid |GenericM.731:8| :skolemid |4081| :pattern ( (MapType6Select (|lambda#56| |l#0@@55| |l#1@@55| |l#2@@55| |l#3@@55|) $o@@94 $f@@60)) )))
(assert (forall ((arg0@@368 T@U) (arg1@@223 T@U) (arg2@@165 T@U) (arg3@@121 Bool) ) (! (= (type (|lambda#57| arg0@@368 arg1@@223 arg2@@165 arg3@@121)) (MapType6Type refType boolType)) :qid |funType:lambda#57| :pattern ( (|lambda#57| arg0@@368 arg1@@223 arg2@@165 arg3@@121)) )))
(assert (forall (($o@@95 T@U) ($f@@61 T@U) (|l#0@@56| T@U) (|l#1@@56| T@U) (|l#2@@56| T@U) (|l#3@@56| Bool) ) (! (let ((alpha@@68 (FieldTypeInv0 (type $f@@61)))) (=> (and (and (and (and (= (type $o@@95) refType) (= (type $f@@61) (FieldType alpha@@68))) (= (type |l#0@@56|) refType)) (= (type |l#1@@56|) (MapType0Type refType MapType1Type))) (= (type |l#2@@56|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#57| |l#0@@56| |l#1@@56| |l#2@@56| |l#3@@56|) $o@@95 $f@@61))  (=> (and (not (= $o@@95 |l#0@@56|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@56| $o@@95) |l#2@@56|))) |l#3@@56|)))) :qid |GenericM.731:8| :skolemid |4082| :pattern ( (MapType6Select (|lambda#57| |l#0@@56| |l#1@@56| |l#2@@56| |l#3@@56|) $o@@95 $f@@61)) )))
(assert (forall ((arg0@@369 T@U) (arg1@@224 T@U) (arg2@@166 T@U) (arg3@@122 Bool) ) (! (= (type (|lambda#58| arg0@@369 arg1@@224 arg2@@166 arg3@@122)) (MapType6Type refType boolType)) :qid |funType:lambda#58| :pattern ( (|lambda#58| arg0@@369 arg1@@224 arg2@@166 arg3@@122)) )))
(assert (forall (($o@@96 T@U) ($f@@62 T@U) (|l#0@@57| T@U) (|l#1@@57| T@U) (|l#2@@57| T@U) (|l#3@@57| Bool) ) (! (let ((alpha@@69 (FieldTypeInv0 (type $f@@62)))) (=> (and (and (and (and (= (type $o@@96) refType) (= (type $f@@62) (FieldType alpha@@69))) (= (type |l#0@@57|) refType)) (= (type |l#1@@57|) (MapType0Type refType MapType1Type))) (= (type |l#2@@57|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#58| |l#0@@57| |l#1@@57| |l#2@@57| |l#3@@57|) $o@@96 $f@@62))  (=> (and (not (= $o@@96 |l#0@@57|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@57| $o@@96) |l#2@@57|))) |l#3@@57|)))) :qid |GenericM.761:20| :skolemid |4083| :pattern ( (MapType6Select (|lambda#58| |l#0@@57| |l#1@@57| |l#2@@57| |l#3@@57|) $o@@96 $f@@62)) )))
(assert (forall ((arg0@@370 T@U) (arg1@@225 T@U) (arg2@@167 T@U) (arg3@@123 Bool) ) (! (= (type (|lambda#59| arg0@@370 arg1@@225 arg2@@167 arg3@@123)) (MapType6Type refType boolType)) :qid |funType:lambda#59| :pattern ( (|lambda#59| arg0@@370 arg1@@225 arg2@@167 arg3@@123)) )))
(assert (forall (($o@@97 T@U) ($f@@63 T@U) (|l#0@@58| T@U) (|l#1@@58| T@U) (|l#2@@58| T@U) (|l#3@@58| Bool) ) (! (let ((alpha@@70 (FieldTypeInv0 (type $f@@63)))) (=> (and (and (and (and (= (type $o@@97) refType) (= (type $f@@63) (FieldType alpha@@70))) (= (type |l#0@@58|) refType)) (= (type |l#1@@58|) (MapType0Type refType MapType1Type))) (= (type |l#2@@58|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#59| |l#0@@58| |l#1@@58| |l#2@@58| |l#3@@58|) $o@@97 $f@@63))  (=> (and (not (= $o@@97 |l#0@@58|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@58| $o@@97) |l#2@@58|))) |l#3@@58|)))) :qid |GenericM.761:20| :skolemid |4084| :pattern ( (MapType6Select (|lambda#59| |l#0@@58| |l#1@@58| |l#2@@58| |l#3@@58|) $o@@97 $f@@63)) )))
(assert (forall ((arg0@@371 T@U) (arg1@@226 T@U) (arg2@@168 T@U) (arg3@@124 Bool) ) (! (= (type (|lambda#60| arg0@@371 arg1@@226 arg2@@168 arg3@@124)) (MapType6Type refType boolType)) :qid |funType:lambda#60| :pattern ( (|lambda#60| arg0@@371 arg1@@226 arg2@@168 arg3@@124)) )))
(assert (forall (($o@@98 T@U) ($f@@64 T@U) (|l#0@@59| T@U) (|l#1@@59| T@U) (|l#2@@59| T@U) (|l#3@@59| Bool) ) (! (let ((alpha@@71 (FieldTypeInv0 (type $f@@64)))) (=> (and (and (and (and (= (type $o@@98) refType) (= (type $f@@64) (FieldType alpha@@71))) (= (type |l#0@@59|) refType)) (= (type |l#1@@59|) (MapType0Type refType MapType1Type))) (= (type |l#2@@59|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#60| |l#0@@59| |l#1@@59| |l#2@@59| |l#3@@59|) $o@@98 $f@@64))  (=> (and (not (= $o@@98 |l#0@@59|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@59| $o@@98) |l#2@@59|))) |l#3@@59|)))) :qid |GenericM.779:8| :skolemid |4085| :pattern ( (MapType6Select (|lambda#60| |l#0@@59| |l#1@@59| |l#2@@59| |l#3@@59|) $o@@98 $f@@64)) )))
(assert (forall ((arg0@@372 T@U) (arg1@@227 T@U) (arg2@@169 T@U) (arg3@@125 Bool) ) (! (= (type (|lambda#61| arg0@@372 arg1@@227 arg2@@169 arg3@@125)) (MapType6Type refType boolType)) :qid |funType:lambda#61| :pattern ( (|lambda#61| arg0@@372 arg1@@227 arg2@@169 arg3@@125)) )))
(assert (forall (($o@@99 T@U) ($f@@65 T@U) (|l#0@@60| T@U) (|l#1@@60| T@U) (|l#2@@60| T@U) (|l#3@@60| Bool) ) (! (let ((alpha@@72 (FieldTypeInv0 (type $f@@65)))) (=> (and (and (and (and (= (type $o@@99) refType) (= (type $f@@65) (FieldType alpha@@72))) (= (type |l#0@@60|) refType)) (= (type |l#1@@60|) (MapType0Type refType MapType1Type))) (= (type |l#2@@60|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#61| |l#0@@60| |l#1@@60| |l#2@@60| |l#3@@60|) $o@@99 $f@@65))  (=> (and (not (= $o@@99 |l#0@@60|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@60| $o@@99) |l#2@@60|))) |l#3@@60|)))) :qid |GenericM.779:8| :skolemid |4086| :pattern ( (MapType6Select (|lambda#61| |l#0@@60| |l#1@@60| |l#2@@60| |l#3@@60|) $o@@99 $f@@65)) )))
(assert (forall ((arg0@@373 T@U) (arg1@@228 T@U) (arg2@@170 T@U) (arg3@@126 Bool) ) (! (= (type (|lambda#62| arg0@@373 arg1@@228 arg2@@170 arg3@@126)) (MapType6Type refType boolType)) :qid |funType:lambda#62| :pattern ( (|lambda#62| arg0@@373 arg1@@228 arg2@@170 arg3@@126)) )))
(assert (forall (($o@@100 T@U) ($f@@66 T@U) (|l#0@@61| T@U) (|l#1@@61| T@U) (|l#2@@61| T@U) (|l#3@@61| Bool) ) (! (let ((alpha@@73 (FieldTypeInv0 (type $f@@66)))) (=> (and (and (and (and (= (type $o@@100) refType) (= (type $f@@66) (FieldType alpha@@73))) (= (type |l#0@@61|) refType)) (= (type |l#1@@61|) (MapType0Type refType MapType1Type))) (= (type |l#2@@61|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#62| |l#0@@61| |l#1@@61| |l#2@@61| |l#3@@61|) $o@@100 $f@@66))  (=> (and (not (= $o@@100 |l#0@@61|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@61| $o@@100) |l#2@@61|))) |l#3@@61|)))) :qid |GenericM.808:11| :skolemid |4087| :pattern ( (MapType6Select (|lambda#62| |l#0@@61| |l#1@@61| |l#2@@61| |l#3@@61|) $o@@100 $f@@66)) )))
(assert (forall ((arg0@@374 T@U) (arg1@@229 T@U) (arg2@@171 T@U) (arg3@@127 Bool) ) (! (= (type (|lambda#63| arg0@@374 arg1@@229 arg2@@171 arg3@@127)) (MapType6Type refType boolType)) :qid |funType:lambda#63| :pattern ( (|lambda#63| arg0@@374 arg1@@229 arg2@@171 arg3@@127)) )))
(assert (forall (($o@@101 T@U) ($f@@67 T@U) (|l#0@@62| T@U) (|l#1@@62| T@U) (|l#2@@62| T@U) (|l#3@@62| Bool) ) (! (let ((alpha@@74 (FieldTypeInv0 (type $f@@67)))) (=> (and (and (and (and (= (type $o@@101) refType) (= (type $f@@67) (FieldType alpha@@74))) (= (type |l#0@@62|) refType)) (= (type |l#1@@62|) (MapType0Type refType MapType1Type))) (= (type |l#2@@62|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#63| |l#0@@62| |l#1@@62| |l#2@@62| |l#3@@62|) $o@@101 $f@@67))  (=> (and (not (= $o@@101 |l#0@@62|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@62| $o@@101) |l#2@@62|))) |l#3@@62|)))) :qid |GenericM.808:11| :skolemid |4088| :pattern ( (MapType6Select (|lambda#63| |l#0@@62| |l#1@@62| |l#2@@62| |l#3@@62|) $o@@101 $f@@67)) )))
(assert (forall ((arg0@@375 T@U) (arg1@@230 T@U) (arg2@@172 T@U) (arg3@@128 Bool) ) (! (= (type (|lambda#64| arg0@@375 arg1@@230 arg2@@172 arg3@@128)) (MapType6Type refType boolType)) :qid |funType:lambda#64| :pattern ( (|lambda#64| arg0@@375 arg1@@230 arg2@@172 arg3@@128)) )))
(assert (forall (($o@@102 T@U) ($f@@68 T@U) (|l#0@@63| T@U) (|l#1@@63| T@U) (|l#2@@63| T@U) (|l#3@@63| Bool) ) (! (let ((alpha@@75 (FieldTypeInv0 (type $f@@68)))) (=> (and (and (and (and (= (type $o@@102) refType) (= (type $f@@68) (FieldType alpha@@75))) (= (type |l#0@@63|) refType)) (= (type |l#1@@63|) (MapType0Type refType MapType1Type))) (= (type |l#2@@63|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#64| |l#0@@63| |l#1@@63| |l#2@@63| |l#3@@63|) $o@@102 $f@@68))  (=> (and (not (= $o@@102 |l#0@@63|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@63| $o@@102) |l#2@@63|))) |l#3@@63|)))) :qid |GenericM.817:10| :skolemid |4089| :pattern ( (MapType6Select (|lambda#64| |l#0@@63| |l#1@@63| |l#2@@63| |l#3@@63|) $o@@102 $f@@68)) )))
(assert (forall ((arg0@@376 T@U) (arg1@@231 T@U) (arg2@@173 T@U) (arg3@@129 Bool) ) (! (= (type (|lambda#65| arg0@@376 arg1@@231 arg2@@173 arg3@@129)) (MapType6Type refType boolType)) :qid |funType:lambda#65| :pattern ( (|lambda#65| arg0@@376 arg1@@231 arg2@@173 arg3@@129)) )))
(assert (forall (($o@@103 T@U) ($f@@69 T@U) (|l#0@@64| T@U) (|l#1@@64| T@U) (|l#2@@64| T@U) (|l#3@@64| Bool) ) (! (let ((alpha@@76 (FieldTypeInv0 (type $f@@69)))) (=> (and (and (and (and (= (type $o@@103) refType) (= (type $f@@69) (FieldType alpha@@76))) (= (type |l#0@@64|) refType)) (= (type |l#1@@64|) (MapType0Type refType MapType1Type))) (= (type |l#2@@64|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#65| |l#0@@64| |l#1@@64| |l#2@@64| |l#3@@64|) $o@@103 $f@@69))  (=> (and (not (= $o@@103 |l#0@@64|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@64| $o@@103) |l#2@@64|))) |l#3@@64|)))) :qid |GenericM.817:10| :skolemid |4090| :pattern ( (MapType6Select (|lambda#65| |l#0@@64| |l#1@@64| |l#2@@64| |l#3@@64|) $o@@103 $f@@69)) )))
(assert (forall ((arg0@@377 T@U) (arg1@@232 T@U) (arg2@@174 T@U) (arg3@@130 Bool) ) (! (= (type (|lambda#66| arg0@@377 arg1@@232 arg2@@174 arg3@@130)) (MapType6Type refType boolType)) :qid |funType:lambda#66| :pattern ( (|lambda#66| arg0@@377 arg1@@232 arg2@@174 arg3@@130)) )))
(assert (forall (($o@@104 T@U) ($f@@70 T@U) (|l#0@@65| T@U) (|l#1@@65| T@U) (|l#2@@65| T@U) (|l#3@@65| Bool) ) (! (let ((alpha@@77 (FieldTypeInv0 (type $f@@70)))) (=> (and (and (and (and (= (type $o@@104) refType) (= (type $f@@70) (FieldType alpha@@77))) (= (type |l#0@@65|) refType)) (= (type |l#1@@65|) (MapType0Type refType MapType1Type))) (= (type |l#2@@65|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#66| |l#0@@65| |l#1@@65| |l#2@@65| |l#3@@65|) $o@@104 $f@@70))  (=> (and (not (= $o@@104 |l#0@@65|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@65| $o@@104) |l#2@@65|))) |l#3@@65|)))) :qid |GenericM.826:8| :skolemid |4091| :pattern ( (MapType6Select (|lambda#66| |l#0@@65| |l#1@@65| |l#2@@65| |l#3@@65|) $o@@104 $f@@70)) )))
(assert (forall ((arg0@@378 T@U) (arg1@@233 T@U) (arg2@@175 T@U) (arg3@@131 Bool) ) (! (= (type (|lambda#67| arg0@@378 arg1@@233 arg2@@175 arg3@@131)) (MapType6Type refType boolType)) :qid |funType:lambda#67| :pattern ( (|lambda#67| arg0@@378 arg1@@233 arg2@@175 arg3@@131)) )))
(assert (forall (($o@@105 T@U) ($f@@71 T@U) (|l#0@@66| T@U) (|l#1@@66| T@U) (|l#2@@66| T@U) (|l#3@@66| Bool) ) (! (let ((alpha@@78 (FieldTypeInv0 (type $f@@71)))) (=> (and (and (and (and (= (type $o@@105) refType) (= (type $f@@71) (FieldType alpha@@78))) (= (type |l#0@@66|) refType)) (= (type |l#1@@66|) (MapType0Type refType MapType1Type))) (= (type |l#2@@66|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#67| |l#0@@66| |l#1@@66| |l#2@@66| |l#3@@66|) $o@@105 $f@@71))  (=> (and (not (= $o@@105 |l#0@@66|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@66| $o@@105) |l#2@@66|))) |l#3@@66|)))) :qid |GenericM.826:8| :skolemid |4092| :pattern ( (MapType6Select (|lambda#67| |l#0@@66| |l#1@@66| |l#2@@66| |l#3@@66|) $o@@105 $f@@71)) )))
(assert (forall ((arg0@@379 T@U) (arg1@@234 T@U) (arg2@@176 T@U) (arg3@@132 Bool) ) (! (= (type (|lambda#68| arg0@@379 arg1@@234 arg2@@176 arg3@@132)) (MapType6Type refType boolType)) :qid |funType:lambda#68| :pattern ( (|lambda#68| arg0@@379 arg1@@234 arg2@@176 arg3@@132)) )))
(assert (forall (($o@@106 T@U) ($f@@72 T@U) (|l#0@@67| T@U) (|l#1@@67| T@U) (|l#2@@67| T@U) (|l#3@@67| Bool) ) (! (let ((alpha@@79 (FieldTypeInv0 (type $f@@72)))) (=> (and (and (and (and (= (type $o@@106) refType) (= (type $f@@72) (FieldType alpha@@79))) (= (type |l#0@@67|) refType)) (= (type |l#1@@67|) (MapType0Type refType MapType1Type))) (= (type |l#2@@67|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#68| |l#0@@67| |l#1@@67| |l#2@@67| |l#3@@67|) $o@@106 $f@@72))  (=> (and (not (= $o@@106 |l#0@@67|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@67| $o@@106) |l#2@@67|))) |l#3@@67|)))) :qid |GenericM.845:7| :skolemid |4093| :pattern ( (MapType6Select (|lambda#68| |l#0@@67| |l#1@@67| |l#2@@67| |l#3@@67|) $o@@106 $f@@72)) )))
(assert (forall ((arg0@@380 T@U) (arg1@@235 T@U) (arg2@@177 T@U) (arg3@@133 Bool) ) (! (= (type (|lambda#69| arg0@@380 arg1@@235 arg2@@177 arg3@@133)) (MapType6Type refType boolType)) :qid |funType:lambda#69| :pattern ( (|lambda#69| arg0@@380 arg1@@235 arg2@@177 arg3@@133)) )))
(assert (forall (($o@@107 T@U) ($f@@73 T@U) (|l#0@@68| T@U) (|l#1@@68| T@U) (|l#2@@68| T@U) (|l#3@@68| Bool) ) (! (let ((alpha@@80 (FieldTypeInv0 (type $f@@73)))) (=> (and (and (and (and (= (type $o@@107) refType) (= (type $f@@73) (FieldType alpha@@80))) (= (type |l#0@@68|) refType)) (= (type |l#1@@68|) (MapType0Type refType MapType1Type))) (= (type |l#2@@68|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#69| |l#0@@68| |l#1@@68| |l#2@@68| |l#3@@68|) $o@@107 $f@@73))  (=> (and (not (= $o@@107 |l#0@@68|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@68| $o@@107) |l#2@@68|))) |l#3@@68|)))) :qid |GenericM.845:7| :skolemid |4094| :pattern ( (MapType6Select (|lambda#69| |l#0@@68| |l#1@@68| |l#2@@68| |l#3@@68|) $o@@107 $f@@73)) )))
(assert (forall ((arg0@@381 T@U) (arg1@@236 T@U) (arg2@@178 T@U) (arg3@@134 Bool) ) (! (= (type (|lambda#70| arg0@@381 arg1@@236 arg2@@178 arg3@@134)) (MapType6Type refType boolType)) :qid |funType:lambda#70| :pattern ( (|lambda#70| arg0@@381 arg1@@236 arg2@@178 arg3@@134)) )))
(assert (forall (($o@@108 T@U) ($f@@74 T@U) (|l#0@@69| T@U) (|l#1@@69| T@U) (|l#2@@69| T@U) (|l#3@@69| Bool) ) (! (let ((alpha@@81 (FieldTypeInv0 (type $f@@74)))) (=> (and (and (and (and (= (type $o@@108) refType) (= (type $f@@74) (FieldType alpha@@81))) (= (type |l#0@@69|) refType)) (= (type |l#1@@69|) (MapType0Type refType MapType1Type))) (= (type |l#2@@69|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#70| |l#0@@69| |l#1@@69| |l#2@@69| |l#3@@69|) $o@@108 $f@@74))  (=> (and (not (= $o@@108 |l#0@@69|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@69| $o@@108) |l#2@@69|))) |l#3@@69|)))) :qid |GenericM.886:7| :skolemid |4095| :pattern ( (MapType6Select (|lambda#70| |l#0@@69| |l#1@@69| |l#2@@69| |l#3@@69|) $o@@108 $f@@74)) )))
(assert (forall ((arg0@@382 T@U) (arg1@@237 T@U) (arg2@@179 T@U) (arg3@@135 Bool) ) (! (= (type (|lambda#71| arg0@@382 arg1@@237 arg2@@179 arg3@@135)) (MapType6Type refType boolType)) :qid |funType:lambda#71| :pattern ( (|lambda#71| arg0@@382 arg1@@237 arg2@@179 arg3@@135)) )))
(assert (forall (($o@@109 T@U) ($f@@75 T@U) (|l#0@@70| T@U) (|l#1@@70| T@U) (|l#2@@70| T@U) (|l#3@@70| Bool) ) (! (let ((alpha@@82 (FieldTypeInv0 (type $f@@75)))) (=> (and (and (and (and (= (type $o@@109) refType) (= (type $f@@75) (FieldType alpha@@82))) (= (type |l#0@@70|) refType)) (= (type |l#1@@70|) (MapType0Type refType MapType1Type))) (= (type |l#2@@70|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#71| |l#0@@70| |l#1@@70| |l#2@@70| |l#3@@70|) $o@@109 $f@@75))  (=> (and (not (= $o@@109 |l#0@@70|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@70| $o@@109) |l#2@@70|))) |l#3@@70|)))) :qid |GenericM.886:7| :skolemid |4096| :pattern ( (MapType6Select (|lambda#71| |l#0@@70| |l#1@@70| |l#2@@70| |l#3@@70|) $o@@109 $f@@75)) )))
(assert (forall ((arg0@@383 T@U) (arg1@@238 T@U) (arg2@@180 T@U) (arg3@@136 Bool) ) (! (= (type (|lambda#72| arg0@@383 arg1@@238 arg2@@180 arg3@@136)) (MapType6Type refType boolType)) :qid |funType:lambda#72| :pattern ( (|lambda#72| arg0@@383 arg1@@238 arg2@@180 arg3@@136)) )))
(assert (forall (($o@@110 T@U) ($f@@76 T@U) (|l#0@@71| T@U) (|l#1@@71| T@U) (|l#2@@71| T@U) (|l#3@@71| Bool) ) (! (let ((alpha@@83 (FieldTypeInv0 (type $f@@76)))) (=> (and (and (and (and (= (type $o@@110) refType) (= (type $f@@76) (FieldType alpha@@83))) (= (type |l#0@@71|) refType)) (= (type |l#1@@71|) (MapType0Type refType MapType1Type))) (= (type |l#2@@71|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#72| |l#0@@71| |l#1@@71| |l#2@@71| |l#3@@71|) $o@@110 $f@@76))  (=> (and (not (= $o@@110 |l#0@@71|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@71| $o@@110) |l#2@@71|))) |l#3@@71|)))) :qid |GenericM.940:7| :skolemid |4097| :pattern ( (MapType6Select (|lambda#72| |l#0@@71| |l#1@@71| |l#2@@71| |l#3@@71|) $o@@110 $f@@76)) )))
(assert (forall ((arg0@@384 T@U) (arg1@@239 T@U) (arg2@@181 T@U) (arg3@@137 Bool) ) (! (= (type (|lambda#73| arg0@@384 arg1@@239 arg2@@181 arg3@@137)) (MapType6Type refType boolType)) :qid |funType:lambda#73| :pattern ( (|lambda#73| arg0@@384 arg1@@239 arg2@@181 arg3@@137)) )))
(assert (forall (($o@@111 T@U) ($f@@77 T@U) (|l#0@@72| T@U) (|l#1@@72| T@U) (|l#2@@72| T@U) (|l#3@@72| Bool) ) (! (let ((alpha@@84 (FieldTypeInv0 (type $f@@77)))) (=> (and (and (and (and (= (type $o@@111) refType) (= (type $f@@77) (FieldType alpha@@84))) (= (type |l#0@@72|) refType)) (= (type |l#1@@72|) (MapType0Type refType MapType1Type))) (= (type |l#2@@72|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#73| |l#0@@72| |l#1@@72| |l#2@@72| |l#3@@72|) $o@@111 $f@@77))  (=> (and (not (= $o@@111 |l#0@@72|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@72| $o@@111) |l#2@@72|))) |l#3@@72|)))) :qid |GenericM.940:7| :skolemid |4098| :pattern ( (MapType6Select (|lambda#73| |l#0@@72| |l#1@@72| |l#2@@72| |l#3@@72|) $o@@111 $f@@77)) )))
(assert (forall ((arg0@@385 T@U) (arg1@@240 T@U) (arg2@@182 T@U) (arg3@@138 Bool) ) (! (= (type (|lambda#74| arg0@@385 arg1@@240 arg2@@182 arg3@@138)) (MapType6Type refType boolType)) :qid |funType:lambda#74| :pattern ( (|lambda#74| arg0@@385 arg1@@240 arg2@@182 arg3@@138)) )))
(assert (forall (($o@@112 T@U) ($f@@78 T@U) (|l#0@@73| T@U) (|l#1@@73| T@U) (|l#2@@73| T@U) (|l#3@@73| Bool) ) (! (let ((alpha@@85 (FieldTypeInv0 (type $f@@78)))) (=> (and (and (and (and (= (type $o@@112) refType) (= (type $f@@78) (FieldType alpha@@85))) (= (type |l#0@@73|) refType)) (= (type |l#1@@73|) (MapType0Type refType MapType1Type))) (= (type |l#2@@73|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#74| |l#0@@73| |l#1@@73| |l#2@@73| |l#3@@73|) $o@@112 $f@@78))  (=> (and (not (= $o@@112 |l#0@@73|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@73| $o@@112) |l#2@@73|))) |l#3@@73|)))) :qid |GenericM.994:7| :skolemid |4099| :pattern ( (MapType6Select (|lambda#74| |l#0@@73| |l#1@@73| |l#2@@73| |l#3@@73|) $o@@112 $f@@78)) )))
(assert (forall ((arg0@@386 T@U) (arg1@@241 T@U) (arg2@@183 T@U) (arg3@@139 Bool) ) (! (= (type (|lambda#75| arg0@@386 arg1@@241 arg2@@183 arg3@@139)) (MapType6Type refType boolType)) :qid |funType:lambda#75| :pattern ( (|lambda#75| arg0@@386 arg1@@241 arg2@@183 arg3@@139)) )))
(assert (forall (($o@@113 T@U) ($f@@79 T@U) (|l#0@@74| T@U) (|l#1@@74| T@U) (|l#2@@74| T@U) (|l#3@@74| Bool) ) (! (let ((alpha@@86 (FieldTypeInv0 (type $f@@79)))) (=> (and (and (and (and (= (type $o@@113) refType) (= (type $f@@79) (FieldType alpha@@86))) (= (type |l#0@@74|) refType)) (= (type |l#1@@74|) (MapType0Type refType MapType1Type))) (= (type |l#2@@74|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#75| |l#0@@74| |l#1@@74| |l#2@@74| |l#3@@74|) $o@@113 $f@@79))  (=> (and (not (= $o@@113 |l#0@@74|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@74| $o@@113) |l#2@@74|))) |l#3@@74|)))) :qid |GenericM.1012:7| :skolemid |4100| :pattern ( (MapType6Select (|lambda#75| |l#0@@74| |l#1@@74| |l#2@@74| |l#3@@74|) $o@@113 $f@@79)) )))
(assert (forall ((arg0@@387 T@U) (arg1@@242 T@U) (arg2@@184 T@U) (arg3@@140 Bool) ) (! (= (type (|lambda#76| arg0@@387 arg1@@242 arg2@@184 arg3@@140)) (MapType6Type refType boolType)) :qid |funType:lambda#76| :pattern ( (|lambda#76| arg0@@387 arg1@@242 arg2@@184 arg3@@140)) )))
(assert (forall (($o@@114 T@U) ($f@@80 T@U) (|l#0@@75| T@U) (|l#1@@75| T@U) (|l#2@@75| T@U) (|l#3@@75| Bool) ) (! (let ((alpha@@87 (FieldTypeInv0 (type $f@@80)))) (=> (and (and (and (and (= (type $o@@114) refType) (= (type $f@@80) (FieldType alpha@@87))) (= (type |l#0@@75|) refType)) (= (type |l#1@@75|) (MapType0Type refType MapType1Type))) (= (type |l#2@@75|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#76| |l#0@@75| |l#1@@75| |l#2@@75| |l#3@@75|) $o@@114 $f@@80))  (=> (and (not (= $o@@114 |l#0@@75|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@75| $o@@114) |l#2@@75|))) |l#3@@75|)))) :qid |GenericM.1025:7| :skolemid |4101| :pattern ( (MapType6Select (|lambda#76| |l#0@@75| |l#1@@75| |l#2@@75| |l#3@@75|) $o@@114 $f@@80)) )))
(assert (forall ((arg0@@388 T@U) (arg1@@243 T@U) (arg2@@185 T@U) (arg3@@141 Bool) ) (! (= (type (|lambda#77| arg0@@388 arg1@@243 arg2@@185 arg3@@141)) (MapType6Type refType boolType)) :qid |funType:lambda#77| :pattern ( (|lambda#77| arg0@@388 arg1@@243 arg2@@185 arg3@@141)) )))
(assert (forall (($o@@115 T@U) ($f@@81 T@U) (|l#0@@76| T@U) (|l#1@@76| T@U) (|l#2@@76| T@U) (|l#3@@76| Bool) ) (! (let ((alpha@@88 (FieldTypeInv0 (type $f@@81)))) (=> (and (and (and (and (= (type $o@@115) refType) (= (type $f@@81) (FieldType alpha@@88))) (= (type |l#0@@76|) refType)) (= (type |l#1@@76|) (MapType0Type refType MapType1Type))) (= (type |l#2@@76|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#77| |l#0@@76| |l#1@@76| |l#2@@76| |l#3@@76|) $o@@115 $f@@81))  (=> (and (not (= $o@@115 |l#0@@76|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@76| $o@@115) |l#2@@76|))) |l#3@@76|)))) :qid |GenericM.1025:7| :skolemid |4102| :pattern ( (MapType6Select (|lambda#77| |l#0@@76| |l#1@@76| |l#2@@76| |l#3@@76|) $o@@115 $f@@81)) )))
(assert (forall ((arg0@@389 T@U) (arg1@@244 T@U) (arg2@@186 T@U) (arg3@@142 Bool) ) (! (= (type (|lambda#78| arg0@@389 arg1@@244 arg2@@186 arg3@@142)) (MapType6Type refType boolType)) :qid |funType:lambda#78| :pattern ( (|lambda#78| arg0@@389 arg1@@244 arg2@@186 arg3@@142)) )))
(assert (forall (($o@@116 T@U) ($f@@82 T@U) (|l#0@@77| T@U) (|l#1@@77| T@U) (|l#2@@77| T@U) (|l#3@@77| Bool) ) (! (let ((alpha@@89 (FieldTypeInv0 (type $f@@82)))) (=> (and (and (and (and (= (type $o@@116) refType) (= (type $f@@82) (FieldType alpha@@89))) (= (type |l#0@@77|) refType)) (= (type |l#1@@77|) (MapType0Type refType MapType1Type))) (= (type |l#2@@77|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#78| |l#0@@77| |l#1@@77| |l#2@@77| |l#3@@77|) $o@@116 $f@@82))  (=> (and (not (= $o@@116 |l#0@@77|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@77| $o@@116) |l#2@@77|))) |l#3@@77|)))) :qid |GenericM.1037:7| :skolemid |4103| :pattern ( (MapType6Select (|lambda#78| |l#0@@77| |l#1@@77| |l#2@@77| |l#3@@77|) $o@@116 $f@@82)) )))
(assert (forall ((arg0@@390 T@U) (arg1@@245 T@U) (arg2@@187 T@U) (arg3@@143 Bool) ) (! (= (type (|lambda#79| arg0@@390 arg1@@245 arg2@@187 arg3@@143)) (MapType6Type refType boolType)) :qid |funType:lambda#79| :pattern ( (|lambda#79| arg0@@390 arg1@@245 arg2@@187 arg3@@143)) )))
(assert (forall (($o@@117 T@U) ($f@@83 T@U) (|l#0@@78| T@U) (|l#1@@78| T@U) (|l#2@@78| T@U) (|l#3@@78| Bool) ) (! (let ((alpha@@90 (FieldTypeInv0 (type $f@@83)))) (=> (and (and (and (and (= (type $o@@117) refType) (= (type $f@@83) (FieldType alpha@@90))) (= (type |l#0@@78|) refType)) (= (type |l#1@@78|) (MapType0Type refType MapType1Type))) (= (type |l#2@@78|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#79| |l#0@@78| |l#1@@78| |l#2@@78| |l#3@@78|) $o@@117 $f@@83))  (=> (and (not (= $o@@117 |l#0@@78|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@78| $o@@117) |l#2@@78|))) |l#3@@78|)))) :qid |GenericM.1037:7| :skolemid |4104| :pattern ( (MapType6Select (|lambda#79| |l#0@@78| |l#1@@78| |l#2@@78| |l#3@@78|) $o@@117 $f@@83)) )))
(assert (forall ((arg0@@391 T@U) (arg1@@246 T@U) (arg2@@188 T@U) (arg3@@144 Bool) ) (! (= (type (|lambda#80| arg0@@391 arg1@@246 arg2@@188 arg3@@144)) (MapType6Type refType boolType)) :qid |funType:lambda#80| :pattern ( (|lambda#80| arg0@@391 arg1@@246 arg2@@188 arg3@@144)) )))
(assert (forall (($o@@118 T@U) ($f@@84 T@U) (|l#0@@79| T@U) (|l#1@@79| T@U) (|l#2@@79| T@U) (|l#3@@79| Bool) ) (! (let ((alpha@@91 (FieldTypeInv0 (type $f@@84)))) (=> (and (and (and (and (= (type $o@@118) refType) (= (type $f@@84) (FieldType alpha@@91))) (= (type |l#0@@79|) refType)) (= (type |l#1@@79|) (MapType0Type refType MapType1Type))) (= (type |l#2@@79|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#80| |l#0@@79| |l#1@@79| |l#2@@79| |l#3@@79|) $o@@118 $f@@84))  (=> (and (not (= $o@@118 |l#0@@79|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@79| $o@@118) |l#2@@79|))) |l#3@@79|)))) :qid |GenericM.1059:7| :skolemid |4105| :pattern ( (MapType6Select (|lambda#80| |l#0@@79| |l#1@@79| |l#2@@79| |l#3@@79|) $o@@118 $f@@84)) )))
(assert (forall ((arg0@@392 T@U) (arg1@@247 T@U) (arg2@@189 T@U) (arg3@@145 Bool) ) (! (= (type (|lambda#81| arg0@@392 arg1@@247 arg2@@189 arg3@@145)) (MapType6Type refType boolType)) :qid |funType:lambda#81| :pattern ( (|lambda#81| arg0@@392 arg1@@247 arg2@@189 arg3@@145)) )))
(assert (forall (($o@@119 T@U) ($f@@85 T@U) (|l#0@@80| T@U) (|l#1@@80| T@U) (|l#2@@80| T@U) (|l#3@@80| Bool) ) (! (let ((alpha@@92 (FieldTypeInv0 (type $f@@85)))) (=> (and (and (and (and (= (type $o@@119) refType) (= (type $f@@85) (FieldType alpha@@92))) (= (type |l#0@@80|) refType)) (= (type |l#1@@80|) (MapType0Type refType MapType1Type))) (= (type |l#2@@80|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#81| |l#0@@80| |l#1@@80| |l#2@@80| |l#3@@80|) $o@@119 $f@@85))  (=> (and (not (= $o@@119 |l#0@@80|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@80| $o@@119) |l#2@@80|))) |l#3@@80|)))) :qid |GenericM.1059:7| :skolemid |4106| :pattern ( (MapType6Select (|lambda#81| |l#0@@80| |l#1@@80| |l#2@@80| |l#3@@80|) $o@@119 $f@@85)) )))
(assert (forall ((arg0@@393 T@U) (arg1@@248 T@U) (arg2@@190 T@U) (arg3@@146 Bool) ) (! (= (type (|lambda#82| arg0@@393 arg1@@248 arg2@@190 arg3@@146)) (MapType6Type refType boolType)) :qid |funType:lambda#82| :pattern ( (|lambda#82| arg0@@393 arg1@@248 arg2@@190 arg3@@146)) )))
(assert (forall (($o@@120 T@U) ($f@@86 T@U) (|l#0@@81| T@U) (|l#1@@81| T@U) (|l#2@@81| T@U) (|l#3@@81| Bool) ) (! (let ((alpha@@93 (FieldTypeInv0 (type $f@@86)))) (=> (and (and (and (and (= (type $o@@120) refType) (= (type $f@@86) (FieldType alpha@@93))) (= (type |l#0@@81|) refType)) (= (type |l#1@@81|) (MapType0Type refType MapType1Type))) (= (type |l#2@@81|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#82| |l#0@@81| |l#1@@81| |l#2@@81| |l#3@@81|) $o@@120 $f@@86))  (=> (and (not (= $o@@120 |l#0@@81|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@81| $o@@120) |l#2@@81|))) |l#3@@81|)))) :qid |GenericM.1154:7| :skolemid |4107| :pattern ( (MapType6Select (|lambda#82| |l#0@@81| |l#1@@81| |l#2@@81| |l#3@@81|) $o@@120 $f@@86)) )))
(assert (forall ((arg0@@394 T@U) (arg1@@249 T@U) (arg2@@191 T@U) (arg3@@147 Bool) ) (! (= (type (|lambda#83| arg0@@394 arg1@@249 arg2@@191 arg3@@147)) (MapType6Type refType boolType)) :qid |funType:lambda#83| :pattern ( (|lambda#83| arg0@@394 arg1@@249 arg2@@191 arg3@@147)) )))
(assert (forall (($o@@121 T@U) ($f@@87 T@U) (|l#0@@82| T@U) (|l#1@@82| T@U) (|l#2@@82| T@U) (|l#3@@82| Bool) ) (! (let ((alpha@@94 (FieldTypeInv0 (type $f@@87)))) (=> (and (and (and (and (= (type $o@@121) refType) (= (type $f@@87) (FieldType alpha@@94))) (= (type |l#0@@82|) refType)) (= (type |l#1@@82|) (MapType0Type refType MapType1Type))) (= (type |l#2@@82|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#83| |l#0@@82| |l#1@@82| |l#2@@82| |l#3@@82|) $o@@121 $f@@87))  (=> (and (not (= $o@@121 |l#0@@82|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@82| $o@@121) |l#2@@82|))) |l#3@@82|)))) :qid |GenericM.1154:7| :skolemid |4108| :pattern ( (MapType6Select (|lambda#83| |l#0@@82| |l#1@@82| |l#2@@82| |l#3@@82|) $o@@121 $f@@87)) )))
(assert (forall ((arg0@@395 T@U) (arg1@@250 T@U) (arg2@@192 T@U) (arg3@@148 Bool) ) (! (= (type (|lambda#84| arg0@@395 arg1@@250 arg2@@192 arg3@@148)) (MapType6Type refType boolType)) :qid |funType:lambda#84| :pattern ( (|lambda#84| arg0@@395 arg1@@250 arg2@@192 arg3@@148)) )))
(assert (forall (($o@@122 T@U) ($f@@88 T@U) (|l#0@@83| T@U) (|l#1@@83| T@U) (|l#2@@83| T@U) (|l#3@@83| Bool) ) (! (let ((alpha@@95 (FieldTypeInv0 (type $f@@88)))) (=> (and (and (and (and (= (type $o@@122) refType) (= (type $f@@88) (FieldType alpha@@95))) (= (type |l#0@@83|) refType)) (= (type |l#1@@83|) (MapType0Type refType MapType1Type))) (= (type |l#2@@83|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#84| |l#0@@83| |l#1@@83| |l#2@@83| |l#3@@83|) $o@@122 $f@@88))  (=> (and (not (= $o@@122 |l#0@@83|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@83| $o@@122) |l#2@@83|))) |l#3@@83|)))) :qid |GenericM.1190:7| :skolemid |4109| :pattern ( (MapType6Select (|lambda#84| |l#0@@83| |l#1@@83| |l#2@@83| |l#3@@83|) $o@@122 $f@@88)) )))
(assert (forall ((arg0@@396 T@U) (arg1@@251 T@U) (arg2@@193 T@U) (arg3@@149 Bool) ) (! (= (type (|lambda#85| arg0@@396 arg1@@251 arg2@@193 arg3@@149)) (MapType6Type refType boolType)) :qid |funType:lambda#85| :pattern ( (|lambda#85| arg0@@396 arg1@@251 arg2@@193 arg3@@149)) )))
(assert (forall (($o@@123 T@U) ($f@@89 T@U) (|l#0@@84| T@U) (|l#1@@84| T@U) (|l#2@@84| T@U) (|l#3@@84| Bool) ) (! (let ((alpha@@96 (FieldTypeInv0 (type $f@@89)))) (=> (and (and (and (and (= (type $o@@123) refType) (= (type $f@@89) (FieldType alpha@@96))) (= (type |l#0@@84|) refType)) (= (type |l#1@@84|) (MapType0Type refType MapType1Type))) (= (type |l#2@@84|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#85| |l#0@@84| |l#1@@84| |l#2@@84| |l#3@@84|) $o@@123 $f@@89))  (=> (and (not (= $o@@123 |l#0@@84|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@84| $o@@123) |l#2@@84|))) |l#3@@84|)))) :qid |GenericM.1190:7| :skolemid |4110| :pattern ( (MapType6Select (|lambda#85| |l#0@@84| |l#1@@84| |l#2@@84| |l#3@@84|) $o@@123 $f@@89)) )))
(assert (forall ((arg0@@397 T@U) (arg1@@252 T@U) (arg2@@194 T@U) (arg3@@150 Bool) ) (! (= (type (|lambda#86| arg0@@397 arg1@@252 arg2@@194 arg3@@150)) (MapType6Type refType boolType)) :qid |funType:lambda#86| :pattern ( (|lambda#86| arg0@@397 arg1@@252 arg2@@194 arg3@@150)) )))
(assert (forall (($o@@124 T@U) ($f@@90 T@U) (|l#0@@85| T@U) (|l#1@@85| T@U) (|l#2@@85| T@U) (|l#3@@85| Bool) ) (! (let ((alpha@@97 (FieldTypeInv0 (type $f@@90)))) (=> (and (and (and (and (= (type $o@@124) refType) (= (type $f@@90) (FieldType alpha@@97))) (= (type |l#0@@85|) refType)) (= (type |l#1@@85|) (MapType0Type refType MapType1Type))) (= (type |l#2@@85|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#86| |l#0@@85| |l#1@@85| |l#2@@85| |l#3@@85|) $o@@124 $f@@90))  (=> (and (not (= $o@@124 |l#0@@85|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@85| $o@@124) |l#2@@85|))) |l#3@@85|)))) :qid |GenericM.1285:7| :skolemid |4111| :pattern ( (MapType6Select (|lambda#86| |l#0@@85| |l#1@@85| |l#2@@85| |l#3@@85|) $o@@124 $f@@90)) )))
(assert (forall ((arg0@@398 T@U) (arg1@@253 T@U) (arg2@@195 T@U) (arg3@@151 Bool) ) (! (= (type (|lambda#87| arg0@@398 arg1@@253 arg2@@195 arg3@@151)) (MapType6Type refType boolType)) :qid |funType:lambda#87| :pattern ( (|lambda#87| arg0@@398 arg1@@253 arg2@@195 arg3@@151)) )))
(assert (forall (($o@@125 T@U) ($f@@91 T@U) (|l#0@@86| T@U) (|l#1@@86| T@U) (|l#2@@86| T@U) (|l#3@@86| Bool) ) (! (let ((alpha@@98 (FieldTypeInv0 (type $f@@91)))) (=> (and (and (and (and (= (type $o@@125) refType) (= (type $f@@91) (FieldType alpha@@98))) (= (type |l#0@@86|) refType)) (= (type |l#1@@86|) (MapType0Type refType MapType1Type))) (= (type |l#2@@86|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#87| |l#0@@86| |l#1@@86| |l#2@@86| |l#3@@86|) $o@@125 $f@@91))  (=> (and (not (= $o@@125 |l#0@@86|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@86| $o@@125) |l#2@@86|))) |l#3@@86|)))) :qid |GenericM.1285:7| :skolemid |4112| :pattern ( (MapType6Select (|lambda#87| |l#0@@86| |l#1@@86| |l#2@@86| |l#3@@86|) $o@@125 $f@@91)) )))
(assert (forall ((arg0@@399 T@U) (arg1@@254 T@U) (arg2@@196 T@U) (arg3@@152 Bool) ) (! (= (type (|lambda#88| arg0@@399 arg1@@254 arg2@@196 arg3@@152)) (MapType6Type refType boolType)) :qid |funType:lambda#88| :pattern ( (|lambda#88| arg0@@399 arg1@@254 arg2@@196 arg3@@152)) )))
(assert (forall (($o@@126 T@U) ($f@@92 T@U) (|l#0@@87| T@U) (|l#1@@87| T@U) (|l#2@@87| T@U) (|l#3@@87| Bool) ) (! (let ((alpha@@99 (FieldTypeInv0 (type $f@@92)))) (=> (and (and (and (and (= (type $o@@126) refType) (= (type $f@@92) (FieldType alpha@@99))) (= (type |l#0@@87|) refType)) (= (type |l#1@@87|) (MapType0Type refType MapType1Type))) (= (type |l#2@@87|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#88| |l#0@@87| |l#1@@87| |l#2@@87| |l#3@@87|) $o@@126 $f@@92))  (=> (and (not (= $o@@126 |l#0@@87|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@87| $o@@126) |l#2@@87|))) |l#3@@87|)))) :qid |GenericM.1319:7| :skolemid |4113| :pattern ( (MapType6Select (|lambda#88| |l#0@@87| |l#1@@87| |l#2@@87| |l#3@@87|) $o@@126 $f@@92)) )))
(assert (forall ((arg0@@400 T@U) (arg1@@255 T@U) (arg2@@197 T@U) (arg3@@153 Bool) ) (! (= (type (|lambda#89| arg0@@400 arg1@@255 arg2@@197 arg3@@153)) (MapType6Type refType boolType)) :qid |funType:lambda#89| :pattern ( (|lambda#89| arg0@@400 arg1@@255 arg2@@197 arg3@@153)) )))
(assert (forall (($o@@127 T@U) ($f@@93 T@U) (|l#0@@88| T@U) (|l#1@@88| T@U) (|l#2@@88| T@U) (|l#3@@88| Bool) ) (! (let ((alpha@@100 (FieldTypeInv0 (type $f@@93)))) (=> (and (and (and (and (= (type $o@@127) refType) (= (type $f@@93) (FieldType alpha@@100))) (= (type |l#0@@88|) refType)) (= (type |l#1@@88|) (MapType0Type refType MapType1Type))) (= (type |l#2@@88|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#89| |l#0@@88| |l#1@@88| |l#2@@88| |l#3@@88|) $o@@127 $f@@93))  (=> (and (not (= $o@@127 |l#0@@88|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@88| $o@@127) |l#2@@88|))) |l#3@@88|)))) :qid |GenericM.1319:7| :skolemid |4114| :pattern ( (MapType6Select (|lambda#89| |l#0@@88| |l#1@@88| |l#2@@88| |l#3@@88|) $o@@127 $f@@93)) )))
(assert (forall ((arg0@@401 T@U) (arg1@@256 T@U) (arg2@@198 T@U) (arg3@@154 Bool) ) (! (= (type (|lambda#90| arg0@@401 arg1@@256 arg2@@198 arg3@@154)) (MapType6Type refType boolType)) :qid |funType:lambda#90| :pattern ( (|lambda#90| arg0@@401 arg1@@256 arg2@@198 arg3@@154)) )))
(assert (forall (($o@@128 T@U) ($f@@94 T@U) (|l#0@@89| T@U) (|l#1@@89| T@U) (|l#2@@89| T@U) (|l#3@@89| Bool) ) (! (let ((alpha@@101 (FieldTypeInv0 (type $f@@94)))) (=> (and (and (and (and (= (type $o@@128) refType) (= (type $f@@94) (FieldType alpha@@101))) (= (type |l#0@@89|) refType)) (= (type |l#1@@89|) (MapType0Type refType MapType1Type))) (= (type |l#2@@89|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#90| |l#0@@89| |l#1@@89| |l#2@@89| |l#3@@89|) $o@@128 $f@@94))  (=> (and (not (= $o@@128 |l#0@@89|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@89| $o@@128) |l#2@@89|))) |l#3@@89|)))) :qid |GenericM.1357:7| :skolemid |4115| :pattern ( (MapType6Select (|lambda#90| |l#0@@89| |l#1@@89| |l#2@@89| |l#3@@89|) $o@@128 $f@@94)) )))
(assert (forall ((arg0@@402 T@U) (arg1@@257 T@U) (arg2@@199 T@U) (arg3@@155 Bool) ) (! (= (type (|lambda#91| arg0@@402 arg1@@257 arg2@@199 arg3@@155)) (MapType6Type refType boolType)) :qid |funType:lambda#91| :pattern ( (|lambda#91| arg0@@402 arg1@@257 arg2@@199 arg3@@155)) )))
(assert (forall (($o@@129 T@U) ($f@@95 T@U) (|l#0@@90| T@U) (|l#1@@90| T@U) (|l#2@@90| T@U) (|l#3@@90| Bool) ) (! (let ((alpha@@102 (FieldTypeInv0 (type $f@@95)))) (=> (and (and (and (and (= (type $o@@129) refType) (= (type $f@@95) (FieldType alpha@@102))) (= (type |l#0@@90|) refType)) (= (type |l#1@@90|) (MapType0Type refType MapType1Type))) (= (type |l#2@@90|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#91| |l#0@@90| |l#1@@90| |l#2@@90| |l#3@@90|) $o@@129 $f@@95))  (=> (and (not (= $o@@129 |l#0@@90|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@90| $o@@129) |l#2@@90|))) |l#3@@90|)))) :qid |GenericM.1357:7| :skolemid |4116| :pattern ( (MapType6Select (|lambda#91| |l#0@@90| |l#1@@90| |l#2@@90| |l#3@@90|) $o@@129 $f@@95)) )))
(assert (forall ((arg0@@403 T@U) (arg1@@258 T@U) (arg2@@200 T@U) (arg3@@156 Bool) ) (! (= (type (|lambda#92| arg0@@403 arg1@@258 arg2@@200 arg3@@156)) (MapType6Type refType boolType)) :qid |funType:lambda#92| :pattern ( (|lambda#92| arg0@@403 arg1@@258 arg2@@200 arg3@@156)) )))
(assert (forall (($o@@130 T@U) ($f@@96 T@U) (|l#0@@91| T@U) (|l#1@@91| T@U) (|l#2@@91| T@U) (|l#3@@91| Bool) ) (! (let ((alpha@@103 (FieldTypeInv0 (type $f@@96)))) (=> (and (and (and (and (= (type $o@@130) refType) (= (type $f@@96) (FieldType alpha@@103))) (= (type |l#0@@91|) refType)) (= (type |l#1@@91|) (MapType0Type refType MapType1Type))) (= (type |l#2@@91|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#92| |l#0@@91| |l#1@@91| |l#2@@91| |l#3@@91|) $o@@130 $f@@96))  (=> (and (not (= $o@@130 |l#0@@91|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@91| $o@@130) |l#2@@91|))) |l#3@@91|)))) :qid |GenericM.1399:7| :skolemid |4117| :pattern ( (MapType6Select (|lambda#92| |l#0@@91| |l#1@@91| |l#2@@91| |l#3@@91|) $o@@130 $f@@96)) )))
(assert (forall ((arg0@@404 T@U) (arg1@@259 T@U) (arg2@@201 T@U) (arg3@@157 Bool) ) (! (= (type (|lambda#93| arg0@@404 arg1@@259 arg2@@201 arg3@@157)) (MapType6Type refType boolType)) :qid |funType:lambda#93| :pattern ( (|lambda#93| arg0@@404 arg1@@259 arg2@@201 arg3@@157)) )))
(assert (forall (($o@@131 T@U) ($f@@97 T@U) (|l#0@@92| T@U) (|l#1@@92| T@U) (|l#2@@92| T@U) (|l#3@@92| Bool) ) (! (let ((alpha@@104 (FieldTypeInv0 (type $f@@97)))) (=> (and (and (and (and (= (type $o@@131) refType) (= (type $f@@97) (FieldType alpha@@104))) (= (type |l#0@@92|) refType)) (= (type |l#1@@92|) (MapType0Type refType MapType1Type))) (= (type |l#2@@92|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#93| |l#0@@92| |l#1@@92| |l#2@@92| |l#3@@92|) $o@@131 $f@@97))  (=> (and (not (= $o@@131 |l#0@@92|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@92| $o@@131) |l#2@@92|))) |l#3@@92|)))) :qid |GenericM.1399:7| :skolemid |4118| :pattern ( (MapType6Select (|lambda#93| |l#0@@92| |l#1@@92| |l#2@@92| |l#3@@92|) $o@@131 $f@@97)) )))
(assert (forall ((arg0@@405 T@U) (arg1@@260 T@U) (arg2@@202 T@U) (arg3@@158 Bool) ) (! (= (type (|lambda#94| arg0@@405 arg1@@260 arg2@@202 arg3@@158)) (MapType6Type refType boolType)) :qid |funType:lambda#94| :pattern ( (|lambda#94| arg0@@405 arg1@@260 arg2@@202 arg3@@158)) )))
(assert (forall (($o@@132 T@U) ($f@@98 T@U) (|l#0@@93| T@U) (|l#1@@93| T@U) (|l#2@@93| T@U) (|l#3@@93| Bool) ) (! (let ((alpha@@105 (FieldTypeInv0 (type $f@@98)))) (=> (and (and (and (and (= (type $o@@132) refType) (= (type $f@@98) (FieldType alpha@@105))) (= (type |l#0@@93|) refType)) (= (type |l#1@@93|) (MapType0Type refType MapType1Type))) (= (type |l#2@@93|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#94| |l#0@@93| |l#1@@93| |l#2@@93| |l#3@@93|) $o@@132 $f@@98))  (=> (and (not (= $o@@132 |l#0@@93|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@93| $o@@132) |l#2@@93|))) |l#3@@93|)))) :qid |GenericM.1429:8| :skolemid |4119| :pattern ( (MapType6Select (|lambda#94| |l#0@@93| |l#1@@93| |l#2@@93| |l#3@@93|) $o@@132 $f@@98)) )))
(assert (forall ((arg0@@406 T@U) (arg1@@261 T@U) (arg2@@203 T@U) (arg3@@159 Bool) ) (! (= (type (|lambda#95| arg0@@406 arg1@@261 arg2@@203 arg3@@159)) (MapType6Type refType boolType)) :qid |funType:lambda#95| :pattern ( (|lambda#95| arg0@@406 arg1@@261 arg2@@203 arg3@@159)) )))
(assert (forall (($o@@133 T@U) ($f@@99 T@U) (|l#0@@94| T@U) (|l#1@@94| T@U) (|l#2@@94| T@U) (|l#3@@94| Bool) ) (! (let ((alpha@@106 (FieldTypeInv0 (type $f@@99)))) (=> (and (and (and (and (= (type $o@@133) refType) (= (type $f@@99) (FieldType alpha@@106))) (= (type |l#0@@94|) refType)) (= (type |l#1@@94|) (MapType0Type refType MapType1Type))) (= (type |l#2@@94|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#95| |l#0@@94| |l#1@@94| |l#2@@94| |l#3@@94|) $o@@133 $f@@99))  (=> (and (not (= $o@@133 |l#0@@94|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@94| $o@@133) |l#2@@94|))) |l#3@@94|)))) :qid |GenericM.1462:8| :skolemid |4120| :pattern ( (MapType6Select (|lambda#95| |l#0@@94| |l#1@@94| |l#2@@94| |l#3@@94|) $o@@133 $f@@99)) )))
(assert (forall ((arg0@@407 T@U) (arg1@@262 T@U) (arg2@@204 T@U) (arg3@@160 T@U) ) (! (= (type (|lambda#96| arg0@@407 arg1@@262 arg2@@204 arg3@@160)) (MapType6Type refType boolType)) :qid |funType:lambda#96| :pattern ( (|lambda#96| arg0@@407 arg1@@262 arg2@@204 arg3@@160)) )))
(assert (forall (($o@@134 T@U) ($f@@100 T@U) (|l#0@@95| T@U) (|l#1@@95| T@U) (|l#2@@95| T@U) (|l#3@@95| T@U) ) (! (let ((alpha@@107 (FieldTypeInv0 (type $f@@100)))) (=> (and (and (and (and (and (= (type $o@@134) refType) (= (type $f@@100) (FieldType alpha@@107))) (= (type |l#0@@95|) refType)) (= (type |l#1@@95|) (MapType0Type refType MapType1Type))) (= (type |l#2@@95|) (FieldType boolType))) (= (type |l#3@@95|) refType)) (= (U_2_bool (MapType6Select (|lambda#96| |l#0@@95| |l#1@@95| |l#2@@95| |l#3@@95|) $o@@134 $f@@100))  (=> (and (not (= $o@@134 |l#0@@95|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@95| $o@@134) |l#2@@95|))) (= $o@@134 |l#3@@95|))))) :qid |GenericM.1529:8| :skolemid |4121| :pattern ( (MapType6Select (|lambda#96| |l#0@@95| |l#1@@95| |l#2@@95| |l#3@@95|) $o@@134 $f@@100)) )))
(assert (forall ((arg0@@408 T@U) (arg1@@263 T@U) (arg2@@205 T@U) (arg3@@161 T@U) ) (! (= (type (|lambda#97| arg0@@408 arg1@@263 arg2@@205 arg3@@161)) (MapType6Type refType boolType)) :qid |funType:lambda#97| :pattern ( (|lambda#97| arg0@@408 arg1@@263 arg2@@205 arg3@@161)) )))
(assert (forall (($o@@135 T@U) ($f@@101 T@U) (|l#0@@96| T@U) (|l#1@@96| T@U) (|l#2@@96| T@U) (|l#3@@96| T@U) ) (! (let ((alpha@@108 (FieldTypeInv0 (type $f@@101)))) (=> (and (and (and (and (and (= (type $o@@135) refType) (= (type $f@@101) (FieldType alpha@@108))) (= (type |l#0@@96|) refType)) (= (type |l#1@@96|) (MapType0Type refType MapType1Type))) (= (type |l#2@@96|) (FieldType boolType))) (= (type |l#3@@96|) refType)) (= (U_2_bool (MapType6Select (|lambda#97| |l#0@@96| |l#1@@96| |l#2@@96| |l#3@@96|) $o@@135 $f@@101))  (=> (and (not (= $o@@135 |l#0@@96|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@96| $o@@135) |l#2@@96|))) (= $o@@135 |l#3@@96|))))) :qid |GenericM.1529:8| :skolemid |4122| :pattern ( (MapType6Select (|lambda#97| |l#0@@96| |l#1@@96| |l#2@@96| |l#3@@96|) $o@@135 $f@@101)) )))
(assert (forall ((arg0@@409 T@U) (arg1@@264 T@U) (arg2@@206 T@U) (arg3@@162 T@U) ) (! (= (type (|lambda#98| arg0@@409 arg1@@264 arg2@@206 arg3@@162)) (MapType6Type refType boolType)) :qid |funType:lambda#98| :pattern ( (|lambda#98| arg0@@409 arg1@@264 arg2@@206 arg3@@162)) )))
(assert (forall (($o@@136 T@U) ($f@@102 T@U) (|l#0@@97| T@U) (|l#1@@97| T@U) (|l#2@@97| T@U) (|l#3@@97| T@U) ) (! (let ((alpha@@109 (FieldTypeInv0 (type $f@@102)))) (=> (and (and (and (and (and (= (type $o@@136) refType) (= (type $f@@102) (FieldType alpha@@109))) (= (type |l#0@@97|) refType)) (= (type |l#1@@97|) (MapType0Type refType MapType1Type))) (= (type |l#2@@97|) (FieldType boolType))) (= (type |l#3@@97|) refType)) (= (U_2_bool (MapType6Select (|lambda#98| |l#0@@97| |l#1@@97| |l#2@@97| |l#3@@97|) $o@@136 $f@@102))  (=> (and (not (= $o@@136 |l#0@@97|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@97| $o@@136) |l#2@@97|))) (= $o@@136 |l#3@@97|))))) :qid |GenericM.1558:8| :skolemid |4123| :pattern ( (MapType6Select (|lambda#98| |l#0@@97| |l#1@@97| |l#2@@97| |l#3@@97|) $o@@136 $f@@102)) )))
(assert (forall ((arg0@@410 T@U) (arg1@@265 T@U) (arg2@@207 T@U) (arg3@@163 T@U) ) (! (= (type (|lambda#99| arg0@@410 arg1@@265 arg2@@207 arg3@@163)) (MapType6Type refType boolType)) :qid |funType:lambda#99| :pattern ( (|lambda#99| arg0@@410 arg1@@265 arg2@@207 arg3@@163)) )))
(assert (forall (($o@@137 T@U) ($f@@103 T@U) (|l#0@@98| T@U) (|l#1@@98| T@U) (|l#2@@98| T@U) (|l#3@@98| T@U) ) (! (let ((alpha@@110 (FieldTypeInv0 (type $f@@103)))) (=> (and (and (and (and (and (= (type $o@@137) refType) (= (type $f@@103) (FieldType alpha@@110))) (= (type |l#0@@98|) refType)) (= (type |l#1@@98|) (MapType0Type refType MapType1Type))) (= (type |l#2@@98|) (FieldType boolType))) (= (type |l#3@@98|) refType)) (= (U_2_bool (MapType6Select (|lambda#99| |l#0@@98| |l#1@@98| |l#2@@98| |l#3@@98|) $o@@137 $f@@103))  (=> (and (not (= $o@@137 |l#0@@98|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@98| $o@@137) |l#2@@98|))) (= $o@@137 |l#3@@98|))))) :qid |GenericM.1558:8| :skolemid |4124| :pattern ( (MapType6Select (|lambda#99| |l#0@@98| |l#1@@98| |l#2@@98| |l#3@@98|) $o@@137 $f@@103)) )))
(assert (forall ((arg0@@411 T@U) (arg1@@266 T@U) (arg2@@208 T@U) (arg3@@164 Bool) ) (! (= (type (|lambda#100| arg0@@411 arg1@@266 arg2@@208 arg3@@164)) (MapType6Type refType boolType)) :qid |funType:lambda#100| :pattern ( (|lambda#100| arg0@@411 arg1@@266 arg2@@208 arg3@@164)) )))
(assert (forall (($o@@138 T@U) ($f@@104 T@U) (|l#0@@99| T@U) (|l#1@@99| T@U) (|l#2@@99| T@U) (|l#3@@99| Bool) ) (! (let ((alpha@@111 (FieldTypeInv0 (type $f@@104)))) (=> (and (and (and (and (= (type $o@@138) refType) (= (type $f@@104) (FieldType alpha@@111))) (= (type |l#0@@99|) refType)) (= (type |l#1@@99|) (MapType0Type refType MapType1Type))) (= (type |l#2@@99|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#100| |l#0@@99| |l#1@@99| |l#2@@99| |l#3@@99|) $o@@138 $f@@104))  (=> (and (not (= $o@@138 |l#0@@99|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@99| $o@@138) |l#2@@99|))) |l#3@@99|)))) :qid |GenericM.1587:7| :skolemid |4125| :pattern ( (MapType6Select (|lambda#100| |l#0@@99| |l#1@@99| |l#2@@99| |l#3@@99|) $o@@138 $f@@104)) )))
(assert (forall ((arg0@@412 T@U) (arg1@@267 T@U) (arg2@@209 T@U) (arg3@@165 Bool) ) (! (= (type (|lambda#101| arg0@@412 arg1@@267 arg2@@209 arg3@@165)) (MapType6Type refType boolType)) :qid |funType:lambda#101| :pattern ( (|lambda#101| arg0@@412 arg1@@267 arg2@@209 arg3@@165)) )))
(assert (forall (($o@@139 T@U) ($f@@105 T@U) (|l#0@@100| T@U) (|l#1@@100| T@U) (|l#2@@100| T@U) (|l#3@@100| Bool) ) (! (let ((alpha@@112 (FieldTypeInv0 (type $f@@105)))) (=> (and (and (and (and (= (type $o@@139) refType) (= (type $f@@105) (FieldType alpha@@112))) (= (type |l#0@@100|) refType)) (= (type |l#1@@100|) (MapType0Type refType MapType1Type))) (= (type |l#2@@100|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#101| |l#0@@100| |l#1@@100| |l#2@@100| |l#3@@100|) $o@@139 $f@@105))  (=> (and (not (= $o@@139 |l#0@@100|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@100| $o@@139) |l#2@@100|))) |l#3@@100|)))) :qid |GenericM.1587:7| :skolemid |4126| :pattern ( (MapType6Select (|lambda#101| |l#0@@100| |l#1@@100| |l#2@@100| |l#3@@100|) $o@@139 $f@@105)) )))
(assert (forall ((arg0@@413 T@U) (arg1@@268 T@U) (arg2@@210 T@U) (arg3@@166 T@U) ) (! (= (type (|lambda#102| arg0@@413 arg1@@268 arg2@@210 arg3@@166)) (MapType6Type refType boolType)) :qid |funType:lambda#102| :pattern ( (|lambda#102| arg0@@413 arg1@@268 arg2@@210 arg3@@166)) )))
(assert (forall (($o@@140 T@U) ($f@@106 T@U) (|l#0@@101| T@U) (|l#1@@101| T@U) (|l#2@@101| T@U) (|l#3@@101| T@U) ) (! (let ((alpha@@113 (FieldTypeInv0 (type $f@@106)))) (=> (and (and (and (and (and (= (type $o@@140) refType) (= (type $f@@106) (FieldType alpha@@113))) (= (type |l#0@@101|) refType)) (= (type |l#1@@101|) (MapType0Type refType MapType1Type))) (= (type |l#2@@101|) (FieldType boolType))) (= (type |l#3@@101|) refType)) (= (U_2_bool (MapType6Select (|lambda#102| |l#0@@101| |l#1@@101| |l#2@@101| |l#3@@101|) $o@@140 $f@@106))  (=> (and (not (= $o@@140 |l#0@@101|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@101| $o@@140) |l#2@@101|))) (= $o@@140 |l#3@@101|))))) :qid |GenericM.1662:32| :skolemid |4127| :pattern ( (MapType6Select (|lambda#102| |l#0@@101| |l#1@@101| |l#2@@101| |l#3@@101|) $o@@140 $f@@106)) )))
(assert (forall ((arg0@@414 T@U) (arg1@@269 T@U) (arg2@@211 T@U) (arg3@@167 T@U) ) (! (= (type (|lambda#103| arg0@@414 arg1@@269 arg2@@211 arg3@@167)) (MapType6Type refType boolType)) :qid |funType:lambda#103| :pattern ( (|lambda#103| arg0@@414 arg1@@269 arg2@@211 arg3@@167)) )))
(assert (forall (($o@@141 T@U) ($f@@107 T@U) (|l#0@@102| T@U) (|l#1@@102| T@U) (|l#2@@102| T@U) (|l#3@@102| T@U) ) (! (let ((alpha@@114 (FieldTypeInv0 (type $f@@107)))) (=> (and (and (and (and (and (= (type $o@@141) refType) (= (type $f@@107) (FieldType alpha@@114))) (= (type |l#0@@102|) refType)) (= (type |l#1@@102|) (MapType0Type refType MapType1Type))) (= (type |l#2@@102|) (FieldType boolType))) (= (type |l#3@@102|) refType)) (= (U_2_bool (MapType6Select (|lambda#103| |l#0@@102| |l#1@@102| |l#2@@102| |l#3@@102|) $o@@141 $f@@107))  (=> (and (not (= $o@@141 |l#0@@102|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@102| $o@@141) |l#2@@102|))) (= $o@@141 |l#3@@102|))))) :qid |GenericM.1662:32| :skolemid |4128| :pattern ( (MapType6Select (|lambda#103| |l#0@@102| |l#1@@102| |l#2@@102| |l#3@@102|) $o@@141 $f@@107)) )))
(assert (forall ((arg0@@415 T@U) (arg1@@270 T@U) (arg2@@212 T@U) (arg3@@168 T@U) ) (! (= (type (|lambda#104| arg0@@415 arg1@@270 arg2@@212 arg3@@168)) (MapType6Type refType boolType)) :qid |funType:lambda#104| :pattern ( (|lambda#104| arg0@@415 arg1@@270 arg2@@212 arg3@@168)) )))
(assert (forall (($o@@142 T@U) ($f@@108 T@U) (|l#0@@103| T@U) (|l#1@@103| T@U) (|l#2@@103| T@U) (|l#3@@103| T@U) ) (! (let ((alpha@@115 (FieldTypeInv0 (type $f@@108)))) (=> (and (and (and (and (and (= (type $o@@142) refType) (= (type $f@@108) (FieldType alpha@@115))) (= (type |l#0@@103|) refType)) (= (type |l#1@@103|) (MapType0Type refType MapType1Type))) (= (type |l#2@@103|) (FieldType boolType))) (= (type |l#3@@103|) refType)) (= (U_2_bool (MapType6Select (|lambda#104| |l#0@@103| |l#1@@103| |l#2@@103| |l#3@@103|) $o@@142 $f@@108))  (=> (and (not (= $o@@142 |l#0@@103|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@103| $o@@142) |l#2@@103|))) (= $o@@142 |l#3@@103|))))) :qid |GenericM.1773:8| :skolemid |4129| :pattern ( (MapType6Select (|lambda#104| |l#0@@103| |l#1@@103| |l#2@@103| |l#3@@103|) $o@@142 $f@@108)) )))
(assert (forall ((arg0@@416 T@U) (arg1@@271 T@U) (arg2@@213 T@U) (arg3@@169 T@U) ) (! (= (type (|lambda#105| arg0@@416 arg1@@271 arg2@@213 arg3@@169)) (MapType6Type refType boolType)) :qid |funType:lambda#105| :pattern ( (|lambda#105| arg0@@416 arg1@@271 arg2@@213 arg3@@169)) )))
(assert (forall (($o@@143 T@U) ($f@@109 T@U) (|l#0@@104| T@U) (|l#1@@104| T@U) (|l#2@@104| T@U) (|l#3@@104| T@U) ) (! (let ((alpha@@116 (FieldTypeInv0 (type $f@@109)))) (=> (and (and (and (and (and (= (type $o@@143) refType) (= (type $f@@109) (FieldType alpha@@116))) (= (type |l#0@@104|) refType)) (= (type |l#1@@104|) (MapType0Type refType MapType1Type))) (= (type |l#2@@104|) (FieldType boolType))) (= (type |l#3@@104|) refType)) (= (U_2_bool (MapType6Select (|lambda#105| |l#0@@104| |l#1@@104| |l#2@@104| |l#3@@104|) $o@@143 $f@@109))  (=> (and (not (= $o@@143 |l#0@@104|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@104| $o@@143) |l#2@@104|))) (= $o@@143 |l#3@@104|))))) :qid |GenericM.1773:8| :skolemid |4130| :pattern ( (MapType6Select (|lambda#105| |l#0@@104| |l#1@@104| |l#2@@104| |l#3@@104|) $o@@143 $f@@109)) )))
(assert (forall ((arg0@@417 T@U) (arg1@@272 T@U) (arg2@@214 T@U) (arg3@@170 Bool) ) (! (= (type (|lambda#106| arg0@@417 arg1@@272 arg2@@214 arg3@@170)) (MapType6Type refType boolType)) :qid |funType:lambda#106| :pattern ( (|lambda#106| arg0@@417 arg1@@272 arg2@@214 arg3@@170)) )))
(assert (forall (($o@@144 T@U) ($f@@110 T@U) (|l#0@@105| T@U) (|l#1@@105| T@U) (|l#2@@105| T@U) (|l#3@@105| Bool) ) (! (let ((alpha@@117 (FieldTypeInv0 (type $f@@110)))) (=> (and (and (and (and (= (type $o@@144) refType) (= (type $f@@110) (FieldType alpha@@117))) (= (type |l#0@@105|) refType)) (= (type |l#1@@105|) (MapType0Type refType MapType1Type))) (= (type |l#2@@105|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#106| |l#0@@105| |l#1@@105| |l#2@@105| |l#3@@105|) $o@@144 $f@@110))  (=> (and (not (= $o@@144 |l#0@@105|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@105| $o@@144) |l#2@@105|))) |l#3@@105|)))) :qid |GenericM.1813:7| :skolemid |4131| :pattern ( (MapType6Select (|lambda#106| |l#0@@105| |l#1@@105| |l#2@@105| |l#3@@105|) $o@@144 $f@@110)) )))
(assert (forall ((arg0@@418 T@U) (arg1@@273 T@U) (arg2@@215 T@U) (arg3@@171 Bool) ) (! (= (type (|lambda#107| arg0@@418 arg1@@273 arg2@@215 arg3@@171)) (MapType6Type refType boolType)) :qid |funType:lambda#107| :pattern ( (|lambda#107| arg0@@418 arg1@@273 arg2@@215 arg3@@171)) )))
(assert (forall (($o@@145 T@U) ($f@@111 T@U) (|l#0@@106| T@U) (|l#1@@106| T@U) (|l#2@@106| T@U) (|l#3@@106| Bool) ) (! (let ((alpha@@118 (FieldTypeInv0 (type $f@@111)))) (=> (and (and (and (and (= (type $o@@145) refType) (= (type $f@@111) (FieldType alpha@@118))) (= (type |l#0@@106|) refType)) (= (type |l#1@@106|) (MapType0Type refType MapType1Type))) (= (type |l#2@@106|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#107| |l#0@@106| |l#1@@106| |l#2@@106| |l#3@@106|) $o@@145 $f@@111))  (=> (and (not (= $o@@145 |l#0@@106|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@106| $o@@145) |l#2@@106|))) |l#3@@106|)))) :qid |GenericM.1813:7| :skolemid |4132| :pattern ( (MapType6Select (|lambda#107| |l#0@@106| |l#1@@106| |l#2@@106| |l#3@@106|) $o@@145 $f@@111)) )))
(assert (forall ((arg0@@419 T@U) (arg1@@274 T@U) (arg2@@216 T@U) (arg3@@172 T@U) ) (! (= (type (|lambda#108| arg0@@419 arg1@@274 arg2@@216 arg3@@172)) (MapType6Type refType boolType)) :qid |funType:lambda#108| :pattern ( (|lambda#108| arg0@@419 arg1@@274 arg2@@216 arg3@@172)) )))
(assert (forall (($o@@146 T@U) ($f@@112 T@U) (|l#0@@107| T@U) (|l#1@@107| T@U) (|l#2@@107| T@U) (|l#3@@107| T@U) ) (! (let ((alpha@@119 (FieldTypeInv0 (type $f@@112)))) (=> (and (and (and (and (and (= (type $o@@146) refType) (= (type $f@@112) (FieldType alpha@@119))) (= (type |l#0@@107|) refType)) (= (type |l#1@@107|) (MapType0Type refType MapType1Type))) (= (type |l#2@@107|) (FieldType boolType))) (= (type |l#3@@107|) refType)) (= (U_2_bool (MapType6Select (|lambda#108| |l#0@@107| |l#1@@107| |l#2@@107| |l#3@@107|) $o@@146 $f@@112))  (=> (and (not (= $o@@146 |l#0@@107|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@107| $o@@146) |l#2@@107|))) (= $o@@146 |l#3@@107|))))) :qid |GenericM.1890:32| :skolemid |4133| :pattern ( (MapType6Select (|lambda#108| |l#0@@107| |l#1@@107| |l#2@@107| |l#3@@107|) $o@@146 $f@@112)) )))
(assert (forall ((arg0@@420 T@U) (arg1@@275 T@U) (arg2@@217 T@U) (arg3@@173 T@U) ) (! (= (type (|lambda#109| arg0@@420 arg1@@275 arg2@@217 arg3@@173)) (MapType6Type refType boolType)) :qid |funType:lambda#109| :pattern ( (|lambda#109| arg0@@420 arg1@@275 arg2@@217 arg3@@173)) )))
(assert (forall (($o@@147 T@U) ($f@@113 T@U) (|l#0@@108| T@U) (|l#1@@108| T@U) (|l#2@@108| T@U) (|l#3@@108| T@U) ) (! (let ((alpha@@120 (FieldTypeInv0 (type $f@@113)))) (=> (and (and (and (and (and (= (type $o@@147) refType) (= (type $f@@113) (FieldType alpha@@120))) (= (type |l#0@@108|) refType)) (= (type |l#1@@108|) (MapType0Type refType MapType1Type))) (= (type |l#2@@108|) (FieldType boolType))) (= (type |l#3@@108|) refType)) (= (U_2_bool (MapType6Select (|lambda#109| |l#0@@108| |l#1@@108| |l#2@@108| |l#3@@108|) $o@@147 $f@@113))  (=> (and (not (= $o@@147 |l#0@@108|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@108| $o@@147) |l#2@@108|))) (= $o@@147 |l#3@@108|))))) :qid |GenericM.1890:32| :skolemid |4134| :pattern ( (MapType6Select (|lambda#109| |l#0@@108| |l#1@@108| |l#2@@108| |l#3@@108|) $o@@147 $f@@113)) )))
(assert (forall ((arg0@@421 T@U) (arg1@@276 T@U) (arg2@@218 T@U) (arg3@@174 T@U) ) (! (= (type (|lambda#110| arg0@@421 arg1@@276 arg2@@218 arg3@@174)) (MapType6Type refType boolType)) :qid |funType:lambda#110| :pattern ( (|lambda#110| arg0@@421 arg1@@276 arg2@@218 arg3@@174)) )))
(assert (forall (($o@@148 T@U) ($f@@114 T@U) (|l#0@@109| T@U) (|l#1@@109| T@U) (|l#2@@109| T@U) (|l#3@@109| T@U) ) (! (let ((alpha@@121 (FieldTypeInv0 (type $f@@114)))) (=> (and (and (and (and (and (= (type $o@@148) refType) (= (type $f@@114) (FieldType alpha@@121))) (= (type |l#0@@109|) refType)) (= (type |l#1@@109|) (MapType0Type refType MapType1Type))) (= (type |l#2@@109|) (FieldType boolType))) (= (type |l#3@@109|) refType)) (= (U_2_bool (MapType6Select (|lambda#110| |l#0@@109| |l#1@@109| |l#2@@109| |l#3@@109|) $o@@148 $f@@114))  (=> (and (not (= $o@@148 |l#0@@109|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@109| $o@@148) |l#2@@109|))) (= $o@@148 |l#3@@109|))))) :qid |GenericM.2017:8| :skolemid |4135| :pattern ( (MapType6Select (|lambda#110| |l#0@@109| |l#1@@109| |l#2@@109| |l#3@@109|) $o@@148 $f@@114)) )))
(assert (forall ((arg0@@422 T@U) (arg1@@277 T@U) (arg2@@219 T@U) (arg3@@175 T@U) ) (! (= (type (|lambda#111| arg0@@422 arg1@@277 arg2@@219 arg3@@175)) (MapType6Type refType boolType)) :qid |funType:lambda#111| :pattern ( (|lambda#111| arg0@@422 arg1@@277 arg2@@219 arg3@@175)) )))
(assert (forall (($o@@149 T@U) ($f@@115 T@U) (|l#0@@110| T@U) (|l#1@@110| T@U) (|l#2@@110| T@U) (|l#3@@110| T@U) ) (! (let ((alpha@@122 (FieldTypeInv0 (type $f@@115)))) (=> (and (and (and (and (and (= (type $o@@149) refType) (= (type $f@@115) (FieldType alpha@@122))) (= (type |l#0@@110|) refType)) (= (type |l#1@@110|) (MapType0Type refType MapType1Type))) (= (type |l#2@@110|) (FieldType boolType))) (= (type |l#3@@110|) refType)) (= (U_2_bool (MapType6Select (|lambda#111| |l#0@@110| |l#1@@110| |l#2@@110| |l#3@@110|) $o@@149 $f@@115))  (=> (and (not (= $o@@149 |l#0@@110|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@110| $o@@149) |l#2@@110|))) (= $o@@149 |l#3@@110|))))) :qid |GenericM.2017:8| :skolemid |4136| :pattern ( (MapType6Select (|lambda#111| |l#0@@110| |l#1@@110| |l#2@@110| |l#3@@110|) $o@@149 $f@@115)) )))
(assert (forall ((arg0@@423 T@U) (arg1@@278 T@U) (arg2@@220 T@U) (arg3@@176 T@U) ) (! (= (type (|lambda#112| arg0@@423 arg1@@278 arg2@@220 arg3@@176)) (MapType6Type refType boolType)) :qid |funType:lambda#112| :pattern ( (|lambda#112| arg0@@423 arg1@@278 arg2@@220 arg3@@176)) )))
(assert (forall (($o@@150 T@U) ($f@@116 T@U) (|l#0@@111| T@U) (|l#1@@111| T@U) (|l#2@@111| T@U) (|l#3@@111| T@U) ) (! (let ((alpha@@123 (FieldTypeInv0 (type $f@@116)))) (=> (and (and (and (and (and (= (type $o@@150) refType) (= (type $f@@116) (FieldType alpha@@123))) (= (type |l#0@@111|) refType)) (= (type |l#1@@111|) (MapType0Type refType MapType1Type))) (= (type |l#2@@111|) (FieldType boolType))) (= (type |l#3@@111|) refType)) (= (U_2_bool (MapType6Select (|lambda#112| |l#0@@111| |l#1@@111| |l#2@@111| |l#3@@111|) $o@@150 $f@@116))  (=> (and (not (= $o@@150 |l#0@@111|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@111| $o@@150) |l#2@@111|))) (= $o@@150 |l#3@@111|))))) :qid |GenericM.2042:8| :skolemid |4137| :pattern ( (MapType6Select (|lambda#112| |l#0@@111| |l#1@@111| |l#2@@111| |l#3@@111|) $o@@150 $f@@116)) )))
(assert (forall ((arg0@@424 T@U) (arg1@@279 T@U) (arg2@@221 T@U) (arg3@@177 T@U) ) (! (= (type (|lambda#113| arg0@@424 arg1@@279 arg2@@221 arg3@@177)) (MapType6Type refType boolType)) :qid |funType:lambda#113| :pattern ( (|lambda#113| arg0@@424 arg1@@279 arg2@@221 arg3@@177)) )))
(assert (forall (($o@@151 T@U) ($f@@117 T@U) (|l#0@@112| T@U) (|l#1@@112| T@U) (|l#2@@112| T@U) (|l#3@@112| T@U) ) (! (let ((alpha@@124 (FieldTypeInv0 (type $f@@117)))) (=> (and (and (and (and (and (= (type $o@@151) refType) (= (type $f@@117) (FieldType alpha@@124))) (= (type |l#0@@112|) refType)) (= (type |l#1@@112|) (MapType0Type refType MapType1Type))) (= (type |l#2@@112|) (FieldType boolType))) (= (type |l#3@@112|) refType)) (= (U_2_bool (MapType6Select (|lambda#113| |l#0@@112| |l#1@@112| |l#2@@112| |l#3@@112|) $o@@151 $f@@117))  (=> (and (not (= $o@@151 |l#0@@112|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@112| $o@@151) |l#2@@112|))) (= $o@@151 |l#3@@112|))))) :qid |GenericM.2042:8| :skolemid |4138| :pattern ( (MapType6Select (|lambda#113| |l#0@@112| |l#1@@112| |l#2@@112| |l#3@@112|) $o@@151 $f@@117)) )))
(assert (forall ((arg0@@425 T@U) (arg1@@280 T@U) (arg2@@222 T@U) (arg3@@178 T@U) ) (! (= (type (|lambda#114| arg0@@425 arg1@@280 arg2@@222 arg3@@178)) (MapType6Type refType boolType)) :qid |funType:lambda#114| :pattern ( (|lambda#114| arg0@@425 arg1@@280 arg2@@222 arg3@@178)) )))
(assert (forall (($o@@152 T@U) ($f@@118 T@U) (|l#0@@113| T@U) (|l#1@@113| T@U) (|l#2@@113| T@U) (|l#3@@113| T@U) ) (! (let ((alpha@@125 (FieldTypeInv0 (type $f@@118)))) (=> (and (and (and (and (and (= (type $o@@152) refType) (= (type $f@@118) (FieldType alpha@@125))) (= (type |l#0@@113|) refType)) (= (type |l#1@@113|) (MapType0Type refType MapType1Type))) (= (type |l#2@@113|) (FieldType boolType))) (= (type |l#3@@113|) refType)) (= (U_2_bool (MapType6Select (|lambda#114| |l#0@@113| |l#1@@113| |l#2@@113| |l#3@@113|) $o@@152 $f@@118))  (=> (and (not (= $o@@152 |l#0@@113|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@113| $o@@152) |l#2@@113|))) (= $o@@152 |l#3@@113|))))) :qid |GenericM.2068:8| :skolemid |4139| :pattern ( (MapType6Select (|lambda#114| |l#0@@113| |l#1@@113| |l#2@@113| |l#3@@113|) $o@@152 $f@@118)) )))
(assert (forall ((arg0@@426 T@U) (arg1@@281 T@U) (arg2@@223 T@U) (arg3@@179 T@U) ) (! (= (type (|lambda#115| arg0@@426 arg1@@281 arg2@@223 arg3@@179)) (MapType6Type refType boolType)) :qid |funType:lambda#115| :pattern ( (|lambda#115| arg0@@426 arg1@@281 arg2@@223 arg3@@179)) )))
(assert (forall (($o@@153 T@U) ($f@@119 T@U) (|l#0@@114| T@U) (|l#1@@114| T@U) (|l#2@@114| T@U) (|l#3@@114| T@U) ) (! (let ((alpha@@126 (FieldTypeInv0 (type $f@@119)))) (=> (and (and (and (and (and (= (type $o@@153) refType) (= (type $f@@119) (FieldType alpha@@126))) (= (type |l#0@@114|) refType)) (= (type |l#1@@114|) (MapType0Type refType MapType1Type))) (= (type |l#2@@114|) (FieldType boolType))) (= (type |l#3@@114|) refType)) (= (U_2_bool (MapType6Select (|lambda#115| |l#0@@114| |l#1@@114| |l#2@@114| |l#3@@114|) $o@@153 $f@@119))  (=> (and (not (= $o@@153 |l#0@@114|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@114| $o@@153) |l#2@@114|))) (= $o@@153 |l#3@@114|))))) :qid |GenericM.2068:8| :skolemid |4140| :pattern ( (MapType6Select (|lambda#115| |l#0@@114| |l#1@@114| |l#2@@114| |l#3@@114|) $o@@153 $f@@119)) )))
(assert (forall ((arg0@@427 T@U) (arg1@@282 T@U) (arg2@@224 T@U) (arg3@@180 T@U) ) (! (= (type (|lambda#116| arg0@@427 arg1@@282 arg2@@224 arg3@@180)) (MapType6Type refType boolType)) :qid |funType:lambda#116| :pattern ( (|lambda#116| arg0@@427 arg1@@282 arg2@@224 arg3@@180)) )))
(assert (forall (($o@@154 T@U) ($f@@120 T@U) (|l#0@@115| T@U) (|l#1@@115| T@U) (|l#2@@115| T@U) (|l#3@@115| T@U) ) (! (let ((alpha@@127 (FieldTypeInv0 (type $f@@120)))) (=> (and (and (and (and (and (= (type $o@@154) refType) (= (type $f@@120) (FieldType alpha@@127))) (= (type |l#0@@115|) refType)) (= (type |l#1@@115|) (MapType0Type refType MapType1Type))) (= (type |l#2@@115|) (FieldType boolType))) (= (type |l#3@@115|) refType)) (= (U_2_bool (MapType6Select (|lambda#116| |l#0@@115| |l#1@@115| |l#2@@115| |l#3@@115|) $o@@154 $f@@120))  (=> (and (not (= $o@@154 |l#0@@115|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@115| $o@@154) |l#2@@115|))) (= $o@@154 |l#3@@115|))))) :qid |GenericM.2103:8| :skolemid |4141| :pattern ( (MapType6Select (|lambda#116| |l#0@@115| |l#1@@115| |l#2@@115| |l#3@@115|) $o@@154 $f@@120)) )))
(assert (forall ((arg0@@428 T@U) (arg1@@283 T@U) (arg2@@225 T@U) (arg3@@181 T@U) ) (! (= (type (|lambda#117| arg0@@428 arg1@@283 arg2@@225 arg3@@181)) (MapType6Type refType boolType)) :qid |funType:lambda#117| :pattern ( (|lambda#117| arg0@@428 arg1@@283 arg2@@225 arg3@@181)) )))
(assert (forall (($o@@155 T@U) ($f@@121 T@U) (|l#0@@116| T@U) (|l#1@@116| T@U) (|l#2@@116| T@U) (|l#3@@116| T@U) ) (! (let ((alpha@@128 (FieldTypeInv0 (type $f@@121)))) (=> (and (and (and (and (and (= (type $o@@155) refType) (= (type $f@@121) (FieldType alpha@@128))) (= (type |l#0@@116|) refType)) (= (type |l#1@@116|) (MapType0Type refType MapType1Type))) (= (type |l#2@@116|) (FieldType boolType))) (= (type |l#3@@116|) refType)) (= (U_2_bool (MapType6Select (|lambda#117| |l#0@@116| |l#1@@116| |l#2@@116| |l#3@@116|) $o@@155 $f@@121))  (=> (and (not (= $o@@155 |l#0@@116|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@116| $o@@155) |l#2@@116|))) (= $o@@155 |l#3@@116|))))) :qid |GenericM.2103:8| :skolemid |4142| :pattern ( (MapType6Select (|lambda#117| |l#0@@116| |l#1@@116| |l#2@@116| |l#3@@116|) $o@@155 $f@@121)) )))
(assert (forall ((arg0@@429 T@U) (arg1@@284 T@U) (arg2@@226 T@U) (arg3@@182 T@U) ) (! (= (type (|lambda#118| arg0@@429 arg1@@284 arg2@@226 arg3@@182)) (MapType6Type refType boolType)) :qid |funType:lambda#118| :pattern ( (|lambda#118| arg0@@429 arg1@@284 arg2@@226 arg3@@182)) )))
(assert (forall (($o@@156 T@U) ($f@@122 T@U) (|l#0@@117| T@U) (|l#1@@117| T@U) (|l#2@@117| T@U) (|l#3@@117| T@U) ) (! (let ((alpha@@129 (FieldTypeInv0 (type $f@@122)))) (=> (and (and (and (and (and (= (type $o@@156) refType) (= (type $f@@122) (FieldType alpha@@129))) (= (type |l#0@@117|) refType)) (= (type |l#1@@117|) (MapType0Type refType MapType1Type))) (= (type |l#2@@117|) (FieldType boolType))) (= (type |l#3@@117|) refType)) (= (U_2_bool (MapType6Select (|lambda#118| |l#0@@117| |l#1@@117| |l#2@@117| |l#3@@117|) $o@@156 $f@@122))  (=> (and (not (= $o@@156 |l#0@@117|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@117| $o@@156) |l#2@@117|))) (= $o@@156 |l#3@@117|))))) :qid |GenericM.2142:8| :skolemid |4143| :pattern ( (MapType6Select (|lambda#118| |l#0@@117| |l#1@@117| |l#2@@117| |l#3@@117|) $o@@156 $f@@122)) )))
(assert (forall ((arg0@@430 T@U) (arg1@@285 T@U) (arg2@@227 T@U) (arg3@@183 T@U) ) (! (= (type (|lambda#119| arg0@@430 arg1@@285 arg2@@227 arg3@@183)) (MapType6Type refType boolType)) :qid |funType:lambda#119| :pattern ( (|lambda#119| arg0@@430 arg1@@285 arg2@@227 arg3@@183)) )))
(assert (forall (($o@@157 T@U) ($f@@123 T@U) (|l#0@@118| T@U) (|l#1@@118| T@U) (|l#2@@118| T@U) (|l#3@@118| T@U) ) (! (let ((alpha@@130 (FieldTypeInv0 (type $f@@123)))) (=> (and (and (and (and (and (= (type $o@@157) refType) (= (type $f@@123) (FieldType alpha@@130))) (= (type |l#0@@118|) refType)) (= (type |l#1@@118|) (MapType0Type refType MapType1Type))) (= (type |l#2@@118|) (FieldType boolType))) (= (type |l#3@@118|) refType)) (= (U_2_bool (MapType6Select (|lambda#119| |l#0@@118| |l#1@@118| |l#2@@118| |l#3@@118|) $o@@157 $f@@123))  (=> (and (not (= $o@@157 |l#0@@118|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@118| $o@@157) |l#2@@118|))) (= $o@@157 |l#3@@118|))))) :qid |GenericM.2142:8| :skolemid |4144| :pattern ( (MapType6Select (|lambda#119| |l#0@@118| |l#1@@118| |l#2@@118| |l#3@@118|) $o@@157 $f@@123)) )))
(assert (forall ((arg0@@431 T@U) (arg1@@286 T@U) (arg2@@228 T@U) (arg3@@184 T@U) ) (! (= (type (|lambda#120| arg0@@431 arg1@@286 arg2@@228 arg3@@184)) (MapType6Type refType boolType)) :qid |funType:lambda#120| :pattern ( (|lambda#120| arg0@@431 arg1@@286 arg2@@228 arg3@@184)) )))
(assert (forall (($o@@158 T@U) ($f@@124 T@U) (|l#0@@119| T@U) (|l#1@@119| T@U) (|l#2@@119| T@U) (|l#3@@119| T@U) ) (! (let ((alpha@@131 (FieldTypeInv0 (type $f@@124)))) (=> (and (and (and (and (and (= (type $o@@158) refType) (= (type $f@@124) (FieldType alpha@@131))) (= (type |l#0@@119|) refType)) (= (type |l#1@@119|) (MapType0Type refType MapType1Type))) (= (type |l#2@@119|) (FieldType boolType))) (= (type |l#3@@119|) refType)) (= (U_2_bool (MapType6Select (|lambda#120| |l#0@@119| |l#1@@119| |l#2@@119| |l#3@@119|) $o@@158 $f@@124))  (=> (and (not (= $o@@158 |l#0@@119|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@119| $o@@158) |l#2@@119|))) (= $o@@158 |l#3@@119|))))) :qid |GenericM.2187:8| :skolemid |4145| :pattern ( (MapType6Select (|lambda#120| |l#0@@119| |l#1@@119| |l#2@@119| |l#3@@119|) $o@@158 $f@@124)) )))
(assert (forall ((arg0@@432 T@U) (arg1@@287 T@U) (arg2@@229 T@U) (arg3@@185 T@U) ) (! (= (type (|lambda#121| arg0@@432 arg1@@287 arg2@@229 arg3@@185)) (MapType6Type refType boolType)) :qid |funType:lambda#121| :pattern ( (|lambda#121| arg0@@432 arg1@@287 arg2@@229 arg3@@185)) )))
(assert (forall (($o@@159 T@U) ($f@@125 T@U) (|l#0@@120| T@U) (|l#1@@120| T@U) (|l#2@@120| T@U) (|l#3@@120| T@U) ) (! (let ((alpha@@132 (FieldTypeInv0 (type $f@@125)))) (=> (and (and (and (and (and (= (type $o@@159) refType) (= (type $f@@125) (FieldType alpha@@132))) (= (type |l#0@@120|) refType)) (= (type |l#1@@120|) (MapType0Type refType MapType1Type))) (= (type |l#2@@120|) (FieldType boolType))) (= (type |l#3@@120|) refType)) (= (U_2_bool (MapType6Select (|lambda#121| |l#0@@120| |l#1@@120| |l#2@@120| |l#3@@120|) $o@@159 $f@@125))  (=> (and (not (= $o@@159 |l#0@@120|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@120| $o@@159) |l#2@@120|))) (= $o@@159 |l#3@@120|))))) :qid |GenericM.2187:8| :skolemid |4146| :pattern ( (MapType6Select (|lambda#121| |l#0@@120| |l#1@@120| |l#2@@120| |l#3@@120|) $o@@159 $f@@125)) )))
(assert (forall ((arg0@@433 T@U) (arg1@@288 T@U) (arg2@@230 T@U) (arg3@@186 T@U) ) (! (= (type (|lambda#122| arg0@@433 arg1@@288 arg2@@230 arg3@@186)) (MapType6Type refType boolType)) :qid |funType:lambda#122| :pattern ( (|lambda#122| arg0@@433 arg1@@288 arg2@@230 arg3@@186)) )))
(assert (forall (($o@@160 T@U) ($f@@126 T@U) (|l#0@@121| T@U) (|l#1@@121| T@U) (|l#2@@121| T@U) (|l#3@@121| T@U) ) (! (let ((alpha@@133 (FieldTypeInv0 (type $f@@126)))) (=> (and (and (and (and (and (= (type $o@@160) refType) (= (type $f@@126) (FieldType alpha@@133))) (= (type |l#0@@121|) refType)) (= (type |l#1@@121|) (MapType0Type refType MapType1Type))) (= (type |l#2@@121|) (FieldType boolType))) (= (type |l#3@@121|) refType)) (= (U_2_bool (MapType6Select (|lambda#122| |l#0@@121| |l#1@@121| |l#2@@121| |l#3@@121|) $o@@160 $f@@126))  (=> (and (not (= $o@@160 |l#0@@121|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@121| $o@@160) |l#2@@121|))) (= $o@@160 |l#3@@121|))))) :qid |GenericM.2232:8| :skolemid |4147| :pattern ( (MapType6Select (|lambda#122| |l#0@@121| |l#1@@121| |l#2@@121| |l#3@@121|) $o@@160 $f@@126)) )))
(assert (forall ((arg0@@434 T@U) (arg1@@289 T@U) (arg2@@231 T@U) (arg3@@187 T@U) ) (! (= (type (|lambda#123| arg0@@434 arg1@@289 arg2@@231 arg3@@187)) (MapType6Type refType boolType)) :qid |funType:lambda#123| :pattern ( (|lambda#123| arg0@@434 arg1@@289 arg2@@231 arg3@@187)) )))
(assert (forall (($o@@161 T@U) ($f@@127 T@U) (|l#0@@122| T@U) (|l#1@@122| T@U) (|l#2@@122| T@U) (|l#3@@122| T@U) ) (! (let ((alpha@@134 (FieldTypeInv0 (type $f@@127)))) (=> (and (and (and (and (and (= (type $o@@161) refType) (= (type $f@@127) (FieldType alpha@@134))) (= (type |l#0@@122|) refType)) (= (type |l#1@@122|) (MapType0Type refType MapType1Type))) (= (type |l#2@@122|) (FieldType boolType))) (= (type |l#3@@122|) refType)) (= (U_2_bool (MapType6Select (|lambda#123| |l#0@@122| |l#1@@122| |l#2@@122| |l#3@@122|) $o@@161 $f@@127))  (=> (and (not (= $o@@161 |l#0@@122|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@122| $o@@161) |l#2@@122|))) (= $o@@161 |l#3@@122|))))) :qid |GenericM.2232:8| :skolemid |4148| :pattern ( (MapType6Select (|lambda#123| |l#0@@122| |l#1@@122| |l#2@@122| |l#3@@122|) $o@@161 $f@@127)) )))
(assert (forall ((arg0@@435 T@U) (arg1@@290 T@U) (arg2@@232 T@U) (arg3@@188 T@U) ) (! (= (type (|lambda#124| arg0@@435 arg1@@290 arg2@@232 arg3@@188)) (MapType6Type refType boolType)) :qid |funType:lambda#124| :pattern ( (|lambda#124| arg0@@435 arg1@@290 arg2@@232 arg3@@188)) )))
(assert (forall (($o@@162 T@U) ($f@@128 T@U) (|l#0@@123| T@U) (|l#1@@123| T@U) (|l#2@@123| T@U) (|l#3@@123| T@U) ) (! (let ((alpha@@135 (FieldTypeInv0 (type $f@@128)))) (=> (and (and (and (and (and (= (type $o@@162) refType) (= (type $f@@128) (FieldType alpha@@135))) (= (type |l#0@@123|) refType)) (= (type |l#1@@123|) (MapType0Type refType MapType1Type))) (= (type |l#2@@123|) (FieldType boolType))) (= (type |l#3@@123|) refType)) (= (U_2_bool (MapType6Select (|lambda#124| |l#0@@123| |l#1@@123| |l#2@@123| |l#3@@123|) $o@@162 $f@@128))  (=> (and (not (= $o@@162 |l#0@@123|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@123| $o@@162) |l#2@@123|))) (= $o@@162 |l#3@@123|))))) :qid |GenericM.2292:8| :skolemid |4149| :pattern ( (MapType6Select (|lambda#124| |l#0@@123| |l#1@@123| |l#2@@123| |l#3@@123|) $o@@162 $f@@128)) )))
(assert (forall ((arg0@@436 T@U) (arg1@@291 T@U) (arg2@@233 T@U) (arg3@@189 T@U) ) (! (= (type (|lambda#125| arg0@@436 arg1@@291 arg2@@233 arg3@@189)) (MapType6Type refType boolType)) :qid |funType:lambda#125| :pattern ( (|lambda#125| arg0@@436 arg1@@291 arg2@@233 arg3@@189)) )))
(assert (forall (($o@@163 T@U) ($f@@129 T@U) (|l#0@@124| T@U) (|l#1@@124| T@U) (|l#2@@124| T@U) (|l#3@@124| T@U) ) (! (let ((alpha@@136 (FieldTypeInv0 (type $f@@129)))) (=> (and (and (and (and (and (= (type $o@@163) refType) (= (type $f@@129) (FieldType alpha@@136))) (= (type |l#0@@124|) refType)) (= (type |l#1@@124|) (MapType0Type refType MapType1Type))) (= (type |l#2@@124|) (FieldType boolType))) (= (type |l#3@@124|) refType)) (= (U_2_bool (MapType6Select (|lambda#125| |l#0@@124| |l#1@@124| |l#2@@124| |l#3@@124|) $o@@163 $f@@129))  (=> (and (not (= $o@@163 |l#0@@124|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@124| $o@@163) |l#2@@124|))) (= $o@@163 |l#3@@124|))))) :qid |GenericM.2292:8| :skolemid |4150| :pattern ( (MapType6Select (|lambda#125| |l#0@@124| |l#1@@124| |l#2@@124| |l#3@@124|) $o@@163 $f@@129)) )))
(assert (forall ((arg0@@437 T@U) (arg1@@292 T@U) (arg2@@234 T@U) (arg3@@190 T@U) ) (! (= (type (|lambda#126| arg0@@437 arg1@@292 arg2@@234 arg3@@190)) (MapType6Type refType boolType)) :qid |funType:lambda#126| :pattern ( (|lambda#126| arg0@@437 arg1@@292 arg2@@234 arg3@@190)) )))
(assert (forall (($o@@164 T@U) ($f@@130 T@U) (|l#0@@125| T@U) (|l#1@@125| T@U) (|l#2@@125| T@U) (|l#3@@125| T@U) ) (! (let ((alpha@@137 (FieldTypeInv0 (type $f@@130)))) (=> (and (and (and (and (and (= (type $o@@164) refType) (= (type $f@@130) (FieldType alpha@@137))) (= (type |l#0@@125|) refType)) (= (type |l#1@@125|) (MapType0Type refType MapType1Type))) (= (type |l#2@@125|) (FieldType boolType))) (= (type |l#3@@125|) refType)) (= (U_2_bool (MapType6Select (|lambda#126| |l#0@@125| |l#1@@125| |l#2@@125| |l#3@@125|) $o@@164 $f@@130))  (=> (and (not (= $o@@164 |l#0@@125|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@125| $o@@164) |l#2@@125|))) (= $o@@164 |l#3@@125|))))) :qid |GenericM.2316:8| :skolemid |4151| :pattern ( (MapType6Select (|lambda#126| |l#0@@125| |l#1@@125| |l#2@@125| |l#3@@125|) $o@@164 $f@@130)) )))
(assert (forall ((arg0@@438 T@U) (arg1@@293 T@U) (arg2@@235 T@U) (arg3@@191 T@U) ) (! (= (type (|lambda#127| arg0@@438 arg1@@293 arg2@@235 arg3@@191)) (MapType6Type refType boolType)) :qid |funType:lambda#127| :pattern ( (|lambda#127| arg0@@438 arg1@@293 arg2@@235 arg3@@191)) )))
(assert (forall (($o@@165 T@U) ($f@@131 T@U) (|l#0@@126| T@U) (|l#1@@126| T@U) (|l#2@@126| T@U) (|l#3@@126| T@U) ) (! (let ((alpha@@138 (FieldTypeInv0 (type $f@@131)))) (=> (and (and (and (and (and (= (type $o@@165) refType) (= (type $f@@131) (FieldType alpha@@138))) (= (type |l#0@@126|) refType)) (= (type |l#1@@126|) (MapType0Type refType MapType1Type))) (= (type |l#2@@126|) (FieldType boolType))) (= (type |l#3@@126|) refType)) (= (U_2_bool (MapType6Select (|lambda#127| |l#0@@126| |l#1@@126| |l#2@@126| |l#3@@126|) $o@@165 $f@@131))  (=> (and (not (= $o@@165 |l#0@@126|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@126| $o@@165) |l#2@@126|))) (= $o@@165 |l#3@@126|))))) :qid |GenericM.2316:8| :skolemid |4152| :pattern ( (MapType6Select (|lambda#127| |l#0@@126| |l#1@@126| |l#2@@126| |l#3@@126|) $o@@165 $f@@131)) )))
(assert (forall ((arg0@@439 T@U) (arg1@@294 T@U) (arg2@@236 T@U) (arg3@@192 T@U) ) (! (= (type (|lambda#128| arg0@@439 arg1@@294 arg2@@236 arg3@@192)) (MapType6Type refType boolType)) :qid |funType:lambda#128| :pattern ( (|lambda#128| arg0@@439 arg1@@294 arg2@@236 arg3@@192)) )))
(assert (forall (($o@@166 T@U) ($f@@132 T@U) (|l#0@@127| T@U) (|l#1@@127| T@U) (|l#2@@127| T@U) (|l#3@@127| T@U) ) (! (let ((alpha@@139 (FieldTypeInv0 (type $f@@132)))) (=> (and (and (and (and (and (= (type $o@@166) refType) (= (type $f@@132) (FieldType alpha@@139))) (= (type |l#0@@127|) refType)) (= (type |l#1@@127|) (MapType0Type refType MapType1Type))) (= (type |l#2@@127|) (FieldType boolType))) (= (type |l#3@@127|) refType)) (= (U_2_bool (MapType6Select (|lambda#128| |l#0@@127| |l#1@@127| |l#2@@127| |l#3@@127|) $o@@166 $f@@132))  (=> (and (not (= $o@@166 |l#0@@127|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@127| $o@@166) |l#2@@127|))) (= $o@@166 |l#3@@127|))))) :qid |GenericM.2340:8| :skolemid |4153| :pattern ( (MapType6Select (|lambda#128| |l#0@@127| |l#1@@127| |l#2@@127| |l#3@@127|) $o@@166 $f@@132)) )))
(assert (forall ((arg0@@440 T@U) (arg1@@295 T@U) (arg2@@237 T@U) (arg3@@193 T@U) ) (! (= (type (|lambda#129| arg0@@440 arg1@@295 arg2@@237 arg3@@193)) (MapType6Type refType boolType)) :qid |funType:lambda#129| :pattern ( (|lambda#129| arg0@@440 arg1@@295 arg2@@237 arg3@@193)) )))
(assert (forall (($o@@167 T@U) ($f@@133 T@U) (|l#0@@128| T@U) (|l#1@@128| T@U) (|l#2@@128| T@U) (|l#3@@128| T@U) ) (! (let ((alpha@@140 (FieldTypeInv0 (type $f@@133)))) (=> (and (and (and (and (and (= (type $o@@167) refType) (= (type $f@@133) (FieldType alpha@@140))) (= (type |l#0@@128|) refType)) (= (type |l#1@@128|) (MapType0Type refType MapType1Type))) (= (type |l#2@@128|) (FieldType boolType))) (= (type |l#3@@128|) refType)) (= (U_2_bool (MapType6Select (|lambda#129| |l#0@@128| |l#1@@128| |l#2@@128| |l#3@@128|) $o@@167 $f@@133))  (=> (and (not (= $o@@167 |l#0@@128|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@128| $o@@167) |l#2@@128|))) (= $o@@167 |l#3@@128|))))) :qid |GenericM.2340:8| :skolemid |4154| :pattern ( (MapType6Select (|lambda#129| |l#0@@128| |l#1@@128| |l#2@@128| |l#3@@128|) $o@@167 $f@@133)) )))
(assert (forall ((arg0@@441 T@U) (arg1@@296 T@U) (arg2@@238 T@U) (arg3@@194 Bool) ) (! (= (type (|lambda#130| arg0@@441 arg1@@296 arg2@@238 arg3@@194)) (MapType6Type refType boolType)) :qid |funType:lambda#130| :pattern ( (|lambda#130| arg0@@441 arg1@@296 arg2@@238 arg3@@194)) )))
(assert (forall (($o@@168 T@U) ($f@@134 T@U) (|l#0@@129| T@U) (|l#1@@129| T@U) (|l#2@@129| T@U) (|l#3@@129| Bool) ) (! (let ((alpha@@141 (FieldTypeInv0 (type $f@@134)))) (=> (and (and (and (and (= (type $o@@168) refType) (= (type $f@@134) (FieldType alpha@@141))) (= (type |l#0@@129|) refType)) (= (type |l#1@@129|) (MapType0Type refType MapType1Type))) (= (type |l#2@@129|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#130| |l#0@@129| |l#1@@129| |l#2@@129| |l#3@@129|) $o@@168 $f@@134))  (=> (and (not (= $o@@168 |l#0@@129|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@129| $o@@168) |l#2@@129|))) |l#3@@129|)))) :qid |GenericM.2366:8| :skolemid |4155| :pattern ( (MapType6Select (|lambda#130| |l#0@@129| |l#1@@129| |l#2@@129| |l#3@@129|) $o@@168 $f@@134)) )))
(assert (forall ((arg0@@442 T@U) (arg1@@297 T@U) (arg2@@239 T@U) (arg3@@195 Bool) ) (! (= (type (|lambda#131| arg0@@442 arg1@@297 arg2@@239 arg3@@195)) (MapType6Type refType boolType)) :qid |funType:lambda#131| :pattern ( (|lambda#131| arg0@@442 arg1@@297 arg2@@239 arg3@@195)) )))
(assert (forall (($o@@169 T@U) ($f@@135 T@U) (|l#0@@130| T@U) (|l#1@@130| T@U) (|l#2@@130| T@U) (|l#3@@130| Bool) ) (! (let ((alpha@@142 (FieldTypeInv0 (type $f@@135)))) (=> (and (and (and (and (= (type $o@@169) refType) (= (type $f@@135) (FieldType alpha@@142))) (= (type |l#0@@130|) refType)) (= (type |l#1@@130|) (MapType0Type refType MapType1Type))) (= (type |l#2@@130|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#131| |l#0@@130| |l#1@@130| |l#2@@130| |l#3@@130|) $o@@169 $f@@135))  (=> (and (not (= $o@@169 |l#0@@130|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@130| $o@@169) |l#2@@130|))) |l#3@@130|)))) :qid |GenericM.2366:8| :skolemid |4156| :pattern ( (MapType6Select (|lambda#131| |l#0@@130| |l#1@@130| |l#2@@130| |l#3@@130|) $o@@169 $f@@135)) )))
(assert (forall ((arg0@@443 T@U) (arg1@@298 T@U) (arg2@@240 T@U) (arg3@@196 Bool) ) (! (= (type (|lambda#132| arg0@@443 arg1@@298 arg2@@240 arg3@@196)) (MapType6Type refType boolType)) :qid |funType:lambda#132| :pattern ( (|lambda#132| arg0@@443 arg1@@298 arg2@@240 arg3@@196)) )))
(assert (forall (($o@@170 T@U) ($f@@136 T@U) (|l#0@@131| T@U) (|l#1@@131| T@U) (|l#2@@131| T@U) (|l#3@@131| Bool) ) (! (let ((alpha@@143 (FieldTypeInv0 (type $f@@136)))) (=> (and (and (and (and (= (type $o@@170) refType) (= (type $f@@136) (FieldType alpha@@143))) (= (type |l#0@@131|) refType)) (= (type |l#1@@131|) (MapType0Type refType MapType1Type))) (= (type |l#2@@131|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#132| |l#0@@131| |l#1@@131| |l#2@@131| |l#3@@131|) $o@@170 $f@@136))  (=> (and (not (= $o@@170 |l#0@@131|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@131| $o@@170) |l#2@@131|))) |l#3@@131|)))) :qid |GenericM.2387:7| :skolemid |4157| :pattern ( (MapType6Select (|lambda#132| |l#0@@131| |l#1@@131| |l#2@@131| |l#3@@131|) $o@@170 $f@@136)) )))
(assert (forall ((arg0@@444 T@U) (arg1@@299 T@U) (arg2@@241 T@U) (arg3@@197 Bool) ) (! (= (type (|lambda#133| arg0@@444 arg1@@299 arg2@@241 arg3@@197)) (MapType6Type refType boolType)) :qid |funType:lambda#133| :pattern ( (|lambda#133| arg0@@444 arg1@@299 arg2@@241 arg3@@197)) )))
(assert (forall (($o@@171 T@U) ($f@@137 T@U) (|l#0@@132| T@U) (|l#1@@132| T@U) (|l#2@@132| T@U) (|l#3@@132| Bool) ) (! (let ((alpha@@144 (FieldTypeInv0 (type $f@@137)))) (=> (and (and (and (and (= (type $o@@171) refType) (= (type $f@@137) (FieldType alpha@@144))) (= (type |l#0@@132|) refType)) (= (type |l#1@@132|) (MapType0Type refType MapType1Type))) (= (type |l#2@@132|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#133| |l#0@@132| |l#1@@132| |l#2@@132| |l#3@@132|) $o@@171 $f@@137))  (=> (and (not (= $o@@171 |l#0@@132|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@132| $o@@171) |l#2@@132|))) |l#3@@132|)))) :qid |GenericM.2387:7| :skolemid |4158| :pattern ( (MapType6Select (|lambda#133| |l#0@@132| |l#1@@132| |l#2@@132| |l#3@@132|) $o@@171 $f@@137)) )))
(assert (forall ((arg0@@445 T@U) (arg1@@300 T@U) (arg2@@242 T@U) (arg3@@198 Bool) ) (! (= (type (|lambda#134| arg0@@445 arg1@@300 arg2@@242 arg3@@198)) (MapType6Type refType boolType)) :qid |funType:lambda#134| :pattern ( (|lambda#134| arg0@@445 arg1@@300 arg2@@242 arg3@@198)) )))
(assert (forall (($o@@172 T@U) ($f@@138 T@U) (|l#0@@133| T@U) (|l#1@@133| T@U) (|l#2@@133| T@U) (|l#3@@133| Bool) ) (! (let ((alpha@@145 (FieldTypeInv0 (type $f@@138)))) (=> (and (and (and (and (= (type $o@@172) refType) (= (type $f@@138) (FieldType alpha@@145))) (= (type |l#0@@133|) refType)) (= (type |l#1@@133|) (MapType0Type refType MapType1Type))) (= (type |l#2@@133|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#134| |l#0@@133| |l#1@@133| |l#2@@133| |l#3@@133|) $o@@172 $f@@138))  (=> (and (not (= $o@@172 |l#0@@133|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@133| $o@@172) |l#2@@133|))) |l#3@@133|)))) :qid |GenericM.2394:7| :skolemid |4159| :pattern ( (MapType6Select (|lambda#134| |l#0@@133| |l#1@@133| |l#2@@133| |l#3@@133|) $o@@172 $f@@138)) )))
(assert (forall ((arg0@@446 T@U) (arg1@@301 T@U) (arg2@@243 T@U) (arg3@@199 Bool) ) (! (= (type (|lambda#135| arg0@@446 arg1@@301 arg2@@243 arg3@@199)) (MapType6Type refType boolType)) :qid |funType:lambda#135| :pattern ( (|lambda#135| arg0@@446 arg1@@301 arg2@@243 arg3@@199)) )))
(assert (forall (($o@@173 T@U) ($f@@139 T@U) (|l#0@@134| T@U) (|l#1@@134| T@U) (|l#2@@134| T@U) (|l#3@@134| Bool) ) (! (let ((alpha@@146 (FieldTypeInv0 (type $f@@139)))) (=> (and (and (and (and (= (type $o@@173) refType) (= (type $f@@139) (FieldType alpha@@146))) (= (type |l#0@@134|) refType)) (= (type |l#1@@134|) (MapType0Type refType MapType1Type))) (= (type |l#2@@134|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#135| |l#0@@134| |l#1@@134| |l#2@@134| |l#3@@134|) $o@@173 $f@@139))  (=> (and (not (= $o@@173 |l#0@@134|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@134| $o@@173) |l#2@@134|))) |l#3@@134|)))) :qid |GenericM.2394:7| :skolemid |4160| :pattern ( (MapType6Select (|lambda#135| |l#0@@134| |l#1@@134| |l#2@@134| |l#3@@134|) $o@@173 $f@@139)) )))
(assert (forall ((arg0@@447 T@U) (arg1@@302 T@U) (arg2@@244 T@U) (arg3@@200 Bool) ) (! (= (type (|lambda#136| arg0@@447 arg1@@302 arg2@@244 arg3@@200)) (MapType6Type refType boolType)) :qid |funType:lambda#136| :pattern ( (|lambda#136| arg0@@447 arg1@@302 arg2@@244 arg3@@200)) )))
(assert (forall (($o@@174 T@U) ($f@@140 T@U) (|l#0@@135| T@U) (|l#1@@135| T@U) (|l#2@@135| T@U) (|l#3@@135| Bool) ) (! (let ((alpha@@147 (FieldTypeInv0 (type $f@@140)))) (=> (and (and (and (and (= (type $o@@174) refType) (= (type $f@@140) (FieldType alpha@@147))) (= (type |l#0@@135|) refType)) (= (type |l#1@@135|) (MapType0Type refType MapType1Type))) (= (type |l#2@@135|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#136| |l#0@@135| |l#1@@135| |l#2@@135| |l#3@@135|) $o@@174 $f@@140))  (=> (and (not (= $o@@174 |l#0@@135|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@135| $o@@174) |l#2@@135|))) |l#3@@135|)))) :qid |GenericM.2401:7| :skolemid |4161| :pattern ( (MapType6Select (|lambda#136| |l#0@@135| |l#1@@135| |l#2@@135| |l#3@@135|) $o@@174 $f@@140)) )))
(assert (forall ((arg0@@448 T@U) (arg1@@303 T@U) (arg2@@245 T@U) (arg3@@201 Bool) ) (! (= (type (|lambda#137| arg0@@448 arg1@@303 arg2@@245 arg3@@201)) (MapType6Type refType boolType)) :qid |funType:lambda#137| :pattern ( (|lambda#137| arg0@@448 arg1@@303 arg2@@245 arg3@@201)) )))
(assert (forall (($o@@175 T@U) ($f@@141 T@U) (|l#0@@136| T@U) (|l#1@@136| T@U) (|l#2@@136| T@U) (|l#3@@136| Bool) ) (! (let ((alpha@@148 (FieldTypeInv0 (type $f@@141)))) (=> (and (and (and (and (= (type $o@@175) refType) (= (type $f@@141) (FieldType alpha@@148))) (= (type |l#0@@136|) refType)) (= (type |l#1@@136|) (MapType0Type refType MapType1Type))) (= (type |l#2@@136|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#137| |l#0@@136| |l#1@@136| |l#2@@136| |l#3@@136|) $o@@175 $f@@141))  (=> (and (not (= $o@@175 |l#0@@136|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@136| $o@@175) |l#2@@136|))) |l#3@@136|)))) :qid |GenericM.2401:7| :skolemid |4162| :pattern ( (MapType6Select (|lambda#137| |l#0@@136| |l#1@@136| |l#2@@136| |l#3@@136|) $o@@175 $f@@141)) )))
(assert (forall ((arg0@@449 T@U) (arg1@@304 T@U) (arg2@@246 T@U) (arg3@@202 Bool) ) (! (= (type (|lambda#138| arg0@@449 arg1@@304 arg2@@246 arg3@@202)) (MapType6Type refType boolType)) :qid |funType:lambda#138| :pattern ( (|lambda#138| arg0@@449 arg1@@304 arg2@@246 arg3@@202)) )))
(assert (forall (($o@@176 T@U) ($f@@142 T@U) (|l#0@@137| T@U) (|l#1@@137| T@U) (|l#2@@137| T@U) (|l#3@@137| Bool) ) (! (let ((alpha@@149 (FieldTypeInv0 (type $f@@142)))) (=> (and (and (and (and (= (type $o@@176) refType) (= (type $f@@142) (FieldType alpha@@149))) (= (type |l#0@@137|) refType)) (= (type |l#1@@137|) (MapType0Type refType MapType1Type))) (= (type |l#2@@137|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#138| |l#0@@137| |l#1@@137| |l#2@@137| |l#3@@137|) $o@@176 $f@@142))  (=> (and (not (= $o@@176 |l#0@@137|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@137| $o@@176) |l#2@@137|))) |l#3@@137|)))) :qid |GenericM.2418:7| :skolemid |4163| :pattern ( (MapType6Select (|lambda#138| |l#0@@137| |l#1@@137| |l#2@@137| |l#3@@137|) $o@@176 $f@@142)) )))
(assert (forall ((arg0@@450 T@U) (arg1@@305 T@U) (arg2@@247 T@U) (arg3@@203 Bool) ) (! (= (type (|lambda#139| arg0@@450 arg1@@305 arg2@@247 arg3@@203)) (MapType6Type refType boolType)) :qid |funType:lambda#139| :pattern ( (|lambda#139| arg0@@450 arg1@@305 arg2@@247 arg3@@203)) )))
(assert (forall (($o@@177 T@U) ($f@@143 T@U) (|l#0@@138| T@U) (|l#1@@138| T@U) (|l#2@@138| T@U) (|l#3@@138| Bool) ) (! (let ((alpha@@150 (FieldTypeInv0 (type $f@@143)))) (=> (and (and (and (and (= (type $o@@177) refType) (= (type $f@@143) (FieldType alpha@@150))) (= (type |l#0@@138|) refType)) (= (type |l#1@@138|) (MapType0Type refType MapType1Type))) (= (type |l#2@@138|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#139| |l#0@@138| |l#1@@138| |l#2@@138| |l#3@@138|) $o@@177 $f@@143))  (=> (and (not (= $o@@177 |l#0@@138|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@138| $o@@177) |l#2@@138|))) |l#3@@138|)))) :qid |GenericM.2418:7| :skolemid |4164| :pattern ( (MapType6Select (|lambda#139| |l#0@@138| |l#1@@138| |l#2@@138| |l#3@@138|) $o@@177 $f@@143)) )))
(assert (forall ((arg0@@451 T@U) (arg1@@306 T@U) (arg2@@248 T@U) (arg3@@204 Bool) ) (! (= (type (|lambda#140| arg0@@451 arg1@@306 arg2@@248 arg3@@204)) (MapType6Type refType boolType)) :qid |funType:lambda#140| :pattern ( (|lambda#140| arg0@@451 arg1@@306 arg2@@248 arg3@@204)) )))
(assert (forall (($o@@178 T@U) ($f@@144 T@U) (|l#0@@139| T@U) (|l#1@@139| T@U) (|l#2@@139| T@U) (|l#3@@139| Bool) ) (! (let ((alpha@@151 (FieldTypeInv0 (type $f@@144)))) (=> (and (and (and (and (= (type $o@@178) refType) (= (type $f@@144) (FieldType alpha@@151))) (= (type |l#0@@139|) refType)) (= (type |l#1@@139|) (MapType0Type refType MapType1Type))) (= (type |l#2@@139|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#140| |l#0@@139| |l#1@@139| |l#2@@139| |l#3@@139|) $o@@178 $f@@144))  (=> (and (not (= $o@@178 |l#0@@139|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@139| $o@@178) |l#2@@139|))) |l#3@@139|)))) :qid |GenericM.2432:7| :skolemid |4165| :pattern ( (MapType6Select (|lambda#140| |l#0@@139| |l#1@@139| |l#2@@139| |l#3@@139|) $o@@178 $f@@144)) )))
(assert (forall ((arg0@@452 T@U) (arg1@@307 T@U) (arg2@@249 T@U) (arg3@@205 Bool) ) (! (= (type (|lambda#141| arg0@@452 arg1@@307 arg2@@249 arg3@@205)) (MapType6Type refType boolType)) :qid |funType:lambda#141| :pattern ( (|lambda#141| arg0@@452 arg1@@307 arg2@@249 arg3@@205)) )))
(assert (forall (($o@@179 T@U) ($f@@145 T@U) (|l#0@@140| T@U) (|l#1@@140| T@U) (|l#2@@140| T@U) (|l#3@@140| Bool) ) (! (let ((alpha@@152 (FieldTypeInv0 (type $f@@145)))) (=> (and (and (and (and (= (type $o@@179) refType) (= (type $f@@145) (FieldType alpha@@152))) (= (type |l#0@@140|) refType)) (= (type |l#1@@140|) (MapType0Type refType MapType1Type))) (= (type |l#2@@140|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#141| |l#0@@140| |l#1@@140| |l#2@@140| |l#3@@140|) $o@@179 $f@@145))  (=> (and (not (= $o@@179 |l#0@@140|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@140| $o@@179) |l#2@@140|))) |l#3@@140|)))) :qid |GenericM.2432:7| :skolemid |4166| :pattern ( (MapType6Select (|lambda#141| |l#0@@140| |l#1@@140| |l#2@@140| |l#3@@140|) $o@@179 $f@@145)) )))
(assert (forall ((arg0@@453 T@U) (arg1@@308 T@U) (arg2@@250 T@U) (arg3@@206 Bool) ) (! (= (type (|lambda#142| arg0@@453 arg1@@308 arg2@@250 arg3@@206)) (MapType6Type refType boolType)) :qid |funType:lambda#142| :pattern ( (|lambda#142| arg0@@453 arg1@@308 arg2@@250 arg3@@206)) )))
(assert (forall (($o@@180 T@U) ($f@@146 T@U) (|l#0@@141| T@U) (|l#1@@141| T@U) (|l#2@@141| T@U) (|l#3@@141| Bool) ) (! (let ((alpha@@153 (FieldTypeInv0 (type $f@@146)))) (=> (and (and (and (and (= (type $o@@180) refType) (= (type $f@@146) (FieldType alpha@@153))) (= (type |l#0@@141|) refType)) (= (type |l#1@@141|) (MapType0Type refType MapType1Type))) (= (type |l#2@@141|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#142| |l#0@@141| |l#1@@141| |l#2@@141| |l#3@@141|) $o@@180 $f@@146))  (=> (and (not (= $o@@180 |l#0@@141|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@141| $o@@180) |l#2@@141|))) |l#3@@141|)))) :qid |GenericM.2450:7| :skolemid |4167| :pattern ( (MapType6Select (|lambda#142| |l#0@@141| |l#1@@141| |l#2@@141| |l#3@@141|) $o@@180 $f@@146)) )))
(assert (forall ((arg0@@454 T@U) (arg1@@309 T@U) (arg2@@251 T@U) (arg3@@207 Bool) ) (! (= (type (|lambda#143| arg0@@454 arg1@@309 arg2@@251 arg3@@207)) (MapType6Type refType boolType)) :qid |funType:lambda#143| :pattern ( (|lambda#143| arg0@@454 arg1@@309 arg2@@251 arg3@@207)) )))
(assert (forall (($o@@181 T@U) ($f@@147 T@U) (|l#0@@142| T@U) (|l#1@@142| T@U) (|l#2@@142| T@U) (|l#3@@142| Bool) ) (! (let ((alpha@@154 (FieldTypeInv0 (type $f@@147)))) (=> (and (and (and (and (= (type $o@@181) refType) (= (type $f@@147) (FieldType alpha@@154))) (= (type |l#0@@142|) refType)) (= (type |l#1@@142|) (MapType0Type refType MapType1Type))) (= (type |l#2@@142|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#143| |l#0@@142| |l#1@@142| |l#2@@142| |l#3@@142|) $o@@181 $f@@147))  (=> (and (not (= $o@@181 |l#0@@142|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@142| $o@@181) |l#2@@142|))) |l#3@@142|)))) :qid |GenericM.2450:7| :skolemid |4168| :pattern ( (MapType6Select (|lambda#143| |l#0@@142| |l#1@@142| |l#2@@142| |l#3@@142|) $o@@181 $f@@147)) )))
(assert (forall ((arg0@@455 T@U) (arg1@@310 T@U) (arg2@@252 T@U) (arg3@@208 Bool) ) (! (= (type (|lambda#144| arg0@@455 arg1@@310 arg2@@252 arg3@@208)) (MapType6Type refType boolType)) :qid |funType:lambda#144| :pattern ( (|lambda#144| arg0@@455 arg1@@310 arg2@@252 arg3@@208)) )))
(assert (forall (($o@@182 T@U) ($f@@148 T@U) (|l#0@@143| T@U) (|l#1@@143| T@U) (|l#2@@143| T@U) (|l#3@@143| Bool) ) (! (let ((alpha@@155 (FieldTypeInv0 (type $f@@148)))) (=> (and (and (and (and (= (type $o@@182) refType) (= (type $f@@148) (FieldType alpha@@155))) (= (type |l#0@@143|) refType)) (= (type |l#1@@143|) (MapType0Type refType MapType1Type))) (= (type |l#2@@143|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#144| |l#0@@143| |l#1@@143| |l#2@@143| |l#3@@143|) $o@@182 $f@@148))  (=> (and (not (= $o@@182 |l#0@@143|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@143| $o@@182) |l#2@@143|))) |l#3@@143|)))) :qid |GenericM.2461:7| :skolemid |4169| :pattern ( (MapType6Select (|lambda#144| |l#0@@143| |l#1@@143| |l#2@@143| |l#3@@143|) $o@@182 $f@@148)) )))
(assert (forall ((arg0@@456 T@U) (arg1@@311 T@U) (arg2@@253 T@U) (arg3@@209 Bool) ) (! (= (type (|lambda#145| arg0@@456 arg1@@311 arg2@@253 arg3@@209)) (MapType6Type refType boolType)) :qid |funType:lambda#145| :pattern ( (|lambda#145| arg0@@456 arg1@@311 arg2@@253 arg3@@209)) )))
(assert (forall (($o@@183 T@U) ($f@@149 T@U) (|l#0@@144| T@U) (|l#1@@144| T@U) (|l#2@@144| T@U) (|l#3@@144| Bool) ) (! (let ((alpha@@156 (FieldTypeInv0 (type $f@@149)))) (=> (and (and (and (and (= (type $o@@183) refType) (= (type $f@@149) (FieldType alpha@@156))) (= (type |l#0@@144|) refType)) (= (type |l#1@@144|) (MapType0Type refType MapType1Type))) (= (type |l#2@@144|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#145| |l#0@@144| |l#1@@144| |l#2@@144| |l#3@@144|) $o@@183 $f@@149))  (=> (and (not (= $o@@183 |l#0@@144|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@144| $o@@183) |l#2@@144|))) |l#3@@144|)))) :qid |GenericM.2461:7| :skolemid |4170| :pattern ( (MapType6Select (|lambda#145| |l#0@@144| |l#1@@144| |l#2@@144| |l#3@@144|) $o@@183 $f@@149)) )))
(assert (forall ((arg0@@457 T@U) (arg1@@312 T@U) (arg2@@254 T@U) (arg3@@210 Bool) ) (! (= (type (|lambda#146| arg0@@457 arg1@@312 arg2@@254 arg3@@210)) (MapType6Type refType boolType)) :qid |funType:lambda#146| :pattern ( (|lambda#146| arg0@@457 arg1@@312 arg2@@254 arg3@@210)) )))
(assert (forall (($o@@184 T@U) ($f@@150 T@U) (|l#0@@145| T@U) (|l#1@@145| T@U) (|l#2@@145| T@U) (|l#3@@145| Bool) ) (! (let ((alpha@@157 (FieldTypeInv0 (type $f@@150)))) (=> (and (and (and (and (= (type $o@@184) refType) (= (type $f@@150) (FieldType alpha@@157))) (= (type |l#0@@145|) refType)) (= (type |l#1@@145|) (MapType0Type refType MapType1Type))) (= (type |l#2@@145|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#146| |l#0@@145| |l#1@@145| |l#2@@145| |l#3@@145|) $o@@184 $f@@150))  (=> (and (not (= $o@@184 |l#0@@145|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@145| $o@@184) |l#2@@145|))) |l#3@@145|)))) :qid |GenericM.2481:7| :skolemid |4171| :pattern ( (MapType6Select (|lambda#146| |l#0@@145| |l#1@@145| |l#2@@145| |l#3@@145|) $o@@184 $f@@150)) )))
(assert (forall ((arg0@@458 T@U) (arg1@@313 T@U) (arg2@@255 T@U) (arg3@@211 Bool) ) (! (= (type (|lambda#147| arg0@@458 arg1@@313 arg2@@255 arg3@@211)) (MapType6Type refType boolType)) :qid |funType:lambda#147| :pattern ( (|lambda#147| arg0@@458 arg1@@313 arg2@@255 arg3@@211)) )))
(assert (forall (($o@@185 T@U) ($f@@151 T@U) (|l#0@@146| T@U) (|l#1@@146| T@U) (|l#2@@146| T@U) (|l#3@@146| Bool) ) (! (let ((alpha@@158 (FieldTypeInv0 (type $f@@151)))) (=> (and (and (and (and (= (type $o@@185) refType) (= (type $f@@151) (FieldType alpha@@158))) (= (type |l#0@@146|) refType)) (= (type |l#1@@146|) (MapType0Type refType MapType1Type))) (= (type |l#2@@146|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#147| |l#0@@146| |l#1@@146| |l#2@@146| |l#3@@146|) $o@@185 $f@@151))  (=> (and (not (= $o@@185 |l#0@@146|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@146| $o@@185) |l#2@@146|))) |l#3@@146|)))) :qid |GenericM.2481:7| :skolemid |4172| :pattern ( (MapType6Select (|lambda#147| |l#0@@146| |l#1@@146| |l#2@@146| |l#3@@146|) $o@@185 $f@@151)) )))
(assert (forall ((arg0@@459 T@U) (arg1@@314 T@U) (arg2@@256 T@U) (arg3@@212 Bool) ) (! (= (type (|lambda#148| arg0@@459 arg1@@314 arg2@@256 arg3@@212)) (MapType6Type refType boolType)) :qid |funType:lambda#148| :pattern ( (|lambda#148| arg0@@459 arg1@@314 arg2@@256 arg3@@212)) )))
(assert (forall (($o@@186 T@U) ($f@@152 T@U) (|l#0@@147| T@U) (|l#1@@147| T@U) (|l#2@@147| T@U) (|l#3@@147| Bool) ) (! (let ((alpha@@159 (FieldTypeInv0 (type $f@@152)))) (=> (and (and (and (and (= (type $o@@186) refType) (= (type $f@@152) (FieldType alpha@@159))) (= (type |l#0@@147|) refType)) (= (type |l#1@@147|) (MapType0Type refType MapType1Type))) (= (type |l#2@@147|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#148| |l#0@@147| |l#1@@147| |l#2@@147| |l#3@@147|) $o@@186 $f@@152))  (=> (and (not (= $o@@186 |l#0@@147|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@147| $o@@186) |l#2@@147|))) |l#3@@147|)))) :qid |GenericM.2488:7| :skolemid |4173| :pattern ( (MapType6Select (|lambda#148| |l#0@@147| |l#1@@147| |l#2@@147| |l#3@@147|) $o@@186 $f@@152)) )))
(assert (forall ((arg0@@460 T@U) (arg1@@315 T@U) (arg2@@257 T@U) (arg3@@213 Bool) ) (! (= (type (|lambda#149| arg0@@460 arg1@@315 arg2@@257 arg3@@213)) (MapType6Type refType boolType)) :qid |funType:lambda#149| :pattern ( (|lambda#149| arg0@@460 arg1@@315 arg2@@257 arg3@@213)) )))
(assert (forall (($o@@187 T@U) ($f@@153 T@U) (|l#0@@148| T@U) (|l#1@@148| T@U) (|l#2@@148| T@U) (|l#3@@148| Bool) ) (! (let ((alpha@@160 (FieldTypeInv0 (type $f@@153)))) (=> (and (and (and (and (= (type $o@@187) refType) (= (type $f@@153) (FieldType alpha@@160))) (= (type |l#0@@148|) refType)) (= (type |l#1@@148|) (MapType0Type refType MapType1Type))) (= (type |l#2@@148|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#149| |l#0@@148| |l#1@@148| |l#2@@148| |l#3@@148|) $o@@187 $f@@153))  (=> (and (not (= $o@@187 |l#0@@148|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@148| $o@@187) |l#2@@148|))) |l#3@@148|)))) :qid |GenericM.2488:7| :skolemid |4174| :pattern ( (MapType6Select (|lambda#149| |l#0@@148| |l#1@@148| |l#2@@148| |l#3@@148|) $o@@187 $f@@153)) )))
(assert (forall ((arg0@@461 T@U) (arg1@@316 T@U) (arg2@@258 T@U) (arg3@@214 Bool) ) (! (= (type (|lambda#150| arg0@@461 arg1@@316 arg2@@258 arg3@@214)) (MapType6Type refType boolType)) :qid |funType:lambda#150| :pattern ( (|lambda#150| arg0@@461 arg1@@316 arg2@@258 arg3@@214)) )))
(assert (forall (($o@@188 T@U) ($f@@154 T@U) (|l#0@@149| T@U) (|l#1@@149| T@U) (|l#2@@149| T@U) (|l#3@@149| Bool) ) (! (let ((alpha@@161 (FieldTypeInv0 (type $f@@154)))) (=> (and (and (and (and (= (type $o@@188) refType) (= (type $f@@154) (FieldType alpha@@161))) (= (type |l#0@@149|) refType)) (= (type |l#1@@149|) (MapType0Type refType MapType1Type))) (= (type |l#2@@149|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#150| |l#0@@149| |l#1@@149| |l#2@@149| |l#3@@149|) $o@@188 $f@@154))  (=> (and (not (= $o@@188 |l#0@@149|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@149| $o@@188) |l#2@@149|))) |l#3@@149|)))) :qid |GenericM.2495:7| :skolemid |4175| :pattern ( (MapType6Select (|lambda#150| |l#0@@149| |l#1@@149| |l#2@@149| |l#3@@149|) $o@@188 $f@@154)) )))
(assert (forall ((arg0@@462 T@U) (arg1@@317 T@U) (arg2@@259 T@U) (arg3@@215 Bool) ) (! (= (type (|lambda#151| arg0@@462 arg1@@317 arg2@@259 arg3@@215)) (MapType6Type refType boolType)) :qid |funType:lambda#151| :pattern ( (|lambda#151| arg0@@462 arg1@@317 arg2@@259 arg3@@215)) )))
(assert (forall (($o@@189 T@U) ($f@@155 T@U) (|l#0@@150| T@U) (|l#1@@150| T@U) (|l#2@@150| T@U) (|l#3@@150| Bool) ) (! (let ((alpha@@162 (FieldTypeInv0 (type $f@@155)))) (=> (and (and (and (and (= (type $o@@189) refType) (= (type $f@@155) (FieldType alpha@@162))) (= (type |l#0@@150|) refType)) (= (type |l#1@@150|) (MapType0Type refType MapType1Type))) (= (type |l#2@@150|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#151| |l#0@@150| |l#1@@150| |l#2@@150| |l#3@@150|) $o@@189 $f@@155))  (=> (and (not (= $o@@189 |l#0@@150|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@150| $o@@189) |l#2@@150|))) |l#3@@150|)))) :qid |GenericM.2495:7| :skolemid |4176| :pattern ( (MapType6Select (|lambda#151| |l#0@@150| |l#1@@150| |l#2@@150| |l#3@@150|) $o@@189 $f@@155)) )))
(assert (forall ((arg0@@463 T@U) (arg1@@318 T@U) (arg2@@260 T@U) (arg3@@216 Bool) ) (! (= (type (|lambda#152| arg0@@463 arg1@@318 arg2@@260 arg3@@216)) (MapType6Type refType boolType)) :qid |funType:lambda#152| :pattern ( (|lambda#152| arg0@@463 arg1@@318 arg2@@260 arg3@@216)) )))
(assert (forall (($o@@190 T@U) ($f@@156 T@U) (|l#0@@151| T@U) (|l#1@@151| T@U) (|l#2@@151| T@U) (|l#3@@151| Bool) ) (! (let ((alpha@@163 (FieldTypeInv0 (type $f@@156)))) (=> (and (and (and (and (= (type $o@@190) refType) (= (type $f@@156) (FieldType alpha@@163))) (= (type |l#0@@151|) refType)) (= (type |l#1@@151|) (MapType0Type refType MapType1Type))) (= (type |l#2@@151|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#152| |l#0@@151| |l#1@@151| |l#2@@151| |l#3@@151|) $o@@190 $f@@156))  (=> (and (not (= $o@@190 |l#0@@151|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@151| $o@@190) |l#2@@151|))) |l#3@@151|)))) :qid |GenericM.2502:7| :skolemid |4177| :pattern ( (MapType6Select (|lambda#152| |l#0@@151| |l#1@@151| |l#2@@151| |l#3@@151|) $o@@190 $f@@156)) )))
(assert (forall ((arg0@@464 T@U) (arg1@@319 T@U) (arg2@@261 T@U) (arg3@@217 Bool) ) (! (= (type (|lambda#153| arg0@@464 arg1@@319 arg2@@261 arg3@@217)) (MapType6Type refType boolType)) :qid |funType:lambda#153| :pattern ( (|lambda#153| arg0@@464 arg1@@319 arg2@@261 arg3@@217)) )))
(assert (forall (($o@@191 T@U) ($f@@157 T@U) (|l#0@@152| T@U) (|l#1@@152| T@U) (|l#2@@152| T@U) (|l#3@@152| Bool) ) (! (let ((alpha@@164 (FieldTypeInv0 (type $f@@157)))) (=> (and (and (and (and (= (type $o@@191) refType) (= (type $f@@157) (FieldType alpha@@164))) (= (type |l#0@@152|) refType)) (= (type |l#1@@152|) (MapType0Type refType MapType1Type))) (= (type |l#2@@152|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#153| |l#0@@152| |l#1@@152| |l#2@@152| |l#3@@152|) $o@@191 $f@@157))  (=> (and (not (= $o@@191 |l#0@@152|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@152| $o@@191) |l#2@@152|))) |l#3@@152|)))) :qid |GenericM.2502:7| :skolemid |4178| :pattern ( (MapType6Select (|lambda#153| |l#0@@152| |l#1@@152| |l#2@@152| |l#3@@152|) $o@@191 $f@@157)) )))
(assert (forall ((|$y#0| T@U) (|l#0@@153| T@U) (|l#1@@153| T@U) ) (!  (=> (and (and (= (type |$y#0|) BoxType) (= (type |l#0@@153|) TyType)) (= (type |l#1@@153|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#154| |l#0@@153| |l#1@@153|) |$y#0|))  (and ($IsBox |$y#0| |l#0@@153|) (U_2_bool (MapType0Select |l#1@@153| |$y#0|))))) :qid |Mapsidfy.16:4| :skolemid |4179| :pattern ( (MapType0Select (|lambda#154| |l#0@@153| |l#1@@153|) |$y#0|)) )))
(assert (forall ((|$w#0| T@U) (|l#0@@154| T@U) (|l#1@@154| T@U) (|l#2@@153| T@U) ) (!  (=> (and (and (and (= (type |$w#0|) BoxType) (= (type |l#0@@154|) TyType)) (= (type |l#1@@154|) (MapType0Type BoxType boolType))) (= (type |l#2@@153|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#156| |l#0@@154| |l#1@@154| |l#2@@153|) |$w#0|))  (and ($IsBox |$w#0| |l#0@@154|) (or (U_2_bool (MapType0Select |l#1@@154| |$w#0|)) (U_2_bool (MapType0Select |l#2@@153| |$w#0|)))))) :qid |Mapsidfy.25:4| :skolemid |4180| :pattern ( (MapType0Select (|lambda#156| |l#0@@154| |l#1@@154| |l#2@@153|) |$w#0|)) )))
(assert (forall ((|$w#0@@0| T@U) (|l#0@@155| T@U) (|l#1@@155| T@U) (|l#2@@154| T@U) ) (!  (=> (and (and (and (= (type |$w#0@@0|) BoxType) (= (type |l#0@@155|) (MapType0Type BoxType boolType))) (= (type |l#1@@155|) (MapType0Type BoxType BoxType))) (= (type |l#2@@154|) (MapType0Type BoxType BoxType))) (= (MapType0Select (|lambda#157| |l#0@@155| |l#1@@155| |l#2@@154|) |$w#0@@0|) (ite (U_2_bool (MapType0Select |l#0@@155| |$w#0@@0|)) (MapType0Select |l#1@@155| |$w#0@@0|) (MapType0Select |l#2@@154| |$w#0@@0|)))) :qid |Mapsidfy.25:4| :skolemid |4181| :pattern ( (MapType0Select (|lambda#157| |l#0@@155| |l#1@@155| |l#2@@154|) |$w#0@@0|)) )))
(assert (forall ((|$w#1| T@U) (|l#0@@156| T@U) (|l#1@@156| T@U) (|l#2@@155| T@U) ) (!  (=> (and (and (and (= (type |$w#1|) BoxType) (= (type |l#0@@156|) TyType)) (= (type |l#1@@156|) (MapType0Type BoxType boolType))) (= (type |l#2@@155|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#158| |l#0@@156| |l#1@@156| |l#2@@155|) |$w#1|))  (and ($IsBox |$w#1| |l#0@@156|) (or (U_2_bool (MapType0Select |l#1@@156| |$w#1|)) (U_2_bool (MapType0Select |l#2@@155| |$w#1|)))))) :qid |Mapsidfy.25:4| :skolemid |4182| :pattern ( (MapType0Select (|lambda#158| |l#0@@156| |l#1@@156| |l#2@@155|) |$w#1|)) )))
(assert (forall ((|$w#1@@0| T@U) (|l#0@@157| T@U) (|l#1@@157| T@U) (|l#2@@156| T@U) ) (!  (=> (and (and (and (= (type |$w#1@@0|) BoxType) (= (type |l#0@@157|) (MapType0Type BoxType boolType))) (= (type |l#1@@157|) (MapType0Type BoxType BoxType))) (= (type |l#2@@156|) (MapType0Type BoxType BoxType))) (= (MapType0Select (|lambda#159| |l#0@@157| |l#1@@157| |l#2@@156|) |$w#1@@0|) (ite (U_2_bool (MapType0Select |l#0@@157| |$w#1@@0|)) (MapType0Select |l#1@@157| |$w#1@@0|) (MapType0Select |l#2@@156| |$w#1@@0|)))) :qid |Mapsidfy.25:4| :skolemid |4183| :pattern ( (MapType0Select (|lambda#159| |l#0@@157| |l#1@@157| |l#2@@156|) |$w#1@@0|)) )))
(assert (forall ((|$w#1@@1| T@U) (|l#0@@158| T@U) (|l#1@@158| T@U) (|l#2@@157| T@U) ) (!  (=> (and (and (and (= (type |$w#1@@1|) BoxType) (= (type |l#0@@158|) TyType)) (= (type |l#1@@158|) (MapType0Type BoxType boolType))) (= (type |l#2@@157|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#160| |l#0@@158| |l#1@@158| |l#2@@157|) |$w#1@@1|))  (and ($IsBox |$w#1@@1| |l#0@@158|) (and (U_2_bool (MapType0Select |l#1@@158| |$w#1@@1|)) (not (= |$w#1@@1| |l#2@@157|)))))) :qid |Mapsidfy.35:15| :skolemid |4184| :pattern ( (MapType0Select (|lambda#160| |l#0@@158| |l#1@@158| |l#2@@157|) |$w#1@@1|)) )))
(assert (forall ((|$w#1@@2| T@U) (|l#0@@159| T@U) ) (!  (=> (and (= (type |$w#1@@2|) BoxType) (= (type |l#0@@159|) (MapType0Type BoxType BoxType))) (= (MapType0Select (|lambda#161| |l#0@@159|) |$w#1@@2|) (MapType0Select |l#0@@159| |$w#1@@2|))) :qid |Mapsidfy.35:15| :skolemid |4185| :pattern ( (MapType0Select (|lambda#161| |l#0@@159|) |$w#1@@2|)) )))
(assert (forall ((|$y#0@@0| T@U) (|l#0@@160| T@U) (|l#1@@159| T@U) (|l#2@@158| Int) ) (!  (=> (and (and (= (type |$y#0@@0|) BoxType) (= (type |l#0@@160|) TyType)) (= (type |l#1@@159|) (MapType0Type BoxType intType))) (= (U_2_bool (MapType0Select (|lambda#166| |l#0@@160| |l#1@@159| |l#2@@158|) |$y#0@@0|))  (and ($IsBox |$y#0@@0| |l#0@@160|) (> (U_2_int (MapType0Select |l#1@@159| |$y#0@@0|)) |l#2@@158|)))) :qid |sequence.28:5| :skolemid |4186| :pattern ( (MapType0Select (|lambda#166| |l#0@@160| |l#1@@159| |l#2@@158|) |$y#0@@0|)) )))
(declare-fun StartFuelAssert_GenericMarshalling._default.parse_Val () T@U)
(declare-fun |data#0@@70| () T@U)
(declare-fun |grammar#0@@27| () T@U)
(declare-fun $Heap@@40 () T@U)
(declare-fun $_Frame@0 () T@U)
(declare-fun |_mcc#0#0| () T@U)
(declare-fun |elt#8@0| () T@U)
(declare-fun |let#3#0#0| () T@U)
(declare-fun |_mcc#1#0| () T@U)
(declare-fun |t#6@0| () T@U)
(declare-fun |let#2#0#0| () T@U)
(declare-fun |_mcc#2#0| () T@U)
(declare-fun |cases#6@0| () T@U)
(declare-fun |let#1#0#0| () T@U)
(declare-fun $_Frame@0@@0 () T@U)
(declare-fun |rest#2@0| () T@U)
(declare-fun |val#2@0| () T@U)
(declare-fun |##val#1@0| () T@U)
(declare-fun |##val#0@0| () T@U)
(declare-fun |let#0#0#0| () T@U)
(declare-fun StartFuelAssert_SeqComparison._default.lte () T@U)
(declare-fun StartFuel_Math._default.power2 () T@U)
(declare-fun StartFuelAssert_Math._default.power2 () T@U)
(declare-fun StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32 () T@U)
(declare-fun StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64 () T@U)
(declare-fun StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq () T@U)
(declare-fun StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq () T@U)
(declare-fun StartFuel_Sequences._default.NoDupes () T@U)
(declare-fun StartFuelAssert_Sequences._default.NoDupes () T@U)
(declare-fun StartFuel_Sequences._default.Range () T@U)
(declare-fun StartFuelAssert_Sequences._default.Range () T@U)
(declare-fun StartFuel_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuelAssert_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuel_Sequences._default.remove () T@U)
(declare-fun StartFuelAssert_Sequences._default.remove () T@U)
(declare-fun StartFuel_Sequences._default.insert () T@U)
(declare-fun StartFuelAssert_Sequences._default.insert () T@U)
(declare-fun StartFuel_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuel_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuel_Sequences._default.concat () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat () T@U)
(declare-fun StartFuel_Sequences._default.concat3 () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat3 () T@U)
(declare-fun StartFuel_Sequences._default.concatSeq () T@U)
(declare-fun StartFuelAssert_Sequences._default.concatSeq () T@U)
(declare-fun StartFuel_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuel_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexIterate () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuel_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuel_Sequences._default.Zip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Zip () T@U)
(declare-fun StartFuel_Sequences._default.Unzip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Unzip () T@U)
(declare-fun StartFuel_Sequences._default.Flatten () T@U)
(declare-fun StartFuelAssert_Sequences._default.Flatten () T@U)
(declare-fun StartFuel_Sequences._default.fill () T@U)
(declare-fun StartFuelAssert_Sequences._default.fill () T@U)
(declare-fun StartFuel_GenericMarshalling._default.SeqSum () T@U)
(declare-fun StartFuelAssert_GenericMarshalling._default.SeqSum () T@U)
(declare-fun StartFuel_GenericMarshalling._default.parse_Array_contents () T@U)
(declare-fun StartFuelAssert_GenericMarshalling._default.parse_Array_contents () T@U)
(declare-fun StartFuel_GenericMarshalling._default.parse_Tuple_contents () T@U)
(declare-fun StartFuelAssert_GenericMarshalling._default.parse_Tuple_contents () T@U)
(declare-fun %lbl%+0 () Bool)
(declare-fun %lbl%+1 () Bool)
(declare-fun %lbl%+2 () Bool)
(declare-fun %lbl%@3 () Bool)
(declare-fun %lbl%+4 () Bool)
(declare-fun %lbl%@5 () Bool)
(declare-fun %lbl%+6 () Bool)
(declare-fun %lbl%+7 () Bool)
(declare-fun %lbl%+8 () Bool)
(declare-fun %lbl%+9 () Bool)
(declare-fun %lbl%@10 () Bool)
(declare-fun %lbl%@11 () Bool)
(declare-fun %lbl%@12 () Bool)
(declare-fun %lbl%@13 () Bool)
(declare-fun %lbl%+14 () Bool)
(declare-fun %lbl%@15 () Bool)
(declare-fun %lbl%@16 () Bool)
(declare-fun %lbl%@17 () Bool)
(declare-fun %lbl%+18 () Bool)
(declare-fun %lbl%@19 () Bool)
(declare-fun |b$reqreads#1@1| () Bool)
(declare-fun %lbl%@20 () Bool)
(declare-fun |b$reqreads#2@1| () Bool)
(declare-fun %lbl%@21 () Bool)
(declare-fun |b$reqreads#3@1| () Bool)
(declare-fun %lbl%@22 () Bool)
(declare-fun |b$reqreads#4@1| () Bool)
(declare-fun %lbl%@23 () Bool)
(declare-fun |b$reqreads#5@1| () Bool)
(declare-fun %lbl%@24 () Bool)
(declare-fun |b$reqreads#6@1| () Bool)
(declare-fun %lbl%@25 () Bool)
(declare-fun |b$reqreads#7@1| () Bool)
(declare-fun %lbl%@26 () Bool)
(declare-fun |b$reqreads#8@1| () Bool)
(declare-fun %lbl%+27 () Bool)
(declare-fun %lbl%@28 () Bool)
(declare-fun %lbl%@29 () Bool)
(declare-fun %lbl%@30 () Bool)
(declare-fun %lbl%@31 () Bool)
(declare-fun %lbl%@32 () Bool)
(declare-fun %lbl%@33 () Bool)
(declare-fun %lbl%@34 () Bool)
(declare-fun %lbl%@35 () Bool)
(declare-fun %lbl%@36 () Bool)
(declare-fun %lbl%@37 () Bool)
(declare-fun |b$reqreads#1@0| () Bool)
(declare-fun %lbl%@38 () Bool)
(declare-fun %lbl%+39 () Bool)
(declare-fun %lbl%@40 () Bool)
(declare-fun |b$reqreads#2@0| () Bool)
(declare-fun %lbl%+41 () Bool)
(declare-fun %lbl%@42 () Bool)
(declare-fun |b$reqreads#3@0| () Bool)
(declare-fun %lbl%+43 () Bool)
(declare-fun %lbl%@44 () Bool)
(declare-fun |b$reqreads#4@0| () Bool)
(declare-fun %lbl%+45 () Bool)
(declare-fun %lbl%@46 () Bool)
(declare-fun %lbl%@47 () Bool)
(declare-fun %lbl%@48 () Bool)
(declare-fun %lbl%@49 () Bool)
(declare-fun %lbl%@50 () Bool)
(declare-fun %lbl%@51 () Bool)
(declare-fun %lbl%@52 () Bool)
(declare-fun %lbl%@53 () Bool)
(declare-fun %lbl%@54 () Bool)
(declare-fun %lbl%@55 () Bool)
(declare-fun |b$reqreads#5@0| () Bool)
(declare-fun %lbl%@56 () Bool)
(declare-fun %lbl%@57 () Bool)
(declare-fun %lbl%+58 () Bool)
(declare-fun %lbl%@59 () Bool)
(declare-fun %lbl%@60 () Bool)
(declare-fun |b$reqreads#6@0| () Bool)
(declare-fun %lbl%@61 () Bool)
(declare-fun %lbl%+62 () Bool)
(declare-fun %lbl%@63 () Bool)
(declare-fun |b$reqreads#7@0| () Bool)
(declare-fun %lbl%+64 () Bool)
(declare-fun %lbl%@65 () Bool)
(declare-fun |b$reqreads#8@0| () Bool)
(declare-fun %lbl%+66 () Bool)
(declare-fun %lbl%+67 () Bool)
(declare-fun %lbl%+68 () Bool)
(declare-fun %lbl%+69 () Bool)
(declare-fun %lbl%+70 () Bool)
(declare-fun %lbl%+71 () Bool)
(declare-fun %lbl%+72 () Bool)
(declare-fun %lbl%+73 () Bool)
(declare-fun %lbl%+74 () Bool)
(declare-fun %lbl%+75 () Bool)
(declare-fun |b$reqreads#0@0| () Bool)
(declare-fun %lbl%@76 () Bool)
(declare-fun %lbl%+77 () Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type StartFuelAssert_GenericMarshalling._default.parse_Val) LayerTypeType) (= (type |data#0@@70|) (SeqType BoxType))) (= (type |grammar#0@@27|) DatatypeTypeType)) (= (type $Heap@@40) (MapType0Type refType MapType1Type))) (= (type $_Frame@0) (MapType6Type refType boolType))) (= (type |_mcc#0#0|) DatatypeTypeType)) (= (type |elt#8@0|) DatatypeTypeType)) (= (type |let#3#0#0|) DatatypeTypeType)) (= (type |_mcc#1#0|) (SeqType BoxType))) (= (type |t#6@0|) (SeqType BoxType))) (= (type |let#2#0#0|) (SeqType BoxType))) (= (type |_mcc#2#0|) (SeqType BoxType))) (= (type |cases#6@0|) (SeqType BoxType))) (= (type |let#1#0#0|) (SeqType BoxType))) (= (type $_Frame@0@@0) (MapType6Type refType boolType))) (= (type |rest#2@0|) (SeqType BoxType))) (= (type |val#2@0|) DatatypeTypeType)) (= (type |##val#1@0|) DatatypeTypeType)) (= (type |##val#0@0|) DatatypeTypeType)) (= (type |let#0#0#0|) DatatypeTypeType)) (= (type StartFuelAssert_SeqComparison._default.lte) LayerTypeType)) (= (type StartFuel_Math._default.power2) LayerTypeType)) (= (type StartFuelAssert_Math._default.power2) LayerTypeType)) (= (type StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32) LayerTypeType)) (= (type StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64) LayerTypeType)) (= (type StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq) LayerTypeType)) (= (type StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq) LayerTypeType)) (= (type StartFuel_Sequences._default.NoDupes) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.NoDupes) LayerTypeType)) (= (type StartFuel_Sequences._default.Range) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Range) LayerTypeType)) (= (type StartFuel_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuel_Sequences._default.remove) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.remove) LayerTypeType)) (= (type StartFuel_Sequences._default.insert) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.insert) LayerTypeType)) (= (type StartFuel_Sequences._default.replace1with2) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace1with2) LayerTypeType)) (= (type StartFuel_Sequences._default.replace2with1) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace2with1) LayerTypeType)) (= (type StartFuel_Sequences._default.concat) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat) LayerTypeType)) (= (type StartFuel_Sequences._default.concat3) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat3) LayerTypeType)) (= (type StartFuel_Sequences._default.concatSeq) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concatSeq) LayerTypeType)) (= (type StartFuel_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuel_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexIterate) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuel_Sequences._default.Zip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Zip) LayerTypeType)) (= (type StartFuel_Sequences._default.Unzip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Unzip) LayerTypeType)) (= (type StartFuel_Sequences._default.Flatten) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Flatten) LayerTypeType)) (= (type StartFuel_Sequences._default.fill) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.fill) LayerTypeType)) (= (type StartFuel_GenericMarshalling._default.SeqSum) LayerTypeType)) (= (type StartFuelAssert_GenericMarshalling._default.SeqSum) LayerTypeType)) (= (type StartFuel_GenericMarshalling._default.parse_Array_contents) LayerTypeType)) (= (type StartFuelAssert_GenericMarshalling._default.parse_Array_contents) LayerTypeType)) (= (type StartFuel_GenericMarshalling._default.parse_Tuple_contents) LayerTypeType)) (= (type StartFuelAssert_GenericMarshalling._default.parse_Tuple_contents) LayerTypeType)))
(push 1)
(set-info :boogie-vc-id CheckWellformed$$GenericMarshalling.__default.parse__Val)
(assert (not (let ((anon6_correct  (=> (! (and %lbl%+0 true) :lblpos +0) true))) (let ((anon21_Else_correct  (=> (! (and %lbl%+1 true) :lblpos +1) (=> (not (GenericMarshalling.__default.ValidVal ($LS $LZ) ($Unbox DatatypeTypeType (Options.Option.value |val#2@0|)))) anon6_correct)))) (let ((anon21_Then_correct  (=> (! (and %lbl%+2 true) :lblpos +2) (=> (GenericMarshalling.__default.ValidVal ($LS $LZ) ($Unbox DatatypeTypeType (Options.Option.value |val#2@0|))) (and (! (or %lbl%@3 (Options.Option.Some_q |val#2@0|)) :lblneg @3) (=> (Options.Option.Some_q |val#2@0|) (=> (and (and (= |##val#1@0| ($Unbox DatatypeTypeType (Options.Option.value |val#2@0|))) ($IsAlloc |##val#1@0| Tclass.GenericMarshalling.V $Heap@@40)) (and ($IsAlloc |grammar#0@@27| Tclass.GenericMarshalling.G $Heap@@40) (|GenericMarshalling.__default.ValInGrammar#canCall| ($Unbox DatatypeTypeType (Options.Option.value |val#2@0|)) |grammar#0@@27|))) anon6_correct))))))) (let ((anon20_Then_correct  (=> (! (and %lbl%+4 true) :lblpos +4) (=> (not (Options.Option.None_q |val#2@0|)) (and (! (or %lbl%@5 (Options.Option.Some_q |val#2@0|)) :lblneg @5) (=> (Options.Option.Some_q |val#2@0|) (=> (= |##val#0@0| ($Unbox DatatypeTypeType (Options.Option.value |val#2@0|))) (=> (and ($IsAlloc |##val#0@0| Tclass.GenericMarshalling.V $Heap@@40) (|GenericMarshalling.__default.ValidVal#canCall| ($Unbox DatatypeTypeType (Options.Option.value |val#2@0|)))) (and anon21_Then_correct anon21_Else_correct))))))))) (let ((anon20_Else_correct  (=> (! (and %lbl%+6 true) :lblpos +6) (=> (Options.Option.None_q |val#2@0|) anon6_correct)))) (let ((anon19_Then_correct  (=> (! (and %lbl%+7 true) :lblpos +7) (=> (<= (|Seq#Length| |rest#2@0|) (|Seq#Length| |data#0@@70|)) (and anon20_Then_correct anon20_Else_correct))))) (let ((anon19_Else_correct  (=> (! (and %lbl%+8 true) :lblpos +8) (=> (< (|Seq#Length| |data#0@@70|) (|Seq#Length| |rest#2@0|)) anon6_correct)))) (let ((anon18_Then_correct  (=> (! (and %lbl%+9 true) :lblpos +9) (=> ($Is (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@70| |grammar#0@@27|) (Tclass._System.Tuple2 (Tclass.Options.Option Tclass.GenericMarshalling.V) (TSeq Tclass.NativeTypes.byte))) (=> (and (and ($Is |val#2@0| (Tclass.Options.Option Tclass.GenericMarshalling.V)) ($Is |rest#2@0| (TSeq Tclass.NativeTypes.byte))) (and ($IsAlloc |data#0@@70| (TSeq Tclass.NativeTypes.byte) $Heap@@40) ($IsAlloc |grammar#0@@27| Tclass.GenericMarshalling.G $Heap@@40))) (and (! (or %lbl%@10 (< (|Seq#Length| |data#0@@70|) 18446744073709551616)) :lblneg @10) (=> (< (|Seq#Length| |data#0@@70|) 18446744073709551616) (and (! (or %lbl%@11 (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |grammar#0@@27|)) :lblneg @11) (=> (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |grammar#0@@27|) (and (! (or %lbl%@12  (or (or (<= 0 (LitInt 0)) (< (DtRank |grammar#0@@27|) (DtRank |grammar#0@@27|))) (= (LitInt 0) (LitInt 0)))) :lblneg @12) (=> (or (or (<= 0 (LitInt 0)) (< (DtRank |grammar#0@@27|) (DtRank |grammar#0@@27|))) (= (LitInt 0) (LitInt 0))) (and (! (or %lbl%@13  (or (and (= |data#0@@70| |data#0@@70|) (= |grammar#0@@27| |grammar#0@@27|)) (or (< (DtRank |grammar#0@@27|) (DtRank |grammar#0@@27|)) (and (= (DtRank |grammar#0@@27|) (DtRank |grammar#0@@27|)) (< (LitInt 0) (LitInt 0)))))) :lblneg @13) (=> (or (and (= |data#0@@70| |data#0@@70|) (= |grammar#0@@27| |grammar#0@@27|)) (or (< (DtRank |grammar#0@@27|) (DtRank |grammar#0@@27|)) (and (= (DtRank |grammar#0@@27|) (DtRank |grammar#0@@27|)) (< (LitInt 0) (LitInt 0))))) (=> (and (and (and (or (and (= |data#0@@70| |data#0@@70|) (= |grammar#0@@27| |grammar#0@@27|)) (|GenericMarshalling.__default.parse__Val#canCall| |data#0@@70| |grammar#0@@27|)) (_System.Tuple2.___hMake2_q (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@70| |grammar#0@@27|))) (and (= |let#0#0#0| (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@70| |grammar#0@@27|)) (|GenericMarshalling.__default.parse__Val#canCall| |data#0@@70| |grammar#0@@27|))) (and (and ($Is |let#0#0#0| (Tclass._System.Tuple2 (Tclass.Options.Option Tclass.GenericMarshalling.V) (TSeq Tclass.NativeTypes.byte))) (_System.Tuple2.___hMake2_q |let#0#0#0|)) (and (_System.Tuple2.___hMake2_q |let#0#0#0|) (= (|#_System._tuple#2._#Make2| ($Box |val#2@0|) ($Box |rest#2@0|)) |let#0#0#0|)))) (and anon19_Then_correct anon19_Else_correct))))))))))))))) (let ((GeneratedUnifiedExit_correct  (=> (! (and %lbl%+14 true) :lblpos +14) (and (! (or %lbl%@15 (let ((|rest#1@@3| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Val StartFuelAssert_GenericMarshalling._default.parse_Val |data#0@@70| |grammar#0@@27|))))) (<= (|Seq#Length| |rest#1@@3|) (|Seq#Length| |data#0@@70|)))) :lblneg @15) (=> (let ((|rest#1@@4| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (GenericMarshalling.__default.parse__Val StartFuelAssert_GenericMarshalling._default.parse_Val |data#0@@70| |grammar#0@@27|))))) (<= (|Seq#Length| |rest#1@@4|) (|Seq#Length| |data#0@@70|))) (and (! (or %lbl%@16 (let ((|val#1@@2| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val StartFuelAssert_GenericMarshalling._default.parse_Val |data#0@@70| |grammar#0@@27|))))) (=> (not (Options.Option.None_q |val#1@@2|)) (GenericMarshalling.__default.ValidVal ($LS ($LS $LZ)) ($Unbox DatatypeTypeType (Options.Option.value |val#1@@2|)))))) :lblneg @16) (=> (let ((|val#1@@3| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val StartFuelAssert_GenericMarshalling._default.parse_Val |data#0@@70| |grammar#0@@27|))))) (=> (not (Options.Option.None_q |val#1@@3|)) (GenericMarshalling.__default.ValidVal ($LS ($LS $LZ)) ($Unbox DatatypeTypeType (Options.Option.value |val#1@@3|))))) (! (or %lbl%@17 (let ((|val#1@@4| ($Unbox DatatypeTypeType (_System.Tuple2._0 (GenericMarshalling.__default.parse__Val StartFuelAssert_GenericMarshalling._default.parse_Val |data#0@@70| |grammar#0@@27|))))) (=> (not (Options.Option.None_q |val#1@@4|)) (GenericMarshalling.__default.ValInGrammar ($LS ($LS $LZ)) ($Unbox DatatypeTypeType (Options.Option.value |val#1@@4|)) |grammar#0@@27|)))) :lblneg @17)))))))) (let ((anon17_correct  (=> (! (and %lbl%+18 true) :lblpos +18) (and (! (or %lbl%@19 |b$reqreads#1@1|) :lblneg @19) (=> |b$reqreads#1@1| (and (! (or %lbl%@20 |b$reqreads#2@1|) :lblneg @20) (=> |b$reqreads#2@1| (and (! (or %lbl%@21 |b$reqreads#3@1|) :lblneg @21) (=> |b$reqreads#3@1| (and (! (or %lbl%@22 |b$reqreads#4@1|) :lblneg @22) (=> |b$reqreads#4@1| (and (! (or %lbl%@23 |b$reqreads#5@1|) :lblneg @23) (=> |b$reqreads#5@1| (and (! (or %lbl%@24 |b$reqreads#6@1|) :lblneg @24) (=> |b$reqreads#6@1| (and (! (or %lbl%@25 |b$reqreads#7@1|) :lblneg @25) (=> |b$reqreads#7@1| (and (! (or %lbl%@26 |b$reqreads#8@1|) :lblneg @26) (=> |b$reqreads#8@1| GeneratedUnifiedExit_correct))))))))))))))))))) (let ((anon29_Then_correct  (=> (! (and %lbl%+27 true) :lblpos +27) (=> (and (and (and (= |grammar#0@@27| (|#GenericMarshalling.G.GTaggedUnion| |_mcc#2#0|)) ($Is |_mcc#2#0| (TSeq Tclass.GenericMarshalling.G))) (and ($Is |cases#6@0| (TSeq Tclass.GenericMarshalling.G)) (= |let#1#0#0| |_mcc#2#0|))) (and (and ($Is |let#1#0#0| (TSeq Tclass.GenericMarshalling.G)) (= |cases#6@0| |let#1#0#0|)) (and ($IsAlloc |data#0@@70| (TSeq Tclass.NativeTypes.byte) $Heap@@40) ($IsAlloc |cases#6@0| (TSeq Tclass.GenericMarshalling.G) $Heap@@40)))) (and (! (or %lbl%@28 (< (|Seq#Length| |data#0@@70|) 18446744073709551616)) :lblneg @28) (=> (< (|Seq#Length| |data#0@@70|) 18446744073709551616) (and (! (or %lbl%@29 (< (|Seq#Length| |cases#6@0|) 18446744073709551616)) :lblneg @29) (=> (< (|Seq#Length| |cases#6@0|) 18446744073709551616) (and (! (or %lbl%@30 (forall ((|elt#6| T@U) ) (!  (=> (= (type |elt#6|) DatatypeTypeType) (=> (and (and ($Is |elt#6| Tclass.GenericMarshalling.G) (forall ((|elt$ih#0#0| T@U) ) (!  (=> (and (and (and (= (type |elt$ih#0#0|) DatatypeTypeType) ($Is |elt$ih#0#0| Tclass.GenericMarshalling.G)) (< (DtRank |elt$ih#0#0|) (DtRank |elt#6|))) (|Seq#Contains| |cases#6@0| ($Box |elt$ih#0#0|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#0#0|)) :qid |GenericM.714:21| :skolemid |1854| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#0#0|)) :pattern ( (|Seq#Contains| |cases#6@0| ($Box |elt$ih#0#0|))) ))) (and true (= |#GenericMarshalling.G.GUint32| |elt#6|))) (=> (|Seq#Contains| |cases#6@0| ($Box |elt#6|)) (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#6|)))) :qid |GenericM.714:21| :skolemid |1858| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#6|)) :pattern ( (|Seq#Contains| |cases#6@0| ($Box |elt#6|))) ))) :lblneg @30) (and (! (or %lbl%@31 (forall ((|elt#6@@0| T@U) ) (!  (=> (= (type |elt#6@@0|) DatatypeTypeType) (=> (and (and ($Is |elt#6@@0| Tclass.GenericMarshalling.G) (forall ((|elt$ih#0#0@@0| T@U) ) (!  (=> (and (and (and (= (type |elt$ih#0#0@@0|) DatatypeTypeType) ($Is |elt$ih#0#0@@0| Tclass.GenericMarshalling.G)) (< (DtRank |elt$ih#0#0@@0|) (DtRank |elt#6@@0|))) (|Seq#Contains| |cases#6@0| ($Box |elt$ih#0#0@@0|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#0#0@@0|)) :qid |GenericM.714:21| :skolemid |1854| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#0#0@@0|)) :pattern ( (|Seq#Contains| |cases#6@0| ($Box |elt$ih#0#0@@0|))) ))) (and true (= |#GenericMarshalling.G.GUint64| |elt#6@@0|))) (=> (|Seq#Contains| |cases#6@0| ($Box |elt#6@@0|)) (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#6@@0|)))) :qid |GenericM.714:21| :skolemid |1859| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#6@@0|)) :pattern ( (|Seq#Contains| |cases#6@0| ($Box |elt#6@@0|))) ))) :lblneg @31) (and (! (or %lbl%@32 (forall ((|elt#6@@1| T@U) ) (!  (=> (= (type |elt#6@@1|) DatatypeTypeType) (=> (and (and ($Is |elt#6@@1| Tclass.GenericMarshalling.G) (forall ((|elt$ih#0#0@@1| T@U) ) (!  (=> (and (and (and (= (type |elt$ih#0#0@@1|) DatatypeTypeType) ($Is |elt$ih#0#0@@1| Tclass.GenericMarshalling.G)) (< (DtRank |elt$ih#0#0@@1|) (DtRank |elt#6@@1|))) (|Seq#Contains| |cases#6@0| ($Box |elt$ih#0#0@@1|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#0#0@@1|)) :qid |GenericM.714:21| :skolemid |1854| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#0#0@@1|)) :pattern ( (|Seq#Contains| |cases#6@0| ($Box |elt$ih#0#0@@1|))) ))) (and true (exists ((|a#2#0#0@@0| T@U) ) (!  (and (= (type |a#2#0#0@@0|) DatatypeTypeType) (and ($Is |a#2#0#0@@0| Tclass.GenericMarshalling.G) (= (|#GenericMarshalling.G.GArray| |a#2#0#0@@0|) |elt#6@@1|))) :qid |GenericM.36:21| :skolemid |1855| :pattern ( (|#GenericMarshalling.G.GArray| |a#2#0#0@@0|)) )))) (=> (|Seq#Contains| |cases#6@0| ($Box |elt#6@@1|)) (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#6@@1|)))) :qid |GenericM.714:21| :skolemid |1860| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#6@@1|)) :pattern ( (|Seq#Contains| |cases#6@0| ($Box |elt#6@@1|))) ))) :lblneg @32) (and (! (or %lbl%@33 (forall ((|elt#6@@2| T@U) ) (!  (=> (= (type |elt#6@@2|) DatatypeTypeType) (=> (and (and ($Is |elt#6@@2| Tclass.GenericMarshalling.G) (forall ((|elt$ih#0#0@@2| T@U) ) (!  (=> (and (and (and (= (type |elt$ih#0#0@@2|) DatatypeTypeType) ($Is |elt$ih#0#0@@2| Tclass.GenericMarshalling.G)) (< (DtRank |elt$ih#0#0@@2|) (DtRank |elt#6@@2|))) (|Seq#Contains| |cases#6@0| ($Box |elt$ih#0#0@@2|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#0#0@@2|)) :qid |GenericM.714:21| :skolemid |1854| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#0#0@@2|)) :pattern ( (|Seq#Contains| |cases#6@0| ($Box |elt$ih#0#0@@2|))) ))) (and true (exists ((|a#3#0#0@@0| T@U) ) (!  (and (= (type |a#3#0#0@@0|) (SeqType BoxType)) (and ($Is |a#3#0#0@@0| (TSeq Tclass.GenericMarshalling.G)) (= (|#GenericMarshalling.G.GTuple| |a#3#0#0@@0|) |elt#6@@2|))) :qid |GenericM.37:21| :skolemid |1856| :pattern ( (|#GenericMarshalling.G.GTuple| |a#3#0#0@@0|)) )))) (=> (|Seq#Contains| |cases#6@0| ($Box |elt#6@@2|)) (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#6@@2|)))) :qid |GenericM.714:21| :skolemid |1861| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#6@@2|)) :pattern ( (|Seq#Contains| |cases#6@0| ($Box |elt#6@@2|))) ))) :lblneg @33) (and (! (or %lbl%@34 (forall ((|elt#6@@3| T@U) ) (!  (=> (= (type |elt#6@@3|) DatatypeTypeType) (=> (and (and ($Is |elt#6@@3| Tclass.GenericMarshalling.G) (forall ((|elt$ih#0#0@@3| T@U) ) (!  (=> (and (and (and (= (type |elt$ih#0#0@@3|) DatatypeTypeType) ($Is |elt$ih#0#0@@3| Tclass.GenericMarshalling.G)) (< (DtRank |elt$ih#0#0@@3|) (DtRank |elt#6@@3|))) (|Seq#Contains| |cases#6@0| ($Box |elt$ih#0#0@@3|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#0#0@@3|)) :qid |GenericM.714:21| :skolemid |1854| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#0#0@@3|)) :pattern ( (|Seq#Contains| |cases#6@0| ($Box |elt$ih#0#0@@3|))) ))) (and true (= |#GenericMarshalling.G.GByteArray| |elt#6@@3|))) (=> (|Seq#Contains| |cases#6@0| ($Box |elt#6@@3|)) (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#6@@3|)))) :qid |GenericM.714:21| :skolemid |1862| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#6@@3|)) :pattern ( (|Seq#Contains| |cases#6@0| ($Box |elt#6@@3|))) ))) :lblneg @34) (and (! (or %lbl%@35 (forall ((|elt#6@@4| T@U) ) (!  (=> (= (type |elt#6@@4|) DatatypeTypeType) (=> (and (and ($Is |elt#6@@4| Tclass.GenericMarshalling.G) (forall ((|elt$ih#0#0@@4| T@U) ) (!  (=> (and (and (and (= (type |elt$ih#0#0@@4|) DatatypeTypeType) ($Is |elt$ih#0#0@@4| Tclass.GenericMarshalling.G)) (< (DtRank |elt$ih#0#0@@4|) (DtRank |elt#6@@4|))) (|Seq#Contains| |cases#6@0| ($Box |elt$ih#0#0@@4|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#0#0@@4|)) :qid |GenericM.714:21| :skolemid |1854| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#0#0@@4|)) :pattern ( (|Seq#Contains| |cases#6@0| ($Box |elt$ih#0#0@@4|))) ))) (and true (= |#GenericMarshalling.G.GUint32Array| |elt#6@@4|))) (=> (|Seq#Contains| |cases#6@0| ($Box |elt#6@@4|)) (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#6@@4|)))) :qid |GenericM.714:21| :skolemid |1863| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#6@@4|)) :pattern ( (|Seq#Contains| |cases#6@0| ($Box |elt#6@@4|))) ))) :lblneg @35) (and (! (or %lbl%@36 (forall ((|elt#6@@5| T@U) ) (!  (=> (= (type |elt#6@@5|) DatatypeTypeType) (=> (and (and ($Is |elt#6@@5| Tclass.GenericMarshalling.G) (forall ((|elt$ih#0#0@@5| T@U) ) (!  (=> (and (and (and (= (type |elt$ih#0#0@@5|) DatatypeTypeType) ($Is |elt$ih#0#0@@5| Tclass.GenericMarshalling.G)) (< (DtRank |elt$ih#0#0@@5|) (DtRank |elt#6@@5|))) (|Seq#Contains| |cases#6@0| ($Box |elt$ih#0#0@@5|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#0#0@@5|)) :qid |GenericM.714:21| :skolemid |1854| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#0#0@@5|)) :pattern ( (|Seq#Contains| |cases#6@0| ($Box |elt$ih#0#0@@5|))) ))) (and true (= |#GenericMarshalling.G.GUint64Array| |elt#6@@5|))) (=> (|Seq#Contains| |cases#6@0| ($Box |elt#6@@5|)) (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#6@@5|)))) :qid |GenericM.714:21| :skolemid |1864| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#6@@5|)) :pattern ( (|Seq#Contains| |cases#6@0| ($Box |elt#6@@5|))) ))) :lblneg @36) (and (! (or %lbl%@37 (forall ((|elt#6@@6| T@U) ) (!  (=> (= (type |elt#6@@6|) DatatypeTypeType) (=> (and (and ($Is |elt#6@@6| Tclass.GenericMarshalling.G) (forall ((|elt$ih#0#0@@6| T@U) ) (!  (=> (and (and (and (= (type |elt$ih#0#0@@6|) DatatypeTypeType) ($Is |elt$ih#0#0@@6| Tclass.GenericMarshalling.G)) (< (DtRank |elt$ih#0#0@@6|) (DtRank |elt#6@@6|))) (|Seq#Contains| |cases#6@0| ($Box |elt$ih#0#0@@6|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#0#0@@6|)) :qid |GenericM.714:21| :skolemid |1854| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#0#0@@6|)) :pattern ( (|Seq#Contains| |cases#6@0| ($Box |elt$ih#0#0@@6|))) ))) (and true (exists ((|a#7#0#0@@1| T@U) ) (!  (and (= (type |a#7#0#0@@1|) (SeqType BoxType)) (and ($Is |a#7#0#0@@1| (TSeq Tclass.GenericMarshalling.G)) (= (|#GenericMarshalling.G.GTaggedUnion| |a#7#0#0@@1|) |elt#6@@6|))) :qid |GenericM.41:27| :skolemid |1857| :pattern ( (|#GenericMarshalling.G.GTaggedUnion| |a#7#0#0@@1|)) )))) (=> (|Seq#Contains| |cases#6@0| ($Box |elt#6@@6|)) (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#6@@6|)))) :qid |GenericM.714:21| :skolemid |1865| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#6@@6|)) :pattern ( (|Seq#Contains| |cases#6@0| ($Box |elt#6@@6|))) ))) :lblneg @37) (=> (forall ((|elt#6@@7| T@U) ) (!  (=> (and (and (= (type |elt#6@@7|) DatatypeTypeType) ($Is |elt#6@@7| Tclass.GenericMarshalling.G)) (|Seq#Contains| |cases#6@0| ($Box |elt#6@@7|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#6@@7|)) :qid |GenericM.714:21| :skolemid |1867| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#6@@7|)) :pattern ( (|Seq#Contains| |cases#6@0| ($Box |elt#6@@7|))) )) (=> (and (=> |b$reqreads#1@0| (forall (($o@@192 T@U) ($f@@158 T@U) ) (! (let ((alpha@@165 (FieldTypeInv0 (type $f@@158)))) (=> (and (and (= (type $o@@192) refType) (= (type $f@@158) (FieldType alpha@@165))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@192 $f@@158)))) :qid |GenericM.776:37| :skolemid |1868| :no-pattern (type $o@@192) :no-pattern (type $f@@158) :no-pattern (U_2_int $o@@192) :no-pattern (U_2_bool $o@@192) :no-pattern (U_2_int $f@@158) :no-pattern (U_2_bool $f@@158) ))) (=> (forall (($o@@193 T@U) ($f@@159 T@U) ) (! (let ((alpha@@166 (FieldTypeInv0 (type $f@@159)))) (=> (and (and (= (type $o@@193) refType) (= (type $f@@159) (FieldType alpha@@166))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@193 $f@@159)))) :qid |GenericM.776:37| :skolemid |1868| :no-pattern (type $o@@193) :no-pattern (type $f@@159) :no-pattern (U_2_int $o@@193) :no-pattern (U_2_bool $o@@193) :no-pattern (U_2_int $f@@159) :no-pattern (U_2_bool $f@@159) )) |b$reqreads#1@0|)) (and (! (or %lbl%@38 (< (|Seq#Rank| |cases#6@0|) (DtRank |grammar#0@@27|))) :lblneg @38) (=> (< (|Seq#Rank| |cases#6@0|) (DtRank |grammar#0@@27|)) (=> (|GenericMarshalling.__default.parse__Case#canCall| |data#0@@70| |cases#6@0|) (=> (and (and (_System.Tuple2.___hMake2_q (GenericMarshalling.__default.parse__Case ($LS $LZ) |data#0@@70| |cases#6@0|)) (= (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@70| |grammar#0@@27|) (GenericMarshalling.__default.parse__Case ($LS $LZ) |data#0@@70| |cases#6@0|))) (and (|GenericMarshalling.__default.parse__Case#canCall| |data#0@@70| |cases#6@0|) ($Is (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@70| |grammar#0@@27|) (Tclass._System.Tuple2 (Tclass.Options.Option Tclass.GenericMarshalling.V) (TSeq Tclass.NativeTypes.byte))))) (=> (and (and (and (and (=> |b$reqreads#1@1| |b$reqreads#1@0|) (=> |b$reqreads#1@0| |b$reqreads#1@1|)) (and (=> |b$reqreads#2@1| true) (=> true |b$reqreads#2@1|))) (and (and (=> |b$reqreads#3@1| true) (=> true |b$reqreads#3@1|)) (and (=> |b$reqreads#4@1| true) (=> true |b$reqreads#4@1|)))) (and (and (and (=> |b$reqreads#5@1| true) (=> true |b$reqreads#5@1|)) (and (=> |b$reqreads#6@1| true) (=> true |b$reqreads#6@1|))) (and (and (=> |b$reqreads#7@1| true) (=> true |b$reqreads#7@1|)) (and (=> |b$reqreads#8@1| true) (=> true |b$reqreads#8@1|))))) anon17_correct))))))))))))))))))))))) (let ((anon28_Then_correct  (=> (! (and %lbl%+39 true) :lblpos +39) (=> (and (= |grammar#0@@27| |#GenericMarshalling.G.GUint64Array|) ($IsAlloc |data#0@@70| (TSeq Tclass.NativeTypes.byte) $Heap@@40)) (and (! (or %lbl%@40 (< (|Seq#Length| |data#0@@70|) 18446744073709551616)) :lblneg @40) (=> (< (|Seq#Length| |data#0@@70|) 18446744073709551616) (=> (and (and (and (=> |b$reqreads#2@0| (forall (($o@@194 T@U) ($f@@160 T@U) ) (! (let ((alpha@@167 (FieldTypeInv0 (type $f@@160)))) (=> (and (and (= (type $o@@194) refType) (= (type $f@@160) (FieldType alpha@@167))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@194 $f@@160)))) :qid |GenericM.775:37| :skolemid |1869| :no-pattern (type $o@@194) :no-pattern (type $f@@160) :no-pattern (U_2_int $o@@194) :no-pattern (U_2_bool $o@@194) :no-pattern (U_2_int $f@@160) :no-pattern (U_2_bool $f@@160) ))) (=> (forall (($o@@195 T@U) ($f@@161 T@U) ) (! (let ((alpha@@168 (FieldTypeInv0 (type $f@@161)))) (=> (and (and (= (type $o@@195) refType) (= (type $f@@161) (FieldType alpha@@168))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@195 $f@@161)))) :qid |GenericM.775:37| :skolemid |1869| :no-pattern (type $o@@195) :no-pattern (type $f@@161) :no-pattern (U_2_int $o@@195) :no-pattern (U_2_bool $o@@195) :no-pattern (U_2_int $f@@161) :no-pattern (U_2_bool $f@@161) )) |b$reqreads#2@0|)) (|GenericMarshalling.__default.parse__Uint64Array#canCall| |data#0@@70|)) (and (and (_System.Tuple2.___hMake2_q (GenericMarshalling.__default.parse__Uint64Array |data#0@@70|)) (= (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@70| |grammar#0@@27|) (GenericMarshalling.__default.parse__Uint64Array |data#0@@70|))) (and (|GenericMarshalling.__default.parse__Uint64Array#canCall| |data#0@@70|) ($Is (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@70| |grammar#0@@27|) (Tclass._System.Tuple2 (Tclass.Options.Option Tclass.GenericMarshalling.V) (TSeq Tclass.NativeTypes.byte)))))) (=> (and (and (and (and (=> |b$reqreads#1@1| true) (=> true |b$reqreads#1@1|)) (and (=> |b$reqreads#2@1| |b$reqreads#2@0|) (=> |b$reqreads#2@0| |b$reqreads#2@1|))) (and (and (=> |b$reqreads#3@1| true) (=> true |b$reqreads#3@1|)) (and (=> |b$reqreads#4@1| true) (=> true |b$reqreads#4@1|)))) (and (and (and (=> |b$reqreads#5@1| true) (=> true |b$reqreads#5@1|)) (and (=> |b$reqreads#6@1| true) (=> true |b$reqreads#6@1|))) (and (and (=> |b$reqreads#7@1| true) (=> true |b$reqreads#7@1|)) (and (=> |b$reqreads#8@1| true) (=> true |b$reqreads#8@1|))))) anon17_correct)))))))) (let ((anon27_Then_correct  (=> (! (and %lbl%+41 true) :lblpos +41) (=> (and (= |grammar#0@@27| |#GenericMarshalling.G.GUint32Array|) ($IsAlloc |data#0@@70| (TSeq Tclass.NativeTypes.byte) $Heap@@40)) (and (! (or %lbl%@42 (< (|Seq#Length| |data#0@@70|) 18446744073709551616)) :lblneg @42) (=> (< (|Seq#Length| |data#0@@70|) 18446744073709551616) (=> (and (and (and (=> |b$reqreads#3@0| (forall (($o@@196 T@U) ($f@@162 T@U) ) (! (let ((alpha@@169 (FieldTypeInv0 (type $f@@162)))) (=> (and (and (= (type $o@@196) refType) (= (type $f@@162) (FieldType alpha@@169))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@196 $f@@162)))) :qid |GenericM.774:37| :skolemid |1870| :no-pattern (type $o@@196) :no-pattern (type $f@@162) :no-pattern (U_2_int $o@@196) :no-pattern (U_2_bool $o@@196) :no-pattern (U_2_int $f@@162) :no-pattern (U_2_bool $f@@162) ))) (=> (forall (($o@@197 T@U) ($f@@163 T@U) ) (! (let ((alpha@@170 (FieldTypeInv0 (type $f@@163)))) (=> (and (and (= (type $o@@197) refType) (= (type $f@@163) (FieldType alpha@@170))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@197 $f@@163)))) :qid |GenericM.774:37| :skolemid |1870| :no-pattern (type $o@@197) :no-pattern (type $f@@163) :no-pattern (U_2_int $o@@197) :no-pattern (U_2_bool $o@@197) :no-pattern (U_2_int $f@@163) :no-pattern (U_2_bool $f@@163) )) |b$reqreads#3@0|)) (|GenericMarshalling.__default.parse__Uint32Array#canCall| |data#0@@70|)) (and (and (_System.Tuple2.___hMake2_q (GenericMarshalling.__default.parse__Uint32Array |data#0@@70|)) (= (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@70| |grammar#0@@27|) (GenericMarshalling.__default.parse__Uint32Array |data#0@@70|))) (and (|GenericMarshalling.__default.parse__Uint32Array#canCall| |data#0@@70|) ($Is (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@70| |grammar#0@@27|) (Tclass._System.Tuple2 (Tclass.Options.Option Tclass.GenericMarshalling.V) (TSeq Tclass.NativeTypes.byte)))))) (=> (and (and (and (and (=> |b$reqreads#1@1| true) (=> true |b$reqreads#1@1|)) (and (=> |b$reqreads#2@1| true) (=> true |b$reqreads#2@1|))) (and (and (=> |b$reqreads#3@1| |b$reqreads#3@0|) (=> |b$reqreads#3@0| |b$reqreads#3@1|)) (and (=> |b$reqreads#4@1| true) (=> true |b$reqreads#4@1|)))) (and (and (and (=> |b$reqreads#5@1| true) (=> true |b$reqreads#5@1|)) (and (=> |b$reqreads#6@1| true) (=> true |b$reqreads#6@1|))) (and (and (=> |b$reqreads#7@1| true) (=> true |b$reqreads#7@1|)) (and (=> |b$reqreads#8@1| true) (=> true |b$reqreads#8@1|))))) anon17_correct)))))))) (let ((anon26_Then_correct  (=> (! (and %lbl%+43 true) :lblpos +43) (=> (and (= |grammar#0@@27| |#GenericMarshalling.G.GByteArray|) ($IsAlloc |data#0@@70| (TSeq Tclass.NativeTypes.byte) $Heap@@40)) (and (! (or %lbl%@44 (< (|Seq#Length| |data#0@@70|) 18446744073709551616)) :lblneg @44) (=> (< (|Seq#Length| |data#0@@70|) 18446744073709551616) (=> (and (and (and (=> |b$reqreads#4@0| (forall (($o@@198 T@U) ($f@@164 T@U) ) (! (let ((alpha@@171 (FieldTypeInv0 (type $f@@164)))) (=> (and (and (= (type $o@@198) refType) (= (type $f@@164) (FieldType alpha@@171))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@198 $f@@164)))) :qid |GenericM.773:37| :skolemid |1871| :no-pattern (type $o@@198) :no-pattern (type $f@@164) :no-pattern (U_2_int $o@@198) :no-pattern (U_2_bool $o@@198) :no-pattern (U_2_int $f@@164) :no-pattern (U_2_bool $f@@164) ))) (=> (forall (($o@@199 T@U) ($f@@165 T@U) ) (! (let ((alpha@@172 (FieldTypeInv0 (type $f@@165)))) (=> (and (and (= (type $o@@199) refType) (= (type $f@@165) (FieldType alpha@@172))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@199 $f@@165)))) :qid |GenericM.773:37| :skolemid |1871| :no-pattern (type $o@@199) :no-pattern (type $f@@165) :no-pattern (U_2_int $o@@199) :no-pattern (U_2_bool $o@@199) :no-pattern (U_2_int $f@@165) :no-pattern (U_2_bool $f@@165) )) |b$reqreads#4@0|)) (|GenericMarshalling.__default.parse__ByteArray#canCall| |data#0@@70|)) (and (and (_System.Tuple2.___hMake2_q (GenericMarshalling.__default.parse__ByteArray |data#0@@70|)) (= (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@70| |grammar#0@@27|) (GenericMarshalling.__default.parse__ByteArray |data#0@@70|))) (and (|GenericMarshalling.__default.parse__ByteArray#canCall| |data#0@@70|) ($Is (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@70| |grammar#0@@27|) (Tclass._System.Tuple2 (Tclass.Options.Option Tclass.GenericMarshalling.V) (TSeq Tclass.NativeTypes.byte)))))) (=> (and (and (and (and (=> |b$reqreads#1@1| true) (=> true |b$reqreads#1@1|)) (and (=> |b$reqreads#2@1| true) (=> true |b$reqreads#2@1|))) (and (and (=> |b$reqreads#3@1| true) (=> true |b$reqreads#3@1|)) (and (=> |b$reqreads#4@1| |b$reqreads#4@0|) (=> |b$reqreads#4@0| |b$reqreads#4@1|)))) (and (and (and (=> |b$reqreads#5@1| true) (=> true |b$reqreads#5@1|)) (and (=> |b$reqreads#6@1| true) (=> true |b$reqreads#6@1|))) (and (and (=> |b$reqreads#7@1| true) (=> true |b$reqreads#7@1|)) (and (=> |b$reqreads#8@1| true) (=> true |b$reqreads#8@1|))))) anon17_correct)))))))) (let ((anon25_Then_correct  (=> (! (and %lbl%+45 true) :lblpos +45) (=> (and (and (and (= |grammar#0@@27| (|#GenericMarshalling.G.GTuple| |_mcc#1#0|)) ($Is |_mcc#1#0| (TSeq Tclass.GenericMarshalling.G))) (and ($Is |t#6@0| (TSeq Tclass.GenericMarshalling.G)) (= |let#2#0#0| |_mcc#1#0|))) (and (and ($Is |let#2#0#0| (TSeq Tclass.GenericMarshalling.G)) (= |t#6@0| |let#2#0#0|)) (and ($IsAlloc |data#0@@70| (TSeq Tclass.NativeTypes.byte) $Heap@@40) ($IsAlloc |t#6@0| (TSeq Tclass.GenericMarshalling.G) $Heap@@40)))) (and (! (or %lbl%@46 (< (|Seq#Length| |data#0@@70|) 18446744073709551616)) :lblneg @46) (=> (< (|Seq#Length| |data#0@@70|) 18446744073709551616) (and (! (or %lbl%@47 (< (|Seq#Length| |t#6@0|) 18446744073709551616)) :lblneg @47) (=> (< (|Seq#Length| |t#6@0|) 18446744073709551616) (and (! (or %lbl%@48 (forall ((|elt#7| T@U) ) (!  (=> (= (type |elt#7|) DatatypeTypeType) (=> (and (and ($Is |elt#7| Tclass.GenericMarshalling.G) (forall ((|elt$ih#1#0| T@U) ) (!  (=> (and (and (and (= (type |elt$ih#1#0|) DatatypeTypeType) ($Is |elt$ih#1#0| Tclass.GenericMarshalling.G)) (< (DtRank |elt$ih#1#0|) (DtRank |elt#7|))) (|Seq#Contains| |t#6@0| ($Box |elt$ih#1#0|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#1#0|)) :qid |GenericM.553:21| :skolemid |1872| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#1#0|)) :pattern ( (|Seq#Contains| |t#6@0| ($Box |elt$ih#1#0|))) ))) (and true (= |#GenericMarshalling.G.GUint32| |elt#7|))) (=> (|Seq#Contains| |t#6@0| ($Box |elt#7|)) (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#7|)))) :qid |GenericM.553:21| :skolemid |1876| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#7|)) :pattern ( (|Seq#Contains| |t#6@0| ($Box |elt#7|))) ))) :lblneg @48) (and (! (or %lbl%@49 (forall ((|elt#7@@0| T@U) ) (!  (=> (= (type |elt#7@@0|) DatatypeTypeType) (=> (and (and ($Is |elt#7@@0| Tclass.GenericMarshalling.G) (forall ((|elt$ih#1#0@@0| T@U) ) (!  (=> (and (and (and (= (type |elt$ih#1#0@@0|) DatatypeTypeType) ($Is |elt$ih#1#0@@0| Tclass.GenericMarshalling.G)) (< (DtRank |elt$ih#1#0@@0|) (DtRank |elt#7@@0|))) (|Seq#Contains| |t#6@0| ($Box |elt$ih#1#0@@0|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#1#0@@0|)) :qid |GenericM.553:21| :skolemid |1872| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#1#0@@0|)) :pattern ( (|Seq#Contains| |t#6@0| ($Box |elt$ih#1#0@@0|))) ))) (and true (= |#GenericMarshalling.G.GUint64| |elt#7@@0|))) (=> (|Seq#Contains| |t#6@0| ($Box |elt#7@@0|)) (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#7@@0|)))) :qid |GenericM.553:21| :skolemid |1877| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#7@@0|)) :pattern ( (|Seq#Contains| |t#6@0| ($Box |elt#7@@0|))) ))) :lblneg @49) (and (! (or %lbl%@50 (forall ((|elt#7@@1| T@U) ) (!  (=> (= (type |elt#7@@1|) DatatypeTypeType) (=> (and (and ($Is |elt#7@@1| Tclass.GenericMarshalling.G) (forall ((|elt$ih#1#0@@1| T@U) ) (!  (=> (and (and (and (= (type |elt$ih#1#0@@1|) DatatypeTypeType) ($Is |elt$ih#1#0@@1| Tclass.GenericMarshalling.G)) (< (DtRank |elt$ih#1#0@@1|) (DtRank |elt#7@@1|))) (|Seq#Contains| |t#6@0| ($Box |elt$ih#1#0@@1|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#1#0@@1|)) :qid |GenericM.553:21| :skolemid |1872| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#1#0@@1|)) :pattern ( (|Seq#Contains| |t#6@0| ($Box |elt$ih#1#0@@1|))) ))) (and true (exists ((|a#10#0#0@@0| T@U) ) (!  (and (= (type |a#10#0#0@@0|) DatatypeTypeType) (and ($Is |a#10#0#0@@0| Tclass.GenericMarshalling.G) (= (|#GenericMarshalling.G.GArray| |a#10#0#0@@0|) |elt#7@@1|))) :qid |GenericM.36:21| :skolemid |1873| :pattern ( (|#GenericMarshalling.G.GArray| |a#10#0#0@@0|)) )))) (=> (|Seq#Contains| |t#6@0| ($Box |elt#7@@1|)) (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#7@@1|)))) :qid |GenericM.553:21| :skolemid |1878| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#7@@1|)) :pattern ( (|Seq#Contains| |t#6@0| ($Box |elt#7@@1|))) ))) :lblneg @50) (and (! (or %lbl%@51 (forall ((|elt#7@@2| T@U) ) (!  (=> (= (type |elt#7@@2|) DatatypeTypeType) (=> (and (and ($Is |elt#7@@2| Tclass.GenericMarshalling.G) (forall ((|elt$ih#1#0@@2| T@U) ) (!  (=> (and (and (and (= (type |elt$ih#1#0@@2|) DatatypeTypeType) ($Is |elt$ih#1#0@@2| Tclass.GenericMarshalling.G)) (< (DtRank |elt$ih#1#0@@2|) (DtRank |elt#7@@2|))) (|Seq#Contains| |t#6@0| ($Box |elt$ih#1#0@@2|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#1#0@@2|)) :qid |GenericM.553:21| :skolemid |1872| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#1#0@@2|)) :pattern ( (|Seq#Contains| |t#6@0| ($Box |elt$ih#1#0@@2|))) ))) (and true (exists ((|a#11#0#0@@0| T@U) ) (!  (and (= (type |a#11#0#0@@0|) (SeqType BoxType)) (and ($Is |a#11#0#0@@0| (TSeq Tclass.GenericMarshalling.G)) (= (|#GenericMarshalling.G.GTuple| |a#11#0#0@@0|) |elt#7@@2|))) :qid |GenericM.37:21| :skolemid |1874| :pattern ( (|#GenericMarshalling.G.GTuple| |a#11#0#0@@0|)) )))) (=> (|Seq#Contains| |t#6@0| ($Box |elt#7@@2|)) (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#7@@2|)))) :qid |GenericM.553:21| :skolemid |1879| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#7@@2|)) :pattern ( (|Seq#Contains| |t#6@0| ($Box |elt#7@@2|))) ))) :lblneg @51) (and (! (or %lbl%@52 (forall ((|elt#7@@3| T@U) ) (!  (=> (= (type |elt#7@@3|) DatatypeTypeType) (=> (and (and ($Is |elt#7@@3| Tclass.GenericMarshalling.G) (forall ((|elt$ih#1#0@@3| T@U) ) (!  (=> (and (and (and (= (type |elt$ih#1#0@@3|) DatatypeTypeType) ($Is |elt$ih#1#0@@3| Tclass.GenericMarshalling.G)) (< (DtRank |elt$ih#1#0@@3|) (DtRank |elt#7@@3|))) (|Seq#Contains| |t#6@0| ($Box |elt$ih#1#0@@3|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#1#0@@3|)) :qid |GenericM.553:21| :skolemid |1872| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#1#0@@3|)) :pattern ( (|Seq#Contains| |t#6@0| ($Box |elt$ih#1#0@@3|))) ))) (and true (= |#GenericMarshalling.G.GByteArray| |elt#7@@3|))) (=> (|Seq#Contains| |t#6@0| ($Box |elt#7@@3|)) (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#7@@3|)))) :qid |GenericM.553:21| :skolemid |1880| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#7@@3|)) :pattern ( (|Seq#Contains| |t#6@0| ($Box |elt#7@@3|))) ))) :lblneg @52) (and (! (or %lbl%@53 (forall ((|elt#7@@4| T@U) ) (!  (=> (= (type |elt#7@@4|) DatatypeTypeType) (=> (and (and ($Is |elt#7@@4| Tclass.GenericMarshalling.G) (forall ((|elt$ih#1#0@@4| T@U) ) (!  (=> (and (and (and (= (type |elt$ih#1#0@@4|) DatatypeTypeType) ($Is |elt$ih#1#0@@4| Tclass.GenericMarshalling.G)) (< (DtRank |elt$ih#1#0@@4|) (DtRank |elt#7@@4|))) (|Seq#Contains| |t#6@0| ($Box |elt$ih#1#0@@4|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#1#0@@4|)) :qid |GenericM.553:21| :skolemid |1872| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#1#0@@4|)) :pattern ( (|Seq#Contains| |t#6@0| ($Box |elt$ih#1#0@@4|))) ))) (and true (= |#GenericMarshalling.G.GUint32Array| |elt#7@@4|))) (=> (|Seq#Contains| |t#6@0| ($Box |elt#7@@4|)) (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#7@@4|)))) :qid |GenericM.553:21| :skolemid |1881| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#7@@4|)) :pattern ( (|Seq#Contains| |t#6@0| ($Box |elt#7@@4|))) ))) :lblneg @53) (and (! (or %lbl%@54 (forall ((|elt#7@@5| T@U) ) (!  (=> (= (type |elt#7@@5|) DatatypeTypeType) (=> (and (and ($Is |elt#7@@5| Tclass.GenericMarshalling.G) (forall ((|elt$ih#1#0@@5| T@U) ) (!  (=> (and (and (and (= (type |elt$ih#1#0@@5|) DatatypeTypeType) ($Is |elt$ih#1#0@@5| Tclass.GenericMarshalling.G)) (< (DtRank |elt$ih#1#0@@5|) (DtRank |elt#7@@5|))) (|Seq#Contains| |t#6@0| ($Box |elt$ih#1#0@@5|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#1#0@@5|)) :qid |GenericM.553:21| :skolemid |1872| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#1#0@@5|)) :pattern ( (|Seq#Contains| |t#6@0| ($Box |elt$ih#1#0@@5|))) ))) (and true (= |#GenericMarshalling.G.GUint64Array| |elt#7@@5|))) (=> (|Seq#Contains| |t#6@0| ($Box |elt#7@@5|)) (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#7@@5|)))) :qid |GenericM.553:21| :skolemid |1882| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#7@@5|)) :pattern ( (|Seq#Contains| |t#6@0| ($Box |elt#7@@5|))) ))) :lblneg @54) (and (! (or %lbl%@55 (forall ((|elt#7@@6| T@U) ) (!  (=> (= (type |elt#7@@6|) DatatypeTypeType) (=> (and (and ($Is |elt#7@@6| Tclass.GenericMarshalling.G) (forall ((|elt$ih#1#0@@6| T@U) ) (!  (=> (and (and (and (= (type |elt$ih#1#0@@6|) DatatypeTypeType) ($Is |elt$ih#1#0@@6| Tclass.GenericMarshalling.G)) (< (DtRank |elt$ih#1#0@@6|) (DtRank |elt#7@@6|))) (|Seq#Contains| |t#6@0| ($Box |elt$ih#1#0@@6|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#1#0@@6|)) :qid |GenericM.553:21| :skolemid |1872| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt$ih#1#0@@6|)) :pattern ( (|Seq#Contains| |t#6@0| ($Box |elt$ih#1#0@@6|))) ))) (and true (exists ((|a#15#0#0| T@U) ) (!  (and (= (type |a#15#0#0|) (SeqType BoxType)) (and ($Is |a#15#0#0| (TSeq Tclass.GenericMarshalling.G)) (= (|#GenericMarshalling.G.GTaggedUnion| |a#15#0#0|) |elt#7@@6|))) :qid |GenericM.41:27| :skolemid |1875| :pattern ( (|#GenericMarshalling.G.GTaggedUnion| |a#15#0#0|)) )))) (=> (|Seq#Contains| |t#6@0| ($Box |elt#7@@6|)) (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#7@@6|)))) :qid |GenericM.553:21| :skolemid |1883| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#7@@6|)) :pattern ( (|Seq#Contains| |t#6@0| ($Box |elt#7@@6|))) ))) :lblneg @55) (=> (forall ((|elt#7@@7| T@U) ) (!  (=> (and (and (= (type |elt#7@@7|) DatatypeTypeType) ($Is |elt#7@@7| Tclass.GenericMarshalling.G)) (|Seq#Contains| |t#6@0| ($Box |elt#7@@7|))) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#7@@7|)) :qid |GenericM.553:21| :skolemid |1885| :pattern ( (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#7@@7|)) :pattern ( (|Seq#Contains| |t#6@0| ($Box |elt#7@@7|))) )) (=> (and (=> |b$reqreads#5@0| (forall (($o@@200 T@U) ($f@@166 T@U) ) (! (let ((alpha@@173 (FieldTypeInv0 (type $f@@166)))) (=> (and (and (= (type $o@@200) refType) (= (type $f@@166) (FieldType alpha@@173))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@200 $f@@166)))) :qid |GenericM.772:37| :skolemid |1886| :no-pattern (type $o@@200) :no-pattern (type $f@@166) :no-pattern (U_2_int $o@@200) :no-pattern (U_2_bool $o@@200) :no-pattern (U_2_int $f@@166) :no-pattern (U_2_bool $f@@166) ))) (=> (forall (($o@@201 T@U) ($f@@167 T@U) ) (! (let ((alpha@@174 (FieldTypeInv0 (type $f@@167)))) (=> (and (and (= (type $o@@201) refType) (= (type $f@@167) (FieldType alpha@@174))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@201 $f@@167)))) :qid |GenericM.772:37| :skolemid |1886| :no-pattern (type $o@@201) :no-pattern (type $f@@167) :no-pattern (U_2_int $o@@201) :no-pattern (U_2_bool $o@@201) :no-pattern (U_2_int $f@@167) :no-pattern (U_2_bool $f@@167) )) |b$reqreads#5@0|)) (and (! (or %lbl%@56  (or (or (<= 0 (LitInt 0)) (< (|Seq#Rank| |t#6@0|) (DtRank |grammar#0@@27|))) (= (LitInt 1) (LitInt 0)))) :lblneg @56) (=> (or (or (<= 0 (LitInt 0)) (< (|Seq#Rank| |t#6@0|) (DtRank |grammar#0@@27|))) (= (LitInt 1) (LitInt 0))) (and (! (or %lbl%@57 (< (|Seq#Rank| |t#6@0|) (DtRank |grammar#0@@27|))) :lblneg @57) (=> (< (|Seq#Rank| |t#6@0|) (DtRank |grammar#0@@27|)) (=> (|GenericMarshalling.__default.parse__Tuple#canCall| |data#0@@70| |t#6@0|) (=> (and (and (_System.Tuple2.___hMake2_q (GenericMarshalling.__default.parse__Tuple ($LS $LZ) |data#0@@70| |t#6@0|)) (= (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@70| |grammar#0@@27|) (GenericMarshalling.__default.parse__Tuple ($LS $LZ) |data#0@@70| |t#6@0|))) (and (|GenericMarshalling.__default.parse__Tuple#canCall| |data#0@@70| |t#6@0|) ($Is (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@70| |grammar#0@@27|) (Tclass._System.Tuple2 (Tclass.Options.Option Tclass.GenericMarshalling.V) (TSeq Tclass.NativeTypes.byte))))) (=> (and (and (and (and (=> |b$reqreads#1@1| true) (=> true |b$reqreads#1@1|)) (and (=> |b$reqreads#2@1| true) (=> true |b$reqreads#2@1|))) (and (and (=> |b$reqreads#3@1| true) (=> true |b$reqreads#3@1|)) (and (=> |b$reqreads#4@1| true) (=> true |b$reqreads#4@1|)))) (and (and (and (=> |b$reqreads#5@1| |b$reqreads#5@0|) (=> |b$reqreads#5@0| |b$reqreads#5@1|)) (and (=> |b$reqreads#6@1| true) (=> true |b$reqreads#6@1|))) (and (and (=> |b$reqreads#7@1| true) (=> true |b$reqreads#7@1|)) (and (=> |b$reqreads#8@1| true) (=> true |b$reqreads#8@1|))))) anon17_correct))))))))))))))))))))))))) (let ((anon24_Then_correct  (=> (! (and %lbl%+58 true) :lblpos +58) (=> (and (and (and (= |grammar#0@@27| (|#GenericMarshalling.G.GArray| |_mcc#0#0|)) ($Is |_mcc#0#0| Tclass.GenericMarshalling.G)) (and ($Is |elt#8@0| Tclass.GenericMarshalling.G) (= |let#3#0#0| |_mcc#0#0|))) (and (and ($Is |let#3#0#0| Tclass.GenericMarshalling.G) (= |elt#8@0| |let#3#0#0|)) (and ($IsAlloc |data#0@@70| (TSeq Tclass.NativeTypes.byte) $Heap@@40) ($IsAlloc |elt#8@0| Tclass.GenericMarshalling.G $Heap@@40)))) (and (! (or %lbl%@59 (GenericMarshalling.__default.ValidGrammar ($LS ($LS $LZ)) |elt#8@0|)) :lblneg @59) (=> (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |elt#8@0|) (and (! (or %lbl%@60 (< (|Seq#Length| |data#0@@70|) 18446744073709551616)) :lblneg @60) (=> (< (|Seq#Length| |data#0@@70|) 18446744073709551616) (=> (and (=> |b$reqreads#6@0| (forall (($o@@202 T@U) ($f@@168 T@U) ) (! (let ((alpha@@175 (FieldTypeInv0 (type $f@@168)))) (=> (and (and (= (type $o@@202) refType) (= (type $f@@168) (FieldType alpha@@175))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@202 $f@@168)))) :qid |GenericM.771:37| :skolemid |1887| :no-pattern (type $o@@202) :no-pattern (type $f@@168) :no-pattern (U_2_int $o@@202) :no-pattern (U_2_bool $o@@202) :no-pattern (U_2_int $f@@168) :no-pattern (U_2_bool $f@@168) ))) (=> (forall (($o@@203 T@U) ($f@@169 T@U) ) (! (let ((alpha@@176 (FieldTypeInv0 (type $f@@169)))) (=> (and (and (= (type $o@@203) refType) (= (type $f@@169) (FieldType alpha@@176))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@203 $f@@169)))) :qid |GenericM.771:37| :skolemid |1887| :no-pattern (type $o@@203) :no-pattern (type $f@@169) :no-pattern (U_2_int $o@@203) :no-pattern (U_2_bool $o@@203) :no-pattern (U_2_int $f@@169) :no-pattern (U_2_bool $f@@169) )) |b$reqreads#6@0|)) (and (! (or %lbl%@61 (< (DtRank |elt#8@0|) (DtRank |grammar#0@@27|))) :lblneg @61) (=> (< (DtRank |elt#8@0|) (DtRank |grammar#0@@27|)) (=> (|GenericMarshalling.__default.parse__Array#canCall| |data#0@@70| |elt#8@0|) (=> (and (and (_System.Tuple2.___hMake2_q (GenericMarshalling.__default.parse__Array ($LS $LZ) |data#0@@70| |elt#8@0|)) (= (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@70| |grammar#0@@27|) (GenericMarshalling.__default.parse__Array ($LS $LZ) |data#0@@70| |elt#8@0|))) (and (|GenericMarshalling.__default.parse__Array#canCall| |data#0@@70| |elt#8@0|) ($Is (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@70| |grammar#0@@27|) (Tclass._System.Tuple2 (Tclass.Options.Option Tclass.GenericMarshalling.V) (TSeq Tclass.NativeTypes.byte))))) (=> (and (and (and (and (=> |b$reqreads#1@1| true) (=> true |b$reqreads#1@1|)) (and (=> |b$reqreads#2@1| true) (=> true |b$reqreads#2@1|))) (and (and (=> |b$reqreads#3@1| true) (=> true |b$reqreads#3@1|)) (and (=> |b$reqreads#4@1| true) (=> true |b$reqreads#4@1|)))) (and (and (and (=> |b$reqreads#5@1| true) (=> true |b$reqreads#5@1|)) (and (=> |b$reqreads#6@1| |b$reqreads#6@0|) (=> |b$reqreads#6@0| |b$reqreads#6@1|))) (and (and (=> |b$reqreads#7@1| true) (=> true |b$reqreads#7@1|)) (and (=> |b$reqreads#8@1| true) (=> true |b$reqreads#8@1|))))) anon17_correct)))))))))))))) (let ((anon23_Then_correct  (=> (! (and %lbl%+62 true) :lblpos +62) (=> (and (= |grammar#0@@27| |#GenericMarshalling.G.GUint64|) ($IsAlloc |data#0@@70| (TSeq Tclass.NativeTypes.byte) $Heap@@40)) (and (! (or %lbl%@63 (< (|Seq#Length| |data#0@@70|) 18446744073709551616)) :lblneg @63) (=> (< (|Seq#Length| |data#0@@70|) 18446744073709551616) (=> (and (and (and (=> |b$reqreads#7@0| (forall (($o@@204 T@U) ($f@@170 T@U) ) (! (let ((alpha@@177 (FieldTypeInv0 (type $f@@170)))) (=> (and (and (= (type $o@@204) refType) (= (type $f@@170) (FieldType alpha@@177))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@204 $f@@170)))) :qid |GenericM.770:37| :skolemid |1888| :no-pattern (type $o@@204) :no-pattern (type $f@@170) :no-pattern (U_2_int $o@@204) :no-pattern (U_2_bool $o@@204) :no-pattern (U_2_int $f@@170) :no-pattern (U_2_bool $f@@170) ))) (=> (forall (($o@@205 T@U) ($f@@171 T@U) ) (! (let ((alpha@@178 (FieldTypeInv0 (type $f@@171)))) (=> (and (and (= (type $o@@205) refType) (= (type $f@@171) (FieldType alpha@@178))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@205 $f@@171)))) :qid |GenericM.770:37| :skolemid |1888| :no-pattern (type $o@@205) :no-pattern (type $f@@171) :no-pattern (U_2_int $o@@205) :no-pattern (U_2_bool $o@@205) :no-pattern (U_2_int $f@@171) :no-pattern (U_2_bool $f@@171) )) |b$reqreads#7@0|)) (|GenericMarshalling.__default.parse__Uint64#canCall| |data#0@@70|)) (and (and (_System.Tuple2.___hMake2_q (GenericMarshalling.__default.parse__Uint64 |data#0@@70|)) (= (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@70| |grammar#0@@27|) (GenericMarshalling.__default.parse__Uint64 |data#0@@70|))) (and (|GenericMarshalling.__default.parse__Uint64#canCall| |data#0@@70|) ($Is (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@70| |grammar#0@@27|) (Tclass._System.Tuple2 (Tclass.Options.Option Tclass.GenericMarshalling.V) (TSeq Tclass.NativeTypes.byte)))))) (=> (and (and (and (and (=> |b$reqreads#1@1| true) (=> true |b$reqreads#1@1|)) (and (=> |b$reqreads#2@1| true) (=> true |b$reqreads#2@1|))) (and (and (=> |b$reqreads#3@1| true) (=> true |b$reqreads#3@1|)) (and (=> |b$reqreads#4@1| true) (=> true |b$reqreads#4@1|)))) (and (and (and (=> |b$reqreads#5@1| true) (=> true |b$reqreads#5@1|)) (and (=> |b$reqreads#6@1| true) (=> true |b$reqreads#6@1|))) (and (and (=> |b$reqreads#7@1| |b$reqreads#7@0|) (=> |b$reqreads#7@0| |b$reqreads#7@1|)) (and (=> |b$reqreads#8@1| true) (=> true |b$reqreads#8@1|))))) anon17_correct)))))))) (let ((anon22_Then_correct  (=> (! (and %lbl%+64 true) :lblpos +64) (=> (and (= |grammar#0@@27| |#GenericMarshalling.G.GUint32|) ($IsAlloc |data#0@@70| (TSeq Tclass.NativeTypes.byte) $Heap@@40)) (and (! (or %lbl%@65 (< (|Seq#Length| |data#0@@70|) 18446744073709551616)) :lblneg @65) (=> (< (|Seq#Length| |data#0@@70|) 18446744073709551616) (=> (and (and (and (=> |b$reqreads#8@0| (forall (($o@@206 T@U) ($f@@172 T@U) ) (! (let ((alpha@@179 (FieldTypeInv0 (type $f@@172)))) (=> (and (and (= (type $o@@206) refType) (= (type $f@@172) (FieldType alpha@@179))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@206 $f@@172)))) :qid |GenericM.769:37| :skolemid |1889| :no-pattern (type $o@@206) :no-pattern (type $f@@172) :no-pattern (U_2_int $o@@206) :no-pattern (U_2_bool $o@@206) :no-pattern (U_2_int $f@@172) :no-pattern (U_2_bool $f@@172) ))) (=> (forall (($o@@207 T@U) ($f@@173 T@U) ) (! (let ((alpha@@180 (FieldTypeInv0 (type $f@@173)))) (=> (and (and (= (type $o@@207) refType) (= (type $f@@173) (FieldType alpha@@180))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@207 $f@@173)))) :qid |GenericM.769:37| :skolemid |1889| :no-pattern (type $o@@207) :no-pattern (type $f@@173) :no-pattern (U_2_int $o@@207) :no-pattern (U_2_bool $o@@207) :no-pattern (U_2_int $f@@173) :no-pattern (U_2_bool $f@@173) )) |b$reqreads#8@0|)) (|GenericMarshalling.__default.parse__Uint32#canCall| |data#0@@70|)) (and (and (_System.Tuple2.___hMake2_q (GenericMarshalling.__default.parse__Uint32 |data#0@@70|)) (= (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@70| |grammar#0@@27|) (GenericMarshalling.__default.parse__Uint32 |data#0@@70|))) (and (|GenericMarshalling.__default.parse__Uint32#canCall| |data#0@@70|) ($Is (GenericMarshalling.__default.parse__Val StartFuel_GenericMarshalling._default.parse_Val |data#0@@70| |grammar#0@@27|) (Tclass._System.Tuple2 (Tclass.Options.Option Tclass.GenericMarshalling.V) (TSeq Tclass.NativeTypes.byte)))))) (=> (and (and (and (and (=> |b$reqreads#1@1| true) (=> true |b$reqreads#1@1|)) (and (=> |b$reqreads#2@1| true) (=> true |b$reqreads#2@1|))) (and (and (=> |b$reqreads#3@1| true) (=> true |b$reqreads#3@1|)) (and (=> |b$reqreads#4@1| true) (=> true |b$reqreads#4@1|)))) (and (and (and (=> |b$reqreads#5@1| true) (=> true |b$reqreads#5@1|)) (and (=> |b$reqreads#6@1| true) (=> true |b$reqreads#6@1|))) (and (and (=> |b$reqreads#7@1| true) (=> true |b$reqreads#7@1|)) (and (=> |b$reqreads#8@1| |b$reqreads#8@0|) (=> |b$reqreads#8@0| |b$reqreads#8@1|))))) anon17_correct)))))))) (let ((anon29_Else_correct  (=> (! (and %lbl%+66 true) :lblpos +66) true))) (let ((anon28_Else_correct  (=> (! (and %lbl%+67 true) :lblpos +67) (=> (not (= |grammar#0@@27| |#GenericMarshalling.G.GUint64Array|)) (and anon29_Then_correct anon29_Else_correct))))) (let ((anon27_Else_correct  (=> (! (and %lbl%+68 true) :lblpos +68) (=> (not (= |grammar#0@@27| |#GenericMarshalling.G.GUint32Array|)) (and anon28_Then_correct anon28_Else_correct))))) (let ((anon26_Else_correct  (=> (! (and %lbl%+69 true) :lblpos +69) (=> (not (= |grammar#0@@27| |#GenericMarshalling.G.GByteArray|)) (and anon27_Then_correct anon27_Else_correct))))) (let ((anon25_Else_correct  (=> (! (and %lbl%+70 true) :lblpos +70) (=> (not (= |grammar#0@@27| (|#GenericMarshalling.G.GTuple| |_mcc#1#0|))) (and anon26_Then_correct anon26_Else_correct))))) (let ((anon24_Else_correct  (=> (! (and %lbl%+71 true) :lblpos +71) (=> (not (= |grammar#0@@27| (|#GenericMarshalling.G.GArray| |_mcc#0#0|))) (and anon25_Then_correct anon25_Else_correct))))) (let ((anon23_Else_correct  (=> (! (and %lbl%+72 true) :lblpos +72) (=> (not (= |grammar#0@@27| |#GenericMarshalling.G.GUint64|)) (and anon24_Then_correct anon24_Else_correct))))) (let ((anon22_Else_correct  (=> (! (and %lbl%+73 true) :lblpos +73) (=> (not (= |grammar#0@@27| |#GenericMarshalling.G.GUint32|)) (and anon23_Then_correct anon23_Else_correct))))) (let ((anon18_Else_correct  (=> (! (and %lbl%+74 true) :lblpos +74) (=> (= $_Frame@0@@0 (|lambda#59| null $Heap@@40 alloc false)) (and anon22_Then_correct anon22_Else_correct))))) (let ((anon0_correct  (=> (! (and %lbl%+75 true) :lblpos +75) (=> (= $_Frame@0 (|lambda#58| null $Heap@@40 alloc false)) (=> (and (= (AsFuelBottom StartFuel_SeqComparison._default.lte) StartFuel_SeqComparison._default.lte) (= (AsFuelBottom StartFuelAssert_SeqComparison._default.lte) StartFuelAssert_SeqComparison._default.lte)) (=> (and (and (= (AsFuelBottom StartFuel_Math._default.power2) StartFuel_Math._default.power2) (= (AsFuelBottom StartFuelAssert_Math._default.power2) StartFuelAssert_Math._default.power2)) (and (= (AsFuelBottom StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32) StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32) (= (AsFuelBottom StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32) StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32))) (=> (and (and (and (and (and (and (= (AsFuelBottom StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64) StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64) (= (AsFuelBottom StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64) StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64)) (and (= (AsFuelBottom StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq) StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq) (= (AsFuelBottom StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq) StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq))) (and (and (= (AsFuelBottom StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq) StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq) (= (AsFuelBottom StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq) StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq)) (and (= (AsFuelBottom StartFuel_Sequences._default.NoDupes) StartFuel_Sequences._default.NoDupes) (= (AsFuelBottom StartFuelAssert_Sequences._default.NoDupes) StartFuelAssert_Sequences._default.NoDupes)))) (and (and (and (= (AsFuelBottom StartFuel_Sequences._default.Range) StartFuel_Sequences._default.Range) (= (AsFuelBottom StartFuelAssert_Sequences._default.Range) StartFuelAssert_Sequences._default.Range)) (and (= (AsFuelBottom StartFuel_Sequences._default.ApplyOpaque) StartFuel_Sequences._default.ApplyOpaque) (= (AsFuelBottom StartFuelAssert_Sequences._default.ApplyOpaque) StartFuelAssert_Sequences._default.ApplyOpaque))) (and (and (= (AsFuelBottom StartFuel_Sequences._default.remove) StartFuel_Sequences._default.remove) (= (AsFuelBottom StartFuelAssert_Sequences._default.remove) StartFuelAssert_Sequences._default.remove)) (and (= (AsFuelBottom StartFuel_Sequences._default.insert) StartFuel_Sequences._default.insert) (= (AsFuelBottom StartFuelAssert_Sequences._default.insert) StartFuelAssert_Sequences._default.insert))))) (and (and (and (and (= (AsFuelBottom StartFuel_Sequences._default.replace1with2) StartFuel_Sequences._default.replace1with2) (= (AsFuelBottom StartFuelAssert_Sequences._default.replace1with2) StartFuelAssert_Sequences._default.replace1with2)) (and (= (AsFuelBottom StartFuel_Sequences._default.replace2with1) StartFuel_Sequences._default.replace2with1) (= (AsFuelBottom StartFuelAssert_Sequences._default.replace2with1) StartFuelAssert_Sequences._default.replace2with1))) (and (and (= (AsFuelBottom StartFuel_Sequences._default.concat) StartFuel_Sequences._default.concat) (= (AsFuelBottom StartFuelAssert_Sequences._default.concat) StartFuelAssert_Sequences._default.concat)) (and (= (AsFuelBottom StartFuel_Sequences._default.concat3) StartFuel_Sequences._default.concat3) (= (AsFuelBottom StartFuelAssert_Sequences._default.concat3) StartFuelAssert_Sequences._default.concat3)))) (and (and (and (= (AsFuelBottom StartFuel_Sequences._default.concatSeq) StartFuel_Sequences._default.concatSeq) (= (AsFuelBottom StartFuelAssert_Sequences._default.concatSeq) StartFuelAssert_Sequences._default.concatSeq)) (and (= (AsFuelBottom StartFuel_Sequences._default.IsPrefix) StartFuel_Sequences._default.IsPrefix) (= (AsFuelBottom StartFuelAssert_Sequences._default.IsPrefix) StartFuelAssert_Sequences._default.IsPrefix))) (and (and (= (AsFuelBottom StartFuel_Sequences._default.IsSuffix) StartFuel_Sequences._default.IsSuffix) (= (AsFuelBottom StartFuelAssert_Sequences._default.IsSuffix) StartFuelAssert_Sequences._default.IsSuffix)) (and (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexIterate) StartFuel_Sequences._default.SeqIndexIterate) (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexIterate) StartFuelAssert_Sequences._default.SeqIndexIterate)))))) (and (and (and (and (and (= (AsFuelBottom StartFuel_Sequences._default.SeqIndex) StartFuel_Sequences._default.SeqIndex) (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndex) StartFuelAssert_Sequences._default.SeqIndex)) (and (= (AsFuelBottom StartFuel_Sequences._default.SeqOfLength) StartFuel_Sequences._default.SeqOfLength) (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqOfLength) StartFuelAssert_Sequences._default.SeqOfLength))) (and (and (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexUpdate) StartFuel_Sequences._default.SeqIndexUpdate) (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexUpdate) StartFuelAssert_Sequences._default.SeqIndexUpdate)) (and (= (AsFuelBottom StartFuel_Sequences._default.Zip) StartFuel_Sequences._default.Zip) (= (AsFuelBottom StartFuelAssert_Sequences._default.Zip) StartFuelAssert_Sequences._default.Zip)))) (and (and (and (= (AsFuelBottom StartFuel_Sequences._default.Unzip) StartFuel_Sequences._default.Unzip) (= (AsFuelBottom StartFuelAssert_Sequences._default.Unzip) StartFuelAssert_Sequences._default.Unzip)) (and (= (AsFuelBottom StartFuel_Sequences._default.FlattenShape) StartFuel_Sequences._default.FlattenShape) (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenShape) StartFuelAssert_Sequences._default.FlattenShape))) (and (and (= (AsFuelBottom StartFuel_Sequences._default.FlattenLength) StartFuel_Sequences._default.FlattenLength) (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenLength) StartFuelAssert_Sequences._default.FlattenLength)) (and (= (AsFuelBottom StartFuel_Sequences._default.Flatten) StartFuel_Sequences._default.Flatten) (= (AsFuelBottom StartFuelAssert_Sequences._default.Flatten) StartFuelAssert_Sequences._default.Flatten))))) (and (and (and (and (= (AsFuelBottom StartFuel_Sequences._default.fill) StartFuel_Sequences._default.fill) (= (AsFuelBottom StartFuelAssert_Sequences._default.fill) StartFuelAssert_Sequences._default.fill)) (and (= (AsFuelBottom StartFuel_GenericMarshalling._default.SeqSum) StartFuel_GenericMarshalling._default.SeqSum) (= (AsFuelBottom StartFuelAssert_GenericMarshalling._default.SeqSum) StartFuelAssert_GenericMarshalling._default.SeqSum))) (and (and (= (AsFuelBottom StartFuel_GenericMarshalling._default.parse_Array_contents) StartFuel_GenericMarshalling._default.parse_Array_contents) (= (AsFuelBottom StartFuelAssert_GenericMarshalling._default.parse_Array_contents) StartFuelAssert_GenericMarshalling._default.parse_Array_contents)) (and (= (AsFuelBottom StartFuel_GenericMarshalling._default.parse_Tuple_contents) StartFuel_GenericMarshalling._default.parse_Tuple_contents) (= (AsFuelBottom StartFuelAssert_GenericMarshalling._default.parse_Tuple_contents) StartFuelAssert_GenericMarshalling._default.parse_Tuple_contents)))) (and (and (and (= (AsFuelBottom StartFuel_GenericMarshalling._default.parse_Val) StartFuel_GenericMarshalling._default.parse_Val) (= (AsFuelBottom StartFuelAssert_GenericMarshalling._default.parse_Val) StartFuelAssert_GenericMarshalling._default.parse_Val)) (and (< (|Seq#Length| |data#0@@70|) 18446744073709551616) ($IsAlloc |grammar#0@@27| Tclass.GenericMarshalling.G $Heap@@40))) (and (and (=> |b$reqreads#0@0| (forall (($o@@208 T@U) ($f@@174 T@U) ) (! (let ((alpha@@181 (FieldTypeInv0 (type $f@@174)))) (=> (and (and (= (type $o@@208) refType) (= (type $f@@174) (FieldType alpha@@181))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@208 $f@@174)))) :qid |GenericM.763:14| :skolemid |1853| :no-pattern (type $o@@208) :no-pattern (type $f@@174) :no-pattern (U_2_int $o@@208) :no-pattern (U_2_bool $o@@208) :no-pattern (U_2_int $f@@174) :no-pattern (U_2_bool $f@@174) ))) (=> (forall (($o@@209 T@U) ($f@@175 T@U) ) (! (let ((alpha@@182 (FieldTypeInv0 (type $f@@175)))) (=> (and (and (= (type $o@@209) refType) (= (type $f@@175) (FieldType alpha@@182))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@209 $f@@175)))) :qid |GenericM.763:14| :skolemid |1853| :no-pattern (type $o@@209) :no-pattern (type $f@@175) :no-pattern (U_2_int $o@@209) :no-pattern (U_2_bool $o@@209) :no-pattern (U_2_int $f@@175) :no-pattern (U_2_bool $f@@175) )) |b$reqreads#0@0|)) (and (|GenericMarshalling.__default.ValidGrammar#canCall| |grammar#0@@27|) (GenericMarshalling.__default.ValidGrammar ($LS $LZ) |grammar#0@@27|))))))) (and (! (or %lbl%@76 |b$reqreads#0@0|) :lblneg @76) (=> |b$reqreads#0@0| (and anon18_Then_correct anon18_Else_correct)))))))))) (let ((PreconditionGeneratedEntry_correct  (=> (! (and %lbl%+77 true) :lblpos +77) (=> (and (and (and ($IsGoodHeap $Heap@@40) ($IsHeapAnchor $Heap@@40)) ($Is |data#0@@70| (TSeq Tclass.NativeTypes.byte))) (and ($Is |grammar#0@@27| Tclass.GenericMarshalling.G) (= 19 $FunctionContextHeight))) anon0_correct)))) PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))) ))
(check-sat)
