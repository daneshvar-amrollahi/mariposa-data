(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun TyType () T@T)
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TORDINAL () T@U)
(declare-fun TyTagType () T@T)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun TagORDINAL () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagISet () T@U)
(declare-fun TagMultiSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun TagIMap () T@U)
(declare-fun TagClass () T@U)
(declare-fun ClassNameType () T@T)
(declare-fun class._System.int () T@U)
(declare-fun class._System.bool () T@U)
(declare-fun class._System.set () T@U)
(declare-fun class._System.seq () T@U)
(declare-fun class._System.multiset () T@U)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun alloc () T@U)
(declare-fun NameFamilyType () T@T)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun class._System.object? () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun class._System.array? () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._System.___hFunc0 () T@U)
(declare-fun Tagclass._System.___hPartialFunc0 () T@U)
(declare-fun Tagclass._System.___hTotalFunc0 () T@U)
(declare-fun class._System.__default () T@U)
(declare-fun Tagclass._System.__default () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tagclass._System.___hPartialFunc2 () T@U)
(declare-fun Tagclass._System.___hTotalFunc2 () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun Tagclass._System.___hFunc4 () T@U)
(declare-fun Tagclass._System.___hPartialFunc4 () T@U)
(declare-fun Tagclass._System.___hTotalFunc4 () T@U)
(declare-fun DtCtorIdType () T@T)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun class._System.Tuple2 () T@U)
(declare-fun Tagclass._System.___hFunc3 () T@U)
(declare-fun Tagclass._System.___hPartialFunc3 () T@U)
(declare-fun Tagclass._System.___hTotalFunc3 () T@U)
(declare-fun |##_System._tuple#0._#Make0| () T@U)
(declare-fun Tagclass._System.Tuple0 () T@U)
(declare-fun class._System.Tuple0 () T@U)
(declare-fun class.Char__Order.__default () T@U)
(declare-fun Tagclass.Char__Order.__default () T@U)
(declare-fun Tagclass.Options.Option () T@U)
(declare-fun |##Options.Option.None| () T@U)
(declare-fun |##Options.Option.Some| () T@U)
(declare-fun class.Options.Option () T@U)
(declare-fun class.Options.__default () T@U)
(declare-fun Tagclass.Options.__default () T@U)
(declare-fun Tagclass.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.sbyte () T@U)
(declare-fun Tagclass.NativeTypes.byte () T@U)
(declare-fun class.NativeTypes.byte () T@U)
(declare-fun Tagclass.NativeTypes.int16 () T@U)
(declare-fun class.NativeTypes.int16 () T@U)
(declare-fun Tagclass.NativeTypes.uint16 () T@U)
(declare-fun class.NativeTypes.uint16 () T@U)
(declare-fun Tagclass.NativeTypes.int32 () T@U)
(declare-fun class.NativeTypes.int32 () T@U)
(declare-fun Tagclass.NativeTypes.uint32 () T@U)
(declare-fun class.NativeTypes.uint32 () T@U)
(declare-fun Tagclass.NativeTypes.int64 () T@U)
(declare-fun class.NativeTypes.int64 () T@U)
(declare-fun Tagclass.NativeTypes.uint64 () T@U)
(declare-fun class.NativeTypes.uint64 () T@U)
(declare-fun Tagclass.NativeTypes.nat8 () T@U)
(declare-fun class.NativeTypes.nat8 () T@U)
(declare-fun Tagclass.NativeTypes.nat16 () T@U)
(declare-fun class.NativeTypes.nat16 () T@U)
(declare-fun Tagclass.NativeTypes.nat32 () T@U)
(declare-fun class.NativeTypes.nat32 () T@U)
(declare-fun Tagclass.NativeTypes.nat64 () T@U)
(declare-fun class.NativeTypes.nat64 () T@U)
(declare-fun class.NativeTypes.__default () T@U)
(declare-fun Tagclass.NativeTypes.__default () T@U)
(declare-fun class.Sequences.__default () T@U)
(declare-fun Tagclass.Sequences.__default () T@U)
(declare-fun class.Maps.__default () T@U)
(declare-fun Tagclass.Maps.__default () T@U)
(declare-fun class.SeqComparison.__default () T@U)
(declare-fun Tagclass.SeqComparison.__default () T@U)
(declare-fun class.NativeArrays.__default () T@U)
(declare-fun Tagclass.NativeArrays.__default () T@U)
(declare-fun $$Language$Dafny () Bool)
(declare-fun TBitvector (Int) T@U)
(declare-fun Inv0_TBitvector (T@U) Int)
(declare-fun TSet (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun TISet (T@U) T@U)
(declare-fun Inv0_TISet (T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun TMultiSet (T@U) T@U)
(declare-fun Inv0_TMultiSet (T@U) T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun TIMap (T@U T@U) T@U)
(declare-fun Inv0_TIMap (T@U) T@U)
(declare-fun Inv1_TIMap (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun Lit (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun $Box (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun LitReal (Real) Real)
(declare-fun charType () T@T)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun |char#Plus| (T@U T@U) T@U)
(declare-fun |char#Minus| (T@U T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $Is (T@U T@U) Bool)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U) T@U)
(declare-fun SeqType (T@T) T@T)
(declare-fun SeqTypeInv0 (T@T) T@T)
(declare-fun MapType (T@T T@T) T@T)
(declare-fun MapTypeInv0 (T@T) T@T)
(declare-fun MapTypeInv1 (T@T) T@T)
(declare-fun IMapType (T@T T@T) T@T)
(declare-fun IMapTypeInv0 (T@T) T@T)
(declare-fun IMapTypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Type () T@T)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@U T@U T@U) Bool)
(declare-fun $IsGoodMultiSet (T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |IMap#Elements| (T@U) T@U)
(declare-fun |IMap#Domain| (T@U) T@U)
(declare-fun TypeTuple (T@U T@U) T@U)
(declare-fun TypeTupleCar (T@U) T@U)
(declare-fun TypeTupleCdr (T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun |ORD#LessThanLimit| (T@U T@U) Bool)
(declare-fun |ORD#Plus| (T@U T@U) T@U)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun AtLayer (T@U T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun FDim (T@U) Int)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun MultiIndexField (T@U Int) T@U)
(declare-fun MultiIndexField_Inverse0 (T@U) T@U)
(declare-fun MultiIndexField_Inverse1 (T@U) Int)
(declare-fun FieldOfDecl (T@T T@U T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun q@Int (Real) Int)
(declare-fun q@Real (Int) Real)
(declare-fun $OneHeap () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $HeapSuccGhost (T@U T@U) Bool)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun |Set#Empty| (T@T) T@U)
(declare-fun |Set#Singleton| (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |Set#Intersection| (T@U T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |ISet#Empty| (T@T) T@U)
(declare-fun |ISet#UnionOne| (T@U T@U) T@U)
(declare-fun |ISet#Union| (T@U T@U) T@U)
(declare-fun |ISet#Difference| (T@U T@U) T@U)
(declare-fun |ISet#Disjoint| (T@U T@U) Bool)
(declare-fun |ISet#Intersection| (T@U T@U) T@U)
(declare-fun |ISet#Subset| (T@U T@U) Bool)
(declare-fun |ISet#Equal| (T@U T@U) Bool)
(declare-fun |Math#min| (Int Int) Int)
(declare-fun |Math#clip| (Int) Int)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun |MultiSet#Empty| (T@T) T@U)
(declare-fun |MultiSet#Singleton| (T@U) T@U)
(declare-fun |MultiSet#UnionOne| (T@U T@U) T@U)
(declare-fun |MultiSet#Union| (T@U T@U) T@U)
(declare-fun |MultiSet#Intersection| (T@U T@U) T@U)
(declare-fun |MultiSet#Difference| (T@U T@U) T@U)
(declare-fun |MultiSet#Subset| (T@U T@U) Bool)
(declare-fun |MultiSet#Equal| (T@U T@U) Bool)
(declare-fun |MultiSet#Disjoint| (T@U T@U) Bool)
(declare-fun |MultiSet#FromSet| (T@U) T@U)
(declare-fun |MultiSet#FromSeq| (T@U) T@U)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |Seq#Empty| (T@T) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun |Seq#Singleton| (T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun |Seq#Create| (T@U T@U Int T@U) T@U)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Seq#SameUntil| (T@U T@U Int) Bool)
(declare-fun |Seq#FromArray| (T@U T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun |Map#Card| (T@U) Int)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun |Map#Empty| (T@T T@T) T@U)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(declare-fun |Map#Equal| (T@U T@U) Bool)
(declare-fun |Map#Disjoint| (T@U T@U) Bool)
(declare-fun |IMap#Values| (T@U) T@U)
(declare-fun |IMap#Items| (T@U) T@U)
(declare-fun |IMap#Empty| (T@T T@T) T@U)
(declare-fun |IMap#Glue| (T@U T@U T@U) T@U)
(declare-fun |IMap#Build| (T@U T@U T@U) T@U)
(declare-fun |IMap#Equal| (T@U T@U) Bool)
(declare-fun INTERNAL_add_boogie (Int Int) Int)
(declare-fun INTERNAL_sub_boogie (Int Int) Int)
(declare-fun INTERNAL_mul_boogie (Int Int) Int)
(declare-fun INTERNAL_div_boogie (Int Int) Int)
(declare-fun INTERNAL_mod_boogie (Int Int) Int)
(declare-fun INTERNAL_lt_boogie (Int Int) Bool)
(declare-fun INTERNAL_le_boogie (Int Int) Bool)
(declare-fun INTERNAL_gt_boogie (Int Int) Bool)
(declare-fun INTERNAL_ge_boogie (Int Int) Bool)
(declare-fun Mul (Int Int) Int)
(declare-fun Div (Int Int) Int)
(declare-fun Mod (Int Int) Int)
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun _System.__default.rank__is__less__than (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun null () T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0_0 (T@U) T@U)
(declare-fun Apply0 (T@U T@U T@U) T@U)
(declare-fun Handle0 (T@U T@U T@U) T@U)
(declare-fun Requires0 (T@U T@U T@U) Bool)
(declare-fun Reads0 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.__default () T@U)
(declare-fun |_System.__default.rank__is__less__than#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |_System.__default.rank__is__less__than#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun MapType2Type (T@T T@T T@T T@T) T@T)
(declare-fun MapType2TypeInv0 (T@T) T@T)
(declare-fun MapType2TypeInv1 (T@T) T@T)
(declare-fun MapType2TypeInv2 (T@T) T@T)
(declare-fun MapType2TypeInv3 (T@T) T@T)
(declare-fun MapType2Select (T@U T@U T@U T@U) T@U)
(declare-fun MapType2Store (T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle2 (T@U T@U T@U) T@U)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun MapType3Type (T@T T@T T@T) T@T)
(declare-fun MapType3TypeInv0 (T@T) T@T)
(declare-fun MapType3TypeInv1 (T@T) T@T)
(declare-fun MapType3TypeInv2 (T@T) T@T)
(declare-fun MapType3Select (T@U T@U T@U) T@U)
(declare-fun MapType3Store (T@U T@U T@U T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_4 (T@U) T@U)
(declare-fun MapType4Type (T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType4TypeInv0 (T@T) T@T)
(declare-fun MapType4TypeInv1 (T@T) T@T)
(declare-fun MapType4TypeInv2 (T@T) T@T)
(declare-fun MapType4TypeInv3 (T@T) T@T)
(declare-fun MapType4TypeInv4 (T@T) T@T)
(declare-fun MapType4TypeInv5 (T@T) T@T)
(declare-fun MapType4Select (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType4Store (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle4 (T@U T@U T@U) T@U)
(declare-fun Requires4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_4 (T@U) T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple2| (T@U) Bool)
(declare-fun |_System.Tuple2#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_3 (T@U) T@U)
(declare-fun MapType5Type (T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType5TypeInv0 (T@T) T@T)
(declare-fun MapType5TypeInv1 (T@T) T@T)
(declare-fun MapType5TypeInv2 (T@T) T@T)
(declare-fun MapType5TypeInv3 (T@T) T@T)
(declare-fun MapType5TypeInv4 (T@T) T@T)
(declare-fun MapType5Select (T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType5Store (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle3 (T@U T@U T@U) T@U)
(declare-fun Requires3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_3 (T@U) T@U)
(declare-fun |#_System._tuple#0._#Make0| () T@U)
(declare-fun _System.Tuple0.___hMake0_q (T@U) Bool)
(declare-fun Tclass._System.Tuple0 () T@U)
(declare-fun |$IsA#_System.Tuple0| (T@U) Bool)
(declare-fun |_System.Tuple0#Equal| (T@U T@U) Bool)
(declare-fun Tclass.Char__Order.__default () T@U)
(declare-fun Char__Order.__default.SomeElement () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun |Char__Order.__default.SomeElement#canCall| () Bool)
(declare-fun |Char__Order.__default.SomeElement#requires| () Bool)
(declare-fun Char__Order.__default.lte (T@U T@U) Bool)
(declare-fun |Char__Order.__default.lte#canCall| (T@U T@U) Bool)
(declare-fun Char__Order.__default.ltedef (T@U T@U) Bool)
(declare-fun |Char__Order.__default.lte#requires| (T@U T@U) Bool)
(declare-fun |Char__Order.__default.ltedef#canCall| (T@U T@U) Bool)
(declare-fun |Char__Order.__default.ltedef#requires| (T@U T@U) Bool)
(declare-fun Char__Order.__default.LargestLte (T@U T@U T@U) Int)
(declare-fun AsFuelBottom (T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun StartFuel_Char_Order._default.IsSorted () T@U)
(declare-fun |Char__Order.__default.LargestLte#canCall| (T@U T@U) Bool)
(declare-fun Char__Order.__default.IsSorted (T@U T@U) Bool)
(declare-fun Char__Order.__default.lt (T@U T@U) Bool)
(declare-fun |Char__Order.__default.LargestLte#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Char_Order._default.IsSorted0 () T@U)
(declare-fun StartFuelAssert_Char_Order._default.IsSorted () T@U)
(declare-fun |Char__Order.__default.lt#canCall| (T@U T@U) Bool)
(declare-fun MoreFuel_Char_Order._default.IsSorted1 () T@U)
(declare-fun Char__Order.__default.LargestLt (T@U T@U T@U) Int)
(declare-fun |Char__Order.__default.LargestLt#canCall| (T@U T@U) Bool)
(declare-fun |Char__Order.__default.LargestLt#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Char_Order._default.IsSorted2 () T@U)
(declare-fun MoreFuel_Char_Order._default.IsSorted3 () T@U)
(declare-fun Char__Order.__default.IndexOfFirstGte (T@U T@U T@U) Int)
(declare-fun |Char__Order.__default.IndexOfFirstGte#canCall| (T@U T@U) Bool)
(declare-fun |Char__Order.__default.IndexOfFirstGte#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Last (T@U T@U) T@U)
(declare-fun Sequences.__default.DropLast (T@U T@U) T@U)
(declare-fun MoreFuel_Char_Order._default.IsSorted4 () T@U)
(declare-fun |Sequences.__default.Last#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.DropLast#canCall| (T@U T@U) Bool)
(declare-fun MoreFuel_Char_Order._default.IsSorted5 () T@U)
(declare-fun Char__Order.__default.binarySearchIndexOfFirstKeyGteIter (T@U T@U T@U Int Int) Int)
(declare-fun |Char__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (T@U T@U Int Int) Bool)
(declare-fun |Char__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| (T@U T@U T@U Int Int) Bool)
(declare-fun Char__Order.__default.binarySearchIndexOfFirstKeyGte (T@U T@U T@U) Int)
(declare-fun |Char__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (T@U T@U) Bool)
(declare-fun |Char__Order.__default.binarySearchIndexOfFirstKeyGte#requires| (T@U T@U T@U) Bool)
(declare-fun Char__Order.__default.IndexOfFirstGt (T@U T@U T@U) Int)
(declare-fun |Char__Order.__default.IndexOfFirstGt#canCall| (T@U T@U) Bool)
(declare-fun |Char__Order.__default.IndexOfFirstGt#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Char_Order._default.IsSorted6 () T@U)
(declare-fun MoreFuel_Char_Order._default.IsSorted7 () T@U)
(declare-fun Char__Order.__default.binarySearchIndexOfFirstKeyGtIter (T@U T@U T@U Int Int) Int)
(declare-fun |Char__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (T@U T@U Int Int) Bool)
(declare-fun |Char__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| (T@U T@U T@U Int Int) Bool)
(declare-fun Char__Order.__default.binarySearchIndexOfFirstKeyGt (T@U T@U T@U) Int)
(declare-fun |Char__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (T@U T@U) Bool)
(declare-fun |Char__Order.__default.binarySearchIndexOfFirstKeyGt#requires| (T@U T@U T@U) Bool)
(declare-fun Char__Order.__default.SetAllLte (T@U T@U) Bool)
(declare-fun |Char__Order.__default.SetAllLte#canCall| (T@U T@U) Bool)
(declare-fun |Char__Order.__default.SetAllLte#requires| (T@U T@U) Bool)
(declare-fun Char__Order.__default.SetAllLt (T@U T@U) Bool)
(declare-fun |Char__Order.__default.SetAllLt#canCall| (T@U T@U) Bool)
(declare-fun |Char__Order.__default.SetAllLt#requires| (T@U T@U) Bool)
(declare-fun Char__Order.__default.NotMinimum (T@U T@U) Bool)
(declare-fun |Char__Order.__default.NotMinimum#canCall| (T@U) Bool)
(declare-fun |Char__Order.__default.NotMinimum#requires| (T@U T@U) Bool)
(declare-fun Char__Order.__default.MapPivotedUnion (T@U T@U T@U T@U) T@U)
(declare-fun |Char__Order.__default.MapPivotedUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Char__Order.__default.MapPivotedUnion#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |lambda#29| (T@U T@U) T@U)
(declare-fun Maps.__default.MapIRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#30| (T@U T@U) T@U)
(declare-fun Maps.__default.MapDisjointUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun StartFuel_Maps._default.MapDisjointUnion () T@U)
(declare-fun |Maps.__default.MapIRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapDisjointUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass.Options.Option (T@U) T@U)
(declare-fun Tclass.Options.Option_0 (T@U) T@U)
(declare-fun Char__Order.__default.SetSuccessor (T@U T@U) T@U)
(declare-fun |Char__Order.__default.SetSuccessor#canCall| (T@U T@U) Bool)
(declare-fun |Char__Order.__default.SetSuccessor#requires| (T@U T@U) Bool)
(declare-fun |$let#0_next| (T@U T@U) T@U)
(declare-fun |$let#0$canCall| (T@U T@U) Bool)
(declare-fun |#Options.Option.Some| (T@U) T@U)
(declare-fun |#Options.Option.None| () T@U)
(declare-fun Char__Order.__default.MapSuccessor (T@U T@U T@U) T@U)
(declare-fun |Char__Order.__default.MapSuccessor#canCall| (T@U T@U T@U) Bool)
(declare-fun |Char__Order.__default.MapSuccessor#requires| (T@U T@U T@U) Bool)
(declare-fun Char__Order.__default.SeqSuccessor (T@U T@U) T@U)
(declare-fun |Char__Order.__default.SeqSuccessor#canCall| (T@U T@U) Bool)
(declare-fun |Char__Order.__default.SeqSuccessor#requires| (T@U T@U) Bool)
(declare-fun |lambda#51| (T@U T@U) T@U)
(declare-fun Char__Order.__default.SortedSeqForMap (T@U T@U T@U T@U) Bool)
(declare-fun |Char__Order.__default.SortedSeqForMap#canCall| (T@U T@U T@U) Bool)
(declare-fun |Char__Order.__default.SortedSeqForMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Unzip (T@U T@U T@U T@U) T@U)
(declare-fun StartFuel_Sequences._default.Unzip () T@U)
(declare-fun StartFuel_Char_Order._default.IsStrictlySorted () T@U)
(declare-fun |Sequences.__default.Unzip#canCall| (T@U T@U T@U) Bool)
(declare-fun |Char__Order.__default.IsStrictlySorted#canCall| (T@U) Bool)
(declare-fun Char__Order.__default.IsStrictlySorted (T@U T@U) Bool)
(declare-fun Char__Order.__default.minimum (T@U T@U) T@U)
(declare-fun |Char__Order.__default.minimum#canCall| (T@U) Bool)
(declare-fun |Char__Order.__default.minimum#requires| (T@U T@U) Bool)
(declare-fun |$let#3_a| (T@U) T@U)
(declare-fun |$let#3$canCall| (T@U) Bool)
(declare-fun Char__Order.__default.minimumOpt (T@U T@U) T@U)
(declare-fun Options.Option.value (T@U) T@U)
(declare-fun |Char__Order.__default.minimumOpt#canCall| (T@U) Bool)
(declare-fun Options.Option.Some_q (T@U) Bool)
(declare-fun Options.Option.None_q (T@U) Bool)
(declare-fun |Char__Order.__default.minimumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Char_Order._default.minimum () T@U)
(declare-fun Char__Order.__default.maximum (T@U T@U) T@U)
(declare-fun |Char__Order.__default.maximum#canCall| (T@U) Bool)
(declare-fun |Char__Order.__default.maximum#requires| (T@U T@U) Bool)
(declare-fun |$let#6_a| (T@U) T@U)
(declare-fun |$let#6$canCall| (T@U) Bool)
(declare-fun Char__Order.__default.maximumOpt (T@U T@U) T@U)
(declare-fun |Char__Order.__default.maximumOpt#canCall| (T@U) Bool)
(declare-fun |Char__Order.__default.maximumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Char_Order._default.maximum () T@U)
(declare-fun |Char__Order.__default.lt#requires| (T@U T@U) Bool)
(declare-fun Char__Order.__default.Min (T@U T@U) T@U)
(declare-fun |Char__Order.__default.Min#canCall| (T@U T@U) Bool)
(declare-fun |Char__Order.__default.Min#requires| (T@U T@U) Bool)
(declare-fun Char__Order.__default.Max (T@U T@U) T@U)
(declare-fun |Char__Order.__default.Max#canCall| (T@U T@U) Bool)
(declare-fun |Char__Order.__default.Max#requires| (T@U T@U) Bool)
(declare-fun |Char__Order.__default.IsSorted#canCall| (T@U) Bool)
(declare-fun |Char__Order.__default.IsSorted#requires| (T@U T@U) Bool)
(declare-fun Char__Order.__default.IsStrictlySortedInternal (T@U) Bool)
(declare-fun |Char__Order.__default.IsStrictlySortedInternal#canCall| (T@U) Bool)
(declare-fun |Char__Order.__default.IsStrictlySortedInternal#requires| (T@U) Bool)
(declare-fun |Char__Order.__default.IsStrictlySorted#requires| (T@U T@U) Bool)
(declare-fun |$IsA#Options.Option| (T@U) Bool)
(declare-fun |Options.Option#Equal| (T@U T@U) Bool)
(declare-fun Tclass.Options.__default () T@U)
(declare-fun Options.__default.MapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |Options.__default.MapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.MapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Options.__default.FlatMapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.FlatMapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.FlatMapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Tclass.NativeTypes.sbyte () T@U)
(declare-fun Tclass.NativeTypes.byte () T@U)
(declare-fun Tclass.NativeTypes.int16 () T@U)
(declare-fun Tclass.NativeTypes.uint16 () T@U)
(declare-fun Tclass.NativeTypes.int32 () T@U)
(declare-fun Tclass.NativeTypes.uint32 () T@U)
(declare-fun Tclass.NativeTypes.int64 () T@U)
(declare-fun Tclass.NativeTypes.uint64 () T@U)
(declare-fun Tclass.NativeTypes.nat8 () T@U)
(declare-fun Tclass.NativeTypes.nat16 () T@U)
(declare-fun Tclass.NativeTypes.nat32 () T@U)
(declare-fun Tclass.NativeTypes.nat64 () T@U)
(declare-fun Tclass.NativeTypes.__default () T@U)
(declare-fun NativeTypes.__default.Uint64Size () Int)
(declare-fun |NativeTypes.__default.Uint64Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32Size () Int)
(declare-fun |NativeTypes.__default.Uint32Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint16Size () Int)
(declare-fun |NativeTypes.__default.Uint16Size#requires| () Bool)
(declare-fun |NativeTypes.__default.Uint64UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint64UpperBound () Int)
(declare-fun |NativeTypes.__default.Uint32UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32UpperBound () Int)
(declare-fun Tclass.Sequences.__default () T@U)
(declare-fun |Sequences.__default.Last#requires| (T@U T@U) Bool)
(declare-fun |Sequences.__default.DropLast#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Set (T@U T@U) T@U)
(declare-fun |Sequences.__default.Set#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Set#requires| (T@U T@U) Bool)
(declare-fun |lambda#65| (T@U T@U Int) T@U)
(declare-fun Sequences.__default.ISet (T@U T@U) T@U)
(declare-fun |Sequences.__default.ISet#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.ISet#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.NoDupes (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IndexOf (T@U T@U T@U) Int)
(declare-fun |Sequences.__default.IndexOf#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IndexOf#requires| (T@U T@U T@U) Bool)
(declare-fun |$let#9_i| (T@U T@U T@U) Int)
(declare-fun |$let#9$canCall| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Range (T@U Int) T@U)
(declare-fun |Sequences.__default.Range#canCall| (Int) Bool)
(declare-fun |Sequences.__default.Range#requires| (T@U Int) Bool)
(declare-fun Sequences.__default.Apply (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Apply#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Apply#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.ApplyOpaque (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.ApplyOpaque#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.ApplyOpaque#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Filter (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Filter#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Filter#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldLeft (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldLeft#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldLeft#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldFromRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldFromRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldFromRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.remove (T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.remove#canCall| (T@U T@U Int) Bool)
(declare-fun |Sequences.__default.remove#requires| (T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.insert (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.insert#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.insert#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace1with2 (T@U T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace1with2#canCall| (T@U T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace1with2#requires| (T@U T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace2with1 (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace2with1#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace2with1#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.concat (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concat3 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat3#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat3#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concatSeq (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concatSeq#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.concatSeq#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsPrefix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsSuffix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.SeqIndexIterate (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.SeqIndexIterate#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.SeqIndexIterate#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.SeqIndex (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.SeqIndex#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.SeqIndex#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.SeqIndexIterate () T@U)
(declare-fun Sequences.__default.SeqOfLength (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqOfLength#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqOfLength#requires| (T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.SeqIndexUpdate (T@U T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqIndexUpdate#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqIndexUpdate#requires| (T@U T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.Zip (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Zip#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Zip#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Unzip#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenShape (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FlattenShape#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.FlattenShape#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenLength (T@U T@U) Int)
(declare-fun |Sequences.__default.FlattenLength#canCall| (T@U) Bool)
(declare-fun |Sequences.__default.FlattenLength#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Flatten (T@U T@U T@U) T@U)
(declare-fun StartFuel_Sequences._default.FlattenLength () T@U)
(declare-fun StartFuel_Sequences._default.FlattenShape () T@U)
(declare-fun |Sequences.__default.Flatten#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Flatten#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenShape10 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenShape () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenShape11 () T@U)
(declare-fun Sequences.__default.FlattenIndex (T@U Int Int) Int)
(declare-fun |Sequences.__default.FlattenIndex#canCall| (T@U Int Int) Bool)
(declare-fun |Sequences.__default.FlattenIndex#requires| (T@U Int Int) Bool)
(declare-fun Sequences.__default.UnflattenIndex (T@U T@U Int) T@U)
(declare-fun |Sequences.__default.UnflattenIndex#canCall| (T@U Int) Bool)
(declare-fun |Sequences.__default.UnflattenIndex#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenLength10 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenLength () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenLength11 () T@U)
(declare-fun Sequences.__default.fill (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.fill#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.fill#requires| (T@U T@U Int T@U) Bool)
(declare-fun Tclass.Maps.__default () T@U)
(declare-fun Maps.__default.IMapsTo (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsTo#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsTo#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapsTo (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsTo#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsTo#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapsAgreeOnKey (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsAgreeOnKey#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsAgreeOnKey#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapsAgreeOnKey (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsAgreeOnKey#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsAgreeOnKey#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IsSubIMap (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubIMap#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubIMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IsSubMap (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubMap#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapRemove (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#69| (T@U T@U T@U) T@U)
(declare-fun |lambda#70| (T@U) T@U)
(declare-fun Maps.__default.MapRemoveStrong (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemoveStrong#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemoveStrong#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapRemove () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove8 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove9 () T@U)
(declare-fun Maps.__default.MapRemove1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove1#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#73| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapRemove1Strong (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove1Strong#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove1Strong#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapRemove1 () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove112 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove1 () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove113 () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove114 () T@U)
(declare-fun Maps.__default.IMapRemove (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRemove#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRemove#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapRemove1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRemove1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRemove1#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |lambda#87| (T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapIRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapDisjointUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#101| (T@U T@U T@U) T@U)
(declare-fun |lambda#102| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapUnionPreferA (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnionPreferA#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnionPreferA#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapUnionPreferB (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnionPreferB#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnionPreferB#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapUnionPreferA () T@U)
(declare-fun Maps.__default.IMapUnionPreferA (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnionPreferA#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnionPreferA#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapUnionPreferB (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnionPreferB#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnionPreferB#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.IMapUnionPreferA () T@U)
(declare-fun Maps.__default.MapDisjointUnion3 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapDisjointUnion3#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapDisjointUnion3#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#121| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#122| (T@U T@U T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapToImap (T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapToImap#canCall| (T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapToImap#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#125| (T@U T@U) T@U)
(declare-fun Maps.__default.MapLookupOption (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapLookupOption#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapLookupOption#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.ImapLookupOption (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.ImapLookupOption#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.ImapLookupOption#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass.SeqComparison.__default () T@U)
(declare-fun SeqComparison.__default.lte (T@U T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lte#canCall| (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lte#requires| (T@U T@U T@U) Bool)
(declare-fun SeqComparison.__default.lt (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lt#canCall| (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_SeqComparison._default.lte () T@U)
(declare-fun Tclass.NativeArrays.__default () T@U)
(declare-fun MapType6Type (T@T T@T) T@T)
(declare-fun MapType6TypeInv0 (T@T) T@T)
(declare-fun MapType6TypeInv1 (T@T) T@T)
(declare-fun MapType6Select (T@U T@U T@U) T@U)
(declare-fun MapType6Store (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#1| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#2| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#3| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#4| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#5| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#6| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#7| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#8| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#9| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#10| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#11| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#12| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#13| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#14| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#15| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#16| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#17| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#18| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#19| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#20| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#21| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#22| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#23| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#24| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#25| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#26| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#27| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#28| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#41| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#42| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#55| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#56| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#57| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#58| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#59| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#60| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#61| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#62| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#63| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#64| (T@U T@U T@U Bool) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0) :qid |typeInv:U_2_int| :pattern ( (int_2_U arg0)) ))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x)) :qid |cast:U_2_int| :pattern ( (U_2_int x)) ))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType) :qid |funType:int_2_U| :pattern ( (int_2_U arg0@@0)) ))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1) :qid |typeInv:U_2_real| :pattern ( (real_2_U arg0@@1)) ))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0)) :qid |cast:U_2_real| :pattern ( (U_2_real x@@0)) ))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType) :qid |funType:real_2_U| :pattern ( (real_2_U arg0@@2)) ))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3) :qid |typeInv:U_2_bool| :pattern ( (bool_2_U arg0@@3)) ))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1)) :qid |cast:U_2_bool| :pattern ( (U_2_bool x@@1)) ))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType) :qid |funType:bool_2_U| :pattern ( (bool_2_U arg0@@4)) ))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5) :qid |typeInv:U_2_rmode| :pattern ( (rmode_2_U arg0@@5)) ))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2)) :qid |cast:U_2_rmode| :pattern ( (U_2_rmode x@@2)) ))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType) :qid |funType:rmode_2_U| :pattern ( (rmode_2_U arg0@@6)) ))))
(assert (forall ((x@@3 T@U) ) (! (UOrdering2 x@@3 x@@3) :qid |bg:subtype-refl| :no-pattern (U_2_int x@@3) :no-pattern (U_2_bool x@@3) )))
(assert (forall ((x@@4 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@4))) (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@4 y) (UOrdering2 y z))) (UOrdering2 x@@4 z))) :qid |bg:subtype-trans| :pattern ( (UOrdering2 x@@4 y) (UOrdering2 y z)) )))
(assert (forall ((x@@5 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@5))) (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@5 y@@0) (UOrdering2 y@@0 x@@5)) (= x@@5 y@@0)))) :qid |bg:subtype-antisymm| :pattern ( (UOrdering2 x@@5 y@@0) (UOrdering2 y@@0 x@@5)) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor TyType) 4) (= (type TBool) TyType)) (= (type TChar) TyType)) (= (type TInt) TyType)) (= (type TReal) TyType)) (= (type TORDINAL) TyType)) (= (Ctor TyTagType) 5)) (= (type TagBool) TyTagType)) (= (type TagChar) TyTagType)) (= (type TagInt) TyTagType)) (= (type TagReal) TyTagType)) (= (type TagORDINAL) TyTagType)) (= (type TagSet) TyTagType)) (= (type TagISet) TyTagType)) (= (type TagMultiSet) TyTagType)) (= (type TagSeq) TyTagType)) (= (type TagMap) TyTagType)) (= (type TagIMap) TyTagType)) (= (type TagClass) TyTagType)) (= (Ctor ClassNameType) 6)) (= (type class._System.int) ClassNameType)) (= (type class._System.bool) ClassNameType)) (= (type class._System.set) ClassNameType)) (= (type class._System.seq) ClassNameType)) (= (type class._System.multiset) ClassNameType)) (forall ((arg0@@7 T@T) ) (! (= (Ctor (FieldType arg0@@7)) 7) :qid |ctor:FieldType| ))) (forall ((arg0@@8 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@8)) arg0@@8) :qid |typeInv:FieldTypeInv0| :pattern ( (FieldType arg0@@8)) ))) (= (type alloc) (FieldType boolType))) (= (Ctor NameFamilyType) 8)) (= (type allocName) NameFamilyType)) (= (type Tagclass._System.nat) TyTagType)) (= (type class._System.object?) ClassNameType)) (= (type Tagclass._System.object?) TyTagType)) (= (type Tagclass._System.object) TyTagType)) (= (type class._System.array?) ClassNameType)) (= (type Tagclass._System.array?) TyTagType)) (= (type Tagclass._System.array) TyTagType)) (= (type Tagclass._System.___hFunc0) TyTagType)) (= (type Tagclass._System.___hPartialFunc0) TyTagType)) (= (type Tagclass._System.___hTotalFunc0) TyTagType)) (= (type class._System.__default) ClassNameType)) (= (type Tagclass._System.__default) TyTagType)) (= (type Tagclass._System.___hFunc2) TyTagType)) (= (type Tagclass._System.___hPartialFunc2) TyTagType)) (= (type Tagclass._System.___hTotalFunc2) TyTagType)) (= (type Tagclass._System.___hFunc1) TyTagType)) (= (type Tagclass._System.___hPartialFunc1) TyTagType)) (= (type Tagclass._System.___hTotalFunc1) TyTagType)) (= (type Tagclass._System.___hFunc4) TyTagType)) (= (type Tagclass._System.___hPartialFunc4) TyTagType)) (= (type Tagclass._System.___hTotalFunc4) TyTagType)) (= (Ctor DtCtorIdType) 9)) (= (type |##_System._tuple#2._#Make2|) DtCtorIdType)) (= (type Tagclass._System.Tuple2) TyTagType)) (= (type class._System.Tuple2) ClassNameType)) (= (type Tagclass._System.___hFunc3) TyTagType)) (= (type Tagclass._System.___hPartialFunc3) TyTagType)) (= (type Tagclass._System.___hTotalFunc3) TyTagType)) (= (type |##_System._tuple#0._#Make0|) DtCtorIdType)) (= (type Tagclass._System.Tuple0) TyTagType)) (= (type class._System.Tuple0) ClassNameType)) (= (type class.Char__Order.__default) ClassNameType)) (= (type Tagclass.Char__Order.__default) TyTagType)) (= (type Tagclass.Options.Option) TyTagType)) (= (type |##Options.Option.None|) DtCtorIdType)) (= (type |##Options.Option.Some|) DtCtorIdType)) (= (type class.Options.Option) ClassNameType)) (= (type class.Options.__default) ClassNameType)) (= (type Tagclass.Options.__default) TyTagType)) (= (type Tagclass.NativeTypes.sbyte) TyTagType)) (= (type class.NativeTypes.sbyte) ClassNameType)) (= (type Tagclass.NativeTypes.byte) TyTagType)) (= (type class.NativeTypes.byte) ClassNameType)) (= (type Tagclass.NativeTypes.int16) TyTagType)) (= (type class.NativeTypes.int16) ClassNameType)) (= (type Tagclass.NativeTypes.uint16) TyTagType)) (= (type class.NativeTypes.uint16) ClassNameType)) (= (type Tagclass.NativeTypes.int32) TyTagType)) (= (type class.NativeTypes.int32) ClassNameType)) (= (type Tagclass.NativeTypes.uint32) TyTagType)) (= (type class.NativeTypes.uint32) ClassNameType)) (= (type Tagclass.NativeTypes.int64) TyTagType)) (= (type class.NativeTypes.int64) ClassNameType)) (= (type Tagclass.NativeTypes.uint64) TyTagType)) (= (type class.NativeTypes.uint64) ClassNameType)) (= (type Tagclass.NativeTypes.nat8) TyTagType)) (= (type class.NativeTypes.nat8) ClassNameType)) (= (type Tagclass.NativeTypes.nat16) TyTagType)) (= (type class.NativeTypes.nat16) ClassNameType)) (= (type Tagclass.NativeTypes.nat32) TyTagType)) (= (type class.NativeTypes.nat32) ClassNameType)) (= (type Tagclass.NativeTypes.nat64) TyTagType)) (= (type class.NativeTypes.nat64) ClassNameType)) (= (type class.NativeTypes.__default) ClassNameType)) (= (type Tagclass.NativeTypes.__default) TyTagType)) (= (type class.Sequences.__default) ClassNameType)) (= (type Tagclass.Sequences.__default) TyTagType)) (= (type class.Maps.__default) ClassNameType)) (= (type Tagclass.Maps.__default) TyTagType)) (= (type class.SeqComparison.__default) ClassNameType)) (= (type Tagclass.SeqComparison.__default) TyTagType)) (= (type class.NativeArrays.__default) ClassNameType)) (= (type Tagclass.NativeArrays.__default) TyTagType)))
(assert (distinct TBool TChar TInt TReal TORDINAL TagBool TagChar TagInt TagReal TagORDINAL TagSet TagISet TagMultiSet TagSeq TagMap TagIMap TagClass class._System.int class._System.bool class._System.set class._System.seq class._System.multiset alloc allocName Tagclass._System.nat class._System.object? Tagclass._System.object? Tagclass._System.object class._System.array? Tagclass._System.array? Tagclass._System.array Tagclass._System.___hFunc0 Tagclass._System.___hPartialFunc0 Tagclass._System.___hTotalFunc0 class._System.__default Tagclass._System.__default Tagclass._System.___hFunc2 Tagclass._System.___hPartialFunc2 Tagclass._System.___hTotalFunc2 Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 Tagclass._System.___hTotalFunc1 Tagclass._System.___hFunc4 Tagclass._System.___hPartialFunc4 Tagclass._System.___hTotalFunc4 |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 class._System.Tuple2 Tagclass._System.___hFunc3 Tagclass._System.___hPartialFunc3 Tagclass._System.___hTotalFunc3 |##_System._tuple#0._#Make0| Tagclass._System.Tuple0 class._System.Tuple0 class.Char__Order.__default Tagclass.Char__Order.__default Tagclass.Options.Option |##Options.Option.None| |##Options.Option.Some| class.Options.Option class.Options.__default Tagclass.Options.__default Tagclass.NativeTypes.sbyte class.NativeTypes.sbyte Tagclass.NativeTypes.byte class.NativeTypes.byte Tagclass.NativeTypes.int16 class.NativeTypes.int16 Tagclass.NativeTypes.uint16 class.NativeTypes.uint16 Tagclass.NativeTypes.int32 class.NativeTypes.int32 Tagclass.NativeTypes.uint32 class.NativeTypes.uint32 Tagclass.NativeTypes.int64 class.NativeTypes.int64 Tagclass.NativeTypes.uint64 class.NativeTypes.uint64 Tagclass.NativeTypes.nat8 class.NativeTypes.nat8 Tagclass.NativeTypes.nat16 class.NativeTypes.nat16 Tagclass.NativeTypes.nat32 class.NativeTypes.nat32 Tagclass.NativeTypes.nat64 class.NativeTypes.nat64 class.NativeTypes.__default Tagclass.NativeTypes.__default class.Sequences.__default Tagclass.Sequences.__default class.Maps.__default Tagclass.Maps.__default class.SeqComparison.__default Tagclass.SeqComparison.__default class.NativeArrays.__default Tagclass.NativeArrays.__default) )
(assert $$Language$Dafny)
(assert (forall ((arg0@@9 Int) ) (! (= (type (TBitvector arg0@@9)) TyType) :qid |funType:TBitvector| :pattern ( (TBitvector arg0@@9)) )))
(assert (forall ((w Int) ) (! (= (Inv0_TBitvector (TBitvector w)) w) :qid |DafnyPre.32:15| :skolemid |8039| :pattern ( (TBitvector w)) )))
(assert  (and (forall ((arg0@@10 T@U) ) (! (= (type (TSet arg0@@10)) TyType) :qid |funType:TSet| :pattern ( (TSet arg0@@10)) )) (forall ((arg0@@11 T@U) ) (! (= (type (Inv0_TSet arg0@@11)) TyType) :qid |funType:Inv0_TSet| :pattern ( (Inv0_TSet arg0@@11)) ))))
(assert (forall ((t T@U) ) (!  (=> (= (type t) TyType) (= (Inv0_TSet (TSet t)) t)) :qid |DafnyPre.34:15| :skolemid |8040| :pattern ( (TSet t)) )))
(assert  (and (forall ((arg0@@12 T@U) ) (! (= (type (TISet arg0@@12)) TyType) :qid |funType:TISet| :pattern ( (TISet arg0@@12)) )) (forall ((arg0@@13 T@U) ) (! (= (type (Inv0_TISet arg0@@13)) TyType) :qid |funType:Inv0_TISet| :pattern ( (Inv0_TISet arg0@@13)) ))))
(assert (forall ((t@@0 T@U) ) (!  (=> (= (type t@@0) TyType) (= (Inv0_TISet (TISet t@@0)) t@@0)) :qid |DafnyPre.36:15| :skolemid |8041| :pattern ( (TISet t@@0)) )))
(assert  (and (forall ((arg0@@14 T@U) ) (! (= (type (TSeq arg0@@14)) TyType) :qid |funType:TSeq| :pattern ( (TSeq arg0@@14)) )) (forall ((arg0@@15 T@U) ) (! (= (type (Inv0_TSeq arg0@@15)) TyType) :qid |funType:Inv0_TSeq| :pattern ( (Inv0_TSeq arg0@@15)) ))))
(assert (forall ((t@@1 T@U) ) (!  (=> (= (type t@@1) TyType) (= (Inv0_TSeq (TSeq t@@1)) t@@1)) :qid |DafnyPre.38:15| :skolemid |8042| :pattern ( (TSeq t@@1)) )))
(assert  (and (forall ((arg0@@16 T@U) ) (! (= (type (TMultiSet arg0@@16)) TyType) :qid |funType:TMultiSet| :pattern ( (TMultiSet arg0@@16)) )) (forall ((arg0@@17 T@U) ) (! (= (type (Inv0_TMultiSet arg0@@17)) TyType) :qid |funType:Inv0_TMultiSet| :pattern ( (Inv0_TMultiSet arg0@@17)) ))))
(assert (forall ((t@@2 T@U) ) (!  (=> (= (type t@@2) TyType) (= (Inv0_TMultiSet (TMultiSet t@@2)) t@@2)) :qid |DafnyPre.40:15| :skolemid |8043| :pattern ( (TMultiSet t@@2)) )))
(assert  (and (forall ((arg0@@18 T@U) (arg1 T@U) ) (! (= (type (TMap arg0@@18 arg1)) TyType) :qid |funType:TMap| :pattern ( (TMap arg0@@18 arg1)) )) (forall ((arg0@@19 T@U) ) (! (= (type (Inv0_TMap arg0@@19)) TyType) :qid |funType:Inv0_TMap| :pattern ( (Inv0_TMap arg0@@19)) ))))
(assert (forall ((t@@3 T@U) (u T@U) ) (!  (=> (and (= (type t@@3) TyType) (= (type u) TyType)) (= (Inv0_TMap (TMap t@@3 u)) t@@3)) :qid |DafnyPre.43:15| :skolemid |8044| :pattern ( (TMap t@@3 u)) )))
(assert (forall ((arg0@@20 T@U) ) (! (= (type (Inv1_TMap arg0@@20)) TyType) :qid |funType:Inv1_TMap| :pattern ( (Inv1_TMap arg0@@20)) )))
(assert (forall ((t@@4 T@U) (u@@0 T@U) ) (!  (=> (and (= (type t@@4) TyType) (= (type u@@0) TyType)) (= (Inv1_TMap (TMap t@@4 u@@0)) u@@0)) :qid |DafnyPre.44:15| :skolemid |8045| :pattern ( (TMap t@@4 u@@0)) )))
(assert  (and (forall ((arg0@@21 T@U) (arg1@@0 T@U) ) (! (= (type (TIMap arg0@@21 arg1@@0)) TyType) :qid |funType:TIMap| :pattern ( (TIMap arg0@@21 arg1@@0)) )) (forall ((arg0@@22 T@U) ) (! (= (type (Inv0_TIMap arg0@@22)) TyType) :qid |funType:Inv0_TIMap| :pattern ( (Inv0_TIMap arg0@@22)) ))))
(assert (forall ((t@@5 T@U) (u@@1 T@U) ) (!  (=> (and (= (type t@@5) TyType) (= (type u@@1) TyType)) (= (Inv0_TIMap (TIMap t@@5 u@@1)) t@@5)) :qid |DafnyPre.47:15| :skolemid |8046| :pattern ( (TIMap t@@5 u@@1)) )))
(assert (forall ((arg0@@23 T@U) ) (! (= (type (Inv1_TIMap arg0@@23)) TyType) :qid |funType:Inv1_TIMap| :pattern ( (Inv1_TIMap arg0@@23)) )))
(assert (forall ((t@@6 T@U) (u@@2 T@U) ) (!  (=> (and (= (type t@@6) TyType) (= (type u@@2) TyType)) (= (Inv1_TIMap (TIMap t@@6 u@@2)) u@@2)) :qid |DafnyPre.48:15| :skolemid |8047| :pattern ( (TIMap t@@6 u@@2)) )))
(assert (forall ((arg0@@24 T@U) ) (! (= (type (Tag arg0@@24)) TyTagType) :qid |funType:Tag| :pattern ( (Tag arg0@@24)) )))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert (= (Tag TORDINAL) TagORDINAL))
(assert (forall ((t@@7 T@U) ) (!  (=> (= (type t@@7) TyType) (= (Tag (TSet t@@7)) TagSet)) :qid |DafnyPre.74:15| :skolemid |8048| :pattern ( (TSet t@@7)) )))
(assert (forall ((t@@8 T@U) ) (!  (=> (= (type t@@8) TyType) (= (Tag (TISet t@@8)) TagISet)) :qid |DafnyPre.75:15| :skolemid |8049| :pattern ( (TISet t@@8)) )))
(assert (forall ((t@@9 T@U) ) (!  (=> (= (type t@@9) TyType) (= (Tag (TMultiSet t@@9)) TagMultiSet)) :qid |DafnyPre.76:15| :skolemid |8050| :pattern ( (TMultiSet t@@9)) )))
(assert (forall ((t@@10 T@U) ) (!  (=> (= (type t@@10) TyType) (= (Tag (TSeq t@@10)) TagSeq)) :qid |DafnyPre.77:15| :skolemid |8051| :pattern ( (TSeq t@@10)) )))
(assert (forall ((t@@11 T@U) (u@@3 T@U) ) (!  (=> (and (= (type t@@11) TyType) (= (type u@@3) TyType)) (= (Tag (TMap t@@11 u@@3)) TagMap)) :qid |DafnyPre.78:15| :skolemid |8052| :pattern ( (TMap t@@11 u@@3)) )))
(assert (forall ((t@@12 T@U) (u@@4 T@U) ) (!  (=> (and (= (type t@@12) TyType) (= (type u@@4) TyType)) (= (Tag (TIMap t@@12 u@@4)) TagIMap)) :qid |DafnyPre.79:15| :skolemid |8053| :pattern ( (TIMap t@@12 u@@4)) )))
(assert (forall ((arg0@@25 T@U) ) (! (let ((T (type arg0@@25))) (= (type (Lit arg0@@25)) T)) :qid |funType:Lit| :pattern ( (Lit arg0@@25)) )))
(assert (forall ((x@@6 T@U) ) (! (= (Lit x@@6) x@@6) :qid |DafnyPre.84:29| :skolemid |8054| :pattern ( (Lit x@@6)) )))
(assert  (and (= (Ctor BoxType) 10) (forall ((arg0@@26 T@U) ) (! (= (type ($Box arg0@@26)) BoxType) :qid |funType:$Box| :pattern ( ($Box arg0@@26)) ))))
(assert (forall ((x@@7 T@U) ) (! (= ($Box (Lit x@@7)) (Lit ($Box x@@7))) :qid |DafnyPre.85:18| :skolemid |8055| :pattern ( ($Box (Lit x@@7))) )))
(assert (forall ((x@@8 Int) ) (! (= (LitInt x@@8) x@@8) :qid |DafnyPre.90:29| :skolemid |8056| :pattern ( (LitInt x@@8)) )))
(assert (forall ((x@@9 Int) ) (! (= ($Box (int_2_U (LitInt x@@9))) (Lit ($Box (int_2_U x@@9)))) :qid |DafnyPre.91:15| :skolemid |8057| :pattern ( ($Box (int_2_U (LitInt x@@9)))) )))
(assert (forall ((x@@10 Real) ) (! (= (LitReal x@@10) x@@10) :qid |DafnyPre.92:30| :skolemid |8058| :pattern ( (LitReal x@@10)) )))
(assert (forall ((x@@11 Real) ) (! (= ($Box (real_2_U (LitReal x@@11))) (Lit ($Box (real_2_U x@@11)))) :qid |DafnyPre.93:15| :skolemid |8059| :pattern ( ($Box (real_2_U (LitReal x@@11)))) )))
(assert  (and (= (Ctor charType) 11) (forall ((arg0@@27 Int) ) (! (= (type (|char#FromInt| arg0@@27)) charType) :qid |funType:char#FromInt| :pattern ( (|char#FromInt| arg0@@27)) ))))
(assert (forall ((ch T@U) ) (!  (=> (= (type ch) charType) (and (and (= (|char#FromInt| (|char#ToInt| ch)) ch) (<= 0 (|char#ToInt| ch))) (< (|char#ToInt| ch) 65536))) :qid |DafnyPre.102:15| :skolemid |8060| :pattern ( (|char#ToInt| ch)) )))
(assert (forall ((n Int) ) (!  (=> (and (<= 0 n) (< n 65536)) (= (|char#ToInt| (|char#FromInt| n)) n)) :qid |DafnyPre.106:15| :skolemid |8061| :pattern ( (|char#FromInt| n)) )))
(assert (forall ((arg0@@28 T@U) (arg1@@1 T@U) ) (! (= (type (|char#Plus| arg0@@28 arg1@@1)) charType) :qid |funType:char#Plus| :pattern ( (|char#Plus| arg0@@28 arg1@@1)) )))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (and (= (type a) charType) (= (type b) charType)) (= (|char#Plus| a b) (|char#FromInt| (+ (|char#ToInt| a) (|char#ToInt| b))))) :qid |DafnyPre.112:15| :skolemid |8062| :pattern ( (|char#Plus| a b)) )))
(assert (forall ((arg0@@29 T@U) (arg1@@2 T@U) ) (! (= (type (|char#Minus| arg0@@29 arg1@@2)) charType) :qid |funType:char#Minus| :pattern ( (|char#Minus| arg0@@29 arg1@@2)) )))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (= (type a@@0) charType) (= (type b@@0) charType)) (= (|char#Minus| a@@0 b@@0) (|char#FromInt| (- (|char#ToInt| a@@0) (|char#ToInt| b@@0))))) :qid |DafnyPre.115:15| :skolemid |8063| :pattern ( (|char#Minus| a@@0 b@@0)) )))
(assert (forall ((T@@0 T@T) (arg0@@30 T@U) ) (! (= (type ($Unbox T@@0 arg0@@30)) T@@0) :qid |funType:$Unbox| :pattern ( ($Unbox T@@0 arg0@@30)) )))
(assert (forall ((x@@12 T@U) ) (! (let ((T@@1 (type x@@12))) (= ($Unbox T@@1 ($Box x@@12)) x@@12)) :qid |DafnyPre.142:18| :skolemid |8064| :pattern ( ($Box x@@12)) )))
(assert (forall ((bx T@U) ) (!  (=> (and (= (type bx) BoxType) ($IsBox bx TInt)) (and (= ($Box ($Unbox intType bx)) bx) ($Is ($Unbox intType bx) TInt))) :qid |DafnyPre.144:15| :skolemid |8065| :pattern ( ($IsBox bx TInt)) )))
(assert (forall ((bx@@0 T@U) ) (!  (=> (and (= (type bx@@0) BoxType) ($IsBox bx@@0 TReal)) (and (= ($Box ($Unbox realType bx@@0)) bx@@0) ($Is ($Unbox realType bx@@0) TReal))) :qid |DafnyPre.147:15| :skolemid |8066| :pattern ( ($IsBox bx@@0 TReal)) )))
(assert (forall ((bx@@1 T@U) ) (!  (=> (and (= (type bx@@1) BoxType) ($IsBox bx@@1 TBool)) (and (= ($Box ($Unbox boolType bx@@1)) bx@@1) ($Is ($Unbox boolType bx@@1) TBool))) :qid |DafnyPre.150:15| :skolemid |8067| :pattern ( ($IsBox bx@@1 TBool)) )))
(assert (forall ((bx@@2 T@U) ) (!  (=> (and (= (type bx@@2) BoxType) ($IsBox bx@@2 TChar)) (and (= ($Box ($Unbox charType bx@@2)) bx@@2) ($Is ($Unbox charType bx@@2) TChar))) :qid |DafnyPre.153:15| :skolemid |8068| :pattern ( ($IsBox bx@@2 TChar)) )))
(assert  (and (and (and (and (and (and (forall ((arg0@@31 T@T) (arg1@@3 T@T) ) (! (= (Ctor (MapType0Type arg0@@31 arg1@@3)) 12) :qid |ctor:MapType0Type| )) (forall ((arg0@@32 T@T) (arg1@@4 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@32 arg1@@4)) arg0@@32) :qid |typeInv:MapType0TypeInv0| :pattern ( (MapType0Type arg0@@32 arg1@@4)) ))) (forall ((arg0@@33 T@T) (arg1@@5 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@33 arg1@@5)) arg1@@5) :qid |typeInv:MapType0TypeInv1| :pattern ( (MapType0Type arg0@@33 arg1@@5)) ))) (forall ((arg0@@34 T@U) (arg1@@6 T@U) ) (! (let ((aVar1 (MapType0TypeInv1 (type arg0@@34)))) (= (type (MapType0Select arg0@@34 arg1@@6)) aVar1)) :qid |funType:MapType0Select| :pattern ( (MapType0Select arg0@@34 arg1@@6)) ))) (forall ((arg0@@35 T@U) (arg1@@7 T@U) (arg2 T@U) ) (! (let ((aVar1@@0 (type arg2))) (let ((aVar0 (type arg1@@7))) (= (type (MapType0Store arg0@@35 arg1@@7 arg2)) (MapType0Type aVar0 aVar1@@0)))) :qid |funType:MapType0Store| :pattern ( (MapType0Store arg0@@35 arg1@@7 arg2)) ))) (forall ((m T@U) (x0 T@U) (val T@U) ) (! (let ((aVar1@@1 (MapType0TypeInv1 (type m)))) (=> (= (type val) aVar1@@1) (= (MapType0Select (MapType0Store m x0 val) x0) val))) :qid |mapAx0:MapType0Select| :weight 0 ))) (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 val@@0) y0) (MapType0Select m@@0 y0))) :qid |mapAx1:MapType0Select:0| :weight 0 )) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (y0@@0 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@1 x0@@1 val@@1) y0@@0) (MapType0Select m@@1 y0@@0))) :qid |mapAx2:MapType0Select| :weight 0 )))))
(assert (forall ((bx@@3 T@U) (t@@13 T@U) ) (!  (=> (and (and (= (type bx@@3) BoxType) (= (type t@@13) TyType)) ($IsBox bx@@3 (TSet t@@13))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@3)) bx@@3) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@3) (TSet t@@13)))) :qid |DafnyPre.156:15| :skolemid |8069| :pattern ( ($IsBox bx@@3 (TSet t@@13))) )))
(assert (forall ((bx@@4 T@U) (t@@14 T@U) ) (!  (=> (and (and (= (type bx@@4) BoxType) (= (type t@@14) TyType)) ($IsBox bx@@4 (TISet t@@14))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@4)) bx@@4) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@4) (TISet t@@14)))) :qid |DafnyPre.159:15| :skolemid |8070| :pattern ( ($IsBox bx@@4 (TISet t@@14))) )))
(assert (forall ((bx@@5 T@U) (t@@15 T@U) ) (!  (=> (and (and (= (type bx@@5) BoxType) (= (type t@@15) TyType)) ($IsBox bx@@5 (TMultiSet t@@15))) (and (= ($Box ($Unbox (MapType0Type BoxType intType) bx@@5)) bx@@5) ($Is ($Unbox (MapType0Type BoxType intType) bx@@5) (TMultiSet t@@15)))) :qid |DafnyPre.162:15| :skolemid |8071| :pattern ( ($IsBox bx@@5 (TMultiSet t@@15))) )))
(assert  (and (forall ((arg0@@36 T@T) ) (! (= (Ctor (SeqType arg0@@36)) 13) :qid |ctor:SeqType| )) (forall ((arg0@@37 T@T) ) (! (= (SeqTypeInv0 (SeqType arg0@@37)) arg0@@37) :qid |typeInv:SeqTypeInv0| :pattern ( (SeqType arg0@@37)) ))))
(assert (forall ((bx@@6 T@U) (t@@16 T@U) ) (!  (=> (and (and (= (type bx@@6) BoxType) (= (type t@@16) TyType)) ($IsBox bx@@6 (TSeq t@@16))) (and (= ($Box ($Unbox (SeqType BoxType) bx@@6)) bx@@6) ($Is ($Unbox (SeqType BoxType) bx@@6) (TSeq t@@16)))) :qid |DafnyPre.165:15| :skolemid |8072| :pattern ( ($IsBox bx@@6 (TSeq t@@16))) )))
(assert  (and (and (forall ((arg0@@38 T@T) (arg1@@8 T@T) ) (! (= (Ctor (MapType arg0@@38 arg1@@8)) 14) :qid |ctor:MapType| )) (forall ((arg0@@39 T@T) (arg1@@9 T@T) ) (! (= (MapTypeInv0 (MapType arg0@@39 arg1@@9)) arg0@@39) :qid |typeInv:MapTypeInv0| :pattern ( (MapType arg0@@39 arg1@@9)) ))) (forall ((arg0@@40 T@T) (arg1@@10 T@T) ) (! (= (MapTypeInv1 (MapType arg0@@40 arg1@@10)) arg1@@10) :qid |typeInv:MapTypeInv1| :pattern ( (MapType arg0@@40 arg1@@10)) ))))
(assert (forall ((bx@@7 T@U) (s T@U) (t@@17 T@U) ) (!  (=> (and (and (and (= (type bx@@7) BoxType) (= (type s) TyType)) (= (type t@@17) TyType)) ($IsBox bx@@7 (TMap s t@@17))) (and (= ($Box ($Unbox (MapType BoxType BoxType) bx@@7)) bx@@7) ($Is ($Unbox (MapType BoxType BoxType) bx@@7) (TMap s t@@17)))) :qid |DafnyPre.168:15| :skolemid |8073| :pattern ( ($IsBox bx@@7 (TMap s t@@17))) )))
(assert  (and (and (forall ((arg0@@41 T@T) (arg1@@11 T@T) ) (! (= (Ctor (IMapType arg0@@41 arg1@@11)) 15) :qid |ctor:IMapType| )) (forall ((arg0@@42 T@T) (arg1@@12 T@T) ) (! (= (IMapTypeInv0 (IMapType arg0@@42 arg1@@12)) arg0@@42) :qid |typeInv:IMapTypeInv0| :pattern ( (IMapType arg0@@42 arg1@@12)) ))) (forall ((arg0@@43 T@T) (arg1@@13 T@T) ) (! (= (IMapTypeInv1 (IMapType arg0@@43 arg1@@13)) arg1@@13) :qid |typeInv:IMapTypeInv1| :pattern ( (IMapType arg0@@43 arg1@@13)) ))))
(assert (forall ((bx@@8 T@U) (s@@0 T@U) (t@@18 T@U) ) (!  (=> (and (and (and (= (type bx@@8) BoxType) (= (type s@@0) TyType)) (= (type t@@18) TyType)) ($IsBox bx@@8 (TIMap s@@0 t@@18))) (and (= ($Box ($Unbox (IMapType BoxType BoxType) bx@@8)) bx@@8) ($Is ($Unbox (IMapType BoxType BoxType) bx@@8) (TIMap s@@0 t@@18)))) :qid |DafnyPre.171:15| :skolemid |8074| :pattern ( ($IsBox bx@@8 (TIMap s@@0 t@@18))) )))
(assert (forall ((v T@U) (t@@19 T@U) ) (!  (=> (= (type t@@19) TyType) (and (=> ($IsBox ($Box v) t@@19) ($Is v t@@19)) (=> ($Is v t@@19) ($IsBox ($Box v) t@@19)))) :qid |DafnyPre.175:18| :skolemid |8075| :pattern ( ($IsBox ($Box v) t@@19)) )))
(assert  (and (and (and (and (and (forall ((arg0@@44 T@U) (arg1@@14 T@U) ) (! (let ((alpha@@1 (FieldTypeInv0 (type arg1@@14)))) (= (type (MapType1Select arg0@@44 arg1@@14)) alpha@@1)) :qid |funType:MapType1Select| :pattern ( (MapType1Select arg0@@44 arg1@@14)) )) (= (Ctor MapType1Type) 16)) (forall ((arg0@@45 T@U) (arg1@@15 T@U) (arg2@@0 T@U) ) (! (= (type (MapType1Store arg0@@45 arg1@@15 arg2@@0)) MapType1Type) :qid |funType:MapType1Store| :pattern ( (MapType1Store arg0@@45 arg1@@15 arg2@@0)) ))) (forall ((m@@2 T@U) (x0@@2 T@U) (val@@2 T@U) ) (! (let ((alpha@@2 (FieldTypeInv0 (type x0@@2)))) (=> (= (type val@@2) alpha@@2) (= (MapType1Select (MapType1Store m@@2 x0@@2 val@@2) x0@@2) val@@2))) :qid |mapAx0:MapType1Select| :weight 0 ))) (and (forall ((val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 val@@3) y0@@1) (MapType1Select m@@3 y0@@1))) :qid |mapAx1:MapType1Select:0| :weight 0 )) (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@4 x0@@4 val@@4) y0@@2) (MapType1Select m@@4 y0@@2))) :qid |mapAx2:MapType1Select| :weight 0 )))) (= (Ctor refType) 17)))
(assert (forall ((v@@0 T@U) (t@@20 T@U) (h T@U) ) (!  (=> (and (= (type t@@20) TyType) (= (type h) (MapType0Type refType MapType1Type))) (and (=> ($IsAllocBox ($Box v@@0) t@@20 h) ($IsAlloc v@@0 t@@20 h)) (=> ($IsAlloc v@@0 t@@20 h) ($IsAllocBox ($Box v@@0) t@@20 h)))) :qid |DafnyPre.178:18| :skolemid |8076| :pattern ( ($IsAllocBox ($Box v@@0) t@@20 h)) )))
(assert (forall ((v@@1 T@U) ) (!  (=> (= (type v@@1) intType) ($Is v@@1 TInt)) :qid |DafnyPre.196:14| :skolemid |8077| :pattern ( ($Is v@@1 TInt)) )))
(assert (forall ((v@@2 T@U) ) (!  (=> (= (type v@@2) realType) ($Is v@@2 TReal)) :qid |DafnyPre.197:14| :skolemid |8078| :pattern ( ($Is v@@2 TReal)) )))
(assert (forall ((v@@3 T@U) ) (!  (=> (= (type v@@3) boolType) ($Is v@@3 TBool)) :qid |DafnyPre.198:14| :skolemid |8079| :pattern ( ($Is v@@3 TBool)) )))
(assert (forall ((v@@4 T@U) ) (!  (=> (= (type v@@4) charType) ($Is v@@4 TChar)) :qid |DafnyPre.199:14| :skolemid |8080| :pattern ( ($Is v@@4 TChar)) )))
(assert (forall ((v@@5 T@U) ) (!  (=> (= (type v@@5) BoxType) ($Is v@@5 TORDINAL)) :qid |DafnyPre.200:14| :skolemid |8081| :pattern ( ($Is v@@5 TORDINAL)) )))
(assert (forall ((h@@0 T@U) (v@@6 T@U) ) (!  (=> (and (= (type h@@0) (MapType0Type refType MapType1Type)) (= (type v@@6) intType)) ($IsAlloc v@@6 TInt h@@0)) :qid |DafnyPre.202:14| :skolemid |8082| :pattern ( ($IsAlloc v@@6 TInt h@@0)) )))
(assert (forall ((h@@1 T@U) (v@@7 T@U) ) (!  (=> (and (= (type h@@1) (MapType0Type refType MapType1Type)) (= (type v@@7) realType)) ($IsAlloc v@@7 TReal h@@1)) :qid |DafnyPre.203:14| :skolemid |8083| :pattern ( ($IsAlloc v@@7 TReal h@@1)) )))
(assert (forall ((h@@2 T@U) (v@@8 T@U) ) (!  (=> (and (= (type h@@2) (MapType0Type refType MapType1Type)) (= (type v@@8) boolType)) ($IsAlloc v@@8 TBool h@@2)) :qid |DafnyPre.204:14| :skolemid |8084| :pattern ( ($IsAlloc v@@8 TBool h@@2)) )))
(assert (forall ((h@@3 T@U) (v@@9 T@U) ) (!  (=> (and (= (type h@@3) (MapType0Type refType MapType1Type)) (= (type v@@9) charType)) ($IsAlloc v@@9 TChar h@@3)) :qid |DafnyPre.205:14| :skolemid |8085| :pattern ( ($IsAlloc v@@9 TChar h@@3)) )))
(assert (forall ((h@@4 T@U) (v@@10 T@U) ) (!  (=> (and (= (type h@@4) (MapType0Type refType MapType1Type)) (= (type v@@10) BoxType)) ($IsAlloc v@@10 TORDINAL h@@4)) :qid |DafnyPre.206:14| :skolemid |8086| :pattern ( ($IsAlloc v@@10 TORDINAL h@@4)) )))
(assert (forall ((v@@11 T@U) (t0 T@U) ) (!  (=> (and (= (type v@@11) (MapType0Type BoxType boolType)) (= (type t0) TyType)) (and (=> ($Is v@@11 (TSet t0)) (forall ((bx@@9 T@U) ) (!  (=> (and (= (type bx@@9) BoxType) (U_2_bool (MapType0Select v@@11 bx@@9))) ($IsBox bx@@9 t0)) :qid |DafnyPre.210:11| :skolemid |8087| :pattern ( (MapType0Select v@@11 bx@@9)) ))) (=> (forall ((bx@@10 T@U) ) (!  (=> (and (= (type bx@@10) BoxType) (U_2_bool (MapType0Select v@@11 bx@@10))) ($IsBox bx@@10 t0)) :qid |DafnyPre.210:11| :skolemid |8087| :pattern ( (MapType0Select v@@11 bx@@10)) )) ($Is v@@11 (TSet t0))))) :qid |DafnyPre.208:15| :skolemid |8088| :pattern ( ($Is v@@11 (TSet t0))) )))
(assert (forall ((v@@12 T@U) (t0@@0 T@U) ) (!  (=> (and (= (type v@@12) (MapType0Type BoxType boolType)) (= (type t0@@0) TyType)) (and (=> ($Is v@@12 (TISet t0@@0)) (forall ((bx@@11 T@U) ) (!  (=> (and (= (type bx@@11) BoxType) (U_2_bool (MapType0Select v@@12 bx@@11))) ($IsBox bx@@11 t0@@0)) :qid |DafnyPre.214:11| :skolemid |8089| :pattern ( (MapType0Select v@@12 bx@@11)) ))) (=> (forall ((bx@@12 T@U) ) (!  (=> (and (= (type bx@@12) BoxType) (U_2_bool (MapType0Select v@@12 bx@@12))) ($IsBox bx@@12 t0@@0)) :qid |DafnyPre.214:11| :skolemid |8089| :pattern ( (MapType0Select v@@12 bx@@12)) )) ($Is v@@12 (TISet t0@@0))))) :qid |DafnyPre.212:15| :skolemid |8090| :pattern ( ($Is v@@12 (TISet t0@@0))) )))
(assert (forall ((v@@13 T@U) (t0@@1 T@U) ) (!  (=> (and (= (type v@@13) (MapType0Type BoxType intType)) (= (type t0@@1) TyType)) (and (=> ($Is v@@13 (TMultiSet t0@@1)) (forall ((bx@@13 T@U) ) (!  (=> (and (= (type bx@@13) BoxType) (< 0 (U_2_int (MapType0Select v@@13 bx@@13)))) ($IsBox bx@@13 t0@@1)) :qid |DafnyPre.218:11| :skolemid |8091| :pattern ( (MapType0Select v@@13 bx@@13)) ))) (=> (forall ((bx@@14 T@U) ) (!  (=> (and (= (type bx@@14) BoxType) (< 0 (U_2_int (MapType0Select v@@13 bx@@14)))) ($IsBox bx@@14 t0@@1)) :qid |DafnyPre.218:11| :skolemid |8091| :pattern ( (MapType0Select v@@13 bx@@14)) )) ($Is v@@13 (TMultiSet t0@@1))))) :qid |DafnyPre.216:15| :skolemid |8092| :pattern ( ($Is v@@13 (TMultiSet t0@@1))) )))
(assert (forall ((v@@14 T@U) (t0@@2 T@U) ) (!  (=> (and (and (= (type v@@14) (MapType0Type BoxType intType)) (= (type t0@@2) TyType)) ($Is v@@14 (TMultiSet t0@@2))) ($IsGoodMultiSet v@@14)) :qid |DafnyPre.220:15| :skolemid |8093| :pattern ( ($Is v@@14 (TMultiSet t0@@2))) )))
(assert (forall ((arg0@@46 T@U) (arg1@@16 Int) ) (! (let ((T@@2 (SeqTypeInv0 (type arg0@@46)))) (= (type (|Seq#Index| arg0@@46 arg1@@16)) T@@2)) :qid |funType:Seq#Index| :pattern ( (|Seq#Index| arg0@@46 arg1@@16)) )))
(assert (forall ((v@@15 T@U) (t0@@3 T@U) ) (!  (=> (and (= (type v@@15) (SeqType BoxType)) (= (type t0@@3) TyType)) (and (=> ($Is v@@15 (TSeq t0@@3)) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@15))) ($IsBox (|Seq#Index| v@@15 i) t0@@3)) :qid |DafnyPre.224:11| :skolemid |8094| :pattern ( (|Seq#Index| v@@15 i)) ))) (=> (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@15))) ($IsBox (|Seq#Index| v@@15 i@@0) t0@@3)) :qid |DafnyPre.224:11| :skolemid |8094| :pattern ( (|Seq#Index| v@@15 i@@0)) )) ($Is v@@15 (TSeq t0@@3))))) :qid |DafnyPre.222:15| :skolemid |8095| :pattern ( ($Is v@@15 (TSeq t0@@3))) )))
(assert (forall ((v@@16 T@U) (t0@@4 T@U) (h@@5 T@U) ) (!  (=> (and (and (= (type v@@16) (MapType0Type BoxType boolType)) (= (type t0@@4) TyType)) (= (type h@@5) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@16 (TSet t0@@4) h@@5) (forall ((bx@@15 T@U) ) (!  (=> (and (= (type bx@@15) BoxType) (U_2_bool (MapType0Select v@@16 bx@@15))) ($IsAllocBox bx@@15 t0@@4 h@@5)) :qid |DafnyPre.229:11| :skolemid |8096| :pattern ( (MapType0Select v@@16 bx@@15)) ))) (=> (forall ((bx@@16 T@U) ) (!  (=> (and (= (type bx@@16) BoxType) (U_2_bool (MapType0Select v@@16 bx@@16))) ($IsAllocBox bx@@16 t0@@4 h@@5)) :qid |DafnyPre.229:11| :skolemid |8096| :pattern ( (MapType0Select v@@16 bx@@16)) )) ($IsAlloc v@@16 (TSet t0@@4) h@@5)))) :qid |DafnyPre.227:15| :skolemid |8097| :pattern ( ($IsAlloc v@@16 (TSet t0@@4) h@@5)) )))
(assert (forall ((v@@17 T@U) (t0@@5 T@U) (h@@6 T@U) ) (!  (=> (and (and (= (type v@@17) (MapType0Type BoxType boolType)) (= (type t0@@5) TyType)) (= (type h@@6) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@17 (TISet t0@@5) h@@6) (forall ((bx@@17 T@U) ) (!  (=> (and (= (type bx@@17) BoxType) (U_2_bool (MapType0Select v@@17 bx@@17))) ($IsAllocBox bx@@17 t0@@5 h@@6)) :qid |DafnyPre.233:11| :skolemid |8098| :pattern ( (MapType0Select v@@17 bx@@17)) ))) (=> (forall ((bx@@18 T@U) ) (!  (=> (and (= (type bx@@18) BoxType) (U_2_bool (MapType0Select v@@17 bx@@18))) ($IsAllocBox bx@@18 t0@@5 h@@6)) :qid |DafnyPre.233:11| :skolemid |8098| :pattern ( (MapType0Select v@@17 bx@@18)) )) ($IsAlloc v@@17 (TISet t0@@5) h@@6)))) :qid |DafnyPre.231:15| :skolemid |8099| :pattern ( ($IsAlloc v@@17 (TISet t0@@5) h@@6)) )))
(assert (forall ((v@@18 T@U) (t0@@6 T@U) (h@@7 T@U) ) (!  (=> (and (and (= (type v@@18) (MapType0Type BoxType intType)) (= (type t0@@6) TyType)) (= (type h@@7) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@18 (TMultiSet t0@@6) h@@7) (forall ((bx@@19 T@U) ) (!  (=> (and (= (type bx@@19) BoxType) (< 0 (U_2_int (MapType0Select v@@18 bx@@19)))) ($IsAllocBox bx@@19 t0@@6 h@@7)) :qid |DafnyPre.237:11| :skolemid |8100| :pattern ( (MapType0Select v@@18 bx@@19)) ))) (=> (forall ((bx@@20 T@U) ) (!  (=> (and (= (type bx@@20) BoxType) (< 0 (U_2_int (MapType0Select v@@18 bx@@20)))) ($IsAllocBox bx@@20 t0@@6 h@@7)) :qid |DafnyPre.237:11| :skolemid |8100| :pattern ( (MapType0Select v@@18 bx@@20)) )) ($IsAlloc v@@18 (TMultiSet t0@@6) h@@7)))) :qid |DafnyPre.235:15| :skolemid |8101| :pattern ( ($IsAlloc v@@18 (TMultiSet t0@@6) h@@7)) )))
(assert (forall ((v@@19 T@U) (t0@@7 T@U) (h@@8 T@U) ) (!  (=> (and (and (= (type v@@19) (SeqType BoxType)) (= (type t0@@7) TyType)) (= (type h@@8) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@19 (TSeq t0@@7) h@@8) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@19))) ($IsAllocBox (|Seq#Index| v@@19 i@@1) t0@@7 h@@8)) :qid |DafnyPre.241:11| :skolemid |8102| :pattern ( (|Seq#Index| v@@19 i@@1)) ))) (=> (forall ((i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| v@@19))) ($IsAllocBox (|Seq#Index| v@@19 i@@2) t0@@7 h@@8)) :qid |DafnyPre.241:11| :skolemid |8102| :pattern ( (|Seq#Index| v@@19 i@@2)) )) ($IsAlloc v@@19 (TSeq t0@@7) h@@8)))) :qid |DafnyPre.239:15| :skolemid |8103| :pattern ( ($IsAlloc v@@19 (TSeq t0@@7) h@@8)) )))
(assert  (and (forall ((arg0@@47 T@U) ) (! (let ((V (MapTypeInv1 (type arg0@@47)))) (let ((U (MapTypeInv0 (type arg0@@47)))) (= (type (|Map#Elements| arg0@@47)) (MapType0Type U V)))) :qid |funType:Map#Elements| :pattern ( (|Map#Elements| arg0@@47)) )) (forall ((arg0@@48 T@U) ) (! (let ((U@@0 (MapTypeInv0 (type arg0@@48)))) (= (type (|Map#Domain| arg0@@48)) (MapType0Type U@@0 boolType))) :qid |funType:Map#Domain| :pattern ( (|Map#Domain| arg0@@48)) ))))
(assert (forall ((v@@20 T@U) (t0@@8 T@U) (t1 T@U) ) (!  (=> (and (and (= (type v@@20) (MapType BoxType BoxType)) (= (type t0@@8) TyType)) (= (type t1) TyType)) (and (=> ($Is v@@20 (TMap t0@@8 t1)) (forall ((bx@@21 T@U) ) (!  (=> (and (= (type bx@@21) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@20) bx@@21))) (and ($IsBox (MapType0Select (|Map#Elements| v@@20) bx@@21) t1) ($IsBox bx@@21 t0@@8))) :qid |DafnyPre.248:19| :skolemid |8104| :pattern ( (MapType0Select (|Map#Elements| v@@20) bx@@21)) :pattern ( (MapType0Select (|Map#Domain| v@@20) bx@@21)) ))) (=> (forall ((bx@@22 T@U) ) (!  (=> (and (= (type bx@@22) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@20) bx@@22))) (and ($IsBox (MapType0Select (|Map#Elements| v@@20) bx@@22) t1) ($IsBox bx@@22 t0@@8))) :qid |DafnyPre.248:19| :skolemid |8104| :pattern ( (MapType0Select (|Map#Elements| v@@20) bx@@22)) :pattern ( (MapType0Select (|Map#Domain| v@@20) bx@@22)) )) ($Is v@@20 (TMap t0@@8 t1))))) :qid |DafnyPre.245:15| :skolemid |8105| :pattern ( ($Is v@@20 (TMap t0@@8 t1))) )))
(assert (forall ((v@@21 T@U) (t0@@9 T@U) (t1@@0 T@U) (h@@9 T@U) ) (!  (=> (and (and (and (= (type v@@21) (MapType BoxType BoxType)) (= (type t0@@9) TyType)) (= (type t1@@0) TyType)) (= (type h@@9) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@21 (TMap t0@@9 t1@@0) h@@9) (forall ((bx@@23 T@U) ) (!  (=> (and (= (type bx@@23) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@21) bx@@23))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@21) bx@@23) t1@@0 h@@9) ($IsAllocBox bx@@23 t0@@9 h@@9))) :qid |DafnyPre.256:19| :skolemid |8106| :pattern ( (MapType0Select (|Map#Elements| v@@21) bx@@23)) :pattern ( (MapType0Select (|Map#Domain| v@@21) bx@@23)) ))) (=> (forall ((bx@@24 T@U) ) (!  (=> (and (= (type bx@@24) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@21) bx@@24))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@21) bx@@24) t1@@0 h@@9) ($IsAllocBox bx@@24 t0@@9 h@@9))) :qid |DafnyPre.256:19| :skolemid |8106| :pattern ( (MapType0Select (|Map#Elements| v@@21) bx@@24)) :pattern ( (MapType0Select (|Map#Domain| v@@21) bx@@24)) )) ($IsAlloc v@@21 (TMap t0@@9 t1@@0) h@@9)))) :qid |DafnyPre.253:15| :skolemid |8107| :pattern ( ($IsAlloc v@@21 (TMap t0@@9 t1@@0) h@@9)) )))
(assert  (and (forall ((arg0@@49 T@U) ) (! (let ((V@@0 (IMapTypeInv1 (type arg0@@49)))) (let ((U@@1 (IMapTypeInv0 (type arg0@@49)))) (= (type (|IMap#Elements| arg0@@49)) (MapType0Type U@@1 V@@0)))) :qid |funType:IMap#Elements| :pattern ( (|IMap#Elements| arg0@@49)) )) (forall ((arg0@@50 T@U) ) (! (let ((U@@2 (IMapTypeInv0 (type arg0@@50)))) (= (type (|IMap#Domain| arg0@@50)) (MapType0Type U@@2 boolType))) :qid |funType:IMap#Domain| :pattern ( (|IMap#Domain| arg0@@50)) ))))
(assert (forall ((v@@22 T@U) (t0@@10 T@U) (t1@@1 T@U) ) (!  (=> (and (and (= (type v@@22) (IMapType BoxType BoxType)) (= (type t0@@10) TyType)) (= (type t1@@1) TyType)) (and (=> ($Is v@@22 (TIMap t0@@10 t1@@1)) (forall ((bx@@25 T@U) ) (!  (=> (and (= (type bx@@25) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@22) bx@@25))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@22) bx@@25) t1@@1) ($IsBox bx@@25 t0@@10))) :qid |DafnyPre.265:19| :skolemid |8108| :pattern ( (MapType0Select (|IMap#Elements| v@@22) bx@@25)) :pattern ( (MapType0Select (|IMap#Domain| v@@22) bx@@25)) ))) (=> (forall ((bx@@26 T@U) ) (!  (=> (and (= (type bx@@26) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@22) bx@@26))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@22) bx@@26) t1@@1) ($IsBox bx@@26 t0@@10))) :qid |DafnyPre.265:19| :skolemid |8108| :pattern ( (MapType0Select (|IMap#Elements| v@@22) bx@@26)) :pattern ( (MapType0Select (|IMap#Domain| v@@22) bx@@26)) )) ($Is v@@22 (TIMap t0@@10 t1@@1))))) :qid |DafnyPre.262:15| :skolemid |8109| :pattern ( ($Is v@@22 (TIMap t0@@10 t1@@1))) )))
(assert (forall ((v@@23 T@U) (t0@@11 T@U) (t1@@2 T@U) (h@@10 T@U) ) (!  (=> (and (and (and (= (type v@@23) (IMapType BoxType BoxType)) (= (type t0@@11) TyType)) (= (type t1@@2) TyType)) (= (type h@@10) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@23 (TIMap t0@@11 t1@@2) h@@10) (forall ((bx@@27 T@U) ) (!  (=> (and (= (type bx@@27) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@23) bx@@27))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@23) bx@@27) t1@@2 h@@10) ($IsAllocBox bx@@27 t0@@11 h@@10))) :qid |DafnyPre.273:19| :skolemid |8110| :pattern ( (MapType0Select (|IMap#Elements| v@@23) bx@@27)) :pattern ( (MapType0Select (|IMap#Domain| v@@23) bx@@27)) ))) (=> (forall ((bx@@28 T@U) ) (!  (=> (and (= (type bx@@28) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@23) bx@@28))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@23) bx@@28) t1@@2 h@@10) ($IsAllocBox bx@@28 t0@@11 h@@10))) :qid |DafnyPre.273:19| :skolemid |8110| :pattern ( (MapType0Select (|IMap#Elements| v@@23) bx@@28)) :pattern ( (MapType0Select (|IMap#Domain| v@@23) bx@@28)) )) ($IsAlloc v@@23 (TIMap t0@@11 t1@@2) h@@10)))) :qid |DafnyPre.270:15| :skolemid |8111| :pattern ( ($IsAlloc v@@23 (TIMap t0@@11 t1@@2) h@@10)) )))
(assert  (and (and (forall ((arg0@@51 T@U) (arg1@@17 T@U) ) (! (= (type (TypeTuple arg0@@51 arg1@@17)) ClassNameType) :qid |funType:TypeTuple| :pattern ( (TypeTuple arg0@@51 arg1@@17)) )) (forall ((arg0@@52 T@U) ) (! (= (type (TypeTupleCar arg0@@52)) ClassNameType) :qid |funType:TypeTupleCar| :pattern ( (TypeTupleCar arg0@@52)) ))) (forall ((arg0@@53 T@U) ) (! (= (type (TypeTupleCdr arg0@@53)) ClassNameType) :qid |funType:TypeTupleCdr| :pattern ( (TypeTupleCdr arg0@@53)) ))))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (and (= (type a@@1) ClassNameType) (= (type b@@1) ClassNameType)) (and (= (TypeTupleCar (TypeTuple a@@1 b@@1)) a@@1) (= (TypeTupleCdr (TypeTuple a@@1 b@@1)) b@@1))) :qid |DafnyPre.298:15| :skolemid |8112| :pattern ( (TypeTuple a@@1 b@@1)) )))
(assert (forall ((arg0@@54 T@U) ) (! (= (type (SetRef_to_SetBox arg0@@54)) (MapType0Type BoxType boolType)) :qid |funType:SetRef_to_SetBox| :pattern ( (SetRef_to_SetBox arg0@@54)) )))
(assert (forall ((s@@1 T@U) (bx@@29 T@U) ) (!  (=> (and (= (type s@@1) (MapType0Type refType boolType)) (= (type bx@@29) BoxType)) (and (=> (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@29)) (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@29)))) (=> (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@29))) (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@29))))) :qid |DafnyPre.307:15| :skolemid |8113| :pattern ( (MapType0Select (SetRef_to_SetBox s@@1) bx@@29)) )))
(assert (= (type Tclass._System.object?) TyType))
(assert (forall ((s@@2 T@U) ) (!  (=> (= (type s@@2) (MapType0Type refType boolType)) ($Is (SetRef_to_SetBox s@@2) (TSet Tclass._System.object?))) :qid |DafnyPre.309:15| :skolemid |8114| :pattern ( (SetRef_to_SetBox s@@2)) )))
(assert (= (Ctor DatatypeTypeType) 18))
(assert (forall ((d T@U) ) (!  (=> (= (type d) DatatypeTypeType) (= (BoxRank ($Box d)) (DtRank d))) :qid |DafnyPre.328:15| :skolemid |8115| :pattern ( (BoxRank ($Box d))) )))
(assert (forall ((o T@U) ) (!  (=> (= (type o) BoxType) (<= 0 (|ORD#Offset| o))) :qid |DafnyPre.343:15| :skolemid |8116| :pattern ( (|ORD#Offset| o)) )))
(assert (forall ((arg0@@55 Int) ) (! (= (type (|ORD#FromNat| arg0@@55)) BoxType) :qid |funType:ORD#FromNat| :pattern ( (|ORD#FromNat| arg0@@55)) )))
(assert (forall ((n@@0 Int) ) (!  (=> (<= 0 n@@0) (and (|ORD#IsNat| (|ORD#FromNat| n@@0)) (= (|ORD#Offset| (|ORD#FromNat| n@@0)) n@@0))) :qid |DafnyPre.349:15| :skolemid |8117| :pattern ( (|ORD#FromNat| n@@0)) )))
(assert (forall ((o@@0 T@U) ) (!  (=> (and (= (type o@@0) BoxType) (|ORD#IsNat| o@@0)) (= o@@0 (|ORD#FromNat| (|ORD#Offset| o@@0)))) :qid |DafnyPre.351:15| :skolemid |8118| :pattern ( (|ORD#Offset| o@@0)) :pattern ( (|ORD#IsNat| o@@0)) )))
(assert (forall ((o@@1 T@U) (p T@U) ) (!  (=> (and (= (type o@@1) BoxType) (= (type p) BoxType)) (and (and (and (=> (|ORD#Less| o@@1 p) (not (= o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (not (|ORD#IsNat| p))) (|ORD#Less| o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (|ORD#IsNat| p)) (and (=> (|ORD#Less| o@@1 p) (< (|ORD#Offset| o@@1) (|ORD#Offset| p))) (=> (< (|ORD#Offset| o@@1) (|ORD#Offset| p)) (|ORD#Less| o@@1 p))))) (=> (and (|ORD#Less| o@@1 p) (|ORD#IsNat| p)) (|ORD#IsNat| o@@1)))) :qid |DafnyPre.355:15| :skolemid |8119| :pattern ( (|ORD#Less| o@@1 p)) )))
(assert (forall ((o@@2 T@U) (p@@0 T@U) ) (!  (=> (and (= (type o@@2) BoxType) (= (type p@@0) BoxType)) (or (or (|ORD#Less| o@@2 p@@0) (= o@@2 p@@0)) (|ORD#Less| p@@0 o@@2))) :qid |DafnyPre.361:15| :skolemid |8120| :pattern ( (|ORD#Less| o@@2 p@@0) (|ORD#Less| p@@0 o@@2)) )))
(assert (forall ((o@@3 T@U) (p@@1 T@U) (r T@U) ) (!  (=> (and (and (and (= (type o@@3) BoxType) (= (type p@@1) BoxType)) (= (type r) BoxType)) (and (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r))) (|ORD#Less| o@@3 r)) :qid |DafnyPre.364:15| :skolemid |8121| :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r)) :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| o@@3 r)) )))
(assert (forall ((o@@4 T@U) (p@@2 T@U) ) (!  (=> (and (= (type o@@4) BoxType) (= (type p@@2) BoxType)) (and (=> (|ORD#LessThanLimit| o@@4 p@@2) (|ORD#Less| o@@4 p@@2)) (=> (|ORD#Less| o@@4 p@@2) (|ORD#LessThanLimit| o@@4 p@@2)))) :qid |DafnyPre.371:15| :skolemid |8122| :pattern ( (|ORD#LessThanLimit| o@@4 p@@2)) )))
(assert (forall ((arg0@@56 T@U) (arg1@@18 T@U) ) (! (= (type (|ORD#Plus| arg0@@56 arg1@@18)) BoxType) :qid |funType:ORD#Plus| :pattern ( (|ORD#Plus| arg0@@56 arg1@@18)) )))
(assert (forall ((o@@5 T@U) (p@@3 T@U) ) (!  (=> (and (= (type o@@5) BoxType) (= (type p@@3) BoxType)) (and (=> (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (and (|ORD#IsNat| o@@5) (|ORD#IsNat| p@@3))) (=> (|ORD#IsNat| p@@3) (and (and (=> (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (|ORD#IsNat| o@@5)) (=> (|ORD#IsNat| o@@5) (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)))) (= (|ORD#Offset| (|ORD#Plus| o@@5 p@@3)) (+ (|ORD#Offset| o@@5) (|ORD#Offset| p@@3))))))) :qid |DafnyPre.375:15| :skolemid |8123| :pattern ( (|ORD#Plus| o@@5 p@@3)) )))
(assert (forall ((o@@6 T@U) (p@@4 T@U) ) (!  (=> (and (= (type o@@6) BoxType) (= (type p@@4) BoxType)) (and (or (= o@@6 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| o@@6 (|ORD#Plus| o@@6 p@@4))) (or (= p@@4 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| p@@4 (|ORD#Plus| o@@6 p@@4))))) :qid |DafnyPre.380:15| :skolemid |8124| :pattern ( (|ORD#Plus| o@@6 p@@4)) )))
(assert (forall ((o@@7 T@U) (p@@5 T@U) ) (!  (=> (and (= (type o@@7) BoxType) (= (type p@@5) BoxType)) (and (=> (= o@@7 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) p@@5)) (=> (= p@@5 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) o@@7)))) :qid |DafnyPre.383:15| :skolemid |8125| :pattern ( (|ORD#Plus| o@@7 p@@5)) )))
(assert (forall ((arg0@@57 T@U) (arg1@@19 T@U) ) (! (= (type (|ORD#Minus| arg0@@57 arg1@@19)) BoxType) :qid |funType:ORD#Minus| :pattern ( (|ORD#Minus| arg0@@57 arg1@@19)) )))
(assert (forall ((o@@8 T@U) (p@@6 T@U) ) (!  (=> (and (and (= (type o@@8) BoxType) (= (type p@@6) BoxType)) (and (|ORD#IsNat| p@@6) (<= (|ORD#Offset| p@@6) (|ORD#Offset| o@@8)))) (and (and (=> (|ORD#IsNat| (|ORD#Minus| o@@8 p@@6)) (|ORD#IsNat| o@@8)) (=> (|ORD#IsNat| o@@8) (|ORD#IsNat| (|ORD#Minus| o@@8 p@@6)))) (= (|ORD#Offset| (|ORD#Minus| o@@8 p@@6)) (- (|ORD#Offset| o@@8) (|ORD#Offset| p@@6))))) :qid |DafnyPre.388:15| :skolemid |8126| :pattern ( (|ORD#Minus| o@@8 p@@6)) )))
(assert (forall ((o@@9 T@U) (p@@7 T@U) ) (!  (=> (and (and (= (type o@@9) BoxType) (= (type p@@7) BoxType)) (and (|ORD#IsNat| p@@7) (<= (|ORD#Offset| p@@7) (|ORD#Offset| o@@9)))) (or (and (= p@@7 (|ORD#FromNat| 0)) (= (|ORD#Minus| o@@9 p@@7) o@@9)) (and (not (= p@@7 (|ORD#FromNat| 0))) (|ORD#Less| (|ORD#Minus| o@@9 p@@7) o@@9)))) :qid |DafnyPre.392:15| :skolemid |8127| :pattern ( (|ORD#Minus| o@@9 p@@7)) )))
(assert (forall ((o@@10 T@U) (m@@5 Int) (n@@1 Int) ) (!  (=> (= (type o@@10) BoxType) (=> (and (<= 0 m@@5) (<= 0 n@@1)) (= (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1)) (|ORD#Plus| o@@10 (|ORD#FromNat| (+ m@@5 n@@1)))))) :qid |DafnyPre.398:15| :skolemid |8128| :pattern ( (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1))) )))
(assert (forall ((o@@11 T@U) (m@@6 Int) (n@@2 Int) ) (!  (=> (= (type o@@11) BoxType) (=> (and (and (<= 0 m@@6) (<= 0 n@@2)) (<= (+ m@@6 n@@2) (|ORD#Offset| o@@11))) (= (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2)) (|ORD#Minus| o@@11 (|ORD#FromNat| (+ m@@6 n@@2)))))) :qid |DafnyPre.403:15| :skolemid |8129| :pattern ( (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2))) )))
(assert (forall ((o@@12 T@U) (m@@7 Int) (n@@3 Int) ) (!  (=> (= (type o@@12) BoxType) (=> (and (and (<= 0 m@@7) (<= 0 n@@3)) (<= n@@3 (+ (|ORD#Offset| o@@12) m@@7))) (and (=> (<= 0 (- m@@7 n@@3)) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Plus| o@@12 (|ORD#FromNat| (- m@@7 n@@3))))) (=> (<= (- m@@7 n@@3) 0) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Minus| o@@12 (|ORD#FromNat| (- n@@3 m@@7)))))))) :qid |DafnyPre.408:15| :skolemid |8130| :pattern ( (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3))) )))
(assert (forall ((o@@13 T@U) (m@@8 Int) (n@@4 Int) ) (!  (=> (= (type o@@13) BoxType) (=> (and (and (<= 0 m@@8) (<= 0 n@@4)) (<= n@@4 (+ (|ORD#Offset| o@@13) m@@8))) (and (=> (<= 0 (- m@@8 n@@4)) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Minus| o@@13 (|ORD#FromNat| (- m@@8 n@@4))))) (=> (<= (- m@@8 n@@4) 0) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Plus| o@@13 (|ORD#FromNat| (- n@@4 m@@8)))))))) :qid |DafnyPre.414:15| :skolemid |8131| :pattern ( (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4))) )))
(assert  (and (= (Ctor LayerTypeType) 19) (forall ((arg0@@58 T@U) (arg1@@20 T@U) ) (! (let ((A (MapType0TypeInv1 (type arg0@@58)))) (= (type (AtLayer arg0@@58 arg1@@20)) A)) :qid |funType:AtLayer| :pattern ( (AtLayer arg0@@58 arg1@@20)) ))))
(assert (forall ((f T@U) (ly T@U) ) (! (let ((A@@0 (MapType0TypeInv1 (type f)))) (=> (and (= (type f) (MapType0Type LayerTypeType A@@0)) (= (type ly) LayerTypeType)) (= (AtLayer f ly) (MapType0Select f ly)))) :qid |DafnyPre.438:18| :skolemid |8132| :pattern ( (AtLayer f ly)) )))
(assert (forall ((arg0@@59 T@U) ) (! (= (type ($LS arg0@@59)) LayerTypeType) :qid |funType:$LS| :pattern ( ($LS arg0@@59)) )))
(assert (forall ((f@@0 T@U) (ly@@0 T@U) ) (! (let ((A@@1 (MapType0TypeInv1 (type f@@0)))) (=> (and (= (type f@@0) (MapType0Type LayerTypeType A@@1)) (= (type ly@@0) LayerTypeType)) (= (AtLayer f@@0 ($LS ly@@0)) (AtLayer f@@0 ly@@0)))) :qid |DafnyPre.439:18| :skolemid |8133| :pattern ( (AtLayer f@@0 ($LS ly@@0))) )))
(assert (forall ((arg0@@60 Int) ) (! (= (type (IndexField arg0@@60)) (FieldType BoxType)) :qid |funType:IndexField| :pattern ( (IndexField arg0@@60)) )))
(assert (forall ((i@@3 Int) ) (! (= (FDim (IndexField i@@3)) 1) :qid |DafnyPre.450:15| :skolemid |8134| :pattern ( (IndexField i@@3)) )))
(assert (forall ((i@@4 Int) ) (! (= (IndexField_Inverse (IndexField i@@4)) i@@4) :qid |DafnyPre.452:15| :skolemid |8135| :pattern ( (IndexField i@@4)) )))
(assert (forall ((arg0@@61 T@U) (arg1@@21 Int) ) (! (= (type (MultiIndexField arg0@@61 arg1@@21)) (FieldType BoxType)) :qid |funType:MultiIndexField| :pattern ( (MultiIndexField arg0@@61 arg1@@21)) )))
(assert (forall ((f@@1 T@U) (i@@5 Int) ) (!  (=> (= (type f@@1) (FieldType BoxType)) (= (FDim (MultiIndexField f@@1 i@@5)) (+ (FDim f@@1) 1))) :qid |DafnyPre.455:15| :skolemid |8136| :pattern ( (MultiIndexField f@@1 i@@5)) )))
(assert (forall ((arg0@@62 T@U) ) (! (let ((T@@3 (FieldTypeInv0 (type arg0@@62)))) (= (type (MultiIndexField_Inverse0 arg0@@62)) (FieldType T@@3))) :qid |funType:MultiIndexField_Inverse0| :pattern ( (MultiIndexField_Inverse0 arg0@@62)) )))
(assert (forall ((f@@2 T@U) (i@@6 Int) ) (!  (=> (= (type f@@2) (FieldType BoxType)) (and (= (MultiIndexField_Inverse0 (MultiIndexField f@@2 i@@6)) f@@2) (= (MultiIndexField_Inverse1 (MultiIndexField f@@2 i@@6)) i@@6))) :qid |DafnyPre.458:15| :skolemid |8137| :pattern ( (MultiIndexField f@@2 i@@6)) )))
(assert  (and (and (forall ((alpha@@3 T@T) (arg0@@63 T@U) (arg1@@22 T@U) ) (! (= (type (FieldOfDecl alpha@@3 arg0@@63 arg1@@22)) (FieldType alpha@@3)) :qid |funType:FieldOfDecl| :pattern ( (FieldOfDecl alpha@@3 arg0@@63 arg1@@22)) )) (forall ((arg0@@64 T@U) ) (! (= (type (DeclType arg0@@64)) ClassNameType) :qid |funType:DeclType| :pattern ( (DeclType arg0@@64)) ))) (forall ((arg0@@65 T@U) ) (! (= (type (DeclName arg0@@65)) NameFamilyType) :qid |funType:DeclName| :pattern ( (DeclName arg0@@65)) ))))
(assert (forall ((cl T@U) (nm T@U) (T@@4 T@T) ) (!  (=> (and (= (type cl) ClassNameType) (= (type nm) NameFamilyType)) (and (= (DeclType (FieldOfDecl T@@4 cl nm)) cl) (= (DeclName (FieldOfDecl T@@4 cl nm)) nm))) :qid |DafnyPre.467:18| :skolemid |8138| :pattern ( (FieldOfDecl T@@4 cl nm)) )))
(assert (forall ((h@@11 T@U) (k T@U) (v@@24 T@U) (t@@21 T@U) ) (!  (=> (and (and (and (and (= (type h@@11) (MapType0Type refType MapType1Type)) (= (type k) (MapType0Type refType MapType1Type))) (= (type t@@21) TyType)) ($HeapSucc h@@11 k)) ($IsAlloc v@@24 t@@21 h@@11)) ($IsAlloc v@@24 t@@21 k)) :qid |DafnyPre.480:17| :skolemid |8139| :pattern ( ($HeapSucc h@@11 k) ($IsAlloc v@@24 t@@21 h@@11)) )))
(assert (forall ((h@@12 T@U) (k@@0 T@U) (bx@@30 T@U) (t@@22 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@12) (MapType0Type refType MapType1Type)) (= (type k@@0) (MapType0Type refType MapType1Type))) (= (type bx@@30) BoxType)) (= (type t@@22) TyType)) ($HeapSucc h@@12 k@@0)) ($IsAllocBox bx@@30 t@@22 h@@12)) ($IsAllocBox bx@@30 t@@22 k@@0)) :qid |DafnyPre.483:14| :skolemid |8140| :pattern ( ($HeapSucc h@@12 k@@0) ($IsAllocBox bx@@30 t@@22 h@@12)) )))
(assert (= (FDim alloc) 0))
(assert (= (DeclName alloc) allocName))
(assert  (not ($IsGhostField alloc)))
(assert (forall ((o@@14 T@U) ) (!  (=> (= (type o@@14) refType) (<= 0 (_System.array.Length o@@14))) :qid |DafnyPre.500:15| :skolemid |8141| :no-pattern (type o@@14) :no-pattern (U_2_int o@@14) :no-pattern (U_2_bool o@@14) )))
(assert (forall ((x@@13 Real) ) (! (= (q@Int x@@13) (to_int x@@13)) :qid |DafnyPre.506:14| :skolemid |8142| :pattern ( (q@Int x@@13)) )))
(assert (forall ((x@@14 Int) ) (! (= (q@Real x@@14) (to_real x@@14)) :qid |DafnyPre.507:15| :skolemid |8143| :pattern ( (q@Real x@@14)) )))
(assert (forall ((i@@7 Int) ) (! (= (q@Int (q@Real i@@7)) i@@7) :qid |DafnyPre.508:15| :skolemid |8144| :pattern ( (q@Int (q@Real i@@7))) )))
(assert (= (type $OneHeap) (MapType0Type refType MapType1Type)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((h@@13 T@U) (r@@0 T@U) (f@@3 T@U) (x@@15 T@U) ) (! (let ((alpha@@4 (type x@@15))) (=> (and (and (and (= (type h@@13) (MapType0Type refType MapType1Type)) (= (type r@@0) refType)) (= (type f@@3) (FieldType alpha@@4))) ($IsGoodHeap (MapType0Store h@@13 r@@0 (MapType1Store (MapType0Select h@@13 r@@0) f@@3 x@@15)))) ($HeapSucc h@@13 (MapType0Store h@@13 r@@0 (MapType1Store (MapType0Select h@@13 r@@0) f@@3 x@@15))))) :qid |DafnyPre.530:22| :skolemid |8145| :pattern ( (MapType0Store h@@13 r@@0 (MapType1Store (MapType0Select h@@13 r@@0) f@@3 x@@15))) )))
(assert (forall ((a@@2 T@U) (b@@2 T@U) (c T@U) ) (!  (=> (and (and (and (and (= (type a@@2) (MapType0Type refType MapType1Type)) (= (type b@@2) (MapType0Type refType MapType1Type))) (= (type c) (MapType0Type refType MapType1Type))) (not (= a@@2 c))) (and ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c))) ($HeapSucc a@@2 c)) :qid |DafnyPre.533:15| :skolemid |8146| :pattern ( ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c)) )))
(assert (forall ((h@@14 T@U) (k@@1 T@U) ) (!  (=> (and (and (= (type h@@14) (MapType0Type refType MapType1Type)) (= (type k@@1) (MapType0Type refType MapType1Type))) ($HeapSucc h@@14 k@@1)) (forall ((o@@15 T@U) ) (!  (=> (and (= (type o@@15) refType) (U_2_bool (MapType1Select (MapType0Select h@@14 o@@15) alloc))) (U_2_bool (MapType1Select (MapType0Select k@@1 o@@15) alloc))) :qid |DafnyPre.536:30| :skolemid |8147| :pattern ( (MapType1Select (MapType0Select k@@1 o@@15) alloc)) ))) :qid |DafnyPre.535:15| :skolemid |8148| :pattern ( ($HeapSucc h@@14 k@@1)) )))
(assert (forall ((h@@15 T@U) (k@@2 T@U) ) (!  (=> (and (and (= (type h@@15) (MapType0Type refType MapType1Type)) (= (type k@@2) (MapType0Type refType MapType1Type))) ($HeapSuccGhost h@@15 k@@2)) (and ($HeapSucc h@@15 k@@2) (forall ((o@@16 T@U) (f@@4 T@U) ) (! (let ((alpha@@5 (FieldTypeInv0 (type f@@4)))) (=> (and (and (= (type o@@16) refType) (= (type f@@4) (FieldType alpha@@5))) (not ($IsGhostField f@@4))) (= (MapType1Select (MapType0Select h@@15 o@@16) f@@4) (MapType1Select (MapType0Select k@@2 o@@16) f@@4)))) :qid |DafnyPre.542:20| :skolemid |8149| :pattern ( (MapType1Select (MapType0Select k@@2 o@@16) f@@4)) )))) :qid |DafnyPre.539:15| :skolemid |8150| :pattern ( ($HeapSuccGhost h@@15 k@@2)) )))
(assert (forall ((s@@3 T@U) ) (! (let ((T@@5 (MapType0TypeInv0 (type s@@3)))) (=> (= (type s@@3) (MapType0Type T@@5 boolType)) (<= 0 (|Set#Card| s@@3)))) :qid |DafnyPre.600:18| :skolemid |8155| :pattern ( (|Set#Card| s@@3)) )))
(assert (forall ((T@@6 T@T) ) (! (= (type (|Set#Empty| T@@6)) (MapType0Type T@@6 boolType)) :qid |funType:Set#Empty| :pattern ( (|Set#Empty| T@@6)) )))
(assert (forall ((o@@17 T@U) ) (! (let ((T@@7 (type o@@17))) (not (U_2_bool (MapType0Select (|Set#Empty| T@@7) o@@17)))) :qid |DafnyPre.603:18| :skolemid |8156| :pattern ( (let ((T@@7 (type o@@17))) (MapType0Select (|Set#Empty| T@@7) o@@17))) )))
(assert (forall ((s@@4 T@U) ) (! (let ((T@@8 (MapType0TypeInv0 (type s@@4)))) (=> (= (type s@@4) (MapType0Type T@@8 boolType)) (and (and (=> (= (|Set#Card| s@@4) 0) (= s@@4 (|Set#Empty| T@@8))) (=> (= s@@4 (|Set#Empty| T@@8)) (= (|Set#Card| s@@4) 0))) (=> (not (= (|Set#Card| s@@4) 0)) (exists ((x@@16 T@U) ) (!  (and (= (type x@@16) T@@8) (U_2_bool (MapType0Select s@@4 x@@16))) :qid |DafnyPre.606:33| :skolemid |8157| :no-pattern (type x@@16) :no-pattern (U_2_int x@@16) :no-pattern (U_2_bool x@@16) )))))) :qid |DafnyPre.604:18| :skolemid |8158| :pattern ( (|Set#Card| s@@4)) )))
(assert (forall ((arg0@@66 T@U) ) (! (let ((T@@9 (type arg0@@66))) (= (type (|Set#Singleton| arg0@@66)) (MapType0Type T@@9 boolType))) :qid |funType:Set#Singleton| :pattern ( (|Set#Singleton| arg0@@66)) )))
(assert (forall ((r@@1 T@U) ) (! (U_2_bool (MapType0Select (|Set#Singleton| r@@1) r@@1)) :qid |DafnyPre.612:18| :skolemid |8159| :pattern ( (|Set#Singleton| r@@1)) )))
(assert (forall ((r@@2 T@U) (o@@18 T@U) ) (! (let ((T@@10 (type r@@2))) (=> (= (type o@@18) T@@10) (and (=> (U_2_bool (MapType0Select (|Set#Singleton| r@@2) o@@18)) (= r@@2 o@@18)) (=> (= r@@2 o@@18) (U_2_bool (MapType0Select (|Set#Singleton| r@@2) o@@18)))))) :qid |DafnyPre.613:18| :skolemid |8160| :pattern ( (MapType0Select (|Set#Singleton| r@@2) o@@18)) )))
(assert (forall ((r@@3 T@U) ) (! (= (|Set#Card| (|Set#Singleton| r@@3)) 1) :qid |DafnyPre.614:18| :skolemid |8161| :pattern ( (|Set#Card| (|Set#Singleton| r@@3))) )))
(assert (forall ((arg0@@67 T@U) (arg1@@23 T@U) ) (! (let ((T@@11 (type arg1@@23))) (= (type (|Set#UnionOne| arg0@@67 arg1@@23)) (MapType0Type T@@11 boolType))) :qid |funType:Set#UnionOne| :pattern ( (|Set#UnionOne| arg0@@67 arg1@@23)) )))
(assert (forall ((a@@3 T@U) (x@@17 T@U) (o@@19 T@U) ) (! (let ((T@@12 (type x@@17))) (=> (and (= (type a@@3) (MapType0Type T@@12 boolType)) (= (type o@@19) T@@12)) (and (=> (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@17) o@@19)) (or (= o@@19 x@@17) (U_2_bool (MapType0Select a@@3 o@@19)))) (=> (or (= o@@19 x@@17) (U_2_bool (MapType0Select a@@3 o@@19))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@17) o@@19)))))) :qid |DafnyPre.617:18| :skolemid |8162| :pattern ( (MapType0Select (|Set#UnionOne| a@@3 x@@17) o@@19)) )))
(assert (forall ((a@@4 T@U) (x@@18 T@U) ) (! (let ((T@@13 (type x@@18))) (=> (= (type a@@4) (MapType0Type T@@13 boolType)) (U_2_bool (MapType0Select (|Set#UnionOne| a@@4 x@@18) x@@18)))) :qid |DafnyPre.619:18| :skolemid |8163| :pattern ( (|Set#UnionOne| a@@4 x@@18)) )))
(assert (forall ((a@@5 T@U) (x@@19 T@U) (y@@1 T@U) ) (! (let ((T@@14 (type x@@19))) (=> (and (and (= (type a@@5) (MapType0Type T@@14 boolType)) (= (type y@@1) T@@14)) (U_2_bool (MapType0Select a@@5 y@@1))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@5 x@@19) y@@1)))) :qid |DafnyPre.621:18| :skolemid |8164| :pattern ( (|Set#UnionOne| a@@5 x@@19) (MapType0Select a@@5 y@@1)) )))
(assert (forall ((a@@6 T@U) (x@@20 T@U) ) (! (let ((T@@15 (type x@@20))) (=> (and (= (type a@@6) (MapType0Type T@@15 boolType)) (U_2_bool (MapType0Select a@@6 x@@20))) (= (|Set#Card| (|Set#UnionOne| a@@6 x@@20)) (|Set#Card| a@@6)))) :qid |DafnyPre.623:18| :skolemid |8165| :pattern ( (|Set#Card| (|Set#UnionOne| a@@6 x@@20))) )))
(assert (forall ((a@@7 T@U) (x@@21 T@U) ) (! (let ((T@@16 (type x@@21))) (=> (and (= (type a@@7) (MapType0Type T@@16 boolType)) (not (U_2_bool (MapType0Select a@@7 x@@21)))) (= (|Set#Card| (|Set#UnionOne| a@@7 x@@21)) (+ (|Set#Card| a@@7) 1)))) :qid |DafnyPre.625:18| :skolemid |8166| :pattern ( (|Set#Card| (|Set#UnionOne| a@@7 x@@21))) )))
(assert (forall ((arg0@@68 T@U) (arg1@@24 T@U) ) (! (let ((T@@17 (MapType0TypeInv0 (type arg0@@68)))) (= (type (|Set#Union| arg0@@68 arg1@@24)) (MapType0Type T@@17 boolType))) :qid |funType:Set#Union| :pattern ( (|Set#Union| arg0@@68 arg1@@24)) )))
(assert (forall ((a@@8 T@U) (b@@3 T@U) (o@@20 T@U) ) (! (let ((T@@18 (type o@@20))) (=> (and (= (type a@@8) (MapType0Type T@@18 boolType)) (= (type b@@3) (MapType0Type T@@18 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)) (or (U_2_bool (MapType0Select a@@8 o@@20)) (U_2_bool (MapType0Select b@@3 o@@20)))) (=> (or (U_2_bool (MapType0Select a@@8 o@@20)) (U_2_bool (MapType0Select b@@3 o@@20))) (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)))))) :qid |DafnyPre.629:18| :skolemid |8167| :pattern ( (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)) )))
(assert (forall ((a@@9 T@U) (b@@4 T@U) (y@@2 T@U) ) (! (let ((T@@19 (type y@@2))) (=> (and (and (= (type a@@9) (MapType0Type T@@19 boolType)) (= (type b@@4) (MapType0Type T@@19 boolType))) (U_2_bool (MapType0Select a@@9 y@@2))) (U_2_bool (MapType0Select (|Set#Union| a@@9 b@@4) y@@2)))) :qid |DafnyPre.631:18| :skolemid |8168| :pattern ( (|Set#Union| a@@9 b@@4) (MapType0Select a@@9 y@@2)) )))
(assert (forall ((a@@10 T@U) (b@@5 T@U) (y@@3 T@U) ) (! (let ((T@@20 (type y@@3))) (=> (and (and (= (type a@@10) (MapType0Type T@@20 boolType)) (= (type b@@5) (MapType0Type T@@20 boolType))) (U_2_bool (MapType0Select b@@5 y@@3))) (U_2_bool (MapType0Select (|Set#Union| a@@10 b@@5) y@@3)))) :qid |DafnyPre.633:18| :skolemid |8169| :pattern ( (|Set#Union| a@@10 b@@5) (MapType0Select b@@5 y@@3)) )))
(assert (forall ((arg0@@69 T@U) (arg1@@25 T@U) ) (! (let ((T@@21 (MapType0TypeInv0 (type arg0@@69)))) (= (type (|Set#Difference| arg0@@69 arg1@@25)) (MapType0Type T@@21 boolType))) :qid |funType:Set#Difference| :pattern ( (|Set#Difference| arg0@@69 arg1@@25)) )))
(assert (forall ((a@@11 T@U) (b@@6 T@U) ) (! (let ((T@@22 (MapType0TypeInv0 (type a@@11)))) (=> (and (and (= (type a@@11) (MapType0Type T@@22 boolType)) (= (type b@@6) (MapType0Type T@@22 boolType))) (|Set#Disjoint| a@@11 b@@6)) (and (= (|Set#Difference| (|Set#Union| a@@11 b@@6) a@@11) b@@6) (= (|Set#Difference| (|Set#Union| a@@11 b@@6) b@@6) a@@11)))) :qid |DafnyPre.635:18| :skolemid |8170| :pattern ( (|Set#Union| a@@11 b@@6)) )))
(assert (forall ((arg0@@70 T@U) (arg1@@26 T@U) ) (! (let ((T@@23 (MapType0TypeInv0 (type arg0@@70)))) (= (type (|Set#Intersection| arg0@@70 arg1@@26)) (MapType0Type T@@23 boolType))) :qid |funType:Set#Intersection| :pattern ( (|Set#Intersection| arg0@@70 arg1@@26)) )))
(assert (forall ((a@@12 T@U) (b@@7 T@U) (o@@21 T@U) ) (! (let ((T@@24 (type o@@21))) (=> (and (= (type a@@12) (MapType0Type T@@24 boolType)) (= (type b@@7) (MapType0Type T@@24 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)) (and (U_2_bool (MapType0Select a@@12 o@@21)) (U_2_bool (MapType0Select b@@7 o@@21)))) (=> (and (U_2_bool (MapType0Select a@@12 o@@21)) (U_2_bool (MapType0Select b@@7 o@@21))) (U_2_bool (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)))))) :qid |DafnyPre.645:18| :skolemid |8171| :pattern ( (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)) )))
(assert (forall ((a@@13 T@U) (b@@8 T@U) ) (! (let ((T@@25 (MapType0TypeInv0 (type a@@13)))) (=> (and (= (type a@@13) (MapType0Type T@@25 boolType)) (= (type b@@8) (MapType0Type T@@25 boolType))) (= (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8) (|Set#Union| a@@13 b@@8)))) :qid |DafnyPre.648:18| :skolemid |8172| :pattern ( (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8)) )))
(assert (forall ((a@@14 T@U) (b@@9 T@U) ) (! (let ((T@@26 (MapType0TypeInv0 (type a@@14)))) (=> (and (= (type a@@14) (MapType0Type T@@26 boolType)) (= (type b@@9) (MapType0Type T@@26 boolType))) (= (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9)) (|Set#Union| a@@14 b@@9)))) :qid |DafnyPre.650:18| :skolemid |8173| :pattern ( (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9))) )))
(assert (forall ((a@@15 T@U) (b@@10 T@U) ) (! (let ((T@@27 (MapType0TypeInv0 (type a@@15)))) (=> (and (= (type a@@15) (MapType0Type T@@27 boolType)) (= (type b@@10) (MapType0Type T@@27 boolType))) (= (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10) (|Set#Intersection| a@@15 b@@10)))) :qid |DafnyPre.652:18| :skolemid |8174| :pattern ( (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10)) )))
(assert (forall ((a@@16 T@U) (b@@11 T@U) ) (! (let ((T@@28 (MapType0TypeInv0 (type a@@16)))) (=> (and (= (type a@@16) (MapType0Type T@@28 boolType)) (= (type b@@11) (MapType0Type T@@28 boolType))) (= (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11)) (|Set#Intersection| a@@16 b@@11)))) :qid |DafnyPre.654:18| :skolemid |8175| :pattern ( (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11))) )))
(assert (forall ((a@@17 T@U) (b@@12 T@U) ) (! (let ((T@@29 (MapType0TypeInv0 (type a@@17)))) (=> (and (= (type a@@17) (MapType0Type T@@29 boolType)) (= (type b@@12) (MapType0Type T@@29 boolType))) (= (+ (|Set#Card| (|Set#Union| a@@17 b@@12)) (|Set#Card| (|Set#Intersection| a@@17 b@@12))) (+ (|Set#Card| a@@17) (|Set#Card| b@@12))))) :qid |DafnyPre.656:18| :skolemid |8176| :pattern ( (|Set#Card| (|Set#Union| a@@17 b@@12))) :pattern ( (|Set#Card| (|Set#Intersection| a@@17 b@@12))) )))
(assert (forall ((a@@18 T@U) (b@@13 T@U) (o@@22 T@U) ) (! (let ((T@@30 (type o@@22))) (=> (and (= (type a@@18) (MapType0Type T@@30 boolType)) (= (type b@@13) (MapType0Type T@@30 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)) (and (U_2_bool (MapType0Select a@@18 o@@22)) (not (U_2_bool (MapType0Select b@@13 o@@22))))) (=> (and (U_2_bool (MapType0Select a@@18 o@@22)) (not (U_2_bool (MapType0Select b@@13 o@@22)))) (U_2_bool (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)))))) :qid |DafnyPre.660:18| :skolemid |8177| :pattern ( (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)) )))
(assert (forall ((a@@19 T@U) (b@@14 T@U) (y@@4 T@U) ) (! (let ((T@@31 (type y@@4))) (=> (and (and (= (type a@@19) (MapType0Type T@@31 boolType)) (= (type b@@14) (MapType0Type T@@31 boolType))) (U_2_bool (MapType0Select b@@14 y@@4))) (not (U_2_bool (MapType0Select (|Set#Difference| a@@19 b@@14) y@@4))))) :qid |DafnyPre.662:18| :skolemid |8178| :pattern ( (|Set#Difference| a@@19 b@@14) (MapType0Select b@@14 y@@4)) )))
(assert (forall ((a@@20 T@U) (b@@15 T@U) ) (! (let ((T@@32 (MapType0TypeInv0 (type a@@20)))) (=> (and (= (type a@@20) (MapType0Type T@@32 boolType)) (= (type b@@15) (MapType0Type T@@32 boolType))) (and (= (+ (+ (|Set#Card| (|Set#Difference| a@@20 b@@15)) (|Set#Card| (|Set#Difference| b@@15 a@@20))) (|Set#Card| (|Set#Intersection| a@@20 b@@15))) (|Set#Card| (|Set#Union| a@@20 b@@15))) (= (|Set#Card| (|Set#Difference| a@@20 b@@15)) (- (|Set#Card| a@@20) (|Set#Card| (|Set#Intersection| a@@20 b@@15))))))) :qid |DafnyPre.664:18| :skolemid |8179| :pattern ( (|Set#Card| (|Set#Difference| a@@20 b@@15))) )))
(assert (forall ((a@@21 T@U) (b@@16 T@U) ) (! (let ((T@@33 (MapType0TypeInv0 (type a@@21)))) (=> (and (= (type a@@21) (MapType0Type T@@33 boolType)) (= (type b@@16) (MapType0Type T@@33 boolType))) (and (=> (|Set#Subset| a@@21 b@@16) (forall ((o@@23 T@U) ) (!  (=> (and (= (type o@@23) T@@33) (U_2_bool (MapType0Select a@@21 o@@23))) (U_2_bool (MapType0Select b@@16 o@@23))) :qid |DafnyPre.673:32| :skolemid |8180| :pattern ( (MapType0Select a@@21 o@@23)) :pattern ( (MapType0Select b@@16 o@@23)) ))) (=> (forall ((o@@24 T@U) ) (!  (=> (and (= (type o@@24) T@@33) (U_2_bool (MapType0Select a@@21 o@@24))) (U_2_bool (MapType0Select b@@16 o@@24))) :qid |DafnyPre.673:32| :skolemid |8180| :pattern ( (MapType0Select a@@21 o@@24)) :pattern ( (MapType0Select b@@16 o@@24)) )) (|Set#Subset| a@@21 b@@16))))) :qid |DafnyPre.672:17| :skolemid |8181| :pattern ( (|Set#Subset| a@@21 b@@16)) )))
(assert (forall ((a@@22 T@U) (b@@17 T@U) ) (! (let ((T@@34 (MapType0TypeInv0 (type a@@22)))) (=> (and (= (type a@@22) (MapType0Type T@@34 boolType)) (= (type b@@17) (MapType0Type T@@34 boolType))) (and (=> (|Set#Equal| a@@22 b@@17) (forall ((o@@25 T@U) ) (!  (=> (= (type o@@25) T@@34) (and (=> (U_2_bool (MapType0Select a@@22 o@@25)) (U_2_bool (MapType0Select b@@17 o@@25))) (=> (U_2_bool (MapType0Select b@@17 o@@25)) (U_2_bool (MapType0Select a@@22 o@@25))))) :qid |DafnyPre.681:31| :skolemid |8182| :pattern ( (MapType0Select a@@22 o@@25)) :pattern ( (MapType0Select b@@17 o@@25)) ))) (=> (forall ((o@@26 T@U) ) (!  (=> (= (type o@@26) T@@34) (and (=> (U_2_bool (MapType0Select a@@22 o@@26)) (U_2_bool (MapType0Select b@@17 o@@26))) (=> (U_2_bool (MapType0Select b@@17 o@@26)) (U_2_bool (MapType0Select a@@22 o@@26))))) :qid |DafnyPre.681:31| :skolemid |8182| :pattern ( (MapType0Select a@@22 o@@26)) :pattern ( (MapType0Select b@@17 o@@26)) )) (|Set#Equal| a@@22 b@@17))))) :qid |DafnyPre.680:17| :skolemid |8183| :pattern ( (|Set#Equal| a@@22 b@@17)) )))
(assert (forall ((a@@23 T@U) (b@@18 T@U) ) (! (let ((T@@35 (MapType0TypeInv0 (type a@@23)))) (=> (and (and (= (type a@@23) (MapType0Type T@@35 boolType)) (= (type b@@18) (MapType0Type T@@35 boolType))) (|Set#Equal| a@@23 b@@18)) (= a@@23 b@@18))) :qid |DafnyPre.682:17| :skolemid |8184| :pattern ( (|Set#Equal| a@@23 b@@18)) )))
(assert (forall ((a@@24 T@U) (b@@19 T@U) ) (! (let ((T@@36 (MapType0TypeInv0 (type a@@24)))) (=> (and (= (type a@@24) (MapType0Type T@@36 boolType)) (= (type b@@19) (MapType0Type T@@36 boolType))) (and (=> (|Set#Disjoint| a@@24 b@@19) (forall ((o@@27 T@U) ) (!  (=> (= (type o@@27) T@@36) (or (not (U_2_bool (MapType0Select a@@24 o@@27))) (not (U_2_bool (MapType0Select b@@19 o@@27))))) :qid |DafnyPre.687:34| :skolemid |8185| :pattern ( (MapType0Select a@@24 o@@27)) :pattern ( (MapType0Select b@@19 o@@27)) ))) (=> (forall ((o@@28 T@U) ) (!  (=> (= (type o@@28) T@@36) (or (not (U_2_bool (MapType0Select a@@24 o@@28))) (not (U_2_bool (MapType0Select b@@19 o@@28))))) :qid |DafnyPre.687:34| :skolemid |8185| :pattern ( (MapType0Select a@@24 o@@28)) :pattern ( (MapType0Select b@@19 o@@28)) )) (|Set#Disjoint| a@@24 b@@19))))) :qid |DafnyPre.686:18| :skolemid |8186| :pattern ( (|Set#Disjoint| a@@24 b@@19)) )))
(assert (forall ((T@@37 T@T) ) (! (= (type (|ISet#Empty| T@@37)) (MapType0Type T@@37 boolType)) :qid |funType:ISet#Empty| :pattern ( (|ISet#Empty| T@@37)) )))
(assert (forall ((o@@29 T@U) ) (! (let ((T@@38 (type o@@29))) (not (U_2_bool (MapType0Select (|ISet#Empty| T@@38) o@@29)))) :qid |DafnyPre.696:18| :skolemid |8187| :pattern ( (let ((T@@38 (type o@@29))) (MapType0Select (|ISet#Empty| T@@38) o@@29))) )))
(assert (forall ((arg0@@71 T@U) (arg1@@27 T@U) ) (! (let ((T@@39 (type arg1@@27))) (= (type (|ISet#UnionOne| arg0@@71 arg1@@27)) (MapType0Type T@@39 boolType))) :qid |funType:ISet#UnionOne| :pattern ( (|ISet#UnionOne| arg0@@71 arg1@@27)) )))
(assert (forall ((a@@25 T@U) (x@@22 T@U) (o@@30 T@U) ) (! (let ((T@@40 (type x@@22))) (=> (and (= (type a@@25) (MapType0Type T@@40 boolType)) (= (type o@@30) T@@40)) (and (=> (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@22) o@@30)) (or (= o@@30 x@@22) (U_2_bool (MapType0Select a@@25 o@@30)))) (=> (or (= o@@30 x@@22) (U_2_bool (MapType0Select a@@25 o@@30))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@22) o@@30)))))) :qid |DafnyPre.703:18| :skolemid |8188| :pattern ( (MapType0Select (|ISet#UnionOne| a@@25 x@@22) o@@30)) )))
(assert (forall ((a@@26 T@U) (x@@23 T@U) ) (! (let ((T@@41 (type x@@23))) (=> (= (type a@@26) (MapType0Type T@@41 boolType)) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@26 x@@23) x@@23)))) :qid |DafnyPre.705:18| :skolemid |8189| :pattern ( (|ISet#UnionOne| a@@26 x@@23)) )))
(assert (forall ((a@@27 T@U) (x@@24 T@U) (y@@5 T@U) ) (! (let ((T@@42 (type x@@24))) (=> (and (and (= (type a@@27) (MapType0Type T@@42 boolType)) (= (type y@@5) T@@42)) (U_2_bool (MapType0Select a@@27 y@@5))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@27 x@@24) y@@5)))) :qid |DafnyPre.707:18| :skolemid |8190| :pattern ( (|ISet#UnionOne| a@@27 x@@24) (MapType0Select a@@27 y@@5)) )))
(assert (forall ((arg0@@72 T@U) (arg1@@28 T@U) ) (! (let ((T@@43 (MapType0TypeInv0 (type arg0@@72)))) (= (type (|ISet#Union| arg0@@72 arg1@@28)) (MapType0Type T@@43 boolType))) :qid |funType:ISet#Union| :pattern ( (|ISet#Union| arg0@@72 arg1@@28)) )))
(assert (forall ((a@@28 T@U) (b@@20 T@U) (o@@31 T@U) ) (! (let ((T@@44 (type o@@31))) (=> (and (= (type a@@28) (MapType0Type T@@44 boolType)) (= (type b@@20) (MapType0Type T@@44 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) o@@31)) (or (U_2_bool (MapType0Select a@@28 o@@31)) (U_2_bool (MapType0Select b@@20 o@@31)))) (=> (or (U_2_bool (MapType0Select a@@28 o@@31)) (U_2_bool (MapType0Select b@@20 o@@31))) (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) o@@31)))))) :qid |DafnyPre.711:18| :skolemid |8191| :pattern ( (MapType0Select (|ISet#Union| a@@28 b@@20) o@@31)) )))
(assert (forall ((a@@29 T@U) (b@@21 T@U) (y@@6 T@U) ) (! (let ((T@@45 (type y@@6))) (=> (and (and (= (type a@@29) (MapType0Type T@@45 boolType)) (= (type b@@21) (MapType0Type T@@45 boolType))) (U_2_bool (MapType0Select a@@29 y@@6))) (U_2_bool (MapType0Select (|ISet#Union| a@@29 b@@21) y@@6)))) :qid |DafnyPre.713:18| :skolemid |8192| :pattern ( (|ISet#Union| a@@29 b@@21) (MapType0Select a@@29 y@@6)) )))
(assert (forall ((a@@30 T@U) (b@@22 T@U) (y@@7 T@U) ) (! (let ((T@@46 (type y@@7))) (=> (and (and (= (type a@@30) (MapType0Type T@@46 boolType)) (= (type b@@22) (MapType0Type T@@46 boolType))) (U_2_bool (MapType0Select b@@22 y@@7))) (U_2_bool (MapType0Select (|ISet#Union| a@@30 b@@22) y@@7)))) :qid |DafnyPre.715:18| :skolemid |8193| :pattern ( (|ISet#Union| a@@30 b@@22) (MapType0Select b@@22 y@@7)) )))
(assert (forall ((arg0@@73 T@U) (arg1@@29 T@U) ) (! (let ((T@@47 (MapType0TypeInv0 (type arg0@@73)))) (= (type (|ISet#Difference| arg0@@73 arg1@@29)) (MapType0Type T@@47 boolType))) :qid |funType:ISet#Difference| :pattern ( (|ISet#Difference| arg0@@73 arg1@@29)) )))
(assert (forall ((a@@31 T@U) (b@@23 T@U) ) (! (let ((T@@48 (MapType0TypeInv0 (type a@@31)))) (=> (and (and (= (type a@@31) (MapType0Type T@@48 boolType)) (= (type b@@23) (MapType0Type T@@48 boolType))) (|ISet#Disjoint| a@@31 b@@23)) (and (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) a@@31) b@@23) (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) b@@23) a@@31)))) :qid |DafnyPre.717:18| :skolemid |8194| :pattern ( (|ISet#Union| a@@31 b@@23)) )))
(assert (forall ((arg0@@74 T@U) (arg1@@30 T@U) ) (! (let ((T@@49 (MapType0TypeInv0 (type arg0@@74)))) (= (type (|ISet#Intersection| arg0@@74 arg1@@30)) (MapType0Type T@@49 boolType))) :qid |funType:ISet#Intersection| :pattern ( (|ISet#Intersection| arg0@@74 arg1@@30)) )))
(assert (forall ((a@@32 T@U) (b@@24 T@U) (o@@32 T@U) ) (! (let ((T@@50 (type o@@32))) (=> (and (= (type a@@32) (MapType0Type T@@50 boolType)) (= (type b@@24) (MapType0Type T@@50 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@32)) (and (U_2_bool (MapType0Select a@@32 o@@32)) (U_2_bool (MapType0Select b@@24 o@@32)))) (=> (and (U_2_bool (MapType0Select a@@32 o@@32)) (U_2_bool (MapType0Select b@@24 o@@32))) (U_2_bool (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@32)))))) :qid |DafnyPre.727:18| :skolemid |8195| :pattern ( (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@32)) )))
(assert (forall ((a@@33 T@U) (b@@25 T@U) ) (! (let ((T@@51 (MapType0TypeInv0 (type a@@33)))) (=> (and (= (type a@@33) (MapType0Type T@@51 boolType)) (= (type b@@25) (MapType0Type T@@51 boolType))) (= (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25) (|ISet#Union| a@@33 b@@25)))) :qid |DafnyPre.730:18| :skolemid |8196| :pattern ( (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25)) )))
(assert (forall ((a@@34 T@U) (b@@26 T@U) ) (! (let ((T@@52 (MapType0TypeInv0 (type a@@34)))) (=> (and (= (type a@@34) (MapType0Type T@@52 boolType)) (= (type b@@26) (MapType0Type T@@52 boolType))) (= (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26)) (|ISet#Union| a@@34 b@@26)))) :qid |DafnyPre.732:18| :skolemid |8197| :pattern ( (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26))) )))
(assert (forall ((a@@35 T@U) (b@@27 T@U) ) (! (let ((T@@53 (MapType0TypeInv0 (type a@@35)))) (=> (and (= (type a@@35) (MapType0Type T@@53 boolType)) (= (type b@@27) (MapType0Type T@@53 boolType))) (= (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27) (|ISet#Intersection| a@@35 b@@27)))) :qid |DafnyPre.734:18| :skolemid |8198| :pattern ( (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27)) )))
(assert (forall ((a@@36 T@U) (b@@28 T@U) ) (! (let ((T@@54 (MapType0TypeInv0 (type a@@36)))) (=> (and (= (type a@@36) (MapType0Type T@@54 boolType)) (= (type b@@28) (MapType0Type T@@54 boolType))) (= (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28)) (|ISet#Intersection| a@@36 b@@28)))) :qid |DafnyPre.736:18| :skolemid |8199| :pattern ( (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28))) )))
(assert (forall ((a@@37 T@U) (b@@29 T@U) (o@@33 T@U) ) (! (let ((T@@55 (type o@@33))) (=> (and (= (type a@@37) (MapType0Type T@@55 boolType)) (= (type b@@29) (MapType0Type T@@55 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@33)) (and (U_2_bool (MapType0Select a@@37 o@@33)) (not (U_2_bool (MapType0Select b@@29 o@@33))))) (=> (and (U_2_bool (MapType0Select a@@37 o@@33)) (not (U_2_bool (MapType0Select b@@29 o@@33)))) (U_2_bool (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@33)))))) :qid |DafnyPre.741:18| :skolemid |8200| :pattern ( (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@33)) )))
(assert (forall ((a@@38 T@U) (b@@30 T@U) (y@@8 T@U) ) (! (let ((T@@56 (type y@@8))) (=> (and (and (= (type a@@38) (MapType0Type T@@56 boolType)) (= (type b@@30) (MapType0Type T@@56 boolType))) (U_2_bool (MapType0Select b@@30 y@@8))) (not (U_2_bool (MapType0Select (|ISet#Difference| a@@38 b@@30) y@@8))))) :qid |DafnyPre.743:18| :skolemid |8201| :pattern ( (|ISet#Difference| a@@38 b@@30) (MapType0Select b@@30 y@@8)) )))
(assert (forall ((a@@39 T@U) (b@@31 T@U) ) (! (let ((T@@57 (MapType0TypeInv0 (type a@@39)))) (=> (and (= (type a@@39) (MapType0Type T@@57 boolType)) (= (type b@@31) (MapType0Type T@@57 boolType))) (and (=> (|ISet#Subset| a@@39 b@@31) (forall ((o@@34 T@U) ) (!  (=> (and (= (type o@@34) T@@57) (U_2_bool (MapType0Select a@@39 o@@34))) (U_2_bool (MapType0Select b@@31 o@@34))) :qid |DafnyPre.748:33| :skolemid |8202| :pattern ( (MapType0Select a@@39 o@@34)) :pattern ( (MapType0Select b@@31 o@@34)) ))) (=> (forall ((o@@35 T@U) ) (!  (=> (and (= (type o@@35) T@@57) (U_2_bool (MapType0Select a@@39 o@@35))) (U_2_bool (MapType0Select b@@31 o@@35))) :qid |DafnyPre.748:33| :skolemid |8202| :pattern ( (MapType0Select a@@39 o@@35)) :pattern ( (MapType0Select b@@31 o@@35)) )) (|ISet#Subset| a@@39 b@@31))))) :qid |DafnyPre.747:17| :skolemid |8203| :pattern ( (|ISet#Subset| a@@39 b@@31)) )))
(assert (forall ((a@@40 T@U) (b@@32 T@U) ) (! (let ((T@@58 (MapType0TypeInv0 (type a@@40)))) (=> (and (= (type a@@40) (MapType0Type T@@58 boolType)) (= (type b@@32) (MapType0Type T@@58 boolType))) (and (=> (|ISet#Equal| a@@40 b@@32) (forall ((o@@36 T@U) ) (!  (=> (= (type o@@36) T@@58) (and (=> (U_2_bool (MapType0Select a@@40 o@@36)) (U_2_bool (MapType0Select b@@32 o@@36))) (=> (U_2_bool (MapType0Select b@@32 o@@36)) (U_2_bool (MapType0Select a@@40 o@@36))))) :qid |DafnyPre.756:32| :skolemid |8204| :pattern ( (MapType0Select a@@40 o@@36)) :pattern ( (MapType0Select b@@32 o@@36)) ))) (=> (forall ((o@@37 T@U) ) (!  (=> (= (type o@@37) T@@58) (and (=> (U_2_bool (MapType0Select a@@40 o@@37)) (U_2_bool (MapType0Select b@@32 o@@37))) (=> (U_2_bool (MapType0Select b@@32 o@@37)) (U_2_bool (MapType0Select a@@40 o@@37))))) :qid |DafnyPre.756:32| :skolemid |8204| :pattern ( (MapType0Select a@@40 o@@37)) :pattern ( (MapType0Select b@@32 o@@37)) )) (|ISet#Equal| a@@40 b@@32))))) :qid |DafnyPre.755:17| :skolemid |8205| :pattern ( (|ISet#Equal| a@@40 b@@32)) )))
(assert (forall ((a@@41 T@U) (b@@33 T@U) ) (! (let ((T@@59 (MapType0TypeInv0 (type a@@41)))) (=> (and (and (= (type a@@41) (MapType0Type T@@59 boolType)) (= (type b@@33) (MapType0Type T@@59 boolType))) (|ISet#Equal| a@@41 b@@33)) (= a@@41 b@@33))) :qid |DafnyPre.757:17| :skolemid |8206| :pattern ( (|ISet#Equal| a@@41 b@@33)) )))
(assert (forall ((a@@42 T@U) (b@@34 T@U) ) (! (let ((T@@60 (MapType0TypeInv0 (type a@@42)))) (=> (and (= (type a@@42) (MapType0Type T@@60 boolType)) (= (type b@@34) (MapType0Type T@@60 boolType))) (and (=> (|ISet#Disjoint| a@@42 b@@34) (forall ((o@@38 T@U) ) (!  (=> (= (type o@@38) T@@60) (or (not (U_2_bool (MapType0Select a@@42 o@@38))) (not (U_2_bool (MapType0Select b@@34 o@@38))))) :qid |DafnyPre.762:35| :skolemid |8207| :pattern ( (MapType0Select a@@42 o@@38)) :pattern ( (MapType0Select b@@34 o@@38)) ))) (=> (forall ((o@@39 T@U) ) (!  (=> (= (type o@@39) T@@60) (or (not (U_2_bool (MapType0Select a@@42 o@@39))) (not (U_2_bool (MapType0Select b@@34 o@@39))))) :qid |DafnyPre.762:35| :skolemid |8207| :pattern ( (MapType0Select a@@42 o@@39)) :pattern ( (MapType0Select b@@34 o@@39)) )) (|ISet#Disjoint| a@@42 b@@34))))) :qid |DafnyPre.761:18| :skolemid |8208| :pattern ( (|ISet#Disjoint| a@@42 b@@34)) )))
(assert (forall ((a@@43 Int) (b@@35 Int) ) (!  (and (=> (<= a@@43 b@@35) (= (|Math#min| a@@43 b@@35) a@@43)) (=> (= (|Math#min| a@@43 b@@35) a@@43) (<= a@@43 b@@35))) :qid |DafnyPre.769:15| :skolemid |8209| :pattern ( (|Math#min| a@@43 b@@35)) )))
(assert (forall ((a@@44 Int) (b@@36 Int) ) (!  (and (=> (<= b@@36 a@@44) (= (|Math#min| a@@44 b@@36) b@@36)) (=> (= (|Math#min| a@@44 b@@36) b@@36) (<= b@@36 a@@44))) :qid |DafnyPre.770:15| :skolemid |8210| :pattern ( (|Math#min| a@@44 b@@36)) )))
(assert (forall ((a@@45 Int) (b@@37 Int) ) (!  (or (= (|Math#min| a@@45 b@@37) a@@45) (= (|Math#min| a@@45 b@@37) b@@37)) :qid |DafnyPre.771:15| :skolemid |8211| :pattern ( (|Math#min| a@@45 b@@37)) )))
(assert (forall ((a@@46 Int) ) (!  (=> (<= 0 a@@46) (= (|Math#clip| a@@46) a@@46)) :qid |DafnyPre.774:15| :skolemid |8212| :pattern ( (|Math#clip| a@@46)) )))
(assert (forall ((a@@47 Int) ) (!  (=> (< a@@47 0) (= (|Math#clip| a@@47) 0)) :qid |DafnyPre.775:15| :skolemid |8213| :pattern ( (|Math#clip| a@@47)) )))
(assert (forall ((ms T@U) ) (! (let ((T@@61 (MapType0TypeInv0 (type ms)))) (=> (= (type ms) (MapType0Type T@@61 intType)) (and (=> ($IsGoodMultiSet ms) (forall ((bx@@31 T@U) ) (!  (=> (= (type bx@@31) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@31))) (<= (U_2_int (MapType0Select ms bx@@31)) (|MultiSet#Card| ms)))) :qid |DafnyPre.783:11| :skolemid |8214| :pattern ( (MapType0Select ms bx@@31)) ))) (=> (forall ((bx@@32 T@U) ) (!  (=> (= (type bx@@32) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@32))) (<= (U_2_int (MapType0Select ms bx@@32)) (|MultiSet#Card| ms)))) :qid |DafnyPre.783:11| :skolemid |8214| :pattern ( (MapType0Select ms bx@@32)) )) ($IsGoodMultiSet ms))))) :qid |DafnyPre.781:18| :skolemid |8215| :pattern ( ($IsGoodMultiSet ms)) )))
(assert (forall ((s@@5 T@U) ) (! (let ((T@@62 (MapType0TypeInv0 (type s@@5)))) (=> (= (type s@@5) (MapType0Type T@@62 intType)) (<= 0 (|MultiSet#Card| s@@5)))) :qid |DafnyPre.786:18| :skolemid |8216| :pattern ( (|MultiSet#Card| s@@5)) )))
(assert (forall ((s@@6 T@U) (x@@25 T@U) (n@@5 T@U) ) (! (let ((T@@63 (type x@@25))) (=> (and (and (= (type s@@6) (MapType0Type T@@63 intType)) (= (type n@@5) intType)) (<= 0 (U_2_int n@@5))) (= (|MultiSet#Card| (MapType0Store s@@6 x@@25 n@@5)) (+ (- (|MultiSet#Card| s@@6) (U_2_int (MapType0Select s@@6 x@@25))) (U_2_int n@@5))))) :qid |DafnyPre.787:18| :skolemid |8217| :pattern ( (|MultiSet#Card| (MapType0Store s@@6 x@@25 n@@5))) )))
(assert (forall ((T@@64 T@T) ) (! (= (type (|MultiSet#Empty| T@@64)) (MapType0Type T@@64 intType)) :qid |funType:MultiSet#Empty| :pattern ( (|MultiSet#Empty| T@@64)) )))
(assert (forall ((o@@40 T@U) ) (! (let ((T@@65 (type o@@40))) (= (U_2_int (MapType0Select (|MultiSet#Empty| T@@65) o@@40)) 0)) :qid |DafnyPre.791:18| :skolemid |8218| :pattern ( (let ((T@@65 (type o@@40))) (MapType0Select (|MultiSet#Empty| T@@65) o@@40))) )))
(assert (forall ((s@@7 T@U) ) (! (let ((T@@66 (MapType0TypeInv0 (type s@@7)))) (=> (= (type s@@7) (MapType0Type T@@66 intType)) (and (and (=> (= (|MultiSet#Card| s@@7) 0) (= s@@7 (|MultiSet#Empty| T@@66))) (=> (= s@@7 (|MultiSet#Empty| T@@66)) (= (|MultiSet#Card| s@@7) 0))) (=> (not (= (|MultiSet#Card| s@@7) 0)) (exists ((x@@26 T@U) ) (!  (and (= (type x@@26) T@@66) (< 0 (U_2_int (MapType0Select s@@7 x@@26)))) :qid |DafnyPre.794:38| :skolemid |8219| :no-pattern (type x@@26) :no-pattern (U_2_int x@@26) :no-pattern (U_2_bool x@@26) )))))) :qid |DafnyPre.792:18| :skolemid |8220| :pattern ( (|MultiSet#Card| s@@7)) )))
(assert (forall ((arg0@@75 T@U) ) (! (let ((T@@67 (type arg0@@75))) (= (type (|MultiSet#Singleton| arg0@@75)) (MapType0Type T@@67 intType))) :qid |funType:MultiSet#Singleton| :pattern ( (|MultiSet#Singleton| arg0@@75)) )))
(assert (forall ((r@@4 T@U) (o@@41 T@U) ) (! (let ((T@@68 (type r@@4))) (=> (= (type o@@41) T@@68) (and (and (=> (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 1) (= r@@4 o@@41)) (=> (= r@@4 o@@41) (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 1))) (and (=> (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 0) (not (= r@@4 o@@41))) (=> (not (= r@@4 o@@41)) (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 0)))))) :qid |DafnyPre.797:18| :skolemid |8221| :pattern ( (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) )))
(assert (forall ((arg0@@76 T@U) (arg1@@31 T@U) ) (! (let ((T@@69 (type arg1@@31))) (= (type (|MultiSet#UnionOne| arg0@@76 arg1@@31)) (MapType0Type T@@69 intType))) :qid |funType:MultiSet#UnionOne| :pattern ( (|MultiSet#UnionOne| arg0@@76 arg1@@31)) )))
(assert (forall ((r@@5 T@U) ) (! (let ((T@@70 (type r@@5))) (= (|MultiSet#Singleton| r@@5) (|MultiSet#UnionOne| (|MultiSet#Empty| T@@70) r@@5))) :qid |DafnyPre.799:18| :skolemid |8222| :pattern ( (|MultiSet#Singleton| r@@5)) )))
(assert (forall ((a@@48 T@U) (x@@27 T@U) (o@@42 T@U) ) (! (let ((T@@71 (type x@@27))) (=> (and (= (type a@@48) (MapType0Type T@@71 intType)) (= (type o@@42) T@@71)) (and (=> (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@27) o@@42))) (or (= o@@42 x@@27) (< 0 (U_2_int (MapType0Select a@@48 o@@42))))) (=> (or (= o@@42 x@@27) (< 0 (U_2_int (MapType0Select a@@48 o@@42)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@27) o@@42))))))) :qid |DafnyPre.803:18| :skolemid |8223| :pattern ( (MapType0Select (|MultiSet#UnionOne| a@@48 x@@27) o@@42)) )))
(assert (forall ((a@@49 T@U) (x@@28 T@U) ) (! (let ((T@@72 (type x@@28))) (=> (= (type a@@49) (MapType0Type T@@72 intType)) (= (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@49 x@@28) x@@28)) (+ (U_2_int (MapType0Select a@@49 x@@28)) 1)))) :qid |DafnyPre.806:18| :skolemid |8224| :pattern ( (|MultiSet#UnionOne| a@@49 x@@28)) )))
(assert (forall ((a@@50 T@U) (x@@29 T@U) (y@@9 T@U) ) (! (let ((T@@73 (type x@@29))) (=> (and (and (= (type a@@50) (MapType0Type T@@73 intType)) (= (type y@@9) T@@73)) (< 0 (U_2_int (MapType0Select a@@50 y@@9)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@50 x@@29) y@@9))))) :qid |DafnyPre.809:18| :skolemid |8225| :pattern ( (|MultiSet#UnionOne| a@@50 x@@29) (MapType0Select a@@50 y@@9)) )))
(assert (forall ((a@@51 T@U) (x@@30 T@U) (y@@10 T@U) ) (! (let ((T@@74 (type x@@30))) (=> (and (and (= (type a@@51) (MapType0Type T@@74 intType)) (= (type y@@10) T@@74)) (not (= x@@30 y@@10))) (= (U_2_int (MapType0Select a@@51 y@@10)) (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@51 x@@30) y@@10))))) :qid |DafnyPre.812:18| :skolemid |8226| :pattern ( (|MultiSet#UnionOne| a@@51 x@@30) (MapType0Select a@@51 y@@10)) )))
(assert (forall ((a@@52 T@U) (x@@31 T@U) ) (! (let ((T@@75 (type x@@31))) (=> (= (type a@@52) (MapType0Type T@@75 intType)) (= (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@31)) (+ (|MultiSet#Card| a@@52) 1)))) :qid |DafnyPre.814:18| :skolemid |8227| :pattern ( (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@31))) )))
(assert (forall ((arg0@@77 T@U) (arg1@@32 T@U) ) (! (let ((T@@76 (MapType0TypeInv0 (type arg0@@77)))) (= (type (|MultiSet#Union| arg0@@77 arg1@@32)) (MapType0Type T@@76 intType))) :qid |funType:MultiSet#Union| :pattern ( (|MultiSet#Union| arg0@@77 arg1@@32)) )))
(assert (forall ((a@@53 T@U) (b@@38 T@U) (o@@43 T@U) ) (! (let ((T@@77 (type o@@43))) (=> (and (= (type a@@53) (MapType0Type T@@77 intType)) (= (type b@@38) (MapType0Type T@@77 intType))) (= (U_2_int (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@43)) (+ (U_2_int (MapType0Select a@@53 o@@43)) (U_2_int (MapType0Select b@@38 o@@43)))))) :qid |DafnyPre.820:18| :skolemid |8228| :pattern ( (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@43)) )))
(assert (forall ((a@@54 T@U) (b@@39 T@U) ) (! (let ((T@@78 (MapType0TypeInv0 (type a@@54)))) (=> (and (= (type a@@54) (MapType0Type T@@78 intType)) (= (type b@@39) (MapType0Type T@@78 intType))) (= (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39)) (+ (|MultiSet#Card| a@@54) (|MultiSet#Card| b@@39))))) :qid |DafnyPre.822:18| :skolemid |8229| :pattern ( (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39))) )))
(assert (forall ((arg0@@78 T@U) (arg1@@33 T@U) ) (! (let ((T@@79 (MapType0TypeInv0 (type arg0@@78)))) (= (type (|MultiSet#Intersection| arg0@@78 arg1@@33)) (MapType0Type T@@79 intType))) :qid |funType:MultiSet#Intersection| :pattern ( (|MultiSet#Intersection| arg0@@78 arg1@@33)) )))
(assert (forall ((a@@55 T@U) (b@@40 T@U) (o@@44 T@U) ) (! (let ((T@@80 (type o@@44))) (=> (and (= (type a@@55) (MapType0Type T@@80 intType)) (= (type b@@40) (MapType0Type T@@80 intType))) (= (U_2_int (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@44)) (|Math#min| (U_2_int (MapType0Select a@@55 o@@44)) (U_2_int (MapType0Select b@@40 o@@44)))))) :qid |DafnyPre.826:18| :skolemid |8230| :pattern ( (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@44)) )))
(assert (forall ((a@@56 T@U) (b@@41 T@U) ) (! (let ((T@@81 (MapType0TypeInv0 (type a@@56)))) (=> (and (= (type a@@56) (MapType0Type T@@81 intType)) (= (type b@@41) (MapType0Type T@@81 intType))) (= (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41) (|MultiSet#Intersection| a@@56 b@@41)))) :qid |DafnyPre.830:18| :skolemid |8231| :pattern ( (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41)) )))
(assert (forall ((a@@57 T@U) (b@@42 T@U) ) (! (let ((T@@82 (MapType0TypeInv0 (type a@@57)))) (=> (and (= (type a@@57) (MapType0Type T@@82 intType)) (= (type b@@42) (MapType0Type T@@82 intType))) (= (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42)) (|MultiSet#Intersection| a@@57 b@@42)))) :qid |DafnyPre.832:18| :skolemid |8232| :pattern ( (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42))) )))
(assert (forall ((arg0@@79 T@U) (arg1@@34 T@U) ) (! (let ((T@@83 (MapType0TypeInv0 (type arg0@@79)))) (= (type (|MultiSet#Difference| arg0@@79 arg1@@34)) (MapType0Type T@@83 intType))) :qid |funType:MultiSet#Difference| :pattern ( (|MultiSet#Difference| arg0@@79 arg1@@34)) )))
(assert (forall ((a@@58 T@U) (b@@43 T@U) (o@@45 T@U) ) (! (let ((T@@84 (type o@@45))) (=> (and (= (type a@@58) (MapType0Type T@@84 intType)) (= (type b@@43) (MapType0Type T@@84 intType))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@45)) (|Math#clip| (- (U_2_int (MapType0Select a@@58 o@@45)) (U_2_int (MapType0Select b@@43 o@@45))))))) :qid |DafnyPre.837:18| :skolemid |8233| :pattern ( (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@45)) )))
(assert (forall ((a@@59 T@U) (b@@44 T@U) (y@@11 T@U) ) (! (let ((T@@85 (type y@@11))) (=> (and (and (= (type a@@59) (MapType0Type T@@85 intType)) (= (type b@@44) (MapType0Type T@@85 intType))) (<= (U_2_int (MapType0Select a@@59 y@@11)) (U_2_int (MapType0Select b@@44 y@@11)))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@59 b@@44) y@@11)) 0))) :qid |DafnyPre.839:18| :skolemid |8234| :pattern ( (|MultiSet#Difference| a@@59 b@@44) (MapType0Select b@@44 y@@11) (MapType0Select a@@59 y@@11)) )))
(assert (forall ((a@@60 T@U) (b@@45 T@U) ) (! (let ((T@@86 (MapType0TypeInv0 (type a@@60)))) (=> (and (= (type a@@60) (MapType0Type T@@86 intType)) (= (type b@@45) (MapType0Type T@@86 intType))) (and (= (+ (+ (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (|MultiSet#Card| (|MultiSet#Difference| b@@45 a@@60))) (* 2 (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45)))) (|MultiSet#Card| (|MultiSet#Union| a@@60 b@@45))) (= (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (- (|MultiSet#Card| a@@60) (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45))))))) :qid |DafnyPre.841:18| :skolemid |8235| :pattern ( (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45))) )))
(assert (forall ((a@@61 T@U) (b@@46 T@U) ) (! (let ((T@@87 (MapType0TypeInv0 (type a@@61)))) (=> (and (= (type a@@61) (MapType0Type T@@87 intType)) (= (type b@@46) (MapType0Type T@@87 intType))) (and (=> (|MultiSet#Subset| a@@61 b@@46) (forall ((o@@46 T@U) ) (!  (=> (= (type o@@46) T@@87) (<= (U_2_int (MapType0Select a@@61 o@@46)) (U_2_int (MapType0Select b@@46 o@@46)))) :qid |DafnyPre.851:37| :skolemid |8236| :pattern ( (MapType0Select a@@61 o@@46)) :pattern ( (MapType0Select b@@46 o@@46)) ))) (=> (forall ((o@@47 T@U) ) (!  (=> (= (type o@@47) T@@87) (<= (U_2_int (MapType0Select a@@61 o@@47)) (U_2_int (MapType0Select b@@46 o@@47)))) :qid |DafnyPre.851:37| :skolemid |8236| :pattern ( (MapType0Select a@@61 o@@47)) :pattern ( (MapType0Select b@@46 o@@47)) )) (|MultiSet#Subset| a@@61 b@@46))))) :qid |DafnyPre.850:17| :skolemid |8237| :pattern ( (|MultiSet#Subset| a@@61 b@@46)) )))
(assert (forall ((a@@62 T@U) (b@@47 T@U) ) (! (let ((T@@88 (MapType0TypeInv0 (type a@@62)))) (=> (and (= (type a@@62) (MapType0Type T@@88 intType)) (= (type b@@47) (MapType0Type T@@88 intType))) (and (=> (|MultiSet#Equal| a@@62 b@@47) (forall ((o@@48 T@U) ) (!  (=> (= (type o@@48) T@@88) (= (U_2_int (MapType0Select a@@62 o@@48)) (U_2_int (MapType0Select b@@47 o@@48)))) :qid |DafnyPre.855:36| :skolemid |8238| :pattern ( (MapType0Select a@@62 o@@48)) :pattern ( (MapType0Select b@@47 o@@48)) ))) (=> (forall ((o@@49 T@U) ) (!  (=> (= (type o@@49) T@@88) (= (U_2_int (MapType0Select a@@62 o@@49)) (U_2_int (MapType0Select b@@47 o@@49)))) :qid |DafnyPre.855:36| :skolemid |8238| :pattern ( (MapType0Select a@@62 o@@49)) :pattern ( (MapType0Select b@@47 o@@49)) )) (|MultiSet#Equal| a@@62 b@@47))))) :qid |DafnyPre.854:17| :skolemid |8239| :pattern ( (|MultiSet#Equal| a@@62 b@@47)) )))
(assert (forall ((a@@63 T@U) (b@@48 T@U) ) (! (let ((T@@89 (MapType0TypeInv0 (type a@@63)))) (=> (and (and (= (type a@@63) (MapType0Type T@@89 intType)) (= (type b@@48) (MapType0Type T@@89 intType))) (|MultiSet#Equal| a@@63 b@@48)) (= a@@63 b@@48))) :qid |DafnyPre.857:17| :skolemid |8240| :pattern ( (|MultiSet#Equal| a@@63 b@@48)) )))
(assert (forall ((a@@64 T@U) (b@@49 T@U) ) (! (let ((T@@90 (MapType0TypeInv0 (type a@@64)))) (=> (and (= (type a@@64) (MapType0Type T@@90 intType)) (= (type b@@49) (MapType0Type T@@90 intType))) (and (=> (|MultiSet#Disjoint| a@@64 b@@49) (forall ((o@@50 T@U) ) (!  (=> (= (type o@@50) T@@90) (or (= (U_2_int (MapType0Select a@@64 o@@50)) 0) (= (U_2_int (MapType0Select b@@49 o@@50)) 0))) :qid |DafnyPre.862:39| :skolemid |8241| :pattern ( (MapType0Select a@@64 o@@50)) :pattern ( (MapType0Select b@@49 o@@50)) ))) (=> (forall ((o@@51 T@U) ) (!  (=> (= (type o@@51) T@@90) (or (= (U_2_int (MapType0Select a@@64 o@@51)) 0) (= (U_2_int (MapType0Select b@@49 o@@51)) 0))) :qid |DafnyPre.862:39| :skolemid |8241| :pattern ( (MapType0Select a@@64 o@@51)) :pattern ( (MapType0Select b@@49 o@@51)) )) (|MultiSet#Disjoint| a@@64 b@@49))))) :qid |DafnyPre.861:18| :skolemid |8242| :pattern ( (|MultiSet#Disjoint| a@@64 b@@49)) )))
(assert (forall ((arg0@@80 T@U) ) (! (let ((T@@91 (MapType0TypeInv0 (type arg0@@80)))) (= (type (|MultiSet#FromSet| arg0@@80)) (MapType0Type T@@91 intType))) :qid |funType:MultiSet#FromSet| :pattern ( (|MultiSet#FromSet| arg0@@80)) )))
(assert (forall ((s@@8 T@U) (a@@65 T@U) ) (! (let ((T@@92 (type a@@65))) (=> (= (type s@@8) (MapType0Type T@@92 boolType)) (and (and (=> (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 0) (not (U_2_bool (MapType0Select s@@8 a@@65)))) (=> (not (U_2_bool (MapType0Select s@@8 a@@65))) (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 0))) (and (=> (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 1) (U_2_bool (MapType0Select s@@8 a@@65))) (=> (U_2_bool (MapType0Select s@@8 a@@65)) (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 1)))))) :qid |DafnyPre.866:18| :skolemid |8243| :pattern ( (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) )))
(assert (forall ((s@@9 T@U) ) (! (let ((T@@93 (MapType0TypeInv0 (type s@@9)))) (=> (= (type s@@9) (MapType0Type T@@93 boolType)) (= (|MultiSet#Card| (|MultiSet#FromSet| s@@9)) (|Set#Card| s@@9)))) :qid |DafnyPre.869:18| :skolemid |8244| :pattern ( (|MultiSet#Card| (|MultiSet#FromSet| s@@9))) )))
(assert (forall ((arg0@@81 T@U) ) (! (let ((T@@94 (SeqTypeInv0 (type arg0@@81)))) (= (type (|MultiSet#FromSeq| arg0@@81)) (MapType0Type T@@94 intType))) :qid |funType:MultiSet#FromSeq| :pattern ( (|MultiSet#FromSeq| arg0@@81)) )))
(assert (forall ((s@@10 T@U) ) (! (let ((T@@95 (SeqTypeInv0 (type s@@10)))) (=> (= (type s@@10) (SeqType T@@95)) ($IsGoodMultiSet (|MultiSet#FromSeq| s@@10)))) :qid |DafnyPre.875:18| :skolemid |8245| :pattern ( (|MultiSet#FromSeq| s@@10)) )))
(assert (forall ((s@@11 T@U) ) (! (let ((T@@96 (SeqTypeInv0 (type s@@11)))) (=> (= (type s@@11) (SeqType T@@96)) (= (|MultiSet#Card| (|MultiSet#FromSeq| s@@11)) (|Seq#Length| s@@11)))) :qid |DafnyPre.877:18| :skolemid |8246| :pattern ( (|MultiSet#Card| (|MultiSet#FromSeq| s@@11))) )))
(assert (forall ((arg0@@82 T@U) (arg1@@35 T@U) ) (! (let ((T@@97 (type arg1@@35))) (= (type (|Seq#Build| arg0@@82 arg1@@35)) (SeqType T@@97))) :qid |funType:Seq#Build| :pattern ( (|Seq#Build| arg0@@82 arg1@@35)) )))
(assert (forall ((s@@12 T@U) (v@@25 T@U) ) (! (let ((T@@98 (type v@@25))) (=> (= (type s@@12) (SeqType T@@98)) (= (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@25)) (|MultiSet#UnionOne| (|MultiSet#FromSeq| s@@12) v@@25)))) :qid |DafnyPre.881:18| :skolemid |8247| :pattern ( (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@25))) )))
(assert (forall ((T@@99 T@T) ) (! (= (type (|Seq#Empty| T@@99)) (SeqType T@@99)) :qid |funType:Seq#Empty| :pattern ( (|Seq#Empty| T@@99)) )))
(assert (forall ((T@@100 T@T) ) (! (= (|MultiSet#FromSeq| (|Seq#Empty| T@@100)) (|MultiSet#Empty| T@@100)) :skolemid |8248| )))
(assert (forall ((arg0@@83 T@U) (arg1@@36 T@U) ) (! (let ((T@@101 (SeqTypeInv0 (type arg0@@83)))) (= (type (|Seq#Append| arg0@@83 arg1@@36)) (SeqType T@@101))) :qid |funType:Seq#Append| :pattern ( (|Seq#Append| arg0@@83 arg1@@36)) )))
(assert (forall ((a@@66 T@U) (b@@50 T@U) ) (! (let ((T@@102 (SeqTypeInv0 (type a@@66)))) (=> (and (= (type a@@66) (SeqType T@@102)) (= (type b@@50) (SeqType T@@102))) (= (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50)) (|MultiSet#Union| (|MultiSet#FromSeq| a@@66) (|MultiSet#FromSeq| b@@50))))) :qid |DafnyPre.888:18| :skolemid |8249| :pattern ( (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50))) )))
(assert (forall ((arg0@@84 T@U) (arg1@@37 Int) (arg2@@1 T@U) ) (! (let ((T@@103 (type arg2@@1))) (= (type (|Seq#Update| arg0@@84 arg1@@37 arg2@@1)) (SeqType T@@103))) :qid |funType:Seq#Update| :pattern ( (|Seq#Update| arg0@@84 arg1@@37 arg2@@1)) )))
(assert (forall ((s@@13 T@U) (i@@8 Int) (v@@26 T@U) (x@@32 T@U) ) (! (let ((T@@104 (type v@@26))) (=> (and (and (= (type s@@13) (SeqType T@@104)) (= (type x@@32) T@@104)) (and (<= 0 i@@8) (< i@@8 (|Seq#Length| s@@13)))) (= (U_2_int (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@8 v@@26)) x@@32)) (U_2_int (MapType0Select (|MultiSet#Union| (|MultiSet#Difference| (|MultiSet#FromSeq| s@@13) (|MultiSet#Singleton| (|Seq#Index| s@@13 i@@8))) (|MultiSet#Singleton| v@@26)) x@@32))))) :qid |DafnyPre.893:18| :skolemid |8250| :pattern ( (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@8 v@@26)) x@@32)) )))
(assert (forall ((s@@14 T@U) (x@@33 T@U) ) (! (let ((T@@105 (type x@@33))) (=> (= (type s@@14) (SeqType T@@105)) (and (=> (exists ((i@@9 Int) ) (!  (and (and (<= 0 i@@9) (< i@@9 (|Seq#Length| s@@14))) (= x@@33 (|Seq#Index| s@@14 i@@9))) :qid |DafnyPre.900:11| :skolemid |8251| :pattern ( (|Seq#Index| s@@14 i@@9)) )) (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@33)))) (=> (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@33))) (exists ((i@@10 Int) ) (!  (and (and (<= 0 i@@10) (< i@@10 (|Seq#Length| s@@14))) (= x@@33 (|Seq#Index| s@@14 i@@10))) :qid |DafnyPre.900:11| :skolemid |8251| :pattern ( (|Seq#Index| s@@14 i@@10)) )))))) :qid |DafnyPre.899:18| :skolemid |8252| :pattern ( (MapType0Select (|MultiSet#FromSeq| s@@14) x@@33)) )))
(assert (forall ((s@@15 T@U) ) (! (let ((T@@106 (SeqTypeInv0 (type s@@15)))) (=> (= (type s@@15) (SeqType T@@106)) (<= 0 (|Seq#Length| s@@15)))) :qid |DafnyPre.909:18| :skolemid |8253| :pattern ( (|Seq#Length| s@@15)) )))
(assert (forall ((T@@107 T@T) ) (! (= (|Seq#Length| (|Seq#Empty| T@@107)) 0) :skolemid |8254| :pattern ( (|Seq#Empty| T@@107)) )))
(assert (forall ((s@@16 T@U) ) (! (let ((T@@108 (SeqTypeInv0 (type s@@16)))) (=> (and (= (type s@@16) (SeqType T@@108)) (= (|Seq#Length| s@@16) 0)) (= s@@16 (|Seq#Empty| T@@108)))) :qid |DafnyPre.913:18| :skolemid |8255| :pattern ( (|Seq#Length| s@@16)) )))
(assert (forall ((t@@23 T@U) (T@@109 T@T) ) (!  (=> (= (type t@@23) TyType) ($Is (|Seq#Empty| T@@109) t@@23)) :qid |DafnyPre.923:18| :skolemid |8256| :pattern ( ($Is (|Seq#Empty| T@@109) t@@23)) )))
(assert (forall ((arg0@@85 T@U) ) (! (let ((T@@110 (type arg0@@85))) (= (type (|Seq#Singleton| arg0@@85)) (SeqType T@@110))) :qid |funType:Seq#Singleton| :pattern ( (|Seq#Singleton| arg0@@85)) )))
(assert (forall ((t@@24 T@U) ) (! (= (|Seq#Length| (|Seq#Singleton| t@@24)) 1) :qid |DafnyPre.926:18| :skolemid |8257| :pattern ( (|Seq#Length| (|Seq#Singleton| t@@24))) )))
(assert  (and (forall ((arg0@@86 T@U) ) (! (let ((T@@111 (SeqTypeInv0 (type arg0@@86)))) (= (type (|Seq#Build_inv0| arg0@@86)) (SeqType T@@111))) :qid |funType:Seq#Build_inv0| :pattern ( (|Seq#Build_inv0| arg0@@86)) )) (forall ((arg0@@87 T@U) ) (! (let ((T@@112 (SeqTypeInv0 (type arg0@@87)))) (= (type (|Seq#Build_inv1| arg0@@87)) T@@112)) :qid |funType:Seq#Build_inv1| :pattern ( (|Seq#Build_inv1| arg0@@87)) ))))
(assert (forall ((s@@17 T@U) (val@@5 T@U) ) (! (let ((T@@113 (type val@@5))) (=> (= (type s@@17) (SeqType T@@113)) (and (= (|Seq#Build_inv0| (|Seq#Build| s@@17 val@@5)) s@@17) (= (|Seq#Build_inv1| (|Seq#Build| s@@17 val@@5)) val@@5)))) :qid |DafnyPre.931:18| :skolemid |8258| :pattern ( (|Seq#Build| s@@17 val@@5)) )))
(assert (forall ((s@@18 T@U) (v@@27 T@U) ) (! (let ((T@@114 (type v@@27))) (=> (= (type s@@18) (SeqType T@@114)) (= (|Seq#Length| (|Seq#Build| s@@18 v@@27)) (+ 1 (|Seq#Length| s@@18))))) :qid |DafnyPre.936:18| :skolemid |8259| :pattern ( (|Seq#Build| s@@18 v@@27)) )))
(assert (forall ((s@@19 T@U) (i@@11 Int) (v@@28 T@U) ) (! (let ((T@@115 (type v@@28))) (=> (= (type s@@19) (SeqType T@@115)) (and (=> (= i@@11 (|Seq#Length| s@@19)) (= (|Seq#Index| (|Seq#Build| s@@19 v@@28) i@@11) v@@28)) (=> (not (= i@@11 (|Seq#Length| s@@19))) (= (|Seq#Index| (|Seq#Build| s@@19 v@@28) i@@11) (|Seq#Index| s@@19 i@@11)))))) :qid |DafnyPre.939:18| :skolemid |8260| :pattern ( (|Seq#Index| (|Seq#Build| s@@19 v@@28) i@@11)) )))
(assert (forall ((s@@20 T@U) (bx@@33 T@U) (t@@25 T@U) ) (!  (=> (and (and (and (= (type s@@20) (SeqType BoxType)) (= (type bx@@33) BoxType)) (= (type t@@25) TyType)) (and ($Is s@@20 (TSeq t@@25)) ($IsBox bx@@33 t@@25))) ($Is (|Seq#Build| s@@20 bx@@33) (TSeq t@@25))) :qid |DafnyPre.944:15| :skolemid |8261| :pattern ( ($Is (|Seq#Build| s@@20 bx@@33) (TSeq t@@25))) )))
(assert  (and (= (Ctor HandleTypeType) 20) (forall ((arg0@@88 T@U) (arg1@@38 T@U) (arg2@@2 Int) (arg3 T@U) ) (! (= (type (|Seq#Create| arg0@@88 arg1@@38 arg2@@2 arg3)) (SeqType BoxType)) :qid |funType:Seq#Create| :pattern ( (|Seq#Create| arg0@@88 arg1@@38 arg2@@2 arg3)) ))))
(assert (forall ((ty T@U) (heap T@U) (len Int) (init T@U) ) (!  (=> (and (and (and (= (type ty) TyType) (= (type heap) (MapType0Type refType MapType1Type))) (= (type init) HandleTypeType)) (and ($IsGoodHeap heap) (<= 0 len))) (= (|Seq#Length| (|Seq#Create| ty heap len init)) len)) :qid |DafnyPre.948:15| :skolemid |8262| :pattern ( (|Seq#Length| (|Seq#Create| ty heap len init))) )))
(assert (forall ((arg0@@89 T@U) (arg1@@39 T@U) (arg2@@3 T@U) (arg3@@0 T@U) (arg4 T@U) ) (! (= (type (Apply1 arg0@@89 arg1@@39 arg2@@3 arg3@@0 arg4)) BoxType) :qid |funType:Apply1| :pattern ( (Apply1 arg0@@89 arg1@@39 arg2@@3 arg3@@0 arg4)) )))
(assert (forall ((ty@@0 T@U) (heap@@0 T@U) (len@@0 Int) (init@@0 T@U) (i@@12 Int) ) (!  (=> (and (and (and (= (type ty@@0) TyType) (= (type heap@@0) (MapType0Type refType MapType1Type))) (= (type init@@0) HandleTypeType)) (and (and ($IsGoodHeap heap@@0) (<= 0 i@@12)) (< i@@12 len@@0))) (= (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@12) (Apply1 TInt (TSeq ty@@0) heap@@0 init@@0 ($Box (int_2_U i@@12))))) :qid |DafnyPre.952:15| :skolemid |8263| :pattern ( (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@12)) )))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (let ((T@@116 (SeqTypeInv0 (type s0)))) (=> (and (= (type s0) (SeqType T@@116)) (= (type s1) (SeqType T@@116))) (= (|Seq#Length| (|Seq#Append| s0 s1)) (+ (|Seq#Length| s0) (|Seq#Length| s1))))) :qid |DafnyPre.958:18| :skolemid |8264| :pattern ( (|Seq#Length| (|Seq#Append| s0 s1))) )))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) (t@@26 T@U) ) (!  (=> (and (and (and (= (type s0@@0) (SeqType BoxType)) (= (type s1@@0) (SeqType BoxType))) (= (type t@@26) TyType)) (and ($Is s0@@0 t@@26) ($Is s1@@0 t@@26))) ($Is (|Seq#Append| s0@@0 s1@@0) t@@26)) :qid |DafnyPre.962:15| :skolemid |8265| :pattern ( ($Is (|Seq#Append| s0@@0 s1@@0) t@@26)) )))
(assert (forall ((t@@27 T@U) ) (! (= (|Seq#Index| (|Seq#Singleton| t@@27) 0) t@@27) :qid |DafnyPre.966:18| :skolemid |8266| :pattern ( (|Seq#Index| (|Seq#Singleton| t@@27) 0)) )))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) (n@@6 Int) ) (! (let ((T@@117 (SeqTypeInv0 (type s0@@1)))) (=> (and (= (type s0@@1) (SeqType T@@117)) (= (type s1@@1) (SeqType T@@117))) (and (=> (< n@@6 (|Seq#Length| s0@@1)) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@6) (|Seq#Index| s0@@1 n@@6))) (=> (<= (|Seq#Length| s0@@1) n@@6) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@6) (|Seq#Index| s1@@1 (- n@@6 (|Seq#Length| s0@@1)))))))) :qid |DafnyPre.967:18| :skolemid |8267| :pattern ( (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@6)) )))
(assert (forall ((s@@21 T@U) (i@@13 Int) (v@@29 T@U) ) (! (let ((T@@118 (type v@@29))) (=> (= (type s@@21) (SeqType T@@118)) (=> (and (<= 0 i@@13) (< i@@13 (|Seq#Length| s@@21))) (= (|Seq#Length| (|Seq#Update| s@@21 i@@13 v@@29)) (|Seq#Length| s@@21))))) :qid |DafnyPre.972:18| :skolemid |8268| :pattern ( (|Seq#Length| (|Seq#Update| s@@21 i@@13 v@@29))) )))
(assert (forall ((s@@22 T@U) (i@@14 Int) (v@@30 T@U) (n@@7 Int) ) (! (let ((T@@119 (type v@@30))) (=> (= (type s@@22) (SeqType T@@119)) (=> (and (<= 0 n@@7) (< n@@7 (|Seq#Length| s@@22))) (and (=> (= i@@14 n@@7) (= (|Seq#Index| (|Seq#Update| s@@22 i@@14 v@@30) n@@7) v@@30)) (=> (not (= i@@14 n@@7)) (= (|Seq#Index| (|Seq#Update| s@@22 i@@14 v@@30) n@@7) (|Seq#Index| s@@22 n@@7))))))) :qid |DafnyPre.974:18| :skolemid |8269| :pattern ( (|Seq#Index| (|Seq#Update| s@@22 i@@14 v@@30) n@@7)) )))
(assert (forall ((s@@23 T@U) (x@@34 T@U) ) (! (let ((T@@120 (type x@@34))) (=> (= (type s@@23) (SeqType T@@120)) (and (=> (|Seq#Contains| s@@23 x@@34) (exists ((i@@15 Int) ) (!  (and (and (<= 0 i@@15) (< i@@15 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@15) x@@34)) :qid |DafnyPre.982:13| :skolemid |8270| :pattern ( (|Seq#Index| s@@23 i@@15)) ))) (=> (exists ((i@@16 Int) ) (!  (and (and (<= 0 i@@16) (< i@@16 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@16) x@@34)) :qid |DafnyPre.982:13| :skolemid |8270| :pattern ( (|Seq#Index| s@@23 i@@16)) )) (|Seq#Contains| s@@23 x@@34))))) :qid |DafnyPre.980:18| :skolemid |8271| :pattern ( (|Seq#Contains| s@@23 x@@34)) )))
(assert (forall ((x@@35 T@U) ) (! (let ((T@@121 (type x@@35))) (not (|Seq#Contains| (|Seq#Empty| T@@121) x@@35))) :qid |DafnyPre.983:18| :skolemid |8272| :pattern ( (let ((T@@121 (type x@@35))) (|Seq#Contains| (|Seq#Empty| T@@121) x@@35))) )))
(assert (forall ((s0@@2 T@U) (s1@@2 T@U) (x@@36 T@U) ) (! (let ((T@@122 (type x@@36))) (=> (and (= (type s0@@2) (SeqType T@@122)) (= (type s1@@2) (SeqType T@@122))) (and (=> (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@36) (or (|Seq#Contains| s0@@2 x@@36) (|Seq#Contains| s1@@2 x@@36))) (=> (or (|Seq#Contains| s0@@2 x@@36) (|Seq#Contains| s1@@2 x@@36)) (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@36))))) :qid |DafnyPre.987:18| :skolemid |8273| :pattern ( (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@36)) )))
(assert (forall ((s@@24 T@U) (v@@31 T@U) (x@@37 T@U) ) (! (let ((T@@123 (type v@@31))) (=> (and (= (type s@@24) (SeqType T@@123)) (= (type x@@37) T@@123)) (and (=> (|Seq#Contains| (|Seq#Build| s@@24 v@@31) x@@37) (or (= v@@31 x@@37) (|Seq#Contains| s@@24 x@@37))) (=> (or (= v@@31 x@@37) (|Seq#Contains| s@@24 x@@37)) (|Seq#Contains| (|Seq#Build| s@@24 v@@31) x@@37))))) :qid |DafnyPre.992:18| :skolemid |8274| :pattern ( (|Seq#Contains| (|Seq#Build| s@@24 v@@31) x@@37)) )))
(assert (forall ((arg0@@90 T@U) (arg1@@40 Int) ) (! (let ((T@@124 (SeqTypeInv0 (type arg0@@90)))) (= (type (|Seq#Take| arg0@@90 arg1@@40)) (SeqType T@@124))) :qid |funType:Seq#Take| :pattern ( (|Seq#Take| arg0@@90 arg1@@40)) )))
(assert (forall ((s@@25 T@U) (n@@8 Int) (x@@38 T@U) ) (! (let ((T@@125 (type x@@38))) (=> (= (type s@@25) (SeqType T@@125)) (and (=> (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@38) (exists ((i@@17 Int) ) (!  (and (and (and (<= 0 i@@17) (< i@@17 n@@8)) (< i@@17 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@17) x@@38)) :qid |DafnyPre.999:13| :skolemid |8275| :pattern ( (|Seq#Index| s@@25 i@@17)) ))) (=> (exists ((i@@18 Int) ) (!  (and (and (and (<= 0 i@@18) (< i@@18 n@@8)) (< i@@18 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@18) x@@38)) :qid |DafnyPre.999:13| :skolemid |8275| :pattern ( (|Seq#Index| s@@25 i@@18)) )) (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@38))))) :qid |DafnyPre.996:18| :skolemid |8276| :pattern ( (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@38)) )))
(assert (forall ((arg0@@91 T@U) (arg1@@41 Int) ) (! (let ((T@@126 (SeqTypeInv0 (type arg0@@91)))) (= (type (|Seq#Drop| arg0@@91 arg1@@41)) (SeqType T@@126))) :qid |funType:Seq#Drop| :pattern ( (|Seq#Drop| arg0@@91 arg1@@41)) )))
(assert (forall ((s@@26 T@U) (n@@9 Int) (x@@39 T@U) ) (! (let ((T@@127 (type x@@39))) (=> (= (type s@@26) (SeqType T@@127)) (and (=> (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@39) (exists ((i@@19 Int) ) (!  (and (and (and (<= 0 n@@9) (<= n@@9 i@@19)) (< i@@19 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@19) x@@39)) :qid |DafnyPre.1004:13| :skolemid |8277| :pattern ( (|Seq#Index| s@@26 i@@19)) ))) (=> (exists ((i@@20 Int) ) (!  (and (and (and (<= 0 n@@9) (<= n@@9 i@@20)) (< i@@20 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@20) x@@39)) :qid |DafnyPre.1004:13| :skolemid |8277| :pattern ( (|Seq#Index| s@@26 i@@20)) )) (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@39))))) :qid |DafnyPre.1001:18| :skolemid |8278| :pattern ( (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@39)) )))
(assert (forall ((s0@@3 T@U) (s1@@3 T@U) ) (! (let ((T@@128 (SeqTypeInv0 (type s0@@3)))) (=> (and (= (type s0@@3) (SeqType T@@128)) (= (type s1@@3) (SeqType T@@128))) (and (=> (|Seq#Equal| s0@@3 s1@@3) (and (= (|Seq#Length| s0@@3) (|Seq#Length| s1@@3)) (forall ((j Int) ) (!  (=> (and (<= 0 j) (< j (|Seq#Length| s0@@3))) (= (|Seq#Index| s0@@3 j) (|Seq#Index| s1@@3 j))) :qid |DafnyPre.1011:13| :skolemid |8279| :pattern ( (|Seq#Index| s0@@3 j)) :pattern ( (|Seq#Index| s1@@3 j)) )))) (=> (and (= (|Seq#Length| s0@@3) (|Seq#Length| s1@@3)) (forall ((j@@0 Int) ) (!  (=> (and (<= 0 j@@0) (< j@@0 (|Seq#Length| s0@@3))) (= (|Seq#Index| s0@@3 j@@0) (|Seq#Index| s1@@3 j@@0))) :qid |DafnyPre.1011:13| :skolemid |8279| :pattern ( (|Seq#Index| s0@@3 j@@0)) :pattern ( (|Seq#Index| s1@@3 j@@0)) ))) (|Seq#Equal| s0@@3 s1@@3))))) :qid |DafnyPre.1008:18| :skolemid |8280| :pattern ( (|Seq#Equal| s0@@3 s1@@3)) )))
(assert (forall ((a@@67 T@U) (b@@51 T@U) ) (! (let ((T@@129 (SeqTypeInv0 (type a@@67)))) (=> (and (and (= (type a@@67) (SeqType T@@129)) (= (type b@@51) (SeqType T@@129))) (|Seq#Equal| a@@67 b@@51)) (= a@@67 b@@51))) :qid |DafnyPre.1013:18| :skolemid |8281| :pattern ( (|Seq#Equal| a@@67 b@@51)) )))
(assert (forall ((s0@@4 T@U) (s1@@4 T@U) (n@@10 Int) ) (! (let ((T@@130 (SeqTypeInv0 (type s0@@4)))) (=> (and (= (type s0@@4) (SeqType T@@130)) (= (type s1@@4) (SeqType T@@130))) (and (=> (|Seq#SameUntil| s0@@4 s1@@4 n@@10) (forall ((j@@1 Int) ) (!  (=> (and (<= 0 j@@1) (< j@@1 n@@10)) (= (|Seq#Index| s0@@4 j@@1) (|Seq#Index| s1@@4 j@@1))) :qid |DafnyPre.1019:13| :skolemid |8282| :pattern ( (|Seq#Index| s0@@4 j@@1)) :pattern ( (|Seq#Index| s1@@4 j@@1)) ))) (=> (forall ((j@@2 Int) ) (!  (=> (and (<= 0 j@@2) (< j@@2 n@@10)) (= (|Seq#Index| s0@@4 j@@2) (|Seq#Index| s1@@4 j@@2))) :qid |DafnyPre.1019:13| :skolemid |8282| :pattern ( (|Seq#Index| s0@@4 j@@2)) :pattern ( (|Seq#Index| s1@@4 j@@2)) )) (|Seq#SameUntil| s0@@4 s1@@4 n@@10))))) :qid |DafnyPre.1017:18| :skolemid |8283| :pattern ( (|Seq#SameUntil| s0@@4 s1@@4 n@@10)) )))
(assert (forall ((s@@27 T@U) (n@@11 Int) ) (! (let ((T@@131 (SeqTypeInv0 (type s@@27)))) (=> (= (type s@@27) (SeqType T@@131)) (=> (and (<= 0 n@@11) (<= n@@11 (|Seq#Length| s@@27))) (= (|Seq#Length| (|Seq#Take| s@@27 n@@11)) n@@11)))) :qid |DafnyPre.1023:18| :skolemid |8284| :pattern ( (|Seq#Length| (|Seq#Take| s@@27 n@@11))) )))
(assert (forall ((s@@28 T@U) (n@@12 Int) (j@@3 Int) ) (! (let ((T@@132 (SeqTypeInv0 (type s@@28)))) (=> (= (type s@@28) (SeqType T@@132)) (=> (and (and (<= 0 j@@3) (< j@@3 n@@12)) (< j@@3 (|Seq#Length| s@@28))) (= (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@3) (|Seq#Index| s@@28 j@@3))))) :qid |DafnyPre.1025:18| :weight 25 :skolemid |8285| :pattern ( (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@3)) :pattern ( (|Seq#Index| s@@28 j@@3) (|Seq#Take| s@@28 n@@12)) )))
(assert (forall ((s@@29 T@U) (n@@13 Int) ) (! (let ((T@@133 (SeqTypeInv0 (type s@@29)))) (=> (= (type s@@29) (SeqType T@@133)) (=> (and (<= 0 n@@13) (<= n@@13 (|Seq#Length| s@@29))) (= (|Seq#Length| (|Seq#Drop| s@@29 n@@13)) (- (|Seq#Length| s@@29) n@@13))))) :qid |DafnyPre.1033:18| :skolemid |8286| :pattern ( (|Seq#Length| (|Seq#Drop| s@@29 n@@13))) )))
(assert (forall ((s@@30 T@U) (n@@14 Int) (j@@4 Int) ) (! (let ((T@@134 (SeqTypeInv0 (type s@@30)))) (=> (= (type s@@30) (SeqType T@@134)) (=> (and (and (<= 0 n@@14) (<= 0 j@@4)) (< j@@4 (- (|Seq#Length| s@@30) n@@14))) (= (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@4) (|Seq#Index| s@@30 (+ j@@4 n@@14)))))) :qid |DafnyPre.1035:18| :weight 25 :skolemid |8287| :pattern ( (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@4)) )))
(assert (forall ((s@@31 T@U) (n@@15 Int) (k@@3 Int) ) (! (let ((T@@135 (SeqTypeInv0 (type s@@31)))) (=> (= (type s@@31) (SeqType T@@135)) (=> (and (and (<= 0 n@@15) (<= n@@15 k@@3)) (< k@@3 (|Seq#Length| s@@31))) (= (|Seq#Index| (|Seq#Drop| s@@31 n@@15) (- k@@3 n@@15)) (|Seq#Index| s@@31 k@@3))))) :qid |DafnyPre.1040:18| :weight 25 :skolemid |8288| :pattern ( (|Seq#Index| s@@31 k@@3) (|Seq#Drop| s@@31 n@@15)) )))
(assert (forall ((s@@32 T@U) (t@@28 T@U) (n@@16 Int) ) (! (let ((T@@136 (SeqTypeInv0 (type s@@32)))) (=> (and (and (= (type s@@32) (SeqType T@@136)) (= (type t@@28) (SeqType T@@136))) (= n@@16 (|Seq#Length| s@@32))) (and (= (|Seq#Take| (|Seq#Append| s@@32 t@@28) n@@16) s@@32) (= (|Seq#Drop| (|Seq#Append| s@@32 t@@28) n@@16) t@@28)))) :qid |DafnyPre.1046:18| :skolemid |8289| :pattern ( (|Seq#Take| (|Seq#Append| s@@32 t@@28) n@@16)) :pattern ( (|Seq#Drop| (|Seq#Append| s@@32 t@@28) n@@16)) )))
(assert (forall ((arg0@@92 T@U) (arg1@@42 T@U) ) (! (= (type (|Seq#FromArray| arg0@@92 arg1@@42)) (SeqType BoxType)) :qid |funType:Seq#FromArray| :pattern ( (|Seq#FromArray| arg0@@92 arg1@@42)) )))
(assert (forall ((h@@16 T@U) (a@@68 T@U) ) (!  (=> (and (= (type h@@16) (MapType0Type refType MapType1Type)) (= (type a@@68) refType)) (= (|Seq#Length| (|Seq#FromArray| h@@16 a@@68)) (_System.array.Length a@@68))) :qid |DafnyPre.1055:15| :skolemid |8290| :pattern ( (|Seq#Length| (|Seq#FromArray| h@@16 a@@68))) )))
(assert (forall ((h@@17 T@U) (a@@69 T@U) ) (!  (=> (and (= (type h@@17) (MapType0Type refType MapType1Type)) (= (type a@@69) refType)) (forall ((i@@21 Int) ) (!  (=> (and (<= 0 i@@21) (< i@@21 (|Seq#Length| (|Seq#FromArray| h@@17 a@@69)))) (= (|Seq#Index| (|Seq#FromArray| h@@17 a@@69) i@@21) (MapType1Select (MapType0Select h@@17 a@@69) (IndexField i@@21)))) :qid |DafnyPre.1060:11| :skolemid |8291| :pattern ( (MapType1Select (MapType0Select h@@17 a@@69) (IndexField i@@21))) :pattern ( (|Seq#Index| (|Seq#FromArray| h@@17 a@@69) i@@21)) ))) :qid |DafnyPre.1058:15| :skolemid |8292| :pattern ( (|Seq#FromArray| h@@17 a@@69)) )))
(assert (forall ((h0 T@U) (h1 T@U) (a@@70 T@U) ) (!  (=> (and (and (= (type h0) (MapType0Type refType MapType1Type)) (= (type h1) (MapType0Type refType MapType1Type))) (= (type a@@70) refType)) (=> (and (and (and ($IsGoodHeap h0) ($IsGoodHeap h1)) ($HeapSucc h0 h1)) (= (MapType0Select h0 a@@70) (MapType0Select h1 a@@70))) (= (|Seq#FromArray| h0 a@@70) (|Seq#FromArray| h1 a@@70)))) :qid |DafnyPre.1070:15| :skolemid |8293| :pattern ( (|Seq#FromArray| h1 a@@70) ($HeapSucc h0 h1)) )))
(assert (forall ((h@@18 T@U) (i@@22 Int) (v@@32 T@U) (a@@71 T@U) ) (!  (=> (and (and (and (= (type h@@18) (MapType0Type refType MapType1Type)) (= (type v@@32) BoxType)) (= (type a@@71) refType)) (and (<= 0 i@@22) (< i@@22 (_System.array.Length a@@71)))) (= (|Seq#FromArray| (MapType0Store h@@18 a@@71 (MapType1Store (MapType0Select h@@18 a@@71) (IndexField i@@22) v@@32)) a@@71) (|Seq#Update| (|Seq#FromArray| h@@18 a@@71) i@@22 v@@32))) :qid |DafnyPre.1075:15| :skolemid |8294| :pattern ( (|Seq#FromArray| (MapType0Store h@@18 a@@71 (MapType1Store (MapType0Select h@@18 a@@71) (IndexField i@@22) v@@32)) a@@71)) )))
(assert (forall ((s@@33 T@U) (i@@23 Int) (v@@33 T@U) (n@@17 Int) ) (! (let ((T@@137 (type v@@33))) (=> (= (type s@@33) (SeqType T@@137)) (=> (and (and (<= 0 i@@23) (< i@@23 n@@17)) (<= n@@17 (|Seq#Length| s@@33))) (= (|Seq#Take| (|Seq#Update| s@@33 i@@23 v@@33) n@@17) (|Seq#Update| (|Seq#Take| s@@33 n@@17) i@@23 v@@33))))) :qid |DafnyPre.1080:18| :skolemid |8295| :pattern ( (|Seq#Take| (|Seq#Update| s@@33 i@@23 v@@33) n@@17)) )))
(assert (forall ((s@@34 T@U) (i@@24 Int) (v@@34 T@U) (n@@18 Int) ) (! (let ((T@@138 (type v@@34))) (=> (= (type s@@34) (SeqType T@@138)) (=> (and (<= n@@18 i@@24) (< i@@24 (|Seq#Length| s@@34))) (= (|Seq#Take| (|Seq#Update| s@@34 i@@24 v@@34) n@@18) (|Seq#Take| s@@34 n@@18))))) :qid |DafnyPre.1083:18| :skolemid |8296| :pattern ( (|Seq#Take| (|Seq#Update| s@@34 i@@24 v@@34) n@@18)) )))
(assert (forall ((s@@35 T@U) (i@@25 Int) (v@@35 T@U) (n@@19 Int) ) (! (let ((T@@139 (type v@@35))) (=> (= (type s@@35) (SeqType T@@139)) (=> (and (and (<= 0 n@@19) (<= n@@19 i@@25)) (< i@@25 (|Seq#Length| s@@35))) (= (|Seq#Drop| (|Seq#Update| s@@35 i@@25 v@@35) n@@19) (|Seq#Update| (|Seq#Drop| s@@35 n@@19) (- i@@25 n@@19) v@@35))))) :qid |DafnyPre.1086:18| :skolemid |8297| :pattern ( (|Seq#Drop| (|Seq#Update| s@@35 i@@25 v@@35) n@@19)) )))
(assert (forall ((s@@36 T@U) (i@@26 Int) (v@@36 T@U) (n@@20 Int) ) (! (let ((T@@140 (type v@@36))) (=> (= (type s@@36) (SeqType T@@140)) (=> (and (and (<= 0 i@@26) (< i@@26 n@@20)) (< n@@20 (|Seq#Length| s@@36))) (= (|Seq#Drop| (|Seq#Update| s@@36 i@@26 v@@36) n@@20) (|Seq#Drop| s@@36 n@@20))))) :qid |DafnyPre.1089:18| :skolemid |8298| :pattern ( (|Seq#Drop| (|Seq#Update| s@@36 i@@26 v@@36) n@@20)) )))
(assert (forall ((h@@19 T@U) (a@@72 T@U) (n0 Int) (n1 Int) ) (!  (=> (and (= (type h@@19) (MapType0Type refType MapType1Type)) (= (type a@@72) refType)) (=> (and (and (= (+ n0 1) n1) (<= 0 n0)) (<= n1 (_System.array.Length a@@72))) (= (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n1) (|Seq#Build| (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n0) (MapType1Select (MapType0Select h@@19 a@@72) (IndexField n0)))))) :qid |DafnyPre.1093:15| :skolemid |8299| :pattern ( (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n0) (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n1)) )))
(assert (forall ((s@@37 T@U) (v@@37 T@U) (n@@21 Int) ) (! (let ((T@@141 (type v@@37))) (=> (= (type s@@37) (SeqType T@@141)) (=> (and (<= 0 n@@21) (<= n@@21 (|Seq#Length| s@@37))) (= (|Seq#Drop| (|Seq#Build| s@@37 v@@37) n@@21) (|Seq#Build| (|Seq#Drop| s@@37 n@@21) v@@37))))) :qid |DafnyPre.1097:18| :skolemid |8300| :pattern ( (|Seq#Drop| (|Seq#Build| s@@37 v@@37) n@@21)) )))
(assert (forall ((s@@38 T@U) (i@@27 Int) ) (!  (=> (= (type s@@38) (SeqType BoxType)) (=> (and (<= 0 i@@27) (< i@@27 (|Seq#Length| s@@38))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@27))) (|Seq#Rank| s@@38)))) :qid |DafnyPre.1102:15| :skolemid |8301| :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@27)))) )))
(assert (forall ((s@@39 T@U) (i@@28 Int) ) (! (let ((T@@142 (SeqTypeInv0 (type s@@39)))) (=> (= (type s@@39) (SeqType T@@142)) (=> (and (< 0 i@@28) (<= i@@28 (|Seq#Length| s@@39))) (< (|Seq#Rank| (|Seq#Drop| s@@39 i@@28)) (|Seq#Rank| s@@39))))) :qid |DafnyPre.1105:18| :skolemid |8302| :pattern ( (|Seq#Rank| (|Seq#Drop| s@@39 i@@28))) )))
(assert (forall ((s@@40 T@U) (i@@29 Int) ) (! (let ((T@@143 (SeqTypeInv0 (type s@@40)))) (=> (= (type s@@40) (SeqType T@@143)) (=> (and (<= 0 i@@29) (< i@@29 (|Seq#Length| s@@40))) (< (|Seq#Rank| (|Seq#Take| s@@40 i@@29)) (|Seq#Rank| s@@40))))) :qid |DafnyPre.1108:18| :skolemid |8303| :pattern ( (|Seq#Rank| (|Seq#Take| s@@40 i@@29))) )))
(assert (forall ((s@@41 T@U) (i@@30 Int) (j@@5 Int) ) (! (let ((T@@144 (SeqTypeInv0 (type s@@41)))) (=> (= (type s@@41) (SeqType T@@144)) (=> (and (and (<= 0 i@@30) (< i@@30 j@@5)) (<= j@@5 (|Seq#Length| s@@41))) (< (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@30) (|Seq#Drop| s@@41 j@@5))) (|Seq#Rank| s@@41))))) :qid |DafnyPre.1111:18| :skolemid |8304| :pattern ( (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@30) (|Seq#Drop| s@@41 j@@5)))) )))
(assert (forall ((s@@42 T@U) (n@@22 Int) ) (! (let ((T@@145 (SeqTypeInv0 (type s@@42)))) (=> (and (= (type s@@42) (SeqType T@@145)) (= n@@22 0)) (= (|Seq#Drop| s@@42 n@@22) s@@42))) :qid |DafnyPre.1116:18| :skolemid |8305| :pattern ( (|Seq#Drop| s@@42 n@@22)) )))
(assert (forall ((s@@43 T@U) (n@@23 Int) ) (! (let ((T@@146 (SeqTypeInv0 (type s@@43)))) (=> (and (= (type s@@43) (SeqType T@@146)) (= n@@23 0)) (= (|Seq#Take| s@@43 n@@23) (|Seq#Empty| T@@146)))) :qid |DafnyPre.1118:18| :skolemid |8306| :pattern ( (|Seq#Take| s@@43 n@@23)) )))
(assert (forall ((s@@44 T@U) (m@@9 Int) (n@@24 Int) ) (! (let ((T@@147 (SeqTypeInv0 (type s@@44)))) (=> (= (type s@@44) (SeqType T@@147)) (=> (and (and (<= 0 m@@9) (<= 0 n@@24)) (<= (+ m@@9 n@@24) (|Seq#Length| s@@44))) (= (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24) (|Seq#Drop| s@@44 (+ m@@9 n@@24)))))) :qid |DafnyPre.1120:18| :skolemid |8307| :pattern ( (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24)) )))
(assert (forall ((m@@10 T@U) ) (! (let ((V@@1 (MapTypeInv1 (type m@@10)))) (let ((U@@3 (MapTypeInv0 (type m@@10)))) (=> (= (type m@@10) (MapType U@@3 V@@1)) (<= 0 (|Map#Card| m@@10))))) :qid |DafnyPre.1138:20| :skolemid |8308| :pattern ( (|Map#Card| m@@10)) )))
(assert (forall ((m@@11 T@U) ) (! (let ((V@@2 (MapTypeInv1 (type m@@11)))) (let ((U@@4 (MapTypeInv0 (type m@@11)))) (=> (= (type m@@11) (MapType U@@4 V@@2)) (= (|Set#Card| (|Map#Domain| m@@11)) (|Map#Card| m@@11))))) :qid |DafnyPre.1143:20| :skolemid |8309| :pattern ( (|Set#Card| (|Map#Domain| m@@11))) )))
(assert (forall ((arg0@@93 T@U) ) (! (let ((V@@3 (MapTypeInv1 (type arg0@@93)))) (= (type (|Map#Values| arg0@@93)) (MapType0Type V@@3 boolType))) :qid |funType:Map#Values| :pattern ( (|Map#Values| arg0@@93)) )))
(assert (forall ((m@@12 T@U) (v@@38 T@U) ) (! (let ((V@@4 (type v@@38))) (let ((U@@5 (MapTypeInv0 (type m@@12)))) (=> (= (type m@@12) (MapType U@@5 V@@4)) (and (=> (U_2_bool (MapType0Select (|Map#Values| m@@12) v@@38)) (exists ((u@@5 T@U) ) (!  (and (= (type u@@5) U@@5) (and (U_2_bool (MapType0Select (|Map#Domain| m@@12) u@@5)) (= v@@38 (MapType0Select (|Map#Elements| m@@12) u@@5)))) :qid |DafnyPre.1155:10| :skolemid |8310| :pattern ( (MapType0Select (|Map#Domain| m@@12) u@@5)) :pattern ( (MapType0Select (|Map#Elements| m@@12) u@@5)) ))) (=> (exists ((u@@6 T@U) ) (!  (and (= (type u@@6) U@@5) (and (U_2_bool (MapType0Select (|Map#Domain| m@@12) u@@6)) (= v@@38 (MapType0Select (|Map#Elements| m@@12) u@@6)))) :qid |DafnyPre.1155:10| :skolemid |8310| :pattern ( (MapType0Select (|Map#Domain| m@@12) u@@6)) :pattern ( (MapType0Select (|Map#Elements| m@@12) u@@6)) )) (U_2_bool (MapType0Select (|Map#Values| m@@12) v@@38))))))) :qid |DafnyPre.1153:20| :skolemid |8311| :pattern ( (MapType0Select (|Map#Values| m@@12) v@@38)) )))
(assert (forall ((arg0@@94 T@U) ) (! (= (type (|Map#Items| arg0@@94)) (MapType0Type BoxType boolType)) :qid |funType:Map#Items| :pattern ( (|Map#Items| arg0@@94)) )))
(assert (forall ((m@@13 T@U) ) (! (let ((V@@5 (MapTypeInv1 (type m@@13)))) (let ((U@@6 (MapTypeInv0 (type m@@13)))) (=> (= (type m@@13) (MapType U@@6 V@@5)) (= (|Set#Card| (|Map#Items| m@@13)) (|Map#Card| m@@13))))) :qid |DafnyPre.1174:20| :skolemid |8312| :pattern ( (|Set#Card| (|Map#Items| m@@13))) )))
(assert  (and (forall ((arg0@@95 T@U) ) (! (= (type (_System.Tuple2._0 arg0@@95)) BoxType) :qid |funType:_System.Tuple2._0| :pattern ( (_System.Tuple2._0 arg0@@95)) )) (forall ((arg0@@96 T@U) ) (! (= (type (_System.Tuple2._1 arg0@@96)) BoxType) :qid |funType:_System.Tuple2._1| :pattern ( (_System.Tuple2._1 arg0@@96)) ))))
(assert (forall ((m@@14 T@U) (item T@U) ) (!  (=> (and (= (type m@@14) (MapType BoxType BoxType)) (= (type item) BoxType)) (and (=> (U_2_bool (MapType0Select (|Map#Items| m@@14) item)) (and (U_2_bool (MapType0Select (|Map#Domain| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item))))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))) (U_2_bool (MapType0Select (|Map#Items| m@@14) item))))) :qid |DafnyPre.1177:15| :skolemid |8313| :pattern ( (MapType0Select (|Map#Items| m@@14) item)) )))
(assert (forall ((U@@7 T@T) (V@@6 T@T) ) (! (= (type (|Map#Empty| U@@7 V@@6)) (MapType U@@7 V@@6)) :qid |funType:Map#Empty| :pattern ( (|Map#Empty| U@@7 V@@6)) )))
(assert (forall ((u@@7 T@U) (V@@7 T@T) ) (! (let ((U@@8 (type u@@7))) (not (U_2_bool (MapType0Select (|Map#Domain| (|Map#Empty| U@@8 V@@7)) u@@7)))) :qid |DafnyPre.1185:21| :skolemid |8314| :pattern ( (let ((U@@8 (type u@@7))) (MapType0Select (|Map#Domain| (|Map#Empty| U@@8 V@@7)) u@@7))) )))
(assert (forall ((m@@15 T@U) ) (! (let ((V@@8 (MapTypeInv1 (type m@@15)))) (let ((U@@9 (MapTypeInv0 (type m@@15)))) (=> (= (type m@@15) (MapType U@@9 V@@8)) (and (and (=> (= (|Map#Card| m@@15) 0) (= m@@15 (|Map#Empty| U@@9 V@@8))) (=> (= m@@15 (|Map#Empty| U@@9 V@@8)) (= (|Map#Card| m@@15) 0))) (=> (not (= (|Map#Card| m@@15) 0)) (exists ((x@@40 T@U) ) (!  (and (= (type x@@40) U@@9) (U_2_bool (MapType0Select (|Map#Domain| m@@15) x@@40))) :qid |DafnyPre.1190:32| :skolemid |8315| :no-pattern (type x@@40) :no-pattern (U_2_int x@@40) :no-pattern (U_2_bool x@@40) ))))))) :qid |DafnyPre.1188:21| :skolemid |8316| :pattern ( (|Map#Card| m@@15)) )))
(assert (forall ((arg0@@97 T@U) (arg1@@43 T@U) (arg2@@4 T@U) ) (! (let ((V@@9 (MapType0TypeInv1 (type arg1@@43)))) (let ((U@@10 (MapType0TypeInv0 (type arg0@@97)))) (= (type (|Map#Glue| arg0@@97 arg1@@43 arg2@@4)) (MapType U@@10 V@@9)))) :qid |funType:Map#Glue| :pattern ( (|Map#Glue| arg0@@97 arg1@@43 arg2@@4)) )))
(assert (forall ((a@@73 T@U) (b@@52 T@U) (t@@29 T@U) ) (! (let ((V@@10 (MapType0TypeInv1 (type b@@52)))) (let ((U@@11 (MapType0TypeInv0 (type a@@73)))) (=> (and (and (= (type a@@73) (MapType0Type U@@11 boolType)) (= (type b@@52) (MapType0Type U@@11 V@@10))) (= (type t@@29) TyType)) (= (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@29)) a@@73)))) :qid |DafnyPre.1193:21| :skolemid |8317| :pattern ( (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@29))) )))
(assert (forall ((a@@74 T@U) (b@@53 T@U) (t@@30 T@U) ) (! (let ((V@@11 (MapType0TypeInv1 (type b@@53)))) (let ((U@@12 (MapType0TypeInv0 (type a@@74)))) (=> (and (and (= (type a@@74) (MapType0Type U@@12 boolType)) (= (type b@@53) (MapType0Type U@@12 V@@11))) (= (type t@@30) TyType)) (= (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@30)) b@@53)))) :qid |DafnyPre.1196:21| :skolemid |8318| :pattern ( (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@30))) )))
(assert (forall ((a@@75 T@U) (b@@54 T@U) (t@@31 T@U) ) (! (let ((V@@12 (MapType0TypeInv1 (type b@@54)))) (let ((U@@13 (MapType0TypeInv0 (type a@@75)))) (=> (and (and (= (type a@@75) (MapType0Type U@@13 boolType)) (= (type b@@54) (MapType0Type U@@13 V@@12))) (= (type t@@31) TyType)) ($Is (|Map#Glue| a@@75 b@@54 t@@31) t@@31)))) :qid |DafnyPre.1199:21| :skolemid |8319| :pattern ( ($Is (|Map#Glue| a@@75 b@@54 t@@31) t@@31)) )))
(assert (forall ((arg0@@98 T@U) (arg1@@44 T@U) (arg2@@5 T@U) ) (! (let ((V@@13 (type arg2@@5))) (let ((U@@14 (type arg1@@44))) (= (type (|Map#Build| arg0@@98 arg1@@44 arg2@@5)) (MapType U@@14 V@@13)))) :qid |funType:Map#Build| :pattern ( (|Map#Build| arg0@@98 arg1@@44 arg2@@5)) )))
(assert (forall ((m@@16 T@U) (u@@8 T@U) (|u'| T@U) (v@@39 T@U) ) (! (let ((V@@14 (type v@@39))) (let ((U@@15 (type u@@8))) (=> (and (= (type m@@16) (MapType U@@15 V@@14)) (= (type |u'|) U@@15)) (and (=> (= |u'| u@@8) (and (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@16 u@@8 v@@39)) |u'|) v@@39))) (=> (not (= |u'| u@@8)) (and (and (=> (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| m@@16) |u'|))) (=> (U_2_bool (MapType0Select (|Map#Domain| m@@16) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)))) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@16 u@@8 v@@39)) |u'|) (MapType0Select (|Map#Elements| m@@16) |u'|)))))))) :qid |DafnyPre.1210:21| :skolemid |8320| :pattern ( (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) :pattern ( (MapType0Select (|Map#Elements| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) )))
(assert (forall ((m@@17 T@U) (u@@9 T@U) (v@@40 T@U) ) (! (let ((V@@15 (type v@@40))) (let ((U@@16 (type u@@9))) (=> (and (= (type m@@17) (MapType U@@16 V@@15)) (U_2_bool (MapType0Select (|Map#Domain| m@@17) u@@9))) (= (|Map#Card| (|Map#Build| m@@17 u@@9 v@@40)) (|Map#Card| m@@17))))) :qid |DafnyPre.1216:21| :skolemid |8321| :pattern ( (|Map#Card| (|Map#Build| m@@17 u@@9 v@@40))) )))
(assert (forall ((m@@18 T@U) (u@@10 T@U) (v@@41 T@U) ) (! (let ((V@@16 (type v@@41))) (let ((U@@17 (type u@@10))) (=> (and (= (type m@@18) (MapType U@@17 V@@16)) (not (U_2_bool (MapType0Select (|Map#Domain| m@@18) u@@10)))) (= (|Map#Card| (|Map#Build| m@@18 u@@10 v@@41)) (+ (|Map#Card| m@@18) 1))))) :qid |DafnyPre.1218:21| :skolemid |8322| :pattern ( (|Map#Card| (|Map#Build| m@@18 u@@10 v@@41))) )))
(assert (forall ((m@@19 T@U) (|m'| T@U) ) (! (let ((V@@17 (MapTypeInv1 (type m@@19)))) (let ((U@@18 (MapTypeInv0 (type m@@19)))) (=> (and (= (type m@@19) (MapType U@@18 V@@17)) (= (type |m'|) (MapType U@@18 V@@17))) (and (=> (|Map#Equal| m@@19 |m'|) (and (forall ((u@@11 T@U) ) (!  (=> (= (type u@@11) U@@18) (and (=> (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@11)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@11))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@11)) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@11))))) :qid |DafnyPre.1225:35| :skolemid |8323| :no-pattern (type u@@11) :no-pattern (U_2_int u@@11) :no-pattern (U_2_bool u@@11) )) (forall ((u@@12 T@U) ) (!  (=> (and (= (type u@@12) U@@18) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@12))) (= (MapType0Select (|Map#Elements| m@@19) u@@12) (MapType0Select (|Map#Elements| |m'|) u@@12))) :qid |DafnyPre.1226:35| :skolemid |8324| :no-pattern (type u@@12) :no-pattern (U_2_int u@@12) :no-pattern (U_2_bool u@@12) )))) (=> (and (forall ((u@@13 T@U) ) (!  (=> (= (type u@@13) U@@18) (and (=> (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@13)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@13))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@13)) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@13))))) :qid |DafnyPre.1225:35| :skolemid |8323| :no-pattern (type u@@13) :no-pattern (U_2_int u@@13) :no-pattern (U_2_bool u@@13) )) (forall ((u@@14 T@U) ) (!  (=> (and (= (type u@@14) U@@18) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@14))) (= (MapType0Select (|Map#Elements| m@@19) u@@14) (MapType0Select (|Map#Elements| |m'|) u@@14))) :qid |DafnyPre.1226:35| :skolemid |8324| :no-pattern (type u@@14) :no-pattern (U_2_int u@@14) :no-pattern (U_2_bool u@@14) ))) (|Map#Equal| m@@19 |m'|)))))) :qid |DafnyPre.1223:21| :skolemid |8325| :pattern ( (|Map#Equal| m@@19 |m'|)) )))
(assert (forall ((m@@20 T@U) (|m'@@0| T@U) ) (! (let ((V@@18 (MapTypeInv1 (type m@@20)))) (let ((U@@19 (MapTypeInv0 (type m@@20)))) (=> (and (and (= (type m@@20) (MapType U@@19 V@@18)) (= (type |m'@@0|) (MapType U@@19 V@@18))) (|Map#Equal| m@@20 |m'@@0|)) (= m@@20 |m'@@0|)))) :qid |DafnyPre.1228:21| :skolemid |8326| :pattern ( (|Map#Equal| m@@20 |m'@@0|)) )))
(assert (forall ((m@@21 T@U) (|m'@@1| T@U) ) (! (let ((V@@19 (MapTypeInv1 (type m@@21)))) (let ((U@@20 (MapTypeInv0 (type m@@21)))) (=> (and (= (type m@@21) (MapType U@@20 V@@19)) (= (type |m'@@1|) (MapType U@@20 V@@19))) (and (=> (|Map#Disjoint| m@@21 |m'@@1|) (forall ((o@@52 T@U) ) (!  (=> (= (type o@@52) U@@20) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@21) o@@52))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@52))))) :qid |DafnyPre.1235:38| :skolemid |8327| :pattern ( (MapType0Select (|Map#Domain| m@@21) o@@52)) :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@52)) ))) (=> (forall ((o@@53 T@U) ) (!  (=> (= (type o@@53) U@@20) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@21) o@@53))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@53))))) :qid |DafnyPre.1235:38| :skolemid |8327| :pattern ( (MapType0Select (|Map#Domain| m@@21) o@@53)) :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@53)) )) (|Map#Disjoint| m@@21 |m'@@1|)))))) :qid |DafnyPre.1233:21| :skolemid |8328| :pattern ( (|Map#Disjoint| m@@21 |m'@@1|)) )))
(assert (forall ((arg0@@99 T@U) ) (! (let ((V@@20 (IMapTypeInv1 (type arg0@@99)))) (= (type (|IMap#Values| arg0@@99)) (MapType0Type V@@20 boolType))) :qid |funType:IMap#Values| :pattern ( (|IMap#Values| arg0@@99)) )))
(assert (forall ((m@@22 T@U) (v@@42 T@U) ) (! (let ((V@@21 (type v@@42))) (let ((U@@21 (IMapTypeInv0 (type m@@22)))) (=> (= (type m@@22) (IMapType U@@21 V@@21)) (and (=> (U_2_bool (MapType0Select (|IMap#Values| m@@22) v@@42)) (exists ((u@@15 T@U) ) (!  (and (= (type u@@15) U@@21) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@22) u@@15)) (= v@@42 (MapType0Select (|IMap#Elements| m@@22) u@@15)))) :qid |DafnyPre.1258:10| :skolemid |8329| :pattern ( (MapType0Select (|IMap#Domain| m@@22) u@@15)) :pattern ( (MapType0Select (|IMap#Elements| m@@22) u@@15)) ))) (=> (exists ((u@@16 T@U) ) (!  (and (= (type u@@16) U@@21) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@22) u@@16)) (= v@@42 (MapType0Select (|IMap#Elements| m@@22) u@@16)))) :qid |DafnyPre.1258:10| :skolemid |8329| :pattern ( (MapType0Select (|IMap#Domain| m@@22) u@@16)) :pattern ( (MapType0Select (|IMap#Elements| m@@22) u@@16)) )) (U_2_bool (MapType0Select (|IMap#Values| m@@22) v@@42))))))) :qid |DafnyPre.1256:20| :skolemid |8330| :pattern ( (MapType0Select (|IMap#Values| m@@22) v@@42)) )))
(assert (forall ((arg0@@100 T@U) ) (! (= (type (|IMap#Items| arg0@@100)) (MapType0Type BoxType boolType)) :qid |funType:IMap#Items| :pattern ( (|IMap#Items| arg0@@100)) )))
(assert (forall ((m@@23 T@U) (item@@0 T@U) ) (!  (=> (and (= (type m@@23) (IMapType BoxType BoxType)) (= (type item@@0) BoxType)) (and (=> (U_2_bool (MapType0Select (|IMap#Items| m@@23) item@@0)) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0))))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0)))) (U_2_bool (MapType0Select (|IMap#Items| m@@23) item@@0))))) :qid |DafnyPre.1273:15| :skolemid |8331| :pattern ( (MapType0Select (|IMap#Items| m@@23) item@@0)) )))
(assert (forall ((U@@22 T@T) (V@@22 T@T) ) (! (= (type (|IMap#Empty| U@@22 V@@22)) (IMapType U@@22 V@@22)) :qid |funType:IMap#Empty| :pattern ( (|IMap#Empty| U@@22 V@@22)) )))
(assert (forall ((u@@17 T@U) (V@@23 T@T) ) (! (let ((U@@23 (type u@@17))) (not (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@23 V@@23)) u@@17)))) :qid |DafnyPre.1280:21| :skolemid |8332| :pattern ( (let ((U@@23 (type u@@17))) (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@23 V@@23)) u@@17))) )))
(assert (forall ((arg0@@101 T@U) (arg1@@45 T@U) (arg2@@6 T@U) ) (! (let ((V@@24 (MapType0TypeInv1 (type arg1@@45)))) (let ((U@@24 (MapType0TypeInv0 (type arg0@@101)))) (= (type (|IMap#Glue| arg0@@101 arg1@@45 arg2@@6)) (IMapType U@@24 V@@24)))) :qid |funType:IMap#Glue| :pattern ( (|IMap#Glue| arg0@@101 arg1@@45 arg2@@6)) )))
(assert (forall ((a@@76 T@U) (b@@55 T@U) (t@@32 T@U) ) (! (let ((V@@25 (MapType0TypeInv1 (type b@@55)))) (let ((U@@25 (MapType0TypeInv0 (type a@@76)))) (=> (and (and (= (type a@@76) (MapType0Type U@@25 boolType)) (= (type b@@55) (MapType0Type U@@25 V@@25))) (= (type t@@32) TyType)) (= (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@32)) a@@76)))) :qid |DafnyPre.1285:21| :skolemid |8333| :pattern ( (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@32))) )))
(assert (forall ((a@@77 T@U) (b@@56 T@U) (t@@33 T@U) ) (! (let ((V@@26 (MapType0TypeInv1 (type b@@56)))) (let ((U@@26 (MapType0TypeInv0 (type a@@77)))) (=> (and (and (= (type a@@77) (MapType0Type U@@26 boolType)) (= (type b@@56) (MapType0Type U@@26 V@@26))) (= (type t@@33) TyType)) (= (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@33)) b@@56)))) :qid |DafnyPre.1288:21| :skolemid |8334| :pattern ( (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@33))) )))
(assert (forall ((a@@78 T@U) (b@@57 T@U) (t@@34 T@U) ) (! (let ((V@@27 (MapType0TypeInv1 (type b@@57)))) (let ((U@@27 (MapType0TypeInv0 (type a@@78)))) (=> (and (and (= (type a@@78) (MapType0Type U@@27 boolType)) (= (type b@@57) (MapType0Type U@@27 V@@27))) (= (type t@@34) TyType)) ($Is (|IMap#Glue| a@@78 b@@57 t@@34) t@@34)))) :qid |DafnyPre.1291:21| :skolemid |8335| :pattern ( ($Is (|IMap#Glue| a@@78 b@@57 t@@34) t@@34)) )))
(assert (forall ((arg0@@102 T@U) (arg1@@46 T@U) (arg2@@7 T@U) ) (! (let ((V@@28 (type arg2@@7))) (let ((U@@28 (type arg1@@46))) (= (type (|IMap#Build| arg0@@102 arg1@@46 arg2@@7)) (IMapType U@@28 V@@28)))) :qid |funType:IMap#Build| :pattern ( (|IMap#Build| arg0@@102 arg1@@46 arg2@@7)) )))
(assert (forall ((m@@24 T@U) (u@@18 T@U) (|u'@@0| T@U) (v@@43 T@U) ) (! (let ((V@@29 (type v@@43))) (let ((U@@29 (type u@@18))) (=> (and (= (type m@@24) (IMapType U@@29 V@@29)) (= (type |u'@@0|) U@@29)) (and (=> (= |u'@@0| u@@18) (and (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|) v@@43))) (=> (not (= |u'@@0| u@@18)) (and (and (=> (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| m@@24) |u'@@0|))) (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@24) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)))) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|) (MapType0Select (|IMap#Elements| m@@24) |u'@@0|)))))))) :qid |DafnyPre.1301:21| :skolemid |8336| :pattern ( (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) )))
(assert (forall ((m@@25 T@U) (|m'@@2| T@U) ) (! (let ((V@@30 (IMapTypeInv1 (type m@@25)))) (let ((U@@30 (IMapTypeInv0 (type m@@25)))) (=> (and (= (type m@@25) (IMapType U@@30 V@@30)) (= (type |m'@@2|) (IMapType U@@30 V@@30))) (and (=> (|IMap#Equal| m@@25 |m'@@2|) (and (forall ((u@@19 T@U) ) (!  (=> (= (type u@@19) U@@30) (and (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@19)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@19))) (=> (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@19)) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@19))))) :qid |DafnyPre.1312:36| :skolemid |8337| :no-pattern (type u@@19) :no-pattern (U_2_int u@@19) :no-pattern (U_2_bool u@@19) )) (forall ((u@@20 T@U) ) (!  (=> (and (= (type u@@20) U@@30) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@20))) (= (MapType0Select (|IMap#Elements| m@@25) u@@20) (MapType0Select (|IMap#Elements| |m'@@2|) u@@20))) :qid |DafnyPre.1313:35| :skolemid |8338| :no-pattern (type u@@20) :no-pattern (U_2_int u@@20) :no-pattern (U_2_bool u@@20) )))) (=> (and (forall ((u@@21 T@U) ) (!  (=> (= (type u@@21) U@@30) (and (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@21)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@21))) (=> (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@21)) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@21))))) :qid |DafnyPre.1312:36| :skolemid |8337| :no-pattern (type u@@21) :no-pattern (U_2_int u@@21) :no-pattern (U_2_bool u@@21) )) (forall ((u@@22 T@U) ) (!  (=> (and (= (type u@@22) U@@30) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@22))) (= (MapType0Select (|IMap#Elements| m@@25) u@@22) (MapType0Select (|IMap#Elements| |m'@@2|) u@@22))) :qid |DafnyPre.1313:35| :skolemid |8338| :no-pattern (type u@@22) :no-pattern (U_2_int u@@22) :no-pattern (U_2_bool u@@22) ))) (|IMap#Equal| m@@25 |m'@@2|)))))) :qid |DafnyPre.1310:21| :skolemid |8339| :pattern ( (|IMap#Equal| m@@25 |m'@@2|)) )))
(assert (forall ((m@@26 T@U) (|m'@@3| T@U) ) (! (let ((V@@31 (IMapTypeInv1 (type m@@26)))) (let ((U@@31 (IMapTypeInv0 (type m@@26)))) (=> (and (and (= (type m@@26) (IMapType U@@31 V@@31)) (= (type |m'@@3|) (IMapType U@@31 V@@31))) (|IMap#Equal| m@@26 |m'@@3|)) (= m@@26 |m'@@3|)))) :qid |DafnyPre.1315:21| :skolemid |8340| :pattern ( (|IMap#Equal| m@@26 |m'@@3|)) )))
(assert (forall ((x@@41 Int) (y@@12 Int) ) (! (= (INTERNAL_add_boogie x@@41 y@@12) (+ x@@41 y@@12)) :qid |DafnyPre.1323:30| :skolemid |8341| :pattern ( (INTERNAL_add_boogie x@@41 y@@12)) )))
(assert (forall ((x@@42 Int) (y@@13 Int) ) (! (= (INTERNAL_sub_boogie x@@42 y@@13) (- x@@42 y@@13)) :qid |DafnyPre.1324:30| :skolemid |8342| :pattern ( (INTERNAL_sub_boogie x@@42 y@@13)) )))
(assert (forall ((x@@43 Int) (y@@14 Int) ) (! (= (INTERNAL_mul_boogie x@@43 y@@14) (* x@@43 y@@14)) :qid |DafnyPre.1325:30| :skolemid |8343| :pattern ( (INTERNAL_mul_boogie x@@43 y@@14)) )))
(assert (forall ((x@@44 Int) (y@@15 Int) ) (! (= (INTERNAL_div_boogie x@@44 y@@15) (div x@@44 y@@15)) :qid |DafnyPre.1326:30| :skolemid |8344| :pattern ( (INTERNAL_div_boogie x@@44 y@@15)) )))
(assert (forall ((x@@45 Int) (y@@16 Int) ) (! (= (INTERNAL_mod_boogie x@@45 y@@16) (mod x@@45 y@@16)) :qid |DafnyPre.1327:30| :skolemid |8345| :pattern ( (INTERNAL_mod_boogie x@@45 y@@16)) )))
(assert (forall ((x@@46 Int) (y@@17 Int) ) (!  (and (=> (INTERNAL_lt_boogie x@@46 y@@17) (< x@@46 y@@17)) (=> (< x@@46 y@@17) (INTERNAL_lt_boogie x@@46 y@@17))) :qid |DafnyPre.1328:51| :skolemid |8346| :pattern ( (INTERNAL_lt_boogie x@@46 y@@17)) )))
(assert (forall ((x@@47 Int) (y@@18 Int) ) (!  (and (=> (INTERNAL_le_boogie x@@47 y@@18) (<= x@@47 y@@18)) (=> (<= x@@47 y@@18) (INTERNAL_le_boogie x@@47 y@@18))) :qid |DafnyPre.1329:51| :skolemid |8347| :pattern ( (INTERNAL_le_boogie x@@47 y@@18)) )))
(assert (forall ((x@@48 Int) (y@@19 Int) ) (!  (and (=> (INTERNAL_gt_boogie x@@48 y@@19) (> x@@48 y@@19)) (=> (> x@@48 y@@19) (INTERNAL_gt_boogie x@@48 y@@19))) :qid |DafnyPre.1330:51| :skolemid |8348| :pattern ( (INTERNAL_gt_boogie x@@48 y@@19)) )))
(assert (forall ((x@@49 Int) (y@@20 Int) ) (!  (and (=> (INTERNAL_ge_boogie x@@49 y@@20) (>= x@@49 y@@20)) (=> (>= x@@49 y@@20) (INTERNAL_ge_boogie x@@49 y@@20))) :qid |DafnyPre.1331:51| :skolemid |8349| :pattern ( (INTERNAL_ge_boogie x@@49 y@@20)) )))
(assert (forall ((x@@50 Int) (y@@21 Int) ) (! (= (Mul x@@50 y@@21) (* x@@50 y@@21)) :qid |DafnyPre.1333:14| :skolemid |8350| :pattern ( (Mul x@@50 y@@21)) )))
(assert (forall ((x@@51 Int) (y@@22 Int) ) (! (= (Div x@@51 y@@22) (div x@@51 y@@22)) :qid |DafnyPre.1334:14| :skolemid |8351| :pattern ( (Div x@@51 y@@22)) )))
(assert (forall ((x@@52 Int) (y@@23 Int) ) (! (= (Mod x@@52 y@@23) (mod x@@52 y@@23)) :qid |DafnyPre.1335:14| :skolemid |8352| :pattern ( (Mod x@@52 y@@23)) )))
(assert (forall ((x@@53 Int) (y@@24 Int) ) (! (= (Add x@@53 y@@24) (+ x@@53 y@@24)) :qid |DafnyPre.1336:14| :skolemid |8353| :pattern ( (Add x@@53 y@@24)) )))
(assert (forall ((x@@54 Int) (y@@25 Int) ) (! (= (Sub x@@54 y@@25) (- x@@54 y@@25)) :qid |DafnyPre.1337:14| :skolemid |8354| :pattern ( (Sub x@@54 y@@25)) )))
(assert (forall ((A@@2 T@U) (B T@U) (a@@79 T@U) (b@@58 T@U) ) (!  (=> (and (and (and (and (= (type A@@2) TyType) (= (type B) TyType)) (= (type a@@79) BoxType)) (= (type b@@58) BoxType)) (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58)) (< (BoxRank a@@79) (BoxRank b@@58))) :qid |DafnyPre.1378:15| :skolemid |8355| :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank a@@79)) :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank b@@58)) )))
(assert (forall ((A@@3 T@U) (B@@0 T@U) (a@@80 T@U) (b@@59 T@U) ) (!  (=> (and (and (and (and (= (type A@@3) TyType) (= (type B@@0) TyType)) (= (type a@@80) BoxType)) (= (type b@@59) (SeqType BoxType))) (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59))) (< (BoxRank a@@80) (|Seq#Rank| b@@59))) :qid |DafnyPre.1383:15| :skolemid |8356| :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (BoxRank a@@80)) :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (|Seq#Rank| b@@59)) )))
(assert (forall ((A@@4 T@U) (B@@1 T@U) (a@@81 T@U) (b@@60 T@U) ) (!  (=> (and (and (and (and (= (type A@@4) TyType) (= (type B@@1) TyType)) (= (type a@@81) (SeqType BoxType))) (= (type b@@60) BoxType)) (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60)) (< (|Seq#Rank| a@@81) (BoxRank b@@60))) :qid |DafnyPre.1388:15| :skolemid |8357| :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (|Seq#Rank| a@@81)) :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (BoxRank b@@60)) )))
(assert (= (type Tclass._System.nat) TyType))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (forall ((bx@@34 T@U) ) (!  (=> (and (= (type bx@@34) BoxType) ($IsBox bx@@34 Tclass._System.nat)) (and (= ($Box ($Unbox intType bx@@34)) bx@@34) ($Is ($Unbox intType bx@@34) Tclass._System.nat))) :qid |unknown.0:0| :skolemid |8358| :pattern ( ($IsBox bx@@34 Tclass._System.nat)) )))
(assert (forall ((|x#0| T@U) ) (!  (=> (= (type |x#0|) intType) (and (=> ($Is |x#0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0|))) (=> (<= (LitInt 0) (U_2_int |x#0|)) ($Is |x#0| Tclass._System.nat)))) :qid |nofile.1:120| :skolemid |8359| :pattern ( ($Is |x#0| Tclass._System.nat)) )))
(assert (forall ((|x#0@@0| T@U) ($h T@U) ) (!  (=> (and (= (type |x#0@@0|) intType) (= (type $h) (MapType0Type refType MapType1Type))) ($IsAlloc |x#0@@0| Tclass._System.nat $h)) :qid |nofile.1:120| :skolemid |8360| :pattern ( ($IsAlloc |x#0@@0| Tclass._System.nat $h)) )))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (forall ((bx@@35 T@U) ) (!  (=> (and (= (type bx@@35) BoxType) ($IsBox bx@@35 Tclass._System.object?)) (and (= ($Box ($Unbox refType bx@@35)) bx@@35) ($Is ($Unbox refType bx@@35) Tclass._System.object?))) :qid |unknown.0:0| :skolemid |8361| :pattern ( ($IsBox bx@@35 Tclass._System.object?)) )))
(assert (forall (($o T@U) ) (!  (=> (= (type $o) refType) ($Is $o Tclass._System.object?)) :qid |unknown.0:0| :skolemid |8362| :pattern ( ($Is $o Tclass._System.object?)) )))
(assert (= (type null) refType))
(assert (forall (($o@@0 T@U) ($h@@0 T@U) ) (!  (=> (and (= (type $o@@0) refType) (= (type $h@@0) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@0 Tclass._System.object? $h@@0) (or (= $o@@0 null) (U_2_bool (MapType1Select (MapType0Select $h@@0 $o@@0) alloc)))) (=> (or (= $o@@0 null) (U_2_bool (MapType1Select (MapType0Select $h@@0 $o@@0) alloc))) ($IsAlloc $o@@0 Tclass._System.object? $h@@0)))) :qid |unknown.0:0| :skolemid |8363| :pattern ( ($IsAlloc $o@@0 Tclass._System.object? $h@@0)) )))
(assert (= (type Tclass._System.object) TyType))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (forall ((bx@@36 T@U) ) (!  (=> (and (= (type bx@@36) BoxType) ($IsBox bx@@36 Tclass._System.object)) (and (= ($Box ($Unbox refType bx@@36)) bx@@36) ($Is ($Unbox refType bx@@36) Tclass._System.object))) :qid |unknown.0:0| :skolemid |8364| :pattern ( ($IsBox bx@@36 Tclass._System.object)) )))
(assert (forall ((|c#0| T@U) ) (!  (=> (= (type |c#0|) refType) (and (=> ($Is |c#0| Tclass._System.object) (and ($Is |c#0| Tclass._System.object?) (not (= |c#0| null)))) (=> (and ($Is |c#0| Tclass._System.object?) (not (= |c#0| null))) ($Is |c#0| Tclass._System.object)))) :qid |unknown.0:0| :skolemid |8365| :pattern ( ($Is |c#0| Tclass._System.object)) )))
(assert (forall ((|c#0@@0| T@U) ($h@@1 T@U) ) (!  (=> (and (= (type |c#0@@0|) refType) (= (type $h@@1) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |c#0@@0| Tclass._System.object $h@@1) ($IsAlloc |c#0@@0| Tclass._System.object? $h@@1)) (=> ($IsAlloc |c#0@@0| Tclass._System.object? $h@@1) ($IsAlloc |c#0@@0| Tclass._System.object $h@@1)))) :qid |unknown.0:0| :skolemid |8366| :pattern ( ($IsAlloc |c#0@@0| Tclass._System.object $h@@1)) )))
(assert (forall ((arg0@@103 T@U) ) (! (= (type (Tclass._System.array? arg0@@103)) TyType) :qid |funType:Tclass._System.array?| :pattern ( (Tclass._System.array? arg0@@103)) )))
(assert (forall ((|#$arg| T@U) ) (!  (=> (= (type |#$arg|) TyType) (= (Tag (Tclass._System.array? |#$arg|)) Tagclass._System.array?)) :qid |unknown.0:0| :skolemid |8367| :pattern ( (Tclass._System.array? |#$arg|)) )))
(assert (forall ((arg0@@104 T@U) ) (! (= (type (Tclass._System.array?_0 arg0@@104)) TyType) :qid |funType:Tclass._System.array?_0| :pattern ( (Tclass._System.array?_0 arg0@@104)) )))
(assert (forall ((|#$arg@@0| T@U) ) (!  (=> (= (type |#$arg@@0|) TyType) (= (Tclass._System.array?_0 (Tclass._System.array? |#$arg@@0|)) |#$arg@@0|)) :qid |unknown.0:0| :skolemid |8368| :pattern ( (Tclass._System.array? |#$arg@@0|)) )))
(assert (forall ((|#$arg@@1| T@U) (bx@@37 T@U) ) (!  (=> (and (and (= (type |#$arg@@1|) TyType) (= (type bx@@37) BoxType)) ($IsBox bx@@37 (Tclass._System.array? |#$arg@@1|))) (and (= ($Box ($Unbox refType bx@@37)) bx@@37) ($Is ($Unbox refType bx@@37) (Tclass._System.array? |#$arg@@1|)))) :qid |unknown.0:0| :skolemid |8369| :pattern ( ($IsBox bx@@37 (Tclass._System.array? |#$arg@@1|))) )))
(assert (forall ((arg0@@105 T@U) ) (! (= (type (dtype arg0@@105)) TyType) :qid |funType:dtype| :pattern ( (dtype arg0@@105)) )))
(assert (forall ((|#$arg@@2| T@U) ($h@@2 T@U) ($o@@1 T@U) ($i0 Int) ) (!  (=> (and (and (and (= (type |#$arg@@2|) TyType) (= (type $h@@2) (MapType0Type refType MapType1Type))) (= (type $o@@1) refType)) (and (and ($IsGoodHeap $h@@2) (and (not (= $o@@1 null)) (= (dtype $o@@1) (Tclass._System.array? |#$arg@@2|)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@1))))) ($IsBox (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) |#$arg@@2|)) :qid |unknown.0:0| :skolemid |8370| :pattern ( (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) (Tclass._System.array? |#$arg@@2|)) )))
(assert (forall ((|#$arg@@3| T@U) ($h@@3 T@U) ($o@@2 T@U) ($i0@@0 Int) ) (!  (=> (and (and (= (type |#$arg@@3|) TyType) (= (type $h@@3) (MapType0Type refType MapType1Type))) (= (type $o@@2) refType)) (=> (and (and (and ($IsGoodHeap $h@@3) (and (not (= $o@@2 null)) (= (dtype $o@@2) (Tclass._System.array? |#$arg@@3|)))) (and (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@2)))) (U_2_bool (MapType1Select (MapType0Select $h@@3 $o@@2) alloc))) ($IsAllocBox (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) |#$arg@@3| $h@@3))) :qid |unknown.0:0| :skolemid |8371| :pattern ( (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) (Tclass._System.array? |#$arg@@3|)) )))
(assert (forall ((|#$arg@@4| T@U) ($o@@3 T@U) ) (!  (=> (and (= (type |#$arg@@4|) TyType) (= (type $o@@3) refType)) (and (=> ($Is $o@@3 (Tclass._System.array? |#$arg@@4|)) (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? |#$arg@@4|)))) (=> (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? |#$arg@@4|))) ($Is $o@@3 (Tclass._System.array? |#$arg@@4|))))) :qid |unknown.0:0| :skolemid |8372| :pattern ( ($Is $o@@3 (Tclass._System.array? |#$arg@@4|))) )))
(assert (forall ((|#$arg@@5| T@U) ($o@@4 T@U) ($h@@4 T@U) ) (!  (=> (and (and (= (type |#$arg@@5|) TyType) (= (type $o@@4) refType)) (= (type $h@@4) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@4 (Tclass._System.array? |#$arg@@5|) $h@@4) (or (= $o@@4 null) (U_2_bool (MapType1Select (MapType0Select $h@@4 $o@@4) alloc)))) (=> (or (= $o@@4 null) (U_2_bool (MapType1Select (MapType0Select $h@@4 $o@@4) alloc))) ($IsAlloc $o@@4 (Tclass._System.array? |#$arg@@5|) $h@@4)))) :qid |unknown.0:0| :skolemid |8373| :pattern ( ($IsAlloc $o@@4 (Tclass._System.array? |#$arg@@5|) $h@@4)) )))
(assert (forall ((|#$arg@@6| T@U) ($o@@5 T@U) ) (!  (=> (and (and (= (type |#$arg@@6|) TyType) (= (type $o@@5) refType)) (and (not (= $o@@5 null)) (= (dtype $o@@5) (Tclass._System.array? |#$arg@@6|)))) ($Is (int_2_U (_System.array.Length $o@@5)) TInt)) :qid |unknown.0:0| :skolemid |8374| :pattern ( (_System.array.Length $o@@5) (Tclass._System.array? |#$arg@@6|)) )))
(assert (forall ((|#$arg@@7| T@U) ($h@@5 T@U) ($o@@6 T@U) ) (!  (=> (and (and (and (= (type |#$arg@@7|) TyType) (= (type $h@@5) (MapType0Type refType MapType1Type))) (= (type $o@@6) refType)) (and (and ($IsGoodHeap $h@@5) (and (not (= $o@@6 null)) (= (dtype $o@@6) (Tclass._System.array? |#$arg@@7|)))) (U_2_bool (MapType1Select (MapType0Select $h@@5 $o@@6) alloc)))) ($IsAlloc (int_2_U (_System.array.Length $o@@6)) TInt $h@@5)) :qid |unknown.0:0| :skolemid |8375| :pattern ( (_System.array.Length $o@@6) (MapType1Select (MapType0Select $h@@5 $o@@6) alloc) (Tclass._System.array? |#$arg@@7|)) )))
(assert (forall ((arg0@@106 T@U) ) (! (= (type (Tclass._System.array arg0@@106)) TyType) :qid |funType:Tclass._System.array| :pattern ( (Tclass._System.array arg0@@106)) )))
(assert (forall ((_System.array$arg T@U) ) (!  (=> (= (type _System.array$arg) TyType) (= (Tag (Tclass._System.array _System.array$arg)) Tagclass._System.array)) :qid |unknown.0:0| :skolemid |8376| :pattern ( (Tclass._System.array _System.array$arg)) )))
(assert (forall ((arg0@@107 T@U) ) (! (= (type (Tclass._System.array_0 arg0@@107)) TyType) :qid |funType:Tclass._System.array_0| :pattern ( (Tclass._System.array_0 arg0@@107)) )))
(assert (forall ((_System.array$arg@@0 T@U) ) (!  (=> (= (type _System.array$arg@@0) TyType) (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@0)) _System.array$arg@@0)) :qid |unknown.0:0| :skolemid |8377| :pattern ( (Tclass._System.array _System.array$arg@@0)) )))
(assert (forall ((_System.array$arg@@1 T@U) (bx@@38 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@1) TyType) (= (type bx@@38) BoxType)) ($IsBox bx@@38 (Tclass._System.array _System.array$arg@@1))) (and (= ($Box ($Unbox refType bx@@38)) bx@@38) ($Is ($Unbox refType bx@@38) (Tclass._System.array _System.array$arg@@1)))) :qid |unknown.0:0| :skolemid |8378| :pattern ( ($IsBox bx@@38 (Tclass._System.array _System.array$arg@@1))) )))
(assert (forall ((_System.array$arg@@2 T@U) (|c#0@@1| T@U) ) (!  (=> (and (= (type _System.array$arg@@2) TyType) (= (type |c#0@@1|) refType)) (and (=> ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@2)) (and ($Is |c#0@@1| (Tclass._System.array? _System.array$arg@@2)) (not (= |c#0@@1| null)))) (=> (and ($Is |c#0@@1| (Tclass._System.array? _System.array$arg@@2)) (not (= |c#0@@1| null))) ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@2))))) :qid |unknown.0:0| :skolemid |8379| :pattern ( ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@2))) )))
(assert (forall ((_System.array$arg@@3 T@U) (|c#0@@2| T@U) ($h@@6 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@3) TyType) (= (type |c#0@@2|) refType)) (= (type $h@@6) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@3) $h@@6) ($IsAlloc |c#0@@2| (Tclass._System.array? _System.array$arg@@3) $h@@6)) (=> ($IsAlloc |c#0@@2| (Tclass._System.array? _System.array$arg@@3) $h@@6) ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@3) $h@@6)))) :qid |unknown.0:0| :skolemid |8380| :pattern ( ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@3) $h@@6)) )))
(assert (forall ((arg0@@108 T@U) ) (! (= (type (Tclass._System.___hFunc0 arg0@@108)) TyType) :qid |funType:Tclass._System.___hFunc0| :pattern ( (Tclass._System.___hFunc0 arg0@@108)) )))
(assert (forall ((|#$R| T@U) ) (!  (=> (= (type |#$R|) TyType) (= (Tag (Tclass._System.___hFunc0 |#$R|)) Tagclass._System.___hFunc0)) :qid |unknown.0:0| :skolemid |8381| :pattern ( (Tclass._System.___hFunc0 |#$R|)) )))
(assert (forall ((arg0@@109 T@U) ) (! (= (type (Tclass._System.___hFunc0_0 arg0@@109)) TyType) :qid |funType:Tclass._System.___hFunc0_0| :pattern ( (Tclass._System.___hFunc0_0 arg0@@109)) )))
(assert (forall ((|#$R@@0| T@U) ) (!  (=> (= (type |#$R@@0|) TyType) (= (Tclass._System.___hFunc0_0 (Tclass._System.___hFunc0 |#$R@@0|)) |#$R@@0|)) :qid |unknown.0:0| :skolemid |8382| :pattern ( (Tclass._System.___hFunc0 |#$R@@0|)) )))
(assert (forall ((|#$R@@1| T@U) (bx@@39 T@U) ) (!  (=> (and (and (= (type |#$R@@1|) TyType) (= (type bx@@39) BoxType)) ($IsBox bx@@39 (Tclass._System.___hFunc0 |#$R@@1|))) (and (= ($Box ($Unbox HandleTypeType bx@@39)) bx@@39) ($Is ($Unbox HandleTypeType bx@@39) (Tclass._System.___hFunc0 |#$R@@1|)))) :qid |unknown.0:0| :skolemid |8383| :pattern ( ($IsBox bx@@39 (Tclass._System.___hFunc0 |#$R@@1|))) )))
(assert  (and (forall ((arg0@@110 T@U) (arg1@@47 T@U) (arg2@@8 T@U) ) (! (= (type (Apply0 arg0@@110 arg1@@47 arg2@@8)) BoxType) :qid |funType:Apply0| :pattern ( (Apply0 arg0@@110 arg1@@47 arg2@@8)) )) (forall ((arg0@@111 T@U) (arg1@@48 T@U) (arg2@@9 T@U) ) (! (= (type (Handle0 arg0@@111 arg1@@48 arg2@@9)) HandleTypeType) :qid |funType:Handle0| :pattern ( (Handle0 arg0@@111 arg1@@48 arg2@@9)) ))))
(assert (forall ((t0@@12 T@U) (heap@@1 T@U) (h@@20 T@U) (r@@6 T@U) (rd T@U) ) (!  (=> (and (and (and (and (= (type t0@@12) TyType) (= (type heap@@1) (MapType0Type refType MapType1Type))) (= (type h@@20) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@6) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (Apply0 t0@@12 heap@@1 (Handle0 h@@20 r@@6 rd)) (MapType0Select h@@20 heap@@1))) :qid |unknown.0:0| :skolemid |8384| :pattern ( (Apply0 t0@@12 heap@@1 (Handle0 h@@20 r@@6 rd))) )))
(assert (forall ((t0@@13 T@U) (heap@@2 T@U) (h@@21 T@U) (r@@7 T@U) (rd@@0 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@13) TyType) (= (type heap@@2) (MapType0Type refType MapType1Type))) (= (type h@@21) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@7) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@0) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (U_2_bool (MapType0Select r@@7 heap@@2))) (Requires0 t0@@13 heap@@2 (Handle0 h@@21 r@@7 rd@@0))) :qid |unknown.0:0| :skolemid |8385| :pattern ( (Requires0 t0@@13 heap@@2 (Handle0 h@@21 r@@7 rd@@0))) )))
(assert (forall ((arg0@@112 T@U) (arg1@@49 T@U) (arg2@@10 T@U) ) (! (= (type (Reads0 arg0@@112 arg1@@49 arg2@@10)) (MapType0Type BoxType boolType)) :qid |funType:Reads0| :pattern ( (Reads0 arg0@@112 arg1@@49 arg2@@10)) )))
(assert (forall ((t0@@14 T@U) (heap@@3 T@U) (h@@22 T@U) (r@@8 T@U) (rd@@1 T@U) (bx@@40 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@14) TyType) (= (type heap@@3) (MapType0Type refType MapType1Type))) (= (type h@@22) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@8) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@1) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (type bx@@40) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads0 t0@@14 heap@@3 (Handle0 h@@22 r@@8 rd@@1)) bx@@40)) (U_2_bool (MapType0Select (MapType0Select rd@@1 heap@@3) bx@@40))) (=> (U_2_bool (MapType0Select (MapType0Select rd@@1 heap@@3) bx@@40)) (U_2_bool (MapType0Select (Reads0 t0@@14 heap@@3 (Handle0 h@@22 r@@8 rd@@1)) bx@@40))))) :qid |unknown.0:0| :skolemid |8386| :pattern ( (MapType0Select (Reads0 t0@@14 heap@@3 (Handle0 h@@22 r@@8 rd@@1)) bx@@40)) )))
(assert (forall ((t0@@15 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@5 T@U) ) (!  (=> (and (and (and (and (= (type t0@@15) TyType) (= (type h0@@0) (MapType0Type refType MapType1Type))) (= (type h1@@0) (MapType0Type refType MapType1Type))) (= (type f@@5) HandleTypeType)) (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) ($Is f@@5 (Tclass._System.___hFunc0 t0@@15))) (forall ((o@@54 T@U) (fld T@U) ) (! (let ((a@@82 (FieldTypeInv0 (type fld)))) (=> (and (and (= (type o@@54) refType) (= (type fld) (FieldType a@@82))) (and (not (= o@@54 null)) (U_2_bool (MapType0Select (Reads0 t0@@15 h0@@0 f@@5) ($Box o@@54))))) (= (MapType1Select (MapType0Select h0@@0 o@@54) fld) (MapType1Select (MapType0Select h1@@0 o@@54) fld)))) :qid |unknown.0:0| :skolemid |8387| :no-pattern (type o@@54) :no-pattern (type fld) :no-pattern (U_2_int o@@54) :no-pattern (U_2_bool o@@54) :no-pattern (U_2_int fld) :no-pattern (U_2_bool fld) )))) (= (Reads0 t0@@15 h0@@0 f@@5) (Reads0 t0@@15 h1@@0 f@@5))) :qid |unknown.0:0| :skolemid |8388| :pattern ( ($HeapSucc h0@@0 h1@@0) (Reads0 t0@@15 h1@@0 f@@5)) )))
(assert (forall ((t0@@16 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@6 T@U) ) (!  (=> (and (and (and (and (= (type t0@@16) TyType) (= (type h0@@1) (MapType0Type refType MapType1Type))) (= (type h1@@1) (MapType0Type refType MapType1Type))) (= (type f@@6) HandleTypeType)) (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) ($Is f@@6 (Tclass._System.___hFunc0 t0@@16))) (forall ((o@@55 T@U) (fld@@0 T@U) ) (! (let ((a@@83 (FieldTypeInv0 (type fld@@0)))) (=> (and (and (= (type o@@55) refType) (= (type fld@@0) (FieldType a@@83))) (and (not (= o@@55 null)) (U_2_bool (MapType0Select (Reads0 t0@@16 h1@@1 f@@6) ($Box o@@55))))) (= (MapType1Select (MapType0Select h0@@1 o@@55) fld@@0) (MapType1Select (MapType0Select h1@@1 o@@55) fld@@0)))) :qid |unknown.0:0| :skolemid |8389| :no-pattern (type o@@55) :no-pattern (type fld@@0) :no-pattern (U_2_int o@@55) :no-pattern (U_2_bool o@@55) :no-pattern (U_2_int fld@@0) :no-pattern (U_2_bool fld@@0) )))) (= (Reads0 t0@@16 h0@@1 f@@6) (Reads0 t0@@16 h1@@1 f@@6))) :qid |unknown.0:0| :skolemid |8390| :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads0 t0@@16 h1@@1 f@@6)) )))
(assert (forall ((t0@@17 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@7 T@U) ) (!  (=> (and (and (and (and (= (type t0@@17) TyType) (= (type h0@@2) (MapType0Type refType MapType1Type))) (= (type h1@@2) (MapType0Type refType MapType1Type))) (= (type f@@7) HandleTypeType)) (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) ($Is f@@7 (Tclass._System.___hFunc0 t0@@17))) (forall ((o@@56 T@U) (fld@@1 T@U) ) (! (let ((a@@84 (FieldTypeInv0 (type fld@@1)))) (=> (and (and (= (type o@@56) refType) (= (type fld@@1) (FieldType a@@84))) (and (not (= o@@56 null)) (U_2_bool (MapType0Select (Reads0 t0@@17 h0@@2 f@@7) ($Box o@@56))))) (= (MapType1Select (MapType0Select h0@@2 o@@56) fld@@1) (MapType1Select (MapType0Select h1@@2 o@@56) fld@@1)))) :qid |unknown.0:0| :skolemid |8391| :no-pattern (type o@@56) :no-pattern (type fld@@1) :no-pattern (U_2_int o@@56) :no-pattern (U_2_bool o@@56) :no-pattern (U_2_int fld@@1) :no-pattern (U_2_bool fld@@1) )))) (and (=> (Requires0 t0@@17 h0@@2 f@@7) (Requires0 t0@@17 h1@@2 f@@7)) (=> (Requires0 t0@@17 h1@@2 f@@7) (Requires0 t0@@17 h0@@2 f@@7)))) :qid |unknown.0:0| :skolemid |8392| :pattern ( ($HeapSucc h0@@2 h1@@2) (Requires0 t0@@17 h1@@2 f@@7)) )))
(assert (forall ((t0@@18 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@8 T@U) ) (!  (=> (and (and (and (and (= (type t0@@18) TyType) (= (type h0@@3) (MapType0Type refType MapType1Type))) (= (type h1@@3) (MapType0Type refType MapType1Type))) (= (type f@@8) HandleTypeType)) (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) ($Is f@@8 (Tclass._System.___hFunc0 t0@@18))) (forall ((o@@57 T@U) (fld@@2 T@U) ) (! (let ((a@@85 (FieldTypeInv0 (type fld@@2)))) (=> (and (and (= (type o@@57) refType) (= (type fld@@2) (FieldType a@@85))) (and (not (= o@@57 null)) (U_2_bool (MapType0Select (Reads0 t0@@18 h1@@3 f@@8) ($Box o@@57))))) (= (MapType1Select (MapType0Select h0@@3 o@@57) fld@@2) (MapType1Select (MapType0Select h1@@3 o@@57) fld@@2)))) :qid |unknown.0:0| :skolemid |8393| :no-pattern (type o@@57) :no-pattern (type fld@@2) :no-pattern (U_2_int o@@57) :no-pattern (U_2_bool o@@57) :no-pattern (U_2_int fld@@2) :no-pattern (U_2_bool fld@@2) )))) (and (=> (Requires0 t0@@18 h0@@3 f@@8) (Requires0 t0@@18 h1@@3 f@@8)) (=> (Requires0 t0@@18 h1@@3 f@@8) (Requires0 t0@@18 h0@@3 f@@8)))) :qid |unknown.0:0| :skolemid |8394| :pattern ( ($HeapSucc h0@@3 h1@@3) (Requires0 t0@@18 h1@@3 f@@8)) )))
(assert (forall ((t0@@19 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@9 T@U) ) (!  (=> (and (and (and (and (= (type t0@@19) TyType) (= (type h0@@4) (MapType0Type refType MapType1Type))) (= (type h1@@4) (MapType0Type refType MapType1Type))) (= (type f@@9) HandleTypeType)) (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) ($Is f@@9 (Tclass._System.___hFunc0 t0@@19))) (forall ((o@@58 T@U) (fld@@3 T@U) ) (! (let ((a@@86 (FieldTypeInv0 (type fld@@3)))) (=> (and (and (= (type o@@58) refType) (= (type fld@@3) (FieldType a@@86))) (and (not (= o@@58 null)) (U_2_bool (MapType0Select (Reads0 t0@@19 h0@@4 f@@9) ($Box o@@58))))) (= (MapType1Select (MapType0Select h0@@4 o@@58) fld@@3) (MapType1Select (MapType0Select h1@@4 o@@58) fld@@3)))) :qid |unknown.0:0| :skolemid |8395| :no-pattern (type o@@58) :no-pattern (type fld@@3) :no-pattern (U_2_int o@@58) :no-pattern (U_2_bool o@@58) :no-pattern (U_2_int fld@@3) :no-pattern (U_2_bool fld@@3) )))) (= (Apply0 t0@@19 h0@@4 f@@9) (Apply0 t0@@19 h1@@4 f@@9))) :qid |unknown.0:0| :skolemid |8396| :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply0 t0@@19 h1@@4 f@@9)) )))
(assert (forall ((t0@@20 T@U) (h0@@5 T@U) (h1@@5 T@U) (f@@10 T@U) ) (!  (=> (and (and (and (and (= (type t0@@20) TyType) (= (type h0@@5) (MapType0Type refType MapType1Type))) (= (type h1@@5) (MapType0Type refType MapType1Type))) (= (type f@@10) HandleTypeType)) (and (and (and ($HeapSucc h0@@5 h1@@5) (and ($IsGoodHeap h0@@5) ($IsGoodHeap h1@@5))) ($Is f@@10 (Tclass._System.___hFunc0 t0@@20))) (forall ((o@@59 T@U) (fld@@4 T@U) ) (! (let ((a@@87 (FieldTypeInv0 (type fld@@4)))) (=> (and (and (= (type o@@59) refType) (= (type fld@@4) (FieldType a@@87))) (and (not (= o@@59 null)) (U_2_bool (MapType0Select (Reads0 t0@@20 h1@@5 f@@10) ($Box o@@59))))) (= (MapType1Select (MapType0Select h0@@5 o@@59) fld@@4) (MapType1Select (MapType0Select h1@@5 o@@59) fld@@4)))) :qid |unknown.0:0| :skolemid |8397| :no-pattern (type o@@59) :no-pattern (type fld@@4) :no-pattern (U_2_int o@@59) :no-pattern (U_2_bool o@@59) :no-pattern (U_2_int fld@@4) :no-pattern (U_2_bool fld@@4) )))) (= (Apply0 t0@@20 h0@@5 f@@10) (Apply0 t0@@20 h1@@5 f@@10))) :qid |unknown.0:0| :skolemid |8398| :pattern ( ($HeapSucc h0@@5 h1@@5) (Apply0 t0@@20 h1@@5 f@@10)) )))
(assert (forall ((t0@@21 T@U) (heap@@4 T@U) (f@@11 T@U) ) (!  (=> (and (and (and (= (type t0@@21) TyType) (= (type heap@@4) (MapType0Type refType MapType1Type))) (= (type f@@11) HandleTypeType)) (and ($IsGoodHeap heap@@4) ($Is f@@11 (Tclass._System.___hFunc0 t0@@21)))) (and (=> (|Set#Equal| (Reads0 t0@@21 $OneHeap f@@11) (|Set#Empty| BoxType)) (|Set#Equal| (Reads0 t0@@21 heap@@4 f@@11) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads0 t0@@21 heap@@4 f@@11) (|Set#Empty| BoxType)) (|Set#Equal| (Reads0 t0@@21 $OneHeap f@@11) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |8399| :pattern ( (Reads0 t0@@21 $OneHeap f@@11) ($IsGoodHeap heap@@4)) :pattern ( (Reads0 t0@@21 heap@@4 f@@11)) )))
(assert (forall ((t0@@22 T@U) (heap@@5 T@U) (f@@12 T@U) ) (!  (=> (and (and (and (= (type t0@@22) TyType) (= (type heap@@5) (MapType0Type refType MapType1Type))) (= (type f@@12) HandleTypeType)) (and (and ($IsGoodHeap heap@@5) ($Is f@@12 (Tclass._System.___hFunc0 t0@@22))) (|Set#Equal| (Reads0 t0@@22 $OneHeap f@@12) (|Set#Empty| BoxType)))) (and (=> (Requires0 t0@@22 $OneHeap f@@12) (Requires0 t0@@22 heap@@5 f@@12)) (=> (Requires0 t0@@22 heap@@5 f@@12) (Requires0 t0@@22 $OneHeap f@@12)))) :qid |unknown.0:0| :skolemid |8400| :pattern ( (Requires0 t0@@22 $OneHeap f@@12) ($IsGoodHeap heap@@5)) :pattern ( (Requires0 t0@@22 heap@@5 f@@12)) )))
(assert (forall ((f@@13 T@U) (t0@@23 T@U) ) (!  (=> (and (= (type f@@13) HandleTypeType) (= (type t0@@23) TyType)) (and (=> ($Is f@@13 (Tclass._System.___hFunc0 t0@@23)) (forall ((h@@23 T@U) ) (!  (=> (= (type h@@23) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap h@@23) (Requires0 t0@@23 h@@23 f@@13)) ($IsBox (Apply0 t0@@23 h@@23 f@@13) t0@@23))) :qid |DafnyPre.521:12| :skolemid |8401| :pattern ( (Apply0 t0@@23 h@@23 f@@13)) ))) (=> (forall ((h@@24 T@U) ) (!  (=> (= (type h@@24) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap h@@24) (Requires0 t0@@23 h@@24 f@@13)) ($IsBox (Apply0 t0@@23 h@@24 f@@13) t0@@23))) :qid |DafnyPre.521:12| :skolemid |8401| :pattern ( (Apply0 t0@@23 h@@24 f@@13)) )) ($Is f@@13 (Tclass._System.___hFunc0 t0@@23))))) :qid |unknown.0:0| :skolemid |8402| :pattern ( ($Is f@@13 (Tclass._System.___hFunc0 t0@@23))) )))
(assert (forall ((f@@14 T@U) (t0@@24 T@U) (u0 T@U) ) (!  (=> (and (and (and (= (type f@@14) HandleTypeType) (= (type t0@@24) TyType)) (= (type u0) TyType)) (and ($Is f@@14 (Tclass._System.___hFunc0 t0@@24)) (forall ((bx@@41 T@U) ) (!  (=> (and (= (type bx@@41) BoxType) ($IsBox bx@@41 t0@@24)) ($IsBox bx@@41 u0)) :qid |unknown.0:0| :skolemid |8403| :pattern ( ($IsBox bx@@41 t0@@24)) :pattern ( ($IsBox bx@@41 u0)) )))) ($Is f@@14 (Tclass._System.___hFunc0 u0))) :qid |unknown.0:0| :skolemid |8404| :pattern ( ($Is f@@14 (Tclass._System.___hFunc0 t0@@24)) ($Is f@@14 (Tclass._System.___hFunc0 u0))) )))
(assert (forall ((f@@15 T@U) (t0@@25 T@U) (h@@25 T@U) ) (!  (=> (and (and (and (= (type f@@15) HandleTypeType) (= (type t0@@25) TyType)) (= (type h@@25) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@25)) (and (=> ($IsAlloc f@@15 (Tclass._System.___hFunc0 t0@@25) h@@25) (=> (Requires0 t0@@25 h@@25 f@@15) (forall ((r@@9 T@U) ) (!  (=> (= (type r@@9) refType) (=> (and (not (= r@@9 null)) (U_2_bool (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@9)))) (U_2_bool (MapType1Select (MapType0Select h@@25 r@@9) alloc)))) :qid |unknown.0:0| :skolemid |8405| :pattern ( (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@9))) )))) (=> (=> (Requires0 t0@@25 h@@25 f@@15) (forall ((r@@10 T@U) ) (!  (=> (= (type r@@10) refType) (=> (and (not (= r@@10 null)) (U_2_bool (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@10)))) (U_2_bool (MapType1Select (MapType0Select h@@25 r@@10) alloc)))) :qid |unknown.0:0| :skolemid |8405| :pattern ( (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@10))) ))) ($IsAlloc f@@15 (Tclass._System.___hFunc0 t0@@25) h@@25)))) :qid |unknown.0:0| :skolemid |8406| :pattern ( ($IsAlloc f@@15 (Tclass._System.___hFunc0 t0@@25) h@@25)) )))
(assert (forall ((f@@16 T@U) (t0@@26 T@U) (h@@26 T@U) ) (!  (=> (and (and (and (and (= (type f@@16) HandleTypeType) (= (type t0@@26) TyType)) (= (type h@@26) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@26) ($IsAlloc f@@16 (Tclass._System.___hFunc0 t0@@26) h@@26))) (Requires0 t0@@26 h@@26 f@@16)) ($IsAllocBox (Apply0 t0@@26 h@@26 f@@16) t0@@26 h@@26)) :qid |unknown.0:0| :skolemid |8407| :pattern ( ($IsAlloc f@@16 (Tclass._System.___hFunc0 t0@@26) h@@26)) )))
(assert (forall ((arg0@@113 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0 arg0@@113)) TyType) :qid |funType:Tclass._System.___hPartialFunc0| :pattern ( (Tclass._System.___hPartialFunc0 arg0@@113)) )))
(assert (forall ((|#$R@@2| T@U) ) (!  (=> (= (type |#$R@@2|) TyType) (= (Tag (Tclass._System.___hPartialFunc0 |#$R@@2|)) Tagclass._System.___hPartialFunc0)) :qid |unknown.0:0| :skolemid |8408| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@2|)) )))
(assert (forall ((arg0@@114 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0_0 arg0@@114)) TyType) :qid |funType:Tclass._System.___hPartialFunc0_0| :pattern ( (Tclass._System.___hPartialFunc0_0 arg0@@114)) )))
(assert (forall ((|#$R@@3| T@U) ) (!  (=> (= (type |#$R@@3|) TyType) (= (Tclass._System.___hPartialFunc0_0 (Tclass._System.___hPartialFunc0 |#$R@@3|)) |#$R@@3|)) :qid |unknown.0:0| :skolemid |8409| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@3|)) )))
(assert (forall ((|#$R@@4| T@U) (bx@@42 T@U) ) (!  (=> (and (and (= (type |#$R@@4|) TyType) (= (type bx@@42) BoxType)) ($IsBox bx@@42 (Tclass._System.___hPartialFunc0 |#$R@@4|))) (and (= ($Box ($Unbox HandleTypeType bx@@42)) bx@@42) ($Is ($Unbox HandleTypeType bx@@42) (Tclass._System.___hPartialFunc0 |#$R@@4|)))) :qid |unknown.0:0| :skolemid |8410| :pattern ( ($IsBox bx@@42 (Tclass._System.___hPartialFunc0 |#$R@@4|))) )))
(assert (forall ((|#$R@@5| T@U) (|f#0| T@U) ) (!  (=> (and (= (type |#$R@@5|) TyType) (= (type |f#0|) HandleTypeType)) (and (=> ($Is |f#0| (Tclass._System.___hPartialFunc0 |#$R@@5|)) (and ($Is |f#0| (Tclass._System.___hFunc0 |#$R@@5|)) (|Set#Equal| (Reads0 |#$R@@5| $OneHeap |f#0|) (|Set#Empty| BoxType)))) (=> (and ($Is |f#0| (Tclass._System.___hFunc0 |#$R@@5|)) (|Set#Equal| (Reads0 |#$R@@5| $OneHeap |f#0|) (|Set#Empty| BoxType))) ($Is |f#0| (Tclass._System.___hPartialFunc0 |#$R@@5|))))) :qid |unknown.0:0| :skolemid |8411| :pattern ( ($Is |f#0| (Tclass._System.___hPartialFunc0 |#$R@@5|))) )))
(assert (forall ((|#$R@@6| T@U) (|f#0@@0| T@U) ($h@@7 T@U) ) (!  (=> (and (and (= (type |#$R@@6|) TyType) (= (type |f#0@@0|) HandleTypeType)) (= (type $h@@7) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@6|) $h@@7) ($IsAlloc |f#0@@0| (Tclass._System.___hFunc0 |#$R@@6|) $h@@7)) (=> ($IsAlloc |f#0@@0| (Tclass._System.___hFunc0 |#$R@@6|) $h@@7) ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@6|) $h@@7)))) :qid |unknown.0:0| :skolemid |8412| :pattern ( ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@6|) $h@@7)) )))
(assert (forall ((arg0@@115 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0 arg0@@115)) TyType) :qid |funType:Tclass._System.___hTotalFunc0| :pattern ( (Tclass._System.___hTotalFunc0 arg0@@115)) )))
(assert (forall ((|#$R@@7| T@U) ) (!  (=> (= (type |#$R@@7|) TyType) (= (Tag (Tclass._System.___hTotalFunc0 |#$R@@7|)) Tagclass._System.___hTotalFunc0)) :qid |unknown.0:0| :skolemid |8413| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@7|)) )))
(assert (forall ((arg0@@116 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0_0 arg0@@116)) TyType) :qid |funType:Tclass._System.___hTotalFunc0_0| :pattern ( (Tclass._System.___hTotalFunc0_0 arg0@@116)) )))
(assert (forall ((|#$R@@8| T@U) ) (!  (=> (= (type |#$R@@8|) TyType) (= (Tclass._System.___hTotalFunc0_0 (Tclass._System.___hTotalFunc0 |#$R@@8|)) |#$R@@8|)) :qid |unknown.0:0| :skolemid |8414| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@8|)) )))
(assert (forall ((|#$R@@9| T@U) (bx@@43 T@U) ) (!  (=> (and (and (= (type |#$R@@9|) TyType) (= (type bx@@43) BoxType)) ($IsBox bx@@43 (Tclass._System.___hTotalFunc0 |#$R@@9|))) (and (= ($Box ($Unbox HandleTypeType bx@@43)) bx@@43) ($Is ($Unbox HandleTypeType bx@@43) (Tclass._System.___hTotalFunc0 |#$R@@9|)))) :qid |unknown.0:0| :skolemid |8415| :pattern ( ($IsBox bx@@43 (Tclass._System.___hTotalFunc0 |#$R@@9|))) )))
(assert (forall ((|#$R@@10| T@U) (|f#0@@1| T@U) ) (!  (=> (and (= (type |#$R@@10|) TyType) (= (type |f#0@@1|) HandleTypeType)) (and (=> ($Is |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|)) (and ($Is |f#0@@1| (Tclass._System.___hPartialFunc0 |#$R@@10|)) (Requires0 |#$R@@10| $OneHeap |f#0@@1|))) (=> (and ($Is |f#0@@1| (Tclass._System.___hPartialFunc0 |#$R@@10|)) (Requires0 |#$R@@10| $OneHeap |f#0@@1|)) ($Is |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|))))) :qid |unknown.0:0| :skolemid |8416| :pattern ( ($Is |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|))) )))
(assert (forall ((|#$R@@11| T@U) (|f#0@@2| T@U) ($h@@8 T@U) ) (!  (=> (and (and (= (type |#$R@@11|) TyType) (= (type |f#0@@2|) HandleTypeType)) (= (type $h@@8) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc0 |#$R@@11|) $h@@8) ($IsAlloc |f#0@@2| (Tclass._System.___hPartialFunc0 |#$R@@11|) $h@@8)) (=> ($IsAlloc |f#0@@2| (Tclass._System.___hPartialFunc0 |#$R@@11|) $h@@8) ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc0 |#$R@@11|) $h@@8)))) :qid |unknown.0:0| :skolemid |8417| :pattern ( ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc0 |#$R@@11|) $h@@8)) )))
(assert (= (type Tclass._System.__default) TyType))
(assert (= (Tag Tclass._System.__default) Tagclass._System.__default))
(assert (forall ((bx@@44 T@U) ) (!  (=> (and (= (type bx@@44) BoxType) ($IsBox bx@@44 Tclass._System.__default)) (and (= ($Box ($Unbox refType bx@@44)) bx@@44) ($Is ($Unbox refType bx@@44) Tclass._System.__default))) :qid |unknown.0:0| :skolemid |8418| :pattern ( ($IsBox bx@@44 Tclass._System.__default)) )))
(assert (forall (($o@@7 T@U) ) (!  (=> (= (type $o@@7) refType) (and (=> ($Is $o@@7 Tclass._System.__default) (or (= $o@@7 null) (= (dtype $o@@7) Tclass._System.__default))) (=> (or (= $o@@7 null) (= (dtype $o@@7) Tclass._System.__default)) ($Is $o@@7 Tclass._System.__default)))) :qid |unknown.0:0| :skolemid |8419| :pattern ( ($Is $o@@7 Tclass._System.__default)) )))
(assert (forall (($o@@8 T@U) ($h@@9 T@U) ) (!  (=> (and (= (type $o@@8) refType) (= (type $h@@9) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@8 Tclass._System.__default $h@@9) (or (= $o@@8 null) (U_2_bool (MapType1Select (MapType0Select $h@@9 $o@@8) alloc)))) (=> (or (= $o@@8 null) (U_2_bool (MapType1Select (MapType0Select $h@@9 $o@@8) alloc))) ($IsAlloc $o@@8 Tclass._System.__default $h@@9)))) :qid |unknown.0:0| :skolemid |8420| :pattern ( ($IsAlloc $o@@8 Tclass._System.__default $h@@9)) )))
(assert  (=> true (forall ((|#$A| T@U) (|#$B| T@U) (|a#0| T@U) (|b#0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A|) TyType) (= (type |#$B|) TyType)) (= (type |a#0|) BoxType)) (= (type |b#0|) BoxType)) (or (|_System.__default.rank__is__less__than#canCall| |#$A| |#$B| |a#0| |b#0|) (and ($IsBox |a#0| |#$A|) ($IsBox |b#0| |#$B|)))) true) :qid |unknown.0:0| :skolemid |8421| :pattern ( (_System.__default.rank__is__less__than |#$A| |#$B| |a#0| |b#0|)) ))))
(assert (forall ((|#$A@@0| T@U) (|#$B@@0| T@U) (|a#0@@0| T@U) (|b#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A@@0|) TyType) (= (type |#$B@@0|) TyType)) (= (type |a#0@@0|) BoxType)) (= (type |b#0@@0|) BoxType)) (and ($IsBox |a#0@@0| |#$A@@0|) ($IsBox |b#0@@0| |#$B@@0|))) (and (=> (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|) true) (=> true (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|)))) :qid |unknown.0:0| :skolemid |8422| :pattern ( (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|)) )))
(assert (forall ((arg0@@117 T@U) (arg1@@50 T@U) (arg2@@11 T@U) ) (! (= (type (Tclass._System.___hFunc2 arg0@@117 arg1@@50 arg2@@11)) TyType) :qid |funType:Tclass._System.___hFunc2| :pattern ( (Tclass._System.___hFunc2 arg0@@117 arg1@@50 arg2@@11)) )))
(assert (forall ((|#$T0| T@U) (|#$T1| T@U) (|#$R@@12| T@U) ) (!  (=> (and (and (= (type |#$T0|) TyType) (= (type |#$T1|) TyType)) (= (type |#$R@@12|) TyType)) (= (Tag (Tclass._System.___hFunc2 |#$T0| |#$T1| |#$R@@12|)) Tagclass._System.___hFunc2)) :qid |unknown.0:0| :skolemid |8423| :pattern ( (Tclass._System.___hFunc2 |#$T0| |#$T1| |#$R@@12|)) )))
(assert (forall ((arg0@@118 T@U) ) (! (= (type (Tclass._System.___hFunc2_0 arg0@@118)) TyType) :qid |funType:Tclass._System.___hFunc2_0| :pattern ( (Tclass._System.___hFunc2_0 arg0@@118)) )))
(assert (forall ((|#$T0@@0| T@U) (|#$T1@@0| T@U) (|#$R@@13| T@U) ) (!  (=> (and (and (= (type |#$T0@@0|) TyType) (= (type |#$T1@@0|) TyType)) (= (type |#$R@@13|) TyType)) (= (Tclass._System.___hFunc2_0 (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@13|)) |#$T0@@0|)) :qid |unknown.0:0| :skolemid |8424| :pattern ( (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@13|)) )))
(assert (forall ((arg0@@119 T@U) ) (! (= (type (Tclass._System.___hFunc2_1 arg0@@119)) TyType) :qid |funType:Tclass._System.___hFunc2_1| :pattern ( (Tclass._System.___hFunc2_1 arg0@@119)) )))
(assert (forall ((|#$T0@@1| T@U) (|#$T1@@1| T@U) (|#$R@@14| T@U) ) (!  (=> (and (and (= (type |#$T0@@1|) TyType) (= (type |#$T1@@1|) TyType)) (= (type |#$R@@14|) TyType)) (= (Tclass._System.___hFunc2_1 (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@14|)) |#$T1@@1|)) :qid |unknown.0:0| :skolemid |8425| :pattern ( (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@14|)) )))
(assert (forall ((arg0@@120 T@U) ) (! (= (type (Tclass._System.___hFunc2_2 arg0@@120)) TyType) :qid |funType:Tclass._System.___hFunc2_2| :pattern ( (Tclass._System.___hFunc2_2 arg0@@120)) )))
(assert (forall ((|#$T0@@2| T@U) (|#$T1@@2| T@U) (|#$R@@15| T@U) ) (!  (=> (and (and (= (type |#$T0@@2|) TyType) (= (type |#$T1@@2|) TyType)) (= (type |#$R@@15|) TyType)) (= (Tclass._System.___hFunc2_2 (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@15|)) |#$R@@15|)) :qid |unknown.0:0| :skolemid |8426| :pattern ( (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@15|)) )))
(assert (forall ((|#$T0@@3| T@U) (|#$T1@@3| T@U) (|#$R@@16| T@U) (bx@@45 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@3|) TyType) (= (type |#$T1@@3|) TyType)) (= (type |#$R@@16|) TyType)) (= (type bx@@45) BoxType)) ($IsBox bx@@45 (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@16|))) (and (= ($Box ($Unbox HandleTypeType bx@@45)) bx@@45) ($Is ($Unbox HandleTypeType bx@@45) (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@16|)))) :qid |unknown.0:0| :skolemid |8427| :pattern ( ($IsBox bx@@45 (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@16|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@121 T@T) (arg1@@51 T@T) (arg2@@12 T@T) (arg3@@1 T@T) ) (! (= (Ctor (MapType2Type arg0@@121 arg1@@51 arg2@@12 arg3@@1)) 21) :qid |ctor:MapType2Type| )) (forall ((arg0@@122 T@T) (arg1@@52 T@T) (arg2@@13 T@T) (arg3@@2 T@T) ) (! (= (MapType2TypeInv0 (MapType2Type arg0@@122 arg1@@52 arg2@@13 arg3@@2)) arg0@@122) :qid |typeInv:MapType2TypeInv0| :pattern ( (MapType2Type arg0@@122 arg1@@52 arg2@@13 arg3@@2)) ))) (forall ((arg0@@123 T@T) (arg1@@53 T@T) (arg2@@14 T@T) (arg3@@3 T@T) ) (! (= (MapType2TypeInv1 (MapType2Type arg0@@123 arg1@@53 arg2@@14 arg3@@3)) arg1@@53) :qid |typeInv:MapType2TypeInv1| :pattern ( (MapType2Type arg0@@123 arg1@@53 arg2@@14 arg3@@3)) ))) (forall ((arg0@@124 T@T) (arg1@@54 T@T) (arg2@@15 T@T) (arg3@@4 T@T) ) (! (= (MapType2TypeInv2 (MapType2Type arg0@@124 arg1@@54 arg2@@15 arg3@@4)) arg2@@15) :qid |typeInv:MapType2TypeInv2| :pattern ( (MapType2Type arg0@@124 arg1@@54 arg2@@15 arg3@@4)) ))) (forall ((arg0@@125 T@T) (arg1@@55 T@T) (arg2@@16 T@T) (arg3@@5 T@T) ) (! (= (MapType2TypeInv3 (MapType2Type arg0@@125 arg1@@55 arg2@@16 arg3@@5)) arg3@@5) :qid |typeInv:MapType2TypeInv3| :pattern ( (MapType2Type arg0@@125 arg1@@55 arg2@@16 arg3@@5)) ))) (forall ((arg0@@126 T@U) (arg1@@56 T@U) (arg2@@17 T@U) (arg3@@6 T@U) ) (! (let ((aVar3 (MapType2TypeInv3 (type arg0@@126)))) (= (type (MapType2Select arg0@@126 arg1@@56 arg2@@17 arg3@@6)) aVar3)) :qid |funType:MapType2Select| :pattern ( (MapType2Select arg0@@126 arg1@@56 arg2@@17 arg3@@6)) ))) (forall ((arg0@@127 T@U) (arg1@@57 T@U) (arg2@@18 T@U) (arg3@@7 T@U) (arg4@@0 T@U) ) (! (let ((aVar3@@0 (type arg4@@0))) (let ((aVar2 (type arg3@@7))) (let ((aVar1@@2 (type arg2@@18))) (let ((aVar0@@0 (type arg1@@57))) (= (type (MapType2Store arg0@@127 arg1@@57 arg2@@18 arg3@@7 arg4@@0)) (MapType2Type aVar0@@0 aVar1@@2 aVar2 aVar3@@0)))))) :qid |funType:MapType2Store| :pattern ( (MapType2Store arg0@@127 arg1@@57 arg2@@18 arg3@@7 arg4@@0)) ))) (forall ((m@@27 T@U) (x0@@5 T@U) (x1 T@U) (x2 T@U) (val@@6 T@U) ) (! (let ((aVar3@@1 (MapType2TypeInv3 (type m@@27)))) (=> (= (type val@@6) aVar3@@1) (= (MapType2Select (MapType2Store m@@27 x0@@5 x1 x2 val@@6) x0@@5 x1 x2) val@@6))) :qid |mapAx0:MapType2Select| :weight 0 ))) (and (and (and (forall ((val@@7 T@U) (m@@28 T@U) (x0@@6 T@U) (x1@@0 T@U) (x2@@0 T@U) (y0@@3 T@U) (y1 T@U) (y2 T@U) ) (!  (or (= x0@@6 y0@@3) (= (MapType2Select (MapType2Store m@@28 x0@@6 x1@@0 x2@@0 val@@7) y0@@3 y1 y2) (MapType2Select m@@28 y0@@3 y1 y2))) :qid |mapAx1:MapType2Select:0| :weight 0 )) (forall ((val@@8 T@U) (m@@29 T@U) (x0@@7 T@U) (x1@@1 T@U) (x2@@1 T@U) (y0@@4 T@U) (y1@@0 T@U) (y2@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType2Select (MapType2Store m@@29 x0@@7 x1@@1 x2@@1 val@@8) y0@@4 y1@@0 y2@@0) (MapType2Select m@@29 y0@@4 y1@@0 y2@@0))) :qid |mapAx1:MapType2Select:1| :weight 0 ))) (forall ((val@@9 T@U) (m@@30 T@U) (x0@@8 T@U) (x1@@2 T@U) (x2@@2 T@U) (y0@@5 T@U) (y1@@1 T@U) (y2@@1 T@U) ) (!  (or (= x2@@2 y2@@1) (= (MapType2Select (MapType2Store m@@30 x0@@8 x1@@2 x2@@2 val@@9) y0@@5 y1@@1 y2@@1) (MapType2Select m@@30 y0@@5 y1@@1 y2@@1))) :qid |mapAx1:MapType2Select:2| :weight 0 ))) (forall ((val@@10 T@U) (m@@31 T@U) (x0@@9 T@U) (x1@@3 T@U) (x2@@3 T@U) (y0@@6 T@U) (y1@@2 T@U) (y2@@2 T@U) ) (!  (or true (= (MapType2Select (MapType2Store m@@31 x0@@9 x1@@3 x2@@3 val@@10) y0@@6 y1@@2 y2@@2) (MapType2Select m@@31 y0@@6 y1@@2 y2@@2))) :qid |mapAx2:MapType2Select| :weight 0 )))) (forall ((arg0@@128 T@U) (arg1@@58 T@U) (arg2@@19 T@U) (arg3@@8 T@U) (arg4@@1 T@U) (arg5 T@U) (arg6 T@U) ) (! (= (type (Apply2 arg0@@128 arg1@@58 arg2@@19 arg3@@8 arg4@@1 arg5 arg6)) BoxType) :qid |funType:Apply2| :pattern ( (Apply2 arg0@@128 arg1@@58 arg2@@19 arg3@@8 arg4@@1 arg5 arg6)) ))) (forall ((arg0@@129 T@U) (arg1@@59 T@U) (arg2@@20 T@U) ) (! (= (type (Handle2 arg0@@129 arg1@@59 arg2@@20)) HandleTypeType) :qid |funType:Handle2| :pattern ( (Handle2 arg0@@129 arg1@@59 arg2@@20)) ))))
(assert (forall ((t0@@27 T@U) (t1@@3 T@U) (t2 T@U) (heap@@6 T@U) (h@@27 T@U) (r@@11 T@U) (rd@@2 T@U) (bx0 T@U) (bx1 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@27) TyType) (= (type t1@@3) TyType)) (= (type t2) TyType)) (= (type heap@@6) (MapType0Type refType MapType1Type))) (= (type h@@27) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@11) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@2) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0) BoxType)) (= (type bx1) BoxType)) (= (Apply2 t0@@27 t1@@3 t2 heap@@6 (Handle2 h@@27 r@@11 rd@@2) bx0 bx1) (MapType2Select h@@27 heap@@6 bx0 bx1))) :qid |unknown.0:0| :skolemid |8428| :pattern ( (Apply2 t0@@27 t1@@3 t2 heap@@6 (Handle2 h@@27 r@@11 rd@@2) bx0 bx1)) )))
(assert (forall ((t0@@28 T@U) (t1@@4 T@U) (t2@@0 T@U) (heap@@7 T@U) (h@@28 T@U) (r@@12 T@U) (rd@@3 T@U) (bx0@@0 T@U) (bx1@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@28) TyType) (= (type t1@@4) TyType)) (= (type t2@@0) TyType)) (= (type heap@@7) (MapType0Type refType MapType1Type))) (= (type h@@28) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@12) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@3) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@0) BoxType)) (= (type bx1@@0) BoxType)) (U_2_bool (MapType2Select r@@12 heap@@7 bx0@@0 bx1@@0))) (Requires2 t0@@28 t1@@4 t2@@0 heap@@7 (Handle2 h@@28 r@@12 rd@@3) bx0@@0 bx1@@0)) :qid |unknown.0:0| :skolemid |8429| :pattern ( (Requires2 t0@@28 t1@@4 t2@@0 heap@@7 (Handle2 h@@28 r@@12 rd@@3) bx0@@0 bx1@@0)) )))
(assert (forall ((arg0@@130 T@U) (arg1@@60 T@U) (arg2@@21 T@U) (arg3@@9 T@U) (arg4@@2 T@U) (arg5@@0 T@U) (arg6@@0 T@U) ) (! (= (type (Reads2 arg0@@130 arg1@@60 arg2@@21 arg3@@9 arg4@@2 arg5@@0 arg6@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads2| :pattern ( (Reads2 arg0@@130 arg1@@60 arg2@@21 arg3@@9 arg4@@2 arg5@@0 arg6@@0)) )))
(assert (forall ((t0@@29 T@U) (t1@@5 T@U) (t2@@1 T@U) (heap@@8 T@U) (h@@29 T@U) (r@@13 T@U) (rd@@4 T@U) (bx0@@1 T@U) (bx1@@1 T@U) (bx@@46 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@29) TyType) (= (type t1@@5) TyType)) (= (type t2@@1) TyType)) (= (type heap@@8) (MapType0Type refType MapType1Type))) (= (type h@@29) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@13) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@4) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@1) BoxType)) (= (type bx1@@1) BoxType)) (= (type bx@@46) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads2 t0@@29 t1@@5 t2@@1 heap@@8 (Handle2 h@@29 r@@13 rd@@4) bx0@@1 bx1@@1) bx@@46)) (U_2_bool (MapType0Select (MapType2Select rd@@4 heap@@8 bx0@@1 bx1@@1) bx@@46))) (=> (U_2_bool (MapType0Select (MapType2Select rd@@4 heap@@8 bx0@@1 bx1@@1) bx@@46)) (U_2_bool (MapType0Select (Reads2 t0@@29 t1@@5 t2@@1 heap@@8 (Handle2 h@@29 r@@13 rd@@4) bx0@@1 bx1@@1) bx@@46))))) :qid |unknown.0:0| :skolemid |8430| :pattern ( (MapType0Select (Reads2 t0@@29 t1@@5 t2@@1 heap@@8 (Handle2 h@@29 r@@13 rd@@4) bx0@@1 bx1@@1) bx@@46)) )))
(assert (forall ((t0@@30 T@U) (t1@@6 T@U) (t2@@2 T@U) (h0@@6 T@U) (h1@@6 T@U) (f@@17 T@U) (bx0@@2 T@U) (bx1@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@30) TyType) (= (type t1@@6) TyType)) (= (type t2@@2) TyType)) (= (type h0@@6) (MapType0Type refType MapType1Type))) (= (type h1@@6) (MapType0Type refType MapType1Type))) (= (type f@@17) HandleTypeType)) (= (type bx0@@2) BoxType)) (= (type bx1@@2) BoxType)) (and (and (and ($HeapSucc h0@@6 h1@@6) (and ($IsGoodHeap h0@@6) ($IsGoodHeap h1@@6))) (and (and ($IsBox bx0@@2 t0@@30) ($IsBox bx1@@2 t1@@6)) ($Is f@@17 (Tclass._System.___hFunc2 t0@@30 t1@@6 t2@@2)))) (forall ((o@@60 T@U) (fld@@5 T@U) ) (! (let ((a@@88 (FieldTypeInv0 (type fld@@5)))) (=> (and (and (= (type o@@60) refType) (= (type fld@@5) (FieldType a@@88))) (and (not (= o@@60 null)) (U_2_bool (MapType0Select (Reads2 t0@@30 t1@@6 t2@@2 h0@@6 f@@17 bx0@@2 bx1@@2) ($Box o@@60))))) (= (MapType1Select (MapType0Select h0@@6 o@@60) fld@@5) (MapType1Select (MapType0Select h1@@6 o@@60) fld@@5)))) :qid |unknown.0:0| :skolemid |8431| :no-pattern (type o@@60) :no-pattern (type fld@@5) :no-pattern (U_2_int o@@60) :no-pattern (U_2_bool o@@60) :no-pattern (U_2_int fld@@5) :no-pattern (U_2_bool fld@@5) )))) (= (Reads2 t0@@30 t1@@6 t2@@2 h0@@6 f@@17 bx0@@2 bx1@@2) (Reads2 t0@@30 t1@@6 t2@@2 h1@@6 f@@17 bx0@@2 bx1@@2))) :qid |unknown.0:0| :skolemid |8432| :pattern ( ($HeapSucc h0@@6 h1@@6) (Reads2 t0@@30 t1@@6 t2@@2 h1@@6 f@@17 bx0@@2 bx1@@2)) )))
(assert (forall ((t0@@31 T@U) (t1@@7 T@U) (t2@@3 T@U) (h0@@7 T@U) (h1@@7 T@U) (f@@18 T@U) (bx0@@3 T@U) (bx1@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@31) TyType) (= (type t1@@7) TyType)) (= (type t2@@3) TyType)) (= (type h0@@7) (MapType0Type refType MapType1Type))) (= (type h1@@7) (MapType0Type refType MapType1Type))) (= (type f@@18) HandleTypeType)) (= (type bx0@@3) BoxType)) (= (type bx1@@3) BoxType)) (and (and (and ($HeapSucc h0@@7 h1@@7) (and ($IsGoodHeap h0@@7) ($IsGoodHeap h1@@7))) (and (and ($IsBox bx0@@3 t0@@31) ($IsBox bx1@@3 t1@@7)) ($Is f@@18 (Tclass._System.___hFunc2 t0@@31 t1@@7 t2@@3)))) (forall ((o@@61 T@U) (fld@@6 T@U) ) (! (let ((a@@89 (FieldTypeInv0 (type fld@@6)))) (=> (and (and (= (type o@@61) refType) (= (type fld@@6) (FieldType a@@89))) (and (not (= o@@61 null)) (U_2_bool (MapType0Select (Reads2 t0@@31 t1@@7 t2@@3 h1@@7 f@@18 bx0@@3 bx1@@3) ($Box o@@61))))) (= (MapType1Select (MapType0Select h0@@7 o@@61) fld@@6) (MapType1Select (MapType0Select h1@@7 o@@61) fld@@6)))) :qid |unknown.0:0| :skolemid |8433| :no-pattern (type o@@61) :no-pattern (type fld@@6) :no-pattern (U_2_int o@@61) :no-pattern (U_2_bool o@@61) :no-pattern (U_2_int fld@@6) :no-pattern (U_2_bool fld@@6) )))) (= (Reads2 t0@@31 t1@@7 t2@@3 h0@@7 f@@18 bx0@@3 bx1@@3) (Reads2 t0@@31 t1@@7 t2@@3 h1@@7 f@@18 bx0@@3 bx1@@3))) :qid |unknown.0:0| :skolemid |8434| :pattern ( ($HeapSucc h0@@7 h1@@7) (Reads2 t0@@31 t1@@7 t2@@3 h1@@7 f@@18 bx0@@3 bx1@@3)) )))
(assert (forall ((t0@@32 T@U) (t1@@8 T@U) (t2@@4 T@U) (h0@@8 T@U) (h1@@8 T@U) (f@@19 T@U) (bx0@@4 T@U) (bx1@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@32) TyType) (= (type t1@@8) TyType)) (= (type t2@@4) TyType)) (= (type h0@@8) (MapType0Type refType MapType1Type))) (= (type h1@@8) (MapType0Type refType MapType1Type))) (= (type f@@19) HandleTypeType)) (= (type bx0@@4) BoxType)) (= (type bx1@@4) BoxType)) (and (and (and ($HeapSucc h0@@8 h1@@8) (and ($IsGoodHeap h0@@8) ($IsGoodHeap h1@@8))) (and (and ($IsBox bx0@@4 t0@@32) ($IsBox bx1@@4 t1@@8)) ($Is f@@19 (Tclass._System.___hFunc2 t0@@32 t1@@8 t2@@4)))) (forall ((o@@62 T@U) (fld@@7 T@U) ) (! (let ((a@@90 (FieldTypeInv0 (type fld@@7)))) (=> (and (and (= (type o@@62) refType) (= (type fld@@7) (FieldType a@@90))) (and (not (= o@@62 null)) (U_2_bool (MapType0Select (Reads2 t0@@32 t1@@8 t2@@4 h0@@8 f@@19 bx0@@4 bx1@@4) ($Box o@@62))))) (= (MapType1Select (MapType0Select h0@@8 o@@62) fld@@7) (MapType1Select (MapType0Select h1@@8 o@@62) fld@@7)))) :qid |unknown.0:0| :skolemid |8435| :no-pattern (type o@@62) :no-pattern (type fld@@7) :no-pattern (U_2_int o@@62) :no-pattern (U_2_bool o@@62) :no-pattern (U_2_int fld@@7) :no-pattern (U_2_bool fld@@7) )))) (and (=> (Requires2 t0@@32 t1@@8 t2@@4 h0@@8 f@@19 bx0@@4 bx1@@4) (Requires2 t0@@32 t1@@8 t2@@4 h1@@8 f@@19 bx0@@4 bx1@@4)) (=> (Requires2 t0@@32 t1@@8 t2@@4 h1@@8 f@@19 bx0@@4 bx1@@4) (Requires2 t0@@32 t1@@8 t2@@4 h0@@8 f@@19 bx0@@4 bx1@@4)))) :qid |unknown.0:0| :skolemid |8436| :pattern ( ($HeapSucc h0@@8 h1@@8) (Requires2 t0@@32 t1@@8 t2@@4 h1@@8 f@@19 bx0@@4 bx1@@4)) )))
(assert (forall ((t0@@33 T@U) (t1@@9 T@U) (t2@@5 T@U) (h0@@9 T@U) (h1@@9 T@U) (f@@20 T@U) (bx0@@5 T@U) (bx1@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@33) TyType) (= (type t1@@9) TyType)) (= (type t2@@5) TyType)) (= (type h0@@9) (MapType0Type refType MapType1Type))) (= (type h1@@9) (MapType0Type refType MapType1Type))) (= (type f@@20) HandleTypeType)) (= (type bx0@@5) BoxType)) (= (type bx1@@5) BoxType)) (and (and (and ($HeapSucc h0@@9 h1@@9) (and ($IsGoodHeap h0@@9) ($IsGoodHeap h1@@9))) (and (and ($IsBox bx0@@5 t0@@33) ($IsBox bx1@@5 t1@@9)) ($Is f@@20 (Tclass._System.___hFunc2 t0@@33 t1@@9 t2@@5)))) (forall ((o@@63 T@U) (fld@@8 T@U) ) (! (let ((a@@91 (FieldTypeInv0 (type fld@@8)))) (=> (and (and (= (type o@@63) refType) (= (type fld@@8) (FieldType a@@91))) (and (not (= o@@63 null)) (U_2_bool (MapType0Select (Reads2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5) ($Box o@@63))))) (= (MapType1Select (MapType0Select h0@@9 o@@63) fld@@8) (MapType1Select (MapType0Select h1@@9 o@@63) fld@@8)))) :qid |unknown.0:0| :skolemid |8437| :no-pattern (type o@@63) :no-pattern (type fld@@8) :no-pattern (U_2_int o@@63) :no-pattern (U_2_bool o@@63) :no-pattern (U_2_int fld@@8) :no-pattern (U_2_bool fld@@8) )))) (and (=> (Requires2 t0@@33 t1@@9 t2@@5 h0@@9 f@@20 bx0@@5 bx1@@5) (Requires2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5)) (=> (Requires2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5) (Requires2 t0@@33 t1@@9 t2@@5 h0@@9 f@@20 bx0@@5 bx1@@5)))) :qid |unknown.0:0| :skolemid |8438| :pattern ( ($HeapSucc h0@@9 h1@@9) (Requires2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5)) )))
(assert (forall ((t0@@34 T@U) (t1@@10 T@U) (t2@@6 T@U) (h0@@10 T@U) (h1@@10 T@U) (f@@21 T@U) (bx0@@6 T@U) (bx1@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@34) TyType) (= (type t1@@10) TyType)) (= (type t2@@6) TyType)) (= (type h0@@10) (MapType0Type refType MapType1Type))) (= (type h1@@10) (MapType0Type refType MapType1Type))) (= (type f@@21) HandleTypeType)) (= (type bx0@@6) BoxType)) (= (type bx1@@6) BoxType)) (and (and (and ($HeapSucc h0@@10 h1@@10) (and ($IsGoodHeap h0@@10) ($IsGoodHeap h1@@10))) (and (and ($IsBox bx0@@6 t0@@34) ($IsBox bx1@@6 t1@@10)) ($Is f@@21 (Tclass._System.___hFunc2 t0@@34 t1@@10 t2@@6)))) (forall ((o@@64 T@U) (fld@@9 T@U) ) (! (let ((a@@92 (FieldTypeInv0 (type fld@@9)))) (=> (and (and (= (type o@@64) refType) (= (type fld@@9) (FieldType a@@92))) (and (not (= o@@64 null)) (U_2_bool (MapType0Select (Reads2 t0@@34 t1@@10 t2@@6 h0@@10 f@@21 bx0@@6 bx1@@6) ($Box o@@64))))) (= (MapType1Select (MapType0Select h0@@10 o@@64) fld@@9) (MapType1Select (MapType0Select h1@@10 o@@64) fld@@9)))) :qid |unknown.0:0| :skolemid |8439| :no-pattern (type o@@64) :no-pattern (type fld@@9) :no-pattern (U_2_int o@@64) :no-pattern (U_2_bool o@@64) :no-pattern (U_2_int fld@@9) :no-pattern (U_2_bool fld@@9) )))) (= (Apply2 t0@@34 t1@@10 t2@@6 h0@@10 f@@21 bx0@@6 bx1@@6) (Apply2 t0@@34 t1@@10 t2@@6 h1@@10 f@@21 bx0@@6 bx1@@6))) :qid |unknown.0:0| :skolemid |8440| :pattern ( ($HeapSucc h0@@10 h1@@10) (Apply2 t0@@34 t1@@10 t2@@6 h1@@10 f@@21 bx0@@6 bx1@@6)) )))
(assert (forall ((t0@@35 T@U) (t1@@11 T@U) (t2@@7 T@U) (h0@@11 T@U) (h1@@11 T@U) (f@@22 T@U) (bx0@@7 T@U) (bx1@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@35) TyType) (= (type t1@@11) TyType)) (= (type t2@@7) TyType)) (= (type h0@@11) (MapType0Type refType MapType1Type))) (= (type h1@@11) (MapType0Type refType MapType1Type))) (= (type f@@22) HandleTypeType)) (= (type bx0@@7) BoxType)) (= (type bx1@@7) BoxType)) (and (and (and ($HeapSucc h0@@11 h1@@11) (and ($IsGoodHeap h0@@11) ($IsGoodHeap h1@@11))) (and (and ($IsBox bx0@@7 t0@@35) ($IsBox bx1@@7 t1@@11)) ($Is f@@22 (Tclass._System.___hFunc2 t0@@35 t1@@11 t2@@7)))) (forall ((o@@65 T@U) (fld@@10 T@U) ) (! (let ((a@@93 (FieldTypeInv0 (type fld@@10)))) (=> (and (and (= (type o@@65) refType) (= (type fld@@10) (FieldType a@@93))) (and (not (= o@@65 null)) (U_2_bool (MapType0Select (Reads2 t0@@35 t1@@11 t2@@7 h1@@11 f@@22 bx0@@7 bx1@@7) ($Box o@@65))))) (= (MapType1Select (MapType0Select h0@@11 o@@65) fld@@10) (MapType1Select (MapType0Select h1@@11 o@@65) fld@@10)))) :qid |unknown.0:0| :skolemid |8441| :no-pattern (type o@@65) :no-pattern (type fld@@10) :no-pattern (U_2_int o@@65) :no-pattern (U_2_bool o@@65) :no-pattern (U_2_int fld@@10) :no-pattern (U_2_bool fld@@10) )))) (= (Apply2 t0@@35 t1@@11 t2@@7 h0@@11 f@@22 bx0@@7 bx1@@7) (Apply2 t0@@35 t1@@11 t2@@7 h1@@11 f@@22 bx0@@7 bx1@@7))) :qid |unknown.0:0| :skolemid |8442| :pattern ( ($HeapSucc h0@@11 h1@@11) (Apply2 t0@@35 t1@@11 t2@@7 h1@@11 f@@22 bx0@@7 bx1@@7)) )))
(assert (forall ((t0@@36 T@U) (t1@@12 T@U) (t2@@8 T@U) (heap@@9 T@U) (f@@23 T@U) (bx0@@8 T@U) (bx1@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@36) TyType) (= (type t1@@12) TyType)) (= (type t2@@8) TyType)) (= (type heap@@9) (MapType0Type refType MapType1Type))) (= (type f@@23) HandleTypeType)) (= (type bx0@@8) BoxType)) (= (type bx1@@8) BoxType)) (and ($IsGoodHeap heap@@9) (and (and ($IsBox bx0@@8 t0@@36) ($IsBox bx1@@8 t1@@12)) ($Is f@@23 (Tclass._System.___hFunc2 t0@@36 t1@@12 t2@@8))))) (and (=> (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 $OneHeap f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 heap@@9 f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 heap@@9 f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 $OneHeap f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |8443| :pattern ( (Reads2 t0@@36 t1@@12 t2@@8 $OneHeap f@@23 bx0@@8 bx1@@8) ($IsGoodHeap heap@@9)) :pattern ( (Reads2 t0@@36 t1@@12 t2@@8 heap@@9 f@@23 bx0@@8 bx1@@8)) )))
(assert (forall ((t0@@37 T@U) (t1@@13 T@U) (t2@@9 T@U) (heap@@10 T@U) (f@@24 T@U) (bx0@@9 T@U) (bx1@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@37) TyType) (= (type t1@@13) TyType)) (= (type t2@@9) TyType)) (= (type heap@@10) (MapType0Type refType MapType1Type))) (= (type f@@24) HandleTypeType)) (= (type bx0@@9) BoxType)) (= (type bx1@@9) BoxType)) (and (and ($IsGoodHeap heap@@10) (and (and ($IsBox bx0@@9 t0@@37) ($IsBox bx1@@9 t1@@13)) ($Is f@@24 (Tclass._System.___hFunc2 t0@@37 t1@@13 t2@@9)))) (|Set#Equal| (Reads2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9) (|Set#Empty| BoxType)))) (and (=> (Requires2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9) (Requires2 t0@@37 t1@@13 t2@@9 heap@@10 f@@24 bx0@@9 bx1@@9)) (=> (Requires2 t0@@37 t1@@13 t2@@9 heap@@10 f@@24 bx0@@9 bx1@@9) (Requires2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9)))) :qid |unknown.0:0| :skolemid |8444| :pattern ( (Requires2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9) ($IsGoodHeap heap@@10)) :pattern ( (Requires2 t0@@37 t1@@13 t2@@9 heap@@10 f@@24 bx0@@9 bx1@@9)) )))
(assert (forall ((f@@25 T@U) (t0@@38 T@U) (t1@@14 T@U) (t2@@10 T@U) ) (!  (=> (and (and (and (= (type f@@25) HandleTypeType) (= (type t0@@38) TyType)) (= (type t1@@14) TyType)) (= (type t2@@10) TyType)) (and (=> ($Is f@@25 (Tclass._System.___hFunc2 t0@@38 t1@@14 t2@@10)) (forall ((h@@30 T@U) (bx0@@10 T@U) (bx1@@10 T@U) ) (!  (=> (and (and (and (= (type h@@30) (MapType0Type refType MapType1Type)) (= (type bx0@@10) BoxType)) (= (type bx1@@10) BoxType)) (and (and ($IsGoodHeap h@@30) (and ($IsBox bx0@@10 t0@@38) ($IsBox bx1@@10 t1@@14))) (Requires2 t0@@38 t1@@14 t2@@10 h@@30 f@@25 bx0@@10 bx1@@10))) ($IsBox (Apply2 t0@@38 t1@@14 t2@@10 h@@30 f@@25 bx0@@10 bx1@@10) t2@@10)) :qid |DafnyPre.521:12| :skolemid |8445| :pattern ( (Apply2 t0@@38 t1@@14 t2@@10 h@@30 f@@25 bx0@@10 bx1@@10)) ))) (=> (forall ((h@@31 T@U) (bx0@@11 T@U) (bx1@@11 T@U) ) (!  (=> (and (and (and (= (type h@@31) (MapType0Type refType MapType1Type)) (= (type bx0@@11) BoxType)) (= (type bx1@@11) BoxType)) (and (and ($IsGoodHeap h@@31) (and ($IsBox bx0@@11 t0@@38) ($IsBox bx1@@11 t1@@14))) (Requires2 t0@@38 t1@@14 t2@@10 h@@31 f@@25 bx0@@11 bx1@@11))) ($IsBox (Apply2 t0@@38 t1@@14 t2@@10 h@@31 f@@25 bx0@@11 bx1@@11) t2@@10)) :qid |DafnyPre.521:12| :skolemid |8445| :pattern ( (Apply2 t0@@38 t1@@14 t2@@10 h@@31 f@@25 bx0@@11 bx1@@11)) )) ($Is f@@25 (Tclass._System.___hFunc2 t0@@38 t1@@14 t2@@10))))) :qid |unknown.0:0| :skolemid |8446| :pattern ( ($Is f@@25 (Tclass._System.___hFunc2 t0@@38 t1@@14 t2@@10))) )))
(assert (forall ((f@@26 T@U) (t0@@39 T@U) (t1@@15 T@U) (t2@@11 T@U) (u0@@0 T@U) (u1 T@U) (u2 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@26) HandleTypeType) (= (type t0@@39) TyType)) (= (type t1@@15) TyType)) (= (type t2@@11) TyType)) (= (type u0@@0) TyType)) (= (type u1) TyType)) (= (type u2) TyType)) (and (and (and ($Is f@@26 (Tclass._System.___hFunc2 t0@@39 t1@@15 t2@@11)) (forall ((bx@@47 T@U) ) (!  (=> (and (= (type bx@@47) BoxType) ($IsBox bx@@47 u0@@0)) ($IsBox bx@@47 t0@@39)) :qid |unknown.0:0| :skolemid |8447| :pattern ( ($IsBox bx@@47 u0@@0)) :pattern ( ($IsBox bx@@47 t0@@39)) ))) (forall ((bx@@48 T@U) ) (!  (=> (and (= (type bx@@48) BoxType) ($IsBox bx@@48 u1)) ($IsBox bx@@48 t1@@15)) :qid |unknown.0:0| :skolemid |8448| :pattern ( ($IsBox bx@@48 u1)) :pattern ( ($IsBox bx@@48 t1@@15)) ))) (forall ((bx@@49 T@U) ) (!  (=> (and (= (type bx@@49) BoxType) ($IsBox bx@@49 t2@@11)) ($IsBox bx@@49 u2)) :qid |unknown.0:0| :skolemid |8449| :pattern ( ($IsBox bx@@49 t2@@11)) :pattern ( ($IsBox bx@@49 u2)) )))) ($Is f@@26 (Tclass._System.___hFunc2 u0@@0 u1 u2))) :qid |unknown.0:0| :skolemid |8450| :pattern ( ($Is f@@26 (Tclass._System.___hFunc2 t0@@39 t1@@15 t2@@11)) ($Is f@@26 (Tclass._System.___hFunc2 u0@@0 u1 u2))) )))
(assert (forall ((f@@27 T@U) (t0@@40 T@U) (t1@@16 T@U) (t2@@12 T@U) (h@@32 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@27) HandleTypeType) (= (type t0@@40) TyType)) (= (type t1@@16) TyType)) (= (type t2@@12) TyType)) (= (type h@@32) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@32)) (and (=> ($IsAlloc f@@27 (Tclass._System.___hFunc2 t0@@40 t1@@16 t2@@12) h@@32) (forall ((bx0@@12 T@U) (bx1@@12 T@U) ) (!  (=> (and (= (type bx0@@12) BoxType) (= (type bx1@@12) BoxType)) (=> (and (and (and ($IsBox bx0@@12 t0@@40) ($IsAllocBox bx0@@12 t0@@40 h@@32)) (and ($IsBox bx1@@12 t1@@16) ($IsAllocBox bx1@@12 t1@@16 h@@32))) (Requires2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12)) (forall ((r@@14 T@U) ) (!  (=> (= (type r@@14) refType) (=> (and (not (= r@@14 null)) (U_2_bool (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12) ($Box r@@14)))) (U_2_bool (MapType1Select (MapType0Select h@@32 r@@14) alloc)))) :qid |unknown.0:0| :skolemid |8451| :pattern ( (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12) ($Box r@@14))) )))) :qid |unknown.0:0| :skolemid |8452| :pattern ( (Apply2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12)) :pattern ( (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12)) ))) (=> (forall ((bx0@@13 T@U) (bx1@@13 T@U) ) (!  (=> (and (= (type bx0@@13) BoxType) (= (type bx1@@13) BoxType)) (=> (and (and (and ($IsBox bx0@@13 t0@@40) ($IsAllocBox bx0@@13 t0@@40 h@@32)) (and ($IsBox bx1@@13 t1@@16) ($IsAllocBox bx1@@13 t1@@16 h@@32))) (Requires2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13)) (forall ((r@@15 T@U) ) (!  (=> (= (type r@@15) refType) (=> (and (not (= r@@15 null)) (U_2_bool (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13) ($Box r@@15)))) (U_2_bool (MapType1Select (MapType0Select h@@32 r@@15) alloc)))) :qid |unknown.0:0| :skolemid |8451| :pattern ( (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13) ($Box r@@15))) )))) :qid |unknown.0:0| :skolemid |8452| :pattern ( (Apply2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13)) :pattern ( (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13)) )) ($IsAlloc f@@27 (Tclass._System.___hFunc2 t0@@40 t1@@16 t2@@12) h@@32)))) :qid |unknown.0:0| :skolemid |8453| :pattern ( ($IsAlloc f@@27 (Tclass._System.___hFunc2 t0@@40 t1@@16 t2@@12) h@@32)) )))
(assert (forall ((f@@28 T@U) (t0@@41 T@U) (t1@@17 T@U) (t2@@13 T@U) (h@@33 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@28) HandleTypeType) (= (type t0@@41) TyType)) (= (type t1@@17) TyType)) (= (type t2@@13) TyType)) (= (type h@@33) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@33) ($IsAlloc f@@28 (Tclass._System.___hFunc2 t0@@41 t1@@17 t2@@13) h@@33))) (forall ((bx0@@14 T@U) (bx1@@14 T@U) ) (!  (=> (and (= (type bx0@@14) BoxType) (= (type bx1@@14) BoxType)) (=> (and (and ($IsAllocBox bx0@@14 t0@@41 h@@33) ($IsAllocBox bx1@@14 t1@@17 h@@33)) (Requires2 t0@@41 t1@@17 t2@@13 h@@33 f@@28 bx0@@14 bx1@@14)) ($IsAllocBox (Apply2 t0@@41 t1@@17 t2@@13 h@@33 f@@28 bx0@@14 bx1@@14) t2@@13 h@@33))) :qid |unknown.0:0| :skolemid |8454| :pattern ( (Apply2 t0@@41 t1@@17 t2@@13 h@@33 f@@28 bx0@@14 bx1@@14)) ))) :qid |unknown.0:0| :skolemid |8455| :pattern ( ($IsAlloc f@@28 (Tclass._System.___hFunc2 t0@@41 t1@@17 t2@@13) h@@33)) )))
(assert (forall ((arg0@@131 T@U) (arg1@@61 T@U) (arg2@@22 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2 arg0@@131 arg1@@61 arg2@@22)) TyType) :qid |funType:Tclass._System.___hPartialFunc2| :pattern ( (Tclass._System.___hPartialFunc2 arg0@@131 arg1@@61 arg2@@22)) )))
(assert (forall ((|#$T0@@4| T@U) (|#$T1@@4| T@U) (|#$R@@17| T@U) ) (!  (=> (and (and (= (type |#$T0@@4|) TyType) (= (type |#$T1@@4|) TyType)) (= (type |#$R@@17|) TyType)) (= (Tag (Tclass._System.___hPartialFunc2 |#$T0@@4| |#$T1@@4| |#$R@@17|)) Tagclass._System.___hPartialFunc2)) :qid |unknown.0:0| :skolemid |8456| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@4| |#$T1@@4| |#$R@@17|)) )))
(assert (forall ((arg0@@132 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_0 arg0@@132)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_0| :pattern ( (Tclass._System.___hPartialFunc2_0 arg0@@132)) )))
(assert (forall ((|#$T0@@5| T@U) (|#$T1@@5| T@U) (|#$R@@18| T@U) ) (!  (=> (and (and (= (type |#$T0@@5|) TyType) (= (type |#$T1@@5|) TyType)) (= (type |#$R@@18|) TyType)) (= (Tclass._System.___hPartialFunc2_0 (Tclass._System.___hPartialFunc2 |#$T0@@5| |#$T1@@5| |#$R@@18|)) |#$T0@@5|)) :qid |unknown.0:0| :skolemid |8457| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@5| |#$T1@@5| |#$R@@18|)) )))
(assert (forall ((arg0@@133 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_1 arg0@@133)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_1| :pattern ( (Tclass._System.___hPartialFunc2_1 arg0@@133)) )))
(assert (forall ((|#$T0@@6| T@U) (|#$T1@@6| T@U) (|#$R@@19| T@U) ) (!  (=> (and (and (= (type |#$T0@@6|) TyType) (= (type |#$T1@@6|) TyType)) (= (type |#$R@@19|) TyType)) (= (Tclass._System.___hPartialFunc2_1 (Tclass._System.___hPartialFunc2 |#$T0@@6| |#$T1@@6| |#$R@@19|)) |#$T1@@6|)) :qid |unknown.0:0| :skolemid |8458| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@6| |#$T1@@6| |#$R@@19|)) )))
(assert (forall ((arg0@@134 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_2 arg0@@134)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_2| :pattern ( (Tclass._System.___hPartialFunc2_2 arg0@@134)) )))
(assert (forall ((|#$T0@@7| T@U) (|#$T1@@7| T@U) (|#$R@@20| T@U) ) (!  (=> (and (and (= (type |#$T0@@7|) TyType) (= (type |#$T1@@7|) TyType)) (= (type |#$R@@20|) TyType)) (= (Tclass._System.___hPartialFunc2_2 (Tclass._System.___hPartialFunc2 |#$T0@@7| |#$T1@@7| |#$R@@20|)) |#$R@@20|)) :qid |unknown.0:0| :skolemid |8459| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@7| |#$T1@@7| |#$R@@20|)) )))
(assert (forall ((|#$T0@@8| T@U) (|#$T1@@8| T@U) (|#$R@@21| T@U) (bx@@50 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@8|) TyType) (= (type |#$T1@@8|) TyType)) (= (type |#$R@@21|) TyType)) (= (type bx@@50) BoxType)) ($IsBox bx@@50 (Tclass._System.___hPartialFunc2 |#$T0@@8| |#$T1@@8| |#$R@@21|))) (and (= ($Box ($Unbox HandleTypeType bx@@50)) bx@@50) ($Is ($Unbox HandleTypeType bx@@50) (Tclass._System.___hPartialFunc2 |#$T0@@8| |#$T1@@8| |#$R@@21|)))) :qid |unknown.0:0| :skolemid |8460| :pattern ( ($IsBox bx@@50 (Tclass._System.___hPartialFunc2 |#$T0@@8| |#$T1@@8| |#$R@@21|))) )))
(assert (forall ((|#$T0@@9| T@U) (|#$T1@@9| T@U) (|#$R@@22| T@U) (|f#0@@3| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@9|) TyType) (= (type |#$T1@@9|) TyType)) (= (type |#$R@@22|) TyType)) (= (type |f#0@@3|) HandleTypeType)) (and (=> ($Is |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|)) (and ($Is |f#0@@3| (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|)) (forall ((|x0#0| T@U) (|x1#0| T@U) ) (!  (=> (and (and (= (type |x0#0|) BoxType) (= (type |x1#0|) BoxType)) (and ($IsBox |x0#0| |#$T0@@9|) ($IsBox |x1#0| |#$T1@@9|))) (|Set#Equal| (Reads2 |#$T0@@9| |#$T1@@9| |#$R@@22| $OneHeap |f#0@@3| |x0#0| |x1#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |8461| :no-pattern (type |x0#0|) :no-pattern (type |x1#0|) :no-pattern (U_2_int |x0#0|) :no-pattern (U_2_bool |x0#0|) :no-pattern (U_2_int |x1#0|) :no-pattern (U_2_bool |x1#0|) )))) (=> (and ($Is |f#0@@3| (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|)) (forall ((|x0#0@@0| T@U) (|x1#0@@0| T@U) ) (!  (=> (and (and (= (type |x0#0@@0|) BoxType) (= (type |x1#0@@0|) BoxType)) (and ($IsBox |x0#0@@0| |#$T0@@9|) ($IsBox |x1#0@@0| |#$T1@@9|))) (|Set#Equal| (Reads2 |#$T0@@9| |#$T1@@9| |#$R@@22| $OneHeap |f#0@@3| |x0#0@@0| |x1#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |8461| :no-pattern (type |x0#0@@0|) :no-pattern (type |x1#0@@0|) :no-pattern (U_2_int |x0#0@@0|) :no-pattern (U_2_bool |x0#0@@0|) :no-pattern (U_2_int |x1#0@@0|) :no-pattern (U_2_bool |x1#0@@0|) ))) ($Is |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|))))) :qid |unknown.0:0| :skolemid |8462| :pattern ( ($Is |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|))) )))
(assert (forall ((|#$T0@@10| T@U) (|#$T1@@10| T@U) (|#$R@@23| T@U) (|f#0@@4| T@U) ($h@@10 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@10|) TyType) (= (type |#$T1@@10|) TyType)) (= (type |#$R@@23|) TyType)) (= (type |f#0@@4|) HandleTypeType)) (= (type $h@@10) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10) ($IsAlloc |f#0@@4| (Tclass._System.___hFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10)) (=> ($IsAlloc |f#0@@4| (Tclass._System.___hFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10) ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10)))) :qid |unknown.0:0| :skolemid |8463| :pattern ( ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10)) )))
(assert (forall ((arg0@@135 T@U) (arg1@@62 T@U) (arg2@@23 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2 arg0@@135 arg1@@62 arg2@@23)) TyType) :qid |funType:Tclass._System.___hTotalFunc2| :pattern ( (Tclass._System.___hTotalFunc2 arg0@@135 arg1@@62 arg2@@23)) )))
(assert (forall ((|#$T0@@11| T@U) (|#$T1@@11| T@U) (|#$R@@24| T@U) ) (!  (=> (and (and (= (type |#$T0@@11|) TyType) (= (type |#$T1@@11|) TyType)) (= (type |#$R@@24|) TyType)) (= (Tag (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@24|)) Tagclass._System.___hTotalFunc2)) :qid |unknown.0:0| :skolemid |8464| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@24|)) )))
(assert (forall ((arg0@@136 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_0 arg0@@136)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_0| :pattern ( (Tclass._System.___hTotalFunc2_0 arg0@@136)) )))
(assert (forall ((|#$T0@@12| T@U) (|#$T1@@12| T@U) (|#$R@@25| T@U) ) (!  (=> (and (and (= (type |#$T0@@12|) TyType) (= (type |#$T1@@12|) TyType)) (= (type |#$R@@25|) TyType)) (= (Tclass._System.___hTotalFunc2_0 (Tclass._System.___hTotalFunc2 |#$T0@@12| |#$T1@@12| |#$R@@25|)) |#$T0@@12|)) :qid |unknown.0:0| :skolemid |8465| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@12| |#$T1@@12| |#$R@@25|)) )))
(assert (forall ((arg0@@137 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_1 arg0@@137)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_1| :pattern ( (Tclass._System.___hTotalFunc2_1 arg0@@137)) )))
(assert (forall ((|#$T0@@13| T@U) (|#$T1@@13| T@U) (|#$R@@26| T@U) ) (!  (=> (and (and (= (type |#$T0@@13|) TyType) (= (type |#$T1@@13|) TyType)) (= (type |#$R@@26|) TyType)) (= (Tclass._System.___hTotalFunc2_1 (Tclass._System.___hTotalFunc2 |#$T0@@13| |#$T1@@13| |#$R@@26|)) |#$T1@@13|)) :qid |unknown.0:0| :skolemid |8466| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@13| |#$T1@@13| |#$R@@26|)) )))
(assert (forall ((arg0@@138 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_2 arg0@@138)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_2| :pattern ( (Tclass._System.___hTotalFunc2_2 arg0@@138)) )))
(assert (forall ((|#$T0@@14| T@U) (|#$T1@@14| T@U) (|#$R@@27| T@U) ) (!  (=> (and (and (= (type |#$T0@@14|) TyType) (= (type |#$T1@@14|) TyType)) (= (type |#$R@@27|) TyType)) (= (Tclass._System.___hTotalFunc2_2 (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@27|)) |#$R@@27|)) :qid |unknown.0:0| :skolemid |8467| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@27|)) )))
(assert (forall ((|#$T0@@15| T@U) (|#$T1@@15| T@U) (|#$R@@28| T@U) (bx@@51 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@15|) TyType) (= (type |#$T1@@15|) TyType)) (= (type |#$R@@28|) TyType)) (= (type bx@@51) BoxType)) ($IsBox bx@@51 (Tclass._System.___hTotalFunc2 |#$T0@@15| |#$T1@@15| |#$R@@28|))) (and (= ($Box ($Unbox HandleTypeType bx@@51)) bx@@51) ($Is ($Unbox HandleTypeType bx@@51) (Tclass._System.___hTotalFunc2 |#$T0@@15| |#$T1@@15| |#$R@@28|)))) :qid |unknown.0:0| :skolemid |8468| :pattern ( ($IsBox bx@@51 (Tclass._System.___hTotalFunc2 |#$T0@@15| |#$T1@@15| |#$R@@28|))) )))
(assert (forall ((|#$T0@@16| T@U) (|#$T1@@16| T@U) (|#$R@@29| T@U) (|f#0@@5| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@16|) TyType) (= (type |#$T1@@16|) TyType)) (= (type |#$R@@29|) TyType)) (= (type |f#0@@5|) HandleTypeType)) (and (=> ($Is |f#0@@5| (Tclass._System.___hTotalFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|)) (and ($Is |f#0@@5| (Tclass._System.___hPartialFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|)) (forall ((|x0#0@@1| T@U) (|x1#0@@1| T@U) ) (!  (=> (and (and (= (type |x0#0@@1|) BoxType) (= (type |x1#0@@1|) BoxType)) (and ($IsBox |x0#0@@1| |#$T0@@16|) ($IsBox |x1#0@@1| |#$T1@@16|))) (Requires2 |#$T0@@16| |#$T1@@16| |#$R@@29| $OneHeap |f#0@@5| |x0#0@@1| |x1#0@@1|)) :qid |unknown.0:0| :skolemid |8469| :no-pattern (type |x0#0@@1|) :no-pattern (type |x1#0@@1|) :no-pattern (U_2_int |x0#0@@1|) :no-pattern (U_2_bool |x0#0@@1|) :no-pattern (U_2_int |x1#0@@1|) :no-pattern (U_2_bool |x1#0@@1|) )))) (=> (and ($Is |f#0@@5| (Tclass._System.___hPartialFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|)) (forall ((|x0#0@@2| T@U) (|x1#0@@2| T@U) ) (!  (=> (and (and (= (type |x0#0@@2|) BoxType) (= (type |x1#0@@2|) BoxType)) (and ($IsBox |x0#0@@2| |#$T0@@16|) ($IsBox |x1#0@@2| |#$T1@@16|))) (Requires2 |#$T0@@16| |#$T1@@16| |#$R@@29| $OneHeap |f#0@@5| |x0#0@@2| |x1#0@@2|)) :qid |unknown.0:0| :skolemid |8469| :no-pattern (type |x0#0@@2|) :no-pattern (type |x1#0@@2|) :no-pattern (U_2_int |x0#0@@2|) :no-pattern (U_2_bool |x0#0@@2|) :no-pattern (U_2_int |x1#0@@2|) :no-pattern (U_2_bool |x1#0@@2|) ))) ($Is |f#0@@5| (Tclass._System.___hTotalFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|))))) :qid |unknown.0:0| :skolemid |8470| :pattern ( ($Is |f#0@@5| (Tclass._System.___hTotalFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|))) )))
(assert (forall ((|#$T0@@17| T@U) (|#$T1@@17| T@U) (|#$R@@30| T@U) (|f#0@@6| T@U) ($h@@11 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@17|) TyType) (= (type |#$T1@@17|) TyType)) (= (type |#$R@@30|) TyType)) (= (type |f#0@@6|) HandleTypeType)) (= (type $h@@11) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11) ($IsAlloc |f#0@@6| (Tclass._System.___hPartialFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11)) (=> ($IsAlloc |f#0@@6| (Tclass._System.___hPartialFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11) ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11)))) :qid |unknown.0:0| :skolemid |8471| :pattern ( ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11)) )))
(assert (forall ((arg0@@139 T@U) (arg1@@63 T@U) ) (! (= (type (Tclass._System.___hFunc1 arg0@@139 arg1@@63)) TyType) :qid |funType:Tclass._System.___hFunc1| :pattern ( (Tclass._System.___hFunc1 arg0@@139 arg1@@63)) )))
(assert (forall ((|#$T0@@18| T@U) (|#$R@@31| T@U) ) (!  (=> (and (= (type |#$T0@@18|) TyType) (= (type |#$R@@31|) TyType)) (= (Tag (Tclass._System.___hFunc1 |#$T0@@18| |#$R@@31|)) Tagclass._System.___hFunc1)) :qid |unknown.0:0| :skolemid |8472| :pattern ( (Tclass._System.___hFunc1 |#$T0@@18| |#$R@@31|)) )))
(assert (forall ((arg0@@140 T@U) ) (! (= (type (Tclass._System.___hFunc1_0 arg0@@140)) TyType) :qid |funType:Tclass._System.___hFunc1_0| :pattern ( (Tclass._System.___hFunc1_0 arg0@@140)) )))
(assert (forall ((|#$T0@@19| T@U) (|#$R@@32| T@U) ) (!  (=> (and (= (type |#$T0@@19|) TyType) (= (type |#$R@@32|) TyType)) (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@19| |#$R@@32|)) |#$T0@@19|)) :qid |unknown.0:0| :skolemid |8473| :pattern ( (Tclass._System.___hFunc1 |#$T0@@19| |#$R@@32|)) )))
(assert (forall ((arg0@@141 T@U) ) (! (= (type (Tclass._System.___hFunc1_1 arg0@@141)) TyType) :qid |funType:Tclass._System.___hFunc1_1| :pattern ( (Tclass._System.___hFunc1_1 arg0@@141)) )))
(assert (forall ((|#$T0@@20| T@U) (|#$R@@33| T@U) ) (!  (=> (and (= (type |#$T0@@20|) TyType) (= (type |#$R@@33|) TyType)) (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@20| |#$R@@33|)) |#$R@@33|)) :qid |unknown.0:0| :skolemid |8474| :pattern ( (Tclass._System.___hFunc1 |#$T0@@20| |#$R@@33|)) )))
(assert (forall ((|#$T0@@21| T@U) (|#$R@@34| T@U) (bx@@52 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@21|) TyType) (= (type |#$R@@34|) TyType)) (= (type bx@@52) BoxType)) ($IsBox bx@@52 (Tclass._System.___hFunc1 |#$T0@@21| |#$R@@34|))) (and (= ($Box ($Unbox HandleTypeType bx@@52)) bx@@52) ($Is ($Unbox HandleTypeType bx@@52) (Tclass._System.___hFunc1 |#$T0@@21| |#$R@@34|)))) :qid |unknown.0:0| :skolemid |8475| :pattern ( ($IsBox bx@@52 (Tclass._System.___hFunc1 |#$T0@@21| |#$R@@34|))) )))
(assert  (and (and (and (and (and (and (and (and (forall ((arg0@@142 T@T) (arg1@@64 T@T) (arg2@@24 T@T) ) (! (= (Ctor (MapType3Type arg0@@142 arg1@@64 arg2@@24)) 22) :qid |ctor:MapType3Type| )) (forall ((arg0@@143 T@T) (arg1@@65 T@T) (arg2@@25 T@T) ) (! (= (MapType3TypeInv0 (MapType3Type arg0@@143 arg1@@65 arg2@@25)) arg0@@143) :qid |typeInv:MapType3TypeInv0| :pattern ( (MapType3Type arg0@@143 arg1@@65 arg2@@25)) ))) (forall ((arg0@@144 T@T) (arg1@@66 T@T) (arg2@@26 T@T) ) (! (= (MapType3TypeInv1 (MapType3Type arg0@@144 arg1@@66 arg2@@26)) arg1@@66) :qid |typeInv:MapType3TypeInv1| :pattern ( (MapType3Type arg0@@144 arg1@@66 arg2@@26)) ))) (forall ((arg0@@145 T@T) (arg1@@67 T@T) (arg2@@27 T@T) ) (! (= (MapType3TypeInv2 (MapType3Type arg0@@145 arg1@@67 arg2@@27)) arg2@@27) :qid |typeInv:MapType3TypeInv2| :pattern ( (MapType3Type arg0@@145 arg1@@67 arg2@@27)) ))) (forall ((arg0@@146 T@U) (arg1@@68 T@U) (arg2@@28 T@U) ) (! (let ((aVar2@@0 (MapType3TypeInv2 (type arg0@@146)))) (= (type (MapType3Select arg0@@146 arg1@@68 arg2@@28)) aVar2@@0)) :qid |funType:MapType3Select| :pattern ( (MapType3Select arg0@@146 arg1@@68 arg2@@28)) ))) (forall ((arg0@@147 T@U) (arg1@@69 T@U) (arg2@@29 T@U) (arg3@@10 T@U) ) (! (let ((aVar2@@1 (type arg3@@10))) (let ((aVar1@@3 (type arg2@@29))) (let ((aVar0@@1 (type arg1@@69))) (= (type (MapType3Store arg0@@147 arg1@@69 arg2@@29 arg3@@10)) (MapType3Type aVar0@@1 aVar1@@3 aVar2@@1))))) :qid |funType:MapType3Store| :pattern ( (MapType3Store arg0@@147 arg1@@69 arg2@@29 arg3@@10)) ))) (forall ((m@@32 T@U) (x0@@10 T@U) (x1@@4 T@U) (val@@11 T@U) ) (! (let ((aVar2@@2 (MapType3TypeInv2 (type m@@32)))) (=> (= (type val@@11) aVar2@@2) (= (MapType3Select (MapType3Store m@@32 x0@@10 x1@@4 val@@11) x0@@10 x1@@4) val@@11))) :qid |mapAx0:MapType3Select| :weight 0 ))) (and (and (forall ((val@@12 T@U) (m@@33 T@U) (x0@@11 T@U) (x1@@5 T@U) (y0@@7 T@U) (y1@@3 T@U) ) (!  (or (= x0@@11 y0@@7) (= (MapType3Select (MapType3Store m@@33 x0@@11 x1@@5 val@@12) y0@@7 y1@@3) (MapType3Select m@@33 y0@@7 y1@@3))) :qid |mapAx1:MapType3Select:0| :weight 0 )) (forall ((val@@13 T@U) (m@@34 T@U) (x0@@12 T@U) (x1@@6 T@U) (y0@@8 T@U) (y1@@4 T@U) ) (!  (or (= x1@@6 y1@@4) (= (MapType3Select (MapType3Store m@@34 x0@@12 x1@@6 val@@13) y0@@8 y1@@4) (MapType3Select m@@34 y0@@8 y1@@4))) :qid |mapAx1:MapType3Select:1| :weight 0 ))) (forall ((val@@14 T@U) (m@@35 T@U) (x0@@13 T@U) (x1@@7 T@U) (y0@@9 T@U) (y1@@5 T@U) ) (!  (or true (= (MapType3Select (MapType3Store m@@35 x0@@13 x1@@7 val@@14) y0@@9 y1@@5) (MapType3Select m@@35 y0@@9 y1@@5))) :qid |mapAx2:MapType3Select| :weight 0 )))) (forall ((arg0@@148 T@U) (arg1@@70 T@U) (arg2@@30 T@U) ) (! (= (type (Handle1 arg0@@148 arg1@@70 arg2@@30)) HandleTypeType) :qid |funType:Handle1| :pattern ( (Handle1 arg0@@148 arg1@@70 arg2@@30)) ))))
(assert (forall ((t0@@42 T@U) (t1@@18 T@U) (heap@@11 T@U) (h@@34 T@U) (r@@16 T@U) (rd@@5 T@U) (bx0@@15 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@42) TyType) (= (type t1@@18) TyType)) (= (type heap@@11) (MapType0Type refType MapType1Type))) (= (type h@@34) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@16) (MapType3Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@5) (MapType3Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@15) BoxType)) (= (Apply1 t0@@42 t1@@18 heap@@11 (Handle1 h@@34 r@@16 rd@@5) bx0@@15) (MapType3Select h@@34 heap@@11 bx0@@15))) :qid |unknown.0:0| :skolemid |8476| :pattern ( (Apply1 t0@@42 t1@@18 heap@@11 (Handle1 h@@34 r@@16 rd@@5) bx0@@15)) )))
(assert (forall ((t0@@43 T@U) (t1@@19 T@U) (heap@@12 T@U) (h@@35 T@U) (r@@17 T@U) (rd@@6 T@U) (bx0@@16 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@43) TyType) (= (type t1@@19) TyType)) (= (type heap@@12) (MapType0Type refType MapType1Type))) (= (type h@@35) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@17) (MapType3Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@6) (MapType3Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@16) BoxType)) (U_2_bool (MapType3Select r@@17 heap@@12 bx0@@16))) (Requires1 t0@@43 t1@@19 heap@@12 (Handle1 h@@35 r@@17 rd@@6) bx0@@16)) :qid |unknown.0:0| :skolemid |8477| :pattern ( (Requires1 t0@@43 t1@@19 heap@@12 (Handle1 h@@35 r@@17 rd@@6) bx0@@16)) )))
(assert (forall ((arg0@@149 T@U) (arg1@@71 T@U) (arg2@@31 T@U) (arg3@@11 T@U) (arg4@@3 T@U) ) (! (= (type (Reads1 arg0@@149 arg1@@71 arg2@@31 arg3@@11 arg4@@3)) (MapType0Type BoxType boolType)) :qid |funType:Reads1| :pattern ( (Reads1 arg0@@149 arg1@@71 arg2@@31 arg3@@11 arg4@@3)) )))
(assert (forall ((t0@@44 T@U) (t1@@20 T@U) (heap@@13 T@U) (h@@36 T@U) (r@@18 T@U) (rd@@7 T@U) (bx0@@17 T@U) (bx@@53 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@44) TyType) (= (type t1@@20) TyType)) (= (type heap@@13) (MapType0Type refType MapType1Type))) (= (type h@@36) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@18) (MapType3Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@7) (MapType3Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@17) BoxType)) (= (type bx@@53) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads1 t0@@44 t1@@20 heap@@13 (Handle1 h@@36 r@@18 rd@@7) bx0@@17) bx@@53)) (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@13 bx0@@17) bx@@53))) (=> (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@13 bx0@@17) bx@@53)) (U_2_bool (MapType0Select (Reads1 t0@@44 t1@@20 heap@@13 (Handle1 h@@36 r@@18 rd@@7) bx0@@17) bx@@53))))) :qid |unknown.0:0| :skolemid |8478| :pattern ( (MapType0Select (Reads1 t0@@44 t1@@20 heap@@13 (Handle1 h@@36 r@@18 rd@@7) bx0@@17) bx@@53)) )))
(assert (forall ((t0@@45 T@U) (t1@@21 T@U) (h0@@12 T@U) (h1@@12 T@U) (f@@29 T@U) (bx0@@18 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@45) TyType) (= (type t1@@21) TyType)) (= (type h0@@12) (MapType0Type refType MapType1Type))) (= (type h1@@12) (MapType0Type refType MapType1Type))) (= (type f@@29) HandleTypeType)) (= (type bx0@@18) BoxType)) (and (and (and ($HeapSucc h0@@12 h1@@12) (and ($IsGoodHeap h0@@12) ($IsGoodHeap h1@@12))) (and ($IsBox bx0@@18 t0@@45) ($Is f@@29 (Tclass._System.___hFunc1 t0@@45 t1@@21)))) (forall ((o@@66 T@U) (fld@@11 T@U) ) (! (let ((a@@94 (FieldTypeInv0 (type fld@@11)))) (=> (and (and (= (type o@@66) refType) (= (type fld@@11) (FieldType a@@94))) (and (not (= o@@66 null)) (U_2_bool (MapType0Select (Reads1 t0@@45 t1@@21 h0@@12 f@@29 bx0@@18) ($Box o@@66))))) (= (MapType1Select (MapType0Select h0@@12 o@@66) fld@@11) (MapType1Select (MapType0Select h1@@12 o@@66) fld@@11)))) :qid |unknown.0:0| :skolemid |8479| :no-pattern (type o@@66) :no-pattern (type fld@@11) :no-pattern (U_2_int o@@66) :no-pattern (U_2_bool o@@66) :no-pattern (U_2_int fld@@11) :no-pattern (U_2_bool fld@@11) )))) (= (Reads1 t0@@45 t1@@21 h0@@12 f@@29 bx0@@18) (Reads1 t0@@45 t1@@21 h1@@12 f@@29 bx0@@18))) :qid |unknown.0:0| :skolemid |8480| :pattern ( ($HeapSucc h0@@12 h1@@12) (Reads1 t0@@45 t1@@21 h1@@12 f@@29 bx0@@18)) )))
(assert (forall ((t0@@46 T@U) (t1@@22 T@U) (h0@@13 T@U) (h1@@13 T@U) (f@@30 T@U) (bx0@@19 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@46) TyType) (= (type t1@@22) TyType)) (= (type h0@@13) (MapType0Type refType MapType1Type))) (= (type h1@@13) (MapType0Type refType MapType1Type))) (= (type f@@30) HandleTypeType)) (= (type bx0@@19) BoxType)) (and (and (and ($HeapSucc h0@@13 h1@@13) (and ($IsGoodHeap h0@@13) ($IsGoodHeap h1@@13))) (and ($IsBox bx0@@19 t0@@46) ($Is f@@30 (Tclass._System.___hFunc1 t0@@46 t1@@22)))) (forall ((o@@67 T@U) (fld@@12 T@U) ) (! (let ((a@@95 (FieldTypeInv0 (type fld@@12)))) (=> (and (and (= (type o@@67) refType) (= (type fld@@12) (FieldType a@@95))) (and (not (= o@@67 null)) (U_2_bool (MapType0Select (Reads1 t0@@46 t1@@22 h1@@13 f@@30 bx0@@19) ($Box o@@67))))) (= (MapType1Select (MapType0Select h0@@13 o@@67) fld@@12) (MapType1Select (MapType0Select h1@@13 o@@67) fld@@12)))) :qid |unknown.0:0| :skolemid |8481| :no-pattern (type o@@67) :no-pattern (type fld@@12) :no-pattern (U_2_int o@@67) :no-pattern (U_2_bool o@@67) :no-pattern (U_2_int fld@@12) :no-pattern (U_2_bool fld@@12) )))) (= (Reads1 t0@@46 t1@@22 h0@@13 f@@30 bx0@@19) (Reads1 t0@@46 t1@@22 h1@@13 f@@30 bx0@@19))) :qid |unknown.0:0| :skolemid |8482| :pattern ( ($HeapSucc h0@@13 h1@@13) (Reads1 t0@@46 t1@@22 h1@@13 f@@30 bx0@@19)) )))
(assert (forall ((t0@@47 T@U) (t1@@23 T@U) (h0@@14 T@U) (h1@@14 T@U) (f@@31 T@U) (bx0@@20 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@47) TyType) (= (type t1@@23) TyType)) (= (type h0@@14) (MapType0Type refType MapType1Type))) (= (type h1@@14) (MapType0Type refType MapType1Type))) (= (type f@@31) HandleTypeType)) (= (type bx0@@20) BoxType)) (and (and (and ($HeapSucc h0@@14 h1@@14) (and ($IsGoodHeap h0@@14) ($IsGoodHeap h1@@14))) (and ($IsBox bx0@@20 t0@@47) ($Is f@@31 (Tclass._System.___hFunc1 t0@@47 t1@@23)))) (forall ((o@@68 T@U) (fld@@13 T@U) ) (! (let ((a@@96 (FieldTypeInv0 (type fld@@13)))) (=> (and (and (= (type o@@68) refType) (= (type fld@@13) (FieldType a@@96))) (and (not (= o@@68 null)) (U_2_bool (MapType0Select (Reads1 t0@@47 t1@@23 h0@@14 f@@31 bx0@@20) ($Box o@@68))))) (= (MapType1Select (MapType0Select h0@@14 o@@68) fld@@13) (MapType1Select (MapType0Select h1@@14 o@@68) fld@@13)))) :qid |unknown.0:0| :skolemid |8483| :no-pattern (type o@@68) :no-pattern (type fld@@13) :no-pattern (U_2_int o@@68) :no-pattern (U_2_bool o@@68) :no-pattern (U_2_int fld@@13) :no-pattern (U_2_bool fld@@13) )))) (and (=> (Requires1 t0@@47 t1@@23 h0@@14 f@@31 bx0@@20) (Requires1 t0@@47 t1@@23 h1@@14 f@@31 bx0@@20)) (=> (Requires1 t0@@47 t1@@23 h1@@14 f@@31 bx0@@20) (Requires1 t0@@47 t1@@23 h0@@14 f@@31 bx0@@20)))) :qid |unknown.0:0| :skolemid |8484| :pattern ( ($HeapSucc h0@@14 h1@@14) (Requires1 t0@@47 t1@@23 h1@@14 f@@31 bx0@@20)) )))
(assert (forall ((t0@@48 T@U) (t1@@24 T@U) (h0@@15 T@U) (h1@@15 T@U) (f@@32 T@U) (bx0@@21 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@48) TyType) (= (type t1@@24) TyType)) (= (type h0@@15) (MapType0Type refType MapType1Type))) (= (type h1@@15) (MapType0Type refType MapType1Type))) (= (type f@@32) HandleTypeType)) (= (type bx0@@21) BoxType)) (and (and (and ($HeapSucc h0@@15 h1@@15) (and ($IsGoodHeap h0@@15) ($IsGoodHeap h1@@15))) (and ($IsBox bx0@@21 t0@@48) ($Is f@@32 (Tclass._System.___hFunc1 t0@@48 t1@@24)))) (forall ((o@@69 T@U) (fld@@14 T@U) ) (! (let ((a@@97 (FieldTypeInv0 (type fld@@14)))) (=> (and (and (= (type o@@69) refType) (= (type fld@@14) (FieldType a@@97))) (and (not (= o@@69 null)) (U_2_bool (MapType0Select (Reads1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21) ($Box o@@69))))) (= (MapType1Select (MapType0Select h0@@15 o@@69) fld@@14) (MapType1Select (MapType0Select h1@@15 o@@69) fld@@14)))) :qid |unknown.0:0| :skolemid |8485| :no-pattern (type o@@69) :no-pattern (type fld@@14) :no-pattern (U_2_int o@@69) :no-pattern (U_2_bool o@@69) :no-pattern (U_2_int fld@@14) :no-pattern (U_2_bool fld@@14) )))) (and (=> (Requires1 t0@@48 t1@@24 h0@@15 f@@32 bx0@@21) (Requires1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21)) (=> (Requires1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21) (Requires1 t0@@48 t1@@24 h0@@15 f@@32 bx0@@21)))) :qid |unknown.0:0| :skolemid |8486| :pattern ( ($HeapSucc h0@@15 h1@@15) (Requires1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21)) )))
(assert (forall ((t0@@49 T@U) (t1@@25 T@U) (h0@@16 T@U) (h1@@16 T@U) (f@@33 T@U) (bx0@@22 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@49) TyType) (= (type t1@@25) TyType)) (= (type h0@@16) (MapType0Type refType MapType1Type))) (= (type h1@@16) (MapType0Type refType MapType1Type))) (= (type f@@33) HandleTypeType)) (= (type bx0@@22) BoxType)) (and (and (and ($HeapSucc h0@@16 h1@@16) (and ($IsGoodHeap h0@@16) ($IsGoodHeap h1@@16))) (and ($IsBox bx0@@22 t0@@49) ($Is f@@33 (Tclass._System.___hFunc1 t0@@49 t1@@25)))) (forall ((o@@70 T@U) (fld@@15 T@U) ) (! (let ((a@@98 (FieldTypeInv0 (type fld@@15)))) (=> (and (and (= (type o@@70) refType) (= (type fld@@15) (FieldType a@@98))) (and (not (= o@@70 null)) (U_2_bool (MapType0Select (Reads1 t0@@49 t1@@25 h0@@16 f@@33 bx0@@22) ($Box o@@70))))) (= (MapType1Select (MapType0Select h0@@16 o@@70) fld@@15) (MapType1Select (MapType0Select h1@@16 o@@70) fld@@15)))) :qid |unknown.0:0| :skolemid |8487| :no-pattern (type o@@70) :no-pattern (type fld@@15) :no-pattern (U_2_int o@@70) :no-pattern (U_2_bool o@@70) :no-pattern (U_2_int fld@@15) :no-pattern (U_2_bool fld@@15) )))) (= (Apply1 t0@@49 t1@@25 h0@@16 f@@33 bx0@@22) (Apply1 t0@@49 t1@@25 h1@@16 f@@33 bx0@@22))) :qid |unknown.0:0| :skolemid |8488| :pattern ( ($HeapSucc h0@@16 h1@@16) (Apply1 t0@@49 t1@@25 h1@@16 f@@33 bx0@@22)) )))
(assert (forall ((t0@@50 T@U) (t1@@26 T@U) (h0@@17 T@U) (h1@@17 T@U) (f@@34 T@U) (bx0@@23 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@50) TyType) (= (type t1@@26) TyType)) (= (type h0@@17) (MapType0Type refType MapType1Type))) (= (type h1@@17) (MapType0Type refType MapType1Type))) (= (type f@@34) HandleTypeType)) (= (type bx0@@23) BoxType)) (and (and (and ($HeapSucc h0@@17 h1@@17) (and ($IsGoodHeap h0@@17) ($IsGoodHeap h1@@17))) (and ($IsBox bx0@@23 t0@@50) ($Is f@@34 (Tclass._System.___hFunc1 t0@@50 t1@@26)))) (forall ((o@@71 T@U) (fld@@16 T@U) ) (! (let ((a@@99 (FieldTypeInv0 (type fld@@16)))) (=> (and (and (= (type o@@71) refType) (= (type fld@@16) (FieldType a@@99))) (and (not (= o@@71 null)) (U_2_bool (MapType0Select (Reads1 t0@@50 t1@@26 h1@@17 f@@34 bx0@@23) ($Box o@@71))))) (= (MapType1Select (MapType0Select h0@@17 o@@71) fld@@16) (MapType1Select (MapType0Select h1@@17 o@@71) fld@@16)))) :qid |unknown.0:0| :skolemid |8489| :no-pattern (type o@@71) :no-pattern (type fld@@16) :no-pattern (U_2_int o@@71) :no-pattern (U_2_bool o@@71) :no-pattern (U_2_int fld@@16) :no-pattern (U_2_bool fld@@16) )))) (= (Apply1 t0@@50 t1@@26 h0@@17 f@@34 bx0@@23) (Apply1 t0@@50 t1@@26 h1@@17 f@@34 bx0@@23))) :qid |unknown.0:0| :skolemid |8490| :pattern ( ($HeapSucc h0@@17 h1@@17) (Apply1 t0@@50 t1@@26 h1@@17 f@@34 bx0@@23)) )))
(assert (forall ((t0@@51 T@U) (t1@@27 T@U) (heap@@14 T@U) (f@@35 T@U) (bx0@@24 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@51) TyType) (= (type t1@@27) TyType)) (= (type heap@@14) (MapType0Type refType MapType1Type))) (= (type f@@35) HandleTypeType)) (= (type bx0@@24) BoxType)) (and ($IsGoodHeap heap@@14) (and ($IsBox bx0@@24 t0@@51) ($Is f@@35 (Tclass._System.___hFunc1 t0@@51 t1@@27))))) (and (=> (|Set#Equal| (Reads1 t0@@51 t1@@27 $OneHeap f@@35 bx0@@24) (|Set#Empty| BoxType)) (|Set#Equal| (Reads1 t0@@51 t1@@27 heap@@14 f@@35 bx0@@24) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads1 t0@@51 t1@@27 heap@@14 f@@35 bx0@@24) (|Set#Empty| BoxType)) (|Set#Equal| (Reads1 t0@@51 t1@@27 $OneHeap f@@35 bx0@@24) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |8491| :pattern ( (Reads1 t0@@51 t1@@27 $OneHeap f@@35 bx0@@24) ($IsGoodHeap heap@@14)) :pattern ( (Reads1 t0@@51 t1@@27 heap@@14 f@@35 bx0@@24)) )))
(assert (forall ((t0@@52 T@U) (t1@@28 T@U) (heap@@15 T@U) (f@@36 T@U) (bx0@@25 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@52) TyType) (= (type t1@@28) TyType)) (= (type heap@@15) (MapType0Type refType MapType1Type))) (= (type f@@36) HandleTypeType)) (= (type bx0@@25) BoxType)) (and (and ($IsGoodHeap heap@@15) (and ($IsBox bx0@@25 t0@@52) ($Is f@@36 (Tclass._System.___hFunc1 t0@@52 t1@@28)))) (|Set#Equal| (Reads1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25) (|Set#Empty| BoxType)))) (and (=> (Requires1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25) (Requires1 t0@@52 t1@@28 heap@@15 f@@36 bx0@@25)) (=> (Requires1 t0@@52 t1@@28 heap@@15 f@@36 bx0@@25) (Requires1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25)))) :qid |unknown.0:0| :skolemid |8492| :pattern ( (Requires1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25) ($IsGoodHeap heap@@15)) :pattern ( (Requires1 t0@@52 t1@@28 heap@@15 f@@36 bx0@@25)) )))
(assert (forall ((f@@37 T@U) (t0@@53 T@U) (t1@@29 T@U) ) (!  (=> (and (and (= (type f@@37) HandleTypeType) (= (type t0@@53) TyType)) (= (type t1@@29) TyType)) (and (=> ($Is f@@37 (Tclass._System.___hFunc1 t0@@53 t1@@29)) (forall ((h@@37 T@U) (bx0@@26 T@U) ) (!  (=> (and (= (type h@@37) (MapType0Type refType MapType1Type)) (= (type bx0@@26) BoxType)) (=> (and (and ($IsGoodHeap h@@37) ($IsBox bx0@@26 t0@@53)) (Requires1 t0@@53 t1@@29 h@@37 f@@37 bx0@@26)) ($IsBox (Apply1 t0@@53 t1@@29 h@@37 f@@37 bx0@@26) t1@@29))) :qid |DafnyPre.521:12| :skolemid |8493| :pattern ( (Apply1 t0@@53 t1@@29 h@@37 f@@37 bx0@@26)) ))) (=> (forall ((h@@38 T@U) (bx0@@27 T@U) ) (!  (=> (and (= (type h@@38) (MapType0Type refType MapType1Type)) (= (type bx0@@27) BoxType)) (=> (and (and ($IsGoodHeap h@@38) ($IsBox bx0@@27 t0@@53)) (Requires1 t0@@53 t1@@29 h@@38 f@@37 bx0@@27)) ($IsBox (Apply1 t0@@53 t1@@29 h@@38 f@@37 bx0@@27) t1@@29))) :qid |DafnyPre.521:12| :skolemid |8493| :pattern ( (Apply1 t0@@53 t1@@29 h@@38 f@@37 bx0@@27)) )) ($Is f@@37 (Tclass._System.___hFunc1 t0@@53 t1@@29))))) :qid |unknown.0:0| :skolemid |8494| :pattern ( ($Is f@@37 (Tclass._System.___hFunc1 t0@@53 t1@@29))) )))
(assert (forall ((f@@38 T@U) (t0@@54 T@U) (t1@@30 T@U) (u0@@1 T@U) (u1@@0 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@38) HandleTypeType) (= (type t0@@54) TyType)) (= (type t1@@30) TyType)) (= (type u0@@1) TyType)) (= (type u1@@0) TyType)) (and (and ($Is f@@38 (Tclass._System.___hFunc1 t0@@54 t1@@30)) (forall ((bx@@54 T@U) ) (!  (=> (and (= (type bx@@54) BoxType) ($IsBox bx@@54 u0@@1)) ($IsBox bx@@54 t0@@54)) :qid |unknown.0:0| :skolemid |8495| :pattern ( ($IsBox bx@@54 u0@@1)) :pattern ( ($IsBox bx@@54 t0@@54)) ))) (forall ((bx@@55 T@U) ) (!  (=> (and (= (type bx@@55) BoxType) ($IsBox bx@@55 t1@@30)) ($IsBox bx@@55 u1@@0)) :qid |unknown.0:0| :skolemid |8496| :pattern ( ($IsBox bx@@55 t1@@30)) :pattern ( ($IsBox bx@@55 u1@@0)) )))) ($Is f@@38 (Tclass._System.___hFunc1 u0@@1 u1@@0))) :qid |unknown.0:0| :skolemid |8497| :pattern ( ($Is f@@38 (Tclass._System.___hFunc1 t0@@54 t1@@30)) ($Is f@@38 (Tclass._System.___hFunc1 u0@@1 u1@@0))) )))
(assert (forall ((f@@39 T@U) (t0@@55 T@U) (t1@@31 T@U) (h@@39 T@U) ) (!  (=> (and (and (and (and (= (type f@@39) HandleTypeType) (= (type t0@@55) TyType)) (= (type t1@@31) TyType)) (= (type h@@39) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@39)) (and (=> ($IsAlloc f@@39 (Tclass._System.___hFunc1 t0@@55 t1@@31) h@@39) (forall ((bx0@@28 T@U) ) (!  (=> (= (type bx0@@28) BoxType) (=> (and (and ($IsBox bx0@@28 t0@@55) ($IsAllocBox bx0@@28 t0@@55 h@@39)) (Requires1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28)) (forall ((r@@19 T@U) ) (!  (=> (= (type r@@19) refType) (=> (and (not (= r@@19 null)) (U_2_bool (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28) ($Box r@@19)))) (U_2_bool (MapType1Select (MapType0Select h@@39 r@@19) alloc)))) :qid |unknown.0:0| :skolemid |8498| :pattern ( (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28) ($Box r@@19))) )))) :qid |unknown.0:0| :skolemid |8499| :pattern ( (Apply1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28)) :pattern ( (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28)) ))) (=> (forall ((bx0@@29 T@U) ) (!  (=> (= (type bx0@@29) BoxType) (=> (and (and ($IsBox bx0@@29 t0@@55) ($IsAllocBox bx0@@29 t0@@55 h@@39)) (Requires1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29)) (forall ((r@@20 T@U) ) (!  (=> (= (type r@@20) refType) (=> (and (not (= r@@20 null)) (U_2_bool (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29) ($Box r@@20)))) (U_2_bool (MapType1Select (MapType0Select h@@39 r@@20) alloc)))) :qid |unknown.0:0| :skolemid |8498| :pattern ( (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29) ($Box r@@20))) )))) :qid |unknown.0:0| :skolemid |8499| :pattern ( (Apply1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29)) :pattern ( (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29)) )) ($IsAlloc f@@39 (Tclass._System.___hFunc1 t0@@55 t1@@31) h@@39)))) :qid |unknown.0:0| :skolemid |8500| :pattern ( ($IsAlloc f@@39 (Tclass._System.___hFunc1 t0@@55 t1@@31) h@@39)) )))
(assert (forall ((f@@40 T@U) (t0@@56 T@U) (t1@@32 T@U) (h@@40 T@U) ) (!  (=> (and (and (and (and (= (type f@@40) HandleTypeType) (= (type t0@@56) TyType)) (= (type t1@@32) TyType)) (= (type h@@40) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@40) ($IsAlloc f@@40 (Tclass._System.___hFunc1 t0@@56 t1@@32) h@@40))) (forall ((bx0@@30 T@U) ) (!  (=> (= (type bx0@@30) BoxType) (=> (and ($IsAllocBox bx0@@30 t0@@56 h@@40) (Requires1 t0@@56 t1@@32 h@@40 f@@40 bx0@@30)) ($IsAllocBox (Apply1 t0@@56 t1@@32 h@@40 f@@40 bx0@@30) t1@@32 h@@40))) :qid |unknown.0:0| :skolemid |8501| :pattern ( (Apply1 t0@@56 t1@@32 h@@40 f@@40 bx0@@30)) ))) :qid |unknown.0:0| :skolemid |8502| :pattern ( ($IsAlloc f@@40 (Tclass._System.___hFunc1 t0@@56 t1@@32) h@@40)) )))
(assert (forall ((arg0@@150 T@U) (arg1@@72 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1 arg0@@150 arg1@@72)) TyType) :qid |funType:Tclass._System.___hPartialFunc1| :pattern ( (Tclass._System.___hPartialFunc1 arg0@@150 arg1@@72)) )))
(assert (forall ((|#$T0@@22| T@U) (|#$R@@35| T@U) ) (!  (=> (and (= (type |#$T0@@22|) TyType) (= (type |#$R@@35|) TyType)) (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@22| |#$R@@35|)) Tagclass._System.___hPartialFunc1)) :qid |unknown.0:0| :skolemid |8503| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@22| |#$R@@35|)) )))
(assert (forall ((arg0@@151 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_0 arg0@@151)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_0| :pattern ( (Tclass._System.___hPartialFunc1_0 arg0@@151)) )))
(assert (forall ((|#$T0@@23| T@U) (|#$R@@36| T@U) ) (!  (=> (and (= (type |#$T0@@23|) TyType) (= (type |#$R@@36|) TyType)) (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@23| |#$R@@36|)) |#$T0@@23|)) :qid |unknown.0:0| :skolemid |8504| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@23| |#$R@@36|)) )))
(assert (forall ((arg0@@152 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_1 arg0@@152)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_1| :pattern ( (Tclass._System.___hPartialFunc1_1 arg0@@152)) )))
(assert (forall ((|#$T0@@24| T@U) (|#$R@@37| T@U) ) (!  (=> (and (= (type |#$T0@@24|) TyType) (= (type |#$R@@37|) TyType)) (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@24| |#$R@@37|)) |#$R@@37|)) :qid |unknown.0:0| :skolemid |8505| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@24| |#$R@@37|)) )))
(assert (forall ((|#$T0@@25| T@U) (|#$R@@38| T@U) (bx@@56 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@25|) TyType) (= (type |#$R@@38|) TyType)) (= (type bx@@56) BoxType)) ($IsBox bx@@56 (Tclass._System.___hPartialFunc1 |#$T0@@25| |#$R@@38|))) (and (= ($Box ($Unbox HandleTypeType bx@@56)) bx@@56) ($Is ($Unbox HandleTypeType bx@@56) (Tclass._System.___hPartialFunc1 |#$T0@@25| |#$R@@38|)))) :qid |unknown.0:0| :skolemid |8506| :pattern ( ($IsBox bx@@56 (Tclass._System.___hPartialFunc1 |#$T0@@25| |#$R@@38|))) )))
(assert (forall ((|#$T0@@26| T@U) (|#$R@@39| T@U) (|f#0@@7| T@U) ) (!  (=> (and (and (= (type |#$T0@@26|) TyType) (= (type |#$R@@39|) TyType)) (= (type |f#0@@7|) HandleTypeType)) (and (=> ($Is |f#0@@7| (Tclass._System.___hPartialFunc1 |#$T0@@26| |#$R@@39|)) (and ($Is |f#0@@7| (Tclass._System.___hFunc1 |#$T0@@26| |#$R@@39|)) (forall ((|x0#0@@3| T@U) ) (!  (=> (and (= (type |x0#0@@3|) BoxType) ($IsBox |x0#0@@3| |#$T0@@26|)) (|Set#Equal| (Reads1 |#$T0@@26| |#$R@@39| $OneHeap |f#0@@7| |x0#0@@3|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |8507| :no-pattern (type |x0#0@@3|) :no-pattern (U_2_int |x0#0@@3|) :no-pattern (U_2_bool |x0#0@@3|) )))) (=> (and ($Is |f#0@@7| (Tclass._System.___hFunc1 |#$T0@@26| |#$R@@39|)) (forall ((|x0#0@@4| T@U) ) (!  (=> (and (= (type |x0#0@@4|) BoxType) ($IsBox |x0#0@@4| |#$T0@@26|)) (|Set#Equal| (Reads1 |#$T0@@26| |#$R@@39| $OneHeap |f#0@@7| |x0#0@@4|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |8507| :no-pattern (type |x0#0@@4|) :no-pattern (U_2_int |x0#0@@4|) :no-pattern (U_2_bool |x0#0@@4|) ))) ($Is |f#0@@7| (Tclass._System.___hPartialFunc1 |#$T0@@26| |#$R@@39|))))) :qid |unknown.0:0| :skolemid |8508| :pattern ( ($Is |f#0@@7| (Tclass._System.___hPartialFunc1 |#$T0@@26| |#$R@@39|))) )))
(assert (forall ((|#$T0@@27| T@U) (|#$R@@40| T@U) (|f#0@@8| T@U) ($h@@12 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@27|) TyType) (= (type |#$R@@40|) TyType)) (= (type |f#0@@8|) HandleTypeType)) (= (type $h@@12) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc1 |#$T0@@27| |#$R@@40|) $h@@12) ($IsAlloc |f#0@@8| (Tclass._System.___hFunc1 |#$T0@@27| |#$R@@40|) $h@@12)) (=> ($IsAlloc |f#0@@8| (Tclass._System.___hFunc1 |#$T0@@27| |#$R@@40|) $h@@12) ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc1 |#$T0@@27| |#$R@@40|) $h@@12)))) :qid |unknown.0:0| :skolemid |8509| :pattern ( ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc1 |#$T0@@27| |#$R@@40|) $h@@12)) )))
(assert (forall ((arg0@@153 T@U) (arg1@@73 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1 arg0@@153 arg1@@73)) TyType) :qid |funType:Tclass._System.___hTotalFunc1| :pattern ( (Tclass._System.___hTotalFunc1 arg0@@153 arg1@@73)) )))
(assert (forall ((|#$T0@@28| T@U) (|#$R@@41| T@U) ) (!  (=> (and (= (type |#$T0@@28|) TyType) (= (type |#$R@@41|) TyType)) (= (Tag (Tclass._System.___hTotalFunc1 |#$T0@@28| |#$R@@41|)) Tagclass._System.___hTotalFunc1)) :qid |unknown.0:0| :skolemid |8510| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@28| |#$R@@41|)) )))
(assert (forall ((arg0@@154 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_0 arg0@@154)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_0| :pattern ( (Tclass._System.___hTotalFunc1_0 arg0@@154)) )))
(assert (forall ((|#$T0@@29| T@U) (|#$R@@42| T@U) ) (!  (=> (and (= (type |#$T0@@29|) TyType) (= (type |#$R@@42|) TyType)) (= (Tclass._System.___hTotalFunc1_0 (Tclass._System.___hTotalFunc1 |#$T0@@29| |#$R@@42|)) |#$T0@@29|)) :qid |unknown.0:0| :skolemid |8511| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@29| |#$R@@42|)) )))
(assert (forall ((arg0@@155 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_1 arg0@@155)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_1| :pattern ( (Tclass._System.___hTotalFunc1_1 arg0@@155)) )))
(assert (forall ((|#$T0@@30| T@U) (|#$R@@43| T@U) ) (!  (=> (and (= (type |#$T0@@30|) TyType) (= (type |#$R@@43|) TyType)) (= (Tclass._System.___hTotalFunc1_1 (Tclass._System.___hTotalFunc1 |#$T0@@30| |#$R@@43|)) |#$R@@43|)) :qid |unknown.0:0| :skolemid |8512| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@30| |#$R@@43|)) )))
(assert (forall ((|#$T0@@31| T@U) (|#$R@@44| T@U) (bx@@57 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@31|) TyType) (= (type |#$R@@44|) TyType)) (= (type bx@@57) BoxType)) ($IsBox bx@@57 (Tclass._System.___hTotalFunc1 |#$T0@@31| |#$R@@44|))) (and (= ($Box ($Unbox HandleTypeType bx@@57)) bx@@57) ($Is ($Unbox HandleTypeType bx@@57) (Tclass._System.___hTotalFunc1 |#$T0@@31| |#$R@@44|)))) :qid |unknown.0:0| :skolemid |8513| :pattern ( ($IsBox bx@@57 (Tclass._System.___hTotalFunc1 |#$T0@@31| |#$R@@44|))) )))
(assert (forall ((|#$T0@@32| T@U) (|#$R@@45| T@U) (|f#0@@9| T@U) ) (!  (=> (and (and (= (type |#$T0@@32|) TyType) (= (type |#$R@@45|) TyType)) (= (type |f#0@@9|) HandleTypeType)) (and (=> ($Is |f#0@@9| (Tclass._System.___hTotalFunc1 |#$T0@@32| |#$R@@45|)) (and ($Is |f#0@@9| (Tclass._System.___hPartialFunc1 |#$T0@@32| |#$R@@45|)) (forall ((|x0#0@@5| T@U) ) (!  (=> (and (= (type |x0#0@@5|) BoxType) ($IsBox |x0#0@@5| |#$T0@@32|)) (Requires1 |#$T0@@32| |#$R@@45| $OneHeap |f#0@@9| |x0#0@@5|)) :qid |unknown.0:0| :skolemid |8514| :no-pattern (type |x0#0@@5|) :no-pattern (U_2_int |x0#0@@5|) :no-pattern (U_2_bool |x0#0@@5|) )))) (=> (and ($Is |f#0@@9| (Tclass._System.___hPartialFunc1 |#$T0@@32| |#$R@@45|)) (forall ((|x0#0@@6| T@U) ) (!  (=> (and (= (type |x0#0@@6|) BoxType) ($IsBox |x0#0@@6| |#$T0@@32|)) (Requires1 |#$T0@@32| |#$R@@45| $OneHeap |f#0@@9| |x0#0@@6|)) :qid |unknown.0:0| :skolemid |8514| :no-pattern (type |x0#0@@6|) :no-pattern (U_2_int |x0#0@@6|) :no-pattern (U_2_bool |x0#0@@6|) ))) ($Is |f#0@@9| (Tclass._System.___hTotalFunc1 |#$T0@@32| |#$R@@45|))))) :qid |unknown.0:0| :skolemid |8515| :pattern ( ($Is |f#0@@9| (Tclass._System.___hTotalFunc1 |#$T0@@32| |#$R@@45|))) )))
(assert (forall ((|#$T0@@33| T@U) (|#$R@@46| T@U) (|f#0@@10| T@U) ($h@@13 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@33|) TyType) (= (type |#$R@@46|) TyType)) (= (type |f#0@@10|) HandleTypeType)) (= (type $h@@13) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc1 |#$T0@@33| |#$R@@46|) $h@@13) ($IsAlloc |f#0@@10| (Tclass._System.___hPartialFunc1 |#$T0@@33| |#$R@@46|) $h@@13)) (=> ($IsAlloc |f#0@@10| (Tclass._System.___hPartialFunc1 |#$T0@@33| |#$R@@46|) $h@@13) ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc1 |#$T0@@33| |#$R@@46|) $h@@13)))) :qid |unknown.0:0| :skolemid |8516| :pattern ( ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc1 |#$T0@@33| |#$R@@46|) $h@@13)) )))
(assert (forall ((arg0@@156 T@U) (arg1@@74 T@U) (arg2@@32 T@U) (arg3@@12 T@U) (arg4@@4 T@U) ) (! (= (type (Tclass._System.___hFunc4 arg0@@156 arg1@@74 arg2@@32 arg3@@12 arg4@@4)) TyType) :qid |funType:Tclass._System.___hFunc4| :pattern ( (Tclass._System.___hFunc4 arg0@@156 arg1@@74 arg2@@32 arg3@@12 arg4@@4)) )))
(assert (forall ((|#$T0@@34| T@U) (|#$T1@@18| T@U) (|#$T2| T@U) (|#$T3| T@U) (|#$R@@47| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@34|) TyType) (= (type |#$T1@@18|) TyType)) (= (type |#$T2|) TyType)) (= (type |#$T3|) TyType)) (= (type |#$R@@47|) TyType)) (= (Tag (Tclass._System.___hFunc4 |#$T0@@34| |#$T1@@18| |#$T2| |#$T3| |#$R@@47|)) Tagclass._System.___hFunc4)) :qid |unknown.0:0| :skolemid |8517| :pattern ( (Tclass._System.___hFunc4 |#$T0@@34| |#$T1@@18| |#$T2| |#$T3| |#$R@@47|)) )))
(assert (forall ((arg0@@157 T@U) ) (! (= (type (Tclass._System.___hFunc4_0 arg0@@157)) TyType) :qid |funType:Tclass._System.___hFunc4_0| :pattern ( (Tclass._System.___hFunc4_0 arg0@@157)) )))
(assert (forall ((|#$T0@@35| T@U) (|#$T1@@19| T@U) (|#$T2@@0| T@U) (|#$T3@@0| T@U) (|#$R@@48| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@35|) TyType) (= (type |#$T1@@19|) TyType)) (= (type |#$T2@@0|) TyType)) (= (type |#$T3@@0|) TyType)) (= (type |#$R@@48|) TyType)) (= (Tclass._System.___hFunc4_0 (Tclass._System.___hFunc4 |#$T0@@35| |#$T1@@19| |#$T2@@0| |#$T3@@0| |#$R@@48|)) |#$T0@@35|)) :qid |unknown.0:0| :skolemid |8518| :pattern ( (Tclass._System.___hFunc4 |#$T0@@35| |#$T1@@19| |#$T2@@0| |#$T3@@0| |#$R@@48|)) )))
(assert (forall ((arg0@@158 T@U) ) (! (= (type (Tclass._System.___hFunc4_1 arg0@@158)) TyType) :qid |funType:Tclass._System.___hFunc4_1| :pattern ( (Tclass._System.___hFunc4_1 arg0@@158)) )))
(assert (forall ((|#$T0@@36| T@U) (|#$T1@@20| T@U) (|#$T2@@1| T@U) (|#$T3@@1| T@U) (|#$R@@49| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@36|) TyType) (= (type |#$T1@@20|) TyType)) (= (type |#$T2@@1|) TyType)) (= (type |#$T3@@1|) TyType)) (= (type |#$R@@49|) TyType)) (= (Tclass._System.___hFunc4_1 (Tclass._System.___hFunc4 |#$T0@@36| |#$T1@@20| |#$T2@@1| |#$T3@@1| |#$R@@49|)) |#$T1@@20|)) :qid |unknown.0:0| :skolemid |8519| :pattern ( (Tclass._System.___hFunc4 |#$T0@@36| |#$T1@@20| |#$T2@@1| |#$T3@@1| |#$R@@49|)) )))
(assert (forall ((arg0@@159 T@U) ) (! (= (type (Tclass._System.___hFunc4_2 arg0@@159)) TyType) :qid |funType:Tclass._System.___hFunc4_2| :pattern ( (Tclass._System.___hFunc4_2 arg0@@159)) )))
(assert (forall ((|#$T0@@37| T@U) (|#$T1@@21| T@U) (|#$T2@@2| T@U) (|#$T3@@2| T@U) (|#$R@@50| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@37|) TyType) (= (type |#$T1@@21|) TyType)) (= (type |#$T2@@2|) TyType)) (= (type |#$T3@@2|) TyType)) (= (type |#$R@@50|) TyType)) (= (Tclass._System.___hFunc4_2 (Tclass._System.___hFunc4 |#$T0@@37| |#$T1@@21| |#$T2@@2| |#$T3@@2| |#$R@@50|)) |#$T2@@2|)) :qid |unknown.0:0| :skolemid |8520| :pattern ( (Tclass._System.___hFunc4 |#$T0@@37| |#$T1@@21| |#$T2@@2| |#$T3@@2| |#$R@@50|)) )))
(assert (forall ((arg0@@160 T@U) ) (! (= (type (Tclass._System.___hFunc4_3 arg0@@160)) TyType) :qid |funType:Tclass._System.___hFunc4_3| :pattern ( (Tclass._System.___hFunc4_3 arg0@@160)) )))
(assert (forall ((|#$T0@@38| T@U) (|#$T1@@22| T@U) (|#$T2@@3| T@U) (|#$T3@@3| T@U) (|#$R@@51| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@38|) TyType) (= (type |#$T1@@22|) TyType)) (= (type |#$T2@@3|) TyType)) (= (type |#$T3@@3|) TyType)) (= (type |#$R@@51|) TyType)) (= (Tclass._System.___hFunc4_3 (Tclass._System.___hFunc4 |#$T0@@38| |#$T1@@22| |#$T2@@3| |#$T3@@3| |#$R@@51|)) |#$T3@@3|)) :qid |unknown.0:0| :skolemid |8521| :pattern ( (Tclass._System.___hFunc4 |#$T0@@38| |#$T1@@22| |#$T2@@3| |#$T3@@3| |#$R@@51|)) )))
(assert (forall ((arg0@@161 T@U) ) (! (= (type (Tclass._System.___hFunc4_4 arg0@@161)) TyType) :qid |funType:Tclass._System.___hFunc4_4| :pattern ( (Tclass._System.___hFunc4_4 arg0@@161)) )))
(assert (forall ((|#$T0@@39| T@U) (|#$T1@@23| T@U) (|#$T2@@4| T@U) (|#$T3@@4| T@U) (|#$R@@52| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@39|) TyType) (= (type |#$T1@@23|) TyType)) (= (type |#$T2@@4|) TyType)) (= (type |#$T3@@4|) TyType)) (= (type |#$R@@52|) TyType)) (= (Tclass._System.___hFunc4_4 (Tclass._System.___hFunc4 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$T3@@4| |#$R@@52|)) |#$R@@52|)) :qid |unknown.0:0| :skolemid |8522| :pattern ( (Tclass._System.___hFunc4 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$T3@@4| |#$R@@52|)) )))
(assert (forall ((|#$T0@@40| T@U) (|#$T1@@24| T@U) (|#$T2@@5| T@U) (|#$T3@@5| T@U) (|#$R@@53| T@U) (bx@@58 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@40|) TyType) (= (type |#$T1@@24|) TyType)) (= (type |#$T2@@5|) TyType)) (= (type |#$T3@@5|) TyType)) (= (type |#$R@@53|) TyType)) (= (type bx@@58) BoxType)) ($IsBox bx@@58 (Tclass._System.___hFunc4 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$T3@@5| |#$R@@53|))) (and (= ($Box ($Unbox HandleTypeType bx@@58)) bx@@58) ($Is ($Unbox HandleTypeType bx@@58) (Tclass._System.___hFunc4 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$T3@@5| |#$R@@53|)))) :qid |unknown.0:0| :skolemid |8523| :pattern ( ($IsBox bx@@58 (Tclass._System.___hFunc4 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$T3@@5| |#$R@@53|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@162 T@T) (arg1@@75 T@T) (arg2@@33 T@T) (arg3@@13 T@T) (arg4@@5 T@T) (arg5@@1 T@T) ) (! (= (Ctor (MapType4Type arg0@@162 arg1@@75 arg2@@33 arg3@@13 arg4@@5 arg5@@1)) 23) :qid |ctor:MapType4Type| )) (forall ((arg0@@163 T@T) (arg1@@76 T@T) (arg2@@34 T@T) (arg3@@14 T@T) (arg4@@6 T@T) (arg5@@2 T@T) ) (! (= (MapType4TypeInv0 (MapType4Type arg0@@163 arg1@@76 arg2@@34 arg3@@14 arg4@@6 arg5@@2)) arg0@@163) :qid |typeInv:MapType4TypeInv0| :pattern ( (MapType4Type arg0@@163 arg1@@76 arg2@@34 arg3@@14 arg4@@6 arg5@@2)) ))) (forall ((arg0@@164 T@T) (arg1@@77 T@T) (arg2@@35 T@T) (arg3@@15 T@T) (arg4@@7 T@T) (arg5@@3 T@T) ) (! (= (MapType4TypeInv1 (MapType4Type arg0@@164 arg1@@77 arg2@@35 arg3@@15 arg4@@7 arg5@@3)) arg1@@77) :qid |typeInv:MapType4TypeInv1| :pattern ( (MapType4Type arg0@@164 arg1@@77 arg2@@35 arg3@@15 arg4@@7 arg5@@3)) ))) (forall ((arg0@@165 T@T) (arg1@@78 T@T) (arg2@@36 T@T) (arg3@@16 T@T) (arg4@@8 T@T) (arg5@@4 T@T) ) (! (= (MapType4TypeInv2 (MapType4Type arg0@@165 arg1@@78 arg2@@36 arg3@@16 arg4@@8 arg5@@4)) arg2@@36) :qid |typeInv:MapType4TypeInv2| :pattern ( (MapType4Type arg0@@165 arg1@@78 arg2@@36 arg3@@16 arg4@@8 arg5@@4)) ))) (forall ((arg0@@166 T@T) (arg1@@79 T@T) (arg2@@37 T@T) (arg3@@17 T@T) (arg4@@9 T@T) (arg5@@5 T@T) ) (! (= (MapType4TypeInv3 (MapType4Type arg0@@166 arg1@@79 arg2@@37 arg3@@17 arg4@@9 arg5@@5)) arg3@@17) :qid |typeInv:MapType4TypeInv3| :pattern ( (MapType4Type arg0@@166 arg1@@79 arg2@@37 arg3@@17 arg4@@9 arg5@@5)) ))) (forall ((arg0@@167 T@T) (arg1@@80 T@T) (arg2@@38 T@T) (arg3@@18 T@T) (arg4@@10 T@T) (arg5@@6 T@T) ) (! (= (MapType4TypeInv4 (MapType4Type arg0@@167 arg1@@80 arg2@@38 arg3@@18 arg4@@10 arg5@@6)) arg4@@10) :qid |typeInv:MapType4TypeInv4| :pattern ( (MapType4Type arg0@@167 arg1@@80 arg2@@38 arg3@@18 arg4@@10 arg5@@6)) ))) (forall ((arg0@@168 T@T) (arg1@@81 T@T) (arg2@@39 T@T) (arg3@@19 T@T) (arg4@@11 T@T) (arg5@@7 T@T) ) (! (= (MapType4TypeInv5 (MapType4Type arg0@@168 arg1@@81 arg2@@39 arg3@@19 arg4@@11 arg5@@7)) arg5@@7) :qid |typeInv:MapType4TypeInv5| :pattern ( (MapType4Type arg0@@168 arg1@@81 arg2@@39 arg3@@19 arg4@@11 arg5@@7)) ))) (forall ((arg0@@169 T@U) (arg1@@82 T@U) (arg2@@40 T@U) (arg3@@20 T@U) (arg4@@12 T@U) (arg5@@8 T@U) ) (! (let ((aVar5 (MapType4TypeInv5 (type arg0@@169)))) (= (type (MapType4Select arg0@@169 arg1@@82 arg2@@40 arg3@@20 arg4@@12 arg5@@8)) aVar5)) :qid |funType:MapType4Select| :pattern ( (MapType4Select arg0@@169 arg1@@82 arg2@@40 arg3@@20 arg4@@12 arg5@@8)) ))) (forall ((arg0@@170 T@U) (arg1@@83 T@U) (arg2@@41 T@U) (arg3@@21 T@U) (arg4@@13 T@U) (arg5@@9 T@U) (arg6@@1 T@U) ) (! (let ((aVar5@@0 (type arg6@@1))) (let ((aVar4 (type arg5@@9))) (let ((aVar3@@2 (type arg4@@13))) (let ((aVar2@@3 (type arg3@@21))) (let ((aVar1@@4 (type arg2@@41))) (let ((aVar0@@2 (type arg1@@83))) (= (type (MapType4Store arg0@@170 arg1@@83 arg2@@41 arg3@@21 arg4@@13 arg5@@9 arg6@@1)) (MapType4Type aVar0@@2 aVar1@@4 aVar2@@3 aVar3@@2 aVar4 aVar5@@0)))))))) :qid |funType:MapType4Store| :pattern ( (MapType4Store arg0@@170 arg1@@83 arg2@@41 arg3@@21 arg4@@13 arg5@@9 arg6@@1)) ))) (forall ((m@@36 T@U) (x0@@14 T@U) (x1@@8 T@U) (x2@@4 T@U) (x3 T@U) (x4 T@U) (val@@15 T@U) ) (! (let ((aVar5@@1 (MapType4TypeInv5 (type m@@36)))) (=> (= (type val@@15) aVar5@@1) (= (MapType4Select (MapType4Store m@@36 x0@@14 x1@@8 x2@@4 x3 x4 val@@15) x0@@14 x1@@8 x2@@4 x3 x4) val@@15))) :qid |mapAx0:MapType4Select| :weight 0 ))) (and (and (and (and (and (forall ((val@@16 T@U) (m@@37 T@U) (x0@@15 T@U) (x1@@9 T@U) (x2@@5 T@U) (x3@@0 T@U) (x4@@0 T@U) (y0@@10 T@U) (y1@@6 T@U) (y2@@3 T@U) (y3 T@U) (y4 T@U) ) (!  (or (= x0@@15 y0@@10) (= (MapType4Select (MapType4Store m@@37 x0@@15 x1@@9 x2@@5 x3@@0 x4@@0 val@@16) y0@@10 y1@@6 y2@@3 y3 y4) (MapType4Select m@@37 y0@@10 y1@@6 y2@@3 y3 y4))) :qid |mapAx1:MapType4Select:0| :weight 0 )) (forall ((val@@17 T@U) (m@@38 T@U) (x0@@16 T@U) (x1@@10 T@U) (x2@@6 T@U) (x3@@1 T@U) (x4@@1 T@U) (y0@@11 T@U) (y1@@7 T@U) (y2@@4 T@U) (y3@@0 T@U) (y4@@0 T@U) ) (!  (or (= x1@@10 y1@@7) (= (MapType4Select (MapType4Store m@@38 x0@@16 x1@@10 x2@@6 x3@@1 x4@@1 val@@17) y0@@11 y1@@7 y2@@4 y3@@0 y4@@0) (MapType4Select m@@38 y0@@11 y1@@7 y2@@4 y3@@0 y4@@0))) :qid |mapAx1:MapType4Select:1| :weight 0 ))) (forall ((val@@18 T@U) (m@@39 T@U) (x0@@17 T@U) (x1@@11 T@U) (x2@@7 T@U) (x3@@2 T@U) (x4@@2 T@U) (y0@@12 T@U) (y1@@8 T@U) (y2@@5 T@U) (y3@@1 T@U) (y4@@1 T@U) ) (!  (or (= x2@@7 y2@@5) (= (MapType4Select (MapType4Store m@@39 x0@@17 x1@@11 x2@@7 x3@@2 x4@@2 val@@18) y0@@12 y1@@8 y2@@5 y3@@1 y4@@1) (MapType4Select m@@39 y0@@12 y1@@8 y2@@5 y3@@1 y4@@1))) :qid |mapAx1:MapType4Select:2| :weight 0 ))) (forall ((val@@19 T@U) (m@@40 T@U) (x0@@18 T@U) (x1@@12 T@U) (x2@@8 T@U) (x3@@3 T@U) (x4@@3 T@U) (y0@@13 T@U) (y1@@9 T@U) (y2@@6 T@U) (y3@@2 T@U) (y4@@2 T@U) ) (!  (or (= x3@@3 y3@@2) (= (MapType4Select (MapType4Store m@@40 x0@@18 x1@@12 x2@@8 x3@@3 x4@@3 val@@19) y0@@13 y1@@9 y2@@6 y3@@2 y4@@2) (MapType4Select m@@40 y0@@13 y1@@9 y2@@6 y3@@2 y4@@2))) :qid |mapAx1:MapType4Select:3| :weight 0 ))) (forall ((val@@20 T@U) (m@@41 T@U) (x0@@19 T@U) (x1@@13 T@U) (x2@@9 T@U) (x3@@4 T@U) (x4@@4 T@U) (y0@@14 T@U) (y1@@10 T@U) (y2@@7 T@U) (y3@@3 T@U) (y4@@3 T@U) ) (!  (or (= x4@@4 y4@@3) (= (MapType4Select (MapType4Store m@@41 x0@@19 x1@@13 x2@@9 x3@@4 x4@@4 val@@20) y0@@14 y1@@10 y2@@7 y3@@3 y4@@3) (MapType4Select m@@41 y0@@14 y1@@10 y2@@7 y3@@3 y4@@3))) :qid |mapAx1:MapType4Select:4| :weight 0 ))) (forall ((val@@21 T@U) (m@@42 T@U) (x0@@20 T@U) (x1@@14 T@U) (x2@@10 T@U) (x3@@5 T@U) (x4@@5 T@U) (y0@@15 T@U) (y1@@11 T@U) (y2@@8 T@U) (y3@@4 T@U) (y4@@4 T@U) ) (!  (or true (= (MapType4Select (MapType4Store m@@42 x0@@20 x1@@14 x2@@10 x3@@5 x4@@5 val@@21) y0@@15 y1@@11 y2@@8 y3@@4 y4@@4) (MapType4Select m@@42 y0@@15 y1@@11 y2@@8 y3@@4 y4@@4))) :qid |mapAx2:MapType4Select| :weight 0 )))) (forall ((arg0@@171 T@U) (arg1@@84 T@U) (arg2@@42 T@U) (arg3@@22 T@U) (arg4@@14 T@U) (arg5@@10 T@U) (arg6@@2 T@U) (arg7 T@U) (arg8 T@U) (arg9 T@U) (arg10 T@U) ) (! (= (type (Apply4 arg0@@171 arg1@@84 arg2@@42 arg3@@22 arg4@@14 arg5@@10 arg6@@2 arg7 arg8 arg9 arg10)) BoxType) :qid |funType:Apply4| :pattern ( (Apply4 arg0@@171 arg1@@84 arg2@@42 arg3@@22 arg4@@14 arg5@@10 arg6@@2 arg7 arg8 arg9 arg10)) ))) (forall ((arg0@@172 T@U) (arg1@@85 T@U) (arg2@@43 T@U) ) (! (= (type (Handle4 arg0@@172 arg1@@85 arg2@@43)) HandleTypeType) :qid |funType:Handle4| :pattern ( (Handle4 arg0@@172 arg1@@85 arg2@@43)) ))))
(assert (forall ((t0@@57 T@U) (t1@@33 T@U) (t2@@14 T@U) (t3 T@U) (t4 T@U) (heap@@16 T@U) (h@@41 T@U) (r@@21 T@U) (rd@@8 T@U) (bx0@@31 T@U) (bx1@@15 T@U) (bx2 T@U) (bx3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@57) TyType) (= (type t1@@33) TyType)) (= (type t2@@14) TyType)) (= (type t3) TyType)) (= (type t4) TyType)) (= (type heap@@16) (MapType0Type refType MapType1Type))) (= (type h@@41) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@21) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@8) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@31) BoxType)) (= (type bx1@@15) BoxType)) (= (type bx2) BoxType)) (= (type bx3) BoxType)) (= (Apply4 t0@@57 t1@@33 t2@@14 t3 t4 heap@@16 (Handle4 h@@41 r@@21 rd@@8) bx0@@31 bx1@@15 bx2 bx3) (MapType4Select h@@41 heap@@16 bx0@@31 bx1@@15 bx2 bx3))) :qid |unknown.0:0| :skolemid |8524| :pattern ( (Apply4 t0@@57 t1@@33 t2@@14 t3 t4 heap@@16 (Handle4 h@@41 r@@21 rd@@8) bx0@@31 bx1@@15 bx2 bx3)) )))
(assert (forall ((t0@@58 T@U) (t1@@34 T@U) (t2@@15 T@U) (t3@@0 T@U) (t4@@0 T@U) (heap@@17 T@U) (h@@42 T@U) (r@@22 T@U) (rd@@9 T@U) (bx0@@32 T@U) (bx1@@16 T@U) (bx2@@0 T@U) (bx3@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@58) TyType) (= (type t1@@34) TyType)) (= (type t2@@15) TyType)) (= (type t3@@0) TyType)) (= (type t4@@0) TyType)) (= (type heap@@17) (MapType0Type refType MapType1Type))) (= (type h@@42) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@22) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@9) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@32) BoxType)) (= (type bx1@@16) BoxType)) (= (type bx2@@0) BoxType)) (= (type bx3@@0) BoxType)) (U_2_bool (MapType4Select r@@22 heap@@17 bx0@@32 bx1@@16 bx2@@0 bx3@@0))) (Requires4 t0@@58 t1@@34 t2@@15 t3@@0 t4@@0 heap@@17 (Handle4 h@@42 r@@22 rd@@9) bx0@@32 bx1@@16 bx2@@0 bx3@@0)) :qid |unknown.0:0| :skolemid |8525| :pattern ( (Requires4 t0@@58 t1@@34 t2@@15 t3@@0 t4@@0 heap@@17 (Handle4 h@@42 r@@22 rd@@9) bx0@@32 bx1@@16 bx2@@0 bx3@@0)) )))
(assert (forall ((arg0@@173 T@U) (arg1@@86 T@U) (arg2@@44 T@U) (arg3@@23 T@U) (arg4@@15 T@U) (arg5@@11 T@U) (arg6@@3 T@U) (arg7@@0 T@U) (arg8@@0 T@U) (arg9@@0 T@U) (arg10@@0 T@U) ) (! (= (type (Reads4 arg0@@173 arg1@@86 arg2@@44 arg3@@23 arg4@@15 arg5@@11 arg6@@3 arg7@@0 arg8@@0 arg9@@0 arg10@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads4| :pattern ( (Reads4 arg0@@173 arg1@@86 arg2@@44 arg3@@23 arg4@@15 arg5@@11 arg6@@3 arg7@@0 arg8@@0 arg9@@0 arg10@@0)) )))
(assert (forall ((t0@@59 T@U) (t1@@35 T@U) (t2@@16 T@U) (t3@@1 T@U) (t4@@1 T@U) (heap@@18 T@U) (h@@43 T@U) (r@@23 T@U) (rd@@10 T@U) (bx0@@33 T@U) (bx1@@17 T@U) (bx2@@1 T@U) (bx3@@1 T@U) (bx@@59 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@59) TyType) (= (type t1@@35) TyType)) (= (type t2@@16) TyType)) (= (type t3@@1) TyType)) (= (type t4@@1) TyType)) (= (type heap@@18) (MapType0Type refType MapType1Type))) (= (type h@@43) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@23) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@10) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@33) BoxType)) (= (type bx1@@17) BoxType)) (= (type bx2@@1) BoxType)) (= (type bx3@@1) BoxType)) (= (type bx@@59) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads4 t0@@59 t1@@35 t2@@16 t3@@1 t4@@1 heap@@18 (Handle4 h@@43 r@@23 rd@@10) bx0@@33 bx1@@17 bx2@@1 bx3@@1) bx@@59)) (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@18 bx0@@33 bx1@@17 bx2@@1 bx3@@1) bx@@59))) (=> (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@18 bx0@@33 bx1@@17 bx2@@1 bx3@@1) bx@@59)) (U_2_bool (MapType0Select (Reads4 t0@@59 t1@@35 t2@@16 t3@@1 t4@@1 heap@@18 (Handle4 h@@43 r@@23 rd@@10) bx0@@33 bx1@@17 bx2@@1 bx3@@1) bx@@59))))) :qid |unknown.0:0| :skolemid |8526| :pattern ( (MapType0Select (Reads4 t0@@59 t1@@35 t2@@16 t3@@1 t4@@1 heap@@18 (Handle4 h@@43 r@@23 rd@@10) bx0@@33 bx1@@17 bx2@@1 bx3@@1) bx@@59)) )))
(assert (forall ((t0@@60 T@U) (t1@@36 T@U) (t2@@17 T@U) (t3@@2 T@U) (t4@@2 T@U) (h0@@18 T@U) (h1@@18 T@U) (f@@41 T@U) (bx0@@34 T@U) (bx1@@18 T@U) (bx2@@2 T@U) (bx3@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@60) TyType) (= (type t1@@36) TyType)) (= (type t2@@17) TyType)) (= (type t3@@2) TyType)) (= (type t4@@2) TyType)) (= (type h0@@18) (MapType0Type refType MapType1Type))) (= (type h1@@18) (MapType0Type refType MapType1Type))) (= (type f@@41) HandleTypeType)) (= (type bx0@@34) BoxType)) (= (type bx1@@18) BoxType)) (= (type bx2@@2) BoxType)) (= (type bx3@@2) BoxType)) (and (and (and ($HeapSucc h0@@18 h1@@18) (and ($IsGoodHeap h0@@18) ($IsGoodHeap h1@@18))) (and (and (and (and ($IsBox bx0@@34 t0@@60) ($IsBox bx1@@18 t1@@36)) ($IsBox bx2@@2 t2@@17)) ($IsBox bx3@@2 t3@@2)) ($Is f@@41 (Tclass._System.___hFunc4 t0@@60 t1@@36 t2@@17 t3@@2 t4@@2)))) (forall ((o@@72 T@U) (fld@@17 T@U) ) (! (let ((a@@100 (FieldTypeInv0 (type fld@@17)))) (=> (and (and (= (type o@@72) refType) (= (type fld@@17) (FieldType a@@100))) (and (not (= o@@72 null)) (U_2_bool (MapType0Select (Reads4 t0@@60 t1@@36 t2@@17 t3@@2 t4@@2 h0@@18 f@@41 bx0@@34 bx1@@18 bx2@@2 bx3@@2) ($Box o@@72))))) (= (MapType1Select (MapType0Select h0@@18 o@@72) fld@@17) (MapType1Select (MapType0Select h1@@18 o@@72) fld@@17)))) :qid |unknown.0:0| :skolemid |8527| :no-pattern (type o@@72) :no-pattern (type fld@@17) :no-pattern (U_2_int o@@72) :no-pattern (U_2_bool o@@72) :no-pattern (U_2_int fld@@17) :no-pattern (U_2_bool fld@@17) )))) (= (Reads4 t0@@60 t1@@36 t2@@17 t3@@2 t4@@2 h0@@18 f@@41 bx0@@34 bx1@@18 bx2@@2 bx3@@2) (Reads4 t0@@60 t1@@36 t2@@17 t3@@2 t4@@2 h1@@18 f@@41 bx0@@34 bx1@@18 bx2@@2 bx3@@2))) :qid |unknown.0:0| :skolemid |8528| :pattern ( ($HeapSucc h0@@18 h1@@18) (Reads4 t0@@60 t1@@36 t2@@17 t3@@2 t4@@2 h1@@18 f@@41 bx0@@34 bx1@@18 bx2@@2 bx3@@2)) )))
(assert (forall ((t0@@61 T@U) (t1@@37 T@U) (t2@@18 T@U) (t3@@3 T@U) (t4@@3 T@U) (h0@@19 T@U) (h1@@19 T@U) (f@@42 T@U) (bx0@@35 T@U) (bx1@@19 T@U) (bx2@@3 T@U) (bx3@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@61) TyType) (= (type t1@@37) TyType)) (= (type t2@@18) TyType)) (= (type t3@@3) TyType)) (= (type t4@@3) TyType)) (= (type h0@@19) (MapType0Type refType MapType1Type))) (= (type h1@@19) (MapType0Type refType MapType1Type))) (= (type f@@42) HandleTypeType)) (= (type bx0@@35) BoxType)) (= (type bx1@@19) BoxType)) (= (type bx2@@3) BoxType)) (= (type bx3@@3) BoxType)) (and (and (and ($HeapSucc h0@@19 h1@@19) (and ($IsGoodHeap h0@@19) ($IsGoodHeap h1@@19))) (and (and (and (and ($IsBox bx0@@35 t0@@61) ($IsBox bx1@@19 t1@@37)) ($IsBox bx2@@3 t2@@18)) ($IsBox bx3@@3 t3@@3)) ($Is f@@42 (Tclass._System.___hFunc4 t0@@61 t1@@37 t2@@18 t3@@3 t4@@3)))) (forall ((o@@73 T@U) (fld@@18 T@U) ) (! (let ((a@@101 (FieldTypeInv0 (type fld@@18)))) (=> (and (and (= (type o@@73) refType) (= (type fld@@18) (FieldType a@@101))) (and (not (= o@@73 null)) (U_2_bool (MapType0Select (Reads4 t0@@61 t1@@37 t2@@18 t3@@3 t4@@3 h1@@19 f@@42 bx0@@35 bx1@@19 bx2@@3 bx3@@3) ($Box o@@73))))) (= (MapType1Select (MapType0Select h0@@19 o@@73) fld@@18) (MapType1Select (MapType0Select h1@@19 o@@73) fld@@18)))) :qid |unknown.0:0| :skolemid |8529| :no-pattern (type o@@73) :no-pattern (type fld@@18) :no-pattern (U_2_int o@@73) :no-pattern (U_2_bool o@@73) :no-pattern (U_2_int fld@@18) :no-pattern (U_2_bool fld@@18) )))) (= (Reads4 t0@@61 t1@@37 t2@@18 t3@@3 t4@@3 h0@@19 f@@42 bx0@@35 bx1@@19 bx2@@3 bx3@@3) (Reads4 t0@@61 t1@@37 t2@@18 t3@@3 t4@@3 h1@@19 f@@42 bx0@@35 bx1@@19 bx2@@3 bx3@@3))) :qid |unknown.0:0| :skolemid |8530| :pattern ( ($HeapSucc h0@@19 h1@@19) (Reads4 t0@@61 t1@@37 t2@@18 t3@@3 t4@@3 h1@@19 f@@42 bx0@@35 bx1@@19 bx2@@3 bx3@@3)) )))
(assert (forall ((t0@@62 T@U) (t1@@38 T@U) (t2@@19 T@U) (t3@@4 T@U) (t4@@4 T@U) (h0@@20 T@U) (h1@@20 T@U) (f@@43 T@U) (bx0@@36 T@U) (bx1@@20 T@U) (bx2@@4 T@U) (bx3@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@62) TyType) (= (type t1@@38) TyType)) (= (type t2@@19) TyType)) (= (type t3@@4) TyType)) (= (type t4@@4) TyType)) (= (type h0@@20) (MapType0Type refType MapType1Type))) (= (type h1@@20) (MapType0Type refType MapType1Type))) (= (type f@@43) HandleTypeType)) (= (type bx0@@36) BoxType)) (= (type bx1@@20) BoxType)) (= (type bx2@@4) BoxType)) (= (type bx3@@4) BoxType)) (and (and (and ($HeapSucc h0@@20 h1@@20) (and ($IsGoodHeap h0@@20) ($IsGoodHeap h1@@20))) (and (and (and (and ($IsBox bx0@@36 t0@@62) ($IsBox bx1@@20 t1@@38)) ($IsBox bx2@@4 t2@@19)) ($IsBox bx3@@4 t3@@4)) ($Is f@@43 (Tclass._System.___hFunc4 t0@@62 t1@@38 t2@@19 t3@@4 t4@@4)))) (forall ((o@@74 T@U) (fld@@19 T@U) ) (! (let ((a@@102 (FieldTypeInv0 (type fld@@19)))) (=> (and (and (= (type o@@74) refType) (= (type fld@@19) (FieldType a@@102))) (and (not (= o@@74 null)) (U_2_bool (MapType0Select (Reads4 t0@@62 t1@@38 t2@@19 t3@@4 t4@@4 h0@@20 f@@43 bx0@@36 bx1@@20 bx2@@4 bx3@@4) ($Box o@@74))))) (= (MapType1Select (MapType0Select h0@@20 o@@74) fld@@19) (MapType1Select (MapType0Select h1@@20 o@@74) fld@@19)))) :qid |unknown.0:0| :skolemid |8531| :no-pattern (type o@@74) :no-pattern (type fld@@19) :no-pattern (U_2_int o@@74) :no-pattern (U_2_bool o@@74) :no-pattern (U_2_int fld@@19) :no-pattern (U_2_bool fld@@19) )))) (and (=> (Requires4 t0@@62 t1@@38 t2@@19 t3@@4 t4@@4 h0@@20 f@@43 bx0@@36 bx1@@20 bx2@@4 bx3@@4) (Requires4 t0@@62 t1@@38 t2@@19 t3@@4 t4@@4 h1@@20 f@@43 bx0@@36 bx1@@20 bx2@@4 bx3@@4)) (=> (Requires4 t0@@62 t1@@38 t2@@19 t3@@4 t4@@4 h1@@20 f@@43 bx0@@36 bx1@@20 bx2@@4 bx3@@4) (Requires4 t0@@62 t1@@38 t2@@19 t3@@4 t4@@4 h0@@20 f@@43 bx0@@36 bx1@@20 bx2@@4 bx3@@4)))) :qid |unknown.0:0| :skolemid |8532| :pattern ( ($HeapSucc h0@@20 h1@@20) (Requires4 t0@@62 t1@@38 t2@@19 t3@@4 t4@@4 h1@@20 f@@43 bx0@@36 bx1@@20 bx2@@4 bx3@@4)) )))
(assert (forall ((t0@@63 T@U) (t1@@39 T@U) (t2@@20 T@U) (t3@@5 T@U) (t4@@5 T@U) (h0@@21 T@U) (h1@@21 T@U) (f@@44 T@U) (bx0@@37 T@U) (bx1@@21 T@U) (bx2@@5 T@U) (bx3@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@63) TyType) (= (type t1@@39) TyType)) (= (type t2@@20) TyType)) (= (type t3@@5) TyType)) (= (type t4@@5) TyType)) (= (type h0@@21) (MapType0Type refType MapType1Type))) (= (type h1@@21) (MapType0Type refType MapType1Type))) (= (type f@@44) HandleTypeType)) (= (type bx0@@37) BoxType)) (= (type bx1@@21) BoxType)) (= (type bx2@@5) BoxType)) (= (type bx3@@5) BoxType)) (and (and (and ($HeapSucc h0@@21 h1@@21) (and ($IsGoodHeap h0@@21) ($IsGoodHeap h1@@21))) (and (and (and (and ($IsBox bx0@@37 t0@@63) ($IsBox bx1@@21 t1@@39)) ($IsBox bx2@@5 t2@@20)) ($IsBox bx3@@5 t3@@5)) ($Is f@@44 (Tclass._System.___hFunc4 t0@@63 t1@@39 t2@@20 t3@@5 t4@@5)))) (forall ((o@@75 T@U) (fld@@20 T@U) ) (! (let ((a@@103 (FieldTypeInv0 (type fld@@20)))) (=> (and (and (= (type o@@75) refType) (= (type fld@@20) (FieldType a@@103))) (and (not (= o@@75 null)) (U_2_bool (MapType0Select (Reads4 t0@@63 t1@@39 t2@@20 t3@@5 t4@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5 bx3@@5) ($Box o@@75))))) (= (MapType1Select (MapType0Select h0@@21 o@@75) fld@@20) (MapType1Select (MapType0Select h1@@21 o@@75) fld@@20)))) :qid |unknown.0:0| :skolemid |8533| :no-pattern (type o@@75) :no-pattern (type fld@@20) :no-pattern (U_2_int o@@75) :no-pattern (U_2_bool o@@75) :no-pattern (U_2_int fld@@20) :no-pattern (U_2_bool fld@@20) )))) (and (=> (Requires4 t0@@63 t1@@39 t2@@20 t3@@5 t4@@5 h0@@21 f@@44 bx0@@37 bx1@@21 bx2@@5 bx3@@5) (Requires4 t0@@63 t1@@39 t2@@20 t3@@5 t4@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5 bx3@@5)) (=> (Requires4 t0@@63 t1@@39 t2@@20 t3@@5 t4@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5 bx3@@5) (Requires4 t0@@63 t1@@39 t2@@20 t3@@5 t4@@5 h0@@21 f@@44 bx0@@37 bx1@@21 bx2@@5 bx3@@5)))) :qid |unknown.0:0| :skolemid |8534| :pattern ( ($HeapSucc h0@@21 h1@@21) (Requires4 t0@@63 t1@@39 t2@@20 t3@@5 t4@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5 bx3@@5)) )))
(assert (forall ((t0@@64 T@U) (t1@@40 T@U) (t2@@21 T@U) (t3@@6 T@U) (t4@@6 T@U) (h0@@22 T@U) (h1@@22 T@U) (f@@45 T@U) (bx0@@38 T@U) (bx1@@22 T@U) (bx2@@6 T@U) (bx3@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@64) TyType) (= (type t1@@40) TyType)) (= (type t2@@21) TyType)) (= (type t3@@6) TyType)) (= (type t4@@6) TyType)) (= (type h0@@22) (MapType0Type refType MapType1Type))) (= (type h1@@22) (MapType0Type refType MapType1Type))) (= (type f@@45) HandleTypeType)) (= (type bx0@@38) BoxType)) (= (type bx1@@22) BoxType)) (= (type bx2@@6) BoxType)) (= (type bx3@@6) BoxType)) (and (and (and ($HeapSucc h0@@22 h1@@22) (and ($IsGoodHeap h0@@22) ($IsGoodHeap h1@@22))) (and (and (and (and ($IsBox bx0@@38 t0@@64) ($IsBox bx1@@22 t1@@40)) ($IsBox bx2@@6 t2@@21)) ($IsBox bx3@@6 t3@@6)) ($Is f@@45 (Tclass._System.___hFunc4 t0@@64 t1@@40 t2@@21 t3@@6 t4@@6)))) (forall ((o@@76 T@U) (fld@@21 T@U) ) (! (let ((a@@104 (FieldTypeInv0 (type fld@@21)))) (=> (and (and (= (type o@@76) refType) (= (type fld@@21) (FieldType a@@104))) (and (not (= o@@76 null)) (U_2_bool (MapType0Select (Reads4 t0@@64 t1@@40 t2@@21 t3@@6 t4@@6 h0@@22 f@@45 bx0@@38 bx1@@22 bx2@@6 bx3@@6) ($Box o@@76))))) (= (MapType1Select (MapType0Select h0@@22 o@@76) fld@@21) (MapType1Select (MapType0Select h1@@22 o@@76) fld@@21)))) :qid |unknown.0:0| :skolemid |8535| :no-pattern (type o@@76) :no-pattern (type fld@@21) :no-pattern (U_2_int o@@76) :no-pattern (U_2_bool o@@76) :no-pattern (U_2_int fld@@21) :no-pattern (U_2_bool fld@@21) )))) (= (Apply4 t0@@64 t1@@40 t2@@21 t3@@6 t4@@6 h0@@22 f@@45 bx0@@38 bx1@@22 bx2@@6 bx3@@6) (Apply4 t0@@64 t1@@40 t2@@21 t3@@6 t4@@6 h1@@22 f@@45 bx0@@38 bx1@@22 bx2@@6 bx3@@6))) :qid |unknown.0:0| :skolemid |8536| :pattern ( ($HeapSucc h0@@22 h1@@22) (Apply4 t0@@64 t1@@40 t2@@21 t3@@6 t4@@6 h1@@22 f@@45 bx0@@38 bx1@@22 bx2@@6 bx3@@6)) )))
(assert (forall ((t0@@65 T@U) (t1@@41 T@U) (t2@@22 T@U) (t3@@7 T@U) (t4@@7 T@U) (h0@@23 T@U) (h1@@23 T@U) (f@@46 T@U) (bx0@@39 T@U) (bx1@@23 T@U) (bx2@@7 T@U) (bx3@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@65) TyType) (= (type t1@@41) TyType)) (= (type t2@@22) TyType)) (= (type t3@@7) TyType)) (= (type t4@@7) TyType)) (= (type h0@@23) (MapType0Type refType MapType1Type))) (= (type h1@@23) (MapType0Type refType MapType1Type))) (= (type f@@46) HandleTypeType)) (= (type bx0@@39) BoxType)) (= (type bx1@@23) BoxType)) (= (type bx2@@7) BoxType)) (= (type bx3@@7) BoxType)) (and (and (and ($HeapSucc h0@@23 h1@@23) (and ($IsGoodHeap h0@@23) ($IsGoodHeap h1@@23))) (and (and (and (and ($IsBox bx0@@39 t0@@65) ($IsBox bx1@@23 t1@@41)) ($IsBox bx2@@7 t2@@22)) ($IsBox bx3@@7 t3@@7)) ($Is f@@46 (Tclass._System.___hFunc4 t0@@65 t1@@41 t2@@22 t3@@7 t4@@7)))) (forall ((o@@77 T@U) (fld@@22 T@U) ) (! (let ((a@@105 (FieldTypeInv0 (type fld@@22)))) (=> (and (and (= (type o@@77) refType) (= (type fld@@22) (FieldType a@@105))) (and (not (= o@@77 null)) (U_2_bool (MapType0Select (Reads4 t0@@65 t1@@41 t2@@22 t3@@7 t4@@7 h1@@23 f@@46 bx0@@39 bx1@@23 bx2@@7 bx3@@7) ($Box o@@77))))) (= (MapType1Select (MapType0Select h0@@23 o@@77) fld@@22) (MapType1Select (MapType0Select h1@@23 o@@77) fld@@22)))) :qid |unknown.0:0| :skolemid |8537| :no-pattern (type o@@77) :no-pattern (type fld@@22) :no-pattern (U_2_int o@@77) :no-pattern (U_2_bool o@@77) :no-pattern (U_2_int fld@@22) :no-pattern (U_2_bool fld@@22) )))) (= (Apply4 t0@@65 t1@@41 t2@@22 t3@@7 t4@@7 h0@@23 f@@46 bx0@@39 bx1@@23 bx2@@7 bx3@@7) (Apply4 t0@@65 t1@@41 t2@@22 t3@@7 t4@@7 h1@@23 f@@46 bx0@@39 bx1@@23 bx2@@7 bx3@@7))) :qid |unknown.0:0| :skolemid |8538| :pattern ( ($HeapSucc h0@@23 h1@@23) (Apply4 t0@@65 t1@@41 t2@@22 t3@@7 t4@@7 h1@@23 f@@46 bx0@@39 bx1@@23 bx2@@7 bx3@@7)) )))
(assert (forall ((t0@@66 T@U) (t1@@42 T@U) (t2@@23 T@U) (t3@@8 T@U) (t4@@8 T@U) (heap@@19 T@U) (f@@47 T@U) (bx0@@40 T@U) (bx1@@24 T@U) (bx2@@8 T@U) (bx3@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@66) TyType) (= (type t1@@42) TyType)) (= (type t2@@23) TyType)) (= (type t3@@8) TyType)) (= (type t4@@8) TyType)) (= (type heap@@19) (MapType0Type refType MapType1Type))) (= (type f@@47) HandleTypeType)) (= (type bx0@@40) BoxType)) (= (type bx1@@24) BoxType)) (= (type bx2@@8) BoxType)) (= (type bx3@@8) BoxType)) (and ($IsGoodHeap heap@@19) (and (and (and (and ($IsBox bx0@@40 t0@@66) ($IsBox bx1@@24 t1@@42)) ($IsBox bx2@@8 t2@@23)) ($IsBox bx3@@8 t3@@8)) ($Is f@@47 (Tclass._System.___hFunc4 t0@@66 t1@@42 t2@@23 t3@@8 t4@@8))))) (and (=> (|Set#Equal| (Reads4 t0@@66 t1@@42 t2@@23 t3@@8 t4@@8 $OneHeap f@@47 bx0@@40 bx1@@24 bx2@@8 bx3@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads4 t0@@66 t1@@42 t2@@23 t3@@8 t4@@8 heap@@19 f@@47 bx0@@40 bx1@@24 bx2@@8 bx3@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads4 t0@@66 t1@@42 t2@@23 t3@@8 t4@@8 heap@@19 f@@47 bx0@@40 bx1@@24 bx2@@8 bx3@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads4 t0@@66 t1@@42 t2@@23 t3@@8 t4@@8 $OneHeap f@@47 bx0@@40 bx1@@24 bx2@@8 bx3@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |8539| :pattern ( (Reads4 t0@@66 t1@@42 t2@@23 t3@@8 t4@@8 $OneHeap f@@47 bx0@@40 bx1@@24 bx2@@8 bx3@@8) ($IsGoodHeap heap@@19)) :pattern ( (Reads4 t0@@66 t1@@42 t2@@23 t3@@8 t4@@8 heap@@19 f@@47 bx0@@40 bx1@@24 bx2@@8 bx3@@8)) )))
(assert (forall ((t0@@67 T@U) (t1@@43 T@U) (t2@@24 T@U) (t3@@9 T@U) (t4@@9 T@U) (heap@@20 T@U) (f@@48 T@U) (bx0@@41 T@U) (bx1@@25 T@U) (bx2@@9 T@U) (bx3@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@67) TyType) (= (type t1@@43) TyType)) (= (type t2@@24) TyType)) (= (type t3@@9) TyType)) (= (type t4@@9) TyType)) (= (type heap@@20) (MapType0Type refType MapType1Type))) (= (type f@@48) HandleTypeType)) (= (type bx0@@41) BoxType)) (= (type bx1@@25) BoxType)) (= (type bx2@@9) BoxType)) (= (type bx3@@9) BoxType)) (and (and ($IsGoodHeap heap@@20) (and (and (and (and ($IsBox bx0@@41 t0@@67) ($IsBox bx1@@25 t1@@43)) ($IsBox bx2@@9 t2@@24)) ($IsBox bx3@@9 t3@@9)) ($Is f@@48 (Tclass._System.___hFunc4 t0@@67 t1@@43 t2@@24 t3@@9 t4@@9)))) (|Set#Equal| (Reads4 t0@@67 t1@@43 t2@@24 t3@@9 t4@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9 bx3@@9) (|Set#Empty| BoxType)))) (and (=> (Requires4 t0@@67 t1@@43 t2@@24 t3@@9 t4@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9 bx3@@9) (Requires4 t0@@67 t1@@43 t2@@24 t3@@9 t4@@9 heap@@20 f@@48 bx0@@41 bx1@@25 bx2@@9 bx3@@9)) (=> (Requires4 t0@@67 t1@@43 t2@@24 t3@@9 t4@@9 heap@@20 f@@48 bx0@@41 bx1@@25 bx2@@9 bx3@@9) (Requires4 t0@@67 t1@@43 t2@@24 t3@@9 t4@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9 bx3@@9)))) :qid |unknown.0:0| :skolemid |8540| :pattern ( (Requires4 t0@@67 t1@@43 t2@@24 t3@@9 t4@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9 bx3@@9) ($IsGoodHeap heap@@20)) :pattern ( (Requires4 t0@@67 t1@@43 t2@@24 t3@@9 t4@@9 heap@@20 f@@48 bx0@@41 bx1@@25 bx2@@9 bx3@@9)) )))
(assert (forall ((f@@49 T@U) (t0@@68 T@U) (t1@@44 T@U) (t2@@25 T@U) (t3@@10 T@U) (t4@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@49) HandleTypeType) (= (type t0@@68) TyType)) (= (type t1@@44) TyType)) (= (type t2@@25) TyType)) (= (type t3@@10) TyType)) (= (type t4@@10) TyType)) (and (=> ($Is f@@49 (Tclass._System.___hFunc4 t0@@68 t1@@44 t2@@25 t3@@10 t4@@10)) (forall ((h@@44 T@U) (bx0@@42 T@U) (bx1@@26 T@U) (bx2@@10 T@U) (bx3@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@44) (MapType0Type refType MapType1Type)) (= (type bx0@@42) BoxType)) (= (type bx1@@26) BoxType)) (= (type bx2@@10) BoxType)) (= (type bx3@@10) BoxType)) (and (and ($IsGoodHeap h@@44) (and (and (and ($IsBox bx0@@42 t0@@68) ($IsBox bx1@@26 t1@@44)) ($IsBox bx2@@10 t2@@25)) ($IsBox bx3@@10 t3@@10))) (Requires4 t0@@68 t1@@44 t2@@25 t3@@10 t4@@10 h@@44 f@@49 bx0@@42 bx1@@26 bx2@@10 bx3@@10))) ($IsBox (Apply4 t0@@68 t1@@44 t2@@25 t3@@10 t4@@10 h@@44 f@@49 bx0@@42 bx1@@26 bx2@@10 bx3@@10) t4@@10)) :qid |DafnyPre.521:12| :skolemid |8541| :pattern ( (Apply4 t0@@68 t1@@44 t2@@25 t3@@10 t4@@10 h@@44 f@@49 bx0@@42 bx1@@26 bx2@@10 bx3@@10)) ))) (=> (forall ((h@@45 T@U) (bx0@@43 T@U) (bx1@@27 T@U) (bx2@@11 T@U) (bx3@@11 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@45) (MapType0Type refType MapType1Type)) (= (type bx0@@43) BoxType)) (= (type bx1@@27) BoxType)) (= (type bx2@@11) BoxType)) (= (type bx3@@11) BoxType)) (and (and ($IsGoodHeap h@@45) (and (and (and ($IsBox bx0@@43 t0@@68) ($IsBox bx1@@27 t1@@44)) ($IsBox bx2@@11 t2@@25)) ($IsBox bx3@@11 t3@@10))) (Requires4 t0@@68 t1@@44 t2@@25 t3@@10 t4@@10 h@@45 f@@49 bx0@@43 bx1@@27 bx2@@11 bx3@@11))) ($IsBox (Apply4 t0@@68 t1@@44 t2@@25 t3@@10 t4@@10 h@@45 f@@49 bx0@@43 bx1@@27 bx2@@11 bx3@@11) t4@@10)) :qid |DafnyPre.521:12| :skolemid |8541| :pattern ( (Apply4 t0@@68 t1@@44 t2@@25 t3@@10 t4@@10 h@@45 f@@49 bx0@@43 bx1@@27 bx2@@11 bx3@@11)) )) ($Is f@@49 (Tclass._System.___hFunc4 t0@@68 t1@@44 t2@@25 t3@@10 t4@@10))))) :qid |unknown.0:0| :skolemid |8542| :pattern ( ($Is f@@49 (Tclass._System.___hFunc4 t0@@68 t1@@44 t2@@25 t3@@10 t4@@10))) )))
(assert (forall ((f@@50 T@U) (t0@@69 T@U) (t1@@45 T@U) (t2@@26 T@U) (t3@@11 T@U) (t4@@11 T@U) (u0@@2 T@U) (u1@@1 T@U) (u2@@0 T@U) (u3 T@U) (u4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type f@@50) HandleTypeType) (= (type t0@@69) TyType)) (= (type t1@@45) TyType)) (= (type t2@@26) TyType)) (= (type t3@@11) TyType)) (= (type t4@@11) TyType)) (= (type u0@@2) TyType)) (= (type u1@@1) TyType)) (= (type u2@@0) TyType)) (= (type u3) TyType)) (= (type u4) TyType)) (and (and (and (and (and ($Is f@@50 (Tclass._System.___hFunc4 t0@@69 t1@@45 t2@@26 t3@@11 t4@@11)) (forall ((bx@@60 T@U) ) (!  (=> (and (= (type bx@@60) BoxType) ($IsBox bx@@60 u0@@2)) ($IsBox bx@@60 t0@@69)) :qid |unknown.0:0| :skolemid |8543| :pattern ( ($IsBox bx@@60 u0@@2)) :pattern ( ($IsBox bx@@60 t0@@69)) ))) (forall ((bx@@61 T@U) ) (!  (=> (and (= (type bx@@61) BoxType) ($IsBox bx@@61 u1@@1)) ($IsBox bx@@61 t1@@45)) :qid |unknown.0:0| :skolemid |8544| :pattern ( ($IsBox bx@@61 u1@@1)) :pattern ( ($IsBox bx@@61 t1@@45)) ))) (forall ((bx@@62 T@U) ) (!  (=> (and (= (type bx@@62) BoxType) ($IsBox bx@@62 u2@@0)) ($IsBox bx@@62 t2@@26)) :qid |unknown.0:0| :skolemid |8545| :pattern ( ($IsBox bx@@62 u2@@0)) :pattern ( ($IsBox bx@@62 t2@@26)) ))) (forall ((bx@@63 T@U) ) (!  (=> (and (= (type bx@@63) BoxType) ($IsBox bx@@63 u3)) ($IsBox bx@@63 t3@@11)) :qid |unknown.0:0| :skolemid |8546| :pattern ( ($IsBox bx@@63 u3)) :pattern ( ($IsBox bx@@63 t3@@11)) ))) (forall ((bx@@64 T@U) ) (!  (=> (and (= (type bx@@64) BoxType) ($IsBox bx@@64 t4@@11)) ($IsBox bx@@64 u4)) :qid |unknown.0:0| :skolemid |8547| :pattern ( ($IsBox bx@@64 t4@@11)) :pattern ( ($IsBox bx@@64 u4)) )))) ($Is f@@50 (Tclass._System.___hFunc4 u0@@2 u1@@1 u2@@0 u3 u4))) :qid |unknown.0:0| :skolemid |8548| :pattern ( ($Is f@@50 (Tclass._System.___hFunc4 t0@@69 t1@@45 t2@@26 t3@@11 t4@@11)) ($Is f@@50 (Tclass._System.___hFunc4 u0@@2 u1@@1 u2@@0 u3 u4))) )))
(assert (forall ((f@@51 T@U) (t0@@70 T@U) (t1@@46 T@U) (t2@@27 T@U) (t3@@12 T@U) (t4@@12 T@U) (h@@46 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@51) HandleTypeType) (= (type t0@@70) TyType)) (= (type t1@@46) TyType)) (= (type t2@@27) TyType)) (= (type t3@@12) TyType)) (= (type t4@@12) TyType)) (= (type h@@46) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@46)) (and (=> ($IsAlloc f@@51 (Tclass._System.___hFunc4 t0@@70 t1@@46 t2@@27 t3@@12 t4@@12) h@@46) (forall ((bx0@@44 T@U) (bx1@@28 T@U) (bx2@@12 T@U) (bx3@@12 T@U) ) (!  (=> (and (and (and (= (type bx0@@44) BoxType) (= (type bx1@@28) BoxType)) (= (type bx2@@12) BoxType)) (= (type bx3@@12) BoxType)) (=> (and (and (and (and (and ($IsBox bx0@@44 t0@@70) ($IsAllocBox bx0@@44 t0@@70 h@@46)) (and ($IsBox bx1@@28 t1@@46) ($IsAllocBox bx1@@28 t1@@46 h@@46))) (and ($IsBox bx2@@12 t2@@27) ($IsAllocBox bx2@@12 t2@@27 h@@46))) (and ($IsBox bx3@@12 t3@@12) ($IsAllocBox bx3@@12 t3@@12 h@@46))) (Requires4 t0@@70 t1@@46 t2@@27 t3@@12 t4@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12 bx3@@12)) (forall ((r@@24 T@U) ) (!  (=> (= (type r@@24) refType) (=> (and (not (= r@@24 null)) (U_2_bool (MapType0Select (Reads4 t0@@70 t1@@46 t2@@27 t3@@12 t4@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12 bx3@@12) ($Box r@@24)))) (U_2_bool (MapType1Select (MapType0Select h@@46 r@@24) alloc)))) :qid |unknown.0:0| :skolemid |8549| :pattern ( (MapType0Select (Reads4 t0@@70 t1@@46 t2@@27 t3@@12 t4@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12 bx3@@12) ($Box r@@24))) )))) :qid |unknown.0:0| :skolemid |8550| :pattern ( (Apply4 t0@@70 t1@@46 t2@@27 t3@@12 t4@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12 bx3@@12)) :pattern ( (Reads4 t0@@70 t1@@46 t2@@27 t3@@12 t4@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12 bx3@@12)) ))) (=> (forall ((bx0@@45 T@U) (bx1@@29 T@U) (bx2@@13 T@U) (bx3@@13 T@U) ) (!  (=> (and (and (and (= (type bx0@@45) BoxType) (= (type bx1@@29) BoxType)) (= (type bx2@@13) BoxType)) (= (type bx3@@13) BoxType)) (=> (and (and (and (and (and ($IsBox bx0@@45 t0@@70) ($IsAllocBox bx0@@45 t0@@70 h@@46)) (and ($IsBox bx1@@29 t1@@46) ($IsAllocBox bx1@@29 t1@@46 h@@46))) (and ($IsBox bx2@@13 t2@@27) ($IsAllocBox bx2@@13 t2@@27 h@@46))) (and ($IsBox bx3@@13 t3@@12) ($IsAllocBox bx3@@13 t3@@12 h@@46))) (Requires4 t0@@70 t1@@46 t2@@27 t3@@12 t4@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13 bx3@@13)) (forall ((r@@25 T@U) ) (!  (=> (= (type r@@25) refType) (=> (and (not (= r@@25 null)) (U_2_bool (MapType0Select (Reads4 t0@@70 t1@@46 t2@@27 t3@@12 t4@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13 bx3@@13) ($Box r@@25)))) (U_2_bool (MapType1Select (MapType0Select h@@46 r@@25) alloc)))) :qid |unknown.0:0| :skolemid |8549| :pattern ( (MapType0Select (Reads4 t0@@70 t1@@46 t2@@27 t3@@12 t4@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13 bx3@@13) ($Box r@@25))) )))) :qid |unknown.0:0| :skolemid |8550| :pattern ( (Apply4 t0@@70 t1@@46 t2@@27 t3@@12 t4@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13 bx3@@13)) :pattern ( (Reads4 t0@@70 t1@@46 t2@@27 t3@@12 t4@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13 bx3@@13)) )) ($IsAlloc f@@51 (Tclass._System.___hFunc4 t0@@70 t1@@46 t2@@27 t3@@12 t4@@12) h@@46)))) :qid |unknown.0:0| :skolemid |8551| :pattern ( ($IsAlloc f@@51 (Tclass._System.___hFunc4 t0@@70 t1@@46 t2@@27 t3@@12 t4@@12) h@@46)) )))
(assert (forall ((f@@52 T@U) (t0@@71 T@U) (t1@@47 T@U) (t2@@28 T@U) (t3@@13 T@U) (t4@@13 T@U) (h@@47 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@52) HandleTypeType) (= (type t0@@71) TyType)) (= (type t1@@47) TyType)) (= (type t2@@28) TyType)) (= (type t3@@13) TyType)) (= (type t4@@13) TyType)) (= (type h@@47) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@47) ($IsAlloc f@@52 (Tclass._System.___hFunc4 t0@@71 t1@@47 t2@@28 t3@@13 t4@@13) h@@47))) (forall ((bx0@@46 T@U) (bx1@@30 T@U) (bx2@@14 T@U) (bx3@@14 T@U) ) (!  (=> (and (and (and (= (type bx0@@46) BoxType) (= (type bx1@@30) BoxType)) (= (type bx2@@14) BoxType)) (= (type bx3@@14) BoxType)) (=> (and (and (and (and ($IsAllocBox bx0@@46 t0@@71 h@@47) ($IsAllocBox bx1@@30 t1@@47 h@@47)) ($IsAllocBox bx2@@14 t2@@28 h@@47)) ($IsAllocBox bx3@@14 t3@@13 h@@47)) (Requires4 t0@@71 t1@@47 t2@@28 t3@@13 t4@@13 h@@47 f@@52 bx0@@46 bx1@@30 bx2@@14 bx3@@14)) ($IsAllocBox (Apply4 t0@@71 t1@@47 t2@@28 t3@@13 t4@@13 h@@47 f@@52 bx0@@46 bx1@@30 bx2@@14 bx3@@14) t4@@13 h@@47))) :qid |unknown.0:0| :skolemid |8552| :pattern ( (Apply4 t0@@71 t1@@47 t2@@28 t3@@13 t4@@13 h@@47 f@@52 bx0@@46 bx1@@30 bx2@@14 bx3@@14)) ))) :qid |unknown.0:0| :skolemid |8553| :pattern ( ($IsAlloc f@@52 (Tclass._System.___hFunc4 t0@@71 t1@@47 t2@@28 t3@@13 t4@@13) h@@47)) )))
(assert (forall ((arg0@@174 T@U) (arg1@@87 T@U) (arg2@@45 T@U) (arg3@@24 T@U) (arg4@@16 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4 arg0@@174 arg1@@87 arg2@@45 arg3@@24 arg4@@16)) TyType) :qid |funType:Tclass._System.___hPartialFunc4| :pattern ( (Tclass._System.___hPartialFunc4 arg0@@174 arg1@@87 arg2@@45 arg3@@24 arg4@@16)) )))
(assert (forall ((|#$T0@@41| T@U) (|#$T1@@25| T@U) (|#$T2@@6| T@U) (|#$T3@@6| T@U) (|#$R@@54| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@41|) TyType) (= (type |#$T1@@25|) TyType)) (= (type |#$T2@@6|) TyType)) (= (type |#$T3@@6|) TyType)) (= (type |#$R@@54|) TyType)) (= (Tag (Tclass._System.___hPartialFunc4 |#$T0@@41| |#$T1@@25| |#$T2@@6| |#$T3@@6| |#$R@@54|)) Tagclass._System.___hPartialFunc4)) :qid |unknown.0:0| :skolemid |8554| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@41| |#$T1@@25| |#$T2@@6| |#$T3@@6| |#$R@@54|)) )))
(assert (forall ((arg0@@175 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_0 arg0@@175)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_0| :pattern ( (Tclass._System.___hPartialFunc4_0 arg0@@175)) )))
(assert (forall ((|#$T0@@42| T@U) (|#$T1@@26| T@U) (|#$T2@@7| T@U) (|#$T3@@7| T@U) (|#$R@@55| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@42|) TyType) (= (type |#$T1@@26|) TyType)) (= (type |#$T2@@7|) TyType)) (= (type |#$T3@@7|) TyType)) (= (type |#$R@@55|) TyType)) (= (Tclass._System.___hPartialFunc4_0 (Tclass._System.___hPartialFunc4 |#$T0@@42| |#$T1@@26| |#$T2@@7| |#$T3@@7| |#$R@@55|)) |#$T0@@42|)) :qid |unknown.0:0| :skolemid |8555| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@42| |#$T1@@26| |#$T2@@7| |#$T3@@7| |#$R@@55|)) )))
(assert (forall ((arg0@@176 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_1 arg0@@176)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_1| :pattern ( (Tclass._System.___hPartialFunc4_1 arg0@@176)) )))
(assert (forall ((|#$T0@@43| T@U) (|#$T1@@27| T@U) (|#$T2@@8| T@U) (|#$T3@@8| T@U) (|#$R@@56| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@43|) TyType) (= (type |#$T1@@27|) TyType)) (= (type |#$T2@@8|) TyType)) (= (type |#$T3@@8|) TyType)) (= (type |#$R@@56|) TyType)) (= (Tclass._System.___hPartialFunc4_1 (Tclass._System.___hPartialFunc4 |#$T0@@43| |#$T1@@27| |#$T2@@8| |#$T3@@8| |#$R@@56|)) |#$T1@@27|)) :qid |unknown.0:0| :skolemid |8556| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@43| |#$T1@@27| |#$T2@@8| |#$T3@@8| |#$R@@56|)) )))
(assert (forall ((arg0@@177 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_2 arg0@@177)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_2| :pattern ( (Tclass._System.___hPartialFunc4_2 arg0@@177)) )))
(assert (forall ((|#$T0@@44| T@U) (|#$T1@@28| T@U) (|#$T2@@9| T@U) (|#$T3@@9| T@U) (|#$R@@57| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@44|) TyType) (= (type |#$T1@@28|) TyType)) (= (type |#$T2@@9|) TyType)) (= (type |#$T3@@9|) TyType)) (= (type |#$R@@57|) TyType)) (= (Tclass._System.___hPartialFunc4_2 (Tclass._System.___hPartialFunc4 |#$T0@@44| |#$T1@@28| |#$T2@@9| |#$T3@@9| |#$R@@57|)) |#$T2@@9|)) :qid |unknown.0:0| :skolemid |8557| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@44| |#$T1@@28| |#$T2@@9| |#$T3@@9| |#$R@@57|)) )))
(assert (forall ((arg0@@178 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_3 arg0@@178)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_3| :pattern ( (Tclass._System.___hPartialFunc4_3 arg0@@178)) )))
(assert (forall ((|#$T0@@45| T@U) (|#$T1@@29| T@U) (|#$T2@@10| T@U) (|#$T3@@10| T@U) (|#$R@@58| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@45|) TyType) (= (type |#$T1@@29|) TyType)) (= (type |#$T2@@10|) TyType)) (= (type |#$T3@@10|) TyType)) (= (type |#$R@@58|) TyType)) (= (Tclass._System.___hPartialFunc4_3 (Tclass._System.___hPartialFunc4 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$T3@@10| |#$R@@58|)) |#$T3@@10|)) :qid |unknown.0:0| :skolemid |8558| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$T3@@10| |#$R@@58|)) )))
(assert (forall ((arg0@@179 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_4 arg0@@179)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_4| :pattern ( (Tclass._System.___hPartialFunc4_4 arg0@@179)) )))
(assert (forall ((|#$T0@@46| T@U) (|#$T1@@30| T@U) (|#$T2@@11| T@U) (|#$T3@@11| T@U) (|#$R@@59| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@46|) TyType) (= (type |#$T1@@30|) TyType)) (= (type |#$T2@@11|) TyType)) (= (type |#$T3@@11|) TyType)) (= (type |#$R@@59|) TyType)) (= (Tclass._System.___hPartialFunc4_4 (Tclass._System.___hPartialFunc4 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$T3@@11| |#$R@@59|)) |#$R@@59|)) :qid |unknown.0:0| :skolemid |8559| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$T3@@11| |#$R@@59|)) )))
(assert (forall ((|#$T0@@47| T@U) (|#$T1@@31| T@U) (|#$T2@@12| T@U) (|#$T3@@12| T@U) (|#$R@@60| T@U) (bx@@65 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@47|) TyType) (= (type |#$T1@@31|) TyType)) (= (type |#$T2@@12|) TyType)) (= (type |#$T3@@12|) TyType)) (= (type |#$R@@60|) TyType)) (= (type bx@@65) BoxType)) ($IsBox bx@@65 (Tclass._System.___hPartialFunc4 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$T3@@12| |#$R@@60|))) (and (= ($Box ($Unbox HandleTypeType bx@@65)) bx@@65) ($Is ($Unbox HandleTypeType bx@@65) (Tclass._System.___hPartialFunc4 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$T3@@12| |#$R@@60|)))) :qid |unknown.0:0| :skolemid |8560| :pattern ( ($IsBox bx@@65 (Tclass._System.___hPartialFunc4 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$T3@@12| |#$R@@60|))) )))
(assert (forall ((|#$T0@@48| T@U) (|#$T1@@32| T@U) (|#$T2@@13| T@U) (|#$T3@@13| T@U) (|#$R@@61| T@U) (|f#0@@11| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@48|) TyType) (= (type |#$T1@@32|) TyType)) (= (type |#$T2@@13|) TyType)) (= (type |#$T3@@13|) TyType)) (= (type |#$R@@61|) TyType)) (= (type |f#0@@11|) HandleTypeType)) (and (=> ($Is |f#0@@11| (Tclass._System.___hPartialFunc4 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@61|)) (and ($Is |f#0@@11| (Tclass._System.___hFunc4 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@61|)) (forall ((|x0#0@@7| T@U) (|x1#0@@3| T@U) (|x2#0| T@U) (|x3#0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@7|) BoxType) (= (type |x1#0@@3|) BoxType)) (= (type |x2#0|) BoxType)) (= (type |x3#0|) BoxType)) (and (and (and ($IsBox |x0#0@@7| |#$T0@@48|) ($IsBox |x1#0@@3| |#$T1@@32|)) ($IsBox |x2#0| |#$T2@@13|)) ($IsBox |x3#0| |#$T3@@13|))) (|Set#Equal| (Reads4 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@61| $OneHeap |f#0@@11| |x0#0@@7| |x1#0@@3| |x2#0| |x3#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |8561| :no-pattern (type |x0#0@@7|) :no-pattern (type |x1#0@@3|) :no-pattern (type |x2#0|) :no-pattern (type |x3#0|) :no-pattern (U_2_int |x0#0@@7|) :no-pattern (U_2_bool |x0#0@@7|) :no-pattern (U_2_int |x1#0@@3|) :no-pattern (U_2_bool |x1#0@@3|) :no-pattern (U_2_int |x2#0|) :no-pattern (U_2_bool |x2#0|) :no-pattern (U_2_int |x3#0|) :no-pattern (U_2_bool |x3#0|) )))) (=> (and ($Is |f#0@@11| (Tclass._System.___hFunc4 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@61|)) (forall ((|x0#0@@8| T@U) (|x1#0@@4| T@U) (|x2#0@@0| T@U) (|x3#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@8|) BoxType) (= (type |x1#0@@4|) BoxType)) (= (type |x2#0@@0|) BoxType)) (= (type |x3#0@@0|) BoxType)) (and (and (and ($IsBox |x0#0@@8| |#$T0@@48|) ($IsBox |x1#0@@4| |#$T1@@32|)) ($IsBox |x2#0@@0| |#$T2@@13|)) ($IsBox |x3#0@@0| |#$T3@@13|))) (|Set#Equal| (Reads4 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@61| $OneHeap |f#0@@11| |x0#0@@8| |x1#0@@4| |x2#0@@0| |x3#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |8561| :no-pattern (type |x0#0@@8|) :no-pattern (type |x1#0@@4|) :no-pattern (type |x2#0@@0|) :no-pattern (type |x3#0@@0|) :no-pattern (U_2_int |x0#0@@8|) :no-pattern (U_2_bool |x0#0@@8|) :no-pattern (U_2_int |x1#0@@4|) :no-pattern (U_2_bool |x1#0@@4|) :no-pattern (U_2_int |x2#0@@0|) :no-pattern (U_2_bool |x2#0@@0|) :no-pattern (U_2_int |x3#0@@0|) :no-pattern (U_2_bool |x3#0@@0|) ))) ($Is |f#0@@11| (Tclass._System.___hPartialFunc4 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@61|))))) :qid |unknown.0:0| :skolemid |8562| :pattern ( ($Is |f#0@@11| (Tclass._System.___hPartialFunc4 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@61|))) )))
(assert (forall ((|#$T0@@49| T@U) (|#$T1@@33| T@U) (|#$T2@@14| T@U) (|#$T3@@14| T@U) (|#$R@@62| T@U) (|f#0@@12| T@U) ($h@@14 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@49|) TyType) (= (type |#$T1@@33|) TyType)) (= (type |#$T2@@14|) TyType)) (= (type |#$T3@@14|) TyType)) (= (type |#$R@@62|) TyType)) (= (type |f#0@@12|) HandleTypeType)) (= (type $h@@14) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc4 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$T3@@14| |#$R@@62|) $h@@14) ($IsAlloc |f#0@@12| (Tclass._System.___hFunc4 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$T3@@14| |#$R@@62|) $h@@14)) (=> ($IsAlloc |f#0@@12| (Tclass._System.___hFunc4 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$T3@@14| |#$R@@62|) $h@@14) ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc4 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$T3@@14| |#$R@@62|) $h@@14)))) :qid |unknown.0:0| :skolemid |8563| :pattern ( ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc4 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$T3@@14| |#$R@@62|) $h@@14)) )))
(assert (forall ((arg0@@180 T@U) (arg1@@88 T@U) (arg2@@46 T@U) (arg3@@25 T@U) (arg4@@17 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4 arg0@@180 arg1@@88 arg2@@46 arg3@@25 arg4@@17)) TyType) :qid |funType:Tclass._System.___hTotalFunc4| :pattern ( (Tclass._System.___hTotalFunc4 arg0@@180 arg1@@88 arg2@@46 arg3@@25 arg4@@17)) )))
(assert (forall ((|#$T0@@50| T@U) (|#$T1@@34| T@U) (|#$T2@@15| T@U) (|#$T3@@15| T@U) (|#$R@@63| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@50|) TyType) (= (type |#$T1@@34|) TyType)) (= (type |#$T2@@15|) TyType)) (= (type |#$T3@@15|) TyType)) (= (type |#$R@@63|) TyType)) (= (Tag (Tclass._System.___hTotalFunc4 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$T3@@15| |#$R@@63|)) Tagclass._System.___hTotalFunc4)) :qid |unknown.0:0| :skolemid |8564| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$T3@@15| |#$R@@63|)) )))
(assert (forall ((arg0@@181 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_0 arg0@@181)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_0| :pattern ( (Tclass._System.___hTotalFunc4_0 arg0@@181)) )))
(assert (forall ((|#$T0@@51| T@U) (|#$T1@@35| T@U) (|#$T2@@16| T@U) (|#$T3@@16| T@U) (|#$R@@64| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@51|) TyType) (= (type |#$T1@@35|) TyType)) (= (type |#$T2@@16|) TyType)) (= (type |#$T3@@16|) TyType)) (= (type |#$R@@64|) TyType)) (= (Tclass._System.___hTotalFunc4_0 (Tclass._System.___hTotalFunc4 |#$T0@@51| |#$T1@@35| |#$T2@@16| |#$T3@@16| |#$R@@64|)) |#$T0@@51|)) :qid |unknown.0:0| :skolemid |8565| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@51| |#$T1@@35| |#$T2@@16| |#$T3@@16| |#$R@@64|)) )))
(assert (forall ((arg0@@182 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_1 arg0@@182)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_1| :pattern ( (Tclass._System.___hTotalFunc4_1 arg0@@182)) )))
(assert (forall ((|#$T0@@52| T@U) (|#$T1@@36| T@U) (|#$T2@@17| T@U) (|#$T3@@17| T@U) (|#$R@@65| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@52|) TyType) (= (type |#$T1@@36|) TyType)) (= (type |#$T2@@17|) TyType)) (= (type |#$T3@@17|) TyType)) (= (type |#$R@@65|) TyType)) (= (Tclass._System.___hTotalFunc4_1 (Tclass._System.___hTotalFunc4 |#$T0@@52| |#$T1@@36| |#$T2@@17| |#$T3@@17| |#$R@@65|)) |#$T1@@36|)) :qid |unknown.0:0| :skolemid |8566| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@52| |#$T1@@36| |#$T2@@17| |#$T3@@17| |#$R@@65|)) )))
(assert (forall ((arg0@@183 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_2 arg0@@183)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_2| :pattern ( (Tclass._System.___hTotalFunc4_2 arg0@@183)) )))
(assert (forall ((|#$T0@@53| T@U) (|#$T1@@37| T@U) (|#$T2@@18| T@U) (|#$T3@@18| T@U) (|#$R@@66| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@53|) TyType) (= (type |#$T1@@37|) TyType)) (= (type |#$T2@@18|) TyType)) (= (type |#$T3@@18|) TyType)) (= (type |#$R@@66|) TyType)) (= (Tclass._System.___hTotalFunc4_2 (Tclass._System.___hTotalFunc4 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$T3@@18| |#$R@@66|)) |#$T2@@18|)) :qid |unknown.0:0| :skolemid |8567| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$T3@@18| |#$R@@66|)) )))
(assert (forall ((arg0@@184 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_3 arg0@@184)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_3| :pattern ( (Tclass._System.___hTotalFunc4_3 arg0@@184)) )))
(assert (forall ((|#$T0@@54| T@U) (|#$T1@@38| T@U) (|#$T2@@19| T@U) (|#$T3@@19| T@U) (|#$R@@67| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@54|) TyType) (= (type |#$T1@@38|) TyType)) (= (type |#$T2@@19|) TyType)) (= (type |#$T3@@19|) TyType)) (= (type |#$R@@67|) TyType)) (= (Tclass._System.___hTotalFunc4_3 (Tclass._System.___hTotalFunc4 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$T3@@19| |#$R@@67|)) |#$T3@@19|)) :qid |unknown.0:0| :skolemid |8568| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$T3@@19| |#$R@@67|)) )))
(assert (forall ((arg0@@185 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_4 arg0@@185)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_4| :pattern ( (Tclass._System.___hTotalFunc4_4 arg0@@185)) )))
(assert (forall ((|#$T0@@55| T@U) (|#$T1@@39| T@U) (|#$T2@@20| T@U) (|#$T3@@20| T@U) (|#$R@@68| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@55|) TyType) (= (type |#$T1@@39|) TyType)) (= (type |#$T2@@20|) TyType)) (= (type |#$T3@@20|) TyType)) (= (type |#$R@@68|) TyType)) (= (Tclass._System.___hTotalFunc4_4 (Tclass._System.___hTotalFunc4 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$T3@@20| |#$R@@68|)) |#$R@@68|)) :qid |unknown.0:0| :skolemid |8569| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$T3@@20| |#$R@@68|)) )))
(assert (forall ((|#$T0@@56| T@U) (|#$T1@@40| T@U) (|#$T2@@21| T@U) (|#$T3@@21| T@U) (|#$R@@69| T@U) (bx@@66 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@56|) TyType) (= (type |#$T1@@40|) TyType)) (= (type |#$T2@@21|) TyType)) (= (type |#$T3@@21|) TyType)) (= (type |#$R@@69|) TyType)) (= (type bx@@66) BoxType)) ($IsBox bx@@66 (Tclass._System.___hTotalFunc4 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3@@21| |#$R@@69|))) (and (= ($Box ($Unbox HandleTypeType bx@@66)) bx@@66) ($Is ($Unbox HandleTypeType bx@@66) (Tclass._System.___hTotalFunc4 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3@@21| |#$R@@69|)))) :qid |unknown.0:0| :skolemid |8570| :pattern ( ($IsBox bx@@66 (Tclass._System.___hTotalFunc4 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3@@21| |#$R@@69|))) )))
(assert (forall ((|#$T0@@57| T@U) (|#$T1@@41| T@U) (|#$T2@@22| T@U) (|#$T3@@22| T@U) (|#$R@@70| T@U) (|f#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@57|) TyType) (= (type |#$T1@@41|) TyType)) (= (type |#$T2@@22|) TyType)) (= (type |#$T3@@22|) TyType)) (= (type |#$R@@70|) TyType)) (= (type |f#0@@13|) HandleTypeType)) (and (=> ($Is |f#0@@13| (Tclass._System.___hTotalFunc4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@70|)) (and ($Is |f#0@@13| (Tclass._System.___hPartialFunc4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@70|)) (forall ((|x0#0@@9| T@U) (|x1#0@@5| T@U) (|x2#0@@1| T@U) (|x3#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@9|) BoxType) (= (type |x1#0@@5|) BoxType)) (= (type |x2#0@@1|) BoxType)) (= (type |x3#0@@1|) BoxType)) (and (and (and ($IsBox |x0#0@@9| |#$T0@@57|) ($IsBox |x1#0@@5| |#$T1@@41|)) ($IsBox |x2#0@@1| |#$T2@@22|)) ($IsBox |x3#0@@1| |#$T3@@22|))) (Requires4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@70| $OneHeap |f#0@@13| |x0#0@@9| |x1#0@@5| |x2#0@@1| |x3#0@@1|)) :qid |unknown.0:0| :skolemid |8571| :no-pattern (type |x0#0@@9|) :no-pattern (type |x1#0@@5|) :no-pattern (type |x2#0@@1|) :no-pattern (type |x3#0@@1|) :no-pattern (U_2_int |x0#0@@9|) :no-pattern (U_2_bool |x0#0@@9|) :no-pattern (U_2_int |x1#0@@5|) :no-pattern (U_2_bool |x1#0@@5|) :no-pattern (U_2_int |x2#0@@1|) :no-pattern (U_2_bool |x2#0@@1|) :no-pattern (U_2_int |x3#0@@1|) :no-pattern (U_2_bool |x3#0@@1|) )))) (=> (and ($Is |f#0@@13| (Tclass._System.___hPartialFunc4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@70|)) (forall ((|x0#0@@10| T@U) (|x1#0@@6| T@U) (|x2#0@@2| T@U) (|x3#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@10|) BoxType) (= (type |x1#0@@6|) BoxType)) (= (type |x2#0@@2|) BoxType)) (= (type |x3#0@@2|) BoxType)) (and (and (and ($IsBox |x0#0@@10| |#$T0@@57|) ($IsBox |x1#0@@6| |#$T1@@41|)) ($IsBox |x2#0@@2| |#$T2@@22|)) ($IsBox |x3#0@@2| |#$T3@@22|))) (Requires4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@70| $OneHeap |f#0@@13| |x0#0@@10| |x1#0@@6| |x2#0@@2| |x3#0@@2|)) :qid |unknown.0:0| :skolemid |8571| :no-pattern (type |x0#0@@10|) :no-pattern (type |x1#0@@6|) :no-pattern (type |x2#0@@2|) :no-pattern (type |x3#0@@2|) :no-pattern (U_2_int |x0#0@@10|) :no-pattern (U_2_bool |x0#0@@10|) :no-pattern (U_2_int |x1#0@@6|) :no-pattern (U_2_bool |x1#0@@6|) :no-pattern (U_2_int |x2#0@@2|) :no-pattern (U_2_bool |x2#0@@2|) :no-pattern (U_2_int |x3#0@@2|) :no-pattern (U_2_bool |x3#0@@2|) ))) ($Is |f#0@@13| (Tclass._System.___hTotalFunc4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@70|))))) :qid |unknown.0:0| :skolemid |8572| :pattern ( ($Is |f#0@@13| (Tclass._System.___hTotalFunc4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@70|))) )))
(assert (forall ((|#$T0@@58| T@U) (|#$T1@@42| T@U) (|#$T2@@23| T@U) (|#$T3@@23| T@U) (|#$R@@71| T@U) (|f#0@@14| T@U) ($h@@15 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@58|) TyType) (= (type |#$T1@@42|) TyType)) (= (type |#$T2@@23|) TyType)) (= (type |#$T3@@23|) TyType)) (= (type |#$R@@71|) TyType)) (= (type |f#0@@14|) HandleTypeType)) (= (type $h@@15) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc4 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@23| |#$R@@71|) $h@@15) ($IsAlloc |f#0@@14| (Tclass._System.___hPartialFunc4 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@23| |#$R@@71|) $h@@15)) (=> ($IsAlloc |f#0@@14| (Tclass._System.___hPartialFunc4 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@23| |#$R@@71|) $h@@15) ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc4 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@23| |#$R@@71|) $h@@15)))) :qid |unknown.0:0| :skolemid |8573| :pattern ( ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc4 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@23| |#$R@@71|) $h@@15)) )))
(assert  (and (forall ((arg0@@186 T@U) (arg1@@89 T@U) ) (! (= (type (|#_System._tuple#2._#Make2| arg0@@186 arg1@@89)) DatatypeTypeType) :qid |funType:#_System._tuple#2._#Make2| :pattern ( (|#_System._tuple#2._#Make2| arg0@@186 arg1@@89)) )) (forall ((arg0@@187 T@U) ) (! (= (type (DatatypeCtorId arg0@@187)) DtCtorIdType) :qid |funType:DatatypeCtorId| :pattern ( (DatatypeCtorId arg0@@187)) ))))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (!  (=> (and (= (type |a#0#0#0|) BoxType) (= (type |a#0#1#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)) :qid |unknown.0:0| :skolemid |8574| :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) )))
(assert (forall ((d@@0 T@U) ) (!  (=> (= (type d@@0) DatatypeTypeType) (and (=> (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|)) (=> (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|) (_System.Tuple2.___hMake2_q d@@0)))) :qid |unknown.0:0| :skolemid |8575| :pattern ( (_System.Tuple2.___hMake2_q d@@0)) )))
(assert (forall ((d@@1 T@U) ) (!  (=> (and (= (type d@@1) DatatypeTypeType) (_System.Tuple2.___hMake2_q d@@1)) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (!  (and (and (= (type |a#1#0#0|) BoxType) (= (type |a#1#1#0|) BoxType)) (= d@@1 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))) :qid |unknown.0:0| :skolemid |8576| :no-pattern (type |a#1#0#0|) :no-pattern (type |a#1#1#0|) :no-pattern (U_2_int |a#1#0#0|) :no-pattern (U_2_bool |a#1#0#0|) :no-pattern (U_2_int |a#1#1#0|) :no-pattern (U_2_bool |a#1#1#0|) ))) :qid |unknown.0:0| :skolemid |8577| :pattern ( (_System.Tuple2.___hMake2_q d@@1)) )))
(assert (forall ((arg0@@188 T@U) (arg1@@90 T@U) ) (! (= (type (Tclass._System.Tuple2 arg0@@188 arg1@@90)) TyType) :qid |funType:Tclass._System.Tuple2| :pattern ( (Tclass._System.Tuple2 arg0@@188 arg1@@90)) )))
(assert (forall ((|#$T0@@59| T@U) (|#$T1@@43| T@U) ) (!  (=> (and (= (type |#$T0@@59|) TyType) (= (type |#$T1@@43|) TyType)) (= (Tag (Tclass._System.Tuple2 |#$T0@@59| |#$T1@@43|)) Tagclass._System.Tuple2)) :qid |unknown.0:0| :skolemid |8578| :pattern ( (Tclass._System.Tuple2 |#$T0@@59| |#$T1@@43|)) )))
(assert (forall ((arg0@@189 T@U) ) (! (= (type (Tclass._System.Tuple2_0 arg0@@189)) TyType) :qid |funType:Tclass._System.Tuple2_0| :pattern ( (Tclass._System.Tuple2_0 arg0@@189)) )))
(assert (forall ((|#$T0@@60| T@U) (|#$T1@@44| T@U) ) (!  (=> (and (= (type |#$T0@@60|) TyType) (= (type |#$T1@@44|) TyType)) (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |#$T0@@60| |#$T1@@44|)) |#$T0@@60|)) :qid |unknown.0:0| :skolemid |8579| :pattern ( (Tclass._System.Tuple2 |#$T0@@60| |#$T1@@44|)) )))
(assert (forall ((arg0@@190 T@U) ) (! (= (type (Tclass._System.Tuple2_1 arg0@@190)) TyType) :qid |funType:Tclass._System.Tuple2_1| :pattern ( (Tclass._System.Tuple2_1 arg0@@190)) )))
(assert (forall ((|#$T0@@61| T@U) (|#$T1@@45| T@U) ) (!  (=> (and (= (type |#$T0@@61|) TyType) (= (type |#$T1@@45|) TyType)) (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |#$T0@@61| |#$T1@@45|)) |#$T1@@45|)) :qid |unknown.0:0| :skolemid |8580| :pattern ( (Tclass._System.Tuple2 |#$T0@@61| |#$T1@@45|)) )))
(assert (forall ((|#$T0@@62| T@U) (|#$T1@@46| T@U) (bx@@67 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@62|) TyType) (= (type |#$T1@@46|) TyType)) (= (type bx@@67) BoxType)) ($IsBox bx@@67 (Tclass._System.Tuple2 |#$T0@@62| |#$T1@@46|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@67)) bx@@67) ($Is ($Unbox DatatypeTypeType bx@@67) (Tclass._System.Tuple2 |#$T0@@62| |#$T1@@46|)))) :qid |unknown.0:0| :skolemid |8581| :pattern ( ($IsBox bx@@67 (Tclass._System.Tuple2 |#$T0@@62| |#$T1@@46|))) )))
(assert (forall ((|#$T0@@63| T@U) (|#$T1@@47| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@63|) TyType) (= (type |#$T1@@47|) TyType)) (= (type |a#2#0#0|) BoxType)) (= (type |a#2#1#0|) BoxType)) (and (=> ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |#$T0@@63| |#$T1@@47|)) (and ($IsBox |a#2#0#0| |#$T0@@63|) ($IsBox |a#2#1#0| |#$T1@@47|))) (=> (and ($IsBox |a#2#0#0| |#$T0@@63|) ($IsBox |a#2#1#0| |#$T1@@47|)) ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |#$T0@@63| |#$T1@@47|))))) :qid |unknown.0:0| :skolemid |8582| :pattern ( ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |#$T0@@63| |#$T1@@47|))) )))
(assert (forall ((|#$T0@@64| T@U) (|#$T1@@48| T@U) (|a#3#0#0| T@U) (|a#3#1#0| T@U) ($h@@16 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@64|) TyType) (= (type |#$T1@@48|) TyType)) (= (type |a#3#0#0|) BoxType)) (= (type |a#3#1#0|) BoxType)) (= (type $h@@16) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@16)) (and (=> ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |#$T0@@64| |#$T1@@48|) $h@@16) (and ($IsAllocBox |a#3#0#0| |#$T0@@64| $h@@16) ($IsAllocBox |a#3#1#0| |#$T1@@48| $h@@16))) (=> (and ($IsAllocBox |a#3#0#0| |#$T0@@64| $h@@16) ($IsAllocBox |a#3#1#0| |#$T1@@48| $h@@16)) ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |#$T0@@64| |#$T1@@48|) $h@@16)))) :qid |unknown.0:0| :skolemid |8583| :pattern ( ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |#$T0@@64| |#$T1@@48|) $h@@16)) )))
(assert (forall ((d@@2 T@U) (|#$T0@@65| T@U) ($h@@17 T@U) ) (!  (=> (and (and (and (= (type d@@2) DatatypeTypeType) (= (type |#$T0@@65|) TyType)) (= (type $h@@17) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@17) (and (_System.Tuple2.___hMake2_q d@@2) (exists ((|#$T1@@49| T@U) ) (!  (and (= (type |#$T1@@49|) TyType) ($IsAlloc d@@2 (Tclass._System.Tuple2 |#$T0@@65| |#$T1@@49|) $h@@17)) :qid |unknown.0:0| :skolemid |8584| :pattern ( ($IsAlloc d@@2 (Tclass._System.Tuple2 |#$T0@@65| |#$T1@@49|) $h@@17)) ))))) ($IsAllocBox (_System.Tuple2._0 d@@2) |#$T0@@65| $h@@17)) :qid |unknown.0:0| :skolemid |8585| :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@2) |#$T0@@65| $h@@17)) )))
(assert (forall ((d@@3 T@U) (|#$T1@@50| T@U) ($h@@18 T@U) ) (!  (=> (and (and (and (= (type d@@3) DatatypeTypeType) (= (type |#$T1@@50|) TyType)) (= (type $h@@18) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@18) (and (_System.Tuple2.___hMake2_q d@@3) (exists ((|#$T0@@66| T@U) ) (!  (and (= (type |#$T0@@66|) TyType) ($IsAlloc d@@3 (Tclass._System.Tuple2 |#$T0@@66| |#$T1@@50|) $h@@18)) :qid |unknown.0:0| :skolemid |8586| :pattern ( ($IsAlloc d@@3 (Tclass._System.Tuple2 |#$T0@@66| |#$T1@@50|) $h@@18)) ))))) ($IsAllocBox (_System.Tuple2._1 d@@3) |#$T1@@50| $h@@18)) :qid |unknown.0:0| :skolemid |8587| :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@3) |#$T1@@50| $h@@18)) )))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (!  (=> (and (= (type |a#4#0#0|) BoxType) (= (type |a#4#1#0|) BoxType)) (= (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|)) (Lit (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)))) :qid |unknown.0:0| :skolemid |8588| :pattern ( (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|))) )))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (!  (=> (and (= (type |a#5#0#0|) BoxType) (= (type |a#5#1#0|) BoxType)) (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) |a#5#0#0|)) :qid |unknown.0:0| :skolemid |8589| :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) )))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (!  (=> (and (= (type |a#6#0#0|) BoxType) (= (type |a#6#1#0|) BoxType)) (< (BoxRank |a#6#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)))) :qid |unknown.0:0| :skolemid |8590| :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) )))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (!  (=> (and (= (type |a#7#0#0|) BoxType) (= (type |a#7#1#0|) BoxType)) (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) |a#7#1#0|)) :qid |unknown.0:0| :skolemid |8591| :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) )))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (!  (=> (and (= (type |a#8#0#0|) BoxType) (= (type |a#8#1#0|) BoxType)) (< (BoxRank |a#8#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)))) :qid |unknown.0:0| :skolemid |8592| :pattern ( (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)) )))
(assert (forall ((d@@4 T@U) ) (!  (=> (and (= (type d@@4) DatatypeTypeType) (|$IsA#_System.Tuple2| d@@4)) (_System.Tuple2.___hMake2_q d@@4)) :qid |unknown.0:0| :skolemid |8593| :pattern ( (|$IsA#_System.Tuple2| d@@4)) )))
(assert (forall ((|#$T0@@67| T@U) (|#$T1@@51| T@U) (d@@5 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@67|) TyType) (= (type |#$T1@@51|) TyType)) (= (type d@@5) DatatypeTypeType)) ($Is d@@5 (Tclass._System.Tuple2 |#$T0@@67| |#$T1@@51|))) (_System.Tuple2.___hMake2_q d@@5)) :qid |unknown.0:0| :skolemid |8594| :pattern ( (_System.Tuple2.___hMake2_q d@@5) ($Is d@@5 (Tclass._System.Tuple2 |#$T0@@67| |#$T1@@51|))) )))
(assert (forall ((a@@106 T@U) (b@@61 T@U) ) (!  (=> (and (and (= (type a@@106) DatatypeTypeType) (= (type b@@61) DatatypeTypeType)) true) (and (=> (|_System.Tuple2#Equal| a@@106 b@@61) (and (= (_System.Tuple2._0 a@@106) (_System.Tuple2._0 b@@61)) (= (_System.Tuple2._1 a@@106) (_System.Tuple2._1 b@@61)))) (=> (and (= (_System.Tuple2._0 a@@106) (_System.Tuple2._0 b@@61)) (= (_System.Tuple2._1 a@@106) (_System.Tuple2._1 b@@61))) (|_System.Tuple2#Equal| a@@106 b@@61)))) :qid |unknown.0:0| :skolemid |8595| :pattern ( (|_System.Tuple2#Equal| a@@106 b@@61)) )))
(assert (forall ((a@@107 T@U) (b@@62 T@U) ) (!  (=> (and (= (type a@@107) DatatypeTypeType) (= (type b@@62) DatatypeTypeType)) (and (=> (|_System.Tuple2#Equal| a@@107 b@@62) (= a@@107 b@@62)) (=> (= a@@107 b@@62) (|_System.Tuple2#Equal| a@@107 b@@62)))) :qid |unknown.0:0| :skolemid |8596| :pattern ( (|_System.Tuple2#Equal| a@@107 b@@62)) )))
(assert (forall ((arg0@@191 T@U) (arg1@@91 T@U) (arg2@@47 T@U) (arg3@@26 T@U) ) (! (= (type (Tclass._System.___hFunc3 arg0@@191 arg1@@91 arg2@@47 arg3@@26)) TyType) :qid |funType:Tclass._System.___hFunc3| :pattern ( (Tclass._System.___hFunc3 arg0@@191 arg1@@91 arg2@@47 arg3@@26)) )))
(assert (forall ((|#$T0@@68| T@U) (|#$T1@@52| T@U) (|#$T2@@24| T@U) (|#$R@@72| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@68|) TyType) (= (type |#$T1@@52|) TyType)) (= (type |#$T2@@24|) TyType)) (= (type |#$R@@72|) TyType)) (= (Tag (Tclass._System.___hFunc3 |#$T0@@68| |#$T1@@52| |#$T2@@24| |#$R@@72|)) Tagclass._System.___hFunc3)) :qid |unknown.0:0| :skolemid |8597| :pattern ( (Tclass._System.___hFunc3 |#$T0@@68| |#$T1@@52| |#$T2@@24| |#$R@@72|)) )))
(assert (forall ((arg0@@192 T@U) ) (! (= (type (Tclass._System.___hFunc3_0 arg0@@192)) TyType) :qid |funType:Tclass._System.___hFunc3_0| :pattern ( (Tclass._System.___hFunc3_0 arg0@@192)) )))
(assert (forall ((|#$T0@@69| T@U) (|#$T1@@53| T@U) (|#$T2@@25| T@U) (|#$R@@73| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@69|) TyType) (= (type |#$T1@@53|) TyType)) (= (type |#$T2@@25|) TyType)) (= (type |#$R@@73|) TyType)) (= (Tclass._System.___hFunc3_0 (Tclass._System.___hFunc3 |#$T0@@69| |#$T1@@53| |#$T2@@25| |#$R@@73|)) |#$T0@@69|)) :qid |unknown.0:0| :skolemid |8598| :pattern ( (Tclass._System.___hFunc3 |#$T0@@69| |#$T1@@53| |#$T2@@25| |#$R@@73|)) )))
(assert (forall ((arg0@@193 T@U) ) (! (= (type (Tclass._System.___hFunc3_1 arg0@@193)) TyType) :qid |funType:Tclass._System.___hFunc3_1| :pattern ( (Tclass._System.___hFunc3_1 arg0@@193)) )))
(assert (forall ((|#$T0@@70| T@U) (|#$T1@@54| T@U) (|#$T2@@26| T@U) (|#$R@@74| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@70|) TyType) (= (type |#$T1@@54|) TyType)) (= (type |#$T2@@26|) TyType)) (= (type |#$R@@74|) TyType)) (= (Tclass._System.___hFunc3_1 (Tclass._System.___hFunc3 |#$T0@@70| |#$T1@@54| |#$T2@@26| |#$R@@74|)) |#$T1@@54|)) :qid |unknown.0:0| :skolemid |8599| :pattern ( (Tclass._System.___hFunc3 |#$T0@@70| |#$T1@@54| |#$T2@@26| |#$R@@74|)) )))
(assert (forall ((arg0@@194 T@U) ) (! (= (type (Tclass._System.___hFunc3_2 arg0@@194)) TyType) :qid |funType:Tclass._System.___hFunc3_2| :pattern ( (Tclass._System.___hFunc3_2 arg0@@194)) )))
(assert (forall ((|#$T0@@71| T@U) (|#$T1@@55| T@U) (|#$T2@@27| T@U) (|#$R@@75| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@71|) TyType) (= (type |#$T1@@55|) TyType)) (= (type |#$T2@@27|) TyType)) (= (type |#$R@@75|) TyType)) (= (Tclass._System.___hFunc3_2 (Tclass._System.___hFunc3 |#$T0@@71| |#$T1@@55| |#$T2@@27| |#$R@@75|)) |#$T2@@27|)) :qid |unknown.0:0| :skolemid |8600| :pattern ( (Tclass._System.___hFunc3 |#$T0@@71| |#$T1@@55| |#$T2@@27| |#$R@@75|)) )))
(assert (forall ((arg0@@195 T@U) ) (! (= (type (Tclass._System.___hFunc3_3 arg0@@195)) TyType) :qid |funType:Tclass._System.___hFunc3_3| :pattern ( (Tclass._System.___hFunc3_3 arg0@@195)) )))
(assert (forall ((|#$T0@@72| T@U) (|#$T1@@56| T@U) (|#$T2@@28| T@U) (|#$R@@76| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@72|) TyType) (= (type |#$T1@@56|) TyType)) (= (type |#$T2@@28|) TyType)) (= (type |#$R@@76|) TyType)) (= (Tclass._System.___hFunc3_3 (Tclass._System.___hFunc3 |#$T0@@72| |#$T1@@56| |#$T2@@28| |#$R@@76|)) |#$R@@76|)) :qid |unknown.0:0| :skolemid |8601| :pattern ( (Tclass._System.___hFunc3 |#$T0@@72| |#$T1@@56| |#$T2@@28| |#$R@@76|)) )))
(assert (forall ((|#$T0@@73| T@U) (|#$T1@@57| T@U) (|#$T2@@29| T@U) (|#$R@@77| T@U) (bx@@68 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@73|) TyType) (= (type |#$T1@@57|) TyType)) (= (type |#$T2@@29|) TyType)) (= (type |#$R@@77|) TyType)) (= (type bx@@68) BoxType)) ($IsBox bx@@68 (Tclass._System.___hFunc3 |#$T0@@73| |#$T1@@57| |#$T2@@29| |#$R@@77|))) (and (= ($Box ($Unbox HandleTypeType bx@@68)) bx@@68) ($Is ($Unbox HandleTypeType bx@@68) (Tclass._System.___hFunc3 |#$T0@@73| |#$T1@@57| |#$T2@@29| |#$R@@77|)))) :qid |unknown.0:0| :skolemid |8602| :pattern ( ($IsBox bx@@68 (Tclass._System.___hFunc3 |#$T0@@73| |#$T1@@57| |#$T2@@29| |#$R@@77|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@196 T@T) (arg1@@92 T@T) (arg2@@48 T@T) (arg3@@27 T@T) (arg4@@18 T@T) ) (! (= (Ctor (MapType5Type arg0@@196 arg1@@92 arg2@@48 arg3@@27 arg4@@18)) 24) :qid |ctor:MapType5Type| )) (forall ((arg0@@197 T@T) (arg1@@93 T@T) (arg2@@49 T@T) (arg3@@28 T@T) (arg4@@19 T@T) ) (! (= (MapType5TypeInv0 (MapType5Type arg0@@197 arg1@@93 arg2@@49 arg3@@28 arg4@@19)) arg0@@197) :qid |typeInv:MapType5TypeInv0| :pattern ( (MapType5Type arg0@@197 arg1@@93 arg2@@49 arg3@@28 arg4@@19)) ))) (forall ((arg0@@198 T@T) (arg1@@94 T@T) (arg2@@50 T@T) (arg3@@29 T@T) (arg4@@20 T@T) ) (! (= (MapType5TypeInv1 (MapType5Type arg0@@198 arg1@@94 arg2@@50 arg3@@29 arg4@@20)) arg1@@94) :qid |typeInv:MapType5TypeInv1| :pattern ( (MapType5Type arg0@@198 arg1@@94 arg2@@50 arg3@@29 arg4@@20)) ))) (forall ((arg0@@199 T@T) (arg1@@95 T@T) (arg2@@51 T@T) (arg3@@30 T@T) (arg4@@21 T@T) ) (! (= (MapType5TypeInv2 (MapType5Type arg0@@199 arg1@@95 arg2@@51 arg3@@30 arg4@@21)) arg2@@51) :qid |typeInv:MapType5TypeInv2| :pattern ( (MapType5Type arg0@@199 arg1@@95 arg2@@51 arg3@@30 arg4@@21)) ))) (forall ((arg0@@200 T@T) (arg1@@96 T@T) (arg2@@52 T@T) (arg3@@31 T@T) (arg4@@22 T@T) ) (! (= (MapType5TypeInv3 (MapType5Type arg0@@200 arg1@@96 arg2@@52 arg3@@31 arg4@@22)) arg3@@31) :qid |typeInv:MapType5TypeInv3| :pattern ( (MapType5Type arg0@@200 arg1@@96 arg2@@52 arg3@@31 arg4@@22)) ))) (forall ((arg0@@201 T@T) (arg1@@97 T@T) (arg2@@53 T@T) (arg3@@32 T@T) (arg4@@23 T@T) ) (! (= (MapType5TypeInv4 (MapType5Type arg0@@201 arg1@@97 arg2@@53 arg3@@32 arg4@@23)) arg4@@23) :qid |typeInv:MapType5TypeInv4| :pattern ( (MapType5Type arg0@@201 arg1@@97 arg2@@53 arg3@@32 arg4@@23)) ))) (forall ((arg0@@202 T@U) (arg1@@98 T@U) (arg2@@54 T@U) (arg3@@33 T@U) (arg4@@24 T@U) ) (! (let ((aVar4@@0 (MapType5TypeInv4 (type arg0@@202)))) (= (type (MapType5Select arg0@@202 arg1@@98 arg2@@54 arg3@@33 arg4@@24)) aVar4@@0)) :qid |funType:MapType5Select| :pattern ( (MapType5Select arg0@@202 arg1@@98 arg2@@54 arg3@@33 arg4@@24)) ))) (forall ((arg0@@203 T@U) (arg1@@99 T@U) (arg2@@55 T@U) (arg3@@34 T@U) (arg4@@25 T@U) (arg5@@12 T@U) ) (! (let ((aVar4@@1 (type arg5@@12))) (let ((aVar3@@3 (type arg4@@25))) (let ((aVar2@@4 (type arg3@@34))) (let ((aVar1@@5 (type arg2@@55))) (let ((aVar0@@3 (type arg1@@99))) (= (type (MapType5Store arg0@@203 arg1@@99 arg2@@55 arg3@@34 arg4@@25 arg5@@12)) (MapType5Type aVar0@@3 aVar1@@5 aVar2@@4 aVar3@@3 aVar4@@1))))))) :qid |funType:MapType5Store| :pattern ( (MapType5Store arg0@@203 arg1@@99 arg2@@55 arg3@@34 arg4@@25 arg5@@12)) ))) (forall ((m@@43 T@U) (x0@@21 T@U) (x1@@15 T@U) (x2@@11 T@U) (x3@@6 T@U) (val@@22 T@U) ) (! (let ((aVar4@@2 (MapType5TypeInv4 (type m@@43)))) (=> (= (type val@@22) aVar4@@2) (= (MapType5Select (MapType5Store m@@43 x0@@21 x1@@15 x2@@11 x3@@6 val@@22) x0@@21 x1@@15 x2@@11 x3@@6) val@@22))) :qid |mapAx0:MapType5Select| :weight 0 ))) (and (and (and (and (forall ((val@@23 T@U) (m@@44 T@U) (x0@@22 T@U) (x1@@16 T@U) (x2@@12 T@U) (x3@@7 T@U) (y0@@16 T@U) (y1@@12 T@U) (y2@@9 T@U) (y3@@5 T@U) ) (!  (or (= x0@@22 y0@@16) (= (MapType5Select (MapType5Store m@@44 x0@@22 x1@@16 x2@@12 x3@@7 val@@23) y0@@16 y1@@12 y2@@9 y3@@5) (MapType5Select m@@44 y0@@16 y1@@12 y2@@9 y3@@5))) :qid |mapAx1:MapType5Select:0| :weight 0 )) (forall ((val@@24 T@U) (m@@45 T@U) (x0@@23 T@U) (x1@@17 T@U) (x2@@13 T@U) (x3@@8 T@U) (y0@@17 T@U) (y1@@13 T@U) (y2@@10 T@U) (y3@@6 T@U) ) (!  (or (= x1@@17 y1@@13) (= (MapType5Select (MapType5Store m@@45 x0@@23 x1@@17 x2@@13 x3@@8 val@@24) y0@@17 y1@@13 y2@@10 y3@@6) (MapType5Select m@@45 y0@@17 y1@@13 y2@@10 y3@@6))) :qid |mapAx1:MapType5Select:1| :weight 0 ))) (forall ((val@@25 T@U) (m@@46 T@U) (x0@@24 T@U) (x1@@18 T@U) (x2@@14 T@U) (x3@@9 T@U) (y0@@18 T@U) (y1@@14 T@U) (y2@@11 T@U) (y3@@7 T@U) ) (!  (or (= x2@@14 y2@@11) (= (MapType5Select (MapType5Store m@@46 x0@@24 x1@@18 x2@@14 x3@@9 val@@25) y0@@18 y1@@14 y2@@11 y3@@7) (MapType5Select m@@46 y0@@18 y1@@14 y2@@11 y3@@7))) :qid |mapAx1:MapType5Select:2| :weight 0 ))) (forall ((val@@26 T@U) (m@@47 T@U) (x0@@25 T@U) (x1@@19 T@U) (x2@@15 T@U) (x3@@10 T@U) (y0@@19 T@U) (y1@@15 T@U) (y2@@12 T@U) (y3@@8 T@U) ) (!  (or (= x3@@10 y3@@8) (= (MapType5Select (MapType5Store m@@47 x0@@25 x1@@19 x2@@15 x3@@10 val@@26) y0@@19 y1@@15 y2@@12 y3@@8) (MapType5Select m@@47 y0@@19 y1@@15 y2@@12 y3@@8))) :qid |mapAx1:MapType5Select:3| :weight 0 ))) (forall ((val@@27 T@U) (m@@48 T@U) (x0@@26 T@U) (x1@@20 T@U) (x2@@16 T@U) (x3@@11 T@U) (y0@@20 T@U) (y1@@16 T@U) (y2@@13 T@U) (y3@@9 T@U) ) (!  (or true (= (MapType5Select (MapType5Store m@@48 x0@@26 x1@@20 x2@@16 x3@@11 val@@27) y0@@20 y1@@16 y2@@13 y3@@9) (MapType5Select m@@48 y0@@20 y1@@16 y2@@13 y3@@9))) :qid |mapAx2:MapType5Select| :weight 0 )))) (forall ((arg0@@204 T@U) (arg1@@100 T@U) (arg2@@56 T@U) (arg3@@35 T@U) (arg4@@26 T@U) (arg5@@13 T@U) (arg6@@4 T@U) (arg7@@1 T@U) (arg8@@1 T@U) ) (! (= (type (Apply3 arg0@@204 arg1@@100 arg2@@56 arg3@@35 arg4@@26 arg5@@13 arg6@@4 arg7@@1 arg8@@1)) BoxType) :qid |funType:Apply3| :pattern ( (Apply3 arg0@@204 arg1@@100 arg2@@56 arg3@@35 arg4@@26 arg5@@13 arg6@@4 arg7@@1 arg8@@1)) ))) (forall ((arg0@@205 T@U) (arg1@@101 T@U) (arg2@@57 T@U) ) (! (= (type (Handle3 arg0@@205 arg1@@101 arg2@@57)) HandleTypeType) :qid |funType:Handle3| :pattern ( (Handle3 arg0@@205 arg1@@101 arg2@@57)) ))))
(assert (forall ((t0@@72 T@U) (t1@@48 T@U) (t2@@29 T@U) (t3@@14 T@U) (heap@@21 T@U) (h@@48 T@U) (r@@26 T@U) (rd@@11 T@U) (bx0@@47 T@U) (bx1@@31 T@U) (bx2@@15 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@72) TyType) (= (type t1@@48) TyType)) (= (type t2@@29) TyType)) (= (type t3@@14) TyType)) (= (type heap@@21) (MapType0Type refType MapType1Type))) (= (type h@@48) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@26) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@11) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@47) BoxType)) (= (type bx1@@31) BoxType)) (= (type bx2@@15) BoxType)) (= (Apply3 t0@@72 t1@@48 t2@@29 t3@@14 heap@@21 (Handle3 h@@48 r@@26 rd@@11) bx0@@47 bx1@@31 bx2@@15) (MapType5Select h@@48 heap@@21 bx0@@47 bx1@@31 bx2@@15))) :qid |unknown.0:0| :skolemid |8603| :pattern ( (Apply3 t0@@72 t1@@48 t2@@29 t3@@14 heap@@21 (Handle3 h@@48 r@@26 rd@@11) bx0@@47 bx1@@31 bx2@@15)) )))
(assert (forall ((t0@@73 T@U) (t1@@49 T@U) (t2@@30 T@U) (t3@@15 T@U) (heap@@22 T@U) (h@@49 T@U) (r@@27 T@U) (rd@@12 T@U) (bx0@@48 T@U) (bx1@@32 T@U) (bx2@@16 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@73) TyType) (= (type t1@@49) TyType)) (= (type t2@@30) TyType)) (= (type t3@@15) TyType)) (= (type heap@@22) (MapType0Type refType MapType1Type))) (= (type h@@49) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@27) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@12) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@48) BoxType)) (= (type bx1@@32) BoxType)) (= (type bx2@@16) BoxType)) (U_2_bool (MapType5Select r@@27 heap@@22 bx0@@48 bx1@@32 bx2@@16))) (Requires3 t0@@73 t1@@49 t2@@30 t3@@15 heap@@22 (Handle3 h@@49 r@@27 rd@@12) bx0@@48 bx1@@32 bx2@@16)) :qid |unknown.0:0| :skolemid |8604| :pattern ( (Requires3 t0@@73 t1@@49 t2@@30 t3@@15 heap@@22 (Handle3 h@@49 r@@27 rd@@12) bx0@@48 bx1@@32 bx2@@16)) )))
(assert (forall ((arg0@@206 T@U) (arg1@@102 T@U) (arg2@@58 T@U) (arg3@@36 T@U) (arg4@@27 T@U) (arg5@@14 T@U) (arg6@@5 T@U) (arg7@@2 T@U) (arg8@@2 T@U) ) (! (= (type (Reads3 arg0@@206 arg1@@102 arg2@@58 arg3@@36 arg4@@27 arg5@@14 arg6@@5 arg7@@2 arg8@@2)) (MapType0Type BoxType boolType)) :qid |funType:Reads3| :pattern ( (Reads3 arg0@@206 arg1@@102 arg2@@58 arg3@@36 arg4@@27 arg5@@14 arg6@@5 arg7@@2 arg8@@2)) )))
(assert (forall ((t0@@74 T@U) (t1@@50 T@U) (t2@@31 T@U) (t3@@16 T@U) (heap@@23 T@U) (h@@50 T@U) (r@@28 T@U) (rd@@13 T@U) (bx0@@49 T@U) (bx1@@33 T@U) (bx2@@17 T@U) (bx@@69 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@74) TyType) (= (type t1@@50) TyType)) (= (type t2@@31) TyType)) (= (type t3@@16) TyType)) (= (type heap@@23) (MapType0Type refType MapType1Type))) (= (type h@@50) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@28) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@13) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@49) BoxType)) (= (type bx1@@33) BoxType)) (= (type bx2@@17) BoxType)) (= (type bx@@69) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads3 t0@@74 t1@@50 t2@@31 t3@@16 heap@@23 (Handle3 h@@50 r@@28 rd@@13) bx0@@49 bx1@@33 bx2@@17) bx@@69)) (U_2_bool (MapType0Select (MapType5Select rd@@13 heap@@23 bx0@@49 bx1@@33 bx2@@17) bx@@69))) (=> (U_2_bool (MapType0Select (MapType5Select rd@@13 heap@@23 bx0@@49 bx1@@33 bx2@@17) bx@@69)) (U_2_bool (MapType0Select (Reads3 t0@@74 t1@@50 t2@@31 t3@@16 heap@@23 (Handle3 h@@50 r@@28 rd@@13) bx0@@49 bx1@@33 bx2@@17) bx@@69))))) :qid |unknown.0:0| :skolemid |8605| :pattern ( (MapType0Select (Reads3 t0@@74 t1@@50 t2@@31 t3@@16 heap@@23 (Handle3 h@@50 r@@28 rd@@13) bx0@@49 bx1@@33 bx2@@17) bx@@69)) )))
(assert (forall ((t0@@75 T@U) (t1@@51 T@U) (t2@@32 T@U) (t3@@17 T@U) (h0@@24 T@U) (h1@@24 T@U) (f@@53 T@U) (bx0@@50 T@U) (bx1@@34 T@U) (bx2@@18 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@75) TyType) (= (type t1@@51) TyType)) (= (type t2@@32) TyType)) (= (type t3@@17) TyType)) (= (type h0@@24) (MapType0Type refType MapType1Type))) (= (type h1@@24) (MapType0Type refType MapType1Type))) (= (type f@@53) HandleTypeType)) (= (type bx0@@50) BoxType)) (= (type bx1@@34) BoxType)) (= (type bx2@@18) BoxType)) (and (and (and ($HeapSucc h0@@24 h1@@24) (and ($IsGoodHeap h0@@24) ($IsGoodHeap h1@@24))) (and (and (and ($IsBox bx0@@50 t0@@75) ($IsBox bx1@@34 t1@@51)) ($IsBox bx2@@18 t2@@32)) ($Is f@@53 (Tclass._System.___hFunc3 t0@@75 t1@@51 t2@@32 t3@@17)))) (forall ((o@@78 T@U) (fld@@23 T@U) ) (! (let ((a@@108 (FieldTypeInv0 (type fld@@23)))) (=> (and (and (= (type o@@78) refType) (= (type fld@@23) (FieldType a@@108))) (and (not (= o@@78 null)) (U_2_bool (MapType0Select (Reads3 t0@@75 t1@@51 t2@@32 t3@@17 h0@@24 f@@53 bx0@@50 bx1@@34 bx2@@18) ($Box o@@78))))) (= (MapType1Select (MapType0Select h0@@24 o@@78) fld@@23) (MapType1Select (MapType0Select h1@@24 o@@78) fld@@23)))) :qid |unknown.0:0| :skolemid |8606| :no-pattern (type o@@78) :no-pattern (type fld@@23) :no-pattern (U_2_int o@@78) :no-pattern (U_2_bool o@@78) :no-pattern (U_2_int fld@@23) :no-pattern (U_2_bool fld@@23) )))) (= (Reads3 t0@@75 t1@@51 t2@@32 t3@@17 h0@@24 f@@53 bx0@@50 bx1@@34 bx2@@18) (Reads3 t0@@75 t1@@51 t2@@32 t3@@17 h1@@24 f@@53 bx0@@50 bx1@@34 bx2@@18))) :qid |unknown.0:0| :skolemid |8607| :pattern ( ($HeapSucc h0@@24 h1@@24) (Reads3 t0@@75 t1@@51 t2@@32 t3@@17 h1@@24 f@@53 bx0@@50 bx1@@34 bx2@@18)) )))
(assert (forall ((t0@@76 T@U) (t1@@52 T@U) (t2@@33 T@U) (t3@@18 T@U) (h0@@25 T@U) (h1@@25 T@U) (f@@54 T@U) (bx0@@51 T@U) (bx1@@35 T@U) (bx2@@19 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@76) TyType) (= (type t1@@52) TyType)) (= (type t2@@33) TyType)) (= (type t3@@18) TyType)) (= (type h0@@25) (MapType0Type refType MapType1Type))) (= (type h1@@25) (MapType0Type refType MapType1Type))) (= (type f@@54) HandleTypeType)) (= (type bx0@@51) BoxType)) (= (type bx1@@35) BoxType)) (= (type bx2@@19) BoxType)) (and (and (and ($HeapSucc h0@@25 h1@@25) (and ($IsGoodHeap h0@@25) ($IsGoodHeap h1@@25))) (and (and (and ($IsBox bx0@@51 t0@@76) ($IsBox bx1@@35 t1@@52)) ($IsBox bx2@@19 t2@@33)) ($Is f@@54 (Tclass._System.___hFunc3 t0@@76 t1@@52 t2@@33 t3@@18)))) (forall ((o@@79 T@U) (fld@@24 T@U) ) (! (let ((a@@109 (FieldTypeInv0 (type fld@@24)))) (=> (and (and (= (type o@@79) refType) (= (type fld@@24) (FieldType a@@109))) (and (not (= o@@79 null)) (U_2_bool (MapType0Select (Reads3 t0@@76 t1@@52 t2@@33 t3@@18 h1@@25 f@@54 bx0@@51 bx1@@35 bx2@@19) ($Box o@@79))))) (= (MapType1Select (MapType0Select h0@@25 o@@79) fld@@24) (MapType1Select (MapType0Select h1@@25 o@@79) fld@@24)))) :qid |unknown.0:0| :skolemid |8608| :no-pattern (type o@@79) :no-pattern (type fld@@24) :no-pattern (U_2_int o@@79) :no-pattern (U_2_bool o@@79) :no-pattern (U_2_int fld@@24) :no-pattern (U_2_bool fld@@24) )))) (= (Reads3 t0@@76 t1@@52 t2@@33 t3@@18 h0@@25 f@@54 bx0@@51 bx1@@35 bx2@@19) (Reads3 t0@@76 t1@@52 t2@@33 t3@@18 h1@@25 f@@54 bx0@@51 bx1@@35 bx2@@19))) :qid |unknown.0:0| :skolemid |8609| :pattern ( ($HeapSucc h0@@25 h1@@25) (Reads3 t0@@76 t1@@52 t2@@33 t3@@18 h1@@25 f@@54 bx0@@51 bx1@@35 bx2@@19)) )))
(assert (forall ((t0@@77 T@U) (t1@@53 T@U) (t2@@34 T@U) (t3@@19 T@U) (h0@@26 T@U) (h1@@26 T@U) (f@@55 T@U) (bx0@@52 T@U) (bx1@@36 T@U) (bx2@@20 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@77) TyType) (= (type t1@@53) TyType)) (= (type t2@@34) TyType)) (= (type t3@@19) TyType)) (= (type h0@@26) (MapType0Type refType MapType1Type))) (= (type h1@@26) (MapType0Type refType MapType1Type))) (= (type f@@55) HandleTypeType)) (= (type bx0@@52) BoxType)) (= (type bx1@@36) BoxType)) (= (type bx2@@20) BoxType)) (and (and (and ($HeapSucc h0@@26 h1@@26) (and ($IsGoodHeap h0@@26) ($IsGoodHeap h1@@26))) (and (and (and ($IsBox bx0@@52 t0@@77) ($IsBox bx1@@36 t1@@53)) ($IsBox bx2@@20 t2@@34)) ($Is f@@55 (Tclass._System.___hFunc3 t0@@77 t1@@53 t2@@34 t3@@19)))) (forall ((o@@80 T@U) (fld@@25 T@U) ) (! (let ((a@@110 (FieldTypeInv0 (type fld@@25)))) (=> (and (and (= (type o@@80) refType) (= (type fld@@25) (FieldType a@@110))) (and (not (= o@@80 null)) (U_2_bool (MapType0Select (Reads3 t0@@77 t1@@53 t2@@34 t3@@19 h0@@26 f@@55 bx0@@52 bx1@@36 bx2@@20) ($Box o@@80))))) (= (MapType1Select (MapType0Select h0@@26 o@@80) fld@@25) (MapType1Select (MapType0Select h1@@26 o@@80) fld@@25)))) :qid |unknown.0:0| :skolemid |8610| :no-pattern (type o@@80) :no-pattern (type fld@@25) :no-pattern (U_2_int o@@80) :no-pattern (U_2_bool o@@80) :no-pattern (U_2_int fld@@25) :no-pattern (U_2_bool fld@@25) )))) (and (=> (Requires3 t0@@77 t1@@53 t2@@34 t3@@19 h0@@26 f@@55 bx0@@52 bx1@@36 bx2@@20) (Requires3 t0@@77 t1@@53 t2@@34 t3@@19 h1@@26 f@@55 bx0@@52 bx1@@36 bx2@@20)) (=> (Requires3 t0@@77 t1@@53 t2@@34 t3@@19 h1@@26 f@@55 bx0@@52 bx1@@36 bx2@@20) (Requires3 t0@@77 t1@@53 t2@@34 t3@@19 h0@@26 f@@55 bx0@@52 bx1@@36 bx2@@20)))) :qid |unknown.0:0| :skolemid |8611| :pattern ( ($HeapSucc h0@@26 h1@@26) (Requires3 t0@@77 t1@@53 t2@@34 t3@@19 h1@@26 f@@55 bx0@@52 bx1@@36 bx2@@20)) )))
(assert (forall ((t0@@78 T@U) (t1@@54 T@U) (t2@@35 T@U) (t3@@20 T@U) (h0@@27 T@U) (h1@@27 T@U) (f@@56 T@U) (bx0@@53 T@U) (bx1@@37 T@U) (bx2@@21 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@78) TyType) (= (type t1@@54) TyType)) (= (type t2@@35) TyType)) (= (type t3@@20) TyType)) (= (type h0@@27) (MapType0Type refType MapType1Type))) (= (type h1@@27) (MapType0Type refType MapType1Type))) (= (type f@@56) HandleTypeType)) (= (type bx0@@53) BoxType)) (= (type bx1@@37) BoxType)) (= (type bx2@@21) BoxType)) (and (and (and ($HeapSucc h0@@27 h1@@27) (and ($IsGoodHeap h0@@27) ($IsGoodHeap h1@@27))) (and (and (and ($IsBox bx0@@53 t0@@78) ($IsBox bx1@@37 t1@@54)) ($IsBox bx2@@21 t2@@35)) ($Is f@@56 (Tclass._System.___hFunc3 t0@@78 t1@@54 t2@@35 t3@@20)))) (forall ((o@@81 T@U) (fld@@26 T@U) ) (! (let ((a@@111 (FieldTypeInv0 (type fld@@26)))) (=> (and (and (= (type o@@81) refType) (= (type fld@@26) (FieldType a@@111))) (and (not (= o@@81 null)) (U_2_bool (MapType0Select (Reads3 t0@@78 t1@@54 t2@@35 t3@@20 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21) ($Box o@@81))))) (= (MapType1Select (MapType0Select h0@@27 o@@81) fld@@26) (MapType1Select (MapType0Select h1@@27 o@@81) fld@@26)))) :qid |unknown.0:0| :skolemid |8612| :no-pattern (type o@@81) :no-pattern (type fld@@26) :no-pattern (U_2_int o@@81) :no-pattern (U_2_bool o@@81) :no-pattern (U_2_int fld@@26) :no-pattern (U_2_bool fld@@26) )))) (and (=> (Requires3 t0@@78 t1@@54 t2@@35 t3@@20 h0@@27 f@@56 bx0@@53 bx1@@37 bx2@@21) (Requires3 t0@@78 t1@@54 t2@@35 t3@@20 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21)) (=> (Requires3 t0@@78 t1@@54 t2@@35 t3@@20 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21) (Requires3 t0@@78 t1@@54 t2@@35 t3@@20 h0@@27 f@@56 bx0@@53 bx1@@37 bx2@@21)))) :qid |unknown.0:0| :skolemid |8613| :pattern ( ($HeapSucc h0@@27 h1@@27) (Requires3 t0@@78 t1@@54 t2@@35 t3@@20 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21)) )))
(assert (forall ((t0@@79 T@U) (t1@@55 T@U) (t2@@36 T@U) (t3@@21 T@U) (h0@@28 T@U) (h1@@28 T@U) (f@@57 T@U) (bx0@@54 T@U) (bx1@@38 T@U) (bx2@@22 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@79) TyType) (= (type t1@@55) TyType)) (= (type t2@@36) TyType)) (= (type t3@@21) TyType)) (= (type h0@@28) (MapType0Type refType MapType1Type))) (= (type h1@@28) (MapType0Type refType MapType1Type))) (= (type f@@57) HandleTypeType)) (= (type bx0@@54) BoxType)) (= (type bx1@@38) BoxType)) (= (type bx2@@22) BoxType)) (and (and (and ($HeapSucc h0@@28 h1@@28) (and ($IsGoodHeap h0@@28) ($IsGoodHeap h1@@28))) (and (and (and ($IsBox bx0@@54 t0@@79) ($IsBox bx1@@38 t1@@55)) ($IsBox bx2@@22 t2@@36)) ($Is f@@57 (Tclass._System.___hFunc3 t0@@79 t1@@55 t2@@36 t3@@21)))) (forall ((o@@82 T@U) (fld@@27 T@U) ) (! (let ((a@@112 (FieldTypeInv0 (type fld@@27)))) (=> (and (and (= (type o@@82) refType) (= (type fld@@27) (FieldType a@@112))) (and (not (= o@@82 null)) (U_2_bool (MapType0Select (Reads3 t0@@79 t1@@55 t2@@36 t3@@21 h0@@28 f@@57 bx0@@54 bx1@@38 bx2@@22) ($Box o@@82))))) (= (MapType1Select (MapType0Select h0@@28 o@@82) fld@@27) (MapType1Select (MapType0Select h1@@28 o@@82) fld@@27)))) :qid |unknown.0:0| :skolemid |8614| :no-pattern (type o@@82) :no-pattern (type fld@@27) :no-pattern (U_2_int o@@82) :no-pattern (U_2_bool o@@82) :no-pattern (U_2_int fld@@27) :no-pattern (U_2_bool fld@@27) )))) (= (Apply3 t0@@79 t1@@55 t2@@36 t3@@21 h0@@28 f@@57 bx0@@54 bx1@@38 bx2@@22) (Apply3 t0@@79 t1@@55 t2@@36 t3@@21 h1@@28 f@@57 bx0@@54 bx1@@38 bx2@@22))) :qid |unknown.0:0| :skolemid |8615| :pattern ( ($HeapSucc h0@@28 h1@@28) (Apply3 t0@@79 t1@@55 t2@@36 t3@@21 h1@@28 f@@57 bx0@@54 bx1@@38 bx2@@22)) )))
(assert (forall ((t0@@80 T@U) (t1@@56 T@U) (t2@@37 T@U) (t3@@22 T@U) (h0@@29 T@U) (h1@@29 T@U) (f@@58 T@U) (bx0@@55 T@U) (bx1@@39 T@U) (bx2@@23 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@80) TyType) (= (type t1@@56) TyType)) (= (type t2@@37) TyType)) (= (type t3@@22) TyType)) (= (type h0@@29) (MapType0Type refType MapType1Type))) (= (type h1@@29) (MapType0Type refType MapType1Type))) (= (type f@@58) HandleTypeType)) (= (type bx0@@55) BoxType)) (= (type bx1@@39) BoxType)) (= (type bx2@@23) BoxType)) (and (and (and ($HeapSucc h0@@29 h1@@29) (and ($IsGoodHeap h0@@29) ($IsGoodHeap h1@@29))) (and (and (and ($IsBox bx0@@55 t0@@80) ($IsBox bx1@@39 t1@@56)) ($IsBox bx2@@23 t2@@37)) ($Is f@@58 (Tclass._System.___hFunc3 t0@@80 t1@@56 t2@@37 t3@@22)))) (forall ((o@@83 T@U) (fld@@28 T@U) ) (! (let ((a@@113 (FieldTypeInv0 (type fld@@28)))) (=> (and (and (= (type o@@83) refType) (= (type fld@@28) (FieldType a@@113))) (and (not (= o@@83 null)) (U_2_bool (MapType0Select (Reads3 t0@@80 t1@@56 t2@@37 t3@@22 h1@@29 f@@58 bx0@@55 bx1@@39 bx2@@23) ($Box o@@83))))) (= (MapType1Select (MapType0Select h0@@29 o@@83) fld@@28) (MapType1Select (MapType0Select h1@@29 o@@83) fld@@28)))) :qid |unknown.0:0| :skolemid |8616| :no-pattern (type o@@83) :no-pattern (type fld@@28) :no-pattern (U_2_int o@@83) :no-pattern (U_2_bool o@@83) :no-pattern (U_2_int fld@@28) :no-pattern (U_2_bool fld@@28) )))) (= (Apply3 t0@@80 t1@@56 t2@@37 t3@@22 h0@@29 f@@58 bx0@@55 bx1@@39 bx2@@23) (Apply3 t0@@80 t1@@56 t2@@37 t3@@22 h1@@29 f@@58 bx0@@55 bx1@@39 bx2@@23))) :qid |unknown.0:0| :skolemid |8617| :pattern ( ($HeapSucc h0@@29 h1@@29) (Apply3 t0@@80 t1@@56 t2@@37 t3@@22 h1@@29 f@@58 bx0@@55 bx1@@39 bx2@@23)) )))
(assert (forall ((t0@@81 T@U) (t1@@57 T@U) (t2@@38 T@U) (t3@@23 T@U) (heap@@24 T@U) (f@@59 T@U) (bx0@@56 T@U) (bx1@@40 T@U) (bx2@@24 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@81) TyType) (= (type t1@@57) TyType)) (= (type t2@@38) TyType)) (= (type t3@@23) TyType)) (= (type heap@@24) (MapType0Type refType MapType1Type))) (= (type f@@59) HandleTypeType)) (= (type bx0@@56) BoxType)) (= (type bx1@@40) BoxType)) (= (type bx2@@24) BoxType)) (and ($IsGoodHeap heap@@24) (and (and (and ($IsBox bx0@@56 t0@@81) ($IsBox bx1@@40 t1@@57)) ($IsBox bx2@@24 t2@@38)) ($Is f@@59 (Tclass._System.___hFunc3 t0@@81 t1@@57 t2@@38 t3@@23))))) (and (=> (|Set#Equal| (Reads3 t0@@81 t1@@57 t2@@38 t3@@23 $OneHeap f@@59 bx0@@56 bx1@@40 bx2@@24) (|Set#Empty| BoxType)) (|Set#Equal| (Reads3 t0@@81 t1@@57 t2@@38 t3@@23 heap@@24 f@@59 bx0@@56 bx1@@40 bx2@@24) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads3 t0@@81 t1@@57 t2@@38 t3@@23 heap@@24 f@@59 bx0@@56 bx1@@40 bx2@@24) (|Set#Empty| BoxType)) (|Set#Equal| (Reads3 t0@@81 t1@@57 t2@@38 t3@@23 $OneHeap f@@59 bx0@@56 bx1@@40 bx2@@24) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |8618| :pattern ( (Reads3 t0@@81 t1@@57 t2@@38 t3@@23 $OneHeap f@@59 bx0@@56 bx1@@40 bx2@@24) ($IsGoodHeap heap@@24)) :pattern ( (Reads3 t0@@81 t1@@57 t2@@38 t3@@23 heap@@24 f@@59 bx0@@56 bx1@@40 bx2@@24)) )))
(assert (forall ((t0@@82 T@U) (t1@@58 T@U) (t2@@39 T@U) (t3@@24 T@U) (heap@@25 T@U) (f@@60 T@U) (bx0@@57 T@U) (bx1@@41 T@U) (bx2@@25 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@82) TyType) (= (type t1@@58) TyType)) (= (type t2@@39) TyType)) (= (type t3@@24) TyType)) (= (type heap@@25) (MapType0Type refType MapType1Type))) (= (type f@@60) HandleTypeType)) (= (type bx0@@57) BoxType)) (= (type bx1@@41) BoxType)) (= (type bx2@@25) BoxType)) (and (and ($IsGoodHeap heap@@25) (and (and (and ($IsBox bx0@@57 t0@@82) ($IsBox bx1@@41 t1@@58)) ($IsBox bx2@@25 t2@@39)) ($Is f@@60 (Tclass._System.___hFunc3 t0@@82 t1@@58 t2@@39 t3@@24)))) (|Set#Equal| (Reads3 t0@@82 t1@@58 t2@@39 t3@@24 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25) (|Set#Empty| BoxType)))) (and (=> (Requires3 t0@@82 t1@@58 t2@@39 t3@@24 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25) (Requires3 t0@@82 t1@@58 t2@@39 t3@@24 heap@@25 f@@60 bx0@@57 bx1@@41 bx2@@25)) (=> (Requires3 t0@@82 t1@@58 t2@@39 t3@@24 heap@@25 f@@60 bx0@@57 bx1@@41 bx2@@25) (Requires3 t0@@82 t1@@58 t2@@39 t3@@24 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25)))) :qid |unknown.0:0| :skolemid |8619| :pattern ( (Requires3 t0@@82 t1@@58 t2@@39 t3@@24 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25) ($IsGoodHeap heap@@25)) :pattern ( (Requires3 t0@@82 t1@@58 t2@@39 t3@@24 heap@@25 f@@60 bx0@@57 bx1@@41 bx2@@25)) )))
(assert (forall ((f@@61 T@U) (t0@@83 T@U) (t1@@59 T@U) (t2@@40 T@U) (t3@@25 T@U) ) (!  (=> (and (and (and (and (= (type f@@61) HandleTypeType) (= (type t0@@83) TyType)) (= (type t1@@59) TyType)) (= (type t2@@40) TyType)) (= (type t3@@25) TyType)) (and (=> ($Is f@@61 (Tclass._System.___hFunc3 t0@@83 t1@@59 t2@@40 t3@@25)) (forall ((h@@51 T@U) (bx0@@58 T@U) (bx1@@42 T@U) (bx2@@26 T@U) ) (!  (=> (and (and (and (and (= (type h@@51) (MapType0Type refType MapType1Type)) (= (type bx0@@58) BoxType)) (= (type bx1@@42) BoxType)) (= (type bx2@@26) BoxType)) (and (and ($IsGoodHeap h@@51) (and (and ($IsBox bx0@@58 t0@@83) ($IsBox bx1@@42 t1@@59)) ($IsBox bx2@@26 t2@@40))) (Requires3 t0@@83 t1@@59 t2@@40 t3@@25 h@@51 f@@61 bx0@@58 bx1@@42 bx2@@26))) ($IsBox (Apply3 t0@@83 t1@@59 t2@@40 t3@@25 h@@51 f@@61 bx0@@58 bx1@@42 bx2@@26) t3@@25)) :qid |DafnyPre.521:12| :skolemid |8620| :pattern ( (Apply3 t0@@83 t1@@59 t2@@40 t3@@25 h@@51 f@@61 bx0@@58 bx1@@42 bx2@@26)) ))) (=> (forall ((h@@52 T@U) (bx0@@59 T@U) (bx1@@43 T@U) (bx2@@27 T@U) ) (!  (=> (and (and (and (and (= (type h@@52) (MapType0Type refType MapType1Type)) (= (type bx0@@59) BoxType)) (= (type bx1@@43) BoxType)) (= (type bx2@@27) BoxType)) (and (and ($IsGoodHeap h@@52) (and (and ($IsBox bx0@@59 t0@@83) ($IsBox bx1@@43 t1@@59)) ($IsBox bx2@@27 t2@@40))) (Requires3 t0@@83 t1@@59 t2@@40 t3@@25 h@@52 f@@61 bx0@@59 bx1@@43 bx2@@27))) ($IsBox (Apply3 t0@@83 t1@@59 t2@@40 t3@@25 h@@52 f@@61 bx0@@59 bx1@@43 bx2@@27) t3@@25)) :qid |DafnyPre.521:12| :skolemid |8620| :pattern ( (Apply3 t0@@83 t1@@59 t2@@40 t3@@25 h@@52 f@@61 bx0@@59 bx1@@43 bx2@@27)) )) ($Is f@@61 (Tclass._System.___hFunc3 t0@@83 t1@@59 t2@@40 t3@@25))))) :qid |unknown.0:0| :skolemid |8621| :pattern ( ($Is f@@61 (Tclass._System.___hFunc3 t0@@83 t1@@59 t2@@40 t3@@25))) )))
(assert (forall ((f@@62 T@U) (t0@@84 T@U) (t1@@60 T@U) (t2@@41 T@U) (t3@@26 T@U) (u0@@3 T@U) (u1@@2 T@U) (u2@@1 T@U) (u3@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@62) HandleTypeType) (= (type t0@@84) TyType)) (= (type t1@@60) TyType)) (= (type t2@@41) TyType)) (= (type t3@@26) TyType)) (= (type u0@@3) TyType)) (= (type u1@@2) TyType)) (= (type u2@@1) TyType)) (= (type u3@@0) TyType)) (and (and (and (and ($Is f@@62 (Tclass._System.___hFunc3 t0@@84 t1@@60 t2@@41 t3@@26)) (forall ((bx@@70 T@U) ) (!  (=> (and (= (type bx@@70) BoxType) ($IsBox bx@@70 u0@@3)) ($IsBox bx@@70 t0@@84)) :qid |unknown.0:0| :skolemid |8622| :pattern ( ($IsBox bx@@70 u0@@3)) :pattern ( ($IsBox bx@@70 t0@@84)) ))) (forall ((bx@@71 T@U) ) (!  (=> (and (= (type bx@@71) BoxType) ($IsBox bx@@71 u1@@2)) ($IsBox bx@@71 t1@@60)) :qid |unknown.0:0| :skolemid |8623| :pattern ( ($IsBox bx@@71 u1@@2)) :pattern ( ($IsBox bx@@71 t1@@60)) ))) (forall ((bx@@72 T@U) ) (!  (=> (and (= (type bx@@72) BoxType) ($IsBox bx@@72 u2@@1)) ($IsBox bx@@72 t2@@41)) :qid |unknown.0:0| :skolemid |8624| :pattern ( ($IsBox bx@@72 u2@@1)) :pattern ( ($IsBox bx@@72 t2@@41)) ))) (forall ((bx@@73 T@U) ) (!  (=> (and (= (type bx@@73) BoxType) ($IsBox bx@@73 t3@@26)) ($IsBox bx@@73 u3@@0)) :qid |unknown.0:0| :skolemid |8625| :pattern ( ($IsBox bx@@73 t3@@26)) :pattern ( ($IsBox bx@@73 u3@@0)) )))) ($Is f@@62 (Tclass._System.___hFunc3 u0@@3 u1@@2 u2@@1 u3@@0))) :qid |unknown.0:0| :skolemid |8626| :pattern ( ($Is f@@62 (Tclass._System.___hFunc3 t0@@84 t1@@60 t2@@41 t3@@26)) ($Is f@@62 (Tclass._System.___hFunc3 u0@@3 u1@@2 u2@@1 u3@@0))) )))
(assert (forall ((f@@63 T@U) (t0@@85 T@U) (t1@@61 T@U) (t2@@42 T@U) (t3@@27 T@U) (h@@53 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@63) HandleTypeType) (= (type t0@@85) TyType)) (= (type t1@@61) TyType)) (= (type t2@@42) TyType)) (= (type t3@@27) TyType)) (= (type h@@53) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@53)) (and (=> ($IsAlloc f@@63 (Tclass._System.___hFunc3 t0@@85 t1@@61 t2@@42 t3@@27) h@@53) (forall ((bx0@@60 T@U) (bx1@@44 T@U) (bx2@@28 T@U) ) (!  (=> (and (and (= (type bx0@@60) BoxType) (= (type bx1@@44) BoxType)) (= (type bx2@@28) BoxType)) (=> (and (and (and (and ($IsBox bx0@@60 t0@@85) ($IsAllocBox bx0@@60 t0@@85 h@@53)) (and ($IsBox bx1@@44 t1@@61) ($IsAllocBox bx1@@44 t1@@61 h@@53))) (and ($IsBox bx2@@28 t2@@42) ($IsAllocBox bx2@@28 t2@@42 h@@53))) (Requires3 t0@@85 t1@@61 t2@@42 t3@@27 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28)) (forall ((r@@29 T@U) ) (!  (=> (= (type r@@29) refType) (=> (and (not (= r@@29 null)) (U_2_bool (MapType0Select (Reads3 t0@@85 t1@@61 t2@@42 t3@@27 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28) ($Box r@@29)))) (U_2_bool (MapType1Select (MapType0Select h@@53 r@@29) alloc)))) :qid |unknown.0:0| :skolemid |8627| :pattern ( (MapType0Select (Reads3 t0@@85 t1@@61 t2@@42 t3@@27 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28) ($Box r@@29))) )))) :qid |unknown.0:0| :skolemid |8628| :pattern ( (Apply3 t0@@85 t1@@61 t2@@42 t3@@27 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28)) :pattern ( (Reads3 t0@@85 t1@@61 t2@@42 t3@@27 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28)) ))) (=> (forall ((bx0@@61 T@U) (bx1@@45 T@U) (bx2@@29 T@U) ) (!  (=> (and (and (= (type bx0@@61) BoxType) (= (type bx1@@45) BoxType)) (= (type bx2@@29) BoxType)) (=> (and (and (and (and ($IsBox bx0@@61 t0@@85) ($IsAllocBox bx0@@61 t0@@85 h@@53)) (and ($IsBox bx1@@45 t1@@61) ($IsAllocBox bx1@@45 t1@@61 h@@53))) (and ($IsBox bx2@@29 t2@@42) ($IsAllocBox bx2@@29 t2@@42 h@@53))) (Requires3 t0@@85 t1@@61 t2@@42 t3@@27 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29)) (forall ((r@@30 T@U) ) (!  (=> (= (type r@@30) refType) (=> (and (not (= r@@30 null)) (U_2_bool (MapType0Select (Reads3 t0@@85 t1@@61 t2@@42 t3@@27 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29) ($Box r@@30)))) (U_2_bool (MapType1Select (MapType0Select h@@53 r@@30) alloc)))) :qid |unknown.0:0| :skolemid |8627| :pattern ( (MapType0Select (Reads3 t0@@85 t1@@61 t2@@42 t3@@27 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29) ($Box r@@30))) )))) :qid |unknown.0:0| :skolemid |8628| :pattern ( (Apply3 t0@@85 t1@@61 t2@@42 t3@@27 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29)) :pattern ( (Reads3 t0@@85 t1@@61 t2@@42 t3@@27 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29)) )) ($IsAlloc f@@63 (Tclass._System.___hFunc3 t0@@85 t1@@61 t2@@42 t3@@27) h@@53)))) :qid |unknown.0:0| :skolemid |8629| :pattern ( ($IsAlloc f@@63 (Tclass._System.___hFunc3 t0@@85 t1@@61 t2@@42 t3@@27) h@@53)) )))
(assert (forall ((f@@64 T@U) (t0@@86 T@U) (t1@@62 T@U) (t2@@43 T@U) (t3@@28 T@U) (h@@54 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@64) HandleTypeType) (= (type t0@@86) TyType)) (= (type t1@@62) TyType)) (= (type t2@@43) TyType)) (= (type t3@@28) TyType)) (= (type h@@54) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@54) ($IsAlloc f@@64 (Tclass._System.___hFunc3 t0@@86 t1@@62 t2@@43 t3@@28) h@@54))) (forall ((bx0@@62 T@U) (bx1@@46 T@U) (bx2@@30 T@U) ) (!  (=> (and (and (= (type bx0@@62) BoxType) (= (type bx1@@46) BoxType)) (= (type bx2@@30) BoxType)) (=> (and (and (and ($IsAllocBox bx0@@62 t0@@86 h@@54) ($IsAllocBox bx1@@46 t1@@62 h@@54)) ($IsAllocBox bx2@@30 t2@@43 h@@54)) (Requires3 t0@@86 t1@@62 t2@@43 t3@@28 h@@54 f@@64 bx0@@62 bx1@@46 bx2@@30)) ($IsAllocBox (Apply3 t0@@86 t1@@62 t2@@43 t3@@28 h@@54 f@@64 bx0@@62 bx1@@46 bx2@@30) t3@@28 h@@54))) :qid |unknown.0:0| :skolemid |8630| :pattern ( (Apply3 t0@@86 t1@@62 t2@@43 t3@@28 h@@54 f@@64 bx0@@62 bx1@@46 bx2@@30)) ))) :qid |unknown.0:0| :skolemid |8631| :pattern ( ($IsAlloc f@@64 (Tclass._System.___hFunc3 t0@@86 t1@@62 t2@@43 t3@@28) h@@54)) )))
(assert (forall ((arg0@@207 T@U) (arg1@@103 T@U) (arg2@@59 T@U) (arg3@@37 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3 arg0@@207 arg1@@103 arg2@@59 arg3@@37)) TyType) :qid |funType:Tclass._System.___hPartialFunc3| :pattern ( (Tclass._System.___hPartialFunc3 arg0@@207 arg1@@103 arg2@@59 arg3@@37)) )))
(assert (forall ((|#$T0@@74| T@U) (|#$T1@@58| T@U) (|#$T2@@30| T@U) (|#$R@@78| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@74|) TyType) (= (type |#$T1@@58|) TyType)) (= (type |#$T2@@30|) TyType)) (= (type |#$R@@78|) TyType)) (= (Tag (Tclass._System.___hPartialFunc3 |#$T0@@74| |#$T1@@58| |#$T2@@30| |#$R@@78|)) Tagclass._System.___hPartialFunc3)) :qid |unknown.0:0| :skolemid |8632| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@74| |#$T1@@58| |#$T2@@30| |#$R@@78|)) )))
(assert (forall ((arg0@@208 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_0 arg0@@208)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_0| :pattern ( (Tclass._System.___hPartialFunc3_0 arg0@@208)) )))
(assert (forall ((|#$T0@@75| T@U) (|#$T1@@59| T@U) (|#$T2@@31| T@U) (|#$R@@79| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@75|) TyType) (= (type |#$T1@@59|) TyType)) (= (type |#$T2@@31|) TyType)) (= (type |#$R@@79|) TyType)) (= (Tclass._System.___hPartialFunc3_0 (Tclass._System.___hPartialFunc3 |#$T0@@75| |#$T1@@59| |#$T2@@31| |#$R@@79|)) |#$T0@@75|)) :qid |unknown.0:0| :skolemid |8633| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@75| |#$T1@@59| |#$T2@@31| |#$R@@79|)) )))
(assert (forall ((arg0@@209 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_1 arg0@@209)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_1| :pattern ( (Tclass._System.___hPartialFunc3_1 arg0@@209)) )))
(assert (forall ((|#$T0@@76| T@U) (|#$T1@@60| T@U) (|#$T2@@32| T@U) (|#$R@@80| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@76|) TyType) (= (type |#$T1@@60|) TyType)) (= (type |#$T2@@32|) TyType)) (= (type |#$R@@80|) TyType)) (= (Tclass._System.___hPartialFunc3_1 (Tclass._System.___hPartialFunc3 |#$T0@@76| |#$T1@@60| |#$T2@@32| |#$R@@80|)) |#$T1@@60|)) :qid |unknown.0:0| :skolemid |8634| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@76| |#$T1@@60| |#$T2@@32| |#$R@@80|)) )))
(assert (forall ((arg0@@210 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_2 arg0@@210)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_2| :pattern ( (Tclass._System.___hPartialFunc3_2 arg0@@210)) )))
(assert (forall ((|#$T0@@77| T@U) (|#$T1@@61| T@U) (|#$T2@@33| T@U) (|#$R@@81| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@77|) TyType) (= (type |#$T1@@61|) TyType)) (= (type |#$T2@@33|) TyType)) (= (type |#$R@@81|) TyType)) (= (Tclass._System.___hPartialFunc3_2 (Tclass._System.___hPartialFunc3 |#$T0@@77| |#$T1@@61| |#$T2@@33| |#$R@@81|)) |#$T2@@33|)) :qid |unknown.0:0| :skolemid |8635| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@77| |#$T1@@61| |#$T2@@33| |#$R@@81|)) )))
(assert (forall ((arg0@@211 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_3 arg0@@211)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_3| :pattern ( (Tclass._System.___hPartialFunc3_3 arg0@@211)) )))
(assert (forall ((|#$T0@@78| T@U) (|#$T1@@62| T@U) (|#$T2@@34| T@U) (|#$R@@82| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@78|) TyType) (= (type |#$T1@@62|) TyType)) (= (type |#$T2@@34|) TyType)) (= (type |#$R@@82|) TyType)) (= (Tclass._System.___hPartialFunc3_3 (Tclass._System.___hPartialFunc3 |#$T0@@78| |#$T1@@62| |#$T2@@34| |#$R@@82|)) |#$R@@82|)) :qid |unknown.0:0| :skolemid |8636| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@78| |#$T1@@62| |#$T2@@34| |#$R@@82|)) )))
(assert (forall ((|#$T0@@79| T@U) (|#$T1@@63| T@U) (|#$T2@@35| T@U) (|#$R@@83| T@U) (bx@@74 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@79|) TyType) (= (type |#$T1@@63|) TyType)) (= (type |#$T2@@35|) TyType)) (= (type |#$R@@83|) TyType)) (= (type bx@@74) BoxType)) ($IsBox bx@@74 (Tclass._System.___hPartialFunc3 |#$T0@@79| |#$T1@@63| |#$T2@@35| |#$R@@83|))) (and (= ($Box ($Unbox HandleTypeType bx@@74)) bx@@74) ($Is ($Unbox HandleTypeType bx@@74) (Tclass._System.___hPartialFunc3 |#$T0@@79| |#$T1@@63| |#$T2@@35| |#$R@@83|)))) :qid |unknown.0:0| :skolemid |8637| :pattern ( ($IsBox bx@@74 (Tclass._System.___hPartialFunc3 |#$T0@@79| |#$T1@@63| |#$T2@@35| |#$R@@83|))) )))
(assert (forall ((|#$T0@@80| T@U) (|#$T1@@64| T@U) (|#$T2@@36| T@U) (|#$R@@84| T@U) (|f#0@@15| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@80|) TyType) (= (type |#$T1@@64|) TyType)) (= (type |#$T2@@36|) TyType)) (= (type |#$R@@84|) TyType)) (= (type |f#0@@15|) HandleTypeType)) (and (=> ($Is |f#0@@15| (Tclass._System.___hPartialFunc3 |#$T0@@80| |#$T1@@64| |#$T2@@36| |#$R@@84|)) (and ($Is |f#0@@15| (Tclass._System.___hFunc3 |#$T0@@80| |#$T1@@64| |#$T2@@36| |#$R@@84|)) (forall ((|x0#0@@11| T@U) (|x1#0@@7| T@U) (|x2#0@@3| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@11|) BoxType) (= (type |x1#0@@7|) BoxType)) (= (type |x2#0@@3|) BoxType)) (and (and ($IsBox |x0#0@@11| |#$T0@@80|) ($IsBox |x1#0@@7| |#$T1@@64|)) ($IsBox |x2#0@@3| |#$T2@@36|))) (|Set#Equal| (Reads3 |#$T0@@80| |#$T1@@64| |#$T2@@36| |#$R@@84| $OneHeap |f#0@@15| |x0#0@@11| |x1#0@@7| |x2#0@@3|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |8638| :no-pattern (type |x0#0@@11|) :no-pattern (type |x1#0@@7|) :no-pattern (type |x2#0@@3|) :no-pattern (U_2_int |x0#0@@11|) :no-pattern (U_2_bool |x0#0@@11|) :no-pattern (U_2_int |x1#0@@7|) :no-pattern (U_2_bool |x1#0@@7|) :no-pattern (U_2_int |x2#0@@3|) :no-pattern (U_2_bool |x2#0@@3|) )))) (=> (and ($Is |f#0@@15| (Tclass._System.___hFunc3 |#$T0@@80| |#$T1@@64| |#$T2@@36| |#$R@@84|)) (forall ((|x0#0@@12| T@U) (|x1#0@@8| T@U) (|x2#0@@4| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@12|) BoxType) (= (type |x1#0@@8|) BoxType)) (= (type |x2#0@@4|) BoxType)) (and (and ($IsBox |x0#0@@12| |#$T0@@80|) ($IsBox |x1#0@@8| |#$T1@@64|)) ($IsBox |x2#0@@4| |#$T2@@36|))) (|Set#Equal| (Reads3 |#$T0@@80| |#$T1@@64| |#$T2@@36| |#$R@@84| $OneHeap |f#0@@15| |x0#0@@12| |x1#0@@8| |x2#0@@4|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |8638| :no-pattern (type |x0#0@@12|) :no-pattern (type |x1#0@@8|) :no-pattern (type |x2#0@@4|) :no-pattern (U_2_int |x0#0@@12|) :no-pattern (U_2_bool |x0#0@@12|) :no-pattern (U_2_int |x1#0@@8|) :no-pattern (U_2_bool |x1#0@@8|) :no-pattern (U_2_int |x2#0@@4|) :no-pattern (U_2_bool |x2#0@@4|) ))) ($Is |f#0@@15| (Tclass._System.___hPartialFunc3 |#$T0@@80| |#$T1@@64| |#$T2@@36| |#$R@@84|))))) :qid |unknown.0:0| :skolemid |8639| :pattern ( ($Is |f#0@@15| (Tclass._System.___hPartialFunc3 |#$T0@@80| |#$T1@@64| |#$T2@@36| |#$R@@84|))) )))
(assert (forall ((|#$T0@@81| T@U) (|#$T1@@65| T@U) (|#$T2@@37| T@U) (|#$R@@85| T@U) (|f#0@@16| T@U) ($h@@19 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@81|) TyType) (= (type |#$T1@@65|) TyType)) (= (type |#$T2@@37|) TyType)) (= (type |#$R@@85|) TyType)) (= (type |f#0@@16|) HandleTypeType)) (= (type $h@@19) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc3 |#$T0@@81| |#$T1@@65| |#$T2@@37| |#$R@@85|) $h@@19) ($IsAlloc |f#0@@16| (Tclass._System.___hFunc3 |#$T0@@81| |#$T1@@65| |#$T2@@37| |#$R@@85|) $h@@19)) (=> ($IsAlloc |f#0@@16| (Tclass._System.___hFunc3 |#$T0@@81| |#$T1@@65| |#$T2@@37| |#$R@@85|) $h@@19) ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc3 |#$T0@@81| |#$T1@@65| |#$T2@@37| |#$R@@85|) $h@@19)))) :qid |unknown.0:0| :skolemid |8640| :pattern ( ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc3 |#$T0@@81| |#$T1@@65| |#$T2@@37| |#$R@@85|) $h@@19)) )))
(assert (forall ((arg0@@212 T@U) (arg1@@104 T@U) (arg2@@60 T@U) (arg3@@38 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3 arg0@@212 arg1@@104 arg2@@60 arg3@@38)) TyType) :qid |funType:Tclass._System.___hTotalFunc3| :pattern ( (Tclass._System.___hTotalFunc3 arg0@@212 arg1@@104 arg2@@60 arg3@@38)) )))
(assert (forall ((|#$T0@@82| T@U) (|#$T1@@66| T@U) (|#$T2@@38| T@U) (|#$R@@86| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@82|) TyType) (= (type |#$T1@@66|) TyType)) (= (type |#$T2@@38|) TyType)) (= (type |#$R@@86|) TyType)) (= (Tag (Tclass._System.___hTotalFunc3 |#$T0@@82| |#$T1@@66| |#$T2@@38| |#$R@@86|)) Tagclass._System.___hTotalFunc3)) :qid |unknown.0:0| :skolemid |8641| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@82| |#$T1@@66| |#$T2@@38| |#$R@@86|)) )))
(assert (forall ((arg0@@213 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_0 arg0@@213)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_0| :pattern ( (Tclass._System.___hTotalFunc3_0 arg0@@213)) )))
(assert (forall ((|#$T0@@83| T@U) (|#$T1@@67| T@U) (|#$T2@@39| T@U) (|#$R@@87| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@83|) TyType) (= (type |#$T1@@67|) TyType)) (= (type |#$T2@@39|) TyType)) (= (type |#$R@@87|) TyType)) (= (Tclass._System.___hTotalFunc3_0 (Tclass._System.___hTotalFunc3 |#$T0@@83| |#$T1@@67| |#$T2@@39| |#$R@@87|)) |#$T0@@83|)) :qid |unknown.0:0| :skolemid |8642| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@83| |#$T1@@67| |#$T2@@39| |#$R@@87|)) )))
(assert (forall ((arg0@@214 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_1 arg0@@214)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_1| :pattern ( (Tclass._System.___hTotalFunc3_1 arg0@@214)) )))
(assert (forall ((|#$T0@@84| T@U) (|#$T1@@68| T@U) (|#$T2@@40| T@U) (|#$R@@88| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@84|) TyType) (= (type |#$T1@@68|) TyType)) (= (type |#$T2@@40|) TyType)) (= (type |#$R@@88|) TyType)) (= (Tclass._System.___hTotalFunc3_1 (Tclass._System.___hTotalFunc3 |#$T0@@84| |#$T1@@68| |#$T2@@40| |#$R@@88|)) |#$T1@@68|)) :qid |unknown.0:0| :skolemid |8643| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@84| |#$T1@@68| |#$T2@@40| |#$R@@88|)) )))
(assert (forall ((arg0@@215 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_2 arg0@@215)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_2| :pattern ( (Tclass._System.___hTotalFunc3_2 arg0@@215)) )))
(assert (forall ((|#$T0@@85| T@U) (|#$T1@@69| T@U) (|#$T2@@41| T@U) (|#$R@@89| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@85|) TyType) (= (type |#$T1@@69|) TyType)) (= (type |#$T2@@41|) TyType)) (= (type |#$R@@89|) TyType)) (= (Tclass._System.___hTotalFunc3_2 (Tclass._System.___hTotalFunc3 |#$T0@@85| |#$T1@@69| |#$T2@@41| |#$R@@89|)) |#$T2@@41|)) :qid |unknown.0:0| :skolemid |8644| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@85| |#$T1@@69| |#$T2@@41| |#$R@@89|)) )))
(assert (forall ((arg0@@216 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_3 arg0@@216)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_3| :pattern ( (Tclass._System.___hTotalFunc3_3 arg0@@216)) )))
(assert (forall ((|#$T0@@86| T@U) (|#$T1@@70| T@U) (|#$T2@@42| T@U) (|#$R@@90| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@86|) TyType) (= (type |#$T1@@70|) TyType)) (= (type |#$T2@@42|) TyType)) (= (type |#$R@@90|) TyType)) (= (Tclass._System.___hTotalFunc3_3 (Tclass._System.___hTotalFunc3 |#$T0@@86| |#$T1@@70| |#$T2@@42| |#$R@@90|)) |#$R@@90|)) :qid |unknown.0:0| :skolemid |8645| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@86| |#$T1@@70| |#$T2@@42| |#$R@@90|)) )))
(assert (forall ((|#$T0@@87| T@U) (|#$T1@@71| T@U) (|#$T2@@43| T@U) (|#$R@@91| T@U) (bx@@75 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@87|) TyType) (= (type |#$T1@@71|) TyType)) (= (type |#$T2@@43|) TyType)) (= (type |#$R@@91|) TyType)) (= (type bx@@75) BoxType)) ($IsBox bx@@75 (Tclass._System.___hTotalFunc3 |#$T0@@87| |#$T1@@71| |#$T2@@43| |#$R@@91|))) (and (= ($Box ($Unbox HandleTypeType bx@@75)) bx@@75) ($Is ($Unbox HandleTypeType bx@@75) (Tclass._System.___hTotalFunc3 |#$T0@@87| |#$T1@@71| |#$T2@@43| |#$R@@91|)))) :qid |unknown.0:0| :skolemid |8646| :pattern ( ($IsBox bx@@75 (Tclass._System.___hTotalFunc3 |#$T0@@87| |#$T1@@71| |#$T2@@43| |#$R@@91|))) )))
(assert (forall ((|#$T0@@88| T@U) (|#$T1@@72| T@U) (|#$T2@@44| T@U) (|#$R@@92| T@U) (|f#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@88|) TyType) (= (type |#$T1@@72|) TyType)) (= (type |#$T2@@44|) TyType)) (= (type |#$R@@92|) TyType)) (= (type |f#0@@17|) HandleTypeType)) (and (=> ($Is |f#0@@17| (Tclass._System.___hTotalFunc3 |#$T0@@88| |#$T1@@72| |#$T2@@44| |#$R@@92|)) (and ($Is |f#0@@17| (Tclass._System.___hPartialFunc3 |#$T0@@88| |#$T1@@72| |#$T2@@44| |#$R@@92|)) (forall ((|x0#0@@13| T@U) (|x1#0@@9| T@U) (|x2#0@@5| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@13|) BoxType) (= (type |x1#0@@9|) BoxType)) (= (type |x2#0@@5|) BoxType)) (and (and ($IsBox |x0#0@@13| |#$T0@@88|) ($IsBox |x1#0@@9| |#$T1@@72|)) ($IsBox |x2#0@@5| |#$T2@@44|))) (Requires3 |#$T0@@88| |#$T1@@72| |#$T2@@44| |#$R@@92| $OneHeap |f#0@@17| |x0#0@@13| |x1#0@@9| |x2#0@@5|)) :qid |unknown.0:0| :skolemid |8647| :no-pattern (type |x0#0@@13|) :no-pattern (type |x1#0@@9|) :no-pattern (type |x2#0@@5|) :no-pattern (U_2_int |x0#0@@13|) :no-pattern (U_2_bool |x0#0@@13|) :no-pattern (U_2_int |x1#0@@9|) :no-pattern (U_2_bool |x1#0@@9|) :no-pattern (U_2_int |x2#0@@5|) :no-pattern (U_2_bool |x2#0@@5|) )))) (=> (and ($Is |f#0@@17| (Tclass._System.___hPartialFunc3 |#$T0@@88| |#$T1@@72| |#$T2@@44| |#$R@@92|)) (forall ((|x0#0@@14| T@U) (|x1#0@@10| T@U) (|x2#0@@6| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@14|) BoxType) (= (type |x1#0@@10|) BoxType)) (= (type |x2#0@@6|) BoxType)) (and (and ($IsBox |x0#0@@14| |#$T0@@88|) ($IsBox |x1#0@@10| |#$T1@@72|)) ($IsBox |x2#0@@6| |#$T2@@44|))) (Requires3 |#$T0@@88| |#$T1@@72| |#$T2@@44| |#$R@@92| $OneHeap |f#0@@17| |x0#0@@14| |x1#0@@10| |x2#0@@6|)) :qid |unknown.0:0| :skolemid |8647| :no-pattern (type |x0#0@@14|) :no-pattern (type |x1#0@@10|) :no-pattern (type |x2#0@@6|) :no-pattern (U_2_int |x0#0@@14|) :no-pattern (U_2_bool |x0#0@@14|) :no-pattern (U_2_int |x1#0@@10|) :no-pattern (U_2_bool |x1#0@@10|) :no-pattern (U_2_int |x2#0@@6|) :no-pattern (U_2_bool |x2#0@@6|) ))) ($Is |f#0@@17| (Tclass._System.___hTotalFunc3 |#$T0@@88| |#$T1@@72| |#$T2@@44| |#$R@@92|))))) :qid |unknown.0:0| :skolemid |8648| :pattern ( ($Is |f#0@@17| (Tclass._System.___hTotalFunc3 |#$T0@@88| |#$T1@@72| |#$T2@@44| |#$R@@92|))) )))
(assert (forall ((|#$T0@@89| T@U) (|#$T1@@73| T@U) (|#$T2@@45| T@U) (|#$R@@93| T@U) (|f#0@@18| T@U) ($h@@20 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@89|) TyType) (= (type |#$T1@@73|) TyType)) (= (type |#$T2@@45|) TyType)) (= (type |#$R@@93|) TyType)) (= (type |f#0@@18|) HandleTypeType)) (= (type $h@@20) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc3 |#$T0@@89| |#$T1@@73| |#$T2@@45| |#$R@@93|) $h@@20) ($IsAlloc |f#0@@18| (Tclass._System.___hPartialFunc3 |#$T0@@89| |#$T1@@73| |#$T2@@45| |#$R@@93|) $h@@20)) (=> ($IsAlloc |f#0@@18| (Tclass._System.___hPartialFunc3 |#$T0@@89| |#$T1@@73| |#$T2@@45| |#$R@@93|) $h@@20) ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc3 |#$T0@@89| |#$T1@@73| |#$T2@@45| |#$R@@93|) $h@@20)))) :qid |unknown.0:0| :skolemid |8649| :pattern ( ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc3 |#$T0@@89| |#$T1@@73| |#$T2@@45| |#$R@@93|) $h@@20)) )))
(assert (= (type |#_System._tuple#0._#Make0|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_System._tuple#0._#Make0|) |##_System._tuple#0._#Make0|))
(assert (forall ((d@@6 T@U) ) (!  (=> (= (type d@@6) DatatypeTypeType) (and (=> (_System.Tuple0.___hMake0_q d@@6) (= (DatatypeCtorId d@@6) |##_System._tuple#0._#Make0|)) (=> (= (DatatypeCtorId d@@6) |##_System._tuple#0._#Make0|) (_System.Tuple0.___hMake0_q d@@6)))) :qid |unknown.0:0| :skolemid |8650| :pattern ( (_System.Tuple0.___hMake0_q d@@6)) )))
(assert (forall ((d@@7 T@U) ) (!  (=> (and (= (type d@@7) DatatypeTypeType) (_System.Tuple0.___hMake0_q d@@7)) (= d@@7 |#_System._tuple#0._#Make0|)) :qid |unknown.0:0| :skolemid |8651| :pattern ( (_System.Tuple0.___hMake0_q d@@7)) )))
(assert (= (type Tclass._System.Tuple0) TyType))
(assert (= (Tag Tclass._System.Tuple0) Tagclass._System.Tuple0))
(assert (forall ((bx@@76 T@U) ) (!  (=> (and (= (type bx@@76) BoxType) ($IsBox bx@@76 Tclass._System.Tuple0)) (and (= ($Box ($Unbox DatatypeTypeType bx@@76)) bx@@76) ($Is ($Unbox DatatypeTypeType bx@@76) Tclass._System.Tuple0))) :qid |unknown.0:0| :skolemid |8652| :pattern ( ($IsBox bx@@76 Tclass._System.Tuple0)) )))
(assert ($Is |#_System._tuple#0._#Make0| Tclass._System.Tuple0))
(assert (forall (($h@@21 T@U) ) (!  (=> (and (= (type $h@@21) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@21)) ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@21)) :qid |DafnyPre.521:12| :skolemid |8653| :pattern ( ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@21)) )))
(assert (= |#_System._tuple#0._#Make0| (Lit |#_System._tuple#0._#Make0|)))
(assert (forall ((d@@8 T@U) ) (!  (=> (and (= (type d@@8) DatatypeTypeType) (|$IsA#_System.Tuple0| d@@8)) (_System.Tuple0.___hMake0_q d@@8)) :qid |unknown.0:0| :skolemid |8654| :pattern ( (|$IsA#_System.Tuple0| d@@8)) )))
(assert (forall ((d@@9 T@U) ) (!  (=> (and (= (type d@@9) DatatypeTypeType) ($Is d@@9 Tclass._System.Tuple0)) (_System.Tuple0.___hMake0_q d@@9)) :qid |unknown.0:0| :skolemid |8655| :pattern ( (_System.Tuple0.___hMake0_q d@@9) ($Is d@@9 Tclass._System.Tuple0)) )))
(assert (forall ((a@@114 T@U) (b@@63 T@U) ) (!  (=> (and (and (= (type a@@114) DatatypeTypeType) (= (type b@@63) DatatypeTypeType)) true) (and (=> (|_System.Tuple0#Equal| a@@114 b@@63) true) (=> true (|_System.Tuple0#Equal| a@@114 b@@63)))) :qid |unknown.0:0| :skolemid |8656| :pattern ( (|_System.Tuple0#Equal| a@@114 b@@63)) )))
(assert (forall ((a@@115 T@U) (b@@64 T@U) ) (!  (=> (and (= (type a@@115) DatatypeTypeType) (= (type b@@64) DatatypeTypeType)) (and (=> (|_System.Tuple0#Equal| a@@115 b@@64) (= a@@115 b@@64)) (=> (= a@@115 b@@64) (|_System.Tuple0#Equal| a@@115 b@@64)))) :qid |unknown.0:0| :skolemid |8657| :pattern ( (|_System.Tuple0#Equal| a@@115 b@@64)) )))
(assert (= (type Tclass.Char__Order.__default) TyType))
(assert (= (Tag Tclass.Char__Order.__default) Tagclass.Char__Order.__default))
(assert (forall ((bx@@77 T@U) ) (!  (=> (and (= (type bx@@77) BoxType) ($IsBox bx@@77 Tclass.Char__Order.__default)) (and (= ($Box ($Unbox refType bx@@77)) bx@@77) ($Is ($Unbox refType bx@@77) Tclass.Char__Order.__default))) :qid |unknown.0:0| :skolemid |8658| :pattern ( ($IsBox bx@@77 Tclass.Char__Order.__default)) )))
(assert (forall (($o@@9 T@U) ) (!  (=> (= (type $o@@9) refType) (and (=> ($Is $o@@9 Tclass.Char__Order.__default) (or (= $o@@9 null) (= (dtype $o@@9) Tclass.Char__Order.__default))) (=> (or (= $o@@9 null) (= (dtype $o@@9) Tclass.Char__Order.__default)) ($Is $o@@9 Tclass.Char__Order.__default)))) :qid |unknown.0:0| :skolemid |8659| :pattern ( ($Is $o@@9 Tclass.Char__Order.__default)) )))
(assert (forall (($o@@10 T@U) ($h@@22 T@U) ) (!  (=> (and (= (type $o@@10) refType) (= (type $h@@22) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@10 Tclass.Char__Order.__default $h@@22) (or (= $o@@10 null) (U_2_bool (MapType1Select (MapType0Select $h@@22 $o@@10) alloc)))) (=> (or (= $o@@10 null) (U_2_bool (MapType1Select (MapType0Select $h@@22 $o@@10) alloc))) ($IsAlloc $o@@10 Tclass.Char__Order.__default $h@@22)))) :qid |unknown.0:0| :skolemid |8660| :pattern ( ($IsAlloc $o@@10 Tclass.Char__Order.__default $h@@22)) )))
(assert (= (type Char__Order.__default.SomeElement) charType))
(assert  (=> (<= 1 $FunctionContextHeight) (=> (or |Char__Order.__default.SomeElement#canCall| (not (= 1 $FunctionContextHeight))) ($Is Char__Order.__default.SomeElement TChar))))
(assert  (=> |Char__Order.__default.SomeElement#requires| true))
(assert  (=> true |Char__Order.__default.SomeElement#requires|))
(assert  (=> (<= 1 $FunctionContextHeight) (=> (or |Char__Order.__default.SomeElement#canCall| (not (= 1 $FunctionContextHeight))) (= Char__Order.__default.SomeElement (Lit (|char#FromInt| 0))))))
(assert  (=> (<= 1 $FunctionContextHeight) (=> (or |Char__Order.__default.SomeElement#canCall| (not (= 1 $FunctionContextHeight))) (= Char__Order.__default.SomeElement (Lit (|char#FromInt| 0))))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((|a#0@@1| T@U) (|b#0@@1| T@U) ) (!  (=> (and (and (= (type |a#0@@1|) charType) (= (type |b#0@@1|) charType)) (or (|Char__Order.__default.lte#canCall| |a#0@@1| |b#0@@1|) (and (not (= 3 $FunctionContextHeight)) (and ($Is |a#0@@1| TChar) ($Is |b#0@@1| TChar))))) (and (and (and (and (and (and (and (=> (Char__Order.__default.lte |a#0@@1| |b#0@@1|) (Char__Order.__default.ltedef |a#0@@1| |b#0@@1|)) (=> (Char__Order.__default.ltedef |a#0@@1| |b#0@@1|) (Char__Order.__default.lte |a#0@@1| |b#0@@1|))) (or (Char__Order.__default.ltedef |a#0@@1| |b#0@@1|) (Char__Order.__default.ltedef |b#0@@1| |a#0@@1|))) (forall ((|a#1| T@U) (|b#1| T@U) (|c#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type |a#1|) charType) (= (type |b#1|) charType)) (= (type |c#0@@3|) charType)) (and (and ($Is |a#1| TChar) ($Is |b#1| TChar)) ($Is |c#0@@3| TChar))) (and (Char__Order.__default.ltedef |a#1| |b#1|) (Char__Order.__default.ltedef |b#1| |c#0@@3|))) (Char__Order.__default.ltedef |a#1| |c#0@@3|)) :qid |totalord.20:18| :skolemid |8661| :pattern ( (Char__Order.__default.ltedef |a#1| |c#0@@3|) (Char__Order.__default.ltedef |b#1| |c#0@@3|)) :pattern ( (Char__Order.__default.ltedef |b#1| |c#0@@3|) (Char__Order.__default.ltedef |a#1| |b#1|)) ))) (and (=> (Char__Order.__default.lte |a#0@@1| |b#0@@1|) (Char__Order.__default.ltedef |a#0@@1| |b#0@@1|)) (=> (Char__Order.__default.ltedef |a#0@@1| |b#0@@1|) (Char__Order.__default.lte |a#0@@1| |b#0@@1|)))) (or (Char__Order.__default.ltedef |a#0@@1| |b#0@@1|) (Char__Order.__default.ltedef |b#0@@1| |a#0@@1|))) (=> (and (Char__Order.__default.ltedef |a#0@@1| |b#0@@1|) (Char__Order.__default.ltedef |b#0@@1| |a#0@@1|)) (= |a#0@@1| |b#0@@1|))) (forall ((|a#2| T@U) (|b#2| T@U) (|c#1| T@U) ) (!  (=> (and (and (and (and (= (type |a#2|) charType) (= (type |b#2|) charType)) (= (type |c#1|) charType)) (and (and ($Is |a#2| TChar) ($Is |b#2| TChar)) ($Is |c#1| TChar))) (and (Char__Order.__default.ltedef |a#2| |b#2|) (Char__Order.__default.ltedef |b#2| |c#1|))) (Char__Order.__default.ltedef |a#2| |c#1|)) :qid |totalord.188:18| :skolemid |8662| :pattern ( (Char__Order.__default.ltedef |a#2| |c#1|) (Char__Order.__default.ltedef |b#2| |c#1|)) :pattern ( (Char__Order.__default.ltedef |b#2| |c#1|) (Char__Order.__default.ltedef |a#2| |b#2|)) )))) :qid |totalord.17:16| :skolemid |8663| :pattern ( (Char__Order.__default.lte |a#0@@1| |b#0@@1|)) ))))
(assert (forall ((|a#0@@2| T@U) (|b#0@@2| T@U) ) (!  (=> (and (and (= (type |a#0@@2|) charType) (= (type |b#0@@2|) charType)) (and ($Is |a#0@@2| TChar) ($Is |b#0@@2| TChar))) (and (=> (|Char__Order.__default.lte#requires| |a#0@@2| |b#0@@2|) true) (=> true (|Char__Order.__default.lte#requires| |a#0@@2| |b#0@@2|)))) :qid |totalord.17:16| :skolemid |8664| :pattern ( (|Char__Order.__default.lte#requires| |a#0@@2| |b#0@@2|)) )))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((|a#0@@3| T@U) (|b#0@@3| T@U) ) (!  (=> (and (and (= (type |a#0@@3|) charType) (= (type |b#0@@3|) charType)) (or (|Char__Order.__default.lte#canCall| |a#0@@3| |b#0@@3|) (and (not (= 3 $FunctionContextHeight)) (and ($Is |a#0@@3| TChar) ($Is |b#0@@3| TChar))))) (and (=> (Char__Order.__default.lte |a#0@@3| |b#0@@3|) (<= (|char#ToInt| |a#0@@3|) (|char#ToInt| |b#0@@3|))) (=> (<= (|char#ToInt| |a#0@@3|) (|char#ToInt| |b#0@@3|)) (Char__Order.__default.lte |a#0@@3| |b#0@@3|)))) :qid |totalord.17:16| :skolemid |8665| :pattern ( (Char__Order.__default.lte |a#0@@3| |b#0@@3|)) ))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((|a#0@@4| T@U) (|b#0@@4| T@U) ) (!  (=> (and (and (= (type |a#0@@4|) charType) (= (type |b#0@@4|) charType)) (or (|Char__Order.__default.lte#canCall| (Lit |a#0@@4|) (Lit |b#0@@4|)) (and (not (= 3 $FunctionContextHeight)) (and ($Is |a#0@@4| TChar) ($Is |b#0@@4| TChar))))) (and (=> (Char__Order.__default.lte (Lit |a#0@@4|) (Lit |b#0@@4|)) (<= (|char#ToInt| (Lit |a#0@@4|)) (|char#ToInt| (Lit |b#0@@4|)))) (=> (<= (|char#ToInt| (Lit |a#0@@4|)) (|char#ToInt| (Lit |b#0@@4|))) (Char__Order.__default.lte (Lit |a#0@@4|) (Lit |b#0@@4|))))) :qid |totalord.17:16| :weight 3 :skolemid |8666| :pattern ( (Char__Order.__default.lte (Lit |a#0@@4|) (Lit |b#0@@4|))) ))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|a#0@@5| T@U) (|b#0@@5| T@U) ) (!  (=> (and (and (= (type |a#0@@5|) charType) (= (type |b#0@@5|) charType)) (or (|Char__Order.__default.ltedef#canCall| |a#0@@5| |b#0@@5|) (and (not (= 2 $FunctionContextHeight)) (and ($Is |a#0@@5| TChar) ($Is |b#0@@5| TChar))))) true) :qid |totalord.22:19| :skolemid |8671| :pattern ( (Char__Order.__default.ltedef |a#0@@5| |b#0@@5|)) ))))
(assert (forall ((|a#0@@6| T@U) (|b#0@@6| T@U) ) (!  (=> (and (and (= (type |a#0@@6|) charType) (= (type |b#0@@6|) charType)) (and ($Is |a#0@@6| TChar) ($Is |b#0@@6| TChar))) (and (=> (|Char__Order.__default.ltedef#requires| |a#0@@6| |b#0@@6|) true) (=> true (|Char__Order.__default.ltedef#requires| |a#0@@6| |b#0@@6|)))) :qid |totalord.22:19| :skolemid |8672| :pattern ( (|Char__Order.__default.ltedef#requires| |a#0@@6| |b#0@@6|)) )))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|a#0@@7| T@U) (|b#0@@7| T@U) ) (!  (=> (and (and (= (type |a#0@@7|) charType) (= (type |b#0@@7|) charType)) (or (|Char__Order.__default.ltedef#canCall| |a#0@@7| |b#0@@7|) (and (not (= 2 $FunctionContextHeight)) (and ($Is |a#0@@7| TChar) ($Is |b#0@@7| TChar))))) (and (=> (Char__Order.__default.ltedef |a#0@@7| |b#0@@7|) (<= (|char#ToInt| |a#0@@7|) (|char#ToInt| |b#0@@7|))) (=> (<= (|char#ToInt| |a#0@@7|) (|char#ToInt| |b#0@@7|)) (Char__Order.__default.ltedef |a#0@@7| |b#0@@7|)))) :qid |totalord.22:19| :skolemid |8673| :pattern ( (Char__Order.__default.ltedef |a#0@@7| |b#0@@7|)) ))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|a#0@@8| T@U) (|b#0@@8| T@U) ) (!  (=> (and (and (= (type |a#0@@8|) charType) (= (type |b#0@@8|) charType)) (or (|Char__Order.__default.ltedef#canCall| (Lit |a#0@@8|) (Lit |b#0@@8|)) (and (not (= 2 $FunctionContextHeight)) (and ($Is |a#0@@8| TChar) ($Is |b#0@@8| TChar))))) (and (=> (Char__Order.__default.ltedef (Lit |a#0@@8|) (Lit |b#0@@8|)) (<= (|char#ToInt| (Lit |a#0@@8|)) (|char#ToInt| (Lit |b#0@@8|)))) (=> (<= (|char#ToInt| (Lit |a#0@@8|)) (|char#ToInt| (Lit |b#0@@8|))) (Char__Order.__default.ltedef (Lit |a#0@@8|) (Lit |b#0@@8|))))) :qid |totalord.22:19| :weight 3 :skolemid |8674| :pattern ( (Char__Order.__default.ltedef (Lit |a#0@@8|) (Lit |b#0@@8|))) ))))
(assert (forall (($ly T@U) (|run#0| T@U) (|needle#0| T@U) ) (!  (=> (and (and (= (type $ly) LayerTypeType) (= (type |run#0|) (SeqType BoxType))) (= (type |needle#0|) charType)) (= (Char__Order.__default.LargestLte ($LS $ly) |run#0| |needle#0|) (Char__Order.__default.LargestLte $ly |run#0| |needle#0|))) :qid |totalord.253:12| :skolemid |8684| :pattern ( (Char__Order.__default.LargestLte ($LS $ly) |run#0| |needle#0|)) )))
(assert  (and (forall ((arg0@@217 T@U) ) (! (= (type (AsFuelBottom arg0@@217)) LayerTypeType) :qid |funType:AsFuelBottom| :pattern ( (AsFuelBottom arg0@@217)) )) (= (type $LZ) LayerTypeType)))
(assert (forall (($ly@@0 T@U) (|run#0@@0| T@U) (|needle#0@@0| T@U) ) (!  (=> (and (and (= (type $ly@@0) LayerTypeType) (= (type |run#0@@0|) (SeqType BoxType))) (= (type |needle#0@@0|) charType)) (= (Char__Order.__default.LargestLte $ly@@0 |run#0@@0| |needle#0@@0|) (Char__Order.__default.LargestLte $LZ |run#0@@0| |needle#0@@0|))) :qid |totalord.253:12| :skolemid |8685| :pattern ( (Char__Order.__default.LargestLte (AsFuelBottom $ly@@0) |run#0@@0| |needle#0@@0|)) )))
(assert (= (type StartFuel_Char_Order._default.IsSorted) LayerTypeType))
(assert  (=> (<= 17 $FunctionContextHeight) (forall (($ly@@1 T@U) (|run#0@@1| T@U) (|needle#0@@1| T@U) ) (!  (=> (and (and (and (= (type $ly@@1) LayerTypeType) (= (type |run#0@@1|) (SeqType BoxType))) (= (type |needle#0@@1|) charType)) (or (|Char__Order.__default.LargestLte#canCall| |run#0@@1| |needle#0@@1|) (and (not (= 17 $FunctionContextHeight)) (and (and ($Is |run#0@@1| (TSeq TChar)) ($Is |needle#0@@1| TChar)) (Char__Order.__default.IsSorted StartFuel_Char_Order._default.IsSorted |run#0@@1|))))) (and (and (and (and (<= (LitInt (- 0 1)) (Char__Order.__default.LargestLte $ly@@1 |run#0@@1| |needle#0@@1|)) (< (Char__Order.__default.LargestLte $ly@@1 |run#0@@1| |needle#0@@1|) (|Seq#Length| |run#0@@1|))) (forall ((|i#0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0|) (<= |i#0| (Char__Order.__default.LargestLte $ly@@1 |run#0@@1| |needle#0@@1|))) (Char__Order.__default.lte ($Unbox charType (|Seq#Index| |run#0@@1| |i#0|)) |needle#0@@1|))) :qid |totalord.256:20| :skolemid |8686| :pattern ( ($Unbox charType (|Seq#Index| |run#0@@1| |i#0|))) ))) (forall ((|i#1| Int) ) (!  (=> true (=> (and (< (Char__Order.__default.LargestLte $ly@@1 |run#0@@1| |needle#0@@1|) |i#1|) (< |i#1| (|Seq#Length| |run#0@@1|))) (Char__Order.__default.lt |needle#0@@1| ($Unbox charType (|Seq#Index| |run#0@@1| |i#1|))))) :qid |totalord.257:20| :skolemid |8687| :pattern ( ($Unbox charType (|Seq#Index| |run#0@@1| |i#1|))) ))) (=> (|Seq#Contains| |run#0@@1| ($Box |needle#0@@1|)) (and (<= (LitInt 0) (Char__Order.__default.LargestLte $ly@@1 |run#0@@1| |needle#0@@1|)) (= ($Unbox charType (|Seq#Index| |run#0@@1| (Char__Order.__default.LargestLte $ly@@1 |run#0@@1| |needle#0@@1|))) |needle#0@@1|))))) :qid |totalord.253:12| :skolemid |8688| :pattern ( (Char__Order.__default.LargestLte $ly@@1 |run#0@@1| |needle#0@@1|)) ))))
(assert (forall (($ly@@2 T@U) (|run#0@@2| T@U) (|needle#0@@2| T@U) ) (!  (=> (and (and (and (= (type $ly@@2) LayerTypeType) (= (type |run#0@@2|) (SeqType BoxType))) (= (type |needle#0@@2|) charType)) (and ($Is |run#0@@2| (TSeq TChar)) ($Is |needle#0@@2| TChar))) (and (=> (|Char__Order.__default.LargestLte#requires| $ly@@2 |run#0@@2| |needle#0@@2|) (Char__Order.__default.IsSorted StartFuel_Char_Order._default.IsSorted |run#0@@2|)) (=> (Char__Order.__default.IsSorted StartFuel_Char_Order._default.IsSorted |run#0@@2|) (|Char__Order.__default.LargestLte#requires| $ly@@2 |run#0@@2| |needle#0@@2|)))) :qid |totalord.253:12| :skolemid |8689| :pattern ( (|Char__Order.__default.LargestLte#requires| $ly@@2 |run#0@@2| |needle#0@@2|)) )))
(assert  (and (= (type MoreFuel_Char_Order._default.IsSorted0) LayerTypeType) (= (type StartFuelAssert_Char_Order._default.IsSorted) LayerTypeType)))
(assert  (=> (<= 17 $FunctionContextHeight) (forall (($ly@@3 T@U) (|run#0@@3| T@U) (|needle#0@@3| T@U) ) (!  (=> (and (and (and (= (type $ly@@3) LayerTypeType) (= (type |run#0@@3|) (SeqType BoxType))) (= (type |needle#0@@3|) charType)) (or (|Char__Order.__default.LargestLte#canCall| |run#0@@3| |needle#0@@3|) (and (not (= 17 $FunctionContextHeight)) (and (and ($Is |run#0@@3| (TSeq TChar)) ($Is |needle#0@@3| TChar)) (Char__Order.__default.IsSorted StartFuel_Char_Order._default.IsSorted |run#0@@3|))))) (and (and (=> (not (= (|Seq#Length| |run#0@@3|) (LitInt 0))) (|Char__Order.__default.lt#canCall| |needle#0@@3| ($Unbox charType (|Seq#Index| |run#0@@3| (LitInt 0))))) (=> (not (or (= (|Seq#Length| |run#0@@3|) (LitInt 0)) (Char__Order.__default.lt |needle#0@@3| ($Unbox charType (|Seq#Index| |run#0@@3| (LitInt 0)))))) (|Char__Order.__default.LargestLte#canCall| (|Seq#Drop| |run#0@@3| (LitInt 1)) |needle#0@@3|))) (and (and (and (= StartFuel_Char_Order._default.IsSorted ($LS MoreFuel_Char_Order._default.IsSorted0)) (= StartFuelAssert_Char_Order._default.IsSorted ($LS ($LS MoreFuel_Char_Order._default.IsSorted0)))) (= (AsFuelBottom MoreFuel_Char_Order._default.IsSorted0) MoreFuel_Char_Order._default.IsSorted0)) (= (Char__Order.__default.LargestLte ($LS $ly@@3) |run#0@@3| |needle#0@@3|) (ite  (or (= (|Seq#Length| |run#0@@3|) (LitInt 0)) (Char__Order.__default.lt |needle#0@@3| ($Unbox charType (|Seq#Index| |run#0@@3| (LitInt 0))))) (- 0 1) (+ 1 (Char__Order.__default.LargestLte $ly@@3 (|Seq#Drop| |run#0@@3| (LitInt 1)) |needle#0@@3|))))))) :qid |totalord.253:12| :skolemid |8690| :pattern ( (Char__Order.__default.LargestLte ($LS $ly@@3) |run#0@@3| |needle#0@@3|)) ))))
(assert (= (type MoreFuel_Char_Order._default.IsSorted1) LayerTypeType))
(assert  (=> (<= 17 $FunctionContextHeight) (forall (($ly@@4 T@U) (|run#0@@4| T@U) (|needle#0@@4| T@U) ) (!  (=> (and (and (and (= (type $ly@@4) LayerTypeType) (= (type |run#0@@4|) (SeqType BoxType))) (= (type |needle#0@@4|) charType)) (or (|Char__Order.__default.LargestLte#canCall| (Lit |run#0@@4|) (Lit |needle#0@@4|)) (and (not (= 17 $FunctionContextHeight)) (and (and ($Is |run#0@@4| (TSeq TChar)) ($Is |needle#0@@4| TChar)) (Char__Order.__default.IsSorted StartFuel_Char_Order._default.IsSorted (Lit |run#0@@4|)))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@4|)) (LitInt 0))) (|Char__Order.__default.lt#canCall| (Lit |needle#0@@4|) ($Unbox charType (|Seq#Index| (Lit |run#0@@4|) (LitInt 0))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@4|)) (LitInt 0)) (Char__Order.__default.lt (Lit |needle#0@@4|) ($Unbox charType (|Seq#Index| (Lit |run#0@@4|) (LitInt 0)))))) (|Char__Order.__default.LargestLte#canCall| (Lit (|Seq#Drop| (Lit |run#0@@4|) (LitInt 1))) (Lit |needle#0@@4|)))) (and (and (and (= StartFuel_Char_Order._default.IsSorted ($LS MoreFuel_Char_Order._default.IsSorted1)) (= StartFuelAssert_Char_Order._default.IsSorted ($LS ($LS MoreFuel_Char_Order._default.IsSorted1)))) (= (AsFuelBottom MoreFuel_Char_Order._default.IsSorted1) MoreFuel_Char_Order._default.IsSorted1)) (= (Char__Order.__default.LargestLte ($LS $ly@@4) (Lit |run#0@@4|) (Lit |needle#0@@4|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@4|)) (LitInt 0)) (Char__Order.__default.lt (Lit |needle#0@@4|) ($Unbox charType (|Seq#Index| (Lit |run#0@@4|) (LitInt 0))))) (- 0 1) (+ 1 (Char__Order.__default.LargestLte ($LS $ly@@4) (Lit (|Seq#Drop| (Lit |run#0@@4|) (LitInt 1))) (Lit |needle#0@@4|)))))))) :qid |totalord.253:12| :weight 3 :skolemid |8691| :pattern ( (Char__Order.__default.LargestLte ($LS $ly@@4) (Lit |run#0@@4|) (Lit |needle#0@@4|))) ))))
(assert (forall (($ly@@5 T@U) (|run#0@@5| T@U) (|needle#0@@5| T@U) ) (!  (=> (and (and (= (type $ly@@5) LayerTypeType) (= (type |run#0@@5|) (SeqType BoxType))) (= (type |needle#0@@5|) charType)) (= (Char__Order.__default.LargestLt ($LS $ly@@5) |run#0@@5| |needle#0@@5|) (Char__Order.__default.LargestLt $ly@@5 |run#0@@5| |needle#0@@5|))) :qid |totalord.356:12| :skolemid |8734| :pattern ( (Char__Order.__default.LargestLt ($LS $ly@@5) |run#0@@5| |needle#0@@5|)) )))
(assert (forall (($ly@@6 T@U) (|run#0@@6| T@U) (|needle#0@@6| T@U) ) (!  (=> (and (and (= (type $ly@@6) LayerTypeType) (= (type |run#0@@6|) (SeqType BoxType))) (= (type |needle#0@@6|) charType)) (= (Char__Order.__default.LargestLt $ly@@6 |run#0@@6| |needle#0@@6|) (Char__Order.__default.LargestLt $LZ |run#0@@6| |needle#0@@6|))) :qid |totalord.356:12| :skolemid |8735| :pattern ( (Char__Order.__default.LargestLt (AsFuelBottom $ly@@6) |run#0@@6| |needle#0@@6|)) )))
(assert  (=> (<= 24 $FunctionContextHeight) (forall (($ly@@7 T@U) (|run#0@@7| T@U) (|needle#0@@7| T@U) ) (!  (=> (and (and (and (= (type $ly@@7) LayerTypeType) (= (type |run#0@@7|) (SeqType BoxType))) (= (type |needle#0@@7|) charType)) (or (|Char__Order.__default.LargestLt#canCall| |run#0@@7| |needle#0@@7|) (and (not (= 24 $FunctionContextHeight)) (and (and ($Is |run#0@@7| (TSeq TChar)) ($Is |needle#0@@7| TChar)) (Char__Order.__default.IsSorted StartFuel_Char_Order._default.IsSorted |run#0@@7|))))) (and (and (and (and (<= (LitInt (- 0 1)) (Char__Order.__default.LargestLt $ly@@7 |run#0@@7| |needle#0@@7|)) (< (Char__Order.__default.LargestLt $ly@@7 |run#0@@7| |needle#0@@7|) (|Seq#Length| |run#0@@7|))) (forall ((|i#0@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@0|) (<= |i#0@@0| (Char__Order.__default.LargestLt $ly@@7 |run#0@@7| |needle#0@@7|))) (Char__Order.__default.lt ($Unbox charType (|Seq#Index| |run#0@@7| |i#0@@0|)) |needle#0@@7|))) :qid |totalord.359:20| :skolemid |8736| :pattern ( ($Unbox charType (|Seq#Index| |run#0@@7| |i#0@@0|))) ))) (forall ((|i#1@@0| Int) ) (!  (=> true (=> (and (< (Char__Order.__default.LargestLt $ly@@7 |run#0@@7| |needle#0@@7|) |i#1@@0|) (< |i#1@@0| (|Seq#Length| |run#0@@7|))) (Char__Order.__default.lte |needle#0@@7| ($Unbox charType (|Seq#Index| |run#0@@7| |i#1@@0|))))) :qid |totalord.360:20| :skolemid |8737| :pattern ( ($Unbox charType (|Seq#Index| |run#0@@7| |i#1@@0|))) ))) (=> (|Seq#Contains| |run#0@@7| ($Box |needle#0@@7|)) (and (< (+ (Char__Order.__default.LargestLt $ly@@7 |run#0@@7| |needle#0@@7|) 1) (|Seq#Length| |run#0@@7|)) (= ($Unbox charType (|Seq#Index| |run#0@@7| (+ (Char__Order.__default.LargestLt $ly@@7 |run#0@@7| |needle#0@@7|) 1))) |needle#0@@7|))))) :qid |totalord.356:12| :skolemid |8738| :pattern ( (Char__Order.__default.LargestLt $ly@@7 |run#0@@7| |needle#0@@7|)) ))))
(assert (forall (($ly@@8 T@U) (|run#0@@8| T@U) (|needle#0@@8| T@U) ) (!  (=> (and (and (and (= (type $ly@@8) LayerTypeType) (= (type |run#0@@8|) (SeqType BoxType))) (= (type |needle#0@@8|) charType)) (and ($Is |run#0@@8| (TSeq TChar)) ($Is |needle#0@@8| TChar))) (and (=> (|Char__Order.__default.LargestLt#requires| $ly@@8 |run#0@@8| |needle#0@@8|) (Char__Order.__default.IsSorted StartFuel_Char_Order._default.IsSorted |run#0@@8|)) (=> (Char__Order.__default.IsSorted StartFuel_Char_Order._default.IsSorted |run#0@@8|) (|Char__Order.__default.LargestLt#requires| $ly@@8 |run#0@@8| |needle#0@@8|)))) :qid |totalord.356:12| :skolemid |8739| :pattern ( (|Char__Order.__default.LargestLt#requires| $ly@@8 |run#0@@8| |needle#0@@8|)) )))
(assert (= (type MoreFuel_Char_Order._default.IsSorted2) LayerTypeType))
(assert  (=> (<= 24 $FunctionContextHeight) (forall (($ly@@9 T@U) (|run#0@@9| T@U) (|needle#0@@9| T@U) ) (!  (=> (and (and (and (= (type $ly@@9) LayerTypeType) (= (type |run#0@@9|) (SeqType BoxType))) (= (type |needle#0@@9|) charType)) (or (|Char__Order.__default.LargestLt#canCall| |run#0@@9| |needle#0@@9|) (and (not (= 24 $FunctionContextHeight)) (and (and ($Is |run#0@@9| (TSeq TChar)) ($Is |needle#0@@9| TChar)) (Char__Order.__default.IsSorted StartFuel_Char_Order._default.IsSorted |run#0@@9|))))) (and (and (=> (not (= (|Seq#Length| |run#0@@9|) (LitInt 0))) (|Char__Order.__default.lte#canCall| |needle#0@@9| ($Unbox charType (|Seq#Index| |run#0@@9| (LitInt 0))))) (=> (not (or (= (|Seq#Length| |run#0@@9|) (LitInt 0)) (Char__Order.__default.lte |needle#0@@9| ($Unbox charType (|Seq#Index| |run#0@@9| (LitInt 0)))))) (|Char__Order.__default.LargestLt#canCall| (|Seq#Drop| |run#0@@9| (LitInt 1)) |needle#0@@9|))) (and (and (and (= StartFuel_Char_Order._default.IsSorted ($LS MoreFuel_Char_Order._default.IsSorted2)) (= StartFuelAssert_Char_Order._default.IsSorted ($LS ($LS MoreFuel_Char_Order._default.IsSorted2)))) (= (AsFuelBottom MoreFuel_Char_Order._default.IsSorted2) MoreFuel_Char_Order._default.IsSorted2)) (= (Char__Order.__default.LargestLt ($LS $ly@@9) |run#0@@9| |needle#0@@9|) (ite  (or (= (|Seq#Length| |run#0@@9|) (LitInt 0)) (Char__Order.__default.lte |needle#0@@9| ($Unbox charType (|Seq#Index| |run#0@@9| (LitInt 0))))) (- 0 1) (+ 1 (Char__Order.__default.LargestLt $ly@@9 (|Seq#Drop| |run#0@@9| (LitInt 1)) |needle#0@@9|))))))) :qid |totalord.356:12| :skolemid |8740| :pattern ( (Char__Order.__default.LargestLt ($LS $ly@@9) |run#0@@9| |needle#0@@9|)) ))))
(assert (= (type MoreFuel_Char_Order._default.IsSorted3) LayerTypeType))
(assert  (=> (<= 24 $FunctionContextHeight) (forall (($ly@@10 T@U) (|run#0@@10| T@U) (|needle#0@@10| T@U) ) (!  (=> (and (and (and (= (type $ly@@10) LayerTypeType) (= (type |run#0@@10|) (SeqType BoxType))) (= (type |needle#0@@10|) charType)) (or (|Char__Order.__default.LargestLt#canCall| (Lit |run#0@@10|) (Lit |needle#0@@10|)) (and (not (= 24 $FunctionContextHeight)) (and (and ($Is |run#0@@10| (TSeq TChar)) ($Is |needle#0@@10| TChar)) (Char__Order.__default.IsSorted StartFuel_Char_Order._default.IsSorted (Lit |run#0@@10|)))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@10|)) (LitInt 0))) (|Char__Order.__default.lte#canCall| (Lit |needle#0@@10|) ($Unbox charType (|Seq#Index| (Lit |run#0@@10|) (LitInt 0))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@10|)) (LitInt 0)) (Char__Order.__default.lte (Lit |needle#0@@10|) ($Unbox charType (|Seq#Index| (Lit |run#0@@10|) (LitInt 0)))))) (|Char__Order.__default.LargestLt#canCall| (Lit (|Seq#Drop| (Lit |run#0@@10|) (LitInt 1))) (Lit |needle#0@@10|)))) (and (and (and (= StartFuel_Char_Order._default.IsSorted ($LS MoreFuel_Char_Order._default.IsSorted3)) (= StartFuelAssert_Char_Order._default.IsSorted ($LS ($LS MoreFuel_Char_Order._default.IsSorted3)))) (= (AsFuelBottom MoreFuel_Char_Order._default.IsSorted3) MoreFuel_Char_Order._default.IsSorted3)) (= (Char__Order.__default.LargestLt ($LS $ly@@10) (Lit |run#0@@10|) (Lit |needle#0@@10|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@10|)) (LitInt 0)) (Char__Order.__default.lte (Lit |needle#0@@10|) ($Unbox charType (|Seq#Index| (Lit |run#0@@10|) (LitInt 0))))) (- 0 1) (+ 1 (Char__Order.__default.LargestLt ($LS $ly@@10) (Lit (|Seq#Drop| (Lit |run#0@@10|) (LitInt 1))) (Lit |needle#0@@10|)))))))) :qid |totalord.356:12| :weight 3 :skolemid |8741| :pattern ( (Char__Order.__default.LargestLt ($LS $ly@@10) (Lit |run#0@@10|) (Lit |needle#0@@10|))) ))))
(assert (forall (($ly@@11 T@U) (|run#0@@11| T@U) (|needle#0@@11| T@U) ) (!  (=> (and (and (= (type $ly@@11) LayerTypeType) (= (type |run#0@@11|) (SeqType BoxType))) (= (type |needle#0@@11|) charType)) (= (Char__Order.__default.IndexOfFirstGte ($LS $ly@@11) |run#0@@11| |needle#0@@11|) (Char__Order.__default.IndexOfFirstGte $ly@@11 |run#0@@11| |needle#0@@11|))) :qid |totalord.388:12| :skolemid |8761| :pattern ( (Char__Order.__default.IndexOfFirstGte ($LS $ly@@11) |run#0@@11| |needle#0@@11|)) )))
(assert (forall (($ly@@12 T@U) (|run#0@@12| T@U) (|needle#0@@12| T@U) ) (!  (=> (and (and (= (type $ly@@12) LayerTypeType) (= (type |run#0@@12|) (SeqType BoxType))) (= (type |needle#0@@12|) charType)) (= (Char__Order.__default.IndexOfFirstGte $ly@@12 |run#0@@12| |needle#0@@12|) (Char__Order.__default.IndexOfFirstGte $LZ |run#0@@12| |needle#0@@12|))) :qid |totalord.388:12| :skolemid |8762| :pattern ( (Char__Order.__default.IndexOfFirstGte (AsFuelBottom $ly@@12) |run#0@@12| |needle#0@@12|)) )))
(assert  (=> (<= 28 $FunctionContextHeight) (forall (($ly@@13 T@U) (|run#0@@13| T@U) (|needle#0@@13| T@U) ) (!  (=> (and (and (and (= (type $ly@@13) LayerTypeType) (= (type |run#0@@13|) (SeqType BoxType))) (= (type |needle#0@@13|) charType)) (or (|Char__Order.__default.IndexOfFirstGte#canCall| |run#0@@13| |needle#0@@13|) (and (not (= 28 $FunctionContextHeight)) (and (and ($Is |run#0@@13| (TSeq TChar)) ($Is |needle#0@@13| TChar)) (Char__Order.__default.IsSorted StartFuel_Char_Order._default.IsSorted |run#0@@13|))))) (and (and (and (<= (Char__Order.__default.IndexOfFirstGte $ly@@13 |run#0@@13| |needle#0@@13|) (|Seq#Length| |run#0@@13|)) (forall ((|i#0@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@1|) (< |i#0@@1| (Char__Order.__default.IndexOfFirstGte $ly@@13 |run#0@@13| |needle#0@@13|))) (Char__Order.__default.lt ($Unbox charType (|Seq#Index| |run#0@@13| |i#0@@1|)) |needle#0@@13|)) :qid |totalord.391:20| :skolemid |8763| :pattern ( ($Unbox charType (|Seq#Index| |run#0@@13| |i#0@@1|))) ))) (forall ((|i#1@@1| Int) ) (!  (=> (and (<= (Char__Order.__default.IndexOfFirstGte $ly@@13 |run#0@@13| |needle#0@@13|) |i#1@@1|) (< |i#1@@1| (|Seq#Length| |run#0@@13|))) (Char__Order.__default.lte |needle#0@@13| ($Unbox charType (|Seq#Index| |run#0@@13| |i#1@@1|)))) :qid |totalord.392:20| :skolemid |8764| :pattern ( ($Unbox charType (|Seq#Index| |run#0@@13| |i#1@@1|))) ))) (<= (LitInt 0) (Char__Order.__default.IndexOfFirstGte $ly@@13 |run#0@@13| |needle#0@@13|)))) :qid |totalord.388:12| :skolemid |8765| :pattern ( (Char__Order.__default.IndexOfFirstGte $ly@@13 |run#0@@13| |needle#0@@13|)) ))))
(assert (forall (($ly@@14 T@U) (|run#0@@14| T@U) (|needle#0@@14| T@U) ) (!  (=> (and (and (and (= (type $ly@@14) LayerTypeType) (= (type |run#0@@14|) (SeqType BoxType))) (= (type |needle#0@@14|) charType)) (and ($Is |run#0@@14| (TSeq TChar)) ($Is |needle#0@@14| TChar))) (and (=> (|Char__Order.__default.IndexOfFirstGte#requires| $ly@@14 |run#0@@14| |needle#0@@14|) (Char__Order.__default.IsSorted StartFuel_Char_Order._default.IsSorted |run#0@@14|)) (=> (Char__Order.__default.IsSorted StartFuel_Char_Order._default.IsSorted |run#0@@14|) (|Char__Order.__default.IndexOfFirstGte#requires| $ly@@14 |run#0@@14| |needle#0@@14|)))) :qid |totalord.388:12| :skolemid |8766| :pattern ( (|Char__Order.__default.IndexOfFirstGte#requires| $ly@@14 |run#0@@14| |needle#0@@14|)) )))
(assert  (and (and (forall ((arg0@@218 T@U) (arg1@@105 T@U) ) (! (= (type (Sequences.__default.Last arg0@@218 arg1@@105)) BoxType) :qid |funType:Sequences.__default.Last| :pattern ( (Sequences.__default.Last arg0@@218 arg1@@105)) )) (forall ((arg0@@219 T@U) (arg1@@106 T@U) ) (! (= (type (Sequences.__default.DropLast arg0@@219 arg1@@106)) (SeqType BoxType)) :qid |funType:Sequences.__default.DropLast| :pattern ( (Sequences.__default.DropLast arg0@@219 arg1@@106)) ))) (= (type MoreFuel_Char_Order._default.IsSorted4) LayerTypeType)))
(assert  (=> (<= 28 $FunctionContextHeight) (forall (($ly@@15 T@U) (|run#0@@15| T@U) (|needle#0@@15| T@U) ) (!  (=> (and (and (and (= (type $ly@@15) LayerTypeType) (= (type |run#0@@15|) (SeqType BoxType))) (= (type |needle#0@@15|) charType)) (or (|Char__Order.__default.IndexOfFirstGte#canCall| |run#0@@15| |needle#0@@15|) (and (not (= 28 $FunctionContextHeight)) (and (and ($Is |run#0@@15| (TSeq TChar)) ($Is |needle#0@@15| TChar)) (Char__Order.__default.IsSorted StartFuel_Char_Order._default.IsSorted |run#0@@15|))))) (and (=> (not (= (|Seq#Length| |run#0@@15|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| TChar |run#0@@15|) (|Char__Order.__default.lt#canCall| ($Unbox charType (Sequences.__default.Last TChar |run#0@@15|)) |needle#0@@15|)) (=> (not (Char__Order.__default.lt ($Unbox charType (Sequences.__default.Last TChar |run#0@@15|)) |needle#0@@15|)) (and (|Sequences.__default.DropLast#canCall| TChar |run#0@@15|) (|Char__Order.__default.IndexOfFirstGte#canCall| (Sequences.__default.DropLast TChar |run#0@@15|) |needle#0@@15|))))) (and (and (and (= StartFuel_Char_Order._default.IsSorted ($LS MoreFuel_Char_Order._default.IsSorted4)) (= StartFuelAssert_Char_Order._default.IsSorted ($LS ($LS MoreFuel_Char_Order._default.IsSorted4)))) (= (AsFuelBottom MoreFuel_Char_Order._default.IsSorted4) MoreFuel_Char_Order._default.IsSorted4)) (= (Char__Order.__default.IndexOfFirstGte ($LS $ly@@15) |run#0@@15| |needle#0@@15|) (ite (= (|Seq#Length| |run#0@@15|) (LitInt 0)) 0 (ite (Char__Order.__default.lt ($Unbox charType (Sequences.__default.Last TChar |run#0@@15|)) |needle#0@@15|) (|Seq#Length| |run#0@@15|) (Char__Order.__default.IndexOfFirstGte $ly@@15 (Sequences.__default.DropLast TChar |run#0@@15|) |needle#0@@15|))))))) :qid |totalord.388:12| :skolemid |8767| :pattern ( (Char__Order.__default.IndexOfFirstGte ($LS $ly@@15) |run#0@@15| |needle#0@@15|)) ))))
(assert (= (type MoreFuel_Char_Order._default.IsSorted5) LayerTypeType))
(assert  (=> (<= 28 $FunctionContextHeight) (forall (($ly@@16 T@U) (|run#0@@16| T@U) (|needle#0@@16| T@U) ) (!  (=> (and (and (and (= (type $ly@@16) LayerTypeType) (= (type |run#0@@16|) (SeqType BoxType))) (= (type |needle#0@@16|) charType)) (or (|Char__Order.__default.IndexOfFirstGte#canCall| (Lit |run#0@@16|) (Lit |needle#0@@16|)) (and (not (= 28 $FunctionContextHeight)) (and (and ($Is |run#0@@16| (TSeq TChar)) ($Is |needle#0@@16| TChar)) (Char__Order.__default.IsSorted StartFuel_Char_Order._default.IsSorted (Lit |run#0@@16|)))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@16|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| TChar (Lit |run#0@@16|)) (|Char__Order.__default.lt#canCall| (Lit ($Unbox charType (Sequences.__default.Last TChar (Lit |run#0@@16|)))) (Lit |needle#0@@16|))) (=> (not (U_2_bool (Lit (bool_2_U (Char__Order.__default.lt (Lit ($Unbox charType (Sequences.__default.Last TChar (Lit |run#0@@16|)))) (Lit |needle#0@@16|)))))) (and (|Sequences.__default.DropLast#canCall| TChar (Lit |run#0@@16|)) (|Char__Order.__default.IndexOfFirstGte#canCall| (Lit (Sequences.__default.DropLast TChar (Lit |run#0@@16|))) (Lit |needle#0@@16|)))))) (and (and (and (= StartFuel_Char_Order._default.IsSorted ($LS MoreFuel_Char_Order._default.IsSorted5)) (= StartFuelAssert_Char_Order._default.IsSorted ($LS ($LS MoreFuel_Char_Order._default.IsSorted5)))) (= (AsFuelBottom MoreFuel_Char_Order._default.IsSorted5) MoreFuel_Char_Order._default.IsSorted5)) (= (Char__Order.__default.IndexOfFirstGte ($LS $ly@@16) (Lit |run#0@@16|) (Lit |needle#0@@16|)) (ite (= (|Seq#Length| (Lit |run#0@@16|)) (LitInt 0)) 0 (ite (Char__Order.__default.lt (Lit ($Unbox charType (Sequences.__default.Last TChar (Lit |run#0@@16|)))) (Lit |needle#0@@16|)) (|Seq#Length| (Lit |run#0@@16|)) (Char__Order.__default.IndexOfFirstGte ($LS $ly@@16) (Lit (Sequences.__default.DropLast TChar (Lit |run#0@@16|))) (Lit |needle#0@@16|)))))))) :qid |totalord.388:12| :weight 3 :skolemid |8768| :pattern ( (Char__Order.__default.IndexOfFirstGte ($LS $ly@@16) (Lit |run#0@@16|) (Lit |needle#0@@16|))) ))))
(assert (forall (($ly@@17 T@U) (|s#0| T@U) (|key#0| T@U) (|lo#0| Int) (|hi#0| Int) ) (!  (=> (and (and (= (type $ly@@17) LayerTypeType) (= (type |s#0|) (SeqType BoxType))) (= (type |key#0|) charType)) (= (Char__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@17) |s#0| |key#0| |lo#0| |hi#0|) (Char__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@17 |s#0| |key#0| |lo#0| |hi#0|))) :qid |totalord.421:12| :skolemid |8788| :pattern ( (Char__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@17) |s#0| |key#0| |lo#0| |hi#0|)) )))
(assert (forall (($ly@@18 T@U) (|s#0@@0| T@U) (|key#0@@0| T@U) (|lo#0@@0| Int) (|hi#0@@0| Int) ) (!  (=> (and (and (= (type $ly@@18) LayerTypeType) (= (type |s#0@@0|) (SeqType BoxType))) (= (type |key#0@@0|) charType)) (= (Char__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@18 |s#0@@0| |key#0@@0| |lo#0@@0| |hi#0@@0|) (Char__Order.__default.binarySearchIndexOfFirstKeyGteIter $LZ |s#0@@0| |key#0@@0| |lo#0@@0| |hi#0@@0|))) :qid |totalord.421:12| :skolemid |8789| :pattern ( (Char__Order.__default.binarySearchIndexOfFirstKeyGteIter (AsFuelBottom $ly@@18) |s#0@@0| |key#0@@0| |lo#0@@0| |hi#0@@0|)) )))
(assert  (=> (<= 30 $FunctionContextHeight) (forall (($ly@@19 T@U) (|s#0@@1| T@U) (|key#0@@1| T@U) (|lo#0@@1| Int) (|hi#0@@1| Int) ) (!  (=> (and (and (and (= (type $ly@@19) LayerTypeType) (= (type |s#0@@1|) (SeqType BoxType))) (= (type |key#0@@1|) charType)) (or (|Char__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@1| |key#0@@1| |lo#0@@1| |hi#0@@1|) (and (not (= 30 $FunctionContextHeight)) (and (and ($Is |s#0@@1| (TSeq TChar)) ($Is |key#0@@1| TChar)) (and (and (and (and (<= (LitInt 0) |lo#0@@1|) (< |lo#0@@1| |hi#0@@1|)) (<= |hi#0@@1| (+ (|Seq#Length| |s#0@@1|) 1))) (=> (> |lo#0@@1| 0) (Char__Order.__default.lt ($Unbox charType (|Seq#Index| |s#0@@1| (- |lo#0@@1| 1))) |key#0@@1|))) (=> (<= |hi#0@@1| (|Seq#Length| |s#0@@1|)) (Char__Order.__default.lte |key#0@@1| ($Unbox charType (|Seq#Index| |s#0@@1| (- |hi#0@@1| 1)))))))))) (and (and (and (<= (LitInt 0) (Char__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@19 |s#0@@1| |key#0@@1| |lo#0@@1| |hi#0@@1|)) (<= (Char__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@19 |s#0@@1| |key#0@@1| |lo#0@@1| |hi#0@@1|) (|Seq#Length| |s#0@@1|))) (=> (> (Char__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@19 |s#0@@1| |key#0@@1| |lo#0@@1| |hi#0@@1|) 0) (Char__Order.__default.lt ($Unbox charType (|Seq#Index| |s#0@@1| (- (Char__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@19 |s#0@@1| |key#0@@1| |lo#0@@1| |hi#0@@1|) 1))) |key#0@@1|))) (=> (< (Char__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@19 |s#0@@1| |key#0@@1| |lo#0@@1| |hi#0@@1|) (|Seq#Length| |s#0@@1|)) (Char__Order.__default.lte |key#0@@1| ($Unbox charType (|Seq#Index| |s#0@@1| (Char__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@19 |s#0@@1| |key#0@@1| |lo#0@@1| |hi#0@@1|))))))) :qid |totalord.421:12| :skolemid |8790| :pattern ( (Char__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@19 |s#0@@1| |key#0@@1| |lo#0@@1| |hi#0@@1|)) ))))
(assert (forall (($ly@@20 T@U) (|s#0@@2| T@U) (|key#0@@2| T@U) (|lo#0@@2| Int) (|hi#0@@2| Int) ) (!  (=> (and (and (and (= (type $ly@@20) LayerTypeType) (= (type |s#0@@2|) (SeqType BoxType))) (= (type |key#0@@2|) charType)) (and ($Is |s#0@@2| (TSeq TChar)) ($Is |key#0@@2| TChar))) (and (=> (|Char__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@20 |s#0@@2| |key#0@@2| |lo#0@@2| |hi#0@@2|) (and (and (and (and (<= (LitInt 0) |lo#0@@2|) (< |lo#0@@2| |hi#0@@2|)) (<= |hi#0@@2| (+ (|Seq#Length| |s#0@@2|) 1))) (=> (> |lo#0@@2| 0) (Char__Order.__default.lt ($Unbox charType (|Seq#Index| |s#0@@2| (- |lo#0@@2| 1))) |key#0@@2|))) (=> (<= |hi#0@@2| (|Seq#Length| |s#0@@2|)) (Char__Order.__default.lte |key#0@@2| ($Unbox charType (|Seq#Index| |s#0@@2| (- |hi#0@@2| 1))))))) (=> (and (and (and (and (<= (LitInt 0) |lo#0@@2|) (< |lo#0@@2| |hi#0@@2|)) (<= |hi#0@@2| (+ (|Seq#Length| |s#0@@2|) 1))) (=> (> |lo#0@@2| 0) (Char__Order.__default.lt ($Unbox charType (|Seq#Index| |s#0@@2| (- |lo#0@@2| 1))) |key#0@@2|))) (=> (<= |hi#0@@2| (|Seq#Length| |s#0@@2|)) (Char__Order.__default.lte |key#0@@2| ($Unbox charType (|Seq#Index| |s#0@@2| (- |hi#0@@2| 1)))))) (|Char__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@20 |s#0@@2| |key#0@@2| |lo#0@@2| |hi#0@@2|)))) :qid |totalord.421:12| :skolemid |8791| :pattern ( (|Char__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@20 |s#0@@2| |key#0@@2| |lo#0@@2| |hi#0@@2|)) )))
(assert  (=> (<= 30 $FunctionContextHeight) (forall (($ly@@21 T@U) (|s#0@@3| T@U) (|key#0@@3| T@U) (|lo#0@@3| Int) (|hi#0@@3| Int) ) (!  (=> (and (and (and (= (type $ly@@21) LayerTypeType) (= (type |s#0@@3|) (SeqType BoxType))) (= (type |key#0@@3|) charType)) (or (|Char__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@3| |key#0@@3| |lo#0@@3| |hi#0@@3|) (and (not (= 30 $FunctionContextHeight)) (and (and ($Is |s#0@@3| (TSeq TChar)) ($Is |key#0@@3| TChar)) (and (and (and (and (<= (LitInt 0) |lo#0@@3|) (< |lo#0@@3| |hi#0@@3|)) (<= |hi#0@@3| (+ (|Seq#Length| |s#0@@3|) 1))) (=> (> |lo#0@@3| 0) (Char__Order.__default.lt ($Unbox charType (|Seq#Index| |s#0@@3| (- |lo#0@@3| 1))) |key#0@@3|))) (=> (<= |hi#0@@3| (|Seq#Length| |s#0@@3|)) (Char__Order.__default.lte |key#0@@3| ($Unbox charType (|Seq#Index| |s#0@@3| (- |hi#0@@3| 1)))))))))) (and (=> (< (+ |lo#0@@3| 1) |hi#0@@3|) (let ((|mid#0| (Div (+ |lo#0@@3| |hi#0@@3|) (LitInt 2)))) (and (and (|Char__Order.__default.lt#canCall| ($Unbox charType (|Seq#Index| |s#0@@3| (- |mid#0| 1))) |key#0@@3|) (=> (Char__Order.__default.lt ($Unbox charType (|Seq#Index| |s#0@@3| (- |mid#0| 1))) |key#0@@3|) (|Char__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@3| |key#0@@3| |mid#0| |hi#0@@3|))) (=> (not (Char__Order.__default.lt ($Unbox charType (|Seq#Index| |s#0@@3| (- |mid#0| 1))) |key#0@@3|)) (|Char__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@3| |key#0@@3| |lo#0@@3| |mid#0|))))) (= (Char__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@21) |s#0@@3| |key#0@@3| |lo#0@@3| |hi#0@@3|) (ite (< (+ |lo#0@@3| 1) |hi#0@@3|) (let ((|mid#0@@0| (Div (+ |lo#0@@3| |hi#0@@3|) (LitInt 2)))) (ite (Char__Order.__default.lt ($Unbox charType (|Seq#Index| |s#0@@3| (- |mid#0@@0| 1))) |key#0@@3|) (Char__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@21 |s#0@@3| |key#0@@3| |mid#0@@0| |hi#0@@3|) (Char__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@21 |s#0@@3| |key#0@@3| |lo#0@@3| |mid#0@@0|))) |lo#0@@3|)))) :qid |totalord.421:12| :skolemid |8792| :pattern ( (Char__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@21) |s#0@@3| |key#0@@3| |lo#0@@3| |hi#0@@3|)) ))))
(assert  (=> (<= 30 $FunctionContextHeight) (forall (($ly@@22 T@U) (|s#0@@4| T@U) (|key#0@@4| T@U) (|lo#0@@4| Int) (|hi#0@@4| Int) ) (!  (=> (and (and (and (= (type $ly@@22) LayerTypeType) (= (type |s#0@@4|) (SeqType BoxType))) (= (type |key#0@@4|) charType)) (or (|Char__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@4| |key#0@@4| (LitInt |lo#0@@4|) (LitInt |hi#0@@4|)) (and (not (= 30 $FunctionContextHeight)) (and (and ($Is |s#0@@4| (TSeq TChar)) ($Is |key#0@@4| TChar)) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@4|)) (< |lo#0@@4| |hi#0@@4|)) (<= (LitInt |hi#0@@4|) (+ (|Seq#Length| |s#0@@4|) 1))) (=> (> |lo#0@@4| 0) (Char__Order.__default.lt ($Unbox charType (|Seq#Index| |s#0@@4| (LitInt (- |lo#0@@4| 1)))) |key#0@@4|))) (=> (<= (LitInt |hi#0@@4|) (|Seq#Length| |s#0@@4|)) (Char__Order.__default.lte |key#0@@4| ($Unbox charType (|Seq#Index| |s#0@@4| (LitInt (- |hi#0@@4| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@4| 1) |hi#0@@4|)))) (let ((|mid#1| (LitInt (Div (+ |lo#0@@4| |hi#0@@4|) (LitInt 2))))) (and (and (|Char__Order.__default.lt#canCall| ($Unbox charType (|Seq#Index| |s#0@@4| (- |mid#1| 1))) |key#0@@4|) (=> (Char__Order.__default.lt ($Unbox charType (|Seq#Index| |s#0@@4| (- |mid#1| 1))) |key#0@@4|) (|Char__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@4| |key#0@@4| |mid#1| (LitInt |hi#0@@4|)))) (=> (not (Char__Order.__default.lt ($Unbox charType (|Seq#Index| |s#0@@4| (- |mid#1| 1))) |key#0@@4|)) (|Char__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@4| |key#0@@4| (LitInt |lo#0@@4|) |mid#1|))))) (= (Char__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@22) |s#0@@4| |key#0@@4| (LitInt |lo#0@@4|) (LitInt |hi#0@@4|)) (ite (< (+ |lo#0@@4| 1) |hi#0@@4|) (let ((|mid#1@@0| (LitInt (Div (+ |lo#0@@4| |hi#0@@4|) (LitInt 2))))) (ite (Char__Order.__default.lt ($Unbox charType (|Seq#Index| |s#0@@4| (LitInt (- |mid#1@@0| 1)))) |key#0@@4|) (Char__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@22) |s#0@@4| |key#0@@4| |mid#1@@0| (LitInt |hi#0@@4|)) (Char__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@22) |s#0@@4| |key#0@@4| (LitInt |lo#0@@4|) |mid#1@@0|))) |lo#0@@4|)))) :qid |totalord.421:12| :weight 3 :skolemid |8793| :pattern ( (Char__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@22) |s#0@@4| |key#0@@4| (LitInt |lo#0@@4|) (LitInt |hi#0@@4|))) ))))
(assert  (=> (<= 30 $FunctionContextHeight) (forall (($ly@@23 T@U) (|s#0@@5| T@U) (|key#0@@5| T@U) (|lo#0@@5| Int) (|hi#0@@5| Int) ) (!  (=> (and (and (and (= (type $ly@@23) LayerTypeType) (= (type |s#0@@5|) (SeqType BoxType))) (= (type |key#0@@5|) charType)) (or (|Char__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@5|) (Lit |key#0@@5|) (LitInt |lo#0@@5|) (LitInt |hi#0@@5|)) (and (not (= 30 $FunctionContextHeight)) (and (and ($Is |s#0@@5| (TSeq TChar)) ($Is |key#0@@5| TChar)) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@5|)) (< |lo#0@@5| |hi#0@@5|)) (<= (LitInt |hi#0@@5|) (+ (|Seq#Length| (Lit |s#0@@5|)) 1))) (=> (> |lo#0@@5| 0) (Char__Order.__default.lt ($Unbox charType (|Seq#Index| (Lit |s#0@@5|) (LitInt (- |lo#0@@5| 1)))) (Lit |key#0@@5|)))) (=> (<= (LitInt |hi#0@@5|) (|Seq#Length| (Lit |s#0@@5|))) (Char__Order.__default.lte (Lit |key#0@@5|) ($Unbox charType (|Seq#Index| (Lit |s#0@@5|) (LitInt (- |hi#0@@5| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@5| 1) |hi#0@@5|)))) (let ((|mid#2| (LitInt (Div (+ |lo#0@@5| |hi#0@@5|) (LitInt 2))))) (and (and (|Char__Order.__default.lt#canCall| ($Unbox charType (|Seq#Index| (Lit |s#0@@5|) (- |mid#2| 1))) (Lit |key#0@@5|)) (=> (Char__Order.__default.lt ($Unbox charType (|Seq#Index| (Lit |s#0@@5|) (- |mid#2| 1))) (Lit |key#0@@5|)) (|Char__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@5|) (Lit |key#0@@5|) |mid#2| (LitInt |hi#0@@5|)))) (=> (not (Char__Order.__default.lt ($Unbox charType (|Seq#Index| (Lit |s#0@@5|) (- |mid#2| 1))) (Lit |key#0@@5|))) (|Char__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@5|) (Lit |key#0@@5|) (LitInt |lo#0@@5|) |mid#2|))))) (= (Char__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@23) (Lit |s#0@@5|) (Lit |key#0@@5|) (LitInt |lo#0@@5|) (LitInt |hi#0@@5|)) (ite (< (+ |lo#0@@5| 1) |hi#0@@5|) (let ((|mid#2@@0| (LitInt (Div (+ |lo#0@@5| |hi#0@@5|) (LitInt 2))))) (ite (Char__Order.__default.lt ($Unbox charType (|Seq#Index| (Lit |s#0@@5|) (LitInt (- |mid#2@@0| 1)))) (Lit |key#0@@5|)) (Char__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@23) (Lit |s#0@@5|) (Lit |key#0@@5|) |mid#2@@0| (LitInt |hi#0@@5|)) (Char__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@23) (Lit |s#0@@5|) (Lit |key#0@@5|) (LitInt |lo#0@@5|) |mid#2@@0|))) |lo#0@@5|)))) :qid |totalord.421:12| :weight 3 :skolemid |8794| :pattern ( (Char__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@23) (Lit |s#0@@5|) (Lit |key#0@@5|) (LitInt |lo#0@@5|) (LitInt |hi#0@@5|))) ))))
(assert (forall (($ly@@24 T@U) (|s#0@@6| T@U) (|key#0@@6| T@U) ) (!  (=> (and (and (= (type $ly@@24) LayerTypeType) (= (type |s#0@@6|) (SeqType BoxType))) (= (type |key#0@@6|) charType)) (= (Char__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@24) |s#0@@6| |key#0@@6|) (Char__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@24 |s#0@@6| |key#0@@6|))) :qid |totalord.441:22| :skolemid |8800| :pattern ( (Char__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@24) |s#0@@6| |key#0@@6|)) )))
(assert (forall (($ly@@25 T@U) (|s#0@@7| T@U) (|key#0@@7| T@U) ) (!  (=> (and (and (= (type $ly@@25) LayerTypeType) (= (type |s#0@@7|) (SeqType BoxType))) (= (type |key#0@@7|) charType)) (= (Char__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@25 |s#0@@7| |key#0@@7|) (Char__Order.__default.binarySearchIndexOfFirstKeyGte $LZ |s#0@@7| |key#0@@7|))) :qid |totalord.441:22| :skolemid |8801| :pattern ( (Char__Order.__default.binarySearchIndexOfFirstKeyGte (AsFuelBottom $ly@@25) |s#0@@7| |key#0@@7|)) )))
(assert  (=> (<= 31 $FunctionContextHeight) (forall (($ly@@26 T@U) (|s#0@@8| T@U) (|key#0@@8| T@U) ) (!  (=> (and (and (and (= (type $ly@@26) LayerTypeType) (= (type |s#0@@8|) (SeqType BoxType))) (= (type |key#0@@8|) charType)) (or (|Char__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@8| |key#0@@8|) (and (not (= 31 $FunctionContextHeight)) (and ($Is |s#0@@8| (TSeq TChar)) ($Is |key#0@@8| TChar))))) (and (and (and (<= (LitInt 0) (Char__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@26 |s#0@@8| |key#0@@8|)) (<= (Char__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@26 |s#0@@8| |key#0@@8|) (|Seq#Length| |s#0@@8|))) (=> (> (Char__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@26 |s#0@@8| |key#0@@8|) 0) (Char__Order.__default.lt ($Unbox charType (|Seq#Index| |s#0@@8| (- (Char__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@26 |s#0@@8| |key#0@@8|) 1))) |key#0@@8|))) (=> (< (Char__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@26 |s#0@@8| |key#0@@8|) (|Seq#Length| |s#0@@8|)) (Char__Order.__default.lte |key#0@@8| ($Unbox charType (|Seq#Index| |s#0@@8| (Char__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@26 |s#0@@8| |key#0@@8|))))))) :qid |totalord.441:22| :skolemid |8802| :pattern ( (Char__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@26 |s#0@@8| |key#0@@8|)) ))))
(assert (forall (($ly@@27 T@U) (|s#0@@9| T@U) (|key#0@@9| T@U) ) (!  (=> (and (and (and (= (type $ly@@27) LayerTypeType) (= (type |s#0@@9|) (SeqType BoxType))) (= (type |key#0@@9|) charType)) (and ($Is |s#0@@9| (TSeq TChar)) ($Is |key#0@@9| TChar))) (and (=> (|Char__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@27 |s#0@@9| |key#0@@9|) true) (=> true (|Char__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@27 |s#0@@9| |key#0@@9|)))) :qid |totalord.441:22| :skolemid |8803| :pattern ( (|Char__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@27 |s#0@@9| |key#0@@9|)) )))
(assert  (=> (<= 31 $FunctionContextHeight) (forall (($ly@@28 T@U) (|s#0@@10| T@U) (|key#0@@10| T@U) ) (!  (=> (and (and (and (= (type $ly@@28) LayerTypeType) (= (type |s#0@@10|) (SeqType BoxType))) (= (type |key#0@@10|) charType)) (or (|Char__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@10| |key#0@@10|) (and (not (= 31 $FunctionContextHeight)) (and ($Is |s#0@@10| (TSeq TChar)) ($Is |key#0@@10| TChar))))) (and (|Char__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@10| |key#0@@10| (LitInt 0) (+ (|Seq#Length| |s#0@@10|) 1)) (= (Char__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@28) |s#0@@10| |key#0@@10|) (Char__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) |s#0@@10| |key#0@@10| (LitInt 0) (+ (|Seq#Length| |s#0@@10|) 1))))) :qid |totalord.441:22| :skolemid |8804| :pattern ( (Char__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@28) |s#0@@10| |key#0@@10|)) ))))
(assert  (=> (<= 31 $FunctionContextHeight) (forall (($ly@@29 T@U) (|s#0@@11| T@U) (|key#0@@11| T@U) ) (!  (=> (and (and (and (= (type $ly@@29) LayerTypeType) (= (type |s#0@@11|) (SeqType BoxType))) (= (type |key#0@@11|) charType)) (or (|Char__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (Lit |s#0@@11|) (Lit |key#0@@11|)) (and (not (= 31 $FunctionContextHeight)) (and ($Is |s#0@@11| (TSeq TChar)) ($Is |key#0@@11| TChar))))) (and (|Char__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@11|) (Lit |key#0@@11|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@11|)) 1)) (= (Char__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@29) (Lit |s#0@@11|) (Lit |key#0@@11|)) (Char__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) (Lit |s#0@@11|) (Lit |key#0@@11|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@11|)) 1))))) :qid |totalord.441:22| :weight 3 :skolemid |8805| :pattern ( (Char__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@29) (Lit |s#0@@11|) (Lit |key#0@@11|))) ))))
(assert (forall (($ly@@30 T@U) (|run#0@@17| T@U) (|needle#0@@17| T@U) ) (!  (=> (and (and (= (type $ly@@30) LayerTypeType) (= (type |run#0@@17|) (SeqType BoxType))) (= (type |needle#0@@17|) charType)) (= (Char__Order.__default.IndexOfFirstGt ($LS $ly@@30) |run#0@@17| |needle#0@@17|) (Char__Order.__default.IndexOfFirstGt $ly@@30 |run#0@@17| |needle#0@@17|))) :qid |totalord.449:12| :skolemid |8807| :pattern ( (Char__Order.__default.IndexOfFirstGt ($LS $ly@@30) |run#0@@17| |needle#0@@17|)) )))
(assert (forall (($ly@@31 T@U) (|run#0@@18| T@U) (|needle#0@@18| T@U) ) (!  (=> (and (and (= (type $ly@@31) LayerTypeType) (= (type |run#0@@18|) (SeqType BoxType))) (= (type |needle#0@@18|) charType)) (= (Char__Order.__default.IndexOfFirstGt $ly@@31 |run#0@@18| |needle#0@@18|) (Char__Order.__default.IndexOfFirstGt $LZ |run#0@@18| |needle#0@@18|))) :qid |totalord.449:12| :skolemid |8808| :pattern ( (Char__Order.__default.IndexOfFirstGt (AsFuelBottom $ly@@31) |run#0@@18| |needle#0@@18|)) )))
(assert  (=> (<= 32 $FunctionContextHeight) (forall (($ly@@32 T@U) (|run#0@@19| T@U) (|needle#0@@19| T@U) ) (!  (=> (and (and (and (= (type $ly@@32) LayerTypeType) (= (type |run#0@@19|) (SeqType BoxType))) (= (type |needle#0@@19|) charType)) (or (|Char__Order.__default.IndexOfFirstGt#canCall| |run#0@@19| |needle#0@@19|) (and (not (= 32 $FunctionContextHeight)) (and (and ($Is |run#0@@19| (TSeq TChar)) ($Is |needle#0@@19| TChar)) (Char__Order.__default.IsSorted StartFuel_Char_Order._default.IsSorted |run#0@@19|))))) (and (and (and (<= (Char__Order.__default.IndexOfFirstGt $ly@@32 |run#0@@19| |needle#0@@19|) (|Seq#Length| |run#0@@19|)) (forall ((|i#0@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@2|) (< |i#0@@2| (Char__Order.__default.IndexOfFirstGt $ly@@32 |run#0@@19| |needle#0@@19|))) (Char__Order.__default.lte ($Unbox charType (|Seq#Index| |run#0@@19| |i#0@@2|)) |needle#0@@19|)) :qid |totalord.452:20| :skolemid |8809| :pattern ( ($Unbox charType (|Seq#Index| |run#0@@19| |i#0@@2|))) ))) (forall ((|i#1@@2| Int) ) (!  (=> (and (<= (Char__Order.__default.IndexOfFirstGt $ly@@32 |run#0@@19| |needle#0@@19|) |i#1@@2|) (< |i#1@@2| (|Seq#Length| |run#0@@19|))) (Char__Order.__default.lt |needle#0@@19| ($Unbox charType (|Seq#Index| |run#0@@19| |i#1@@2|)))) :qid |totalord.453:20| :skolemid |8810| :pattern ( ($Unbox charType (|Seq#Index| |run#0@@19| |i#1@@2|))) ))) (<= (LitInt 0) (Char__Order.__default.IndexOfFirstGt $ly@@32 |run#0@@19| |needle#0@@19|)))) :qid |totalord.449:12| :skolemid |8811| :pattern ( (Char__Order.__default.IndexOfFirstGt $ly@@32 |run#0@@19| |needle#0@@19|)) ))))
(assert (forall (($ly@@33 T@U) (|run#0@@20| T@U) (|needle#0@@20| T@U) ) (!  (=> (and (and (and (= (type $ly@@33) LayerTypeType) (= (type |run#0@@20|) (SeqType BoxType))) (= (type |needle#0@@20|) charType)) (and ($Is |run#0@@20| (TSeq TChar)) ($Is |needle#0@@20| TChar))) (and (=> (|Char__Order.__default.IndexOfFirstGt#requires| $ly@@33 |run#0@@20| |needle#0@@20|) (Char__Order.__default.IsSorted StartFuel_Char_Order._default.IsSorted |run#0@@20|)) (=> (Char__Order.__default.IsSorted StartFuel_Char_Order._default.IsSorted |run#0@@20|) (|Char__Order.__default.IndexOfFirstGt#requires| $ly@@33 |run#0@@20| |needle#0@@20|)))) :qid |totalord.449:12| :skolemid |8812| :pattern ( (|Char__Order.__default.IndexOfFirstGt#requires| $ly@@33 |run#0@@20| |needle#0@@20|)) )))
(assert (= (type MoreFuel_Char_Order._default.IsSorted6) LayerTypeType))
(assert  (=> (<= 32 $FunctionContextHeight) (forall (($ly@@34 T@U) (|run#0@@21| T@U) (|needle#0@@21| T@U) ) (!  (=> (and (and (and (= (type $ly@@34) LayerTypeType) (= (type |run#0@@21|) (SeqType BoxType))) (= (type |needle#0@@21|) charType)) (or (|Char__Order.__default.IndexOfFirstGt#canCall| |run#0@@21| |needle#0@@21|) (and (not (= 32 $FunctionContextHeight)) (and (and ($Is |run#0@@21| (TSeq TChar)) ($Is |needle#0@@21| TChar)) (Char__Order.__default.IsSorted StartFuel_Char_Order._default.IsSorted |run#0@@21|))))) (and (=> (not (= (|Seq#Length| |run#0@@21|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| TChar |run#0@@21|) (|Char__Order.__default.lte#canCall| ($Unbox charType (Sequences.__default.Last TChar |run#0@@21|)) |needle#0@@21|)) (=> (not (Char__Order.__default.lte ($Unbox charType (Sequences.__default.Last TChar |run#0@@21|)) |needle#0@@21|)) (and (|Sequences.__default.DropLast#canCall| TChar |run#0@@21|) (|Char__Order.__default.IndexOfFirstGt#canCall| (Sequences.__default.DropLast TChar |run#0@@21|) |needle#0@@21|))))) (and (and (and (= StartFuel_Char_Order._default.IsSorted ($LS MoreFuel_Char_Order._default.IsSorted6)) (= StartFuelAssert_Char_Order._default.IsSorted ($LS ($LS MoreFuel_Char_Order._default.IsSorted6)))) (= (AsFuelBottom MoreFuel_Char_Order._default.IsSorted6) MoreFuel_Char_Order._default.IsSorted6)) (= (Char__Order.__default.IndexOfFirstGt ($LS $ly@@34) |run#0@@21| |needle#0@@21|) (ite (= (|Seq#Length| |run#0@@21|) (LitInt 0)) 0 (ite (Char__Order.__default.lte ($Unbox charType (Sequences.__default.Last TChar |run#0@@21|)) |needle#0@@21|) (|Seq#Length| |run#0@@21|) (Char__Order.__default.IndexOfFirstGt $ly@@34 (Sequences.__default.DropLast TChar |run#0@@21|) |needle#0@@21|))))))) :qid |totalord.449:12| :skolemid |8813| :pattern ( (Char__Order.__default.IndexOfFirstGt ($LS $ly@@34) |run#0@@21| |needle#0@@21|)) ))))
(assert (= (type MoreFuel_Char_Order._default.IsSorted7) LayerTypeType))
(assert  (=> (<= 32 $FunctionContextHeight) (forall (($ly@@35 T@U) (|run#0@@22| T@U) (|needle#0@@22| T@U) ) (!  (=> (and (and (and (= (type $ly@@35) LayerTypeType) (= (type |run#0@@22|) (SeqType BoxType))) (= (type |needle#0@@22|) charType)) (or (|Char__Order.__default.IndexOfFirstGt#canCall| (Lit |run#0@@22|) (Lit |needle#0@@22|)) (and (not (= 32 $FunctionContextHeight)) (and (and ($Is |run#0@@22| (TSeq TChar)) ($Is |needle#0@@22| TChar)) (Char__Order.__default.IsSorted StartFuel_Char_Order._default.IsSorted (Lit |run#0@@22|)))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@22|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| TChar (Lit |run#0@@22|)) (|Char__Order.__default.lte#canCall| (Lit ($Unbox charType (Sequences.__default.Last TChar (Lit |run#0@@22|)))) (Lit |needle#0@@22|))) (=> (not (U_2_bool (Lit (bool_2_U (Char__Order.__default.lte (Lit ($Unbox charType (Sequences.__default.Last TChar (Lit |run#0@@22|)))) (Lit |needle#0@@22|)))))) (and (|Sequences.__default.DropLast#canCall| TChar (Lit |run#0@@22|)) (|Char__Order.__default.IndexOfFirstGt#canCall| (Lit (Sequences.__default.DropLast TChar (Lit |run#0@@22|))) (Lit |needle#0@@22|)))))) (and (and (and (= StartFuel_Char_Order._default.IsSorted ($LS MoreFuel_Char_Order._default.IsSorted7)) (= StartFuelAssert_Char_Order._default.IsSorted ($LS ($LS MoreFuel_Char_Order._default.IsSorted7)))) (= (AsFuelBottom MoreFuel_Char_Order._default.IsSorted7) MoreFuel_Char_Order._default.IsSorted7)) (= (Char__Order.__default.IndexOfFirstGt ($LS $ly@@35) (Lit |run#0@@22|) (Lit |needle#0@@22|)) (ite (= (|Seq#Length| (Lit |run#0@@22|)) (LitInt 0)) 0 (ite (Char__Order.__default.lte (Lit ($Unbox charType (Sequences.__default.Last TChar (Lit |run#0@@22|)))) (Lit |needle#0@@22|)) (|Seq#Length| (Lit |run#0@@22|)) (Char__Order.__default.IndexOfFirstGt ($LS $ly@@35) (Lit (Sequences.__default.DropLast TChar (Lit |run#0@@22|))) (Lit |needle#0@@22|)))))))) :qid |totalord.449:12| :weight 3 :skolemid |8814| :pattern ( (Char__Order.__default.IndexOfFirstGt ($LS $ly@@35) (Lit |run#0@@22|) (Lit |needle#0@@22|))) ))))
(assert (forall (($ly@@36 T@U) (|s#0@@12| T@U) (|key#0@@12| T@U) (|lo#0@@6| Int) (|hi#0@@6| Int) ) (!  (=> (and (and (= (type $ly@@36) LayerTypeType) (= (type |s#0@@12|) (SeqType BoxType))) (= (type |key#0@@12|) charType)) (= (Char__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@36) |s#0@@12| |key#0@@12| |lo#0@@6| |hi#0@@6|) (Char__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@36 |s#0@@12| |key#0@@12| |lo#0@@6| |hi#0@@6|))) :qid |totalord.482:12| :skolemid |8834| :pattern ( (Char__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@36) |s#0@@12| |key#0@@12| |lo#0@@6| |hi#0@@6|)) )))
(assert (forall (($ly@@37 T@U) (|s#0@@13| T@U) (|key#0@@13| T@U) (|lo#0@@7| Int) (|hi#0@@7| Int) ) (!  (=> (and (and (= (type $ly@@37) LayerTypeType) (= (type |s#0@@13|) (SeqType BoxType))) (= (type |key#0@@13|) charType)) (= (Char__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@37 |s#0@@13| |key#0@@13| |lo#0@@7| |hi#0@@7|) (Char__Order.__default.binarySearchIndexOfFirstKeyGtIter $LZ |s#0@@13| |key#0@@13| |lo#0@@7| |hi#0@@7|))) :qid |totalord.482:12| :skolemid |8835| :pattern ( (Char__Order.__default.binarySearchIndexOfFirstKeyGtIter (AsFuelBottom $ly@@37) |s#0@@13| |key#0@@13| |lo#0@@7| |hi#0@@7|)) )))
(assert  (=> (<= 34 $FunctionContextHeight) (forall (($ly@@38 T@U) (|s#0@@14| T@U) (|key#0@@14| T@U) (|lo#0@@8| Int) (|hi#0@@8| Int) ) (!  (=> (and (and (and (= (type $ly@@38) LayerTypeType) (= (type |s#0@@14|) (SeqType BoxType))) (= (type |key#0@@14|) charType)) (or (|Char__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@14| |key#0@@14| |lo#0@@8| |hi#0@@8|) (and (not (= 34 $FunctionContextHeight)) (and (and ($Is |s#0@@14| (TSeq TChar)) ($Is |key#0@@14| TChar)) (and (and (and (and (<= (LitInt 0) |lo#0@@8|) (< |lo#0@@8| |hi#0@@8|)) (<= |hi#0@@8| (+ (|Seq#Length| |s#0@@14|) 1))) (=> (> |lo#0@@8| 0) (Char__Order.__default.lte ($Unbox charType (|Seq#Index| |s#0@@14| (- |lo#0@@8| 1))) |key#0@@14|))) (=> (<= |hi#0@@8| (|Seq#Length| |s#0@@14|)) (Char__Order.__default.lt |key#0@@14| ($Unbox charType (|Seq#Index| |s#0@@14| (- |hi#0@@8| 1)))))))))) (and (and (and (<= (LitInt 0) (Char__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@38 |s#0@@14| |key#0@@14| |lo#0@@8| |hi#0@@8|)) (<= (Char__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@38 |s#0@@14| |key#0@@14| |lo#0@@8| |hi#0@@8|) (|Seq#Length| |s#0@@14|))) (=> (> (Char__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@38 |s#0@@14| |key#0@@14| |lo#0@@8| |hi#0@@8|) 0) (Char__Order.__default.lte ($Unbox charType (|Seq#Index| |s#0@@14| (- (Char__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@38 |s#0@@14| |key#0@@14| |lo#0@@8| |hi#0@@8|) 1))) |key#0@@14|))) (=> (< (Char__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@38 |s#0@@14| |key#0@@14| |lo#0@@8| |hi#0@@8|) (|Seq#Length| |s#0@@14|)) (Char__Order.__default.lt |key#0@@14| ($Unbox charType (|Seq#Index| |s#0@@14| (Char__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@38 |s#0@@14| |key#0@@14| |lo#0@@8| |hi#0@@8|))))))) :qid |totalord.482:12| :skolemid |8836| :pattern ( (Char__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@38 |s#0@@14| |key#0@@14| |lo#0@@8| |hi#0@@8|)) ))))
(assert (forall (($ly@@39 T@U) (|s#0@@15| T@U) (|key#0@@15| T@U) (|lo#0@@9| Int) (|hi#0@@9| Int) ) (!  (=> (and (and (and (= (type $ly@@39) LayerTypeType) (= (type |s#0@@15|) (SeqType BoxType))) (= (type |key#0@@15|) charType)) (and ($Is |s#0@@15| (TSeq TChar)) ($Is |key#0@@15| TChar))) (and (=> (|Char__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@39 |s#0@@15| |key#0@@15| |lo#0@@9| |hi#0@@9|) (and (and (and (and (<= (LitInt 0) |lo#0@@9|) (< |lo#0@@9| |hi#0@@9|)) (<= |hi#0@@9| (+ (|Seq#Length| |s#0@@15|) 1))) (=> (> |lo#0@@9| 0) (Char__Order.__default.lte ($Unbox charType (|Seq#Index| |s#0@@15| (- |lo#0@@9| 1))) |key#0@@15|))) (=> (<= |hi#0@@9| (|Seq#Length| |s#0@@15|)) (Char__Order.__default.lt |key#0@@15| ($Unbox charType (|Seq#Index| |s#0@@15| (- |hi#0@@9| 1))))))) (=> (and (and (and (and (<= (LitInt 0) |lo#0@@9|) (< |lo#0@@9| |hi#0@@9|)) (<= |hi#0@@9| (+ (|Seq#Length| |s#0@@15|) 1))) (=> (> |lo#0@@9| 0) (Char__Order.__default.lte ($Unbox charType (|Seq#Index| |s#0@@15| (- |lo#0@@9| 1))) |key#0@@15|))) (=> (<= |hi#0@@9| (|Seq#Length| |s#0@@15|)) (Char__Order.__default.lt |key#0@@15| ($Unbox charType (|Seq#Index| |s#0@@15| (- |hi#0@@9| 1)))))) (|Char__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@39 |s#0@@15| |key#0@@15| |lo#0@@9| |hi#0@@9|)))) :qid |totalord.482:12| :skolemid |8837| :pattern ( (|Char__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@39 |s#0@@15| |key#0@@15| |lo#0@@9| |hi#0@@9|)) )))
(assert  (=> (<= 34 $FunctionContextHeight) (forall (($ly@@40 T@U) (|s#0@@16| T@U) (|key#0@@16| T@U) (|lo#0@@10| Int) (|hi#0@@10| Int) ) (!  (=> (and (and (and (= (type $ly@@40) LayerTypeType) (= (type |s#0@@16|) (SeqType BoxType))) (= (type |key#0@@16|) charType)) (or (|Char__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@16| |key#0@@16| |lo#0@@10| |hi#0@@10|) (and (not (= 34 $FunctionContextHeight)) (and (and ($Is |s#0@@16| (TSeq TChar)) ($Is |key#0@@16| TChar)) (and (and (and (and (<= (LitInt 0) |lo#0@@10|) (< |lo#0@@10| |hi#0@@10|)) (<= |hi#0@@10| (+ (|Seq#Length| |s#0@@16|) 1))) (=> (> |lo#0@@10| 0) (Char__Order.__default.lte ($Unbox charType (|Seq#Index| |s#0@@16| (- |lo#0@@10| 1))) |key#0@@16|))) (=> (<= |hi#0@@10| (|Seq#Length| |s#0@@16|)) (Char__Order.__default.lt |key#0@@16| ($Unbox charType (|Seq#Index| |s#0@@16| (- |hi#0@@10| 1)))))))))) (and (=> (< (+ |lo#0@@10| 1) |hi#0@@10|) (let ((|mid#0@@1| (Div (+ |lo#0@@10| |hi#0@@10|) (LitInt 2)))) (and (and (|Char__Order.__default.lte#canCall| ($Unbox charType (|Seq#Index| |s#0@@16| (- |mid#0@@1| 1))) |key#0@@16|) (=> (Char__Order.__default.lte ($Unbox charType (|Seq#Index| |s#0@@16| (- |mid#0@@1| 1))) |key#0@@16|) (|Char__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@16| |key#0@@16| |mid#0@@1| |hi#0@@10|))) (=> (not (Char__Order.__default.lte ($Unbox charType (|Seq#Index| |s#0@@16| (- |mid#0@@1| 1))) |key#0@@16|)) (|Char__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@16| |key#0@@16| |lo#0@@10| |mid#0@@1|))))) (= (Char__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@40) |s#0@@16| |key#0@@16| |lo#0@@10| |hi#0@@10|) (ite (< (+ |lo#0@@10| 1) |hi#0@@10|) (let ((|mid#0@@2| (Div (+ |lo#0@@10| |hi#0@@10|) (LitInt 2)))) (ite (Char__Order.__default.lte ($Unbox charType (|Seq#Index| |s#0@@16| (- |mid#0@@2| 1))) |key#0@@16|) (Char__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@40 |s#0@@16| |key#0@@16| |mid#0@@2| |hi#0@@10|) (Char__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@40 |s#0@@16| |key#0@@16| |lo#0@@10| |mid#0@@2|))) |lo#0@@10|)))) :qid |totalord.482:12| :skolemid |8838| :pattern ( (Char__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@40) |s#0@@16| |key#0@@16| |lo#0@@10| |hi#0@@10|)) ))))
(assert  (=> (<= 34 $FunctionContextHeight) (forall (($ly@@41 T@U) (|s#0@@17| T@U) (|key#0@@17| T@U) (|lo#0@@11| Int) (|hi#0@@11| Int) ) (!  (=> (and (and (and (= (type $ly@@41) LayerTypeType) (= (type |s#0@@17|) (SeqType BoxType))) (= (type |key#0@@17|) charType)) (or (|Char__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@17| |key#0@@17| (LitInt |lo#0@@11|) (LitInt |hi#0@@11|)) (and (not (= 34 $FunctionContextHeight)) (and (and ($Is |s#0@@17| (TSeq TChar)) ($Is |key#0@@17| TChar)) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@11|)) (< |lo#0@@11| |hi#0@@11|)) (<= (LitInt |hi#0@@11|) (+ (|Seq#Length| |s#0@@17|) 1))) (=> (> |lo#0@@11| 0) (Char__Order.__default.lte ($Unbox charType (|Seq#Index| |s#0@@17| (LitInt (- |lo#0@@11| 1)))) |key#0@@17|))) (=> (<= (LitInt |hi#0@@11|) (|Seq#Length| |s#0@@17|)) (Char__Order.__default.lt |key#0@@17| ($Unbox charType (|Seq#Index| |s#0@@17| (LitInt (- |hi#0@@11| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@11| 1) |hi#0@@11|)))) (let ((|mid#1@@1| (LitInt (Div (+ |lo#0@@11| |hi#0@@11|) (LitInt 2))))) (and (and (|Char__Order.__default.lte#canCall| ($Unbox charType (|Seq#Index| |s#0@@17| (- |mid#1@@1| 1))) |key#0@@17|) (=> (Char__Order.__default.lte ($Unbox charType (|Seq#Index| |s#0@@17| (- |mid#1@@1| 1))) |key#0@@17|) (|Char__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@17| |key#0@@17| |mid#1@@1| (LitInt |hi#0@@11|)))) (=> (not (Char__Order.__default.lte ($Unbox charType (|Seq#Index| |s#0@@17| (- |mid#1@@1| 1))) |key#0@@17|)) (|Char__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@17| |key#0@@17| (LitInt |lo#0@@11|) |mid#1@@1|))))) (= (Char__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@41) |s#0@@17| |key#0@@17| (LitInt |lo#0@@11|) (LitInt |hi#0@@11|)) (ite (< (+ |lo#0@@11| 1) |hi#0@@11|) (let ((|mid#1@@2| (LitInt (Div (+ |lo#0@@11| |hi#0@@11|) (LitInt 2))))) (ite (Char__Order.__default.lte ($Unbox charType (|Seq#Index| |s#0@@17| (LitInt (- |mid#1@@2| 1)))) |key#0@@17|) (Char__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@41) |s#0@@17| |key#0@@17| |mid#1@@2| (LitInt |hi#0@@11|)) (Char__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@41) |s#0@@17| |key#0@@17| (LitInt |lo#0@@11|) |mid#1@@2|))) |lo#0@@11|)))) :qid |totalord.482:12| :weight 3 :skolemid |8839| :pattern ( (Char__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@41) |s#0@@17| |key#0@@17| (LitInt |lo#0@@11|) (LitInt |hi#0@@11|))) ))))
(assert  (=> (<= 34 $FunctionContextHeight) (forall (($ly@@42 T@U) (|s#0@@18| T@U) (|key#0@@18| T@U) (|lo#0@@12| Int) (|hi#0@@12| Int) ) (!  (=> (and (and (and (= (type $ly@@42) LayerTypeType) (= (type |s#0@@18|) (SeqType BoxType))) (= (type |key#0@@18|) charType)) (or (|Char__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@18|) (Lit |key#0@@18|) (LitInt |lo#0@@12|) (LitInt |hi#0@@12|)) (and (not (= 34 $FunctionContextHeight)) (and (and ($Is |s#0@@18| (TSeq TChar)) ($Is |key#0@@18| TChar)) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@12|)) (< |lo#0@@12| |hi#0@@12|)) (<= (LitInt |hi#0@@12|) (+ (|Seq#Length| (Lit |s#0@@18|)) 1))) (=> (> |lo#0@@12| 0) (Char__Order.__default.lte ($Unbox charType (|Seq#Index| (Lit |s#0@@18|) (LitInt (- |lo#0@@12| 1)))) (Lit |key#0@@18|)))) (=> (<= (LitInt |hi#0@@12|) (|Seq#Length| (Lit |s#0@@18|))) (Char__Order.__default.lt (Lit |key#0@@18|) ($Unbox charType (|Seq#Index| (Lit |s#0@@18|) (LitInt (- |hi#0@@12| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@12| 1) |hi#0@@12|)))) (let ((|mid#2@@1| (LitInt (Div (+ |lo#0@@12| |hi#0@@12|) (LitInt 2))))) (and (and (|Char__Order.__default.lte#canCall| ($Unbox charType (|Seq#Index| (Lit |s#0@@18|) (- |mid#2@@1| 1))) (Lit |key#0@@18|)) (=> (Char__Order.__default.lte ($Unbox charType (|Seq#Index| (Lit |s#0@@18|) (- |mid#2@@1| 1))) (Lit |key#0@@18|)) (|Char__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@18|) (Lit |key#0@@18|) |mid#2@@1| (LitInt |hi#0@@12|)))) (=> (not (Char__Order.__default.lte ($Unbox charType (|Seq#Index| (Lit |s#0@@18|) (- |mid#2@@1| 1))) (Lit |key#0@@18|))) (|Char__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@18|) (Lit |key#0@@18|) (LitInt |lo#0@@12|) |mid#2@@1|))))) (= (Char__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@42) (Lit |s#0@@18|) (Lit |key#0@@18|) (LitInt |lo#0@@12|) (LitInt |hi#0@@12|)) (ite (< (+ |lo#0@@12| 1) |hi#0@@12|) (let ((|mid#2@@2| (LitInt (Div (+ |lo#0@@12| |hi#0@@12|) (LitInt 2))))) (ite (Char__Order.__default.lte ($Unbox charType (|Seq#Index| (Lit |s#0@@18|) (LitInt (- |mid#2@@2| 1)))) (Lit |key#0@@18|)) (Char__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@42) (Lit |s#0@@18|) (Lit |key#0@@18|) |mid#2@@2| (LitInt |hi#0@@12|)) (Char__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@42) (Lit |s#0@@18|) (Lit |key#0@@18|) (LitInt |lo#0@@12|) |mid#2@@2|))) |lo#0@@12|)))) :qid |totalord.482:12| :weight 3 :skolemid |8840| :pattern ( (Char__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@42) (Lit |s#0@@18|) (Lit |key#0@@18|) (LitInt |lo#0@@12|) (LitInt |hi#0@@12|))) ))))
(assert (forall (($ly@@43 T@U) (|s#0@@19| T@U) (|key#0@@19| T@U) ) (!  (=> (and (and (= (type $ly@@43) LayerTypeType) (= (type |s#0@@19|) (SeqType BoxType))) (= (type |key#0@@19|) charType)) (= (Char__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@43) |s#0@@19| |key#0@@19|) (Char__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@43 |s#0@@19| |key#0@@19|))) :qid |totalord.502:22| :skolemid |8846| :pattern ( (Char__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@43) |s#0@@19| |key#0@@19|)) )))
(assert (forall (($ly@@44 T@U) (|s#0@@20| T@U) (|key#0@@20| T@U) ) (!  (=> (and (and (= (type $ly@@44) LayerTypeType) (= (type |s#0@@20|) (SeqType BoxType))) (= (type |key#0@@20|) charType)) (= (Char__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@44 |s#0@@20| |key#0@@20|) (Char__Order.__default.binarySearchIndexOfFirstKeyGt $LZ |s#0@@20| |key#0@@20|))) :qid |totalord.502:22| :skolemid |8847| :pattern ( (Char__Order.__default.binarySearchIndexOfFirstKeyGt (AsFuelBottom $ly@@44) |s#0@@20| |key#0@@20|)) )))
(assert  (=> (<= 35 $FunctionContextHeight) (forall (($ly@@45 T@U) (|s#0@@21| T@U) (|key#0@@21| T@U) ) (!  (=> (and (and (and (= (type $ly@@45) LayerTypeType) (= (type |s#0@@21|) (SeqType BoxType))) (= (type |key#0@@21|) charType)) (or (|Char__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@21| |key#0@@21|) (and (not (= 35 $FunctionContextHeight)) (and ($Is |s#0@@21| (TSeq TChar)) ($Is |key#0@@21| TChar))))) (and (and (and (<= (LitInt 0) (Char__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@45 |s#0@@21| |key#0@@21|)) (<= (Char__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@45 |s#0@@21| |key#0@@21|) (|Seq#Length| |s#0@@21|))) (=> (> (Char__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@45 |s#0@@21| |key#0@@21|) 0) (Char__Order.__default.lte ($Unbox charType (|Seq#Index| |s#0@@21| (- (Char__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@45 |s#0@@21| |key#0@@21|) 1))) |key#0@@21|))) (=> (< (Char__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@45 |s#0@@21| |key#0@@21|) (|Seq#Length| |s#0@@21|)) (Char__Order.__default.lt |key#0@@21| ($Unbox charType (|Seq#Index| |s#0@@21| (Char__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@45 |s#0@@21| |key#0@@21|))))))) :qid |totalord.502:22| :skolemid |8848| :pattern ( (Char__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@45 |s#0@@21| |key#0@@21|)) ))))
(assert (forall (($ly@@46 T@U) (|s#0@@22| T@U) (|key#0@@22| T@U) ) (!  (=> (and (and (and (= (type $ly@@46) LayerTypeType) (= (type |s#0@@22|) (SeqType BoxType))) (= (type |key#0@@22|) charType)) (and ($Is |s#0@@22| (TSeq TChar)) ($Is |key#0@@22| TChar))) (and (=> (|Char__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@46 |s#0@@22| |key#0@@22|) true) (=> true (|Char__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@46 |s#0@@22| |key#0@@22|)))) :qid |totalord.502:22| :skolemid |8849| :pattern ( (|Char__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@46 |s#0@@22| |key#0@@22|)) )))
(assert  (=> (<= 35 $FunctionContextHeight) (forall (($ly@@47 T@U) (|s#0@@23| T@U) (|key#0@@23| T@U) ) (!  (=> (and (and (and (= (type $ly@@47) LayerTypeType) (= (type |s#0@@23|) (SeqType BoxType))) (= (type |key#0@@23|) charType)) (or (|Char__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@23| |key#0@@23|) (and (not (= 35 $FunctionContextHeight)) (and ($Is |s#0@@23| (TSeq TChar)) ($Is |key#0@@23| TChar))))) (and (|Char__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@23| |key#0@@23| (LitInt 0) (+ (|Seq#Length| |s#0@@23|) 1)) (= (Char__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@47) |s#0@@23| |key#0@@23|) (Char__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) |s#0@@23| |key#0@@23| (LitInt 0) (+ (|Seq#Length| |s#0@@23|) 1))))) :qid |totalord.502:22| :skolemid |8850| :pattern ( (Char__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@47) |s#0@@23| |key#0@@23|)) ))))
(assert  (=> (<= 35 $FunctionContextHeight) (forall (($ly@@48 T@U) (|s#0@@24| T@U) (|key#0@@24| T@U) ) (!  (=> (and (and (and (= (type $ly@@48) LayerTypeType) (= (type |s#0@@24|) (SeqType BoxType))) (= (type |key#0@@24|) charType)) (or (|Char__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (Lit |s#0@@24|) (Lit |key#0@@24|)) (and (not (= 35 $FunctionContextHeight)) (and ($Is |s#0@@24| (TSeq TChar)) ($Is |key#0@@24| TChar))))) (and (|Char__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@24|) (Lit |key#0@@24|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@24|)) 1)) (= (Char__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@48) (Lit |s#0@@24|) (Lit |key#0@@24|)) (Char__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) (Lit |s#0@@24|) (Lit |key#0@@24|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@24|)) 1))))) :qid |totalord.502:22| :weight 3 :skolemid |8851| :pattern ( (Char__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@48) (Lit |s#0@@24|) (Lit |key#0@@24|))) ))))
(assert  (=> (<= 40 $FunctionContextHeight) (forall ((|a#0@@9| T@U) (|b#0@@9| T@U) ) (!  (=> (and (and (= (type |a#0@@9|) (MapType0Type BoxType boolType)) (= (type |b#0@@9|) (MapType0Type BoxType boolType))) (or (|Char__Order.__default.SetAllLte#canCall| |a#0@@9| |b#0@@9|) (and (not (= 40 $FunctionContextHeight)) (and ($Is |a#0@@9| (TSet TChar)) ($Is |b#0@@9| (TSet TChar)))))) true) :qid |totalord.675:23| :skolemid |8877| :pattern ( (Char__Order.__default.SetAllLte |a#0@@9| |b#0@@9|)) ))))
(assert (forall ((|a#0@@10| T@U) (|b#0@@10| T@U) ) (!  (=> (and (and (= (type |a#0@@10|) (MapType0Type BoxType boolType)) (= (type |b#0@@10|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@10| (TSet TChar)) ($Is |b#0@@10| (TSet TChar)))) (and (=> (|Char__Order.__default.SetAllLte#requires| |a#0@@10| |b#0@@10|) true) (=> true (|Char__Order.__default.SetAllLte#requires| |a#0@@10| |b#0@@10|)))) :qid |totalord.675:23| :skolemid |8878| :pattern ( (|Char__Order.__default.SetAllLte#requires| |a#0@@10| |b#0@@10|)) )))
(assert  (=> (<= 40 $FunctionContextHeight) (forall ((|a#0@@11| T@U) (|b#0@@11| T@U) ) (!  (=> (and (and (= (type |a#0@@11|) (MapType0Type BoxType boolType)) (= (type |b#0@@11|) (MapType0Type BoxType boolType))) (or (|Char__Order.__default.SetAllLte#canCall| |a#0@@11| |b#0@@11|) (and (not (= 40 $FunctionContextHeight)) (and ($Is |a#0@@11| (TSet TChar)) ($Is |b#0@@11| (TSet TChar)))))) (and (forall ((|x#0@@1| T@U) (|y#0| T@U) ) (!  (=> (and (and (and (= (type |x#0@@1|) charType) (= (type |y#0|) charType)) (and ($Is |x#0@@1| TChar) ($Is |y#0| TChar))) (U_2_bool (MapType0Select |b#0@@11| ($Box |y#0|)))) (|Char__Order.__default.lte#canCall| |x#0@@1| |y#0|)) :qid |totalord.676:12| :skolemid |8879| :pattern ( (Char__Order.__default.lte |x#0@@1| |y#0|)) :pattern ( (MapType0Select |b#0@@11| ($Box |y#0|)) (MapType0Select |a#0@@11| ($Box |x#0@@1|))) )) (and (=> (Char__Order.__default.SetAllLte |a#0@@11| |b#0@@11|) (forall ((|x#0@@2| T@U) (|y#0@@0| T@U) ) (!  (=> (and (and (and (= (type |x#0@@2|) charType) (= (type |y#0@@0|) charType)) (and ($Is |x#0@@2| TChar) ($Is |y#0@@0| TChar))) (and (U_2_bool (MapType0Select |a#0@@11| ($Box |x#0@@2|))) (U_2_bool (MapType0Select |b#0@@11| ($Box |y#0@@0|))))) (Char__Order.__default.lte |x#0@@2| |y#0@@0|)) :qid |totalord.676:12| :skolemid |8880| :pattern ( (Char__Order.__default.lte |x#0@@2| |y#0@@0|)) :pattern ( (MapType0Select |b#0@@11| ($Box |y#0@@0|)) (MapType0Select |a#0@@11| ($Box |x#0@@2|))) ))) (=> (forall ((|x#0@@3| T@U) (|y#0@@1| T@U) ) (!  (=> (and (and (and (= (type |x#0@@3|) charType) (= (type |y#0@@1|) charType)) (and ($Is |x#0@@3| TChar) ($Is |y#0@@1| TChar))) (and (U_2_bool (MapType0Select |a#0@@11| ($Box |x#0@@3|))) (U_2_bool (MapType0Select |b#0@@11| ($Box |y#0@@1|))))) (Char__Order.__default.lte |x#0@@3| |y#0@@1|)) :qid |totalord.676:12| :skolemid |8880| :pattern ( (Char__Order.__default.lte |x#0@@3| |y#0@@1|)) :pattern ( (MapType0Select |b#0@@11| ($Box |y#0@@1|)) (MapType0Select |a#0@@11| ($Box |x#0@@3|))) )) (Char__Order.__default.SetAllLte |a#0@@11| |b#0@@11|))))) :qid |totalord.675:23| :skolemid |8881| :pattern ( (Char__Order.__default.SetAllLte |a#0@@11| |b#0@@11|)) ))))
(assert  (=> (<= 40 $FunctionContextHeight) (forall ((|a#0@@12| T@U) (|b#0@@12| T@U) ) (!  (=> (and (and (= (type |a#0@@12|) (MapType0Type BoxType boolType)) (= (type |b#0@@12|) (MapType0Type BoxType boolType))) (or (|Char__Order.__default.SetAllLte#canCall| (Lit |a#0@@12|) (Lit |b#0@@12|)) (and (not (= 40 $FunctionContextHeight)) (and ($Is |a#0@@12| (TSet TChar)) ($Is |b#0@@12| (TSet TChar)))))) (and (forall ((|x#1| T@U) (|y#1| T@U) ) (!  (=> (and (and (and (= (type |x#1|) charType) (= (type |y#1|) charType)) (and ($Is |x#1| TChar) ($Is |y#1| TChar))) (U_2_bool (MapType0Select (Lit |b#0@@12|) ($Box |y#1|)))) (|Char__Order.__default.lte#canCall| |x#1| |y#1|)) :qid |totalord.676:12| :skolemid |8882| :pattern ( (Char__Order.__default.lte |x#1| |y#1|)) :pattern ( (MapType0Select |b#0@@12| ($Box |y#1|)) (MapType0Select |a#0@@12| ($Box |x#1|))) )) (and (=> (Char__Order.__default.SetAllLte (Lit |a#0@@12|) (Lit |b#0@@12|)) (forall ((|x#1@@0| T@U) (|y#1@@0| T@U) ) (!  (=> (and (and (and (= (type |x#1@@0|) charType) (= (type |y#1@@0|) charType)) (and ($Is |x#1@@0| TChar) ($Is |y#1@@0| TChar))) (and (U_2_bool (MapType0Select (Lit |a#0@@12|) ($Box |x#1@@0|))) (U_2_bool (MapType0Select (Lit |b#0@@12|) ($Box |y#1@@0|))))) (Char__Order.__default.lte |x#1@@0| |y#1@@0|)) :qid |totalord.676:12| :skolemid |8883| :pattern ( (Char__Order.__default.lte |x#1@@0| |y#1@@0|)) :pattern ( (MapType0Select |b#0@@12| ($Box |y#1@@0|)) (MapType0Select |a#0@@12| ($Box |x#1@@0|))) ))) (=> (forall ((|x#1@@1| T@U) (|y#1@@1| T@U) ) (!  (=> (and (and (and (= (type |x#1@@1|) charType) (= (type |y#1@@1|) charType)) (and ($Is |x#1@@1| TChar) ($Is |y#1@@1| TChar))) (and (U_2_bool (MapType0Select (Lit |a#0@@12|) ($Box |x#1@@1|))) (U_2_bool (MapType0Select (Lit |b#0@@12|) ($Box |y#1@@1|))))) (Char__Order.__default.lte |x#1@@1| |y#1@@1|)) :qid |totalord.676:12| :skolemid |8883| :pattern ( (Char__Order.__default.lte |x#1@@1| |y#1@@1|)) :pattern ( (MapType0Select |b#0@@12| ($Box |y#1@@1|)) (MapType0Select |a#0@@12| ($Box |x#1@@1|))) )) (Char__Order.__default.SetAllLte (Lit |a#0@@12|) (Lit |b#0@@12|)))))) :qid |totalord.675:23| :weight 3 :skolemid |8884| :pattern ( (Char__Order.__default.SetAllLte (Lit |a#0@@12|) (Lit |b#0@@12|))) ))))
(assert  (=> (<= 41 $FunctionContextHeight) (forall ((|a#0@@13| T@U) (|b#0@@13| T@U) ) (!  (=> (and (and (= (type |a#0@@13|) (MapType0Type BoxType boolType)) (= (type |b#0@@13|) (MapType0Type BoxType boolType))) (or (|Char__Order.__default.SetAllLt#canCall| |a#0@@13| |b#0@@13|) (and (not (= 41 $FunctionContextHeight)) (and ($Is |a#0@@13| (TSet TChar)) ($Is |b#0@@13| (TSet TChar)))))) true) :qid |totalord.679:22| :skolemid |8888| :pattern ( (Char__Order.__default.SetAllLt |a#0@@13| |b#0@@13|)) ))))
(assert (forall ((|a#0@@14| T@U) (|b#0@@14| T@U) ) (!  (=> (and (and (= (type |a#0@@14|) (MapType0Type BoxType boolType)) (= (type |b#0@@14|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@14| (TSet TChar)) ($Is |b#0@@14| (TSet TChar)))) (and (=> (|Char__Order.__default.SetAllLt#requires| |a#0@@14| |b#0@@14|) true) (=> true (|Char__Order.__default.SetAllLt#requires| |a#0@@14| |b#0@@14|)))) :qid |totalord.679:22| :skolemid |8889| :pattern ( (|Char__Order.__default.SetAllLt#requires| |a#0@@14| |b#0@@14|)) )))
(assert  (=> (<= 41 $FunctionContextHeight) (forall ((|a#0@@15| T@U) (|b#0@@15| T@U) ) (!  (=> (and (and (= (type |a#0@@15|) (MapType0Type BoxType boolType)) (= (type |b#0@@15|) (MapType0Type BoxType boolType))) (or (|Char__Order.__default.SetAllLt#canCall| |a#0@@15| |b#0@@15|) (and (not (= 41 $FunctionContextHeight)) (and ($Is |a#0@@15| (TSet TChar)) ($Is |b#0@@15| (TSet TChar)))))) (and (forall ((|x#0@@4| T@U) (|y#0@@2| T@U) ) (!  (=> (and (and (and (= (type |x#0@@4|) charType) (= (type |y#0@@2|) charType)) (and ($Is |x#0@@4| TChar) ($Is |y#0@@2| TChar))) (U_2_bool (MapType0Select |b#0@@15| ($Box |y#0@@2|)))) (|Char__Order.__default.lt#canCall| |x#0@@4| |y#0@@2|)) :qid |totalord.680:12| :skolemid |8890| :pattern ( (Char__Order.__default.lt |x#0@@4| |y#0@@2|)) :pattern ( (MapType0Select |b#0@@15| ($Box |y#0@@2|)) (MapType0Select |a#0@@15| ($Box |x#0@@4|))) )) (and (=> (Char__Order.__default.SetAllLt |a#0@@15| |b#0@@15|) (forall ((|x#0@@5| T@U) (|y#0@@3| T@U) ) (!  (=> (and (and (and (= (type |x#0@@5|) charType) (= (type |y#0@@3|) charType)) (and ($Is |x#0@@5| TChar) ($Is |y#0@@3| TChar))) (and (U_2_bool (MapType0Select |a#0@@15| ($Box |x#0@@5|))) (U_2_bool (MapType0Select |b#0@@15| ($Box |y#0@@3|))))) (Char__Order.__default.lt |x#0@@5| |y#0@@3|)) :qid |totalord.680:12| :skolemid |8891| :pattern ( (Char__Order.__default.lt |x#0@@5| |y#0@@3|)) :pattern ( (MapType0Select |b#0@@15| ($Box |y#0@@3|)) (MapType0Select |a#0@@15| ($Box |x#0@@5|))) ))) (=> (forall ((|x#0@@6| T@U) (|y#0@@4| T@U) ) (!  (=> (and (and (and (= (type |x#0@@6|) charType) (= (type |y#0@@4|) charType)) (and ($Is |x#0@@6| TChar) ($Is |y#0@@4| TChar))) (and (U_2_bool (MapType0Select |a#0@@15| ($Box |x#0@@6|))) (U_2_bool (MapType0Select |b#0@@15| ($Box |y#0@@4|))))) (Char__Order.__default.lt |x#0@@6| |y#0@@4|)) :qid |totalord.680:12| :skolemid |8891| :pattern ( (Char__Order.__default.lt |x#0@@6| |y#0@@4|)) :pattern ( (MapType0Select |b#0@@15| ($Box |y#0@@4|)) (MapType0Select |a#0@@15| ($Box |x#0@@6|))) )) (Char__Order.__default.SetAllLt |a#0@@15| |b#0@@15|))))) :qid |totalord.679:22| :skolemid |8892| :pattern ( (Char__Order.__default.SetAllLt |a#0@@15| |b#0@@15|)) ))))
(assert  (=> (<= 41 $FunctionContextHeight) (forall ((|a#0@@16| T@U) (|b#0@@16| T@U) ) (!  (=> (and (and (= (type |a#0@@16|) (MapType0Type BoxType boolType)) (= (type |b#0@@16|) (MapType0Type BoxType boolType))) (or (|Char__Order.__default.SetAllLt#canCall| (Lit |a#0@@16|) (Lit |b#0@@16|)) (and (not (= 41 $FunctionContextHeight)) (and ($Is |a#0@@16| (TSet TChar)) ($Is |b#0@@16| (TSet TChar)))))) (and (forall ((|x#1@@2| T@U) (|y#1@@2| T@U) ) (!  (=> (and (and (and (= (type |x#1@@2|) charType) (= (type |y#1@@2|) charType)) (and ($Is |x#1@@2| TChar) ($Is |y#1@@2| TChar))) (U_2_bool (MapType0Select (Lit |b#0@@16|) ($Box |y#1@@2|)))) (|Char__Order.__default.lt#canCall| |x#1@@2| |y#1@@2|)) :qid |totalord.680:12| :skolemid |8893| :pattern ( (Char__Order.__default.lt |x#1@@2| |y#1@@2|)) :pattern ( (MapType0Select |b#0@@16| ($Box |y#1@@2|)) (MapType0Select |a#0@@16| ($Box |x#1@@2|))) )) (and (=> (Char__Order.__default.SetAllLt (Lit |a#0@@16|) (Lit |b#0@@16|)) (forall ((|x#1@@3| T@U) (|y#1@@3| T@U) ) (!  (=> (and (and (and (= (type |x#1@@3|) charType) (= (type |y#1@@3|) charType)) (and ($Is |x#1@@3| TChar) ($Is |y#1@@3| TChar))) (and (U_2_bool (MapType0Select (Lit |a#0@@16|) ($Box |x#1@@3|))) (U_2_bool (MapType0Select (Lit |b#0@@16|) ($Box |y#1@@3|))))) (Char__Order.__default.lt |x#1@@3| |y#1@@3|)) :qid |totalord.680:12| :skolemid |8894| :pattern ( (Char__Order.__default.lt |x#1@@3| |y#1@@3|)) :pattern ( (MapType0Select |b#0@@16| ($Box |y#1@@3|)) (MapType0Select |a#0@@16| ($Box |x#1@@3|))) ))) (=> (forall ((|x#1@@4| T@U) (|y#1@@4| T@U) ) (!  (=> (and (and (and (= (type |x#1@@4|) charType) (= (type |y#1@@4|) charType)) (and ($Is |x#1@@4| TChar) ($Is |y#1@@4| TChar))) (and (U_2_bool (MapType0Select (Lit |a#0@@16|) ($Box |x#1@@4|))) (U_2_bool (MapType0Select (Lit |b#0@@16|) ($Box |y#1@@4|))))) (Char__Order.__default.lt |x#1@@4| |y#1@@4|)) :qid |totalord.680:12| :skolemid |8894| :pattern ( (Char__Order.__default.lt |x#1@@4| |y#1@@4|)) :pattern ( (MapType0Select |b#0@@16| ($Box |y#1@@4|)) (MapType0Select |a#0@@16| ($Box |x#1@@4|))) )) (Char__Order.__default.SetAllLt (Lit |a#0@@16|) (Lit |b#0@@16|)))))) :qid |totalord.679:22| :weight 3 :skolemid |8895| :pattern ( (Char__Order.__default.SetAllLt (Lit |a#0@@16|) (Lit |b#0@@16|))) ))))
(assert (forall (($ly@@49 T@U) (|a#0@@17| T@U) ) (!  (=> (and (= (type $ly@@49) LayerTypeType) (= (type |a#0@@17|) charType)) (and (=> (Char__Order.__default.NotMinimum ($LS $ly@@49) |a#0@@17|) (Char__Order.__default.NotMinimum $ly@@49 |a#0@@17|)) (=> (Char__Order.__default.NotMinimum $ly@@49 |a#0@@17|) (Char__Order.__default.NotMinimum ($LS $ly@@49) |a#0@@17|)))) :qid |totalord.696:23| :skolemid |8911| :pattern ( (Char__Order.__default.NotMinimum ($LS $ly@@49) |a#0@@17|)) )))
(assert (forall (($ly@@50 T@U) (|a#0@@18| T@U) ) (!  (=> (and (= (type $ly@@50) LayerTypeType) (= (type |a#0@@18|) charType)) (and (=> (Char__Order.__default.NotMinimum $ly@@50 |a#0@@18|) (Char__Order.__default.NotMinimum $LZ |a#0@@18|)) (=> (Char__Order.__default.NotMinimum $LZ |a#0@@18|) (Char__Order.__default.NotMinimum $ly@@50 |a#0@@18|)))) :qid |totalord.696:23| :skolemid |8912| :pattern ( (Char__Order.__default.NotMinimum (AsFuelBottom $ly@@50) |a#0@@18|)) )))
(assert  (=> (<= 43 $FunctionContextHeight) (forall (($ly@@51 T@U) (|a#0@@19| T@U) ) (!  (=> (and (and (= (type $ly@@51) LayerTypeType) (= (type |a#0@@19|) charType)) (or (|Char__Order.__default.NotMinimum#canCall| |a#0@@19|) (and (not (= 43 $FunctionContextHeight)) ($Is |a#0@@19| TChar)))) true) :qid |totalord.696:23| :skolemid |8913| :pattern ( (Char__Order.__default.NotMinimum $ly@@51 |a#0@@19|)) ))))
(assert (forall (($ly@@52 T@U) (|a#0@@20| T@U) ) (!  (=> (and (and (= (type $ly@@52) LayerTypeType) (= (type |a#0@@20|) charType)) ($Is |a#0@@20| TChar)) (and (=> (|Char__Order.__default.NotMinimum#requires| $ly@@52 |a#0@@20|) true) (=> true (|Char__Order.__default.NotMinimum#requires| $ly@@52 |a#0@@20|)))) :qid |totalord.696:23| :skolemid |8914| :pattern ( (|Char__Order.__default.NotMinimum#requires| $ly@@52 |a#0@@20|)) )))
(assert  (=> (<= 43 $FunctionContextHeight) (forall (($ly@@53 T@U) (|a#0@@21| T@U) ) (!  (=> (and (and (= (type $ly@@53) LayerTypeType) (= (type |a#0@@21|) charType)) (or (|Char__Order.__default.NotMinimum#canCall| |a#0@@21|) (and (not (= 43 $FunctionContextHeight)) ($Is |a#0@@21| TChar)))) (and (forall ((|b#0@@17| T@U) ) (!  (=> (and (= (type |b#0@@17|) charType) ($Is |b#0@@17| TChar)) (|Char__Order.__default.lt#canCall| |b#0@@17| |a#0@@21|)) :qid |totalord.697:12| :skolemid |8915| :pattern ( (Char__Order.__default.lt |b#0@@17| |a#0@@21|)) )) (and (=> (Char__Order.__default.NotMinimum ($LS $ly@@53) |a#0@@21|) (exists ((|b#0@@18| T@U) ) (!  (and (= (type |b#0@@18|) charType) (and ($Is |b#0@@18| TChar) (Char__Order.__default.lt |b#0@@18| |a#0@@21|))) :qid |totalord.697:12| :skolemid |8916| :pattern ( (Char__Order.__default.lt |b#0@@18| |a#0@@21|)) ))) (=> (exists ((|b#0@@19| T@U) ) (!  (and (= (type |b#0@@19|) charType) (and ($Is |b#0@@19| TChar) (Char__Order.__default.lt |b#0@@19| |a#0@@21|))) :qid |totalord.697:12| :skolemid |8916| :pattern ( (Char__Order.__default.lt |b#0@@19| |a#0@@21|)) )) (Char__Order.__default.NotMinimum ($LS $ly@@53) |a#0@@21|))))) :qid |totalord.696:23| :skolemid |8917| :pattern ( (Char__Order.__default.NotMinimum ($LS $ly@@53) |a#0@@21|)) ))))
(assert  (=> (<= 43 $FunctionContextHeight) (forall (($ly@@54 T@U) (|a#0@@22| T@U) ) (!  (=> (and (and (= (type $ly@@54) LayerTypeType) (= (type |a#0@@22|) charType)) (or (|Char__Order.__default.NotMinimum#canCall| (Lit |a#0@@22|)) (and (not (= 43 $FunctionContextHeight)) ($Is |a#0@@22| TChar)))) (and (forall ((|b#1@@0| T@U) ) (!  (=> (and (= (type |b#1@@0|) charType) ($Is |b#1@@0| TChar)) (|Char__Order.__default.lt#canCall| |b#1@@0| (Lit |a#0@@22|))) :qid |totalord.697:12| :skolemid |8918| :pattern ( (Char__Order.__default.lt |b#1@@0| |a#0@@22|)) )) (and (=> (Char__Order.__default.NotMinimum ($LS $ly@@54) (Lit |a#0@@22|)) (exists ((|b#1@@1| T@U) ) (!  (and (= (type |b#1@@1|) charType) (and ($Is |b#1@@1| TChar) (Char__Order.__default.lt |b#1@@1| (Lit |a#0@@22|)))) :qid |totalord.697:12| :skolemid |8919| :pattern ( (Char__Order.__default.lt |b#1@@1| |a#0@@22|)) ))) (=> (exists ((|b#1@@2| T@U) ) (!  (and (= (type |b#1@@2|) charType) (and ($Is |b#1@@2| TChar) (Char__Order.__default.lt |b#1@@2| (Lit |a#0@@22|)))) :qid |totalord.697:12| :skolemid |8919| :pattern ( (Char__Order.__default.lt |b#1@@2| |a#0@@22|)) )) (Char__Order.__default.NotMinimum ($LS $ly@@54) (Lit |a#0@@22|)))))) :qid |totalord.696:23| :weight 3 :skolemid |8920| :pattern ( (Char__Order.__default.NotMinimum ($LS $ly@@54) (Lit |a#0@@22|))) ))))
(assert (forall ((arg0@@220 T@U) (arg1@@107 T@U) (arg2@@61 T@U) (arg3@@39 T@U) ) (! (= (type (Char__Order.__default.MapPivotedUnion arg0@@220 arg1@@107 arg2@@61 arg3@@39)) (MapType BoxType BoxType)) :qid |funType:Char__Order.__default.MapPivotedUnion| :pattern ( (Char__Order.__default.MapPivotedUnion arg0@@220 arg1@@107 arg2@@61 arg3@@39)) )))
(assert  (=> (<= 47 $FunctionContextHeight) (forall ((Char_Order._default.MapPivotedUnion$Value T@U) (|left#0| T@U) (|pivot#0| T@U) (|right#0| T@U) ) (!  (=> (and (and (and (and (= (type Char_Order._default.MapPivotedUnion$Value) TyType) (= (type |left#0|) (MapType BoxType BoxType))) (= (type |pivot#0|) charType)) (= (type |right#0|) (MapType BoxType BoxType))) (or (|Char__Order.__default.MapPivotedUnion#canCall| Char_Order._default.MapPivotedUnion$Value |left#0| |pivot#0| |right#0|) (and (not (= 47 $FunctionContextHeight)) (and (and ($Is |left#0| (TMap TChar Char_Order._default.MapPivotedUnion$Value)) ($Is |pivot#0| TChar)) ($Is |right#0| (TMap TChar Char_Order._default.MapPivotedUnion$Value)))))) ($Is (Char__Order.__default.MapPivotedUnion Char_Order._default.MapPivotedUnion$Value |left#0| |pivot#0| |right#0|) (TMap TChar Char_Order._default.MapPivotedUnion$Value))) :qid |unknown.0:0| :skolemid |8927| :pattern ( (Char__Order.__default.MapPivotedUnion Char_Order._default.MapPivotedUnion$Value |left#0| |pivot#0| |right#0|)) ))))
(assert (forall ((Char_Order._default.MapPivotedUnion$Value@@0 T@U) (|left#0@@0| T@U) (|pivot#0@@0| T@U) (|right#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Char_Order._default.MapPivotedUnion$Value@@0) TyType) (= (type |left#0@@0|) (MapType BoxType BoxType))) (= (type |pivot#0@@0|) charType)) (= (type |right#0@@0|) (MapType BoxType BoxType))) (and (and ($Is |left#0@@0| (TMap TChar Char_Order._default.MapPivotedUnion$Value@@0)) ($Is |pivot#0@@0| TChar)) ($Is |right#0@@0| (TMap TChar Char_Order._default.MapPivotedUnion$Value@@0)))) (and (=> (|Char__Order.__default.MapPivotedUnion#requires| Char_Order._default.MapPivotedUnion$Value@@0 |left#0@@0| |pivot#0@@0| |right#0@@0|) true) (=> true (|Char__Order.__default.MapPivotedUnion#requires| Char_Order._default.MapPivotedUnion$Value@@0 |left#0@@0| |pivot#0@@0| |right#0@@0|)))) :qid |unknown.0:0| :skolemid |8928| :pattern ( (|Char__Order.__default.MapPivotedUnion#requires| Char_Order._default.MapPivotedUnion$Value@@0 |left#0@@0| |pivot#0@@0| |right#0@@0|)) )))
(assert  (and (and (and (and (forall ((arg0@@221 T@U) (arg1@@108 T@U) ) (! (= (type (|lambda#29| arg0@@221 arg1@@108)) (MapType0Type BoxType boolType)) :qid |funType:lambda#29| :pattern ( (|lambda#29| arg0@@221 arg1@@108)) )) (forall ((arg0@@222 T@U) (arg1@@109 T@U) (arg2@@62 T@U) (arg3@@40 T@U) ) (! (= (type (Maps.__default.MapIRestrict arg0@@222 arg1@@109 arg2@@62 arg3@@40)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapIRestrict| :pattern ( (Maps.__default.MapIRestrict arg0@@222 arg1@@109 arg2@@62 arg3@@40)) ))) (forall ((arg0@@223 T@U) (arg1@@110 T@U) ) (! (= (type (|lambda#30| arg0@@223 arg1@@110)) (MapType0Type BoxType boolType)) :qid |funType:lambda#30| :pattern ( (|lambda#30| arg0@@223 arg1@@110)) ))) (forall ((arg0@@224 T@U) (arg1@@111 T@U) (arg2@@63 T@U) (arg3@@41 T@U) (arg4@@28 T@U) ) (! (= (type (Maps.__default.MapDisjointUnion arg0@@224 arg1@@111 arg2@@63 arg3@@41 arg4@@28)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapDisjointUnion| :pattern ( (Maps.__default.MapDisjointUnion arg0@@224 arg1@@111 arg2@@63 arg3@@41 arg4@@28)) ))) (= (type StartFuel_Maps._default.MapDisjointUnion) LayerTypeType)))
(assert  (=> (<= 47 $FunctionContextHeight) (forall ((Char_Order._default.MapPivotedUnion$Value@@1 T@U) (|left#0@@1| T@U) (|pivot#0@@1| T@U) (|right#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Char_Order._default.MapPivotedUnion$Value@@1) TyType) (= (type |left#0@@1|) (MapType BoxType BoxType))) (= (type |pivot#0@@1|) charType)) (= (type |right#0@@1|) (MapType BoxType BoxType))) (or (|Char__Order.__default.MapPivotedUnion#canCall| Char_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| |pivot#0@@1| |right#0@@1|) (and (not (= 47 $FunctionContextHeight)) (and (and ($Is |left#0@@1| (TMap TChar Char_Order._default.MapPivotedUnion$Value@@1)) ($Is |pivot#0@@1| TChar)) ($Is |right#0@@1| (TMap TChar Char_Order._default.MapPivotedUnion$Value@@1)))))) (and (and (and (forall ((|k#0| T@U) ) (!  (=> (and (= (type |k#0|) charType) ($Is |k#0| TChar)) (|Char__Order.__default.lt#canCall| |k#0| |pivot#0@@1|)) :qid |totalord.716:57| :skolemid |8929| :pattern ( (Char__Order.__default.lt |k#0| |pivot#0@@1|)) )) (|Maps.__default.MapIRestrict#canCall| TChar Char_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| (|lambda#29| TChar |pivot#0@@1|))) (let ((|restricted_left#0| (Maps.__default.MapIRestrict TChar Char_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| (|lambda#29| TChar |pivot#0@@1|)))) (and (and (forall ((|k#1| T@U) ) (!  (=> (and (= (type |k#1|) charType) ($Is |k#1| TChar)) (|Char__Order.__default.lte#canCall| |pivot#0@@1| |k#1|)) :qid |totalord.717:59| :skolemid |8930| :pattern ( (Char__Order.__default.lte |pivot#0@@1| |k#1|)) )) (|Maps.__default.MapIRestrict#canCall| TChar Char_Order._default.MapPivotedUnion$Value@@1 |right#0@@1| (|lambda#30| TChar |pivot#0@@1|))) (let ((|restricted_right#0| (Maps.__default.MapIRestrict TChar Char_Order._default.MapPivotedUnion$Value@@1 |right#0@@1| (|lambda#30| TChar |pivot#0@@1|)))) (|Maps.__default.MapDisjointUnion#canCall| TChar Char_Order._default.MapPivotedUnion$Value@@1 |restricted_left#0| |restricted_right#0|))))) (= (Char__Order.__default.MapPivotedUnion Char_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| |pivot#0@@1| |right#0@@1|) (let ((|restricted_left#0@@0| (Maps.__default.MapIRestrict TChar Char_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| (|lambda#29| TChar |pivot#0@@1|)))) (let ((|restricted_right#0@@0| (Maps.__default.MapIRestrict TChar Char_Order._default.MapPivotedUnion$Value@@1 |right#0@@1| (|lambda#30| TChar |pivot#0@@1|)))) (Maps.__default.MapDisjointUnion TChar Char_Order._default.MapPivotedUnion$Value@@1 StartFuel_Maps._default.MapDisjointUnion |restricted_left#0@@0| |restricted_right#0@@0|)))))) :qid |unknown.0:0| :skolemid |8931| :pattern ( (Char__Order.__default.MapPivotedUnion Char_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| |pivot#0@@1| |right#0@@1|)) ))))
(assert  (=> (<= 47 $FunctionContextHeight) (forall ((Char_Order._default.MapPivotedUnion$Value@@2 T@U) (|left#0@@2| T@U) (|pivot#0@@2| T@U) (|right#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Char_Order._default.MapPivotedUnion$Value@@2) TyType) (= (type |left#0@@2|) (MapType BoxType BoxType))) (= (type |pivot#0@@2|) charType)) (= (type |right#0@@2|) (MapType BoxType BoxType))) (or (|Char__Order.__default.MapPivotedUnion#canCall| Char_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (Lit |pivot#0@@2|) (Lit |right#0@@2|)) (and (not (= 47 $FunctionContextHeight)) (and (and ($Is |left#0@@2| (TMap TChar Char_Order._default.MapPivotedUnion$Value@@2)) ($Is |pivot#0@@2| TChar)) ($Is |right#0@@2| (TMap TChar Char_Order._default.MapPivotedUnion$Value@@2)))))) (and (and (and (forall ((|k#2| T@U) ) (!  (=> (and (= (type |k#2|) charType) ($Is |k#2| TChar)) (|Char__Order.__default.lt#canCall| |k#2| (Lit |pivot#0@@2|))) :qid |totalord.716:57| :skolemid |8932| :pattern ( (Char__Order.__default.lt |k#2| |pivot#0@@2|)) )) (|Maps.__default.MapIRestrict#canCall| TChar Char_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (|lambda#29| TChar (Lit |pivot#0@@2|)))) (let ((|restricted_left#1| (Maps.__default.MapIRestrict TChar Char_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (|lambda#29| TChar (Lit |pivot#0@@2|))))) (and (and (forall ((|k#3| T@U) ) (!  (=> (and (= (type |k#3|) charType) ($Is |k#3| TChar)) (|Char__Order.__default.lte#canCall| (Lit |pivot#0@@2|) |k#3|)) :qid |totalord.717:59| :skolemid |8933| :pattern ( (Char__Order.__default.lte |pivot#0@@2| |k#3|)) )) (|Maps.__default.MapIRestrict#canCall| TChar Char_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@2|) (|lambda#30| TChar (Lit |pivot#0@@2|)))) (let ((|restricted_right#1| (Maps.__default.MapIRestrict TChar Char_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@2|) (|lambda#30| TChar (Lit |pivot#0@@2|))))) (|Maps.__default.MapDisjointUnion#canCall| TChar Char_Order._default.MapPivotedUnion$Value@@2 |restricted_left#1| |restricted_right#1|))))) (= (Char__Order.__default.MapPivotedUnion Char_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (Lit |pivot#0@@2|) (Lit |right#0@@2|)) (let ((|restricted_left#1@@0| (Maps.__default.MapIRestrict TChar Char_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (|lambda#29| TChar (Lit |pivot#0@@2|))))) (let ((|restricted_right#1@@0| (Maps.__default.MapIRestrict TChar Char_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@2|) (|lambda#30| TChar (Lit |pivot#0@@2|))))) (Maps.__default.MapDisjointUnion TChar Char_Order._default.MapPivotedUnion$Value@@2 StartFuel_Maps._default.MapDisjointUnion |restricted_left#1@@0| |restricted_right#1@@0|)))))) :qid |unknown.0:0| :weight 3 :skolemid |8934| :pattern ( (Char__Order.__default.MapPivotedUnion Char_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (Lit |pivot#0@@2|) (Lit |right#0@@2|))) ))))
(assert (forall ((arg0@@225 T@U) ) (! (= (type (Tclass.Options.Option arg0@@225)) TyType) :qid |funType:Tclass.Options.Option| :pattern ( (Tclass.Options.Option arg0@@225)) )))
(assert (forall ((Options.Option$V T@U) ) (!  (=> (= (type Options.Option$V) TyType) (= (Tag (Tclass.Options.Option Options.Option$V)) Tagclass.Options.Option)) :qid |unknown.0:0| :skolemid |8942| :pattern ( (Tclass.Options.Option Options.Option$V)) )))
(assert (forall ((arg0@@226 T@U) ) (! (= (type (Tclass.Options.Option_0 arg0@@226)) TyType) :qid |funType:Tclass.Options.Option_0| :pattern ( (Tclass.Options.Option_0 arg0@@226)) )))
(assert (forall ((Options.Option$V@@0 T@U) ) (!  (=> (= (type Options.Option$V@@0) TyType) (= (Tclass.Options.Option_0 (Tclass.Options.Option Options.Option$V@@0)) Options.Option$V@@0)) :qid |unknown.0:0| :skolemid |8943| :pattern ( (Tclass.Options.Option Options.Option$V@@0)) )))
(assert (forall ((Options.Option$V@@1 T@U) (bx@@78 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@1) TyType) (= (type bx@@78) BoxType)) ($IsBox bx@@78 (Tclass.Options.Option Options.Option$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@78)) bx@@78) ($Is ($Unbox DatatypeTypeType bx@@78) (Tclass.Options.Option Options.Option$V@@1)))) :qid |unknown.0:0| :skolemid |8944| :pattern ( ($IsBox bx@@78 (Tclass.Options.Option Options.Option$V@@1))) )))
(assert (forall ((arg0@@227 T@U) (arg1@@112 T@U) ) (! (= (type (Char__Order.__default.SetSuccessor arg0@@227 arg1@@112)) DatatypeTypeType) :qid |funType:Char__Order.__default.SetSuccessor| :pattern ( (Char__Order.__default.SetSuccessor arg0@@227 arg1@@112)) )))
(assert  (=> (<= 49 $FunctionContextHeight) (forall ((|m#0| T@U) (|key#0@@25| T@U) ) (!  (=> (and (and (= (type |m#0|) (MapType0Type BoxType boolType)) (= (type |key#0@@25|) charType)) (or (|Char__Order.__default.SetSuccessor#canCall| |m#0| |key#0@@25|) (and (not (= 49 $FunctionContextHeight)) (and ($Is |m#0| (TSet TChar)) ($Is |key#0@@25| TChar))))) ($Is (Char__Order.__default.SetSuccessor |m#0| |key#0@@25|) (Tclass.Options.Option TChar))) :qid |totalord.721:25| :skolemid |8945| :pattern ( (Char__Order.__default.SetSuccessor |m#0| |key#0@@25|)) ))))
(assert (forall (($Heap T@U) (|m#0@@0| T@U) (|key#0@@26| T@U) ) (!  (=> (and (and (and (= (type $Heap) (MapType0Type refType MapType1Type)) (= (type |m#0@@0|) (MapType0Type BoxType boolType))) (= (type |key#0@@26|) charType)) (and (and ($IsGoodHeap $Heap) ($Is |m#0@@0| (TSet TChar))) ($Is |key#0@@26| TChar))) (and (=> (|Char__Order.__default.SetSuccessor#requires| |m#0@@0| |key#0@@26|) true) (=> true (|Char__Order.__default.SetSuccessor#requires| |m#0@@0| |key#0@@26|)))) :qid |totalord.721:12| :skolemid |8946| :pattern ( (|Char__Order.__default.SetSuccessor#requires| |m#0@@0| |key#0@@26|) ($IsGoodHeap $Heap)) )))
(assert (forall ((arg0@@228 T@U) (arg1@@113 T@U) ) (! (= (type (|$let#0_next| arg0@@228 arg1@@113)) charType) :qid |funType:$let#0_next| :pattern ( (|$let#0_next| arg0@@228 arg1@@113)) )))
(assert (forall ((m@@49 T@U) (key T@U) ) (!  (=> (and (and (= (type m@@49) (MapType0Type BoxType boolType)) (= (type key) charType)) (|$let#0$canCall| m@@49 key)) (and ($Is (|$let#0_next| m@@49 key) TChar) (and (and (U_2_bool (MapType0Select m@@49 ($Box (|$let#0_next| m@@49 key)))) (Char__Order.__default.lt key (|$let#0_next| m@@49 key))) (forall ((|other#1| T@U) ) (!  (=> (and (= (type |other#1|) charType) ($Is |other#1| TChar)) (=> (and (and (U_2_bool (MapType0Select m@@49 ($Box |other#1|))) (not (= |other#1| (|$let#0_next| m@@49 key)))) (Char__Order.__default.lt key |other#1|)) (Char__Order.__default.lt (|$let#0_next| m@@49 key) |other#1|))) :qid |totalord.726:18| :skolemid |8951| :pattern ( (Char__Order.__default.lt (|$let#0_next| m@@49 key) |other#1|)) :pattern ( (Char__Order.__default.lt key |other#1|)) :pattern ( (MapType0Select m@@49 ($Box |other#1|))) ))))) :qid |totalord.723:8| :skolemid |8952| :pattern ( (|$let#0_next| m@@49 key)) )))
(assert  (and (forall ((arg0@@229 T@U) ) (! (= (type (|#Options.Option.Some| arg0@@229)) DatatypeTypeType) :qid |funType:#Options.Option.Some| :pattern ( (|#Options.Option.Some| arg0@@229)) )) (= (type |#Options.Option.None|) DatatypeTypeType)))
(assert  (=> (<= 49 $FunctionContextHeight) (forall (($Heap@@0 T@U) (|m#0@@1| T@U) (|key#0@@27| T@U) ) (!  (=> (and (and (and (= (type $Heap@@0) (MapType0Type refType MapType1Type)) (= (type |m#0@@1|) (MapType0Type BoxType boolType))) (= (type |key#0@@27|) charType)) (or (|Char__Order.__default.SetSuccessor#canCall| |m#0@@1| |key#0@@27|) (and (not (= 49 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@0) ($Is |m#0@@1| (TSet TChar))) ($Is |key#0@@27| TChar))))) (and (and (forall ((|next#0| T@U) ) (!  (=> (and (= (type |next#0|) charType) ($Is |next#0| TChar)) (and (=> (U_2_bool (MapType0Select |m#0@@1| ($Box |next#0|))) (|Char__Order.__default.lt#canCall| |key#0@@27| |next#0|)) (=> (and (|Char__Order.__default.lt#canCall| |key#0@@27| |next#0|) (Char__Order.__default.lt |key#0@@27| |next#0|)) (forall ((|other#0| T@U) ) (!  (=> (and (= (type |other#0|) charType) ($Is |other#0| TChar)) (and (=> (not (= |other#0| |next#0|)) (|Char__Order.__default.lt#canCall| |key#0@@27| |other#0|)) (=> (and (|Char__Order.__default.lt#canCall| |key#0@@27| |other#0|) (Char__Order.__default.lt |key#0@@27| |other#0|)) (|Char__Order.__default.lt#canCall| |next#0| |other#0|)))) :qid |totalord.726:18| :skolemid |8947| :pattern ( (Char__Order.__default.lt |next#0| |other#0|)) :pattern ( (Char__Order.__default.lt |key#0@@27| |other#0|)) :pattern ( (MapType0Select |m#0@@1| ($Box |other#0|))) ))))) :qid |totalord.723:8| :skolemid |8948| :pattern ( (Char__Order.__default.lt |key#0@@27| |next#0|)) :pattern ( (MapType0Select |m#0@@1| ($Box |next#0|))) )) (=> (exists ((|next#0@@0| T@U) ) (!  (and (= (type |next#0@@0|) charType) (and ($Is |next#0@@0| TChar) (and (and (U_2_bool (MapType0Select |m#0@@1| ($Box |next#0@@0|))) (Char__Order.__default.lt |key#0@@27| |next#0@@0|)) (forall ((|other#0@@0| T@U) ) (!  (=> (and (= (type |other#0@@0|) charType) ($Is |other#0@@0| TChar)) (=> (and (and (U_2_bool (MapType0Select |m#0@@1| ($Box |other#0@@0|))) (not (= |other#0@@0| |next#0@@0|))) (Char__Order.__default.lt |key#0@@27| |other#0@@0|)) (Char__Order.__default.lt |next#0@@0| |other#0@@0|))) :qid |totalord.726:18| :skolemid |8949| :pattern ( (Char__Order.__default.lt |next#0@@0| |other#0@@0|)) :pattern ( (Char__Order.__default.lt |key#0@@27| |other#0@@0|)) :pattern ( (MapType0Select |m#0@@1| ($Box |other#0@@0|))) ))))) :qid |totalord.723:8| :skolemid |8950| :pattern ( (Char__Order.__default.lt |key#0@@27| |next#0@@0|)) :pattern ( (MapType0Select |m#0@@1| ($Box |next#0@@0|))) )) (|$let#0$canCall| |m#0@@1| |key#0@@27|))) (= (Char__Order.__default.SetSuccessor |m#0@@1| |key#0@@27|) (ite (exists ((|next#0@@1| T@U) ) (!  (and (= (type |next#0@@1|) charType) (and ($Is |next#0@@1| TChar) (and (and (U_2_bool (MapType0Select |m#0@@1| ($Box |next#0@@1|))) (Char__Order.__default.lt |key#0@@27| |next#0@@1|)) (forall ((|other#0@@1| T@U) ) (!  (=> (and (= (type |other#0@@1|) charType) ($Is |other#0@@1| TChar)) (=> (and (and (U_2_bool (MapType0Select |m#0@@1| ($Box |other#0@@1|))) (not (= |other#0@@1| |next#0@@1|))) (Char__Order.__default.lt |key#0@@27| |other#0@@1|)) (Char__Order.__default.lt |next#0@@1| |other#0@@1|))) :qid |totalord.726:18| :skolemid |8953| :pattern ( (Char__Order.__default.lt |next#0@@1| |other#0@@1|)) :pattern ( (Char__Order.__default.lt |key#0@@27| |other#0@@1|)) :pattern ( (MapType0Select |m#0@@1| ($Box |other#0@@1|))) ))))) :qid |totalord.723:8| :skolemid |8954| :pattern ( (Char__Order.__default.lt |key#0@@27| |next#0@@1|)) :pattern ( (MapType0Select |m#0@@1| ($Box |next#0@@1|))) )) (let ((|next#1| (|$let#0_next| |m#0@@1| |key#0@@27|))) (|#Options.Option.Some| ($Box |next#1|))) |#Options.Option.None|)))) :qid |totalord.721:12| :skolemid |8955| :pattern ( (Char__Order.__default.SetSuccessor |m#0@@1| |key#0@@27|) ($IsGoodHeap $Heap@@0)) ))))
(assert  (=> (<= 49 $FunctionContextHeight) (forall (($Heap@@1 T@U) (|m#0@@2| T@U) (|key#0@@28| T@U) ) (!  (=> (and (and (and (= (type $Heap@@1) (MapType0Type refType MapType1Type)) (= (type |m#0@@2|) (MapType0Type BoxType boolType))) (= (type |key#0@@28|) charType)) (or (|Char__Order.__default.SetSuccessor#canCall| (Lit |m#0@@2|) (Lit |key#0@@28|)) (and (not (= 49 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@1) ($Is |m#0@@2| (TSet TChar))) ($Is |key#0@@28| TChar))))) (and (and (forall ((|next#2| T@U) ) (!  (=> (and (= (type |next#2|) charType) ($Is |next#2| TChar)) (and (=> (U_2_bool (MapType0Select (Lit |m#0@@2|) ($Box |next#2|))) (|Char__Order.__default.lt#canCall| (Lit |key#0@@28|) |next#2|)) (=> (and (|Char__Order.__default.lt#canCall| (Lit |key#0@@28|) |next#2|) (Char__Order.__default.lt (Lit |key#0@@28|) |next#2|)) (forall ((|other#2| T@U) ) (!  (=> (and (= (type |other#2|) charType) ($Is |other#2| TChar)) (and (=> (not (= |other#2| |next#2|)) (|Char__Order.__default.lt#canCall| (Lit |key#0@@28|) |other#2|)) (=> (and (|Char__Order.__default.lt#canCall| (Lit |key#0@@28|) |other#2|) (Char__Order.__default.lt (Lit |key#0@@28|) |other#2|)) (|Char__Order.__default.lt#canCall| |next#2| |other#2|)))) :qid |totalord.726:18| :skolemid |8956| :pattern ( (Char__Order.__default.lt |next#2| |other#2|)) :pattern ( (Char__Order.__default.lt |key#0@@28| |other#2|)) :pattern ( (MapType0Select |m#0@@2| ($Box |other#2|))) ))))) :qid |totalord.723:8| :skolemid |8957| :pattern ( (Char__Order.__default.lt |key#0@@28| |next#2|)) :pattern ( (MapType0Select |m#0@@2| ($Box |next#2|))) )) (=> (exists ((|next#2@@0| T@U) ) (!  (and (= (type |next#2@@0|) charType) (and ($Is |next#2@@0| TChar) (and (and (U_2_bool (MapType0Select (Lit |m#0@@2|) ($Box |next#2@@0|))) (Char__Order.__default.lt (Lit |key#0@@28|) |next#2@@0|)) (forall ((|other#2@@0| T@U) ) (!  (=> (and (= (type |other#2@@0|) charType) ($Is |other#2@@0| TChar)) (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@2|) ($Box |other#2@@0|))) (not (= |other#2@@0| |next#2@@0|))) (Char__Order.__default.lt (Lit |key#0@@28|) |other#2@@0|)) (Char__Order.__default.lt |next#2@@0| |other#2@@0|))) :qid |totalord.726:18| :skolemid |8958| :pattern ( (Char__Order.__default.lt |next#2@@0| |other#2@@0|)) :pattern ( (Char__Order.__default.lt |key#0@@28| |other#2@@0|)) :pattern ( (MapType0Select |m#0@@2| ($Box |other#2@@0|))) ))))) :qid |totalord.723:8| :skolemid |8959| :pattern ( (Char__Order.__default.lt |key#0@@28| |next#2@@0|)) :pattern ( (MapType0Select |m#0@@2| ($Box |next#2@@0|))) )) (|$let#0$canCall| (Lit |m#0@@2|) (Lit |key#0@@28|)))) (= (Char__Order.__default.SetSuccessor (Lit |m#0@@2|) (Lit |key#0@@28|)) (ite (exists ((|next#2@@1| T@U) ) (!  (and (= (type |next#2@@1|) charType) (and ($Is |next#2@@1| TChar) (and (and (U_2_bool (MapType0Select (Lit |m#0@@2|) ($Box |next#2@@1|))) (Char__Order.__default.lt (Lit |key#0@@28|) |next#2@@1|)) (forall ((|other#2@@1| T@U) ) (!  (=> (and (= (type |other#2@@1|) charType) ($Is |other#2@@1| TChar)) (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@2|) ($Box |other#2@@1|))) (not (= |other#2@@1| |next#2@@1|))) (Char__Order.__default.lt (Lit |key#0@@28|) |other#2@@1|)) (Char__Order.__default.lt |next#2@@1| |other#2@@1|))) :qid |totalord.726:18| :skolemid |8960| :pattern ( (Char__Order.__default.lt |next#2@@1| |other#2@@1|)) :pattern ( (Char__Order.__default.lt |key#0@@28| |other#2@@1|)) :pattern ( (MapType0Select |m#0@@2| ($Box |other#2@@1|))) ))))) :qid |totalord.723:8| :skolemid |8961| :pattern ( (Char__Order.__default.lt |key#0@@28| |next#2@@1|)) :pattern ( (MapType0Select |m#0@@2| ($Box |next#2@@1|))) )) (let ((|next#3| (|$let#0_next| (Lit |m#0@@2|) (Lit |key#0@@28|)))) (|#Options.Option.Some| ($Box |next#3|))) |#Options.Option.None|)))) :qid |totalord.721:12| :weight 3 :skolemid |8962| :pattern ( (Char__Order.__default.SetSuccessor (Lit |m#0@@2|) (Lit |key#0@@28|)) ($IsGoodHeap $Heap@@1)) ))))
(assert (forall ((arg0@@230 T@U) (arg1@@114 T@U) (arg2@@64 T@U) ) (! (= (type (Char__Order.__default.MapSuccessor arg0@@230 arg1@@114 arg2@@64)) DatatypeTypeType) :qid |funType:Char__Order.__default.MapSuccessor| :pattern ( (Char__Order.__default.MapSuccessor arg0@@230 arg1@@114 arg2@@64)) )))
(assert  (=> (<= 50 $FunctionContextHeight) (forall ((Char_Order._default.MapSuccessor$V T@U) (|m#0@@3| T@U) (|key#0@@29| T@U) ) (!  (=> (and (and (and (= (type Char_Order._default.MapSuccessor$V) TyType) (= (type |m#0@@3|) (MapType BoxType BoxType))) (= (type |key#0@@29|) charType)) (or (|Char__Order.__default.MapSuccessor#canCall| Char_Order._default.MapSuccessor$V |m#0@@3| |key#0@@29|) (and (not (= 50 $FunctionContextHeight)) (and ($Is |m#0@@3| (TMap TChar Char_Order._default.MapSuccessor$V)) ($Is |key#0@@29| TChar))))) ($Is (Char__Order.__default.MapSuccessor Char_Order._default.MapSuccessor$V |m#0@@3| |key#0@@29|) (Tclass.Options.Option TChar))) :qid |unknown.0:0| :skolemid |8969| :pattern ( (Char__Order.__default.MapSuccessor Char_Order._default.MapSuccessor$V |m#0@@3| |key#0@@29|)) ))))
(assert (forall ((Char_Order._default.MapSuccessor$V@@0 T@U) (|m#0@@4| T@U) (|key#0@@30| T@U) ) (!  (=> (and (and (and (= (type Char_Order._default.MapSuccessor$V@@0) TyType) (= (type |m#0@@4|) (MapType BoxType BoxType))) (= (type |key#0@@30|) charType)) (and ($Is |m#0@@4| (TMap TChar Char_Order._default.MapSuccessor$V@@0)) ($Is |key#0@@30| TChar))) (and (=> (|Char__Order.__default.MapSuccessor#requires| Char_Order._default.MapSuccessor$V@@0 |m#0@@4| |key#0@@30|) true) (=> true (|Char__Order.__default.MapSuccessor#requires| Char_Order._default.MapSuccessor$V@@0 |m#0@@4| |key#0@@30|)))) :qid |unknown.0:0| :skolemid |8970| :pattern ( (|Char__Order.__default.MapSuccessor#requires| Char_Order._default.MapSuccessor$V@@0 |m#0@@4| |key#0@@30|)) )))
(assert  (=> (<= 50 $FunctionContextHeight) (forall ((Char_Order._default.MapSuccessor$V@@1 T@U) (|m#0@@5| T@U) (|key#0@@31| T@U) ) (!  (=> (and (and (and (= (type Char_Order._default.MapSuccessor$V@@1) TyType) (= (type |m#0@@5|) (MapType BoxType BoxType))) (= (type |key#0@@31|) charType)) (or (|Char__Order.__default.MapSuccessor#canCall| Char_Order._default.MapSuccessor$V@@1 |m#0@@5| |key#0@@31|) (and (not (= 50 $FunctionContextHeight)) (and ($Is |m#0@@5| (TMap TChar Char_Order._default.MapSuccessor$V@@1)) ($Is |key#0@@31| TChar))))) (and (|Char__Order.__default.SetSuccessor#canCall| (|Map#Domain| |m#0@@5|) |key#0@@31|) (= (Char__Order.__default.MapSuccessor Char_Order._default.MapSuccessor$V@@1 |m#0@@5| |key#0@@31|) (Char__Order.__default.SetSuccessor (|Map#Domain| |m#0@@5|) |key#0@@31|)))) :qid |unknown.0:0| :skolemid |8971| :pattern ( (Char__Order.__default.MapSuccessor Char_Order._default.MapSuccessor$V@@1 |m#0@@5| |key#0@@31|)) ))))
(assert  (=> (<= 50 $FunctionContextHeight) (forall ((Char_Order._default.MapSuccessor$V@@2 T@U) (|m#0@@6| T@U) (|key#0@@32| T@U) ) (!  (=> (and (and (and (= (type Char_Order._default.MapSuccessor$V@@2) TyType) (= (type |m#0@@6|) (MapType BoxType BoxType))) (= (type |key#0@@32|) charType)) (or (|Char__Order.__default.MapSuccessor#canCall| Char_Order._default.MapSuccessor$V@@2 (Lit |m#0@@6|) (Lit |key#0@@32|)) (and (not (= 50 $FunctionContextHeight)) (and ($Is |m#0@@6| (TMap TChar Char_Order._default.MapSuccessor$V@@2)) ($Is |key#0@@32| TChar))))) (and (|Char__Order.__default.SetSuccessor#canCall| (Lit (|Map#Domain| (Lit |m#0@@6|))) (Lit |key#0@@32|)) (= (Char__Order.__default.MapSuccessor Char_Order._default.MapSuccessor$V@@2 (Lit |m#0@@6|) (Lit |key#0@@32|)) (Lit (Char__Order.__default.SetSuccessor (Lit (|Map#Domain| (Lit |m#0@@6|))) (Lit |key#0@@32|)))))) :qid |unknown.0:0| :weight 3 :skolemid |8972| :pattern ( (Char__Order.__default.MapSuccessor Char_Order._default.MapSuccessor$V@@2 (Lit |m#0@@6|) (Lit |key#0@@32|))) ))))
(assert (forall ((arg0@@231 T@U) (arg1@@115 T@U) ) (! (= (type (Char__Order.__default.SeqSuccessor arg0@@231 arg1@@115)) DatatypeTypeType) :qid |funType:Char__Order.__default.SeqSuccessor| :pattern ( (Char__Order.__default.SeqSuccessor arg0@@231 arg1@@115)) )))
(assert  (=> (<= 51 $FunctionContextHeight) (forall ((|m#0@@7| T@U) (|key#0@@33| T@U) ) (!  (=> (and (and (= (type |m#0@@7|) (SeqType BoxType)) (= (type |key#0@@33|) charType)) (or (|Char__Order.__default.SeqSuccessor#canCall| |m#0@@7| |key#0@@33|) (and (not (= 51 $FunctionContextHeight)) (and ($Is |m#0@@7| (TSeq TChar)) ($Is |key#0@@33| TChar))))) ($Is (Char__Order.__default.SeqSuccessor |m#0@@7| |key#0@@33|) (Tclass.Options.Option TChar))) :qid |totalord.737:25| :skolemid |8974| :pattern ( (Char__Order.__default.SeqSuccessor |m#0@@7| |key#0@@33|)) ))))
(assert (forall ((|m#0@@8| T@U) (|key#0@@34| T@U) ) (!  (=> (and (and (= (type |m#0@@8|) (SeqType BoxType)) (= (type |key#0@@34|) charType)) (and ($Is |m#0@@8| (TSeq TChar)) ($Is |key#0@@34| TChar))) (and (=> (|Char__Order.__default.SeqSuccessor#requires| |m#0@@8| |key#0@@34|) true) (=> true (|Char__Order.__default.SeqSuccessor#requires| |m#0@@8| |key#0@@34|)))) :qid |totalord.737:25| :skolemid |8975| :pattern ( (|Char__Order.__default.SeqSuccessor#requires| |m#0@@8| |key#0@@34|)) )))
(assert (forall ((arg0@@232 T@U) (arg1@@116 T@U) ) (! (= (type (|lambda#51| arg0@@232 arg1@@116)) (MapType0Type BoxType boolType)) :qid |funType:lambda#51| :pattern ( (|lambda#51| arg0@@232 arg1@@116)) )))
(assert  (=> (<= 51 $FunctionContextHeight) (forall ((|m#0@@9| T@U) (|key#0@@35| T@U) ) (!  (=> (and (and (= (type |m#0@@9|) (SeqType BoxType)) (= (type |key#0@@35|) charType)) (or (|Char__Order.__default.SeqSuccessor#canCall| |m#0@@9| |key#0@@35|) (and (not (= 51 $FunctionContextHeight)) (and ($Is |m#0@@9| (TSeq TChar)) ($Is |key#0@@35| TChar))))) (and (|Char__Order.__default.SetSuccessor#canCall| (|lambda#51| TChar |m#0@@9|) |key#0@@35|) (= (Char__Order.__default.SeqSuccessor |m#0@@9| |key#0@@35|) (Char__Order.__default.SetSuccessor (|lambda#51| TChar |m#0@@9|) |key#0@@35|)))) :qid |totalord.737:25| :skolemid |8976| :pattern ( (Char__Order.__default.SeqSuccessor |m#0@@9| |key#0@@35|)) ))))
(assert  (=> (<= 51 $FunctionContextHeight) (forall ((|m#0@@10| T@U) (|key#0@@36| T@U) ) (!  (=> (and (and (= (type |m#0@@10|) (SeqType BoxType)) (= (type |key#0@@36|) charType)) (or (|Char__Order.__default.SeqSuccessor#canCall| (Lit |m#0@@10|) (Lit |key#0@@36|)) (and (not (= 51 $FunctionContextHeight)) (and ($Is |m#0@@10| (TSeq TChar)) ($Is |key#0@@36| TChar))))) (and (|Char__Order.__default.SetSuccessor#canCall| (|lambda#51| TChar |m#0@@10|) (Lit |key#0@@36|)) (= (Char__Order.__default.SeqSuccessor (Lit |m#0@@10|) (Lit |key#0@@36|)) (Char__Order.__default.SetSuccessor (|lambda#51| TChar |m#0@@10|) (Lit |key#0@@36|))))) :qid |totalord.737:25| :weight 3 :skolemid |8977| :pattern ( (Char__Order.__default.SeqSuccessor (Lit |m#0@@10|) (Lit |key#0@@36|))) ))))
(assert (forall ((Char_Order._default.SortedSeqForMap$V T@U) ($ly@@55 T@U) (|s#0@@25| T@U) (|m#0@@11| T@U) ) (!  (=> (and (and (and (= (type Char_Order._default.SortedSeqForMap$V) TyType) (= (type $ly@@55) LayerTypeType)) (= (type |s#0@@25|) (SeqType BoxType))) (= (type |m#0@@11|) (MapType BoxType BoxType))) (and (=> (Char__Order.__default.SortedSeqForMap Char_Order._default.SortedSeqForMap$V ($LS $ly@@55) |s#0@@25| |m#0@@11|) (Char__Order.__default.SortedSeqForMap Char_Order._default.SortedSeqForMap$V $ly@@55 |s#0@@25| |m#0@@11|)) (=> (Char__Order.__default.SortedSeqForMap Char_Order._default.SortedSeqForMap$V $ly@@55 |s#0@@25| |m#0@@11|) (Char__Order.__default.SortedSeqForMap Char_Order._default.SortedSeqForMap$V ($LS $ly@@55) |s#0@@25| |m#0@@11|)))) :qid |unknown.0:0| :skolemid |8979| :pattern ( (Char__Order.__default.SortedSeqForMap Char_Order._default.SortedSeqForMap$V ($LS $ly@@55) |s#0@@25| |m#0@@11|)) )))
(assert (forall ((Char_Order._default.SortedSeqForMap$V@@0 T@U) ($ly@@56 T@U) (|s#0@@26| T@U) (|m#0@@12| T@U) ) (!  (=> (and (and (and (= (type Char_Order._default.SortedSeqForMap$V@@0) TyType) (= (type $ly@@56) LayerTypeType)) (= (type |s#0@@26|) (SeqType BoxType))) (= (type |m#0@@12|) (MapType BoxType BoxType))) (and (=> (Char__Order.__default.SortedSeqForMap Char_Order._default.SortedSeqForMap$V@@0 $ly@@56 |s#0@@26| |m#0@@12|) (Char__Order.__default.SortedSeqForMap Char_Order._default.SortedSeqForMap$V@@0 $LZ |s#0@@26| |m#0@@12|)) (=> (Char__Order.__default.SortedSeqForMap Char_Order._default.SortedSeqForMap$V@@0 $LZ |s#0@@26| |m#0@@12|) (Char__Order.__default.SortedSeqForMap Char_Order._default.SortedSeqForMap$V@@0 $ly@@56 |s#0@@26| |m#0@@12|)))) :qid |unknown.0:0| :skolemid |8980| :pattern ( (Char__Order.__default.SortedSeqForMap Char_Order._default.SortedSeqForMap$V@@0 (AsFuelBottom $ly@@56) |s#0@@26| |m#0@@12|)) )))
(assert  (=> (<= 53 $FunctionContextHeight) (forall ((Char_Order._default.SortedSeqForMap$V@@1 T@U) ($ly@@57 T@U) (|s#0@@27| T@U) (|m#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type Char_Order._default.SortedSeqForMap$V@@1) TyType) (= (type $ly@@57) LayerTypeType)) (= (type |s#0@@27|) (SeqType BoxType))) (= (type |m#0@@13|) (MapType BoxType BoxType))) (or (|Char__Order.__default.SortedSeqForMap#canCall| Char_Order._default.SortedSeqForMap$V@@1 |s#0@@27| |m#0@@13|) (and (not (= 53 $FunctionContextHeight)) (and ($Is |s#0@@27| (TSeq (Tclass._System.Tuple2 TChar Char_Order._default.SortedSeqForMap$V@@1))) ($Is |m#0@@13| (TMap TChar Char_Order._default.SortedSeqForMap$V@@1)))))) true) :qid |unknown.0:0| :skolemid |8981| :pattern ( (Char__Order.__default.SortedSeqForMap Char_Order._default.SortedSeqForMap$V@@1 $ly@@57 |s#0@@27| |m#0@@13|)) ))))
(assert (forall ((Char_Order._default.SortedSeqForMap$V@@2 T@U) ($ly@@58 T@U) (|s#0@@28| T@U) (|m#0@@14| T@U) ) (!  (=> (and (and (and (and (= (type Char_Order._default.SortedSeqForMap$V@@2) TyType) (= (type $ly@@58) LayerTypeType)) (= (type |s#0@@28|) (SeqType BoxType))) (= (type |m#0@@14|) (MapType BoxType BoxType))) (and ($Is |s#0@@28| (TSeq (Tclass._System.Tuple2 TChar Char_Order._default.SortedSeqForMap$V@@2))) ($Is |m#0@@14| (TMap TChar Char_Order._default.SortedSeqForMap$V@@2)))) (and (=> (|Char__Order.__default.SortedSeqForMap#requires| Char_Order._default.SortedSeqForMap$V@@2 $ly@@58 |s#0@@28| |m#0@@14|) true) (=> true (|Char__Order.__default.SortedSeqForMap#requires| Char_Order._default.SortedSeqForMap$V@@2 $ly@@58 |s#0@@28| |m#0@@14|)))) :qid |unknown.0:0| :skolemid |8982| :pattern ( (|Char__Order.__default.SortedSeqForMap#requires| Char_Order._default.SortedSeqForMap$V@@2 $ly@@58 |s#0@@28| |m#0@@14|)) )))
(assert  (and (and (forall ((arg0@@233 T@U) (arg1@@117 T@U) (arg2@@65 T@U) (arg3@@42 T@U) ) (! (= (type (Sequences.__default.Unzip arg0@@233 arg1@@117 arg2@@65 arg3@@42)) DatatypeTypeType) :qid |funType:Sequences.__default.Unzip| :pattern ( (Sequences.__default.Unzip arg0@@233 arg1@@117 arg2@@65 arg3@@42)) )) (= (type StartFuel_Sequences._default.Unzip) LayerTypeType)) (= (type StartFuel_Char_Order._default.IsStrictlySorted) LayerTypeType)))
(assert  (=> (<= 53 $FunctionContextHeight) (forall ((Char_Order._default.SortedSeqForMap$V@@3 T@U) ($ly@@59 T@U) (|s#0@@29| T@U) (|m#0@@15| T@U) ) (!  (=> (and (and (and (and (= (type Char_Order._default.SortedSeqForMap$V@@3) TyType) (= (type $ly@@59) LayerTypeType)) (= (type |s#0@@29|) (SeqType BoxType))) (= (type |m#0@@15|) (MapType BoxType BoxType))) (or (|Char__Order.__default.SortedSeqForMap#canCall| Char_Order._default.SortedSeqForMap$V@@3 |s#0@@29| |m#0@@15|) (and (not (= 53 $FunctionContextHeight)) (and ($Is |s#0@@29| (TSeq (Tclass._System.Tuple2 TChar Char_Order._default.SortedSeqForMap$V@@3))) ($Is |m#0@@15| (TMap TChar Char_Order._default.SortedSeqForMap$V@@3)))))) (and (and (and (and (and (|Sequences.__default.Unzip#canCall| TChar Char_Order._default.SortedSeqForMap$V@@3 |s#0@@29|) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip TChar Char_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@29|))) (|Char__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip TChar Char_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@29|))))) (=> (Char__Order.__default.IsStrictlySorted StartFuel_Char_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip TChar Char_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@29|)))) (forall ((|i#0@@3| Int) ) (!  (and (=> (< |i#0@@3| (|Seq#Length| |s#0@@29|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#0@@3|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#0@@3|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@15|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#0@@3|)))))) (=> (< |i#0@@3| (|Seq#Length| |s#0@@29|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#0@@3|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#0@@3|))))))) :qid |totalord.761:16| :skolemid |8983| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#0@@3|))) )))) (=> (and (forall ((|i#0@@4| Int) ) (!  (and (=> (< |i#0@@4| (|Seq#Length| |s#0@@29|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#0@@4|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#0@@4|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@15|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#0@@4|)))))) (=> (< |i#0@@4| (|Seq#Length| |s#0@@29|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#0@@4|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#0@@4|))))))) :qid |totalord.761:16| :skolemid |8986| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#0@@4|))) )) (forall ((|i#0@@5| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@5|) (< |i#0@@5| (|Seq#Length| |s#0@@29|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@15|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#0@@5|)))))) (=> (and (<= (LitInt 0) |i#0@@5|) (< |i#0@@5| (|Seq#Length| |s#0@@29|))) (= (MapType0Select (|Map#Elements| |m#0@@15|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#0@@5|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#0@@5|))))))) :qid |totalord.761:16| :skolemid |8987| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#0@@5|))) ))) (forall ((|key#0@@37| T@U) ) (!  (=> (and (and (= (type |key#0@@37|) charType) ($Is |key#0@@37| TChar)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@15|) ($Box |key#0@@37|)))) (forall ((|i#1@@3| Int) ) (!  (and (=> (< |i#1@@3| (|Seq#Length| |s#0@@29|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#1@@3|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#1@@3|))) (= ($Unbox charType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#1@@3|)))) |key#0@@37|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#1@@3|))))) :qid |totalord.762:44| :skolemid |8984| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#1@@3|))) ))) :qid |totalord.762:16| :skolemid |8985| :pattern ( (MapType0Select (|Map#Elements| |m#0@@15|) ($Box |key#0@@37|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@15|) ($Box |key#0@@37|))) )))) (and (=> (Char__Order.__default.SortedSeqForMap Char_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@59) |s#0@@29| |m#0@@15|) (and (and (Char__Order.__default.IsStrictlySorted StartFuel_Char_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip TChar Char_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@29|)))) (forall ((|i#0@@6| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@6|) (< |i#0@@6| (|Seq#Length| |s#0@@29|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@15|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#0@@6|)))))) (=> (and (<= (LitInt 0) |i#0@@6|) (< |i#0@@6| (|Seq#Length| |s#0@@29|))) (= (MapType0Select (|Map#Elements| |m#0@@15|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#0@@6|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#0@@6|))))))) :qid |totalord.761:16| :skolemid |8988| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#0@@6|))) ))) (forall ((|key#0@@38| T@U) ) (!  (=> (and (and (= (type |key#0@@38|) charType) ($Is |key#0@@38| TChar)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@15|) ($Box |key#0@@38|)))) (exists ((|i#1@@4| Int) ) (!  (and (and (and (<= (LitInt 0) |i#1@@4|) (< |i#1@@4| (|Seq#Length| |s#0@@29|))) (= ($Unbox charType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#1@@4|)))) |key#0@@38|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#1@@4|))) (MapType0Select (|Map#Elements| |m#0@@15|) ($Box |key#0@@38|)))) :qid |totalord.762:44| :skolemid |8989| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#1@@4|))) ))) :qid |totalord.762:16| :skolemid |8990| :pattern ( (MapType0Select (|Map#Elements| |m#0@@15|) ($Box |key#0@@38|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@15|) ($Box |key#0@@38|))) )))) (=> (and (and (Char__Order.__default.IsStrictlySorted StartFuel_Char_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip TChar Char_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@29|)))) (forall ((|i#0@@7| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@7|) (< |i#0@@7| (|Seq#Length| |s#0@@29|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@15|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#0@@7|)))))) (=> (and (<= (LitInt 0) |i#0@@7|) (< |i#0@@7| (|Seq#Length| |s#0@@29|))) (= (MapType0Select (|Map#Elements| |m#0@@15|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#0@@7|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#0@@7|))))))) :qid |totalord.761:16| :skolemid |8988| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#0@@7|))) ))) (forall ((|key#0@@39| T@U) ) (!  (=> (and (and (= (type |key#0@@39|) charType) ($Is |key#0@@39| TChar)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@15|) ($Box |key#0@@39|)))) (exists ((|i#1@@5| Int) ) (!  (and (and (and (<= (LitInt 0) |i#1@@5|) (< |i#1@@5| (|Seq#Length| |s#0@@29|))) (= ($Unbox charType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#1@@5|)))) |key#0@@39|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#1@@5|))) (MapType0Select (|Map#Elements| |m#0@@15|) ($Box |key#0@@39|)))) :qid |totalord.762:44| :skolemid |8989| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@29| |i#1@@5|))) ))) :qid |totalord.762:16| :skolemid |8990| :pattern ( (MapType0Select (|Map#Elements| |m#0@@15|) ($Box |key#0@@39|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@15|) ($Box |key#0@@39|))) ))) (Char__Order.__default.SortedSeqForMap Char_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@59) |s#0@@29| |m#0@@15|))))) :qid |unknown.0:0| :skolemid |8991| :pattern ( (Char__Order.__default.SortedSeqForMap Char_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@59) |s#0@@29| |m#0@@15|)) ))))
(assert  (=> (<= 53 $FunctionContextHeight) (forall ((Char_Order._default.SortedSeqForMap$V@@4 T@U) ($ly@@60 T@U) (|s#0@@30| T@U) (|m#0@@16| T@U) ) (!  (=> (and (and (and (and (= (type Char_Order._default.SortedSeqForMap$V@@4) TyType) (= (type $ly@@60) LayerTypeType)) (= (type |s#0@@30|) (SeqType BoxType))) (= (type |m#0@@16|) (MapType BoxType BoxType))) (or (|Char__Order.__default.SortedSeqForMap#canCall| Char_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@30|) (Lit |m#0@@16|)) (and (not (= 53 $FunctionContextHeight)) (and ($Is |s#0@@30| (TSeq (Tclass._System.Tuple2 TChar Char_Order._default.SortedSeqForMap$V@@4))) ($Is |m#0@@16| (TMap TChar Char_Order._default.SortedSeqForMap$V@@4)))))) (and (and (and (and (and (|Sequences.__default.Unzip#canCall| TChar Char_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@30|)) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip TChar Char_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@30|)))) (|Char__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip TChar Char_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@30|)))))) (=> (Char__Order.__default.IsStrictlySorted StartFuel_Char_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip TChar Char_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@30|))))) (forall ((|i#2| Int) ) (!  (and (=> (< |i#2| (|Seq#Length| (Lit |s#0@@30|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@30|) |i#2|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@30|) |i#2|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@16|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@30|) |i#2|)))))) (=> (< |i#2| (|Seq#Length| (Lit |s#0@@30|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@30|) |i#2|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@30|) |i#2|))))))) :qid |totalord.761:16| :skolemid |8992| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@30| |i#2|))) )))) (=> (and (forall ((|i#2@@0| Int) ) (!  (and (=> (< |i#2@@0| (|Seq#Length| (Lit |s#0@@30|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@30|) |i#2@@0|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@30|) |i#2@@0|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@16|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@30|) |i#2@@0|)))))) (=> (< |i#2@@0| (|Seq#Length| (Lit |s#0@@30|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@30|) |i#2@@0|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@30|) |i#2@@0|))))))) :qid |totalord.761:16| :skolemid |8995| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@30| |i#2@@0|))) )) (forall ((|i#2@@1| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@1|) (< |i#2@@1| (|Seq#Length| (Lit |s#0@@30|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@16|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@30|) |i#2@@1|)))))) (=> (and (<= (LitInt 0) |i#2@@1|) (< |i#2@@1| (|Seq#Length| (Lit |s#0@@30|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@16|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@30|) |i#2@@1|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@30|) |i#2@@1|))))))) :qid |totalord.761:16| :skolemid |8996| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@30| |i#2@@1|))) ))) (forall ((|key#1| T@U) ) (!  (=> (and (and (= (type |key#1|) charType) ($Is |key#1| TChar)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@16|) ($Box |key#1|)))) (forall ((|i#3| Int) ) (!  (and (=> (< |i#3| (|Seq#Length| (Lit |s#0@@30|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@30|) |i#3|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@30|) |i#3|))) (= ($Unbox charType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@30|) |i#3|)))) |key#1|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@30|) |i#3|))))) :qid |totalord.762:44| :skolemid |8993| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@30| |i#3|))) ))) :qid |totalord.762:16| :skolemid |8994| :pattern ( (MapType0Select (|Map#Elements| |m#0@@16|) ($Box |key#1|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@16|) ($Box |key#1|))) )))) (and (=> (Char__Order.__default.SortedSeqForMap Char_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@60) (Lit |s#0@@30|) (Lit |m#0@@16|)) (and (and (Char__Order.__default.IsStrictlySorted StartFuel_Char_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip TChar Char_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@30|))))) (forall ((|i#2@@2| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@2|) (< |i#2@@2| (|Seq#Length| (Lit |s#0@@30|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@16|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@30|) |i#2@@2|)))))) (=> (and (<= (LitInt 0) |i#2@@2|) (< |i#2@@2| (|Seq#Length| (Lit |s#0@@30|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@16|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@30|) |i#2@@2|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@30|) |i#2@@2|))))))) :qid |totalord.761:16| :skolemid |8997| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@30| |i#2@@2|))) ))) (forall ((|key#1@@0| T@U) ) (!  (=> (and (and (= (type |key#1@@0|) charType) ($Is |key#1@@0| TChar)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@16|) ($Box |key#1@@0|)))) (exists ((|i#3@@0| Int) ) (!  (and (and (and (<= (LitInt 0) |i#3@@0|) (< |i#3@@0| (|Seq#Length| (Lit |s#0@@30|)))) (= ($Unbox charType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@30|) |i#3@@0|)))) |key#1@@0|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@30|) |i#3@@0|))) (MapType0Select (|Map#Elements| (Lit |m#0@@16|)) ($Box |key#1@@0|)))) :qid |totalord.762:44| :skolemid |8998| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@30| |i#3@@0|))) ))) :qid |totalord.762:16| :skolemid |8999| :pattern ( (MapType0Select (|Map#Elements| |m#0@@16|) ($Box |key#1@@0|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@16|) ($Box |key#1@@0|))) )))) (=> (and (and (Char__Order.__default.IsStrictlySorted StartFuel_Char_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip TChar Char_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@30|))))) (forall ((|i#2@@3| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@3|) (< |i#2@@3| (|Seq#Length| (Lit |s#0@@30|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@16|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@30|) |i#2@@3|)))))) (=> (and (<= (LitInt 0) |i#2@@3|) (< |i#2@@3| (|Seq#Length| (Lit |s#0@@30|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@16|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@30|) |i#2@@3|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@30|) |i#2@@3|))))))) :qid |totalord.761:16| :skolemid |8997| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@30| |i#2@@3|))) ))) (forall ((|key#1@@1| T@U) ) (!  (=> (and (and (= (type |key#1@@1|) charType) ($Is |key#1@@1| TChar)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@16|) ($Box |key#1@@1|)))) (exists ((|i#3@@1| Int) ) (!  (and (and (and (<= (LitInt 0) |i#3@@1|) (< |i#3@@1| (|Seq#Length| (Lit |s#0@@30|)))) (= ($Unbox charType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@30|) |i#3@@1|)))) |key#1@@1|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@30|) |i#3@@1|))) (MapType0Select (|Map#Elements| (Lit |m#0@@16|)) ($Box |key#1@@1|)))) :qid |totalord.762:44| :skolemid |8998| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@30| |i#3@@1|))) ))) :qid |totalord.762:16| :skolemid |8999| :pattern ( (MapType0Select (|Map#Elements| |m#0@@16|) ($Box |key#1@@1|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@16|) ($Box |key#1@@1|))) ))) (Char__Order.__default.SortedSeqForMap Char_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@60) (Lit |s#0@@30|) (Lit |m#0@@16|)))))) :qid |unknown.0:0| :weight 3 :skolemid |9000| :pattern ( (Char__Order.__default.SortedSeqForMap Char_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@60) (Lit |s#0@@30|) (Lit |m#0@@16|))) ))))
(assert (forall ((arg0@@234 T@U) (arg1@@118 T@U) ) (! (= (type (Char__Order.__default.minimum arg0@@234 arg1@@118)) charType) :qid |funType:Char__Order.__default.minimum| :pattern ( (Char__Order.__default.minimum arg0@@234 arg1@@118)) )))
(assert (forall (($ly@@61 T@U) (|s#0@@31| T@U) ) (!  (=> (and (= (type $ly@@61) LayerTypeType) (= (type |s#0@@31|) (MapType0Type BoxType boolType))) (= (Char__Order.__default.minimum ($LS $ly@@61) |s#0@@31|) (Char__Order.__default.minimum $ly@@61 |s#0@@31|))) :qid |totalord.765:22| :skolemid |9012| :pattern ( (Char__Order.__default.minimum ($LS $ly@@61) |s#0@@31|)) )))
(assert (forall (($ly@@62 T@U) (|s#0@@32| T@U) ) (!  (=> (and (= (type $ly@@62) LayerTypeType) (= (type |s#0@@32|) (MapType0Type BoxType boolType))) (= (Char__Order.__default.minimum $ly@@62 |s#0@@32|) (Char__Order.__default.minimum $LZ |s#0@@32|))) :qid |totalord.765:22| :skolemid |9013| :pattern ( (Char__Order.__default.minimum (AsFuelBottom $ly@@62) |s#0@@32|)) )))
(assert  (=> (<= 54 $FunctionContextHeight) (forall (($ly@@63 T@U) (|s#0@@33| T@U) ) (!  (=> (and (and (= (type $ly@@63) LayerTypeType) (= (type |s#0@@33|) (MapType0Type BoxType boolType))) (or (|Char__Order.__default.minimum#canCall| |s#0@@33|) (and (not (= 54 $FunctionContextHeight)) (and ($Is |s#0@@33| (TSet TChar)) (>= (|Set#Card| |s#0@@33|) (LitInt 1)))))) (and (and (U_2_bool (MapType0Select |s#0@@33| ($Box (Char__Order.__default.minimum $ly@@63 |s#0@@33|)))) (forall ((|y#0@@5| T@U) ) (!  (=> (= (type |y#0@@5|) charType) (=> (and ($Is |y#0@@5| TChar) (U_2_bool (MapType0Select |s#0@@33| ($Box |y#0@@5|)))) (Char__Order.__default.lte (Char__Order.__default.minimum $ly@@63 |s#0@@33|) |y#0@@5|))) :qid |totalord.768:18| :skolemid |9014| :pattern ( (Char__Order.__default.lte (Char__Order.__default.minimum $ly@@63 |s#0@@33|) |y#0@@5|)) :pattern ( (MapType0Select |s#0@@33| ($Box |y#0@@5|))) ))) ($Is (Char__Order.__default.minimum $ly@@63 |s#0@@33|) TChar))) :qid |totalord.765:22| :skolemid |9015| :pattern ( (Char__Order.__default.minimum $ly@@63 |s#0@@33|)) ))))
(assert (forall (($ly@@64 T@U) ($Heap@@2 T@U) (|s#0@@34| T@U) ) (!  (=> (and (and (and (= (type $ly@@64) LayerTypeType) (= (type $Heap@@2) (MapType0Type refType MapType1Type))) (= (type |s#0@@34|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@2) ($Is |s#0@@34| (TSet TChar)))) (and (=> (|Char__Order.__default.minimum#requires| $ly@@64 |s#0@@34|) (>= (|Set#Card| |s#0@@34|) (LitInt 1))) (=> (>= (|Set#Card| |s#0@@34|) (LitInt 1)) (|Char__Order.__default.minimum#requires| $ly@@64 |s#0@@34|)))) :qid |totalord.765:22| :skolemid |9016| :pattern ( (|Char__Order.__default.minimum#requires| $ly@@64 |s#0@@34|) ($IsGoodHeap $Heap@@2)) )))
(assert (forall ((arg0@@235 T@U) ) (! (= (type (|$let#3_a| arg0@@235)) charType) :qid |funType:$let#3_a| :pattern ( (|$let#3_a| arg0@@235)) )))
(assert (forall ((s@@45 T@U) ) (!  (=> (and (= (type s@@45) (MapType0Type BoxType boolType)) (|$let#3$canCall| s@@45)) (and ($Is (|$let#3_a| s@@45) TChar) (U_2_bool (MapType0Select s@@45 ($Box (|$let#3_a| s@@45)))))) :qid |totalord.772:5| :skolemid |9017| :pattern ( (|$let#3_a| s@@45)) )))
(assert  (=> (<= 54 $FunctionContextHeight) (forall (($ly@@65 T@U) ($Heap@@3 T@U) (|s#0@@35| T@U) ) (!  (=> (and (and (and (= (type $ly@@65) LayerTypeType) (= (type $Heap@@3) (MapType0Type refType MapType1Type))) (= (type |s#0@@35|) (MapType0Type BoxType boolType))) (or (|Char__Order.__default.minimum#canCall| |s#0@@35|) (and (not (= 54 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@3) ($Is |s#0@@35| (TSet TChar))) (>= (|Set#Card| |s#0@@35|) (LitInt 1)))))) (and (and (|$let#3$canCall| |s#0@@35|) (let ((|s'#0| (|Set#Difference| |s#0@@35| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#3_a| |s#0@@35|)))))) (=> (not (|Set#Equal| |s'#0| (|Set#Empty| BoxType))) (and (|Char__Order.__default.minimum#canCall| |s'#0|) (let ((|m'#0| (Char__Order.__default.minimum $ly@@65 |s'#0|))) (|Char__Order.__default.lt#canCall| (|$let#3_a| |s#0@@35|) |m'#0|)))))) (= (Char__Order.__default.minimum ($LS $ly@@65) |s#0@@35|) (let ((|a#0@@23| (|$let#3_a| |s#0@@35|))) (let ((|s'#1| (|Set#Difference| |s#0@@35| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#0@@23|))))) (ite (|Set#Equal| |s'#1| (|Set#Empty| BoxType)) |a#0@@23| (let ((|m'#1| (Char__Order.__default.minimum $ly@@65 |s'#1|))) (ite (Char__Order.__default.lt |a#0@@23| |m'#1|) |a#0@@23| |m'#1|)))))))) :qid |totalord.765:22| :skolemid |9018| :pattern ( (Char__Order.__default.minimum ($LS $ly@@65) |s#0@@35|) ($IsGoodHeap $Heap@@3)) ))))
(assert  (=> (<= 54 $FunctionContextHeight) (forall (($ly@@66 T@U) ($Heap@@4 T@U) (|s#0@@36| T@U) ) (!  (=> (and (and (and (= (type $ly@@66) LayerTypeType) (= (type $Heap@@4) (MapType0Type refType MapType1Type))) (= (type |s#0@@36|) (MapType0Type BoxType boolType))) (or (|Char__Order.__default.minimum#canCall| (Lit |s#0@@36|)) (and (not (= 54 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@4) ($Is |s#0@@36| (TSet TChar))) (>= (|Set#Card| (Lit |s#0@@36|)) (LitInt 1)))))) (and (and (|$let#3$canCall| (Lit |s#0@@36|)) (let ((|s'#2| (|Set#Difference| |s#0@@36| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#3_a| (Lit |s#0@@36|))))))) (=> (not (|Set#Equal| |s'#2| (|Set#Empty| BoxType))) (and (|Char__Order.__default.minimum#canCall| |s'#2|) (let ((|m'#2| (Char__Order.__default.minimum ($LS $ly@@66) |s'#2|))) (|Char__Order.__default.lt#canCall| (|$let#3_a| (Lit |s#0@@36|)) |m'#2|)))))) (= (Char__Order.__default.minimum ($LS $ly@@66) (Lit |s#0@@36|)) (let ((|a#1@@0| (|$let#3_a| (Lit |s#0@@36|)))) (let ((|s'#3| (|Set#Difference| |s#0@@36| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#1@@0|))))) (ite (|Set#Equal| |s'#3| (|Set#Empty| BoxType)) |a#1@@0| (let ((|m'#3| (Char__Order.__default.minimum ($LS $ly@@66) |s'#3|))) (ite (Char__Order.__default.lt |a#1@@0| |m'#3|) |a#1@@0| |m'#3|)))))))) :qid |totalord.765:22| :weight 3 :skolemid |9019| :pattern ( (Char__Order.__default.minimum ($LS $ly@@66) (Lit |s#0@@36|)) ($IsGoodHeap $Heap@@4)) ))))
(assert (forall ((arg0@@236 T@U) (arg1@@119 T@U) ) (! (= (type (Char__Order.__default.minimumOpt arg0@@236 arg1@@119)) DatatypeTypeType) :qid |funType:Char__Order.__default.minimumOpt| :pattern ( (Char__Order.__default.minimumOpt arg0@@236 arg1@@119)) )))
(assert (forall (($ly@@67 T@U) (|s#0@@37| T@U) ) (!  (=> (and (= (type $ly@@67) LayerTypeType) (= (type |s#0@@37|) (MapType0Type BoxType boolType))) (= (Char__Order.__default.minimumOpt ($LS $ly@@67) |s#0@@37|) (Char__Order.__default.minimumOpt $ly@@67 |s#0@@37|))) :qid |totalord.788:22| :skolemid |9025| :pattern ( (Char__Order.__default.minimumOpt ($LS $ly@@67) |s#0@@37|)) )))
(assert (forall (($ly@@68 T@U) (|s#0@@38| T@U) ) (!  (=> (and (= (type $ly@@68) LayerTypeType) (= (type |s#0@@38|) (MapType0Type BoxType boolType))) (= (Char__Order.__default.minimumOpt $ly@@68 |s#0@@38|) (Char__Order.__default.minimumOpt $LZ |s#0@@38|))) :qid |totalord.788:22| :skolemid |9026| :pattern ( (Char__Order.__default.minimumOpt (AsFuelBottom $ly@@68) |s#0@@38|)) )))
(assert (forall ((arg0@@237 T@U) ) (! (= (type (Options.Option.value arg0@@237)) BoxType) :qid |funType:Options.Option.value| :pattern ( (Options.Option.value arg0@@237)) )))
(assert  (=> (<= 55 $FunctionContextHeight) (forall (($ly@@69 T@U) (|s#0@@39| T@U) ) (!  (=> (and (and (= (type $ly@@69) LayerTypeType) (= (type |s#0@@39|) (MapType0Type BoxType boolType))) (or (|Char__Order.__default.minimumOpt#canCall| |s#0@@39|) (and (not (= 55 $FunctionContextHeight)) ($Is |s#0@@39| (TSet TChar))))) (and (and (and (=> (Options.Option.Some_q (Char__Order.__default.minimumOpt $ly@@69 |s#0@@39|)) (U_2_bool (MapType0Select |s#0@@39| (Options.Option.value (Char__Order.__default.minimumOpt $ly@@69 |s#0@@39|))))) (=> (Options.Option.Some_q (Char__Order.__default.minimumOpt $ly@@69 |s#0@@39|)) (forall ((|y#0@@6| T@U) ) (!  (=> (= (type |y#0@@6|) charType) (=> (and ($Is |y#0@@6| TChar) (U_2_bool (MapType0Select |s#0@@39| ($Box |y#0@@6|)))) (Char__Order.__default.lte ($Unbox charType (Options.Option.value (Char__Order.__default.minimumOpt $ly@@69 |s#0@@39|))) |y#0@@6|))) :qid |totalord.790:30| :skolemid |9027| :pattern ( (Char__Order.__default.lte ($Unbox charType (Options.Option.value (Char__Order.__default.minimumOpt $ly@@69 |s#0@@39|))) |y#0@@6|)) :pattern ( (MapType0Select |s#0@@39| ($Box |y#0@@6|))) )))) (=> (Options.Option.None_q (Char__Order.__default.minimumOpt $ly@@69 |s#0@@39|)) (|Set#Equal| |s#0@@39| (|Set#Empty| BoxType)))) ($Is (Char__Order.__default.minimumOpt $ly@@69 |s#0@@39|) (Tclass.Options.Option TChar)))) :qid |totalord.788:22| :skolemid |9028| :pattern ( (Char__Order.__default.minimumOpt $ly@@69 |s#0@@39|)) ))))
(assert (forall (($ly@@70 T@U) (|s#0@@40| T@U) ) (!  (=> (and (and (= (type $ly@@70) LayerTypeType) (= (type |s#0@@40|) (MapType0Type BoxType boolType))) ($Is |s#0@@40| (TSet TChar))) (and (=> (|Char__Order.__default.minimumOpt#requires| $ly@@70 |s#0@@40|) true) (=> true (|Char__Order.__default.minimumOpt#requires| $ly@@70 |s#0@@40|)))) :qid |totalord.788:22| :skolemid |9029| :pattern ( (|Char__Order.__default.minimumOpt#requires| $ly@@70 |s#0@@40|)) )))
(assert (= (type StartFuel_Char_Order._default.minimum) LayerTypeType))
(assert  (=> (<= 55 $FunctionContextHeight) (forall (($ly@@71 T@U) (|s#0@@41| T@U) ) (!  (=> (and (and (= (type $ly@@71) LayerTypeType) (= (type |s#0@@41|) (MapType0Type BoxType boolType))) (or (|Char__Order.__default.minimumOpt#canCall| |s#0@@41|) (and (not (= 55 $FunctionContextHeight)) ($Is |s#0@@41| (TSet TChar))))) (and (=> (not (|Set#Equal| |s#0@@41| (|Set#Empty| BoxType))) (|Char__Order.__default.minimum#canCall| |s#0@@41|)) (= (Char__Order.__default.minimumOpt ($LS $ly@@71) |s#0@@41|) (ite (|Set#Equal| |s#0@@41| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Char__Order.__default.minimum StartFuel_Char_Order._default.minimum |s#0@@41|))))))) :qid |totalord.788:22| :skolemid |9030| :pattern ( (Char__Order.__default.minimumOpt ($LS $ly@@71) |s#0@@41|)) ))))
(assert  (=> (<= 55 $FunctionContextHeight) (forall (($ly@@72 T@U) (|s#0@@42| T@U) ) (!  (=> (and (and (= (type $ly@@72) LayerTypeType) (= (type |s#0@@42|) (MapType0Type BoxType boolType))) (or (|Char__Order.__default.minimumOpt#canCall| (Lit |s#0@@42|)) (and (not (= 55 $FunctionContextHeight)) ($Is |s#0@@42| (TSet TChar))))) (and (=> (not (|Set#Equal| |s#0@@42| (|Set#Empty| BoxType))) (|Char__Order.__default.minimum#canCall| (Lit |s#0@@42|))) (= (Char__Order.__default.minimumOpt ($LS $ly@@72) (Lit |s#0@@42|)) (ite (|Set#Equal| |s#0@@42| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Char__Order.__default.minimum StartFuel_Char_Order._default.minimum (Lit |s#0@@42|)))))))) :qid |totalord.788:22| :weight 3 :skolemid |9031| :pattern ( (Char__Order.__default.minimumOpt ($LS $ly@@72) (Lit |s#0@@42|))) ))))
(assert (forall ((arg0@@238 T@U) (arg1@@120 T@U) ) (! (= (type (Char__Order.__default.maximum arg0@@238 arg1@@120)) charType) :qid |funType:Char__Order.__default.maximum| :pattern ( (Char__Order.__default.maximum arg0@@238 arg1@@120)) )))
(assert (forall (($ly@@73 T@U) (|s#0@@43| T@U) ) (!  (=> (and (= (type $ly@@73) LayerTypeType) (= (type |s#0@@43|) (MapType0Type BoxType boolType))) (= (Char__Order.__default.maximum ($LS $ly@@73) |s#0@@43|) (Char__Order.__default.maximum $ly@@73 |s#0@@43|))) :qid |totalord.796:22| :skolemid |9036| :pattern ( (Char__Order.__default.maximum ($LS $ly@@73) |s#0@@43|)) )))
(assert (forall (($ly@@74 T@U) (|s#0@@44| T@U) ) (!  (=> (and (= (type $ly@@74) LayerTypeType) (= (type |s#0@@44|) (MapType0Type BoxType boolType))) (= (Char__Order.__default.maximum $ly@@74 |s#0@@44|) (Char__Order.__default.maximum $LZ |s#0@@44|))) :qid |totalord.796:22| :skolemid |9037| :pattern ( (Char__Order.__default.maximum (AsFuelBottom $ly@@74) |s#0@@44|)) )))
(assert  (=> (<= 14 $FunctionContextHeight) (forall (($ly@@75 T@U) (|s#0@@45| T@U) ) (!  (=> (and (and (= (type $ly@@75) LayerTypeType) (= (type |s#0@@45|) (MapType0Type BoxType boolType))) (or (|Char__Order.__default.maximum#canCall| |s#0@@45|) (and (not (= 14 $FunctionContextHeight)) (and ($Is |s#0@@45| (TSet TChar)) (>= (|Set#Card| |s#0@@45|) (LitInt 1)))))) (and (and (U_2_bool (MapType0Select |s#0@@45| ($Box (Char__Order.__default.maximum $ly@@75 |s#0@@45|)))) (forall ((|y#0@@7| T@U) ) (!  (=> (= (type |y#0@@7|) charType) (=> (and ($Is |y#0@@7| TChar) (U_2_bool (MapType0Select |s#0@@45| ($Box |y#0@@7|)))) (Char__Order.__default.lte |y#0@@7| (Char__Order.__default.maximum $ly@@75 |s#0@@45|)))) :qid |totalord.799:18| :skolemid |9038| :pattern ( (Char__Order.__default.lte |y#0@@7| (Char__Order.__default.maximum $ly@@75 |s#0@@45|))) :pattern ( (MapType0Select |s#0@@45| ($Box |y#0@@7|))) ))) ($Is (Char__Order.__default.maximum $ly@@75 |s#0@@45|) TChar))) :qid |totalord.796:22| :skolemid |9039| :pattern ( (Char__Order.__default.maximum $ly@@75 |s#0@@45|)) ))))
(assert (forall (($ly@@76 T@U) ($Heap@@5 T@U) (|s#0@@46| T@U) ) (!  (=> (and (and (and (= (type $ly@@76) LayerTypeType) (= (type $Heap@@5) (MapType0Type refType MapType1Type))) (= (type |s#0@@46|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@5) ($Is |s#0@@46| (TSet TChar)))) (and (=> (|Char__Order.__default.maximum#requires| $ly@@76 |s#0@@46|) (>= (|Set#Card| |s#0@@46|) (LitInt 1))) (=> (>= (|Set#Card| |s#0@@46|) (LitInt 1)) (|Char__Order.__default.maximum#requires| $ly@@76 |s#0@@46|)))) :qid |totalord.796:22| :skolemid |9040| :pattern ( (|Char__Order.__default.maximum#requires| $ly@@76 |s#0@@46|) ($IsGoodHeap $Heap@@5)) )))
(assert (forall ((arg0@@239 T@U) ) (! (= (type (|$let#6_a| arg0@@239)) charType) :qid |funType:$let#6_a| :pattern ( (|$let#6_a| arg0@@239)) )))
(assert (forall ((s@@46 T@U) ) (!  (=> (and (= (type s@@46) (MapType0Type BoxType boolType)) (|$let#6$canCall| s@@46)) (and ($Is (|$let#6_a| s@@46) TChar) (U_2_bool (MapType0Select s@@46 ($Box (|$let#6_a| s@@46)))))) :qid |totalord.801:5| :skolemid |9041| :pattern ( (|$let#6_a| s@@46)) )))
(assert  (=> (<= 14 $FunctionContextHeight) (forall (($ly@@77 T@U) ($Heap@@6 T@U) (|s#0@@47| T@U) ) (!  (=> (and (and (and (= (type $ly@@77) LayerTypeType) (= (type $Heap@@6) (MapType0Type refType MapType1Type))) (= (type |s#0@@47|) (MapType0Type BoxType boolType))) (or (|Char__Order.__default.maximum#canCall| |s#0@@47|) (and (not (= 14 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@6) ($Is |s#0@@47| (TSet TChar))) (>= (|Set#Card| |s#0@@47|) (LitInt 1)))))) (and (and (|$let#6$canCall| |s#0@@47|) (let ((|s'#0@@0| (|Set#Difference| |s#0@@47| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#6_a| |s#0@@47|)))))) (=> (not (|Set#Equal| |s'#0@@0| (|Set#Empty| BoxType))) (and (|Char__Order.__default.maximum#canCall| |s'#0@@0|) (let ((|m'#0@@0| (Char__Order.__default.maximum $ly@@77 |s'#0@@0|))) (|Char__Order.__default.lt#canCall| |m'#0@@0| (|$let#6_a| |s#0@@47|))))))) (= (Char__Order.__default.maximum ($LS $ly@@77) |s#0@@47|) (let ((|a#0@@24| (|$let#6_a| |s#0@@47|))) (let ((|s'#1@@0| (|Set#Difference| |s#0@@47| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#0@@24|))))) (ite (|Set#Equal| |s'#1@@0| (|Set#Empty| BoxType)) |a#0@@24| (let ((|m'#1@@0| (Char__Order.__default.maximum $ly@@77 |s'#1@@0|))) (ite (Char__Order.__default.lt |m'#1@@0| |a#0@@24|) |a#0@@24| |m'#1@@0|)))))))) :qid |totalord.796:22| :skolemid |9042| :pattern ( (Char__Order.__default.maximum ($LS $ly@@77) |s#0@@47|) ($IsGoodHeap $Heap@@6)) ))))
(assert  (=> (<= 14 $FunctionContextHeight) (forall (($ly@@78 T@U) ($Heap@@7 T@U) (|s#0@@48| T@U) ) (!  (=> (and (and (and (= (type $ly@@78) LayerTypeType) (= (type $Heap@@7) (MapType0Type refType MapType1Type))) (= (type |s#0@@48|) (MapType0Type BoxType boolType))) (or (|Char__Order.__default.maximum#canCall| (Lit |s#0@@48|)) (and (not (= 14 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@7) ($Is |s#0@@48| (TSet TChar))) (>= (|Set#Card| (Lit |s#0@@48|)) (LitInt 1)))))) (and (and (|$let#6$canCall| (Lit |s#0@@48|)) (let ((|s'#2@@0| (|Set#Difference| |s#0@@48| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#6_a| (Lit |s#0@@48|))))))) (=> (not (|Set#Equal| |s'#2@@0| (|Set#Empty| BoxType))) (and (|Char__Order.__default.maximum#canCall| |s'#2@@0|) (let ((|m'#2@@0| (Char__Order.__default.maximum ($LS $ly@@78) |s'#2@@0|))) (|Char__Order.__default.lt#canCall| |m'#2@@0| (|$let#6_a| (Lit |s#0@@48|)))))))) (= (Char__Order.__default.maximum ($LS $ly@@78) (Lit |s#0@@48|)) (let ((|a#1@@1| (|$let#6_a| (Lit |s#0@@48|)))) (let ((|s'#3@@0| (|Set#Difference| |s#0@@48| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#1@@1|))))) (ite (|Set#Equal| |s'#3@@0| (|Set#Empty| BoxType)) |a#1@@1| (let ((|m'#3@@0| (Char__Order.__default.maximum ($LS $ly@@78) |s'#3@@0|))) (ite (Char__Order.__default.lt |m'#3@@0| |a#1@@1|) |a#1@@1| |m'#3@@0|)))))))) :qid |totalord.796:22| :weight 3 :skolemid |9043| :pattern ( (Char__Order.__default.maximum ($LS $ly@@78) (Lit |s#0@@48|)) ($IsGoodHeap $Heap@@7)) ))))
(assert (forall ((arg0@@240 T@U) (arg1@@121 T@U) ) (! (= (type (Char__Order.__default.maximumOpt arg0@@240 arg1@@121)) DatatypeTypeType) :qid |funType:Char__Order.__default.maximumOpt| :pattern ( (Char__Order.__default.maximumOpt arg0@@240 arg1@@121)) )))
(assert (forall (($ly@@79 T@U) (|s#0@@49| T@U) ) (!  (=> (and (= (type $ly@@79) LayerTypeType) (= (type |s#0@@49|) (MapType0Type BoxType boolType))) (= (Char__Order.__default.maximumOpt ($LS $ly@@79) |s#0@@49|) (Char__Order.__default.maximumOpt $ly@@79 |s#0@@49|))) :qid |totalord.817:22| :skolemid |9049| :pattern ( (Char__Order.__default.maximumOpt ($LS $ly@@79) |s#0@@49|)) )))
(assert (forall (($ly@@80 T@U) (|s#0@@50| T@U) ) (!  (=> (and (= (type $ly@@80) LayerTypeType) (= (type |s#0@@50|) (MapType0Type BoxType boolType))) (= (Char__Order.__default.maximumOpt $ly@@80 |s#0@@50|) (Char__Order.__default.maximumOpt $LZ |s#0@@50|))) :qid |totalord.817:22| :skolemid |9050| :pattern ( (Char__Order.__default.maximumOpt (AsFuelBottom $ly@@80) |s#0@@50|)) )))
(assert  (=> (<= 56 $FunctionContextHeight) (forall (($ly@@81 T@U) (|s#0@@51| T@U) ) (!  (=> (and (and (= (type $ly@@81) LayerTypeType) (= (type |s#0@@51|) (MapType0Type BoxType boolType))) (or (|Char__Order.__default.maximumOpt#canCall| |s#0@@51|) (and (not (= 56 $FunctionContextHeight)) ($Is |s#0@@51| (TSet TChar))))) (and (and (and (=> (Options.Option.Some_q (Char__Order.__default.maximumOpt $ly@@81 |s#0@@51|)) (U_2_bool (MapType0Select |s#0@@51| (Options.Option.value (Char__Order.__default.maximumOpt $ly@@81 |s#0@@51|))))) (=> (Options.Option.Some_q (Char__Order.__default.maximumOpt $ly@@81 |s#0@@51|)) (forall ((|y#0@@8| T@U) ) (!  (=> (= (type |y#0@@8|) charType) (=> (and ($Is |y#0@@8| TChar) (U_2_bool (MapType0Select |s#0@@51| ($Box |y#0@@8|)))) (Char__Order.__default.lte |y#0@@8| ($Unbox charType (Options.Option.value (Char__Order.__default.maximumOpt $ly@@81 |s#0@@51|)))))) :qid |totalord.819:30| :skolemid |9051| :pattern ( (Char__Order.__default.lte |y#0@@8| ($Unbox charType (Options.Option.value (Char__Order.__default.maximumOpt $ly@@81 |s#0@@51|))))) :pattern ( (MapType0Select |s#0@@51| ($Box |y#0@@8|))) )))) (=> (Options.Option.None_q (Char__Order.__default.maximumOpt $ly@@81 |s#0@@51|)) (|Set#Equal| |s#0@@51| (|Set#Empty| BoxType)))) ($Is (Char__Order.__default.maximumOpt $ly@@81 |s#0@@51|) (Tclass.Options.Option TChar)))) :qid |totalord.817:22| :skolemid |9052| :pattern ( (Char__Order.__default.maximumOpt $ly@@81 |s#0@@51|)) ))))
(assert (forall (($ly@@82 T@U) (|s#0@@52| T@U) ) (!  (=> (and (and (= (type $ly@@82) LayerTypeType) (= (type |s#0@@52|) (MapType0Type BoxType boolType))) ($Is |s#0@@52| (TSet TChar))) (and (=> (|Char__Order.__default.maximumOpt#requires| $ly@@82 |s#0@@52|) true) (=> true (|Char__Order.__default.maximumOpt#requires| $ly@@82 |s#0@@52|)))) :qid |totalord.817:22| :skolemid |9053| :pattern ( (|Char__Order.__default.maximumOpt#requires| $ly@@82 |s#0@@52|)) )))
(assert (= (type StartFuel_Char_Order._default.maximum) LayerTypeType))
(assert  (=> (<= 56 $FunctionContextHeight) (forall (($ly@@83 T@U) (|s#0@@53| T@U) ) (!  (=> (and (and (= (type $ly@@83) LayerTypeType) (= (type |s#0@@53|) (MapType0Type BoxType boolType))) (or (|Char__Order.__default.maximumOpt#canCall| |s#0@@53|) (and (not (= 56 $FunctionContextHeight)) ($Is |s#0@@53| (TSet TChar))))) (and (=> (not (|Set#Equal| |s#0@@53| (|Set#Empty| BoxType))) (|Char__Order.__default.maximum#canCall| |s#0@@53|)) (= (Char__Order.__default.maximumOpt ($LS $ly@@83) |s#0@@53|) (ite (|Set#Equal| |s#0@@53| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Char__Order.__default.maximum StartFuel_Char_Order._default.maximum |s#0@@53|))))))) :qid |totalord.817:22| :skolemid |9054| :pattern ( (Char__Order.__default.maximumOpt ($LS $ly@@83) |s#0@@53|)) ))))
(assert  (=> (<= 56 $FunctionContextHeight) (forall (($ly@@84 T@U) (|s#0@@54| T@U) ) (!  (=> (and (and (= (type $ly@@84) LayerTypeType) (= (type |s#0@@54|) (MapType0Type BoxType boolType))) (or (|Char__Order.__default.maximumOpt#canCall| (Lit |s#0@@54|)) (and (not (= 56 $FunctionContextHeight)) ($Is |s#0@@54| (TSet TChar))))) (and (=> (not (|Set#Equal| |s#0@@54| (|Set#Empty| BoxType))) (|Char__Order.__default.maximum#canCall| (Lit |s#0@@54|))) (= (Char__Order.__default.maximumOpt ($LS $ly@@84) (Lit |s#0@@54|)) (ite (|Set#Equal| |s#0@@54| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Char__Order.__default.maximum StartFuel_Char_Order._default.maximum (Lit |s#0@@54|)))))))) :qid |totalord.817:22| :weight 3 :skolemid |9055| :pattern ( (Char__Order.__default.maximumOpt ($LS $ly@@84) (Lit |s#0@@54|))) ))))
(assert  (=> (<= 4 $FunctionContextHeight) (forall ((|a#0@@25| T@U) (|b#0@@20| T@U) ) (!  (=> (and (and (= (type |a#0@@25|) charType) (= (type |b#0@@20|) charType)) (or (|Char__Order.__default.lt#canCall| |a#0@@25| |b#0@@20|) (and (not (= 4 $FunctionContextHeight)) (and ($Is |a#0@@25| TChar) ($Is |b#0@@20| TChar))))) true) :qid |totalord.12:15| :skolemid |9060| :pattern ( (Char__Order.__default.lt |a#0@@25| |b#0@@20|)) ))))
(assert (forall ((|a#0@@26| T@U) (|b#0@@21| T@U) ) (!  (=> (and (and (= (type |a#0@@26|) charType) (= (type |b#0@@21|) charType)) (and ($Is |a#0@@26| TChar) ($Is |b#0@@21| TChar))) (and (=> (|Char__Order.__default.lt#requires| |a#0@@26| |b#0@@21|) true) (=> true (|Char__Order.__default.lt#requires| |a#0@@26| |b#0@@21|)))) :qid |totalord.12:15| :skolemid |9061| :pattern ( (|Char__Order.__default.lt#requires| |a#0@@26| |b#0@@21|)) )))
(assert  (=> (<= 4 $FunctionContextHeight) (forall ((|a#0@@27| T@U) (|b#0@@22| T@U) ) (!  (=> (and (and (= (type |a#0@@27|) charType) (= (type |b#0@@22|) charType)) (or (|Char__Order.__default.lt#canCall| |a#0@@27| |b#0@@22|) (and (not (= 4 $FunctionContextHeight)) (and ($Is |a#0@@27| TChar) ($Is |b#0@@22| TChar))))) (and (|Char__Order.__default.lte#canCall| |a#0@@27| |b#0@@22|) (and (=> (Char__Order.__default.lt |a#0@@27| |b#0@@22|) (and (Char__Order.__default.lte |a#0@@27| |b#0@@22|) (not (= |a#0@@27| |b#0@@22|)))) (=> (and (Char__Order.__default.lte |a#0@@27| |b#0@@22|) (not (= |a#0@@27| |b#0@@22|))) (Char__Order.__default.lt |a#0@@27| |b#0@@22|))))) :qid |totalord.12:15| :skolemid |9062| :pattern ( (Char__Order.__default.lt |a#0@@27| |b#0@@22|)) ))))
(assert  (=> (<= 4 $FunctionContextHeight) (forall ((|a#0@@28| T@U) (|b#0@@23| T@U) ) (!  (=> (and (and (= (type |a#0@@28|) charType) (= (type |b#0@@23|) charType)) (or (|Char__Order.__default.lt#canCall| (Lit |a#0@@28|) (Lit |b#0@@23|)) (and (not (= 4 $FunctionContextHeight)) (and ($Is |a#0@@28| TChar) ($Is |b#0@@23| TChar))))) (and (|Char__Order.__default.lte#canCall| (Lit |a#0@@28|) (Lit |b#0@@23|)) (and (=> (Char__Order.__default.lt (Lit |a#0@@28|) (Lit |b#0@@23|)) (U_2_bool (Lit (bool_2_U  (and (Char__Order.__default.lte (Lit |a#0@@28|) (Lit |b#0@@23|)) (not (= |a#0@@28| |b#0@@23|))))))) (=> (U_2_bool (Lit (bool_2_U  (and (Char__Order.__default.lte (Lit |a#0@@28|) (Lit |b#0@@23|)) (not (= |a#0@@28| |b#0@@23|)))))) (Char__Order.__default.lt (Lit |a#0@@28|) (Lit |b#0@@23|)))))) :qid |totalord.12:15| :weight 3 :skolemid |9063| :pattern ( (Char__Order.__default.lt (Lit |a#0@@28|) (Lit |b#0@@23|))) ))))
(assert (forall ((arg0@@241 T@U) (arg1@@122 T@U) ) (! (= (type (Char__Order.__default.Min arg0@@241 arg1@@122)) charType) :qid |funType:Char__Order.__default.Min| :pattern ( (Char__Order.__default.Min arg0@@241 arg1@@122)) )))
(assert  (=> (<= 57 $FunctionContextHeight) (forall ((|a#0@@29| T@U) (|b#0@@24| T@U) ) (!  (=> (and (and (= (type |a#0@@29|) charType) (= (type |b#0@@24|) charType)) (or (|Char__Order.__default.Min#canCall| |a#0@@29| |b#0@@24|) (and (not (= 57 $FunctionContextHeight)) (and ($Is |a#0@@29| TChar) ($Is |b#0@@24| TChar))))) ($Is (Char__Order.__default.Min |a#0@@29| |b#0@@24|) TChar)) :qid |totalord.24:16| :skolemid |9065| :pattern ( (Char__Order.__default.Min |a#0@@29| |b#0@@24|)) ))))
(assert (forall ((|a#0@@30| T@U) (|b#0@@25| T@U) ) (!  (=> (and (and (= (type |a#0@@30|) charType) (= (type |b#0@@25|) charType)) (and ($Is |a#0@@30| TChar) ($Is |b#0@@25| TChar))) (and (=> (|Char__Order.__default.Min#requires| |a#0@@30| |b#0@@25|) true) (=> true (|Char__Order.__default.Min#requires| |a#0@@30| |b#0@@25|)))) :qid |totalord.24:16| :skolemid |9066| :pattern ( (|Char__Order.__default.Min#requires| |a#0@@30| |b#0@@25|)) )))
(assert  (=> (<= 57 $FunctionContextHeight) (forall ((|a#0@@31| T@U) (|b#0@@26| T@U) ) (!  (=> (and (and (= (type |a#0@@31|) charType) (= (type |b#0@@26|) charType)) (or (|Char__Order.__default.Min#canCall| |a#0@@31| |b#0@@26|) (and (not (= 57 $FunctionContextHeight)) (and ($Is |a#0@@31| TChar) ($Is |b#0@@26| TChar))))) (and (|Char__Order.__default.lte#canCall| |a#0@@31| |b#0@@26|) (= (Char__Order.__default.Min |a#0@@31| |b#0@@26|) (ite (Char__Order.__default.lte |a#0@@31| |b#0@@26|) |a#0@@31| |b#0@@26|)))) :qid |totalord.24:16| :skolemid |9067| :pattern ( (Char__Order.__default.Min |a#0@@31| |b#0@@26|)) ))))
(assert  (=> (<= 57 $FunctionContextHeight) (forall ((|a#0@@32| T@U) (|b#0@@27| T@U) ) (!  (=> (and (and (= (type |a#0@@32|) charType) (= (type |b#0@@27|) charType)) (or (|Char__Order.__default.Min#canCall| (Lit |a#0@@32|) (Lit |b#0@@27|)) (and (not (= 57 $FunctionContextHeight)) (and ($Is |a#0@@32| TChar) ($Is |b#0@@27| TChar))))) (and (|Char__Order.__default.lte#canCall| (Lit |a#0@@32|) (Lit |b#0@@27|)) (= (Char__Order.__default.Min (Lit |a#0@@32|) (Lit |b#0@@27|)) (ite (Char__Order.__default.lte (Lit |a#0@@32|) (Lit |b#0@@27|)) |a#0@@32| |b#0@@27|)))) :qid |totalord.24:16| :weight 3 :skolemid |9068| :pattern ( (Char__Order.__default.Min (Lit |a#0@@32|) (Lit |b#0@@27|))) ))))
(assert (forall ((arg0@@242 T@U) (arg1@@123 T@U) ) (! (= (type (Char__Order.__default.Max arg0@@242 arg1@@123)) charType) :qid |funType:Char__Order.__default.Max| :pattern ( (Char__Order.__default.Max arg0@@242 arg1@@123)) )))
(assert  (=> (<= 58 $FunctionContextHeight) (forall ((|a#0@@33| T@U) (|b#0@@28| T@U) ) (!  (=> (and (and (= (type |a#0@@33|) charType) (= (type |b#0@@28|) charType)) (or (|Char__Order.__default.Max#canCall| |a#0@@33| |b#0@@28|) (and (not (= 58 $FunctionContextHeight)) (and ($Is |a#0@@33| TChar) ($Is |b#0@@28| TChar))))) ($Is (Char__Order.__default.Max |a#0@@33| |b#0@@28|) TChar)) :qid |totalord.29:16| :skolemid |9070| :pattern ( (Char__Order.__default.Max |a#0@@33| |b#0@@28|)) ))))
(assert (forall ((|a#0@@34| T@U) (|b#0@@29| T@U) ) (!  (=> (and (and (= (type |a#0@@34|) charType) (= (type |b#0@@29|) charType)) (and ($Is |a#0@@34| TChar) ($Is |b#0@@29| TChar))) (and (=> (|Char__Order.__default.Max#requires| |a#0@@34| |b#0@@29|) true) (=> true (|Char__Order.__default.Max#requires| |a#0@@34| |b#0@@29|)))) :qid |totalord.29:16| :skolemid |9071| :pattern ( (|Char__Order.__default.Max#requires| |a#0@@34| |b#0@@29|)) )))
(assert  (=> (<= 58 $FunctionContextHeight) (forall ((|a#0@@35| T@U) (|b#0@@30| T@U) ) (!  (=> (and (and (= (type |a#0@@35|) charType) (= (type |b#0@@30|) charType)) (or (|Char__Order.__default.Max#canCall| |a#0@@35| |b#0@@30|) (and (not (= 58 $FunctionContextHeight)) (and ($Is |a#0@@35| TChar) ($Is |b#0@@30| TChar))))) (and (|Char__Order.__default.lte#canCall| |a#0@@35| |b#0@@30|) (= (Char__Order.__default.Max |a#0@@35| |b#0@@30|) (ite (Char__Order.__default.lte |a#0@@35| |b#0@@30|) |b#0@@30| |a#0@@35|)))) :qid |totalord.29:16| :skolemid |9072| :pattern ( (Char__Order.__default.Max |a#0@@35| |b#0@@30|)) ))))
(assert  (=> (<= 58 $FunctionContextHeight) (forall ((|a#0@@36| T@U) (|b#0@@31| T@U) ) (!  (=> (and (and (= (type |a#0@@36|) charType) (= (type |b#0@@31|) charType)) (or (|Char__Order.__default.Max#canCall| (Lit |a#0@@36|) (Lit |b#0@@31|)) (and (not (= 58 $FunctionContextHeight)) (and ($Is |a#0@@36| TChar) ($Is |b#0@@31| TChar))))) (and (|Char__Order.__default.lte#canCall| (Lit |a#0@@36|) (Lit |b#0@@31|)) (= (Char__Order.__default.Max (Lit |a#0@@36|) (Lit |b#0@@31|)) (ite (Char__Order.__default.lte (Lit |a#0@@36|) (Lit |b#0@@31|)) |b#0@@31| |a#0@@36|)))) :qid |totalord.29:16| :weight 3 :skolemid |9073| :pattern ( (Char__Order.__default.Max (Lit |a#0@@36|) (Lit |b#0@@31|))) ))))
(assert (forall (($ly@@85 T@U) (|run#0@@23| T@U) ) (!  (=> (and (= (type $ly@@85) LayerTypeType) (= (type |run#0@@23|) (SeqType BoxType))) (and (=> (Char__Order.__default.IsSorted ($LS $ly@@85) |run#0@@23|) (Char__Order.__default.IsSorted $ly@@85 |run#0@@23|)) (=> (Char__Order.__default.IsSorted $ly@@85 |run#0@@23|) (Char__Order.__default.IsSorted ($LS $ly@@85) |run#0@@23|)))) :qid |totalord.41:23| :skolemid |9075| :pattern ( (Char__Order.__default.IsSorted ($LS $ly@@85) |run#0@@23|)) )))
(assert (forall (($ly@@86 T@U) (|run#0@@24| T@U) ) (!  (=> (and (= (type $ly@@86) LayerTypeType) (= (type |run#0@@24|) (SeqType BoxType))) (and (=> (Char__Order.__default.IsSorted $ly@@86 |run#0@@24|) (Char__Order.__default.IsSorted $LZ |run#0@@24|)) (=> (Char__Order.__default.IsSorted $LZ |run#0@@24|) (Char__Order.__default.IsSorted $ly@@86 |run#0@@24|)))) :qid |totalord.41:23| :skolemid |9076| :pattern ( (Char__Order.__default.IsSorted (AsFuelBottom $ly@@86) |run#0@@24|)) )))
(assert  (=> (<= 6 $FunctionContextHeight) (forall (($ly@@87 T@U) (|run#0@@25| T@U) ) (!  (=> (and (and (= (type $ly@@87) LayerTypeType) (= (type |run#0@@25|) (SeqType BoxType))) (or (|Char__Order.__default.IsSorted#canCall| |run#0@@25|) (and (not (= 6 $FunctionContextHeight)) ($Is |run#0@@25| (TSeq TChar))))) (and (=> (= (|Seq#Length| |run#0@@25|) (LitInt 0)) (Char__Order.__default.IsSorted $ly@@87 |run#0@@25|)) (=> (= (|Seq#Length| |run#0@@25|) (LitInt 1)) (Char__Order.__default.IsSorted $ly@@87 |run#0@@25|)))) :qid |totalord.41:23| :skolemid |9077| :pattern ( (Char__Order.__default.IsSorted $ly@@87 |run#0@@25|)) ))))
(assert (forall (($ly@@88 T@U) (|run#0@@26| T@U) ) (!  (=> (and (and (= (type $ly@@88) LayerTypeType) (= (type |run#0@@26|) (SeqType BoxType))) ($Is |run#0@@26| (TSeq TChar))) (and (=> (|Char__Order.__default.IsSorted#requires| $ly@@88 |run#0@@26|) true) (=> true (|Char__Order.__default.IsSorted#requires| $ly@@88 |run#0@@26|)))) :qid |totalord.41:23| :skolemid |9078| :pattern ( (|Char__Order.__default.IsSorted#requires| $ly@@88 |run#0@@26|)) )))
(assert  (=> (<= 6 $FunctionContextHeight) (forall (($ly@@89 T@U) (|run#0@@27| T@U) ) (!  (=> (and (and (= (type $ly@@89) LayerTypeType) (= (type |run#0@@27|) (SeqType BoxType))) (or (|Char__Order.__default.IsSorted#canCall| |run#0@@27|) (and (not (= 6 $FunctionContextHeight)) ($Is |run#0@@27| (TSeq TChar))))) (and (forall ((|i#0@@8| Int) (|j#0| Int) ) (!  (=> (< |j#0| (|Seq#Length| |run#0@@27|)) (|Char__Order.__default.lte#canCall| ($Unbox charType (|Seq#Index| |run#0@@27| |i#0@@8|)) ($Unbox charType (|Seq#Index| |run#0@@27| |j#0|)))) :qid |totalord.45:12| :skolemid |9079| :pattern ( ($Unbox charType (|Seq#Index| |run#0@@27| |j#0|)) ($Unbox charType (|Seq#Index| |run#0@@27| |i#0@@8|))) )) (and (=> (Char__Order.__default.IsSorted ($LS $ly@@89) |run#0@@27|) (forall ((|i#0@@9| Int) (|j#0@@0| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@9|) (<= |i#0@@9| |j#0@@0|)) (< |j#0@@0| (|Seq#Length| |run#0@@27|))) (Char__Order.__default.lte ($Unbox charType (|Seq#Index| |run#0@@27| |i#0@@9|)) ($Unbox charType (|Seq#Index| |run#0@@27| |j#0@@0|))))) :qid |totalord.45:12| :skolemid |9080| :pattern ( ($Unbox charType (|Seq#Index| |run#0@@27| |j#0@@0|)) ($Unbox charType (|Seq#Index| |run#0@@27| |i#0@@9|))) ))) (=> (forall ((|i#0@@10| Int) (|j#0@@1| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@10|) (<= |i#0@@10| |j#0@@1|)) (< |j#0@@1| (|Seq#Length| |run#0@@27|))) (Char__Order.__default.lte ($Unbox charType (|Seq#Index| |run#0@@27| |i#0@@10|)) ($Unbox charType (|Seq#Index| |run#0@@27| |j#0@@1|))))) :qid |totalord.45:12| :skolemid |9080| :pattern ( ($Unbox charType (|Seq#Index| |run#0@@27| |j#0@@1|)) ($Unbox charType (|Seq#Index| |run#0@@27| |i#0@@10|))) )) (Char__Order.__default.IsSorted ($LS $ly@@89) |run#0@@27|))))) :qid |totalord.41:23| :skolemid |9081| :pattern ( (Char__Order.__default.IsSorted ($LS $ly@@89) |run#0@@27|)) ))))
(assert  (=> (<= 6 $FunctionContextHeight) (forall (($ly@@90 T@U) (|run#0@@28| T@U) ) (!  (=> (and (and (= (type $ly@@90) LayerTypeType) (= (type |run#0@@28|) (SeqType BoxType))) (or (|Char__Order.__default.IsSorted#canCall| (Lit |run#0@@28|)) (and (not (= 6 $FunctionContextHeight)) ($Is |run#0@@28| (TSeq TChar))))) (and (forall ((|i#1@@6| Int) (|j#1| Int) ) (!  (=> (< |j#1| (|Seq#Length| (Lit |run#0@@28|))) (|Char__Order.__default.lte#canCall| ($Unbox charType (|Seq#Index| (Lit |run#0@@28|) |i#1@@6|)) ($Unbox charType (|Seq#Index| (Lit |run#0@@28|) |j#1|)))) :qid |totalord.45:12| :skolemid |9082| :pattern ( ($Unbox charType (|Seq#Index| |run#0@@28| |j#1|)) ($Unbox charType (|Seq#Index| |run#0@@28| |i#1@@6|))) )) (and (=> (Char__Order.__default.IsSorted ($LS $ly@@90) (Lit |run#0@@28|)) (forall ((|i#1@@7| Int) (|j#1@@0| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@7|) (<= |i#1@@7| |j#1@@0|)) (< |j#1@@0| (|Seq#Length| (Lit |run#0@@28|)))) (Char__Order.__default.lte ($Unbox charType (|Seq#Index| (Lit |run#0@@28|) |i#1@@7|)) ($Unbox charType (|Seq#Index| (Lit |run#0@@28|) |j#1@@0|))))) :qid |totalord.45:12| :skolemid |9083| :pattern ( ($Unbox charType (|Seq#Index| |run#0@@28| |j#1@@0|)) ($Unbox charType (|Seq#Index| |run#0@@28| |i#1@@7|))) ))) (=> (forall ((|i#1@@8| Int) (|j#1@@1| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@8|) (<= |i#1@@8| |j#1@@1|)) (< |j#1@@1| (|Seq#Length| (Lit |run#0@@28|)))) (Char__Order.__default.lte ($Unbox charType (|Seq#Index| (Lit |run#0@@28|) |i#1@@8|)) ($Unbox charType (|Seq#Index| (Lit |run#0@@28|) |j#1@@1|))))) :qid |totalord.45:12| :skolemid |9083| :pattern ( ($Unbox charType (|Seq#Index| |run#0@@28| |j#1@@1|)) ($Unbox charType (|Seq#Index| |run#0@@28| |i#1@@8|))) )) (Char__Order.__default.IsSorted ($LS $ly@@90) (Lit |run#0@@28|)))))) :qid |totalord.41:23| :weight 3 :skolemid |9084| :pattern ( (Char__Order.__default.IsSorted ($LS $ly@@90) (Lit |run#0@@28|))) ))))
(assert  (=> (<= 7 $FunctionContextHeight) (forall ((|run#0@@29| T@U) ) (!  (=> (and (= (type |run#0@@29|) (SeqType BoxType)) (or (|Char__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@29|) (and (not (= 7 $FunctionContextHeight)) ($Is |run#0@@29| (TSeq TChar))))) true) :qid |totalord.48:38| :skolemid |9088| :pattern ( (Char__Order.__default.IsStrictlySortedInternal |run#0@@29|)) ))))
(assert (forall ((|run#0@@30| T@U) ) (!  (=> (and (= (type |run#0@@30|) (SeqType BoxType)) ($Is |run#0@@30| (TSeq TChar))) (and (=> (|Char__Order.__default.IsStrictlySortedInternal#requires| |run#0@@30|) true) (=> true (|Char__Order.__default.IsStrictlySortedInternal#requires| |run#0@@30|)))) :qid |totalord.48:38| :skolemid |9089| :pattern ( (|Char__Order.__default.IsStrictlySortedInternal#requires| |run#0@@30|)) )))
(assert  (=> (<= 7 $FunctionContextHeight) (forall ((|run#0@@31| T@U) ) (!  (=> (and (= (type |run#0@@31|) (SeqType BoxType)) (or (|Char__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@31|) (and (not (= 7 $FunctionContextHeight)) ($Is |run#0@@31| (TSeq TChar))))) (and (forall ((|i#0@@11| Int) (|j#0@@2| Int) ) (!  (=> (< |j#0@@2| (|Seq#Length| |run#0@@31|)) (|Char__Order.__default.lt#canCall| ($Unbox charType (|Seq#Index| |run#0@@31| |i#0@@11|)) ($Unbox charType (|Seq#Index| |run#0@@31| |j#0@@2|)))) :qid |totalord.50:12| :skolemid |9090| :pattern ( ($Unbox charType (|Seq#Index| |run#0@@31| |j#0@@2|)) ($Unbox charType (|Seq#Index| |run#0@@31| |i#0@@11|))) )) (and (=> (Char__Order.__default.IsStrictlySortedInternal |run#0@@31|) (forall ((|i#0@@12| Int) (|j#0@@3| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@12|) (< |i#0@@12| |j#0@@3|)) (< |j#0@@3| (|Seq#Length| |run#0@@31|))) (Char__Order.__default.lt ($Unbox charType (|Seq#Index| |run#0@@31| |i#0@@12|)) ($Unbox charType (|Seq#Index| |run#0@@31| |j#0@@3|))))) :qid |totalord.50:12| :skolemid |9091| :pattern ( ($Unbox charType (|Seq#Index| |run#0@@31| |j#0@@3|)) ($Unbox charType (|Seq#Index| |run#0@@31| |i#0@@12|))) ))) (=> (forall ((|i#0@@13| Int) (|j#0@@4| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@13|) (< |i#0@@13| |j#0@@4|)) (< |j#0@@4| (|Seq#Length| |run#0@@31|))) (Char__Order.__default.lt ($Unbox charType (|Seq#Index| |run#0@@31| |i#0@@13|)) ($Unbox charType (|Seq#Index| |run#0@@31| |j#0@@4|))))) :qid |totalord.50:12| :skolemid |9091| :pattern ( ($Unbox charType (|Seq#Index| |run#0@@31| |j#0@@4|)) ($Unbox charType (|Seq#Index| |run#0@@31| |i#0@@13|))) )) (Char__Order.__default.IsStrictlySortedInternal |run#0@@31|))))) :qid |totalord.48:38| :skolemid |9092| :pattern ( (Char__Order.__default.IsStrictlySortedInternal |run#0@@31|)) ))))
(assert  (=> (<= 7 $FunctionContextHeight) (forall ((|run#0@@32| T@U) ) (!  (=> (and (= (type |run#0@@32|) (SeqType BoxType)) (or (|Char__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@32|)) (and (not (= 7 $FunctionContextHeight)) ($Is |run#0@@32| (TSeq TChar))))) (and (forall ((|i#1@@9| Int) (|j#1@@2| Int) ) (!  (=> (< |j#1@@2| (|Seq#Length| (Lit |run#0@@32|))) (|Char__Order.__default.lt#canCall| ($Unbox charType (|Seq#Index| (Lit |run#0@@32|) |i#1@@9|)) ($Unbox charType (|Seq#Index| (Lit |run#0@@32|) |j#1@@2|)))) :qid |totalord.50:12| :skolemid |9093| :pattern ( ($Unbox charType (|Seq#Index| |run#0@@32| |j#1@@2|)) ($Unbox charType (|Seq#Index| |run#0@@32| |i#1@@9|))) )) (and (=> (Char__Order.__default.IsStrictlySortedInternal (Lit |run#0@@32|)) (forall ((|i#1@@10| Int) (|j#1@@3| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@10|) (< |i#1@@10| |j#1@@3|)) (< |j#1@@3| (|Seq#Length| (Lit |run#0@@32|)))) (Char__Order.__default.lt ($Unbox charType (|Seq#Index| (Lit |run#0@@32|) |i#1@@10|)) ($Unbox charType (|Seq#Index| (Lit |run#0@@32|) |j#1@@3|))))) :qid |totalord.50:12| :skolemid |9094| :pattern ( ($Unbox charType (|Seq#Index| |run#0@@32| |j#1@@3|)) ($Unbox charType (|Seq#Index| |run#0@@32| |i#1@@10|))) ))) (=> (forall ((|i#1@@11| Int) (|j#1@@4| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@11|) (< |i#1@@11| |j#1@@4|)) (< |j#1@@4| (|Seq#Length| (Lit |run#0@@32|)))) (Char__Order.__default.lt ($Unbox charType (|Seq#Index| (Lit |run#0@@32|) |i#1@@11|)) ($Unbox charType (|Seq#Index| (Lit |run#0@@32|) |j#1@@4|))))) :qid |totalord.50:12| :skolemid |9094| :pattern ( ($Unbox charType (|Seq#Index| |run#0@@32| |j#1@@4|)) ($Unbox charType (|Seq#Index| |run#0@@32| |i#1@@11|))) )) (Char__Order.__default.IsStrictlySortedInternal (Lit |run#0@@32|)))))) :qid |totalord.48:38| :weight 3 :skolemid |9095| :pattern ( (Char__Order.__default.IsStrictlySortedInternal (Lit |run#0@@32|))) ))))
(assert (forall (($ly@@91 T@U) (|run#0@@33| T@U) ) (!  (=> (and (= (type $ly@@91) LayerTypeType) (= (type |run#0@@33|) (SeqType BoxType))) (and (=> (Char__Order.__default.IsStrictlySorted ($LS $ly@@91) |run#0@@33|) (Char__Order.__default.IsStrictlySorted $ly@@91 |run#0@@33|)) (=> (Char__Order.__default.IsStrictlySorted $ly@@91 |run#0@@33|) (Char__Order.__default.IsStrictlySorted ($LS $ly@@91) |run#0@@33|)))) :qid |totalord.64:23| :skolemid |9105| :pattern ( (Char__Order.__default.IsStrictlySorted ($LS $ly@@91) |run#0@@33|)) )))
(assert (forall (($ly@@92 T@U) (|run#0@@34| T@U) ) (!  (=> (and (= (type $ly@@92) LayerTypeType) (= (type |run#0@@34|) (SeqType BoxType))) (and (=> (Char__Order.__default.IsStrictlySorted $ly@@92 |run#0@@34|) (Char__Order.__default.IsStrictlySorted $LZ |run#0@@34|)) (=> (Char__Order.__default.IsStrictlySorted $LZ |run#0@@34|) (Char__Order.__default.IsStrictlySorted $ly@@92 |run#0@@34|)))) :qid |totalord.64:23| :skolemid |9106| :pattern ( (Char__Order.__default.IsStrictlySorted (AsFuelBottom $ly@@92) |run#0@@34|)) )))
(assert  (=> (<= 10 $FunctionContextHeight) (forall (($ly@@93 T@U) (|run#0@@35| T@U) ) (!  (=> (and (and (= (type $ly@@93) LayerTypeType) (= (type |run#0@@35|) (SeqType BoxType))) (or (|Char__Order.__default.IsStrictlySorted#canCall| |run#0@@35|) (and (not (= 10 $FunctionContextHeight)) ($Is |run#0@@35| (TSeq TChar))))) (and (and (=> (= (|Seq#Length| |run#0@@35|) (LitInt 0)) (Char__Order.__default.IsStrictlySorted $ly@@93 |run#0@@35|)) (=> (= (|Seq#Length| |run#0@@35|) (LitInt 1)) (Char__Order.__default.IsStrictlySorted $ly@@93 |run#0@@35|))) (=> (Char__Order.__default.IsStrictlySorted $ly@@93 |run#0@@35|) (Char__Order.__default.IsSorted StartFuel_Char_Order._default.IsSorted |run#0@@35|)))) :qid |totalord.64:23| :skolemid |9107| :pattern ( (Char__Order.__default.IsStrictlySorted $ly@@93 |run#0@@35|)) ))))
(assert (forall (($ly@@94 T@U) (|run#0@@36| T@U) ) (!  (=> (and (and (= (type $ly@@94) LayerTypeType) (= (type |run#0@@36|) (SeqType BoxType))) ($Is |run#0@@36| (TSeq TChar))) (and (=> (|Char__Order.__default.IsStrictlySorted#requires| $ly@@94 |run#0@@36|) true) (=> true (|Char__Order.__default.IsStrictlySorted#requires| $ly@@94 |run#0@@36|)))) :qid |totalord.64:23| :skolemid |9108| :pattern ( (|Char__Order.__default.IsStrictlySorted#requires| $ly@@94 |run#0@@36|)) )))
(assert  (=> (<= 10 $FunctionContextHeight) (forall (($ly@@95 T@U) (|run#0@@37| T@U) ) (!  (=> (and (and (= (type $ly@@95) LayerTypeType) (= (type |run#0@@37|) (SeqType BoxType))) (or (|Char__Order.__default.IsStrictlySorted#canCall| |run#0@@37|) (and (not (= 10 $FunctionContextHeight)) ($Is |run#0@@37| (TSeq TChar))))) (and (|Char__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@37|) (and (=> (Char__Order.__default.IsStrictlySorted ($LS $ly@@95) |run#0@@37|) (let ((|b#0@@32| (Char__Order.__default.IsStrictlySortedInternal |run#0@@37|))) (ite |b#0@@32| |b#0@@32| |b#0@@32|))) (=> (let ((|b#0@@33| (Char__Order.__default.IsStrictlySortedInternal |run#0@@37|))) (ite |b#0@@33| |b#0@@33| |b#0@@33|)) (Char__Order.__default.IsStrictlySorted ($LS $ly@@95) |run#0@@37|))))) :qid |totalord.64:23| :skolemid |9109| :pattern ( (Char__Order.__default.IsStrictlySorted ($LS $ly@@95) |run#0@@37|)) ))))
(assert  (=> (<= 10 $FunctionContextHeight) (forall (($ly@@96 T@U) (|run#0@@38| T@U) ) (!  (=> (and (and (= (type $ly@@96) LayerTypeType) (= (type |run#0@@38|) (SeqType BoxType))) (or (|Char__Order.__default.IsStrictlySorted#canCall| (Lit |run#0@@38|)) (and (not (= 10 $FunctionContextHeight)) ($Is |run#0@@38| (TSeq TChar))))) (and (|Char__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@38|)) (and (=> (Char__Order.__default.IsStrictlySorted ($LS $ly@@96) (Lit |run#0@@38|)) (let ((|b#1@@3| (U_2_bool (Lit (bool_2_U (Char__Order.__default.IsStrictlySortedInternal (Lit |run#0@@38|))))))) (ite |b#1@@3| |b#1@@3| |b#1@@3|))) (=> (let ((|b#1@@4| (U_2_bool (Lit (bool_2_U (Char__Order.__default.IsStrictlySortedInternal (Lit |run#0@@38|))))))) (ite |b#1@@4| |b#1@@4| |b#1@@4|)) (Char__Order.__default.IsStrictlySorted ($LS $ly@@96) (Lit |run#0@@38|)))))) :qid |totalord.64:23| :weight 3 :skolemid |9110| :pattern ( (Char__Order.__default.IsStrictlySorted ($LS $ly@@96) (Lit |run#0@@38|))) ))))
(assert (= (DatatypeCtorId |#Options.Option.None|) |##Options.Option.None|))
(assert (forall ((d@@10 T@U) ) (!  (=> (= (type d@@10) DatatypeTypeType) (and (=> (Options.Option.None_q d@@10) (= (DatatypeCtorId d@@10) |##Options.Option.None|)) (=> (= (DatatypeCtorId d@@10) |##Options.Option.None|) (Options.Option.None_q d@@10)))) :qid |unknown.0:0| :skolemid |9121| :pattern ( (Options.Option.None_q d@@10)) )))
(assert (forall ((d@@11 T@U) ) (!  (=> (and (= (type d@@11) DatatypeTypeType) (Options.Option.None_q d@@11)) (= d@@11 |#Options.Option.None|)) :qid |unknown.0:0| :skolemid |9122| :pattern ( (Options.Option.None_q d@@11)) )))
(assert (forall ((Options.Option$V@@2 T@U) ) (!  (=> (= (type Options.Option$V@@2) TyType) ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) :qid |unknown.0:0| :skolemid |9123| :pattern ( ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) )))
(assert (forall ((Options.Option$V@@3 T@U) ($h@@23 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@3) TyType) (= (type $h@@23) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@23)) ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@23)) :qid |unknown.0:0| :skolemid |9124| :pattern ( ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@23)) )))
(assert (= |#Options.Option.None| (Lit |#Options.Option.None|)))
(assert (forall ((|a#5#0#0@@0| T@U) ) (!  (=> (= (type |a#5#0#0@@0|) BoxType) (= (DatatypeCtorId (|#Options.Option.Some| |a#5#0#0@@0|)) |##Options.Option.Some|)) :qid |Optionsd.2:36| :skolemid |9125| :pattern ( (|#Options.Option.Some| |a#5#0#0@@0|)) )))
(assert (forall ((d@@12 T@U) ) (!  (=> (= (type d@@12) DatatypeTypeType) (and (=> (Options.Option.Some_q d@@12) (= (DatatypeCtorId d@@12) |##Options.Option.Some|)) (=> (= (DatatypeCtorId d@@12) |##Options.Option.Some|) (Options.Option.Some_q d@@12)))) :qid |unknown.0:0| :skolemid |9126| :pattern ( (Options.Option.Some_q d@@12)) )))
(assert (forall ((d@@13 T@U) ) (!  (=> (and (= (type d@@13) DatatypeTypeType) (Options.Option.Some_q d@@13)) (exists ((|a#6#0#0@@0| T@U) ) (!  (and (= (type |a#6#0#0@@0|) BoxType) (= d@@13 (|#Options.Option.Some| |a#6#0#0@@0|))) :qid |Optionsd.2:36| :skolemid |9127| :no-pattern (type |a#6#0#0@@0|) :no-pattern (U_2_int |a#6#0#0@@0|) :no-pattern (U_2_bool |a#6#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |9128| :pattern ( (Options.Option.Some_q d@@13)) )))
(assert (forall ((Options.Option$V@@4 T@U) (|a#7#0#0@@0| T@U) ) (!  (=> (and (= (type Options.Option$V@@4) TyType) (= (type |a#7#0#0@@0|) BoxType)) (and (=> ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4)) ($IsBox |a#7#0#0@@0| Options.Option$V@@4)) (=> ($IsBox |a#7#0#0@@0| Options.Option$V@@4) ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4))))) :qid |unknown.0:0| :skolemid |9129| :pattern ( ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4))) )))
(assert (forall ((Options.Option$V@@5 T@U) (|a#8#0#0@@0| T@U) ($h@@24 T@U) ) (!  (=> (and (and (and (= (type Options.Option$V@@5) TyType) (= (type |a#8#0#0@@0|) BoxType)) (= (type $h@@24) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@24)) (and (=> ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@24) ($IsAllocBox |a#8#0#0@@0| Options.Option$V@@5 $h@@24)) (=> ($IsAllocBox |a#8#0#0@@0| Options.Option$V@@5 $h@@24) ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@24)))) :qid |unknown.0:0| :skolemid |9130| :pattern ( ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@24)) )))
(assert (forall ((d@@14 T@U) (Options.Option$V@@6 T@U) ($h@@25 T@U) ) (!  (=> (and (and (and (= (type d@@14) DatatypeTypeType) (= (type Options.Option$V@@6) TyType)) (= (type $h@@25) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@25) (and (Options.Option.Some_q d@@14) ($IsAlloc d@@14 (Tclass.Options.Option Options.Option$V@@6) $h@@25)))) ($IsAllocBox (Options.Option.value d@@14) Options.Option$V@@6 $h@@25)) :qid |unknown.0:0| :skolemid |9131| :pattern ( ($IsAllocBox (Options.Option.value d@@14) Options.Option$V@@6 $h@@25)) )))
(assert (forall ((|a#9#0#0| T@U) ) (!  (=> (= (type |a#9#0#0|) BoxType) (= (|#Options.Option.Some| (Lit |a#9#0#0|)) (Lit (|#Options.Option.Some| |a#9#0#0|)))) :qid |Optionsd.2:36| :skolemid |9132| :pattern ( (|#Options.Option.Some| (Lit |a#9#0#0|))) )))
(assert (forall ((|a#10#0#0| T@U) ) (!  (=> (= (type |a#10#0#0|) BoxType) (= (Options.Option.value (|#Options.Option.Some| |a#10#0#0|)) |a#10#0#0|)) :qid |Optionsd.2:36| :skolemid |9133| :pattern ( (|#Options.Option.Some| |a#10#0#0|)) )))
(assert (forall ((|a#11#0#0| T@U) ) (!  (=> (= (type |a#11#0#0|) BoxType) (< (BoxRank |a#11#0#0|) (DtRank (|#Options.Option.Some| |a#11#0#0|)))) :qid |Optionsd.2:36| :skolemid |9134| :pattern ( (|#Options.Option.Some| |a#11#0#0|)) )))
(assert (forall ((d@@15 T@U) ) (!  (=> (and (= (type d@@15) DatatypeTypeType) (|$IsA#Options.Option| d@@15)) (or (Options.Option.None_q d@@15) (Options.Option.Some_q d@@15))) :qid |unknown.0:0| :skolemid |9135| :pattern ( (|$IsA#Options.Option| d@@15)) )))
(assert (forall ((Options.Option$V@@7 T@U) (d@@16 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@7) TyType) (= (type d@@16) DatatypeTypeType)) ($Is d@@16 (Tclass.Options.Option Options.Option$V@@7))) (or (Options.Option.None_q d@@16) (Options.Option.Some_q d@@16))) :qid |unknown.0:0| :skolemid |9136| :pattern ( (Options.Option.Some_q d@@16) ($Is d@@16 (Tclass.Options.Option Options.Option$V@@7))) :pattern ( (Options.Option.None_q d@@16) ($Is d@@16 (Tclass.Options.Option Options.Option$V@@7))) )))
(assert (forall ((a@@116 T@U) (b@@65 T@U) ) (!  (=> (and (and (= (type a@@116) DatatypeTypeType) (= (type b@@65) DatatypeTypeType)) (and (Options.Option.None_q a@@116) (Options.Option.None_q b@@65))) (and (=> (|Options.Option#Equal| a@@116 b@@65) true) (=> true (|Options.Option#Equal| a@@116 b@@65)))) :qid |unknown.0:0| :skolemid |9137| :pattern ( (|Options.Option#Equal| a@@116 b@@65) (Options.Option.None_q a@@116)) :pattern ( (|Options.Option#Equal| a@@116 b@@65) (Options.Option.None_q b@@65)) )))
(assert (forall ((a@@117 T@U) (b@@66 T@U) ) (!  (=> (and (and (= (type a@@117) DatatypeTypeType) (= (type b@@66) DatatypeTypeType)) (and (Options.Option.Some_q a@@117) (Options.Option.Some_q b@@66))) (and (=> (|Options.Option#Equal| a@@117 b@@66) (= (Options.Option.value a@@117) (Options.Option.value b@@66))) (=> (= (Options.Option.value a@@117) (Options.Option.value b@@66)) (|Options.Option#Equal| a@@117 b@@66)))) :qid |unknown.0:0| :skolemid |9138| :pattern ( (|Options.Option#Equal| a@@117 b@@66) (Options.Option.Some_q a@@117)) :pattern ( (|Options.Option#Equal| a@@117 b@@66) (Options.Option.Some_q b@@66)) )))
(assert (forall ((a@@118 T@U) (b@@67 T@U) ) (!  (=> (and (= (type a@@118) DatatypeTypeType) (= (type b@@67) DatatypeTypeType)) (and (=> (|Options.Option#Equal| a@@118 b@@67) (= a@@118 b@@67)) (=> (= a@@118 b@@67) (|Options.Option#Equal| a@@118 b@@67)))) :qid |unknown.0:0| :skolemid |9139| :pattern ( (|Options.Option#Equal| a@@118 b@@67)) )))
(assert (= (type Tclass.Options.__default) TyType))
(assert (= (Tag Tclass.Options.__default) Tagclass.Options.__default))
(assert (forall ((bx@@79 T@U) ) (!  (=> (and (= (type bx@@79) BoxType) ($IsBox bx@@79 Tclass.Options.__default)) (and (= ($Box ($Unbox refType bx@@79)) bx@@79) ($Is ($Unbox refType bx@@79) Tclass.Options.__default))) :qid |unknown.0:0| :skolemid |9140| :pattern ( ($IsBox bx@@79 Tclass.Options.__default)) )))
(assert (forall (($o@@11 T@U) ) (!  (=> (= (type $o@@11) refType) (and (=> ($Is $o@@11 Tclass.Options.__default) (or (= $o@@11 null) (= (dtype $o@@11) Tclass.Options.__default))) (=> (or (= $o@@11 null) (= (dtype $o@@11) Tclass.Options.__default)) ($Is $o@@11 Tclass.Options.__default)))) :qid |unknown.0:0| :skolemid |9141| :pattern ( ($Is $o@@11 Tclass.Options.__default)) )))
(assert (forall (($o@@12 T@U) ($h@@26 T@U) ) (!  (=> (and (= (type $o@@12) refType) (= (type $h@@26) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@12 Tclass.Options.__default $h@@26) (or (= $o@@12 null) (U_2_bool (MapType1Select (MapType0Select $h@@26 $o@@12) alloc)))) (=> (or (= $o@@12 null) (U_2_bool (MapType1Select (MapType0Select $h@@26 $o@@12) alloc))) ($IsAlloc $o@@12 Tclass.Options.__default $h@@26)))) :qid |unknown.0:0| :skolemid |9142| :pattern ( ($IsAlloc $o@@12 Tclass.Options.__default $h@@26)) )))
(assert (forall ((arg0@@243 T@U) (arg1@@124 T@U) (arg2@@66 T@U) (arg3@@43 T@U) (arg4@@29 T@U) ) (! (= (type (Options.__default.MapOption arg0@@243 arg1@@124 arg2@@66 arg3@@43 arg4@@29)) DatatypeTypeType) :qid |funType:Options.__default.MapOption| :pattern ( (Options.__default.MapOption arg0@@243 arg1@@124 arg2@@66 arg3@@43 arg4@@29)) )))
(assert (forall ((Options._default.MapOption$V0 T@U) (Options._default.MapOption$V1 T@U) ($h0 T@U) ($h1 T@U) (|opt#0| T@U) (|f#0@@19| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.MapOption$V0) TyType) (= (type Options._default.MapOption$V1) TyType)) (= (type $h0) (MapType0Type refType MapType1Type))) (= (type $h1) (MapType0Type refType MapType1Type))) (= (type |opt#0|) DatatypeTypeType)) (= (type |f#0@@19|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |opt#0| |f#0@@19|) (and ($Is |opt#0| (Tclass.Options.Option Options._default.MapOption$V0)) ($Is |f#0@@19| (Tclass._System.___hFunc1 Options._default.MapOption$V0 Options._default.MapOption$V1))))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1)))) (forall (($o@@13 T@U) ($f T@U) ) (! (let ((alpha@@6 (FieldTypeInv0 (type $f)))) (=> (and (and (= (type $o@@13) refType) (= (type $f) (FieldType alpha@@6))) (and (not (= $o@@13 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0|) (Reads1 Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |f#0@@19| (Options.Option.value |opt#0|)) (|Set#Empty| BoxType)) ($Box $o@@13))))) (= (MapType1Select (MapType0Select $h0 $o@@13) $f) (MapType1Select (MapType0Select $h1 $o@@13) $f)))) :qid |unknown.0:0| :skolemid |9143| :no-pattern (type $o@@13) :no-pattern (type $f) :no-pattern (U_2_int $o@@13) :no-pattern (U_2_bool $o@@13) :no-pattern (U_2_int $f) :no-pattern (U_2_bool $f) ))) (= (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |opt#0| |f#0@@19|) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1 |opt#0| |f#0@@19|))) :qid |unknown.0:0| :skolemid |9144| :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1 |opt#0| |f#0@@19|)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@0 T@U) (Options._default.MapOption$V1@@0 T@U) ($Heap@@8 T@U) (|opt#0@@0| T@U) (|f#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@0) TyType) (= (type Options._default.MapOption$V1@@0) TyType)) (= (type $Heap@@8) (MapType0Type refType MapType1Type))) (= (type |opt#0@@0|) DatatypeTypeType)) (= (type |f#0@@20|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@8 |opt#0@@0| |f#0@@20|) (and (and (and ($IsGoodHeap $Heap@@8) ($Is |opt#0@@0| (Tclass.Options.Option Options._default.MapOption$V0@@0))) ($Is |f#0@@20| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0))) (=> (Options.Option.Some_q |opt#0@@0|) (Requires1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@8 |f#0@@20| (Options.Option.value |opt#0@@0|)))))) (and (and (and (=> (Options.Option.Some_q |opt#0@@0|) (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@8 |opt#0@@0| |f#0@@20|))) (=> (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@8 |opt#0@@0| |f#0@@20|)) (Options.Option.Some_q |opt#0@@0|))) (=> (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@8 |opt#0@@0| |f#0@@20|)) (= (Options.Option.value (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@8 |opt#0@@0| |f#0@@20|)) (Apply1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@8 |f#0@@20| (Options.Option.value |opt#0@@0|))))) ($Is (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@8 |opt#0@@0| |f#0@@20|) (Tclass.Options.Option Options._default.MapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |9145| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@8 |opt#0@@0| |f#0@@20|)) ))))
(assert (forall ((Options._default.MapOption$V0@@1 T@U) (Options._default.MapOption$V1@@1 T@U) ($Heap@@9 T@U) (|opt#0@@1| T@U) (|f#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@1) TyType) (= (type Options._default.MapOption$V1@@1) TyType)) (= (type $Heap@@9) (MapType0Type refType MapType1Type))) (= (type |opt#0@@1|) DatatypeTypeType)) (= (type |f#0@@21|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@9) ($Is |opt#0@@1| (Tclass.Options.Option Options._default.MapOption$V0@@1))) ($Is |f#0@@21| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1)))) (and (=> (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@9 |opt#0@@1| |f#0@@21|) (=> (Options.Option.Some_q |opt#0@@1|) (Requires1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@9 |f#0@@21| (Options.Option.value |opt#0@@1|)))) (=> (=> (Options.Option.Some_q |opt#0@@1|) (Requires1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@9 |f#0@@21| (Options.Option.value |opt#0@@1|))) (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@9 |opt#0@@1| |f#0@@21|)))) :qid |unknown.0:0| :skolemid |9146| :pattern ( (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@9 |opt#0@@1| |f#0@@21|)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@2 T@U) (Options._default.MapOption$V1@@2 T@U) ($Heap@@10 T@U) (|opt#0@@2| T@U) (|f#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@2) TyType) (= (type Options._default.MapOption$V1@@2) TyType)) (= (type $Heap@@10) (MapType0Type refType MapType1Type))) (= (type |opt#0@@2|) DatatypeTypeType)) (= (type |f#0@@22|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@10 |opt#0@@2| |f#0@@22|) (and (and (and ($IsGoodHeap $Heap@@10) ($Is |opt#0@@2| (Tclass.Options.Option Options._default.MapOption$V0@@2))) ($Is |f#0@@22| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2))) (=> (Options.Option.Some_q |opt#0@@2|) (Requires1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@10 |f#0@@22| (Options.Option.value |opt#0@@2|)))))) (= (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@10 |opt#0@@2| |f#0@@22|) (ite (Options.Option.None_q |opt#0@@2|) |#Options.Option.None| (let ((|v#11| (Options.Option.value |opt#0@@2|))) (|#Options.Option.Some| (Apply1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@10 |f#0@@22| |v#11|)))))) :qid |unknown.0:0| :skolemid |9147| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@10 |opt#0@@2| |f#0@@22|)) ))))
(assert (forall ((arg0@@244 T@U) (arg1@@125 T@U) (arg2@@67 T@U) (arg3@@44 T@U) (arg4@@30 T@U) ) (! (= (type (Options.__default.FlatMapOption arg0@@244 arg1@@125 arg2@@67 arg3@@44 arg4@@30)) DatatypeTypeType) :qid |funType:Options.__default.FlatMapOption| :pattern ( (Options.__default.FlatMapOption arg0@@244 arg1@@125 arg2@@67 arg3@@44 arg4@@30)) )))
(assert (forall ((Options._default.FlatMapOption$V0 T@U) (Options._default.FlatMapOption$V1 T@U) ($h0@@0 T@U) ($h1@@0 T@U) (|opt#0@@3| T@U) (|f#0@@23| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.FlatMapOption$V0) TyType) (= (type Options._default.FlatMapOption$V1) TyType)) (= (type $h0@@0) (MapType0Type refType MapType1Type))) (= (type $h1@@0) (MapType0Type refType MapType1Type))) (= (type |opt#0@@3|) DatatypeTypeType)) (= (type |f#0@@23|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@0) ($IsGoodHeap $h1@@0)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@0 |opt#0@@3| |f#0@@23|) (and ($Is |opt#0@@3| (Tclass.Options.Option Options._default.FlatMapOption$V0)) ($Is |f#0@@23| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1)))))) (and ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0)))) (forall (($o@@14 T@U) ($f@@0 T@U) ) (! (let ((alpha@@7 (FieldTypeInv0 (type $f@@0)))) (=> (and (and (= (type $o@@14) refType) (= (type $f@@0) (FieldType alpha@@7))) (and (not (= $o@@14 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0@@3|) (Reads1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1) $h0@@0 |f#0@@23| (Options.Option.value |opt#0@@3|)) (|Set#Empty| BoxType)) ($Box $o@@14))))) (= (MapType1Select (MapType0Select $h0@@0 $o@@14) $f@@0) (MapType1Select (MapType0Select $h1@@0 $o@@14) $f@@0)))) :qid |unknown.0:0| :skolemid |9148| :no-pattern (type $o@@14) :no-pattern (type $f@@0) :no-pattern (U_2_int $o@@14) :no-pattern (U_2_bool $o@@14) :no-pattern (U_2_int $f@@0) :no-pattern (U_2_bool $f@@0) ))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@0 |opt#0@@3| |f#0@@23|) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@0 |opt#0@@3| |f#0@@23|))) :qid |unknown.0:0| :skolemid |9149| :pattern ( ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@0 |opt#0@@3| |f#0@@23|)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@0 T@U) (Options._default.FlatMapOption$V1@@0 T@U) ($Heap@@11 T@U) (|opt#0@@4| T@U) (|f#0@@24| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@0) TyType) (= (type Options._default.FlatMapOption$V1@@0) TyType)) (= (type $Heap@@11) (MapType0Type refType MapType1Type))) (= (type |opt#0@@4|) DatatypeTypeType)) (= (type |f#0@@24|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@11 |opt#0@@4| |f#0@@24|) (and (and (and ($IsGoodHeap $Heap@@11) ($Is |opt#0@@4| (Tclass.Options.Option Options._default.FlatMapOption$V0@@0))) ($Is |f#0@@24| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) (=> (Options.Option.Some_q |opt#0@@4|) (Requires1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@11 |f#0@@24| (Options.Option.value |opt#0@@4|)))))) (and (and (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@11 |f#0@@24| (Options.Option.value |opt#0@@4|))))) (Options.Option.Some_q (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@11 |opt#0@@4| |f#0@@24|))) (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@11 |f#0@@24| (Options.Option.value |opt#0@@4|))))) (= (Options.Option.value (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@11 |opt#0@@4| |f#0@@24|)) (Options.Option.value ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@11 |f#0@@24| (Options.Option.value |opt#0@@4|))))))) ($Is (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@11 |opt#0@@4| |f#0@@24|) (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |9150| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@11 |opt#0@@4| |f#0@@24|)) ))))
(assert (forall ((Options._default.FlatMapOption$V0@@1 T@U) (Options._default.FlatMapOption$V1@@1 T@U) ($Heap@@12 T@U) (|opt#0@@5| T@U) (|f#0@@25| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@1) TyType) (= (type Options._default.FlatMapOption$V1@@1) TyType)) (= (type $Heap@@12) (MapType0Type refType MapType1Type))) (= (type |opt#0@@5|) DatatypeTypeType)) (= (type |f#0@@25|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@12) ($Is |opt#0@@5| (Tclass.Options.Option Options._default.FlatMapOption$V0@@1))) ($Is |f#0@@25| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1))))) (and (=> (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@12 |opt#0@@5| |f#0@@25|) (=> (Options.Option.Some_q |opt#0@@5|) (Requires1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1) $Heap@@12 |f#0@@25| (Options.Option.value |opt#0@@5|)))) (=> (=> (Options.Option.Some_q |opt#0@@5|) (Requires1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1) $Heap@@12 |f#0@@25| (Options.Option.value |opt#0@@5|))) (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@12 |opt#0@@5| |f#0@@25|)))) :qid |unknown.0:0| :skolemid |9151| :pattern ( (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@12 |opt#0@@5| |f#0@@25|)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@2 T@U) (Options._default.FlatMapOption$V1@@2 T@U) ($Heap@@13 T@U) (|opt#0@@6| T@U) (|f#0@@26| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@2) TyType) (= (type Options._default.FlatMapOption$V1@@2) TyType)) (= (type $Heap@@13) (MapType0Type refType MapType1Type))) (= (type |opt#0@@6|) DatatypeTypeType)) (= (type |f#0@@26|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@13 |opt#0@@6| |f#0@@26|) (and (and (and ($IsGoodHeap $Heap@@13) ($Is |opt#0@@6| (Tclass.Options.Option Options._default.FlatMapOption$V0@@2))) ($Is |f#0@@26| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2)))) (=> (Options.Option.Some_q |opt#0@@6|) (Requires1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@13 |f#0@@26| (Options.Option.value |opt#0@@6|)))))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@13 |opt#0@@6| |f#0@@26|) (ite (Options.Option.None_q |opt#0@@6|) |#Options.Option.None| (let ((|v#11@@0| (Options.Option.value |opt#0@@6|))) ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@13 |f#0@@26| |v#11@@0|)))))) :qid |unknown.0:0| :skolemid |9152| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@13 |opt#0@@6| |f#0@@26|)) ))))
(assert (= (type Tclass.NativeTypes.sbyte) TyType))
(assert (= (Tag Tclass.NativeTypes.sbyte) Tagclass.NativeTypes.sbyte))
(assert (forall ((bx@@80 T@U) ) (!  (=> (and (= (type bx@@80) BoxType) ($IsBox bx@@80 Tclass.NativeTypes.sbyte)) (and (= ($Box ($Unbox intType bx@@80)) bx@@80) ($Is ($Unbox intType bx@@80) Tclass.NativeTypes.sbyte))) :qid |unknown.0:0| :skolemid |9153| :pattern ( ($IsBox bx@@80 Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@14| T@U) ) (!  (=> (= (type |i#0@@14|) intType) (and (=> ($Is |i#0@@14| Tclass.NativeTypes.sbyte) (and (<= (LitInt (- 0 128)) (U_2_int |i#0@@14|)) (< (U_2_int |i#0@@14|) 128))) (=> (and (<= (LitInt (- 0 128)) (U_2_int |i#0@@14|)) (< (U_2_int |i#0@@14|) 128)) ($Is |i#0@@14| Tclass.NativeTypes.sbyte)))) :qid |nofile.1:120| :skolemid |9154| :pattern ( ($Is |i#0@@14| Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@15| T@U) ($h@@27 T@U) ) (!  (=> (and (= (type |i#0@@15|) intType) (= (type $h@@27) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@15| Tclass.NativeTypes.sbyte $h@@27)) :qid |nofile.1:120| :skolemid |9155| :pattern ( ($IsAlloc |i#0@@15| Tclass.NativeTypes.sbyte $h@@27)) )))
(assert (= (type Tclass.NativeTypes.byte) TyType))
(assert (= (Tag Tclass.NativeTypes.byte) Tagclass.NativeTypes.byte))
(assert (forall ((bx@@81 T@U) ) (!  (=> (and (= (type bx@@81) BoxType) ($IsBox bx@@81 Tclass.NativeTypes.byte)) (and (= ($Box ($Unbox intType bx@@81)) bx@@81) ($Is ($Unbox intType bx@@81) Tclass.NativeTypes.byte))) :qid |unknown.0:0| :skolemid |9156| :pattern ( ($IsBox bx@@81 Tclass.NativeTypes.byte)) )))
(assert (forall ((|i#0@@16| T@U) ) (!  (=> (= (type |i#0@@16|) intType) (and (=> ($Is |i#0@@16| Tclass.NativeTypes.byte) (and (<= (LitInt 0) (U_2_int |i#0@@16|)) (< (U_2_int |i#0@@16|) 256))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@16|)) (< (U_2_int |i#0@@16|) 256)) ($Is |i#0@@16| Tclass.NativeTypes.byte)))) :qid |nofile.1:120| :skolemid |9157| :pattern ( ($Is |i#0@@16| Tclass.NativeTypes.byte)) )))
(assert (forall ((|i#0@@17| T@U) ($h@@28 T@U) ) (!  (=> (and (= (type |i#0@@17|) intType) (= (type $h@@28) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@17| Tclass.NativeTypes.byte $h@@28)) :qid |nofile.1:120| :skolemid |9158| :pattern ( ($IsAlloc |i#0@@17| Tclass.NativeTypes.byte $h@@28)) )))
(assert (= (type Tclass.NativeTypes.int16) TyType))
(assert (= (Tag Tclass.NativeTypes.int16) Tagclass.NativeTypes.int16))
(assert (forall ((bx@@82 T@U) ) (!  (=> (and (= (type bx@@82) BoxType) ($IsBox bx@@82 Tclass.NativeTypes.int16)) (and (= ($Box ($Unbox intType bx@@82)) bx@@82) ($Is ($Unbox intType bx@@82) Tclass.NativeTypes.int16))) :qid |unknown.0:0| :skolemid |9159| :pattern ( ($IsBox bx@@82 Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@18| T@U) ) (!  (=> (= (type |i#0@@18|) intType) (and (=> ($Is |i#0@@18| Tclass.NativeTypes.int16) (and (<= (LitInt (- 0 32768)) (U_2_int |i#0@@18|)) (< (U_2_int |i#0@@18|) 32768))) (=> (and (<= (LitInt (- 0 32768)) (U_2_int |i#0@@18|)) (< (U_2_int |i#0@@18|) 32768)) ($Is |i#0@@18| Tclass.NativeTypes.int16)))) :qid |nofile.1:120| :skolemid |9160| :pattern ( ($Is |i#0@@18| Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@19| T@U) ($h@@29 T@U) ) (!  (=> (and (= (type |i#0@@19|) intType) (= (type $h@@29) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@19| Tclass.NativeTypes.int16 $h@@29)) :qid |nofile.1:120| :skolemid |9161| :pattern ( ($IsAlloc |i#0@@19| Tclass.NativeTypes.int16 $h@@29)) )))
(assert (= (type Tclass.NativeTypes.uint16) TyType))
(assert (= (Tag Tclass.NativeTypes.uint16) Tagclass.NativeTypes.uint16))
(assert (forall ((bx@@83 T@U) ) (!  (=> (and (= (type bx@@83) BoxType) ($IsBox bx@@83 Tclass.NativeTypes.uint16)) (and (= ($Box ($Unbox intType bx@@83)) bx@@83) ($Is ($Unbox intType bx@@83) Tclass.NativeTypes.uint16))) :qid |unknown.0:0| :skolemid |9162| :pattern ( ($IsBox bx@@83 Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@20| T@U) ) (!  (=> (= (type |i#0@@20|) intType) (and (=> ($Is |i#0@@20| Tclass.NativeTypes.uint16) (and (<= (LitInt 0) (U_2_int |i#0@@20|)) (< (U_2_int |i#0@@20|) 65536))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@20|)) (< (U_2_int |i#0@@20|) 65536)) ($Is |i#0@@20| Tclass.NativeTypes.uint16)))) :qid |nofile.1:120| :skolemid |9163| :pattern ( ($Is |i#0@@20| Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@21| T@U) ($h@@30 T@U) ) (!  (=> (and (= (type |i#0@@21|) intType) (= (type $h@@30) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@21| Tclass.NativeTypes.uint16 $h@@30)) :qid |nofile.1:120| :skolemid |9164| :pattern ( ($IsAlloc |i#0@@21| Tclass.NativeTypes.uint16 $h@@30)) )))
(assert (= (type Tclass.NativeTypes.int32) TyType))
(assert (= (Tag Tclass.NativeTypes.int32) Tagclass.NativeTypes.int32))
(assert (forall ((bx@@84 T@U) ) (!  (=> (and (= (type bx@@84) BoxType) ($IsBox bx@@84 Tclass.NativeTypes.int32)) (and (= ($Box ($Unbox intType bx@@84)) bx@@84) ($Is ($Unbox intType bx@@84) Tclass.NativeTypes.int32))) :qid |unknown.0:0| :skolemid |9165| :pattern ( ($IsBox bx@@84 Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@22| T@U) ) (!  (=> (= (type |i#0@@22|) intType) (and (=> ($Is |i#0@@22| Tclass.NativeTypes.int32) (and (<= (LitInt (- 0 2147483648)) (U_2_int |i#0@@22|)) (< (U_2_int |i#0@@22|) 2147483648))) (=> (and (<= (LitInt (- 0 2147483648)) (U_2_int |i#0@@22|)) (< (U_2_int |i#0@@22|) 2147483648)) ($Is |i#0@@22| Tclass.NativeTypes.int32)))) :qid |nofile.1:120| :skolemid |9166| :pattern ( ($Is |i#0@@22| Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@23| T@U) ($h@@31 T@U) ) (!  (=> (and (= (type |i#0@@23|) intType) (= (type $h@@31) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@23| Tclass.NativeTypes.int32 $h@@31)) :qid |nofile.1:120| :skolemid |9167| :pattern ( ($IsAlloc |i#0@@23| Tclass.NativeTypes.int32 $h@@31)) )))
(assert (= (type Tclass.NativeTypes.uint32) TyType))
(assert (= (Tag Tclass.NativeTypes.uint32) Tagclass.NativeTypes.uint32))
(assert (forall ((bx@@85 T@U) ) (!  (=> (and (= (type bx@@85) BoxType) ($IsBox bx@@85 Tclass.NativeTypes.uint32)) (and (= ($Box ($Unbox intType bx@@85)) bx@@85) ($Is ($Unbox intType bx@@85) Tclass.NativeTypes.uint32))) :qid |unknown.0:0| :skolemid |9168| :pattern ( ($IsBox bx@@85 Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@24| T@U) ) (!  (=> (= (type |i#0@@24|) intType) (and (=> ($Is |i#0@@24| Tclass.NativeTypes.uint32) (and (<= (LitInt 0) (U_2_int |i#0@@24|)) (< (U_2_int |i#0@@24|) 4294967296))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@24|)) (< (U_2_int |i#0@@24|) 4294967296)) ($Is |i#0@@24| Tclass.NativeTypes.uint32)))) :qid |nofile.1:120| :skolemid |9169| :pattern ( ($Is |i#0@@24| Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@25| T@U) ($h@@32 T@U) ) (!  (=> (and (= (type |i#0@@25|) intType) (= (type $h@@32) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@25| Tclass.NativeTypes.uint32 $h@@32)) :qid |nofile.1:120| :skolemid |9170| :pattern ( ($IsAlloc |i#0@@25| Tclass.NativeTypes.uint32 $h@@32)) )))
(assert (= (type Tclass.NativeTypes.int64) TyType))
(assert (= (Tag Tclass.NativeTypes.int64) Tagclass.NativeTypes.int64))
(assert (forall ((bx@@86 T@U) ) (!  (=> (and (= (type bx@@86) BoxType) ($IsBox bx@@86 Tclass.NativeTypes.int64)) (and (= ($Box ($Unbox intType bx@@86)) bx@@86) ($Is ($Unbox intType bx@@86) Tclass.NativeTypes.int64))) :qid |unknown.0:0| :skolemid |9171| :pattern ( ($IsBox bx@@86 Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@26| T@U) ) (!  (=> (= (type |i#0@@26|) intType) (and (=> ($Is |i#0@@26| Tclass.NativeTypes.int64) (and (<= (LitInt (- 0 9223372036854775808)) (U_2_int |i#0@@26|)) (< (U_2_int |i#0@@26|) 9223372036854775808))) (=> (and (<= (LitInt (- 0 9223372036854775808)) (U_2_int |i#0@@26|)) (< (U_2_int |i#0@@26|) 9223372036854775808)) ($Is |i#0@@26| Tclass.NativeTypes.int64)))) :qid |nofile.1:120| :skolemid |9172| :pattern ( ($Is |i#0@@26| Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@27| T@U) ($h@@33 T@U) ) (!  (=> (and (= (type |i#0@@27|) intType) (= (type $h@@33) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@27| Tclass.NativeTypes.int64 $h@@33)) :qid |nofile.1:120| :skolemid |9173| :pattern ( ($IsAlloc |i#0@@27| Tclass.NativeTypes.int64 $h@@33)) )))
(assert (= (type Tclass.NativeTypes.uint64) TyType))
(assert (= (Tag Tclass.NativeTypes.uint64) Tagclass.NativeTypes.uint64))
(assert (forall ((bx@@87 T@U) ) (!  (=> (and (= (type bx@@87) BoxType) ($IsBox bx@@87 Tclass.NativeTypes.uint64)) (and (= ($Box ($Unbox intType bx@@87)) bx@@87) ($Is ($Unbox intType bx@@87) Tclass.NativeTypes.uint64))) :qid |unknown.0:0| :skolemid |9174| :pattern ( ($IsBox bx@@87 Tclass.NativeTypes.uint64)) )))
(assert (forall ((|i#0@@28| T@U) ) (!  (=> (= (type |i#0@@28|) intType) (and (=> ($Is |i#0@@28| Tclass.NativeTypes.uint64) (and (<= (LitInt 0) (U_2_int |i#0@@28|)) (< (U_2_int |i#0@@28|) 18446744073709551616))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@28|)) (< (U_2_int |i#0@@28|) 18446744073709551616)) ($Is |i#0@@28| Tclass.NativeTypes.uint64)))) :qid |nofile.1:120| :skolemid |9175| :pattern ( ($Is |i#0@@28| Tclass.NativeTypes.uint64)) )))
(assert (forall ((|i#0@@29| T@U) ($h@@34 T@U) ) (!  (=> (and (= (type |i#0@@29|) intType) (= (type $h@@34) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@29| Tclass.NativeTypes.uint64 $h@@34)) :qid |nofile.1:120| :skolemid |9176| :pattern ( ($IsAlloc |i#0@@29| Tclass.NativeTypes.uint64 $h@@34)) )))
(assert (= (type Tclass.NativeTypes.nat8) TyType))
(assert (= (Tag Tclass.NativeTypes.nat8) Tagclass.NativeTypes.nat8))
(assert (forall ((bx@@88 T@U) ) (!  (=> (and (= (type bx@@88) BoxType) ($IsBox bx@@88 Tclass.NativeTypes.nat8)) (and (= ($Box ($Unbox intType bx@@88)) bx@@88) ($Is ($Unbox intType bx@@88) Tclass.NativeTypes.nat8))) :qid |unknown.0:0| :skolemid |9177| :pattern ( ($IsBox bx@@88 Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@30| T@U) ) (!  (=> (= (type |i#0@@30|) intType) (and (=> ($Is |i#0@@30| Tclass.NativeTypes.nat8) (and (<= (LitInt 0) (U_2_int |i#0@@30|)) (< (U_2_int |i#0@@30|) 128))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@30|)) (< (U_2_int |i#0@@30|) 128)) ($Is |i#0@@30| Tclass.NativeTypes.nat8)))) :qid |nofile.1:120| :skolemid |9178| :pattern ( ($Is |i#0@@30| Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@31| T@U) ($h@@35 T@U) ) (!  (=> (and (= (type |i#0@@31|) intType) (= (type $h@@35) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@31| Tclass.NativeTypes.nat8 $h@@35)) :qid |nofile.1:120| :skolemid |9179| :pattern ( ($IsAlloc |i#0@@31| Tclass.NativeTypes.nat8 $h@@35)) )))
(assert (= (type Tclass.NativeTypes.nat16) TyType))
(assert (= (Tag Tclass.NativeTypes.nat16) Tagclass.NativeTypes.nat16))
(assert (forall ((bx@@89 T@U) ) (!  (=> (and (= (type bx@@89) BoxType) ($IsBox bx@@89 Tclass.NativeTypes.nat16)) (and (= ($Box ($Unbox intType bx@@89)) bx@@89) ($Is ($Unbox intType bx@@89) Tclass.NativeTypes.nat16))) :qid |unknown.0:0| :skolemid |9180| :pattern ( ($IsBox bx@@89 Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@32| T@U) ) (!  (=> (= (type |i#0@@32|) intType) (and (=> ($Is |i#0@@32| Tclass.NativeTypes.nat16) (and (<= (LitInt 0) (U_2_int |i#0@@32|)) (< (U_2_int |i#0@@32|) 32768))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@32|)) (< (U_2_int |i#0@@32|) 32768)) ($Is |i#0@@32| Tclass.NativeTypes.nat16)))) :qid |nofile.1:120| :skolemid |9181| :pattern ( ($Is |i#0@@32| Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@33| T@U) ($h@@36 T@U) ) (!  (=> (and (= (type |i#0@@33|) intType) (= (type $h@@36) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@33| Tclass.NativeTypes.nat16 $h@@36)) :qid |nofile.1:120| :skolemid |9182| :pattern ( ($IsAlloc |i#0@@33| Tclass.NativeTypes.nat16 $h@@36)) )))
(assert (= (type Tclass.NativeTypes.nat32) TyType))
(assert (= (Tag Tclass.NativeTypes.nat32) Tagclass.NativeTypes.nat32))
(assert (forall ((bx@@90 T@U) ) (!  (=> (and (= (type bx@@90) BoxType) ($IsBox bx@@90 Tclass.NativeTypes.nat32)) (and (= ($Box ($Unbox intType bx@@90)) bx@@90) ($Is ($Unbox intType bx@@90) Tclass.NativeTypes.nat32))) :qid |unknown.0:0| :skolemid |9183| :pattern ( ($IsBox bx@@90 Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@34| T@U) ) (!  (=> (= (type |i#0@@34|) intType) (and (=> ($Is |i#0@@34| Tclass.NativeTypes.nat32) (and (<= (LitInt 0) (U_2_int |i#0@@34|)) (< (U_2_int |i#0@@34|) 2147483648))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@34|)) (< (U_2_int |i#0@@34|) 2147483648)) ($Is |i#0@@34| Tclass.NativeTypes.nat32)))) :qid |nofile.1:120| :skolemid |9184| :pattern ( ($Is |i#0@@34| Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@35| T@U) ($h@@37 T@U) ) (!  (=> (and (= (type |i#0@@35|) intType) (= (type $h@@37) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@35| Tclass.NativeTypes.nat32 $h@@37)) :qid |nofile.1:120| :skolemid |9185| :pattern ( ($IsAlloc |i#0@@35| Tclass.NativeTypes.nat32 $h@@37)) )))
(assert (= (type Tclass.NativeTypes.nat64) TyType))
(assert (= (Tag Tclass.NativeTypes.nat64) Tagclass.NativeTypes.nat64))
(assert (forall ((bx@@91 T@U) ) (!  (=> (and (= (type bx@@91) BoxType) ($IsBox bx@@91 Tclass.NativeTypes.nat64)) (and (= ($Box ($Unbox intType bx@@91)) bx@@91) ($Is ($Unbox intType bx@@91) Tclass.NativeTypes.nat64))) :qid |unknown.0:0| :skolemid |9186| :pattern ( ($IsBox bx@@91 Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@36| T@U) ) (!  (=> (= (type |i#0@@36|) intType) (and (=> ($Is |i#0@@36| Tclass.NativeTypes.nat64) (and (<= (LitInt 0) (U_2_int |i#0@@36|)) (< (U_2_int |i#0@@36|) 9223372036854775808))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@36|)) (< (U_2_int |i#0@@36|) 9223372036854775808)) ($Is |i#0@@36| Tclass.NativeTypes.nat64)))) :qid |nofile.1:120| :skolemid |9187| :pattern ( ($Is |i#0@@36| Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@37| T@U) ($h@@38 T@U) ) (!  (=> (and (= (type |i#0@@37|) intType) (= (type $h@@38) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@37| Tclass.NativeTypes.nat64 $h@@38)) :qid |nofile.1:120| :skolemid |9188| :pattern ( ($IsAlloc |i#0@@37| Tclass.NativeTypes.nat64 $h@@38)) )))
(assert (= (type Tclass.NativeTypes.__default) TyType))
(assert (= (Tag Tclass.NativeTypes.__default) Tagclass.NativeTypes.__default))
(assert (forall ((bx@@92 T@U) ) (!  (=> (and (= (type bx@@92) BoxType) ($IsBox bx@@92 Tclass.NativeTypes.__default)) (and (= ($Box ($Unbox refType bx@@92)) bx@@92) ($Is ($Unbox refType bx@@92) Tclass.NativeTypes.__default))) :qid |unknown.0:0| :skolemid |9189| :pattern ( ($IsBox bx@@92 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@15 T@U) ) (!  (=> (= (type $o@@15) refType) (and (=> ($Is $o@@15 Tclass.NativeTypes.__default) (or (= $o@@15 null) (= (dtype $o@@15) Tclass.NativeTypes.__default))) (=> (or (= $o@@15 null) (= (dtype $o@@15) Tclass.NativeTypes.__default)) ($Is $o@@15 Tclass.NativeTypes.__default)))) :qid |unknown.0:0| :skolemid |9190| :pattern ( ($Is $o@@15 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@16 T@U) ($h@@39 T@U) ) (!  (=> (and (= (type $o@@16) refType) (= (type $h@@39) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@16 Tclass.NativeTypes.__default $h@@39) (or (= $o@@16 null) (U_2_bool (MapType1Select (MapType0Select $h@@39 $o@@16) alloc)))) (=> (or (= $o@@16 null) (U_2_bool (MapType1Select (MapType0Select $h@@39 $o@@16) alloc))) ($IsAlloc $o@@16 Tclass.NativeTypes.__default $h@@39)))) :qid |unknown.0:0| :skolemid |9191| :pattern ( ($IsAlloc $o@@16 Tclass.NativeTypes.__default $h@@39)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint64Size) (< NativeTypes.__default.Uint64Size 18446744073709551616)))))
(assert  (=> |NativeTypes.__default.Uint64Size#requires| true))
(assert  (=> true |NativeTypes.__default.Uint64Size#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint32Size) (< NativeTypes.__default.Uint32Size 18446744073709551616)))))
(assert  (=> |NativeTypes.__default.Uint32Size#requires| true))
(assert  (=> true |NativeTypes.__default.Uint32Size#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint16Size) (< NativeTypes.__default.Uint16Size 18446744073709551616)))))
(assert  (=> |NativeTypes.__default.Uint16Size#requires| true))
(assert  (=> true |NativeTypes.__default.Uint16Size#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true true)))
(assert  (=> |NativeTypes.__default.Uint64UpperBound#requires| true))
(assert  (=> true |NativeTypes.__default.Uint64UpperBound#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true true)))
(assert  (=> |NativeTypes.__default.Uint32UpperBound#requires| true))
(assert  (=> true |NativeTypes.__default.Uint32UpperBound#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert (= (type Tclass.Sequences.__default) TyType))
(assert (= (Tag Tclass.Sequences.__default) Tagclass.Sequences.__default))
(assert (forall ((bx@@93 T@U) ) (!  (=> (and (= (type bx@@93) BoxType) ($IsBox bx@@93 Tclass.Sequences.__default)) (and (= ($Box ($Unbox refType bx@@93)) bx@@93) ($Is ($Unbox refType bx@@93) Tclass.Sequences.__default))) :qid |unknown.0:0| :skolemid |9192| :pattern ( ($IsBox bx@@93 Tclass.Sequences.__default)) )))
(assert (forall (($o@@17 T@U) ) (!  (=> (= (type $o@@17) refType) (and (=> ($Is $o@@17 Tclass.Sequences.__default) (or (= $o@@17 null) (= (dtype $o@@17) Tclass.Sequences.__default))) (=> (or (= $o@@17 null) (= (dtype $o@@17) Tclass.Sequences.__default)) ($Is $o@@17 Tclass.Sequences.__default)))) :qid |unknown.0:0| :skolemid |9193| :pattern ( ($Is $o@@17 Tclass.Sequences.__default)) )))
(assert (forall (($o@@18 T@U) ($h@@40 T@U) ) (!  (=> (and (= (type $o@@18) refType) (= (type $h@@40) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@18 Tclass.Sequences.__default $h@@40) (or (= $o@@18 null) (U_2_bool (MapType1Select (MapType0Select $h@@40 $o@@18) alloc)))) (=> (or (= $o@@18 null) (U_2_bool (MapType1Select (MapType0Select $h@@40 $o@@18) alloc))) ($IsAlloc $o@@18 Tclass.Sequences.__default $h@@40)))) :qid |unknown.0:0| :skolemid |9194| :pattern ( ($IsAlloc $o@@18 Tclass.Sequences.__default $h@@40)) )))
(assert  (=> true (forall ((Sequences._default.Last$E T@U) (|run#0@@39| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E) TyType) (= (type |run#0@@39|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E |run#0@@39|) (and ($Is |run#0@@39| (TSeq Sequences._default.Last$E)) (> (|Seq#Length| |run#0@@39|) 0)))) ($IsBox (Sequences.__default.Last Sequences._default.Last$E |run#0@@39|) Sequences._default.Last$E)) :qid |unknown.0:0| :skolemid |9195| :pattern ( (Sequences.__default.Last Sequences._default.Last$E |run#0@@39|)) ))))
(assert (forall ((Sequences._default.Last$E@@0 T@U) (|run#0@@40| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@0) TyType) (= (type |run#0@@40|) (SeqType BoxType))) ($Is |run#0@@40| (TSeq Sequences._default.Last$E@@0))) (and (=> (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@40|) (> (|Seq#Length| |run#0@@40|) 0)) (=> (> (|Seq#Length| |run#0@@40|) 0) (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@40|)))) :qid |unknown.0:0| :skolemid |9196| :pattern ( (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@40|)) )))
(assert  (=> true (forall ((Sequences._default.Last$E@@1 T@U) (|run#0@@41| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@1) TyType) (= (type |run#0@@41|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@1 |run#0@@41|) (and ($Is |run#0@@41| (TSeq Sequences._default.Last$E@@1)) (> (|Seq#Length| |run#0@@41|) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@41|) (|Seq#Index| |run#0@@41| (- (|Seq#Length| |run#0@@41|) 1)))) :qid |unknown.0:0| :skolemid |9197| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@41|)) ))))
(assert  (=> true (forall ((Sequences._default.Last$E@@2 T@U) (|run#0@@42| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@2) TyType) (= (type |run#0@@42|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@2 (Lit |run#0@@42|)) (and ($Is |run#0@@42| (TSeq Sequences._default.Last$E@@2)) (> (|Seq#Length| (Lit |run#0@@42|)) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@42|)) (|Seq#Index| (Lit |run#0@@42|) (- (|Seq#Length| (Lit |run#0@@42|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |9198| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@42|))) ))))
(assert  (=> true (forall ((Sequences._default.DropLast$E T@U) (|run#0@@43| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E) TyType) (= (type |run#0@@43|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E |run#0@@43|) (and ($Is |run#0@@43| (TSeq Sequences._default.DropLast$E)) (> (|Seq#Length| |run#0@@43|) 0)))) ($Is (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@43|) (TSeq Sequences._default.DropLast$E))) :qid |unknown.0:0| :skolemid |9199| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@43|)) ))))
(assert (forall ((Sequences._default.DropLast$E@@0 T@U) (|run#0@@44| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@0) TyType) (= (type |run#0@@44|) (SeqType BoxType))) ($Is |run#0@@44| (TSeq Sequences._default.DropLast$E@@0))) (and (=> (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@44|) (> (|Seq#Length| |run#0@@44|) 0)) (=> (> (|Seq#Length| |run#0@@44|) 0) (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@44|)))) :qid |unknown.0:0| :skolemid |9200| :pattern ( (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@44|)) )))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@1 T@U) (|run#0@@45| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@1) TyType) (= (type |run#0@@45|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@1 |run#0@@45|) (and ($Is |run#0@@45| (TSeq Sequences._default.DropLast$E@@1)) (> (|Seq#Length| |run#0@@45|) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@45|) (|Seq#Take| |run#0@@45| (- (|Seq#Length| |run#0@@45|) 1)))) :qid |unknown.0:0| :skolemid |9201| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@45|)) ))))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@2 T@U) (|run#0@@46| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@2) TyType) (= (type |run#0@@46|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@2 (Lit |run#0@@46|)) (and ($Is |run#0@@46| (TSeq Sequences._default.DropLast$E@@2)) (> (|Seq#Length| (Lit |run#0@@46|)) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@46|)) (|Seq#Take| (Lit |run#0@@46|) (- (|Seq#Length| (Lit |run#0@@46|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |9202| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@46|))) ))))
(assert (forall ((arg0@@245 T@U) (arg1@@126 T@U) ) (! (= (type (Sequences.__default.Set arg0@@245 arg1@@126)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.Set| :pattern ( (Sequences.__default.Set arg0@@245 arg1@@126)) )))
(assert  (=> true (forall ((Sequences._default.Set$T T@U) (|run#0@@47| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T) TyType) (= (type |run#0@@47|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T |run#0@@47|) ($Is |run#0@@47| (TSeq Sequences._default.Set$T)))) ($Is (Sequences.__default.Set Sequences._default.Set$T |run#0@@47|) (TSet Sequences._default.Set$T))) :qid |unknown.0:0| :skolemid |9203| :pattern ( (Sequences.__default.Set Sequences._default.Set$T |run#0@@47|)) ))))
(assert (forall ((Sequences._default.Set$T@@0 T@U) (|run#0@@48| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@0) TyType) (= (type |run#0@@48|) (SeqType BoxType))) ($Is |run#0@@48| (TSeq Sequences._default.Set$T@@0))) (and (=> (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@48|) true) (=> true (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@48|)))) :qid |unknown.0:0| :skolemid |9204| :pattern ( (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@48|)) )))
(assert (forall ((arg0@@246 T@U) (arg1@@127 T@U) (arg2@@68 Int) ) (! (= (type (|lambda#65| arg0@@246 arg1@@127 arg2@@68)) (MapType0Type BoxType boolType)) :qid |funType:lambda#65| :pattern ( (|lambda#65| arg0@@246 arg1@@127 arg2@@68)) )))
(assert  (=> true (forall ((Sequences._default.Set$T@@1 T@U) (|run#0@@49| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@1) TyType) (= (type |run#0@@49|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@1 |run#0@@49|) ($Is |run#0@@49| (TSeq Sequences._default.Set$T@@1)))) (= (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@49|) (|lambda#65| Sequences._default.Set$T@@1 (|MultiSet#FromSeq| |run#0@@49|) 0))) :qid |unknown.0:0| :skolemid |9205| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@49|)) ))))
(assert  (=> true (forall ((Sequences._default.Set$T@@2 T@U) (|run#0@@50| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@2) TyType) (= (type |run#0@@50|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@2 (Lit |run#0@@50|)) ($Is |run#0@@50| (TSeq Sequences._default.Set$T@@2)))) (= (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@50|)) (|lambda#65| Sequences._default.Set$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@50|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |9206| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@50|))) ))))
(assert (forall ((arg0@@247 T@U) (arg1@@128 T@U) ) (! (= (type (Sequences.__default.ISet arg0@@247 arg1@@128)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.ISet| :pattern ( (Sequences.__default.ISet arg0@@247 arg1@@128)) )))
(assert  (=> true (forall ((Sequences._default.ISet$T T@U) (|run#0@@51| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T) TyType) (= (type |run#0@@51|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T |run#0@@51|) ($Is |run#0@@51| (TSeq Sequences._default.ISet$T)))) ($Is (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@51|) (TISet Sequences._default.ISet$T))) :qid |unknown.0:0| :skolemid |9207| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@51|)) ))))
(assert (forall ((Sequences._default.ISet$T@@0 T@U) (|run#0@@52| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@0) TyType) (= (type |run#0@@52|) (SeqType BoxType))) ($Is |run#0@@52| (TSeq Sequences._default.ISet$T@@0))) (and (=> (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@52|) true) (=> true (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@52|)))) :qid |unknown.0:0| :skolemid |9208| :pattern ( (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@52|)) )))
(assert  (=> true (forall ((Sequences._default.ISet$T@@1 T@U) (|run#0@@53| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@1) TyType) (= (type |run#0@@53|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@1 |run#0@@53|) ($Is |run#0@@53| (TSeq Sequences._default.ISet$T@@1)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@53|) (|lambda#65| Sequences._default.ISet$T@@1 (|MultiSet#FromSeq| |run#0@@53|) 0))) :qid |unknown.0:0| :skolemid |9209| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@53|)) ))))
(assert  (=> true (forall ((Sequences._default.ISet$T@@2 T@U) (|run#0@@54| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@2) TyType) (= (type |run#0@@54|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@2 (Lit |run#0@@54|)) ($Is |run#0@@54| (TSeq Sequences._default.ISet$T@@2)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@54|)) (|lambda#65| Sequences._default.ISet$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@54|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |9210| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@54|))) ))))
(assert (forall ((Sequences._default.NoDupes$T T@U) ($ly@@97 T@U) (|a#0@@37| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T) TyType) (= (type $ly@@97) LayerTypeType)) (= (type |a#0@@37|) (SeqType BoxType))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@97) |a#0@@37|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T $ly@@97 |a#0@@37|)) (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T $ly@@97 |a#0@@37|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@97) |a#0@@37|)))) :qid |unknown.0:0| :skolemid |9211| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@97) |a#0@@37|)) )))
(assert (forall ((Sequences._default.NoDupes$T@@0 T@U) ($ly@@98 T@U) (|a#0@@38| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T@@0) TyType) (= (type $ly@@98) LayerTypeType)) (= (type |a#0@@38|) (SeqType BoxType))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $ly@@98 |a#0@@38|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $LZ |a#0@@38|)) (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $LZ |a#0@@38|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $ly@@98 |a#0@@38|)))) :qid |unknown.0:0| :skolemid |9212| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 (AsFuelBottom $ly@@98) |a#0@@38|)) )))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@1 T@U) ($ly@@99 T@U) (|a#0@@39| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@1) TyType) (= (type $ly@@99) LayerTypeType)) (= (type |a#0@@39|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@1 |a#0@@39|) ($Is |a#0@@39| (TSeq Sequences._default.NoDupes$T@@1)))) true) :qid |unknown.0:0| :skolemid |9213| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@1 $ly@@99 |a#0@@39|)) ))))
(assert (forall ((Sequences._default.NoDupes$T@@2 T@U) ($ly@@100 T@U) (|a#0@@40| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@2) TyType) (= (type $ly@@100) LayerTypeType)) (= (type |a#0@@40|) (SeqType BoxType))) ($Is |a#0@@40| (TSeq Sequences._default.NoDupes$T@@2))) (and (=> (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@100 |a#0@@40|) true) (=> true (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@100 |a#0@@40|)))) :qid |unknown.0:0| :skolemid |9214| :pattern ( (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@100 |a#0@@40|)) )))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@3 T@U) ($ly@@101 T@U) (|a#0@@41| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@3) TyType) (= (type $ly@@101) LayerTypeType)) (= (type |a#0@@41|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@3 |a#0@@41|) ($Is |a#0@@41| (TSeq Sequences._default.NoDupes$T@@3)))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@101) |a#0@@41|) (forall ((|i#10| Int) (|j#10| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#10|) (< |i#10| (|Seq#Length| |a#0@@41|))) (and (<= (LitInt 0) |j#10|) (< |j#10| (|Seq#Length| |a#0@@41|)))) (not (= |i#10| |j#10|))) (not (= (|Seq#Index| |a#0@@41| |i#10|) (|Seq#Index| |a#0@@41| |j#10|))))) :qid |sequence.54:13| :skolemid |9215| :pattern ( (|Seq#Index| |a#0@@41| |j#10|) (|Seq#Index| |a#0@@41| |i#10|)) ))) (=> (forall ((|i#10@@0| Int) (|j#10@@0| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#10@@0|) (< |i#10@@0| (|Seq#Length| |a#0@@41|))) (and (<= (LitInt 0) |j#10@@0|) (< |j#10@@0| (|Seq#Length| |a#0@@41|)))) (not (= |i#10@@0| |j#10@@0|))) (not (= (|Seq#Index| |a#0@@41| |i#10@@0|) (|Seq#Index| |a#0@@41| |j#10@@0|))))) :qid |sequence.54:13| :skolemid |9215| :pattern ( (|Seq#Index| |a#0@@41| |j#10@@0|) (|Seq#Index| |a#0@@41| |i#10@@0|)) )) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@101) |a#0@@41|)))) :qid |unknown.0:0| :skolemid |9216| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@101) |a#0@@41|)) ))))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@4 T@U) ($ly@@102 T@U) (|a#0@@42| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@4) TyType) (= (type $ly@@102) LayerTypeType)) (= (type |a#0@@42|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@4 (Lit |a#0@@42|)) ($Is |a#0@@42| (TSeq Sequences._default.NoDupes$T@@4)))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@102) (Lit |a#0@@42|)) (forall ((|i#11| Int) (|j#11| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#11|) (< |i#11| (|Seq#Length| (Lit |a#0@@42|)))) (and (<= (LitInt 0) |j#11|) (< |j#11| (|Seq#Length| (Lit |a#0@@42|))))) (not (= |i#11| |j#11|))) (not (= (|Seq#Index| (Lit |a#0@@42|) |i#11|) (|Seq#Index| (Lit |a#0@@42|) |j#11|))))) :qid |sequence.54:13| :skolemid |9217| :pattern ( (|Seq#Index| |a#0@@42| |j#11|) (|Seq#Index| |a#0@@42| |i#11|)) ))) (=> (forall ((|i#11@@0| Int) (|j#11@@0| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#11@@0|) (< |i#11@@0| (|Seq#Length| (Lit |a#0@@42|)))) (and (<= (LitInt 0) |j#11@@0|) (< |j#11@@0| (|Seq#Length| (Lit |a#0@@42|))))) (not (= |i#11@@0| |j#11@@0|))) (not (= (|Seq#Index| (Lit |a#0@@42|) |i#11@@0|) (|Seq#Index| (Lit |a#0@@42|) |j#11@@0|))))) :qid |sequence.54:13| :skolemid |9217| :pattern ( (|Seq#Index| |a#0@@42| |j#11@@0|) (|Seq#Index| |a#0@@42| |i#11@@0|)) )) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@102) (Lit |a#0@@42|))))) :qid |unknown.0:0| :weight 3 :skolemid |9218| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@102) (Lit |a#0@@42|))) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T T@U) (|s#0@@55| T@U) (|e#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T) TyType) (= (type |s#0@@55|) (SeqType BoxType))) (= (type |e#0|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T |s#0@@55| |e#0|) (and (and ($Is |s#0@@55| (TSeq Sequences._default.IndexOf$T)) ($IsBox |e#0| Sequences._default.IndexOf$T)) (|Seq#Contains| |s#0@@55| |e#0|)))) (and (and (<= (LitInt 0) (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@55| |e#0|)) (< (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@55| |e#0|) (|Seq#Length| |s#0@@55|))) (= (|Seq#Index| |s#0@@55| (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@55| |e#0|)) |e#0|))) :qid |unknown.0:0| :skolemid |9219| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@55| |e#0|)) ))))
(assert (forall ((Sequences._default.IndexOf$T@@0 T@U) ($Heap@@14 T@U) (|s#0@@56| T@U) (|e#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@0) TyType) (= (type $Heap@@14) (MapType0Type refType MapType1Type))) (= (type |s#0@@56|) (SeqType BoxType))) (= (type |e#0@@0|) BoxType)) (and (and ($IsGoodHeap $Heap@@14) ($Is |s#0@@56| (TSeq Sequences._default.IndexOf$T@@0))) ($IsBox |e#0@@0| Sequences._default.IndexOf$T@@0))) (and (=> (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@56| |e#0@@0|) (|Seq#Contains| |s#0@@56| |e#0@@0|)) (=> (|Seq#Contains| |s#0@@56| |e#0@@0|) (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@56| |e#0@@0|)))) :qid |unknown.0:0| :skolemid |9220| :pattern ( (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@56| |e#0@@0|) ($IsGoodHeap $Heap@@14)) )))
(assert (forall ((Sequences._default.IndexOf$T@@1 T@U) (s@@47 T@U) (e T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T@@1) TyType) (= (type s@@47) (SeqType BoxType))) (= (type e) BoxType)) (|$let#9$canCall| Sequences._default.IndexOf$T@@1 s@@47 e)) (and (and (<= (LitInt 0) (|$let#9_i| Sequences._default.IndexOf$T@@1 s@@47 e)) (< (|$let#9_i| Sequences._default.IndexOf$T@@1 s@@47 e) (|Seq#Length| s@@47))) (= (|Seq#Index| s@@47 (|$let#9_i| Sequences._default.IndexOf$T@@1 s@@47 e)) e))) :qid |sequence.105:5| :skolemid |9221| :pattern ( (|$let#9_i| Sequences._default.IndexOf$T@@1 s@@47 e)) )))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@2 T@U) ($Heap@@15 T@U) (|s#0@@57| T@U) (|e#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@2) TyType) (= (type $Heap@@15) (MapType0Type refType MapType1Type))) (= (type |s#0@@57|) (SeqType BoxType))) (= (type |e#0@@1|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@2 |s#0@@57| |e#0@@1|) (and (and (and ($IsGoodHeap $Heap@@15) ($Is |s#0@@57| (TSeq Sequences._default.IndexOf$T@@2))) ($IsBox |e#0@@1| Sequences._default.IndexOf$T@@2)) (|Seq#Contains| |s#0@@57| |e#0@@1|)))) (and (|$let#9$canCall| Sequences._default.IndexOf$T@@2 |s#0@@57| |e#0@@1|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@57| |e#0@@1|) (let ((|i#15| (|$let#9_i| Sequences._default.IndexOf$T@@2 |s#0@@57| |e#0@@1|))) |i#15|)))) :qid |unknown.0:0| :skolemid |9222| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@57| |e#0@@1|) ($IsGoodHeap $Heap@@15)) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@3 T@U) ($Heap@@16 T@U) (|s#0@@58| T@U) (|e#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@3) TyType) (= (type $Heap@@16) (MapType0Type refType MapType1Type))) (= (type |s#0@@58|) (SeqType BoxType))) (= (type |e#0@@2|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@58|) |e#0@@2|) (and (and (and ($IsGoodHeap $Heap@@16) ($Is |s#0@@58| (TSeq Sequences._default.IndexOf$T@@3))) ($IsBox |e#0@@2| Sequences._default.IndexOf$T@@3)) (|Seq#Contains| |s#0@@58| |e#0@@2|)))) (and (|$let#9$canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@58|) |e#0@@2|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@58|) |e#0@@2|) (let ((|i#16| (|$let#9_i| Sequences._default.IndexOf$T@@3 (Lit |s#0@@58|) |e#0@@2|))) |i#16|)))) :qid |unknown.0:0| :weight 3 :skolemid |9223| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@58|) |e#0@@2|) ($IsGoodHeap $Heap@@16)) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@4 T@U) ($Heap@@17 T@U) (|s#0@@59| T@U) (|e#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@4) TyType) (= (type $Heap@@17) (MapType0Type refType MapType1Type))) (= (type |s#0@@59|) (SeqType BoxType))) (= (type |e#0@@3|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@59|) (Lit |e#0@@3|)) (and (and (and ($IsGoodHeap $Heap@@17) ($Is |s#0@@59| (TSeq Sequences._default.IndexOf$T@@4))) ($IsBox |e#0@@3| Sequences._default.IndexOf$T@@4)) (|Seq#Contains| |s#0@@59| |e#0@@3|)))) (and (|$let#9$canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@59|) (Lit |e#0@@3|)) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@59|) (Lit |e#0@@3|)) (let ((|i#17| (|$let#9_i| Sequences._default.IndexOf$T@@4 (Lit |s#0@@59|) (Lit |e#0@@3|)))) |i#17|)))) :qid |unknown.0:0| :weight 3 :skolemid |9224| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@59|) (Lit |e#0@@3|)) ($IsGoodHeap $Heap@@17)) ))))
(assert (forall ((arg0@@248 T@U) (arg1@@129 Int) ) (! (= (type (Sequences.__default.Range arg0@@248 arg1@@129)) (SeqType BoxType)) :qid |funType:Sequences.__default.Range| :pattern ( (Sequences.__default.Range arg0@@248 arg1@@129)) )))
(assert (forall (($ly@@103 T@U) (|n#0| Int) ) (!  (=> (= (type $ly@@103) LayerTypeType) (= (Sequences.__default.Range ($LS $ly@@103) |n#0|) (Sequences.__default.Range $ly@@103 |n#0|))) :qid |sequence.109:22| :skolemid |9225| :pattern ( (Sequences.__default.Range ($LS $ly@@103) |n#0|)) )))
(assert (forall (($ly@@104 T@U) (|n#0@@0| Int) ) (!  (=> (= (type $ly@@104) LayerTypeType) (= (Sequences.__default.Range $ly@@104 |n#0@@0|) (Sequences.__default.Range $LZ |n#0@@0|))) :qid |sequence.109:22| :skolemid |9226| :pattern ( (Sequences.__default.Range (AsFuelBottom $ly@@104) |n#0@@0|)) )))
(assert  (=> true (forall (($ly@@105 T@U) (|n#0@@1| Int) ) (!  (=> (and (= (type $ly@@105) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@1|) (>= |n#0@@1| (LitInt 0)))) (and (and (= (|Seq#Length| (Sequences.__default.Range $ly@@105 |n#0@@1|)) |n#0@@1|) (forall ((|i#5| Int) ) (!  (=> (and (<= (LitInt 0) |i#5|) (< |i#5| |n#0@@1|)) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@105 |n#0@@1|) |i#5|))) |i#5|)) :qid |sequence.112:20| :skolemid |9227| :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@105 |n#0@@1|) |i#5|))) ))) ($Is (Sequences.__default.Range $ly@@105 |n#0@@1|) (TSeq TInt)))) :qid |sequence.109:22| :skolemid |9228| :pattern ( (Sequences.__default.Range $ly@@105 |n#0@@1|)) ))))
(assert (forall (($ly@@106 T@U) (|n#0@@2| Int) ) (!  (=> (= (type $ly@@106) LayerTypeType) (and (=> (|Sequences.__default.Range#requires| $ly@@106 |n#0@@2|) (>= |n#0@@2| (LitInt 0))) (=> (>= |n#0@@2| (LitInt 0)) (|Sequences.__default.Range#requires| $ly@@106 |n#0@@2|)))) :qid |sequence.109:22| :skolemid |9229| :pattern ( (|Sequences.__default.Range#requires| $ly@@106 |n#0@@2|)) )))
(assert  (=> true (forall (($ly@@107 T@U) (|n#0@@3| Int) ) (!  (=> (and (= (type $ly@@107) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@3|) (>= |n#0@@3| (LitInt 0)))) (and (=> (not (= |n#0@@3| (LitInt 0))) (|Sequences.__default.Range#canCall| (- |n#0@@3| 1))) (= (Sequences.__default.Range ($LS $ly@@107) |n#0@@3|) (ite (= |n#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range $ly@@107 (- |n#0@@3| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (- |n#0@@3| 1))))))))) :qid |sequence.109:22| :skolemid |9230| :pattern ( (Sequences.__default.Range ($LS $ly@@107) |n#0@@3|)) ))))
(assert  (=> true (forall (($ly@@108 T@U) (|n#0@@4| Int) ) (!  (=> (and (= (type $ly@@108) LayerTypeType) (or (|Sequences.__default.Range#canCall| (LitInt |n#0@@4|)) (>= (LitInt |n#0@@4|) (LitInt 0)))) (and (=> (not (= (LitInt |n#0@@4|) (LitInt 0))) (|Sequences.__default.Range#canCall| (LitInt (- |n#0@@4| 1)))) (= (Sequences.__default.Range ($LS $ly@@108) (LitInt |n#0@@4|)) (ite (= (LitInt |n#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range ($LS $ly@@108) (LitInt (- |n#0@@4| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt (- |n#0@@4| 1)))))))))) :qid |sequence.109:22| :weight 3 :skolemid |9231| :pattern ( (Sequences.__default.Range ($LS $ly@@108) (LitInt |n#0@@4|))) ))))
(assert (forall ((arg0@@249 T@U) (arg1@@130 T@U) (arg2@@69 T@U) (arg3@@45 T@U) (arg4@@31 T@U) (arg5@@15 T@U) ) (! (= (type (Sequences.__default.Apply arg0@@249 arg1@@130 arg2@@69 arg3@@45 arg4@@31 arg5@@15)) (SeqType BoxType)) :qid |funType:Sequences.__default.Apply| :pattern ( (Sequences.__default.Apply arg0@@249 arg1@@130 arg2@@69 arg3@@45 arg4@@31 arg5@@15)) )))
(assert (forall ((Sequences._default.Apply$E T@U) (Sequences._default.Apply$R T@U) ($ly@@109 T@U) ($Heap@@18 T@U) (|f#0@@27| T@U) (|run#0@@55| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E) TyType) (= (type Sequences._default.Apply$R) TyType)) (= (type $ly@@109) LayerTypeType)) (= (type $Heap@@18) (MapType0Type refType MapType1Type))) (= (type |f#0@@27|) HandleTypeType)) (= (type |run#0@@55|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@109) $Heap@@18 |f#0@@27| |run#0@@55|) (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R $ly@@109 $Heap@@18 |f#0@@27| |run#0@@55|))) :qid |unknown.0:0| :skolemid |9232| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@109) $Heap@@18 |f#0@@27| |run#0@@55|)) )))
(assert (forall ((Sequences._default.Apply$E@@0 T@U) (Sequences._default.Apply$R@@0 T@U) ($ly@@110 T@U) ($Heap@@19 T@U) (|f#0@@28| T@U) (|run#0@@56| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E@@0) TyType) (= (type Sequences._default.Apply$R@@0) TyType)) (= (type $ly@@110) LayerTypeType)) (= (type $Heap@@19) (MapType0Type refType MapType1Type))) (= (type |f#0@@28|) HandleTypeType)) (= (type |run#0@@56|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $ly@@110 $Heap@@19 |f#0@@28| |run#0@@56|) (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $LZ $Heap@@19 |f#0@@28| |run#0@@56|))) :qid |unknown.0:0| :skolemid |9233| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 (AsFuelBottom $ly@@110) $Heap@@19 |f#0@@28| |run#0@@56|)) )))
(assert (forall ((Sequences._default.Apply$E@@1 T@U) (Sequences._default.Apply$R@@1 T@U) ($ly@@111 T@U) ($h0@@1 T@U) ($h1@@1 T@U) (|f#0@@29| T@U) (|run#0@@57| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@1) TyType) (= (type Sequences._default.Apply$R@@1) TyType)) (= (type $ly@@111) LayerTypeType)) (= (type $h0@@1) (MapType0Type refType MapType1Type))) (= (type $h1@@1) (MapType0Type refType MapType1Type))) (= (type |f#0@@29|) HandleTypeType)) (= (type |run#0@@57|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@1) ($IsGoodHeap $h1@@1)) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@29| |run#0@@57|) (and ($Is |f#0@@29| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1)) ($Is |run#0@@57| (TSeq Sequences._default.Apply$E@@1))))) (and ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1)))) (forall (($o@@19 T@U) ($f@@1 T@U) ) (! (let ((alpha@@8 (FieldTypeInv0 (type $f@@1)))) (=> (and (and (= (type $o@@19) refType) (= (type $f@@1) (FieldType alpha@@8))) (and (not (= $o@@19 null)) (exists ((|i#0@@38| Int) (|o#0| T@U) ) (!  (and (= (type |o#0|) refType) (and (and ($Is |o#0| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@38|) (< |i#0@@38| (|Seq#Length| |run#0@@57|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@29| (|Seq#Index| |run#0@@57| |i#0@@38|)) ($Box |o#0|))))) (= ($Box $o@@19) ($Box |o#0|)))) :qid |sequence.121:15| :skolemid |9234| :pattern ( (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@29| (|Seq#Index| |run#0@@57| |i#0@@38|)) ($Box |o#0|))) )))) (= (MapType1Select (MapType0Select $h0@@1 $o@@19) $f@@1) (MapType1Select (MapType0Select $h1@@1 $o@@19) $f@@1)))) :qid |unknown.0:0| :skolemid |9235| :no-pattern (type $o@@19) :no-pattern (type $f@@1) :no-pattern (U_2_int $o@@19) :no-pattern (U_2_bool $o@@19) :no-pattern (U_2_int $f@@1) :no-pattern (U_2_bool $f@@1) ))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@111 $h0@@1 |f#0@@29| |run#0@@57|) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@111 $h1@@1 |f#0@@29| |run#0@@57|))) :qid |unknown.0:0| :skolemid |9236| :pattern ( ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@111 $h1@@1 |f#0@@29| |run#0@@57|)) )))
(assert  (=> true (forall ((Sequences._default.Apply$E@@2 T@U) (Sequences._default.Apply$R@@2 T@U) ($ly@@112 T@U) ($Heap@@20 T@U) (|f#0@@30| T@U) (|run#0@@58| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@2) TyType) (= (type Sequences._default.Apply$R@@2) TyType)) (= (type $ly@@112) LayerTypeType)) (= (type $Heap@@20) (MapType0Type refType MapType1Type))) (= (type |f#0@@30|) HandleTypeType)) (= (type |run#0@@58|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@20 |f#0@@30| |run#0@@58|) (and (and (and ($IsGoodHeap $Heap@@20) ($Is |f#0@@30| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2))) ($Is |run#0@@58| (TSeq Sequences._default.Apply$E@@2))) (forall ((|i#16@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#16@@0|) (< |i#16@@0| (|Seq#Length| |run#0@@58|))) (Requires1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@20 |f#0@@30| (|Seq#Index| |run#0@@58| |i#16@@0|)))) :qid |sequence.118:21| :skolemid |9237| :pattern ( (|Seq#Index| |run#0@@58| |i#16@@0|)) ))))) (and (and (= (|Seq#Length| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@112 $Heap@@20 |f#0@@30| |run#0@@58|)) (|Seq#Length| |run#0@@58|)) (forall ((|i#17@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#17@@0|) (< |i#17@@0| (|Seq#Length| |run#0@@58|))) (= (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@112 $Heap@@20 |f#0@@30| |run#0@@58|) |i#17@@0|) (Apply1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@20 |f#0@@30| (|Seq#Index| |run#0@@58| |i#17@@0|))))) :qid |sequence.120:20| :skolemid |9238| :pattern ( (|Seq#Index| |run#0@@58| |i#17@@0|)) :pattern ( (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@112 $Heap@@20 |f#0@@30| |run#0@@58|) |i#17@@0|)) ))) ($Is (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@112 $Heap@@20 |f#0@@30| |run#0@@58|) (TSeq Sequences._default.Apply$R@@2)))) :qid |unknown.0:0| :skolemid |9239| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@112 $Heap@@20 |f#0@@30| |run#0@@58|)) ))))
(assert (forall ((Sequences._default.Apply$E@@3 T@U) (Sequences._default.Apply$R@@3 T@U) ($ly@@113 T@U) ($Heap@@21 T@U) (|f#0@@31| T@U) (|run#0@@59| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@3) TyType) (= (type Sequences._default.Apply$R@@3) TyType)) (= (type $ly@@113) LayerTypeType)) (= (type $Heap@@21) (MapType0Type refType MapType1Type))) (= (type |f#0@@31|) HandleTypeType)) (= (type |run#0@@59|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@21) ($Is |f#0@@31| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3))) ($Is |run#0@@59| (TSeq Sequences._default.Apply$E@@3)))) (and (=> (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@113 $Heap@@21 |f#0@@31| |run#0@@59|) (forall ((|i#18| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#18|) (< |i#18| (|Seq#Length| |run#0@@59|))) (Requires1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $Heap@@21 |f#0@@31| (|Seq#Index| |run#0@@59| |i#18|)))) :qid |sequence.118:21| :skolemid |9240| :pattern ( (|Seq#Index| |run#0@@59| |i#18|)) ))) (=> (forall ((|i#18@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#18@@0|) (< |i#18@@0| (|Seq#Length| |run#0@@59|))) (Requires1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $Heap@@21 |f#0@@31| (|Seq#Index| |run#0@@59| |i#18@@0|)))) :qid |sequence.118:21| :skolemid |9240| :pattern ( (|Seq#Index| |run#0@@59| |i#18@@0|)) )) (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@113 $Heap@@21 |f#0@@31| |run#0@@59|)))) :qid |unknown.0:0| :skolemid |9241| :pattern ( (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@113 $Heap@@21 |f#0@@31| |run#0@@59|)) )))
(assert  (=> true (forall ((Sequences._default.Apply$E@@4 T@U) (Sequences._default.Apply$R@@4 T@U) ($ly@@114 T@U) ($Heap@@22 T@U) (|f#0@@32| T@U) (|run#0@@60| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@4) TyType) (= (type Sequences._default.Apply$R@@4) TyType)) (= (type $ly@@114) LayerTypeType)) (= (type $Heap@@22) (MapType0Type refType MapType1Type))) (= (type |f#0@@32|) HandleTypeType)) (= (type |run#0@@60|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@22 |f#0@@32| |run#0@@60|) (and (and (and ($IsGoodHeap $Heap@@22) ($Is |f#0@@32| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4))) ($Is |run#0@@60| (TSeq Sequences._default.Apply$E@@4))) (forall ((|i#18@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#18@@1|) (< |i#18@@1| (|Seq#Length| |run#0@@60|))) (Requires1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@22 |f#0@@32| (|Seq#Index| |run#0@@60| |i#18@@1|)))) :qid |sequence.118:21| :skolemid |9240| :pattern ( (|Seq#Index| |run#0@@60| |i#18@@1|)) ))))) (and (=> (not (= (|Seq#Length| |run#0@@60|) (LitInt 0))) (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@22 |f#0@@32| (|Seq#Drop| |run#0@@60| (LitInt 1)))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@114) $Heap@@22 |f#0@@32| |run#0@@60|) (ite (= (|Seq#Length| |run#0@@60|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Apply1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@22 |f#0@@32| (|Seq#Index| |run#0@@60| (LitInt 0)))) (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $ly@@114 $Heap@@22 |f#0@@32| (|Seq#Drop| |run#0@@60| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |9242| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@114) $Heap@@22 |f#0@@32| |run#0@@60|)) ))))
(assert (forall ((arg0@@250 T@U) (arg1@@131 T@U) (arg2@@70 T@U) (arg3@@46 T@U) (arg4@@32 T@U) (arg5@@16 T@U) ) (! (= (type (Sequences.__default.ApplyOpaque arg0@@250 arg1@@131 arg2@@70 arg3@@46 arg4@@32 arg5@@16)) (SeqType BoxType)) :qid |funType:Sequences.__default.ApplyOpaque| :pattern ( (Sequences.__default.ApplyOpaque arg0@@250 arg1@@131 arg2@@70 arg3@@46 arg4@@32 arg5@@16)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E T@U) (Sequences._default.ApplyOpaque$R T@U) ($ly@@115 T@U) ($Heap@@23 T@U) (|f#0@@33| T@U) (|run#0@@61| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E) TyType) (= (type Sequences._default.ApplyOpaque$R) TyType)) (= (type $ly@@115) LayerTypeType)) (= (type $Heap@@23) (MapType0Type refType MapType1Type))) (= (type |f#0@@33|) HandleTypeType)) (= (type |run#0@@61|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@115) $Heap@@23 |f#0@@33| |run#0@@61|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R $ly@@115 $Heap@@23 |f#0@@33| |run#0@@61|))) :qid |unknown.0:0| :skolemid |9243| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@115) $Heap@@23 |f#0@@33| |run#0@@61|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@0 T@U) (Sequences._default.ApplyOpaque$R@@0 T@U) ($ly@@116 T@U) ($Heap@@24 T@U) (|f#0@@34| T@U) (|run#0@@62| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@0) TyType) (= (type Sequences._default.ApplyOpaque$R@@0) TyType)) (= (type $ly@@116) LayerTypeType)) (= (type $Heap@@24) (MapType0Type refType MapType1Type))) (= (type |f#0@@34|) HandleTypeType)) (= (type |run#0@@62|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $ly@@116 $Heap@@24 |f#0@@34| |run#0@@62|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $LZ $Heap@@24 |f#0@@34| |run#0@@62|))) :qid |unknown.0:0| :skolemid |9244| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 (AsFuelBottom $ly@@116) $Heap@@24 |f#0@@34| |run#0@@62|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@1 T@U) (Sequences._default.ApplyOpaque$R@@1 T@U) ($ly@@117 T@U) ($h0@@2 T@U) ($h1@@2 T@U) (|f#0@@35| T@U) (|run#0@@63| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@1) TyType) (= (type Sequences._default.ApplyOpaque$R@@1) TyType)) (= (type $ly@@117) LayerTypeType)) (= (type $h0@@2) (MapType0Type refType MapType1Type))) (= (type $h1@@2) (MapType0Type refType MapType1Type))) (= (type |f#0@@35|) HandleTypeType)) (= (type |run#0@@63|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@2) ($IsGoodHeap $h1@@2)) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@35| |run#0@@63|) (and ($Is |f#0@@35| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1)) ($Is |run#0@@63| (TSeq Sequences._default.ApplyOpaque$E@@1))))) (and ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2)))) (forall (($o@@20 T@U) ($f@@2 T@U) ) (! (let ((alpha@@9 (FieldTypeInv0 (type $f@@2)))) (=> (and (and (= (type $o@@20) refType) (= (type $f@@2) (FieldType alpha@@9))) (and (not (= $o@@20 null)) (exists ((|i#0@@39| Int) (|o#0@@0| T@U) ) (!  (and (= (type |o#0@@0|) refType) (and (and ($Is |o#0@@0| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@39|) (< |i#0@@39| (|Seq#Length| |run#0@@63|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@35| (|Seq#Index| |run#0@@63| |i#0@@39|)) ($Box |o#0@@0|))))) (= ($Box $o@@20) ($Box |o#0@@0|)))) :qid |sequence.132:15| :skolemid |9245| :pattern ( (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@35| (|Seq#Index| |run#0@@63| |i#0@@39|)) ($Box |o#0@@0|))) )))) (= (MapType1Select (MapType0Select $h0@@2 $o@@20) $f@@2) (MapType1Select (MapType0Select $h1@@2 $o@@20) $f@@2)))) :qid |unknown.0:0| :skolemid |9246| :no-pattern (type $o@@20) :no-pattern (type $f@@2) :no-pattern (U_2_int $o@@20) :no-pattern (U_2_bool $o@@20) :no-pattern (U_2_int $f@@2) :no-pattern (U_2_bool $f@@2) ))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@117 $h0@@2 |f#0@@35| |run#0@@63|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@117 $h1@@2 |f#0@@35| |run#0@@63|))) :qid |unknown.0:0| :skolemid |9247| :pattern ( ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@117 $h1@@2 |f#0@@35| |run#0@@63|)) )))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@2 T@U) (Sequences._default.ApplyOpaque$R@@2 T@U) ($ly@@118 T@U) ($Heap@@25 T@U) (|f#0@@36| T@U) (|run#0@@64| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@2) TyType) (= (type Sequences._default.ApplyOpaque$R@@2) TyType)) (= (type $ly@@118) LayerTypeType)) (= (type $Heap@@25) (MapType0Type refType MapType1Type))) (= (type |f#0@@36|) HandleTypeType)) (= (type |run#0@@64|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@25 |f#0@@36| |run#0@@64|) (and (and (and ($IsGoodHeap $Heap@@25) ($Is |f#0@@36| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2))) ($Is |run#0@@64| (TSeq Sequences._default.ApplyOpaque$E@@2))) (forall ((|i#16@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#16@@1|) (< |i#16@@1| (|Seq#Length| |run#0@@64|))) (Requires1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@25 |f#0@@36| (|Seq#Index| |run#0@@64| |i#16@@1|)))) :qid |sequence.129:21| :skolemid |9248| :pattern ( (|Seq#Index| |run#0@@64| |i#16@@1|)) ))))) (and (and (= (|Seq#Length| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@118 $Heap@@25 |f#0@@36| |run#0@@64|)) (|Seq#Length| |run#0@@64|)) (forall ((|i#17@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#17@@1|) (< |i#17@@1| (|Seq#Length| |run#0@@64|))) (= (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@118 $Heap@@25 |f#0@@36| |run#0@@64|) |i#17@@1|) (Apply1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@25 |f#0@@36| (|Seq#Index| |run#0@@64| |i#17@@1|))))) :qid |sequence.131:20| :skolemid |9249| :pattern ( (|Seq#Index| |run#0@@64| |i#17@@1|)) :pattern ( (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@118 $Heap@@25 |f#0@@36| |run#0@@64|) |i#17@@1|)) ))) ($Is (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@118 $Heap@@25 |f#0@@36| |run#0@@64|) (TSeq Sequences._default.ApplyOpaque$R@@2)))) :qid |unknown.0:0| :skolemid |9250| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@118 $Heap@@25 |f#0@@36| |run#0@@64|)) ))))
(assert (forall ((Sequences._default.ApplyOpaque$E@@3 T@U) (Sequences._default.ApplyOpaque$R@@3 T@U) ($ly@@119 T@U) ($Heap@@26 T@U) (|f#0@@37| T@U) (|run#0@@65| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@3) TyType) (= (type Sequences._default.ApplyOpaque$R@@3) TyType)) (= (type $ly@@119) LayerTypeType)) (= (type $Heap@@26) (MapType0Type refType MapType1Type))) (= (type |f#0@@37|) HandleTypeType)) (= (type |run#0@@65|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@26) ($Is |f#0@@37| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3))) ($Is |run#0@@65| (TSeq Sequences._default.ApplyOpaque$E@@3)))) (and (=> (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@119 $Heap@@26 |f#0@@37| |run#0@@65|) (forall ((|i#18@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#18@@2|) (< |i#18@@2| (|Seq#Length| |run#0@@65|))) (Requires1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $Heap@@26 |f#0@@37| (|Seq#Index| |run#0@@65| |i#18@@2|)))) :qid |sequence.129:21| :skolemid |9251| :pattern ( (|Seq#Index| |run#0@@65| |i#18@@2|)) ))) (=> (forall ((|i#18@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#18@@3|) (< |i#18@@3| (|Seq#Length| |run#0@@65|))) (Requires1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $Heap@@26 |f#0@@37| (|Seq#Index| |run#0@@65| |i#18@@3|)))) :qid |sequence.129:21| :skolemid |9251| :pattern ( (|Seq#Index| |run#0@@65| |i#18@@3|)) )) (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@119 $Heap@@26 |f#0@@37| |run#0@@65|)))) :qid |unknown.0:0| :skolemid |9252| :pattern ( (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@119 $Heap@@26 |f#0@@37| |run#0@@65|)) )))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@4 T@U) (Sequences._default.ApplyOpaque$R@@4 T@U) ($ly@@120 T@U) ($Heap@@27 T@U) (|f#0@@38| T@U) (|run#0@@66| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@4) TyType) (= (type Sequences._default.ApplyOpaque$R@@4) TyType)) (= (type $ly@@120) LayerTypeType)) (= (type $Heap@@27) (MapType0Type refType MapType1Type))) (= (type |f#0@@38|) HandleTypeType)) (= (type |run#0@@66|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@27 |f#0@@38| |run#0@@66|) (and (and (and ($IsGoodHeap $Heap@@27) ($Is |f#0@@38| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4))) ($Is |run#0@@66| (TSeq Sequences._default.ApplyOpaque$E@@4))) (forall ((|i#18@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#18@@4|) (< |i#18@@4| (|Seq#Length| |run#0@@66|))) (Requires1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@27 |f#0@@38| (|Seq#Index| |run#0@@66| |i#18@@4|)))) :qid |sequence.129:21| :skolemid |9251| :pattern ( (|Seq#Index| |run#0@@66| |i#18@@4|)) ))))) (and (|Sequences.__default.Apply#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@27 |f#0@@38| |run#0@@66|) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@120) $Heap@@27 |f#0@@38| |run#0@@66|) (Sequences.__default.Apply Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $LZ) $Heap@@27 |f#0@@38| |run#0@@66|)))) :qid |unknown.0:0| :skolemid |9253| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@120) $Heap@@27 |f#0@@38| |run#0@@66|)) ))))
(assert (forall ((arg0@@251 T@U) (arg1@@132 T@U) (arg2@@71 T@U) (arg3@@47 T@U) (arg4@@33 T@U) ) (! (= (type (Sequences.__default.Filter arg0@@251 arg1@@132 arg2@@71 arg3@@47 arg4@@33)) (SeqType BoxType)) :qid |funType:Sequences.__default.Filter| :pattern ( (Sequences.__default.Filter arg0@@251 arg1@@132 arg2@@71 arg3@@47 arg4@@33)) )))
(assert (forall ((Sequences._default.Filter$E T@U) ($ly@@121 T@U) ($Heap@@28 T@U) (|f#0@@39| T@U) (|run#0@@67| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E) TyType) (= (type $ly@@121) LayerTypeType)) (= (type $Heap@@28) (MapType0Type refType MapType1Type))) (= (type |f#0@@39|) HandleTypeType)) (= (type |run#0@@67|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@121) $Heap@@28 |f#0@@39| |run#0@@67|) (Sequences.__default.Filter Sequences._default.Filter$E $ly@@121 $Heap@@28 |f#0@@39| |run#0@@67|))) :qid |unknown.0:0| :skolemid |9254| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@121) $Heap@@28 |f#0@@39| |run#0@@67|)) )))
(assert (forall ((Sequences._default.Filter$E@@0 T@U) ($ly@@122 T@U) ($Heap@@29 T@U) (|f#0@@40| T@U) (|run#0@@68| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E@@0) TyType) (= (type $ly@@122) LayerTypeType)) (= (type $Heap@@29) (MapType0Type refType MapType1Type))) (= (type |f#0@@40|) HandleTypeType)) (= (type |run#0@@68|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@0 $ly@@122 $Heap@@29 |f#0@@40| |run#0@@68|) (Sequences.__default.Filter Sequences._default.Filter$E@@0 $LZ $Heap@@29 |f#0@@40| |run#0@@68|))) :qid |unknown.0:0| :skolemid |9255| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@0 (AsFuelBottom $ly@@122) $Heap@@29 |f#0@@40| |run#0@@68|)) )))
(assert (forall ((Sequences._default.Filter$E@@1 T@U) ($ly@@123 T@U) ($h0@@3 T@U) ($h1@@3 T@U) (|f#0@@41| T@U) (|run#0@@69| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.Filter$E@@1) TyType) (= (type $ly@@123) LayerTypeType)) (= (type $h0@@3) (MapType0Type refType MapType1Type))) (= (type $h1@@3) (MapType0Type refType MapType1Type))) (= (type |f#0@@41|) HandleTypeType)) (= (type |run#0@@69|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@3) ($IsGoodHeap $h1@@3)) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@1 $h0@@3 |f#0@@41| |run#0@@69|) (and ($Is |f#0@@41| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@1 TBool)) ($Is |run#0@@69| (TSeq Sequences._default.Filter$E@@1))))) (and ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3)))) (forall (($o@@21 T@U) ($f@@3 T@U) ) (! (let ((alpha@@10 (FieldTypeInv0 (type $f@@3)))) (=> (and (and (= (type $o@@21) refType) (= (type $f@@3) (FieldType alpha@@10))) (and (not (= $o@@21 null)) (exists ((|_x5#0| T@U) (|_o5#0| T@U) ) (!  (and (and (= (type |_x5#0|) BoxType) (= (type |_o5#0|) refType)) (and (and (and ($IsBox |_x5#0| Sequences._default.Filter$E@@1) ($Is |_o5#0| Tclass._System.object?)) (U_2_bool (MapType0Select (Reads1 Sequences._default.Filter$E@@1 TBool $h0@@3 |f#0@@41| |_x5#0|) ($Box |_o5#0|)))) (= ($Box $o@@21) ($Box |_o5#0|)))) :qid |sequence.141:13| :skolemid |9256| :no-pattern (type |_x5#0|) :no-pattern (type |_o5#0|) :no-pattern (U_2_int |_x5#0|) :no-pattern (U_2_bool |_x5#0|) :no-pattern (U_2_int |_o5#0|) :no-pattern (U_2_bool |_o5#0|) )))) (= (MapType1Select (MapType0Select $h0@@3 $o@@21) $f@@3) (MapType1Select (MapType0Select $h1@@3 $o@@21) $f@@3)))) :qid |unknown.0:0| :skolemid |9257| :no-pattern (type $o@@21) :no-pattern (type $f@@3) :no-pattern (U_2_int $o@@21) :no-pattern (U_2_bool $o@@21) :no-pattern (U_2_int $f@@3) :no-pattern (U_2_bool $f@@3) ))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@123 $h0@@3 |f#0@@41| |run#0@@69|) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@123 $h1@@3 |f#0@@41| |run#0@@69|))) :qid |unknown.0:0| :skolemid |9258| :pattern ( ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@123 $h1@@3 |f#0@@41| |run#0@@69|)) )))
(assert  (=> true (forall ((Sequences._default.Filter$E@@2 T@U) ($ly@@124 T@U) ($Heap@@30 T@U) (|f#0@@42| T@U) (|run#0@@70| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@2) TyType) (= (type $ly@@124) LayerTypeType)) (= (type $Heap@@30) (MapType0Type refType MapType1Type))) (= (type |f#0@@42|) HandleTypeType)) (= (type |run#0@@70|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@2 $Heap@@30 |f#0@@42| |run#0@@70|) (and (and (and ($IsGoodHeap $Heap@@30) ($Is |f#0@@42| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@2 TBool))) ($Is |run#0@@70| (TSeq Sequences._default.Filter$E@@2))) (forall ((|i#15@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#15@@0|) (< |i#15@@0| (|Seq#Length| |run#0@@70|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@30 |f#0@@42| (|Seq#Index| |run#0@@70| |i#15@@0|)))) :qid |sequence.138:21| :skolemid |9259| :pattern ( (|Seq#Index| |run#0@@70| |i#15@@0|)) ))))) (and (and (<= (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@124 $Heap@@30 |f#0@@42| |run#0@@70|)) (|Seq#Length| |run#0@@70|)) (forall ((|i#16@@2| Int) ) (!  (=> (<= (LitInt 0) |i#16@@2|) (=> (and (< |i#16@@2| (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@124 $Heap@@30 |f#0@@42| |run#0@@70|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@30 |f#0@@42| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@124 $Heap@@30 |f#0@@42| |run#0@@70|) |i#16@@2|))) (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@2 TBool $Heap@@30 |f#0@@42| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@124 $Heap@@30 |f#0@@42| |run#0@@70|) |i#16@@2|)))))) :qid |sequence.140:20| :skolemid |9260| :pattern ( (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@124 $Heap@@30 |f#0@@42| |run#0@@70|) |i#16@@2|)) ))) ($Is (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@124 $Heap@@30 |f#0@@42| |run#0@@70|) (TSeq Sequences._default.Filter$E@@2)))) :qid |unknown.0:0| :skolemid |9261| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@124 $Heap@@30 |f#0@@42| |run#0@@70|)) ))))
(assert (forall ((Sequences._default.Filter$E@@3 T@U) ($ly@@125 T@U) ($Heap@@31 T@U) (|f#0@@43| T@U) (|run#0@@71| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@3) TyType) (= (type $ly@@125) LayerTypeType)) (= (type $Heap@@31) (MapType0Type refType MapType1Type))) (= (type |f#0@@43|) HandleTypeType)) (= (type |run#0@@71|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@31) ($Is |f#0@@43| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@3 TBool))) ($Is |run#0@@71| (TSeq Sequences._default.Filter$E@@3)))) (and (=> (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@125 $Heap@@31 |f#0@@43| |run#0@@71|) (forall ((|i#17@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#17@@2|) (< |i#17@@2| (|Seq#Length| |run#0@@71|))) (Requires1 Sequences._default.Filter$E@@3 TBool $Heap@@31 |f#0@@43| (|Seq#Index| |run#0@@71| |i#17@@2|)))) :qid |sequence.138:21| :skolemid |9262| :pattern ( (|Seq#Index| |run#0@@71| |i#17@@2|)) ))) (=> (forall ((|i#17@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#17@@3|) (< |i#17@@3| (|Seq#Length| |run#0@@71|))) (Requires1 Sequences._default.Filter$E@@3 TBool $Heap@@31 |f#0@@43| (|Seq#Index| |run#0@@71| |i#17@@3|)))) :qid |sequence.138:21| :skolemid |9262| :pattern ( (|Seq#Index| |run#0@@71| |i#17@@3|)) )) (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@125 $Heap@@31 |f#0@@43| |run#0@@71|)))) :qid |unknown.0:0| :skolemid |9263| :pattern ( (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@125 $Heap@@31 |f#0@@43| |run#0@@71|)) )))
(assert  (=> true (forall ((Sequences._default.Filter$E@@4 T@U) ($ly@@126 T@U) ($Heap@@32 T@U) (|f#0@@44| T@U) (|run#0@@72| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@4) TyType) (= (type $ly@@126) LayerTypeType)) (= (type $Heap@@32) (MapType0Type refType MapType1Type))) (= (type |f#0@@44|) HandleTypeType)) (= (type |run#0@@72|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@32 |f#0@@44| |run#0@@72|) (and (and (and ($IsGoodHeap $Heap@@32) ($Is |f#0@@44| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@4 TBool))) ($Is |run#0@@72| (TSeq Sequences._default.Filter$E@@4))) (forall ((|i#17@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#17@@4|) (< |i#17@@4| (|Seq#Length| |run#0@@72|))) (Requires1 Sequences._default.Filter$E@@4 TBool $Heap@@32 |f#0@@44| (|Seq#Index| |run#0@@72| |i#17@@4|)))) :qid |sequence.138:21| :skolemid |9262| :pattern ( (|Seq#Index| |run#0@@72| |i#17@@4|)) ))))) (and (=> (not (= (|Seq#Length| |run#0@@72|) (LitInt 0))) (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@32 |f#0@@44| (|Seq#Drop| |run#0@@72| (LitInt 1)))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@126) $Heap@@32 |f#0@@44| |run#0@@72|) (ite (= (|Seq#Length| |run#0@@72|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ite (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@4 TBool $Heap@@32 |f#0@@44| (|Seq#Index| |run#0@@72| (LitInt 0))))) (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |run#0@@72| (LitInt 0))) (|Seq#Empty| BoxType)) (Sequences.__default.Filter Sequences._default.Filter$E@@4 $ly@@126 $Heap@@32 |f#0@@44| (|Seq#Drop| |run#0@@72| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |9264| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@126) $Heap@@32 |f#0@@44| |run#0@@72|)) ))))
(assert (forall ((arg0@@252 T@U) (arg1@@133 T@U) (arg2@@72 T@U) (arg3@@48 T@U) (arg4@@34 T@U) (arg5@@17 T@U) ) (! (= (type (Sequences.__default.FoldLeft arg0@@252 arg1@@133 arg2@@72 arg3@@48 arg4@@34 arg5@@17)) BoxType) :qid |funType:Sequences.__default.FoldLeft| :pattern ( (Sequences.__default.FoldLeft arg0@@252 arg1@@133 arg2@@72 arg3@@48 arg4@@34 arg5@@17)) )))
(assert (forall ((Sequences._default.FoldLeft$A T@U) (Sequences._default.FoldLeft$E T@U) ($ly@@127 T@U) (|f#0@@45| T@U) (|init#0| T@U) (|run#0@@73| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A) TyType) (= (type Sequences._default.FoldLeft$E) TyType)) (= (type $ly@@127) LayerTypeType)) (= (type |f#0@@45|) HandleTypeType)) (= (type |init#0|) BoxType)) (= (type |run#0@@73|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@127) |f#0@@45| |init#0| |run#0@@73|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E $ly@@127 |f#0@@45| |init#0| |run#0@@73|))) :qid |unknown.0:0| :skolemid |9265| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@127) |f#0@@45| |init#0| |run#0@@73|)) )))
(assert (forall ((Sequences._default.FoldLeft$A@@0 T@U) (Sequences._default.FoldLeft$E@@0 T@U) ($ly@@128 T@U) (|f#0@@46| T@U) (|init#0@@0| T@U) (|run#0@@74| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@0) TyType) (= (type Sequences._default.FoldLeft$E@@0) TyType)) (= (type $ly@@128) LayerTypeType)) (= (type |f#0@@46|) HandleTypeType)) (= (type |init#0@@0|) BoxType)) (= (type |run#0@@74|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $ly@@128 |f#0@@46| |init#0@@0| |run#0@@74|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $LZ |f#0@@46| |init#0@@0| |run#0@@74|))) :qid |unknown.0:0| :skolemid |9266| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 (AsFuelBottom $ly@@128) |f#0@@46| |init#0@@0| |run#0@@74|)) )))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@1 T@U) (Sequences._default.FoldLeft$E@@1 T@U) ($ly@@129 T@U) (|f#0@@47| T@U) (|init#0@@1| T@U) (|run#0@@75| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@1) TyType) (= (type Sequences._default.FoldLeft$E@@1) TyType)) (= (type $ly@@129) LayerTypeType)) (= (type |f#0@@47|) HandleTypeType)) (= (type |init#0@@1|) BoxType)) (= (type |run#0@@75|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 |f#0@@47| |init#0@@1| |run#0@@75|) (and (and ($Is |f#0@@47| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 Sequences._default.FoldLeft$A@@1)) ($IsBox |init#0@@1| Sequences._default.FoldLeft$A@@1)) ($Is |run#0@@75| (TSeq Sequences._default.FoldLeft$E@@1))))) ($IsBox (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@129 |f#0@@47| |init#0@@1| |run#0@@75|) Sequences._default.FoldLeft$A@@1)) :qid |unknown.0:0| :skolemid |9267| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@129 |f#0@@47| |init#0@@1| |run#0@@75|)) ))))
(assert (forall ((Sequences._default.FoldLeft$A@@2 T@U) (Sequences._default.FoldLeft$E@@2 T@U) ($ly@@130 T@U) ($Heap@@33 T@U) (|f#0@@48| T@U) (|init#0@@2| T@U) (|run#0@@76| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@2) TyType) (= (type Sequences._default.FoldLeft$E@@2) TyType)) (= (type $ly@@130) LayerTypeType)) (= (type $Heap@@33) (MapType0Type refType MapType1Type))) (= (type |f#0@@48|) HandleTypeType)) (= (type |init#0@@2|) BoxType)) (= (type |run#0@@76|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@33) ($Is |f#0@@48| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 Sequences._default.FoldLeft$A@@2))) ($IsBox |init#0@@2| Sequences._default.FoldLeft$A@@2)) ($Is |run#0@@76| (TSeq Sequences._default.FoldLeft$E@@2)))) (and (=> (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@130 |f#0@@48| |init#0@@2| |run#0@@76|) true) (=> true (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@130 |f#0@@48| |init#0@@2| |run#0@@76|)))) :qid |unknown.0:0| :skolemid |9268| :pattern ( (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@130 |f#0@@48| |init#0@@2| |run#0@@76|) ($IsGoodHeap $Heap@@33)) )))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@3 T@U) (Sequences._default.FoldLeft$E@@3 T@U) ($ly@@131 T@U) ($Heap@@34 T@U) (|f#0@@49| T@U) (|init#0@@3| T@U) (|run#0@@77| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@3) TyType) (= (type Sequences._default.FoldLeft$E@@3) TyType)) (= (type $ly@@131) LayerTypeType)) (= (type $Heap@@34) (MapType0Type refType MapType1Type))) (= (type |f#0@@49|) HandleTypeType)) (= (type |init#0@@3|) BoxType)) (= (type |run#0@@77|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@49| |init#0@@3| |run#0@@77|) (and (and (and ($IsGoodHeap $Heap@@34) ($Is |f#0@@49| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3))) ($IsBox |init#0@@3| Sequences._default.FoldLeft$A@@3)) ($Is |run#0@@77| (TSeq Sequences._default.FoldLeft$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@77|) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@49| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@34 |f#0@@49| |init#0@@3| (|Seq#Index| |run#0@@77| (LitInt 0))) (|Seq#Drop| |run#0@@77| (LitInt 1)))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@131) |f#0@@49| |init#0@@3| |run#0@@77|) (ite (= (|Seq#Length| |run#0@@77|) (LitInt 0)) |init#0@@3| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 $ly@@131 |f#0@@49| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@34 |f#0@@49| |init#0@@3| (|Seq#Index| |run#0@@77| (LitInt 0))) (|Seq#Drop| |run#0@@77| (LitInt 1))))))) :qid |unknown.0:0| :skolemid |9269| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@131) |f#0@@49| |init#0@@3| |run#0@@77|) ($IsGoodHeap $Heap@@34)) ))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@4 T@U) (Sequences._default.FoldLeft$E@@4 T@U) ($ly@@132 T@U) ($Heap@@35 T@U) (|f#0@@50| T@U) (|init#0@@4| T@U) (|run#0@@78| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@4) TyType) (= (type Sequences._default.FoldLeft$E@@4) TyType)) (= (type $ly@@132) LayerTypeType)) (= (type $Heap@@35) (MapType0Type refType MapType1Type))) (= (type |f#0@@50|) HandleTypeType)) (= (type |init#0@@4|) BoxType)) (= (type |run#0@@78|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@50| |init#0@@4| (Lit |run#0@@78|)) (and (and (and ($IsGoodHeap $Heap@@35) ($Is |f#0@@50| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4))) ($IsBox |init#0@@4| Sequences._default.FoldLeft$A@@4)) ($Is |run#0@@78| (TSeq Sequences._default.FoldLeft$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@78|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@50| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@35 |f#0@@50| |init#0@@4| (|Seq#Index| (Lit |run#0@@78|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@78|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@132) |f#0@@50| |init#0@@4| (Lit |run#0@@78|)) (ite (= (|Seq#Length| (Lit |run#0@@78|)) (LitInt 0)) |init#0@@4| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@132) |f#0@@50| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@35 |f#0@@50| |init#0@@4| (|Seq#Index| (Lit |run#0@@78|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@78|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |9270| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@132) |f#0@@50| |init#0@@4| (Lit |run#0@@78|)) ($IsGoodHeap $Heap@@35)) ))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@5 T@U) (Sequences._default.FoldLeft$E@@5 T@U) ($ly@@133 T@U) ($Heap@@36 T@U) (|f#0@@51| T@U) (|init#0@@5| T@U) (|run#0@@79| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@5) TyType) (= (type Sequences._default.FoldLeft$E@@5) TyType)) (= (type $ly@@133) LayerTypeType)) (= (type $Heap@@36) (MapType0Type refType MapType1Type))) (= (type |f#0@@51|) HandleTypeType)) (= (type |init#0@@5|) BoxType)) (= (type |run#0@@79|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@51|) (Lit |init#0@@5|) (Lit |run#0@@79|)) (and (and (and ($IsGoodHeap $Heap@@36) ($Is |f#0@@51| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5))) ($IsBox |init#0@@5| Sequences._default.FoldLeft$A@@5)) ($Is |run#0@@79| (TSeq Sequences._default.FoldLeft$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@79|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@51|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@36 (Lit |f#0@@51|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@79|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@79|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@133) (Lit |f#0@@51|) (Lit |init#0@@5|) (Lit |run#0@@79|)) (ite (= (|Seq#Length| (Lit |run#0@@79|)) (LitInt 0)) |init#0@@5| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@133) (Lit |f#0@@51|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@36 (Lit |f#0@@51|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@79|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@79|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |9271| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@133) (Lit |f#0@@51|) (Lit |init#0@@5|) (Lit |run#0@@79|)) ($IsGoodHeap $Heap@@36)) ))))
(assert (forall ((arg0@@253 T@U) (arg1@@134 T@U) (arg2@@73 T@U) (arg3@@49 T@U) (arg4@@35 T@U) (arg5@@18 T@U) ) (! (= (type (Sequences.__default.FoldRight arg0@@253 arg1@@134 arg2@@73 arg3@@49 arg4@@35 arg5@@18)) BoxType) :qid |funType:Sequences.__default.FoldRight| :pattern ( (Sequences.__default.FoldRight arg0@@253 arg1@@134 arg2@@73 arg3@@49 arg4@@35 arg5@@18)) )))
(assert (forall ((Sequences._default.FoldRight$A T@U) (Sequences._default.FoldRight$E T@U) ($ly@@134 T@U) (|f#0@@52| T@U) (|init#0@@6| T@U) (|run#0@@80| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A) TyType) (= (type Sequences._default.FoldRight$E) TyType)) (= (type $ly@@134) LayerTypeType)) (= (type |f#0@@52|) HandleTypeType)) (= (type |init#0@@6|) BoxType)) (= (type |run#0@@80|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@134) |f#0@@52| |init#0@@6| |run#0@@80|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E $ly@@134 |f#0@@52| |init#0@@6| |run#0@@80|))) :qid |unknown.0:0| :skolemid |9272| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@134) |f#0@@52| |init#0@@6| |run#0@@80|)) )))
(assert (forall ((Sequences._default.FoldRight$A@@0 T@U) (Sequences._default.FoldRight$E@@0 T@U) ($ly@@135 T@U) (|f#0@@53| T@U) (|init#0@@7| T@U) (|run#0@@81| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@0) TyType) (= (type Sequences._default.FoldRight$E@@0) TyType)) (= (type $ly@@135) LayerTypeType)) (= (type |f#0@@53|) HandleTypeType)) (= (type |init#0@@7|) BoxType)) (= (type |run#0@@81|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $ly@@135 |f#0@@53| |init#0@@7| |run#0@@81|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $LZ |f#0@@53| |init#0@@7| |run#0@@81|))) :qid |unknown.0:0| :skolemid |9273| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 (AsFuelBottom $ly@@135) |f#0@@53| |init#0@@7| |run#0@@81|)) )))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@1 T@U) (Sequences._default.FoldRight$E@@1 T@U) ($ly@@136 T@U) (|f#0@@54| T@U) (|init#0@@8| T@U) (|run#0@@82| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@1) TyType) (= (type Sequences._default.FoldRight$E@@1) TyType)) (= (type $ly@@136) LayerTypeType)) (= (type |f#0@@54|) HandleTypeType)) (= (type |init#0@@8|) BoxType)) (= (type |run#0@@82|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 |f#0@@54| |init#0@@8| |run#0@@82|) (and (and ($Is |f#0@@54| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 Sequences._default.FoldRight$A@@1)) ($IsBox |init#0@@8| Sequences._default.FoldRight$A@@1)) ($Is |run#0@@82| (TSeq Sequences._default.FoldRight$E@@1))))) ($IsBox (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@136 |f#0@@54| |init#0@@8| |run#0@@82|) Sequences._default.FoldRight$A@@1)) :qid |unknown.0:0| :skolemid |9274| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@136 |f#0@@54| |init#0@@8| |run#0@@82|)) ))))
(assert (forall ((Sequences._default.FoldRight$A@@2 T@U) (Sequences._default.FoldRight$E@@2 T@U) ($ly@@137 T@U) ($Heap@@37 T@U) (|f#0@@55| T@U) (|init#0@@9| T@U) (|run#0@@83| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@2) TyType) (= (type Sequences._default.FoldRight$E@@2) TyType)) (= (type $ly@@137) LayerTypeType)) (= (type $Heap@@37) (MapType0Type refType MapType1Type))) (= (type |f#0@@55|) HandleTypeType)) (= (type |init#0@@9|) BoxType)) (= (type |run#0@@83|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@37) ($Is |f#0@@55| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 Sequences._default.FoldRight$A@@2))) ($IsBox |init#0@@9| Sequences._default.FoldRight$A@@2)) ($Is |run#0@@83| (TSeq Sequences._default.FoldRight$E@@2)))) (and (=> (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@137 |f#0@@55| |init#0@@9| |run#0@@83|) true) (=> true (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@137 |f#0@@55| |init#0@@9| |run#0@@83|)))) :qid |unknown.0:0| :skolemid |9275| :pattern ( (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@137 |f#0@@55| |init#0@@9| |run#0@@83|) ($IsGoodHeap $Heap@@37)) )))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@3 T@U) (Sequences._default.FoldRight$E@@3 T@U) ($ly@@138 T@U) ($Heap@@38 T@U) (|f#0@@56| T@U) (|init#0@@10| T@U) (|run#0@@84| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@3) TyType) (= (type Sequences._default.FoldRight$E@@3) TyType)) (= (type $ly@@138) LayerTypeType)) (= (type $Heap@@38) (MapType0Type refType MapType1Type))) (= (type |f#0@@56|) HandleTypeType)) (= (type |init#0@@10|) BoxType)) (= (type |run#0@@84|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@56| |init#0@@10| |run#0@@84|) (and (and (and ($IsGoodHeap $Heap@@38) ($Is |f#0@@56| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3))) ($IsBox |init#0@@10| Sequences._default.FoldRight$A@@3)) ($Is |run#0@@84| (TSeq Sequences._default.FoldRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@84|) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@56| |init#0@@10| (|Seq#Drop| |run#0@@84| (LitInt 1)))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@138) |f#0@@56| |init#0@@10| |run#0@@84|) (ite (= (|Seq#Length| |run#0@@84|) (LitInt 0)) |init#0@@10| (Apply2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3 $Heap@@38 |f#0@@56| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 $ly@@138 |f#0@@56| |init#0@@10| (|Seq#Drop| |run#0@@84| (LitInt 1))) (|Seq#Index| |run#0@@84| (LitInt 0))))))) :qid |unknown.0:0| :skolemid |9276| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@138) |f#0@@56| |init#0@@10| |run#0@@84|) ($IsGoodHeap $Heap@@38)) ))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@4 T@U) (Sequences._default.FoldRight$E@@4 T@U) ($ly@@139 T@U) ($Heap@@39 T@U) (|f#0@@57| T@U) (|init#0@@11| T@U) (|run#0@@85| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@4) TyType) (= (type Sequences._default.FoldRight$E@@4) TyType)) (= (type $ly@@139) LayerTypeType)) (= (type $Heap@@39) (MapType0Type refType MapType1Type))) (= (type |f#0@@57|) HandleTypeType)) (= (type |init#0@@11|) BoxType)) (= (type |run#0@@85|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@57| |init#0@@11| (Lit |run#0@@85|)) (and (and (and ($IsGoodHeap $Heap@@39) ($Is |f#0@@57| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4))) ($IsBox |init#0@@11| Sequences._default.FoldRight$A@@4)) ($Is |run#0@@85| (TSeq Sequences._default.FoldRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@85|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@57| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@85|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@139) |f#0@@57| |init#0@@11| (Lit |run#0@@85|)) (ite (= (|Seq#Length| (Lit |run#0@@85|)) (LitInt 0)) |init#0@@11| (Apply2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4 $Heap@@39 |f#0@@57| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@139) |f#0@@57| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@85|) (LitInt 1)))) (|Seq#Index| (Lit |run#0@@85|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |9277| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@139) |f#0@@57| |init#0@@11| (Lit |run#0@@85|)) ($IsGoodHeap $Heap@@39)) ))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@5 T@U) (Sequences._default.FoldRight$E@@5 T@U) ($ly@@140 T@U) ($Heap@@40 T@U) (|f#0@@58| T@U) (|init#0@@12| T@U) (|run#0@@86| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@5) TyType) (= (type Sequences._default.FoldRight$E@@5) TyType)) (= (type $ly@@140) LayerTypeType)) (= (type $Heap@@40) (MapType0Type refType MapType1Type))) (= (type |f#0@@58|) HandleTypeType)) (= (type |init#0@@12|) BoxType)) (= (type |run#0@@86|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit |run#0@@86|)) (and (and (and ($IsGoodHeap $Heap@@40) ($Is |f#0@@58| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5))) ($IsBox |init#0@@12| Sequences._default.FoldRight$A@@5)) ($Is |run#0@@86| (TSeq Sequences._default.FoldRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@86|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@86|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@140) (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit |run#0@@86|)) (ite (= (|Seq#Length| (Lit |run#0@@86|)) (LitInt 0)) |init#0@@12| (Apply2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5 $Heap@@40 (Lit |f#0@@58|) (Lit (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@140) (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@86|) (LitInt 1))))) (|Seq#Index| (Lit |run#0@@86|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |9278| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@140) (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit |run#0@@86|)) ($IsGoodHeap $Heap@@40)) ))))
(assert (forall ((arg0@@254 T@U) (arg1@@135 T@U) (arg2@@74 T@U) (arg3@@50 T@U) (arg4@@36 T@U) (arg5@@19 T@U) ) (! (= (type (Sequences.__default.FoldFromRight arg0@@254 arg1@@135 arg2@@74 arg3@@50 arg4@@36 arg5@@19)) BoxType) :qid |funType:Sequences.__default.FoldFromRight| :pattern ( (Sequences.__default.FoldFromRight arg0@@254 arg1@@135 arg2@@74 arg3@@50 arg4@@36 arg5@@19)) )))
(assert (forall ((Sequences._default.FoldFromRight$A T@U) (Sequences._default.FoldFromRight$E T@U) ($ly@@141 T@U) (|f#0@@59| T@U) (|init#0@@13| T@U) (|run#0@@87| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A) TyType) (= (type Sequences._default.FoldFromRight$E) TyType)) (= (type $ly@@141) LayerTypeType)) (= (type |f#0@@59|) HandleTypeType)) (= (type |init#0@@13|) BoxType)) (= (type |run#0@@87|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@141) |f#0@@59| |init#0@@13| |run#0@@87|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E $ly@@141 |f#0@@59| |init#0@@13| |run#0@@87|))) :qid |unknown.0:0| :skolemid |9279| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@141) |f#0@@59| |init#0@@13| |run#0@@87|)) )))
(assert (forall ((Sequences._default.FoldFromRight$A@@0 T@U) (Sequences._default.FoldFromRight$E@@0 T@U) ($ly@@142 T@U) (|f#0@@60| T@U) (|init#0@@14| T@U) (|run#0@@88| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@0) TyType) (= (type Sequences._default.FoldFromRight$E@@0) TyType)) (= (type $ly@@142) LayerTypeType)) (= (type |f#0@@60|) HandleTypeType)) (= (type |init#0@@14|) BoxType)) (= (type |run#0@@88|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $ly@@142 |f#0@@60| |init#0@@14| |run#0@@88|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $LZ |f#0@@60| |init#0@@14| |run#0@@88|))) :qid |unknown.0:0| :skolemid |9280| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 (AsFuelBottom $ly@@142) |f#0@@60| |init#0@@14| |run#0@@88|)) )))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@1 T@U) (Sequences._default.FoldFromRight$E@@1 T@U) ($ly@@143 T@U) (|f#0@@61| T@U) (|init#0@@15| T@U) (|run#0@@89| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@1) TyType) (= (type Sequences._default.FoldFromRight$E@@1) TyType)) (= (type $ly@@143) LayerTypeType)) (= (type |f#0@@61|) HandleTypeType)) (= (type |init#0@@15|) BoxType)) (= (type |run#0@@89|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 |f#0@@61| |init#0@@15| |run#0@@89|) (and (and ($Is |f#0@@61| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 Sequences._default.FoldFromRight$A@@1)) ($IsBox |init#0@@15| Sequences._default.FoldFromRight$A@@1)) ($Is |run#0@@89| (TSeq Sequences._default.FoldFromRight$E@@1))))) ($IsBox (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@143 |f#0@@61| |init#0@@15| |run#0@@89|) Sequences._default.FoldFromRight$A@@1)) :qid |unknown.0:0| :skolemid |9281| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@143 |f#0@@61| |init#0@@15| |run#0@@89|)) ))))
(assert (forall ((Sequences._default.FoldFromRight$A@@2 T@U) (Sequences._default.FoldFromRight$E@@2 T@U) ($ly@@144 T@U) ($Heap@@41 T@U) (|f#0@@62| T@U) (|init#0@@16| T@U) (|run#0@@90| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@2) TyType) (= (type Sequences._default.FoldFromRight$E@@2) TyType)) (= (type $ly@@144) LayerTypeType)) (= (type $Heap@@41) (MapType0Type refType MapType1Type))) (= (type |f#0@@62|) HandleTypeType)) (= (type |init#0@@16|) BoxType)) (= (type |run#0@@90|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@41) ($Is |f#0@@62| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 Sequences._default.FoldFromRight$A@@2))) ($IsBox |init#0@@16| Sequences._default.FoldFromRight$A@@2)) ($Is |run#0@@90| (TSeq Sequences._default.FoldFromRight$E@@2)))) (and (=> (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@144 |f#0@@62| |init#0@@16| |run#0@@90|) true) (=> true (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@144 |f#0@@62| |init#0@@16| |run#0@@90|)))) :qid |unknown.0:0| :skolemid |9282| :pattern ( (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@144 |f#0@@62| |init#0@@16| |run#0@@90|) ($IsGoodHeap $Heap@@41)) )))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@3 T@U) (Sequences._default.FoldFromRight$E@@3 T@U) ($ly@@145 T@U) ($Heap@@42 T@U) (|f#0@@63| T@U) (|init#0@@17| T@U) (|run#0@@91| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@3) TyType) (= (type Sequences._default.FoldFromRight$E@@3) TyType)) (= (type $ly@@145) LayerTypeType)) (= (type $Heap@@42) (MapType0Type refType MapType1Type))) (= (type |f#0@@63|) HandleTypeType)) (= (type |init#0@@17|) BoxType)) (= (type |run#0@@91|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@63| |init#0@@17| |run#0@@91|) (and (and (and ($IsGoodHeap $Heap@@42) ($Is |f#0@@63| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3))) ($IsBox |init#0@@17| Sequences._default.FoldFromRight$A@@3)) ($Is |run#0@@91| (TSeq Sequences._default.FoldFromRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@91|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@91|) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@63| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@91|))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@91|))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@145) |f#0@@63| |init#0@@17| |run#0@@91|) (ite (= (|Seq#Length| |run#0@@91|) (LitInt 0)) |init#0@@17| (Apply2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3 $Heap@@42 |f#0@@63| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 $ly@@145 |f#0@@63| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@91|)) (Sequences.__default.Last Sequences._default.FoldFromRight$E@@3 |run#0@@91|)))))) :qid |unknown.0:0| :skolemid |9283| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@145) |f#0@@63| |init#0@@17| |run#0@@91|) ($IsGoodHeap $Heap@@42)) ))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@4 T@U) (Sequences._default.FoldFromRight$E@@4 T@U) ($ly@@146 T@U) ($Heap@@43 T@U) (|f#0@@64| T@U) (|init#0@@18| T@U) (|run#0@@92| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@4) TyType) (= (type Sequences._default.FoldFromRight$E@@4) TyType)) (= (type $ly@@146) LayerTypeType)) (= (type $Heap@@43) (MapType0Type refType MapType1Type))) (= (type |f#0@@64|) HandleTypeType)) (= (type |init#0@@18|) BoxType)) (= (type |run#0@@92|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@64| |init#0@@18| (Lit |run#0@@92|)) (and (and (and ($IsGoodHeap $Heap@@43) ($Is |f#0@@64| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4))) ($IsBox |init#0@@18| Sequences._default.FoldFromRight$A@@4)) ($Is |run#0@@92| (TSeq Sequences._default.FoldFromRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@92|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@92|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@64| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@92|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@92|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@146) |f#0@@64| |init#0@@18| (Lit |run#0@@92|)) (ite (= (|Seq#Length| (Lit |run#0@@92|)) (LitInt 0)) |init#0@@18| (Apply2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4 $Heap@@43 |f#0@@64| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@146) |f#0@@64| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@92|)))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@92|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |9284| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@146) |f#0@@64| |init#0@@18| (Lit |run#0@@92|)) ($IsGoodHeap $Heap@@43)) ))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@5 T@U) (Sequences._default.FoldFromRight$E@@5 T@U) ($ly@@147 T@U) ($Heap@@44 T@U) (|f#0@@65| T@U) (|init#0@@19| T@U) (|run#0@@93| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@5) TyType) (= (type Sequences._default.FoldFromRight$E@@5) TyType)) (= (type $ly@@147) LayerTypeType)) (= (type $Heap@@44) (MapType0Type refType MapType1Type))) (= (type |f#0@@65|) HandleTypeType)) (= (type |init#0@@19|) BoxType)) (= (type |run#0@@93|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit |run#0@@93|)) (and (and (and ($IsGoodHeap $Heap@@44) ($Is |f#0@@65| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5))) ($IsBox |init#0@@19| Sequences._default.FoldFromRight$A@@5)) ($Is |run#0@@93| (TSeq Sequences._default.FoldFromRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@93|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@93|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@93|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@93|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@147) (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit |run#0@@93|)) (ite (= (|Seq#Length| (Lit |run#0@@93|)) (LitInt 0)) |init#0@@19| (Apply2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5 $Heap@@44 (Lit |f#0@@65|) (Lit (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@147) (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@93|))))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@93|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |9285| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@147) (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit |run#0@@93|)) ($IsGoodHeap $Heap@@44)) ))))
(assert (forall ((arg0@@255 T@U) (arg1@@136 T@U) (arg2@@75 T@U) (arg3@@51 Int) ) (! (= (type (Sequences.__default.remove arg0@@255 arg1@@136 arg2@@75 arg3@@51)) (SeqType BoxType)) :qid |funType:Sequences.__default.remove| :pattern ( (Sequences.__default.remove arg0@@255 arg1@@136 arg2@@75 arg3@@51)) )))
(assert (forall ((Sequences._default.remove$A T@U) ($ly@@148 T@U) (|s#0@@60| T@U) (|pos#0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A) TyType) (= (type $ly@@148) LayerTypeType)) (= (type |s#0@@60|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@148) |s#0@@60| |pos#0|) (Sequences.__default.remove Sequences._default.remove$A $ly@@148 |s#0@@60| |pos#0|))) :qid |unknown.0:0| :skolemid |9286| :pattern ( (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@148) |s#0@@60| |pos#0|)) )))
(assert (forall ((Sequences._default.remove$A@@0 T@U) ($ly@@149 T@U) (|s#0@@61| T@U) (|pos#0@@0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A@@0) TyType) (= (type $ly@@149) LayerTypeType)) (= (type |s#0@@61|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A@@0 $ly@@149 |s#0@@61| |pos#0@@0|) (Sequences.__default.remove Sequences._default.remove$A@@0 $LZ |s#0@@61| |pos#0@@0|))) :qid |unknown.0:0| :skolemid |9287| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@0 (AsFuelBottom $ly@@149) |s#0@@61| |pos#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.remove$A@@1 T@U) ($ly@@150 T@U) (|s#0@@62| T@U) (|pos#0@@1| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@1) TyType) (= (type $ly@@150) LayerTypeType)) (= (type |s#0@@62|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@1 |s#0@@62| |pos#0@@1|) (and ($Is |s#0@@62| (TSeq Sequences._default.remove$A@@1)) (and (<= (LitInt 0) |pos#0@@1|) (< |pos#0@@1| (|Seq#Length| |s#0@@62|)))))) (and (and (and (= (|Seq#Length| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@150 |s#0@@62| |pos#0@@1|)) (- (|Seq#Length| |s#0@@62|) 1)) (forall ((|i#10@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#10@@1|) (< |i#10@@1| |pos#0@@1|)) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@150 |s#0@@62| |pos#0@@1|) |i#10@@1|) (|Seq#Index| |s#0@@62| |i#10@@1|))) :qid |sequence.168:18| :skolemid |9288| :pattern ( (|Seq#Index| |s#0@@62| |i#10@@1|)) :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@150 |s#0@@62| |pos#0@@1|) |i#10@@1|)) ))) (forall ((|i#11@@1| Int) ) (!  (=> (and (<= |pos#0@@1| |i#11@@1|) (< |i#11@@1| (- (|Seq#Length| |s#0@@62|) 1))) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@150 |s#0@@62| |pos#0@@1|) |i#11@@1|) (|Seq#Index| |s#0@@62| (+ |i#11@@1| 1)))) :qid |sequence.169:18| :skolemid |9289| :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@150 |s#0@@62| |pos#0@@1|) |i#11@@1|)) ))) ($Is (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@150 |s#0@@62| |pos#0@@1|) (TSeq Sequences._default.remove$A@@1)))) :qid |unknown.0:0| :skolemid |9290| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@150 |s#0@@62| |pos#0@@1|)) ))))
(assert (forall ((Sequences._default.remove$A@@2 T@U) ($ly@@151 T@U) (|s#0@@63| T@U) (|pos#0@@2| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@2) TyType) (= (type $ly@@151) LayerTypeType)) (= (type |s#0@@63|) (SeqType BoxType))) ($Is |s#0@@63| (TSeq Sequences._default.remove$A@@2))) (and (=> (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@151 |s#0@@63| |pos#0@@2|) (and (<= (LitInt 0) |pos#0@@2|) (< |pos#0@@2| (|Seq#Length| |s#0@@63|)))) (=> (and (<= (LitInt 0) |pos#0@@2|) (< |pos#0@@2| (|Seq#Length| |s#0@@63|))) (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@151 |s#0@@63| |pos#0@@2|)))) :qid |unknown.0:0| :skolemid |9291| :pattern ( (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@151 |s#0@@63| |pos#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.remove$A@@3 T@U) ($ly@@152 T@U) (|s#0@@64| T@U) (|pos#0@@3| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@3) TyType) (= (type $ly@@152) LayerTypeType)) (= (type |s#0@@64|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@3 |s#0@@64| |pos#0@@3|) (and ($Is |s#0@@64| (TSeq Sequences._default.remove$A@@3)) (and (<= (LitInt 0) |pos#0@@3|) (< |pos#0@@3| (|Seq#Length| |s#0@@64|)))))) (= (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@152) |s#0@@64| |pos#0@@3|) (|Seq#Append| (|Seq#Take| |s#0@@64| |pos#0@@3|) (|Seq#Drop| |s#0@@64| (+ |pos#0@@3| 1))))) :qid |unknown.0:0| :skolemid |9292| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@152) |s#0@@64| |pos#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.remove$A@@4 T@U) ($ly@@153 T@U) (|s#0@@65| T@U) (|pos#0@@4| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@4) TyType) (= (type $ly@@153) LayerTypeType)) (= (type |s#0@@65|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@4 (Lit |s#0@@65|) (LitInt |pos#0@@4|)) (and ($Is |s#0@@65| (TSeq Sequences._default.remove$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@4|)) (< |pos#0@@4| (|Seq#Length| (Lit |s#0@@65|))))))) (= (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@153) (Lit |s#0@@65|) (LitInt |pos#0@@4|)) (|Seq#Append| (|Seq#Take| (Lit |s#0@@65|) (LitInt |pos#0@@4|)) (|Seq#Drop| (Lit |s#0@@65|) (LitInt (+ |pos#0@@4| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |9293| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@153) (Lit |s#0@@65|) (LitInt |pos#0@@4|))) ))))
(assert (forall ((arg0@@256 T@U) (arg1@@137 T@U) (arg2@@76 T@U) (arg3@@52 T@U) (arg4@@37 Int) ) (! (= (type (Sequences.__default.insert arg0@@256 arg1@@137 arg2@@76 arg3@@52 arg4@@37)) (SeqType BoxType)) :qid |funType:Sequences.__default.insert| :pattern ( (Sequences.__default.insert arg0@@256 arg1@@137 arg2@@76 arg3@@52 arg4@@37)) )))
(assert (forall ((Sequences._default.insert$A T@U) ($ly@@154 T@U) (|s#0@@66| T@U) (|a#0@@43| T@U) (|pos#0@@5| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A) TyType) (= (type $ly@@154) LayerTypeType)) (= (type |s#0@@66|) (SeqType BoxType))) (= (type |a#0@@43|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@154) |s#0@@66| |a#0@@43| |pos#0@@5|) (Sequences.__default.insert Sequences._default.insert$A $ly@@154 |s#0@@66| |a#0@@43| |pos#0@@5|))) :qid |unknown.0:0| :skolemid |9294| :pattern ( (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@154) |s#0@@66| |a#0@@43| |pos#0@@5|)) )))
(assert (forall ((Sequences._default.insert$A@@0 T@U) ($ly@@155 T@U) (|s#0@@67| T@U) (|a#0@@44| T@U) (|pos#0@@6| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A@@0) TyType) (= (type $ly@@155) LayerTypeType)) (= (type |s#0@@67|) (SeqType BoxType))) (= (type |a#0@@44|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A@@0 $ly@@155 |s#0@@67| |a#0@@44| |pos#0@@6|) (Sequences.__default.insert Sequences._default.insert$A@@0 $LZ |s#0@@67| |a#0@@44| |pos#0@@6|))) :qid |unknown.0:0| :skolemid |9295| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@0 (AsFuelBottom $ly@@155) |s#0@@67| |a#0@@44| |pos#0@@6|)) )))
(assert  (=> true (forall ((Sequences._default.insert$A@@1 T@U) ($ly@@156 T@U) (|s#0@@68| T@U) (|a#0@@45| T@U) (|pos#0@@7| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@1) TyType) (= (type $ly@@156) LayerTypeType)) (= (type |s#0@@68|) (SeqType BoxType))) (= (type |a#0@@45|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@1 |s#0@@68| |a#0@@45| |pos#0@@7|) (and (and ($Is |s#0@@68| (TSeq Sequences._default.insert$A@@1)) ($IsBox |a#0@@45| Sequences._default.insert$A@@1)) (and (<= (LitInt 0) |pos#0@@7|) (<= |pos#0@@7| (|Seq#Length| |s#0@@68|)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@156 |s#0@@68| |a#0@@45| |pos#0@@7|)) (+ (|Seq#Length| |s#0@@68|) 1)) (forall ((|i#10@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#10@@2|) (< |i#10@@2| |pos#0@@7|)) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@156 |s#0@@68| |a#0@@45| |pos#0@@7|) |i#10@@2|) (|Seq#Index| |s#0@@68| |i#10@@2|)))) :qid |sequence.177:18| :skolemid |9296| :pattern ( (|Seq#Index| |s#0@@68| |i#10@@2|)) :pattern ( (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@156 |s#0@@68| |a#0@@45| |pos#0@@7|) |i#10@@2|)) ))) (forall ((|i#11@@2| Int) ) (!  (=> true (=> (and (<= |pos#0@@7| |i#11@@2|) (< |i#11@@2| (|Seq#Length| |s#0@@68|))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@156 |s#0@@68| |a#0@@45| |pos#0@@7|) (+ |i#11@@2| 1)) (|Seq#Index| |s#0@@68| |i#11@@2|)))) :qid |sequence.178:18| :skolemid |9297| :pattern ( (|Seq#Index| |s#0@@68| |i#11@@2|)) ))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@156 |s#0@@68| |a#0@@45| |pos#0@@7|) |pos#0@@7|) |a#0@@45|)) ($Is (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@156 |s#0@@68| |a#0@@45| |pos#0@@7|) (TSeq Sequences._default.insert$A@@1)))) :qid |unknown.0:0| :skolemid |9298| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@156 |s#0@@68| |a#0@@45| |pos#0@@7|)) ))))
(assert (forall ((Sequences._default.insert$A@@2 T@U) ($ly@@157 T@U) (|s#0@@69| T@U) (|a#0@@46| T@U) (|pos#0@@8| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@2) TyType) (= (type $ly@@157) LayerTypeType)) (= (type |s#0@@69|) (SeqType BoxType))) (= (type |a#0@@46|) BoxType)) (and ($Is |s#0@@69| (TSeq Sequences._default.insert$A@@2)) ($IsBox |a#0@@46| Sequences._default.insert$A@@2))) (and (=> (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@157 |s#0@@69| |a#0@@46| |pos#0@@8|) (and (<= (LitInt 0) |pos#0@@8|) (<= |pos#0@@8| (|Seq#Length| |s#0@@69|)))) (=> (and (<= (LitInt 0) |pos#0@@8|) (<= |pos#0@@8| (|Seq#Length| |s#0@@69|))) (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@157 |s#0@@69| |a#0@@46| |pos#0@@8|)))) :qid |unknown.0:0| :skolemid |9299| :pattern ( (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@157 |s#0@@69| |a#0@@46| |pos#0@@8|)) )))
(assert  (=> true (forall ((Sequences._default.insert$A@@3 T@U) ($ly@@158 T@U) (|s#0@@70| T@U) (|a#0@@47| T@U) (|pos#0@@9| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@3) TyType) (= (type $ly@@158) LayerTypeType)) (= (type |s#0@@70|) (SeqType BoxType))) (= (type |a#0@@47|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@3 |s#0@@70| |a#0@@47| |pos#0@@9|) (and (and ($Is |s#0@@70| (TSeq Sequences._default.insert$A@@3)) ($IsBox |a#0@@47| Sequences._default.insert$A@@3)) (and (<= (LitInt 0) |pos#0@@9|) (<= |pos#0@@9| (|Seq#Length| |s#0@@70|)))))) (= (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@158) |s#0@@70| |a#0@@47| |pos#0@@9|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@70| |pos#0@@9|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@47|)) (|Seq#Drop| |s#0@@70| |pos#0@@9|)))) :qid |unknown.0:0| :skolemid |9300| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@158) |s#0@@70| |a#0@@47| |pos#0@@9|)) ))))
(assert  (=> true (forall ((Sequences._default.insert$A@@4 T@U) ($ly@@159 T@U) (|s#0@@71| T@U) (|a#0@@48| T@U) (|pos#0@@10| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@4) TyType) (= (type $ly@@159) LayerTypeType)) (= (type |s#0@@71|) (SeqType BoxType))) (= (type |a#0@@48|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@4 (Lit |s#0@@71|) |a#0@@48| (LitInt |pos#0@@10|)) (and (and ($Is |s#0@@71| (TSeq Sequences._default.insert$A@@4)) ($IsBox |a#0@@48| Sequences._default.insert$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@10|)) (<= (LitInt |pos#0@@10|) (|Seq#Length| (Lit |s#0@@71|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@159) (Lit |s#0@@71|) |a#0@@48| (LitInt |pos#0@@10|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@71|) (LitInt |pos#0@@10|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@48|)) (|Seq#Drop| (Lit |s#0@@71|) (LitInt |pos#0@@10|))))) :qid |unknown.0:0| :weight 3 :skolemid |9301| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@159) (Lit |s#0@@71|) |a#0@@48| (LitInt |pos#0@@10|))) ))))
(assert  (=> true (forall ((Sequences._default.insert$A@@5 T@U) ($ly@@160 T@U) (|s#0@@72| T@U) (|a#0@@49| T@U) (|pos#0@@11| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@5) TyType) (= (type $ly@@160) LayerTypeType)) (= (type |s#0@@72|) (SeqType BoxType))) (= (type |a#0@@49|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@5 (Lit |s#0@@72|) (Lit |a#0@@49|) (LitInt |pos#0@@11|)) (and (and ($Is |s#0@@72| (TSeq Sequences._default.insert$A@@5)) ($IsBox |a#0@@49| Sequences._default.insert$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@11|)) (<= (LitInt |pos#0@@11|) (|Seq#Length| (Lit |s#0@@72|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@160) (Lit |s#0@@72|) (Lit |a#0@@49|) (LitInt |pos#0@@11|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@72|) (LitInt |pos#0@@11|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@49|))) (|Seq#Drop| (Lit |s#0@@72|) (LitInt |pos#0@@11|))))) :qid |unknown.0:0| :weight 3 :skolemid |9302| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@160) (Lit |s#0@@72|) (Lit |a#0@@49|) (LitInt |pos#0@@11|))) ))))
(assert (forall ((arg0@@257 T@U) (arg1@@138 T@U) (arg2@@77 T@U) (arg3@@53 T@U) (arg4@@38 T@U) (arg5@@20 Int) ) (! (= (type (Sequences.__default.replace1with2 arg0@@257 arg1@@138 arg2@@77 arg3@@53 arg4@@38 arg5@@20)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace1with2| :pattern ( (Sequences.__default.replace1with2 arg0@@257 arg1@@138 arg2@@77 arg3@@53 arg4@@38 arg5@@20)) )))
(assert (forall ((Sequences._default.replace1with2$A T@U) ($ly@@161 T@U) (|s#0@@73| T@U) (|a#0@@50| T@U) (|b#0@@34| T@U) (|pos#0@@12| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A) TyType) (= (type $ly@@161) LayerTypeType)) (= (type |s#0@@73|) (SeqType BoxType))) (= (type |a#0@@50|) BoxType)) (= (type |b#0@@34|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@161) |s#0@@73| |a#0@@50| |b#0@@34| |pos#0@@12|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A $ly@@161 |s#0@@73| |a#0@@50| |b#0@@34| |pos#0@@12|))) :qid |unknown.0:0| :skolemid |9303| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@161) |s#0@@73| |a#0@@50| |b#0@@34| |pos#0@@12|)) )))
(assert (forall ((Sequences._default.replace1with2$A@@0 T@U) ($ly@@162 T@U) (|s#0@@74| T@U) (|a#0@@51| T@U) (|b#0@@35| T@U) (|pos#0@@13| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A@@0) TyType) (= (type $ly@@162) LayerTypeType)) (= (type |s#0@@74|) (SeqType BoxType))) (= (type |a#0@@51|) BoxType)) (= (type |b#0@@35|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $ly@@162 |s#0@@74| |a#0@@51| |b#0@@35| |pos#0@@13|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $LZ |s#0@@74| |a#0@@51| |b#0@@35| |pos#0@@13|))) :qid |unknown.0:0| :skolemid |9304| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 (AsFuelBottom $ly@@162) |s#0@@74| |a#0@@51| |b#0@@35| |pos#0@@13|)) )))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@1 T@U) ($ly@@163 T@U) (|s#0@@75| T@U) (|a#0@@52| T@U) (|b#0@@36| T@U) (|pos#0@@14| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@1) TyType) (= (type $ly@@163) LayerTypeType)) (= (type |s#0@@75|) (SeqType BoxType))) (= (type |a#0@@52|) BoxType)) (= (type |b#0@@36|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@1 |s#0@@75| |a#0@@52| |b#0@@36| |pos#0@@14|) (and (and (and ($Is |s#0@@75| (TSeq Sequences._default.replace1with2$A@@1)) ($IsBox |a#0@@52| Sequences._default.replace1with2$A@@1)) ($IsBox |b#0@@36| Sequences._default.replace1with2$A@@1)) (and (<= (LitInt 0) |pos#0@@14|) (< |pos#0@@14| (|Seq#Length| |s#0@@75|)))))) (and (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@163 |s#0@@75| |a#0@@52| |b#0@@36| |pos#0@@14|)) (+ (|Seq#Length| |s#0@@75|) 1)) (forall ((|i#10@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#10@@3|) (< |i#10@@3| |pos#0@@14|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@163 |s#0@@75| |a#0@@52| |b#0@@36| |pos#0@@14|) |i#10@@3|) (|Seq#Index| |s#0@@75| |i#10@@3|)))) :qid |sequence.202:18| :skolemid |9305| :pattern ( (|Seq#Index| |s#0@@75| |i#10@@3|)) :pattern ( (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@163 |s#0@@75| |a#0@@52| |b#0@@36| |pos#0@@14|) |i#10@@3|)) ))) (forall ((|i#11@@3| Int) ) (!  (=> true (=> (and (< |pos#0@@14| |i#11@@3|) (< |i#11@@3| (|Seq#Length| |s#0@@75|))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@163 |s#0@@75| |a#0@@52| |b#0@@36| |pos#0@@14|) (+ |i#11@@3| 1)) (|Seq#Index| |s#0@@75| |i#11@@3|)))) :qid |sequence.203:18| :skolemid |9306| :pattern ( (|Seq#Index| |s#0@@75| |i#11@@3|)) ))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@163 |s#0@@75| |a#0@@52| |b#0@@36| |pos#0@@14|) |pos#0@@14|) |a#0@@52|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@163 |s#0@@75| |a#0@@52| |b#0@@36| |pos#0@@14|) (+ |pos#0@@14| 1)) |b#0@@36|)) ($Is (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@163 |s#0@@75| |a#0@@52| |b#0@@36| |pos#0@@14|) (TSeq Sequences._default.replace1with2$A@@1)))) :qid |unknown.0:0| :skolemid |9307| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@163 |s#0@@75| |a#0@@52| |b#0@@36| |pos#0@@14|)) ))))
(assert (forall ((Sequences._default.replace1with2$A@@2 T@U) ($ly@@164 T@U) (|s#0@@76| T@U) (|a#0@@53| T@U) (|b#0@@37| T@U) (|pos#0@@15| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@2) TyType) (= (type $ly@@164) LayerTypeType)) (= (type |s#0@@76|) (SeqType BoxType))) (= (type |a#0@@53|) BoxType)) (= (type |b#0@@37|) BoxType)) (and (and ($Is |s#0@@76| (TSeq Sequences._default.replace1with2$A@@2)) ($IsBox |a#0@@53| Sequences._default.replace1with2$A@@2)) ($IsBox |b#0@@37| Sequences._default.replace1with2$A@@2))) (and (=> (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@164 |s#0@@76| |a#0@@53| |b#0@@37| |pos#0@@15|) (and (<= (LitInt 0) |pos#0@@15|) (< |pos#0@@15| (|Seq#Length| |s#0@@76|)))) (=> (and (<= (LitInt 0) |pos#0@@15|) (< |pos#0@@15| (|Seq#Length| |s#0@@76|))) (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@164 |s#0@@76| |a#0@@53| |b#0@@37| |pos#0@@15|)))) :qid |unknown.0:0| :skolemid |9308| :pattern ( (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@164 |s#0@@76| |a#0@@53| |b#0@@37| |pos#0@@15|)) )))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@3 T@U) ($ly@@165 T@U) (|s#0@@77| T@U) (|a#0@@54| T@U) (|b#0@@38| T@U) (|pos#0@@16| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@3) TyType) (= (type $ly@@165) LayerTypeType)) (= (type |s#0@@77|) (SeqType BoxType))) (= (type |a#0@@54|) BoxType)) (= (type |b#0@@38|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@3 |s#0@@77| |a#0@@54| |b#0@@38| |pos#0@@16|) (and (and (and ($Is |s#0@@77| (TSeq Sequences._default.replace1with2$A@@3)) ($IsBox |a#0@@54| Sequences._default.replace1with2$A@@3)) ($IsBox |b#0@@38| Sequences._default.replace1with2$A@@3)) (and (<= (LitInt 0) |pos#0@@16|) (< |pos#0@@16| (|Seq#Length| |s#0@@77|)))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@165) |s#0@@77| |a#0@@54| |b#0@@38| |pos#0@@16|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@77| |pos#0@@16|) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@54|) |b#0@@38|)) (|Seq#Drop| |s#0@@77| (+ |pos#0@@16| 1))))) :qid |unknown.0:0| :skolemid |9309| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@165) |s#0@@77| |a#0@@54| |b#0@@38| |pos#0@@16|)) ))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@4 T@U) ($ly@@166 T@U) (|s#0@@78| T@U) (|a#0@@55| T@U) (|b#0@@39| T@U) (|pos#0@@17| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@4) TyType) (= (type $ly@@166) LayerTypeType)) (= (type |s#0@@78|) (SeqType BoxType))) (= (type |a#0@@55|) BoxType)) (= (type |b#0@@39|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@4 (Lit |s#0@@78|) |a#0@@55| |b#0@@39| (LitInt |pos#0@@17|)) (and (and (and ($Is |s#0@@78| (TSeq Sequences._default.replace1with2$A@@4)) ($IsBox |a#0@@55| Sequences._default.replace1with2$A@@4)) ($IsBox |b#0@@39| Sequences._default.replace1with2$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@17|)) (< |pos#0@@17| (|Seq#Length| (Lit |s#0@@78|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@166) (Lit |s#0@@78|) |a#0@@55| |b#0@@39| (LitInt |pos#0@@17|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@78|) (LitInt |pos#0@@17|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@55|) |b#0@@39|)) (|Seq#Drop| (Lit |s#0@@78|) (LitInt (+ |pos#0@@17| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |9310| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@166) (Lit |s#0@@78|) |a#0@@55| |b#0@@39| (LitInt |pos#0@@17|))) ))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@5 T@U) ($ly@@167 T@U) (|s#0@@79| T@U) (|a#0@@56| T@U) (|b#0@@40| T@U) (|pos#0@@18| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@5) TyType) (= (type $ly@@167) LayerTypeType)) (= (type |s#0@@79|) (SeqType BoxType))) (= (type |a#0@@56|) BoxType)) (= (type |b#0@@40|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@5 (Lit |s#0@@79|) (Lit |a#0@@56|) (Lit |b#0@@40|) (LitInt |pos#0@@18|)) (and (and (and ($Is |s#0@@79| (TSeq Sequences._default.replace1with2$A@@5)) ($IsBox |a#0@@56| Sequences._default.replace1with2$A@@5)) ($IsBox |b#0@@40| Sequences._default.replace1with2$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@18|)) (< |pos#0@@18| (|Seq#Length| (Lit |s#0@@79|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@167) (Lit |s#0@@79|) (Lit |a#0@@56|) (Lit |b#0@@40|) (LitInt |pos#0@@18|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@79|) (LitInt |pos#0@@18|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@56|)) (Lit |b#0@@40|))) (|Seq#Drop| (Lit |s#0@@79|) (LitInt (+ |pos#0@@18| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |9311| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@167) (Lit |s#0@@79|) (Lit |a#0@@56|) (Lit |b#0@@40|) (LitInt |pos#0@@18|))) ))))
(assert (forall ((arg0@@258 T@U) (arg1@@139 T@U) (arg2@@78 T@U) (arg3@@54 T@U) (arg4@@39 Int) ) (! (= (type (Sequences.__default.replace2with1 arg0@@258 arg1@@139 arg2@@78 arg3@@54 arg4@@39)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace2with1| :pattern ( (Sequences.__default.replace2with1 arg0@@258 arg1@@139 arg2@@78 arg3@@54 arg4@@39)) )))
(assert (forall ((Sequences._default.replace2with1$A T@U) ($ly@@168 T@U) (|s#0@@80| T@U) (|a#0@@57| T@U) (|pos#0@@19| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A) TyType) (= (type $ly@@168) LayerTypeType)) (= (type |s#0@@80|) (SeqType BoxType))) (= (type |a#0@@57|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@168) |s#0@@80| |a#0@@57| |pos#0@@19|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A $ly@@168 |s#0@@80| |a#0@@57| |pos#0@@19|))) :qid |unknown.0:0| :skolemid |9312| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@168) |s#0@@80| |a#0@@57| |pos#0@@19|)) )))
(assert (forall ((Sequences._default.replace2with1$A@@0 T@U) ($ly@@169 T@U) (|s#0@@81| T@U) (|a#0@@58| T@U) (|pos#0@@20| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A@@0) TyType) (= (type $ly@@169) LayerTypeType)) (= (type |s#0@@81|) (SeqType BoxType))) (= (type |a#0@@58|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $ly@@169 |s#0@@81| |a#0@@58| |pos#0@@20|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $LZ |s#0@@81| |a#0@@58| |pos#0@@20|))) :qid |unknown.0:0| :skolemid |9313| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 (AsFuelBottom $ly@@169) |s#0@@81| |a#0@@58| |pos#0@@20|)) )))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@1 T@U) ($ly@@170 T@U) (|s#0@@82| T@U) (|a#0@@59| T@U) (|pos#0@@21| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@1) TyType) (= (type $ly@@170) LayerTypeType)) (= (type |s#0@@82|) (SeqType BoxType))) (= (type |a#0@@59|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@1 |s#0@@82| |a#0@@59| |pos#0@@21|) (and (and ($Is |s#0@@82| (TSeq Sequences._default.replace2with1$A@@1)) ($IsBox |a#0@@59| Sequences._default.replace2with1$A@@1)) (and (<= (LitInt 0) |pos#0@@21|) (< |pos#0@@21| (- (|Seq#Length| |s#0@@82|) 1)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@170 |s#0@@82| |a#0@@59| |pos#0@@21|)) (- (|Seq#Length| |s#0@@82|) 1)) (forall ((|i#10@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#10@@4|) (< |i#10@@4| |pos#0@@21|)) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@170 |s#0@@82| |a#0@@59| |pos#0@@21|) |i#10@@4|) (|Seq#Index| |s#0@@82| |i#10@@4|)))) :qid |sequence.221:18| :skolemid |9314| :pattern ( (|Seq#Index| |s#0@@82| |i#10@@4|)) :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@170 |s#0@@82| |a#0@@59| |pos#0@@21|) |i#10@@4|)) ))) (forall ((|i#11@@4| Int) ) (!  (=> true (=> (and (< |pos#0@@21| |i#11@@4|) (< |i#11@@4| (- (|Seq#Length| |s#0@@82|) 1))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@170 |s#0@@82| |a#0@@59| |pos#0@@21|) |i#11@@4|) (|Seq#Index| |s#0@@82| (+ |i#11@@4| 1))))) :qid |sequence.222:18| :skolemid |9315| :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@170 |s#0@@82| |a#0@@59| |pos#0@@21|) |i#11@@4|)) ))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@170 |s#0@@82| |a#0@@59| |pos#0@@21|) |pos#0@@21|) |a#0@@59|)) ($Is (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@170 |s#0@@82| |a#0@@59| |pos#0@@21|) (TSeq Sequences._default.replace2with1$A@@1)))) :qid |unknown.0:0| :skolemid |9316| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@170 |s#0@@82| |a#0@@59| |pos#0@@21|)) ))))
(assert (forall ((Sequences._default.replace2with1$A@@2 T@U) ($ly@@171 T@U) (|s#0@@83| T@U) (|a#0@@60| T@U) (|pos#0@@22| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@2) TyType) (= (type $ly@@171) LayerTypeType)) (= (type |s#0@@83|) (SeqType BoxType))) (= (type |a#0@@60|) BoxType)) (and ($Is |s#0@@83| (TSeq Sequences._default.replace2with1$A@@2)) ($IsBox |a#0@@60| Sequences._default.replace2with1$A@@2))) (and (=> (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@171 |s#0@@83| |a#0@@60| |pos#0@@22|) (and (<= (LitInt 0) |pos#0@@22|) (< |pos#0@@22| (- (|Seq#Length| |s#0@@83|) 1)))) (=> (and (<= (LitInt 0) |pos#0@@22|) (< |pos#0@@22| (- (|Seq#Length| |s#0@@83|) 1))) (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@171 |s#0@@83| |a#0@@60| |pos#0@@22|)))) :qid |unknown.0:0| :skolemid |9317| :pattern ( (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@171 |s#0@@83| |a#0@@60| |pos#0@@22|)) )))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@3 T@U) ($ly@@172 T@U) (|s#0@@84| T@U) (|a#0@@61| T@U) (|pos#0@@23| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@3) TyType) (= (type $ly@@172) LayerTypeType)) (= (type |s#0@@84|) (SeqType BoxType))) (= (type |a#0@@61|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@3 |s#0@@84| |a#0@@61| |pos#0@@23|) (and (and ($Is |s#0@@84| (TSeq Sequences._default.replace2with1$A@@3)) ($IsBox |a#0@@61| Sequences._default.replace2with1$A@@3)) (and (<= (LitInt 0) |pos#0@@23|) (< |pos#0@@23| (- (|Seq#Length| |s#0@@84|) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@172) |s#0@@84| |a#0@@61| |pos#0@@23|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@84| |pos#0@@23|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@61|)) (|Seq#Drop| |s#0@@84| (+ |pos#0@@23| 2))))) :qid |unknown.0:0| :skolemid |9318| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@172) |s#0@@84| |a#0@@61| |pos#0@@23|)) ))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@4 T@U) ($ly@@173 T@U) (|s#0@@85| T@U) (|a#0@@62| T@U) (|pos#0@@24| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@4) TyType) (= (type $ly@@173) LayerTypeType)) (= (type |s#0@@85|) (SeqType BoxType))) (= (type |a#0@@62|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@4 (Lit |s#0@@85|) |a#0@@62| (LitInt |pos#0@@24|)) (and (and ($Is |s#0@@85| (TSeq Sequences._default.replace2with1$A@@4)) ($IsBox |a#0@@62| Sequences._default.replace2with1$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@24|)) (< |pos#0@@24| (- (|Seq#Length| (Lit |s#0@@85|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@173) (Lit |s#0@@85|) |a#0@@62| (LitInt |pos#0@@24|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@85|) (LitInt |pos#0@@24|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@62|)) (|Seq#Drop| (Lit |s#0@@85|) (LitInt (+ |pos#0@@24| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |9319| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@173) (Lit |s#0@@85|) |a#0@@62| (LitInt |pos#0@@24|))) ))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@5 T@U) ($ly@@174 T@U) (|s#0@@86| T@U) (|a#0@@63| T@U) (|pos#0@@25| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@5) TyType) (= (type $ly@@174) LayerTypeType)) (= (type |s#0@@86|) (SeqType BoxType))) (= (type |a#0@@63|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@5 (Lit |s#0@@86|) (Lit |a#0@@63|) (LitInt |pos#0@@25|)) (and (and ($Is |s#0@@86| (TSeq Sequences._default.replace2with1$A@@5)) ($IsBox |a#0@@63| Sequences._default.replace2with1$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@25|)) (< |pos#0@@25| (- (|Seq#Length| (Lit |s#0@@86|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@174) (Lit |s#0@@86|) (Lit |a#0@@63|) (LitInt |pos#0@@25|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@86|) (LitInt |pos#0@@25|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@63|))) (|Seq#Drop| (Lit |s#0@@86|) (LitInt (+ |pos#0@@25| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |9320| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@174) (Lit |s#0@@86|) (Lit |a#0@@63|) (LitInt |pos#0@@25|))) ))))
(assert (forall ((arg0@@259 T@U) (arg1@@140 T@U) (arg2@@79 T@U) (arg3@@55 T@U) ) (! (= (type (Sequences.__default.concat arg0@@259 arg1@@140 arg2@@79 arg3@@55)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat| :pattern ( (Sequences.__default.concat arg0@@259 arg1@@140 arg2@@79 arg3@@55)) )))
(assert (forall ((Sequences._default.concat$A T@U) ($ly@@175 T@U) (|a#0@@64| T@U) (|b#0@@41| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A) TyType) (= (type $ly@@175) LayerTypeType)) (= (type |a#0@@64|) (SeqType BoxType))) (= (type |b#0@@41|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@175) |a#0@@64| |b#0@@41|) (Sequences.__default.concat Sequences._default.concat$A $ly@@175 |a#0@@64| |b#0@@41|))) :qid |unknown.0:0| :skolemid |9321| :pattern ( (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@175) |a#0@@64| |b#0@@41|)) )))
(assert (forall ((Sequences._default.concat$A@@0 T@U) ($ly@@176 T@U) (|a#0@@65| T@U) (|b#0@@42| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A@@0) TyType) (= (type $ly@@176) LayerTypeType)) (= (type |a#0@@65|) (SeqType BoxType))) (= (type |b#0@@42|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A@@0 $ly@@176 |a#0@@65| |b#0@@42|) (Sequences.__default.concat Sequences._default.concat$A@@0 $LZ |a#0@@65| |b#0@@42|))) :qid |unknown.0:0| :skolemid |9322| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@0 (AsFuelBottom $ly@@176) |a#0@@65| |b#0@@42|)) )))
(assert  (=> true (forall ((Sequences._default.concat$A@@1 T@U) ($ly@@177 T@U) (|a#0@@66| T@U) (|b#0@@43| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@1) TyType) (= (type $ly@@177) LayerTypeType)) (= (type |a#0@@66|) (SeqType BoxType))) (= (type |b#0@@43|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@1 |a#0@@66| |b#0@@43|) (and ($Is |a#0@@66| (TSeq Sequences._default.concat$A@@1)) ($Is |b#0@@43| (TSeq Sequences._default.concat$A@@1))))) (and (and (and (= (|Seq#Length| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@177 |a#0@@66| |b#0@@43|)) (+ (|Seq#Length| |a#0@@66|) (|Seq#Length| |b#0@@43|))) (forall ((|i#10@@5| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#10@@5|) (< |i#10@@5| (|Seq#Length| |a#0@@66|))) (= (|Seq#Index| |a#0@@66| |i#10@@5|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@177 |a#0@@66| |b#0@@43|) |i#10@@5|)))) :qid |sequence.230:18| :skolemid |9323| :pattern ( (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@177 |a#0@@66| |b#0@@43|) |i#10@@5|)) :pattern ( (|Seq#Index| |a#0@@66| |i#10@@5|)) ))) (forall ((|i#11@@5| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#11@@5|) (< |i#11@@5| (|Seq#Length| |b#0@@43|))) (= (|Seq#Index| |b#0@@43| |i#11@@5|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@177 |a#0@@66| |b#0@@43|) (+ (|Seq#Length| |a#0@@66|) |i#11@@5|))))) :qid |sequence.231:18| :skolemid |9324| :pattern ( (|Seq#Index| |b#0@@43| |i#11@@5|)) ))) ($Is (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@177 |a#0@@66| |b#0@@43|) (TSeq Sequences._default.concat$A@@1)))) :qid |unknown.0:0| :skolemid |9325| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@177 |a#0@@66| |b#0@@43|)) ))))
(assert (forall ((Sequences._default.concat$A@@2 T@U) ($ly@@178 T@U) (|a#0@@67| T@U) (|b#0@@44| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@2) TyType) (= (type $ly@@178) LayerTypeType)) (= (type |a#0@@67|) (SeqType BoxType))) (= (type |b#0@@44|) (SeqType BoxType))) (and ($Is |a#0@@67| (TSeq Sequences._default.concat$A@@2)) ($Is |b#0@@44| (TSeq Sequences._default.concat$A@@2)))) (and (=> (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@178 |a#0@@67| |b#0@@44|) true) (=> true (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@178 |a#0@@67| |b#0@@44|)))) :qid |unknown.0:0| :skolemid |9326| :pattern ( (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@178 |a#0@@67| |b#0@@44|)) )))
(assert  (=> true (forall ((Sequences._default.concat$A@@3 T@U) ($ly@@179 T@U) (|a#0@@68| T@U) (|b#0@@45| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@3) TyType) (= (type $ly@@179) LayerTypeType)) (= (type |a#0@@68|) (SeqType BoxType))) (= (type |b#0@@45|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@3 |a#0@@68| |b#0@@45|) (and ($Is |a#0@@68| (TSeq Sequences._default.concat$A@@3)) ($Is |b#0@@45| (TSeq Sequences._default.concat$A@@3))))) (= (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@179) |a#0@@68| |b#0@@45|) (|Seq#Append| |a#0@@68| |b#0@@45|))) :qid |unknown.0:0| :skolemid |9327| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@179) |a#0@@68| |b#0@@45|)) ))))
(assert  (=> true (forall ((Sequences._default.concat$A@@4 T@U) ($ly@@180 T@U) (|a#0@@69| T@U) (|b#0@@46| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@4) TyType) (= (type $ly@@180) LayerTypeType)) (= (type |a#0@@69|) (SeqType BoxType))) (= (type |b#0@@46|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@4 (Lit |a#0@@69|) (Lit |b#0@@46|)) (and ($Is |a#0@@69| (TSeq Sequences._default.concat$A@@4)) ($Is |b#0@@46| (TSeq Sequences._default.concat$A@@4))))) (= (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@180) (Lit |a#0@@69|) (Lit |b#0@@46|)) (|Seq#Append| |a#0@@69| |b#0@@46|))) :qid |unknown.0:0| :weight 3 :skolemid |9328| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@180) (Lit |a#0@@69|) (Lit |b#0@@46|))) ))))
(assert (forall ((arg0@@260 T@U) (arg1@@141 T@U) (arg2@@80 T@U) (arg3@@56 T@U) (arg4@@40 T@U) ) (! (= (type (Sequences.__default.concat3 arg0@@260 arg1@@141 arg2@@80 arg3@@56 arg4@@40)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat3| :pattern ( (Sequences.__default.concat3 arg0@@260 arg1@@141 arg2@@80 arg3@@56 arg4@@40)) )))
(assert (forall ((Sequences._default.concat3$A T@U) ($ly@@181 T@U) (|a#0@@70| T@U) (|b#0@@47| T@U) (|c#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A) TyType) (= (type $ly@@181) LayerTypeType)) (= (type |a#0@@70|) (SeqType BoxType))) (= (type |b#0@@47|) BoxType)) (= (type |c#0@@4|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@181) |a#0@@70| |b#0@@47| |c#0@@4|) (Sequences.__default.concat3 Sequences._default.concat3$A $ly@@181 |a#0@@70| |b#0@@47| |c#0@@4|))) :qid |unknown.0:0| :skolemid |9329| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@181) |a#0@@70| |b#0@@47| |c#0@@4|)) )))
(assert (forall ((Sequences._default.concat3$A@@0 T@U) ($ly@@182 T@U) (|a#0@@71| T@U) (|b#0@@48| T@U) (|c#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A@@0) TyType) (= (type $ly@@182) LayerTypeType)) (= (type |a#0@@71|) (SeqType BoxType))) (= (type |b#0@@48|) BoxType)) (= (type |c#0@@5|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $ly@@182 |a#0@@71| |b#0@@48| |c#0@@5|) (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $LZ |a#0@@71| |b#0@@48| |c#0@@5|))) :qid |unknown.0:0| :skolemid |9330| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@0 (AsFuelBottom $ly@@182) |a#0@@71| |b#0@@48| |c#0@@5|)) )))
(assert  (=> true (forall ((Sequences._default.concat3$A@@1 T@U) ($ly@@183 T@U) (|a#0@@72| T@U) (|b#0@@49| T@U) (|c#0@@6| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@1) TyType) (= (type $ly@@183) LayerTypeType)) (= (type |a#0@@72|) (SeqType BoxType))) (= (type |b#0@@49|) BoxType)) (= (type |c#0@@6|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@1 |a#0@@72| |b#0@@49| |c#0@@6|) (and (and ($Is |a#0@@72| (TSeq Sequences._default.concat3$A@@1)) ($IsBox |b#0@@49| Sequences._default.concat3$A@@1)) ($Is |c#0@@6| (TSeq Sequences._default.concat3$A@@1))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@183 |a#0@@72| |b#0@@49| |c#0@@6|)) (+ (+ (|Seq#Length| |a#0@@72|) (|Seq#Length| |c#0@@6|)) 1)) (forall ((|i#10@@6| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#10@@6|) (< |i#10@@6| (|Seq#Length| |a#0@@72|))) (= (|Seq#Index| |a#0@@72| |i#10@@6|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@183 |a#0@@72| |b#0@@49| |c#0@@6|) |i#10@@6|)))) :qid |sequence.238:18| :skolemid |9331| :pattern ( (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@183 |a#0@@72| |b#0@@49| |c#0@@6|) |i#10@@6|)) :pattern ( (|Seq#Index| |a#0@@72| |i#10@@6|)) ))) (= (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@183 |a#0@@72| |b#0@@49| |c#0@@6|) (|Seq#Length| |a#0@@72|)) |b#0@@49|)) (forall ((|i#11@@6| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#11@@6|) (< |i#11@@6| (|Seq#Length| |c#0@@6|))) (= (|Seq#Index| |c#0@@6| |i#11@@6|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@183 |a#0@@72| |b#0@@49| |c#0@@6|) (+ (+ (|Seq#Length| |a#0@@72|) 1) |i#11@@6|))))) :qid |sequence.240:18| :skolemid |9332| :pattern ( (|Seq#Index| |c#0@@6| |i#11@@6|)) ))) ($Is (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@183 |a#0@@72| |b#0@@49| |c#0@@6|) (TSeq Sequences._default.concat3$A@@1)))) :qid |unknown.0:0| :skolemid |9333| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@183 |a#0@@72| |b#0@@49| |c#0@@6|)) ))))
(assert (forall ((Sequences._default.concat3$A@@2 T@U) ($ly@@184 T@U) (|a#0@@73| T@U) (|b#0@@50| T@U) (|c#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@2) TyType) (= (type $ly@@184) LayerTypeType)) (= (type |a#0@@73|) (SeqType BoxType))) (= (type |b#0@@50|) BoxType)) (= (type |c#0@@7|) (SeqType BoxType))) (and (and ($Is |a#0@@73| (TSeq Sequences._default.concat3$A@@2)) ($IsBox |b#0@@50| Sequences._default.concat3$A@@2)) ($Is |c#0@@7| (TSeq Sequences._default.concat3$A@@2)))) (and (=> (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@184 |a#0@@73| |b#0@@50| |c#0@@7|) true) (=> true (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@184 |a#0@@73| |b#0@@50| |c#0@@7|)))) :qid |unknown.0:0| :skolemid |9334| :pattern ( (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@184 |a#0@@73| |b#0@@50| |c#0@@7|)) )))
(assert  (=> true (forall ((Sequences._default.concat3$A@@3 T@U) ($ly@@185 T@U) (|a#0@@74| T@U) (|b#0@@51| T@U) (|c#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@3) TyType) (= (type $ly@@185) LayerTypeType)) (= (type |a#0@@74|) (SeqType BoxType))) (= (type |b#0@@51|) BoxType)) (= (type |c#0@@8|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@3 |a#0@@74| |b#0@@51| |c#0@@8|) (and (and ($Is |a#0@@74| (TSeq Sequences._default.concat3$A@@3)) ($IsBox |b#0@@51| Sequences._default.concat3$A@@3)) ($Is |c#0@@8| (TSeq Sequences._default.concat3$A@@3))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@185) |a#0@@74| |b#0@@51| |c#0@@8|) (|Seq#Append| (|Seq#Append| |a#0@@74| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@51|)) |c#0@@8|))) :qid |unknown.0:0| :skolemid |9335| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@185) |a#0@@74| |b#0@@51| |c#0@@8|)) ))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@4 T@U) ($ly@@186 T@U) (|a#0@@75| T@U) (|b#0@@52| T@U) (|c#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@4) TyType) (= (type $ly@@186) LayerTypeType)) (= (type |a#0@@75|) (SeqType BoxType))) (= (type |b#0@@52|) BoxType)) (= (type |c#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@4 (Lit |a#0@@75|) |b#0@@52| (Lit |c#0@@9|)) (and (and ($Is |a#0@@75| (TSeq Sequences._default.concat3$A@@4)) ($IsBox |b#0@@52| Sequences._default.concat3$A@@4)) ($Is |c#0@@9| (TSeq Sequences._default.concat3$A@@4))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@186) (Lit |a#0@@75|) |b#0@@52| (Lit |c#0@@9|)) (|Seq#Append| (|Seq#Append| |a#0@@75| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@52|)) |c#0@@9|))) :qid |unknown.0:0| :weight 3 :skolemid |9336| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@186) (Lit |a#0@@75|) |b#0@@52| (Lit |c#0@@9|))) ))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@5 T@U) ($ly@@187 T@U) (|a#0@@76| T@U) (|b#0@@53| T@U) (|c#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@5) TyType) (= (type $ly@@187) LayerTypeType)) (= (type |a#0@@76|) (SeqType BoxType))) (= (type |b#0@@53|) BoxType)) (= (type |c#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@5 (Lit |a#0@@76|) (Lit |b#0@@53|) (Lit |c#0@@10|)) (and (and ($Is |a#0@@76| (TSeq Sequences._default.concat3$A@@5)) ($IsBox |b#0@@53| Sequences._default.concat3$A@@5)) ($Is |c#0@@10| (TSeq Sequences._default.concat3$A@@5))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@187) (Lit |a#0@@76|) (Lit |b#0@@53|) (Lit |c#0@@10|)) (|Seq#Append| (|Seq#Append| |a#0@@76| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |b#0@@53|))) |c#0@@10|))) :qid |unknown.0:0| :weight 3 :skolemid |9337| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@187) (Lit |a#0@@76|) (Lit |b#0@@53|) (Lit |c#0@@10|))) ))))
(assert (forall ((arg0@@261 T@U) (arg1@@142 T@U) (arg2@@81 T@U) ) (! (= (type (Sequences.__default.concatSeq arg0@@261 arg1@@142 arg2@@81)) (SeqType BoxType)) :qid |funType:Sequences.__default.concatSeq| :pattern ( (Sequences.__default.concatSeq arg0@@261 arg1@@142 arg2@@81)) )))
(assert (forall ((Sequences._default.concatSeq$A T@U) ($ly@@188 T@U) (|a#0@@77| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A) TyType) (= (type $ly@@188) LayerTypeType)) (= (type |a#0@@77|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@188) |a#0@@77|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A $ly@@188 |a#0@@77|))) :qid |unknown.0:0| :skolemid |9338| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@188) |a#0@@77|)) )))
(assert (forall ((Sequences._default.concatSeq$A@@0 T@U) ($ly@@189 T@U) (|a#0@@78| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A@@0) TyType) (= (type $ly@@189) LayerTypeType)) (= (type |a#0@@78|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $ly@@189 |a#0@@78|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $LZ |a#0@@78|))) :qid |unknown.0:0| :skolemid |9339| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 (AsFuelBottom $ly@@189) |a#0@@78|)) )))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@1 T@U) ($ly@@190 T@U) (|a#0@@79| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@1) TyType) (= (type $ly@@190) LayerTypeType)) (= (type |a#0@@79|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@1 |a#0@@79|) ($Is |a#0@@79| (TSeq (TSeq Sequences._default.concatSeq$A@@1))))) ($Is (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@190 |a#0@@79|) (TSeq Sequences._default.concatSeq$A@@1))) :qid |unknown.0:0| :skolemid |9340| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@190 |a#0@@79|)) ))))
(assert (forall ((Sequences._default.concatSeq$A@@2 T@U) ($ly@@191 T@U) (|a#0@@80| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@2) TyType) (= (type $ly@@191) LayerTypeType)) (= (type |a#0@@80|) (SeqType BoxType))) ($Is |a#0@@80| (TSeq (TSeq Sequences._default.concatSeq$A@@2)))) (and (=> (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@191 |a#0@@80|) true) (=> true (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@191 |a#0@@80|)))) :qid |unknown.0:0| :skolemid |9341| :pattern ( (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@191 |a#0@@80|)) )))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@3 T@U) ($ly@@192 T@U) (|a#0@@81| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@3) TyType) (= (type $ly@@192) LayerTypeType)) (= (type |a#0@@81|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 |a#0@@81|) ($Is |a#0@@81| (TSeq (TSeq Sequences._default.concatSeq$A@@3))))) (and (=> (not (= (|Seq#Length| |a#0@@81|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@81|) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@81|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@81|))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@192) |a#0@@81|) (ite (= (|Seq#Length| |a#0@@81|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 $ly@@192 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@81|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@3) |a#0@@81|))))))) :qid |unknown.0:0| :skolemid |9342| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@192) |a#0@@81|)) ))))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@4 T@U) ($ly@@193 T@U) (|a#0@@82| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@4) TyType) (= (type $ly@@193) LayerTypeType)) (= (type |a#0@@82|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit |a#0@@82|)) ($Is |a#0@@82| (TSeq (TSeq Sequences._default.concatSeq$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@82|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@82|)) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@82|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@82|)))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@193) (Lit |a#0@@82|)) (ite (= (|Seq#Length| (Lit |a#0@@82|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@193) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@82|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@82|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |9343| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@193) (Lit |a#0@@82|))) ))))
(assert (forall ((Sequences._default.IsPrefix$A T@U) ($ly@@194 T@U) (|a#0@@83| T@U) (|b#0@@54| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A) TyType) (= (type $ly@@194) LayerTypeType)) (= (type |a#0@@83|) (SeqType BoxType))) (= (type |b#0@@54|) (SeqType BoxType))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@194) |a#0@@83| |b#0@@54|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A $ly@@194 |a#0@@83| |b#0@@54|)) (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A $ly@@194 |a#0@@83| |b#0@@54|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@194) |a#0@@83| |b#0@@54|)))) :qid |unknown.0:0| :skolemid |9344| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@194) |a#0@@83| |b#0@@54|)) )))
(assert (forall ((Sequences._default.IsPrefix$A@@0 T@U) ($ly@@195 T@U) (|a#0@@84| T@U) (|b#0@@55| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A@@0) TyType) (= (type $ly@@195) LayerTypeType)) (= (type |a#0@@84|) (SeqType BoxType))) (= (type |b#0@@55|) (SeqType BoxType))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $ly@@195 |a#0@@84| |b#0@@55|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $LZ |a#0@@84| |b#0@@55|)) (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $LZ |a#0@@84| |b#0@@55|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $ly@@195 |a#0@@84| |b#0@@55|)))) :qid |unknown.0:0| :skolemid |9345| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 (AsFuelBottom $ly@@195) |a#0@@84| |b#0@@55|)) )))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@1 T@U) ($ly@@196 T@U) (|a#0@@85| T@U) (|b#0@@56| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.IsPrefix$A@@1) TyType) (= (type $ly@@196) LayerTypeType)) (= (type |a#0@@85|) (SeqType BoxType))) (= (type |b#0@@56|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@1 |a#0@@85| |b#0@@56|) (and ($Is |a#0@@85| (TSeq Sequences._default.IsPrefix$A@@1)) ($Is |b#0@@56| (TSeq Sequences._default.IsPrefix$A@@1))))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@196 |a#0@@85| |b#0@@56|)) (<= (|Seq#Length| |a#0@@85|) (|Seq#Length| |b#0@@56|))) :qid |unknown.0:0| :skolemid |9346| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@196 |a#0@@85| |b#0@@56|)) ))))
(assert (forall ((Sequences._default.IsPrefix$A@@2 T@U) ($ly@@197 T@U) (|a#0@@86| T@U) (|b#0@@57| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@2) TyType) (= (type $ly@@197) LayerTypeType)) (= (type |a#0@@86|) (SeqType BoxType))) (= (type |b#0@@57|) (SeqType BoxType))) (and ($Is |a#0@@86| (TSeq Sequences._default.IsPrefix$A@@2)) ($Is |b#0@@57| (TSeq Sequences._default.IsPrefix$A@@2)))) (and (=> (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@197 |a#0@@86| |b#0@@57|) true) (=> true (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@197 |a#0@@86| |b#0@@57|)))) :qid |unknown.0:0| :skolemid |9347| :pattern ( (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@197 |a#0@@86| |b#0@@57|)) )))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@3 T@U) ($ly@@198 T@U) (|a#0@@87| T@U) (|b#0@@58| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@3) TyType) (= (type $ly@@198) LayerTypeType)) (= (type |a#0@@87|) (SeqType BoxType))) (= (type |b#0@@58|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@3 |a#0@@87| |b#0@@58|) (and ($Is |a#0@@87| (TSeq Sequences._default.IsPrefix$A@@3)) ($Is |b#0@@58| (TSeq Sequences._default.IsPrefix$A@@3))))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@198) |a#0@@87| |b#0@@58|) (and (<= (|Seq#Length| |a#0@@87|) (|Seq#Length| |b#0@@58|)) (|Seq#Equal| |a#0@@87| (|Seq#Take| |b#0@@58| (|Seq#Length| |a#0@@87|))))) (=> (and (<= (|Seq#Length| |a#0@@87|) (|Seq#Length| |b#0@@58|)) (|Seq#Equal| |a#0@@87| (|Seq#Take| |b#0@@58| (|Seq#Length| |a#0@@87|)))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@198) |a#0@@87| |b#0@@58|)))) :qid |unknown.0:0| :skolemid |9348| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@198) |a#0@@87| |b#0@@58|)) ))))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@4 T@U) ($ly@@199 T@U) (|a#0@@88| T@U) (|b#0@@59| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@4) TyType) (= (type $ly@@199) LayerTypeType)) (= (type |a#0@@88|) (SeqType BoxType))) (= (type |b#0@@59|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@4 (Lit |a#0@@88|) (Lit |b#0@@59|)) (and ($Is |a#0@@88| (TSeq Sequences._default.IsPrefix$A@@4)) ($Is |b#0@@59| (TSeq Sequences._default.IsPrefix$A@@4))))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@199) (Lit |a#0@@88|) (Lit |b#0@@59|)) (and (<= (|Seq#Length| (Lit |a#0@@88|)) (|Seq#Length| (Lit |b#0@@59|))) (|Seq#Equal| |a#0@@88| (|Seq#Take| (Lit |b#0@@59|) (|Seq#Length| (Lit |a#0@@88|)))))) (=> (and (<= (|Seq#Length| (Lit |a#0@@88|)) (|Seq#Length| (Lit |b#0@@59|))) (|Seq#Equal| |a#0@@88| (|Seq#Take| (Lit |b#0@@59|) (|Seq#Length| (Lit |a#0@@88|))))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@199) (Lit |a#0@@88|) (Lit |b#0@@59|))))) :qid |unknown.0:0| :weight 3 :skolemid |9349| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@199) (Lit |a#0@@88|) (Lit |b#0@@59|))) ))))
(assert (forall ((Sequences._default.IsSuffix$A T@U) ($ly@@200 T@U) (|a#0@@89| T@U) (|b#0@@60| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A) TyType) (= (type $ly@@200) LayerTypeType)) (= (type |a#0@@89|) (SeqType BoxType))) (= (type |b#0@@60|) (SeqType BoxType))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@200) |a#0@@89| |b#0@@60|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A $ly@@200 |a#0@@89| |b#0@@60|)) (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A $ly@@200 |a#0@@89| |b#0@@60|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@200) |a#0@@89| |b#0@@60|)))) :qid |unknown.0:0| :skolemid |9350| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@200) |a#0@@89| |b#0@@60|)) )))
(assert (forall ((Sequences._default.IsSuffix$A@@0 T@U) ($ly@@201 T@U) (|a#0@@90| T@U) (|b#0@@61| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A@@0) TyType) (= (type $ly@@201) LayerTypeType)) (= (type |a#0@@90|) (SeqType BoxType))) (= (type |b#0@@61|) (SeqType BoxType))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $ly@@201 |a#0@@90| |b#0@@61|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $LZ |a#0@@90| |b#0@@61|)) (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $LZ |a#0@@90| |b#0@@61|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $ly@@201 |a#0@@90| |b#0@@61|)))) :qid |unknown.0:0| :skolemid |9351| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 (AsFuelBottom $ly@@201) |a#0@@90| |b#0@@61|)) )))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@1 T@U) ($ly@@202 T@U) (|a#0@@91| T@U) (|b#0@@62| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@1) TyType) (= (type $ly@@202) LayerTypeType)) (= (type |a#0@@91|) (SeqType BoxType))) (= (type |b#0@@62|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@1 |a#0@@91| |b#0@@62|) (and ($Is |a#0@@91| (TSeq Sequences._default.IsSuffix$A@@1)) ($Is |b#0@@62| (TSeq Sequences._default.IsSuffix$A@@1))))) true) :qid |unknown.0:0| :skolemid |9352| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@1 $ly@@202 |a#0@@91| |b#0@@62|)) ))))
(assert (forall ((Sequences._default.IsSuffix$A@@2 T@U) ($ly@@203 T@U) (|a#0@@92| T@U) (|b#0@@63| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@2) TyType) (= (type $ly@@203) LayerTypeType)) (= (type |a#0@@92|) (SeqType BoxType))) (= (type |b#0@@63|) (SeqType BoxType))) (and ($Is |a#0@@92| (TSeq Sequences._default.IsSuffix$A@@2)) ($Is |b#0@@63| (TSeq Sequences._default.IsSuffix$A@@2)))) (and (=> (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@203 |a#0@@92| |b#0@@63|) true) (=> true (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@203 |a#0@@92| |b#0@@63|)))) :qid |unknown.0:0| :skolemid |9353| :pattern ( (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@203 |a#0@@92| |b#0@@63|)) )))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@3 T@U) ($ly@@204 T@U) (|a#0@@93| T@U) (|b#0@@64| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@3) TyType) (= (type $ly@@204) LayerTypeType)) (= (type |a#0@@93|) (SeqType BoxType))) (= (type |b#0@@64|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@3 |a#0@@93| |b#0@@64|) (and ($Is |a#0@@93| (TSeq Sequences._default.IsSuffix$A@@3)) ($Is |b#0@@64| (TSeq Sequences._default.IsSuffix$A@@3))))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@204) |a#0@@93| |b#0@@64|) (and (<= (|Seq#Length| |a#0@@93|) (|Seq#Length| |b#0@@64|)) (|Seq#Equal| |a#0@@93| (|Seq#Drop| |b#0@@64| (- (|Seq#Length| |b#0@@64|) (|Seq#Length| |a#0@@93|)))))) (=> (and (<= (|Seq#Length| |a#0@@93|) (|Seq#Length| |b#0@@64|)) (|Seq#Equal| |a#0@@93| (|Seq#Drop| |b#0@@64| (- (|Seq#Length| |b#0@@64|) (|Seq#Length| |a#0@@93|))))) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@204) |a#0@@93| |b#0@@64|)))) :qid |unknown.0:0| :skolemid |9354| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@204) |a#0@@93| |b#0@@64|)) ))))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@4 T@U) ($ly@@205 T@U) (|a#0@@94| T@U) (|b#0@@65| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@4) TyType) (= (type $ly@@205) LayerTypeType)) (= (type |a#0@@94|) (SeqType BoxType))) (= (type |b#0@@65|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@4 (Lit |a#0@@94|) (Lit |b#0@@65|)) (and ($Is |a#0@@94| (TSeq Sequences._default.IsSuffix$A@@4)) ($Is |b#0@@65| (TSeq Sequences._default.IsSuffix$A@@4))))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@205) (Lit |a#0@@94|) (Lit |b#0@@65|)) (and (<= (|Seq#Length| (Lit |a#0@@94|)) (|Seq#Length| (Lit |b#0@@65|))) (|Seq#Equal| |a#0@@94| (|Seq#Drop| (Lit |b#0@@65|) (- (|Seq#Length| (Lit |b#0@@65|)) (|Seq#Length| (Lit |a#0@@94|))))))) (=> (and (<= (|Seq#Length| (Lit |a#0@@94|)) (|Seq#Length| (Lit |b#0@@65|))) (|Seq#Equal| |a#0@@94| (|Seq#Drop| (Lit |b#0@@65|) (- (|Seq#Length| (Lit |b#0@@65|)) (|Seq#Length| (Lit |a#0@@94|)))))) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@205) (Lit |a#0@@94|) (Lit |b#0@@65|))))) :qid |unknown.0:0| :weight 3 :skolemid |9355| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@205) (Lit |a#0@@94|) (Lit |b#0@@65|))) ))))
(assert (forall ((arg0@@262 T@U) (arg1@@143 T@U) (arg2@@82 T@U) (arg3@@57 T@U) (arg4@@41 Int) ) (! (= (type (Sequences.__default.SeqIndexIterate arg0@@262 arg1@@143 arg2@@82 arg3@@57 arg4@@41)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndexIterate| :pattern ( (Sequences.__default.SeqIndexIterate arg0@@262 arg1@@143 arg2@@82 arg3@@57 arg4@@41)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A T@U) ($ly@@206 T@U) (|run#0@@94| T@U) (|needle#0@@23| T@U) (|i#0@@40| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A) TyType) (= (type $ly@@206) LayerTypeType)) (= (type |run#0@@94|) (SeqType BoxType))) (= (type |needle#0@@23|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@206) |run#0@@94| |needle#0@@23| |i#0@@40|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A $ly@@206 |run#0@@94| |needle#0@@23| |i#0@@40|))) :qid |unknown.0:0| :skolemid |9356| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@206) |run#0@@94| |needle#0@@23| |i#0@@40|)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@0 T@U) ($ly@@207 T@U) (|run#0@@95| T@U) (|needle#0@@24| T@U) (|i#0@@41| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@0) TyType) (= (type $ly@@207) LayerTypeType)) (= (type |run#0@@95|) (SeqType BoxType))) (= (type |needle#0@@24|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $ly@@207 |run#0@@95| |needle#0@@24| |i#0@@41|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $LZ |run#0@@95| |needle#0@@24| |i#0@@41|))) :qid |unknown.0:0| :skolemid |9357| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 (AsFuelBottom $ly@@207) |run#0@@95| |needle#0@@24| |i#0@@41|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@1 T@U) ($ly@@208 T@U) (|run#0@@96| T@U) (|needle#0@@25| T@U) (|i#0@@42| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@1) TyType) (= (type $ly@@208) LayerTypeType)) (= (type |run#0@@96|) (SeqType BoxType))) (= (type |needle#0@@25|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@1 |run#0@@96| |needle#0@@25| |i#0@@42|) (and (and ($Is |run#0@@96| (TSeq Sequences._default.SeqIndexIterate$A@@1)) ($IsBox |needle#0@@25| Sequences._default.SeqIndexIterate$A@@1)) (and (<= (LitInt 0) |i#0@@42|) (<= |i#0@@42| (|Seq#Length| |run#0@@96|)))))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@208 |run#0@@96| |needle#0@@25| |i#0@@42|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@208 |run#0@@96| |needle#0@@25| |i#0@@42|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@208 |run#0@@96| |needle#0@@25| |i#0@@42|)))) (|Seq#Length| |run#0@@96|))) (= (|Seq#Index| |run#0@@96| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@208 |run#0@@96| |needle#0@@25| |i#0@@42|))))) |needle#0@@25|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@208 |run#0@@96| |needle#0@@25| |i#0@@42|)) (forall ((|j#5| Int) ) (!  (=> (and (<= |i#0@@42| |j#5|) (< |j#5| (|Seq#Length| |run#0@@96|))) (not (= (|Seq#Index| |run#0@@96| |j#5|) |needle#0@@25|))) :qid |sequence.340:32| :skolemid |9358| :pattern ( (|Seq#Index| |run#0@@96| |j#5|)) )))) ($Is (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@208 |run#0@@96| |needle#0@@25| |i#0@@42|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |9359| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@208 |run#0@@96| |needle#0@@25| |i#0@@42|)) ))))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@2 T@U) ($ly@@209 T@U) (|run#0@@97| T@U) (|needle#0@@26| T@U) (|i#0@@43| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@2) TyType) (= (type $ly@@209) LayerTypeType)) (= (type |run#0@@97|) (SeqType BoxType))) (= (type |needle#0@@26|) BoxType)) (and ($Is |run#0@@97| (TSeq Sequences._default.SeqIndexIterate$A@@2)) ($IsBox |needle#0@@26| Sequences._default.SeqIndexIterate$A@@2))) (and (=> (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@209 |run#0@@97| |needle#0@@26| |i#0@@43|) (and (<= (LitInt 0) |i#0@@43|) (<= |i#0@@43| (|Seq#Length| |run#0@@97|)))) (=> (and (<= (LitInt 0) |i#0@@43|) (<= |i#0@@43| (|Seq#Length| |run#0@@97|))) (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@209 |run#0@@97| |needle#0@@26| |i#0@@43|)))) :qid |unknown.0:0| :skolemid |9360| :pattern ( (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@209 |run#0@@97| |needle#0@@26| |i#0@@43|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@3 T@U) ($ly@@210 T@U) (|run#0@@98| T@U) (|needle#0@@27| T@U) (|i#0@@44| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@3) TyType) (= (type $ly@@210) LayerTypeType)) (= (type |run#0@@98|) (SeqType BoxType))) (= (type |needle#0@@27|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@98| |needle#0@@27| |i#0@@44|) (and (and ($Is |run#0@@98| (TSeq Sequences._default.SeqIndexIterate$A@@3)) ($IsBox |needle#0@@27| Sequences._default.SeqIndexIterate$A@@3)) (and (<= (LitInt 0) |i#0@@44|) (<= |i#0@@44| (|Seq#Length| |run#0@@98|)))))) (and (=> (not (= |i#0@@44| (|Seq#Length| |run#0@@98|))) (=> (not (= (|Seq#Index| |run#0@@98| |i#0@@44|) |needle#0@@27|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@98| |needle#0@@27| (+ |i#0@@44| 1)))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@210) |run#0@@98| |needle#0@@27| |i#0@@44|) (ite (= |i#0@@44| (|Seq#Length| |run#0@@98|)) |#Options.Option.None| (ite (= (|Seq#Index| |run#0@@98| |i#0@@44|) |needle#0@@27|) (|#Options.Option.Some| ($Box (int_2_U |i#0@@44|))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 $ly@@210 |run#0@@98| |needle#0@@27| (+ |i#0@@44| 1))))))) :qid |unknown.0:0| :skolemid |9361| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@210) |run#0@@98| |needle#0@@27| |i#0@@44|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@4 T@U) ($ly@@211 T@U) (|run#0@@99| T@U) (|needle#0@@28| T@U) (|i#0@@45| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@4) TyType) (= (type $ly@@211) LayerTypeType)) (= (type |run#0@@99|) (SeqType BoxType))) (= (type |needle#0@@28|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@99|) |needle#0@@28| (LitInt |i#0@@45|)) (and (and ($Is |run#0@@99| (TSeq Sequences._default.SeqIndexIterate$A@@4)) ($IsBox |needle#0@@28| Sequences._default.SeqIndexIterate$A@@4)) (and (<= (LitInt 0) (LitInt |i#0@@45|)) (<= (LitInt |i#0@@45|) (|Seq#Length| (Lit |run#0@@99|))))))) (and (=> (not (= (LitInt |i#0@@45|) (|Seq#Length| (Lit |run#0@@99|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@99|) (LitInt |i#0@@45|)) |needle#0@@28|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@99|) |needle#0@@28| (LitInt (+ |i#0@@45| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@211) (Lit |run#0@@99|) |needle#0@@28| (LitInt |i#0@@45|)) (ite (= (LitInt |i#0@@45|) (|Seq#Length| (Lit |run#0@@99|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@99|) (LitInt |i#0@@45|)) |needle#0@@28|) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@45|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@211) (Lit |run#0@@99|) |needle#0@@28| (LitInt (+ |i#0@@45| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |9362| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@211) (Lit |run#0@@99|) |needle#0@@28| (LitInt |i#0@@45|))) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@5 T@U) ($ly@@212 T@U) (|run#0@@100| T@U) (|needle#0@@29| T@U) (|i#0@@46| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@5) TyType) (= (type $ly@@212) LayerTypeType)) (= (type |run#0@@100|) (SeqType BoxType))) (= (type |needle#0@@29|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@100|) (Lit |needle#0@@29|) (LitInt |i#0@@46|)) (and (and ($Is |run#0@@100| (TSeq Sequences._default.SeqIndexIterate$A@@5)) ($IsBox |needle#0@@29| Sequences._default.SeqIndexIterate$A@@5)) (and (<= (LitInt 0) (LitInt |i#0@@46|)) (<= (LitInt |i#0@@46|) (|Seq#Length| (Lit |run#0@@100|))))))) (and (=> (not (= (LitInt |i#0@@46|) (|Seq#Length| (Lit |run#0@@100|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@100|) (LitInt |i#0@@46|)) (Lit |needle#0@@29|))) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@100|) (Lit |needle#0@@29|) (LitInt (+ |i#0@@46| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@212) (Lit |run#0@@100|) (Lit |needle#0@@29|) (LitInt |i#0@@46|)) (ite (= (LitInt |i#0@@46|) (|Seq#Length| (Lit |run#0@@100|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@100|) (LitInt |i#0@@46|)) (Lit |needle#0@@29|)) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@46|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@212) (Lit |run#0@@100|) (Lit |needle#0@@29|) (LitInt (+ |i#0@@46| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |9363| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@212) (Lit |run#0@@100|) (Lit |needle#0@@29|) (LitInt |i#0@@46|))) ))))
(assert (forall ((arg0@@263 T@U) (arg1@@144 T@U) (arg2@@83 T@U) (arg3@@58 T@U) ) (! (= (type (Sequences.__default.SeqIndex arg0@@263 arg1@@144 arg2@@83 arg3@@58)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndex| :pattern ( (Sequences.__default.SeqIndex arg0@@263 arg1@@144 arg2@@83 arg3@@58)) )))
(assert (forall ((Sequences._default.SeqIndex$A T@U) ($ly@@213 T@U) (|run#0@@101| T@U) (|needle#0@@30| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A) TyType) (= (type $ly@@213) LayerTypeType)) (= (type |run#0@@101|) (SeqType BoxType))) (= (type |needle#0@@30|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@213) |run#0@@101| |needle#0@@30|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A $ly@@213 |run#0@@101| |needle#0@@30|))) :qid |unknown.0:0| :skolemid |9364| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@213) |run#0@@101| |needle#0@@30|)) )))
(assert (forall ((Sequences._default.SeqIndex$A@@0 T@U) ($ly@@214 T@U) (|run#0@@102| T@U) (|needle#0@@31| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A@@0) TyType) (= (type $ly@@214) LayerTypeType)) (= (type |run#0@@102|) (SeqType BoxType))) (= (type |needle#0@@31|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $ly@@214 |run#0@@102| |needle#0@@31|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $LZ |run#0@@102| |needle#0@@31|))) :qid |unknown.0:0| :skolemid |9365| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 (AsFuelBottom $ly@@214) |run#0@@102| |needle#0@@31|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@1 T@U) ($ly@@215 T@U) (|run#0@@103| T@U) (|needle#0@@32| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@1) TyType) (= (type $ly@@215) LayerTypeType)) (= (type |run#0@@103|) (SeqType BoxType))) (= (type |needle#0@@32|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@1 |run#0@@103| |needle#0@@32|) (and ($Is |run#0@@103| (TSeq Sequences._default.SeqIndex$A@@1)) ($IsBox |needle#0@@32| Sequences._default.SeqIndex$A@@1)))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@215 |run#0@@103| |needle#0@@32|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@215 |run#0@@103| |needle#0@@32|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@215 |run#0@@103| |needle#0@@32|)))) (|Seq#Length| |run#0@@103|))) (= (|Seq#Index| |run#0@@103| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@215 |run#0@@103| |needle#0@@32|))))) |needle#0@@32|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@215 |run#0@@103| |needle#0@@32|)) (forall ((|i#5@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@0|) (< |i#5@@0| (|Seq#Length| |run#0@@103|))) (not (= (|Seq#Index| |run#0@@103| |i#5@@0|) |needle#0@@32|))) :qid |sequence.350:32| :skolemid |9366| :pattern ( (|Seq#Index| |run#0@@103| |i#5@@0|)) )))) ($Is (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@215 |run#0@@103| |needle#0@@32|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |9367| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@215 |run#0@@103| |needle#0@@32|)) ))))
(assert (forall ((Sequences._default.SeqIndex$A@@2 T@U) ($ly@@216 T@U) (|run#0@@104| T@U) (|needle#0@@33| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@2) TyType) (= (type $ly@@216) LayerTypeType)) (= (type |run#0@@104|) (SeqType BoxType))) (= (type |needle#0@@33|) BoxType)) (and ($Is |run#0@@104| (TSeq Sequences._default.SeqIndex$A@@2)) ($IsBox |needle#0@@33| Sequences._default.SeqIndex$A@@2))) (and (=> (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@216 |run#0@@104| |needle#0@@33|) true) (=> true (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@216 |run#0@@104| |needle#0@@33|)))) :qid |unknown.0:0| :skolemid |9368| :pattern ( (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@216 |run#0@@104| |needle#0@@33|)) )))
(assert (= (type StartFuel_Sequences._default.SeqIndexIterate) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@3 T@U) ($ly@@217 T@U) (|run#0@@105| T@U) (|needle#0@@34| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@3) TyType) (= (type $ly@@217) LayerTypeType)) (= (type |run#0@@105|) (SeqType BoxType))) (= (type |needle#0@@34|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@105| |needle#0@@34|) (and ($Is |run#0@@105| (TSeq Sequences._default.SeqIndex$A@@3)) ($IsBox |needle#0@@34| Sequences._default.SeqIndex$A@@3)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@105| |needle#0@@34| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@217) |run#0@@105| |needle#0@@34|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@3 StartFuel_Sequences._default.SeqIndexIterate |run#0@@105| |needle#0@@34| (LitInt 0))))) :qid |unknown.0:0| :skolemid |9369| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@217) |run#0@@105| |needle#0@@34|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@4 T@U) ($ly@@218 T@U) (|run#0@@106| T@U) (|needle#0@@35| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@4) TyType) (= (type $ly@@218) LayerTypeType)) (= (type |run#0@@106|) (SeqType BoxType))) (= (type |needle#0@@35|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@106|) |needle#0@@35|) (and ($Is |run#0@@106| (TSeq Sequences._default.SeqIndex$A@@4)) ($IsBox |needle#0@@35| Sequences._default.SeqIndex$A@@4)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@106|) |needle#0@@35| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@218) (Lit |run#0@@106|) |needle#0@@35|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@4 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@106|) |needle#0@@35| (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |9370| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@218) (Lit |run#0@@106|) |needle#0@@35|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@5 T@U) ($ly@@219 T@U) (|run#0@@107| T@U) (|needle#0@@36| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@5) TyType) (= (type $ly@@219) LayerTypeType)) (= (type |run#0@@107|) (SeqType BoxType))) (= (type |needle#0@@36|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@107|) (Lit |needle#0@@36|)) (and ($Is |run#0@@107| (TSeq Sequences._default.SeqIndex$A@@5)) ($IsBox |needle#0@@36| Sequences._default.SeqIndex$A@@5)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@107|) (Lit |needle#0@@36|) (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@219) (Lit |run#0@@107|) (Lit |needle#0@@36|)) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@5 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@107|) (Lit |needle#0@@36|) (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |9371| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@219) (Lit |run#0@@107|) (Lit |needle#0@@36|))) ))))
(assert (forall ((arg0@@264 T@U) (arg1@@145 T@U) (arg2@@84 Int) (arg3@@59 T@U) ) (! (= (type (Sequences.__default.SeqOfLength arg0@@264 arg1@@145 arg2@@84 arg3@@59)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqOfLength| :pattern ( (Sequences.__default.SeqOfLength arg0@@264 arg1@@145 arg2@@84 arg3@@59)) )))
(assert (forall ((Sequences._default.SeqOfLength$V T@U) ($ly@@220 T@U) (|length#0| Int) (|v#0| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V) TyType) (= (type $ly@@220) LayerTypeType)) (= (type |v#0|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@220) |length#0| |v#0|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V $ly@@220 |length#0| |v#0|))) :qid |unknown.0:0| :skolemid |9372| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@220) |length#0| |v#0|)) )))
(assert (forall ((Sequences._default.SeqOfLength$V@@0 T@U) ($ly@@221 T@U) (|length#0@@0| Int) (|v#0@@0| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V@@0) TyType) (= (type $ly@@221) LayerTypeType)) (= (type |v#0@@0|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $ly@@221 |length#0@@0| |v#0@@0|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $LZ |length#0@@0| |v#0@@0|))) :qid |unknown.0:0| :skolemid |9373| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 (AsFuelBottom $ly@@221) |length#0@@0| |v#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@1 T@U) ($ly@@222 T@U) (|length#0@@1| Int) (|v#0@@1| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@1) TyType) (= (type $ly@@222) LayerTypeType)) (= (type |v#0@@1|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@1 |length#0@@1| |v#0@@1|) (and (<= (LitInt 0) |length#0@@1|) ($IsBox |v#0@@1| Sequences._default.SeqOfLength$V@@1)))) (and (and (= (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@222 |length#0@@1| |v#0@@1|)) |length#0@@1|) (forall ((|i#5@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@1|) (< |i#5@@1| (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@222 |length#0@@1| |v#0@@1|)))) (= (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@222 |length#0@@1| |v#0@@1|) |i#5@@1|) |v#0@@1|)) :qid |sequence.357:18| :skolemid |9374| :pattern ( (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@222 |length#0@@1| |v#0@@1|) |i#5@@1|)) ))) ($Is (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@222 |length#0@@1| |v#0@@1|) (TSeq Sequences._default.SeqOfLength$V@@1)))) :qid |unknown.0:0| :skolemid |9375| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@222 |length#0@@1| |v#0@@1|)) ))))
(assert (forall ((Sequences._default.SeqOfLength$V@@2 T@U) ($ly@@223 T@U) (|length#0@@2| Int) (|v#0@@2| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@2) TyType) (= (type $ly@@223) LayerTypeType)) (= (type |v#0@@2|) BoxType)) (and (<= (LitInt 0) |length#0@@2|) ($IsBox |v#0@@2| Sequences._default.SeqOfLength$V@@2))) (and (=> (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@223 |length#0@@2| |v#0@@2|) true) (=> true (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@223 |length#0@@2| |v#0@@2|)))) :qid |unknown.0:0| :skolemid |9376| :pattern ( (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@223 |length#0@@2| |v#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@3 T@U) ($ly@@224 T@U) (|length#0@@3| Int) (|v#0@@3| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@3) TyType) (= (type $ly@@224) LayerTypeType)) (= (type |v#0@@3|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 |length#0@@3| |v#0@@3|) (and (<= (LitInt 0) |length#0@@3|) ($IsBox |v#0@@3| Sequences._default.SeqOfLength$V@@3)))) (and (=> (not (= |length#0@@3| (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 (- |length#0@@3| 1) |v#0@@3|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@224) |length#0@@3| |v#0@@3|) (ite (= |length#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@3|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 $ly@@224 (- |length#0@@3| 1) |v#0@@3|)))))) :qid |unknown.0:0| :skolemid |9377| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@224) |length#0@@3| |v#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@4 T@U) ($ly@@225 T@U) (|length#0@@4| Int) (|v#0@@4| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@4) TyType) (= (type $ly@@225) LayerTypeType)) (= (type |v#0@@4|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt |length#0@@4|) |v#0@@4|) (and (<= (LitInt 0) |length#0@@4|) ($IsBox |v#0@@4| Sequences._default.SeqOfLength$V@@4)))) (and (=> (not (= (LitInt |length#0@@4|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt (- |length#0@@4| 1)) |v#0@@4|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@225) (LitInt |length#0@@4|) |v#0@@4|) (ite (= (LitInt |length#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@4|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@225) (LitInt (- |length#0@@4| 1)) |v#0@@4|)))))) :qid |unknown.0:0| :weight 3 :skolemid |9378| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@225) (LitInt |length#0@@4|) |v#0@@4|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@5 T@U) ($ly@@226 T@U) (|length#0@@5| Int) (|v#0@@5| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@5) TyType) (= (type $ly@@226) LayerTypeType)) (= (type |v#0@@5|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt |length#0@@5|) (Lit |v#0@@5|)) (and (<= (LitInt 0) |length#0@@5|) ($IsBox |v#0@@5| Sequences._default.SeqOfLength$V@@5)))) (and (=> (not (= (LitInt |length#0@@5|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt (- |length#0@@5| 1)) (Lit |v#0@@5|))) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@226) (LitInt |length#0@@5|) (Lit |v#0@@5|)) (ite (= (LitInt |length#0@@5|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |v#0@@5|)) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@226) (LitInt (- |length#0@@5| 1)) (Lit |v#0@@5|))))))) :qid |unknown.0:0| :weight 3 :skolemid |9379| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@226) (LitInt |length#0@@5|) (Lit |v#0@@5|))) ))))
(assert (forall ((arg0@@265 T@U) (arg1@@146 T@U) (arg2@@85 T@U) (arg3@@60 Int) (arg4@@42 T@U) ) (! (= (type (Sequences.__default.SeqIndexUpdate arg0@@265 arg1@@146 arg2@@85 arg3@@60 arg4@@42)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqIndexUpdate| :pattern ( (Sequences.__default.SeqIndexUpdate arg0@@265 arg1@@146 arg2@@85 arg3@@60 arg4@@42)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T T@U) ($ly@@227 T@U) (|s#0@@87| T@U) (|i#0@@47| Int) (|t#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T) TyType) (= (type $ly@@227) LayerTypeType)) (= (type |s#0@@87|) (SeqType BoxType))) (= (type |t#0|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@227) |s#0@@87| |i#0@@47| |t#0|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T $ly@@227 |s#0@@87| |i#0@@47| |t#0|))) :qid |unknown.0:0| :skolemid |9380| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@227) |s#0@@87| |i#0@@47| |t#0|)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@0 T@U) ($ly@@228 T@U) (|s#0@@88| T@U) (|i#0@@48| Int) (|t#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@0) TyType) (= (type $ly@@228) LayerTypeType)) (= (type |s#0@@88|) (SeqType BoxType))) (= (type |t#0@@0|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $ly@@228 |s#0@@88| |i#0@@48| |t#0@@0|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $LZ |s#0@@88| |i#0@@48| |t#0@@0|))) :qid |unknown.0:0| :skolemid |9381| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 (AsFuelBottom $ly@@228) |s#0@@88| |i#0@@48| |t#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@1 T@U) ($ly@@229 T@U) (|s#0@@89| T@U) (|i#0@@49| Int) (|t#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@1) TyType) (= (type $ly@@229) LayerTypeType)) (= (type |s#0@@89|) (SeqType BoxType))) (= (type |t#0@@1|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@1 |s#0@@89| |i#0@@49| |t#0@@1|) (and (and (and ($Is |s#0@@89| (TSeq Sequences._default.SeqIndexUpdate$T@@1)) (and (<= (LitInt 0) |i#0@@49|) (< |i#0@@49| 18446744073709551616))) ($IsBox |t#0@@1| Sequences._default.SeqIndexUpdate$T@@1)) (and (< (+ |i#0@@49| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@49|) (< |i#0@@49| (|Seq#Length| |s#0@@89|))))))) (and (|Seq#Equal| (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@229 |s#0@@89| |i#0@@49| |t#0@@1|) (|Seq#Update| |s#0@@89| |i#0@@49| |t#0@@1|)) ($Is (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@229 |s#0@@89| |i#0@@49| |t#0@@1|) (TSeq Sequences._default.SeqIndexUpdate$T@@1)))) :qid |unknown.0:0| :skolemid |9382| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@229 |s#0@@89| |i#0@@49| |t#0@@1|)) ))))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@2 T@U) ($ly@@230 T@U) (|s#0@@90| T@U) (|i#0@@50| Int) (|t#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@2) TyType) (= (type $ly@@230) LayerTypeType)) (= (type |s#0@@90|) (SeqType BoxType))) (= (type |t#0@@2|) BoxType)) (and (and ($Is |s#0@@90| (TSeq Sequences._default.SeqIndexUpdate$T@@2)) (and (<= (LitInt 0) |i#0@@50|) (< |i#0@@50| 18446744073709551616))) ($IsBox |t#0@@2| Sequences._default.SeqIndexUpdate$T@@2))) (and (=> (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@230 |s#0@@90| |i#0@@50| |t#0@@2|) (and (< (+ |i#0@@50| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@50|) (< |i#0@@50| (|Seq#Length| |s#0@@90|))))) (=> (and (< (+ |i#0@@50| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@50|) (< |i#0@@50| (|Seq#Length| |s#0@@90|)))) (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@230 |s#0@@90| |i#0@@50| |t#0@@2|)))) :qid |unknown.0:0| :skolemid |9383| :pattern ( (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@230 |s#0@@90| |i#0@@50| |t#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@3 T@U) ($ly@@231 T@U) (|s#0@@91| T@U) (|i#0@@51| Int) (|t#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@3) TyType) (= (type $ly@@231) LayerTypeType)) (= (type |s#0@@91|) (SeqType BoxType))) (= (type |t#0@@3|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@3 |s#0@@91| |i#0@@51| |t#0@@3|) (and (and (and ($Is |s#0@@91| (TSeq Sequences._default.SeqIndexUpdate$T@@3)) (and (<= (LitInt 0) |i#0@@51|) (< |i#0@@51| 18446744073709551616))) ($IsBox |t#0@@3| Sequences._default.SeqIndexUpdate$T@@3)) (and (< (+ |i#0@@51| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@51|) (< |i#0@@51| (|Seq#Length| |s#0@@91|))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@231) |s#0@@91| |i#0@@51| |t#0@@3|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@91| |i#0@@51|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@3|)) (|Seq#Drop| |s#0@@91| (+ |i#0@@51| 1))))) :qid |unknown.0:0| :skolemid |9384| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@231) |s#0@@91| |i#0@@51| |t#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@4 T@U) ($ly@@232 T@U) (|s#0@@92| T@U) (|i#0@@52| Int) (|t#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@4) TyType) (= (type $ly@@232) LayerTypeType)) (= (type |s#0@@92|) (SeqType BoxType))) (= (type |t#0@@4|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@4 (Lit |s#0@@92|) (LitInt |i#0@@52|) |t#0@@4|) (and (and (and ($Is |s#0@@92| (TSeq Sequences._default.SeqIndexUpdate$T@@4)) (and (<= (LitInt 0) |i#0@@52|) (< |i#0@@52| 18446744073709551616))) ($IsBox |t#0@@4| Sequences._default.SeqIndexUpdate$T@@4)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@52| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@52|)) (< |i#0@@52| (|Seq#Length| (Lit |s#0@@92|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@232) (Lit |s#0@@92|) (LitInt |i#0@@52|) |t#0@@4|) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@92|) (LitInt |i#0@@52|)) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@4|)) (|Seq#Drop| (Lit |s#0@@92|) (LitInt (+ |i#0@@52| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |9385| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@232) (Lit |s#0@@92|) (LitInt |i#0@@52|) |t#0@@4|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@5 T@U) ($ly@@233 T@U) (|s#0@@93| T@U) (|i#0@@53| Int) (|t#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@5) TyType) (= (type $ly@@233) LayerTypeType)) (= (type |s#0@@93|) (SeqType BoxType))) (= (type |t#0@@5|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@5 (Lit |s#0@@93|) (LitInt |i#0@@53|) (Lit |t#0@@5|)) (and (and (and ($Is |s#0@@93| (TSeq Sequences._default.SeqIndexUpdate$T@@5)) (and (<= (LitInt 0) |i#0@@53|) (< |i#0@@53| 18446744073709551616))) ($IsBox |t#0@@5| Sequences._default.SeqIndexUpdate$T@@5)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@53| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@53|)) (< |i#0@@53| (|Seq#Length| (Lit |s#0@@93|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@233) (Lit |s#0@@93|) (LitInt |i#0@@53|) (Lit |t#0@@5|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@93|) (LitInt |i#0@@53|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@5|))) (|Seq#Drop| (Lit |s#0@@93|) (LitInt (+ |i#0@@53| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |9386| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@233) (Lit |s#0@@93|) (LitInt |i#0@@53|) (Lit |t#0@@5|))) ))))
(assert (forall ((arg0@@266 T@U) (arg1@@147 T@U) (arg2@@86 T@U) (arg3@@61 T@U) (arg4@@43 T@U) ) (! (= (type (Sequences.__default.Zip arg0@@266 arg1@@147 arg2@@86 arg3@@61 arg4@@43)) (SeqType BoxType)) :qid |funType:Sequences.__default.Zip| :pattern ( (Sequences.__default.Zip arg0@@266 arg1@@147 arg2@@86 arg3@@61 arg4@@43)) )))
(assert (forall ((Sequences._default.Zip$A T@U) (Sequences._default.Zip$B T@U) ($ly@@234 T@U) (|a#0@@95| T@U) (|b#0@@66| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A) TyType) (= (type Sequences._default.Zip$B) TyType)) (= (type $ly@@234) LayerTypeType)) (= (type |a#0@@95|) (SeqType BoxType))) (= (type |b#0@@66|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@234) |a#0@@95| |b#0@@66|) (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B $ly@@234 |a#0@@95| |b#0@@66|))) :qid |unknown.0:0| :skolemid |9387| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@234) |a#0@@95| |b#0@@66|)) )))
(assert (forall ((Sequences._default.Zip$A@@0 T@U) (Sequences._default.Zip$B@@0 T@U) ($ly@@235 T@U) (|a#0@@96| T@U) (|b#0@@67| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A@@0) TyType) (= (type Sequences._default.Zip$B@@0) TyType)) (= (type $ly@@235) LayerTypeType)) (= (type |a#0@@96|) (SeqType BoxType))) (= (type |b#0@@67|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $ly@@235 |a#0@@96| |b#0@@67|) (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $LZ |a#0@@96| |b#0@@67|))) :qid |unknown.0:0| :skolemid |9388| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 (AsFuelBottom $ly@@235) |a#0@@96| |b#0@@67|)) )))
(assert  (=> true (forall ((Sequences._default.Zip$A@@1 T@U) (Sequences._default.Zip$B@@1 T@U) ($ly@@236 T@U) (|a#0@@97| T@U) (|b#0@@68| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@1) TyType) (= (type Sequences._default.Zip$B@@1) TyType)) (= (type $ly@@236) LayerTypeType)) (= (type |a#0@@97|) (SeqType BoxType))) (= (type |b#0@@68|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 |a#0@@97| |b#0@@68|) (and (and ($Is |a#0@@97| (TSeq Sequences._default.Zip$A@@1)) ($Is |b#0@@68| (TSeq Sequences._default.Zip$B@@1))) (= (|Seq#Length| |a#0@@97|) (|Seq#Length| |b#0@@68|))))) (and (and (= (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@236 |a#0@@97| |b#0@@68|)) (|Seq#Length| |a#0@@97|)) (forall ((|i#5@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#5@@2|) (< |i#5@@2| (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@236 |a#0@@97| |b#0@@68|)))) (|_System.Tuple2#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@236 |a#0@@97| |b#0@@68|) |i#5@@2|)) (|#_System._tuple#2._#Make2| (|Seq#Index| |a#0@@97| |i#5@@2|) (|Seq#Index| |b#0@@68| |i#5@@2|))))) :qid |sequence.378:20| :skolemid |9389| :pattern ( (|Seq#Index| |b#0@@68| |i#5@@2|)) :pattern ( (|Seq#Index| |a#0@@97| |i#5@@2|)) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@236 |a#0@@97| |b#0@@68|) |i#5@@2|))) ))) ($Is (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@236 |a#0@@97| |b#0@@68|) (TSeq (Tclass._System.Tuple2 Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1))))) :qid |unknown.0:0| :skolemid |9390| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@236 |a#0@@97| |b#0@@68|)) ))))
(assert (forall ((Sequences._default.Zip$A@@2 T@U) (Sequences._default.Zip$B@@2 T@U) ($ly@@237 T@U) (|a#0@@98| T@U) (|b#0@@69| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@2) TyType) (= (type Sequences._default.Zip$B@@2) TyType)) (= (type $ly@@237) LayerTypeType)) (= (type |a#0@@98|) (SeqType BoxType))) (= (type |b#0@@69|) (SeqType BoxType))) (and ($Is |a#0@@98| (TSeq Sequences._default.Zip$A@@2)) ($Is |b#0@@69| (TSeq Sequences._default.Zip$B@@2)))) (and (=> (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@237 |a#0@@98| |b#0@@69|) (= (|Seq#Length| |a#0@@98|) (|Seq#Length| |b#0@@69|))) (=> (= (|Seq#Length| |a#0@@98|) (|Seq#Length| |b#0@@69|)) (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@237 |a#0@@98| |b#0@@69|)))) :qid |unknown.0:0| :skolemid |9391| :pattern ( (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@237 |a#0@@98| |b#0@@69|)) )))
(assert  (=> true (forall ((Sequences._default.Zip$A@@3 T@U) (Sequences._default.Zip$B@@3 T@U) ($ly@@238 T@U) (|a#0@@99| T@U) (|b#0@@70| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@3) TyType) (= (type Sequences._default.Zip$B@@3) TyType)) (= (type $ly@@238) LayerTypeType)) (= (type |a#0@@99|) (SeqType BoxType))) (= (type |b#0@@70|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 |a#0@@99| |b#0@@70|) (and (and ($Is |a#0@@99| (TSeq Sequences._default.Zip$A@@3)) ($Is |b#0@@70| (TSeq Sequences._default.Zip$B@@3))) (= (|Seq#Length| |a#0@@99|) (|Seq#Length| |b#0@@70|))))) (and (=> (not (= (|Seq#Length| |a#0@@99|) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@3 |a#0@@99|) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@3 |b#0@@70|)) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@99|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@70|))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@3 |a#0@@99|) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@3 |b#0@@70|)))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@238) |a#0@@99| |b#0@@70|) (ite (= (|Seq#Length| |a#0@@99|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 $ly@@238 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@99|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@70|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#_System._tuple#2._#Make2| (Sequences.__default.Last Sequences._default.Zip$A@@3 |a#0@@99|) (Sequences.__default.Last Sequences._default.Zip$B@@3 |b#0@@70|))))))))) :qid |unknown.0:0| :skolemid |9392| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@238) |a#0@@99| |b#0@@70|)) ))))
(assert  (=> true (forall ((Sequences._default.Zip$A@@4 T@U) (Sequences._default.Zip$B@@4 T@U) ($ly@@239 T@U) (|a#0@@100| T@U) (|b#0@@71| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@4) TyType) (= (type Sequences._default.Zip$B@@4) TyType)) (= (type $ly@@239) LayerTypeType)) (= (type |a#0@@100|) (SeqType BoxType))) (= (type |b#0@@71|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit |a#0@@100|) (Lit |b#0@@71|)) (and (and ($Is |a#0@@100| (TSeq Sequences._default.Zip$A@@4)) ($Is |b#0@@71| (TSeq Sequences._default.Zip$B@@4))) (= (|Seq#Length| (Lit |a#0@@100|)) (|Seq#Length| (Lit |b#0@@71|)))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@100|)) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@100|)) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@71|))) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@100|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@71|))))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@100|)) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@71|))))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@239) (Lit |a#0@@100|) (Lit |b#0@@71|)) (ite (= (|Seq#Length| (Lit |a#0@@100|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@239) (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@100|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@71|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#_System._tuple#2._#Make2| (Lit (Sequences.__default.Last Sequences._default.Zip$A@@4 (Lit |a#0@@100|))) (Lit (Sequences.__default.Last Sequences._default.Zip$B@@4 (Lit |b#0@@71|)))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |9393| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@239) (Lit |a#0@@100|) (Lit |b#0@@71|))) ))))
(assert (forall ((Sequences._default.Unzip$A T@U) (Sequences._default.Unzip$B T@U) ($ly@@240 T@U) (|z#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A) TyType) (= (type Sequences._default.Unzip$B) TyType)) (= (type $ly@@240) LayerTypeType)) (= (type |z#0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@240) |z#0|) (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B $ly@@240 |z#0|))) :qid |unknown.0:0| :skolemid |9394| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@240) |z#0|)) )))
(assert (forall ((Sequences._default.Unzip$A@@0 T@U) (Sequences._default.Unzip$B@@0 T@U) ($ly@@241 T@U) (|z#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A@@0) TyType) (= (type Sequences._default.Unzip$B@@0) TyType)) (= (type $ly@@241) LayerTypeType)) (= (type |z#0@@0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $ly@@241 |z#0@@0|) (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $LZ |z#0@@0|))) :qid |unknown.0:0| :skolemid |9395| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 (AsFuelBottom $ly@@241) |z#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@1 T@U) (Sequences._default.Unzip$B@@1 T@U) ($ly@@242 T@U) (|z#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@1) TyType) (= (type Sequences._default.Unzip$B@@1) TyType)) (= (type $ly@@242) LayerTypeType)) (= (type |z#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 |z#0@@1|) ($Is |z#0@@1| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1))))) (and (and (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@242 |z#0@@1|)))) (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@242 |z#0@@1|))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@242 |z#0@@1|)))) (|Seq#Length| |z#0@@1|))) (forall ((|i#5@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#5@@3|) (< |i#5@@3| (|Seq#Length| |z#0@@1|))) (|_System.Tuple2#Equal| (|#_System._tuple#2._#Make2| (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@242 |z#0@@1|))) |i#5@@3|) (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@242 |z#0@@1|))) |i#5@@3|)) ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#5@@3|))))) :qid |sequence.386:20| :skolemid |9396| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#5@@3|))) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@242 |z#0@@1|))) |i#5@@3|)) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@242 |z#0@@1|))) |i#5@@3|)) ))) ($Is (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@242 |z#0@@1|) (Tclass._System.Tuple2 (TSeq Sequences._default.Unzip$A@@1) (TSeq Sequences._default.Unzip$B@@1))))) :qid |unknown.0:0| :skolemid |9397| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@242 |z#0@@1|)) ))))
(assert (forall ((Sequences._default.Unzip$A@@2 T@U) (Sequences._default.Unzip$B@@2 T@U) ($ly@@243 T@U) (|z#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@2) TyType) (= (type Sequences._default.Unzip$B@@2) TyType)) (= (type $ly@@243) LayerTypeType)) (= (type |z#0@@2|) (SeqType BoxType))) ($Is |z#0@@2| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2)))) (and (=> (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@243 |z#0@@2|) true) (=> true (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@243 |z#0@@2|)))) :qid |unknown.0:0| :skolemid |9398| :pattern ( (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@243 |z#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@3 T@U) (Sequences._default.Unzip$B@@3 T@U) ($ly@@244 T@U) (|z#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@3) TyType) (= (type Sequences._default.Unzip$B@@3) TyType)) (= (type $ly@@244) LayerTypeType)) (= (type |z#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 |z#0@@3|) ($Is |z#0@@3| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3))))) (and (=> (not (= (|Seq#Length| |z#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@244) |z#0@@3|) (ite (= (|Seq#Length| |z#0@@3|) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#10| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@244 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (let ((|a#10| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@244 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#10| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) ($Box (|Seq#Append| |b#10| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._1 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))))))))) :qid |unknown.0:0| :skolemid |9399| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@244) |z#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@4 T@U) (Sequences._default.Unzip$B@@4 T@U) ($ly@@245 T@U) (|z#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@4) TyType) (= (type Sequences._default.Unzip$B@@4) TyType)) (= (type $ly@@245) LayerTypeType)) (= (type |z#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit |z#0@@4|)) ($Is |z#0@@4| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4))))) (and (=> (not (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@245) (Lit |z#0@@4|)) (ite (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#11| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@245) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (let ((|a#11| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@245) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#11| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._0 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) ($Box (|Seq#Append| |b#11| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._1 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |9400| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@245) (Lit |z#0@@4|))) ))))
(assert (forall ((arg0@@267 T@U) (arg1@@148 T@U) (arg2@@87 T@U) ) (! (= (type (Sequences.__default.FlattenShape arg0@@267 arg1@@148 arg2@@87)) (SeqType BoxType)) :qid |funType:Sequences.__default.FlattenShape| :pattern ( (Sequences.__default.FlattenShape arg0@@267 arg1@@148 arg2@@87)) )))
(assert (forall ((Sequences._default.FlattenShape$A T@U) ($ly@@246 T@U) (|seqs#0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A) TyType) (= (type $ly@@246) LayerTypeType)) (= (type |seqs#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@246) |seqs#0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A $ly@@246 |seqs#0|))) :qid |unknown.0:0| :skolemid |9401| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@246) |seqs#0|)) )))
(assert (forall ((Sequences._default.FlattenShape$A@@0 T@U) ($ly@@247 T@U) (|seqs#0@@0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A@@0) TyType) (= (type $ly@@247) LayerTypeType)) (= (type |seqs#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $ly@@247 |seqs#0@@0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $LZ |seqs#0@@0|))) :qid |unknown.0:0| :skolemid |9402| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 (AsFuelBottom $ly@@247) |seqs#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@1 T@U) ($ly@@248 T@U) (|seqs#0@@1| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@1) TyType) (= (type $ly@@248) LayerTypeType)) (= (type |seqs#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@1 |seqs#0@@1|) ($Is |seqs#0@@1| (TSeq (TSeq Sequences._default.FlattenShape$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@248 |seqs#0@@1|)) (|Seq#Length| |seqs#0@@1|)) (forall ((|i#5@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#5@@4|) (< |i#5@@4| (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@248 |seqs#0@@1|)))) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@248 |seqs#0@@1|) |i#5@@4|))) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#5@@4|)))))) :qid |sequence.408:20| :skolemid |9403| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#5@@4|))) :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@248 |seqs#0@@1|) |i#5@@4|))) ))) ($Is (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@248 |seqs#0@@1|) (TSeq Tclass._System.nat)))) :qid |unknown.0:0| :skolemid |9404| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@248 |seqs#0@@1|)) ))))
(assert (forall ((Sequences._default.FlattenShape$A@@2 T@U) ($ly@@249 T@U) (|seqs#0@@2| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@2) TyType) (= (type $ly@@249) LayerTypeType)) (= (type |seqs#0@@2|) (SeqType BoxType))) ($Is |seqs#0@@2| (TSeq (TSeq Sequences._default.FlattenShape$A@@2)))) (and (=> (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@249 |seqs#0@@2|) true) (=> true (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@249 |seqs#0@@2|)))) :qid |unknown.0:0| :skolemid |9405| :pattern ( (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@249 |seqs#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@3 T@U) ($ly@@250 T@U) (|seqs#0@@3| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@3) TyType) (= (type $ly@@250) LayerTypeType)) (= (type |seqs#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 |seqs#0@@3|) ($Is |seqs#0@@3| (TSeq (TSeq Sequences._default.FlattenShape$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@250) |seqs#0@@3|) (ite (= (|Seq#Length| |seqs#0@@3|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 $ly@@250 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))))))))))) :qid |unknown.0:0| :skolemid |9406| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@250) |seqs#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@4 T@U) ($ly@@251 T@U) (|seqs#0@@4| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@4) TyType) (= (type $ly@@251) LayerTypeType)) (= (type |seqs#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit |seqs#0@@4|)) ($Is |seqs#0@@4| (TSeq (TSeq Sequences._default.FlattenShape$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@251) (Lit |seqs#0@@4|)) (ite (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@251) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |9407| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@251) (Lit |seqs#0@@4|))) ))))
(assert (forall (($ly@@252 T@U) (|shape#0| T@U) ) (!  (=> (and (= (type $ly@@252) LayerTypeType) (= (type |shape#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength ($LS $ly@@252) |shape#0|) (Sequences.__default.FlattenLength $ly@@252 |shape#0|))) :qid |sequence.419:22| :skolemid |9408| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@252) |shape#0|)) )))
(assert (forall (($ly@@253 T@U) (|shape#0@@0| T@U) ) (!  (=> (and (= (type $ly@@253) LayerTypeType) (= (type |shape#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength $ly@@253 |shape#0@@0|) (Sequences.__default.FlattenLength $LZ |shape#0@@0|))) :qid |sequence.419:22| :skolemid |9409| :pattern ( (Sequences.__default.FlattenLength (AsFuelBottom $ly@@253) |shape#0@@0|)) )))
(assert  (=> true (forall (($ly@@254 T@U) (|shape#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@254) LayerTypeType) (= (type |shape#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@1|) ($Is |shape#0@@1| (TSeq Tclass._System.nat)))) (and (=> (= (|Seq#Length| |shape#0@@1|) (LitInt 0)) (= (Sequences.__default.FlattenLength $ly@@254 |shape#0@@1|) (LitInt 0))) (<= (LitInt 0) (Sequences.__default.FlattenLength $ly@@254 |shape#0@@1|)))) :qid |sequence.419:22| :skolemid |9410| :pattern ( (Sequences.__default.FlattenLength $ly@@254 |shape#0@@1|)) ))))
(assert (forall (($ly@@255 T@U) (|shape#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@255) LayerTypeType) (= (type |shape#0@@2|) (SeqType BoxType))) ($Is |shape#0@@2| (TSeq Tclass._System.nat))) (and (=> (|Sequences.__default.FlattenLength#requires| $ly@@255 |shape#0@@2|) true) (=> true (|Sequences.__default.FlattenLength#requires| $ly@@255 |shape#0@@2|)))) :qid |sequence.419:22| :skolemid |9411| :pattern ( (|Sequences.__default.FlattenLength#requires| $ly@@255 |shape#0@@2|)) )))
(assert  (=> true (forall (($ly@@256 T@U) (|shape#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@256) LayerTypeType) (= (type |shape#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@3|) ($Is |shape#0@@3| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| |shape#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@3|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|))) (|Sequences.__default.Last#canCall| Tclass._System.nat |shape#0@@3|))) (= (Sequences.__default.FlattenLength ($LS $ly@@256) |shape#0@@3|) (ite (= (|Seq#Length| |shape#0@@3|) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength $ly@@256 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|)) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat |shape#0@@3|)))))))) :qid |sequence.419:22| :skolemid |9412| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@256) |shape#0@@3|)) ))))
(assert  (=> true (forall (($ly@@257 T@U) (|shape#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@257) LayerTypeType) (= (type |shape#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| (Lit |shape#0@@4|)) ($Is |shape#0@@4| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@4|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|))))) (|Sequences.__default.Last#canCall| Tclass._System.nat (Lit |shape#0@@4|)))) (= (Sequences.__default.FlattenLength ($LS $ly@@257) (Lit |shape#0@@4|)) (ite (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength ($LS $ly@@257) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|)))) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat (Lit |shape#0@@4|))))))))) :qid |sequence.419:22| :weight 3 :skolemid |9413| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@257) (Lit |shape#0@@4|))) ))))
(assert (forall ((arg0@@268 T@U) (arg1@@149 T@U) (arg2@@88 T@U) ) (! (= (type (Sequences.__default.Flatten arg0@@268 arg1@@149 arg2@@88)) (SeqType BoxType)) :qid |funType:Sequences.__default.Flatten| :pattern ( (Sequences.__default.Flatten arg0@@268 arg1@@149 arg2@@88)) )))
(assert (forall ((Sequences._default.Flatten$A T@U) ($ly@@258 T@U) (|seqs#0@@5| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A) TyType) (= (type $ly@@258) LayerTypeType)) (= (type |seqs#0@@5|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@258) |seqs#0@@5|) (Sequences.__default.Flatten Sequences._default.Flatten$A $ly@@258 |seqs#0@@5|))) :qid |unknown.0:0| :skolemid |9414| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@258) |seqs#0@@5|)) )))
(assert (forall ((Sequences._default.Flatten$A@@0 T@U) ($ly@@259 T@U) (|seqs#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A@@0) TyType) (= (type $ly@@259) LayerTypeType)) (= (type |seqs#0@@6|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $ly@@259 |seqs#0@@6|) (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $LZ |seqs#0@@6|))) :qid |unknown.0:0| :skolemid |9415| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 (AsFuelBottom $ly@@259) |seqs#0@@6|)) )))
(assert  (and (= (type StartFuel_Sequences._default.FlattenLength) LayerTypeType) (= (type StartFuel_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@1 T@U) ($ly@@260 T@U) (|seqs#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@1) TyType) (= (type $ly@@260) LayerTypeType)) (= (type |seqs#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@1 |seqs#0@@7|) ($Is |seqs#0@@7| (TSeq (TSeq Sequences._default.Flatten$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@260 |seqs#0@@7|)) (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.FlattenShape Sequences._default.Flatten$A@@1 StartFuel_Sequences._default.FlattenShape |seqs#0@@7|))) (=> (= (|Seq#Length| |seqs#0@@7|) (LitInt 0)) (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@260 |seqs#0@@7|)) (LitInt 0)))) ($Is (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@260 |seqs#0@@7|) (TSeq Sequences._default.Flatten$A@@1)))) :qid |unknown.0:0| :skolemid |9416| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@260 |seqs#0@@7|)) ))))
(assert (forall ((Sequences._default.Flatten$A@@2 T@U) ($ly@@261 T@U) (|seqs#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@2) TyType) (= (type $ly@@261) LayerTypeType)) (= (type |seqs#0@@8|) (SeqType BoxType))) ($Is |seqs#0@@8| (TSeq (TSeq Sequences._default.Flatten$A@@2)))) (and (=> (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@261 |seqs#0@@8|) true) (=> true (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@261 |seqs#0@@8|)))) :qid |unknown.0:0| :skolemid |9417| :pattern ( (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@261 |seqs#0@@8|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenShape10) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@3 T@U) ($ly@@262 T@U) (|seqs#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@3) TyType) (= (type $ly@@262) LayerTypeType)) (= (type |seqs#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 |seqs#0@@9|) ($Is |seqs#0@@9| (TSeq (TSeq Sequences._default.Flatten$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@9|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape10)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape10)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape10) MoreFuel_Sequences._default.FlattenShape10)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@262) |seqs#0@@9|) (ite (= (|Seq#Length| |seqs#0@@9|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 $ly@@262 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|)))))))) :qid |unknown.0:0| :skolemid |9418| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@262) |seqs#0@@9|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenShape11) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@4 T@U) ($ly@@263 T@U) (|seqs#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@4) TyType) (= (type $ly@@263) LayerTypeType)) (= (type |seqs#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit |seqs#0@@10|)) ($Is |seqs#0@@10| (TSeq (TSeq Sequences._default.Flatten$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape11)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape11)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape11) MoreFuel_Sequences._default.FlattenShape11)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@263) (Lit |seqs#0@@10|)) (ite (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@263) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |9419| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@263) (Lit |seqs#0@@10|))) ))))
(assert  (=> true (forall ((|shape#0@@5| T@U) (|i#0@@54| Int) (|j#0@@5| Int) ) (!  (=> (and (= (type |shape#0@@5|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@5| |i#0@@54| |j#0@@5|) (and (and (and ($Is |shape#0@@5| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@54|)) (<= (LitInt 0) |j#0@@5|)) (and (< |i#0@@54| (|Seq#Length| |shape#0@@5|)) (< |j#0@@5| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@5| |i#0@@54|)))))))) (<= (LitInt 0) (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@54| |j#0@@5|))) :qid |sequence.488:25| :skolemid |9420| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@54| |j#0@@5|)) ))))
(assert (forall ((|shape#0@@6| T@U) (|i#0@@55| Int) (|j#0@@6| Int) ) (!  (=> (= (type |shape#0@@6|) (SeqType BoxType)) (=> (and (and ($Is |shape#0@@6| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@55|)) (<= (LitInt 0) |j#0@@6|)) (and (=> (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@55| |j#0@@6|) (and (< |i#0@@55| (|Seq#Length| |shape#0@@6|)) (< |j#0@@6| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@6| |i#0@@55|)))))) (=> (and (< |i#0@@55| (|Seq#Length| |shape#0@@6|)) (< |j#0@@6| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@6| |i#0@@55|))))) (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@55| |j#0@@6|))))) :qid |sequence.488:25| :skolemid |9421| :pattern ( (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@55| |j#0@@6|)) )))
(assert  (=> true (forall ((|shape#0@@7| T@U) (|i#0@@56| Int) (|j#0@@7| Int) ) (!  (=> (and (= (type |shape#0@@7|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@7| |i#0@@56| |j#0@@7|) (and (and (and ($Is |shape#0@@7| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@56|)) (<= (LitInt 0) |j#0@@7|)) (and (< |i#0@@56| (|Seq#Length| |shape#0@@7|)) (< |j#0@@7| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@7| |i#0@@56|)))))))) (and (|Sequences.__default.FlattenLength#canCall| (|Seq#Take| |shape#0@@7| |i#0@@56|)) (= (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@56| |j#0@@7|) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (|Seq#Take| |shape#0@@7| |i#0@@56|)) |j#0@@7|)))) :qid |sequence.488:25| :skolemid |9422| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@56| |j#0@@7|)) ))))
(assert  (=> true (forall ((|shape#0@@8| T@U) (|i#0@@57| Int) (|j#0@@8| Int) ) (!  (=> (and (= (type |shape#0@@8|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| (Lit |shape#0@@8|) (LitInt |i#0@@57|) (LitInt |j#0@@8|)) (and (and (and ($Is |shape#0@@8| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@57|)) (<= (LitInt 0) |j#0@@8|)) (and (< |i#0@@57| (|Seq#Length| (Lit |shape#0@@8|))) (< |j#0@@8| (U_2_int ($Unbox intType (|Seq#Index| (Lit |shape#0@@8|) (LitInt |i#0@@57|))))))))) (and (|Sequences.__default.FlattenLength#canCall| (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@57|)))) (= (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@57|) (LitInt |j#0@@8|)) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@57|)))) |j#0@@8|)))) :qid |sequence.488:25| :weight 3 :skolemid |9423| :pattern ( (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@57|) (LitInt |j#0@@8|))) ))))
(assert (forall ((arg0@@269 T@U) (arg1@@150 T@U) (arg2@@89 Int) ) (! (= (type (Sequences.__default.UnflattenIndex arg0@@269 arg1@@150 arg2@@89)) DatatypeTypeType) :qid |funType:Sequences.__default.UnflattenIndex| :pattern ( (Sequences.__default.UnflattenIndex arg0@@269 arg1@@150 arg2@@89)) )))
(assert (forall (($ly@@264 T@U) (|shape#0@@9| T@U) (|i#0@@58| Int) ) (!  (=> (and (= (type $ly@@264) LayerTypeType) (= (type |shape#0@@9|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex ($LS $ly@@264) |shape#0@@9| |i#0@@58|) (Sequences.__default.UnflattenIndex $ly@@264 |shape#0@@9| |i#0@@58|))) :qid |sequence.495:12| :skolemid |9424| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@264) |shape#0@@9| |i#0@@58|)) )))
(assert (forall (($ly@@265 T@U) (|shape#0@@10| T@U) (|i#0@@59| Int) ) (!  (=> (and (= (type $ly@@265) LayerTypeType) (= (type |shape#0@@10|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex $ly@@265 |shape#0@@10| |i#0@@59|) (Sequences.__default.UnflattenIndex $LZ |shape#0@@10| |i#0@@59|))) :qid |sequence.495:12| :skolemid |9425| :pattern ( (Sequences.__default.UnflattenIndex (AsFuelBottom $ly@@265) |shape#0@@10| |i#0@@59|)) )))
(assert  (=> true (forall (($ly@@266 T@U) (|shape#0@@11| T@U) (|i#0@@60| Int) ) (!  (=> (and (and (= (type $ly@@266) LayerTypeType) (= (type |shape#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@11| |i#0@@60|) (and (and ($Is |shape#0@@11| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@60|)) (< |i#0@@60| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@11|))))) ($Is (Sequences.__default.UnflattenIndex $ly@@266 |shape#0@@11| |i#0@@60|) (Tclass._System.Tuple2 Tclass._System.nat Tclass._System.nat))) :qid |sequence.495:12| :skolemid |9426| :pattern ( (Sequences.__default.UnflattenIndex $ly@@266 |shape#0@@11| |i#0@@60|)) ))))
(assert (forall (($ly@@267 T@U) (|shape#0@@12| T@U) (|i#0@@61| Int) ) (!  (=> (and (and (= (type $ly@@267) LayerTypeType) (= (type |shape#0@@12|) (SeqType BoxType))) (and ($Is |shape#0@@12| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@61|))) (and (=> (|Sequences.__default.UnflattenIndex#requires| $ly@@267 |shape#0@@12| |i#0@@61|) (< |i#0@@61| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@12|))) (=> (< |i#0@@61| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@12|)) (|Sequences.__default.UnflattenIndex#requires| $ly@@267 |shape#0@@12| |i#0@@61|)))) :qid |sequence.495:12| :skolemid |9427| :pattern ( (|Sequences.__default.UnflattenIndex#requires| $ly@@267 |shape#0@@12| |i#0@@61|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenLength10) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenLength) LayerTypeType)))
(assert  (=> true (forall (($ly@@268 T@U) (|shape#0@@13| T@U) (|i#0@@62| Int) ) (!  (=> (and (and (= (type $ly@@268) LayerTypeType) (= (type |shape#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@13| |i#0@@62|) (and (and ($Is |shape#0@@13| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@62|)) (< |i#0@@62| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@13|))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (=> (< |i#0@@62| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.UnflattenIndex#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@62|)))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|)) |i#0@@62|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength10)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength10)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength10) MoreFuel_Sequences._default.FlattenLength10)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@268) |shape#0@@13| |i#0@@62|) (ite (< |i#0@@62| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (Sequences.__default.UnflattenIndex $ly@@268 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@62|) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| |shape#0@@13|) 1))) ($Box (int_2_U (- |i#0@@62| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))))))))) :qid |sequence.495:12| :skolemid |9428| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@268) |shape#0@@13| |i#0@@62|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenLength11) LayerTypeType))
(assert  (=> true (forall (($ly@@269 T@U) (|shape#0@@14| T@U) (|i#0@@63| Int) ) (!  (=> (and (and (= (type $ly@@269) LayerTypeType) (= (type |shape#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| (Lit |shape#0@@14|) (LitInt |i#0@@63|)) (and (and ($Is |shape#0@@14| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@63|)) (< |i#0@@63| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit |shape#0@@14|)))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (=> (< |i#0@@63| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.UnflattenIndex#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@63|))))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|)))) |i#0@@63|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength11)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength11)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength11) MoreFuel_Sequences._default.FlattenLength11)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@269) (Lit |shape#0@@14|) (LitInt |i#0@@63|)) (ite (< |i#0@@63| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (Sequences.__default.UnflattenIndex ($LS $ly@@269) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@63|)) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| (Lit |shape#0@@14|)) 1))) ($Box (int_2_U (- |i#0@@63| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))))))))) :qid |sequence.495:12| :weight 3 :skolemid |9429| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@269) (Lit |shape#0@@14|) (LitInt |i#0@@63|))) ))))
(assert (forall ((arg0@@270 T@U) (arg1@@151 T@U) (arg2@@90 Int) (arg3@@62 T@U) ) (! (= (type (Sequences.__default.fill arg0@@270 arg1@@151 arg2@@90 arg3@@62)) (SeqType BoxType)) :qid |funType:Sequences.__default.fill| :pattern ( (Sequences.__default.fill arg0@@270 arg1@@151 arg2@@90 arg3@@62)) )))
(assert (forall ((Sequences._default.fill$T T@U) ($ly@@270 T@U) (|n#0@@5| Int) (|t#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T) TyType) (= (type $ly@@270) LayerTypeType)) (= (type |t#0@@6|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@270) |n#0@@5| |t#0@@6|) (Sequences.__default.fill Sequences._default.fill$T $ly@@270 |n#0@@5| |t#0@@6|))) :qid |unknown.0:0| :skolemid |9430| :pattern ( (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@270) |n#0@@5| |t#0@@6|)) )))
(assert (forall ((Sequences._default.fill$T@@0 T@U) ($ly@@271 T@U) (|n#0@@6| Int) (|t#0@@7| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T@@0) TyType) (= (type $ly@@271) LayerTypeType)) (= (type |t#0@@7|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T@@0 $ly@@271 |n#0@@6| |t#0@@7|) (Sequences.__default.fill Sequences._default.fill$T@@0 $LZ |n#0@@6| |t#0@@7|))) :qid |unknown.0:0| :skolemid |9431| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@0 (AsFuelBottom $ly@@271) |n#0@@6| |t#0@@7|)) )))
(assert  (=> true (forall ((Sequences._default.fill$T@@1 T@U) ($ly@@272 T@U) (|n#0@@7| Int) (|t#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@1) TyType) (= (type $ly@@272) LayerTypeType)) (= (type |t#0@@8|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@1 |n#0@@7| |t#0@@8|) (and ($IsBox |t#0@@8| Sequences._default.fill$T@@1) (>= |n#0@@7| (LitInt 0))))) (and (and (= (|Seq#Length| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@272 |n#0@@7| |t#0@@8|)) |n#0@@7|) (forall ((|i#5@@5| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@5|) (< |i#5@@5| |n#0@@7|)) (= (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@272 |n#0@@7| |t#0@@8|) |i#5@@5|) |t#0@@8|)) :qid |sequence.680:18| :skolemid |9432| :pattern ( (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@272 |n#0@@7| |t#0@@8|) |i#5@@5|)) ))) ($Is (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@272 |n#0@@7| |t#0@@8|) (TSeq Sequences._default.fill$T@@1)))) :qid |unknown.0:0| :skolemid |9433| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@272 |n#0@@7| |t#0@@8|)) ))))
(assert (forall ((Sequences._default.fill$T@@2 T@U) ($ly@@273 T@U) (|n#0@@8| Int) (|t#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@2) TyType) (= (type $ly@@273) LayerTypeType)) (= (type |t#0@@9|) BoxType)) ($IsBox |t#0@@9| Sequences._default.fill$T@@2)) (and (=> (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@273 |n#0@@8| |t#0@@9|) (>= |n#0@@8| (LitInt 0))) (=> (>= |n#0@@8| (LitInt 0)) (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@273 |n#0@@8| |t#0@@9|)))) :qid |unknown.0:0| :skolemid |9434| :pattern ( (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@273 |n#0@@8| |t#0@@9|)) )))
(assert  (=> true (forall ((Sequences._default.fill$T@@3 T@U) ($ly@@274 T@U) (|n#0@@9| Int) (|t#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@3) TyType) (= (type $ly@@274) LayerTypeType)) (= (type |t#0@@10|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 |n#0@@9| |t#0@@10|) (and ($IsBox |t#0@@10| Sequences._default.fill$T@@3) (>= |n#0@@9| (LitInt 0))))) (and (=> (not (= |n#0@@9| (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 (- |n#0@@9| 1) |t#0@@10|)) (= (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@274) |n#0@@9| |t#0@@10|) (ite (= |n#0@@9| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@3 $ly@@274 (- |n#0@@9| 1) |t#0@@10|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@10|)))))) :qid |unknown.0:0| :skolemid |9435| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@274) |n#0@@9| |t#0@@10|)) ))))
(assert  (=> true (forall ((Sequences._default.fill$T@@4 T@U) ($ly@@275 T@U) (|n#0@@10| Int) (|t#0@@11| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@4) TyType) (= (type $ly@@275) LayerTypeType)) (= (type |t#0@@11|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt |n#0@@10|) |t#0@@11|) (and ($IsBox |t#0@@11| Sequences._default.fill$T@@4) (>= (LitInt |n#0@@10|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@10|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt (- |n#0@@10| 1)) |t#0@@11|)) (= (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@275) (LitInt |n#0@@10|) |t#0@@11|) (ite (= (LitInt |n#0@@10|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@275) (LitInt (- |n#0@@10| 1)) |t#0@@11|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@11|)))))) :qid |unknown.0:0| :weight 3 :skolemid |9436| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@275) (LitInt |n#0@@10|) |t#0@@11|)) ))))
(assert  (=> true (forall ((Sequences._default.fill$T@@5 T@U) ($ly@@276 T@U) (|n#0@@11| Int) (|t#0@@12| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@5) TyType) (= (type $ly@@276) LayerTypeType)) (= (type |t#0@@12|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt |n#0@@11|) (Lit |t#0@@12|)) (and ($IsBox |t#0@@12| Sequences._default.fill$T@@5) (>= (LitInt |n#0@@11|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@11|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt (- |n#0@@11| 1)) (Lit |t#0@@12|))) (= (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@276) (LitInt |n#0@@11|) (Lit |t#0@@12|)) (ite (= (LitInt |n#0@@11|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@276) (LitInt (- |n#0@@11| 1)) (Lit |t#0@@12|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@12|))))))) :qid |unknown.0:0| :weight 3 :skolemid |9437| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@276) (LitInt |n#0@@11|) (Lit |t#0@@12|))) ))))
(assert (= (type Tclass.Maps.__default) TyType))
(assert (= (Tag Tclass.Maps.__default) Tagclass.Maps.__default))
(assert (forall ((bx@@94 T@U) ) (!  (=> (and (= (type bx@@94) BoxType) ($IsBox bx@@94 Tclass.Maps.__default)) (and (= ($Box ($Unbox refType bx@@94)) bx@@94) ($Is ($Unbox refType bx@@94) Tclass.Maps.__default))) :qid |unknown.0:0| :skolemid |9438| :pattern ( ($IsBox bx@@94 Tclass.Maps.__default)) )))
(assert (forall (($o@@22 T@U) ) (!  (=> (= (type $o@@22) refType) (and (=> ($Is $o@@22 Tclass.Maps.__default) (or (= $o@@22 null) (= (dtype $o@@22) Tclass.Maps.__default))) (=> (or (= $o@@22 null) (= (dtype $o@@22) Tclass.Maps.__default)) ($Is $o@@22 Tclass.Maps.__default)))) :qid |unknown.0:0| :skolemid |9439| :pattern ( ($Is $o@@22 Tclass.Maps.__default)) )))
(assert (forall (($o@@23 T@U) ($h@@41 T@U) ) (!  (=> (and (= (type $o@@23) refType) (= (type $h@@41) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@23 Tclass.Maps.__default $h@@41) (or (= $o@@23 null) (U_2_bool (MapType1Select (MapType0Select $h@@41 $o@@23) alloc)))) (=> (or (= $o@@23 null) (U_2_bool (MapType1Select (MapType0Select $h@@41 $o@@23) alloc))) ($IsAlloc $o@@23 Tclass.Maps.__default $h@@41)))) :qid |unknown.0:0| :skolemid |9440| :pattern ( ($IsAlloc $o@@23 Tclass.Maps.__default $h@@41)) )))
(assert  (=> true (forall ((Maps._default.IMapsTo$K T@U) (Maps._default.IMapsTo$V T@U) (|m#0@@17| T@U) (|k#0@@0| T@U) (|v#0@@6| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K) TyType) (= (type Maps._default.IMapsTo$V) TyType)) (= (type |m#0@@17|) (IMapType BoxType BoxType))) (= (type |k#0@@0|) BoxType)) (= (type |v#0@@6|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K Maps._default.IMapsTo$V |m#0@@17| |k#0@@0| |v#0@@6|) (and (and ($Is |m#0@@17| (TIMap Maps._default.IMapsTo$K Maps._default.IMapsTo$V)) ($IsBox |k#0@@0| Maps._default.IMapsTo$K)) ($IsBox |v#0@@6| Maps._default.IMapsTo$V)))) true) :qid |unknown.0:0| :skolemid |9441| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K Maps._default.IMapsTo$V |m#0@@17| |k#0@@0| |v#0@@6|)) ))))
(assert (forall ((Maps._default.IMapsTo$K@@0 T@U) (Maps._default.IMapsTo$V@@0 T@U) (|m#0@@18| T@U) (|k#0@@1| T@U) (|v#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@0) TyType) (= (type Maps._default.IMapsTo$V@@0) TyType)) (= (type |m#0@@18|) (IMapType BoxType BoxType))) (= (type |k#0@@1|) BoxType)) (= (type |v#0@@7|) BoxType)) (and (and ($Is |m#0@@18| (TIMap Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0)) ($IsBox |k#0@@1| Maps._default.IMapsTo$K@@0)) ($IsBox |v#0@@7| Maps._default.IMapsTo$V@@0))) (and (=> (|Maps.__default.IMapsTo#requires| Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0 |m#0@@18| |k#0@@1| |v#0@@7|) true) (=> true (|Maps.__default.IMapsTo#requires| Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0 |m#0@@18| |k#0@@1| |v#0@@7|)))) :qid |unknown.0:0| :skolemid |9442| :pattern ( (|Maps.__default.IMapsTo#requires| Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0 |m#0@@18| |k#0@@1| |v#0@@7|)) )))
(assert  (=> true (forall ((Maps._default.IMapsTo$K@@1 T@U) (Maps._default.IMapsTo$V@@1 T@U) (|m#0@@19| T@U) (|k#0@@2| T@U) (|v#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@1) TyType) (= (type Maps._default.IMapsTo$V@@1) TyType)) (= (type |m#0@@19|) (IMapType BoxType BoxType))) (= (type |k#0@@2|) BoxType)) (= (type |v#0@@8|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@19| |k#0@@2| |v#0@@8|) (and (and ($Is |m#0@@19| (TIMap Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1)) ($IsBox |k#0@@2| Maps._default.IMapsTo$K@@1)) ($IsBox |v#0@@8| Maps._default.IMapsTo$V@@1)))) (and (=> (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@19| |k#0@@2| |v#0@@8|) (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@19|) |k#0@@2|)) (= (MapType0Select (|IMap#Elements| |m#0@@19|) |k#0@@2|) |v#0@@8|))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@19|) |k#0@@2|)) (= (MapType0Select (|IMap#Elements| |m#0@@19|) |k#0@@2|) |v#0@@8|)) (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@19| |k#0@@2| |v#0@@8|)))) :qid |unknown.0:0| :skolemid |9443| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@19| |k#0@@2| |v#0@@8|)) ))))
(assert  (=> true (forall ((Maps._default.IMapsTo$K@@2 T@U) (Maps._default.IMapsTo$V@@2 T@U) (|m#0@@20| T@U) (|k#0@@3| T@U) (|v#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@2) TyType) (= (type Maps._default.IMapsTo$V@@2) TyType)) (= (type |m#0@@20|) (IMapType BoxType BoxType))) (= (type |k#0@@3|) BoxType)) (= (type |v#0@@9|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@20|) (Lit |k#0@@3|) (Lit |v#0@@9|)) (and (and ($Is |m#0@@20| (TIMap Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2)) ($IsBox |k#0@@3| Maps._default.IMapsTo$K@@2)) ($IsBox |v#0@@9| Maps._default.IMapsTo$V@@2)))) (and (=> (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@20|) (Lit |k#0@@3|) (Lit |v#0@@9|)) (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@20|) |k#0@@3|)) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@20|)) (Lit |k#0@@3|)) (Lit |v#0@@9|)))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@20|) |k#0@@3|)) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@20|)) (Lit |k#0@@3|)) (Lit |v#0@@9|))) (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@20|) (Lit |k#0@@3|) (Lit |v#0@@9|))))) :qid |unknown.0:0| :weight 3 :skolemid |9444| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@20|) (Lit |k#0@@3|) (Lit |v#0@@9|))) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K T@U) (Maps._default.MapsTo$V T@U) (|m#0@@21| T@U) (|k#0@@4| T@U) (|v#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K) TyType) (= (type Maps._default.MapsTo$V) TyType)) (= (type |m#0@@21|) (MapType BoxType BoxType))) (= (type |k#0@@4|) BoxType)) (= (type |v#0@@10|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K Maps._default.MapsTo$V |m#0@@21| |k#0@@4| |v#0@@10|) (and (and ($Is |m#0@@21| (TMap Maps._default.MapsTo$K Maps._default.MapsTo$V)) ($IsBox |k#0@@4| Maps._default.MapsTo$K)) ($IsBox |v#0@@10| Maps._default.MapsTo$V)))) true) :qid |unknown.0:0| :skolemid |9445| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K Maps._default.MapsTo$V |m#0@@21| |k#0@@4| |v#0@@10|)) ))))
(assert (forall ((Maps._default.MapsTo$K@@0 T@U) (Maps._default.MapsTo$V@@0 T@U) (|m#0@@22| T@U) (|k#0@@5| T@U) (|v#0@@11| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@0) TyType) (= (type Maps._default.MapsTo$V@@0) TyType)) (= (type |m#0@@22|) (MapType BoxType BoxType))) (= (type |k#0@@5|) BoxType)) (= (type |v#0@@11|) BoxType)) (and (and ($Is |m#0@@22| (TMap Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0)) ($IsBox |k#0@@5| Maps._default.MapsTo$K@@0)) ($IsBox |v#0@@11| Maps._default.MapsTo$V@@0))) (and (=> (|Maps.__default.MapsTo#requires| Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0 |m#0@@22| |k#0@@5| |v#0@@11|) true) (=> true (|Maps.__default.MapsTo#requires| Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0 |m#0@@22| |k#0@@5| |v#0@@11|)))) :qid |unknown.0:0| :skolemid |9446| :pattern ( (|Maps.__default.MapsTo#requires| Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0 |m#0@@22| |k#0@@5| |v#0@@11|)) )))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@1 T@U) (Maps._default.MapsTo$V@@1 T@U) (|m#0@@23| T@U) (|k#0@@6| T@U) (|v#0@@12| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@1) TyType) (= (type Maps._default.MapsTo$V@@1) TyType)) (= (type |m#0@@23|) (MapType BoxType BoxType))) (= (type |k#0@@6|) BoxType)) (= (type |v#0@@12|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@23| |k#0@@6| |v#0@@12|) (and (and ($Is |m#0@@23| (TMap Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1)) ($IsBox |k#0@@6| Maps._default.MapsTo$K@@1)) ($IsBox |v#0@@12| Maps._default.MapsTo$V@@1)))) (and (=> (Maps.__default.MapsTo Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@23| |k#0@@6| |v#0@@12|) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@23|) |k#0@@6|)) (= (MapType0Select (|Map#Elements| |m#0@@23|) |k#0@@6|) |v#0@@12|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@23|) |k#0@@6|)) (= (MapType0Select (|Map#Elements| |m#0@@23|) |k#0@@6|) |v#0@@12|)) (Maps.__default.MapsTo Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@23| |k#0@@6| |v#0@@12|)))) :qid |unknown.0:0| :skolemid |9447| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@23| |k#0@@6| |v#0@@12|)) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@2 T@U) (Maps._default.MapsTo$V@@2 T@U) (|m#0@@24| T@U) (|k#0@@7| T@U) (|v#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@2) TyType) (= (type Maps._default.MapsTo$V@@2) TyType)) (= (type |m#0@@24|) (MapType BoxType BoxType))) (= (type |k#0@@7|) BoxType)) (= (type |v#0@@13|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@24|) |k#0@@7| |v#0@@13|) (and (and ($Is |m#0@@24| (TMap Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2)) ($IsBox |k#0@@7| Maps._default.MapsTo$K@@2)) ($IsBox |v#0@@13| Maps._default.MapsTo$V@@2)))) (and (=> (Maps.__default.MapsTo Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@24|) |k#0@@7| |v#0@@13|) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@24|) |k#0@@7|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@24|)) |k#0@@7|) |v#0@@13|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@24|) |k#0@@7|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@24|)) |k#0@@7|) |v#0@@13|)) (Maps.__default.MapsTo Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@24|) |k#0@@7| |v#0@@13|)))) :qid |unknown.0:0| :weight 3 :skolemid |9448| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@24|) |k#0@@7| |v#0@@13|)) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@3 T@U) (Maps._default.MapsTo$V@@3 T@U) (|m#0@@25| T@U) (|k#0@@8| T@U) (|v#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@3) TyType) (= (type Maps._default.MapsTo$V@@3) TyType)) (= (type |m#0@@25|) (MapType BoxType BoxType))) (= (type |k#0@@8|) BoxType)) (= (type |v#0@@14|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@25|) (Lit |k#0@@8|) (Lit |v#0@@14|)) (and (and ($Is |m#0@@25| (TMap Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3)) ($IsBox |k#0@@8| Maps._default.MapsTo$K@@3)) ($IsBox |v#0@@14| Maps._default.MapsTo$V@@3)))) (and (=> (Maps.__default.MapsTo Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@25|) (Lit |k#0@@8|) (Lit |v#0@@14|)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@25|) |k#0@@8|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@25|)) (Lit |k#0@@8|)) (Lit |v#0@@14|)))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@25|) |k#0@@8|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@25|)) (Lit |k#0@@8|)) (Lit |v#0@@14|))) (Maps.__default.MapsTo Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@25|) (Lit |k#0@@8|) (Lit |v#0@@14|))))) :qid |unknown.0:0| :weight 3 :skolemid |9449| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@25|) (Lit |k#0@@8|) (Lit |v#0@@14|))) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K T@U) (Maps._default.MapsAgreeOnKey$V T@U) (|m#0@@26| T@U) (|m'#0@@1| T@U) (|k#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K) TyType) (= (type Maps._default.MapsAgreeOnKey$V) TyType)) (= (type |m#0@@26|) (MapType BoxType BoxType))) (= (type |m'#0@@1|) (MapType BoxType BoxType))) (= (type |k#0@@9|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V |m#0@@26| |m'#0@@1| |k#0@@9|) (and (and ($Is |m#0@@26| (TMap Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V)) ($Is |m'#0@@1| (TMap Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V))) ($IsBox |k#0@@9| Maps._default.MapsAgreeOnKey$K)))) true) :qid |unknown.0:0| :skolemid |9450| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V |m#0@@26| |m'#0@@1| |k#0@@9|)) ))))
(assert (forall ((Maps._default.MapsAgreeOnKey$K@@0 T@U) (Maps._default.MapsAgreeOnKey$V@@0 T@U) (|m#0@@27| T@U) (|m'#0@@2| T@U) (|k#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@0) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@0) TyType)) (= (type |m#0@@27|) (MapType BoxType BoxType))) (= (type |m'#0@@2|) (MapType BoxType BoxType))) (= (type |k#0@@10|) BoxType)) (and (and ($Is |m#0@@27| (TMap Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0)) ($Is |m'#0@@2| (TMap Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0))) ($IsBox |k#0@@10| Maps._default.MapsAgreeOnKey$K@@0))) (and (=> (|Maps.__default.MapsAgreeOnKey#requires| Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0 |m#0@@27| |m'#0@@2| |k#0@@10|) true) (=> true (|Maps.__default.MapsAgreeOnKey#requires| Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0 |m#0@@27| |m'#0@@2| |k#0@@10|)))) :qid |unknown.0:0| :skolemid |9451| :pattern ( (|Maps.__default.MapsAgreeOnKey#requires| Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0 |m#0@@27| |m'#0@@2| |k#0@@10|)) )))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@1 T@U) (Maps._default.MapsAgreeOnKey$V@@1 T@U) (|m#0@@28| T@U) (|m'#0@@3| T@U) (|k#0@@11| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@1) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@1) TyType)) (= (type |m#0@@28|) (MapType BoxType BoxType))) (= (type |m'#0@@3|) (MapType BoxType BoxType))) (= (type |k#0@@11|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@28| |m'#0@@3| |k#0@@11|) (and (and ($Is |m#0@@28| (TMap Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1)) ($Is |m'#0@@3| (TMap Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1))) ($IsBox |k#0@@11| Maps._default.MapsAgreeOnKey$K@@1)))) (and (=> (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@28| |m'#0@@3| |k#0@@11|) (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@28|) |k#0@@11|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@11|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@28|) |k#0@@11|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@11|))) (= (MapType0Select (|Map#Elements| |m#0@@28|) |k#0@@11|) (MapType0Select (|Map#Elements| |m'#0@@3|) |k#0@@11|))))) (=> (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@28|) |k#0@@11|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@11|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@28|) |k#0@@11|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@11|))) (= (MapType0Select (|Map#Elements| |m#0@@28|) |k#0@@11|) (MapType0Select (|Map#Elements| |m'#0@@3|) |k#0@@11|)))) (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@28| |m'#0@@3| |k#0@@11|)))) :qid |unknown.0:0| :skolemid |9452| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@28| |m'#0@@3| |k#0@@11|)) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@2 T@U) (Maps._default.MapsAgreeOnKey$V@@2 T@U) (|m#0@@29| T@U) (|m'#0@@4| T@U) (|k#0@@12| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@2) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@2) TyType)) (= (type |m#0@@29|) (MapType BoxType BoxType))) (= (type |m'#0@@4|) (MapType BoxType BoxType))) (= (type |k#0@@12|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@29|) (Lit |m'#0@@4|) |k#0@@12|) (and (and ($Is |m#0@@29| (TMap Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2)) ($Is |m'#0@@4| (TMap Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2))) ($IsBox |k#0@@12| Maps._default.MapsAgreeOnKey$K@@2)))) (and (=> (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@29|) (Lit |m'#0@@4|) |k#0@@12|) (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@29|) |k#0@@12|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@4|) |k#0@@12|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@29|) |k#0@@12|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@4|) |k#0@@12|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@29|)) |k#0@@12|) (MapType0Select (|Map#Elements| (Lit |m'#0@@4|)) |k#0@@12|))))) (=> (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@29|) |k#0@@12|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@4|) |k#0@@12|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@29|) |k#0@@12|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@4|) |k#0@@12|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@29|)) |k#0@@12|) (MapType0Select (|Map#Elements| (Lit |m'#0@@4|)) |k#0@@12|)))) (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@29|) (Lit |m'#0@@4|) |k#0@@12|)))) :qid |unknown.0:0| :weight 3 :skolemid |9453| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@29|) (Lit |m'#0@@4|) |k#0@@12|)) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@3 T@U) (Maps._default.MapsAgreeOnKey$V@@3 T@U) (|m#0@@30| T@U) (|m'#0@@5| T@U) (|k#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@3) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@3) TyType)) (= (type |m#0@@30|) (MapType BoxType BoxType))) (= (type |m'#0@@5|) (MapType BoxType BoxType))) (= (type |k#0@@13|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@30|) (Lit |m'#0@@5|) (Lit |k#0@@13|)) (and (and ($Is |m#0@@30| (TMap Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3)) ($Is |m'#0@@5| (TMap Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3))) ($IsBox |k#0@@13| Maps._default.MapsAgreeOnKey$K@@3)))) (and (=> (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@30|) (Lit |m'#0@@5|) (Lit |k#0@@13|)) (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@30|) |k#0@@13|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@5|) |k#0@@13|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@30|) |k#0@@13|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@5|) |k#0@@13|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@30|)) (Lit |k#0@@13|)) (MapType0Select (|Map#Elements| (Lit |m'#0@@5|)) (Lit |k#0@@13|)))))) (=> (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@30|) |k#0@@13|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@5|) |k#0@@13|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@30|) |k#0@@13|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@5|) |k#0@@13|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@30|)) (Lit |k#0@@13|)) (MapType0Select (|Map#Elements| (Lit |m'#0@@5|)) (Lit |k#0@@13|))))) (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@30|) (Lit |m'#0@@5|) (Lit |k#0@@13|))))) :qid |unknown.0:0| :weight 3 :skolemid |9454| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@30|) (Lit |m'#0@@5|) (Lit |k#0@@13|))) ))))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K T@U) (Maps._default.IMapsAgreeOnKey$V T@U) (|m#0@@31| T@U) (|m'#0@@6| T@U) (|k#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K) TyType) (= (type Maps._default.IMapsAgreeOnKey$V) TyType)) (= (type |m#0@@31|) (IMapType BoxType BoxType))) (= (type |m'#0@@6|) (IMapType BoxType BoxType))) (= (type |k#0@@14|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V |m#0@@31| |m'#0@@6| |k#0@@14|) (and (and ($Is |m#0@@31| (TIMap Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V)) ($Is |m'#0@@6| (TIMap Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V))) ($IsBox |k#0@@14| Maps._default.IMapsAgreeOnKey$K)))) true) :qid |unknown.0:0| :skolemid |9455| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V |m#0@@31| |m'#0@@6| |k#0@@14|)) ))))
(assert (forall ((Maps._default.IMapsAgreeOnKey$K@@0 T@U) (Maps._default.IMapsAgreeOnKey$V@@0 T@U) (|m#0@@32| T@U) (|m'#0@@7| T@U) (|k#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@0) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@0) TyType)) (= (type |m#0@@32|) (IMapType BoxType BoxType))) (= (type |m'#0@@7|) (IMapType BoxType BoxType))) (= (type |k#0@@15|) BoxType)) (and (and ($Is |m#0@@32| (TIMap Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0)) ($Is |m'#0@@7| (TIMap Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0))) ($IsBox |k#0@@15| Maps._default.IMapsAgreeOnKey$K@@0))) (and (=> (|Maps.__default.IMapsAgreeOnKey#requires| Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0 |m#0@@32| |m'#0@@7| |k#0@@15|) true) (=> true (|Maps.__default.IMapsAgreeOnKey#requires| Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0 |m#0@@32| |m'#0@@7| |k#0@@15|)))) :qid |unknown.0:0| :skolemid |9456| :pattern ( (|Maps.__default.IMapsAgreeOnKey#requires| Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0 |m#0@@32| |m'#0@@7| |k#0@@15|)) )))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K@@1 T@U) (Maps._default.IMapsAgreeOnKey$V@@1 T@U) (|m#0@@33| T@U) (|m'#0@@8| T@U) (|k#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@1) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@1) TyType)) (= (type |m#0@@33|) (IMapType BoxType BoxType))) (= (type |m'#0@@8|) (IMapType BoxType BoxType))) (= (type |k#0@@16|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@33| |m'#0@@8| |k#0@@16|) (and (and ($Is |m#0@@33| (TIMap Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1)) ($Is |m'#0@@8| (TIMap Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1))) ($IsBox |k#0@@16| Maps._default.IMapsAgreeOnKey$K@@1)))) (and (=> (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@33| |m'#0@@8| |k#0@@16|) (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@33|) |k#0@@16|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@8|) |k#0@@16|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@33|) |k#0@@16|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@8|) |k#0@@16|))) (= (MapType0Select (|IMap#Elements| |m#0@@33|) |k#0@@16|) (MapType0Select (|IMap#Elements| |m'#0@@8|) |k#0@@16|))))) (=> (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@33|) |k#0@@16|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@8|) |k#0@@16|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@33|) |k#0@@16|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@8|) |k#0@@16|))) (= (MapType0Select (|IMap#Elements| |m#0@@33|) |k#0@@16|) (MapType0Select (|IMap#Elements| |m'#0@@8|) |k#0@@16|)))) (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@33| |m'#0@@8| |k#0@@16|)))) :qid |unknown.0:0| :skolemid |9457| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@33| |m'#0@@8| |k#0@@16|)) ))))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K@@2 T@U) (Maps._default.IMapsAgreeOnKey$V@@2 T@U) (|m#0@@34| T@U) (|m'#0@@9| T@U) (|k#0@@17| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@2) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@2) TyType)) (= (type |m#0@@34|) (IMapType BoxType BoxType))) (= (type |m'#0@@9|) (IMapType BoxType BoxType))) (= (type |k#0@@17|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@34|) (Lit |m'#0@@9|) (Lit |k#0@@17|)) (and (and ($Is |m#0@@34| (TIMap Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2)) ($Is |m'#0@@9| (TIMap Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2))) ($IsBox |k#0@@17| Maps._default.IMapsAgreeOnKey$K@@2)))) (and (=> (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@34|) (Lit |m'#0@@9|) (Lit |k#0@@17|)) (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@34|) |k#0@@17|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@9|) |k#0@@17|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@34|) |k#0@@17|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@9|) |k#0@@17|))) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@34|)) (Lit |k#0@@17|)) (MapType0Select (|IMap#Elements| (Lit |m'#0@@9|)) (Lit |k#0@@17|)))))) (=> (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@34|) |k#0@@17|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@9|) |k#0@@17|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@34|) |k#0@@17|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@9|) |k#0@@17|))) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@34|)) (Lit |k#0@@17|)) (MapType0Select (|IMap#Elements| (Lit |m'#0@@9|)) (Lit |k#0@@17|))))) (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@34|) (Lit |m'#0@@9|) (Lit |k#0@@17|))))) :qid |unknown.0:0| :weight 3 :skolemid |9458| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@34|) (Lit |m'#0@@9|) (Lit |k#0@@17|))) ))))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K T@U) (Maps._default.IsSubIMap$V T@U) (|sub#0| T@U) (|sup#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K) TyType) (= (type Maps._default.IsSubIMap$V) TyType)) (= (type |sub#0|) (IMapType BoxType BoxType))) (= (type |sup#0|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V |sub#0| |sup#0|) (and ($Is |sub#0| (TIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V)) ($Is |sup#0| (TIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V))))) true) :qid |unknown.0:0| :skolemid |9459| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V |sub#0| |sup#0|)) ))))
(assert (forall ((Maps._default.IsSubIMap$K@@0 T@U) (Maps._default.IsSubIMap$V@@0 T@U) (|sub#0@@0| T@U) (|sup#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@0) TyType) (= (type Maps._default.IsSubIMap$V@@0) TyType)) (= (type |sub#0@@0|) (IMapType BoxType BoxType))) (= (type |sup#0@@0|) (IMapType BoxType BoxType))) (and ($Is |sub#0@@0| (TIMap Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0)) ($Is |sup#0@@0| (TIMap Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0)))) (and (=> (|Maps.__default.IsSubIMap#requires| Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0 |sub#0@@0| |sup#0@@0|) true) (=> true (|Maps.__default.IsSubIMap#requires| Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0 |sub#0@@0| |sup#0@@0|)))) :qid |unknown.0:0| :skolemid |9460| :pattern ( (|Maps.__default.IsSubIMap#requires| Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0 |sub#0@@0| |sup#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K@@1 T@U) (Maps._default.IsSubIMap$V@@1 T@U) (|sub#0@@1| T@U) (|sup#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@1) TyType) (= (type Maps._default.IsSubIMap$V@@1) TyType)) (= (type |sub#0@@1|) (IMapType BoxType BoxType))) (= (type |sup#0@@1|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|) (and ($Is |sub#0@@1| (TIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1)) ($Is |sup#0@@1| (TIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1))))) (and (=> (|ISet#Subset| (|IMap#Domain| |sub#0@@1|) (|IMap#Domain| |sup#0@@1|)) (forall ((|key#8| T@U) ) (!  (=> (and (and (= (type |key#8|) BoxType) ($IsBox |key#8| Maps._default.IsSubIMap$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#8|))) (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#8|)) :qid |Mapssdfy.28:16| :skolemid |9461| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#8|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#8|)) ))) (and (=> (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|) (and (|ISet#Subset| (|IMap#Domain| |sub#0@@1|) (|IMap#Domain| |sup#0@@1|)) (forall ((|key#8@@0| T@U) ) (!  (=> (and (and (= (type |key#8@@0|) BoxType) ($IsBox |key#8@@0| Maps._default.IsSubIMap$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#8@@0|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#8@@0|)) :qid |Mapssdfy.28:16| :skolemid |9462| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#8@@0|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#8@@0|)) )))) (=> (and (|ISet#Subset| (|IMap#Domain| |sub#0@@1|) (|IMap#Domain| |sup#0@@1|)) (forall ((|key#8@@1| T@U) ) (!  (=> (and (and (= (type |key#8@@1|) BoxType) ($IsBox |key#8@@1| Maps._default.IsSubIMap$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#8@@1|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#8@@1|)) :qid |Mapssdfy.28:16| :skolemid |9462| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#8@@1|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#8@@1|)) ))) (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|))))) :qid |unknown.0:0| :skolemid |9463| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|)) ))))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K@@2 T@U) (Maps._default.IsSubIMap$V@@2 T@U) (|sub#0@@2| T@U) (|sup#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@2) TyType) (= (type Maps._default.IsSubIMap$V@@2) TyType)) (= (type |sub#0@@2|) (IMapType BoxType BoxType))) (= (type |sup#0@@2|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|)) (and ($Is |sub#0@@2| (TIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2)) ($Is |sup#0@@2| (TIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2))))) (and (=> (|ISet#Subset| (|IMap#Domain| (Lit |sub#0@@2|)) (|IMap#Domain| (Lit |sup#0@@2|))) (forall ((|key#9| T@U) ) (!  (=> (and (and (= (type |key#9|) BoxType) ($IsBox |key#9| Maps._default.IsSubIMap$K@@2)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |sub#0@@2|))) |key#9|))) (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|) |key#9|)) :qid |Mapssdfy.28:16| :skolemid |9464| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 |sub#0@@2| |sup#0@@2| |key#9|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#9|)) ))) (and (=> (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|)) (and (|ISet#Subset| (|IMap#Domain| (Lit |sub#0@@2|)) (|IMap#Domain| (Lit |sup#0@@2|))) (forall ((|key#9@@0| T@U) ) (!  (=> (and (and (= (type |key#9@@0|) BoxType) ($IsBox |key#9@@0| Maps._default.IsSubIMap$K@@2)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |sub#0@@2|))) |key#9@@0|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|) |key#9@@0|)) :qid |Mapssdfy.28:16| :skolemid |9465| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 |sub#0@@2| |sup#0@@2| |key#9@@0|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#9@@0|)) )))) (=> (and (|ISet#Subset| (|IMap#Domain| (Lit |sub#0@@2|)) (|IMap#Domain| (Lit |sup#0@@2|))) (forall ((|key#9@@1| T@U) ) (!  (=> (and (and (= (type |key#9@@1|) BoxType) ($IsBox |key#9@@1| Maps._default.IsSubIMap$K@@2)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |sub#0@@2|))) |key#9@@1|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|) |key#9@@1|)) :qid |Mapssdfy.28:16| :skolemid |9465| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 |sub#0@@2| |sup#0@@2| |key#9@@1|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#9@@1|)) ))) (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|)))))) :qid |unknown.0:0| :weight 3 :skolemid |9466| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|))) ))))
(assert  (=> true (forall ((Maps._default.IsSubMap$K T@U) (Maps._default.IsSubMap$V T@U) (|sub#0@@3| T@U) (|sup#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K) TyType) (= (type Maps._default.IsSubMap$V) TyType)) (= (type |sub#0@@3|) (MapType BoxType BoxType))) (= (type |sup#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K Maps._default.IsSubMap$V |sub#0@@3| |sup#0@@3|) (and ($Is |sub#0@@3| (TMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V)) ($Is |sup#0@@3| (TMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V))))) true) :qid |unknown.0:0| :skolemid |9467| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V |sub#0@@3| |sup#0@@3|)) ))))
(assert (forall ((Maps._default.IsSubMap$K@@0 T@U) (Maps._default.IsSubMap$V@@0 T@U) (|sub#0@@4| T@U) (|sup#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@0) TyType) (= (type Maps._default.IsSubMap$V@@0) TyType)) (= (type |sub#0@@4|) (MapType BoxType BoxType))) (= (type |sup#0@@4|) (MapType BoxType BoxType))) (and ($Is |sub#0@@4| (TMap Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0)) ($Is |sup#0@@4| (TMap Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0)))) (and (=> (|Maps.__default.IsSubMap#requires| Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0 |sub#0@@4| |sup#0@@4|) true) (=> true (|Maps.__default.IsSubMap#requires| Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0 |sub#0@@4| |sup#0@@4|)))) :qid |unknown.0:0| :skolemid |9468| :pattern ( (|Maps.__default.IsSubMap#requires| Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0 |sub#0@@4| |sup#0@@4|)) )))
(assert  (=> true (forall ((Maps._default.IsSubMap$K@@1 T@U) (Maps._default.IsSubMap$V@@1 T@U) (|sub#0@@5| T@U) (|sup#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@1) TyType) (= (type Maps._default.IsSubMap$V@@1) TyType)) (= (type |sub#0@@5|) (MapType BoxType BoxType))) (= (type |sup#0@@5|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|) (and ($Is |sub#0@@5| (TMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1)) ($Is |sup#0@@5| (TMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1))))) (and (=> (|Set#Subset| (|Map#Domain| |sub#0@@5|) (|Map#Domain| |sup#0@@5|)) (forall ((|key#8@@2| T@U) ) (!  (=> (and (and (= (type |key#8@@2|) BoxType) ($IsBox |key#8@@2| Maps._default.IsSubMap$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| |sub#0@@5|) |key#8@@2|))) (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#8@@2|)) :qid |Mapssdfy.33:16| :skolemid |9469| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#8@@2|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@5|) |key#8@@2|)) ))) (and (=> (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|) (and (|Set#Subset| (|Map#Domain| |sub#0@@5|) (|Map#Domain| |sup#0@@5|)) (forall ((|key#8@@3| T@U) ) (!  (=> (and (and (= (type |key#8@@3|) BoxType) ($IsBox |key#8@@3| Maps._default.IsSubMap$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| |sub#0@@5|) |key#8@@3|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#8@@3|)) :qid |Mapssdfy.33:16| :skolemid |9470| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#8@@3|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@5|) |key#8@@3|)) )))) (=> (and (|Set#Subset| (|Map#Domain| |sub#0@@5|) (|Map#Domain| |sup#0@@5|)) (forall ((|key#8@@4| T@U) ) (!  (=> (and (and (= (type |key#8@@4|) BoxType) ($IsBox |key#8@@4| Maps._default.IsSubMap$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| |sub#0@@5|) |key#8@@4|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#8@@4|)) :qid |Mapssdfy.33:16| :skolemid |9470| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#8@@4|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@5|) |key#8@@4|)) ))) (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|))))) :qid |unknown.0:0| :skolemid |9471| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|)) ))))
(assert  (=> true (forall ((Maps._default.IsSubMap$K@@2 T@U) (Maps._default.IsSubMap$V@@2 T@U) (|sub#0@@6| T@U) (|sup#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@2) TyType) (= (type Maps._default.IsSubMap$V@@2) TyType)) (= (type |sub#0@@6|) (MapType BoxType BoxType))) (= (type |sup#0@@6|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|)) (and ($Is |sub#0@@6| (TMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2)) ($Is |sup#0@@6| (TMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2))))) (and (=> (|Set#Subset| (|Map#Domain| (Lit |sub#0@@6|)) (|Map#Domain| (Lit |sup#0@@6|))) (forall ((|key#9@@2| T@U) ) (!  (=> (and (and (= (type |key#9@@2|) BoxType) ($IsBox |key#9@@2| Maps._default.IsSubMap$K@@2)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |sub#0@@6|))) |key#9@@2|))) (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|) |key#9@@2|)) :qid |Mapssdfy.33:16| :skolemid |9472| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 |sub#0@@6| |sup#0@@6| |key#9@@2|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@6|) |key#9@@2|)) ))) (and (=> (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|)) (and (|Set#Subset| (|Map#Domain| (Lit |sub#0@@6|)) (|Map#Domain| (Lit |sup#0@@6|))) (forall ((|key#9@@3| T@U) ) (!  (=> (and (and (= (type |key#9@@3|) BoxType) ($IsBox |key#9@@3| Maps._default.IsSubMap$K@@2)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |sub#0@@6|))) |key#9@@3|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|) |key#9@@3|)) :qid |Mapssdfy.33:16| :skolemid |9473| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 |sub#0@@6| |sup#0@@6| |key#9@@3|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@6|) |key#9@@3|)) )))) (=> (and (|Set#Subset| (|Map#Domain| (Lit |sub#0@@6|)) (|Map#Domain| (Lit |sup#0@@6|))) (forall ((|key#9@@4| T@U) ) (!  (=> (and (and (= (type |key#9@@4|) BoxType) ($IsBox |key#9@@4| Maps._default.IsSubMap$K@@2)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |sub#0@@6|))) |key#9@@4|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|) |key#9@@4|)) :qid |Mapssdfy.33:16| :skolemid |9473| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 |sub#0@@6| |sup#0@@6| |key#9@@4|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@6|) |key#9@@4|)) ))) (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|)))))) :qid |unknown.0:0| :weight 3 :skolemid |9474| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|))) ))))
(assert (forall ((arg0@@271 T@U) (arg1@@152 T@U) (arg2@@91 T@U) (arg3@@63 T@U) (arg4@@44 T@U) ) (! (= (type (Maps.__default.MapRemove arg0@@271 arg1@@152 arg2@@91 arg3@@63 arg4@@44)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove| :pattern ( (Maps.__default.MapRemove arg0@@271 arg1@@152 arg2@@91 arg3@@63 arg4@@44)) )))
(assert (forall ((Maps._default.MapRemove$K T@U) (Maps._default.MapRemove$V T@U) ($ly@@277 T@U) (|m#0@@35| T@U) (|ks#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove$K) TyType) (= (type Maps._default.MapRemove$V) TyType)) (= (type $ly@@277) LayerTypeType)) (= (type |m#0@@35|) (MapType BoxType BoxType))) (= (type |ks#0|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V ($LS $ly@@277) |m#0@@35| |ks#0|) (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V $ly@@277 |m#0@@35| |ks#0|))) :qid |unknown.0:0| :skolemid |9475| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V ($LS $ly@@277) |m#0@@35| |ks#0|)) )))
(assert (forall ((Maps._default.MapRemove$K@@0 T@U) (Maps._default.MapRemove$V@@0 T@U) ($ly@@278 T@U) (|m#0@@36| T@U) (|ks#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove$K@@0) TyType) (= (type Maps._default.MapRemove$V@@0) TyType)) (= (type $ly@@278) LayerTypeType)) (= (type |m#0@@36|) (MapType BoxType BoxType))) (= (type |ks#0@@0|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 $ly@@278 |m#0@@36| |ks#0@@0|) (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 $LZ |m#0@@36| |ks#0@@0|))) :qid |unknown.0:0| :skolemid |9476| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 (AsFuelBottom $ly@@278) |m#0@@36| |ks#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@1 T@U) (Maps._default.MapRemove$V@@1 T@U) ($ly@@279 T@U) (|m#0@@37| T@U) (|ks#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@1) TyType) (= (type Maps._default.MapRemove$V@@1) TyType)) (= (type $ly@@279) LayerTypeType)) (= (type |m#0@@37|) (MapType BoxType BoxType))) (= (type |ks#0@@1|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 |m#0@@37| |ks#0@@1|) (and ($Is |m#0@@37| (TMap Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1)) ($Is |ks#0@@1| (TSet Maps._default.MapRemove$K@@1))))) (and (and (and (and (and (forall ((|k#8| T@U) ) (!  (=> (and (and (= (type |k#8|) BoxType) ($IsBox |k#8| Maps._default.MapRemove$K@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@37|) |k#8|)) (not (U_2_bool (MapType0Select |ks#0@@1| |k#8|))))) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@279 |m#0@@37| |ks#0@@1|)) |k#8|))) :qid |Mapssdfy.37:20| :skolemid |9477| :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@279 |m#0@@37| |ks#0@@1|)) |k#8|)) :pattern ( (MapType0Select |ks#0@@1| |k#8|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@37|) |k#8|)) )) (forall ((|k#9| T@U) ) (!  (=> (and (= (type |k#9|) BoxType) ($IsBox |k#9| Maps._default.MapRemove$K@@1)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@279 |m#0@@37| |ks#0@@1|)) |k#9|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@37|) |k#9|))) (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@279 |m#0@@37| |ks#0@@1|)) |k#9|)) (not (U_2_bool (MapType0Select |ks#0@@1| |k#9|)))))) :qid |Mapssdfy.38:20| :skolemid |9478| :pattern ( (MapType0Select |ks#0@@1| |k#9|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@37|) |k#9|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@279 |m#0@@37| |ks#0@@1|)) |k#9|)) ))) (forall ((|j#5@@0| T@U) ) (!  (=> (and (and (= (type |j#5@@0|) BoxType) ($IsBox |j#5@@0| Maps._default.MapRemove$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@279 |m#0@@37| |ks#0@@1|)) |j#5@@0|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@279 |m#0@@37| |ks#0@@1|)) |j#5@@0|) (MapType0Select (|Map#Elements| |m#0@@37|) |j#5@@0|))) :qid |Mapssdfy.39:20| :skolemid |9479| :pattern ( (MapType0Select (|Map#Elements| |m#0@@37|) |j#5@@0|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@279 |m#0@@37| |ks#0@@1|)) |j#5@@0|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@279 |m#0@@37| |ks#0@@1|)) |j#5@@0|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@279 |m#0@@37| |ks#0@@1|))) (|Set#Card| (|Map#Domain| |m#0@@37|)))) (<= (|Map#Card| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@279 |m#0@@37| |ks#0@@1|)) (|Map#Card| |m#0@@37|))) ($Is (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@279 |m#0@@37| |ks#0@@1|) (TMap Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1)))) :qid |unknown.0:0| :skolemid |9480| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@279 |m#0@@37| |ks#0@@1|)) ))))
(assert (forall ((Maps._default.MapRemove$K@@2 T@U) (Maps._default.MapRemove$V@@2 T@U) ($ly@@280 T@U) (|m#0@@38| T@U) (|ks#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@2) TyType) (= (type Maps._default.MapRemove$V@@2) TyType)) (= (type $ly@@280) LayerTypeType)) (= (type |m#0@@38|) (MapType BoxType BoxType))) (= (type |ks#0@@2|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@38| (TMap Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2)) ($Is |ks#0@@2| (TSet Maps._default.MapRemove$K@@2)))) (and (=> (|Maps.__default.MapRemove#requires| Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2 $ly@@280 |m#0@@38| |ks#0@@2|) true) (=> true (|Maps.__default.MapRemove#requires| Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2 $ly@@280 |m#0@@38| |ks#0@@2|)))) :qid |unknown.0:0| :skolemid |9481| :pattern ( (|Maps.__default.MapRemove#requires| Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2 $ly@@280 |m#0@@38| |ks#0@@2|)) )))
(assert  (and (forall ((arg0@@272 T@U) (arg1@@153 T@U) (arg2@@92 T@U) ) (! (= (type (|lambda#69| arg0@@272 arg1@@153 arg2@@92)) (MapType0Type BoxType boolType)) :qid |funType:lambda#69| :pattern ( (|lambda#69| arg0@@272 arg1@@153 arg2@@92)) )) (forall ((arg0@@273 T@U) ) (! (= (type (|lambda#70| arg0@@273)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#70| :pattern ( (|lambda#70| arg0@@273)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@3 T@U) (Maps._default.MapRemove$V@@3 T@U) ($ly@@281 T@U) (|m#0@@39| T@U) (|ks#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@3) TyType) (= (type Maps._default.MapRemove$V@@3) TyType)) (= (type $ly@@281) LayerTypeType)) (= (type |m#0@@39|) (MapType BoxType BoxType))) (= (type |ks#0@@3|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 |m#0@@39| |ks#0@@3|) (and ($Is |m#0@@39| (TMap Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3)) ($Is |ks#0@@3| (TSet Maps._default.MapRemove$K@@3))))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 ($LS $ly@@281) |m#0@@39| |ks#0@@3|) (let ((|m'#8| (|Map#Glue| (|lambda#69| Maps._default.MapRemove$K@@3 (|Map#Domain| |m#0@@39|) |ks#0@@3|) (|lambda#70| (|Map#Elements| |m#0@@39|)) (TMap Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3)))) |m'#8|))) :qid |unknown.0:0| :skolemid |9482| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 ($LS $ly@@281) |m#0@@39| |ks#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@4 T@U) (Maps._default.MapRemove$V@@4 T@U) ($ly@@282 T@U) (|m#0@@40| T@U) (|ks#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@4) TyType) (= (type Maps._default.MapRemove$V@@4) TyType)) (= (type $ly@@282) LayerTypeType)) (= (type |m#0@@40|) (MapType BoxType BoxType))) (= (type |ks#0@@4|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 (Lit |m#0@@40|) (Lit |ks#0@@4|)) (and ($Is |m#0@@40| (TMap Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4)) ($Is |ks#0@@4| (TSet Maps._default.MapRemove$K@@4))))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 ($LS $ly@@282) (Lit |m#0@@40|) (Lit |ks#0@@4|)) (let ((|m'#9| (|Map#Glue| (|lambda#69| Maps._default.MapRemove$K@@4 (|Map#Domain| |m#0@@40|) (Lit |ks#0@@4|)) (|lambda#70| (|Map#Elements| (Lit |m#0@@40|))) (TMap Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4)))) |m'#9|))) :qid |unknown.0:0| :weight 3 :skolemid |9483| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 ($LS $ly@@282) (Lit |m#0@@40|) (Lit |ks#0@@4|))) ))))
(assert (forall ((arg0@@274 T@U) (arg1@@154 T@U) (arg2@@93 T@U) (arg3@@64 T@U) (arg4@@45 T@U) ) (! (= (type (Maps.__default.MapRemoveStrong arg0@@274 arg1@@154 arg2@@93 arg3@@64 arg4@@45)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemoveStrong| :pattern ( (Maps.__default.MapRemoveStrong arg0@@274 arg1@@154 arg2@@93 arg3@@64 arg4@@45)) )))
(assert (forall ((Maps._default.MapRemoveStrong$K T@U) (Maps._default.MapRemoveStrong$V T@U) ($ly@@283 T@U) (|m#0@@41| T@U) (|ks#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemoveStrong$K) TyType) (= (type Maps._default.MapRemoveStrong$V) TyType)) (= (type $ly@@283) LayerTypeType)) (= (type |m#0@@41|) (MapType BoxType BoxType))) (= (type |ks#0@@5|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V ($LS $ly@@283) |m#0@@41| |ks#0@@5|) (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V $ly@@283 |m#0@@41| |ks#0@@5|))) :qid |unknown.0:0| :skolemid |9484| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V ($LS $ly@@283) |m#0@@41| |ks#0@@5|)) )))
(assert (forall ((Maps._default.MapRemoveStrong$K@@0 T@U) (Maps._default.MapRemoveStrong$V@@0 T@U) ($ly@@284 T@U) (|m#0@@42| T@U) (|ks#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@0) TyType) (= (type Maps._default.MapRemoveStrong$V@@0) TyType)) (= (type $ly@@284) LayerTypeType)) (= (type |m#0@@42|) (MapType BoxType BoxType))) (= (type |ks#0@@6|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 $ly@@284 |m#0@@42| |ks#0@@6|) (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 $LZ |m#0@@42| |ks#0@@6|))) :qid |unknown.0:0| :skolemid |9485| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 (AsFuelBottom $ly@@284) |m#0@@42| |ks#0@@6|)) )))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@1 T@U) (Maps._default.MapRemoveStrong$V@@1 T@U) ($ly@@285 T@U) (|m#0@@43| T@U) (|ks#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@1) TyType) (= (type Maps._default.MapRemoveStrong$V@@1) TyType)) (= (type $ly@@285) LayerTypeType)) (= (type |m#0@@43|) (MapType BoxType BoxType))) (= (type |ks#0@@7|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 |m#0@@43| |ks#0@@7|) (and ($Is |m#0@@43| (TMap Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1)) ($Is |ks#0@@7| (TSet Maps._default.MapRemoveStrong$K@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@285 |m#0@@43| |ks#0@@7|)) (|Set#Difference| (|Map#Domain| |m#0@@43|) |ks#0@@7|)) (forall ((|j#4| T@U) ) (!  (=> (and (and (= (type |j#4|) BoxType) ($IsBox |j#4| Maps._default.MapRemoveStrong$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@285 |m#0@@43| |ks#0@@7|)) |j#4|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@285 |m#0@@43| |ks#0@@7|)) |j#4|) (MapType0Select (|Map#Elements| |m#0@@43|) |j#4|))) :qid |Mapssdfy.50:20| :skolemid |9486| :pattern ( (MapType0Select (|Map#Elements| |m#0@@43|) |j#4|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@285 |m#0@@43| |ks#0@@7|)) |j#4|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@285 |m#0@@43| |ks#0@@7|)) |j#4|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@285 |m#0@@43| |ks#0@@7|))) (|Set#Card| (|Map#Domain| |m#0@@43|)))) (<= (|Map#Card| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@285 |m#0@@43| |ks#0@@7|)) (|Map#Card| |m#0@@43|))) ($Is (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@285 |m#0@@43| |ks#0@@7|) (TMap Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1)))) :qid |unknown.0:0| :skolemid |9487| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@285 |m#0@@43| |ks#0@@7|)) ))))
(assert (forall ((Maps._default.MapRemoveStrong$K@@2 T@U) (Maps._default.MapRemoveStrong$V@@2 T@U) ($ly@@286 T@U) (|m#0@@44| T@U) (|ks#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@2) TyType) (= (type Maps._default.MapRemoveStrong$V@@2) TyType)) (= (type $ly@@286) LayerTypeType)) (= (type |m#0@@44|) (MapType BoxType BoxType))) (= (type |ks#0@@8|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@44| (TMap Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2)) ($Is |ks#0@@8| (TSet Maps._default.MapRemoveStrong$K@@2)))) (and (=> (|Maps.__default.MapRemoveStrong#requires| Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2 $ly@@286 |m#0@@44| |ks#0@@8|) true) (=> true (|Maps.__default.MapRemoveStrong#requires| Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2 $ly@@286 |m#0@@44| |ks#0@@8|)))) :qid |unknown.0:0| :skolemid |9488| :pattern ( (|Maps.__default.MapRemoveStrong#requires| Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2 $ly@@286 |m#0@@44| |ks#0@@8|)) )))
(assert  (and (and (= (type StartFuel_Maps._default.MapRemove) LayerTypeType) (= (type MoreFuel_Maps._default.MapRemove8) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemove) LayerTypeType)))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@3 T@U) (Maps._default.MapRemoveStrong$V@@3 T@U) ($ly@@287 T@U) (|m#0@@45| T@U) (|ks#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@3) TyType) (= (type Maps._default.MapRemoveStrong$V@@3) TyType)) (= (type $ly@@287) LayerTypeType)) (= (type |m#0@@45|) (MapType BoxType BoxType))) (= (type |ks#0@@9|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 |m#0@@45| |ks#0@@9|) (and ($Is |m#0@@45| (TMap Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3)) ($Is |ks#0@@9| (TSet Maps._default.MapRemoveStrong$K@@3))))) (and (|Maps.__default.MapRemove#canCall| Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 |m#0@@45| |ks#0@@9|) (and (and (and (= StartFuel_Maps._default.MapRemove ($LS MoreFuel_Maps._default.MapRemove8)) (= StartFuelAssert_Maps._default.MapRemove ($LS ($LS MoreFuel_Maps._default.MapRemove8)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove8) MoreFuel_Maps._default.MapRemove8)) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 ($LS $ly@@287) |m#0@@45| |ks#0@@9|) (Maps.__default.MapRemove Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 StartFuel_Maps._default.MapRemove |m#0@@45| |ks#0@@9|))))) :qid |unknown.0:0| :skolemid |9489| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 ($LS $ly@@287) |m#0@@45| |ks#0@@9|)) ))))
(assert (= (type MoreFuel_Maps._default.MapRemove9) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@4 T@U) (Maps._default.MapRemoveStrong$V@@4 T@U) ($ly@@288 T@U) (|m#0@@46| T@U) (|ks#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@4) TyType) (= (type Maps._default.MapRemoveStrong$V@@4) TyType)) (= (type $ly@@288) LayerTypeType)) (= (type |m#0@@46|) (MapType BoxType BoxType))) (= (type |ks#0@@10|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 (Lit |m#0@@46|) (Lit |ks#0@@10|)) (and ($Is |m#0@@46| (TMap Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4)) ($Is |ks#0@@10| (TSet Maps._default.MapRemoveStrong$K@@4))))) (and (|Maps.__default.MapRemove#canCall| Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 (Lit |m#0@@46|) (Lit |ks#0@@10|)) (and (and (and (= StartFuel_Maps._default.MapRemove ($LS MoreFuel_Maps._default.MapRemove9)) (= StartFuelAssert_Maps._default.MapRemove ($LS ($LS MoreFuel_Maps._default.MapRemove9)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove9) MoreFuel_Maps._default.MapRemove9)) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 ($LS $ly@@288) (Lit |m#0@@46|) (Lit |ks#0@@10|)) (Maps.__default.MapRemove Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 StartFuel_Maps._default.MapRemove (Lit |m#0@@46|) (Lit |ks#0@@10|)))))) :qid |unknown.0:0| :weight 3 :skolemid |9490| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 ($LS $ly@@288) (Lit |m#0@@46|) (Lit |ks#0@@10|))) ))))
(assert (forall ((arg0@@275 T@U) (arg1@@155 T@U) (arg2@@94 T@U) (arg3@@65 T@U) (arg4@@46 T@U) ) (! (= (type (Maps.__default.MapRemove1 arg0@@275 arg1@@155 arg2@@94 arg3@@65 arg4@@46)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove1| :pattern ( (Maps.__default.MapRemove1 arg0@@275 arg1@@155 arg2@@94 arg3@@65 arg4@@46)) )))
(assert (forall ((Maps._default.MapRemove1$K T@U) (Maps._default.MapRemove1$V T@U) ($ly@@289 T@U) (|m#0@@47| T@U) (|k#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K) TyType) (= (type Maps._default.MapRemove1$V) TyType)) (= (type $ly@@289) LayerTypeType)) (= (type |m#0@@47|) (MapType BoxType BoxType))) (= (type |k#0@@18|) BoxType)) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V ($LS $ly@@289) |m#0@@47| |k#0@@18|) (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V $ly@@289 |m#0@@47| |k#0@@18|))) :qid |unknown.0:0| :skolemid |9491| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V ($LS $ly@@289) |m#0@@47| |k#0@@18|)) )))
(assert (forall ((Maps._default.MapRemove1$K@@0 T@U) (Maps._default.MapRemove1$V@@0 T@U) ($ly@@290 T@U) (|m#0@@48| T@U) (|k#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K@@0) TyType) (= (type Maps._default.MapRemove1$V@@0) TyType)) (= (type $ly@@290) LayerTypeType)) (= (type |m#0@@48|) (MapType BoxType BoxType))) (= (type |k#0@@19|) BoxType)) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0 $ly@@290 |m#0@@48| |k#0@@19|) (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0 $LZ |m#0@@48| |k#0@@19|))) :qid |unknown.0:0| :skolemid |9492| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0 (AsFuelBottom $ly@@290) |m#0@@48| |k#0@@19|)) )))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@1 T@U) (Maps._default.MapRemove1$V@@1 T@U) ($ly@@291 T@U) (|m#0@@49| T@U) (|k#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@1) TyType) (= (type Maps._default.MapRemove1$V@@1) TyType)) (= (type $ly@@291) LayerTypeType)) (= (type |m#0@@49|) (MapType BoxType BoxType))) (= (type |k#0@@20|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 |m#0@@49| |k#0@@20|) (and ($Is |m#0@@49| (TMap Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1)) ($IsBox |k#0@@20| Maps._default.MapRemove1$K@@1)))) (and (and (and (and (and (and (forall ((|j#13| T@U) ) (!  (=> (and (and (= (type |j#13|) BoxType) ($IsBox |j#13| Maps._default.MapRemove1$K@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@49|) |j#13|)) (not (= |j#13| |k#0@@20|)))) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@291 |m#0@@49| |k#0@@20|)) |j#13|))) :qid |Mapssdfy.59:20| :skolemid |9493| :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@291 |m#0@@49| |k#0@@20|)) |j#13|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@49|) |j#13|)) )) (forall ((|j#14| T@U) ) (!  (=> (and (= (type |j#14|) BoxType) ($IsBox |j#14| Maps._default.MapRemove1$K@@1)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@291 |m#0@@49| |k#0@@20|)) |j#14|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@49|) |j#14|))) (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@291 |m#0@@49| |k#0@@20|)) |j#14|)) (not (= |j#14| |k#0@@20|))))) :qid |Mapssdfy.60:20| :skolemid |9494| :pattern ( (MapType0Select (|Map#Domain| |m#0@@49|) |j#14|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@291 |m#0@@49| |k#0@@20|)) |j#14|)) ))) (forall ((|j#15| T@U) ) (!  (=> (and (and (= (type |j#15|) BoxType) ($IsBox |j#15| Maps._default.MapRemove1$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@291 |m#0@@49| |k#0@@20|)) |j#15|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@291 |m#0@@49| |k#0@@20|)) |j#15|) (MapType0Select (|Map#Elements| |m#0@@49|) |j#15|))) :qid |Mapssdfy.61:20| :skolemid |9495| :pattern ( (MapType0Select (|Map#Elements| |m#0@@49|) |j#15|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@291 |m#0@@49| |k#0@@20|)) |j#15|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@291 |m#0@@49| |k#0@@20|)) |j#15|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@291 |m#0@@49| |k#0@@20|))) (|Set#Card| (|Map#Domain| |m#0@@49|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@49|) |k#0@@20|)) (= (|Map#Card| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@291 |m#0@@49| |k#0@@20|)) (- (|Map#Card| |m#0@@49|) 1)))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@49|) |k#0@@20|))) (= (|Map#Card| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@291 |m#0@@49| |k#0@@20|)) (|Map#Card| |m#0@@49|)))) ($Is (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@291 |m#0@@49| |k#0@@20|) (TMap Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1)))) :qid |unknown.0:0| :skolemid |9496| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@291 |m#0@@49| |k#0@@20|)) ))))
(assert (forall ((Maps._default.MapRemove1$K@@2 T@U) (Maps._default.MapRemove1$V@@2 T@U) ($ly@@292 T@U) (|m#0@@50| T@U) (|k#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@2) TyType) (= (type Maps._default.MapRemove1$V@@2) TyType)) (= (type $ly@@292) LayerTypeType)) (= (type |m#0@@50|) (MapType BoxType BoxType))) (= (type |k#0@@21|) BoxType)) (and ($Is |m#0@@50| (TMap Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2)) ($IsBox |k#0@@21| Maps._default.MapRemove1$K@@2))) (and (=> (|Maps.__default.MapRemove1#requires| Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 $ly@@292 |m#0@@50| |k#0@@21|) true) (=> true (|Maps.__default.MapRemove1#requires| Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 $ly@@292 |m#0@@50| |k#0@@21|)))) :qid |unknown.0:0| :skolemid |9497| :pattern ( (|Maps.__default.MapRemove1#requires| Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 $ly@@292 |m#0@@50| |k#0@@21|)) )))
(assert (forall ((arg0@@276 T@U) (arg1@@156 T@U) (arg2@@95 T@U) ) (! (= (type (|lambda#73| arg0@@276 arg1@@156 arg2@@95)) (MapType0Type BoxType boolType)) :qid |funType:lambda#73| :pattern ( (|lambda#73| arg0@@276 arg1@@156 arg2@@95)) )))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@3 T@U) (Maps._default.MapRemove1$V@@3 T@U) ($ly@@293 T@U) (|m#0@@51| T@U) (|k#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@3) TyType) (= (type Maps._default.MapRemove1$V@@3) TyType)) (= (type $ly@@293) LayerTypeType)) (= (type |m#0@@51|) (MapType BoxType BoxType))) (= (type |k#0@@22|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 |m#0@@51| |k#0@@22|) (and ($Is |m#0@@51| (TMap Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3)) ($IsBox |k#0@@22| Maps._default.MapRemove1$K@@3)))) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 ($LS $ly@@293) |m#0@@51| |k#0@@22|) (let ((|m'#12| (|Map#Glue| (|lambda#73| Maps._default.MapRemove1$K@@3 (|Map#Domain| |m#0@@51|) |k#0@@22|) (|lambda#70| (|Map#Elements| |m#0@@51|)) (TMap Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3)))) |m'#12|))) :qid |unknown.0:0| :skolemid |9498| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 ($LS $ly@@293) |m#0@@51| |k#0@@22|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@4 T@U) (Maps._default.MapRemove1$V@@4 T@U) ($ly@@294 T@U) (|m#0@@52| T@U) (|k#0@@23| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@4) TyType) (= (type Maps._default.MapRemove1$V@@4) TyType)) (= (type $ly@@294) LayerTypeType)) (= (type |m#0@@52|) (MapType BoxType BoxType))) (= (type |k#0@@23|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4 (Lit |m#0@@52|) |k#0@@23|) (and ($Is |m#0@@52| (TMap Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4)) ($IsBox |k#0@@23| Maps._default.MapRemove1$K@@4)))) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4 ($LS $ly@@294) (Lit |m#0@@52|) |k#0@@23|) (let ((|m'#13| (|Map#Glue| (|lambda#73| Maps._default.MapRemove1$K@@4 (|Map#Domain| |m#0@@52|) |k#0@@23|) (|lambda#70| (|Map#Elements| (Lit |m#0@@52|))) (TMap Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4)))) |m'#13|))) :qid |unknown.0:0| :weight 3 :skolemid |9499| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4 ($LS $ly@@294) (Lit |m#0@@52|) |k#0@@23|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@5 T@U) (Maps._default.MapRemove1$V@@5 T@U) ($ly@@295 T@U) (|m#0@@53| T@U) (|k#0@@24| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@5) TyType) (= (type Maps._default.MapRemove1$V@@5) TyType)) (= (type $ly@@295) LayerTypeType)) (= (type |m#0@@53|) (MapType BoxType BoxType))) (= (type |k#0@@24|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5 (Lit |m#0@@53|) (Lit |k#0@@24|)) (and ($Is |m#0@@53| (TMap Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5)) ($IsBox |k#0@@24| Maps._default.MapRemove1$K@@5)))) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5 ($LS $ly@@295) (Lit |m#0@@53|) (Lit |k#0@@24|)) (let ((|m'#14| (|Map#Glue| (|lambda#73| Maps._default.MapRemove1$K@@5 (|Map#Domain| |m#0@@53|) |k#0@@24|) (|lambda#70| (|Map#Elements| (Lit |m#0@@53|))) (TMap Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5)))) |m'#14|))) :qid |unknown.0:0| :weight 3 :skolemid |9500| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5 ($LS $ly@@295) (Lit |m#0@@53|) (Lit |k#0@@24|))) ))))
(assert (forall ((arg0@@277 T@U) (arg1@@157 T@U) (arg2@@96 T@U) (arg3@@66 T@U) (arg4@@47 T@U) ) (! (= (type (Maps.__default.MapRemove1Strong arg0@@277 arg1@@157 arg2@@96 arg3@@66 arg4@@47)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove1Strong| :pattern ( (Maps.__default.MapRemove1Strong arg0@@277 arg1@@157 arg2@@96 arg3@@66 arg4@@47)) )))
(assert (forall ((Maps._default.MapRemove1Strong$K T@U) (Maps._default.MapRemove1Strong$V T@U) ($ly@@296 T@U) (|m#0@@54| T@U) (|k#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1Strong$K) TyType) (= (type Maps._default.MapRemove1Strong$V) TyType)) (= (type $ly@@296) LayerTypeType)) (= (type |m#0@@54|) (MapType BoxType BoxType))) (= (type |k#0@@25|) BoxType)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V ($LS $ly@@296) |m#0@@54| |k#0@@25|) (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V $ly@@296 |m#0@@54| |k#0@@25|))) :qid |unknown.0:0| :skolemid |9501| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V ($LS $ly@@296) |m#0@@54| |k#0@@25|)) )))
(assert (forall ((Maps._default.MapRemove1Strong$K@@0 T@U) (Maps._default.MapRemove1Strong$V@@0 T@U) ($ly@@297 T@U) (|m#0@@55| T@U) (|k#0@@26| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@0) TyType) (= (type Maps._default.MapRemove1Strong$V@@0) TyType)) (= (type $ly@@297) LayerTypeType)) (= (type |m#0@@55|) (MapType BoxType BoxType))) (= (type |k#0@@26|) BoxType)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 $ly@@297 |m#0@@55| |k#0@@26|) (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 $LZ |m#0@@55| |k#0@@26|))) :qid |unknown.0:0| :skolemid |9502| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 (AsFuelBottom $ly@@297) |m#0@@55| |k#0@@26|)) )))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@1 T@U) (Maps._default.MapRemove1Strong$V@@1 T@U) ($ly@@298 T@U) (|m#0@@56| T@U) (|k#0@@27| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@1) TyType) (= (type Maps._default.MapRemove1Strong$V@@1) TyType)) (= (type $ly@@298) LayerTypeType)) (= (type |m#0@@56|) (MapType BoxType BoxType))) (= (type |k#0@@27|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 |m#0@@56| |k#0@@27|) (and ($Is |m#0@@56| (TMap Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1)) ($IsBox |k#0@@27| Maps._default.MapRemove1Strong$K@@1)))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@298 |m#0@@56| |k#0@@27|)) (|Set#Difference| (|Map#Domain| |m#0@@56|) (|Set#UnionOne| (|Set#Empty| BoxType) |k#0@@27|))) (forall ((|j#4@@0| T@U) ) (!  (=> (and (and (= (type |j#4@@0|) BoxType) ($IsBox |j#4@@0| Maps._default.MapRemove1Strong$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@298 |m#0@@56| |k#0@@27|)) |j#4@@0|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@298 |m#0@@56| |k#0@@27|)) |j#4@@0|) (MapType0Select (|Map#Elements| |m#0@@56|) |j#4@@0|))) :qid |Mapssdfy.76:20| :skolemid |9503| :pattern ( (MapType0Select (|Map#Elements| |m#0@@56|) |j#4@@0|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@298 |m#0@@56| |k#0@@27|)) |j#4@@0|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@298 |m#0@@56| |k#0@@27|)) |j#4@@0|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@298 |m#0@@56| |k#0@@27|))) (|Set#Card| (|Map#Domain| |m#0@@56|)))) (<= (|Map#Card| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@298 |m#0@@56| |k#0@@27|)) (|Map#Card| |m#0@@56|))) ($Is (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@298 |m#0@@56| |k#0@@27|) (TMap Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1)))) :qid |unknown.0:0| :skolemid |9504| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@298 |m#0@@56| |k#0@@27|)) ))))
(assert (forall ((Maps._default.MapRemove1Strong$K@@2 T@U) (Maps._default.MapRemove1Strong$V@@2 T@U) ($ly@@299 T@U) (|m#0@@57| T@U) (|k#0@@28| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@2) TyType) (= (type Maps._default.MapRemove1Strong$V@@2) TyType)) (= (type $ly@@299) LayerTypeType)) (= (type |m#0@@57|) (MapType BoxType BoxType))) (= (type |k#0@@28|) BoxType)) (and ($Is |m#0@@57| (TMap Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2)) ($IsBox |k#0@@28| Maps._default.MapRemove1Strong$K@@2))) (and (=> (|Maps.__default.MapRemove1Strong#requires| Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2 $ly@@299 |m#0@@57| |k#0@@28|) true) (=> true (|Maps.__default.MapRemove1Strong#requires| Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2 $ly@@299 |m#0@@57| |k#0@@28|)))) :qid |unknown.0:0| :skolemid |9505| :pattern ( (|Maps.__default.MapRemove1Strong#requires| Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2 $ly@@299 |m#0@@57| |k#0@@28|)) )))
(assert  (and (and (= (type StartFuel_Maps._default.MapRemove1) LayerTypeType) (= (type MoreFuel_Maps._default.MapRemove112) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemove1) LayerTypeType)))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@3 T@U) (Maps._default.MapRemove1Strong$V@@3 T@U) ($ly@@300 T@U) (|m#0@@58| T@U) (|k#0@@29| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@3) TyType) (= (type Maps._default.MapRemove1Strong$V@@3) TyType)) (= (type $ly@@300) LayerTypeType)) (= (type |m#0@@58|) (MapType BoxType BoxType))) (= (type |k#0@@29|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 |m#0@@58| |k#0@@29|) (and ($Is |m#0@@58| (TMap Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3)) ($IsBox |k#0@@29| Maps._default.MapRemove1Strong$K@@3)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 |m#0@@58| |k#0@@29|) (and (and (and (= StartFuel_Maps._default.MapRemove1 ($LS MoreFuel_Maps._default.MapRemove112)) (= StartFuelAssert_Maps._default.MapRemove1 ($LS ($LS MoreFuel_Maps._default.MapRemove112)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove112) MoreFuel_Maps._default.MapRemove112)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 ($LS $ly@@300) |m#0@@58| |k#0@@29|) (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 StartFuel_Maps._default.MapRemove1 |m#0@@58| |k#0@@29|))))) :qid |unknown.0:0| :skolemid |9506| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 ($LS $ly@@300) |m#0@@58| |k#0@@29|)) ))))
(assert (= (type MoreFuel_Maps._default.MapRemove113) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@4 T@U) (Maps._default.MapRemove1Strong$V@@4 T@U) ($ly@@301 T@U) (|m#0@@59| T@U) (|k#0@@30| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@4) TyType) (= (type Maps._default.MapRemove1Strong$V@@4) TyType)) (= (type $ly@@301) LayerTypeType)) (= (type |m#0@@59|) (MapType BoxType BoxType))) (= (type |k#0@@30|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 (Lit |m#0@@59|) |k#0@@30|) (and ($Is |m#0@@59| (TMap Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4)) ($IsBox |k#0@@30| Maps._default.MapRemove1Strong$K@@4)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 (Lit |m#0@@59|) |k#0@@30|) (and (and (and (= StartFuel_Maps._default.MapRemove1 ($LS MoreFuel_Maps._default.MapRemove113)) (= StartFuelAssert_Maps._default.MapRemove1 ($LS ($LS MoreFuel_Maps._default.MapRemove113)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove113) MoreFuel_Maps._default.MapRemove113)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 ($LS $ly@@301) (Lit |m#0@@59|) |k#0@@30|) (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 StartFuel_Maps._default.MapRemove1 (Lit |m#0@@59|) |k#0@@30|))))) :qid |unknown.0:0| :weight 3 :skolemid |9507| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 ($LS $ly@@301) (Lit |m#0@@59|) |k#0@@30|)) ))))
(assert (= (type MoreFuel_Maps._default.MapRemove114) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@5 T@U) (Maps._default.MapRemove1Strong$V@@5 T@U) ($ly@@302 T@U) (|m#0@@60| T@U) (|k#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@5) TyType) (= (type Maps._default.MapRemove1Strong$V@@5) TyType)) (= (type $ly@@302) LayerTypeType)) (= (type |m#0@@60|) (MapType BoxType BoxType))) (= (type |k#0@@31|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 (Lit |m#0@@60|) (Lit |k#0@@31|)) (and ($Is |m#0@@60| (TMap Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5)) ($IsBox |k#0@@31| Maps._default.MapRemove1Strong$K@@5)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 (Lit |m#0@@60|) (Lit |k#0@@31|)) (and (and (and (= StartFuel_Maps._default.MapRemove1 ($LS MoreFuel_Maps._default.MapRemove114)) (= StartFuelAssert_Maps._default.MapRemove1 ($LS ($LS MoreFuel_Maps._default.MapRemove114)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove114) MoreFuel_Maps._default.MapRemove114)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 ($LS $ly@@302) (Lit |m#0@@60|) (Lit |k#0@@31|)) (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 StartFuel_Maps._default.MapRemove1 (Lit |m#0@@60|) (Lit |k#0@@31|)))))) :qid |unknown.0:0| :weight 3 :skolemid |9508| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 ($LS $ly@@302) (Lit |m#0@@60|) (Lit |k#0@@31|))) ))))
(assert (forall ((arg0@@278 T@U) (arg1@@158 T@U) (arg2@@97 T@U) (arg3@@67 T@U) (arg4@@48 T@U) ) (! (= (type (Maps.__default.IMapRemove arg0@@278 arg1@@158 arg2@@97 arg3@@67 arg4@@48)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRemove| :pattern ( (Maps.__default.IMapRemove arg0@@278 arg1@@158 arg2@@97 arg3@@67 arg4@@48)) )))
(assert (forall ((Maps._default.IMapRemove$K T@U) (Maps._default.IMapRemove$V T@U) ($ly@@303 T@U) (|m#0@@61| T@U) (|ks#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove$K) TyType) (= (type Maps._default.IMapRemove$V) TyType)) (= (type $ly@@303) LayerTypeType)) (= (type |m#0@@61|) (IMapType BoxType BoxType))) (= (type |ks#0@@11|) (MapType0Type BoxType boolType))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V ($LS $ly@@303) |m#0@@61| |ks#0@@11|) (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V $ly@@303 |m#0@@61| |ks#0@@11|))) :qid |unknown.0:0| :skolemid |9509| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V ($LS $ly@@303) |m#0@@61| |ks#0@@11|)) )))
(assert (forall ((Maps._default.IMapRemove$K@@0 T@U) (Maps._default.IMapRemove$V@@0 T@U) ($ly@@304 T@U) (|m#0@@62| T@U) (|ks#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove$K@@0) TyType) (= (type Maps._default.IMapRemove$V@@0) TyType)) (= (type $ly@@304) LayerTypeType)) (= (type |m#0@@62|) (IMapType BoxType BoxType))) (= (type |ks#0@@12|) (MapType0Type BoxType boolType))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 $ly@@304 |m#0@@62| |ks#0@@12|) (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 $LZ |m#0@@62| |ks#0@@12|))) :qid |unknown.0:0| :skolemid |9510| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 (AsFuelBottom $ly@@304) |m#0@@62| |ks#0@@12|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@1 T@U) (Maps._default.IMapRemove$V@@1 T@U) ($ly@@305 T@U) (|m#0@@63| T@U) (|ks#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@1) TyType) (= (type Maps._default.IMapRemove$V@@1) TyType)) (= (type $ly@@305) LayerTypeType)) (= (type |m#0@@63|) (IMapType BoxType BoxType))) (= (type |ks#0@@13|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 |m#0@@63| |ks#0@@13|) (and ($Is |m#0@@63| (TIMap Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1)) ($Is |ks#0@@13| (TISet Maps._default.IMapRemove$K@@1))))) (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@305 |m#0@@63| |ks#0@@13|)) (|ISet#Difference| (|IMap#Domain| |m#0@@63|) |ks#0@@13|)) (forall ((|j#5@@1| T@U) ) (!  (=> (and (and (= (type |j#5@@1|) BoxType) ($IsBox |j#5@@1| Maps._default.IMapRemove$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@305 |m#0@@63| |ks#0@@13|)) |j#5@@1|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@305 |m#0@@63| |ks#0@@13|)) |j#5@@1|) (MapType0Select (|IMap#Elements| |m#0@@63|) |j#5@@1|))) :qid |Mapssdfy.86:20| :skolemid |9511| :pattern ( (MapType0Select (|IMap#Elements| |m#0@@63|) |j#5@@1|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@305 |m#0@@63| |ks#0@@13|)) |j#5@@1|)) :pattern ( (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@305 |m#0@@63| |ks#0@@13|)) |j#5@@1|)) ))) ($Is (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@305 |m#0@@63| |ks#0@@13|) (TIMap Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1)))) :qid |unknown.0:0| :skolemid |9512| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@305 |m#0@@63| |ks#0@@13|)) ))))
(assert (forall ((Maps._default.IMapRemove$K@@2 T@U) (Maps._default.IMapRemove$V@@2 T@U) ($ly@@306 T@U) (|m#0@@64| T@U) (|ks#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@2) TyType) (= (type Maps._default.IMapRemove$V@@2) TyType)) (= (type $ly@@306) LayerTypeType)) (= (type |m#0@@64|) (IMapType BoxType BoxType))) (= (type |ks#0@@14|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@64| (TIMap Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2)) ($Is |ks#0@@14| (TISet Maps._default.IMapRemove$K@@2)))) (and (=> (|Maps.__default.IMapRemove#requires| Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2 $ly@@306 |m#0@@64| |ks#0@@14|) true) (=> true (|Maps.__default.IMapRemove#requires| Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2 $ly@@306 |m#0@@64| |ks#0@@14|)))) :qid |unknown.0:0| :skolemid |9513| :pattern ( (|Maps.__default.IMapRemove#requires| Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2 $ly@@306 |m#0@@64| |ks#0@@14|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@3 T@U) (Maps._default.IMapRemove$V@@3 T@U) ($ly@@307 T@U) (|m#0@@65| T@U) (|ks#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@3) TyType) (= (type Maps._default.IMapRemove$V@@3) TyType)) (= (type $ly@@307) LayerTypeType)) (= (type |m#0@@65|) (IMapType BoxType BoxType))) (= (type |ks#0@@15|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 |m#0@@65| |ks#0@@15|) (and ($Is |m#0@@65| (TIMap Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3)) ($Is |ks#0@@15| (TISet Maps._default.IMapRemove$K@@3))))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 ($LS $ly@@307) |m#0@@65| |ks#0@@15|) (|IMap#Glue| (|lambda#69| Maps._default.IMapRemove$K@@3 (|IMap#Domain| |m#0@@65|) |ks#0@@15|) (|lambda#70| (|IMap#Elements| |m#0@@65|)) (TIMap Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3)))) :qid |unknown.0:0| :skolemid |9514| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 ($LS $ly@@307) |m#0@@65| |ks#0@@15|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@4 T@U) (Maps._default.IMapRemove$V@@4 T@U) ($ly@@308 T@U) (|m#0@@66| T@U) (|ks#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@4) TyType) (= (type Maps._default.IMapRemove$V@@4) TyType)) (= (type $ly@@308) LayerTypeType)) (= (type |m#0@@66|) (IMapType BoxType BoxType))) (= (type |ks#0@@16|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 (Lit |m#0@@66|) (Lit |ks#0@@16|)) (and ($Is |m#0@@66| (TIMap Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4)) ($Is |ks#0@@16| (TISet Maps._default.IMapRemove$K@@4))))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 ($LS $ly@@308) (Lit |m#0@@66|) (Lit |ks#0@@16|)) (|IMap#Glue| (|lambda#69| Maps._default.IMapRemove$K@@4 (|IMap#Domain| |m#0@@66|) (Lit |ks#0@@16|)) (|lambda#70| (|IMap#Elements| (Lit |m#0@@66|))) (TIMap Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |9515| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 ($LS $ly@@308) (Lit |m#0@@66|) (Lit |ks#0@@16|))) ))))
(assert (forall ((arg0@@279 T@U) (arg1@@159 T@U) (arg2@@98 T@U) (arg3@@68 T@U) (arg4@@49 T@U) ) (! (= (type (Maps.__default.IMapRemove1 arg0@@279 arg1@@159 arg2@@98 arg3@@68 arg4@@49)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRemove1| :pattern ( (Maps.__default.IMapRemove1 arg0@@279 arg1@@159 arg2@@98 arg3@@68 arg4@@49)) )))
(assert (forall ((Maps._default.IMapRemove1$K T@U) (Maps._default.IMapRemove1$V T@U) ($ly@@309 T@U) (|m#0@@67| T@U) (|k#0@@32| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove1$K) TyType) (= (type Maps._default.IMapRemove1$V) TyType)) (= (type $ly@@309) LayerTypeType)) (= (type |m#0@@67|) (IMapType BoxType BoxType))) (= (type |k#0@@32|) BoxType)) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V ($LS $ly@@309) |m#0@@67| |k#0@@32|) (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V $ly@@309 |m#0@@67| |k#0@@32|))) :qid |unknown.0:0| :skolemid |9516| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V ($LS $ly@@309) |m#0@@67| |k#0@@32|)) )))
(assert (forall ((Maps._default.IMapRemove1$K@@0 T@U) (Maps._default.IMapRemove1$V@@0 T@U) ($ly@@310 T@U) (|m#0@@68| T@U) (|k#0@@33| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove1$K@@0) TyType) (= (type Maps._default.IMapRemove1$V@@0) TyType)) (= (type $ly@@310) LayerTypeType)) (= (type |m#0@@68|) (IMapType BoxType BoxType))) (= (type |k#0@@33|) BoxType)) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 $ly@@310 |m#0@@68| |k#0@@33|) (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 $LZ |m#0@@68| |k#0@@33|))) :qid |unknown.0:0| :skolemid |9517| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 (AsFuelBottom $ly@@310) |m#0@@68| |k#0@@33|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@1 T@U) (Maps._default.IMapRemove1$V@@1 T@U) ($ly@@311 T@U) (|m#0@@69| T@U) (|k#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@1) TyType) (= (type Maps._default.IMapRemove1$V@@1) TyType)) (= (type $ly@@311) LayerTypeType)) (= (type |m#0@@69|) (IMapType BoxType BoxType))) (= (type |k#0@@34|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 |m#0@@69| |k#0@@34|) (and ($Is |m#0@@69| (TIMap Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1)) ($IsBox |k#0@@34| Maps._default.IMapRemove1$K@@1)))) (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@311 |m#0@@69| |k#0@@34|)) (|ISet#Difference| (|IMap#Domain| |m#0@@69|) (|ISet#UnionOne| (|ISet#Empty| BoxType) |k#0@@34|))) (forall ((|j#5@@2| T@U) ) (!  (=> (and (and (= (type |j#5@@2|) BoxType) ($IsBox |j#5@@2| Maps._default.IMapRemove1$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@311 |m#0@@69| |k#0@@34|)) |j#5@@2|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@311 |m#0@@69| |k#0@@34|)) |j#5@@2|) (MapType0Select (|IMap#Elements| |m#0@@69|) |j#5@@2|))) :qid |Mapssdfy.93:20| :skolemid |9518| :pattern ( (MapType0Select (|IMap#Elements| |m#0@@69|) |j#5@@2|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@311 |m#0@@69| |k#0@@34|)) |j#5@@2|)) :pattern ( (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@311 |m#0@@69| |k#0@@34|)) |j#5@@2|)) ))) ($Is (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@311 |m#0@@69| |k#0@@34|) (TIMap Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1)))) :qid |unknown.0:0| :skolemid |9519| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@311 |m#0@@69| |k#0@@34|)) ))))
(assert (forall ((Maps._default.IMapRemove1$K@@2 T@U) (Maps._default.IMapRemove1$V@@2 T@U) ($ly@@312 T@U) (|m#0@@70| T@U) (|k#0@@35| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@2) TyType) (= (type Maps._default.IMapRemove1$V@@2) TyType)) (= (type $ly@@312) LayerTypeType)) (= (type |m#0@@70|) (IMapType BoxType BoxType))) (= (type |k#0@@35|) BoxType)) (and ($Is |m#0@@70| (TIMap Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2)) ($IsBox |k#0@@35| Maps._default.IMapRemove1$K@@2))) (and (=> (|Maps.__default.IMapRemove1#requires| Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2 $ly@@312 |m#0@@70| |k#0@@35|) true) (=> true (|Maps.__default.IMapRemove1#requires| Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2 $ly@@312 |m#0@@70| |k#0@@35|)))) :qid |unknown.0:0| :skolemid |9520| :pattern ( (|Maps.__default.IMapRemove1#requires| Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2 $ly@@312 |m#0@@70| |k#0@@35|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@3 T@U) (Maps._default.IMapRemove1$V@@3 T@U) ($ly@@313 T@U) (|m#0@@71| T@U) (|k#0@@36| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@3) TyType) (= (type Maps._default.IMapRemove1$V@@3) TyType)) (= (type $ly@@313) LayerTypeType)) (= (type |m#0@@71|) (IMapType BoxType BoxType))) (= (type |k#0@@36|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 |m#0@@71| |k#0@@36|) (and ($Is |m#0@@71| (TIMap Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3)) ($IsBox |k#0@@36| Maps._default.IMapRemove1$K@@3)))) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 ($LS $ly@@313) |m#0@@71| |k#0@@36|) (|IMap#Glue| (|lambda#73| Maps._default.IMapRemove1$K@@3 (|IMap#Domain| |m#0@@71|) |k#0@@36|) (|lambda#70| (|IMap#Elements| |m#0@@71|)) (TIMap Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3)))) :qid |unknown.0:0| :skolemid |9521| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 ($LS $ly@@313) |m#0@@71| |k#0@@36|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@4 T@U) (Maps._default.IMapRemove1$V@@4 T@U) ($ly@@314 T@U) (|m#0@@72| T@U) (|k#0@@37| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@4) TyType) (= (type Maps._default.IMapRemove1$V@@4) TyType)) (= (type $ly@@314) LayerTypeType)) (= (type |m#0@@72|) (IMapType BoxType BoxType))) (= (type |k#0@@37|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 (Lit |m#0@@72|) (Lit |k#0@@37|)) (and ($Is |m#0@@72| (TIMap Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4)) ($IsBox |k#0@@37| Maps._default.IMapRemove1$K@@4)))) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 ($LS $ly@@314) (Lit |m#0@@72|) (Lit |k#0@@37|)) (|IMap#Glue| (|lambda#73| Maps._default.IMapRemove1$K@@4 (|IMap#Domain| |m#0@@72|) |k#0@@37|) (|lambda#70| (|IMap#Elements| (Lit |m#0@@72|))) (TIMap Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |9522| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 ($LS $ly@@314) (Lit |m#0@@72|) (Lit |k#0@@37|))) ))))
(assert (forall ((arg0@@280 T@U) (arg1@@160 T@U) (arg2@@99 T@U) (arg3@@69 T@U) ) (! (= (type (Maps.__default.MapRestrict arg0@@280 arg1@@160 arg2@@99 arg3@@69)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRestrict| :pattern ( (Maps.__default.MapRestrict arg0@@280 arg1@@160 arg2@@99 arg3@@69)) )))
(assert  (=> true (forall ((Maps._default.MapRestrict$K T@U) (Maps._default.MapRestrict$V T@U) (|m#0@@73| T@U) (|ks#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K) TyType) (= (type Maps._default.MapRestrict$V) TyType)) (= (type |m#0@@73|) (MapType BoxType BoxType))) (= (type |ks#0@@17|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@73| |ks#0@@17|) (and ($Is |m#0@@73| (TMap Maps._default.MapRestrict$K Maps._default.MapRestrict$V)) ($Is |ks#0@@17| (TSet Maps._default.MapRestrict$K))))) ($Is (Maps.__default.MapRestrict Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@73| |ks#0@@17|) (TMap Maps._default.MapRestrict$K Maps._default.MapRestrict$V))) :qid |unknown.0:0| :skolemid |9523| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@73| |ks#0@@17|)) ))))
(assert (forall ((Maps._default.MapRestrict$K@@0 T@U) (Maps._default.MapRestrict$V@@0 T@U) (|m#0@@74| T@U) (|ks#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@0) TyType) (= (type Maps._default.MapRestrict$V@@0) TyType)) (= (type |m#0@@74|) (MapType BoxType BoxType))) (= (type |ks#0@@18|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@74| (TMap Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0)) ($Is |ks#0@@18| (TSet Maps._default.MapRestrict$K@@0)))) (and (=> (|Maps.__default.MapRestrict#requires| Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0 |m#0@@74| |ks#0@@18|) true) (=> true (|Maps.__default.MapRestrict#requires| Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0 |m#0@@74| |ks#0@@18|)))) :qid |unknown.0:0| :skolemid |9524| :pattern ( (|Maps.__default.MapRestrict#requires| Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0 |m#0@@74| |ks#0@@18|)) )))
(assert (forall ((arg0@@281 T@U) (arg1@@161 T@U) (arg2@@100 T@U) ) (! (= (type (|lambda#87| arg0@@281 arg1@@161 arg2@@100)) (MapType0Type BoxType boolType)) :qid |funType:lambda#87| :pattern ( (|lambda#87| arg0@@281 arg1@@161 arg2@@100)) )))
(assert  (=> true (forall ((Maps._default.MapRestrict$K@@1 T@U) (Maps._default.MapRestrict$V@@1 T@U) (|m#0@@75| T@U) (|ks#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@1) TyType) (= (type Maps._default.MapRestrict$V@@1) TyType)) (= (type |m#0@@75|) (MapType BoxType BoxType))) (= (type |ks#0@@19|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@75| |ks#0@@19|) (and ($Is |m#0@@75| (TMap Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1)) ($Is |ks#0@@19| (TSet Maps._default.MapRestrict$K@@1))))) (= (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@75| |ks#0@@19|) (|Map#Glue| (|lambda#87| Maps._default.MapRestrict$K@@1 |ks#0@@19| (|Map#Domain| |m#0@@75|)) (|lambda#70| (|Map#Elements| |m#0@@75|)) (TMap Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |9525| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@75| |ks#0@@19|)) ))))
(assert  (=> true (forall ((Maps._default.MapRestrict$K@@2 T@U) (Maps._default.MapRestrict$V@@2 T@U) (|m#0@@76| T@U) (|ks#0@@20| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@2) TyType) (= (type Maps._default.MapRestrict$V@@2) TyType)) (= (type |m#0@@76|) (MapType BoxType BoxType))) (= (type |ks#0@@20|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@76|) (Lit |ks#0@@20|)) (and ($Is |m#0@@76| (TMap Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2)) ($Is |ks#0@@20| (TSet Maps._default.MapRestrict$K@@2))))) (= (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@76|) (Lit |ks#0@@20|)) (|Map#Glue| (|lambda#87| Maps._default.MapRestrict$K@@2 (Lit |ks#0@@20|) (|Map#Domain| |m#0@@76|)) (|lambda#70| (|Map#Elements| (Lit |m#0@@76|))) (TMap Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |9526| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@76|) (Lit |ks#0@@20|))) ))))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K T@U) (Maps._default.MapIRestrict$V T@U) (|m#0@@77| T@U) (|ks#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K) TyType) (= (type Maps._default.MapIRestrict$V) TyType)) (= (type |m#0@@77|) (MapType BoxType BoxType))) (= (type |ks#0@@21|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@77| |ks#0@@21|) (and ($Is |m#0@@77| (TMap Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V)) ($Is |ks#0@@21| (TISet Maps._default.MapIRestrict$K))))) ($Is (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@77| |ks#0@@21|) (TMap Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V))) :qid |unknown.0:0| :skolemid |9527| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@77| |ks#0@@21|)) ))))
(assert (forall ((Maps._default.MapIRestrict$K@@0 T@U) (Maps._default.MapIRestrict$V@@0 T@U) (|m#0@@78| T@U) (|ks#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@0) TyType) (= (type Maps._default.MapIRestrict$V@@0) TyType)) (= (type |m#0@@78|) (MapType BoxType BoxType))) (= (type |ks#0@@22|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@78| (TMap Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0)) ($Is |ks#0@@22| (TISet Maps._default.MapIRestrict$K@@0)))) (and (=> (|Maps.__default.MapIRestrict#requires| Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0 |m#0@@78| |ks#0@@22|) true) (=> true (|Maps.__default.MapIRestrict#requires| Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0 |m#0@@78| |ks#0@@22|)))) :qid |unknown.0:0| :skolemid |9528| :pattern ( (|Maps.__default.MapIRestrict#requires| Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0 |m#0@@78| |ks#0@@22|)) )))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@1 T@U) (Maps._default.MapIRestrict$V@@1 T@U) (|m#0@@79| T@U) (|ks#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@1) TyType) (= (type Maps._default.MapIRestrict$V@@1) TyType)) (= (type |m#0@@79|) (MapType BoxType BoxType))) (= (type |ks#0@@23|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@79| |ks#0@@23|) (and ($Is |m#0@@79| (TMap Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1)) ($Is |ks#0@@23| (TISet Maps._default.MapIRestrict$K@@1))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@79| |ks#0@@23|) (|Map#Glue| (|lambda#87| Maps._default.MapIRestrict$K@@1 (|Map#Domain| |m#0@@79|) |ks#0@@23|) (|lambda#70| (|Map#Elements| |m#0@@79|)) (TMap Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |9529| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@79| |ks#0@@23|)) ))))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@2 T@U) (Maps._default.MapIRestrict$V@@2 T@U) (|m#0@@80| T@U) (|ks#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@2) TyType) (= (type Maps._default.MapIRestrict$V@@2) TyType)) (= (type |m#0@@80|) (MapType BoxType BoxType))) (= (type |ks#0@@24|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@80|) |ks#0@@24|) (and ($Is |m#0@@80| (TMap Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2)) ($Is |ks#0@@24| (TISet Maps._default.MapIRestrict$K@@2))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@80|) |ks#0@@24|) (|Map#Glue| (|lambda#87| Maps._default.MapIRestrict$K@@2 (|Map#Domain| |m#0@@80|) |ks#0@@24|) (|lambda#70| (|Map#Elements| (Lit |m#0@@80|))) (TMap Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |9530| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@80|) |ks#0@@24|)) ))))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@3 T@U) (Maps._default.MapIRestrict$V@@3 T@U) (|m#0@@81| T@U) (|ks#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@3) TyType) (= (type Maps._default.MapIRestrict$V@@3) TyType)) (= (type |m#0@@81|) (MapType BoxType BoxType))) (= (type |ks#0@@25|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@81|) (Lit |ks#0@@25|)) (and ($Is |m#0@@81| (TMap Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3)) ($Is |ks#0@@25| (TISet Maps._default.MapIRestrict$K@@3))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@81|) (Lit |ks#0@@25|)) (|Map#Glue| (|lambda#87| Maps._default.MapIRestrict$K@@3 (|Map#Domain| |m#0@@81|) (Lit |ks#0@@25|)) (|lambda#70| (|Map#Elements| (Lit |m#0@@81|))) (TMap Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3)))) :qid |unknown.0:0| :weight 3 :skolemid |9531| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@81|) (Lit |ks#0@@25|))) ))))
(assert (forall ((arg0@@282 T@U) (arg1@@162 T@U) (arg2@@101 T@U) (arg3@@70 T@U) ) (! (= (type (Maps.__default.IMapRestrict arg0@@282 arg1@@162 arg2@@101 arg3@@70)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRestrict| :pattern ( (Maps.__default.IMapRestrict arg0@@282 arg1@@162 arg2@@101 arg3@@70)) )))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K T@U) (Maps._default.IMapRestrict$V T@U) (|m#0@@82| T@U) (|ks#0@@26| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K) TyType) (= (type Maps._default.IMapRestrict$V) TyType)) (= (type |m#0@@82|) (IMapType BoxType BoxType))) (= (type |ks#0@@26|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@82| |ks#0@@26|) (and ($Is |m#0@@82| (TIMap Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V)) ($Is |ks#0@@26| (TISet Maps._default.IMapRestrict$K))))) ($Is (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@82| |ks#0@@26|) (TIMap Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V))) :qid |unknown.0:0| :skolemid |9532| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@82| |ks#0@@26|)) ))))
(assert (forall ((Maps._default.IMapRestrict$K@@0 T@U) (Maps._default.IMapRestrict$V@@0 T@U) (|m#0@@83| T@U) (|ks#0@@27| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@0) TyType) (= (type Maps._default.IMapRestrict$V@@0) TyType)) (= (type |m#0@@83|) (IMapType BoxType BoxType))) (= (type |ks#0@@27|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@83| (TIMap Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0)) ($Is |ks#0@@27| (TISet Maps._default.IMapRestrict$K@@0)))) (and (=> (|Maps.__default.IMapRestrict#requires| Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0 |m#0@@83| |ks#0@@27|) true) (=> true (|Maps.__default.IMapRestrict#requires| Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0 |m#0@@83| |ks#0@@27|)))) :qid |unknown.0:0| :skolemid |9533| :pattern ( (|Maps.__default.IMapRestrict#requires| Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0 |m#0@@83| |ks#0@@27|)) )))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K@@1 T@U) (Maps._default.IMapRestrict$V@@1 T@U) (|m#0@@84| T@U) (|ks#0@@28| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@1) TyType) (= (type Maps._default.IMapRestrict$V@@1) TyType)) (= (type |m#0@@84|) (IMapType BoxType BoxType))) (= (type |ks#0@@28|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@84| |ks#0@@28|) (and ($Is |m#0@@84| (TIMap Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1)) ($Is |ks#0@@28| (TISet Maps._default.IMapRestrict$K@@1))))) (= (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@84| |ks#0@@28|) (|IMap#Glue| (|lambda#87| Maps._default.IMapRestrict$K@@1 |ks#0@@28| (|IMap#Domain| |m#0@@84|)) (|lambda#70| (|IMap#Elements| |m#0@@84|)) (TIMap Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |9534| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@84| |ks#0@@28|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K@@2 T@U) (Maps._default.IMapRestrict$V@@2 T@U) (|m#0@@85| T@U) (|ks#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@2) TyType) (= (type Maps._default.IMapRestrict$V@@2) TyType)) (= (type |m#0@@85|) (IMapType BoxType BoxType))) (= (type |ks#0@@29|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@85|) (Lit |ks#0@@29|)) (and ($Is |m#0@@85| (TIMap Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2)) ($Is |ks#0@@29| (TISet Maps._default.IMapRestrict$K@@2))))) (= (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@85|) (Lit |ks#0@@29|)) (|IMap#Glue| (|lambda#87| Maps._default.IMapRestrict$K@@2 (Lit |ks#0@@29|) (|IMap#Domain| |m#0@@85|)) (|lambda#70| (|IMap#Elements| (Lit |m#0@@85|))) (TIMap Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |9535| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@85|) (Lit |ks#0@@29|))) ))))
(assert (forall ((Maps._default.MapDisjointUnion$U T@U) (Maps._default.MapDisjointUnion$T T@U) ($ly@@315 T@U) (|mapa#0| T@U) (|mapb#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapDisjointUnion$U) TyType) (= (type Maps._default.MapDisjointUnion$T) TyType)) (= (type $ly@@315) LayerTypeType)) (= (type |mapa#0|) (MapType BoxType BoxType))) (= (type |mapb#0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T ($LS $ly@@315) |mapa#0| |mapb#0|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T $ly@@315 |mapa#0| |mapb#0|))) :qid |unknown.0:0| :skolemid |9536| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T ($LS $ly@@315) |mapa#0| |mapb#0|)) )))
(assert (forall ((Maps._default.MapDisjointUnion$U@@0 T@U) (Maps._default.MapDisjointUnion$T@@0 T@U) ($ly@@316 T@U) (|mapa#0@@0| T@U) (|mapb#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@0) TyType) (= (type Maps._default.MapDisjointUnion$T@@0) TyType)) (= (type $ly@@316) LayerTypeType)) (= (type |mapa#0@@0|) (MapType BoxType BoxType))) (= (type |mapb#0@@0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 $ly@@316 |mapa#0@@0| |mapb#0@@0|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 $LZ |mapa#0@@0| |mapb#0@@0|))) :qid |unknown.0:0| :skolemid |9537| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 (AsFuelBottom $ly@@316) |mapa#0@@0| |mapb#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@1 T@U) (Maps._default.MapDisjointUnion$T@@1 T@U) ($ly@@317 T@U) (|mapa#0@@1| T@U) (|mapb#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@1) TyType) (= (type Maps._default.MapDisjointUnion$T@@1) TyType)) (= (type $ly@@317) LayerTypeType)) (= (type |mapa#0@@1|) (MapType BoxType BoxType))) (= (type |mapb#0@@1|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 |mapa#0@@1| |mapb#0@@1|) (and (and ($Is |mapa#0@@1| (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1)) ($Is |mapb#0@@1| (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1))) (|Set#Disjoint| (|Map#Domain| |mapa#0@@1|) (|Map#Domain| |mapb#0@@1|))))) (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@317 |mapa#0@@1| |mapb#0@@1|)) (|Set#Union| (|Map#Domain| |mapa#0@@1|) (|Map#Domain| |mapb#0@@1|))) (forall ((|k#8@@0| T@U) ) (!  (=> (and (and (= (type |k#8@@0|) BoxType) ($IsBox |k#8@@0| Maps._default.MapDisjointUnion$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@1|) |k#8@@0|))) (= (MapType0Select (|Map#Elements| |mapa#0@@1|) |k#8@@0|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@317 |mapa#0@@1| |mapb#0@@1|)) |k#8@@0|))) :qid |Mapssdfy.114:18| :skolemid |9538| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@317 |mapa#0@@1| |mapb#0@@1|)) |k#8@@0|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@1|) |k#8@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@1|) |k#8@@0|)) ))) (forall ((|k#9@@0| T@U) ) (!  (=> (and (and (= (type |k#9@@0|) BoxType) ($IsBox |k#9@@0| Maps._default.MapDisjointUnion$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@1|) |k#9@@0|))) (= (MapType0Select (|Map#Elements| |mapb#0@@1|) |k#9@@0|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@317 |mapa#0@@1| |mapb#0@@1|)) |k#9@@0|))) :qid |Mapssdfy.115:18| :skolemid |9539| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@317 |mapa#0@@1| |mapb#0@@1|)) |k#9@@0|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@1|) |k#9@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@1|) |k#9@@0|)) ))) ($Is (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@317 |mapa#0@@1| |mapb#0@@1|) (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1)))) :qid |unknown.0:0| :skolemid |9540| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@317 |mapa#0@@1| |mapb#0@@1|)) ))))
(assert (forall ((Maps._default.MapDisjointUnion$U@@2 T@U) (Maps._default.MapDisjointUnion$T@@2 T@U) ($ly@@318 T@U) (|mapa#0@@2| T@U) (|mapb#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@2) TyType) (= (type Maps._default.MapDisjointUnion$T@@2) TyType)) (= (type $ly@@318) LayerTypeType)) (= (type |mapa#0@@2|) (MapType BoxType BoxType))) (= (type |mapb#0@@2|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@2| (TMap Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2)) ($Is |mapb#0@@2| (TMap Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2)))) (and (=> (|Maps.__default.MapDisjointUnion#requires| Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2 $ly@@318 |mapa#0@@2| |mapb#0@@2|) (|Set#Disjoint| (|Map#Domain| |mapa#0@@2|) (|Map#Domain| |mapb#0@@2|))) (=> (|Set#Disjoint| (|Map#Domain| |mapa#0@@2|) (|Map#Domain| |mapb#0@@2|)) (|Maps.__default.MapDisjointUnion#requires| Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2 $ly@@318 |mapa#0@@2| |mapb#0@@2|)))) :qid |unknown.0:0| :skolemid |9541| :pattern ( (|Maps.__default.MapDisjointUnion#requires| Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2 $ly@@318 |mapa#0@@2| |mapb#0@@2|)) )))
(assert  (and (forall ((arg0@@283 T@U) (arg1@@163 T@U) (arg2@@102 T@U) ) (! (= (type (|lambda#101| arg0@@283 arg1@@163 arg2@@102)) (MapType0Type BoxType boolType)) :qid |funType:lambda#101| :pattern ( (|lambda#101| arg0@@283 arg1@@163 arg2@@102)) )) (forall ((arg0@@284 T@U) (arg1@@164 T@U) (arg2@@103 T@U) ) (! (= (type (|lambda#102| arg0@@284 arg1@@164 arg2@@103)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#102| :pattern ( (|lambda#102| arg0@@284 arg1@@164 arg2@@103)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@3 T@U) (Maps._default.MapDisjointUnion$T@@3 T@U) ($ly@@319 T@U) (|mapa#0@@3| T@U) (|mapb#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@3) TyType) (= (type Maps._default.MapDisjointUnion$T@@3) TyType)) (= (type $ly@@319) LayerTypeType)) (= (type |mapa#0@@3|) (MapType BoxType BoxType))) (= (type |mapb#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 |mapa#0@@3| |mapb#0@@3|) (and (and ($Is |mapa#0@@3| (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3)) ($Is |mapb#0@@3| (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3))) (|Set#Disjoint| (|Map#Domain| |mapa#0@@3|) (|Map#Domain| |mapb#0@@3|))))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 ($LS $ly@@319) |mapa#0@@3| |mapb#0@@3|) (|Map#Glue| (|lambda#101| Maps._default.MapDisjointUnion$U@@3 (|Map#Domain| |mapa#0@@3|) (|Map#Domain| |mapb#0@@3|)) (|lambda#102| (|Map#Domain| |mapa#0@@3|) (|Map#Elements| |mapa#0@@3|) (|Map#Elements| |mapb#0@@3|)) (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3)))) :qid |unknown.0:0| :skolemid |9542| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 ($LS $ly@@319) |mapa#0@@3| |mapb#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@4 T@U) (Maps._default.MapDisjointUnion$T@@4 T@U) ($ly@@320 T@U) (|mapa#0@@4| T@U) (|mapb#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@4) TyType) (= (type Maps._default.MapDisjointUnion$T@@4) TyType)) (= (type $ly@@320) LayerTypeType)) (= (type |mapa#0@@4|) (MapType BoxType BoxType))) (= (type |mapb#0@@4|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 (Lit |mapa#0@@4|) (Lit |mapb#0@@4|)) (and (and ($Is |mapa#0@@4| (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4)) ($Is |mapb#0@@4| (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4))) (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@4|)) (|Map#Domain| (Lit |mapb#0@@4|)))))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 ($LS $ly@@320) (Lit |mapa#0@@4|) (Lit |mapb#0@@4|)) (|Map#Glue| (|lambda#101| Maps._default.MapDisjointUnion$U@@4 (Lit (|Map#Domain| (Lit |mapa#0@@4|))) (Lit (|Map#Domain| (Lit |mapb#0@@4|)))) (|lambda#102| (|Map#Domain| |mapa#0@@4|) (|Map#Elements| (Lit |mapa#0@@4|)) (|Map#Elements| (Lit |mapb#0@@4|))) (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |9543| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 ($LS $ly@@320) (Lit |mapa#0@@4|) (Lit |mapb#0@@4|))) ))))
(assert (forall ((arg0@@285 T@U) (arg1@@165 T@U) (arg2@@104 T@U) (arg3@@71 T@U) (arg4@@50 T@U) ) (! (= (type (Maps.__default.MapUnionPreferA arg0@@285 arg1@@165 arg2@@104 arg3@@71 arg4@@50)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnionPreferA| :pattern ( (Maps.__default.MapUnionPreferA arg0@@285 arg1@@165 arg2@@104 arg3@@71 arg4@@50)) )))
(assert (forall ((Maps._default.MapUnionPreferA$U T@U) (Maps._default.MapUnionPreferA$T T@U) ($ly@@321 T@U) (|mapa#0@@5| T@U) (|mapb#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferA$U) TyType) (= (type Maps._default.MapUnionPreferA$T) TyType)) (= (type $ly@@321) LayerTypeType)) (= (type |mapa#0@@5|) (MapType BoxType BoxType))) (= (type |mapb#0@@5|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T ($LS $ly@@321) |mapa#0@@5| |mapb#0@@5|) (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T $ly@@321 |mapa#0@@5| |mapb#0@@5|))) :qid |unknown.0:0| :skolemid |9544| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T ($LS $ly@@321) |mapa#0@@5| |mapb#0@@5|)) )))
(assert (forall ((Maps._default.MapUnionPreferA$U@@0 T@U) (Maps._default.MapUnionPreferA$T@@0 T@U) ($ly@@322 T@U) (|mapa#0@@6| T@U) (|mapb#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@0) TyType) (= (type Maps._default.MapUnionPreferA$T@@0) TyType)) (= (type $ly@@322) LayerTypeType)) (= (type |mapa#0@@6|) (MapType BoxType BoxType))) (= (type |mapb#0@@6|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 $ly@@322 |mapa#0@@6| |mapb#0@@6|) (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 $LZ |mapa#0@@6| |mapb#0@@6|))) :qid |unknown.0:0| :skolemid |9545| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 (AsFuelBottom $ly@@322) |mapa#0@@6| |mapb#0@@6|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@1 T@U) (Maps._default.MapUnionPreferA$T@@1 T@U) ($ly@@323 T@U) (|mapa#0@@7| T@U) (|mapb#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@1) TyType) (= (type Maps._default.MapUnionPreferA$T@@1) TyType)) (= (type $ly@@323) LayerTypeType)) (= (type |mapa#0@@7|) (MapType BoxType BoxType))) (= (type |mapb#0@@7|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 |mapa#0@@7| |mapb#0@@7|) (and ($Is |mapa#0@@7| (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1)) ($Is |mapb#0@@7| (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@323 |mapa#0@@7| |mapb#0@@7|)) (|Set#Union| (|Map#Domain| |mapa#0@@7|) (|Map#Domain| |mapb#0@@7|))) (forall ((|k#12| T@U) ) (!  (=> (and (and (= (type |k#12|) BoxType) ($IsBox |k#12| Maps._default.MapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#12|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@323 |mapa#0@@7| |mapb#0@@7|)) |k#12|) (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#12|))) :qid |Mapssdfy.124:20| :skolemid |9546| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#12|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@323 |mapa#0@@7| |mapb#0@@7|)) |k#12|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#12|)) ))) (forall ((|k#13| T@U) ) (!  (=> (and (and (= (type |k#13|) BoxType) ($IsBox |k#13| Maps._default.MapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@7|) |k#13|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#13|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@323 |mapa#0@@7| |mapb#0@@7|)) |k#13|) (MapType0Select (|Map#Elements| |mapb#0@@7|) |k#13|))) :qid |Mapssdfy.125:20| :skolemid |9547| :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@7|) |k#13|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@323 |mapa#0@@7| |mapb#0@@7|)) |k#13|)) ))) (forall ((|k#14| T@U) ) (!  (=> (and (and (= (type |k#14|) BoxType) ($IsBox |k#14| Maps._default.MapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#14|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@7|) |k#14|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@323 |mapa#0@@7| |mapb#0@@7|)) |k#14|) (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#14|))) :qid |Mapssdfy.126:20| :skolemid |9548| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#14|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@323 |mapa#0@@7| |mapb#0@@7|)) |k#14|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@7|) |k#14|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#14|)) ))) ($Is (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@323 |mapa#0@@7| |mapb#0@@7|) (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1)))) :qid |unknown.0:0| :skolemid |9549| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@323 |mapa#0@@7| |mapb#0@@7|)) ))))
(assert (forall ((Maps._default.MapUnionPreferA$U@@2 T@U) (Maps._default.MapUnionPreferA$T@@2 T@U) ($ly@@324 T@U) (|mapa#0@@8| T@U) (|mapb#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@2) TyType) (= (type Maps._default.MapUnionPreferA$T@@2) TyType)) (= (type $ly@@324) LayerTypeType)) (= (type |mapa#0@@8|) (MapType BoxType BoxType))) (= (type |mapb#0@@8|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@8| (TMap Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2)) ($Is |mapb#0@@8| (TMap Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2)))) (and (=> (|Maps.__default.MapUnionPreferA#requires| Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2 $ly@@324 |mapa#0@@8| |mapb#0@@8|) true) (=> true (|Maps.__default.MapUnionPreferA#requires| Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2 $ly@@324 |mapa#0@@8| |mapb#0@@8|)))) :qid |unknown.0:0| :skolemid |9550| :pattern ( (|Maps.__default.MapUnionPreferA#requires| Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2 $ly@@324 |mapa#0@@8| |mapb#0@@8|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@3 T@U) (Maps._default.MapUnionPreferA$T@@3 T@U) ($ly@@325 T@U) (|mapa#0@@9| T@U) (|mapb#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@3) TyType) (= (type Maps._default.MapUnionPreferA$T@@3) TyType)) (= (type $ly@@325) LayerTypeType)) (= (type |mapa#0@@9|) (MapType BoxType BoxType))) (= (type |mapb#0@@9|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 |mapa#0@@9| |mapb#0@@9|) (and ($Is |mapa#0@@9| (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3)) ($Is |mapb#0@@9| (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3))))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 ($LS $ly@@325) |mapa#0@@9| |mapb#0@@9|) (|Map#Glue| (|lambda#101| Maps._default.MapUnionPreferA$U@@3 (|Map#Domain| |mapa#0@@9|) (|Map#Domain| |mapb#0@@9|)) (|lambda#102| (|Map#Domain| |mapa#0@@9|) (|Map#Elements| |mapa#0@@9|) (|Map#Elements| |mapb#0@@9|)) (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3)))) :qid |unknown.0:0| :skolemid |9551| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 ($LS $ly@@325) |mapa#0@@9| |mapb#0@@9|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@4 T@U) (Maps._default.MapUnionPreferA$T@@4 T@U) ($ly@@326 T@U) (|mapa#0@@10| T@U) (|mapb#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@4) TyType) (= (type Maps._default.MapUnionPreferA$T@@4) TyType)) (= (type $ly@@326) LayerTypeType)) (= (type |mapa#0@@10|) (MapType BoxType BoxType))) (= (type |mapb#0@@10|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 (Lit |mapa#0@@10|) (Lit |mapb#0@@10|)) (and ($Is |mapa#0@@10| (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4)) ($Is |mapb#0@@10| (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4))))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 ($LS $ly@@326) (Lit |mapa#0@@10|) (Lit |mapb#0@@10|)) (|Map#Glue| (|lambda#101| Maps._default.MapUnionPreferA$U@@4 (Lit (|Map#Domain| (Lit |mapa#0@@10|))) (Lit (|Map#Domain| (Lit |mapb#0@@10|)))) (|lambda#102| (|Map#Domain| |mapa#0@@10|) (|Map#Elements| (Lit |mapa#0@@10|)) (|Map#Elements| (Lit |mapb#0@@10|))) (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |9552| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 ($LS $ly@@326) (Lit |mapa#0@@10|) (Lit |mapb#0@@10|))) ))))
(assert (forall ((arg0@@286 T@U) (arg1@@166 T@U) (arg2@@105 T@U) (arg3@@72 T@U) (arg4@@51 T@U) ) (! (= (type (Maps.__default.MapUnionPreferB arg0@@286 arg1@@166 arg2@@105 arg3@@72 arg4@@51)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnionPreferB| :pattern ( (Maps.__default.MapUnionPreferB arg0@@286 arg1@@166 arg2@@105 arg3@@72 arg4@@51)) )))
(assert (forall ((Maps._default.MapUnionPreferB$U T@U) (Maps._default.MapUnionPreferB$T T@U) ($ly@@327 T@U) (|mapa#0@@11| T@U) (|mapb#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferB$U) TyType) (= (type Maps._default.MapUnionPreferB$T) TyType)) (= (type $ly@@327) LayerTypeType)) (= (type |mapa#0@@11|) (MapType BoxType BoxType))) (= (type |mapb#0@@11|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T ($LS $ly@@327) |mapa#0@@11| |mapb#0@@11|) (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T $ly@@327 |mapa#0@@11| |mapb#0@@11|))) :qid |unknown.0:0| :skolemid |9553| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T ($LS $ly@@327) |mapa#0@@11| |mapb#0@@11|)) )))
(assert (forall ((Maps._default.MapUnionPreferB$U@@0 T@U) (Maps._default.MapUnionPreferB$T@@0 T@U) ($ly@@328 T@U) (|mapa#0@@12| T@U) (|mapb#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@0) TyType) (= (type Maps._default.MapUnionPreferB$T@@0) TyType)) (= (type $ly@@328) LayerTypeType)) (= (type |mapa#0@@12|) (MapType BoxType BoxType))) (= (type |mapb#0@@12|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 $ly@@328 |mapa#0@@12| |mapb#0@@12|) (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 $LZ |mapa#0@@12| |mapb#0@@12|))) :qid |unknown.0:0| :skolemid |9554| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 (AsFuelBottom $ly@@328) |mapa#0@@12| |mapb#0@@12|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@1 T@U) (Maps._default.MapUnionPreferB$T@@1 T@U) ($ly@@329 T@U) (|mapa#0@@13| T@U) (|mapb#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@1) TyType) (= (type Maps._default.MapUnionPreferB$T@@1) TyType)) (= (type $ly@@329) LayerTypeType)) (= (type |mapa#0@@13|) (MapType BoxType BoxType))) (= (type |mapb#0@@13|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 |mapa#0@@13| |mapb#0@@13|) (and ($Is |mapa#0@@13| (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1)) ($Is |mapb#0@@13| (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@329 |mapa#0@@13| |mapb#0@@13|)) (|Set#Union| (|Map#Domain| |mapa#0@@13|) (|Map#Domain| |mapb#0@@13|))) (forall ((|k#12@@0| T@U) ) (!  (=> (and (and (= (type |k#12@@0|) BoxType) ($IsBox |k#12@@0| Maps._default.MapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#12@@0|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@329 |mapa#0@@13| |mapb#0@@13|)) |k#12@@0|) (MapType0Select (|Map#Elements| |mapb#0@@13|) |k#12@@0|))) :qid |Mapssdfy.133:20| :skolemid |9555| :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@13|) |k#12@@0|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@329 |mapa#0@@13| |mapb#0@@13|)) |k#12@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#12@@0|)) ))) (forall ((|k#13@@0| T@U) ) (!  (=> (and (and (= (type |k#13@@0|) BoxType) ($IsBox |k#13@@0| Maps._default.MapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@13|) |k#13@@0|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#13@@0|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@329 |mapa#0@@13| |mapb#0@@13|)) |k#13@@0|) (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#13@@0|))) :qid |Mapssdfy.134:20| :skolemid |9556| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#13@@0|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@329 |mapa#0@@13| |mapb#0@@13|)) |k#13@@0|)) ))) (forall ((|k#14@@0| T@U) ) (!  (=> (and (and (= (type |k#14@@0|) BoxType) ($IsBox |k#14@@0| Maps._default.MapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@13|) |k#14@@0|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#14@@0|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@329 |mapa#0@@13| |mapb#0@@13|)) |k#14@@0|) (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#14@@0|))) :qid |Mapssdfy.135:20| :skolemid |9557| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#14@@0|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@329 |mapa#0@@13| |mapb#0@@13|)) |k#14@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#14@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@13|) |k#14@@0|)) ))) ($Is (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@329 |mapa#0@@13| |mapb#0@@13|) (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1)))) :qid |unknown.0:0| :skolemid |9558| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@329 |mapa#0@@13| |mapb#0@@13|)) ))))
(assert (forall ((Maps._default.MapUnionPreferB$U@@2 T@U) (Maps._default.MapUnionPreferB$T@@2 T@U) ($ly@@330 T@U) (|mapa#0@@14| T@U) (|mapb#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@2) TyType) (= (type Maps._default.MapUnionPreferB$T@@2) TyType)) (= (type $ly@@330) LayerTypeType)) (= (type |mapa#0@@14|) (MapType BoxType BoxType))) (= (type |mapb#0@@14|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@14| (TMap Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2)) ($Is |mapb#0@@14| (TMap Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2)))) (and (=> (|Maps.__default.MapUnionPreferB#requires| Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2 $ly@@330 |mapa#0@@14| |mapb#0@@14|) true) (=> true (|Maps.__default.MapUnionPreferB#requires| Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2 $ly@@330 |mapa#0@@14| |mapb#0@@14|)))) :qid |unknown.0:0| :skolemid |9559| :pattern ( (|Maps.__default.MapUnionPreferB#requires| Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2 $ly@@330 |mapa#0@@14| |mapb#0@@14|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@3 T@U) (Maps._default.MapUnionPreferB$T@@3 T@U) ($ly@@331 T@U) (|mapa#0@@15| T@U) (|mapb#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@3) TyType) (= (type Maps._default.MapUnionPreferB$T@@3) TyType)) (= (type $ly@@331) LayerTypeType)) (= (type |mapa#0@@15|) (MapType BoxType BoxType))) (= (type |mapb#0@@15|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 |mapa#0@@15| |mapb#0@@15|) (and ($Is |mapa#0@@15| (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3)) ($Is |mapb#0@@15| (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3))))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 ($LS $ly@@331) |mapa#0@@15| |mapb#0@@15|) (|Map#Glue| (|lambda#101| Maps._default.MapUnionPreferB$U@@3 (|Map#Domain| |mapa#0@@15|) (|Map#Domain| |mapb#0@@15|)) (|lambda#102| (|Map#Domain| |mapb#0@@15|) (|Map#Elements| |mapb#0@@15|) (|Map#Elements| |mapa#0@@15|)) (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3)))) :qid |unknown.0:0| :skolemid |9560| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 ($LS $ly@@331) |mapa#0@@15| |mapb#0@@15|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@4 T@U) (Maps._default.MapUnionPreferB$T@@4 T@U) ($ly@@332 T@U) (|mapa#0@@16| T@U) (|mapb#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@4) TyType) (= (type Maps._default.MapUnionPreferB$T@@4) TyType)) (= (type $ly@@332) LayerTypeType)) (= (type |mapa#0@@16|) (MapType BoxType BoxType))) (= (type |mapb#0@@16|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 (Lit |mapa#0@@16|) (Lit |mapb#0@@16|)) (and ($Is |mapa#0@@16| (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4)) ($Is |mapb#0@@16| (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4))))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 ($LS $ly@@332) (Lit |mapa#0@@16|) (Lit |mapb#0@@16|)) (|Map#Glue| (|lambda#101| Maps._default.MapUnionPreferB$U@@4 (Lit (|Map#Domain| (Lit |mapa#0@@16|))) (Lit (|Map#Domain| (Lit |mapb#0@@16|)))) (|lambda#102| (|Map#Domain| |mapb#0@@16|) (|Map#Elements| (Lit |mapb#0@@16|)) (|Map#Elements| (Lit |mapa#0@@16|))) (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |9561| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 ($LS $ly@@332) (Lit |mapa#0@@16|) (Lit |mapb#0@@16|))) ))))
(assert (forall ((arg0@@287 T@U) (arg1@@167 T@U) (arg2@@106 T@U) (arg3@@73 T@U) (arg4@@52 T@U) ) (! (= (type (Maps.__default.MapUnion arg0@@287 arg1@@167 arg2@@106 arg3@@73 arg4@@52)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnion| :pattern ( (Maps.__default.MapUnion arg0@@287 arg1@@167 arg2@@106 arg3@@73 arg4@@52)) )))
(assert (forall ((Maps._default.MapUnion$U T@U) (Maps._default.MapUnion$T T@U) ($ly@@333 T@U) (|mapa#0@@17| T@U) (|mapb#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnion$U) TyType) (= (type Maps._default.MapUnion$T) TyType)) (= (type $ly@@333) LayerTypeType)) (= (type |mapa#0@@17|) (MapType BoxType BoxType))) (= (type |mapb#0@@17|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T ($LS $ly@@333) |mapa#0@@17| |mapb#0@@17|) (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T $ly@@333 |mapa#0@@17| |mapb#0@@17|))) :qid |unknown.0:0| :skolemid |9562| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T ($LS $ly@@333) |mapa#0@@17| |mapb#0@@17|)) )))
(assert (forall ((Maps._default.MapUnion$U@@0 T@U) (Maps._default.MapUnion$T@@0 T@U) ($ly@@334 T@U) (|mapa#0@@18| T@U) (|mapb#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnion$U@@0) TyType) (= (type Maps._default.MapUnion$T@@0) TyType)) (= (type $ly@@334) LayerTypeType)) (= (type |mapa#0@@18|) (MapType BoxType BoxType))) (= (type |mapb#0@@18|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 $ly@@334 |mapa#0@@18| |mapb#0@@18|) (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 $LZ |mapa#0@@18| |mapb#0@@18|))) :qid |unknown.0:0| :skolemid |9563| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 (AsFuelBottom $ly@@334) |mapa#0@@18| |mapb#0@@18|)) )))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@1 T@U) (Maps._default.MapUnion$T@@1 T@U) ($ly@@335 T@U) (|mapa#0@@19| T@U) (|mapb#0@@19| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@1) TyType) (= (type Maps._default.MapUnion$T@@1) TyType)) (= (type $ly@@335) LayerTypeType)) (= (type |mapa#0@@19|) (MapType BoxType BoxType))) (= (type |mapb#0@@19|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 |mapa#0@@19| |mapb#0@@19|) (and ($Is |mapa#0@@19| (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1)) ($Is |mapb#0@@19| (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@335 |mapa#0@@19| |mapb#0@@19|)) (|Set#Union| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|))) (forall ((|k#12@@1| T@U) ) (!  (=> (and (and (= (type |k#12@@1|) BoxType) ($IsBox |k#12@@1| Maps._default.MapUnion$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@19|) |k#12@@1|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@19|) |k#12@@1|))))) (= (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#12@@1|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@335 |mapa#0@@19| |mapb#0@@19|)) |k#12@@1|))) :qid |Mapssdfy.144:18| :skolemid |9564| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@335 |mapa#0@@19| |mapb#0@@19|)) |k#12@@1|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#12@@1|)) ))) (forall ((|k#13@@1| T@U) ) (!  (=> (and (and (= (type |k#13@@1|) BoxType) ($IsBox |k#13@@1| Maps._default.MapUnion$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@19|) |k#13@@1|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@19|) |k#13@@1|))))) (= (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#13@@1|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@335 |mapa#0@@19| |mapb#0@@19|)) |k#13@@1|))) :qid |Mapssdfy.145:18| :skolemid |9565| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@335 |mapa#0@@19| |mapb#0@@19|)) |k#13@@1|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#13@@1|)) ))) (forall ((|k#14@@1| T@U) ) (!  (=> (and (and (= (type |k#14@@1|) BoxType) ($IsBox |k#14@@1| Maps._default.MapUnion$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@19|) |k#14@@1|)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@19|) |k#14@@1|)))) (or (= (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#14@@1|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@335 |mapa#0@@19| |mapb#0@@19|)) |k#14@@1|)) (= (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#14@@1|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@335 |mapa#0@@19| |mapb#0@@19|)) |k#14@@1|)))) :qid |Mapssdfy.146:18| :skolemid |9566| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#14@@1|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@335 |mapa#0@@19| |mapb#0@@19|)) |k#14@@1|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#14@@1|)) ))) ($Is (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@335 |mapa#0@@19| |mapb#0@@19|) (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1)))) :qid |unknown.0:0| :skolemid |9567| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@335 |mapa#0@@19| |mapb#0@@19|)) ))))
(assert (forall ((Maps._default.MapUnion$U@@2 T@U) (Maps._default.MapUnion$T@@2 T@U) ($ly@@336 T@U) (|mapa#0@@20| T@U) (|mapb#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@2) TyType) (= (type Maps._default.MapUnion$T@@2) TyType)) (= (type $ly@@336) LayerTypeType)) (= (type |mapa#0@@20|) (MapType BoxType BoxType))) (= (type |mapb#0@@20|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@20| (TMap Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2)) ($Is |mapb#0@@20| (TMap Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2)))) (and (=> (|Maps.__default.MapUnion#requires| Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2 $ly@@336 |mapa#0@@20| |mapb#0@@20|) true) (=> true (|Maps.__default.MapUnion#requires| Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2 $ly@@336 |mapa#0@@20| |mapb#0@@20|)))) :qid |unknown.0:0| :skolemid |9568| :pattern ( (|Maps.__default.MapUnion#requires| Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2 $ly@@336 |mapa#0@@20| |mapb#0@@20|)) )))
(assert (= (type StartFuel_Maps._default.MapUnionPreferA) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@3 T@U) (Maps._default.MapUnion$T@@3 T@U) ($ly@@337 T@U) (|mapa#0@@21| T@U) (|mapb#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@3) TyType) (= (type Maps._default.MapUnion$T@@3) TyType)) (= (type $ly@@337) LayerTypeType)) (= (type |mapa#0@@21|) (MapType BoxType BoxType))) (= (type |mapb#0@@21|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 |mapa#0@@21| |mapb#0@@21|) (and ($Is |mapa#0@@21| (TMap Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3)) ($Is |mapb#0@@21| (TMap Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3))))) (and (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 |mapa#0@@21| |mapb#0@@21|) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 ($LS $ly@@337) |mapa#0@@21| |mapb#0@@21|) (Maps.__default.MapUnionPreferA Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 StartFuel_Maps._default.MapUnionPreferA |mapa#0@@21| |mapb#0@@21|)))) :qid |unknown.0:0| :skolemid |9569| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 ($LS $ly@@337) |mapa#0@@21| |mapb#0@@21|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@4 T@U) (Maps._default.MapUnion$T@@4 T@U) ($ly@@338 T@U) (|mapa#0@@22| T@U) (|mapb#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@4) TyType) (= (type Maps._default.MapUnion$T@@4) TyType)) (= (type $ly@@338) LayerTypeType)) (= (type |mapa#0@@22|) (MapType BoxType BoxType))) (= (type |mapb#0@@22|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (and ($Is |mapa#0@@22| (TMap Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4)) ($Is |mapb#0@@22| (TMap Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4))))) (and (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 ($LS $ly@@338) (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (Maps.__default.MapUnionPreferA Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 StartFuel_Maps._default.MapUnionPreferA (Lit |mapa#0@@22|) (Lit |mapb#0@@22|))))) :qid |unknown.0:0| :weight 3 :skolemid |9570| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 ($LS $ly@@338) (Lit |mapa#0@@22|) (Lit |mapb#0@@22|))) ))))
(assert (forall ((arg0@@288 T@U) (arg1@@168 T@U) (arg2@@107 T@U) (arg3@@74 T@U) (arg4@@53 T@U) ) (! (= (type (Maps.__default.IMapUnionPreferA arg0@@288 arg1@@168 arg2@@107 arg3@@74 arg4@@53)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnionPreferA| :pattern ( (Maps.__default.IMapUnionPreferA arg0@@288 arg1@@168 arg2@@107 arg3@@74 arg4@@53)) )))
(assert (forall ((Maps._default.IMapUnionPreferA$U T@U) (Maps._default.IMapUnionPreferA$T T@U) ($ly@@339 T@U) (|mapa#0@@23| T@U) (|mapb#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U) TyType) (= (type Maps._default.IMapUnionPreferA$T) TyType)) (= (type $ly@@339) LayerTypeType)) (= (type |mapa#0@@23|) (IMapType BoxType BoxType))) (= (type |mapb#0@@23|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T ($LS $ly@@339) |mapa#0@@23| |mapb#0@@23|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T $ly@@339 |mapa#0@@23| |mapb#0@@23|))) :qid |unknown.0:0| :skolemid |9571| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T ($LS $ly@@339) |mapa#0@@23| |mapb#0@@23|)) )))
(assert (forall ((Maps._default.IMapUnionPreferA$U@@0 T@U) (Maps._default.IMapUnionPreferA$T@@0 T@U) ($ly@@340 T@U) (|mapa#0@@24| T@U) (|mapb#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@0) TyType) (= (type Maps._default.IMapUnionPreferA$T@@0) TyType)) (= (type $ly@@340) LayerTypeType)) (= (type |mapa#0@@24|) (IMapType BoxType BoxType))) (= (type |mapb#0@@24|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 $ly@@340 |mapa#0@@24| |mapb#0@@24|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 $LZ |mapa#0@@24| |mapb#0@@24|))) :qid |unknown.0:0| :skolemid |9572| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 (AsFuelBottom $ly@@340) |mapa#0@@24| |mapb#0@@24|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@1 T@U) (Maps._default.IMapUnionPreferA$T@@1 T@U) ($ly@@341 T@U) (|mapa#0@@25| T@U) (|mapb#0@@25| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@1) TyType) (= (type Maps._default.IMapUnionPreferA$T@@1) TyType)) (= (type $ly@@341) LayerTypeType)) (= (type |mapa#0@@25|) (IMapType BoxType BoxType))) (= (type |mapb#0@@25|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 |mapa#0@@25| |mapb#0@@25|) (and ($Is |mapa#0@@25| (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1)) ($Is |mapb#0@@25| (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@341 |mapa#0@@25| |mapb#0@@25|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@25|) (|IMap#Domain| |mapb#0@@25|))) (forall ((|k#12@@2| T@U) ) (!  (=> (and (and (= (type |k#12@@2|) BoxType) ($IsBox |k#12@@2| Maps._default.IMapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#12@@2|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@341 |mapa#0@@25| |mapb#0@@25|)) |k#12@@2|) (MapType0Select (|IMap#Elements| |mapa#0@@25|) |k#12@@2|))) :qid |Mapssdfy.153:20| :skolemid |9573| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@25|) |k#12@@2|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@341 |mapa#0@@25| |mapb#0@@25|)) |k#12@@2|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#12@@2|)) ))) (forall ((|k#13@@2| T@U) ) (!  (=> (and (and (= (type |k#13@@2|) BoxType) ($IsBox |k#13@@2| Maps._default.IMapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@25|) |k#13@@2|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#13@@2|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@341 |mapa#0@@25| |mapb#0@@25|)) |k#13@@2|) (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#13@@2|))) :qid |Mapssdfy.154:20| :skolemid |9574| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#13@@2|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@341 |mapa#0@@25| |mapb#0@@25|)) |k#13@@2|)) ))) (forall ((|k#14@@2| T@U) ) (!  (=> (and (and (= (type |k#14@@2|) BoxType) ($IsBox |k#14@@2| Maps._default.IMapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@25|) |k#14@@2|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#14@@2|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@341 |mapa#0@@25| |mapb#0@@25|)) |k#14@@2|) (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#14@@2|))) :qid |Mapssdfy.155:20| :skolemid |9575| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#14@@2|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@341 |mapa#0@@25| |mapb#0@@25|)) |k#14@@2|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#14@@2|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@25|) |k#14@@2|)) ))) ($Is (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@341 |mapa#0@@25| |mapb#0@@25|) (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1)))) :qid |unknown.0:0| :skolemid |9576| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@341 |mapa#0@@25| |mapb#0@@25|)) ))))
(assert (forall ((Maps._default.IMapUnionPreferA$U@@2 T@U) (Maps._default.IMapUnionPreferA$T@@2 T@U) ($ly@@342 T@U) (|mapa#0@@26| T@U) (|mapb#0@@26| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@2) TyType) (= (type Maps._default.IMapUnionPreferA$T@@2) TyType)) (= (type $ly@@342) LayerTypeType)) (= (type |mapa#0@@26|) (IMapType BoxType BoxType))) (= (type |mapb#0@@26|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@26| (TIMap Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2)) ($Is |mapb#0@@26| (TIMap Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2)))) (and (=> (|Maps.__default.IMapUnionPreferA#requires| Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2 $ly@@342 |mapa#0@@26| |mapb#0@@26|) true) (=> true (|Maps.__default.IMapUnionPreferA#requires| Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2 $ly@@342 |mapa#0@@26| |mapb#0@@26|)))) :qid |unknown.0:0| :skolemid |9577| :pattern ( (|Maps.__default.IMapUnionPreferA#requires| Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2 $ly@@342 |mapa#0@@26| |mapb#0@@26|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@3 T@U) (Maps._default.IMapUnionPreferA$T@@3 T@U) ($ly@@343 T@U) (|mapa#0@@27| T@U) (|mapb#0@@27| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@3) TyType) (= (type Maps._default.IMapUnionPreferA$T@@3) TyType)) (= (type $ly@@343) LayerTypeType)) (= (type |mapa#0@@27|) (IMapType BoxType BoxType))) (= (type |mapb#0@@27|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 |mapa#0@@27| |mapb#0@@27|) (and ($Is |mapa#0@@27| (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3)) ($Is |mapb#0@@27| (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3))))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 ($LS $ly@@343) |mapa#0@@27| |mapb#0@@27|) (|IMap#Glue| (|lambda#101| Maps._default.IMapUnionPreferA$U@@3 (|IMap#Domain| |mapa#0@@27|) (|IMap#Domain| |mapb#0@@27|)) (|lambda#102| (|IMap#Domain| |mapa#0@@27|) (|IMap#Elements| |mapa#0@@27|) (|IMap#Elements| |mapb#0@@27|)) (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3)))) :qid |unknown.0:0| :skolemid |9578| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 ($LS $ly@@343) |mapa#0@@27| |mapb#0@@27|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@4 T@U) (Maps._default.IMapUnionPreferA$T@@4 T@U) ($ly@@344 T@U) (|mapa#0@@28| T@U) (|mapb#0@@28| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@4) TyType) (= (type Maps._default.IMapUnionPreferA$T@@4) TyType)) (= (type $ly@@344) LayerTypeType)) (= (type |mapa#0@@28|) (IMapType BoxType BoxType))) (= (type |mapb#0@@28|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 (Lit |mapa#0@@28|) (Lit |mapb#0@@28|)) (and ($Is |mapa#0@@28| (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4)) ($Is |mapb#0@@28| (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4))))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 ($LS $ly@@344) (Lit |mapa#0@@28|) (Lit |mapb#0@@28|)) (|IMap#Glue| (|lambda#101| Maps._default.IMapUnionPreferA$U@@4 (Lit (|IMap#Domain| (Lit |mapa#0@@28|))) (Lit (|IMap#Domain| (Lit |mapb#0@@28|)))) (|lambda#102| (|IMap#Domain| |mapa#0@@28|) (|IMap#Elements| (Lit |mapa#0@@28|)) (|IMap#Elements| (Lit |mapb#0@@28|))) (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |9579| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 ($LS $ly@@344) (Lit |mapa#0@@28|) (Lit |mapb#0@@28|))) ))))
(assert (forall ((arg0@@289 T@U) (arg1@@169 T@U) (arg2@@108 T@U) (arg3@@75 T@U) (arg4@@54 T@U) ) (! (= (type (Maps.__default.IMapUnionPreferB arg0@@289 arg1@@169 arg2@@108 arg3@@75 arg4@@54)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnionPreferB| :pattern ( (Maps.__default.IMapUnionPreferB arg0@@289 arg1@@169 arg2@@108 arg3@@75 arg4@@54)) )))
(assert (forall ((Maps._default.IMapUnionPreferB$U T@U) (Maps._default.IMapUnionPreferB$T T@U) ($ly@@345 T@U) (|mapa#0@@29| T@U) (|mapb#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U) TyType) (= (type Maps._default.IMapUnionPreferB$T) TyType)) (= (type $ly@@345) LayerTypeType)) (= (type |mapa#0@@29|) (IMapType BoxType BoxType))) (= (type |mapb#0@@29|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T ($LS $ly@@345) |mapa#0@@29| |mapb#0@@29|) (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T $ly@@345 |mapa#0@@29| |mapb#0@@29|))) :qid |unknown.0:0| :skolemid |9580| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T ($LS $ly@@345) |mapa#0@@29| |mapb#0@@29|)) )))
(assert (forall ((Maps._default.IMapUnionPreferB$U@@0 T@U) (Maps._default.IMapUnionPreferB$T@@0 T@U) ($ly@@346 T@U) (|mapa#0@@30| T@U) (|mapb#0@@30| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@0) TyType) (= (type Maps._default.IMapUnionPreferB$T@@0) TyType)) (= (type $ly@@346) LayerTypeType)) (= (type |mapa#0@@30|) (IMapType BoxType BoxType))) (= (type |mapb#0@@30|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 $ly@@346 |mapa#0@@30| |mapb#0@@30|) (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 $LZ |mapa#0@@30| |mapb#0@@30|))) :qid |unknown.0:0| :skolemid |9581| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 (AsFuelBottom $ly@@346) |mapa#0@@30| |mapb#0@@30|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@1 T@U) (Maps._default.IMapUnionPreferB$T@@1 T@U) ($ly@@347 T@U) (|mapa#0@@31| T@U) (|mapb#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@1) TyType) (= (type Maps._default.IMapUnionPreferB$T@@1) TyType)) (= (type $ly@@347) LayerTypeType)) (= (type |mapa#0@@31|) (IMapType BoxType BoxType))) (= (type |mapb#0@@31|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 |mapa#0@@31| |mapb#0@@31|) (and ($Is |mapa#0@@31| (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1)) ($Is |mapb#0@@31| (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@347 |mapa#0@@31| |mapb#0@@31|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@31|) (|IMap#Domain| |mapb#0@@31|))) (forall ((|k#12@@3| T@U) ) (!  (=> (and (and (= (type |k#12@@3|) BoxType) ($IsBox |k#12@@3| Maps._default.IMapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#12@@3|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@347 |mapa#0@@31| |mapb#0@@31|)) |k#12@@3|) (MapType0Select (|IMap#Elements| |mapb#0@@31|) |k#12@@3|))) :qid |Mapssdfy.162:20| :skolemid |9582| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@31|) |k#12@@3|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@347 |mapa#0@@31| |mapb#0@@31|)) |k#12@@3|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#12@@3|)) ))) (forall ((|k#13@@3| T@U) ) (!  (=> (and (and (= (type |k#13@@3|) BoxType) ($IsBox |k#13@@3| Maps._default.IMapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@31|) |k#13@@3|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#13@@3|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@347 |mapa#0@@31| |mapb#0@@31|)) |k#13@@3|) (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#13@@3|))) :qid |Mapssdfy.163:20| :skolemid |9583| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#13@@3|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@347 |mapa#0@@31| |mapb#0@@31|)) |k#13@@3|)) ))) (forall ((|k#14@@3| T@U) ) (!  (=> (and (and (= (type |k#14@@3|) BoxType) ($IsBox |k#14@@3| Maps._default.IMapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@31|) |k#14@@3|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#14@@3|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@347 |mapa#0@@31| |mapb#0@@31|)) |k#14@@3|) (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#14@@3|))) :qid |Mapssdfy.164:20| :skolemid |9584| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#14@@3|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@347 |mapa#0@@31| |mapb#0@@31|)) |k#14@@3|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#14@@3|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@31|) |k#14@@3|)) ))) ($Is (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@347 |mapa#0@@31| |mapb#0@@31|) (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1)))) :qid |unknown.0:0| :skolemid |9585| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@347 |mapa#0@@31| |mapb#0@@31|)) ))))
(assert (forall ((Maps._default.IMapUnionPreferB$U@@2 T@U) (Maps._default.IMapUnionPreferB$T@@2 T@U) ($ly@@348 T@U) (|mapa#0@@32| T@U) (|mapb#0@@32| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@2) TyType) (= (type Maps._default.IMapUnionPreferB$T@@2) TyType)) (= (type $ly@@348) LayerTypeType)) (= (type |mapa#0@@32|) (IMapType BoxType BoxType))) (= (type |mapb#0@@32|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@32| (TIMap Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2)) ($Is |mapb#0@@32| (TIMap Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2)))) (and (=> (|Maps.__default.IMapUnionPreferB#requires| Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2 $ly@@348 |mapa#0@@32| |mapb#0@@32|) true) (=> true (|Maps.__default.IMapUnionPreferB#requires| Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2 $ly@@348 |mapa#0@@32| |mapb#0@@32|)))) :qid |unknown.0:0| :skolemid |9586| :pattern ( (|Maps.__default.IMapUnionPreferB#requires| Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2 $ly@@348 |mapa#0@@32| |mapb#0@@32|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@3 T@U) (Maps._default.IMapUnionPreferB$T@@3 T@U) ($ly@@349 T@U) (|mapa#0@@33| T@U) (|mapb#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@3) TyType) (= (type Maps._default.IMapUnionPreferB$T@@3) TyType)) (= (type $ly@@349) LayerTypeType)) (= (type |mapa#0@@33|) (IMapType BoxType BoxType))) (= (type |mapb#0@@33|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 |mapa#0@@33| |mapb#0@@33|) (and ($Is |mapa#0@@33| (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3)) ($Is |mapb#0@@33| (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3))))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 ($LS $ly@@349) |mapa#0@@33| |mapb#0@@33|) (|IMap#Glue| (|lambda#101| Maps._default.IMapUnionPreferB$U@@3 (|IMap#Domain| |mapa#0@@33|) (|IMap#Domain| |mapb#0@@33|)) (|lambda#102| (|IMap#Domain| |mapb#0@@33|) (|IMap#Elements| |mapb#0@@33|) (|IMap#Elements| |mapa#0@@33|)) (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3)))) :qid |unknown.0:0| :skolemid |9587| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 ($LS $ly@@349) |mapa#0@@33| |mapb#0@@33|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@4 T@U) (Maps._default.IMapUnionPreferB$T@@4 T@U) ($ly@@350 T@U) (|mapa#0@@34| T@U) (|mapb#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@4) TyType) (= (type Maps._default.IMapUnionPreferB$T@@4) TyType)) (= (type $ly@@350) LayerTypeType)) (= (type |mapa#0@@34|) (IMapType BoxType BoxType))) (= (type |mapb#0@@34|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 (Lit |mapa#0@@34|) (Lit |mapb#0@@34|)) (and ($Is |mapa#0@@34| (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4)) ($Is |mapb#0@@34| (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4))))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 ($LS $ly@@350) (Lit |mapa#0@@34|) (Lit |mapb#0@@34|)) (|IMap#Glue| (|lambda#101| Maps._default.IMapUnionPreferB$U@@4 (Lit (|IMap#Domain| (Lit |mapa#0@@34|))) (Lit (|IMap#Domain| (Lit |mapb#0@@34|)))) (|lambda#102| (|IMap#Domain| |mapb#0@@34|) (|IMap#Elements| (Lit |mapb#0@@34|)) (|IMap#Elements| (Lit |mapa#0@@34|))) (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |9588| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 ($LS $ly@@350) (Lit |mapa#0@@34|) (Lit |mapb#0@@34|))) ))))
(assert (forall ((arg0@@290 T@U) (arg1@@170 T@U) (arg2@@109 T@U) (arg3@@76 T@U) (arg4@@55 T@U) ) (! (= (type (Maps.__default.IMapUnion arg0@@290 arg1@@170 arg2@@109 arg3@@76 arg4@@55)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnion| :pattern ( (Maps.__default.IMapUnion arg0@@290 arg1@@170 arg2@@109 arg3@@76 arg4@@55)) )))
(assert (forall ((Maps._default.IMapUnion$U T@U) (Maps._default.IMapUnion$T T@U) ($ly@@351 T@U) (|mapa#0@@35| T@U) (|mapb#0@@35| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnion$U) TyType) (= (type Maps._default.IMapUnion$T) TyType)) (= (type $ly@@351) LayerTypeType)) (= (type |mapa#0@@35|) (IMapType BoxType BoxType))) (= (type |mapb#0@@35|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T ($LS $ly@@351) |mapa#0@@35| |mapb#0@@35|) (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T $ly@@351 |mapa#0@@35| |mapb#0@@35|))) :qid |unknown.0:0| :skolemid |9589| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T ($LS $ly@@351) |mapa#0@@35| |mapb#0@@35|)) )))
(assert (forall ((Maps._default.IMapUnion$U@@0 T@U) (Maps._default.IMapUnion$T@@0 T@U) ($ly@@352 T@U) (|mapa#0@@36| T@U) (|mapb#0@@36| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnion$U@@0) TyType) (= (type Maps._default.IMapUnion$T@@0) TyType)) (= (type $ly@@352) LayerTypeType)) (= (type |mapa#0@@36|) (IMapType BoxType BoxType))) (= (type |mapb#0@@36|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 $ly@@352 |mapa#0@@36| |mapb#0@@36|) (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 $LZ |mapa#0@@36| |mapb#0@@36|))) :qid |unknown.0:0| :skolemid |9590| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 (AsFuelBottom $ly@@352) |mapa#0@@36| |mapb#0@@36|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@1 T@U) (Maps._default.IMapUnion$T@@1 T@U) ($ly@@353 T@U) (|mapa#0@@37| T@U) (|mapb#0@@37| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@1) TyType) (= (type Maps._default.IMapUnion$T@@1) TyType)) (= (type $ly@@353) LayerTypeType)) (= (type |mapa#0@@37|) (IMapType BoxType BoxType))) (= (type |mapb#0@@37|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 |mapa#0@@37| |mapb#0@@37|) (and ($Is |mapa#0@@37| (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1)) ($Is |mapb#0@@37| (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@353 |mapa#0@@37| |mapb#0@@37|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|))) (forall ((|k#12@@4| T@U) ) (!  (=> (and (and (= (type |k#12@@4|) BoxType) ($IsBox |k#12@@4| Maps._default.IMapUnion$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@37|) |k#12@@4|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@37|) |k#12@@4|))))) (= (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#12@@4|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@353 |mapa#0@@37| |mapb#0@@37|)) |k#12@@4|))) :qid |Mapssdfy.173:18| :skolemid |9591| :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@353 |mapa#0@@37| |mapb#0@@37|)) |k#12@@4|)) :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#12@@4|)) ))) (forall ((|k#13@@4| T@U) ) (!  (=> (and (and (= (type |k#13@@4|) BoxType) ($IsBox |k#13@@4| Maps._default.IMapUnion$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@37|) |k#13@@4|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@37|) |k#13@@4|))))) (= (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#13@@4|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@353 |mapa#0@@37| |mapb#0@@37|)) |k#13@@4|))) :qid |Mapssdfy.174:18| :skolemid |9592| :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@353 |mapa#0@@37| |mapb#0@@37|)) |k#13@@4|)) :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#13@@4|)) ))) (forall ((|k#14@@4| T@U) ) (!  (=> (and (and (= (type |k#14@@4|) BoxType) ($IsBox |k#14@@4| Maps._default.IMapUnion$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@37|) |k#14@@4|)) (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@37|) |k#14@@4|)))) (or (= (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#14@@4|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@353 |mapa#0@@37| |mapb#0@@37|)) |k#14@@4|)) (= (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#14@@4|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@353 |mapa#0@@37| |mapb#0@@37|)) |k#14@@4|)))) :qid |Mapssdfy.175:18| :skolemid |9593| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#14@@4|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@353 |mapa#0@@37| |mapb#0@@37|)) |k#14@@4|)) :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#14@@4|)) ))) ($Is (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@353 |mapa#0@@37| |mapb#0@@37|) (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1)))) :qid |unknown.0:0| :skolemid |9594| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@353 |mapa#0@@37| |mapb#0@@37|)) ))))
(assert (forall ((Maps._default.IMapUnion$U@@2 T@U) (Maps._default.IMapUnion$T@@2 T@U) ($ly@@354 T@U) (|mapa#0@@38| T@U) (|mapb#0@@38| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@2) TyType) (= (type Maps._default.IMapUnion$T@@2) TyType)) (= (type $ly@@354) LayerTypeType)) (= (type |mapa#0@@38|) (IMapType BoxType BoxType))) (= (type |mapb#0@@38|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@38| (TIMap Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2)) ($Is |mapb#0@@38| (TIMap Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2)))) (and (=> (|Maps.__default.IMapUnion#requires| Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2 $ly@@354 |mapa#0@@38| |mapb#0@@38|) true) (=> true (|Maps.__default.IMapUnion#requires| Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2 $ly@@354 |mapa#0@@38| |mapb#0@@38|)))) :qid |unknown.0:0| :skolemid |9595| :pattern ( (|Maps.__default.IMapUnion#requires| Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2 $ly@@354 |mapa#0@@38| |mapb#0@@38|)) )))
(assert (= (type StartFuel_Maps._default.IMapUnionPreferA) LayerTypeType))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@3 T@U) (Maps._default.IMapUnion$T@@3 T@U) ($ly@@355 T@U) (|mapa#0@@39| T@U) (|mapb#0@@39| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@3) TyType) (= (type Maps._default.IMapUnion$T@@3) TyType)) (= (type $ly@@355) LayerTypeType)) (= (type |mapa#0@@39|) (IMapType BoxType BoxType))) (= (type |mapb#0@@39|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 |mapa#0@@39| |mapb#0@@39|) (and ($Is |mapa#0@@39| (TIMap Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3)) ($Is |mapb#0@@39| (TIMap Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3))))) (and (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 |mapa#0@@39| |mapb#0@@39|) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 ($LS $ly@@355) |mapa#0@@39| |mapb#0@@39|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 StartFuel_Maps._default.IMapUnionPreferA |mapa#0@@39| |mapb#0@@39|)))) :qid |unknown.0:0| :skolemid |9596| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 ($LS $ly@@355) |mapa#0@@39| |mapb#0@@39|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@4 T@U) (Maps._default.IMapUnion$T@@4 T@U) ($ly@@356 T@U) (|mapa#0@@40| T@U) (|mapb#0@@40| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@4) TyType) (= (type Maps._default.IMapUnion$T@@4) TyType)) (= (type $ly@@356) LayerTypeType)) (= (type |mapa#0@@40|) (IMapType BoxType BoxType))) (= (type |mapb#0@@40|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (and ($Is |mapa#0@@40| (TIMap Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4)) ($Is |mapb#0@@40| (TIMap Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4))))) (and (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 ($LS $ly@@356) (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 StartFuel_Maps._default.IMapUnionPreferA (Lit |mapa#0@@40|) (Lit |mapb#0@@40|))))) :qid |unknown.0:0| :weight 3 :skolemid |9597| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 ($LS $ly@@356) (Lit |mapa#0@@40|) (Lit |mapb#0@@40|))) ))))
(assert (forall ((arg0@@291 T@U) (arg1@@171 T@U) (arg2@@110 T@U) (arg3@@77 T@U) (arg4@@56 T@U) (arg5@@21 T@U) ) (! (= (type (Maps.__default.MapDisjointUnion3 arg0@@291 arg1@@171 arg2@@110 arg3@@77 arg4@@56 arg5@@21)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapDisjointUnion3| :pattern ( (Maps.__default.MapDisjointUnion3 arg0@@291 arg1@@171 arg2@@110 arg3@@77 arg4@@56 arg5@@21)) )))
(assert (forall ((Maps._default.MapDisjointUnion3$U T@U) (Maps._default.MapDisjointUnion3$T T@U) ($ly@@357 T@U) (|mapa#0@@41| T@U) (|mapb#0@@41| T@U) (|mapc#0| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U) TyType) (= (type Maps._default.MapDisjointUnion3$T) TyType)) (= (type $ly@@357) LayerTypeType)) (= (type |mapa#0@@41|) (MapType BoxType BoxType))) (= (type |mapb#0@@41|) (MapType BoxType BoxType))) (= (type |mapc#0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T ($LS $ly@@357) |mapa#0@@41| |mapb#0@@41| |mapc#0|) (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T $ly@@357 |mapa#0@@41| |mapb#0@@41| |mapc#0|))) :qid |unknown.0:0| :skolemid |9598| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T ($LS $ly@@357) |mapa#0@@41| |mapb#0@@41| |mapc#0|)) )))
(assert (forall ((Maps._default.MapDisjointUnion3$U@@0 T@U) (Maps._default.MapDisjointUnion3$T@@0 T@U) ($ly@@358 T@U) (|mapa#0@@42| T@U) (|mapb#0@@42| T@U) (|mapc#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@0) TyType) (= (type Maps._default.MapDisjointUnion3$T@@0) TyType)) (= (type $ly@@358) LayerTypeType)) (= (type |mapa#0@@42|) (MapType BoxType BoxType))) (= (type |mapb#0@@42|) (MapType BoxType BoxType))) (= (type |mapc#0@@0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 $ly@@358 |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|) (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 $LZ |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|))) :qid |unknown.0:0| :skolemid |9599| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 (AsFuelBottom $ly@@358) |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@1 T@U) (Maps._default.MapDisjointUnion3$T@@1 T@U) ($ly@@359 T@U) (|mapa#0@@43| T@U) (|mapb#0@@43| T@U) (|mapc#0@@1| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@1) TyType) (= (type Maps._default.MapDisjointUnion3$T@@1) TyType)) (= (type $ly@@359) LayerTypeType)) (= (type |mapa#0@@43|) (MapType BoxType BoxType))) (= (type |mapb#0@@43|) (MapType BoxType BoxType))) (= (type |mapc#0@@1|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (and (and (and ($Is |mapa#0@@43| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1)) ($Is |mapb#0@@43| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1))) ($Is |mapc#0@@1| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1))) (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Map#Domain| |mapc#0@@1|)))))) (and (and (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@359 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) (|Set#Union| (|Set#Union| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Map#Domain| |mapc#0@@1|))) (=> (or (or (not (|Set#Equal| (|Map#Domain| |mapa#0@@43|) (|Set#Empty| BoxType))) (not (|Set#Equal| (|Map#Domain| |mapb#0@@43|) (|Set#Empty| BoxType)))) (not (|Set#Equal| (|Map#Domain| |mapc#0@@1|) (|Set#Empty| BoxType)))) (not (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@359 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) (|Set#Empty| BoxType))))) (forall ((|k#12@@5| T@U) ) (!  (=> (and (and (= (type |k#12@@5|) BoxType) ($IsBox |k#12@@5| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@43|) |k#12@@5|))) (= (MapType0Select (|Map#Elements| |mapa#0@@43|) |k#12@@5|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@359 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#12@@5|))) :qid |Mapssdfy.185:18| :skolemid |9600| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@359 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#12@@5|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@43|) |k#12@@5|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@43|) |k#12@@5|)) ))) (forall ((|k#13@@5| T@U) ) (!  (=> (and (and (= (type |k#13@@5|) BoxType) ($IsBox |k#13@@5| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@43|) |k#13@@5|))) (= (MapType0Select (|Map#Elements| |mapb#0@@43|) |k#13@@5|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@359 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#13@@5|))) :qid |Mapssdfy.186:18| :skolemid |9601| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@359 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#13@@5|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@43|) |k#13@@5|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@43|) |k#13@@5|)) ))) (forall ((|k#14@@5| T@U) ) (!  (=> (and (and (= (type |k#14@@5|) BoxType) ($IsBox |k#14@@5| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapc#0@@1|) |k#14@@5|))) (= (MapType0Select (|Map#Elements| |mapc#0@@1|) |k#14@@5|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@359 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#14@@5|))) :qid |Mapssdfy.187:18| :skolemid |9602| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@359 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#14@@5|)) :pattern ( (MapType0Select (|Map#Elements| |mapc#0@@1|) |k#14@@5|)) :pattern ( (MapType0Select (|Map#Domain| |mapc#0@@1|) |k#14@@5|)) ))) (and (|Map#Equal| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@359 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapb#0@@43| |mapc#0@@1|))) (|Map#Equal| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapb#0@@43| |mapc#0@@1|)) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| |mapb#0@@43|) |mapc#0@@1|)))) ($Is (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@359 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1)))) :qid |unknown.0:0| :skolemid |9603| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@359 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) ))))
(assert (forall ((Maps._default.MapDisjointUnion3$U@@2 T@U) (Maps._default.MapDisjointUnion3$T@@2 T@U) ($ly@@360 T@U) (|mapa#0@@44| T@U) (|mapb#0@@44| T@U) (|mapc#0@@2| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@2) TyType) (= (type Maps._default.MapDisjointUnion3$T@@2) TyType)) (= (type $ly@@360) LayerTypeType)) (= (type |mapa#0@@44|) (MapType BoxType BoxType))) (= (type |mapb#0@@44|) (MapType BoxType BoxType))) (= (type |mapc#0@@2|) (MapType BoxType BoxType))) (and (and ($Is |mapa#0@@44| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2)) ($Is |mapb#0@@44| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2))) ($Is |mapc#0@@2| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2)))) (and (=> (|Maps.__default.MapDisjointUnion3#requires| Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2 $ly@@360 |mapa#0@@44| |mapb#0@@44| |mapc#0@@2|) (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Map#Domain| |mapc#0@@2|)))) (=> (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Map#Domain| |mapc#0@@2|))) (|Maps.__default.MapDisjointUnion3#requires| Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2 $ly@@360 |mapa#0@@44| |mapb#0@@44| |mapc#0@@2|)))) :qid |unknown.0:0| :skolemid |9604| :pattern ( (|Maps.__default.MapDisjointUnion3#requires| Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2 $ly@@360 |mapa#0@@44| |mapb#0@@44| |mapc#0@@2|)) )))
(assert  (and (forall ((arg0@@292 T@U) (arg1@@172 T@U) (arg2@@111 T@U) (arg3@@78 T@U) ) (! (= (type (|lambda#121| arg0@@292 arg1@@172 arg2@@111 arg3@@78)) (MapType0Type BoxType boolType)) :qid |funType:lambda#121| :pattern ( (|lambda#121| arg0@@292 arg1@@172 arg2@@111 arg3@@78)) )) (forall ((arg0@@293 T@U) (arg1@@173 T@U) (arg2@@112 T@U) (arg3@@79 T@U) (arg4@@57 T@U) ) (! (= (type (|lambda#122| arg0@@293 arg1@@173 arg2@@112 arg3@@79 arg4@@57)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#122| :pattern ( (|lambda#122| arg0@@293 arg1@@173 arg2@@112 arg3@@79 arg4@@57)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@3 T@U) (Maps._default.MapDisjointUnion3$T@@3 T@U) ($ly@@361 T@U) (|mapa#0@@45| T@U) (|mapb#0@@45| T@U) (|mapc#0@@3| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@3) TyType) (= (type Maps._default.MapDisjointUnion3$T@@3) TyType)) (= (type $ly@@361) LayerTypeType)) (= (type |mapa#0@@45|) (MapType BoxType BoxType))) (= (type |mapb#0@@45|) (MapType BoxType BoxType))) (= (type |mapc#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|) (and (and (and ($Is |mapa#0@@45| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3)) ($Is |mapb#0@@45| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3))) ($Is |mapc#0@@3| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3))) (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|)) (|Map#Domain| |mapc#0@@3|)))))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 ($LS $ly@@361) |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|) (|Map#Glue| (|lambda#121| Maps._default.MapDisjointUnion3$U@@3 (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|) (|Map#Domain| |mapc#0@@3|)) (|lambda#122| (|Map#Domain| |mapa#0@@45|) (|Map#Elements| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|) (|Map#Elements| |mapb#0@@45|) (|Map#Elements| |mapc#0@@3|)) (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3)))) :qid |unknown.0:0| :skolemid |9605| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 ($LS $ly@@361) |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@4 T@U) (Maps._default.MapDisjointUnion3$T@@4 T@U) ($ly@@362 T@U) (|mapa#0@@46| T@U) (|mapb#0@@46| T@U) (|mapc#0@@4| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@4) TyType) (= (type Maps._default.MapDisjointUnion3$T@@4) TyType)) (= (type $ly@@362) LayerTypeType)) (= (type |mapa#0@@46|) (MapType BoxType BoxType))) (= (type |mapb#0@@46|) (MapType BoxType BoxType))) (= (type |mapc#0@@4|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|)) (and (and (and ($Is |mapa#0@@46| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4)) ($Is |mapb#0@@46| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4))) ($Is |mapc#0@@4| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4))) (and (and (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|))) (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|)))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|))) (|Map#Domain| (Lit |mapc#0@@4|))))))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 ($LS $ly@@362) (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|)) (|Map#Glue| (|lambda#121| Maps._default.MapDisjointUnion3$U@@4 (Lit (|Map#Domain| (Lit |mapa#0@@46|))) (Lit (|Map#Domain| (Lit |mapb#0@@46|))) (Lit (|Map#Domain| (Lit |mapc#0@@4|)))) (|lambda#122| (|Map#Domain| |mapa#0@@46|) (|Map#Elements| (Lit |mapa#0@@46|)) (|Map#Domain| |mapb#0@@46|) (|Map#Elements| (Lit |mapb#0@@46|)) (|Map#Elements| (Lit |mapc#0@@4|))) (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |9606| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 ($LS $ly@@362) (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|))) ))))
(assert (forall ((arg0@@294 T@U) (arg1@@174 T@U) (arg2@@113 T@U) ) (! (= (type (Maps.__default.MapToImap arg0@@294 arg1@@174 arg2@@113)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.MapToImap| :pattern ( (Maps.__default.MapToImap arg0@@294 arg1@@174 arg2@@113)) )))
(assert  (=> true (forall ((Maps._default.MapToImap$K T@U) (Maps._default.MapToImap$V T@U) (|m#0@@86| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K) TyType) (= (type Maps._default.MapToImap$V) TyType)) (= (type |m#0@@86|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@86|) ($Is |m#0@@86| (TMap Maps._default.MapToImap$K Maps._default.MapToImap$V)))) ($Is (Maps.__default.MapToImap Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@86|) (TIMap Maps._default.MapToImap$K Maps._default.MapToImap$V))) :qid |unknown.0:0| :skolemid |9607| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@86|)) ))))
(assert (forall ((Maps._default.MapToImap$K@@0 T@U) (Maps._default.MapToImap$V@@0 T@U) (|m#0@@87| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@0) TyType) (= (type Maps._default.MapToImap$V@@0) TyType)) (= (type |m#0@@87|) (MapType BoxType BoxType))) ($Is |m#0@@87| (TMap Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0))) (and (=> (|Maps.__default.MapToImap#requires| Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0 |m#0@@87|) true) (=> true (|Maps.__default.MapToImap#requires| Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0 |m#0@@87|)))) :qid |unknown.0:0| :skolemid |9608| :pattern ( (|Maps.__default.MapToImap#requires| Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0 |m#0@@87|)) )))
(assert (forall ((arg0@@295 T@U) (arg1@@175 T@U) ) (! (= (type (|lambda#125| arg0@@295 arg1@@175)) (MapType0Type BoxType boolType)) :qid |funType:lambda#125| :pattern ( (|lambda#125| arg0@@295 arg1@@175)) )))
(assert  (=> true (forall ((Maps._default.MapToImap$K@@1 T@U) (Maps._default.MapToImap$V@@1 T@U) (|m#0@@88| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@1) TyType) (= (type Maps._default.MapToImap$V@@1) TyType)) (= (type |m#0@@88|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@88|) ($Is |m#0@@88| (TMap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1)))) (= (Maps.__default.MapToImap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@88|) (|IMap#Glue| (|lambda#125| Maps._default.MapToImap$K@@1 (|Map#Domain| |m#0@@88|)) (|lambda#70| (|Map#Elements| |m#0@@88|)) (TIMap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1)))) :qid |unknown.0:0| :skolemid |9609| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@88|)) ))))
(assert  (=> true (forall ((Maps._default.MapToImap$K@@2 T@U) (Maps._default.MapToImap$V@@2 T@U) (|m#0@@89| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@2) TyType) (= (type Maps._default.MapToImap$V@@2) TyType)) (= (type |m#0@@89|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@89|)) ($Is |m#0@@89| (TMap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2)))) (= (Maps.__default.MapToImap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@89|)) (|IMap#Glue| (|lambda#125| Maps._default.MapToImap$K@@2 (|Map#Domain| |m#0@@89|)) (|lambda#70| (|Map#Elements| (Lit |m#0@@89|))) (TIMap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |9610| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@89|))) ))))
(assert (forall ((arg0@@296 T@U) (arg1@@176 T@U) (arg2@@114 T@U) (arg3@@80 T@U) ) (! (= (type (Maps.__default.MapLookupOption arg0@@296 arg1@@176 arg2@@114 arg3@@80)) DatatypeTypeType) :qid |funType:Maps.__default.MapLookupOption| :pattern ( (Maps.__default.MapLookupOption arg0@@296 arg1@@176 arg2@@114 arg3@@80)) )))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K T@U) (Maps._default.MapLookupOption$V T@U) (|m#0@@90| T@U) (|key#0@@40| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K) TyType) (= (type Maps._default.MapLookupOption$V) TyType)) (= (type |m#0@@90|) (MapType BoxType BoxType))) (= (type |key#0@@40|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@90| |key#0@@40|) (and ($Is |m#0@@90| (TMap Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V)) ($IsBox |key#0@@40| Maps._default.MapLookupOption$K)))) ($Is (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@90| |key#0@@40|) (Tclass.Options.Option Maps._default.MapLookupOption$V))) :qid |unknown.0:0| :skolemid |9611| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@90| |key#0@@40|)) ))))
(assert (forall ((Maps._default.MapLookupOption$K@@0 T@U) (Maps._default.MapLookupOption$V@@0 T@U) (|m#0@@91| T@U) (|key#0@@41| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@0) TyType) (= (type Maps._default.MapLookupOption$V@@0) TyType)) (= (type |m#0@@91|) (MapType BoxType BoxType))) (= (type |key#0@@41|) BoxType)) (and ($Is |m#0@@91| (TMap Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0)) ($IsBox |key#0@@41| Maps._default.MapLookupOption$K@@0))) (and (=> (|Maps.__default.MapLookupOption#requires| Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0 |m#0@@91| |key#0@@41|) true) (=> true (|Maps.__default.MapLookupOption#requires| Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0 |m#0@@91| |key#0@@41|)))) :qid |unknown.0:0| :skolemid |9612| :pattern ( (|Maps.__default.MapLookupOption#requires| Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0 |m#0@@91| |key#0@@41|)) )))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@1 T@U) (Maps._default.MapLookupOption$V@@1 T@U) (|m#0@@92| T@U) (|key#0@@42| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@1) TyType) (= (type Maps._default.MapLookupOption$V@@1) TyType)) (= (type |m#0@@92|) (MapType BoxType BoxType))) (= (type |key#0@@42|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@92| |key#0@@42|) (and ($Is |m#0@@92| (TMap Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1)) ($IsBox |key#0@@42| Maps._default.MapLookupOption$K@@1)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@92| |key#0@@42|) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@92|) |key#0@@42|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| |m#0@@92|) |key#0@@42|)) |#Options.Option.None|))) :qid |unknown.0:0| :skolemid |9613| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@92| |key#0@@42|)) ))))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@2 T@U) (Maps._default.MapLookupOption$V@@2 T@U) (|m#0@@93| T@U) (|key#0@@43| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@2) TyType) (= (type Maps._default.MapLookupOption$V@@2) TyType)) (= (type |m#0@@93|) (MapType BoxType BoxType))) (= (type |key#0@@43|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@93|) |key#0@@43|) (and ($Is |m#0@@93| (TMap Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2)) ($IsBox |key#0@@43| Maps._default.MapLookupOption$K@@2)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@93|) |key#0@@43|) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@93|) |key#0@@43|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (Lit |m#0@@93|)) |key#0@@43|)) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |9614| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@93|) |key#0@@43|)) ))))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@3 T@U) (Maps._default.MapLookupOption$V@@3 T@U) (|m#0@@94| T@U) (|key#0@@44| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@3) TyType) (= (type Maps._default.MapLookupOption$V@@3) TyType)) (= (type |m#0@@94|) (MapType BoxType BoxType))) (= (type |key#0@@44|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@94|) (Lit |key#0@@44|)) (and ($Is |m#0@@94| (TMap Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3)) ($IsBox |key#0@@44| Maps._default.MapLookupOption$K@@3)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@94|) (Lit |key#0@@44|)) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@94|) |key#0@@44|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (Lit |m#0@@94|)) (Lit |key#0@@44|))) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |9615| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@94|) (Lit |key#0@@44|))) ))))
(assert (forall ((arg0@@297 T@U) (arg1@@177 T@U) (arg2@@115 T@U) (arg3@@81 T@U) ) (! (= (type (Maps.__default.ImapLookupOption arg0@@297 arg1@@177 arg2@@115 arg3@@81)) DatatypeTypeType) :qid |funType:Maps.__default.ImapLookupOption| :pattern ( (Maps.__default.ImapLookupOption arg0@@297 arg1@@177 arg2@@115 arg3@@81)) )))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K T@U) (Maps._default.ImapLookupOption$V T@U) (|m#0@@95| T@U) (|key#0@@45| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K) TyType) (= (type Maps._default.ImapLookupOption$V) TyType)) (= (type |m#0@@95|) (IMapType BoxType BoxType))) (= (type |key#0@@45|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@95| |key#0@@45|) (and ($Is |m#0@@95| (TIMap Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V)) ($IsBox |key#0@@45| Maps._default.ImapLookupOption$K)))) ($Is (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@95| |key#0@@45|) (Tclass.Options.Option Maps._default.ImapLookupOption$V))) :qid |unknown.0:0| :skolemid |9616| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@95| |key#0@@45|)) ))))
(assert (forall ((Maps._default.ImapLookupOption$K@@0 T@U) (Maps._default.ImapLookupOption$V@@0 T@U) (|m#0@@96| T@U) (|key#0@@46| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@0) TyType) (= (type Maps._default.ImapLookupOption$V@@0) TyType)) (= (type |m#0@@96|) (IMapType BoxType BoxType))) (= (type |key#0@@46|) BoxType)) (and ($Is |m#0@@96| (TIMap Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0)) ($IsBox |key#0@@46| Maps._default.ImapLookupOption$K@@0))) (and (=> (|Maps.__default.ImapLookupOption#requires| Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0 |m#0@@96| |key#0@@46|) true) (=> true (|Maps.__default.ImapLookupOption#requires| Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0 |m#0@@96| |key#0@@46|)))) :qid |unknown.0:0| :skolemid |9617| :pattern ( (|Maps.__default.ImapLookupOption#requires| Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0 |m#0@@96| |key#0@@46|)) )))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K@@1 T@U) (Maps._default.ImapLookupOption$V@@1 T@U) (|m#0@@97| T@U) (|key#0@@47| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@1) TyType) (= (type Maps._default.ImapLookupOption$V@@1) TyType)) (= (type |m#0@@97|) (IMapType BoxType BoxType))) (= (type |key#0@@47|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@97| |key#0@@47|) (and ($Is |m#0@@97| (TIMap Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1)) ($IsBox |key#0@@47| Maps._default.ImapLookupOption$K@@1)))) (= (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@97| |key#0@@47|) (ite (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@97|) |key#0@@47|)) (|#Options.Option.Some| (MapType0Select (|IMap#Elements| |m#0@@97|) |key#0@@47|)) |#Options.Option.None|))) :qid |unknown.0:0| :skolemid |9618| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@97| |key#0@@47|)) ))))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K@@2 T@U) (Maps._default.ImapLookupOption$V@@2 T@U) (|m#0@@98| T@U) (|key#0@@48| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@2) TyType) (= (type Maps._default.ImapLookupOption$V@@2) TyType)) (= (type |m#0@@98|) (IMapType BoxType BoxType))) (= (type |key#0@@48|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@98|) (Lit |key#0@@48|)) (and ($Is |m#0@@98| (TIMap Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2)) ($IsBox |key#0@@48| Maps._default.ImapLookupOption$K@@2)))) (= (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@98|) (Lit |key#0@@48|)) (ite (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@98|) |key#0@@48|)) (|#Options.Option.Some| (MapType0Select (|IMap#Elements| (Lit |m#0@@98|)) (Lit |key#0@@48|))) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |9619| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@98|) (Lit |key#0@@48|))) ))))
(assert (= (type Tclass.SeqComparison.__default) TyType))
(assert (= (Tag Tclass.SeqComparison.__default) Tagclass.SeqComparison.__default))
(assert (forall ((bx@@95 T@U) ) (!  (=> (and (= (type bx@@95) BoxType) ($IsBox bx@@95 Tclass.SeqComparison.__default)) (and (= ($Box ($Unbox refType bx@@95)) bx@@95) ($Is ($Unbox refType bx@@95) Tclass.SeqComparison.__default))) :qid |unknown.0:0| :skolemid |9620| :pattern ( ($IsBox bx@@95 Tclass.SeqComparison.__default)) )))
(assert (forall (($o@@24 T@U) ) (!  (=> (= (type $o@@24) refType) (and (=> ($Is $o@@24 Tclass.SeqComparison.__default) (or (= $o@@24 null) (= (dtype $o@@24) Tclass.SeqComparison.__default))) (=> (or (= $o@@24 null) (= (dtype $o@@24) Tclass.SeqComparison.__default)) ($Is $o@@24 Tclass.SeqComparison.__default)))) :qid |unknown.0:0| :skolemid |9621| :pattern ( ($Is $o@@24 Tclass.SeqComparison.__default)) )))
(assert (forall (($o@@25 T@U) ($h@@42 T@U) ) (!  (=> (and (= (type $o@@25) refType) (= (type $h@@42) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@25 Tclass.SeqComparison.__default $h@@42) (or (= $o@@25 null) (U_2_bool (MapType1Select (MapType0Select $h@@42 $o@@25) alloc)))) (=> (or (= $o@@25 null) (U_2_bool (MapType1Select (MapType0Select $h@@42 $o@@25) alloc))) ($IsAlloc $o@@25 Tclass.SeqComparison.__default $h@@42)))) :qid |unknown.0:0| :skolemid |9622| :pattern ( ($IsAlloc $o@@25 Tclass.SeqComparison.__default $h@@42)) )))
(assert (forall (($ly@@363 T@U) (|a#0@@101| T@U) (|b#0@@72| T@U) ) (!  (=> (and (and (= (type $ly@@363) LayerTypeType) (= (type |a#0@@101|) (SeqType BoxType))) (= (type |b#0@@72|) (SeqType BoxType))) (and (=> (SeqComparison.__default.lte ($LS $ly@@363) |a#0@@101| |b#0@@72|) (SeqComparison.__default.lte $ly@@363 |a#0@@101| |b#0@@72|)) (=> (SeqComparison.__default.lte $ly@@363 |a#0@@101| |b#0@@72|) (SeqComparison.__default.lte ($LS $ly@@363) |a#0@@101| |b#0@@72|)))) :qid |SeqCompa.9:23| :skolemid |9623| :pattern ( (SeqComparison.__default.lte ($LS $ly@@363) |a#0@@101| |b#0@@72|)) )))
(assert (forall (($ly@@364 T@U) (|a#0@@102| T@U) (|b#0@@73| T@U) ) (!  (=> (and (and (= (type $ly@@364) LayerTypeType) (= (type |a#0@@102|) (SeqType BoxType))) (= (type |b#0@@73|) (SeqType BoxType))) (and (=> (SeqComparison.__default.lte $ly@@364 |a#0@@102| |b#0@@73|) (SeqComparison.__default.lte $LZ |a#0@@102| |b#0@@73|)) (=> (SeqComparison.__default.lte $LZ |a#0@@102| |b#0@@73|) (SeqComparison.__default.lte $ly@@364 |a#0@@102| |b#0@@73|)))) :qid |SeqCompa.9:23| :skolemid |9624| :pattern ( (SeqComparison.__default.lte (AsFuelBottom $ly@@364) |a#0@@102| |b#0@@73|)) )))
(assert  (=> true (forall (($ly@@365 T@U) (|a#0@@103| T@U) (|b#0@@74| T@U) ) (!  (=> (and (and (and (= (type $ly@@365) LayerTypeType) (= (type |a#0@@103|) (SeqType BoxType))) (= (type |b#0@@74|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| |a#0@@103| |b#0@@74|) (and ($Is |a#0@@103| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@74| (TSeq Tclass.NativeTypes.byte))))) true) :qid |SeqCompa.9:23| :skolemid |9625| :pattern ( (SeqComparison.__default.lte $ly@@365 |a#0@@103| |b#0@@74|)) ))))
(assert (forall (($ly@@366 T@U) (|a#0@@104| T@U) (|b#0@@75| T@U) ) (!  (=> (and (and (and (= (type $ly@@366) LayerTypeType) (= (type |a#0@@104|) (SeqType BoxType))) (= (type |b#0@@75|) (SeqType BoxType))) (and ($Is |a#0@@104| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@75| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|SeqComparison.__default.lte#requires| $ly@@366 |a#0@@104| |b#0@@75|) true) (=> true (|SeqComparison.__default.lte#requires| $ly@@366 |a#0@@104| |b#0@@75|)))) :qid |SeqCompa.9:23| :skolemid |9626| :pattern ( (|SeqComparison.__default.lte#requires| $ly@@366 |a#0@@104| |b#0@@75|)) )))
(assert  (=> true (forall (($ly@@367 T@U) (|a#0@@105| T@U) (|b#0@@76| T@U) ) (!  (=> (and (and (and (= (type $ly@@367) LayerTypeType) (= (type |a#0@@105|) (SeqType BoxType))) (= (type |b#0@@76|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| |a#0@@105| |b#0@@76|) (and ($Is |a#0@@105| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@76| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| |a#0@@105|) (LitInt 0))) (=> (not (= (|Seq#Length| |b#0@@76|) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |b#0@@76| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@105| (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |a#0@@105| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@76| (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (|Seq#Drop| |a#0@@105| (LitInt 1)) (|Seq#Drop| |b#0@@76| (LitInt 1))))))) (and (=> (SeqComparison.__default.lte ($LS $ly@@367) |a#0@@105| |b#0@@76|) (ite (= (|Seq#Length| |a#0@@105|) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@76|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| |a#0@@105| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@76| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@76| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@105| (LitInt 0))))) false (SeqComparison.__default.lte $ly@@367 (|Seq#Drop| |a#0@@105| (LitInt 1)) (|Seq#Drop| |b#0@@76| (LitInt 1)))))))) (=> (ite (= (|Seq#Length| |a#0@@105|) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@76|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| |a#0@@105| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@76| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@76| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@105| (LitInt 0))))) false (SeqComparison.__default.lte $ly@@367 (|Seq#Drop| |a#0@@105| (LitInt 1)) (|Seq#Drop| |b#0@@76| (LitInt 1))))))) (SeqComparison.__default.lte ($LS $ly@@367) |a#0@@105| |b#0@@76|))))) :qid |SeqCompa.9:23| :skolemid |9627| :pattern ( (SeqComparison.__default.lte ($LS $ly@@367) |a#0@@105| |b#0@@76|)) ))))
(assert  (=> true (forall (($ly@@368 T@U) (|a#0@@106| T@U) (|b#0@@77| T@U) ) (!  (=> (and (and (and (= (type $ly@@368) LayerTypeType) (= (type |a#0@@106|) (SeqType BoxType))) (= (type |b#0@@77|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| (Lit |a#0@@106|) |b#0@@77|) (and ($Is |a#0@@106| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@77| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@106|)) (LitInt 0))) (=> (not (= (|Seq#Length| |b#0@@77|) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |b#0@@77| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@106|) (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@106|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@77| (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (Lit (|Seq#Drop| (Lit |a#0@@106|) (LitInt 1))) (|Seq#Drop| |b#0@@77| (LitInt 1))))))) (and (=> (SeqComparison.__default.lte ($LS $ly@@368) (Lit |a#0@@106|) |b#0@@77|) (ite (= (|Seq#Length| (Lit |a#0@@106|)) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@77|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@106|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@77| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@77| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@106|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@368) (Lit (|Seq#Drop| (Lit |a#0@@106|) (LitInt 1))) (|Seq#Drop| |b#0@@77| (LitInt 1)))))))) (=> (ite (= (|Seq#Length| (Lit |a#0@@106|)) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@77|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@106|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@77| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@77| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@106|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@368) (Lit (|Seq#Drop| (Lit |a#0@@106|) (LitInt 1))) (|Seq#Drop| |b#0@@77| (LitInt 1))))))) (SeqComparison.__default.lte ($LS $ly@@368) (Lit |a#0@@106|) |b#0@@77|))))) :qid |SeqCompa.9:23| :weight 3 :skolemid |9628| :pattern ( (SeqComparison.__default.lte ($LS $ly@@368) (Lit |a#0@@106|) |b#0@@77|)) ))))
(assert  (=> true (forall (($ly@@369 T@U) (|a#0@@107| T@U) (|b#0@@78| T@U) ) (!  (=> (and (and (and (= (type $ly@@369) LayerTypeType) (= (type |a#0@@107|) (SeqType BoxType))) (= (type |b#0@@78|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| (Lit |a#0@@107|) (Lit |b#0@@78|)) (and ($Is |a#0@@107| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@78| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@107|)) (LitInt 0))) (=> (not (= (|Seq#Length| (Lit |b#0@@78|)) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@78|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@107|) (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@107|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@78|) (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (Lit (|Seq#Drop| (Lit |a#0@@107|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@78|) (LitInt 1)))))))) (and (=> (SeqComparison.__default.lte ($LS $ly@@369) (Lit |a#0@@107|) (Lit |b#0@@78|)) (ite (= (|Seq#Length| (Lit |a#0@@107|)) (LitInt 0)) true (ite (= (|Seq#Length| (Lit |b#0@@78|)) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@107|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@78|) (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@78|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@107|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@369) (Lit (|Seq#Drop| (Lit |a#0@@107|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@78|) (LitInt 1))))))))) (=> (ite (= (|Seq#Length| (Lit |a#0@@107|)) (LitInt 0)) true (ite (= (|Seq#Length| (Lit |b#0@@78|)) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@107|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@78|) (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@78|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@107|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@369) (Lit (|Seq#Drop| (Lit |a#0@@107|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@78|) (LitInt 1)))))))) (SeqComparison.__default.lte ($LS $ly@@369) (Lit |a#0@@107|) (Lit |b#0@@78|)))))) :qid |SeqCompa.9:23| :weight 3 :skolemid |9629| :pattern ( (SeqComparison.__default.lte ($LS $ly@@369) (Lit |a#0@@107|) (Lit |b#0@@78|))) ))))
(assert  (=> true (forall ((|a#0@@108| T@U) (|b#0@@79| T@U) ) (!  (=> (and (and (= (type |a#0@@108|) (SeqType BoxType)) (= (type |b#0@@79|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| |a#0@@108| |b#0@@79|) (and ($Is |a#0@@108| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@79| (TSeq Tclass.NativeTypes.byte))))) true) :qid |SeqCompa.25:16| :skolemid |9630| :pattern ( (SeqComparison.__default.lt |a#0@@108| |b#0@@79|)) ))))
(assert (forall ((|a#0@@109| T@U) (|b#0@@80| T@U) ) (!  (=> (and (and (= (type |a#0@@109|) (SeqType BoxType)) (= (type |b#0@@80|) (SeqType BoxType))) (and ($Is |a#0@@109| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@80| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|SeqComparison.__default.lt#requires| |a#0@@109| |b#0@@80|) true) (=> true (|SeqComparison.__default.lt#requires| |a#0@@109| |b#0@@80|)))) :qid |SeqCompa.25:16| :skolemid |9631| :pattern ( (|SeqComparison.__default.lt#requires| |a#0@@109| |b#0@@80|)) )))
(assert (= (type StartFuel_SeqComparison._default.lte) LayerTypeType))
(assert  (=> true (forall ((|a#0@@110| T@U) (|b#0@@81| T@U) ) (!  (=> (and (and (= (type |a#0@@110|) (SeqType BoxType)) (= (type |b#0@@81|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| |a#0@@110| |b#0@@81|) (and ($Is |a#0@@110| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@81| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| |a#0@@110| |b#0@@81|) (and (=> (SeqComparison.__default.lt |a#0@@110| |b#0@@81|) (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@110| |b#0@@81|) (not (|Seq#Equal| |a#0@@110| |b#0@@81|)))) (=> (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@110| |b#0@@81|) (not (|Seq#Equal| |a#0@@110| |b#0@@81|))) (SeqComparison.__default.lt |a#0@@110| |b#0@@81|))))) :qid |SeqCompa.25:16| :skolemid |9632| :pattern ( (SeqComparison.__default.lt |a#0@@110| |b#0@@81|)) ))))
(assert  (=> true (forall ((|a#0@@111| T@U) (|b#0@@82| T@U) ) (!  (=> (and (and (= (type |a#0@@111|) (SeqType BoxType)) (= (type |b#0@@82|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| (Lit |a#0@@111|) (Lit |b#0@@82|)) (and ($Is |a#0@@111| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@82| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| (Lit |a#0@@111|) (Lit |b#0@@82|)) (and (=> (SeqComparison.__default.lt (Lit |a#0@@111|) (Lit |b#0@@82|)) (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@111|) (Lit |b#0@@82|)) (not (|Seq#Equal| |a#0@@111| |b#0@@82|)))) (=> (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@111|) (Lit |b#0@@82|)) (not (|Seq#Equal| |a#0@@111| |b#0@@82|))) (SeqComparison.__default.lt (Lit |a#0@@111|) (Lit |b#0@@82|)))))) :qid |SeqCompa.25:16| :weight 3 :skolemid |9633| :pattern ( (SeqComparison.__default.lt (Lit |a#0@@111|) (Lit |b#0@@82|))) ))))
(assert (= (type Tclass.NativeArrays.__default) TyType))
(assert (= (Tag Tclass.NativeArrays.__default) Tagclass.NativeArrays.__default))
(assert (forall ((bx@@96 T@U) ) (!  (=> (and (= (type bx@@96) BoxType) ($IsBox bx@@96 Tclass.NativeArrays.__default)) (and (= ($Box ($Unbox refType bx@@96)) bx@@96) ($Is ($Unbox refType bx@@96) Tclass.NativeArrays.__default))) :qid |unknown.0:0| :skolemid |9634| :pattern ( ($IsBox bx@@96 Tclass.NativeArrays.__default)) )))
(assert (forall (($o@@26 T@U) ) (!  (=> (= (type $o@@26) refType) (and (=> ($Is $o@@26 Tclass.NativeArrays.__default) (or (= $o@@26 null) (= (dtype $o@@26) Tclass.NativeArrays.__default))) (=> (or (= $o@@26 null) (= (dtype $o@@26) Tclass.NativeArrays.__default)) ($Is $o@@26 Tclass.NativeArrays.__default)))) :qid |unknown.0:0| :skolemid |9635| :pattern ( ($Is $o@@26 Tclass.NativeArrays.__default)) )))
(assert (forall (($o@@27 T@U) ($h@@43 T@U) ) (!  (=> (and (= (type $o@@27) refType) (= (type $h@@43) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@27 Tclass.NativeArrays.__default $h@@43) (or (= $o@@27 null) (U_2_bool (MapType1Select (MapType0Select $h@@43 $o@@27) alloc)))) (=> (or (= $o@@27 null) (U_2_bool (MapType1Select (MapType0Select $h@@43 $o@@27) alloc))) ($IsAlloc $o@@27 Tclass.NativeArrays.__default $h@@43)))) :qid |unknown.0:0| :skolemid |9636| :pattern ( ($IsAlloc $o@@27 Tclass.NativeArrays.__default $h@@43)) )))
(assert  (and (and (and (and (and (and (and (forall ((arg0@@298 T@T) (arg1@@178 T@T) ) (! (= (Ctor (MapType6Type arg0@@298 arg1@@178)) 25) :qid |ctor:MapType6Type| )) (forall ((arg0@@299 T@T) (arg1@@179 T@T) ) (! (= (MapType6TypeInv0 (MapType6Type arg0@@299 arg1@@179)) arg0@@299) :qid |typeInv:MapType6TypeInv0| :pattern ( (MapType6Type arg0@@299 arg1@@179)) ))) (forall ((arg0@@300 T@T) (arg1@@180 T@T) ) (! (= (MapType6TypeInv1 (MapType6Type arg0@@300 arg1@@180)) arg1@@180) :qid |typeInv:MapType6TypeInv1| :pattern ( (MapType6Type arg0@@300 arg1@@180)) ))) (forall ((arg0@@301 T@U) (arg1@@181 T@U) (arg2@@116 T@U) ) (! (let ((aVar1@@6 (MapType6TypeInv1 (type arg0@@301)))) (= (type (MapType6Select arg0@@301 arg1@@181 arg2@@116)) aVar1@@6)) :qid |funType:MapType6Select| :pattern ( (MapType6Select arg0@@301 arg1@@181 arg2@@116)) ))) (forall ((arg0@@302 T@U) (arg1@@182 T@U) (arg2@@117 T@U) (arg3@@82 T@U) ) (! (let ((aVar1@@7 (type arg3@@82))) (let ((aVar0@@4 (type arg1@@182))) (= (type (MapType6Store arg0@@302 arg1@@182 arg2@@117 arg3@@82)) (MapType6Type aVar0@@4 aVar1@@7)))) :qid |funType:MapType6Store| :pattern ( (MapType6Store arg0@@302 arg1@@182 arg2@@117 arg3@@82)) ))) (forall ((m@@50 T@U) (x0@@27 T@U) (x1@@21 T@U) (val@@28 T@U) ) (! (let ((aVar1@@8 (MapType6TypeInv1 (type m@@50)))) (=> (= (type val@@28) aVar1@@8) (= (MapType6Select (MapType6Store m@@50 x0@@27 x1@@21 val@@28) x0@@27 x1@@21) val@@28))) :qid |mapAx0:MapType6Select| :weight 0 ))) (and (and (forall ((val@@29 T@U) (m@@51 T@U) (x0@@28 T@U) (x1@@22 T@U) (y0@@21 T@U) (y1@@17 T@U) ) (!  (or (= x0@@28 y0@@21) (= (MapType6Select (MapType6Store m@@51 x0@@28 x1@@22 val@@29) y0@@21 y1@@17) (MapType6Select m@@51 y0@@21 y1@@17))) :qid |mapAx1:MapType6Select:0| :weight 0 )) (forall ((val@@30 T@U) (m@@52 T@U) (x0@@29 T@U) (x1@@23 T@U) (y0@@22 T@U) (y1@@18 T@U) ) (!  (or (= x1@@23 y1@@18) (= (MapType6Select (MapType6Store m@@52 x0@@29 x1@@23 val@@30) y0@@22 y1@@18) (MapType6Select m@@52 y0@@22 y1@@18))) :qid |mapAx1:MapType6Select:1| :weight 0 ))) (forall ((val@@31 T@U) (m@@53 T@U) (x0@@30 T@U) (x1@@24 T@U) (y0@@23 T@U) (y1@@19 T@U) ) (!  (or true (= (MapType6Select (MapType6Store m@@53 x0@@30 x1@@24 val@@31) y0@@23 y1@@19) (MapType6Select m@@53 y0@@23 y1@@19))) :qid |mapAx2:MapType6Select| :weight 0 )))) (forall ((arg0@@303 T@U) (arg1@@183 T@U) (arg2@@118 T@U) (arg3@@83 Bool) ) (! (= (type (|lambda#0| arg0@@303 arg1@@183 arg2@@118 arg3@@83)) (MapType6Type refType boolType)) :qid |funType:lambda#0| :pattern ( (|lambda#0| arg0@@303 arg1@@183 arg2@@118 arg3@@83)) ))))
(assert (forall (($o@@28 T@U) ($f@@4 T@U) (|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ) (! (let ((alpha@@11 (FieldTypeInv0 (type $f@@4)))) (=> (and (and (and (and (= (type $o@@28) refType) (= (type $f@@4) (FieldType alpha@@11))) (= (type |l#0|) refType)) (= (type |l#1|) (MapType0Type refType MapType1Type))) (= (type |l#2|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@28 $f@@4))  (=> (and (not (= $o@@28 |l#0|)) (U_2_bool (MapType1Select (MapType0Select |l#1| $o@@28) |l#2|))) |l#3|)))) :qid |totalord.897:20| :skolemid |9637| :pattern ( (MapType6Select (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@28 $f@@4)) )))
(assert (forall ((arg0@@304 T@U) (arg1@@184 T@U) (arg2@@119 T@U) (arg3@@84 Bool) ) (! (= (type (|lambda#1| arg0@@304 arg1@@184 arg2@@119 arg3@@84)) (MapType6Type refType boolType)) :qid |funType:lambda#1| :pattern ( (|lambda#1| arg0@@304 arg1@@184 arg2@@119 arg3@@84)) )))
(assert (forall (($o@@29 T@U) ($f@@5 T@U) (|l#0@@0| T@U) (|l#1@@0| T@U) (|l#2@@0| T@U) (|l#3@@0| Bool) ) (! (let ((alpha@@12 (FieldTypeInv0 (type $f@@5)))) (=> (and (and (and (and (= (type $o@@29) refType) (= (type $f@@5) (FieldType alpha@@12))) (= (type |l#0@@0|) refType)) (= (type |l#1@@0|) (MapType0Type refType MapType1Type))) (= (type |l#2@@0|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#1| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@29 $f@@5))  (=> (and (not (= $o@@29 |l#0@@0|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@0| $o@@29) |l#2@@0|))) |l#3@@0|)))) :qid |totalord.897:20| :skolemid |9638| :pattern ( (MapType6Select (|lambda#1| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@29 $f@@5)) )))
(assert (forall ((arg0@@305 T@U) (arg1@@185 T@U) (arg2@@120 T@U) (arg3@@85 Bool) ) (! (= (type (|lambda#2| arg0@@305 arg1@@185 arg2@@120 arg3@@85)) (MapType6Type refType boolType)) :qid |funType:lambda#2| :pattern ( (|lambda#2| arg0@@305 arg1@@185 arg2@@120 arg3@@85)) )))
(assert (forall (($o@@30 T@U) ($f@@6 T@U) (|l#0@@1| T@U) (|l#1@@1| T@U) (|l#2@@1| T@U) (|l#3@@1| Bool) ) (! (let ((alpha@@13 (FieldTypeInv0 (type $f@@6)))) (=> (and (and (and (and (= (type $o@@30) refType) (= (type $f@@6) (FieldType alpha@@13))) (= (type |l#0@@1|) refType)) (= (type |l#1@@1|) (MapType0Type refType MapType1Type))) (= (type |l#2@@1|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#2| |l#0@@1| |l#1@@1| |l#2@@1| |l#3@@1|) $o@@30 $f@@6))  (=> (and (not (= $o@@30 |l#0@@1|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@1| $o@@30) |l#2@@1|))) |l#3@@1|)))) :qid |totalord.192:9| :skolemid |9639| :pattern ( (MapType6Select (|lambda#2| |l#0@@1| |l#1@@1| |l#2@@1| |l#3@@1|) $o@@30 $f@@6)) )))
(assert (forall ((arg0@@306 T@U) (arg1@@186 T@U) (arg2@@121 T@U) (arg3@@86 Bool) ) (! (= (type (|lambda#3| arg0@@306 arg1@@186 arg2@@121 arg3@@86)) (MapType6Type refType boolType)) :qid |funType:lambda#3| :pattern ( (|lambda#3| arg0@@306 arg1@@186 arg2@@121 arg3@@86)) )))
(assert (forall (($o@@31 T@U) ($f@@7 T@U) (|l#0@@2| T@U) (|l#1@@2| T@U) (|l#2@@2| T@U) (|l#3@@2| Bool) ) (! (let ((alpha@@14 (FieldTypeInv0 (type $f@@7)))) (=> (and (and (and (and (= (type $o@@31) refType) (= (type $f@@7) (FieldType alpha@@14))) (= (type |l#0@@2|) refType)) (= (type |l#1@@2|) (MapType0Type refType MapType1Type))) (= (type |l#2@@2|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#3| |l#0@@2| |l#1@@2| |l#2@@2| |l#3@@2|) $o@@31 $f@@7))  (=> (and (not (= $o@@31 |l#0@@2|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@2| $o@@31) |l#2@@2|))) |l#3@@2|)))) :qid |totalord.199:9| :skolemid |9640| :pattern ( (MapType6Select (|lambda#3| |l#0@@2| |l#1@@2| |l#2@@2| |l#3@@2|) $o@@31 $f@@7)) )))
(assert (forall ((arg0@@307 T@U) (arg1@@187 T@U) (arg2@@122 T@U) (arg3@@87 Bool) ) (! (= (type (|lambda#4| arg0@@307 arg1@@187 arg2@@122 arg3@@87)) (MapType6Type refType boolType)) :qid |funType:lambda#4| :pattern ( (|lambda#4| arg0@@307 arg1@@187 arg2@@122 arg3@@87)) )))
(assert (forall (($o@@32 T@U) ($f@@8 T@U) (|l#0@@3| T@U) (|l#1@@3| T@U) (|l#2@@3| T@U) (|l#3@@3| Bool) ) (! (let ((alpha@@15 (FieldTypeInv0 (type $f@@8)))) (=> (and (and (and (and (= (type $o@@32) refType) (= (type $f@@8) (FieldType alpha@@15))) (= (type |l#0@@3|) refType)) (= (type |l#1@@3|) (MapType0Type refType MapType1Type))) (= (type |l#2@@3|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#4| |l#0@@3| |l#1@@3| |l#2@@3| |l#3@@3|) $o@@32 $f@@8))  (=> (and (not (= $o@@32 |l#0@@3|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@3| $o@@32) |l#2@@3|))) |l#3@@3|)))) :qid |totalord.207:9| :skolemid |9641| :pattern ( (MapType6Select (|lambda#4| |l#0@@3| |l#1@@3| |l#2@@3| |l#3@@3|) $o@@32 $f@@8)) )))
(assert (forall ((arg0@@308 T@U) (arg1@@188 T@U) (arg2@@123 T@U) (arg3@@88 Bool) ) (! (= (type (|lambda#5| arg0@@308 arg1@@188 arg2@@123 arg3@@88)) (MapType6Type refType boolType)) :qid |funType:lambda#5| :pattern ( (|lambda#5| arg0@@308 arg1@@188 arg2@@123 arg3@@88)) )))
(assert (forall (($o@@33 T@U) ($f@@9 T@U) (|l#0@@4| T@U) (|l#1@@4| T@U) (|l#2@@4| T@U) (|l#3@@4| Bool) ) (! (let ((alpha@@16 (FieldTypeInv0 (type $f@@9)))) (=> (and (and (and (and (= (type $o@@33) refType) (= (type $f@@9) (FieldType alpha@@16))) (= (type |l#0@@4|) refType)) (= (type |l#1@@4|) (MapType0Type refType MapType1Type))) (= (type |l#2@@4|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#5| |l#0@@4| |l#1@@4| |l#2@@4| |l#3@@4|) $o@@33 $f@@9))  (=> (and (not (= $o@@33 |l#0@@4|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@4| $o@@33) |l#2@@4|))) |l#3@@4|)))) :qid |totalord.217:9| :skolemid |9642| :pattern ( (MapType6Select (|lambda#5| |l#0@@4| |l#1@@4| |l#2@@4| |l#3@@4|) $o@@33 $f@@9)) )))
(assert (forall ((arg0@@309 T@U) (arg1@@189 T@U) (arg2@@124 T@U) (arg3@@89 Bool) ) (! (= (type (|lambda#6| arg0@@309 arg1@@189 arg2@@124 arg3@@89)) (MapType6Type refType boolType)) :qid |funType:lambda#6| :pattern ( (|lambda#6| arg0@@309 arg1@@189 arg2@@124 arg3@@89)) )))
(assert (forall (($o@@34 T@U) ($f@@10 T@U) (|l#0@@5| T@U) (|l#1@@5| T@U) (|l#2@@5| T@U) (|l#3@@5| Bool) ) (! (let ((alpha@@17 (FieldTypeInv0 (type $f@@10)))) (=> (and (and (and (and (= (type $o@@34) refType) (= (type $f@@10) (FieldType alpha@@17))) (= (type |l#0@@5|) refType)) (= (type |l#1@@5|) (MapType0Type refType MapType1Type))) (= (type |l#2@@5|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#6| |l#0@@5| |l#1@@5| |l#2@@5| |l#3@@5|) $o@@34 $f@@10))  (=> (and (not (= $o@@34 |l#0@@5|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@5| $o@@34) |l#2@@5|))) |l#3@@5|)))) :qid |totalord.272:9| :skolemid |9643| :pattern ( (MapType6Select (|lambda#6| |l#0@@5| |l#1@@5| |l#2@@5| |l#3@@5|) $o@@34 $f@@10)) )))
(assert (forall ((arg0@@310 T@U) (arg1@@190 T@U) (arg2@@125 T@U) (arg3@@90 Bool) ) (! (= (type (|lambda#7| arg0@@310 arg1@@190 arg2@@125 arg3@@90)) (MapType6Type refType boolType)) :qid |funType:lambda#7| :pattern ( (|lambda#7| arg0@@310 arg1@@190 arg2@@125 arg3@@90)) )))
(assert (forall (($o@@35 T@U) ($f@@11 T@U) (|l#0@@6| T@U) (|l#1@@6| T@U) (|l#2@@6| T@U) (|l#3@@6| Bool) ) (! (let ((alpha@@18 (FieldTypeInv0 (type $f@@11)))) (=> (and (and (and (and (= (type $o@@35) refType) (= (type $f@@11) (FieldType alpha@@18))) (= (type |l#0@@6|) refType)) (= (type |l#1@@6|) (MapType0Type refType MapType1Type))) (= (type |l#2@@6|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#7| |l#0@@6| |l#1@@6| |l#2@@6| |l#3@@6|) $o@@35 $f@@11))  (=> (and (not (= $o@@35 |l#0@@6|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@6| $o@@35) |l#2@@6|))) |l#3@@6|)))) :qid |totalord.292:9| :skolemid |9644| :pattern ( (MapType6Select (|lambda#7| |l#0@@6| |l#1@@6| |l#2@@6| |l#3@@6|) $o@@35 $f@@11)) )))
(assert (forall ((arg0@@311 T@U) (arg1@@191 T@U) (arg2@@126 T@U) (arg3@@91 Bool) ) (! (= (type (|lambda#8| arg0@@311 arg1@@191 arg2@@126 arg3@@91)) (MapType6Type refType boolType)) :qid |funType:lambda#8| :pattern ( (|lambda#8| arg0@@311 arg1@@191 arg2@@126 arg3@@91)) )))
(assert (forall (($o@@36 T@U) ($f@@12 T@U) (|l#0@@7| T@U) (|l#1@@7| T@U) (|l#2@@7| T@U) (|l#3@@7| Bool) ) (! (let ((alpha@@19 (FieldTypeInv0 (type $f@@12)))) (=> (and (and (and (and (= (type $o@@36) refType) (= (type $f@@12) (FieldType alpha@@19))) (= (type |l#0@@7|) refType)) (= (type |l#1@@7|) (MapType0Type refType MapType1Type))) (= (type |l#2@@7|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#8| |l#0@@7| |l#1@@7| |l#2@@7| |l#3@@7|) $o@@36 $f@@12))  (=> (and (not (= $o@@36 |l#0@@7|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@7| $o@@36) |l#2@@7|))) |l#3@@7|)))) :qid |totalord.312:9| :skolemid |9645| :pattern ( (MapType6Select (|lambda#8| |l#0@@7| |l#1@@7| |l#2@@7| |l#3@@7|) $o@@36 $f@@12)) )))
(assert (forall ((arg0@@312 T@U) (arg1@@192 T@U) (arg2@@127 T@U) (arg3@@92 Bool) ) (! (= (type (|lambda#9| arg0@@312 arg1@@192 arg2@@127 arg3@@92)) (MapType6Type refType boolType)) :qid |funType:lambda#9| :pattern ( (|lambda#9| arg0@@312 arg1@@192 arg2@@127 arg3@@92)) )))
(assert (forall (($o@@37 T@U) ($f@@13 T@U) (|l#0@@8| T@U) (|l#1@@8| T@U) (|l#2@@8| T@U) (|l#3@@8| Bool) ) (! (let ((alpha@@20 (FieldTypeInv0 (type $f@@13)))) (=> (and (and (and (and (= (type $o@@37) refType) (= (type $f@@13) (FieldType alpha@@20))) (= (type |l#0@@8|) refType)) (= (type |l#1@@8|) (MapType0Type refType MapType1Type))) (= (type |l#2@@8|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#9| |l#0@@8| |l#1@@8| |l#2@@8| |l#3@@8|) $o@@37 $f@@13))  (=> (and (not (= $o@@37 |l#0@@8|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@8| $o@@37) |l#2@@8|))) |l#3@@8|)))) :qid |totalord.321:9| :skolemid |9646| :pattern ( (MapType6Select (|lambda#9| |l#0@@8| |l#1@@8| |l#2@@8| |l#3@@8|) $o@@37 $f@@13)) )))
(assert (forall ((arg0@@313 T@U) (arg1@@193 T@U) (arg2@@128 T@U) (arg3@@93 Bool) ) (! (= (type (|lambda#10| arg0@@313 arg1@@193 arg2@@128 arg3@@93)) (MapType6Type refType boolType)) :qid |funType:lambda#10| :pattern ( (|lambda#10| arg0@@313 arg1@@193 arg2@@128 arg3@@93)) )))
(assert (forall (($o@@38 T@U) ($f@@14 T@U) (|l#0@@9| T@U) (|l#1@@9| T@U) (|l#2@@9| T@U) (|l#3@@9| Bool) ) (! (let ((alpha@@21 (FieldTypeInv0 (type $f@@14)))) (=> (and (and (and (and (= (type $o@@38) refType) (= (type $f@@14) (FieldType alpha@@21))) (= (type |l#0@@9|) refType)) (= (type |l#1@@9|) (MapType0Type refType MapType1Type))) (= (type |l#2@@9|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#10| |l#0@@9| |l#1@@9| |l#2@@9| |l#3@@9|) $o@@38 $f@@14))  (=> (and (not (= $o@@38 |l#0@@9|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@9| $o@@38) |l#2@@9|))) |l#3@@9|)))) :qid |totalord.321:9| :skolemid |9647| :pattern ( (MapType6Select (|lambda#10| |l#0@@9| |l#1@@9| |l#2@@9| |l#3@@9|) $o@@38 $f@@14)) )))
(assert (forall ((arg0@@314 T@U) (arg1@@194 T@U) (arg2@@129 T@U) (arg3@@94 Bool) ) (! (= (type (|lambda#11| arg0@@314 arg1@@194 arg2@@129 arg3@@94)) (MapType6Type refType boolType)) :qid |funType:lambda#11| :pattern ( (|lambda#11| arg0@@314 arg1@@194 arg2@@129 arg3@@94)) )))
(assert (forall (($o@@39 T@U) ($f@@15 T@U) (|l#0@@10| T@U) (|l#1@@10| T@U) (|l#2@@10| T@U) (|l#3@@10| Bool) ) (! (let ((alpha@@22 (FieldTypeInv0 (type $f@@15)))) (=> (and (and (and (and (= (type $o@@39) refType) (= (type $f@@15) (FieldType alpha@@22))) (= (type |l#0@@10|) refType)) (= (type |l#1@@10|) (MapType0Type refType MapType1Type))) (= (type |l#2@@10|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#11| |l#0@@10| |l#1@@10| |l#2@@10| |l#3@@10|) $o@@39 $f@@15))  (=> (and (not (= $o@@39 |l#0@@10|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@10| $o@@39) |l#2@@10|))) |l#3@@10|)))) :qid |totalord.328:9| :skolemid |9648| :pattern ( (MapType6Select (|lambda#11| |l#0@@10| |l#1@@10| |l#2@@10| |l#3@@10|) $o@@39 $f@@15)) )))
(assert (forall ((arg0@@315 T@U) (arg1@@195 T@U) (arg2@@130 T@U) (arg3@@95 Bool) ) (! (= (type (|lambda#12| arg0@@315 arg1@@195 arg2@@130 arg3@@95)) (MapType6Type refType boolType)) :qid |funType:lambda#12| :pattern ( (|lambda#12| arg0@@315 arg1@@195 arg2@@130 arg3@@95)) )))
(assert (forall (($o@@40 T@U) ($f@@16 T@U) (|l#0@@11| T@U) (|l#1@@11| T@U) (|l#2@@11| T@U) (|l#3@@11| Bool) ) (! (let ((alpha@@23 (FieldTypeInv0 (type $f@@16)))) (=> (and (and (and (and (= (type $o@@40) refType) (= (type $f@@16) (FieldType alpha@@23))) (= (type |l#0@@11|) refType)) (= (type |l#1@@11|) (MapType0Type refType MapType1Type))) (= (type |l#2@@11|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#12| |l#0@@11| |l#1@@11| |l#2@@11| |l#3@@11|) $o@@40 $f@@16))  (=> (and (not (= $o@@40 |l#0@@11|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@11| $o@@40) |l#2@@11|))) |l#3@@11|)))) :qid |totalord.368:9| :skolemid |9649| :pattern ( (MapType6Select (|lambda#12| |l#0@@11| |l#1@@11| |l#2@@11| |l#3@@11|) $o@@40 $f@@16)) )))
(assert (forall ((arg0@@316 T@U) (arg1@@196 T@U) (arg2@@131 T@U) (arg3@@96 Bool) ) (! (= (type (|lambda#13| arg0@@316 arg1@@196 arg2@@131 arg3@@96)) (MapType6Type refType boolType)) :qid |funType:lambda#13| :pattern ( (|lambda#13| arg0@@316 arg1@@196 arg2@@131 arg3@@96)) )))
(assert (forall (($o@@41 T@U) ($f@@17 T@U) (|l#0@@12| T@U) (|l#1@@12| T@U) (|l#2@@12| T@U) (|l#3@@12| Bool) ) (! (let ((alpha@@24 (FieldTypeInv0 (type $f@@17)))) (=> (and (and (and (and (= (type $o@@41) refType) (= (type $f@@17) (FieldType alpha@@24))) (= (type |l#0@@12|) refType)) (= (type |l#1@@12|) (MapType0Type refType MapType1Type))) (= (type |l#2@@12|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#13| |l#0@@12| |l#1@@12| |l#2@@12| |l#3@@12|) $o@@41 $f@@17))  (=> (and (not (= $o@@41 |l#0@@12|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@12| $o@@41) |l#2@@12|))) |l#3@@12|)))) :qid |totalord.388:12| :skolemid |9650| :pattern ( (MapType6Select (|lambda#13| |l#0@@12| |l#1@@12| |l#2@@12| |l#3@@12|) $o@@41 $f@@17)) )))
(assert (forall ((arg0@@317 T@U) (arg1@@197 T@U) (arg2@@132 T@U) (arg3@@97 Bool) ) (! (= (type (|lambda#14| arg0@@317 arg1@@197 arg2@@132 arg3@@97)) (MapType6Type refType boolType)) :qid |funType:lambda#14| :pattern ( (|lambda#14| arg0@@317 arg1@@197 arg2@@132 arg3@@97)) )))
(assert (forall (($o@@42 T@U) ($f@@18 T@U) (|l#0@@13| T@U) (|l#1@@13| T@U) (|l#2@@13| T@U) (|l#3@@13| Bool) ) (! (let ((alpha@@25 (FieldTypeInv0 (type $f@@18)))) (=> (and (and (and (and (= (type $o@@42) refType) (= (type $f@@18) (FieldType alpha@@25))) (= (type |l#0@@13|) refType)) (= (type |l#1@@13|) (MapType0Type refType MapType1Type))) (= (type |l#2@@13|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#14| |l#0@@13| |l#1@@13| |l#2@@13| |l#3@@13|) $o@@42 $f@@18))  (=> (and (not (= $o@@42 |l#0@@13|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@13| $o@@42) |l#2@@13|))) |l#3@@13|)))) :qid |totalord.388:12| :skolemid |9651| :pattern ( (MapType6Select (|lambda#14| |l#0@@13| |l#1@@13| |l#2@@13| |l#3@@13|) $o@@42 $f@@18)) )))
(assert (forall ((arg0@@318 T@U) (arg1@@198 T@U) (arg2@@133 T@U) (arg3@@98 Bool) ) (! (= (type (|lambda#15| arg0@@318 arg1@@198 arg2@@133 arg3@@98)) (MapType6Type refType boolType)) :qid |funType:lambda#15| :pattern ( (|lambda#15| arg0@@318 arg1@@198 arg2@@133 arg3@@98)) )))
(assert (forall (($o@@43 T@U) ($f@@19 T@U) (|l#0@@14| T@U) (|l#1@@14| T@U) (|l#2@@14| T@U) (|l#3@@14| Bool) ) (! (let ((alpha@@26 (FieldTypeInv0 (type $f@@19)))) (=> (and (and (and (and (= (type $o@@43) refType) (= (type $f@@19) (FieldType alpha@@26))) (= (type |l#0@@14|) refType)) (= (type |l#1@@14|) (MapType0Type refType MapType1Type))) (= (type |l#2@@14|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#15| |l#0@@14| |l#1@@14| |l#2@@14| |l#3@@14|) $o@@43 $f@@19))  (=> (and (not (= $o@@43 |l#0@@14|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@14| $o@@43) |l#2@@14|))) |l#3@@14|)))) :qid |totalord.404:9| :skolemid |9652| :pattern ( (MapType6Select (|lambda#15| |l#0@@14| |l#1@@14| |l#2@@14| |l#3@@14|) $o@@43 $f@@19)) )))
(assert (forall ((arg0@@319 T@U) (arg1@@199 T@U) (arg2@@134 T@U) (arg3@@99 Bool) ) (! (= (type (|lambda#16| arg0@@319 arg1@@199 arg2@@134 arg3@@99)) (MapType6Type refType boolType)) :qid |funType:lambda#16| :pattern ( (|lambda#16| arg0@@319 arg1@@199 arg2@@134 arg3@@99)) )))
(assert (forall (($o@@44 T@U) ($f@@20 T@U) (|l#0@@15| T@U) (|l#1@@15| T@U) (|l#2@@15| T@U) (|l#3@@15| Bool) ) (! (let ((alpha@@27 (FieldTypeInv0 (type $f@@20)))) (=> (and (and (and (and (= (type $o@@44) refType) (= (type $f@@20) (FieldType alpha@@27))) (= (type |l#0@@15|) refType)) (= (type |l#1@@15|) (MapType0Type refType MapType1Type))) (= (type |l#2@@15|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#16| |l#0@@15| |l#1@@15| |l#2@@15| |l#3@@15|) $o@@44 $f@@20))  (=> (and (not (= $o@@44 |l#0@@15|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@15| $o@@44) |l#2@@15|))) |l#3@@15|)))) :qid |totalord.449:12| :skolemid |9653| :pattern ( (MapType6Select (|lambda#16| |l#0@@15| |l#1@@15| |l#2@@15| |l#3@@15|) $o@@44 $f@@20)) )))
(assert (forall ((arg0@@320 T@U) (arg1@@200 T@U) (arg2@@135 T@U) (arg3@@100 Bool) ) (! (= (type (|lambda#17| arg0@@320 arg1@@200 arg2@@135 arg3@@100)) (MapType6Type refType boolType)) :qid |funType:lambda#17| :pattern ( (|lambda#17| arg0@@320 arg1@@200 arg2@@135 arg3@@100)) )))
(assert (forall (($o@@45 T@U) ($f@@21 T@U) (|l#0@@16| T@U) (|l#1@@16| T@U) (|l#2@@16| T@U) (|l#3@@16| Bool) ) (! (let ((alpha@@28 (FieldTypeInv0 (type $f@@21)))) (=> (and (and (and (and (= (type $o@@45) refType) (= (type $f@@21) (FieldType alpha@@28))) (= (type |l#0@@16|) refType)) (= (type |l#1@@16|) (MapType0Type refType MapType1Type))) (= (type |l#2@@16|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#17| |l#0@@16| |l#1@@16| |l#2@@16| |l#3@@16|) $o@@45 $f@@21))  (=> (and (not (= $o@@45 |l#0@@16|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@16| $o@@45) |l#2@@16|))) |l#3@@16|)))) :qid |totalord.449:12| :skolemid |9654| :pattern ( (MapType6Select (|lambda#17| |l#0@@16| |l#1@@16| |l#2@@16| |l#3@@16|) $o@@45 $f@@21)) )))
(assert (forall ((arg0@@321 T@U) (arg1@@201 T@U) (arg2@@136 T@U) (arg3@@101 Bool) ) (! (= (type (|lambda#18| arg0@@321 arg1@@201 arg2@@136 arg3@@101)) (MapType6Type refType boolType)) :qid |funType:lambda#18| :pattern ( (|lambda#18| arg0@@321 arg1@@201 arg2@@136 arg3@@101)) )))
(assert (forall (($o@@46 T@U) ($f@@22 T@U) (|l#0@@17| T@U) (|l#1@@17| T@U) (|l#2@@17| T@U) (|l#3@@17| Bool) ) (! (let ((alpha@@29 (FieldTypeInv0 (type $f@@22)))) (=> (and (and (and (and (= (type $o@@46) refType) (= (type $f@@22) (FieldType alpha@@29))) (= (type |l#0@@17|) refType)) (= (type |l#1@@17|) (MapType0Type refType MapType1Type))) (= (type |l#2@@17|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#18| |l#0@@17| |l#1@@17| |l#2@@17| |l#3@@17|) $o@@46 $f@@22))  (=> (and (not (= $o@@46 |l#0@@17|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@17| $o@@46) |l#2@@17|))) |l#3@@17|)))) :qid |totalord.465:9| :skolemid |9655| :pattern ( (MapType6Select (|lambda#18| |l#0@@17| |l#1@@17| |l#2@@17| |l#3@@17|) $o@@46 $f@@22)) )))
(assert (forall ((arg0@@322 T@U) (arg1@@202 T@U) (arg2@@137 T@U) (arg3@@102 Bool) ) (! (= (type (|lambda#19| arg0@@322 arg1@@202 arg2@@137 arg3@@102)) (MapType6Type refType boolType)) :qid |funType:lambda#19| :pattern ( (|lambda#19| arg0@@322 arg1@@202 arg2@@137 arg3@@102)) )))
(assert (forall (($o@@47 T@U) ($f@@23 T@U) (|l#0@@18| T@U) (|l#1@@18| T@U) (|l#2@@18| T@U) (|l#3@@18| Bool) ) (! (let ((alpha@@30 (FieldTypeInv0 (type $f@@23)))) (=> (and (and (and (and (= (type $o@@47) refType) (= (type $f@@23) (FieldType alpha@@30))) (= (type |l#0@@18|) refType)) (= (type |l#1@@18|) (MapType0Type refType MapType1Type))) (= (type |l#2@@18|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#19| |l#0@@18| |l#1@@18| |l#2@@18| |l#3@@18|) $o@@47 $f@@23))  (=> (and (not (= $o@@47 |l#0@@18|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@18| $o@@47) |l#2@@18|))) |l#3@@18|)))) :qid |totalord.510:9| :skolemid |9656| :pattern ( (MapType6Select (|lambda#19| |l#0@@18| |l#1@@18| |l#2@@18| |l#3@@18|) $o@@47 $f@@23)) )))
(assert (forall ((arg0@@323 T@U) (arg1@@203 T@U) (arg2@@138 T@U) (arg3@@103 Bool) ) (! (= (type (|lambda#20| arg0@@323 arg1@@203 arg2@@138 arg3@@103)) (MapType6Type refType boolType)) :qid |funType:lambda#20| :pattern ( (|lambda#20| arg0@@323 arg1@@203 arg2@@138 arg3@@103)) )))
(assert (forall (($o@@48 T@U) ($f@@24 T@U) (|l#0@@19| T@U) (|l#1@@19| T@U) (|l#2@@19| T@U) (|l#3@@19| Bool) ) (! (let ((alpha@@31 (FieldTypeInv0 (type $f@@24)))) (=> (and (and (and (and (= (type $o@@48) refType) (= (type $f@@24) (FieldType alpha@@31))) (= (type |l#0@@19|) refType)) (= (type |l#1@@19|) (MapType0Type refType MapType1Type))) (= (type |l#2@@19|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#20| |l#0@@19| |l#1@@19| |l#2@@19| |l#3@@19|) $o@@48 $f@@24))  (=> (and (not (= $o@@48 |l#0@@19|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@19| $o@@48) |l#2@@19|))) |l#3@@19|)))) :qid |totalord.510:9| :skolemid |9657| :pattern ( (MapType6Select (|lambda#20| |l#0@@19| |l#1@@19| |l#2@@19| |l#3@@19|) $o@@48 $f@@24)) )))
(assert (forall ((arg0@@324 T@U) (arg1@@204 T@U) (arg2@@139 T@U) (arg3@@104 Bool) ) (! (= (type (|lambda#21| arg0@@324 arg1@@204 arg2@@139 arg3@@104)) (MapType6Type refType boolType)) :qid |funType:lambda#21| :pattern ( (|lambda#21| arg0@@324 arg1@@204 arg2@@139 arg3@@104)) )))
(assert (forall (($o@@49 T@U) ($f@@25 T@U) (|l#0@@20| T@U) (|l#1@@20| T@U) (|l#2@@20| T@U) (|l#3@@20| Bool) ) (! (let ((alpha@@32 (FieldTypeInv0 (type $f@@25)))) (=> (and (and (and (and (= (type $o@@49) refType) (= (type $f@@25) (FieldType alpha@@32))) (= (type |l#0@@20|) refType)) (= (type |l#1@@20|) (MapType0Type refType MapType1Type))) (= (type |l#2@@20|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#21| |l#0@@20| |l#1@@20| |l#2@@20| |l#3@@20|) $o@@49 $f@@25))  (=> (and (not (= $o@@49 |l#0@@20|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@20| $o@@49) |l#2@@20|))) |l#3@@20|)))) :qid |totalord.528:9| :skolemid |9658| :pattern ( (MapType6Select (|lambda#21| |l#0@@20| |l#1@@20| |l#2@@20| |l#3@@20|) $o@@49 $f@@25)) )))
(assert (forall ((arg0@@325 T@U) (arg1@@205 T@U) (arg2@@140 T@U) (arg3@@105 Bool) ) (! (= (type (|lambda#22| arg0@@325 arg1@@205 arg2@@140 arg3@@105)) (MapType6Type refType boolType)) :qid |funType:lambda#22| :pattern ( (|lambda#22| arg0@@325 arg1@@205 arg2@@140 arg3@@105)) )))
(assert (forall (($o@@50 T@U) ($f@@26 T@U) (|l#0@@21| T@U) (|l#1@@21| T@U) (|l#2@@21| T@U) (|l#3@@21| Bool) ) (! (let ((alpha@@33 (FieldTypeInv0 (type $f@@26)))) (=> (and (and (and (and (= (type $o@@50) refType) (= (type $f@@26) (FieldType alpha@@33))) (= (type |l#0@@21|) refType)) (= (type |l#1@@21|) (MapType0Type refType MapType1Type))) (= (type |l#2@@21|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#22| |l#0@@21| |l#1@@21| |l#2@@21| |l#3@@21|) $o@@50 $f@@26))  (=> (and (not (= $o@@50 |l#0@@21|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@21| $o@@50) |l#2@@21|))) |l#3@@21|)))) :qid |totalord.528:9| :skolemid |9659| :pattern ( (MapType6Select (|lambda#22| |l#0@@21| |l#1@@21| |l#2@@21| |l#3@@21|) $o@@50 $f@@26)) )))
(assert (forall ((arg0@@326 T@U) (arg1@@206 T@U) (arg2@@141 T@U) (arg3@@106 Bool) ) (! (= (type (|lambda#23| arg0@@326 arg1@@206 arg2@@141 arg3@@106)) (MapType6Type refType boolType)) :qid |funType:lambda#23| :pattern ( (|lambda#23| arg0@@326 arg1@@206 arg2@@141 arg3@@106)) )))
(assert (forall (($o@@51 T@U) ($f@@27 T@U) (|l#0@@22| T@U) (|l#1@@22| T@U) (|l#2@@22| T@U) (|l#3@@22| Bool) ) (! (let ((alpha@@34 (FieldTypeInv0 (type $f@@27)))) (=> (and (and (and (and (= (type $o@@51) refType) (= (type $f@@27) (FieldType alpha@@34))) (= (type |l#0@@22|) refType)) (= (type |l#1@@22|) (MapType0Type refType MapType1Type))) (= (type |l#2@@22|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#23| |l#0@@22| |l#1@@22| |l#2@@22| |l#3@@22|) $o@@51 $f@@27))  (=> (and (not (= $o@@51 |l#0@@22|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@22| $o@@51) |l#2@@22|))) |l#3@@22|)))) :qid |totalord.563:9| :skolemid |9660| :pattern ( (MapType6Select (|lambda#23| |l#0@@22| |l#1@@22| |l#2@@22| |l#3@@22|) $o@@51 $f@@27)) )))
(assert (forall ((arg0@@327 T@U) (arg1@@207 T@U) (arg2@@142 T@U) (arg3@@107 Bool) ) (! (= (type (|lambda#24| arg0@@327 arg1@@207 arg2@@142 arg3@@107)) (MapType6Type refType boolType)) :qid |funType:lambda#24| :pattern ( (|lambda#24| arg0@@327 arg1@@207 arg2@@142 arg3@@107)) )))
(assert (forall (($o@@52 T@U) ($f@@28 T@U) (|l#0@@23| T@U) (|l#1@@23| T@U) (|l#2@@23| T@U) (|l#3@@23| Bool) ) (! (let ((alpha@@35 (FieldTypeInv0 (type $f@@28)))) (=> (and (and (and (and (= (type $o@@52) refType) (= (type $f@@28) (FieldType alpha@@35))) (= (type |l#0@@23|) refType)) (= (type |l#1@@23|) (MapType0Type refType MapType1Type))) (= (type |l#2@@23|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#24| |l#0@@23| |l#1@@23| |l#2@@23| |l#3@@23|) $o@@52 $f@@28))  (=> (and (not (= $o@@52 |l#0@@23|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@23| $o@@52) |l#2@@23|))) |l#3@@23|)))) :qid |totalord.563:9| :skolemid |9661| :pattern ( (MapType6Select (|lambda#24| |l#0@@23| |l#1@@23| |l#2@@23| |l#3@@23|) $o@@52 $f@@28)) )))
(assert (forall ((arg0@@328 T@U) (arg1@@208 T@U) (arg2@@143 T@U) (arg3@@108 Bool) ) (! (= (type (|lambda#25| arg0@@328 arg1@@208 arg2@@143 arg3@@108)) (MapType6Type refType boolType)) :qid |funType:lambda#25| :pattern ( (|lambda#25| arg0@@328 arg1@@208 arg2@@143 arg3@@108)) )))
(assert (forall (($o@@53 T@U) ($f@@29 T@U) (|l#0@@24| T@U) (|l#1@@24| T@U) (|l#2@@24| T@U) (|l#3@@24| Bool) ) (! (let ((alpha@@36 (FieldTypeInv0 (type $f@@29)))) (=> (and (and (and (and (= (type $o@@53) refType) (= (type $f@@29) (FieldType alpha@@36))) (= (type |l#0@@24|) refType)) (= (type |l#1@@24|) (MapType0Type refType MapType1Type))) (= (type |l#2@@24|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#25| |l#0@@24| |l#1@@24| |l#2@@24| |l#3@@24|) $o@@53 $f@@29))  (=> (and (not (= $o@@53 |l#0@@24|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@24| $o@@53) |l#2@@24|))) |l#3@@24|)))) :qid |totalord.572:9| :skolemid |9662| :pattern ( (MapType6Select (|lambda#25| |l#0@@24| |l#1@@24| |l#2@@24| |l#3@@24|) $o@@53 $f@@29)) )))
(assert (forall ((arg0@@329 T@U) (arg1@@209 T@U) (arg2@@144 T@U) (arg3@@109 Bool) ) (! (= (type (|lambda#26| arg0@@329 arg1@@209 arg2@@144 arg3@@109)) (MapType6Type refType boolType)) :qid |funType:lambda#26| :pattern ( (|lambda#26| arg0@@329 arg1@@209 arg2@@144 arg3@@109)) )))
(assert (forall (($o@@54 T@U) ($f@@30 T@U) (|l#0@@25| T@U) (|l#1@@25| T@U) (|l#2@@25| T@U) (|l#3@@25| Bool) ) (! (let ((alpha@@37 (FieldTypeInv0 (type $f@@30)))) (=> (and (and (and (and (= (type $o@@54) refType) (= (type $f@@30) (FieldType alpha@@37))) (= (type |l#0@@25|) refType)) (= (type |l#1@@25|) (MapType0Type refType MapType1Type))) (= (type |l#2@@25|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#26| |l#0@@25| |l#1@@25| |l#2@@25| |l#3@@25|) $o@@54 $f@@30))  (=> (and (not (= $o@@54 |l#0@@25|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@25| $o@@54) |l#2@@25|))) |l#3@@25|)))) :qid |totalord.683:9| :skolemid |9663| :pattern ( (MapType6Select (|lambda#26| |l#0@@25| |l#1@@25| |l#2@@25| |l#3@@25|) $o@@54 $f@@30)) )))
(assert (forall ((arg0@@330 T@U) (arg1@@210 T@U) (arg2@@145 T@U) (arg3@@110 Bool) ) (! (= (type (|lambda#27| arg0@@330 arg1@@210 arg2@@145 arg3@@110)) (MapType6Type refType boolType)) :qid |funType:lambda#27| :pattern ( (|lambda#27| arg0@@330 arg1@@210 arg2@@145 arg3@@110)) )))
(assert (forall (($o@@55 T@U) ($f@@31 T@U) (|l#0@@26| T@U) (|l#1@@26| T@U) (|l#2@@26| T@U) (|l#3@@26| Bool) ) (! (let ((alpha@@38 (FieldTypeInv0 (type $f@@31)))) (=> (and (and (and (and (= (type $o@@55) refType) (= (type $f@@31) (FieldType alpha@@38))) (= (type |l#0@@26|) refType)) (= (type |l#1@@26|) (MapType0Type refType MapType1Type))) (= (type |l#2@@26|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#27| |l#0@@26| |l#1@@26| |l#2@@26| |l#3@@26|) $o@@55 $f@@31))  (=> (and (not (= $o@@55 |l#0@@26|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@26| $o@@55) |l#2@@26|))) |l#3@@26|)))) :qid |totalord.700:9| :skolemid |9664| :pattern ( (MapType6Select (|lambda#27| |l#0@@26| |l#1@@26| |l#2@@26| |l#3@@26|) $o@@55 $f@@31)) )))
(assert (forall ((arg0@@331 T@U) (arg1@@211 T@U) (arg2@@146 T@U) (arg3@@111 Bool) ) (! (= (type (|lambda#28| arg0@@331 arg1@@211 arg2@@146 arg3@@111)) (MapType6Type refType boolType)) :qid |funType:lambda#28| :pattern ( (|lambda#28| arg0@@331 arg1@@211 arg2@@146 arg3@@111)) )))
(assert (forall (($o@@56 T@U) ($f@@32 T@U) (|l#0@@27| T@U) (|l#1@@27| T@U) (|l#2@@27| T@U) (|l#3@@27| Bool) ) (! (let ((alpha@@39 (FieldTypeInv0 (type $f@@32)))) (=> (and (and (and (and (= (type $o@@56) refType) (= (type $f@@32) (FieldType alpha@@39))) (= (type |l#0@@27|) refType)) (= (type |l#1@@27|) (MapType0Type refType MapType1Type))) (= (type |l#2@@27|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#28| |l#0@@27| |l#1@@27| |l#2@@27| |l#3@@27|) $o@@56 $f@@32))  (=> (and (not (= $o@@56 |l#0@@27|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@27| $o@@56) |l#2@@27|))) |l#3@@27|)))) :qid |totalord.707:9| :skolemid |9665| :pattern ( (MapType6Select (|lambda#28| |l#0@@27| |l#1@@27| |l#2@@27| |l#3@@27|) $o@@56 $f@@32)) )))
(assert (forall ((|$y#0| T@U) (|l#0@@28| T@U) (|l#1@@28| T@U) ) (!  (=> (and (and (= (type |$y#0|) BoxType) (= (type |l#0@@28|) TyType)) (= (type |l#1@@28|) charType)) (= (U_2_bool (MapType0Select (|lambda#29| |l#0@@28| |l#1@@28|) |$y#0|))  (and ($IsBox |$y#0| |l#0@@28|) (Char__Order.__default.lt ($Unbox charType |$y#0|) |l#1@@28|)))) :qid |totalord.716:52| :skolemid |9666| :pattern ( (MapType0Select (|lambda#29| |l#0@@28| |l#1@@28|) |$y#0|)) )))
(assert (forall ((|$y#1| T@U) (|l#0@@29| T@U) (|l#1@@29| T@U) ) (!  (=> (and (and (= (type |$y#1|) BoxType) (= (type |l#0@@29|) TyType)) (= (type |l#1@@29|) charType)) (= (U_2_bool (MapType0Select (|lambda#30| |l#0@@29| |l#1@@29|) |$y#1|))  (and ($IsBox |$y#1| |l#0@@29|) (Char__Order.__default.lte |l#1@@29| ($Unbox charType |$y#1|))))) :qid |totalord.717:54| :skolemid |9667| :pattern ( (MapType0Select (|lambda#30| |l#0@@29| |l#1@@29|) |$y#1|)) )))
(assert (forall ((arg0@@332 T@U) (arg1@@212 T@U) (arg2@@147 T@U) (arg3@@112 Bool) ) (! (= (type (|lambda#41| arg0@@332 arg1@@212 arg2@@147 arg3@@112)) (MapType6Type refType boolType)) :qid |funType:lambda#41| :pattern ( (|lambda#41| arg0@@332 arg1@@212 arg2@@147 arg3@@112)) )))
(assert (forall (($o@@57 T@U) ($f@@33 T@U) (|l#0@@30| T@U) (|l#1@@30| T@U) (|l#2@@28| T@U) (|l#3@@28| Bool) ) (! (let ((alpha@@40 (FieldTypeInv0 (type $f@@33)))) (=> (and (and (and (and (= (type $o@@57) refType) (= (type $f@@33) (FieldType alpha@@40))) (= (type |l#0@@30|) refType)) (= (type |l#1@@30|) (MapType0Type refType MapType1Type))) (= (type |l#2@@28|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#41| |l#0@@30| |l#1@@30| |l#2@@28| |l#3@@28|) $o@@57 $f@@33))  (=> (and (not (= $o@@57 |l#0@@30|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@30| $o@@57) |l#2@@28|))) |l#3@@28|)))) :qid |totalord.715:12| :skolemid |9668| :pattern ( (MapType6Select (|lambda#41| |l#0@@30| |l#1@@30| |l#2@@28| |l#3@@28|) $o@@57 $f@@33)) )))
(assert (forall ((arg0@@333 T@U) (arg1@@213 T@U) (arg2@@148 T@U) (arg3@@113 Bool) ) (! (= (type (|lambda#42| arg0@@333 arg1@@213 arg2@@148 arg3@@113)) (MapType6Type refType boolType)) :qid |funType:lambda#42| :pattern ( (|lambda#42| arg0@@333 arg1@@213 arg2@@148 arg3@@113)) )))
(assert (forall (($o@@58 T@U) ($f@@34 T@U) (|l#0@@31| T@U) (|l#1@@31| T@U) (|l#2@@29| T@U) (|l#3@@29| Bool) ) (! (let ((alpha@@41 (FieldTypeInv0 (type $f@@34)))) (=> (and (and (and (and (= (type $o@@58) refType) (= (type $f@@34) (FieldType alpha@@41))) (= (type |l#0@@31|) refType)) (= (type |l#1@@31|) (MapType0Type refType MapType1Type))) (= (type |l#2@@29|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#42| |l#0@@31| |l#1@@31| |l#2@@29| |l#3@@29|) $o@@58 $f@@34))  (=> (and (not (= $o@@58 |l#0@@31|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@31| $o@@58) |l#2@@29|))) |l#3@@29|)))) :qid |totalord.715:12| :skolemid |9669| :pattern ( (MapType6Select (|lambda#42| |l#0@@31| |l#1@@31| |l#2@@29| |l#3@@29|) $o@@58 $f@@34)) )))
(assert (forall ((|$y#0@@0| T@U) (|l#0@@32| T@U) (|l#1@@32| T@U) ) (!  (=> (and (and (= (type |$y#0@@0|) BoxType) (= (type |l#0@@32|) TyType)) (= (type |l#1@@32|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#51| |l#0@@32| |l#1@@32|) |$y#0@@0|))  (and ($IsBox |$y#0@@0| |l#0@@32|) (|Seq#Contains| |l#1@@32| |$y#0@@0|)))) :qid |totalord.739:18| :skolemid |9670| :pattern ( (MapType0Select (|lambda#51| |l#0@@32| |l#1@@32|) |$y#0@@0|)) )))
(assert (forall ((arg0@@334 T@U) (arg1@@214 T@U) (arg2@@149 T@U) (arg3@@114 Bool) ) (! (= (type (|lambda#55| arg0@@334 arg1@@214 arg2@@149 arg3@@114)) (MapType6Type refType boolType)) :qid |funType:lambda#55| :pattern ( (|lambda#55| arg0@@334 arg1@@214 arg2@@149 arg3@@114)) )))
(assert (forall (($o@@59 T@U) ($f@@35 T@U) (|l#0@@33| T@U) (|l#1@@33| T@U) (|l#2@@30| T@U) (|l#3@@30| Bool) ) (! (let ((alpha@@42 (FieldTypeInv0 (type $f@@35)))) (=> (and (and (and (and (= (type $o@@59) refType) (= (type $f@@35) (FieldType alpha@@42))) (= (type |l#0@@33|) refType)) (= (type |l#1@@33|) (MapType0Type refType MapType1Type))) (= (type |l#2@@30|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#55| |l#0@@33| |l#1@@33| |l#2@@30| |l#3@@30|) $o@@59 $f@@35))  (=> (and (not (= $o@@59 |l#0@@33|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@33| $o@@59) |l#2@@30|))) |l#3@@30|)))) :qid |totalord.34:9| :skolemid |9671| :pattern ( (MapType6Select (|lambda#55| |l#0@@33| |l#1@@33| |l#2@@30| |l#3@@30|) $o@@59 $f@@35)) )))
(assert (forall ((arg0@@335 T@U) (arg1@@215 T@U) (arg2@@150 T@U) (arg3@@115 Bool) ) (! (= (type (|lambda#56| arg0@@335 arg1@@215 arg2@@150 arg3@@115)) (MapType6Type refType boolType)) :qid |funType:lambda#56| :pattern ( (|lambda#56| arg0@@335 arg1@@215 arg2@@150 arg3@@115)) )))
(assert (forall (($o@@60 T@U) ($f@@36 T@U) (|l#0@@34| T@U) (|l#1@@34| T@U) (|l#2@@31| T@U) (|l#3@@31| Bool) ) (! (let ((alpha@@43 (FieldTypeInv0 (type $f@@36)))) (=> (and (and (and (and (= (type $o@@60) refType) (= (type $f@@36) (FieldType alpha@@43))) (= (type |l#0@@34|) refType)) (= (type |l#1@@34|) (MapType0Type refType MapType1Type))) (= (type |l#2@@31|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#56| |l#0@@34| |l#1@@34| |l#2@@31| |l#3@@31|) $o@@60 $f@@36))  (=> (and (not (= $o@@60 |l#0@@34|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@34| $o@@60) |l#2@@31|))) |l#3@@31|)))) :qid |totalord.53:9| :skolemid |9672| :pattern ( (MapType6Select (|lambda#56| |l#0@@34| |l#1@@34| |l#2@@31| |l#3@@31|) $o@@60 $f@@36)) )))
(assert (forall ((arg0@@336 T@U) (arg1@@216 T@U) (arg2@@151 T@U) (arg3@@116 Bool) ) (! (= (type (|lambda#57| arg0@@336 arg1@@216 arg2@@151 arg3@@116)) (MapType6Type refType boolType)) :qid |funType:lambda#57| :pattern ( (|lambda#57| arg0@@336 arg1@@216 arg2@@151 arg3@@116)) )))
(assert (forall (($o@@61 T@U) ($f@@37 T@U) (|l#0@@35| T@U) (|l#1@@35| T@U) (|l#2@@32| T@U) (|l#3@@32| Bool) ) (! (let ((alpha@@44 (FieldTypeInv0 (type $f@@37)))) (=> (and (and (and (and (= (type $o@@61) refType) (= (type $f@@37) (FieldType alpha@@44))) (= (type |l#0@@35|) refType)) (= (type |l#1@@35|) (MapType0Type refType MapType1Type))) (= (type |l#2@@32|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#57| |l#0@@35| |l#1@@35| |l#2@@32| |l#3@@32|) $o@@61 $f@@37))  (=> (and (not (= $o@@61 |l#0@@35|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@35| $o@@61) |l#2@@32|))) |l#3@@32|)))) :qid |totalord.77:9| :skolemid |9673| :pattern ( (MapType6Select (|lambda#57| |l#0@@35| |l#1@@35| |l#2@@32| |l#3@@32|) $o@@61 $f@@37)) )))
(assert (forall ((arg0@@337 T@U) (arg1@@217 T@U) (arg2@@152 T@U) (arg3@@117 Bool) ) (! (= (type (|lambda#58| arg0@@337 arg1@@217 arg2@@152 arg3@@117)) (MapType6Type refType boolType)) :qid |funType:lambda#58| :pattern ( (|lambda#58| arg0@@337 arg1@@217 arg2@@152 arg3@@117)) )))
(assert (forall (($o@@62 T@U) ($f@@38 T@U) (|l#0@@36| T@U) (|l#1@@36| T@U) (|l#2@@33| T@U) (|l#3@@33| Bool) ) (! (let ((alpha@@45 (FieldTypeInv0 (type $f@@38)))) (=> (and (and (and (and (= (type $o@@62) refType) (= (type $f@@38) (FieldType alpha@@45))) (= (type |l#0@@36|) refType)) (= (type |l#1@@36|) (MapType0Type refType MapType1Type))) (= (type |l#2@@33|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#58| |l#0@@36| |l#1@@36| |l#2@@33| |l#3@@33|) $o@@62 $f@@38))  (=> (and (not (= $o@@62 |l#0@@36|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@36| $o@@62) |l#2@@33|))) |l#3@@33|)))) :qid |totalord.85:9| :skolemid |9674| :pattern ( (MapType6Select (|lambda#58| |l#0@@36| |l#1@@36| |l#2@@33| |l#3@@33|) $o@@62 $f@@38)) )))
(assert (forall ((arg0@@338 T@U) (arg1@@218 T@U) (arg2@@153 T@U) (arg3@@118 Bool) ) (! (= (type (|lambda#59| arg0@@338 arg1@@218 arg2@@153 arg3@@118)) (MapType6Type refType boolType)) :qid |funType:lambda#59| :pattern ( (|lambda#59| arg0@@338 arg1@@218 arg2@@153 arg3@@118)) )))
(assert (forall (($o@@63 T@U) ($f@@39 T@U) (|l#0@@37| T@U) (|l#1@@37| T@U) (|l#2@@34| T@U) (|l#3@@34| Bool) ) (! (let ((alpha@@46 (FieldTypeInv0 (type $f@@39)))) (=> (and (and (and (and (= (type $o@@63) refType) (= (type $f@@39) (FieldType alpha@@46))) (= (type |l#0@@37|) refType)) (= (type |l#1@@37|) (MapType0Type refType MapType1Type))) (= (type |l#2@@34|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#59| |l#0@@37| |l#1@@37| |l#2@@34| |l#3@@34|) $o@@63 $f@@39))  (=> (and (not (= $o@@63 |l#0@@37|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@37| $o@@63) |l#2@@34|))) |l#3@@34|)))) :qid |totalord.93:9| :skolemid |9675| :pattern ( (MapType6Select (|lambda#59| |l#0@@37| |l#1@@37| |l#2@@34| |l#3@@34|) $o@@63 $f@@39)) )))
(assert (forall ((arg0@@339 T@U) (arg1@@219 T@U) (arg2@@154 T@U) (arg3@@119 Bool) ) (! (= (type (|lambda#60| arg0@@339 arg1@@219 arg2@@154 arg3@@119)) (MapType6Type refType boolType)) :qid |funType:lambda#60| :pattern ( (|lambda#60| arg0@@339 arg1@@219 arg2@@154 arg3@@119)) )))
(assert (forall (($o@@64 T@U) ($f@@40 T@U) (|l#0@@38| T@U) (|l#1@@38| T@U) (|l#2@@35| T@U) (|l#3@@35| Bool) ) (! (let ((alpha@@47 (FieldTypeInv0 (type $f@@40)))) (=> (and (and (and (and (= (type $o@@64) refType) (= (type $f@@40) (FieldType alpha@@47))) (= (type |l#0@@38|) refType)) (= (type |l#1@@38|) (MapType0Type refType MapType1Type))) (= (type |l#2@@35|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#60| |l#0@@38| |l#1@@38| |l#2@@35| |l#3@@35|) $o@@64 $f@@40))  (=> (and (not (= $o@@64 |l#0@@38|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@38| $o@@64) |l#2@@35|))) |l#3@@35|)))) :qid |totalord.101:9| :skolemid |9676| :pattern ( (MapType6Select (|lambda#60| |l#0@@38| |l#1@@38| |l#2@@35| |l#3@@35|) $o@@64 $f@@40)) )))
(assert (forall ((arg0@@340 T@U) (arg1@@220 T@U) (arg2@@155 T@U) (arg3@@120 Bool) ) (! (= (type (|lambda#61| arg0@@340 arg1@@220 arg2@@155 arg3@@120)) (MapType6Type refType boolType)) :qid |funType:lambda#61| :pattern ( (|lambda#61| arg0@@340 arg1@@220 arg2@@155 arg3@@120)) )))
(assert (forall (($o@@65 T@U) ($f@@41 T@U) (|l#0@@39| T@U) (|l#1@@39| T@U) (|l#2@@36| T@U) (|l#3@@36| Bool) ) (! (let ((alpha@@48 (FieldTypeInv0 (type $f@@41)))) (=> (and (and (and (and (= (type $o@@65) refType) (= (type $f@@41) (FieldType alpha@@48))) (= (type |l#0@@39|) refType)) (= (type |l#1@@39|) (MapType0Type refType MapType1Type))) (= (type |l#2@@36|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#61| |l#0@@39| |l#1@@39| |l#2@@36| |l#3@@36|) $o@@65 $f@@41))  (=> (and (not (= $o@@65 |l#0@@39|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@39| $o@@65) |l#2@@36|))) |l#3@@36|)))) :qid |totalord.109:9| :skolemid |9677| :pattern ( (MapType6Select (|lambda#61| |l#0@@39| |l#1@@39| |l#2@@36| |l#3@@36|) $o@@65 $f@@41)) )))
(assert (forall ((arg0@@341 T@U) (arg1@@221 T@U) (arg2@@156 T@U) (arg3@@121 Bool) ) (! (= (type (|lambda#62| arg0@@341 arg1@@221 arg2@@156 arg3@@121)) (MapType6Type refType boolType)) :qid |funType:lambda#62| :pattern ( (|lambda#62| arg0@@341 arg1@@221 arg2@@156 arg3@@121)) )))
(assert (forall (($o@@66 T@U) ($f@@42 T@U) (|l#0@@40| T@U) (|l#1@@40| T@U) (|l#2@@37| T@U) (|l#3@@37| Bool) ) (! (let ((alpha@@49 (FieldTypeInv0 (type $f@@42)))) (=> (and (and (and (and (= (type $o@@66) refType) (= (type $f@@42) (FieldType alpha@@49))) (= (type |l#0@@40|) refType)) (= (type |l#1@@40|) (MapType0Type refType MapType1Type))) (= (type |l#2@@37|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#62| |l#0@@40| |l#1@@40| |l#2@@37| |l#3@@37|) $o@@66 $f@@42))  (=> (and (not (= $o@@66 |l#0@@40|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@40| $o@@66) |l#2@@37|))) |l#3@@37|)))) :qid |totalord.117:9| :skolemid |9678| :pattern ( (MapType6Select (|lambda#62| |l#0@@40| |l#1@@40| |l#2@@37| |l#3@@37|) $o@@66 $f@@42)) )))
(assert (forall ((arg0@@342 T@U) (arg1@@222 T@U) (arg2@@157 T@U) (arg3@@122 Bool) ) (! (= (type (|lambda#63| arg0@@342 arg1@@222 arg2@@157 arg3@@122)) (MapType6Type refType boolType)) :qid |funType:lambda#63| :pattern ( (|lambda#63| arg0@@342 arg1@@222 arg2@@157 arg3@@122)) )))
(assert (forall (($o@@67 T@U) ($f@@43 T@U) (|l#0@@41| T@U) (|l#1@@41| T@U) (|l#2@@38| T@U) (|l#3@@38| Bool) ) (! (let ((alpha@@50 (FieldTypeInv0 (type $f@@43)))) (=> (and (and (and (and (= (type $o@@67) refType) (= (type $f@@43) (FieldType alpha@@50))) (= (type |l#0@@41|) refType)) (= (type |l#1@@41|) (MapType0Type refType MapType1Type))) (= (type |l#2@@38|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#63| |l#0@@41| |l#1@@41| |l#2@@38| |l#3@@38|) $o@@67 $f@@43))  (=> (and (not (= $o@@67 |l#0@@41|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@41| $o@@67) |l#2@@38|))) |l#3@@38|)))) :qid |totalord.148:9| :skolemid |9679| :pattern ( (MapType6Select (|lambda#63| |l#0@@41| |l#1@@41| |l#2@@38| |l#3@@38|) $o@@67 $f@@43)) )))
(assert (forall ((arg0@@343 T@U) (arg1@@223 T@U) (arg2@@158 T@U) (arg3@@123 Bool) ) (! (= (type (|lambda#64| arg0@@343 arg1@@223 arg2@@158 arg3@@123)) (MapType6Type refType boolType)) :qid |funType:lambda#64| :pattern ( (|lambda#64| arg0@@343 arg1@@223 arg2@@158 arg3@@123)) )))
(assert (forall (($o@@68 T@U) ($f@@44 T@U) (|l#0@@42| T@U) (|l#1@@42| T@U) (|l#2@@39| T@U) (|l#3@@39| Bool) ) (! (let ((alpha@@51 (FieldTypeInv0 (type $f@@44)))) (=> (and (and (and (and (= (type $o@@68) refType) (= (type $f@@44) (FieldType alpha@@51))) (= (type |l#0@@42|) refType)) (= (type |l#1@@42|) (MapType0Type refType MapType1Type))) (= (type |l#2@@39|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#64| |l#0@@42| |l#1@@42| |l#2@@39| |l#3@@39|) $o@@68 $f@@44))  (=> (and (not (= $o@@68 |l#0@@42|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@42| $o@@68) |l#2@@39|))) |l#3@@39|)))) :qid |totalord.148:9| :skolemid |9680| :pattern ( (MapType6Select (|lambda#64| |l#0@@42| |l#1@@42| |l#2@@39| |l#3@@39|) $o@@68 $f@@44)) )))
(assert (forall ((|$y#10| T@U) (|l#0@@43| T@U) (|l#1@@43| T@U) (|l#2@@40| Int) ) (!  (=> (and (and (= (type |$y#10|) BoxType) (= (type |l#0@@43|) TyType)) (= (type |l#1@@43|) (MapType0Type BoxType intType))) (= (U_2_bool (MapType0Select (|lambda#65| |l#0@@43| |l#1@@43| |l#2@@40|) |$y#10|))  (and ($IsBox |$y#10| |l#0@@43|) (> (U_2_int (MapType0Select |l#1@@43| |$y#10|)) |l#2@@40|)))) :qid |sequence.28:5| :skolemid |9681| :pattern ( (MapType0Select (|lambda#65| |l#0@@43| |l#1@@43| |l#2@@40|) |$y#10|)) )))
(assert (forall ((|$w#17| T@U) (|l#0@@44| T@U) (|l#1@@44| T@U) (|l#2@@41| T@U) ) (!  (=> (and (and (and (= (type |$w#17|) BoxType) (= (type |l#0@@44|) TyType)) (= (type |l#1@@44|) (MapType0Type BoxType boolType))) (= (type |l#2@@41|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#69| |l#0@@44| |l#1@@44| |l#2@@41|) |$w#17|))  (and ($IsBox |$w#17| |l#0@@44|) (and (U_2_bool (MapType0Select |l#1@@44| |$w#17|)) (not (U_2_bool (MapType0Select |l#2@@41| |$w#17|))))))) :qid |Mapssdfy.43:14| :skolemid |9682| :pattern ( (MapType0Select (|lambda#69| |l#0@@44| |l#1@@44| |l#2@@41|) |$w#17|)) )))
(assert (forall ((|$w#17@@0| T@U) (|l#0@@45| T@U) ) (!  (=> (and (= (type |$w#17@@0|) BoxType) (= (type |l#0@@45|) (MapType0Type BoxType BoxType))) (= (MapType0Select (|lambda#70| |l#0@@45|) |$w#17@@0|) (MapType0Select |l#0@@45| |$w#17@@0|))) :qid |Mapssdfy.43:14| :skolemid |9683| :pattern ( (MapType0Select (|lambda#70| |l#0@@45|) |$w#17@@0|)) )))
(assert (forall ((|$w#25| T@U) (|l#0@@46| T@U) (|l#1@@45| T@U) (|l#2@@42| T@U) ) (!  (=> (and (and (and (= (type |$w#25|) BoxType) (= (type |l#0@@46|) TyType)) (= (type |l#1@@45|) (MapType0Type BoxType boolType))) (= (type |l#2@@42|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#73| |l#0@@46| |l#1@@45| |l#2@@42|) |$w#25|))  (and ($IsBox |$w#25| |l#0@@46|) (and (U_2_bool (MapType0Select |l#1@@45| |$w#25|)) (not (= |$w#25| |l#2@@42|)))))) :qid |Mapssdfy.66:15| :skolemid |9684| :pattern ( (MapType0Select (|lambda#73| |l#0@@46| |l#1@@45| |l#2@@42|) |$w#25|)) )))
(assert (forall ((|$w#8| T@U) (|l#0@@47| T@U) (|l#1@@46| T@U) (|l#2@@43| T@U) ) (!  (=> (and (and (and (= (type |$w#8|) BoxType) (= (type |l#0@@47|) TyType)) (= (type |l#1@@46|) (MapType0Type BoxType boolType))) (= (type |l#2@@43|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#87| |l#0@@47| |l#1@@46| |l#2@@43|) |$w#8|))  (and ($IsBox |$w#8| |l#0@@47|) (and (U_2_bool (MapType0Select |l#1@@46| |$w#8|)) (U_2_bool (MapType0Select |l#2@@43| |$w#8|)))))) :qid |Mapssdfy.99:5| :skolemid |9685| :pattern ( (MapType0Select (|lambda#87| |l#0@@47| |l#1@@46| |l#2@@43|) |$w#8|)) )))
(assert (forall ((|$w#8@@0| T@U) (|l#0@@48| T@U) (|l#1@@47| T@U) (|l#2@@44| T@U) ) (!  (=> (and (and (and (= (type |$w#8@@0|) BoxType) (= (type |l#0@@48|) TyType)) (= (type |l#1@@47|) (MapType0Type BoxType boolType))) (= (type |l#2@@44|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#101| |l#0@@48| |l#1@@47| |l#2@@44|) |$w#8@@0|))  (and ($IsBox |$w#8@@0| |l#0@@48|) (or (U_2_bool (MapType0Select |l#1@@47| |$w#8@@0|)) (U_2_bool (MapType0Select |l#2@@44| |$w#8@@0|)))))) :qid |Mapssdfy.117:3| :skolemid |9686| :pattern ( (MapType0Select (|lambda#101| |l#0@@48| |l#1@@47| |l#2@@44|) |$w#8@@0|)) )))
(assert (forall ((|$w#8@@1| T@U) (|l#0@@49| T@U) (|l#1@@48| T@U) (|l#2@@45| T@U) ) (!  (=> (and (and (and (= (type |$w#8@@1|) BoxType) (= (type |l#0@@49|) (MapType0Type BoxType boolType))) (= (type |l#1@@48|) (MapType0Type BoxType BoxType))) (= (type |l#2@@45|) (MapType0Type BoxType BoxType))) (= (MapType0Select (|lambda#102| |l#0@@49| |l#1@@48| |l#2@@45|) |$w#8@@1|) (ite (U_2_bool (MapType0Select |l#0@@49| |$w#8@@1|)) (MapType0Select |l#1@@48| |$w#8@@1|) (MapType0Select |l#2@@45| |$w#8@@1|)))) :qid |Mapssdfy.117:3| :skolemid |9687| :pattern ( (MapType0Select (|lambda#102| |l#0@@49| |l#1@@48| |l#2@@45|) |$w#8@@1|)) )))
(assert (forall ((|$w#8@@2| T@U) (|l#0@@50| T@U) (|l#1@@49| T@U) (|l#2@@46| T@U) (|l#3@@40| T@U) ) (!  (=> (and (and (and (and (= (type |$w#8@@2|) BoxType) (= (type |l#0@@50|) TyType)) (= (type |l#1@@49|) (MapType0Type BoxType boolType))) (= (type |l#2@@46|) (MapType0Type BoxType boolType))) (= (type |l#3@@40|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#121| |l#0@@50| |l#1@@49| |l#2@@46| |l#3@@40|) |$w#8@@2|))  (and ($IsBox |$w#8@@2| |l#0@@50|) (or (or (U_2_bool (MapType0Select |l#1@@49| |$w#8@@2|)) (U_2_bool (MapType0Select |l#2@@46| |$w#8@@2|))) (U_2_bool (MapType0Select |l#3@@40| |$w#8@@2|)))))) :qid |Mapssdfy.191:3| :skolemid |9688| :pattern ( (MapType0Select (|lambda#121| |l#0@@50| |l#1@@49| |l#2@@46| |l#3@@40|) |$w#8@@2|)) )))
(assert (forall ((|$w#8@@3| T@U) (|l#0@@51| T@U) (|l#1@@50| T@U) (|l#2@@47| T@U) (|l#3@@41| T@U) (|l#4| T@U) ) (!  (=> (and (and (and (and (and (= (type |$w#8@@3|) BoxType) (= (type |l#0@@51|) (MapType0Type BoxType boolType))) (= (type |l#1@@50|) (MapType0Type BoxType BoxType))) (= (type |l#2@@47|) (MapType0Type BoxType boolType))) (= (type |l#3@@41|) (MapType0Type BoxType BoxType))) (= (type |l#4|) (MapType0Type BoxType BoxType))) (= (MapType0Select (|lambda#122| |l#0@@51| |l#1@@50| |l#2@@47| |l#3@@41| |l#4|) |$w#8@@3|) (ite (U_2_bool (MapType0Select |l#0@@51| |$w#8@@3|)) (MapType0Select |l#1@@50| |$w#8@@3|) (ite (U_2_bool (MapType0Select |l#2@@47| |$w#8@@3|)) (MapType0Select |l#3@@41| |$w#8@@3|) (MapType0Select |l#4| |$w#8@@3|))))) :qid |Mapssdfy.191:3| :skolemid |9689| :pattern ( (MapType0Select (|lambda#122| |l#0@@51| |l#1@@50| |l#2@@47| |l#3@@41| |l#4|) |$w#8@@3|)) )))
(assert (forall ((|$w#8@@4| T@U) (|l#0@@52| T@U) (|l#1@@51| T@U) ) (!  (=> (and (and (= (type |$w#8@@4|) BoxType) (= (type |l#0@@52|) TyType)) (= (type |l#1@@51|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#125| |l#0@@52| |l#1@@51|) |$w#8@@4|))  (and ($IsBox |$w#8@@4| |l#0@@52|) (U_2_bool (MapType0Select |l#1@@51| |$w#8@@4|))))) :qid |Mapssdfy.198:4| :skolemid |9690| :pattern ( (MapType0Select (|lambda#125| |l#0@@52| |l#1@@51|) |$w#8@@4|)) )))
(declare-fun StartFuelAssert_Char_Order._default.IsStrictlySorted () T@U)
(declare-fun StartFuelAssert_Sequences._default.Flatten () T@U)
(declare-fun |seqs#0@@11| () T@U)
(declare-fun |fseqs#0@0| () T@U)
(declare-fun $_Frame@0 () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun MoreFuel_Char_Order._default.IsStrictlySorted0 () T@U)
(declare-fun |run##0@0| () T@U)
(declare-fun $Heap@5 () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun |shape#0@0| () T@U)
(declare-fun |let#0#0#0| () T@U)
(declare-fun |let#1#0#0| () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun StartFuel_Sequences._default.NoDupes () T@U)
(declare-fun StartFuelAssert_Sequences._default.NoDupes () T@U)
(declare-fun StartFuel_Sequences._default.Range () T@U)
(declare-fun StartFuelAssert_Sequences._default.Range () T@U)
(declare-fun StartFuel_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuelAssert_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuel_Sequences._default.remove () T@U)
(declare-fun StartFuelAssert_Sequences._default.remove () T@U)
(declare-fun StartFuel_Sequences._default.insert () T@U)
(declare-fun StartFuelAssert_Sequences._default.insert () T@U)
(declare-fun StartFuel_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuel_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuel_Sequences._default.concat () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat () T@U)
(declare-fun StartFuel_Sequences._default.concat3 () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat3 () T@U)
(declare-fun StartFuel_Sequences._default.concatSeq () T@U)
(declare-fun StartFuelAssert_Sequences._default.concatSeq () T@U)
(declare-fun StartFuel_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuel_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexIterate () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuel_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuel_Sequences._default.Zip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Zip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Unzip () T@U)
(declare-fun StartFuel_Sequences._default.Flatten () T@U)
(declare-fun StartFuel_Sequences._default.fill () T@U)
(declare-fun StartFuelAssert_Sequences._default.fill () T@U)
(declare-fun StartFuel_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuel_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuel_Maps._default.IMapRemove () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove () T@U)
(declare-fun StartFuel_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuel_Maps._default.MapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuel_Maps._default.IMapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnion () T@U)
(declare-fun StartFuel_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuelAssert_SeqComparison._default.lte () T@U)
(declare-fun StartFuel_Char_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuelAssert_Char_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuel_Char_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuelAssert_Char_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuel_Char_Order._default.NotMinimum () T@U)
(declare-fun StartFuelAssert_Char_Order._default.NotMinimum () T@U)
(declare-fun StartFuel_Char_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Char_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Char_Order._default.minimum () T@U)
(declare-fun StartFuel_Char_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Char_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Char_Order._default.maximum () T@U)
(declare-fun StartFuel_Char_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Char_Order._default.maximumOpt () T@U)
(declare-fun $Heap@@45 () T@U)
(declare-fun |shape#0@@15| () T@U)
(declare-fun |fseqs#0| () T@U)
(declare-fun %lbl%+0 () Bool)
(declare-fun %lbl%+1 () Bool)
(declare-fun |jl#0@0| () Int)
(declare-fun |il#0@0| () Int)
(declare-fun %lbl%@2 () Bool)
(declare-fun %lbl%@3 () Bool)
(declare-fun |io#0@0| () Int)
(declare-fun %lbl%@4 () Bool)
(declare-fun |jo#0@0| () Int)
(declare-fun %lbl%@5 () Bool)
(declare-fun %lbl%+6 () Bool)
(declare-fun %lbl%+7 () Bool)
(declare-fun |i#6@0| () Int)
(declare-fun |j#3@0| () Int)
(declare-fun %lbl%@8 () Bool)
(declare-fun %lbl%@9 () Bool)
(declare-fun %lbl%+10 () Bool)
(declare-fun %lbl%+11 () Bool)
(declare-fun %lbl%+12 () Bool)
(declare-fun %lbl%+13 () Bool)
(declare-fun %lbl%+14 () Bool)
(declare-fun %lbl%+15 () Bool)
(declare-fun %lbl%@16 () Bool)
(declare-fun %lbl%+17 () Bool)
(declare-fun %lbl%+18 () Bool)
(declare-fun %lbl%+19 () Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type StartFuelAssert_Char_Order._default.IsStrictlySorted) LayerTypeType) (= (type StartFuelAssert_Sequences._default.Flatten) LayerTypeType)) (= (type |seqs#0@@11|) (SeqType BoxType))) (= (type |fseqs#0@0|) (SeqType BoxType))) (= (type $_Frame@0) (MapType6Type refType boolType))) (= (type $Heap@1) (MapType0Type refType MapType1Type))) (= (type $Heap@0) (MapType0Type refType MapType1Type))) (= (type MoreFuel_Char_Order._default.IsStrictlySorted0) LayerTypeType)) (= (type |run##0@0|) (SeqType BoxType))) (= (type $Heap@5) (MapType0Type refType MapType1Type))) (= (type $Heap@4) (MapType0Type refType MapType1Type))) (= (type |shape#0@0|) (SeqType BoxType))) (= (type |let#0#0#0|) DatatypeTypeType)) (= (type |let#1#0#0|) DatatypeTypeType)) (= (type $Heap@2) (MapType0Type refType MapType1Type))) (= (type $Heap@3) (MapType0Type refType MapType1Type))) (= (type StartFuel_Sequences._default.NoDupes) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.NoDupes) LayerTypeType)) (= (type StartFuel_Sequences._default.Range) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Range) LayerTypeType)) (= (type StartFuel_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuel_Sequences._default.remove) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.remove) LayerTypeType)) (= (type StartFuel_Sequences._default.insert) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.insert) LayerTypeType)) (= (type StartFuel_Sequences._default.replace1with2) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace1with2) LayerTypeType)) (= (type StartFuel_Sequences._default.replace2with1) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace2with1) LayerTypeType)) (= (type StartFuel_Sequences._default.concat) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat) LayerTypeType)) (= (type StartFuel_Sequences._default.concat3) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat3) LayerTypeType)) (= (type StartFuel_Sequences._default.concatSeq) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concatSeq) LayerTypeType)) (= (type StartFuel_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuel_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexIterate) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuel_Sequences._default.Zip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Zip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Unzip) LayerTypeType)) (= (type StartFuel_Sequences._default.Flatten) LayerTypeType)) (= (type StartFuel_Sequences._default.fill) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.fill) LayerTypeType)) (= (type StartFuel_Maps._default.MapRemoveStrong) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemoveStrong) LayerTypeType)) (= (type StartFuel_Maps._default.MapRemove1Strong) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemove1Strong) LayerTypeType)) (= (type StartFuel_Maps._default.IMapRemove) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapRemove) LayerTypeType)) (= (type StartFuel_Maps._default.IMapRemove1) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapRemove1) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapDisjointUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnionPreferA) LayerTypeType)) (= (type StartFuel_Maps._default.MapUnionPreferB) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnionPreferB) LayerTypeType)) (= (type StartFuel_Maps._default.MapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnionPreferA) LayerTypeType)) (= (type StartFuel_Maps._default.IMapUnionPreferB) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnionPreferB) LayerTypeType)) (= (type StartFuel_Maps._default.IMapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnion) LayerTypeType)) (= (type StartFuel_Maps._default.MapDisjointUnion3) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapDisjointUnion3) LayerTypeType)) (= (type StartFuelAssert_SeqComparison._default.lte) LayerTypeType)) (= (type StartFuel_Char_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuelAssert_Char_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuel_Char_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuelAssert_Char_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuel_Char_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuelAssert_Char_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuel_Char_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Char_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Char_Order._default.minimum) LayerTypeType)) (= (type StartFuel_Char_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Char_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Char_Order._default.maximum) LayerTypeType)) (= (type StartFuel_Char_Order._default.maximumOpt) LayerTypeType)) (= (type StartFuelAssert_Char_Order._default.maximumOpt) LayerTypeType)) (= (type $Heap@@45) (MapType0Type refType MapType1Type))) (= (type |shape#0@@15|) (SeqType BoxType))) (= (type |fseqs#0|) (SeqType BoxType))))
(push 1)
(set-info :boogie-vc-id Impl$$Char__Order.__default.FlattenStrictlySorted)
(assert (not (let ((anon8_correct  (=> (! (and %lbl%+0 true) :lblpos +0) true))) (let ((anon14_Else_correct  (=> (! (and %lbl%+1 true) :lblpos +1) (=> (<= |jl#0@0| |il#0@0|) (=> (and (and (<= 0 |il#0@0|) (< |il#0@0| (|Seq#Length| |seqs#0@@11|))) (and (= |run##0@0| ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@11| |il#0@0|))) (forall (($o@@69 T@U) ($f@@45 T@U) ) (! (let ((alpha@@52 (FieldTypeInv0 (type $f@@45)))) (=> (and (and (= (type $o@@69) refType) (= (type $f@@45) (FieldType alpha@@52))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@69 $f@@45)))) :qid |totalord.589:34| :skolemid |8874| :no-pattern (type $o@@69) :no-pattern (type $f@@45) :no-pattern (U_2_int $o@@69) :no-pattern (U_2_bool $o@@69) :no-pattern (U_2_int $f@@45) :no-pattern (U_2_bool $f@@45) )))) (and (! (or %lbl%@2 (Char__Order.__default.IsStrictlySorted StartFuelAssert_Char_Order._default.IsStrictlySorted |run##0@0|)) :lblneg @2) (=> (Char__Order.__default.IsStrictlySorted StartFuelAssert_Char_Order._default.IsStrictlySorted |run##0@0|) (and (! (or %lbl%@3 (<= (LitInt 0) |io#0@0|)) :lblneg @3) (=> (<= (LitInt 0) |io#0@0|) (and (! (or %lbl%@4 (< |io#0@0| |jo#0@0|)) :lblneg @4) (=> (< |io#0@0| |jo#0@0|) (and (! (or %lbl%@5 (< |jo#0@0| (|Seq#Length| |run##0@0|))) :lblneg @5) (=> (< |jo#0@0| (|Seq#Length| |run##0@0|)) (=> (and (and (and ($IsGoodHeap $Heap@5) ($IsHeapAnchor $Heap@5)) (|Char__Order.__default.lt#canCall| ($Unbox charType (|Seq#Index| |run##0@0| |io#0@0|)) ($Unbox charType (|Seq#Index| |run##0@0| |jo#0@0|)))) (and (and (|Char__Order.__default.lt#canCall| ($Unbox charType (|Seq#Index| |run##0@0| |io#0@0|)) ($Unbox charType (|Seq#Index| |run##0@0| |jo#0@0|))) (and (Char__Order.__default.lt ($Unbox charType (|Seq#Index| |run##0@0| |io#0@0|)) ($Unbox charType (|Seq#Index| |run##0@0| |jo#0@0|))) (and (Char__Order.__default.lte ($Unbox charType (|Seq#Index| |run##0@0| |io#0@0|)) ($Unbox charType (|Seq#Index| |run##0@0| |jo#0@0|))) (not (= ($Unbox charType (|Seq#Index| |run##0@0| |io#0@0|)) ($Unbox charType (|Seq#Index| |run##0@0| |jo#0@0|))))))) (= $Heap@4 $Heap@5))) anon8_correct)))))))))))))) (let ((anon14_Then_correct  (=> (! (and %lbl%+6 true) :lblpos +6) (=> (< |il#0@0| |jl#0@0|) anon8_correct)))) (let ((anon5_correct  (=> (! (and %lbl%+7 true) :lblpos +7) (=> (and (and (and (and (<= (LitInt 0) |i#6@0|) (< |i#6@0| |j#3@0|)) (< |j#3@0| (|Seq#Length| |fseqs#0@0|))) (<= (LitInt 0) |il#0@0|)) (and (and (<= (LitInt 0) |io#0@0|) ($IsAlloc |shape#0@0| (TSeq Tclass._System.nat) $Heap@0)) (and ($Is (int_2_U |i#6@0|) Tclass._System.nat) ($IsAlloc (int_2_U |i#6@0|) Tclass._System.nat $Heap@0)))) (and (! (or %lbl%@8 (< |i#6@0| (Sequences.__default.FlattenLength StartFuelAssert_Sequences._default.FlattenLength |shape#0@0|))) :lblneg @8) (=> (and (< |i#6@0| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@0|)) (|Sequences.__default.UnflattenIndex#canCall| |shape#0@0| |i#6@0|)) (=> (and (and (_System.Tuple2.___hMake2_q (Sequences.__default.UnflattenIndex ($LS $LZ) |shape#0@0| |i#6@0|)) (= |let#0#0#0| (Sequences.__default.UnflattenIndex ($LS $LZ) |shape#0@0| |i#6@0|))) (and (|Sequences.__default.UnflattenIndex#canCall| |shape#0@0| |i#6@0|) ($Is |let#0#0#0| (Tclass._System.Tuple2 Tclass._System.nat Tclass._System.nat)))) (=> (and (and (and (_System.Tuple2.___hMake2_q |let#0#0#0|) (_System.Tuple2.___hMake2_q |let#0#0#0|)) (and (= (|#_System._tuple#2._#Make2| ($Box (int_2_U |il#0@0|)) ($Box (int_2_U |io#0@0|))) |let#0#0#0|) (<= (LitInt 0) |jl#0@0|))) (and (and (<= (LitInt 0) |jo#0@0|) ($IsAlloc |shape#0@0| (TSeq Tclass._System.nat) $Heap@0)) (and ($Is (int_2_U |j#3@0|) Tclass._System.nat) ($IsAlloc (int_2_U |j#3@0|) Tclass._System.nat $Heap@0)))) (and (! (or %lbl%@9 (< |j#3@0| (Sequences.__default.FlattenLength StartFuelAssert_Sequences._default.FlattenLength |shape#0@0|))) :lblneg @9) (=> (< |j#3@0| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@0|)) (=> (and (and (|Sequences.__default.UnflattenIndex#canCall| |shape#0@0| |j#3@0|) (_System.Tuple2.___hMake2_q (Sequences.__default.UnflattenIndex ($LS $LZ) |shape#0@0| |j#3@0|))) (and (= |let#1#0#0| (Sequences.__default.UnflattenIndex ($LS $LZ) |shape#0@0| |j#3@0|)) (|Sequences.__default.UnflattenIndex#canCall| |shape#0@0| |j#3@0|))) (=> (and (and (and (and (and (and (and ($Is |let#1#0#0| (Tclass._System.Tuple2 Tclass._System.nat Tclass._System.nat)) (_System.Tuple2.___hMake2_q |let#1#0#0|)) (and (_System.Tuple2.___hMake2_q |let#1#0#0|) (= (|#_System._tuple#2._#Make2| ($Box (int_2_U |jl#0@0|)) ($Box (int_2_U |jo#0@0|))) |let#1#0#0|))) (and (and ($Is (int_2_U |i#6@0|) Tclass._System.nat) (forall (($o@@70 T@U) ($f@@46 T@U) ) (! (let ((alpha@@53 (FieldTypeInv0 (type $f@@46)))) (=> (and (and (= (type $o@@70) refType) (= (type $f@@46) (FieldType alpha@@53))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@70 $f@@46)))) :qid |totalord.584:34| :skolemid |8871| :no-pattern (type $o@@70) :no-pattern (type $f@@46) :no-pattern (U_2_int $o@@70) :no-pattern (U_2_bool $o@@70) :no-pattern (U_2_int $f@@46) :no-pattern (U_2_bool $f@@46) ))) (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)))) (and (and (and (|Sequences.__default.FlattenShape#canCall| TChar |seqs#0@@11|) (|Sequences.__default.UnflattenIndex#canCall| (Sequences.__default.FlattenShape TChar StartFuel_Sequences._default.FlattenShape |seqs#0@@11|) |i#6@0|)) (_System.Tuple2.___hMake2_q (Sequences.__default.UnflattenIndex ($LS $LZ) (Sequences.__default.FlattenShape TChar StartFuel_Sequences._default.FlattenShape |seqs#0@@11|) |i#6@0|))) (< (U_2_int ($Unbox intType (_System.Tuple2._0 (Sequences.__default.UnflattenIndex ($LS ($LS $LZ)) (Sequences.__default.FlattenShape TChar StartFuelAssert_Sequences._default.FlattenShape |seqs#0@@11|) |i#6@0|)))) (|Seq#Length| |seqs#0@@11|)))) (and (and (and (and (|Sequences.__default.FlattenShape#canCall| TChar |seqs#0@@11|) (|Sequences.__default.UnflattenIndex#canCall| (Sequences.__default.FlattenShape TChar StartFuel_Sequences._default.FlattenShape |seqs#0@@11|) |i#6@0|)) (_System.Tuple2.___hMake2_q (Sequences.__default.UnflattenIndex ($LS $LZ) (Sequences.__default.FlattenShape TChar StartFuel_Sequences._default.FlattenShape |seqs#0@@11|) |i#6@0|))) (and (and (|Sequences.__default.FlattenShape#canCall| TChar |seqs#0@@11|) (|Sequences.__default.UnflattenIndex#canCall| (Sequences.__default.FlattenShape TChar StartFuel_Sequences._default.FlattenShape |seqs#0@@11|) |i#6@0|)) (_System.Tuple2.___hMake2_q (Sequences.__default.UnflattenIndex ($LS $LZ) (Sequences.__default.FlattenShape TChar StartFuel_Sequences._default.FlattenShape |seqs#0@@11|) |i#6@0|)))) (< (U_2_int ($Unbox intType (_System.Tuple2._1 (Sequences.__default.UnflattenIndex ($LS ($LS $LZ)) (Sequences.__default.FlattenShape TChar StartFuelAssert_Sequences._default.FlattenShape |seqs#0@@11|) |i#6@0|)))) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@11| (U_2_int ($Unbox intType (_System.Tuple2._0 (Sequences.__default.UnflattenIndex ($LS ($LS $LZ)) (Sequences.__default.FlattenShape TChar StartFuelAssert_Sequences._default.FlattenShape |seqs#0@@11|) |i#6@0|)))))))))) (and (and (and (and (and (|Sequences.__default.Flatten#canCall| TChar |seqs#0@@11|) (and (and (and (|Sequences.__default.FlattenShape#canCall| TChar |seqs#0@@11|) (|Sequences.__default.UnflattenIndex#canCall| (Sequences.__default.FlattenShape TChar StartFuel_Sequences._default.FlattenShape |seqs#0@@11|) |i#6@0|)) (_System.Tuple2.___hMake2_q (Sequences.__default.UnflattenIndex ($LS $LZ) (Sequences.__default.FlattenShape TChar StartFuel_Sequences._default.FlattenShape |seqs#0@@11|) |i#6@0|))) (and (and (|Sequences.__default.FlattenShape#canCall| TChar |seqs#0@@11|) (|Sequences.__default.UnflattenIndex#canCall| (Sequences.__default.FlattenShape TChar StartFuel_Sequences._default.FlattenShape |seqs#0@@11|) |i#6@0|)) (_System.Tuple2.___hMake2_q (Sequences.__default.UnflattenIndex ($LS $LZ) (Sequences.__default.FlattenShape TChar StartFuel_Sequences._default.FlattenShape |seqs#0@@11|) |i#6@0|))))) (and (= (|Seq#Index| (Sequences.__default.Flatten TChar StartFuelAssert_Sequences._default.Flatten |seqs#0@@11|) |i#6@0|) (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@11| (U_2_int ($Unbox intType (_System.Tuple2._0 (Sequences.__default.UnflattenIndex ($LS ($LS $LZ)) (Sequences.__default.FlattenShape TChar StartFuelAssert_Sequences._default.FlattenShape |seqs#0@@11|) |i#6@0|)))))) (U_2_int ($Unbox intType (_System.Tuple2._1 (Sequences.__default.UnflattenIndex ($LS ($LS $LZ)) (Sequences.__default.FlattenShape TChar StartFuelAssert_Sequences._default.FlattenShape |seqs#0@@11|) |i#6@0|)))))) (= $Heap@0 $Heap@2))) (and (and ($Is (int_2_U |j#3@0|) Tclass._System.nat) (forall (($o@@71 T@U) ($f@@47 T@U) ) (! (let ((alpha@@54 (FieldTypeInv0 (type $f@@47)))) (=> (and (and (= (type $o@@71) refType) (= (type $f@@47) (FieldType alpha@@54))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@71 $f@@47)))) :qid |totalord.585:34| :skolemid |8872| :no-pattern (type $o@@71) :no-pattern (type $f@@47) :no-pattern (U_2_int $o@@71) :no-pattern (U_2_bool $o@@71) :no-pattern (U_2_int $f@@47) :no-pattern (U_2_bool $f@@47) ))) (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)))) (and (and (and (|Sequences.__default.FlattenShape#canCall| TChar |seqs#0@@11|) (|Sequences.__default.UnflattenIndex#canCall| (Sequences.__default.FlattenShape TChar StartFuel_Sequences._default.FlattenShape |seqs#0@@11|) |j#3@0|)) (_System.Tuple2.___hMake2_q (Sequences.__default.UnflattenIndex ($LS $LZ) (Sequences.__default.FlattenShape TChar StartFuel_Sequences._default.FlattenShape |seqs#0@@11|) |j#3@0|))) (< (U_2_int ($Unbox intType (_System.Tuple2._0 (Sequences.__default.UnflattenIndex ($LS ($LS $LZ)) (Sequences.__default.FlattenShape TChar StartFuelAssert_Sequences._default.FlattenShape |seqs#0@@11|) |j#3@0|)))) (|Seq#Length| |seqs#0@@11|)))) (and (and (and (and (|Sequences.__default.FlattenShape#canCall| TChar |seqs#0@@11|) (|Sequences.__default.UnflattenIndex#canCall| (Sequences.__default.FlattenShape TChar StartFuel_Sequences._default.FlattenShape |seqs#0@@11|) |j#3@0|)) (_System.Tuple2.___hMake2_q (Sequences.__default.UnflattenIndex ($LS $LZ) (Sequences.__default.FlattenShape TChar StartFuel_Sequences._default.FlattenShape |seqs#0@@11|) |j#3@0|))) (and (and (|Sequences.__default.FlattenShape#canCall| TChar |seqs#0@@11|) (|Sequences.__default.UnflattenIndex#canCall| (Sequences.__default.FlattenShape TChar StartFuel_Sequences._default.FlattenShape |seqs#0@@11|) |j#3@0|)) (_System.Tuple2.___hMake2_q (Sequences.__default.UnflattenIndex ($LS $LZ) (Sequences.__default.FlattenShape TChar StartFuel_Sequences._default.FlattenShape |seqs#0@@11|) |j#3@0|)))) (< (U_2_int ($Unbox intType (_System.Tuple2._1 (Sequences.__default.UnflattenIndex ($LS ($LS $LZ)) (Sequences.__default.FlattenShape TChar StartFuelAssert_Sequences._default.FlattenShape |seqs#0@@11|) |j#3@0|)))) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@11| (U_2_int ($Unbox intType (_System.Tuple2._0 (Sequences.__default.UnflattenIndex ($LS ($LS $LZ)) (Sequences.__default.FlattenShape TChar StartFuelAssert_Sequences._default.FlattenShape |seqs#0@@11|) |j#3@0|))))))))))) (and (and (and (and (and (and (|Sequences.__default.Flatten#canCall| TChar |seqs#0@@11|) (and (and (and (|Sequences.__default.FlattenShape#canCall| TChar |seqs#0@@11|) (|Sequences.__default.UnflattenIndex#canCall| (Sequences.__default.FlattenShape TChar StartFuel_Sequences._default.FlattenShape |seqs#0@@11|) |j#3@0|)) (_System.Tuple2.___hMake2_q (Sequences.__default.UnflattenIndex ($LS $LZ) (Sequences.__default.FlattenShape TChar StartFuel_Sequences._default.FlattenShape |seqs#0@@11|) |j#3@0|))) (and (and (|Sequences.__default.FlattenShape#canCall| TChar |seqs#0@@11|) (|Sequences.__default.UnflattenIndex#canCall| (Sequences.__default.FlattenShape TChar StartFuel_Sequences._default.FlattenShape |seqs#0@@11|) |j#3@0|)) (_System.Tuple2.___hMake2_q (Sequences.__default.UnflattenIndex ($LS $LZ) (Sequences.__default.FlattenShape TChar StartFuel_Sequences._default.FlattenShape |seqs#0@@11|) |j#3@0|))))) (= (|Seq#Index| (Sequences.__default.Flatten TChar StartFuelAssert_Sequences._default.Flatten |seqs#0@@11|) |j#3@0|) (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@11| (U_2_int ($Unbox intType (_System.Tuple2._0 (Sequences.__default.UnflattenIndex ($LS ($LS $LZ)) (Sequences.__default.FlattenShape TChar StartFuelAssert_Sequences._default.FlattenShape |seqs#0@@11|) |j#3@0|)))))) (U_2_int ($Unbox intType (_System.Tuple2._1 (Sequences.__default.UnflattenIndex ($LS ($LS $LZ)) (Sequences.__default.FlattenShape TChar StartFuelAssert_Sequences._default.FlattenShape |seqs#0@@11|) |j#3@0|))))))) (and (= $Heap@2 $Heap@3) ($Is (int_2_U |i#6@0|) Tclass._System.nat))) (and (and ($Is (int_2_U |j#3@0|) Tclass._System.nat) (forall (($o@@72 T@U) ($f@@48 T@U) ) (! (let ((alpha@@55 (FieldTypeInv0 (type $f@@48)))) (=> (and (and (= (type $o@@72) refType) (= (type $f@@48) (FieldType alpha@@55))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@72 $f@@48)))) :qid |totalord.586:33| :skolemid |8873| :no-pattern (type $o@@72) :no-pattern (type $f@@48) :no-pattern (U_2_int $o@@72) :no-pattern (U_2_bool $o@@72) :no-pattern (U_2_int $f@@48) :no-pattern (U_2_bool $f@@48) ))) (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)))) (and (and (and (|Sequences.__default.UnflattenIndex#canCall| |shape#0@0| |i#6@0|) (_System.Tuple2.___hMake2_q (Sequences.__default.UnflattenIndex ($LS $LZ) |shape#0@0| |i#6@0|))) (and (|Sequences.__default.UnflattenIndex#canCall| |shape#0@0| |j#3@0|) (_System.Tuple2.___hMake2_q (Sequences.__default.UnflattenIndex ($LS $LZ) |shape#0@0| |j#3@0|)))) (<= (U_2_int ($Unbox intType (_System.Tuple2._0 (Sequences.__default.UnflattenIndex ($LS ($LS $LZ)) |shape#0@0| |i#6@0|)))) (U_2_int ($Unbox intType (_System.Tuple2._0 (Sequences.__default.UnflattenIndex ($LS ($LS $LZ)) |shape#0@0| |j#3@0|))))))) (and (and (and (and (|Sequences.__default.UnflattenIndex#canCall| |shape#0@0| |i#6@0|) (_System.Tuple2.___hMake2_q (Sequences.__default.UnflattenIndex ($LS $LZ) |shape#0@0| |i#6@0|))) (and (|Sequences.__default.UnflattenIndex#canCall| |shape#0@0| |j#3@0|) (_System.Tuple2.___hMake2_q (Sequences.__default.UnflattenIndex ($LS $LZ) |shape#0@0| |j#3@0|)))) (=> (= (U_2_int ($Unbox intType (_System.Tuple2._0 (Sequences.__default.UnflattenIndex ($LS $LZ) |shape#0@0| |i#6@0|)))) (U_2_int ($Unbox intType (_System.Tuple2._0 (Sequences.__default.UnflattenIndex ($LS $LZ) |shape#0@0| |j#3@0|))))) (and (and (|Sequences.__default.UnflattenIndex#canCall| |shape#0@0| |i#6@0|) (_System.Tuple2.___hMake2_q (Sequences.__default.UnflattenIndex ($LS $LZ) |shape#0@0| |i#6@0|))) (and (|Sequences.__default.UnflattenIndex#canCall| |shape#0@0| |j#3@0|) (_System.Tuple2.___hMake2_q (Sequences.__default.UnflattenIndex ($LS $LZ) |shape#0@0| |j#3@0|)))))) (and (=> (= (U_2_int ($Unbox intType (_System.Tuple2._0 (Sequences.__default.UnflattenIndex ($LS $LZ) |shape#0@0| |i#6@0|)))) (U_2_int ($Unbox intType (_System.Tuple2._0 (Sequences.__default.UnflattenIndex ($LS $LZ) |shape#0@0| |j#3@0|))))) (< (U_2_int ($Unbox intType (_System.Tuple2._1 (Sequences.__default.UnflattenIndex ($LS ($LS $LZ)) |shape#0@0| |i#6@0|)))) (U_2_int ($Unbox intType (_System.Tuple2._1 (Sequences.__default.UnflattenIndex ($LS ($LS $LZ)) |shape#0@0| |j#3@0|)))))) (= $Heap@3 $Heap@4))))) (and anon14_Then_correct anon14_Else_correct))))))))))))) (let ((anon13_Else_correct  (=> (! (and %lbl%+10 true) :lblpos +10) (=> (not (and (<= (LitInt 0) |i#6@0|) (< |i#6@0| |j#3@0|))) anon5_correct)))) (let ((anon13_Then_correct  (=> (! (and %lbl%+11 true) :lblpos +11) (=> (and (<= (LitInt 0) |i#6@0|) (< |i#6@0| |j#3@0|)) anon5_correct)))) (let ((anon12_Else_correct  (=> (! (and %lbl%+12 true) :lblpos +12) (=> (< |i#6@0| (LitInt 0)) (and anon13_Then_correct anon13_Else_correct))))) (let ((anon12_Then_correct  (=> (! (and %lbl%+13 true) :lblpos +13) (=> (<= (LitInt 0) |i#6@0|) (and anon13_Then_correct anon13_Else_correct))))) (let ((anon11_Then_correct  (=> (! (and %lbl%+14 true) :lblpos +14) (and anon12_Then_correct anon12_Else_correct)))) (let ((GeneratedUnifiedExit_correct  (=> (! (and %lbl%+15 true) :lblpos +15) (! (or %lbl%@16  (=> false (Char__Order.__default.IsStrictlySorted StartFuelAssert_Char_Order._default.IsStrictlySorted (Sequences.__default.Flatten TChar StartFuelAssert_Sequences._default.Flatten |seqs#0@@11|)))) :lblneg @16)))) (let ((anon11_Else_correct  (=> (! (and %lbl%+17 true) :lblpos +17) (=> (and (and (and (forall ((|i#7| Int) (|j#4@@1| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#7|) (< |i#7| |j#4@@1|)) (< |j#4@@1| (|Seq#Length| |fseqs#0@0|))) (Char__Order.__default.lt ($Unbox charType (|Seq#Index| |fseqs#0@0| |i#7|)) ($Unbox charType (|Seq#Index| |fseqs#0@0| |j#4@@1|)))) :qid |totalord.579:12| :skolemid |8875| :pattern ( ($Unbox charType (|Seq#Index| |fseqs#0@0| |j#4@@1|)) ($Unbox charType (|Seq#Index| |fseqs#0@0| |i#7|))) )) (forall (($o@@73 T@U) ($f@@49 T@U) ) (! (let ((alpha@@56 (FieldTypeInv0 (type $f@@49)))) (=> (and (and (= (type $o@@73) refType) (= (type $f@@49) (FieldType alpha@@56))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@73 $f@@49)))) :qid |totalord.592:28| :skolemid |8876| :no-pattern (type $o@@73) :no-pattern (type $f@@49) :no-pattern (U_2_int $o@@73) :no-pattern (U_2_bool $o@@73) :no-pattern (U_2_int $f@@49) :no-pattern (U_2_bool $f@@49) ))) (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1))) (and (and (= $Heap@0 $Heap@1) (= StartFuel_Char_Order._default.IsStrictlySorted ($LS MoreFuel_Char_Order._default.IsStrictlySorted0))) (and (= StartFuelAssert_Char_Order._default.IsStrictlySorted ($LS ($LS MoreFuel_Char_Order._default.IsStrictlySorted0))) (= (AsFuelBottom MoreFuel_Char_Order._default.IsStrictlySorted0) MoreFuel_Char_Order._default.IsStrictlySorted0)))) GeneratedUnifiedExit_correct)))) (let ((anon0_correct  (=> (! (and %lbl%+18 true) :lblpos +18) (=> (= (AsFuelBottom StartFuel_Sequences._default.NoDupes) StartFuel_Sequences._default.NoDupes) (=> (and (= (AsFuelBottom StartFuelAssert_Sequences._default.NoDupes) StartFuelAssert_Sequences._default.NoDupes) (= (AsFuelBottom StartFuel_Sequences._default.Range) StartFuel_Sequences._default.Range)) (=> (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Range) StartFuelAssert_Sequences._default.Range) (= (AsFuelBottom StartFuel_Sequences._default.ApplyOpaque) StartFuel_Sequences._default.ApplyOpaque)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.ApplyOpaque) StartFuelAssert_Sequences._default.ApplyOpaque) (= (AsFuelBottom StartFuel_Sequences._default.remove) StartFuel_Sequences._default.remove))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.remove) StartFuelAssert_Sequences._default.remove) (= (AsFuelBottom StartFuel_Sequences._default.insert) StartFuel_Sequences._default.insert)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.insert) StartFuelAssert_Sequences._default.insert) (= (AsFuelBottom StartFuel_Sequences._default.replace1with2) StartFuel_Sequences._default.replace1with2)))) (=> (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.replace1with2) StartFuelAssert_Sequences._default.replace1with2) (= (AsFuelBottom StartFuel_Sequences._default.replace2with1) StartFuel_Sequences._default.replace2with1)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.replace2with1) StartFuelAssert_Sequences._default.replace2with1) (= (AsFuelBottom StartFuel_Sequences._default.concat) StartFuel_Sequences._default.concat))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concat) StartFuelAssert_Sequences._default.concat) (= (AsFuelBottom StartFuel_Sequences._default.concat3) StartFuel_Sequences._default.concat3)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concat3) StartFuelAssert_Sequences._default.concat3) (= (AsFuelBottom StartFuel_Sequences._default.concatSeq) StartFuel_Sequences._default.concatSeq)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concatSeq) StartFuelAssert_Sequences._default.concatSeq) (= (AsFuelBottom StartFuel_Sequences._default.IsPrefix) StartFuel_Sequences._default.IsPrefix)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.IsPrefix) StartFuelAssert_Sequences._default.IsPrefix) (= (AsFuelBottom StartFuel_Sequences._default.IsSuffix) StartFuel_Sequences._default.IsSuffix))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.IsSuffix) StartFuelAssert_Sequences._default.IsSuffix) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexIterate) StartFuel_Sequences._default.SeqIndexIterate)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexIterate) StartFuelAssert_Sequences._default.SeqIndexIterate) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndex) StartFuel_Sequences._default.SeqIndex))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndex) StartFuelAssert_Sequences._default.SeqIndex) (= (AsFuelBottom StartFuel_Sequences._default.SeqOfLength) StartFuel_Sequences._default.SeqOfLength)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqOfLength) StartFuelAssert_Sequences._default.SeqOfLength) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexUpdate) StartFuel_Sequences._default.SeqIndexUpdate))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexUpdate) StartFuelAssert_Sequences._default.SeqIndexUpdate) (= (AsFuelBottom StartFuel_Sequences._default.Zip) StartFuel_Sequences._default.Zip)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Zip) StartFuelAssert_Sequences._default.Zip) (= (AsFuelBottom StartFuel_Sequences._default.Unzip) StartFuel_Sequences._default.Unzip)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Unzip) StartFuelAssert_Sequences._default.Unzip) (= (AsFuelBottom StartFuel_Sequences._default.FlattenShape) StartFuel_Sequences._default.FlattenShape)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenShape) StartFuelAssert_Sequences._default.FlattenShape) (= (AsFuelBottom StartFuel_Sequences._default.FlattenLength) StartFuel_Sequences._default.FlattenLength))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenLength) StartFuelAssert_Sequences._default.FlattenLength) (= (AsFuelBottom StartFuel_Sequences._default.Flatten) StartFuel_Sequences._default.Flatten)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Flatten) StartFuelAssert_Sequences._default.Flatten) (= (AsFuelBottom StartFuel_Sequences._default.fill) StartFuel_Sequences._default.fill)))))) (=> (and (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.fill) StartFuelAssert_Sequences._default.fill) (= (AsFuelBottom StartFuel_Maps._default.MapRemove) StartFuel_Maps._default.MapRemove)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove) StartFuelAssert_Maps._default.MapRemove) (= (AsFuelBottom StartFuel_Maps._default.MapRemoveStrong) StartFuel_Maps._default.MapRemoveStrong))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemoveStrong) StartFuelAssert_Maps._default.MapRemoveStrong) (= (AsFuelBottom StartFuel_Maps._default.MapRemove1) StartFuel_Maps._default.MapRemove1)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove1) StartFuelAssert_Maps._default.MapRemove1) (= (AsFuelBottom StartFuel_Maps._default.MapRemove1Strong) StartFuel_Maps._default.MapRemove1Strong)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove1Strong) StartFuelAssert_Maps._default.MapRemove1Strong) (= (AsFuelBottom StartFuel_Maps._default.IMapRemove) StartFuel_Maps._default.IMapRemove)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove) StartFuelAssert_Maps._default.IMapRemove) (= (AsFuelBottom StartFuel_Maps._default.IMapRemove1) StartFuel_Maps._default.IMapRemove1))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove1) StartFuelAssert_Maps._default.IMapRemove1) (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion) StartFuel_Maps._default.MapDisjointUnion)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion) StartFuelAssert_Maps._default.MapDisjointUnion) (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferA) StartFuel_Maps._default.MapUnionPreferA))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferA) StartFuelAssert_Maps._default.MapUnionPreferA) (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferB) StartFuel_Maps._default.MapUnionPreferB)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferB) StartFuelAssert_Maps._default.MapUnionPreferB) (= (AsFuelBottom StartFuel_Maps._default.MapUnion) StartFuel_Maps._default.MapUnion))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnion) StartFuelAssert_Maps._default.MapUnion) (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferA) StartFuel_Maps._default.IMapUnionPreferA)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferA) StartFuelAssert_Maps._default.IMapUnionPreferA) (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferB) StartFuel_Maps._default.IMapUnionPreferB)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferB) StartFuelAssert_Maps._default.IMapUnionPreferB) (= (AsFuelBottom StartFuel_Maps._default.IMapUnion) StartFuel_Maps._default.IMapUnion)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnion) StartFuelAssert_Maps._default.IMapUnion) (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion3) StartFuel_Maps._default.MapDisjointUnion3))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion3) StartFuelAssert_Maps._default.MapDisjointUnion3) (= (AsFuelBottom StartFuel_SeqComparison._default.lte) StartFuel_SeqComparison._default.lte)) (and (= (AsFuelBottom StartFuelAssert_SeqComparison._default.lte) StartFuelAssert_SeqComparison._default.lte) (= (AsFuelBottom StartFuel_Char_Order._default.binarySearchIndexOfFirstKeyGte) StartFuel_Char_Order._default.binarySearchIndexOfFirstKeyGte)))))) (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Char_Order._default.binarySearchIndexOfFirstKeyGte) StartFuelAssert_Char_Order._default.binarySearchIndexOfFirstKeyGte) (= (AsFuelBottom StartFuel_Char_Order._default.binarySearchIndexOfFirstKeyGt) StartFuel_Char_Order._default.binarySearchIndexOfFirstKeyGt)) (and (= (AsFuelBottom StartFuelAssert_Char_Order._default.binarySearchIndexOfFirstKeyGt) StartFuelAssert_Char_Order._default.binarySearchIndexOfFirstKeyGt) (= (AsFuelBottom StartFuel_Char_Order._default.NotMinimum) StartFuel_Char_Order._default.NotMinimum))) (and (and (= (AsFuelBottom StartFuelAssert_Char_Order._default.NotMinimum) StartFuelAssert_Char_Order._default.NotMinimum) (= (AsFuelBottom StartFuel_Char_Order._default.SortedSeqForMap) StartFuel_Char_Order._default.SortedSeqForMap)) (and (= (AsFuelBottom StartFuelAssert_Char_Order._default.SortedSeqForMap) StartFuelAssert_Char_Order._default.SortedSeqForMap) (= (AsFuelBottom StartFuel_Char_Order._default.minimum) StartFuel_Char_Order._default.minimum)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Char_Order._default.minimum) StartFuelAssert_Char_Order._default.minimum) (= (AsFuelBottom StartFuel_Char_Order._default.minimumOpt) StartFuel_Char_Order._default.minimumOpt)) (and (= (AsFuelBottom StartFuelAssert_Char_Order._default.minimumOpt) StartFuelAssert_Char_Order._default.minimumOpt) (= (AsFuelBottom StartFuel_Char_Order._default.maximum) StartFuel_Char_Order._default.maximum))) (and (and (= (AsFuelBottom StartFuelAssert_Char_Order._default.maximum) StartFuelAssert_Char_Order._default.maximum) (= (AsFuelBottom StartFuel_Char_Order._default.maximumOpt) StartFuel_Char_Order._default.maximumOpt)) (and (= (AsFuelBottom StartFuelAssert_Char_Order._default.maximumOpt) StartFuelAssert_Char_Order._default.maximumOpt) (= (AsFuelBottom StartFuel_Char_Order._default.IsSorted) StartFuel_Char_Order._default.IsSorted))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Char_Order._default.IsSorted) StartFuelAssert_Char_Order._default.IsSorted) (= (AsFuelBottom StartFuel_Char_Order._default.IsStrictlySorted) StartFuel_Char_Order._default.IsStrictlySorted)) (and (= (AsFuelBottom StartFuelAssert_Char_Order._default.IsStrictlySorted) StartFuelAssert_Char_Order._default.IsStrictlySorted) (= $_Frame@0 (|lambda#25| null $Heap@@45 alloc false)))) (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (= $Heap@@45 $Heap@0) (forall ((|$ih#seqs0#0| T@U) ) (!  (=> (= (type |$ih#seqs0#0|) (SeqType BoxType)) (=> (and (and ($Is |$ih#seqs0#0| (TSeq (TSeq TChar))) (and (forall ((|i#4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#4|) (< |i#4| (|Seq#Length| |$ih#seqs0#0|))) (Char__Order.__default.IsStrictlySorted StartFuel_Char_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (|Seq#Index| |$ih#seqs0#0| |i#4|))))) :qid |totalord.573:21| :skolemid |8868| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |$ih#seqs0#0| |i#4|))) )) (forall ((|i#5@@6| Int) (|j#2| Int) (|k1#2| T@U) (|k2#2| T@U) ) (!  (=> (and (and (= (type |k1#2|) charType) (= (type |k2#2|) charType)) (and ($Is |k1#2| TChar) ($Is |k2#2| TChar))) (=> (and (and (and (and (<= (LitInt 0) |i#5@@6|) (< |i#5@@6| |j#2|)) (< |j#2| (|Seq#Length| |$ih#seqs0#0|))) (|Seq#Contains| ($Unbox (SeqType BoxType) (|Seq#Index| |$ih#seqs0#0| |i#5@@6|)) ($Box |k1#2|))) (|Seq#Contains| ($Unbox (SeqType BoxType) (|Seq#Index| |$ih#seqs0#0| |j#2|)) ($Box |k2#2|))) (Char__Order.__default.lt |k1#2| |k2#2|))) :qid |totalord.574:21| :skolemid |8869| :pattern ( (Char__Order.__default.lt |k1#2| |k2#2|) ($Unbox (SeqType BoxType) (|Seq#Index| |$ih#seqs0#0| |j#2|)) ($Unbox (SeqType BoxType) (|Seq#Index| |$ih#seqs0#0| |i#5@@6|))) )))) (< (|Seq#Rank| |$ih#seqs0#0|) (|Seq#Rank| |seqs#0@@11|))) (Char__Order.__default.IsStrictlySorted StartFuel_Char_Order._default.IsStrictlySorted (Sequences.__default.Flatten TChar StartFuel_Sequences._default.Flatten |$ih#seqs0#0|)))) :qid |totalord.572:31| :skolemid |8870| :no-pattern (type |$ih#seqs0#0|) :no-pattern (U_2_int |$ih#seqs0#0|) :no-pattern (U_2_bool |$ih#seqs0#0|) ))))) (and (and (and ($IsAlloc |seqs#0@@11| (TSeq (TSeq TChar)) $Heap@0) (|Sequences.__default.FlattenShape#canCall| TChar |seqs#0@@11|)) (and (|Sequences.__default.FlattenShape#canCall| TChar |seqs#0@@11|) (= |shape#0@0| (Sequences.__default.FlattenShape TChar StartFuel_Sequences._default.FlattenShape |seqs#0@@11|)))) (and (and ($IsAlloc |seqs#0@@11| (TSeq (TSeq TChar)) $Heap@0) (|Sequences.__default.Flatten#canCall| TChar |seqs#0@@11|)) (and (|Sequences.__default.Flatten#canCall| TChar |seqs#0@@11|) (= |fseqs#0@0| (Sequences.__default.Flatten TChar StartFuel_Sequences._default.Flatten |seqs#0@@11|)))))))) (and anon11_Then_correct anon11_Else_correct))))))))) (let ((PreconditionGeneratedEntry_correct  (=> (! (and %lbl%+19 true) :lblpos +19) (=> (and ($IsGoodHeap $Heap@@45) ($IsHeapAnchor $Heap@@45)) (=> (and (and ($Is |seqs#0@@11| (TSeq (TSeq TChar))) ($IsAlloc |seqs#0@@11| (TSeq (TSeq TChar)) $Heap@@45)) (and ($Is |shape#0@@15| (TSeq Tclass._System.nat)) ($IsAlloc |shape#0@@15| (TSeq Tclass._System.nat) $Heap@@45))) (=> (and (and (and ($Is |fseqs#0| (TSeq TChar)) ($IsAlloc |fseqs#0| (TSeq TChar) $Heap@@45)) (= 39 $FunctionContextHeight)) (and (forall ((|i#1@@12| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@12|) (< |i#1@@12| (|Seq#Length| |seqs#0@@11|))) (Char__Order.__default.IsStrictlySorted StartFuel_Char_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@11| |i#1@@12|))))) :qid |totalord.573:21| :skolemid |8866| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@11| |i#1@@12|))) )) (forall ((|i#3@@2| Int) (|j#1@@5| Int) (|k1#1| T@U) (|k2#1| T@U) ) (!  (=> (and (and (= (type |k1#1|) charType) (= (type |k2#1|) charType)) (and ($Is |k1#1| TChar) ($Is |k2#1| TChar))) (=> (and (and (and (and (<= (LitInt 0) |i#3@@2|) (< |i#3@@2| |j#1@@5|)) (< |j#1@@5| (|Seq#Length| |seqs#0@@11|))) (|Seq#Contains| ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@11| |i#3@@2|)) ($Box |k1#1|))) (|Seq#Contains| ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@11| |j#1@@5|)) ($Box |k2#1|))) (Char__Order.__default.lt |k1#1| |k2#1|))) :qid |totalord.574:21| :skolemid |8867| :pattern ( (Char__Order.__default.lt |k1#1| |k2#1|) ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@11| |j#1@@5|)) ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@11| |i#3@@2|))) )))) anon0_correct)))))) PreconditionGeneratedEntry_correct))))))))))))) ))
(check-sat)
