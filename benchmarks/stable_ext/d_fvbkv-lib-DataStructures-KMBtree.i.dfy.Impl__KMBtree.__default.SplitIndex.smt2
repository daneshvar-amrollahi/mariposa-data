(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun TyType () T@T)
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TORDINAL () T@U)
(declare-fun TyTagType () T@T)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun TagORDINAL () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagISet () T@U)
(declare-fun TagMultiSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun TagIMap () T@U)
(declare-fun TagClass () T@U)
(declare-fun ClassNameType () T@T)
(declare-fun class._System.int () T@U)
(declare-fun class._System.bool () T@U)
(declare-fun class._System.set () T@U)
(declare-fun class._System.seq () T@U)
(declare-fun class._System.multiset () T@U)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun alloc () T@U)
(declare-fun NameFamilyType () T@T)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun class._System.object? () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun class._System.array? () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._System.___hFunc0 () T@U)
(declare-fun Tagclass._System.___hPartialFunc0 () T@U)
(declare-fun Tagclass._System.___hTotalFunc0 () T@U)
(declare-fun class._System.__default () T@U)
(declare-fun Tagclass._System.__default () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tagclass._System.___hPartialFunc2 () T@U)
(declare-fun Tagclass._System.___hTotalFunc2 () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun DtCtorIdType () T@T)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun class._System.Tuple2 () T@U)
(declare-fun Tagclass._System.___hFunc3 () T@U)
(declare-fun Tagclass._System.___hPartialFunc3 () T@U)
(declare-fun Tagclass._System.___hTotalFunc3 () T@U)
(declare-fun |##_System._tuple#4._#Make4| () T@U)
(declare-fun Tagclass._System.Tuple4 () T@U)
(declare-fun class._System.Tuple4 () T@U)
(declare-fun Tagclass._System.___hFunc4 () T@U)
(declare-fun Tagclass._System.___hPartialFunc4 () T@U)
(declare-fun Tagclass._System.___hTotalFunc4 () T@U)
(declare-fun |##_System._tuple#0._#Make0| () T@U)
(declare-fun Tagclass._System.Tuple0 () T@U)
(declare-fun class._System.Tuple0 () T@U)
(declare-fun class.KMBtree.__default () T@U)
(declare-fun Tagclass.KMBtree.__default () T@U)
(declare-fun Tagclass.NativeTypes.uint64 () T@U)
(declare-fun Tagclass.ValueMessage.Message () T@U)
(declare-fun Tagclass.NativeTypes.byte () T@U)
(declare-fun Tagclass.KMBtree.Node () T@U)
(declare-fun Tagclass.KMBtree.Node? () T@U)
(declare-fun Tagclass.KMBtreeModel.Node () T@U)
(declare-fun Tagclass.Options.Option () T@U)
(declare-fun Tagclass.KMBtree.NodeContents () T@U)
(declare-fun class.KMBtree.Node? () T@U)
(declare-fun |##KMBtree.NodeContents.Leaf| () T@U)
(declare-fun |##KMBtree.NodeContents.Index| () T@U)
(declare-fun class.KMBtree.NodeContents () T@U)
(declare-fun |##Options.Option.None| () T@U)
(declare-fun |##Options.Option.Some| () T@U)
(declare-fun class.Options.Option () T@U)
(declare-fun class.Options.__default () T@U)
(declare-fun Tagclass.Options.__default () T@U)
(declare-fun Tagclass.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.byte () T@U)
(declare-fun Tagclass.NativeTypes.int16 () T@U)
(declare-fun class.NativeTypes.int16 () T@U)
(declare-fun Tagclass.NativeTypes.uint16 () T@U)
(declare-fun class.NativeTypes.uint16 () T@U)
(declare-fun Tagclass.NativeTypes.int32 () T@U)
(declare-fun class.NativeTypes.int32 () T@U)
(declare-fun Tagclass.NativeTypes.uint32 () T@U)
(declare-fun class.NativeTypes.uint32 () T@U)
(declare-fun Tagclass.NativeTypes.int64 () T@U)
(declare-fun class.NativeTypes.int64 () T@U)
(declare-fun class.NativeTypes.uint64 () T@U)
(declare-fun Tagclass.NativeTypes.nat8 () T@U)
(declare-fun class.NativeTypes.nat8 () T@U)
(declare-fun Tagclass.NativeTypes.nat16 () T@U)
(declare-fun class.NativeTypes.nat16 () T@U)
(declare-fun Tagclass.NativeTypes.nat32 () T@U)
(declare-fun class.NativeTypes.nat32 () T@U)
(declare-fun Tagclass.NativeTypes.nat64 () T@U)
(declare-fun class.NativeTypes.nat64 () T@U)
(declare-fun class.NativeTypes.__default () T@U)
(declare-fun Tagclass.NativeTypes.__default () T@U)
(declare-fun class.Sequences.__default () T@U)
(declare-fun Tagclass.Sequences.__default () T@U)
(declare-fun class.Maps.__default () T@U)
(declare-fun Tagclass.Maps.__default () T@U)
(declare-fun class.SeqComparison.__default () T@U)
(declare-fun Tagclass.SeqComparison.__default () T@U)
(declare-fun class.NativeArrays.__default () T@U)
(declare-fun Tagclass.NativeArrays.__default () T@U)
(declare-fun class.Byte__Order.__default () T@U)
(declare-fun Tagclass.Byte__Order.__default () T@U)
(declare-fun class.Lexicographic__Byte__Order.__default () T@U)
(declare-fun Tagclass.Lexicographic__Byte__Order.__default () T@U)
(declare-fun class.Lexicographic__Byte__Order__Impl.__default () T@U)
(declare-fun Tagclass.Lexicographic__Byte__Order__Impl.__default () T@U)
(declare-fun class.Integer__Order.__default () T@U)
(declare-fun Tagclass.Integer__Order.__default () T@U)
(declare-fun class.Mathematics.__default () T@U)
(declare-fun Tagclass.Mathematics.__default () T@U)
(declare-fun Tagclass.ValueType.Value () T@U)
(declare-fun class.ValueType.__default () T@U)
(declare-fun Tagclass.ValueType.__default () T@U)
(declare-fun |##ValueMessage.Delta.NoDelta| () T@U)
(declare-fun Tagclass.ValueMessage.Delta () T@U)
(declare-fun class.ValueMessage.Delta () T@U)
(declare-fun class.ValueMessage.__default () T@U)
(declare-fun Tagclass.ValueMessage.__default () T@U)
(declare-fun |##ValueMessage.Message.Define| () T@U)
(declare-fun |##ValueMessage.Message.Update| () T@U)
(declare-fun class.ValueMessage.Message () T@U)
(declare-fun class.KMBtreeModel.__default () T@U)
(declare-fun Tagclass.KMBtreeModel.__default () T@U)
(declare-fun |##KMBtreeModel.Node.Leaf| () T@U)
(declare-fun |##KMBtreeModel.Node.Index| () T@U)
(declare-fun class.KMBtreeModel.Node () T@U)
(declare-fun class.Arrays.__default () T@U)
(declare-fun Tagclass.Arrays.__default () T@U)
(declare-fun field$height () T@U)
(declare-fun field$repr () T@U)
(declare-fun field$contents () T@U)
(declare-fun $$Language$Dafny () Bool)
(declare-fun TBitvector (Int) T@U)
(declare-fun Inv0_TBitvector (T@U) Int)
(declare-fun TSet (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun TISet (T@U) T@U)
(declare-fun Inv0_TISet (T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun TMultiSet (T@U) T@U)
(declare-fun Inv0_TMultiSet (T@U) T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun TIMap (T@U T@U) T@U)
(declare-fun Inv0_TIMap (T@U) T@U)
(declare-fun Inv1_TIMap (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun Lit (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun $Box (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun LitReal (Real) Real)
(declare-fun charType () T@T)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun |char#Plus| (T@U T@U) T@U)
(declare-fun |char#Minus| (T@U T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $Is (T@U T@U) Bool)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U) T@U)
(declare-fun SeqType (T@T) T@T)
(declare-fun SeqTypeInv0 (T@T) T@T)
(declare-fun MapType (T@T T@T) T@T)
(declare-fun MapTypeInv0 (T@T) T@T)
(declare-fun MapTypeInv1 (T@T) T@T)
(declare-fun IMapType (T@T T@T) T@T)
(declare-fun IMapTypeInv0 (T@T) T@T)
(declare-fun IMapTypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Type () T@T)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@U T@U T@U) Bool)
(declare-fun $IsGoodMultiSet (T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |IMap#Elements| (T@U) T@U)
(declare-fun |IMap#Domain| (T@U) T@U)
(declare-fun TypeTuple (T@U T@U) T@U)
(declare-fun TypeTupleCar (T@U) T@U)
(declare-fun TypeTupleCdr (T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun |ORD#LessThanLimit| (T@U T@U) Bool)
(declare-fun |ORD#Plus| (T@U T@U) T@U)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun AtLayer (T@U T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun FDim (T@U) Int)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun MultiIndexField (T@U Int) T@U)
(declare-fun MultiIndexField_Inverse0 (T@U) T@U)
(declare-fun MultiIndexField_Inverse1 (T@U) Int)
(declare-fun FieldOfDecl (T@T T@U T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun q@Int (Real) Int)
(declare-fun q@Real (Int) Real)
(declare-fun $OneHeap () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $HeapSuccGhost (T@U T@U) Bool)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun |Set#Empty| (T@T) T@U)
(declare-fun |Set#Singleton| (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |Set#Intersection| (T@U T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |ISet#Empty| (T@T) T@U)
(declare-fun |ISet#UnionOne| (T@U T@U) T@U)
(declare-fun |ISet#Union| (T@U T@U) T@U)
(declare-fun |ISet#Difference| (T@U T@U) T@U)
(declare-fun |ISet#Disjoint| (T@U T@U) Bool)
(declare-fun |ISet#Intersection| (T@U T@U) T@U)
(declare-fun |ISet#Subset| (T@U T@U) Bool)
(declare-fun |ISet#Equal| (T@U T@U) Bool)
(declare-fun |Math#min| (Int Int) Int)
(declare-fun |Math#clip| (Int) Int)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun |MultiSet#Empty| (T@T) T@U)
(declare-fun |MultiSet#Singleton| (T@U) T@U)
(declare-fun |MultiSet#UnionOne| (T@U T@U) T@U)
(declare-fun |MultiSet#Union| (T@U T@U) T@U)
(declare-fun |MultiSet#Intersection| (T@U T@U) T@U)
(declare-fun |MultiSet#Difference| (T@U T@U) T@U)
(declare-fun |MultiSet#Subset| (T@U T@U) Bool)
(declare-fun |MultiSet#Equal| (T@U T@U) Bool)
(declare-fun |MultiSet#Disjoint| (T@U T@U) Bool)
(declare-fun |MultiSet#FromSet| (T@U) T@U)
(declare-fun |MultiSet#FromSeq| (T@U) T@U)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |Seq#Empty| (T@T) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun |Seq#Singleton| (T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun |Seq#Create| (T@U T@U Int T@U) T@U)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Seq#SameUntil| (T@U T@U Int) Bool)
(declare-fun |Seq#FromArray| (T@U T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun |Map#Card| (T@U) Int)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun |Map#Empty| (T@T T@T) T@U)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(declare-fun |Map#Equal| (T@U T@U) Bool)
(declare-fun |Map#Disjoint| (T@U T@U) Bool)
(declare-fun |IMap#Values| (T@U) T@U)
(declare-fun |IMap#Items| (T@U) T@U)
(declare-fun |IMap#Empty| (T@T T@T) T@U)
(declare-fun |IMap#Glue| (T@U T@U T@U) T@U)
(declare-fun |IMap#Build| (T@U T@U T@U) T@U)
(declare-fun |IMap#Equal| (T@U T@U) Bool)
(declare-fun INTERNAL_add_boogie (Int Int) Int)
(declare-fun INTERNAL_sub_boogie (Int Int) Int)
(declare-fun INTERNAL_mul_boogie (Int Int) Int)
(declare-fun INTERNAL_div_boogie (Int Int) Int)
(declare-fun INTERNAL_mod_boogie (Int Int) Int)
(declare-fun INTERNAL_lt_boogie (Int Int) Bool)
(declare-fun INTERNAL_le_boogie (Int Int) Bool)
(declare-fun INTERNAL_gt_boogie (Int Int) Bool)
(declare-fun INTERNAL_ge_boogie (Int Int) Bool)
(declare-fun Mul (Int Int) Int)
(declare-fun Div (Int Int) Int)
(declare-fun Mod (Int Int) Int)
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun _System.__default.rank__is__less__than (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun null () T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0_0 (T@U) T@U)
(declare-fun Apply0 (T@U T@U T@U) T@U)
(declare-fun Handle0 (T@U T@U T@U) T@U)
(declare-fun Requires0 (T@U T@U T@U) Bool)
(declare-fun Reads0 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.__default () T@U)
(declare-fun |_System.__default.rank__is__less__than#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |_System.__default.rank__is__less__than#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun MapType2Type (T@T T@T T@T T@T) T@T)
(declare-fun MapType2TypeInv0 (T@T) T@T)
(declare-fun MapType2TypeInv1 (T@T) T@T)
(declare-fun MapType2TypeInv2 (T@T) T@T)
(declare-fun MapType2TypeInv3 (T@T) T@T)
(declare-fun MapType2Select (T@U T@U T@U T@U) T@U)
(declare-fun MapType2Store (T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle2 (T@U T@U T@U) T@U)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun MapType3Type (T@T T@T T@T) T@T)
(declare-fun MapType3TypeInv0 (T@T) T@T)
(declare-fun MapType3TypeInv1 (T@T) T@T)
(declare-fun MapType3TypeInv2 (T@T) T@T)
(declare-fun MapType3Select (T@U T@U T@U) T@U)
(declare-fun MapType3Store (T@U T@U T@U T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple2| (T@U) Bool)
(declare-fun |_System.Tuple2#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_3 (T@U) T@U)
(declare-fun MapType4Type (T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType4TypeInv0 (T@T) T@T)
(declare-fun MapType4TypeInv1 (T@T) T@T)
(declare-fun MapType4TypeInv2 (T@T) T@T)
(declare-fun MapType4TypeInv3 (T@T) T@T)
(declare-fun MapType4TypeInv4 (T@T) T@T)
(declare-fun MapType4Select (T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType4Store (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle3 (T@U T@U T@U) T@U)
(declare-fun Requires3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_3 (T@U) T@U)
(declare-fun |#_System._tuple#4._#Make4| (T@U T@U T@U T@U) T@U)
(declare-fun _System.Tuple4.___hMake4_q (T@U) Bool)
(declare-fun Tclass._System.Tuple4 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.Tuple4_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple4_1 (T@U) T@U)
(declare-fun Tclass._System.Tuple4_2 (T@U) T@U)
(declare-fun Tclass._System.Tuple4_3 (T@U) T@U)
(declare-fun _System.Tuple4._0 (T@U) T@U)
(declare-fun _System.Tuple4._1 (T@U) T@U)
(declare-fun _System.Tuple4._2 (T@U) T@U)
(declare-fun _System.Tuple4._3 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple4| (T@U) Bool)
(declare-fun |_System.Tuple4#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_4 (T@U) T@U)
(declare-fun MapType5Type (T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType5TypeInv0 (T@T) T@T)
(declare-fun MapType5TypeInv1 (T@T) T@T)
(declare-fun MapType5TypeInv2 (T@T) T@T)
(declare-fun MapType5TypeInv3 (T@T) T@T)
(declare-fun MapType5TypeInv4 (T@T) T@T)
(declare-fun MapType5TypeInv5 (T@T) T@T)
(declare-fun MapType5Select (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType5Store (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle4 (T@U T@U T@U) T@U)
(declare-fun Requires4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_4 (T@U) T@U)
(declare-fun |#_System._tuple#0._#Make0| () T@U)
(declare-fun _System.Tuple0.___hMake0_q (T@U) Bool)
(declare-fun Tclass._System.Tuple0 () T@U)
(declare-fun |$IsA#_System.Tuple0| (T@U) Bool)
(declare-fun |_System.Tuple0#Equal| (T@U T@U) Bool)
(declare-fun Tclass.KMBtree.__default () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun |KMBtree.__default.MaxKeysPerLeaf#canCall| () Bool)
(declare-fun KMBtree.__default.MaxKeysPerLeaf () Int)
(declare-fun NativeTypes.__default.Uint64UpperBound () Int)
(declare-fun |KMBtree.__default.MaxKeysPerLeaf#requires| () Bool)
(declare-fun Tclass.NativeTypes.uint64 () T@U)
(declare-fun |KMBtree.__default.MaxChildren#canCall| () Bool)
(declare-fun KMBtree.__default.MaxChildren () Int)
(declare-fun |KMBtree.__default.MaxChildren#requires| () Bool)
(declare-fun Tclass.ValueMessage.Message () T@U)
(declare-fun KMBtree.__default.DefaultValue () T@U)
(declare-fun |KMBtree.__default.DefaultValue#canCall| () Bool)
(declare-fun |KMBtree.__default.DefaultValue#requires| () Bool)
(declare-fun ValueMessage.__default.DefineDefault () T@U)
(declare-fun |ValueMessage.__default.DefineDefault#canCall| () Bool)
(declare-fun Tclass.NativeTypes.byte () T@U)
(declare-fun KMBtree.__default.DefaultKey () T@U)
(declare-fun |KMBtree.__default.DefaultKey#canCall| () Bool)
(declare-fun |KMBtree.__default.DefaultKey#requires| () Bool)
(declare-fun KMBtree.__default.MaxSiblingHeight (T@U T@U T@U) Int)
(declare-fun AsFuelBottom (T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun Tclass.KMBtree.Node () T@U)
(declare-fun Sequences.__default.Set (T@U T@U) T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |KMBtree.__default.MaxSiblingHeight#canCall| (T@U T@U) Bool)
(declare-fun KMBtree.Node.height () T@U)
(declare-fun |KMBtree.__default.MaxSiblingHeight#requires| (T@U T@U T@U) Bool)
(declare-fun |Mathematics.__default.max#canCall| (Int Int) Bool)
(declare-fun Mathematics.__default.max (Int Int) Int)
(declare-fun KMBtree.__default.DisjointReprs (T@U T@U Int Int) Bool)
(declare-fun |KMBtree.__default.DisjointReprs#canCall| (T@U T@U Int Int) Bool)
(declare-fun |KMBtree.__default.DisjointReprs#requires| (T@U T@U Int Int) Bool)
(declare-fun KMBtree.Node.repr () T@U)
(declare-fun KMBtree.__default.SeqRepr (T@U T@U T@U) T@U)
(declare-fun |KMBtree.__default.SeqRepr#canCall| (T@U T@U) Bool)
(declare-fun |KMBtree.__default.SeqRepr#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#7| (T@U Int Int T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun KMBtree.__default.WFShapeSiblings (T@U T@U T@U) Bool)
(declare-fun StartFuel_KMBtree._default.SeqRepr () T@U)
(declare-fun |KMBtree.__default.WFShapeSiblings#canCall| (T@U T@U) Bool)
(declare-fun |KMBtree.__default.WFShapeSiblings#requires| (T@U T@U T@U) Bool)
(declare-fun |KMBtree.__default.WFShape#canCall| (T@U T@U) Bool)
(declare-fun KMBtree.__default.WFShape (T@U T@U T@U) Bool)
(declare-fun KMBtree.__default.WFShapeChildren (T@U T@U T@U T@U Int) Bool)
(declare-fun |KMBtree.__default.WFShapeChildren#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |KMBtree.__default.WFShapeChildren#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.Set#canCall| (T@U T@U) Bool)
(declare-fun |KMBtree.__default.WFShape#requires| (T@U T@U T@U) Bool)
(declare-fun KMBtree.Node.contents () T@U)
(declare-fun KMBtree.NodeContents.keys (T@U) T@U)
(declare-fun KMBtree.NodeContents.values (T@U) T@U)
(declare-fun KMBtree.NodeContents.children (T@U) T@U)
(declare-fun KMBtree.NodeContents.pivots (T@U) T@U)
(declare-fun KMBtree.NodeContents.Leaf_q (T@U) Bool)
(declare-fun |Arrays.__default.Aliases#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun KMBtree.NodeContents.nkeys (T@U) Int)
(declare-fun KMBtree.NodeContents.nchildren (T@U) Int)
(declare-fun Arrays.__default.Aliases (T@U T@U T@U T@U) Bool)
(declare-fun Tclass.KMBtree.Node? () T@U)
(declare-fun KMBtree.__default.IChildren (T@U T@U T@U Int) T@U)
(declare-fun |KMBtree.__default.IChildren#canCall| (T@U T@U Int) Bool)
(declare-fun Tclass.KMBtreeModel.Node () T@U)
(declare-fun KMBtree.__default.I (T@U T@U T@U) T@U)
(declare-fun StartFuel_KMBtree._default.I () T@U)
(declare-fun |KMBtreeModel.Node#Equal| (T@U T@U) Bool)
(declare-fun |KMBtree.__default.IChildren#requires| (T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.DropLast (T@U T@U) T@U)
(declare-fun Sequences.__default.Last (T@U T@U) T@U)
(declare-fun |Sequences.__default.DropLast#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Last#canCall| (T@U T@U) Bool)
(declare-fun |KMBtree.__default.I#canCall| (T@U T@U) Bool)
(declare-fun KMBtreeModel.Node.keys (T@U) T@U)
(declare-fun KMBtreeModel.Node.values (T@U) T@U)
(declare-fun KMBtreeModel.Node.pivots (T@U) T@U)
(declare-fun KMBtreeModel.Node.children (T@U) T@U)
(declare-fun KMBtreeModel.Node.Leaf_q (T@U) Bool)
(declare-fun KMBtree.NodeContents.Index_q (T@U) Bool)
(declare-fun |KMBtree.__default.I#requires| (T@U T@U T@U) Bool)
(declare-fun |#KMBtreeModel.Node.Leaf| (T@U T@U) T@U)
(declare-fun |#KMBtreeModel.Node.Index| (T@U T@U) T@U)
(declare-fun KMBtree.__default.ISiblings (T@U T@U) T@U)
(declare-fun |KMBtree.__default.ISiblings#canCall| (T@U T@U) Bool)
(declare-fun |KMBtree.__default.ISiblings#requires| (T@U T@U) Bool)
(declare-fun KMBtree.__default.WF (T@U T@U) Bool)
(declare-fun |KMBtree.__default.WF#canCall| (T@U T@U) Bool)
(declare-fun |KMBtree.__default.WF#requires| (T@U T@U) Bool)
(declare-fun |KMBtreeModel.__default.WF#canCall| (T@U) Bool)
(declare-fun KMBtreeModel.__default.WF (T@U T@U) Bool)
(declare-fun KMBtree.__default.Interpretation (T@U T@U) T@U)
(declare-fun |KMBtree.__default.Interpretation#canCall| (T@U T@U) Bool)
(declare-fun |KMBtree.__default.Interpretation#requires| (T@U T@U) Bool)
(declare-fun KMBtreeModel.__default.Interpretation (T@U T@U) T@U)
(declare-fun StartFuel_KMBtreeModel._default.Interpretation () T@U)
(declare-fun |KMBtreeModel.__default.Interpretation#canCall| (T@U) Bool)
(declare-fun KMBtree.__default.ToSeq (T@U T@U) T@U)
(declare-fun |KMBtree.__default.ToSeq#canCall| (T@U T@U) Bool)
(declare-fun |KMBtree.__default.ToSeq#requires| (T@U T@U) Bool)
(declare-fun KMBtreeModel.__default.ToSeq (T@U T@U) T@U)
(declare-fun StartFuel_KMBtreeModel._default.ToSeq () T@U)
(declare-fun |KMBtreeModel.__default.ToSeq#canCall| (T@U) Bool)
(declare-fun Tclass.Options.Option (T@U) T@U)
(declare-fun Tclass.Options.Option_0 (T@U) T@U)
(declare-fun Tclass.KMBtree.NodeContents () T@U)
(declare-fun KMBtree.__default.Full (T@U T@U) Bool)
(declare-fun |KMBtree.__default.Full#canCall| (T@U T@U) Bool)
(declare-fun |KMBtree.__default.Full#requires| (T@U T@U) Bool)
(declare-fun KMBtree.__default.ObjectIsInSubtree (T@U T@U T@U Int) Bool)
(declare-fun |KMBtree.__default.ObjectIsInSubtree#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |KMBtree.__default.ObjectIsInSubtree#requires| (T@U T@U T@U Int) Bool)
(declare-fun KMBtree.__default.SubRepr (T@U T@U Int Int) T@U)
(declare-fun |KMBtree.__default.SubRepr#canCall| (T@U T@U Int Int) Bool)
(declare-fun |KMBtree.__default.SubRepr#requires| (T@U T@U Int Int) Bool)
(declare-fun KMBtree.__default.DisjointSubtrees (T@U T@U Int Int) Bool)
(declare-fun |KMBtree.__default.DisjointSubtrees#canCall| (T@U T@U Int Int) Bool)
(declare-fun |KMBtree.__default.DisjointSubtrees#requires| (T@U T@U Int Int) Bool)
(declare-fun |#KMBtree.NodeContents.Leaf| (Int T@U T@U) T@U)
(declare-fun |#KMBtree.NodeContents.Index| (Int T@U T@U) T@U)
(declare-fun |$IsA#KMBtree.NodeContents| (T@U) Bool)
(declare-fun |KMBtree.NodeContents#Equal| (T@U T@U) Bool)
(declare-fun |#Options.Option.None| () T@U)
(declare-fun Options.Option.None_q (T@U) Bool)
(declare-fun |#Options.Option.Some| (T@U) T@U)
(declare-fun Options.Option.Some_q (T@U) Bool)
(declare-fun Options.Option.value (T@U) T@U)
(declare-fun |$IsA#Options.Option| (T@U) Bool)
(declare-fun |Options.Option#Equal| (T@U T@U) Bool)
(declare-fun Tclass.Options.__default () T@U)
(declare-fun Options.__default.MapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.MapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.MapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Options.__default.FlatMapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.FlatMapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.FlatMapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Tclass.NativeTypes.sbyte () T@U)
(declare-fun Tclass.NativeTypes.int16 () T@U)
(declare-fun Tclass.NativeTypes.uint16 () T@U)
(declare-fun Tclass.NativeTypes.int32 () T@U)
(declare-fun Tclass.NativeTypes.uint32 () T@U)
(declare-fun Tclass.NativeTypes.int64 () T@U)
(declare-fun Tclass.NativeTypes.nat8 () T@U)
(declare-fun Tclass.NativeTypes.nat16 () T@U)
(declare-fun Tclass.NativeTypes.nat32 () T@U)
(declare-fun Tclass.NativeTypes.nat64 () T@U)
(declare-fun Tclass.NativeTypes.__default () T@U)
(declare-fun NativeTypes.__default.Uint64Size () Int)
(declare-fun |NativeTypes.__default.Uint64Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32Size () Int)
(declare-fun |NativeTypes.__default.Uint32Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint16Size () Int)
(declare-fun |NativeTypes.__default.Uint16Size#requires| () Bool)
(declare-fun |NativeTypes.__default.Uint64UpperBound#requires| () Bool)
(declare-fun |NativeTypes.__default.Uint32UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32UpperBound () Int)
(declare-fun Tclass.Sequences.__default () T@U)
(declare-fun |Sequences.__default.Last#requires| (T@U T@U) Bool)
(declare-fun |Sequences.__default.DropLast#requires| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Set#requires| (T@U T@U) Bool)
(declare-fun |lambda#64| (T@U T@U Int) T@U)
(declare-fun Sequences.__default.ISet (T@U T@U) T@U)
(declare-fun |Sequences.__default.ISet#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.ISet#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.NoDupes (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IndexOf (T@U T@U T@U) Int)
(declare-fun |Sequences.__default.IndexOf#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IndexOf#requires| (T@U T@U T@U) Bool)
(declare-fun |$let#0_i| (T@U T@U T@U) Int)
(declare-fun |$let#0$canCall| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Range (T@U Int) T@U)
(declare-fun |Sequences.__default.Range#canCall| (Int) Bool)
(declare-fun |Sequences.__default.Range#requires| (T@U Int) Bool)
(declare-fun Sequences.__default.Apply (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Apply#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Apply#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.ApplyOpaque (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.ApplyOpaque#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.ApplyOpaque#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Filter (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Filter#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Filter#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldLeft (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldLeft#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldLeft#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldFromRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldFromRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldFromRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.remove (T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.remove#canCall| (T@U T@U Int) Bool)
(declare-fun |Sequences.__default.remove#requires| (T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.insert (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.insert#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.insert#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace1with2 (T@U T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace1with2#canCall| (T@U T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace1with2#requires| (T@U T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace2with1 (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace2with1#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace2with1#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.concat (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concat3 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat3#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat3#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concatSeq (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concatSeq#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.concatSeq#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsPrefix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsSuffix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.SeqIndexIterate (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.SeqIndexIterate#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.SeqIndexIterate#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.SeqIndex (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.SeqIndex#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.SeqIndex#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.SeqIndexIterate () T@U)
(declare-fun Sequences.__default.SeqOfLength (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqOfLength#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqOfLength#requires| (T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.SeqIndexUpdate (T@U T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqIndexUpdate#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqIndexUpdate#requires| (T@U T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.Zip (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Zip#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Zip#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Unzip (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Unzip#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Unzip#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenShape (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FlattenShape#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.FlattenShape#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenLength (T@U T@U) Int)
(declare-fun |Sequences.__default.FlattenLength#canCall| (T@U) Bool)
(declare-fun |Sequences.__default.FlattenLength#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Flatten (T@U T@U T@U) T@U)
(declare-fun StartFuel_Sequences._default.FlattenLength () T@U)
(declare-fun StartFuel_Sequences._default.FlattenShape () T@U)
(declare-fun |Sequences.__default.Flatten#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Flatten#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenShape2 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenShape () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenShape3 () T@U)
(declare-fun Sequences.__default.FlattenIndex (T@U Int Int) Int)
(declare-fun |Sequences.__default.FlattenIndex#canCall| (T@U Int Int) Bool)
(declare-fun |Sequences.__default.FlattenIndex#requires| (T@U Int Int) Bool)
(declare-fun Sequences.__default.UnflattenIndex (T@U T@U Int) T@U)
(declare-fun |Sequences.__default.UnflattenIndex#canCall| (T@U Int) Bool)
(declare-fun |Sequences.__default.UnflattenIndex#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenLength2 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenLength () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenLength3 () T@U)
(declare-fun Sequences.__default.fill (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.fill#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.fill#requires| (T@U T@U Int T@U) Bool)
(declare-fun Tclass.Maps.__default () T@U)
(declare-fun Maps.__default.IMapsTo (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsTo#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsTo#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapsTo (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsTo#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsTo#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapsAgreeOnKey (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsAgreeOnKey#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsAgreeOnKey#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapsAgreeOnKey (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsAgreeOnKey#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsAgreeOnKey#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IsSubIMap (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubIMap#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubIMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IsSubMap (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubMap#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapRemove (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#68| (T@U T@U T@U) T@U)
(declare-fun |lambda#69| (T@U) T@U)
(declare-fun Maps.__default.MapRemoveStrong (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemoveStrong#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemoveStrong#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapRemove () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove2 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove3 () T@U)
(declare-fun Maps.__default.MapRemove1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove1#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#72| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapRemove1Strong (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove1Strong#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove1Strong#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapRemove1 () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove13 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove1 () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove14 () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove15 () T@U)
(declare-fun Maps.__default.IMapRemove (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRemove#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRemove#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapRemove1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRemove1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRemove1#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |lambda#86| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapIRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapIRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapIRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapDisjointUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapDisjointUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapDisjointUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#100| (T@U T@U T@U) T@U)
(declare-fun |lambda#101| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapUnionPreferA (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnionPreferA#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnionPreferA#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapUnionPreferB (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnionPreferB#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnionPreferB#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapUnionPreferA () T@U)
(declare-fun Maps.__default.IMapUnionPreferA (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnionPreferA#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnionPreferA#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapUnionPreferB (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnionPreferB#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnionPreferB#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.IMapUnionPreferA () T@U)
(declare-fun Maps.__default.MapDisjointUnion3 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun StartFuel_Maps._default.MapDisjointUnion () T@U)
(declare-fun |Maps.__default.MapDisjointUnion3#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapDisjointUnion3#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#120| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#121| (T@U T@U T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapToImap (T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapToImap#canCall| (T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapToImap#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#124| (T@U T@U) T@U)
(declare-fun Maps.__default.MapLookupOption (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapLookupOption#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapLookupOption#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.ImapLookupOption (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.ImapLookupOption#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.ImapLookupOption#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass.SeqComparison.__default () T@U)
(declare-fun SeqComparison.__default.lte (T@U T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lte#canCall| (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lte#requires| (T@U T@U T@U) Bool)
(declare-fun SeqComparison.__default.lt (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lt#canCall| (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_SeqComparison._default.lte () T@U)
(declare-fun Tclass.NativeArrays.__default () T@U)
(declare-fun Tclass.Byte__Order.__default () T@U)
(declare-fun Byte__Order.__default.SomeElement () Int)
(declare-fun |Byte__Order.__default.SomeElement#requires| () Bool)
(declare-fun Byte__Order.__default.lte (T@U Int Int) Bool)
(declare-fun StartFuel_Byte_Order._default.ltedef () T@U)
(declare-fun |Byte__Order.__default.lte#canCall| (Int Int) Bool)
(declare-fun Byte__Order.__default.ltedef (T@U Int Int) Bool)
(declare-fun |Byte__Order.__default.lte#requires| (T@U Int Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.ltedef2 () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.ltedef () T@U)
(declare-fun MoreFuel_Byte_Order._default.ltedef3 () T@U)
(declare-fun |Byte__Order.__default.ltedef#canCall| (Int Int) Bool)
(declare-fun |Byte__Order.__default.ltedef#requires| (T@U Int Int) Bool)
(declare-fun Byte__Order.__default.LargestLte (T@U T@U Int) Int)
(declare-fun StartFuel_Byte_Order._default.IsSorted () T@U)
(declare-fun StartFuel_Byte_Order._default.lte () T@U)
(declare-fun |Byte__Order.__default.LargestLte#canCall| (T@U Int) Bool)
(declare-fun Byte__Order.__default.IsSorted (T@U T@U) Bool)
(declare-fun Byte__Order.__default.lt (Int Int) Bool)
(declare-fun |Byte__Order.__default.LargestLte#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.IsSorted8 () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.IsSorted () T@U)
(declare-fun |Byte__Order.__default.lt#canCall| (Int Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.IsSorted9 () T@U)
(declare-fun Byte__Order.__default.LargestLt (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.LargestLt#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.LargestLt#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.IsSorted10 () T@U)
(declare-fun MoreFuel_Byte_Order._default.IsSorted11 () T@U)
(declare-fun Byte__Order.__default.IndexOfFirstGte (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.IndexOfFirstGte#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.IndexOfFirstGte#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.IsSorted12 () T@U)
(declare-fun MoreFuel_Byte_Order._default.IsSorted13 () T@U)
(declare-fun Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter (T@U T@U Int Int Int) Int)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (T@U Int Int Int) Bool)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| (T@U T@U Int Int Int) Bool)
(declare-fun Byte__Order.__default.binarySearchIndexOfFirstKeyGte (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| (T@U T@U Int) Bool)
(declare-fun Byte__Order.__default.IndexOfFirstGt (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.IndexOfFirstGt#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.IndexOfFirstGt#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.IsSorted14 () T@U)
(declare-fun MoreFuel_Byte_Order._default.IsSorted15 () T@U)
(declare-fun Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter (T@U T@U Int Int Int) Int)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (T@U Int Int Int) Bool)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| (T@U T@U Int Int Int) Bool)
(declare-fun Byte__Order.__default.binarySearchIndexOfFirstKeyGt (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| (T@U T@U Int) Bool)
(declare-fun Byte__Order.__default.SetAllLte (T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SetAllLte#canCall| (T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SetAllLte#requires| (T@U T@U) Bool)
(declare-fun Byte__Order.__default.SetAllLt (T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SetAllLt#canCall| (T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SetAllLt#requires| (T@U T@U) Bool)
(declare-fun Byte__Order.__default.NotMinimum (T@U Int) Bool)
(declare-fun |Byte__Order.__default.NotMinimum#canCall| (Int) Bool)
(declare-fun |Byte__Order.__default.NotMinimum#requires| (T@U Int) Bool)
(declare-fun Byte__Order.__default.MapPivotedUnion (T@U T@U Int T@U) T@U)
(declare-fun |Byte__Order.__default.MapPivotedUnion#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |Byte__Order.__default.MapPivotedUnion#requires| (T@U T@U Int T@U) Bool)
(declare-fun |lambda#128| (T@U Int) T@U)
(declare-fun |lambda#129| (T@U T@U Int) T@U)
(declare-fun Byte__Order.__default.SetSuccessor (T@U Int) T@U)
(declare-fun |Byte__Order.__default.SetSuccessor#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.SetSuccessor#requires| (T@U Int) Bool)
(declare-fun |$let#4_next| (T@U Int) Int)
(declare-fun |$let#4$canCall| (T@U Int) Bool)
(declare-fun Byte__Order.__default.MapSuccessor (T@U T@U Int) T@U)
(declare-fun |Byte__Order.__default.MapSuccessor#canCall| (T@U T@U Int) Bool)
(declare-fun |Byte__Order.__default.MapSuccessor#requires| (T@U T@U Int) Bool)
(declare-fun Byte__Order.__default.SeqSuccessor (T@U Int) T@U)
(declare-fun |Byte__Order.__default.SeqSuccessor#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.SeqSuccessor#requires| (T@U Int) Bool)
(declare-fun |lambda#140| (T@U T@U) T@U)
(declare-fun Byte__Order.__default.SortedSeqForMap (T@U T@U T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SortedSeqForMap#canCall| (T@U T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SortedSeqForMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.Unzip () T@U)
(declare-fun StartFuel_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun |Byte__Order.__default.IsStrictlySorted#canCall| (T@U) Bool)
(declare-fun Byte__Order.__default.IsStrictlySorted (T@U T@U) Bool)
(declare-fun Byte__Order.__default.minimum (T@U T@U) Int)
(declare-fun |Byte__Order.__default.minimum#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.minimum#requires| (T@U T@U) Bool)
(declare-fun |$let#7_a| (T@U) Int)
(declare-fun |$let#7$canCall| (T@U) Bool)
(declare-fun Byte__Order.__default.minimumOpt (T@U T@U) T@U)
(declare-fun |Byte__Order.__default.minimumOpt#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.minimumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Byte_Order._default.minimum () T@U)
(declare-fun Byte__Order.__default.maximum (T@U T@U) Int)
(declare-fun |Byte__Order.__default.maximum#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.maximum#requires| (T@U T@U) Bool)
(declare-fun |$let#10_a| (T@U) Int)
(declare-fun |$let#10$canCall| (T@U) Bool)
(declare-fun Byte__Order.__default.maximumOpt (T@U T@U) T@U)
(declare-fun |Byte__Order.__default.maximumOpt#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.maximumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Byte_Order._default.maximum () T@U)
(declare-fun |Byte__Order.__default.lt#requires| (Int Int) Bool)
(declare-fun Byte__Order.__default.Min (Int Int) Int)
(declare-fun |Byte__Order.__default.Min#canCall| (Int Int) Bool)
(declare-fun |Byte__Order.__default.Min#requires| (Int Int) Bool)
(declare-fun Byte__Order.__default.Max (Int Int) Int)
(declare-fun |Byte__Order.__default.Max#canCall| (Int Int) Bool)
(declare-fun |Byte__Order.__default.Max#requires| (Int Int) Bool)
(declare-fun |Byte__Order.__default.IsSorted#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.IsSorted#requires| (T@U T@U) Bool)
(declare-fun Byte__Order.__default.IsStrictlySortedInternal (T@U) Bool)
(declare-fun |Byte__Order.__default.IsStrictlySortedInternal#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.IsStrictlySortedInternal#requires| (T@U) Bool)
(declare-fun |Byte__Order.__default.IsStrictlySorted#requires| (T@U T@U) Bool)
(declare-fun Tclass.Lexicographic__Byte__Order.__default () T@U)
(declare-fun Lexicographic__Byte__Order.__default.SomeElement () T@U)
(declare-fun |Lexicographic__Byte__Order.__default.SomeElement#requires| () Bool)
(declare-fun Lexicographic__Byte__Order.__default.lte (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.lte#canCall| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.ltedef (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.lte#requires| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.ltedef#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.ltedef#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.LargestLte (T@U T@U T@U) Int)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.IsSorted () T@U)
(declare-fun |Lexicographic__Byte__Order.__default.LargestLte#canCall| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.IsSorted (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.lt (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.LargestLte#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted8 () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted () T@U)
(declare-fun |Lexicographic__Byte__Order.__default.lt#canCall| (T@U T@U) Bool)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted9 () T@U)
(declare-fun Lexicographic__Byte__Order.__default.LargestLt (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.LargestLt#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.LargestLt#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted10 () T@U)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted11 () T@U)
(declare-fun Lexicographic__Byte__Order.__default.IndexOfFirstGte (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IndexOfFirstGte#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted12 () T@U)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted13 () T@U)
(declare-fun Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter (T@U T@U T@U Int Int) Int)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (T@U T@U Int Int) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| (T@U T@U T@U Int Int) Bool)
(declare-fun Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| (T@U T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.IndexOfFirstGt (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IndexOfFirstGt#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted14 () T@U)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted15 () T@U)
(declare-fun Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter (T@U T@U T@U Int Int) Int)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (T@U T@U Int Int) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| (T@U T@U T@U Int Int) Bool)
(declare-fun Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| (T@U T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.SetAllLte (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SetAllLte#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SetAllLte#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.SetAllLt (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SetAllLt#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SetAllLt#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.NotMinimum (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.NotMinimum#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.NotMinimum#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.MapPivotedUnion (T@U T@U T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.MapPivotedUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.MapPivotedUnion#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |lambda#144| (T@U T@U) T@U)
(declare-fun |lambda#145| (T@U T@U) T@U)
(declare-fun Lexicographic__Byte__Order.__default.SetSuccessor (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SetSuccessor#requires| (T@U T@U) Bool)
(declare-fun |$let#13_next| (T@U T@U) T@U)
(declare-fun |$let#13$canCall| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.MapSuccessor (T@U T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.MapSuccessor#canCall| (T@U T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.MapSuccessor#requires| (T@U T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.SeqSuccessor (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.SeqSuccessor#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SeqSuccessor#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.SortedSeqForMap (T@U T@U T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SortedSeqForMap#canCall| (T@U T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SortedSeqForMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun |Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.IsStrictlySorted (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.minimum (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.minimum#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.minimum#requires| (T@U T@U) Bool)
(declare-fun |$let#16_a| (T@U) T@U)
(declare-fun |$let#16$canCall| (T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.minimumOpt (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.minimumOpt#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.minimumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.minimum () T@U)
(declare-fun Lexicographic__Byte__Order.__default.maximum (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.maximum#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.maximum#requires| (T@U T@U) Bool)
(declare-fun |$let#19_a| (T@U) T@U)
(declare-fun |$let#19$canCall| (T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.maximumOpt (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.maximumOpt#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.maximumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.maximum () T@U)
(declare-fun |Lexicographic__Byte__Order.__default.lt#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.Min (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.Min#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.Min#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.Max (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.Max#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.Max#requires| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsSorted#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsSorted#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#requires| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsStrictlySorted#requires| (T@U T@U) Bool)
(declare-fun Tclass.Lexicographic__Byte__Order__Impl.__default () T@U)
(declare-fun Tclass.Integer__Order.__default () T@U)
(declare-fun |Integer__Order.__default.SomeElement#requires| () Bool)
(declare-fun Integer__Order.__default.SomeElement () Int)
(declare-fun StartFuel_Integer_Order._default.ltedef () T@U)
(declare-fun Integer__Order.__default.lte (Int Int) Bool)
(declare-fun Integer__Order.__default.ltedef (T@U Int Int) Bool)
(declare-fun |Integer__Order.__default.lte#requires| (Int Int) Bool)
(declare-fun MoreFuel_Integer_Order._default.ltedef2 () T@U)
(declare-fun StartFuelAssert_Integer_Order._default.ltedef () T@U)
(declare-fun |Integer__Order.__default.ltedef#canCall| (Int Int) Bool)
(declare-fun MoreFuel_Integer_Order._default.ltedef3 () T@U)
(declare-fun |Integer__Order.__default.ltedef#requires| (T@U Int Int) Bool)
(declare-fun Integer__Order.__default.LargestLte (T@U T@U Int) Int)
(declare-fun StartFuel_Integer_Order._default.IsSorted () T@U)
(declare-fun |Integer__Order.__default.LargestLte#canCall| (T@U Int) Bool)
(declare-fun Integer__Order.__default.IsSorted (T@U T@U) Bool)
(declare-fun Integer__Order.__default.lt (Int Int) Bool)
(declare-fun |Integer__Order.__default.LargestLte#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Integer_Order._default.IsSorted8 () T@U)
(declare-fun StartFuelAssert_Integer_Order._default.IsSorted () T@U)
(declare-fun |Integer__Order.__default.lt#canCall| (Int Int) Bool)
(declare-fun MoreFuel_Integer_Order._default.IsSorted9 () T@U)
(declare-fun Integer__Order.__default.LargestLt (T@U T@U Int) Int)
(declare-fun |Integer__Order.__default.LargestLt#canCall| (T@U Int) Bool)
(declare-fun |Integer__Order.__default.LargestLt#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Integer_Order._default.IsSorted10 () T@U)
(declare-fun |Integer__Order.__default.lte#canCall| (Int Int) Bool)
(declare-fun MoreFuel_Integer_Order._default.IsSorted11 () T@U)
(declare-fun Integer__Order.__default.IndexOfFirstGte (T@U T@U Int) Int)
(declare-fun |Integer__Order.__default.IndexOfFirstGte#canCall| (T@U Int) Bool)
(declare-fun |Integer__Order.__default.IndexOfFirstGte#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Integer_Order._default.IsSorted12 () T@U)
(declare-fun MoreFuel_Integer_Order._default.IsSorted13 () T@U)
(declare-fun Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter (T@U T@U Int Int Int) Int)
(declare-fun |Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (T@U Int Int Int) Bool)
(declare-fun |Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| (T@U T@U Int Int Int) Bool)
(declare-fun Integer__Order.__default.binarySearchIndexOfFirstKeyGte (T@U T@U Int) Int)
(declare-fun |Integer__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (T@U Int) Bool)
(declare-fun |Integer__Order.__default.binarySearchIndexOfFirstKeyGte#requires| (T@U T@U Int) Bool)
(declare-fun Integer__Order.__default.IndexOfFirstGt (T@U T@U Int) Int)
(declare-fun |Integer__Order.__default.IndexOfFirstGt#canCall| (T@U Int) Bool)
(declare-fun |Integer__Order.__default.IndexOfFirstGt#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Integer_Order._default.IsSorted14 () T@U)
(declare-fun MoreFuel_Integer_Order._default.IsSorted15 () T@U)
(declare-fun Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter (T@U T@U Int Int Int) Int)
(declare-fun |Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (T@U Int Int Int) Bool)
(declare-fun |Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| (T@U T@U Int Int Int) Bool)
(declare-fun Integer__Order.__default.binarySearchIndexOfFirstKeyGt (T@U T@U Int) Int)
(declare-fun |Integer__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (T@U Int) Bool)
(declare-fun |Integer__Order.__default.binarySearchIndexOfFirstKeyGt#requires| (T@U T@U Int) Bool)
(declare-fun Integer__Order.__default.SetAllLte (T@U T@U) Bool)
(declare-fun |Integer__Order.__default.SetAllLte#canCall| (T@U T@U) Bool)
(declare-fun |Integer__Order.__default.SetAllLte#requires| (T@U T@U) Bool)
(declare-fun Integer__Order.__default.SetAllLt (T@U T@U) Bool)
(declare-fun |Integer__Order.__default.SetAllLt#canCall| (T@U T@U) Bool)
(declare-fun |Integer__Order.__default.SetAllLt#requires| (T@U T@U) Bool)
(declare-fun Integer__Order.__default.NotMinimum (T@U Int) Bool)
(declare-fun |Integer__Order.__default.NotMinimum#requires| (T@U Int) Bool)
(declare-fun Integer__Order.__default.MapPivotedUnion (T@U T@U Int T@U) T@U)
(declare-fun |Integer__Order.__default.MapPivotedUnion#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |Integer__Order.__default.MapPivotedUnion#requires| (T@U T@U Int T@U) Bool)
(declare-fun |lambda#160| (T@U Int) T@U)
(declare-fun |lambda#161| (T@U Int) T@U)
(declare-fun Integer__Order.__default.SetSuccessor (T@U Int) T@U)
(declare-fun |Integer__Order.__default.SetSuccessor#canCall| (T@U Int) Bool)
(declare-fun |Integer__Order.__default.SetSuccessor#requires| (T@U Int) Bool)
(declare-fun |$let#22_next| (T@U Int) Int)
(declare-fun |$let#22$canCall| (T@U Int) Bool)
(declare-fun Integer__Order.__default.MapSuccessor (T@U T@U Int) T@U)
(declare-fun |Integer__Order.__default.MapSuccessor#canCall| (T@U T@U Int) Bool)
(declare-fun |Integer__Order.__default.MapSuccessor#requires| (T@U T@U Int) Bool)
(declare-fun Integer__Order.__default.SeqSuccessor (T@U Int) T@U)
(declare-fun |Integer__Order.__default.SeqSuccessor#canCall| (T@U Int) Bool)
(declare-fun |Integer__Order.__default.SeqSuccessor#requires| (T@U Int) Bool)
(declare-fun Integer__Order.__default.SortedSeqForMap (T@U T@U T@U T@U) Bool)
(declare-fun |Integer__Order.__default.SortedSeqForMap#canCall| (T@U T@U T@U) Bool)
(declare-fun |Integer__Order.__default.SortedSeqForMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Integer_Order._default.IsStrictlySorted () T@U)
(declare-fun |Integer__Order.__default.IsStrictlySorted#canCall| (T@U) Bool)
(declare-fun Integer__Order.__default.IsStrictlySorted (T@U T@U) Bool)
(declare-fun Integer__Order.__default.minimum (T@U T@U) Int)
(declare-fun |Integer__Order.__default.minimum#canCall| (T@U) Bool)
(declare-fun |Integer__Order.__default.minimum#requires| (T@U T@U) Bool)
(declare-fun |$let#25_a| (T@U) Int)
(declare-fun |$let#25$canCall| (T@U) Bool)
(declare-fun Integer__Order.__default.minimumOpt (T@U T@U) T@U)
(declare-fun |Integer__Order.__default.minimumOpt#canCall| (T@U) Bool)
(declare-fun |Integer__Order.__default.minimumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Integer_Order._default.minimum () T@U)
(declare-fun Integer__Order.__default.maximum (T@U T@U) Int)
(declare-fun |Integer__Order.__default.maximum#canCall| (T@U) Bool)
(declare-fun |Integer__Order.__default.maximum#requires| (T@U T@U) Bool)
(declare-fun |$let#28_a| (T@U) Int)
(declare-fun |$let#28$canCall| (T@U) Bool)
(declare-fun Integer__Order.__default.maximumOpt (T@U T@U) T@U)
(declare-fun |Integer__Order.__default.maximumOpt#canCall| (T@U) Bool)
(declare-fun |Integer__Order.__default.maximumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Integer_Order._default.maximum () T@U)
(declare-fun |Integer__Order.__default.lt#requires| (Int Int) Bool)
(declare-fun Integer__Order.__default.Min (Int Int) Int)
(declare-fun |Integer__Order.__default.Min#requires| (Int Int) Bool)
(declare-fun Integer__Order.__default.Max (Int Int) Int)
(declare-fun |Integer__Order.__default.Max#requires| (Int Int) Bool)
(declare-fun |Integer__Order.__default.IsSorted#canCall| (T@U) Bool)
(declare-fun |Integer__Order.__default.IsSorted#requires| (T@U T@U) Bool)
(declare-fun Integer__Order.__default.IsStrictlySortedInternal (T@U) Bool)
(declare-fun |Integer__Order.__default.IsStrictlySortedInternal#canCall| (T@U) Bool)
(declare-fun |Integer__Order.__default.IsStrictlySortedInternal#requires| (T@U) Bool)
(declare-fun |Integer__Order.__default.IsStrictlySorted#requires| (T@U T@U) Bool)
(declare-fun Tclass.Mathematics.__default () T@U)
(declare-fun Mathematics.__default.min (Int Int) Int)
(declare-fun |Mathematics.__default.min#requires| (Int Int) Bool)
(declare-fun |Mathematics.__default.max#requires| (Int Int) Bool)
(declare-fun Mathematics.__default.Set (T@U T@U) T@U)
(declare-fun |Mathematics.__default.Set#canCall| (T@U T@U) Bool)
(declare-fun |Mathematics.__default.Set#requires| (T@U T@U) Bool)
(declare-fun Mathematics.__default.ISet (T@U T@U) T@U)
(declare-fun |Mathematics.__default.ISet#canCall| (T@U T@U) Bool)
(declare-fun |Mathematics.__default.ISet#requires| (T@U T@U) Bool)
(declare-fun Tclass.ValueType.Value () T@U)
(declare-fun Tclass.ValueType.__default () T@U)
(declare-fun ValueType.__default.MaxLen () Int)
(declare-fun |ValueType.__default.MaxLen#requires| () Bool)
(declare-fun ValueType.__default.DefaultValue () T@U)
(declare-fun |ValueType.__default.DefaultValue#requires| () Bool)
(declare-fun ValueType.__default.Len (T@U) Int)
(declare-fun |ValueType.__default.Len#canCall| (T@U) Bool)
(declare-fun |ValueType.__default.Len#requires| (T@U) Bool)
(declare-fun ValueType.__default.ValidMessageBytestring (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestring#canCall| (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestring#requires| (T@U) Bool)
(declare-fun |ValueType.__default.MaxLen#canCall| () Bool)
(declare-fun ValueType.__default.ValidMessageBytestrings (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestrings#canCall| (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestrings#requires| (T@U) Bool)
(declare-fun |#ValueMessage.Delta.NoDelta| () T@U)
(declare-fun ValueMessage.Delta.NoDelta_q (T@U) Bool)
(declare-fun Tclass.ValueMessage.Delta () T@U)
(declare-fun |$IsA#ValueMessage.Delta| (T@U) Bool)
(declare-fun |ValueMessage.Delta#Equal| (T@U T@U) Bool)
(declare-fun Tclass.ValueMessage.__default () T@U)
(declare-fun ValueMessage.__default.NopDelta () T@U)
(declare-fun |ValueMessage.__default.NopDelta#requires| () Bool)
(declare-fun ValueMessage.__default.DefaultValue () T@U)
(declare-fun |ValueMessage.__default.DefaultValue#requires| () Bool)
(declare-fun |ValueType.__default.DefaultValue#canCall| () Bool)
(declare-fun ValueMessage.__default.CombineDeltas (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.CombineDeltas#canCall| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.CombineDeltas#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.__default.ApplyDelta (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.ApplyDelta#canCall| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.ApplyDelta#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.__default.bytestring__to__Message (T@U) T@U)
(declare-fun |ValueMessage.__default.bytestring__to__Message#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.bytestring__to__Message#requires| (T@U) Bool)
(declare-fun |#ValueMessage.Message.Define| (T@U) T@U)
(declare-fun ValueMessage.__default.EncodableMessage (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessage#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessage#requires| (T@U) Bool)
(declare-fun ValueMessage.Message.Define_q (T@U) Bool)
(declare-fun ValueMessage.__default.EncodableMessageSeq (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessageSeq#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessageSeq#requires| (T@U) Bool)
(declare-fun ValueMessage.__default.Message__to__bytestring (T@U) T@U)
(declare-fun |ValueMessage.__default.Message__to__bytestring#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.Message__to__bytestring#requires| (T@U) Bool)
(declare-fun ValueMessage.Message.value (T@U) T@U)
(declare-fun ValueMessage.__default.messageSeq__to__bytestringSeq (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.messageSeq__to__bytestringSeq#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.__default.bytestringSeq__to__MessageSeq (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| (T@U) Bool)
(declare-fun |ValueMessage.Message#Equal| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.__default.Merge (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.Merge#canCall| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.Merge#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.Message.delta (T@U) T@U)
(declare-fun |#ValueMessage.Message.Update| (T@U) T@U)
(declare-fun ValueMessage.__default.IdentityMessage () T@U)
(declare-fun |ValueMessage.__default.IdentityMessage#requires| () Bool)
(declare-fun |ValueMessage.__default.NopDelta#canCall| () Bool)
(declare-fun |ValueMessage.__default.DefineDefault#requires| () Bool)
(declare-fun |ValueMessage.__default.DefaultValue#canCall| () Bool)
(declare-fun ValueMessage.Message.Update_q (T@U) Bool)
(declare-fun |$IsA#ValueMessage.Message| (T@U) Bool)
(declare-fun Tclass.KMBtreeModel.__default () T@U)
(declare-fun KMBtreeModel.__default.AllKeys (T@U T@U) T@U)
(declare-fun |KMBtreeModel.__default.AllKeys#canCall| (T@U) Bool)
(declare-fun KMBtreeModel.Node.Index_q (T@U) Bool)
(declare-fun |KMBtreeModel.__default.AllKeys#requires| (T@U T@U) Bool)
(declare-fun |lambda#182| (T@U Int Int T@U T@U T@U T@U) T@U)
(declare-fun KMBtreeModel.__default.AllKeysBelowBound (T@U Int) Bool)
(declare-fun |KMBtreeModel.__default.AllKeysBelowBound#canCall| (T@U Int) Bool)
(declare-fun |KMBtreeModel.__default.AllKeysBelowBound#requires| (T@U Int) Bool)
(declare-fun StartFuel_KMBtreeModel._default.AllKeys () T@U)
(declare-fun KMBtreeModel.__default.AllKeysAboveBound (T@U Int) Bool)
(declare-fun |KMBtreeModel.__default.AllKeysAboveBound#canCall| (T@U Int) Bool)
(declare-fun |KMBtreeModel.__default.AllKeysAboveBound#requires| (T@U Int) Bool)
(declare-fun |KMBtreeModel.__default.WF#requires| (T@U T@U) Bool)
(declare-fun |KMBtreeModel.__default.Interpretation#requires| (T@U T@U) Bool)
(declare-fun |lambda#186| (T@U T@U) T@U)
(declare-fun |lambda#187| (T@U T@U T@U) T@U)
(declare-fun |lambda#188| (T@U T@U T@U T@U T@U T@U Int) T@U)
(declare-fun |lambda#189| (T@U T@U T@U T@U Int) T@U)
(declare-fun KMBtreeModel.__default.MinKey (T@U T@U) T@U)
(declare-fun |KMBtreeModel.__default.MinKey#canCall| (T@U) Bool)
(declare-fun |KMBtreeModel.__default.MinKey#requires| (T@U T@U) Bool)
(declare-fun KMBtreeModel.__default.MaxKey (T@U T@U) T@U)
(declare-fun |KMBtreeModel.__default.MaxKey#canCall| (T@U) Bool)
(declare-fun |KMBtreeModel.__default.MaxKey#requires| (T@U T@U) Bool)
(declare-fun KMBtreeModel.__default.SplitLeaf (T@U T@U T@U T@U) Bool)
(declare-fun |KMBtreeModel.__default.SplitLeaf#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |KMBtreeModel.__default.SplitLeaf#requires| (T@U T@U T@U T@U) Bool)
(declare-fun KMBtreeModel.__default.SubIndex (T@U Int Int) T@U)
(declare-fun |KMBtreeModel.__default.SubIndex#canCall| (T@U Int Int) Bool)
(declare-fun |KMBtreeModel.__default.SubIndex#requires| (T@U Int Int) Bool)
(declare-fun KMBtreeModel.__default.SplitIndex (T@U T@U T@U T@U) Bool)
(declare-fun |KMBtreeModel.__default.SplitIndex#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |KMBtreeModel.__default.SplitIndex#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |$IsA#KMBtreeModel.Node| (T@U) Bool)
(declare-fun KMBtreeModel.__default.SplitNode (T@U T@U T@U T@U) Bool)
(declare-fun |KMBtreeModel.__default.SplitNode#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |KMBtreeModel.__default.SplitNode#requires| (T@U T@U T@U T@U) Bool)
(declare-fun KMBtreeModel.__default.SplitChildOfIndex (T@U T@U Int) Bool)
(declare-fun |KMBtreeModel.__default.SplitChildOfIndex#canCall| (T@U T@U Int) Bool)
(declare-fun |KMBtreeModel.__default.SplitChildOfIndex#requires| (T@U T@U Int) Bool)
(declare-fun StartFuel_Sequences._default.insert () T@U)
(declare-fun StartFuel_Sequences._default.replace1with2 () T@U)
(declare-fun KMBtreeModel.__default.InsertLeaf (T@U T@U T@U) T@U)
(declare-fun |KMBtreeModel.__default.InsertLeaf#canCall| (T@U T@U T@U) Bool)
(declare-fun |KMBtreeModel.__default.InsertLeaf#requires| (T@U T@U T@U) Bool)
(declare-fun KMBtreeModel.__default.Grow (T@U) T@U)
(declare-fun |KMBtreeModel.__default.Grow#canCall| (T@U) Bool)
(declare-fun |KMBtreeModel.__default.Grow#requires| (T@U) Bool)
(declare-fun KMBtreeModel.__default.ReplacePivot (T@U Int T@U) T@U)
(declare-fun |KMBtreeModel.__default.ReplacePivot#canCall| (T@U Int T@U) Bool)
(declare-fun |KMBtreeModel.__default.ReplacePivot#requires| (T@U Int T@U) Bool)
(declare-fun KMBtreeModel.__default.AppendChild (T@U T@U) Bool)
(declare-fun |KMBtreeModel.__default.AppendChild#canCall| (T@U T@U) Bool)
(declare-fun |KMBtreeModel.__default.AppendChild#requires| (T@U T@U) Bool)
(declare-fun KMBtreeModel.__default.NumElementsOfChildren (T@U T@U) Int)
(declare-fun |KMBtreeModel.__default.NumElementsOfChildren#canCall| (T@U) Bool)
(declare-fun |KMBtreeModel.__default.NumElementsOfChildren#requires| (T@U T@U) Bool)
(declare-fun |KMBtreeModel.__default.NumElements#canCall| (T@U) Bool)
(declare-fun KMBtreeModel.__default.NumElements (T@U T@U) Int)
(declare-fun |KMBtreeModel.__default.NumElements#requires| (T@U T@U) Bool)
(declare-fun KMBtreeModel.__default.ToSeqChildren (T@U T@U) T@U)
(declare-fun |KMBtreeModel.__default.ToSeqChildren#canCall| (T@U) Bool)
(declare-fun |KMBtreeModel.__default.ToSeqChildren#requires| (T@U T@U) Bool)
(declare-fun |KMBtreeModel.__default.ToSeq#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.Flatten () T@U)
(declare-fun Tclass.Arrays.__default () T@U)
(declare-fun |Arrays.__default.Aliases#requires| (T@U T@U T@U T@U) Bool)
(declare-fun MapType6Type (T@T T@T) T@T)
(declare-fun MapType6TypeInv0 (T@T) T@T)
(declare-fun MapType6TypeInv1 (T@T) T@T)
(declare-fun MapType6Select (T@U T@U T@U) T@U)
(declare-fun MapType6Store (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#1| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#2| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#3| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#4| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#5| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#6| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#8| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#9| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#10| (T@U T@U T@U Int Int T@U T@U T@U Int Int T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#11| (T@U T@U T@U Int Int T@U T@U T@U Int Int T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#12| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#13| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#14| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#15| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#16| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#17| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#18| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#19| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#20| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#21| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#22| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#23| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#24| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#25| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#26| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#27| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#28| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#29| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#30| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#31| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#32| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#33| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#34| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#35| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#36| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#37| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#38| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#39| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#40| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#41| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#42| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#43| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#44| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#45| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#46| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#47| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#48| (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#49| (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#50| (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#51| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#52| (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#53| (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#54| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#55| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#56| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#57| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#58| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#59| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#60| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#61| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#62| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#63| (T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0) :qid |typeInv:U_2_int| :pattern ( (int_2_U arg0)) ))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x)) :qid |cast:U_2_int| :pattern ( (U_2_int x)) ))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType) :qid |funType:int_2_U| :pattern ( (int_2_U arg0@@0)) ))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1) :qid |typeInv:U_2_real| :pattern ( (real_2_U arg0@@1)) ))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0)) :qid |cast:U_2_real| :pattern ( (U_2_real x@@0)) ))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType) :qid |funType:real_2_U| :pattern ( (real_2_U arg0@@2)) ))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3) :qid |typeInv:U_2_bool| :pattern ( (bool_2_U arg0@@3)) ))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1)) :qid |cast:U_2_bool| :pattern ( (U_2_bool x@@1)) ))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType) :qid |funType:bool_2_U| :pattern ( (bool_2_U arg0@@4)) ))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5) :qid |typeInv:U_2_rmode| :pattern ( (rmode_2_U arg0@@5)) ))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2)) :qid |cast:U_2_rmode| :pattern ( (U_2_rmode x@@2)) ))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType) :qid |funType:rmode_2_U| :pattern ( (rmode_2_U arg0@@6)) ))))
(assert (forall ((x@@3 T@U) ) (! (UOrdering2 x@@3 x@@3) :qid |bg:subtype-refl| :no-pattern (U_2_int x@@3) :no-pattern (U_2_bool x@@3) )))
(assert (forall ((x@@4 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@4))) (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@4 y) (UOrdering2 y z))) (UOrdering2 x@@4 z))) :qid |bg:subtype-trans| :pattern ( (UOrdering2 x@@4 y) (UOrdering2 y z)) )))
(assert (forall ((x@@5 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@5))) (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@5 y@@0) (UOrdering2 y@@0 x@@5)) (= x@@5 y@@0)))) :qid |bg:subtype-antisymm| :pattern ( (UOrdering2 x@@5 y@@0) (UOrdering2 y@@0 x@@5)) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor TyType) 4) (= (type TBool) TyType)) (= (type TChar) TyType)) (= (type TInt) TyType)) (= (type TReal) TyType)) (= (type TORDINAL) TyType)) (= (Ctor TyTagType) 5)) (= (type TagBool) TyTagType)) (= (type TagChar) TyTagType)) (= (type TagInt) TyTagType)) (= (type TagReal) TyTagType)) (= (type TagORDINAL) TyTagType)) (= (type TagSet) TyTagType)) (= (type TagISet) TyTagType)) (= (type TagMultiSet) TyTagType)) (= (type TagSeq) TyTagType)) (= (type TagMap) TyTagType)) (= (type TagIMap) TyTagType)) (= (type TagClass) TyTagType)) (= (Ctor ClassNameType) 6)) (= (type class._System.int) ClassNameType)) (= (type class._System.bool) ClassNameType)) (= (type class._System.set) ClassNameType)) (= (type class._System.seq) ClassNameType)) (= (type class._System.multiset) ClassNameType)) (forall ((arg0@@7 T@T) ) (! (= (Ctor (FieldType arg0@@7)) 7) :qid |ctor:FieldType| ))) (forall ((arg0@@8 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@8)) arg0@@8) :qid |typeInv:FieldTypeInv0| :pattern ( (FieldType arg0@@8)) ))) (= (type alloc) (FieldType boolType))) (= (Ctor NameFamilyType) 8)) (= (type allocName) NameFamilyType)) (= (type Tagclass._System.nat) TyTagType)) (= (type class._System.object?) ClassNameType)) (= (type Tagclass._System.object?) TyTagType)) (= (type Tagclass._System.object) TyTagType)) (= (type class._System.array?) ClassNameType)) (= (type Tagclass._System.array?) TyTagType)) (= (type Tagclass._System.array) TyTagType)) (= (type Tagclass._System.___hFunc0) TyTagType)) (= (type Tagclass._System.___hPartialFunc0) TyTagType)) (= (type Tagclass._System.___hTotalFunc0) TyTagType)) (= (type class._System.__default) ClassNameType)) (= (type Tagclass._System.__default) TyTagType)) (= (type Tagclass._System.___hFunc2) TyTagType)) (= (type Tagclass._System.___hPartialFunc2) TyTagType)) (= (type Tagclass._System.___hTotalFunc2) TyTagType)) (= (type Tagclass._System.___hFunc1) TyTagType)) (= (type Tagclass._System.___hPartialFunc1) TyTagType)) (= (type Tagclass._System.___hTotalFunc1) TyTagType)) (= (Ctor DtCtorIdType) 9)) (= (type |##_System._tuple#2._#Make2|) DtCtorIdType)) (= (type Tagclass._System.Tuple2) TyTagType)) (= (type class._System.Tuple2) ClassNameType)) (= (type Tagclass._System.___hFunc3) TyTagType)) (= (type Tagclass._System.___hPartialFunc3) TyTagType)) (= (type Tagclass._System.___hTotalFunc3) TyTagType)) (= (type |##_System._tuple#4._#Make4|) DtCtorIdType)) (= (type Tagclass._System.Tuple4) TyTagType)) (= (type class._System.Tuple4) ClassNameType)) (= (type Tagclass._System.___hFunc4) TyTagType)) (= (type Tagclass._System.___hPartialFunc4) TyTagType)) (= (type Tagclass._System.___hTotalFunc4) TyTagType)) (= (type |##_System._tuple#0._#Make0|) DtCtorIdType)) (= (type Tagclass._System.Tuple0) TyTagType)) (= (type class._System.Tuple0) ClassNameType)) (= (type class.KMBtree.__default) ClassNameType)) (= (type Tagclass.KMBtree.__default) TyTagType)) (= (type Tagclass.NativeTypes.uint64) TyTagType)) (= (type Tagclass.ValueMessage.Message) TyTagType)) (= (type Tagclass.NativeTypes.byte) TyTagType)) (= (type Tagclass.KMBtree.Node) TyTagType)) (= (type Tagclass.KMBtree.Node?) TyTagType)) (= (type Tagclass.KMBtreeModel.Node) TyTagType)) (= (type Tagclass.Options.Option) TyTagType)) (= (type Tagclass.KMBtree.NodeContents) TyTagType)) (= (type class.KMBtree.Node?) ClassNameType)) (= (type |##KMBtree.NodeContents.Leaf|) DtCtorIdType)) (= (type |##KMBtree.NodeContents.Index|) DtCtorIdType)) (= (type class.KMBtree.NodeContents) ClassNameType)) (= (type |##Options.Option.None|) DtCtorIdType)) (= (type |##Options.Option.Some|) DtCtorIdType)) (= (type class.Options.Option) ClassNameType)) (= (type class.Options.__default) ClassNameType)) (= (type Tagclass.Options.__default) TyTagType)) (= (type Tagclass.NativeTypes.sbyte) TyTagType)) (= (type class.NativeTypes.sbyte) ClassNameType)) (= (type class.NativeTypes.byte) ClassNameType)) (= (type Tagclass.NativeTypes.int16) TyTagType)) (= (type class.NativeTypes.int16) ClassNameType)) (= (type Tagclass.NativeTypes.uint16) TyTagType)) (= (type class.NativeTypes.uint16) ClassNameType)) (= (type Tagclass.NativeTypes.int32) TyTagType)) (= (type class.NativeTypes.int32) ClassNameType)) (= (type Tagclass.NativeTypes.uint32) TyTagType)) (= (type class.NativeTypes.uint32) ClassNameType)) (= (type Tagclass.NativeTypes.int64) TyTagType)) (= (type class.NativeTypes.int64) ClassNameType)) (= (type class.NativeTypes.uint64) ClassNameType)) (= (type Tagclass.NativeTypes.nat8) TyTagType)) (= (type class.NativeTypes.nat8) ClassNameType)) (= (type Tagclass.NativeTypes.nat16) TyTagType)) (= (type class.NativeTypes.nat16) ClassNameType)) (= (type Tagclass.NativeTypes.nat32) TyTagType)) (= (type class.NativeTypes.nat32) ClassNameType)) (= (type Tagclass.NativeTypes.nat64) TyTagType)) (= (type class.NativeTypes.nat64) ClassNameType)) (= (type class.NativeTypes.__default) ClassNameType)) (= (type Tagclass.NativeTypes.__default) TyTagType)) (= (type class.Sequences.__default) ClassNameType)) (= (type Tagclass.Sequences.__default) TyTagType)) (= (type class.Maps.__default) ClassNameType)) (= (type Tagclass.Maps.__default) TyTagType)) (= (type class.SeqComparison.__default) ClassNameType)) (= (type Tagclass.SeqComparison.__default) TyTagType)) (= (type class.NativeArrays.__default) ClassNameType)) (= (type Tagclass.NativeArrays.__default) TyTagType)) (= (type class.Byte__Order.__default) ClassNameType)) (= (type Tagclass.Byte__Order.__default) TyTagType)) (= (type class.Lexicographic__Byte__Order.__default) ClassNameType)) (= (type Tagclass.Lexicographic__Byte__Order.__default) TyTagType)) (= (type class.Lexicographic__Byte__Order__Impl.__default) ClassNameType)) (= (type Tagclass.Lexicographic__Byte__Order__Impl.__default) TyTagType)) (= (type class.Integer__Order.__default) ClassNameType)) (= (type Tagclass.Integer__Order.__default) TyTagType)) (= (type class.Mathematics.__default) ClassNameType)) (= (type Tagclass.Mathematics.__default) TyTagType)) (= (type Tagclass.ValueType.Value) TyTagType)) (= (type class.ValueType.__default) ClassNameType)) (= (type Tagclass.ValueType.__default) TyTagType)) (= (type |##ValueMessage.Delta.NoDelta|) DtCtorIdType)) (= (type Tagclass.ValueMessage.Delta) TyTagType)) (= (type class.ValueMessage.Delta) ClassNameType)) (= (type class.ValueMessage.__default) ClassNameType)) (= (type Tagclass.ValueMessage.__default) TyTagType)) (= (type |##ValueMessage.Message.Define|) DtCtorIdType)) (= (type |##ValueMessage.Message.Update|) DtCtorIdType)) (= (type class.ValueMessage.Message) ClassNameType)) (= (type class.KMBtreeModel.__default) ClassNameType)) (= (type Tagclass.KMBtreeModel.__default) TyTagType)) (= (type |##KMBtreeModel.Node.Leaf|) DtCtorIdType)) (= (type |##KMBtreeModel.Node.Index|) DtCtorIdType)) (= (type class.KMBtreeModel.Node) ClassNameType)) (= (type class.Arrays.__default) ClassNameType)) (= (type Tagclass.Arrays.__default) TyTagType)) (= (type field$height) NameFamilyType)) (= (type field$repr) NameFamilyType)) (= (type field$contents) NameFamilyType)))
(assert (distinct TBool TChar TInt TReal TORDINAL TagBool TagChar TagInt TagReal TagORDINAL TagSet TagISet TagMultiSet TagSeq TagMap TagIMap TagClass class._System.int class._System.bool class._System.set class._System.seq class._System.multiset alloc allocName Tagclass._System.nat class._System.object? Tagclass._System.object? Tagclass._System.object class._System.array? Tagclass._System.array? Tagclass._System.array Tagclass._System.___hFunc0 Tagclass._System.___hPartialFunc0 Tagclass._System.___hTotalFunc0 class._System.__default Tagclass._System.__default Tagclass._System.___hFunc2 Tagclass._System.___hPartialFunc2 Tagclass._System.___hTotalFunc2 Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 Tagclass._System.___hTotalFunc1 |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 class._System.Tuple2 Tagclass._System.___hFunc3 Tagclass._System.___hPartialFunc3 Tagclass._System.___hTotalFunc3 |##_System._tuple#4._#Make4| Tagclass._System.Tuple4 class._System.Tuple4 Tagclass._System.___hFunc4 Tagclass._System.___hPartialFunc4 Tagclass._System.___hTotalFunc4 |##_System._tuple#0._#Make0| Tagclass._System.Tuple0 class._System.Tuple0 class.KMBtree.__default Tagclass.KMBtree.__default Tagclass.NativeTypes.uint64 Tagclass.ValueMessage.Message Tagclass.NativeTypes.byte Tagclass.KMBtree.Node Tagclass.KMBtree.Node? Tagclass.KMBtreeModel.Node Tagclass.Options.Option Tagclass.KMBtree.NodeContents class.KMBtree.Node? |##KMBtree.NodeContents.Leaf| |##KMBtree.NodeContents.Index| class.KMBtree.NodeContents |##Options.Option.None| |##Options.Option.Some| class.Options.Option class.Options.__default Tagclass.Options.__default Tagclass.NativeTypes.sbyte class.NativeTypes.sbyte class.NativeTypes.byte Tagclass.NativeTypes.int16 class.NativeTypes.int16 Tagclass.NativeTypes.uint16 class.NativeTypes.uint16 Tagclass.NativeTypes.int32 class.NativeTypes.int32 Tagclass.NativeTypes.uint32 class.NativeTypes.uint32 Tagclass.NativeTypes.int64 class.NativeTypes.int64 class.NativeTypes.uint64 Tagclass.NativeTypes.nat8 class.NativeTypes.nat8 Tagclass.NativeTypes.nat16 class.NativeTypes.nat16 Tagclass.NativeTypes.nat32 class.NativeTypes.nat32 Tagclass.NativeTypes.nat64 class.NativeTypes.nat64 class.NativeTypes.__default Tagclass.NativeTypes.__default class.Sequences.__default Tagclass.Sequences.__default class.Maps.__default Tagclass.Maps.__default class.SeqComparison.__default Tagclass.SeqComparison.__default class.NativeArrays.__default Tagclass.NativeArrays.__default class.Byte__Order.__default Tagclass.Byte__Order.__default class.Lexicographic__Byte__Order.__default Tagclass.Lexicographic__Byte__Order.__default class.Lexicographic__Byte__Order__Impl.__default Tagclass.Lexicographic__Byte__Order__Impl.__default class.Integer__Order.__default Tagclass.Integer__Order.__default class.Mathematics.__default Tagclass.Mathematics.__default Tagclass.ValueType.Value class.ValueType.__default Tagclass.ValueType.__default |##ValueMessage.Delta.NoDelta| Tagclass.ValueMessage.Delta class.ValueMessage.Delta class.ValueMessage.__default Tagclass.ValueMessage.__default |##ValueMessage.Message.Define| |##ValueMessage.Message.Update| class.ValueMessage.Message class.KMBtreeModel.__default Tagclass.KMBtreeModel.__default |##KMBtreeModel.Node.Leaf| |##KMBtreeModel.Node.Index| class.KMBtreeModel.Node class.Arrays.__default Tagclass.Arrays.__default field$height field$repr field$contents) )
(assert $$Language$Dafny)
(assert (forall ((arg0@@9 Int) ) (! (= (type (TBitvector arg0@@9)) TyType) :qid |funType:TBitvector| :pattern ( (TBitvector arg0@@9)) )))
(assert (forall ((w Int) ) (! (= (Inv0_TBitvector (TBitvector w)) w) :qid |DafnyPre.32:15| :skolemid |6642| :pattern ( (TBitvector w)) )))
(assert  (and (forall ((arg0@@10 T@U) ) (! (= (type (TSet arg0@@10)) TyType) :qid |funType:TSet| :pattern ( (TSet arg0@@10)) )) (forall ((arg0@@11 T@U) ) (! (= (type (Inv0_TSet arg0@@11)) TyType) :qid |funType:Inv0_TSet| :pattern ( (Inv0_TSet arg0@@11)) ))))
(assert (forall ((t T@U) ) (!  (=> (= (type t) TyType) (= (Inv0_TSet (TSet t)) t)) :qid |DafnyPre.34:15| :skolemid |6643| :pattern ( (TSet t)) )))
(assert  (and (forall ((arg0@@12 T@U) ) (! (= (type (TISet arg0@@12)) TyType) :qid |funType:TISet| :pattern ( (TISet arg0@@12)) )) (forall ((arg0@@13 T@U) ) (! (= (type (Inv0_TISet arg0@@13)) TyType) :qid |funType:Inv0_TISet| :pattern ( (Inv0_TISet arg0@@13)) ))))
(assert (forall ((t@@0 T@U) ) (!  (=> (= (type t@@0) TyType) (= (Inv0_TISet (TISet t@@0)) t@@0)) :qid |DafnyPre.36:15| :skolemid |6644| :pattern ( (TISet t@@0)) )))
(assert  (and (forall ((arg0@@14 T@U) ) (! (= (type (TSeq arg0@@14)) TyType) :qid |funType:TSeq| :pattern ( (TSeq arg0@@14)) )) (forall ((arg0@@15 T@U) ) (! (= (type (Inv0_TSeq arg0@@15)) TyType) :qid |funType:Inv0_TSeq| :pattern ( (Inv0_TSeq arg0@@15)) ))))
(assert (forall ((t@@1 T@U) ) (!  (=> (= (type t@@1) TyType) (= (Inv0_TSeq (TSeq t@@1)) t@@1)) :qid |DafnyPre.38:15| :skolemid |6645| :pattern ( (TSeq t@@1)) )))
(assert  (and (forall ((arg0@@16 T@U) ) (! (= (type (TMultiSet arg0@@16)) TyType) :qid |funType:TMultiSet| :pattern ( (TMultiSet arg0@@16)) )) (forall ((arg0@@17 T@U) ) (! (= (type (Inv0_TMultiSet arg0@@17)) TyType) :qid |funType:Inv0_TMultiSet| :pattern ( (Inv0_TMultiSet arg0@@17)) ))))
(assert (forall ((t@@2 T@U) ) (!  (=> (= (type t@@2) TyType) (= (Inv0_TMultiSet (TMultiSet t@@2)) t@@2)) :qid |DafnyPre.40:15| :skolemid |6646| :pattern ( (TMultiSet t@@2)) )))
(assert  (and (forall ((arg0@@18 T@U) (arg1 T@U) ) (! (= (type (TMap arg0@@18 arg1)) TyType) :qid |funType:TMap| :pattern ( (TMap arg0@@18 arg1)) )) (forall ((arg0@@19 T@U) ) (! (= (type (Inv0_TMap arg0@@19)) TyType) :qid |funType:Inv0_TMap| :pattern ( (Inv0_TMap arg0@@19)) ))))
(assert (forall ((t@@3 T@U) (u T@U) ) (!  (=> (and (= (type t@@3) TyType) (= (type u) TyType)) (= (Inv0_TMap (TMap t@@3 u)) t@@3)) :qid |DafnyPre.43:15| :skolemid |6647| :pattern ( (TMap t@@3 u)) )))
(assert (forall ((arg0@@20 T@U) ) (! (= (type (Inv1_TMap arg0@@20)) TyType) :qid |funType:Inv1_TMap| :pattern ( (Inv1_TMap arg0@@20)) )))
(assert (forall ((t@@4 T@U) (u@@0 T@U) ) (!  (=> (and (= (type t@@4) TyType) (= (type u@@0) TyType)) (= (Inv1_TMap (TMap t@@4 u@@0)) u@@0)) :qid |DafnyPre.44:15| :skolemid |6648| :pattern ( (TMap t@@4 u@@0)) )))
(assert  (and (forall ((arg0@@21 T@U) (arg1@@0 T@U) ) (! (= (type (TIMap arg0@@21 arg1@@0)) TyType) :qid |funType:TIMap| :pattern ( (TIMap arg0@@21 arg1@@0)) )) (forall ((arg0@@22 T@U) ) (! (= (type (Inv0_TIMap arg0@@22)) TyType) :qid |funType:Inv0_TIMap| :pattern ( (Inv0_TIMap arg0@@22)) ))))
(assert (forall ((t@@5 T@U) (u@@1 T@U) ) (!  (=> (and (= (type t@@5) TyType) (= (type u@@1) TyType)) (= (Inv0_TIMap (TIMap t@@5 u@@1)) t@@5)) :qid |DafnyPre.47:15| :skolemid |6649| :pattern ( (TIMap t@@5 u@@1)) )))
(assert (forall ((arg0@@23 T@U) ) (! (= (type (Inv1_TIMap arg0@@23)) TyType) :qid |funType:Inv1_TIMap| :pattern ( (Inv1_TIMap arg0@@23)) )))
(assert (forall ((t@@6 T@U) (u@@2 T@U) ) (!  (=> (and (= (type t@@6) TyType) (= (type u@@2) TyType)) (= (Inv1_TIMap (TIMap t@@6 u@@2)) u@@2)) :qid |DafnyPre.48:15| :skolemid |6650| :pattern ( (TIMap t@@6 u@@2)) )))
(assert (forall ((arg0@@24 T@U) ) (! (= (type (Tag arg0@@24)) TyTagType) :qid |funType:Tag| :pattern ( (Tag arg0@@24)) )))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert (= (Tag TORDINAL) TagORDINAL))
(assert (forall ((t@@7 T@U) ) (!  (=> (= (type t@@7) TyType) (= (Tag (TSet t@@7)) TagSet)) :qid |DafnyPre.74:15| :skolemid |6651| :pattern ( (TSet t@@7)) )))
(assert (forall ((t@@8 T@U) ) (!  (=> (= (type t@@8) TyType) (= (Tag (TISet t@@8)) TagISet)) :qid |DafnyPre.75:15| :skolemid |6652| :pattern ( (TISet t@@8)) )))
(assert (forall ((t@@9 T@U) ) (!  (=> (= (type t@@9) TyType) (= (Tag (TMultiSet t@@9)) TagMultiSet)) :qid |DafnyPre.76:15| :skolemid |6653| :pattern ( (TMultiSet t@@9)) )))
(assert (forall ((t@@10 T@U) ) (!  (=> (= (type t@@10) TyType) (= (Tag (TSeq t@@10)) TagSeq)) :qid |DafnyPre.77:15| :skolemid |6654| :pattern ( (TSeq t@@10)) )))
(assert (forall ((t@@11 T@U) (u@@3 T@U) ) (!  (=> (and (= (type t@@11) TyType) (= (type u@@3) TyType)) (= (Tag (TMap t@@11 u@@3)) TagMap)) :qid |DafnyPre.78:15| :skolemid |6655| :pattern ( (TMap t@@11 u@@3)) )))
(assert (forall ((t@@12 T@U) (u@@4 T@U) ) (!  (=> (and (= (type t@@12) TyType) (= (type u@@4) TyType)) (= (Tag (TIMap t@@12 u@@4)) TagIMap)) :qid |DafnyPre.79:15| :skolemid |6656| :pattern ( (TIMap t@@12 u@@4)) )))
(assert (forall ((arg0@@25 T@U) ) (! (let ((T (type arg0@@25))) (= (type (Lit arg0@@25)) T)) :qid |funType:Lit| :pattern ( (Lit arg0@@25)) )))
(assert (forall ((x@@6 T@U) ) (! (= (Lit x@@6) x@@6) :qid |DafnyPre.84:29| :skolemid |6657| :pattern ( (Lit x@@6)) )))
(assert  (and (= (Ctor BoxType) 10) (forall ((arg0@@26 T@U) ) (! (= (type ($Box arg0@@26)) BoxType) :qid |funType:$Box| :pattern ( ($Box arg0@@26)) ))))
(assert (forall ((x@@7 T@U) ) (! (= ($Box (Lit x@@7)) (Lit ($Box x@@7))) :qid |DafnyPre.85:18| :skolemid |6658| :pattern ( ($Box (Lit x@@7))) )))
(assert (forall ((x@@8 Int) ) (! (= (LitInt x@@8) x@@8) :qid |DafnyPre.90:29| :skolemid |6659| :pattern ( (LitInt x@@8)) )))
(assert (forall ((x@@9 Int) ) (! (= ($Box (int_2_U (LitInt x@@9))) (Lit ($Box (int_2_U x@@9)))) :qid |DafnyPre.91:15| :skolemid |6660| :pattern ( ($Box (int_2_U (LitInt x@@9)))) )))
(assert (forall ((x@@10 Real) ) (! (= (LitReal x@@10) x@@10) :qid |DafnyPre.92:30| :skolemid |6661| :pattern ( (LitReal x@@10)) )))
(assert (forall ((x@@11 Real) ) (! (= ($Box (real_2_U (LitReal x@@11))) (Lit ($Box (real_2_U x@@11)))) :qid |DafnyPre.93:15| :skolemid |6662| :pattern ( ($Box (real_2_U (LitReal x@@11)))) )))
(assert  (and (= (Ctor charType) 11) (forall ((arg0@@27 Int) ) (! (= (type (|char#FromInt| arg0@@27)) charType) :qid |funType:char#FromInt| :pattern ( (|char#FromInt| arg0@@27)) ))))
(assert (forall ((ch T@U) ) (!  (=> (= (type ch) charType) (and (and (= (|char#FromInt| (|char#ToInt| ch)) ch) (<= 0 (|char#ToInt| ch))) (< (|char#ToInt| ch) 65536))) :qid |DafnyPre.102:15| :skolemid |6663| :pattern ( (|char#ToInt| ch)) )))
(assert (forall ((n Int) ) (!  (=> (and (<= 0 n) (< n 65536)) (= (|char#ToInt| (|char#FromInt| n)) n)) :qid |DafnyPre.106:15| :skolemid |6664| :pattern ( (|char#FromInt| n)) )))
(assert (forall ((arg0@@28 T@U) (arg1@@1 T@U) ) (! (= (type (|char#Plus| arg0@@28 arg1@@1)) charType) :qid |funType:char#Plus| :pattern ( (|char#Plus| arg0@@28 arg1@@1)) )))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (and (= (type a) charType) (= (type b) charType)) (= (|char#Plus| a b) (|char#FromInt| (+ (|char#ToInt| a) (|char#ToInt| b))))) :qid |DafnyPre.112:15| :skolemid |6665| :pattern ( (|char#Plus| a b)) )))
(assert (forall ((arg0@@29 T@U) (arg1@@2 T@U) ) (! (= (type (|char#Minus| arg0@@29 arg1@@2)) charType) :qid |funType:char#Minus| :pattern ( (|char#Minus| arg0@@29 arg1@@2)) )))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (= (type a@@0) charType) (= (type b@@0) charType)) (= (|char#Minus| a@@0 b@@0) (|char#FromInt| (- (|char#ToInt| a@@0) (|char#ToInt| b@@0))))) :qid |DafnyPre.115:15| :skolemid |6666| :pattern ( (|char#Minus| a@@0 b@@0)) )))
(assert (forall ((T@@0 T@T) (arg0@@30 T@U) ) (! (= (type ($Unbox T@@0 arg0@@30)) T@@0) :qid |funType:$Unbox| :pattern ( ($Unbox T@@0 arg0@@30)) )))
(assert (forall ((x@@12 T@U) ) (! (let ((T@@1 (type x@@12))) (= ($Unbox T@@1 ($Box x@@12)) x@@12)) :qid |DafnyPre.142:18| :skolemid |6667| :pattern ( ($Box x@@12)) )))
(assert (forall ((bx T@U) ) (!  (=> (and (= (type bx) BoxType) ($IsBox bx TInt)) (and (= ($Box ($Unbox intType bx)) bx) ($Is ($Unbox intType bx) TInt))) :qid |DafnyPre.144:15| :skolemid |6668| :pattern ( ($IsBox bx TInt)) )))
(assert (forall ((bx@@0 T@U) ) (!  (=> (and (= (type bx@@0) BoxType) ($IsBox bx@@0 TReal)) (and (= ($Box ($Unbox realType bx@@0)) bx@@0) ($Is ($Unbox realType bx@@0) TReal))) :qid |DafnyPre.147:15| :skolemid |6669| :pattern ( ($IsBox bx@@0 TReal)) )))
(assert (forall ((bx@@1 T@U) ) (!  (=> (and (= (type bx@@1) BoxType) ($IsBox bx@@1 TBool)) (and (= ($Box ($Unbox boolType bx@@1)) bx@@1) ($Is ($Unbox boolType bx@@1) TBool))) :qid |DafnyPre.150:15| :skolemid |6670| :pattern ( ($IsBox bx@@1 TBool)) )))
(assert (forall ((bx@@2 T@U) ) (!  (=> (and (= (type bx@@2) BoxType) ($IsBox bx@@2 TChar)) (and (= ($Box ($Unbox charType bx@@2)) bx@@2) ($Is ($Unbox charType bx@@2) TChar))) :qid |DafnyPre.153:15| :skolemid |6671| :pattern ( ($IsBox bx@@2 TChar)) )))
(assert  (and (and (and (and (and (and (forall ((arg0@@31 T@T) (arg1@@3 T@T) ) (! (= (Ctor (MapType0Type arg0@@31 arg1@@3)) 12) :qid |ctor:MapType0Type| )) (forall ((arg0@@32 T@T) (arg1@@4 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@32 arg1@@4)) arg0@@32) :qid |typeInv:MapType0TypeInv0| :pattern ( (MapType0Type arg0@@32 arg1@@4)) ))) (forall ((arg0@@33 T@T) (arg1@@5 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@33 arg1@@5)) arg1@@5) :qid |typeInv:MapType0TypeInv1| :pattern ( (MapType0Type arg0@@33 arg1@@5)) ))) (forall ((arg0@@34 T@U) (arg1@@6 T@U) ) (! (let ((aVar1 (MapType0TypeInv1 (type arg0@@34)))) (= (type (MapType0Select arg0@@34 arg1@@6)) aVar1)) :qid |funType:MapType0Select| :pattern ( (MapType0Select arg0@@34 arg1@@6)) ))) (forall ((arg0@@35 T@U) (arg1@@7 T@U) (arg2 T@U) ) (! (let ((aVar1@@0 (type arg2))) (let ((aVar0 (type arg1@@7))) (= (type (MapType0Store arg0@@35 arg1@@7 arg2)) (MapType0Type aVar0 aVar1@@0)))) :qid |funType:MapType0Store| :pattern ( (MapType0Store arg0@@35 arg1@@7 arg2)) ))) (forall ((m T@U) (x0 T@U) (val T@U) ) (! (let ((aVar1@@1 (MapType0TypeInv1 (type m)))) (=> (= (type val) aVar1@@1) (= (MapType0Select (MapType0Store m x0 val) x0) val))) :qid |mapAx0:MapType0Select| :weight 0 ))) (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 val@@0) y0) (MapType0Select m@@0 y0))) :qid |mapAx1:MapType0Select:0| :weight 0 )) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (y0@@0 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@1 x0@@1 val@@1) y0@@0) (MapType0Select m@@1 y0@@0))) :qid |mapAx2:MapType0Select| :weight 0 )))))
(assert (forall ((bx@@3 T@U) (t@@13 T@U) ) (!  (=> (and (and (= (type bx@@3) BoxType) (= (type t@@13) TyType)) ($IsBox bx@@3 (TSet t@@13))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@3)) bx@@3) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@3) (TSet t@@13)))) :qid |DafnyPre.156:15| :skolemid |6672| :pattern ( ($IsBox bx@@3 (TSet t@@13))) )))
(assert (forall ((bx@@4 T@U) (t@@14 T@U) ) (!  (=> (and (and (= (type bx@@4) BoxType) (= (type t@@14) TyType)) ($IsBox bx@@4 (TISet t@@14))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@4)) bx@@4) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@4) (TISet t@@14)))) :qid |DafnyPre.159:15| :skolemid |6673| :pattern ( ($IsBox bx@@4 (TISet t@@14))) )))
(assert (forall ((bx@@5 T@U) (t@@15 T@U) ) (!  (=> (and (and (= (type bx@@5) BoxType) (= (type t@@15) TyType)) ($IsBox bx@@5 (TMultiSet t@@15))) (and (= ($Box ($Unbox (MapType0Type BoxType intType) bx@@5)) bx@@5) ($Is ($Unbox (MapType0Type BoxType intType) bx@@5) (TMultiSet t@@15)))) :qid |DafnyPre.162:15| :skolemid |6674| :pattern ( ($IsBox bx@@5 (TMultiSet t@@15))) )))
(assert  (and (forall ((arg0@@36 T@T) ) (! (= (Ctor (SeqType arg0@@36)) 13) :qid |ctor:SeqType| )) (forall ((arg0@@37 T@T) ) (! (= (SeqTypeInv0 (SeqType arg0@@37)) arg0@@37) :qid |typeInv:SeqTypeInv0| :pattern ( (SeqType arg0@@37)) ))))
(assert (forall ((bx@@6 T@U) (t@@16 T@U) ) (!  (=> (and (and (= (type bx@@6) BoxType) (= (type t@@16) TyType)) ($IsBox bx@@6 (TSeq t@@16))) (and (= ($Box ($Unbox (SeqType BoxType) bx@@6)) bx@@6) ($Is ($Unbox (SeqType BoxType) bx@@6) (TSeq t@@16)))) :qid |DafnyPre.165:15| :skolemid |6675| :pattern ( ($IsBox bx@@6 (TSeq t@@16))) )))
(assert  (and (and (forall ((arg0@@38 T@T) (arg1@@8 T@T) ) (! (= (Ctor (MapType arg0@@38 arg1@@8)) 14) :qid |ctor:MapType| )) (forall ((arg0@@39 T@T) (arg1@@9 T@T) ) (! (= (MapTypeInv0 (MapType arg0@@39 arg1@@9)) arg0@@39) :qid |typeInv:MapTypeInv0| :pattern ( (MapType arg0@@39 arg1@@9)) ))) (forall ((arg0@@40 T@T) (arg1@@10 T@T) ) (! (= (MapTypeInv1 (MapType arg0@@40 arg1@@10)) arg1@@10) :qid |typeInv:MapTypeInv1| :pattern ( (MapType arg0@@40 arg1@@10)) ))))
(assert (forall ((bx@@7 T@U) (s T@U) (t@@17 T@U) ) (!  (=> (and (and (and (= (type bx@@7) BoxType) (= (type s) TyType)) (= (type t@@17) TyType)) ($IsBox bx@@7 (TMap s t@@17))) (and (= ($Box ($Unbox (MapType BoxType BoxType) bx@@7)) bx@@7) ($Is ($Unbox (MapType BoxType BoxType) bx@@7) (TMap s t@@17)))) :qid |DafnyPre.168:15| :skolemid |6676| :pattern ( ($IsBox bx@@7 (TMap s t@@17))) )))
(assert  (and (and (forall ((arg0@@41 T@T) (arg1@@11 T@T) ) (! (= (Ctor (IMapType arg0@@41 arg1@@11)) 15) :qid |ctor:IMapType| )) (forall ((arg0@@42 T@T) (arg1@@12 T@T) ) (! (= (IMapTypeInv0 (IMapType arg0@@42 arg1@@12)) arg0@@42) :qid |typeInv:IMapTypeInv0| :pattern ( (IMapType arg0@@42 arg1@@12)) ))) (forall ((arg0@@43 T@T) (arg1@@13 T@T) ) (! (= (IMapTypeInv1 (IMapType arg0@@43 arg1@@13)) arg1@@13) :qid |typeInv:IMapTypeInv1| :pattern ( (IMapType arg0@@43 arg1@@13)) ))))
(assert (forall ((bx@@8 T@U) (s@@0 T@U) (t@@18 T@U) ) (!  (=> (and (and (and (= (type bx@@8) BoxType) (= (type s@@0) TyType)) (= (type t@@18) TyType)) ($IsBox bx@@8 (TIMap s@@0 t@@18))) (and (= ($Box ($Unbox (IMapType BoxType BoxType) bx@@8)) bx@@8) ($Is ($Unbox (IMapType BoxType BoxType) bx@@8) (TIMap s@@0 t@@18)))) :qid |DafnyPre.171:15| :skolemid |6677| :pattern ( ($IsBox bx@@8 (TIMap s@@0 t@@18))) )))
(assert (forall ((v T@U) (t@@19 T@U) ) (!  (=> (= (type t@@19) TyType) (and (=> ($IsBox ($Box v) t@@19) ($Is v t@@19)) (=> ($Is v t@@19) ($IsBox ($Box v) t@@19)))) :qid |DafnyPre.175:18| :skolemid |6678| :pattern ( ($IsBox ($Box v) t@@19)) )))
(assert  (and (and (and (and (and (forall ((arg0@@44 T@U) (arg1@@14 T@U) ) (! (let ((alpha@@1 (FieldTypeInv0 (type arg1@@14)))) (= (type (MapType1Select arg0@@44 arg1@@14)) alpha@@1)) :qid |funType:MapType1Select| :pattern ( (MapType1Select arg0@@44 arg1@@14)) )) (= (Ctor MapType1Type) 16)) (forall ((arg0@@45 T@U) (arg1@@15 T@U) (arg2@@0 T@U) ) (! (= (type (MapType1Store arg0@@45 arg1@@15 arg2@@0)) MapType1Type) :qid |funType:MapType1Store| :pattern ( (MapType1Store arg0@@45 arg1@@15 arg2@@0)) ))) (forall ((m@@2 T@U) (x0@@2 T@U) (val@@2 T@U) ) (! (let ((alpha@@2 (FieldTypeInv0 (type x0@@2)))) (=> (= (type val@@2) alpha@@2) (= (MapType1Select (MapType1Store m@@2 x0@@2 val@@2) x0@@2) val@@2))) :qid |mapAx0:MapType1Select| :weight 0 ))) (and (forall ((val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 val@@3) y0@@1) (MapType1Select m@@3 y0@@1))) :qid |mapAx1:MapType1Select:0| :weight 0 )) (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@4 x0@@4 val@@4) y0@@2) (MapType1Select m@@4 y0@@2))) :qid |mapAx2:MapType1Select| :weight 0 )))) (= (Ctor refType) 17)))
(assert (forall ((v@@0 T@U) (t@@20 T@U) (h T@U) ) (!  (=> (and (= (type t@@20) TyType) (= (type h) (MapType0Type refType MapType1Type))) (and (=> ($IsAllocBox ($Box v@@0) t@@20 h) ($IsAlloc v@@0 t@@20 h)) (=> ($IsAlloc v@@0 t@@20 h) ($IsAllocBox ($Box v@@0) t@@20 h)))) :qid |DafnyPre.178:18| :skolemid |6679| :pattern ( ($IsAllocBox ($Box v@@0) t@@20 h)) )))
(assert (forall ((v@@1 T@U) ) (!  (=> (= (type v@@1) intType) ($Is v@@1 TInt)) :qid |DafnyPre.196:14| :skolemid |6680| :pattern ( ($Is v@@1 TInt)) )))
(assert (forall ((v@@2 T@U) ) (!  (=> (= (type v@@2) realType) ($Is v@@2 TReal)) :qid |DafnyPre.197:14| :skolemid |6681| :pattern ( ($Is v@@2 TReal)) )))
(assert (forall ((v@@3 T@U) ) (!  (=> (= (type v@@3) boolType) ($Is v@@3 TBool)) :qid |DafnyPre.198:14| :skolemid |6682| :pattern ( ($Is v@@3 TBool)) )))
(assert (forall ((v@@4 T@U) ) (!  (=> (= (type v@@4) charType) ($Is v@@4 TChar)) :qid |DafnyPre.199:14| :skolemid |6683| :pattern ( ($Is v@@4 TChar)) )))
(assert (forall ((v@@5 T@U) ) (!  (=> (= (type v@@5) BoxType) ($Is v@@5 TORDINAL)) :qid |DafnyPre.200:14| :skolemid |6684| :pattern ( ($Is v@@5 TORDINAL)) )))
(assert (forall ((h@@0 T@U) (v@@6 T@U) ) (!  (=> (and (= (type h@@0) (MapType0Type refType MapType1Type)) (= (type v@@6) intType)) ($IsAlloc v@@6 TInt h@@0)) :qid |DafnyPre.202:14| :skolemid |6685| :pattern ( ($IsAlloc v@@6 TInt h@@0)) )))
(assert (forall ((h@@1 T@U) (v@@7 T@U) ) (!  (=> (and (= (type h@@1) (MapType0Type refType MapType1Type)) (= (type v@@7) realType)) ($IsAlloc v@@7 TReal h@@1)) :qid |DafnyPre.203:14| :skolemid |6686| :pattern ( ($IsAlloc v@@7 TReal h@@1)) )))
(assert (forall ((h@@2 T@U) (v@@8 T@U) ) (!  (=> (and (= (type h@@2) (MapType0Type refType MapType1Type)) (= (type v@@8) boolType)) ($IsAlloc v@@8 TBool h@@2)) :qid |DafnyPre.204:14| :skolemid |6687| :pattern ( ($IsAlloc v@@8 TBool h@@2)) )))
(assert (forall ((h@@3 T@U) (v@@9 T@U) ) (!  (=> (and (= (type h@@3) (MapType0Type refType MapType1Type)) (= (type v@@9) charType)) ($IsAlloc v@@9 TChar h@@3)) :qid |DafnyPre.205:14| :skolemid |6688| :pattern ( ($IsAlloc v@@9 TChar h@@3)) )))
(assert (forall ((h@@4 T@U) (v@@10 T@U) ) (!  (=> (and (= (type h@@4) (MapType0Type refType MapType1Type)) (= (type v@@10) BoxType)) ($IsAlloc v@@10 TORDINAL h@@4)) :qid |DafnyPre.206:14| :skolemid |6689| :pattern ( ($IsAlloc v@@10 TORDINAL h@@4)) )))
(assert (forall ((v@@11 T@U) (t0 T@U) ) (!  (=> (and (= (type v@@11) (MapType0Type BoxType boolType)) (= (type t0) TyType)) (and (=> ($Is v@@11 (TSet t0)) (forall ((bx@@9 T@U) ) (!  (=> (and (= (type bx@@9) BoxType) (U_2_bool (MapType0Select v@@11 bx@@9))) ($IsBox bx@@9 t0)) :qid |DafnyPre.210:11| :skolemid |6690| :pattern ( (MapType0Select v@@11 bx@@9)) ))) (=> (forall ((bx@@10 T@U) ) (!  (=> (and (= (type bx@@10) BoxType) (U_2_bool (MapType0Select v@@11 bx@@10))) ($IsBox bx@@10 t0)) :qid |DafnyPre.210:11| :skolemid |6690| :pattern ( (MapType0Select v@@11 bx@@10)) )) ($Is v@@11 (TSet t0))))) :qid |DafnyPre.208:15| :skolemid |6691| :pattern ( ($Is v@@11 (TSet t0))) )))
(assert (forall ((v@@12 T@U) (t0@@0 T@U) ) (!  (=> (and (= (type v@@12) (MapType0Type BoxType boolType)) (= (type t0@@0) TyType)) (and (=> ($Is v@@12 (TISet t0@@0)) (forall ((bx@@11 T@U) ) (!  (=> (and (= (type bx@@11) BoxType) (U_2_bool (MapType0Select v@@12 bx@@11))) ($IsBox bx@@11 t0@@0)) :qid |DafnyPre.214:11| :skolemid |6692| :pattern ( (MapType0Select v@@12 bx@@11)) ))) (=> (forall ((bx@@12 T@U) ) (!  (=> (and (= (type bx@@12) BoxType) (U_2_bool (MapType0Select v@@12 bx@@12))) ($IsBox bx@@12 t0@@0)) :qid |DafnyPre.214:11| :skolemid |6692| :pattern ( (MapType0Select v@@12 bx@@12)) )) ($Is v@@12 (TISet t0@@0))))) :qid |DafnyPre.212:15| :skolemid |6693| :pattern ( ($Is v@@12 (TISet t0@@0))) )))
(assert (forall ((v@@13 T@U) (t0@@1 T@U) ) (!  (=> (and (= (type v@@13) (MapType0Type BoxType intType)) (= (type t0@@1) TyType)) (and (=> ($Is v@@13 (TMultiSet t0@@1)) (forall ((bx@@13 T@U) ) (!  (=> (and (= (type bx@@13) BoxType) (< 0 (U_2_int (MapType0Select v@@13 bx@@13)))) ($IsBox bx@@13 t0@@1)) :qid |DafnyPre.218:11| :skolemid |6694| :pattern ( (MapType0Select v@@13 bx@@13)) ))) (=> (forall ((bx@@14 T@U) ) (!  (=> (and (= (type bx@@14) BoxType) (< 0 (U_2_int (MapType0Select v@@13 bx@@14)))) ($IsBox bx@@14 t0@@1)) :qid |DafnyPre.218:11| :skolemid |6694| :pattern ( (MapType0Select v@@13 bx@@14)) )) ($Is v@@13 (TMultiSet t0@@1))))) :qid |DafnyPre.216:15| :skolemid |6695| :pattern ( ($Is v@@13 (TMultiSet t0@@1))) )))
(assert (forall ((v@@14 T@U) (t0@@2 T@U) ) (!  (=> (and (and (= (type v@@14) (MapType0Type BoxType intType)) (= (type t0@@2) TyType)) ($Is v@@14 (TMultiSet t0@@2))) ($IsGoodMultiSet v@@14)) :qid |DafnyPre.220:15| :skolemid |6696| :pattern ( ($Is v@@14 (TMultiSet t0@@2))) )))
(assert (forall ((arg0@@46 T@U) (arg1@@16 Int) ) (! (let ((T@@2 (SeqTypeInv0 (type arg0@@46)))) (= (type (|Seq#Index| arg0@@46 arg1@@16)) T@@2)) :qid |funType:Seq#Index| :pattern ( (|Seq#Index| arg0@@46 arg1@@16)) )))
(assert (forall ((v@@15 T@U) (t0@@3 T@U) ) (!  (=> (and (= (type v@@15) (SeqType BoxType)) (= (type t0@@3) TyType)) (and (=> ($Is v@@15 (TSeq t0@@3)) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@15))) ($IsBox (|Seq#Index| v@@15 i) t0@@3)) :qid |DafnyPre.224:11| :skolemid |6697| :pattern ( (|Seq#Index| v@@15 i)) ))) (=> (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@15))) ($IsBox (|Seq#Index| v@@15 i@@0) t0@@3)) :qid |DafnyPre.224:11| :skolemid |6697| :pattern ( (|Seq#Index| v@@15 i@@0)) )) ($Is v@@15 (TSeq t0@@3))))) :qid |DafnyPre.222:15| :skolemid |6698| :pattern ( ($Is v@@15 (TSeq t0@@3))) )))
(assert (forall ((v@@16 T@U) (t0@@4 T@U) (h@@5 T@U) ) (!  (=> (and (and (= (type v@@16) (MapType0Type BoxType boolType)) (= (type t0@@4) TyType)) (= (type h@@5) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@16 (TSet t0@@4) h@@5) (forall ((bx@@15 T@U) ) (!  (=> (and (= (type bx@@15) BoxType) (U_2_bool (MapType0Select v@@16 bx@@15))) ($IsAllocBox bx@@15 t0@@4 h@@5)) :qid |DafnyPre.229:11| :skolemid |6699| :pattern ( (MapType0Select v@@16 bx@@15)) ))) (=> (forall ((bx@@16 T@U) ) (!  (=> (and (= (type bx@@16) BoxType) (U_2_bool (MapType0Select v@@16 bx@@16))) ($IsAllocBox bx@@16 t0@@4 h@@5)) :qid |DafnyPre.229:11| :skolemid |6699| :pattern ( (MapType0Select v@@16 bx@@16)) )) ($IsAlloc v@@16 (TSet t0@@4) h@@5)))) :qid |DafnyPre.227:15| :skolemid |6700| :pattern ( ($IsAlloc v@@16 (TSet t0@@4) h@@5)) )))
(assert (forall ((v@@17 T@U) (t0@@5 T@U) (h@@6 T@U) ) (!  (=> (and (and (= (type v@@17) (MapType0Type BoxType boolType)) (= (type t0@@5) TyType)) (= (type h@@6) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@17 (TISet t0@@5) h@@6) (forall ((bx@@17 T@U) ) (!  (=> (and (= (type bx@@17) BoxType) (U_2_bool (MapType0Select v@@17 bx@@17))) ($IsAllocBox bx@@17 t0@@5 h@@6)) :qid |DafnyPre.233:11| :skolemid |6701| :pattern ( (MapType0Select v@@17 bx@@17)) ))) (=> (forall ((bx@@18 T@U) ) (!  (=> (and (= (type bx@@18) BoxType) (U_2_bool (MapType0Select v@@17 bx@@18))) ($IsAllocBox bx@@18 t0@@5 h@@6)) :qid |DafnyPre.233:11| :skolemid |6701| :pattern ( (MapType0Select v@@17 bx@@18)) )) ($IsAlloc v@@17 (TISet t0@@5) h@@6)))) :qid |DafnyPre.231:15| :skolemid |6702| :pattern ( ($IsAlloc v@@17 (TISet t0@@5) h@@6)) )))
(assert (forall ((v@@18 T@U) (t0@@6 T@U) (h@@7 T@U) ) (!  (=> (and (and (= (type v@@18) (MapType0Type BoxType intType)) (= (type t0@@6) TyType)) (= (type h@@7) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@18 (TMultiSet t0@@6) h@@7) (forall ((bx@@19 T@U) ) (!  (=> (and (= (type bx@@19) BoxType) (< 0 (U_2_int (MapType0Select v@@18 bx@@19)))) ($IsAllocBox bx@@19 t0@@6 h@@7)) :qid |DafnyPre.237:11| :skolemid |6703| :pattern ( (MapType0Select v@@18 bx@@19)) ))) (=> (forall ((bx@@20 T@U) ) (!  (=> (and (= (type bx@@20) BoxType) (< 0 (U_2_int (MapType0Select v@@18 bx@@20)))) ($IsAllocBox bx@@20 t0@@6 h@@7)) :qid |DafnyPre.237:11| :skolemid |6703| :pattern ( (MapType0Select v@@18 bx@@20)) )) ($IsAlloc v@@18 (TMultiSet t0@@6) h@@7)))) :qid |DafnyPre.235:15| :skolemid |6704| :pattern ( ($IsAlloc v@@18 (TMultiSet t0@@6) h@@7)) )))
(assert (forall ((v@@19 T@U) (t0@@7 T@U) (h@@8 T@U) ) (!  (=> (and (and (= (type v@@19) (SeqType BoxType)) (= (type t0@@7) TyType)) (= (type h@@8) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@19 (TSeq t0@@7) h@@8) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@19))) ($IsAllocBox (|Seq#Index| v@@19 i@@1) t0@@7 h@@8)) :qid |DafnyPre.241:11| :skolemid |6705| :pattern ( (|Seq#Index| v@@19 i@@1)) ))) (=> (forall ((i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| v@@19))) ($IsAllocBox (|Seq#Index| v@@19 i@@2) t0@@7 h@@8)) :qid |DafnyPre.241:11| :skolemid |6705| :pattern ( (|Seq#Index| v@@19 i@@2)) )) ($IsAlloc v@@19 (TSeq t0@@7) h@@8)))) :qid |DafnyPre.239:15| :skolemid |6706| :pattern ( ($IsAlloc v@@19 (TSeq t0@@7) h@@8)) )))
(assert  (and (forall ((arg0@@47 T@U) ) (! (let ((V (MapTypeInv1 (type arg0@@47)))) (let ((U (MapTypeInv0 (type arg0@@47)))) (= (type (|Map#Elements| arg0@@47)) (MapType0Type U V)))) :qid |funType:Map#Elements| :pattern ( (|Map#Elements| arg0@@47)) )) (forall ((arg0@@48 T@U) ) (! (let ((U@@0 (MapTypeInv0 (type arg0@@48)))) (= (type (|Map#Domain| arg0@@48)) (MapType0Type U@@0 boolType))) :qid |funType:Map#Domain| :pattern ( (|Map#Domain| arg0@@48)) ))))
(assert (forall ((v@@20 T@U) (t0@@8 T@U) (t1 T@U) ) (!  (=> (and (and (= (type v@@20) (MapType BoxType BoxType)) (= (type t0@@8) TyType)) (= (type t1) TyType)) (and (=> ($Is v@@20 (TMap t0@@8 t1)) (forall ((bx@@21 T@U) ) (!  (=> (and (= (type bx@@21) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@20) bx@@21))) (and ($IsBox (MapType0Select (|Map#Elements| v@@20) bx@@21) t1) ($IsBox bx@@21 t0@@8))) :qid |DafnyPre.248:19| :skolemid |6707| :pattern ( (MapType0Select (|Map#Elements| v@@20) bx@@21)) :pattern ( (MapType0Select (|Map#Domain| v@@20) bx@@21)) ))) (=> (forall ((bx@@22 T@U) ) (!  (=> (and (= (type bx@@22) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@20) bx@@22))) (and ($IsBox (MapType0Select (|Map#Elements| v@@20) bx@@22) t1) ($IsBox bx@@22 t0@@8))) :qid |DafnyPre.248:19| :skolemid |6707| :pattern ( (MapType0Select (|Map#Elements| v@@20) bx@@22)) :pattern ( (MapType0Select (|Map#Domain| v@@20) bx@@22)) )) ($Is v@@20 (TMap t0@@8 t1))))) :qid |DafnyPre.245:15| :skolemid |6708| :pattern ( ($Is v@@20 (TMap t0@@8 t1))) )))
(assert (forall ((v@@21 T@U) (t0@@9 T@U) (t1@@0 T@U) (h@@9 T@U) ) (!  (=> (and (and (and (= (type v@@21) (MapType BoxType BoxType)) (= (type t0@@9) TyType)) (= (type t1@@0) TyType)) (= (type h@@9) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@21 (TMap t0@@9 t1@@0) h@@9) (forall ((bx@@23 T@U) ) (!  (=> (and (= (type bx@@23) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@21) bx@@23))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@21) bx@@23) t1@@0 h@@9) ($IsAllocBox bx@@23 t0@@9 h@@9))) :qid |DafnyPre.256:19| :skolemid |6709| :pattern ( (MapType0Select (|Map#Elements| v@@21) bx@@23)) :pattern ( (MapType0Select (|Map#Domain| v@@21) bx@@23)) ))) (=> (forall ((bx@@24 T@U) ) (!  (=> (and (= (type bx@@24) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@21) bx@@24))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@21) bx@@24) t1@@0 h@@9) ($IsAllocBox bx@@24 t0@@9 h@@9))) :qid |DafnyPre.256:19| :skolemid |6709| :pattern ( (MapType0Select (|Map#Elements| v@@21) bx@@24)) :pattern ( (MapType0Select (|Map#Domain| v@@21) bx@@24)) )) ($IsAlloc v@@21 (TMap t0@@9 t1@@0) h@@9)))) :qid |DafnyPre.253:15| :skolemid |6710| :pattern ( ($IsAlloc v@@21 (TMap t0@@9 t1@@0) h@@9)) )))
(assert  (and (forall ((arg0@@49 T@U) ) (! (let ((V@@0 (IMapTypeInv1 (type arg0@@49)))) (let ((U@@1 (IMapTypeInv0 (type arg0@@49)))) (= (type (|IMap#Elements| arg0@@49)) (MapType0Type U@@1 V@@0)))) :qid |funType:IMap#Elements| :pattern ( (|IMap#Elements| arg0@@49)) )) (forall ((arg0@@50 T@U) ) (! (let ((U@@2 (IMapTypeInv0 (type arg0@@50)))) (= (type (|IMap#Domain| arg0@@50)) (MapType0Type U@@2 boolType))) :qid |funType:IMap#Domain| :pattern ( (|IMap#Domain| arg0@@50)) ))))
(assert (forall ((v@@22 T@U) (t0@@10 T@U) (t1@@1 T@U) ) (!  (=> (and (and (= (type v@@22) (IMapType BoxType BoxType)) (= (type t0@@10) TyType)) (= (type t1@@1) TyType)) (and (=> ($Is v@@22 (TIMap t0@@10 t1@@1)) (forall ((bx@@25 T@U) ) (!  (=> (and (= (type bx@@25) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@22) bx@@25))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@22) bx@@25) t1@@1) ($IsBox bx@@25 t0@@10))) :qid |DafnyPre.265:19| :skolemid |6711| :pattern ( (MapType0Select (|IMap#Elements| v@@22) bx@@25)) :pattern ( (MapType0Select (|IMap#Domain| v@@22) bx@@25)) ))) (=> (forall ((bx@@26 T@U) ) (!  (=> (and (= (type bx@@26) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@22) bx@@26))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@22) bx@@26) t1@@1) ($IsBox bx@@26 t0@@10))) :qid |DafnyPre.265:19| :skolemid |6711| :pattern ( (MapType0Select (|IMap#Elements| v@@22) bx@@26)) :pattern ( (MapType0Select (|IMap#Domain| v@@22) bx@@26)) )) ($Is v@@22 (TIMap t0@@10 t1@@1))))) :qid |DafnyPre.262:15| :skolemid |6712| :pattern ( ($Is v@@22 (TIMap t0@@10 t1@@1))) )))
(assert (forall ((v@@23 T@U) (t0@@11 T@U) (t1@@2 T@U) (h@@10 T@U) ) (!  (=> (and (and (and (= (type v@@23) (IMapType BoxType BoxType)) (= (type t0@@11) TyType)) (= (type t1@@2) TyType)) (= (type h@@10) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@23 (TIMap t0@@11 t1@@2) h@@10) (forall ((bx@@27 T@U) ) (!  (=> (and (= (type bx@@27) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@23) bx@@27))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@23) bx@@27) t1@@2 h@@10) ($IsAllocBox bx@@27 t0@@11 h@@10))) :qid |DafnyPre.273:19| :skolemid |6713| :pattern ( (MapType0Select (|IMap#Elements| v@@23) bx@@27)) :pattern ( (MapType0Select (|IMap#Domain| v@@23) bx@@27)) ))) (=> (forall ((bx@@28 T@U) ) (!  (=> (and (= (type bx@@28) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@23) bx@@28))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@23) bx@@28) t1@@2 h@@10) ($IsAllocBox bx@@28 t0@@11 h@@10))) :qid |DafnyPre.273:19| :skolemid |6713| :pattern ( (MapType0Select (|IMap#Elements| v@@23) bx@@28)) :pattern ( (MapType0Select (|IMap#Domain| v@@23) bx@@28)) )) ($IsAlloc v@@23 (TIMap t0@@11 t1@@2) h@@10)))) :qid |DafnyPre.270:15| :skolemid |6714| :pattern ( ($IsAlloc v@@23 (TIMap t0@@11 t1@@2) h@@10)) )))
(assert  (and (and (forall ((arg0@@51 T@U) (arg1@@17 T@U) ) (! (= (type (TypeTuple arg0@@51 arg1@@17)) ClassNameType) :qid |funType:TypeTuple| :pattern ( (TypeTuple arg0@@51 arg1@@17)) )) (forall ((arg0@@52 T@U) ) (! (= (type (TypeTupleCar arg0@@52)) ClassNameType) :qid |funType:TypeTupleCar| :pattern ( (TypeTupleCar arg0@@52)) ))) (forall ((arg0@@53 T@U) ) (! (= (type (TypeTupleCdr arg0@@53)) ClassNameType) :qid |funType:TypeTupleCdr| :pattern ( (TypeTupleCdr arg0@@53)) ))))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (and (= (type a@@1) ClassNameType) (= (type b@@1) ClassNameType)) (and (= (TypeTupleCar (TypeTuple a@@1 b@@1)) a@@1) (= (TypeTupleCdr (TypeTuple a@@1 b@@1)) b@@1))) :qid |DafnyPre.298:15| :skolemid |6715| :pattern ( (TypeTuple a@@1 b@@1)) )))
(assert (forall ((arg0@@54 T@U) ) (! (= (type (SetRef_to_SetBox arg0@@54)) (MapType0Type BoxType boolType)) :qid |funType:SetRef_to_SetBox| :pattern ( (SetRef_to_SetBox arg0@@54)) )))
(assert (forall ((s@@1 T@U) (bx@@29 T@U) ) (!  (=> (and (= (type s@@1) (MapType0Type refType boolType)) (= (type bx@@29) BoxType)) (and (=> (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@29)) (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@29)))) (=> (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@29))) (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@29))))) :qid |DafnyPre.307:15| :skolemid |6716| :pattern ( (MapType0Select (SetRef_to_SetBox s@@1) bx@@29)) )))
(assert (= (type Tclass._System.object?) TyType))
(assert (forall ((s@@2 T@U) ) (!  (=> (= (type s@@2) (MapType0Type refType boolType)) ($Is (SetRef_to_SetBox s@@2) (TSet Tclass._System.object?))) :qid |DafnyPre.309:15| :skolemid |6717| :pattern ( (SetRef_to_SetBox s@@2)) )))
(assert (= (Ctor DatatypeTypeType) 18))
(assert (forall ((d T@U) ) (!  (=> (= (type d) DatatypeTypeType) (= (BoxRank ($Box d)) (DtRank d))) :qid |DafnyPre.328:15| :skolemid |6718| :pattern ( (BoxRank ($Box d))) )))
(assert (forall ((o T@U) ) (!  (=> (= (type o) BoxType) (<= 0 (|ORD#Offset| o))) :qid |DafnyPre.343:15| :skolemid |6719| :pattern ( (|ORD#Offset| o)) )))
(assert (forall ((arg0@@55 Int) ) (! (= (type (|ORD#FromNat| arg0@@55)) BoxType) :qid |funType:ORD#FromNat| :pattern ( (|ORD#FromNat| arg0@@55)) )))
(assert (forall ((n@@0 Int) ) (!  (=> (<= 0 n@@0) (and (|ORD#IsNat| (|ORD#FromNat| n@@0)) (= (|ORD#Offset| (|ORD#FromNat| n@@0)) n@@0))) :qid |DafnyPre.349:15| :skolemid |6720| :pattern ( (|ORD#FromNat| n@@0)) )))
(assert (forall ((o@@0 T@U) ) (!  (=> (and (= (type o@@0) BoxType) (|ORD#IsNat| o@@0)) (= o@@0 (|ORD#FromNat| (|ORD#Offset| o@@0)))) :qid |DafnyPre.351:15| :skolemid |6721| :pattern ( (|ORD#Offset| o@@0)) :pattern ( (|ORD#IsNat| o@@0)) )))
(assert (forall ((o@@1 T@U) (p T@U) ) (!  (=> (and (= (type o@@1) BoxType) (= (type p) BoxType)) (and (and (and (=> (|ORD#Less| o@@1 p) (not (= o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (not (|ORD#IsNat| p))) (|ORD#Less| o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (|ORD#IsNat| p)) (and (=> (|ORD#Less| o@@1 p) (< (|ORD#Offset| o@@1) (|ORD#Offset| p))) (=> (< (|ORD#Offset| o@@1) (|ORD#Offset| p)) (|ORD#Less| o@@1 p))))) (=> (and (|ORD#Less| o@@1 p) (|ORD#IsNat| p)) (|ORD#IsNat| o@@1)))) :qid |DafnyPre.355:15| :skolemid |6722| :pattern ( (|ORD#Less| o@@1 p)) )))
(assert (forall ((o@@2 T@U) (p@@0 T@U) ) (!  (=> (and (= (type o@@2) BoxType) (= (type p@@0) BoxType)) (or (or (|ORD#Less| o@@2 p@@0) (= o@@2 p@@0)) (|ORD#Less| p@@0 o@@2))) :qid |DafnyPre.361:15| :skolemid |6723| :pattern ( (|ORD#Less| o@@2 p@@0) (|ORD#Less| p@@0 o@@2)) )))
(assert (forall ((o@@3 T@U) (p@@1 T@U) (r T@U) ) (!  (=> (and (and (and (= (type o@@3) BoxType) (= (type p@@1) BoxType)) (= (type r) BoxType)) (and (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r))) (|ORD#Less| o@@3 r)) :qid |DafnyPre.364:15| :skolemid |6724| :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r)) :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| o@@3 r)) )))
(assert (forall ((o@@4 T@U) (p@@2 T@U) ) (!  (=> (and (= (type o@@4) BoxType) (= (type p@@2) BoxType)) (and (=> (|ORD#LessThanLimit| o@@4 p@@2) (|ORD#Less| o@@4 p@@2)) (=> (|ORD#Less| o@@4 p@@2) (|ORD#LessThanLimit| o@@4 p@@2)))) :qid |DafnyPre.371:15| :skolemid |6725| :pattern ( (|ORD#LessThanLimit| o@@4 p@@2)) )))
(assert (forall ((arg0@@56 T@U) (arg1@@18 T@U) ) (! (= (type (|ORD#Plus| arg0@@56 arg1@@18)) BoxType) :qid |funType:ORD#Plus| :pattern ( (|ORD#Plus| arg0@@56 arg1@@18)) )))
(assert (forall ((o@@5 T@U) (p@@3 T@U) ) (!  (=> (and (= (type o@@5) BoxType) (= (type p@@3) BoxType)) (and (=> (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (and (|ORD#IsNat| o@@5) (|ORD#IsNat| p@@3))) (=> (|ORD#IsNat| p@@3) (and (and (=> (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (|ORD#IsNat| o@@5)) (=> (|ORD#IsNat| o@@5) (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)))) (= (|ORD#Offset| (|ORD#Plus| o@@5 p@@3)) (+ (|ORD#Offset| o@@5) (|ORD#Offset| p@@3))))))) :qid |DafnyPre.375:15| :skolemid |6726| :pattern ( (|ORD#Plus| o@@5 p@@3)) )))
(assert (forall ((o@@6 T@U) (p@@4 T@U) ) (!  (=> (and (= (type o@@6) BoxType) (= (type p@@4) BoxType)) (and (or (= o@@6 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| o@@6 (|ORD#Plus| o@@6 p@@4))) (or (= p@@4 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| p@@4 (|ORD#Plus| o@@6 p@@4))))) :qid |DafnyPre.380:15| :skolemid |6727| :pattern ( (|ORD#Plus| o@@6 p@@4)) )))
(assert (forall ((o@@7 T@U) (p@@5 T@U) ) (!  (=> (and (= (type o@@7) BoxType) (= (type p@@5) BoxType)) (and (=> (= o@@7 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) p@@5)) (=> (= p@@5 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) o@@7)))) :qid |DafnyPre.383:15| :skolemid |6728| :pattern ( (|ORD#Plus| o@@7 p@@5)) )))
(assert (forall ((arg0@@57 T@U) (arg1@@19 T@U) ) (! (= (type (|ORD#Minus| arg0@@57 arg1@@19)) BoxType) :qid |funType:ORD#Minus| :pattern ( (|ORD#Minus| arg0@@57 arg1@@19)) )))
(assert (forall ((o@@8 T@U) (p@@6 T@U) ) (!  (=> (and (and (= (type o@@8) BoxType) (= (type p@@6) BoxType)) (and (|ORD#IsNat| p@@6) (<= (|ORD#Offset| p@@6) (|ORD#Offset| o@@8)))) (and (and (=> (|ORD#IsNat| (|ORD#Minus| o@@8 p@@6)) (|ORD#IsNat| o@@8)) (=> (|ORD#IsNat| o@@8) (|ORD#IsNat| (|ORD#Minus| o@@8 p@@6)))) (= (|ORD#Offset| (|ORD#Minus| o@@8 p@@6)) (- (|ORD#Offset| o@@8) (|ORD#Offset| p@@6))))) :qid |DafnyPre.388:15| :skolemid |6729| :pattern ( (|ORD#Minus| o@@8 p@@6)) )))
(assert (forall ((o@@9 T@U) (p@@7 T@U) ) (!  (=> (and (and (= (type o@@9) BoxType) (= (type p@@7) BoxType)) (and (|ORD#IsNat| p@@7) (<= (|ORD#Offset| p@@7) (|ORD#Offset| o@@9)))) (or (and (= p@@7 (|ORD#FromNat| 0)) (= (|ORD#Minus| o@@9 p@@7) o@@9)) (and (not (= p@@7 (|ORD#FromNat| 0))) (|ORD#Less| (|ORD#Minus| o@@9 p@@7) o@@9)))) :qid |DafnyPre.392:15| :skolemid |6730| :pattern ( (|ORD#Minus| o@@9 p@@7)) )))
(assert (forall ((o@@10 T@U) (m@@5 Int) (n@@1 Int) ) (!  (=> (= (type o@@10) BoxType) (=> (and (<= 0 m@@5) (<= 0 n@@1)) (= (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1)) (|ORD#Plus| o@@10 (|ORD#FromNat| (+ m@@5 n@@1)))))) :qid |DafnyPre.398:15| :skolemid |6731| :pattern ( (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1))) )))
(assert (forall ((o@@11 T@U) (m@@6 Int) (n@@2 Int) ) (!  (=> (= (type o@@11) BoxType) (=> (and (and (<= 0 m@@6) (<= 0 n@@2)) (<= (+ m@@6 n@@2) (|ORD#Offset| o@@11))) (= (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2)) (|ORD#Minus| o@@11 (|ORD#FromNat| (+ m@@6 n@@2)))))) :qid |DafnyPre.403:15| :skolemid |6732| :pattern ( (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2))) )))
(assert (forall ((o@@12 T@U) (m@@7 Int) (n@@3 Int) ) (!  (=> (= (type o@@12) BoxType) (=> (and (and (<= 0 m@@7) (<= 0 n@@3)) (<= n@@3 (+ (|ORD#Offset| o@@12) m@@7))) (and (=> (<= 0 (- m@@7 n@@3)) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Plus| o@@12 (|ORD#FromNat| (- m@@7 n@@3))))) (=> (<= (- m@@7 n@@3) 0) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Minus| o@@12 (|ORD#FromNat| (- n@@3 m@@7)))))))) :qid |DafnyPre.408:15| :skolemid |6733| :pattern ( (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3))) )))
(assert (forall ((o@@13 T@U) (m@@8 Int) (n@@4 Int) ) (!  (=> (= (type o@@13) BoxType) (=> (and (and (<= 0 m@@8) (<= 0 n@@4)) (<= n@@4 (+ (|ORD#Offset| o@@13) m@@8))) (and (=> (<= 0 (- m@@8 n@@4)) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Minus| o@@13 (|ORD#FromNat| (- m@@8 n@@4))))) (=> (<= (- m@@8 n@@4) 0) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Plus| o@@13 (|ORD#FromNat| (- n@@4 m@@8)))))))) :qid |DafnyPre.414:15| :skolemid |6734| :pattern ( (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4))) )))
(assert  (and (= (Ctor LayerTypeType) 19) (forall ((arg0@@58 T@U) (arg1@@20 T@U) ) (! (let ((A (MapType0TypeInv1 (type arg0@@58)))) (= (type (AtLayer arg0@@58 arg1@@20)) A)) :qid |funType:AtLayer| :pattern ( (AtLayer arg0@@58 arg1@@20)) ))))
(assert (forall ((f T@U) (ly T@U) ) (! (let ((A@@0 (MapType0TypeInv1 (type f)))) (=> (and (= (type f) (MapType0Type LayerTypeType A@@0)) (= (type ly) LayerTypeType)) (= (AtLayer f ly) (MapType0Select f ly)))) :qid |DafnyPre.438:18| :skolemid |6735| :pattern ( (AtLayer f ly)) )))
(assert (forall ((arg0@@59 T@U) ) (! (= (type ($LS arg0@@59)) LayerTypeType) :qid |funType:$LS| :pattern ( ($LS arg0@@59)) )))
(assert (forall ((f@@0 T@U) (ly@@0 T@U) ) (! (let ((A@@1 (MapType0TypeInv1 (type f@@0)))) (=> (and (= (type f@@0) (MapType0Type LayerTypeType A@@1)) (= (type ly@@0) LayerTypeType)) (= (AtLayer f@@0 ($LS ly@@0)) (AtLayer f@@0 ly@@0)))) :qid |DafnyPre.439:18| :skolemid |6736| :pattern ( (AtLayer f@@0 ($LS ly@@0))) )))
(assert (forall ((arg0@@60 Int) ) (! (= (type (IndexField arg0@@60)) (FieldType BoxType)) :qid |funType:IndexField| :pattern ( (IndexField arg0@@60)) )))
(assert (forall ((i@@3 Int) ) (! (= (FDim (IndexField i@@3)) 1) :qid |DafnyPre.450:15| :skolemid |6737| :pattern ( (IndexField i@@3)) )))
(assert (forall ((i@@4 Int) ) (! (= (IndexField_Inverse (IndexField i@@4)) i@@4) :qid |DafnyPre.452:15| :skolemid |6738| :pattern ( (IndexField i@@4)) )))
(assert (forall ((arg0@@61 T@U) (arg1@@21 Int) ) (! (= (type (MultiIndexField arg0@@61 arg1@@21)) (FieldType BoxType)) :qid |funType:MultiIndexField| :pattern ( (MultiIndexField arg0@@61 arg1@@21)) )))
(assert (forall ((f@@1 T@U) (i@@5 Int) ) (!  (=> (= (type f@@1) (FieldType BoxType)) (= (FDim (MultiIndexField f@@1 i@@5)) (+ (FDim f@@1) 1))) :qid |DafnyPre.455:15| :skolemid |6739| :pattern ( (MultiIndexField f@@1 i@@5)) )))
(assert (forall ((arg0@@62 T@U) ) (! (let ((T@@3 (FieldTypeInv0 (type arg0@@62)))) (= (type (MultiIndexField_Inverse0 arg0@@62)) (FieldType T@@3))) :qid |funType:MultiIndexField_Inverse0| :pattern ( (MultiIndexField_Inverse0 arg0@@62)) )))
(assert (forall ((f@@2 T@U) (i@@6 Int) ) (!  (=> (= (type f@@2) (FieldType BoxType)) (and (= (MultiIndexField_Inverse0 (MultiIndexField f@@2 i@@6)) f@@2) (= (MultiIndexField_Inverse1 (MultiIndexField f@@2 i@@6)) i@@6))) :qid |DafnyPre.458:15| :skolemid |6740| :pattern ( (MultiIndexField f@@2 i@@6)) )))
(assert  (and (and (forall ((alpha@@3 T@T) (arg0@@63 T@U) (arg1@@22 T@U) ) (! (= (type (FieldOfDecl alpha@@3 arg0@@63 arg1@@22)) (FieldType alpha@@3)) :qid |funType:FieldOfDecl| :pattern ( (FieldOfDecl alpha@@3 arg0@@63 arg1@@22)) )) (forall ((arg0@@64 T@U) ) (! (= (type (DeclType arg0@@64)) ClassNameType) :qid |funType:DeclType| :pattern ( (DeclType arg0@@64)) ))) (forall ((arg0@@65 T@U) ) (! (= (type (DeclName arg0@@65)) NameFamilyType) :qid |funType:DeclName| :pattern ( (DeclName arg0@@65)) ))))
(assert (forall ((cl T@U) (nm T@U) (T@@4 T@T) ) (!  (=> (and (= (type cl) ClassNameType) (= (type nm) NameFamilyType)) (and (= (DeclType (FieldOfDecl T@@4 cl nm)) cl) (= (DeclName (FieldOfDecl T@@4 cl nm)) nm))) :qid |DafnyPre.467:18| :skolemid |6741| :pattern ( (FieldOfDecl T@@4 cl nm)) )))
(assert (forall ((h@@11 T@U) (k T@U) (v@@24 T@U) (t@@21 T@U) ) (!  (=> (and (and (and (and (= (type h@@11) (MapType0Type refType MapType1Type)) (= (type k) (MapType0Type refType MapType1Type))) (= (type t@@21) TyType)) ($HeapSucc h@@11 k)) ($IsAlloc v@@24 t@@21 h@@11)) ($IsAlloc v@@24 t@@21 k)) :qid |DafnyPre.480:17| :skolemid |6742| :pattern ( ($HeapSucc h@@11 k) ($IsAlloc v@@24 t@@21 h@@11)) )))
(assert (forall ((h@@12 T@U) (k@@0 T@U) (bx@@30 T@U) (t@@22 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@12) (MapType0Type refType MapType1Type)) (= (type k@@0) (MapType0Type refType MapType1Type))) (= (type bx@@30) BoxType)) (= (type t@@22) TyType)) ($HeapSucc h@@12 k@@0)) ($IsAllocBox bx@@30 t@@22 h@@12)) ($IsAllocBox bx@@30 t@@22 k@@0)) :qid |DafnyPre.483:14| :skolemid |6743| :pattern ( ($HeapSucc h@@12 k@@0) ($IsAllocBox bx@@30 t@@22 h@@12)) )))
(assert (= (FDim alloc) 0))
(assert (= (DeclName alloc) allocName))
(assert  (not ($IsGhostField alloc)))
(assert (forall ((o@@14 T@U) ) (!  (=> (= (type o@@14) refType) (<= 0 (_System.array.Length o@@14))) :qid |DafnyPre.500:15| :skolemid |6744| :no-pattern (type o@@14) :no-pattern (U_2_int o@@14) :no-pattern (U_2_bool o@@14) )))
(assert (forall ((x@@13 Real) ) (! (= (q@Int x@@13) (to_int x@@13)) :qid |DafnyPre.506:14| :skolemid |6745| :pattern ( (q@Int x@@13)) )))
(assert (forall ((x@@14 Int) ) (! (= (q@Real x@@14) (to_real x@@14)) :qid |DafnyPre.507:15| :skolemid |6746| :pattern ( (q@Real x@@14)) )))
(assert (forall ((i@@7 Int) ) (! (= (q@Int (q@Real i@@7)) i@@7) :qid |DafnyPre.508:15| :skolemid |6747| :pattern ( (q@Int (q@Real i@@7))) )))
(assert (= (type $OneHeap) (MapType0Type refType MapType1Type)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((h@@13 T@U) (r@@0 T@U) (f@@3 T@U) (x@@15 T@U) ) (! (let ((alpha@@4 (type x@@15))) (=> (and (and (and (= (type h@@13) (MapType0Type refType MapType1Type)) (= (type r@@0) refType)) (= (type f@@3) (FieldType alpha@@4))) ($IsGoodHeap (MapType0Store h@@13 r@@0 (MapType1Store (MapType0Select h@@13 r@@0) f@@3 x@@15)))) ($HeapSucc h@@13 (MapType0Store h@@13 r@@0 (MapType1Store (MapType0Select h@@13 r@@0) f@@3 x@@15))))) :qid |DafnyPre.530:22| :skolemid |6748| :pattern ( (MapType0Store h@@13 r@@0 (MapType1Store (MapType0Select h@@13 r@@0) f@@3 x@@15))) )))
(assert (forall ((a@@2 T@U) (b@@2 T@U) (c T@U) ) (!  (=> (and (and (and (and (= (type a@@2) (MapType0Type refType MapType1Type)) (= (type b@@2) (MapType0Type refType MapType1Type))) (= (type c) (MapType0Type refType MapType1Type))) (not (= a@@2 c))) (and ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c))) ($HeapSucc a@@2 c)) :qid |DafnyPre.533:15| :skolemid |6749| :pattern ( ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c)) )))
(assert (forall ((h@@14 T@U) (k@@1 T@U) ) (!  (=> (and (and (= (type h@@14) (MapType0Type refType MapType1Type)) (= (type k@@1) (MapType0Type refType MapType1Type))) ($HeapSucc h@@14 k@@1)) (forall ((o@@15 T@U) ) (!  (=> (and (= (type o@@15) refType) (U_2_bool (MapType1Select (MapType0Select h@@14 o@@15) alloc))) (U_2_bool (MapType1Select (MapType0Select k@@1 o@@15) alloc))) :qid |DafnyPre.536:30| :skolemid |6750| :pattern ( (MapType1Select (MapType0Select k@@1 o@@15) alloc)) ))) :qid |DafnyPre.535:15| :skolemid |6751| :pattern ( ($HeapSucc h@@14 k@@1)) )))
(assert (forall ((h@@15 T@U) (k@@2 T@U) ) (!  (=> (and (and (= (type h@@15) (MapType0Type refType MapType1Type)) (= (type k@@2) (MapType0Type refType MapType1Type))) ($HeapSuccGhost h@@15 k@@2)) (and ($HeapSucc h@@15 k@@2) (forall ((o@@16 T@U) (f@@4 T@U) ) (! (let ((alpha@@5 (FieldTypeInv0 (type f@@4)))) (=> (and (and (= (type o@@16) refType) (= (type f@@4) (FieldType alpha@@5))) (not ($IsGhostField f@@4))) (= (MapType1Select (MapType0Select h@@15 o@@16) f@@4) (MapType1Select (MapType0Select k@@2 o@@16) f@@4)))) :qid |DafnyPre.542:20| :skolemid |6752| :pattern ( (MapType1Select (MapType0Select k@@2 o@@16) f@@4)) )))) :qid |DafnyPre.539:15| :skolemid |6753| :pattern ( ($HeapSuccGhost h@@15 k@@2)) )))
(assert (forall ((s@@3 T@U) ) (! (let ((T@@5 (MapType0TypeInv0 (type s@@3)))) (=> (= (type s@@3) (MapType0Type T@@5 boolType)) (<= 0 (|Set#Card| s@@3)))) :qid |DafnyPre.600:18| :skolemid |6758| :pattern ( (|Set#Card| s@@3)) )))
(assert (forall ((T@@6 T@T) ) (! (= (type (|Set#Empty| T@@6)) (MapType0Type T@@6 boolType)) :qid |funType:Set#Empty| :pattern ( (|Set#Empty| T@@6)) )))
(assert (forall ((o@@17 T@U) ) (! (let ((T@@7 (type o@@17))) (not (U_2_bool (MapType0Select (|Set#Empty| T@@7) o@@17)))) :qid |DafnyPre.603:18| :skolemid |6759| :pattern ( (let ((T@@7 (type o@@17))) (MapType0Select (|Set#Empty| T@@7) o@@17))) )))
(assert (forall ((s@@4 T@U) ) (! (let ((T@@8 (MapType0TypeInv0 (type s@@4)))) (=> (= (type s@@4) (MapType0Type T@@8 boolType)) (and (and (=> (= (|Set#Card| s@@4) 0) (= s@@4 (|Set#Empty| T@@8))) (=> (= s@@4 (|Set#Empty| T@@8)) (= (|Set#Card| s@@4) 0))) (=> (not (= (|Set#Card| s@@4) 0)) (exists ((x@@16 T@U) ) (!  (and (= (type x@@16) T@@8) (U_2_bool (MapType0Select s@@4 x@@16))) :qid |DafnyPre.606:33| :skolemid |6760| :no-pattern (type x@@16) :no-pattern (U_2_int x@@16) :no-pattern (U_2_bool x@@16) )))))) :qid |DafnyPre.604:18| :skolemid |6761| :pattern ( (|Set#Card| s@@4)) )))
(assert (forall ((arg0@@66 T@U) ) (! (let ((T@@9 (type arg0@@66))) (= (type (|Set#Singleton| arg0@@66)) (MapType0Type T@@9 boolType))) :qid |funType:Set#Singleton| :pattern ( (|Set#Singleton| arg0@@66)) )))
(assert (forall ((r@@1 T@U) ) (! (U_2_bool (MapType0Select (|Set#Singleton| r@@1) r@@1)) :qid |DafnyPre.612:18| :skolemid |6762| :pattern ( (|Set#Singleton| r@@1)) )))
(assert (forall ((r@@2 T@U) (o@@18 T@U) ) (! (let ((T@@10 (type r@@2))) (=> (= (type o@@18) T@@10) (and (=> (U_2_bool (MapType0Select (|Set#Singleton| r@@2) o@@18)) (= r@@2 o@@18)) (=> (= r@@2 o@@18) (U_2_bool (MapType0Select (|Set#Singleton| r@@2) o@@18)))))) :qid |DafnyPre.613:18| :skolemid |6763| :pattern ( (MapType0Select (|Set#Singleton| r@@2) o@@18)) )))
(assert (forall ((r@@3 T@U) ) (! (= (|Set#Card| (|Set#Singleton| r@@3)) 1) :qid |DafnyPre.614:18| :skolemid |6764| :pattern ( (|Set#Card| (|Set#Singleton| r@@3))) )))
(assert (forall ((arg0@@67 T@U) (arg1@@23 T@U) ) (! (let ((T@@11 (type arg1@@23))) (= (type (|Set#UnionOne| arg0@@67 arg1@@23)) (MapType0Type T@@11 boolType))) :qid |funType:Set#UnionOne| :pattern ( (|Set#UnionOne| arg0@@67 arg1@@23)) )))
(assert (forall ((a@@3 T@U) (x@@17 T@U) (o@@19 T@U) ) (! (let ((T@@12 (type x@@17))) (=> (and (= (type a@@3) (MapType0Type T@@12 boolType)) (= (type o@@19) T@@12)) (and (=> (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@17) o@@19)) (or (= o@@19 x@@17) (U_2_bool (MapType0Select a@@3 o@@19)))) (=> (or (= o@@19 x@@17) (U_2_bool (MapType0Select a@@3 o@@19))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@17) o@@19)))))) :qid |DafnyPre.617:18| :skolemid |6765| :pattern ( (MapType0Select (|Set#UnionOne| a@@3 x@@17) o@@19)) )))
(assert (forall ((a@@4 T@U) (x@@18 T@U) ) (! (let ((T@@13 (type x@@18))) (=> (= (type a@@4) (MapType0Type T@@13 boolType)) (U_2_bool (MapType0Select (|Set#UnionOne| a@@4 x@@18) x@@18)))) :qid |DafnyPre.619:18| :skolemid |6766| :pattern ( (|Set#UnionOne| a@@4 x@@18)) )))
(assert (forall ((a@@5 T@U) (x@@19 T@U) (y@@1 T@U) ) (! (let ((T@@14 (type x@@19))) (=> (and (and (= (type a@@5) (MapType0Type T@@14 boolType)) (= (type y@@1) T@@14)) (U_2_bool (MapType0Select a@@5 y@@1))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@5 x@@19) y@@1)))) :qid |DafnyPre.621:18| :skolemid |6767| :pattern ( (|Set#UnionOne| a@@5 x@@19) (MapType0Select a@@5 y@@1)) )))
(assert (forall ((a@@6 T@U) (x@@20 T@U) ) (! (let ((T@@15 (type x@@20))) (=> (and (= (type a@@6) (MapType0Type T@@15 boolType)) (U_2_bool (MapType0Select a@@6 x@@20))) (= (|Set#Card| (|Set#UnionOne| a@@6 x@@20)) (|Set#Card| a@@6)))) :qid |DafnyPre.623:18| :skolemid |6768| :pattern ( (|Set#Card| (|Set#UnionOne| a@@6 x@@20))) )))
(assert (forall ((a@@7 T@U) (x@@21 T@U) ) (! (let ((T@@16 (type x@@21))) (=> (and (= (type a@@7) (MapType0Type T@@16 boolType)) (not (U_2_bool (MapType0Select a@@7 x@@21)))) (= (|Set#Card| (|Set#UnionOne| a@@7 x@@21)) (+ (|Set#Card| a@@7) 1)))) :qid |DafnyPre.625:18| :skolemid |6769| :pattern ( (|Set#Card| (|Set#UnionOne| a@@7 x@@21))) )))
(assert (forall ((arg0@@68 T@U) (arg1@@24 T@U) ) (! (let ((T@@17 (MapType0TypeInv0 (type arg0@@68)))) (= (type (|Set#Union| arg0@@68 arg1@@24)) (MapType0Type T@@17 boolType))) :qid |funType:Set#Union| :pattern ( (|Set#Union| arg0@@68 arg1@@24)) )))
(assert (forall ((a@@8 T@U) (b@@3 T@U) (o@@20 T@U) ) (! (let ((T@@18 (type o@@20))) (=> (and (= (type a@@8) (MapType0Type T@@18 boolType)) (= (type b@@3) (MapType0Type T@@18 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)) (or (U_2_bool (MapType0Select a@@8 o@@20)) (U_2_bool (MapType0Select b@@3 o@@20)))) (=> (or (U_2_bool (MapType0Select a@@8 o@@20)) (U_2_bool (MapType0Select b@@3 o@@20))) (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)))))) :qid |DafnyPre.629:18| :skolemid |6770| :pattern ( (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)) )))
(assert (forall ((a@@9 T@U) (b@@4 T@U) (y@@2 T@U) ) (! (let ((T@@19 (type y@@2))) (=> (and (and (= (type a@@9) (MapType0Type T@@19 boolType)) (= (type b@@4) (MapType0Type T@@19 boolType))) (U_2_bool (MapType0Select a@@9 y@@2))) (U_2_bool (MapType0Select (|Set#Union| a@@9 b@@4) y@@2)))) :qid |DafnyPre.631:18| :skolemid |6771| :pattern ( (|Set#Union| a@@9 b@@4) (MapType0Select a@@9 y@@2)) )))
(assert (forall ((a@@10 T@U) (b@@5 T@U) (y@@3 T@U) ) (! (let ((T@@20 (type y@@3))) (=> (and (and (= (type a@@10) (MapType0Type T@@20 boolType)) (= (type b@@5) (MapType0Type T@@20 boolType))) (U_2_bool (MapType0Select b@@5 y@@3))) (U_2_bool (MapType0Select (|Set#Union| a@@10 b@@5) y@@3)))) :qid |DafnyPre.633:18| :skolemid |6772| :pattern ( (|Set#Union| a@@10 b@@5) (MapType0Select b@@5 y@@3)) )))
(assert (forall ((arg0@@69 T@U) (arg1@@25 T@U) ) (! (let ((T@@21 (MapType0TypeInv0 (type arg0@@69)))) (= (type (|Set#Difference| arg0@@69 arg1@@25)) (MapType0Type T@@21 boolType))) :qid |funType:Set#Difference| :pattern ( (|Set#Difference| arg0@@69 arg1@@25)) )))
(assert (forall ((a@@11 T@U) (b@@6 T@U) ) (! (let ((T@@22 (MapType0TypeInv0 (type a@@11)))) (=> (and (and (= (type a@@11) (MapType0Type T@@22 boolType)) (= (type b@@6) (MapType0Type T@@22 boolType))) (|Set#Disjoint| a@@11 b@@6)) (and (= (|Set#Difference| (|Set#Union| a@@11 b@@6) a@@11) b@@6) (= (|Set#Difference| (|Set#Union| a@@11 b@@6) b@@6) a@@11)))) :qid |DafnyPre.635:18| :skolemid |6773| :pattern ( (|Set#Union| a@@11 b@@6)) )))
(assert (forall ((arg0@@70 T@U) (arg1@@26 T@U) ) (! (let ((T@@23 (MapType0TypeInv0 (type arg0@@70)))) (= (type (|Set#Intersection| arg0@@70 arg1@@26)) (MapType0Type T@@23 boolType))) :qid |funType:Set#Intersection| :pattern ( (|Set#Intersection| arg0@@70 arg1@@26)) )))
(assert (forall ((a@@12 T@U) (b@@7 T@U) (o@@21 T@U) ) (! (let ((T@@24 (type o@@21))) (=> (and (= (type a@@12) (MapType0Type T@@24 boolType)) (= (type b@@7) (MapType0Type T@@24 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)) (and (U_2_bool (MapType0Select a@@12 o@@21)) (U_2_bool (MapType0Select b@@7 o@@21)))) (=> (and (U_2_bool (MapType0Select a@@12 o@@21)) (U_2_bool (MapType0Select b@@7 o@@21))) (U_2_bool (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)))))) :qid |DafnyPre.645:18| :skolemid |6774| :pattern ( (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)) )))
(assert (forall ((a@@13 T@U) (b@@8 T@U) ) (! (let ((T@@25 (MapType0TypeInv0 (type a@@13)))) (=> (and (= (type a@@13) (MapType0Type T@@25 boolType)) (= (type b@@8) (MapType0Type T@@25 boolType))) (= (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8) (|Set#Union| a@@13 b@@8)))) :qid |DafnyPre.648:18| :skolemid |6775| :pattern ( (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8)) )))
(assert (forall ((a@@14 T@U) (b@@9 T@U) ) (! (let ((T@@26 (MapType0TypeInv0 (type a@@14)))) (=> (and (= (type a@@14) (MapType0Type T@@26 boolType)) (= (type b@@9) (MapType0Type T@@26 boolType))) (= (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9)) (|Set#Union| a@@14 b@@9)))) :qid |DafnyPre.650:18| :skolemid |6776| :pattern ( (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9))) )))
(assert (forall ((a@@15 T@U) (b@@10 T@U) ) (! (let ((T@@27 (MapType0TypeInv0 (type a@@15)))) (=> (and (= (type a@@15) (MapType0Type T@@27 boolType)) (= (type b@@10) (MapType0Type T@@27 boolType))) (= (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10) (|Set#Intersection| a@@15 b@@10)))) :qid |DafnyPre.652:18| :skolemid |6777| :pattern ( (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10)) )))
(assert (forall ((a@@16 T@U) (b@@11 T@U) ) (! (let ((T@@28 (MapType0TypeInv0 (type a@@16)))) (=> (and (= (type a@@16) (MapType0Type T@@28 boolType)) (= (type b@@11) (MapType0Type T@@28 boolType))) (= (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11)) (|Set#Intersection| a@@16 b@@11)))) :qid |DafnyPre.654:18| :skolemid |6778| :pattern ( (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11))) )))
(assert (forall ((a@@17 T@U) (b@@12 T@U) ) (! (let ((T@@29 (MapType0TypeInv0 (type a@@17)))) (=> (and (= (type a@@17) (MapType0Type T@@29 boolType)) (= (type b@@12) (MapType0Type T@@29 boolType))) (= (+ (|Set#Card| (|Set#Union| a@@17 b@@12)) (|Set#Card| (|Set#Intersection| a@@17 b@@12))) (+ (|Set#Card| a@@17) (|Set#Card| b@@12))))) :qid |DafnyPre.656:18| :skolemid |6779| :pattern ( (|Set#Card| (|Set#Union| a@@17 b@@12))) :pattern ( (|Set#Card| (|Set#Intersection| a@@17 b@@12))) )))
(assert (forall ((a@@18 T@U) (b@@13 T@U) (o@@22 T@U) ) (! (let ((T@@30 (type o@@22))) (=> (and (= (type a@@18) (MapType0Type T@@30 boolType)) (= (type b@@13) (MapType0Type T@@30 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)) (and (U_2_bool (MapType0Select a@@18 o@@22)) (not (U_2_bool (MapType0Select b@@13 o@@22))))) (=> (and (U_2_bool (MapType0Select a@@18 o@@22)) (not (U_2_bool (MapType0Select b@@13 o@@22)))) (U_2_bool (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)))))) :qid |DafnyPre.660:18| :skolemid |6780| :pattern ( (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)) )))
(assert (forall ((a@@19 T@U) (b@@14 T@U) (y@@4 T@U) ) (! (let ((T@@31 (type y@@4))) (=> (and (and (= (type a@@19) (MapType0Type T@@31 boolType)) (= (type b@@14) (MapType0Type T@@31 boolType))) (U_2_bool (MapType0Select b@@14 y@@4))) (not (U_2_bool (MapType0Select (|Set#Difference| a@@19 b@@14) y@@4))))) :qid |DafnyPre.662:18| :skolemid |6781| :pattern ( (|Set#Difference| a@@19 b@@14) (MapType0Select b@@14 y@@4)) )))
(assert (forall ((a@@20 T@U) (b@@15 T@U) ) (! (let ((T@@32 (MapType0TypeInv0 (type a@@20)))) (=> (and (= (type a@@20) (MapType0Type T@@32 boolType)) (= (type b@@15) (MapType0Type T@@32 boolType))) (and (= (+ (+ (|Set#Card| (|Set#Difference| a@@20 b@@15)) (|Set#Card| (|Set#Difference| b@@15 a@@20))) (|Set#Card| (|Set#Intersection| a@@20 b@@15))) (|Set#Card| (|Set#Union| a@@20 b@@15))) (= (|Set#Card| (|Set#Difference| a@@20 b@@15)) (- (|Set#Card| a@@20) (|Set#Card| (|Set#Intersection| a@@20 b@@15))))))) :qid |DafnyPre.664:18| :skolemid |6782| :pattern ( (|Set#Card| (|Set#Difference| a@@20 b@@15))) )))
(assert (forall ((a@@21 T@U) (b@@16 T@U) ) (! (let ((T@@33 (MapType0TypeInv0 (type a@@21)))) (=> (and (= (type a@@21) (MapType0Type T@@33 boolType)) (= (type b@@16) (MapType0Type T@@33 boolType))) (and (=> (|Set#Subset| a@@21 b@@16) (forall ((o@@23 T@U) ) (!  (=> (and (= (type o@@23) T@@33) (U_2_bool (MapType0Select a@@21 o@@23))) (U_2_bool (MapType0Select b@@16 o@@23))) :qid |DafnyPre.673:32| :skolemid |6783| :pattern ( (MapType0Select a@@21 o@@23)) :pattern ( (MapType0Select b@@16 o@@23)) ))) (=> (forall ((o@@24 T@U) ) (!  (=> (and (= (type o@@24) T@@33) (U_2_bool (MapType0Select a@@21 o@@24))) (U_2_bool (MapType0Select b@@16 o@@24))) :qid |DafnyPre.673:32| :skolemid |6783| :pattern ( (MapType0Select a@@21 o@@24)) :pattern ( (MapType0Select b@@16 o@@24)) )) (|Set#Subset| a@@21 b@@16))))) :qid |DafnyPre.672:17| :skolemid |6784| :pattern ( (|Set#Subset| a@@21 b@@16)) )))
(assert (forall ((a@@22 T@U) (b@@17 T@U) ) (! (let ((T@@34 (MapType0TypeInv0 (type a@@22)))) (=> (and (= (type a@@22) (MapType0Type T@@34 boolType)) (= (type b@@17) (MapType0Type T@@34 boolType))) (and (=> (|Set#Equal| a@@22 b@@17) (forall ((o@@25 T@U) ) (!  (=> (= (type o@@25) T@@34) (and (=> (U_2_bool (MapType0Select a@@22 o@@25)) (U_2_bool (MapType0Select b@@17 o@@25))) (=> (U_2_bool (MapType0Select b@@17 o@@25)) (U_2_bool (MapType0Select a@@22 o@@25))))) :qid |DafnyPre.681:31| :skolemid |6785| :pattern ( (MapType0Select a@@22 o@@25)) :pattern ( (MapType0Select b@@17 o@@25)) ))) (=> (forall ((o@@26 T@U) ) (!  (=> (= (type o@@26) T@@34) (and (=> (U_2_bool (MapType0Select a@@22 o@@26)) (U_2_bool (MapType0Select b@@17 o@@26))) (=> (U_2_bool (MapType0Select b@@17 o@@26)) (U_2_bool (MapType0Select a@@22 o@@26))))) :qid |DafnyPre.681:31| :skolemid |6785| :pattern ( (MapType0Select a@@22 o@@26)) :pattern ( (MapType0Select b@@17 o@@26)) )) (|Set#Equal| a@@22 b@@17))))) :qid |DafnyPre.680:17| :skolemid |6786| :pattern ( (|Set#Equal| a@@22 b@@17)) )))
(assert (forall ((a@@23 T@U) (b@@18 T@U) ) (! (let ((T@@35 (MapType0TypeInv0 (type a@@23)))) (=> (and (and (= (type a@@23) (MapType0Type T@@35 boolType)) (= (type b@@18) (MapType0Type T@@35 boolType))) (|Set#Equal| a@@23 b@@18)) (= a@@23 b@@18))) :qid |DafnyPre.682:17| :skolemid |6787| :pattern ( (|Set#Equal| a@@23 b@@18)) )))
(assert (forall ((a@@24 T@U) (b@@19 T@U) ) (! (let ((T@@36 (MapType0TypeInv0 (type a@@24)))) (=> (and (= (type a@@24) (MapType0Type T@@36 boolType)) (= (type b@@19) (MapType0Type T@@36 boolType))) (and (=> (|Set#Disjoint| a@@24 b@@19) (forall ((o@@27 T@U) ) (!  (=> (= (type o@@27) T@@36) (or (not (U_2_bool (MapType0Select a@@24 o@@27))) (not (U_2_bool (MapType0Select b@@19 o@@27))))) :qid |DafnyPre.687:34| :skolemid |6788| :pattern ( (MapType0Select a@@24 o@@27)) :pattern ( (MapType0Select b@@19 o@@27)) ))) (=> (forall ((o@@28 T@U) ) (!  (=> (= (type o@@28) T@@36) (or (not (U_2_bool (MapType0Select a@@24 o@@28))) (not (U_2_bool (MapType0Select b@@19 o@@28))))) :qid |DafnyPre.687:34| :skolemid |6788| :pattern ( (MapType0Select a@@24 o@@28)) :pattern ( (MapType0Select b@@19 o@@28)) )) (|Set#Disjoint| a@@24 b@@19))))) :qid |DafnyPre.686:18| :skolemid |6789| :pattern ( (|Set#Disjoint| a@@24 b@@19)) )))
(assert (forall ((T@@37 T@T) ) (! (= (type (|ISet#Empty| T@@37)) (MapType0Type T@@37 boolType)) :qid |funType:ISet#Empty| :pattern ( (|ISet#Empty| T@@37)) )))
(assert (forall ((o@@29 T@U) ) (! (let ((T@@38 (type o@@29))) (not (U_2_bool (MapType0Select (|ISet#Empty| T@@38) o@@29)))) :qid |DafnyPre.696:18| :skolemid |6790| :pattern ( (let ((T@@38 (type o@@29))) (MapType0Select (|ISet#Empty| T@@38) o@@29))) )))
(assert (forall ((arg0@@71 T@U) (arg1@@27 T@U) ) (! (let ((T@@39 (type arg1@@27))) (= (type (|ISet#UnionOne| arg0@@71 arg1@@27)) (MapType0Type T@@39 boolType))) :qid |funType:ISet#UnionOne| :pattern ( (|ISet#UnionOne| arg0@@71 arg1@@27)) )))
(assert (forall ((a@@25 T@U) (x@@22 T@U) (o@@30 T@U) ) (! (let ((T@@40 (type x@@22))) (=> (and (= (type a@@25) (MapType0Type T@@40 boolType)) (= (type o@@30) T@@40)) (and (=> (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@22) o@@30)) (or (= o@@30 x@@22) (U_2_bool (MapType0Select a@@25 o@@30)))) (=> (or (= o@@30 x@@22) (U_2_bool (MapType0Select a@@25 o@@30))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@22) o@@30)))))) :qid |DafnyPre.703:18| :skolemid |6791| :pattern ( (MapType0Select (|ISet#UnionOne| a@@25 x@@22) o@@30)) )))
(assert (forall ((a@@26 T@U) (x@@23 T@U) ) (! (let ((T@@41 (type x@@23))) (=> (= (type a@@26) (MapType0Type T@@41 boolType)) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@26 x@@23) x@@23)))) :qid |DafnyPre.705:18| :skolemid |6792| :pattern ( (|ISet#UnionOne| a@@26 x@@23)) )))
(assert (forall ((a@@27 T@U) (x@@24 T@U) (y@@5 T@U) ) (! (let ((T@@42 (type x@@24))) (=> (and (and (= (type a@@27) (MapType0Type T@@42 boolType)) (= (type y@@5) T@@42)) (U_2_bool (MapType0Select a@@27 y@@5))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@27 x@@24) y@@5)))) :qid |DafnyPre.707:18| :skolemid |6793| :pattern ( (|ISet#UnionOne| a@@27 x@@24) (MapType0Select a@@27 y@@5)) )))
(assert (forall ((arg0@@72 T@U) (arg1@@28 T@U) ) (! (let ((T@@43 (MapType0TypeInv0 (type arg0@@72)))) (= (type (|ISet#Union| arg0@@72 arg1@@28)) (MapType0Type T@@43 boolType))) :qid |funType:ISet#Union| :pattern ( (|ISet#Union| arg0@@72 arg1@@28)) )))
(assert (forall ((a@@28 T@U) (b@@20 T@U) (o@@31 T@U) ) (! (let ((T@@44 (type o@@31))) (=> (and (= (type a@@28) (MapType0Type T@@44 boolType)) (= (type b@@20) (MapType0Type T@@44 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) o@@31)) (or (U_2_bool (MapType0Select a@@28 o@@31)) (U_2_bool (MapType0Select b@@20 o@@31)))) (=> (or (U_2_bool (MapType0Select a@@28 o@@31)) (U_2_bool (MapType0Select b@@20 o@@31))) (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) o@@31)))))) :qid |DafnyPre.711:18| :skolemid |6794| :pattern ( (MapType0Select (|ISet#Union| a@@28 b@@20) o@@31)) )))
(assert (forall ((a@@29 T@U) (b@@21 T@U) (y@@6 T@U) ) (! (let ((T@@45 (type y@@6))) (=> (and (and (= (type a@@29) (MapType0Type T@@45 boolType)) (= (type b@@21) (MapType0Type T@@45 boolType))) (U_2_bool (MapType0Select a@@29 y@@6))) (U_2_bool (MapType0Select (|ISet#Union| a@@29 b@@21) y@@6)))) :qid |DafnyPre.713:18| :skolemid |6795| :pattern ( (|ISet#Union| a@@29 b@@21) (MapType0Select a@@29 y@@6)) )))
(assert (forall ((a@@30 T@U) (b@@22 T@U) (y@@7 T@U) ) (! (let ((T@@46 (type y@@7))) (=> (and (and (= (type a@@30) (MapType0Type T@@46 boolType)) (= (type b@@22) (MapType0Type T@@46 boolType))) (U_2_bool (MapType0Select b@@22 y@@7))) (U_2_bool (MapType0Select (|ISet#Union| a@@30 b@@22) y@@7)))) :qid |DafnyPre.715:18| :skolemid |6796| :pattern ( (|ISet#Union| a@@30 b@@22) (MapType0Select b@@22 y@@7)) )))
(assert (forall ((arg0@@73 T@U) (arg1@@29 T@U) ) (! (let ((T@@47 (MapType0TypeInv0 (type arg0@@73)))) (= (type (|ISet#Difference| arg0@@73 arg1@@29)) (MapType0Type T@@47 boolType))) :qid |funType:ISet#Difference| :pattern ( (|ISet#Difference| arg0@@73 arg1@@29)) )))
(assert (forall ((a@@31 T@U) (b@@23 T@U) ) (! (let ((T@@48 (MapType0TypeInv0 (type a@@31)))) (=> (and (and (= (type a@@31) (MapType0Type T@@48 boolType)) (= (type b@@23) (MapType0Type T@@48 boolType))) (|ISet#Disjoint| a@@31 b@@23)) (and (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) a@@31) b@@23) (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) b@@23) a@@31)))) :qid |DafnyPre.717:18| :skolemid |6797| :pattern ( (|ISet#Union| a@@31 b@@23)) )))
(assert (forall ((arg0@@74 T@U) (arg1@@30 T@U) ) (! (let ((T@@49 (MapType0TypeInv0 (type arg0@@74)))) (= (type (|ISet#Intersection| arg0@@74 arg1@@30)) (MapType0Type T@@49 boolType))) :qid |funType:ISet#Intersection| :pattern ( (|ISet#Intersection| arg0@@74 arg1@@30)) )))
(assert (forall ((a@@32 T@U) (b@@24 T@U) (o@@32 T@U) ) (! (let ((T@@50 (type o@@32))) (=> (and (= (type a@@32) (MapType0Type T@@50 boolType)) (= (type b@@24) (MapType0Type T@@50 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@32)) (and (U_2_bool (MapType0Select a@@32 o@@32)) (U_2_bool (MapType0Select b@@24 o@@32)))) (=> (and (U_2_bool (MapType0Select a@@32 o@@32)) (U_2_bool (MapType0Select b@@24 o@@32))) (U_2_bool (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@32)))))) :qid |DafnyPre.727:18| :skolemid |6798| :pattern ( (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@32)) )))
(assert (forall ((a@@33 T@U) (b@@25 T@U) ) (! (let ((T@@51 (MapType0TypeInv0 (type a@@33)))) (=> (and (= (type a@@33) (MapType0Type T@@51 boolType)) (= (type b@@25) (MapType0Type T@@51 boolType))) (= (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25) (|ISet#Union| a@@33 b@@25)))) :qid |DafnyPre.730:18| :skolemid |6799| :pattern ( (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25)) )))
(assert (forall ((a@@34 T@U) (b@@26 T@U) ) (! (let ((T@@52 (MapType0TypeInv0 (type a@@34)))) (=> (and (= (type a@@34) (MapType0Type T@@52 boolType)) (= (type b@@26) (MapType0Type T@@52 boolType))) (= (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26)) (|ISet#Union| a@@34 b@@26)))) :qid |DafnyPre.732:18| :skolemid |6800| :pattern ( (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26))) )))
(assert (forall ((a@@35 T@U) (b@@27 T@U) ) (! (let ((T@@53 (MapType0TypeInv0 (type a@@35)))) (=> (and (= (type a@@35) (MapType0Type T@@53 boolType)) (= (type b@@27) (MapType0Type T@@53 boolType))) (= (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27) (|ISet#Intersection| a@@35 b@@27)))) :qid |DafnyPre.734:18| :skolemid |6801| :pattern ( (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27)) )))
(assert (forall ((a@@36 T@U) (b@@28 T@U) ) (! (let ((T@@54 (MapType0TypeInv0 (type a@@36)))) (=> (and (= (type a@@36) (MapType0Type T@@54 boolType)) (= (type b@@28) (MapType0Type T@@54 boolType))) (= (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28)) (|ISet#Intersection| a@@36 b@@28)))) :qid |DafnyPre.736:18| :skolemid |6802| :pattern ( (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28))) )))
(assert (forall ((a@@37 T@U) (b@@29 T@U) (o@@33 T@U) ) (! (let ((T@@55 (type o@@33))) (=> (and (= (type a@@37) (MapType0Type T@@55 boolType)) (= (type b@@29) (MapType0Type T@@55 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@33)) (and (U_2_bool (MapType0Select a@@37 o@@33)) (not (U_2_bool (MapType0Select b@@29 o@@33))))) (=> (and (U_2_bool (MapType0Select a@@37 o@@33)) (not (U_2_bool (MapType0Select b@@29 o@@33)))) (U_2_bool (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@33)))))) :qid |DafnyPre.741:18| :skolemid |6803| :pattern ( (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@33)) )))
(assert (forall ((a@@38 T@U) (b@@30 T@U) (y@@8 T@U) ) (! (let ((T@@56 (type y@@8))) (=> (and (and (= (type a@@38) (MapType0Type T@@56 boolType)) (= (type b@@30) (MapType0Type T@@56 boolType))) (U_2_bool (MapType0Select b@@30 y@@8))) (not (U_2_bool (MapType0Select (|ISet#Difference| a@@38 b@@30) y@@8))))) :qid |DafnyPre.743:18| :skolemid |6804| :pattern ( (|ISet#Difference| a@@38 b@@30) (MapType0Select b@@30 y@@8)) )))
(assert (forall ((a@@39 T@U) (b@@31 T@U) ) (! (let ((T@@57 (MapType0TypeInv0 (type a@@39)))) (=> (and (= (type a@@39) (MapType0Type T@@57 boolType)) (= (type b@@31) (MapType0Type T@@57 boolType))) (and (=> (|ISet#Subset| a@@39 b@@31) (forall ((o@@34 T@U) ) (!  (=> (and (= (type o@@34) T@@57) (U_2_bool (MapType0Select a@@39 o@@34))) (U_2_bool (MapType0Select b@@31 o@@34))) :qid |DafnyPre.748:33| :skolemid |6805| :pattern ( (MapType0Select a@@39 o@@34)) :pattern ( (MapType0Select b@@31 o@@34)) ))) (=> (forall ((o@@35 T@U) ) (!  (=> (and (= (type o@@35) T@@57) (U_2_bool (MapType0Select a@@39 o@@35))) (U_2_bool (MapType0Select b@@31 o@@35))) :qid |DafnyPre.748:33| :skolemid |6805| :pattern ( (MapType0Select a@@39 o@@35)) :pattern ( (MapType0Select b@@31 o@@35)) )) (|ISet#Subset| a@@39 b@@31))))) :qid |DafnyPre.747:17| :skolemid |6806| :pattern ( (|ISet#Subset| a@@39 b@@31)) )))
(assert (forall ((a@@40 T@U) (b@@32 T@U) ) (! (let ((T@@58 (MapType0TypeInv0 (type a@@40)))) (=> (and (= (type a@@40) (MapType0Type T@@58 boolType)) (= (type b@@32) (MapType0Type T@@58 boolType))) (and (=> (|ISet#Equal| a@@40 b@@32) (forall ((o@@36 T@U) ) (!  (=> (= (type o@@36) T@@58) (and (=> (U_2_bool (MapType0Select a@@40 o@@36)) (U_2_bool (MapType0Select b@@32 o@@36))) (=> (U_2_bool (MapType0Select b@@32 o@@36)) (U_2_bool (MapType0Select a@@40 o@@36))))) :qid |DafnyPre.756:32| :skolemid |6807| :pattern ( (MapType0Select a@@40 o@@36)) :pattern ( (MapType0Select b@@32 o@@36)) ))) (=> (forall ((o@@37 T@U) ) (!  (=> (= (type o@@37) T@@58) (and (=> (U_2_bool (MapType0Select a@@40 o@@37)) (U_2_bool (MapType0Select b@@32 o@@37))) (=> (U_2_bool (MapType0Select b@@32 o@@37)) (U_2_bool (MapType0Select a@@40 o@@37))))) :qid |DafnyPre.756:32| :skolemid |6807| :pattern ( (MapType0Select a@@40 o@@37)) :pattern ( (MapType0Select b@@32 o@@37)) )) (|ISet#Equal| a@@40 b@@32))))) :qid |DafnyPre.755:17| :skolemid |6808| :pattern ( (|ISet#Equal| a@@40 b@@32)) )))
(assert (forall ((a@@41 T@U) (b@@33 T@U) ) (! (let ((T@@59 (MapType0TypeInv0 (type a@@41)))) (=> (and (and (= (type a@@41) (MapType0Type T@@59 boolType)) (= (type b@@33) (MapType0Type T@@59 boolType))) (|ISet#Equal| a@@41 b@@33)) (= a@@41 b@@33))) :qid |DafnyPre.757:17| :skolemid |6809| :pattern ( (|ISet#Equal| a@@41 b@@33)) )))
(assert (forall ((a@@42 T@U) (b@@34 T@U) ) (! (let ((T@@60 (MapType0TypeInv0 (type a@@42)))) (=> (and (= (type a@@42) (MapType0Type T@@60 boolType)) (= (type b@@34) (MapType0Type T@@60 boolType))) (and (=> (|ISet#Disjoint| a@@42 b@@34) (forall ((o@@38 T@U) ) (!  (=> (= (type o@@38) T@@60) (or (not (U_2_bool (MapType0Select a@@42 o@@38))) (not (U_2_bool (MapType0Select b@@34 o@@38))))) :qid |DafnyPre.762:35| :skolemid |6810| :pattern ( (MapType0Select a@@42 o@@38)) :pattern ( (MapType0Select b@@34 o@@38)) ))) (=> (forall ((o@@39 T@U) ) (!  (=> (= (type o@@39) T@@60) (or (not (U_2_bool (MapType0Select a@@42 o@@39))) (not (U_2_bool (MapType0Select b@@34 o@@39))))) :qid |DafnyPre.762:35| :skolemid |6810| :pattern ( (MapType0Select a@@42 o@@39)) :pattern ( (MapType0Select b@@34 o@@39)) )) (|ISet#Disjoint| a@@42 b@@34))))) :qid |DafnyPre.761:18| :skolemid |6811| :pattern ( (|ISet#Disjoint| a@@42 b@@34)) )))
(assert (forall ((a@@43 Int) (b@@35 Int) ) (!  (and (=> (<= a@@43 b@@35) (= (|Math#min| a@@43 b@@35) a@@43)) (=> (= (|Math#min| a@@43 b@@35) a@@43) (<= a@@43 b@@35))) :qid |DafnyPre.769:15| :skolemid |6812| :pattern ( (|Math#min| a@@43 b@@35)) )))
(assert (forall ((a@@44 Int) (b@@36 Int) ) (!  (and (=> (<= b@@36 a@@44) (= (|Math#min| a@@44 b@@36) b@@36)) (=> (= (|Math#min| a@@44 b@@36) b@@36) (<= b@@36 a@@44))) :qid |DafnyPre.770:15| :skolemid |6813| :pattern ( (|Math#min| a@@44 b@@36)) )))
(assert (forall ((a@@45 Int) (b@@37 Int) ) (!  (or (= (|Math#min| a@@45 b@@37) a@@45) (= (|Math#min| a@@45 b@@37) b@@37)) :qid |DafnyPre.771:15| :skolemid |6814| :pattern ( (|Math#min| a@@45 b@@37)) )))
(assert (forall ((a@@46 Int) ) (!  (=> (<= 0 a@@46) (= (|Math#clip| a@@46) a@@46)) :qid |DafnyPre.774:15| :skolemid |6815| :pattern ( (|Math#clip| a@@46)) )))
(assert (forall ((a@@47 Int) ) (!  (=> (< a@@47 0) (= (|Math#clip| a@@47) 0)) :qid |DafnyPre.775:15| :skolemid |6816| :pattern ( (|Math#clip| a@@47)) )))
(assert (forall ((ms T@U) ) (! (let ((T@@61 (MapType0TypeInv0 (type ms)))) (=> (= (type ms) (MapType0Type T@@61 intType)) (and (=> ($IsGoodMultiSet ms) (forall ((bx@@31 T@U) ) (!  (=> (= (type bx@@31) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@31))) (<= (U_2_int (MapType0Select ms bx@@31)) (|MultiSet#Card| ms)))) :qid |DafnyPre.783:11| :skolemid |6817| :pattern ( (MapType0Select ms bx@@31)) ))) (=> (forall ((bx@@32 T@U) ) (!  (=> (= (type bx@@32) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@32))) (<= (U_2_int (MapType0Select ms bx@@32)) (|MultiSet#Card| ms)))) :qid |DafnyPre.783:11| :skolemid |6817| :pattern ( (MapType0Select ms bx@@32)) )) ($IsGoodMultiSet ms))))) :qid |DafnyPre.781:18| :skolemid |6818| :pattern ( ($IsGoodMultiSet ms)) )))
(assert (forall ((s@@5 T@U) ) (! (let ((T@@62 (MapType0TypeInv0 (type s@@5)))) (=> (= (type s@@5) (MapType0Type T@@62 intType)) (<= 0 (|MultiSet#Card| s@@5)))) :qid |DafnyPre.786:18| :skolemid |6819| :pattern ( (|MultiSet#Card| s@@5)) )))
(assert (forall ((s@@6 T@U) (x@@25 T@U) (n@@5 T@U) ) (! (let ((T@@63 (type x@@25))) (=> (and (and (= (type s@@6) (MapType0Type T@@63 intType)) (= (type n@@5) intType)) (<= 0 (U_2_int n@@5))) (= (|MultiSet#Card| (MapType0Store s@@6 x@@25 n@@5)) (+ (- (|MultiSet#Card| s@@6) (U_2_int (MapType0Select s@@6 x@@25))) (U_2_int n@@5))))) :qid |DafnyPre.787:18| :skolemid |6820| :pattern ( (|MultiSet#Card| (MapType0Store s@@6 x@@25 n@@5))) )))
(assert (forall ((T@@64 T@T) ) (! (= (type (|MultiSet#Empty| T@@64)) (MapType0Type T@@64 intType)) :qid |funType:MultiSet#Empty| :pattern ( (|MultiSet#Empty| T@@64)) )))
(assert (forall ((o@@40 T@U) ) (! (let ((T@@65 (type o@@40))) (= (U_2_int (MapType0Select (|MultiSet#Empty| T@@65) o@@40)) 0)) :qid |DafnyPre.791:18| :skolemid |6821| :pattern ( (let ((T@@65 (type o@@40))) (MapType0Select (|MultiSet#Empty| T@@65) o@@40))) )))
(assert (forall ((s@@7 T@U) ) (! (let ((T@@66 (MapType0TypeInv0 (type s@@7)))) (=> (= (type s@@7) (MapType0Type T@@66 intType)) (and (and (=> (= (|MultiSet#Card| s@@7) 0) (= s@@7 (|MultiSet#Empty| T@@66))) (=> (= s@@7 (|MultiSet#Empty| T@@66)) (= (|MultiSet#Card| s@@7) 0))) (=> (not (= (|MultiSet#Card| s@@7) 0)) (exists ((x@@26 T@U) ) (!  (and (= (type x@@26) T@@66) (< 0 (U_2_int (MapType0Select s@@7 x@@26)))) :qid |DafnyPre.794:38| :skolemid |6822| :no-pattern (type x@@26) :no-pattern (U_2_int x@@26) :no-pattern (U_2_bool x@@26) )))))) :qid |DafnyPre.792:18| :skolemid |6823| :pattern ( (|MultiSet#Card| s@@7)) )))
(assert (forall ((arg0@@75 T@U) ) (! (let ((T@@67 (type arg0@@75))) (= (type (|MultiSet#Singleton| arg0@@75)) (MapType0Type T@@67 intType))) :qid |funType:MultiSet#Singleton| :pattern ( (|MultiSet#Singleton| arg0@@75)) )))
(assert (forall ((r@@4 T@U) (o@@41 T@U) ) (! (let ((T@@68 (type r@@4))) (=> (= (type o@@41) T@@68) (and (and (=> (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 1) (= r@@4 o@@41)) (=> (= r@@4 o@@41) (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 1))) (and (=> (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 0) (not (= r@@4 o@@41))) (=> (not (= r@@4 o@@41)) (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 0)))))) :qid |DafnyPre.797:18| :skolemid |6824| :pattern ( (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) )))
(assert (forall ((arg0@@76 T@U) (arg1@@31 T@U) ) (! (let ((T@@69 (type arg1@@31))) (= (type (|MultiSet#UnionOne| arg0@@76 arg1@@31)) (MapType0Type T@@69 intType))) :qid |funType:MultiSet#UnionOne| :pattern ( (|MultiSet#UnionOne| arg0@@76 arg1@@31)) )))
(assert (forall ((r@@5 T@U) ) (! (let ((T@@70 (type r@@5))) (= (|MultiSet#Singleton| r@@5) (|MultiSet#UnionOne| (|MultiSet#Empty| T@@70) r@@5))) :qid |DafnyPre.799:18| :skolemid |6825| :pattern ( (|MultiSet#Singleton| r@@5)) )))
(assert (forall ((a@@48 T@U) (x@@27 T@U) (o@@42 T@U) ) (! (let ((T@@71 (type x@@27))) (=> (and (= (type a@@48) (MapType0Type T@@71 intType)) (= (type o@@42) T@@71)) (and (=> (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@27) o@@42))) (or (= o@@42 x@@27) (< 0 (U_2_int (MapType0Select a@@48 o@@42))))) (=> (or (= o@@42 x@@27) (< 0 (U_2_int (MapType0Select a@@48 o@@42)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@27) o@@42))))))) :qid |DafnyPre.803:18| :skolemid |6826| :pattern ( (MapType0Select (|MultiSet#UnionOne| a@@48 x@@27) o@@42)) )))
(assert (forall ((a@@49 T@U) (x@@28 T@U) ) (! (let ((T@@72 (type x@@28))) (=> (= (type a@@49) (MapType0Type T@@72 intType)) (= (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@49 x@@28) x@@28)) (+ (U_2_int (MapType0Select a@@49 x@@28)) 1)))) :qid |DafnyPre.806:18| :skolemid |6827| :pattern ( (|MultiSet#UnionOne| a@@49 x@@28)) )))
(assert (forall ((a@@50 T@U) (x@@29 T@U) (y@@9 T@U) ) (! (let ((T@@73 (type x@@29))) (=> (and (and (= (type a@@50) (MapType0Type T@@73 intType)) (= (type y@@9) T@@73)) (< 0 (U_2_int (MapType0Select a@@50 y@@9)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@50 x@@29) y@@9))))) :qid |DafnyPre.809:18| :skolemid |6828| :pattern ( (|MultiSet#UnionOne| a@@50 x@@29) (MapType0Select a@@50 y@@9)) )))
(assert (forall ((a@@51 T@U) (x@@30 T@U) (y@@10 T@U) ) (! (let ((T@@74 (type x@@30))) (=> (and (and (= (type a@@51) (MapType0Type T@@74 intType)) (= (type y@@10) T@@74)) (not (= x@@30 y@@10))) (= (U_2_int (MapType0Select a@@51 y@@10)) (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@51 x@@30) y@@10))))) :qid |DafnyPre.812:18| :skolemid |6829| :pattern ( (|MultiSet#UnionOne| a@@51 x@@30) (MapType0Select a@@51 y@@10)) )))
(assert (forall ((a@@52 T@U) (x@@31 T@U) ) (! (let ((T@@75 (type x@@31))) (=> (= (type a@@52) (MapType0Type T@@75 intType)) (= (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@31)) (+ (|MultiSet#Card| a@@52) 1)))) :qid |DafnyPre.814:18| :skolemid |6830| :pattern ( (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@31))) )))
(assert (forall ((arg0@@77 T@U) (arg1@@32 T@U) ) (! (let ((T@@76 (MapType0TypeInv0 (type arg0@@77)))) (= (type (|MultiSet#Union| arg0@@77 arg1@@32)) (MapType0Type T@@76 intType))) :qid |funType:MultiSet#Union| :pattern ( (|MultiSet#Union| arg0@@77 arg1@@32)) )))
(assert (forall ((a@@53 T@U) (b@@38 T@U) (o@@43 T@U) ) (! (let ((T@@77 (type o@@43))) (=> (and (= (type a@@53) (MapType0Type T@@77 intType)) (= (type b@@38) (MapType0Type T@@77 intType))) (= (U_2_int (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@43)) (+ (U_2_int (MapType0Select a@@53 o@@43)) (U_2_int (MapType0Select b@@38 o@@43)))))) :qid |DafnyPre.820:18| :skolemid |6831| :pattern ( (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@43)) )))
(assert (forall ((a@@54 T@U) (b@@39 T@U) ) (! (let ((T@@78 (MapType0TypeInv0 (type a@@54)))) (=> (and (= (type a@@54) (MapType0Type T@@78 intType)) (= (type b@@39) (MapType0Type T@@78 intType))) (= (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39)) (+ (|MultiSet#Card| a@@54) (|MultiSet#Card| b@@39))))) :qid |DafnyPre.822:18| :skolemid |6832| :pattern ( (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39))) )))
(assert (forall ((arg0@@78 T@U) (arg1@@33 T@U) ) (! (let ((T@@79 (MapType0TypeInv0 (type arg0@@78)))) (= (type (|MultiSet#Intersection| arg0@@78 arg1@@33)) (MapType0Type T@@79 intType))) :qid |funType:MultiSet#Intersection| :pattern ( (|MultiSet#Intersection| arg0@@78 arg1@@33)) )))
(assert (forall ((a@@55 T@U) (b@@40 T@U) (o@@44 T@U) ) (! (let ((T@@80 (type o@@44))) (=> (and (= (type a@@55) (MapType0Type T@@80 intType)) (= (type b@@40) (MapType0Type T@@80 intType))) (= (U_2_int (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@44)) (|Math#min| (U_2_int (MapType0Select a@@55 o@@44)) (U_2_int (MapType0Select b@@40 o@@44)))))) :qid |DafnyPre.826:18| :skolemid |6833| :pattern ( (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@44)) )))
(assert (forall ((a@@56 T@U) (b@@41 T@U) ) (! (let ((T@@81 (MapType0TypeInv0 (type a@@56)))) (=> (and (= (type a@@56) (MapType0Type T@@81 intType)) (= (type b@@41) (MapType0Type T@@81 intType))) (= (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41) (|MultiSet#Intersection| a@@56 b@@41)))) :qid |DafnyPre.830:18| :skolemid |6834| :pattern ( (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41)) )))
(assert (forall ((a@@57 T@U) (b@@42 T@U) ) (! (let ((T@@82 (MapType0TypeInv0 (type a@@57)))) (=> (and (= (type a@@57) (MapType0Type T@@82 intType)) (= (type b@@42) (MapType0Type T@@82 intType))) (= (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42)) (|MultiSet#Intersection| a@@57 b@@42)))) :qid |DafnyPre.832:18| :skolemid |6835| :pattern ( (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42))) )))
(assert (forall ((arg0@@79 T@U) (arg1@@34 T@U) ) (! (let ((T@@83 (MapType0TypeInv0 (type arg0@@79)))) (= (type (|MultiSet#Difference| arg0@@79 arg1@@34)) (MapType0Type T@@83 intType))) :qid |funType:MultiSet#Difference| :pattern ( (|MultiSet#Difference| arg0@@79 arg1@@34)) )))
(assert (forall ((a@@58 T@U) (b@@43 T@U) (o@@45 T@U) ) (! (let ((T@@84 (type o@@45))) (=> (and (= (type a@@58) (MapType0Type T@@84 intType)) (= (type b@@43) (MapType0Type T@@84 intType))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@45)) (|Math#clip| (- (U_2_int (MapType0Select a@@58 o@@45)) (U_2_int (MapType0Select b@@43 o@@45))))))) :qid |DafnyPre.837:18| :skolemid |6836| :pattern ( (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@45)) )))
(assert (forall ((a@@59 T@U) (b@@44 T@U) (y@@11 T@U) ) (! (let ((T@@85 (type y@@11))) (=> (and (and (= (type a@@59) (MapType0Type T@@85 intType)) (= (type b@@44) (MapType0Type T@@85 intType))) (<= (U_2_int (MapType0Select a@@59 y@@11)) (U_2_int (MapType0Select b@@44 y@@11)))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@59 b@@44) y@@11)) 0))) :qid |DafnyPre.839:18| :skolemid |6837| :pattern ( (|MultiSet#Difference| a@@59 b@@44) (MapType0Select b@@44 y@@11) (MapType0Select a@@59 y@@11)) )))
(assert (forall ((a@@60 T@U) (b@@45 T@U) ) (! (let ((T@@86 (MapType0TypeInv0 (type a@@60)))) (=> (and (= (type a@@60) (MapType0Type T@@86 intType)) (= (type b@@45) (MapType0Type T@@86 intType))) (and (= (+ (+ (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (|MultiSet#Card| (|MultiSet#Difference| b@@45 a@@60))) (* 2 (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45)))) (|MultiSet#Card| (|MultiSet#Union| a@@60 b@@45))) (= (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (- (|MultiSet#Card| a@@60) (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45))))))) :qid |DafnyPre.841:18| :skolemid |6838| :pattern ( (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45))) )))
(assert (forall ((a@@61 T@U) (b@@46 T@U) ) (! (let ((T@@87 (MapType0TypeInv0 (type a@@61)))) (=> (and (= (type a@@61) (MapType0Type T@@87 intType)) (= (type b@@46) (MapType0Type T@@87 intType))) (and (=> (|MultiSet#Subset| a@@61 b@@46) (forall ((o@@46 T@U) ) (!  (=> (= (type o@@46) T@@87) (<= (U_2_int (MapType0Select a@@61 o@@46)) (U_2_int (MapType0Select b@@46 o@@46)))) :qid |DafnyPre.851:37| :skolemid |6839| :pattern ( (MapType0Select a@@61 o@@46)) :pattern ( (MapType0Select b@@46 o@@46)) ))) (=> (forall ((o@@47 T@U) ) (!  (=> (= (type o@@47) T@@87) (<= (U_2_int (MapType0Select a@@61 o@@47)) (U_2_int (MapType0Select b@@46 o@@47)))) :qid |DafnyPre.851:37| :skolemid |6839| :pattern ( (MapType0Select a@@61 o@@47)) :pattern ( (MapType0Select b@@46 o@@47)) )) (|MultiSet#Subset| a@@61 b@@46))))) :qid |DafnyPre.850:17| :skolemid |6840| :pattern ( (|MultiSet#Subset| a@@61 b@@46)) )))
(assert (forall ((a@@62 T@U) (b@@47 T@U) ) (! (let ((T@@88 (MapType0TypeInv0 (type a@@62)))) (=> (and (= (type a@@62) (MapType0Type T@@88 intType)) (= (type b@@47) (MapType0Type T@@88 intType))) (and (=> (|MultiSet#Equal| a@@62 b@@47) (forall ((o@@48 T@U) ) (!  (=> (= (type o@@48) T@@88) (= (U_2_int (MapType0Select a@@62 o@@48)) (U_2_int (MapType0Select b@@47 o@@48)))) :qid |DafnyPre.855:36| :skolemid |6841| :pattern ( (MapType0Select a@@62 o@@48)) :pattern ( (MapType0Select b@@47 o@@48)) ))) (=> (forall ((o@@49 T@U) ) (!  (=> (= (type o@@49) T@@88) (= (U_2_int (MapType0Select a@@62 o@@49)) (U_2_int (MapType0Select b@@47 o@@49)))) :qid |DafnyPre.855:36| :skolemid |6841| :pattern ( (MapType0Select a@@62 o@@49)) :pattern ( (MapType0Select b@@47 o@@49)) )) (|MultiSet#Equal| a@@62 b@@47))))) :qid |DafnyPre.854:17| :skolemid |6842| :pattern ( (|MultiSet#Equal| a@@62 b@@47)) )))
(assert (forall ((a@@63 T@U) (b@@48 T@U) ) (! (let ((T@@89 (MapType0TypeInv0 (type a@@63)))) (=> (and (and (= (type a@@63) (MapType0Type T@@89 intType)) (= (type b@@48) (MapType0Type T@@89 intType))) (|MultiSet#Equal| a@@63 b@@48)) (= a@@63 b@@48))) :qid |DafnyPre.857:17| :skolemid |6843| :pattern ( (|MultiSet#Equal| a@@63 b@@48)) )))
(assert (forall ((a@@64 T@U) (b@@49 T@U) ) (! (let ((T@@90 (MapType0TypeInv0 (type a@@64)))) (=> (and (= (type a@@64) (MapType0Type T@@90 intType)) (= (type b@@49) (MapType0Type T@@90 intType))) (and (=> (|MultiSet#Disjoint| a@@64 b@@49) (forall ((o@@50 T@U) ) (!  (=> (= (type o@@50) T@@90) (or (= (U_2_int (MapType0Select a@@64 o@@50)) 0) (= (U_2_int (MapType0Select b@@49 o@@50)) 0))) :qid |DafnyPre.862:39| :skolemid |6844| :pattern ( (MapType0Select a@@64 o@@50)) :pattern ( (MapType0Select b@@49 o@@50)) ))) (=> (forall ((o@@51 T@U) ) (!  (=> (= (type o@@51) T@@90) (or (= (U_2_int (MapType0Select a@@64 o@@51)) 0) (= (U_2_int (MapType0Select b@@49 o@@51)) 0))) :qid |DafnyPre.862:39| :skolemid |6844| :pattern ( (MapType0Select a@@64 o@@51)) :pattern ( (MapType0Select b@@49 o@@51)) )) (|MultiSet#Disjoint| a@@64 b@@49))))) :qid |DafnyPre.861:18| :skolemid |6845| :pattern ( (|MultiSet#Disjoint| a@@64 b@@49)) )))
(assert (forall ((arg0@@80 T@U) ) (! (let ((T@@91 (MapType0TypeInv0 (type arg0@@80)))) (= (type (|MultiSet#FromSet| arg0@@80)) (MapType0Type T@@91 intType))) :qid |funType:MultiSet#FromSet| :pattern ( (|MultiSet#FromSet| arg0@@80)) )))
(assert (forall ((s@@8 T@U) (a@@65 T@U) ) (! (let ((T@@92 (type a@@65))) (=> (= (type s@@8) (MapType0Type T@@92 boolType)) (and (and (=> (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 0) (not (U_2_bool (MapType0Select s@@8 a@@65)))) (=> (not (U_2_bool (MapType0Select s@@8 a@@65))) (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 0))) (and (=> (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 1) (U_2_bool (MapType0Select s@@8 a@@65))) (=> (U_2_bool (MapType0Select s@@8 a@@65)) (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 1)))))) :qid |DafnyPre.866:18| :skolemid |6846| :pattern ( (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) )))
(assert (forall ((s@@9 T@U) ) (! (let ((T@@93 (MapType0TypeInv0 (type s@@9)))) (=> (= (type s@@9) (MapType0Type T@@93 boolType)) (= (|MultiSet#Card| (|MultiSet#FromSet| s@@9)) (|Set#Card| s@@9)))) :qid |DafnyPre.869:18| :skolemid |6847| :pattern ( (|MultiSet#Card| (|MultiSet#FromSet| s@@9))) )))
(assert (forall ((arg0@@81 T@U) ) (! (let ((T@@94 (SeqTypeInv0 (type arg0@@81)))) (= (type (|MultiSet#FromSeq| arg0@@81)) (MapType0Type T@@94 intType))) :qid |funType:MultiSet#FromSeq| :pattern ( (|MultiSet#FromSeq| arg0@@81)) )))
(assert (forall ((s@@10 T@U) ) (! (let ((T@@95 (SeqTypeInv0 (type s@@10)))) (=> (= (type s@@10) (SeqType T@@95)) ($IsGoodMultiSet (|MultiSet#FromSeq| s@@10)))) :qid |DafnyPre.875:18| :skolemid |6848| :pattern ( (|MultiSet#FromSeq| s@@10)) )))
(assert (forall ((s@@11 T@U) ) (! (let ((T@@96 (SeqTypeInv0 (type s@@11)))) (=> (= (type s@@11) (SeqType T@@96)) (= (|MultiSet#Card| (|MultiSet#FromSeq| s@@11)) (|Seq#Length| s@@11)))) :qid |DafnyPre.877:18| :skolemid |6849| :pattern ( (|MultiSet#Card| (|MultiSet#FromSeq| s@@11))) )))
(assert (forall ((arg0@@82 T@U) (arg1@@35 T@U) ) (! (let ((T@@97 (type arg1@@35))) (= (type (|Seq#Build| arg0@@82 arg1@@35)) (SeqType T@@97))) :qid |funType:Seq#Build| :pattern ( (|Seq#Build| arg0@@82 arg1@@35)) )))
(assert (forall ((s@@12 T@U) (v@@25 T@U) ) (! (let ((T@@98 (type v@@25))) (=> (= (type s@@12) (SeqType T@@98)) (= (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@25)) (|MultiSet#UnionOne| (|MultiSet#FromSeq| s@@12) v@@25)))) :qid |DafnyPre.881:18| :skolemid |6850| :pattern ( (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@25))) )))
(assert (forall ((T@@99 T@T) ) (! (= (type (|Seq#Empty| T@@99)) (SeqType T@@99)) :qid |funType:Seq#Empty| :pattern ( (|Seq#Empty| T@@99)) )))
(assert (forall ((T@@100 T@T) ) (! (= (|MultiSet#FromSeq| (|Seq#Empty| T@@100)) (|MultiSet#Empty| T@@100)) :skolemid |6851| )))
(assert (forall ((arg0@@83 T@U) (arg1@@36 T@U) ) (! (let ((T@@101 (SeqTypeInv0 (type arg0@@83)))) (= (type (|Seq#Append| arg0@@83 arg1@@36)) (SeqType T@@101))) :qid |funType:Seq#Append| :pattern ( (|Seq#Append| arg0@@83 arg1@@36)) )))
(assert (forall ((a@@66 T@U) (b@@50 T@U) ) (! (let ((T@@102 (SeqTypeInv0 (type a@@66)))) (=> (and (= (type a@@66) (SeqType T@@102)) (= (type b@@50) (SeqType T@@102))) (= (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50)) (|MultiSet#Union| (|MultiSet#FromSeq| a@@66) (|MultiSet#FromSeq| b@@50))))) :qid |DafnyPre.888:18| :skolemid |6852| :pattern ( (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50))) )))
(assert (forall ((arg0@@84 T@U) (arg1@@37 Int) (arg2@@1 T@U) ) (! (let ((T@@103 (type arg2@@1))) (= (type (|Seq#Update| arg0@@84 arg1@@37 arg2@@1)) (SeqType T@@103))) :qid |funType:Seq#Update| :pattern ( (|Seq#Update| arg0@@84 arg1@@37 arg2@@1)) )))
(assert (forall ((s@@13 T@U) (i@@8 Int) (v@@26 T@U) (x@@32 T@U) ) (! (let ((T@@104 (type v@@26))) (=> (and (and (= (type s@@13) (SeqType T@@104)) (= (type x@@32) T@@104)) (and (<= 0 i@@8) (< i@@8 (|Seq#Length| s@@13)))) (= (U_2_int (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@8 v@@26)) x@@32)) (U_2_int (MapType0Select (|MultiSet#Union| (|MultiSet#Difference| (|MultiSet#FromSeq| s@@13) (|MultiSet#Singleton| (|Seq#Index| s@@13 i@@8))) (|MultiSet#Singleton| v@@26)) x@@32))))) :qid |DafnyPre.893:18| :skolemid |6853| :pattern ( (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@8 v@@26)) x@@32)) )))
(assert (forall ((s@@14 T@U) (x@@33 T@U) ) (! (let ((T@@105 (type x@@33))) (=> (= (type s@@14) (SeqType T@@105)) (and (=> (exists ((i@@9 Int) ) (!  (and (and (<= 0 i@@9) (< i@@9 (|Seq#Length| s@@14))) (= x@@33 (|Seq#Index| s@@14 i@@9))) :qid |DafnyPre.900:11| :skolemid |6854| :pattern ( (|Seq#Index| s@@14 i@@9)) )) (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@33)))) (=> (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@33))) (exists ((i@@10 Int) ) (!  (and (and (<= 0 i@@10) (< i@@10 (|Seq#Length| s@@14))) (= x@@33 (|Seq#Index| s@@14 i@@10))) :qid |DafnyPre.900:11| :skolemid |6854| :pattern ( (|Seq#Index| s@@14 i@@10)) )))))) :qid |DafnyPre.899:18| :skolemid |6855| :pattern ( (MapType0Select (|MultiSet#FromSeq| s@@14) x@@33)) )))
(assert (forall ((s@@15 T@U) ) (! (let ((T@@106 (SeqTypeInv0 (type s@@15)))) (=> (= (type s@@15) (SeqType T@@106)) (<= 0 (|Seq#Length| s@@15)))) :qid |DafnyPre.909:18| :skolemid |6856| :pattern ( (|Seq#Length| s@@15)) )))
(assert (forall ((T@@107 T@T) ) (! (= (|Seq#Length| (|Seq#Empty| T@@107)) 0) :skolemid |6857| :pattern ( (|Seq#Empty| T@@107)) )))
(assert (forall ((s@@16 T@U) ) (! (let ((T@@108 (SeqTypeInv0 (type s@@16)))) (=> (and (= (type s@@16) (SeqType T@@108)) (= (|Seq#Length| s@@16) 0)) (= s@@16 (|Seq#Empty| T@@108)))) :qid |DafnyPre.913:18| :skolemid |6858| :pattern ( (|Seq#Length| s@@16)) )))
(assert (forall ((t@@23 T@U) (T@@109 T@T) ) (!  (=> (= (type t@@23) TyType) ($Is (|Seq#Empty| T@@109) t@@23)) :qid |DafnyPre.923:18| :skolemid |6859| :pattern ( ($Is (|Seq#Empty| T@@109) t@@23)) )))
(assert (forall ((arg0@@85 T@U) ) (! (let ((T@@110 (type arg0@@85))) (= (type (|Seq#Singleton| arg0@@85)) (SeqType T@@110))) :qid |funType:Seq#Singleton| :pattern ( (|Seq#Singleton| arg0@@85)) )))
(assert (forall ((t@@24 T@U) ) (! (= (|Seq#Length| (|Seq#Singleton| t@@24)) 1) :qid |DafnyPre.926:18| :skolemid |6860| :pattern ( (|Seq#Length| (|Seq#Singleton| t@@24))) )))
(assert  (and (forall ((arg0@@86 T@U) ) (! (let ((T@@111 (SeqTypeInv0 (type arg0@@86)))) (= (type (|Seq#Build_inv0| arg0@@86)) (SeqType T@@111))) :qid |funType:Seq#Build_inv0| :pattern ( (|Seq#Build_inv0| arg0@@86)) )) (forall ((arg0@@87 T@U) ) (! (let ((T@@112 (SeqTypeInv0 (type arg0@@87)))) (= (type (|Seq#Build_inv1| arg0@@87)) T@@112)) :qid |funType:Seq#Build_inv1| :pattern ( (|Seq#Build_inv1| arg0@@87)) ))))
(assert (forall ((s@@17 T@U) (val@@5 T@U) ) (! (let ((T@@113 (type val@@5))) (=> (= (type s@@17) (SeqType T@@113)) (and (= (|Seq#Build_inv0| (|Seq#Build| s@@17 val@@5)) s@@17) (= (|Seq#Build_inv1| (|Seq#Build| s@@17 val@@5)) val@@5)))) :qid |DafnyPre.931:18| :skolemid |6861| :pattern ( (|Seq#Build| s@@17 val@@5)) )))
(assert (forall ((s@@18 T@U) (v@@27 T@U) ) (! (let ((T@@114 (type v@@27))) (=> (= (type s@@18) (SeqType T@@114)) (= (|Seq#Length| (|Seq#Build| s@@18 v@@27)) (+ 1 (|Seq#Length| s@@18))))) :qid |DafnyPre.936:18| :skolemid |6862| :pattern ( (|Seq#Build| s@@18 v@@27)) )))
(assert (forall ((s@@19 T@U) (i@@11 Int) (v@@28 T@U) ) (! (let ((T@@115 (type v@@28))) (=> (= (type s@@19) (SeqType T@@115)) (and (=> (= i@@11 (|Seq#Length| s@@19)) (= (|Seq#Index| (|Seq#Build| s@@19 v@@28) i@@11) v@@28)) (=> (not (= i@@11 (|Seq#Length| s@@19))) (= (|Seq#Index| (|Seq#Build| s@@19 v@@28) i@@11) (|Seq#Index| s@@19 i@@11)))))) :qid |DafnyPre.939:18| :skolemid |6863| :pattern ( (|Seq#Index| (|Seq#Build| s@@19 v@@28) i@@11)) )))
(assert (forall ((s@@20 T@U) (bx@@33 T@U) (t@@25 T@U) ) (!  (=> (and (and (and (= (type s@@20) (SeqType BoxType)) (= (type bx@@33) BoxType)) (= (type t@@25) TyType)) (and ($Is s@@20 (TSeq t@@25)) ($IsBox bx@@33 t@@25))) ($Is (|Seq#Build| s@@20 bx@@33) (TSeq t@@25))) :qid |DafnyPre.944:15| :skolemid |6864| :pattern ( ($Is (|Seq#Build| s@@20 bx@@33) (TSeq t@@25))) )))
(assert  (and (= (Ctor HandleTypeType) 20) (forall ((arg0@@88 T@U) (arg1@@38 T@U) (arg2@@2 Int) (arg3 T@U) ) (! (= (type (|Seq#Create| arg0@@88 arg1@@38 arg2@@2 arg3)) (SeqType BoxType)) :qid |funType:Seq#Create| :pattern ( (|Seq#Create| arg0@@88 arg1@@38 arg2@@2 arg3)) ))))
(assert (forall ((ty T@U) (heap T@U) (len Int) (init T@U) ) (!  (=> (and (and (and (= (type ty) TyType) (= (type heap) (MapType0Type refType MapType1Type))) (= (type init) HandleTypeType)) (and ($IsGoodHeap heap) (<= 0 len))) (= (|Seq#Length| (|Seq#Create| ty heap len init)) len)) :qid |DafnyPre.948:15| :skolemid |6865| :pattern ( (|Seq#Length| (|Seq#Create| ty heap len init))) )))
(assert (forall ((arg0@@89 T@U) (arg1@@39 T@U) (arg2@@3 T@U) (arg3@@0 T@U) (arg4 T@U) ) (! (= (type (Apply1 arg0@@89 arg1@@39 arg2@@3 arg3@@0 arg4)) BoxType) :qid |funType:Apply1| :pattern ( (Apply1 arg0@@89 arg1@@39 arg2@@3 arg3@@0 arg4)) )))
(assert (forall ((ty@@0 T@U) (heap@@0 T@U) (len@@0 Int) (init@@0 T@U) (i@@12 Int) ) (!  (=> (and (and (and (= (type ty@@0) TyType) (= (type heap@@0) (MapType0Type refType MapType1Type))) (= (type init@@0) HandleTypeType)) (and (and ($IsGoodHeap heap@@0) (<= 0 i@@12)) (< i@@12 len@@0))) (= (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@12) (Apply1 TInt (TSeq ty@@0) heap@@0 init@@0 ($Box (int_2_U i@@12))))) :qid |DafnyPre.952:15| :skolemid |6866| :pattern ( (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@12)) )))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (let ((T@@116 (SeqTypeInv0 (type s0)))) (=> (and (= (type s0) (SeqType T@@116)) (= (type s1) (SeqType T@@116))) (= (|Seq#Length| (|Seq#Append| s0 s1)) (+ (|Seq#Length| s0) (|Seq#Length| s1))))) :qid |DafnyPre.958:18| :skolemid |6867| :pattern ( (|Seq#Length| (|Seq#Append| s0 s1))) )))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) (t@@26 T@U) ) (!  (=> (and (and (and (= (type s0@@0) (SeqType BoxType)) (= (type s1@@0) (SeqType BoxType))) (= (type t@@26) TyType)) (and ($Is s0@@0 t@@26) ($Is s1@@0 t@@26))) ($Is (|Seq#Append| s0@@0 s1@@0) t@@26)) :qid |DafnyPre.962:15| :skolemid |6868| :pattern ( ($Is (|Seq#Append| s0@@0 s1@@0) t@@26)) )))
(assert (forall ((t@@27 T@U) ) (! (= (|Seq#Index| (|Seq#Singleton| t@@27) 0) t@@27) :qid |DafnyPre.966:18| :skolemid |6869| :pattern ( (|Seq#Index| (|Seq#Singleton| t@@27) 0)) )))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) (n@@6 Int) ) (! (let ((T@@117 (SeqTypeInv0 (type s0@@1)))) (=> (and (= (type s0@@1) (SeqType T@@117)) (= (type s1@@1) (SeqType T@@117))) (and (=> (< n@@6 (|Seq#Length| s0@@1)) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@6) (|Seq#Index| s0@@1 n@@6))) (=> (<= (|Seq#Length| s0@@1) n@@6) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@6) (|Seq#Index| s1@@1 (- n@@6 (|Seq#Length| s0@@1)))))))) :qid |DafnyPre.967:18| :skolemid |6870| :pattern ( (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@6)) )))
(assert (forall ((s@@21 T@U) (i@@13 Int) (v@@29 T@U) ) (! (let ((T@@118 (type v@@29))) (=> (= (type s@@21) (SeqType T@@118)) (=> (and (<= 0 i@@13) (< i@@13 (|Seq#Length| s@@21))) (= (|Seq#Length| (|Seq#Update| s@@21 i@@13 v@@29)) (|Seq#Length| s@@21))))) :qid |DafnyPre.972:18| :skolemid |6871| :pattern ( (|Seq#Length| (|Seq#Update| s@@21 i@@13 v@@29))) )))
(assert (forall ((s@@22 T@U) (i@@14 Int) (v@@30 T@U) (n@@7 Int) ) (! (let ((T@@119 (type v@@30))) (=> (= (type s@@22) (SeqType T@@119)) (=> (and (<= 0 n@@7) (< n@@7 (|Seq#Length| s@@22))) (and (=> (= i@@14 n@@7) (= (|Seq#Index| (|Seq#Update| s@@22 i@@14 v@@30) n@@7) v@@30)) (=> (not (= i@@14 n@@7)) (= (|Seq#Index| (|Seq#Update| s@@22 i@@14 v@@30) n@@7) (|Seq#Index| s@@22 n@@7))))))) :qid |DafnyPre.974:18| :skolemid |6872| :pattern ( (|Seq#Index| (|Seq#Update| s@@22 i@@14 v@@30) n@@7)) )))
(assert (forall ((s@@23 T@U) (x@@34 T@U) ) (! (let ((T@@120 (type x@@34))) (=> (= (type s@@23) (SeqType T@@120)) (and (=> (|Seq#Contains| s@@23 x@@34) (exists ((i@@15 Int) ) (!  (and (and (<= 0 i@@15) (< i@@15 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@15) x@@34)) :qid |DafnyPre.982:13| :skolemid |6873| :pattern ( (|Seq#Index| s@@23 i@@15)) ))) (=> (exists ((i@@16 Int) ) (!  (and (and (<= 0 i@@16) (< i@@16 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@16) x@@34)) :qid |DafnyPre.982:13| :skolemid |6873| :pattern ( (|Seq#Index| s@@23 i@@16)) )) (|Seq#Contains| s@@23 x@@34))))) :qid |DafnyPre.980:18| :skolemid |6874| :pattern ( (|Seq#Contains| s@@23 x@@34)) )))
(assert (forall ((x@@35 T@U) ) (! (let ((T@@121 (type x@@35))) (not (|Seq#Contains| (|Seq#Empty| T@@121) x@@35))) :qid |DafnyPre.983:18| :skolemid |6875| :pattern ( (let ((T@@121 (type x@@35))) (|Seq#Contains| (|Seq#Empty| T@@121) x@@35))) )))
(assert (forall ((s0@@2 T@U) (s1@@2 T@U) (x@@36 T@U) ) (! (let ((T@@122 (type x@@36))) (=> (and (= (type s0@@2) (SeqType T@@122)) (= (type s1@@2) (SeqType T@@122))) (and (=> (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@36) (or (|Seq#Contains| s0@@2 x@@36) (|Seq#Contains| s1@@2 x@@36))) (=> (or (|Seq#Contains| s0@@2 x@@36) (|Seq#Contains| s1@@2 x@@36)) (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@36))))) :qid |DafnyPre.987:18| :skolemid |6876| :pattern ( (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@36)) )))
(assert (forall ((s@@24 T@U) (v@@31 T@U) (x@@37 T@U) ) (! (let ((T@@123 (type v@@31))) (=> (and (= (type s@@24) (SeqType T@@123)) (= (type x@@37) T@@123)) (and (=> (|Seq#Contains| (|Seq#Build| s@@24 v@@31) x@@37) (or (= v@@31 x@@37) (|Seq#Contains| s@@24 x@@37))) (=> (or (= v@@31 x@@37) (|Seq#Contains| s@@24 x@@37)) (|Seq#Contains| (|Seq#Build| s@@24 v@@31) x@@37))))) :qid |DafnyPre.992:18| :skolemid |6877| :pattern ( (|Seq#Contains| (|Seq#Build| s@@24 v@@31) x@@37)) )))
(assert (forall ((arg0@@90 T@U) (arg1@@40 Int) ) (! (let ((T@@124 (SeqTypeInv0 (type arg0@@90)))) (= (type (|Seq#Take| arg0@@90 arg1@@40)) (SeqType T@@124))) :qid |funType:Seq#Take| :pattern ( (|Seq#Take| arg0@@90 arg1@@40)) )))
(assert (forall ((s@@25 T@U) (n@@8 Int) (x@@38 T@U) ) (! (let ((T@@125 (type x@@38))) (=> (= (type s@@25) (SeqType T@@125)) (and (=> (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@38) (exists ((i@@17 Int) ) (!  (and (and (and (<= 0 i@@17) (< i@@17 n@@8)) (< i@@17 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@17) x@@38)) :qid |DafnyPre.999:13| :skolemid |6878| :pattern ( (|Seq#Index| s@@25 i@@17)) ))) (=> (exists ((i@@18 Int) ) (!  (and (and (and (<= 0 i@@18) (< i@@18 n@@8)) (< i@@18 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@18) x@@38)) :qid |DafnyPre.999:13| :skolemid |6878| :pattern ( (|Seq#Index| s@@25 i@@18)) )) (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@38))))) :qid |DafnyPre.996:18| :skolemid |6879| :pattern ( (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@38)) )))
(assert (forall ((arg0@@91 T@U) (arg1@@41 Int) ) (! (let ((T@@126 (SeqTypeInv0 (type arg0@@91)))) (= (type (|Seq#Drop| arg0@@91 arg1@@41)) (SeqType T@@126))) :qid |funType:Seq#Drop| :pattern ( (|Seq#Drop| arg0@@91 arg1@@41)) )))
(assert (forall ((s@@26 T@U) (n@@9 Int) (x@@39 T@U) ) (! (let ((T@@127 (type x@@39))) (=> (= (type s@@26) (SeqType T@@127)) (and (=> (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@39) (exists ((i@@19 Int) ) (!  (and (and (and (<= 0 n@@9) (<= n@@9 i@@19)) (< i@@19 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@19) x@@39)) :qid |DafnyPre.1004:13| :skolemid |6880| :pattern ( (|Seq#Index| s@@26 i@@19)) ))) (=> (exists ((i@@20 Int) ) (!  (and (and (and (<= 0 n@@9) (<= n@@9 i@@20)) (< i@@20 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@20) x@@39)) :qid |DafnyPre.1004:13| :skolemid |6880| :pattern ( (|Seq#Index| s@@26 i@@20)) )) (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@39))))) :qid |DafnyPre.1001:18| :skolemid |6881| :pattern ( (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@39)) )))
(assert (forall ((s0@@3 T@U) (s1@@3 T@U) ) (! (let ((T@@128 (SeqTypeInv0 (type s0@@3)))) (=> (and (= (type s0@@3) (SeqType T@@128)) (= (type s1@@3) (SeqType T@@128))) (and (=> (|Seq#Equal| s0@@3 s1@@3) (and (= (|Seq#Length| s0@@3) (|Seq#Length| s1@@3)) (forall ((j Int) ) (!  (=> (and (<= 0 j) (< j (|Seq#Length| s0@@3))) (= (|Seq#Index| s0@@3 j) (|Seq#Index| s1@@3 j))) :qid |DafnyPre.1011:13| :skolemid |6882| :pattern ( (|Seq#Index| s0@@3 j)) :pattern ( (|Seq#Index| s1@@3 j)) )))) (=> (and (= (|Seq#Length| s0@@3) (|Seq#Length| s1@@3)) (forall ((j@@0 Int) ) (!  (=> (and (<= 0 j@@0) (< j@@0 (|Seq#Length| s0@@3))) (= (|Seq#Index| s0@@3 j@@0) (|Seq#Index| s1@@3 j@@0))) :qid |DafnyPre.1011:13| :skolemid |6882| :pattern ( (|Seq#Index| s0@@3 j@@0)) :pattern ( (|Seq#Index| s1@@3 j@@0)) ))) (|Seq#Equal| s0@@3 s1@@3))))) :qid |DafnyPre.1008:18| :skolemid |6883| :pattern ( (|Seq#Equal| s0@@3 s1@@3)) )))
(assert (forall ((a@@67 T@U) (b@@51 T@U) ) (! (let ((T@@129 (SeqTypeInv0 (type a@@67)))) (=> (and (and (= (type a@@67) (SeqType T@@129)) (= (type b@@51) (SeqType T@@129))) (|Seq#Equal| a@@67 b@@51)) (= a@@67 b@@51))) :qid |DafnyPre.1013:18| :skolemid |6884| :pattern ( (|Seq#Equal| a@@67 b@@51)) )))
(assert (forall ((s0@@4 T@U) (s1@@4 T@U) (n@@10 Int) ) (! (let ((T@@130 (SeqTypeInv0 (type s0@@4)))) (=> (and (= (type s0@@4) (SeqType T@@130)) (= (type s1@@4) (SeqType T@@130))) (and (=> (|Seq#SameUntil| s0@@4 s1@@4 n@@10) (forall ((j@@1 Int) ) (!  (=> (and (<= 0 j@@1) (< j@@1 n@@10)) (= (|Seq#Index| s0@@4 j@@1) (|Seq#Index| s1@@4 j@@1))) :qid |DafnyPre.1019:13| :skolemid |6885| :pattern ( (|Seq#Index| s0@@4 j@@1)) :pattern ( (|Seq#Index| s1@@4 j@@1)) ))) (=> (forall ((j@@2 Int) ) (!  (=> (and (<= 0 j@@2) (< j@@2 n@@10)) (= (|Seq#Index| s0@@4 j@@2) (|Seq#Index| s1@@4 j@@2))) :qid |DafnyPre.1019:13| :skolemid |6885| :pattern ( (|Seq#Index| s0@@4 j@@2)) :pattern ( (|Seq#Index| s1@@4 j@@2)) )) (|Seq#SameUntil| s0@@4 s1@@4 n@@10))))) :qid |DafnyPre.1017:18| :skolemid |6886| :pattern ( (|Seq#SameUntil| s0@@4 s1@@4 n@@10)) )))
(assert (forall ((s@@27 T@U) (n@@11 Int) ) (! (let ((T@@131 (SeqTypeInv0 (type s@@27)))) (=> (= (type s@@27) (SeqType T@@131)) (=> (and (<= 0 n@@11) (<= n@@11 (|Seq#Length| s@@27))) (= (|Seq#Length| (|Seq#Take| s@@27 n@@11)) n@@11)))) :qid |DafnyPre.1023:18| :skolemid |6887| :pattern ( (|Seq#Length| (|Seq#Take| s@@27 n@@11))) )))
(assert (forall ((s@@28 T@U) (n@@12 Int) (j@@3 Int) ) (! (let ((T@@132 (SeqTypeInv0 (type s@@28)))) (=> (= (type s@@28) (SeqType T@@132)) (=> (and (and (<= 0 j@@3) (< j@@3 n@@12)) (< j@@3 (|Seq#Length| s@@28))) (= (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@3) (|Seq#Index| s@@28 j@@3))))) :qid |DafnyPre.1025:18| :weight 25 :skolemid |6888| :pattern ( (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@3)) :pattern ( (|Seq#Index| s@@28 j@@3) (|Seq#Take| s@@28 n@@12)) )))
(assert (forall ((s@@29 T@U) (n@@13 Int) ) (! (let ((T@@133 (SeqTypeInv0 (type s@@29)))) (=> (= (type s@@29) (SeqType T@@133)) (=> (and (<= 0 n@@13) (<= n@@13 (|Seq#Length| s@@29))) (= (|Seq#Length| (|Seq#Drop| s@@29 n@@13)) (- (|Seq#Length| s@@29) n@@13))))) :qid |DafnyPre.1033:18| :skolemid |6889| :pattern ( (|Seq#Length| (|Seq#Drop| s@@29 n@@13))) )))
(assert (forall ((s@@30 T@U) (n@@14 Int) (j@@4 Int) ) (! (let ((T@@134 (SeqTypeInv0 (type s@@30)))) (=> (= (type s@@30) (SeqType T@@134)) (=> (and (and (<= 0 n@@14) (<= 0 j@@4)) (< j@@4 (- (|Seq#Length| s@@30) n@@14))) (= (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@4) (|Seq#Index| s@@30 (+ j@@4 n@@14)))))) :qid |DafnyPre.1035:18| :weight 25 :skolemid |6890| :pattern ( (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@4)) )))
(assert (forall ((s@@31 T@U) (n@@15 Int) (k@@3 Int) ) (! (let ((T@@135 (SeqTypeInv0 (type s@@31)))) (=> (= (type s@@31) (SeqType T@@135)) (=> (and (and (<= 0 n@@15) (<= n@@15 k@@3)) (< k@@3 (|Seq#Length| s@@31))) (= (|Seq#Index| (|Seq#Drop| s@@31 n@@15) (- k@@3 n@@15)) (|Seq#Index| s@@31 k@@3))))) :qid |DafnyPre.1040:18| :weight 25 :skolemid |6891| :pattern ( (|Seq#Index| s@@31 k@@3) (|Seq#Drop| s@@31 n@@15)) )))
(assert (forall ((s@@32 T@U) (t@@28 T@U) (n@@16 Int) ) (! (let ((T@@136 (SeqTypeInv0 (type s@@32)))) (=> (and (and (= (type s@@32) (SeqType T@@136)) (= (type t@@28) (SeqType T@@136))) (= n@@16 (|Seq#Length| s@@32))) (and (= (|Seq#Take| (|Seq#Append| s@@32 t@@28) n@@16) s@@32) (= (|Seq#Drop| (|Seq#Append| s@@32 t@@28) n@@16) t@@28)))) :qid |DafnyPre.1046:18| :skolemid |6892| :pattern ( (|Seq#Take| (|Seq#Append| s@@32 t@@28) n@@16)) :pattern ( (|Seq#Drop| (|Seq#Append| s@@32 t@@28) n@@16)) )))
(assert (forall ((arg0@@92 T@U) (arg1@@42 T@U) ) (! (= (type (|Seq#FromArray| arg0@@92 arg1@@42)) (SeqType BoxType)) :qid |funType:Seq#FromArray| :pattern ( (|Seq#FromArray| arg0@@92 arg1@@42)) )))
(assert (forall ((h@@16 T@U) (a@@68 T@U) ) (!  (=> (and (= (type h@@16) (MapType0Type refType MapType1Type)) (= (type a@@68) refType)) (= (|Seq#Length| (|Seq#FromArray| h@@16 a@@68)) (_System.array.Length a@@68))) :qid |DafnyPre.1055:15| :skolemid |6893| :pattern ( (|Seq#Length| (|Seq#FromArray| h@@16 a@@68))) )))
(assert (forall ((h@@17 T@U) (a@@69 T@U) ) (!  (=> (and (= (type h@@17) (MapType0Type refType MapType1Type)) (= (type a@@69) refType)) (forall ((i@@21 Int) ) (!  (=> (and (<= 0 i@@21) (< i@@21 (|Seq#Length| (|Seq#FromArray| h@@17 a@@69)))) (= (|Seq#Index| (|Seq#FromArray| h@@17 a@@69) i@@21) (MapType1Select (MapType0Select h@@17 a@@69) (IndexField i@@21)))) :qid |DafnyPre.1060:11| :skolemid |6894| :pattern ( (MapType1Select (MapType0Select h@@17 a@@69) (IndexField i@@21))) :pattern ( (|Seq#Index| (|Seq#FromArray| h@@17 a@@69) i@@21)) ))) :qid |DafnyPre.1058:15| :skolemid |6895| :pattern ( (|Seq#FromArray| h@@17 a@@69)) )))
(assert (forall ((h0 T@U) (h1 T@U) (a@@70 T@U) ) (!  (=> (and (and (= (type h0) (MapType0Type refType MapType1Type)) (= (type h1) (MapType0Type refType MapType1Type))) (= (type a@@70) refType)) (=> (and (and (and ($IsGoodHeap h0) ($IsGoodHeap h1)) ($HeapSucc h0 h1)) (= (MapType0Select h0 a@@70) (MapType0Select h1 a@@70))) (= (|Seq#FromArray| h0 a@@70) (|Seq#FromArray| h1 a@@70)))) :qid |DafnyPre.1070:15| :skolemid |6896| :pattern ( (|Seq#FromArray| h1 a@@70) ($HeapSucc h0 h1)) )))
(assert (forall ((h@@18 T@U) (i@@22 Int) (v@@32 T@U) (a@@71 T@U) ) (!  (=> (and (and (and (= (type h@@18) (MapType0Type refType MapType1Type)) (= (type v@@32) BoxType)) (= (type a@@71) refType)) (and (<= 0 i@@22) (< i@@22 (_System.array.Length a@@71)))) (= (|Seq#FromArray| (MapType0Store h@@18 a@@71 (MapType1Store (MapType0Select h@@18 a@@71) (IndexField i@@22) v@@32)) a@@71) (|Seq#Update| (|Seq#FromArray| h@@18 a@@71) i@@22 v@@32))) :qid |DafnyPre.1075:15| :skolemid |6897| :pattern ( (|Seq#FromArray| (MapType0Store h@@18 a@@71 (MapType1Store (MapType0Select h@@18 a@@71) (IndexField i@@22) v@@32)) a@@71)) )))
(assert (forall ((s@@33 T@U) (i@@23 Int) (v@@33 T@U) (n@@17 Int) ) (! (let ((T@@137 (type v@@33))) (=> (= (type s@@33) (SeqType T@@137)) (=> (and (and (<= 0 i@@23) (< i@@23 n@@17)) (<= n@@17 (|Seq#Length| s@@33))) (= (|Seq#Take| (|Seq#Update| s@@33 i@@23 v@@33) n@@17) (|Seq#Update| (|Seq#Take| s@@33 n@@17) i@@23 v@@33))))) :qid |DafnyPre.1080:18| :skolemid |6898| :pattern ( (|Seq#Take| (|Seq#Update| s@@33 i@@23 v@@33) n@@17)) )))
(assert (forall ((s@@34 T@U) (i@@24 Int) (v@@34 T@U) (n@@18 Int) ) (! (let ((T@@138 (type v@@34))) (=> (= (type s@@34) (SeqType T@@138)) (=> (and (<= n@@18 i@@24) (< i@@24 (|Seq#Length| s@@34))) (= (|Seq#Take| (|Seq#Update| s@@34 i@@24 v@@34) n@@18) (|Seq#Take| s@@34 n@@18))))) :qid |DafnyPre.1083:18| :skolemid |6899| :pattern ( (|Seq#Take| (|Seq#Update| s@@34 i@@24 v@@34) n@@18)) )))
(assert (forall ((s@@35 T@U) (i@@25 Int) (v@@35 T@U) (n@@19 Int) ) (! (let ((T@@139 (type v@@35))) (=> (= (type s@@35) (SeqType T@@139)) (=> (and (and (<= 0 n@@19) (<= n@@19 i@@25)) (< i@@25 (|Seq#Length| s@@35))) (= (|Seq#Drop| (|Seq#Update| s@@35 i@@25 v@@35) n@@19) (|Seq#Update| (|Seq#Drop| s@@35 n@@19) (- i@@25 n@@19) v@@35))))) :qid |DafnyPre.1086:18| :skolemid |6900| :pattern ( (|Seq#Drop| (|Seq#Update| s@@35 i@@25 v@@35) n@@19)) )))
(assert (forall ((s@@36 T@U) (i@@26 Int) (v@@36 T@U) (n@@20 Int) ) (! (let ((T@@140 (type v@@36))) (=> (= (type s@@36) (SeqType T@@140)) (=> (and (and (<= 0 i@@26) (< i@@26 n@@20)) (< n@@20 (|Seq#Length| s@@36))) (= (|Seq#Drop| (|Seq#Update| s@@36 i@@26 v@@36) n@@20) (|Seq#Drop| s@@36 n@@20))))) :qid |DafnyPre.1089:18| :skolemid |6901| :pattern ( (|Seq#Drop| (|Seq#Update| s@@36 i@@26 v@@36) n@@20)) )))
(assert (forall ((h@@19 T@U) (a@@72 T@U) (n0 Int) (n1 Int) ) (!  (=> (and (= (type h@@19) (MapType0Type refType MapType1Type)) (= (type a@@72) refType)) (=> (and (and (= (+ n0 1) n1) (<= 0 n0)) (<= n1 (_System.array.Length a@@72))) (= (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n1) (|Seq#Build| (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n0) (MapType1Select (MapType0Select h@@19 a@@72) (IndexField n0)))))) :qid |DafnyPre.1093:15| :skolemid |6902| :pattern ( (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n0) (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n1)) )))
(assert (forall ((s@@37 T@U) (v@@37 T@U) (n@@21 Int) ) (! (let ((T@@141 (type v@@37))) (=> (= (type s@@37) (SeqType T@@141)) (=> (and (<= 0 n@@21) (<= n@@21 (|Seq#Length| s@@37))) (= (|Seq#Drop| (|Seq#Build| s@@37 v@@37) n@@21) (|Seq#Build| (|Seq#Drop| s@@37 n@@21) v@@37))))) :qid |DafnyPre.1097:18| :skolemid |6903| :pattern ( (|Seq#Drop| (|Seq#Build| s@@37 v@@37) n@@21)) )))
(assert (forall ((s@@38 T@U) (i@@27 Int) ) (!  (=> (= (type s@@38) (SeqType BoxType)) (=> (and (<= 0 i@@27) (< i@@27 (|Seq#Length| s@@38))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@27))) (|Seq#Rank| s@@38)))) :qid |DafnyPre.1102:15| :skolemid |6904| :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@27)))) )))
(assert (forall ((s@@39 T@U) (i@@28 Int) ) (! (let ((T@@142 (SeqTypeInv0 (type s@@39)))) (=> (= (type s@@39) (SeqType T@@142)) (=> (and (< 0 i@@28) (<= i@@28 (|Seq#Length| s@@39))) (< (|Seq#Rank| (|Seq#Drop| s@@39 i@@28)) (|Seq#Rank| s@@39))))) :qid |DafnyPre.1105:18| :skolemid |6905| :pattern ( (|Seq#Rank| (|Seq#Drop| s@@39 i@@28))) )))
(assert (forall ((s@@40 T@U) (i@@29 Int) ) (! (let ((T@@143 (SeqTypeInv0 (type s@@40)))) (=> (= (type s@@40) (SeqType T@@143)) (=> (and (<= 0 i@@29) (< i@@29 (|Seq#Length| s@@40))) (< (|Seq#Rank| (|Seq#Take| s@@40 i@@29)) (|Seq#Rank| s@@40))))) :qid |DafnyPre.1108:18| :skolemid |6906| :pattern ( (|Seq#Rank| (|Seq#Take| s@@40 i@@29))) )))
(assert (forall ((s@@41 T@U) (i@@30 Int) (j@@5 Int) ) (! (let ((T@@144 (SeqTypeInv0 (type s@@41)))) (=> (= (type s@@41) (SeqType T@@144)) (=> (and (and (<= 0 i@@30) (< i@@30 j@@5)) (<= j@@5 (|Seq#Length| s@@41))) (< (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@30) (|Seq#Drop| s@@41 j@@5))) (|Seq#Rank| s@@41))))) :qid |DafnyPre.1111:18| :skolemid |6907| :pattern ( (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@30) (|Seq#Drop| s@@41 j@@5)))) )))
(assert (forall ((s@@42 T@U) (n@@22 Int) ) (! (let ((T@@145 (SeqTypeInv0 (type s@@42)))) (=> (and (= (type s@@42) (SeqType T@@145)) (= n@@22 0)) (= (|Seq#Drop| s@@42 n@@22) s@@42))) :qid |DafnyPre.1116:18| :skolemid |6908| :pattern ( (|Seq#Drop| s@@42 n@@22)) )))
(assert (forall ((s@@43 T@U) (n@@23 Int) ) (! (let ((T@@146 (SeqTypeInv0 (type s@@43)))) (=> (and (= (type s@@43) (SeqType T@@146)) (= n@@23 0)) (= (|Seq#Take| s@@43 n@@23) (|Seq#Empty| T@@146)))) :qid |DafnyPre.1118:18| :skolemid |6909| :pattern ( (|Seq#Take| s@@43 n@@23)) )))
(assert (forall ((s@@44 T@U) (m@@9 Int) (n@@24 Int) ) (! (let ((T@@147 (SeqTypeInv0 (type s@@44)))) (=> (= (type s@@44) (SeqType T@@147)) (=> (and (and (<= 0 m@@9) (<= 0 n@@24)) (<= (+ m@@9 n@@24) (|Seq#Length| s@@44))) (= (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24) (|Seq#Drop| s@@44 (+ m@@9 n@@24)))))) :qid |DafnyPre.1120:18| :skolemid |6910| :pattern ( (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24)) )))
(assert (forall ((m@@10 T@U) ) (! (let ((V@@1 (MapTypeInv1 (type m@@10)))) (let ((U@@3 (MapTypeInv0 (type m@@10)))) (=> (= (type m@@10) (MapType U@@3 V@@1)) (<= 0 (|Map#Card| m@@10))))) :qid |DafnyPre.1138:20| :skolemid |6911| :pattern ( (|Map#Card| m@@10)) )))
(assert (forall ((m@@11 T@U) ) (! (let ((V@@2 (MapTypeInv1 (type m@@11)))) (let ((U@@4 (MapTypeInv0 (type m@@11)))) (=> (= (type m@@11) (MapType U@@4 V@@2)) (= (|Set#Card| (|Map#Domain| m@@11)) (|Map#Card| m@@11))))) :qid |DafnyPre.1143:20| :skolemid |6912| :pattern ( (|Set#Card| (|Map#Domain| m@@11))) )))
(assert (forall ((arg0@@93 T@U) ) (! (let ((V@@3 (MapTypeInv1 (type arg0@@93)))) (= (type (|Map#Values| arg0@@93)) (MapType0Type V@@3 boolType))) :qid |funType:Map#Values| :pattern ( (|Map#Values| arg0@@93)) )))
(assert (forall ((m@@12 T@U) (v@@38 T@U) ) (! (let ((V@@4 (type v@@38))) (let ((U@@5 (MapTypeInv0 (type m@@12)))) (=> (= (type m@@12) (MapType U@@5 V@@4)) (and (=> (U_2_bool (MapType0Select (|Map#Values| m@@12) v@@38)) (exists ((u@@5 T@U) ) (!  (and (= (type u@@5) U@@5) (and (U_2_bool (MapType0Select (|Map#Domain| m@@12) u@@5)) (= v@@38 (MapType0Select (|Map#Elements| m@@12) u@@5)))) :qid |DafnyPre.1155:10| :skolemid |6913| :pattern ( (MapType0Select (|Map#Domain| m@@12) u@@5)) :pattern ( (MapType0Select (|Map#Elements| m@@12) u@@5)) ))) (=> (exists ((u@@6 T@U) ) (!  (and (= (type u@@6) U@@5) (and (U_2_bool (MapType0Select (|Map#Domain| m@@12) u@@6)) (= v@@38 (MapType0Select (|Map#Elements| m@@12) u@@6)))) :qid |DafnyPre.1155:10| :skolemid |6913| :pattern ( (MapType0Select (|Map#Domain| m@@12) u@@6)) :pattern ( (MapType0Select (|Map#Elements| m@@12) u@@6)) )) (U_2_bool (MapType0Select (|Map#Values| m@@12) v@@38))))))) :qid |DafnyPre.1153:20| :skolemid |6914| :pattern ( (MapType0Select (|Map#Values| m@@12) v@@38)) )))
(assert (forall ((arg0@@94 T@U) ) (! (= (type (|Map#Items| arg0@@94)) (MapType0Type BoxType boolType)) :qid |funType:Map#Items| :pattern ( (|Map#Items| arg0@@94)) )))
(assert (forall ((m@@13 T@U) ) (! (let ((V@@5 (MapTypeInv1 (type m@@13)))) (let ((U@@6 (MapTypeInv0 (type m@@13)))) (=> (= (type m@@13) (MapType U@@6 V@@5)) (= (|Set#Card| (|Map#Items| m@@13)) (|Map#Card| m@@13))))) :qid |DafnyPre.1174:20| :skolemid |6915| :pattern ( (|Set#Card| (|Map#Items| m@@13))) )))
(assert  (and (forall ((arg0@@95 T@U) ) (! (= (type (_System.Tuple2._0 arg0@@95)) BoxType) :qid |funType:_System.Tuple2._0| :pattern ( (_System.Tuple2._0 arg0@@95)) )) (forall ((arg0@@96 T@U) ) (! (= (type (_System.Tuple2._1 arg0@@96)) BoxType) :qid |funType:_System.Tuple2._1| :pattern ( (_System.Tuple2._1 arg0@@96)) ))))
(assert (forall ((m@@14 T@U) (item T@U) ) (!  (=> (and (= (type m@@14) (MapType BoxType BoxType)) (= (type item) BoxType)) (and (=> (U_2_bool (MapType0Select (|Map#Items| m@@14) item)) (and (U_2_bool (MapType0Select (|Map#Domain| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item))))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))) (U_2_bool (MapType0Select (|Map#Items| m@@14) item))))) :qid |DafnyPre.1177:15| :skolemid |6916| :pattern ( (MapType0Select (|Map#Items| m@@14) item)) )))
(assert (forall ((U@@7 T@T) (V@@6 T@T) ) (! (= (type (|Map#Empty| U@@7 V@@6)) (MapType U@@7 V@@6)) :qid |funType:Map#Empty| :pattern ( (|Map#Empty| U@@7 V@@6)) )))
(assert (forall ((u@@7 T@U) (V@@7 T@T) ) (! (let ((U@@8 (type u@@7))) (not (U_2_bool (MapType0Select (|Map#Domain| (|Map#Empty| U@@8 V@@7)) u@@7)))) :qid |DafnyPre.1185:21| :skolemid |6917| :pattern ( (let ((U@@8 (type u@@7))) (MapType0Select (|Map#Domain| (|Map#Empty| U@@8 V@@7)) u@@7))) )))
(assert (forall ((m@@15 T@U) ) (! (let ((V@@8 (MapTypeInv1 (type m@@15)))) (let ((U@@9 (MapTypeInv0 (type m@@15)))) (=> (= (type m@@15) (MapType U@@9 V@@8)) (and (and (=> (= (|Map#Card| m@@15) 0) (= m@@15 (|Map#Empty| U@@9 V@@8))) (=> (= m@@15 (|Map#Empty| U@@9 V@@8)) (= (|Map#Card| m@@15) 0))) (=> (not (= (|Map#Card| m@@15) 0)) (exists ((x@@40 T@U) ) (!  (and (= (type x@@40) U@@9) (U_2_bool (MapType0Select (|Map#Domain| m@@15) x@@40))) :qid |DafnyPre.1190:32| :skolemid |6918| :no-pattern (type x@@40) :no-pattern (U_2_int x@@40) :no-pattern (U_2_bool x@@40) ))))))) :qid |DafnyPre.1188:21| :skolemid |6919| :pattern ( (|Map#Card| m@@15)) )))
(assert (forall ((arg0@@97 T@U) (arg1@@43 T@U) (arg2@@4 T@U) ) (! (let ((V@@9 (MapType0TypeInv1 (type arg1@@43)))) (let ((U@@10 (MapType0TypeInv0 (type arg0@@97)))) (= (type (|Map#Glue| arg0@@97 arg1@@43 arg2@@4)) (MapType U@@10 V@@9)))) :qid |funType:Map#Glue| :pattern ( (|Map#Glue| arg0@@97 arg1@@43 arg2@@4)) )))
(assert (forall ((a@@73 T@U) (b@@52 T@U) (t@@29 T@U) ) (! (let ((V@@10 (MapType0TypeInv1 (type b@@52)))) (let ((U@@11 (MapType0TypeInv0 (type a@@73)))) (=> (and (and (= (type a@@73) (MapType0Type U@@11 boolType)) (= (type b@@52) (MapType0Type U@@11 V@@10))) (= (type t@@29) TyType)) (= (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@29)) a@@73)))) :qid |DafnyPre.1193:21| :skolemid |6920| :pattern ( (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@29))) )))
(assert (forall ((a@@74 T@U) (b@@53 T@U) (t@@30 T@U) ) (! (let ((V@@11 (MapType0TypeInv1 (type b@@53)))) (let ((U@@12 (MapType0TypeInv0 (type a@@74)))) (=> (and (and (= (type a@@74) (MapType0Type U@@12 boolType)) (= (type b@@53) (MapType0Type U@@12 V@@11))) (= (type t@@30) TyType)) (= (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@30)) b@@53)))) :qid |DafnyPre.1196:21| :skolemid |6921| :pattern ( (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@30))) )))
(assert (forall ((a@@75 T@U) (b@@54 T@U) (t@@31 T@U) ) (! (let ((V@@12 (MapType0TypeInv1 (type b@@54)))) (let ((U@@13 (MapType0TypeInv0 (type a@@75)))) (=> (and (and (= (type a@@75) (MapType0Type U@@13 boolType)) (= (type b@@54) (MapType0Type U@@13 V@@12))) (= (type t@@31) TyType)) ($Is (|Map#Glue| a@@75 b@@54 t@@31) t@@31)))) :qid |DafnyPre.1199:21| :skolemid |6922| :pattern ( ($Is (|Map#Glue| a@@75 b@@54 t@@31) t@@31)) )))
(assert (forall ((arg0@@98 T@U) (arg1@@44 T@U) (arg2@@5 T@U) ) (! (let ((V@@13 (type arg2@@5))) (let ((U@@14 (type arg1@@44))) (= (type (|Map#Build| arg0@@98 arg1@@44 arg2@@5)) (MapType U@@14 V@@13)))) :qid |funType:Map#Build| :pattern ( (|Map#Build| arg0@@98 arg1@@44 arg2@@5)) )))
(assert (forall ((m@@16 T@U) (u@@8 T@U) (|u'| T@U) (v@@39 T@U) ) (! (let ((V@@14 (type v@@39))) (let ((U@@15 (type u@@8))) (=> (and (= (type m@@16) (MapType U@@15 V@@14)) (= (type |u'|) U@@15)) (and (=> (= |u'| u@@8) (and (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@16 u@@8 v@@39)) |u'|) v@@39))) (=> (not (= |u'| u@@8)) (and (and (=> (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| m@@16) |u'|))) (=> (U_2_bool (MapType0Select (|Map#Domain| m@@16) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)))) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@16 u@@8 v@@39)) |u'|) (MapType0Select (|Map#Elements| m@@16) |u'|)))))))) :qid |DafnyPre.1210:21| :skolemid |6923| :pattern ( (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) :pattern ( (MapType0Select (|Map#Elements| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) )))
(assert (forall ((m@@17 T@U) (u@@9 T@U) (v@@40 T@U) ) (! (let ((V@@15 (type v@@40))) (let ((U@@16 (type u@@9))) (=> (and (= (type m@@17) (MapType U@@16 V@@15)) (U_2_bool (MapType0Select (|Map#Domain| m@@17) u@@9))) (= (|Map#Card| (|Map#Build| m@@17 u@@9 v@@40)) (|Map#Card| m@@17))))) :qid |DafnyPre.1216:21| :skolemid |6924| :pattern ( (|Map#Card| (|Map#Build| m@@17 u@@9 v@@40))) )))
(assert (forall ((m@@18 T@U) (u@@10 T@U) (v@@41 T@U) ) (! (let ((V@@16 (type v@@41))) (let ((U@@17 (type u@@10))) (=> (and (= (type m@@18) (MapType U@@17 V@@16)) (not (U_2_bool (MapType0Select (|Map#Domain| m@@18) u@@10)))) (= (|Map#Card| (|Map#Build| m@@18 u@@10 v@@41)) (+ (|Map#Card| m@@18) 1))))) :qid |DafnyPre.1218:21| :skolemid |6925| :pattern ( (|Map#Card| (|Map#Build| m@@18 u@@10 v@@41))) )))
(assert (forall ((m@@19 T@U) (|m'| T@U) ) (! (let ((V@@17 (MapTypeInv1 (type m@@19)))) (let ((U@@18 (MapTypeInv0 (type m@@19)))) (=> (and (= (type m@@19) (MapType U@@18 V@@17)) (= (type |m'|) (MapType U@@18 V@@17))) (and (=> (|Map#Equal| m@@19 |m'|) (and (forall ((u@@11 T@U) ) (!  (=> (= (type u@@11) U@@18) (and (=> (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@11)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@11))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@11)) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@11))))) :qid |DafnyPre.1225:35| :skolemid |6926| :no-pattern (type u@@11) :no-pattern (U_2_int u@@11) :no-pattern (U_2_bool u@@11) )) (forall ((u@@12 T@U) ) (!  (=> (and (= (type u@@12) U@@18) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@12))) (= (MapType0Select (|Map#Elements| m@@19) u@@12) (MapType0Select (|Map#Elements| |m'|) u@@12))) :qid |DafnyPre.1226:35| :skolemid |6927| :no-pattern (type u@@12) :no-pattern (U_2_int u@@12) :no-pattern (U_2_bool u@@12) )))) (=> (and (forall ((u@@13 T@U) ) (!  (=> (= (type u@@13) U@@18) (and (=> (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@13)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@13))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@13)) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@13))))) :qid |DafnyPre.1225:35| :skolemid |6926| :no-pattern (type u@@13) :no-pattern (U_2_int u@@13) :no-pattern (U_2_bool u@@13) )) (forall ((u@@14 T@U) ) (!  (=> (and (= (type u@@14) U@@18) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@14))) (= (MapType0Select (|Map#Elements| m@@19) u@@14) (MapType0Select (|Map#Elements| |m'|) u@@14))) :qid |DafnyPre.1226:35| :skolemid |6927| :no-pattern (type u@@14) :no-pattern (U_2_int u@@14) :no-pattern (U_2_bool u@@14) ))) (|Map#Equal| m@@19 |m'|)))))) :qid |DafnyPre.1223:21| :skolemid |6928| :pattern ( (|Map#Equal| m@@19 |m'|)) )))
(assert (forall ((m@@20 T@U) (|m'@@0| T@U) ) (! (let ((V@@18 (MapTypeInv1 (type m@@20)))) (let ((U@@19 (MapTypeInv0 (type m@@20)))) (=> (and (and (= (type m@@20) (MapType U@@19 V@@18)) (= (type |m'@@0|) (MapType U@@19 V@@18))) (|Map#Equal| m@@20 |m'@@0|)) (= m@@20 |m'@@0|)))) :qid |DafnyPre.1228:21| :skolemid |6929| :pattern ( (|Map#Equal| m@@20 |m'@@0|)) )))
(assert (forall ((m@@21 T@U) (|m'@@1| T@U) ) (! (let ((V@@19 (MapTypeInv1 (type m@@21)))) (let ((U@@20 (MapTypeInv0 (type m@@21)))) (=> (and (= (type m@@21) (MapType U@@20 V@@19)) (= (type |m'@@1|) (MapType U@@20 V@@19))) (and (=> (|Map#Disjoint| m@@21 |m'@@1|) (forall ((o@@52 T@U) ) (!  (=> (= (type o@@52) U@@20) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@21) o@@52))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@52))))) :qid |DafnyPre.1235:38| :skolemid |6930| :pattern ( (MapType0Select (|Map#Domain| m@@21) o@@52)) :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@52)) ))) (=> (forall ((o@@53 T@U) ) (!  (=> (= (type o@@53) U@@20) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@21) o@@53))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@53))))) :qid |DafnyPre.1235:38| :skolemid |6930| :pattern ( (MapType0Select (|Map#Domain| m@@21) o@@53)) :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@53)) )) (|Map#Disjoint| m@@21 |m'@@1|)))))) :qid |DafnyPre.1233:21| :skolemid |6931| :pattern ( (|Map#Disjoint| m@@21 |m'@@1|)) )))
(assert (forall ((arg0@@99 T@U) ) (! (let ((V@@20 (IMapTypeInv1 (type arg0@@99)))) (= (type (|IMap#Values| arg0@@99)) (MapType0Type V@@20 boolType))) :qid |funType:IMap#Values| :pattern ( (|IMap#Values| arg0@@99)) )))
(assert (forall ((m@@22 T@U) (v@@42 T@U) ) (! (let ((V@@21 (type v@@42))) (let ((U@@21 (IMapTypeInv0 (type m@@22)))) (=> (= (type m@@22) (IMapType U@@21 V@@21)) (and (=> (U_2_bool (MapType0Select (|IMap#Values| m@@22) v@@42)) (exists ((u@@15 T@U) ) (!  (and (= (type u@@15) U@@21) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@22) u@@15)) (= v@@42 (MapType0Select (|IMap#Elements| m@@22) u@@15)))) :qid |DafnyPre.1258:10| :skolemid |6932| :pattern ( (MapType0Select (|IMap#Domain| m@@22) u@@15)) :pattern ( (MapType0Select (|IMap#Elements| m@@22) u@@15)) ))) (=> (exists ((u@@16 T@U) ) (!  (and (= (type u@@16) U@@21) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@22) u@@16)) (= v@@42 (MapType0Select (|IMap#Elements| m@@22) u@@16)))) :qid |DafnyPre.1258:10| :skolemid |6932| :pattern ( (MapType0Select (|IMap#Domain| m@@22) u@@16)) :pattern ( (MapType0Select (|IMap#Elements| m@@22) u@@16)) )) (U_2_bool (MapType0Select (|IMap#Values| m@@22) v@@42))))))) :qid |DafnyPre.1256:20| :skolemid |6933| :pattern ( (MapType0Select (|IMap#Values| m@@22) v@@42)) )))
(assert (forall ((arg0@@100 T@U) ) (! (= (type (|IMap#Items| arg0@@100)) (MapType0Type BoxType boolType)) :qid |funType:IMap#Items| :pattern ( (|IMap#Items| arg0@@100)) )))
(assert (forall ((m@@23 T@U) (item@@0 T@U) ) (!  (=> (and (= (type m@@23) (IMapType BoxType BoxType)) (= (type item@@0) BoxType)) (and (=> (U_2_bool (MapType0Select (|IMap#Items| m@@23) item@@0)) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0))))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0)))) (U_2_bool (MapType0Select (|IMap#Items| m@@23) item@@0))))) :qid |DafnyPre.1273:15| :skolemid |6934| :pattern ( (MapType0Select (|IMap#Items| m@@23) item@@0)) )))
(assert (forall ((U@@22 T@T) (V@@22 T@T) ) (! (= (type (|IMap#Empty| U@@22 V@@22)) (IMapType U@@22 V@@22)) :qid |funType:IMap#Empty| :pattern ( (|IMap#Empty| U@@22 V@@22)) )))
(assert (forall ((u@@17 T@U) (V@@23 T@T) ) (! (let ((U@@23 (type u@@17))) (not (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@23 V@@23)) u@@17)))) :qid |DafnyPre.1280:21| :skolemid |6935| :pattern ( (let ((U@@23 (type u@@17))) (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@23 V@@23)) u@@17))) )))
(assert (forall ((arg0@@101 T@U) (arg1@@45 T@U) (arg2@@6 T@U) ) (! (let ((V@@24 (MapType0TypeInv1 (type arg1@@45)))) (let ((U@@24 (MapType0TypeInv0 (type arg0@@101)))) (= (type (|IMap#Glue| arg0@@101 arg1@@45 arg2@@6)) (IMapType U@@24 V@@24)))) :qid |funType:IMap#Glue| :pattern ( (|IMap#Glue| arg0@@101 arg1@@45 arg2@@6)) )))
(assert (forall ((a@@76 T@U) (b@@55 T@U) (t@@32 T@U) ) (! (let ((V@@25 (MapType0TypeInv1 (type b@@55)))) (let ((U@@25 (MapType0TypeInv0 (type a@@76)))) (=> (and (and (= (type a@@76) (MapType0Type U@@25 boolType)) (= (type b@@55) (MapType0Type U@@25 V@@25))) (= (type t@@32) TyType)) (= (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@32)) a@@76)))) :qid |DafnyPre.1285:21| :skolemid |6936| :pattern ( (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@32))) )))
(assert (forall ((a@@77 T@U) (b@@56 T@U) (t@@33 T@U) ) (! (let ((V@@26 (MapType0TypeInv1 (type b@@56)))) (let ((U@@26 (MapType0TypeInv0 (type a@@77)))) (=> (and (and (= (type a@@77) (MapType0Type U@@26 boolType)) (= (type b@@56) (MapType0Type U@@26 V@@26))) (= (type t@@33) TyType)) (= (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@33)) b@@56)))) :qid |DafnyPre.1288:21| :skolemid |6937| :pattern ( (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@33))) )))
(assert (forall ((a@@78 T@U) (b@@57 T@U) (t@@34 T@U) ) (! (let ((V@@27 (MapType0TypeInv1 (type b@@57)))) (let ((U@@27 (MapType0TypeInv0 (type a@@78)))) (=> (and (and (= (type a@@78) (MapType0Type U@@27 boolType)) (= (type b@@57) (MapType0Type U@@27 V@@27))) (= (type t@@34) TyType)) ($Is (|IMap#Glue| a@@78 b@@57 t@@34) t@@34)))) :qid |DafnyPre.1291:21| :skolemid |6938| :pattern ( ($Is (|IMap#Glue| a@@78 b@@57 t@@34) t@@34)) )))
(assert (forall ((arg0@@102 T@U) (arg1@@46 T@U) (arg2@@7 T@U) ) (! (let ((V@@28 (type arg2@@7))) (let ((U@@28 (type arg1@@46))) (= (type (|IMap#Build| arg0@@102 arg1@@46 arg2@@7)) (IMapType U@@28 V@@28)))) :qid |funType:IMap#Build| :pattern ( (|IMap#Build| arg0@@102 arg1@@46 arg2@@7)) )))
(assert (forall ((m@@24 T@U) (u@@18 T@U) (|u'@@0| T@U) (v@@43 T@U) ) (! (let ((V@@29 (type v@@43))) (let ((U@@29 (type u@@18))) (=> (and (= (type m@@24) (IMapType U@@29 V@@29)) (= (type |u'@@0|) U@@29)) (and (=> (= |u'@@0| u@@18) (and (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|) v@@43))) (=> (not (= |u'@@0| u@@18)) (and (and (=> (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| m@@24) |u'@@0|))) (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@24) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)))) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|) (MapType0Select (|IMap#Elements| m@@24) |u'@@0|)))))))) :qid |DafnyPre.1301:21| :skolemid |6939| :pattern ( (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) )))
(assert (forall ((m@@25 T@U) (|m'@@2| T@U) ) (! (let ((V@@30 (IMapTypeInv1 (type m@@25)))) (let ((U@@30 (IMapTypeInv0 (type m@@25)))) (=> (and (= (type m@@25) (IMapType U@@30 V@@30)) (= (type |m'@@2|) (IMapType U@@30 V@@30))) (and (=> (|IMap#Equal| m@@25 |m'@@2|) (and (forall ((u@@19 T@U) ) (!  (=> (= (type u@@19) U@@30) (and (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@19)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@19))) (=> (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@19)) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@19))))) :qid |DafnyPre.1312:36| :skolemid |6940| :no-pattern (type u@@19) :no-pattern (U_2_int u@@19) :no-pattern (U_2_bool u@@19) )) (forall ((u@@20 T@U) ) (!  (=> (and (= (type u@@20) U@@30) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@20))) (= (MapType0Select (|IMap#Elements| m@@25) u@@20) (MapType0Select (|IMap#Elements| |m'@@2|) u@@20))) :qid |DafnyPre.1313:35| :skolemid |6941| :no-pattern (type u@@20) :no-pattern (U_2_int u@@20) :no-pattern (U_2_bool u@@20) )))) (=> (and (forall ((u@@21 T@U) ) (!  (=> (= (type u@@21) U@@30) (and (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@21)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@21))) (=> (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@21)) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@21))))) :qid |DafnyPre.1312:36| :skolemid |6940| :no-pattern (type u@@21) :no-pattern (U_2_int u@@21) :no-pattern (U_2_bool u@@21) )) (forall ((u@@22 T@U) ) (!  (=> (and (= (type u@@22) U@@30) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@22))) (= (MapType0Select (|IMap#Elements| m@@25) u@@22) (MapType0Select (|IMap#Elements| |m'@@2|) u@@22))) :qid |DafnyPre.1313:35| :skolemid |6941| :no-pattern (type u@@22) :no-pattern (U_2_int u@@22) :no-pattern (U_2_bool u@@22) ))) (|IMap#Equal| m@@25 |m'@@2|)))))) :qid |DafnyPre.1310:21| :skolemid |6942| :pattern ( (|IMap#Equal| m@@25 |m'@@2|)) )))
(assert (forall ((m@@26 T@U) (|m'@@3| T@U) ) (! (let ((V@@31 (IMapTypeInv1 (type m@@26)))) (let ((U@@31 (IMapTypeInv0 (type m@@26)))) (=> (and (and (= (type m@@26) (IMapType U@@31 V@@31)) (= (type |m'@@3|) (IMapType U@@31 V@@31))) (|IMap#Equal| m@@26 |m'@@3|)) (= m@@26 |m'@@3|)))) :qid |DafnyPre.1315:21| :skolemid |6943| :pattern ( (|IMap#Equal| m@@26 |m'@@3|)) )))
(assert (forall ((x@@41 Int) (y@@12 Int) ) (! (= (INTERNAL_add_boogie x@@41 y@@12) (+ x@@41 y@@12)) :qid |DafnyPre.1323:30| :skolemid |6944| :pattern ( (INTERNAL_add_boogie x@@41 y@@12)) )))
(assert (forall ((x@@42 Int) (y@@13 Int) ) (! (= (INTERNAL_sub_boogie x@@42 y@@13) (- x@@42 y@@13)) :qid |DafnyPre.1324:30| :skolemid |6945| :pattern ( (INTERNAL_sub_boogie x@@42 y@@13)) )))
(assert (forall ((x@@43 Int) (y@@14 Int) ) (! (= (INTERNAL_mul_boogie x@@43 y@@14) (* x@@43 y@@14)) :qid |DafnyPre.1325:30| :skolemid |6946| :pattern ( (INTERNAL_mul_boogie x@@43 y@@14)) )))
(assert (forall ((x@@44 Int) (y@@15 Int) ) (! (= (INTERNAL_div_boogie x@@44 y@@15) (div x@@44 y@@15)) :qid |DafnyPre.1326:30| :skolemid |6947| :pattern ( (INTERNAL_div_boogie x@@44 y@@15)) )))
(assert (forall ((x@@45 Int) (y@@16 Int) ) (! (= (INTERNAL_mod_boogie x@@45 y@@16) (mod x@@45 y@@16)) :qid |DafnyPre.1327:30| :skolemid |6948| :pattern ( (INTERNAL_mod_boogie x@@45 y@@16)) )))
(assert (forall ((x@@46 Int) (y@@17 Int) ) (!  (and (=> (INTERNAL_lt_boogie x@@46 y@@17) (< x@@46 y@@17)) (=> (< x@@46 y@@17) (INTERNAL_lt_boogie x@@46 y@@17))) :qid |DafnyPre.1328:51| :skolemid |6949| :pattern ( (INTERNAL_lt_boogie x@@46 y@@17)) )))
(assert (forall ((x@@47 Int) (y@@18 Int) ) (!  (and (=> (INTERNAL_le_boogie x@@47 y@@18) (<= x@@47 y@@18)) (=> (<= x@@47 y@@18) (INTERNAL_le_boogie x@@47 y@@18))) :qid |DafnyPre.1329:51| :skolemid |6950| :pattern ( (INTERNAL_le_boogie x@@47 y@@18)) )))
(assert (forall ((x@@48 Int) (y@@19 Int) ) (!  (and (=> (INTERNAL_gt_boogie x@@48 y@@19) (> x@@48 y@@19)) (=> (> x@@48 y@@19) (INTERNAL_gt_boogie x@@48 y@@19))) :qid |DafnyPre.1330:51| :skolemid |6951| :pattern ( (INTERNAL_gt_boogie x@@48 y@@19)) )))
(assert (forall ((x@@49 Int) (y@@20 Int) ) (!  (and (=> (INTERNAL_ge_boogie x@@49 y@@20) (>= x@@49 y@@20)) (=> (>= x@@49 y@@20) (INTERNAL_ge_boogie x@@49 y@@20))) :qid |DafnyPre.1331:51| :skolemid |6952| :pattern ( (INTERNAL_ge_boogie x@@49 y@@20)) )))
(assert (forall ((x@@50 Int) (y@@21 Int) ) (! (= (Mul x@@50 y@@21) (* x@@50 y@@21)) :qid |DafnyPre.1333:14| :skolemid |6953| :pattern ( (Mul x@@50 y@@21)) )))
(assert (forall ((x@@51 Int) (y@@22 Int) ) (! (= (Div x@@51 y@@22) (div x@@51 y@@22)) :qid |DafnyPre.1334:14| :skolemid |6954| :pattern ( (Div x@@51 y@@22)) )))
(assert (forall ((x@@52 Int) (y@@23 Int) ) (! (= (Mod x@@52 y@@23) (mod x@@52 y@@23)) :qid |DafnyPre.1335:14| :skolemid |6955| :pattern ( (Mod x@@52 y@@23)) )))
(assert (forall ((x@@53 Int) (y@@24 Int) ) (! (= (Add x@@53 y@@24) (+ x@@53 y@@24)) :qid |DafnyPre.1336:14| :skolemid |6956| :pattern ( (Add x@@53 y@@24)) )))
(assert (forall ((x@@54 Int) (y@@25 Int) ) (! (= (Sub x@@54 y@@25) (- x@@54 y@@25)) :qid |DafnyPre.1337:14| :skolemid |6957| :pattern ( (Sub x@@54 y@@25)) )))
(assert (forall ((A@@2 T@U) (B T@U) (a@@79 T@U) (b@@58 T@U) ) (!  (=> (and (and (and (and (= (type A@@2) TyType) (= (type B) TyType)) (= (type a@@79) BoxType)) (= (type b@@58) BoxType)) (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58)) (< (BoxRank a@@79) (BoxRank b@@58))) :qid |DafnyPre.1378:15| :skolemid |6958| :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank a@@79)) :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank b@@58)) )))
(assert (forall ((A@@3 T@U) (B@@0 T@U) (a@@80 T@U) (b@@59 T@U) ) (!  (=> (and (and (and (and (= (type A@@3) TyType) (= (type B@@0) TyType)) (= (type a@@80) BoxType)) (= (type b@@59) (SeqType BoxType))) (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59))) (< (BoxRank a@@80) (|Seq#Rank| b@@59))) :qid |DafnyPre.1383:15| :skolemid |6959| :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (BoxRank a@@80)) :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (|Seq#Rank| b@@59)) )))
(assert (forall ((A@@4 T@U) (B@@1 T@U) (a@@81 T@U) (b@@60 T@U) ) (!  (=> (and (and (and (and (= (type A@@4) TyType) (= (type B@@1) TyType)) (= (type a@@81) (SeqType BoxType))) (= (type b@@60) BoxType)) (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60)) (< (|Seq#Rank| a@@81) (BoxRank b@@60))) :qid |DafnyPre.1388:15| :skolemid |6960| :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (|Seq#Rank| a@@81)) :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (BoxRank b@@60)) )))
(assert (= (type Tclass._System.nat) TyType))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (forall ((bx@@34 T@U) ) (!  (=> (and (= (type bx@@34) BoxType) ($IsBox bx@@34 Tclass._System.nat)) (and (= ($Box ($Unbox intType bx@@34)) bx@@34) ($Is ($Unbox intType bx@@34) Tclass._System.nat))) :qid |unknown.0:0| :skolemid |6961| :pattern ( ($IsBox bx@@34 Tclass._System.nat)) )))
(assert (forall ((|x#0| T@U) ) (!  (=> (= (type |x#0|) intType) (and (=> ($Is |x#0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0|))) (=> (<= (LitInt 0) (U_2_int |x#0|)) ($Is |x#0| Tclass._System.nat)))) :qid |nofile.1:88| :skolemid |6962| :pattern ( ($Is |x#0| Tclass._System.nat)) )))
(assert (forall ((|x#0@@0| T@U) ($h T@U) ) (!  (=> (and (= (type |x#0@@0|) intType) (= (type $h) (MapType0Type refType MapType1Type))) ($IsAlloc |x#0@@0| Tclass._System.nat $h)) :qid |nofile.1:88| :skolemid |6963| :pattern ( ($IsAlloc |x#0@@0| Tclass._System.nat $h)) )))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (forall ((bx@@35 T@U) ) (!  (=> (and (= (type bx@@35) BoxType) ($IsBox bx@@35 Tclass._System.object?)) (and (= ($Box ($Unbox refType bx@@35)) bx@@35) ($Is ($Unbox refType bx@@35) Tclass._System.object?))) :qid |unknown.0:0| :skolemid |6964| :pattern ( ($IsBox bx@@35 Tclass._System.object?)) )))
(assert (forall (($o T@U) ) (!  (=> (= (type $o) refType) ($Is $o Tclass._System.object?)) :qid |unknown.0:0| :skolemid |6965| :pattern ( ($Is $o Tclass._System.object?)) )))
(assert (= (type null) refType))
(assert (forall (($o@@0 T@U) ($h@@0 T@U) ) (!  (=> (and (= (type $o@@0) refType) (= (type $h@@0) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@0 Tclass._System.object? $h@@0) (or (= $o@@0 null) (U_2_bool (MapType1Select (MapType0Select $h@@0 $o@@0) alloc)))) (=> (or (= $o@@0 null) (U_2_bool (MapType1Select (MapType0Select $h@@0 $o@@0) alloc))) ($IsAlloc $o@@0 Tclass._System.object? $h@@0)))) :qid |unknown.0:0| :skolemid |6966| :pattern ( ($IsAlloc $o@@0 Tclass._System.object? $h@@0)) )))
(assert (= (type Tclass._System.object) TyType))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (forall ((bx@@36 T@U) ) (!  (=> (and (= (type bx@@36) BoxType) ($IsBox bx@@36 Tclass._System.object)) (and (= ($Box ($Unbox refType bx@@36)) bx@@36) ($Is ($Unbox refType bx@@36) Tclass._System.object))) :qid |unknown.0:0| :skolemid |6967| :pattern ( ($IsBox bx@@36 Tclass._System.object)) )))
(assert (forall ((|c#0| T@U) ) (!  (=> (= (type |c#0|) refType) (and (=> ($Is |c#0| Tclass._System.object) (and ($Is |c#0| Tclass._System.object?) (not (= |c#0| null)))) (=> (and ($Is |c#0| Tclass._System.object?) (not (= |c#0| null))) ($Is |c#0| Tclass._System.object)))) :qid |unknown.0:0| :skolemid |6968| :pattern ( ($Is |c#0| Tclass._System.object)) )))
(assert (forall ((|c#0@@0| T@U) ($h@@1 T@U) ) (!  (=> (and (= (type |c#0@@0|) refType) (= (type $h@@1) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |c#0@@0| Tclass._System.object $h@@1) ($IsAlloc |c#0@@0| Tclass._System.object? $h@@1)) (=> ($IsAlloc |c#0@@0| Tclass._System.object? $h@@1) ($IsAlloc |c#0@@0| Tclass._System.object $h@@1)))) :qid |unknown.0:0| :skolemid |6969| :pattern ( ($IsAlloc |c#0@@0| Tclass._System.object $h@@1)) )))
(assert (forall ((arg0@@103 T@U) ) (! (= (type (Tclass._System.array? arg0@@103)) TyType) :qid |funType:Tclass._System.array?| :pattern ( (Tclass._System.array? arg0@@103)) )))
(assert (forall ((|#$arg| T@U) ) (!  (=> (= (type |#$arg|) TyType) (= (Tag (Tclass._System.array? |#$arg|)) Tagclass._System.array?)) :qid |unknown.0:0| :skolemid |6970| :pattern ( (Tclass._System.array? |#$arg|)) )))
(assert (forall ((arg0@@104 T@U) ) (! (= (type (Tclass._System.array?_0 arg0@@104)) TyType) :qid |funType:Tclass._System.array?_0| :pattern ( (Tclass._System.array?_0 arg0@@104)) )))
(assert (forall ((|#$arg@@0| T@U) ) (!  (=> (= (type |#$arg@@0|) TyType) (= (Tclass._System.array?_0 (Tclass._System.array? |#$arg@@0|)) |#$arg@@0|)) :qid |unknown.0:0| :skolemid |6971| :pattern ( (Tclass._System.array? |#$arg@@0|)) )))
(assert (forall ((|#$arg@@1| T@U) (bx@@37 T@U) ) (!  (=> (and (and (= (type |#$arg@@1|) TyType) (= (type bx@@37) BoxType)) ($IsBox bx@@37 (Tclass._System.array? |#$arg@@1|))) (and (= ($Box ($Unbox refType bx@@37)) bx@@37) ($Is ($Unbox refType bx@@37) (Tclass._System.array? |#$arg@@1|)))) :qid |unknown.0:0| :skolemid |6972| :pattern ( ($IsBox bx@@37 (Tclass._System.array? |#$arg@@1|))) )))
(assert (forall ((arg0@@105 T@U) ) (! (= (type (dtype arg0@@105)) TyType) :qid |funType:dtype| :pattern ( (dtype arg0@@105)) )))
(assert (forall ((|#$arg@@2| T@U) ($h@@2 T@U) ($o@@1 T@U) ($i0 Int) ) (!  (=> (and (and (and (= (type |#$arg@@2|) TyType) (= (type $h@@2) (MapType0Type refType MapType1Type))) (= (type $o@@1) refType)) (and (and ($IsGoodHeap $h@@2) (and (not (= $o@@1 null)) (= (dtype $o@@1) (Tclass._System.array? |#$arg@@2|)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@1))))) ($IsBox (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) |#$arg@@2|)) :qid |unknown.0:0| :skolemid |6973| :pattern ( (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) (Tclass._System.array? |#$arg@@2|)) )))
(assert (forall ((|#$arg@@3| T@U) ($h@@3 T@U) ($o@@2 T@U) ($i0@@0 Int) ) (!  (=> (and (and (= (type |#$arg@@3|) TyType) (= (type $h@@3) (MapType0Type refType MapType1Type))) (= (type $o@@2) refType)) (=> (and (and (and ($IsGoodHeap $h@@3) (and (not (= $o@@2 null)) (= (dtype $o@@2) (Tclass._System.array? |#$arg@@3|)))) (and (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@2)))) (U_2_bool (MapType1Select (MapType0Select $h@@3 $o@@2) alloc))) ($IsAllocBox (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) |#$arg@@3| $h@@3))) :qid |unknown.0:0| :skolemid |6974| :pattern ( (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) (Tclass._System.array? |#$arg@@3|)) )))
(assert (forall ((|#$arg@@4| T@U) ($o@@3 T@U) ) (!  (=> (and (= (type |#$arg@@4|) TyType) (= (type $o@@3) refType)) (and (=> ($Is $o@@3 (Tclass._System.array? |#$arg@@4|)) (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? |#$arg@@4|)))) (=> (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? |#$arg@@4|))) ($Is $o@@3 (Tclass._System.array? |#$arg@@4|))))) :qid |unknown.0:0| :skolemid |6975| :pattern ( ($Is $o@@3 (Tclass._System.array? |#$arg@@4|))) )))
(assert (forall ((|#$arg@@5| T@U) ($o@@4 T@U) ($h@@4 T@U) ) (!  (=> (and (and (= (type |#$arg@@5|) TyType) (= (type $o@@4) refType)) (= (type $h@@4) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@4 (Tclass._System.array? |#$arg@@5|) $h@@4) (or (= $o@@4 null) (U_2_bool (MapType1Select (MapType0Select $h@@4 $o@@4) alloc)))) (=> (or (= $o@@4 null) (U_2_bool (MapType1Select (MapType0Select $h@@4 $o@@4) alloc))) ($IsAlloc $o@@4 (Tclass._System.array? |#$arg@@5|) $h@@4)))) :qid |unknown.0:0| :skolemid |6976| :pattern ( ($IsAlloc $o@@4 (Tclass._System.array? |#$arg@@5|) $h@@4)) )))
(assert (forall ((|#$arg@@6| T@U) ($o@@5 T@U) ) (!  (=> (and (and (= (type |#$arg@@6|) TyType) (= (type $o@@5) refType)) (and (not (= $o@@5 null)) (= (dtype $o@@5) (Tclass._System.array? |#$arg@@6|)))) ($Is (int_2_U (_System.array.Length $o@@5)) TInt)) :qid |unknown.0:0| :skolemid |6977| :pattern ( (_System.array.Length $o@@5) (Tclass._System.array? |#$arg@@6|)) )))
(assert (forall ((|#$arg@@7| T@U) ($h@@5 T@U) ($o@@6 T@U) ) (!  (=> (and (and (and (= (type |#$arg@@7|) TyType) (= (type $h@@5) (MapType0Type refType MapType1Type))) (= (type $o@@6) refType)) (and (and ($IsGoodHeap $h@@5) (and (not (= $o@@6 null)) (= (dtype $o@@6) (Tclass._System.array? |#$arg@@7|)))) (U_2_bool (MapType1Select (MapType0Select $h@@5 $o@@6) alloc)))) ($IsAlloc (int_2_U (_System.array.Length $o@@6)) TInt $h@@5)) :qid |unknown.0:0| :skolemid |6978| :pattern ( (_System.array.Length $o@@6) (MapType1Select (MapType0Select $h@@5 $o@@6) alloc) (Tclass._System.array? |#$arg@@7|)) )))
(assert (forall ((arg0@@106 T@U) ) (! (= (type (Tclass._System.array arg0@@106)) TyType) :qid |funType:Tclass._System.array| :pattern ( (Tclass._System.array arg0@@106)) )))
(assert (forall ((_System.array$arg T@U) ) (!  (=> (= (type _System.array$arg) TyType) (= (Tag (Tclass._System.array _System.array$arg)) Tagclass._System.array)) :qid |unknown.0:0| :skolemid |6979| :pattern ( (Tclass._System.array _System.array$arg)) )))
(assert (forall ((arg0@@107 T@U) ) (! (= (type (Tclass._System.array_0 arg0@@107)) TyType) :qid |funType:Tclass._System.array_0| :pattern ( (Tclass._System.array_0 arg0@@107)) )))
(assert (forall ((_System.array$arg@@0 T@U) ) (!  (=> (= (type _System.array$arg@@0) TyType) (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@0)) _System.array$arg@@0)) :qid |unknown.0:0| :skolemid |6980| :pattern ( (Tclass._System.array _System.array$arg@@0)) )))
(assert (forall ((_System.array$arg@@1 T@U) (bx@@38 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@1) TyType) (= (type bx@@38) BoxType)) ($IsBox bx@@38 (Tclass._System.array _System.array$arg@@1))) (and (= ($Box ($Unbox refType bx@@38)) bx@@38) ($Is ($Unbox refType bx@@38) (Tclass._System.array _System.array$arg@@1)))) :qid |unknown.0:0| :skolemid |6981| :pattern ( ($IsBox bx@@38 (Tclass._System.array _System.array$arg@@1))) )))
(assert (forall ((_System.array$arg@@2 T@U) (|c#0@@1| T@U) ) (!  (=> (and (= (type _System.array$arg@@2) TyType) (= (type |c#0@@1|) refType)) (and (=> ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@2)) (and ($Is |c#0@@1| (Tclass._System.array? _System.array$arg@@2)) (not (= |c#0@@1| null)))) (=> (and ($Is |c#0@@1| (Tclass._System.array? _System.array$arg@@2)) (not (= |c#0@@1| null))) ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@2))))) :qid |unknown.0:0| :skolemid |6982| :pattern ( ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@2))) )))
(assert (forall ((_System.array$arg@@3 T@U) (|c#0@@2| T@U) ($h@@6 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@3) TyType) (= (type |c#0@@2|) refType)) (= (type $h@@6) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@3) $h@@6) ($IsAlloc |c#0@@2| (Tclass._System.array? _System.array$arg@@3) $h@@6)) (=> ($IsAlloc |c#0@@2| (Tclass._System.array? _System.array$arg@@3) $h@@6) ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@3) $h@@6)))) :qid |unknown.0:0| :skolemid |6983| :pattern ( ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@3) $h@@6)) )))
(assert (forall ((arg0@@108 T@U) ) (! (= (type (Tclass._System.___hFunc0 arg0@@108)) TyType) :qid |funType:Tclass._System.___hFunc0| :pattern ( (Tclass._System.___hFunc0 arg0@@108)) )))
(assert (forall ((|#$R| T@U) ) (!  (=> (= (type |#$R|) TyType) (= (Tag (Tclass._System.___hFunc0 |#$R|)) Tagclass._System.___hFunc0)) :qid |unknown.0:0| :skolemid |6984| :pattern ( (Tclass._System.___hFunc0 |#$R|)) )))
(assert (forall ((arg0@@109 T@U) ) (! (= (type (Tclass._System.___hFunc0_0 arg0@@109)) TyType) :qid |funType:Tclass._System.___hFunc0_0| :pattern ( (Tclass._System.___hFunc0_0 arg0@@109)) )))
(assert (forall ((|#$R@@0| T@U) ) (!  (=> (= (type |#$R@@0|) TyType) (= (Tclass._System.___hFunc0_0 (Tclass._System.___hFunc0 |#$R@@0|)) |#$R@@0|)) :qid |unknown.0:0| :skolemid |6985| :pattern ( (Tclass._System.___hFunc0 |#$R@@0|)) )))
(assert (forall ((|#$R@@1| T@U) (bx@@39 T@U) ) (!  (=> (and (and (= (type |#$R@@1|) TyType) (= (type bx@@39) BoxType)) ($IsBox bx@@39 (Tclass._System.___hFunc0 |#$R@@1|))) (and (= ($Box ($Unbox HandleTypeType bx@@39)) bx@@39) ($Is ($Unbox HandleTypeType bx@@39) (Tclass._System.___hFunc0 |#$R@@1|)))) :qid |unknown.0:0| :skolemid |6986| :pattern ( ($IsBox bx@@39 (Tclass._System.___hFunc0 |#$R@@1|))) )))
(assert  (and (forall ((arg0@@110 T@U) (arg1@@47 T@U) (arg2@@8 T@U) ) (! (= (type (Apply0 arg0@@110 arg1@@47 arg2@@8)) BoxType) :qid |funType:Apply0| :pattern ( (Apply0 arg0@@110 arg1@@47 arg2@@8)) )) (forall ((arg0@@111 T@U) (arg1@@48 T@U) (arg2@@9 T@U) ) (! (= (type (Handle0 arg0@@111 arg1@@48 arg2@@9)) HandleTypeType) :qid |funType:Handle0| :pattern ( (Handle0 arg0@@111 arg1@@48 arg2@@9)) ))))
(assert (forall ((t0@@12 T@U) (heap@@1 T@U) (h@@20 T@U) (r@@6 T@U) (rd T@U) ) (!  (=> (and (and (and (and (= (type t0@@12) TyType) (= (type heap@@1) (MapType0Type refType MapType1Type))) (= (type h@@20) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@6) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (Apply0 t0@@12 heap@@1 (Handle0 h@@20 r@@6 rd)) (MapType0Select h@@20 heap@@1))) :qid |unknown.0:0| :skolemid |6987| :pattern ( (Apply0 t0@@12 heap@@1 (Handle0 h@@20 r@@6 rd))) )))
(assert (forall ((t0@@13 T@U) (heap@@2 T@U) (h@@21 T@U) (r@@7 T@U) (rd@@0 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@13) TyType) (= (type heap@@2) (MapType0Type refType MapType1Type))) (= (type h@@21) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@7) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@0) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (U_2_bool (MapType0Select r@@7 heap@@2))) (Requires0 t0@@13 heap@@2 (Handle0 h@@21 r@@7 rd@@0))) :qid |unknown.0:0| :skolemid |6988| :pattern ( (Requires0 t0@@13 heap@@2 (Handle0 h@@21 r@@7 rd@@0))) )))
(assert (forall ((arg0@@112 T@U) (arg1@@49 T@U) (arg2@@10 T@U) ) (! (= (type (Reads0 arg0@@112 arg1@@49 arg2@@10)) (MapType0Type BoxType boolType)) :qid |funType:Reads0| :pattern ( (Reads0 arg0@@112 arg1@@49 arg2@@10)) )))
(assert (forall ((t0@@14 T@U) (heap@@3 T@U) (h@@22 T@U) (r@@8 T@U) (rd@@1 T@U) (bx@@40 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@14) TyType) (= (type heap@@3) (MapType0Type refType MapType1Type))) (= (type h@@22) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@8) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@1) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (type bx@@40) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads0 t0@@14 heap@@3 (Handle0 h@@22 r@@8 rd@@1)) bx@@40)) (U_2_bool (MapType0Select (MapType0Select rd@@1 heap@@3) bx@@40))) (=> (U_2_bool (MapType0Select (MapType0Select rd@@1 heap@@3) bx@@40)) (U_2_bool (MapType0Select (Reads0 t0@@14 heap@@3 (Handle0 h@@22 r@@8 rd@@1)) bx@@40))))) :qid |unknown.0:0| :skolemid |6989| :pattern ( (MapType0Select (Reads0 t0@@14 heap@@3 (Handle0 h@@22 r@@8 rd@@1)) bx@@40)) )))
(assert (forall ((t0@@15 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@5 T@U) ) (!  (=> (and (and (and (and (= (type t0@@15) TyType) (= (type h0@@0) (MapType0Type refType MapType1Type))) (= (type h1@@0) (MapType0Type refType MapType1Type))) (= (type f@@5) HandleTypeType)) (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) ($Is f@@5 (Tclass._System.___hFunc0 t0@@15))) (forall ((o@@54 T@U) (fld T@U) ) (! (let ((a@@82 (FieldTypeInv0 (type fld)))) (=> (and (and (= (type o@@54) refType) (= (type fld) (FieldType a@@82))) (and (not (= o@@54 null)) (U_2_bool (MapType0Select (Reads0 t0@@15 h0@@0 f@@5) ($Box o@@54))))) (= (MapType1Select (MapType0Select h0@@0 o@@54) fld) (MapType1Select (MapType0Select h1@@0 o@@54) fld)))) :qid |unknown.0:0| :skolemid |6990| :no-pattern (type o@@54) :no-pattern (type fld) :no-pattern (U_2_int o@@54) :no-pattern (U_2_bool o@@54) :no-pattern (U_2_int fld) :no-pattern (U_2_bool fld) )))) (= (Reads0 t0@@15 h0@@0 f@@5) (Reads0 t0@@15 h1@@0 f@@5))) :qid |unknown.0:0| :skolemid |6991| :pattern ( ($HeapSucc h0@@0 h1@@0) (Reads0 t0@@15 h1@@0 f@@5)) )))
(assert (forall ((t0@@16 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@6 T@U) ) (!  (=> (and (and (and (and (= (type t0@@16) TyType) (= (type h0@@1) (MapType0Type refType MapType1Type))) (= (type h1@@1) (MapType0Type refType MapType1Type))) (= (type f@@6) HandleTypeType)) (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) ($Is f@@6 (Tclass._System.___hFunc0 t0@@16))) (forall ((o@@55 T@U) (fld@@0 T@U) ) (! (let ((a@@83 (FieldTypeInv0 (type fld@@0)))) (=> (and (and (= (type o@@55) refType) (= (type fld@@0) (FieldType a@@83))) (and (not (= o@@55 null)) (U_2_bool (MapType0Select (Reads0 t0@@16 h1@@1 f@@6) ($Box o@@55))))) (= (MapType1Select (MapType0Select h0@@1 o@@55) fld@@0) (MapType1Select (MapType0Select h1@@1 o@@55) fld@@0)))) :qid |unknown.0:0| :skolemid |6992| :no-pattern (type o@@55) :no-pattern (type fld@@0) :no-pattern (U_2_int o@@55) :no-pattern (U_2_bool o@@55) :no-pattern (U_2_int fld@@0) :no-pattern (U_2_bool fld@@0) )))) (= (Reads0 t0@@16 h0@@1 f@@6) (Reads0 t0@@16 h1@@1 f@@6))) :qid |unknown.0:0| :skolemid |6993| :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads0 t0@@16 h1@@1 f@@6)) )))
(assert (forall ((t0@@17 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@7 T@U) ) (!  (=> (and (and (and (and (= (type t0@@17) TyType) (= (type h0@@2) (MapType0Type refType MapType1Type))) (= (type h1@@2) (MapType0Type refType MapType1Type))) (= (type f@@7) HandleTypeType)) (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) ($Is f@@7 (Tclass._System.___hFunc0 t0@@17))) (forall ((o@@56 T@U) (fld@@1 T@U) ) (! (let ((a@@84 (FieldTypeInv0 (type fld@@1)))) (=> (and (and (= (type o@@56) refType) (= (type fld@@1) (FieldType a@@84))) (and (not (= o@@56 null)) (U_2_bool (MapType0Select (Reads0 t0@@17 h0@@2 f@@7) ($Box o@@56))))) (= (MapType1Select (MapType0Select h0@@2 o@@56) fld@@1) (MapType1Select (MapType0Select h1@@2 o@@56) fld@@1)))) :qid |unknown.0:0| :skolemid |6994| :no-pattern (type o@@56) :no-pattern (type fld@@1) :no-pattern (U_2_int o@@56) :no-pattern (U_2_bool o@@56) :no-pattern (U_2_int fld@@1) :no-pattern (U_2_bool fld@@1) )))) (and (=> (Requires0 t0@@17 h0@@2 f@@7) (Requires0 t0@@17 h1@@2 f@@7)) (=> (Requires0 t0@@17 h1@@2 f@@7) (Requires0 t0@@17 h0@@2 f@@7)))) :qid |unknown.0:0| :skolemid |6995| :pattern ( ($HeapSucc h0@@2 h1@@2) (Requires0 t0@@17 h1@@2 f@@7)) )))
(assert (forall ((t0@@18 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@8 T@U) ) (!  (=> (and (and (and (and (= (type t0@@18) TyType) (= (type h0@@3) (MapType0Type refType MapType1Type))) (= (type h1@@3) (MapType0Type refType MapType1Type))) (= (type f@@8) HandleTypeType)) (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) ($Is f@@8 (Tclass._System.___hFunc0 t0@@18))) (forall ((o@@57 T@U) (fld@@2 T@U) ) (! (let ((a@@85 (FieldTypeInv0 (type fld@@2)))) (=> (and (and (= (type o@@57) refType) (= (type fld@@2) (FieldType a@@85))) (and (not (= o@@57 null)) (U_2_bool (MapType0Select (Reads0 t0@@18 h1@@3 f@@8) ($Box o@@57))))) (= (MapType1Select (MapType0Select h0@@3 o@@57) fld@@2) (MapType1Select (MapType0Select h1@@3 o@@57) fld@@2)))) :qid |unknown.0:0| :skolemid |6996| :no-pattern (type o@@57) :no-pattern (type fld@@2) :no-pattern (U_2_int o@@57) :no-pattern (U_2_bool o@@57) :no-pattern (U_2_int fld@@2) :no-pattern (U_2_bool fld@@2) )))) (and (=> (Requires0 t0@@18 h0@@3 f@@8) (Requires0 t0@@18 h1@@3 f@@8)) (=> (Requires0 t0@@18 h1@@3 f@@8) (Requires0 t0@@18 h0@@3 f@@8)))) :qid |unknown.0:0| :skolemid |6997| :pattern ( ($HeapSucc h0@@3 h1@@3) (Requires0 t0@@18 h1@@3 f@@8)) )))
(assert (forall ((t0@@19 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@9 T@U) ) (!  (=> (and (and (and (and (= (type t0@@19) TyType) (= (type h0@@4) (MapType0Type refType MapType1Type))) (= (type h1@@4) (MapType0Type refType MapType1Type))) (= (type f@@9) HandleTypeType)) (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) ($Is f@@9 (Tclass._System.___hFunc0 t0@@19))) (forall ((o@@58 T@U) (fld@@3 T@U) ) (! (let ((a@@86 (FieldTypeInv0 (type fld@@3)))) (=> (and (and (= (type o@@58) refType) (= (type fld@@3) (FieldType a@@86))) (and (not (= o@@58 null)) (U_2_bool (MapType0Select (Reads0 t0@@19 h0@@4 f@@9) ($Box o@@58))))) (= (MapType1Select (MapType0Select h0@@4 o@@58) fld@@3) (MapType1Select (MapType0Select h1@@4 o@@58) fld@@3)))) :qid |unknown.0:0| :skolemid |6998| :no-pattern (type o@@58) :no-pattern (type fld@@3) :no-pattern (U_2_int o@@58) :no-pattern (U_2_bool o@@58) :no-pattern (U_2_int fld@@3) :no-pattern (U_2_bool fld@@3) )))) (= (Apply0 t0@@19 h0@@4 f@@9) (Apply0 t0@@19 h1@@4 f@@9))) :qid |unknown.0:0| :skolemid |6999| :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply0 t0@@19 h1@@4 f@@9)) )))
(assert (forall ((t0@@20 T@U) (h0@@5 T@U) (h1@@5 T@U) (f@@10 T@U) ) (!  (=> (and (and (and (and (= (type t0@@20) TyType) (= (type h0@@5) (MapType0Type refType MapType1Type))) (= (type h1@@5) (MapType0Type refType MapType1Type))) (= (type f@@10) HandleTypeType)) (and (and (and ($HeapSucc h0@@5 h1@@5) (and ($IsGoodHeap h0@@5) ($IsGoodHeap h1@@5))) ($Is f@@10 (Tclass._System.___hFunc0 t0@@20))) (forall ((o@@59 T@U) (fld@@4 T@U) ) (! (let ((a@@87 (FieldTypeInv0 (type fld@@4)))) (=> (and (and (= (type o@@59) refType) (= (type fld@@4) (FieldType a@@87))) (and (not (= o@@59 null)) (U_2_bool (MapType0Select (Reads0 t0@@20 h1@@5 f@@10) ($Box o@@59))))) (= (MapType1Select (MapType0Select h0@@5 o@@59) fld@@4) (MapType1Select (MapType0Select h1@@5 o@@59) fld@@4)))) :qid |unknown.0:0| :skolemid |7000| :no-pattern (type o@@59) :no-pattern (type fld@@4) :no-pattern (U_2_int o@@59) :no-pattern (U_2_bool o@@59) :no-pattern (U_2_int fld@@4) :no-pattern (U_2_bool fld@@4) )))) (= (Apply0 t0@@20 h0@@5 f@@10) (Apply0 t0@@20 h1@@5 f@@10))) :qid |unknown.0:0| :skolemid |7001| :pattern ( ($HeapSucc h0@@5 h1@@5) (Apply0 t0@@20 h1@@5 f@@10)) )))
(assert (forall ((t0@@21 T@U) (heap@@4 T@U) (f@@11 T@U) ) (!  (=> (and (and (and (= (type t0@@21) TyType) (= (type heap@@4) (MapType0Type refType MapType1Type))) (= (type f@@11) HandleTypeType)) (and ($IsGoodHeap heap@@4) ($Is f@@11 (Tclass._System.___hFunc0 t0@@21)))) (and (=> (|Set#Equal| (Reads0 t0@@21 $OneHeap f@@11) (|Set#Empty| BoxType)) (|Set#Equal| (Reads0 t0@@21 heap@@4 f@@11) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads0 t0@@21 heap@@4 f@@11) (|Set#Empty| BoxType)) (|Set#Equal| (Reads0 t0@@21 $OneHeap f@@11) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |7002| :pattern ( (Reads0 t0@@21 $OneHeap f@@11) ($IsGoodHeap heap@@4)) :pattern ( (Reads0 t0@@21 heap@@4 f@@11)) )))
(assert (forall ((t0@@22 T@U) (heap@@5 T@U) (f@@12 T@U) ) (!  (=> (and (and (and (= (type t0@@22) TyType) (= (type heap@@5) (MapType0Type refType MapType1Type))) (= (type f@@12) HandleTypeType)) (and (and ($IsGoodHeap heap@@5) ($Is f@@12 (Tclass._System.___hFunc0 t0@@22))) (|Set#Equal| (Reads0 t0@@22 $OneHeap f@@12) (|Set#Empty| BoxType)))) (and (=> (Requires0 t0@@22 $OneHeap f@@12) (Requires0 t0@@22 heap@@5 f@@12)) (=> (Requires0 t0@@22 heap@@5 f@@12) (Requires0 t0@@22 $OneHeap f@@12)))) :qid |unknown.0:0| :skolemid |7003| :pattern ( (Requires0 t0@@22 $OneHeap f@@12) ($IsGoodHeap heap@@5)) :pattern ( (Requires0 t0@@22 heap@@5 f@@12)) )))
(assert (forall ((f@@13 T@U) (t0@@23 T@U) ) (!  (=> (and (= (type f@@13) HandleTypeType) (= (type t0@@23) TyType)) (and (=> ($Is f@@13 (Tclass._System.___hFunc0 t0@@23)) (forall ((h@@23 T@U) ) (!  (=> (= (type h@@23) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap h@@23) (Requires0 t0@@23 h@@23 f@@13)) ($IsBox (Apply0 t0@@23 h@@23 f@@13) t0@@23))) :qid |DafnyPre.521:12| :skolemid |7004| :pattern ( (Apply0 t0@@23 h@@23 f@@13)) ))) (=> (forall ((h@@24 T@U) ) (!  (=> (= (type h@@24) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap h@@24) (Requires0 t0@@23 h@@24 f@@13)) ($IsBox (Apply0 t0@@23 h@@24 f@@13) t0@@23))) :qid |DafnyPre.521:12| :skolemid |7004| :pattern ( (Apply0 t0@@23 h@@24 f@@13)) )) ($Is f@@13 (Tclass._System.___hFunc0 t0@@23))))) :qid |unknown.0:0| :skolemid |7005| :pattern ( ($Is f@@13 (Tclass._System.___hFunc0 t0@@23))) )))
(assert (forall ((f@@14 T@U) (t0@@24 T@U) (u0 T@U) ) (!  (=> (and (and (and (= (type f@@14) HandleTypeType) (= (type t0@@24) TyType)) (= (type u0) TyType)) (and ($Is f@@14 (Tclass._System.___hFunc0 t0@@24)) (forall ((bx@@41 T@U) ) (!  (=> (and (= (type bx@@41) BoxType) ($IsBox bx@@41 t0@@24)) ($IsBox bx@@41 u0)) :qid |unknown.0:0| :skolemid |7006| :pattern ( ($IsBox bx@@41 t0@@24)) :pattern ( ($IsBox bx@@41 u0)) )))) ($Is f@@14 (Tclass._System.___hFunc0 u0))) :qid |unknown.0:0| :skolemid |7007| :pattern ( ($Is f@@14 (Tclass._System.___hFunc0 t0@@24)) ($Is f@@14 (Tclass._System.___hFunc0 u0))) )))
(assert (forall ((f@@15 T@U) (t0@@25 T@U) (h@@25 T@U) ) (!  (=> (and (and (and (= (type f@@15) HandleTypeType) (= (type t0@@25) TyType)) (= (type h@@25) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@25)) (and (=> ($IsAlloc f@@15 (Tclass._System.___hFunc0 t0@@25) h@@25) (=> (Requires0 t0@@25 h@@25 f@@15) (forall ((r@@9 T@U) ) (!  (=> (= (type r@@9) refType) (=> (and (not (= r@@9 null)) (U_2_bool (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@9)))) (U_2_bool (MapType1Select (MapType0Select h@@25 r@@9) alloc)))) :qid |unknown.0:0| :skolemid |7008| :pattern ( (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@9))) )))) (=> (=> (Requires0 t0@@25 h@@25 f@@15) (forall ((r@@10 T@U) ) (!  (=> (= (type r@@10) refType) (=> (and (not (= r@@10 null)) (U_2_bool (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@10)))) (U_2_bool (MapType1Select (MapType0Select h@@25 r@@10) alloc)))) :qid |unknown.0:0| :skolemid |7008| :pattern ( (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@10))) ))) ($IsAlloc f@@15 (Tclass._System.___hFunc0 t0@@25) h@@25)))) :qid |unknown.0:0| :skolemid |7009| :pattern ( ($IsAlloc f@@15 (Tclass._System.___hFunc0 t0@@25) h@@25)) )))
(assert (forall ((f@@16 T@U) (t0@@26 T@U) (h@@26 T@U) ) (!  (=> (and (and (and (and (= (type f@@16) HandleTypeType) (= (type t0@@26) TyType)) (= (type h@@26) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@26) ($IsAlloc f@@16 (Tclass._System.___hFunc0 t0@@26) h@@26))) (Requires0 t0@@26 h@@26 f@@16)) ($IsAllocBox (Apply0 t0@@26 h@@26 f@@16) t0@@26 h@@26)) :qid |unknown.0:0| :skolemid |7010| :pattern ( ($IsAlloc f@@16 (Tclass._System.___hFunc0 t0@@26) h@@26)) )))
(assert (forall ((arg0@@113 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0 arg0@@113)) TyType) :qid |funType:Tclass._System.___hPartialFunc0| :pattern ( (Tclass._System.___hPartialFunc0 arg0@@113)) )))
(assert (forall ((|#$R@@2| T@U) ) (!  (=> (= (type |#$R@@2|) TyType) (= (Tag (Tclass._System.___hPartialFunc0 |#$R@@2|)) Tagclass._System.___hPartialFunc0)) :qid |unknown.0:0| :skolemid |7011| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@2|)) )))
(assert (forall ((arg0@@114 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0_0 arg0@@114)) TyType) :qid |funType:Tclass._System.___hPartialFunc0_0| :pattern ( (Tclass._System.___hPartialFunc0_0 arg0@@114)) )))
(assert (forall ((|#$R@@3| T@U) ) (!  (=> (= (type |#$R@@3|) TyType) (= (Tclass._System.___hPartialFunc0_0 (Tclass._System.___hPartialFunc0 |#$R@@3|)) |#$R@@3|)) :qid |unknown.0:0| :skolemid |7012| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@3|)) )))
(assert (forall ((|#$R@@4| T@U) (bx@@42 T@U) ) (!  (=> (and (and (= (type |#$R@@4|) TyType) (= (type bx@@42) BoxType)) ($IsBox bx@@42 (Tclass._System.___hPartialFunc0 |#$R@@4|))) (and (= ($Box ($Unbox HandleTypeType bx@@42)) bx@@42) ($Is ($Unbox HandleTypeType bx@@42) (Tclass._System.___hPartialFunc0 |#$R@@4|)))) :qid |unknown.0:0| :skolemid |7013| :pattern ( ($IsBox bx@@42 (Tclass._System.___hPartialFunc0 |#$R@@4|))) )))
(assert (forall ((|#$R@@5| T@U) (|f#0| T@U) ) (!  (=> (and (= (type |#$R@@5|) TyType) (= (type |f#0|) HandleTypeType)) (and (=> ($Is |f#0| (Tclass._System.___hPartialFunc0 |#$R@@5|)) (and ($Is |f#0| (Tclass._System.___hFunc0 |#$R@@5|)) (|Set#Equal| (Reads0 |#$R@@5| $OneHeap |f#0|) (|Set#Empty| BoxType)))) (=> (and ($Is |f#0| (Tclass._System.___hFunc0 |#$R@@5|)) (|Set#Equal| (Reads0 |#$R@@5| $OneHeap |f#0|) (|Set#Empty| BoxType))) ($Is |f#0| (Tclass._System.___hPartialFunc0 |#$R@@5|))))) :qid |unknown.0:0| :skolemid |7014| :pattern ( ($Is |f#0| (Tclass._System.___hPartialFunc0 |#$R@@5|))) )))
(assert (forall ((|#$R@@6| T@U) (|f#0@@0| T@U) ($h@@7 T@U) ) (!  (=> (and (and (= (type |#$R@@6|) TyType) (= (type |f#0@@0|) HandleTypeType)) (= (type $h@@7) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@6|) $h@@7) ($IsAlloc |f#0@@0| (Tclass._System.___hFunc0 |#$R@@6|) $h@@7)) (=> ($IsAlloc |f#0@@0| (Tclass._System.___hFunc0 |#$R@@6|) $h@@7) ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@6|) $h@@7)))) :qid |unknown.0:0| :skolemid |7015| :pattern ( ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@6|) $h@@7)) )))
(assert (forall ((arg0@@115 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0 arg0@@115)) TyType) :qid |funType:Tclass._System.___hTotalFunc0| :pattern ( (Tclass._System.___hTotalFunc0 arg0@@115)) )))
(assert (forall ((|#$R@@7| T@U) ) (!  (=> (= (type |#$R@@7|) TyType) (= (Tag (Tclass._System.___hTotalFunc0 |#$R@@7|)) Tagclass._System.___hTotalFunc0)) :qid |unknown.0:0| :skolemid |7016| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@7|)) )))
(assert (forall ((arg0@@116 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0_0 arg0@@116)) TyType) :qid |funType:Tclass._System.___hTotalFunc0_0| :pattern ( (Tclass._System.___hTotalFunc0_0 arg0@@116)) )))
(assert (forall ((|#$R@@8| T@U) ) (!  (=> (= (type |#$R@@8|) TyType) (= (Tclass._System.___hTotalFunc0_0 (Tclass._System.___hTotalFunc0 |#$R@@8|)) |#$R@@8|)) :qid |unknown.0:0| :skolemid |7017| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@8|)) )))
(assert (forall ((|#$R@@9| T@U) (bx@@43 T@U) ) (!  (=> (and (and (= (type |#$R@@9|) TyType) (= (type bx@@43) BoxType)) ($IsBox bx@@43 (Tclass._System.___hTotalFunc0 |#$R@@9|))) (and (= ($Box ($Unbox HandleTypeType bx@@43)) bx@@43) ($Is ($Unbox HandleTypeType bx@@43) (Tclass._System.___hTotalFunc0 |#$R@@9|)))) :qid |unknown.0:0| :skolemid |7018| :pattern ( ($IsBox bx@@43 (Tclass._System.___hTotalFunc0 |#$R@@9|))) )))
(assert (forall ((|#$R@@10| T@U) (|f#0@@1| T@U) ) (!  (=> (and (= (type |#$R@@10|) TyType) (= (type |f#0@@1|) HandleTypeType)) (and (=> ($Is |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|)) (and ($Is |f#0@@1| (Tclass._System.___hPartialFunc0 |#$R@@10|)) (Requires0 |#$R@@10| $OneHeap |f#0@@1|))) (=> (and ($Is |f#0@@1| (Tclass._System.___hPartialFunc0 |#$R@@10|)) (Requires0 |#$R@@10| $OneHeap |f#0@@1|)) ($Is |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|))))) :qid |unknown.0:0| :skolemid |7019| :pattern ( ($Is |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|))) )))
(assert (forall ((|#$R@@11| T@U) (|f#0@@2| T@U) ($h@@8 T@U) ) (!  (=> (and (and (= (type |#$R@@11|) TyType) (= (type |f#0@@2|) HandleTypeType)) (= (type $h@@8) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc0 |#$R@@11|) $h@@8) ($IsAlloc |f#0@@2| (Tclass._System.___hPartialFunc0 |#$R@@11|) $h@@8)) (=> ($IsAlloc |f#0@@2| (Tclass._System.___hPartialFunc0 |#$R@@11|) $h@@8) ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc0 |#$R@@11|) $h@@8)))) :qid |unknown.0:0| :skolemid |7020| :pattern ( ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc0 |#$R@@11|) $h@@8)) )))
(assert (= (type Tclass._System.__default) TyType))
(assert (= (Tag Tclass._System.__default) Tagclass._System.__default))
(assert (forall ((bx@@44 T@U) ) (!  (=> (and (= (type bx@@44) BoxType) ($IsBox bx@@44 Tclass._System.__default)) (and (= ($Box ($Unbox refType bx@@44)) bx@@44) ($Is ($Unbox refType bx@@44) Tclass._System.__default))) :qid |unknown.0:0| :skolemid |7021| :pattern ( ($IsBox bx@@44 Tclass._System.__default)) )))
(assert (forall (($o@@7 T@U) ) (!  (=> (= (type $o@@7) refType) (and (=> ($Is $o@@7 Tclass._System.__default) (or (= $o@@7 null) (= (dtype $o@@7) Tclass._System.__default))) (=> (or (= $o@@7 null) (= (dtype $o@@7) Tclass._System.__default)) ($Is $o@@7 Tclass._System.__default)))) :qid |unknown.0:0| :skolemid |7022| :pattern ( ($Is $o@@7 Tclass._System.__default)) )))
(assert (forall (($o@@8 T@U) ($h@@9 T@U) ) (!  (=> (and (= (type $o@@8) refType) (= (type $h@@9) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@8 Tclass._System.__default $h@@9) (or (= $o@@8 null) (U_2_bool (MapType1Select (MapType0Select $h@@9 $o@@8) alloc)))) (=> (or (= $o@@8 null) (U_2_bool (MapType1Select (MapType0Select $h@@9 $o@@8) alloc))) ($IsAlloc $o@@8 Tclass._System.__default $h@@9)))) :qid |unknown.0:0| :skolemid |7023| :pattern ( ($IsAlloc $o@@8 Tclass._System.__default $h@@9)) )))
(assert  (=> true (forall ((|#$A| T@U) (|#$B| T@U) (|a#0| T@U) (|b#0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A|) TyType) (= (type |#$B|) TyType)) (= (type |a#0|) BoxType)) (= (type |b#0|) BoxType)) (or (|_System.__default.rank__is__less__than#canCall| |#$A| |#$B| |a#0| |b#0|) (and ($IsBox |a#0| |#$A|) ($IsBox |b#0| |#$B|)))) true) :qid |unknown.0:0| :skolemid |7024| :pattern ( (_System.__default.rank__is__less__than |#$A| |#$B| |a#0| |b#0|)) ))))
(assert (forall ((|#$A@@0| T@U) (|#$B@@0| T@U) (|a#0@@0| T@U) (|b#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A@@0|) TyType) (= (type |#$B@@0|) TyType)) (= (type |a#0@@0|) BoxType)) (= (type |b#0@@0|) BoxType)) (and ($IsBox |a#0@@0| |#$A@@0|) ($IsBox |b#0@@0| |#$B@@0|))) (and (=> (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|) true) (=> true (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|)))) :qid |unknown.0:0| :skolemid |7025| :pattern ( (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|)) )))
(assert (forall ((arg0@@117 T@U) (arg1@@50 T@U) (arg2@@11 T@U) ) (! (= (type (Tclass._System.___hFunc2 arg0@@117 arg1@@50 arg2@@11)) TyType) :qid |funType:Tclass._System.___hFunc2| :pattern ( (Tclass._System.___hFunc2 arg0@@117 arg1@@50 arg2@@11)) )))
(assert (forall ((|#$T0| T@U) (|#$T1| T@U) (|#$R@@12| T@U) ) (!  (=> (and (and (= (type |#$T0|) TyType) (= (type |#$T1|) TyType)) (= (type |#$R@@12|) TyType)) (= (Tag (Tclass._System.___hFunc2 |#$T0| |#$T1| |#$R@@12|)) Tagclass._System.___hFunc2)) :qid |unknown.0:0| :skolemid |7026| :pattern ( (Tclass._System.___hFunc2 |#$T0| |#$T1| |#$R@@12|)) )))
(assert (forall ((arg0@@118 T@U) ) (! (= (type (Tclass._System.___hFunc2_0 arg0@@118)) TyType) :qid |funType:Tclass._System.___hFunc2_0| :pattern ( (Tclass._System.___hFunc2_0 arg0@@118)) )))
(assert (forall ((|#$T0@@0| T@U) (|#$T1@@0| T@U) (|#$R@@13| T@U) ) (!  (=> (and (and (= (type |#$T0@@0|) TyType) (= (type |#$T1@@0|) TyType)) (= (type |#$R@@13|) TyType)) (= (Tclass._System.___hFunc2_0 (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@13|)) |#$T0@@0|)) :qid |unknown.0:0| :skolemid |7027| :pattern ( (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@13|)) )))
(assert (forall ((arg0@@119 T@U) ) (! (= (type (Tclass._System.___hFunc2_1 arg0@@119)) TyType) :qid |funType:Tclass._System.___hFunc2_1| :pattern ( (Tclass._System.___hFunc2_1 arg0@@119)) )))
(assert (forall ((|#$T0@@1| T@U) (|#$T1@@1| T@U) (|#$R@@14| T@U) ) (!  (=> (and (and (= (type |#$T0@@1|) TyType) (= (type |#$T1@@1|) TyType)) (= (type |#$R@@14|) TyType)) (= (Tclass._System.___hFunc2_1 (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@14|)) |#$T1@@1|)) :qid |unknown.0:0| :skolemid |7028| :pattern ( (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@14|)) )))
(assert (forall ((arg0@@120 T@U) ) (! (= (type (Tclass._System.___hFunc2_2 arg0@@120)) TyType) :qid |funType:Tclass._System.___hFunc2_2| :pattern ( (Tclass._System.___hFunc2_2 arg0@@120)) )))
(assert (forall ((|#$T0@@2| T@U) (|#$T1@@2| T@U) (|#$R@@15| T@U) ) (!  (=> (and (and (= (type |#$T0@@2|) TyType) (= (type |#$T1@@2|) TyType)) (= (type |#$R@@15|) TyType)) (= (Tclass._System.___hFunc2_2 (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@15|)) |#$R@@15|)) :qid |unknown.0:0| :skolemid |7029| :pattern ( (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@15|)) )))
(assert (forall ((|#$T0@@3| T@U) (|#$T1@@3| T@U) (|#$R@@16| T@U) (bx@@45 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@3|) TyType) (= (type |#$T1@@3|) TyType)) (= (type |#$R@@16|) TyType)) (= (type bx@@45) BoxType)) ($IsBox bx@@45 (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@16|))) (and (= ($Box ($Unbox HandleTypeType bx@@45)) bx@@45) ($Is ($Unbox HandleTypeType bx@@45) (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@16|)))) :qid |unknown.0:0| :skolemid |7030| :pattern ( ($IsBox bx@@45 (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@16|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@121 T@T) (arg1@@51 T@T) (arg2@@12 T@T) (arg3@@1 T@T) ) (! (= (Ctor (MapType2Type arg0@@121 arg1@@51 arg2@@12 arg3@@1)) 21) :qid |ctor:MapType2Type| )) (forall ((arg0@@122 T@T) (arg1@@52 T@T) (arg2@@13 T@T) (arg3@@2 T@T) ) (! (= (MapType2TypeInv0 (MapType2Type arg0@@122 arg1@@52 arg2@@13 arg3@@2)) arg0@@122) :qid |typeInv:MapType2TypeInv0| :pattern ( (MapType2Type arg0@@122 arg1@@52 arg2@@13 arg3@@2)) ))) (forall ((arg0@@123 T@T) (arg1@@53 T@T) (arg2@@14 T@T) (arg3@@3 T@T) ) (! (= (MapType2TypeInv1 (MapType2Type arg0@@123 arg1@@53 arg2@@14 arg3@@3)) arg1@@53) :qid |typeInv:MapType2TypeInv1| :pattern ( (MapType2Type arg0@@123 arg1@@53 arg2@@14 arg3@@3)) ))) (forall ((arg0@@124 T@T) (arg1@@54 T@T) (arg2@@15 T@T) (arg3@@4 T@T) ) (! (= (MapType2TypeInv2 (MapType2Type arg0@@124 arg1@@54 arg2@@15 arg3@@4)) arg2@@15) :qid |typeInv:MapType2TypeInv2| :pattern ( (MapType2Type arg0@@124 arg1@@54 arg2@@15 arg3@@4)) ))) (forall ((arg0@@125 T@T) (arg1@@55 T@T) (arg2@@16 T@T) (arg3@@5 T@T) ) (! (= (MapType2TypeInv3 (MapType2Type arg0@@125 arg1@@55 arg2@@16 arg3@@5)) arg3@@5) :qid |typeInv:MapType2TypeInv3| :pattern ( (MapType2Type arg0@@125 arg1@@55 arg2@@16 arg3@@5)) ))) (forall ((arg0@@126 T@U) (arg1@@56 T@U) (arg2@@17 T@U) (arg3@@6 T@U) ) (! (let ((aVar3 (MapType2TypeInv3 (type arg0@@126)))) (= (type (MapType2Select arg0@@126 arg1@@56 arg2@@17 arg3@@6)) aVar3)) :qid |funType:MapType2Select| :pattern ( (MapType2Select arg0@@126 arg1@@56 arg2@@17 arg3@@6)) ))) (forall ((arg0@@127 T@U) (arg1@@57 T@U) (arg2@@18 T@U) (arg3@@7 T@U) (arg4@@0 T@U) ) (! (let ((aVar3@@0 (type arg4@@0))) (let ((aVar2 (type arg3@@7))) (let ((aVar1@@2 (type arg2@@18))) (let ((aVar0@@0 (type arg1@@57))) (= (type (MapType2Store arg0@@127 arg1@@57 arg2@@18 arg3@@7 arg4@@0)) (MapType2Type aVar0@@0 aVar1@@2 aVar2 aVar3@@0)))))) :qid |funType:MapType2Store| :pattern ( (MapType2Store arg0@@127 arg1@@57 arg2@@18 arg3@@7 arg4@@0)) ))) (forall ((m@@27 T@U) (x0@@5 T@U) (x1 T@U) (x2 T@U) (val@@6 T@U) ) (! (let ((aVar3@@1 (MapType2TypeInv3 (type m@@27)))) (=> (= (type val@@6) aVar3@@1) (= (MapType2Select (MapType2Store m@@27 x0@@5 x1 x2 val@@6) x0@@5 x1 x2) val@@6))) :qid |mapAx0:MapType2Select| :weight 0 ))) (and (and (and (forall ((val@@7 T@U) (m@@28 T@U) (x0@@6 T@U) (x1@@0 T@U) (x2@@0 T@U) (y0@@3 T@U) (y1 T@U) (y2 T@U) ) (!  (or (= x0@@6 y0@@3) (= (MapType2Select (MapType2Store m@@28 x0@@6 x1@@0 x2@@0 val@@7) y0@@3 y1 y2) (MapType2Select m@@28 y0@@3 y1 y2))) :qid |mapAx1:MapType2Select:0| :weight 0 )) (forall ((val@@8 T@U) (m@@29 T@U) (x0@@7 T@U) (x1@@1 T@U) (x2@@1 T@U) (y0@@4 T@U) (y1@@0 T@U) (y2@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType2Select (MapType2Store m@@29 x0@@7 x1@@1 x2@@1 val@@8) y0@@4 y1@@0 y2@@0) (MapType2Select m@@29 y0@@4 y1@@0 y2@@0))) :qid |mapAx1:MapType2Select:1| :weight 0 ))) (forall ((val@@9 T@U) (m@@30 T@U) (x0@@8 T@U) (x1@@2 T@U) (x2@@2 T@U) (y0@@5 T@U) (y1@@1 T@U) (y2@@1 T@U) ) (!  (or (= x2@@2 y2@@1) (= (MapType2Select (MapType2Store m@@30 x0@@8 x1@@2 x2@@2 val@@9) y0@@5 y1@@1 y2@@1) (MapType2Select m@@30 y0@@5 y1@@1 y2@@1))) :qid |mapAx1:MapType2Select:2| :weight 0 ))) (forall ((val@@10 T@U) (m@@31 T@U) (x0@@9 T@U) (x1@@3 T@U) (x2@@3 T@U) (y0@@6 T@U) (y1@@2 T@U) (y2@@2 T@U) ) (!  (or true (= (MapType2Select (MapType2Store m@@31 x0@@9 x1@@3 x2@@3 val@@10) y0@@6 y1@@2 y2@@2) (MapType2Select m@@31 y0@@6 y1@@2 y2@@2))) :qid |mapAx2:MapType2Select| :weight 0 )))) (forall ((arg0@@128 T@U) (arg1@@58 T@U) (arg2@@19 T@U) (arg3@@8 T@U) (arg4@@1 T@U) (arg5 T@U) (arg6 T@U) ) (! (= (type (Apply2 arg0@@128 arg1@@58 arg2@@19 arg3@@8 arg4@@1 arg5 arg6)) BoxType) :qid |funType:Apply2| :pattern ( (Apply2 arg0@@128 arg1@@58 arg2@@19 arg3@@8 arg4@@1 arg5 arg6)) ))) (forall ((arg0@@129 T@U) (arg1@@59 T@U) (arg2@@20 T@U) ) (! (= (type (Handle2 arg0@@129 arg1@@59 arg2@@20)) HandleTypeType) :qid |funType:Handle2| :pattern ( (Handle2 arg0@@129 arg1@@59 arg2@@20)) ))))
(assert (forall ((t0@@27 T@U) (t1@@3 T@U) (t2 T@U) (heap@@6 T@U) (h@@27 T@U) (r@@11 T@U) (rd@@2 T@U) (bx0 T@U) (bx1 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@27) TyType) (= (type t1@@3) TyType)) (= (type t2) TyType)) (= (type heap@@6) (MapType0Type refType MapType1Type))) (= (type h@@27) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@11) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@2) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0) BoxType)) (= (type bx1) BoxType)) (= (Apply2 t0@@27 t1@@3 t2 heap@@6 (Handle2 h@@27 r@@11 rd@@2) bx0 bx1) (MapType2Select h@@27 heap@@6 bx0 bx1))) :qid |unknown.0:0| :skolemid |7031| :pattern ( (Apply2 t0@@27 t1@@3 t2 heap@@6 (Handle2 h@@27 r@@11 rd@@2) bx0 bx1)) )))
(assert (forall ((t0@@28 T@U) (t1@@4 T@U) (t2@@0 T@U) (heap@@7 T@U) (h@@28 T@U) (r@@12 T@U) (rd@@3 T@U) (bx0@@0 T@U) (bx1@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@28) TyType) (= (type t1@@4) TyType)) (= (type t2@@0) TyType)) (= (type heap@@7) (MapType0Type refType MapType1Type))) (= (type h@@28) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@12) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@3) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@0) BoxType)) (= (type bx1@@0) BoxType)) (U_2_bool (MapType2Select r@@12 heap@@7 bx0@@0 bx1@@0))) (Requires2 t0@@28 t1@@4 t2@@0 heap@@7 (Handle2 h@@28 r@@12 rd@@3) bx0@@0 bx1@@0)) :qid |unknown.0:0| :skolemid |7032| :pattern ( (Requires2 t0@@28 t1@@4 t2@@0 heap@@7 (Handle2 h@@28 r@@12 rd@@3) bx0@@0 bx1@@0)) )))
(assert (forall ((arg0@@130 T@U) (arg1@@60 T@U) (arg2@@21 T@U) (arg3@@9 T@U) (arg4@@2 T@U) (arg5@@0 T@U) (arg6@@0 T@U) ) (! (= (type (Reads2 arg0@@130 arg1@@60 arg2@@21 arg3@@9 arg4@@2 arg5@@0 arg6@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads2| :pattern ( (Reads2 arg0@@130 arg1@@60 arg2@@21 arg3@@9 arg4@@2 arg5@@0 arg6@@0)) )))
(assert (forall ((t0@@29 T@U) (t1@@5 T@U) (t2@@1 T@U) (heap@@8 T@U) (h@@29 T@U) (r@@13 T@U) (rd@@4 T@U) (bx0@@1 T@U) (bx1@@1 T@U) (bx@@46 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@29) TyType) (= (type t1@@5) TyType)) (= (type t2@@1) TyType)) (= (type heap@@8) (MapType0Type refType MapType1Type))) (= (type h@@29) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@13) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@4) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@1) BoxType)) (= (type bx1@@1) BoxType)) (= (type bx@@46) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads2 t0@@29 t1@@5 t2@@1 heap@@8 (Handle2 h@@29 r@@13 rd@@4) bx0@@1 bx1@@1) bx@@46)) (U_2_bool (MapType0Select (MapType2Select rd@@4 heap@@8 bx0@@1 bx1@@1) bx@@46))) (=> (U_2_bool (MapType0Select (MapType2Select rd@@4 heap@@8 bx0@@1 bx1@@1) bx@@46)) (U_2_bool (MapType0Select (Reads2 t0@@29 t1@@5 t2@@1 heap@@8 (Handle2 h@@29 r@@13 rd@@4) bx0@@1 bx1@@1) bx@@46))))) :qid |unknown.0:0| :skolemid |7033| :pattern ( (MapType0Select (Reads2 t0@@29 t1@@5 t2@@1 heap@@8 (Handle2 h@@29 r@@13 rd@@4) bx0@@1 bx1@@1) bx@@46)) )))
(assert (forall ((t0@@30 T@U) (t1@@6 T@U) (t2@@2 T@U) (h0@@6 T@U) (h1@@6 T@U) (f@@17 T@U) (bx0@@2 T@U) (bx1@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@30) TyType) (= (type t1@@6) TyType)) (= (type t2@@2) TyType)) (= (type h0@@6) (MapType0Type refType MapType1Type))) (= (type h1@@6) (MapType0Type refType MapType1Type))) (= (type f@@17) HandleTypeType)) (= (type bx0@@2) BoxType)) (= (type bx1@@2) BoxType)) (and (and (and ($HeapSucc h0@@6 h1@@6) (and ($IsGoodHeap h0@@6) ($IsGoodHeap h1@@6))) (and (and ($IsBox bx0@@2 t0@@30) ($IsBox bx1@@2 t1@@6)) ($Is f@@17 (Tclass._System.___hFunc2 t0@@30 t1@@6 t2@@2)))) (forall ((o@@60 T@U) (fld@@5 T@U) ) (! (let ((a@@88 (FieldTypeInv0 (type fld@@5)))) (=> (and (and (= (type o@@60) refType) (= (type fld@@5) (FieldType a@@88))) (and (not (= o@@60 null)) (U_2_bool (MapType0Select (Reads2 t0@@30 t1@@6 t2@@2 h0@@6 f@@17 bx0@@2 bx1@@2) ($Box o@@60))))) (= (MapType1Select (MapType0Select h0@@6 o@@60) fld@@5) (MapType1Select (MapType0Select h1@@6 o@@60) fld@@5)))) :qid |unknown.0:0| :skolemid |7034| :no-pattern (type o@@60) :no-pattern (type fld@@5) :no-pattern (U_2_int o@@60) :no-pattern (U_2_bool o@@60) :no-pattern (U_2_int fld@@5) :no-pattern (U_2_bool fld@@5) )))) (= (Reads2 t0@@30 t1@@6 t2@@2 h0@@6 f@@17 bx0@@2 bx1@@2) (Reads2 t0@@30 t1@@6 t2@@2 h1@@6 f@@17 bx0@@2 bx1@@2))) :qid |unknown.0:0| :skolemid |7035| :pattern ( ($HeapSucc h0@@6 h1@@6) (Reads2 t0@@30 t1@@6 t2@@2 h1@@6 f@@17 bx0@@2 bx1@@2)) )))
(assert (forall ((t0@@31 T@U) (t1@@7 T@U) (t2@@3 T@U) (h0@@7 T@U) (h1@@7 T@U) (f@@18 T@U) (bx0@@3 T@U) (bx1@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@31) TyType) (= (type t1@@7) TyType)) (= (type t2@@3) TyType)) (= (type h0@@7) (MapType0Type refType MapType1Type))) (= (type h1@@7) (MapType0Type refType MapType1Type))) (= (type f@@18) HandleTypeType)) (= (type bx0@@3) BoxType)) (= (type bx1@@3) BoxType)) (and (and (and ($HeapSucc h0@@7 h1@@7) (and ($IsGoodHeap h0@@7) ($IsGoodHeap h1@@7))) (and (and ($IsBox bx0@@3 t0@@31) ($IsBox bx1@@3 t1@@7)) ($Is f@@18 (Tclass._System.___hFunc2 t0@@31 t1@@7 t2@@3)))) (forall ((o@@61 T@U) (fld@@6 T@U) ) (! (let ((a@@89 (FieldTypeInv0 (type fld@@6)))) (=> (and (and (= (type o@@61) refType) (= (type fld@@6) (FieldType a@@89))) (and (not (= o@@61 null)) (U_2_bool (MapType0Select (Reads2 t0@@31 t1@@7 t2@@3 h1@@7 f@@18 bx0@@3 bx1@@3) ($Box o@@61))))) (= (MapType1Select (MapType0Select h0@@7 o@@61) fld@@6) (MapType1Select (MapType0Select h1@@7 o@@61) fld@@6)))) :qid |unknown.0:0| :skolemid |7036| :no-pattern (type o@@61) :no-pattern (type fld@@6) :no-pattern (U_2_int o@@61) :no-pattern (U_2_bool o@@61) :no-pattern (U_2_int fld@@6) :no-pattern (U_2_bool fld@@6) )))) (= (Reads2 t0@@31 t1@@7 t2@@3 h0@@7 f@@18 bx0@@3 bx1@@3) (Reads2 t0@@31 t1@@7 t2@@3 h1@@7 f@@18 bx0@@3 bx1@@3))) :qid |unknown.0:0| :skolemid |7037| :pattern ( ($HeapSucc h0@@7 h1@@7) (Reads2 t0@@31 t1@@7 t2@@3 h1@@7 f@@18 bx0@@3 bx1@@3)) )))
(assert (forall ((t0@@32 T@U) (t1@@8 T@U) (t2@@4 T@U) (h0@@8 T@U) (h1@@8 T@U) (f@@19 T@U) (bx0@@4 T@U) (bx1@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@32) TyType) (= (type t1@@8) TyType)) (= (type t2@@4) TyType)) (= (type h0@@8) (MapType0Type refType MapType1Type))) (= (type h1@@8) (MapType0Type refType MapType1Type))) (= (type f@@19) HandleTypeType)) (= (type bx0@@4) BoxType)) (= (type bx1@@4) BoxType)) (and (and (and ($HeapSucc h0@@8 h1@@8) (and ($IsGoodHeap h0@@8) ($IsGoodHeap h1@@8))) (and (and ($IsBox bx0@@4 t0@@32) ($IsBox bx1@@4 t1@@8)) ($Is f@@19 (Tclass._System.___hFunc2 t0@@32 t1@@8 t2@@4)))) (forall ((o@@62 T@U) (fld@@7 T@U) ) (! (let ((a@@90 (FieldTypeInv0 (type fld@@7)))) (=> (and (and (= (type o@@62) refType) (= (type fld@@7) (FieldType a@@90))) (and (not (= o@@62 null)) (U_2_bool (MapType0Select (Reads2 t0@@32 t1@@8 t2@@4 h0@@8 f@@19 bx0@@4 bx1@@4) ($Box o@@62))))) (= (MapType1Select (MapType0Select h0@@8 o@@62) fld@@7) (MapType1Select (MapType0Select h1@@8 o@@62) fld@@7)))) :qid |unknown.0:0| :skolemid |7038| :no-pattern (type o@@62) :no-pattern (type fld@@7) :no-pattern (U_2_int o@@62) :no-pattern (U_2_bool o@@62) :no-pattern (U_2_int fld@@7) :no-pattern (U_2_bool fld@@7) )))) (and (=> (Requires2 t0@@32 t1@@8 t2@@4 h0@@8 f@@19 bx0@@4 bx1@@4) (Requires2 t0@@32 t1@@8 t2@@4 h1@@8 f@@19 bx0@@4 bx1@@4)) (=> (Requires2 t0@@32 t1@@8 t2@@4 h1@@8 f@@19 bx0@@4 bx1@@4) (Requires2 t0@@32 t1@@8 t2@@4 h0@@8 f@@19 bx0@@4 bx1@@4)))) :qid |unknown.0:0| :skolemid |7039| :pattern ( ($HeapSucc h0@@8 h1@@8) (Requires2 t0@@32 t1@@8 t2@@4 h1@@8 f@@19 bx0@@4 bx1@@4)) )))
(assert (forall ((t0@@33 T@U) (t1@@9 T@U) (t2@@5 T@U) (h0@@9 T@U) (h1@@9 T@U) (f@@20 T@U) (bx0@@5 T@U) (bx1@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@33) TyType) (= (type t1@@9) TyType)) (= (type t2@@5) TyType)) (= (type h0@@9) (MapType0Type refType MapType1Type))) (= (type h1@@9) (MapType0Type refType MapType1Type))) (= (type f@@20) HandleTypeType)) (= (type bx0@@5) BoxType)) (= (type bx1@@5) BoxType)) (and (and (and ($HeapSucc h0@@9 h1@@9) (and ($IsGoodHeap h0@@9) ($IsGoodHeap h1@@9))) (and (and ($IsBox bx0@@5 t0@@33) ($IsBox bx1@@5 t1@@9)) ($Is f@@20 (Tclass._System.___hFunc2 t0@@33 t1@@9 t2@@5)))) (forall ((o@@63 T@U) (fld@@8 T@U) ) (! (let ((a@@91 (FieldTypeInv0 (type fld@@8)))) (=> (and (and (= (type o@@63) refType) (= (type fld@@8) (FieldType a@@91))) (and (not (= o@@63 null)) (U_2_bool (MapType0Select (Reads2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5) ($Box o@@63))))) (= (MapType1Select (MapType0Select h0@@9 o@@63) fld@@8) (MapType1Select (MapType0Select h1@@9 o@@63) fld@@8)))) :qid |unknown.0:0| :skolemid |7040| :no-pattern (type o@@63) :no-pattern (type fld@@8) :no-pattern (U_2_int o@@63) :no-pattern (U_2_bool o@@63) :no-pattern (U_2_int fld@@8) :no-pattern (U_2_bool fld@@8) )))) (and (=> (Requires2 t0@@33 t1@@9 t2@@5 h0@@9 f@@20 bx0@@5 bx1@@5) (Requires2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5)) (=> (Requires2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5) (Requires2 t0@@33 t1@@9 t2@@5 h0@@9 f@@20 bx0@@5 bx1@@5)))) :qid |unknown.0:0| :skolemid |7041| :pattern ( ($HeapSucc h0@@9 h1@@9) (Requires2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5)) )))
(assert (forall ((t0@@34 T@U) (t1@@10 T@U) (t2@@6 T@U) (h0@@10 T@U) (h1@@10 T@U) (f@@21 T@U) (bx0@@6 T@U) (bx1@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@34) TyType) (= (type t1@@10) TyType)) (= (type t2@@6) TyType)) (= (type h0@@10) (MapType0Type refType MapType1Type))) (= (type h1@@10) (MapType0Type refType MapType1Type))) (= (type f@@21) HandleTypeType)) (= (type bx0@@6) BoxType)) (= (type bx1@@6) BoxType)) (and (and (and ($HeapSucc h0@@10 h1@@10) (and ($IsGoodHeap h0@@10) ($IsGoodHeap h1@@10))) (and (and ($IsBox bx0@@6 t0@@34) ($IsBox bx1@@6 t1@@10)) ($Is f@@21 (Tclass._System.___hFunc2 t0@@34 t1@@10 t2@@6)))) (forall ((o@@64 T@U) (fld@@9 T@U) ) (! (let ((a@@92 (FieldTypeInv0 (type fld@@9)))) (=> (and (and (= (type o@@64) refType) (= (type fld@@9) (FieldType a@@92))) (and (not (= o@@64 null)) (U_2_bool (MapType0Select (Reads2 t0@@34 t1@@10 t2@@6 h0@@10 f@@21 bx0@@6 bx1@@6) ($Box o@@64))))) (= (MapType1Select (MapType0Select h0@@10 o@@64) fld@@9) (MapType1Select (MapType0Select h1@@10 o@@64) fld@@9)))) :qid |unknown.0:0| :skolemid |7042| :no-pattern (type o@@64) :no-pattern (type fld@@9) :no-pattern (U_2_int o@@64) :no-pattern (U_2_bool o@@64) :no-pattern (U_2_int fld@@9) :no-pattern (U_2_bool fld@@9) )))) (= (Apply2 t0@@34 t1@@10 t2@@6 h0@@10 f@@21 bx0@@6 bx1@@6) (Apply2 t0@@34 t1@@10 t2@@6 h1@@10 f@@21 bx0@@6 bx1@@6))) :qid |unknown.0:0| :skolemid |7043| :pattern ( ($HeapSucc h0@@10 h1@@10) (Apply2 t0@@34 t1@@10 t2@@6 h1@@10 f@@21 bx0@@6 bx1@@6)) )))
(assert (forall ((t0@@35 T@U) (t1@@11 T@U) (t2@@7 T@U) (h0@@11 T@U) (h1@@11 T@U) (f@@22 T@U) (bx0@@7 T@U) (bx1@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@35) TyType) (= (type t1@@11) TyType)) (= (type t2@@7) TyType)) (= (type h0@@11) (MapType0Type refType MapType1Type))) (= (type h1@@11) (MapType0Type refType MapType1Type))) (= (type f@@22) HandleTypeType)) (= (type bx0@@7) BoxType)) (= (type bx1@@7) BoxType)) (and (and (and ($HeapSucc h0@@11 h1@@11) (and ($IsGoodHeap h0@@11) ($IsGoodHeap h1@@11))) (and (and ($IsBox bx0@@7 t0@@35) ($IsBox bx1@@7 t1@@11)) ($Is f@@22 (Tclass._System.___hFunc2 t0@@35 t1@@11 t2@@7)))) (forall ((o@@65 T@U) (fld@@10 T@U) ) (! (let ((a@@93 (FieldTypeInv0 (type fld@@10)))) (=> (and (and (= (type o@@65) refType) (= (type fld@@10) (FieldType a@@93))) (and (not (= o@@65 null)) (U_2_bool (MapType0Select (Reads2 t0@@35 t1@@11 t2@@7 h1@@11 f@@22 bx0@@7 bx1@@7) ($Box o@@65))))) (= (MapType1Select (MapType0Select h0@@11 o@@65) fld@@10) (MapType1Select (MapType0Select h1@@11 o@@65) fld@@10)))) :qid |unknown.0:0| :skolemid |7044| :no-pattern (type o@@65) :no-pattern (type fld@@10) :no-pattern (U_2_int o@@65) :no-pattern (U_2_bool o@@65) :no-pattern (U_2_int fld@@10) :no-pattern (U_2_bool fld@@10) )))) (= (Apply2 t0@@35 t1@@11 t2@@7 h0@@11 f@@22 bx0@@7 bx1@@7) (Apply2 t0@@35 t1@@11 t2@@7 h1@@11 f@@22 bx0@@7 bx1@@7))) :qid |unknown.0:0| :skolemid |7045| :pattern ( ($HeapSucc h0@@11 h1@@11) (Apply2 t0@@35 t1@@11 t2@@7 h1@@11 f@@22 bx0@@7 bx1@@7)) )))
(assert (forall ((t0@@36 T@U) (t1@@12 T@U) (t2@@8 T@U) (heap@@9 T@U) (f@@23 T@U) (bx0@@8 T@U) (bx1@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@36) TyType) (= (type t1@@12) TyType)) (= (type t2@@8) TyType)) (= (type heap@@9) (MapType0Type refType MapType1Type))) (= (type f@@23) HandleTypeType)) (= (type bx0@@8) BoxType)) (= (type bx1@@8) BoxType)) (and ($IsGoodHeap heap@@9) (and (and ($IsBox bx0@@8 t0@@36) ($IsBox bx1@@8 t1@@12)) ($Is f@@23 (Tclass._System.___hFunc2 t0@@36 t1@@12 t2@@8))))) (and (=> (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 $OneHeap f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 heap@@9 f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 heap@@9 f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 $OneHeap f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |7046| :pattern ( (Reads2 t0@@36 t1@@12 t2@@8 $OneHeap f@@23 bx0@@8 bx1@@8) ($IsGoodHeap heap@@9)) :pattern ( (Reads2 t0@@36 t1@@12 t2@@8 heap@@9 f@@23 bx0@@8 bx1@@8)) )))
(assert (forall ((t0@@37 T@U) (t1@@13 T@U) (t2@@9 T@U) (heap@@10 T@U) (f@@24 T@U) (bx0@@9 T@U) (bx1@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@37) TyType) (= (type t1@@13) TyType)) (= (type t2@@9) TyType)) (= (type heap@@10) (MapType0Type refType MapType1Type))) (= (type f@@24) HandleTypeType)) (= (type bx0@@9) BoxType)) (= (type bx1@@9) BoxType)) (and (and ($IsGoodHeap heap@@10) (and (and ($IsBox bx0@@9 t0@@37) ($IsBox bx1@@9 t1@@13)) ($Is f@@24 (Tclass._System.___hFunc2 t0@@37 t1@@13 t2@@9)))) (|Set#Equal| (Reads2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9) (|Set#Empty| BoxType)))) (and (=> (Requires2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9) (Requires2 t0@@37 t1@@13 t2@@9 heap@@10 f@@24 bx0@@9 bx1@@9)) (=> (Requires2 t0@@37 t1@@13 t2@@9 heap@@10 f@@24 bx0@@9 bx1@@9) (Requires2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9)))) :qid |unknown.0:0| :skolemid |7047| :pattern ( (Requires2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9) ($IsGoodHeap heap@@10)) :pattern ( (Requires2 t0@@37 t1@@13 t2@@9 heap@@10 f@@24 bx0@@9 bx1@@9)) )))
(assert (forall ((f@@25 T@U) (t0@@38 T@U) (t1@@14 T@U) (t2@@10 T@U) ) (!  (=> (and (and (and (= (type f@@25) HandleTypeType) (= (type t0@@38) TyType)) (= (type t1@@14) TyType)) (= (type t2@@10) TyType)) (and (=> ($Is f@@25 (Tclass._System.___hFunc2 t0@@38 t1@@14 t2@@10)) (forall ((h@@30 T@U) (bx0@@10 T@U) (bx1@@10 T@U) ) (!  (=> (and (and (and (= (type h@@30) (MapType0Type refType MapType1Type)) (= (type bx0@@10) BoxType)) (= (type bx1@@10) BoxType)) (and (and ($IsGoodHeap h@@30) (and ($IsBox bx0@@10 t0@@38) ($IsBox bx1@@10 t1@@14))) (Requires2 t0@@38 t1@@14 t2@@10 h@@30 f@@25 bx0@@10 bx1@@10))) ($IsBox (Apply2 t0@@38 t1@@14 t2@@10 h@@30 f@@25 bx0@@10 bx1@@10) t2@@10)) :qid |DafnyPre.521:12| :skolemid |7048| :pattern ( (Apply2 t0@@38 t1@@14 t2@@10 h@@30 f@@25 bx0@@10 bx1@@10)) ))) (=> (forall ((h@@31 T@U) (bx0@@11 T@U) (bx1@@11 T@U) ) (!  (=> (and (and (and (= (type h@@31) (MapType0Type refType MapType1Type)) (= (type bx0@@11) BoxType)) (= (type bx1@@11) BoxType)) (and (and ($IsGoodHeap h@@31) (and ($IsBox bx0@@11 t0@@38) ($IsBox bx1@@11 t1@@14))) (Requires2 t0@@38 t1@@14 t2@@10 h@@31 f@@25 bx0@@11 bx1@@11))) ($IsBox (Apply2 t0@@38 t1@@14 t2@@10 h@@31 f@@25 bx0@@11 bx1@@11) t2@@10)) :qid |DafnyPre.521:12| :skolemid |7048| :pattern ( (Apply2 t0@@38 t1@@14 t2@@10 h@@31 f@@25 bx0@@11 bx1@@11)) )) ($Is f@@25 (Tclass._System.___hFunc2 t0@@38 t1@@14 t2@@10))))) :qid |unknown.0:0| :skolemid |7049| :pattern ( ($Is f@@25 (Tclass._System.___hFunc2 t0@@38 t1@@14 t2@@10))) )))
(assert (forall ((f@@26 T@U) (t0@@39 T@U) (t1@@15 T@U) (t2@@11 T@U) (u0@@0 T@U) (u1 T@U) (u2 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@26) HandleTypeType) (= (type t0@@39) TyType)) (= (type t1@@15) TyType)) (= (type t2@@11) TyType)) (= (type u0@@0) TyType)) (= (type u1) TyType)) (= (type u2) TyType)) (and (and (and ($Is f@@26 (Tclass._System.___hFunc2 t0@@39 t1@@15 t2@@11)) (forall ((bx@@47 T@U) ) (!  (=> (and (= (type bx@@47) BoxType) ($IsBox bx@@47 u0@@0)) ($IsBox bx@@47 t0@@39)) :qid |unknown.0:0| :skolemid |7050| :pattern ( ($IsBox bx@@47 u0@@0)) :pattern ( ($IsBox bx@@47 t0@@39)) ))) (forall ((bx@@48 T@U) ) (!  (=> (and (= (type bx@@48) BoxType) ($IsBox bx@@48 u1)) ($IsBox bx@@48 t1@@15)) :qid |unknown.0:0| :skolemid |7051| :pattern ( ($IsBox bx@@48 u1)) :pattern ( ($IsBox bx@@48 t1@@15)) ))) (forall ((bx@@49 T@U) ) (!  (=> (and (= (type bx@@49) BoxType) ($IsBox bx@@49 t2@@11)) ($IsBox bx@@49 u2)) :qid |unknown.0:0| :skolemid |7052| :pattern ( ($IsBox bx@@49 t2@@11)) :pattern ( ($IsBox bx@@49 u2)) )))) ($Is f@@26 (Tclass._System.___hFunc2 u0@@0 u1 u2))) :qid |unknown.0:0| :skolemid |7053| :pattern ( ($Is f@@26 (Tclass._System.___hFunc2 t0@@39 t1@@15 t2@@11)) ($Is f@@26 (Tclass._System.___hFunc2 u0@@0 u1 u2))) )))
(assert (forall ((f@@27 T@U) (t0@@40 T@U) (t1@@16 T@U) (t2@@12 T@U) (h@@32 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@27) HandleTypeType) (= (type t0@@40) TyType)) (= (type t1@@16) TyType)) (= (type t2@@12) TyType)) (= (type h@@32) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@32)) (and (=> ($IsAlloc f@@27 (Tclass._System.___hFunc2 t0@@40 t1@@16 t2@@12) h@@32) (forall ((bx0@@12 T@U) (bx1@@12 T@U) ) (!  (=> (and (= (type bx0@@12) BoxType) (= (type bx1@@12) BoxType)) (=> (and (and (and ($IsBox bx0@@12 t0@@40) ($IsAllocBox bx0@@12 t0@@40 h@@32)) (and ($IsBox bx1@@12 t1@@16) ($IsAllocBox bx1@@12 t1@@16 h@@32))) (Requires2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12)) (forall ((r@@14 T@U) ) (!  (=> (= (type r@@14) refType) (=> (and (not (= r@@14 null)) (U_2_bool (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12) ($Box r@@14)))) (U_2_bool (MapType1Select (MapType0Select h@@32 r@@14) alloc)))) :qid |unknown.0:0| :skolemid |7054| :pattern ( (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12) ($Box r@@14))) )))) :qid |unknown.0:0| :skolemid |7055| :pattern ( (Apply2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12)) :pattern ( (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12)) ))) (=> (forall ((bx0@@13 T@U) (bx1@@13 T@U) ) (!  (=> (and (= (type bx0@@13) BoxType) (= (type bx1@@13) BoxType)) (=> (and (and (and ($IsBox bx0@@13 t0@@40) ($IsAllocBox bx0@@13 t0@@40 h@@32)) (and ($IsBox bx1@@13 t1@@16) ($IsAllocBox bx1@@13 t1@@16 h@@32))) (Requires2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13)) (forall ((r@@15 T@U) ) (!  (=> (= (type r@@15) refType) (=> (and (not (= r@@15 null)) (U_2_bool (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13) ($Box r@@15)))) (U_2_bool (MapType1Select (MapType0Select h@@32 r@@15) alloc)))) :qid |unknown.0:0| :skolemid |7054| :pattern ( (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13) ($Box r@@15))) )))) :qid |unknown.0:0| :skolemid |7055| :pattern ( (Apply2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13)) :pattern ( (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13)) )) ($IsAlloc f@@27 (Tclass._System.___hFunc2 t0@@40 t1@@16 t2@@12) h@@32)))) :qid |unknown.0:0| :skolemid |7056| :pattern ( ($IsAlloc f@@27 (Tclass._System.___hFunc2 t0@@40 t1@@16 t2@@12) h@@32)) )))
(assert (forall ((f@@28 T@U) (t0@@41 T@U) (t1@@17 T@U) (t2@@13 T@U) (h@@33 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@28) HandleTypeType) (= (type t0@@41) TyType)) (= (type t1@@17) TyType)) (= (type t2@@13) TyType)) (= (type h@@33) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@33) ($IsAlloc f@@28 (Tclass._System.___hFunc2 t0@@41 t1@@17 t2@@13) h@@33))) (forall ((bx0@@14 T@U) (bx1@@14 T@U) ) (!  (=> (and (= (type bx0@@14) BoxType) (= (type bx1@@14) BoxType)) (=> (and (and ($IsAllocBox bx0@@14 t0@@41 h@@33) ($IsAllocBox bx1@@14 t1@@17 h@@33)) (Requires2 t0@@41 t1@@17 t2@@13 h@@33 f@@28 bx0@@14 bx1@@14)) ($IsAllocBox (Apply2 t0@@41 t1@@17 t2@@13 h@@33 f@@28 bx0@@14 bx1@@14) t2@@13 h@@33))) :qid |unknown.0:0| :skolemid |7057| :pattern ( (Apply2 t0@@41 t1@@17 t2@@13 h@@33 f@@28 bx0@@14 bx1@@14)) ))) :qid |unknown.0:0| :skolemid |7058| :pattern ( ($IsAlloc f@@28 (Tclass._System.___hFunc2 t0@@41 t1@@17 t2@@13) h@@33)) )))
(assert (forall ((arg0@@131 T@U) (arg1@@61 T@U) (arg2@@22 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2 arg0@@131 arg1@@61 arg2@@22)) TyType) :qid |funType:Tclass._System.___hPartialFunc2| :pattern ( (Tclass._System.___hPartialFunc2 arg0@@131 arg1@@61 arg2@@22)) )))
(assert (forall ((|#$T0@@4| T@U) (|#$T1@@4| T@U) (|#$R@@17| T@U) ) (!  (=> (and (and (= (type |#$T0@@4|) TyType) (= (type |#$T1@@4|) TyType)) (= (type |#$R@@17|) TyType)) (= (Tag (Tclass._System.___hPartialFunc2 |#$T0@@4| |#$T1@@4| |#$R@@17|)) Tagclass._System.___hPartialFunc2)) :qid |unknown.0:0| :skolemid |7059| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@4| |#$T1@@4| |#$R@@17|)) )))
(assert (forall ((arg0@@132 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_0 arg0@@132)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_0| :pattern ( (Tclass._System.___hPartialFunc2_0 arg0@@132)) )))
(assert (forall ((|#$T0@@5| T@U) (|#$T1@@5| T@U) (|#$R@@18| T@U) ) (!  (=> (and (and (= (type |#$T0@@5|) TyType) (= (type |#$T1@@5|) TyType)) (= (type |#$R@@18|) TyType)) (= (Tclass._System.___hPartialFunc2_0 (Tclass._System.___hPartialFunc2 |#$T0@@5| |#$T1@@5| |#$R@@18|)) |#$T0@@5|)) :qid |unknown.0:0| :skolemid |7060| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@5| |#$T1@@5| |#$R@@18|)) )))
(assert (forall ((arg0@@133 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_1 arg0@@133)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_1| :pattern ( (Tclass._System.___hPartialFunc2_1 arg0@@133)) )))
(assert (forall ((|#$T0@@6| T@U) (|#$T1@@6| T@U) (|#$R@@19| T@U) ) (!  (=> (and (and (= (type |#$T0@@6|) TyType) (= (type |#$T1@@6|) TyType)) (= (type |#$R@@19|) TyType)) (= (Tclass._System.___hPartialFunc2_1 (Tclass._System.___hPartialFunc2 |#$T0@@6| |#$T1@@6| |#$R@@19|)) |#$T1@@6|)) :qid |unknown.0:0| :skolemid |7061| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@6| |#$T1@@6| |#$R@@19|)) )))
(assert (forall ((arg0@@134 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_2 arg0@@134)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_2| :pattern ( (Tclass._System.___hPartialFunc2_2 arg0@@134)) )))
(assert (forall ((|#$T0@@7| T@U) (|#$T1@@7| T@U) (|#$R@@20| T@U) ) (!  (=> (and (and (= (type |#$T0@@7|) TyType) (= (type |#$T1@@7|) TyType)) (= (type |#$R@@20|) TyType)) (= (Tclass._System.___hPartialFunc2_2 (Tclass._System.___hPartialFunc2 |#$T0@@7| |#$T1@@7| |#$R@@20|)) |#$R@@20|)) :qid |unknown.0:0| :skolemid |7062| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@7| |#$T1@@7| |#$R@@20|)) )))
(assert (forall ((|#$T0@@8| T@U) (|#$T1@@8| T@U) (|#$R@@21| T@U) (bx@@50 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@8|) TyType) (= (type |#$T1@@8|) TyType)) (= (type |#$R@@21|) TyType)) (= (type bx@@50) BoxType)) ($IsBox bx@@50 (Tclass._System.___hPartialFunc2 |#$T0@@8| |#$T1@@8| |#$R@@21|))) (and (= ($Box ($Unbox HandleTypeType bx@@50)) bx@@50) ($Is ($Unbox HandleTypeType bx@@50) (Tclass._System.___hPartialFunc2 |#$T0@@8| |#$T1@@8| |#$R@@21|)))) :qid |unknown.0:0| :skolemid |7063| :pattern ( ($IsBox bx@@50 (Tclass._System.___hPartialFunc2 |#$T0@@8| |#$T1@@8| |#$R@@21|))) )))
(assert (forall ((|#$T0@@9| T@U) (|#$T1@@9| T@U) (|#$R@@22| T@U) (|f#0@@3| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@9|) TyType) (= (type |#$T1@@9|) TyType)) (= (type |#$R@@22|) TyType)) (= (type |f#0@@3|) HandleTypeType)) (and (=> ($Is |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|)) (and ($Is |f#0@@3| (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|)) (forall ((|x0#0| T@U) (|x1#0| T@U) ) (!  (=> (and (and (= (type |x0#0|) BoxType) (= (type |x1#0|) BoxType)) (and ($IsBox |x0#0| |#$T0@@9|) ($IsBox |x1#0| |#$T1@@9|))) (|Set#Equal| (Reads2 |#$T0@@9| |#$T1@@9| |#$R@@22| $OneHeap |f#0@@3| |x0#0| |x1#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |7064| :no-pattern (type |x0#0|) :no-pattern (type |x1#0|) :no-pattern (U_2_int |x0#0|) :no-pattern (U_2_bool |x0#0|) :no-pattern (U_2_int |x1#0|) :no-pattern (U_2_bool |x1#0|) )))) (=> (and ($Is |f#0@@3| (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|)) (forall ((|x0#0@@0| T@U) (|x1#0@@0| T@U) ) (!  (=> (and (and (= (type |x0#0@@0|) BoxType) (= (type |x1#0@@0|) BoxType)) (and ($IsBox |x0#0@@0| |#$T0@@9|) ($IsBox |x1#0@@0| |#$T1@@9|))) (|Set#Equal| (Reads2 |#$T0@@9| |#$T1@@9| |#$R@@22| $OneHeap |f#0@@3| |x0#0@@0| |x1#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |7064| :no-pattern (type |x0#0@@0|) :no-pattern (type |x1#0@@0|) :no-pattern (U_2_int |x0#0@@0|) :no-pattern (U_2_bool |x0#0@@0|) :no-pattern (U_2_int |x1#0@@0|) :no-pattern (U_2_bool |x1#0@@0|) ))) ($Is |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|))))) :qid |unknown.0:0| :skolemid |7065| :pattern ( ($Is |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|))) )))
(assert (forall ((|#$T0@@10| T@U) (|#$T1@@10| T@U) (|#$R@@23| T@U) (|f#0@@4| T@U) ($h@@10 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@10|) TyType) (= (type |#$T1@@10|) TyType)) (= (type |#$R@@23|) TyType)) (= (type |f#0@@4|) HandleTypeType)) (= (type $h@@10) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10) ($IsAlloc |f#0@@4| (Tclass._System.___hFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10)) (=> ($IsAlloc |f#0@@4| (Tclass._System.___hFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10) ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10)))) :qid |unknown.0:0| :skolemid |7066| :pattern ( ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10)) )))
(assert (forall ((arg0@@135 T@U) (arg1@@62 T@U) (arg2@@23 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2 arg0@@135 arg1@@62 arg2@@23)) TyType) :qid |funType:Tclass._System.___hTotalFunc2| :pattern ( (Tclass._System.___hTotalFunc2 arg0@@135 arg1@@62 arg2@@23)) )))
(assert (forall ((|#$T0@@11| T@U) (|#$T1@@11| T@U) (|#$R@@24| T@U) ) (!  (=> (and (and (= (type |#$T0@@11|) TyType) (= (type |#$T1@@11|) TyType)) (= (type |#$R@@24|) TyType)) (= (Tag (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@24|)) Tagclass._System.___hTotalFunc2)) :qid |unknown.0:0| :skolemid |7067| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@24|)) )))
(assert (forall ((arg0@@136 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_0 arg0@@136)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_0| :pattern ( (Tclass._System.___hTotalFunc2_0 arg0@@136)) )))
(assert (forall ((|#$T0@@12| T@U) (|#$T1@@12| T@U) (|#$R@@25| T@U) ) (!  (=> (and (and (= (type |#$T0@@12|) TyType) (= (type |#$T1@@12|) TyType)) (= (type |#$R@@25|) TyType)) (= (Tclass._System.___hTotalFunc2_0 (Tclass._System.___hTotalFunc2 |#$T0@@12| |#$T1@@12| |#$R@@25|)) |#$T0@@12|)) :qid |unknown.0:0| :skolemid |7068| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@12| |#$T1@@12| |#$R@@25|)) )))
(assert (forall ((arg0@@137 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_1 arg0@@137)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_1| :pattern ( (Tclass._System.___hTotalFunc2_1 arg0@@137)) )))
(assert (forall ((|#$T0@@13| T@U) (|#$T1@@13| T@U) (|#$R@@26| T@U) ) (!  (=> (and (and (= (type |#$T0@@13|) TyType) (= (type |#$T1@@13|) TyType)) (= (type |#$R@@26|) TyType)) (= (Tclass._System.___hTotalFunc2_1 (Tclass._System.___hTotalFunc2 |#$T0@@13| |#$T1@@13| |#$R@@26|)) |#$T1@@13|)) :qid |unknown.0:0| :skolemid |7069| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@13| |#$T1@@13| |#$R@@26|)) )))
(assert (forall ((arg0@@138 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_2 arg0@@138)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_2| :pattern ( (Tclass._System.___hTotalFunc2_2 arg0@@138)) )))
(assert (forall ((|#$T0@@14| T@U) (|#$T1@@14| T@U) (|#$R@@27| T@U) ) (!  (=> (and (and (= (type |#$T0@@14|) TyType) (= (type |#$T1@@14|) TyType)) (= (type |#$R@@27|) TyType)) (= (Tclass._System.___hTotalFunc2_2 (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@27|)) |#$R@@27|)) :qid |unknown.0:0| :skolemid |7070| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@27|)) )))
(assert (forall ((|#$T0@@15| T@U) (|#$T1@@15| T@U) (|#$R@@28| T@U) (bx@@51 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@15|) TyType) (= (type |#$T1@@15|) TyType)) (= (type |#$R@@28|) TyType)) (= (type bx@@51) BoxType)) ($IsBox bx@@51 (Tclass._System.___hTotalFunc2 |#$T0@@15| |#$T1@@15| |#$R@@28|))) (and (= ($Box ($Unbox HandleTypeType bx@@51)) bx@@51) ($Is ($Unbox HandleTypeType bx@@51) (Tclass._System.___hTotalFunc2 |#$T0@@15| |#$T1@@15| |#$R@@28|)))) :qid |unknown.0:0| :skolemid |7071| :pattern ( ($IsBox bx@@51 (Tclass._System.___hTotalFunc2 |#$T0@@15| |#$T1@@15| |#$R@@28|))) )))
(assert (forall ((|#$T0@@16| T@U) (|#$T1@@16| T@U) (|#$R@@29| T@U) (|f#0@@5| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@16|) TyType) (= (type |#$T1@@16|) TyType)) (= (type |#$R@@29|) TyType)) (= (type |f#0@@5|) HandleTypeType)) (and (=> ($Is |f#0@@5| (Tclass._System.___hTotalFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|)) (and ($Is |f#0@@5| (Tclass._System.___hPartialFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|)) (forall ((|x0#0@@1| T@U) (|x1#0@@1| T@U) ) (!  (=> (and (and (= (type |x0#0@@1|) BoxType) (= (type |x1#0@@1|) BoxType)) (and ($IsBox |x0#0@@1| |#$T0@@16|) ($IsBox |x1#0@@1| |#$T1@@16|))) (Requires2 |#$T0@@16| |#$T1@@16| |#$R@@29| $OneHeap |f#0@@5| |x0#0@@1| |x1#0@@1|)) :qid |unknown.0:0| :skolemid |7072| :no-pattern (type |x0#0@@1|) :no-pattern (type |x1#0@@1|) :no-pattern (U_2_int |x0#0@@1|) :no-pattern (U_2_bool |x0#0@@1|) :no-pattern (U_2_int |x1#0@@1|) :no-pattern (U_2_bool |x1#0@@1|) )))) (=> (and ($Is |f#0@@5| (Tclass._System.___hPartialFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|)) (forall ((|x0#0@@2| T@U) (|x1#0@@2| T@U) ) (!  (=> (and (and (= (type |x0#0@@2|) BoxType) (= (type |x1#0@@2|) BoxType)) (and ($IsBox |x0#0@@2| |#$T0@@16|) ($IsBox |x1#0@@2| |#$T1@@16|))) (Requires2 |#$T0@@16| |#$T1@@16| |#$R@@29| $OneHeap |f#0@@5| |x0#0@@2| |x1#0@@2|)) :qid |unknown.0:0| :skolemid |7072| :no-pattern (type |x0#0@@2|) :no-pattern (type |x1#0@@2|) :no-pattern (U_2_int |x0#0@@2|) :no-pattern (U_2_bool |x0#0@@2|) :no-pattern (U_2_int |x1#0@@2|) :no-pattern (U_2_bool |x1#0@@2|) ))) ($Is |f#0@@5| (Tclass._System.___hTotalFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|))))) :qid |unknown.0:0| :skolemid |7073| :pattern ( ($Is |f#0@@5| (Tclass._System.___hTotalFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|))) )))
(assert (forall ((|#$T0@@17| T@U) (|#$T1@@17| T@U) (|#$R@@30| T@U) (|f#0@@6| T@U) ($h@@11 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@17|) TyType) (= (type |#$T1@@17|) TyType)) (= (type |#$R@@30|) TyType)) (= (type |f#0@@6|) HandleTypeType)) (= (type $h@@11) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11) ($IsAlloc |f#0@@6| (Tclass._System.___hPartialFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11)) (=> ($IsAlloc |f#0@@6| (Tclass._System.___hPartialFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11) ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11)))) :qid |unknown.0:0| :skolemid |7074| :pattern ( ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11)) )))
(assert (forall ((arg0@@139 T@U) (arg1@@63 T@U) ) (! (= (type (Tclass._System.___hFunc1 arg0@@139 arg1@@63)) TyType) :qid |funType:Tclass._System.___hFunc1| :pattern ( (Tclass._System.___hFunc1 arg0@@139 arg1@@63)) )))
(assert (forall ((|#$T0@@18| T@U) (|#$R@@31| T@U) ) (!  (=> (and (= (type |#$T0@@18|) TyType) (= (type |#$R@@31|) TyType)) (= (Tag (Tclass._System.___hFunc1 |#$T0@@18| |#$R@@31|)) Tagclass._System.___hFunc1)) :qid |unknown.0:0| :skolemid |7075| :pattern ( (Tclass._System.___hFunc1 |#$T0@@18| |#$R@@31|)) )))
(assert (forall ((arg0@@140 T@U) ) (! (= (type (Tclass._System.___hFunc1_0 arg0@@140)) TyType) :qid |funType:Tclass._System.___hFunc1_0| :pattern ( (Tclass._System.___hFunc1_0 arg0@@140)) )))
(assert (forall ((|#$T0@@19| T@U) (|#$R@@32| T@U) ) (!  (=> (and (= (type |#$T0@@19|) TyType) (= (type |#$R@@32|) TyType)) (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@19| |#$R@@32|)) |#$T0@@19|)) :qid |unknown.0:0| :skolemid |7076| :pattern ( (Tclass._System.___hFunc1 |#$T0@@19| |#$R@@32|)) )))
(assert (forall ((arg0@@141 T@U) ) (! (= (type (Tclass._System.___hFunc1_1 arg0@@141)) TyType) :qid |funType:Tclass._System.___hFunc1_1| :pattern ( (Tclass._System.___hFunc1_1 arg0@@141)) )))
(assert (forall ((|#$T0@@20| T@U) (|#$R@@33| T@U) ) (!  (=> (and (= (type |#$T0@@20|) TyType) (= (type |#$R@@33|) TyType)) (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@20| |#$R@@33|)) |#$R@@33|)) :qid |unknown.0:0| :skolemid |7077| :pattern ( (Tclass._System.___hFunc1 |#$T0@@20| |#$R@@33|)) )))
(assert (forall ((|#$T0@@21| T@U) (|#$R@@34| T@U) (bx@@52 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@21|) TyType) (= (type |#$R@@34|) TyType)) (= (type bx@@52) BoxType)) ($IsBox bx@@52 (Tclass._System.___hFunc1 |#$T0@@21| |#$R@@34|))) (and (= ($Box ($Unbox HandleTypeType bx@@52)) bx@@52) ($Is ($Unbox HandleTypeType bx@@52) (Tclass._System.___hFunc1 |#$T0@@21| |#$R@@34|)))) :qid |unknown.0:0| :skolemid |7078| :pattern ( ($IsBox bx@@52 (Tclass._System.___hFunc1 |#$T0@@21| |#$R@@34|))) )))
(assert  (and (and (and (and (and (and (and (and (forall ((arg0@@142 T@T) (arg1@@64 T@T) (arg2@@24 T@T) ) (! (= (Ctor (MapType3Type arg0@@142 arg1@@64 arg2@@24)) 22) :qid |ctor:MapType3Type| )) (forall ((arg0@@143 T@T) (arg1@@65 T@T) (arg2@@25 T@T) ) (! (= (MapType3TypeInv0 (MapType3Type arg0@@143 arg1@@65 arg2@@25)) arg0@@143) :qid |typeInv:MapType3TypeInv0| :pattern ( (MapType3Type arg0@@143 arg1@@65 arg2@@25)) ))) (forall ((arg0@@144 T@T) (arg1@@66 T@T) (arg2@@26 T@T) ) (! (= (MapType3TypeInv1 (MapType3Type arg0@@144 arg1@@66 arg2@@26)) arg1@@66) :qid |typeInv:MapType3TypeInv1| :pattern ( (MapType3Type arg0@@144 arg1@@66 arg2@@26)) ))) (forall ((arg0@@145 T@T) (arg1@@67 T@T) (arg2@@27 T@T) ) (! (= (MapType3TypeInv2 (MapType3Type arg0@@145 arg1@@67 arg2@@27)) arg2@@27) :qid |typeInv:MapType3TypeInv2| :pattern ( (MapType3Type arg0@@145 arg1@@67 arg2@@27)) ))) (forall ((arg0@@146 T@U) (arg1@@68 T@U) (arg2@@28 T@U) ) (! (let ((aVar2@@0 (MapType3TypeInv2 (type arg0@@146)))) (= (type (MapType3Select arg0@@146 arg1@@68 arg2@@28)) aVar2@@0)) :qid |funType:MapType3Select| :pattern ( (MapType3Select arg0@@146 arg1@@68 arg2@@28)) ))) (forall ((arg0@@147 T@U) (arg1@@69 T@U) (arg2@@29 T@U) (arg3@@10 T@U) ) (! (let ((aVar2@@1 (type arg3@@10))) (let ((aVar1@@3 (type arg2@@29))) (let ((aVar0@@1 (type arg1@@69))) (= (type (MapType3Store arg0@@147 arg1@@69 arg2@@29 arg3@@10)) (MapType3Type aVar0@@1 aVar1@@3 aVar2@@1))))) :qid |funType:MapType3Store| :pattern ( (MapType3Store arg0@@147 arg1@@69 arg2@@29 arg3@@10)) ))) (forall ((m@@32 T@U) (x0@@10 T@U) (x1@@4 T@U) (val@@11 T@U) ) (! (let ((aVar2@@2 (MapType3TypeInv2 (type m@@32)))) (=> (= (type val@@11) aVar2@@2) (= (MapType3Select (MapType3Store m@@32 x0@@10 x1@@4 val@@11) x0@@10 x1@@4) val@@11))) :qid |mapAx0:MapType3Select| :weight 0 ))) (and (and (forall ((val@@12 T@U) (m@@33 T@U) (x0@@11 T@U) (x1@@5 T@U) (y0@@7 T@U) (y1@@3 T@U) ) (!  (or (= x0@@11 y0@@7) (= (MapType3Select (MapType3Store m@@33 x0@@11 x1@@5 val@@12) y0@@7 y1@@3) (MapType3Select m@@33 y0@@7 y1@@3))) :qid |mapAx1:MapType3Select:0| :weight 0 )) (forall ((val@@13 T@U) (m@@34 T@U) (x0@@12 T@U) (x1@@6 T@U) (y0@@8 T@U) (y1@@4 T@U) ) (!  (or (= x1@@6 y1@@4) (= (MapType3Select (MapType3Store m@@34 x0@@12 x1@@6 val@@13) y0@@8 y1@@4) (MapType3Select m@@34 y0@@8 y1@@4))) :qid |mapAx1:MapType3Select:1| :weight 0 ))) (forall ((val@@14 T@U) (m@@35 T@U) (x0@@13 T@U) (x1@@7 T@U) (y0@@9 T@U) (y1@@5 T@U) ) (!  (or true (= (MapType3Select (MapType3Store m@@35 x0@@13 x1@@7 val@@14) y0@@9 y1@@5) (MapType3Select m@@35 y0@@9 y1@@5))) :qid |mapAx2:MapType3Select| :weight 0 )))) (forall ((arg0@@148 T@U) (arg1@@70 T@U) (arg2@@30 T@U) ) (! (= (type (Handle1 arg0@@148 arg1@@70 arg2@@30)) HandleTypeType) :qid |funType:Handle1| :pattern ( (Handle1 arg0@@148 arg1@@70 arg2@@30)) ))))
(assert (forall ((t0@@42 T@U) (t1@@18 T@U) (heap@@11 T@U) (h@@34 T@U) (r@@16 T@U) (rd@@5 T@U) (bx0@@15 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@42) TyType) (= (type t1@@18) TyType)) (= (type heap@@11) (MapType0Type refType MapType1Type))) (= (type h@@34) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@16) (MapType3Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@5) (MapType3Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@15) BoxType)) (= (Apply1 t0@@42 t1@@18 heap@@11 (Handle1 h@@34 r@@16 rd@@5) bx0@@15) (MapType3Select h@@34 heap@@11 bx0@@15))) :qid |unknown.0:0| :skolemid |7079| :pattern ( (Apply1 t0@@42 t1@@18 heap@@11 (Handle1 h@@34 r@@16 rd@@5) bx0@@15)) )))
(assert (forall ((t0@@43 T@U) (t1@@19 T@U) (heap@@12 T@U) (h@@35 T@U) (r@@17 T@U) (rd@@6 T@U) (bx0@@16 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@43) TyType) (= (type t1@@19) TyType)) (= (type heap@@12) (MapType0Type refType MapType1Type))) (= (type h@@35) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@17) (MapType3Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@6) (MapType3Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@16) BoxType)) (U_2_bool (MapType3Select r@@17 heap@@12 bx0@@16))) (Requires1 t0@@43 t1@@19 heap@@12 (Handle1 h@@35 r@@17 rd@@6) bx0@@16)) :qid |unknown.0:0| :skolemid |7080| :pattern ( (Requires1 t0@@43 t1@@19 heap@@12 (Handle1 h@@35 r@@17 rd@@6) bx0@@16)) )))
(assert (forall ((arg0@@149 T@U) (arg1@@71 T@U) (arg2@@31 T@U) (arg3@@11 T@U) (arg4@@3 T@U) ) (! (= (type (Reads1 arg0@@149 arg1@@71 arg2@@31 arg3@@11 arg4@@3)) (MapType0Type BoxType boolType)) :qid |funType:Reads1| :pattern ( (Reads1 arg0@@149 arg1@@71 arg2@@31 arg3@@11 arg4@@3)) )))
(assert (forall ((t0@@44 T@U) (t1@@20 T@U) (heap@@13 T@U) (h@@36 T@U) (r@@18 T@U) (rd@@7 T@U) (bx0@@17 T@U) (bx@@53 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@44) TyType) (= (type t1@@20) TyType)) (= (type heap@@13) (MapType0Type refType MapType1Type))) (= (type h@@36) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@18) (MapType3Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@7) (MapType3Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@17) BoxType)) (= (type bx@@53) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads1 t0@@44 t1@@20 heap@@13 (Handle1 h@@36 r@@18 rd@@7) bx0@@17) bx@@53)) (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@13 bx0@@17) bx@@53))) (=> (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@13 bx0@@17) bx@@53)) (U_2_bool (MapType0Select (Reads1 t0@@44 t1@@20 heap@@13 (Handle1 h@@36 r@@18 rd@@7) bx0@@17) bx@@53))))) :qid |unknown.0:0| :skolemid |7081| :pattern ( (MapType0Select (Reads1 t0@@44 t1@@20 heap@@13 (Handle1 h@@36 r@@18 rd@@7) bx0@@17) bx@@53)) )))
(assert (forall ((t0@@45 T@U) (t1@@21 T@U) (h0@@12 T@U) (h1@@12 T@U) (f@@29 T@U) (bx0@@18 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@45) TyType) (= (type t1@@21) TyType)) (= (type h0@@12) (MapType0Type refType MapType1Type))) (= (type h1@@12) (MapType0Type refType MapType1Type))) (= (type f@@29) HandleTypeType)) (= (type bx0@@18) BoxType)) (and (and (and ($HeapSucc h0@@12 h1@@12) (and ($IsGoodHeap h0@@12) ($IsGoodHeap h1@@12))) (and ($IsBox bx0@@18 t0@@45) ($Is f@@29 (Tclass._System.___hFunc1 t0@@45 t1@@21)))) (forall ((o@@66 T@U) (fld@@11 T@U) ) (! (let ((a@@94 (FieldTypeInv0 (type fld@@11)))) (=> (and (and (= (type o@@66) refType) (= (type fld@@11) (FieldType a@@94))) (and (not (= o@@66 null)) (U_2_bool (MapType0Select (Reads1 t0@@45 t1@@21 h0@@12 f@@29 bx0@@18) ($Box o@@66))))) (= (MapType1Select (MapType0Select h0@@12 o@@66) fld@@11) (MapType1Select (MapType0Select h1@@12 o@@66) fld@@11)))) :qid |unknown.0:0| :skolemid |7082| :no-pattern (type o@@66) :no-pattern (type fld@@11) :no-pattern (U_2_int o@@66) :no-pattern (U_2_bool o@@66) :no-pattern (U_2_int fld@@11) :no-pattern (U_2_bool fld@@11) )))) (= (Reads1 t0@@45 t1@@21 h0@@12 f@@29 bx0@@18) (Reads1 t0@@45 t1@@21 h1@@12 f@@29 bx0@@18))) :qid |unknown.0:0| :skolemid |7083| :pattern ( ($HeapSucc h0@@12 h1@@12) (Reads1 t0@@45 t1@@21 h1@@12 f@@29 bx0@@18)) )))
(assert (forall ((t0@@46 T@U) (t1@@22 T@U) (h0@@13 T@U) (h1@@13 T@U) (f@@30 T@U) (bx0@@19 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@46) TyType) (= (type t1@@22) TyType)) (= (type h0@@13) (MapType0Type refType MapType1Type))) (= (type h1@@13) (MapType0Type refType MapType1Type))) (= (type f@@30) HandleTypeType)) (= (type bx0@@19) BoxType)) (and (and (and ($HeapSucc h0@@13 h1@@13) (and ($IsGoodHeap h0@@13) ($IsGoodHeap h1@@13))) (and ($IsBox bx0@@19 t0@@46) ($Is f@@30 (Tclass._System.___hFunc1 t0@@46 t1@@22)))) (forall ((o@@67 T@U) (fld@@12 T@U) ) (! (let ((a@@95 (FieldTypeInv0 (type fld@@12)))) (=> (and (and (= (type o@@67) refType) (= (type fld@@12) (FieldType a@@95))) (and (not (= o@@67 null)) (U_2_bool (MapType0Select (Reads1 t0@@46 t1@@22 h1@@13 f@@30 bx0@@19) ($Box o@@67))))) (= (MapType1Select (MapType0Select h0@@13 o@@67) fld@@12) (MapType1Select (MapType0Select h1@@13 o@@67) fld@@12)))) :qid |unknown.0:0| :skolemid |7084| :no-pattern (type o@@67) :no-pattern (type fld@@12) :no-pattern (U_2_int o@@67) :no-pattern (U_2_bool o@@67) :no-pattern (U_2_int fld@@12) :no-pattern (U_2_bool fld@@12) )))) (= (Reads1 t0@@46 t1@@22 h0@@13 f@@30 bx0@@19) (Reads1 t0@@46 t1@@22 h1@@13 f@@30 bx0@@19))) :qid |unknown.0:0| :skolemid |7085| :pattern ( ($HeapSucc h0@@13 h1@@13) (Reads1 t0@@46 t1@@22 h1@@13 f@@30 bx0@@19)) )))
(assert (forall ((t0@@47 T@U) (t1@@23 T@U) (h0@@14 T@U) (h1@@14 T@U) (f@@31 T@U) (bx0@@20 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@47) TyType) (= (type t1@@23) TyType)) (= (type h0@@14) (MapType0Type refType MapType1Type))) (= (type h1@@14) (MapType0Type refType MapType1Type))) (= (type f@@31) HandleTypeType)) (= (type bx0@@20) BoxType)) (and (and (and ($HeapSucc h0@@14 h1@@14) (and ($IsGoodHeap h0@@14) ($IsGoodHeap h1@@14))) (and ($IsBox bx0@@20 t0@@47) ($Is f@@31 (Tclass._System.___hFunc1 t0@@47 t1@@23)))) (forall ((o@@68 T@U) (fld@@13 T@U) ) (! (let ((a@@96 (FieldTypeInv0 (type fld@@13)))) (=> (and (and (= (type o@@68) refType) (= (type fld@@13) (FieldType a@@96))) (and (not (= o@@68 null)) (U_2_bool (MapType0Select (Reads1 t0@@47 t1@@23 h0@@14 f@@31 bx0@@20) ($Box o@@68))))) (= (MapType1Select (MapType0Select h0@@14 o@@68) fld@@13) (MapType1Select (MapType0Select h1@@14 o@@68) fld@@13)))) :qid |unknown.0:0| :skolemid |7086| :no-pattern (type o@@68) :no-pattern (type fld@@13) :no-pattern (U_2_int o@@68) :no-pattern (U_2_bool o@@68) :no-pattern (U_2_int fld@@13) :no-pattern (U_2_bool fld@@13) )))) (and (=> (Requires1 t0@@47 t1@@23 h0@@14 f@@31 bx0@@20) (Requires1 t0@@47 t1@@23 h1@@14 f@@31 bx0@@20)) (=> (Requires1 t0@@47 t1@@23 h1@@14 f@@31 bx0@@20) (Requires1 t0@@47 t1@@23 h0@@14 f@@31 bx0@@20)))) :qid |unknown.0:0| :skolemid |7087| :pattern ( ($HeapSucc h0@@14 h1@@14) (Requires1 t0@@47 t1@@23 h1@@14 f@@31 bx0@@20)) )))
(assert (forall ((t0@@48 T@U) (t1@@24 T@U) (h0@@15 T@U) (h1@@15 T@U) (f@@32 T@U) (bx0@@21 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@48) TyType) (= (type t1@@24) TyType)) (= (type h0@@15) (MapType0Type refType MapType1Type))) (= (type h1@@15) (MapType0Type refType MapType1Type))) (= (type f@@32) HandleTypeType)) (= (type bx0@@21) BoxType)) (and (and (and ($HeapSucc h0@@15 h1@@15) (and ($IsGoodHeap h0@@15) ($IsGoodHeap h1@@15))) (and ($IsBox bx0@@21 t0@@48) ($Is f@@32 (Tclass._System.___hFunc1 t0@@48 t1@@24)))) (forall ((o@@69 T@U) (fld@@14 T@U) ) (! (let ((a@@97 (FieldTypeInv0 (type fld@@14)))) (=> (and (and (= (type o@@69) refType) (= (type fld@@14) (FieldType a@@97))) (and (not (= o@@69 null)) (U_2_bool (MapType0Select (Reads1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21) ($Box o@@69))))) (= (MapType1Select (MapType0Select h0@@15 o@@69) fld@@14) (MapType1Select (MapType0Select h1@@15 o@@69) fld@@14)))) :qid |unknown.0:0| :skolemid |7088| :no-pattern (type o@@69) :no-pattern (type fld@@14) :no-pattern (U_2_int o@@69) :no-pattern (U_2_bool o@@69) :no-pattern (U_2_int fld@@14) :no-pattern (U_2_bool fld@@14) )))) (and (=> (Requires1 t0@@48 t1@@24 h0@@15 f@@32 bx0@@21) (Requires1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21)) (=> (Requires1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21) (Requires1 t0@@48 t1@@24 h0@@15 f@@32 bx0@@21)))) :qid |unknown.0:0| :skolemid |7089| :pattern ( ($HeapSucc h0@@15 h1@@15) (Requires1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21)) )))
(assert (forall ((t0@@49 T@U) (t1@@25 T@U) (h0@@16 T@U) (h1@@16 T@U) (f@@33 T@U) (bx0@@22 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@49) TyType) (= (type t1@@25) TyType)) (= (type h0@@16) (MapType0Type refType MapType1Type))) (= (type h1@@16) (MapType0Type refType MapType1Type))) (= (type f@@33) HandleTypeType)) (= (type bx0@@22) BoxType)) (and (and (and ($HeapSucc h0@@16 h1@@16) (and ($IsGoodHeap h0@@16) ($IsGoodHeap h1@@16))) (and ($IsBox bx0@@22 t0@@49) ($Is f@@33 (Tclass._System.___hFunc1 t0@@49 t1@@25)))) (forall ((o@@70 T@U) (fld@@15 T@U) ) (! (let ((a@@98 (FieldTypeInv0 (type fld@@15)))) (=> (and (and (= (type o@@70) refType) (= (type fld@@15) (FieldType a@@98))) (and (not (= o@@70 null)) (U_2_bool (MapType0Select (Reads1 t0@@49 t1@@25 h0@@16 f@@33 bx0@@22) ($Box o@@70))))) (= (MapType1Select (MapType0Select h0@@16 o@@70) fld@@15) (MapType1Select (MapType0Select h1@@16 o@@70) fld@@15)))) :qid |unknown.0:0| :skolemid |7090| :no-pattern (type o@@70) :no-pattern (type fld@@15) :no-pattern (U_2_int o@@70) :no-pattern (U_2_bool o@@70) :no-pattern (U_2_int fld@@15) :no-pattern (U_2_bool fld@@15) )))) (= (Apply1 t0@@49 t1@@25 h0@@16 f@@33 bx0@@22) (Apply1 t0@@49 t1@@25 h1@@16 f@@33 bx0@@22))) :qid |unknown.0:0| :skolemid |7091| :pattern ( ($HeapSucc h0@@16 h1@@16) (Apply1 t0@@49 t1@@25 h1@@16 f@@33 bx0@@22)) )))
(assert (forall ((t0@@50 T@U) (t1@@26 T@U) (h0@@17 T@U) (h1@@17 T@U) (f@@34 T@U) (bx0@@23 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@50) TyType) (= (type t1@@26) TyType)) (= (type h0@@17) (MapType0Type refType MapType1Type))) (= (type h1@@17) (MapType0Type refType MapType1Type))) (= (type f@@34) HandleTypeType)) (= (type bx0@@23) BoxType)) (and (and (and ($HeapSucc h0@@17 h1@@17) (and ($IsGoodHeap h0@@17) ($IsGoodHeap h1@@17))) (and ($IsBox bx0@@23 t0@@50) ($Is f@@34 (Tclass._System.___hFunc1 t0@@50 t1@@26)))) (forall ((o@@71 T@U) (fld@@16 T@U) ) (! (let ((a@@99 (FieldTypeInv0 (type fld@@16)))) (=> (and (and (= (type o@@71) refType) (= (type fld@@16) (FieldType a@@99))) (and (not (= o@@71 null)) (U_2_bool (MapType0Select (Reads1 t0@@50 t1@@26 h1@@17 f@@34 bx0@@23) ($Box o@@71))))) (= (MapType1Select (MapType0Select h0@@17 o@@71) fld@@16) (MapType1Select (MapType0Select h1@@17 o@@71) fld@@16)))) :qid |unknown.0:0| :skolemid |7092| :no-pattern (type o@@71) :no-pattern (type fld@@16) :no-pattern (U_2_int o@@71) :no-pattern (U_2_bool o@@71) :no-pattern (U_2_int fld@@16) :no-pattern (U_2_bool fld@@16) )))) (= (Apply1 t0@@50 t1@@26 h0@@17 f@@34 bx0@@23) (Apply1 t0@@50 t1@@26 h1@@17 f@@34 bx0@@23))) :qid |unknown.0:0| :skolemid |7093| :pattern ( ($HeapSucc h0@@17 h1@@17) (Apply1 t0@@50 t1@@26 h1@@17 f@@34 bx0@@23)) )))
(assert (forall ((t0@@51 T@U) (t1@@27 T@U) (heap@@14 T@U) (f@@35 T@U) (bx0@@24 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@51) TyType) (= (type t1@@27) TyType)) (= (type heap@@14) (MapType0Type refType MapType1Type))) (= (type f@@35) HandleTypeType)) (= (type bx0@@24) BoxType)) (and ($IsGoodHeap heap@@14) (and ($IsBox bx0@@24 t0@@51) ($Is f@@35 (Tclass._System.___hFunc1 t0@@51 t1@@27))))) (and (=> (|Set#Equal| (Reads1 t0@@51 t1@@27 $OneHeap f@@35 bx0@@24) (|Set#Empty| BoxType)) (|Set#Equal| (Reads1 t0@@51 t1@@27 heap@@14 f@@35 bx0@@24) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads1 t0@@51 t1@@27 heap@@14 f@@35 bx0@@24) (|Set#Empty| BoxType)) (|Set#Equal| (Reads1 t0@@51 t1@@27 $OneHeap f@@35 bx0@@24) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |7094| :pattern ( (Reads1 t0@@51 t1@@27 $OneHeap f@@35 bx0@@24) ($IsGoodHeap heap@@14)) :pattern ( (Reads1 t0@@51 t1@@27 heap@@14 f@@35 bx0@@24)) )))
(assert (forall ((t0@@52 T@U) (t1@@28 T@U) (heap@@15 T@U) (f@@36 T@U) (bx0@@25 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@52) TyType) (= (type t1@@28) TyType)) (= (type heap@@15) (MapType0Type refType MapType1Type))) (= (type f@@36) HandleTypeType)) (= (type bx0@@25) BoxType)) (and (and ($IsGoodHeap heap@@15) (and ($IsBox bx0@@25 t0@@52) ($Is f@@36 (Tclass._System.___hFunc1 t0@@52 t1@@28)))) (|Set#Equal| (Reads1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25) (|Set#Empty| BoxType)))) (and (=> (Requires1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25) (Requires1 t0@@52 t1@@28 heap@@15 f@@36 bx0@@25)) (=> (Requires1 t0@@52 t1@@28 heap@@15 f@@36 bx0@@25) (Requires1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25)))) :qid |unknown.0:0| :skolemid |7095| :pattern ( (Requires1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25) ($IsGoodHeap heap@@15)) :pattern ( (Requires1 t0@@52 t1@@28 heap@@15 f@@36 bx0@@25)) )))
(assert (forall ((f@@37 T@U) (t0@@53 T@U) (t1@@29 T@U) ) (!  (=> (and (and (= (type f@@37) HandleTypeType) (= (type t0@@53) TyType)) (= (type t1@@29) TyType)) (and (=> ($Is f@@37 (Tclass._System.___hFunc1 t0@@53 t1@@29)) (forall ((h@@37 T@U) (bx0@@26 T@U) ) (!  (=> (and (= (type h@@37) (MapType0Type refType MapType1Type)) (= (type bx0@@26) BoxType)) (=> (and (and ($IsGoodHeap h@@37) ($IsBox bx0@@26 t0@@53)) (Requires1 t0@@53 t1@@29 h@@37 f@@37 bx0@@26)) ($IsBox (Apply1 t0@@53 t1@@29 h@@37 f@@37 bx0@@26) t1@@29))) :qid |DafnyPre.521:12| :skolemid |7096| :pattern ( (Apply1 t0@@53 t1@@29 h@@37 f@@37 bx0@@26)) ))) (=> (forall ((h@@38 T@U) (bx0@@27 T@U) ) (!  (=> (and (= (type h@@38) (MapType0Type refType MapType1Type)) (= (type bx0@@27) BoxType)) (=> (and (and ($IsGoodHeap h@@38) ($IsBox bx0@@27 t0@@53)) (Requires1 t0@@53 t1@@29 h@@38 f@@37 bx0@@27)) ($IsBox (Apply1 t0@@53 t1@@29 h@@38 f@@37 bx0@@27) t1@@29))) :qid |DafnyPre.521:12| :skolemid |7096| :pattern ( (Apply1 t0@@53 t1@@29 h@@38 f@@37 bx0@@27)) )) ($Is f@@37 (Tclass._System.___hFunc1 t0@@53 t1@@29))))) :qid |unknown.0:0| :skolemid |7097| :pattern ( ($Is f@@37 (Tclass._System.___hFunc1 t0@@53 t1@@29))) )))
(assert (forall ((f@@38 T@U) (t0@@54 T@U) (t1@@30 T@U) (u0@@1 T@U) (u1@@0 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@38) HandleTypeType) (= (type t0@@54) TyType)) (= (type t1@@30) TyType)) (= (type u0@@1) TyType)) (= (type u1@@0) TyType)) (and (and ($Is f@@38 (Tclass._System.___hFunc1 t0@@54 t1@@30)) (forall ((bx@@54 T@U) ) (!  (=> (and (= (type bx@@54) BoxType) ($IsBox bx@@54 u0@@1)) ($IsBox bx@@54 t0@@54)) :qid |unknown.0:0| :skolemid |7098| :pattern ( ($IsBox bx@@54 u0@@1)) :pattern ( ($IsBox bx@@54 t0@@54)) ))) (forall ((bx@@55 T@U) ) (!  (=> (and (= (type bx@@55) BoxType) ($IsBox bx@@55 t1@@30)) ($IsBox bx@@55 u1@@0)) :qid |unknown.0:0| :skolemid |7099| :pattern ( ($IsBox bx@@55 t1@@30)) :pattern ( ($IsBox bx@@55 u1@@0)) )))) ($Is f@@38 (Tclass._System.___hFunc1 u0@@1 u1@@0))) :qid |unknown.0:0| :skolemid |7100| :pattern ( ($Is f@@38 (Tclass._System.___hFunc1 t0@@54 t1@@30)) ($Is f@@38 (Tclass._System.___hFunc1 u0@@1 u1@@0))) )))
(assert (forall ((f@@39 T@U) (t0@@55 T@U) (t1@@31 T@U) (h@@39 T@U) ) (!  (=> (and (and (and (and (= (type f@@39) HandleTypeType) (= (type t0@@55) TyType)) (= (type t1@@31) TyType)) (= (type h@@39) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@39)) (and (=> ($IsAlloc f@@39 (Tclass._System.___hFunc1 t0@@55 t1@@31) h@@39) (forall ((bx0@@28 T@U) ) (!  (=> (= (type bx0@@28) BoxType) (=> (and (and ($IsBox bx0@@28 t0@@55) ($IsAllocBox bx0@@28 t0@@55 h@@39)) (Requires1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28)) (forall ((r@@19 T@U) ) (!  (=> (= (type r@@19) refType) (=> (and (not (= r@@19 null)) (U_2_bool (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28) ($Box r@@19)))) (U_2_bool (MapType1Select (MapType0Select h@@39 r@@19) alloc)))) :qid |unknown.0:0| :skolemid |7101| :pattern ( (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28) ($Box r@@19))) )))) :qid |unknown.0:0| :skolemid |7102| :pattern ( (Apply1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28)) :pattern ( (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28)) ))) (=> (forall ((bx0@@29 T@U) ) (!  (=> (= (type bx0@@29) BoxType) (=> (and (and ($IsBox bx0@@29 t0@@55) ($IsAllocBox bx0@@29 t0@@55 h@@39)) (Requires1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29)) (forall ((r@@20 T@U) ) (!  (=> (= (type r@@20) refType) (=> (and (not (= r@@20 null)) (U_2_bool (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29) ($Box r@@20)))) (U_2_bool (MapType1Select (MapType0Select h@@39 r@@20) alloc)))) :qid |unknown.0:0| :skolemid |7101| :pattern ( (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29) ($Box r@@20))) )))) :qid |unknown.0:0| :skolemid |7102| :pattern ( (Apply1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29)) :pattern ( (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29)) )) ($IsAlloc f@@39 (Tclass._System.___hFunc1 t0@@55 t1@@31) h@@39)))) :qid |unknown.0:0| :skolemid |7103| :pattern ( ($IsAlloc f@@39 (Tclass._System.___hFunc1 t0@@55 t1@@31) h@@39)) )))
(assert (forall ((f@@40 T@U) (t0@@56 T@U) (t1@@32 T@U) (h@@40 T@U) ) (!  (=> (and (and (and (and (= (type f@@40) HandleTypeType) (= (type t0@@56) TyType)) (= (type t1@@32) TyType)) (= (type h@@40) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@40) ($IsAlloc f@@40 (Tclass._System.___hFunc1 t0@@56 t1@@32) h@@40))) (forall ((bx0@@30 T@U) ) (!  (=> (= (type bx0@@30) BoxType) (=> (and ($IsAllocBox bx0@@30 t0@@56 h@@40) (Requires1 t0@@56 t1@@32 h@@40 f@@40 bx0@@30)) ($IsAllocBox (Apply1 t0@@56 t1@@32 h@@40 f@@40 bx0@@30) t1@@32 h@@40))) :qid |unknown.0:0| :skolemid |7104| :pattern ( (Apply1 t0@@56 t1@@32 h@@40 f@@40 bx0@@30)) ))) :qid |unknown.0:0| :skolemid |7105| :pattern ( ($IsAlloc f@@40 (Tclass._System.___hFunc1 t0@@56 t1@@32) h@@40)) )))
(assert (forall ((arg0@@150 T@U) (arg1@@72 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1 arg0@@150 arg1@@72)) TyType) :qid |funType:Tclass._System.___hPartialFunc1| :pattern ( (Tclass._System.___hPartialFunc1 arg0@@150 arg1@@72)) )))
(assert (forall ((|#$T0@@22| T@U) (|#$R@@35| T@U) ) (!  (=> (and (= (type |#$T0@@22|) TyType) (= (type |#$R@@35|) TyType)) (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@22| |#$R@@35|)) Tagclass._System.___hPartialFunc1)) :qid |unknown.0:0| :skolemid |7106| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@22| |#$R@@35|)) )))
(assert (forall ((arg0@@151 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_0 arg0@@151)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_0| :pattern ( (Tclass._System.___hPartialFunc1_0 arg0@@151)) )))
(assert (forall ((|#$T0@@23| T@U) (|#$R@@36| T@U) ) (!  (=> (and (= (type |#$T0@@23|) TyType) (= (type |#$R@@36|) TyType)) (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@23| |#$R@@36|)) |#$T0@@23|)) :qid |unknown.0:0| :skolemid |7107| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@23| |#$R@@36|)) )))
(assert (forall ((arg0@@152 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_1 arg0@@152)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_1| :pattern ( (Tclass._System.___hPartialFunc1_1 arg0@@152)) )))
(assert (forall ((|#$T0@@24| T@U) (|#$R@@37| T@U) ) (!  (=> (and (= (type |#$T0@@24|) TyType) (= (type |#$R@@37|) TyType)) (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@24| |#$R@@37|)) |#$R@@37|)) :qid |unknown.0:0| :skolemid |7108| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@24| |#$R@@37|)) )))
(assert (forall ((|#$T0@@25| T@U) (|#$R@@38| T@U) (bx@@56 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@25|) TyType) (= (type |#$R@@38|) TyType)) (= (type bx@@56) BoxType)) ($IsBox bx@@56 (Tclass._System.___hPartialFunc1 |#$T0@@25| |#$R@@38|))) (and (= ($Box ($Unbox HandleTypeType bx@@56)) bx@@56) ($Is ($Unbox HandleTypeType bx@@56) (Tclass._System.___hPartialFunc1 |#$T0@@25| |#$R@@38|)))) :qid |unknown.0:0| :skolemid |7109| :pattern ( ($IsBox bx@@56 (Tclass._System.___hPartialFunc1 |#$T0@@25| |#$R@@38|))) )))
(assert (forall ((|#$T0@@26| T@U) (|#$R@@39| T@U) (|f#0@@7| T@U) ) (!  (=> (and (and (= (type |#$T0@@26|) TyType) (= (type |#$R@@39|) TyType)) (= (type |f#0@@7|) HandleTypeType)) (and (=> ($Is |f#0@@7| (Tclass._System.___hPartialFunc1 |#$T0@@26| |#$R@@39|)) (and ($Is |f#0@@7| (Tclass._System.___hFunc1 |#$T0@@26| |#$R@@39|)) (forall ((|x0#0@@3| T@U) ) (!  (=> (and (= (type |x0#0@@3|) BoxType) ($IsBox |x0#0@@3| |#$T0@@26|)) (|Set#Equal| (Reads1 |#$T0@@26| |#$R@@39| $OneHeap |f#0@@7| |x0#0@@3|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |7110| :no-pattern (type |x0#0@@3|) :no-pattern (U_2_int |x0#0@@3|) :no-pattern (U_2_bool |x0#0@@3|) )))) (=> (and ($Is |f#0@@7| (Tclass._System.___hFunc1 |#$T0@@26| |#$R@@39|)) (forall ((|x0#0@@4| T@U) ) (!  (=> (and (= (type |x0#0@@4|) BoxType) ($IsBox |x0#0@@4| |#$T0@@26|)) (|Set#Equal| (Reads1 |#$T0@@26| |#$R@@39| $OneHeap |f#0@@7| |x0#0@@4|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |7110| :no-pattern (type |x0#0@@4|) :no-pattern (U_2_int |x0#0@@4|) :no-pattern (U_2_bool |x0#0@@4|) ))) ($Is |f#0@@7| (Tclass._System.___hPartialFunc1 |#$T0@@26| |#$R@@39|))))) :qid |unknown.0:0| :skolemid |7111| :pattern ( ($Is |f#0@@7| (Tclass._System.___hPartialFunc1 |#$T0@@26| |#$R@@39|))) )))
(assert (forall ((|#$T0@@27| T@U) (|#$R@@40| T@U) (|f#0@@8| T@U) ($h@@12 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@27|) TyType) (= (type |#$R@@40|) TyType)) (= (type |f#0@@8|) HandleTypeType)) (= (type $h@@12) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc1 |#$T0@@27| |#$R@@40|) $h@@12) ($IsAlloc |f#0@@8| (Tclass._System.___hFunc1 |#$T0@@27| |#$R@@40|) $h@@12)) (=> ($IsAlloc |f#0@@8| (Tclass._System.___hFunc1 |#$T0@@27| |#$R@@40|) $h@@12) ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc1 |#$T0@@27| |#$R@@40|) $h@@12)))) :qid |unknown.0:0| :skolemid |7112| :pattern ( ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc1 |#$T0@@27| |#$R@@40|) $h@@12)) )))
(assert (forall ((arg0@@153 T@U) (arg1@@73 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1 arg0@@153 arg1@@73)) TyType) :qid |funType:Tclass._System.___hTotalFunc1| :pattern ( (Tclass._System.___hTotalFunc1 arg0@@153 arg1@@73)) )))
(assert (forall ((|#$T0@@28| T@U) (|#$R@@41| T@U) ) (!  (=> (and (= (type |#$T0@@28|) TyType) (= (type |#$R@@41|) TyType)) (= (Tag (Tclass._System.___hTotalFunc1 |#$T0@@28| |#$R@@41|)) Tagclass._System.___hTotalFunc1)) :qid |unknown.0:0| :skolemid |7113| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@28| |#$R@@41|)) )))
(assert (forall ((arg0@@154 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_0 arg0@@154)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_0| :pattern ( (Tclass._System.___hTotalFunc1_0 arg0@@154)) )))
(assert (forall ((|#$T0@@29| T@U) (|#$R@@42| T@U) ) (!  (=> (and (= (type |#$T0@@29|) TyType) (= (type |#$R@@42|) TyType)) (= (Tclass._System.___hTotalFunc1_0 (Tclass._System.___hTotalFunc1 |#$T0@@29| |#$R@@42|)) |#$T0@@29|)) :qid |unknown.0:0| :skolemid |7114| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@29| |#$R@@42|)) )))
(assert (forall ((arg0@@155 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_1 arg0@@155)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_1| :pattern ( (Tclass._System.___hTotalFunc1_1 arg0@@155)) )))
(assert (forall ((|#$T0@@30| T@U) (|#$R@@43| T@U) ) (!  (=> (and (= (type |#$T0@@30|) TyType) (= (type |#$R@@43|) TyType)) (= (Tclass._System.___hTotalFunc1_1 (Tclass._System.___hTotalFunc1 |#$T0@@30| |#$R@@43|)) |#$R@@43|)) :qid |unknown.0:0| :skolemid |7115| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@30| |#$R@@43|)) )))
(assert (forall ((|#$T0@@31| T@U) (|#$R@@44| T@U) (bx@@57 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@31|) TyType) (= (type |#$R@@44|) TyType)) (= (type bx@@57) BoxType)) ($IsBox bx@@57 (Tclass._System.___hTotalFunc1 |#$T0@@31| |#$R@@44|))) (and (= ($Box ($Unbox HandleTypeType bx@@57)) bx@@57) ($Is ($Unbox HandleTypeType bx@@57) (Tclass._System.___hTotalFunc1 |#$T0@@31| |#$R@@44|)))) :qid |unknown.0:0| :skolemid |7116| :pattern ( ($IsBox bx@@57 (Tclass._System.___hTotalFunc1 |#$T0@@31| |#$R@@44|))) )))
(assert (forall ((|#$T0@@32| T@U) (|#$R@@45| T@U) (|f#0@@9| T@U) ) (!  (=> (and (and (= (type |#$T0@@32|) TyType) (= (type |#$R@@45|) TyType)) (= (type |f#0@@9|) HandleTypeType)) (and (=> ($Is |f#0@@9| (Tclass._System.___hTotalFunc1 |#$T0@@32| |#$R@@45|)) (and ($Is |f#0@@9| (Tclass._System.___hPartialFunc1 |#$T0@@32| |#$R@@45|)) (forall ((|x0#0@@5| T@U) ) (!  (=> (and (= (type |x0#0@@5|) BoxType) ($IsBox |x0#0@@5| |#$T0@@32|)) (Requires1 |#$T0@@32| |#$R@@45| $OneHeap |f#0@@9| |x0#0@@5|)) :qid |unknown.0:0| :skolemid |7117| :no-pattern (type |x0#0@@5|) :no-pattern (U_2_int |x0#0@@5|) :no-pattern (U_2_bool |x0#0@@5|) )))) (=> (and ($Is |f#0@@9| (Tclass._System.___hPartialFunc1 |#$T0@@32| |#$R@@45|)) (forall ((|x0#0@@6| T@U) ) (!  (=> (and (= (type |x0#0@@6|) BoxType) ($IsBox |x0#0@@6| |#$T0@@32|)) (Requires1 |#$T0@@32| |#$R@@45| $OneHeap |f#0@@9| |x0#0@@6|)) :qid |unknown.0:0| :skolemid |7117| :no-pattern (type |x0#0@@6|) :no-pattern (U_2_int |x0#0@@6|) :no-pattern (U_2_bool |x0#0@@6|) ))) ($Is |f#0@@9| (Tclass._System.___hTotalFunc1 |#$T0@@32| |#$R@@45|))))) :qid |unknown.0:0| :skolemid |7118| :pattern ( ($Is |f#0@@9| (Tclass._System.___hTotalFunc1 |#$T0@@32| |#$R@@45|))) )))
(assert (forall ((|#$T0@@33| T@U) (|#$R@@46| T@U) (|f#0@@10| T@U) ($h@@13 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@33|) TyType) (= (type |#$R@@46|) TyType)) (= (type |f#0@@10|) HandleTypeType)) (= (type $h@@13) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc1 |#$T0@@33| |#$R@@46|) $h@@13) ($IsAlloc |f#0@@10| (Tclass._System.___hPartialFunc1 |#$T0@@33| |#$R@@46|) $h@@13)) (=> ($IsAlloc |f#0@@10| (Tclass._System.___hPartialFunc1 |#$T0@@33| |#$R@@46|) $h@@13) ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc1 |#$T0@@33| |#$R@@46|) $h@@13)))) :qid |unknown.0:0| :skolemid |7119| :pattern ( ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc1 |#$T0@@33| |#$R@@46|) $h@@13)) )))
(assert  (and (forall ((arg0@@156 T@U) (arg1@@74 T@U) ) (! (= (type (|#_System._tuple#2._#Make2| arg0@@156 arg1@@74)) DatatypeTypeType) :qid |funType:#_System._tuple#2._#Make2| :pattern ( (|#_System._tuple#2._#Make2| arg0@@156 arg1@@74)) )) (forall ((arg0@@157 T@U) ) (! (= (type (DatatypeCtorId arg0@@157)) DtCtorIdType) :qid |funType:DatatypeCtorId| :pattern ( (DatatypeCtorId arg0@@157)) ))))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (!  (=> (and (= (type |a#0#0#0|) BoxType) (= (type |a#0#1#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)) :qid |unknown.0:0| :skolemid |7120| :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) )))
(assert (forall ((d@@0 T@U) ) (!  (=> (= (type d@@0) DatatypeTypeType) (and (=> (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|)) (=> (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|) (_System.Tuple2.___hMake2_q d@@0)))) :qid |unknown.0:0| :skolemid |7121| :pattern ( (_System.Tuple2.___hMake2_q d@@0)) )))
(assert (forall ((d@@1 T@U) ) (!  (=> (and (= (type d@@1) DatatypeTypeType) (_System.Tuple2.___hMake2_q d@@1)) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (!  (and (and (= (type |a#1#0#0|) BoxType) (= (type |a#1#1#0|) BoxType)) (= d@@1 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))) :qid |unknown.0:0| :skolemid |7122| :no-pattern (type |a#1#0#0|) :no-pattern (type |a#1#1#0|) :no-pattern (U_2_int |a#1#0#0|) :no-pattern (U_2_bool |a#1#0#0|) :no-pattern (U_2_int |a#1#1#0|) :no-pattern (U_2_bool |a#1#1#0|) ))) :qid |unknown.0:0| :skolemid |7123| :pattern ( (_System.Tuple2.___hMake2_q d@@1)) )))
(assert (forall ((arg0@@158 T@U) (arg1@@75 T@U) ) (! (= (type (Tclass._System.Tuple2 arg0@@158 arg1@@75)) TyType) :qid |funType:Tclass._System.Tuple2| :pattern ( (Tclass._System.Tuple2 arg0@@158 arg1@@75)) )))
(assert (forall ((|#$T0@@34| T@U) (|#$T1@@18| T@U) ) (!  (=> (and (= (type |#$T0@@34|) TyType) (= (type |#$T1@@18|) TyType)) (= (Tag (Tclass._System.Tuple2 |#$T0@@34| |#$T1@@18|)) Tagclass._System.Tuple2)) :qid |unknown.0:0| :skolemid |7124| :pattern ( (Tclass._System.Tuple2 |#$T0@@34| |#$T1@@18|)) )))
(assert (forall ((arg0@@159 T@U) ) (! (= (type (Tclass._System.Tuple2_0 arg0@@159)) TyType) :qid |funType:Tclass._System.Tuple2_0| :pattern ( (Tclass._System.Tuple2_0 arg0@@159)) )))
(assert (forall ((|#$T0@@35| T@U) (|#$T1@@19| T@U) ) (!  (=> (and (= (type |#$T0@@35|) TyType) (= (type |#$T1@@19|) TyType)) (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |#$T0@@35| |#$T1@@19|)) |#$T0@@35|)) :qid |unknown.0:0| :skolemid |7125| :pattern ( (Tclass._System.Tuple2 |#$T0@@35| |#$T1@@19|)) )))
(assert (forall ((arg0@@160 T@U) ) (! (= (type (Tclass._System.Tuple2_1 arg0@@160)) TyType) :qid |funType:Tclass._System.Tuple2_1| :pattern ( (Tclass._System.Tuple2_1 arg0@@160)) )))
(assert (forall ((|#$T0@@36| T@U) (|#$T1@@20| T@U) ) (!  (=> (and (= (type |#$T0@@36|) TyType) (= (type |#$T1@@20|) TyType)) (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |#$T0@@36| |#$T1@@20|)) |#$T1@@20|)) :qid |unknown.0:0| :skolemid |7126| :pattern ( (Tclass._System.Tuple2 |#$T0@@36| |#$T1@@20|)) )))
(assert (forall ((|#$T0@@37| T@U) (|#$T1@@21| T@U) (bx@@58 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@37|) TyType) (= (type |#$T1@@21|) TyType)) (= (type bx@@58) BoxType)) ($IsBox bx@@58 (Tclass._System.Tuple2 |#$T0@@37| |#$T1@@21|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@58)) bx@@58) ($Is ($Unbox DatatypeTypeType bx@@58) (Tclass._System.Tuple2 |#$T0@@37| |#$T1@@21|)))) :qid |unknown.0:0| :skolemid |7127| :pattern ( ($IsBox bx@@58 (Tclass._System.Tuple2 |#$T0@@37| |#$T1@@21|))) )))
(assert (forall ((|#$T0@@38| T@U) (|#$T1@@22| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@38|) TyType) (= (type |#$T1@@22|) TyType)) (= (type |a#2#0#0|) BoxType)) (= (type |a#2#1#0|) BoxType)) (and (=> ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |#$T0@@38| |#$T1@@22|)) (and ($IsBox |a#2#0#0| |#$T0@@38|) ($IsBox |a#2#1#0| |#$T1@@22|))) (=> (and ($IsBox |a#2#0#0| |#$T0@@38|) ($IsBox |a#2#1#0| |#$T1@@22|)) ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |#$T0@@38| |#$T1@@22|))))) :qid |unknown.0:0| :skolemid |7128| :pattern ( ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |#$T0@@38| |#$T1@@22|))) )))
(assert (forall ((|#$T0@@39| T@U) (|#$T1@@23| T@U) (|a#3#0#0| T@U) (|a#3#1#0| T@U) ($h@@14 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@39|) TyType) (= (type |#$T1@@23|) TyType)) (= (type |a#3#0#0|) BoxType)) (= (type |a#3#1#0|) BoxType)) (= (type $h@@14) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@14)) (and (=> ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |#$T0@@39| |#$T1@@23|) $h@@14) (and ($IsAllocBox |a#3#0#0| |#$T0@@39| $h@@14) ($IsAllocBox |a#3#1#0| |#$T1@@23| $h@@14))) (=> (and ($IsAllocBox |a#3#0#0| |#$T0@@39| $h@@14) ($IsAllocBox |a#3#1#0| |#$T1@@23| $h@@14)) ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |#$T0@@39| |#$T1@@23|) $h@@14)))) :qid |unknown.0:0| :skolemid |7129| :pattern ( ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |#$T0@@39| |#$T1@@23|) $h@@14)) )))
(assert (forall ((d@@2 T@U) (|#$T0@@40| T@U) ($h@@15 T@U) ) (!  (=> (and (and (and (= (type d@@2) DatatypeTypeType) (= (type |#$T0@@40|) TyType)) (= (type $h@@15) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@15) (and (_System.Tuple2.___hMake2_q d@@2) (exists ((|#$T1@@24| T@U) ) (!  (and (= (type |#$T1@@24|) TyType) ($IsAlloc d@@2 (Tclass._System.Tuple2 |#$T0@@40| |#$T1@@24|) $h@@15)) :qid |unknown.0:0| :skolemid |7130| :pattern ( ($IsAlloc d@@2 (Tclass._System.Tuple2 |#$T0@@40| |#$T1@@24|) $h@@15)) ))))) ($IsAllocBox (_System.Tuple2._0 d@@2) |#$T0@@40| $h@@15)) :qid |unknown.0:0| :skolemid |7131| :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@2) |#$T0@@40| $h@@15)) )))
(assert (forall ((d@@3 T@U) (|#$T1@@25| T@U) ($h@@16 T@U) ) (!  (=> (and (and (and (= (type d@@3) DatatypeTypeType) (= (type |#$T1@@25|) TyType)) (= (type $h@@16) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@16) (and (_System.Tuple2.___hMake2_q d@@3) (exists ((|#$T0@@41| T@U) ) (!  (and (= (type |#$T0@@41|) TyType) ($IsAlloc d@@3 (Tclass._System.Tuple2 |#$T0@@41| |#$T1@@25|) $h@@16)) :qid |unknown.0:0| :skolemid |7132| :pattern ( ($IsAlloc d@@3 (Tclass._System.Tuple2 |#$T0@@41| |#$T1@@25|) $h@@16)) ))))) ($IsAllocBox (_System.Tuple2._1 d@@3) |#$T1@@25| $h@@16)) :qid |unknown.0:0| :skolemid |7133| :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@3) |#$T1@@25| $h@@16)) )))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (!  (=> (and (= (type |a#4#0#0|) BoxType) (= (type |a#4#1#0|) BoxType)) (= (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|)) (Lit (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)))) :qid |unknown.0:0| :skolemid |7134| :pattern ( (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|))) )))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (!  (=> (and (= (type |a#5#0#0|) BoxType) (= (type |a#5#1#0|) BoxType)) (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) |a#5#0#0|)) :qid |unknown.0:0| :skolemid |7135| :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) )))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (!  (=> (and (= (type |a#6#0#0|) BoxType) (= (type |a#6#1#0|) BoxType)) (< (BoxRank |a#6#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)))) :qid |unknown.0:0| :skolemid |7136| :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) )))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (!  (=> (and (= (type |a#7#0#0|) BoxType) (= (type |a#7#1#0|) BoxType)) (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) |a#7#1#0|)) :qid |unknown.0:0| :skolemid |7137| :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) )))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (!  (=> (and (= (type |a#8#0#0|) BoxType) (= (type |a#8#1#0|) BoxType)) (< (BoxRank |a#8#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)))) :qid |unknown.0:0| :skolemid |7138| :pattern ( (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)) )))
(assert (forall ((d@@4 T@U) ) (!  (=> (and (= (type d@@4) DatatypeTypeType) (|$IsA#_System.Tuple2| d@@4)) (_System.Tuple2.___hMake2_q d@@4)) :qid |unknown.0:0| :skolemid |7139| :pattern ( (|$IsA#_System.Tuple2| d@@4)) )))
(assert (forall ((|#$T0@@42| T@U) (|#$T1@@26| T@U) (d@@5 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@42|) TyType) (= (type |#$T1@@26|) TyType)) (= (type d@@5) DatatypeTypeType)) ($Is d@@5 (Tclass._System.Tuple2 |#$T0@@42| |#$T1@@26|))) (_System.Tuple2.___hMake2_q d@@5)) :qid |unknown.0:0| :skolemid |7140| :pattern ( (_System.Tuple2.___hMake2_q d@@5) ($Is d@@5 (Tclass._System.Tuple2 |#$T0@@42| |#$T1@@26|))) )))
(assert (forall ((a@@100 T@U) (b@@61 T@U) ) (!  (=> (and (and (= (type a@@100) DatatypeTypeType) (= (type b@@61) DatatypeTypeType)) true) (and (=> (|_System.Tuple2#Equal| a@@100 b@@61) (and (= (_System.Tuple2._0 a@@100) (_System.Tuple2._0 b@@61)) (= (_System.Tuple2._1 a@@100) (_System.Tuple2._1 b@@61)))) (=> (and (= (_System.Tuple2._0 a@@100) (_System.Tuple2._0 b@@61)) (= (_System.Tuple2._1 a@@100) (_System.Tuple2._1 b@@61))) (|_System.Tuple2#Equal| a@@100 b@@61)))) :qid |unknown.0:0| :skolemid |7141| :pattern ( (|_System.Tuple2#Equal| a@@100 b@@61)) )))
(assert (forall ((a@@101 T@U) (b@@62 T@U) ) (!  (=> (and (= (type a@@101) DatatypeTypeType) (= (type b@@62) DatatypeTypeType)) (and (=> (|_System.Tuple2#Equal| a@@101 b@@62) (= a@@101 b@@62)) (=> (= a@@101 b@@62) (|_System.Tuple2#Equal| a@@101 b@@62)))) :qid |unknown.0:0| :skolemid |7142| :pattern ( (|_System.Tuple2#Equal| a@@101 b@@62)) )))
(assert (forall ((arg0@@161 T@U) (arg1@@76 T@U) (arg2@@32 T@U) (arg3@@12 T@U) ) (! (= (type (Tclass._System.___hFunc3 arg0@@161 arg1@@76 arg2@@32 arg3@@12)) TyType) :qid |funType:Tclass._System.___hFunc3| :pattern ( (Tclass._System.___hFunc3 arg0@@161 arg1@@76 arg2@@32 arg3@@12)) )))
(assert (forall ((|#$T0@@43| T@U) (|#$T1@@27| T@U) (|#$T2| T@U) (|#$R@@47| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@43|) TyType) (= (type |#$T1@@27|) TyType)) (= (type |#$T2|) TyType)) (= (type |#$R@@47|) TyType)) (= (Tag (Tclass._System.___hFunc3 |#$T0@@43| |#$T1@@27| |#$T2| |#$R@@47|)) Tagclass._System.___hFunc3)) :qid |unknown.0:0| :skolemid |7143| :pattern ( (Tclass._System.___hFunc3 |#$T0@@43| |#$T1@@27| |#$T2| |#$R@@47|)) )))
(assert (forall ((arg0@@162 T@U) ) (! (= (type (Tclass._System.___hFunc3_0 arg0@@162)) TyType) :qid |funType:Tclass._System.___hFunc3_0| :pattern ( (Tclass._System.___hFunc3_0 arg0@@162)) )))
(assert (forall ((|#$T0@@44| T@U) (|#$T1@@28| T@U) (|#$T2@@0| T@U) (|#$R@@48| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@44|) TyType) (= (type |#$T1@@28|) TyType)) (= (type |#$T2@@0|) TyType)) (= (type |#$R@@48|) TyType)) (= (Tclass._System.___hFunc3_0 (Tclass._System.___hFunc3 |#$T0@@44| |#$T1@@28| |#$T2@@0| |#$R@@48|)) |#$T0@@44|)) :qid |unknown.0:0| :skolemid |7144| :pattern ( (Tclass._System.___hFunc3 |#$T0@@44| |#$T1@@28| |#$T2@@0| |#$R@@48|)) )))
(assert (forall ((arg0@@163 T@U) ) (! (= (type (Tclass._System.___hFunc3_1 arg0@@163)) TyType) :qid |funType:Tclass._System.___hFunc3_1| :pattern ( (Tclass._System.___hFunc3_1 arg0@@163)) )))
(assert (forall ((|#$T0@@45| T@U) (|#$T1@@29| T@U) (|#$T2@@1| T@U) (|#$R@@49| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@45|) TyType) (= (type |#$T1@@29|) TyType)) (= (type |#$T2@@1|) TyType)) (= (type |#$R@@49|) TyType)) (= (Tclass._System.___hFunc3_1 (Tclass._System.___hFunc3 |#$T0@@45| |#$T1@@29| |#$T2@@1| |#$R@@49|)) |#$T1@@29|)) :qid |unknown.0:0| :skolemid |7145| :pattern ( (Tclass._System.___hFunc3 |#$T0@@45| |#$T1@@29| |#$T2@@1| |#$R@@49|)) )))
(assert (forall ((arg0@@164 T@U) ) (! (= (type (Tclass._System.___hFunc3_2 arg0@@164)) TyType) :qid |funType:Tclass._System.___hFunc3_2| :pattern ( (Tclass._System.___hFunc3_2 arg0@@164)) )))
(assert (forall ((|#$T0@@46| T@U) (|#$T1@@30| T@U) (|#$T2@@2| T@U) (|#$R@@50| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@46|) TyType) (= (type |#$T1@@30|) TyType)) (= (type |#$T2@@2|) TyType)) (= (type |#$R@@50|) TyType)) (= (Tclass._System.___hFunc3_2 (Tclass._System.___hFunc3 |#$T0@@46| |#$T1@@30| |#$T2@@2| |#$R@@50|)) |#$T2@@2|)) :qid |unknown.0:0| :skolemid |7146| :pattern ( (Tclass._System.___hFunc3 |#$T0@@46| |#$T1@@30| |#$T2@@2| |#$R@@50|)) )))
(assert (forall ((arg0@@165 T@U) ) (! (= (type (Tclass._System.___hFunc3_3 arg0@@165)) TyType) :qid |funType:Tclass._System.___hFunc3_3| :pattern ( (Tclass._System.___hFunc3_3 arg0@@165)) )))
(assert (forall ((|#$T0@@47| T@U) (|#$T1@@31| T@U) (|#$T2@@3| T@U) (|#$R@@51| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@47|) TyType) (= (type |#$T1@@31|) TyType)) (= (type |#$T2@@3|) TyType)) (= (type |#$R@@51|) TyType)) (= (Tclass._System.___hFunc3_3 (Tclass._System.___hFunc3 |#$T0@@47| |#$T1@@31| |#$T2@@3| |#$R@@51|)) |#$R@@51|)) :qid |unknown.0:0| :skolemid |7147| :pattern ( (Tclass._System.___hFunc3 |#$T0@@47| |#$T1@@31| |#$T2@@3| |#$R@@51|)) )))
(assert (forall ((|#$T0@@48| T@U) (|#$T1@@32| T@U) (|#$T2@@4| T@U) (|#$R@@52| T@U) (bx@@59 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@48|) TyType) (= (type |#$T1@@32|) TyType)) (= (type |#$T2@@4|) TyType)) (= (type |#$R@@52|) TyType)) (= (type bx@@59) BoxType)) ($IsBox bx@@59 (Tclass._System.___hFunc3 |#$T0@@48| |#$T1@@32| |#$T2@@4| |#$R@@52|))) (and (= ($Box ($Unbox HandleTypeType bx@@59)) bx@@59) ($Is ($Unbox HandleTypeType bx@@59) (Tclass._System.___hFunc3 |#$T0@@48| |#$T1@@32| |#$T2@@4| |#$R@@52|)))) :qid |unknown.0:0| :skolemid |7148| :pattern ( ($IsBox bx@@59 (Tclass._System.___hFunc3 |#$T0@@48| |#$T1@@32| |#$T2@@4| |#$R@@52|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@166 T@T) (arg1@@77 T@T) (arg2@@33 T@T) (arg3@@13 T@T) (arg4@@4 T@T) ) (! (= (Ctor (MapType4Type arg0@@166 arg1@@77 arg2@@33 arg3@@13 arg4@@4)) 23) :qid |ctor:MapType4Type| )) (forall ((arg0@@167 T@T) (arg1@@78 T@T) (arg2@@34 T@T) (arg3@@14 T@T) (arg4@@5 T@T) ) (! (= (MapType4TypeInv0 (MapType4Type arg0@@167 arg1@@78 arg2@@34 arg3@@14 arg4@@5)) arg0@@167) :qid |typeInv:MapType4TypeInv0| :pattern ( (MapType4Type arg0@@167 arg1@@78 arg2@@34 arg3@@14 arg4@@5)) ))) (forall ((arg0@@168 T@T) (arg1@@79 T@T) (arg2@@35 T@T) (arg3@@15 T@T) (arg4@@6 T@T) ) (! (= (MapType4TypeInv1 (MapType4Type arg0@@168 arg1@@79 arg2@@35 arg3@@15 arg4@@6)) arg1@@79) :qid |typeInv:MapType4TypeInv1| :pattern ( (MapType4Type arg0@@168 arg1@@79 arg2@@35 arg3@@15 arg4@@6)) ))) (forall ((arg0@@169 T@T) (arg1@@80 T@T) (arg2@@36 T@T) (arg3@@16 T@T) (arg4@@7 T@T) ) (! (= (MapType4TypeInv2 (MapType4Type arg0@@169 arg1@@80 arg2@@36 arg3@@16 arg4@@7)) arg2@@36) :qid |typeInv:MapType4TypeInv2| :pattern ( (MapType4Type arg0@@169 arg1@@80 arg2@@36 arg3@@16 arg4@@7)) ))) (forall ((arg0@@170 T@T) (arg1@@81 T@T) (arg2@@37 T@T) (arg3@@17 T@T) (arg4@@8 T@T) ) (! (= (MapType4TypeInv3 (MapType4Type arg0@@170 arg1@@81 arg2@@37 arg3@@17 arg4@@8)) arg3@@17) :qid |typeInv:MapType4TypeInv3| :pattern ( (MapType4Type arg0@@170 arg1@@81 arg2@@37 arg3@@17 arg4@@8)) ))) (forall ((arg0@@171 T@T) (arg1@@82 T@T) (arg2@@38 T@T) (arg3@@18 T@T) (arg4@@9 T@T) ) (! (= (MapType4TypeInv4 (MapType4Type arg0@@171 arg1@@82 arg2@@38 arg3@@18 arg4@@9)) arg4@@9) :qid |typeInv:MapType4TypeInv4| :pattern ( (MapType4Type arg0@@171 arg1@@82 arg2@@38 arg3@@18 arg4@@9)) ))) (forall ((arg0@@172 T@U) (arg1@@83 T@U) (arg2@@39 T@U) (arg3@@19 T@U) (arg4@@10 T@U) ) (! (let ((aVar4 (MapType4TypeInv4 (type arg0@@172)))) (= (type (MapType4Select arg0@@172 arg1@@83 arg2@@39 arg3@@19 arg4@@10)) aVar4)) :qid |funType:MapType4Select| :pattern ( (MapType4Select arg0@@172 arg1@@83 arg2@@39 arg3@@19 arg4@@10)) ))) (forall ((arg0@@173 T@U) (arg1@@84 T@U) (arg2@@40 T@U) (arg3@@20 T@U) (arg4@@11 T@U) (arg5@@1 T@U) ) (! (let ((aVar4@@0 (type arg5@@1))) (let ((aVar3@@2 (type arg4@@11))) (let ((aVar2@@3 (type arg3@@20))) (let ((aVar1@@4 (type arg2@@40))) (let ((aVar0@@2 (type arg1@@84))) (= (type (MapType4Store arg0@@173 arg1@@84 arg2@@40 arg3@@20 arg4@@11 arg5@@1)) (MapType4Type aVar0@@2 aVar1@@4 aVar2@@3 aVar3@@2 aVar4@@0))))))) :qid |funType:MapType4Store| :pattern ( (MapType4Store arg0@@173 arg1@@84 arg2@@40 arg3@@20 arg4@@11 arg5@@1)) ))) (forall ((m@@36 T@U) (x0@@14 T@U) (x1@@8 T@U) (x2@@4 T@U) (x3 T@U) (val@@15 T@U) ) (! (let ((aVar4@@1 (MapType4TypeInv4 (type m@@36)))) (=> (= (type val@@15) aVar4@@1) (= (MapType4Select (MapType4Store m@@36 x0@@14 x1@@8 x2@@4 x3 val@@15) x0@@14 x1@@8 x2@@4 x3) val@@15))) :qid |mapAx0:MapType4Select| :weight 0 ))) (and (and (and (and (forall ((val@@16 T@U) (m@@37 T@U) (x0@@15 T@U) (x1@@9 T@U) (x2@@5 T@U) (x3@@0 T@U) (y0@@10 T@U) (y1@@6 T@U) (y2@@3 T@U) (y3 T@U) ) (!  (or (= x0@@15 y0@@10) (= (MapType4Select (MapType4Store m@@37 x0@@15 x1@@9 x2@@5 x3@@0 val@@16) y0@@10 y1@@6 y2@@3 y3) (MapType4Select m@@37 y0@@10 y1@@6 y2@@3 y3))) :qid |mapAx1:MapType4Select:0| :weight 0 )) (forall ((val@@17 T@U) (m@@38 T@U) (x0@@16 T@U) (x1@@10 T@U) (x2@@6 T@U) (x3@@1 T@U) (y0@@11 T@U) (y1@@7 T@U) (y2@@4 T@U) (y3@@0 T@U) ) (!  (or (= x1@@10 y1@@7) (= (MapType4Select (MapType4Store m@@38 x0@@16 x1@@10 x2@@6 x3@@1 val@@17) y0@@11 y1@@7 y2@@4 y3@@0) (MapType4Select m@@38 y0@@11 y1@@7 y2@@4 y3@@0))) :qid |mapAx1:MapType4Select:1| :weight 0 ))) (forall ((val@@18 T@U) (m@@39 T@U) (x0@@17 T@U) (x1@@11 T@U) (x2@@7 T@U) (x3@@2 T@U) (y0@@12 T@U) (y1@@8 T@U) (y2@@5 T@U) (y3@@1 T@U) ) (!  (or (= x2@@7 y2@@5) (= (MapType4Select (MapType4Store m@@39 x0@@17 x1@@11 x2@@7 x3@@2 val@@18) y0@@12 y1@@8 y2@@5 y3@@1) (MapType4Select m@@39 y0@@12 y1@@8 y2@@5 y3@@1))) :qid |mapAx1:MapType4Select:2| :weight 0 ))) (forall ((val@@19 T@U) (m@@40 T@U) (x0@@18 T@U) (x1@@12 T@U) (x2@@8 T@U) (x3@@3 T@U) (y0@@13 T@U) (y1@@9 T@U) (y2@@6 T@U) (y3@@2 T@U) ) (!  (or (= x3@@3 y3@@2) (= (MapType4Select (MapType4Store m@@40 x0@@18 x1@@12 x2@@8 x3@@3 val@@19) y0@@13 y1@@9 y2@@6 y3@@2) (MapType4Select m@@40 y0@@13 y1@@9 y2@@6 y3@@2))) :qid |mapAx1:MapType4Select:3| :weight 0 ))) (forall ((val@@20 T@U) (m@@41 T@U) (x0@@19 T@U) (x1@@13 T@U) (x2@@9 T@U) (x3@@4 T@U) (y0@@14 T@U) (y1@@10 T@U) (y2@@7 T@U) (y3@@3 T@U) ) (!  (or true (= (MapType4Select (MapType4Store m@@41 x0@@19 x1@@13 x2@@9 x3@@4 val@@20) y0@@14 y1@@10 y2@@7 y3@@3) (MapType4Select m@@41 y0@@14 y1@@10 y2@@7 y3@@3))) :qid |mapAx2:MapType4Select| :weight 0 )))) (forall ((arg0@@174 T@U) (arg1@@85 T@U) (arg2@@41 T@U) (arg3@@21 T@U) (arg4@@12 T@U) (arg5@@2 T@U) (arg6@@1 T@U) (arg7 T@U) (arg8 T@U) ) (! (= (type (Apply3 arg0@@174 arg1@@85 arg2@@41 arg3@@21 arg4@@12 arg5@@2 arg6@@1 arg7 arg8)) BoxType) :qid |funType:Apply3| :pattern ( (Apply3 arg0@@174 arg1@@85 arg2@@41 arg3@@21 arg4@@12 arg5@@2 arg6@@1 arg7 arg8)) ))) (forall ((arg0@@175 T@U) (arg1@@86 T@U) (arg2@@42 T@U) ) (! (= (type (Handle3 arg0@@175 arg1@@86 arg2@@42)) HandleTypeType) :qid |funType:Handle3| :pattern ( (Handle3 arg0@@175 arg1@@86 arg2@@42)) ))))
(assert (forall ((t0@@57 T@U) (t1@@33 T@U) (t2@@14 T@U) (t3 T@U) (heap@@16 T@U) (h@@41 T@U) (r@@21 T@U) (rd@@8 T@U) (bx0@@31 T@U) (bx1@@15 T@U) (bx2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@57) TyType) (= (type t1@@33) TyType)) (= (type t2@@14) TyType)) (= (type t3) TyType)) (= (type heap@@16) (MapType0Type refType MapType1Type))) (= (type h@@41) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@21) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@8) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@31) BoxType)) (= (type bx1@@15) BoxType)) (= (type bx2) BoxType)) (= (Apply3 t0@@57 t1@@33 t2@@14 t3 heap@@16 (Handle3 h@@41 r@@21 rd@@8) bx0@@31 bx1@@15 bx2) (MapType4Select h@@41 heap@@16 bx0@@31 bx1@@15 bx2))) :qid |unknown.0:0| :skolemid |7149| :pattern ( (Apply3 t0@@57 t1@@33 t2@@14 t3 heap@@16 (Handle3 h@@41 r@@21 rd@@8) bx0@@31 bx1@@15 bx2)) )))
(assert (forall ((t0@@58 T@U) (t1@@34 T@U) (t2@@15 T@U) (t3@@0 T@U) (heap@@17 T@U) (h@@42 T@U) (r@@22 T@U) (rd@@9 T@U) (bx0@@32 T@U) (bx1@@16 T@U) (bx2@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@58) TyType) (= (type t1@@34) TyType)) (= (type t2@@15) TyType)) (= (type t3@@0) TyType)) (= (type heap@@17) (MapType0Type refType MapType1Type))) (= (type h@@42) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@22) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@9) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@32) BoxType)) (= (type bx1@@16) BoxType)) (= (type bx2@@0) BoxType)) (U_2_bool (MapType4Select r@@22 heap@@17 bx0@@32 bx1@@16 bx2@@0))) (Requires3 t0@@58 t1@@34 t2@@15 t3@@0 heap@@17 (Handle3 h@@42 r@@22 rd@@9) bx0@@32 bx1@@16 bx2@@0)) :qid |unknown.0:0| :skolemid |7150| :pattern ( (Requires3 t0@@58 t1@@34 t2@@15 t3@@0 heap@@17 (Handle3 h@@42 r@@22 rd@@9) bx0@@32 bx1@@16 bx2@@0)) )))
(assert (forall ((arg0@@176 T@U) (arg1@@87 T@U) (arg2@@43 T@U) (arg3@@22 T@U) (arg4@@13 T@U) (arg5@@3 T@U) (arg6@@2 T@U) (arg7@@0 T@U) (arg8@@0 T@U) ) (! (= (type (Reads3 arg0@@176 arg1@@87 arg2@@43 arg3@@22 arg4@@13 arg5@@3 arg6@@2 arg7@@0 arg8@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads3| :pattern ( (Reads3 arg0@@176 arg1@@87 arg2@@43 arg3@@22 arg4@@13 arg5@@3 arg6@@2 arg7@@0 arg8@@0)) )))
(assert (forall ((t0@@59 T@U) (t1@@35 T@U) (t2@@16 T@U) (t3@@1 T@U) (heap@@18 T@U) (h@@43 T@U) (r@@23 T@U) (rd@@10 T@U) (bx0@@33 T@U) (bx1@@17 T@U) (bx2@@1 T@U) (bx@@60 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@59) TyType) (= (type t1@@35) TyType)) (= (type t2@@16) TyType)) (= (type t3@@1) TyType)) (= (type heap@@18) (MapType0Type refType MapType1Type))) (= (type h@@43) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@23) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@10) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@33) BoxType)) (= (type bx1@@17) BoxType)) (= (type bx2@@1) BoxType)) (= (type bx@@60) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads3 t0@@59 t1@@35 t2@@16 t3@@1 heap@@18 (Handle3 h@@43 r@@23 rd@@10) bx0@@33 bx1@@17 bx2@@1) bx@@60)) (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@18 bx0@@33 bx1@@17 bx2@@1) bx@@60))) (=> (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@18 bx0@@33 bx1@@17 bx2@@1) bx@@60)) (U_2_bool (MapType0Select (Reads3 t0@@59 t1@@35 t2@@16 t3@@1 heap@@18 (Handle3 h@@43 r@@23 rd@@10) bx0@@33 bx1@@17 bx2@@1) bx@@60))))) :qid |unknown.0:0| :skolemid |7151| :pattern ( (MapType0Select (Reads3 t0@@59 t1@@35 t2@@16 t3@@1 heap@@18 (Handle3 h@@43 r@@23 rd@@10) bx0@@33 bx1@@17 bx2@@1) bx@@60)) )))
(assert (forall ((t0@@60 T@U) (t1@@36 T@U) (t2@@17 T@U) (t3@@2 T@U) (h0@@18 T@U) (h1@@18 T@U) (f@@41 T@U) (bx0@@34 T@U) (bx1@@18 T@U) (bx2@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@60) TyType) (= (type t1@@36) TyType)) (= (type t2@@17) TyType)) (= (type t3@@2) TyType)) (= (type h0@@18) (MapType0Type refType MapType1Type))) (= (type h1@@18) (MapType0Type refType MapType1Type))) (= (type f@@41) HandleTypeType)) (= (type bx0@@34) BoxType)) (= (type bx1@@18) BoxType)) (= (type bx2@@2) BoxType)) (and (and (and ($HeapSucc h0@@18 h1@@18) (and ($IsGoodHeap h0@@18) ($IsGoodHeap h1@@18))) (and (and (and ($IsBox bx0@@34 t0@@60) ($IsBox bx1@@18 t1@@36)) ($IsBox bx2@@2 t2@@17)) ($Is f@@41 (Tclass._System.___hFunc3 t0@@60 t1@@36 t2@@17 t3@@2)))) (forall ((o@@72 T@U) (fld@@17 T@U) ) (! (let ((a@@102 (FieldTypeInv0 (type fld@@17)))) (=> (and (and (= (type o@@72) refType) (= (type fld@@17) (FieldType a@@102))) (and (not (= o@@72 null)) (U_2_bool (MapType0Select (Reads3 t0@@60 t1@@36 t2@@17 t3@@2 h0@@18 f@@41 bx0@@34 bx1@@18 bx2@@2) ($Box o@@72))))) (= (MapType1Select (MapType0Select h0@@18 o@@72) fld@@17) (MapType1Select (MapType0Select h1@@18 o@@72) fld@@17)))) :qid |unknown.0:0| :skolemid |7152| :no-pattern (type o@@72) :no-pattern (type fld@@17) :no-pattern (U_2_int o@@72) :no-pattern (U_2_bool o@@72) :no-pattern (U_2_int fld@@17) :no-pattern (U_2_bool fld@@17) )))) (= (Reads3 t0@@60 t1@@36 t2@@17 t3@@2 h0@@18 f@@41 bx0@@34 bx1@@18 bx2@@2) (Reads3 t0@@60 t1@@36 t2@@17 t3@@2 h1@@18 f@@41 bx0@@34 bx1@@18 bx2@@2))) :qid |unknown.0:0| :skolemid |7153| :pattern ( ($HeapSucc h0@@18 h1@@18) (Reads3 t0@@60 t1@@36 t2@@17 t3@@2 h1@@18 f@@41 bx0@@34 bx1@@18 bx2@@2)) )))
(assert (forall ((t0@@61 T@U) (t1@@37 T@U) (t2@@18 T@U) (t3@@3 T@U) (h0@@19 T@U) (h1@@19 T@U) (f@@42 T@U) (bx0@@35 T@U) (bx1@@19 T@U) (bx2@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@61) TyType) (= (type t1@@37) TyType)) (= (type t2@@18) TyType)) (= (type t3@@3) TyType)) (= (type h0@@19) (MapType0Type refType MapType1Type))) (= (type h1@@19) (MapType0Type refType MapType1Type))) (= (type f@@42) HandleTypeType)) (= (type bx0@@35) BoxType)) (= (type bx1@@19) BoxType)) (= (type bx2@@3) BoxType)) (and (and (and ($HeapSucc h0@@19 h1@@19) (and ($IsGoodHeap h0@@19) ($IsGoodHeap h1@@19))) (and (and (and ($IsBox bx0@@35 t0@@61) ($IsBox bx1@@19 t1@@37)) ($IsBox bx2@@3 t2@@18)) ($Is f@@42 (Tclass._System.___hFunc3 t0@@61 t1@@37 t2@@18 t3@@3)))) (forall ((o@@73 T@U) (fld@@18 T@U) ) (! (let ((a@@103 (FieldTypeInv0 (type fld@@18)))) (=> (and (and (= (type o@@73) refType) (= (type fld@@18) (FieldType a@@103))) (and (not (= o@@73 null)) (U_2_bool (MapType0Select (Reads3 t0@@61 t1@@37 t2@@18 t3@@3 h1@@19 f@@42 bx0@@35 bx1@@19 bx2@@3) ($Box o@@73))))) (= (MapType1Select (MapType0Select h0@@19 o@@73) fld@@18) (MapType1Select (MapType0Select h1@@19 o@@73) fld@@18)))) :qid |unknown.0:0| :skolemid |7154| :no-pattern (type o@@73) :no-pattern (type fld@@18) :no-pattern (U_2_int o@@73) :no-pattern (U_2_bool o@@73) :no-pattern (U_2_int fld@@18) :no-pattern (U_2_bool fld@@18) )))) (= (Reads3 t0@@61 t1@@37 t2@@18 t3@@3 h0@@19 f@@42 bx0@@35 bx1@@19 bx2@@3) (Reads3 t0@@61 t1@@37 t2@@18 t3@@3 h1@@19 f@@42 bx0@@35 bx1@@19 bx2@@3))) :qid |unknown.0:0| :skolemid |7155| :pattern ( ($HeapSucc h0@@19 h1@@19) (Reads3 t0@@61 t1@@37 t2@@18 t3@@3 h1@@19 f@@42 bx0@@35 bx1@@19 bx2@@3)) )))
(assert (forall ((t0@@62 T@U) (t1@@38 T@U) (t2@@19 T@U) (t3@@4 T@U) (h0@@20 T@U) (h1@@20 T@U) (f@@43 T@U) (bx0@@36 T@U) (bx1@@20 T@U) (bx2@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@62) TyType) (= (type t1@@38) TyType)) (= (type t2@@19) TyType)) (= (type t3@@4) TyType)) (= (type h0@@20) (MapType0Type refType MapType1Type))) (= (type h1@@20) (MapType0Type refType MapType1Type))) (= (type f@@43) HandleTypeType)) (= (type bx0@@36) BoxType)) (= (type bx1@@20) BoxType)) (= (type bx2@@4) BoxType)) (and (and (and ($HeapSucc h0@@20 h1@@20) (and ($IsGoodHeap h0@@20) ($IsGoodHeap h1@@20))) (and (and (and ($IsBox bx0@@36 t0@@62) ($IsBox bx1@@20 t1@@38)) ($IsBox bx2@@4 t2@@19)) ($Is f@@43 (Tclass._System.___hFunc3 t0@@62 t1@@38 t2@@19 t3@@4)))) (forall ((o@@74 T@U) (fld@@19 T@U) ) (! (let ((a@@104 (FieldTypeInv0 (type fld@@19)))) (=> (and (and (= (type o@@74) refType) (= (type fld@@19) (FieldType a@@104))) (and (not (= o@@74 null)) (U_2_bool (MapType0Select (Reads3 t0@@62 t1@@38 t2@@19 t3@@4 h0@@20 f@@43 bx0@@36 bx1@@20 bx2@@4) ($Box o@@74))))) (= (MapType1Select (MapType0Select h0@@20 o@@74) fld@@19) (MapType1Select (MapType0Select h1@@20 o@@74) fld@@19)))) :qid |unknown.0:0| :skolemid |7156| :no-pattern (type o@@74) :no-pattern (type fld@@19) :no-pattern (U_2_int o@@74) :no-pattern (U_2_bool o@@74) :no-pattern (U_2_int fld@@19) :no-pattern (U_2_bool fld@@19) )))) (and (=> (Requires3 t0@@62 t1@@38 t2@@19 t3@@4 h0@@20 f@@43 bx0@@36 bx1@@20 bx2@@4) (Requires3 t0@@62 t1@@38 t2@@19 t3@@4 h1@@20 f@@43 bx0@@36 bx1@@20 bx2@@4)) (=> (Requires3 t0@@62 t1@@38 t2@@19 t3@@4 h1@@20 f@@43 bx0@@36 bx1@@20 bx2@@4) (Requires3 t0@@62 t1@@38 t2@@19 t3@@4 h0@@20 f@@43 bx0@@36 bx1@@20 bx2@@4)))) :qid |unknown.0:0| :skolemid |7157| :pattern ( ($HeapSucc h0@@20 h1@@20) (Requires3 t0@@62 t1@@38 t2@@19 t3@@4 h1@@20 f@@43 bx0@@36 bx1@@20 bx2@@4)) )))
(assert (forall ((t0@@63 T@U) (t1@@39 T@U) (t2@@20 T@U) (t3@@5 T@U) (h0@@21 T@U) (h1@@21 T@U) (f@@44 T@U) (bx0@@37 T@U) (bx1@@21 T@U) (bx2@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@63) TyType) (= (type t1@@39) TyType)) (= (type t2@@20) TyType)) (= (type t3@@5) TyType)) (= (type h0@@21) (MapType0Type refType MapType1Type))) (= (type h1@@21) (MapType0Type refType MapType1Type))) (= (type f@@44) HandleTypeType)) (= (type bx0@@37) BoxType)) (= (type bx1@@21) BoxType)) (= (type bx2@@5) BoxType)) (and (and (and ($HeapSucc h0@@21 h1@@21) (and ($IsGoodHeap h0@@21) ($IsGoodHeap h1@@21))) (and (and (and ($IsBox bx0@@37 t0@@63) ($IsBox bx1@@21 t1@@39)) ($IsBox bx2@@5 t2@@20)) ($Is f@@44 (Tclass._System.___hFunc3 t0@@63 t1@@39 t2@@20 t3@@5)))) (forall ((o@@75 T@U) (fld@@20 T@U) ) (! (let ((a@@105 (FieldTypeInv0 (type fld@@20)))) (=> (and (and (= (type o@@75) refType) (= (type fld@@20) (FieldType a@@105))) (and (not (= o@@75 null)) (U_2_bool (MapType0Select (Reads3 t0@@63 t1@@39 t2@@20 t3@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5) ($Box o@@75))))) (= (MapType1Select (MapType0Select h0@@21 o@@75) fld@@20) (MapType1Select (MapType0Select h1@@21 o@@75) fld@@20)))) :qid |unknown.0:0| :skolemid |7158| :no-pattern (type o@@75) :no-pattern (type fld@@20) :no-pattern (U_2_int o@@75) :no-pattern (U_2_bool o@@75) :no-pattern (U_2_int fld@@20) :no-pattern (U_2_bool fld@@20) )))) (and (=> (Requires3 t0@@63 t1@@39 t2@@20 t3@@5 h0@@21 f@@44 bx0@@37 bx1@@21 bx2@@5) (Requires3 t0@@63 t1@@39 t2@@20 t3@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5)) (=> (Requires3 t0@@63 t1@@39 t2@@20 t3@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5) (Requires3 t0@@63 t1@@39 t2@@20 t3@@5 h0@@21 f@@44 bx0@@37 bx1@@21 bx2@@5)))) :qid |unknown.0:0| :skolemid |7159| :pattern ( ($HeapSucc h0@@21 h1@@21) (Requires3 t0@@63 t1@@39 t2@@20 t3@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5)) )))
(assert (forall ((t0@@64 T@U) (t1@@40 T@U) (t2@@21 T@U) (t3@@6 T@U) (h0@@22 T@U) (h1@@22 T@U) (f@@45 T@U) (bx0@@38 T@U) (bx1@@22 T@U) (bx2@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@64) TyType) (= (type t1@@40) TyType)) (= (type t2@@21) TyType)) (= (type t3@@6) TyType)) (= (type h0@@22) (MapType0Type refType MapType1Type))) (= (type h1@@22) (MapType0Type refType MapType1Type))) (= (type f@@45) HandleTypeType)) (= (type bx0@@38) BoxType)) (= (type bx1@@22) BoxType)) (= (type bx2@@6) BoxType)) (and (and (and ($HeapSucc h0@@22 h1@@22) (and ($IsGoodHeap h0@@22) ($IsGoodHeap h1@@22))) (and (and (and ($IsBox bx0@@38 t0@@64) ($IsBox bx1@@22 t1@@40)) ($IsBox bx2@@6 t2@@21)) ($Is f@@45 (Tclass._System.___hFunc3 t0@@64 t1@@40 t2@@21 t3@@6)))) (forall ((o@@76 T@U) (fld@@21 T@U) ) (! (let ((a@@106 (FieldTypeInv0 (type fld@@21)))) (=> (and (and (= (type o@@76) refType) (= (type fld@@21) (FieldType a@@106))) (and (not (= o@@76 null)) (U_2_bool (MapType0Select (Reads3 t0@@64 t1@@40 t2@@21 t3@@6 h0@@22 f@@45 bx0@@38 bx1@@22 bx2@@6) ($Box o@@76))))) (= (MapType1Select (MapType0Select h0@@22 o@@76) fld@@21) (MapType1Select (MapType0Select h1@@22 o@@76) fld@@21)))) :qid |unknown.0:0| :skolemid |7160| :no-pattern (type o@@76) :no-pattern (type fld@@21) :no-pattern (U_2_int o@@76) :no-pattern (U_2_bool o@@76) :no-pattern (U_2_int fld@@21) :no-pattern (U_2_bool fld@@21) )))) (= (Apply3 t0@@64 t1@@40 t2@@21 t3@@6 h0@@22 f@@45 bx0@@38 bx1@@22 bx2@@6) (Apply3 t0@@64 t1@@40 t2@@21 t3@@6 h1@@22 f@@45 bx0@@38 bx1@@22 bx2@@6))) :qid |unknown.0:0| :skolemid |7161| :pattern ( ($HeapSucc h0@@22 h1@@22) (Apply3 t0@@64 t1@@40 t2@@21 t3@@6 h1@@22 f@@45 bx0@@38 bx1@@22 bx2@@6)) )))
(assert (forall ((t0@@65 T@U) (t1@@41 T@U) (t2@@22 T@U) (t3@@7 T@U) (h0@@23 T@U) (h1@@23 T@U) (f@@46 T@U) (bx0@@39 T@U) (bx1@@23 T@U) (bx2@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@65) TyType) (= (type t1@@41) TyType)) (= (type t2@@22) TyType)) (= (type t3@@7) TyType)) (= (type h0@@23) (MapType0Type refType MapType1Type))) (= (type h1@@23) (MapType0Type refType MapType1Type))) (= (type f@@46) HandleTypeType)) (= (type bx0@@39) BoxType)) (= (type bx1@@23) BoxType)) (= (type bx2@@7) BoxType)) (and (and (and ($HeapSucc h0@@23 h1@@23) (and ($IsGoodHeap h0@@23) ($IsGoodHeap h1@@23))) (and (and (and ($IsBox bx0@@39 t0@@65) ($IsBox bx1@@23 t1@@41)) ($IsBox bx2@@7 t2@@22)) ($Is f@@46 (Tclass._System.___hFunc3 t0@@65 t1@@41 t2@@22 t3@@7)))) (forall ((o@@77 T@U) (fld@@22 T@U) ) (! (let ((a@@107 (FieldTypeInv0 (type fld@@22)))) (=> (and (and (= (type o@@77) refType) (= (type fld@@22) (FieldType a@@107))) (and (not (= o@@77 null)) (U_2_bool (MapType0Select (Reads3 t0@@65 t1@@41 t2@@22 t3@@7 h1@@23 f@@46 bx0@@39 bx1@@23 bx2@@7) ($Box o@@77))))) (= (MapType1Select (MapType0Select h0@@23 o@@77) fld@@22) (MapType1Select (MapType0Select h1@@23 o@@77) fld@@22)))) :qid |unknown.0:0| :skolemid |7162| :no-pattern (type o@@77) :no-pattern (type fld@@22) :no-pattern (U_2_int o@@77) :no-pattern (U_2_bool o@@77) :no-pattern (U_2_int fld@@22) :no-pattern (U_2_bool fld@@22) )))) (= (Apply3 t0@@65 t1@@41 t2@@22 t3@@7 h0@@23 f@@46 bx0@@39 bx1@@23 bx2@@7) (Apply3 t0@@65 t1@@41 t2@@22 t3@@7 h1@@23 f@@46 bx0@@39 bx1@@23 bx2@@7))) :qid |unknown.0:0| :skolemid |7163| :pattern ( ($HeapSucc h0@@23 h1@@23) (Apply3 t0@@65 t1@@41 t2@@22 t3@@7 h1@@23 f@@46 bx0@@39 bx1@@23 bx2@@7)) )))
(assert (forall ((t0@@66 T@U) (t1@@42 T@U) (t2@@23 T@U) (t3@@8 T@U) (heap@@19 T@U) (f@@47 T@U) (bx0@@40 T@U) (bx1@@24 T@U) (bx2@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@66) TyType) (= (type t1@@42) TyType)) (= (type t2@@23) TyType)) (= (type t3@@8) TyType)) (= (type heap@@19) (MapType0Type refType MapType1Type))) (= (type f@@47) HandleTypeType)) (= (type bx0@@40) BoxType)) (= (type bx1@@24) BoxType)) (= (type bx2@@8) BoxType)) (and ($IsGoodHeap heap@@19) (and (and (and ($IsBox bx0@@40 t0@@66) ($IsBox bx1@@24 t1@@42)) ($IsBox bx2@@8 t2@@23)) ($Is f@@47 (Tclass._System.___hFunc3 t0@@66 t1@@42 t2@@23 t3@@8))))) (and (=> (|Set#Equal| (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 $OneHeap f@@47 bx0@@40 bx1@@24 bx2@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 heap@@19 f@@47 bx0@@40 bx1@@24 bx2@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 heap@@19 f@@47 bx0@@40 bx1@@24 bx2@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 $OneHeap f@@47 bx0@@40 bx1@@24 bx2@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |7164| :pattern ( (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 $OneHeap f@@47 bx0@@40 bx1@@24 bx2@@8) ($IsGoodHeap heap@@19)) :pattern ( (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 heap@@19 f@@47 bx0@@40 bx1@@24 bx2@@8)) )))
(assert (forall ((t0@@67 T@U) (t1@@43 T@U) (t2@@24 T@U) (t3@@9 T@U) (heap@@20 T@U) (f@@48 T@U) (bx0@@41 T@U) (bx1@@25 T@U) (bx2@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@67) TyType) (= (type t1@@43) TyType)) (= (type t2@@24) TyType)) (= (type t3@@9) TyType)) (= (type heap@@20) (MapType0Type refType MapType1Type))) (= (type f@@48) HandleTypeType)) (= (type bx0@@41) BoxType)) (= (type bx1@@25) BoxType)) (= (type bx2@@9) BoxType)) (and (and ($IsGoodHeap heap@@20) (and (and (and ($IsBox bx0@@41 t0@@67) ($IsBox bx1@@25 t1@@43)) ($IsBox bx2@@9 t2@@24)) ($Is f@@48 (Tclass._System.___hFunc3 t0@@67 t1@@43 t2@@24 t3@@9)))) (|Set#Equal| (Reads3 t0@@67 t1@@43 t2@@24 t3@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9) (|Set#Empty| BoxType)))) (and (=> (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9) (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 heap@@20 f@@48 bx0@@41 bx1@@25 bx2@@9)) (=> (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 heap@@20 f@@48 bx0@@41 bx1@@25 bx2@@9) (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9)))) :qid |unknown.0:0| :skolemid |7165| :pattern ( (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9) ($IsGoodHeap heap@@20)) :pattern ( (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 heap@@20 f@@48 bx0@@41 bx1@@25 bx2@@9)) )))
(assert (forall ((f@@49 T@U) (t0@@68 T@U) (t1@@44 T@U) (t2@@25 T@U) (t3@@10 T@U) ) (!  (=> (and (and (and (and (= (type f@@49) HandleTypeType) (= (type t0@@68) TyType)) (= (type t1@@44) TyType)) (= (type t2@@25) TyType)) (= (type t3@@10) TyType)) (and (=> ($Is f@@49 (Tclass._System.___hFunc3 t0@@68 t1@@44 t2@@25 t3@@10)) (forall ((h@@44 T@U) (bx0@@42 T@U) (bx1@@26 T@U) (bx2@@10 T@U) ) (!  (=> (and (and (and (and (= (type h@@44) (MapType0Type refType MapType1Type)) (= (type bx0@@42) BoxType)) (= (type bx1@@26) BoxType)) (= (type bx2@@10) BoxType)) (and (and ($IsGoodHeap h@@44) (and (and ($IsBox bx0@@42 t0@@68) ($IsBox bx1@@26 t1@@44)) ($IsBox bx2@@10 t2@@25))) (Requires3 t0@@68 t1@@44 t2@@25 t3@@10 h@@44 f@@49 bx0@@42 bx1@@26 bx2@@10))) ($IsBox (Apply3 t0@@68 t1@@44 t2@@25 t3@@10 h@@44 f@@49 bx0@@42 bx1@@26 bx2@@10) t3@@10)) :qid |DafnyPre.521:12| :skolemid |7166| :pattern ( (Apply3 t0@@68 t1@@44 t2@@25 t3@@10 h@@44 f@@49 bx0@@42 bx1@@26 bx2@@10)) ))) (=> (forall ((h@@45 T@U) (bx0@@43 T@U) (bx1@@27 T@U) (bx2@@11 T@U) ) (!  (=> (and (and (and (and (= (type h@@45) (MapType0Type refType MapType1Type)) (= (type bx0@@43) BoxType)) (= (type bx1@@27) BoxType)) (= (type bx2@@11) BoxType)) (and (and ($IsGoodHeap h@@45) (and (and ($IsBox bx0@@43 t0@@68) ($IsBox bx1@@27 t1@@44)) ($IsBox bx2@@11 t2@@25))) (Requires3 t0@@68 t1@@44 t2@@25 t3@@10 h@@45 f@@49 bx0@@43 bx1@@27 bx2@@11))) ($IsBox (Apply3 t0@@68 t1@@44 t2@@25 t3@@10 h@@45 f@@49 bx0@@43 bx1@@27 bx2@@11) t3@@10)) :qid |DafnyPre.521:12| :skolemid |7166| :pattern ( (Apply3 t0@@68 t1@@44 t2@@25 t3@@10 h@@45 f@@49 bx0@@43 bx1@@27 bx2@@11)) )) ($Is f@@49 (Tclass._System.___hFunc3 t0@@68 t1@@44 t2@@25 t3@@10))))) :qid |unknown.0:0| :skolemid |7167| :pattern ( ($Is f@@49 (Tclass._System.___hFunc3 t0@@68 t1@@44 t2@@25 t3@@10))) )))
(assert (forall ((f@@50 T@U) (t0@@69 T@U) (t1@@45 T@U) (t2@@26 T@U) (t3@@11 T@U) (u0@@2 T@U) (u1@@1 T@U) (u2@@0 T@U) (u3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@50) HandleTypeType) (= (type t0@@69) TyType)) (= (type t1@@45) TyType)) (= (type t2@@26) TyType)) (= (type t3@@11) TyType)) (= (type u0@@2) TyType)) (= (type u1@@1) TyType)) (= (type u2@@0) TyType)) (= (type u3) TyType)) (and (and (and (and ($Is f@@50 (Tclass._System.___hFunc3 t0@@69 t1@@45 t2@@26 t3@@11)) (forall ((bx@@61 T@U) ) (!  (=> (and (= (type bx@@61) BoxType) ($IsBox bx@@61 u0@@2)) ($IsBox bx@@61 t0@@69)) :qid |unknown.0:0| :skolemid |7168| :pattern ( ($IsBox bx@@61 u0@@2)) :pattern ( ($IsBox bx@@61 t0@@69)) ))) (forall ((bx@@62 T@U) ) (!  (=> (and (= (type bx@@62) BoxType) ($IsBox bx@@62 u1@@1)) ($IsBox bx@@62 t1@@45)) :qid |unknown.0:0| :skolemid |7169| :pattern ( ($IsBox bx@@62 u1@@1)) :pattern ( ($IsBox bx@@62 t1@@45)) ))) (forall ((bx@@63 T@U) ) (!  (=> (and (= (type bx@@63) BoxType) ($IsBox bx@@63 u2@@0)) ($IsBox bx@@63 t2@@26)) :qid |unknown.0:0| :skolemid |7170| :pattern ( ($IsBox bx@@63 u2@@0)) :pattern ( ($IsBox bx@@63 t2@@26)) ))) (forall ((bx@@64 T@U) ) (!  (=> (and (= (type bx@@64) BoxType) ($IsBox bx@@64 t3@@11)) ($IsBox bx@@64 u3)) :qid |unknown.0:0| :skolemid |7171| :pattern ( ($IsBox bx@@64 t3@@11)) :pattern ( ($IsBox bx@@64 u3)) )))) ($Is f@@50 (Tclass._System.___hFunc3 u0@@2 u1@@1 u2@@0 u3))) :qid |unknown.0:0| :skolemid |7172| :pattern ( ($Is f@@50 (Tclass._System.___hFunc3 t0@@69 t1@@45 t2@@26 t3@@11)) ($Is f@@50 (Tclass._System.___hFunc3 u0@@2 u1@@1 u2@@0 u3))) )))
(assert (forall ((f@@51 T@U) (t0@@70 T@U) (t1@@46 T@U) (t2@@27 T@U) (t3@@12 T@U) (h@@46 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@51) HandleTypeType) (= (type t0@@70) TyType)) (= (type t1@@46) TyType)) (= (type t2@@27) TyType)) (= (type t3@@12) TyType)) (= (type h@@46) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@46)) (and (=> ($IsAlloc f@@51 (Tclass._System.___hFunc3 t0@@70 t1@@46 t2@@27 t3@@12) h@@46) (forall ((bx0@@44 T@U) (bx1@@28 T@U) (bx2@@12 T@U) ) (!  (=> (and (and (= (type bx0@@44) BoxType) (= (type bx1@@28) BoxType)) (= (type bx2@@12) BoxType)) (=> (and (and (and (and ($IsBox bx0@@44 t0@@70) ($IsAllocBox bx0@@44 t0@@70 h@@46)) (and ($IsBox bx1@@28 t1@@46) ($IsAllocBox bx1@@28 t1@@46 h@@46))) (and ($IsBox bx2@@12 t2@@27) ($IsAllocBox bx2@@12 t2@@27 h@@46))) (Requires3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12)) (forall ((r@@24 T@U) ) (!  (=> (= (type r@@24) refType) (=> (and (not (= r@@24 null)) (U_2_bool (MapType0Select (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12) ($Box r@@24)))) (U_2_bool (MapType1Select (MapType0Select h@@46 r@@24) alloc)))) :qid |unknown.0:0| :skolemid |7173| :pattern ( (MapType0Select (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12) ($Box r@@24))) )))) :qid |unknown.0:0| :skolemid |7174| :pattern ( (Apply3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12)) :pattern ( (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12)) ))) (=> (forall ((bx0@@45 T@U) (bx1@@29 T@U) (bx2@@13 T@U) ) (!  (=> (and (and (= (type bx0@@45) BoxType) (= (type bx1@@29) BoxType)) (= (type bx2@@13) BoxType)) (=> (and (and (and (and ($IsBox bx0@@45 t0@@70) ($IsAllocBox bx0@@45 t0@@70 h@@46)) (and ($IsBox bx1@@29 t1@@46) ($IsAllocBox bx1@@29 t1@@46 h@@46))) (and ($IsBox bx2@@13 t2@@27) ($IsAllocBox bx2@@13 t2@@27 h@@46))) (Requires3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13)) (forall ((r@@25 T@U) ) (!  (=> (= (type r@@25) refType) (=> (and (not (= r@@25 null)) (U_2_bool (MapType0Select (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13) ($Box r@@25)))) (U_2_bool (MapType1Select (MapType0Select h@@46 r@@25) alloc)))) :qid |unknown.0:0| :skolemid |7173| :pattern ( (MapType0Select (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13) ($Box r@@25))) )))) :qid |unknown.0:0| :skolemid |7174| :pattern ( (Apply3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13)) :pattern ( (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13)) )) ($IsAlloc f@@51 (Tclass._System.___hFunc3 t0@@70 t1@@46 t2@@27 t3@@12) h@@46)))) :qid |unknown.0:0| :skolemid |7175| :pattern ( ($IsAlloc f@@51 (Tclass._System.___hFunc3 t0@@70 t1@@46 t2@@27 t3@@12) h@@46)) )))
(assert (forall ((f@@52 T@U) (t0@@71 T@U) (t1@@47 T@U) (t2@@28 T@U) (t3@@13 T@U) (h@@47 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@52) HandleTypeType) (= (type t0@@71) TyType)) (= (type t1@@47) TyType)) (= (type t2@@28) TyType)) (= (type t3@@13) TyType)) (= (type h@@47) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@47) ($IsAlloc f@@52 (Tclass._System.___hFunc3 t0@@71 t1@@47 t2@@28 t3@@13) h@@47))) (forall ((bx0@@46 T@U) (bx1@@30 T@U) (bx2@@14 T@U) ) (!  (=> (and (and (= (type bx0@@46) BoxType) (= (type bx1@@30) BoxType)) (= (type bx2@@14) BoxType)) (=> (and (and (and ($IsAllocBox bx0@@46 t0@@71 h@@47) ($IsAllocBox bx1@@30 t1@@47 h@@47)) ($IsAllocBox bx2@@14 t2@@28 h@@47)) (Requires3 t0@@71 t1@@47 t2@@28 t3@@13 h@@47 f@@52 bx0@@46 bx1@@30 bx2@@14)) ($IsAllocBox (Apply3 t0@@71 t1@@47 t2@@28 t3@@13 h@@47 f@@52 bx0@@46 bx1@@30 bx2@@14) t3@@13 h@@47))) :qid |unknown.0:0| :skolemid |7176| :pattern ( (Apply3 t0@@71 t1@@47 t2@@28 t3@@13 h@@47 f@@52 bx0@@46 bx1@@30 bx2@@14)) ))) :qid |unknown.0:0| :skolemid |7177| :pattern ( ($IsAlloc f@@52 (Tclass._System.___hFunc3 t0@@71 t1@@47 t2@@28 t3@@13) h@@47)) )))
(assert (forall ((arg0@@177 T@U) (arg1@@88 T@U) (arg2@@44 T@U) (arg3@@23 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3 arg0@@177 arg1@@88 arg2@@44 arg3@@23)) TyType) :qid |funType:Tclass._System.___hPartialFunc3| :pattern ( (Tclass._System.___hPartialFunc3 arg0@@177 arg1@@88 arg2@@44 arg3@@23)) )))
(assert (forall ((|#$T0@@49| T@U) (|#$T1@@33| T@U) (|#$T2@@5| T@U) (|#$R@@53| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@49|) TyType) (= (type |#$T1@@33|) TyType)) (= (type |#$T2@@5|) TyType)) (= (type |#$R@@53|) TyType)) (= (Tag (Tclass._System.___hPartialFunc3 |#$T0@@49| |#$T1@@33| |#$T2@@5| |#$R@@53|)) Tagclass._System.___hPartialFunc3)) :qid |unknown.0:0| :skolemid |7178| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@49| |#$T1@@33| |#$T2@@5| |#$R@@53|)) )))
(assert (forall ((arg0@@178 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_0 arg0@@178)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_0| :pattern ( (Tclass._System.___hPartialFunc3_0 arg0@@178)) )))
(assert (forall ((|#$T0@@50| T@U) (|#$T1@@34| T@U) (|#$T2@@6| T@U) (|#$R@@54| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@50|) TyType) (= (type |#$T1@@34|) TyType)) (= (type |#$T2@@6|) TyType)) (= (type |#$R@@54|) TyType)) (= (Tclass._System.___hPartialFunc3_0 (Tclass._System.___hPartialFunc3 |#$T0@@50| |#$T1@@34| |#$T2@@6| |#$R@@54|)) |#$T0@@50|)) :qid |unknown.0:0| :skolemid |7179| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@50| |#$T1@@34| |#$T2@@6| |#$R@@54|)) )))
(assert (forall ((arg0@@179 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_1 arg0@@179)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_1| :pattern ( (Tclass._System.___hPartialFunc3_1 arg0@@179)) )))
(assert (forall ((|#$T0@@51| T@U) (|#$T1@@35| T@U) (|#$T2@@7| T@U) (|#$R@@55| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@51|) TyType) (= (type |#$T1@@35|) TyType)) (= (type |#$T2@@7|) TyType)) (= (type |#$R@@55|) TyType)) (= (Tclass._System.___hPartialFunc3_1 (Tclass._System.___hPartialFunc3 |#$T0@@51| |#$T1@@35| |#$T2@@7| |#$R@@55|)) |#$T1@@35|)) :qid |unknown.0:0| :skolemid |7180| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@51| |#$T1@@35| |#$T2@@7| |#$R@@55|)) )))
(assert (forall ((arg0@@180 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_2 arg0@@180)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_2| :pattern ( (Tclass._System.___hPartialFunc3_2 arg0@@180)) )))
(assert (forall ((|#$T0@@52| T@U) (|#$T1@@36| T@U) (|#$T2@@8| T@U) (|#$R@@56| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@52|) TyType) (= (type |#$T1@@36|) TyType)) (= (type |#$T2@@8|) TyType)) (= (type |#$R@@56|) TyType)) (= (Tclass._System.___hPartialFunc3_2 (Tclass._System.___hPartialFunc3 |#$T0@@52| |#$T1@@36| |#$T2@@8| |#$R@@56|)) |#$T2@@8|)) :qid |unknown.0:0| :skolemid |7181| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@52| |#$T1@@36| |#$T2@@8| |#$R@@56|)) )))
(assert (forall ((arg0@@181 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_3 arg0@@181)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_3| :pattern ( (Tclass._System.___hPartialFunc3_3 arg0@@181)) )))
(assert (forall ((|#$T0@@53| T@U) (|#$T1@@37| T@U) (|#$T2@@9| T@U) (|#$R@@57| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@53|) TyType) (= (type |#$T1@@37|) TyType)) (= (type |#$T2@@9|) TyType)) (= (type |#$R@@57|) TyType)) (= (Tclass._System.___hPartialFunc3_3 (Tclass._System.___hPartialFunc3 |#$T0@@53| |#$T1@@37| |#$T2@@9| |#$R@@57|)) |#$R@@57|)) :qid |unknown.0:0| :skolemid |7182| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@53| |#$T1@@37| |#$T2@@9| |#$R@@57|)) )))
(assert (forall ((|#$T0@@54| T@U) (|#$T1@@38| T@U) (|#$T2@@10| T@U) (|#$R@@58| T@U) (bx@@65 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@54|) TyType) (= (type |#$T1@@38|) TyType)) (= (type |#$T2@@10|) TyType)) (= (type |#$R@@58|) TyType)) (= (type bx@@65) BoxType)) ($IsBox bx@@65 (Tclass._System.___hPartialFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@10| |#$R@@58|))) (and (= ($Box ($Unbox HandleTypeType bx@@65)) bx@@65) ($Is ($Unbox HandleTypeType bx@@65) (Tclass._System.___hPartialFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@10| |#$R@@58|)))) :qid |unknown.0:0| :skolemid |7183| :pattern ( ($IsBox bx@@65 (Tclass._System.___hPartialFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@10| |#$R@@58|))) )))
(assert (forall ((|#$T0@@55| T@U) (|#$T1@@39| T@U) (|#$T2@@11| T@U) (|#$R@@59| T@U) (|f#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@55|) TyType) (= (type |#$T1@@39|) TyType)) (= (type |#$T2@@11|) TyType)) (= (type |#$R@@59|) TyType)) (= (type |f#0@@11|) HandleTypeType)) (and (=> ($Is |f#0@@11| (Tclass._System.___hPartialFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@11| |#$R@@59|)) (and ($Is |f#0@@11| (Tclass._System.___hFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@11| |#$R@@59|)) (forall ((|x0#0@@7| T@U) (|x1#0@@3| T@U) (|x2#0| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@7|) BoxType) (= (type |x1#0@@3|) BoxType)) (= (type |x2#0|) BoxType)) (and (and ($IsBox |x0#0@@7| |#$T0@@55|) ($IsBox |x1#0@@3| |#$T1@@39|)) ($IsBox |x2#0| |#$T2@@11|))) (|Set#Equal| (Reads3 |#$T0@@55| |#$T1@@39| |#$T2@@11| |#$R@@59| $OneHeap |f#0@@11| |x0#0@@7| |x1#0@@3| |x2#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |7184| :no-pattern (type |x0#0@@7|) :no-pattern (type |x1#0@@3|) :no-pattern (type |x2#0|) :no-pattern (U_2_int |x0#0@@7|) :no-pattern (U_2_bool |x0#0@@7|) :no-pattern (U_2_int |x1#0@@3|) :no-pattern (U_2_bool |x1#0@@3|) :no-pattern (U_2_int |x2#0|) :no-pattern (U_2_bool |x2#0|) )))) (=> (and ($Is |f#0@@11| (Tclass._System.___hFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@11| |#$R@@59|)) (forall ((|x0#0@@8| T@U) (|x1#0@@4| T@U) (|x2#0@@0| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@8|) BoxType) (= (type |x1#0@@4|) BoxType)) (= (type |x2#0@@0|) BoxType)) (and (and ($IsBox |x0#0@@8| |#$T0@@55|) ($IsBox |x1#0@@4| |#$T1@@39|)) ($IsBox |x2#0@@0| |#$T2@@11|))) (|Set#Equal| (Reads3 |#$T0@@55| |#$T1@@39| |#$T2@@11| |#$R@@59| $OneHeap |f#0@@11| |x0#0@@8| |x1#0@@4| |x2#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |7184| :no-pattern (type |x0#0@@8|) :no-pattern (type |x1#0@@4|) :no-pattern (type |x2#0@@0|) :no-pattern (U_2_int |x0#0@@8|) :no-pattern (U_2_bool |x0#0@@8|) :no-pattern (U_2_int |x1#0@@4|) :no-pattern (U_2_bool |x1#0@@4|) :no-pattern (U_2_int |x2#0@@0|) :no-pattern (U_2_bool |x2#0@@0|) ))) ($Is |f#0@@11| (Tclass._System.___hPartialFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@11| |#$R@@59|))))) :qid |unknown.0:0| :skolemid |7185| :pattern ( ($Is |f#0@@11| (Tclass._System.___hPartialFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@11| |#$R@@59|))) )))
(assert (forall ((|#$T0@@56| T@U) (|#$T1@@40| T@U) (|#$T2@@12| T@U) (|#$R@@60| T@U) (|f#0@@12| T@U) ($h@@17 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@56|) TyType) (= (type |#$T1@@40|) TyType)) (= (type |#$T2@@12|) TyType)) (= (type |#$R@@60|) TyType)) (= (type |f#0@@12|) HandleTypeType)) (= (type $h@@17) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc3 |#$T0@@56| |#$T1@@40| |#$T2@@12| |#$R@@60|) $h@@17) ($IsAlloc |f#0@@12| (Tclass._System.___hFunc3 |#$T0@@56| |#$T1@@40| |#$T2@@12| |#$R@@60|) $h@@17)) (=> ($IsAlloc |f#0@@12| (Tclass._System.___hFunc3 |#$T0@@56| |#$T1@@40| |#$T2@@12| |#$R@@60|) $h@@17) ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc3 |#$T0@@56| |#$T1@@40| |#$T2@@12| |#$R@@60|) $h@@17)))) :qid |unknown.0:0| :skolemid |7186| :pattern ( ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc3 |#$T0@@56| |#$T1@@40| |#$T2@@12| |#$R@@60|) $h@@17)) )))
(assert (forall ((arg0@@182 T@U) (arg1@@89 T@U) (arg2@@45 T@U) (arg3@@24 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3 arg0@@182 arg1@@89 arg2@@45 arg3@@24)) TyType) :qid |funType:Tclass._System.___hTotalFunc3| :pattern ( (Tclass._System.___hTotalFunc3 arg0@@182 arg1@@89 arg2@@45 arg3@@24)) )))
(assert (forall ((|#$T0@@57| T@U) (|#$T1@@41| T@U) (|#$T2@@13| T@U) (|#$R@@61| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@57|) TyType) (= (type |#$T1@@41|) TyType)) (= (type |#$T2@@13|) TyType)) (= (type |#$R@@61|) TyType)) (= (Tag (Tclass._System.___hTotalFunc3 |#$T0@@57| |#$T1@@41| |#$T2@@13| |#$R@@61|)) Tagclass._System.___hTotalFunc3)) :qid |unknown.0:0| :skolemid |7187| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@57| |#$T1@@41| |#$T2@@13| |#$R@@61|)) )))
(assert (forall ((arg0@@183 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_0 arg0@@183)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_0| :pattern ( (Tclass._System.___hTotalFunc3_0 arg0@@183)) )))
(assert (forall ((|#$T0@@58| T@U) (|#$T1@@42| T@U) (|#$T2@@14| T@U) (|#$R@@62| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@58|) TyType) (= (type |#$T1@@42|) TyType)) (= (type |#$T2@@14|) TyType)) (= (type |#$R@@62|) TyType)) (= (Tclass._System.___hTotalFunc3_0 (Tclass._System.___hTotalFunc3 |#$T0@@58| |#$T1@@42| |#$T2@@14| |#$R@@62|)) |#$T0@@58|)) :qid |unknown.0:0| :skolemid |7188| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@58| |#$T1@@42| |#$T2@@14| |#$R@@62|)) )))
(assert (forall ((arg0@@184 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_1 arg0@@184)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_1| :pattern ( (Tclass._System.___hTotalFunc3_1 arg0@@184)) )))
(assert (forall ((|#$T0@@59| T@U) (|#$T1@@43| T@U) (|#$T2@@15| T@U) (|#$R@@63| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@59|) TyType) (= (type |#$T1@@43|) TyType)) (= (type |#$T2@@15|) TyType)) (= (type |#$R@@63|) TyType)) (= (Tclass._System.___hTotalFunc3_1 (Tclass._System.___hTotalFunc3 |#$T0@@59| |#$T1@@43| |#$T2@@15| |#$R@@63|)) |#$T1@@43|)) :qid |unknown.0:0| :skolemid |7189| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@59| |#$T1@@43| |#$T2@@15| |#$R@@63|)) )))
(assert (forall ((arg0@@185 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_2 arg0@@185)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_2| :pattern ( (Tclass._System.___hTotalFunc3_2 arg0@@185)) )))
(assert (forall ((|#$T0@@60| T@U) (|#$T1@@44| T@U) (|#$T2@@16| T@U) (|#$R@@64| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@60|) TyType) (= (type |#$T1@@44|) TyType)) (= (type |#$T2@@16|) TyType)) (= (type |#$R@@64|) TyType)) (= (Tclass._System.___hTotalFunc3_2 (Tclass._System.___hTotalFunc3 |#$T0@@60| |#$T1@@44| |#$T2@@16| |#$R@@64|)) |#$T2@@16|)) :qid |unknown.0:0| :skolemid |7190| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@60| |#$T1@@44| |#$T2@@16| |#$R@@64|)) )))
(assert (forall ((arg0@@186 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_3 arg0@@186)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_3| :pattern ( (Tclass._System.___hTotalFunc3_3 arg0@@186)) )))
(assert (forall ((|#$T0@@61| T@U) (|#$T1@@45| T@U) (|#$T2@@17| T@U) (|#$R@@65| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@61|) TyType) (= (type |#$T1@@45|) TyType)) (= (type |#$T2@@17|) TyType)) (= (type |#$R@@65|) TyType)) (= (Tclass._System.___hTotalFunc3_3 (Tclass._System.___hTotalFunc3 |#$T0@@61| |#$T1@@45| |#$T2@@17| |#$R@@65|)) |#$R@@65|)) :qid |unknown.0:0| :skolemid |7191| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@61| |#$T1@@45| |#$T2@@17| |#$R@@65|)) )))
(assert (forall ((|#$T0@@62| T@U) (|#$T1@@46| T@U) (|#$T2@@18| T@U) (|#$R@@66| T@U) (bx@@66 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@62|) TyType) (= (type |#$T1@@46|) TyType)) (= (type |#$T2@@18|) TyType)) (= (type |#$R@@66|) TyType)) (= (type bx@@66) BoxType)) ($IsBox bx@@66 (Tclass._System.___hTotalFunc3 |#$T0@@62| |#$T1@@46| |#$T2@@18| |#$R@@66|))) (and (= ($Box ($Unbox HandleTypeType bx@@66)) bx@@66) ($Is ($Unbox HandleTypeType bx@@66) (Tclass._System.___hTotalFunc3 |#$T0@@62| |#$T1@@46| |#$T2@@18| |#$R@@66|)))) :qid |unknown.0:0| :skolemid |7192| :pattern ( ($IsBox bx@@66 (Tclass._System.___hTotalFunc3 |#$T0@@62| |#$T1@@46| |#$T2@@18| |#$R@@66|))) )))
(assert (forall ((|#$T0@@63| T@U) (|#$T1@@47| T@U) (|#$T2@@19| T@U) (|#$R@@67| T@U) (|f#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@63|) TyType) (= (type |#$T1@@47|) TyType)) (= (type |#$T2@@19|) TyType)) (= (type |#$R@@67|) TyType)) (= (type |f#0@@13|) HandleTypeType)) (and (=> ($Is |f#0@@13| (Tclass._System.___hTotalFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@19| |#$R@@67|)) (and ($Is |f#0@@13| (Tclass._System.___hPartialFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@19| |#$R@@67|)) (forall ((|x0#0@@9| T@U) (|x1#0@@5| T@U) (|x2#0@@1| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@9|) BoxType) (= (type |x1#0@@5|) BoxType)) (= (type |x2#0@@1|) BoxType)) (and (and ($IsBox |x0#0@@9| |#$T0@@63|) ($IsBox |x1#0@@5| |#$T1@@47|)) ($IsBox |x2#0@@1| |#$T2@@19|))) (Requires3 |#$T0@@63| |#$T1@@47| |#$T2@@19| |#$R@@67| $OneHeap |f#0@@13| |x0#0@@9| |x1#0@@5| |x2#0@@1|)) :qid |unknown.0:0| :skolemid |7193| :no-pattern (type |x0#0@@9|) :no-pattern (type |x1#0@@5|) :no-pattern (type |x2#0@@1|) :no-pattern (U_2_int |x0#0@@9|) :no-pattern (U_2_bool |x0#0@@9|) :no-pattern (U_2_int |x1#0@@5|) :no-pattern (U_2_bool |x1#0@@5|) :no-pattern (U_2_int |x2#0@@1|) :no-pattern (U_2_bool |x2#0@@1|) )))) (=> (and ($Is |f#0@@13| (Tclass._System.___hPartialFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@19| |#$R@@67|)) (forall ((|x0#0@@10| T@U) (|x1#0@@6| T@U) (|x2#0@@2| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@10|) BoxType) (= (type |x1#0@@6|) BoxType)) (= (type |x2#0@@2|) BoxType)) (and (and ($IsBox |x0#0@@10| |#$T0@@63|) ($IsBox |x1#0@@6| |#$T1@@47|)) ($IsBox |x2#0@@2| |#$T2@@19|))) (Requires3 |#$T0@@63| |#$T1@@47| |#$T2@@19| |#$R@@67| $OneHeap |f#0@@13| |x0#0@@10| |x1#0@@6| |x2#0@@2|)) :qid |unknown.0:0| :skolemid |7193| :no-pattern (type |x0#0@@10|) :no-pattern (type |x1#0@@6|) :no-pattern (type |x2#0@@2|) :no-pattern (U_2_int |x0#0@@10|) :no-pattern (U_2_bool |x0#0@@10|) :no-pattern (U_2_int |x1#0@@6|) :no-pattern (U_2_bool |x1#0@@6|) :no-pattern (U_2_int |x2#0@@2|) :no-pattern (U_2_bool |x2#0@@2|) ))) ($Is |f#0@@13| (Tclass._System.___hTotalFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@19| |#$R@@67|))))) :qid |unknown.0:0| :skolemid |7194| :pattern ( ($Is |f#0@@13| (Tclass._System.___hTotalFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@19| |#$R@@67|))) )))
(assert (forall ((|#$T0@@64| T@U) (|#$T1@@48| T@U) (|#$T2@@20| T@U) (|#$R@@68| T@U) (|f#0@@14| T@U) ($h@@18 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@64|) TyType) (= (type |#$T1@@48|) TyType)) (= (type |#$T2@@20|) TyType)) (= (type |#$R@@68|) TyType)) (= (type |f#0@@14|) HandleTypeType)) (= (type $h@@18) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@20| |#$R@@68|) $h@@18) ($IsAlloc |f#0@@14| (Tclass._System.___hPartialFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@20| |#$R@@68|) $h@@18)) (=> ($IsAlloc |f#0@@14| (Tclass._System.___hPartialFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@20| |#$R@@68|) $h@@18) ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@20| |#$R@@68|) $h@@18)))) :qid |unknown.0:0| :skolemid |7195| :pattern ( ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@20| |#$R@@68|) $h@@18)) )))
(assert (forall ((arg0@@187 T@U) (arg1@@90 T@U) (arg2@@46 T@U) (arg3@@25 T@U) ) (! (= (type (|#_System._tuple#4._#Make4| arg0@@187 arg1@@90 arg2@@46 arg3@@25)) DatatypeTypeType) :qid |funType:#_System._tuple#4._#Make4| :pattern ( (|#_System._tuple#4._#Make4| arg0@@187 arg1@@90 arg2@@46 arg3@@25)) )))
(assert (forall ((|a#9#0#0| T@U) (|a#9#1#0| T@U) (|a#9#2#0| T@U) (|a#9#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#9#0#0|) BoxType) (= (type |a#9#1#0|) BoxType)) (= (type |a#9#2#0|) BoxType)) (= (type |a#9#3#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#4._#Make4| |a#9#0#0| |a#9#1#0| |a#9#2#0| |a#9#3#0|)) |##_System._tuple#4._#Make4|)) :qid |unknown.0:0| :skolemid |7196| :pattern ( (|#_System._tuple#4._#Make4| |a#9#0#0| |a#9#1#0| |a#9#2#0| |a#9#3#0|)) )))
(assert (forall ((d@@6 T@U) ) (!  (=> (= (type d@@6) DatatypeTypeType) (and (=> (_System.Tuple4.___hMake4_q d@@6) (= (DatatypeCtorId d@@6) |##_System._tuple#4._#Make4|)) (=> (= (DatatypeCtorId d@@6) |##_System._tuple#4._#Make4|) (_System.Tuple4.___hMake4_q d@@6)))) :qid |unknown.0:0| :skolemid |7197| :pattern ( (_System.Tuple4.___hMake4_q d@@6)) )))
(assert (forall ((d@@7 T@U) ) (!  (=> (and (= (type d@@7) DatatypeTypeType) (_System.Tuple4.___hMake4_q d@@7)) (exists ((|a#10#0#0| T@U) (|a#10#1#0| T@U) (|a#10#2#0| T@U) (|a#10#3#0| T@U) ) (!  (and (and (and (and (= (type |a#10#0#0|) BoxType) (= (type |a#10#1#0|) BoxType)) (= (type |a#10#2#0|) BoxType)) (= (type |a#10#3#0|) BoxType)) (= d@@7 (|#_System._tuple#4._#Make4| |a#10#0#0| |a#10#1#0| |a#10#2#0| |a#10#3#0|))) :qid |unknown.0:0| :skolemid |7198| :no-pattern (type |a#10#0#0|) :no-pattern (type |a#10#1#0|) :no-pattern (type |a#10#2#0|) :no-pattern (type |a#10#3#0|) :no-pattern (U_2_int |a#10#0#0|) :no-pattern (U_2_bool |a#10#0#0|) :no-pattern (U_2_int |a#10#1#0|) :no-pattern (U_2_bool |a#10#1#0|) :no-pattern (U_2_int |a#10#2#0|) :no-pattern (U_2_bool |a#10#2#0|) :no-pattern (U_2_int |a#10#3#0|) :no-pattern (U_2_bool |a#10#3#0|) ))) :qid |unknown.0:0| :skolemid |7199| :pattern ( (_System.Tuple4.___hMake4_q d@@7)) )))
(assert (forall ((arg0@@188 T@U) (arg1@@91 T@U) (arg2@@47 T@U) (arg3@@26 T@U) ) (! (= (type (Tclass._System.Tuple4 arg0@@188 arg1@@91 arg2@@47 arg3@@26)) TyType) :qid |funType:Tclass._System.Tuple4| :pattern ( (Tclass._System.Tuple4 arg0@@188 arg1@@91 arg2@@47 arg3@@26)) )))
(assert (forall ((|#$T0@@65| T@U) (|#$T1@@49| T@U) (|#$T2@@21| T@U) (|#$T3| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@65|) TyType) (= (type |#$T1@@49|) TyType)) (= (type |#$T2@@21|) TyType)) (= (type |#$T3|) TyType)) (= (Tag (Tclass._System.Tuple4 |#$T0@@65| |#$T1@@49| |#$T2@@21| |#$T3|)) Tagclass._System.Tuple4)) :qid |unknown.0:0| :skolemid |7200| :pattern ( (Tclass._System.Tuple4 |#$T0@@65| |#$T1@@49| |#$T2@@21| |#$T3|)) )))
(assert (forall ((arg0@@189 T@U) ) (! (= (type (Tclass._System.Tuple4_0 arg0@@189)) TyType) :qid |funType:Tclass._System.Tuple4_0| :pattern ( (Tclass._System.Tuple4_0 arg0@@189)) )))
(assert (forall ((|#$T0@@66| T@U) (|#$T1@@50| T@U) (|#$T2@@22| T@U) (|#$T3@@0| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@66|) TyType) (= (type |#$T1@@50|) TyType)) (= (type |#$T2@@22|) TyType)) (= (type |#$T3@@0|) TyType)) (= (Tclass._System.Tuple4_0 (Tclass._System.Tuple4 |#$T0@@66| |#$T1@@50| |#$T2@@22| |#$T3@@0|)) |#$T0@@66|)) :qid |unknown.0:0| :skolemid |7201| :pattern ( (Tclass._System.Tuple4 |#$T0@@66| |#$T1@@50| |#$T2@@22| |#$T3@@0|)) )))
(assert (forall ((arg0@@190 T@U) ) (! (= (type (Tclass._System.Tuple4_1 arg0@@190)) TyType) :qid |funType:Tclass._System.Tuple4_1| :pattern ( (Tclass._System.Tuple4_1 arg0@@190)) )))
(assert (forall ((|#$T0@@67| T@U) (|#$T1@@51| T@U) (|#$T2@@23| T@U) (|#$T3@@1| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@67|) TyType) (= (type |#$T1@@51|) TyType)) (= (type |#$T2@@23|) TyType)) (= (type |#$T3@@1|) TyType)) (= (Tclass._System.Tuple4_1 (Tclass._System.Tuple4 |#$T0@@67| |#$T1@@51| |#$T2@@23| |#$T3@@1|)) |#$T1@@51|)) :qid |unknown.0:0| :skolemid |7202| :pattern ( (Tclass._System.Tuple4 |#$T0@@67| |#$T1@@51| |#$T2@@23| |#$T3@@1|)) )))
(assert (forall ((arg0@@191 T@U) ) (! (= (type (Tclass._System.Tuple4_2 arg0@@191)) TyType) :qid |funType:Tclass._System.Tuple4_2| :pattern ( (Tclass._System.Tuple4_2 arg0@@191)) )))
(assert (forall ((|#$T0@@68| T@U) (|#$T1@@52| T@U) (|#$T2@@24| T@U) (|#$T3@@2| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@68|) TyType) (= (type |#$T1@@52|) TyType)) (= (type |#$T2@@24|) TyType)) (= (type |#$T3@@2|) TyType)) (= (Tclass._System.Tuple4_2 (Tclass._System.Tuple4 |#$T0@@68| |#$T1@@52| |#$T2@@24| |#$T3@@2|)) |#$T2@@24|)) :qid |unknown.0:0| :skolemid |7203| :pattern ( (Tclass._System.Tuple4 |#$T0@@68| |#$T1@@52| |#$T2@@24| |#$T3@@2|)) )))
(assert (forall ((arg0@@192 T@U) ) (! (= (type (Tclass._System.Tuple4_3 arg0@@192)) TyType) :qid |funType:Tclass._System.Tuple4_3| :pattern ( (Tclass._System.Tuple4_3 arg0@@192)) )))
(assert (forall ((|#$T0@@69| T@U) (|#$T1@@53| T@U) (|#$T2@@25| T@U) (|#$T3@@3| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@69|) TyType) (= (type |#$T1@@53|) TyType)) (= (type |#$T2@@25|) TyType)) (= (type |#$T3@@3|) TyType)) (= (Tclass._System.Tuple4_3 (Tclass._System.Tuple4 |#$T0@@69| |#$T1@@53| |#$T2@@25| |#$T3@@3|)) |#$T3@@3|)) :qid |unknown.0:0| :skolemid |7204| :pattern ( (Tclass._System.Tuple4 |#$T0@@69| |#$T1@@53| |#$T2@@25| |#$T3@@3|)) )))
(assert (forall ((|#$T0@@70| T@U) (|#$T1@@54| T@U) (|#$T2@@26| T@U) (|#$T3@@4| T@U) (bx@@67 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@70|) TyType) (= (type |#$T1@@54|) TyType)) (= (type |#$T2@@26|) TyType)) (= (type |#$T3@@4|) TyType)) (= (type bx@@67) BoxType)) ($IsBox bx@@67 (Tclass._System.Tuple4 |#$T0@@70| |#$T1@@54| |#$T2@@26| |#$T3@@4|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@67)) bx@@67) ($Is ($Unbox DatatypeTypeType bx@@67) (Tclass._System.Tuple4 |#$T0@@70| |#$T1@@54| |#$T2@@26| |#$T3@@4|)))) :qid |unknown.0:0| :skolemid |7205| :pattern ( ($IsBox bx@@67 (Tclass._System.Tuple4 |#$T0@@70| |#$T1@@54| |#$T2@@26| |#$T3@@4|))) )))
(assert (forall ((|#$T0@@71| T@U) (|#$T1@@55| T@U) (|#$T2@@27| T@U) (|#$T3@@5| T@U) (|a#11#0#0| T@U) (|a#11#1#0| T@U) (|a#11#2#0| T@U) (|a#11#3#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@71|) TyType) (= (type |#$T1@@55|) TyType)) (= (type |#$T2@@27|) TyType)) (= (type |#$T3@@5|) TyType)) (= (type |a#11#0#0|) BoxType)) (= (type |a#11#1#0|) BoxType)) (= (type |a#11#2#0|) BoxType)) (= (type |a#11#3#0|) BoxType)) (and (=> ($Is (|#_System._tuple#4._#Make4| |a#11#0#0| |a#11#1#0| |a#11#2#0| |a#11#3#0|) (Tclass._System.Tuple4 |#$T0@@71| |#$T1@@55| |#$T2@@27| |#$T3@@5|)) (and (and (and ($IsBox |a#11#0#0| |#$T0@@71|) ($IsBox |a#11#1#0| |#$T1@@55|)) ($IsBox |a#11#2#0| |#$T2@@27|)) ($IsBox |a#11#3#0| |#$T3@@5|))) (=> (and (and (and ($IsBox |a#11#0#0| |#$T0@@71|) ($IsBox |a#11#1#0| |#$T1@@55|)) ($IsBox |a#11#2#0| |#$T2@@27|)) ($IsBox |a#11#3#0| |#$T3@@5|)) ($Is (|#_System._tuple#4._#Make4| |a#11#0#0| |a#11#1#0| |a#11#2#0| |a#11#3#0|) (Tclass._System.Tuple4 |#$T0@@71| |#$T1@@55| |#$T2@@27| |#$T3@@5|))))) :qid |unknown.0:0| :skolemid |7206| :pattern ( ($Is (|#_System._tuple#4._#Make4| |a#11#0#0| |a#11#1#0| |a#11#2#0| |a#11#3#0|) (Tclass._System.Tuple4 |#$T0@@71| |#$T1@@55| |#$T2@@27| |#$T3@@5|))) )))
(assert (forall ((|#$T0@@72| T@U) (|#$T1@@56| T@U) (|#$T2@@28| T@U) (|#$T3@@6| T@U) (|a#12#0#0| T@U) (|a#12#1#0| T@U) (|a#12#2#0| T@U) (|a#12#3#0| T@U) ($h@@19 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |#$T0@@72|) TyType) (= (type |#$T1@@56|) TyType)) (= (type |#$T2@@28|) TyType)) (= (type |#$T3@@6|) TyType)) (= (type |a#12#0#0|) BoxType)) (= (type |a#12#1#0|) BoxType)) (= (type |a#12#2#0|) BoxType)) (= (type |a#12#3#0|) BoxType)) (= (type $h@@19) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@19)) (and (=> ($IsAlloc (|#_System._tuple#4._#Make4| |a#12#0#0| |a#12#1#0| |a#12#2#0| |a#12#3#0|) (Tclass._System.Tuple4 |#$T0@@72| |#$T1@@56| |#$T2@@28| |#$T3@@6|) $h@@19) (and (and (and ($IsAllocBox |a#12#0#0| |#$T0@@72| $h@@19) ($IsAllocBox |a#12#1#0| |#$T1@@56| $h@@19)) ($IsAllocBox |a#12#2#0| |#$T2@@28| $h@@19)) ($IsAllocBox |a#12#3#0| |#$T3@@6| $h@@19))) (=> (and (and (and ($IsAllocBox |a#12#0#0| |#$T0@@72| $h@@19) ($IsAllocBox |a#12#1#0| |#$T1@@56| $h@@19)) ($IsAllocBox |a#12#2#0| |#$T2@@28| $h@@19)) ($IsAllocBox |a#12#3#0| |#$T3@@6| $h@@19)) ($IsAlloc (|#_System._tuple#4._#Make4| |a#12#0#0| |a#12#1#0| |a#12#2#0| |a#12#3#0|) (Tclass._System.Tuple4 |#$T0@@72| |#$T1@@56| |#$T2@@28| |#$T3@@6|) $h@@19)))) :qid |unknown.0:0| :skolemid |7207| :pattern ( ($IsAlloc (|#_System._tuple#4._#Make4| |a#12#0#0| |a#12#1#0| |a#12#2#0| |a#12#3#0|) (Tclass._System.Tuple4 |#$T0@@72| |#$T1@@56| |#$T2@@28| |#$T3@@6|) $h@@19)) )))
(assert (forall ((arg0@@193 T@U) ) (! (= (type (_System.Tuple4._0 arg0@@193)) BoxType) :qid |funType:_System.Tuple4._0| :pattern ( (_System.Tuple4._0 arg0@@193)) )))
(assert (forall ((d@@8 T@U) (|#$T0@@73| T@U) ($h@@20 T@U) ) (!  (=> (and (and (and (= (type d@@8) DatatypeTypeType) (= (type |#$T0@@73|) TyType)) (= (type $h@@20) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@20) (and (_System.Tuple4.___hMake4_q d@@8) (exists ((|#$T1@@57| T@U) (|#$T2@@29| T@U) (|#$T3@@7| T@U) ) (!  (and (and (and (= (type |#$T1@@57|) TyType) (= (type |#$T2@@29|) TyType)) (= (type |#$T3@@7|) TyType)) ($IsAlloc d@@8 (Tclass._System.Tuple4 |#$T0@@73| |#$T1@@57| |#$T2@@29| |#$T3@@7|) $h@@20)) :qid |unknown.0:0| :skolemid |7208| :pattern ( ($IsAlloc d@@8 (Tclass._System.Tuple4 |#$T0@@73| |#$T1@@57| |#$T2@@29| |#$T3@@7|) $h@@20)) ))))) ($IsAllocBox (_System.Tuple4._0 d@@8) |#$T0@@73| $h@@20)) :qid |unknown.0:0| :skolemid |7209| :pattern ( ($IsAllocBox (_System.Tuple4._0 d@@8) |#$T0@@73| $h@@20)) )))
(assert (forall ((arg0@@194 T@U) ) (! (= (type (_System.Tuple4._1 arg0@@194)) BoxType) :qid |funType:_System.Tuple4._1| :pattern ( (_System.Tuple4._1 arg0@@194)) )))
(assert (forall ((d@@9 T@U) (|#$T1@@58| T@U) ($h@@21 T@U) ) (!  (=> (and (and (and (= (type d@@9) DatatypeTypeType) (= (type |#$T1@@58|) TyType)) (= (type $h@@21) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@21) (and (_System.Tuple4.___hMake4_q d@@9) (exists ((|#$T0@@74| T@U) (|#$T2@@30| T@U) (|#$T3@@8| T@U) ) (!  (and (and (and (= (type |#$T0@@74|) TyType) (= (type |#$T2@@30|) TyType)) (= (type |#$T3@@8|) TyType)) ($IsAlloc d@@9 (Tclass._System.Tuple4 |#$T0@@74| |#$T1@@58| |#$T2@@30| |#$T3@@8|) $h@@21)) :qid |unknown.0:0| :skolemid |7210| :pattern ( ($IsAlloc d@@9 (Tclass._System.Tuple4 |#$T0@@74| |#$T1@@58| |#$T2@@30| |#$T3@@8|) $h@@21)) ))))) ($IsAllocBox (_System.Tuple4._1 d@@9) |#$T1@@58| $h@@21)) :qid |unknown.0:0| :skolemid |7211| :pattern ( ($IsAllocBox (_System.Tuple4._1 d@@9) |#$T1@@58| $h@@21)) )))
(assert (forall ((arg0@@195 T@U) ) (! (= (type (_System.Tuple4._2 arg0@@195)) BoxType) :qid |funType:_System.Tuple4._2| :pattern ( (_System.Tuple4._2 arg0@@195)) )))
(assert (forall ((d@@10 T@U) (|#$T2@@31| T@U) ($h@@22 T@U) ) (!  (=> (and (and (and (= (type d@@10) DatatypeTypeType) (= (type |#$T2@@31|) TyType)) (= (type $h@@22) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@22) (and (_System.Tuple4.___hMake4_q d@@10) (exists ((|#$T0@@75| T@U) (|#$T1@@59| T@U) (|#$T3@@9| T@U) ) (!  (and (and (and (= (type |#$T0@@75|) TyType) (= (type |#$T1@@59|) TyType)) (= (type |#$T3@@9|) TyType)) ($IsAlloc d@@10 (Tclass._System.Tuple4 |#$T0@@75| |#$T1@@59| |#$T2@@31| |#$T3@@9|) $h@@22)) :qid |unknown.0:0| :skolemid |7212| :pattern ( ($IsAlloc d@@10 (Tclass._System.Tuple4 |#$T0@@75| |#$T1@@59| |#$T2@@31| |#$T3@@9|) $h@@22)) ))))) ($IsAllocBox (_System.Tuple4._2 d@@10) |#$T2@@31| $h@@22)) :qid |unknown.0:0| :skolemid |7213| :pattern ( ($IsAllocBox (_System.Tuple4._2 d@@10) |#$T2@@31| $h@@22)) )))
(assert (forall ((arg0@@196 T@U) ) (! (= (type (_System.Tuple4._3 arg0@@196)) BoxType) :qid |funType:_System.Tuple4._3| :pattern ( (_System.Tuple4._3 arg0@@196)) )))
(assert (forall ((d@@11 T@U) (|#$T3@@10| T@U) ($h@@23 T@U) ) (!  (=> (and (and (and (= (type d@@11) DatatypeTypeType) (= (type |#$T3@@10|) TyType)) (= (type $h@@23) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@23) (and (_System.Tuple4.___hMake4_q d@@11) (exists ((|#$T0@@76| T@U) (|#$T1@@60| T@U) (|#$T2@@32| T@U) ) (!  (and (and (and (= (type |#$T0@@76|) TyType) (= (type |#$T1@@60|) TyType)) (= (type |#$T2@@32|) TyType)) ($IsAlloc d@@11 (Tclass._System.Tuple4 |#$T0@@76| |#$T1@@60| |#$T2@@32| |#$T3@@10|) $h@@23)) :qid |unknown.0:0| :skolemid |7214| :pattern ( ($IsAlloc d@@11 (Tclass._System.Tuple4 |#$T0@@76| |#$T1@@60| |#$T2@@32| |#$T3@@10|) $h@@23)) ))))) ($IsAllocBox (_System.Tuple4._3 d@@11) |#$T3@@10| $h@@23)) :qid |unknown.0:0| :skolemid |7215| :pattern ( ($IsAllocBox (_System.Tuple4._3 d@@11) |#$T3@@10| $h@@23)) )))
(assert (forall ((|a#13#0#0| T@U) (|a#13#1#0| T@U) (|a#13#2#0| T@U) (|a#13#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#13#0#0|) BoxType) (= (type |a#13#1#0|) BoxType)) (= (type |a#13#2#0|) BoxType)) (= (type |a#13#3#0|) BoxType)) (= (|#_System._tuple#4._#Make4| (Lit |a#13#0#0|) (Lit |a#13#1#0|) (Lit |a#13#2#0|) (Lit |a#13#3#0|)) (Lit (|#_System._tuple#4._#Make4| |a#13#0#0| |a#13#1#0| |a#13#2#0| |a#13#3#0|)))) :qid |unknown.0:0| :skolemid |7216| :pattern ( (|#_System._tuple#4._#Make4| (Lit |a#13#0#0|) (Lit |a#13#1#0|) (Lit |a#13#2#0|) (Lit |a#13#3#0|))) )))
(assert (forall ((|a#14#0#0| T@U) (|a#14#1#0| T@U) (|a#14#2#0| T@U) (|a#14#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#14#0#0|) BoxType) (= (type |a#14#1#0|) BoxType)) (= (type |a#14#2#0|) BoxType)) (= (type |a#14#3#0|) BoxType)) (= (_System.Tuple4._0 (|#_System._tuple#4._#Make4| |a#14#0#0| |a#14#1#0| |a#14#2#0| |a#14#3#0|)) |a#14#0#0|)) :qid |unknown.0:0| :skolemid |7217| :pattern ( (|#_System._tuple#4._#Make4| |a#14#0#0| |a#14#1#0| |a#14#2#0| |a#14#3#0|)) )))
(assert (forall ((|a#15#0#0| T@U) (|a#15#1#0| T@U) (|a#15#2#0| T@U) (|a#15#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#15#0#0|) BoxType) (= (type |a#15#1#0|) BoxType)) (= (type |a#15#2#0|) BoxType)) (= (type |a#15#3#0|) BoxType)) (< (BoxRank |a#15#0#0|) (DtRank (|#_System._tuple#4._#Make4| |a#15#0#0| |a#15#1#0| |a#15#2#0| |a#15#3#0|)))) :qid |unknown.0:0| :skolemid |7218| :pattern ( (|#_System._tuple#4._#Make4| |a#15#0#0| |a#15#1#0| |a#15#2#0| |a#15#3#0|)) )))
(assert (forall ((|a#16#0#0| T@U) (|a#16#1#0| T@U) (|a#16#2#0| T@U) (|a#16#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#16#0#0|) BoxType) (= (type |a#16#1#0|) BoxType)) (= (type |a#16#2#0|) BoxType)) (= (type |a#16#3#0|) BoxType)) (= (_System.Tuple4._1 (|#_System._tuple#4._#Make4| |a#16#0#0| |a#16#1#0| |a#16#2#0| |a#16#3#0|)) |a#16#1#0|)) :qid |unknown.0:0| :skolemid |7219| :pattern ( (|#_System._tuple#4._#Make4| |a#16#0#0| |a#16#1#0| |a#16#2#0| |a#16#3#0|)) )))
(assert (forall ((|a#17#0#0| T@U) (|a#17#1#0| T@U) (|a#17#2#0| T@U) (|a#17#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#17#0#0|) BoxType) (= (type |a#17#1#0|) BoxType)) (= (type |a#17#2#0|) BoxType)) (= (type |a#17#3#0|) BoxType)) (< (BoxRank |a#17#1#0|) (DtRank (|#_System._tuple#4._#Make4| |a#17#0#0| |a#17#1#0| |a#17#2#0| |a#17#3#0|)))) :qid |unknown.0:0| :skolemid |7220| :pattern ( (|#_System._tuple#4._#Make4| |a#17#0#0| |a#17#1#0| |a#17#2#0| |a#17#3#0|)) )))
(assert (forall ((|a#18#0#0| T@U) (|a#18#1#0| T@U) (|a#18#2#0| T@U) (|a#18#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#18#0#0|) BoxType) (= (type |a#18#1#0|) BoxType)) (= (type |a#18#2#0|) BoxType)) (= (type |a#18#3#0|) BoxType)) (= (_System.Tuple4._2 (|#_System._tuple#4._#Make4| |a#18#0#0| |a#18#1#0| |a#18#2#0| |a#18#3#0|)) |a#18#2#0|)) :qid |unknown.0:0| :skolemid |7221| :pattern ( (|#_System._tuple#4._#Make4| |a#18#0#0| |a#18#1#0| |a#18#2#0| |a#18#3#0|)) )))
(assert (forall ((|a#19#0#0| T@U) (|a#19#1#0| T@U) (|a#19#2#0| T@U) (|a#19#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#19#0#0|) BoxType) (= (type |a#19#1#0|) BoxType)) (= (type |a#19#2#0|) BoxType)) (= (type |a#19#3#0|) BoxType)) (< (BoxRank |a#19#2#0|) (DtRank (|#_System._tuple#4._#Make4| |a#19#0#0| |a#19#1#0| |a#19#2#0| |a#19#3#0|)))) :qid |unknown.0:0| :skolemid |7222| :pattern ( (|#_System._tuple#4._#Make4| |a#19#0#0| |a#19#1#0| |a#19#2#0| |a#19#3#0|)) )))
(assert (forall ((|a#20#0#0| T@U) (|a#20#1#0| T@U) (|a#20#2#0| T@U) (|a#20#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#20#0#0|) BoxType) (= (type |a#20#1#0|) BoxType)) (= (type |a#20#2#0|) BoxType)) (= (type |a#20#3#0|) BoxType)) (= (_System.Tuple4._3 (|#_System._tuple#4._#Make4| |a#20#0#0| |a#20#1#0| |a#20#2#0| |a#20#3#0|)) |a#20#3#0|)) :qid |unknown.0:0| :skolemid |7223| :pattern ( (|#_System._tuple#4._#Make4| |a#20#0#0| |a#20#1#0| |a#20#2#0| |a#20#3#0|)) )))
(assert (forall ((|a#21#0#0| T@U) (|a#21#1#0| T@U) (|a#21#2#0| T@U) (|a#21#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#21#0#0|) BoxType) (= (type |a#21#1#0|) BoxType)) (= (type |a#21#2#0|) BoxType)) (= (type |a#21#3#0|) BoxType)) (< (BoxRank |a#21#3#0|) (DtRank (|#_System._tuple#4._#Make4| |a#21#0#0| |a#21#1#0| |a#21#2#0| |a#21#3#0|)))) :qid |unknown.0:0| :skolemid |7224| :pattern ( (|#_System._tuple#4._#Make4| |a#21#0#0| |a#21#1#0| |a#21#2#0| |a#21#3#0|)) )))
(assert (forall ((d@@12 T@U) ) (!  (=> (and (= (type d@@12) DatatypeTypeType) (|$IsA#_System.Tuple4| d@@12)) (_System.Tuple4.___hMake4_q d@@12)) :qid |unknown.0:0| :skolemid |7225| :pattern ( (|$IsA#_System.Tuple4| d@@12)) )))
(assert (forall ((|#$T0@@77| T@U) (|#$T1@@61| T@U) (|#$T2@@33| T@U) (|#$T3@@11| T@U) (d@@13 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@77|) TyType) (= (type |#$T1@@61|) TyType)) (= (type |#$T2@@33|) TyType)) (= (type |#$T3@@11|) TyType)) (= (type d@@13) DatatypeTypeType)) ($Is d@@13 (Tclass._System.Tuple4 |#$T0@@77| |#$T1@@61| |#$T2@@33| |#$T3@@11|))) (_System.Tuple4.___hMake4_q d@@13)) :qid |unknown.0:0| :skolemid |7226| :pattern ( (_System.Tuple4.___hMake4_q d@@13) ($Is d@@13 (Tclass._System.Tuple4 |#$T0@@77| |#$T1@@61| |#$T2@@33| |#$T3@@11|))) )))
(assert (forall ((a@@108 T@U) (b@@63 T@U) ) (!  (=> (and (and (= (type a@@108) DatatypeTypeType) (= (type b@@63) DatatypeTypeType)) true) (and (=> (|_System.Tuple4#Equal| a@@108 b@@63) (and (and (and (= (_System.Tuple4._0 a@@108) (_System.Tuple4._0 b@@63)) (= (_System.Tuple4._1 a@@108) (_System.Tuple4._1 b@@63))) (= (_System.Tuple4._2 a@@108) (_System.Tuple4._2 b@@63))) (= (_System.Tuple4._3 a@@108) (_System.Tuple4._3 b@@63)))) (=> (and (and (and (= (_System.Tuple4._0 a@@108) (_System.Tuple4._0 b@@63)) (= (_System.Tuple4._1 a@@108) (_System.Tuple4._1 b@@63))) (= (_System.Tuple4._2 a@@108) (_System.Tuple4._2 b@@63))) (= (_System.Tuple4._3 a@@108) (_System.Tuple4._3 b@@63))) (|_System.Tuple4#Equal| a@@108 b@@63)))) :qid |unknown.0:0| :skolemid |7227| :pattern ( (|_System.Tuple4#Equal| a@@108 b@@63)) )))
(assert (forall ((a@@109 T@U) (b@@64 T@U) ) (!  (=> (and (= (type a@@109) DatatypeTypeType) (= (type b@@64) DatatypeTypeType)) (and (=> (|_System.Tuple4#Equal| a@@109 b@@64) (= a@@109 b@@64)) (=> (= a@@109 b@@64) (|_System.Tuple4#Equal| a@@109 b@@64)))) :qid |unknown.0:0| :skolemid |7228| :pattern ( (|_System.Tuple4#Equal| a@@109 b@@64)) )))
(assert (forall ((arg0@@197 T@U) (arg1@@92 T@U) (arg2@@48 T@U) (arg3@@27 T@U) (arg4@@14 T@U) ) (! (= (type (Tclass._System.___hFunc4 arg0@@197 arg1@@92 arg2@@48 arg3@@27 arg4@@14)) TyType) :qid |funType:Tclass._System.___hFunc4| :pattern ( (Tclass._System.___hFunc4 arg0@@197 arg1@@92 arg2@@48 arg3@@27 arg4@@14)) )))
(assert (forall ((|#$T0@@78| T@U) (|#$T1@@62| T@U) (|#$T2@@34| T@U) (|#$T3@@12| T@U) (|#$R@@69| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@78|) TyType) (= (type |#$T1@@62|) TyType)) (= (type |#$T2@@34|) TyType)) (= (type |#$T3@@12|) TyType)) (= (type |#$R@@69|) TyType)) (= (Tag (Tclass._System.___hFunc4 |#$T0@@78| |#$T1@@62| |#$T2@@34| |#$T3@@12| |#$R@@69|)) Tagclass._System.___hFunc4)) :qid |unknown.0:0| :skolemid |7229| :pattern ( (Tclass._System.___hFunc4 |#$T0@@78| |#$T1@@62| |#$T2@@34| |#$T3@@12| |#$R@@69|)) )))
(assert (forall ((arg0@@198 T@U) ) (! (= (type (Tclass._System.___hFunc4_0 arg0@@198)) TyType) :qid |funType:Tclass._System.___hFunc4_0| :pattern ( (Tclass._System.___hFunc4_0 arg0@@198)) )))
(assert (forall ((|#$T0@@79| T@U) (|#$T1@@63| T@U) (|#$T2@@35| T@U) (|#$T3@@13| T@U) (|#$R@@70| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@79|) TyType) (= (type |#$T1@@63|) TyType)) (= (type |#$T2@@35|) TyType)) (= (type |#$T3@@13|) TyType)) (= (type |#$R@@70|) TyType)) (= (Tclass._System.___hFunc4_0 (Tclass._System.___hFunc4 |#$T0@@79| |#$T1@@63| |#$T2@@35| |#$T3@@13| |#$R@@70|)) |#$T0@@79|)) :qid |unknown.0:0| :skolemid |7230| :pattern ( (Tclass._System.___hFunc4 |#$T0@@79| |#$T1@@63| |#$T2@@35| |#$T3@@13| |#$R@@70|)) )))
(assert (forall ((arg0@@199 T@U) ) (! (= (type (Tclass._System.___hFunc4_1 arg0@@199)) TyType) :qid |funType:Tclass._System.___hFunc4_1| :pattern ( (Tclass._System.___hFunc4_1 arg0@@199)) )))
(assert (forall ((|#$T0@@80| T@U) (|#$T1@@64| T@U) (|#$T2@@36| T@U) (|#$T3@@14| T@U) (|#$R@@71| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@80|) TyType) (= (type |#$T1@@64|) TyType)) (= (type |#$T2@@36|) TyType)) (= (type |#$T3@@14|) TyType)) (= (type |#$R@@71|) TyType)) (= (Tclass._System.___hFunc4_1 (Tclass._System.___hFunc4 |#$T0@@80| |#$T1@@64| |#$T2@@36| |#$T3@@14| |#$R@@71|)) |#$T1@@64|)) :qid |unknown.0:0| :skolemid |7231| :pattern ( (Tclass._System.___hFunc4 |#$T0@@80| |#$T1@@64| |#$T2@@36| |#$T3@@14| |#$R@@71|)) )))
(assert (forall ((arg0@@200 T@U) ) (! (= (type (Tclass._System.___hFunc4_2 arg0@@200)) TyType) :qid |funType:Tclass._System.___hFunc4_2| :pattern ( (Tclass._System.___hFunc4_2 arg0@@200)) )))
(assert (forall ((|#$T0@@81| T@U) (|#$T1@@65| T@U) (|#$T2@@37| T@U) (|#$T3@@15| T@U) (|#$R@@72| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@81|) TyType) (= (type |#$T1@@65|) TyType)) (= (type |#$T2@@37|) TyType)) (= (type |#$T3@@15|) TyType)) (= (type |#$R@@72|) TyType)) (= (Tclass._System.___hFunc4_2 (Tclass._System.___hFunc4 |#$T0@@81| |#$T1@@65| |#$T2@@37| |#$T3@@15| |#$R@@72|)) |#$T2@@37|)) :qid |unknown.0:0| :skolemid |7232| :pattern ( (Tclass._System.___hFunc4 |#$T0@@81| |#$T1@@65| |#$T2@@37| |#$T3@@15| |#$R@@72|)) )))
(assert (forall ((arg0@@201 T@U) ) (! (= (type (Tclass._System.___hFunc4_3 arg0@@201)) TyType) :qid |funType:Tclass._System.___hFunc4_3| :pattern ( (Tclass._System.___hFunc4_3 arg0@@201)) )))
(assert (forall ((|#$T0@@82| T@U) (|#$T1@@66| T@U) (|#$T2@@38| T@U) (|#$T3@@16| T@U) (|#$R@@73| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@82|) TyType) (= (type |#$T1@@66|) TyType)) (= (type |#$T2@@38|) TyType)) (= (type |#$T3@@16|) TyType)) (= (type |#$R@@73|) TyType)) (= (Tclass._System.___hFunc4_3 (Tclass._System.___hFunc4 |#$T0@@82| |#$T1@@66| |#$T2@@38| |#$T3@@16| |#$R@@73|)) |#$T3@@16|)) :qid |unknown.0:0| :skolemid |7233| :pattern ( (Tclass._System.___hFunc4 |#$T0@@82| |#$T1@@66| |#$T2@@38| |#$T3@@16| |#$R@@73|)) )))
(assert (forall ((arg0@@202 T@U) ) (! (= (type (Tclass._System.___hFunc4_4 arg0@@202)) TyType) :qid |funType:Tclass._System.___hFunc4_4| :pattern ( (Tclass._System.___hFunc4_4 arg0@@202)) )))
(assert (forall ((|#$T0@@83| T@U) (|#$T1@@67| T@U) (|#$T2@@39| T@U) (|#$T3@@17| T@U) (|#$R@@74| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@83|) TyType) (= (type |#$T1@@67|) TyType)) (= (type |#$T2@@39|) TyType)) (= (type |#$T3@@17|) TyType)) (= (type |#$R@@74|) TyType)) (= (Tclass._System.___hFunc4_4 (Tclass._System.___hFunc4 |#$T0@@83| |#$T1@@67| |#$T2@@39| |#$T3@@17| |#$R@@74|)) |#$R@@74|)) :qid |unknown.0:0| :skolemid |7234| :pattern ( (Tclass._System.___hFunc4 |#$T0@@83| |#$T1@@67| |#$T2@@39| |#$T3@@17| |#$R@@74|)) )))
(assert (forall ((|#$T0@@84| T@U) (|#$T1@@68| T@U) (|#$T2@@40| T@U) (|#$T3@@18| T@U) (|#$R@@75| T@U) (bx@@68 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@84|) TyType) (= (type |#$T1@@68|) TyType)) (= (type |#$T2@@40|) TyType)) (= (type |#$T3@@18|) TyType)) (= (type |#$R@@75|) TyType)) (= (type bx@@68) BoxType)) ($IsBox bx@@68 (Tclass._System.___hFunc4 |#$T0@@84| |#$T1@@68| |#$T2@@40| |#$T3@@18| |#$R@@75|))) (and (= ($Box ($Unbox HandleTypeType bx@@68)) bx@@68) ($Is ($Unbox HandleTypeType bx@@68) (Tclass._System.___hFunc4 |#$T0@@84| |#$T1@@68| |#$T2@@40| |#$T3@@18| |#$R@@75|)))) :qid |unknown.0:0| :skolemid |7235| :pattern ( ($IsBox bx@@68 (Tclass._System.___hFunc4 |#$T0@@84| |#$T1@@68| |#$T2@@40| |#$T3@@18| |#$R@@75|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@203 T@T) (arg1@@93 T@T) (arg2@@49 T@T) (arg3@@28 T@T) (arg4@@15 T@T) (arg5@@4 T@T) ) (! (= (Ctor (MapType5Type arg0@@203 arg1@@93 arg2@@49 arg3@@28 arg4@@15 arg5@@4)) 24) :qid |ctor:MapType5Type| )) (forall ((arg0@@204 T@T) (arg1@@94 T@T) (arg2@@50 T@T) (arg3@@29 T@T) (arg4@@16 T@T) (arg5@@5 T@T) ) (! (= (MapType5TypeInv0 (MapType5Type arg0@@204 arg1@@94 arg2@@50 arg3@@29 arg4@@16 arg5@@5)) arg0@@204) :qid |typeInv:MapType5TypeInv0| :pattern ( (MapType5Type arg0@@204 arg1@@94 arg2@@50 arg3@@29 arg4@@16 arg5@@5)) ))) (forall ((arg0@@205 T@T) (arg1@@95 T@T) (arg2@@51 T@T) (arg3@@30 T@T) (arg4@@17 T@T) (arg5@@6 T@T) ) (! (= (MapType5TypeInv1 (MapType5Type arg0@@205 arg1@@95 arg2@@51 arg3@@30 arg4@@17 arg5@@6)) arg1@@95) :qid |typeInv:MapType5TypeInv1| :pattern ( (MapType5Type arg0@@205 arg1@@95 arg2@@51 arg3@@30 arg4@@17 arg5@@6)) ))) (forall ((arg0@@206 T@T) (arg1@@96 T@T) (arg2@@52 T@T) (arg3@@31 T@T) (arg4@@18 T@T) (arg5@@7 T@T) ) (! (= (MapType5TypeInv2 (MapType5Type arg0@@206 arg1@@96 arg2@@52 arg3@@31 arg4@@18 arg5@@7)) arg2@@52) :qid |typeInv:MapType5TypeInv2| :pattern ( (MapType5Type arg0@@206 arg1@@96 arg2@@52 arg3@@31 arg4@@18 arg5@@7)) ))) (forall ((arg0@@207 T@T) (arg1@@97 T@T) (arg2@@53 T@T) (arg3@@32 T@T) (arg4@@19 T@T) (arg5@@8 T@T) ) (! (= (MapType5TypeInv3 (MapType5Type arg0@@207 arg1@@97 arg2@@53 arg3@@32 arg4@@19 arg5@@8)) arg3@@32) :qid |typeInv:MapType5TypeInv3| :pattern ( (MapType5Type arg0@@207 arg1@@97 arg2@@53 arg3@@32 arg4@@19 arg5@@8)) ))) (forall ((arg0@@208 T@T) (arg1@@98 T@T) (arg2@@54 T@T) (arg3@@33 T@T) (arg4@@20 T@T) (arg5@@9 T@T) ) (! (= (MapType5TypeInv4 (MapType5Type arg0@@208 arg1@@98 arg2@@54 arg3@@33 arg4@@20 arg5@@9)) arg4@@20) :qid |typeInv:MapType5TypeInv4| :pattern ( (MapType5Type arg0@@208 arg1@@98 arg2@@54 arg3@@33 arg4@@20 arg5@@9)) ))) (forall ((arg0@@209 T@T) (arg1@@99 T@T) (arg2@@55 T@T) (arg3@@34 T@T) (arg4@@21 T@T) (arg5@@10 T@T) ) (! (= (MapType5TypeInv5 (MapType5Type arg0@@209 arg1@@99 arg2@@55 arg3@@34 arg4@@21 arg5@@10)) arg5@@10) :qid |typeInv:MapType5TypeInv5| :pattern ( (MapType5Type arg0@@209 arg1@@99 arg2@@55 arg3@@34 arg4@@21 arg5@@10)) ))) (forall ((arg0@@210 T@U) (arg1@@100 T@U) (arg2@@56 T@U) (arg3@@35 T@U) (arg4@@22 T@U) (arg5@@11 T@U) ) (! (let ((aVar5 (MapType5TypeInv5 (type arg0@@210)))) (= (type (MapType5Select arg0@@210 arg1@@100 arg2@@56 arg3@@35 arg4@@22 arg5@@11)) aVar5)) :qid |funType:MapType5Select| :pattern ( (MapType5Select arg0@@210 arg1@@100 arg2@@56 arg3@@35 arg4@@22 arg5@@11)) ))) (forall ((arg0@@211 T@U) (arg1@@101 T@U) (arg2@@57 T@U) (arg3@@36 T@U) (arg4@@23 T@U) (arg5@@12 T@U) (arg6@@3 T@U) ) (! (let ((aVar5@@0 (type arg6@@3))) (let ((aVar4@@2 (type arg5@@12))) (let ((aVar3@@3 (type arg4@@23))) (let ((aVar2@@4 (type arg3@@36))) (let ((aVar1@@5 (type arg2@@57))) (let ((aVar0@@3 (type arg1@@101))) (= (type (MapType5Store arg0@@211 arg1@@101 arg2@@57 arg3@@36 arg4@@23 arg5@@12 arg6@@3)) (MapType5Type aVar0@@3 aVar1@@5 aVar2@@4 aVar3@@3 aVar4@@2 aVar5@@0)))))))) :qid |funType:MapType5Store| :pattern ( (MapType5Store arg0@@211 arg1@@101 arg2@@57 arg3@@36 arg4@@23 arg5@@12 arg6@@3)) ))) (forall ((m@@42 T@U) (x0@@20 T@U) (x1@@14 T@U) (x2@@10 T@U) (x3@@5 T@U) (x4 T@U) (val@@21 T@U) ) (! (let ((aVar5@@1 (MapType5TypeInv5 (type m@@42)))) (=> (= (type val@@21) aVar5@@1) (= (MapType5Select (MapType5Store m@@42 x0@@20 x1@@14 x2@@10 x3@@5 x4 val@@21) x0@@20 x1@@14 x2@@10 x3@@5 x4) val@@21))) :qid |mapAx0:MapType5Select| :weight 0 ))) (and (and (and (and (and (forall ((val@@22 T@U) (m@@43 T@U) (x0@@21 T@U) (x1@@15 T@U) (x2@@11 T@U) (x3@@6 T@U) (x4@@0 T@U) (y0@@15 T@U) (y1@@11 T@U) (y2@@8 T@U) (y3@@4 T@U) (y4 T@U) ) (!  (or (= x0@@21 y0@@15) (= (MapType5Select (MapType5Store m@@43 x0@@21 x1@@15 x2@@11 x3@@6 x4@@0 val@@22) y0@@15 y1@@11 y2@@8 y3@@4 y4) (MapType5Select m@@43 y0@@15 y1@@11 y2@@8 y3@@4 y4))) :qid |mapAx1:MapType5Select:0| :weight 0 )) (forall ((val@@23 T@U) (m@@44 T@U) (x0@@22 T@U) (x1@@16 T@U) (x2@@12 T@U) (x3@@7 T@U) (x4@@1 T@U) (y0@@16 T@U) (y1@@12 T@U) (y2@@9 T@U) (y3@@5 T@U) (y4@@0 T@U) ) (!  (or (= x1@@16 y1@@12) (= (MapType5Select (MapType5Store m@@44 x0@@22 x1@@16 x2@@12 x3@@7 x4@@1 val@@23) y0@@16 y1@@12 y2@@9 y3@@5 y4@@0) (MapType5Select m@@44 y0@@16 y1@@12 y2@@9 y3@@5 y4@@0))) :qid |mapAx1:MapType5Select:1| :weight 0 ))) (forall ((val@@24 T@U) (m@@45 T@U) (x0@@23 T@U) (x1@@17 T@U) (x2@@13 T@U) (x3@@8 T@U) (x4@@2 T@U) (y0@@17 T@U) (y1@@13 T@U) (y2@@10 T@U) (y3@@6 T@U) (y4@@1 T@U) ) (!  (or (= x2@@13 y2@@10) (= (MapType5Select (MapType5Store m@@45 x0@@23 x1@@17 x2@@13 x3@@8 x4@@2 val@@24) y0@@17 y1@@13 y2@@10 y3@@6 y4@@1) (MapType5Select m@@45 y0@@17 y1@@13 y2@@10 y3@@6 y4@@1))) :qid |mapAx1:MapType5Select:2| :weight 0 ))) (forall ((val@@25 T@U) (m@@46 T@U) (x0@@24 T@U) (x1@@18 T@U) (x2@@14 T@U) (x3@@9 T@U) (x4@@3 T@U) (y0@@18 T@U) (y1@@14 T@U) (y2@@11 T@U) (y3@@7 T@U) (y4@@2 T@U) ) (!  (or (= x3@@9 y3@@7) (= (MapType5Select (MapType5Store m@@46 x0@@24 x1@@18 x2@@14 x3@@9 x4@@3 val@@25) y0@@18 y1@@14 y2@@11 y3@@7 y4@@2) (MapType5Select m@@46 y0@@18 y1@@14 y2@@11 y3@@7 y4@@2))) :qid |mapAx1:MapType5Select:3| :weight 0 ))) (forall ((val@@26 T@U) (m@@47 T@U) (x0@@25 T@U) (x1@@19 T@U) (x2@@15 T@U) (x3@@10 T@U) (x4@@4 T@U) (y0@@19 T@U) (y1@@15 T@U) (y2@@12 T@U) (y3@@8 T@U) (y4@@3 T@U) ) (!  (or (= x4@@4 y4@@3) (= (MapType5Select (MapType5Store m@@47 x0@@25 x1@@19 x2@@15 x3@@10 x4@@4 val@@26) y0@@19 y1@@15 y2@@12 y3@@8 y4@@3) (MapType5Select m@@47 y0@@19 y1@@15 y2@@12 y3@@8 y4@@3))) :qid |mapAx1:MapType5Select:4| :weight 0 ))) (forall ((val@@27 T@U) (m@@48 T@U) (x0@@26 T@U) (x1@@20 T@U) (x2@@16 T@U) (x3@@11 T@U) (x4@@5 T@U) (y0@@20 T@U) (y1@@16 T@U) (y2@@13 T@U) (y3@@9 T@U) (y4@@4 T@U) ) (!  (or true (= (MapType5Select (MapType5Store m@@48 x0@@26 x1@@20 x2@@16 x3@@11 x4@@5 val@@27) y0@@20 y1@@16 y2@@13 y3@@9 y4@@4) (MapType5Select m@@48 y0@@20 y1@@16 y2@@13 y3@@9 y4@@4))) :qid |mapAx2:MapType5Select| :weight 0 )))) (forall ((arg0@@212 T@U) (arg1@@102 T@U) (arg2@@58 T@U) (arg3@@37 T@U) (arg4@@24 T@U) (arg5@@13 T@U) (arg6@@4 T@U) (arg7@@1 T@U) (arg8@@1 T@U) (arg9 T@U) (arg10 T@U) ) (! (= (type (Apply4 arg0@@212 arg1@@102 arg2@@58 arg3@@37 arg4@@24 arg5@@13 arg6@@4 arg7@@1 arg8@@1 arg9 arg10)) BoxType) :qid |funType:Apply4| :pattern ( (Apply4 arg0@@212 arg1@@102 arg2@@58 arg3@@37 arg4@@24 arg5@@13 arg6@@4 arg7@@1 arg8@@1 arg9 arg10)) ))) (forall ((arg0@@213 T@U) (arg1@@103 T@U) (arg2@@59 T@U) ) (! (= (type (Handle4 arg0@@213 arg1@@103 arg2@@59)) HandleTypeType) :qid |funType:Handle4| :pattern ( (Handle4 arg0@@213 arg1@@103 arg2@@59)) ))))
(assert (forall ((t0@@72 T@U) (t1@@48 T@U) (t2@@29 T@U) (t3@@14 T@U) (t4 T@U) (heap@@21 T@U) (h@@48 T@U) (r@@26 T@U) (rd@@11 T@U) (bx0@@47 T@U) (bx1@@31 T@U) (bx2@@15 T@U) (bx3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@72) TyType) (= (type t1@@48) TyType)) (= (type t2@@29) TyType)) (= (type t3@@14) TyType)) (= (type t4) TyType)) (= (type heap@@21) (MapType0Type refType MapType1Type))) (= (type h@@48) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@26) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@11) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@47) BoxType)) (= (type bx1@@31) BoxType)) (= (type bx2@@15) BoxType)) (= (type bx3) BoxType)) (= (Apply4 t0@@72 t1@@48 t2@@29 t3@@14 t4 heap@@21 (Handle4 h@@48 r@@26 rd@@11) bx0@@47 bx1@@31 bx2@@15 bx3) (MapType5Select h@@48 heap@@21 bx0@@47 bx1@@31 bx2@@15 bx3))) :qid |unknown.0:0| :skolemid |7236| :pattern ( (Apply4 t0@@72 t1@@48 t2@@29 t3@@14 t4 heap@@21 (Handle4 h@@48 r@@26 rd@@11) bx0@@47 bx1@@31 bx2@@15 bx3)) )))
(assert (forall ((t0@@73 T@U) (t1@@49 T@U) (t2@@30 T@U) (t3@@15 T@U) (t4@@0 T@U) (heap@@22 T@U) (h@@49 T@U) (r@@27 T@U) (rd@@12 T@U) (bx0@@48 T@U) (bx1@@32 T@U) (bx2@@16 T@U) (bx3@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@73) TyType) (= (type t1@@49) TyType)) (= (type t2@@30) TyType)) (= (type t3@@15) TyType)) (= (type t4@@0) TyType)) (= (type heap@@22) (MapType0Type refType MapType1Type))) (= (type h@@49) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@27) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@12) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@48) BoxType)) (= (type bx1@@32) BoxType)) (= (type bx2@@16) BoxType)) (= (type bx3@@0) BoxType)) (U_2_bool (MapType5Select r@@27 heap@@22 bx0@@48 bx1@@32 bx2@@16 bx3@@0))) (Requires4 t0@@73 t1@@49 t2@@30 t3@@15 t4@@0 heap@@22 (Handle4 h@@49 r@@27 rd@@12) bx0@@48 bx1@@32 bx2@@16 bx3@@0)) :qid |unknown.0:0| :skolemid |7237| :pattern ( (Requires4 t0@@73 t1@@49 t2@@30 t3@@15 t4@@0 heap@@22 (Handle4 h@@49 r@@27 rd@@12) bx0@@48 bx1@@32 bx2@@16 bx3@@0)) )))
(assert (forall ((arg0@@214 T@U) (arg1@@104 T@U) (arg2@@60 T@U) (arg3@@38 T@U) (arg4@@25 T@U) (arg5@@14 T@U) (arg6@@5 T@U) (arg7@@2 T@U) (arg8@@2 T@U) (arg9@@0 T@U) (arg10@@0 T@U) ) (! (= (type (Reads4 arg0@@214 arg1@@104 arg2@@60 arg3@@38 arg4@@25 arg5@@14 arg6@@5 arg7@@2 arg8@@2 arg9@@0 arg10@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads4| :pattern ( (Reads4 arg0@@214 arg1@@104 arg2@@60 arg3@@38 arg4@@25 arg5@@14 arg6@@5 arg7@@2 arg8@@2 arg9@@0 arg10@@0)) )))
(assert (forall ((t0@@74 T@U) (t1@@50 T@U) (t2@@31 T@U) (t3@@16 T@U) (t4@@1 T@U) (heap@@23 T@U) (h@@50 T@U) (r@@28 T@U) (rd@@13 T@U) (bx0@@49 T@U) (bx1@@33 T@U) (bx2@@17 T@U) (bx3@@1 T@U) (bx@@69 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@74) TyType) (= (type t1@@50) TyType)) (= (type t2@@31) TyType)) (= (type t3@@16) TyType)) (= (type t4@@1) TyType)) (= (type heap@@23) (MapType0Type refType MapType1Type))) (= (type h@@50) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@28) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@13) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@49) BoxType)) (= (type bx1@@33) BoxType)) (= (type bx2@@17) BoxType)) (= (type bx3@@1) BoxType)) (= (type bx@@69) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads4 t0@@74 t1@@50 t2@@31 t3@@16 t4@@1 heap@@23 (Handle4 h@@50 r@@28 rd@@13) bx0@@49 bx1@@33 bx2@@17 bx3@@1) bx@@69)) (U_2_bool (MapType0Select (MapType5Select rd@@13 heap@@23 bx0@@49 bx1@@33 bx2@@17 bx3@@1) bx@@69))) (=> (U_2_bool (MapType0Select (MapType5Select rd@@13 heap@@23 bx0@@49 bx1@@33 bx2@@17 bx3@@1) bx@@69)) (U_2_bool (MapType0Select (Reads4 t0@@74 t1@@50 t2@@31 t3@@16 t4@@1 heap@@23 (Handle4 h@@50 r@@28 rd@@13) bx0@@49 bx1@@33 bx2@@17 bx3@@1) bx@@69))))) :qid |unknown.0:0| :skolemid |7238| :pattern ( (MapType0Select (Reads4 t0@@74 t1@@50 t2@@31 t3@@16 t4@@1 heap@@23 (Handle4 h@@50 r@@28 rd@@13) bx0@@49 bx1@@33 bx2@@17 bx3@@1) bx@@69)) )))
(assert (forall ((t0@@75 T@U) (t1@@51 T@U) (t2@@32 T@U) (t3@@17 T@U) (t4@@2 T@U) (h0@@24 T@U) (h1@@24 T@U) (f@@53 T@U) (bx0@@50 T@U) (bx1@@34 T@U) (bx2@@18 T@U) (bx3@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@75) TyType) (= (type t1@@51) TyType)) (= (type t2@@32) TyType)) (= (type t3@@17) TyType)) (= (type t4@@2) TyType)) (= (type h0@@24) (MapType0Type refType MapType1Type))) (= (type h1@@24) (MapType0Type refType MapType1Type))) (= (type f@@53) HandleTypeType)) (= (type bx0@@50) BoxType)) (= (type bx1@@34) BoxType)) (= (type bx2@@18) BoxType)) (= (type bx3@@2) BoxType)) (and (and (and ($HeapSucc h0@@24 h1@@24) (and ($IsGoodHeap h0@@24) ($IsGoodHeap h1@@24))) (and (and (and (and ($IsBox bx0@@50 t0@@75) ($IsBox bx1@@34 t1@@51)) ($IsBox bx2@@18 t2@@32)) ($IsBox bx3@@2 t3@@17)) ($Is f@@53 (Tclass._System.___hFunc4 t0@@75 t1@@51 t2@@32 t3@@17 t4@@2)))) (forall ((o@@78 T@U) (fld@@23 T@U) ) (! (let ((a@@110 (FieldTypeInv0 (type fld@@23)))) (=> (and (and (= (type o@@78) refType) (= (type fld@@23) (FieldType a@@110))) (and (not (= o@@78 null)) (U_2_bool (MapType0Select (Reads4 t0@@75 t1@@51 t2@@32 t3@@17 t4@@2 h0@@24 f@@53 bx0@@50 bx1@@34 bx2@@18 bx3@@2) ($Box o@@78))))) (= (MapType1Select (MapType0Select h0@@24 o@@78) fld@@23) (MapType1Select (MapType0Select h1@@24 o@@78) fld@@23)))) :qid |unknown.0:0| :skolemid |7239| :no-pattern (type o@@78) :no-pattern (type fld@@23) :no-pattern (U_2_int o@@78) :no-pattern (U_2_bool o@@78) :no-pattern (U_2_int fld@@23) :no-pattern (U_2_bool fld@@23) )))) (= (Reads4 t0@@75 t1@@51 t2@@32 t3@@17 t4@@2 h0@@24 f@@53 bx0@@50 bx1@@34 bx2@@18 bx3@@2) (Reads4 t0@@75 t1@@51 t2@@32 t3@@17 t4@@2 h1@@24 f@@53 bx0@@50 bx1@@34 bx2@@18 bx3@@2))) :qid |unknown.0:0| :skolemid |7240| :pattern ( ($HeapSucc h0@@24 h1@@24) (Reads4 t0@@75 t1@@51 t2@@32 t3@@17 t4@@2 h1@@24 f@@53 bx0@@50 bx1@@34 bx2@@18 bx3@@2)) )))
(assert (forall ((t0@@76 T@U) (t1@@52 T@U) (t2@@33 T@U) (t3@@18 T@U) (t4@@3 T@U) (h0@@25 T@U) (h1@@25 T@U) (f@@54 T@U) (bx0@@51 T@U) (bx1@@35 T@U) (bx2@@19 T@U) (bx3@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@76) TyType) (= (type t1@@52) TyType)) (= (type t2@@33) TyType)) (= (type t3@@18) TyType)) (= (type t4@@3) TyType)) (= (type h0@@25) (MapType0Type refType MapType1Type))) (= (type h1@@25) (MapType0Type refType MapType1Type))) (= (type f@@54) HandleTypeType)) (= (type bx0@@51) BoxType)) (= (type bx1@@35) BoxType)) (= (type bx2@@19) BoxType)) (= (type bx3@@3) BoxType)) (and (and (and ($HeapSucc h0@@25 h1@@25) (and ($IsGoodHeap h0@@25) ($IsGoodHeap h1@@25))) (and (and (and (and ($IsBox bx0@@51 t0@@76) ($IsBox bx1@@35 t1@@52)) ($IsBox bx2@@19 t2@@33)) ($IsBox bx3@@3 t3@@18)) ($Is f@@54 (Tclass._System.___hFunc4 t0@@76 t1@@52 t2@@33 t3@@18 t4@@3)))) (forall ((o@@79 T@U) (fld@@24 T@U) ) (! (let ((a@@111 (FieldTypeInv0 (type fld@@24)))) (=> (and (and (= (type o@@79) refType) (= (type fld@@24) (FieldType a@@111))) (and (not (= o@@79 null)) (U_2_bool (MapType0Select (Reads4 t0@@76 t1@@52 t2@@33 t3@@18 t4@@3 h1@@25 f@@54 bx0@@51 bx1@@35 bx2@@19 bx3@@3) ($Box o@@79))))) (= (MapType1Select (MapType0Select h0@@25 o@@79) fld@@24) (MapType1Select (MapType0Select h1@@25 o@@79) fld@@24)))) :qid |unknown.0:0| :skolemid |7241| :no-pattern (type o@@79) :no-pattern (type fld@@24) :no-pattern (U_2_int o@@79) :no-pattern (U_2_bool o@@79) :no-pattern (U_2_int fld@@24) :no-pattern (U_2_bool fld@@24) )))) (= (Reads4 t0@@76 t1@@52 t2@@33 t3@@18 t4@@3 h0@@25 f@@54 bx0@@51 bx1@@35 bx2@@19 bx3@@3) (Reads4 t0@@76 t1@@52 t2@@33 t3@@18 t4@@3 h1@@25 f@@54 bx0@@51 bx1@@35 bx2@@19 bx3@@3))) :qid |unknown.0:0| :skolemid |7242| :pattern ( ($HeapSucc h0@@25 h1@@25) (Reads4 t0@@76 t1@@52 t2@@33 t3@@18 t4@@3 h1@@25 f@@54 bx0@@51 bx1@@35 bx2@@19 bx3@@3)) )))
(assert (forall ((t0@@77 T@U) (t1@@53 T@U) (t2@@34 T@U) (t3@@19 T@U) (t4@@4 T@U) (h0@@26 T@U) (h1@@26 T@U) (f@@55 T@U) (bx0@@52 T@U) (bx1@@36 T@U) (bx2@@20 T@U) (bx3@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@77) TyType) (= (type t1@@53) TyType)) (= (type t2@@34) TyType)) (= (type t3@@19) TyType)) (= (type t4@@4) TyType)) (= (type h0@@26) (MapType0Type refType MapType1Type))) (= (type h1@@26) (MapType0Type refType MapType1Type))) (= (type f@@55) HandleTypeType)) (= (type bx0@@52) BoxType)) (= (type bx1@@36) BoxType)) (= (type bx2@@20) BoxType)) (= (type bx3@@4) BoxType)) (and (and (and ($HeapSucc h0@@26 h1@@26) (and ($IsGoodHeap h0@@26) ($IsGoodHeap h1@@26))) (and (and (and (and ($IsBox bx0@@52 t0@@77) ($IsBox bx1@@36 t1@@53)) ($IsBox bx2@@20 t2@@34)) ($IsBox bx3@@4 t3@@19)) ($Is f@@55 (Tclass._System.___hFunc4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4)))) (forall ((o@@80 T@U) (fld@@25 T@U) ) (! (let ((a@@112 (FieldTypeInv0 (type fld@@25)))) (=> (and (and (= (type o@@80) refType) (= (type fld@@25) (FieldType a@@112))) (and (not (= o@@80 null)) (U_2_bool (MapType0Select (Reads4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 h0@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4) ($Box o@@80))))) (= (MapType1Select (MapType0Select h0@@26 o@@80) fld@@25) (MapType1Select (MapType0Select h1@@26 o@@80) fld@@25)))) :qid |unknown.0:0| :skolemid |7243| :no-pattern (type o@@80) :no-pattern (type fld@@25) :no-pattern (U_2_int o@@80) :no-pattern (U_2_bool o@@80) :no-pattern (U_2_int fld@@25) :no-pattern (U_2_bool fld@@25) )))) (and (=> (Requires4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 h0@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4) (Requires4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 h1@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4)) (=> (Requires4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 h1@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4) (Requires4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 h0@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4)))) :qid |unknown.0:0| :skolemid |7244| :pattern ( ($HeapSucc h0@@26 h1@@26) (Requires4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 h1@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4)) )))
(assert (forall ((t0@@78 T@U) (t1@@54 T@U) (t2@@35 T@U) (t3@@20 T@U) (t4@@5 T@U) (h0@@27 T@U) (h1@@27 T@U) (f@@56 T@U) (bx0@@53 T@U) (bx1@@37 T@U) (bx2@@21 T@U) (bx3@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@78) TyType) (= (type t1@@54) TyType)) (= (type t2@@35) TyType)) (= (type t3@@20) TyType)) (= (type t4@@5) TyType)) (= (type h0@@27) (MapType0Type refType MapType1Type))) (= (type h1@@27) (MapType0Type refType MapType1Type))) (= (type f@@56) HandleTypeType)) (= (type bx0@@53) BoxType)) (= (type bx1@@37) BoxType)) (= (type bx2@@21) BoxType)) (= (type bx3@@5) BoxType)) (and (and (and ($HeapSucc h0@@27 h1@@27) (and ($IsGoodHeap h0@@27) ($IsGoodHeap h1@@27))) (and (and (and (and ($IsBox bx0@@53 t0@@78) ($IsBox bx1@@37 t1@@54)) ($IsBox bx2@@21 t2@@35)) ($IsBox bx3@@5 t3@@20)) ($Is f@@56 (Tclass._System.___hFunc4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5)))) (forall ((o@@81 T@U) (fld@@26 T@U) ) (! (let ((a@@113 (FieldTypeInv0 (type fld@@26)))) (=> (and (and (= (type o@@81) refType) (= (type fld@@26) (FieldType a@@113))) (and (not (= o@@81 null)) (U_2_bool (MapType0Select (Reads4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5) ($Box o@@81))))) (= (MapType1Select (MapType0Select h0@@27 o@@81) fld@@26) (MapType1Select (MapType0Select h1@@27 o@@81) fld@@26)))) :qid |unknown.0:0| :skolemid |7245| :no-pattern (type o@@81) :no-pattern (type fld@@26) :no-pattern (U_2_int o@@81) :no-pattern (U_2_bool o@@81) :no-pattern (U_2_int fld@@26) :no-pattern (U_2_bool fld@@26) )))) (and (=> (Requires4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 h0@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5) (Requires4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5)) (=> (Requires4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5) (Requires4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 h0@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5)))) :qid |unknown.0:0| :skolemid |7246| :pattern ( ($HeapSucc h0@@27 h1@@27) (Requires4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5)) )))
(assert (forall ((t0@@79 T@U) (t1@@55 T@U) (t2@@36 T@U) (t3@@21 T@U) (t4@@6 T@U) (h0@@28 T@U) (h1@@28 T@U) (f@@57 T@U) (bx0@@54 T@U) (bx1@@38 T@U) (bx2@@22 T@U) (bx3@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@79) TyType) (= (type t1@@55) TyType)) (= (type t2@@36) TyType)) (= (type t3@@21) TyType)) (= (type t4@@6) TyType)) (= (type h0@@28) (MapType0Type refType MapType1Type))) (= (type h1@@28) (MapType0Type refType MapType1Type))) (= (type f@@57) HandleTypeType)) (= (type bx0@@54) BoxType)) (= (type bx1@@38) BoxType)) (= (type bx2@@22) BoxType)) (= (type bx3@@6) BoxType)) (and (and (and ($HeapSucc h0@@28 h1@@28) (and ($IsGoodHeap h0@@28) ($IsGoodHeap h1@@28))) (and (and (and (and ($IsBox bx0@@54 t0@@79) ($IsBox bx1@@38 t1@@55)) ($IsBox bx2@@22 t2@@36)) ($IsBox bx3@@6 t3@@21)) ($Is f@@57 (Tclass._System.___hFunc4 t0@@79 t1@@55 t2@@36 t3@@21 t4@@6)))) (forall ((o@@82 T@U) (fld@@27 T@U) ) (! (let ((a@@114 (FieldTypeInv0 (type fld@@27)))) (=> (and (and (= (type o@@82) refType) (= (type fld@@27) (FieldType a@@114))) (and (not (= o@@82 null)) (U_2_bool (MapType0Select (Reads4 t0@@79 t1@@55 t2@@36 t3@@21 t4@@6 h0@@28 f@@57 bx0@@54 bx1@@38 bx2@@22 bx3@@6) ($Box o@@82))))) (= (MapType1Select (MapType0Select h0@@28 o@@82) fld@@27) (MapType1Select (MapType0Select h1@@28 o@@82) fld@@27)))) :qid |unknown.0:0| :skolemid |7247| :no-pattern (type o@@82) :no-pattern (type fld@@27) :no-pattern (U_2_int o@@82) :no-pattern (U_2_bool o@@82) :no-pattern (U_2_int fld@@27) :no-pattern (U_2_bool fld@@27) )))) (= (Apply4 t0@@79 t1@@55 t2@@36 t3@@21 t4@@6 h0@@28 f@@57 bx0@@54 bx1@@38 bx2@@22 bx3@@6) (Apply4 t0@@79 t1@@55 t2@@36 t3@@21 t4@@6 h1@@28 f@@57 bx0@@54 bx1@@38 bx2@@22 bx3@@6))) :qid |unknown.0:0| :skolemid |7248| :pattern ( ($HeapSucc h0@@28 h1@@28) (Apply4 t0@@79 t1@@55 t2@@36 t3@@21 t4@@6 h1@@28 f@@57 bx0@@54 bx1@@38 bx2@@22 bx3@@6)) )))
(assert (forall ((t0@@80 T@U) (t1@@56 T@U) (t2@@37 T@U) (t3@@22 T@U) (t4@@7 T@U) (h0@@29 T@U) (h1@@29 T@U) (f@@58 T@U) (bx0@@55 T@U) (bx1@@39 T@U) (bx2@@23 T@U) (bx3@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@80) TyType) (= (type t1@@56) TyType)) (= (type t2@@37) TyType)) (= (type t3@@22) TyType)) (= (type t4@@7) TyType)) (= (type h0@@29) (MapType0Type refType MapType1Type))) (= (type h1@@29) (MapType0Type refType MapType1Type))) (= (type f@@58) HandleTypeType)) (= (type bx0@@55) BoxType)) (= (type bx1@@39) BoxType)) (= (type bx2@@23) BoxType)) (= (type bx3@@7) BoxType)) (and (and (and ($HeapSucc h0@@29 h1@@29) (and ($IsGoodHeap h0@@29) ($IsGoodHeap h1@@29))) (and (and (and (and ($IsBox bx0@@55 t0@@80) ($IsBox bx1@@39 t1@@56)) ($IsBox bx2@@23 t2@@37)) ($IsBox bx3@@7 t3@@22)) ($Is f@@58 (Tclass._System.___hFunc4 t0@@80 t1@@56 t2@@37 t3@@22 t4@@7)))) (forall ((o@@83 T@U) (fld@@28 T@U) ) (! (let ((a@@115 (FieldTypeInv0 (type fld@@28)))) (=> (and (and (= (type o@@83) refType) (= (type fld@@28) (FieldType a@@115))) (and (not (= o@@83 null)) (U_2_bool (MapType0Select (Reads4 t0@@80 t1@@56 t2@@37 t3@@22 t4@@7 h1@@29 f@@58 bx0@@55 bx1@@39 bx2@@23 bx3@@7) ($Box o@@83))))) (= (MapType1Select (MapType0Select h0@@29 o@@83) fld@@28) (MapType1Select (MapType0Select h1@@29 o@@83) fld@@28)))) :qid |unknown.0:0| :skolemid |7249| :no-pattern (type o@@83) :no-pattern (type fld@@28) :no-pattern (U_2_int o@@83) :no-pattern (U_2_bool o@@83) :no-pattern (U_2_int fld@@28) :no-pattern (U_2_bool fld@@28) )))) (= (Apply4 t0@@80 t1@@56 t2@@37 t3@@22 t4@@7 h0@@29 f@@58 bx0@@55 bx1@@39 bx2@@23 bx3@@7) (Apply4 t0@@80 t1@@56 t2@@37 t3@@22 t4@@7 h1@@29 f@@58 bx0@@55 bx1@@39 bx2@@23 bx3@@7))) :qid |unknown.0:0| :skolemid |7250| :pattern ( ($HeapSucc h0@@29 h1@@29) (Apply4 t0@@80 t1@@56 t2@@37 t3@@22 t4@@7 h1@@29 f@@58 bx0@@55 bx1@@39 bx2@@23 bx3@@7)) )))
(assert (forall ((t0@@81 T@U) (t1@@57 T@U) (t2@@38 T@U) (t3@@23 T@U) (t4@@8 T@U) (heap@@24 T@U) (f@@59 T@U) (bx0@@56 T@U) (bx1@@40 T@U) (bx2@@24 T@U) (bx3@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@81) TyType) (= (type t1@@57) TyType)) (= (type t2@@38) TyType)) (= (type t3@@23) TyType)) (= (type t4@@8) TyType)) (= (type heap@@24) (MapType0Type refType MapType1Type))) (= (type f@@59) HandleTypeType)) (= (type bx0@@56) BoxType)) (= (type bx1@@40) BoxType)) (= (type bx2@@24) BoxType)) (= (type bx3@@8) BoxType)) (and ($IsGoodHeap heap@@24) (and (and (and (and ($IsBox bx0@@56 t0@@81) ($IsBox bx1@@40 t1@@57)) ($IsBox bx2@@24 t2@@38)) ($IsBox bx3@@8 t3@@23)) ($Is f@@59 (Tclass._System.___hFunc4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8))))) (and (=> (|Set#Equal| (Reads4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 $OneHeap f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 heap@@24 f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 heap@@24 f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 $OneHeap f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |7251| :pattern ( (Reads4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 $OneHeap f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8) ($IsGoodHeap heap@@24)) :pattern ( (Reads4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 heap@@24 f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8)) )))
(assert (forall ((t0@@82 T@U) (t1@@58 T@U) (t2@@39 T@U) (t3@@24 T@U) (t4@@9 T@U) (heap@@25 T@U) (f@@60 T@U) (bx0@@57 T@U) (bx1@@41 T@U) (bx2@@25 T@U) (bx3@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@82) TyType) (= (type t1@@58) TyType)) (= (type t2@@39) TyType)) (= (type t3@@24) TyType)) (= (type t4@@9) TyType)) (= (type heap@@25) (MapType0Type refType MapType1Type))) (= (type f@@60) HandleTypeType)) (= (type bx0@@57) BoxType)) (= (type bx1@@41) BoxType)) (= (type bx2@@25) BoxType)) (= (type bx3@@9) BoxType)) (and (and ($IsGoodHeap heap@@25) (and (and (and (and ($IsBox bx0@@57 t0@@82) ($IsBox bx1@@41 t1@@58)) ($IsBox bx2@@25 t2@@39)) ($IsBox bx3@@9 t3@@24)) ($Is f@@60 (Tclass._System.___hFunc4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9)))) (|Set#Equal| (Reads4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9) (|Set#Empty| BoxType)))) (and (=> (Requires4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9) (Requires4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 heap@@25 f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9)) (=> (Requires4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 heap@@25 f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9) (Requires4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9)))) :qid |unknown.0:0| :skolemid |7252| :pattern ( (Requires4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9) ($IsGoodHeap heap@@25)) :pattern ( (Requires4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 heap@@25 f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9)) )))
(assert (forall ((f@@61 T@U) (t0@@83 T@U) (t1@@59 T@U) (t2@@40 T@U) (t3@@25 T@U) (t4@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@61) HandleTypeType) (= (type t0@@83) TyType)) (= (type t1@@59) TyType)) (= (type t2@@40) TyType)) (= (type t3@@25) TyType)) (= (type t4@@10) TyType)) (and (=> ($Is f@@61 (Tclass._System.___hFunc4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10)) (forall ((h@@51 T@U) (bx0@@58 T@U) (bx1@@42 T@U) (bx2@@26 T@U) (bx3@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@51) (MapType0Type refType MapType1Type)) (= (type bx0@@58) BoxType)) (= (type bx1@@42) BoxType)) (= (type bx2@@26) BoxType)) (= (type bx3@@10) BoxType)) (and (and ($IsGoodHeap h@@51) (and (and (and ($IsBox bx0@@58 t0@@83) ($IsBox bx1@@42 t1@@59)) ($IsBox bx2@@26 t2@@40)) ($IsBox bx3@@10 t3@@25))) (Requires4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 h@@51 f@@61 bx0@@58 bx1@@42 bx2@@26 bx3@@10))) ($IsBox (Apply4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 h@@51 f@@61 bx0@@58 bx1@@42 bx2@@26 bx3@@10) t4@@10)) :qid |DafnyPre.521:12| :skolemid |7253| :pattern ( (Apply4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 h@@51 f@@61 bx0@@58 bx1@@42 bx2@@26 bx3@@10)) ))) (=> (forall ((h@@52 T@U) (bx0@@59 T@U) (bx1@@43 T@U) (bx2@@27 T@U) (bx3@@11 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@52) (MapType0Type refType MapType1Type)) (= (type bx0@@59) BoxType)) (= (type bx1@@43) BoxType)) (= (type bx2@@27) BoxType)) (= (type bx3@@11) BoxType)) (and (and ($IsGoodHeap h@@52) (and (and (and ($IsBox bx0@@59 t0@@83) ($IsBox bx1@@43 t1@@59)) ($IsBox bx2@@27 t2@@40)) ($IsBox bx3@@11 t3@@25))) (Requires4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 h@@52 f@@61 bx0@@59 bx1@@43 bx2@@27 bx3@@11))) ($IsBox (Apply4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 h@@52 f@@61 bx0@@59 bx1@@43 bx2@@27 bx3@@11) t4@@10)) :qid |DafnyPre.521:12| :skolemid |7253| :pattern ( (Apply4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 h@@52 f@@61 bx0@@59 bx1@@43 bx2@@27 bx3@@11)) )) ($Is f@@61 (Tclass._System.___hFunc4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10))))) :qid |unknown.0:0| :skolemid |7254| :pattern ( ($Is f@@61 (Tclass._System.___hFunc4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10))) )))
(assert (forall ((f@@62 T@U) (t0@@84 T@U) (t1@@60 T@U) (t2@@41 T@U) (t3@@26 T@U) (t4@@11 T@U) (u0@@3 T@U) (u1@@2 T@U) (u2@@1 T@U) (u3@@0 T@U) (u4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type f@@62) HandleTypeType) (= (type t0@@84) TyType)) (= (type t1@@60) TyType)) (= (type t2@@41) TyType)) (= (type t3@@26) TyType)) (= (type t4@@11) TyType)) (= (type u0@@3) TyType)) (= (type u1@@2) TyType)) (= (type u2@@1) TyType)) (= (type u3@@0) TyType)) (= (type u4) TyType)) (and (and (and (and (and ($Is f@@62 (Tclass._System.___hFunc4 t0@@84 t1@@60 t2@@41 t3@@26 t4@@11)) (forall ((bx@@70 T@U) ) (!  (=> (and (= (type bx@@70) BoxType) ($IsBox bx@@70 u0@@3)) ($IsBox bx@@70 t0@@84)) :qid |unknown.0:0| :skolemid |7255| :pattern ( ($IsBox bx@@70 u0@@3)) :pattern ( ($IsBox bx@@70 t0@@84)) ))) (forall ((bx@@71 T@U) ) (!  (=> (and (= (type bx@@71) BoxType) ($IsBox bx@@71 u1@@2)) ($IsBox bx@@71 t1@@60)) :qid |unknown.0:0| :skolemid |7256| :pattern ( ($IsBox bx@@71 u1@@2)) :pattern ( ($IsBox bx@@71 t1@@60)) ))) (forall ((bx@@72 T@U) ) (!  (=> (and (= (type bx@@72) BoxType) ($IsBox bx@@72 u2@@1)) ($IsBox bx@@72 t2@@41)) :qid |unknown.0:0| :skolemid |7257| :pattern ( ($IsBox bx@@72 u2@@1)) :pattern ( ($IsBox bx@@72 t2@@41)) ))) (forall ((bx@@73 T@U) ) (!  (=> (and (= (type bx@@73) BoxType) ($IsBox bx@@73 u3@@0)) ($IsBox bx@@73 t3@@26)) :qid |unknown.0:0| :skolemid |7258| :pattern ( ($IsBox bx@@73 u3@@0)) :pattern ( ($IsBox bx@@73 t3@@26)) ))) (forall ((bx@@74 T@U) ) (!  (=> (and (= (type bx@@74) BoxType) ($IsBox bx@@74 t4@@11)) ($IsBox bx@@74 u4)) :qid |unknown.0:0| :skolemid |7259| :pattern ( ($IsBox bx@@74 t4@@11)) :pattern ( ($IsBox bx@@74 u4)) )))) ($Is f@@62 (Tclass._System.___hFunc4 u0@@3 u1@@2 u2@@1 u3@@0 u4))) :qid |unknown.0:0| :skolemid |7260| :pattern ( ($Is f@@62 (Tclass._System.___hFunc4 t0@@84 t1@@60 t2@@41 t3@@26 t4@@11)) ($Is f@@62 (Tclass._System.___hFunc4 u0@@3 u1@@2 u2@@1 u3@@0 u4))) )))
(assert (forall ((f@@63 T@U) (t0@@85 T@U) (t1@@61 T@U) (t2@@42 T@U) (t3@@27 T@U) (t4@@12 T@U) (h@@53 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@63) HandleTypeType) (= (type t0@@85) TyType)) (= (type t1@@61) TyType)) (= (type t2@@42) TyType)) (= (type t3@@27) TyType)) (= (type t4@@12) TyType)) (= (type h@@53) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@53)) (and (=> ($IsAlloc f@@63 (Tclass._System.___hFunc4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12) h@@53) (forall ((bx0@@60 T@U) (bx1@@44 T@U) (bx2@@28 T@U) (bx3@@12 T@U) ) (!  (=> (and (and (and (= (type bx0@@60) BoxType) (= (type bx1@@44) BoxType)) (= (type bx2@@28) BoxType)) (= (type bx3@@12) BoxType)) (=> (and (and (and (and (and ($IsBox bx0@@60 t0@@85) ($IsAllocBox bx0@@60 t0@@85 h@@53)) (and ($IsBox bx1@@44 t1@@61) ($IsAllocBox bx1@@44 t1@@61 h@@53))) (and ($IsBox bx2@@28 t2@@42) ($IsAllocBox bx2@@28 t2@@42 h@@53))) (and ($IsBox bx3@@12 t3@@27) ($IsAllocBox bx3@@12 t3@@27 h@@53))) (Requires4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28 bx3@@12)) (forall ((r@@29 T@U) ) (!  (=> (= (type r@@29) refType) (=> (and (not (= r@@29 null)) (U_2_bool (MapType0Select (Reads4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28 bx3@@12) ($Box r@@29)))) (U_2_bool (MapType1Select (MapType0Select h@@53 r@@29) alloc)))) :qid |unknown.0:0| :skolemid |7261| :pattern ( (MapType0Select (Reads4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28 bx3@@12) ($Box r@@29))) )))) :qid |unknown.0:0| :skolemid |7262| :pattern ( (Apply4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28 bx3@@12)) :pattern ( (Reads4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28 bx3@@12)) ))) (=> (forall ((bx0@@61 T@U) (bx1@@45 T@U) (bx2@@29 T@U) (bx3@@13 T@U) ) (!  (=> (and (and (and (= (type bx0@@61) BoxType) (= (type bx1@@45) BoxType)) (= (type bx2@@29) BoxType)) (= (type bx3@@13) BoxType)) (=> (and (and (and (and (and ($IsBox bx0@@61 t0@@85) ($IsAllocBox bx0@@61 t0@@85 h@@53)) (and ($IsBox bx1@@45 t1@@61) ($IsAllocBox bx1@@45 t1@@61 h@@53))) (and ($IsBox bx2@@29 t2@@42) ($IsAllocBox bx2@@29 t2@@42 h@@53))) (and ($IsBox bx3@@13 t3@@27) ($IsAllocBox bx3@@13 t3@@27 h@@53))) (Requires4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29 bx3@@13)) (forall ((r@@30 T@U) ) (!  (=> (= (type r@@30) refType) (=> (and (not (= r@@30 null)) (U_2_bool (MapType0Select (Reads4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29 bx3@@13) ($Box r@@30)))) (U_2_bool (MapType1Select (MapType0Select h@@53 r@@30) alloc)))) :qid |unknown.0:0| :skolemid |7261| :pattern ( (MapType0Select (Reads4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29 bx3@@13) ($Box r@@30))) )))) :qid |unknown.0:0| :skolemid |7262| :pattern ( (Apply4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29 bx3@@13)) :pattern ( (Reads4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29 bx3@@13)) )) ($IsAlloc f@@63 (Tclass._System.___hFunc4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12) h@@53)))) :qid |unknown.0:0| :skolemid |7263| :pattern ( ($IsAlloc f@@63 (Tclass._System.___hFunc4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12) h@@53)) )))
(assert (forall ((f@@64 T@U) (t0@@86 T@U) (t1@@62 T@U) (t2@@43 T@U) (t3@@28 T@U) (t4@@13 T@U) (h@@54 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@64) HandleTypeType) (= (type t0@@86) TyType)) (= (type t1@@62) TyType)) (= (type t2@@43) TyType)) (= (type t3@@28) TyType)) (= (type t4@@13) TyType)) (= (type h@@54) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@54) ($IsAlloc f@@64 (Tclass._System.___hFunc4 t0@@86 t1@@62 t2@@43 t3@@28 t4@@13) h@@54))) (forall ((bx0@@62 T@U) (bx1@@46 T@U) (bx2@@30 T@U) (bx3@@14 T@U) ) (!  (=> (and (and (and (= (type bx0@@62) BoxType) (= (type bx1@@46) BoxType)) (= (type bx2@@30) BoxType)) (= (type bx3@@14) BoxType)) (=> (and (and (and (and ($IsAllocBox bx0@@62 t0@@86 h@@54) ($IsAllocBox bx1@@46 t1@@62 h@@54)) ($IsAllocBox bx2@@30 t2@@43 h@@54)) ($IsAllocBox bx3@@14 t3@@28 h@@54)) (Requires4 t0@@86 t1@@62 t2@@43 t3@@28 t4@@13 h@@54 f@@64 bx0@@62 bx1@@46 bx2@@30 bx3@@14)) ($IsAllocBox (Apply4 t0@@86 t1@@62 t2@@43 t3@@28 t4@@13 h@@54 f@@64 bx0@@62 bx1@@46 bx2@@30 bx3@@14) t4@@13 h@@54))) :qid |unknown.0:0| :skolemid |7264| :pattern ( (Apply4 t0@@86 t1@@62 t2@@43 t3@@28 t4@@13 h@@54 f@@64 bx0@@62 bx1@@46 bx2@@30 bx3@@14)) ))) :qid |unknown.0:0| :skolemid |7265| :pattern ( ($IsAlloc f@@64 (Tclass._System.___hFunc4 t0@@86 t1@@62 t2@@43 t3@@28 t4@@13) h@@54)) )))
(assert (forall ((arg0@@215 T@U) (arg1@@105 T@U) (arg2@@61 T@U) (arg3@@39 T@U) (arg4@@26 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4 arg0@@215 arg1@@105 arg2@@61 arg3@@39 arg4@@26)) TyType) :qid |funType:Tclass._System.___hPartialFunc4| :pattern ( (Tclass._System.___hPartialFunc4 arg0@@215 arg1@@105 arg2@@61 arg3@@39 arg4@@26)) )))
(assert (forall ((|#$T0@@85| T@U) (|#$T1@@69| T@U) (|#$T2@@41| T@U) (|#$T3@@19| T@U) (|#$R@@76| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@85|) TyType) (= (type |#$T1@@69|) TyType)) (= (type |#$T2@@41|) TyType)) (= (type |#$T3@@19|) TyType)) (= (type |#$R@@76|) TyType)) (= (Tag (Tclass._System.___hPartialFunc4 |#$T0@@85| |#$T1@@69| |#$T2@@41| |#$T3@@19| |#$R@@76|)) Tagclass._System.___hPartialFunc4)) :qid |unknown.0:0| :skolemid |7266| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@85| |#$T1@@69| |#$T2@@41| |#$T3@@19| |#$R@@76|)) )))
(assert (forall ((arg0@@216 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_0 arg0@@216)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_0| :pattern ( (Tclass._System.___hPartialFunc4_0 arg0@@216)) )))
(assert (forall ((|#$T0@@86| T@U) (|#$T1@@70| T@U) (|#$T2@@42| T@U) (|#$T3@@20| T@U) (|#$R@@77| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@86|) TyType) (= (type |#$T1@@70|) TyType)) (= (type |#$T2@@42|) TyType)) (= (type |#$T3@@20|) TyType)) (= (type |#$R@@77|) TyType)) (= (Tclass._System.___hPartialFunc4_0 (Tclass._System.___hPartialFunc4 |#$T0@@86| |#$T1@@70| |#$T2@@42| |#$T3@@20| |#$R@@77|)) |#$T0@@86|)) :qid |unknown.0:0| :skolemid |7267| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@86| |#$T1@@70| |#$T2@@42| |#$T3@@20| |#$R@@77|)) )))
(assert (forall ((arg0@@217 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_1 arg0@@217)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_1| :pattern ( (Tclass._System.___hPartialFunc4_1 arg0@@217)) )))
(assert (forall ((|#$T0@@87| T@U) (|#$T1@@71| T@U) (|#$T2@@43| T@U) (|#$T3@@21| T@U) (|#$R@@78| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@87|) TyType) (= (type |#$T1@@71|) TyType)) (= (type |#$T2@@43|) TyType)) (= (type |#$T3@@21|) TyType)) (= (type |#$R@@78|) TyType)) (= (Tclass._System.___hPartialFunc4_1 (Tclass._System.___hPartialFunc4 |#$T0@@87| |#$T1@@71| |#$T2@@43| |#$T3@@21| |#$R@@78|)) |#$T1@@71|)) :qid |unknown.0:0| :skolemid |7268| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@87| |#$T1@@71| |#$T2@@43| |#$T3@@21| |#$R@@78|)) )))
(assert (forall ((arg0@@218 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_2 arg0@@218)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_2| :pattern ( (Tclass._System.___hPartialFunc4_2 arg0@@218)) )))
(assert (forall ((|#$T0@@88| T@U) (|#$T1@@72| T@U) (|#$T2@@44| T@U) (|#$T3@@22| T@U) (|#$R@@79| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@88|) TyType) (= (type |#$T1@@72|) TyType)) (= (type |#$T2@@44|) TyType)) (= (type |#$T3@@22|) TyType)) (= (type |#$R@@79|) TyType)) (= (Tclass._System.___hPartialFunc4_2 (Tclass._System.___hPartialFunc4 |#$T0@@88| |#$T1@@72| |#$T2@@44| |#$T3@@22| |#$R@@79|)) |#$T2@@44|)) :qid |unknown.0:0| :skolemid |7269| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@88| |#$T1@@72| |#$T2@@44| |#$T3@@22| |#$R@@79|)) )))
(assert (forall ((arg0@@219 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_3 arg0@@219)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_3| :pattern ( (Tclass._System.___hPartialFunc4_3 arg0@@219)) )))
(assert (forall ((|#$T0@@89| T@U) (|#$T1@@73| T@U) (|#$T2@@45| T@U) (|#$T3@@23| T@U) (|#$R@@80| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@89|) TyType) (= (type |#$T1@@73|) TyType)) (= (type |#$T2@@45|) TyType)) (= (type |#$T3@@23|) TyType)) (= (type |#$R@@80|) TyType)) (= (Tclass._System.___hPartialFunc4_3 (Tclass._System.___hPartialFunc4 |#$T0@@89| |#$T1@@73| |#$T2@@45| |#$T3@@23| |#$R@@80|)) |#$T3@@23|)) :qid |unknown.0:0| :skolemid |7270| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@89| |#$T1@@73| |#$T2@@45| |#$T3@@23| |#$R@@80|)) )))
(assert (forall ((arg0@@220 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_4 arg0@@220)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_4| :pattern ( (Tclass._System.___hPartialFunc4_4 arg0@@220)) )))
(assert (forall ((|#$T0@@90| T@U) (|#$T1@@74| T@U) (|#$T2@@46| T@U) (|#$T3@@24| T@U) (|#$R@@81| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@90|) TyType) (= (type |#$T1@@74|) TyType)) (= (type |#$T2@@46|) TyType)) (= (type |#$T3@@24|) TyType)) (= (type |#$R@@81|) TyType)) (= (Tclass._System.___hPartialFunc4_4 (Tclass._System.___hPartialFunc4 |#$T0@@90| |#$T1@@74| |#$T2@@46| |#$T3@@24| |#$R@@81|)) |#$R@@81|)) :qid |unknown.0:0| :skolemid |7271| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@90| |#$T1@@74| |#$T2@@46| |#$T3@@24| |#$R@@81|)) )))
(assert (forall ((|#$T0@@91| T@U) (|#$T1@@75| T@U) (|#$T2@@47| T@U) (|#$T3@@25| T@U) (|#$R@@82| T@U) (bx@@75 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@91|) TyType) (= (type |#$T1@@75|) TyType)) (= (type |#$T2@@47|) TyType)) (= (type |#$T3@@25|) TyType)) (= (type |#$R@@82|) TyType)) (= (type bx@@75) BoxType)) ($IsBox bx@@75 (Tclass._System.___hPartialFunc4 |#$T0@@91| |#$T1@@75| |#$T2@@47| |#$T3@@25| |#$R@@82|))) (and (= ($Box ($Unbox HandleTypeType bx@@75)) bx@@75) ($Is ($Unbox HandleTypeType bx@@75) (Tclass._System.___hPartialFunc4 |#$T0@@91| |#$T1@@75| |#$T2@@47| |#$T3@@25| |#$R@@82|)))) :qid |unknown.0:0| :skolemid |7272| :pattern ( ($IsBox bx@@75 (Tclass._System.___hPartialFunc4 |#$T0@@91| |#$T1@@75| |#$T2@@47| |#$T3@@25| |#$R@@82|))) )))
(assert (forall ((|#$T0@@92| T@U) (|#$T1@@76| T@U) (|#$T2@@48| T@U) (|#$T3@@26| T@U) (|#$R@@83| T@U) (|f#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@92|) TyType) (= (type |#$T1@@76|) TyType)) (= (type |#$T2@@48|) TyType)) (= (type |#$T3@@26|) TyType)) (= (type |#$R@@83|) TyType)) (= (type |f#0@@15|) HandleTypeType)) (and (=> ($Is |f#0@@15| (Tclass._System.___hPartialFunc4 |#$T0@@92| |#$T1@@76| |#$T2@@48| |#$T3@@26| |#$R@@83|)) (and ($Is |f#0@@15| (Tclass._System.___hFunc4 |#$T0@@92| |#$T1@@76| |#$T2@@48| |#$T3@@26| |#$R@@83|)) (forall ((|x0#0@@11| T@U) (|x1#0@@7| T@U) (|x2#0@@3| T@U) (|x3#0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@11|) BoxType) (= (type |x1#0@@7|) BoxType)) (= (type |x2#0@@3|) BoxType)) (= (type |x3#0|) BoxType)) (and (and (and ($IsBox |x0#0@@11| |#$T0@@92|) ($IsBox |x1#0@@7| |#$T1@@76|)) ($IsBox |x2#0@@3| |#$T2@@48|)) ($IsBox |x3#0| |#$T3@@26|))) (|Set#Equal| (Reads4 |#$T0@@92| |#$T1@@76| |#$T2@@48| |#$T3@@26| |#$R@@83| $OneHeap |f#0@@15| |x0#0@@11| |x1#0@@7| |x2#0@@3| |x3#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |7273| :no-pattern (type |x0#0@@11|) :no-pattern (type |x1#0@@7|) :no-pattern (type |x2#0@@3|) :no-pattern (type |x3#0|) :no-pattern (U_2_int |x0#0@@11|) :no-pattern (U_2_bool |x0#0@@11|) :no-pattern (U_2_int |x1#0@@7|) :no-pattern (U_2_bool |x1#0@@7|) :no-pattern (U_2_int |x2#0@@3|) :no-pattern (U_2_bool |x2#0@@3|) :no-pattern (U_2_int |x3#0|) :no-pattern (U_2_bool |x3#0|) )))) (=> (and ($Is |f#0@@15| (Tclass._System.___hFunc4 |#$T0@@92| |#$T1@@76| |#$T2@@48| |#$T3@@26| |#$R@@83|)) (forall ((|x0#0@@12| T@U) (|x1#0@@8| T@U) (|x2#0@@4| T@U) (|x3#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@12|) BoxType) (= (type |x1#0@@8|) BoxType)) (= (type |x2#0@@4|) BoxType)) (= (type |x3#0@@0|) BoxType)) (and (and (and ($IsBox |x0#0@@12| |#$T0@@92|) ($IsBox |x1#0@@8| |#$T1@@76|)) ($IsBox |x2#0@@4| |#$T2@@48|)) ($IsBox |x3#0@@0| |#$T3@@26|))) (|Set#Equal| (Reads4 |#$T0@@92| |#$T1@@76| |#$T2@@48| |#$T3@@26| |#$R@@83| $OneHeap |f#0@@15| |x0#0@@12| |x1#0@@8| |x2#0@@4| |x3#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |7273| :no-pattern (type |x0#0@@12|) :no-pattern (type |x1#0@@8|) :no-pattern (type |x2#0@@4|) :no-pattern (type |x3#0@@0|) :no-pattern (U_2_int |x0#0@@12|) :no-pattern (U_2_bool |x0#0@@12|) :no-pattern (U_2_int |x1#0@@8|) :no-pattern (U_2_bool |x1#0@@8|) :no-pattern (U_2_int |x2#0@@4|) :no-pattern (U_2_bool |x2#0@@4|) :no-pattern (U_2_int |x3#0@@0|) :no-pattern (U_2_bool |x3#0@@0|) ))) ($Is |f#0@@15| (Tclass._System.___hPartialFunc4 |#$T0@@92| |#$T1@@76| |#$T2@@48| |#$T3@@26| |#$R@@83|))))) :qid |unknown.0:0| :skolemid |7274| :pattern ( ($Is |f#0@@15| (Tclass._System.___hPartialFunc4 |#$T0@@92| |#$T1@@76| |#$T2@@48| |#$T3@@26| |#$R@@83|))) )))
(assert (forall ((|#$T0@@93| T@U) (|#$T1@@77| T@U) (|#$T2@@49| T@U) (|#$T3@@27| T@U) (|#$R@@84| T@U) (|f#0@@16| T@U) ($h@@24 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@93|) TyType) (= (type |#$T1@@77|) TyType)) (= (type |#$T2@@49|) TyType)) (= (type |#$T3@@27|) TyType)) (= (type |#$R@@84|) TyType)) (= (type |f#0@@16|) HandleTypeType)) (= (type $h@@24) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc4 |#$T0@@93| |#$T1@@77| |#$T2@@49| |#$T3@@27| |#$R@@84|) $h@@24) ($IsAlloc |f#0@@16| (Tclass._System.___hFunc4 |#$T0@@93| |#$T1@@77| |#$T2@@49| |#$T3@@27| |#$R@@84|) $h@@24)) (=> ($IsAlloc |f#0@@16| (Tclass._System.___hFunc4 |#$T0@@93| |#$T1@@77| |#$T2@@49| |#$T3@@27| |#$R@@84|) $h@@24) ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc4 |#$T0@@93| |#$T1@@77| |#$T2@@49| |#$T3@@27| |#$R@@84|) $h@@24)))) :qid |unknown.0:0| :skolemid |7275| :pattern ( ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc4 |#$T0@@93| |#$T1@@77| |#$T2@@49| |#$T3@@27| |#$R@@84|) $h@@24)) )))
(assert (forall ((arg0@@221 T@U) (arg1@@106 T@U) (arg2@@62 T@U) (arg3@@40 T@U) (arg4@@27 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4 arg0@@221 arg1@@106 arg2@@62 arg3@@40 arg4@@27)) TyType) :qid |funType:Tclass._System.___hTotalFunc4| :pattern ( (Tclass._System.___hTotalFunc4 arg0@@221 arg1@@106 arg2@@62 arg3@@40 arg4@@27)) )))
(assert (forall ((|#$T0@@94| T@U) (|#$T1@@78| T@U) (|#$T2@@50| T@U) (|#$T3@@28| T@U) (|#$R@@85| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@94|) TyType) (= (type |#$T1@@78|) TyType)) (= (type |#$T2@@50|) TyType)) (= (type |#$T3@@28|) TyType)) (= (type |#$R@@85|) TyType)) (= (Tag (Tclass._System.___hTotalFunc4 |#$T0@@94| |#$T1@@78| |#$T2@@50| |#$T3@@28| |#$R@@85|)) Tagclass._System.___hTotalFunc4)) :qid |unknown.0:0| :skolemid |7276| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@94| |#$T1@@78| |#$T2@@50| |#$T3@@28| |#$R@@85|)) )))
(assert (forall ((arg0@@222 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_0 arg0@@222)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_0| :pattern ( (Tclass._System.___hTotalFunc4_0 arg0@@222)) )))
(assert (forall ((|#$T0@@95| T@U) (|#$T1@@79| T@U) (|#$T2@@51| T@U) (|#$T3@@29| T@U) (|#$R@@86| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@95|) TyType) (= (type |#$T1@@79|) TyType)) (= (type |#$T2@@51|) TyType)) (= (type |#$T3@@29|) TyType)) (= (type |#$R@@86|) TyType)) (= (Tclass._System.___hTotalFunc4_0 (Tclass._System.___hTotalFunc4 |#$T0@@95| |#$T1@@79| |#$T2@@51| |#$T3@@29| |#$R@@86|)) |#$T0@@95|)) :qid |unknown.0:0| :skolemid |7277| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@95| |#$T1@@79| |#$T2@@51| |#$T3@@29| |#$R@@86|)) )))
(assert (forall ((arg0@@223 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_1 arg0@@223)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_1| :pattern ( (Tclass._System.___hTotalFunc4_1 arg0@@223)) )))
(assert (forall ((|#$T0@@96| T@U) (|#$T1@@80| T@U) (|#$T2@@52| T@U) (|#$T3@@30| T@U) (|#$R@@87| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@96|) TyType) (= (type |#$T1@@80|) TyType)) (= (type |#$T2@@52|) TyType)) (= (type |#$T3@@30|) TyType)) (= (type |#$R@@87|) TyType)) (= (Tclass._System.___hTotalFunc4_1 (Tclass._System.___hTotalFunc4 |#$T0@@96| |#$T1@@80| |#$T2@@52| |#$T3@@30| |#$R@@87|)) |#$T1@@80|)) :qid |unknown.0:0| :skolemid |7278| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@96| |#$T1@@80| |#$T2@@52| |#$T3@@30| |#$R@@87|)) )))
(assert (forall ((arg0@@224 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_2 arg0@@224)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_2| :pattern ( (Tclass._System.___hTotalFunc4_2 arg0@@224)) )))
(assert (forall ((|#$T0@@97| T@U) (|#$T1@@81| T@U) (|#$T2@@53| T@U) (|#$T3@@31| T@U) (|#$R@@88| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@97|) TyType) (= (type |#$T1@@81|) TyType)) (= (type |#$T2@@53|) TyType)) (= (type |#$T3@@31|) TyType)) (= (type |#$R@@88|) TyType)) (= (Tclass._System.___hTotalFunc4_2 (Tclass._System.___hTotalFunc4 |#$T0@@97| |#$T1@@81| |#$T2@@53| |#$T3@@31| |#$R@@88|)) |#$T2@@53|)) :qid |unknown.0:0| :skolemid |7279| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@97| |#$T1@@81| |#$T2@@53| |#$T3@@31| |#$R@@88|)) )))
(assert (forall ((arg0@@225 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_3 arg0@@225)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_3| :pattern ( (Tclass._System.___hTotalFunc4_3 arg0@@225)) )))
(assert (forall ((|#$T0@@98| T@U) (|#$T1@@82| T@U) (|#$T2@@54| T@U) (|#$T3@@32| T@U) (|#$R@@89| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@98|) TyType) (= (type |#$T1@@82|) TyType)) (= (type |#$T2@@54|) TyType)) (= (type |#$T3@@32|) TyType)) (= (type |#$R@@89|) TyType)) (= (Tclass._System.___hTotalFunc4_3 (Tclass._System.___hTotalFunc4 |#$T0@@98| |#$T1@@82| |#$T2@@54| |#$T3@@32| |#$R@@89|)) |#$T3@@32|)) :qid |unknown.0:0| :skolemid |7280| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@98| |#$T1@@82| |#$T2@@54| |#$T3@@32| |#$R@@89|)) )))
(assert (forall ((arg0@@226 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_4 arg0@@226)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_4| :pattern ( (Tclass._System.___hTotalFunc4_4 arg0@@226)) )))
(assert (forall ((|#$T0@@99| T@U) (|#$T1@@83| T@U) (|#$T2@@55| T@U) (|#$T3@@33| T@U) (|#$R@@90| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@99|) TyType) (= (type |#$T1@@83|) TyType)) (= (type |#$T2@@55|) TyType)) (= (type |#$T3@@33|) TyType)) (= (type |#$R@@90|) TyType)) (= (Tclass._System.___hTotalFunc4_4 (Tclass._System.___hTotalFunc4 |#$T0@@99| |#$T1@@83| |#$T2@@55| |#$T3@@33| |#$R@@90|)) |#$R@@90|)) :qid |unknown.0:0| :skolemid |7281| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@99| |#$T1@@83| |#$T2@@55| |#$T3@@33| |#$R@@90|)) )))
(assert (forall ((|#$T0@@100| T@U) (|#$T1@@84| T@U) (|#$T2@@56| T@U) (|#$T3@@34| T@U) (|#$R@@91| T@U) (bx@@76 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@100|) TyType) (= (type |#$T1@@84|) TyType)) (= (type |#$T2@@56|) TyType)) (= (type |#$T3@@34|) TyType)) (= (type |#$R@@91|) TyType)) (= (type bx@@76) BoxType)) ($IsBox bx@@76 (Tclass._System.___hTotalFunc4 |#$T0@@100| |#$T1@@84| |#$T2@@56| |#$T3@@34| |#$R@@91|))) (and (= ($Box ($Unbox HandleTypeType bx@@76)) bx@@76) ($Is ($Unbox HandleTypeType bx@@76) (Tclass._System.___hTotalFunc4 |#$T0@@100| |#$T1@@84| |#$T2@@56| |#$T3@@34| |#$R@@91|)))) :qid |unknown.0:0| :skolemid |7282| :pattern ( ($IsBox bx@@76 (Tclass._System.___hTotalFunc4 |#$T0@@100| |#$T1@@84| |#$T2@@56| |#$T3@@34| |#$R@@91|))) )))
(assert (forall ((|#$T0@@101| T@U) (|#$T1@@85| T@U) (|#$T2@@57| T@U) (|#$T3@@35| T@U) (|#$R@@92| T@U) (|f#0@@17| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@101|) TyType) (= (type |#$T1@@85|) TyType)) (= (type |#$T2@@57|) TyType)) (= (type |#$T3@@35|) TyType)) (= (type |#$R@@92|) TyType)) (= (type |f#0@@17|) HandleTypeType)) (and (=> ($Is |f#0@@17| (Tclass._System.___hTotalFunc4 |#$T0@@101| |#$T1@@85| |#$T2@@57| |#$T3@@35| |#$R@@92|)) (and ($Is |f#0@@17| (Tclass._System.___hPartialFunc4 |#$T0@@101| |#$T1@@85| |#$T2@@57| |#$T3@@35| |#$R@@92|)) (forall ((|x0#0@@13| T@U) (|x1#0@@9| T@U) (|x2#0@@5| T@U) (|x3#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@13|) BoxType) (= (type |x1#0@@9|) BoxType)) (= (type |x2#0@@5|) BoxType)) (= (type |x3#0@@1|) BoxType)) (and (and (and ($IsBox |x0#0@@13| |#$T0@@101|) ($IsBox |x1#0@@9| |#$T1@@85|)) ($IsBox |x2#0@@5| |#$T2@@57|)) ($IsBox |x3#0@@1| |#$T3@@35|))) (Requires4 |#$T0@@101| |#$T1@@85| |#$T2@@57| |#$T3@@35| |#$R@@92| $OneHeap |f#0@@17| |x0#0@@13| |x1#0@@9| |x2#0@@5| |x3#0@@1|)) :qid |unknown.0:0| :skolemid |7283| :no-pattern (type |x0#0@@13|) :no-pattern (type |x1#0@@9|) :no-pattern (type |x2#0@@5|) :no-pattern (type |x3#0@@1|) :no-pattern (U_2_int |x0#0@@13|) :no-pattern (U_2_bool |x0#0@@13|) :no-pattern (U_2_int |x1#0@@9|) :no-pattern (U_2_bool |x1#0@@9|) :no-pattern (U_2_int |x2#0@@5|) :no-pattern (U_2_bool |x2#0@@5|) :no-pattern (U_2_int |x3#0@@1|) :no-pattern (U_2_bool |x3#0@@1|) )))) (=> (and ($Is |f#0@@17| (Tclass._System.___hPartialFunc4 |#$T0@@101| |#$T1@@85| |#$T2@@57| |#$T3@@35| |#$R@@92|)) (forall ((|x0#0@@14| T@U) (|x1#0@@10| T@U) (|x2#0@@6| T@U) (|x3#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@14|) BoxType) (= (type |x1#0@@10|) BoxType)) (= (type |x2#0@@6|) BoxType)) (= (type |x3#0@@2|) BoxType)) (and (and (and ($IsBox |x0#0@@14| |#$T0@@101|) ($IsBox |x1#0@@10| |#$T1@@85|)) ($IsBox |x2#0@@6| |#$T2@@57|)) ($IsBox |x3#0@@2| |#$T3@@35|))) (Requires4 |#$T0@@101| |#$T1@@85| |#$T2@@57| |#$T3@@35| |#$R@@92| $OneHeap |f#0@@17| |x0#0@@14| |x1#0@@10| |x2#0@@6| |x3#0@@2|)) :qid |unknown.0:0| :skolemid |7283| :no-pattern (type |x0#0@@14|) :no-pattern (type |x1#0@@10|) :no-pattern (type |x2#0@@6|) :no-pattern (type |x3#0@@2|) :no-pattern (U_2_int |x0#0@@14|) :no-pattern (U_2_bool |x0#0@@14|) :no-pattern (U_2_int |x1#0@@10|) :no-pattern (U_2_bool |x1#0@@10|) :no-pattern (U_2_int |x2#0@@6|) :no-pattern (U_2_bool |x2#0@@6|) :no-pattern (U_2_int |x3#0@@2|) :no-pattern (U_2_bool |x3#0@@2|) ))) ($Is |f#0@@17| (Tclass._System.___hTotalFunc4 |#$T0@@101| |#$T1@@85| |#$T2@@57| |#$T3@@35| |#$R@@92|))))) :qid |unknown.0:0| :skolemid |7284| :pattern ( ($Is |f#0@@17| (Tclass._System.___hTotalFunc4 |#$T0@@101| |#$T1@@85| |#$T2@@57| |#$T3@@35| |#$R@@92|))) )))
(assert (forall ((|#$T0@@102| T@U) (|#$T1@@86| T@U) (|#$T2@@58| T@U) (|#$T3@@36| T@U) (|#$R@@93| T@U) (|f#0@@18| T@U) ($h@@25 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@102|) TyType) (= (type |#$T1@@86|) TyType)) (= (type |#$T2@@58|) TyType)) (= (type |#$T3@@36|) TyType)) (= (type |#$R@@93|) TyType)) (= (type |f#0@@18|) HandleTypeType)) (= (type $h@@25) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc4 |#$T0@@102| |#$T1@@86| |#$T2@@58| |#$T3@@36| |#$R@@93|) $h@@25) ($IsAlloc |f#0@@18| (Tclass._System.___hPartialFunc4 |#$T0@@102| |#$T1@@86| |#$T2@@58| |#$T3@@36| |#$R@@93|) $h@@25)) (=> ($IsAlloc |f#0@@18| (Tclass._System.___hPartialFunc4 |#$T0@@102| |#$T1@@86| |#$T2@@58| |#$T3@@36| |#$R@@93|) $h@@25) ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc4 |#$T0@@102| |#$T1@@86| |#$T2@@58| |#$T3@@36| |#$R@@93|) $h@@25)))) :qid |unknown.0:0| :skolemid |7285| :pattern ( ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc4 |#$T0@@102| |#$T1@@86| |#$T2@@58| |#$T3@@36| |#$R@@93|) $h@@25)) )))
(assert (= (type |#_System._tuple#0._#Make0|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_System._tuple#0._#Make0|) |##_System._tuple#0._#Make0|))
(assert (forall ((d@@14 T@U) ) (!  (=> (= (type d@@14) DatatypeTypeType) (and (=> (_System.Tuple0.___hMake0_q d@@14) (= (DatatypeCtorId d@@14) |##_System._tuple#0._#Make0|)) (=> (= (DatatypeCtorId d@@14) |##_System._tuple#0._#Make0|) (_System.Tuple0.___hMake0_q d@@14)))) :qid |unknown.0:0| :skolemid |7286| :pattern ( (_System.Tuple0.___hMake0_q d@@14)) )))
(assert (forall ((d@@15 T@U) ) (!  (=> (and (= (type d@@15) DatatypeTypeType) (_System.Tuple0.___hMake0_q d@@15)) (= d@@15 |#_System._tuple#0._#Make0|)) :qid |unknown.0:0| :skolemid |7287| :pattern ( (_System.Tuple0.___hMake0_q d@@15)) )))
(assert (= (type Tclass._System.Tuple0) TyType))
(assert (= (Tag Tclass._System.Tuple0) Tagclass._System.Tuple0))
(assert (forall ((bx@@77 T@U) ) (!  (=> (and (= (type bx@@77) BoxType) ($IsBox bx@@77 Tclass._System.Tuple0)) (and (= ($Box ($Unbox DatatypeTypeType bx@@77)) bx@@77) ($Is ($Unbox DatatypeTypeType bx@@77) Tclass._System.Tuple0))) :qid |unknown.0:0| :skolemid |7288| :pattern ( ($IsBox bx@@77 Tclass._System.Tuple0)) )))
(assert ($Is |#_System._tuple#0._#Make0| Tclass._System.Tuple0))
(assert (forall (($h@@26 T@U) ) (!  (=> (and (= (type $h@@26) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@26)) ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@26)) :qid |DafnyPre.521:12| :skolemid |7289| :pattern ( ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@26)) )))
(assert (= |#_System._tuple#0._#Make0| (Lit |#_System._tuple#0._#Make0|)))
(assert (forall ((d@@16 T@U) ) (!  (=> (and (= (type d@@16) DatatypeTypeType) (|$IsA#_System.Tuple0| d@@16)) (_System.Tuple0.___hMake0_q d@@16)) :qid |unknown.0:0| :skolemid |7290| :pattern ( (|$IsA#_System.Tuple0| d@@16)) )))
(assert (forall ((d@@17 T@U) ) (!  (=> (and (= (type d@@17) DatatypeTypeType) ($Is d@@17 Tclass._System.Tuple0)) (_System.Tuple0.___hMake0_q d@@17)) :qid |unknown.0:0| :skolemid |7291| :pattern ( (_System.Tuple0.___hMake0_q d@@17) ($Is d@@17 Tclass._System.Tuple0)) )))
(assert (forall ((a@@116 T@U) (b@@65 T@U) ) (!  (=> (and (and (= (type a@@116) DatatypeTypeType) (= (type b@@65) DatatypeTypeType)) true) (and (=> (|_System.Tuple0#Equal| a@@116 b@@65) true) (=> true (|_System.Tuple0#Equal| a@@116 b@@65)))) :qid |unknown.0:0| :skolemid |7292| :pattern ( (|_System.Tuple0#Equal| a@@116 b@@65)) )))
(assert (forall ((a@@117 T@U) (b@@66 T@U) ) (!  (=> (and (= (type a@@117) DatatypeTypeType) (= (type b@@66) DatatypeTypeType)) (and (=> (|_System.Tuple0#Equal| a@@117 b@@66) (= a@@117 b@@66)) (=> (= a@@117 b@@66) (|_System.Tuple0#Equal| a@@117 b@@66)))) :qid |unknown.0:0| :skolemid |7293| :pattern ( (|_System.Tuple0#Equal| a@@117 b@@66)) )))
(assert (= (type Tclass.KMBtree.__default) TyType))
(assert (= (Tag Tclass.KMBtree.__default) Tagclass.KMBtree.__default))
(assert (forall ((bx@@78 T@U) ) (!  (=> (and (= (type bx@@78) BoxType) ($IsBox bx@@78 Tclass.KMBtree.__default)) (and (= ($Box ($Unbox refType bx@@78)) bx@@78) ($Is ($Unbox refType bx@@78) Tclass.KMBtree.__default))) :qid |unknown.0:0| :skolemid |7294| :pattern ( ($IsBox bx@@78 Tclass.KMBtree.__default)) )))
(assert (forall (($o@@9 T@U) ) (!  (=> (= (type $o@@9) refType) (and (=> ($Is $o@@9 Tclass.KMBtree.__default) (or (= $o@@9 null) (= (dtype $o@@9) Tclass.KMBtree.__default))) (=> (or (= $o@@9 null) (= (dtype $o@@9) Tclass.KMBtree.__default)) ($Is $o@@9 Tclass.KMBtree.__default)))) :qid |unknown.0:0| :skolemid |7295| :pattern ( ($Is $o@@9 Tclass.KMBtree.__default)) )))
(assert (forall (($o@@10 T@U) ($h@@27 T@U) ) (!  (=> (and (= (type $o@@10) refType) (= (type $h@@27) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@10 Tclass.KMBtree.__default $h@@27) (or (= $o@@10 null) (U_2_bool (MapType1Select (MapType0Select $h@@27 $o@@10) alloc)))) (=> (or (= $o@@10 null) (U_2_bool (MapType1Select (MapType0Select $h@@27 $o@@10) alloc))) ($IsAlloc $o@@10 Tclass.KMBtree.__default $h@@27)))) :qid |unknown.0:0| :skolemid |7296| :pattern ( ($IsAlloc $o@@10 Tclass.KMBtree.__default $h@@27)) )))
(assert  (=> (<= 1 $FunctionContextHeight) (=> (or |KMBtree.__default.MaxKeysPerLeaf#canCall| (not (= 1 $FunctionContextHeight))) (and (U_2_bool (Lit (bool_2_U  (and (< 2 KMBtree.__default.MaxKeysPerLeaf) (< KMBtree.__default.MaxKeysPerLeaf (Div NativeTypes.__default.Uint64UpperBound (LitInt 4))))))) (and (<= (LitInt 0) KMBtree.__default.MaxKeysPerLeaf) (< KMBtree.__default.MaxKeysPerLeaf 18446744073709551616))))))
(assert  (=> |KMBtree.__default.MaxKeysPerLeaf#requires| true))
(assert  (=> true |KMBtree.__default.MaxKeysPerLeaf#requires|))
(assert  (=> (<= 1 $FunctionContextHeight) (=> (or |KMBtree.__default.MaxKeysPerLeaf#canCall| (not (= 1 $FunctionContextHeight))) (= KMBtree.__default.MaxKeysPerLeaf (LitInt 64)))))
(assert  (=> (<= 1 $FunctionContextHeight) (=> (or |KMBtree.__default.MaxKeysPerLeaf#canCall| (not (= 1 $FunctionContextHeight))) (= KMBtree.__default.MaxKeysPerLeaf (LitInt 64)))))
(assert (= (type Tclass.NativeTypes.uint64) TyType))
(assert (= (Tag Tclass.NativeTypes.uint64) Tagclass.NativeTypes.uint64))
(assert (forall ((bx@@79 T@U) ) (!  (=> (and (= (type bx@@79) BoxType) ($IsBox bx@@79 Tclass.NativeTypes.uint64)) (and (= ($Box ($Unbox intType bx@@79)) bx@@79) ($Is ($Unbox intType bx@@79) Tclass.NativeTypes.uint64))) :qid |unknown.0:0| :skolemid |7297| :pattern ( ($IsBox bx@@79 Tclass.NativeTypes.uint64)) )))
(assert  (=> (<= 2 $FunctionContextHeight) (=> (or |KMBtree.__default.MaxChildren#canCall| (not (= 2 $FunctionContextHeight))) (and (U_2_bool (Lit (bool_2_U  (and (< 3 KMBtree.__default.MaxChildren) (< KMBtree.__default.MaxChildren (Div NativeTypes.__default.Uint64UpperBound (LitInt 4))))))) (and (<= (LitInt 0) KMBtree.__default.MaxChildren) (< KMBtree.__default.MaxChildren 18446744073709551616))))))
(assert  (=> |KMBtree.__default.MaxChildren#requires| true))
(assert  (=> true |KMBtree.__default.MaxChildren#requires|))
(assert  (=> (<= 2 $FunctionContextHeight) (=> (or |KMBtree.__default.MaxChildren#canCall| (not (= 2 $FunctionContextHeight))) (= KMBtree.__default.MaxChildren (LitInt 64)))))
(assert  (=> (<= 2 $FunctionContextHeight) (=> (or |KMBtree.__default.MaxChildren#canCall| (not (= 2 $FunctionContextHeight))) (= KMBtree.__default.MaxChildren (LitInt 64)))))
(assert (= (type Tclass.ValueMessage.Message) TyType))
(assert (= (Tag Tclass.ValueMessage.Message) Tagclass.ValueMessage.Message))
(assert (forall ((bx@@80 T@U) ) (!  (=> (and (= (type bx@@80) BoxType) ($IsBox bx@@80 Tclass.ValueMessage.Message)) (and (= ($Box ($Unbox DatatypeTypeType bx@@80)) bx@@80) ($Is ($Unbox DatatypeTypeType bx@@80) Tclass.ValueMessage.Message))) :qid |unknown.0:0| :skolemid |7298| :pattern ( ($IsBox bx@@80 Tclass.ValueMessage.Message)) )))
(assert (= (type KMBtree.__default.DefaultValue) DatatypeTypeType))
(assert  (=> (<= 4 $FunctionContextHeight) (=> (or |KMBtree.__default.DefaultValue#canCall| (not (= 4 $FunctionContextHeight))) ($Is KMBtree.__default.DefaultValue Tclass.ValueMessage.Message))))
(assert  (=> |KMBtree.__default.DefaultValue#requires| true))
(assert  (=> true |KMBtree.__default.DefaultValue#requires|))
(assert (= (type ValueMessage.__default.DefineDefault) DatatypeTypeType))
(assert  (=> (<= 4 $FunctionContextHeight) (=> (or |KMBtree.__default.DefaultValue#canCall| (not (= 4 $FunctionContextHeight))) (and |ValueMessage.__default.DefineDefault#canCall| (= KMBtree.__default.DefaultValue (Lit ValueMessage.__default.DefineDefault))))))
(assert  (=> (<= 4 $FunctionContextHeight) (=> (or |KMBtree.__default.DefaultValue#canCall| (not (= 4 $FunctionContextHeight))) (and |ValueMessage.__default.DefineDefault#canCall| (= KMBtree.__default.DefaultValue (Lit ValueMessage.__default.DefineDefault))))))
(assert (= (type Tclass.NativeTypes.byte) TyType))
(assert (= (Tag Tclass.NativeTypes.byte) Tagclass.NativeTypes.byte))
(assert (forall ((bx@@81 T@U) ) (!  (=> (and (= (type bx@@81) BoxType) ($IsBox bx@@81 Tclass.NativeTypes.byte)) (and (= ($Box ($Unbox intType bx@@81)) bx@@81) ($Is ($Unbox intType bx@@81) Tclass.NativeTypes.byte))) :qid |unknown.0:0| :skolemid |7300| :pattern ( ($IsBox bx@@81 Tclass.NativeTypes.byte)) )))
(assert (= (type KMBtree.__default.DefaultKey) (SeqType BoxType)))
(assert  (=> (<= 6 $FunctionContextHeight) (=> (or |KMBtree.__default.DefaultKey#canCall| (not (= 6 $FunctionContextHeight))) ($Is KMBtree.__default.DefaultKey (TSeq Tclass.NativeTypes.byte)))))
(assert  (=> |KMBtree.__default.DefaultKey#requires| true))
(assert  (=> true |KMBtree.__default.DefaultKey#requires|))
(assert  (=> (<= 6 $FunctionContextHeight) (=> (or |KMBtree.__default.DefaultKey#canCall| (not (= 6 $FunctionContextHeight))) (= KMBtree.__default.DefaultKey (Lit (|Seq#Empty| BoxType))))))
(assert  (=> (<= 6 $FunctionContextHeight) (=> (or |KMBtree.__default.DefaultKey#canCall| (not (= 6 $FunctionContextHeight))) (= KMBtree.__default.DefaultKey (Lit (|Seq#Empty| BoxType))))))
(assert (forall (($ly T@U) ($Heap T@U) (|nodes#0| T@U) ) (!  (=> (and (and (= (type $ly) LayerTypeType) (= (type $Heap) (MapType0Type refType MapType1Type))) (= (type |nodes#0|) (SeqType BoxType))) (= (KMBtree.__default.MaxSiblingHeight ($LS $ly) $Heap |nodes#0|) (KMBtree.__default.MaxSiblingHeight $ly $Heap |nodes#0|))) :qid |MutableB.44:12| :skolemid |7301| :pattern ( (KMBtree.__default.MaxSiblingHeight ($LS $ly) $Heap |nodes#0|)) )))
(assert  (and (forall ((arg0@@227 T@U) ) (! (= (type (AsFuelBottom arg0@@227)) LayerTypeType) :qid |funType:AsFuelBottom| :pattern ( (AsFuelBottom arg0@@227)) )) (= (type $LZ) LayerTypeType)))
(assert (forall (($ly@@0 T@U) ($Heap@@0 T@U) (|nodes#0@@0| T@U) ) (!  (=> (and (and (= (type $ly@@0) LayerTypeType) (= (type $Heap@@0) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@0|) (SeqType BoxType))) (= (KMBtree.__default.MaxSiblingHeight $ly@@0 $Heap@@0 |nodes#0@@0|) (KMBtree.__default.MaxSiblingHeight $LZ $Heap@@0 |nodes#0@@0|))) :qid |MutableB.44:12| :skolemid |7302| :pattern ( (KMBtree.__default.MaxSiblingHeight (AsFuelBottom $ly@@0) $Heap@@0 |nodes#0@@0|)) )))
(assert (= (type Tclass.KMBtree.Node) TyType))
(assert (= (Tag Tclass.KMBtree.Node) Tagclass.KMBtree.Node))
(assert (forall ((bx@@82 T@U) ) (!  (=> (and (= (type bx@@82) BoxType) ($IsBox bx@@82 Tclass.KMBtree.Node)) (and (= ($Box ($Unbox refType bx@@82)) bx@@82) ($Is ($Unbox refType bx@@82) Tclass.KMBtree.Node))) :qid |unknown.0:0| :skolemid |7303| :pattern ( ($IsBox bx@@82 Tclass.KMBtree.Node)) )))
(assert (forall ((arg0@@228 T@U) (arg1@@107 T@U) ) (! (= (type (Sequences.__default.Set arg0@@228 arg1@@107)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.Set| :pattern ( (Sequences.__default.Set arg0@@228 arg1@@107)) )))
(assert (forall (($ly@@1 T@U) ($h0 T@U) ($h1 T@U) (|nodes#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@1) LayerTypeType) (= (type $h0) (MapType0Type refType MapType1Type))) (= (type $h1) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@1|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (or (|KMBtree.__default.MaxSiblingHeight#canCall| $h0 |nodes#0@@1|) ($Is |nodes#0@@1| (TSeq Tclass.KMBtree.Node)))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1)))) (forall (($o@@11 T@U) ($f T@U) ) (! (let ((alpha@@6 (FieldTypeInv0 (type $f)))) (=> (and (and (= (type $o@@11) refType) (= (type $f) (FieldType alpha@@6))) (and (not (= $o@@11 null)) (U_2_bool (MapType0Select (Sequences.__default.Set Tclass.KMBtree.Node |nodes#0@@1|) ($Box $o@@11))))) (= (MapType1Select (MapType0Select $h0 $o@@11) $f) (MapType1Select (MapType0Select $h1 $o@@11) $f)))) :qid |unknown.0:0| :skolemid |7304| :no-pattern (type $o@@11) :no-pattern (type $f) :no-pattern (U_2_int $o@@11) :no-pattern (U_2_bool $o@@11) :no-pattern (U_2_int $f) :no-pattern (U_2_bool $f) ))) (= (KMBtree.__default.MaxSiblingHeight $ly@@1 $h0 |nodes#0@@1|) (KMBtree.__default.MaxSiblingHeight $ly@@1 $h1 |nodes#0@@1|))) :qid |unknown.0:0| :skolemid |7305| :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (KMBtree.__default.MaxSiblingHeight $ly@@1 $h1 |nodes#0@@1|)) )))
(assert (= (type KMBtree.Node.height) (FieldType intType)))
(assert (= (FDim KMBtree.Node.height) 0))
(assert (= (FieldOfDecl intType class.KMBtree.Node? field$height) KMBtree.Node.height))
(assert ($IsGhostField KMBtree.Node.height))
(assert  (=> (<= 8 $FunctionContextHeight) (forall (($ly@@2 T@U) ($Heap@@1 T@U) (|nodes#0@@2| T@U) ) (!  (=> (and (and (and (= (type $ly@@2) LayerTypeType) (= (type $Heap@@1) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@2|) (SeqType BoxType))) (or (|KMBtree.__default.MaxSiblingHeight#canCall| $Heap@@1 |nodes#0@@2|) (and (not (= 8 $FunctionContextHeight)) (and ($IsGoodHeap $Heap@@1) ($Is |nodes#0@@2| (TSeq Tclass.KMBtree.Node)))))) (forall ((|i#0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0|) (< |i#0| (|Seq#Length| |nodes#0@@2|))) (<= (U_2_int (MapType1Select (MapType0Select $Heap@@1 ($Unbox refType (|Seq#Index| |nodes#0@@2| |i#0|))) KMBtree.Node.height)) (KMBtree.__default.MaxSiblingHeight $ly@@2 $Heap@@1 |nodes#0@@2|)))) :qid |MutableB.45:20| :skolemid |7306| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@2| |i#0|))) ))) :qid |MutableB.44:12| :skolemid |7307| :pattern ( (KMBtree.__default.MaxSiblingHeight $ly@@2 $Heap@@1 |nodes#0@@2|)) ))))
(assert (forall (($ly@@3 T@U) ($Heap@@2 T@U) (|nodes#0@@3| T@U) ) (!  (=> (and (and (and (= (type $ly@@3) LayerTypeType) (= (type $Heap@@2) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@3|) (SeqType BoxType))) (and ($IsGoodHeap $Heap@@2) ($Is |nodes#0@@3| (TSeq Tclass.KMBtree.Node)))) (and (=> (|KMBtree.__default.MaxSiblingHeight#requires| $ly@@3 $Heap@@2 |nodes#0@@3|) true) (=> true (|KMBtree.__default.MaxSiblingHeight#requires| $ly@@3 $Heap@@2 |nodes#0@@3|)))) :qid |MutableB.44:12| :skolemid |7308| :pattern ( (|KMBtree.__default.MaxSiblingHeight#requires| $ly@@3 $Heap@@2 |nodes#0@@3|)) )))
(assert  (=> (<= 8 $FunctionContextHeight) (forall (($ly@@4 T@U) ($Heap@@3 T@U) (|nodes#0@@4| T@U) ) (!  (=> (and (and (and (= (type $ly@@4) LayerTypeType) (= (type $Heap@@3) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@4|) (SeqType BoxType))) (or (|KMBtree.__default.MaxSiblingHeight#canCall| $Heap@@3 |nodes#0@@4|) (and (not (= 8 $FunctionContextHeight)) (and ($IsGoodHeap $Heap@@3) ($Is |nodes#0@@4| (TSeq Tclass.KMBtree.Node)))))) (and (=> (not (|Seq#Equal| |nodes#0@@4| (|Seq#Empty| BoxType))) (and (|KMBtree.__default.MaxSiblingHeight#canCall| $Heap@@3 (|Seq#Drop| |nodes#0@@4| (LitInt 1))) (|Mathematics.__default.max#canCall| (U_2_int (MapType1Select (MapType0Select $Heap@@3 ($Unbox refType (|Seq#Index| |nodes#0@@4| (LitInt 0)))) KMBtree.Node.height)) (KMBtree.__default.MaxSiblingHeight $ly@@4 $Heap@@3 (|Seq#Drop| |nodes#0@@4| (LitInt 1)))))) (= (KMBtree.__default.MaxSiblingHeight ($LS $ly@@4) $Heap@@3 |nodes#0@@4|) (ite (|Seq#Equal| |nodes#0@@4| (|Seq#Empty| BoxType)) (- 0 1) (Mathematics.__default.max (U_2_int (MapType1Select (MapType0Select $Heap@@3 ($Unbox refType (|Seq#Index| |nodes#0@@4| (LitInt 0)))) KMBtree.Node.height)) (KMBtree.__default.MaxSiblingHeight $ly@@4 $Heap@@3 (|Seq#Drop| |nodes#0@@4| (LitInt 1)))))))) :qid |MutableB.44:12| :skolemid |7309| :pattern ( (KMBtree.__default.MaxSiblingHeight ($LS $ly@@4) $Heap@@3 |nodes#0@@4|)) ))))
(assert (forall (($h0@@0 T@U) ($h1@@0 T@U) (|nodes#0@@5| T@U) (|i#0@@0| Int) (|j#0| Int) ) (!  (=> (and (and (= (type $h0@@0) (MapType0Type refType MapType1Type)) (= (type $h1@@0) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@5|) (SeqType BoxType))) (=> (and (and (and ($IsGoodHeap $h0@@0) ($IsGoodHeap $h1@@0)) (or (|KMBtree.__default.DisjointReprs#canCall| $h0@@0 |nodes#0@@5| |i#0@@0| |j#0|) ($Is |nodes#0@@5| (TSeq Tclass.KMBtree.Node)))) (and ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0))) (=> (forall (($o@@12 T@U) ($f@@0 T@U) ) (! (let ((alpha@@7 (FieldTypeInv0 (type $f@@0)))) (=> (and (and (= (type $o@@12) refType) (= (type $f@@0) (FieldType alpha@@7))) (and (not (= $o@@12 null)) (or (= $o@@12 ($Unbox refType (|Seq#Index| |nodes#0@@5| |i#0@@0|))) (= $o@@12 ($Unbox refType (|Seq#Index| |nodes#0@@5| |j#0|)))))) (= (MapType1Select (MapType0Select $h0@@0 $o@@12) $f@@0) (MapType1Select (MapType0Select $h1@@0 $o@@12) $f@@0)))) :qid |unknown.0:0| :skolemid |7325| :no-pattern (type $o@@12) :no-pattern (type $f@@0) :no-pattern (U_2_int $o@@12) :no-pattern (U_2_bool $o@@12) :no-pattern (U_2_int $f@@0) :no-pattern (U_2_bool $f@@0) )) (and (=> (KMBtree.__default.DisjointReprs $h0@@0 |nodes#0@@5| |i#0@@0| |j#0|) (KMBtree.__default.DisjointReprs $h1@@0 |nodes#0@@5| |i#0@@0| |j#0|)) (=> (KMBtree.__default.DisjointReprs $h1@@0 |nodes#0@@5| |i#0@@0| |j#0|) (KMBtree.__default.DisjointReprs $h0@@0 |nodes#0@@5| |i#0@@0| |j#0|)))))) :qid |DafnyPre.521:12| :skolemid |7326| :pattern ( ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0) (KMBtree.__default.DisjointReprs $h1@@0 |nodes#0@@5| |i#0@@0| |j#0|)) )))
(assert  (=> (<= 11 $FunctionContextHeight) (forall (($Heap@@4 T@U) (|nodes#0@@6| T@U) (|i#0@@1| Int) (|j#0@@0| Int) ) (!  (=> (and (and (= (type $Heap@@4) (MapType0Type refType MapType1Type)) (= (type |nodes#0@@6|) (SeqType BoxType))) (or (|KMBtree.__default.DisjointReprs#canCall| $Heap@@4 |nodes#0@@6| |i#0@@1| |j#0@@0|) (and (not (= 11 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@4) ($Is |nodes#0@@6| (TSeq Tclass.KMBtree.Node))) (and (and (<= (LitInt 0) |i#0@@1|) (< |i#0@@1| (|Seq#Length| |nodes#0@@6|))) (and (<= (LitInt 0) |j#0@@0|) (< |j#0@@0| (|Seq#Length| |nodes#0@@6|)))))))) true) :qid |MutableB.66:13| :skolemid |7327| :pattern ( (KMBtree.__default.DisjointReprs $Heap@@4 |nodes#0@@6| |i#0@@1| |j#0@@0|)) ))))
(assert (forall (($Heap@@5 T@U) (|nodes#0@@7| T@U) (|i#0@@2| Int) (|j#0@@1| Int) ) (!  (=> (and (and (= (type $Heap@@5) (MapType0Type refType MapType1Type)) (= (type |nodes#0@@7|) (SeqType BoxType))) (and ($IsGoodHeap $Heap@@5) ($Is |nodes#0@@7| (TSeq Tclass.KMBtree.Node)))) (and (=> (|KMBtree.__default.DisjointReprs#requires| $Heap@@5 |nodes#0@@7| |i#0@@2| |j#0@@1|) (and (and (<= (LitInt 0) |i#0@@2|) (< |i#0@@2| (|Seq#Length| |nodes#0@@7|))) (and (<= (LitInt 0) |j#0@@1|) (< |j#0@@1| (|Seq#Length| |nodes#0@@7|))))) (=> (and (and (<= (LitInt 0) |i#0@@2|) (< |i#0@@2| (|Seq#Length| |nodes#0@@7|))) (and (<= (LitInt 0) |j#0@@1|) (< |j#0@@1| (|Seq#Length| |nodes#0@@7|)))) (|KMBtree.__default.DisjointReprs#requires| $Heap@@5 |nodes#0@@7| |i#0@@2| |j#0@@1|)))) :qid |MutableB.66:13| :skolemid |7328| :pattern ( (|KMBtree.__default.DisjointReprs#requires| $Heap@@5 |nodes#0@@7| |i#0@@2| |j#0@@1|)) )))
(assert (= (type KMBtree.Node.repr) (FieldType (MapType0Type BoxType boolType))))
(assert (= (FDim KMBtree.Node.repr) 0))
(assert (= (FieldOfDecl (MapType0Type BoxType boolType) class.KMBtree.Node? field$repr) KMBtree.Node.repr))
(assert ($IsGhostField KMBtree.Node.repr))
(assert  (=> (<= 11 $FunctionContextHeight) (forall (($Heap@@6 T@U) (|nodes#0@@8| T@U) (|i#0@@3| Int) (|j#0@@2| Int) ) (!  (=> (and (and (= (type $Heap@@6) (MapType0Type refType MapType1Type)) (= (type |nodes#0@@8|) (SeqType BoxType))) (or (|KMBtree.__default.DisjointReprs#canCall| $Heap@@6 |nodes#0@@8| |i#0@@3| |j#0@@2|) (and (not (= 11 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@6) ($Is |nodes#0@@8| (TSeq Tclass.KMBtree.Node))) (and (and (<= (LitInt 0) |i#0@@3|) (< |i#0@@3| (|Seq#Length| |nodes#0@@8|))) (and (<= (LitInt 0) |j#0@@2|) (< |j#0@@2| (|Seq#Length| |nodes#0@@8|)))))))) (and (=> (KMBtree.__default.DisjointReprs $Heap@@6 |nodes#0@@8| |i#0@@3| |j#0@@2|) (|Set#Disjoint| (MapType1Select (MapType0Select $Heap@@6 ($Unbox refType (|Seq#Index| |nodes#0@@8| |i#0@@3|))) KMBtree.Node.repr) (MapType1Select (MapType0Select $Heap@@6 ($Unbox refType (|Seq#Index| |nodes#0@@8| |j#0@@2|))) KMBtree.Node.repr))) (=> (|Set#Disjoint| (MapType1Select (MapType0Select $Heap@@6 ($Unbox refType (|Seq#Index| |nodes#0@@8| |i#0@@3|))) KMBtree.Node.repr) (MapType1Select (MapType0Select $Heap@@6 ($Unbox refType (|Seq#Index| |nodes#0@@8| |j#0@@2|))) KMBtree.Node.repr)) (KMBtree.__default.DisjointReprs $Heap@@6 |nodes#0@@8| |i#0@@3| |j#0@@2|)))) :qid |MutableB.66:13| :skolemid |7329| :pattern ( (KMBtree.__default.DisjointReprs $Heap@@6 |nodes#0@@8| |i#0@@3| |j#0@@2|)) ))))
(assert (forall ((arg0@@229 T@U) (arg1@@108 T@U) (arg2@@63 T@U) ) (! (= (type (KMBtree.__default.SeqRepr arg0@@229 arg1@@108 arg2@@63)) (MapType0Type BoxType boolType)) :qid |funType:KMBtree.__default.SeqRepr| :pattern ( (KMBtree.__default.SeqRepr arg0@@229 arg1@@108 arg2@@63)) )))
(assert (forall (($ly@@5 T@U) ($Heap@@7 T@U) (|nodes#0@@9| T@U) ) (!  (=> (and (and (= (type $ly@@5) LayerTypeType) (= (type $Heap@@7) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@9|) (SeqType BoxType))) (= (KMBtree.__default.SeqRepr ($LS $ly@@5) $Heap@@7 |nodes#0@@9|) (KMBtree.__default.SeqRepr $ly@@5 $Heap@@7 |nodes#0@@9|))) :qid |MutableB.74:22| :skolemid |7330| :pattern ( (KMBtree.__default.SeqRepr ($LS $ly@@5) $Heap@@7 |nodes#0@@9|)) )))
(assert (forall (($ly@@6 T@U) ($Heap@@8 T@U) (|nodes#0@@10| T@U) ) (!  (=> (and (and (= (type $ly@@6) LayerTypeType) (= (type $Heap@@8) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@10|) (SeqType BoxType))) (= (KMBtree.__default.SeqRepr $ly@@6 $Heap@@8 |nodes#0@@10|) (KMBtree.__default.SeqRepr $LZ $Heap@@8 |nodes#0@@10|))) :qid |MutableB.74:22| :skolemid |7331| :pattern ( (KMBtree.__default.SeqRepr (AsFuelBottom $ly@@6) $Heap@@8 |nodes#0@@10|)) )))
(assert (forall (($ly@@7 T@U) ($h0@@1 T@U) ($h1@@1 T@U) (|nodes#0@@11| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@7) LayerTypeType) (= (type $h0@@1) (MapType0Type refType MapType1Type))) (= (type $h1@@1) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@11|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@1) ($IsGoodHeap $h1@@1)) (or (|KMBtree.__default.SeqRepr#canCall| $h0@@1 |nodes#0@@11|) ($Is |nodes#0@@11| (TSeq Tclass.KMBtree.Node)))) (and ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1)))) (forall (($o@@13 T@U) ($f@@1 T@U) ) (! (let ((alpha@@8 (FieldTypeInv0 (type $f@@1)))) (=> (and (and (= (type $o@@13) refType) (= (type $f@@1) (FieldType alpha@@8))) (and (not (= $o@@13 null)) (U_2_bool (MapType0Select (Sequences.__default.Set Tclass.KMBtree.Node |nodes#0@@11|) ($Box $o@@13))))) (= (MapType1Select (MapType0Select $h0@@1 $o@@13) $f@@1) (MapType1Select (MapType0Select $h1@@1 $o@@13) $f@@1)))) :qid |unknown.0:0| :skolemid |7332| :no-pattern (type $o@@13) :no-pattern (type $f@@1) :no-pattern (U_2_int $o@@13) :no-pattern (U_2_bool $o@@13) :no-pattern (U_2_int $f@@1) :no-pattern (U_2_bool $f@@1) ))) (= (KMBtree.__default.SeqRepr $ly@@7 $h0@@1 |nodes#0@@11|) (KMBtree.__default.SeqRepr $ly@@7 $h1@@1 |nodes#0@@11|))) :qid |unknown.0:0| :skolemid |7333| :pattern ( ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1) (KMBtree.__default.SeqRepr $ly@@7 $h1@@1 |nodes#0@@11|)) )))
(assert  (=> (<= 13 $FunctionContextHeight) (forall (($ly@@8 T@U) ($Heap@@9 T@U) (|nodes#0@@12| T@U) ) (!  (=> (and (and (and (= (type $ly@@8) LayerTypeType) (= (type $Heap@@9) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@12|) (SeqType BoxType))) (or (|KMBtree.__default.SeqRepr#canCall| $Heap@@9 |nodes#0@@12|) (and (not (= 13 $FunctionContextHeight)) (and ($IsGoodHeap $Heap@@9) ($Is |nodes#0@@12| (TSeq Tclass.KMBtree.Node)))))) (and (and (forall ((|i#0@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@4|) (< |i#0@@4| (|Seq#Length| |nodes#0@@12|))) (|Set#Subset| (MapType1Select (MapType0Select $Heap@@9 ($Unbox refType (|Seq#Index| |nodes#0@@12| |i#0@@4|))) KMBtree.Node.repr) (KMBtree.__default.SeqRepr $ly@@8 $Heap@@9 |nodes#0@@12|)))) :qid |MutableB.75:20| :skolemid |7334| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@12| |i#0@@4|))) )) (=> (|Seq#Equal| |nodes#0@@12| (|Seq#Empty| BoxType)) (|Set#Equal| (KMBtree.__default.SeqRepr $ly@@8 $Heap@@9 |nodes#0@@12|) (|Set#Empty| BoxType)))) ($Is (KMBtree.__default.SeqRepr $ly@@8 $Heap@@9 |nodes#0@@12|) (TSet Tclass._System.object)))) :qid |MutableB.74:22| :skolemid |7335| :pattern ( (KMBtree.__default.SeqRepr $ly@@8 $Heap@@9 |nodes#0@@12|)) ))))
(assert (forall (($ly@@9 T@U) ($Heap@@10 T@U) (|nodes#0@@13| T@U) ) (!  (=> (and (and (and (= (type $ly@@9) LayerTypeType) (= (type $Heap@@10) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@13|) (SeqType BoxType))) (and ($IsGoodHeap $Heap@@10) ($Is |nodes#0@@13| (TSeq Tclass.KMBtree.Node)))) (and (=> (|KMBtree.__default.SeqRepr#requires| $ly@@9 $Heap@@10 |nodes#0@@13|) true) (=> true (|KMBtree.__default.SeqRepr#requires| $ly@@9 $Heap@@10 |nodes#0@@13|)))) :qid |MutableB.74:22| :skolemid |7336| :pattern ( (|KMBtree.__default.SeqRepr#requires| $ly@@9 $Heap@@10 |nodes#0@@13|)) )))
(assert (forall ((arg0@@230 T@U) (arg1@@109 Int) (arg2@@64 Int) (arg3@@41 T@U) (arg4@@28 T@U) (arg5@@15 T@U) (arg6@@6 T@U) (arg7@@3 T@U) (arg8@@3 T@U) ) (! (= (type (|lambda#7| arg0@@230 arg1@@109 arg2@@64 arg3@@41 arg4@@28 arg5@@15 arg6@@6 arg7@@3 arg8@@3)) (MapType0Type BoxType boolType)) :qid |funType:lambda#7| :pattern ( (|lambda#7| arg0@@230 arg1@@109 arg2@@64 arg3@@41 arg4@@28 arg5@@15 arg6@@6 arg7@@3 arg8@@3)) )))
(assert  (=> (<= 13 $FunctionContextHeight) (forall (($ly@@10 T@U) ($Heap@@11 T@U) (|nodes#0@@14| T@U) ) (!  (=> (and (and (and (= (type $ly@@10) LayerTypeType) (= (type $Heap@@11) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@14|) (SeqType BoxType))) (or (|KMBtree.__default.SeqRepr#canCall| $Heap@@11 |nodes#0@@14|) (and (not (= 13 $FunctionContextHeight)) (and ($IsGoodHeap $Heap@@11) ($Is |nodes#0@@14| (TSeq Tclass.KMBtree.Node)))))) (= (KMBtree.__default.SeqRepr ($LS $ly@@10) $Heap@@11 |nodes#0@@14|) (|lambda#7| Tclass._System.object (LitInt 0) (|Seq#Length| |nodes#0@@14|) $Heap@@11 |nodes#0@@14| KMBtree.Node.repr $Heap@@11 |nodes#0@@14| KMBtree.Node.repr))) :qid |MutableB.74:22| :skolemid |7338| :pattern ( (KMBtree.__default.SeqRepr ($LS $ly@@10) $Heap@@11 |nodes#0@@14|)) ))))
(assert (forall (($ly@@11 T@U) ($Heap@@12 T@U) (|nodes#0@@15| T@U) ) (!  (=> (and (and (= (type $ly@@11) LayerTypeType) (= (type $Heap@@12) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@15|) (SeqType BoxType))) (and (=> (KMBtree.__default.WFShapeSiblings ($LS $ly@@11) $Heap@@12 |nodes#0@@15|) (KMBtree.__default.WFShapeSiblings $ly@@11 $Heap@@12 |nodes#0@@15|)) (=> (KMBtree.__default.WFShapeSiblings $ly@@11 $Heap@@12 |nodes#0@@15|) (KMBtree.__default.WFShapeSiblings ($LS $ly@@11) $Heap@@12 |nodes#0@@15|)))) :qid |MutableB.142:13| :skolemid |7355| :pattern ( (KMBtree.__default.WFShapeSiblings ($LS $ly@@11) $Heap@@12 |nodes#0@@15|)) )))
(assert (forall (($ly@@12 T@U) ($Heap@@13 T@U) (|nodes#0@@16| T@U) ) (!  (=> (and (and (= (type $ly@@12) LayerTypeType) (= (type $Heap@@13) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@16|) (SeqType BoxType))) (and (=> (KMBtree.__default.WFShapeSiblings $ly@@12 $Heap@@13 |nodes#0@@16|) (KMBtree.__default.WFShapeSiblings $LZ $Heap@@13 |nodes#0@@16|)) (=> (KMBtree.__default.WFShapeSiblings $LZ $Heap@@13 |nodes#0@@16|) (KMBtree.__default.WFShapeSiblings $ly@@12 $Heap@@13 |nodes#0@@16|)))) :qid |MutableB.142:13| :skolemid |7356| :pattern ( (KMBtree.__default.WFShapeSiblings (AsFuelBottom $ly@@12) $Heap@@13 |nodes#0@@16|)) )))
(assert (= (type StartFuel_KMBtree._default.SeqRepr) LayerTypeType))
(assert (forall (($ly@@13 T@U) ($h0@@2 T@U) ($h1@@2 T@U) (|nodes#0@@17| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@13) LayerTypeType) (= (type $h0@@2) (MapType0Type refType MapType1Type))) (= (type $h1@@2) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@17|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@2) ($IsGoodHeap $h1@@2)) (or (|KMBtree.__default.WFShapeSiblings#canCall| $h0@@2 |nodes#0@@17|) ($Is |nodes#0@@17| (TSeq Tclass.KMBtree.Node)))) (and ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2)))) (forall (($o@@14 T@U) ($f@@2 T@U) ) (! (let ((alpha@@9 (FieldTypeInv0 (type $f@@2)))) (=> (and (and (= (type $o@@14) refType) (= (type $f@@2) (FieldType alpha@@9))) (and (not (= $o@@14 null)) (or (U_2_bool (MapType0Select (Sequences.__default.Set Tclass.KMBtree.Node |nodes#0@@17|) ($Box $o@@14))) (U_2_bool (MapType0Select (KMBtree.__default.SeqRepr StartFuel_KMBtree._default.SeqRepr $h0@@2 |nodes#0@@17|) ($Box $o@@14)))))) (= (MapType1Select (MapType0Select $h0@@2 $o@@14) $f@@2) (MapType1Select (MapType0Select $h1@@2 $o@@14) $f@@2)))) :qid |unknown.0:0| :skolemid |7357| :no-pattern (type $o@@14) :no-pattern (type $f@@2) :no-pattern (U_2_int $o@@14) :no-pattern (U_2_bool $o@@14) :no-pattern (U_2_int $f@@2) :no-pattern (U_2_bool $f@@2) ))) (and (=> (KMBtree.__default.WFShapeSiblings $ly@@13 $h0@@2 |nodes#0@@17|) (KMBtree.__default.WFShapeSiblings $ly@@13 $h1@@2 |nodes#0@@17|)) (=> (KMBtree.__default.WFShapeSiblings $ly@@13 $h1@@2 |nodes#0@@17|) (KMBtree.__default.WFShapeSiblings $ly@@13 $h0@@2 |nodes#0@@17|)))) :qid |unknown.0:0| :skolemid |7358| :pattern ( ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2) (KMBtree.__default.WFShapeSiblings $ly@@13 $h1@@2 |nodes#0@@17|)) )))
(assert  (=> (<= 17 $FunctionContextHeight) (forall (($ly@@14 T@U) ($Heap@@14 T@U) (|nodes#0@@18| T@U) ) (!  (=> (and (and (and (= (type $ly@@14) LayerTypeType) (= (type $Heap@@14) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@18|) (SeqType BoxType))) (or (|KMBtree.__default.WFShapeSiblings#canCall| $Heap@@14 |nodes#0@@18|) (and (not (= 17 $FunctionContextHeight)) (and ($IsGoodHeap $Heap@@14) ($Is |nodes#0@@18| (TSeq Tclass.KMBtree.Node)))))) true) :qid |MutableB.142:13| :skolemid |7359| :pattern ( (KMBtree.__default.WFShapeSiblings $ly@@14 $Heap@@14 |nodes#0@@18|)) ))))
(assert (forall (($ly@@15 T@U) ($Heap@@15 T@U) (|nodes#0@@19| T@U) ) (!  (=> (and (and (and (= (type $ly@@15) LayerTypeType) (= (type $Heap@@15) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@19|) (SeqType BoxType))) (and ($IsGoodHeap $Heap@@15) ($Is |nodes#0@@19| (TSeq Tclass.KMBtree.Node)))) (and (=> (|KMBtree.__default.WFShapeSiblings#requires| $ly@@15 $Heap@@15 |nodes#0@@19|) true) (=> true (|KMBtree.__default.WFShapeSiblings#requires| $ly@@15 $Heap@@15 |nodes#0@@19|)))) :qid |MutableB.142:13| :skolemid |7360| :pattern ( (|KMBtree.__default.WFShapeSiblings#requires| $ly@@15 $Heap@@15 |nodes#0@@19|)) )))
(assert  (=> (<= 17 $FunctionContextHeight) (forall (($ly@@16 T@U) ($Heap@@16 T@U) (|nodes#0@@20| T@U) ) (!  (=> (and (and (and (= (type $ly@@16) LayerTypeType) (= (type $Heap@@16) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@20|) (SeqType BoxType))) (or (|KMBtree.__default.WFShapeSiblings#canCall| $Heap@@16 |nodes#0@@20|) (and (not (= 17 $FunctionContextHeight)) (and ($IsGoodHeap $Heap@@16) ($Is |nodes#0@@20| (TSeq Tclass.KMBtree.Node)))))) (and (and (forall ((|i#0@@5| Int) ) (!  (=> (< |i#0@@5| (|Seq#Length| |nodes#0@@20|)) (|KMBtree.__default.WFShape#canCall| $Heap@@16 ($Unbox refType (|Seq#Index| |nodes#0@@20| |i#0@@5|)))) :qid |MutableB.146:16| :skolemid |7361| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@20| |i#0@@5|))) )) (=> (forall ((|i#0@@6| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@6|) (< |i#0@@6| (|Seq#Length| |nodes#0@@20|))) (KMBtree.__default.WFShape $ly@@16 $Heap@@16 ($Unbox refType (|Seq#Index| |nodes#0@@20| |i#0@@6|))))) :qid |MutableB.146:16| :skolemid |7363| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@20| |i#0@@6|))) )) (forall ((|i#1| Int) (|j#0@@3| Int) ) (!  (=> (< |j#0@@3| (|Seq#Length| |nodes#0@@20|)) (|KMBtree.__default.DisjointReprs#canCall| $Heap@@16 |nodes#0@@20| |i#1| |j#0@@3|)) :qid |MutableB.147:16| :skolemid |7362| :pattern ( (KMBtree.__default.DisjointReprs $Heap@@16 |nodes#0@@20| |i#1| |j#0@@3|)) )))) (and (=> (KMBtree.__default.WFShapeSiblings ($LS $ly@@16) $Heap@@16 |nodes#0@@20|) (and (forall ((|i#0@@7| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@7|) (< |i#0@@7| (|Seq#Length| |nodes#0@@20|))) (KMBtree.__default.WFShape $ly@@16 $Heap@@16 ($Unbox refType (|Seq#Index| |nodes#0@@20| |i#0@@7|))))) :qid |MutableB.146:16| :skolemid |7364| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@20| |i#0@@7|))) )) (forall ((|i#1@@0| Int) (|j#0@@4| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@0|) (< |i#1@@0| |j#0@@4|)) (< |j#0@@4| (|Seq#Length| |nodes#0@@20|))) (KMBtree.__default.DisjointReprs $Heap@@16 |nodes#0@@20| |i#1@@0| |j#0@@4|))) :qid |MutableB.147:16| :skolemid |7365| :pattern ( (KMBtree.__default.DisjointReprs $Heap@@16 |nodes#0@@20| |i#1@@0| |j#0@@4|)) )))) (=> (and (forall ((|i#0@@8| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@8|) (< |i#0@@8| (|Seq#Length| |nodes#0@@20|))) (KMBtree.__default.WFShape $ly@@16 $Heap@@16 ($Unbox refType (|Seq#Index| |nodes#0@@20| |i#0@@8|))))) :qid |MutableB.146:16| :skolemid |7364| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@20| |i#0@@8|))) )) (forall ((|i#1@@1| Int) (|j#0@@5| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@1|) (< |i#1@@1| |j#0@@5|)) (< |j#0@@5| (|Seq#Length| |nodes#0@@20|))) (KMBtree.__default.DisjointReprs $Heap@@16 |nodes#0@@20| |i#1@@1| |j#0@@5|))) :qid |MutableB.147:16| :skolemid |7365| :pattern ( (KMBtree.__default.DisjointReprs $Heap@@16 |nodes#0@@20| |i#1@@1| |j#0@@5|)) ))) (KMBtree.__default.WFShapeSiblings ($LS $ly@@16) $Heap@@16 |nodes#0@@20|))))) :qid |MutableB.142:13| :skolemid |7366| :pattern ( (KMBtree.__default.WFShapeSiblings ($LS $ly@@16) $Heap@@16 |nodes#0@@20|)) ))))
(assert (forall (($ly@@17 T@U) ($Heap@@17 T@U) (|nodes#0@@21| T@U) (|parentRepr#0| T@U) (|parentHeight#0| Int) ) (!  (=> (and (and (and (= (type $ly@@17) LayerTypeType) (= (type $Heap@@17) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@21|) (SeqType BoxType))) (= (type |parentRepr#0|) (MapType0Type BoxType boolType))) (and (=> (KMBtree.__default.WFShapeChildren ($LS $ly@@17) $Heap@@17 |nodes#0@@21| |parentRepr#0| |parentHeight#0|) (KMBtree.__default.WFShapeChildren $ly@@17 $Heap@@17 |nodes#0@@21| |parentRepr#0| |parentHeight#0|)) (=> (KMBtree.__default.WFShapeChildren $ly@@17 $Heap@@17 |nodes#0@@21| |parentRepr#0| |parentHeight#0|) (KMBtree.__default.WFShapeChildren ($LS $ly@@17) $Heap@@17 |nodes#0@@21| |parentRepr#0| |parentHeight#0|)))) :qid |MutableB.150:13| :skolemid |7377| :pattern ( (KMBtree.__default.WFShapeChildren ($LS $ly@@17) $Heap@@17 |nodes#0@@21| |parentRepr#0| |parentHeight#0|)) )))
(assert (forall (($ly@@18 T@U) ($Heap@@18 T@U) (|nodes#0@@22| T@U) (|parentRepr#0@@0| T@U) (|parentHeight#0@@0| Int) ) (!  (=> (and (and (and (= (type $ly@@18) LayerTypeType) (= (type $Heap@@18) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@22|) (SeqType BoxType))) (= (type |parentRepr#0@@0|) (MapType0Type BoxType boolType))) (and (=> (KMBtree.__default.WFShapeChildren $ly@@18 $Heap@@18 |nodes#0@@22| |parentRepr#0@@0| |parentHeight#0@@0|) (KMBtree.__default.WFShapeChildren $LZ $Heap@@18 |nodes#0@@22| |parentRepr#0@@0| |parentHeight#0@@0|)) (=> (KMBtree.__default.WFShapeChildren $LZ $Heap@@18 |nodes#0@@22| |parentRepr#0@@0| |parentHeight#0@@0|) (KMBtree.__default.WFShapeChildren $ly@@18 $Heap@@18 |nodes#0@@22| |parentRepr#0@@0| |parentHeight#0@@0|)))) :qid |MutableB.150:13| :skolemid |7378| :pattern ( (KMBtree.__default.WFShapeChildren (AsFuelBottom $ly@@18) $Heap@@18 |nodes#0@@22| |parentRepr#0@@0| |parentHeight#0@@0|)) )))
(assert (forall (($ly@@19 T@U) ($h0@@3 T@U) ($h1@@3 T@U) (|nodes#0@@23| T@U) (|parentRepr#0@@1| T@U) (|parentHeight#0@@1| Int) ) (!  (=> (and (and (and (and (and (and (= (type $ly@@19) LayerTypeType) (= (type $h0@@3) (MapType0Type refType MapType1Type))) (= (type $h1@@3) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@23|) (SeqType BoxType))) (= (type |parentRepr#0@@1|) (MapType0Type BoxType boolType))) (and (and (and ($IsGoodHeap $h0@@3) ($IsGoodHeap $h1@@3)) (or (|KMBtree.__default.WFShapeChildren#canCall| $h0@@3 |nodes#0@@23| |parentRepr#0@@1| |parentHeight#0@@1|) (and (and ($Is |nodes#0@@23| (TSeq Tclass.KMBtree.Node)) ($Is |parentRepr#0@@1| (TSet Tclass._System.object))) (<= (LitInt 0) |parentHeight#0@@1|)))) (and ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3)))) (forall (($o@@15 T@U) ($f@@3 T@U) ) (! (let ((alpha@@10 (FieldTypeInv0 (type $f@@3)))) (=> (and (and (= (type $o@@15) refType) (= (type $f@@3) (FieldType alpha@@10))) (and (not (= $o@@15 null)) (U_2_bool (MapType0Select |parentRepr#0@@1| ($Box $o@@15))))) (= (MapType1Select (MapType0Select $h0@@3 $o@@15) $f@@3) (MapType1Select (MapType0Select $h1@@3 $o@@15) $f@@3)))) :qid |unknown.0:0| :skolemid |7379| :no-pattern (type $o@@15) :no-pattern (type $f@@3) :no-pattern (U_2_int $o@@15) :no-pattern (U_2_bool $o@@15) :no-pattern (U_2_int $f@@3) :no-pattern (U_2_bool $f@@3) ))) (and (=> (KMBtree.__default.WFShapeChildren $ly@@19 $h0@@3 |nodes#0@@23| |parentRepr#0@@1| |parentHeight#0@@1|) (KMBtree.__default.WFShapeChildren $ly@@19 $h1@@3 |nodes#0@@23| |parentRepr#0@@1| |parentHeight#0@@1|)) (=> (KMBtree.__default.WFShapeChildren $ly@@19 $h1@@3 |nodes#0@@23| |parentRepr#0@@1| |parentHeight#0@@1|) (KMBtree.__default.WFShapeChildren $ly@@19 $h0@@3 |nodes#0@@23| |parentRepr#0@@1| |parentHeight#0@@1|)))) :qid |unknown.0:0| :skolemid |7380| :pattern ( ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3) (KMBtree.__default.WFShapeChildren $ly@@19 $h1@@3 |nodes#0@@23| |parentRepr#0@@1| |parentHeight#0@@1|)) )))
(assert  (=> (<= 17 $FunctionContextHeight) (forall (($ly@@20 T@U) ($Heap@@19 T@U) (|nodes#0@@24| T@U) (|parentRepr#0@@2| T@U) (|parentHeight#0@@2| Int) ) (!  (=> (and (and (and (and (= (type $ly@@20) LayerTypeType) (= (type $Heap@@19) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@24|) (SeqType BoxType))) (= (type |parentRepr#0@@2|) (MapType0Type BoxType boolType))) (or (|KMBtree.__default.WFShapeChildren#canCall| $Heap@@19 |nodes#0@@24| |parentRepr#0@@2| |parentHeight#0@@2|) (and (not (= 17 $FunctionContextHeight)) (and (and (and ($IsGoodHeap $Heap@@19) ($Is |nodes#0@@24| (TSeq Tclass.KMBtree.Node))) ($Is |parentRepr#0@@2| (TSet Tclass._System.object))) (<= (LitInt 0) |parentHeight#0@@2|))))) true) :qid |MutableB.150:13| :skolemid |7381| :pattern ( (KMBtree.__default.WFShapeChildren $ly@@20 $Heap@@19 |nodes#0@@24| |parentRepr#0@@2| |parentHeight#0@@2|)) ))))
(assert (forall (($ly@@21 T@U) ($Heap@@20 T@U) (|nodes#0@@25| T@U) (|parentRepr#0@@3| T@U) (|parentHeight#0@@3| Int) ) (!  (=> (and (and (and (and (= (type $ly@@21) LayerTypeType) (= (type $Heap@@20) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@25|) (SeqType BoxType))) (= (type |parentRepr#0@@3|) (MapType0Type BoxType boolType))) (and (and (and ($IsGoodHeap $Heap@@20) ($Is |nodes#0@@25| (TSeq Tclass.KMBtree.Node))) ($Is |parentRepr#0@@3| (TSet Tclass._System.object))) (<= (LitInt 0) |parentHeight#0@@3|))) (and (=> (|KMBtree.__default.WFShapeChildren#requires| $ly@@21 $Heap@@20 |nodes#0@@25| |parentRepr#0@@3| |parentHeight#0@@3|) true) (=> true (|KMBtree.__default.WFShapeChildren#requires| $ly@@21 $Heap@@20 |nodes#0@@25| |parentRepr#0@@3| |parentHeight#0@@3|)))) :qid |MutableB.150:13| :skolemid |7382| :pattern ( (|KMBtree.__default.WFShapeChildren#requires| $ly@@21 $Heap@@20 |nodes#0@@25| |parentRepr#0@@3| |parentHeight#0@@3|)) )))
(assert  (=> (<= 17 $FunctionContextHeight) (forall (($ly@@22 T@U) ($Heap@@21 T@U) (|nodes#0@@26| T@U) (|parentRepr#0@@4| T@U) (|parentHeight#0@@4| Int) ) (!  (=> (and (and (and (and (= (type $ly@@22) LayerTypeType) (= (type $Heap@@21) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@26|) (SeqType BoxType))) (= (type |parentRepr#0@@4|) (MapType0Type BoxType boolType))) (or (|KMBtree.__default.WFShapeChildren#canCall| $Heap@@21 |nodes#0@@26| |parentRepr#0@@4| |parentHeight#0@@4|) (and (not (= 17 $FunctionContextHeight)) (and (and (and ($IsGoodHeap $Heap@@21) ($Is |nodes#0@@26| (TSeq Tclass.KMBtree.Node))) ($Is |parentRepr#0@@4| (TSet Tclass._System.object))) (<= (LitInt 0) |parentHeight#0@@4|))))) (and (and (and (|Sequences.__default.Set#canCall| Tclass.KMBtree.Node |nodes#0@@26|) (=> (|Set#Subset| (Sequences.__default.Set Tclass.KMBtree.Node |nodes#0@@26|) |parentRepr#0@@4|) (|KMBtree.__default.SeqRepr#canCall| $Heap@@21 |nodes#0@@26|))) (=> (forall ((|i#0@@9| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@9|) (< |i#0@@9| (|Seq#Length| |nodes#0@@26|))) (< (U_2_int (MapType1Select (MapType0Select $Heap@@21 ($Unbox refType (|Seq#Index| |nodes#0@@26| |i#0@@9|))) KMBtree.Node.height)) |parentHeight#0@@4|))) :qid |MutableB.157:16| :skolemid |7383| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@26| |i#0@@9|))) )) (|KMBtree.__default.WFShapeSiblings#canCall| $Heap@@21 |nodes#0@@26|))) (and (=> (KMBtree.__default.WFShapeChildren ($LS $ly@@22) $Heap@@21 |nodes#0@@26| |parentRepr#0@@4| |parentHeight#0@@4|) (and (and (and (|Set#Subset| (Sequences.__default.Set Tclass.KMBtree.Node |nodes#0@@26|) |parentRepr#0@@4|) (|Set#Subset| (KMBtree.__default.SeqRepr StartFuel_KMBtree._default.SeqRepr $Heap@@21 |nodes#0@@26|) |parentRepr#0@@4|)) (forall ((|i#0@@10| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@10|) (< |i#0@@10| (|Seq#Length| |nodes#0@@26|))) (< (U_2_int (MapType1Select (MapType0Select $Heap@@21 ($Unbox refType (|Seq#Index| |nodes#0@@26| |i#0@@10|))) KMBtree.Node.height)) |parentHeight#0@@4|))) :qid |MutableB.157:16| :skolemid |7384| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@26| |i#0@@10|))) ))) (KMBtree.__default.WFShapeSiblings $ly@@22 $Heap@@21 |nodes#0@@26|))) (=> (and (and (and (|Set#Subset| (Sequences.__default.Set Tclass.KMBtree.Node |nodes#0@@26|) |parentRepr#0@@4|) (|Set#Subset| (KMBtree.__default.SeqRepr StartFuel_KMBtree._default.SeqRepr $Heap@@21 |nodes#0@@26|) |parentRepr#0@@4|)) (forall ((|i#0@@11| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@11|) (< |i#0@@11| (|Seq#Length| |nodes#0@@26|))) (< (U_2_int (MapType1Select (MapType0Select $Heap@@21 ($Unbox refType (|Seq#Index| |nodes#0@@26| |i#0@@11|))) KMBtree.Node.height)) |parentHeight#0@@4|))) :qid |MutableB.157:16| :skolemid |7384| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@26| |i#0@@11|))) ))) (KMBtree.__default.WFShapeSiblings $ly@@22 $Heap@@21 |nodes#0@@26|)) (KMBtree.__default.WFShapeChildren ($LS $ly@@22) $Heap@@21 |nodes#0@@26| |parentRepr#0@@4| |parentHeight#0@@4|))))) :qid |MutableB.150:13| :skolemid |7385| :pattern ( (KMBtree.__default.WFShapeChildren ($LS $ly@@22) $Heap@@21 |nodes#0@@26| |parentRepr#0@@4| |parentHeight#0@@4|)) ))))
(assert (forall (($ly@@23 T@U) ($Heap@@22 T@U) (|node#0| T@U) ) (!  (=> (and (and (= (type $ly@@23) LayerTypeType) (= (type $Heap@@22) (MapType0Type refType MapType1Type))) (= (type |node#0|) refType)) (and (=> (KMBtree.__default.WFShape ($LS $ly@@23) $Heap@@22 |node#0|) (KMBtree.__default.WFShape $ly@@23 $Heap@@22 |node#0|)) (=> (KMBtree.__default.WFShape $ly@@23 $Heap@@22 |node#0|) (KMBtree.__default.WFShape ($LS $ly@@23) $Heap@@22 |node#0|)))) :qid |MutableB.161:13| :skolemid |7392| :pattern ( (KMBtree.__default.WFShape ($LS $ly@@23) $Heap@@22 |node#0|)) )))
(assert (forall (($ly@@24 T@U) ($Heap@@23 T@U) (|node#0@@0| T@U) ) (!  (=> (and (and (= (type $ly@@24) LayerTypeType) (= (type $Heap@@23) (MapType0Type refType MapType1Type))) (= (type |node#0@@0|) refType)) (and (=> (KMBtree.__default.WFShape $ly@@24 $Heap@@23 |node#0@@0|) (KMBtree.__default.WFShape $LZ $Heap@@23 |node#0@@0|)) (=> (KMBtree.__default.WFShape $LZ $Heap@@23 |node#0@@0|) (KMBtree.__default.WFShape $ly@@24 $Heap@@23 |node#0@@0|)))) :qid |MutableB.161:13| :skolemid |7393| :pattern ( (KMBtree.__default.WFShape (AsFuelBottom $ly@@24) $Heap@@23 |node#0@@0|)) )))
(assert (forall (($ly@@25 T@U) ($h0@@4 T@U) ($h1@@4 T@U) (|node#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@25) LayerTypeType) (= (type $h0@@4) (MapType0Type refType MapType1Type))) (= (type $h1@@4) (MapType0Type refType MapType1Type))) (= (type |node#0@@1|) refType)) (and (and (and ($IsGoodHeap $h0@@4) ($IsGoodHeap $h1@@4)) (or (|KMBtree.__default.WFShape#canCall| $h0@@4 |node#0@@1|) ($Is |node#0@@1| Tclass.KMBtree.Node))) (and ($IsHeapAnchor $h0@@4) ($HeapSucc $h0@@4 $h1@@4)))) (forall (($o@@16 T@U) ($f@@4 T@U) ) (! (let ((alpha@@11 (FieldTypeInv0 (type $f@@4)))) (=> (and (and (= (type $o@@16) refType) (= (type $f@@4) (FieldType alpha@@11))) (and (not (= $o@@16 null)) (or (= $o@@16 |node#0@@1|) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $h0@@4 |node#0@@1|) KMBtree.Node.repr) ($Box $o@@16)))))) (= (MapType1Select (MapType0Select $h0@@4 $o@@16) $f@@4) (MapType1Select (MapType0Select $h1@@4 $o@@16) $f@@4)))) :qid |unknown.0:0| :skolemid |7394| :no-pattern (type $o@@16) :no-pattern (type $f@@4) :no-pattern (U_2_int $o@@16) :no-pattern (U_2_bool $o@@16) :no-pattern (U_2_int $f@@4) :no-pattern (U_2_bool $f@@4) ))) (and (=> (KMBtree.__default.WFShape $ly@@25 $h0@@4 |node#0@@1|) (KMBtree.__default.WFShape $ly@@25 $h1@@4 |node#0@@1|)) (=> (KMBtree.__default.WFShape $ly@@25 $h1@@4 |node#0@@1|) (KMBtree.__default.WFShape $ly@@25 $h0@@4 |node#0@@1|)))) :qid |unknown.0:0| :skolemid |7395| :pattern ( ($IsHeapAnchor $h0@@4) ($HeapSucc $h0@@4 $h1@@4) (KMBtree.__default.WFShape $ly@@25 $h1@@4 |node#0@@1|)) )))
(assert  (=> (<= 17 $FunctionContextHeight) (forall (($ly@@26 T@U) ($Heap@@24 T@U) (|node#0@@2| T@U) ) (!  (=> (and (and (and (= (type $ly@@26) LayerTypeType) (= (type $Heap@@24) (MapType0Type refType MapType1Type))) (= (type |node#0@@2|) refType)) (or (|KMBtree.__default.WFShape#canCall| $Heap@@24 |node#0@@2|) (and (not (= 17 $FunctionContextHeight)) (and ($IsGoodHeap $Heap@@24) ($Is |node#0@@2| Tclass.KMBtree.Node))))) true) :qid |MutableB.161:13| :skolemid |7396| :pattern ( (KMBtree.__default.WFShape $ly@@26 $Heap@@24 |node#0@@2|)) ))))
(assert (forall (($ly@@27 T@U) ($Heap@@25 T@U) (|node#0@@3| T@U) ) (!  (=> (and (and (and (= (type $ly@@27) LayerTypeType) (= (type $Heap@@25) (MapType0Type refType MapType1Type))) (= (type |node#0@@3|) refType)) (and ($IsGoodHeap $Heap@@25) ($Is |node#0@@3| Tclass.KMBtree.Node))) (and (=> (|KMBtree.__default.WFShape#requires| $ly@@27 $Heap@@25 |node#0@@3|) true) (=> true (|KMBtree.__default.WFShape#requires| $ly@@27 $Heap@@25 |node#0@@3|)))) :qid |MutableB.161:13| :skolemid |7397| :pattern ( (|KMBtree.__default.WFShape#requires| $ly@@27 $Heap@@25 |node#0@@3|)) )))
(assert (= (type KMBtree.Node.contents) (FieldType DatatypeTypeType)))
(assert (= (FDim KMBtree.Node.contents) 0))
(assert (= (FieldOfDecl DatatypeTypeType class.KMBtree.Node? field$contents) KMBtree.Node.contents))
(assert  (not ($IsGhostField KMBtree.Node.contents)))
(assert  (and (and (and (forall ((arg0@@231 T@U) ) (! (= (type (KMBtree.NodeContents.keys arg0@@231)) refType) :qid |funType:KMBtree.NodeContents.keys| :pattern ( (KMBtree.NodeContents.keys arg0@@231)) )) (forall ((arg0@@232 T@U) ) (! (= (type (KMBtree.NodeContents.values arg0@@232)) refType) :qid |funType:KMBtree.NodeContents.values| :pattern ( (KMBtree.NodeContents.values arg0@@232)) ))) (forall ((arg0@@233 T@U) ) (! (= (type (KMBtree.NodeContents.children arg0@@233)) refType) :qid |funType:KMBtree.NodeContents.children| :pattern ( (KMBtree.NodeContents.children arg0@@233)) ))) (forall ((arg0@@234 T@U) ) (! (= (type (KMBtree.NodeContents.pivots arg0@@234)) refType) :qid |funType:KMBtree.NodeContents.pivots| :pattern ( (KMBtree.NodeContents.pivots arg0@@234)) ))))
(assert  (=> (<= 17 $FunctionContextHeight) (forall (($ly@@28 T@U) ($Heap@@26 T@U) (|node#0@@4| T@U) ) (!  (=> (and (and (and (= (type $ly@@28) LayerTypeType) (= (type $Heap@@26) (MapType0Type refType MapType1Type))) (= (type |node#0@@4|) refType)) (or (|KMBtree.__default.WFShape#canCall| $Heap@@26 |node#0@@4|) (and (not (= 17 $FunctionContextHeight)) (and ($IsGoodHeap $Heap@@26) ($Is |node#0@@4| Tclass.KMBtree.Node))))) (and (and (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents)) (and (=> (|Set#Equal| (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@4|)) ($Box (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents))))) (|Arrays.__default.Aliases#canCall| (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents)) (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents)))) (=> (= (U_2_int (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.height)) (LitInt 0)) (and (=> (<= (LitInt 0) (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents))) |KMBtree.__default.MaxKeysPerLeaf#canCall|) (=> (and |KMBtree.__default.MaxKeysPerLeaf#canCall| (<= (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents)) (LitInt KMBtree.__default.MaxKeysPerLeaf))) |KMBtree.__default.MaxKeysPerLeaf#canCall|))))) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents))) (=> (U_2_bool (Lit (bool_2_U true))) (let ((|nchildren#0| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents)))) (=> (U_2_bool (Lit (bool_2_U true))) (let ((|children#0| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents)))) (and (and (=> (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@4|)) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents)))) ($Box |children#0|)) (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.repr)) (and (=> (< 0 |nchildren#0|) |KMBtree.__default.MaxChildren#canCall|) (=> (and |KMBtree.__default.MaxChildren#canCall| (<= |nchildren#0| (LitInt KMBtree.__default.MaxChildren))) |KMBtree.__default.MaxChildren#canCall|))) (=> (and (and (=> (< 0 |nchildren#0|) |KMBtree.__default.MaxChildren#canCall|) (=> (and |KMBtree.__default.MaxChildren#canCall| (<= |nchildren#0| (LitInt KMBtree.__default.MaxChildren))) |KMBtree.__default.MaxChildren#canCall|)) (and (and (< 0 |nchildren#0|) (<= |nchildren#0| (LitInt KMBtree.__default.MaxChildren))) (= (LitInt KMBtree.__default.MaxChildren) (_System.array.Length |children#0|)))) |KMBtree.__default.MaxChildren#canCall|)) (=> (forall ((|i#0@@12| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@12|) (< |i#0@@12| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#0@@12|) (< |i#0@@12| |nchildren#0|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@@26 |children#0|) (IndexField |i#0@@12|))) null)))) :qid |MutableB.178:18| :skolemid |7398| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@26 |children#0|) (IndexField |i#0@@12|)))) )) (|KMBtree.__default.WFShapeChildren#canCall| $Heap@@26 (|Seq#Take| (|Seq#FromArray| $Heap@@26 |children#0|) |nchildren#0|) (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.height))))))))))) (and (=> (KMBtree.__default.WFShape ($LS $ly@@28) $Heap@@26 |node#0@@4|) (ite (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents))  (and (and (and (and (|Set#Equal| (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@4|)) ($Box (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents))))) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents)) (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents))))) (= (U_2_int (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.height)) (LitInt 0))) (and (and (<= (LitInt 0) (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents))) (<= (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents)) (LitInt KMBtree.__default.MaxKeysPerLeaf))) (= (LitInt KMBtree.__default.MaxKeysPerLeaf) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents)))))) (= (_System.array.Length (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents))) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents)))))  (and true (let ((|nchildren#0@@0| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents)))) (and true (let ((|children#0@@0| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents)))) (and (and (and (and (and (and (and (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@4|)) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents)))) ($Box |children#0@@0|)) (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.repr)) (and (and (< 0 |nchildren#0@@0|) (<= |nchildren#0@@0| (LitInt KMBtree.__default.MaxChildren))) (= (LitInt KMBtree.__default.MaxChildren) (_System.array.Length |children#0@@0|)))) (= (_System.array.Length (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents))) (LitInt (- KMBtree.__default.MaxChildren 1)))) (forall ((|i#0@@13| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@13|) (< |i#0@@13| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#0@@13|) (< |i#0@@13| |nchildren#0@@0|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@@26 |children#0@@0|) (IndexField |i#0@@13|))) null)))) :qid |MutableB.178:18| :skolemid |7401| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@26 |children#0@@0|) (IndexField |i#0@@13|)))) ))) (KMBtree.__default.WFShapeChildren $ly@@28 $Heap@@26 (|Seq#Take| (|Seq#FromArray| $Heap@@26 |children#0@@0|) |nchildren#0@@0|) (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.height)))) (forall ((|i#1@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@2|) (< |i#1@@2| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#1@@2|) (< |i#1@@2| |nchildren#0@@0|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@26 ($Unbox refType (MapType1Select (MapType0Select $Heap@@26 |children#0@@0|) (IndexField |i#1@@2|)))) KMBtree.Node.repr) ($Box |node#0@@4|)))))) :qid |MutableB.180:18| :skolemid |7402| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@26 |children#0@@0|) (IndexField |i#1@@2|)))) ))) (forall ((|i#2| Int) ) (!  (=> (and (<= (LitInt 0) |i#2|) (< |i#2| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#2|) (< |i#2| |nchildren#0@@0|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@26 ($Unbox refType (MapType1Select (MapType0Select $Heap@@26 |children#0@@0|) (IndexField |i#2|)))) KMBtree.Node.repr) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |7403| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@26 |children#0@@0|) (IndexField |i#2|)))) ))) (and true (forall ((|i#3| Int) ) (!  (=> (and (<= (LitInt 0) |i#3|) (< |i#3| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#3|) (< |i#3| |nchildren#0@@0|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@26 ($Unbox refType (MapType1Select (MapType0Select $Heap@@26 |children#0@@0|) (IndexField |i#3|)))) KMBtree.Node.repr) ($Box |children#0@@0|)))))) :qid |MutableB.183:18| :skolemid |7404| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@26 |children#0@@0|) (IndexField |i#3|)))) )))))))))) (=> (ite (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents))  (and (and (and (and (|Set#Equal| (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@4|)) ($Box (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents))))) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents)) (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents))))) (= (U_2_int (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.height)) (LitInt 0))) (and (and (<= (LitInt 0) (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents))) (<= (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents)) (LitInt KMBtree.__default.MaxKeysPerLeaf))) (= (LitInt KMBtree.__default.MaxKeysPerLeaf) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents)))))) (= (_System.array.Length (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents))) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents)))))  (and true (let ((|nchildren#0@@1| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents)))) (and true (let ((|children#0@@1| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents)))) (and (and (and (and (and (and (and (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@4|)) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents)))) ($Box |children#0@@1|)) (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.repr)) (and (and (< 0 |nchildren#0@@1|) (<= |nchildren#0@@1| (LitInt KMBtree.__default.MaxChildren))) (= (LitInt KMBtree.__default.MaxChildren) (_System.array.Length |children#0@@1|)))) (= (_System.array.Length (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents))) (LitInt (- KMBtree.__default.MaxChildren 1)))) (forall ((|i#0@@14| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@14|) (< |i#0@@14| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#0@@14|) (< |i#0@@14| |nchildren#0@@1|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@@26 |children#0@@1|) (IndexField |i#0@@14|))) null)))) :qid |MutableB.178:18| :skolemid |7401| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@26 |children#0@@1|) (IndexField |i#0@@14|)))) ))) (KMBtree.__default.WFShapeChildren $ly@@28 $Heap@@26 (|Seq#Take| (|Seq#FromArray| $Heap@@26 |children#0@@1|) |nchildren#0@@1|) (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.height)))) (forall ((|i#1@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@3|) (< |i#1@@3| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#1@@3|) (< |i#1@@3| |nchildren#0@@1|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@26 ($Unbox refType (MapType1Select (MapType0Select $Heap@@26 |children#0@@1|) (IndexField |i#1@@3|)))) KMBtree.Node.repr) ($Box |node#0@@4|)))))) :qid |MutableB.180:18| :skolemid |7402| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@26 |children#0@@1|) (IndexField |i#1@@3|)))) ))) (forall ((|i#2@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@0|) (< |i#2@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#2@@0|) (< |i#2@@0| |nchildren#0@@1|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@26 ($Unbox refType (MapType1Select (MapType0Select $Heap@@26 |children#0@@1|) (IndexField |i#2@@0|)))) KMBtree.Node.repr) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@@26 |node#0@@4|) KMBtree.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |7403| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@26 |children#0@@1|) (IndexField |i#2@@0|)))) ))) (and true (forall ((|i#3@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@0|) (< |i#3@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#3@@0|) (< |i#3@@0| |nchildren#0@@1|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@26 ($Unbox refType (MapType1Select (MapType0Select $Heap@@26 |children#0@@1|) (IndexField |i#3@@0|)))) KMBtree.Node.repr) ($Box |children#0@@1|)))))) :qid |MutableB.183:18| :skolemid |7404| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@26 |children#0@@1|) (IndexField |i#3@@0|)))) ))))))))) (KMBtree.__default.WFShape ($LS $ly@@28) $Heap@@26 |node#0@@4|))))) :qid |MutableB.161:13| :skolemid |7405| :pattern ( (KMBtree.__default.WFShape ($LS $ly@@28) $Heap@@26 |node#0@@4|)) ))))
(assert (= (type Tclass.KMBtree.Node?) TyType))
(assert (= (Tag Tclass.KMBtree.Node?) Tagclass.KMBtree.Node?))
(assert (forall ((bx@@83 T@U) ) (!  (=> (and (= (type bx@@83) BoxType) ($IsBox bx@@83 Tclass.KMBtree.Node?)) (and (= ($Box ($Unbox refType bx@@83)) bx@@83) ($Is ($Unbox refType bx@@83) Tclass.KMBtree.Node?))) :qid |unknown.0:0| :skolemid |7409| :pattern ( ($IsBox bx@@83 Tclass.KMBtree.Node?)) )))
(assert (forall ((arg0@@235 T@U) (arg1@@110 T@U) (arg2@@65 T@U) (arg3@@42 Int) ) (! (= (type (KMBtree.__default.IChildren arg0@@235 arg1@@110 arg2@@65 arg3@@42)) (SeqType BoxType)) :qid |funType:KMBtree.__default.IChildren| :pattern ( (KMBtree.__default.IChildren arg0@@235 arg1@@110 arg2@@65 arg3@@42)) )))
(assert (forall (($ly@@29 T@U) ($Heap@@27 T@U) (|nodes#0@@27| T@U) (|parentheight#0| Int) ) (!  (=> (and (and (= (type $ly@@29) LayerTypeType) (= (type $Heap@@27) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@27|) (SeqType BoxType))) (= (KMBtree.__default.IChildren ($LS $ly@@29) $Heap@@27 |nodes#0@@27| |parentheight#0|) (KMBtree.__default.IChildren $ly@@29 $Heap@@27 |nodes#0@@27| |parentheight#0|))) :qid |MutableB.193:12| :skolemid |7431| :pattern ( (KMBtree.__default.IChildren ($LS $ly@@29) $Heap@@27 |nodes#0@@27| |parentheight#0|)) )))
(assert (forall (($ly@@30 T@U) ($Heap@@28 T@U) (|nodes#0@@28| T@U) (|parentheight#0@@0| Int) ) (!  (=> (and (and (= (type $ly@@30) LayerTypeType) (= (type $Heap@@28) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@28|) (SeqType BoxType))) (= (KMBtree.__default.IChildren $ly@@30 $Heap@@28 |nodes#0@@28| |parentheight#0@@0|) (KMBtree.__default.IChildren $LZ $Heap@@28 |nodes#0@@28| |parentheight#0@@0|))) :qid |MutableB.193:12| :skolemid |7432| :pattern ( (KMBtree.__default.IChildren (AsFuelBottom $ly@@30) $Heap@@28 |nodes#0@@28| |parentheight#0@@0|)) )))
(assert (forall (($ly@@31 T@U) ($h0@@5 T@U) ($h1@@5 T@U) (|nodes#0@@29| T@U) (|parentheight#0@@1| Int) ) (!  (=> (and (and (and (and (and (= (type $ly@@31) LayerTypeType) (= (type $h0@@5) (MapType0Type refType MapType1Type))) (= (type $h1@@5) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@29|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@5) ($IsGoodHeap $h1@@5)) (or (|KMBtree.__default.IChildren#canCall| $h0@@5 |nodes#0@@29| |parentheight#0@@1|) ($Is |nodes#0@@29| (TSeq Tclass.KMBtree.Node)))) (and ($IsHeapAnchor $h0@@5) ($HeapSucc $h0@@5 $h1@@5)))) (forall (($o@@17 T@U) ($f@@5 T@U) ) (! (let ((alpha@@12 (FieldTypeInv0 (type $f@@5)))) (=> (and (and (= (type $o@@17) refType) (= (type $f@@5) (FieldType alpha@@12))) (and (not (= $o@@17 null)) (or (exists ((|i#0@@15| Int) ) (!  (and (and (<= (LitInt 0) |i#0@@15|) (< |i#0@@15| (|Seq#Length| |nodes#0@@29|))) (= ($Box $o@@17) (|Seq#Index| |nodes#0@@29| |i#0@@15|))) :qid |MutableB.198:15| :skolemid |7433| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@29| |i#0@@15|))) )) (exists ((|i#1@@4| Int) (|o#0| T@U) ) (!  (and (= (type |o#0|) refType) (and (and ($Is |o#0| Tclass._System.object) (and (and (<= (LitInt 0) |i#1@@4|) (< |i#1@@4| (|Seq#Length| |nodes#0@@29|))) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $h0@@5 ($Unbox refType (|Seq#Index| |nodes#0@@29| |i#1@@4|))) KMBtree.Node.repr) ($Box |o#0|))))) (= ($Box $o@@17) ($Box |o#0|)))) :qid |MutableB.199:15| :skolemid |7434| :pattern ( (MapType0Select (MapType1Select (MapType0Select $h0@@5 ($Unbox refType (|Seq#Index| |nodes#0@@29| |i#1@@4|))) KMBtree.Node.repr) ($Box |o#0|))) ))))) (= (MapType1Select (MapType0Select $h0@@5 $o@@17) $f@@5) (MapType1Select (MapType0Select $h1@@5 $o@@17) $f@@5)))) :qid |unknown.0:0| :skolemid |7435| :no-pattern (type $o@@17) :no-pattern (type $f@@5) :no-pattern (U_2_int $o@@17) :no-pattern (U_2_bool $o@@17) :no-pattern (U_2_int $f@@5) :no-pattern (U_2_bool $f@@5) ))) (= (KMBtree.__default.IChildren $ly@@31 $h0@@5 |nodes#0@@29| |parentheight#0@@1|) (KMBtree.__default.IChildren $ly@@31 $h1@@5 |nodes#0@@29| |parentheight#0@@1|))) :qid |unknown.0:0| :skolemid |7436| :pattern ( ($IsHeapAnchor $h0@@5) ($HeapSucc $h0@@5 $h1@@5) (KMBtree.__default.IChildren $ly@@31 $h1@@5 |nodes#0@@29| |parentheight#0@@1|)) )))
(assert (= (type Tclass.KMBtreeModel.Node) TyType))
(assert (= (Tag Tclass.KMBtreeModel.Node) Tagclass.KMBtreeModel.Node))
(assert (forall ((bx@@84 T@U) ) (!  (=> (and (= (type bx@@84) BoxType) ($IsBox bx@@84 Tclass.KMBtreeModel.Node)) (and (= ($Box ($Unbox DatatypeTypeType bx@@84)) bx@@84) ($Is ($Unbox DatatypeTypeType bx@@84) Tclass.KMBtreeModel.Node))) :qid |unknown.0:0| :skolemid |7440| :pattern ( ($IsBox bx@@84 Tclass.KMBtreeModel.Node)) )))
(assert  (and (forall ((arg0@@236 T@U) (arg1@@111 T@U) (arg2@@66 T@U) ) (! (= (type (KMBtree.__default.I arg0@@236 arg1@@111 arg2@@66)) DatatypeTypeType) :qid |funType:KMBtree.__default.I| :pattern ( (KMBtree.__default.I arg0@@236 arg1@@111 arg2@@66)) )) (= (type StartFuel_KMBtree._default.I) LayerTypeType)))
(assert  (=> (<= 19 $FunctionContextHeight) (forall (($ly@@32 T@U) ($Heap@@29 T@U) (|nodes#0@@30| T@U) (|parentheight#0@@2| Int) ) (!  (=> (and (and (and (= (type $ly@@32) LayerTypeType) (= (type $Heap@@29) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@30|) (SeqType BoxType))) (or (|KMBtree.__default.IChildren#canCall| $Heap@@29 |nodes#0@@30| |parentheight#0@@2|) (and (not (= 19 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@29) ($Is |nodes#0@@30| (TSeq Tclass.KMBtree.Node))) (and (forall ((|i#2@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@1|) (< |i#2@@1| (|Seq#Length| |nodes#0@@30|))) (KMBtree.__default.WFShape ($LS $LZ) $Heap@@29 ($Unbox refType (|Seq#Index| |nodes#0@@30| |i#2@@1|))))) :qid |MutableB.194:21| :skolemid |7437| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@30| |i#2@@1|))) )) (forall ((|i#3@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@1|) (< |i#3@@1| (|Seq#Length| |nodes#0@@30|))) (< (U_2_int (MapType1Select (MapType0Select $Heap@@29 ($Unbox refType (|Seq#Index| |nodes#0@@30| |i#3@@1|))) KMBtree.Node.height)) |parentheight#0@@2|))) :qid |MutableB.195:21| :skolemid |7438| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@30| |i#3@@1|))) ))))))) (and (and (= (|Seq#Length| (KMBtree.__default.IChildren $ly@@32 $Heap@@29 |nodes#0@@30| |parentheight#0@@2|)) (|Seq#Length| |nodes#0@@30|)) (forall ((|i#4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#4|) (< |i#4| (|Seq#Length| (KMBtree.__default.IChildren $ly@@32 $Heap@@29 |nodes#0@@30| |parentheight#0@@2|)))) (|KMBtreeModel.Node#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (KMBtree.__default.IChildren $ly@@32 $Heap@@29 |nodes#0@@30| |parentheight#0@@2|) |i#4|)) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@29 ($Unbox refType (|Seq#Index| |nodes#0@@30| |i#4|)))))) :qid |MutableB.197:20| :skolemid |7439| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@30| |i#4|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (KMBtree.__default.IChildren $ly@@32 $Heap@@29 |nodes#0@@30| |parentheight#0@@2|) |i#4|))) ))) ($Is (KMBtree.__default.IChildren $ly@@32 $Heap@@29 |nodes#0@@30| |parentheight#0@@2|) (TSeq Tclass.KMBtreeModel.Node)))) :qid |MutableB.193:12| :skolemid |7441| :pattern ( (KMBtree.__default.IChildren $ly@@32 $Heap@@29 |nodes#0@@30| |parentheight#0@@2|)) ))))
(assert (forall (($ly@@33 T@U) ($Heap@@30 T@U) (|nodes#0@@31| T@U) (|parentheight#0@@3| Int) ) (!  (=> (and (and (and (= (type $ly@@33) LayerTypeType) (= (type $Heap@@30) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@31|) (SeqType BoxType))) (and ($IsGoodHeap $Heap@@30) ($Is |nodes#0@@31| (TSeq Tclass.KMBtree.Node)))) (and (=> (|KMBtree.__default.IChildren#requires| $ly@@33 $Heap@@30 |nodes#0@@31| |parentheight#0@@3|) (and (forall ((|i#5| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#5|) (< |i#5| (|Seq#Length| |nodes#0@@31|))) (KMBtree.__default.WFShape ($LS $LZ) $Heap@@30 ($Unbox refType (|Seq#Index| |nodes#0@@31| |i#5|))))) :qid |MutableB.194:21| :skolemid |7442| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@31| |i#5|))) )) (forall ((|i#6| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#6|) (< |i#6| (|Seq#Length| |nodes#0@@31|))) (< (U_2_int (MapType1Select (MapType0Select $Heap@@30 ($Unbox refType (|Seq#Index| |nodes#0@@31| |i#6|))) KMBtree.Node.height)) |parentheight#0@@3|))) :qid |MutableB.195:21| :skolemid |7443| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@31| |i#6|))) )))) (=> (and (forall ((|i#5@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#5@@0|) (< |i#5@@0| (|Seq#Length| |nodes#0@@31|))) (KMBtree.__default.WFShape ($LS $LZ) $Heap@@30 ($Unbox refType (|Seq#Index| |nodes#0@@31| |i#5@@0|))))) :qid |MutableB.194:21| :skolemid |7442| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@31| |i#5@@0|))) )) (forall ((|i#6@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#6@@0|) (< |i#6@@0| (|Seq#Length| |nodes#0@@31|))) (< (U_2_int (MapType1Select (MapType0Select $Heap@@30 ($Unbox refType (|Seq#Index| |nodes#0@@31| |i#6@@0|))) KMBtree.Node.height)) |parentheight#0@@3|))) :qid |MutableB.195:21| :skolemid |7443| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@31| |i#6@@0|))) ))) (|KMBtree.__default.IChildren#requires| $ly@@33 $Heap@@30 |nodes#0@@31| |parentheight#0@@3|)))) :qid |MutableB.193:12| :skolemid |7444| :pattern ( (|KMBtree.__default.IChildren#requires| $ly@@33 $Heap@@30 |nodes#0@@31| |parentheight#0@@3|)) )))
(assert  (and (forall ((arg0@@237 T@U) (arg1@@112 T@U) ) (! (= (type (Sequences.__default.DropLast arg0@@237 arg1@@112)) (SeqType BoxType)) :qid |funType:Sequences.__default.DropLast| :pattern ( (Sequences.__default.DropLast arg0@@237 arg1@@112)) )) (forall ((arg0@@238 T@U) (arg1@@113 T@U) ) (! (= (type (Sequences.__default.Last arg0@@238 arg1@@113)) BoxType) :qid |funType:Sequences.__default.Last| :pattern ( (Sequences.__default.Last arg0@@238 arg1@@113)) ))))
(assert  (=> (<= 19 $FunctionContextHeight) (forall (($ly@@34 T@U) ($Heap@@31 T@U) (|nodes#0@@32| T@U) (|parentheight#0@@4| Int) ) (!  (=> (and (and (and (= (type $ly@@34) LayerTypeType) (= (type $Heap@@31) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@32|) (SeqType BoxType))) (or (|KMBtree.__default.IChildren#canCall| $Heap@@31 |nodes#0@@32| |parentheight#0@@4|) (and (not (= 19 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@31) ($Is |nodes#0@@32| (TSeq Tclass.KMBtree.Node))) (and (forall ((|i#5@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#5@@1|) (< |i#5@@1| (|Seq#Length| |nodes#0@@32|))) (KMBtree.__default.WFShape ($LS $LZ) $Heap@@31 ($Unbox refType (|Seq#Index| |nodes#0@@32| |i#5@@1|))))) :qid |MutableB.194:21| :skolemid |7442| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@32| |i#5@@1|))) )) (forall ((|i#6@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#6@@1|) (< |i#6@@1| (|Seq#Length| |nodes#0@@32|))) (< (U_2_int (MapType1Select (MapType0Select $Heap@@31 ($Unbox refType (|Seq#Index| |nodes#0@@32| |i#6@@1|))) KMBtree.Node.height)) |parentheight#0@@4|))) :qid |MutableB.195:21| :skolemid |7443| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@32| |i#6@@1|))) ))))))) (and (=> (not (= (|Seq#Length| |nodes#0@@32|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.KMBtree.Node |nodes#0@@32|) (|KMBtree.__default.IChildren#canCall| $Heap@@31 (Sequences.__default.DropLast Tclass.KMBtree.Node |nodes#0@@32|) |parentheight#0@@4|)) (and (|Sequences.__default.Last#canCall| Tclass.KMBtree.Node |nodes#0@@32|) (|KMBtree.__default.I#canCall| $Heap@@31 ($Unbox refType (Sequences.__default.Last Tclass.KMBtree.Node |nodes#0@@32|)))))) (= (KMBtree.__default.IChildren ($LS $ly@@34) $Heap@@31 |nodes#0@@32| |parentheight#0@@4|) (ite (= (|Seq#Length| |nodes#0@@32|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (KMBtree.__default.IChildren $ly@@34 $Heap@@31 (Sequences.__default.DropLast Tclass.KMBtree.Node |nodes#0@@32|) |parentheight#0@@4|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (KMBtree.__default.I $ly@@34 $Heap@@31 ($Unbox refType (Sequences.__default.Last Tclass.KMBtree.Node |nodes#0@@32|)))))))))) :qid |MutableB.193:12| :skolemid |7445| :pattern ( (KMBtree.__default.IChildren ($LS $ly@@34) $Heap@@31 |nodes#0@@32| |parentheight#0@@4|)) ))))
(assert (forall (($ly@@35 T@U) ($Heap@@32 T@U) (|node#0@@5| T@U) ) (!  (=> (and (and (= (type $ly@@35) LayerTypeType) (= (type $Heap@@32) (MapType0Type refType MapType1Type))) (= (type |node#0@@5|) refType)) (= (KMBtree.__default.I ($LS $ly@@35) $Heap@@32 |node#0@@5|) (KMBtree.__default.I $ly@@35 $Heap@@32 |node#0@@5|))) :qid |MutableB.206:22| :skolemid |7485| :pattern ( (KMBtree.__default.I ($LS $ly@@35) $Heap@@32 |node#0@@5|)) )))
(assert (forall (($ly@@36 T@U) ($Heap@@33 T@U) (|node#0@@6| T@U) ) (!  (=> (and (and (= (type $ly@@36) LayerTypeType) (= (type $Heap@@33) (MapType0Type refType MapType1Type))) (= (type |node#0@@6|) refType)) (= (KMBtree.__default.I $ly@@36 $Heap@@33 |node#0@@6|) (KMBtree.__default.I $LZ $Heap@@33 |node#0@@6|))) :qid |MutableB.206:22| :skolemid |7486| :pattern ( (KMBtree.__default.I (AsFuelBottom $ly@@36) $Heap@@33 |node#0@@6|)) )))
(assert (forall (($ly@@37 T@U) ($h0@@6 T@U) ($h1@@6 T@U) (|node#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@37) LayerTypeType) (= (type $h0@@6) (MapType0Type refType MapType1Type))) (= (type $h1@@6) (MapType0Type refType MapType1Type))) (= (type |node#0@@7|) refType)) (and (and (and ($IsGoodHeap $h0@@6) ($IsGoodHeap $h1@@6)) (or (|KMBtree.__default.I#canCall| $h0@@6 |node#0@@7|) ($Is |node#0@@7| Tclass.KMBtree.Node))) (and ($IsHeapAnchor $h0@@6) ($HeapSucc $h0@@6 $h1@@6)))) (forall (($o@@18 T@U) ($f@@6 T@U) ) (! (let ((alpha@@13 (FieldTypeInv0 (type $f@@6)))) (=> (and (and (= (type $o@@18) refType) (= (type $f@@6) (FieldType alpha@@13))) (and (not (= $o@@18 null)) (or (= $o@@18 |node#0@@7|) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $h0@@6 |node#0@@7|) KMBtree.Node.repr) ($Box $o@@18)))))) (= (MapType1Select (MapType0Select $h0@@6 $o@@18) $f@@6) (MapType1Select (MapType0Select $h1@@6 $o@@18) $f@@6)))) :qid |unknown.0:0| :skolemid |7487| :no-pattern (type $o@@18) :no-pattern (type $f@@6) :no-pattern (U_2_int $o@@18) :no-pattern (U_2_bool $o@@18) :no-pattern (U_2_int $f@@6) :no-pattern (U_2_bool $f@@6) ))) (= (KMBtree.__default.I $ly@@37 $h0@@6 |node#0@@7|) (KMBtree.__default.I $ly@@37 $h1@@6 |node#0@@7|))) :qid |unknown.0:0| :skolemid |7488| :pattern ( ($IsHeapAnchor $h0@@6) ($HeapSucc $h0@@6 $h1@@6) (KMBtree.__default.I $ly@@37 $h1@@6 |node#0@@7|)) )))
(assert  (and (and (and (forall ((arg0@@239 T@U) ) (! (= (type (KMBtreeModel.Node.keys arg0@@239)) (SeqType BoxType)) :qid |funType:KMBtreeModel.Node.keys| :pattern ( (KMBtreeModel.Node.keys arg0@@239)) )) (forall ((arg0@@240 T@U) ) (! (= (type (KMBtreeModel.Node.values arg0@@240)) (SeqType BoxType)) :qid |funType:KMBtreeModel.Node.values| :pattern ( (KMBtreeModel.Node.values arg0@@240)) ))) (forall ((arg0@@241 T@U) ) (! (= (type (KMBtreeModel.Node.pivots arg0@@241)) (SeqType BoxType)) :qid |funType:KMBtreeModel.Node.pivots| :pattern ( (KMBtreeModel.Node.pivots arg0@@241)) ))) (forall ((arg0@@242 T@U) ) (! (= (type (KMBtreeModel.Node.children arg0@@242)) (SeqType BoxType)) :qid |funType:KMBtreeModel.Node.children| :pattern ( (KMBtreeModel.Node.children arg0@@242)) ))))
(assert  (=> (<= 19 $FunctionContextHeight) (forall (($ly@@38 T@U) ($Heap@@34 T@U) (|node#0@@8| T@U) ) (!  (=> (and (and (and (= (type $ly@@38) LayerTypeType) (= (type $Heap@@34) (MapType0Type refType MapType1Type))) (= (type |node#0@@8|) refType)) (or (|KMBtree.__default.I#canCall| $Heap@@34 |node#0@@8|) (and (not (= 19 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@34) ($Is |node#0@@8| Tclass.KMBtree.Node)) (KMBtree.__default.WFShape ($LS $LZ) $Heap@@34 |node#0@@8|))))) (and (and (and (and (and (and (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@34 |node#0@@8|) KMBtree.Node.contents)) (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I $ly@@38 $Heap@@34 |node#0@@8|))) (=> (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I $ly@@38 $Heap@@34 |node#0@@8|)) (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@34 |node#0@@8|) KMBtree.Node.contents)))) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@34 |node#0@@8|) KMBtree.Node.contents)) (|Seq#Equal| (KMBtreeModel.Node.keys (KMBtree.__default.I $ly@@38 $Heap@@34 |node#0@@8|)) (|Seq#Take| (|Seq#FromArray| $Heap@@34 (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@@34 |node#0@@8|) KMBtree.Node.contents))) (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@@34 |node#0@@8|) KMBtree.Node.contents)))))) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@34 |node#0@@8|) KMBtree.Node.contents)) (|Seq#Equal| (KMBtreeModel.Node.values (KMBtree.__default.I $ly@@38 $Heap@@34 |node#0@@8|)) (|Seq#Take| (|Seq#FromArray| $Heap@@34 (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@@34 |node#0@@8|) KMBtree.Node.contents))) (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@@34 |node#0@@8|) KMBtree.Node.contents)))))) (=> (KMBtree.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@@34 |node#0@@8|) KMBtree.Node.contents)) (|Seq#Equal| (KMBtreeModel.Node.pivots (KMBtree.__default.I $ly@@38 $Heap@@34 |node#0@@8|)) (|Seq#Take| (|Seq#FromArray| $Heap@@34 (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@@34 |node#0@@8|) KMBtree.Node.contents))) (- (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@34 |node#0@@8|) KMBtree.Node.contents)) 1))))) (=> (KMBtree.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@@34 |node#0@@8|) KMBtree.Node.contents)) (= (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I $ly@@38 $Heap@@34 |node#0@@8|))) (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@34 |node#0@@8|) KMBtree.Node.contents))))) ($Is (KMBtree.__default.I $ly@@38 $Heap@@34 |node#0@@8|) Tclass.KMBtreeModel.Node))) :qid |MutableB.206:22| :skolemid |7489| :pattern ( (KMBtree.__default.I $ly@@38 $Heap@@34 |node#0@@8|)) ))))
(assert (forall (($ly@@39 T@U) ($Heap@@35 T@U) (|node#0@@9| T@U) ) (!  (=> (and (and (and (= (type $ly@@39) LayerTypeType) (= (type $Heap@@35) (MapType0Type refType MapType1Type))) (= (type |node#0@@9|) refType)) (and ($IsGoodHeap $Heap@@35) ($Is |node#0@@9| Tclass.KMBtree.Node))) (and (=> (|KMBtree.__default.I#requires| $ly@@39 $Heap@@35 |node#0@@9|) (KMBtree.__default.WFShape ($LS $LZ) $Heap@@35 |node#0@@9|)) (=> (KMBtree.__default.WFShape ($LS $LZ) $Heap@@35 |node#0@@9|) (|KMBtree.__default.I#requires| $ly@@39 $Heap@@35 |node#0@@9|)))) :qid |MutableB.206:22| :skolemid |7490| :pattern ( (|KMBtree.__default.I#requires| $ly@@39 $Heap@@35 |node#0@@9|)) )))
(assert  (and (forall ((arg0@@243 T@U) (arg1@@114 T@U) ) (! (= (type (|#KMBtreeModel.Node.Leaf| arg0@@243 arg1@@114)) DatatypeTypeType) :qid |funType:#KMBtreeModel.Node.Leaf| :pattern ( (|#KMBtreeModel.Node.Leaf| arg0@@243 arg1@@114)) )) (forall ((arg0@@244 T@U) (arg1@@115 T@U) ) (! (= (type (|#KMBtreeModel.Node.Index| arg0@@244 arg1@@115)) DatatypeTypeType) :qid |funType:#KMBtreeModel.Node.Index| :pattern ( (|#KMBtreeModel.Node.Index| arg0@@244 arg1@@115)) ))))
(assert  (=> (<= 19 $FunctionContextHeight) (forall (($ly@@40 T@U) ($Heap@@36 T@U) (|node#0@@10| T@U) ) (!  (=> (and (and (and (= (type $ly@@40) LayerTypeType) (= (type $Heap@@36) (MapType0Type refType MapType1Type))) (= (type |node#0@@10|) refType)) (or (|KMBtree.__default.I#canCall| $Heap@@36 |node#0@@10|) (and (not (= 19 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@36) ($Is |node#0@@10| Tclass.KMBtree.Node)) (KMBtree.__default.WFShape ($LS $LZ) $Heap@@36 |node#0@@10|))))) (and (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@36 |node#0@@10|) KMBtree.Node.contents))) (let ((|children#0@@2| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@@36 |node#0@@10|) KMBtree.Node.contents)))) (let ((|nchildren#0@@2| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@36 |node#0@@10|) KMBtree.Node.contents)))) (|KMBtree.__default.IChildren#canCall| $Heap@@36 (|Seq#Take| (|Seq#FromArray| $Heap@@36 |children#0@@2|) |nchildren#0@@2|) (U_2_int (MapType1Select (MapType0Select $Heap@@36 |node#0@@10|) KMBtree.Node.height)))))) (= (KMBtree.__default.I ($LS $ly@@40) $Heap@@36 |node#0@@10|) (ite (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@36 |node#0@@10|) KMBtree.Node.contents)) (let ((|values#1| (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@@36 |node#0@@10|) KMBtree.Node.contents)))) (let ((|keys#1| (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@@36 |node#0@@10|) KMBtree.Node.contents)))) (let ((|nkeys#1| (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@@36 |node#0@@10|) KMBtree.Node.contents)))) (|#KMBtreeModel.Node.Leaf| (|Seq#Take| (|Seq#FromArray| $Heap@@36 |keys#1|) |nkeys#1|) (|Seq#Take| (|Seq#FromArray| $Heap@@36 |values#1|) |nkeys#1|))))) (let ((|children#1| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@@36 |node#0@@10|) KMBtree.Node.contents)))) (let ((|pivots#1| (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@@36 |node#0@@10|) KMBtree.Node.contents)))) (let ((|nchildren#1| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@36 |node#0@@10|) KMBtree.Node.contents)))) (let ((|bschildren#1| (KMBtree.__default.IChildren $ly@@40 $Heap@@36 (|Seq#Take| (|Seq#FromArray| $Heap@@36 |children#1|) |nchildren#1|) (U_2_int (MapType1Select (MapType0Select $Heap@@36 |node#0@@10|) KMBtree.Node.height))))) (|#KMBtreeModel.Node.Index| (|Seq#Take| (|Seq#FromArray| $Heap@@36 |pivots#1|) (- |nchildren#1| 1)) |bschildren#1|))))))))) :qid |MutableB.206:22| :skolemid |7491| :pattern ( (KMBtree.__default.I ($LS $ly@@40) $Heap@@36 |node#0@@10|)) ))))
(assert (forall ((arg0@@245 T@U) (arg1@@116 T@U) ) (! (= (type (KMBtree.__default.ISiblings arg0@@245 arg1@@116)) (SeqType BoxType)) :qid |funType:KMBtree.__default.ISiblings| :pattern ( (KMBtree.__default.ISiblings arg0@@245 arg1@@116)) )))
(assert (forall (($h0@@7 T@U) ($h1@@7 T@U) (|nodes#0@@33| T@U) ) (!  (=> (and (and (= (type $h0@@7) (MapType0Type refType MapType1Type)) (= (type $h1@@7) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@33|) (SeqType BoxType))) (=> (and (and (and ($IsGoodHeap $h0@@7) ($IsGoodHeap $h1@@7)) (or (|KMBtree.__default.ISiblings#canCall| $h0@@7 |nodes#0@@33|) ($Is |nodes#0@@33| (TSeq Tclass.KMBtree.Node)))) (and ($IsHeapAnchor $h0@@7) ($HeapSucc $h0@@7 $h1@@7))) (=> (forall (($o@@19 T@U) ($f@@7 T@U) ) (! (let ((alpha@@14 (FieldTypeInv0 (type $f@@7)))) (=> (and (and (= (type $o@@19) refType) (= (type $f@@7) (FieldType alpha@@14))) (and (not (= $o@@19 null)) (or (exists ((|i#0@@16| Int) ) (!  (and (and (<= (LitInt 0) |i#0@@16|) (< |i#0@@16| (|Seq#Length| |nodes#0@@33|))) (= ($Box $o@@19) (|Seq#Index| |nodes#0@@33| |i#0@@16|))) :qid |MutableB.241:15| :skolemid |7613| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@33| |i#0@@16|))) )) (exists ((|i#1@@5| Int) (|o#0@@0| T@U) ) (!  (and (= (type |o#0@@0|) refType) (and (and ($Is |o#0@@0| Tclass._System.object) (and (and (<= (LitInt 0) |i#1@@5|) (< |i#1@@5| (|Seq#Length| |nodes#0@@33|))) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $h0@@7 ($Unbox refType (|Seq#Index| |nodes#0@@33| |i#1@@5|))) KMBtree.Node.repr) ($Box |o#0@@0|))))) (= ($Box $o@@19) ($Box |o#0@@0|)))) :qid |MutableB.242:15| :skolemid |7614| :pattern ( (MapType0Select (MapType1Select (MapType0Select $h0@@7 ($Unbox refType (|Seq#Index| |nodes#0@@33| |i#1@@5|))) KMBtree.Node.repr) ($Box |o#0@@0|))) ))))) (= (MapType1Select (MapType0Select $h0@@7 $o@@19) $f@@7) (MapType1Select (MapType0Select $h1@@7 $o@@19) $f@@7)))) :qid |unknown.0:0| :skolemid |7615| :no-pattern (type $o@@19) :no-pattern (type $f@@7) :no-pattern (U_2_int $o@@19) :no-pattern (U_2_bool $o@@19) :no-pattern (U_2_int $f@@7) :no-pattern (U_2_bool $f@@7) )) (= (KMBtree.__default.ISiblings $h0@@7 |nodes#0@@33|) (KMBtree.__default.ISiblings $h1@@7 |nodes#0@@33|))))) :qid |DafnyPre.521:12| :skolemid |7616| :pattern ( ($IsHeapAnchor $h0@@7) ($HeapSucc $h0@@7 $h1@@7) (KMBtree.__default.ISiblings $h1@@7 |nodes#0@@33|)) )))
(assert  (=> (<= 22 $FunctionContextHeight) (forall (($Heap@@37 T@U) (|nodes#0@@34| T@U) ) (!  (=> (and (and (= (type $Heap@@37) (MapType0Type refType MapType1Type)) (= (type |nodes#0@@34|) (SeqType BoxType))) (or (|KMBtree.__default.ISiblings#canCall| $Heap@@37 |nodes#0@@34|) (and (not (= 22 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@37) ($Is |nodes#0@@34| (TSeq Tclass.KMBtree.Node))) (forall ((|i#2@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@2|) (< |i#2@@2| (|Seq#Length| |nodes#0@@34|))) (KMBtree.__default.WFShape ($LS $LZ) $Heap@@37 ($Unbox refType (|Seq#Index| |nodes#0@@34| |i#2@@2|))))) :qid |MutableB.238:21| :skolemid |7617| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@34| |i#2@@2|))) )))))) (and (and (= (|Seq#Length| (KMBtree.__default.ISiblings $Heap@@37 |nodes#0@@34|)) (|Seq#Length| |nodes#0@@34|)) (forall ((|i#3@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@2|) (< |i#3@@2| (|Seq#Length| (KMBtree.__default.ISiblings $Heap@@37 |nodes#0@@34|)))) (|KMBtreeModel.Node#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (KMBtree.__default.ISiblings $Heap@@37 |nodes#0@@34|) |i#3@@2|)) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@37 ($Unbox refType (|Seq#Index| |nodes#0@@34| |i#3@@2|)))))) :qid |MutableB.240:20| :skolemid |7618| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@34| |i#3@@2|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (KMBtree.__default.ISiblings $Heap@@37 |nodes#0@@34|) |i#3@@2|))) ))) ($Is (KMBtree.__default.ISiblings $Heap@@37 |nodes#0@@34|) (TSeq Tclass.KMBtreeModel.Node)))) :qid |MutableB.237:12| :skolemid |7619| :pattern ( (KMBtree.__default.ISiblings $Heap@@37 |nodes#0@@34|)) ))))
(assert (forall (($Heap@@38 T@U) (|nodes#0@@35| T@U) ) (!  (=> (and (and (= (type $Heap@@38) (MapType0Type refType MapType1Type)) (= (type |nodes#0@@35|) (SeqType BoxType))) (and ($IsGoodHeap $Heap@@38) ($Is |nodes#0@@35| (TSeq Tclass.KMBtree.Node)))) (and (=> (|KMBtree.__default.ISiblings#requires| $Heap@@38 |nodes#0@@35|) (forall ((|i#4@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#4@@0|) (< |i#4@@0| (|Seq#Length| |nodes#0@@35|))) (KMBtree.__default.WFShape ($LS $LZ) $Heap@@38 ($Unbox refType (|Seq#Index| |nodes#0@@35| |i#4@@0|))))) :qid |MutableB.238:21| :skolemid |7620| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@35| |i#4@@0|))) ))) (=> (forall ((|i#4@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#4@@1|) (< |i#4@@1| (|Seq#Length| |nodes#0@@35|))) (KMBtree.__default.WFShape ($LS $LZ) $Heap@@38 ($Unbox refType (|Seq#Index| |nodes#0@@35| |i#4@@1|))))) :qid |MutableB.238:21| :skolemid |7620| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@35| |i#4@@1|))) )) (|KMBtree.__default.ISiblings#requires| $Heap@@38 |nodes#0@@35|)))) :qid |MutableB.237:12| :skolemid |7621| :pattern ( (|KMBtree.__default.ISiblings#requires| $Heap@@38 |nodes#0@@35|)) )))
(assert  (=> (<= 22 $FunctionContextHeight) (forall (($Heap@@39 T@U) (|nodes#0@@36| T@U) ) (!  (=> (and (and (= (type $Heap@@39) (MapType0Type refType MapType1Type)) (= (type |nodes#0@@36|) (SeqType BoxType))) (or (|KMBtree.__default.ISiblings#canCall| $Heap@@39 |nodes#0@@36|) (and (not (= 22 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@39) ($Is |nodes#0@@36| (TSeq Tclass.KMBtree.Node))) (forall ((|i#4@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#4@@2|) (< |i#4@@2| (|Seq#Length| |nodes#0@@36|))) (KMBtree.__default.WFShape ($LS $LZ) $Heap@@39 ($Unbox refType (|Seq#Index| |nodes#0@@36| |i#4@@2|))))) :qid |MutableB.238:21| :skolemid |7620| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@36| |i#4@@2|))) )))))) (and (and (|KMBtree.__default.MaxSiblingHeight#canCall| $Heap@@39 |nodes#0@@36|) (|KMBtree.__default.IChildren#canCall| $Heap@@39 |nodes#0@@36| (+ (KMBtree.__default.MaxSiblingHeight ($LS $LZ) $Heap@@39 |nodes#0@@36|) 1))) (= (KMBtree.__default.ISiblings $Heap@@39 |nodes#0@@36|) (KMBtree.__default.IChildren ($LS $LZ) $Heap@@39 |nodes#0@@36| (+ (KMBtree.__default.MaxSiblingHeight ($LS $LZ) $Heap@@39 |nodes#0@@36|) 1))))) :qid |MutableB.237:12| :skolemid |7622| :pattern ( (KMBtree.__default.ISiblings $Heap@@39 |nodes#0@@36|)) ))))
(assert (forall (($h0@@8 T@U) ($h1@@8 T@U) (|node#0@@11| T@U) ) (!  (=> (and (and (= (type $h0@@8) (MapType0Type refType MapType1Type)) (= (type $h1@@8) (MapType0Type refType MapType1Type))) (= (type |node#0@@11|) refType)) (=> (and (and (and ($IsGoodHeap $h0@@8) ($IsGoodHeap $h1@@8)) (or (|KMBtree.__default.WF#canCall| $h0@@8 |node#0@@11|) ($Is |node#0@@11| Tclass.KMBtree.Node))) (and ($IsHeapAnchor $h0@@8) ($HeapSucc $h0@@8 $h1@@8))) (=> (forall (($o@@20 T@U) ($f@@8 T@U) ) (! (let ((alpha@@15 (FieldTypeInv0 (type $f@@8)))) (=> (and (and (= (type $o@@20) refType) (= (type $f@@8) (FieldType alpha@@15))) (and (not (= $o@@20 null)) (or (= $o@@20 |node#0@@11|) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $h0@@8 |node#0@@11|) KMBtree.Node.repr) ($Box $o@@20)))))) (= (MapType1Select (MapType0Select $h0@@8 $o@@20) $f@@8) (MapType1Select (MapType0Select $h1@@8 $o@@20) $f@@8)))) :qid |unknown.0:0| :skolemid |7650| :no-pattern (type $o@@20) :no-pattern (type $f@@8) :no-pattern (U_2_int $o@@20) :no-pattern (U_2_bool $o@@20) :no-pattern (U_2_int $f@@8) :no-pattern (U_2_bool $f@@8) )) (and (=> (KMBtree.__default.WF $h0@@8 |node#0@@11|) (KMBtree.__default.WF $h1@@8 |node#0@@11|)) (=> (KMBtree.__default.WF $h1@@8 |node#0@@11|) (KMBtree.__default.WF $h0@@8 |node#0@@11|)))))) :qid |DafnyPre.521:12| :skolemid |7651| :pattern ( ($IsHeapAnchor $h0@@8) ($HeapSucc $h0@@8 $h1@@8) (KMBtree.__default.WF $h1@@8 |node#0@@11|)) )))
(assert  (=> (<= 23 $FunctionContextHeight) (forall (($Heap@@40 T@U) (|node#0@@12| T@U) ) (!  (=> (and (and (and (= (type $Heap@@40) (MapType0Type refType MapType1Type)) (= (type |node#0@@12|) refType)) (or (|KMBtree.__default.WF#canCall| $Heap@@40 |node#0@@12|) (and (not (= 23 $FunctionContextHeight)) (and ($IsGoodHeap $Heap@@40) ($Is |node#0@@12| Tclass.KMBtree.Node))))) (KMBtree.__default.WF $Heap@@40 |node#0@@12|)) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@40 |node#0@@12|) KMBtree.Node.repr) ($Box |node#0@@12|)))) :qid |MutableB.247:13| :skolemid |7652| :pattern ( (KMBtree.__default.WF $Heap@@40 |node#0@@12|)) ))))
(assert (forall (($Heap@@41 T@U) (|node#0@@13| T@U) ) (!  (=> (and (and (= (type $Heap@@41) (MapType0Type refType MapType1Type)) (= (type |node#0@@13|) refType)) (and ($IsGoodHeap $Heap@@41) ($Is |node#0@@13| Tclass.KMBtree.Node))) (and (=> (|KMBtree.__default.WF#requires| $Heap@@41 |node#0@@13|) true) (=> true (|KMBtree.__default.WF#requires| $Heap@@41 |node#0@@13|)))) :qid |MutableB.247:13| :skolemid |7653| :pattern ( (|KMBtree.__default.WF#requires| $Heap@@41 |node#0@@13|)) )))
(assert  (=> (<= 23 $FunctionContextHeight) (forall (($Heap@@42 T@U) (|node#0@@14| T@U) ) (!  (=> (and (and (= (type $Heap@@42) (MapType0Type refType MapType1Type)) (= (type |node#0@@14|) refType)) (or (|KMBtree.__default.WF#canCall| $Heap@@42 |node#0@@14|) (and (not (= 23 $FunctionContextHeight)) (and ($IsGoodHeap $Heap@@42) ($Is |node#0@@14| Tclass.KMBtree.Node))))) (and (and (|KMBtree.__default.WFShape#canCall| $Heap@@42 |node#0@@14|) (=> (KMBtree.__default.WFShape ($LS $LZ) $Heap@@42 |node#0@@14|) (and (|KMBtree.__default.I#canCall| $Heap@@42 |node#0@@14|) (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@42 |node#0@@14|))))) (and (=> (KMBtree.__default.WF $Heap@@42 |node#0@@14|) (and (KMBtree.__default.WFShape ($LS $LZ) $Heap@@42 |node#0@@14|) (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@42 |node#0@@14|)))) (=> (and (KMBtree.__default.WFShape ($LS $LZ) $Heap@@42 |node#0@@14|) (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@42 |node#0@@14|))) (KMBtree.__default.WF $Heap@@42 |node#0@@14|))))) :qid |MutableB.247:13| :skolemid |7654| :pattern ( (KMBtree.__default.WF $Heap@@42 |node#0@@14|)) ))))
(assert (forall ((arg0@@246 T@U) (arg1@@117 T@U) ) (! (= (type (KMBtree.__default.Interpretation arg0@@246 arg1@@117)) (MapType BoxType BoxType)) :qid |funType:KMBtree.__default.Interpretation| :pattern ( (KMBtree.__default.Interpretation arg0@@246 arg1@@117)) )))
(assert (forall (($h0@@9 T@U) ($h1@@9 T@U) (|node#0@@15| T@U) ) (!  (=> (and (and (= (type $h0@@9) (MapType0Type refType MapType1Type)) (= (type $h1@@9) (MapType0Type refType MapType1Type))) (= (type |node#0@@15|) refType)) (=> (and (and (and ($IsGoodHeap $h0@@9) ($IsGoodHeap $h1@@9)) (or (|KMBtree.__default.Interpretation#canCall| $h0@@9 |node#0@@15|) ($Is |node#0@@15| Tclass.KMBtree.Node))) (and ($IsHeapAnchor $h0@@9) ($HeapSucc $h0@@9 $h1@@9))) (=> (forall (($o@@21 T@U) ($f@@9 T@U) ) (! (let ((alpha@@16 (FieldTypeInv0 (type $f@@9)))) (=> (and (and (= (type $o@@21) refType) (= (type $f@@9) (FieldType alpha@@16))) (and (not (= $o@@21 null)) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $h0@@9 |node#0@@15|) KMBtree.Node.repr) ($Box $o@@21))))) (= (MapType1Select (MapType0Select $h0@@9 $o@@21) $f@@9) (MapType1Select (MapType0Select $h1@@9 $o@@21) $f@@9)))) :qid |unknown.0:0| :skolemid |7667| :no-pattern (type $o@@21) :no-pattern (type $f@@9) :no-pattern (U_2_int $o@@21) :no-pattern (U_2_bool $o@@21) :no-pattern (U_2_int $f@@9) :no-pattern (U_2_bool $f@@9) )) (= (KMBtree.__default.Interpretation $h0@@9 |node#0@@15|) (KMBtree.__default.Interpretation $h1@@9 |node#0@@15|))))) :qid |DafnyPre.521:12| :skolemid |7668| :pattern ( ($IsHeapAnchor $h0@@9) ($HeapSucc $h0@@9 $h1@@9) (KMBtree.__default.Interpretation $h1@@9 |node#0@@15|)) )))
(assert  (=> (<= 24 $FunctionContextHeight) (forall (($Heap@@43 T@U) (|node#0@@16| T@U) ) (!  (=> (and (and (= (type $Heap@@43) (MapType0Type refType MapType1Type)) (= (type |node#0@@16|) refType)) (or (|KMBtree.__default.Interpretation#canCall| $Heap@@43 |node#0@@16|) (and (not (= 24 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@43) ($Is |node#0@@16| Tclass.KMBtree.Node)) (KMBtree.__default.WF $Heap@@43 |node#0@@16|))))) ($Is (KMBtree.__default.Interpretation $Heap@@43 |node#0@@16|) (TMap (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message))) :qid |MutableB.255:12| :skolemid |7669| :pattern ( (KMBtree.__default.Interpretation $Heap@@43 |node#0@@16|)) ))))
(assert (forall (($Heap@@44 T@U) (|node#0@@17| T@U) ) (!  (=> (and (and (= (type $Heap@@44) (MapType0Type refType MapType1Type)) (= (type |node#0@@17|) refType)) (and ($IsGoodHeap $Heap@@44) ($Is |node#0@@17| Tclass.KMBtree.Node))) (and (=> (|KMBtree.__default.Interpretation#requires| $Heap@@44 |node#0@@17|) (KMBtree.__default.WF $Heap@@44 |node#0@@17|)) (=> (KMBtree.__default.WF $Heap@@44 |node#0@@17|) (|KMBtree.__default.Interpretation#requires| $Heap@@44 |node#0@@17|)))) :qid |MutableB.255:12| :skolemid |7670| :pattern ( (|KMBtree.__default.Interpretation#requires| $Heap@@44 |node#0@@17|)) )))
(assert  (and (forall ((arg0@@247 T@U) (arg1@@118 T@U) ) (! (= (type (KMBtreeModel.__default.Interpretation arg0@@247 arg1@@118)) (MapType BoxType BoxType)) :qid |funType:KMBtreeModel.__default.Interpretation| :pattern ( (KMBtreeModel.__default.Interpretation arg0@@247 arg1@@118)) )) (= (type StartFuel_KMBtreeModel._default.Interpretation) LayerTypeType)))
(assert  (=> (<= 24 $FunctionContextHeight) (forall (($Heap@@45 T@U) (|node#0@@18| T@U) ) (!  (=> (and (and (= (type $Heap@@45) (MapType0Type refType MapType1Type)) (= (type |node#0@@18|) refType)) (or (|KMBtree.__default.Interpretation#canCall| $Heap@@45 |node#0@@18|) (and (not (= 24 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@45) ($Is |node#0@@18| Tclass.KMBtree.Node)) (KMBtree.__default.WF $Heap@@45 |node#0@@18|))))) (and (and (|KMBtree.__default.I#canCall| $Heap@@45 |node#0@@18|) (|KMBtreeModel.__default.Interpretation#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@45 |node#0@@18|))) (= (KMBtree.__default.Interpretation $Heap@@45 |node#0@@18|) (KMBtreeModel.__default.Interpretation StartFuel_KMBtreeModel._default.Interpretation (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@45 |node#0@@18|))))) :qid |MutableB.255:12| :skolemid |7671| :pattern ( (KMBtree.__default.Interpretation $Heap@@45 |node#0@@18|)) ))))
(assert (forall ((arg0@@248 T@U) (arg1@@119 T@U) ) (! (= (type (KMBtree.__default.ToSeq arg0@@248 arg1@@119)) DatatypeTypeType) :qid |funType:KMBtree.__default.ToSeq| :pattern ( (KMBtree.__default.ToSeq arg0@@248 arg1@@119)) )))
(assert (forall (($h0@@10 T@U) ($h1@@10 T@U) (|node#0@@19| T@U) ) (!  (=> (and (and (= (type $h0@@10) (MapType0Type refType MapType1Type)) (= (type $h1@@10) (MapType0Type refType MapType1Type))) (= (type |node#0@@19|) refType)) (=> (and (and (and ($IsGoodHeap $h0@@10) ($IsGoodHeap $h1@@10)) (or (|KMBtree.__default.ToSeq#canCall| $h0@@10 |node#0@@19|) ($Is |node#0@@19| Tclass.KMBtree.Node))) (and ($IsHeapAnchor $h0@@10) ($HeapSucc $h0@@10 $h1@@10))) (=> (forall (($o@@22 T@U) ($f@@10 T@U) ) (! (let ((alpha@@17 (FieldTypeInv0 (type $f@@10)))) (=> (and (and (= (type $o@@22) refType) (= (type $f@@10) (FieldType alpha@@17))) (and (not (= $o@@22 null)) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $h0@@10 |node#0@@19|) KMBtree.Node.repr) ($Box $o@@22))))) (= (MapType1Select (MapType0Select $h0@@10 $o@@22) $f@@10) (MapType1Select (MapType0Select $h1@@10 $o@@22) $f@@10)))) :qid |unknown.0:0| :skolemid |7694| :no-pattern (type $o@@22) :no-pattern (type $f@@10) :no-pattern (U_2_int $o@@22) :no-pattern (U_2_bool $o@@22) :no-pattern (U_2_int $f@@10) :no-pattern (U_2_bool $f@@10) )) (= (KMBtree.__default.ToSeq $h0@@10 |node#0@@19|) (KMBtree.__default.ToSeq $h1@@10 |node#0@@19|))))) :qid |DafnyPre.521:12| :skolemid |7695| :pattern ( ($IsHeapAnchor $h0@@10) ($HeapSucc $h0@@10 $h1@@10) (KMBtree.__default.ToSeq $h1@@10 |node#0@@19|)) )))
(assert  (=> (<= 26 $FunctionContextHeight) (forall (($Heap@@46 T@U) (|node#0@@20| T@U) ) (!  (=> (and (and (= (type $Heap@@46) (MapType0Type refType MapType1Type)) (= (type |node#0@@20|) refType)) (or (|KMBtree.__default.ToSeq#canCall| $Heap@@46 |node#0@@20|) (and (not (= 26 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@46) ($Is |node#0@@20| Tclass.KMBtree.Node)) (KMBtree.__default.WF $Heap@@46 |node#0@@20|))))) ($Is (KMBtree.__default.ToSeq $Heap@@46 |node#0@@20|) (Tclass._System.Tuple2 (TSeq (TSeq Tclass.NativeTypes.byte)) (TSeq Tclass.ValueMessage.Message)))) :qid |MutableB.262:12| :skolemid |7696| :pattern ( (KMBtree.__default.ToSeq $Heap@@46 |node#0@@20|)) ))))
(assert (forall (($Heap@@47 T@U) (|node#0@@21| T@U) ) (!  (=> (and (and (= (type $Heap@@47) (MapType0Type refType MapType1Type)) (= (type |node#0@@21|) refType)) (and ($IsGoodHeap $Heap@@47) ($Is |node#0@@21| Tclass.KMBtree.Node))) (and (=> (|KMBtree.__default.ToSeq#requires| $Heap@@47 |node#0@@21|) (KMBtree.__default.WF $Heap@@47 |node#0@@21|)) (=> (KMBtree.__default.WF $Heap@@47 |node#0@@21|) (|KMBtree.__default.ToSeq#requires| $Heap@@47 |node#0@@21|)))) :qid |MutableB.262:12| :skolemid |7697| :pattern ( (|KMBtree.__default.ToSeq#requires| $Heap@@47 |node#0@@21|)) )))
(assert  (and (forall ((arg0@@249 T@U) (arg1@@120 T@U) ) (! (= (type (KMBtreeModel.__default.ToSeq arg0@@249 arg1@@120)) DatatypeTypeType) :qid |funType:KMBtreeModel.__default.ToSeq| :pattern ( (KMBtreeModel.__default.ToSeq arg0@@249 arg1@@120)) )) (= (type StartFuel_KMBtreeModel._default.ToSeq) LayerTypeType)))
(assert  (=> (<= 26 $FunctionContextHeight) (forall (($Heap@@48 T@U) (|node#0@@22| T@U) ) (!  (=> (and (and (= (type $Heap@@48) (MapType0Type refType MapType1Type)) (= (type |node#0@@22|) refType)) (or (|KMBtree.__default.ToSeq#canCall| $Heap@@48 |node#0@@22|) (and (not (= 26 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@48) ($Is |node#0@@22| Tclass.KMBtree.Node)) (KMBtree.__default.WF $Heap@@48 |node#0@@22|))))) (and (and (|KMBtree.__default.I#canCall| $Heap@@48 |node#0@@22|) (|KMBtreeModel.__default.ToSeq#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@48 |node#0@@22|))) (= (KMBtree.__default.ToSeq $Heap@@48 |node#0@@22|) (KMBtreeModel.__default.ToSeq StartFuel_KMBtreeModel._default.ToSeq (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@48 |node#0@@22|))))) :qid |MutableB.262:12| :skolemid |7698| :pattern ( (KMBtree.__default.ToSeq $Heap@@48 |node#0@@22|)) ))))
(assert (forall ((arg0@@250 T@U) ) (! (= (type (Tclass.Options.Option arg0@@250)) TyType) :qid |funType:Tclass.Options.Option| :pattern ( (Tclass.Options.Option arg0@@250)) )))
(assert (forall ((Options.Option$V T@U) ) (!  (=> (= (type Options.Option$V) TyType) (= (Tag (Tclass.Options.Option Options.Option$V)) Tagclass.Options.Option)) :qid |unknown.0:0| :skolemid |7721| :pattern ( (Tclass.Options.Option Options.Option$V)) )))
(assert (forall ((arg0@@251 T@U) ) (! (= (type (Tclass.Options.Option_0 arg0@@251)) TyType) :qid |funType:Tclass.Options.Option_0| :pattern ( (Tclass.Options.Option_0 arg0@@251)) )))
(assert (forall ((Options.Option$V@@0 T@U) ) (!  (=> (= (type Options.Option$V@@0) TyType) (= (Tclass.Options.Option_0 (Tclass.Options.Option Options.Option$V@@0)) Options.Option$V@@0)) :qid |unknown.0:0| :skolemid |7722| :pattern ( (Tclass.Options.Option Options.Option$V@@0)) )))
(assert (forall ((Options.Option$V@@1 T@U) (bx@@85 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@1) TyType) (= (type bx@@85) BoxType)) ($IsBox bx@@85 (Tclass.Options.Option Options.Option$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@85)) bx@@85) ($Is ($Unbox DatatypeTypeType bx@@85) (Tclass.Options.Option Options.Option$V@@1)))) :qid |unknown.0:0| :skolemid |7723| :pattern ( ($IsBox bx@@85 (Tclass.Options.Option Options.Option$V@@1))) )))
(assert (= (type Tclass.KMBtree.NodeContents) TyType))
(assert (= (Tag Tclass.KMBtree.NodeContents) Tagclass.KMBtree.NodeContents))
(assert (forall ((bx@@86 T@U) ) (!  (=> (and (= (type bx@@86) BoxType) ($IsBox bx@@86 Tclass.KMBtree.NodeContents)) (and (= ($Box ($Unbox DatatypeTypeType bx@@86)) bx@@86) ($Is ($Unbox DatatypeTypeType bx@@86) Tclass.KMBtree.NodeContents))) :qid |unknown.0:0| :skolemid |8591| :pattern ( ($IsBox bx@@86 Tclass.KMBtree.NodeContents)) )))
(assert (forall (($h0@@11 T@U) ($h1@@11 T@U) (|node#0@@23| T@U) ) (!  (=> (and (and (= (type $h0@@11) (MapType0Type refType MapType1Type)) (= (type $h1@@11) (MapType0Type refType MapType1Type))) (= (type |node#0@@23|) refType)) (=> (and (and (and ($IsGoodHeap $h0@@11) ($IsGoodHeap $h1@@11)) (or (|KMBtree.__default.Full#canCall| $h0@@11 |node#0@@23|) ($Is |node#0@@23| Tclass.KMBtree.Node))) (and ($IsHeapAnchor $h0@@11) ($HeapSucc $h0@@11 $h1@@11))) (=> (forall (($o@@23 T@U) ($f@@11 T@U) ) (! (let ((alpha@@18 (FieldTypeInv0 (type $f@@11)))) (=> (and (and (= (type $o@@23) refType) (= (type $f@@11) (FieldType alpha@@18))) (and (not (= $o@@23 null)) (= $o@@23 |node#0@@23|))) (= (MapType1Select (MapType0Select $h0@@11 $o@@23) $f@@11) (MapType1Select (MapType0Select $h1@@11 $o@@23) $f@@11)))) :qid |unknown.0:0| :skolemid |8628| :no-pattern (type $o@@23) :no-pattern (type $f@@11) :no-pattern (U_2_int $o@@23) :no-pattern (U_2_bool $o@@23) :no-pattern (U_2_int $f@@11) :no-pattern (U_2_bool $f@@11) )) (and (=> (KMBtree.__default.Full $h0@@11 |node#0@@23|) (KMBtree.__default.Full $h1@@11 |node#0@@23|)) (=> (KMBtree.__default.Full $h1@@11 |node#0@@23|) (KMBtree.__default.Full $h0@@11 |node#0@@23|)))))) :qid |DafnyPre.521:12| :skolemid |8629| :pattern ( ($IsHeapAnchor $h0@@11) ($HeapSucc $h0@@11 $h1@@11) (KMBtree.__default.Full $h1@@11 |node#0@@23|)) )))
(assert  (=> (<= 40 $FunctionContextHeight) (forall (($Heap@@49 T@U) (|node#0@@24| T@U) ) (!  (=> (and (and (= (type $Heap@@49) (MapType0Type refType MapType1Type)) (= (type |node#0@@24|) refType)) (or (|KMBtree.__default.Full#canCall| $Heap@@49 |node#0@@24|) (and (not (= 40 $FunctionContextHeight)) (and ($IsGoodHeap $Heap@@49) ($Is |node#0@@24| Tclass.KMBtree.Node))))) true) :qid |MutableB.454:20| :skolemid |8630| :pattern ( (KMBtree.__default.Full $Heap@@49 |node#0@@24|)) ))))
(assert (forall (($Heap@@50 T@U) (|node#0@@25| T@U) ) (!  (=> (and (and (= (type $Heap@@50) (MapType0Type refType MapType1Type)) (= (type |node#0@@25|) refType)) (and ($IsGoodHeap $Heap@@50) ($Is |node#0@@25| Tclass.KMBtree.Node))) (and (=> (|KMBtree.__default.Full#requires| $Heap@@50 |node#0@@25|) true) (=> true (|KMBtree.__default.Full#requires| $Heap@@50 |node#0@@25|)))) :qid |MutableB.454:20| :skolemid |8631| :pattern ( (|KMBtree.__default.Full#requires| $Heap@@50 |node#0@@25|)) )))
(assert  (=> (<= 40 $FunctionContextHeight) (forall (($Heap@@51 T@U) (|node#0@@26| T@U) ) (!  (=> (and (and (= (type $Heap@@51) (MapType0Type refType MapType1Type)) (= (type |node#0@@26|) refType)) (or (|KMBtree.__default.Full#canCall| $Heap@@51 |node#0@@26|) (and (not (= 40 $FunctionContextHeight)) (and ($IsGoodHeap $Heap@@51) ($Is |node#0@@26| Tclass.KMBtree.Node))))) (and (and (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@51 |node#0@@26|) KMBtree.Node.contents)) |KMBtree.__default.MaxKeysPerLeaf#canCall|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@51 |node#0@@26|) KMBtree.Node.contents))) |KMBtree.__default.MaxChildren#canCall|)) (and (=> (KMBtree.__default.Full $Heap@@51 |node#0@@26|) (ite (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@51 |node#0@@26|) KMBtree.Node.contents)) (let ((|nkeys#1@@0| (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@@51 |node#0@@26|) KMBtree.Node.contents)))) (= |nkeys#1@@0| (LitInt KMBtree.__default.MaxKeysPerLeaf))) (let ((|nchildren#1@@0| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@51 |node#0@@26|) KMBtree.Node.contents)))) (= |nchildren#1@@0| (LitInt KMBtree.__default.MaxChildren))))) (=> (ite (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@51 |node#0@@26|) KMBtree.Node.contents)) (let ((|nkeys#1@@1| (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@@51 |node#0@@26|) KMBtree.Node.contents)))) (= |nkeys#1@@1| (LitInt KMBtree.__default.MaxKeysPerLeaf))) (let ((|nchildren#1@@1| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@51 |node#0@@26|) KMBtree.Node.contents)))) (= |nchildren#1@@1| (LitInt KMBtree.__default.MaxChildren)))) (KMBtree.__default.Full $Heap@@51 |node#0@@26|))))) :qid |MutableB.454:20| :skolemid |8632| :pattern ( (KMBtree.__default.Full $Heap@@51 |node#0@@26|)) ))))
(assert (forall (($h0@@12 T@U) ($h1@@12 T@U) (|node#0@@27| T@U) (|o#0@@1| T@U) (|i#0@@17| Int) ) (!  (=> (and (and (and (and (and (= (type $h0@@12) (MapType0Type refType MapType1Type)) (= (type $h1@@12) (MapType0Type refType MapType1Type))) (= (type |node#0@@27|) refType)) (= (type |o#0@@1|) refType)) (and (and (and ($IsGoodHeap $h0@@12) ($IsGoodHeap $h1@@12)) (or (|KMBtree.__default.ObjectIsInSubtree#canCall| $h0@@12 |node#0@@27| |o#0@@1| |i#0@@17|) (and ($Is |node#0@@27| Tclass.KMBtree.Node) ($Is |o#0@@1| Tclass._System.object)))) (and ($IsHeapAnchor $h0@@12) ($HeapSucc $h0@@12 $h1@@12)))) (forall (($o@@24 T@U) ($f@@12 T@U) ) (! (let ((alpha@@19 (FieldTypeInv0 (type $f@@12)))) (=> (and (and (= (type $o@@24) refType) (= (type $f@@12) (FieldType alpha@@19))) (and (not (= $o@@24 null)) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $h0@@12 |node#0@@27|) KMBtree.Node.repr) ($Box $o@@24))))) (= (MapType1Select (MapType0Select $h0@@12 $o@@24) $f@@12) (MapType1Select (MapType0Select $h1@@12 $o@@24) $f@@12)))) :qid |unknown.0:0| :skolemid |8750| :no-pattern (type $o@@24) :no-pattern (type $f@@12) :no-pattern (U_2_int $o@@24) :no-pattern (U_2_bool $o@@24) :no-pattern (U_2_int $f@@12) :no-pattern (U_2_bool $f@@12) ))) (and (=> (KMBtree.__default.ObjectIsInSubtree $h0@@12 |node#0@@27| |o#0@@1| |i#0@@17|) (KMBtree.__default.ObjectIsInSubtree $h1@@12 |node#0@@27| |o#0@@1| |i#0@@17|)) (=> (KMBtree.__default.ObjectIsInSubtree $h1@@12 |node#0@@27| |o#0@@1| |i#0@@17|) (KMBtree.__default.ObjectIsInSubtree $h0@@12 |node#0@@27| |o#0@@1| |i#0@@17|)))) :qid |DafnyPre.521:12| :skolemid |8751| :pattern ( ($IsHeapAnchor $h0@@12) ($HeapSucc $h0@@12 $h1@@12) (KMBtree.__default.ObjectIsInSubtree $h1@@12 |node#0@@27| |o#0@@1| |i#0@@17|)) )))
(assert  (=> (<= 42 $FunctionContextHeight) (forall (($Heap@@52 T@U) (|node#0@@28| T@U) (|o#0@@2| T@U) (|i#0@@18| Int) ) (!  (=> (and (and (and (= (type $Heap@@52) (MapType0Type refType MapType1Type)) (= (type |node#0@@28|) refType)) (= (type |o#0@@2|) refType)) (or (|KMBtree.__default.ObjectIsInSubtree#canCall| $Heap@@52 |node#0@@28| |o#0@@2| |i#0@@18|) (and (not (= 42 $FunctionContextHeight)) (and (and (and ($IsGoodHeap $Heap@@52) ($Is |node#0@@28| Tclass.KMBtree.Node)) ($Is |o#0@@2| Tclass._System.object)) (and (and (KMBtree.__default.WFShape ($LS $LZ) $Heap@@52 |node#0@@28|) (KMBtree.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@@52 |node#0@@28|) KMBtree.Node.contents))) (and (<= (LitInt 0) |i#0@@18|) (< |i#0@@18| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@52 |node#0@@28|) KMBtree.Node.contents))))))))) true) :qid |MutableB.486:13| :skolemid |8752| :pattern ( (KMBtree.__default.ObjectIsInSubtree $Heap@@52 |node#0@@28| |o#0@@2| |i#0@@18|)) ))))
(assert (forall (($Heap@@53 T@U) (|node#0@@29| T@U) (|o#0@@3| T@U) (|i#0@@19| Int) ) (!  (=> (and (and (and (= (type $Heap@@53) (MapType0Type refType MapType1Type)) (= (type |node#0@@29|) refType)) (= (type |o#0@@3|) refType)) (and (and ($IsGoodHeap $Heap@@53) ($Is |node#0@@29| Tclass.KMBtree.Node)) ($Is |o#0@@3| Tclass._System.object))) (and (=> (|KMBtree.__default.ObjectIsInSubtree#requires| $Heap@@53 |node#0@@29| |o#0@@3| |i#0@@19|) (and (and (KMBtree.__default.WFShape ($LS $LZ) $Heap@@53 |node#0@@29|) (KMBtree.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@@53 |node#0@@29|) KMBtree.Node.contents))) (and (<= (LitInt 0) |i#0@@19|) (< |i#0@@19| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@53 |node#0@@29|) KMBtree.Node.contents)))))) (=> (and (and (KMBtree.__default.WFShape ($LS $LZ) $Heap@@53 |node#0@@29|) (KMBtree.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@@53 |node#0@@29|) KMBtree.Node.contents))) (and (<= (LitInt 0) |i#0@@19|) (< |i#0@@19| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@53 |node#0@@29|) KMBtree.Node.contents))))) (|KMBtree.__default.ObjectIsInSubtree#requires| $Heap@@53 |node#0@@29| |o#0@@3| |i#0@@19|)))) :qid |MutableB.486:13| :skolemid |8753| :pattern ( (|KMBtree.__default.ObjectIsInSubtree#requires| $Heap@@53 |node#0@@29| |o#0@@3| |i#0@@19|)) )))
(assert  (=> (<= 42 $FunctionContextHeight) (forall (($Heap@@54 T@U) (|node#0@@30| T@U) (|o#0@@4| T@U) (|i#0@@20| Int) ) (!  (=> (and (and (and (= (type $Heap@@54) (MapType0Type refType MapType1Type)) (= (type |node#0@@30|) refType)) (= (type |o#0@@4|) refType)) (or (|KMBtree.__default.ObjectIsInSubtree#canCall| $Heap@@54 |node#0@@30| |o#0@@4| |i#0@@20|) (and (not (= 42 $FunctionContextHeight)) (and (and (and ($IsGoodHeap $Heap@@54) ($Is |node#0@@30| Tclass.KMBtree.Node)) ($Is |o#0@@4| Tclass._System.object)) (and (and (KMBtree.__default.WFShape ($LS $LZ) $Heap@@54 |node#0@@30|) (KMBtree.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@@54 |node#0@@30|) KMBtree.Node.contents))) (and (<= (LitInt 0) |i#0@@20|) (< |i#0@@20| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@54 |node#0@@30|) KMBtree.Node.contents))))))))) (and (=> (KMBtree.__default.ObjectIsInSubtree $Heap@@54 |node#0@@30| |o#0@@4| |i#0@@20|) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@54 ($Unbox refType (MapType1Select (MapType0Select $Heap@@54 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@@54 |node#0@@30|) KMBtree.Node.contents))) (IndexField |i#0@@20|)))) KMBtree.Node.repr) ($Box |o#0@@4|)))) (=> (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@54 ($Unbox refType (MapType1Select (MapType0Select $Heap@@54 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@@54 |node#0@@30|) KMBtree.Node.contents))) (IndexField |i#0@@20|)))) KMBtree.Node.repr) ($Box |o#0@@4|))) (KMBtree.__default.ObjectIsInSubtree $Heap@@54 |node#0@@30| |o#0@@4| |i#0@@20|)))) :qid |MutableB.486:13| :skolemid |8754| :pattern ( (KMBtree.__default.ObjectIsInSubtree $Heap@@54 |node#0@@30| |o#0@@4| |i#0@@20|)) ))))
(assert (forall ((arg0@@252 T@U) (arg1@@121 T@U) (arg2@@67 Int) (arg3@@43 Int) ) (! (= (type (KMBtree.__default.SubRepr arg0@@252 arg1@@121 arg2@@67 arg3@@43)) (MapType0Type BoxType boolType)) :qid |funType:KMBtree.__default.SubRepr| :pattern ( (KMBtree.__default.SubRepr arg0@@252 arg1@@121 arg2@@67 arg3@@43)) )))
(assert (forall (($h0@@13 T@U) ($h1@@13 T@U) (|node#0@@31| T@U) (|from#0| Int) (|to#0| Int) ) (!  (=> (and (and (= (type $h0@@13) (MapType0Type refType MapType1Type)) (= (type $h1@@13) (MapType0Type refType MapType1Type))) (= (type |node#0@@31|) refType)) (=> (and (and (and ($IsGoodHeap $h0@@13) ($IsGoodHeap $h1@@13)) (or (|KMBtree.__default.SubRepr#canCall| $h0@@13 |node#0@@31| |from#0| |to#0|) ($Is |node#0@@31| Tclass.KMBtree.Node))) (and ($IsHeapAnchor $h0@@13) ($HeapSucc $h0@@13 $h1@@13))) (=> (forall (($o@@25 T@U) ($f@@13 T@U) ) (! (let ((alpha@@20 (FieldTypeInv0 (type $f@@13)))) (=> (and (and (= (type $o@@25) refType) (= (type $f@@13) (FieldType alpha@@20))) (and (not (= $o@@25 null)) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $h0@@13 |node#0@@31|) KMBtree.Node.repr) ($Box $o@@25))))) (= (MapType1Select (MapType0Select $h0@@13 $o@@25) $f@@13) (MapType1Select (MapType0Select $h1@@13 $o@@25) $f@@13)))) :qid |unknown.0:0| :skolemid |8758| :no-pattern (type $o@@25) :no-pattern (type $f@@13) :no-pattern (U_2_int $o@@25) :no-pattern (U_2_bool $o@@25) :no-pattern (U_2_int $f@@13) :no-pattern (U_2_bool $f@@13) )) (= (KMBtree.__default.SubRepr $h0@@13 |node#0@@31| |from#0| |to#0|) (KMBtree.__default.SubRepr $h1@@13 |node#0@@31| |from#0| |to#0|))))) :qid |DafnyPre.521:12| :skolemid |8759| :pattern ( ($IsHeapAnchor $h0@@13) ($HeapSucc $h0@@13 $h1@@13) (KMBtree.__default.SubRepr $h1@@13 |node#0@@31| |from#0| |to#0|)) )))
(assert  (=> (<= 43 $FunctionContextHeight) (forall (($Heap@@55 T@U) (|node#0@@32| T@U) (|from#0@@0| Int) (|to#0@@0| Int) ) (!  (=> (and (and (= (type $Heap@@55) (MapType0Type refType MapType1Type)) (= (type |node#0@@32|) refType)) (or (|KMBtree.__default.SubRepr#canCall| $Heap@@55 |node#0@@32| |from#0@@0| |to#0@@0|) (and (not (= 43 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@55) ($Is |node#0@@32| Tclass.KMBtree.Node)) (and (and (KMBtree.__default.WFShape ($LS $LZ) $Heap@@55 |node#0@@32|) (KMBtree.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@@55 |node#0@@32|) KMBtree.Node.contents))) (and (and (<= (LitInt 0) |from#0@@0|) (<= |from#0@@0| |to#0@@0|)) (<= |to#0@@0| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@55 |node#0@@32|) KMBtree.Node.contents))))))))) ($Is (KMBtree.__default.SubRepr $Heap@@55 |node#0@@32| |from#0@@0| |to#0@@0|) (TSet Tclass._System.object))) :qid |MutableB.496:12| :skolemid |8760| :pattern ( (KMBtree.__default.SubRepr $Heap@@55 |node#0@@32| |from#0@@0| |to#0@@0|)) ))))
(assert (forall (($Heap@@56 T@U) (|node#0@@33| T@U) (|from#0@@1| Int) (|to#0@@1| Int) ) (!  (=> (and (and (= (type $Heap@@56) (MapType0Type refType MapType1Type)) (= (type |node#0@@33|) refType)) (and ($IsGoodHeap $Heap@@56) ($Is |node#0@@33| Tclass.KMBtree.Node))) (and (=> (|KMBtree.__default.SubRepr#requires| $Heap@@56 |node#0@@33| |from#0@@1| |to#0@@1|) (and (and (KMBtree.__default.WFShape ($LS $LZ) $Heap@@56 |node#0@@33|) (KMBtree.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@@56 |node#0@@33|) KMBtree.Node.contents))) (and (and (<= (LitInt 0) |from#0@@1|) (<= |from#0@@1| |to#0@@1|)) (<= |to#0@@1| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@56 |node#0@@33|) KMBtree.Node.contents)))))) (=> (and (and (KMBtree.__default.WFShape ($LS $LZ) $Heap@@56 |node#0@@33|) (KMBtree.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@@56 |node#0@@33|) KMBtree.Node.contents))) (and (and (<= (LitInt 0) |from#0@@1|) (<= |from#0@@1| |to#0@@1|)) (<= |to#0@@1| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@56 |node#0@@33|) KMBtree.Node.contents))))) (|KMBtree.__default.SubRepr#requires| $Heap@@56 |node#0@@33| |from#0@@1| |to#0@@1|)))) :qid |MutableB.496:12| :skolemid |8761| :pattern ( (|KMBtree.__default.SubRepr#requires| $Heap@@56 |node#0@@33| |from#0@@1| |to#0@@1|)) )))
(assert  (=> (<= 43 $FunctionContextHeight) (forall (($Heap@@57 T@U) (|node#0@@34| T@U) (|from#0@@2| Int) (|to#0@@2| Int) ) (!  (=> (and (and (= (type $Heap@@57) (MapType0Type refType MapType1Type)) (= (type |node#0@@34|) refType)) (or (|KMBtree.__default.SubRepr#canCall| $Heap@@57 |node#0@@34| |from#0@@2| |to#0@@2|) (and (not (= 43 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@57) ($Is |node#0@@34| Tclass.KMBtree.Node)) (and (and (KMBtree.__default.WFShape ($LS $LZ) $Heap@@57 |node#0@@34|) (KMBtree.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@@57 |node#0@@34|) KMBtree.Node.contents))) (and (and (<= (LitInt 0) |from#0@@2|) (<= |from#0@@2| |to#0@@2|)) (<= |to#0@@2| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@57 |node#0@@34|) KMBtree.Node.contents))))))))) (and (|KMBtree.__default.SeqRepr#canCall| $Heap@@57 (|Seq#Drop| (|Seq#Take| (|Seq#FromArray| $Heap@@57 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@@57 |node#0@@34|) KMBtree.Node.contents))) |to#0@@2|) |from#0@@2|)) (= (KMBtree.__default.SubRepr $Heap@@57 |node#0@@34| |from#0@@2| |to#0@@2|) (KMBtree.__default.SeqRepr StartFuel_KMBtree._default.SeqRepr $Heap@@57 (|Seq#Drop| (|Seq#Take| (|Seq#FromArray| $Heap@@57 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@@57 |node#0@@34|) KMBtree.Node.contents))) |to#0@@2|) |from#0@@2|))))) :qid |MutableB.496:12| :skolemid |8762| :pattern ( (KMBtree.__default.SubRepr $Heap@@57 |node#0@@34| |from#0@@2| |to#0@@2|)) ))))
(assert (forall (($h0@@14 T@U) ($h1@@14 T@U) (|contents#0| T@U) (|i#0@@21| Int) (|j#0@@6| Int) ) (!  (=> (and (and (= (type $h0@@14) (MapType0Type refType MapType1Type)) (= (type $h1@@14) (MapType0Type refType MapType1Type))) (= (type |contents#0|) DatatypeTypeType)) (=> (and (and (and ($IsGoodHeap $h0@@14) ($IsGoodHeap $h1@@14)) (or (|KMBtree.__default.DisjointSubtrees#canCall| $h0@@14 |contents#0| |i#0@@21| |j#0@@6|) ($Is |contents#0| Tclass.KMBtree.NodeContents))) (and ($IsHeapAnchor $h0@@14) ($HeapSucc $h0@@14 $h1@@14))) (=> (forall (($o@@26 T@U) ($f@@14 T@U) ) (! (let ((alpha@@21 (FieldTypeInv0 (type $f@@14)))) (=> (and (and (= (type $o@@26) refType) (= (type $f@@14) (FieldType alpha@@21))) (and (not (= $o@@26 null)) (or (or (= $o@@26 (KMBtree.NodeContents.children |contents#0|)) (= $o@@26 ($Unbox refType (MapType1Select (MapType0Select $h0@@14 (KMBtree.NodeContents.children |contents#0|)) (IndexField |i#0@@21|))))) (= $o@@26 ($Unbox refType (MapType1Select (MapType0Select $h0@@14 (KMBtree.NodeContents.children |contents#0|)) (IndexField |j#0@@6|))))))) (= (MapType1Select (MapType0Select $h0@@14 $o@@26) $f@@14) (MapType1Select (MapType0Select $h1@@14 $o@@26) $f@@14)))) :qid |unknown.0:0| :skolemid |8772| :no-pattern (type $o@@26) :no-pattern (type $f@@14) :no-pattern (U_2_int $o@@26) :no-pattern (U_2_bool $o@@26) :no-pattern (U_2_int $f@@14) :no-pattern (U_2_bool $f@@14) )) (and (=> (KMBtree.__default.DisjointSubtrees $h0@@14 |contents#0| |i#0@@21| |j#0@@6|) (KMBtree.__default.DisjointSubtrees $h1@@14 |contents#0| |i#0@@21| |j#0@@6|)) (=> (KMBtree.__default.DisjointSubtrees $h1@@14 |contents#0| |i#0@@21| |j#0@@6|) (KMBtree.__default.DisjointSubtrees $h0@@14 |contents#0| |i#0@@21| |j#0@@6|)))))) :qid |DafnyPre.521:12| :skolemid |8773| :pattern ( ($IsHeapAnchor $h0@@14) ($HeapSucc $h0@@14 $h1@@14) (KMBtree.__default.DisjointSubtrees $h1@@14 |contents#0| |i#0@@21| |j#0@@6|)) )))
(assert  (=> (<= 44 $FunctionContextHeight) (forall (($Heap@@58 T@U) (|contents#0@@0| T@U) (|i#0@@22| Int) (|j#0@@7| Int) ) (!  (=> (and (and (= (type $Heap@@58) (MapType0Type refType MapType1Type)) (= (type |contents#0@@0|) DatatypeTypeType)) (or (|KMBtree.__default.DisjointSubtrees#canCall| $Heap@@58 |contents#0@@0| |i#0@@22| |j#0@@7|) (and (not (= 44 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@58) ($Is |contents#0@@0| Tclass.KMBtree.NodeContents)) (and (and (and (and (and (KMBtree.NodeContents.Index_q |contents#0@@0|) (and (<= (LitInt 0) |i#0@@22|) (< |i#0@@22| (KMBtree.NodeContents.nchildren |contents#0@@0|)))) (and (<= (LitInt 0) |j#0@@7|) (< |j#0@@7| (KMBtree.NodeContents.nchildren |contents#0@@0|)))) (<= (KMBtree.NodeContents.nchildren |contents#0@@0|) (_System.array.Length (KMBtree.NodeContents.children |contents#0@@0|)))) (forall ((|l#0| Int) ) (!  (=> (and (<= (LitInt 0) |l#0|) (< |l#0| 18446744073709551616)) (=> (and (<= (LitInt 0) |l#0|) (< |l#0| (KMBtree.NodeContents.nchildren |contents#0@@0|))) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@@58 (KMBtree.NodeContents.children |contents#0@@0|)) (IndexField |l#0|))) null)))) :qid |MutableB.513:21| :skolemid |8774| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@58 (KMBtree.NodeContents.children |contents#0@@0|)) (IndexField |l#0|)))) ))) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@@58 (KMBtree.NodeContents.children |contents#0@@0|)) (IndexField |j#0@@7|))) null))))))) true) :qid |MutableB.508:13| :skolemid |8775| :pattern ( (KMBtree.__default.DisjointSubtrees $Heap@@58 |contents#0@@0| |i#0@@22| |j#0@@7|)) ))))
(assert (forall (($Heap@@59 T@U) (|contents#0@@1| T@U) (|i#0@@23| Int) (|j#0@@8| Int) ) (!  (=> (and (and (= (type $Heap@@59) (MapType0Type refType MapType1Type)) (= (type |contents#0@@1|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@59) ($Is |contents#0@@1| Tclass.KMBtree.NodeContents))) (and (=> (|KMBtree.__default.DisjointSubtrees#requires| $Heap@@59 |contents#0@@1| |i#0@@23| |j#0@@8|) (and (and (and (and (and (KMBtree.NodeContents.Index_q |contents#0@@1|) (and (<= (LitInt 0) |i#0@@23|) (< |i#0@@23| (KMBtree.NodeContents.nchildren |contents#0@@1|)))) (and (<= (LitInt 0) |j#0@@8|) (< |j#0@@8| (KMBtree.NodeContents.nchildren |contents#0@@1|)))) (<= (KMBtree.NodeContents.nchildren |contents#0@@1|) (_System.array.Length (KMBtree.NodeContents.children |contents#0@@1|)))) (forall ((|l#1| Int) ) (!  (=> (and (<= (LitInt 0) |l#1|) (< |l#1| 18446744073709551616)) (=> (and (<= (LitInt 0) |l#1|) (< |l#1| (KMBtree.NodeContents.nchildren |contents#0@@1|))) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@@59 (KMBtree.NodeContents.children |contents#0@@1|)) (IndexField |l#1|))) null)))) :qid |MutableB.513:21| :skolemid |8776| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@59 (KMBtree.NodeContents.children |contents#0@@1|)) (IndexField |l#1|)))) ))) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@@59 (KMBtree.NodeContents.children |contents#0@@1|)) (IndexField |j#0@@8|))) null)))) (=> (and (and (and (and (and (KMBtree.NodeContents.Index_q |contents#0@@1|) (and (<= (LitInt 0) |i#0@@23|) (< |i#0@@23| (KMBtree.NodeContents.nchildren |contents#0@@1|)))) (and (<= (LitInt 0) |j#0@@8|) (< |j#0@@8| (KMBtree.NodeContents.nchildren |contents#0@@1|)))) (<= (KMBtree.NodeContents.nchildren |contents#0@@1|) (_System.array.Length (KMBtree.NodeContents.children |contents#0@@1|)))) (forall ((|l#1@@0| Int) ) (!  (=> (and (<= (LitInt 0) |l#1@@0|) (< |l#1@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |l#1@@0|) (< |l#1@@0| (KMBtree.NodeContents.nchildren |contents#0@@1|))) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@@59 (KMBtree.NodeContents.children |contents#0@@1|)) (IndexField |l#1@@0|))) null)))) :qid |MutableB.513:21| :skolemid |8776| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@59 (KMBtree.NodeContents.children |contents#0@@1|)) (IndexField |l#1@@0|)))) ))) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@@59 (KMBtree.NodeContents.children |contents#0@@1|)) (IndexField |j#0@@8|))) null))) (|KMBtree.__default.DisjointSubtrees#requires| $Heap@@59 |contents#0@@1| |i#0@@23| |j#0@@8|)))) :qid |MutableB.508:13| :skolemid |8777| :pattern ( (|KMBtree.__default.DisjointSubtrees#requires| $Heap@@59 |contents#0@@1| |i#0@@23| |j#0@@8|)) )))
(assert  (=> (<= 44 $FunctionContextHeight) (forall (($Heap@@60 T@U) (|contents#0@@2| T@U) (|i#0@@24| Int) (|j#0@@9| Int) ) (!  (=> (and (and (= (type $Heap@@60) (MapType0Type refType MapType1Type)) (= (type |contents#0@@2|) DatatypeTypeType)) (or (|KMBtree.__default.DisjointSubtrees#canCall| $Heap@@60 |contents#0@@2| |i#0@@24| |j#0@@9|) (and (not (= 44 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@60) ($Is |contents#0@@2| Tclass.KMBtree.NodeContents)) (and (and (and (and (and (KMBtree.NodeContents.Index_q |contents#0@@2|) (and (<= (LitInt 0) |i#0@@24|) (< |i#0@@24| (KMBtree.NodeContents.nchildren |contents#0@@2|)))) (and (<= (LitInt 0) |j#0@@9|) (< |j#0@@9| (KMBtree.NodeContents.nchildren |contents#0@@2|)))) (<= (KMBtree.NodeContents.nchildren |contents#0@@2|) (_System.array.Length (KMBtree.NodeContents.children |contents#0@@2|)))) (forall ((|l#1@@1| Int) ) (!  (=> (and (<= (LitInt 0) |l#1@@1|) (< |l#1@@1| 18446744073709551616)) (=> (and (<= (LitInt 0) |l#1@@1|) (< |l#1@@1| (KMBtree.NodeContents.nchildren |contents#0@@2|))) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@@60 (KMBtree.NodeContents.children |contents#0@@2|)) (IndexField |l#1@@1|))) null)))) :qid |MutableB.513:21| :skolemid |8776| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@60 (KMBtree.NodeContents.children |contents#0@@2|)) (IndexField |l#1@@1|)))) ))) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@@60 (KMBtree.NodeContents.children |contents#0@@2|)) (IndexField |j#0@@9|))) null))))))) (and (|KMBtree.__default.DisjointReprs#canCall| $Heap@@60 (|Seq#Take| (|Seq#FromArray| $Heap@@60 (KMBtree.NodeContents.children |contents#0@@2|)) (KMBtree.NodeContents.nchildren |contents#0@@2|)) |i#0@@24| |j#0@@9|) (and (=> (KMBtree.__default.DisjointSubtrees $Heap@@60 |contents#0@@2| |i#0@@24| |j#0@@9|) (KMBtree.__default.DisjointReprs $Heap@@60 (|Seq#Take| (|Seq#FromArray| $Heap@@60 (KMBtree.NodeContents.children |contents#0@@2|)) (KMBtree.NodeContents.nchildren |contents#0@@2|)) |i#0@@24| |j#0@@9|)) (=> (KMBtree.__default.DisjointReprs $Heap@@60 (|Seq#Take| (|Seq#FromArray| $Heap@@60 (KMBtree.NodeContents.children |contents#0@@2|)) (KMBtree.NodeContents.nchildren |contents#0@@2|)) |i#0@@24| |j#0@@9|) (KMBtree.__default.DisjointSubtrees $Heap@@60 |contents#0@@2| |i#0@@24| |j#0@@9|))))) :qid |MutableB.508:13| :skolemid |8778| :pattern ( (KMBtree.__default.DisjointSubtrees $Heap@@60 |contents#0@@2| |i#0@@24| |j#0@@9|)) ))))
(assert (forall (($o@@27 T@U) ) (!  (=> (= (type $o@@27) refType) (and (=> ($Is $o@@27 Tclass.KMBtree.Node?) (or (= $o@@27 null) (= (dtype $o@@27) Tclass.KMBtree.Node?))) (=> (or (= $o@@27 null) (= (dtype $o@@27) Tclass.KMBtree.Node?)) ($Is $o@@27 Tclass.KMBtree.Node?)))) :qid |unknown.0:0| :skolemid |11367| :pattern ( ($Is $o@@27 Tclass.KMBtree.Node?)) )))
(assert (forall (($o@@28 T@U) ($h@@28 T@U) ) (!  (=> (and (= (type $o@@28) refType) (= (type $h@@28) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@28 Tclass.KMBtree.Node? $h@@28) (or (= $o@@28 null) (U_2_bool (MapType1Select (MapType0Select $h@@28 $o@@28) alloc)))) (=> (or (= $o@@28 null) (U_2_bool (MapType1Select (MapType0Select $h@@28 $o@@28) alloc))) ($IsAlloc $o@@28 Tclass.KMBtree.Node? $h@@28)))) :qid |unknown.0:0| :skolemid |11368| :pattern ( ($IsAlloc $o@@28 Tclass.KMBtree.Node? $h@@28)) )))
(assert (forall (($h@@29 T@U) ($o@@29 T@U) ) (!  (=> (and (and (= (type $h@@29) (MapType0Type refType MapType1Type)) (= (type $o@@29) refType)) (and ($IsGoodHeap $h@@29) (and (not (= $o@@29 null)) (= (dtype $o@@29) Tclass.KMBtree.Node?)))) ($Is (MapType1Select (MapType0Select $h@@29 $o@@29) KMBtree.Node.contents) Tclass.KMBtree.NodeContents)) :qid |DafnyPre.521:12| :skolemid |11369| :pattern ( (MapType1Select (MapType0Select $h@@29 $o@@29) KMBtree.Node.contents)) )))
(assert (forall (($h@@30 T@U) ($o@@30 T@U) ) (!  (=> (and (= (type $h@@30) (MapType0Type refType MapType1Type)) (= (type $o@@30) refType)) (=> (and (and ($IsGoodHeap $h@@30) (and (not (= $o@@30 null)) (= (dtype $o@@30) Tclass.KMBtree.Node?))) (U_2_bool (MapType1Select (MapType0Select $h@@30 $o@@30) alloc))) ($IsAlloc (MapType1Select (MapType0Select $h@@30 $o@@30) KMBtree.Node.contents) Tclass.KMBtree.NodeContents $h@@30))) :qid |DafnyPre.521:12| :skolemid |11370| :pattern ( (MapType1Select (MapType0Select $h@@30 $o@@30) KMBtree.Node.contents)) )))
(assert (forall (($h@@31 T@U) ($o@@31 T@U) ) (!  (=> (and (and (= (type $h@@31) (MapType0Type refType MapType1Type)) (= (type $o@@31) refType)) (and ($IsGoodHeap $h@@31) (and (not (= $o@@31 null)) (= (dtype $o@@31) Tclass.KMBtree.Node?)))) ($Is (MapType1Select (MapType0Select $h@@31 $o@@31) KMBtree.Node.repr) (TSet Tclass._System.object))) :qid |DafnyPre.521:12| :skolemid |11371| :pattern ( (MapType1Select (MapType0Select $h@@31 $o@@31) KMBtree.Node.repr)) )))
(assert (forall (($h@@32 T@U) ($o@@32 T@U) ) (!  (=> (and (= (type $h@@32) (MapType0Type refType MapType1Type)) (= (type $o@@32) refType)) (=> (and (and ($IsGoodHeap $h@@32) (and (not (= $o@@32 null)) (= (dtype $o@@32) Tclass.KMBtree.Node?))) (U_2_bool (MapType1Select (MapType0Select $h@@32 $o@@32) alloc))) ($IsAlloc (MapType1Select (MapType0Select $h@@32 $o@@32) KMBtree.Node.repr) (TSet Tclass._System.object) $h@@32))) :qid |DafnyPre.521:12| :skolemid |11372| :pattern ( (MapType1Select (MapType0Select $h@@32 $o@@32) KMBtree.Node.repr)) )))
(assert (forall (($h@@33 T@U) ($o@@33 T@U) ) (!  (=> (and (and (= (type $h@@33) (MapType0Type refType MapType1Type)) (= (type $o@@33) refType)) (and ($IsGoodHeap $h@@33) (and (not (= $o@@33 null)) (= (dtype $o@@33) Tclass.KMBtree.Node?)))) ($Is (MapType1Select (MapType0Select $h@@33 $o@@33) KMBtree.Node.height) Tclass._System.nat)) :qid |DafnyPre.521:12| :skolemid |11373| :pattern ( (MapType1Select (MapType0Select $h@@33 $o@@33) KMBtree.Node.height)) )))
(assert (forall (($h@@34 T@U) ($o@@34 T@U) ) (!  (=> (and (= (type $h@@34) (MapType0Type refType MapType1Type)) (= (type $o@@34) refType)) (=> (and (and ($IsGoodHeap $h@@34) (and (not (= $o@@34 null)) (= (dtype $o@@34) Tclass.KMBtree.Node?))) (U_2_bool (MapType1Select (MapType0Select $h@@34 $o@@34) alloc))) ($IsAlloc (MapType1Select (MapType0Select $h@@34 $o@@34) KMBtree.Node.height) Tclass._System.nat $h@@34))) :qid |DafnyPre.521:12| :skolemid |11374| :pattern ( (MapType1Select (MapType0Select $h@@34 $o@@34) KMBtree.Node.height)) )))
(assert (forall ((|c#0@@3| T@U) ) (!  (=> (= (type |c#0@@3|) refType) (and (=> ($Is |c#0@@3| Tclass.KMBtree.Node) (and ($Is |c#0@@3| Tclass.KMBtree.Node?) (not (= |c#0@@3| null)))) (=> (and ($Is |c#0@@3| Tclass.KMBtree.Node?) (not (= |c#0@@3| null))) ($Is |c#0@@3| Tclass.KMBtree.Node)))) :qid |unknown.0:0| :skolemid |11375| :pattern ( ($Is |c#0@@3| Tclass.KMBtree.Node)) )))
(assert (forall ((|c#0@@4| T@U) ($h@@35 T@U) ) (!  (=> (and (= (type |c#0@@4|) refType) (= (type $h@@35) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |c#0@@4| Tclass.KMBtree.Node $h@@35) ($IsAlloc |c#0@@4| Tclass.KMBtree.Node? $h@@35)) (=> ($IsAlloc |c#0@@4| Tclass.KMBtree.Node? $h@@35) ($IsAlloc |c#0@@4| Tclass.KMBtree.Node $h@@35)))) :qid |unknown.0:0| :skolemid |11376| :pattern ( ($IsAlloc |c#0@@4| Tclass.KMBtree.Node $h@@35)) )))
(assert (forall ((arg0@@253 Int) (arg1@@122 T@U) (arg2@@68 T@U) ) (! (= (type (|#KMBtree.NodeContents.Leaf| arg0@@253 arg1@@122 arg2@@68)) DatatypeTypeType) :qid |funType:#KMBtree.NodeContents.Leaf| :pattern ( (|#KMBtree.NodeContents.Leaf| arg0@@253 arg1@@122 arg2@@68)) )))
(assert (forall ((|a#0#0#0@@0| Int) (|a#0#1#0@@0| T@U) (|a#0#2#0| T@U) ) (!  (=> (and (= (type |a#0#1#0@@0|) refType) (= (type |a#0#2#0|) refType)) (= (DatatypeCtorId (|#KMBtree.NodeContents.Leaf| |a#0#0#0@@0| |a#0#1#0@@0| |a#0#2#0|)) |##KMBtree.NodeContents.Leaf|)) :qid |MutableB.40:12| :skolemid |11377| :pattern ( (|#KMBtree.NodeContents.Leaf| |a#0#0#0@@0| |a#0#1#0@@0| |a#0#2#0|)) )))
(assert (forall ((d@@18 T@U) ) (!  (=> (= (type d@@18) DatatypeTypeType) (and (=> (KMBtree.NodeContents.Leaf_q d@@18) (= (DatatypeCtorId d@@18) |##KMBtree.NodeContents.Leaf|)) (=> (= (DatatypeCtorId d@@18) |##KMBtree.NodeContents.Leaf|) (KMBtree.NodeContents.Leaf_q d@@18)))) :qid |unknown.0:0| :skolemid |11378| :pattern ( (KMBtree.NodeContents.Leaf_q d@@18)) )))
(assert (forall ((d@@19 T@U) ) (!  (=> (and (= (type d@@19) DatatypeTypeType) (KMBtree.NodeContents.Leaf_q d@@19)) (exists ((|a#1#0#0@@0| Int) (|a#1#1#0@@0| T@U) (|a#1#2#0| T@U) ) (!  (and (and (= (type |a#1#1#0@@0|) refType) (= (type |a#1#2#0|) refType)) (= d@@19 (|#KMBtree.NodeContents.Leaf| |a#1#0#0@@0| |a#1#1#0@@0| |a#1#2#0|))) :qid |MutableB.40:12| :skolemid |11379| :no-pattern (type |a#1#1#0@@0|) :no-pattern (type |a#1#2#0|) :no-pattern (U_2_int |a#1#1#0@@0|) :no-pattern (U_2_bool |a#1#1#0@@0|) :no-pattern (U_2_int |a#1#2#0|) :no-pattern (U_2_bool |a#1#2#0|) ))) :qid |unknown.0:0| :skolemid |11380| :pattern ( (KMBtree.NodeContents.Leaf_q d@@19)) )))
(assert (forall ((|a#2#0#0@@0| Int) (|a#2#1#0@@0| T@U) (|a#2#2#0| T@U) ) (!  (=> (and (= (type |a#2#1#0@@0|) refType) (= (type |a#2#2#0|) refType)) (and (=> ($Is (|#KMBtree.NodeContents.Leaf| |a#2#0#0@@0| |a#2#1#0@@0| |a#2#2#0|) Tclass.KMBtree.NodeContents) (and (and ($Is (int_2_U |a#2#0#0@@0|) Tclass.NativeTypes.uint64) ($Is |a#2#1#0@@0| (Tclass._System.array (TSeq Tclass.NativeTypes.byte)))) ($Is |a#2#2#0| (Tclass._System.array Tclass.ValueMessage.Message)))) (=> (and (and ($Is (int_2_U |a#2#0#0@@0|) Tclass.NativeTypes.uint64) ($Is |a#2#1#0@@0| (Tclass._System.array (TSeq Tclass.NativeTypes.byte)))) ($Is |a#2#2#0| (Tclass._System.array Tclass.ValueMessage.Message))) ($Is (|#KMBtree.NodeContents.Leaf| |a#2#0#0@@0| |a#2#1#0@@0| |a#2#2#0|) Tclass.KMBtree.NodeContents)))) :qid |MutableB.40:12| :skolemid |11381| :pattern ( ($Is (|#KMBtree.NodeContents.Leaf| |a#2#0#0@@0| |a#2#1#0@@0| |a#2#2#0|) Tclass.KMBtree.NodeContents)) )))
(assert (forall ((|a#3#0#0@@0| Int) (|a#3#1#0@@0| T@U) (|a#3#2#0| T@U) ($h@@36 T@U) ) (!  (=> (and (and (and (= (type |a#3#1#0@@0|) refType) (= (type |a#3#2#0|) refType)) (= (type $h@@36) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@36)) (and (=> ($IsAlloc (|#KMBtree.NodeContents.Leaf| |a#3#0#0@@0| |a#3#1#0@@0| |a#3#2#0|) Tclass.KMBtree.NodeContents $h@@36) (and (and ($IsAlloc (int_2_U |a#3#0#0@@0|) Tclass.NativeTypes.uint64 $h@@36) ($IsAlloc |a#3#1#0@@0| (Tclass._System.array (TSeq Tclass.NativeTypes.byte)) $h@@36)) ($IsAlloc |a#3#2#0| (Tclass._System.array Tclass.ValueMessage.Message) $h@@36))) (=> (and (and ($IsAlloc (int_2_U |a#3#0#0@@0|) Tclass.NativeTypes.uint64 $h@@36) ($IsAlloc |a#3#1#0@@0| (Tclass._System.array (TSeq Tclass.NativeTypes.byte)) $h@@36)) ($IsAlloc |a#3#2#0| (Tclass._System.array Tclass.ValueMessage.Message) $h@@36)) ($IsAlloc (|#KMBtree.NodeContents.Leaf| |a#3#0#0@@0| |a#3#1#0@@0| |a#3#2#0|) Tclass.KMBtree.NodeContents $h@@36)))) :qid |MutableB.40:12| :skolemid |11382| :pattern ( ($IsAlloc (|#KMBtree.NodeContents.Leaf| |a#3#0#0@@0| |a#3#1#0@@0| |a#3#2#0|) Tclass.KMBtree.NodeContents $h@@36)) )))
(assert (forall ((d@@20 T@U) ($h@@37 T@U) ) (!  (=> (and (and (= (type d@@20) DatatypeTypeType) (= (type $h@@37) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@37) (and (KMBtree.NodeContents.Leaf_q d@@20) ($IsAlloc d@@20 Tclass.KMBtree.NodeContents $h@@37)))) ($IsAlloc (int_2_U (KMBtree.NodeContents.nkeys d@@20)) Tclass.NativeTypes.uint64 $h@@37)) :qid |unknown.0:0| :skolemid |11383| :pattern ( ($IsAlloc (int_2_U (KMBtree.NodeContents.nkeys d@@20)) Tclass.NativeTypes.uint64 $h@@37)) )))
(assert (forall ((d@@21 T@U) ($h@@38 T@U) ) (!  (=> (and (and (= (type d@@21) DatatypeTypeType) (= (type $h@@38) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@38) (and (KMBtree.NodeContents.Leaf_q d@@21) ($IsAlloc d@@21 Tclass.KMBtree.NodeContents $h@@38)))) ($IsAlloc (KMBtree.NodeContents.keys d@@21) (Tclass._System.array (TSeq Tclass.NativeTypes.byte)) $h@@38)) :qid |unknown.0:0| :skolemid |11384| :pattern ( ($IsAlloc (KMBtree.NodeContents.keys d@@21) (Tclass._System.array (TSeq Tclass.NativeTypes.byte)) $h@@38)) )))
(assert (forall ((d@@22 T@U) ($h@@39 T@U) ) (!  (=> (and (and (= (type d@@22) DatatypeTypeType) (= (type $h@@39) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@39) (and (KMBtree.NodeContents.Leaf_q d@@22) ($IsAlloc d@@22 Tclass.KMBtree.NodeContents $h@@39)))) ($IsAlloc (KMBtree.NodeContents.values d@@22) (Tclass._System.array Tclass.ValueMessage.Message) $h@@39)) :qid |unknown.0:0| :skolemid |11385| :pattern ( ($IsAlloc (KMBtree.NodeContents.values d@@22) (Tclass._System.array Tclass.ValueMessage.Message) $h@@39)) )))
(assert (forall ((|a#4#0#0@@0| Int) (|a#4#1#0@@0| T@U) (|a#4#2#0| T@U) ) (!  (=> (and (= (type |a#4#1#0@@0|) refType) (= (type |a#4#2#0|) refType)) (= (|#KMBtree.NodeContents.Leaf| (LitInt |a#4#0#0@@0|) (Lit |a#4#1#0@@0|) (Lit |a#4#2#0|)) (Lit (|#KMBtree.NodeContents.Leaf| |a#4#0#0@@0| |a#4#1#0@@0| |a#4#2#0|)))) :qid |MutableB.40:12| :skolemid |11386| :pattern ( (|#KMBtree.NodeContents.Leaf| (LitInt |a#4#0#0@@0|) (Lit |a#4#1#0@@0|) (Lit |a#4#2#0|))) )))
(assert (forall ((|a#5#0#0@@0| Int) (|a#5#1#0@@0| T@U) (|a#5#2#0| T@U) ) (!  (=> (and (= (type |a#5#1#0@@0|) refType) (= (type |a#5#2#0|) refType)) (= (KMBtree.NodeContents.nkeys (|#KMBtree.NodeContents.Leaf| |a#5#0#0@@0| |a#5#1#0@@0| |a#5#2#0|)) |a#5#0#0@@0|)) :qid |MutableB.40:12| :skolemid |11387| :pattern ( (|#KMBtree.NodeContents.Leaf| |a#5#0#0@@0| |a#5#1#0@@0| |a#5#2#0|)) )))
(assert (forall ((|a#6#0#0@@0| Int) (|a#6#1#0@@0| T@U) (|a#6#2#0| T@U) ) (!  (=> (and (= (type |a#6#1#0@@0|) refType) (= (type |a#6#2#0|) refType)) (= (KMBtree.NodeContents.keys (|#KMBtree.NodeContents.Leaf| |a#6#0#0@@0| |a#6#1#0@@0| |a#6#2#0|)) |a#6#1#0@@0|)) :qid |MutableB.40:12| :skolemid |11388| :pattern ( (|#KMBtree.NodeContents.Leaf| |a#6#0#0@@0| |a#6#1#0@@0| |a#6#2#0|)) )))
(assert (forall ((|a#7#0#0@@0| Int) (|a#7#1#0@@0| T@U) (|a#7#2#0| T@U) ) (!  (=> (and (= (type |a#7#1#0@@0|) refType) (= (type |a#7#2#0|) refType)) (= (KMBtree.NodeContents.values (|#KMBtree.NodeContents.Leaf| |a#7#0#0@@0| |a#7#1#0@@0| |a#7#2#0|)) |a#7#2#0|)) :qid |MutableB.40:12| :skolemid |11389| :pattern ( (|#KMBtree.NodeContents.Leaf| |a#7#0#0@@0| |a#7#1#0@@0| |a#7#2#0|)) )))
(assert (forall ((arg0@@254 Int) (arg1@@123 T@U) (arg2@@69 T@U) ) (! (= (type (|#KMBtree.NodeContents.Index| arg0@@254 arg1@@123 arg2@@69)) DatatypeTypeType) :qid |funType:#KMBtree.NodeContents.Index| :pattern ( (|#KMBtree.NodeContents.Index| arg0@@254 arg1@@123 arg2@@69)) )))
(assert (forall ((|a#8#0#0@@0| Int) (|a#8#1#0@@0| T@U) (|a#8#2#0| T@U) ) (!  (=> (and (= (type |a#8#1#0@@0|) refType) (= (type |a#8#2#0|) refType)) (= (DatatypeCtorId (|#KMBtree.NodeContents.Index| |a#8#0#0@@0| |a#8#1#0@@0| |a#8#2#0|)) |##KMBtree.NodeContents.Index|)) :qid |MutableB.41:13| :skolemid |11390| :pattern ( (|#KMBtree.NodeContents.Index| |a#8#0#0@@0| |a#8#1#0@@0| |a#8#2#0|)) )))
(assert (forall ((d@@23 T@U) ) (!  (=> (= (type d@@23) DatatypeTypeType) (and (=> (KMBtree.NodeContents.Index_q d@@23) (= (DatatypeCtorId d@@23) |##KMBtree.NodeContents.Index|)) (=> (= (DatatypeCtorId d@@23) |##KMBtree.NodeContents.Index|) (KMBtree.NodeContents.Index_q d@@23)))) :qid |unknown.0:0| :skolemid |11391| :pattern ( (KMBtree.NodeContents.Index_q d@@23)) )))
(assert (forall ((d@@24 T@U) ) (!  (=> (and (= (type d@@24) DatatypeTypeType) (KMBtree.NodeContents.Index_q d@@24)) (exists ((|a#9#0#0@@0| Int) (|a#9#1#0@@0| T@U) (|a#9#2#0@@0| T@U) ) (!  (and (and (= (type |a#9#1#0@@0|) refType) (= (type |a#9#2#0@@0|) refType)) (= d@@24 (|#KMBtree.NodeContents.Index| |a#9#0#0@@0| |a#9#1#0@@0| |a#9#2#0@@0|))) :qid |MutableB.41:13| :skolemid |11392| :no-pattern (type |a#9#1#0@@0|) :no-pattern (type |a#9#2#0@@0|) :no-pattern (U_2_int |a#9#1#0@@0|) :no-pattern (U_2_bool |a#9#1#0@@0|) :no-pattern (U_2_int |a#9#2#0@@0|) :no-pattern (U_2_bool |a#9#2#0@@0|) ))) :qid |unknown.0:0| :skolemid |11393| :pattern ( (KMBtree.NodeContents.Index_q d@@24)) )))
(assert (forall ((|a#10#0#0@@0| Int) (|a#10#1#0@@0| T@U) (|a#10#2#0@@0| T@U) ) (!  (=> (and (= (type |a#10#1#0@@0|) refType) (= (type |a#10#2#0@@0|) refType)) (and (=> ($Is (|#KMBtree.NodeContents.Index| |a#10#0#0@@0| |a#10#1#0@@0| |a#10#2#0@@0|) Tclass.KMBtree.NodeContents) (and (and ($Is (int_2_U |a#10#0#0@@0|) Tclass.NativeTypes.uint64) ($Is |a#10#1#0@@0| (Tclass._System.array (TSeq Tclass.NativeTypes.byte)))) ($Is |a#10#2#0@@0| (Tclass._System.array Tclass.KMBtree.Node?)))) (=> (and (and ($Is (int_2_U |a#10#0#0@@0|) Tclass.NativeTypes.uint64) ($Is |a#10#1#0@@0| (Tclass._System.array (TSeq Tclass.NativeTypes.byte)))) ($Is |a#10#2#0@@0| (Tclass._System.array Tclass.KMBtree.Node?))) ($Is (|#KMBtree.NodeContents.Index| |a#10#0#0@@0| |a#10#1#0@@0| |a#10#2#0@@0|) Tclass.KMBtree.NodeContents)))) :qid |MutableB.41:13| :skolemid |11394| :pattern ( ($Is (|#KMBtree.NodeContents.Index| |a#10#0#0@@0| |a#10#1#0@@0| |a#10#2#0@@0|) Tclass.KMBtree.NodeContents)) )))
(assert (forall ((|a#11#0#0@@0| Int) (|a#11#1#0@@0| T@U) (|a#11#2#0@@0| T@U) ($h@@40 T@U) ) (!  (=> (and (and (and (= (type |a#11#1#0@@0|) refType) (= (type |a#11#2#0@@0|) refType)) (= (type $h@@40) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@40)) (and (=> ($IsAlloc (|#KMBtree.NodeContents.Index| |a#11#0#0@@0| |a#11#1#0@@0| |a#11#2#0@@0|) Tclass.KMBtree.NodeContents $h@@40) (and (and ($IsAlloc (int_2_U |a#11#0#0@@0|) Tclass.NativeTypes.uint64 $h@@40) ($IsAlloc |a#11#1#0@@0| (Tclass._System.array (TSeq Tclass.NativeTypes.byte)) $h@@40)) ($IsAlloc |a#11#2#0@@0| (Tclass._System.array Tclass.KMBtree.Node?) $h@@40))) (=> (and (and ($IsAlloc (int_2_U |a#11#0#0@@0|) Tclass.NativeTypes.uint64 $h@@40) ($IsAlloc |a#11#1#0@@0| (Tclass._System.array (TSeq Tclass.NativeTypes.byte)) $h@@40)) ($IsAlloc |a#11#2#0@@0| (Tclass._System.array Tclass.KMBtree.Node?) $h@@40)) ($IsAlloc (|#KMBtree.NodeContents.Index| |a#11#0#0@@0| |a#11#1#0@@0| |a#11#2#0@@0|) Tclass.KMBtree.NodeContents $h@@40)))) :qid |MutableB.41:13| :skolemid |11395| :pattern ( ($IsAlloc (|#KMBtree.NodeContents.Index| |a#11#0#0@@0| |a#11#1#0@@0| |a#11#2#0@@0|) Tclass.KMBtree.NodeContents $h@@40)) )))
(assert (forall ((d@@25 T@U) ($h@@41 T@U) ) (!  (=> (and (and (= (type d@@25) DatatypeTypeType) (= (type $h@@41) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@41) (and (KMBtree.NodeContents.Index_q d@@25) ($IsAlloc d@@25 Tclass.KMBtree.NodeContents $h@@41)))) ($IsAlloc (int_2_U (KMBtree.NodeContents.nchildren d@@25)) Tclass.NativeTypes.uint64 $h@@41)) :qid |unknown.0:0| :skolemid |11396| :pattern ( ($IsAlloc (int_2_U (KMBtree.NodeContents.nchildren d@@25)) Tclass.NativeTypes.uint64 $h@@41)) )))
(assert (forall ((d@@26 T@U) ($h@@42 T@U) ) (!  (=> (and (and (= (type d@@26) DatatypeTypeType) (= (type $h@@42) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@42) (and (KMBtree.NodeContents.Index_q d@@26) ($IsAlloc d@@26 Tclass.KMBtree.NodeContents $h@@42)))) ($IsAlloc (KMBtree.NodeContents.pivots d@@26) (Tclass._System.array (TSeq Tclass.NativeTypes.byte)) $h@@42)) :qid |unknown.0:0| :skolemid |11397| :pattern ( ($IsAlloc (KMBtree.NodeContents.pivots d@@26) (Tclass._System.array (TSeq Tclass.NativeTypes.byte)) $h@@42)) )))
(assert (forall ((d@@27 T@U) ($h@@43 T@U) ) (!  (=> (and (and (= (type d@@27) DatatypeTypeType) (= (type $h@@43) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@43) (and (KMBtree.NodeContents.Index_q d@@27) ($IsAlloc d@@27 Tclass.KMBtree.NodeContents $h@@43)))) ($IsAlloc (KMBtree.NodeContents.children d@@27) (Tclass._System.array Tclass.KMBtree.Node?) $h@@43)) :qid |unknown.0:0| :skolemid |11398| :pattern ( ($IsAlloc (KMBtree.NodeContents.children d@@27) (Tclass._System.array Tclass.KMBtree.Node?) $h@@43)) )))
(assert (forall ((|a#12#0#0@@0| Int) (|a#12#1#0@@0| T@U) (|a#12#2#0@@0| T@U) ) (!  (=> (and (= (type |a#12#1#0@@0|) refType) (= (type |a#12#2#0@@0|) refType)) (= (|#KMBtree.NodeContents.Index| (LitInt |a#12#0#0@@0|) (Lit |a#12#1#0@@0|) (Lit |a#12#2#0@@0|)) (Lit (|#KMBtree.NodeContents.Index| |a#12#0#0@@0| |a#12#1#0@@0| |a#12#2#0@@0|)))) :qid |MutableB.41:13| :skolemid |11399| :pattern ( (|#KMBtree.NodeContents.Index| (LitInt |a#12#0#0@@0|) (Lit |a#12#1#0@@0|) (Lit |a#12#2#0@@0|))) )))
(assert (forall ((|a#13#0#0@@0| Int) (|a#13#1#0@@0| T@U) (|a#13#2#0@@0| T@U) ) (!  (=> (and (= (type |a#13#1#0@@0|) refType) (= (type |a#13#2#0@@0|) refType)) (= (KMBtree.NodeContents.nchildren (|#KMBtree.NodeContents.Index| |a#13#0#0@@0| |a#13#1#0@@0| |a#13#2#0@@0|)) |a#13#0#0@@0|)) :qid |MutableB.41:13| :skolemid |11400| :pattern ( (|#KMBtree.NodeContents.Index| |a#13#0#0@@0| |a#13#1#0@@0| |a#13#2#0@@0|)) )))
(assert (forall ((|a#14#0#0@@0| Int) (|a#14#1#0@@0| T@U) (|a#14#2#0@@0| T@U) ) (!  (=> (and (= (type |a#14#1#0@@0|) refType) (= (type |a#14#2#0@@0|) refType)) (= (KMBtree.NodeContents.pivots (|#KMBtree.NodeContents.Index| |a#14#0#0@@0| |a#14#1#0@@0| |a#14#2#0@@0|)) |a#14#1#0@@0|)) :qid |MutableB.41:13| :skolemid |11401| :pattern ( (|#KMBtree.NodeContents.Index| |a#14#0#0@@0| |a#14#1#0@@0| |a#14#2#0@@0|)) )))
(assert (forall ((|a#15#0#0@@0| Int) (|a#15#1#0@@0| T@U) (|a#15#2#0@@0| T@U) ) (!  (=> (and (= (type |a#15#1#0@@0|) refType) (= (type |a#15#2#0@@0|) refType)) (= (KMBtree.NodeContents.children (|#KMBtree.NodeContents.Index| |a#15#0#0@@0| |a#15#1#0@@0| |a#15#2#0@@0|)) |a#15#2#0@@0|)) :qid |MutableB.41:13| :skolemid |11402| :pattern ( (|#KMBtree.NodeContents.Index| |a#15#0#0@@0| |a#15#1#0@@0| |a#15#2#0@@0|)) )))
(assert (forall ((d@@28 T@U) ) (!  (=> (and (= (type d@@28) DatatypeTypeType) (|$IsA#KMBtree.NodeContents| d@@28)) (or (KMBtree.NodeContents.Leaf_q d@@28) (KMBtree.NodeContents.Index_q d@@28))) :qid |unknown.0:0| :skolemid |11403| :pattern ( (|$IsA#KMBtree.NodeContents| d@@28)) )))
(assert (forall ((d@@29 T@U) ) (!  (=> (and (= (type d@@29) DatatypeTypeType) ($Is d@@29 Tclass.KMBtree.NodeContents)) (or (KMBtree.NodeContents.Leaf_q d@@29) (KMBtree.NodeContents.Index_q d@@29))) :qid |unknown.0:0| :skolemid |11404| :pattern ( (KMBtree.NodeContents.Index_q d@@29) ($Is d@@29 Tclass.KMBtree.NodeContents)) :pattern ( (KMBtree.NodeContents.Leaf_q d@@29) ($Is d@@29 Tclass.KMBtree.NodeContents)) )))
(assert (forall ((a@@118 T@U) (b@@67 T@U) ) (!  (=> (and (and (= (type a@@118) DatatypeTypeType) (= (type b@@67) DatatypeTypeType)) (and (KMBtree.NodeContents.Leaf_q a@@118) (KMBtree.NodeContents.Leaf_q b@@67))) (and (=> (|KMBtree.NodeContents#Equal| a@@118 b@@67) (and (and (= (KMBtree.NodeContents.nkeys a@@118) (KMBtree.NodeContents.nkeys b@@67)) (= (KMBtree.NodeContents.keys a@@118) (KMBtree.NodeContents.keys b@@67))) (= (KMBtree.NodeContents.values a@@118) (KMBtree.NodeContents.values b@@67)))) (=> (and (and (= (KMBtree.NodeContents.nkeys a@@118) (KMBtree.NodeContents.nkeys b@@67)) (= (KMBtree.NodeContents.keys a@@118) (KMBtree.NodeContents.keys b@@67))) (= (KMBtree.NodeContents.values a@@118) (KMBtree.NodeContents.values b@@67))) (|KMBtree.NodeContents#Equal| a@@118 b@@67)))) :qid |unknown.0:0| :skolemid |11405| :pattern ( (|KMBtree.NodeContents#Equal| a@@118 b@@67) (KMBtree.NodeContents.Leaf_q a@@118)) :pattern ( (|KMBtree.NodeContents#Equal| a@@118 b@@67) (KMBtree.NodeContents.Leaf_q b@@67)) )))
(assert (forall ((a@@119 T@U) (b@@68 T@U) ) (!  (=> (and (and (= (type a@@119) DatatypeTypeType) (= (type b@@68) DatatypeTypeType)) (and (KMBtree.NodeContents.Index_q a@@119) (KMBtree.NodeContents.Index_q b@@68))) (and (=> (|KMBtree.NodeContents#Equal| a@@119 b@@68) (and (and (= (KMBtree.NodeContents.nchildren a@@119) (KMBtree.NodeContents.nchildren b@@68)) (= (KMBtree.NodeContents.pivots a@@119) (KMBtree.NodeContents.pivots b@@68))) (= (KMBtree.NodeContents.children a@@119) (KMBtree.NodeContents.children b@@68)))) (=> (and (and (= (KMBtree.NodeContents.nchildren a@@119) (KMBtree.NodeContents.nchildren b@@68)) (= (KMBtree.NodeContents.pivots a@@119) (KMBtree.NodeContents.pivots b@@68))) (= (KMBtree.NodeContents.children a@@119) (KMBtree.NodeContents.children b@@68))) (|KMBtree.NodeContents#Equal| a@@119 b@@68)))) :qid |unknown.0:0| :skolemid |11406| :pattern ( (|KMBtree.NodeContents#Equal| a@@119 b@@68) (KMBtree.NodeContents.Index_q a@@119)) :pattern ( (|KMBtree.NodeContents#Equal| a@@119 b@@68) (KMBtree.NodeContents.Index_q b@@68)) )))
(assert (forall ((a@@120 T@U) (b@@69 T@U) ) (!  (=> (and (= (type a@@120) DatatypeTypeType) (= (type b@@69) DatatypeTypeType)) (and (=> (|KMBtree.NodeContents#Equal| a@@120 b@@69) (= a@@120 b@@69)) (=> (= a@@120 b@@69) (|KMBtree.NodeContents#Equal| a@@120 b@@69)))) :qid |unknown.0:0| :skolemid |11407| :pattern ( (|KMBtree.NodeContents#Equal| a@@120 b@@69)) )))
(assert (= (type |#Options.Option.None|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#Options.Option.None|) |##Options.Option.None|))
(assert (forall ((d@@30 T@U) ) (!  (=> (= (type d@@30) DatatypeTypeType) (and (=> (Options.Option.None_q d@@30) (= (DatatypeCtorId d@@30) |##Options.Option.None|)) (=> (= (DatatypeCtorId d@@30) |##Options.Option.None|) (Options.Option.None_q d@@30)))) :qid |unknown.0:0| :skolemid |11408| :pattern ( (Options.Option.None_q d@@30)) )))
(assert (forall ((d@@31 T@U) ) (!  (=> (and (= (type d@@31) DatatypeTypeType) (Options.Option.None_q d@@31)) (= d@@31 |#Options.Option.None|)) :qid |unknown.0:0| :skolemid |11409| :pattern ( (Options.Option.None_q d@@31)) )))
(assert (forall ((Options.Option$V@@2 T@U) ) (!  (=> (= (type Options.Option$V@@2) TyType) ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) :qid |unknown.0:0| :skolemid |11410| :pattern ( ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) )))
(assert (forall ((Options.Option$V@@3 T@U) ($h@@44 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@3) TyType) (= (type $h@@44) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@44)) ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@44)) :qid |unknown.0:0| :skolemid |11411| :pattern ( ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@44)) )))
(assert (= |#Options.Option.None| (Lit |#Options.Option.None|)))
(assert (forall ((arg0@@255 T@U) ) (! (= (type (|#Options.Option.Some| arg0@@255)) DatatypeTypeType) :qid |funType:#Options.Option.Some| :pattern ( (|#Options.Option.Some| arg0@@255)) )))
(assert (forall ((|a#21#0#0@@0| T@U) ) (!  (=> (= (type |a#21#0#0@@0|) BoxType) (= (DatatypeCtorId (|#Options.Option.Some| |a#21#0#0@@0|)) |##Options.Option.Some|)) :qid |Optionsd.2:36| :skolemid |11412| :pattern ( (|#Options.Option.Some| |a#21#0#0@@0|)) )))
(assert (forall ((d@@32 T@U) ) (!  (=> (= (type d@@32) DatatypeTypeType) (and (=> (Options.Option.Some_q d@@32) (= (DatatypeCtorId d@@32) |##Options.Option.Some|)) (=> (= (DatatypeCtorId d@@32) |##Options.Option.Some|) (Options.Option.Some_q d@@32)))) :qid |unknown.0:0| :skolemid |11413| :pattern ( (Options.Option.Some_q d@@32)) )))
(assert (forall ((d@@33 T@U) ) (!  (=> (and (= (type d@@33) DatatypeTypeType) (Options.Option.Some_q d@@33)) (exists ((|a#22#0#0| T@U) ) (!  (and (= (type |a#22#0#0|) BoxType) (= d@@33 (|#Options.Option.Some| |a#22#0#0|))) :qid |Optionsd.2:36| :skolemid |11414| :no-pattern (type |a#22#0#0|) :no-pattern (U_2_int |a#22#0#0|) :no-pattern (U_2_bool |a#22#0#0|) ))) :qid |unknown.0:0| :skolemid |11415| :pattern ( (Options.Option.Some_q d@@33)) )))
(assert (forall ((Options.Option$V@@4 T@U) (|a#23#0#0| T@U) ) (!  (=> (and (= (type Options.Option$V@@4) TyType) (= (type |a#23#0#0|) BoxType)) (and (=> ($Is (|#Options.Option.Some| |a#23#0#0|) (Tclass.Options.Option Options.Option$V@@4)) ($IsBox |a#23#0#0| Options.Option$V@@4)) (=> ($IsBox |a#23#0#0| Options.Option$V@@4) ($Is (|#Options.Option.Some| |a#23#0#0|) (Tclass.Options.Option Options.Option$V@@4))))) :qid |unknown.0:0| :skolemid |11416| :pattern ( ($Is (|#Options.Option.Some| |a#23#0#0|) (Tclass.Options.Option Options.Option$V@@4))) )))
(assert (forall ((Options.Option$V@@5 T@U) (|a#24#0#0| T@U) ($h@@45 T@U) ) (!  (=> (and (and (and (= (type Options.Option$V@@5) TyType) (= (type |a#24#0#0|) BoxType)) (= (type $h@@45) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@45)) (and (=> ($IsAlloc (|#Options.Option.Some| |a#24#0#0|) (Tclass.Options.Option Options.Option$V@@5) $h@@45) ($IsAllocBox |a#24#0#0| Options.Option$V@@5 $h@@45)) (=> ($IsAllocBox |a#24#0#0| Options.Option$V@@5 $h@@45) ($IsAlloc (|#Options.Option.Some| |a#24#0#0|) (Tclass.Options.Option Options.Option$V@@5) $h@@45)))) :qid |unknown.0:0| :skolemid |11417| :pattern ( ($IsAlloc (|#Options.Option.Some| |a#24#0#0|) (Tclass.Options.Option Options.Option$V@@5) $h@@45)) )))
(assert (forall ((arg0@@256 T@U) ) (! (= (type (Options.Option.value arg0@@256)) BoxType) :qid |funType:Options.Option.value| :pattern ( (Options.Option.value arg0@@256)) )))
(assert (forall ((d@@34 T@U) (Options.Option$V@@6 T@U) ($h@@46 T@U) ) (!  (=> (and (and (and (= (type d@@34) DatatypeTypeType) (= (type Options.Option$V@@6) TyType)) (= (type $h@@46) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@46) (and (Options.Option.Some_q d@@34) ($IsAlloc d@@34 (Tclass.Options.Option Options.Option$V@@6) $h@@46)))) ($IsAllocBox (Options.Option.value d@@34) Options.Option$V@@6 $h@@46)) :qid |unknown.0:0| :skolemid |11418| :pattern ( ($IsAllocBox (Options.Option.value d@@34) Options.Option$V@@6 $h@@46)) )))
(assert (forall ((|a#25#0#0| T@U) ) (!  (=> (= (type |a#25#0#0|) BoxType) (= (|#Options.Option.Some| (Lit |a#25#0#0|)) (Lit (|#Options.Option.Some| |a#25#0#0|)))) :qid |Optionsd.2:36| :skolemid |11419| :pattern ( (|#Options.Option.Some| (Lit |a#25#0#0|))) )))
(assert (forall ((|a#26#0#0| T@U) ) (!  (=> (= (type |a#26#0#0|) BoxType) (= (Options.Option.value (|#Options.Option.Some| |a#26#0#0|)) |a#26#0#0|)) :qid |Optionsd.2:36| :skolemid |11420| :pattern ( (|#Options.Option.Some| |a#26#0#0|)) )))
(assert (forall ((|a#27#0#0| T@U) ) (!  (=> (= (type |a#27#0#0|) BoxType) (< (BoxRank |a#27#0#0|) (DtRank (|#Options.Option.Some| |a#27#0#0|)))) :qid |Optionsd.2:36| :skolemid |11421| :pattern ( (|#Options.Option.Some| |a#27#0#0|)) )))
(assert (forall ((d@@35 T@U) ) (!  (=> (and (= (type d@@35) DatatypeTypeType) (|$IsA#Options.Option| d@@35)) (or (Options.Option.None_q d@@35) (Options.Option.Some_q d@@35))) :qid |unknown.0:0| :skolemid |11422| :pattern ( (|$IsA#Options.Option| d@@35)) )))
(assert (forall ((Options.Option$V@@7 T@U) (d@@36 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@7) TyType) (= (type d@@36) DatatypeTypeType)) ($Is d@@36 (Tclass.Options.Option Options.Option$V@@7))) (or (Options.Option.None_q d@@36) (Options.Option.Some_q d@@36))) :qid |unknown.0:0| :skolemid |11423| :pattern ( (Options.Option.Some_q d@@36) ($Is d@@36 (Tclass.Options.Option Options.Option$V@@7))) :pattern ( (Options.Option.None_q d@@36) ($Is d@@36 (Tclass.Options.Option Options.Option$V@@7))) )))
(assert (forall ((a@@121 T@U) (b@@70 T@U) ) (!  (=> (and (and (= (type a@@121) DatatypeTypeType) (= (type b@@70) DatatypeTypeType)) (and (Options.Option.None_q a@@121) (Options.Option.None_q b@@70))) (and (=> (|Options.Option#Equal| a@@121 b@@70) true) (=> true (|Options.Option#Equal| a@@121 b@@70)))) :qid |unknown.0:0| :skolemid |11424| :pattern ( (|Options.Option#Equal| a@@121 b@@70) (Options.Option.None_q a@@121)) :pattern ( (|Options.Option#Equal| a@@121 b@@70) (Options.Option.None_q b@@70)) )))
(assert (forall ((a@@122 T@U) (b@@71 T@U) ) (!  (=> (and (and (= (type a@@122) DatatypeTypeType) (= (type b@@71) DatatypeTypeType)) (and (Options.Option.Some_q a@@122) (Options.Option.Some_q b@@71))) (and (=> (|Options.Option#Equal| a@@122 b@@71) (= (Options.Option.value a@@122) (Options.Option.value b@@71))) (=> (= (Options.Option.value a@@122) (Options.Option.value b@@71)) (|Options.Option#Equal| a@@122 b@@71)))) :qid |unknown.0:0| :skolemid |11425| :pattern ( (|Options.Option#Equal| a@@122 b@@71) (Options.Option.Some_q a@@122)) :pattern ( (|Options.Option#Equal| a@@122 b@@71) (Options.Option.Some_q b@@71)) )))
(assert (forall ((a@@123 T@U) (b@@72 T@U) ) (!  (=> (and (= (type a@@123) DatatypeTypeType) (= (type b@@72) DatatypeTypeType)) (and (=> (|Options.Option#Equal| a@@123 b@@72) (= a@@123 b@@72)) (=> (= a@@123 b@@72) (|Options.Option#Equal| a@@123 b@@72)))) :qid |unknown.0:0| :skolemid |11426| :pattern ( (|Options.Option#Equal| a@@123 b@@72)) )))
(assert (= (type Tclass.Options.__default) TyType))
(assert (= (Tag Tclass.Options.__default) Tagclass.Options.__default))
(assert (forall ((bx@@87 T@U) ) (!  (=> (and (= (type bx@@87) BoxType) ($IsBox bx@@87 Tclass.Options.__default)) (and (= ($Box ($Unbox refType bx@@87)) bx@@87) ($Is ($Unbox refType bx@@87) Tclass.Options.__default))) :qid |unknown.0:0| :skolemid |11427| :pattern ( ($IsBox bx@@87 Tclass.Options.__default)) )))
(assert (forall (($o@@35 T@U) ) (!  (=> (= (type $o@@35) refType) (and (=> ($Is $o@@35 Tclass.Options.__default) (or (= $o@@35 null) (= (dtype $o@@35) Tclass.Options.__default))) (=> (or (= $o@@35 null) (= (dtype $o@@35) Tclass.Options.__default)) ($Is $o@@35 Tclass.Options.__default)))) :qid |unknown.0:0| :skolemid |11428| :pattern ( ($Is $o@@35 Tclass.Options.__default)) )))
(assert (forall (($o@@36 T@U) ($h@@47 T@U) ) (!  (=> (and (= (type $o@@36) refType) (= (type $h@@47) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@36 Tclass.Options.__default $h@@47) (or (= $o@@36 null) (U_2_bool (MapType1Select (MapType0Select $h@@47 $o@@36) alloc)))) (=> (or (= $o@@36 null) (U_2_bool (MapType1Select (MapType0Select $h@@47 $o@@36) alloc))) ($IsAlloc $o@@36 Tclass.Options.__default $h@@47)))) :qid |unknown.0:0| :skolemid |11429| :pattern ( ($IsAlloc $o@@36 Tclass.Options.__default $h@@47)) )))
(assert (forall ((arg0@@257 T@U) (arg1@@124 T@U) (arg2@@70 T@U) (arg3@@44 T@U) (arg4@@29 T@U) ) (! (= (type (Options.__default.MapOption arg0@@257 arg1@@124 arg2@@70 arg3@@44 arg4@@29)) DatatypeTypeType) :qid |funType:Options.__default.MapOption| :pattern ( (Options.__default.MapOption arg0@@257 arg1@@124 arg2@@70 arg3@@44 arg4@@29)) )))
(assert (forall ((Options._default.MapOption$V0 T@U) (Options._default.MapOption$V1 T@U) ($h0@@15 T@U) ($h1@@15 T@U) (|opt#0| T@U) (|f#0@@19| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.MapOption$V0) TyType) (= (type Options._default.MapOption$V1) TyType)) (= (type $h0@@15) (MapType0Type refType MapType1Type))) (= (type $h1@@15) (MapType0Type refType MapType1Type))) (= (type |opt#0|) DatatypeTypeType)) (= (type |f#0@@19|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@15) ($IsGoodHeap $h1@@15)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0 Options._default.MapOption$V1 $h0@@15 |opt#0| |f#0@@19|) (and ($Is |opt#0| (Tclass.Options.Option Options._default.MapOption$V0)) ($Is |f#0@@19| (Tclass._System.___hFunc1 Options._default.MapOption$V0 Options._default.MapOption$V1))))) (and ($IsHeapAnchor $h0@@15) ($HeapSucc $h0@@15 $h1@@15)))) (forall (($o@@37 T@U) ($f@@15 T@U) ) (! (let ((alpha@@22 (FieldTypeInv0 (type $f@@15)))) (=> (and (and (= (type $o@@37) refType) (= (type $f@@15) (FieldType alpha@@22))) (and (not (= $o@@37 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0|) (Reads1 Options._default.MapOption$V0 Options._default.MapOption$V1 $h0@@15 |f#0@@19| (Options.Option.value |opt#0|)) (|Set#Empty| BoxType)) ($Box $o@@37))))) (= (MapType1Select (MapType0Select $h0@@15 $o@@37) $f@@15) (MapType1Select (MapType0Select $h1@@15 $o@@37) $f@@15)))) :qid |unknown.0:0| :skolemid |11430| :no-pattern (type $o@@37) :no-pattern (type $f@@15) :no-pattern (U_2_int $o@@37) :no-pattern (U_2_bool $o@@37) :no-pattern (U_2_int $f@@15) :no-pattern (U_2_bool $f@@15) ))) (= (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h0@@15 |opt#0| |f#0@@19|) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1@@15 |opt#0| |f#0@@19|))) :qid |unknown.0:0| :skolemid |11431| :pattern ( ($IsHeapAnchor $h0@@15) ($HeapSucc $h0@@15 $h1@@15) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1@@15 |opt#0| |f#0@@19|)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@0 T@U) (Options._default.MapOption$V1@@0 T@U) ($Heap@@61 T@U) (|opt#0@@0| T@U) (|f#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@0) TyType) (= (type Options._default.MapOption$V1@@0) TyType)) (= (type $Heap@@61) (MapType0Type refType MapType1Type))) (= (type |opt#0@@0|) DatatypeTypeType)) (= (type |f#0@@20|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@61 |opt#0@@0| |f#0@@20|) (and (and (and ($IsGoodHeap $Heap@@61) ($Is |opt#0@@0| (Tclass.Options.Option Options._default.MapOption$V0@@0))) ($Is |f#0@@20| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0))) (=> (Options.Option.Some_q |opt#0@@0|) (Requires1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@61 |f#0@@20| (Options.Option.value |opt#0@@0|)))))) (and (and (and (=> (Options.Option.Some_q |opt#0@@0|) (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@61 |opt#0@@0| |f#0@@20|))) (=> (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@61 |opt#0@@0| |f#0@@20|)) (Options.Option.Some_q |opt#0@@0|))) (=> (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@61 |opt#0@@0| |f#0@@20|)) (= (Options.Option.value (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@61 |opt#0@@0| |f#0@@20|)) (Apply1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@61 |f#0@@20| (Options.Option.value |opt#0@@0|))))) ($Is (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@61 |opt#0@@0| |f#0@@20|) (Tclass.Options.Option Options._default.MapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |11432| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@61 |opt#0@@0| |f#0@@20|)) ))))
(assert (forall ((Options._default.MapOption$V0@@1 T@U) (Options._default.MapOption$V1@@1 T@U) ($Heap@@62 T@U) (|opt#0@@1| T@U) (|f#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@1) TyType) (= (type Options._default.MapOption$V1@@1) TyType)) (= (type $Heap@@62) (MapType0Type refType MapType1Type))) (= (type |opt#0@@1|) DatatypeTypeType)) (= (type |f#0@@21|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@62) ($Is |opt#0@@1| (Tclass.Options.Option Options._default.MapOption$V0@@1))) ($Is |f#0@@21| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1)))) (and (=> (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@62 |opt#0@@1| |f#0@@21|) (=> (Options.Option.Some_q |opt#0@@1|) (Requires1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@62 |f#0@@21| (Options.Option.value |opt#0@@1|)))) (=> (=> (Options.Option.Some_q |opt#0@@1|) (Requires1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@62 |f#0@@21| (Options.Option.value |opt#0@@1|))) (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@62 |opt#0@@1| |f#0@@21|)))) :qid |unknown.0:0| :skolemid |11433| :pattern ( (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@62 |opt#0@@1| |f#0@@21|)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@2 T@U) (Options._default.MapOption$V1@@2 T@U) ($Heap@@63 T@U) (|opt#0@@2| T@U) (|f#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@2) TyType) (= (type Options._default.MapOption$V1@@2) TyType)) (= (type $Heap@@63) (MapType0Type refType MapType1Type))) (= (type |opt#0@@2|) DatatypeTypeType)) (= (type |f#0@@22|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@63 |opt#0@@2| |f#0@@22|) (and (and (and ($IsGoodHeap $Heap@@63) ($Is |opt#0@@2| (Tclass.Options.Option Options._default.MapOption$V0@@2))) ($Is |f#0@@22| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2))) (=> (Options.Option.Some_q |opt#0@@2|) (Requires1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@63 |f#0@@22| (Options.Option.value |opt#0@@2|)))))) (= (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@63 |opt#0@@2| |f#0@@22|) (ite (Options.Option.None_q |opt#0@@2|) |#Options.Option.None| (let ((|v#3| (Options.Option.value |opt#0@@2|))) (|#Options.Option.Some| (Apply1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@63 |f#0@@22| |v#3|)))))) :qid |unknown.0:0| :skolemid |11434| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@63 |opt#0@@2| |f#0@@22|)) ))))
(assert (forall ((arg0@@258 T@U) (arg1@@125 T@U) (arg2@@71 T@U) (arg3@@45 T@U) (arg4@@30 T@U) ) (! (= (type (Options.__default.FlatMapOption arg0@@258 arg1@@125 arg2@@71 arg3@@45 arg4@@30)) DatatypeTypeType) :qid |funType:Options.__default.FlatMapOption| :pattern ( (Options.__default.FlatMapOption arg0@@258 arg1@@125 arg2@@71 arg3@@45 arg4@@30)) )))
(assert (forall ((Options._default.FlatMapOption$V0 T@U) (Options._default.FlatMapOption$V1 T@U) ($h0@@16 T@U) ($h1@@16 T@U) (|opt#0@@3| T@U) (|f#0@@23| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.FlatMapOption$V0) TyType) (= (type Options._default.FlatMapOption$V1) TyType)) (= (type $h0@@16) (MapType0Type refType MapType1Type))) (= (type $h1@@16) (MapType0Type refType MapType1Type))) (= (type |opt#0@@3|) DatatypeTypeType)) (= (type |f#0@@23|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@16) ($IsGoodHeap $h1@@16)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@16 |opt#0@@3| |f#0@@23|) (and ($Is |opt#0@@3| (Tclass.Options.Option Options._default.FlatMapOption$V0)) ($Is |f#0@@23| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1)))))) (and ($IsHeapAnchor $h0@@16) ($HeapSucc $h0@@16 $h1@@16)))) (forall (($o@@38 T@U) ($f@@16 T@U) ) (! (let ((alpha@@23 (FieldTypeInv0 (type $f@@16)))) (=> (and (and (= (type $o@@38) refType) (= (type $f@@16) (FieldType alpha@@23))) (and (not (= $o@@38 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0@@3|) (Reads1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1) $h0@@16 |f#0@@23| (Options.Option.value |opt#0@@3|)) (|Set#Empty| BoxType)) ($Box $o@@38))))) (= (MapType1Select (MapType0Select $h0@@16 $o@@38) $f@@16) (MapType1Select (MapType0Select $h1@@16 $o@@38) $f@@16)))) :qid |unknown.0:0| :skolemid |11435| :no-pattern (type $o@@38) :no-pattern (type $f@@16) :no-pattern (U_2_int $o@@38) :no-pattern (U_2_bool $o@@38) :no-pattern (U_2_int $f@@16) :no-pattern (U_2_bool $f@@16) ))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@16 |opt#0@@3| |f#0@@23|) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@16 |opt#0@@3| |f#0@@23|))) :qid |unknown.0:0| :skolemid |11436| :pattern ( ($IsHeapAnchor $h0@@16) ($HeapSucc $h0@@16 $h1@@16) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@16 |opt#0@@3| |f#0@@23|)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@0 T@U) (Options._default.FlatMapOption$V1@@0 T@U) ($Heap@@64 T@U) (|opt#0@@4| T@U) (|f#0@@24| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@0) TyType) (= (type Options._default.FlatMapOption$V1@@0) TyType)) (= (type $Heap@@64) (MapType0Type refType MapType1Type))) (= (type |opt#0@@4|) DatatypeTypeType)) (= (type |f#0@@24|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@64 |opt#0@@4| |f#0@@24|) (and (and (and ($IsGoodHeap $Heap@@64) ($Is |opt#0@@4| (Tclass.Options.Option Options._default.FlatMapOption$V0@@0))) ($Is |f#0@@24| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) (=> (Options.Option.Some_q |opt#0@@4|) (Requires1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@64 |f#0@@24| (Options.Option.value |opt#0@@4|)))))) (and (and (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@64 |f#0@@24| (Options.Option.value |opt#0@@4|))))) (Options.Option.Some_q (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@64 |opt#0@@4| |f#0@@24|))) (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@64 |f#0@@24| (Options.Option.value |opt#0@@4|))))) (= (Options.Option.value (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@64 |opt#0@@4| |f#0@@24|)) (Options.Option.value ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@64 |f#0@@24| (Options.Option.value |opt#0@@4|))))))) ($Is (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@64 |opt#0@@4| |f#0@@24|) (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |11437| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@64 |opt#0@@4| |f#0@@24|)) ))))
(assert (forall ((Options._default.FlatMapOption$V0@@1 T@U) (Options._default.FlatMapOption$V1@@1 T@U) ($Heap@@65 T@U) (|opt#0@@5| T@U) (|f#0@@25| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@1) TyType) (= (type Options._default.FlatMapOption$V1@@1) TyType)) (= (type $Heap@@65) (MapType0Type refType MapType1Type))) (= (type |opt#0@@5|) DatatypeTypeType)) (= (type |f#0@@25|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@65) ($Is |opt#0@@5| (Tclass.Options.Option Options._default.FlatMapOption$V0@@1))) ($Is |f#0@@25| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1))))) (and (=> (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@65 |opt#0@@5| |f#0@@25|) (=> (Options.Option.Some_q |opt#0@@5|) (Requires1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1) $Heap@@65 |f#0@@25| (Options.Option.value |opt#0@@5|)))) (=> (=> (Options.Option.Some_q |opt#0@@5|) (Requires1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1) $Heap@@65 |f#0@@25| (Options.Option.value |opt#0@@5|))) (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@65 |opt#0@@5| |f#0@@25|)))) :qid |unknown.0:0| :skolemid |11438| :pattern ( (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@65 |opt#0@@5| |f#0@@25|)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@2 T@U) (Options._default.FlatMapOption$V1@@2 T@U) ($Heap@@66 T@U) (|opt#0@@6| T@U) (|f#0@@26| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@2) TyType) (= (type Options._default.FlatMapOption$V1@@2) TyType)) (= (type $Heap@@66) (MapType0Type refType MapType1Type))) (= (type |opt#0@@6|) DatatypeTypeType)) (= (type |f#0@@26|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@66 |opt#0@@6| |f#0@@26|) (and (and (and ($IsGoodHeap $Heap@@66) ($Is |opt#0@@6| (Tclass.Options.Option Options._default.FlatMapOption$V0@@2))) ($Is |f#0@@26| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2)))) (=> (Options.Option.Some_q |opt#0@@6|) (Requires1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@66 |f#0@@26| (Options.Option.value |opt#0@@6|)))))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@66 |opt#0@@6| |f#0@@26|) (ite (Options.Option.None_q |opt#0@@6|) |#Options.Option.None| (let ((|v#3@@0| (Options.Option.value |opt#0@@6|))) ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@66 |f#0@@26| |v#3@@0|)))))) :qid |unknown.0:0| :skolemid |11439| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@66 |opt#0@@6| |f#0@@26|)) ))))
(assert (= (type Tclass.NativeTypes.sbyte) TyType))
(assert (= (Tag Tclass.NativeTypes.sbyte) Tagclass.NativeTypes.sbyte))
(assert (forall ((bx@@88 T@U) ) (!  (=> (and (= (type bx@@88) BoxType) ($IsBox bx@@88 Tclass.NativeTypes.sbyte)) (and (= ($Box ($Unbox intType bx@@88)) bx@@88) ($Is ($Unbox intType bx@@88) Tclass.NativeTypes.sbyte))) :qid |unknown.0:0| :skolemid |11440| :pattern ( ($IsBox bx@@88 Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@25| T@U) ) (!  (=> (= (type |i#0@@25|) intType) (and (=> ($Is |i#0@@25| Tclass.NativeTypes.sbyte) (and (<= (LitInt (- 0 128)) (U_2_int |i#0@@25|)) (< (U_2_int |i#0@@25|) 128))) (=> (and (<= (LitInt (- 0 128)) (U_2_int |i#0@@25|)) (< (U_2_int |i#0@@25|) 128)) ($Is |i#0@@25| Tclass.NativeTypes.sbyte)))) :qid |nofile.1:88| :skolemid |11441| :pattern ( ($Is |i#0@@25| Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@26| T@U) ($h@@48 T@U) ) (!  (=> (and (= (type |i#0@@26|) intType) (= (type $h@@48) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@26| Tclass.NativeTypes.sbyte $h@@48)) :qid |nofile.1:88| :skolemid |11442| :pattern ( ($IsAlloc |i#0@@26| Tclass.NativeTypes.sbyte $h@@48)) )))
(assert (forall ((|i#0@@27| T@U) ) (!  (=> (= (type |i#0@@27|) intType) (and (=> ($Is |i#0@@27| Tclass.NativeTypes.byte) (and (<= (LitInt 0) (U_2_int |i#0@@27|)) (< (U_2_int |i#0@@27|) 256))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@27|)) (< (U_2_int |i#0@@27|) 256)) ($Is |i#0@@27| Tclass.NativeTypes.byte)))) :qid |nofile.1:88| :skolemid |11443| :pattern ( ($Is |i#0@@27| Tclass.NativeTypes.byte)) )))
(assert (forall ((|i#0@@28| T@U) ($h@@49 T@U) ) (!  (=> (and (= (type |i#0@@28|) intType) (= (type $h@@49) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@28| Tclass.NativeTypes.byte $h@@49)) :qid |nofile.1:88| :skolemid |11444| :pattern ( ($IsAlloc |i#0@@28| Tclass.NativeTypes.byte $h@@49)) )))
(assert (= (type Tclass.NativeTypes.int16) TyType))
(assert (= (Tag Tclass.NativeTypes.int16) Tagclass.NativeTypes.int16))
(assert (forall ((bx@@89 T@U) ) (!  (=> (and (= (type bx@@89) BoxType) ($IsBox bx@@89 Tclass.NativeTypes.int16)) (and (= ($Box ($Unbox intType bx@@89)) bx@@89) ($Is ($Unbox intType bx@@89) Tclass.NativeTypes.int16))) :qid |unknown.0:0| :skolemid |11445| :pattern ( ($IsBox bx@@89 Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@29| T@U) ) (!  (=> (= (type |i#0@@29|) intType) (and (=> ($Is |i#0@@29| Tclass.NativeTypes.int16) (and (<= (LitInt (- 0 32768)) (U_2_int |i#0@@29|)) (< (U_2_int |i#0@@29|) 32768))) (=> (and (<= (LitInt (- 0 32768)) (U_2_int |i#0@@29|)) (< (U_2_int |i#0@@29|) 32768)) ($Is |i#0@@29| Tclass.NativeTypes.int16)))) :qid |nofile.1:88| :skolemid |11446| :pattern ( ($Is |i#0@@29| Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@30| T@U) ($h@@50 T@U) ) (!  (=> (and (= (type |i#0@@30|) intType) (= (type $h@@50) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@30| Tclass.NativeTypes.int16 $h@@50)) :qid |nofile.1:88| :skolemid |11447| :pattern ( ($IsAlloc |i#0@@30| Tclass.NativeTypes.int16 $h@@50)) )))
(assert (= (type Tclass.NativeTypes.uint16) TyType))
(assert (= (Tag Tclass.NativeTypes.uint16) Tagclass.NativeTypes.uint16))
(assert (forall ((bx@@90 T@U) ) (!  (=> (and (= (type bx@@90) BoxType) ($IsBox bx@@90 Tclass.NativeTypes.uint16)) (and (= ($Box ($Unbox intType bx@@90)) bx@@90) ($Is ($Unbox intType bx@@90) Tclass.NativeTypes.uint16))) :qid |unknown.0:0| :skolemid |11448| :pattern ( ($IsBox bx@@90 Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@31| T@U) ) (!  (=> (= (type |i#0@@31|) intType) (and (=> ($Is |i#0@@31| Tclass.NativeTypes.uint16) (and (<= (LitInt 0) (U_2_int |i#0@@31|)) (< (U_2_int |i#0@@31|) 65536))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@31|)) (< (U_2_int |i#0@@31|) 65536)) ($Is |i#0@@31| Tclass.NativeTypes.uint16)))) :qid |nofile.1:88| :skolemid |11449| :pattern ( ($Is |i#0@@31| Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@32| T@U) ($h@@51 T@U) ) (!  (=> (and (= (type |i#0@@32|) intType) (= (type $h@@51) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@32| Tclass.NativeTypes.uint16 $h@@51)) :qid |nofile.1:88| :skolemid |11450| :pattern ( ($IsAlloc |i#0@@32| Tclass.NativeTypes.uint16 $h@@51)) )))
(assert (= (type Tclass.NativeTypes.int32) TyType))
(assert (= (Tag Tclass.NativeTypes.int32) Tagclass.NativeTypes.int32))
(assert (forall ((bx@@91 T@U) ) (!  (=> (and (= (type bx@@91) BoxType) ($IsBox bx@@91 Tclass.NativeTypes.int32)) (and (= ($Box ($Unbox intType bx@@91)) bx@@91) ($Is ($Unbox intType bx@@91) Tclass.NativeTypes.int32))) :qid |unknown.0:0| :skolemid |11451| :pattern ( ($IsBox bx@@91 Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@33| T@U) ) (!  (=> (= (type |i#0@@33|) intType) (and (=> ($Is |i#0@@33| Tclass.NativeTypes.int32) (and (<= (LitInt (- 0 2147483648)) (U_2_int |i#0@@33|)) (< (U_2_int |i#0@@33|) 2147483648))) (=> (and (<= (LitInt (- 0 2147483648)) (U_2_int |i#0@@33|)) (< (U_2_int |i#0@@33|) 2147483648)) ($Is |i#0@@33| Tclass.NativeTypes.int32)))) :qid |nofile.1:88| :skolemid |11452| :pattern ( ($Is |i#0@@33| Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@34| T@U) ($h@@52 T@U) ) (!  (=> (and (= (type |i#0@@34|) intType) (= (type $h@@52) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@34| Tclass.NativeTypes.int32 $h@@52)) :qid |nofile.1:88| :skolemid |11453| :pattern ( ($IsAlloc |i#0@@34| Tclass.NativeTypes.int32 $h@@52)) )))
(assert (= (type Tclass.NativeTypes.uint32) TyType))
(assert (= (Tag Tclass.NativeTypes.uint32) Tagclass.NativeTypes.uint32))
(assert (forall ((bx@@92 T@U) ) (!  (=> (and (= (type bx@@92) BoxType) ($IsBox bx@@92 Tclass.NativeTypes.uint32)) (and (= ($Box ($Unbox intType bx@@92)) bx@@92) ($Is ($Unbox intType bx@@92) Tclass.NativeTypes.uint32))) :qid |unknown.0:0| :skolemid |11454| :pattern ( ($IsBox bx@@92 Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@35| T@U) ) (!  (=> (= (type |i#0@@35|) intType) (and (=> ($Is |i#0@@35| Tclass.NativeTypes.uint32) (and (<= (LitInt 0) (U_2_int |i#0@@35|)) (< (U_2_int |i#0@@35|) 4294967296))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@35|)) (< (U_2_int |i#0@@35|) 4294967296)) ($Is |i#0@@35| Tclass.NativeTypes.uint32)))) :qid |nofile.1:88| :skolemid |11455| :pattern ( ($Is |i#0@@35| Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@36| T@U) ($h@@53 T@U) ) (!  (=> (and (= (type |i#0@@36|) intType) (= (type $h@@53) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@36| Tclass.NativeTypes.uint32 $h@@53)) :qid |nofile.1:88| :skolemid |11456| :pattern ( ($IsAlloc |i#0@@36| Tclass.NativeTypes.uint32 $h@@53)) )))
(assert (= (type Tclass.NativeTypes.int64) TyType))
(assert (= (Tag Tclass.NativeTypes.int64) Tagclass.NativeTypes.int64))
(assert (forall ((bx@@93 T@U) ) (!  (=> (and (= (type bx@@93) BoxType) ($IsBox bx@@93 Tclass.NativeTypes.int64)) (and (= ($Box ($Unbox intType bx@@93)) bx@@93) ($Is ($Unbox intType bx@@93) Tclass.NativeTypes.int64))) :qid |unknown.0:0| :skolemid |11457| :pattern ( ($IsBox bx@@93 Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@37| T@U) ) (!  (=> (= (type |i#0@@37|) intType) (and (=> ($Is |i#0@@37| Tclass.NativeTypes.int64) (and (<= (LitInt (- 0 9223372036854775808)) (U_2_int |i#0@@37|)) (< (U_2_int |i#0@@37|) 9223372036854775808))) (=> (and (<= (LitInt (- 0 9223372036854775808)) (U_2_int |i#0@@37|)) (< (U_2_int |i#0@@37|) 9223372036854775808)) ($Is |i#0@@37| Tclass.NativeTypes.int64)))) :qid |nofile.1:88| :skolemid |11458| :pattern ( ($Is |i#0@@37| Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@38| T@U) ($h@@54 T@U) ) (!  (=> (and (= (type |i#0@@38|) intType) (= (type $h@@54) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@38| Tclass.NativeTypes.int64 $h@@54)) :qid |nofile.1:88| :skolemid |11459| :pattern ( ($IsAlloc |i#0@@38| Tclass.NativeTypes.int64 $h@@54)) )))
(assert (forall ((|i#0@@39| T@U) ) (!  (=> (= (type |i#0@@39|) intType) (and (=> ($Is |i#0@@39| Tclass.NativeTypes.uint64) (and (<= (LitInt 0) (U_2_int |i#0@@39|)) (< (U_2_int |i#0@@39|) 18446744073709551616))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@39|)) (< (U_2_int |i#0@@39|) 18446744073709551616)) ($Is |i#0@@39| Tclass.NativeTypes.uint64)))) :qid |nofile.1:88| :skolemid |11460| :pattern ( ($Is |i#0@@39| Tclass.NativeTypes.uint64)) )))
(assert (forall ((|i#0@@40| T@U) ($h@@55 T@U) ) (!  (=> (and (= (type |i#0@@40|) intType) (= (type $h@@55) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@40| Tclass.NativeTypes.uint64 $h@@55)) :qid |nofile.1:88| :skolemid |11461| :pattern ( ($IsAlloc |i#0@@40| Tclass.NativeTypes.uint64 $h@@55)) )))
(assert (= (type Tclass.NativeTypes.nat8) TyType))
(assert (= (Tag Tclass.NativeTypes.nat8) Tagclass.NativeTypes.nat8))
(assert (forall ((bx@@94 T@U) ) (!  (=> (and (= (type bx@@94) BoxType) ($IsBox bx@@94 Tclass.NativeTypes.nat8)) (and (= ($Box ($Unbox intType bx@@94)) bx@@94) ($Is ($Unbox intType bx@@94) Tclass.NativeTypes.nat8))) :qid |unknown.0:0| :skolemid |11462| :pattern ( ($IsBox bx@@94 Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@41| T@U) ) (!  (=> (= (type |i#0@@41|) intType) (and (=> ($Is |i#0@@41| Tclass.NativeTypes.nat8) (and (<= (LitInt 0) (U_2_int |i#0@@41|)) (< (U_2_int |i#0@@41|) 128))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@41|)) (< (U_2_int |i#0@@41|) 128)) ($Is |i#0@@41| Tclass.NativeTypes.nat8)))) :qid |nofile.1:88| :skolemid |11463| :pattern ( ($Is |i#0@@41| Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@42| T@U) ($h@@56 T@U) ) (!  (=> (and (= (type |i#0@@42|) intType) (= (type $h@@56) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@42| Tclass.NativeTypes.nat8 $h@@56)) :qid |nofile.1:88| :skolemid |11464| :pattern ( ($IsAlloc |i#0@@42| Tclass.NativeTypes.nat8 $h@@56)) )))
(assert (= (type Tclass.NativeTypes.nat16) TyType))
(assert (= (Tag Tclass.NativeTypes.nat16) Tagclass.NativeTypes.nat16))
(assert (forall ((bx@@95 T@U) ) (!  (=> (and (= (type bx@@95) BoxType) ($IsBox bx@@95 Tclass.NativeTypes.nat16)) (and (= ($Box ($Unbox intType bx@@95)) bx@@95) ($Is ($Unbox intType bx@@95) Tclass.NativeTypes.nat16))) :qid |unknown.0:0| :skolemid |11465| :pattern ( ($IsBox bx@@95 Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@43| T@U) ) (!  (=> (= (type |i#0@@43|) intType) (and (=> ($Is |i#0@@43| Tclass.NativeTypes.nat16) (and (<= (LitInt 0) (U_2_int |i#0@@43|)) (< (U_2_int |i#0@@43|) 32768))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@43|)) (< (U_2_int |i#0@@43|) 32768)) ($Is |i#0@@43| Tclass.NativeTypes.nat16)))) :qid |nofile.1:88| :skolemid |11466| :pattern ( ($Is |i#0@@43| Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@44| T@U) ($h@@57 T@U) ) (!  (=> (and (= (type |i#0@@44|) intType) (= (type $h@@57) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@44| Tclass.NativeTypes.nat16 $h@@57)) :qid |nofile.1:88| :skolemid |11467| :pattern ( ($IsAlloc |i#0@@44| Tclass.NativeTypes.nat16 $h@@57)) )))
(assert (= (type Tclass.NativeTypes.nat32) TyType))
(assert (= (Tag Tclass.NativeTypes.nat32) Tagclass.NativeTypes.nat32))
(assert (forall ((bx@@96 T@U) ) (!  (=> (and (= (type bx@@96) BoxType) ($IsBox bx@@96 Tclass.NativeTypes.nat32)) (and (= ($Box ($Unbox intType bx@@96)) bx@@96) ($Is ($Unbox intType bx@@96) Tclass.NativeTypes.nat32))) :qid |unknown.0:0| :skolemid |11468| :pattern ( ($IsBox bx@@96 Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@45| T@U) ) (!  (=> (= (type |i#0@@45|) intType) (and (=> ($Is |i#0@@45| Tclass.NativeTypes.nat32) (and (<= (LitInt 0) (U_2_int |i#0@@45|)) (< (U_2_int |i#0@@45|) 2147483648))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@45|)) (< (U_2_int |i#0@@45|) 2147483648)) ($Is |i#0@@45| Tclass.NativeTypes.nat32)))) :qid |nofile.1:88| :skolemid |11469| :pattern ( ($Is |i#0@@45| Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@46| T@U) ($h@@58 T@U) ) (!  (=> (and (= (type |i#0@@46|) intType) (= (type $h@@58) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@46| Tclass.NativeTypes.nat32 $h@@58)) :qid |nofile.1:88| :skolemid |11470| :pattern ( ($IsAlloc |i#0@@46| Tclass.NativeTypes.nat32 $h@@58)) )))
(assert (= (type Tclass.NativeTypes.nat64) TyType))
(assert (= (Tag Tclass.NativeTypes.nat64) Tagclass.NativeTypes.nat64))
(assert (forall ((bx@@97 T@U) ) (!  (=> (and (= (type bx@@97) BoxType) ($IsBox bx@@97 Tclass.NativeTypes.nat64)) (and (= ($Box ($Unbox intType bx@@97)) bx@@97) ($Is ($Unbox intType bx@@97) Tclass.NativeTypes.nat64))) :qid |unknown.0:0| :skolemid |11471| :pattern ( ($IsBox bx@@97 Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@47| T@U) ) (!  (=> (= (type |i#0@@47|) intType) (and (=> ($Is |i#0@@47| Tclass.NativeTypes.nat64) (and (<= (LitInt 0) (U_2_int |i#0@@47|)) (< (U_2_int |i#0@@47|) 9223372036854775808))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@47|)) (< (U_2_int |i#0@@47|) 9223372036854775808)) ($Is |i#0@@47| Tclass.NativeTypes.nat64)))) :qid |nofile.1:88| :skolemid |11472| :pattern ( ($Is |i#0@@47| Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@48| T@U) ($h@@59 T@U) ) (!  (=> (and (= (type |i#0@@48|) intType) (= (type $h@@59) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@48| Tclass.NativeTypes.nat64 $h@@59)) :qid |nofile.1:88| :skolemid |11473| :pattern ( ($IsAlloc |i#0@@48| Tclass.NativeTypes.nat64 $h@@59)) )))
(assert (= (type Tclass.NativeTypes.__default) TyType))
(assert (= (Tag Tclass.NativeTypes.__default) Tagclass.NativeTypes.__default))
(assert (forall ((bx@@98 T@U) ) (!  (=> (and (= (type bx@@98) BoxType) ($IsBox bx@@98 Tclass.NativeTypes.__default)) (and (= ($Box ($Unbox refType bx@@98)) bx@@98) ($Is ($Unbox refType bx@@98) Tclass.NativeTypes.__default))) :qid |unknown.0:0| :skolemid |11474| :pattern ( ($IsBox bx@@98 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@39 T@U) ) (!  (=> (= (type $o@@39) refType) (and (=> ($Is $o@@39 Tclass.NativeTypes.__default) (or (= $o@@39 null) (= (dtype $o@@39) Tclass.NativeTypes.__default))) (=> (or (= $o@@39 null) (= (dtype $o@@39) Tclass.NativeTypes.__default)) ($Is $o@@39 Tclass.NativeTypes.__default)))) :qid |unknown.0:0| :skolemid |11475| :pattern ( ($Is $o@@39 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@40 T@U) ($h@@60 T@U) ) (!  (=> (and (= (type $o@@40) refType) (= (type $h@@60) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@40 Tclass.NativeTypes.__default $h@@60) (or (= $o@@40 null) (U_2_bool (MapType1Select (MapType0Select $h@@60 $o@@40) alloc)))) (=> (or (= $o@@40 null) (U_2_bool (MapType1Select (MapType0Select $h@@60 $o@@40) alloc))) ($IsAlloc $o@@40 Tclass.NativeTypes.__default $h@@60)))) :qid |unknown.0:0| :skolemid |11476| :pattern ( ($IsAlloc $o@@40 Tclass.NativeTypes.__default $h@@60)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint64Size) (< NativeTypes.__default.Uint64Size 18446744073709551616)))))
(assert  (=> |NativeTypes.__default.Uint64Size#requires| true))
(assert  (=> true |NativeTypes.__default.Uint64Size#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint32Size) (< NativeTypes.__default.Uint32Size 18446744073709551616)))))
(assert  (=> |NativeTypes.__default.Uint32Size#requires| true))
(assert  (=> true |NativeTypes.__default.Uint32Size#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint16Size) (< NativeTypes.__default.Uint16Size 18446744073709551616)))))
(assert  (=> |NativeTypes.__default.Uint16Size#requires| true))
(assert  (=> true |NativeTypes.__default.Uint16Size#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true true)))
(assert  (=> |NativeTypes.__default.Uint64UpperBound#requires| true))
(assert  (=> true |NativeTypes.__default.Uint64UpperBound#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true true)))
(assert  (=> |NativeTypes.__default.Uint32UpperBound#requires| true))
(assert  (=> true |NativeTypes.__default.Uint32UpperBound#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert (= (type Tclass.Sequences.__default) TyType))
(assert (= (Tag Tclass.Sequences.__default) Tagclass.Sequences.__default))
(assert (forall ((bx@@99 T@U) ) (!  (=> (and (= (type bx@@99) BoxType) ($IsBox bx@@99 Tclass.Sequences.__default)) (and (= ($Box ($Unbox refType bx@@99)) bx@@99) ($Is ($Unbox refType bx@@99) Tclass.Sequences.__default))) :qid |unknown.0:0| :skolemid |11477| :pattern ( ($IsBox bx@@99 Tclass.Sequences.__default)) )))
(assert (forall (($o@@41 T@U) ) (!  (=> (= (type $o@@41) refType) (and (=> ($Is $o@@41 Tclass.Sequences.__default) (or (= $o@@41 null) (= (dtype $o@@41) Tclass.Sequences.__default))) (=> (or (= $o@@41 null) (= (dtype $o@@41) Tclass.Sequences.__default)) ($Is $o@@41 Tclass.Sequences.__default)))) :qid |unknown.0:0| :skolemid |11478| :pattern ( ($Is $o@@41 Tclass.Sequences.__default)) )))
(assert (forall (($o@@42 T@U) ($h@@61 T@U) ) (!  (=> (and (= (type $o@@42) refType) (= (type $h@@61) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@42 Tclass.Sequences.__default $h@@61) (or (= $o@@42 null) (U_2_bool (MapType1Select (MapType0Select $h@@61 $o@@42) alloc)))) (=> (or (= $o@@42 null) (U_2_bool (MapType1Select (MapType0Select $h@@61 $o@@42) alloc))) ($IsAlloc $o@@42 Tclass.Sequences.__default $h@@61)))) :qid |unknown.0:0| :skolemid |11479| :pattern ( ($IsAlloc $o@@42 Tclass.Sequences.__default $h@@61)) )))
(assert  (=> true (forall ((Sequences._default.Last$E T@U) (|run#0| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E) TyType) (= (type |run#0|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E |run#0|) (and ($Is |run#0| (TSeq Sequences._default.Last$E)) (> (|Seq#Length| |run#0|) 0)))) ($IsBox (Sequences.__default.Last Sequences._default.Last$E |run#0|) Sequences._default.Last$E)) :qid |unknown.0:0| :skolemid |11480| :pattern ( (Sequences.__default.Last Sequences._default.Last$E |run#0|)) ))))
(assert (forall ((Sequences._default.Last$E@@0 T@U) (|run#0@@0| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@0) TyType) (= (type |run#0@@0|) (SeqType BoxType))) ($Is |run#0@@0| (TSeq Sequences._default.Last$E@@0))) (and (=> (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@0|) (> (|Seq#Length| |run#0@@0|) 0)) (=> (> (|Seq#Length| |run#0@@0|) 0) (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@0|)))) :qid |unknown.0:0| :skolemid |11481| :pattern ( (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.Last$E@@1 T@U) (|run#0@@1| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@1) TyType) (= (type |run#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@1 |run#0@@1|) (and ($Is |run#0@@1| (TSeq Sequences._default.Last$E@@1)) (> (|Seq#Length| |run#0@@1|) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@1|) (|Seq#Index| |run#0@@1| (- (|Seq#Length| |run#0@@1|) 1)))) :qid |unknown.0:0| :skolemid |11482| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@1|)) ))))
(assert  (=> true (forall ((Sequences._default.Last$E@@2 T@U) (|run#0@@2| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@2) TyType) (= (type |run#0@@2|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@2 (Lit |run#0@@2|)) (and ($Is |run#0@@2| (TSeq Sequences._default.Last$E@@2)) (> (|Seq#Length| (Lit |run#0@@2|)) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@2|)) (|Seq#Index| (Lit |run#0@@2|) (- (|Seq#Length| (Lit |run#0@@2|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |11483| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@2|))) ))))
(assert  (=> true (forall ((Sequences._default.DropLast$E T@U) (|run#0@@3| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E) TyType) (= (type |run#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E |run#0@@3|) (and ($Is |run#0@@3| (TSeq Sequences._default.DropLast$E)) (> (|Seq#Length| |run#0@@3|) 0)))) ($Is (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@3|) (TSeq Sequences._default.DropLast$E))) :qid |unknown.0:0| :skolemid |11484| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@3|)) ))))
(assert (forall ((Sequences._default.DropLast$E@@0 T@U) (|run#0@@4| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@0) TyType) (= (type |run#0@@4|) (SeqType BoxType))) ($Is |run#0@@4| (TSeq Sequences._default.DropLast$E@@0))) (and (=> (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@4|) (> (|Seq#Length| |run#0@@4|) 0)) (=> (> (|Seq#Length| |run#0@@4|) 0) (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@4|)))) :qid |unknown.0:0| :skolemid |11485| :pattern ( (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@4|)) )))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@1 T@U) (|run#0@@5| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@1) TyType) (= (type |run#0@@5|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@1 |run#0@@5|) (and ($Is |run#0@@5| (TSeq Sequences._default.DropLast$E@@1)) (> (|Seq#Length| |run#0@@5|) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@5|) (|Seq#Take| |run#0@@5| (- (|Seq#Length| |run#0@@5|) 1)))) :qid |unknown.0:0| :skolemid |11486| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@5|)) ))))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@2 T@U) (|run#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@2) TyType) (= (type |run#0@@6|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@2 (Lit |run#0@@6|)) (and ($Is |run#0@@6| (TSeq Sequences._default.DropLast$E@@2)) (> (|Seq#Length| (Lit |run#0@@6|)) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@6|)) (|Seq#Take| (Lit |run#0@@6|) (- (|Seq#Length| (Lit |run#0@@6|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |11487| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@6|))) ))))
(assert  (=> true (forall ((Sequences._default.Set$T T@U) (|run#0@@7| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T) TyType) (= (type |run#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T |run#0@@7|) ($Is |run#0@@7| (TSeq Sequences._default.Set$T)))) ($Is (Sequences.__default.Set Sequences._default.Set$T |run#0@@7|) (TSet Sequences._default.Set$T))) :qid |unknown.0:0| :skolemid |11488| :pattern ( (Sequences.__default.Set Sequences._default.Set$T |run#0@@7|)) ))))
(assert (forall ((Sequences._default.Set$T@@0 T@U) (|run#0@@8| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@0) TyType) (= (type |run#0@@8|) (SeqType BoxType))) ($Is |run#0@@8| (TSeq Sequences._default.Set$T@@0))) (and (=> (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@8|) true) (=> true (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@8|)))) :qid |unknown.0:0| :skolemid |11489| :pattern ( (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@8|)) )))
(assert (forall ((arg0@@259 T@U) (arg1@@126 T@U) (arg2@@72 Int) ) (! (= (type (|lambda#64| arg0@@259 arg1@@126 arg2@@72)) (MapType0Type BoxType boolType)) :qid |funType:lambda#64| :pattern ( (|lambda#64| arg0@@259 arg1@@126 arg2@@72)) )))
(assert  (=> true (forall ((Sequences._default.Set$T@@1 T@U) (|run#0@@9| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@1) TyType) (= (type |run#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@1 |run#0@@9|) ($Is |run#0@@9| (TSeq Sequences._default.Set$T@@1)))) (= (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@9|) (|lambda#64| Sequences._default.Set$T@@1 (|MultiSet#FromSeq| |run#0@@9|) 0))) :qid |unknown.0:0| :skolemid |11490| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@9|)) ))))
(assert  (=> true (forall ((Sequences._default.Set$T@@2 T@U) (|run#0@@10| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@2) TyType) (= (type |run#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@2 (Lit |run#0@@10|)) ($Is |run#0@@10| (TSeq Sequences._default.Set$T@@2)))) (= (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@10|)) (|lambda#64| Sequences._default.Set$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@10|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |11491| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@10|))) ))))
(assert (forall ((arg0@@260 T@U) (arg1@@127 T@U) ) (! (= (type (Sequences.__default.ISet arg0@@260 arg1@@127)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.ISet| :pattern ( (Sequences.__default.ISet arg0@@260 arg1@@127)) )))
(assert  (=> true (forall ((Sequences._default.ISet$T T@U) (|run#0@@11| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T) TyType) (= (type |run#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T |run#0@@11|) ($Is |run#0@@11| (TSeq Sequences._default.ISet$T)))) ($Is (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@11|) (TISet Sequences._default.ISet$T))) :qid |unknown.0:0| :skolemid |11492| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@11|)) ))))
(assert (forall ((Sequences._default.ISet$T@@0 T@U) (|run#0@@12| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@0) TyType) (= (type |run#0@@12|) (SeqType BoxType))) ($Is |run#0@@12| (TSeq Sequences._default.ISet$T@@0))) (and (=> (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@12|) true) (=> true (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@12|)))) :qid |unknown.0:0| :skolemid |11493| :pattern ( (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@12|)) )))
(assert  (=> true (forall ((Sequences._default.ISet$T@@1 T@U) (|run#0@@13| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@1) TyType) (= (type |run#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@1 |run#0@@13|) ($Is |run#0@@13| (TSeq Sequences._default.ISet$T@@1)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@13|) (|lambda#64| Sequences._default.ISet$T@@1 (|MultiSet#FromSeq| |run#0@@13|) 0))) :qid |unknown.0:0| :skolemid |11494| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@13|)) ))))
(assert  (=> true (forall ((Sequences._default.ISet$T@@2 T@U) (|run#0@@14| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@2) TyType) (= (type |run#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@2 (Lit |run#0@@14|)) ($Is |run#0@@14| (TSeq Sequences._default.ISet$T@@2)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@14|)) (|lambda#64| Sequences._default.ISet$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@14|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |11495| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@14|))) ))))
(assert (forall ((Sequences._default.NoDupes$T T@U) ($ly@@41 T@U) (|a#0@@1| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T) TyType) (= (type $ly@@41) LayerTypeType)) (= (type |a#0@@1|) (SeqType BoxType))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@41) |a#0@@1|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T $ly@@41 |a#0@@1|)) (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T $ly@@41 |a#0@@1|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@41) |a#0@@1|)))) :qid |unknown.0:0| :skolemid |11496| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@41) |a#0@@1|)) )))
(assert (forall ((Sequences._default.NoDupes$T@@0 T@U) ($ly@@42 T@U) (|a#0@@2| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T@@0) TyType) (= (type $ly@@42) LayerTypeType)) (= (type |a#0@@2|) (SeqType BoxType))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $ly@@42 |a#0@@2|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $LZ |a#0@@2|)) (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $LZ |a#0@@2|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $ly@@42 |a#0@@2|)))) :qid |unknown.0:0| :skolemid |11497| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 (AsFuelBottom $ly@@42) |a#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@1 T@U) ($ly@@43 T@U) (|a#0@@3| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@1) TyType) (= (type $ly@@43) LayerTypeType)) (= (type |a#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@1 |a#0@@3|) ($Is |a#0@@3| (TSeq Sequences._default.NoDupes$T@@1)))) true) :qid |unknown.0:0| :skolemid |11498| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@1 $ly@@43 |a#0@@3|)) ))))
(assert (forall ((Sequences._default.NoDupes$T@@2 T@U) ($ly@@44 T@U) (|a#0@@4| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@2) TyType) (= (type $ly@@44) LayerTypeType)) (= (type |a#0@@4|) (SeqType BoxType))) ($Is |a#0@@4| (TSeq Sequences._default.NoDupes$T@@2))) (and (=> (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@44 |a#0@@4|) true) (=> true (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@44 |a#0@@4|)))) :qid |unknown.0:0| :skolemid |11499| :pattern ( (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@44 |a#0@@4|)) )))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@3 T@U) ($ly@@45 T@U) (|a#0@@5| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@3) TyType) (= (type $ly@@45) LayerTypeType)) (= (type |a#0@@5|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@3 |a#0@@5|) ($Is |a#0@@5| (TSeq Sequences._default.NoDupes$T@@3)))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@45) |a#0@@5|) (forall ((|i#2@@3| Int) (|j#2| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#2@@3|) (< |i#2@@3| (|Seq#Length| |a#0@@5|))) (and (<= (LitInt 0) |j#2|) (< |j#2| (|Seq#Length| |a#0@@5|)))) (not (= |i#2@@3| |j#2|))) (not (= (|Seq#Index| |a#0@@5| |i#2@@3|) (|Seq#Index| |a#0@@5| |j#2|))))) :qid |sequence.54:13| :skolemid |11500| :pattern ( (|Seq#Index| |a#0@@5| |j#2|) (|Seq#Index| |a#0@@5| |i#2@@3|)) ))) (=> (forall ((|i#2@@4| Int) (|j#2@@0| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#2@@4|) (< |i#2@@4| (|Seq#Length| |a#0@@5|))) (and (<= (LitInt 0) |j#2@@0|) (< |j#2@@0| (|Seq#Length| |a#0@@5|)))) (not (= |i#2@@4| |j#2@@0|))) (not (= (|Seq#Index| |a#0@@5| |i#2@@4|) (|Seq#Index| |a#0@@5| |j#2@@0|))))) :qid |sequence.54:13| :skolemid |11500| :pattern ( (|Seq#Index| |a#0@@5| |j#2@@0|) (|Seq#Index| |a#0@@5| |i#2@@4|)) )) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@45) |a#0@@5|)))) :qid |unknown.0:0| :skolemid |11501| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@45) |a#0@@5|)) ))))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@4 T@U) ($ly@@46 T@U) (|a#0@@6| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@4) TyType) (= (type $ly@@46) LayerTypeType)) (= (type |a#0@@6|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@4 (Lit |a#0@@6|)) ($Is |a#0@@6| (TSeq Sequences._default.NoDupes$T@@4)))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@46) (Lit |a#0@@6|)) (forall ((|i#3@@3| Int) (|j#3| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#3@@3|) (< |i#3@@3| (|Seq#Length| (Lit |a#0@@6|)))) (and (<= (LitInt 0) |j#3|) (< |j#3| (|Seq#Length| (Lit |a#0@@6|))))) (not (= |i#3@@3| |j#3|))) (not (= (|Seq#Index| (Lit |a#0@@6|) |i#3@@3|) (|Seq#Index| (Lit |a#0@@6|) |j#3|))))) :qid |sequence.54:13| :skolemid |11502| :pattern ( (|Seq#Index| |a#0@@6| |j#3|) (|Seq#Index| |a#0@@6| |i#3@@3|)) ))) (=> (forall ((|i#3@@4| Int) (|j#3@@0| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#3@@4|) (< |i#3@@4| (|Seq#Length| (Lit |a#0@@6|)))) (and (<= (LitInt 0) |j#3@@0|) (< |j#3@@0| (|Seq#Length| (Lit |a#0@@6|))))) (not (= |i#3@@4| |j#3@@0|))) (not (= (|Seq#Index| (Lit |a#0@@6|) |i#3@@4|) (|Seq#Index| (Lit |a#0@@6|) |j#3@@0|))))) :qid |sequence.54:13| :skolemid |11502| :pattern ( (|Seq#Index| |a#0@@6| |j#3@@0|) (|Seq#Index| |a#0@@6| |i#3@@4|)) )) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@46) (Lit |a#0@@6|))))) :qid |unknown.0:0| :weight 3 :skolemid |11503| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@46) (Lit |a#0@@6|))) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T T@U) (|s#0| T@U) (|e#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T) TyType) (= (type |s#0|) (SeqType BoxType))) (= (type |e#0|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T |s#0| |e#0|) (and (and ($Is |s#0| (TSeq Sequences._default.IndexOf$T)) ($IsBox |e#0| Sequences._default.IndexOf$T)) (|Seq#Contains| |s#0| |e#0|)))) (and (and (<= (LitInt 0) (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0| |e#0|)) (< (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0| |e#0|) (|Seq#Length| |s#0|))) (= (|Seq#Index| |s#0| (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0| |e#0|)) |e#0|))) :qid |unknown.0:0| :skolemid |11504| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0| |e#0|)) ))))
(assert (forall ((Sequences._default.IndexOf$T@@0 T@U) ($Heap@@67 T@U) (|s#0@@0| T@U) (|e#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@0) TyType) (= (type $Heap@@67) (MapType0Type refType MapType1Type))) (= (type |s#0@@0|) (SeqType BoxType))) (= (type |e#0@@0|) BoxType)) (and (and ($IsGoodHeap $Heap@@67) ($Is |s#0@@0| (TSeq Sequences._default.IndexOf$T@@0))) ($IsBox |e#0@@0| Sequences._default.IndexOf$T@@0))) (and (=> (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@0| |e#0@@0|) (|Seq#Contains| |s#0@@0| |e#0@@0|)) (=> (|Seq#Contains| |s#0@@0| |e#0@@0|) (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@0| |e#0@@0|)))) :qid |unknown.0:0| :skolemid |11505| :pattern ( (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@0| |e#0@@0|) ($IsGoodHeap $Heap@@67)) )))
(assert (forall ((Sequences._default.IndexOf$T@@1 T@U) (s@@45 T@U) (e T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T@@1) TyType) (= (type s@@45) (SeqType BoxType))) (= (type e) BoxType)) (|$let#0$canCall| Sequences._default.IndexOf$T@@1 s@@45 e)) (and (and (<= (LitInt 0) (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@45 e)) (< (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@45 e) (|Seq#Length| s@@45))) (= (|Seq#Index| s@@45 (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@45 e)) e))) :qid |sequence.105:5| :skolemid |11506| :pattern ( (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@45 e)) )))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@2 T@U) ($Heap@@68 T@U) (|s#0@@1| T@U) (|e#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@2) TyType) (= (type $Heap@@68) (MapType0Type refType MapType1Type))) (= (type |s#0@@1|) (SeqType BoxType))) (= (type |e#0@@1|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|) (and (and (and ($IsGoodHeap $Heap@@68) ($Is |s#0@@1| (TSeq Sequences._default.IndexOf$T@@2))) ($IsBox |e#0@@1| Sequences._default.IndexOf$T@@2)) (|Seq#Contains| |s#0@@1| |e#0@@1|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|) (let ((|i#3@@5| (|$let#0_i| Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|))) |i#3@@5|)))) :qid |unknown.0:0| :skolemid |11507| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|) ($IsGoodHeap $Heap@@68)) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@3 T@U) ($Heap@@69 T@U) (|s#0@@2| T@U) (|e#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@3) TyType) (= (type $Heap@@69) (MapType0Type refType MapType1Type))) (= (type |s#0@@2|) (SeqType BoxType))) (= (type |e#0@@2|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|) (and (and (and ($IsGoodHeap $Heap@@69) ($Is |s#0@@2| (TSeq Sequences._default.IndexOf$T@@3))) ($IsBox |e#0@@2| Sequences._default.IndexOf$T@@3)) (|Seq#Contains| |s#0@@2| |e#0@@2|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|) (let ((|i#4@@3| (|$let#0_i| Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|))) |i#4@@3|)))) :qid |unknown.0:0| :weight 3 :skolemid |11508| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|) ($IsGoodHeap $Heap@@69)) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@4 T@U) ($Heap@@70 T@U) (|s#0@@3| T@U) (|e#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@4) TyType) (= (type $Heap@@70) (MapType0Type refType MapType1Type))) (= (type |s#0@@3|) (SeqType BoxType))) (= (type |e#0@@3|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)) (and (and (and ($IsGoodHeap $Heap@@70) ($Is |s#0@@3| (TSeq Sequences._default.IndexOf$T@@4))) ($IsBox |e#0@@3| Sequences._default.IndexOf$T@@4)) (|Seq#Contains| |s#0@@3| |e#0@@3|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)) (let ((|i#5@@2| (|$let#0_i| Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)))) |i#5@@2|)))) :qid |unknown.0:0| :weight 3 :skolemid |11509| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)) ($IsGoodHeap $Heap@@70)) ))))
(assert (forall ((arg0@@261 T@U) (arg1@@128 Int) ) (! (= (type (Sequences.__default.Range arg0@@261 arg1@@128)) (SeqType BoxType)) :qid |funType:Sequences.__default.Range| :pattern ( (Sequences.__default.Range arg0@@261 arg1@@128)) )))
(assert (forall (($ly@@47 T@U) (|n#0| Int) ) (!  (=> (= (type $ly@@47) LayerTypeType) (= (Sequences.__default.Range ($LS $ly@@47) |n#0|) (Sequences.__default.Range $ly@@47 |n#0|))) :qid |sequence.109:22| :skolemid |11510| :pattern ( (Sequences.__default.Range ($LS $ly@@47) |n#0|)) )))
(assert (forall (($ly@@48 T@U) (|n#0@@0| Int) ) (!  (=> (= (type $ly@@48) LayerTypeType) (= (Sequences.__default.Range $ly@@48 |n#0@@0|) (Sequences.__default.Range $LZ |n#0@@0|))) :qid |sequence.109:22| :skolemid |11511| :pattern ( (Sequences.__default.Range (AsFuelBottom $ly@@48) |n#0@@0|)) )))
(assert  (=> true (forall (($ly@@49 T@U) (|n#0@@1| Int) ) (!  (=> (and (= (type $ly@@49) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@1|) (>= |n#0@@1| (LitInt 0)))) (and (and (= (|Seq#Length| (Sequences.__default.Range $ly@@49 |n#0@@1|)) |n#0@@1|) (forall ((|i#1@@6| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@6|) (< |i#1@@6| |n#0@@1|)) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@49 |n#0@@1|) |i#1@@6|))) |i#1@@6|)) :qid |sequence.112:20| :skolemid |11512| :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@49 |n#0@@1|) |i#1@@6|))) ))) ($Is (Sequences.__default.Range $ly@@49 |n#0@@1|) (TSeq TInt)))) :qid |sequence.109:22| :skolemid |11513| :pattern ( (Sequences.__default.Range $ly@@49 |n#0@@1|)) ))))
(assert (forall (($ly@@50 T@U) (|n#0@@2| Int) ) (!  (=> (= (type $ly@@50) LayerTypeType) (and (=> (|Sequences.__default.Range#requires| $ly@@50 |n#0@@2|) (>= |n#0@@2| (LitInt 0))) (=> (>= |n#0@@2| (LitInt 0)) (|Sequences.__default.Range#requires| $ly@@50 |n#0@@2|)))) :qid |sequence.109:22| :skolemid |11514| :pattern ( (|Sequences.__default.Range#requires| $ly@@50 |n#0@@2|)) )))
(assert  (=> true (forall (($ly@@51 T@U) (|n#0@@3| Int) ) (!  (=> (and (= (type $ly@@51) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@3|) (>= |n#0@@3| (LitInt 0)))) (and (=> (not (= |n#0@@3| (LitInt 0))) (|Sequences.__default.Range#canCall| (- |n#0@@3| 1))) (= (Sequences.__default.Range ($LS $ly@@51) |n#0@@3|) (ite (= |n#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range $ly@@51 (- |n#0@@3| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (- |n#0@@3| 1))))))))) :qid |sequence.109:22| :skolemid |11515| :pattern ( (Sequences.__default.Range ($LS $ly@@51) |n#0@@3|)) ))))
(assert  (=> true (forall (($ly@@52 T@U) (|n#0@@4| Int) ) (!  (=> (and (= (type $ly@@52) LayerTypeType) (or (|Sequences.__default.Range#canCall| (LitInt |n#0@@4|)) (>= (LitInt |n#0@@4|) (LitInt 0)))) (and (=> (not (= (LitInt |n#0@@4|) (LitInt 0))) (|Sequences.__default.Range#canCall| (LitInt (- |n#0@@4| 1)))) (= (Sequences.__default.Range ($LS $ly@@52) (LitInt |n#0@@4|)) (ite (= (LitInt |n#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range ($LS $ly@@52) (LitInt (- |n#0@@4| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt (- |n#0@@4| 1)))))))))) :qid |sequence.109:22| :weight 3 :skolemid |11516| :pattern ( (Sequences.__default.Range ($LS $ly@@52) (LitInt |n#0@@4|))) ))))
(assert (forall ((arg0@@262 T@U) (arg1@@129 T@U) (arg2@@73 T@U) (arg3@@46 T@U) (arg4@@31 T@U) (arg5@@16 T@U) ) (! (= (type (Sequences.__default.Apply arg0@@262 arg1@@129 arg2@@73 arg3@@46 arg4@@31 arg5@@16)) (SeqType BoxType)) :qid |funType:Sequences.__default.Apply| :pattern ( (Sequences.__default.Apply arg0@@262 arg1@@129 arg2@@73 arg3@@46 arg4@@31 arg5@@16)) )))
(assert (forall ((Sequences._default.Apply$E T@U) (Sequences._default.Apply$R T@U) ($ly@@53 T@U) ($Heap@@71 T@U) (|f#0@@27| T@U) (|run#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E) TyType) (= (type Sequences._default.Apply$R) TyType)) (= (type $ly@@53) LayerTypeType)) (= (type $Heap@@71) (MapType0Type refType MapType1Type))) (= (type |f#0@@27|) HandleTypeType)) (= (type |run#0@@15|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@53) $Heap@@71 |f#0@@27| |run#0@@15|) (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R $ly@@53 $Heap@@71 |f#0@@27| |run#0@@15|))) :qid |unknown.0:0| :skolemid |11517| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@53) $Heap@@71 |f#0@@27| |run#0@@15|)) )))
(assert (forall ((Sequences._default.Apply$E@@0 T@U) (Sequences._default.Apply$R@@0 T@U) ($ly@@54 T@U) ($Heap@@72 T@U) (|f#0@@28| T@U) (|run#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E@@0) TyType) (= (type Sequences._default.Apply$R@@0) TyType)) (= (type $ly@@54) LayerTypeType)) (= (type $Heap@@72) (MapType0Type refType MapType1Type))) (= (type |f#0@@28|) HandleTypeType)) (= (type |run#0@@16|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $ly@@54 $Heap@@72 |f#0@@28| |run#0@@16|) (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $LZ $Heap@@72 |f#0@@28| |run#0@@16|))) :qid |unknown.0:0| :skolemid |11518| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 (AsFuelBottom $ly@@54) $Heap@@72 |f#0@@28| |run#0@@16|)) )))
(assert (forall ((Sequences._default.Apply$E@@1 T@U) (Sequences._default.Apply$R@@1 T@U) ($ly@@55 T@U) ($h0@@17 T@U) ($h1@@17 T@U) (|f#0@@29| T@U) (|run#0@@17| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@1) TyType) (= (type Sequences._default.Apply$R@@1) TyType)) (= (type $ly@@55) LayerTypeType)) (= (type $h0@@17) (MapType0Type refType MapType1Type))) (= (type $h1@@17) (MapType0Type refType MapType1Type))) (= (type |f#0@@29|) HandleTypeType)) (= (type |run#0@@17|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@17) ($IsGoodHeap $h1@@17)) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@17 |f#0@@29| |run#0@@17|) (and ($Is |f#0@@29| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1)) ($Is |run#0@@17| (TSeq Sequences._default.Apply$E@@1))))) (and ($IsHeapAnchor $h0@@17) ($HeapSucc $h0@@17 $h1@@17)))) (forall (($o@@43 T@U) ($f@@17 T@U) ) (! (let ((alpha@@24 (FieldTypeInv0 (type $f@@17)))) (=> (and (and (= (type $o@@43) refType) (= (type $f@@17) (FieldType alpha@@24))) (and (not (= $o@@43 null)) (exists ((|i#0@@49| Int) (|o#0@@5| T@U) ) (!  (and (= (type |o#0@@5|) refType) (and (and ($Is |o#0@@5| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@49|) (< |i#0@@49| (|Seq#Length| |run#0@@17|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@17 |f#0@@29| (|Seq#Index| |run#0@@17| |i#0@@49|)) ($Box |o#0@@5|))))) (= ($Box $o@@43) ($Box |o#0@@5|)))) :qid |sequence.121:15| :skolemid |11519| :pattern ( (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@17 |f#0@@29| (|Seq#Index| |run#0@@17| |i#0@@49|)) ($Box |o#0@@5|))) )))) (= (MapType1Select (MapType0Select $h0@@17 $o@@43) $f@@17) (MapType1Select (MapType0Select $h1@@17 $o@@43) $f@@17)))) :qid |unknown.0:0| :skolemid |11520| :no-pattern (type $o@@43) :no-pattern (type $f@@17) :no-pattern (U_2_int $o@@43) :no-pattern (U_2_bool $o@@43) :no-pattern (U_2_int $f@@17) :no-pattern (U_2_bool $f@@17) ))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@55 $h0@@17 |f#0@@29| |run#0@@17|) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@55 $h1@@17 |f#0@@29| |run#0@@17|))) :qid |unknown.0:0| :skolemid |11521| :pattern ( ($IsHeapAnchor $h0@@17) ($HeapSucc $h0@@17 $h1@@17) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@55 $h1@@17 |f#0@@29| |run#0@@17|)) )))
(assert  (=> true (forall ((Sequences._default.Apply$E@@2 T@U) (Sequences._default.Apply$R@@2 T@U) ($ly@@56 T@U) ($Heap@@73 T@U) (|f#0@@30| T@U) (|run#0@@18| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@2) TyType) (= (type Sequences._default.Apply$R@@2) TyType)) (= (type $ly@@56) LayerTypeType)) (= (type $Heap@@73) (MapType0Type refType MapType1Type))) (= (type |f#0@@30|) HandleTypeType)) (= (type |run#0@@18|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@73 |f#0@@30| |run#0@@18|) (and (and (and ($IsGoodHeap $Heap@@73) ($Is |f#0@@30| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2))) ($Is |run#0@@18| (TSeq Sequences._default.Apply$E@@2))) (forall ((|i#4@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#4@@4|) (< |i#4@@4| (|Seq#Length| |run#0@@18|))) (Requires1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@73 |f#0@@30| (|Seq#Index| |run#0@@18| |i#4@@4|)))) :qid |sequence.118:21| :skolemid |11522| :pattern ( (|Seq#Index| |run#0@@18| |i#4@@4|)) ))))) (and (and (= (|Seq#Length| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@56 $Heap@@73 |f#0@@30| |run#0@@18|)) (|Seq#Length| |run#0@@18|)) (forall ((|i#5@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#5@@3|) (< |i#5@@3| (|Seq#Length| |run#0@@18|))) (= (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@56 $Heap@@73 |f#0@@30| |run#0@@18|) |i#5@@3|) (Apply1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@73 |f#0@@30| (|Seq#Index| |run#0@@18| |i#5@@3|))))) :qid |sequence.120:20| :skolemid |11523| :pattern ( (|Seq#Index| |run#0@@18| |i#5@@3|)) :pattern ( (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@56 $Heap@@73 |f#0@@30| |run#0@@18|) |i#5@@3|)) ))) ($Is (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@56 $Heap@@73 |f#0@@30| |run#0@@18|) (TSeq Sequences._default.Apply$R@@2)))) :qid |unknown.0:0| :skolemid |11524| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@56 $Heap@@73 |f#0@@30| |run#0@@18|)) ))))
(assert (forall ((Sequences._default.Apply$E@@3 T@U) (Sequences._default.Apply$R@@3 T@U) ($ly@@57 T@U) ($Heap@@74 T@U) (|f#0@@31| T@U) (|run#0@@19| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@3) TyType) (= (type Sequences._default.Apply$R@@3) TyType)) (= (type $ly@@57) LayerTypeType)) (= (type $Heap@@74) (MapType0Type refType MapType1Type))) (= (type |f#0@@31|) HandleTypeType)) (= (type |run#0@@19|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@74) ($Is |f#0@@31| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3))) ($Is |run#0@@19| (TSeq Sequences._default.Apply$E@@3)))) (and (=> (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@57 $Heap@@74 |f#0@@31| |run#0@@19|) (forall ((|i#6@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#6@@2|) (< |i#6@@2| (|Seq#Length| |run#0@@19|))) (Requires1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $Heap@@74 |f#0@@31| (|Seq#Index| |run#0@@19| |i#6@@2|)))) :qid |sequence.118:21| :skolemid |11525| :pattern ( (|Seq#Index| |run#0@@19| |i#6@@2|)) ))) (=> (forall ((|i#6@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#6@@3|) (< |i#6@@3| (|Seq#Length| |run#0@@19|))) (Requires1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $Heap@@74 |f#0@@31| (|Seq#Index| |run#0@@19| |i#6@@3|)))) :qid |sequence.118:21| :skolemid |11525| :pattern ( (|Seq#Index| |run#0@@19| |i#6@@3|)) )) (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@57 $Heap@@74 |f#0@@31| |run#0@@19|)))) :qid |unknown.0:0| :skolemid |11526| :pattern ( (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@57 $Heap@@74 |f#0@@31| |run#0@@19|)) )))
(assert  (=> true (forall ((Sequences._default.Apply$E@@4 T@U) (Sequences._default.Apply$R@@4 T@U) ($ly@@58 T@U) ($Heap@@75 T@U) (|f#0@@32| T@U) (|run#0@@20| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@4) TyType) (= (type Sequences._default.Apply$R@@4) TyType)) (= (type $ly@@58) LayerTypeType)) (= (type $Heap@@75) (MapType0Type refType MapType1Type))) (= (type |f#0@@32|) HandleTypeType)) (= (type |run#0@@20|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@75 |f#0@@32| |run#0@@20|) (and (and (and ($IsGoodHeap $Heap@@75) ($Is |f#0@@32| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4))) ($Is |run#0@@20| (TSeq Sequences._default.Apply$E@@4))) (forall ((|i#6@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#6@@4|) (< |i#6@@4| (|Seq#Length| |run#0@@20|))) (Requires1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@75 |f#0@@32| (|Seq#Index| |run#0@@20| |i#6@@4|)))) :qid |sequence.118:21| :skolemid |11525| :pattern ( (|Seq#Index| |run#0@@20| |i#6@@4|)) ))))) (and (=> (not (= (|Seq#Length| |run#0@@20|) (LitInt 0))) (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@75 |f#0@@32| (|Seq#Drop| |run#0@@20| (LitInt 1)))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@58) $Heap@@75 |f#0@@32| |run#0@@20|) (ite (= (|Seq#Length| |run#0@@20|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Apply1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@75 |f#0@@32| (|Seq#Index| |run#0@@20| (LitInt 0)))) (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $ly@@58 $Heap@@75 |f#0@@32| (|Seq#Drop| |run#0@@20| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |11527| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@58) $Heap@@75 |f#0@@32| |run#0@@20|)) ))))
(assert (forall ((arg0@@263 T@U) (arg1@@130 T@U) (arg2@@74 T@U) (arg3@@47 T@U) (arg4@@32 T@U) (arg5@@17 T@U) ) (! (= (type (Sequences.__default.ApplyOpaque arg0@@263 arg1@@130 arg2@@74 arg3@@47 arg4@@32 arg5@@17)) (SeqType BoxType)) :qid |funType:Sequences.__default.ApplyOpaque| :pattern ( (Sequences.__default.ApplyOpaque arg0@@263 arg1@@130 arg2@@74 arg3@@47 arg4@@32 arg5@@17)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E T@U) (Sequences._default.ApplyOpaque$R T@U) ($ly@@59 T@U) ($Heap@@76 T@U) (|f#0@@33| T@U) (|run#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E) TyType) (= (type Sequences._default.ApplyOpaque$R) TyType)) (= (type $ly@@59) LayerTypeType)) (= (type $Heap@@76) (MapType0Type refType MapType1Type))) (= (type |f#0@@33|) HandleTypeType)) (= (type |run#0@@21|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@59) $Heap@@76 |f#0@@33| |run#0@@21|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R $ly@@59 $Heap@@76 |f#0@@33| |run#0@@21|))) :qid |unknown.0:0| :skolemid |11528| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@59) $Heap@@76 |f#0@@33| |run#0@@21|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@0 T@U) (Sequences._default.ApplyOpaque$R@@0 T@U) ($ly@@60 T@U) ($Heap@@77 T@U) (|f#0@@34| T@U) (|run#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@0) TyType) (= (type Sequences._default.ApplyOpaque$R@@0) TyType)) (= (type $ly@@60) LayerTypeType)) (= (type $Heap@@77) (MapType0Type refType MapType1Type))) (= (type |f#0@@34|) HandleTypeType)) (= (type |run#0@@22|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $ly@@60 $Heap@@77 |f#0@@34| |run#0@@22|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $LZ $Heap@@77 |f#0@@34| |run#0@@22|))) :qid |unknown.0:0| :skolemid |11529| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 (AsFuelBottom $ly@@60) $Heap@@77 |f#0@@34| |run#0@@22|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@1 T@U) (Sequences._default.ApplyOpaque$R@@1 T@U) ($ly@@61 T@U) ($h0@@18 T@U) ($h1@@18 T@U) (|f#0@@35| T@U) (|run#0@@23| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@1) TyType) (= (type Sequences._default.ApplyOpaque$R@@1) TyType)) (= (type $ly@@61) LayerTypeType)) (= (type $h0@@18) (MapType0Type refType MapType1Type))) (= (type $h1@@18) (MapType0Type refType MapType1Type))) (= (type |f#0@@35|) HandleTypeType)) (= (type |run#0@@23|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@18) ($IsGoodHeap $h1@@18)) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@18 |f#0@@35| |run#0@@23|) (and ($Is |f#0@@35| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1)) ($Is |run#0@@23| (TSeq Sequences._default.ApplyOpaque$E@@1))))) (and ($IsHeapAnchor $h0@@18) ($HeapSucc $h0@@18 $h1@@18)))) (forall (($o@@44 T@U) ($f@@18 T@U) ) (! (let ((alpha@@25 (FieldTypeInv0 (type $f@@18)))) (=> (and (and (= (type $o@@44) refType) (= (type $f@@18) (FieldType alpha@@25))) (and (not (= $o@@44 null)) (exists ((|i#0@@50| Int) (|o#0@@6| T@U) ) (!  (and (= (type |o#0@@6|) refType) (and (and ($Is |o#0@@6| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@50|) (< |i#0@@50| (|Seq#Length| |run#0@@23|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@18 |f#0@@35| (|Seq#Index| |run#0@@23| |i#0@@50|)) ($Box |o#0@@6|))))) (= ($Box $o@@44) ($Box |o#0@@6|)))) :qid |sequence.132:15| :skolemid |11530| :pattern ( (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@18 |f#0@@35| (|Seq#Index| |run#0@@23| |i#0@@50|)) ($Box |o#0@@6|))) )))) (= (MapType1Select (MapType0Select $h0@@18 $o@@44) $f@@18) (MapType1Select (MapType0Select $h1@@18 $o@@44) $f@@18)))) :qid |unknown.0:0| :skolemid |11531| :no-pattern (type $o@@44) :no-pattern (type $f@@18) :no-pattern (U_2_int $o@@44) :no-pattern (U_2_bool $o@@44) :no-pattern (U_2_int $f@@18) :no-pattern (U_2_bool $f@@18) ))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@61 $h0@@18 |f#0@@35| |run#0@@23|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@61 $h1@@18 |f#0@@35| |run#0@@23|))) :qid |unknown.0:0| :skolemid |11532| :pattern ( ($IsHeapAnchor $h0@@18) ($HeapSucc $h0@@18 $h1@@18) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@61 $h1@@18 |f#0@@35| |run#0@@23|)) )))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@2 T@U) (Sequences._default.ApplyOpaque$R@@2 T@U) ($ly@@62 T@U) ($Heap@@78 T@U) (|f#0@@36| T@U) (|run#0@@24| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@2) TyType) (= (type Sequences._default.ApplyOpaque$R@@2) TyType)) (= (type $ly@@62) LayerTypeType)) (= (type $Heap@@78) (MapType0Type refType MapType1Type))) (= (type |f#0@@36|) HandleTypeType)) (= (type |run#0@@24|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@78 |f#0@@36| |run#0@@24|) (and (and (and ($IsGoodHeap $Heap@@78) ($Is |f#0@@36| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2))) ($Is |run#0@@24| (TSeq Sequences._default.ApplyOpaque$E@@2))) (forall ((|i#4@@5| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#4@@5|) (< |i#4@@5| (|Seq#Length| |run#0@@24|))) (Requires1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@78 |f#0@@36| (|Seq#Index| |run#0@@24| |i#4@@5|)))) :qid |sequence.129:21| :skolemid |11533| :pattern ( (|Seq#Index| |run#0@@24| |i#4@@5|)) ))))) (and (and (= (|Seq#Length| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@62 $Heap@@78 |f#0@@36| |run#0@@24|)) (|Seq#Length| |run#0@@24|)) (forall ((|i#5@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#5@@4|) (< |i#5@@4| (|Seq#Length| |run#0@@24|))) (= (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@62 $Heap@@78 |f#0@@36| |run#0@@24|) |i#5@@4|) (Apply1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@78 |f#0@@36| (|Seq#Index| |run#0@@24| |i#5@@4|))))) :qid |sequence.131:20| :skolemid |11534| :pattern ( (|Seq#Index| |run#0@@24| |i#5@@4|)) :pattern ( (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@62 $Heap@@78 |f#0@@36| |run#0@@24|) |i#5@@4|)) ))) ($Is (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@62 $Heap@@78 |f#0@@36| |run#0@@24|) (TSeq Sequences._default.ApplyOpaque$R@@2)))) :qid |unknown.0:0| :skolemid |11535| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@62 $Heap@@78 |f#0@@36| |run#0@@24|)) ))))
(assert (forall ((Sequences._default.ApplyOpaque$E@@3 T@U) (Sequences._default.ApplyOpaque$R@@3 T@U) ($ly@@63 T@U) ($Heap@@79 T@U) (|f#0@@37| T@U) (|run#0@@25| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@3) TyType) (= (type Sequences._default.ApplyOpaque$R@@3) TyType)) (= (type $ly@@63) LayerTypeType)) (= (type $Heap@@79) (MapType0Type refType MapType1Type))) (= (type |f#0@@37|) HandleTypeType)) (= (type |run#0@@25|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@79) ($Is |f#0@@37| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3))) ($Is |run#0@@25| (TSeq Sequences._default.ApplyOpaque$E@@3)))) (and (=> (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@63 $Heap@@79 |f#0@@37| |run#0@@25|) (forall ((|i#6@@5| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#6@@5|) (< |i#6@@5| (|Seq#Length| |run#0@@25|))) (Requires1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $Heap@@79 |f#0@@37| (|Seq#Index| |run#0@@25| |i#6@@5|)))) :qid |sequence.129:21| :skolemid |11536| :pattern ( (|Seq#Index| |run#0@@25| |i#6@@5|)) ))) (=> (forall ((|i#6@@6| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#6@@6|) (< |i#6@@6| (|Seq#Length| |run#0@@25|))) (Requires1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $Heap@@79 |f#0@@37| (|Seq#Index| |run#0@@25| |i#6@@6|)))) :qid |sequence.129:21| :skolemid |11536| :pattern ( (|Seq#Index| |run#0@@25| |i#6@@6|)) )) (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@63 $Heap@@79 |f#0@@37| |run#0@@25|)))) :qid |unknown.0:0| :skolemid |11537| :pattern ( (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@63 $Heap@@79 |f#0@@37| |run#0@@25|)) )))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@4 T@U) (Sequences._default.ApplyOpaque$R@@4 T@U) ($ly@@64 T@U) ($Heap@@80 T@U) (|f#0@@38| T@U) (|run#0@@26| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@4) TyType) (= (type Sequences._default.ApplyOpaque$R@@4) TyType)) (= (type $ly@@64) LayerTypeType)) (= (type $Heap@@80) (MapType0Type refType MapType1Type))) (= (type |f#0@@38|) HandleTypeType)) (= (type |run#0@@26|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@80 |f#0@@38| |run#0@@26|) (and (and (and ($IsGoodHeap $Heap@@80) ($Is |f#0@@38| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4))) ($Is |run#0@@26| (TSeq Sequences._default.ApplyOpaque$E@@4))) (forall ((|i#6@@7| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#6@@7|) (< |i#6@@7| (|Seq#Length| |run#0@@26|))) (Requires1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@80 |f#0@@38| (|Seq#Index| |run#0@@26| |i#6@@7|)))) :qid |sequence.129:21| :skolemid |11536| :pattern ( (|Seq#Index| |run#0@@26| |i#6@@7|)) ))))) (and (|Sequences.__default.Apply#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@80 |f#0@@38| |run#0@@26|) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@64) $Heap@@80 |f#0@@38| |run#0@@26|) (Sequences.__default.Apply Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $LZ) $Heap@@80 |f#0@@38| |run#0@@26|)))) :qid |unknown.0:0| :skolemid |11538| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@64) $Heap@@80 |f#0@@38| |run#0@@26|)) ))))
(assert (forall ((arg0@@264 T@U) (arg1@@131 T@U) (arg2@@75 T@U) (arg3@@48 T@U) (arg4@@33 T@U) ) (! (= (type (Sequences.__default.Filter arg0@@264 arg1@@131 arg2@@75 arg3@@48 arg4@@33)) (SeqType BoxType)) :qid |funType:Sequences.__default.Filter| :pattern ( (Sequences.__default.Filter arg0@@264 arg1@@131 arg2@@75 arg3@@48 arg4@@33)) )))
(assert (forall ((Sequences._default.Filter$E T@U) ($ly@@65 T@U) ($Heap@@81 T@U) (|f#0@@39| T@U) (|run#0@@27| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E) TyType) (= (type $ly@@65) LayerTypeType)) (= (type $Heap@@81) (MapType0Type refType MapType1Type))) (= (type |f#0@@39|) HandleTypeType)) (= (type |run#0@@27|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@65) $Heap@@81 |f#0@@39| |run#0@@27|) (Sequences.__default.Filter Sequences._default.Filter$E $ly@@65 $Heap@@81 |f#0@@39| |run#0@@27|))) :qid |unknown.0:0| :skolemid |11539| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@65) $Heap@@81 |f#0@@39| |run#0@@27|)) )))
(assert (forall ((Sequences._default.Filter$E@@0 T@U) ($ly@@66 T@U) ($Heap@@82 T@U) (|f#0@@40| T@U) (|run#0@@28| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E@@0) TyType) (= (type $ly@@66) LayerTypeType)) (= (type $Heap@@82) (MapType0Type refType MapType1Type))) (= (type |f#0@@40|) HandleTypeType)) (= (type |run#0@@28|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@0 $ly@@66 $Heap@@82 |f#0@@40| |run#0@@28|) (Sequences.__default.Filter Sequences._default.Filter$E@@0 $LZ $Heap@@82 |f#0@@40| |run#0@@28|))) :qid |unknown.0:0| :skolemid |11540| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@0 (AsFuelBottom $ly@@66) $Heap@@82 |f#0@@40| |run#0@@28|)) )))
(assert (forall ((Sequences._default.Filter$E@@1 T@U) ($ly@@67 T@U) ($h0@@19 T@U) ($h1@@19 T@U) (|f#0@@41| T@U) (|run#0@@29| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.Filter$E@@1) TyType) (= (type $ly@@67) LayerTypeType)) (= (type $h0@@19) (MapType0Type refType MapType1Type))) (= (type $h1@@19) (MapType0Type refType MapType1Type))) (= (type |f#0@@41|) HandleTypeType)) (= (type |run#0@@29|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@19) ($IsGoodHeap $h1@@19)) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@1 $h0@@19 |f#0@@41| |run#0@@29|) (and ($Is |f#0@@41| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@1 TBool)) ($Is |run#0@@29| (TSeq Sequences._default.Filter$E@@1))))) (and ($IsHeapAnchor $h0@@19) ($HeapSucc $h0@@19 $h1@@19)))) (forall (($o@@45 T@U) ($f@@19 T@U) ) (! (let ((alpha@@26 (FieldTypeInv0 (type $f@@19)))) (=> (and (and (= (type $o@@45) refType) (= (type $f@@19) (FieldType alpha@@26))) (and (not (= $o@@45 null)) (exists ((|_x1#0| T@U) (|_o1#0| T@U) ) (!  (and (and (= (type |_x1#0|) BoxType) (= (type |_o1#0|) refType)) (and (and (and ($IsBox |_x1#0| Sequences._default.Filter$E@@1) ($Is |_o1#0| Tclass._System.object?)) (U_2_bool (MapType0Select (Reads1 Sequences._default.Filter$E@@1 TBool $h0@@19 |f#0@@41| |_x1#0|) ($Box |_o1#0|)))) (= ($Box $o@@45) ($Box |_o1#0|)))) :qid |sequence.141:13| :skolemid |11541| :no-pattern (type |_x1#0|) :no-pattern (type |_o1#0|) :no-pattern (U_2_int |_x1#0|) :no-pattern (U_2_bool |_x1#0|) :no-pattern (U_2_int |_o1#0|) :no-pattern (U_2_bool |_o1#0|) )))) (= (MapType1Select (MapType0Select $h0@@19 $o@@45) $f@@19) (MapType1Select (MapType0Select $h1@@19 $o@@45) $f@@19)))) :qid |unknown.0:0| :skolemid |11542| :no-pattern (type $o@@45) :no-pattern (type $f@@19) :no-pattern (U_2_int $o@@45) :no-pattern (U_2_bool $o@@45) :no-pattern (U_2_int $f@@19) :no-pattern (U_2_bool $f@@19) ))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@67 $h0@@19 |f#0@@41| |run#0@@29|) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@67 $h1@@19 |f#0@@41| |run#0@@29|))) :qid |unknown.0:0| :skolemid |11543| :pattern ( ($IsHeapAnchor $h0@@19) ($HeapSucc $h0@@19 $h1@@19) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@67 $h1@@19 |f#0@@41| |run#0@@29|)) )))
(assert  (=> true (forall ((Sequences._default.Filter$E@@2 T@U) ($ly@@68 T@U) ($Heap@@83 T@U) (|f#0@@42| T@U) (|run#0@@30| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@2) TyType) (= (type $ly@@68) LayerTypeType)) (= (type $Heap@@83) (MapType0Type refType MapType1Type))) (= (type |f#0@@42|) HandleTypeType)) (= (type |run#0@@30|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@2 $Heap@@83 |f#0@@42| |run#0@@30|) (and (and (and ($IsGoodHeap $Heap@@83) ($Is |f#0@@42| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@2 TBool))) ($Is |run#0@@30| (TSeq Sequences._default.Filter$E@@2))) (forall ((|i#3@@6| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@6|) (< |i#3@@6| (|Seq#Length| |run#0@@30|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@83 |f#0@@42| (|Seq#Index| |run#0@@30| |i#3@@6|)))) :qid |sequence.138:21| :skolemid |11544| :pattern ( (|Seq#Index| |run#0@@30| |i#3@@6|)) ))))) (and (and (<= (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@68 $Heap@@83 |f#0@@42| |run#0@@30|)) (|Seq#Length| |run#0@@30|)) (forall ((|i#4@@6| Int) ) (!  (=> (<= (LitInt 0) |i#4@@6|) (=> (and (< |i#4@@6| (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@68 $Heap@@83 |f#0@@42| |run#0@@30|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@83 |f#0@@42| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@68 $Heap@@83 |f#0@@42| |run#0@@30|) |i#4@@6|))) (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@2 TBool $Heap@@83 |f#0@@42| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@68 $Heap@@83 |f#0@@42| |run#0@@30|) |i#4@@6|)))))) :qid |sequence.140:20| :skolemid |11545| :pattern ( (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@68 $Heap@@83 |f#0@@42| |run#0@@30|) |i#4@@6|)) ))) ($Is (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@68 $Heap@@83 |f#0@@42| |run#0@@30|) (TSeq Sequences._default.Filter$E@@2)))) :qid |unknown.0:0| :skolemid |11546| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@68 $Heap@@83 |f#0@@42| |run#0@@30|)) ))))
(assert (forall ((Sequences._default.Filter$E@@3 T@U) ($ly@@69 T@U) ($Heap@@84 T@U) (|f#0@@43| T@U) (|run#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@3) TyType) (= (type $ly@@69) LayerTypeType)) (= (type $Heap@@84) (MapType0Type refType MapType1Type))) (= (type |f#0@@43|) HandleTypeType)) (= (type |run#0@@31|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@84) ($Is |f#0@@43| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@3 TBool))) ($Is |run#0@@31| (TSeq Sequences._default.Filter$E@@3)))) (and (=> (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@69 $Heap@@84 |f#0@@43| |run#0@@31|) (forall ((|i#5@@5| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#5@@5|) (< |i#5@@5| (|Seq#Length| |run#0@@31|))) (Requires1 Sequences._default.Filter$E@@3 TBool $Heap@@84 |f#0@@43| (|Seq#Index| |run#0@@31| |i#5@@5|)))) :qid |sequence.138:21| :skolemid |11547| :pattern ( (|Seq#Index| |run#0@@31| |i#5@@5|)) ))) (=> (forall ((|i#5@@6| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#5@@6|) (< |i#5@@6| (|Seq#Length| |run#0@@31|))) (Requires1 Sequences._default.Filter$E@@3 TBool $Heap@@84 |f#0@@43| (|Seq#Index| |run#0@@31| |i#5@@6|)))) :qid |sequence.138:21| :skolemid |11547| :pattern ( (|Seq#Index| |run#0@@31| |i#5@@6|)) )) (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@69 $Heap@@84 |f#0@@43| |run#0@@31|)))) :qid |unknown.0:0| :skolemid |11548| :pattern ( (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@69 $Heap@@84 |f#0@@43| |run#0@@31|)) )))
(assert  (=> true (forall ((Sequences._default.Filter$E@@4 T@U) ($ly@@70 T@U) ($Heap@@85 T@U) (|f#0@@44| T@U) (|run#0@@32| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@4) TyType) (= (type $ly@@70) LayerTypeType)) (= (type $Heap@@85) (MapType0Type refType MapType1Type))) (= (type |f#0@@44|) HandleTypeType)) (= (type |run#0@@32|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@85 |f#0@@44| |run#0@@32|) (and (and (and ($IsGoodHeap $Heap@@85) ($Is |f#0@@44| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@4 TBool))) ($Is |run#0@@32| (TSeq Sequences._default.Filter$E@@4))) (forall ((|i#5@@7| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#5@@7|) (< |i#5@@7| (|Seq#Length| |run#0@@32|))) (Requires1 Sequences._default.Filter$E@@4 TBool $Heap@@85 |f#0@@44| (|Seq#Index| |run#0@@32| |i#5@@7|)))) :qid |sequence.138:21| :skolemid |11547| :pattern ( (|Seq#Index| |run#0@@32| |i#5@@7|)) ))))) (and (=> (not (= (|Seq#Length| |run#0@@32|) (LitInt 0))) (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@85 |f#0@@44| (|Seq#Drop| |run#0@@32| (LitInt 1)))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@70) $Heap@@85 |f#0@@44| |run#0@@32|) (ite (= (|Seq#Length| |run#0@@32|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ite (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@4 TBool $Heap@@85 |f#0@@44| (|Seq#Index| |run#0@@32| (LitInt 0))))) (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |run#0@@32| (LitInt 0))) (|Seq#Empty| BoxType)) (Sequences.__default.Filter Sequences._default.Filter$E@@4 $ly@@70 $Heap@@85 |f#0@@44| (|Seq#Drop| |run#0@@32| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |11549| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@70) $Heap@@85 |f#0@@44| |run#0@@32|)) ))))
(assert (forall ((arg0@@265 T@U) (arg1@@132 T@U) (arg2@@76 T@U) (arg3@@49 T@U) (arg4@@34 T@U) (arg5@@18 T@U) ) (! (= (type (Sequences.__default.FoldLeft arg0@@265 arg1@@132 arg2@@76 arg3@@49 arg4@@34 arg5@@18)) BoxType) :qid |funType:Sequences.__default.FoldLeft| :pattern ( (Sequences.__default.FoldLeft arg0@@265 arg1@@132 arg2@@76 arg3@@49 arg4@@34 arg5@@18)) )))
(assert (forall ((Sequences._default.FoldLeft$A T@U) (Sequences._default.FoldLeft$E T@U) ($ly@@71 T@U) (|f#0@@45| T@U) (|init#0| T@U) (|run#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A) TyType) (= (type Sequences._default.FoldLeft$E) TyType)) (= (type $ly@@71) LayerTypeType)) (= (type |f#0@@45|) HandleTypeType)) (= (type |init#0|) BoxType)) (= (type |run#0@@33|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@71) |f#0@@45| |init#0| |run#0@@33|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E $ly@@71 |f#0@@45| |init#0| |run#0@@33|))) :qid |unknown.0:0| :skolemid |11550| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@71) |f#0@@45| |init#0| |run#0@@33|)) )))
(assert (forall ((Sequences._default.FoldLeft$A@@0 T@U) (Sequences._default.FoldLeft$E@@0 T@U) ($ly@@72 T@U) (|f#0@@46| T@U) (|init#0@@0| T@U) (|run#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@0) TyType) (= (type Sequences._default.FoldLeft$E@@0) TyType)) (= (type $ly@@72) LayerTypeType)) (= (type |f#0@@46|) HandleTypeType)) (= (type |init#0@@0|) BoxType)) (= (type |run#0@@34|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $ly@@72 |f#0@@46| |init#0@@0| |run#0@@34|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $LZ |f#0@@46| |init#0@@0| |run#0@@34|))) :qid |unknown.0:0| :skolemid |11551| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 (AsFuelBottom $ly@@72) |f#0@@46| |init#0@@0| |run#0@@34|)) )))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@1 T@U) (Sequences._default.FoldLeft$E@@1 T@U) ($ly@@73 T@U) (|f#0@@47| T@U) (|init#0@@1| T@U) (|run#0@@35| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@1) TyType) (= (type Sequences._default.FoldLeft$E@@1) TyType)) (= (type $ly@@73) LayerTypeType)) (= (type |f#0@@47|) HandleTypeType)) (= (type |init#0@@1|) BoxType)) (= (type |run#0@@35|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 |f#0@@47| |init#0@@1| |run#0@@35|) (and (and ($Is |f#0@@47| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 Sequences._default.FoldLeft$A@@1)) ($IsBox |init#0@@1| Sequences._default.FoldLeft$A@@1)) ($Is |run#0@@35| (TSeq Sequences._default.FoldLeft$E@@1))))) ($IsBox (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@73 |f#0@@47| |init#0@@1| |run#0@@35|) Sequences._default.FoldLeft$A@@1)) :qid |unknown.0:0| :skolemid |11552| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@73 |f#0@@47| |init#0@@1| |run#0@@35|)) ))))
(assert (forall ((Sequences._default.FoldLeft$A@@2 T@U) (Sequences._default.FoldLeft$E@@2 T@U) ($ly@@74 T@U) ($Heap@@86 T@U) (|f#0@@48| T@U) (|init#0@@2| T@U) (|run#0@@36| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@2) TyType) (= (type Sequences._default.FoldLeft$E@@2) TyType)) (= (type $ly@@74) LayerTypeType)) (= (type $Heap@@86) (MapType0Type refType MapType1Type))) (= (type |f#0@@48|) HandleTypeType)) (= (type |init#0@@2|) BoxType)) (= (type |run#0@@36|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@86) ($Is |f#0@@48| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 Sequences._default.FoldLeft$A@@2))) ($IsBox |init#0@@2| Sequences._default.FoldLeft$A@@2)) ($Is |run#0@@36| (TSeq Sequences._default.FoldLeft$E@@2)))) (and (=> (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@74 |f#0@@48| |init#0@@2| |run#0@@36|) true) (=> true (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@74 |f#0@@48| |init#0@@2| |run#0@@36|)))) :qid |unknown.0:0| :skolemid |11553| :pattern ( (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@74 |f#0@@48| |init#0@@2| |run#0@@36|) ($IsGoodHeap $Heap@@86)) )))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@3 T@U) (Sequences._default.FoldLeft$E@@3 T@U) ($ly@@75 T@U) ($Heap@@87 T@U) (|f#0@@49| T@U) (|init#0@@3| T@U) (|run#0@@37| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@3) TyType) (= (type Sequences._default.FoldLeft$E@@3) TyType)) (= (type $ly@@75) LayerTypeType)) (= (type $Heap@@87) (MapType0Type refType MapType1Type))) (= (type |f#0@@49|) HandleTypeType)) (= (type |init#0@@3|) BoxType)) (= (type |run#0@@37|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@49| |init#0@@3| |run#0@@37|) (and (and (and ($IsGoodHeap $Heap@@87) ($Is |f#0@@49| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3))) ($IsBox |init#0@@3| Sequences._default.FoldLeft$A@@3)) ($Is |run#0@@37| (TSeq Sequences._default.FoldLeft$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@37|) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@49| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@87 |f#0@@49| |init#0@@3| (|Seq#Index| |run#0@@37| (LitInt 0))) (|Seq#Drop| |run#0@@37| (LitInt 1)))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@75) |f#0@@49| |init#0@@3| |run#0@@37|) (ite (= (|Seq#Length| |run#0@@37|) (LitInt 0)) |init#0@@3| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 $ly@@75 |f#0@@49| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@87 |f#0@@49| |init#0@@3| (|Seq#Index| |run#0@@37| (LitInt 0))) (|Seq#Drop| |run#0@@37| (LitInt 1))))))) :qid |unknown.0:0| :skolemid |11554| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@75) |f#0@@49| |init#0@@3| |run#0@@37|) ($IsGoodHeap $Heap@@87)) ))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@4 T@U) (Sequences._default.FoldLeft$E@@4 T@U) ($ly@@76 T@U) ($Heap@@88 T@U) (|f#0@@50| T@U) (|init#0@@4| T@U) (|run#0@@38| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@4) TyType) (= (type Sequences._default.FoldLeft$E@@4) TyType)) (= (type $ly@@76) LayerTypeType)) (= (type $Heap@@88) (MapType0Type refType MapType1Type))) (= (type |f#0@@50|) HandleTypeType)) (= (type |init#0@@4|) BoxType)) (= (type |run#0@@38|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@50| |init#0@@4| (Lit |run#0@@38|)) (and (and (and ($IsGoodHeap $Heap@@88) ($Is |f#0@@50| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4))) ($IsBox |init#0@@4| Sequences._default.FoldLeft$A@@4)) ($Is |run#0@@38| (TSeq Sequences._default.FoldLeft$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@38|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@50| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@88 |f#0@@50| |init#0@@4| (|Seq#Index| (Lit |run#0@@38|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@38|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@76) |f#0@@50| |init#0@@4| (Lit |run#0@@38|)) (ite (= (|Seq#Length| (Lit |run#0@@38|)) (LitInt 0)) |init#0@@4| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@76) |f#0@@50| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@88 |f#0@@50| |init#0@@4| (|Seq#Index| (Lit |run#0@@38|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@38|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |11555| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@76) |f#0@@50| |init#0@@4| (Lit |run#0@@38|)) ($IsGoodHeap $Heap@@88)) ))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@5 T@U) (Sequences._default.FoldLeft$E@@5 T@U) ($ly@@77 T@U) ($Heap@@89 T@U) (|f#0@@51| T@U) (|init#0@@5| T@U) (|run#0@@39| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@5) TyType) (= (type Sequences._default.FoldLeft$E@@5) TyType)) (= (type $ly@@77) LayerTypeType)) (= (type $Heap@@89) (MapType0Type refType MapType1Type))) (= (type |f#0@@51|) HandleTypeType)) (= (type |init#0@@5|) BoxType)) (= (type |run#0@@39|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@51|) (Lit |init#0@@5|) (Lit |run#0@@39|)) (and (and (and ($IsGoodHeap $Heap@@89) ($Is |f#0@@51| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5))) ($IsBox |init#0@@5| Sequences._default.FoldLeft$A@@5)) ($Is |run#0@@39| (TSeq Sequences._default.FoldLeft$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@39|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@51|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@89 (Lit |f#0@@51|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@39|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@39|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@77) (Lit |f#0@@51|) (Lit |init#0@@5|) (Lit |run#0@@39|)) (ite (= (|Seq#Length| (Lit |run#0@@39|)) (LitInt 0)) |init#0@@5| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@77) (Lit |f#0@@51|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@89 (Lit |f#0@@51|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@39|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@39|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |11556| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@77) (Lit |f#0@@51|) (Lit |init#0@@5|) (Lit |run#0@@39|)) ($IsGoodHeap $Heap@@89)) ))))
(assert (forall ((arg0@@266 T@U) (arg1@@133 T@U) (arg2@@77 T@U) (arg3@@50 T@U) (arg4@@35 T@U) (arg5@@19 T@U) ) (! (= (type (Sequences.__default.FoldRight arg0@@266 arg1@@133 arg2@@77 arg3@@50 arg4@@35 arg5@@19)) BoxType) :qid |funType:Sequences.__default.FoldRight| :pattern ( (Sequences.__default.FoldRight arg0@@266 arg1@@133 arg2@@77 arg3@@50 arg4@@35 arg5@@19)) )))
(assert (forall ((Sequences._default.FoldRight$A T@U) (Sequences._default.FoldRight$E T@U) ($ly@@78 T@U) (|f#0@@52| T@U) (|init#0@@6| T@U) (|run#0@@40| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A) TyType) (= (type Sequences._default.FoldRight$E) TyType)) (= (type $ly@@78) LayerTypeType)) (= (type |f#0@@52|) HandleTypeType)) (= (type |init#0@@6|) BoxType)) (= (type |run#0@@40|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@78) |f#0@@52| |init#0@@6| |run#0@@40|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E $ly@@78 |f#0@@52| |init#0@@6| |run#0@@40|))) :qid |unknown.0:0| :skolemid |11557| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@78) |f#0@@52| |init#0@@6| |run#0@@40|)) )))
(assert (forall ((Sequences._default.FoldRight$A@@0 T@U) (Sequences._default.FoldRight$E@@0 T@U) ($ly@@79 T@U) (|f#0@@53| T@U) (|init#0@@7| T@U) (|run#0@@41| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@0) TyType) (= (type Sequences._default.FoldRight$E@@0) TyType)) (= (type $ly@@79) LayerTypeType)) (= (type |f#0@@53|) HandleTypeType)) (= (type |init#0@@7|) BoxType)) (= (type |run#0@@41|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $ly@@79 |f#0@@53| |init#0@@7| |run#0@@41|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $LZ |f#0@@53| |init#0@@7| |run#0@@41|))) :qid |unknown.0:0| :skolemid |11558| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 (AsFuelBottom $ly@@79) |f#0@@53| |init#0@@7| |run#0@@41|)) )))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@1 T@U) (Sequences._default.FoldRight$E@@1 T@U) ($ly@@80 T@U) (|f#0@@54| T@U) (|init#0@@8| T@U) (|run#0@@42| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@1) TyType) (= (type Sequences._default.FoldRight$E@@1) TyType)) (= (type $ly@@80) LayerTypeType)) (= (type |f#0@@54|) HandleTypeType)) (= (type |init#0@@8|) BoxType)) (= (type |run#0@@42|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 |f#0@@54| |init#0@@8| |run#0@@42|) (and (and ($Is |f#0@@54| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 Sequences._default.FoldRight$A@@1)) ($IsBox |init#0@@8| Sequences._default.FoldRight$A@@1)) ($Is |run#0@@42| (TSeq Sequences._default.FoldRight$E@@1))))) ($IsBox (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@80 |f#0@@54| |init#0@@8| |run#0@@42|) Sequences._default.FoldRight$A@@1)) :qid |unknown.0:0| :skolemid |11559| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@80 |f#0@@54| |init#0@@8| |run#0@@42|)) ))))
(assert (forall ((Sequences._default.FoldRight$A@@2 T@U) (Sequences._default.FoldRight$E@@2 T@U) ($ly@@81 T@U) ($Heap@@90 T@U) (|f#0@@55| T@U) (|init#0@@9| T@U) (|run#0@@43| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@2) TyType) (= (type Sequences._default.FoldRight$E@@2) TyType)) (= (type $ly@@81) LayerTypeType)) (= (type $Heap@@90) (MapType0Type refType MapType1Type))) (= (type |f#0@@55|) HandleTypeType)) (= (type |init#0@@9|) BoxType)) (= (type |run#0@@43|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@90) ($Is |f#0@@55| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 Sequences._default.FoldRight$A@@2))) ($IsBox |init#0@@9| Sequences._default.FoldRight$A@@2)) ($Is |run#0@@43| (TSeq Sequences._default.FoldRight$E@@2)))) (and (=> (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@81 |f#0@@55| |init#0@@9| |run#0@@43|) true) (=> true (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@81 |f#0@@55| |init#0@@9| |run#0@@43|)))) :qid |unknown.0:0| :skolemid |11560| :pattern ( (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@81 |f#0@@55| |init#0@@9| |run#0@@43|) ($IsGoodHeap $Heap@@90)) )))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@3 T@U) (Sequences._default.FoldRight$E@@3 T@U) ($ly@@82 T@U) ($Heap@@91 T@U) (|f#0@@56| T@U) (|init#0@@10| T@U) (|run#0@@44| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@3) TyType) (= (type Sequences._default.FoldRight$E@@3) TyType)) (= (type $ly@@82) LayerTypeType)) (= (type $Heap@@91) (MapType0Type refType MapType1Type))) (= (type |f#0@@56|) HandleTypeType)) (= (type |init#0@@10|) BoxType)) (= (type |run#0@@44|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@56| |init#0@@10| |run#0@@44|) (and (and (and ($IsGoodHeap $Heap@@91) ($Is |f#0@@56| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3))) ($IsBox |init#0@@10| Sequences._default.FoldRight$A@@3)) ($Is |run#0@@44| (TSeq Sequences._default.FoldRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@44|) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@56| |init#0@@10| (|Seq#Drop| |run#0@@44| (LitInt 1)))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@82) |f#0@@56| |init#0@@10| |run#0@@44|) (ite (= (|Seq#Length| |run#0@@44|) (LitInt 0)) |init#0@@10| (Apply2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3 $Heap@@91 |f#0@@56| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 $ly@@82 |f#0@@56| |init#0@@10| (|Seq#Drop| |run#0@@44| (LitInt 1))) (|Seq#Index| |run#0@@44| (LitInt 0))))))) :qid |unknown.0:0| :skolemid |11561| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@82) |f#0@@56| |init#0@@10| |run#0@@44|) ($IsGoodHeap $Heap@@91)) ))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@4 T@U) (Sequences._default.FoldRight$E@@4 T@U) ($ly@@83 T@U) ($Heap@@92 T@U) (|f#0@@57| T@U) (|init#0@@11| T@U) (|run#0@@45| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@4) TyType) (= (type Sequences._default.FoldRight$E@@4) TyType)) (= (type $ly@@83) LayerTypeType)) (= (type $Heap@@92) (MapType0Type refType MapType1Type))) (= (type |f#0@@57|) HandleTypeType)) (= (type |init#0@@11|) BoxType)) (= (type |run#0@@45|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@57| |init#0@@11| (Lit |run#0@@45|)) (and (and (and ($IsGoodHeap $Heap@@92) ($Is |f#0@@57| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4))) ($IsBox |init#0@@11| Sequences._default.FoldRight$A@@4)) ($Is |run#0@@45| (TSeq Sequences._default.FoldRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@45|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@57| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@45|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@83) |f#0@@57| |init#0@@11| (Lit |run#0@@45|)) (ite (= (|Seq#Length| (Lit |run#0@@45|)) (LitInt 0)) |init#0@@11| (Apply2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4 $Heap@@92 |f#0@@57| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@83) |f#0@@57| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@45|) (LitInt 1)))) (|Seq#Index| (Lit |run#0@@45|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |11562| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@83) |f#0@@57| |init#0@@11| (Lit |run#0@@45|)) ($IsGoodHeap $Heap@@92)) ))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@5 T@U) (Sequences._default.FoldRight$E@@5 T@U) ($ly@@84 T@U) ($Heap@@93 T@U) (|f#0@@58| T@U) (|init#0@@12| T@U) (|run#0@@46| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@5) TyType) (= (type Sequences._default.FoldRight$E@@5) TyType)) (= (type $ly@@84) LayerTypeType)) (= (type $Heap@@93) (MapType0Type refType MapType1Type))) (= (type |f#0@@58|) HandleTypeType)) (= (type |init#0@@12|) BoxType)) (= (type |run#0@@46|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit |run#0@@46|)) (and (and (and ($IsGoodHeap $Heap@@93) ($Is |f#0@@58| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5))) ($IsBox |init#0@@12| Sequences._default.FoldRight$A@@5)) ($Is |run#0@@46| (TSeq Sequences._default.FoldRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@46|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@46|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@84) (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit |run#0@@46|)) (ite (= (|Seq#Length| (Lit |run#0@@46|)) (LitInt 0)) |init#0@@12| (Apply2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5 $Heap@@93 (Lit |f#0@@58|) (Lit (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@84) (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@46|) (LitInt 1))))) (|Seq#Index| (Lit |run#0@@46|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |11563| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@84) (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit |run#0@@46|)) ($IsGoodHeap $Heap@@93)) ))))
(assert (forall ((arg0@@267 T@U) (arg1@@134 T@U) (arg2@@78 T@U) (arg3@@51 T@U) (arg4@@36 T@U) (arg5@@20 T@U) ) (! (= (type (Sequences.__default.FoldFromRight arg0@@267 arg1@@134 arg2@@78 arg3@@51 arg4@@36 arg5@@20)) BoxType) :qid |funType:Sequences.__default.FoldFromRight| :pattern ( (Sequences.__default.FoldFromRight arg0@@267 arg1@@134 arg2@@78 arg3@@51 arg4@@36 arg5@@20)) )))
(assert (forall ((Sequences._default.FoldFromRight$A T@U) (Sequences._default.FoldFromRight$E T@U) ($ly@@85 T@U) (|f#0@@59| T@U) (|init#0@@13| T@U) (|run#0@@47| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A) TyType) (= (type Sequences._default.FoldFromRight$E) TyType)) (= (type $ly@@85) LayerTypeType)) (= (type |f#0@@59|) HandleTypeType)) (= (type |init#0@@13|) BoxType)) (= (type |run#0@@47|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@85) |f#0@@59| |init#0@@13| |run#0@@47|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E $ly@@85 |f#0@@59| |init#0@@13| |run#0@@47|))) :qid |unknown.0:0| :skolemid |11564| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@85) |f#0@@59| |init#0@@13| |run#0@@47|)) )))
(assert (forall ((Sequences._default.FoldFromRight$A@@0 T@U) (Sequences._default.FoldFromRight$E@@0 T@U) ($ly@@86 T@U) (|f#0@@60| T@U) (|init#0@@14| T@U) (|run#0@@48| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@0) TyType) (= (type Sequences._default.FoldFromRight$E@@0) TyType)) (= (type $ly@@86) LayerTypeType)) (= (type |f#0@@60|) HandleTypeType)) (= (type |init#0@@14|) BoxType)) (= (type |run#0@@48|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $ly@@86 |f#0@@60| |init#0@@14| |run#0@@48|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $LZ |f#0@@60| |init#0@@14| |run#0@@48|))) :qid |unknown.0:0| :skolemid |11565| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 (AsFuelBottom $ly@@86) |f#0@@60| |init#0@@14| |run#0@@48|)) )))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@1 T@U) (Sequences._default.FoldFromRight$E@@1 T@U) ($ly@@87 T@U) (|f#0@@61| T@U) (|init#0@@15| T@U) (|run#0@@49| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@1) TyType) (= (type Sequences._default.FoldFromRight$E@@1) TyType)) (= (type $ly@@87) LayerTypeType)) (= (type |f#0@@61|) HandleTypeType)) (= (type |init#0@@15|) BoxType)) (= (type |run#0@@49|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 |f#0@@61| |init#0@@15| |run#0@@49|) (and (and ($Is |f#0@@61| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 Sequences._default.FoldFromRight$A@@1)) ($IsBox |init#0@@15| Sequences._default.FoldFromRight$A@@1)) ($Is |run#0@@49| (TSeq Sequences._default.FoldFromRight$E@@1))))) ($IsBox (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@87 |f#0@@61| |init#0@@15| |run#0@@49|) Sequences._default.FoldFromRight$A@@1)) :qid |unknown.0:0| :skolemid |11566| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@87 |f#0@@61| |init#0@@15| |run#0@@49|)) ))))
(assert (forall ((Sequences._default.FoldFromRight$A@@2 T@U) (Sequences._default.FoldFromRight$E@@2 T@U) ($ly@@88 T@U) ($Heap@@94 T@U) (|f#0@@62| T@U) (|init#0@@16| T@U) (|run#0@@50| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@2) TyType) (= (type Sequences._default.FoldFromRight$E@@2) TyType)) (= (type $ly@@88) LayerTypeType)) (= (type $Heap@@94) (MapType0Type refType MapType1Type))) (= (type |f#0@@62|) HandleTypeType)) (= (type |init#0@@16|) BoxType)) (= (type |run#0@@50|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@94) ($Is |f#0@@62| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 Sequences._default.FoldFromRight$A@@2))) ($IsBox |init#0@@16| Sequences._default.FoldFromRight$A@@2)) ($Is |run#0@@50| (TSeq Sequences._default.FoldFromRight$E@@2)))) (and (=> (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@88 |f#0@@62| |init#0@@16| |run#0@@50|) true) (=> true (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@88 |f#0@@62| |init#0@@16| |run#0@@50|)))) :qid |unknown.0:0| :skolemid |11567| :pattern ( (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@88 |f#0@@62| |init#0@@16| |run#0@@50|) ($IsGoodHeap $Heap@@94)) )))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@3 T@U) (Sequences._default.FoldFromRight$E@@3 T@U) ($ly@@89 T@U) ($Heap@@95 T@U) (|f#0@@63| T@U) (|init#0@@17| T@U) (|run#0@@51| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@3) TyType) (= (type Sequences._default.FoldFromRight$E@@3) TyType)) (= (type $ly@@89) LayerTypeType)) (= (type $Heap@@95) (MapType0Type refType MapType1Type))) (= (type |f#0@@63|) HandleTypeType)) (= (type |init#0@@17|) BoxType)) (= (type |run#0@@51|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@63| |init#0@@17| |run#0@@51|) (and (and (and ($IsGoodHeap $Heap@@95) ($Is |f#0@@63| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3))) ($IsBox |init#0@@17| Sequences._default.FoldFromRight$A@@3)) ($Is |run#0@@51| (TSeq Sequences._default.FoldFromRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@51|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@51|) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@63| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@51|))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@51|))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@89) |f#0@@63| |init#0@@17| |run#0@@51|) (ite (= (|Seq#Length| |run#0@@51|) (LitInt 0)) |init#0@@17| (Apply2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3 $Heap@@95 |f#0@@63| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 $ly@@89 |f#0@@63| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@51|)) (Sequences.__default.Last Sequences._default.FoldFromRight$E@@3 |run#0@@51|)))))) :qid |unknown.0:0| :skolemid |11568| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@89) |f#0@@63| |init#0@@17| |run#0@@51|) ($IsGoodHeap $Heap@@95)) ))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@4 T@U) (Sequences._default.FoldFromRight$E@@4 T@U) ($ly@@90 T@U) ($Heap@@96 T@U) (|f#0@@64| T@U) (|init#0@@18| T@U) (|run#0@@52| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@4) TyType) (= (type Sequences._default.FoldFromRight$E@@4) TyType)) (= (type $ly@@90) LayerTypeType)) (= (type $Heap@@96) (MapType0Type refType MapType1Type))) (= (type |f#0@@64|) HandleTypeType)) (= (type |init#0@@18|) BoxType)) (= (type |run#0@@52|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@64| |init#0@@18| (Lit |run#0@@52|)) (and (and (and ($IsGoodHeap $Heap@@96) ($Is |f#0@@64| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4))) ($IsBox |init#0@@18| Sequences._default.FoldFromRight$A@@4)) ($Is |run#0@@52| (TSeq Sequences._default.FoldFromRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@52|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@64| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@90) |f#0@@64| |init#0@@18| (Lit |run#0@@52|)) (ite (= (|Seq#Length| (Lit |run#0@@52|)) (LitInt 0)) |init#0@@18| (Apply2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4 $Heap@@96 |f#0@@64| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@90) |f#0@@64| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |11569| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@90) |f#0@@64| |init#0@@18| (Lit |run#0@@52|)) ($IsGoodHeap $Heap@@96)) ))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@5 T@U) (Sequences._default.FoldFromRight$E@@5 T@U) ($ly@@91 T@U) ($Heap@@97 T@U) (|f#0@@65| T@U) (|init#0@@19| T@U) (|run#0@@53| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@5) TyType) (= (type Sequences._default.FoldFromRight$E@@5) TyType)) (= (type $ly@@91) LayerTypeType)) (= (type $Heap@@97) (MapType0Type refType MapType1Type))) (= (type |f#0@@65|) HandleTypeType)) (= (type |init#0@@19|) BoxType)) (= (type |run#0@@53|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit |run#0@@53|)) (and (and (and ($IsGoodHeap $Heap@@97) ($Is |f#0@@65| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5))) ($IsBox |init#0@@19| Sequences._default.FoldFromRight$A@@5)) ($Is |run#0@@53| (TSeq Sequences._default.FoldFromRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@53|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@91) (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit |run#0@@53|)) (ite (= (|Seq#Length| (Lit |run#0@@53|)) (LitInt 0)) |init#0@@19| (Apply2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5 $Heap@@97 (Lit |f#0@@65|) (Lit (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@91) (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|))))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |11570| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@91) (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit |run#0@@53|)) ($IsGoodHeap $Heap@@97)) ))))
(assert (forall ((arg0@@268 T@U) (arg1@@135 T@U) (arg2@@79 T@U) (arg3@@52 Int) ) (! (= (type (Sequences.__default.remove arg0@@268 arg1@@135 arg2@@79 arg3@@52)) (SeqType BoxType)) :qid |funType:Sequences.__default.remove| :pattern ( (Sequences.__default.remove arg0@@268 arg1@@135 arg2@@79 arg3@@52)) )))
(assert (forall ((Sequences._default.remove$A T@U) ($ly@@92 T@U) (|s#0@@4| T@U) (|pos#0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A) TyType) (= (type $ly@@92) LayerTypeType)) (= (type |s#0@@4|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@92) |s#0@@4| |pos#0|) (Sequences.__default.remove Sequences._default.remove$A $ly@@92 |s#0@@4| |pos#0|))) :qid |unknown.0:0| :skolemid |11571| :pattern ( (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@92) |s#0@@4| |pos#0|)) )))
(assert (forall ((Sequences._default.remove$A@@0 T@U) ($ly@@93 T@U) (|s#0@@5| T@U) (|pos#0@@0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A@@0) TyType) (= (type $ly@@93) LayerTypeType)) (= (type |s#0@@5|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A@@0 $ly@@93 |s#0@@5| |pos#0@@0|) (Sequences.__default.remove Sequences._default.remove$A@@0 $LZ |s#0@@5| |pos#0@@0|))) :qid |unknown.0:0| :skolemid |11572| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@0 (AsFuelBottom $ly@@93) |s#0@@5| |pos#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.remove$A@@1 T@U) ($ly@@94 T@U) (|s#0@@6| T@U) (|pos#0@@1| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@1) TyType) (= (type $ly@@94) LayerTypeType)) (= (type |s#0@@6|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@1 |s#0@@6| |pos#0@@1|) (and ($Is |s#0@@6| (TSeq Sequences._default.remove$A@@1)) (and (<= (LitInt 0) |pos#0@@1|) (< |pos#0@@1| (|Seq#Length| |s#0@@6|)))))) (and (and (and (= (|Seq#Length| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@94 |s#0@@6| |pos#0@@1|)) (- (|Seq#Length| |s#0@@6|) 1)) (forall ((|i#2@@5| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@5|) (< |i#2@@5| |pos#0@@1|)) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@94 |s#0@@6| |pos#0@@1|) |i#2@@5|) (|Seq#Index| |s#0@@6| |i#2@@5|))) :qid |sequence.168:18| :skolemid |11573| :pattern ( (|Seq#Index| |s#0@@6| |i#2@@5|)) :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@94 |s#0@@6| |pos#0@@1|) |i#2@@5|)) ))) (forall ((|i#3@@7| Int) ) (!  (=> (and (<= |pos#0@@1| |i#3@@7|) (< |i#3@@7| (- (|Seq#Length| |s#0@@6|) 1))) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@94 |s#0@@6| |pos#0@@1|) |i#3@@7|) (|Seq#Index| |s#0@@6| (+ |i#3@@7| 1)))) :qid |sequence.169:18| :skolemid |11574| :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@94 |s#0@@6| |pos#0@@1|) |i#3@@7|)) ))) ($Is (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@94 |s#0@@6| |pos#0@@1|) (TSeq Sequences._default.remove$A@@1)))) :qid |unknown.0:0| :skolemid |11575| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@94 |s#0@@6| |pos#0@@1|)) ))))
(assert (forall ((Sequences._default.remove$A@@2 T@U) ($ly@@95 T@U) (|s#0@@7| T@U) (|pos#0@@2| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@2) TyType) (= (type $ly@@95) LayerTypeType)) (= (type |s#0@@7|) (SeqType BoxType))) ($Is |s#0@@7| (TSeq Sequences._default.remove$A@@2))) (and (=> (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@95 |s#0@@7| |pos#0@@2|) (and (<= (LitInt 0) |pos#0@@2|) (< |pos#0@@2| (|Seq#Length| |s#0@@7|)))) (=> (and (<= (LitInt 0) |pos#0@@2|) (< |pos#0@@2| (|Seq#Length| |s#0@@7|))) (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@95 |s#0@@7| |pos#0@@2|)))) :qid |unknown.0:0| :skolemid |11576| :pattern ( (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@95 |s#0@@7| |pos#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.remove$A@@3 T@U) ($ly@@96 T@U) (|s#0@@8| T@U) (|pos#0@@3| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@3) TyType) (= (type $ly@@96) LayerTypeType)) (= (type |s#0@@8|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@3 |s#0@@8| |pos#0@@3|) (and ($Is |s#0@@8| (TSeq Sequences._default.remove$A@@3)) (and (<= (LitInt 0) |pos#0@@3|) (< |pos#0@@3| (|Seq#Length| |s#0@@8|)))))) (= (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@96) |s#0@@8| |pos#0@@3|) (|Seq#Append| (|Seq#Take| |s#0@@8| |pos#0@@3|) (|Seq#Drop| |s#0@@8| (+ |pos#0@@3| 1))))) :qid |unknown.0:0| :skolemid |11577| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@96) |s#0@@8| |pos#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.remove$A@@4 T@U) ($ly@@97 T@U) (|s#0@@9| T@U) (|pos#0@@4| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@4) TyType) (= (type $ly@@97) LayerTypeType)) (= (type |s#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@4 (Lit |s#0@@9|) (LitInt |pos#0@@4|)) (and ($Is |s#0@@9| (TSeq Sequences._default.remove$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@4|)) (< |pos#0@@4| (|Seq#Length| (Lit |s#0@@9|))))))) (= (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@97) (Lit |s#0@@9|) (LitInt |pos#0@@4|)) (|Seq#Append| (|Seq#Take| (Lit |s#0@@9|) (LitInt |pos#0@@4|)) (|Seq#Drop| (Lit |s#0@@9|) (LitInt (+ |pos#0@@4| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |11578| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@97) (Lit |s#0@@9|) (LitInt |pos#0@@4|))) ))))
(assert (forall ((arg0@@269 T@U) (arg1@@136 T@U) (arg2@@80 T@U) (arg3@@53 T@U) (arg4@@37 Int) ) (! (= (type (Sequences.__default.insert arg0@@269 arg1@@136 arg2@@80 arg3@@53 arg4@@37)) (SeqType BoxType)) :qid |funType:Sequences.__default.insert| :pattern ( (Sequences.__default.insert arg0@@269 arg1@@136 arg2@@80 arg3@@53 arg4@@37)) )))
(assert (forall ((Sequences._default.insert$A T@U) ($ly@@98 T@U) (|s#0@@10| T@U) (|a#0@@7| T@U) (|pos#0@@5| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A) TyType) (= (type $ly@@98) LayerTypeType)) (= (type |s#0@@10|) (SeqType BoxType))) (= (type |a#0@@7|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@98) |s#0@@10| |a#0@@7| |pos#0@@5|) (Sequences.__default.insert Sequences._default.insert$A $ly@@98 |s#0@@10| |a#0@@7| |pos#0@@5|))) :qid |unknown.0:0| :skolemid |11579| :pattern ( (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@98) |s#0@@10| |a#0@@7| |pos#0@@5|)) )))
(assert (forall ((Sequences._default.insert$A@@0 T@U) ($ly@@99 T@U) (|s#0@@11| T@U) (|a#0@@8| T@U) (|pos#0@@6| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A@@0) TyType) (= (type $ly@@99) LayerTypeType)) (= (type |s#0@@11|) (SeqType BoxType))) (= (type |a#0@@8|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A@@0 $ly@@99 |s#0@@11| |a#0@@8| |pos#0@@6|) (Sequences.__default.insert Sequences._default.insert$A@@0 $LZ |s#0@@11| |a#0@@8| |pos#0@@6|))) :qid |unknown.0:0| :skolemid |11580| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@0 (AsFuelBottom $ly@@99) |s#0@@11| |a#0@@8| |pos#0@@6|)) )))
(assert  (=> true (forall ((Sequences._default.insert$A@@1 T@U) ($ly@@100 T@U) (|s#0@@12| T@U) (|a#0@@9| T@U) (|pos#0@@7| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@1) TyType) (= (type $ly@@100) LayerTypeType)) (= (type |s#0@@12|) (SeqType BoxType))) (= (type |a#0@@9|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@1 |s#0@@12| |a#0@@9| |pos#0@@7|) (and (and ($Is |s#0@@12| (TSeq Sequences._default.insert$A@@1)) ($IsBox |a#0@@9| Sequences._default.insert$A@@1)) (and (<= (LitInt 0) |pos#0@@7|) (<= |pos#0@@7| (|Seq#Length| |s#0@@12|)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@100 |s#0@@12| |a#0@@9| |pos#0@@7|)) (+ (|Seq#Length| |s#0@@12|) 1)) (forall ((|i#2@@6| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@6|) (< |i#2@@6| |pos#0@@7|)) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@100 |s#0@@12| |a#0@@9| |pos#0@@7|) |i#2@@6|) (|Seq#Index| |s#0@@12| |i#2@@6|)))) :qid |sequence.177:18| :skolemid |11581| :pattern ( (|Seq#Index| |s#0@@12| |i#2@@6|)) :pattern ( (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@100 |s#0@@12| |a#0@@9| |pos#0@@7|) |i#2@@6|)) ))) (forall ((|i#3@@8| Int) ) (!  (=> true (=> (and (<= |pos#0@@7| |i#3@@8|) (< |i#3@@8| (|Seq#Length| |s#0@@12|))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@100 |s#0@@12| |a#0@@9| |pos#0@@7|) (+ |i#3@@8| 1)) (|Seq#Index| |s#0@@12| |i#3@@8|)))) :qid |sequence.178:18| :skolemid |11582| :pattern ( (|Seq#Index| |s#0@@12| |i#3@@8|)) ))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@100 |s#0@@12| |a#0@@9| |pos#0@@7|) |pos#0@@7|) |a#0@@9|)) ($Is (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@100 |s#0@@12| |a#0@@9| |pos#0@@7|) (TSeq Sequences._default.insert$A@@1)))) :qid |unknown.0:0| :skolemid |11583| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@100 |s#0@@12| |a#0@@9| |pos#0@@7|)) ))))
(assert (forall ((Sequences._default.insert$A@@2 T@U) ($ly@@101 T@U) (|s#0@@13| T@U) (|a#0@@10| T@U) (|pos#0@@8| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@2) TyType) (= (type $ly@@101) LayerTypeType)) (= (type |s#0@@13|) (SeqType BoxType))) (= (type |a#0@@10|) BoxType)) (and ($Is |s#0@@13| (TSeq Sequences._default.insert$A@@2)) ($IsBox |a#0@@10| Sequences._default.insert$A@@2))) (and (=> (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@101 |s#0@@13| |a#0@@10| |pos#0@@8|) (and (<= (LitInt 0) |pos#0@@8|) (<= |pos#0@@8| (|Seq#Length| |s#0@@13|)))) (=> (and (<= (LitInt 0) |pos#0@@8|) (<= |pos#0@@8| (|Seq#Length| |s#0@@13|))) (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@101 |s#0@@13| |a#0@@10| |pos#0@@8|)))) :qid |unknown.0:0| :skolemid |11584| :pattern ( (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@101 |s#0@@13| |a#0@@10| |pos#0@@8|)) )))
(assert  (=> true (forall ((Sequences._default.insert$A@@3 T@U) ($ly@@102 T@U) (|s#0@@14| T@U) (|a#0@@11| T@U) (|pos#0@@9| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@3) TyType) (= (type $ly@@102) LayerTypeType)) (= (type |s#0@@14|) (SeqType BoxType))) (= (type |a#0@@11|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@3 |s#0@@14| |a#0@@11| |pos#0@@9|) (and (and ($Is |s#0@@14| (TSeq Sequences._default.insert$A@@3)) ($IsBox |a#0@@11| Sequences._default.insert$A@@3)) (and (<= (LitInt 0) |pos#0@@9|) (<= |pos#0@@9| (|Seq#Length| |s#0@@14|)))))) (= (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@102) |s#0@@14| |a#0@@11| |pos#0@@9|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@14| |pos#0@@9|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@11|)) (|Seq#Drop| |s#0@@14| |pos#0@@9|)))) :qid |unknown.0:0| :skolemid |11585| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@102) |s#0@@14| |a#0@@11| |pos#0@@9|)) ))))
(assert  (=> true (forall ((Sequences._default.insert$A@@4 T@U) ($ly@@103 T@U) (|s#0@@15| T@U) (|a#0@@12| T@U) (|pos#0@@10| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@4) TyType) (= (type $ly@@103) LayerTypeType)) (= (type |s#0@@15|) (SeqType BoxType))) (= (type |a#0@@12|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@4 (Lit |s#0@@15|) |a#0@@12| (LitInt |pos#0@@10|)) (and (and ($Is |s#0@@15| (TSeq Sequences._default.insert$A@@4)) ($IsBox |a#0@@12| Sequences._default.insert$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@10|)) (<= (LitInt |pos#0@@10|) (|Seq#Length| (Lit |s#0@@15|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@103) (Lit |s#0@@15|) |a#0@@12| (LitInt |pos#0@@10|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@15|) (LitInt |pos#0@@10|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@12|)) (|Seq#Drop| (Lit |s#0@@15|) (LitInt |pos#0@@10|))))) :qid |unknown.0:0| :weight 3 :skolemid |11586| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@103) (Lit |s#0@@15|) |a#0@@12| (LitInt |pos#0@@10|))) ))))
(assert  (=> true (forall ((Sequences._default.insert$A@@5 T@U) ($ly@@104 T@U) (|s#0@@16| T@U) (|a#0@@13| T@U) (|pos#0@@11| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@5) TyType) (= (type $ly@@104) LayerTypeType)) (= (type |s#0@@16|) (SeqType BoxType))) (= (type |a#0@@13|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@5 (Lit |s#0@@16|) (Lit |a#0@@13|) (LitInt |pos#0@@11|)) (and (and ($Is |s#0@@16| (TSeq Sequences._default.insert$A@@5)) ($IsBox |a#0@@13| Sequences._default.insert$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@11|)) (<= (LitInt |pos#0@@11|) (|Seq#Length| (Lit |s#0@@16|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@104) (Lit |s#0@@16|) (Lit |a#0@@13|) (LitInt |pos#0@@11|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@16|) (LitInt |pos#0@@11|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@13|))) (|Seq#Drop| (Lit |s#0@@16|) (LitInt |pos#0@@11|))))) :qid |unknown.0:0| :weight 3 :skolemid |11587| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@104) (Lit |s#0@@16|) (Lit |a#0@@13|) (LitInt |pos#0@@11|))) ))))
(assert (forall ((arg0@@270 T@U) (arg1@@137 T@U) (arg2@@81 T@U) (arg3@@54 T@U) (arg4@@38 T@U) (arg5@@21 Int) ) (! (= (type (Sequences.__default.replace1with2 arg0@@270 arg1@@137 arg2@@81 arg3@@54 arg4@@38 arg5@@21)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace1with2| :pattern ( (Sequences.__default.replace1with2 arg0@@270 arg1@@137 arg2@@81 arg3@@54 arg4@@38 arg5@@21)) )))
(assert (forall ((Sequences._default.replace1with2$A T@U) ($ly@@105 T@U) (|s#0@@17| T@U) (|a#0@@14| T@U) (|b#0@@1| T@U) (|pos#0@@12| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A) TyType) (= (type $ly@@105) LayerTypeType)) (= (type |s#0@@17|) (SeqType BoxType))) (= (type |a#0@@14|) BoxType)) (= (type |b#0@@1|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@105) |s#0@@17| |a#0@@14| |b#0@@1| |pos#0@@12|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A $ly@@105 |s#0@@17| |a#0@@14| |b#0@@1| |pos#0@@12|))) :qid |unknown.0:0| :skolemid |11588| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@105) |s#0@@17| |a#0@@14| |b#0@@1| |pos#0@@12|)) )))
(assert (forall ((Sequences._default.replace1with2$A@@0 T@U) ($ly@@106 T@U) (|s#0@@18| T@U) (|a#0@@15| T@U) (|b#0@@2| T@U) (|pos#0@@13| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A@@0) TyType) (= (type $ly@@106) LayerTypeType)) (= (type |s#0@@18|) (SeqType BoxType))) (= (type |a#0@@15|) BoxType)) (= (type |b#0@@2|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $ly@@106 |s#0@@18| |a#0@@15| |b#0@@2| |pos#0@@13|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $LZ |s#0@@18| |a#0@@15| |b#0@@2| |pos#0@@13|))) :qid |unknown.0:0| :skolemid |11589| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 (AsFuelBottom $ly@@106) |s#0@@18| |a#0@@15| |b#0@@2| |pos#0@@13|)) )))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@1 T@U) ($ly@@107 T@U) (|s#0@@19| T@U) (|a#0@@16| T@U) (|b#0@@3| T@U) (|pos#0@@14| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@1) TyType) (= (type $ly@@107) LayerTypeType)) (= (type |s#0@@19|) (SeqType BoxType))) (= (type |a#0@@16|) BoxType)) (= (type |b#0@@3|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@1 |s#0@@19| |a#0@@16| |b#0@@3| |pos#0@@14|) (and (and (and ($Is |s#0@@19| (TSeq Sequences._default.replace1with2$A@@1)) ($IsBox |a#0@@16| Sequences._default.replace1with2$A@@1)) ($IsBox |b#0@@3| Sequences._default.replace1with2$A@@1)) (and (<= (LitInt 0) |pos#0@@14|) (< |pos#0@@14| (|Seq#Length| |s#0@@19|)))))) (and (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@107 |s#0@@19| |a#0@@16| |b#0@@3| |pos#0@@14|)) (+ (|Seq#Length| |s#0@@19|) 1)) (forall ((|i#2@@7| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@7|) (< |i#2@@7| |pos#0@@14|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@107 |s#0@@19| |a#0@@16| |b#0@@3| |pos#0@@14|) |i#2@@7|) (|Seq#Index| |s#0@@19| |i#2@@7|)))) :qid |sequence.202:18| :skolemid |11590| :pattern ( (|Seq#Index| |s#0@@19| |i#2@@7|)) :pattern ( (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@107 |s#0@@19| |a#0@@16| |b#0@@3| |pos#0@@14|) |i#2@@7|)) ))) (forall ((|i#3@@9| Int) ) (!  (=> true (=> (and (< |pos#0@@14| |i#3@@9|) (< |i#3@@9| (|Seq#Length| |s#0@@19|))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@107 |s#0@@19| |a#0@@16| |b#0@@3| |pos#0@@14|) (+ |i#3@@9| 1)) (|Seq#Index| |s#0@@19| |i#3@@9|)))) :qid |sequence.203:18| :skolemid |11591| :pattern ( (|Seq#Index| |s#0@@19| |i#3@@9|)) ))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@107 |s#0@@19| |a#0@@16| |b#0@@3| |pos#0@@14|) |pos#0@@14|) |a#0@@16|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@107 |s#0@@19| |a#0@@16| |b#0@@3| |pos#0@@14|) (+ |pos#0@@14| 1)) |b#0@@3|)) ($Is (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@107 |s#0@@19| |a#0@@16| |b#0@@3| |pos#0@@14|) (TSeq Sequences._default.replace1with2$A@@1)))) :qid |unknown.0:0| :skolemid |11592| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@107 |s#0@@19| |a#0@@16| |b#0@@3| |pos#0@@14|)) ))))
(assert (forall ((Sequences._default.replace1with2$A@@2 T@U) ($ly@@108 T@U) (|s#0@@20| T@U) (|a#0@@17| T@U) (|b#0@@4| T@U) (|pos#0@@15| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@2) TyType) (= (type $ly@@108) LayerTypeType)) (= (type |s#0@@20|) (SeqType BoxType))) (= (type |a#0@@17|) BoxType)) (= (type |b#0@@4|) BoxType)) (and (and ($Is |s#0@@20| (TSeq Sequences._default.replace1with2$A@@2)) ($IsBox |a#0@@17| Sequences._default.replace1with2$A@@2)) ($IsBox |b#0@@4| Sequences._default.replace1with2$A@@2))) (and (=> (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@108 |s#0@@20| |a#0@@17| |b#0@@4| |pos#0@@15|) (and (<= (LitInt 0) |pos#0@@15|) (< |pos#0@@15| (|Seq#Length| |s#0@@20|)))) (=> (and (<= (LitInt 0) |pos#0@@15|) (< |pos#0@@15| (|Seq#Length| |s#0@@20|))) (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@108 |s#0@@20| |a#0@@17| |b#0@@4| |pos#0@@15|)))) :qid |unknown.0:0| :skolemid |11593| :pattern ( (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@108 |s#0@@20| |a#0@@17| |b#0@@4| |pos#0@@15|)) )))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@3 T@U) ($ly@@109 T@U) (|s#0@@21| T@U) (|a#0@@18| T@U) (|b#0@@5| T@U) (|pos#0@@16| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@3) TyType) (= (type $ly@@109) LayerTypeType)) (= (type |s#0@@21|) (SeqType BoxType))) (= (type |a#0@@18|) BoxType)) (= (type |b#0@@5|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@3 |s#0@@21| |a#0@@18| |b#0@@5| |pos#0@@16|) (and (and (and ($Is |s#0@@21| (TSeq Sequences._default.replace1with2$A@@3)) ($IsBox |a#0@@18| Sequences._default.replace1with2$A@@3)) ($IsBox |b#0@@5| Sequences._default.replace1with2$A@@3)) (and (<= (LitInt 0) |pos#0@@16|) (< |pos#0@@16| (|Seq#Length| |s#0@@21|)))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@109) |s#0@@21| |a#0@@18| |b#0@@5| |pos#0@@16|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@21| |pos#0@@16|) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@18|) |b#0@@5|)) (|Seq#Drop| |s#0@@21| (+ |pos#0@@16| 1))))) :qid |unknown.0:0| :skolemid |11594| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@109) |s#0@@21| |a#0@@18| |b#0@@5| |pos#0@@16|)) ))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@4 T@U) ($ly@@110 T@U) (|s#0@@22| T@U) (|a#0@@19| T@U) (|b#0@@6| T@U) (|pos#0@@17| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@4) TyType) (= (type $ly@@110) LayerTypeType)) (= (type |s#0@@22|) (SeqType BoxType))) (= (type |a#0@@19|) BoxType)) (= (type |b#0@@6|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@4 (Lit |s#0@@22|) |a#0@@19| |b#0@@6| (LitInt |pos#0@@17|)) (and (and (and ($Is |s#0@@22| (TSeq Sequences._default.replace1with2$A@@4)) ($IsBox |a#0@@19| Sequences._default.replace1with2$A@@4)) ($IsBox |b#0@@6| Sequences._default.replace1with2$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@17|)) (< |pos#0@@17| (|Seq#Length| (Lit |s#0@@22|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@110) (Lit |s#0@@22|) |a#0@@19| |b#0@@6| (LitInt |pos#0@@17|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@22|) (LitInt |pos#0@@17|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@19|) |b#0@@6|)) (|Seq#Drop| (Lit |s#0@@22|) (LitInt (+ |pos#0@@17| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |11595| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@110) (Lit |s#0@@22|) |a#0@@19| |b#0@@6| (LitInt |pos#0@@17|))) ))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@5 T@U) ($ly@@111 T@U) (|s#0@@23| T@U) (|a#0@@20| T@U) (|b#0@@7| T@U) (|pos#0@@18| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@5) TyType) (= (type $ly@@111) LayerTypeType)) (= (type |s#0@@23|) (SeqType BoxType))) (= (type |a#0@@20|) BoxType)) (= (type |b#0@@7|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@5 (Lit |s#0@@23|) (Lit |a#0@@20|) (Lit |b#0@@7|) (LitInt |pos#0@@18|)) (and (and (and ($Is |s#0@@23| (TSeq Sequences._default.replace1with2$A@@5)) ($IsBox |a#0@@20| Sequences._default.replace1with2$A@@5)) ($IsBox |b#0@@7| Sequences._default.replace1with2$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@18|)) (< |pos#0@@18| (|Seq#Length| (Lit |s#0@@23|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@111) (Lit |s#0@@23|) (Lit |a#0@@20|) (Lit |b#0@@7|) (LitInt |pos#0@@18|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@23|) (LitInt |pos#0@@18|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@20|)) (Lit |b#0@@7|))) (|Seq#Drop| (Lit |s#0@@23|) (LitInt (+ |pos#0@@18| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |11596| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@111) (Lit |s#0@@23|) (Lit |a#0@@20|) (Lit |b#0@@7|) (LitInt |pos#0@@18|))) ))))
(assert (forall ((arg0@@271 T@U) (arg1@@138 T@U) (arg2@@82 T@U) (arg3@@55 T@U) (arg4@@39 Int) ) (! (= (type (Sequences.__default.replace2with1 arg0@@271 arg1@@138 arg2@@82 arg3@@55 arg4@@39)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace2with1| :pattern ( (Sequences.__default.replace2with1 arg0@@271 arg1@@138 arg2@@82 arg3@@55 arg4@@39)) )))
(assert (forall ((Sequences._default.replace2with1$A T@U) ($ly@@112 T@U) (|s#0@@24| T@U) (|a#0@@21| T@U) (|pos#0@@19| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A) TyType) (= (type $ly@@112) LayerTypeType)) (= (type |s#0@@24|) (SeqType BoxType))) (= (type |a#0@@21|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@112) |s#0@@24| |a#0@@21| |pos#0@@19|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A $ly@@112 |s#0@@24| |a#0@@21| |pos#0@@19|))) :qid |unknown.0:0| :skolemid |11597| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@112) |s#0@@24| |a#0@@21| |pos#0@@19|)) )))
(assert (forall ((Sequences._default.replace2with1$A@@0 T@U) ($ly@@113 T@U) (|s#0@@25| T@U) (|a#0@@22| T@U) (|pos#0@@20| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A@@0) TyType) (= (type $ly@@113) LayerTypeType)) (= (type |s#0@@25|) (SeqType BoxType))) (= (type |a#0@@22|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $ly@@113 |s#0@@25| |a#0@@22| |pos#0@@20|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $LZ |s#0@@25| |a#0@@22| |pos#0@@20|))) :qid |unknown.0:0| :skolemid |11598| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 (AsFuelBottom $ly@@113) |s#0@@25| |a#0@@22| |pos#0@@20|)) )))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@1 T@U) ($ly@@114 T@U) (|s#0@@26| T@U) (|a#0@@23| T@U) (|pos#0@@21| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@1) TyType) (= (type $ly@@114) LayerTypeType)) (= (type |s#0@@26|) (SeqType BoxType))) (= (type |a#0@@23|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@1 |s#0@@26| |a#0@@23| |pos#0@@21|) (and (and ($Is |s#0@@26| (TSeq Sequences._default.replace2with1$A@@1)) ($IsBox |a#0@@23| Sequences._default.replace2with1$A@@1)) (and (<= (LitInt 0) |pos#0@@21|) (< |pos#0@@21| (- (|Seq#Length| |s#0@@26|) 1)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@114 |s#0@@26| |a#0@@23| |pos#0@@21|)) (- (|Seq#Length| |s#0@@26|) 1)) (forall ((|i#2@@8| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@8|) (< |i#2@@8| |pos#0@@21|)) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@114 |s#0@@26| |a#0@@23| |pos#0@@21|) |i#2@@8|) (|Seq#Index| |s#0@@26| |i#2@@8|)))) :qid |sequence.221:18| :skolemid |11599| :pattern ( (|Seq#Index| |s#0@@26| |i#2@@8|)) :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@114 |s#0@@26| |a#0@@23| |pos#0@@21|) |i#2@@8|)) ))) (forall ((|i#3@@10| Int) ) (!  (=> true (=> (and (< |pos#0@@21| |i#3@@10|) (< |i#3@@10| (- (|Seq#Length| |s#0@@26|) 1))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@114 |s#0@@26| |a#0@@23| |pos#0@@21|) |i#3@@10|) (|Seq#Index| |s#0@@26| (+ |i#3@@10| 1))))) :qid |sequence.222:18| :skolemid |11600| :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@114 |s#0@@26| |a#0@@23| |pos#0@@21|) |i#3@@10|)) ))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@114 |s#0@@26| |a#0@@23| |pos#0@@21|) |pos#0@@21|) |a#0@@23|)) ($Is (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@114 |s#0@@26| |a#0@@23| |pos#0@@21|) (TSeq Sequences._default.replace2with1$A@@1)))) :qid |unknown.0:0| :skolemid |11601| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@114 |s#0@@26| |a#0@@23| |pos#0@@21|)) ))))
(assert (forall ((Sequences._default.replace2with1$A@@2 T@U) ($ly@@115 T@U) (|s#0@@27| T@U) (|a#0@@24| T@U) (|pos#0@@22| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@2) TyType) (= (type $ly@@115) LayerTypeType)) (= (type |s#0@@27|) (SeqType BoxType))) (= (type |a#0@@24|) BoxType)) (and ($Is |s#0@@27| (TSeq Sequences._default.replace2with1$A@@2)) ($IsBox |a#0@@24| Sequences._default.replace2with1$A@@2))) (and (=> (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@115 |s#0@@27| |a#0@@24| |pos#0@@22|) (and (<= (LitInt 0) |pos#0@@22|) (< |pos#0@@22| (- (|Seq#Length| |s#0@@27|) 1)))) (=> (and (<= (LitInt 0) |pos#0@@22|) (< |pos#0@@22| (- (|Seq#Length| |s#0@@27|) 1))) (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@115 |s#0@@27| |a#0@@24| |pos#0@@22|)))) :qid |unknown.0:0| :skolemid |11602| :pattern ( (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@115 |s#0@@27| |a#0@@24| |pos#0@@22|)) )))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@3 T@U) ($ly@@116 T@U) (|s#0@@28| T@U) (|a#0@@25| T@U) (|pos#0@@23| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@3) TyType) (= (type $ly@@116) LayerTypeType)) (= (type |s#0@@28|) (SeqType BoxType))) (= (type |a#0@@25|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@3 |s#0@@28| |a#0@@25| |pos#0@@23|) (and (and ($Is |s#0@@28| (TSeq Sequences._default.replace2with1$A@@3)) ($IsBox |a#0@@25| Sequences._default.replace2with1$A@@3)) (and (<= (LitInt 0) |pos#0@@23|) (< |pos#0@@23| (- (|Seq#Length| |s#0@@28|) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@116) |s#0@@28| |a#0@@25| |pos#0@@23|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@28| |pos#0@@23|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@25|)) (|Seq#Drop| |s#0@@28| (+ |pos#0@@23| 2))))) :qid |unknown.0:0| :skolemid |11603| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@116) |s#0@@28| |a#0@@25| |pos#0@@23|)) ))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@4 T@U) ($ly@@117 T@U) (|s#0@@29| T@U) (|a#0@@26| T@U) (|pos#0@@24| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@4) TyType) (= (type $ly@@117) LayerTypeType)) (= (type |s#0@@29|) (SeqType BoxType))) (= (type |a#0@@26|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@4 (Lit |s#0@@29|) |a#0@@26| (LitInt |pos#0@@24|)) (and (and ($Is |s#0@@29| (TSeq Sequences._default.replace2with1$A@@4)) ($IsBox |a#0@@26| Sequences._default.replace2with1$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@24|)) (< |pos#0@@24| (- (|Seq#Length| (Lit |s#0@@29|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@117) (Lit |s#0@@29|) |a#0@@26| (LitInt |pos#0@@24|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@29|) (LitInt |pos#0@@24|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@26|)) (|Seq#Drop| (Lit |s#0@@29|) (LitInt (+ |pos#0@@24| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |11604| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@117) (Lit |s#0@@29|) |a#0@@26| (LitInt |pos#0@@24|))) ))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@5 T@U) ($ly@@118 T@U) (|s#0@@30| T@U) (|a#0@@27| T@U) (|pos#0@@25| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@5) TyType) (= (type $ly@@118) LayerTypeType)) (= (type |s#0@@30|) (SeqType BoxType))) (= (type |a#0@@27|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@5 (Lit |s#0@@30|) (Lit |a#0@@27|) (LitInt |pos#0@@25|)) (and (and ($Is |s#0@@30| (TSeq Sequences._default.replace2with1$A@@5)) ($IsBox |a#0@@27| Sequences._default.replace2with1$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@25|)) (< |pos#0@@25| (- (|Seq#Length| (Lit |s#0@@30|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@118) (Lit |s#0@@30|) (Lit |a#0@@27|) (LitInt |pos#0@@25|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@30|) (LitInt |pos#0@@25|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@27|))) (|Seq#Drop| (Lit |s#0@@30|) (LitInt (+ |pos#0@@25| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |11605| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@118) (Lit |s#0@@30|) (Lit |a#0@@27|) (LitInt |pos#0@@25|))) ))))
(assert (forall ((arg0@@272 T@U) (arg1@@139 T@U) (arg2@@83 T@U) (arg3@@56 T@U) ) (! (= (type (Sequences.__default.concat arg0@@272 arg1@@139 arg2@@83 arg3@@56)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat| :pattern ( (Sequences.__default.concat arg0@@272 arg1@@139 arg2@@83 arg3@@56)) )))
(assert (forall ((Sequences._default.concat$A T@U) ($ly@@119 T@U) (|a#0@@28| T@U) (|b#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A) TyType) (= (type $ly@@119) LayerTypeType)) (= (type |a#0@@28|) (SeqType BoxType))) (= (type |b#0@@8|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@119) |a#0@@28| |b#0@@8|) (Sequences.__default.concat Sequences._default.concat$A $ly@@119 |a#0@@28| |b#0@@8|))) :qid |unknown.0:0| :skolemid |11606| :pattern ( (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@119) |a#0@@28| |b#0@@8|)) )))
(assert (forall ((Sequences._default.concat$A@@0 T@U) ($ly@@120 T@U) (|a#0@@29| T@U) (|b#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A@@0) TyType) (= (type $ly@@120) LayerTypeType)) (= (type |a#0@@29|) (SeqType BoxType))) (= (type |b#0@@9|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A@@0 $ly@@120 |a#0@@29| |b#0@@9|) (Sequences.__default.concat Sequences._default.concat$A@@0 $LZ |a#0@@29| |b#0@@9|))) :qid |unknown.0:0| :skolemid |11607| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@0 (AsFuelBottom $ly@@120) |a#0@@29| |b#0@@9|)) )))
(assert  (=> true (forall ((Sequences._default.concat$A@@1 T@U) ($ly@@121 T@U) (|a#0@@30| T@U) (|b#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@1) TyType) (= (type $ly@@121) LayerTypeType)) (= (type |a#0@@30|) (SeqType BoxType))) (= (type |b#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@1 |a#0@@30| |b#0@@10|) (and ($Is |a#0@@30| (TSeq Sequences._default.concat$A@@1)) ($Is |b#0@@10| (TSeq Sequences._default.concat$A@@1))))) (and (and (and (= (|Seq#Length| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@121 |a#0@@30| |b#0@@10|)) (+ (|Seq#Length| |a#0@@30|) (|Seq#Length| |b#0@@10|))) (forall ((|i#2@@9| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@9|) (< |i#2@@9| (|Seq#Length| |a#0@@30|))) (= (|Seq#Index| |a#0@@30| |i#2@@9|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@121 |a#0@@30| |b#0@@10|) |i#2@@9|)))) :qid |sequence.230:18| :skolemid |11608| :pattern ( (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@121 |a#0@@30| |b#0@@10|) |i#2@@9|)) :pattern ( (|Seq#Index| |a#0@@30| |i#2@@9|)) ))) (forall ((|i#3@@11| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@11|) (< |i#3@@11| (|Seq#Length| |b#0@@10|))) (= (|Seq#Index| |b#0@@10| |i#3@@11|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@121 |a#0@@30| |b#0@@10|) (+ (|Seq#Length| |a#0@@30|) |i#3@@11|))))) :qid |sequence.231:18| :skolemid |11609| :pattern ( (|Seq#Index| |b#0@@10| |i#3@@11|)) ))) ($Is (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@121 |a#0@@30| |b#0@@10|) (TSeq Sequences._default.concat$A@@1)))) :qid |unknown.0:0| :skolemid |11610| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@121 |a#0@@30| |b#0@@10|)) ))))
(assert (forall ((Sequences._default.concat$A@@2 T@U) ($ly@@122 T@U) (|a#0@@31| T@U) (|b#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@2) TyType) (= (type $ly@@122) LayerTypeType)) (= (type |a#0@@31|) (SeqType BoxType))) (= (type |b#0@@11|) (SeqType BoxType))) (and ($Is |a#0@@31| (TSeq Sequences._default.concat$A@@2)) ($Is |b#0@@11| (TSeq Sequences._default.concat$A@@2)))) (and (=> (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@122 |a#0@@31| |b#0@@11|) true) (=> true (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@122 |a#0@@31| |b#0@@11|)))) :qid |unknown.0:0| :skolemid |11611| :pattern ( (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@122 |a#0@@31| |b#0@@11|)) )))
(assert  (=> true (forall ((Sequences._default.concat$A@@3 T@U) ($ly@@123 T@U) (|a#0@@32| T@U) (|b#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@3) TyType) (= (type $ly@@123) LayerTypeType)) (= (type |a#0@@32|) (SeqType BoxType))) (= (type |b#0@@12|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@3 |a#0@@32| |b#0@@12|) (and ($Is |a#0@@32| (TSeq Sequences._default.concat$A@@3)) ($Is |b#0@@12| (TSeq Sequences._default.concat$A@@3))))) (= (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@123) |a#0@@32| |b#0@@12|) (|Seq#Append| |a#0@@32| |b#0@@12|))) :qid |unknown.0:0| :skolemid |11612| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@123) |a#0@@32| |b#0@@12|)) ))))
(assert  (=> true (forall ((Sequences._default.concat$A@@4 T@U) ($ly@@124 T@U) (|a#0@@33| T@U) (|b#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@4) TyType) (= (type $ly@@124) LayerTypeType)) (= (type |a#0@@33|) (SeqType BoxType))) (= (type |b#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@4 (Lit |a#0@@33|) (Lit |b#0@@13|)) (and ($Is |a#0@@33| (TSeq Sequences._default.concat$A@@4)) ($Is |b#0@@13| (TSeq Sequences._default.concat$A@@4))))) (= (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@124) (Lit |a#0@@33|) (Lit |b#0@@13|)) (|Seq#Append| |a#0@@33| |b#0@@13|))) :qid |unknown.0:0| :weight 3 :skolemid |11613| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@124) (Lit |a#0@@33|) (Lit |b#0@@13|))) ))))
(assert (forall ((arg0@@273 T@U) (arg1@@140 T@U) (arg2@@84 T@U) (arg3@@57 T@U) (arg4@@40 T@U) ) (! (= (type (Sequences.__default.concat3 arg0@@273 arg1@@140 arg2@@84 arg3@@57 arg4@@40)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat3| :pattern ( (Sequences.__default.concat3 arg0@@273 arg1@@140 arg2@@84 arg3@@57 arg4@@40)) )))
(assert (forall ((Sequences._default.concat3$A T@U) ($ly@@125 T@U) (|a#0@@34| T@U) (|b#0@@14| T@U) (|c#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A) TyType) (= (type $ly@@125) LayerTypeType)) (= (type |a#0@@34|) (SeqType BoxType))) (= (type |b#0@@14|) BoxType)) (= (type |c#0@@5|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@125) |a#0@@34| |b#0@@14| |c#0@@5|) (Sequences.__default.concat3 Sequences._default.concat3$A $ly@@125 |a#0@@34| |b#0@@14| |c#0@@5|))) :qid |unknown.0:0| :skolemid |11614| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@125) |a#0@@34| |b#0@@14| |c#0@@5|)) )))
(assert (forall ((Sequences._default.concat3$A@@0 T@U) ($ly@@126 T@U) (|a#0@@35| T@U) (|b#0@@15| T@U) (|c#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A@@0) TyType) (= (type $ly@@126) LayerTypeType)) (= (type |a#0@@35|) (SeqType BoxType))) (= (type |b#0@@15|) BoxType)) (= (type |c#0@@6|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $ly@@126 |a#0@@35| |b#0@@15| |c#0@@6|) (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $LZ |a#0@@35| |b#0@@15| |c#0@@6|))) :qid |unknown.0:0| :skolemid |11615| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@0 (AsFuelBottom $ly@@126) |a#0@@35| |b#0@@15| |c#0@@6|)) )))
(assert  (=> true (forall ((Sequences._default.concat3$A@@1 T@U) ($ly@@127 T@U) (|a#0@@36| T@U) (|b#0@@16| T@U) (|c#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@1) TyType) (= (type $ly@@127) LayerTypeType)) (= (type |a#0@@36|) (SeqType BoxType))) (= (type |b#0@@16|) BoxType)) (= (type |c#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@1 |a#0@@36| |b#0@@16| |c#0@@7|) (and (and ($Is |a#0@@36| (TSeq Sequences._default.concat3$A@@1)) ($IsBox |b#0@@16| Sequences._default.concat3$A@@1)) ($Is |c#0@@7| (TSeq Sequences._default.concat3$A@@1))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@127 |a#0@@36| |b#0@@16| |c#0@@7|)) (+ (+ (|Seq#Length| |a#0@@36|) (|Seq#Length| |c#0@@7|)) 1)) (forall ((|i#2@@10| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@10|) (< |i#2@@10| (|Seq#Length| |a#0@@36|))) (= (|Seq#Index| |a#0@@36| |i#2@@10|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@127 |a#0@@36| |b#0@@16| |c#0@@7|) |i#2@@10|)))) :qid |sequence.238:18| :skolemid |11616| :pattern ( (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@127 |a#0@@36| |b#0@@16| |c#0@@7|) |i#2@@10|)) :pattern ( (|Seq#Index| |a#0@@36| |i#2@@10|)) ))) (= (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@127 |a#0@@36| |b#0@@16| |c#0@@7|) (|Seq#Length| |a#0@@36|)) |b#0@@16|)) (forall ((|i#3@@12| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@12|) (< |i#3@@12| (|Seq#Length| |c#0@@7|))) (= (|Seq#Index| |c#0@@7| |i#3@@12|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@127 |a#0@@36| |b#0@@16| |c#0@@7|) (+ (+ (|Seq#Length| |a#0@@36|) 1) |i#3@@12|))))) :qid |sequence.240:18| :skolemid |11617| :pattern ( (|Seq#Index| |c#0@@7| |i#3@@12|)) ))) ($Is (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@127 |a#0@@36| |b#0@@16| |c#0@@7|) (TSeq Sequences._default.concat3$A@@1)))) :qid |unknown.0:0| :skolemid |11618| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@127 |a#0@@36| |b#0@@16| |c#0@@7|)) ))))
(assert (forall ((Sequences._default.concat3$A@@2 T@U) ($ly@@128 T@U) (|a#0@@37| T@U) (|b#0@@17| T@U) (|c#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@2) TyType) (= (type $ly@@128) LayerTypeType)) (= (type |a#0@@37|) (SeqType BoxType))) (= (type |b#0@@17|) BoxType)) (= (type |c#0@@8|) (SeqType BoxType))) (and (and ($Is |a#0@@37| (TSeq Sequences._default.concat3$A@@2)) ($IsBox |b#0@@17| Sequences._default.concat3$A@@2)) ($Is |c#0@@8| (TSeq Sequences._default.concat3$A@@2)))) (and (=> (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@128 |a#0@@37| |b#0@@17| |c#0@@8|) true) (=> true (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@128 |a#0@@37| |b#0@@17| |c#0@@8|)))) :qid |unknown.0:0| :skolemid |11619| :pattern ( (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@128 |a#0@@37| |b#0@@17| |c#0@@8|)) )))
(assert  (=> true (forall ((Sequences._default.concat3$A@@3 T@U) ($ly@@129 T@U) (|a#0@@38| T@U) (|b#0@@18| T@U) (|c#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@3) TyType) (= (type $ly@@129) LayerTypeType)) (= (type |a#0@@38|) (SeqType BoxType))) (= (type |b#0@@18|) BoxType)) (= (type |c#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@3 |a#0@@38| |b#0@@18| |c#0@@9|) (and (and ($Is |a#0@@38| (TSeq Sequences._default.concat3$A@@3)) ($IsBox |b#0@@18| Sequences._default.concat3$A@@3)) ($Is |c#0@@9| (TSeq Sequences._default.concat3$A@@3))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@129) |a#0@@38| |b#0@@18| |c#0@@9|) (|Seq#Append| (|Seq#Append| |a#0@@38| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@18|)) |c#0@@9|))) :qid |unknown.0:0| :skolemid |11620| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@129) |a#0@@38| |b#0@@18| |c#0@@9|)) ))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@4 T@U) ($ly@@130 T@U) (|a#0@@39| T@U) (|b#0@@19| T@U) (|c#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@4) TyType) (= (type $ly@@130) LayerTypeType)) (= (type |a#0@@39|) (SeqType BoxType))) (= (type |b#0@@19|) BoxType)) (= (type |c#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@4 (Lit |a#0@@39|) |b#0@@19| (Lit |c#0@@10|)) (and (and ($Is |a#0@@39| (TSeq Sequences._default.concat3$A@@4)) ($IsBox |b#0@@19| Sequences._default.concat3$A@@4)) ($Is |c#0@@10| (TSeq Sequences._default.concat3$A@@4))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@130) (Lit |a#0@@39|) |b#0@@19| (Lit |c#0@@10|)) (|Seq#Append| (|Seq#Append| |a#0@@39| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@19|)) |c#0@@10|))) :qid |unknown.0:0| :weight 3 :skolemid |11621| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@130) (Lit |a#0@@39|) |b#0@@19| (Lit |c#0@@10|))) ))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@5 T@U) ($ly@@131 T@U) (|a#0@@40| T@U) (|b#0@@20| T@U) (|c#0@@11| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@5) TyType) (= (type $ly@@131) LayerTypeType)) (= (type |a#0@@40|) (SeqType BoxType))) (= (type |b#0@@20|) BoxType)) (= (type |c#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@5 (Lit |a#0@@40|) (Lit |b#0@@20|) (Lit |c#0@@11|)) (and (and ($Is |a#0@@40| (TSeq Sequences._default.concat3$A@@5)) ($IsBox |b#0@@20| Sequences._default.concat3$A@@5)) ($Is |c#0@@11| (TSeq Sequences._default.concat3$A@@5))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@131) (Lit |a#0@@40|) (Lit |b#0@@20|) (Lit |c#0@@11|)) (|Seq#Append| (|Seq#Append| |a#0@@40| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |b#0@@20|))) |c#0@@11|))) :qid |unknown.0:0| :weight 3 :skolemid |11622| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@131) (Lit |a#0@@40|) (Lit |b#0@@20|) (Lit |c#0@@11|))) ))))
(assert (forall ((arg0@@274 T@U) (arg1@@141 T@U) (arg2@@85 T@U) ) (! (= (type (Sequences.__default.concatSeq arg0@@274 arg1@@141 arg2@@85)) (SeqType BoxType)) :qid |funType:Sequences.__default.concatSeq| :pattern ( (Sequences.__default.concatSeq arg0@@274 arg1@@141 arg2@@85)) )))
(assert (forall ((Sequences._default.concatSeq$A T@U) ($ly@@132 T@U) (|a#0@@41| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A) TyType) (= (type $ly@@132) LayerTypeType)) (= (type |a#0@@41|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@132) |a#0@@41|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A $ly@@132 |a#0@@41|))) :qid |unknown.0:0| :skolemid |11623| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@132) |a#0@@41|)) )))
(assert (forall ((Sequences._default.concatSeq$A@@0 T@U) ($ly@@133 T@U) (|a#0@@42| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A@@0) TyType) (= (type $ly@@133) LayerTypeType)) (= (type |a#0@@42|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $ly@@133 |a#0@@42|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $LZ |a#0@@42|))) :qid |unknown.0:0| :skolemid |11624| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 (AsFuelBottom $ly@@133) |a#0@@42|)) )))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@1 T@U) ($ly@@134 T@U) (|a#0@@43| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@1) TyType) (= (type $ly@@134) LayerTypeType)) (= (type |a#0@@43|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@1 |a#0@@43|) ($Is |a#0@@43| (TSeq (TSeq Sequences._default.concatSeq$A@@1))))) ($Is (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@134 |a#0@@43|) (TSeq Sequences._default.concatSeq$A@@1))) :qid |unknown.0:0| :skolemid |11625| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@134 |a#0@@43|)) ))))
(assert (forall ((Sequences._default.concatSeq$A@@2 T@U) ($ly@@135 T@U) (|a#0@@44| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@2) TyType) (= (type $ly@@135) LayerTypeType)) (= (type |a#0@@44|) (SeqType BoxType))) ($Is |a#0@@44| (TSeq (TSeq Sequences._default.concatSeq$A@@2)))) (and (=> (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@135 |a#0@@44|) true) (=> true (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@135 |a#0@@44|)))) :qid |unknown.0:0| :skolemid |11626| :pattern ( (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@135 |a#0@@44|)) )))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@3 T@U) ($ly@@136 T@U) (|a#0@@45| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@3) TyType) (= (type $ly@@136) LayerTypeType)) (= (type |a#0@@45|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 |a#0@@45|) ($Is |a#0@@45| (TSeq (TSeq Sequences._default.concatSeq$A@@3))))) (and (=> (not (= (|Seq#Length| |a#0@@45|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@45|) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@45|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@45|))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@136) |a#0@@45|) (ite (= (|Seq#Length| |a#0@@45|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 $ly@@136 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@45|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@3) |a#0@@45|))))))) :qid |unknown.0:0| :skolemid |11627| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@136) |a#0@@45|)) ))))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@4 T@U) ($ly@@137 T@U) (|a#0@@46| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@4) TyType) (= (type $ly@@137) LayerTypeType)) (= (type |a#0@@46|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit |a#0@@46|)) ($Is |a#0@@46| (TSeq (TSeq Sequences._default.concatSeq$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@46|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@46|)) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@46|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@46|)))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@137) (Lit |a#0@@46|)) (ite (= (|Seq#Length| (Lit |a#0@@46|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@137) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@46|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@46|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |11628| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@137) (Lit |a#0@@46|))) ))))
(assert (forall ((Sequences._default.IsPrefix$A T@U) ($ly@@138 T@U) (|a#0@@47| T@U) (|b#0@@21| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A) TyType) (= (type $ly@@138) LayerTypeType)) (= (type |a#0@@47|) (SeqType BoxType))) (= (type |b#0@@21|) (SeqType BoxType))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@138) |a#0@@47| |b#0@@21|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A $ly@@138 |a#0@@47| |b#0@@21|)) (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A $ly@@138 |a#0@@47| |b#0@@21|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@138) |a#0@@47| |b#0@@21|)))) :qid |unknown.0:0| :skolemid |11629| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@138) |a#0@@47| |b#0@@21|)) )))
(assert (forall ((Sequences._default.IsPrefix$A@@0 T@U) ($ly@@139 T@U) (|a#0@@48| T@U) (|b#0@@22| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A@@0) TyType) (= (type $ly@@139) LayerTypeType)) (= (type |a#0@@48|) (SeqType BoxType))) (= (type |b#0@@22|) (SeqType BoxType))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $ly@@139 |a#0@@48| |b#0@@22|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $LZ |a#0@@48| |b#0@@22|)) (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $LZ |a#0@@48| |b#0@@22|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $ly@@139 |a#0@@48| |b#0@@22|)))) :qid |unknown.0:0| :skolemid |11630| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 (AsFuelBottom $ly@@139) |a#0@@48| |b#0@@22|)) )))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@1 T@U) ($ly@@140 T@U) (|a#0@@49| T@U) (|b#0@@23| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.IsPrefix$A@@1) TyType) (= (type $ly@@140) LayerTypeType)) (= (type |a#0@@49|) (SeqType BoxType))) (= (type |b#0@@23|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@1 |a#0@@49| |b#0@@23|) (and ($Is |a#0@@49| (TSeq Sequences._default.IsPrefix$A@@1)) ($Is |b#0@@23| (TSeq Sequences._default.IsPrefix$A@@1))))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@140 |a#0@@49| |b#0@@23|)) (<= (|Seq#Length| |a#0@@49|) (|Seq#Length| |b#0@@23|))) :qid |unknown.0:0| :skolemid |11631| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@140 |a#0@@49| |b#0@@23|)) ))))
(assert (forall ((Sequences._default.IsPrefix$A@@2 T@U) ($ly@@141 T@U) (|a#0@@50| T@U) (|b#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@2) TyType) (= (type $ly@@141) LayerTypeType)) (= (type |a#0@@50|) (SeqType BoxType))) (= (type |b#0@@24|) (SeqType BoxType))) (and ($Is |a#0@@50| (TSeq Sequences._default.IsPrefix$A@@2)) ($Is |b#0@@24| (TSeq Sequences._default.IsPrefix$A@@2)))) (and (=> (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@141 |a#0@@50| |b#0@@24|) true) (=> true (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@141 |a#0@@50| |b#0@@24|)))) :qid |unknown.0:0| :skolemid |11632| :pattern ( (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@141 |a#0@@50| |b#0@@24|)) )))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@3 T@U) ($ly@@142 T@U) (|a#0@@51| T@U) (|b#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@3) TyType) (= (type $ly@@142) LayerTypeType)) (= (type |a#0@@51|) (SeqType BoxType))) (= (type |b#0@@25|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@3 |a#0@@51| |b#0@@25|) (and ($Is |a#0@@51| (TSeq Sequences._default.IsPrefix$A@@3)) ($Is |b#0@@25| (TSeq Sequences._default.IsPrefix$A@@3))))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@142) |a#0@@51| |b#0@@25|) (and (<= (|Seq#Length| |a#0@@51|) (|Seq#Length| |b#0@@25|)) (|Seq#Equal| |a#0@@51| (|Seq#Take| |b#0@@25| (|Seq#Length| |a#0@@51|))))) (=> (and (<= (|Seq#Length| |a#0@@51|) (|Seq#Length| |b#0@@25|)) (|Seq#Equal| |a#0@@51| (|Seq#Take| |b#0@@25| (|Seq#Length| |a#0@@51|)))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@142) |a#0@@51| |b#0@@25|)))) :qid |unknown.0:0| :skolemid |11633| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@142) |a#0@@51| |b#0@@25|)) ))))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@4 T@U) ($ly@@143 T@U) (|a#0@@52| T@U) (|b#0@@26| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@4) TyType) (= (type $ly@@143) LayerTypeType)) (= (type |a#0@@52|) (SeqType BoxType))) (= (type |b#0@@26|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@4 (Lit |a#0@@52|) (Lit |b#0@@26|)) (and ($Is |a#0@@52| (TSeq Sequences._default.IsPrefix$A@@4)) ($Is |b#0@@26| (TSeq Sequences._default.IsPrefix$A@@4))))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@143) (Lit |a#0@@52|) (Lit |b#0@@26|)) (and (<= (|Seq#Length| (Lit |a#0@@52|)) (|Seq#Length| (Lit |b#0@@26|))) (|Seq#Equal| |a#0@@52| (|Seq#Take| (Lit |b#0@@26|) (|Seq#Length| (Lit |a#0@@52|)))))) (=> (and (<= (|Seq#Length| (Lit |a#0@@52|)) (|Seq#Length| (Lit |b#0@@26|))) (|Seq#Equal| |a#0@@52| (|Seq#Take| (Lit |b#0@@26|) (|Seq#Length| (Lit |a#0@@52|))))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@143) (Lit |a#0@@52|) (Lit |b#0@@26|))))) :qid |unknown.0:0| :weight 3 :skolemid |11634| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@143) (Lit |a#0@@52|) (Lit |b#0@@26|))) ))))
(assert (forall ((Sequences._default.IsSuffix$A T@U) ($ly@@144 T@U) (|a#0@@53| T@U) (|b#0@@27| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A) TyType) (= (type $ly@@144) LayerTypeType)) (= (type |a#0@@53|) (SeqType BoxType))) (= (type |b#0@@27|) (SeqType BoxType))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@144) |a#0@@53| |b#0@@27|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A $ly@@144 |a#0@@53| |b#0@@27|)) (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A $ly@@144 |a#0@@53| |b#0@@27|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@144) |a#0@@53| |b#0@@27|)))) :qid |unknown.0:0| :skolemid |11635| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@144) |a#0@@53| |b#0@@27|)) )))
(assert (forall ((Sequences._default.IsSuffix$A@@0 T@U) ($ly@@145 T@U) (|a#0@@54| T@U) (|b#0@@28| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A@@0) TyType) (= (type $ly@@145) LayerTypeType)) (= (type |a#0@@54|) (SeqType BoxType))) (= (type |b#0@@28|) (SeqType BoxType))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $ly@@145 |a#0@@54| |b#0@@28|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $LZ |a#0@@54| |b#0@@28|)) (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $LZ |a#0@@54| |b#0@@28|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $ly@@145 |a#0@@54| |b#0@@28|)))) :qid |unknown.0:0| :skolemid |11636| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 (AsFuelBottom $ly@@145) |a#0@@54| |b#0@@28|)) )))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@1 T@U) ($ly@@146 T@U) (|a#0@@55| T@U) (|b#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@1) TyType) (= (type $ly@@146) LayerTypeType)) (= (type |a#0@@55|) (SeqType BoxType))) (= (type |b#0@@29|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@1 |a#0@@55| |b#0@@29|) (and ($Is |a#0@@55| (TSeq Sequences._default.IsSuffix$A@@1)) ($Is |b#0@@29| (TSeq Sequences._default.IsSuffix$A@@1))))) true) :qid |unknown.0:0| :skolemid |11637| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@1 $ly@@146 |a#0@@55| |b#0@@29|)) ))))
(assert (forall ((Sequences._default.IsSuffix$A@@2 T@U) ($ly@@147 T@U) (|a#0@@56| T@U) (|b#0@@30| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@2) TyType) (= (type $ly@@147) LayerTypeType)) (= (type |a#0@@56|) (SeqType BoxType))) (= (type |b#0@@30|) (SeqType BoxType))) (and ($Is |a#0@@56| (TSeq Sequences._default.IsSuffix$A@@2)) ($Is |b#0@@30| (TSeq Sequences._default.IsSuffix$A@@2)))) (and (=> (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@147 |a#0@@56| |b#0@@30|) true) (=> true (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@147 |a#0@@56| |b#0@@30|)))) :qid |unknown.0:0| :skolemid |11638| :pattern ( (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@147 |a#0@@56| |b#0@@30|)) )))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@3 T@U) ($ly@@148 T@U) (|a#0@@57| T@U) (|b#0@@31| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@3) TyType) (= (type $ly@@148) LayerTypeType)) (= (type |a#0@@57|) (SeqType BoxType))) (= (type |b#0@@31|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@3 |a#0@@57| |b#0@@31|) (and ($Is |a#0@@57| (TSeq Sequences._default.IsSuffix$A@@3)) ($Is |b#0@@31| (TSeq Sequences._default.IsSuffix$A@@3))))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@148) |a#0@@57| |b#0@@31|) (and (<= (|Seq#Length| |a#0@@57|) (|Seq#Length| |b#0@@31|)) (|Seq#Equal| |a#0@@57| (|Seq#Drop| |b#0@@31| (- (|Seq#Length| |b#0@@31|) (|Seq#Length| |a#0@@57|)))))) (=> (and (<= (|Seq#Length| |a#0@@57|) (|Seq#Length| |b#0@@31|)) (|Seq#Equal| |a#0@@57| (|Seq#Drop| |b#0@@31| (- (|Seq#Length| |b#0@@31|) (|Seq#Length| |a#0@@57|))))) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@148) |a#0@@57| |b#0@@31|)))) :qid |unknown.0:0| :skolemid |11639| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@148) |a#0@@57| |b#0@@31|)) ))))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@4 T@U) ($ly@@149 T@U) (|a#0@@58| T@U) (|b#0@@32| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@4) TyType) (= (type $ly@@149) LayerTypeType)) (= (type |a#0@@58|) (SeqType BoxType))) (= (type |b#0@@32|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@4 (Lit |a#0@@58|) (Lit |b#0@@32|)) (and ($Is |a#0@@58| (TSeq Sequences._default.IsSuffix$A@@4)) ($Is |b#0@@32| (TSeq Sequences._default.IsSuffix$A@@4))))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@149) (Lit |a#0@@58|) (Lit |b#0@@32|)) (and (<= (|Seq#Length| (Lit |a#0@@58|)) (|Seq#Length| (Lit |b#0@@32|))) (|Seq#Equal| |a#0@@58| (|Seq#Drop| (Lit |b#0@@32|) (- (|Seq#Length| (Lit |b#0@@32|)) (|Seq#Length| (Lit |a#0@@58|))))))) (=> (and (<= (|Seq#Length| (Lit |a#0@@58|)) (|Seq#Length| (Lit |b#0@@32|))) (|Seq#Equal| |a#0@@58| (|Seq#Drop| (Lit |b#0@@32|) (- (|Seq#Length| (Lit |b#0@@32|)) (|Seq#Length| (Lit |a#0@@58|)))))) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@149) (Lit |a#0@@58|) (Lit |b#0@@32|))))) :qid |unknown.0:0| :weight 3 :skolemid |11640| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@149) (Lit |a#0@@58|) (Lit |b#0@@32|))) ))))
(assert (forall ((arg0@@275 T@U) (arg1@@142 T@U) (arg2@@86 T@U) (arg3@@58 T@U) (arg4@@41 Int) ) (! (= (type (Sequences.__default.SeqIndexIterate arg0@@275 arg1@@142 arg2@@86 arg3@@58 arg4@@41)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndexIterate| :pattern ( (Sequences.__default.SeqIndexIterate arg0@@275 arg1@@142 arg2@@86 arg3@@58 arg4@@41)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A T@U) ($ly@@150 T@U) (|run#0@@54| T@U) (|needle#0| T@U) (|i#0@@51| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A) TyType) (= (type $ly@@150) LayerTypeType)) (= (type |run#0@@54|) (SeqType BoxType))) (= (type |needle#0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@150) |run#0@@54| |needle#0| |i#0@@51|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A $ly@@150 |run#0@@54| |needle#0| |i#0@@51|))) :qid |unknown.0:0| :skolemid |11641| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@150) |run#0@@54| |needle#0| |i#0@@51|)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@0 T@U) ($ly@@151 T@U) (|run#0@@55| T@U) (|needle#0@@0| T@U) (|i#0@@52| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@0) TyType) (= (type $ly@@151) LayerTypeType)) (= (type |run#0@@55|) (SeqType BoxType))) (= (type |needle#0@@0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $ly@@151 |run#0@@55| |needle#0@@0| |i#0@@52|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $LZ |run#0@@55| |needle#0@@0| |i#0@@52|))) :qid |unknown.0:0| :skolemid |11642| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 (AsFuelBottom $ly@@151) |run#0@@55| |needle#0@@0| |i#0@@52|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@1 T@U) ($ly@@152 T@U) (|run#0@@56| T@U) (|needle#0@@1| T@U) (|i#0@@53| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@1) TyType) (= (type $ly@@152) LayerTypeType)) (= (type |run#0@@56|) (SeqType BoxType))) (= (type |needle#0@@1|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@1 |run#0@@56| |needle#0@@1| |i#0@@53|) (and (and ($Is |run#0@@56| (TSeq Sequences._default.SeqIndexIterate$A@@1)) ($IsBox |needle#0@@1| Sequences._default.SeqIndexIterate$A@@1)) (and (<= (LitInt 0) |i#0@@53|) (<= |i#0@@53| (|Seq#Length| |run#0@@56|)))))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@152 |run#0@@56| |needle#0@@1| |i#0@@53|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@152 |run#0@@56| |needle#0@@1| |i#0@@53|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@152 |run#0@@56| |needle#0@@1| |i#0@@53|)))) (|Seq#Length| |run#0@@56|))) (= (|Seq#Index| |run#0@@56| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@152 |run#0@@56| |needle#0@@1| |i#0@@53|))))) |needle#0@@1|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@152 |run#0@@56| |needle#0@@1| |i#0@@53|)) (forall ((|j#1| Int) ) (!  (=> (and (<= |i#0@@53| |j#1|) (< |j#1| (|Seq#Length| |run#0@@56|))) (not (= (|Seq#Index| |run#0@@56| |j#1|) |needle#0@@1|))) :qid |sequence.340:32| :skolemid |11643| :pattern ( (|Seq#Index| |run#0@@56| |j#1|)) )))) ($Is (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@152 |run#0@@56| |needle#0@@1| |i#0@@53|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |11644| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@152 |run#0@@56| |needle#0@@1| |i#0@@53|)) ))))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@2 T@U) ($ly@@153 T@U) (|run#0@@57| T@U) (|needle#0@@2| T@U) (|i#0@@54| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@2) TyType) (= (type $ly@@153) LayerTypeType)) (= (type |run#0@@57|) (SeqType BoxType))) (= (type |needle#0@@2|) BoxType)) (and ($Is |run#0@@57| (TSeq Sequences._default.SeqIndexIterate$A@@2)) ($IsBox |needle#0@@2| Sequences._default.SeqIndexIterate$A@@2))) (and (=> (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@153 |run#0@@57| |needle#0@@2| |i#0@@54|) (and (<= (LitInt 0) |i#0@@54|) (<= |i#0@@54| (|Seq#Length| |run#0@@57|)))) (=> (and (<= (LitInt 0) |i#0@@54|) (<= |i#0@@54| (|Seq#Length| |run#0@@57|))) (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@153 |run#0@@57| |needle#0@@2| |i#0@@54|)))) :qid |unknown.0:0| :skolemid |11645| :pattern ( (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@153 |run#0@@57| |needle#0@@2| |i#0@@54|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@3 T@U) ($ly@@154 T@U) (|run#0@@58| T@U) (|needle#0@@3| T@U) (|i#0@@55| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@3) TyType) (= (type $ly@@154) LayerTypeType)) (= (type |run#0@@58|) (SeqType BoxType))) (= (type |needle#0@@3|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@58| |needle#0@@3| |i#0@@55|) (and (and ($Is |run#0@@58| (TSeq Sequences._default.SeqIndexIterate$A@@3)) ($IsBox |needle#0@@3| Sequences._default.SeqIndexIterate$A@@3)) (and (<= (LitInt 0) |i#0@@55|) (<= |i#0@@55| (|Seq#Length| |run#0@@58|)))))) (and (=> (not (= |i#0@@55| (|Seq#Length| |run#0@@58|))) (=> (not (= (|Seq#Index| |run#0@@58| |i#0@@55|) |needle#0@@3|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@58| |needle#0@@3| (+ |i#0@@55| 1)))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@154) |run#0@@58| |needle#0@@3| |i#0@@55|) (ite (= |i#0@@55| (|Seq#Length| |run#0@@58|)) |#Options.Option.None| (ite (= (|Seq#Index| |run#0@@58| |i#0@@55|) |needle#0@@3|) (|#Options.Option.Some| ($Box (int_2_U |i#0@@55|))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 $ly@@154 |run#0@@58| |needle#0@@3| (+ |i#0@@55| 1))))))) :qid |unknown.0:0| :skolemid |11646| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@154) |run#0@@58| |needle#0@@3| |i#0@@55|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@4 T@U) ($ly@@155 T@U) (|run#0@@59| T@U) (|needle#0@@4| T@U) (|i#0@@56| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@4) TyType) (= (type $ly@@155) LayerTypeType)) (= (type |run#0@@59|) (SeqType BoxType))) (= (type |needle#0@@4|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@59|) |needle#0@@4| (LitInt |i#0@@56|)) (and (and ($Is |run#0@@59| (TSeq Sequences._default.SeqIndexIterate$A@@4)) ($IsBox |needle#0@@4| Sequences._default.SeqIndexIterate$A@@4)) (and (<= (LitInt 0) (LitInt |i#0@@56|)) (<= (LitInt |i#0@@56|) (|Seq#Length| (Lit |run#0@@59|))))))) (and (=> (not (= (LitInt |i#0@@56|) (|Seq#Length| (Lit |run#0@@59|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@59|) (LitInt |i#0@@56|)) |needle#0@@4|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@59|) |needle#0@@4| (LitInt (+ |i#0@@56| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@155) (Lit |run#0@@59|) |needle#0@@4| (LitInt |i#0@@56|)) (ite (= (LitInt |i#0@@56|) (|Seq#Length| (Lit |run#0@@59|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@59|) (LitInt |i#0@@56|)) |needle#0@@4|) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@56|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@155) (Lit |run#0@@59|) |needle#0@@4| (LitInt (+ |i#0@@56| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |11647| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@155) (Lit |run#0@@59|) |needle#0@@4| (LitInt |i#0@@56|))) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@5 T@U) ($ly@@156 T@U) (|run#0@@60| T@U) (|needle#0@@5| T@U) (|i#0@@57| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@5) TyType) (= (type $ly@@156) LayerTypeType)) (= (type |run#0@@60|) (SeqType BoxType))) (= (type |needle#0@@5|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt |i#0@@57|)) (and (and ($Is |run#0@@60| (TSeq Sequences._default.SeqIndexIterate$A@@5)) ($IsBox |needle#0@@5| Sequences._default.SeqIndexIterate$A@@5)) (and (<= (LitInt 0) (LitInt |i#0@@57|)) (<= (LitInt |i#0@@57|) (|Seq#Length| (Lit |run#0@@60|))))))) (and (=> (not (= (LitInt |i#0@@57|) (|Seq#Length| (Lit |run#0@@60|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@60|) (LitInt |i#0@@57|)) (Lit |needle#0@@5|))) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt (+ |i#0@@57| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@156) (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt |i#0@@57|)) (ite (= (LitInt |i#0@@57|) (|Seq#Length| (Lit |run#0@@60|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@60|) (LitInt |i#0@@57|)) (Lit |needle#0@@5|)) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@57|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@156) (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt (+ |i#0@@57| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |11648| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@156) (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt |i#0@@57|))) ))))
(assert (forall ((arg0@@276 T@U) (arg1@@143 T@U) (arg2@@87 T@U) (arg3@@59 T@U) ) (! (= (type (Sequences.__default.SeqIndex arg0@@276 arg1@@143 arg2@@87 arg3@@59)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndex| :pattern ( (Sequences.__default.SeqIndex arg0@@276 arg1@@143 arg2@@87 arg3@@59)) )))
(assert (forall ((Sequences._default.SeqIndex$A T@U) ($ly@@157 T@U) (|run#0@@61| T@U) (|needle#0@@6| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A) TyType) (= (type $ly@@157) LayerTypeType)) (= (type |run#0@@61|) (SeqType BoxType))) (= (type |needle#0@@6|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@157) |run#0@@61| |needle#0@@6|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A $ly@@157 |run#0@@61| |needle#0@@6|))) :qid |unknown.0:0| :skolemid |11649| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@157) |run#0@@61| |needle#0@@6|)) )))
(assert (forall ((Sequences._default.SeqIndex$A@@0 T@U) ($ly@@158 T@U) (|run#0@@62| T@U) (|needle#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A@@0) TyType) (= (type $ly@@158) LayerTypeType)) (= (type |run#0@@62|) (SeqType BoxType))) (= (type |needle#0@@7|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $ly@@158 |run#0@@62| |needle#0@@7|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $LZ |run#0@@62| |needle#0@@7|))) :qid |unknown.0:0| :skolemid |11650| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 (AsFuelBottom $ly@@158) |run#0@@62| |needle#0@@7|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@1 T@U) ($ly@@159 T@U) (|run#0@@63| T@U) (|needle#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@1) TyType) (= (type $ly@@159) LayerTypeType)) (= (type |run#0@@63|) (SeqType BoxType))) (= (type |needle#0@@8|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@1 |run#0@@63| |needle#0@@8|) (and ($Is |run#0@@63| (TSeq Sequences._default.SeqIndex$A@@1)) ($IsBox |needle#0@@8| Sequences._default.SeqIndex$A@@1)))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@159 |run#0@@63| |needle#0@@8|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@159 |run#0@@63| |needle#0@@8|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@159 |run#0@@63| |needle#0@@8|)))) (|Seq#Length| |run#0@@63|))) (= (|Seq#Index| |run#0@@63| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@159 |run#0@@63| |needle#0@@8|))))) |needle#0@@8|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@159 |run#0@@63| |needle#0@@8|)) (forall ((|i#1@@7| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@7|) (< |i#1@@7| (|Seq#Length| |run#0@@63|))) (not (= (|Seq#Index| |run#0@@63| |i#1@@7|) |needle#0@@8|))) :qid |sequence.350:32| :skolemid |11651| :pattern ( (|Seq#Index| |run#0@@63| |i#1@@7|)) )))) ($Is (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@159 |run#0@@63| |needle#0@@8|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |11652| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@159 |run#0@@63| |needle#0@@8|)) ))))
(assert (forall ((Sequences._default.SeqIndex$A@@2 T@U) ($ly@@160 T@U) (|run#0@@64| T@U) (|needle#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@2) TyType) (= (type $ly@@160) LayerTypeType)) (= (type |run#0@@64|) (SeqType BoxType))) (= (type |needle#0@@9|) BoxType)) (and ($Is |run#0@@64| (TSeq Sequences._default.SeqIndex$A@@2)) ($IsBox |needle#0@@9| Sequences._default.SeqIndex$A@@2))) (and (=> (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@160 |run#0@@64| |needle#0@@9|) true) (=> true (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@160 |run#0@@64| |needle#0@@9|)))) :qid |unknown.0:0| :skolemid |11653| :pattern ( (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@160 |run#0@@64| |needle#0@@9|)) )))
(assert (= (type StartFuel_Sequences._default.SeqIndexIterate) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@3 T@U) ($ly@@161 T@U) (|run#0@@65| T@U) (|needle#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@3) TyType) (= (type $ly@@161) LayerTypeType)) (= (type |run#0@@65|) (SeqType BoxType))) (= (type |needle#0@@10|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@65| |needle#0@@10|) (and ($Is |run#0@@65| (TSeq Sequences._default.SeqIndex$A@@3)) ($IsBox |needle#0@@10| Sequences._default.SeqIndex$A@@3)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@65| |needle#0@@10| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@161) |run#0@@65| |needle#0@@10|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@3 StartFuel_Sequences._default.SeqIndexIterate |run#0@@65| |needle#0@@10| (LitInt 0))))) :qid |unknown.0:0| :skolemid |11654| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@161) |run#0@@65| |needle#0@@10|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@4 T@U) ($ly@@162 T@U) (|run#0@@66| T@U) (|needle#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@4) TyType) (= (type $ly@@162) LayerTypeType)) (= (type |run#0@@66|) (SeqType BoxType))) (= (type |needle#0@@11|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@66|) |needle#0@@11|) (and ($Is |run#0@@66| (TSeq Sequences._default.SeqIndex$A@@4)) ($IsBox |needle#0@@11| Sequences._default.SeqIndex$A@@4)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@66|) |needle#0@@11| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@162) (Lit |run#0@@66|) |needle#0@@11|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@4 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@66|) |needle#0@@11| (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |11655| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@162) (Lit |run#0@@66|) |needle#0@@11|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@5 T@U) ($ly@@163 T@U) (|run#0@@67| T@U) (|needle#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@5) TyType) (= (type $ly@@163) LayerTypeType)) (= (type |run#0@@67|) (SeqType BoxType))) (= (type |needle#0@@12|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@67|) (Lit |needle#0@@12|)) (and ($Is |run#0@@67| (TSeq Sequences._default.SeqIndex$A@@5)) ($IsBox |needle#0@@12| Sequences._default.SeqIndex$A@@5)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@67|) (Lit |needle#0@@12|) (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@163) (Lit |run#0@@67|) (Lit |needle#0@@12|)) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@5 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@67|) (Lit |needle#0@@12|) (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |11656| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@163) (Lit |run#0@@67|) (Lit |needle#0@@12|))) ))))
(assert (forall ((arg0@@277 T@U) (arg1@@144 T@U) (arg2@@88 Int) (arg3@@60 T@U) ) (! (= (type (Sequences.__default.SeqOfLength arg0@@277 arg1@@144 arg2@@88 arg3@@60)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqOfLength| :pattern ( (Sequences.__default.SeqOfLength arg0@@277 arg1@@144 arg2@@88 arg3@@60)) )))
(assert (forall ((Sequences._default.SeqOfLength$V T@U) ($ly@@164 T@U) (|length#0| Int) (|v#0| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V) TyType) (= (type $ly@@164) LayerTypeType)) (= (type |v#0|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@164) |length#0| |v#0|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V $ly@@164 |length#0| |v#0|))) :qid |unknown.0:0| :skolemid |11657| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@164) |length#0| |v#0|)) )))
(assert (forall ((Sequences._default.SeqOfLength$V@@0 T@U) ($ly@@165 T@U) (|length#0@@0| Int) (|v#0@@0| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V@@0) TyType) (= (type $ly@@165) LayerTypeType)) (= (type |v#0@@0|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $ly@@165 |length#0@@0| |v#0@@0|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $LZ |length#0@@0| |v#0@@0|))) :qid |unknown.0:0| :skolemid |11658| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 (AsFuelBottom $ly@@165) |length#0@@0| |v#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@1 T@U) ($ly@@166 T@U) (|length#0@@1| Int) (|v#0@@1| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@1) TyType) (= (type $ly@@166) LayerTypeType)) (= (type |v#0@@1|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@1 |length#0@@1| |v#0@@1|) (and (<= (LitInt 0) |length#0@@1|) ($IsBox |v#0@@1| Sequences._default.SeqOfLength$V@@1)))) (and (and (= (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@166 |length#0@@1| |v#0@@1|)) |length#0@@1|) (forall ((|i#1@@8| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@8|) (< |i#1@@8| (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@166 |length#0@@1| |v#0@@1|)))) (= (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@166 |length#0@@1| |v#0@@1|) |i#1@@8|) |v#0@@1|)) :qid |sequence.357:18| :skolemid |11659| :pattern ( (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@166 |length#0@@1| |v#0@@1|) |i#1@@8|)) ))) ($Is (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@166 |length#0@@1| |v#0@@1|) (TSeq Sequences._default.SeqOfLength$V@@1)))) :qid |unknown.0:0| :skolemid |11660| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@166 |length#0@@1| |v#0@@1|)) ))))
(assert (forall ((Sequences._default.SeqOfLength$V@@2 T@U) ($ly@@167 T@U) (|length#0@@2| Int) (|v#0@@2| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@2) TyType) (= (type $ly@@167) LayerTypeType)) (= (type |v#0@@2|) BoxType)) (and (<= (LitInt 0) |length#0@@2|) ($IsBox |v#0@@2| Sequences._default.SeqOfLength$V@@2))) (and (=> (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@167 |length#0@@2| |v#0@@2|) true) (=> true (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@167 |length#0@@2| |v#0@@2|)))) :qid |unknown.0:0| :skolemid |11661| :pattern ( (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@167 |length#0@@2| |v#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@3 T@U) ($ly@@168 T@U) (|length#0@@3| Int) (|v#0@@3| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@3) TyType) (= (type $ly@@168) LayerTypeType)) (= (type |v#0@@3|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 |length#0@@3| |v#0@@3|) (and (<= (LitInt 0) |length#0@@3|) ($IsBox |v#0@@3| Sequences._default.SeqOfLength$V@@3)))) (and (=> (not (= |length#0@@3| (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 (- |length#0@@3| 1) |v#0@@3|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@168) |length#0@@3| |v#0@@3|) (ite (= |length#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@3|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 $ly@@168 (- |length#0@@3| 1) |v#0@@3|)))))) :qid |unknown.0:0| :skolemid |11662| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@168) |length#0@@3| |v#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@4 T@U) ($ly@@169 T@U) (|length#0@@4| Int) (|v#0@@4| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@4) TyType) (= (type $ly@@169) LayerTypeType)) (= (type |v#0@@4|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt |length#0@@4|) |v#0@@4|) (and (<= (LitInt 0) |length#0@@4|) ($IsBox |v#0@@4| Sequences._default.SeqOfLength$V@@4)))) (and (=> (not (= (LitInt |length#0@@4|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt (- |length#0@@4| 1)) |v#0@@4|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@169) (LitInt |length#0@@4|) |v#0@@4|) (ite (= (LitInt |length#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@4|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@169) (LitInt (- |length#0@@4| 1)) |v#0@@4|)))))) :qid |unknown.0:0| :weight 3 :skolemid |11663| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@169) (LitInt |length#0@@4|) |v#0@@4|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@5 T@U) ($ly@@170 T@U) (|length#0@@5| Int) (|v#0@@5| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@5) TyType) (= (type $ly@@170) LayerTypeType)) (= (type |v#0@@5|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt |length#0@@5|) (Lit |v#0@@5|)) (and (<= (LitInt 0) |length#0@@5|) ($IsBox |v#0@@5| Sequences._default.SeqOfLength$V@@5)))) (and (=> (not (= (LitInt |length#0@@5|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt (- |length#0@@5| 1)) (Lit |v#0@@5|))) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@170) (LitInt |length#0@@5|) (Lit |v#0@@5|)) (ite (= (LitInt |length#0@@5|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |v#0@@5|)) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@170) (LitInt (- |length#0@@5| 1)) (Lit |v#0@@5|))))))) :qid |unknown.0:0| :weight 3 :skolemid |11664| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@170) (LitInt |length#0@@5|) (Lit |v#0@@5|))) ))))
(assert (forall ((arg0@@278 T@U) (arg1@@145 T@U) (arg2@@89 T@U) (arg3@@61 Int) (arg4@@42 T@U) ) (! (= (type (Sequences.__default.SeqIndexUpdate arg0@@278 arg1@@145 arg2@@89 arg3@@61 arg4@@42)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqIndexUpdate| :pattern ( (Sequences.__default.SeqIndexUpdate arg0@@278 arg1@@145 arg2@@89 arg3@@61 arg4@@42)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T T@U) ($ly@@171 T@U) (|s#0@@31| T@U) (|i#0@@58| Int) (|t#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T) TyType) (= (type $ly@@171) LayerTypeType)) (= (type |s#0@@31|) (SeqType BoxType))) (= (type |t#0|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@171) |s#0@@31| |i#0@@58| |t#0|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T $ly@@171 |s#0@@31| |i#0@@58| |t#0|))) :qid |unknown.0:0| :skolemid |11665| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@171) |s#0@@31| |i#0@@58| |t#0|)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@0 T@U) ($ly@@172 T@U) (|s#0@@32| T@U) (|i#0@@59| Int) (|t#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@0) TyType) (= (type $ly@@172) LayerTypeType)) (= (type |s#0@@32|) (SeqType BoxType))) (= (type |t#0@@0|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $ly@@172 |s#0@@32| |i#0@@59| |t#0@@0|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $LZ |s#0@@32| |i#0@@59| |t#0@@0|))) :qid |unknown.0:0| :skolemid |11666| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 (AsFuelBottom $ly@@172) |s#0@@32| |i#0@@59| |t#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@1 T@U) ($ly@@173 T@U) (|s#0@@33| T@U) (|i#0@@60| Int) (|t#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@1) TyType) (= (type $ly@@173) LayerTypeType)) (= (type |s#0@@33|) (SeqType BoxType))) (= (type |t#0@@1|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@1 |s#0@@33| |i#0@@60| |t#0@@1|) (and (and (and ($Is |s#0@@33| (TSeq Sequences._default.SeqIndexUpdate$T@@1)) (and (<= (LitInt 0) |i#0@@60|) (< |i#0@@60| 18446744073709551616))) ($IsBox |t#0@@1| Sequences._default.SeqIndexUpdate$T@@1)) (and (< (+ |i#0@@60| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@60|) (< |i#0@@60| (|Seq#Length| |s#0@@33|))))))) (and (|Seq#Equal| (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@173 |s#0@@33| |i#0@@60| |t#0@@1|) (|Seq#Update| |s#0@@33| |i#0@@60| |t#0@@1|)) ($Is (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@173 |s#0@@33| |i#0@@60| |t#0@@1|) (TSeq Sequences._default.SeqIndexUpdate$T@@1)))) :qid |unknown.0:0| :skolemid |11667| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@173 |s#0@@33| |i#0@@60| |t#0@@1|)) ))))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@2 T@U) ($ly@@174 T@U) (|s#0@@34| T@U) (|i#0@@61| Int) (|t#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@2) TyType) (= (type $ly@@174) LayerTypeType)) (= (type |s#0@@34|) (SeqType BoxType))) (= (type |t#0@@2|) BoxType)) (and (and ($Is |s#0@@34| (TSeq Sequences._default.SeqIndexUpdate$T@@2)) (and (<= (LitInt 0) |i#0@@61|) (< |i#0@@61| 18446744073709551616))) ($IsBox |t#0@@2| Sequences._default.SeqIndexUpdate$T@@2))) (and (=> (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@174 |s#0@@34| |i#0@@61| |t#0@@2|) (and (< (+ |i#0@@61| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@61|) (< |i#0@@61| (|Seq#Length| |s#0@@34|))))) (=> (and (< (+ |i#0@@61| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@61|) (< |i#0@@61| (|Seq#Length| |s#0@@34|)))) (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@174 |s#0@@34| |i#0@@61| |t#0@@2|)))) :qid |unknown.0:0| :skolemid |11668| :pattern ( (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@174 |s#0@@34| |i#0@@61| |t#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@3 T@U) ($ly@@175 T@U) (|s#0@@35| T@U) (|i#0@@62| Int) (|t#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@3) TyType) (= (type $ly@@175) LayerTypeType)) (= (type |s#0@@35|) (SeqType BoxType))) (= (type |t#0@@3|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@3 |s#0@@35| |i#0@@62| |t#0@@3|) (and (and (and ($Is |s#0@@35| (TSeq Sequences._default.SeqIndexUpdate$T@@3)) (and (<= (LitInt 0) |i#0@@62|) (< |i#0@@62| 18446744073709551616))) ($IsBox |t#0@@3| Sequences._default.SeqIndexUpdate$T@@3)) (and (< (+ |i#0@@62| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@62|) (< |i#0@@62| (|Seq#Length| |s#0@@35|))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@175) |s#0@@35| |i#0@@62| |t#0@@3|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@35| |i#0@@62|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@3|)) (|Seq#Drop| |s#0@@35| (+ |i#0@@62| 1))))) :qid |unknown.0:0| :skolemid |11669| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@175) |s#0@@35| |i#0@@62| |t#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@4 T@U) ($ly@@176 T@U) (|s#0@@36| T@U) (|i#0@@63| Int) (|t#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@4) TyType) (= (type $ly@@176) LayerTypeType)) (= (type |s#0@@36|) (SeqType BoxType))) (= (type |t#0@@4|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@4 (Lit |s#0@@36|) (LitInt |i#0@@63|) |t#0@@4|) (and (and (and ($Is |s#0@@36| (TSeq Sequences._default.SeqIndexUpdate$T@@4)) (and (<= (LitInt 0) |i#0@@63|) (< |i#0@@63| 18446744073709551616))) ($IsBox |t#0@@4| Sequences._default.SeqIndexUpdate$T@@4)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@63| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@63|)) (< |i#0@@63| (|Seq#Length| (Lit |s#0@@36|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@176) (Lit |s#0@@36|) (LitInt |i#0@@63|) |t#0@@4|) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@36|) (LitInt |i#0@@63|)) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@4|)) (|Seq#Drop| (Lit |s#0@@36|) (LitInt (+ |i#0@@63| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |11670| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@176) (Lit |s#0@@36|) (LitInt |i#0@@63|) |t#0@@4|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@5 T@U) ($ly@@177 T@U) (|s#0@@37| T@U) (|i#0@@64| Int) (|t#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@5) TyType) (= (type $ly@@177) LayerTypeType)) (= (type |s#0@@37|) (SeqType BoxType))) (= (type |t#0@@5|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@5 (Lit |s#0@@37|) (LitInt |i#0@@64|) (Lit |t#0@@5|)) (and (and (and ($Is |s#0@@37| (TSeq Sequences._default.SeqIndexUpdate$T@@5)) (and (<= (LitInt 0) |i#0@@64|) (< |i#0@@64| 18446744073709551616))) ($IsBox |t#0@@5| Sequences._default.SeqIndexUpdate$T@@5)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@64| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@64|)) (< |i#0@@64| (|Seq#Length| (Lit |s#0@@37|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@177) (Lit |s#0@@37|) (LitInt |i#0@@64|) (Lit |t#0@@5|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@37|) (LitInt |i#0@@64|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@5|))) (|Seq#Drop| (Lit |s#0@@37|) (LitInt (+ |i#0@@64| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |11671| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@177) (Lit |s#0@@37|) (LitInt |i#0@@64|) (Lit |t#0@@5|))) ))))
(assert (forall ((arg0@@279 T@U) (arg1@@146 T@U) (arg2@@90 T@U) (arg3@@62 T@U) (arg4@@43 T@U) ) (! (= (type (Sequences.__default.Zip arg0@@279 arg1@@146 arg2@@90 arg3@@62 arg4@@43)) (SeqType BoxType)) :qid |funType:Sequences.__default.Zip| :pattern ( (Sequences.__default.Zip arg0@@279 arg1@@146 arg2@@90 arg3@@62 arg4@@43)) )))
(assert (forall ((Sequences._default.Zip$A T@U) (Sequences._default.Zip$B T@U) ($ly@@178 T@U) (|a#0@@59| T@U) (|b#0@@33| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A) TyType) (= (type Sequences._default.Zip$B) TyType)) (= (type $ly@@178) LayerTypeType)) (= (type |a#0@@59|) (SeqType BoxType))) (= (type |b#0@@33|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@178) |a#0@@59| |b#0@@33|) (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B $ly@@178 |a#0@@59| |b#0@@33|))) :qid |unknown.0:0| :skolemid |11672| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@178) |a#0@@59| |b#0@@33|)) )))
(assert (forall ((Sequences._default.Zip$A@@0 T@U) (Sequences._default.Zip$B@@0 T@U) ($ly@@179 T@U) (|a#0@@60| T@U) (|b#0@@34| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A@@0) TyType) (= (type Sequences._default.Zip$B@@0) TyType)) (= (type $ly@@179) LayerTypeType)) (= (type |a#0@@60|) (SeqType BoxType))) (= (type |b#0@@34|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $ly@@179 |a#0@@60| |b#0@@34|) (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $LZ |a#0@@60| |b#0@@34|))) :qid |unknown.0:0| :skolemid |11673| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 (AsFuelBottom $ly@@179) |a#0@@60| |b#0@@34|)) )))
(assert  (=> true (forall ((Sequences._default.Zip$A@@1 T@U) (Sequences._default.Zip$B@@1 T@U) ($ly@@180 T@U) (|a#0@@61| T@U) (|b#0@@35| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@1) TyType) (= (type Sequences._default.Zip$B@@1) TyType)) (= (type $ly@@180) LayerTypeType)) (= (type |a#0@@61|) (SeqType BoxType))) (= (type |b#0@@35|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 |a#0@@61| |b#0@@35|) (and (and ($Is |a#0@@61| (TSeq Sequences._default.Zip$A@@1)) ($Is |b#0@@35| (TSeq Sequences._default.Zip$B@@1))) (= (|Seq#Length| |a#0@@61|) (|Seq#Length| |b#0@@35|))))) (and (and (= (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@180 |a#0@@61| |b#0@@35|)) (|Seq#Length| |a#0@@61|)) (forall ((|i#1@@9| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@9|) (< |i#1@@9| (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@180 |a#0@@61| |b#0@@35|)))) (|_System.Tuple2#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@180 |a#0@@61| |b#0@@35|) |i#1@@9|)) (|#_System._tuple#2._#Make2| (|Seq#Index| |a#0@@61| |i#1@@9|) (|Seq#Index| |b#0@@35| |i#1@@9|))))) :qid |sequence.378:20| :skolemid |11674| :pattern ( (|Seq#Index| |b#0@@35| |i#1@@9|)) :pattern ( (|Seq#Index| |a#0@@61| |i#1@@9|)) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@180 |a#0@@61| |b#0@@35|) |i#1@@9|))) ))) ($Is (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@180 |a#0@@61| |b#0@@35|) (TSeq (Tclass._System.Tuple2 Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1))))) :qid |unknown.0:0| :skolemid |11675| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@180 |a#0@@61| |b#0@@35|)) ))))
(assert (forall ((Sequences._default.Zip$A@@2 T@U) (Sequences._default.Zip$B@@2 T@U) ($ly@@181 T@U) (|a#0@@62| T@U) (|b#0@@36| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@2) TyType) (= (type Sequences._default.Zip$B@@2) TyType)) (= (type $ly@@181) LayerTypeType)) (= (type |a#0@@62|) (SeqType BoxType))) (= (type |b#0@@36|) (SeqType BoxType))) (and ($Is |a#0@@62| (TSeq Sequences._default.Zip$A@@2)) ($Is |b#0@@36| (TSeq Sequences._default.Zip$B@@2)))) (and (=> (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@181 |a#0@@62| |b#0@@36|) (= (|Seq#Length| |a#0@@62|) (|Seq#Length| |b#0@@36|))) (=> (= (|Seq#Length| |a#0@@62|) (|Seq#Length| |b#0@@36|)) (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@181 |a#0@@62| |b#0@@36|)))) :qid |unknown.0:0| :skolemid |11676| :pattern ( (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@181 |a#0@@62| |b#0@@36|)) )))
(assert  (=> true (forall ((Sequences._default.Zip$A@@3 T@U) (Sequences._default.Zip$B@@3 T@U) ($ly@@182 T@U) (|a#0@@63| T@U) (|b#0@@37| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@3) TyType) (= (type Sequences._default.Zip$B@@3) TyType)) (= (type $ly@@182) LayerTypeType)) (= (type |a#0@@63|) (SeqType BoxType))) (= (type |b#0@@37|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 |a#0@@63| |b#0@@37|) (and (and ($Is |a#0@@63| (TSeq Sequences._default.Zip$A@@3)) ($Is |b#0@@37| (TSeq Sequences._default.Zip$B@@3))) (= (|Seq#Length| |a#0@@63|) (|Seq#Length| |b#0@@37|))))) (and (=> (not (= (|Seq#Length| |a#0@@63|) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@3 |a#0@@63|) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@3 |b#0@@37|)) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@63|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@37|))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@3 |a#0@@63|) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@3 |b#0@@37|)))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@182) |a#0@@63| |b#0@@37|) (ite (= (|Seq#Length| |a#0@@63|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 $ly@@182 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@63|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@37|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#_System._tuple#2._#Make2| (Sequences.__default.Last Sequences._default.Zip$A@@3 |a#0@@63|) (Sequences.__default.Last Sequences._default.Zip$B@@3 |b#0@@37|))))))))) :qid |unknown.0:0| :skolemid |11677| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@182) |a#0@@63| |b#0@@37|)) ))))
(assert  (=> true (forall ((Sequences._default.Zip$A@@4 T@U) (Sequences._default.Zip$B@@4 T@U) ($ly@@183 T@U) (|a#0@@64| T@U) (|b#0@@38| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@4) TyType) (= (type Sequences._default.Zip$B@@4) TyType)) (= (type $ly@@183) LayerTypeType)) (= (type |a#0@@64|) (SeqType BoxType))) (= (type |b#0@@38|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit |a#0@@64|) (Lit |b#0@@38|)) (and (and ($Is |a#0@@64| (TSeq Sequences._default.Zip$A@@4)) ($Is |b#0@@38| (TSeq Sequences._default.Zip$B@@4))) (= (|Seq#Length| (Lit |a#0@@64|)) (|Seq#Length| (Lit |b#0@@38|)))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@64|)) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@64|)) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@38|))) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@64|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@38|))))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@64|)) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@38|))))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@183) (Lit |a#0@@64|) (Lit |b#0@@38|)) (ite (= (|Seq#Length| (Lit |a#0@@64|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@183) (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@64|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@38|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#_System._tuple#2._#Make2| (Lit (Sequences.__default.Last Sequences._default.Zip$A@@4 (Lit |a#0@@64|))) (Lit (Sequences.__default.Last Sequences._default.Zip$B@@4 (Lit |b#0@@38|)))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |11678| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@183) (Lit |a#0@@64|) (Lit |b#0@@38|))) ))))
(assert (forall ((arg0@@280 T@U) (arg1@@147 T@U) (arg2@@91 T@U) (arg3@@63 T@U) ) (! (= (type (Sequences.__default.Unzip arg0@@280 arg1@@147 arg2@@91 arg3@@63)) DatatypeTypeType) :qid |funType:Sequences.__default.Unzip| :pattern ( (Sequences.__default.Unzip arg0@@280 arg1@@147 arg2@@91 arg3@@63)) )))
(assert (forall ((Sequences._default.Unzip$A T@U) (Sequences._default.Unzip$B T@U) ($ly@@184 T@U) (|z#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A) TyType) (= (type Sequences._default.Unzip$B) TyType)) (= (type $ly@@184) LayerTypeType)) (= (type |z#0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@184) |z#0|) (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B $ly@@184 |z#0|))) :qid |unknown.0:0| :skolemid |11679| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@184) |z#0|)) )))
(assert (forall ((Sequences._default.Unzip$A@@0 T@U) (Sequences._default.Unzip$B@@0 T@U) ($ly@@185 T@U) (|z#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A@@0) TyType) (= (type Sequences._default.Unzip$B@@0) TyType)) (= (type $ly@@185) LayerTypeType)) (= (type |z#0@@0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $ly@@185 |z#0@@0|) (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $LZ |z#0@@0|))) :qid |unknown.0:0| :skolemid |11680| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 (AsFuelBottom $ly@@185) |z#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@1 T@U) (Sequences._default.Unzip$B@@1 T@U) ($ly@@186 T@U) (|z#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@1) TyType) (= (type Sequences._default.Unzip$B@@1) TyType)) (= (type $ly@@186) LayerTypeType)) (= (type |z#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 |z#0@@1|) ($Is |z#0@@1| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1))))) (and (and (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@186 |z#0@@1|)))) (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@186 |z#0@@1|))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@186 |z#0@@1|)))) (|Seq#Length| |z#0@@1|))) (forall ((|i#1@@10| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@10|) (< |i#1@@10| (|Seq#Length| |z#0@@1|))) (|_System.Tuple2#Equal| (|#_System._tuple#2._#Make2| (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@186 |z#0@@1|))) |i#1@@10|) (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@186 |z#0@@1|))) |i#1@@10|)) ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#1@@10|))))) :qid |sequence.386:20| :skolemid |11681| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#1@@10|))) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@186 |z#0@@1|))) |i#1@@10|)) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@186 |z#0@@1|))) |i#1@@10|)) ))) ($Is (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@186 |z#0@@1|) (Tclass._System.Tuple2 (TSeq Sequences._default.Unzip$A@@1) (TSeq Sequences._default.Unzip$B@@1))))) :qid |unknown.0:0| :skolemid |11682| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@186 |z#0@@1|)) ))))
(assert (forall ((Sequences._default.Unzip$A@@2 T@U) (Sequences._default.Unzip$B@@2 T@U) ($ly@@187 T@U) (|z#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@2) TyType) (= (type Sequences._default.Unzip$B@@2) TyType)) (= (type $ly@@187) LayerTypeType)) (= (type |z#0@@2|) (SeqType BoxType))) ($Is |z#0@@2| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2)))) (and (=> (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@187 |z#0@@2|) true) (=> true (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@187 |z#0@@2|)))) :qid |unknown.0:0| :skolemid |11683| :pattern ( (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@187 |z#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@3 T@U) (Sequences._default.Unzip$B@@3 T@U) ($ly@@188 T@U) (|z#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@3) TyType) (= (type Sequences._default.Unzip$B@@3) TyType)) (= (type $ly@@188) LayerTypeType)) (= (type |z#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 |z#0@@3|) ($Is |z#0@@3| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3))))) (and (=> (not (= (|Seq#Length| |z#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@188) |z#0@@3|) (ite (= (|Seq#Length| |z#0@@3|) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#2| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@188 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (let ((|a#2| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@188 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#2| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) ($Box (|Seq#Append| |b#2| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._1 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))))))))) :qid |unknown.0:0| :skolemid |11684| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@188) |z#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@4 T@U) (Sequences._default.Unzip$B@@4 T@U) ($ly@@189 T@U) (|z#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@4) TyType) (= (type Sequences._default.Unzip$B@@4) TyType)) (= (type $ly@@189) LayerTypeType)) (= (type |z#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit |z#0@@4|)) ($Is |z#0@@4| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4))))) (and (=> (not (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@189) (Lit |z#0@@4|)) (ite (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#3| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@189) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (let ((|a#3| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@189) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#3| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._0 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) ($Box (|Seq#Append| |b#3| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._1 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |11685| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@189) (Lit |z#0@@4|))) ))))
(assert (forall ((arg0@@281 T@U) (arg1@@148 T@U) (arg2@@92 T@U) ) (! (= (type (Sequences.__default.FlattenShape arg0@@281 arg1@@148 arg2@@92)) (SeqType BoxType)) :qid |funType:Sequences.__default.FlattenShape| :pattern ( (Sequences.__default.FlattenShape arg0@@281 arg1@@148 arg2@@92)) )))
(assert (forall ((Sequences._default.FlattenShape$A T@U) ($ly@@190 T@U) (|seqs#0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A) TyType) (= (type $ly@@190) LayerTypeType)) (= (type |seqs#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@190) |seqs#0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A $ly@@190 |seqs#0|))) :qid |unknown.0:0| :skolemid |11686| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@190) |seqs#0|)) )))
(assert (forall ((Sequences._default.FlattenShape$A@@0 T@U) ($ly@@191 T@U) (|seqs#0@@0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A@@0) TyType) (= (type $ly@@191) LayerTypeType)) (= (type |seqs#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $ly@@191 |seqs#0@@0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $LZ |seqs#0@@0|))) :qid |unknown.0:0| :skolemid |11687| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 (AsFuelBottom $ly@@191) |seqs#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@1 T@U) ($ly@@192 T@U) (|seqs#0@@1| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@1) TyType) (= (type $ly@@192) LayerTypeType)) (= (type |seqs#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@1 |seqs#0@@1|) ($Is |seqs#0@@1| (TSeq (TSeq Sequences._default.FlattenShape$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@192 |seqs#0@@1|)) (|Seq#Length| |seqs#0@@1|)) (forall ((|i#1@@11| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@11|) (< |i#1@@11| (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@192 |seqs#0@@1|)))) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@192 |seqs#0@@1|) |i#1@@11|))) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#1@@11|)))))) :qid |sequence.408:20| :skolemid |11688| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#1@@11|))) :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@192 |seqs#0@@1|) |i#1@@11|))) ))) ($Is (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@192 |seqs#0@@1|) (TSeq Tclass._System.nat)))) :qid |unknown.0:0| :skolemid |11689| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@192 |seqs#0@@1|)) ))))
(assert (forall ((Sequences._default.FlattenShape$A@@2 T@U) ($ly@@193 T@U) (|seqs#0@@2| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@2) TyType) (= (type $ly@@193) LayerTypeType)) (= (type |seqs#0@@2|) (SeqType BoxType))) ($Is |seqs#0@@2| (TSeq (TSeq Sequences._default.FlattenShape$A@@2)))) (and (=> (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@193 |seqs#0@@2|) true) (=> true (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@193 |seqs#0@@2|)))) :qid |unknown.0:0| :skolemid |11690| :pattern ( (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@193 |seqs#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@3 T@U) ($ly@@194 T@U) (|seqs#0@@3| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@3) TyType) (= (type $ly@@194) LayerTypeType)) (= (type |seqs#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 |seqs#0@@3|) ($Is |seqs#0@@3| (TSeq (TSeq Sequences._default.FlattenShape$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@194) |seqs#0@@3|) (ite (= (|Seq#Length| |seqs#0@@3|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 $ly@@194 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))))))))))) :qid |unknown.0:0| :skolemid |11691| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@194) |seqs#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@4 T@U) ($ly@@195 T@U) (|seqs#0@@4| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@4) TyType) (= (type $ly@@195) LayerTypeType)) (= (type |seqs#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit |seqs#0@@4|)) ($Is |seqs#0@@4| (TSeq (TSeq Sequences._default.FlattenShape$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@195) (Lit |seqs#0@@4|)) (ite (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@195) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |11692| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@195) (Lit |seqs#0@@4|))) ))))
(assert (forall (($ly@@196 T@U) (|shape#0| T@U) ) (!  (=> (and (= (type $ly@@196) LayerTypeType) (= (type |shape#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength ($LS $ly@@196) |shape#0|) (Sequences.__default.FlattenLength $ly@@196 |shape#0|))) :qid |sequence.419:22| :skolemid |11693| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@196) |shape#0|)) )))
(assert (forall (($ly@@197 T@U) (|shape#0@@0| T@U) ) (!  (=> (and (= (type $ly@@197) LayerTypeType) (= (type |shape#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength $ly@@197 |shape#0@@0|) (Sequences.__default.FlattenLength $LZ |shape#0@@0|))) :qid |sequence.419:22| :skolemid |11694| :pattern ( (Sequences.__default.FlattenLength (AsFuelBottom $ly@@197) |shape#0@@0|)) )))
(assert  (=> true (forall (($ly@@198 T@U) (|shape#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@198) LayerTypeType) (= (type |shape#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@1|) ($Is |shape#0@@1| (TSeq Tclass._System.nat)))) (and (=> (= (|Seq#Length| |shape#0@@1|) (LitInt 0)) (= (Sequences.__default.FlattenLength $ly@@198 |shape#0@@1|) (LitInt 0))) (<= (LitInt 0) (Sequences.__default.FlattenLength $ly@@198 |shape#0@@1|)))) :qid |sequence.419:22| :skolemid |11695| :pattern ( (Sequences.__default.FlattenLength $ly@@198 |shape#0@@1|)) ))))
(assert (forall (($ly@@199 T@U) (|shape#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@199) LayerTypeType) (= (type |shape#0@@2|) (SeqType BoxType))) ($Is |shape#0@@2| (TSeq Tclass._System.nat))) (and (=> (|Sequences.__default.FlattenLength#requires| $ly@@199 |shape#0@@2|) true) (=> true (|Sequences.__default.FlattenLength#requires| $ly@@199 |shape#0@@2|)))) :qid |sequence.419:22| :skolemid |11696| :pattern ( (|Sequences.__default.FlattenLength#requires| $ly@@199 |shape#0@@2|)) )))
(assert  (=> true (forall (($ly@@200 T@U) (|shape#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@200) LayerTypeType) (= (type |shape#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@3|) ($Is |shape#0@@3| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| |shape#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@3|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|))) (|Sequences.__default.Last#canCall| Tclass._System.nat |shape#0@@3|))) (= (Sequences.__default.FlattenLength ($LS $ly@@200) |shape#0@@3|) (ite (= (|Seq#Length| |shape#0@@3|) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength $ly@@200 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|)) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat |shape#0@@3|)))))))) :qid |sequence.419:22| :skolemid |11697| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@200) |shape#0@@3|)) ))))
(assert  (=> true (forall (($ly@@201 T@U) (|shape#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@201) LayerTypeType) (= (type |shape#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| (Lit |shape#0@@4|)) ($Is |shape#0@@4| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@4|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|))))) (|Sequences.__default.Last#canCall| Tclass._System.nat (Lit |shape#0@@4|)))) (= (Sequences.__default.FlattenLength ($LS $ly@@201) (Lit |shape#0@@4|)) (ite (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength ($LS $ly@@201) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|)))) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat (Lit |shape#0@@4|))))))))) :qid |sequence.419:22| :weight 3 :skolemid |11698| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@201) (Lit |shape#0@@4|))) ))))
(assert (forall ((arg0@@282 T@U) (arg1@@149 T@U) (arg2@@93 T@U) ) (! (= (type (Sequences.__default.Flatten arg0@@282 arg1@@149 arg2@@93)) (SeqType BoxType)) :qid |funType:Sequences.__default.Flatten| :pattern ( (Sequences.__default.Flatten arg0@@282 arg1@@149 arg2@@93)) )))
(assert (forall ((Sequences._default.Flatten$A T@U) ($ly@@202 T@U) (|seqs#0@@5| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A) TyType) (= (type $ly@@202) LayerTypeType)) (= (type |seqs#0@@5|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@202) |seqs#0@@5|) (Sequences.__default.Flatten Sequences._default.Flatten$A $ly@@202 |seqs#0@@5|))) :qid |unknown.0:0| :skolemid |11699| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@202) |seqs#0@@5|)) )))
(assert (forall ((Sequences._default.Flatten$A@@0 T@U) ($ly@@203 T@U) (|seqs#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A@@0) TyType) (= (type $ly@@203) LayerTypeType)) (= (type |seqs#0@@6|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $ly@@203 |seqs#0@@6|) (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $LZ |seqs#0@@6|))) :qid |unknown.0:0| :skolemid |11700| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 (AsFuelBottom $ly@@203) |seqs#0@@6|)) )))
(assert  (and (= (type StartFuel_Sequences._default.FlattenLength) LayerTypeType) (= (type StartFuel_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@1 T@U) ($ly@@204 T@U) (|seqs#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@1) TyType) (= (type $ly@@204) LayerTypeType)) (= (type |seqs#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@1 |seqs#0@@7|) ($Is |seqs#0@@7| (TSeq (TSeq Sequences._default.Flatten$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@204 |seqs#0@@7|)) (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.FlattenShape Sequences._default.Flatten$A@@1 StartFuel_Sequences._default.FlattenShape |seqs#0@@7|))) (=> (= (|Seq#Length| |seqs#0@@7|) (LitInt 0)) (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@204 |seqs#0@@7|)) (LitInt 0)))) ($Is (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@204 |seqs#0@@7|) (TSeq Sequences._default.Flatten$A@@1)))) :qid |unknown.0:0| :skolemid |11701| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@204 |seqs#0@@7|)) ))))
(assert (forall ((Sequences._default.Flatten$A@@2 T@U) ($ly@@205 T@U) (|seqs#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@2) TyType) (= (type $ly@@205) LayerTypeType)) (= (type |seqs#0@@8|) (SeqType BoxType))) ($Is |seqs#0@@8| (TSeq (TSeq Sequences._default.Flatten$A@@2)))) (and (=> (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@205 |seqs#0@@8|) true) (=> true (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@205 |seqs#0@@8|)))) :qid |unknown.0:0| :skolemid |11702| :pattern ( (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@205 |seqs#0@@8|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenShape2) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@3 T@U) ($ly@@206 T@U) (|seqs#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@3) TyType) (= (type $ly@@206) LayerTypeType)) (= (type |seqs#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 |seqs#0@@9|) ($Is |seqs#0@@9| (TSeq (TSeq Sequences._default.Flatten$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@9|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape2)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape2)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape2) MoreFuel_Sequences._default.FlattenShape2)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@206) |seqs#0@@9|) (ite (= (|Seq#Length| |seqs#0@@9|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 $ly@@206 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|)))))))) :qid |unknown.0:0| :skolemid |11703| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@206) |seqs#0@@9|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenShape3) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@4 T@U) ($ly@@207 T@U) (|seqs#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@4) TyType) (= (type $ly@@207) LayerTypeType)) (= (type |seqs#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit |seqs#0@@10|)) ($Is |seqs#0@@10| (TSeq (TSeq Sequences._default.Flatten$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape3)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape3)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape3) MoreFuel_Sequences._default.FlattenShape3)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@207) (Lit |seqs#0@@10|)) (ite (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@207) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |11704| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@207) (Lit |seqs#0@@10|))) ))))
(assert  (=> true (forall ((|shape#0@@5| T@U) (|i#0@@65| Int) (|j#0@@10| Int) ) (!  (=> (and (= (type |shape#0@@5|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@5| |i#0@@65| |j#0@@10|) (and (and (and ($Is |shape#0@@5| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@65|)) (<= (LitInt 0) |j#0@@10|)) (and (< |i#0@@65| (|Seq#Length| |shape#0@@5|)) (< |j#0@@10| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@5| |i#0@@65|)))))))) (<= (LitInt 0) (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@65| |j#0@@10|))) :qid |sequence.488:25| :skolemid |11705| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@65| |j#0@@10|)) ))))
(assert (forall ((|shape#0@@6| T@U) (|i#0@@66| Int) (|j#0@@11| Int) ) (!  (=> (= (type |shape#0@@6|) (SeqType BoxType)) (=> (and (and ($Is |shape#0@@6| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@66|)) (<= (LitInt 0) |j#0@@11|)) (and (=> (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@66| |j#0@@11|) (and (< |i#0@@66| (|Seq#Length| |shape#0@@6|)) (< |j#0@@11| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@6| |i#0@@66|)))))) (=> (and (< |i#0@@66| (|Seq#Length| |shape#0@@6|)) (< |j#0@@11| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@6| |i#0@@66|))))) (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@66| |j#0@@11|))))) :qid |sequence.488:25| :skolemid |11706| :pattern ( (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@66| |j#0@@11|)) )))
(assert  (=> true (forall ((|shape#0@@7| T@U) (|i#0@@67| Int) (|j#0@@12| Int) ) (!  (=> (and (= (type |shape#0@@7|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@7| |i#0@@67| |j#0@@12|) (and (and (and ($Is |shape#0@@7| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@67|)) (<= (LitInt 0) |j#0@@12|)) (and (< |i#0@@67| (|Seq#Length| |shape#0@@7|)) (< |j#0@@12| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@7| |i#0@@67|)))))))) (and (|Sequences.__default.FlattenLength#canCall| (|Seq#Take| |shape#0@@7| |i#0@@67|)) (= (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@67| |j#0@@12|) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (|Seq#Take| |shape#0@@7| |i#0@@67|)) |j#0@@12|)))) :qid |sequence.488:25| :skolemid |11707| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@67| |j#0@@12|)) ))))
(assert  (=> true (forall ((|shape#0@@8| T@U) (|i#0@@68| Int) (|j#0@@13| Int) ) (!  (=> (and (= (type |shape#0@@8|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| (Lit |shape#0@@8|) (LitInt |i#0@@68|) (LitInt |j#0@@13|)) (and (and (and ($Is |shape#0@@8| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@68|)) (<= (LitInt 0) |j#0@@13|)) (and (< |i#0@@68| (|Seq#Length| (Lit |shape#0@@8|))) (< |j#0@@13| (U_2_int ($Unbox intType (|Seq#Index| (Lit |shape#0@@8|) (LitInt |i#0@@68|))))))))) (and (|Sequences.__default.FlattenLength#canCall| (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@68|)))) (= (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@68|) (LitInt |j#0@@13|)) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@68|)))) |j#0@@13|)))) :qid |sequence.488:25| :weight 3 :skolemid |11708| :pattern ( (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@68|) (LitInt |j#0@@13|))) ))))
(assert (forall ((arg0@@283 T@U) (arg1@@150 T@U) (arg2@@94 Int) ) (! (= (type (Sequences.__default.UnflattenIndex arg0@@283 arg1@@150 arg2@@94)) DatatypeTypeType) :qid |funType:Sequences.__default.UnflattenIndex| :pattern ( (Sequences.__default.UnflattenIndex arg0@@283 arg1@@150 arg2@@94)) )))
(assert (forall (($ly@@208 T@U) (|shape#0@@9| T@U) (|i#0@@69| Int) ) (!  (=> (and (= (type $ly@@208) LayerTypeType) (= (type |shape#0@@9|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex ($LS $ly@@208) |shape#0@@9| |i#0@@69|) (Sequences.__default.UnflattenIndex $ly@@208 |shape#0@@9| |i#0@@69|))) :qid |sequence.495:12| :skolemid |11709| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@208) |shape#0@@9| |i#0@@69|)) )))
(assert (forall (($ly@@209 T@U) (|shape#0@@10| T@U) (|i#0@@70| Int) ) (!  (=> (and (= (type $ly@@209) LayerTypeType) (= (type |shape#0@@10|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex $ly@@209 |shape#0@@10| |i#0@@70|) (Sequences.__default.UnflattenIndex $LZ |shape#0@@10| |i#0@@70|))) :qid |sequence.495:12| :skolemid |11710| :pattern ( (Sequences.__default.UnflattenIndex (AsFuelBottom $ly@@209) |shape#0@@10| |i#0@@70|)) )))
(assert  (=> true (forall (($ly@@210 T@U) (|shape#0@@11| T@U) (|i#0@@71| Int) ) (!  (=> (and (and (= (type $ly@@210) LayerTypeType) (= (type |shape#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@11| |i#0@@71|) (and (and ($Is |shape#0@@11| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@71|)) (< |i#0@@71| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@11|))))) ($Is (Sequences.__default.UnflattenIndex $ly@@210 |shape#0@@11| |i#0@@71|) (Tclass._System.Tuple2 Tclass._System.nat Tclass._System.nat))) :qid |sequence.495:12| :skolemid |11711| :pattern ( (Sequences.__default.UnflattenIndex $ly@@210 |shape#0@@11| |i#0@@71|)) ))))
(assert (forall (($ly@@211 T@U) (|shape#0@@12| T@U) (|i#0@@72| Int) ) (!  (=> (and (and (= (type $ly@@211) LayerTypeType) (= (type |shape#0@@12|) (SeqType BoxType))) (and ($Is |shape#0@@12| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@72|))) (and (=> (|Sequences.__default.UnflattenIndex#requires| $ly@@211 |shape#0@@12| |i#0@@72|) (< |i#0@@72| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@12|))) (=> (< |i#0@@72| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@12|)) (|Sequences.__default.UnflattenIndex#requires| $ly@@211 |shape#0@@12| |i#0@@72|)))) :qid |sequence.495:12| :skolemid |11712| :pattern ( (|Sequences.__default.UnflattenIndex#requires| $ly@@211 |shape#0@@12| |i#0@@72|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenLength2) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenLength) LayerTypeType)))
(assert  (=> true (forall (($ly@@212 T@U) (|shape#0@@13| T@U) (|i#0@@73| Int) ) (!  (=> (and (and (= (type $ly@@212) LayerTypeType) (= (type |shape#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@13| |i#0@@73|) (and (and ($Is |shape#0@@13| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@73|)) (< |i#0@@73| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@13|))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (=> (< |i#0@@73| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.UnflattenIndex#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@73|)))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|)) |i#0@@73|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength2)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength2)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength2) MoreFuel_Sequences._default.FlattenLength2)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@212) |shape#0@@13| |i#0@@73|) (ite (< |i#0@@73| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (Sequences.__default.UnflattenIndex $ly@@212 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@73|) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| |shape#0@@13|) 1))) ($Box (int_2_U (- |i#0@@73| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))))))))) :qid |sequence.495:12| :skolemid |11713| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@212) |shape#0@@13| |i#0@@73|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenLength3) LayerTypeType))
(assert  (=> true (forall (($ly@@213 T@U) (|shape#0@@14| T@U) (|i#0@@74| Int) ) (!  (=> (and (and (= (type $ly@@213) LayerTypeType) (= (type |shape#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| (Lit |shape#0@@14|) (LitInt |i#0@@74|)) (and (and ($Is |shape#0@@14| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@74|)) (< |i#0@@74| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit |shape#0@@14|)))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (=> (< |i#0@@74| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.UnflattenIndex#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@74|))))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|)))) |i#0@@74|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength3)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength3)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength3) MoreFuel_Sequences._default.FlattenLength3)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@213) (Lit |shape#0@@14|) (LitInt |i#0@@74|)) (ite (< |i#0@@74| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (Sequences.__default.UnflattenIndex ($LS $ly@@213) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@74|)) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| (Lit |shape#0@@14|)) 1))) ($Box (int_2_U (- |i#0@@74| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))))))))) :qid |sequence.495:12| :weight 3 :skolemid |11714| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@213) (Lit |shape#0@@14|) (LitInt |i#0@@74|))) ))))
(assert (forall ((arg0@@284 T@U) (arg1@@151 T@U) (arg2@@95 Int) (arg3@@64 T@U) ) (! (= (type (Sequences.__default.fill arg0@@284 arg1@@151 arg2@@95 arg3@@64)) (SeqType BoxType)) :qid |funType:Sequences.__default.fill| :pattern ( (Sequences.__default.fill arg0@@284 arg1@@151 arg2@@95 arg3@@64)) )))
(assert (forall ((Sequences._default.fill$T T@U) ($ly@@214 T@U) (|n#0@@5| Int) (|t#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T) TyType) (= (type $ly@@214) LayerTypeType)) (= (type |t#0@@6|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@214) |n#0@@5| |t#0@@6|) (Sequences.__default.fill Sequences._default.fill$T $ly@@214 |n#0@@5| |t#0@@6|))) :qid |unknown.0:0| :skolemid |11715| :pattern ( (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@214) |n#0@@5| |t#0@@6|)) )))
(assert (forall ((Sequences._default.fill$T@@0 T@U) ($ly@@215 T@U) (|n#0@@6| Int) (|t#0@@7| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T@@0) TyType) (= (type $ly@@215) LayerTypeType)) (= (type |t#0@@7|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T@@0 $ly@@215 |n#0@@6| |t#0@@7|) (Sequences.__default.fill Sequences._default.fill$T@@0 $LZ |n#0@@6| |t#0@@7|))) :qid |unknown.0:0| :skolemid |11716| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@0 (AsFuelBottom $ly@@215) |n#0@@6| |t#0@@7|)) )))
(assert  (=> true (forall ((Sequences._default.fill$T@@1 T@U) ($ly@@216 T@U) (|n#0@@7| Int) (|t#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@1) TyType) (= (type $ly@@216) LayerTypeType)) (= (type |t#0@@8|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@1 |n#0@@7| |t#0@@8|) (and ($IsBox |t#0@@8| Sequences._default.fill$T@@1) (>= |n#0@@7| (LitInt 0))))) (and (and (= (|Seq#Length| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@216 |n#0@@7| |t#0@@8|)) |n#0@@7|) (forall ((|i#1@@12| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@12|) (< |i#1@@12| |n#0@@7|)) (= (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@216 |n#0@@7| |t#0@@8|) |i#1@@12|) |t#0@@8|)) :qid |sequence.680:18| :skolemid |11717| :pattern ( (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@216 |n#0@@7| |t#0@@8|) |i#1@@12|)) ))) ($Is (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@216 |n#0@@7| |t#0@@8|) (TSeq Sequences._default.fill$T@@1)))) :qid |unknown.0:0| :skolemid |11718| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@216 |n#0@@7| |t#0@@8|)) ))))
(assert (forall ((Sequences._default.fill$T@@2 T@U) ($ly@@217 T@U) (|n#0@@8| Int) (|t#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@2) TyType) (= (type $ly@@217) LayerTypeType)) (= (type |t#0@@9|) BoxType)) ($IsBox |t#0@@9| Sequences._default.fill$T@@2)) (and (=> (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@217 |n#0@@8| |t#0@@9|) (>= |n#0@@8| (LitInt 0))) (=> (>= |n#0@@8| (LitInt 0)) (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@217 |n#0@@8| |t#0@@9|)))) :qid |unknown.0:0| :skolemid |11719| :pattern ( (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@217 |n#0@@8| |t#0@@9|)) )))
(assert  (=> true (forall ((Sequences._default.fill$T@@3 T@U) ($ly@@218 T@U) (|n#0@@9| Int) (|t#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@3) TyType) (= (type $ly@@218) LayerTypeType)) (= (type |t#0@@10|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 |n#0@@9| |t#0@@10|) (and ($IsBox |t#0@@10| Sequences._default.fill$T@@3) (>= |n#0@@9| (LitInt 0))))) (and (=> (not (= |n#0@@9| (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 (- |n#0@@9| 1) |t#0@@10|)) (= (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@218) |n#0@@9| |t#0@@10|) (ite (= |n#0@@9| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@3 $ly@@218 (- |n#0@@9| 1) |t#0@@10|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@10|)))))) :qid |unknown.0:0| :skolemid |11720| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@218) |n#0@@9| |t#0@@10|)) ))))
(assert  (=> true (forall ((Sequences._default.fill$T@@4 T@U) ($ly@@219 T@U) (|n#0@@10| Int) (|t#0@@11| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@4) TyType) (= (type $ly@@219) LayerTypeType)) (= (type |t#0@@11|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt |n#0@@10|) |t#0@@11|) (and ($IsBox |t#0@@11| Sequences._default.fill$T@@4) (>= (LitInt |n#0@@10|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@10|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt (- |n#0@@10| 1)) |t#0@@11|)) (= (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@219) (LitInt |n#0@@10|) |t#0@@11|) (ite (= (LitInt |n#0@@10|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@219) (LitInt (- |n#0@@10| 1)) |t#0@@11|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@11|)))))) :qid |unknown.0:0| :weight 3 :skolemid |11721| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@219) (LitInt |n#0@@10|) |t#0@@11|)) ))))
(assert  (=> true (forall ((Sequences._default.fill$T@@5 T@U) ($ly@@220 T@U) (|n#0@@11| Int) (|t#0@@12| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@5) TyType) (= (type $ly@@220) LayerTypeType)) (= (type |t#0@@12|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt |n#0@@11|) (Lit |t#0@@12|)) (and ($IsBox |t#0@@12| Sequences._default.fill$T@@5) (>= (LitInt |n#0@@11|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@11|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt (- |n#0@@11| 1)) (Lit |t#0@@12|))) (= (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@220) (LitInt |n#0@@11|) (Lit |t#0@@12|)) (ite (= (LitInt |n#0@@11|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@220) (LitInt (- |n#0@@11| 1)) (Lit |t#0@@12|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@12|))))))) :qid |unknown.0:0| :weight 3 :skolemid |11722| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@220) (LitInt |n#0@@11|) (Lit |t#0@@12|))) ))))
(assert (= (type Tclass.Maps.__default) TyType))
(assert (= (Tag Tclass.Maps.__default) Tagclass.Maps.__default))
(assert (forall ((bx@@100 T@U) ) (!  (=> (and (= (type bx@@100) BoxType) ($IsBox bx@@100 Tclass.Maps.__default)) (and (= ($Box ($Unbox refType bx@@100)) bx@@100) ($Is ($Unbox refType bx@@100) Tclass.Maps.__default))) :qid |unknown.0:0| :skolemid |11723| :pattern ( ($IsBox bx@@100 Tclass.Maps.__default)) )))
(assert (forall (($o@@46 T@U) ) (!  (=> (= (type $o@@46) refType) (and (=> ($Is $o@@46 Tclass.Maps.__default) (or (= $o@@46 null) (= (dtype $o@@46) Tclass.Maps.__default))) (=> (or (= $o@@46 null) (= (dtype $o@@46) Tclass.Maps.__default)) ($Is $o@@46 Tclass.Maps.__default)))) :qid |unknown.0:0| :skolemid |11724| :pattern ( ($Is $o@@46 Tclass.Maps.__default)) )))
(assert (forall (($o@@47 T@U) ($h@@62 T@U) ) (!  (=> (and (= (type $o@@47) refType) (= (type $h@@62) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@47 Tclass.Maps.__default $h@@62) (or (= $o@@47 null) (U_2_bool (MapType1Select (MapType0Select $h@@62 $o@@47) alloc)))) (=> (or (= $o@@47 null) (U_2_bool (MapType1Select (MapType0Select $h@@62 $o@@47) alloc))) ($IsAlloc $o@@47 Tclass.Maps.__default $h@@62)))) :qid |unknown.0:0| :skolemid |11725| :pattern ( ($IsAlloc $o@@47 Tclass.Maps.__default $h@@62)) )))
(assert  (=> true (forall ((Maps._default.IMapsTo$K T@U) (Maps._default.IMapsTo$V T@U) (|m#0| T@U) (|k#0| T@U) (|v#0@@6| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K) TyType) (= (type Maps._default.IMapsTo$V) TyType)) (= (type |m#0|) (IMapType BoxType BoxType))) (= (type |k#0|) BoxType)) (= (type |v#0@@6|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K Maps._default.IMapsTo$V |m#0| |k#0| |v#0@@6|) (and (and ($Is |m#0| (TIMap Maps._default.IMapsTo$K Maps._default.IMapsTo$V)) ($IsBox |k#0| Maps._default.IMapsTo$K)) ($IsBox |v#0@@6| Maps._default.IMapsTo$V)))) true) :qid |unknown.0:0| :skolemid |11726| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K Maps._default.IMapsTo$V |m#0| |k#0| |v#0@@6|)) ))))
(assert (forall ((Maps._default.IMapsTo$K@@0 T@U) (Maps._default.IMapsTo$V@@0 T@U) (|m#0@@0| T@U) (|k#0@@0| T@U) (|v#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@0) TyType) (= (type Maps._default.IMapsTo$V@@0) TyType)) (= (type |m#0@@0|) (IMapType BoxType BoxType))) (= (type |k#0@@0|) BoxType)) (= (type |v#0@@7|) BoxType)) (and (and ($Is |m#0@@0| (TIMap Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0)) ($IsBox |k#0@@0| Maps._default.IMapsTo$K@@0)) ($IsBox |v#0@@7| Maps._default.IMapsTo$V@@0))) (and (=> (|Maps.__default.IMapsTo#requires| Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0 |m#0@@0| |k#0@@0| |v#0@@7|) true) (=> true (|Maps.__default.IMapsTo#requires| Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0 |m#0@@0| |k#0@@0| |v#0@@7|)))) :qid |unknown.0:0| :skolemid |11727| :pattern ( (|Maps.__default.IMapsTo#requires| Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0 |m#0@@0| |k#0@@0| |v#0@@7|)) )))
(assert  (=> true (forall ((Maps._default.IMapsTo$K@@1 T@U) (Maps._default.IMapsTo$V@@1 T@U) (|m#0@@1| T@U) (|k#0@@1| T@U) (|v#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@1) TyType) (= (type Maps._default.IMapsTo$V@@1) TyType)) (= (type |m#0@@1|) (IMapType BoxType BoxType))) (= (type |k#0@@1|) BoxType)) (= (type |v#0@@8|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@1| |k#0@@1| |v#0@@8|) (and (and ($Is |m#0@@1| (TIMap Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1)) ($IsBox |k#0@@1| Maps._default.IMapsTo$K@@1)) ($IsBox |v#0@@8| Maps._default.IMapsTo$V@@1)))) (and (=> (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@1| |k#0@@1| |v#0@@8|) (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@1|) |k#0@@1|)) (= (MapType0Select (|IMap#Elements| |m#0@@1|) |k#0@@1|) |v#0@@8|))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@1|) |k#0@@1|)) (= (MapType0Select (|IMap#Elements| |m#0@@1|) |k#0@@1|) |v#0@@8|)) (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@1| |k#0@@1| |v#0@@8|)))) :qid |unknown.0:0| :skolemid |11728| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@1| |k#0@@1| |v#0@@8|)) ))))
(assert  (=> true (forall ((Maps._default.IMapsTo$K@@2 T@U) (Maps._default.IMapsTo$V@@2 T@U) (|m#0@@2| T@U) (|k#0@@2| T@U) (|v#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@2) TyType) (= (type Maps._default.IMapsTo$V@@2) TyType)) (= (type |m#0@@2|) (IMapType BoxType BoxType))) (= (type |k#0@@2|) BoxType)) (= (type |v#0@@9|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@2|) (Lit |k#0@@2|) (Lit |v#0@@9|)) (and (and ($Is |m#0@@2| (TIMap Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2)) ($IsBox |k#0@@2| Maps._default.IMapsTo$K@@2)) ($IsBox |v#0@@9| Maps._default.IMapsTo$V@@2)))) (and (=> (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@2|) (Lit |k#0@@2|) (Lit |v#0@@9|)) (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@2|) |k#0@@2|)) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@2|)) (Lit |k#0@@2|)) (Lit |v#0@@9|)))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@2|) |k#0@@2|)) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@2|)) (Lit |k#0@@2|)) (Lit |v#0@@9|))) (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@2|) (Lit |k#0@@2|) (Lit |v#0@@9|))))) :qid |unknown.0:0| :weight 3 :skolemid |11729| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@2|) (Lit |k#0@@2|) (Lit |v#0@@9|))) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K T@U) (Maps._default.MapsTo$V T@U) (|m#0@@3| T@U) (|k#0@@3| T@U) (|v#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K) TyType) (= (type Maps._default.MapsTo$V) TyType)) (= (type |m#0@@3|) (MapType BoxType BoxType))) (= (type |k#0@@3|) BoxType)) (= (type |v#0@@10|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K Maps._default.MapsTo$V |m#0@@3| |k#0@@3| |v#0@@10|) (and (and ($Is |m#0@@3| (TMap Maps._default.MapsTo$K Maps._default.MapsTo$V)) ($IsBox |k#0@@3| Maps._default.MapsTo$K)) ($IsBox |v#0@@10| Maps._default.MapsTo$V)))) true) :qid |unknown.0:0| :skolemid |11730| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K Maps._default.MapsTo$V |m#0@@3| |k#0@@3| |v#0@@10|)) ))))
(assert (forall ((Maps._default.MapsTo$K@@0 T@U) (Maps._default.MapsTo$V@@0 T@U) (|m#0@@4| T@U) (|k#0@@4| T@U) (|v#0@@11| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@0) TyType) (= (type Maps._default.MapsTo$V@@0) TyType)) (= (type |m#0@@4|) (MapType BoxType BoxType))) (= (type |k#0@@4|) BoxType)) (= (type |v#0@@11|) BoxType)) (and (and ($Is |m#0@@4| (TMap Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0)) ($IsBox |k#0@@4| Maps._default.MapsTo$K@@0)) ($IsBox |v#0@@11| Maps._default.MapsTo$V@@0))) (and (=> (|Maps.__default.MapsTo#requires| Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0 |m#0@@4| |k#0@@4| |v#0@@11|) true) (=> true (|Maps.__default.MapsTo#requires| Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0 |m#0@@4| |k#0@@4| |v#0@@11|)))) :qid |unknown.0:0| :skolemid |11731| :pattern ( (|Maps.__default.MapsTo#requires| Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0 |m#0@@4| |k#0@@4| |v#0@@11|)) )))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@1 T@U) (Maps._default.MapsTo$V@@1 T@U) (|m#0@@5| T@U) (|k#0@@5| T@U) (|v#0@@12| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@1) TyType) (= (type Maps._default.MapsTo$V@@1) TyType)) (= (type |m#0@@5|) (MapType BoxType BoxType))) (= (type |k#0@@5|) BoxType)) (= (type |v#0@@12|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@5| |k#0@@5| |v#0@@12|) (and (and ($Is |m#0@@5| (TMap Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1)) ($IsBox |k#0@@5| Maps._default.MapsTo$K@@1)) ($IsBox |v#0@@12| Maps._default.MapsTo$V@@1)))) (and (=> (Maps.__default.MapsTo Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@5| |k#0@@5| |v#0@@12|) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@5|) |k#0@@5|)) (= (MapType0Select (|Map#Elements| |m#0@@5|) |k#0@@5|) |v#0@@12|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@5|) |k#0@@5|)) (= (MapType0Select (|Map#Elements| |m#0@@5|) |k#0@@5|) |v#0@@12|)) (Maps.__default.MapsTo Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@5| |k#0@@5| |v#0@@12|)))) :qid |unknown.0:0| :skolemid |11732| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@5| |k#0@@5| |v#0@@12|)) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@2 T@U) (Maps._default.MapsTo$V@@2 T@U) (|m#0@@6| T@U) (|k#0@@6| T@U) (|v#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@2) TyType) (= (type Maps._default.MapsTo$V@@2) TyType)) (= (type |m#0@@6|) (MapType BoxType BoxType))) (= (type |k#0@@6|) BoxType)) (= (type |v#0@@13|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@6|) |k#0@@6| |v#0@@13|) (and (and ($Is |m#0@@6| (TMap Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2)) ($IsBox |k#0@@6| Maps._default.MapsTo$K@@2)) ($IsBox |v#0@@13| Maps._default.MapsTo$V@@2)))) (and (=> (Maps.__default.MapsTo Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@6|) |k#0@@6| |v#0@@13|) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@6|) |k#0@@6|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@6|)) |k#0@@6|) |v#0@@13|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@6|) |k#0@@6|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@6|)) |k#0@@6|) |v#0@@13|)) (Maps.__default.MapsTo Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@6|) |k#0@@6| |v#0@@13|)))) :qid |unknown.0:0| :weight 3 :skolemid |11733| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@6|) |k#0@@6| |v#0@@13|)) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@3 T@U) (Maps._default.MapsTo$V@@3 T@U) (|m#0@@7| T@U) (|k#0@@7| T@U) (|v#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@3) TyType) (= (type Maps._default.MapsTo$V@@3) TyType)) (= (type |m#0@@7|) (MapType BoxType BoxType))) (= (type |k#0@@7|) BoxType)) (= (type |v#0@@14|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@7|) (Lit |k#0@@7|) (Lit |v#0@@14|)) (and (and ($Is |m#0@@7| (TMap Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3)) ($IsBox |k#0@@7| Maps._default.MapsTo$K@@3)) ($IsBox |v#0@@14| Maps._default.MapsTo$V@@3)))) (and (=> (Maps.__default.MapsTo Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@7|) (Lit |k#0@@7|) (Lit |v#0@@14|)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@7|) |k#0@@7|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@7|)) (Lit |k#0@@7|)) (Lit |v#0@@14|)))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@7|) |k#0@@7|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@7|)) (Lit |k#0@@7|)) (Lit |v#0@@14|))) (Maps.__default.MapsTo Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@7|) (Lit |k#0@@7|) (Lit |v#0@@14|))))) :qid |unknown.0:0| :weight 3 :skolemid |11734| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@7|) (Lit |k#0@@7|) (Lit |v#0@@14|))) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K T@U) (Maps._default.MapsAgreeOnKey$V T@U) (|m#0@@8| T@U) (|m'#0| T@U) (|k#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K) TyType) (= (type Maps._default.MapsAgreeOnKey$V) TyType)) (= (type |m#0@@8|) (MapType BoxType BoxType))) (= (type |m'#0|) (MapType BoxType BoxType))) (= (type |k#0@@8|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V |m#0@@8| |m'#0| |k#0@@8|) (and (and ($Is |m#0@@8| (TMap Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V)) ($Is |m'#0| (TMap Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V))) ($IsBox |k#0@@8| Maps._default.MapsAgreeOnKey$K)))) true) :qid |unknown.0:0| :skolemid |11735| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V |m#0@@8| |m'#0| |k#0@@8|)) ))))
(assert (forall ((Maps._default.MapsAgreeOnKey$K@@0 T@U) (Maps._default.MapsAgreeOnKey$V@@0 T@U) (|m#0@@9| T@U) (|m'#0@@0| T@U) (|k#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@0) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@0) TyType)) (= (type |m#0@@9|) (MapType BoxType BoxType))) (= (type |m'#0@@0|) (MapType BoxType BoxType))) (= (type |k#0@@9|) BoxType)) (and (and ($Is |m#0@@9| (TMap Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0)) ($Is |m'#0@@0| (TMap Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0))) ($IsBox |k#0@@9| Maps._default.MapsAgreeOnKey$K@@0))) (and (=> (|Maps.__default.MapsAgreeOnKey#requires| Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0 |m#0@@9| |m'#0@@0| |k#0@@9|) true) (=> true (|Maps.__default.MapsAgreeOnKey#requires| Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0 |m#0@@9| |m'#0@@0| |k#0@@9|)))) :qid |unknown.0:0| :skolemid |11736| :pattern ( (|Maps.__default.MapsAgreeOnKey#requires| Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0 |m#0@@9| |m'#0@@0| |k#0@@9|)) )))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@1 T@U) (Maps._default.MapsAgreeOnKey$V@@1 T@U) (|m#0@@10| T@U) (|m'#0@@1| T@U) (|k#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@1) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@1) TyType)) (= (type |m#0@@10|) (MapType BoxType BoxType))) (= (type |m'#0@@1|) (MapType BoxType BoxType))) (= (type |k#0@@10|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@10| |m'#0@@1| |k#0@@10|) (and (and ($Is |m#0@@10| (TMap Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1)) ($Is |m'#0@@1| (TMap Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1))) ($IsBox |k#0@@10| Maps._default.MapsAgreeOnKey$K@@1)))) (and (=> (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@10| |m'#0@@1| |k#0@@10|) (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@10|) |k#0@@10|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@1|) |k#0@@10|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@10|) |k#0@@10|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@1|) |k#0@@10|))) (= (MapType0Select (|Map#Elements| |m#0@@10|) |k#0@@10|) (MapType0Select (|Map#Elements| |m'#0@@1|) |k#0@@10|))))) (=> (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@10|) |k#0@@10|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@1|) |k#0@@10|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@10|) |k#0@@10|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@1|) |k#0@@10|))) (= (MapType0Select (|Map#Elements| |m#0@@10|) |k#0@@10|) (MapType0Select (|Map#Elements| |m'#0@@1|) |k#0@@10|)))) (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@10| |m'#0@@1| |k#0@@10|)))) :qid |unknown.0:0| :skolemid |11737| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@10| |m'#0@@1| |k#0@@10|)) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@2 T@U) (Maps._default.MapsAgreeOnKey$V@@2 T@U) (|m#0@@11| T@U) (|m'#0@@2| T@U) (|k#0@@11| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@2) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@2) TyType)) (= (type |m#0@@11|) (MapType BoxType BoxType))) (= (type |m'#0@@2|) (MapType BoxType BoxType))) (= (type |k#0@@11|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@11|) (Lit |m'#0@@2|) |k#0@@11|) (and (and ($Is |m#0@@11| (TMap Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2)) ($Is |m'#0@@2| (TMap Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2))) ($IsBox |k#0@@11| Maps._default.MapsAgreeOnKey$K@@2)))) (and (=> (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@11|) (Lit |m'#0@@2|) |k#0@@11|) (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@11|) |k#0@@11|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@11|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@11|) |k#0@@11|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@11|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@11|)) |k#0@@11|) (MapType0Select (|Map#Elements| (Lit |m'#0@@2|)) |k#0@@11|))))) (=> (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@11|) |k#0@@11|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@11|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@11|) |k#0@@11|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@11|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@11|)) |k#0@@11|) (MapType0Select (|Map#Elements| (Lit |m'#0@@2|)) |k#0@@11|)))) (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@11|) (Lit |m'#0@@2|) |k#0@@11|)))) :qid |unknown.0:0| :weight 3 :skolemid |11738| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@11|) (Lit |m'#0@@2|) |k#0@@11|)) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@3 T@U) (Maps._default.MapsAgreeOnKey$V@@3 T@U) (|m#0@@12| T@U) (|m'#0@@3| T@U) (|k#0@@12| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@3) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@3) TyType)) (= (type |m#0@@12|) (MapType BoxType BoxType))) (= (type |m'#0@@3|) (MapType BoxType BoxType))) (= (type |k#0@@12|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@12|) (Lit |m'#0@@3|) (Lit |k#0@@12|)) (and (and ($Is |m#0@@12| (TMap Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3)) ($Is |m'#0@@3| (TMap Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3))) ($IsBox |k#0@@12| Maps._default.MapsAgreeOnKey$K@@3)))) (and (=> (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@12|) (Lit |m'#0@@3|) (Lit |k#0@@12|)) (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@12|) |k#0@@12|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@12|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@12|) |k#0@@12|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@12|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@12|)) (Lit |k#0@@12|)) (MapType0Select (|Map#Elements| (Lit |m'#0@@3|)) (Lit |k#0@@12|)))))) (=> (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@12|) |k#0@@12|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@12|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@12|) |k#0@@12|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@12|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@12|)) (Lit |k#0@@12|)) (MapType0Select (|Map#Elements| (Lit |m'#0@@3|)) (Lit |k#0@@12|))))) (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@12|) (Lit |m'#0@@3|) (Lit |k#0@@12|))))) :qid |unknown.0:0| :weight 3 :skolemid |11739| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@12|) (Lit |m'#0@@3|) (Lit |k#0@@12|))) ))))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K T@U) (Maps._default.IMapsAgreeOnKey$V T@U) (|m#0@@13| T@U) (|m'#0@@4| T@U) (|k#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K) TyType) (= (type Maps._default.IMapsAgreeOnKey$V) TyType)) (= (type |m#0@@13|) (IMapType BoxType BoxType))) (= (type |m'#0@@4|) (IMapType BoxType BoxType))) (= (type |k#0@@13|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V |m#0@@13| |m'#0@@4| |k#0@@13|) (and (and ($Is |m#0@@13| (TIMap Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V)) ($Is |m'#0@@4| (TIMap Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V))) ($IsBox |k#0@@13| Maps._default.IMapsAgreeOnKey$K)))) true) :qid |unknown.0:0| :skolemid |11740| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V |m#0@@13| |m'#0@@4| |k#0@@13|)) ))))
(assert (forall ((Maps._default.IMapsAgreeOnKey$K@@0 T@U) (Maps._default.IMapsAgreeOnKey$V@@0 T@U) (|m#0@@14| T@U) (|m'#0@@5| T@U) (|k#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@0) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@0) TyType)) (= (type |m#0@@14|) (IMapType BoxType BoxType))) (= (type |m'#0@@5|) (IMapType BoxType BoxType))) (= (type |k#0@@14|) BoxType)) (and (and ($Is |m#0@@14| (TIMap Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0)) ($Is |m'#0@@5| (TIMap Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0))) ($IsBox |k#0@@14| Maps._default.IMapsAgreeOnKey$K@@0))) (and (=> (|Maps.__default.IMapsAgreeOnKey#requires| Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0 |m#0@@14| |m'#0@@5| |k#0@@14|) true) (=> true (|Maps.__default.IMapsAgreeOnKey#requires| Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0 |m#0@@14| |m'#0@@5| |k#0@@14|)))) :qid |unknown.0:0| :skolemid |11741| :pattern ( (|Maps.__default.IMapsAgreeOnKey#requires| Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0 |m#0@@14| |m'#0@@5| |k#0@@14|)) )))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K@@1 T@U) (Maps._default.IMapsAgreeOnKey$V@@1 T@U) (|m#0@@15| T@U) (|m'#0@@6| T@U) (|k#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@1) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@1) TyType)) (= (type |m#0@@15|) (IMapType BoxType BoxType))) (= (type |m'#0@@6|) (IMapType BoxType BoxType))) (= (type |k#0@@15|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@15| |m'#0@@6| |k#0@@15|) (and (and ($Is |m#0@@15| (TIMap Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1)) ($Is |m'#0@@6| (TIMap Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1))) ($IsBox |k#0@@15| Maps._default.IMapsAgreeOnKey$K@@1)))) (and (=> (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@15| |m'#0@@6| |k#0@@15|) (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@15|) |k#0@@15|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@6|) |k#0@@15|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@15|) |k#0@@15|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@6|) |k#0@@15|))) (= (MapType0Select (|IMap#Elements| |m#0@@15|) |k#0@@15|) (MapType0Select (|IMap#Elements| |m'#0@@6|) |k#0@@15|))))) (=> (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@15|) |k#0@@15|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@6|) |k#0@@15|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@15|) |k#0@@15|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@6|) |k#0@@15|))) (= (MapType0Select (|IMap#Elements| |m#0@@15|) |k#0@@15|) (MapType0Select (|IMap#Elements| |m'#0@@6|) |k#0@@15|)))) (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@15| |m'#0@@6| |k#0@@15|)))) :qid |unknown.0:0| :skolemid |11742| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@15| |m'#0@@6| |k#0@@15|)) ))))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K@@2 T@U) (Maps._default.IMapsAgreeOnKey$V@@2 T@U) (|m#0@@16| T@U) (|m'#0@@7| T@U) (|k#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@2) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@2) TyType)) (= (type |m#0@@16|) (IMapType BoxType BoxType))) (= (type |m'#0@@7|) (IMapType BoxType BoxType))) (= (type |k#0@@16|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@16|) (Lit |m'#0@@7|) (Lit |k#0@@16|)) (and (and ($Is |m#0@@16| (TIMap Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2)) ($Is |m'#0@@7| (TIMap Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2))) ($IsBox |k#0@@16| Maps._default.IMapsAgreeOnKey$K@@2)))) (and (=> (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@16|) (Lit |m'#0@@7|) (Lit |k#0@@16|)) (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@16|) |k#0@@16|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@16|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@16|) |k#0@@16|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@16|))) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@16|)) (Lit |k#0@@16|)) (MapType0Select (|IMap#Elements| (Lit |m'#0@@7|)) (Lit |k#0@@16|)))))) (=> (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@16|) |k#0@@16|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@16|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@16|) |k#0@@16|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@16|))) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@16|)) (Lit |k#0@@16|)) (MapType0Select (|IMap#Elements| (Lit |m'#0@@7|)) (Lit |k#0@@16|))))) (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@16|) (Lit |m'#0@@7|) (Lit |k#0@@16|))))) :qid |unknown.0:0| :weight 3 :skolemid |11743| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@16|) (Lit |m'#0@@7|) (Lit |k#0@@16|))) ))))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K T@U) (Maps._default.IsSubIMap$V T@U) (|sub#0| T@U) (|sup#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K) TyType) (= (type Maps._default.IsSubIMap$V) TyType)) (= (type |sub#0|) (IMapType BoxType BoxType))) (= (type |sup#0|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V |sub#0| |sup#0|) (and ($Is |sub#0| (TIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V)) ($Is |sup#0| (TIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V))))) true) :qid |unknown.0:0| :skolemid |11744| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V |sub#0| |sup#0|)) ))))
(assert (forall ((Maps._default.IsSubIMap$K@@0 T@U) (Maps._default.IsSubIMap$V@@0 T@U) (|sub#0@@0| T@U) (|sup#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@0) TyType) (= (type Maps._default.IsSubIMap$V@@0) TyType)) (= (type |sub#0@@0|) (IMapType BoxType BoxType))) (= (type |sup#0@@0|) (IMapType BoxType BoxType))) (and ($Is |sub#0@@0| (TIMap Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0)) ($Is |sup#0@@0| (TIMap Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0)))) (and (=> (|Maps.__default.IsSubIMap#requires| Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0 |sub#0@@0| |sup#0@@0|) true) (=> true (|Maps.__default.IsSubIMap#requires| Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0 |sub#0@@0| |sup#0@@0|)))) :qid |unknown.0:0| :skolemid |11745| :pattern ( (|Maps.__default.IsSubIMap#requires| Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0 |sub#0@@0| |sup#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K@@1 T@U) (Maps._default.IsSubIMap$V@@1 T@U) (|sub#0@@1| T@U) (|sup#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@1) TyType) (= (type Maps._default.IsSubIMap$V@@1) TyType)) (= (type |sub#0@@1|) (IMapType BoxType BoxType))) (= (type |sup#0@@1|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|) (and ($Is |sub#0@@1| (TIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1)) ($Is |sup#0@@1| (TIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1))))) (and (=> (|ISet#Subset| (|IMap#Domain| |sub#0@@1|) (|IMap#Domain| |sup#0@@1|)) (forall ((|key#2| T@U) ) (!  (=> (and (and (= (type |key#2|) BoxType) ($IsBox |key#2| Maps._default.IsSubIMap$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#2|))) (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#2|)) :qid |Mapssdfy.28:16| :skolemid |11746| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#2|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#2|)) ))) (and (=> (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|) (and (|ISet#Subset| (|IMap#Domain| |sub#0@@1|) (|IMap#Domain| |sup#0@@1|)) (forall ((|key#2@@0| T@U) ) (!  (=> (and (and (= (type |key#2@@0|) BoxType) ($IsBox |key#2@@0| Maps._default.IsSubIMap$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#2@@0|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#2@@0|)) :qid |Mapssdfy.28:16| :skolemid |11747| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#2@@0|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#2@@0|)) )))) (=> (and (|ISet#Subset| (|IMap#Domain| |sub#0@@1|) (|IMap#Domain| |sup#0@@1|)) (forall ((|key#2@@1| T@U) ) (!  (=> (and (and (= (type |key#2@@1|) BoxType) ($IsBox |key#2@@1| Maps._default.IsSubIMap$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#2@@1|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#2@@1|)) :qid |Mapssdfy.28:16| :skolemid |11747| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#2@@1|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#2@@1|)) ))) (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|))))) :qid |unknown.0:0| :skolemid |11748| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|)) ))))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K@@2 T@U) (Maps._default.IsSubIMap$V@@2 T@U) (|sub#0@@2| T@U) (|sup#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@2) TyType) (= (type Maps._default.IsSubIMap$V@@2) TyType)) (= (type |sub#0@@2|) (IMapType BoxType BoxType))) (= (type |sup#0@@2|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|)) (and ($Is |sub#0@@2| (TIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2)) ($Is |sup#0@@2| (TIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2))))) (and (=> (|ISet#Subset| (|IMap#Domain| (Lit |sub#0@@2|)) (|IMap#Domain| (Lit |sup#0@@2|))) (forall ((|key#3| T@U) ) (!  (=> (and (and (= (type |key#3|) BoxType) ($IsBox |key#3| Maps._default.IsSubIMap$K@@2)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |sub#0@@2|))) |key#3|))) (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|) |key#3|)) :qid |Mapssdfy.28:16| :skolemid |11749| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 |sub#0@@2| |sup#0@@2| |key#3|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#3|)) ))) (and (=> (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|)) (and (|ISet#Subset| (|IMap#Domain| (Lit |sub#0@@2|)) (|IMap#Domain| (Lit |sup#0@@2|))) (forall ((|key#3@@0| T@U) ) (!  (=> (and (and (= (type |key#3@@0|) BoxType) ($IsBox |key#3@@0| Maps._default.IsSubIMap$K@@2)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |sub#0@@2|))) |key#3@@0|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|) |key#3@@0|)) :qid |Mapssdfy.28:16| :skolemid |11750| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 |sub#0@@2| |sup#0@@2| |key#3@@0|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#3@@0|)) )))) (=> (and (|ISet#Subset| (|IMap#Domain| (Lit |sub#0@@2|)) (|IMap#Domain| (Lit |sup#0@@2|))) (forall ((|key#3@@1| T@U) ) (!  (=> (and (and (= (type |key#3@@1|) BoxType) ($IsBox |key#3@@1| Maps._default.IsSubIMap$K@@2)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |sub#0@@2|))) |key#3@@1|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|) |key#3@@1|)) :qid |Mapssdfy.28:16| :skolemid |11750| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 |sub#0@@2| |sup#0@@2| |key#3@@1|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#3@@1|)) ))) (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|)))))) :qid |unknown.0:0| :weight 3 :skolemid |11751| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|))) ))))
(assert  (=> true (forall ((Maps._default.IsSubMap$K T@U) (Maps._default.IsSubMap$V T@U) (|sub#0@@3| T@U) (|sup#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K) TyType) (= (type Maps._default.IsSubMap$V) TyType)) (= (type |sub#0@@3|) (MapType BoxType BoxType))) (= (type |sup#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K Maps._default.IsSubMap$V |sub#0@@3| |sup#0@@3|) (and ($Is |sub#0@@3| (TMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V)) ($Is |sup#0@@3| (TMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V))))) true) :qid |unknown.0:0| :skolemid |11752| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V |sub#0@@3| |sup#0@@3|)) ))))
(assert (forall ((Maps._default.IsSubMap$K@@0 T@U) (Maps._default.IsSubMap$V@@0 T@U) (|sub#0@@4| T@U) (|sup#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@0) TyType) (= (type Maps._default.IsSubMap$V@@0) TyType)) (= (type |sub#0@@4|) (MapType BoxType BoxType))) (= (type |sup#0@@4|) (MapType BoxType BoxType))) (and ($Is |sub#0@@4| (TMap Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0)) ($Is |sup#0@@4| (TMap Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0)))) (and (=> (|Maps.__default.IsSubMap#requires| Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0 |sub#0@@4| |sup#0@@4|) true) (=> true (|Maps.__default.IsSubMap#requires| Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0 |sub#0@@4| |sup#0@@4|)))) :qid |unknown.0:0| :skolemid |11753| :pattern ( (|Maps.__default.IsSubMap#requires| Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0 |sub#0@@4| |sup#0@@4|)) )))
(assert  (=> true (forall ((Maps._default.IsSubMap$K@@1 T@U) (Maps._default.IsSubMap$V@@1 T@U) (|sub#0@@5| T@U) (|sup#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@1) TyType) (= (type Maps._default.IsSubMap$V@@1) TyType)) (= (type |sub#0@@5|) (MapType BoxType BoxType))) (= (type |sup#0@@5|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|) (and ($Is |sub#0@@5| (TMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1)) ($Is |sup#0@@5| (TMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1))))) (and (=> (|Set#Subset| (|Map#Domain| |sub#0@@5|) (|Map#Domain| |sup#0@@5|)) (forall ((|key#2@@2| T@U) ) (!  (=> (and (and (= (type |key#2@@2|) BoxType) ($IsBox |key#2@@2| Maps._default.IsSubMap$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| |sub#0@@5|) |key#2@@2|))) (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#2@@2|)) :qid |Mapssdfy.33:16| :skolemid |11754| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#2@@2|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@5|) |key#2@@2|)) ))) (and (=> (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|) (and (|Set#Subset| (|Map#Domain| |sub#0@@5|) (|Map#Domain| |sup#0@@5|)) (forall ((|key#2@@3| T@U) ) (!  (=> (and (and (= (type |key#2@@3|) BoxType) ($IsBox |key#2@@3| Maps._default.IsSubMap$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| |sub#0@@5|) |key#2@@3|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#2@@3|)) :qid |Mapssdfy.33:16| :skolemid |11755| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#2@@3|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@5|) |key#2@@3|)) )))) (=> (and (|Set#Subset| (|Map#Domain| |sub#0@@5|) (|Map#Domain| |sup#0@@5|)) (forall ((|key#2@@4| T@U) ) (!  (=> (and (and (= (type |key#2@@4|) BoxType) ($IsBox |key#2@@4| Maps._default.IsSubMap$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| |sub#0@@5|) |key#2@@4|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#2@@4|)) :qid |Mapssdfy.33:16| :skolemid |11755| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#2@@4|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@5|) |key#2@@4|)) ))) (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|))))) :qid |unknown.0:0| :skolemid |11756| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|)) ))))
(assert  (=> true (forall ((Maps._default.IsSubMap$K@@2 T@U) (Maps._default.IsSubMap$V@@2 T@U) (|sub#0@@6| T@U) (|sup#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@2) TyType) (= (type Maps._default.IsSubMap$V@@2) TyType)) (= (type |sub#0@@6|) (MapType BoxType BoxType))) (= (type |sup#0@@6|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|)) (and ($Is |sub#0@@6| (TMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2)) ($Is |sup#0@@6| (TMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2))))) (and (=> (|Set#Subset| (|Map#Domain| (Lit |sub#0@@6|)) (|Map#Domain| (Lit |sup#0@@6|))) (forall ((|key#3@@2| T@U) ) (!  (=> (and (and (= (type |key#3@@2|) BoxType) ($IsBox |key#3@@2| Maps._default.IsSubMap$K@@2)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |sub#0@@6|))) |key#3@@2|))) (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|) |key#3@@2|)) :qid |Mapssdfy.33:16| :skolemid |11757| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 |sub#0@@6| |sup#0@@6| |key#3@@2|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@6|) |key#3@@2|)) ))) (and (=> (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|)) (and (|Set#Subset| (|Map#Domain| (Lit |sub#0@@6|)) (|Map#Domain| (Lit |sup#0@@6|))) (forall ((|key#3@@3| T@U) ) (!  (=> (and (and (= (type |key#3@@3|) BoxType) ($IsBox |key#3@@3| Maps._default.IsSubMap$K@@2)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |sub#0@@6|))) |key#3@@3|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|) |key#3@@3|)) :qid |Mapssdfy.33:16| :skolemid |11758| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 |sub#0@@6| |sup#0@@6| |key#3@@3|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@6|) |key#3@@3|)) )))) (=> (and (|Set#Subset| (|Map#Domain| (Lit |sub#0@@6|)) (|Map#Domain| (Lit |sup#0@@6|))) (forall ((|key#3@@4| T@U) ) (!  (=> (and (and (= (type |key#3@@4|) BoxType) ($IsBox |key#3@@4| Maps._default.IsSubMap$K@@2)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |sub#0@@6|))) |key#3@@4|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|) |key#3@@4|)) :qid |Mapssdfy.33:16| :skolemid |11758| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 |sub#0@@6| |sup#0@@6| |key#3@@4|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@6|) |key#3@@4|)) ))) (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|)))))) :qid |unknown.0:0| :weight 3 :skolemid |11759| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|))) ))))
(assert (forall ((arg0@@285 T@U) (arg1@@152 T@U) (arg2@@96 T@U) (arg3@@65 T@U) (arg4@@44 T@U) ) (! (= (type (Maps.__default.MapRemove arg0@@285 arg1@@152 arg2@@96 arg3@@65 arg4@@44)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove| :pattern ( (Maps.__default.MapRemove arg0@@285 arg1@@152 arg2@@96 arg3@@65 arg4@@44)) )))
(assert (forall ((Maps._default.MapRemove$K T@U) (Maps._default.MapRemove$V T@U) ($ly@@221 T@U) (|m#0@@17| T@U) (|ks#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove$K) TyType) (= (type Maps._default.MapRemove$V) TyType)) (= (type $ly@@221) LayerTypeType)) (= (type |m#0@@17|) (MapType BoxType BoxType))) (= (type |ks#0|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V ($LS $ly@@221) |m#0@@17| |ks#0|) (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V $ly@@221 |m#0@@17| |ks#0|))) :qid |unknown.0:0| :skolemid |11760| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V ($LS $ly@@221) |m#0@@17| |ks#0|)) )))
(assert (forall ((Maps._default.MapRemove$K@@0 T@U) (Maps._default.MapRemove$V@@0 T@U) ($ly@@222 T@U) (|m#0@@18| T@U) (|ks#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove$K@@0) TyType) (= (type Maps._default.MapRemove$V@@0) TyType)) (= (type $ly@@222) LayerTypeType)) (= (type |m#0@@18|) (MapType BoxType BoxType))) (= (type |ks#0@@0|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 $ly@@222 |m#0@@18| |ks#0@@0|) (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 $LZ |m#0@@18| |ks#0@@0|))) :qid |unknown.0:0| :skolemid |11761| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 (AsFuelBottom $ly@@222) |m#0@@18| |ks#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@1 T@U) (Maps._default.MapRemove$V@@1 T@U) ($ly@@223 T@U) (|m#0@@19| T@U) (|ks#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@1) TyType) (= (type Maps._default.MapRemove$V@@1) TyType)) (= (type $ly@@223) LayerTypeType)) (= (type |m#0@@19|) (MapType BoxType BoxType))) (= (type |ks#0@@1|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 |m#0@@19| |ks#0@@1|) (and ($Is |m#0@@19| (TMap Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1)) ($Is |ks#0@@1| (TSet Maps._default.MapRemove$K@@1))))) (and (and (and (and (and (forall ((|k#2| T@U) ) (!  (=> (and (and (= (type |k#2|) BoxType) ($IsBox |k#2| Maps._default.MapRemove$K@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@19|) |k#2|)) (not (U_2_bool (MapType0Select |ks#0@@1| |k#2|))))) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@223 |m#0@@19| |ks#0@@1|)) |k#2|))) :qid |Mapssdfy.37:20| :skolemid |11762| :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@223 |m#0@@19| |ks#0@@1|)) |k#2|)) :pattern ( (MapType0Select |ks#0@@1| |k#2|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@19|) |k#2|)) )) (forall ((|k#3| T@U) ) (!  (=> (and (= (type |k#3|) BoxType) ($IsBox |k#3| Maps._default.MapRemove$K@@1)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@223 |m#0@@19| |ks#0@@1|)) |k#3|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@19|) |k#3|))) (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@223 |m#0@@19| |ks#0@@1|)) |k#3|)) (not (U_2_bool (MapType0Select |ks#0@@1| |k#3|)))))) :qid |Mapssdfy.38:20| :skolemid |11763| :pattern ( (MapType0Select |ks#0@@1| |k#3|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@19|) |k#3|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@223 |m#0@@19| |ks#0@@1|)) |k#3|)) ))) (forall ((|j#2@@1| T@U) ) (!  (=> (and (and (= (type |j#2@@1|) BoxType) ($IsBox |j#2@@1| Maps._default.MapRemove$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@223 |m#0@@19| |ks#0@@1|)) |j#2@@1|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@223 |m#0@@19| |ks#0@@1|)) |j#2@@1|) (MapType0Select (|Map#Elements| |m#0@@19|) |j#2@@1|))) :qid |Mapssdfy.39:20| :skolemid |11764| :pattern ( (MapType0Select (|Map#Elements| |m#0@@19|) |j#2@@1|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@223 |m#0@@19| |ks#0@@1|)) |j#2@@1|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@223 |m#0@@19| |ks#0@@1|)) |j#2@@1|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@223 |m#0@@19| |ks#0@@1|))) (|Set#Card| (|Map#Domain| |m#0@@19|)))) (<= (|Map#Card| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@223 |m#0@@19| |ks#0@@1|)) (|Map#Card| |m#0@@19|))) ($Is (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@223 |m#0@@19| |ks#0@@1|) (TMap Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1)))) :qid |unknown.0:0| :skolemid |11765| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@223 |m#0@@19| |ks#0@@1|)) ))))
(assert (forall ((Maps._default.MapRemove$K@@2 T@U) (Maps._default.MapRemove$V@@2 T@U) ($ly@@224 T@U) (|m#0@@20| T@U) (|ks#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@2) TyType) (= (type Maps._default.MapRemove$V@@2) TyType)) (= (type $ly@@224) LayerTypeType)) (= (type |m#0@@20|) (MapType BoxType BoxType))) (= (type |ks#0@@2|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@20| (TMap Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2)) ($Is |ks#0@@2| (TSet Maps._default.MapRemove$K@@2)))) (and (=> (|Maps.__default.MapRemove#requires| Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2 $ly@@224 |m#0@@20| |ks#0@@2|) true) (=> true (|Maps.__default.MapRemove#requires| Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2 $ly@@224 |m#0@@20| |ks#0@@2|)))) :qid |unknown.0:0| :skolemid |11766| :pattern ( (|Maps.__default.MapRemove#requires| Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2 $ly@@224 |m#0@@20| |ks#0@@2|)) )))
(assert  (and (forall ((arg0@@286 T@U) (arg1@@153 T@U) (arg2@@97 T@U) ) (! (= (type (|lambda#68| arg0@@286 arg1@@153 arg2@@97)) (MapType0Type BoxType boolType)) :qid |funType:lambda#68| :pattern ( (|lambda#68| arg0@@286 arg1@@153 arg2@@97)) )) (forall ((arg0@@287 T@U) ) (! (= (type (|lambda#69| arg0@@287)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#69| :pattern ( (|lambda#69| arg0@@287)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@3 T@U) (Maps._default.MapRemove$V@@3 T@U) ($ly@@225 T@U) (|m#0@@21| T@U) (|ks#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@3) TyType) (= (type Maps._default.MapRemove$V@@3) TyType)) (= (type $ly@@225) LayerTypeType)) (= (type |m#0@@21|) (MapType BoxType BoxType))) (= (type |ks#0@@3|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 |m#0@@21| |ks#0@@3|) (and ($Is |m#0@@21| (TMap Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3)) ($Is |ks#0@@3| (TSet Maps._default.MapRemove$K@@3))))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 ($LS $ly@@225) |m#0@@21| |ks#0@@3|) (let ((|m'#2| (|Map#Glue| (|lambda#68| Maps._default.MapRemove$K@@3 (|Map#Domain| |m#0@@21|) |ks#0@@3|) (|lambda#69| (|Map#Elements| |m#0@@21|)) (TMap Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3)))) |m'#2|))) :qid |unknown.0:0| :skolemid |11767| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 ($LS $ly@@225) |m#0@@21| |ks#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@4 T@U) (Maps._default.MapRemove$V@@4 T@U) ($ly@@226 T@U) (|m#0@@22| T@U) (|ks#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@4) TyType) (= (type Maps._default.MapRemove$V@@4) TyType)) (= (type $ly@@226) LayerTypeType)) (= (type |m#0@@22|) (MapType BoxType BoxType))) (= (type |ks#0@@4|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 (Lit |m#0@@22|) (Lit |ks#0@@4|)) (and ($Is |m#0@@22| (TMap Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4)) ($Is |ks#0@@4| (TSet Maps._default.MapRemove$K@@4))))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 ($LS $ly@@226) (Lit |m#0@@22|) (Lit |ks#0@@4|)) (let ((|m'#3| (|Map#Glue| (|lambda#68| Maps._default.MapRemove$K@@4 (|Map#Domain| |m#0@@22|) (Lit |ks#0@@4|)) (|lambda#69| (|Map#Elements| (Lit |m#0@@22|))) (TMap Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4)))) |m'#3|))) :qid |unknown.0:0| :weight 3 :skolemid |11768| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 ($LS $ly@@226) (Lit |m#0@@22|) (Lit |ks#0@@4|))) ))))
(assert (forall ((arg0@@288 T@U) (arg1@@154 T@U) (arg2@@98 T@U) (arg3@@66 T@U) (arg4@@45 T@U) ) (! (= (type (Maps.__default.MapRemoveStrong arg0@@288 arg1@@154 arg2@@98 arg3@@66 arg4@@45)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemoveStrong| :pattern ( (Maps.__default.MapRemoveStrong arg0@@288 arg1@@154 arg2@@98 arg3@@66 arg4@@45)) )))
(assert (forall ((Maps._default.MapRemoveStrong$K T@U) (Maps._default.MapRemoveStrong$V T@U) ($ly@@227 T@U) (|m#0@@23| T@U) (|ks#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemoveStrong$K) TyType) (= (type Maps._default.MapRemoveStrong$V) TyType)) (= (type $ly@@227) LayerTypeType)) (= (type |m#0@@23|) (MapType BoxType BoxType))) (= (type |ks#0@@5|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V ($LS $ly@@227) |m#0@@23| |ks#0@@5|) (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V $ly@@227 |m#0@@23| |ks#0@@5|))) :qid |unknown.0:0| :skolemid |11769| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V ($LS $ly@@227) |m#0@@23| |ks#0@@5|)) )))
(assert (forall ((Maps._default.MapRemoveStrong$K@@0 T@U) (Maps._default.MapRemoveStrong$V@@0 T@U) ($ly@@228 T@U) (|m#0@@24| T@U) (|ks#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@0) TyType) (= (type Maps._default.MapRemoveStrong$V@@0) TyType)) (= (type $ly@@228) LayerTypeType)) (= (type |m#0@@24|) (MapType BoxType BoxType))) (= (type |ks#0@@6|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 $ly@@228 |m#0@@24| |ks#0@@6|) (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 $LZ |m#0@@24| |ks#0@@6|))) :qid |unknown.0:0| :skolemid |11770| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 (AsFuelBottom $ly@@228) |m#0@@24| |ks#0@@6|)) )))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@1 T@U) (Maps._default.MapRemoveStrong$V@@1 T@U) ($ly@@229 T@U) (|m#0@@25| T@U) (|ks#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@1) TyType) (= (type Maps._default.MapRemoveStrong$V@@1) TyType)) (= (type $ly@@229) LayerTypeType)) (= (type |m#0@@25|) (MapType BoxType BoxType))) (= (type |ks#0@@7|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 |m#0@@25| |ks#0@@7|) (and ($Is |m#0@@25| (TMap Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1)) ($Is |ks#0@@7| (TSet Maps._default.MapRemoveStrong$K@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@229 |m#0@@25| |ks#0@@7|)) (|Set#Difference| (|Map#Domain| |m#0@@25|) |ks#0@@7|)) (forall ((|j#1@@0| T@U) ) (!  (=> (and (and (= (type |j#1@@0|) BoxType) ($IsBox |j#1@@0| Maps._default.MapRemoveStrong$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@229 |m#0@@25| |ks#0@@7|)) |j#1@@0|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@229 |m#0@@25| |ks#0@@7|)) |j#1@@0|) (MapType0Select (|Map#Elements| |m#0@@25|) |j#1@@0|))) :qid |Mapssdfy.50:20| :skolemid |11771| :pattern ( (MapType0Select (|Map#Elements| |m#0@@25|) |j#1@@0|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@229 |m#0@@25| |ks#0@@7|)) |j#1@@0|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@229 |m#0@@25| |ks#0@@7|)) |j#1@@0|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@229 |m#0@@25| |ks#0@@7|))) (|Set#Card| (|Map#Domain| |m#0@@25|)))) (<= (|Map#Card| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@229 |m#0@@25| |ks#0@@7|)) (|Map#Card| |m#0@@25|))) ($Is (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@229 |m#0@@25| |ks#0@@7|) (TMap Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1)))) :qid |unknown.0:0| :skolemid |11772| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@229 |m#0@@25| |ks#0@@7|)) ))))
(assert (forall ((Maps._default.MapRemoveStrong$K@@2 T@U) (Maps._default.MapRemoveStrong$V@@2 T@U) ($ly@@230 T@U) (|m#0@@26| T@U) (|ks#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@2) TyType) (= (type Maps._default.MapRemoveStrong$V@@2) TyType)) (= (type $ly@@230) LayerTypeType)) (= (type |m#0@@26|) (MapType BoxType BoxType))) (= (type |ks#0@@8|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@26| (TMap Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2)) ($Is |ks#0@@8| (TSet Maps._default.MapRemoveStrong$K@@2)))) (and (=> (|Maps.__default.MapRemoveStrong#requires| Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2 $ly@@230 |m#0@@26| |ks#0@@8|) true) (=> true (|Maps.__default.MapRemoveStrong#requires| Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2 $ly@@230 |m#0@@26| |ks#0@@8|)))) :qid |unknown.0:0| :skolemid |11773| :pattern ( (|Maps.__default.MapRemoveStrong#requires| Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2 $ly@@230 |m#0@@26| |ks#0@@8|)) )))
(assert  (and (and (= (type StartFuel_Maps._default.MapRemove) LayerTypeType) (= (type MoreFuel_Maps._default.MapRemove2) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemove) LayerTypeType)))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@3 T@U) (Maps._default.MapRemoveStrong$V@@3 T@U) ($ly@@231 T@U) (|m#0@@27| T@U) (|ks#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@3) TyType) (= (type Maps._default.MapRemoveStrong$V@@3) TyType)) (= (type $ly@@231) LayerTypeType)) (= (type |m#0@@27|) (MapType BoxType BoxType))) (= (type |ks#0@@9|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 |m#0@@27| |ks#0@@9|) (and ($Is |m#0@@27| (TMap Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3)) ($Is |ks#0@@9| (TSet Maps._default.MapRemoveStrong$K@@3))))) (and (|Maps.__default.MapRemove#canCall| Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 |m#0@@27| |ks#0@@9|) (and (and (and (= StartFuel_Maps._default.MapRemove ($LS MoreFuel_Maps._default.MapRemove2)) (= StartFuelAssert_Maps._default.MapRemove ($LS ($LS MoreFuel_Maps._default.MapRemove2)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove2) MoreFuel_Maps._default.MapRemove2)) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 ($LS $ly@@231) |m#0@@27| |ks#0@@9|) (Maps.__default.MapRemove Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 StartFuel_Maps._default.MapRemove |m#0@@27| |ks#0@@9|))))) :qid |unknown.0:0| :skolemid |11774| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 ($LS $ly@@231) |m#0@@27| |ks#0@@9|)) ))))
(assert (= (type MoreFuel_Maps._default.MapRemove3) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@4 T@U) (Maps._default.MapRemoveStrong$V@@4 T@U) ($ly@@232 T@U) (|m#0@@28| T@U) (|ks#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@4) TyType) (= (type Maps._default.MapRemoveStrong$V@@4) TyType)) (= (type $ly@@232) LayerTypeType)) (= (type |m#0@@28|) (MapType BoxType BoxType))) (= (type |ks#0@@10|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 (Lit |m#0@@28|) (Lit |ks#0@@10|)) (and ($Is |m#0@@28| (TMap Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4)) ($Is |ks#0@@10| (TSet Maps._default.MapRemoveStrong$K@@4))))) (and (|Maps.__default.MapRemove#canCall| Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 (Lit |m#0@@28|) (Lit |ks#0@@10|)) (and (and (and (= StartFuel_Maps._default.MapRemove ($LS MoreFuel_Maps._default.MapRemove3)) (= StartFuelAssert_Maps._default.MapRemove ($LS ($LS MoreFuel_Maps._default.MapRemove3)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove3) MoreFuel_Maps._default.MapRemove3)) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 ($LS $ly@@232) (Lit |m#0@@28|) (Lit |ks#0@@10|)) (Maps.__default.MapRemove Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 StartFuel_Maps._default.MapRemove (Lit |m#0@@28|) (Lit |ks#0@@10|)))))) :qid |unknown.0:0| :weight 3 :skolemid |11775| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 ($LS $ly@@232) (Lit |m#0@@28|) (Lit |ks#0@@10|))) ))))
(assert (forall ((arg0@@289 T@U) (arg1@@155 T@U) (arg2@@99 T@U) (arg3@@67 T@U) (arg4@@46 T@U) ) (! (= (type (Maps.__default.MapRemove1 arg0@@289 arg1@@155 arg2@@99 arg3@@67 arg4@@46)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove1| :pattern ( (Maps.__default.MapRemove1 arg0@@289 arg1@@155 arg2@@99 arg3@@67 arg4@@46)) )))
(assert (forall ((Maps._default.MapRemove1$K T@U) (Maps._default.MapRemove1$V T@U) ($ly@@233 T@U) (|m#0@@29| T@U) (|k#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K) TyType) (= (type Maps._default.MapRemove1$V) TyType)) (= (type $ly@@233) LayerTypeType)) (= (type |m#0@@29|) (MapType BoxType BoxType))) (= (type |k#0@@17|) BoxType)) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V ($LS $ly@@233) |m#0@@29| |k#0@@17|) (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V $ly@@233 |m#0@@29| |k#0@@17|))) :qid |unknown.0:0| :skolemid |11776| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V ($LS $ly@@233) |m#0@@29| |k#0@@17|)) )))
(assert (forall ((Maps._default.MapRemove1$K@@0 T@U) (Maps._default.MapRemove1$V@@0 T@U) ($ly@@234 T@U) (|m#0@@30| T@U) (|k#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K@@0) TyType) (= (type Maps._default.MapRemove1$V@@0) TyType)) (= (type $ly@@234) LayerTypeType)) (= (type |m#0@@30|) (MapType BoxType BoxType))) (= (type |k#0@@18|) BoxType)) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0 $ly@@234 |m#0@@30| |k#0@@18|) (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0 $LZ |m#0@@30| |k#0@@18|))) :qid |unknown.0:0| :skolemid |11777| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0 (AsFuelBottom $ly@@234) |m#0@@30| |k#0@@18|)) )))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@1 T@U) (Maps._default.MapRemove1$V@@1 T@U) ($ly@@235 T@U) (|m#0@@31| T@U) (|k#0@@19| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@1) TyType) (= (type Maps._default.MapRemove1$V@@1) TyType)) (= (type $ly@@235) LayerTypeType)) (= (type |m#0@@31|) (MapType BoxType BoxType))) (= (type |k#0@@19|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 |m#0@@31| |k#0@@19|) (and ($Is |m#0@@31| (TMap Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1)) ($IsBox |k#0@@19| Maps._default.MapRemove1$K@@1)))) (and (and (and (and (and (and (forall ((|j#4| T@U) ) (!  (=> (and (and (= (type |j#4|) BoxType) ($IsBox |j#4| Maps._default.MapRemove1$K@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@31|) |j#4|)) (not (= |j#4| |k#0@@19|)))) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@235 |m#0@@31| |k#0@@19|)) |j#4|))) :qid |Mapssdfy.59:20| :skolemid |11778| :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@235 |m#0@@31| |k#0@@19|)) |j#4|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@31|) |j#4|)) )) (forall ((|j#5| T@U) ) (!  (=> (and (= (type |j#5|) BoxType) ($IsBox |j#5| Maps._default.MapRemove1$K@@1)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@235 |m#0@@31| |k#0@@19|)) |j#5|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@31|) |j#5|))) (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@235 |m#0@@31| |k#0@@19|)) |j#5|)) (not (= |j#5| |k#0@@19|))))) :qid |Mapssdfy.60:20| :skolemid |11779| :pattern ( (MapType0Select (|Map#Domain| |m#0@@31|) |j#5|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@235 |m#0@@31| |k#0@@19|)) |j#5|)) ))) (forall ((|j#6| T@U) ) (!  (=> (and (and (= (type |j#6|) BoxType) ($IsBox |j#6| Maps._default.MapRemove1$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@235 |m#0@@31| |k#0@@19|)) |j#6|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@235 |m#0@@31| |k#0@@19|)) |j#6|) (MapType0Select (|Map#Elements| |m#0@@31|) |j#6|))) :qid |Mapssdfy.61:20| :skolemid |11780| :pattern ( (MapType0Select (|Map#Elements| |m#0@@31|) |j#6|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@235 |m#0@@31| |k#0@@19|)) |j#6|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@235 |m#0@@31| |k#0@@19|)) |j#6|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@235 |m#0@@31| |k#0@@19|))) (|Set#Card| (|Map#Domain| |m#0@@31|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@31|) |k#0@@19|)) (= (|Map#Card| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@235 |m#0@@31| |k#0@@19|)) (- (|Map#Card| |m#0@@31|) 1)))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@31|) |k#0@@19|))) (= (|Map#Card| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@235 |m#0@@31| |k#0@@19|)) (|Map#Card| |m#0@@31|)))) ($Is (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@235 |m#0@@31| |k#0@@19|) (TMap Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1)))) :qid |unknown.0:0| :skolemid |11781| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@235 |m#0@@31| |k#0@@19|)) ))))
(assert (forall ((Maps._default.MapRemove1$K@@2 T@U) (Maps._default.MapRemove1$V@@2 T@U) ($ly@@236 T@U) (|m#0@@32| T@U) (|k#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@2) TyType) (= (type Maps._default.MapRemove1$V@@2) TyType)) (= (type $ly@@236) LayerTypeType)) (= (type |m#0@@32|) (MapType BoxType BoxType))) (= (type |k#0@@20|) BoxType)) (and ($Is |m#0@@32| (TMap Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2)) ($IsBox |k#0@@20| Maps._default.MapRemove1$K@@2))) (and (=> (|Maps.__default.MapRemove1#requires| Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 $ly@@236 |m#0@@32| |k#0@@20|) true) (=> true (|Maps.__default.MapRemove1#requires| Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 $ly@@236 |m#0@@32| |k#0@@20|)))) :qid |unknown.0:0| :skolemid |11782| :pattern ( (|Maps.__default.MapRemove1#requires| Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 $ly@@236 |m#0@@32| |k#0@@20|)) )))
(assert (forall ((arg0@@290 T@U) (arg1@@156 T@U) (arg2@@100 T@U) ) (! (= (type (|lambda#72| arg0@@290 arg1@@156 arg2@@100)) (MapType0Type BoxType boolType)) :qid |funType:lambda#72| :pattern ( (|lambda#72| arg0@@290 arg1@@156 arg2@@100)) )))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@3 T@U) (Maps._default.MapRemove1$V@@3 T@U) ($ly@@237 T@U) (|m#0@@33| T@U) (|k#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@3) TyType) (= (type Maps._default.MapRemove1$V@@3) TyType)) (= (type $ly@@237) LayerTypeType)) (= (type |m#0@@33|) (MapType BoxType BoxType))) (= (type |k#0@@21|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 |m#0@@33| |k#0@@21|) (and ($Is |m#0@@33| (TMap Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3)) ($IsBox |k#0@@21| Maps._default.MapRemove1$K@@3)))) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 ($LS $ly@@237) |m#0@@33| |k#0@@21|) (let ((|m'#3@@0| (|Map#Glue| (|lambda#72| Maps._default.MapRemove1$K@@3 (|Map#Domain| |m#0@@33|) |k#0@@21|) (|lambda#69| (|Map#Elements| |m#0@@33|)) (TMap Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3)))) |m'#3@@0|))) :qid |unknown.0:0| :skolemid |11783| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 ($LS $ly@@237) |m#0@@33| |k#0@@21|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@4 T@U) (Maps._default.MapRemove1$V@@4 T@U) ($ly@@238 T@U) (|m#0@@34| T@U) (|k#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@4) TyType) (= (type Maps._default.MapRemove1$V@@4) TyType)) (= (type $ly@@238) LayerTypeType)) (= (type |m#0@@34|) (MapType BoxType BoxType))) (= (type |k#0@@22|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4 (Lit |m#0@@34|) |k#0@@22|) (and ($Is |m#0@@34| (TMap Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4)) ($IsBox |k#0@@22| Maps._default.MapRemove1$K@@4)))) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4 ($LS $ly@@238) (Lit |m#0@@34|) |k#0@@22|) (let ((|m'#4| (|Map#Glue| (|lambda#72| Maps._default.MapRemove1$K@@4 (|Map#Domain| |m#0@@34|) |k#0@@22|) (|lambda#69| (|Map#Elements| (Lit |m#0@@34|))) (TMap Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4)))) |m'#4|))) :qid |unknown.0:0| :weight 3 :skolemid |11784| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4 ($LS $ly@@238) (Lit |m#0@@34|) |k#0@@22|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@5 T@U) (Maps._default.MapRemove1$V@@5 T@U) ($ly@@239 T@U) (|m#0@@35| T@U) (|k#0@@23| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@5) TyType) (= (type Maps._default.MapRemove1$V@@5) TyType)) (= (type $ly@@239) LayerTypeType)) (= (type |m#0@@35|) (MapType BoxType BoxType))) (= (type |k#0@@23|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5 (Lit |m#0@@35|) (Lit |k#0@@23|)) (and ($Is |m#0@@35| (TMap Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5)) ($IsBox |k#0@@23| Maps._default.MapRemove1$K@@5)))) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5 ($LS $ly@@239) (Lit |m#0@@35|) (Lit |k#0@@23|)) (let ((|m'#5| (|Map#Glue| (|lambda#72| Maps._default.MapRemove1$K@@5 (|Map#Domain| |m#0@@35|) |k#0@@23|) (|lambda#69| (|Map#Elements| (Lit |m#0@@35|))) (TMap Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5)))) |m'#5|))) :qid |unknown.0:0| :weight 3 :skolemid |11785| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5 ($LS $ly@@239) (Lit |m#0@@35|) (Lit |k#0@@23|))) ))))
(assert (forall ((arg0@@291 T@U) (arg1@@157 T@U) (arg2@@101 T@U) (arg3@@68 T@U) (arg4@@47 T@U) ) (! (= (type (Maps.__default.MapRemove1Strong arg0@@291 arg1@@157 arg2@@101 arg3@@68 arg4@@47)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove1Strong| :pattern ( (Maps.__default.MapRemove1Strong arg0@@291 arg1@@157 arg2@@101 arg3@@68 arg4@@47)) )))
(assert (forall ((Maps._default.MapRemove1Strong$K T@U) (Maps._default.MapRemove1Strong$V T@U) ($ly@@240 T@U) (|m#0@@36| T@U) (|k#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1Strong$K) TyType) (= (type Maps._default.MapRemove1Strong$V) TyType)) (= (type $ly@@240) LayerTypeType)) (= (type |m#0@@36|) (MapType BoxType BoxType))) (= (type |k#0@@24|) BoxType)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V ($LS $ly@@240) |m#0@@36| |k#0@@24|) (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V $ly@@240 |m#0@@36| |k#0@@24|))) :qid |unknown.0:0| :skolemid |11786| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V ($LS $ly@@240) |m#0@@36| |k#0@@24|)) )))
(assert (forall ((Maps._default.MapRemove1Strong$K@@0 T@U) (Maps._default.MapRemove1Strong$V@@0 T@U) ($ly@@241 T@U) (|m#0@@37| T@U) (|k#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@0) TyType) (= (type Maps._default.MapRemove1Strong$V@@0) TyType)) (= (type $ly@@241) LayerTypeType)) (= (type |m#0@@37|) (MapType BoxType BoxType))) (= (type |k#0@@25|) BoxType)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 $ly@@241 |m#0@@37| |k#0@@25|) (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 $LZ |m#0@@37| |k#0@@25|))) :qid |unknown.0:0| :skolemid |11787| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 (AsFuelBottom $ly@@241) |m#0@@37| |k#0@@25|)) )))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@1 T@U) (Maps._default.MapRemove1Strong$V@@1 T@U) ($ly@@242 T@U) (|m#0@@38| T@U) (|k#0@@26| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@1) TyType) (= (type Maps._default.MapRemove1Strong$V@@1) TyType)) (= (type $ly@@242) LayerTypeType)) (= (type |m#0@@38|) (MapType BoxType BoxType))) (= (type |k#0@@26|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 |m#0@@38| |k#0@@26|) (and ($Is |m#0@@38| (TMap Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1)) ($IsBox |k#0@@26| Maps._default.MapRemove1Strong$K@@1)))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@242 |m#0@@38| |k#0@@26|)) (|Set#Difference| (|Map#Domain| |m#0@@38|) (|Set#UnionOne| (|Set#Empty| BoxType) |k#0@@26|))) (forall ((|j#1@@1| T@U) ) (!  (=> (and (and (= (type |j#1@@1|) BoxType) ($IsBox |j#1@@1| Maps._default.MapRemove1Strong$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@242 |m#0@@38| |k#0@@26|)) |j#1@@1|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@242 |m#0@@38| |k#0@@26|)) |j#1@@1|) (MapType0Select (|Map#Elements| |m#0@@38|) |j#1@@1|))) :qid |Mapssdfy.76:20| :skolemid |11788| :pattern ( (MapType0Select (|Map#Elements| |m#0@@38|) |j#1@@1|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@242 |m#0@@38| |k#0@@26|)) |j#1@@1|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@242 |m#0@@38| |k#0@@26|)) |j#1@@1|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@242 |m#0@@38| |k#0@@26|))) (|Set#Card| (|Map#Domain| |m#0@@38|)))) (<= (|Map#Card| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@242 |m#0@@38| |k#0@@26|)) (|Map#Card| |m#0@@38|))) ($Is (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@242 |m#0@@38| |k#0@@26|) (TMap Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1)))) :qid |unknown.0:0| :skolemid |11789| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@242 |m#0@@38| |k#0@@26|)) ))))
(assert (forall ((Maps._default.MapRemove1Strong$K@@2 T@U) (Maps._default.MapRemove1Strong$V@@2 T@U) ($ly@@243 T@U) (|m#0@@39| T@U) (|k#0@@27| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@2) TyType) (= (type Maps._default.MapRemove1Strong$V@@2) TyType)) (= (type $ly@@243) LayerTypeType)) (= (type |m#0@@39|) (MapType BoxType BoxType))) (= (type |k#0@@27|) BoxType)) (and ($Is |m#0@@39| (TMap Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2)) ($IsBox |k#0@@27| Maps._default.MapRemove1Strong$K@@2))) (and (=> (|Maps.__default.MapRemove1Strong#requires| Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2 $ly@@243 |m#0@@39| |k#0@@27|) true) (=> true (|Maps.__default.MapRemove1Strong#requires| Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2 $ly@@243 |m#0@@39| |k#0@@27|)))) :qid |unknown.0:0| :skolemid |11790| :pattern ( (|Maps.__default.MapRemove1Strong#requires| Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2 $ly@@243 |m#0@@39| |k#0@@27|)) )))
(assert  (and (and (= (type StartFuel_Maps._default.MapRemove1) LayerTypeType) (= (type MoreFuel_Maps._default.MapRemove13) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemove1) LayerTypeType)))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@3 T@U) (Maps._default.MapRemove1Strong$V@@3 T@U) ($ly@@244 T@U) (|m#0@@40| T@U) (|k#0@@28| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@3) TyType) (= (type Maps._default.MapRemove1Strong$V@@3) TyType)) (= (type $ly@@244) LayerTypeType)) (= (type |m#0@@40|) (MapType BoxType BoxType))) (= (type |k#0@@28|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 |m#0@@40| |k#0@@28|) (and ($Is |m#0@@40| (TMap Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3)) ($IsBox |k#0@@28| Maps._default.MapRemove1Strong$K@@3)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 |m#0@@40| |k#0@@28|) (and (and (and (= StartFuel_Maps._default.MapRemove1 ($LS MoreFuel_Maps._default.MapRemove13)) (= StartFuelAssert_Maps._default.MapRemove1 ($LS ($LS MoreFuel_Maps._default.MapRemove13)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove13) MoreFuel_Maps._default.MapRemove13)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 ($LS $ly@@244) |m#0@@40| |k#0@@28|) (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 StartFuel_Maps._default.MapRemove1 |m#0@@40| |k#0@@28|))))) :qid |unknown.0:0| :skolemid |11791| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 ($LS $ly@@244) |m#0@@40| |k#0@@28|)) ))))
(assert (= (type MoreFuel_Maps._default.MapRemove14) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@4 T@U) (Maps._default.MapRemove1Strong$V@@4 T@U) ($ly@@245 T@U) (|m#0@@41| T@U) (|k#0@@29| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@4) TyType) (= (type Maps._default.MapRemove1Strong$V@@4) TyType)) (= (type $ly@@245) LayerTypeType)) (= (type |m#0@@41|) (MapType BoxType BoxType))) (= (type |k#0@@29|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 (Lit |m#0@@41|) |k#0@@29|) (and ($Is |m#0@@41| (TMap Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4)) ($IsBox |k#0@@29| Maps._default.MapRemove1Strong$K@@4)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 (Lit |m#0@@41|) |k#0@@29|) (and (and (and (= StartFuel_Maps._default.MapRemove1 ($LS MoreFuel_Maps._default.MapRemove14)) (= StartFuelAssert_Maps._default.MapRemove1 ($LS ($LS MoreFuel_Maps._default.MapRemove14)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove14) MoreFuel_Maps._default.MapRemove14)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 ($LS $ly@@245) (Lit |m#0@@41|) |k#0@@29|) (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 StartFuel_Maps._default.MapRemove1 (Lit |m#0@@41|) |k#0@@29|))))) :qid |unknown.0:0| :weight 3 :skolemid |11792| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 ($LS $ly@@245) (Lit |m#0@@41|) |k#0@@29|)) ))))
(assert (= (type MoreFuel_Maps._default.MapRemove15) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@5 T@U) (Maps._default.MapRemove1Strong$V@@5 T@U) ($ly@@246 T@U) (|m#0@@42| T@U) (|k#0@@30| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@5) TyType) (= (type Maps._default.MapRemove1Strong$V@@5) TyType)) (= (type $ly@@246) LayerTypeType)) (= (type |m#0@@42|) (MapType BoxType BoxType))) (= (type |k#0@@30|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 (Lit |m#0@@42|) (Lit |k#0@@30|)) (and ($Is |m#0@@42| (TMap Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5)) ($IsBox |k#0@@30| Maps._default.MapRemove1Strong$K@@5)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 (Lit |m#0@@42|) (Lit |k#0@@30|)) (and (and (and (= StartFuel_Maps._default.MapRemove1 ($LS MoreFuel_Maps._default.MapRemove15)) (= StartFuelAssert_Maps._default.MapRemove1 ($LS ($LS MoreFuel_Maps._default.MapRemove15)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove15) MoreFuel_Maps._default.MapRemove15)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 ($LS $ly@@246) (Lit |m#0@@42|) (Lit |k#0@@30|)) (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 StartFuel_Maps._default.MapRemove1 (Lit |m#0@@42|) (Lit |k#0@@30|)))))) :qid |unknown.0:0| :weight 3 :skolemid |11793| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 ($LS $ly@@246) (Lit |m#0@@42|) (Lit |k#0@@30|))) ))))
(assert (forall ((arg0@@292 T@U) (arg1@@158 T@U) (arg2@@102 T@U) (arg3@@69 T@U) (arg4@@48 T@U) ) (! (= (type (Maps.__default.IMapRemove arg0@@292 arg1@@158 arg2@@102 arg3@@69 arg4@@48)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRemove| :pattern ( (Maps.__default.IMapRemove arg0@@292 arg1@@158 arg2@@102 arg3@@69 arg4@@48)) )))
(assert (forall ((Maps._default.IMapRemove$K T@U) (Maps._default.IMapRemove$V T@U) ($ly@@247 T@U) (|m#0@@43| T@U) (|ks#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove$K) TyType) (= (type Maps._default.IMapRemove$V) TyType)) (= (type $ly@@247) LayerTypeType)) (= (type |m#0@@43|) (IMapType BoxType BoxType))) (= (type |ks#0@@11|) (MapType0Type BoxType boolType))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V ($LS $ly@@247) |m#0@@43| |ks#0@@11|) (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V $ly@@247 |m#0@@43| |ks#0@@11|))) :qid |unknown.0:0| :skolemid |11794| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V ($LS $ly@@247) |m#0@@43| |ks#0@@11|)) )))
(assert (forall ((Maps._default.IMapRemove$K@@0 T@U) (Maps._default.IMapRemove$V@@0 T@U) ($ly@@248 T@U) (|m#0@@44| T@U) (|ks#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove$K@@0) TyType) (= (type Maps._default.IMapRemove$V@@0) TyType)) (= (type $ly@@248) LayerTypeType)) (= (type |m#0@@44|) (IMapType BoxType BoxType))) (= (type |ks#0@@12|) (MapType0Type BoxType boolType))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 $ly@@248 |m#0@@44| |ks#0@@12|) (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 $LZ |m#0@@44| |ks#0@@12|))) :qid |unknown.0:0| :skolemid |11795| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 (AsFuelBottom $ly@@248) |m#0@@44| |ks#0@@12|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@1 T@U) (Maps._default.IMapRemove$V@@1 T@U) ($ly@@249 T@U) (|m#0@@45| T@U) (|ks#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@1) TyType) (= (type Maps._default.IMapRemove$V@@1) TyType)) (= (type $ly@@249) LayerTypeType)) (= (type |m#0@@45|) (IMapType BoxType BoxType))) (= (type |ks#0@@13|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 |m#0@@45| |ks#0@@13|) (and ($Is |m#0@@45| (TIMap Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1)) ($Is |ks#0@@13| (TISet Maps._default.IMapRemove$K@@1))))) (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@249 |m#0@@45| |ks#0@@13|)) (|ISet#Difference| (|IMap#Domain| |m#0@@45|) |ks#0@@13|)) (forall ((|j#2@@2| T@U) ) (!  (=> (and (and (= (type |j#2@@2|) BoxType) ($IsBox |j#2@@2| Maps._default.IMapRemove$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@249 |m#0@@45| |ks#0@@13|)) |j#2@@2|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@249 |m#0@@45| |ks#0@@13|)) |j#2@@2|) (MapType0Select (|IMap#Elements| |m#0@@45|) |j#2@@2|))) :qid |Mapssdfy.86:20| :skolemid |11796| :pattern ( (MapType0Select (|IMap#Elements| |m#0@@45|) |j#2@@2|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@249 |m#0@@45| |ks#0@@13|)) |j#2@@2|)) :pattern ( (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@249 |m#0@@45| |ks#0@@13|)) |j#2@@2|)) ))) ($Is (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@249 |m#0@@45| |ks#0@@13|) (TIMap Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1)))) :qid |unknown.0:0| :skolemid |11797| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@249 |m#0@@45| |ks#0@@13|)) ))))
(assert (forall ((Maps._default.IMapRemove$K@@2 T@U) (Maps._default.IMapRemove$V@@2 T@U) ($ly@@250 T@U) (|m#0@@46| T@U) (|ks#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@2) TyType) (= (type Maps._default.IMapRemove$V@@2) TyType)) (= (type $ly@@250) LayerTypeType)) (= (type |m#0@@46|) (IMapType BoxType BoxType))) (= (type |ks#0@@14|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@46| (TIMap Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2)) ($Is |ks#0@@14| (TISet Maps._default.IMapRemove$K@@2)))) (and (=> (|Maps.__default.IMapRemove#requires| Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2 $ly@@250 |m#0@@46| |ks#0@@14|) true) (=> true (|Maps.__default.IMapRemove#requires| Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2 $ly@@250 |m#0@@46| |ks#0@@14|)))) :qid |unknown.0:0| :skolemid |11798| :pattern ( (|Maps.__default.IMapRemove#requires| Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2 $ly@@250 |m#0@@46| |ks#0@@14|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@3 T@U) (Maps._default.IMapRemove$V@@3 T@U) ($ly@@251 T@U) (|m#0@@47| T@U) (|ks#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@3) TyType) (= (type Maps._default.IMapRemove$V@@3) TyType)) (= (type $ly@@251) LayerTypeType)) (= (type |m#0@@47|) (IMapType BoxType BoxType))) (= (type |ks#0@@15|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 |m#0@@47| |ks#0@@15|) (and ($Is |m#0@@47| (TIMap Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3)) ($Is |ks#0@@15| (TISet Maps._default.IMapRemove$K@@3))))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 ($LS $ly@@251) |m#0@@47| |ks#0@@15|) (|IMap#Glue| (|lambda#68| Maps._default.IMapRemove$K@@3 (|IMap#Domain| |m#0@@47|) |ks#0@@15|) (|lambda#69| (|IMap#Elements| |m#0@@47|)) (TIMap Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3)))) :qid |unknown.0:0| :skolemid |11799| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 ($LS $ly@@251) |m#0@@47| |ks#0@@15|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@4 T@U) (Maps._default.IMapRemove$V@@4 T@U) ($ly@@252 T@U) (|m#0@@48| T@U) (|ks#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@4) TyType) (= (type Maps._default.IMapRemove$V@@4) TyType)) (= (type $ly@@252) LayerTypeType)) (= (type |m#0@@48|) (IMapType BoxType BoxType))) (= (type |ks#0@@16|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 (Lit |m#0@@48|) (Lit |ks#0@@16|)) (and ($Is |m#0@@48| (TIMap Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4)) ($Is |ks#0@@16| (TISet Maps._default.IMapRemove$K@@4))))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 ($LS $ly@@252) (Lit |m#0@@48|) (Lit |ks#0@@16|)) (|IMap#Glue| (|lambda#68| Maps._default.IMapRemove$K@@4 (|IMap#Domain| |m#0@@48|) (Lit |ks#0@@16|)) (|lambda#69| (|IMap#Elements| (Lit |m#0@@48|))) (TIMap Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |11800| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 ($LS $ly@@252) (Lit |m#0@@48|) (Lit |ks#0@@16|))) ))))
(assert (forall ((arg0@@293 T@U) (arg1@@159 T@U) (arg2@@103 T@U) (arg3@@70 T@U) (arg4@@49 T@U) ) (! (= (type (Maps.__default.IMapRemove1 arg0@@293 arg1@@159 arg2@@103 arg3@@70 arg4@@49)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRemove1| :pattern ( (Maps.__default.IMapRemove1 arg0@@293 arg1@@159 arg2@@103 arg3@@70 arg4@@49)) )))
(assert (forall ((Maps._default.IMapRemove1$K T@U) (Maps._default.IMapRemove1$V T@U) ($ly@@253 T@U) (|m#0@@49| T@U) (|k#0@@31| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove1$K) TyType) (= (type Maps._default.IMapRemove1$V) TyType)) (= (type $ly@@253) LayerTypeType)) (= (type |m#0@@49|) (IMapType BoxType BoxType))) (= (type |k#0@@31|) BoxType)) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V ($LS $ly@@253) |m#0@@49| |k#0@@31|) (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V $ly@@253 |m#0@@49| |k#0@@31|))) :qid |unknown.0:0| :skolemid |11801| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V ($LS $ly@@253) |m#0@@49| |k#0@@31|)) )))
(assert (forall ((Maps._default.IMapRemove1$K@@0 T@U) (Maps._default.IMapRemove1$V@@0 T@U) ($ly@@254 T@U) (|m#0@@50| T@U) (|k#0@@32| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove1$K@@0) TyType) (= (type Maps._default.IMapRemove1$V@@0) TyType)) (= (type $ly@@254) LayerTypeType)) (= (type |m#0@@50|) (IMapType BoxType BoxType))) (= (type |k#0@@32|) BoxType)) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 $ly@@254 |m#0@@50| |k#0@@32|) (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 $LZ |m#0@@50| |k#0@@32|))) :qid |unknown.0:0| :skolemid |11802| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 (AsFuelBottom $ly@@254) |m#0@@50| |k#0@@32|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@1 T@U) (Maps._default.IMapRemove1$V@@1 T@U) ($ly@@255 T@U) (|m#0@@51| T@U) (|k#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@1) TyType) (= (type Maps._default.IMapRemove1$V@@1) TyType)) (= (type $ly@@255) LayerTypeType)) (= (type |m#0@@51|) (IMapType BoxType BoxType))) (= (type |k#0@@33|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 |m#0@@51| |k#0@@33|) (and ($Is |m#0@@51| (TIMap Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1)) ($IsBox |k#0@@33| Maps._default.IMapRemove1$K@@1)))) (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@255 |m#0@@51| |k#0@@33|)) (|ISet#Difference| (|IMap#Domain| |m#0@@51|) (|ISet#UnionOne| (|ISet#Empty| BoxType) |k#0@@33|))) (forall ((|j#2@@3| T@U) ) (!  (=> (and (and (= (type |j#2@@3|) BoxType) ($IsBox |j#2@@3| Maps._default.IMapRemove1$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@255 |m#0@@51| |k#0@@33|)) |j#2@@3|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@255 |m#0@@51| |k#0@@33|)) |j#2@@3|) (MapType0Select (|IMap#Elements| |m#0@@51|) |j#2@@3|))) :qid |Mapssdfy.93:20| :skolemid |11803| :pattern ( (MapType0Select (|IMap#Elements| |m#0@@51|) |j#2@@3|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@255 |m#0@@51| |k#0@@33|)) |j#2@@3|)) :pattern ( (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@255 |m#0@@51| |k#0@@33|)) |j#2@@3|)) ))) ($Is (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@255 |m#0@@51| |k#0@@33|) (TIMap Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1)))) :qid |unknown.0:0| :skolemid |11804| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@255 |m#0@@51| |k#0@@33|)) ))))
(assert (forall ((Maps._default.IMapRemove1$K@@2 T@U) (Maps._default.IMapRemove1$V@@2 T@U) ($ly@@256 T@U) (|m#0@@52| T@U) (|k#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@2) TyType) (= (type Maps._default.IMapRemove1$V@@2) TyType)) (= (type $ly@@256) LayerTypeType)) (= (type |m#0@@52|) (IMapType BoxType BoxType))) (= (type |k#0@@34|) BoxType)) (and ($Is |m#0@@52| (TIMap Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2)) ($IsBox |k#0@@34| Maps._default.IMapRemove1$K@@2))) (and (=> (|Maps.__default.IMapRemove1#requires| Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2 $ly@@256 |m#0@@52| |k#0@@34|) true) (=> true (|Maps.__default.IMapRemove1#requires| Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2 $ly@@256 |m#0@@52| |k#0@@34|)))) :qid |unknown.0:0| :skolemid |11805| :pattern ( (|Maps.__default.IMapRemove1#requires| Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2 $ly@@256 |m#0@@52| |k#0@@34|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@3 T@U) (Maps._default.IMapRemove1$V@@3 T@U) ($ly@@257 T@U) (|m#0@@53| T@U) (|k#0@@35| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@3) TyType) (= (type Maps._default.IMapRemove1$V@@3) TyType)) (= (type $ly@@257) LayerTypeType)) (= (type |m#0@@53|) (IMapType BoxType BoxType))) (= (type |k#0@@35|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 |m#0@@53| |k#0@@35|) (and ($Is |m#0@@53| (TIMap Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3)) ($IsBox |k#0@@35| Maps._default.IMapRemove1$K@@3)))) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 ($LS $ly@@257) |m#0@@53| |k#0@@35|) (|IMap#Glue| (|lambda#72| Maps._default.IMapRemove1$K@@3 (|IMap#Domain| |m#0@@53|) |k#0@@35|) (|lambda#69| (|IMap#Elements| |m#0@@53|)) (TIMap Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3)))) :qid |unknown.0:0| :skolemid |11806| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 ($LS $ly@@257) |m#0@@53| |k#0@@35|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@4 T@U) (Maps._default.IMapRemove1$V@@4 T@U) ($ly@@258 T@U) (|m#0@@54| T@U) (|k#0@@36| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@4) TyType) (= (type Maps._default.IMapRemove1$V@@4) TyType)) (= (type $ly@@258) LayerTypeType)) (= (type |m#0@@54|) (IMapType BoxType BoxType))) (= (type |k#0@@36|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 (Lit |m#0@@54|) (Lit |k#0@@36|)) (and ($Is |m#0@@54| (TIMap Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4)) ($IsBox |k#0@@36| Maps._default.IMapRemove1$K@@4)))) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 ($LS $ly@@258) (Lit |m#0@@54|) (Lit |k#0@@36|)) (|IMap#Glue| (|lambda#72| Maps._default.IMapRemove1$K@@4 (|IMap#Domain| |m#0@@54|) |k#0@@36|) (|lambda#69| (|IMap#Elements| (Lit |m#0@@54|))) (TIMap Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |11807| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 ($LS $ly@@258) (Lit |m#0@@54|) (Lit |k#0@@36|))) ))))
(assert (forall ((arg0@@294 T@U) (arg1@@160 T@U) (arg2@@104 T@U) (arg3@@71 T@U) ) (! (= (type (Maps.__default.MapRestrict arg0@@294 arg1@@160 arg2@@104 arg3@@71)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRestrict| :pattern ( (Maps.__default.MapRestrict arg0@@294 arg1@@160 arg2@@104 arg3@@71)) )))
(assert  (=> true (forall ((Maps._default.MapRestrict$K T@U) (Maps._default.MapRestrict$V T@U) (|m#0@@55| T@U) (|ks#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K) TyType) (= (type Maps._default.MapRestrict$V) TyType)) (= (type |m#0@@55|) (MapType BoxType BoxType))) (= (type |ks#0@@17|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@55| |ks#0@@17|) (and ($Is |m#0@@55| (TMap Maps._default.MapRestrict$K Maps._default.MapRestrict$V)) ($Is |ks#0@@17| (TSet Maps._default.MapRestrict$K))))) ($Is (Maps.__default.MapRestrict Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@55| |ks#0@@17|) (TMap Maps._default.MapRestrict$K Maps._default.MapRestrict$V))) :qid |unknown.0:0| :skolemid |11808| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@55| |ks#0@@17|)) ))))
(assert (forall ((Maps._default.MapRestrict$K@@0 T@U) (Maps._default.MapRestrict$V@@0 T@U) (|m#0@@56| T@U) (|ks#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@0) TyType) (= (type Maps._default.MapRestrict$V@@0) TyType)) (= (type |m#0@@56|) (MapType BoxType BoxType))) (= (type |ks#0@@18|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@56| (TMap Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0)) ($Is |ks#0@@18| (TSet Maps._default.MapRestrict$K@@0)))) (and (=> (|Maps.__default.MapRestrict#requires| Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0 |m#0@@56| |ks#0@@18|) true) (=> true (|Maps.__default.MapRestrict#requires| Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0 |m#0@@56| |ks#0@@18|)))) :qid |unknown.0:0| :skolemid |11809| :pattern ( (|Maps.__default.MapRestrict#requires| Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0 |m#0@@56| |ks#0@@18|)) )))
(assert (forall ((arg0@@295 T@U) (arg1@@161 T@U) (arg2@@105 T@U) ) (! (= (type (|lambda#86| arg0@@295 arg1@@161 arg2@@105)) (MapType0Type BoxType boolType)) :qid |funType:lambda#86| :pattern ( (|lambda#86| arg0@@295 arg1@@161 arg2@@105)) )))
(assert  (=> true (forall ((Maps._default.MapRestrict$K@@1 T@U) (Maps._default.MapRestrict$V@@1 T@U) (|m#0@@57| T@U) (|ks#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@1) TyType) (= (type Maps._default.MapRestrict$V@@1) TyType)) (= (type |m#0@@57|) (MapType BoxType BoxType))) (= (type |ks#0@@19|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@57| |ks#0@@19|) (and ($Is |m#0@@57| (TMap Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1)) ($Is |ks#0@@19| (TSet Maps._default.MapRestrict$K@@1))))) (= (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@57| |ks#0@@19|) (|Map#Glue| (|lambda#86| Maps._default.MapRestrict$K@@1 |ks#0@@19| (|Map#Domain| |m#0@@57|)) (|lambda#69| (|Map#Elements| |m#0@@57|)) (TMap Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |11810| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@57| |ks#0@@19|)) ))))
(assert  (=> true (forall ((Maps._default.MapRestrict$K@@2 T@U) (Maps._default.MapRestrict$V@@2 T@U) (|m#0@@58| T@U) (|ks#0@@20| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@2) TyType) (= (type Maps._default.MapRestrict$V@@2) TyType)) (= (type |m#0@@58|) (MapType BoxType BoxType))) (= (type |ks#0@@20|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@58|) (Lit |ks#0@@20|)) (and ($Is |m#0@@58| (TMap Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2)) ($Is |ks#0@@20| (TSet Maps._default.MapRestrict$K@@2))))) (= (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@58|) (Lit |ks#0@@20|)) (|Map#Glue| (|lambda#86| Maps._default.MapRestrict$K@@2 (Lit |ks#0@@20|) (|Map#Domain| |m#0@@58|)) (|lambda#69| (|Map#Elements| (Lit |m#0@@58|))) (TMap Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |11811| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@58|) (Lit |ks#0@@20|))) ))))
(assert (forall ((arg0@@296 T@U) (arg1@@162 T@U) (arg2@@106 T@U) (arg3@@72 T@U) ) (! (= (type (Maps.__default.MapIRestrict arg0@@296 arg1@@162 arg2@@106 arg3@@72)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapIRestrict| :pattern ( (Maps.__default.MapIRestrict arg0@@296 arg1@@162 arg2@@106 arg3@@72)) )))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K T@U) (Maps._default.MapIRestrict$V T@U) (|m#0@@59| T@U) (|ks#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K) TyType) (= (type Maps._default.MapIRestrict$V) TyType)) (= (type |m#0@@59|) (MapType BoxType BoxType))) (= (type |ks#0@@21|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@59| |ks#0@@21|) (and ($Is |m#0@@59| (TMap Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V)) ($Is |ks#0@@21| (TISet Maps._default.MapIRestrict$K))))) ($Is (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@59| |ks#0@@21|) (TMap Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V))) :qid |unknown.0:0| :skolemid |11812| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@59| |ks#0@@21|)) ))))
(assert (forall ((Maps._default.MapIRestrict$K@@0 T@U) (Maps._default.MapIRestrict$V@@0 T@U) (|m#0@@60| T@U) (|ks#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@0) TyType) (= (type Maps._default.MapIRestrict$V@@0) TyType)) (= (type |m#0@@60|) (MapType BoxType BoxType))) (= (type |ks#0@@22|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@60| (TMap Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0)) ($Is |ks#0@@22| (TISet Maps._default.MapIRestrict$K@@0)))) (and (=> (|Maps.__default.MapIRestrict#requires| Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0 |m#0@@60| |ks#0@@22|) true) (=> true (|Maps.__default.MapIRestrict#requires| Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0 |m#0@@60| |ks#0@@22|)))) :qid |unknown.0:0| :skolemid |11813| :pattern ( (|Maps.__default.MapIRestrict#requires| Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0 |m#0@@60| |ks#0@@22|)) )))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@1 T@U) (Maps._default.MapIRestrict$V@@1 T@U) (|m#0@@61| T@U) (|ks#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@1) TyType) (= (type Maps._default.MapIRestrict$V@@1) TyType)) (= (type |m#0@@61|) (MapType BoxType BoxType))) (= (type |ks#0@@23|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@61| |ks#0@@23|) (and ($Is |m#0@@61| (TMap Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1)) ($Is |ks#0@@23| (TISet Maps._default.MapIRestrict$K@@1))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@61| |ks#0@@23|) (|Map#Glue| (|lambda#86| Maps._default.MapIRestrict$K@@1 (|Map#Domain| |m#0@@61|) |ks#0@@23|) (|lambda#69| (|Map#Elements| |m#0@@61|)) (TMap Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |11814| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@61| |ks#0@@23|)) ))))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@2 T@U) (Maps._default.MapIRestrict$V@@2 T@U) (|m#0@@62| T@U) (|ks#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@2) TyType) (= (type Maps._default.MapIRestrict$V@@2) TyType)) (= (type |m#0@@62|) (MapType BoxType BoxType))) (= (type |ks#0@@24|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@62|) |ks#0@@24|) (and ($Is |m#0@@62| (TMap Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2)) ($Is |ks#0@@24| (TISet Maps._default.MapIRestrict$K@@2))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@62|) |ks#0@@24|) (|Map#Glue| (|lambda#86| Maps._default.MapIRestrict$K@@2 (|Map#Domain| |m#0@@62|) |ks#0@@24|) (|lambda#69| (|Map#Elements| (Lit |m#0@@62|))) (TMap Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |11815| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@62|) |ks#0@@24|)) ))))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@3 T@U) (Maps._default.MapIRestrict$V@@3 T@U) (|m#0@@63| T@U) (|ks#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@3) TyType) (= (type Maps._default.MapIRestrict$V@@3) TyType)) (= (type |m#0@@63|) (MapType BoxType BoxType))) (= (type |ks#0@@25|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@63|) (Lit |ks#0@@25|)) (and ($Is |m#0@@63| (TMap Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3)) ($Is |ks#0@@25| (TISet Maps._default.MapIRestrict$K@@3))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@63|) (Lit |ks#0@@25|)) (|Map#Glue| (|lambda#86| Maps._default.MapIRestrict$K@@3 (|Map#Domain| |m#0@@63|) (Lit |ks#0@@25|)) (|lambda#69| (|Map#Elements| (Lit |m#0@@63|))) (TMap Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3)))) :qid |unknown.0:0| :weight 3 :skolemid |11816| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@63|) (Lit |ks#0@@25|))) ))))
(assert (forall ((arg0@@297 T@U) (arg1@@163 T@U) (arg2@@107 T@U) (arg3@@73 T@U) ) (! (= (type (Maps.__default.IMapRestrict arg0@@297 arg1@@163 arg2@@107 arg3@@73)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRestrict| :pattern ( (Maps.__default.IMapRestrict arg0@@297 arg1@@163 arg2@@107 arg3@@73)) )))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K T@U) (Maps._default.IMapRestrict$V T@U) (|m#0@@64| T@U) (|ks#0@@26| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K) TyType) (= (type Maps._default.IMapRestrict$V) TyType)) (= (type |m#0@@64|) (IMapType BoxType BoxType))) (= (type |ks#0@@26|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@64| |ks#0@@26|) (and ($Is |m#0@@64| (TIMap Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V)) ($Is |ks#0@@26| (TISet Maps._default.IMapRestrict$K))))) ($Is (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@64| |ks#0@@26|) (TIMap Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V))) :qid |unknown.0:0| :skolemid |11817| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@64| |ks#0@@26|)) ))))
(assert (forall ((Maps._default.IMapRestrict$K@@0 T@U) (Maps._default.IMapRestrict$V@@0 T@U) (|m#0@@65| T@U) (|ks#0@@27| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@0) TyType) (= (type Maps._default.IMapRestrict$V@@0) TyType)) (= (type |m#0@@65|) (IMapType BoxType BoxType))) (= (type |ks#0@@27|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@65| (TIMap Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0)) ($Is |ks#0@@27| (TISet Maps._default.IMapRestrict$K@@0)))) (and (=> (|Maps.__default.IMapRestrict#requires| Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0 |m#0@@65| |ks#0@@27|) true) (=> true (|Maps.__default.IMapRestrict#requires| Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0 |m#0@@65| |ks#0@@27|)))) :qid |unknown.0:0| :skolemid |11818| :pattern ( (|Maps.__default.IMapRestrict#requires| Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0 |m#0@@65| |ks#0@@27|)) )))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K@@1 T@U) (Maps._default.IMapRestrict$V@@1 T@U) (|m#0@@66| T@U) (|ks#0@@28| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@1) TyType) (= (type Maps._default.IMapRestrict$V@@1) TyType)) (= (type |m#0@@66|) (IMapType BoxType BoxType))) (= (type |ks#0@@28|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@66| |ks#0@@28|) (and ($Is |m#0@@66| (TIMap Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1)) ($Is |ks#0@@28| (TISet Maps._default.IMapRestrict$K@@1))))) (= (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@66| |ks#0@@28|) (|IMap#Glue| (|lambda#86| Maps._default.IMapRestrict$K@@1 |ks#0@@28| (|IMap#Domain| |m#0@@66|)) (|lambda#69| (|IMap#Elements| |m#0@@66|)) (TIMap Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |11819| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@66| |ks#0@@28|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K@@2 T@U) (Maps._default.IMapRestrict$V@@2 T@U) (|m#0@@67| T@U) (|ks#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@2) TyType) (= (type Maps._default.IMapRestrict$V@@2) TyType)) (= (type |m#0@@67|) (IMapType BoxType BoxType))) (= (type |ks#0@@29|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@67|) (Lit |ks#0@@29|)) (and ($Is |m#0@@67| (TIMap Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2)) ($Is |ks#0@@29| (TISet Maps._default.IMapRestrict$K@@2))))) (= (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@67|) (Lit |ks#0@@29|)) (|IMap#Glue| (|lambda#86| Maps._default.IMapRestrict$K@@2 (Lit |ks#0@@29|) (|IMap#Domain| |m#0@@67|)) (|lambda#69| (|IMap#Elements| (Lit |m#0@@67|))) (TIMap Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |11820| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@67|) (Lit |ks#0@@29|))) ))))
(assert (forall ((arg0@@298 T@U) (arg1@@164 T@U) (arg2@@108 T@U) (arg3@@74 T@U) (arg4@@50 T@U) ) (! (= (type (Maps.__default.MapDisjointUnion arg0@@298 arg1@@164 arg2@@108 arg3@@74 arg4@@50)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapDisjointUnion| :pattern ( (Maps.__default.MapDisjointUnion arg0@@298 arg1@@164 arg2@@108 arg3@@74 arg4@@50)) )))
(assert (forall ((Maps._default.MapDisjointUnion$U T@U) (Maps._default.MapDisjointUnion$T T@U) ($ly@@259 T@U) (|mapa#0| T@U) (|mapb#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapDisjointUnion$U) TyType) (= (type Maps._default.MapDisjointUnion$T) TyType)) (= (type $ly@@259) LayerTypeType)) (= (type |mapa#0|) (MapType BoxType BoxType))) (= (type |mapb#0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T ($LS $ly@@259) |mapa#0| |mapb#0|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T $ly@@259 |mapa#0| |mapb#0|))) :qid |unknown.0:0| :skolemid |11821| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T ($LS $ly@@259) |mapa#0| |mapb#0|)) )))
(assert (forall ((Maps._default.MapDisjointUnion$U@@0 T@U) (Maps._default.MapDisjointUnion$T@@0 T@U) ($ly@@260 T@U) (|mapa#0@@0| T@U) (|mapb#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@0) TyType) (= (type Maps._default.MapDisjointUnion$T@@0) TyType)) (= (type $ly@@260) LayerTypeType)) (= (type |mapa#0@@0|) (MapType BoxType BoxType))) (= (type |mapb#0@@0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 $ly@@260 |mapa#0@@0| |mapb#0@@0|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 $LZ |mapa#0@@0| |mapb#0@@0|))) :qid |unknown.0:0| :skolemid |11822| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 (AsFuelBottom $ly@@260) |mapa#0@@0| |mapb#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@1 T@U) (Maps._default.MapDisjointUnion$T@@1 T@U) ($ly@@261 T@U) (|mapa#0@@1| T@U) (|mapb#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@1) TyType) (= (type Maps._default.MapDisjointUnion$T@@1) TyType)) (= (type $ly@@261) LayerTypeType)) (= (type |mapa#0@@1|) (MapType BoxType BoxType))) (= (type |mapb#0@@1|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 |mapa#0@@1| |mapb#0@@1|) (and (and ($Is |mapa#0@@1| (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1)) ($Is |mapb#0@@1| (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1))) (|Set#Disjoint| (|Map#Domain| |mapa#0@@1|) (|Map#Domain| |mapb#0@@1|))))) (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@261 |mapa#0@@1| |mapb#0@@1|)) (|Set#Union| (|Map#Domain| |mapa#0@@1|) (|Map#Domain| |mapb#0@@1|))) (forall ((|k#2@@0| T@U) ) (!  (=> (and (and (= (type |k#2@@0|) BoxType) ($IsBox |k#2@@0| Maps._default.MapDisjointUnion$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@1|) |k#2@@0|))) (= (MapType0Select (|Map#Elements| |mapa#0@@1|) |k#2@@0|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@261 |mapa#0@@1| |mapb#0@@1|)) |k#2@@0|))) :qid |Mapssdfy.114:18| :skolemid |11823| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@261 |mapa#0@@1| |mapb#0@@1|)) |k#2@@0|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@1|) |k#2@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@1|) |k#2@@0|)) ))) (forall ((|k#3@@0| T@U) ) (!  (=> (and (and (= (type |k#3@@0|) BoxType) ($IsBox |k#3@@0| Maps._default.MapDisjointUnion$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@1|) |k#3@@0|))) (= (MapType0Select (|Map#Elements| |mapb#0@@1|) |k#3@@0|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@261 |mapa#0@@1| |mapb#0@@1|)) |k#3@@0|))) :qid |Mapssdfy.115:18| :skolemid |11824| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@261 |mapa#0@@1| |mapb#0@@1|)) |k#3@@0|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@1|) |k#3@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@1|) |k#3@@0|)) ))) ($Is (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@261 |mapa#0@@1| |mapb#0@@1|) (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1)))) :qid |unknown.0:0| :skolemid |11825| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@261 |mapa#0@@1| |mapb#0@@1|)) ))))
(assert (forall ((Maps._default.MapDisjointUnion$U@@2 T@U) (Maps._default.MapDisjointUnion$T@@2 T@U) ($ly@@262 T@U) (|mapa#0@@2| T@U) (|mapb#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@2) TyType) (= (type Maps._default.MapDisjointUnion$T@@2) TyType)) (= (type $ly@@262) LayerTypeType)) (= (type |mapa#0@@2|) (MapType BoxType BoxType))) (= (type |mapb#0@@2|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@2| (TMap Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2)) ($Is |mapb#0@@2| (TMap Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2)))) (and (=> (|Maps.__default.MapDisjointUnion#requires| Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2 $ly@@262 |mapa#0@@2| |mapb#0@@2|) (|Set#Disjoint| (|Map#Domain| |mapa#0@@2|) (|Map#Domain| |mapb#0@@2|))) (=> (|Set#Disjoint| (|Map#Domain| |mapa#0@@2|) (|Map#Domain| |mapb#0@@2|)) (|Maps.__default.MapDisjointUnion#requires| Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2 $ly@@262 |mapa#0@@2| |mapb#0@@2|)))) :qid |unknown.0:0| :skolemid |11826| :pattern ( (|Maps.__default.MapDisjointUnion#requires| Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2 $ly@@262 |mapa#0@@2| |mapb#0@@2|)) )))
(assert  (and (forall ((arg0@@299 T@U) (arg1@@165 T@U) (arg2@@109 T@U) ) (! (= (type (|lambda#100| arg0@@299 arg1@@165 arg2@@109)) (MapType0Type BoxType boolType)) :qid |funType:lambda#100| :pattern ( (|lambda#100| arg0@@299 arg1@@165 arg2@@109)) )) (forall ((arg0@@300 T@U) (arg1@@166 T@U) (arg2@@110 T@U) ) (! (= (type (|lambda#101| arg0@@300 arg1@@166 arg2@@110)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#101| :pattern ( (|lambda#101| arg0@@300 arg1@@166 arg2@@110)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@3 T@U) (Maps._default.MapDisjointUnion$T@@3 T@U) ($ly@@263 T@U) (|mapa#0@@3| T@U) (|mapb#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@3) TyType) (= (type Maps._default.MapDisjointUnion$T@@3) TyType)) (= (type $ly@@263) LayerTypeType)) (= (type |mapa#0@@3|) (MapType BoxType BoxType))) (= (type |mapb#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 |mapa#0@@3| |mapb#0@@3|) (and (and ($Is |mapa#0@@3| (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3)) ($Is |mapb#0@@3| (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3))) (|Set#Disjoint| (|Map#Domain| |mapa#0@@3|) (|Map#Domain| |mapb#0@@3|))))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 ($LS $ly@@263) |mapa#0@@3| |mapb#0@@3|) (|Map#Glue| (|lambda#100| Maps._default.MapDisjointUnion$U@@3 (|Map#Domain| |mapa#0@@3|) (|Map#Domain| |mapb#0@@3|)) (|lambda#101| (|Map#Domain| |mapa#0@@3|) (|Map#Elements| |mapa#0@@3|) (|Map#Elements| |mapb#0@@3|)) (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3)))) :qid |unknown.0:0| :skolemid |11827| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 ($LS $ly@@263) |mapa#0@@3| |mapb#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@4 T@U) (Maps._default.MapDisjointUnion$T@@4 T@U) ($ly@@264 T@U) (|mapa#0@@4| T@U) (|mapb#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@4) TyType) (= (type Maps._default.MapDisjointUnion$T@@4) TyType)) (= (type $ly@@264) LayerTypeType)) (= (type |mapa#0@@4|) (MapType BoxType BoxType))) (= (type |mapb#0@@4|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 (Lit |mapa#0@@4|) (Lit |mapb#0@@4|)) (and (and ($Is |mapa#0@@4| (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4)) ($Is |mapb#0@@4| (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4))) (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@4|)) (|Map#Domain| (Lit |mapb#0@@4|)))))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 ($LS $ly@@264) (Lit |mapa#0@@4|) (Lit |mapb#0@@4|)) (|Map#Glue| (|lambda#100| Maps._default.MapDisjointUnion$U@@4 (Lit (|Map#Domain| (Lit |mapa#0@@4|))) (Lit (|Map#Domain| (Lit |mapb#0@@4|)))) (|lambda#101| (|Map#Domain| |mapa#0@@4|) (|Map#Elements| (Lit |mapa#0@@4|)) (|Map#Elements| (Lit |mapb#0@@4|))) (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |11828| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 ($LS $ly@@264) (Lit |mapa#0@@4|) (Lit |mapb#0@@4|))) ))))
(assert (forall ((arg0@@301 T@U) (arg1@@167 T@U) (arg2@@111 T@U) (arg3@@75 T@U) (arg4@@51 T@U) ) (! (= (type (Maps.__default.MapUnionPreferA arg0@@301 arg1@@167 arg2@@111 arg3@@75 arg4@@51)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnionPreferA| :pattern ( (Maps.__default.MapUnionPreferA arg0@@301 arg1@@167 arg2@@111 arg3@@75 arg4@@51)) )))
(assert (forall ((Maps._default.MapUnionPreferA$U T@U) (Maps._default.MapUnionPreferA$T T@U) ($ly@@265 T@U) (|mapa#0@@5| T@U) (|mapb#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferA$U) TyType) (= (type Maps._default.MapUnionPreferA$T) TyType)) (= (type $ly@@265) LayerTypeType)) (= (type |mapa#0@@5|) (MapType BoxType BoxType))) (= (type |mapb#0@@5|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T ($LS $ly@@265) |mapa#0@@5| |mapb#0@@5|) (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T $ly@@265 |mapa#0@@5| |mapb#0@@5|))) :qid |unknown.0:0| :skolemid |11829| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T ($LS $ly@@265) |mapa#0@@5| |mapb#0@@5|)) )))
(assert (forall ((Maps._default.MapUnionPreferA$U@@0 T@U) (Maps._default.MapUnionPreferA$T@@0 T@U) ($ly@@266 T@U) (|mapa#0@@6| T@U) (|mapb#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@0) TyType) (= (type Maps._default.MapUnionPreferA$T@@0) TyType)) (= (type $ly@@266) LayerTypeType)) (= (type |mapa#0@@6|) (MapType BoxType BoxType))) (= (type |mapb#0@@6|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 $ly@@266 |mapa#0@@6| |mapb#0@@6|) (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 $LZ |mapa#0@@6| |mapb#0@@6|))) :qid |unknown.0:0| :skolemid |11830| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 (AsFuelBottom $ly@@266) |mapa#0@@6| |mapb#0@@6|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@1 T@U) (Maps._default.MapUnionPreferA$T@@1 T@U) ($ly@@267 T@U) (|mapa#0@@7| T@U) (|mapb#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@1) TyType) (= (type Maps._default.MapUnionPreferA$T@@1) TyType)) (= (type $ly@@267) LayerTypeType)) (= (type |mapa#0@@7|) (MapType BoxType BoxType))) (= (type |mapb#0@@7|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 |mapa#0@@7| |mapb#0@@7|) (and ($Is |mapa#0@@7| (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1)) ($Is |mapb#0@@7| (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@267 |mapa#0@@7| |mapb#0@@7|)) (|Set#Union| (|Map#Domain| |mapa#0@@7|) (|Map#Domain| |mapb#0@@7|))) (forall ((|k#3@@1| T@U) ) (!  (=> (and (and (= (type |k#3@@1|) BoxType) ($IsBox |k#3@@1| Maps._default.MapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#3@@1|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@267 |mapa#0@@7| |mapb#0@@7|)) |k#3@@1|) (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#3@@1|))) :qid |Mapssdfy.124:20| :skolemid |11831| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#3@@1|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@267 |mapa#0@@7| |mapb#0@@7|)) |k#3@@1|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#3@@1|)) ))) (forall ((|k#4| T@U) ) (!  (=> (and (and (= (type |k#4|) BoxType) ($IsBox |k#4| Maps._default.MapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@7|) |k#4|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#4|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@267 |mapa#0@@7| |mapb#0@@7|)) |k#4|) (MapType0Select (|Map#Elements| |mapb#0@@7|) |k#4|))) :qid |Mapssdfy.125:20| :skolemid |11832| :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@7|) |k#4|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@267 |mapa#0@@7| |mapb#0@@7|)) |k#4|)) ))) (forall ((|k#5| T@U) ) (!  (=> (and (and (= (type |k#5|) BoxType) ($IsBox |k#5| Maps._default.MapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#5|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@7|) |k#5|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@267 |mapa#0@@7| |mapb#0@@7|)) |k#5|) (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#5|))) :qid |Mapssdfy.126:20| :skolemid |11833| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#5|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@267 |mapa#0@@7| |mapb#0@@7|)) |k#5|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@7|) |k#5|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#5|)) ))) ($Is (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@267 |mapa#0@@7| |mapb#0@@7|) (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1)))) :qid |unknown.0:0| :skolemid |11834| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@267 |mapa#0@@7| |mapb#0@@7|)) ))))
(assert (forall ((Maps._default.MapUnionPreferA$U@@2 T@U) (Maps._default.MapUnionPreferA$T@@2 T@U) ($ly@@268 T@U) (|mapa#0@@8| T@U) (|mapb#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@2) TyType) (= (type Maps._default.MapUnionPreferA$T@@2) TyType)) (= (type $ly@@268) LayerTypeType)) (= (type |mapa#0@@8|) (MapType BoxType BoxType))) (= (type |mapb#0@@8|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@8| (TMap Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2)) ($Is |mapb#0@@8| (TMap Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2)))) (and (=> (|Maps.__default.MapUnionPreferA#requires| Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2 $ly@@268 |mapa#0@@8| |mapb#0@@8|) true) (=> true (|Maps.__default.MapUnionPreferA#requires| Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2 $ly@@268 |mapa#0@@8| |mapb#0@@8|)))) :qid |unknown.0:0| :skolemid |11835| :pattern ( (|Maps.__default.MapUnionPreferA#requires| Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2 $ly@@268 |mapa#0@@8| |mapb#0@@8|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@3 T@U) (Maps._default.MapUnionPreferA$T@@3 T@U) ($ly@@269 T@U) (|mapa#0@@9| T@U) (|mapb#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@3) TyType) (= (type Maps._default.MapUnionPreferA$T@@3) TyType)) (= (type $ly@@269) LayerTypeType)) (= (type |mapa#0@@9|) (MapType BoxType BoxType))) (= (type |mapb#0@@9|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 |mapa#0@@9| |mapb#0@@9|) (and ($Is |mapa#0@@9| (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3)) ($Is |mapb#0@@9| (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3))))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 ($LS $ly@@269) |mapa#0@@9| |mapb#0@@9|) (|Map#Glue| (|lambda#100| Maps._default.MapUnionPreferA$U@@3 (|Map#Domain| |mapa#0@@9|) (|Map#Domain| |mapb#0@@9|)) (|lambda#101| (|Map#Domain| |mapa#0@@9|) (|Map#Elements| |mapa#0@@9|) (|Map#Elements| |mapb#0@@9|)) (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3)))) :qid |unknown.0:0| :skolemid |11836| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 ($LS $ly@@269) |mapa#0@@9| |mapb#0@@9|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@4 T@U) (Maps._default.MapUnionPreferA$T@@4 T@U) ($ly@@270 T@U) (|mapa#0@@10| T@U) (|mapb#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@4) TyType) (= (type Maps._default.MapUnionPreferA$T@@4) TyType)) (= (type $ly@@270) LayerTypeType)) (= (type |mapa#0@@10|) (MapType BoxType BoxType))) (= (type |mapb#0@@10|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 (Lit |mapa#0@@10|) (Lit |mapb#0@@10|)) (and ($Is |mapa#0@@10| (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4)) ($Is |mapb#0@@10| (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4))))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 ($LS $ly@@270) (Lit |mapa#0@@10|) (Lit |mapb#0@@10|)) (|Map#Glue| (|lambda#100| Maps._default.MapUnionPreferA$U@@4 (Lit (|Map#Domain| (Lit |mapa#0@@10|))) (Lit (|Map#Domain| (Lit |mapb#0@@10|)))) (|lambda#101| (|Map#Domain| |mapa#0@@10|) (|Map#Elements| (Lit |mapa#0@@10|)) (|Map#Elements| (Lit |mapb#0@@10|))) (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |11837| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 ($LS $ly@@270) (Lit |mapa#0@@10|) (Lit |mapb#0@@10|))) ))))
(assert (forall ((arg0@@302 T@U) (arg1@@168 T@U) (arg2@@112 T@U) (arg3@@76 T@U) (arg4@@52 T@U) ) (! (= (type (Maps.__default.MapUnionPreferB arg0@@302 arg1@@168 arg2@@112 arg3@@76 arg4@@52)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnionPreferB| :pattern ( (Maps.__default.MapUnionPreferB arg0@@302 arg1@@168 arg2@@112 arg3@@76 arg4@@52)) )))
(assert (forall ((Maps._default.MapUnionPreferB$U T@U) (Maps._default.MapUnionPreferB$T T@U) ($ly@@271 T@U) (|mapa#0@@11| T@U) (|mapb#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferB$U) TyType) (= (type Maps._default.MapUnionPreferB$T) TyType)) (= (type $ly@@271) LayerTypeType)) (= (type |mapa#0@@11|) (MapType BoxType BoxType))) (= (type |mapb#0@@11|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T ($LS $ly@@271) |mapa#0@@11| |mapb#0@@11|) (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T $ly@@271 |mapa#0@@11| |mapb#0@@11|))) :qid |unknown.0:0| :skolemid |11838| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T ($LS $ly@@271) |mapa#0@@11| |mapb#0@@11|)) )))
(assert (forall ((Maps._default.MapUnionPreferB$U@@0 T@U) (Maps._default.MapUnionPreferB$T@@0 T@U) ($ly@@272 T@U) (|mapa#0@@12| T@U) (|mapb#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@0) TyType) (= (type Maps._default.MapUnionPreferB$T@@0) TyType)) (= (type $ly@@272) LayerTypeType)) (= (type |mapa#0@@12|) (MapType BoxType BoxType))) (= (type |mapb#0@@12|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 $ly@@272 |mapa#0@@12| |mapb#0@@12|) (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 $LZ |mapa#0@@12| |mapb#0@@12|))) :qid |unknown.0:0| :skolemid |11839| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 (AsFuelBottom $ly@@272) |mapa#0@@12| |mapb#0@@12|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@1 T@U) (Maps._default.MapUnionPreferB$T@@1 T@U) ($ly@@273 T@U) (|mapa#0@@13| T@U) (|mapb#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@1) TyType) (= (type Maps._default.MapUnionPreferB$T@@1) TyType)) (= (type $ly@@273) LayerTypeType)) (= (type |mapa#0@@13|) (MapType BoxType BoxType))) (= (type |mapb#0@@13|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 |mapa#0@@13| |mapb#0@@13|) (and ($Is |mapa#0@@13| (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1)) ($Is |mapb#0@@13| (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@273 |mapa#0@@13| |mapb#0@@13|)) (|Set#Union| (|Map#Domain| |mapa#0@@13|) (|Map#Domain| |mapb#0@@13|))) (forall ((|k#3@@2| T@U) ) (!  (=> (and (and (= (type |k#3@@2|) BoxType) ($IsBox |k#3@@2| Maps._default.MapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#3@@2|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@273 |mapa#0@@13| |mapb#0@@13|)) |k#3@@2|) (MapType0Select (|Map#Elements| |mapb#0@@13|) |k#3@@2|))) :qid |Mapssdfy.133:20| :skolemid |11840| :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@13|) |k#3@@2|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@273 |mapa#0@@13| |mapb#0@@13|)) |k#3@@2|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#3@@2|)) ))) (forall ((|k#4@@0| T@U) ) (!  (=> (and (and (= (type |k#4@@0|) BoxType) ($IsBox |k#4@@0| Maps._default.MapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@13|) |k#4@@0|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#4@@0|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@273 |mapa#0@@13| |mapb#0@@13|)) |k#4@@0|) (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#4@@0|))) :qid |Mapssdfy.134:20| :skolemid |11841| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#4@@0|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@273 |mapa#0@@13| |mapb#0@@13|)) |k#4@@0|)) ))) (forall ((|k#5@@0| T@U) ) (!  (=> (and (and (= (type |k#5@@0|) BoxType) ($IsBox |k#5@@0| Maps._default.MapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@13|) |k#5@@0|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#5@@0|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@273 |mapa#0@@13| |mapb#0@@13|)) |k#5@@0|) (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#5@@0|))) :qid |Mapssdfy.135:20| :skolemid |11842| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#5@@0|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@273 |mapa#0@@13| |mapb#0@@13|)) |k#5@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#5@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@13|) |k#5@@0|)) ))) ($Is (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@273 |mapa#0@@13| |mapb#0@@13|) (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1)))) :qid |unknown.0:0| :skolemid |11843| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@273 |mapa#0@@13| |mapb#0@@13|)) ))))
(assert (forall ((Maps._default.MapUnionPreferB$U@@2 T@U) (Maps._default.MapUnionPreferB$T@@2 T@U) ($ly@@274 T@U) (|mapa#0@@14| T@U) (|mapb#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@2) TyType) (= (type Maps._default.MapUnionPreferB$T@@2) TyType)) (= (type $ly@@274) LayerTypeType)) (= (type |mapa#0@@14|) (MapType BoxType BoxType))) (= (type |mapb#0@@14|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@14| (TMap Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2)) ($Is |mapb#0@@14| (TMap Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2)))) (and (=> (|Maps.__default.MapUnionPreferB#requires| Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2 $ly@@274 |mapa#0@@14| |mapb#0@@14|) true) (=> true (|Maps.__default.MapUnionPreferB#requires| Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2 $ly@@274 |mapa#0@@14| |mapb#0@@14|)))) :qid |unknown.0:0| :skolemid |11844| :pattern ( (|Maps.__default.MapUnionPreferB#requires| Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2 $ly@@274 |mapa#0@@14| |mapb#0@@14|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@3 T@U) (Maps._default.MapUnionPreferB$T@@3 T@U) ($ly@@275 T@U) (|mapa#0@@15| T@U) (|mapb#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@3) TyType) (= (type Maps._default.MapUnionPreferB$T@@3) TyType)) (= (type $ly@@275) LayerTypeType)) (= (type |mapa#0@@15|) (MapType BoxType BoxType))) (= (type |mapb#0@@15|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 |mapa#0@@15| |mapb#0@@15|) (and ($Is |mapa#0@@15| (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3)) ($Is |mapb#0@@15| (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3))))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 ($LS $ly@@275) |mapa#0@@15| |mapb#0@@15|) (|Map#Glue| (|lambda#100| Maps._default.MapUnionPreferB$U@@3 (|Map#Domain| |mapa#0@@15|) (|Map#Domain| |mapb#0@@15|)) (|lambda#101| (|Map#Domain| |mapb#0@@15|) (|Map#Elements| |mapb#0@@15|) (|Map#Elements| |mapa#0@@15|)) (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3)))) :qid |unknown.0:0| :skolemid |11845| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 ($LS $ly@@275) |mapa#0@@15| |mapb#0@@15|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@4 T@U) (Maps._default.MapUnionPreferB$T@@4 T@U) ($ly@@276 T@U) (|mapa#0@@16| T@U) (|mapb#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@4) TyType) (= (type Maps._default.MapUnionPreferB$T@@4) TyType)) (= (type $ly@@276) LayerTypeType)) (= (type |mapa#0@@16|) (MapType BoxType BoxType))) (= (type |mapb#0@@16|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 (Lit |mapa#0@@16|) (Lit |mapb#0@@16|)) (and ($Is |mapa#0@@16| (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4)) ($Is |mapb#0@@16| (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4))))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 ($LS $ly@@276) (Lit |mapa#0@@16|) (Lit |mapb#0@@16|)) (|Map#Glue| (|lambda#100| Maps._default.MapUnionPreferB$U@@4 (Lit (|Map#Domain| (Lit |mapa#0@@16|))) (Lit (|Map#Domain| (Lit |mapb#0@@16|)))) (|lambda#101| (|Map#Domain| |mapb#0@@16|) (|Map#Elements| (Lit |mapb#0@@16|)) (|Map#Elements| (Lit |mapa#0@@16|))) (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |11846| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 ($LS $ly@@276) (Lit |mapa#0@@16|) (Lit |mapb#0@@16|))) ))))
(assert (forall ((arg0@@303 T@U) (arg1@@169 T@U) (arg2@@113 T@U) (arg3@@77 T@U) (arg4@@53 T@U) ) (! (= (type (Maps.__default.MapUnion arg0@@303 arg1@@169 arg2@@113 arg3@@77 arg4@@53)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnion| :pattern ( (Maps.__default.MapUnion arg0@@303 arg1@@169 arg2@@113 arg3@@77 arg4@@53)) )))
(assert (forall ((Maps._default.MapUnion$U T@U) (Maps._default.MapUnion$T T@U) ($ly@@277 T@U) (|mapa#0@@17| T@U) (|mapb#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnion$U) TyType) (= (type Maps._default.MapUnion$T) TyType)) (= (type $ly@@277) LayerTypeType)) (= (type |mapa#0@@17|) (MapType BoxType BoxType))) (= (type |mapb#0@@17|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T ($LS $ly@@277) |mapa#0@@17| |mapb#0@@17|) (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T $ly@@277 |mapa#0@@17| |mapb#0@@17|))) :qid |unknown.0:0| :skolemid |11847| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T ($LS $ly@@277) |mapa#0@@17| |mapb#0@@17|)) )))
(assert (forall ((Maps._default.MapUnion$U@@0 T@U) (Maps._default.MapUnion$T@@0 T@U) ($ly@@278 T@U) (|mapa#0@@18| T@U) (|mapb#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnion$U@@0) TyType) (= (type Maps._default.MapUnion$T@@0) TyType)) (= (type $ly@@278) LayerTypeType)) (= (type |mapa#0@@18|) (MapType BoxType BoxType))) (= (type |mapb#0@@18|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 $ly@@278 |mapa#0@@18| |mapb#0@@18|) (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 $LZ |mapa#0@@18| |mapb#0@@18|))) :qid |unknown.0:0| :skolemid |11848| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 (AsFuelBottom $ly@@278) |mapa#0@@18| |mapb#0@@18|)) )))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@1 T@U) (Maps._default.MapUnion$T@@1 T@U) ($ly@@279 T@U) (|mapa#0@@19| T@U) (|mapb#0@@19| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@1) TyType) (= (type Maps._default.MapUnion$T@@1) TyType)) (= (type $ly@@279) LayerTypeType)) (= (type |mapa#0@@19|) (MapType BoxType BoxType))) (= (type |mapb#0@@19|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 |mapa#0@@19| |mapb#0@@19|) (and ($Is |mapa#0@@19| (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1)) ($Is |mapb#0@@19| (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@279 |mapa#0@@19| |mapb#0@@19|)) (|Set#Union| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|))) (forall ((|k#3@@3| T@U) ) (!  (=> (and (and (= (type |k#3@@3|) BoxType) ($IsBox |k#3@@3| Maps._default.MapUnion$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@19|) |k#3@@3|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@19|) |k#3@@3|))))) (= (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#3@@3|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@279 |mapa#0@@19| |mapb#0@@19|)) |k#3@@3|))) :qid |Mapssdfy.144:18| :skolemid |11849| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@279 |mapa#0@@19| |mapb#0@@19|)) |k#3@@3|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#3@@3|)) ))) (forall ((|k#4@@1| T@U) ) (!  (=> (and (and (= (type |k#4@@1|) BoxType) ($IsBox |k#4@@1| Maps._default.MapUnion$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@19|) |k#4@@1|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@19|) |k#4@@1|))))) (= (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#4@@1|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@279 |mapa#0@@19| |mapb#0@@19|)) |k#4@@1|))) :qid |Mapssdfy.145:18| :skolemid |11850| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@279 |mapa#0@@19| |mapb#0@@19|)) |k#4@@1|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#4@@1|)) ))) (forall ((|k#5@@1| T@U) ) (!  (=> (and (and (= (type |k#5@@1|) BoxType) ($IsBox |k#5@@1| Maps._default.MapUnion$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@19|) |k#5@@1|)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@19|) |k#5@@1|)))) (or (= (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#5@@1|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@279 |mapa#0@@19| |mapb#0@@19|)) |k#5@@1|)) (= (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#5@@1|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@279 |mapa#0@@19| |mapb#0@@19|)) |k#5@@1|)))) :qid |Mapssdfy.146:18| :skolemid |11851| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#5@@1|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@279 |mapa#0@@19| |mapb#0@@19|)) |k#5@@1|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#5@@1|)) ))) ($Is (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@279 |mapa#0@@19| |mapb#0@@19|) (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1)))) :qid |unknown.0:0| :skolemid |11852| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@279 |mapa#0@@19| |mapb#0@@19|)) ))))
(assert (forall ((Maps._default.MapUnion$U@@2 T@U) (Maps._default.MapUnion$T@@2 T@U) ($ly@@280 T@U) (|mapa#0@@20| T@U) (|mapb#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@2) TyType) (= (type Maps._default.MapUnion$T@@2) TyType)) (= (type $ly@@280) LayerTypeType)) (= (type |mapa#0@@20|) (MapType BoxType BoxType))) (= (type |mapb#0@@20|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@20| (TMap Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2)) ($Is |mapb#0@@20| (TMap Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2)))) (and (=> (|Maps.__default.MapUnion#requires| Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2 $ly@@280 |mapa#0@@20| |mapb#0@@20|) true) (=> true (|Maps.__default.MapUnion#requires| Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2 $ly@@280 |mapa#0@@20| |mapb#0@@20|)))) :qid |unknown.0:0| :skolemid |11853| :pattern ( (|Maps.__default.MapUnion#requires| Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2 $ly@@280 |mapa#0@@20| |mapb#0@@20|)) )))
(assert (= (type StartFuel_Maps._default.MapUnionPreferA) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@3 T@U) (Maps._default.MapUnion$T@@3 T@U) ($ly@@281 T@U) (|mapa#0@@21| T@U) (|mapb#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@3) TyType) (= (type Maps._default.MapUnion$T@@3) TyType)) (= (type $ly@@281) LayerTypeType)) (= (type |mapa#0@@21|) (MapType BoxType BoxType))) (= (type |mapb#0@@21|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 |mapa#0@@21| |mapb#0@@21|) (and ($Is |mapa#0@@21| (TMap Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3)) ($Is |mapb#0@@21| (TMap Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3))))) (and (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 |mapa#0@@21| |mapb#0@@21|) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 ($LS $ly@@281) |mapa#0@@21| |mapb#0@@21|) (Maps.__default.MapUnionPreferA Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 StartFuel_Maps._default.MapUnionPreferA |mapa#0@@21| |mapb#0@@21|)))) :qid |unknown.0:0| :skolemid |11854| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 ($LS $ly@@281) |mapa#0@@21| |mapb#0@@21|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@4 T@U) (Maps._default.MapUnion$T@@4 T@U) ($ly@@282 T@U) (|mapa#0@@22| T@U) (|mapb#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@4) TyType) (= (type Maps._default.MapUnion$T@@4) TyType)) (= (type $ly@@282) LayerTypeType)) (= (type |mapa#0@@22|) (MapType BoxType BoxType))) (= (type |mapb#0@@22|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (and ($Is |mapa#0@@22| (TMap Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4)) ($Is |mapb#0@@22| (TMap Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4))))) (and (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 ($LS $ly@@282) (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (Maps.__default.MapUnionPreferA Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 StartFuel_Maps._default.MapUnionPreferA (Lit |mapa#0@@22|) (Lit |mapb#0@@22|))))) :qid |unknown.0:0| :weight 3 :skolemid |11855| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 ($LS $ly@@282) (Lit |mapa#0@@22|) (Lit |mapb#0@@22|))) ))))
(assert (forall ((arg0@@304 T@U) (arg1@@170 T@U) (arg2@@114 T@U) (arg3@@78 T@U) (arg4@@54 T@U) ) (! (= (type (Maps.__default.IMapUnionPreferA arg0@@304 arg1@@170 arg2@@114 arg3@@78 arg4@@54)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnionPreferA| :pattern ( (Maps.__default.IMapUnionPreferA arg0@@304 arg1@@170 arg2@@114 arg3@@78 arg4@@54)) )))
(assert (forall ((Maps._default.IMapUnionPreferA$U T@U) (Maps._default.IMapUnionPreferA$T T@U) ($ly@@283 T@U) (|mapa#0@@23| T@U) (|mapb#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U) TyType) (= (type Maps._default.IMapUnionPreferA$T) TyType)) (= (type $ly@@283) LayerTypeType)) (= (type |mapa#0@@23|) (IMapType BoxType BoxType))) (= (type |mapb#0@@23|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T ($LS $ly@@283) |mapa#0@@23| |mapb#0@@23|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T $ly@@283 |mapa#0@@23| |mapb#0@@23|))) :qid |unknown.0:0| :skolemid |11856| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T ($LS $ly@@283) |mapa#0@@23| |mapb#0@@23|)) )))
(assert (forall ((Maps._default.IMapUnionPreferA$U@@0 T@U) (Maps._default.IMapUnionPreferA$T@@0 T@U) ($ly@@284 T@U) (|mapa#0@@24| T@U) (|mapb#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@0) TyType) (= (type Maps._default.IMapUnionPreferA$T@@0) TyType)) (= (type $ly@@284) LayerTypeType)) (= (type |mapa#0@@24|) (IMapType BoxType BoxType))) (= (type |mapb#0@@24|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 $ly@@284 |mapa#0@@24| |mapb#0@@24|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 $LZ |mapa#0@@24| |mapb#0@@24|))) :qid |unknown.0:0| :skolemid |11857| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 (AsFuelBottom $ly@@284) |mapa#0@@24| |mapb#0@@24|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@1 T@U) (Maps._default.IMapUnionPreferA$T@@1 T@U) ($ly@@285 T@U) (|mapa#0@@25| T@U) (|mapb#0@@25| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@1) TyType) (= (type Maps._default.IMapUnionPreferA$T@@1) TyType)) (= (type $ly@@285) LayerTypeType)) (= (type |mapa#0@@25|) (IMapType BoxType BoxType))) (= (type |mapb#0@@25|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 |mapa#0@@25| |mapb#0@@25|) (and ($Is |mapa#0@@25| (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1)) ($Is |mapb#0@@25| (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@285 |mapa#0@@25| |mapb#0@@25|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@25|) (|IMap#Domain| |mapb#0@@25|))) (forall ((|k#3@@4| T@U) ) (!  (=> (and (and (= (type |k#3@@4|) BoxType) ($IsBox |k#3@@4| Maps._default.IMapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#3@@4|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@285 |mapa#0@@25| |mapb#0@@25|)) |k#3@@4|) (MapType0Select (|IMap#Elements| |mapa#0@@25|) |k#3@@4|))) :qid |Mapssdfy.153:20| :skolemid |11858| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@25|) |k#3@@4|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@285 |mapa#0@@25| |mapb#0@@25|)) |k#3@@4|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#3@@4|)) ))) (forall ((|k#4@@2| T@U) ) (!  (=> (and (and (= (type |k#4@@2|) BoxType) ($IsBox |k#4@@2| Maps._default.IMapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@25|) |k#4@@2|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#4@@2|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@285 |mapa#0@@25| |mapb#0@@25|)) |k#4@@2|) (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#4@@2|))) :qid |Mapssdfy.154:20| :skolemid |11859| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#4@@2|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@285 |mapa#0@@25| |mapb#0@@25|)) |k#4@@2|)) ))) (forall ((|k#5@@2| T@U) ) (!  (=> (and (and (= (type |k#5@@2|) BoxType) ($IsBox |k#5@@2| Maps._default.IMapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@25|) |k#5@@2|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#5@@2|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@285 |mapa#0@@25| |mapb#0@@25|)) |k#5@@2|) (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#5@@2|))) :qid |Mapssdfy.155:20| :skolemid |11860| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#5@@2|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@285 |mapa#0@@25| |mapb#0@@25|)) |k#5@@2|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#5@@2|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@25|) |k#5@@2|)) ))) ($Is (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@285 |mapa#0@@25| |mapb#0@@25|) (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1)))) :qid |unknown.0:0| :skolemid |11861| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@285 |mapa#0@@25| |mapb#0@@25|)) ))))
(assert (forall ((Maps._default.IMapUnionPreferA$U@@2 T@U) (Maps._default.IMapUnionPreferA$T@@2 T@U) ($ly@@286 T@U) (|mapa#0@@26| T@U) (|mapb#0@@26| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@2) TyType) (= (type Maps._default.IMapUnionPreferA$T@@2) TyType)) (= (type $ly@@286) LayerTypeType)) (= (type |mapa#0@@26|) (IMapType BoxType BoxType))) (= (type |mapb#0@@26|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@26| (TIMap Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2)) ($Is |mapb#0@@26| (TIMap Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2)))) (and (=> (|Maps.__default.IMapUnionPreferA#requires| Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2 $ly@@286 |mapa#0@@26| |mapb#0@@26|) true) (=> true (|Maps.__default.IMapUnionPreferA#requires| Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2 $ly@@286 |mapa#0@@26| |mapb#0@@26|)))) :qid |unknown.0:0| :skolemid |11862| :pattern ( (|Maps.__default.IMapUnionPreferA#requires| Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2 $ly@@286 |mapa#0@@26| |mapb#0@@26|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@3 T@U) (Maps._default.IMapUnionPreferA$T@@3 T@U) ($ly@@287 T@U) (|mapa#0@@27| T@U) (|mapb#0@@27| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@3) TyType) (= (type Maps._default.IMapUnionPreferA$T@@3) TyType)) (= (type $ly@@287) LayerTypeType)) (= (type |mapa#0@@27|) (IMapType BoxType BoxType))) (= (type |mapb#0@@27|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 |mapa#0@@27| |mapb#0@@27|) (and ($Is |mapa#0@@27| (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3)) ($Is |mapb#0@@27| (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3))))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 ($LS $ly@@287) |mapa#0@@27| |mapb#0@@27|) (|IMap#Glue| (|lambda#100| Maps._default.IMapUnionPreferA$U@@3 (|IMap#Domain| |mapa#0@@27|) (|IMap#Domain| |mapb#0@@27|)) (|lambda#101| (|IMap#Domain| |mapa#0@@27|) (|IMap#Elements| |mapa#0@@27|) (|IMap#Elements| |mapb#0@@27|)) (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3)))) :qid |unknown.0:0| :skolemid |11863| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 ($LS $ly@@287) |mapa#0@@27| |mapb#0@@27|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@4 T@U) (Maps._default.IMapUnionPreferA$T@@4 T@U) ($ly@@288 T@U) (|mapa#0@@28| T@U) (|mapb#0@@28| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@4) TyType) (= (type Maps._default.IMapUnionPreferA$T@@4) TyType)) (= (type $ly@@288) LayerTypeType)) (= (type |mapa#0@@28|) (IMapType BoxType BoxType))) (= (type |mapb#0@@28|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 (Lit |mapa#0@@28|) (Lit |mapb#0@@28|)) (and ($Is |mapa#0@@28| (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4)) ($Is |mapb#0@@28| (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4))))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 ($LS $ly@@288) (Lit |mapa#0@@28|) (Lit |mapb#0@@28|)) (|IMap#Glue| (|lambda#100| Maps._default.IMapUnionPreferA$U@@4 (Lit (|IMap#Domain| (Lit |mapa#0@@28|))) (Lit (|IMap#Domain| (Lit |mapb#0@@28|)))) (|lambda#101| (|IMap#Domain| |mapa#0@@28|) (|IMap#Elements| (Lit |mapa#0@@28|)) (|IMap#Elements| (Lit |mapb#0@@28|))) (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |11864| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 ($LS $ly@@288) (Lit |mapa#0@@28|) (Lit |mapb#0@@28|))) ))))
(assert (forall ((arg0@@305 T@U) (arg1@@171 T@U) (arg2@@115 T@U) (arg3@@79 T@U) (arg4@@55 T@U) ) (! (= (type (Maps.__default.IMapUnionPreferB arg0@@305 arg1@@171 arg2@@115 arg3@@79 arg4@@55)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnionPreferB| :pattern ( (Maps.__default.IMapUnionPreferB arg0@@305 arg1@@171 arg2@@115 arg3@@79 arg4@@55)) )))
(assert (forall ((Maps._default.IMapUnionPreferB$U T@U) (Maps._default.IMapUnionPreferB$T T@U) ($ly@@289 T@U) (|mapa#0@@29| T@U) (|mapb#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U) TyType) (= (type Maps._default.IMapUnionPreferB$T) TyType)) (= (type $ly@@289) LayerTypeType)) (= (type |mapa#0@@29|) (IMapType BoxType BoxType))) (= (type |mapb#0@@29|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T ($LS $ly@@289) |mapa#0@@29| |mapb#0@@29|) (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T $ly@@289 |mapa#0@@29| |mapb#0@@29|))) :qid |unknown.0:0| :skolemid |11865| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T ($LS $ly@@289) |mapa#0@@29| |mapb#0@@29|)) )))
(assert (forall ((Maps._default.IMapUnionPreferB$U@@0 T@U) (Maps._default.IMapUnionPreferB$T@@0 T@U) ($ly@@290 T@U) (|mapa#0@@30| T@U) (|mapb#0@@30| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@0) TyType) (= (type Maps._default.IMapUnionPreferB$T@@0) TyType)) (= (type $ly@@290) LayerTypeType)) (= (type |mapa#0@@30|) (IMapType BoxType BoxType))) (= (type |mapb#0@@30|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 $ly@@290 |mapa#0@@30| |mapb#0@@30|) (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 $LZ |mapa#0@@30| |mapb#0@@30|))) :qid |unknown.0:0| :skolemid |11866| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 (AsFuelBottom $ly@@290) |mapa#0@@30| |mapb#0@@30|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@1 T@U) (Maps._default.IMapUnionPreferB$T@@1 T@U) ($ly@@291 T@U) (|mapa#0@@31| T@U) (|mapb#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@1) TyType) (= (type Maps._default.IMapUnionPreferB$T@@1) TyType)) (= (type $ly@@291) LayerTypeType)) (= (type |mapa#0@@31|) (IMapType BoxType BoxType))) (= (type |mapb#0@@31|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 |mapa#0@@31| |mapb#0@@31|) (and ($Is |mapa#0@@31| (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1)) ($Is |mapb#0@@31| (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@291 |mapa#0@@31| |mapb#0@@31|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@31|) (|IMap#Domain| |mapb#0@@31|))) (forall ((|k#3@@5| T@U) ) (!  (=> (and (and (= (type |k#3@@5|) BoxType) ($IsBox |k#3@@5| Maps._default.IMapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#3@@5|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@291 |mapa#0@@31| |mapb#0@@31|)) |k#3@@5|) (MapType0Select (|IMap#Elements| |mapb#0@@31|) |k#3@@5|))) :qid |Mapssdfy.162:20| :skolemid |11867| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@31|) |k#3@@5|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@291 |mapa#0@@31| |mapb#0@@31|)) |k#3@@5|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#3@@5|)) ))) (forall ((|k#4@@3| T@U) ) (!  (=> (and (and (= (type |k#4@@3|) BoxType) ($IsBox |k#4@@3| Maps._default.IMapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@31|) |k#4@@3|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#4@@3|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@291 |mapa#0@@31| |mapb#0@@31|)) |k#4@@3|) (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#4@@3|))) :qid |Mapssdfy.163:20| :skolemid |11868| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#4@@3|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@291 |mapa#0@@31| |mapb#0@@31|)) |k#4@@3|)) ))) (forall ((|k#5@@3| T@U) ) (!  (=> (and (and (= (type |k#5@@3|) BoxType) ($IsBox |k#5@@3| Maps._default.IMapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@31|) |k#5@@3|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#5@@3|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@291 |mapa#0@@31| |mapb#0@@31|)) |k#5@@3|) (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#5@@3|))) :qid |Mapssdfy.164:20| :skolemid |11869| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#5@@3|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@291 |mapa#0@@31| |mapb#0@@31|)) |k#5@@3|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#5@@3|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@31|) |k#5@@3|)) ))) ($Is (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@291 |mapa#0@@31| |mapb#0@@31|) (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1)))) :qid |unknown.0:0| :skolemid |11870| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@291 |mapa#0@@31| |mapb#0@@31|)) ))))
(assert (forall ((Maps._default.IMapUnionPreferB$U@@2 T@U) (Maps._default.IMapUnionPreferB$T@@2 T@U) ($ly@@292 T@U) (|mapa#0@@32| T@U) (|mapb#0@@32| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@2) TyType) (= (type Maps._default.IMapUnionPreferB$T@@2) TyType)) (= (type $ly@@292) LayerTypeType)) (= (type |mapa#0@@32|) (IMapType BoxType BoxType))) (= (type |mapb#0@@32|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@32| (TIMap Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2)) ($Is |mapb#0@@32| (TIMap Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2)))) (and (=> (|Maps.__default.IMapUnionPreferB#requires| Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2 $ly@@292 |mapa#0@@32| |mapb#0@@32|) true) (=> true (|Maps.__default.IMapUnionPreferB#requires| Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2 $ly@@292 |mapa#0@@32| |mapb#0@@32|)))) :qid |unknown.0:0| :skolemid |11871| :pattern ( (|Maps.__default.IMapUnionPreferB#requires| Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2 $ly@@292 |mapa#0@@32| |mapb#0@@32|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@3 T@U) (Maps._default.IMapUnionPreferB$T@@3 T@U) ($ly@@293 T@U) (|mapa#0@@33| T@U) (|mapb#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@3) TyType) (= (type Maps._default.IMapUnionPreferB$T@@3) TyType)) (= (type $ly@@293) LayerTypeType)) (= (type |mapa#0@@33|) (IMapType BoxType BoxType))) (= (type |mapb#0@@33|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 |mapa#0@@33| |mapb#0@@33|) (and ($Is |mapa#0@@33| (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3)) ($Is |mapb#0@@33| (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3))))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 ($LS $ly@@293) |mapa#0@@33| |mapb#0@@33|) (|IMap#Glue| (|lambda#100| Maps._default.IMapUnionPreferB$U@@3 (|IMap#Domain| |mapa#0@@33|) (|IMap#Domain| |mapb#0@@33|)) (|lambda#101| (|IMap#Domain| |mapb#0@@33|) (|IMap#Elements| |mapb#0@@33|) (|IMap#Elements| |mapa#0@@33|)) (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3)))) :qid |unknown.0:0| :skolemid |11872| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 ($LS $ly@@293) |mapa#0@@33| |mapb#0@@33|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@4 T@U) (Maps._default.IMapUnionPreferB$T@@4 T@U) ($ly@@294 T@U) (|mapa#0@@34| T@U) (|mapb#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@4) TyType) (= (type Maps._default.IMapUnionPreferB$T@@4) TyType)) (= (type $ly@@294) LayerTypeType)) (= (type |mapa#0@@34|) (IMapType BoxType BoxType))) (= (type |mapb#0@@34|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 (Lit |mapa#0@@34|) (Lit |mapb#0@@34|)) (and ($Is |mapa#0@@34| (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4)) ($Is |mapb#0@@34| (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4))))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 ($LS $ly@@294) (Lit |mapa#0@@34|) (Lit |mapb#0@@34|)) (|IMap#Glue| (|lambda#100| Maps._default.IMapUnionPreferB$U@@4 (Lit (|IMap#Domain| (Lit |mapa#0@@34|))) (Lit (|IMap#Domain| (Lit |mapb#0@@34|)))) (|lambda#101| (|IMap#Domain| |mapb#0@@34|) (|IMap#Elements| (Lit |mapb#0@@34|)) (|IMap#Elements| (Lit |mapa#0@@34|))) (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |11873| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 ($LS $ly@@294) (Lit |mapa#0@@34|) (Lit |mapb#0@@34|))) ))))
(assert (forall ((arg0@@306 T@U) (arg1@@172 T@U) (arg2@@116 T@U) (arg3@@80 T@U) (arg4@@56 T@U) ) (! (= (type (Maps.__default.IMapUnion arg0@@306 arg1@@172 arg2@@116 arg3@@80 arg4@@56)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnion| :pattern ( (Maps.__default.IMapUnion arg0@@306 arg1@@172 arg2@@116 arg3@@80 arg4@@56)) )))
(assert (forall ((Maps._default.IMapUnion$U T@U) (Maps._default.IMapUnion$T T@U) ($ly@@295 T@U) (|mapa#0@@35| T@U) (|mapb#0@@35| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnion$U) TyType) (= (type Maps._default.IMapUnion$T) TyType)) (= (type $ly@@295) LayerTypeType)) (= (type |mapa#0@@35|) (IMapType BoxType BoxType))) (= (type |mapb#0@@35|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T ($LS $ly@@295) |mapa#0@@35| |mapb#0@@35|) (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T $ly@@295 |mapa#0@@35| |mapb#0@@35|))) :qid |unknown.0:0| :skolemid |11874| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T ($LS $ly@@295) |mapa#0@@35| |mapb#0@@35|)) )))
(assert (forall ((Maps._default.IMapUnion$U@@0 T@U) (Maps._default.IMapUnion$T@@0 T@U) ($ly@@296 T@U) (|mapa#0@@36| T@U) (|mapb#0@@36| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnion$U@@0) TyType) (= (type Maps._default.IMapUnion$T@@0) TyType)) (= (type $ly@@296) LayerTypeType)) (= (type |mapa#0@@36|) (IMapType BoxType BoxType))) (= (type |mapb#0@@36|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 $ly@@296 |mapa#0@@36| |mapb#0@@36|) (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 $LZ |mapa#0@@36| |mapb#0@@36|))) :qid |unknown.0:0| :skolemid |11875| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 (AsFuelBottom $ly@@296) |mapa#0@@36| |mapb#0@@36|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@1 T@U) (Maps._default.IMapUnion$T@@1 T@U) ($ly@@297 T@U) (|mapa#0@@37| T@U) (|mapb#0@@37| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@1) TyType) (= (type Maps._default.IMapUnion$T@@1) TyType)) (= (type $ly@@297) LayerTypeType)) (= (type |mapa#0@@37|) (IMapType BoxType BoxType))) (= (type |mapb#0@@37|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 |mapa#0@@37| |mapb#0@@37|) (and ($Is |mapa#0@@37| (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1)) ($Is |mapb#0@@37| (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@297 |mapa#0@@37| |mapb#0@@37|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|))) (forall ((|k#3@@6| T@U) ) (!  (=> (and (and (= (type |k#3@@6|) BoxType) ($IsBox |k#3@@6| Maps._default.IMapUnion$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@37|) |k#3@@6|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@37|) |k#3@@6|))))) (= (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#3@@6|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@297 |mapa#0@@37| |mapb#0@@37|)) |k#3@@6|))) :qid |Mapssdfy.173:18| :skolemid |11876| :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@297 |mapa#0@@37| |mapb#0@@37|)) |k#3@@6|)) :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#3@@6|)) ))) (forall ((|k#4@@4| T@U) ) (!  (=> (and (and (= (type |k#4@@4|) BoxType) ($IsBox |k#4@@4| Maps._default.IMapUnion$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@37|) |k#4@@4|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@37|) |k#4@@4|))))) (= (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#4@@4|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@297 |mapa#0@@37| |mapb#0@@37|)) |k#4@@4|))) :qid |Mapssdfy.174:18| :skolemid |11877| :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@297 |mapa#0@@37| |mapb#0@@37|)) |k#4@@4|)) :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#4@@4|)) ))) (forall ((|k#5@@4| T@U) ) (!  (=> (and (and (= (type |k#5@@4|) BoxType) ($IsBox |k#5@@4| Maps._default.IMapUnion$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@37|) |k#5@@4|)) (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@37|) |k#5@@4|)))) (or (= (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#5@@4|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@297 |mapa#0@@37| |mapb#0@@37|)) |k#5@@4|)) (= (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#5@@4|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@297 |mapa#0@@37| |mapb#0@@37|)) |k#5@@4|)))) :qid |Mapssdfy.175:18| :skolemid |11878| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#5@@4|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@297 |mapa#0@@37| |mapb#0@@37|)) |k#5@@4|)) :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#5@@4|)) ))) ($Is (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@297 |mapa#0@@37| |mapb#0@@37|) (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1)))) :qid |unknown.0:0| :skolemid |11879| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@297 |mapa#0@@37| |mapb#0@@37|)) ))))
(assert (forall ((Maps._default.IMapUnion$U@@2 T@U) (Maps._default.IMapUnion$T@@2 T@U) ($ly@@298 T@U) (|mapa#0@@38| T@U) (|mapb#0@@38| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@2) TyType) (= (type Maps._default.IMapUnion$T@@2) TyType)) (= (type $ly@@298) LayerTypeType)) (= (type |mapa#0@@38|) (IMapType BoxType BoxType))) (= (type |mapb#0@@38|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@38| (TIMap Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2)) ($Is |mapb#0@@38| (TIMap Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2)))) (and (=> (|Maps.__default.IMapUnion#requires| Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2 $ly@@298 |mapa#0@@38| |mapb#0@@38|) true) (=> true (|Maps.__default.IMapUnion#requires| Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2 $ly@@298 |mapa#0@@38| |mapb#0@@38|)))) :qid |unknown.0:0| :skolemid |11880| :pattern ( (|Maps.__default.IMapUnion#requires| Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2 $ly@@298 |mapa#0@@38| |mapb#0@@38|)) )))
(assert (= (type StartFuel_Maps._default.IMapUnionPreferA) LayerTypeType))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@3 T@U) (Maps._default.IMapUnion$T@@3 T@U) ($ly@@299 T@U) (|mapa#0@@39| T@U) (|mapb#0@@39| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@3) TyType) (= (type Maps._default.IMapUnion$T@@3) TyType)) (= (type $ly@@299) LayerTypeType)) (= (type |mapa#0@@39|) (IMapType BoxType BoxType))) (= (type |mapb#0@@39|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 |mapa#0@@39| |mapb#0@@39|) (and ($Is |mapa#0@@39| (TIMap Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3)) ($Is |mapb#0@@39| (TIMap Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3))))) (and (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 |mapa#0@@39| |mapb#0@@39|) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 ($LS $ly@@299) |mapa#0@@39| |mapb#0@@39|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 StartFuel_Maps._default.IMapUnionPreferA |mapa#0@@39| |mapb#0@@39|)))) :qid |unknown.0:0| :skolemid |11881| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 ($LS $ly@@299) |mapa#0@@39| |mapb#0@@39|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@4 T@U) (Maps._default.IMapUnion$T@@4 T@U) ($ly@@300 T@U) (|mapa#0@@40| T@U) (|mapb#0@@40| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@4) TyType) (= (type Maps._default.IMapUnion$T@@4) TyType)) (= (type $ly@@300) LayerTypeType)) (= (type |mapa#0@@40|) (IMapType BoxType BoxType))) (= (type |mapb#0@@40|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (and ($Is |mapa#0@@40| (TIMap Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4)) ($Is |mapb#0@@40| (TIMap Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4))))) (and (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 ($LS $ly@@300) (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 StartFuel_Maps._default.IMapUnionPreferA (Lit |mapa#0@@40|) (Lit |mapb#0@@40|))))) :qid |unknown.0:0| :weight 3 :skolemid |11882| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 ($LS $ly@@300) (Lit |mapa#0@@40|) (Lit |mapb#0@@40|))) ))))
(assert (forall ((arg0@@307 T@U) (arg1@@173 T@U) (arg2@@117 T@U) (arg3@@81 T@U) (arg4@@57 T@U) (arg5@@22 T@U) ) (! (= (type (Maps.__default.MapDisjointUnion3 arg0@@307 arg1@@173 arg2@@117 arg3@@81 arg4@@57 arg5@@22)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapDisjointUnion3| :pattern ( (Maps.__default.MapDisjointUnion3 arg0@@307 arg1@@173 arg2@@117 arg3@@81 arg4@@57 arg5@@22)) )))
(assert (forall ((Maps._default.MapDisjointUnion3$U T@U) (Maps._default.MapDisjointUnion3$T T@U) ($ly@@301 T@U) (|mapa#0@@41| T@U) (|mapb#0@@41| T@U) (|mapc#0| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U) TyType) (= (type Maps._default.MapDisjointUnion3$T) TyType)) (= (type $ly@@301) LayerTypeType)) (= (type |mapa#0@@41|) (MapType BoxType BoxType))) (= (type |mapb#0@@41|) (MapType BoxType BoxType))) (= (type |mapc#0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T ($LS $ly@@301) |mapa#0@@41| |mapb#0@@41| |mapc#0|) (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T $ly@@301 |mapa#0@@41| |mapb#0@@41| |mapc#0|))) :qid |unknown.0:0| :skolemid |11883| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T ($LS $ly@@301) |mapa#0@@41| |mapb#0@@41| |mapc#0|)) )))
(assert (forall ((Maps._default.MapDisjointUnion3$U@@0 T@U) (Maps._default.MapDisjointUnion3$T@@0 T@U) ($ly@@302 T@U) (|mapa#0@@42| T@U) (|mapb#0@@42| T@U) (|mapc#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@0) TyType) (= (type Maps._default.MapDisjointUnion3$T@@0) TyType)) (= (type $ly@@302) LayerTypeType)) (= (type |mapa#0@@42|) (MapType BoxType BoxType))) (= (type |mapb#0@@42|) (MapType BoxType BoxType))) (= (type |mapc#0@@0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 $ly@@302 |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|) (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 $LZ |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|))) :qid |unknown.0:0| :skolemid |11884| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 (AsFuelBottom $ly@@302) |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|)) )))
(assert (= (type StartFuel_Maps._default.MapDisjointUnion) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@1 T@U) (Maps._default.MapDisjointUnion3$T@@1 T@U) ($ly@@303 T@U) (|mapa#0@@43| T@U) (|mapb#0@@43| T@U) (|mapc#0@@1| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@1) TyType) (= (type Maps._default.MapDisjointUnion3$T@@1) TyType)) (= (type $ly@@303) LayerTypeType)) (= (type |mapa#0@@43|) (MapType BoxType BoxType))) (= (type |mapb#0@@43|) (MapType BoxType BoxType))) (= (type |mapc#0@@1|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (and (and (and ($Is |mapa#0@@43| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1)) ($Is |mapb#0@@43| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1))) ($Is |mapc#0@@1| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1))) (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Map#Domain| |mapc#0@@1|)))))) (and (and (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@303 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) (|Set#Union| (|Set#Union| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Map#Domain| |mapc#0@@1|))) (=> (or (or (not (|Set#Equal| (|Map#Domain| |mapa#0@@43|) (|Set#Empty| BoxType))) (not (|Set#Equal| (|Map#Domain| |mapb#0@@43|) (|Set#Empty| BoxType)))) (not (|Set#Equal| (|Map#Domain| |mapc#0@@1|) (|Set#Empty| BoxType)))) (not (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@303 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) (|Set#Empty| BoxType))))) (forall ((|k#3@@7| T@U) ) (!  (=> (and (and (= (type |k#3@@7|) BoxType) ($IsBox |k#3@@7| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@43|) |k#3@@7|))) (= (MapType0Select (|Map#Elements| |mapa#0@@43|) |k#3@@7|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@303 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#3@@7|))) :qid |Mapssdfy.185:18| :skolemid |11885| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@303 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#3@@7|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@43|) |k#3@@7|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@43|) |k#3@@7|)) ))) (forall ((|k#4@@5| T@U) ) (!  (=> (and (and (= (type |k#4@@5|) BoxType) ($IsBox |k#4@@5| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@43|) |k#4@@5|))) (= (MapType0Select (|Map#Elements| |mapb#0@@43|) |k#4@@5|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@303 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#4@@5|))) :qid |Mapssdfy.186:18| :skolemid |11886| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@303 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#4@@5|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@43|) |k#4@@5|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@43|) |k#4@@5|)) ))) (forall ((|k#5@@5| T@U) ) (!  (=> (and (and (= (type |k#5@@5|) BoxType) ($IsBox |k#5@@5| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapc#0@@1|) |k#5@@5|))) (= (MapType0Select (|Map#Elements| |mapc#0@@1|) |k#5@@5|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@303 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#5@@5|))) :qid |Mapssdfy.187:18| :skolemid |11887| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@303 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#5@@5|)) :pattern ( (MapType0Select (|Map#Elements| |mapc#0@@1|) |k#5@@5|)) :pattern ( (MapType0Select (|Map#Domain| |mapc#0@@1|) |k#5@@5|)) ))) (and (|Map#Equal| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@303 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapb#0@@43| |mapc#0@@1|))) (|Map#Equal| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapb#0@@43| |mapc#0@@1|)) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| |mapb#0@@43|) |mapc#0@@1|)))) ($Is (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@303 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1)))) :qid |unknown.0:0| :skolemid |11888| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@303 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) ))))
(assert (forall ((Maps._default.MapDisjointUnion3$U@@2 T@U) (Maps._default.MapDisjointUnion3$T@@2 T@U) ($ly@@304 T@U) (|mapa#0@@44| T@U) (|mapb#0@@44| T@U) (|mapc#0@@2| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@2) TyType) (= (type Maps._default.MapDisjointUnion3$T@@2) TyType)) (= (type $ly@@304) LayerTypeType)) (= (type |mapa#0@@44|) (MapType BoxType BoxType))) (= (type |mapb#0@@44|) (MapType BoxType BoxType))) (= (type |mapc#0@@2|) (MapType BoxType BoxType))) (and (and ($Is |mapa#0@@44| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2)) ($Is |mapb#0@@44| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2))) ($Is |mapc#0@@2| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2)))) (and (=> (|Maps.__default.MapDisjointUnion3#requires| Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2 $ly@@304 |mapa#0@@44| |mapb#0@@44| |mapc#0@@2|) (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Map#Domain| |mapc#0@@2|)))) (=> (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Map#Domain| |mapc#0@@2|))) (|Maps.__default.MapDisjointUnion3#requires| Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2 $ly@@304 |mapa#0@@44| |mapb#0@@44| |mapc#0@@2|)))) :qid |unknown.0:0| :skolemid |11889| :pattern ( (|Maps.__default.MapDisjointUnion3#requires| Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2 $ly@@304 |mapa#0@@44| |mapb#0@@44| |mapc#0@@2|)) )))
(assert  (and (forall ((arg0@@308 T@U) (arg1@@174 T@U) (arg2@@118 T@U) (arg3@@82 T@U) ) (! (= (type (|lambda#120| arg0@@308 arg1@@174 arg2@@118 arg3@@82)) (MapType0Type BoxType boolType)) :qid |funType:lambda#120| :pattern ( (|lambda#120| arg0@@308 arg1@@174 arg2@@118 arg3@@82)) )) (forall ((arg0@@309 T@U) (arg1@@175 T@U) (arg2@@119 T@U) (arg3@@83 T@U) (arg4@@58 T@U) ) (! (= (type (|lambda#121| arg0@@309 arg1@@175 arg2@@119 arg3@@83 arg4@@58)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#121| :pattern ( (|lambda#121| arg0@@309 arg1@@175 arg2@@119 arg3@@83 arg4@@58)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@3 T@U) (Maps._default.MapDisjointUnion3$T@@3 T@U) ($ly@@305 T@U) (|mapa#0@@45| T@U) (|mapb#0@@45| T@U) (|mapc#0@@3| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@3) TyType) (= (type Maps._default.MapDisjointUnion3$T@@3) TyType)) (= (type $ly@@305) LayerTypeType)) (= (type |mapa#0@@45|) (MapType BoxType BoxType))) (= (type |mapb#0@@45|) (MapType BoxType BoxType))) (= (type |mapc#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|) (and (and (and ($Is |mapa#0@@45| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3)) ($Is |mapb#0@@45| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3))) ($Is |mapc#0@@3| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3))) (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|)) (|Map#Domain| |mapc#0@@3|)))))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 ($LS $ly@@305) |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|) (|Map#Glue| (|lambda#120| Maps._default.MapDisjointUnion3$U@@3 (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|) (|Map#Domain| |mapc#0@@3|)) (|lambda#121| (|Map#Domain| |mapa#0@@45|) (|Map#Elements| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|) (|Map#Elements| |mapb#0@@45|) (|Map#Elements| |mapc#0@@3|)) (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3)))) :qid |unknown.0:0| :skolemid |11890| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 ($LS $ly@@305) |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@4 T@U) (Maps._default.MapDisjointUnion3$T@@4 T@U) ($ly@@306 T@U) (|mapa#0@@46| T@U) (|mapb#0@@46| T@U) (|mapc#0@@4| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@4) TyType) (= (type Maps._default.MapDisjointUnion3$T@@4) TyType)) (= (type $ly@@306) LayerTypeType)) (= (type |mapa#0@@46|) (MapType BoxType BoxType))) (= (type |mapb#0@@46|) (MapType BoxType BoxType))) (= (type |mapc#0@@4|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|)) (and (and (and ($Is |mapa#0@@46| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4)) ($Is |mapb#0@@46| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4))) ($Is |mapc#0@@4| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4))) (and (and (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|))) (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|)))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|))) (|Map#Domain| (Lit |mapc#0@@4|))))))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 ($LS $ly@@306) (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|)) (|Map#Glue| (|lambda#120| Maps._default.MapDisjointUnion3$U@@4 (Lit (|Map#Domain| (Lit |mapa#0@@46|))) (Lit (|Map#Domain| (Lit |mapb#0@@46|))) (Lit (|Map#Domain| (Lit |mapc#0@@4|)))) (|lambda#121| (|Map#Domain| |mapa#0@@46|) (|Map#Elements| (Lit |mapa#0@@46|)) (|Map#Domain| |mapb#0@@46|) (|Map#Elements| (Lit |mapb#0@@46|)) (|Map#Elements| (Lit |mapc#0@@4|))) (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |11891| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 ($LS $ly@@306) (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|))) ))))
(assert (forall ((arg0@@310 T@U) (arg1@@176 T@U) (arg2@@120 T@U) ) (! (= (type (Maps.__default.MapToImap arg0@@310 arg1@@176 arg2@@120)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.MapToImap| :pattern ( (Maps.__default.MapToImap arg0@@310 arg1@@176 arg2@@120)) )))
(assert  (=> true (forall ((Maps._default.MapToImap$K T@U) (Maps._default.MapToImap$V T@U) (|m#0@@68| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K) TyType) (= (type Maps._default.MapToImap$V) TyType)) (= (type |m#0@@68|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@68|) ($Is |m#0@@68| (TMap Maps._default.MapToImap$K Maps._default.MapToImap$V)))) ($Is (Maps.__default.MapToImap Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@68|) (TIMap Maps._default.MapToImap$K Maps._default.MapToImap$V))) :qid |unknown.0:0| :skolemid |11892| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@68|)) ))))
(assert (forall ((Maps._default.MapToImap$K@@0 T@U) (Maps._default.MapToImap$V@@0 T@U) (|m#0@@69| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@0) TyType) (= (type Maps._default.MapToImap$V@@0) TyType)) (= (type |m#0@@69|) (MapType BoxType BoxType))) ($Is |m#0@@69| (TMap Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0))) (and (=> (|Maps.__default.MapToImap#requires| Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0 |m#0@@69|) true) (=> true (|Maps.__default.MapToImap#requires| Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0 |m#0@@69|)))) :qid |unknown.0:0| :skolemid |11893| :pattern ( (|Maps.__default.MapToImap#requires| Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0 |m#0@@69|)) )))
(assert (forall ((arg0@@311 T@U) (arg1@@177 T@U) ) (! (= (type (|lambda#124| arg0@@311 arg1@@177)) (MapType0Type BoxType boolType)) :qid |funType:lambda#124| :pattern ( (|lambda#124| arg0@@311 arg1@@177)) )))
(assert  (=> true (forall ((Maps._default.MapToImap$K@@1 T@U) (Maps._default.MapToImap$V@@1 T@U) (|m#0@@70| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@1) TyType) (= (type Maps._default.MapToImap$V@@1) TyType)) (= (type |m#0@@70|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@70|) ($Is |m#0@@70| (TMap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1)))) (= (Maps.__default.MapToImap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@70|) (|IMap#Glue| (|lambda#124| Maps._default.MapToImap$K@@1 (|Map#Domain| |m#0@@70|)) (|lambda#69| (|Map#Elements| |m#0@@70|)) (TIMap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1)))) :qid |unknown.0:0| :skolemid |11894| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@70|)) ))))
(assert  (=> true (forall ((Maps._default.MapToImap$K@@2 T@U) (Maps._default.MapToImap$V@@2 T@U) (|m#0@@71| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@2) TyType) (= (type Maps._default.MapToImap$V@@2) TyType)) (= (type |m#0@@71|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@71|)) ($Is |m#0@@71| (TMap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2)))) (= (Maps.__default.MapToImap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@71|)) (|IMap#Glue| (|lambda#124| Maps._default.MapToImap$K@@2 (|Map#Domain| |m#0@@71|)) (|lambda#69| (|Map#Elements| (Lit |m#0@@71|))) (TIMap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |11895| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@71|))) ))))
(assert (forall ((arg0@@312 T@U) (arg1@@178 T@U) (arg2@@121 T@U) (arg3@@84 T@U) ) (! (= (type (Maps.__default.MapLookupOption arg0@@312 arg1@@178 arg2@@121 arg3@@84)) DatatypeTypeType) :qid |funType:Maps.__default.MapLookupOption| :pattern ( (Maps.__default.MapLookupOption arg0@@312 arg1@@178 arg2@@121 arg3@@84)) )))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K T@U) (Maps._default.MapLookupOption$V T@U) (|m#0@@72| T@U) (|key#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K) TyType) (= (type Maps._default.MapLookupOption$V) TyType)) (= (type |m#0@@72|) (MapType BoxType BoxType))) (= (type |key#0|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@72| |key#0|) (and ($Is |m#0@@72| (TMap Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V)) ($IsBox |key#0| Maps._default.MapLookupOption$K)))) ($Is (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@72| |key#0|) (Tclass.Options.Option Maps._default.MapLookupOption$V))) :qid |unknown.0:0| :skolemid |11896| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@72| |key#0|)) ))))
(assert (forall ((Maps._default.MapLookupOption$K@@0 T@U) (Maps._default.MapLookupOption$V@@0 T@U) (|m#0@@73| T@U) (|key#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@0) TyType) (= (type Maps._default.MapLookupOption$V@@0) TyType)) (= (type |m#0@@73|) (MapType BoxType BoxType))) (= (type |key#0@@0|) BoxType)) (and ($Is |m#0@@73| (TMap Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0)) ($IsBox |key#0@@0| Maps._default.MapLookupOption$K@@0))) (and (=> (|Maps.__default.MapLookupOption#requires| Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0 |m#0@@73| |key#0@@0|) true) (=> true (|Maps.__default.MapLookupOption#requires| Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0 |m#0@@73| |key#0@@0|)))) :qid |unknown.0:0| :skolemid |11897| :pattern ( (|Maps.__default.MapLookupOption#requires| Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0 |m#0@@73| |key#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@1 T@U) (Maps._default.MapLookupOption$V@@1 T@U) (|m#0@@74| T@U) (|key#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@1) TyType) (= (type Maps._default.MapLookupOption$V@@1) TyType)) (= (type |m#0@@74|) (MapType BoxType BoxType))) (= (type |key#0@@1|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@74| |key#0@@1|) (and ($Is |m#0@@74| (TMap Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1)) ($IsBox |key#0@@1| Maps._default.MapLookupOption$K@@1)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@74| |key#0@@1|) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@74|) |key#0@@1|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| |m#0@@74|) |key#0@@1|)) |#Options.Option.None|))) :qid |unknown.0:0| :skolemid |11898| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@74| |key#0@@1|)) ))))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@2 T@U) (Maps._default.MapLookupOption$V@@2 T@U) (|m#0@@75| T@U) (|key#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@2) TyType) (= (type Maps._default.MapLookupOption$V@@2) TyType)) (= (type |m#0@@75|) (MapType BoxType BoxType))) (= (type |key#0@@2|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@75|) |key#0@@2|) (and ($Is |m#0@@75| (TMap Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2)) ($IsBox |key#0@@2| Maps._default.MapLookupOption$K@@2)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@75|) |key#0@@2|) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@75|) |key#0@@2|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (Lit |m#0@@75|)) |key#0@@2|)) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |11899| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@75|) |key#0@@2|)) ))))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@3 T@U) (Maps._default.MapLookupOption$V@@3 T@U) (|m#0@@76| T@U) (|key#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@3) TyType) (= (type Maps._default.MapLookupOption$V@@3) TyType)) (= (type |m#0@@76|) (MapType BoxType BoxType))) (= (type |key#0@@3|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@76|) (Lit |key#0@@3|)) (and ($Is |m#0@@76| (TMap Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3)) ($IsBox |key#0@@3| Maps._default.MapLookupOption$K@@3)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@76|) (Lit |key#0@@3|)) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@76|) |key#0@@3|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (Lit |m#0@@76|)) (Lit |key#0@@3|))) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |11900| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@76|) (Lit |key#0@@3|))) ))))
(assert (forall ((arg0@@313 T@U) (arg1@@179 T@U) (arg2@@122 T@U) (arg3@@85 T@U) ) (! (= (type (Maps.__default.ImapLookupOption arg0@@313 arg1@@179 arg2@@122 arg3@@85)) DatatypeTypeType) :qid |funType:Maps.__default.ImapLookupOption| :pattern ( (Maps.__default.ImapLookupOption arg0@@313 arg1@@179 arg2@@122 arg3@@85)) )))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K T@U) (Maps._default.ImapLookupOption$V T@U) (|m#0@@77| T@U) (|key#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K) TyType) (= (type Maps._default.ImapLookupOption$V) TyType)) (= (type |m#0@@77|) (IMapType BoxType BoxType))) (= (type |key#0@@4|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@77| |key#0@@4|) (and ($Is |m#0@@77| (TIMap Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V)) ($IsBox |key#0@@4| Maps._default.ImapLookupOption$K)))) ($Is (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@77| |key#0@@4|) (Tclass.Options.Option Maps._default.ImapLookupOption$V))) :qid |unknown.0:0| :skolemid |11901| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@77| |key#0@@4|)) ))))
(assert (forall ((Maps._default.ImapLookupOption$K@@0 T@U) (Maps._default.ImapLookupOption$V@@0 T@U) (|m#0@@78| T@U) (|key#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@0) TyType) (= (type Maps._default.ImapLookupOption$V@@0) TyType)) (= (type |m#0@@78|) (IMapType BoxType BoxType))) (= (type |key#0@@5|) BoxType)) (and ($Is |m#0@@78| (TIMap Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0)) ($IsBox |key#0@@5| Maps._default.ImapLookupOption$K@@0))) (and (=> (|Maps.__default.ImapLookupOption#requires| Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0 |m#0@@78| |key#0@@5|) true) (=> true (|Maps.__default.ImapLookupOption#requires| Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0 |m#0@@78| |key#0@@5|)))) :qid |unknown.0:0| :skolemid |11902| :pattern ( (|Maps.__default.ImapLookupOption#requires| Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0 |m#0@@78| |key#0@@5|)) )))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K@@1 T@U) (Maps._default.ImapLookupOption$V@@1 T@U) (|m#0@@79| T@U) (|key#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@1) TyType) (= (type Maps._default.ImapLookupOption$V@@1) TyType)) (= (type |m#0@@79|) (IMapType BoxType BoxType))) (= (type |key#0@@6|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@79| |key#0@@6|) (and ($Is |m#0@@79| (TIMap Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1)) ($IsBox |key#0@@6| Maps._default.ImapLookupOption$K@@1)))) (= (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@79| |key#0@@6|) (ite (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@79|) |key#0@@6|)) (|#Options.Option.Some| (MapType0Select (|IMap#Elements| |m#0@@79|) |key#0@@6|)) |#Options.Option.None|))) :qid |unknown.0:0| :skolemid |11903| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@79| |key#0@@6|)) ))))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K@@2 T@U) (Maps._default.ImapLookupOption$V@@2 T@U) (|m#0@@80| T@U) (|key#0@@7| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@2) TyType) (= (type Maps._default.ImapLookupOption$V@@2) TyType)) (= (type |m#0@@80|) (IMapType BoxType BoxType))) (= (type |key#0@@7|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@80|) (Lit |key#0@@7|)) (and ($Is |m#0@@80| (TIMap Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2)) ($IsBox |key#0@@7| Maps._default.ImapLookupOption$K@@2)))) (= (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@80|) (Lit |key#0@@7|)) (ite (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@80|) |key#0@@7|)) (|#Options.Option.Some| (MapType0Select (|IMap#Elements| (Lit |m#0@@80|)) (Lit |key#0@@7|))) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |11904| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@80|) (Lit |key#0@@7|))) ))))
(assert (= (type Tclass.SeqComparison.__default) TyType))
(assert (= (Tag Tclass.SeqComparison.__default) Tagclass.SeqComparison.__default))
(assert (forall ((bx@@101 T@U) ) (!  (=> (and (= (type bx@@101) BoxType) ($IsBox bx@@101 Tclass.SeqComparison.__default)) (and (= ($Box ($Unbox refType bx@@101)) bx@@101) ($Is ($Unbox refType bx@@101) Tclass.SeqComparison.__default))) :qid |unknown.0:0| :skolemid |11905| :pattern ( ($IsBox bx@@101 Tclass.SeqComparison.__default)) )))
(assert (forall (($o@@48 T@U) ) (!  (=> (= (type $o@@48) refType) (and (=> ($Is $o@@48 Tclass.SeqComparison.__default) (or (= $o@@48 null) (= (dtype $o@@48) Tclass.SeqComparison.__default))) (=> (or (= $o@@48 null) (= (dtype $o@@48) Tclass.SeqComparison.__default)) ($Is $o@@48 Tclass.SeqComparison.__default)))) :qid |unknown.0:0| :skolemid |11906| :pattern ( ($Is $o@@48 Tclass.SeqComparison.__default)) )))
(assert (forall (($o@@49 T@U) ($h@@63 T@U) ) (!  (=> (and (= (type $o@@49) refType) (= (type $h@@63) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@49 Tclass.SeqComparison.__default $h@@63) (or (= $o@@49 null) (U_2_bool (MapType1Select (MapType0Select $h@@63 $o@@49) alloc)))) (=> (or (= $o@@49 null) (U_2_bool (MapType1Select (MapType0Select $h@@63 $o@@49) alloc))) ($IsAlloc $o@@49 Tclass.SeqComparison.__default $h@@63)))) :qid |unknown.0:0| :skolemid |11907| :pattern ( ($IsAlloc $o@@49 Tclass.SeqComparison.__default $h@@63)) )))
(assert (forall (($ly@@307 T@U) (|a#0@@65| T@U) (|b#0@@39| T@U) ) (!  (=> (and (and (= (type $ly@@307) LayerTypeType) (= (type |a#0@@65|) (SeqType BoxType))) (= (type |b#0@@39|) (SeqType BoxType))) (and (=> (SeqComparison.__default.lte ($LS $ly@@307) |a#0@@65| |b#0@@39|) (SeqComparison.__default.lte $ly@@307 |a#0@@65| |b#0@@39|)) (=> (SeqComparison.__default.lte $ly@@307 |a#0@@65| |b#0@@39|) (SeqComparison.__default.lte ($LS $ly@@307) |a#0@@65| |b#0@@39|)))) :qid |SeqCompa.9:23| :skolemid |11908| :pattern ( (SeqComparison.__default.lte ($LS $ly@@307) |a#0@@65| |b#0@@39|)) )))
(assert (forall (($ly@@308 T@U) (|a#0@@66| T@U) (|b#0@@40| T@U) ) (!  (=> (and (and (= (type $ly@@308) LayerTypeType) (= (type |a#0@@66|) (SeqType BoxType))) (= (type |b#0@@40|) (SeqType BoxType))) (and (=> (SeqComparison.__default.lte $ly@@308 |a#0@@66| |b#0@@40|) (SeqComparison.__default.lte $LZ |a#0@@66| |b#0@@40|)) (=> (SeqComparison.__default.lte $LZ |a#0@@66| |b#0@@40|) (SeqComparison.__default.lte $ly@@308 |a#0@@66| |b#0@@40|)))) :qid |SeqCompa.9:23| :skolemid |11909| :pattern ( (SeqComparison.__default.lte (AsFuelBottom $ly@@308) |a#0@@66| |b#0@@40|)) )))
(assert  (=> true (forall (($ly@@309 T@U) (|a#0@@67| T@U) (|b#0@@41| T@U) ) (!  (=> (and (and (and (= (type $ly@@309) LayerTypeType) (= (type |a#0@@67|) (SeqType BoxType))) (= (type |b#0@@41|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| |a#0@@67| |b#0@@41|) (and ($Is |a#0@@67| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@41| (TSeq Tclass.NativeTypes.byte))))) true) :qid |SeqCompa.9:23| :skolemid |11910| :pattern ( (SeqComparison.__default.lte $ly@@309 |a#0@@67| |b#0@@41|)) ))))
(assert (forall (($ly@@310 T@U) (|a#0@@68| T@U) (|b#0@@42| T@U) ) (!  (=> (and (and (and (= (type $ly@@310) LayerTypeType) (= (type |a#0@@68|) (SeqType BoxType))) (= (type |b#0@@42|) (SeqType BoxType))) (and ($Is |a#0@@68| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@42| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|SeqComparison.__default.lte#requires| $ly@@310 |a#0@@68| |b#0@@42|) true) (=> true (|SeqComparison.__default.lte#requires| $ly@@310 |a#0@@68| |b#0@@42|)))) :qid |SeqCompa.9:23| :skolemid |11911| :pattern ( (|SeqComparison.__default.lte#requires| $ly@@310 |a#0@@68| |b#0@@42|)) )))
(assert  (=> true (forall (($ly@@311 T@U) (|a#0@@69| T@U) (|b#0@@43| T@U) ) (!  (=> (and (and (and (= (type $ly@@311) LayerTypeType) (= (type |a#0@@69|) (SeqType BoxType))) (= (type |b#0@@43|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| |a#0@@69| |b#0@@43|) (and ($Is |a#0@@69| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@43| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| |a#0@@69|) (LitInt 0))) (=> (not (= (|Seq#Length| |b#0@@43|) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |b#0@@43| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@69| (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |a#0@@69| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@43| (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (|Seq#Drop| |a#0@@69| (LitInt 1)) (|Seq#Drop| |b#0@@43| (LitInt 1))))))) (and (=> (SeqComparison.__default.lte ($LS $ly@@311) |a#0@@69| |b#0@@43|) (ite (= (|Seq#Length| |a#0@@69|) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@43|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| |a#0@@69| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@43| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@43| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@69| (LitInt 0))))) false (SeqComparison.__default.lte $ly@@311 (|Seq#Drop| |a#0@@69| (LitInt 1)) (|Seq#Drop| |b#0@@43| (LitInt 1)))))))) (=> (ite (= (|Seq#Length| |a#0@@69|) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@43|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| |a#0@@69| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@43| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@43| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@69| (LitInt 0))))) false (SeqComparison.__default.lte $ly@@311 (|Seq#Drop| |a#0@@69| (LitInt 1)) (|Seq#Drop| |b#0@@43| (LitInt 1))))))) (SeqComparison.__default.lte ($LS $ly@@311) |a#0@@69| |b#0@@43|))))) :qid |SeqCompa.9:23| :skolemid |11912| :pattern ( (SeqComparison.__default.lte ($LS $ly@@311) |a#0@@69| |b#0@@43|)) ))))
(assert  (=> true (forall (($ly@@312 T@U) (|a#0@@70| T@U) (|b#0@@44| T@U) ) (!  (=> (and (and (and (= (type $ly@@312) LayerTypeType) (= (type |a#0@@70|) (SeqType BoxType))) (= (type |b#0@@44|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| (Lit |a#0@@70|) |b#0@@44|) (and ($Is |a#0@@70| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@44| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@70|)) (LitInt 0))) (=> (not (= (|Seq#Length| |b#0@@44|) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |b#0@@44| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@70|) (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@70|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@44| (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (Lit (|Seq#Drop| (Lit |a#0@@70|) (LitInt 1))) (|Seq#Drop| |b#0@@44| (LitInt 1))))))) (and (=> (SeqComparison.__default.lte ($LS $ly@@312) (Lit |a#0@@70|) |b#0@@44|) (ite (= (|Seq#Length| (Lit |a#0@@70|)) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@44|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@70|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@44| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@44| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@70|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@312) (Lit (|Seq#Drop| (Lit |a#0@@70|) (LitInt 1))) (|Seq#Drop| |b#0@@44| (LitInt 1)))))))) (=> (ite (= (|Seq#Length| (Lit |a#0@@70|)) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@44|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@70|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@44| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@44| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@70|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@312) (Lit (|Seq#Drop| (Lit |a#0@@70|) (LitInt 1))) (|Seq#Drop| |b#0@@44| (LitInt 1))))))) (SeqComparison.__default.lte ($LS $ly@@312) (Lit |a#0@@70|) |b#0@@44|))))) :qid |SeqCompa.9:23| :weight 3 :skolemid |11913| :pattern ( (SeqComparison.__default.lte ($LS $ly@@312) (Lit |a#0@@70|) |b#0@@44|)) ))))
(assert  (=> true (forall (($ly@@313 T@U) (|a#0@@71| T@U) (|b#0@@45| T@U) ) (!  (=> (and (and (and (= (type $ly@@313) LayerTypeType) (= (type |a#0@@71|) (SeqType BoxType))) (= (type |b#0@@45|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| (Lit |a#0@@71|) (Lit |b#0@@45|)) (and ($Is |a#0@@71| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@45| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@71|)) (LitInt 0))) (=> (not (= (|Seq#Length| (Lit |b#0@@45|)) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@45|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@71|) (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@71|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@45|) (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (Lit (|Seq#Drop| (Lit |a#0@@71|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@45|) (LitInt 1)))))))) (and (=> (SeqComparison.__default.lte ($LS $ly@@313) (Lit |a#0@@71|) (Lit |b#0@@45|)) (ite (= (|Seq#Length| (Lit |a#0@@71|)) (LitInt 0)) true (ite (= (|Seq#Length| (Lit |b#0@@45|)) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@71|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@45|) (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@45|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@71|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@313) (Lit (|Seq#Drop| (Lit |a#0@@71|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@45|) (LitInt 1))))))))) (=> (ite (= (|Seq#Length| (Lit |a#0@@71|)) (LitInt 0)) true (ite (= (|Seq#Length| (Lit |b#0@@45|)) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@71|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@45|) (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@45|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@71|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@313) (Lit (|Seq#Drop| (Lit |a#0@@71|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@45|) (LitInt 1)))))))) (SeqComparison.__default.lte ($LS $ly@@313) (Lit |a#0@@71|) (Lit |b#0@@45|)))))) :qid |SeqCompa.9:23| :weight 3 :skolemid |11914| :pattern ( (SeqComparison.__default.lte ($LS $ly@@313) (Lit |a#0@@71|) (Lit |b#0@@45|))) ))))
(assert  (=> true (forall ((|a#0@@72| T@U) (|b#0@@46| T@U) ) (!  (=> (and (and (= (type |a#0@@72|) (SeqType BoxType)) (= (type |b#0@@46|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| |a#0@@72| |b#0@@46|) (and ($Is |a#0@@72| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@46| (TSeq Tclass.NativeTypes.byte))))) true) :qid |SeqCompa.25:16| :skolemid |11915| :pattern ( (SeqComparison.__default.lt |a#0@@72| |b#0@@46|)) ))))
(assert (forall ((|a#0@@73| T@U) (|b#0@@47| T@U) ) (!  (=> (and (and (= (type |a#0@@73|) (SeqType BoxType)) (= (type |b#0@@47|) (SeqType BoxType))) (and ($Is |a#0@@73| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@47| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|SeqComparison.__default.lt#requires| |a#0@@73| |b#0@@47|) true) (=> true (|SeqComparison.__default.lt#requires| |a#0@@73| |b#0@@47|)))) :qid |SeqCompa.25:16| :skolemid |11916| :pattern ( (|SeqComparison.__default.lt#requires| |a#0@@73| |b#0@@47|)) )))
(assert (= (type StartFuel_SeqComparison._default.lte) LayerTypeType))
(assert  (=> true (forall ((|a#0@@74| T@U) (|b#0@@48| T@U) ) (!  (=> (and (and (= (type |a#0@@74|) (SeqType BoxType)) (= (type |b#0@@48|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| |a#0@@74| |b#0@@48|) (and ($Is |a#0@@74| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@48| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| |a#0@@74| |b#0@@48|) (and (=> (SeqComparison.__default.lt |a#0@@74| |b#0@@48|) (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@74| |b#0@@48|) (not (|Seq#Equal| |a#0@@74| |b#0@@48|)))) (=> (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@74| |b#0@@48|) (not (|Seq#Equal| |a#0@@74| |b#0@@48|))) (SeqComparison.__default.lt |a#0@@74| |b#0@@48|))))) :qid |SeqCompa.25:16| :skolemid |11917| :pattern ( (SeqComparison.__default.lt |a#0@@74| |b#0@@48|)) ))))
(assert  (=> true (forall ((|a#0@@75| T@U) (|b#0@@49| T@U) ) (!  (=> (and (and (= (type |a#0@@75|) (SeqType BoxType)) (= (type |b#0@@49|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| (Lit |a#0@@75|) (Lit |b#0@@49|)) (and ($Is |a#0@@75| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@49| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| (Lit |a#0@@75|) (Lit |b#0@@49|)) (and (=> (SeqComparison.__default.lt (Lit |a#0@@75|) (Lit |b#0@@49|)) (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@75|) (Lit |b#0@@49|)) (not (|Seq#Equal| |a#0@@75| |b#0@@49|)))) (=> (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@75|) (Lit |b#0@@49|)) (not (|Seq#Equal| |a#0@@75| |b#0@@49|))) (SeqComparison.__default.lt (Lit |a#0@@75|) (Lit |b#0@@49|)))))) :qid |SeqCompa.25:16| :weight 3 :skolemid |11918| :pattern ( (SeqComparison.__default.lt (Lit |a#0@@75|) (Lit |b#0@@49|))) ))))
(assert (= (type Tclass.NativeArrays.__default) TyType))
(assert (= (Tag Tclass.NativeArrays.__default) Tagclass.NativeArrays.__default))
(assert (forall ((bx@@102 T@U) ) (!  (=> (and (= (type bx@@102) BoxType) ($IsBox bx@@102 Tclass.NativeArrays.__default)) (and (= ($Box ($Unbox refType bx@@102)) bx@@102) ($Is ($Unbox refType bx@@102) Tclass.NativeArrays.__default))) :qid |unknown.0:0| :skolemid |11919| :pattern ( ($IsBox bx@@102 Tclass.NativeArrays.__default)) )))
(assert (forall (($o@@50 T@U) ) (!  (=> (= (type $o@@50) refType) (and (=> ($Is $o@@50 Tclass.NativeArrays.__default) (or (= $o@@50 null) (= (dtype $o@@50) Tclass.NativeArrays.__default))) (=> (or (= $o@@50 null) (= (dtype $o@@50) Tclass.NativeArrays.__default)) ($Is $o@@50 Tclass.NativeArrays.__default)))) :qid |unknown.0:0| :skolemid |11920| :pattern ( ($Is $o@@50 Tclass.NativeArrays.__default)) )))
(assert (forall (($o@@51 T@U) ($h@@64 T@U) ) (!  (=> (and (= (type $o@@51) refType) (= (type $h@@64) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@51 Tclass.NativeArrays.__default $h@@64) (or (= $o@@51 null) (U_2_bool (MapType1Select (MapType0Select $h@@64 $o@@51) alloc)))) (=> (or (= $o@@51 null) (U_2_bool (MapType1Select (MapType0Select $h@@64 $o@@51) alloc))) ($IsAlloc $o@@51 Tclass.NativeArrays.__default $h@@64)))) :qid |unknown.0:0| :skolemid |11921| :pattern ( ($IsAlloc $o@@51 Tclass.NativeArrays.__default $h@@64)) )))
(assert (= (type Tclass.Byte__Order.__default) TyType))
(assert (= (Tag Tclass.Byte__Order.__default) Tagclass.Byte__Order.__default))
(assert (forall ((bx@@103 T@U) ) (!  (=> (and (= (type bx@@103) BoxType) ($IsBox bx@@103 Tclass.Byte__Order.__default)) (and (= ($Box ($Unbox refType bx@@103)) bx@@103) ($Is ($Unbox refType bx@@103) Tclass.Byte__Order.__default))) :qid |unknown.0:0| :skolemid |11927| :pattern ( ($IsBox bx@@103 Tclass.Byte__Order.__default)) )))
(assert (forall (($o@@52 T@U) ) (!  (=> (= (type $o@@52) refType) (and (=> ($Is $o@@52 Tclass.Byte__Order.__default) (or (= $o@@52 null) (= (dtype $o@@52) Tclass.Byte__Order.__default))) (=> (or (= $o@@52 null) (= (dtype $o@@52) Tclass.Byte__Order.__default)) ($Is $o@@52 Tclass.Byte__Order.__default)))) :qid |unknown.0:0| :skolemid |11928| :pattern ( ($Is $o@@52 Tclass.Byte__Order.__default)) )))
(assert (forall (($o@@53 T@U) ($h@@65 T@U) ) (!  (=> (and (= (type $o@@53) refType) (= (type $h@@65) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@53 Tclass.Byte__Order.__default $h@@65) (or (= $o@@53 null) (U_2_bool (MapType1Select (MapType0Select $h@@65 $o@@53) alloc)))) (=> (or (= $o@@53 null) (U_2_bool (MapType1Select (MapType0Select $h@@65 $o@@53) alloc))) ($IsAlloc $o@@53 Tclass.Byte__Order.__default $h@@65)))) :qid |unknown.0:0| :skolemid |11929| :pattern ( ($IsAlloc $o@@53 Tclass.Byte__Order.__default $h@@65)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) Byte__Order.__default.SomeElement) (< Byte__Order.__default.SomeElement 256)))))
(assert  (=> |Byte__Order.__default.SomeElement#requires| true))
(assert  (=> true |Byte__Order.__default.SomeElement#requires|))
(assert  (=> true (=> true (= Byte__Order.__default.SomeElement (LitInt 0)))))
(assert  (=> true (=> true (= Byte__Order.__default.SomeElement (LitInt 0)))))
(assert (forall (($ly@@314 T@U) (|a#0@@76| Int) (|b#0@@50| Int) ) (!  (=> (= (type $ly@@314) LayerTypeType) (and (=> (Byte__Order.__default.lte ($LS $ly@@314) |a#0@@76| |b#0@@50|) (Byte__Order.__default.lte $ly@@314 |a#0@@76| |b#0@@50|)) (=> (Byte__Order.__default.lte $ly@@314 |a#0@@76| |b#0@@50|) (Byte__Order.__default.lte ($LS $ly@@314) |a#0@@76| |b#0@@50|)))) :qid |totalord.926:30| :skolemid |11930| :pattern ( (Byte__Order.__default.lte ($LS $ly@@314) |a#0@@76| |b#0@@50|)) )))
(assert (forall (($ly@@315 T@U) (|a#0@@77| Int) (|b#0@@51| Int) ) (!  (=> (= (type $ly@@315) LayerTypeType) (and (=> (Byte__Order.__default.lte $ly@@315 |a#0@@77| |b#0@@51|) (Byte__Order.__default.lte $LZ |a#0@@77| |b#0@@51|)) (=> (Byte__Order.__default.lte $LZ |a#0@@77| |b#0@@51|) (Byte__Order.__default.lte $ly@@315 |a#0@@77| |b#0@@51|)))) :qid |totalord.926:30| :skolemid |11931| :pattern ( (Byte__Order.__default.lte (AsFuelBottom $ly@@315) |a#0@@77| |b#0@@51|)) )))
(assert (= (type StartFuel_Byte_Order._default.ltedef) LayerTypeType))
(assert  (=> true (forall (($ly@@316 T@U) (|a#0@@78| Int) (|b#0@@52| Int) ) (!  (=> (and (= (type $ly@@316) LayerTypeType) (or (|Byte__Order.__default.lte#canCall| |a#0@@78| |b#0@@52|) (and (and (<= (LitInt 0) |a#0@@78|) (< |a#0@@78| 256)) (and (<= (LitInt 0) |b#0@@52|) (< |b#0@@52| 256))))) (and (and (and (and (and (and (and (=> (Byte__Order.__default.lte $ly@@316 |a#0@@78| |b#0@@52|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@78| |b#0@@52|)) (=> (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@78| |b#0@@52|) (Byte__Order.__default.lte $ly@@316 |a#0@@78| |b#0@@52|))) (or (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@78| |b#0@@52|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#0@@52| |a#0@@78|))) (forall ((|a#3@@0| Int) (|b#3@@0| Int) (|c#2| Int) ) (!  (=> (and (and (and (<= (LitInt 0) |a#3@@0|) (< |a#3@@0| 256)) (and (<= (LitInt 0) |b#3@@0|) (< |b#3@@0| 256))) (and (<= (LitInt 0) |c#2|) (< |c#2| 256))) (=> (and (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#3@@0| |b#3@@0|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#3@@0| |c#2|)) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#3@@0| |c#2|))) :qid |totalord.20:18| :skolemid |11932| :pattern ( (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#3@@0| |c#2|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#3@@0| |c#2|)) :pattern ( (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#3@@0| |c#2|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#3@@0| |b#3@@0|)) ))) (and (=> (Byte__Order.__default.lte $ly@@316 |a#0@@78| |b#0@@52|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@78| |b#0@@52|)) (=> (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@78| |b#0@@52|) (Byte__Order.__default.lte $ly@@316 |a#0@@78| |b#0@@52|)))) (or (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@78| |b#0@@52|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#0@@52| |a#0@@78|))) (=> (and (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@78| |b#0@@52|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#0@@52| |a#0@@78|)) (= |a#0@@78| |b#0@@52|))) (forall ((|a#4| Int) (|b#4| Int) (|c#3| Int) ) (!  (=> (and (and (and (<= (LitInt 0) |a#4|) (< |a#4| 256)) (and (<= (LitInt 0) |b#4|) (< |b#4| 256))) (and (<= (LitInt 0) |c#3|) (< |c#3| 256))) (=> (and (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#4| |b#4|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#4| |c#3|)) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#4| |c#3|))) :qid |totalord.188:18| :skolemid |11933| :pattern ( (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#4| |c#3|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#4| |c#3|)) :pattern ( (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#4| |c#3|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#4| |b#4|)) )))) :qid |totalord.926:30| :skolemid |11934| :pattern ( (Byte__Order.__default.lte $ly@@316 |a#0@@78| |b#0@@52|)) ))))
(assert (forall (($ly@@317 T@U) (|a#0@@79| Int) (|b#0@@53| Int) ) (!  (=> (= (type $ly@@317) LayerTypeType) (=> (and (and (<= (LitInt 0) |a#0@@79|) (< |a#0@@79| 256)) (and (<= (LitInt 0) |b#0@@53|) (< |b#0@@53| 256))) (and (=> (|Byte__Order.__default.lte#requires| $ly@@317 |a#0@@79| |b#0@@53|) true) (=> true (|Byte__Order.__default.lte#requires| $ly@@317 |a#0@@79| |b#0@@53|))))) :qid |totalord.926:30| :skolemid |11935| :pattern ( (|Byte__Order.__default.lte#requires| $ly@@317 |a#0@@79| |b#0@@53|)) )))
(assert  (and (= (type MoreFuel_Byte_Order._default.ltedef2) LayerTypeType) (= (type StartFuelAssert_Byte_Order._default.ltedef) LayerTypeType)))
(assert  (=> true (forall (($ly@@318 T@U) (|a#0@@80| Int) (|b#0@@54| Int) ) (!  (=> (and (= (type $ly@@318) LayerTypeType) (or (|Byte__Order.__default.lte#canCall| |a#0@@80| |b#0@@54|) (and (and (<= (LitInt 0) |a#0@@80|) (< |a#0@@80| 256)) (and (<= (LitInt 0) |b#0@@54|) (< |b#0@@54| 256))))) (and (and (and (= StartFuel_Byte_Order._default.ltedef ($LS MoreFuel_Byte_Order._default.ltedef2)) (= StartFuelAssert_Byte_Order._default.ltedef ($LS ($LS MoreFuel_Byte_Order._default.ltedef2)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.ltedef2) MoreFuel_Byte_Order._default.ltedef2)) (and (=> (Byte__Order.__default.lte ($LS $ly@@318) |a#0@@80| |b#0@@54|) (<= |a#0@@80| |b#0@@54|)) (=> (<= |a#0@@80| |b#0@@54|) (Byte__Order.__default.lte ($LS $ly@@318) |a#0@@80| |b#0@@54|))))) :qid |totalord.926:30| :skolemid |11936| :pattern ( (Byte__Order.__default.lte ($LS $ly@@318) |a#0@@80| |b#0@@54|)) ))))
(assert (= (type MoreFuel_Byte_Order._default.ltedef3) LayerTypeType))
(assert  (=> true (forall (($ly@@319 T@U) (|a#0@@81| Int) (|b#0@@55| Int) ) (!  (=> (and (= (type $ly@@319) LayerTypeType) (or (|Byte__Order.__default.lte#canCall| (LitInt |a#0@@81|) (LitInt |b#0@@55|)) (and (and (<= (LitInt 0) |a#0@@81|) (< |a#0@@81| 256)) (and (<= (LitInt 0) |b#0@@55|) (< |b#0@@55| 256))))) (and (and (and (= StartFuel_Byte_Order._default.ltedef ($LS MoreFuel_Byte_Order._default.ltedef3)) (= StartFuelAssert_Byte_Order._default.ltedef ($LS ($LS MoreFuel_Byte_Order._default.ltedef3)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.ltedef3) MoreFuel_Byte_Order._default.ltedef3)) (and (=> (Byte__Order.__default.lte ($LS $ly@@319) (LitInt |a#0@@81|) (LitInt |b#0@@55|)) (<= (LitInt |a#0@@81|) (LitInt |b#0@@55|))) (=> (<= (LitInt |a#0@@81|) (LitInt |b#0@@55|)) (Byte__Order.__default.lte ($LS $ly@@319) (LitInt |a#0@@81|) (LitInt |b#0@@55|)))))) :qid |totalord.926:30| :weight 3 :skolemid |11937| :pattern ( (Byte__Order.__default.lte ($LS $ly@@319) (LitInt |a#0@@81|) (LitInt |b#0@@55|))) ))))
(assert (forall (($ly@@320 T@U) (|a#0@@82| Int) (|b#0@@56| Int) ) (!  (=> (= (type $ly@@320) LayerTypeType) (and (=> (Byte__Order.__default.ltedef ($LS $ly@@320) |a#0@@82| |b#0@@56|) (Byte__Order.__default.ltedef $ly@@320 |a#0@@82| |b#0@@56|)) (=> (Byte__Order.__default.ltedef $ly@@320 |a#0@@82| |b#0@@56|) (Byte__Order.__default.ltedef ($LS $ly@@320) |a#0@@82| |b#0@@56|)))) :qid |totalord.931:30| :skolemid |11938| :pattern ( (Byte__Order.__default.ltedef ($LS $ly@@320) |a#0@@82| |b#0@@56|)) )))
(assert (forall (($ly@@321 T@U) (|a#0@@83| Int) (|b#0@@57| Int) ) (!  (=> (= (type $ly@@321) LayerTypeType) (and (=> (Byte__Order.__default.ltedef $ly@@321 |a#0@@83| |b#0@@57|) (Byte__Order.__default.ltedef $LZ |a#0@@83| |b#0@@57|)) (=> (Byte__Order.__default.ltedef $LZ |a#0@@83| |b#0@@57|) (Byte__Order.__default.ltedef $ly@@321 |a#0@@83| |b#0@@57|)))) :qid |totalord.931:30| :skolemid |11939| :pattern ( (Byte__Order.__default.ltedef (AsFuelBottom $ly@@321) |a#0@@83| |b#0@@57|)) )))
(assert  (=> true (forall (($ly@@322 T@U) (|a#0@@84| Int) (|b#0@@58| Int) ) (!  (=> (and (= (type $ly@@322) LayerTypeType) (or (|Byte__Order.__default.ltedef#canCall| |a#0@@84| |b#0@@58|) (and (and (<= (LitInt 0) |a#0@@84|) (< |a#0@@84| 256)) (and (<= (LitInt 0) |b#0@@58|) (< |b#0@@58| 256))))) true) :qid |totalord.931:30| :skolemid |11940| :pattern ( (Byte__Order.__default.ltedef $ly@@322 |a#0@@84| |b#0@@58|)) ))))
(assert (forall (($ly@@323 T@U) (|a#0@@85| Int) (|b#0@@59| Int) ) (!  (=> (= (type $ly@@323) LayerTypeType) (=> (and (and (<= (LitInt 0) |a#0@@85|) (< |a#0@@85| 256)) (and (<= (LitInt 0) |b#0@@59|) (< |b#0@@59| 256))) (and (=> (|Byte__Order.__default.ltedef#requires| $ly@@323 |a#0@@85| |b#0@@59|) true) (=> true (|Byte__Order.__default.ltedef#requires| $ly@@323 |a#0@@85| |b#0@@59|))))) :qid |totalord.931:30| :skolemid |11941| :pattern ( (|Byte__Order.__default.ltedef#requires| $ly@@323 |a#0@@85| |b#0@@59|)) )))
(assert  (=> true (forall (($ly@@324 T@U) (|a#0@@86| Int) (|b#0@@60| Int) ) (!  (=> (and (= (type $ly@@324) LayerTypeType) (or (|Byte__Order.__default.ltedef#canCall| |a#0@@86| |b#0@@60|) (and (and (<= (LitInt 0) |a#0@@86|) (< |a#0@@86| 256)) (and (<= (LitInt 0) |b#0@@60|) (< |b#0@@60| 256))))) (and (=> (Byte__Order.__default.ltedef ($LS $ly@@324) |a#0@@86| |b#0@@60|) (<= |a#0@@86| |b#0@@60|)) (=> (<= |a#0@@86| |b#0@@60|) (Byte__Order.__default.ltedef ($LS $ly@@324) |a#0@@86| |b#0@@60|)))) :qid |totalord.931:30| :skolemid |11942| :pattern ( (Byte__Order.__default.ltedef ($LS $ly@@324) |a#0@@86| |b#0@@60|)) ))))
(assert  (=> true (forall (($ly@@325 T@U) (|a#0@@87| Int) (|b#0@@61| Int) ) (!  (=> (and (= (type $ly@@325) LayerTypeType) (or (|Byte__Order.__default.ltedef#canCall| (LitInt |a#0@@87|) (LitInt |b#0@@61|)) (and (and (<= (LitInt 0) |a#0@@87|) (< |a#0@@87| 256)) (and (<= (LitInt 0) |b#0@@61|) (< |b#0@@61| 256))))) (and (=> (Byte__Order.__default.ltedef ($LS $ly@@325) (LitInt |a#0@@87|) (LitInt |b#0@@61|)) (<= (LitInt |a#0@@87|) (LitInt |b#0@@61|))) (=> (<= (LitInt |a#0@@87|) (LitInt |b#0@@61|)) (Byte__Order.__default.ltedef ($LS $ly@@325) (LitInt |a#0@@87|) (LitInt |b#0@@61|))))) :qid |totalord.931:30| :weight 3 :skolemid |11943| :pattern ( (Byte__Order.__default.ltedef ($LS $ly@@325) (LitInt |a#0@@87|) (LitInt |b#0@@61|))) ))))
(assert (forall (($ly@@326 T@U) (|run#0@@68| T@U) (|needle#0@@13| Int) ) (!  (=> (and (= (type $ly@@326) LayerTypeType) (= (type |run#0@@68|) (SeqType BoxType))) (= (Byte__Order.__default.LargestLte ($LS $ly@@326) |run#0@@68| |needle#0@@13|) (Byte__Order.__default.LargestLte $ly@@326 |run#0@@68| |needle#0@@13|))) :qid |totalord.253:12| :skolemid |11944| :pattern ( (Byte__Order.__default.LargestLte ($LS $ly@@326) |run#0@@68| |needle#0@@13|)) )))
(assert (forall (($ly@@327 T@U) (|run#0@@69| T@U) (|needle#0@@14| Int) ) (!  (=> (and (= (type $ly@@327) LayerTypeType) (= (type |run#0@@69|) (SeqType BoxType))) (= (Byte__Order.__default.LargestLte $ly@@327 |run#0@@69| |needle#0@@14|) (Byte__Order.__default.LargestLte $LZ |run#0@@69| |needle#0@@14|))) :qid |totalord.253:12| :skolemid |11945| :pattern ( (Byte__Order.__default.LargestLte (AsFuelBottom $ly@@327) |run#0@@69| |needle#0@@14|)) )))
(assert  (and (= (type StartFuel_Byte_Order._default.IsSorted) LayerTypeType) (= (type StartFuel_Byte_Order._default.lte) LayerTypeType)))
(assert  (=> true (forall (($ly@@328 T@U) (|run#0@@70| T@U) (|needle#0@@15| Int) ) (!  (=> (and (and (= (type $ly@@328) LayerTypeType) (= (type |run#0@@70|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLte#canCall| |run#0@@70| |needle#0@@15|) (and (and ($Is |run#0@@70| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@15|) (< |needle#0@@15| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@70|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Byte__Order.__default.LargestLte $ly@@328 |run#0@@70| |needle#0@@15|)) (< (Byte__Order.__default.LargestLte $ly@@328 |run#0@@70| |needle#0@@15|) (|Seq#Length| |run#0@@70|))) (forall ((|i#2@@11| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@11|) (<= |i#2@@11| (Byte__Order.__default.LargestLte $ly@@328 |run#0@@70| |needle#0@@15|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@70| |i#2@@11|))) |needle#0@@15|))) :qid |totalord.256:20| :skolemid |11946| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@70| |i#2@@11|))) ))) (forall ((|i#3@@13| Int) ) (!  (=> true (=> (and (< (Byte__Order.__default.LargestLte $ly@@328 |run#0@@70| |needle#0@@15|) |i#3@@13|) (< |i#3@@13| (|Seq#Length| |run#0@@70|))) (Byte__Order.__default.lt |needle#0@@15| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@70| |i#3@@13|)))))) :qid |totalord.257:20| :skolemid |11947| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@70| |i#3@@13|))) ))) (=> (|Seq#Contains| |run#0@@70| ($Box (int_2_U |needle#0@@15|))) (and (<= (LitInt 0) (Byte__Order.__default.LargestLte $ly@@328 |run#0@@70| |needle#0@@15|)) (= (U_2_int ($Unbox intType (|Seq#Index| |run#0@@70| (Byte__Order.__default.LargestLte $ly@@328 |run#0@@70| |needle#0@@15|)))) |needle#0@@15|))))) :qid |totalord.253:12| :skolemid |11948| :pattern ( (Byte__Order.__default.LargestLte $ly@@328 |run#0@@70| |needle#0@@15|)) ))))
(assert (forall (($ly@@329 T@U) (|run#0@@71| T@U) (|needle#0@@16| Int) ) (!  (=> (and (and (= (type $ly@@329) LayerTypeType) (= (type |run#0@@71|) (SeqType BoxType))) (and ($Is |run#0@@71| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@16|) (< |needle#0@@16| 256)))) (and (=> (|Byte__Order.__default.LargestLte#requires| $ly@@329 |run#0@@71| |needle#0@@16|) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@71|)) (=> (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@71|) (|Byte__Order.__default.LargestLte#requires| $ly@@329 |run#0@@71| |needle#0@@16|)))) :qid |totalord.253:12| :skolemid |11949| :pattern ( (|Byte__Order.__default.LargestLte#requires| $ly@@329 |run#0@@71| |needle#0@@16|)) )))
(assert  (and (= (type MoreFuel_Byte_Order._default.IsSorted8) LayerTypeType) (= (type StartFuelAssert_Byte_Order._default.IsSorted) LayerTypeType)))
(assert  (=> true (forall (($ly@@330 T@U) (|run#0@@72| T@U) (|needle#0@@17| Int) ) (!  (=> (and (and (= (type $ly@@330) LayerTypeType) (= (type |run#0@@72|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLte#canCall| |run#0@@72| |needle#0@@17|) (and (and ($Is |run#0@@72| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@17|) (< |needle#0@@17| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@72|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@72|) (LitInt 0))) (|Byte__Order.__default.lt#canCall| |needle#0@@17| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@72| (LitInt 0)))))) (=> (not (or (= (|Seq#Length| |run#0@@72|) (LitInt 0)) (Byte__Order.__default.lt |needle#0@@17| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@72| (LitInt 0))))))) (|Byte__Order.__default.LargestLte#canCall| (|Seq#Drop| |run#0@@72| (LitInt 1)) |needle#0@@17|))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted8)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted8)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted8) MoreFuel_Byte_Order._default.IsSorted8)) (= (Byte__Order.__default.LargestLte ($LS $ly@@330) |run#0@@72| |needle#0@@17|) (ite  (or (= (|Seq#Length| |run#0@@72|) (LitInt 0)) (Byte__Order.__default.lt |needle#0@@17| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@72| (LitInt 0)))))) (- 0 1) (+ 1 (Byte__Order.__default.LargestLte $ly@@330 (|Seq#Drop| |run#0@@72| (LitInt 1)) |needle#0@@17|))))))) :qid |totalord.253:12| :skolemid |11950| :pattern ( (Byte__Order.__default.LargestLte ($LS $ly@@330) |run#0@@72| |needle#0@@17|)) ))))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted9) LayerTypeType))
(assert  (=> true (forall (($ly@@331 T@U) (|run#0@@73| T@U) (|needle#0@@18| Int) ) (!  (=> (and (and (= (type $ly@@331) LayerTypeType) (= (type |run#0@@73|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLte#canCall| (Lit |run#0@@73|) (LitInt |needle#0@@18|)) (and (and ($Is |run#0@@73| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@18|) (< |needle#0@@18| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted (Lit |run#0@@73|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@73|)) (LitInt 0))) (|Byte__Order.__default.lt#canCall| (LitInt |needle#0@@18|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@73|) (LitInt 0)))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@73|)) (LitInt 0)) (Byte__Order.__default.lt (LitInt |needle#0@@18|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@73|) (LitInt 0))))))) (|Byte__Order.__default.LargestLte#canCall| (Lit (|Seq#Drop| (Lit |run#0@@73|) (LitInt 1))) (LitInt |needle#0@@18|)))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted9)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted9)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted9) MoreFuel_Byte_Order._default.IsSorted9)) (= (Byte__Order.__default.LargestLte ($LS $ly@@331) (Lit |run#0@@73|) (LitInt |needle#0@@18|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@73|)) (LitInt 0)) (Byte__Order.__default.lt (LitInt |needle#0@@18|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@73|) (LitInt 0)))))) (- 0 1) (+ 1 (Byte__Order.__default.LargestLte ($LS $ly@@331) (Lit (|Seq#Drop| (Lit |run#0@@73|) (LitInt 1))) (LitInt |needle#0@@18|)))))))) :qid |totalord.253:12| :weight 3 :skolemid |11951| :pattern ( (Byte__Order.__default.LargestLte ($LS $ly@@331) (Lit |run#0@@73|) (LitInt |needle#0@@18|))) ))))
(assert (forall (($ly@@332 T@U) (|run#0@@74| T@U) (|needle#0@@19| Int) ) (!  (=> (and (= (type $ly@@332) LayerTypeType) (= (type |run#0@@74|) (SeqType BoxType))) (= (Byte__Order.__default.LargestLt ($LS $ly@@332) |run#0@@74| |needle#0@@19|) (Byte__Order.__default.LargestLt $ly@@332 |run#0@@74| |needle#0@@19|))) :qid |totalord.356:12| :skolemid |11952| :pattern ( (Byte__Order.__default.LargestLt ($LS $ly@@332) |run#0@@74| |needle#0@@19|)) )))
(assert (forall (($ly@@333 T@U) (|run#0@@75| T@U) (|needle#0@@20| Int) ) (!  (=> (and (= (type $ly@@333) LayerTypeType) (= (type |run#0@@75|) (SeqType BoxType))) (= (Byte__Order.__default.LargestLt $ly@@333 |run#0@@75| |needle#0@@20|) (Byte__Order.__default.LargestLt $LZ |run#0@@75| |needle#0@@20|))) :qid |totalord.356:12| :skolemid |11953| :pattern ( (Byte__Order.__default.LargestLt (AsFuelBottom $ly@@333) |run#0@@75| |needle#0@@20|)) )))
(assert  (=> true (forall (($ly@@334 T@U) (|run#0@@76| T@U) (|needle#0@@21| Int) ) (!  (=> (and (and (= (type $ly@@334) LayerTypeType) (= (type |run#0@@76|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLt#canCall| |run#0@@76| |needle#0@@21|) (and (and ($Is |run#0@@76| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@21|) (< |needle#0@@21| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@76|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Byte__Order.__default.LargestLt $ly@@334 |run#0@@76| |needle#0@@21|)) (< (Byte__Order.__default.LargestLt $ly@@334 |run#0@@76| |needle#0@@21|) (|Seq#Length| |run#0@@76|))) (forall ((|i#2@@12| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@12|) (<= |i#2@@12| (Byte__Order.__default.LargestLt $ly@@334 |run#0@@76| |needle#0@@21|))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@76| |i#2@@12|))) |needle#0@@21|))) :qid |totalord.359:20| :skolemid |11954| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@76| |i#2@@12|))) ))) (forall ((|i#3@@14| Int) ) (!  (=> true (=> (and (< (Byte__Order.__default.LargestLt $ly@@334 |run#0@@76| |needle#0@@21|) |i#3@@14|) (< |i#3@@14| (|Seq#Length| |run#0@@76|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |needle#0@@21| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@76| |i#3@@14|)))))) :qid |totalord.360:20| :skolemid |11955| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@76| |i#3@@14|))) ))) (=> (|Seq#Contains| |run#0@@76| ($Box (int_2_U |needle#0@@21|))) (and (< (+ (Byte__Order.__default.LargestLt $ly@@334 |run#0@@76| |needle#0@@21|) 1) (|Seq#Length| |run#0@@76|)) (= (U_2_int ($Unbox intType (|Seq#Index| |run#0@@76| (+ (Byte__Order.__default.LargestLt $ly@@334 |run#0@@76| |needle#0@@21|) 1)))) |needle#0@@21|))))) :qid |totalord.356:12| :skolemid |11956| :pattern ( (Byte__Order.__default.LargestLt $ly@@334 |run#0@@76| |needle#0@@21|)) ))))
(assert (forall (($ly@@335 T@U) (|run#0@@77| T@U) (|needle#0@@22| Int) ) (!  (=> (and (and (= (type $ly@@335) LayerTypeType) (= (type |run#0@@77|) (SeqType BoxType))) (and ($Is |run#0@@77| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@22|) (< |needle#0@@22| 256)))) (and (=> (|Byte__Order.__default.LargestLt#requires| $ly@@335 |run#0@@77| |needle#0@@22|) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@77|)) (=> (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@77|) (|Byte__Order.__default.LargestLt#requires| $ly@@335 |run#0@@77| |needle#0@@22|)))) :qid |totalord.356:12| :skolemid |11957| :pattern ( (|Byte__Order.__default.LargestLt#requires| $ly@@335 |run#0@@77| |needle#0@@22|)) )))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted10) LayerTypeType))
(assert  (=> true (forall (($ly@@336 T@U) (|run#0@@78| T@U) (|needle#0@@23| Int) ) (!  (=> (and (and (= (type $ly@@336) LayerTypeType) (= (type |run#0@@78|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLt#canCall| |run#0@@78| |needle#0@@23|) (and (and ($Is |run#0@@78| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@23|) (< |needle#0@@23| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@78|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@78|) (LitInt 0))) (|Byte__Order.__default.lte#canCall| |needle#0@@23| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@78| (LitInt 0)))))) (=> (not (or (= (|Seq#Length| |run#0@@78|) (LitInt 0)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |needle#0@@23| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@78| (LitInt 0))))))) (|Byte__Order.__default.LargestLt#canCall| (|Seq#Drop| |run#0@@78| (LitInt 1)) |needle#0@@23|))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted10)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted10)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted10) MoreFuel_Byte_Order._default.IsSorted10)) (= (Byte__Order.__default.LargestLt ($LS $ly@@336) |run#0@@78| |needle#0@@23|) (ite  (or (= (|Seq#Length| |run#0@@78|) (LitInt 0)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |needle#0@@23| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@78| (LitInt 0)))))) (- 0 1) (+ 1 (Byte__Order.__default.LargestLt $ly@@336 (|Seq#Drop| |run#0@@78| (LitInt 1)) |needle#0@@23|))))))) :qid |totalord.356:12| :skolemid |11958| :pattern ( (Byte__Order.__default.LargestLt ($LS $ly@@336) |run#0@@78| |needle#0@@23|)) ))))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted11) LayerTypeType))
(assert  (=> true (forall (($ly@@337 T@U) (|run#0@@79| T@U) (|needle#0@@24| Int) ) (!  (=> (and (and (= (type $ly@@337) LayerTypeType) (= (type |run#0@@79|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLt#canCall| (Lit |run#0@@79|) (LitInt |needle#0@@24|)) (and (and ($Is |run#0@@79| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@24|) (< |needle#0@@24| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted (Lit |run#0@@79|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@79|)) (LitInt 0))) (|Byte__Order.__default.lte#canCall| (LitInt |needle#0@@24|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@79|) (LitInt 0)))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@79|)) (LitInt 0)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |needle#0@@24|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@79|) (LitInt 0))))))) (|Byte__Order.__default.LargestLt#canCall| (Lit (|Seq#Drop| (Lit |run#0@@79|) (LitInt 1))) (LitInt |needle#0@@24|)))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted11)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted11)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted11) MoreFuel_Byte_Order._default.IsSorted11)) (= (Byte__Order.__default.LargestLt ($LS $ly@@337) (Lit |run#0@@79|) (LitInt |needle#0@@24|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@79|)) (LitInt 0)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |needle#0@@24|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@79|) (LitInt 0)))))) (- 0 1) (+ 1 (Byte__Order.__default.LargestLt ($LS $ly@@337) (Lit (|Seq#Drop| (Lit |run#0@@79|) (LitInt 1))) (LitInt |needle#0@@24|)))))))) :qid |totalord.356:12| :weight 3 :skolemid |11959| :pattern ( (Byte__Order.__default.LargestLt ($LS $ly@@337) (Lit |run#0@@79|) (LitInt |needle#0@@24|))) ))))
(assert (forall (($ly@@338 T@U) (|run#0@@80| T@U) (|needle#0@@25| Int) ) (!  (=> (and (= (type $ly@@338) LayerTypeType) (= (type |run#0@@80|) (SeqType BoxType))) (= (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@338) |run#0@@80| |needle#0@@25|) (Byte__Order.__default.IndexOfFirstGte $ly@@338 |run#0@@80| |needle#0@@25|))) :qid |totalord.388:12| :skolemid |11960| :pattern ( (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@338) |run#0@@80| |needle#0@@25|)) )))
(assert (forall (($ly@@339 T@U) (|run#0@@81| T@U) (|needle#0@@26| Int) ) (!  (=> (and (= (type $ly@@339) LayerTypeType) (= (type |run#0@@81|) (SeqType BoxType))) (= (Byte__Order.__default.IndexOfFirstGte $ly@@339 |run#0@@81| |needle#0@@26|) (Byte__Order.__default.IndexOfFirstGte $LZ |run#0@@81| |needle#0@@26|))) :qid |totalord.388:12| :skolemid |11961| :pattern ( (Byte__Order.__default.IndexOfFirstGte (AsFuelBottom $ly@@339) |run#0@@81| |needle#0@@26|)) )))
(assert  (=> true (forall (($ly@@340 T@U) (|run#0@@82| T@U) (|needle#0@@27| Int) ) (!  (=> (and (and (= (type $ly@@340) LayerTypeType) (= (type |run#0@@82|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGte#canCall| |run#0@@82| |needle#0@@27|) (and (and ($Is |run#0@@82| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@27|) (< |needle#0@@27| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@82|)))) (and (and (and (<= (Byte__Order.__default.IndexOfFirstGte $ly@@340 |run#0@@82| |needle#0@@27|) (|Seq#Length| |run#0@@82|)) (forall ((|i#2@@13| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@13|) (< |i#2@@13| (Byte__Order.__default.IndexOfFirstGte $ly@@340 |run#0@@82| |needle#0@@27|))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@82| |i#2@@13|))) |needle#0@@27|)) :qid |totalord.391:20| :skolemid |11962| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@82| |i#2@@13|))) ))) (forall ((|i#3@@15| Int) ) (!  (=> (and (<= (Byte__Order.__default.IndexOfFirstGte $ly@@340 |run#0@@82| |needle#0@@27|) |i#3@@15|) (< |i#3@@15| (|Seq#Length| |run#0@@82|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |needle#0@@27| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@82| |i#3@@15|))))) :qid |totalord.392:20| :skolemid |11963| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@82| |i#3@@15|))) ))) (<= (LitInt 0) (Byte__Order.__default.IndexOfFirstGte $ly@@340 |run#0@@82| |needle#0@@27|)))) :qid |totalord.388:12| :skolemid |11964| :pattern ( (Byte__Order.__default.IndexOfFirstGte $ly@@340 |run#0@@82| |needle#0@@27|)) ))))
(assert (forall (($ly@@341 T@U) (|run#0@@83| T@U) (|needle#0@@28| Int) ) (!  (=> (and (and (= (type $ly@@341) LayerTypeType) (= (type |run#0@@83|) (SeqType BoxType))) (and ($Is |run#0@@83| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@28|) (< |needle#0@@28| 256)))) (and (=> (|Byte__Order.__default.IndexOfFirstGte#requires| $ly@@341 |run#0@@83| |needle#0@@28|) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@83|)) (=> (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@83|) (|Byte__Order.__default.IndexOfFirstGte#requires| $ly@@341 |run#0@@83| |needle#0@@28|)))) :qid |totalord.388:12| :skolemid |11965| :pattern ( (|Byte__Order.__default.IndexOfFirstGte#requires| $ly@@341 |run#0@@83| |needle#0@@28|)) )))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted12) LayerTypeType))
(assert  (=> true (forall (($ly@@342 T@U) (|run#0@@84| T@U) (|needle#0@@29| Int) ) (!  (=> (and (and (= (type $ly@@342) LayerTypeType) (= (type |run#0@@84|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGte#canCall| |run#0@@84| |needle#0@@29|) (and (and ($Is |run#0@@84| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@29|) (< |needle#0@@29| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@84|)))) (and (=> (not (= (|Seq#Length| |run#0@@84|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.NativeTypes.byte |run#0@@84|) (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@84|))) |needle#0@@29|)) (=> (not (Byte__Order.__default.lt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@84|))) |needle#0@@29|)) (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.byte |run#0@@84|) (|Byte__Order.__default.IndexOfFirstGte#canCall| (Sequences.__default.DropLast Tclass.NativeTypes.byte |run#0@@84|) |needle#0@@29|))))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted12)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted12)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted12) MoreFuel_Byte_Order._default.IsSorted12)) (= (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@342) |run#0@@84| |needle#0@@29|) (ite (= (|Seq#Length| |run#0@@84|) (LitInt 0)) 0 (ite (Byte__Order.__default.lt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@84|))) |needle#0@@29|) (|Seq#Length| |run#0@@84|) (Byte__Order.__default.IndexOfFirstGte $ly@@342 (Sequences.__default.DropLast Tclass.NativeTypes.byte |run#0@@84|) |needle#0@@29|))))))) :qid |totalord.388:12| :skolemid |11966| :pattern ( (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@342) |run#0@@84| |needle#0@@29|)) ))))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted13) LayerTypeType))
(assert  (=> true (forall (($ly@@343 T@U) (|run#0@@85| T@U) (|needle#0@@30| Int) ) (!  (=> (and (and (= (type $ly@@343) LayerTypeType) (= (type |run#0@@85|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGte#canCall| (Lit |run#0@@85|) (LitInt |needle#0@@30|)) (and (and ($Is |run#0@@85| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@30|) (< |needle#0@@30| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted (Lit |run#0@@85|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@85|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.NativeTypes.byte (Lit |run#0@@85|)) (|Byte__Order.__default.lt#canCall| (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@85|))))) (LitInt |needle#0@@30|))) (=> (not (U_2_bool (Lit (bool_2_U (Byte__Order.__default.lt (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@85|))))) (LitInt |needle#0@@30|)))))) (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.byte (Lit |run#0@@85|)) (|Byte__Order.__default.IndexOfFirstGte#canCall| (Lit (Sequences.__default.DropLast Tclass.NativeTypes.byte (Lit |run#0@@85|))) (LitInt |needle#0@@30|)))))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted13)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted13)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted13) MoreFuel_Byte_Order._default.IsSorted13)) (= (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@343) (Lit |run#0@@85|) (LitInt |needle#0@@30|)) (ite (= (|Seq#Length| (Lit |run#0@@85|)) (LitInt 0)) 0 (ite (Byte__Order.__default.lt (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@85|))))) (LitInt |needle#0@@30|)) (|Seq#Length| (Lit |run#0@@85|)) (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@343) (Lit (Sequences.__default.DropLast Tclass.NativeTypes.byte (Lit |run#0@@85|))) (LitInt |needle#0@@30|)))))))) :qid |totalord.388:12| :weight 3 :skolemid |11967| :pattern ( (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@343) (Lit |run#0@@85|) (LitInt |needle#0@@30|))) ))))
(assert (forall (($ly@@344 T@U) (|s#0@@38| T@U) (|key#0@@8| Int) (|lo#0| Int) (|hi#0| Int) ) (!  (=> (and (= (type $ly@@344) LayerTypeType) (= (type |s#0@@38|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@344) |s#0@@38| |key#0@@8| |lo#0| |hi#0|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@344 |s#0@@38| |key#0@@8| |lo#0| |hi#0|))) :qid |totalord.421:12| :skolemid |11968| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@344) |s#0@@38| |key#0@@8| |lo#0| |hi#0|)) )))
(assert (forall (($ly@@345 T@U) (|s#0@@39| T@U) (|key#0@@9| Int) (|lo#0@@0| Int) (|hi#0@@0| Int) ) (!  (=> (and (= (type $ly@@345) LayerTypeType) (= (type |s#0@@39|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@345 |s#0@@39| |key#0@@9| |lo#0@@0| |hi#0@@0|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $LZ |s#0@@39| |key#0@@9| |lo#0@@0| |hi#0@@0|))) :qid |totalord.421:12| :skolemid |11969| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter (AsFuelBottom $ly@@345) |s#0@@39| |key#0@@9| |lo#0@@0| |hi#0@@0|)) )))
(assert  (=> true (forall (($ly@@346 T@U) (|s#0@@40| T@U) (|key#0@@10| Int) (|lo#0@@1| Int) (|hi#0@@1| Int) ) (!  (=> (and (and (= (type $ly@@346) LayerTypeType) (= (type |s#0@@40|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@40| |key#0@@10| |lo#0@@1| |hi#0@@1|) (and (and ($Is |s#0@@40| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@10|) (< |key#0@@10| 256))) (and (and (and (and (<= (LitInt 0) |lo#0@@1|) (< |lo#0@@1| |hi#0@@1|)) (<= |hi#0@@1| (+ (|Seq#Length| |s#0@@40|) 1))) (=> (> |lo#0@@1| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@40| (- |lo#0@@1| 1)))) |key#0@@10|))) (=> (<= |hi#0@@1| (|Seq#Length| |s#0@@40|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@10| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@40| (- |hi#0@@1| 1)))))))))) (and (and (and (<= (LitInt 0) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@346 |s#0@@40| |key#0@@10| |lo#0@@1| |hi#0@@1|)) (<= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@346 |s#0@@40| |key#0@@10| |lo#0@@1| |hi#0@@1|) (|Seq#Length| |s#0@@40|))) (=> (> (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@346 |s#0@@40| |key#0@@10| |lo#0@@1| |hi#0@@1|) 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@40| (- (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@346 |s#0@@40| |key#0@@10| |lo#0@@1| |hi#0@@1|) 1)))) |key#0@@10|))) (=> (< (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@346 |s#0@@40| |key#0@@10| |lo#0@@1| |hi#0@@1|) (|Seq#Length| |s#0@@40|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@10| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@40| (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@346 |s#0@@40| |key#0@@10| |lo#0@@1| |hi#0@@1|)))))))) :qid |totalord.421:12| :skolemid |11970| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@346 |s#0@@40| |key#0@@10| |lo#0@@1| |hi#0@@1|)) ))))
(assert (forall (($ly@@347 T@U) (|s#0@@41| T@U) (|key#0@@11| Int) (|lo#0@@2| Int) (|hi#0@@2| Int) ) (!  (=> (and (and (= (type $ly@@347) LayerTypeType) (= (type |s#0@@41|) (SeqType BoxType))) (and ($Is |s#0@@41| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@11|) (< |key#0@@11| 256)))) (and (=> (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@347 |s#0@@41| |key#0@@11| |lo#0@@2| |hi#0@@2|) (and (and (and (and (<= (LitInt 0) |lo#0@@2|) (< |lo#0@@2| |hi#0@@2|)) (<= |hi#0@@2| (+ (|Seq#Length| |s#0@@41|) 1))) (=> (> |lo#0@@2| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@41| (- |lo#0@@2| 1)))) |key#0@@11|))) (=> (<= |hi#0@@2| (|Seq#Length| |s#0@@41|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@11| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@41| (- |hi#0@@2| 1)))))))) (=> (and (and (and (and (<= (LitInt 0) |lo#0@@2|) (< |lo#0@@2| |hi#0@@2|)) (<= |hi#0@@2| (+ (|Seq#Length| |s#0@@41|) 1))) (=> (> |lo#0@@2| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@41| (- |lo#0@@2| 1)))) |key#0@@11|))) (=> (<= |hi#0@@2| (|Seq#Length| |s#0@@41|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@11| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@41| (- |hi#0@@2| 1))))))) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@347 |s#0@@41| |key#0@@11| |lo#0@@2| |hi#0@@2|)))) :qid |totalord.421:12| :skolemid |11971| :pattern ( (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@347 |s#0@@41| |key#0@@11| |lo#0@@2| |hi#0@@2|)) )))
(assert  (=> true (forall (($ly@@348 T@U) (|s#0@@42| T@U) (|key#0@@12| Int) (|lo#0@@3| Int) (|hi#0@@3| Int) ) (!  (=> (and (and (= (type $ly@@348) LayerTypeType) (= (type |s#0@@42|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@42| |key#0@@12| |lo#0@@3| |hi#0@@3|) (and (and ($Is |s#0@@42| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@12|) (< |key#0@@12| 256))) (and (and (and (and (<= (LitInt 0) |lo#0@@3|) (< |lo#0@@3| |hi#0@@3|)) (<= |hi#0@@3| (+ (|Seq#Length| |s#0@@42|) 1))) (=> (> |lo#0@@3| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@42| (- |lo#0@@3| 1)))) |key#0@@12|))) (=> (<= |hi#0@@3| (|Seq#Length| |s#0@@42|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@12| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@42| (- |hi#0@@3| 1)))))))))) (and (=> (< (+ |lo#0@@3| 1) |hi#0@@3|) (let ((|mid#3| (Div (+ |lo#0@@3| |hi#0@@3|) (LitInt 2)))) (and (and (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@42| (- |mid#3| 1)))) |key#0@@12|) (=> (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@42| (- |mid#3| 1)))) |key#0@@12|) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@42| |key#0@@12| |mid#3| |hi#0@@3|))) (=> (not (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@42| (- |mid#3| 1)))) |key#0@@12|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@42| |key#0@@12| |lo#0@@3| |mid#3|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@348) |s#0@@42| |key#0@@12| |lo#0@@3| |hi#0@@3|) (ite (< (+ |lo#0@@3| 1) |hi#0@@3|) (let ((|mid#3@@0| (Div (+ |lo#0@@3| |hi#0@@3|) (LitInt 2)))) (ite (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@42| (- |mid#3@@0| 1)))) |key#0@@12|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@348 |s#0@@42| |key#0@@12| |mid#3@@0| |hi#0@@3|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@348 |s#0@@42| |key#0@@12| |lo#0@@3| |mid#3@@0|))) |lo#0@@3|)))) :qid |totalord.421:12| :skolemid |11972| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@348) |s#0@@42| |key#0@@12| |lo#0@@3| |hi#0@@3|)) ))))
(assert  (=> true (forall (($ly@@349 T@U) (|s#0@@43| T@U) (|key#0@@13| Int) (|lo#0@@4| Int) (|hi#0@@4| Int) ) (!  (=> (and (and (= (type $ly@@349) LayerTypeType) (= (type |s#0@@43|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@43| |key#0@@13| (LitInt |lo#0@@4|) (LitInt |hi#0@@4|)) (and (and ($Is |s#0@@43| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@13|) (< |key#0@@13| 256))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@4|)) (< |lo#0@@4| |hi#0@@4|)) (<= (LitInt |hi#0@@4|) (+ (|Seq#Length| |s#0@@43|) 1))) (=> (> |lo#0@@4| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@43| (LitInt (- |lo#0@@4| 1))))) |key#0@@13|))) (=> (<= (LitInt |hi#0@@4|) (|Seq#Length| |s#0@@43|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@13| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@43| (LitInt (- |hi#0@@4| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@4| 1) |hi#0@@4|)))) (let ((|mid#4| (LitInt (Div (+ |lo#0@@4| |hi#0@@4|) (LitInt 2))))) (and (and (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@43| (- |mid#4| 1)))) |key#0@@13|) (=> (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@43| (- |mid#4| 1)))) |key#0@@13|) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@43| |key#0@@13| |mid#4| (LitInt |hi#0@@4|)))) (=> (not (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@43| (- |mid#4| 1)))) |key#0@@13|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@43| |key#0@@13| (LitInt |lo#0@@4|) |mid#4|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@349) |s#0@@43| |key#0@@13| (LitInt |lo#0@@4|) (LitInt |hi#0@@4|)) (ite (< (+ |lo#0@@4| 1) |hi#0@@4|) (let ((|mid#4@@0| (LitInt (Div (+ |lo#0@@4| |hi#0@@4|) (LitInt 2))))) (ite (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@43| (LitInt (- |mid#4@@0| 1))))) |key#0@@13|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@349) |s#0@@43| |key#0@@13| |mid#4@@0| (LitInt |hi#0@@4|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@349) |s#0@@43| |key#0@@13| (LitInt |lo#0@@4|) |mid#4@@0|))) |lo#0@@4|)))) :qid |totalord.421:12| :weight 3 :skolemid |11973| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@349) |s#0@@43| |key#0@@13| (LitInt |lo#0@@4|) (LitInt |hi#0@@4|))) ))))
(assert  (=> true (forall (($ly@@350 T@U) (|s#0@@44| T@U) (|key#0@@14| Int) (|lo#0@@5| Int) (|hi#0@@5| Int) ) (!  (=> (and (and (= (type $ly@@350) LayerTypeType) (= (type |s#0@@44|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@44|) (LitInt |key#0@@14|) (LitInt |lo#0@@5|) (LitInt |hi#0@@5|)) (and (and ($Is |s#0@@44| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@14|) (< |key#0@@14| 256))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@5|)) (< |lo#0@@5| |hi#0@@5|)) (<= (LitInt |hi#0@@5|) (+ (|Seq#Length| (Lit |s#0@@44|)) 1))) (=> (> |lo#0@@5| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@44|) (LitInt (- |lo#0@@5| 1))))) (LitInt |key#0@@14|)))) (=> (<= (LitInt |hi#0@@5|) (|Seq#Length| (Lit |s#0@@44|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |key#0@@14|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@44|) (LitInt (- |hi#0@@5| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@5| 1) |hi#0@@5|)))) (let ((|mid#5| (LitInt (Div (+ |lo#0@@5| |hi#0@@5|) (LitInt 2))))) (and (and (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@44|) (- |mid#5| 1)))) (LitInt |key#0@@14|)) (=> (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@44|) (- |mid#5| 1)))) (LitInt |key#0@@14|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@44|) (LitInt |key#0@@14|) |mid#5| (LitInt |hi#0@@5|)))) (=> (not (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@44|) (- |mid#5| 1)))) (LitInt |key#0@@14|))) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@44|) (LitInt |key#0@@14|) (LitInt |lo#0@@5|) |mid#5|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@350) (Lit |s#0@@44|) (LitInt |key#0@@14|) (LitInt |lo#0@@5|) (LitInt |hi#0@@5|)) (ite (< (+ |lo#0@@5| 1) |hi#0@@5|) (let ((|mid#5@@0| (LitInt (Div (+ |lo#0@@5| |hi#0@@5|) (LitInt 2))))) (ite (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@44|) (LitInt (- |mid#5@@0| 1))))) (LitInt |key#0@@14|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@350) (Lit |s#0@@44|) (LitInt |key#0@@14|) |mid#5@@0| (LitInt |hi#0@@5|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@350) (Lit |s#0@@44|) (LitInt |key#0@@14|) (LitInt |lo#0@@5|) |mid#5@@0|))) |lo#0@@5|)))) :qid |totalord.421:12| :weight 3 :skolemid |11974| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@350) (Lit |s#0@@44|) (LitInt |key#0@@14|) (LitInt |lo#0@@5|) (LitInt |hi#0@@5|))) ))))
(assert (forall (($ly@@351 T@U) (|s#0@@45| T@U) (|key#0@@15| Int) ) (!  (=> (and (= (type $ly@@351) LayerTypeType) (= (type |s#0@@45|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@351) |s#0@@45| |key#0@@15|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@351 |s#0@@45| |key#0@@15|))) :qid |totalord.441:22| :skolemid |11975| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@351) |s#0@@45| |key#0@@15|)) )))
(assert (forall (($ly@@352 T@U) (|s#0@@46| T@U) (|key#0@@16| Int) ) (!  (=> (and (= (type $ly@@352) LayerTypeType) (= (type |s#0@@46|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@352 |s#0@@46| |key#0@@16|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $LZ |s#0@@46| |key#0@@16|))) :qid |totalord.441:22| :skolemid |11976| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGte (AsFuelBottom $ly@@352) |s#0@@46| |key#0@@16|)) )))
(assert  (=> true (forall (($ly@@353 T@U) (|s#0@@47| T@U) (|key#0@@17| Int) ) (!  (=> (and (and (= (type $ly@@353) LayerTypeType) (= (type |s#0@@47|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@47| |key#0@@17|) (and ($Is |s#0@@47| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@17|) (< |key#0@@17| 256))))) (and (and (and (<= (LitInt 0) (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@353 |s#0@@47| |key#0@@17|)) (<= (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@353 |s#0@@47| |key#0@@17|) (|Seq#Length| |s#0@@47|))) (=> (> (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@353 |s#0@@47| |key#0@@17|) 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@47| (- (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@353 |s#0@@47| |key#0@@17|) 1)))) |key#0@@17|))) (=> (< (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@353 |s#0@@47| |key#0@@17|) (|Seq#Length| |s#0@@47|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@17| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@47| (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@353 |s#0@@47| |key#0@@17|)))))))) :qid |totalord.441:22| :skolemid |11977| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@353 |s#0@@47| |key#0@@17|)) ))))
(assert (forall (($ly@@354 T@U) (|s#0@@48| T@U) (|key#0@@18| Int) ) (!  (=> (and (and (= (type $ly@@354) LayerTypeType) (= (type |s#0@@48|) (SeqType BoxType))) (and ($Is |s#0@@48| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@18|) (< |key#0@@18| 256)))) (and (=> (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@354 |s#0@@48| |key#0@@18|) true) (=> true (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@354 |s#0@@48| |key#0@@18|)))) :qid |totalord.441:22| :skolemid |11978| :pattern ( (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@354 |s#0@@48| |key#0@@18|)) )))
(assert  (=> true (forall (($ly@@355 T@U) (|s#0@@49| T@U) (|key#0@@19| Int) ) (!  (=> (and (and (= (type $ly@@355) LayerTypeType) (= (type |s#0@@49|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@49| |key#0@@19|) (and ($Is |s#0@@49| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@19|) (< |key#0@@19| 256))))) (and (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@49| |key#0@@19| (LitInt 0) (+ (|Seq#Length| |s#0@@49|) 1)) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@355) |s#0@@49| |key#0@@19|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) |s#0@@49| |key#0@@19| (LitInt 0) (+ (|Seq#Length| |s#0@@49|) 1))))) :qid |totalord.441:22| :skolemid |11979| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@355) |s#0@@49| |key#0@@19|)) ))))
(assert  (=> true (forall (($ly@@356 T@U) (|s#0@@50| T@U) (|key#0@@20| Int) ) (!  (=> (and (and (= (type $ly@@356) LayerTypeType) (= (type |s#0@@50|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (Lit |s#0@@50|) (LitInt |key#0@@20|)) (and ($Is |s#0@@50| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@20|) (< |key#0@@20| 256))))) (and (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@50|) (LitInt |key#0@@20|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@50|)) 1)) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@356) (Lit |s#0@@50|) (LitInt |key#0@@20|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) (Lit |s#0@@50|) (LitInt |key#0@@20|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@50|)) 1))))) :qid |totalord.441:22| :weight 3 :skolemid |11980| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@356) (Lit |s#0@@50|) (LitInt |key#0@@20|))) ))))
(assert (forall (($ly@@357 T@U) (|run#0@@86| T@U) (|needle#0@@31| Int) ) (!  (=> (and (= (type $ly@@357) LayerTypeType) (= (type |run#0@@86|) (SeqType BoxType))) (= (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@357) |run#0@@86| |needle#0@@31|) (Byte__Order.__default.IndexOfFirstGt $ly@@357 |run#0@@86| |needle#0@@31|))) :qid |totalord.449:12| :skolemid |11981| :pattern ( (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@357) |run#0@@86| |needle#0@@31|)) )))
(assert (forall (($ly@@358 T@U) (|run#0@@87| T@U) (|needle#0@@32| Int) ) (!  (=> (and (= (type $ly@@358) LayerTypeType) (= (type |run#0@@87|) (SeqType BoxType))) (= (Byte__Order.__default.IndexOfFirstGt $ly@@358 |run#0@@87| |needle#0@@32|) (Byte__Order.__default.IndexOfFirstGt $LZ |run#0@@87| |needle#0@@32|))) :qid |totalord.449:12| :skolemid |11982| :pattern ( (Byte__Order.__default.IndexOfFirstGt (AsFuelBottom $ly@@358) |run#0@@87| |needle#0@@32|)) )))
(assert  (=> true (forall (($ly@@359 T@U) (|run#0@@88| T@U) (|needle#0@@33| Int) ) (!  (=> (and (and (= (type $ly@@359) LayerTypeType) (= (type |run#0@@88|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGt#canCall| |run#0@@88| |needle#0@@33|) (and (and ($Is |run#0@@88| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@33|) (< |needle#0@@33| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@88|)))) (and (and (and (<= (Byte__Order.__default.IndexOfFirstGt $ly@@359 |run#0@@88| |needle#0@@33|) (|Seq#Length| |run#0@@88|)) (forall ((|i#2@@14| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@14|) (< |i#2@@14| (Byte__Order.__default.IndexOfFirstGt $ly@@359 |run#0@@88| |needle#0@@33|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@88| |i#2@@14|))) |needle#0@@33|)) :qid |totalord.452:20| :skolemid |11983| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@88| |i#2@@14|))) ))) (forall ((|i#3@@16| Int) ) (!  (=> (and (<= (Byte__Order.__default.IndexOfFirstGt $ly@@359 |run#0@@88| |needle#0@@33|) |i#3@@16|) (< |i#3@@16| (|Seq#Length| |run#0@@88|))) (Byte__Order.__default.lt |needle#0@@33| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@88| |i#3@@16|))))) :qid |totalord.453:20| :skolemid |11984| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@88| |i#3@@16|))) ))) (<= (LitInt 0) (Byte__Order.__default.IndexOfFirstGt $ly@@359 |run#0@@88| |needle#0@@33|)))) :qid |totalord.449:12| :skolemid |11985| :pattern ( (Byte__Order.__default.IndexOfFirstGt $ly@@359 |run#0@@88| |needle#0@@33|)) ))))
(assert (forall (($ly@@360 T@U) (|run#0@@89| T@U) (|needle#0@@34| Int) ) (!  (=> (and (and (= (type $ly@@360) LayerTypeType) (= (type |run#0@@89|) (SeqType BoxType))) (and ($Is |run#0@@89| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@34|) (< |needle#0@@34| 256)))) (and (=> (|Byte__Order.__default.IndexOfFirstGt#requires| $ly@@360 |run#0@@89| |needle#0@@34|) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@89|)) (=> (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@89|) (|Byte__Order.__default.IndexOfFirstGt#requires| $ly@@360 |run#0@@89| |needle#0@@34|)))) :qid |totalord.449:12| :skolemid |11986| :pattern ( (|Byte__Order.__default.IndexOfFirstGt#requires| $ly@@360 |run#0@@89| |needle#0@@34|)) )))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted14) LayerTypeType))
(assert  (=> true (forall (($ly@@361 T@U) (|run#0@@90| T@U) (|needle#0@@35| Int) ) (!  (=> (and (and (= (type $ly@@361) LayerTypeType) (= (type |run#0@@90|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGt#canCall| |run#0@@90| |needle#0@@35|) (and (and ($Is |run#0@@90| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@35|) (< |needle#0@@35| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@90|)))) (and (=> (not (= (|Seq#Length| |run#0@@90|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.NativeTypes.byte |run#0@@90|) (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@90|))) |needle#0@@35|)) (=> (not (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@90|))) |needle#0@@35|)) (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.byte |run#0@@90|) (|Byte__Order.__default.IndexOfFirstGt#canCall| (Sequences.__default.DropLast Tclass.NativeTypes.byte |run#0@@90|) |needle#0@@35|))))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted14)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted14)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted14) MoreFuel_Byte_Order._default.IsSorted14)) (= (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@361) |run#0@@90| |needle#0@@35|) (ite (= (|Seq#Length| |run#0@@90|) (LitInt 0)) 0 (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@90|))) |needle#0@@35|) (|Seq#Length| |run#0@@90|) (Byte__Order.__default.IndexOfFirstGt $ly@@361 (Sequences.__default.DropLast Tclass.NativeTypes.byte |run#0@@90|) |needle#0@@35|))))))) :qid |totalord.449:12| :skolemid |11987| :pattern ( (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@361) |run#0@@90| |needle#0@@35|)) ))))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted15) LayerTypeType))
(assert  (=> true (forall (($ly@@362 T@U) (|run#0@@91| T@U) (|needle#0@@36| Int) ) (!  (=> (and (and (= (type $ly@@362) LayerTypeType) (= (type |run#0@@91|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGt#canCall| (Lit |run#0@@91|) (LitInt |needle#0@@36|)) (and (and ($Is |run#0@@91| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@36|) (< |needle#0@@36| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted (Lit |run#0@@91|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@91|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.NativeTypes.byte (Lit |run#0@@91|)) (|Byte__Order.__default.lte#canCall| (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@91|))))) (LitInt |needle#0@@36|))) (=> (not (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@91|))))) (LitInt |needle#0@@36|))) (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.byte (Lit |run#0@@91|)) (|Byte__Order.__default.IndexOfFirstGt#canCall| (Lit (Sequences.__default.DropLast Tclass.NativeTypes.byte (Lit |run#0@@91|))) (LitInt |needle#0@@36|)))))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted15)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted15)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted15) MoreFuel_Byte_Order._default.IsSorted15)) (= (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@362) (Lit |run#0@@91|) (LitInt |needle#0@@36|)) (ite (= (|Seq#Length| (Lit |run#0@@91|)) (LitInt 0)) 0 (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@91|))))) (LitInt |needle#0@@36|)) (|Seq#Length| (Lit |run#0@@91|)) (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@362) (Lit (Sequences.__default.DropLast Tclass.NativeTypes.byte (Lit |run#0@@91|))) (LitInt |needle#0@@36|)))))))) :qid |totalord.449:12| :weight 3 :skolemid |11988| :pattern ( (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@362) (Lit |run#0@@91|) (LitInt |needle#0@@36|))) ))))
(assert (forall (($ly@@363 T@U) (|s#0@@51| T@U) (|key#0@@21| Int) (|lo#0@@6| Int) (|hi#0@@6| Int) ) (!  (=> (and (= (type $ly@@363) LayerTypeType) (= (type |s#0@@51|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@363) |s#0@@51| |key#0@@21| |lo#0@@6| |hi#0@@6|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@363 |s#0@@51| |key#0@@21| |lo#0@@6| |hi#0@@6|))) :qid |totalord.482:12| :skolemid |11989| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@363) |s#0@@51| |key#0@@21| |lo#0@@6| |hi#0@@6|)) )))
(assert (forall (($ly@@364 T@U) (|s#0@@52| T@U) (|key#0@@22| Int) (|lo#0@@7| Int) (|hi#0@@7| Int) ) (!  (=> (and (= (type $ly@@364) LayerTypeType) (= (type |s#0@@52|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@364 |s#0@@52| |key#0@@22| |lo#0@@7| |hi#0@@7|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $LZ |s#0@@52| |key#0@@22| |lo#0@@7| |hi#0@@7|))) :qid |totalord.482:12| :skolemid |11990| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter (AsFuelBottom $ly@@364) |s#0@@52| |key#0@@22| |lo#0@@7| |hi#0@@7|)) )))
(assert  (=> true (forall (($ly@@365 T@U) (|s#0@@53| T@U) (|key#0@@23| Int) (|lo#0@@8| Int) (|hi#0@@8| Int) ) (!  (=> (and (and (= (type $ly@@365) LayerTypeType) (= (type |s#0@@53|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@53| |key#0@@23| |lo#0@@8| |hi#0@@8|) (and (and ($Is |s#0@@53| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@23|) (< |key#0@@23| 256))) (and (and (and (and (<= (LitInt 0) |lo#0@@8|) (< |lo#0@@8| |hi#0@@8|)) (<= |hi#0@@8| (+ (|Seq#Length| |s#0@@53|) 1))) (=> (> |lo#0@@8| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@53| (- |lo#0@@8| 1)))) |key#0@@23|))) (=> (<= |hi#0@@8| (|Seq#Length| |s#0@@53|)) (Byte__Order.__default.lt |key#0@@23| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@53| (- |hi#0@@8| 1)))))))))) (and (and (and (<= (LitInt 0) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@365 |s#0@@53| |key#0@@23| |lo#0@@8| |hi#0@@8|)) (<= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@365 |s#0@@53| |key#0@@23| |lo#0@@8| |hi#0@@8|) (|Seq#Length| |s#0@@53|))) (=> (> (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@365 |s#0@@53| |key#0@@23| |lo#0@@8| |hi#0@@8|) 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@53| (- (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@365 |s#0@@53| |key#0@@23| |lo#0@@8| |hi#0@@8|) 1)))) |key#0@@23|))) (=> (< (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@365 |s#0@@53| |key#0@@23| |lo#0@@8| |hi#0@@8|) (|Seq#Length| |s#0@@53|)) (Byte__Order.__default.lt |key#0@@23| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@53| (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@365 |s#0@@53| |key#0@@23| |lo#0@@8| |hi#0@@8|)))))))) :qid |totalord.482:12| :skolemid |11991| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@365 |s#0@@53| |key#0@@23| |lo#0@@8| |hi#0@@8|)) ))))
(assert (forall (($ly@@366 T@U) (|s#0@@54| T@U) (|key#0@@24| Int) (|lo#0@@9| Int) (|hi#0@@9| Int) ) (!  (=> (and (and (= (type $ly@@366) LayerTypeType) (= (type |s#0@@54|) (SeqType BoxType))) (and ($Is |s#0@@54| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@24|) (< |key#0@@24| 256)))) (and (=> (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@366 |s#0@@54| |key#0@@24| |lo#0@@9| |hi#0@@9|) (and (and (and (and (<= (LitInt 0) |lo#0@@9|) (< |lo#0@@9| |hi#0@@9|)) (<= |hi#0@@9| (+ (|Seq#Length| |s#0@@54|) 1))) (=> (> |lo#0@@9| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@54| (- |lo#0@@9| 1)))) |key#0@@24|))) (=> (<= |hi#0@@9| (|Seq#Length| |s#0@@54|)) (Byte__Order.__default.lt |key#0@@24| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@54| (- |hi#0@@9| 1)))))))) (=> (and (and (and (and (<= (LitInt 0) |lo#0@@9|) (< |lo#0@@9| |hi#0@@9|)) (<= |hi#0@@9| (+ (|Seq#Length| |s#0@@54|) 1))) (=> (> |lo#0@@9| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@54| (- |lo#0@@9| 1)))) |key#0@@24|))) (=> (<= |hi#0@@9| (|Seq#Length| |s#0@@54|)) (Byte__Order.__default.lt |key#0@@24| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@54| (- |hi#0@@9| 1))))))) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@366 |s#0@@54| |key#0@@24| |lo#0@@9| |hi#0@@9|)))) :qid |totalord.482:12| :skolemid |11992| :pattern ( (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@366 |s#0@@54| |key#0@@24| |lo#0@@9| |hi#0@@9|)) )))
(assert  (=> true (forall (($ly@@367 T@U) (|s#0@@55| T@U) (|key#0@@25| Int) (|lo#0@@10| Int) (|hi#0@@10| Int) ) (!  (=> (and (and (= (type $ly@@367) LayerTypeType) (= (type |s#0@@55|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@55| |key#0@@25| |lo#0@@10| |hi#0@@10|) (and (and ($Is |s#0@@55| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@25|) (< |key#0@@25| 256))) (and (and (and (and (<= (LitInt 0) |lo#0@@10|) (< |lo#0@@10| |hi#0@@10|)) (<= |hi#0@@10| (+ (|Seq#Length| |s#0@@55|) 1))) (=> (> |lo#0@@10| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@55| (- |lo#0@@10| 1)))) |key#0@@25|))) (=> (<= |hi#0@@10| (|Seq#Length| |s#0@@55|)) (Byte__Order.__default.lt |key#0@@25| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@55| (- |hi#0@@10| 1)))))))))) (and (=> (< (+ |lo#0@@10| 1) |hi#0@@10|) (let ((|mid#3@@1| (Div (+ |lo#0@@10| |hi#0@@10|) (LitInt 2)))) (and (and (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@55| (- |mid#3@@1| 1)))) |key#0@@25|) (=> (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@55| (- |mid#3@@1| 1)))) |key#0@@25|) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@55| |key#0@@25| |mid#3@@1| |hi#0@@10|))) (=> (not (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@55| (- |mid#3@@1| 1)))) |key#0@@25|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@55| |key#0@@25| |lo#0@@10| |mid#3@@1|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@367) |s#0@@55| |key#0@@25| |lo#0@@10| |hi#0@@10|) (ite (< (+ |lo#0@@10| 1) |hi#0@@10|) (let ((|mid#3@@2| (Div (+ |lo#0@@10| |hi#0@@10|) (LitInt 2)))) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@55| (- |mid#3@@2| 1)))) |key#0@@25|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@367 |s#0@@55| |key#0@@25| |mid#3@@2| |hi#0@@10|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@367 |s#0@@55| |key#0@@25| |lo#0@@10| |mid#3@@2|))) |lo#0@@10|)))) :qid |totalord.482:12| :skolemid |11993| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@367) |s#0@@55| |key#0@@25| |lo#0@@10| |hi#0@@10|)) ))))
(assert  (=> true (forall (($ly@@368 T@U) (|s#0@@56| T@U) (|key#0@@26| Int) (|lo#0@@11| Int) (|hi#0@@11| Int) ) (!  (=> (and (and (= (type $ly@@368) LayerTypeType) (= (type |s#0@@56|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@56| |key#0@@26| (LitInt |lo#0@@11|) (LitInt |hi#0@@11|)) (and (and ($Is |s#0@@56| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@26|) (< |key#0@@26| 256))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@11|)) (< |lo#0@@11| |hi#0@@11|)) (<= (LitInt |hi#0@@11|) (+ (|Seq#Length| |s#0@@56|) 1))) (=> (> |lo#0@@11| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@56| (LitInt (- |lo#0@@11| 1))))) |key#0@@26|))) (=> (<= (LitInt |hi#0@@11|) (|Seq#Length| |s#0@@56|)) (Byte__Order.__default.lt |key#0@@26| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@56| (LitInt (- |hi#0@@11| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@11| 1) |hi#0@@11|)))) (let ((|mid#4@@1| (LitInt (Div (+ |lo#0@@11| |hi#0@@11|) (LitInt 2))))) (and (and (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@56| (- |mid#4@@1| 1)))) |key#0@@26|) (=> (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@56| (- |mid#4@@1| 1)))) |key#0@@26|) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@56| |key#0@@26| |mid#4@@1| (LitInt |hi#0@@11|)))) (=> (not (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@56| (- |mid#4@@1| 1)))) |key#0@@26|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@56| |key#0@@26| (LitInt |lo#0@@11|) |mid#4@@1|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@368) |s#0@@56| |key#0@@26| (LitInt |lo#0@@11|) (LitInt |hi#0@@11|)) (ite (< (+ |lo#0@@11| 1) |hi#0@@11|) (let ((|mid#4@@2| (LitInt (Div (+ |lo#0@@11| |hi#0@@11|) (LitInt 2))))) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@56| (LitInt (- |mid#4@@2| 1))))) |key#0@@26|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@368) |s#0@@56| |key#0@@26| |mid#4@@2| (LitInt |hi#0@@11|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@368) |s#0@@56| |key#0@@26| (LitInt |lo#0@@11|) |mid#4@@2|))) |lo#0@@11|)))) :qid |totalord.482:12| :weight 3 :skolemid |11994| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@368) |s#0@@56| |key#0@@26| (LitInt |lo#0@@11|) (LitInt |hi#0@@11|))) ))))
(assert  (=> true (forall (($ly@@369 T@U) (|s#0@@57| T@U) (|key#0@@27| Int) (|lo#0@@12| Int) (|hi#0@@12| Int) ) (!  (=> (and (and (= (type $ly@@369) LayerTypeType) (= (type |s#0@@57|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@57|) (LitInt |key#0@@27|) (LitInt |lo#0@@12|) (LitInt |hi#0@@12|)) (and (and ($Is |s#0@@57| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@27|) (< |key#0@@27| 256))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@12|)) (< |lo#0@@12| |hi#0@@12|)) (<= (LitInt |hi#0@@12|) (+ (|Seq#Length| (Lit |s#0@@57|)) 1))) (=> (> |lo#0@@12| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@57|) (LitInt (- |lo#0@@12| 1))))) (LitInt |key#0@@27|)))) (=> (<= (LitInt |hi#0@@12|) (|Seq#Length| (Lit |s#0@@57|))) (Byte__Order.__default.lt (LitInt |key#0@@27|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@57|) (LitInt (- |hi#0@@12| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@12| 1) |hi#0@@12|)))) (let ((|mid#5@@1| (LitInt (Div (+ |lo#0@@12| |hi#0@@12|) (LitInt 2))))) (and (and (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@57|) (- |mid#5@@1| 1)))) (LitInt |key#0@@27|)) (=> (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@57|) (- |mid#5@@1| 1)))) (LitInt |key#0@@27|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@57|) (LitInt |key#0@@27|) |mid#5@@1| (LitInt |hi#0@@12|)))) (=> (not (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@57|) (- |mid#5@@1| 1)))) (LitInt |key#0@@27|))) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@57|) (LitInt |key#0@@27|) (LitInt |lo#0@@12|) |mid#5@@1|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@369) (Lit |s#0@@57|) (LitInt |key#0@@27|) (LitInt |lo#0@@12|) (LitInt |hi#0@@12|)) (ite (< (+ |lo#0@@12| 1) |hi#0@@12|) (let ((|mid#5@@2| (LitInt (Div (+ |lo#0@@12| |hi#0@@12|) (LitInt 2))))) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@57|) (LitInt (- |mid#5@@2| 1))))) (LitInt |key#0@@27|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@369) (Lit |s#0@@57|) (LitInt |key#0@@27|) |mid#5@@2| (LitInt |hi#0@@12|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@369) (Lit |s#0@@57|) (LitInt |key#0@@27|) (LitInt |lo#0@@12|) |mid#5@@2|))) |lo#0@@12|)))) :qid |totalord.482:12| :weight 3 :skolemid |11995| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@369) (Lit |s#0@@57|) (LitInt |key#0@@27|) (LitInt |lo#0@@12|) (LitInt |hi#0@@12|))) ))))
(assert (forall (($ly@@370 T@U) (|s#0@@58| T@U) (|key#0@@28| Int) ) (!  (=> (and (= (type $ly@@370) LayerTypeType) (= (type |s#0@@58|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@370) |s#0@@58| |key#0@@28|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@370 |s#0@@58| |key#0@@28|))) :qid |totalord.502:22| :skolemid |11996| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@370) |s#0@@58| |key#0@@28|)) )))
(assert (forall (($ly@@371 T@U) (|s#0@@59| T@U) (|key#0@@29| Int) ) (!  (=> (and (= (type $ly@@371) LayerTypeType) (= (type |s#0@@59|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@371 |s#0@@59| |key#0@@29|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $LZ |s#0@@59| |key#0@@29|))) :qid |totalord.502:22| :skolemid |11997| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGt (AsFuelBottom $ly@@371) |s#0@@59| |key#0@@29|)) )))
(assert  (=> true (forall (($ly@@372 T@U) (|s#0@@60| T@U) (|key#0@@30| Int) ) (!  (=> (and (and (= (type $ly@@372) LayerTypeType) (= (type |s#0@@60|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@60| |key#0@@30|) (and ($Is |s#0@@60| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@30|) (< |key#0@@30| 256))))) (and (and (and (<= (LitInt 0) (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@372 |s#0@@60| |key#0@@30|)) (<= (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@372 |s#0@@60| |key#0@@30|) (|Seq#Length| |s#0@@60|))) (=> (> (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@372 |s#0@@60| |key#0@@30|) 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@60| (- (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@372 |s#0@@60| |key#0@@30|) 1)))) |key#0@@30|))) (=> (< (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@372 |s#0@@60| |key#0@@30|) (|Seq#Length| |s#0@@60|)) (Byte__Order.__default.lt |key#0@@30| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@60| (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@372 |s#0@@60| |key#0@@30|)))))))) :qid |totalord.502:22| :skolemid |11998| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@372 |s#0@@60| |key#0@@30|)) ))))
(assert (forall (($ly@@373 T@U) (|s#0@@61| T@U) (|key#0@@31| Int) ) (!  (=> (and (and (= (type $ly@@373) LayerTypeType) (= (type |s#0@@61|) (SeqType BoxType))) (and ($Is |s#0@@61| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@31|) (< |key#0@@31| 256)))) (and (=> (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@373 |s#0@@61| |key#0@@31|) true) (=> true (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@373 |s#0@@61| |key#0@@31|)))) :qid |totalord.502:22| :skolemid |11999| :pattern ( (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@373 |s#0@@61| |key#0@@31|)) )))
(assert  (=> true (forall (($ly@@374 T@U) (|s#0@@62| T@U) (|key#0@@32| Int) ) (!  (=> (and (and (= (type $ly@@374) LayerTypeType) (= (type |s#0@@62|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@62| |key#0@@32|) (and ($Is |s#0@@62| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@32|) (< |key#0@@32| 256))))) (and (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@62| |key#0@@32| (LitInt 0) (+ (|Seq#Length| |s#0@@62|) 1)) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@374) |s#0@@62| |key#0@@32|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) |s#0@@62| |key#0@@32| (LitInt 0) (+ (|Seq#Length| |s#0@@62|) 1))))) :qid |totalord.502:22| :skolemid |12000| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@374) |s#0@@62| |key#0@@32|)) ))))
(assert  (=> true (forall (($ly@@375 T@U) (|s#0@@63| T@U) (|key#0@@33| Int) ) (!  (=> (and (and (= (type $ly@@375) LayerTypeType) (= (type |s#0@@63|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (Lit |s#0@@63|) (LitInt |key#0@@33|)) (and ($Is |s#0@@63| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@33|) (< |key#0@@33| 256))))) (and (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@63|) (LitInt |key#0@@33|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@63|)) 1)) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@375) (Lit |s#0@@63|) (LitInt |key#0@@33|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) (Lit |s#0@@63|) (LitInt |key#0@@33|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@63|)) 1))))) :qid |totalord.502:22| :weight 3 :skolemid |12001| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@375) (Lit |s#0@@63|) (LitInt |key#0@@33|))) ))))
(assert  (=> true (forall ((|a#0@@88| T@U) (|b#0@@62| T@U) ) (!  (=> (and (and (= (type |a#0@@88|) (MapType0Type BoxType boolType)) (= (type |b#0@@62|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLte#canCall| |a#0@@88| |b#0@@62|) (and ($Is |a#0@@88| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@62| (TSet Tclass.NativeTypes.byte))))) true) :qid |totalord.675:23| :skolemid |12002| :pattern ( (Byte__Order.__default.SetAllLte |a#0@@88| |b#0@@62|)) ))))
(assert (forall ((|a#0@@89| T@U) (|b#0@@63| T@U) ) (!  (=> (and (and (= (type |a#0@@89|) (MapType0Type BoxType boolType)) (= (type |b#0@@63|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@89| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@63| (TSet Tclass.NativeTypes.byte)))) (and (=> (|Byte__Order.__default.SetAllLte#requires| |a#0@@89| |b#0@@63|) true) (=> true (|Byte__Order.__default.SetAllLte#requires| |a#0@@89| |b#0@@63|)))) :qid |totalord.675:23| :skolemid |12003| :pattern ( (|Byte__Order.__default.SetAllLte#requires| |a#0@@89| |b#0@@63|)) )))
(assert  (=> true (forall ((|a#0@@90| T@U) (|b#0@@64| T@U) ) (!  (=> (and (and (= (type |a#0@@90|) (MapType0Type BoxType boolType)) (= (type |b#0@@64|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLte#canCall| |a#0@@90| |b#0@@64|) (and ($Is |a#0@@90| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@64| (TSet Tclass.NativeTypes.byte))))) (and (forall ((|x#2| Int) (|y#2| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#2|) (< |x#2| 256)) (and (<= (LitInt 0) |y#2|) (< |y#2| 256))) (=> (U_2_bool (MapType0Select |b#0@@64| ($Box (int_2_U |y#2|)))) (|Byte__Order.__default.lte#canCall| |x#2| |y#2|))) :qid |totalord.676:12| :skolemid |12004| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#2| |y#2|)) :pattern ( (MapType0Select |b#0@@64| ($Box (int_2_U |y#2|))) (MapType0Select |a#0@@90| ($Box (int_2_U |x#2|)))) )) (and (=> (Byte__Order.__default.SetAllLte |a#0@@90| |b#0@@64|) (forall ((|x#2@@0| Int) (|y#2@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#2@@0|) (< |x#2@@0| 256)) (and (<= (LitInt 0) |y#2@@0|) (< |y#2@@0| 256))) (=> (and (U_2_bool (MapType0Select |a#0@@90| ($Box (int_2_U |x#2@@0|)))) (U_2_bool (MapType0Select |b#0@@64| ($Box (int_2_U |y#2@@0|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#2@@0| |y#2@@0|))) :qid |totalord.676:12| :skolemid |12005| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#2@@0| |y#2@@0|)) :pattern ( (MapType0Select |b#0@@64| ($Box (int_2_U |y#2@@0|))) (MapType0Select |a#0@@90| ($Box (int_2_U |x#2@@0|)))) ))) (=> (forall ((|x#2@@1| Int) (|y#2@@1| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#2@@1|) (< |x#2@@1| 256)) (and (<= (LitInt 0) |y#2@@1|) (< |y#2@@1| 256))) (=> (and (U_2_bool (MapType0Select |a#0@@90| ($Box (int_2_U |x#2@@1|)))) (U_2_bool (MapType0Select |b#0@@64| ($Box (int_2_U |y#2@@1|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#2@@1| |y#2@@1|))) :qid |totalord.676:12| :skolemid |12005| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#2@@1| |y#2@@1|)) :pattern ( (MapType0Select |b#0@@64| ($Box (int_2_U |y#2@@1|))) (MapType0Select |a#0@@90| ($Box (int_2_U |x#2@@1|)))) )) (Byte__Order.__default.SetAllLte |a#0@@90| |b#0@@64|))))) :qid |totalord.675:23| :skolemid |12006| :pattern ( (Byte__Order.__default.SetAllLte |a#0@@90| |b#0@@64|)) ))))
(assert  (=> true (forall ((|a#0@@91| T@U) (|b#0@@65| T@U) ) (!  (=> (and (and (= (type |a#0@@91|) (MapType0Type BoxType boolType)) (= (type |b#0@@65|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLte#canCall| (Lit |a#0@@91|) (Lit |b#0@@65|)) (and ($Is |a#0@@91| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@65| (TSet Tclass.NativeTypes.byte))))) (and (forall ((|x#3| Int) (|y#3| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#3|) (< |x#3| 256)) (and (<= (LitInt 0) |y#3|) (< |y#3| 256))) (=> (U_2_bool (MapType0Select (Lit |b#0@@65|) ($Box (int_2_U |y#3|)))) (|Byte__Order.__default.lte#canCall| |x#3| |y#3|))) :qid |totalord.676:12| :skolemid |12007| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#3| |y#3|)) :pattern ( (MapType0Select |b#0@@65| ($Box (int_2_U |y#3|))) (MapType0Select |a#0@@91| ($Box (int_2_U |x#3|)))) )) (and (=> (Byte__Order.__default.SetAllLte (Lit |a#0@@91|) (Lit |b#0@@65|)) (forall ((|x#3@@0| Int) (|y#3@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#3@@0|) (< |x#3@@0| 256)) (and (<= (LitInt 0) |y#3@@0|) (< |y#3@@0| 256))) (=> (and (U_2_bool (MapType0Select (Lit |a#0@@91|) ($Box (int_2_U |x#3@@0|)))) (U_2_bool (MapType0Select (Lit |b#0@@65|) ($Box (int_2_U |y#3@@0|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#3@@0| |y#3@@0|))) :qid |totalord.676:12| :skolemid |12008| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#3@@0| |y#3@@0|)) :pattern ( (MapType0Select |b#0@@65| ($Box (int_2_U |y#3@@0|))) (MapType0Select |a#0@@91| ($Box (int_2_U |x#3@@0|)))) ))) (=> (forall ((|x#3@@1| Int) (|y#3@@1| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#3@@1|) (< |x#3@@1| 256)) (and (<= (LitInt 0) |y#3@@1|) (< |y#3@@1| 256))) (=> (and (U_2_bool (MapType0Select (Lit |a#0@@91|) ($Box (int_2_U |x#3@@1|)))) (U_2_bool (MapType0Select (Lit |b#0@@65|) ($Box (int_2_U |y#3@@1|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#3@@1| |y#3@@1|))) :qid |totalord.676:12| :skolemid |12008| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#3@@1| |y#3@@1|)) :pattern ( (MapType0Select |b#0@@65| ($Box (int_2_U |y#3@@1|))) (MapType0Select |a#0@@91| ($Box (int_2_U |x#3@@1|)))) )) (Byte__Order.__default.SetAllLte (Lit |a#0@@91|) (Lit |b#0@@65|)))))) :qid |totalord.675:23| :weight 3 :skolemid |12009| :pattern ( (Byte__Order.__default.SetAllLte (Lit |a#0@@91|) (Lit |b#0@@65|))) ))))
(assert  (=> true (forall ((|a#0@@92| T@U) (|b#0@@66| T@U) ) (!  (=> (and (and (= (type |a#0@@92|) (MapType0Type BoxType boolType)) (= (type |b#0@@66|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLt#canCall| |a#0@@92| |b#0@@66|) (and ($Is |a#0@@92| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@66| (TSet Tclass.NativeTypes.byte))))) true) :qid |totalord.679:22| :skolemid |12010| :pattern ( (Byte__Order.__default.SetAllLt |a#0@@92| |b#0@@66|)) ))))
(assert (forall ((|a#0@@93| T@U) (|b#0@@67| T@U) ) (!  (=> (and (and (= (type |a#0@@93|) (MapType0Type BoxType boolType)) (= (type |b#0@@67|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@93| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@67| (TSet Tclass.NativeTypes.byte)))) (and (=> (|Byte__Order.__default.SetAllLt#requires| |a#0@@93| |b#0@@67|) true) (=> true (|Byte__Order.__default.SetAllLt#requires| |a#0@@93| |b#0@@67|)))) :qid |totalord.679:22| :skolemid |12011| :pattern ( (|Byte__Order.__default.SetAllLt#requires| |a#0@@93| |b#0@@67|)) )))
(assert  (=> true (forall ((|a#0@@94| T@U) (|b#0@@68| T@U) ) (!  (=> (and (and (= (type |a#0@@94|) (MapType0Type BoxType boolType)) (= (type |b#0@@68|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLt#canCall| |a#0@@94| |b#0@@68|) (and ($Is |a#0@@94| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@68| (TSet Tclass.NativeTypes.byte))))) (and (forall ((|x#2@@2| Int) (|y#2@@2| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#2@@2|) (< |x#2@@2| 256)) (and (<= (LitInt 0) |y#2@@2|) (< |y#2@@2| 256))) (=> (U_2_bool (MapType0Select |b#0@@68| ($Box (int_2_U |y#2@@2|)))) (|Byte__Order.__default.lt#canCall| |x#2@@2| |y#2@@2|))) :qid |totalord.680:12| :skolemid |12012| :pattern ( (Byte__Order.__default.lt |x#2@@2| |y#2@@2|)) :pattern ( (MapType0Select |b#0@@68| ($Box (int_2_U |y#2@@2|))) (MapType0Select |a#0@@94| ($Box (int_2_U |x#2@@2|)))) )) (and (=> (Byte__Order.__default.SetAllLt |a#0@@94| |b#0@@68|) (forall ((|x#2@@3| Int) (|y#2@@3| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#2@@3|) (< |x#2@@3| 256)) (and (<= (LitInt 0) |y#2@@3|) (< |y#2@@3| 256))) (=> (and (U_2_bool (MapType0Select |a#0@@94| ($Box (int_2_U |x#2@@3|)))) (U_2_bool (MapType0Select |b#0@@68| ($Box (int_2_U |y#2@@3|))))) (Byte__Order.__default.lt |x#2@@3| |y#2@@3|))) :qid |totalord.680:12| :skolemid |12013| :pattern ( (Byte__Order.__default.lt |x#2@@3| |y#2@@3|)) :pattern ( (MapType0Select |b#0@@68| ($Box (int_2_U |y#2@@3|))) (MapType0Select |a#0@@94| ($Box (int_2_U |x#2@@3|)))) ))) (=> (forall ((|x#2@@4| Int) (|y#2@@4| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#2@@4|) (< |x#2@@4| 256)) (and (<= (LitInt 0) |y#2@@4|) (< |y#2@@4| 256))) (=> (and (U_2_bool (MapType0Select |a#0@@94| ($Box (int_2_U |x#2@@4|)))) (U_2_bool (MapType0Select |b#0@@68| ($Box (int_2_U |y#2@@4|))))) (Byte__Order.__default.lt |x#2@@4| |y#2@@4|))) :qid |totalord.680:12| :skolemid |12013| :pattern ( (Byte__Order.__default.lt |x#2@@4| |y#2@@4|)) :pattern ( (MapType0Select |b#0@@68| ($Box (int_2_U |y#2@@4|))) (MapType0Select |a#0@@94| ($Box (int_2_U |x#2@@4|)))) )) (Byte__Order.__default.SetAllLt |a#0@@94| |b#0@@68|))))) :qid |totalord.679:22| :skolemid |12014| :pattern ( (Byte__Order.__default.SetAllLt |a#0@@94| |b#0@@68|)) ))))
(assert  (=> true (forall ((|a#0@@95| T@U) (|b#0@@69| T@U) ) (!  (=> (and (and (= (type |a#0@@95|) (MapType0Type BoxType boolType)) (= (type |b#0@@69|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLt#canCall| (Lit |a#0@@95|) (Lit |b#0@@69|)) (and ($Is |a#0@@95| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@69| (TSet Tclass.NativeTypes.byte))))) (and (forall ((|x#3@@2| Int) (|y#3@@2| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#3@@2|) (< |x#3@@2| 256)) (and (<= (LitInt 0) |y#3@@2|) (< |y#3@@2| 256))) (=> (U_2_bool (MapType0Select (Lit |b#0@@69|) ($Box (int_2_U |y#3@@2|)))) (|Byte__Order.__default.lt#canCall| |x#3@@2| |y#3@@2|))) :qid |totalord.680:12| :skolemid |12015| :pattern ( (Byte__Order.__default.lt |x#3@@2| |y#3@@2|)) :pattern ( (MapType0Select |b#0@@69| ($Box (int_2_U |y#3@@2|))) (MapType0Select |a#0@@95| ($Box (int_2_U |x#3@@2|)))) )) (and (=> (Byte__Order.__default.SetAllLt (Lit |a#0@@95|) (Lit |b#0@@69|)) (forall ((|x#3@@3| Int) (|y#3@@3| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#3@@3|) (< |x#3@@3| 256)) (and (<= (LitInt 0) |y#3@@3|) (< |y#3@@3| 256))) (=> (and (U_2_bool (MapType0Select (Lit |a#0@@95|) ($Box (int_2_U |x#3@@3|)))) (U_2_bool (MapType0Select (Lit |b#0@@69|) ($Box (int_2_U |y#3@@3|))))) (Byte__Order.__default.lt |x#3@@3| |y#3@@3|))) :qid |totalord.680:12| :skolemid |12016| :pattern ( (Byte__Order.__default.lt |x#3@@3| |y#3@@3|)) :pattern ( (MapType0Select |b#0@@69| ($Box (int_2_U |y#3@@3|))) (MapType0Select |a#0@@95| ($Box (int_2_U |x#3@@3|)))) ))) (=> (forall ((|x#3@@4| Int) (|y#3@@4| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#3@@4|) (< |x#3@@4| 256)) (and (<= (LitInt 0) |y#3@@4|) (< |y#3@@4| 256))) (=> (and (U_2_bool (MapType0Select (Lit |a#0@@95|) ($Box (int_2_U |x#3@@4|)))) (U_2_bool (MapType0Select (Lit |b#0@@69|) ($Box (int_2_U |y#3@@4|))))) (Byte__Order.__default.lt |x#3@@4| |y#3@@4|))) :qid |totalord.680:12| :skolemid |12016| :pattern ( (Byte__Order.__default.lt |x#3@@4| |y#3@@4|)) :pattern ( (MapType0Select |b#0@@69| ($Box (int_2_U |y#3@@4|))) (MapType0Select |a#0@@95| ($Box (int_2_U |x#3@@4|)))) )) (Byte__Order.__default.SetAllLt (Lit |a#0@@95|) (Lit |b#0@@69|)))))) :qid |totalord.679:22| :weight 3 :skolemid |12017| :pattern ( (Byte__Order.__default.SetAllLt (Lit |a#0@@95|) (Lit |b#0@@69|))) ))))
(assert (forall (($ly@@376 T@U) (|a#0@@96| Int) ) (!  (=> (= (type $ly@@376) LayerTypeType) (and (=> (Byte__Order.__default.NotMinimum ($LS $ly@@376) |a#0@@96|) (Byte__Order.__default.NotMinimum $ly@@376 |a#0@@96|)) (=> (Byte__Order.__default.NotMinimum $ly@@376 |a#0@@96|) (Byte__Order.__default.NotMinimum ($LS $ly@@376) |a#0@@96|)))) :qid |totalord.696:23| :skolemid |12018| :pattern ( (Byte__Order.__default.NotMinimum ($LS $ly@@376) |a#0@@96|)) )))
(assert (forall (($ly@@377 T@U) (|a#0@@97| Int) ) (!  (=> (= (type $ly@@377) LayerTypeType) (and (=> (Byte__Order.__default.NotMinimum $ly@@377 |a#0@@97|) (Byte__Order.__default.NotMinimum $LZ |a#0@@97|)) (=> (Byte__Order.__default.NotMinimum $LZ |a#0@@97|) (Byte__Order.__default.NotMinimum $ly@@377 |a#0@@97|)))) :qid |totalord.696:23| :skolemid |12019| :pattern ( (Byte__Order.__default.NotMinimum (AsFuelBottom $ly@@377) |a#0@@97|)) )))
(assert  (=> true (forall (($ly@@378 T@U) (|a#0@@98| Int) ) (!  (=> (and (= (type $ly@@378) LayerTypeType) (or (|Byte__Order.__default.NotMinimum#canCall| |a#0@@98|) (and (<= (LitInt 0) |a#0@@98|) (< |a#0@@98| 256)))) true) :qid |totalord.696:23| :skolemid |12020| :pattern ( (Byte__Order.__default.NotMinimum $ly@@378 |a#0@@98|)) ))))
(assert (forall (($ly@@379 T@U) (|a#0@@99| Int) ) (!  (=> (= (type $ly@@379) LayerTypeType) (=> (and (<= (LitInt 0) |a#0@@99|) (< |a#0@@99| 256)) (and (=> (|Byte__Order.__default.NotMinimum#requires| $ly@@379 |a#0@@99|) true) (=> true (|Byte__Order.__default.NotMinimum#requires| $ly@@379 |a#0@@99|))))) :qid |totalord.696:23| :skolemid |12021| :pattern ( (|Byte__Order.__default.NotMinimum#requires| $ly@@379 |a#0@@99|)) )))
(assert  (=> true (forall (($ly@@380 T@U) (|a#0@@100| Int) ) (!  (=> (and (= (type $ly@@380) LayerTypeType) (or (|Byte__Order.__default.NotMinimum#canCall| |a#0@@100|) (and (<= (LitInt 0) |a#0@@100|) (< |a#0@@100| 256)))) (and (forall ((|b#2@@0| Int) ) (!  (=> (and (<= (LitInt 0) |b#2@@0|) (< |b#2@@0| 256)) (|Byte__Order.__default.lt#canCall| |b#2@@0| |a#0@@100|)) :qid |totalord.697:12| :skolemid |12022| :pattern ( (Byte__Order.__default.lt |b#2@@0| |a#0@@100|)) )) (and (=> (Byte__Order.__default.NotMinimum ($LS $ly@@380) |a#0@@100|) (exists ((|b#2@@1| Int) ) (!  (and (and (<= (LitInt 0) |b#2@@1|) (< |b#2@@1| 256)) (Byte__Order.__default.lt |b#2@@1| |a#0@@100|)) :qid |totalord.697:12| :skolemid |12023| :pattern ( (Byte__Order.__default.lt |b#2@@1| |a#0@@100|)) ))) (=> (exists ((|b#2@@2| Int) ) (!  (and (and (<= (LitInt 0) |b#2@@2|) (< |b#2@@2| 256)) (Byte__Order.__default.lt |b#2@@2| |a#0@@100|)) :qid |totalord.697:12| :skolemid |12023| :pattern ( (Byte__Order.__default.lt |b#2@@2| |a#0@@100|)) )) (Byte__Order.__default.NotMinimum ($LS $ly@@380) |a#0@@100|))))) :qid |totalord.696:23| :skolemid |12024| :pattern ( (Byte__Order.__default.NotMinimum ($LS $ly@@380) |a#0@@100|)) ))))
(assert  (=> true (forall (($ly@@381 T@U) (|a#0@@101| Int) ) (!  (=> (and (= (type $ly@@381) LayerTypeType) (or (|Byte__Order.__default.NotMinimum#canCall| (LitInt |a#0@@101|)) (and (<= (LitInt 0) |a#0@@101|) (< |a#0@@101| 256)))) (and (forall ((|b#3@@1| Int) ) (!  (=> (and (<= (LitInt 0) |b#3@@1|) (< |b#3@@1| 256)) (|Byte__Order.__default.lt#canCall| |b#3@@1| (LitInt |a#0@@101|))) :qid |totalord.697:12| :skolemid |12025| :pattern ( (Byte__Order.__default.lt |b#3@@1| |a#0@@101|)) )) (and (=> (Byte__Order.__default.NotMinimum ($LS $ly@@381) (LitInt |a#0@@101|)) (exists ((|b#3@@2| Int) ) (!  (and (and (<= (LitInt 0) |b#3@@2|) (< |b#3@@2| 256)) (Byte__Order.__default.lt |b#3@@2| (LitInt |a#0@@101|))) :qid |totalord.697:12| :skolemid |12026| :pattern ( (Byte__Order.__default.lt |b#3@@2| |a#0@@101|)) ))) (=> (exists ((|b#3@@3| Int) ) (!  (and (and (<= (LitInt 0) |b#3@@3|) (< |b#3@@3| 256)) (Byte__Order.__default.lt |b#3@@3| (LitInt |a#0@@101|))) :qid |totalord.697:12| :skolemid |12026| :pattern ( (Byte__Order.__default.lt |b#3@@3| |a#0@@101|)) )) (Byte__Order.__default.NotMinimum ($LS $ly@@381) (LitInt |a#0@@101|)))))) :qid |totalord.696:23| :weight 3 :skolemid |12027| :pattern ( (Byte__Order.__default.NotMinimum ($LS $ly@@381) (LitInt |a#0@@101|))) ))))
(assert (forall ((arg0@@314 T@U) (arg1@@180 T@U) (arg2@@123 Int) (arg3@@86 T@U) ) (! (= (type (Byte__Order.__default.MapPivotedUnion arg0@@314 arg1@@180 arg2@@123 arg3@@86)) (MapType BoxType BoxType)) :qid |funType:Byte__Order.__default.MapPivotedUnion| :pattern ( (Byte__Order.__default.MapPivotedUnion arg0@@314 arg1@@180 arg2@@123 arg3@@86)) )))
(assert  (=> true (forall ((Byte_Order._default.MapPivotedUnion$Value T@U) (|left#0| T@U) (|pivot#0| Int) (|right#0| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.MapPivotedUnion$Value) TyType) (= (type |left#0|) (MapType BoxType BoxType))) (= (type |right#0|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapPivotedUnion#canCall| Byte_Order._default.MapPivotedUnion$Value |left#0| |pivot#0| |right#0|) (and (and ($Is |left#0| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value)) (and (<= (LitInt 0) |pivot#0|) (< |pivot#0| 256))) ($Is |right#0| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value))))) ($Is (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value |left#0| |pivot#0| |right#0|) (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value))) :qid |unknown.0:0| :skolemid |12028| :pattern ( (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value |left#0| |pivot#0| |right#0|)) ))))
(assert (forall ((Byte_Order._default.MapPivotedUnion$Value@@0 T@U) (|left#0@@0| T@U) (|pivot#0@@0| Int) (|right#0@@0| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.MapPivotedUnion$Value@@0) TyType) (= (type |left#0@@0|) (MapType BoxType BoxType))) (= (type |right#0@@0|) (MapType BoxType BoxType))) (and (and ($Is |left#0@@0| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@0)) (and (<= (LitInt 0) |pivot#0@@0|) (< |pivot#0@@0| 256))) ($Is |right#0@@0| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@0)))) (and (=> (|Byte__Order.__default.MapPivotedUnion#requires| Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@0| |pivot#0@@0| |right#0@@0|) true) (=> true (|Byte__Order.__default.MapPivotedUnion#requires| Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@0| |pivot#0@@0| |right#0@@0|)))) :qid |unknown.0:0| :skolemid |12029| :pattern ( (|Byte__Order.__default.MapPivotedUnion#requires| Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@0| |pivot#0@@0| |right#0@@0|)) )))
(assert  (and (forall ((arg0@@315 T@U) (arg1@@181 Int) ) (! (= (type (|lambda#128| arg0@@315 arg1@@181)) (MapType0Type BoxType boolType)) :qid |funType:lambda#128| :pattern ( (|lambda#128| arg0@@315 arg1@@181)) )) (forall ((arg0@@316 T@U) (arg1@@182 T@U) (arg2@@124 Int) ) (! (= (type (|lambda#129| arg0@@316 arg1@@182 arg2@@124)) (MapType0Type BoxType boolType)) :qid |funType:lambda#129| :pattern ( (|lambda#129| arg0@@316 arg1@@182 arg2@@124)) ))))
(assert  (=> true (forall ((Byte_Order._default.MapPivotedUnion$Value@@1 T@U) (|left#0@@1| T@U) (|pivot#0@@1| Int) (|right#0@@1| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.MapPivotedUnion$Value@@1) TyType) (= (type |left#0@@1|) (MapType BoxType BoxType))) (= (type |right#0@@1|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapPivotedUnion#canCall| Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| |pivot#0@@1| |right#0@@1|) (and (and ($Is |left#0@@1| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1)) (and (<= (LitInt 0) |pivot#0@@1|) (< |pivot#0@@1| 256))) ($Is |right#0@@1| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1))))) (and (and (and (forall ((|k#4@@6| Int) ) (!  (=> (and (<= (LitInt 0) |k#4@@6|) (< |k#4@@6| 256)) (|Byte__Order.__default.lt#canCall| |k#4@@6| |pivot#0@@1|)) :qid |totalord.716:57| :skolemid |12030| :pattern ( (Byte__Order.__default.lt |k#4@@6| |pivot#0@@1|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| (|lambda#128| Tclass.NativeTypes.byte |pivot#0@@1|))) (let ((|restricted_left#2| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| (|lambda#128| Tclass.NativeTypes.byte |pivot#0@@1|)))) (and (and (forall ((|k#5@@6| Int) ) (!  (=> (and (<= (LitInt 0) |k#5@@6|) (< |k#5@@6| 256)) (|Byte__Order.__default.lte#canCall| |pivot#0@@1| |k#5@@6|)) :qid |totalord.717:59| :skolemid |12031| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |pivot#0@@1| |k#5@@6|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@1| (|lambda#129| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte |pivot#0@@1|))) (let ((|restricted_right#2| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@1| (|lambda#129| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte |pivot#0@@1|)))) (|Maps.__default.MapDisjointUnion#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |restricted_left#2| |restricted_right#2|))))) (= (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| |pivot#0@@1| |right#0@@1|) (let ((|restricted_left#2@@0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| (|lambda#128| Tclass.NativeTypes.byte |pivot#0@@1|)))) (let ((|restricted_right#2@@0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@1| (|lambda#129| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte |pivot#0@@1|)))) (Maps.__default.MapDisjointUnion Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 StartFuel_Maps._default.MapDisjointUnion |restricted_left#2@@0| |restricted_right#2@@0|)))))) :qid |unknown.0:0| :skolemid |12032| :pattern ( (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| |pivot#0@@1| |right#0@@1|)) ))))
(assert  (=> true (forall ((Byte_Order._default.MapPivotedUnion$Value@@2 T@U) (|left#0@@2| T@U) (|pivot#0@@2| Int) (|right#0@@2| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.MapPivotedUnion$Value@@2) TyType) (= (type |left#0@@2|) (MapType BoxType BoxType))) (= (type |right#0@@2|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapPivotedUnion#canCall| Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (LitInt |pivot#0@@2|) (Lit |right#0@@2|)) (and (and ($Is |left#0@@2| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2)) (and (<= (LitInt 0) |pivot#0@@2|) (< |pivot#0@@2| 256))) ($Is |right#0@@2| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2))))) (and (and (and (forall ((|k#6| Int) ) (!  (=> (and (<= (LitInt 0) |k#6|) (< |k#6| 256)) (|Byte__Order.__default.lt#canCall| |k#6| (LitInt |pivot#0@@2|))) :qid |totalord.716:57| :skolemid |12033| :pattern ( (Byte__Order.__default.lt |k#6| |pivot#0@@2|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (|lambda#128| Tclass.NativeTypes.byte (LitInt |pivot#0@@2|)))) (let ((|restricted_left#3| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (|lambda#128| Tclass.NativeTypes.byte (LitInt |pivot#0@@2|))))) (and (and (forall ((|k#7| Int) ) (!  (=> (and (<= (LitInt 0) |k#7|) (< |k#7| 256)) (|Byte__Order.__default.lte#canCall| (LitInt |pivot#0@@2|) |k#7|)) :qid |totalord.717:59| :skolemid |12034| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |pivot#0@@2| |k#7|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@2|) (|lambda#129| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte (LitInt |pivot#0@@2|)))) (let ((|restricted_right#3| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@2|) (|lambda#129| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte (LitInt |pivot#0@@2|))))) (|Maps.__default.MapDisjointUnion#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 |restricted_left#3| |restricted_right#3|))))) (= (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (LitInt |pivot#0@@2|) (Lit |right#0@@2|)) (let ((|restricted_left#3@@0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (|lambda#128| Tclass.NativeTypes.byte (LitInt |pivot#0@@2|))))) (let ((|restricted_right#3@@0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@2|) (|lambda#129| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte (LitInt |pivot#0@@2|))))) (Maps.__default.MapDisjointUnion Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 StartFuel_Maps._default.MapDisjointUnion |restricted_left#3@@0| |restricted_right#3@@0|)))))) :qid |unknown.0:0| :weight 3 :skolemid |12035| :pattern ( (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (LitInt |pivot#0@@2|) (Lit |right#0@@2|))) ))))
(assert (forall ((arg0@@317 T@U) (arg1@@183 Int) ) (! (= (type (Byte__Order.__default.SetSuccessor arg0@@317 arg1@@183)) DatatypeTypeType) :qid |funType:Byte__Order.__default.SetSuccessor| :pattern ( (Byte__Order.__default.SetSuccessor arg0@@317 arg1@@183)) )))
(assert  (=> true (forall ((|m#0@@81| T@U) (|key#0@@34| Int) ) (!  (=> (and (= (type |m#0@@81|) (MapType0Type BoxType boolType)) (or (|Byte__Order.__default.SetSuccessor#canCall| |m#0@@81| |key#0@@34|) (and ($Is |m#0@@81| (TSet Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@34|) (< |key#0@@34| 256))))) ($Is (Byte__Order.__default.SetSuccessor |m#0@@81| |key#0@@34|) (Tclass.Options.Option Tclass.NativeTypes.byte))) :qid |totalord.721:25| :skolemid |12036| :pattern ( (Byte__Order.__default.SetSuccessor |m#0@@81| |key#0@@34|)) ))))
(assert (forall (($Heap@@98 T@U) (|m#0@@82| T@U) (|key#0@@35| Int) ) (!  (=> (and (= (type $Heap@@98) (MapType0Type refType MapType1Type)) (= (type |m#0@@82|) (MapType0Type BoxType boolType))) (=> (and (and ($IsGoodHeap $Heap@@98) ($Is |m#0@@82| (TSet Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |key#0@@35|) (< |key#0@@35| 256))) (and (=> (|Byte__Order.__default.SetSuccessor#requires| |m#0@@82| |key#0@@35|) true) (=> true (|Byte__Order.__default.SetSuccessor#requires| |m#0@@82| |key#0@@35|))))) :qid |totalord.721:12| :skolemid |12037| :pattern ( (|Byte__Order.__default.SetSuccessor#requires| |m#0@@82| |key#0@@35|) ($IsGoodHeap $Heap@@98)) )))
(assert (forall ((m@@49 T@U) (key Int) ) (!  (=> (and (= (type m@@49) (MapType0Type BoxType boolType)) (|$let#4$canCall| m@@49 key)) (and (and (<= (LitInt 0) (|$let#4_next| m@@49 key)) (< (|$let#4_next| m@@49 key) 256)) (and (and (U_2_bool (MapType0Select m@@49 ($Box (int_2_U (|$let#4_next| m@@49 key))))) (Byte__Order.__default.lt key (|$let#4_next| m@@49 key))) (forall ((|other#4| Int) ) (!  (=> (and (<= (LitInt 0) |other#4|) (< |other#4| 256)) (=> (and (and (U_2_bool (MapType0Select m@@49 ($Box (int_2_U |other#4|)))) (not (= |other#4| (|$let#4_next| m@@49 key)))) (Byte__Order.__default.lt key |other#4|)) (Byte__Order.__default.lt (|$let#4_next| m@@49 key) |other#4|))) :qid |totalord.726:18| :skolemid |12042| :pattern ( (Byte__Order.__default.lt (|$let#4_next| m@@49 key) |other#4|)) :pattern ( (Byte__Order.__default.lt key |other#4|)) :pattern ( (MapType0Select m@@49 ($Box (int_2_U |other#4|)))) ))))) :qid |totalord.723:8| :skolemid |12043| :pattern ( (|$let#4_next| m@@49 key)) )))
(assert  (=> true (forall (($Heap@@99 T@U) (|m#0@@83| T@U) (|key#0@@36| Int) ) (!  (=> (and (and (= (type $Heap@@99) (MapType0Type refType MapType1Type)) (= (type |m#0@@83|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetSuccessor#canCall| |m#0@@83| |key#0@@36|) (and (and ($IsGoodHeap $Heap@@99) ($Is |m#0@@83| (TSet Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |key#0@@36|) (< |key#0@@36| 256))))) (and (and (forall ((|next#4| Int) ) (!  (=> (and (<= (LitInt 0) |next#4|) (< |next#4| 256)) (and (=> (U_2_bool (MapType0Select |m#0@@83| ($Box (int_2_U |next#4|)))) (|Byte__Order.__default.lt#canCall| |key#0@@36| |next#4|)) (=> (and (|Byte__Order.__default.lt#canCall| |key#0@@36| |next#4|) (Byte__Order.__default.lt |key#0@@36| |next#4|)) (forall ((|other#3| Int) ) (!  (=> (and (<= (LitInt 0) |other#3|) (< |other#3| 256)) (and (=> (not (= |other#3| |next#4|)) (|Byte__Order.__default.lt#canCall| |key#0@@36| |other#3|)) (=> (and (|Byte__Order.__default.lt#canCall| |key#0@@36| |other#3|) (Byte__Order.__default.lt |key#0@@36| |other#3|)) (|Byte__Order.__default.lt#canCall| |next#4| |other#3|)))) :qid |totalord.726:18| :skolemid |12038| :pattern ( (Byte__Order.__default.lt |next#4| |other#3|)) :pattern ( (Byte__Order.__default.lt |key#0@@36| |other#3|)) :pattern ( (MapType0Select |m#0@@83| ($Box (int_2_U |other#3|)))) ))))) :qid |totalord.723:8| :skolemid |12039| :pattern ( (Byte__Order.__default.lt |key#0@@36| |next#4|)) :pattern ( (MapType0Select |m#0@@83| ($Box (int_2_U |next#4|)))) )) (=> (exists ((|next#4@@0| Int) ) (!  (and (and (<= (LitInt 0) |next#4@@0|) (< |next#4@@0| 256)) (and (and (U_2_bool (MapType0Select |m#0@@83| ($Box (int_2_U |next#4@@0|)))) (Byte__Order.__default.lt |key#0@@36| |next#4@@0|)) (forall ((|other#3@@0| Int) ) (!  (=> (and (<= (LitInt 0) |other#3@@0|) (< |other#3@@0| 256)) (=> (and (and (U_2_bool (MapType0Select |m#0@@83| ($Box (int_2_U |other#3@@0|)))) (not (= |other#3@@0| |next#4@@0|))) (Byte__Order.__default.lt |key#0@@36| |other#3@@0|)) (Byte__Order.__default.lt |next#4@@0| |other#3@@0|))) :qid |totalord.726:18| :skolemid |12040| :pattern ( (Byte__Order.__default.lt |next#4@@0| |other#3@@0|)) :pattern ( (Byte__Order.__default.lt |key#0@@36| |other#3@@0|)) :pattern ( (MapType0Select |m#0@@83| ($Box (int_2_U |other#3@@0|)))) )))) :qid |totalord.723:8| :skolemid |12041| :pattern ( (Byte__Order.__default.lt |key#0@@36| |next#4@@0|)) :pattern ( (MapType0Select |m#0@@83| ($Box (int_2_U |next#4@@0|)))) )) (|$let#4$canCall| |m#0@@83| |key#0@@36|))) (= (Byte__Order.__default.SetSuccessor |m#0@@83| |key#0@@36|) (ite (exists ((|next#4@@1| Int) ) (!  (and (and (<= (LitInt 0) |next#4@@1|) (< |next#4@@1| 256)) (and (and (U_2_bool (MapType0Select |m#0@@83| ($Box (int_2_U |next#4@@1|)))) (Byte__Order.__default.lt |key#0@@36| |next#4@@1|)) (forall ((|other#3@@1| Int) ) (!  (=> (and (<= (LitInt 0) |other#3@@1|) (< |other#3@@1| 256)) (=> (and (and (U_2_bool (MapType0Select |m#0@@83| ($Box (int_2_U |other#3@@1|)))) (not (= |other#3@@1| |next#4@@1|))) (Byte__Order.__default.lt |key#0@@36| |other#3@@1|)) (Byte__Order.__default.lt |next#4@@1| |other#3@@1|))) :qid |totalord.726:18| :skolemid |12044| :pattern ( (Byte__Order.__default.lt |next#4@@1| |other#3@@1|)) :pattern ( (Byte__Order.__default.lt |key#0@@36| |other#3@@1|)) :pattern ( (MapType0Select |m#0@@83| ($Box (int_2_U |other#3@@1|)))) )))) :qid |totalord.723:8| :skolemid |12045| :pattern ( (Byte__Order.__default.lt |key#0@@36| |next#4@@1|)) :pattern ( (MapType0Select |m#0@@83| ($Box (int_2_U |next#4@@1|)))) )) (let ((|next#5| (|$let#4_next| |m#0@@83| |key#0@@36|))) (|#Options.Option.Some| ($Box (int_2_U |next#5|)))) |#Options.Option.None|)))) :qid |totalord.721:12| :skolemid |12046| :pattern ( (Byte__Order.__default.SetSuccessor |m#0@@83| |key#0@@36|) ($IsGoodHeap $Heap@@99)) ))))
(assert  (=> true (forall (($Heap@@100 T@U) (|m#0@@84| T@U) (|key#0@@37| Int) ) (!  (=> (and (and (= (type $Heap@@100) (MapType0Type refType MapType1Type)) (= (type |m#0@@84|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetSuccessor#canCall| (Lit |m#0@@84|) (LitInt |key#0@@37|)) (and (and ($IsGoodHeap $Heap@@100) ($Is |m#0@@84| (TSet Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |key#0@@37|) (< |key#0@@37| 256))))) (and (and (forall ((|next#6| Int) ) (!  (=> (and (<= (LitInt 0) |next#6|) (< |next#6| 256)) (and (=> (U_2_bool (MapType0Select (Lit |m#0@@84|) ($Box (int_2_U |next#6|)))) (|Byte__Order.__default.lt#canCall| (LitInt |key#0@@37|) |next#6|)) (=> (and (|Byte__Order.__default.lt#canCall| (LitInt |key#0@@37|) |next#6|) (Byte__Order.__default.lt (LitInt |key#0@@37|) |next#6|)) (forall ((|other#5| Int) ) (!  (=> (and (<= (LitInt 0) |other#5|) (< |other#5| 256)) (and (=> (not (= |other#5| |next#6|)) (|Byte__Order.__default.lt#canCall| (LitInt |key#0@@37|) |other#5|)) (=> (and (|Byte__Order.__default.lt#canCall| (LitInt |key#0@@37|) |other#5|) (Byte__Order.__default.lt (LitInt |key#0@@37|) |other#5|)) (|Byte__Order.__default.lt#canCall| |next#6| |other#5|)))) :qid |totalord.726:18| :skolemid |12047| :pattern ( (Byte__Order.__default.lt |next#6| |other#5|)) :pattern ( (Byte__Order.__default.lt |key#0@@37| |other#5|)) :pattern ( (MapType0Select |m#0@@84| ($Box (int_2_U |other#5|)))) ))))) :qid |totalord.723:8| :skolemid |12048| :pattern ( (Byte__Order.__default.lt |key#0@@37| |next#6|)) :pattern ( (MapType0Select |m#0@@84| ($Box (int_2_U |next#6|)))) )) (=> (exists ((|next#6@@0| Int) ) (!  (and (and (<= (LitInt 0) |next#6@@0|) (< |next#6@@0| 256)) (and (and (U_2_bool (MapType0Select (Lit |m#0@@84|) ($Box (int_2_U |next#6@@0|)))) (Byte__Order.__default.lt (LitInt |key#0@@37|) |next#6@@0|)) (forall ((|other#5@@0| Int) ) (!  (=> (and (<= (LitInt 0) |other#5@@0|) (< |other#5@@0| 256)) (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@84|) ($Box (int_2_U |other#5@@0|)))) (not (= |other#5@@0| |next#6@@0|))) (Byte__Order.__default.lt (LitInt |key#0@@37|) |other#5@@0|)) (Byte__Order.__default.lt |next#6@@0| |other#5@@0|))) :qid |totalord.726:18| :skolemid |12049| :pattern ( (Byte__Order.__default.lt |next#6@@0| |other#5@@0|)) :pattern ( (Byte__Order.__default.lt |key#0@@37| |other#5@@0|)) :pattern ( (MapType0Select |m#0@@84| ($Box (int_2_U |other#5@@0|)))) )))) :qid |totalord.723:8| :skolemid |12050| :pattern ( (Byte__Order.__default.lt |key#0@@37| |next#6@@0|)) :pattern ( (MapType0Select |m#0@@84| ($Box (int_2_U |next#6@@0|)))) )) (|$let#4$canCall| (Lit |m#0@@84|) (LitInt |key#0@@37|)))) (= (Byte__Order.__default.SetSuccessor (Lit |m#0@@84|) (LitInt |key#0@@37|)) (ite (exists ((|next#6@@1| Int) ) (!  (and (and (<= (LitInt 0) |next#6@@1|) (< |next#6@@1| 256)) (and (and (U_2_bool (MapType0Select (Lit |m#0@@84|) ($Box (int_2_U |next#6@@1|)))) (Byte__Order.__default.lt (LitInt |key#0@@37|) |next#6@@1|)) (forall ((|other#5@@1| Int) ) (!  (=> (and (<= (LitInt 0) |other#5@@1|) (< |other#5@@1| 256)) (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@84|) ($Box (int_2_U |other#5@@1|)))) (not (= |other#5@@1| |next#6@@1|))) (Byte__Order.__default.lt (LitInt |key#0@@37|) |other#5@@1|)) (Byte__Order.__default.lt |next#6@@1| |other#5@@1|))) :qid |totalord.726:18| :skolemid |12051| :pattern ( (Byte__Order.__default.lt |next#6@@1| |other#5@@1|)) :pattern ( (Byte__Order.__default.lt |key#0@@37| |other#5@@1|)) :pattern ( (MapType0Select |m#0@@84| ($Box (int_2_U |other#5@@1|)))) )))) :qid |totalord.723:8| :skolemid |12052| :pattern ( (Byte__Order.__default.lt |key#0@@37| |next#6@@1|)) :pattern ( (MapType0Select |m#0@@84| ($Box (int_2_U |next#6@@1|)))) )) (let ((|next#7| (|$let#4_next| (Lit |m#0@@84|) (LitInt |key#0@@37|)))) (|#Options.Option.Some| ($Box (int_2_U |next#7|)))) |#Options.Option.None|)))) :qid |totalord.721:12| :weight 3 :skolemid |12053| :pattern ( (Byte__Order.__default.SetSuccessor (Lit |m#0@@84|) (LitInt |key#0@@37|)) ($IsGoodHeap $Heap@@100)) ))))
(assert (forall ((arg0@@318 T@U) (arg1@@184 T@U) (arg2@@125 Int) ) (! (= (type (Byte__Order.__default.MapSuccessor arg0@@318 arg1@@184 arg2@@125)) DatatypeTypeType) :qid |funType:Byte__Order.__default.MapSuccessor| :pattern ( (Byte__Order.__default.MapSuccessor arg0@@318 arg1@@184 arg2@@125)) )))
(assert  (=> true (forall ((Byte_Order._default.MapSuccessor$V T@U) (|m#0@@85| T@U) (|key#0@@38| Int) ) (!  (=> (and (and (= (type Byte_Order._default.MapSuccessor$V) TyType) (= (type |m#0@@85|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapSuccessor#canCall| Byte_Order._default.MapSuccessor$V |m#0@@85| |key#0@@38|) (and ($Is |m#0@@85| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapSuccessor$V)) (and (<= (LitInt 0) |key#0@@38|) (< |key#0@@38| 256))))) ($Is (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V |m#0@@85| |key#0@@38|) (Tclass.Options.Option Tclass.NativeTypes.byte))) :qid |unknown.0:0| :skolemid |12054| :pattern ( (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V |m#0@@85| |key#0@@38|)) ))))
(assert (forall ((Byte_Order._default.MapSuccessor$V@@0 T@U) (|m#0@@86| T@U) (|key#0@@39| Int) ) (!  (=> (and (and (= (type Byte_Order._default.MapSuccessor$V@@0) TyType) (= (type |m#0@@86|) (MapType BoxType BoxType))) (and ($Is |m#0@@86| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapSuccessor$V@@0)) (and (<= (LitInt 0) |key#0@@39|) (< |key#0@@39| 256)))) (and (=> (|Byte__Order.__default.MapSuccessor#requires| Byte_Order._default.MapSuccessor$V@@0 |m#0@@86| |key#0@@39|) true) (=> true (|Byte__Order.__default.MapSuccessor#requires| Byte_Order._default.MapSuccessor$V@@0 |m#0@@86| |key#0@@39|)))) :qid |unknown.0:0| :skolemid |12055| :pattern ( (|Byte__Order.__default.MapSuccessor#requires| Byte_Order._default.MapSuccessor$V@@0 |m#0@@86| |key#0@@39|)) )))
(assert  (=> true (forall ((Byte_Order._default.MapSuccessor$V@@1 T@U) (|m#0@@87| T@U) (|key#0@@40| Int) ) (!  (=> (and (and (= (type Byte_Order._default.MapSuccessor$V@@1) TyType) (= (type |m#0@@87|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapSuccessor#canCall| Byte_Order._default.MapSuccessor$V@@1 |m#0@@87| |key#0@@40|) (and ($Is |m#0@@87| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapSuccessor$V@@1)) (and (<= (LitInt 0) |key#0@@40|) (< |key#0@@40| 256))))) (and (|Byte__Order.__default.SetSuccessor#canCall| (|Map#Domain| |m#0@@87|) |key#0@@40|) (= (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V@@1 |m#0@@87| |key#0@@40|) (Byte__Order.__default.SetSuccessor (|Map#Domain| |m#0@@87|) |key#0@@40|)))) :qid |unknown.0:0| :skolemid |12056| :pattern ( (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V@@1 |m#0@@87| |key#0@@40|)) ))))
(assert  (=> true (forall ((Byte_Order._default.MapSuccessor$V@@2 T@U) (|m#0@@88| T@U) (|key#0@@41| Int) ) (!  (=> (and (and (= (type Byte_Order._default.MapSuccessor$V@@2) TyType) (= (type |m#0@@88|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapSuccessor#canCall| Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@88|) (LitInt |key#0@@41|)) (and ($Is |m#0@@88| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapSuccessor$V@@2)) (and (<= (LitInt 0) |key#0@@41|) (< |key#0@@41| 256))))) (and (|Byte__Order.__default.SetSuccessor#canCall| (Lit (|Map#Domain| (Lit |m#0@@88|))) (LitInt |key#0@@41|)) (= (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@88|) (LitInt |key#0@@41|)) (Lit (Byte__Order.__default.SetSuccessor (Lit (|Map#Domain| (Lit |m#0@@88|))) (LitInt |key#0@@41|)))))) :qid |unknown.0:0| :weight 3 :skolemid |12057| :pattern ( (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@88|) (LitInt |key#0@@41|))) ))))
(assert (forall ((arg0@@319 T@U) (arg1@@185 Int) ) (! (= (type (Byte__Order.__default.SeqSuccessor arg0@@319 arg1@@185)) DatatypeTypeType) :qid |funType:Byte__Order.__default.SeqSuccessor| :pattern ( (Byte__Order.__default.SeqSuccessor arg0@@319 arg1@@185)) )))
(assert  (=> true (forall ((|m#0@@89| T@U) (|key#0@@42| Int) ) (!  (=> (and (= (type |m#0@@89|) (SeqType BoxType)) (or (|Byte__Order.__default.SeqSuccessor#canCall| |m#0@@89| |key#0@@42|) (and ($Is |m#0@@89| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@42|) (< |key#0@@42| 256))))) ($Is (Byte__Order.__default.SeqSuccessor |m#0@@89| |key#0@@42|) (Tclass.Options.Option Tclass.NativeTypes.byte))) :qid |totalord.737:25| :skolemid |12058| :pattern ( (Byte__Order.__default.SeqSuccessor |m#0@@89| |key#0@@42|)) ))))
(assert (forall ((|m#0@@90| T@U) (|key#0@@43| Int) ) (!  (=> (= (type |m#0@@90|) (SeqType BoxType)) (=> (and ($Is |m#0@@90| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@43|) (< |key#0@@43| 256))) (and (=> (|Byte__Order.__default.SeqSuccessor#requires| |m#0@@90| |key#0@@43|) true) (=> true (|Byte__Order.__default.SeqSuccessor#requires| |m#0@@90| |key#0@@43|))))) :qid |totalord.737:25| :skolemid |12059| :pattern ( (|Byte__Order.__default.SeqSuccessor#requires| |m#0@@90| |key#0@@43|)) )))
(assert (forall ((arg0@@320 T@U) (arg1@@186 T@U) ) (! (= (type (|lambda#140| arg0@@320 arg1@@186)) (MapType0Type BoxType boolType)) :qid |funType:lambda#140| :pattern ( (|lambda#140| arg0@@320 arg1@@186)) )))
(assert  (=> true (forall ((|m#0@@91| T@U) (|key#0@@44| Int) ) (!  (=> (and (= (type |m#0@@91|) (SeqType BoxType)) (or (|Byte__Order.__default.SeqSuccessor#canCall| |m#0@@91| |key#0@@44|) (and ($Is |m#0@@91| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@44|) (< |key#0@@44| 256))))) (and (|Byte__Order.__default.SetSuccessor#canCall| (|lambda#140| Tclass.NativeTypes.byte |m#0@@91|) |key#0@@44|) (= (Byte__Order.__default.SeqSuccessor |m#0@@91| |key#0@@44|) (Byte__Order.__default.SetSuccessor (|lambda#140| Tclass.NativeTypes.byte |m#0@@91|) |key#0@@44|)))) :qid |totalord.737:25| :skolemid |12060| :pattern ( (Byte__Order.__default.SeqSuccessor |m#0@@91| |key#0@@44|)) ))))
(assert  (=> true (forall ((|m#0@@92| T@U) (|key#0@@45| Int) ) (!  (=> (and (= (type |m#0@@92|) (SeqType BoxType)) (or (|Byte__Order.__default.SeqSuccessor#canCall| (Lit |m#0@@92|) (LitInt |key#0@@45|)) (and ($Is |m#0@@92| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@45|) (< |key#0@@45| 256))))) (and (|Byte__Order.__default.SetSuccessor#canCall| (|lambda#140| Tclass.NativeTypes.byte |m#0@@92|) (LitInt |key#0@@45|)) (= (Byte__Order.__default.SeqSuccessor (Lit |m#0@@92|) (LitInt |key#0@@45|)) (Byte__Order.__default.SetSuccessor (|lambda#140| Tclass.NativeTypes.byte |m#0@@92|) (LitInt |key#0@@45|))))) :qid |totalord.737:25| :weight 3 :skolemid |12061| :pattern ( (Byte__Order.__default.SeqSuccessor (Lit |m#0@@92|) (LitInt |key#0@@45|))) ))))
(assert (forall ((Byte_Order._default.SortedSeqForMap$V T@U) ($ly@@382 T@U) (|s#0@@64| T@U) (|m#0@@93| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V) TyType) (= (type $ly@@382) LayerTypeType)) (= (type |s#0@@64|) (SeqType BoxType))) (= (type |m#0@@93|) (MapType BoxType BoxType))) (and (=> (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V ($LS $ly@@382) |s#0@@64| |m#0@@93|) (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V $ly@@382 |s#0@@64| |m#0@@93|)) (=> (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V $ly@@382 |s#0@@64| |m#0@@93|) (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V ($LS $ly@@382) |s#0@@64| |m#0@@93|)))) :qid |unknown.0:0| :skolemid |12062| :pattern ( (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V ($LS $ly@@382) |s#0@@64| |m#0@@93|)) )))
(assert (forall ((Byte_Order._default.SortedSeqForMap$V@@0 T@U) ($ly@@383 T@U) (|s#0@@65| T@U) (|m#0@@94| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V@@0) TyType) (= (type $ly@@383) LayerTypeType)) (= (type |s#0@@65|) (SeqType BoxType))) (= (type |m#0@@94|) (MapType BoxType BoxType))) (and (=> (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@0 $ly@@383 |s#0@@65| |m#0@@94|) (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@0 $LZ |s#0@@65| |m#0@@94|)) (=> (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@0 $LZ |s#0@@65| |m#0@@94|) (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@0 $ly@@383 |s#0@@65| |m#0@@94|)))) :qid |unknown.0:0| :skolemid |12063| :pattern ( (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@0 (AsFuelBottom $ly@@383) |s#0@@65| |m#0@@94|)) )))
(assert  (=> true (forall ((Byte_Order._default.SortedSeqForMap$V@@1 T@U) ($ly@@384 T@U) (|s#0@@66| T@U) (|m#0@@95| T@U) ) (!  (=> (and (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V@@1) TyType) (= (type $ly@@384) LayerTypeType)) (= (type |s#0@@66|) (SeqType BoxType))) (= (type |m#0@@95|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.SortedSeqForMap#canCall| Byte_Order._default.SortedSeqForMap$V@@1 |s#0@@66| |m#0@@95|) (and ($Is |s#0@@66| (TSeq (Tclass._System.Tuple2 Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@1))) ($Is |m#0@@95| (TMap Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@1))))) true) :qid |unknown.0:0| :skolemid |12064| :pattern ( (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@1 $ly@@384 |s#0@@66| |m#0@@95|)) ))))
(assert (forall ((Byte_Order._default.SortedSeqForMap$V@@2 T@U) ($ly@@385 T@U) (|s#0@@67| T@U) (|m#0@@96| T@U) ) (!  (=> (and (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V@@2) TyType) (= (type $ly@@385) LayerTypeType)) (= (type |s#0@@67|) (SeqType BoxType))) (= (type |m#0@@96|) (MapType BoxType BoxType))) (and ($Is |s#0@@67| (TSeq (Tclass._System.Tuple2 Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@2))) ($Is |m#0@@96| (TMap Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@2)))) (and (=> (|Byte__Order.__default.SortedSeqForMap#requires| Byte_Order._default.SortedSeqForMap$V@@2 $ly@@385 |s#0@@67| |m#0@@96|) true) (=> true (|Byte__Order.__default.SortedSeqForMap#requires| Byte_Order._default.SortedSeqForMap$V@@2 $ly@@385 |s#0@@67| |m#0@@96|)))) :qid |unknown.0:0| :skolemid |12065| :pattern ( (|Byte__Order.__default.SortedSeqForMap#requires| Byte_Order._default.SortedSeqForMap$V@@2 $ly@@385 |s#0@@67| |m#0@@96|)) )))
(assert  (and (= (type StartFuel_Sequences._default.Unzip) LayerTypeType) (= (type StartFuel_Byte_Order._default.IsStrictlySorted) LayerTypeType)))
(assert  (=> true (forall ((Byte_Order._default.SortedSeqForMap$V@@3 T@U) ($ly@@386 T@U) (|s#0@@68| T@U) (|m#0@@97| T@U) ) (!  (=> (and (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V@@3) TyType) (= (type $ly@@386) LayerTypeType)) (= (type |s#0@@68|) (SeqType BoxType))) (= (type |m#0@@97|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.SortedSeqForMap#canCall| Byte_Order._default.SortedSeqForMap$V@@3 |s#0@@68| |m#0@@97|) (and ($Is |s#0@@68| (TSeq (Tclass._System.Tuple2 Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3))) ($Is |m#0@@97| (TMap Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3))))) (and (and (and (and (and (|Sequences.__default.Unzip#canCall| Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 |s#0@@68|) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@68|))) (|Byte__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@68|))))) (=> (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@68|)))) (forall ((|i#4@@7| Int) ) (!  (and (=> (< |i#4@@7| (|Seq#Length| |s#0@@68|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#4@@7|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#4@@7|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@97|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#4@@7|)))))) (=> (< |i#4@@7| (|Seq#Length| |s#0@@68|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#4@@7|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#4@@7|))))))) :qid |totalord.761:16| :skolemid |12066| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#4@@7|))) )))) (=> (and (forall ((|i#4@@8| Int) ) (!  (and (=> (< |i#4@@8| (|Seq#Length| |s#0@@68|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#4@@8|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#4@@8|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@97|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#4@@8|)))))) (=> (< |i#4@@8| (|Seq#Length| |s#0@@68|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#4@@8|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#4@@8|))))))) :qid |totalord.761:16| :skolemid |12069| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#4@@8|))) )) (forall ((|i#4@@9| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#4@@9|) (< |i#4@@9| (|Seq#Length| |s#0@@68|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@97|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#4@@9|)))))) (=> (and (<= (LitInt 0) |i#4@@9|) (< |i#4@@9| (|Seq#Length| |s#0@@68|))) (= (MapType0Select (|Map#Elements| |m#0@@97|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#4@@9|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#4@@9|))))))) :qid |totalord.761:16| :skolemid |12070| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#4@@9|))) ))) (forall ((|key#2@@5| T@U) ) (!  (=> (= (type |key#2@@5|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#2@@5|)) (< (U_2_int |key#2@@5|) 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@97|) ($Box |key#2@@5|))) (forall ((|i#5@@8| Int) ) (!  (and (=> (< |i#5@@8| (|Seq#Length| |s#0@@68|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#5@@8|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#5@@8|))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#5@@8|))))) (U_2_int |key#2@@5|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#5@@8|))))) :qid |totalord.762:44| :skolemid |12067| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#5@@8|))) ))))) :qid |totalord.762:16| :skolemid |12068| :pattern ( (MapType0Select (|Map#Elements| |m#0@@97|) ($Box |key#2@@5|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@97|) ($Box |key#2@@5|))) )))) (and (=> (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@386) |s#0@@68| |m#0@@97|) (and (and (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@68|)))) (forall ((|i#4@@10| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#4@@10|) (< |i#4@@10| (|Seq#Length| |s#0@@68|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@97|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#4@@10|)))))) (=> (and (<= (LitInt 0) |i#4@@10|) (< |i#4@@10| (|Seq#Length| |s#0@@68|))) (= (MapType0Select (|Map#Elements| |m#0@@97|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#4@@10|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#4@@10|))))))) :qid |totalord.761:16| :skolemid |12071| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#4@@10|))) ))) (forall ((|key#2@@6| T@U) ) (!  (=> (= (type |key#2@@6|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#2@@6|)) (< (U_2_int |key#2@@6|) 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@97|) ($Box |key#2@@6|))) (exists ((|i#5@@9| Int) ) (!  (and (and (and (<= (LitInt 0) |i#5@@9|) (< |i#5@@9| (|Seq#Length| |s#0@@68|))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#5@@9|))))) (U_2_int |key#2@@6|))) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#5@@9|))) (MapType0Select (|Map#Elements| |m#0@@97|) ($Box |key#2@@6|)))) :qid |totalord.762:44| :skolemid |12072| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#5@@9|))) ))))) :qid |totalord.762:16| :skolemid |12073| :pattern ( (MapType0Select (|Map#Elements| |m#0@@97|) ($Box |key#2@@6|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@97|) ($Box |key#2@@6|))) )))) (=> (and (and (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@68|)))) (forall ((|i#4@@11| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#4@@11|) (< |i#4@@11| (|Seq#Length| |s#0@@68|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@97|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#4@@11|)))))) (=> (and (<= (LitInt 0) |i#4@@11|) (< |i#4@@11| (|Seq#Length| |s#0@@68|))) (= (MapType0Select (|Map#Elements| |m#0@@97|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#4@@11|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#4@@11|))))))) :qid |totalord.761:16| :skolemid |12071| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#4@@11|))) ))) (forall ((|key#2@@7| Int) ) (!  (=> (and (<= (LitInt 0) |key#2@@7|) (< |key#2@@7| 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@97|) ($Box (int_2_U |key#2@@7|)))) (exists ((|i#5@@10| Int) ) (!  (and (and (and (<= (LitInt 0) |i#5@@10|) (< |i#5@@10| (|Seq#Length| |s#0@@68|))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#5@@10|))))) |key#2@@7|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#5@@10|))) (MapType0Select (|Map#Elements| |m#0@@97|) ($Box (int_2_U |key#2@@7|))))) :qid |totalord.762:44| :skolemid |12072| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#5@@10|))) )))) :qid |totalord.762:16| :skolemid |12073| :pattern ( (MapType0Select (|Map#Elements| |m#0@@97|) ($Box (int_2_U |key#2@@7|)))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@97|) ($Box (int_2_U |key#2@@7|)))) ))) (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@386) |s#0@@68| |m#0@@97|))))) :qid |unknown.0:0| :skolemid |12074| :pattern ( (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@386) |s#0@@68| |m#0@@97|)) ))))
(assert  (=> true (forall ((Byte_Order._default.SortedSeqForMap$V@@4 T@U) ($ly@@387 T@U) (|s#0@@69| T@U) (|m#0@@98| T@U) ) (!  (=> (and (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V@@4) TyType) (= (type $ly@@387) LayerTypeType)) (= (type |s#0@@69|) (SeqType BoxType))) (= (type |m#0@@98|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.SortedSeqForMap#canCall| Byte_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@69|) (Lit |m#0@@98|)) (and ($Is |s#0@@69| (TSeq (Tclass._System.Tuple2 Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4))) ($Is |m#0@@98| (TMap Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4))))) (and (and (and (and (and (|Sequences.__default.Unzip#canCall| Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@69|)) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@69|)))) (|Byte__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@69|)))))) (=> (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@69|))))) (forall ((|i#6@@8| Int) ) (!  (and (=> (< |i#6@@8| (|Seq#Length| (Lit |s#0@@69|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#6@@8|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#6@@8|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@98|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#6@@8|)))))) (=> (< |i#6@@8| (|Seq#Length| (Lit |s#0@@69|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#6@@8|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#6@@8|))))))) :qid |totalord.761:16| :skolemid |12075| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@69| |i#6@@8|))) )))) (=> (and (forall ((|i#6@@9| Int) ) (!  (and (=> (< |i#6@@9| (|Seq#Length| (Lit |s#0@@69|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#6@@9|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#6@@9|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@98|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#6@@9|)))))) (=> (< |i#6@@9| (|Seq#Length| (Lit |s#0@@69|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#6@@9|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#6@@9|))))))) :qid |totalord.761:16| :skolemid |12078| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@69| |i#6@@9|))) )) (forall ((|i#6@@10| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#6@@10|) (< |i#6@@10| (|Seq#Length| (Lit |s#0@@69|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@98|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#6@@10|)))))) (=> (and (<= (LitInt 0) |i#6@@10|) (< |i#6@@10| (|Seq#Length| (Lit |s#0@@69|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@98|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#6@@10|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#6@@10|))))))) :qid |totalord.761:16| :skolemid |12079| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@69| |i#6@@10|))) ))) (forall ((|key#3@@5| T@U) ) (!  (=> (= (type |key#3@@5|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#3@@5|)) (< (U_2_int |key#3@@5|) 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@98|) ($Box |key#3@@5|))) (forall ((|i#7| Int) ) (!  (and (=> (< |i#7| (|Seq#Length| (Lit |s#0@@69|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#7|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#7|))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#7|))))) (U_2_int |key#3@@5|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#7|))))) :qid |totalord.762:44| :skolemid |12076| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@69| |i#7|))) ))))) :qid |totalord.762:16| :skolemid |12077| :pattern ( (MapType0Select (|Map#Elements| |m#0@@98|) ($Box |key#3@@5|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@98|) ($Box |key#3@@5|))) )))) (and (=> (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@387) (Lit |s#0@@69|) (Lit |m#0@@98|)) (and (and (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@69|))))) (forall ((|i#6@@11| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#6@@11|) (< |i#6@@11| (|Seq#Length| (Lit |s#0@@69|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@98|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#6@@11|)))))) (=> (and (<= (LitInt 0) |i#6@@11|) (< |i#6@@11| (|Seq#Length| (Lit |s#0@@69|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@98|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#6@@11|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#6@@11|))))))) :qid |totalord.761:16| :skolemid |12080| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@69| |i#6@@11|))) ))) (forall ((|key#3@@6| T@U) ) (!  (=> (= (type |key#3@@6|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#3@@6|)) (< (U_2_int |key#3@@6|) 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@98|) ($Box |key#3@@6|))) (exists ((|i#7@@0| Int) ) (!  (and (and (and (<= (LitInt 0) |i#7@@0|) (< |i#7@@0| (|Seq#Length| (Lit |s#0@@69|)))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#7@@0|))))) (U_2_int |key#3@@6|))) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#7@@0|))) (MapType0Select (|Map#Elements| (Lit |m#0@@98|)) ($Box |key#3@@6|)))) :qid |totalord.762:44| :skolemid |12081| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@69| |i#7@@0|))) ))))) :qid |totalord.762:16| :skolemid |12082| :pattern ( (MapType0Select (|Map#Elements| |m#0@@98|) ($Box |key#3@@6|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@98|) ($Box |key#3@@6|))) )))) (=> (and (and (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@69|))))) (forall ((|i#6@@12| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#6@@12|) (< |i#6@@12| (|Seq#Length| (Lit |s#0@@69|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@98|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#6@@12|)))))) (=> (and (<= (LitInt 0) |i#6@@12|) (< |i#6@@12| (|Seq#Length| (Lit |s#0@@69|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@98|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#6@@12|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#6@@12|))))))) :qid |totalord.761:16| :skolemid |12080| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@69| |i#6@@12|))) ))) (forall ((|key#3@@7| Int) ) (!  (=> (and (<= (LitInt 0) |key#3@@7|) (< |key#3@@7| 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@98|) ($Box (int_2_U |key#3@@7|)))) (exists ((|i#7@@1| Int) ) (!  (and (and (and (<= (LitInt 0) |i#7@@1|) (< |i#7@@1| (|Seq#Length| (Lit |s#0@@69|)))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#7@@1|))))) |key#3@@7|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#7@@1|))) (MapType0Select (|Map#Elements| (Lit |m#0@@98|)) ($Box (int_2_U |key#3@@7|))))) :qid |totalord.762:44| :skolemid |12081| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@69| |i#7@@1|))) )))) :qid |totalord.762:16| :skolemid |12082| :pattern ( (MapType0Select (|Map#Elements| |m#0@@98|) ($Box (int_2_U |key#3@@7|)))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@98|) ($Box (int_2_U |key#3@@7|)))) ))) (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@387) (Lit |s#0@@69|) (Lit |m#0@@98|)))))) :qid |unknown.0:0| :weight 3 :skolemid |12083| :pattern ( (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@387) (Lit |s#0@@69|) (Lit |m#0@@98|))) ))))
(assert (forall (($ly@@388 T@U) (|s#0@@70| T@U) ) (!  (=> (and (= (type $ly@@388) LayerTypeType) (= (type |s#0@@70|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.minimum ($LS $ly@@388) |s#0@@70|) (Byte__Order.__default.minimum $ly@@388 |s#0@@70|))) :qid |totalord.765:22| :skolemid |12084| :pattern ( (Byte__Order.__default.minimum ($LS $ly@@388) |s#0@@70|)) )))
(assert (forall (($ly@@389 T@U) (|s#0@@71| T@U) ) (!  (=> (and (= (type $ly@@389) LayerTypeType) (= (type |s#0@@71|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.minimum $ly@@389 |s#0@@71|) (Byte__Order.__default.minimum $LZ |s#0@@71|))) :qid |totalord.765:22| :skolemid |12085| :pattern ( (Byte__Order.__default.minimum (AsFuelBottom $ly@@389) |s#0@@71|)) )))
(assert  (=> true (forall (($ly@@390 T@U) (|s#0@@72| T@U) ) (!  (=> (and (and (= (type $ly@@390) LayerTypeType) (= (type |s#0@@72|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimum#canCall| |s#0@@72|) (and ($Is |s#0@@72| (TSet Tclass.NativeTypes.byte)) (>= (|Set#Card| |s#0@@72|) (LitInt 1))))) (and (and (U_2_bool (MapType0Select |s#0@@72| ($Box (int_2_U (Byte__Order.__default.minimum $ly@@390 |s#0@@72|))))) (forall ((|y#1| Int) ) (!  (=> (and (and (<= (LitInt 0) |y#1|) (< |y#1| 256)) (U_2_bool (MapType0Select |s#0@@72| ($Box (int_2_U |y#1|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (Byte__Order.__default.minimum $ly@@390 |s#0@@72|) |y#1|)) :qid |totalord.768:18| :skolemid |12086| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (Byte__Order.__default.minimum $ly@@390 |s#0@@72|) |y#1|)) :pattern ( (MapType0Select |s#0@@72| ($Box (int_2_U |y#1|)))) ))) (and (<= (LitInt 0) (Byte__Order.__default.minimum $ly@@390 |s#0@@72|)) (< (Byte__Order.__default.minimum $ly@@390 |s#0@@72|) 256)))) :qid |totalord.765:22| :skolemid |12087| :pattern ( (Byte__Order.__default.minimum $ly@@390 |s#0@@72|)) ))))
(assert (forall (($ly@@391 T@U) ($Heap@@101 T@U) (|s#0@@73| T@U) ) (!  (=> (and (and (and (= (type $ly@@391) LayerTypeType) (= (type $Heap@@101) (MapType0Type refType MapType1Type))) (= (type |s#0@@73|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@101) ($Is |s#0@@73| (TSet Tclass.NativeTypes.byte)))) (and (=> (|Byte__Order.__default.minimum#requires| $ly@@391 |s#0@@73|) (>= (|Set#Card| |s#0@@73|) (LitInt 1))) (=> (>= (|Set#Card| |s#0@@73|) (LitInt 1)) (|Byte__Order.__default.minimum#requires| $ly@@391 |s#0@@73|)))) :qid |totalord.765:22| :skolemid |12088| :pattern ( (|Byte__Order.__default.minimum#requires| $ly@@391 |s#0@@73|) ($IsGoodHeap $Heap@@101)) )))
(assert (forall ((s@@46 T@U) ) (!  (=> (and (= (type s@@46) (MapType0Type BoxType boolType)) (|$let#7$canCall| s@@46)) (and (and (<= (LitInt 0) (|$let#7_a| s@@46)) (< (|$let#7_a| s@@46) 256)) (U_2_bool (MapType0Select s@@46 ($Box (int_2_U (|$let#7_a| s@@46))))))) :qid |totalord.772:5| :skolemid |12089| :pattern ( (|$let#7_a| s@@46)) )))
(assert  (=> true (forall (($ly@@392 T@U) ($Heap@@102 T@U) (|s#0@@74| T@U) ) (!  (=> (and (and (and (= (type $ly@@392) LayerTypeType) (= (type $Heap@@102) (MapType0Type refType MapType1Type))) (= (type |s#0@@74|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimum#canCall| |s#0@@74|) (and (and ($IsGoodHeap $Heap@@102) ($Is |s#0@@74| (TSet Tclass.NativeTypes.byte))) (>= (|Set#Card| |s#0@@74|) (LitInt 1))))) (and (and (|$let#7$canCall| |s#0@@74|) (let ((|s'#4| (|Set#Difference| |s#0@@74| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#7_a| |s#0@@74|))))))) (=> (not (|Set#Equal| |s'#4| (|Set#Empty| BoxType))) (and (|Byte__Order.__default.minimum#canCall| |s'#4|) (let ((|m'#4@@0| (Byte__Order.__default.minimum $ly@@392 |s'#4|))) (|Byte__Order.__default.lt#canCall| (|$let#7_a| |s#0@@74|) |m'#4@@0|)))))) (= (Byte__Order.__default.minimum ($LS $ly@@392) |s#0@@74|) (let ((|a#2@@0| (|$let#7_a| |s#0@@74|))) (let ((|s'#5| (|Set#Difference| |s#0@@74| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#2@@0|)))))) (ite (|Set#Equal| |s'#5| (|Set#Empty| BoxType)) |a#2@@0| (let ((|m'#5@@0| (Byte__Order.__default.minimum $ly@@392 |s'#5|))) (ite (Byte__Order.__default.lt |a#2@@0| |m'#5@@0|) |a#2@@0| |m'#5@@0|)))))))) :qid |totalord.765:22| :skolemid |12090| :pattern ( (Byte__Order.__default.minimum ($LS $ly@@392) |s#0@@74|) ($IsGoodHeap $Heap@@102)) ))))
(assert  (=> true (forall (($ly@@393 T@U) ($Heap@@103 T@U) (|s#0@@75| T@U) ) (!  (=> (and (and (and (= (type $ly@@393) LayerTypeType) (= (type $Heap@@103) (MapType0Type refType MapType1Type))) (= (type |s#0@@75|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimum#canCall| (Lit |s#0@@75|)) (and (and ($IsGoodHeap $Heap@@103) ($Is |s#0@@75| (TSet Tclass.NativeTypes.byte))) (>= (|Set#Card| (Lit |s#0@@75|)) (LitInt 1))))) (and (and (|$let#7$canCall| (Lit |s#0@@75|)) (let ((|s'#6| (|Set#Difference| |s#0@@75| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#7_a| (Lit |s#0@@75|)))))))) (=> (not (|Set#Equal| |s'#6| (|Set#Empty| BoxType))) (and (|Byte__Order.__default.minimum#canCall| |s'#6|) (let ((|m'#6| (Byte__Order.__default.minimum ($LS $ly@@393) |s'#6|))) (|Byte__Order.__default.lt#canCall| (|$let#7_a| (Lit |s#0@@75|)) |m'#6|)))))) (= (Byte__Order.__default.minimum ($LS $ly@@393) (Lit |s#0@@75|)) (let ((|a#3@@1| (|$let#7_a| (Lit |s#0@@75|)))) (let ((|s'#7| (|Set#Difference| |s#0@@75| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#3@@1|)))))) (ite (|Set#Equal| |s'#7| (|Set#Empty| BoxType)) |a#3@@1| (let ((|m'#7| (Byte__Order.__default.minimum ($LS $ly@@393) |s'#7|))) (ite (Byte__Order.__default.lt |a#3@@1| |m'#7|) |a#3@@1| |m'#7|)))))))) :qid |totalord.765:22| :weight 3 :skolemid |12091| :pattern ( (Byte__Order.__default.minimum ($LS $ly@@393) (Lit |s#0@@75|)) ($IsGoodHeap $Heap@@103)) ))))
(assert (forall ((arg0@@321 T@U) (arg1@@187 T@U) ) (! (= (type (Byte__Order.__default.minimumOpt arg0@@321 arg1@@187)) DatatypeTypeType) :qid |funType:Byte__Order.__default.minimumOpt| :pattern ( (Byte__Order.__default.minimumOpt arg0@@321 arg1@@187)) )))
(assert (forall (($ly@@394 T@U) (|s#0@@76| T@U) ) (!  (=> (and (= (type $ly@@394) LayerTypeType) (= (type |s#0@@76|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.minimumOpt ($LS $ly@@394) |s#0@@76|) (Byte__Order.__default.minimumOpt $ly@@394 |s#0@@76|))) :qid |totalord.788:22| :skolemid |12092| :pattern ( (Byte__Order.__default.minimumOpt ($LS $ly@@394) |s#0@@76|)) )))
(assert (forall (($ly@@395 T@U) (|s#0@@77| T@U) ) (!  (=> (and (= (type $ly@@395) LayerTypeType) (= (type |s#0@@77|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.minimumOpt $ly@@395 |s#0@@77|) (Byte__Order.__default.minimumOpt $LZ |s#0@@77|))) :qid |totalord.788:22| :skolemid |12093| :pattern ( (Byte__Order.__default.minimumOpt (AsFuelBottom $ly@@395) |s#0@@77|)) )))
(assert  (=> true (forall (($ly@@396 T@U) (|s#0@@78| T@U) ) (!  (=> (and (and (= (type $ly@@396) LayerTypeType) (= (type |s#0@@78|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimumOpt#canCall| |s#0@@78|) ($Is |s#0@@78| (TSet Tclass.NativeTypes.byte)))) (and (and (and (=> (Options.Option.Some_q (Byte__Order.__default.minimumOpt $ly@@396 |s#0@@78|)) (U_2_bool (MapType0Select |s#0@@78| (Options.Option.value (Byte__Order.__default.minimumOpt $ly@@396 |s#0@@78|))))) (=> (Options.Option.Some_q (Byte__Order.__default.minimumOpt $ly@@396 |s#0@@78|)) (forall ((|y#1@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |y#1@@0|) (< |y#1@@0| 256)) (U_2_bool (MapType0Select |s#0@@78| ($Box (int_2_U |y#1@@0|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (Options.Option.value (Byte__Order.__default.minimumOpt $ly@@396 |s#0@@78|)))) |y#1@@0|)) :qid |totalord.790:30| :skolemid |12094| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (Options.Option.value (Byte__Order.__default.minimumOpt $ly@@396 |s#0@@78|)))) |y#1@@0|)) :pattern ( (MapType0Select |s#0@@78| ($Box (int_2_U |y#1@@0|)))) )))) (=> (Options.Option.None_q (Byte__Order.__default.minimumOpt $ly@@396 |s#0@@78|)) (|Set#Equal| |s#0@@78| (|Set#Empty| BoxType)))) ($Is (Byte__Order.__default.minimumOpt $ly@@396 |s#0@@78|) (Tclass.Options.Option Tclass.NativeTypes.byte)))) :qid |totalord.788:22| :skolemid |12095| :pattern ( (Byte__Order.__default.minimumOpt $ly@@396 |s#0@@78|)) ))))
(assert (forall (($ly@@397 T@U) (|s#0@@79| T@U) ) (!  (=> (and (and (= (type $ly@@397) LayerTypeType) (= (type |s#0@@79|) (MapType0Type BoxType boolType))) ($Is |s#0@@79| (TSet Tclass.NativeTypes.byte))) (and (=> (|Byte__Order.__default.minimumOpt#requires| $ly@@397 |s#0@@79|) true) (=> true (|Byte__Order.__default.minimumOpt#requires| $ly@@397 |s#0@@79|)))) :qid |totalord.788:22| :skolemid |12096| :pattern ( (|Byte__Order.__default.minimumOpt#requires| $ly@@397 |s#0@@79|)) )))
(assert (= (type StartFuel_Byte_Order._default.minimum) LayerTypeType))
(assert  (=> true (forall (($ly@@398 T@U) (|s#0@@80| T@U) ) (!  (=> (and (and (= (type $ly@@398) LayerTypeType) (= (type |s#0@@80|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimumOpt#canCall| |s#0@@80|) ($Is |s#0@@80| (TSet Tclass.NativeTypes.byte)))) (and (=> (not (|Set#Equal| |s#0@@80| (|Set#Empty| BoxType))) (|Byte__Order.__default.minimum#canCall| |s#0@@80|)) (= (Byte__Order.__default.minimumOpt ($LS $ly@@398) |s#0@@80|) (ite (|Set#Equal| |s#0@@80| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Byte__Order.__default.minimum StartFuel_Byte_Order._default.minimum |s#0@@80|)))))))) :qid |totalord.788:22| :skolemid |12097| :pattern ( (Byte__Order.__default.minimumOpt ($LS $ly@@398) |s#0@@80|)) ))))
(assert  (=> true (forall (($ly@@399 T@U) (|s#0@@81| T@U) ) (!  (=> (and (and (= (type $ly@@399) LayerTypeType) (= (type |s#0@@81|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimumOpt#canCall| (Lit |s#0@@81|)) ($Is |s#0@@81| (TSet Tclass.NativeTypes.byte)))) (and (=> (not (|Set#Equal| |s#0@@81| (|Set#Empty| BoxType))) (|Byte__Order.__default.minimum#canCall| (Lit |s#0@@81|))) (= (Byte__Order.__default.minimumOpt ($LS $ly@@399) (Lit |s#0@@81|)) (ite (|Set#Equal| |s#0@@81| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Byte__Order.__default.minimum StartFuel_Byte_Order._default.minimum (Lit |s#0@@81|))))))))) :qid |totalord.788:22| :weight 3 :skolemid |12098| :pattern ( (Byte__Order.__default.minimumOpt ($LS $ly@@399) (Lit |s#0@@81|))) ))))
(assert (forall (($ly@@400 T@U) (|s#0@@82| T@U) ) (!  (=> (and (= (type $ly@@400) LayerTypeType) (= (type |s#0@@82|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.maximum ($LS $ly@@400) |s#0@@82|) (Byte__Order.__default.maximum $ly@@400 |s#0@@82|))) :qid |totalord.796:22| :skolemid |12099| :pattern ( (Byte__Order.__default.maximum ($LS $ly@@400) |s#0@@82|)) )))
(assert (forall (($ly@@401 T@U) (|s#0@@83| T@U) ) (!  (=> (and (= (type $ly@@401) LayerTypeType) (= (type |s#0@@83|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.maximum $ly@@401 |s#0@@83|) (Byte__Order.__default.maximum $LZ |s#0@@83|))) :qid |totalord.796:22| :skolemid |12100| :pattern ( (Byte__Order.__default.maximum (AsFuelBottom $ly@@401) |s#0@@83|)) )))
(assert  (=> true (forall (($ly@@402 T@U) (|s#0@@84| T@U) ) (!  (=> (and (and (= (type $ly@@402) LayerTypeType) (= (type |s#0@@84|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximum#canCall| |s#0@@84|) (and ($Is |s#0@@84| (TSet Tclass.NativeTypes.byte)) (>= (|Set#Card| |s#0@@84|) (LitInt 1))))) (and (and (U_2_bool (MapType0Select |s#0@@84| ($Box (int_2_U (Byte__Order.__default.maximum $ly@@402 |s#0@@84|))))) (forall ((|y#1@@1| Int) ) (!  (=> (and (and (<= (LitInt 0) |y#1@@1|) (< |y#1@@1| 256)) (U_2_bool (MapType0Select |s#0@@84| ($Box (int_2_U |y#1@@1|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |y#1@@1| (Byte__Order.__default.maximum $ly@@402 |s#0@@84|))) :qid |totalord.799:18| :skolemid |12101| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |y#1@@1| (Byte__Order.__default.maximum $ly@@402 |s#0@@84|))) :pattern ( (MapType0Select |s#0@@84| ($Box (int_2_U |y#1@@1|)))) ))) (and (<= (LitInt 0) (Byte__Order.__default.maximum $ly@@402 |s#0@@84|)) (< (Byte__Order.__default.maximum $ly@@402 |s#0@@84|) 256)))) :qid |totalord.796:22| :skolemid |12102| :pattern ( (Byte__Order.__default.maximum $ly@@402 |s#0@@84|)) ))))
(assert (forall (($ly@@403 T@U) ($Heap@@104 T@U) (|s#0@@85| T@U) ) (!  (=> (and (and (and (= (type $ly@@403) LayerTypeType) (= (type $Heap@@104) (MapType0Type refType MapType1Type))) (= (type |s#0@@85|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@104) ($Is |s#0@@85| (TSet Tclass.NativeTypes.byte)))) (and (=> (|Byte__Order.__default.maximum#requires| $ly@@403 |s#0@@85|) (>= (|Set#Card| |s#0@@85|) (LitInt 1))) (=> (>= (|Set#Card| |s#0@@85|) (LitInt 1)) (|Byte__Order.__default.maximum#requires| $ly@@403 |s#0@@85|)))) :qid |totalord.796:22| :skolemid |12103| :pattern ( (|Byte__Order.__default.maximum#requires| $ly@@403 |s#0@@85|) ($IsGoodHeap $Heap@@104)) )))
(assert (forall ((s@@47 T@U) ) (!  (=> (and (= (type s@@47) (MapType0Type BoxType boolType)) (|$let#10$canCall| s@@47)) (and (and (<= (LitInt 0) (|$let#10_a| s@@47)) (< (|$let#10_a| s@@47) 256)) (U_2_bool (MapType0Select s@@47 ($Box (int_2_U (|$let#10_a| s@@47))))))) :qid |totalord.801:5| :skolemid |12104| :pattern ( (|$let#10_a| s@@47)) )))
(assert  (=> true (forall (($ly@@404 T@U) ($Heap@@105 T@U) (|s#0@@86| T@U) ) (!  (=> (and (and (and (= (type $ly@@404) LayerTypeType) (= (type $Heap@@105) (MapType0Type refType MapType1Type))) (= (type |s#0@@86|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximum#canCall| |s#0@@86|) (and (and ($IsGoodHeap $Heap@@105) ($Is |s#0@@86| (TSet Tclass.NativeTypes.byte))) (>= (|Set#Card| |s#0@@86|) (LitInt 1))))) (and (and (|$let#10$canCall| |s#0@@86|) (let ((|s'#4@@0| (|Set#Difference| |s#0@@86| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#10_a| |s#0@@86|))))))) (=> (not (|Set#Equal| |s'#4@@0| (|Set#Empty| BoxType))) (and (|Byte__Order.__default.maximum#canCall| |s'#4@@0|) (let ((|m'#4@@1| (Byte__Order.__default.maximum $ly@@404 |s'#4@@0|))) (|Byte__Order.__default.lt#canCall| |m'#4@@1| (|$let#10_a| |s#0@@86|))))))) (= (Byte__Order.__default.maximum ($LS $ly@@404) |s#0@@86|) (let ((|a#2@@1| (|$let#10_a| |s#0@@86|))) (let ((|s'#5@@0| (|Set#Difference| |s#0@@86| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#2@@1|)))))) (ite (|Set#Equal| |s'#5@@0| (|Set#Empty| BoxType)) |a#2@@1| (let ((|m'#5@@1| (Byte__Order.__default.maximum $ly@@404 |s'#5@@0|))) (ite (Byte__Order.__default.lt |m'#5@@1| |a#2@@1|) |a#2@@1| |m'#5@@1|)))))))) :qid |totalord.796:22| :skolemid |12105| :pattern ( (Byte__Order.__default.maximum ($LS $ly@@404) |s#0@@86|) ($IsGoodHeap $Heap@@105)) ))))
(assert  (=> true (forall (($ly@@405 T@U) ($Heap@@106 T@U) (|s#0@@87| T@U) ) (!  (=> (and (and (and (= (type $ly@@405) LayerTypeType) (= (type $Heap@@106) (MapType0Type refType MapType1Type))) (= (type |s#0@@87|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximum#canCall| (Lit |s#0@@87|)) (and (and ($IsGoodHeap $Heap@@106) ($Is |s#0@@87| (TSet Tclass.NativeTypes.byte))) (>= (|Set#Card| (Lit |s#0@@87|)) (LitInt 1))))) (and (and (|$let#10$canCall| (Lit |s#0@@87|)) (let ((|s'#6@@0| (|Set#Difference| |s#0@@87| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#10_a| (Lit |s#0@@87|)))))))) (=> (not (|Set#Equal| |s'#6@@0| (|Set#Empty| BoxType))) (and (|Byte__Order.__default.maximum#canCall| |s'#6@@0|) (let ((|m'#6@@0| (Byte__Order.__default.maximum ($LS $ly@@405) |s'#6@@0|))) (|Byte__Order.__default.lt#canCall| |m'#6@@0| (|$let#10_a| (Lit |s#0@@87|)))))))) (= (Byte__Order.__default.maximum ($LS $ly@@405) (Lit |s#0@@87|)) (let ((|a#3@@2| (|$let#10_a| (Lit |s#0@@87|)))) (let ((|s'#7@@0| (|Set#Difference| |s#0@@87| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#3@@2|)))))) (ite (|Set#Equal| |s'#7@@0| (|Set#Empty| BoxType)) |a#3@@2| (let ((|m'#7@@0| (Byte__Order.__default.maximum ($LS $ly@@405) |s'#7@@0|))) (ite (Byte__Order.__default.lt |m'#7@@0| |a#3@@2|) |a#3@@2| |m'#7@@0|)))))))) :qid |totalord.796:22| :weight 3 :skolemid |12106| :pattern ( (Byte__Order.__default.maximum ($LS $ly@@405) (Lit |s#0@@87|)) ($IsGoodHeap $Heap@@106)) ))))
(assert (forall ((arg0@@322 T@U) (arg1@@188 T@U) ) (! (= (type (Byte__Order.__default.maximumOpt arg0@@322 arg1@@188)) DatatypeTypeType) :qid |funType:Byte__Order.__default.maximumOpt| :pattern ( (Byte__Order.__default.maximumOpt arg0@@322 arg1@@188)) )))
(assert (forall (($ly@@406 T@U) (|s#0@@88| T@U) ) (!  (=> (and (= (type $ly@@406) LayerTypeType) (= (type |s#0@@88|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.maximumOpt ($LS $ly@@406) |s#0@@88|) (Byte__Order.__default.maximumOpt $ly@@406 |s#0@@88|))) :qid |totalord.817:22| :skolemid |12107| :pattern ( (Byte__Order.__default.maximumOpt ($LS $ly@@406) |s#0@@88|)) )))
(assert (forall (($ly@@407 T@U) (|s#0@@89| T@U) ) (!  (=> (and (= (type $ly@@407) LayerTypeType) (= (type |s#0@@89|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.maximumOpt $ly@@407 |s#0@@89|) (Byte__Order.__default.maximumOpt $LZ |s#0@@89|))) :qid |totalord.817:22| :skolemid |12108| :pattern ( (Byte__Order.__default.maximumOpt (AsFuelBottom $ly@@407) |s#0@@89|)) )))
(assert  (=> true (forall (($ly@@408 T@U) (|s#0@@90| T@U) ) (!  (=> (and (and (= (type $ly@@408) LayerTypeType) (= (type |s#0@@90|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximumOpt#canCall| |s#0@@90|) ($Is |s#0@@90| (TSet Tclass.NativeTypes.byte)))) (and (and (and (=> (Options.Option.Some_q (Byte__Order.__default.maximumOpt $ly@@408 |s#0@@90|)) (U_2_bool (MapType0Select |s#0@@90| (Options.Option.value (Byte__Order.__default.maximumOpt $ly@@408 |s#0@@90|))))) (=> (Options.Option.Some_q (Byte__Order.__default.maximumOpt $ly@@408 |s#0@@90|)) (forall ((|y#1@@2| Int) ) (!  (=> (and (and (<= (LitInt 0) |y#1@@2|) (< |y#1@@2| 256)) (U_2_bool (MapType0Select |s#0@@90| ($Box (int_2_U |y#1@@2|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |y#1@@2| (U_2_int ($Unbox intType (Options.Option.value (Byte__Order.__default.maximumOpt $ly@@408 |s#0@@90|)))))) :qid |totalord.819:30| :skolemid |12109| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |y#1@@2| (U_2_int ($Unbox intType (Options.Option.value (Byte__Order.__default.maximumOpt $ly@@408 |s#0@@90|)))))) :pattern ( (MapType0Select |s#0@@90| ($Box (int_2_U |y#1@@2|)))) )))) (=> (Options.Option.None_q (Byte__Order.__default.maximumOpt $ly@@408 |s#0@@90|)) (|Set#Equal| |s#0@@90| (|Set#Empty| BoxType)))) ($Is (Byte__Order.__default.maximumOpt $ly@@408 |s#0@@90|) (Tclass.Options.Option Tclass.NativeTypes.byte)))) :qid |totalord.817:22| :skolemid |12110| :pattern ( (Byte__Order.__default.maximumOpt $ly@@408 |s#0@@90|)) ))))
(assert (forall (($ly@@409 T@U) (|s#0@@91| T@U) ) (!  (=> (and (and (= (type $ly@@409) LayerTypeType) (= (type |s#0@@91|) (MapType0Type BoxType boolType))) ($Is |s#0@@91| (TSet Tclass.NativeTypes.byte))) (and (=> (|Byte__Order.__default.maximumOpt#requires| $ly@@409 |s#0@@91|) true) (=> true (|Byte__Order.__default.maximumOpt#requires| $ly@@409 |s#0@@91|)))) :qid |totalord.817:22| :skolemid |12111| :pattern ( (|Byte__Order.__default.maximumOpt#requires| $ly@@409 |s#0@@91|)) )))
(assert (= (type StartFuel_Byte_Order._default.maximum) LayerTypeType))
(assert  (=> true (forall (($ly@@410 T@U) (|s#0@@92| T@U) ) (!  (=> (and (and (= (type $ly@@410) LayerTypeType) (= (type |s#0@@92|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximumOpt#canCall| |s#0@@92|) ($Is |s#0@@92| (TSet Tclass.NativeTypes.byte)))) (and (=> (not (|Set#Equal| |s#0@@92| (|Set#Empty| BoxType))) (|Byte__Order.__default.maximum#canCall| |s#0@@92|)) (= (Byte__Order.__default.maximumOpt ($LS $ly@@410) |s#0@@92|) (ite (|Set#Equal| |s#0@@92| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Byte__Order.__default.maximum StartFuel_Byte_Order._default.maximum |s#0@@92|)))))))) :qid |totalord.817:22| :skolemid |12112| :pattern ( (Byte__Order.__default.maximumOpt ($LS $ly@@410) |s#0@@92|)) ))))
(assert  (=> true (forall (($ly@@411 T@U) (|s#0@@93| T@U) ) (!  (=> (and (and (= (type $ly@@411) LayerTypeType) (= (type |s#0@@93|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximumOpt#canCall| (Lit |s#0@@93|)) ($Is |s#0@@93| (TSet Tclass.NativeTypes.byte)))) (and (=> (not (|Set#Equal| |s#0@@93| (|Set#Empty| BoxType))) (|Byte__Order.__default.maximum#canCall| (Lit |s#0@@93|))) (= (Byte__Order.__default.maximumOpt ($LS $ly@@411) (Lit |s#0@@93|)) (ite (|Set#Equal| |s#0@@93| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Byte__Order.__default.maximum StartFuel_Byte_Order._default.maximum (Lit |s#0@@93|))))))))) :qid |totalord.817:22| :weight 3 :skolemid |12113| :pattern ( (Byte__Order.__default.maximumOpt ($LS $ly@@411) (Lit |s#0@@93|))) ))))
(assert  (=> true (forall ((|a#0@@102| Int) (|b#0@@70| Int) ) (!  (=> (or (|Byte__Order.__default.lt#canCall| |a#0@@102| |b#0@@70|) (and (and (<= (LitInt 0) |a#0@@102|) (< |a#0@@102| 256)) (and (<= (LitInt 0) |b#0@@70|) (< |b#0@@70| 256)))) true) :qid |totalord.12:15| :skolemid |12114| :pattern ( (Byte__Order.__default.lt |a#0@@102| |b#0@@70|)) ))))
(assert (forall ((|a#0@@103| Int) (|b#0@@71| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@103|) (< |a#0@@103| 256)) (and (<= (LitInt 0) |b#0@@71|) (< |b#0@@71| 256))) (and (=> (|Byte__Order.__default.lt#requires| |a#0@@103| |b#0@@71|) true) (=> true (|Byte__Order.__default.lt#requires| |a#0@@103| |b#0@@71|)))) :qid |totalord.12:15| :skolemid |12115| :pattern ( (|Byte__Order.__default.lt#requires| |a#0@@103| |b#0@@71|)) )))
(assert  (=> true (forall ((|a#0@@104| Int) (|b#0@@72| Int) ) (!  (=> (or (|Byte__Order.__default.lt#canCall| |a#0@@104| |b#0@@72|) (and (and (<= (LitInt 0) |a#0@@104|) (< |a#0@@104| 256)) (and (<= (LitInt 0) |b#0@@72|) (< |b#0@@72| 256)))) (and (|Byte__Order.__default.lte#canCall| |a#0@@104| |b#0@@72|) (and (=> (Byte__Order.__default.lt |a#0@@104| |b#0@@72|) (and (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |a#0@@104| |b#0@@72|) (not (= |a#0@@104| |b#0@@72|)))) (=> (and (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |a#0@@104| |b#0@@72|) (not (= |a#0@@104| |b#0@@72|))) (Byte__Order.__default.lt |a#0@@104| |b#0@@72|))))) :qid |totalord.12:15| :skolemid |12116| :pattern ( (Byte__Order.__default.lt |a#0@@104| |b#0@@72|)) ))))
(assert  (=> true (forall ((|a#0@@105| Int) (|b#0@@73| Int) ) (!  (=> (or (|Byte__Order.__default.lt#canCall| (LitInt |a#0@@105|) (LitInt |b#0@@73|)) (and (and (<= (LitInt 0) |a#0@@105|) (< |a#0@@105| 256)) (and (<= (LitInt 0) |b#0@@73|) (< |b#0@@73| 256)))) (and (|Byte__Order.__default.lte#canCall| (LitInt |a#0@@105|) (LitInt |b#0@@73|)) (and (=> (Byte__Order.__default.lt (LitInt |a#0@@105|) (LitInt |b#0@@73|)) (and (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |a#0@@105|) (LitInt |b#0@@73|)) (not (= |a#0@@105| |b#0@@73|)))) (=> (and (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |a#0@@105|) (LitInt |b#0@@73|)) (not (= |a#0@@105| |b#0@@73|))) (Byte__Order.__default.lt (LitInt |a#0@@105|) (LitInt |b#0@@73|)))))) :qid |totalord.12:15| :weight 3 :skolemid |12117| :pattern ( (Byte__Order.__default.lt (LitInt |a#0@@105|) (LitInt |b#0@@73|))) ))))
(assert  (=> true (forall ((|a#0@@106| Int) (|b#0@@74| Int) ) (!  (=> (or (|Byte__Order.__default.Min#canCall| |a#0@@106| |b#0@@74|) (and (and (<= (LitInt 0) |a#0@@106|) (< |a#0@@106| 256)) (and (<= (LitInt 0) |b#0@@74|) (< |b#0@@74| 256)))) (and (<= (LitInt 0) (Byte__Order.__default.Min |a#0@@106| |b#0@@74|)) (< (Byte__Order.__default.Min |a#0@@106| |b#0@@74|) 256))) :qid |totalord.24:16| :skolemid |12118| :pattern ( (Byte__Order.__default.Min |a#0@@106| |b#0@@74|)) ))))
(assert (forall ((|a#0@@107| Int) (|b#0@@75| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@107|) (< |a#0@@107| 256)) (and (<= (LitInt 0) |b#0@@75|) (< |b#0@@75| 256))) (and (=> (|Byte__Order.__default.Min#requires| |a#0@@107| |b#0@@75|) true) (=> true (|Byte__Order.__default.Min#requires| |a#0@@107| |b#0@@75|)))) :qid |totalord.24:16| :skolemid |12119| :pattern ( (|Byte__Order.__default.Min#requires| |a#0@@107| |b#0@@75|)) )))
(assert  (=> true (forall ((|a#0@@108| Int) (|b#0@@76| Int) ) (!  (=> (or (|Byte__Order.__default.Min#canCall| |a#0@@108| |b#0@@76|) (and (and (<= (LitInt 0) |a#0@@108|) (< |a#0@@108| 256)) (and (<= (LitInt 0) |b#0@@76|) (< |b#0@@76| 256)))) (and (|Byte__Order.__default.lte#canCall| |a#0@@108| |b#0@@76|) (= (Byte__Order.__default.Min |a#0@@108| |b#0@@76|) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |a#0@@108| |b#0@@76|) |a#0@@108| |b#0@@76|)))) :qid |totalord.24:16| :skolemid |12120| :pattern ( (Byte__Order.__default.Min |a#0@@108| |b#0@@76|)) ))))
(assert  (=> true (forall ((|a#0@@109| Int) (|b#0@@77| Int) ) (!  (=> (or (|Byte__Order.__default.Min#canCall| (LitInt |a#0@@109|) (LitInt |b#0@@77|)) (and (and (<= (LitInt 0) |a#0@@109|) (< |a#0@@109| 256)) (and (<= (LitInt 0) |b#0@@77|) (< |b#0@@77| 256)))) (and (|Byte__Order.__default.lte#canCall| (LitInt |a#0@@109|) (LitInt |b#0@@77|)) (= (Byte__Order.__default.Min (LitInt |a#0@@109|) (LitInt |b#0@@77|)) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |a#0@@109|) (LitInt |b#0@@77|)) |a#0@@109| |b#0@@77|)))) :qid |totalord.24:16| :weight 3 :skolemid |12121| :pattern ( (Byte__Order.__default.Min (LitInt |a#0@@109|) (LitInt |b#0@@77|))) ))))
(assert  (=> true (forall ((|a#0@@110| Int) (|b#0@@78| Int) ) (!  (=> (or (|Byte__Order.__default.Max#canCall| |a#0@@110| |b#0@@78|) (and (and (<= (LitInt 0) |a#0@@110|) (< |a#0@@110| 256)) (and (<= (LitInt 0) |b#0@@78|) (< |b#0@@78| 256)))) (and (<= (LitInt 0) (Byte__Order.__default.Max |a#0@@110| |b#0@@78|)) (< (Byte__Order.__default.Max |a#0@@110| |b#0@@78|) 256))) :qid |totalord.29:16| :skolemid |12122| :pattern ( (Byte__Order.__default.Max |a#0@@110| |b#0@@78|)) ))))
(assert (forall ((|a#0@@111| Int) (|b#0@@79| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@111|) (< |a#0@@111| 256)) (and (<= (LitInt 0) |b#0@@79|) (< |b#0@@79| 256))) (and (=> (|Byte__Order.__default.Max#requires| |a#0@@111| |b#0@@79|) true) (=> true (|Byte__Order.__default.Max#requires| |a#0@@111| |b#0@@79|)))) :qid |totalord.29:16| :skolemid |12123| :pattern ( (|Byte__Order.__default.Max#requires| |a#0@@111| |b#0@@79|)) )))
(assert  (=> true (forall ((|a#0@@112| Int) (|b#0@@80| Int) ) (!  (=> (or (|Byte__Order.__default.Max#canCall| |a#0@@112| |b#0@@80|) (and (and (<= (LitInt 0) |a#0@@112|) (< |a#0@@112| 256)) (and (<= (LitInt 0) |b#0@@80|) (< |b#0@@80| 256)))) (and (|Byte__Order.__default.lte#canCall| |a#0@@112| |b#0@@80|) (= (Byte__Order.__default.Max |a#0@@112| |b#0@@80|) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |a#0@@112| |b#0@@80|) |b#0@@80| |a#0@@112|)))) :qid |totalord.29:16| :skolemid |12124| :pattern ( (Byte__Order.__default.Max |a#0@@112| |b#0@@80|)) ))))
(assert  (=> true (forall ((|a#0@@113| Int) (|b#0@@81| Int) ) (!  (=> (or (|Byte__Order.__default.Max#canCall| (LitInt |a#0@@113|) (LitInt |b#0@@81|)) (and (and (<= (LitInt 0) |a#0@@113|) (< |a#0@@113| 256)) (and (<= (LitInt 0) |b#0@@81|) (< |b#0@@81| 256)))) (and (|Byte__Order.__default.lte#canCall| (LitInt |a#0@@113|) (LitInt |b#0@@81|)) (= (Byte__Order.__default.Max (LitInt |a#0@@113|) (LitInt |b#0@@81|)) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |a#0@@113|) (LitInt |b#0@@81|)) |b#0@@81| |a#0@@113|)))) :qid |totalord.29:16| :weight 3 :skolemid |12125| :pattern ( (Byte__Order.__default.Max (LitInt |a#0@@113|) (LitInt |b#0@@81|))) ))))
(assert (forall (($ly@@412 T@U) (|run#0@@92| T@U) ) (!  (=> (and (= (type $ly@@412) LayerTypeType) (= (type |run#0@@92|) (SeqType BoxType))) (and (=> (Byte__Order.__default.IsSorted ($LS $ly@@412) |run#0@@92|) (Byte__Order.__default.IsSorted $ly@@412 |run#0@@92|)) (=> (Byte__Order.__default.IsSorted $ly@@412 |run#0@@92|) (Byte__Order.__default.IsSorted ($LS $ly@@412) |run#0@@92|)))) :qid |totalord.41:23| :skolemid |12126| :pattern ( (Byte__Order.__default.IsSorted ($LS $ly@@412) |run#0@@92|)) )))
(assert (forall (($ly@@413 T@U) (|run#0@@93| T@U) ) (!  (=> (and (= (type $ly@@413) LayerTypeType) (= (type |run#0@@93|) (SeqType BoxType))) (and (=> (Byte__Order.__default.IsSorted $ly@@413 |run#0@@93|) (Byte__Order.__default.IsSorted $LZ |run#0@@93|)) (=> (Byte__Order.__default.IsSorted $LZ |run#0@@93|) (Byte__Order.__default.IsSorted $ly@@413 |run#0@@93|)))) :qid |totalord.41:23| :skolemid |12127| :pattern ( (Byte__Order.__default.IsSorted (AsFuelBottom $ly@@413) |run#0@@93|)) )))
(assert  (=> true (forall (($ly@@414 T@U) (|run#0@@94| T@U) ) (!  (=> (and (and (= (type $ly@@414) LayerTypeType) (= (type |run#0@@94|) (SeqType BoxType))) (or (|Byte__Order.__default.IsSorted#canCall| |run#0@@94|) ($Is |run#0@@94| (TSeq Tclass.NativeTypes.byte)))) (and (=> (= (|Seq#Length| |run#0@@94|) (LitInt 0)) (Byte__Order.__default.IsSorted $ly@@414 |run#0@@94|)) (=> (= (|Seq#Length| |run#0@@94|) (LitInt 1)) (Byte__Order.__default.IsSorted $ly@@414 |run#0@@94|)))) :qid |totalord.41:23| :skolemid |12128| :pattern ( (Byte__Order.__default.IsSorted $ly@@414 |run#0@@94|)) ))))
(assert (forall (($ly@@415 T@U) (|run#0@@95| T@U) ) (!  (=> (and (and (= (type $ly@@415) LayerTypeType) (= (type |run#0@@95|) (SeqType BoxType))) ($Is |run#0@@95| (TSeq Tclass.NativeTypes.byte))) (and (=> (|Byte__Order.__default.IsSorted#requires| $ly@@415 |run#0@@95|) true) (=> true (|Byte__Order.__default.IsSorted#requires| $ly@@415 |run#0@@95|)))) :qid |totalord.41:23| :skolemid |12129| :pattern ( (|Byte__Order.__default.IsSorted#requires| $ly@@415 |run#0@@95|)) )))
(assert  (=> true (forall (($ly@@416 T@U) (|run#0@@96| T@U) ) (!  (=> (and (and (= (type $ly@@416) LayerTypeType) (= (type |run#0@@96|) (SeqType BoxType))) (or (|Byte__Order.__default.IsSorted#canCall| |run#0@@96|) ($Is |run#0@@96| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|i#2@@15| Int) (|j#2@@4| Int) ) (!  (=> (< |j#2@@4| (|Seq#Length| |run#0@@96|)) (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@96| |i#2@@15|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@96| |j#2@@4|))))) :qid |totalord.45:12| :skolemid |12130| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@96| |j#2@@4|)) ($Unbox intType (|Seq#Index| |run#0@@96| |i#2@@15|))) )) (and (=> (Byte__Order.__default.IsSorted ($LS $ly@@416) |run#0@@96|) (forall ((|i#2@@16| Int) (|j#2@@5| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#2@@16|) (<= |i#2@@16| |j#2@@5|)) (< |j#2@@5| (|Seq#Length| |run#0@@96|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@96| |i#2@@16|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@96| |j#2@@5|)))))) :qid |totalord.45:12| :skolemid |12131| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@96| |j#2@@5|)) ($Unbox intType (|Seq#Index| |run#0@@96| |i#2@@16|))) ))) (=> (forall ((|i#2@@17| Int) (|j#2@@6| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#2@@17|) (<= |i#2@@17| |j#2@@6|)) (< |j#2@@6| (|Seq#Length| |run#0@@96|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@96| |i#2@@17|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@96| |j#2@@6|)))))) :qid |totalord.45:12| :skolemid |12131| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@96| |j#2@@6|)) ($Unbox intType (|Seq#Index| |run#0@@96| |i#2@@17|))) )) (Byte__Order.__default.IsSorted ($LS $ly@@416) |run#0@@96|))))) :qid |totalord.41:23| :skolemid |12132| :pattern ( (Byte__Order.__default.IsSorted ($LS $ly@@416) |run#0@@96|)) ))))
(assert  (=> true (forall (($ly@@417 T@U) (|run#0@@97| T@U) ) (!  (=> (and (and (= (type $ly@@417) LayerTypeType) (= (type |run#0@@97|) (SeqType BoxType))) (or (|Byte__Order.__default.IsSorted#canCall| (Lit |run#0@@97|)) ($Is |run#0@@97| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|i#3@@17| Int) (|j#3@@1| Int) ) (!  (=> (< |j#3@@1| (|Seq#Length| (Lit |run#0@@97|))) (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@97|) |i#3@@17|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@97|) |j#3@@1|))))) :qid |totalord.45:12| :skolemid |12133| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@97| |j#3@@1|)) ($Unbox intType (|Seq#Index| |run#0@@97| |i#3@@17|))) )) (and (=> (Byte__Order.__default.IsSorted ($LS $ly@@417) (Lit |run#0@@97|)) (forall ((|i#3@@18| Int) (|j#3@@2| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#3@@18|) (<= |i#3@@18| |j#3@@2|)) (< |j#3@@2| (|Seq#Length| (Lit |run#0@@97|)))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@97|) |i#3@@18|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@97|) |j#3@@2|)))))) :qid |totalord.45:12| :skolemid |12134| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@97| |j#3@@2|)) ($Unbox intType (|Seq#Index| |run#0@@97| |i#3@@18|))) ))) (=> (forall ((|i#3@@19| Int) (|j#3@@3| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#3@@19|) (<= |i#3@@19| |j#3@@3|)) (< |j#3@@3| (|Seq#Length| (Lit |run#0@@97|)))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@97|) |i#3@@19|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@97|) |j#3@@3|)))))) :qid |totalord.45:12| :skolemid |12134| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@97| |j#3@@3|)) ($Unbox intType (|Seq#Index| |run#0@@97| |i#3@@19|))) )) (Byte__Order.__default.IsSorted ($LS $ly@@417) (Lit |run#0@@97|)))))) :qid |totalord.41:23| :weight 3 :skolemid |12135| :pattern ( (Byte__Order.__default.IsSorted ($LS $ly@@417) (Lit |run#0@@97|))) ))))
(assert  (=> true (forall ((|run#0@@98| T@U) ) (!  (=> (and (= (type |run#0@@98|) (SeqType BoxType)) (or (|Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@98|) ($Is |run#0@@98| (TSeq Tclass.NativeTypes.byte)))) true) :qid |totalord.48:38| :skolemid |12136| :pattern ( (Byte__Order.__default.IsStrictlySortedInternal |run#0@@98|)) ))))
(assert (forall ((|run#0@@99| T@U) ) (!  (=> (and (= (type |run#0@@99|) (SeqType BoxType)) ($Is |run#0@@99| (TSeq Tclass.NativeTypes.byte))) (and (=> (|Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@99|) true) (=> true (|Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@99|)))) :qid |totalord.48:38| :skolemid |12137| :pattern ( (|Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@99|)) )))
(assert  (=> true (forall ((|run#0@@100| T@U) ) (!  (=> (and (= (type |run#0@@100|) (SeqType BoxType)) (or (|Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@100|) ($Is |run#0@@100| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|i#2@@18| Int) (|j#2@@7| Int) ) (!  (=> (< |j#2@@7| (|Seq#Length| |run#0@@100|)) (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@100| |i#2@@18|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@100| |j#2@@7|))))) :qid |totalord.50:12| :skolemid |12138| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@100| |j#2@@7|)) ($Unbox intType (|Seq#Index| |run#0@@100| |i#2@@18|))) )) (and (=> (Byte__Order.__default.IsStrictlySortedInternal |run#0@@100|) (forall ((|i#2@@19| Int) (|j#2@@8| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#2@@19|) (< |i#2@@19| |j#2@@8|)) (< |j#2@@8| (|Seq#Length| |run#0@@100|))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@100| |i#2@@19|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@100| |j#2@@8|)))))) :qid |totalord.50:12| :skolemid |12139| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@100| |j#2@@8|)) ($Unbox intType (|Seq#Index| |run#0@@100| |i#2@@19|))) ))) (=> (forall ((|i#2@@20| Int) (|j#2@@9| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#2@@20|) (< |i#2@@20| |j#2@@9|)) (< |j#2@@9| (|Seq#Length| |run#0@@100|))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@100| |i#2@@20|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@100| |j#2@@9|)))))) :qid |totalord.50:12| :skolemid |12139| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@100| |j#2@@9|)) ($Unbox intType (|Seq#Index| |run#0@@100| |i#2@@20|))) )) (Byte__Order.__default.IsStrictlySortedInternal |run#0@@100|))))) :qid |totalord.48:38| :skolemid |12140| :pattern ( (Byte__Order.__default.IsStrictlySortedInternal |run#0@@100|)) ))))
(assert  (=> true (forall ((|run#0@@101| T@U) ) (!  (=> (and (= (type |run#0@@101|) (SeqType BoxType)) (or (|Byte__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@101|)) ($Is |run#0@@101| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|i#3@@20| Int) (|j#3@@4| Int) ) (!  (=> (< |j#3@@4| (|Seq#Length| (Lit |run#0@@101|))) (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@101|) |i#3@@20|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@101|) |j#3@@4|))))) :qid |totalord.50:12| :skolemid |12141| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@101| |j#3@@4|)) ($Unbox intType (|Seq#Index| |run#0@@101| |i#3@@20|))) )) (and (=> (Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@101|)) (forall ((|i#3@@21| Int) (|j#3@@5| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#3@@21|) (< |i#3@@21| |j#3@@5|)) (< |j#3@@5| (|Seq#Length| (Lit |run#0@@101|)))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@101|) |i#3@@21|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@101|) |j#3@@5|)))))) :qid |totalord.50:12| :skolemid |12142| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@101| |j#3@@5|)) ($Unbox intType (|Seq#Index| |run#0@@101| |i#3@@21|))) ))) (=> (forall ((|i#3@@22| Int) (|j#3@@6| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#3@@22|) (< |i#3@@22| |j#3@@6|)) (< |j#3@@6| (|Seq#Length| (Lit |run#0@@101|)))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@101|) |i#3@@22|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@101|) |j#3@@6|)))))) :qid |totalord.50:12| :skolemid |12142| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@101| |j#3@@6|)) ($Unbox intType (|Seq#Index| |run#0@@101| |i#3@@22|))) )) (Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@101|)))))) :qid |totalord.48:38| :weight 3 :skolemid |12143| :pattern ( (Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@101|))) ))))
(assert (forall (($ly@@418 T@U) (|run#0@@102| T@U) ) (!  (=> (and (= (type $ly@@418) LayerTypeType) (= (type |run#0@@102|) (SeqType BoxType))) (and (=> (Byte__Order.__default.IsStrictlySorted ($LS $ly@@418) |run#0@@102|) (Byte__Order.__default.IsStrictlySorted $ly@@418 |run#0@@102|)) (=> (Byte__Order.__default.IsStrictlySorted $ly@@418 |run#0@@102|) (Byte__Order.__default.IsStrictlySorted ($LS $ly@@418) |run#0@@102|)))) :qid |totalord.64:23| :skolemid |12144| :pattern ( (Byte__Order.__default.IsStrictlySorted ($LS $ly@@418) |run#0@@102|)) )))
(assert (forall (($ly@@419 T@U) (|run#0@@103| T@U) ) (!  (=> (and (= (type $ly@@419) LayerTypeType) (= (type |run#0@@103|) (SeqType BoxType))) (and (=> (Byte__Order.__default.IsStrictlySorted $ly@@419 |run#0@@103|) (Byte__Order.__default.IsStrictlySorted $LZ |run#0@@103|)) (=> (Byte__Order.__default.IsStrictlySorted $LZ |run#0@@103|) (Byte__Order.__default.IsStrictlySorted $ly@@419 |run#0@@103|)))) :qid |totalord.64:23| :skolemid |12145| :pattern ( (Byte__Order.__default.IsStrictlySorted (AsFuelBottom $ly@@419) |run#0@@103|)) )))
(assert  (=> true (forall (($ly@@420 T@U) (|run#0@@104| T@U) ) (!  (=> (and (and (= (type $ly@@420) LayerTypeType) (= (type |run#0@@104|) (SeqType BoxType))) (or (|Byte__Order.__default.IsStrictlySorted#canCall| |run#0@@104|) ($Is |run#0@@104| (TSeq Tclass.NativeTypes.byte)))) (and (and (=> (= (|Seq#Length| |run#0@@104|) (LitInt 0)) (Byte__Order.__default.IsStrictlySorted $ly@@420 |run#0@@104|)) (=> (= (|Seq#Length| |run#0@@104|) (LitInt 1)) (Byte__Order.__default.IsStrictlySorted $ly@@420 |run#0@@104|))) (=> (Byte__Order.__default.IsStrictlySorted $ly@@420 |run#0@@104|) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@104|)))) :qid |totalord.64:23| :skolemid |12146| :pattern ( (Byte__Order.__default.IsStrictlySorted $ly@@420 |run#0@@104|)) ))))
(assert (forall (($ly@@421 T@U) (|run#0@@105| T@U) ) (!  (=> (and (and (= (type $ly@@421) LayerTypeType) (= (type |run#0@@105|) (SeqType BoxType))) ($Is |run#0@@105| (TSeq Tclass.NativeTypes.byte))) (and (=> (|Byte__Order.__default.IsStrictlySorted#requires| $ly@@421 |run#0@@105|) true) (=> true (|Byte__Order.__default.IsStrictlySorted#requires| $ly@@421 |run#0@@105|)))) :qid |totalord.64:23| :skolemid |12147| :pattern ( (|Byte__Order.__default.IsStrictlySorted#requires| $ly@@421 |run#0@@105|)) )))
(assert  (=> true (forall (($ly@@422 T@U) (|run#0@@106| T@U) ) (!  (=> (and (and (= (type $ly@@422) LayerTypeType) (= (type |run#0@@106|) (SeqType BoxType))) (or (|Byte__Order.__default.IsStrictlySorted#canCall| |run#0@@106|) ($Is |run#0@@106| (TSeq Tclass.NativeTypes.byte)))) (and (|Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@106|) (and (=> (Byte__Order.__default.IsStrictlySorted ($LS $ly@@422) |run#0@@106|) (let ((|b#2@@3| (Byte__Order.__default.IsStrictlySortedInternal |run#0@@106|))) (ite |b#2@@3| |b#2@@3| |b#2@@3|))) (=> (let ((|b#2@@4| (Byte__Order.__default.IsStrictlySortedInternal |run#0@@106|))) (ite |b#2@@4| |b#2@@4| |b#2@@4|)) (Byte__Order.__default.IsStrictlySorted ($LS $ly@@422) |run#0@@106|))))) :qid |totalord.64:23| :skolemid |12148| :pattern ( (Byte__Order.__default.IsStrictlySorted ($LS $ly@@422) |run#0@@106|)) ))))
(assert  (=> true (forall (($ly@@423 T@U) (|run#0@@107| T@U) ) (!  (=> (and (and (= (type $ly@@423) LayerTypeType) (= (type |run#0@@107|) (SeqType BoxType))) (or (|Byte__Order.__default.IsStrictlySorted#canCall| (Lit |run#0@@107|)) ($Is |run#0@@107| (TSeq Tclass.NativeTypes.byte)))) (and (|Byte__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@107|)) (and (=> (Byte__Order.__default.IsStrictlySorted ($LS $ly@@423) (Lit |run#0@@107|)) (let ((|b#3@@4| (U_2_bool (Lit (bool_2_U (Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@107|))))))) (ite |b#3@@4| |b#3@@4| |b#3@@4|))) (=> (let ((|b#3@@5| (U_2_bool (Lit (bool_2_U (Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@107|))))))) (ite |b#3@@5| |b#3@@5| |b#3@@5|)) (Byte__Order.__default.IsStrictlySorted ($LS $ly@@423) (Lit |run#0@@107|)))))) :qid |totalord.64:23| :weight 3 :skolemid |12149| :pattern ( (Byte__Order.__default.IsStrictlySorted ($LS $ly@@423) (Lit |run#0@@107|))) ))))
(assert (= (type Tclass.Lexicographic__Byte__Order.__default) TyType))
(assert (= (Tag Tclass.Lexicographic__Byte__Order.__default) Tagclass.Lexicographic__Byte__Order.__default))
(assert (forall ((bx@@104 T@U) ) (!  (=> (and (= (type bx@@104) BoxType) ($IsBox bx@@104 Tclass.Lexicographic__Byte__Order.__default)) (and (= ($Box ($Unbox refType bx@@104)) bx@@104) ($Is ($Unbox refType bx@@104) Tclass.Lexicographic__Byte__Order.__default))) :qid |unknown.0:0| :skolemid |12150| :pattern ( ($IsBox bx@@104 Tclass.Lexicographic__Byte__Order.__default)) )))
(assert (forall (($o@@54 T@U) ) (!  (=> (= (type $o@@54) refType) (and (=> ($Is $o@@54 Tclass.Lexicographic__Byte__Order.__default) (or (= $o@@54 null) (= (dtype $o@@54) Tclass.Lexicographic__Byte__Order.__default))) (=> (or (= $o@@54 null) (= (dtype $o@@54) Tclass.Lexicographic__Byte__Order.__default)) ($Is $o@@54 Tclass.Lexicographic__Byte__Order.__default)))) :qid |unknown.0:0| :skolemid |12151| :pattern ( ($Is $o@@54 Tclass.Lexicographic__Byte__Order.__default)) )))
(assert (forall (($o@@55 T@U) ($h@@66 T@U) ) (!  (=> (and (= (type $o@@55) refType) (= (type $h@@66) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@55 Tclass.Lexicographic__Byte__Order.__default $h@@66) (or (= $o@@55 null) (U_2_bool (MapType1Select (MapType0Select $h@@66 $o@@55) alloc)))) (=> (or (= $o@@55 null) (U_2_bool (MapType1Select (MapType0Select $h@@66 $o@@55) alloc))) ($IsAlloc $o@@55 Tclass.Lexicographic__Byte__Order.__default $h@@66)))) :qid |unknown.0:0| :skolemid |12152| :pattern ( ($IsAlloc $o@@55 Tclass.Lexicographic__Byte__Order.__default $h@@66)) )))
(assert (= (type Lexicographic__Byte__Order.__default.SomeElement) (SeqType BoxType)))
(assert  (=> true (=> true ($Is Lexicographic__Byte__Order.__default.SomeElement (TSeq Tclass.NativeTypes.byte)))))
(assert  (=> |Lexicographic__Byte__Order.__default.SomeElement#requires| true))
(assert  (=> true |Lexicographic__Byte__Order.__default.SomeElement#requires|))
(assert  (=> true (=> true (= Lexicographic__Byte__Order.__default.SomeElement (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (=> true (= Lexicographic__Byte__Order.__default.SomeElement (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (forall ((|a#0@@114| T@U) (|b#0@@82| T@U) ) (!  (=> (and (and (= (type |a#0@@114|) (SeqType BoxType)) (= (type |b#0@@82|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@114| |b#0@@82|) (and ($Is |a#0@@114| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@82| (TSeq Tclass.NativeTypes.byte))))) (and (and (and (and (and (and (and (=> (Lexicographic__Byte__Order.__default.lte |a#0@@114| |b#0@@82|) (Lexicographic__Byte__Order.__default.ltedef |a#0@@114| |b#0@@82|)) (=> (Lexicographic__Byte__Order.__default.ltedef |a#0@@114| |b#0@@82|) (Lexicographic__Byte__Order.__default.lte |a#0@@114| |b#0@@82|))) (or (Lexicographic__Byte__Order.__default.ltedef |a#0@@114| |b#0@@82|) (Lexicographic__Byte__Order.__default.ltedef |b#0@@82| |a#0@@114|))) (forall ((|a#3@@3| T@U) (|b#3@@6| T@U) (|c#2@@0| T@U) ) (!  (=> (and (and (and (and (= (type |a#3@@3|) (SeqType BoxType)) (= (type |b#3@@6|) (SeqType BoxType))) (= (type |c#2@@0|) (SeqType BoxType))) (and (and ($Is |a#3@@3| (TSeq Tclass.NativeTypes.byte)) ($Is |b#3@@6| (TSeq Tclass.NativeTypes.byte))) ($Is |c#2@@0| (TSeq Tclass.NativeTypes.byte)))) (and (Lexicographic__Byte__Order.__default.ltedef |a#3@@3| |b#3@@6|) (Lexicographic__Byte__Order.__default.ltedef |b#3@@6| |c#2@@0|))) (Lexicographic__Byte__Order.__default.ltedef |a#3@@3| |c#2@@0|)) :qid |totalord.20:18| :skolemid |12153| :pattern ( (Lexicographic__Byte__Order.__default.ltedef |a#3@@3| |c#2@@0|) (Lexicographic__Byte__Order.__default.ltedef |b#3@@6| |c#2@@0|)) :pattern ( (Lexicographic__Byte__Order.__default.ltedef |b#3@@6| |c#2@@0|) (Lexicographic__Byte__Order.__default.ltedef |a#3@@3| |b#3@@6|)) ))) (and (=> (Lexicographic__Byte__Order.__default.lte |a#0@@114| |b#0@@82|) (Lexicographic__Byte__Order.__default.ltedef |a#0@@114| |b#0@@82|)) (=> (Lexicographic__Byte__Order.__default.ltedef |a#0@@114| |b#0@@82|) (Lexicographic__Byte__Order.__default.lte |a#0@@114| |b#0@@82|)))) (or (Lexicographic__Byte__Order.__default.ltedef |a#0@@114| |b#0@@82|) (Lexicographic__Byte__Order.__default.ltedef |b#0@@82| |a#0@@114|))) (=> (and (Lexicographic__Byte__Order.__default.ltedef |a#0@@114| |b#0@@82|) (Lexicographic__Byte__Order.__default.ltedef |b#0@@82| |a#0@@114|)) (|Seq#Equal| |a#0@@114| |b#0@@82|))) (forall ((|a#4@@0| T@U) (|b#4@@0| T@U) (|c#3@@0| T@U) ) (!  (=> (and (and (and (and (= (type |a#4@@0|) (SeqType BoxType)) (= (type |b#4@@0|) (SeqType BoxType))) (= (type |c#3@@0|) (SeqType BoxType))) (and (and ($Is |a#4@@0| (TSeq Tclass.NativeTypes.byte)) ($Is |b#4@@0| (TSeq Tclass.NativeTypes.byte))) ($Is |c#3@@0| (TSeq Tclass.NativeTypes.byte)))) (and (Lexicographic__Byte__Order.__default.ltedef |a#4@@0| |b#4@@0|) (Lexicographic__Byte__Order.__default.ltedef |b#4@@0| |c#3@@0|))) (Lexicographic__Byte__Order.__default.ltedef |a#4@@0| |c#3@@0|)) :qid |totalord.188:18| :skolemid |12154| :pattern ( (Lexicographic__Byte__Order.__default.ltedef |a#4@@0| |c#3@@0|) (Lexicographic__Byte__Order.__default.ltedef |b#4@@0| |c#3@@0|)) :pattern ( (Lexicographic__Byte__Order.__default.ltedef |b#4@@0| |c#3@@0|) (Lexicographic__Byte__Order.__default.ltedef |a#4@@0| |b#4@@0|)) )))) :qid |totalord.17:16| :skolemid |12155| :pattern ( (Lexicographic__Byte__Order.__default.lte |a#0@@114| |b#0@@82|)) ))))
(assert (forall ((|a#0@@115| T@U) (|b#0@@83| T@U) ) (!  (=> (and (and (= (type |a#0@@115|) (SeqType BoxType)) (= (type |b#0@@83|) (SeqType BoxType))) (and ($Is |a#0@@115| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@83| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.lte#requires| |a#0@@115| |b#0@@83|) true) (=> true (|Lexicographic__Byte__Order.__default.lte#requires| |a#0@@115| |b#0@@83|)))) :qid |totalord.17:16| :skolemid |12156| :pattern ( (|Lexicographic__Byte__Order.__default.lte#requires| |a#0@@115| |b#0@@83|)) )))
(assert  (=> true (forall ((|a#0@@116| T@U) (|b#0@@84| T@U) ) (!  (=> (and (and (= (type |a#0@@116|) (SeqType BoxType)) (= (type |b#0@@84|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@116| |b#0@@84|) (and ($Is |a#0@@116| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@84| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| |a#0@@116| |b#0@@84|) (and (=> (Lexicographic__Byte__Order.__default.lte |a#0@@116| |b#0@@84|) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@116| |b#0@@84|)) (=> (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@116| |b#0@@84|) (Lexicographic__Byte__Order.__default.lte |a#0@@116| |b#0@@84|))))) :qid |totalord.17:16| :skolemid |12157| :pattern ( (Lexicographic__Byte__Order.__default.lte |a#0@@116| |b#0@@84|)) ))))
(assert  (=> true (forall ((|a#0@@117| T@U) (|b#0@@85| T@U) ) (!  (=> (and (and (= (type |a#0@@117|) (SeqType BoxType)) (= (type |b#0@@85|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |a#0@@117|) (Lit |b#0@@85|)) (and ($Is |a#0@@117| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@85| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| (Lit |a#0@@117|) (Lit |b#0@@85|)) (and (=> (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@117|) (Lit |b#0@@85|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@117|) (Lit |b#0@@85|))) (=> (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@117|) (Lit |b#0@@85|)) (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@117|) (Lit |b#0@@85|)))))) :qid |totalord.17:16| :weight 3 :skolemid |12158| :pattern ( (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@117|) (Lit |b#0@@85|))) ))))
(assert  (=> true (forall ((|a#0@@118| T@U) (|b#0@@86| T@U) ) (!  (=> (and (and (= (type |a#0@@118|) (SeqType BoxType)) (= (type |b#0@@86|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.ltedef#canCall| |a#0@@118| |b#0@@86|) (and ($Is |a#0@@118| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@86| (TSeq Tclass.NativeTypes.byte))))) true) :qid |totalord.22:19| :skolemid |12159| :pattern ( (Lexicographic__Byte__Order.__default.ltedef |a#0@@118| |b#0@@86|)) ))))
(assert (forall ((|a#0@@119| T@U) (|b#0@@87| T@U) ) (!  (=> (and (and (= (type |a#0@@119|) (SeqType BoxType)) (= (type |b#0@@87|) (SeqType BoxType))) (and ($Is |a#0@@119| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@87| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.ltedef#requires| |a#0@@119| |b#0@@87|) true) (=> true (|Lexicographic__Byte__Order.__default.ltedef#requires| |a#0@@119| |b#0@@87|)))) :qid |totalord.22:19| :skolemid |12160| :pattern ( (|Lexicographic__Byte__Order.__default.ltedef#requires| |a#0@@119| |b#0@@87|)) )))
(assert  (=> true (forall ((|a#0@@120| T@U) (|b#0@@88| T@U) ) (!  (=> (and (and (= (type |a#0@@120|) (SeqType BoxType)) (= (type |b#0@@88|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.ltedef#canCall| |a#0@@120| |b#0@@88|) (and ($Is |a#0@@120| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@88| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| |a#0@@120| |b#0@@88|) (and (=> (Lexicographic__Byte__Order.__default.ltedef |a#0@@120| |b#0@@88|) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@120| |b#0@@88|)) (=> (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@120| |b#0@@88|) (Lexicographic__Byte__Order.__default.ltedef |a#0@@120| |b#0@@88|))))) :qid |totalord.22:19| :skolemid |12161| :pattern ( (Lexicographic__Byte__Order.__default.ltedef |a#0@@120| |b#0@@88|)) ))))
(assert  (=> true (forall ((|a#0@@121| T@U) (|b#0@@89| T@U) ) (!  (=> (and (and (= (type |a#0@@121|) (SeqType BoxType)) (= (type |b#0@@89|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.ltedef#canCall| (Lit |a#0@@121|) (Lit |b#0@@89|)) (and ($Is |a#0@@121| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@89| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| (Lit |a#0@@121|) (Lit |b#0@@89|)) (and (=> (Lexicographic__Byte__Order.__default.ltedef (Lit |a#0@@121|) (Lit |b#0@@89|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@121|) (Lit |b#0@@89|))) (=> (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@121|) (Lit |b#0@@89|)) (Lexicographic__Byte__Order.__default.ltedef (Lit |a#0@@121|) (Lit |b#0@@89|)))))) :qid |totalord.22:19| :weight 3 :skolemid |12162| :pattern ( (Lexicographic__Byte__Order.__default.ltedef (Lit |a#0@@121|) (Lit |b#0@@89|))) ))))
(assert (forall (($ly@@424 T@U) (|run#0@@108| T@U) (|needle#0@@37| T@U) ) (!  (=> (and (and (= (type $ly@@424) LayerTypeType) (= (type |run#0@@108|) (SeqType BoxType))) (= (type |needle#0@@37|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@424) |run#0@@108| |needle#0@@37|) (Lexicographic__Byte__Order.__default.LargestLte $ly@@424 |run#0@@108| |needle#0@@37|))) :qid |totalord.253:12| :skolemid |12163| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@424) |run#0@@108| |needle#0@@37|)) )))
(assert (forall (($ly@@425 T@U) (|run#0@@109| T@U) (|needle#0@@38| T@U) ) (!  (=> (and (and (= (type $ly@@425) LayerTypeType) (= (type |run#0@@109|) (SeqType BoxType))) (= (type |needle#0@@38|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.LargestLte $ly@@425 |run#0@@109| |needle#0@@38|) (Lexicographic__Byte__Order.__default.LargestLte $LZ |run#0@@109| |needle#0@@38|))) :qid |totalord.253:12| :skolemid |12164| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte (AsFuelBottom $ly@@425) |run#0@@109| |needle#0@@38|)) )))
(assert (= (type StartFuel_Lexicographic_Byte_Order._default.IsSorted) LayerTypeType))
(assert  (=> true (forall (($ly@@426 T@U) (|run#0@@110| T@U) (|needle#0@@39| T@U) ) (!  (=> (and (and (and (= (type $ly@@426) LayerTypeType) (= (type |run#0@@110|) (SeqType BoxType))) (= (type |needle#0@@39|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLte#canCall| |run#0@@110| |needle#0@@39|) (and (and ($Is |run#0@@110| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@39| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@110|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Lexicographic__Byte__Order.__default.LargestLte $ly@@426 |run#0@@110| |needle#0@@39|)) (< (Lexicographic__Byte__Order.__default.LargestLte $ly@@426 |run#0@@110| |needle#0@@39|) (|Seq#Length| |run#0@@110|))) (forall ((|i#2@@21| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@21|) (<= |i#2@@21| (Lexicographic__Byte__Order.__default.LargestLte $ly@@426 |run#0@@110| |needle#0@@39|))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@110| |i#2@@21|)) |needle#0@@39|))) :qid |totalord.256:20| :skolemid |12165| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@110| |i#2@@21|))) ))) (forall ((|i#3@@23| Int) ) (!  (=> true (=> (and (< (Lexicographic__Byte__Order.__default.LargestLte $ly@@426 |run#0@@110| |needle#0@@39|) |i#3@@23|) (< |i#3@@23| (|Seq#Length| |run#0@@110|))) (Lexicographic__Byte__Order.__default.lt |needle#0@@39| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@110| |i#3@@23|))))) :qid |totalord.257:20| :skolemid |12166| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@110| |i#3@@23|))) ))) (=> (|Seq#Contains| |run#0@@110| ($Box |needle#0@@39|)) (and (<= (LitInt 0) (Lexicographic__Byte__Order.__default.LargestLte $ly@@426 |run#0@@110| |needle#0@@39|)) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@110| (Lexicographic__Byte__Order.__default.LargestLte $ly@@426 |run#0@@110| |needle#0@@39|))) |needle#0@@39|))))) :qid |totalord.253:12| :skolemid |12167| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte $ly@@426 |run#0@@110| |needle#0@@39|)) ))))
(assert (forall (($ly@@427 T@U) (|run#0@@111| T@U) (|needle#0@@40| T@U) ) (!  (=> (and (and (and (= (type $ly@@427) LayerTypeType) (= (type |run#0@@111|) (SeqType BoxType))) (= (type |needle#0@@40|) (SeqType BoxType))) (and ($Is |run#0@@111| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@40| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.LargestLte#requires| $ly@@427 |run#0@@111| |needle#0@@40|) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@111|)) (=> (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@111|) (|Lexicographic__Byte__Order.__default.LargestLte#requires| $ly@@427 |run#0@@111| |needle#0@@40|)))) :qid |totalord.253:12| :skolemid |12168| :pattern ( (|Lexicographic__Byte__Order.__default.LargestLte#requires| $ly@@427 |run#0@@111| |needle#0@@40|)) )))
(assert  (and (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted8) LayerTypeType) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted) LayerTypeType)))
(assert  (=> true (forall (($ly@@428 T@U) (|run#0@@112| T@U) (|needle#0@@41| T@U) ) (!  (=> (and (and (and (= (type $ly@@428) LayerTypeType) (= (type |run#0@@112|) (SeqType BoxType))) (= (type |needle#0@@41|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLte#canCall| |run#0@@112| |needle#0@@41|) (and (and ($Is |run#0@@112| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@41| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@112|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@112|) (LitInt 0))) (|Lexicographic__Byte__Order.__default.lt#canCall| |needle#0@@41| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@112| (LitInt 0))))) (=> (not (or (= (|Seq#Length| |run#0@@112|) (LitInt 0)) (Lexicographic__Byte__Order.__default.lt |needle#0@@41| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@112| (LitInt 0)))))) (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (|Seq#Drop| |run#0@@112| (LitInt 1)) |needle#0@@41|))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted8)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted8)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted8) MoreFuel_Lexicographic_Byte_Order._default.IsSorted8)) (= (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@428) |run#0@@112| |needle#0@@41|) (ite  (or (= (|Seq#Length| |run#0@@112|) (LitInt 0)) (Lexicographic__Byte__Order.__default.lt |needle#0@@41| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@112| (LitInt 0))))) (- 0 1) (+ 1 (Lexicographic__Byte__Order.__default.LargestLte $ly@@428 (|Seq#Drop| |run#0@@112| (LitInt 1)) |needle#0@@41|))))))) :qid |totalord.253:12| :skolemid |12169| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@428) |run#0@@112| |needle#0@@41|)) ))))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted9) LayerTypeType))
(assert  (=> true (forall (($ly@@429 T@U) (|run#0@@113| T@U) (|needle#0@@42| T@U) ) (!  (=> (and (and (and (= (type $ly@@429) LayerTypeType) (= (type |run#0@@113|) (SeqType BoxType))) (= (type |needle#0@@42|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (Lit |run#0@@113|) (Lit |needle#0@@42|)) (and (and ($Is |run#0@@113| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@42| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted (Lit |run#0@@113|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@113|)) (LitInt 0))) (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |needle#0@@42|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@113|) (LitInt 0))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@113|)) (LitInt 0)) (Lexicographic__Byte__Order.__default.lt (Lit |needle#0@@42|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@113|) (LitInt 0)))))) (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (Lit (|Seq#Drop| (Lit |run#0@@113|) (LitInt 1))) (Lit |needle#0@@42|)))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted9)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted9)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted9) MoreFuel_Lexicographic_Byte_Order._default.IsSorted9)) (= (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@429) (Lit |run#0@@113|) (Lit |needle#0@@42|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@113|)) (LitInt 0)) (Lexicographic__Byte__Order.__default.lt (Lit |needle#0@@42|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@113|) (LitInt 0))))) (- 0 1) (+ 1 (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@429) (Lit (|Seq#Drop| (Lit |run#0@@113|) (LitInt 1))) (Lit |needle#0@@42|)))))))) :qid |totalord.253:12| :weight 3 :skolemid |12170| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@429) (Lit |run#0@@113|) (Lit |needle#0@@42|))) ))))
(assert (forall (($ly@@430 T@U) (|run#0@@114| T@U) (|needle#0@@43| T@U) ) (!  (=> (and (and (= (type $ly@@430) LayerTypeType) (= (type |run#0@@114|) (SeqType BoxType))) (= (type |needle#0@@43|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@430) |run#0@@114| |needle#0@@43|) (Lexicographic__Byte__Order.__default.LargestLt $ly@@430 |run#0@@114| |needle#0@@43|))) :qid |totalord.356:12| :skolemid |12173| :pattern ( (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@430) |run#0@@114| |needle#0@@43|)) )))
(assert (forall (($ly@@431 T@U) (|run#0@@115| T@U) (|needle#0@@44| T@U) ) (!  (=> (and (and (= (type $ly@@431) LayerTypeType) (= (type |run#0@@115|) (SeqType BoxType))) (= (type |needle#0@@44|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.LargestLt $ly@@431 |run#0@@115| |needle#0@@44|) (Lexicographic__Byte__Order.__default.LargestLt $LZ |run#0@@115| |needle#0@@44|))) :qid |totalord.356:12| :skolemid |12174| :pattern ( (Lexicographic__Byte__Order.__default.LargestLt (AsFuelBottom $ly@@431) |run#0@@115| |needle#0@@44|)) )))
(assert  (=> true (forall (($ly@@432 T@U) (|run#0@@116| T@U) (|needle#0@@45| T@U) ) (!  (=> (and (and (and (= (type $ly@@432) LayerTypeType) (= (type |run#0@@116|) (SeqType BoxType))) (= (type |needle#0@@45|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLt#canCall| |run#0@@116| |needle#0@@45|) (and (and ($Is |run#0@@116| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@45| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@116|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Lexicographic__Byte__Order.__default.LargestLt $ly@@432 |run#0@@116| |needle#0@@45|)) (< (Lexicographic__Byte__Order.__default.LargestLt $ly@@432 |run#0@@116| |needle#0@@45|) (|Seq#Length| |run#0@@116|))) (forall ((|i#2@@22| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@22|) (<= |i#2@@22| (Lexicographic__Byte__Order.__default.LargestLt $ly@@432 |run#0@@116| |needle#0@@45|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@116| |i#2@@22|)) |needle#0@@45|))) :qid |totalord.359:20| :skolemid |12175| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@116| |i#2@@22|))) ))) (forall ((|i#3@@24| Int) ) (!  (=> true (=> (and (< (Lexicographic__Byte__Order.__default.LargestLt $ly@@432 |run#0@@116| |needle#0@@45|) |i#3@@24|) (< |i#3@@24| (|Seq#Length| |run#0@@116|))) (Lexicographic__Byte__Order.__default.lte |needle#0@@45| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@116| |i#3@@24|))))) :qid |totalord.360:20| :skolemid |12176| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@116| |i#3@@24|))) ))) (=> (|Seq#Contains| |run#0@@116| ($Box |needle#0@@45|)) (and (< (+ (Lexicographic__Byte__Order.__default.LargestLt $ly@@432 |run#0@@116| |needle#0@@45|) 1) (|Seq#Length| |run#0@@116|)) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@116| (+ (Lexicographic__Byte__Order.__default.LargestLt $ly@@432 |run#0@@116| |needle#0@@45|) 1))) |needle#0@@45|))))) :qid |totalord.356:12| :skolemid |12177| :pattern ( (Lexicographic__Byte__Order.__default.LargestLt $ly@@432 |run#0@@116| |needle#0@@45|)) ))))
(assert (forall (($ly@@433 T@U) (|run#0@@117| T@U) (|needle#0@@46| T@U) ) (!  (=> (and (and (and (= (type $ly@@433) LayerTypeType) (= (type |run#0@@117|) (SeqType BoxType))) (= (type |needle#0@@46|) (SeqType BoxType))) (and ($Is |run#0@@117| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@46| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.LargestLt#requires| $ly@@433 |run#0@@117| |needle#0@@46|) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@117|)) (=> (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@117|) (|Lexicographic__Byte__Order.__default.LargestLt#requires| $ly@@433 |run#0@@117| |needle#0@@46|)))) :qid |totalord.356:12| :skolemid |12178| :pattern ( (|Lexicographic__Byte__Order.__default.LargestLt#requires| $ly@@433 |run#0@@117| |needle#0@@46|)) )))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted10) LayerTypeType))
(assert  (=> true (forall (($ly@@434 T@U) (|run#0@@118| T@U) (|needle#0@@47| T@U) ) (!  (=> (and (and (and (= (type $ly@@434) LayerTypeType) (= (type |run#0@@118|) (SeqType BoxType))) (= (type |needle#0@@47|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLt#canCall| |run#0@@118| |needle#0@@47|) (and (and ($Is |run#0@@118| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@47| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@118|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@118|) (LitInt 0))) (|Lexicographic__Byte__Order.__default.lte#canCall| |needle#0@@47| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@118| (LitInt 0))))) (=> (not (or (= (|Seq#Length| |run#0@@118|) (LitInt 0)) (Lexicographic__Byte__Order.__default.lte |needle#0@@47| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@118| (LitInt 0)))))) (|Lexicographic__Byte__Order.__default.LargestLt#canCall| (|Seq#Drop| |run#0@@118| (LitInt 1)) |needle#0@@47|))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted10)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted10)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted10) MoreFuel_Lexicographic_Byte_Order._default.IsSorted10)) (= (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@434) |run#0@@118| |needle#0@@47|) (ite  (or (= (|Seq#Length| |run#0@@118|) (LitInt 0)) (Lexicographic__Byte__Order.__default.lte |needle#0@@47| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@118| (LitInt 0))))) (- 0 1) (+ 1 (Lexicographic__Byte__Order.__default.LargestLt $ly@@434 (|Seq#Drop| |run#0@@118| (LitInt 1)) |needle#0@@47|))))))) :qid |totalord.356:12| :skolemid |12179| :pattern ( (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@434) |run#0@@118| |needle#0@@47|)) ))))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted11) LayerTypeType))
(assert  (=> true (forall (($ly@@435 T@U) (|run#0@@119| T@U) (|needle#0@@48| T@U) ) (!  (=> (and (and (and (= (type $ly@@435) LayerTypeType) (= (type |run#0@@119|) (SeqType BoxType))) (= (type |needle#0@@48|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLt#canCall| (Lit |run#0@@119|) (Lit |needle#0@@48|)) (and (and ($Is |run#0@@119| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@48| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted (Lit |run#0@@119|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@119|)) (LitInt 0))) (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |needle#0@@48|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@119|) (LitInt 0))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@119|)) (LitInt 0)) (Lexicographic__Byte__Order.__default.lte (Lit |needle#0@@48|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@119|) (LitInt 0)))))) (|Lexicographic__Byte__Order.__default.LargestLt#canCall| (Lit (|Seq#Drop| (Lit |run#0@@119|) (LitInt 1))) (Lit |needle#0@@48|)))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted11)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted11)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted11) MoreFuel_Lexicographic_Byte_Order._default.IsSorted11)) (= (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@435) (Lit |run#0@@119|) (Lit |needle#0@@48|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@119|)) (LitInt 0)) (Lexicographic__Byte__Order.__default.lte (Lit |needle#0@@48|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@119|) (LitInt 0))))) (- 0 1) (+ 1 (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@435) (Lit (|Seq#Drop| (Lit |run#0@@119|) (LitInt 1))) (Lit |needle#0@@48|)))))))) :qid |totalord.356:12| :weight 3 :skolemid |12180| :pattern ( (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@435) (Lit |run#0@@119|) (Lit |needle#0@@48|))) ))))
(assert (forall (($ly@@436 T@U) (|run#0@@120| T@U) (|needle#0@@49| T@U) ) (!  (=> (and (and (= (type $ly@@436) LayerTypeType) (= (type |run#0@@120|) (SeqType BoxType))) (= (type |needle#0@@49|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@436) |run#0@@120| |needle#0@@49|) (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@436 |run#0@@120| |needle#0@@49|))) :qid |totalord.388:12| :skolemid |12181| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@436) |run#0@@120| |needle#0@@49|)) )))
(assert (forall (($ly@@437 T@U) (|run#0@@121| T@U) (|needle#0@@50| T@U) ) (!  (=> (and (and (= (type $ly@@437) LayerTypeType) (= (type |run#0@@121|) (SeqType BoxType))) (= (type |needle#0@@50|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@437 |run#0@@121| |needle#0@@50|) (Lexicographic__Byte__Order.__default.IndexOfFirstGte $LZ |run#0@@121| |needle#0@@50|))) :qid |totalord.388:12| :skolemid |12182| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGte (AsFuelBottom $ly@@437) |run#0@@121| |needle#0@@50|)) )))
(assert  (=> true (forall (($ly@@438 T@U) (|run#0@@122| T@U) (|needle#0@@51| T@U) ) (!  (=> (and (and (and (= (type $ly@@438) LayerTypeType) (= (type |run#0@@122|) (SeqType BoxType))) (= (type |needle#0@@51|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| |run#0@@122| |needle#0@@51|) (and (and ($Is |run#0@@122| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@51| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@122|)))) (and (and (and (<= (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@438 |run#0@@122| |needle#0@@51|) (|Seq#Length| |run#0@@122|)) (forall ((|i#2@@23| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@23|) (< |i#2@@23| (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@438 |run#0@@122| |needle#0@@51|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@122| |i#2@@23|)) |needle#0@@51|)) :qid |totalord.391:20| :skolemid |12183| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@122| |i#2@@23|))) ))) (forall ((|i#3@@25| Int) ) (!  (=> (and (<= (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@438 |run#0@@122| |needle#0@@51|) |i#3@@25|) (< |i#3@@25| (|Seq#Length| |run#0@@122|))) (Lexicographic__Byte__Order.__default.lte |needle#0@@51| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@122| |i#3@@25|)))) :qid |totalord.392:20| :skolemid |12184| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@122| |i#3@@25|))) ))) (<= (LitInt 0) (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@438 |run#0@@122| |needle#0@@51|)))) :qid |totalord.388:12| :skolemid |12185| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@438 |run#0@@122| |needle#0@@51|)) ))))
(assert (forall (($ly@@439 T@U) (|run#0@@123| T@U) (|needle#0@@52| T@U) ) (!  (=> (and (and (and (= (type $ly@@439) LayerTypeType) (= (type |run#0@@123|) (SeqType BoxType))) (= (type |needle#0@@52|) (SeqType BoxType))) (and ($Is |run#0@@123| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@52| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#requires| $ly@@439 |run#0@@123| |needle#0@@52|) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@123|)) (=> (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@123|) (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#requires| $ly@@439 |run#0@@123| |needle#0@@52|)))) :qid |totalord.388:12| :skolemid |12186| :pattern ( (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#requires| $ly@@439 |run#0@@123| |needle#0@@52|)) )))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted12) LayerTypeType))
(assert  (=> true (forall (($ly@@440 T@U) (|run#0@@124| T@U) (|needle#0@@53| T@U) ) (!  (=> (and (and (and (= (type $ly@@440) LayerTypeType) (= (type |run#0@@124|) (SeqType BoxType))) (= (type |needle#0@@53|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| |run#0@@124| |needle#0@@53|) (and (and ($Is |run#0@@124| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@53| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@124|)))) (and (=> (not (= (|Seq#Length| |run#0@@124|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) |run#0@@124|) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@124|)) |needle#0@@53|)) (=> (not (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@124|)) |needle#0@@53|)) (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) |run#0@@124|) (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |run#0@@124|) |needle#0@@53|))))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted12)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted12)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted12) MoreFuel_Lexicographic_Byte_Order._default.IsSorted12)) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@440) |run#0@@124| |needle#0@@53|) (ite (= (|Seq#Length| |run#0@@124|) (LitInt 0)) 0 (ite (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@124|)) |needle#0@@53|) (|Seq#Length| |run#0@@124|) (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@440 (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |run#0@@124|) |needle#0@@53|))))))) :qid |totalord.388:12| :skolemid |12187| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@440) |run#0@@124| |needle#0@@53|)) ))))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted13) LayerTypeType))
(assert  (=> true (forall (($ly@@441 T@U) (|run#0@@125| T@U) (|needle#0@@54| T@U) ) (!  (=> (and (and (and (= (type $ly@@441) LayerTypeType) (= (type |run#0@@125|) (SeqType BoxType))) (= (type |needle#0@@54|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| (Lit |run#0@@125|) (Lit |needle#0@@54|)) (and (and ($Is |run#0@@125| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@54| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted (Lit |run#0@@125|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@125|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@125|)) (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@125|)))) (Lit |needle#0@@54|))) (=> (not (U_2_bool (Lit (bool_2_U (Lexicographic__Byte__Order.__default.lt (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@125|)))) (Lit |needle#0@@54|)))))) (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@125|)) (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@125|))) (Lit |needle#0@@54|)))))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted13)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted13)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted13) MoreFuel_Lexicographic_Byte_Order._default.IsSorted13)) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@441) (Lit |run#0@@125|) (Lit |needle#0@@54|)) (ite (= (|Seq#Length| (Lit |run#0@@125|)) (LitInt 0)) 0 (ite (Lexicographic__Byte__Order.__default.lt (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@125|)))) (Lit |needle#0@@54|)) (|Seq#Length| (Lit |run#0@@125|)) (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@441) (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@125|))) (Lit |needle#0@@54|)))))))) :qid |totalord.388:12| :weight 3 :skolemid |12188| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@441) (Lit |run#0@@125|) (Lit |needle#0@@54|))) ))))
(assert (forall (($ly@@442 T@U) (|s#0@@94| T@U) (|key#0@@46| T@U) (|lo#0@@13| Int) (|hi#0@@13| Int) ) (!  (=> (and (and (= (type $ly@@442) LayerTypeType) (= (type |s#0@@94|) (SeqType BoxType))) (= (type |key#0@@46|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@442) |s#0@@94| |key#0@@46| |lo#0@@13| |hi#0@@13|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@442 |s#0@@94| |key#0@@46| |lo#0@@13| |hi#0@@13|))) :qid |totalord.421:12| :skolemid |12189| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@442) |s#0@@94| |key#0@@46| |lo#0@@13| |hi#0@@13|)) )))
(assert (forall (($ly@@443 T@U) (|s#0@@95| T@U) (|key#0@@47| T@U) (|lo#0@@14| Int) (|hi#0@@14| Int) ) (!  (=> (and (and (= (type $ly@@443) LayerTypeType) (= (type |s#0@@95|) (SeqType BoxType))) (= (type |key#0@@47|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@443 |s#0@@95| |key#0@@47| |lo#0@@14| |hi#0@@14|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $LZ |s#0@@95| |key#0@@47| |lo#0@@14| |hi#0@@14|))) :qid |totalord.421:12| :skolemid |12190| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter (AsFuelBottom $ly@@443) |s#0@@95| |key#0@@47| |lo#0@@14| |hi#0@@14|)) )))
(assert  (=> true (forall (($ly@@444 T@U) (|s#0@@96| T@U) (|key#0@@48| T@U) (|lo#0@@15| Int) (|hi#0@@15| Int) ) (!  (=> (and (and (and (= (type $ly@@444) LayerTypeType) (= (type |s#0@@96|) (SeqType BoxType))) (= (type |key#0@@48|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@96| |key#0@@48| |lo#0@@15| |hi#0@@15|) (and (and ($Is |s#0@@96| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@48| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) |lo#0@@15|) (< |lo#0@@15| |hi#0@@15|)) (<= |hi#0@@15| (+ (|Seq#Length| |s#0@@96|) 1))) (=> (> |lo#0@@15| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@96| (- |lo#0@@15| 1))) |key#0@@48|))) (=> (<= |hi#0@@15| (|Seq#Length| |s#0@@96|)) (Lexicographic__Byte__Order.__default.lte |key#0@@48| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@96| (- |hi#0@@15| 1))))))))) (and (and (and (<= (LitInt 0) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@444 |s#0@@96| |key#0@@48| |lo#0@@15| |hi#0@@15|)) (<= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@444 |s#0@@96| |key#0@@48| |lo#0@@15| |hi#0@@15|) (|Seq#Length| |s#0@@96|))) (=> (> (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@444 |s#0@@96| |key#0@@48| |lo#0@@15| |hi#0@@15|) 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@96| (- (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@444 |s#0@@96| |key#0@@48| |lo#0@@15| |hi#0@@15|) 1))) |key#0@@48|))) (=> (< (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@444 |s#0@@96| |key#0@@48| |lo#0@@15| |hi#0@@15|) (|Seq#Length| |s#0@@96|)) (Lexicographic__Byte__Order.__default.lte |key#0@@48| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@96| (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@444 |s#0@@96| |key#0@@48| |lo#0@@15| |hi#0@@15|))))))) :qid |totalord.421:12| :skolemid |12191| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@444 |s#0@@96| |key#0@@48| |lo#0@@15| |hi#0@@15|)) ))))
(assert (forall (($ly@@445 T@U) (|s#0@@97| T@U) (|key#0@@49| T@U) (|lo#0@@16| Int) (|hi#0@@16| Int) ) (!  (=> (and (and (and (= (type $ly@@445) LayerTypeType) (= (type |s#0@@97|) (SeqType BoxType))) (= (type |key#0@@49|) (SeqType BoxType))) (and ($Is |s#0@@97| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@49| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@445 |s#0@@97| |key#0@@49| |lo#0@@16| |hi#0@@16|) (and (and (and (and (<= (LitInt 0) |lo#0@@16|) (< |lo#0@@16| |hi#0@@16|)) (<= |hi#0@@16| (+ (|Seq#Length| |s#0@@97|) 1))) (=> (> |lo#0@@16| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@97| (- |lo#0@@16| 1))) |key#0@@49|))) (=> (<= |hi#0@@16| (|Seq#Length| |s#0@@97|)) (Lexicographic__Byte__Order.__default.lte |key#0@@49| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@97| (- |hi#0@@16| 1))))))) (=> (and (and (and (and (<= (LitInt 0) |lo#0@@16|) (< |lo#0@@16| |hi#0@@16|)) (<= |hi#0@@16| (+ (|Seq#Length| |s#0@@97|) 1))) (=> (> |lo#0@@16| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@97| (- |lo#0@@16| 1))) |key#0@@49|))) (=> (<= |hi#0@@16| (|Seq#Length| |s#0@@97|)) (Lexicographic__Byte__Order.__default.lte |key#0@@49| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@97| (- |hi#0@@16| 1)))))) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@445 |s#0@@97| |key#0@@49| |lo#0@@16| |hi#0@@16|)))) :qid |totalord.421:12| :skolemid |12192| :pattern ( (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@445 |s#0@@97| |key#0@@49| |lo#0@@16| |hi#0@@16|)) )))
(assert  (=> true (forall (($ly@@446 T@U) (|s#0@@98| T@U) (|key#0@@50| T@U) (|lo#0@@17| Int) (|hi#0@@17| Int) ) (!  (=> (and (and (and (= (type $ly@@446) LayerTypeType) (= (type |s#0@@98|) (SeqType BoxType))) (= (type |key#0@@50|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@98| |key#0@@50| |lo#0@@17| |hi#0@@17|) (and (and ($Is |s#0@@98| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@50| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) |lo#0@@17|) (< |lo#0@@17| |hi#0@@17|)) (<= |hi#0@@17| (+ (|Seq#Length| |s#0@@98|) 1))) (=> (> |lo#0@@17| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@98| (- |lo#0@@17| 1))) |key#0@@50|))) (=> (<= |hi#0@@17| (|Seq#Length| |s#0@@98|)) (Lexicographic__Byte__Order.__default.lte |key#0@@50| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@98| (- |hi#0@@17| 1))))))))) (and (=> (< (+ |lo#0@@17| 1) |hi#0@@17|) (let ((|mid#3@@3| (Div (+ |lo#0@@17| |hi#0@@17|) (LitInt 2)))) (and (and (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@98| (- |mid#3@@3| 1))) |key#0@@50|) (=> (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@98| (- |mid#3@@3| 1))) |key#0@@50|) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@98| |key#0@@50| |mid#3@@3| |hi#0@@17|))) (=> (not (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@98| (- |mid#3@@3| 1))) |key#0@@50|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@98| |key#0@@50| |lo#0@@17| |mid#3@@3|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@446) |s#0@@98| |key#0@@50| |lo#0@@17| |hi#0@@17|) (ite (< (+ |lo#0@@17| 1) |hi#0@@17|) (let ((|mid#3@@4| (Div (+ |lo#0@@17| |hi#0@@17|) (LitInt 2)))) (ite (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@98| (- |mid#3@@4| 1))) |key#0@@50|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@446 |s#0@@98| |key#0@@50| |mid#3@@4| |hi#0@@17|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@446 |s#0@@98| |key#0@@50| |lo#0@@17| |mid#3@@4|))) |lo#0@@17|)))) :qid |totalord.421:12| :skolemid |12193| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@446) |s#0@@98| |key#0@@50| |lo#0@@17| |hi#0@@17|)) ))))
(assert  (=> true (forall (($ly@@447 T@U) (|s#0@@99| T@U) (|key#0@@51| T@U) (|lo#0@@18| Int) (|hi#0@@18| Int) ) (!  (=> (and (and (and (= (type $ly@@447) LayerTypeType) (= (type |s#0@@99|) (SeqType BoxType))) (= (type |key#0@@51|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@99| |key#0@@51| (LitInt |lo#0@@18|) (LitInt |hi#0@@18|)) (and (and ($Is |s#0@@99| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@51| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@18|)) (< |lo#0@@18| |hi#0@@18|)) (<= (LitInt |hi#0@@18|) (+ (|Seq#Length| |s#0@@99|) 1))) (=> (> |lo#0@@18| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@99| (LitInt (- |lo#0@@18| 1)))) |key#0@@51|))) (=> (<= (LitInt |hi#0@@18|) (|Seq#Length| |s#0@@99|)) (Lexicographic__Byte__Order.__default.lte |key#0@@51| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@99| (LitInt (- |hi#0@@18| 1)))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@18| 1) |hi#0@@18|)))) (let ((|mid#4@@3| (LitInt (Div (+ |lo#0@@18| |hi#0@@18|) (LitInt 2))))) (and (and (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@99| (- |mid#4@@3| 1))) |key#0@@51|) (=> (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@99| (- |mid#4@@3| 1))) |key#0@@51|) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@99| |key#0@@51| |mid#4@@3| (LitInt |hi#0@@18|)))) (=> (not (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@99| (- |mid#4@@3| 1))) |key#0@@51|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@99| |key#0@@51| (LitInt |lo#0@@18|) |mid#4@@3|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@447) |s#0@@99| |key#0@@51| (LitInt |lo#0@@18|) (LitInt |hi#0@@18|)) (ite (< (+ |lo#0@@18| 1) |hi#0@@18|) (let ((|mid#4@@4| (LitInt (Div (+ |lo#0@@18| |hi#0@@18|) (LitInt 2))))) (ite (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@99| (LitInt (- |mid#4@@4| 1)))) |key#0@@51|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@447) |s#0@@99| |key#0@@51| |mid#4@@4| (LitInt |hi#0@@18|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@447) |s#0@@99| |key#0@@51| (LitInt |lo#0@@18|) |mid#4@@4|))) |lo#0@@18|)))) :qid |totalord.421:12| :weight 3 :skolemid |12194| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@447) |s#0@@99| |key#0@@51| (LitInt |lo#0@@18|) (LitInt |hi#0@@18|))) ))))
(assert  (=> true (forall (($ly@@448 T@U) (|s#0@@100| T@U) (|key#0@@52| T@U) (|lo#0@@19| Int) (|hi#0@@19| Int) ) (!  (=> (and (and (and (= (type $ly@@448) LayerTypeType) (= (type |s#0@@100|) (SeqType BoxType))) (= (type |key#0@@52|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@100|) (Lit |key#0@@52|) (LitInt |lo#0@@19|) (LitInt |hi#0@@19|)) (and (and ($Is |s#0@@100| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@52| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@19|)) (< |lo#0@@19| |hi#0@@19|)) (<= (LitInt |hi#0@@19|) (+ (|Seq#Length| (Lit |s#0@@100|)) 1))) (=> (> |lo#0@@19| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@100|) (LitInt (- |lo#0@@19| 1)))) (Lit |key#0@@52|)))) (=> (<= (LitInt |hi#0@@19|) (|Seq#Length| (Lit |s#0@@100|))) (Lexicographic__Byte__Order.__default.lte (Lit |key#0@@52|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@100|) (LitInt (- |hi#0@@19| 1)))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@19| 1) |hi#0@@19|)))) (let ((|mid#5@@3| (LitInt (Div (+ |lo#0@@19| |hi#0@@19|) (LitInt 2))))) (and (and (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@100|) (- |mid#5@@3| 1))) (Lit |key#0@@52|)) (=> (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@100|) (- |mid#5@@3| 1))) (Lit |key#0@@52|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@100|) (Lit |key#0@@52|) |mid#5@@3| (LitInt |hi#0@@19|)))) (=> (not (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@100|) (- |mid#5@@3| 1))) (Lit |key#0@@52|))) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@100|) (Lit |key#0@@52|) (LitInt |lo#0@@19|) |mid#5@@3|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@448) (Lit |s#0@@100|) (Lit |key#0@@52|) (LitInt |lo#0@@19|) (LitInt |hi#0@@19|)) (ite (< (+ |lo#0@@19| 1) |hi#0@@19|) (let ((|mid#5@@4| (LitInt (Div (+ |lo#0@@19| |hi#0@@19|) (LitInt 2))))) (ite (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@100|) (LitInt (- |mid#5@@4| 1)))) (Lit |key#0@@52|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@448) (Lit |s#0@@100|) (Lit |key#0@@52|) |mid#5@@4| (LitInt |hi#0@@19|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@448) (Lit |s#0@@100|) (Lit |key#0@@52|) (LitInt |lo#0@@19|) |mid#5@@4|))) |lo#0@@19|)))) :qid |totalord.421:12| :weight 3 :skolemid |12195| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@448) (Lit |s#0@@100|) (Lit |key#0@@52|) (LitInt |lo#0@@19|) (LitInt |hi#0@@19|))) ))))
(assert (forall (($ly@@449 T@U) (|s#0@@101| T@U) (|key#0@@53| T@U) ) (!  (=> (and (and (= (type $ly@@449) LayerTypeType) (= (type |s#0@@101|) (SeqType BoxType))) (= (type |key#0@@53|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@449) |s#0@@101| |key#0@@53|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@449 |s#0@@101| |key#0@@53|))) :qid |totalord.441:22| :skolemid |12196| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@449) |s#0@@101| |key#0@@53|)) )))
(assert (forall (($ly@@450 T@U) (|s#0@@102| T@U) (|key#0@@54| T@U) ) (!  (=> (and (and (= (type $ly@@450) LayerTypeType) (= (type |s#0@@102|) (SeqType BoxType))) (= (type |key#0@@54|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@450 |s#0@@102| |key#0@@54|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $LZ |s#0@@102| |key#0@@54|))) :qid |totalord.441:22| :skolemid |12197| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte (AsFuelBottom $ly@@450) |s#0@@102| |key#0@@54|)) )))
(assert  (=> true (forall (($ly@@451 T@U) (|s#0@@103| T@U) (|key#0@@55| T@U) ) (!  (=> (and (and (and (= (type $ly@@451) LayerTypeType) (= (type |s#0@@103|) (SeqType BoxType))) (= (type |key#0@@55|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@103| |key#0@@55|) (and ($Is |s#0@@103| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@55| (TSeq Tclass.NativeTypes.byte))))) (and (and (and (<= (LitInt 0) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@451 |s#0@@103| |key#0@@55|)) (<= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@451 |s#0@@103| |key#0@@55|) (|Seq#Length| |s#0@@103|))) (=> (> (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@451 |s#0@@103| |key#0@@55|) 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@103| (- (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@451 |s#0@@103| |key#0@@55|) 1))) |key#0@@55|))) (=> (< (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@451 |s#0@@103| |key#0@@55|) (|Seq#Length| |s#0@@103|)) (Lexicographic__Byte__Order.__default.lte |key#0@@55| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@103| (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@451 |s#0@@103| |key#0@@55|))))))) :qid |totalord.441:22| :skolemid |12198| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@451 |s#0@@103| |key#0@@55|)) ))))
(assert (forall (($ly@@452 T@U) (|s#0@@104| T@U) (|key#0@@56| T@U) ) (!  (=> (and (and (and (= (type $ly@@452) LayerTypeType) (= (type |s#0@@104|) (SeqType BoxType))) (= (type |key#0@@56|) (SeqType BoxType))) (and ($Is |s#0@@104| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@56| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@452 |s#0@@104| |key#0@@56|) true) (=> true (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@452 |s#0@@104| |key#0@@56|)))) :qid |totalord.441:22| :skolemid |12199| :pattern ( (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@452 |s#0@@104| |key#0@@56|)) )))
(assert  (=> true (forall (($ly@@453 T@U) (|s#0@@105| T@U) (|key#0@@57| T@U) ) (!  (=> (and (and (and (= (type $ly@@453) LayerTypeType) (= (type |s#0@@105|) (SeqType BoxType))) (= (type |key#0@@57|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@105| |key#0@@57|) (and ($Is |s#0@@105| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@57| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@105| |key#0@@57| (LitInt 0) (+ (|Seq#Length| |s#0@@105|) 1)) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@453) |s#0@@105| |key#0@@57|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) |s#0@@105| |key#0@@57| (LitInt 0) (+ (|Seq#Length| |s#0@@105|) 1))))) :qid |totalord.441:22| :skolemid |12200| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@453) |s#0@@105| |key#0@@57|)) ))))
(assert  (=> true (forall (($ly@@454 T@U) (|s#0@@106| T@U) (|key#0@@58| T@U) ) (!  (=> (and (and (and (= (type $ly@@454) LayerTypeType) (= (type |s#0@@106|) (SeqType BoxType))) (= (type |key#0@@58|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (Lit |s#0@@106|) (Lit |key#0@@58|)) (and ($Is |s#0@@106| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@58| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@106|) (Lit |key#0@@58|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@106|)) 1)) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@454) (Lit |s#0@@106|) (Lit |key#0@@58|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) (Lit |s#0@@106|) (Lit |key#0@@58|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@106|)) 1))))) :qid |totalord.441:22| :weight 3 :skolemid |12201| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@454) (Lit |s#0@@106|) (Lit |key#0@@58|))) ))))
(assert (forall (($ly@@455 T@U) (|run#0@@126| T@U) (|needle#0@@55| T@U) ) (!  (=> (and (and (= (type $ly@@455) LayerTypeType) (= (type |run#0@@126|) (SeqType BoxType))) (= (type |needle#0@@55|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@455) |run#0@@126| |needle#0@@55|) (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@455 |run#0@@126| |needle#0@@55|))) :qid |totalord.449:12| :skolemid |12202| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@455) |run#0@@126| |needle#0@@55|)) )))
(assert (forall (($ly@@456 T@U) (|run#0@@127| T@U) (|needle#0@@56| T@U) ) (!  (=> (and (and (= (type $ly@@456) LayerTypeType) (= (type |run#0@@127|) (SeqType BoxType))) (= (type |needle#0@@56|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@456 |run#0@@127| |needle#0@@56|) (Lexicographic__Byte__Order.__default.IndexOfFirstGt $LZ |run#0@@127| |needle#0@@56|))) :qid |totalord.449:12| :skolemid |12203| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGt (AsFuelBottom $ly@@456) |run#0@@127| |needle#0@@56|)) )))
(assert  (=> true (forall (($ly@@457 T@U) (|run#0@@128| T@U) (|needle#0@@57| T@U) ) (!  (=> (and (and (and (= (type $ly@@457) LayerTypeType) (= (type |run#0@@128|) (SeqType BoxType))) (= (type |needle#0@@57|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| |run#0@@128| |needle#0@@57|) (and (and ($Is |run#0@@128| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@57| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@128|)))) (and (and (and (<= (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@457 |run#0@@128| |needle#0@@57|) (|Seq#Length| |run#0@@128|)) (forall ((|i#2@@24| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@24|) (< |i#2@@24| (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@457 |run#0@@128| |needle#0@@57|))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@128| |i#2@@24|)) |needle#0@@57|)) :qid |totalord.452:20| :skolemid |12204| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@128| |i#2@@24|))) ))) (forall ((|i#3@@26| Int) ) (!  (=> (and (<= (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@457 |run#0@@128| |needle#0@@57|) |i#3@@26|) (< |i#3@@26| (|Seq#Length| |run#0@@128|))) (Lexicographic__Byte__Order.__default.lt |needle#0@@57| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@128| |i#3@@26|)))) :qid |totalord.453:20| :skolemid |12205| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@128| |i#3@@26|))) ))) (<= (LitInt 0) (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@457 |run#0@@128| |needle#0@@57|)))) :qid |totalord.449:12| :skolemid |12206| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@457 |run#0@@128| |needle#0@@57|)) ))))
(assert (forall (($ly@@458 T@U) (|run#0@@129| T@U) (|needle#0@@58| T@U) ) (!  (=> (and (and (and (= (type $ly@@458) LayerTypeType) (= (type |run#0@@129|) (SeqType BoxType))) (= (type |needle#0@@58|) (SeqType BoxType))) (and ($Is |run#0@@129| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@58| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#requires| $ly@@458 |run#0@@129| |needle#0@@58|) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@129|)) (=> (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@129|) (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#requires| $ly@@458 |run#0@@129| |needle#0@@58|)))) :qid |totalord.449:12| :skolemid |12207| :pattern ( (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#requires| $ly@@458 |run#0@@129| |needle#0@@58|)) )))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted14) LayerTypeType))
(assert  (=> true (forall (($ly@@459 T@U) (|run#0@@130| T@U) (|needle#0@@59| T@U) ) (!  (=> (and (and (and (= (type $ly@@459) LayerTypeType) (= (type |run#0@@130|) (SeqType BoxType))) (= (type |needle#0@@59|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| |run#0@@130| |needle#0@@59|) (and (and ($Is |run#0@@130| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@59| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@130|)))) (and (=> (not (= (|Seq#Length| |run#0@@130|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) |run#0@@130|) (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@130|)) |needle#0@@59|)) (=> (not (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@130|)) |needle#0@@59|)) (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) |run#0@@130|) (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |run#0@@130|) |needle#0@@59|))))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted14)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted14)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted14) MoreFuel_Lexicographic_Byte_Order._default.IsSorted14)) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@459) |run#0@@130| |needle#0@@59|) (ite (= (|Seq#Length| |run#0@@130|) (LitInt 0)) 0 (ite (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@130|)) |needle#0@@59|) (|Seq#Length| |run#0@@130|) (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@459 (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |run#0@@130|) |needle#0@@59|))))))) :qid |totalord.449:12| :skolemid |12208| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@459) |run#0@@130| |needle#0@@59|)) ))))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted15) LayerTypeType))
(assert  (=> true (forall (($ly@@460 T@U) (|run#0@@131| T@U) (|needle#0@@60| T@U) ) (!  (=> (and (and (and (= (type $ly@@460) LayerTypeType) (= (type |run#0@@131|) (SeqType BoxType))) (= (type |needle#0@@60|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| (Lit |run#0@@131|) (Lit |needle#0@@60|)) (and (and ($Is |run#0@@131| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@60| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted (Lit |run#0@@131|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@131|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@131|)) (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@131|)))) (Lit |needle#0@@60|))) (=> (not (U_2_bool (Lit (bool_2_U (Lexicographic__Byte__Order.__default.lte (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@131|)))) (Lit |needle#0@@60|)))))) (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@131|)) (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@131|))) (Lit |needle#0@@60|)))))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted15)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted15)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted15) MoreFuel_Lexicographic_Byte_Order._default.IsSorted15)) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@460) (Lit |run#0@@131|) (Lit |needle#0@@60|)) (ite (= (|Seq#Length| (Lit |run#0@@131|)) (LitInt 0)) 0 (ite (Lexicographic__Byte__Order.__default.lte (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@131|)))) (Lit |needle#0@@60|)) (|Seq#Length| (Lit |run#0@@131|)) (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@460) (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@131|))) (Lit |needle#0@@60|)))))))) :qid |totalord.449:12| :weight 3 :skolemid |12209| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@460) (Lit |run#0@@131|) (Lit |needle#0@@60|))) ))))
(assert (forall (($ly@@461 T@U) (|s#0@@107| T@U) (|key#0@@59| T@U) (|lo#0@@20| Int) (|hi#0@@20| Int) ) (!  (=> (and (and (= (type $ly@@461) LayerTypeType) (= (type |s#0@@107|) (SeqType BoxType))) (= (type |key#0@@59|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@461) |s#0@@107| |key#0@@59| |lo#0@@20| |hi#0@@20|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@461 |s#0@@107| |key#0@@59| |lo#0@@20| |hi#0@@20|))) :qid |totalord.482:12| :skolemid |12210| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@461) |s#0@@107| |key#0@@59| |lo#0@@20| |hi#0@@20|)) )))
(assert (forall (($ly@@462 T@U) (|s#0@@108| T@U) (|key#0@@60| T@U) (|lo#0@@21| Int) (|hi#0@@21| Int) ) (!  (=> (and (and (= (type $ly@@462) LayerTypeType) (= (type |s#0@@108|) (SeqType BoxType))) (= (type |key#0@@60|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@462 |s#0@@108| |key#0@@60| |lo#0@@21| |hi#0@@21|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $LZ |s#0@@108| |key#0@@60| |lo#0@@21| |hi#0@@21|))) :qid |totalord.482:12| :skolemid |12211| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter (AsFuelBottom $ly@@462) |s#0@@108| |key#0@@60| |lo#0@@21| |hi#0@@21|)) )))
(assert  (=> true (forall (($ly@@463 T@U) (|s#0@@109| T@U) (|key#0@@61| T@U) (|lo#0@@22| Int) (|hi#0@@22| Int) ) (!  (=> (and (and (and (= (type $ly@@463) LayerTypeType) (= (type |s#0@@109|) (SeqType BoxType))) (= (type |key#0@@61|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@109| |key#0@@61| |lo#0@@22| |hi#0@@22|) (and (and ($Is |s#0@@109| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@61| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) |lo#0@@22|) (< |lo#0@@22| |hi#0@@22|)) (<= |hi#0@@22| (+ (|Seq#Length| |s#0@@109|) 1))) (=> (> |lo#0@@22| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@109| (- |lo#0@@22| 1))) |key#0@@61|))) (=> (<= |hi#0@@22| (|Seq#Length| |s#0@@109|)) (Lexicographic__Byte__Order.__default.lt |key#0@@61| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@109| (- |hi#0@@22| 1))))))))) (and (and (and (<= (LitInt 0) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@463 |s#0@@109| |key#0@@61| |lo#0@@22| |hi#0@@22|)) (<= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@463 |s#0@@109| |key#0@@61| |lo#0@@22| |hi#0@@22|) (|Seq#Length| |s#0@@109|))) (=> (> (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@463 |s#0@@109| |key#0@@61| |lo#0@@22| |hi#0@@22|) 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@109| (- (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@463 |s#0@@109| |key#0@@61| |lo#0@@22| |hi#0@@22|) 1))) |key#0@@61|))) (=> (< (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@463 |s#0@@109| |key#0@@61| |lo#0@@22| |hi#0@@22|) (|Seq#Length| |s#0@@109|)) (Lexicographic__Byte__Order.__default.lt |key#0@@61| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@109| (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@463 |s#0@@109| |key#0@@61| |lo#0@@22| |hi#0@@22|))))))) :qid |totalord.482:12| :skolemid |12212| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@463 |s#0@@109| |key#0@@61| |lo#0@@22| |hi#0@@22|)) ))))
(assert (forall (($ly@@464 T@U) (|s#0@@110| T@U) (|key#0@@62| T@U) (|lo#0@@23| Int) (|hi#0@@23| Int) ) (!  (=> (and (and (and (= (type $ly@@464) LayerTypeType) (= (type |s#0@@110|) (SeqType BoxType))) (= (type |key#0@@62|) (SeqType BoxType))) (and ($Is |s#0@@110| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@62| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@464 |s#0@@110| |key#0@@62| |lo#0@@23| |hi#0@@23|) (and (and (and (and (<= (LitInt 0) |lo#0@@23|) (< |lo#0@@23| |hi#0@@23|)) (<= |hi#0@@23| (+ (|Seq#Length| |s#0@@110|) 1))) (=> (> |lo#0@@23| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@110| (- |lo#0@@23| 1))) |key#0@@62|))) (=> (<= |hi#0@@23| (|Seq#Length| |s#0@@110|)) (Lexicographic__Byte__Order.__default.lt |key#0@@62| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@110| (- |hi#0@@23| 1))))))) (=> (and (and (and (and (<= (LitInt 0) |lo#0@@23|) (< |lo#0@@23| |hi#0@@23|)) (<= |hi#0@@23| (+ (|Seq#Length| |s#0@@110|) 1))) (=> (> |lo#0@@23| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@110| (- |lo#0@@23| 1))) |key#0@@62|))) (=> (<= |hi#0@@23| (|Seq#Length| |s#0@@110|)) (Lexicographic__Byte__Order.__default.lt |key#0@@62| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@110| (- |hi#0@@23| 1)))))) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@464 |s#0@@110| |key#0@@62| |lo#0@@23| |hi#0@@23|)))) :qid |totalord.482:12| :skolemid |12213| :pattern ( (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@464 |s#0@@110| |key#0@@62| |lo#0@@23| |hi#0@@23|)) )))
(assert  (=> true (forall (($ly@@465 T@U) (|s#0@@111| T@U) (|key#0@@63| T@U) (|lo#0@@24| Int) (|hi#0@@24| Int) ) (!  (=> (and (and (and (= (type $ly@@465) LayerTypeType) (= (type |s#0@@111|) (SeqType BoxType))) (= (type |key#0@@63|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@111| |key#0@@63| |lo#0@@24| |hi#0@@24|) (and (and ($Is |s#0@@111| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@63| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) |lo#0@@24|) (< |lo#0@@24| |hi#0@@24|)) (<= |hi#0@@24| (+ (|Seq#Length| |s#0@@111|) 1))) (=> (> |lo#0@@24| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@111| (- |lo#0@@24| 1))) |key#0@@63|))) (=> (<= |hi#0@@24| (|Seq#Length| |s#0@@111|)) (Lexicographic__Byte__Order.__default.lt |key#0@@63| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@111| (- |hi#0@@24| 1))))))))) (and (=> (< (+ |lo#0@@24| 1) |hi#0@@24|) (let ((|mid#3@@5| (Div (+ |lo#0@@24| |hi#0@@24|) (LitInt 2)))) (and (and (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@111| (- |mid#3@@5| 1))) |key#0@@63|) (=> (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@111| (- |mid#3@@5| 1))) |key#0@@63|) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@111| |key#0@@63| |mid#3@@5| |hi#0@@24|))) (=> (not (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@111| (- |mid#3@@5| 1))) |key#0@@63|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@111| |key#0@@63| |lo#0@@24| |mid#3@@5|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@465) |s#0@@111| |key#0@@63| |lo#0@@24| |hi#0@@24|) (ite (< (+ |lo#0@@24| 1) |hi#0@@24|) (let ((|mid#3@@6| (Div (+ |lo#0@@24| |hi#0@@24|) (LitInt 2)))) (ite (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@111| (- |mid#3@@6| 1))) |key#0@@63|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@465 |s#0@@111| |key#0@@63| |mid#3@@6| |hi#0@@24|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@465 |s#0@@111| |key#0@@63| |lo#0@@24| |mid#3@@6|))) |lo#0@@24|)))) :qid |totalord.482:12| :skolemid |12214| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@465) |s#0@@111| |key#0@@63| |lo#0@@24| |hi#0@@24|)) ))))
(assert  (=> true (forall (($ly@@466 T@U) (|s#0@@112| T@U) (|key#0@@64| T@U) (|lo#0@@25| Int) (|hi#0@@25| Int) ) (!  (=> (and (and (and (= (type $ly@@466) LayerTypeType) (= (type |s#0@@112|) (SeqType BoxType))) (= (type |key#0@@64|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@112| |key#0@@64| (LitInt |lo#0@@25|) (LitInt |hi#0@@25|)) (and (and ($Is |s#0@@112| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@64| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@25|)) (< |lo#0@@25| |hi#0@@25|)) (<= (LitInt |hi#0@@25|) (+ (|Seq#Length| |s#0@@112|) 1))) (=> (> |lo#0@@25| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@112| (LitInt (- |lo#0@@25| 1)))) |key#0@@64|))) (=> (<= (LitInt |hi#0@@25|) (|Seq#Length| |s#0@@112|)) (Lexicographic__Byte__Order.__default.lt |key#0@@64| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@112| (LitInt (- |hi#0@@25| 1)))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@25| 1) |hi#0@@25|)))) (let ((|mid#4@@5| (LitInt (Div (+ |lo#0@@25| |hi#0@@25|) (LitInt 2))))) (and (and (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@112| (- |mid#4@@5| 1))) |key#0@@64|) (=> (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@112| (- |mid#4@@5| 1))) |key#0@@64|) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@112| |key#0@@64| |mid#4@@5| (LitInt |hi#0@@25|)))) (=> (not (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@112| (- |mid#4@@5| 1))) |key#0@@64|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@112| |key#0@@64| (LitInt |lo#0@@25|) |mid#4@@5|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@466) |s#0@@112| |key#0@@64| (LitInt |lo#0@@25|) (LitInt |hi#0@@25|)) (ite (< (+ |lo#0@@25| 1) |hi#0@@25|) (let ((|mid#4@@6| (LitInt (Div (+ |lo#0@@25| |hi#0@@25|) (LitInt 2))))) (ite (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@112| (LitInt (- |mid#4@@6| 1)))) |key#0@@64|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@466) |s#0@@112| |key#0@@64| |mid#4@@6| (LitInt |hi#0@@25|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@466) |s#0@@112| |key#0@@64| (LitInt |lo#0@@25|) |mid#4@@6|))) |lo#0@@25|)))) :qid |totalord.482:12| :weight 3 :skolemid |12215| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@466) |s#0@@112| |key#0@@64| (LitInt |lo#0@@25|) (LitInt |hi#0@@25|))) ))))
(assert  (=> true (forall (($ly@@467 T@U) (|s#0@@113| T@U) (|key#0@@65| T@U) (|lo#0@@26| Int) (|hi#0@@26| Int) ) (!  (=> (and (and (and (= (type $ly@@467) LayerTypeType) (= (type |s#0@@113|) (SeqType BoxType))) (= (type |key#0@@65|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@113|) (Lit |key#0@@65|) (LitInt |lo#0@@26|) (LitInt |hi#0@@26|)) (and (and ($Is |s#0@@113| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@65| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@26|)) (< |lo#0@@26| |hi#0@@26|)) (<= (LitInt |hi#0@@26|) (+ (|Seq#Length| (Lit |s#0@@113|)) 1))) (=> (> |lo#0@@26| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@113|) (LitInt (- |lo#0@@26| 1)))) (Lit |key#0@@65|)))) (=> (<= (LitInt |hi#0@@26|) (|Seq#Length| (Lit |s#0@@113|))) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@65|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@113|) (LitInt (- |hi#0@@26| 1)))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@26| 1) |hi#0@@26|)))) (let ((|mid#5@@5| (LitInt (Div (+ |lo#0@@26| |hi#0@@26|) (LitInt 2))))) (and (and (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@113|) (- |mid#5@@5| 1))) (Lit |key#0@@65|)) (=> (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@113|) (- |mid#5@@5| 1))) (Lit |key#0@@65|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@113|) (Lit |key#0@@65|) |mid#5@@5| (LitInt |hi#0@@26|)))) (=> (not (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@113|) (- |mid#5@@5| 1))) (Lit |key#0@@65|))) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@113|) (Lit |key#0@@65|) (LitInt |lo#0@@26|) |mid#5@@5|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@467) (Lit |s#0@@113|) (Lit |key#0@@65|) (LitInt |lo#0@@26|) (LitInt |hi#0@@26|)) (ite (< (+ |lo#0@@26| 1) |hi#0@@26|) (let ((|mid#5@@6| (LitInt (Div (+ |lo#0@@26| |hi#0@@26|) (LitInt 2))))) (ite (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@113|) (LitInt (- |mid#5@@6| 1)))) (Lit |key#0@@65|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@467) (Lit |s#0@@113|) (Lit |key#0@@65|) |mid#5@@6| (LitInt |hi#0@@26|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@467) (Lit |s#0@@113|) (Lit |key#0@@65|) (LitInt |lo#0@@26|) |mid#5@@6|))) |lo#0@@26|)))) :qid |totalord.482:12| :weight 3 :skolemid |12216| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@467) (Lit |s#0@@113|) (Lit |key#0@@65|) (LitInt |lo#0@@26|) (LitInt |hi#0@@26|))) ))))
(assert (forall (($ly@@468 T@U) (|s#0@@114| T@U) (|key#0@@66| T@U) ) (!  (=> (and (and (= (type $ly@@468) LayerTypeType) (= (type |s#0@@114|) (SeqType BoxType))) (= (type |key#0@@66|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@468) |s#0@@114| |key#0@@66|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@468 |s#0@@114| |key#0@@66|))) :qid |totalord.502:22| :skolemid |12217| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@468) |s#0@@114| |key#0@@66|)) )))
(assert (forall (($ly@@469 T@U) (|s#0@@115| T@U) (|key#0@@67| T@U) ) (!  (=> (and (and (= (type $ly@@469) LayerTypeType) (= (type |s#0@@115|) (SeqType BoxType))) (= (type |key#0@@67|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@469 |s#0@@115| |key#0@@67|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $LZ |s#0@@115| |key#0@@67|))) :qid |totalord.502:22| :skolemid |12218| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt (AsFuelBottom $ly@@469) |s#0@@115| |key#0@@67|)) )))
(assert  (=> true (forall (($ly@@470 T@U) (|s#0@@116| T@U) (|key#0@@68| T@U) ) (!  (=> (and (and (and (= (type $ly@@470) LayerTypeType) (= (type |s#0@@116|) (SeqType BoxType))) (= (type |key#0@@68|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@116| |key#0@@68|) (and ($Is |s#0@@116| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@68| (TSeq Tclass.NativeTypes.byte))))) (and (and (and (<= (LitInt 0) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@470 |s#0@@116| |key#0@@68|)) (<= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@470 |s#0@@116| |key#0@@68|) (|Seq#Length| |s#0@@116|))) (=> (> (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@470 |s#0@@116| |key#0@@68|) 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@116| (- (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@470 |s#0@@116| |key#0@@68|) 1))) |key#0@@68|))) (=> (< (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@470 |s#0@@116| |key#0@@68|) (|Seq#Length| |s#0@@116|)) (Lexicographic__Byte__Order.__default.lt |key#0@@68| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@116| (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@470 |s#0@@116| |key#0@@68|))))))) :qid |totalord.502:22| :skolemid |12219| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@470 |s#0@@116| |key#0@@68|)) ))))
(assert (forall (($ly@@471 T@U) (|s#0@@117| T@U) (|key#0@@69| T@U) ) (!  (=> (and (and (and (= (type $ly@@471) LayerTypeType) (= (type |s#0@@117|) (SeqType BoxType))) (= (type |key#0@@69|) (SeqType BoxType))) (and ($Is |s#0@@117| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@69| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@471 |s#0@@117| |key#0@@69|) true) (=> true (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@471 |s#0@@117| |key#0@@69|)))) :qid |totalord.502:22| :skolemid |12220| :pattern ( (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@471 |s#0@@117| |key#0@@69|)) )))
(assert  (=> true (forall (($ly@@472 T@U) (|s#0@@118| T@U) (|key#0@@70| T@U) ) (!  (=> (and (and (and (= (type $ly@@472) LayerTypeType) (= (type |s#0@@118|) (SeqType BoxType))) (= (type |key#0@@70|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@118| |key#0@@70|) (and ($Is |s#0@@118| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@70| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@118| |key#0@@70| (LitInt 0) (+ (|Seq#Length| |s#0@@118|) 1)) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@472) |s#0@@118| |key#0@@70|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) |s#0@@118| |key#0@@70| (LitInt 0) (+ (|Seq#Length| |s#0@@118|) 1))))) :qid |totalord.502:22| :skolemid |12221| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@472) |s#0@@118| |key#0@@70|)) ))))
(assert  (=> true (forall (($ly@@473 T@U) (|s#0@@119| T@U) (|key#0@@71| T@U) ) (!  (=> (and (and (and (= (type $ly@@473) LayerTypeType) (= (type |s#0@@119|) (SeqType BoxType))) (= (type |key#0@@71|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (Lit |s#0@@119|) (Lit |key#0@@71|)) (and ($Is |s#0@@119| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@71| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@119|) (Lit |key#0@@71|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@119|)) 1)) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@473) (Lit |s#0@@119|) (Lit |key#0@@71|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) (Lit |s#0@@119|) (Lit |key#0@@71|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@119|)) 1))))) :qid |totalord.502:22| :weight 3 :skolemid |12222| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@473) (Lit |s#0@@119|) (Lit |key#0@@71|))) ))))
(assert  (=> true (forall ((|a#0@@122| T@U) (|b#0@@90| T@U) ) (!  (=> (and (and (= (type |a#0@@122|) (MapType0Type BoxType boolType)) (= (type |b#0@@90|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLte#canCall| |a#0@@122| |b#0@@90|) (and ($Is |a#0@@122| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@90| (TSet (TSeq Tclass.NativeTypes.byte)))))) true) :qid |totalord.675:23| :skolemid |12223| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLte |a#0@@122| |b#0@@90|)) ))))
(assert (forall ((|a#0@@123| T@U) (|b#0@@91| T@U) ) (!  (=> (and (and (= (type |a#0@@123|) (MapType0Type BoxType boolType)) (= (type |b#0@@91|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@123| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@91| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (|Lexicographic__Byte__Order.__default.SetAllLte#requires| |a#0@@123| |b#0@@91|) true) (=> true (|Lexicographic__Byte__Order.__default.SetAllLte#requires| |a#0@@123| |b#0@@91|)))) :qid |totalord.675:23| :skolemid |12224| :pattern ( (|Lexicographic__Byte__Order.__default.SetAllLte#requires| |a#0@@123| |b#0@@91|)) )))
(assert  (=> true (forall ((|a#0@@124| T@U) (|b#0@@92| T@U) ) (!  (=> (and (and (= (type |a#0@@124|) (MapType0Type BoxType boolType)) (= (type |b#0@@92|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLte#canCall| |a#0@@124| |b#0@@92|) (and ($Is |a#0@@124| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@92| (TSet (TSeq Tclass.NativeTypes.byte)))))) (and (forall ((|x#2@@5| T@U) (|y#2@@5| T@U) ) (!  (=> (and (and (and (= (type |x#2@@5|) (SeqType BoxType)) (= (type |y#2@@5|) (SeqType BoxType))) (and ($Is |x#2@@5| (TSeq Tclass.NativeTypes.byte)) ($Is |y#2@@5| (TSeq Tclass.NativeTypes.byte)))) (U_2_bool (MapType0Select |b#0@@92| ($Box |y#2@@5|)))) (|Lexicographic__Byte__Order.__default.lte#canCall| |x#2@@5| |y#2@@5|)) :qid |totalord.676:12| :skolemid |12225| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#2@@5| |y#2@@5|)) :pattern ( (MapType0Select |b#0@@92| ($Box |y#2@@5|)) (MapType0Select |a#0@@124| ($Box |x#2@@5|))) )) (and (=> (Lexicographic__Byte__Order.__default.SetAllLte |a#0@@124| |b#0@@92|) (forall ((|x#2@@6| T@U) (|y#2@@6| T@U) ) (!  (=> (and (and (and (= (type |x#2@@6|) (SeqType BoxType)) (= (type |y#2@@6|) (SeqType BoxType))) (and ($Is |x#2@@6| (TSeq Tclass.NativeTypes.byte)) ($Is |y#2@@6| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select |a#0@@124| ($Box |x#2@@6|))) (U_2_bool (MapType0Select |b#0@@92| ($Box |y#2@@6|))))) (Lexicographic__Byte__Order.__default.lte |x#2@@6| |y#2@@6|)) :qid |totalord.676:12| :skolemid |12226| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#2@@6| |y#2@@6|)) :pattern ( (MapType0Select |b#0@@92| ($Box |y#2@@6|)) (MapType0Select |a#0@@124| ($Box |x#2@@6|))) ))) (=> (forall ((|x#2@@7| T@U) (|y#2@@7| T@U) ) (!  (=> (and (and (and (= (type |x#2@@7|) (SeqType BoxType)) (= (type |y#2@@7|) (SeqType BoxType))) (and ($Is |x#2@@7| (TSeq Tclass.NativeTypes.byte)) ($Is |y#2@@7| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select |a#0@@124| ($Box |x#2@@7|))) (U_2_bool (MapType0Select |b#0@@92| ($Box |y#2@@7|))))) (Lexicographic__Byte__Order.__default.lte |x#2@@7| |y#2@@7|)) :qid |totalord.676:12| :skolemid |12226| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#2@@7| |y#2@@7|)) :pattern ( (MapType0Select |b#0@@92| ($Box |y#2@@7|)) (MapType0Select |a#0@@124| ($Box |x#2@@7|))) )) (Lexicographic__Byte__Order.__default.SetAllLte |a#0@@124| |b#0@@92|))))) :qid |totalord.675:23| :skolemid |12227| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLte |a#0@@124| |b#0@@92|)) ))))
(assert  (=> true (forall ((|a#0@@125| T@U) (|b#0@@93| T@U) ) (!  (=> (and (and (= (type |a#0@@125|) (MapType0Type BoxType boolType)) (= (type |b#0@@93|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLte#canCall| (Lit |a#0@@125|) (Lit |b#0@@93|)) (and ($Is |a#0@@125| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@93| (TSet (TSeq Tclass.NativeTypes.byte)))))) (and (forall ((|x#3@@5| T@U) (|y#3@@5| T@U) ) (!  (=> (and (and (and (= (type |x#3@@5|) (SeqType BoxType)) (= (type |y#3@@5|) (SeqType BoxType))) (and ($Is |x#3@@5| (TSeq Tclass.NativeTypes.byte)) ($Is |y#3@@5| (TSeq Tclass.NativeTypes.byte)))) (U_2_bool (MapType0Select (Lit |b#0@@93|) ($Box |y#3@@5|)))) (|Lexicographic__Byte__Order.__default.lte#canCall| |x#3@@5| |y#3@@5|)) :qid |totalord.676:12| :skolemid |12228| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#3@@5| |y#3@@5|)) :pattern ( (MapType0Select |b#0@@93| ($Box |y#3@@5|)) (MapType0Select |a#0@@125| ($Box |x#3@@5|))) )) (and (=> (Lexicographic__Byte__Order.__default.SetAllLte (Lit |a#0@@125|) (Lit |b#0@@93|)) (forall ((|x#3@@6| T@U) (|y#3@@6| T@U) ) (!  (=> (and (and (and (= (type |x#3@@6|) (SeqType BoxType)) (= (type |y#3@@6|) (SeqType BoxType))) (and ($Is |x#3@@6| (TSeq Tclass.NativeTypes.byte)) ($Is |y#3@@6| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select (Lit |a#0@@125|) ($Box |x#3@@6|))) (U_2_bool (MapType0Select (Lit |b#0@@93|) ($Box |y#3@@6|))))) (Lexicographic__Byte__Order.__default.lte |x#3@@6| |y#3@@6|)) :qid |totalord.676:12| :skolemid |12229| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#3@@6| |y#3@@6|)) :pattern ( (MapType0Select |b#0@@93| ($Box |y#3@@6|)) (MapType0Select |a#0@@125| ($Box |x#3@@6|))) ))) (=> (forall ((|x#3@@7| T@U) (|y#3@@7| T@U) ) (!  (=> (and (and (and (= (type |x#3@@7|) (SeqType BoxType)) (= (type |y#3@@7|) (SeqType BoxType))) (and ($Is |x#3@@7| (TSeq Tclass.NativeTypes.byte)) ($Is |y#3@@7| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select (Lit |a#0@@125|) ($Box |x#3@@7|))) (U_2_bool (MapType0Select (Lit |b#0@@93|) ($Box |y#3@@7|))))) (Lexicographic__Byte__Order.__default.lte |x#3@@7| |y#3@@7|)) :qid |totalord.676:12| :skolemid |12229| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#3@@7| |y#3@@7|)) :pattern ( (MapType0Select |b#0@@93| ($Box |y#3@@7|)) (MapType0Select |a#0@@125| ($Box |x#3@@7|))) )) (Lexicographic__Byte__Order.__default.SetAllLte (Lit |a#0@@125|) (Lit |b#0@@93|)))))) :qid |totalord.675:23| :weight 3 :skolemid |12230| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLte (Lit |a#0@@125|) (Lit |b#0@@93|))) ))))
(assert  (=> true (forall ((|a#0@@126| T@U) (|b#0@@94| T@U) ) (!  (=> (and (and (= (type |a#0@@126|) (MapType0Type BoxType boolType)) (= (type |b#0@@94|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLt#canCall| |a#0@@126| |b#0@@94|) (and ($Is |a#0@@126| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@94| (TSet (TSeq Tclass.NativeTypes.byte)))))) true) :qid |totalord.679:22| :skolemid |12231| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLt |a#0@@126| |b#0@@94|)) ))))
(assert (forall ((|a#0@@127| T@U) (|b#0@@95| T@U) ) (!  (=> (and (and (= (type |a#0@@127|) (MapType0Type BoxType boolType)) (= (type |b#0@@95|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@127| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@95| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (|Lexicographic__Byte__Order.__default.SetAllLt#requires| |a#0@@127| |b#0@@95|) true) (=> true (|Lexicographic__Byte__Order.__default.SetAllLt#requires| |a#0@@127| |b#0@@95|)))) :qid |totalord.679:22| :skolemid |12232| :pattern ( (|Lexicographic__Byte__Order.__default.SetAllLt#requires| |a#0@@127| |b#0@@95|)) )))
(assert  (=> true (forall ((|a#0@@128| T@U) (|b#0@@96| T@U) ) (!  (=> (and (and (= (type |a#0@@128|) (MapType0Type BoxType boolType)) (= (type |b#0@@96|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLt#canCall| |a#0@@128| |b#0@@96|) (and ($Is |a#0@@128| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@96| (TSet (TSeq Tclass.NativeTypes.byte)))))) (and (forall ((|x#2@@8| T@U) (|y#2@@8| T@U) ) (!  (=> (and (and (and (= (type |x#2@@8|) (SeqType BoxType)) (= (type |y#2@@8|) (SeqType BoxType))) (and ($Is |x#2@@8| (TSeq Tclass.NativeTypes.byte)) ($Is |y#2@@8| (TSeq Tclass.NativeTypes.byte)))) (U_2_bool (MapType0Select |b#0@@96| ($Box |y#2@@8|)))) (|Lexicographic__Byte__Order.__default.lt#canCall| |x#2@@8| |y#2@@8|)) :qid |totalord.680:12| :skolemid |12233| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#2@@8| |y#2@@8|)) :pattern ( (MapType0Select |b#0@@96| ($Box |y#2@@8|)) (MapType0Select |a#0@@128| ($Box |x#2@@8|))) )) (and (=> (Lexicographic__Byte__Order.__default.SetAllLt |a#0@@128| |b#0@@96|) (forall ((|x#2@@9| T@U) (|y#2@@9| T@U) ) (!  (=> (and (and (and (= (type |x#2@@9|) (SeqType BoxType)) (= (type |y#2@@9|) (SeqType BoxType))) (and ($Is |x#2@@9| (TSeq Tclass.NativeTypes.byte)) ($Is |y#2@@9| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select |a#0@@128| ($Box |x#2@@9|))) (U_2_bool (MapType0Select |b#0@@96| ($Box |y#2@@9|))))) (Lexicographic__Byte__Order.__default.lt |x#2@@9| |y#2@@9|)) :qid |totalord.680:12| :skolemid |12234| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#2@@9| |y#2@@9|)) :pattern ( (MapType0Select |b#0@@96| ($Box |y#2@@9|)) (MapType0Select |a#0@@128| ($Box |x#2@@9|))) ))) (=> (forall ((|x#2@@10| T@U) (|y#2@@10| T@U) ) (!  (=> (and (and (and (= (type |x#2@@10|) (SeqType BoxType)) (= (type |y#2@@10|) (SeqType BoxType))) (and ($Is |x#2@@10| (TSeq Tclass.NativeTypes.byte)) ($Is |y#2@@10| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select |a#0@@128| ($Box |x#2@@10|))) (U_2_bool (MapType0Select |b#0@@96| ($Box |y#2@@10|))))) (Lexicographic__Byte__Order.__default.lt |x#2@@10| |y#2@@10|)) :qid |totalord.680:12| :skolemid |12234| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#2@@10| |y#2@@10|)) :pattern ( (MapType0Select |b#0@@96| ($Box |y#2@@10|)) (MapType0Select |a#0@@128| ($Box |x#2@@10|))) )) (Lexicographic__Byte__Order.__default.SetAllLt |a#0@@128| |b#0@@96|))))) :qid |totalord.679:22| :skolemid |12235| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLt |a#0@@128| |b#0@@96|)) ))))
(assert  (=> true (forall ((|a#0@@129| T@U) (|b#0@@97| T@U) ) (!  (=> (and (and (= (type |a#0@@129|) (MapType0Type BoxType boolType)) (= (type |b#0@@97|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLt#canCall| (Lit |a#0@@129|) (Lit |b#0@@97|)) (and ($Is |a#0@@129| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@97| (TSet (TSeq Tclass.NativeTypes.byte)))))) (and (forall ((|x#3@@8| T@U) (|y#3@@8| T@U) ) (!  (=> (and (and (and (= (type |x#3@@8|) (SeqType BoxType)) (= (type |y#3@@8|) (SeqType BoxType))) (and ($Is |x#3@@8| (TSeq Tclass.NativeTypes.byte)) ($Is |y#3@@8| (TSeq Tclass.NativeTypes.byte)))) (U_2_bool (MapType0Select (Lit |b#0@@97|) ($Box |y#3@@8|)))) (|Lexicographic__Byte__Order.__default.lt#canCall| |x#3@@8| |y#3@@8|)) :qid |totalord.680:12| :skolemid |12236| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#3@@8| |y#3@@8|)) :pattern ( (MapType0Select |b#0@@97| ($Box |y#3@@8|)) (MapType0Select |a#0@@129| ($Box |x#3@@8|))) )) (and (=> (Lexicographic__Byte__Order.__default.SetAllLt (Lit |a#0@@129|) (Lit |b#0@@97|)) (forall ((|x#3@@9| T@U) (|y#3@@9| T@U) ) (!  (=> (and (and (and (= (type |x#3@@9|) (SeqType BoxType)) (= (type |y#3@@9|) (SeqType BoxType))) (and ($Is |x#3@@9| (TSeq Tclass.NativeTypes.byte)) ($Is |y#3@@9| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select (Lit |a#0@@129|) ($Box |x#3@@9|))) (U_2_bool (MapType0Select (Lit |b#0@@97|) ($Box |y#3@@9|))))) (Lexicographic__Byte__Order.__default.lt |x#3@@9| |y#3@@9|)) :qid |totalord.680:12| :skolemid |12237| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#3@@9| |y#3@@9|)) :pattern ( (MapType0Select |b#0@@97| ($Box |y#3@@9|)) (MapType0Select |a#0@@129| ($Box |x#3@@9|))) ))) (=> (forall ((|x#3@@10| T@U) (|y#3@@10| T@U) ) (!  (=> (and (and (and (= (type |x#3@@10|) (SeqType BoxType)) (= (type |y#3@@10|) (SeqType BoxType))) (and ($Is |x#3@@10| (TSeq Tclass.NativeTypes.byte)) ($Is |y#3@@10| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select (Lit |a#0@@129|) ($Box |x#3@@10|))) (U_2_bool (MapType0Select (Lit |b#0@@97|) ($Box |y#3@@10|))))) (Lexicographic__Byte__Order.__default.lt |x#3@@10| |y#3@@10|)) :qid |totalord.680:12| :skolemid |12237| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#3@@10| |y#3@@10|)) :pattern ( (MapType0Select |b#0@@97| ($Box |y#3@@10|)) (MapType0Select |a#0@@129| ($Box |x#3@@10|))) )) (Lexicographic__Byte__Order.__default.SetAllLt (Lit |a#0@@129|) (Lit |b#0@@97|)))))) :qid |totalord.679:22| :weight 3 :skolemid |12238| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLt (Lit |a#0@@129|) (Lit |b#0@@97|))) ))))
(assert (forall (($ly@@474 T@U) (|a#0@@130| T@U) ) (!  (=> (and (= (type $ly@@474) LayerTypeType) (= (type |a#0@@130|) (SeqType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@474) |a#0@@130|) (Lexicographic__Byte__Order.__default.NotMinimum $ly@@474 |a#0@@130|)) (=> (Lexicographic__Byte__Order.__default.NotMinimum $ly@@474 |a#0@@130|) (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@474) |a#0@@130|)))) :qid |totalord.696:23| :skolemid |12239| :pattern ( (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@474) |a#0@@130|)) )))
(assert (forall (($ly@@475 T@U) (|a#0@@131| T@U) ) (!  (=> (and (= (type $ly@@475) LayerTypeType) (= (type |a#0@@131|) (SeqType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.NotMinimum $ly@@475 |a#0@@131|) (Lexicographic__Byte__Order.__default.NotMinimum $LZ |a#0@@131|)) (=> (Lexicographic__Byte__Order.__default.NotMinimum $LZ |a#0@@131|) (Lexicographic__Byte__Order.__default.NotMinimum $ly@@475 |a#0@@131|)))) :qid |totalord.696:23| :skolemid |12240| :pattern ( (Lexicographic__Byte__Order.__default.NotMinimum (AsFuelBottom $ly@@475) |a#0@@131|)) )))
(assert  (=> true (forall (($ly@@476 T@U) (|a#0@@132| T@U) ) (!  (=> (and (and (= (type $ly@@476) LayerTypeType) (= (type |a#0@@132|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.NotMinimum#canCall| |a#0@@132|) ($Is |a#0@@132| (TSeq Tclass.NativeTypes.byte)))) true) :qid |totalord.696:23| :skolemid |12241| :pattern ( (Lexicographic__Byte__Order.__default.NotMinimum $ly@@476 |a#0@@132|)) ))))
(assert (forall (($ly@@477 T@U) (|a#0@@133| T@U) ) (!  (=> (and (and (= (type $ly@@477) LayerTypeType) (= (type |a#0@@133|) (SeqType BoxType))) ($Is |a#0@@133| (TSeq Tclass.NativeTypes.byte))) (and (=> (|Lexicographic__Byte__Order.__default.NotMinimum#requires| $ly@@477 |a#0@@133|) true) (=> true (|Lexicographic__Byte__Order.__default.NotMinimum#requires| $ly@@477 |a#0@@133|)))) :qid |totalord.696:23| :skolemid |12242| :pattern ( (|Lexicographic__Byte__Order.__default.NotMinimum#requires| $ly@@477 |a#0@@133|)) )))
(assert  (=> true (forall (($ly@@478 T@U) (|a#0@@134| T@U) ) (!  (=> (and (and (= (type $ly@@478) LayerTypeType) (= (type |a#0@@134|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.NotMinimum#canCall| |a#0@@134|) ($Is |a#0@@134| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|b#2@@5| T@U) ) (!  (=> (and (= (type |b#2@@5|) (SeqType BoxType)) ($Is |b#2@@5| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lt#canCall| |b#2@@5| |a#0@@134|)) :qid |totalord.697:12| :skolemid |12243| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#2@@5| |a#0@@134|)) )) (and (=> (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@478) |a#0@@134|) (exists ((|b#2@@6| T@U) ) (!  (and (= (type |b#2@@6|) (SeqType BoxType)) (and ($Is |b#2@@6| (TSeq Tclass.NativeTypes.byte)) (Lexicographic__Byte__Order.__default.lt |b#2@@6| |a#0@@134|))) :qid |totalord.697:12| :skolemid |12244| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#2@@6| |a#0@@134|)) ))) (=> (exists ((|b#2@@7| T@U) ) (!  (and (= (type |b#2@@7|) (SeqType BoxType)) (and ($Is |b#2@@7| (TSeq Tclass.NativeTypes.byte)) (Lexicographic__Byte__Order.__default.lt |b#2@@7| |a#0@@134|))) :qid |totalord.697:12| :skolemid |12244| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#2@@7| |a#0@@134|)) )) (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@478) |a#0@@134|))))) :qid |totalord.696:23| :skolemid |12245| :pattern ( (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@478) |a#0@@134|)) ))))
(assert  (=> true (forall (($ly@@479 T@U) (|a#0@@135| T@U) ) (!  (=> (and (and (= (type $ly@@479) LayerTypeType) (= (type |a#0@@135|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.NotMinimum#canCall| (Lit |a#0@@135|)) ($Is |a#0@@135| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|b#3@@7| T@U) ) (!  (=> (and (= (type |b#3@@7|) (SeqType BoxType)) ($Is |b#3@@7| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lt#canCall| |b#3@@7| (Lit |a#0@@135|))) :qid |totalord.697:12| :skolemid |12246| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#3@@7| |a#0@@135|)) )) (and (=> (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@479) (Lit |a#0@@135|)) (exists ((|b#3@@8| T@U) ) (!  (and (= (type |b#3@@8|) (SeqType BoxType)) (and ($Is |b#3@@8| (TSeq Tclass.NativeTypes.byte)) (Lexicographic__Byte__Order.__default.lt |b#3@@8| (Lit |a#0@@135|)))) :qid |totalord.697:12| :skolemid |12247| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#3@@8| |a#0@@135|)) ))) (=> (exists ((|b#3@@9| T@U) ) (!  (and (= (type |b#3@@9|) (SeqType BoxType)) (and ($Is |b#3@@9| (TSeq Tclass.NativeTypes.byte)) (Lexicographic__Byte__Order.__default.lt |b#3@@9| (Lit |a#0@@135|)))) :qid |totalord.697:12| :skolemid |12247| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#3@@9| |a#0@@135|)) )) (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@479) (Lit |a#0@@135|)))))) :qid |totalord.696:23| :weight 3 :skolemid |12248| :pattern ( (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@479) (Lit |a#0@@135|))) ))))
(assert (forall ((arg0@@323 T@U) (arg1@@189 T@U) (arg2@@126 T@U) (arg3@@87 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.MapPivotedUnion arg0@@323 arg1@@189 arg2@@126 arg3@@87)) (MapType BoxType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.MapPivotedUnion| :pattern ( (Lexicographic__Byte__Order.__default.MapPivotedUnion arg0@@323 arg1@@189 arg2@@126 arg3@@87)) )))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapPivotedUnion$Value T@U) (|left#0@@3| T@U) (|pivot#0@@3| T@U) (|right#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.MapPivotedUnion$Value) TyType) (= (type |left#0@@3|) (MapType BoxType BoxType))) (= (type |pivot#0@@3|) (SeqType BoxType))) (= (type |right#0@@3|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapPivotedUnion#canCall| Lexicographic_Byte_Order._default.MapPivotedUnion$Value |left#0@@3| |pivot#0@@3| |right#0@@3|) (and (and ($Is |left#0@@3| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value)) ($Is |pivot#0@@3| (TSeq Tclass.NativeTypes.byte))) ($Is |right#0@@3| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value))))) ($Is (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value |left#0@@3| |pivot#0@@3| |right#0@@3|) (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value))) :qid |unknown.0:0| :skolemid |12249| :pattern ( (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value |left#0@@3| |pivot#0@@3| |right#0@@3|)) ))))
(assert (forall ((Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0 T@U) (|left#0@@4| T@U) (|pivot#0@@4| T@U) (|right#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0) TyType) (= (type |left#0@@4|) (MapType BoxType BoxType))) (= (type |pivot#0@@4|) (SeqType BoxType))) (= (type |right#0@@4|) (MapType BoxType BoxType))) (and (and ($Is |left#0@@4| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0)) ($Is |pivot#0@@4| (TSeq Tclass.NativeTypes.byte))) ($Is |right#0@@4| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0)))) (and (=> (|Lexicographic__Byte__Order.__default.MapPivotedUnion#requires| Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@4| |pivot#0@@4| |right#0@@4|) true) (=> true (|Lexicographic__Byte__Order.__default.MapPivotedUnion#requires| Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@4| |pivot#0@@4| |right#0@@4|)))) :qid |unknown.0:0| :skolemid |12250| :pattern ( (|Lexicographic__Byte__Order.__default.MapPivotedUnion#requires| Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@4| |pivot#0@@4| |right#0@@4|)) )))
(assert  (and (forall ((arg0@@324 T@U) (arg1@@190 T@U) ) (! (= (type (|lambda#144| arg0@@324 arg1@@190)) (MapType0Type BoxType boolType)) :qid |funType:lambda#144| :pattern ( (|lambda#144| arg0@@324 arg1@@190)) )) (forall ((arg0@@325 T@U) (arg1@@191 T@U) ) (! (= (type (|lambda#145| arg0@@325 arg1@@191)) (MapType0Type BoxType boolType)) :qid |funType:lambda#145| :pattern ( (|lambda#145| arg0@@325 arg1@@191)) ))))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 T@U) (|left#0@@5| T@U) (|pivot#0@@5| T@U) (|right#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1) TyType) (= (type |left#0@@5|) (MapType BoxType BoxType))) (= (type |pivot#0@@5|) (SeqType BoxType))) (= (type |right#0@@5|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapPivotedUnion#canCall| Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@5| |pivot#0@@5| |right#0@@5|) (and (and ($Is |left#0@@5| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1)) ($Is |pivot#0@@5| (TSeq Tclass.NativeTypes.byte))) ($Is |right#0@@5| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1))))) (and (and (and (forall ((|k#4@@7| T@U) ) (!  (=> (and (= (type |k#4@@7|) (SeqType BoxType)) ($Is |k#4@@7| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lt#canCall| |k#4@@7| |pivot#0@@5|)) :qid |totalord.716:57| :skolemid |12251| :pattern ( (Lexicographic__Byte__Order.__default.lt |k#4@@7| |pivot#0@@5|)) )) (|Maps.__default.MapIRestrict#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@5| (|lambda#144| (TSeq Tclass.NativeTypes.byte) |pivot#0@@5|))) (let ((|restricted_left#2@@1| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@5| (|lambda#144| (TSeq Tclass.NativeTypes.byte) |pivot#0@@5|)))) (and (and (forall ((|k#5@@7| T@U) ) (!  (=> (and (= (type |k#5@@7|) (SeqType BoxType)) ($Is |k#5@@7| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lte#canCall| |pivot#0@@5| |k#5@@7|)) :qid |totalord.717:59| :skolemid |12252| :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@@5| |k#5@@7|)) )) (|Maps.__default.MapIRestrict#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@5| (|lambda#145| (TSeq Tclass.NativeTypes.byte) |pivot#0@@5|))) (let ((|restricted_right#2@@1| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@5| (|lambda#145| (TSeq Tclass.NativeTypes.byte) |pivot#0@@5|)))) (|Maps.__default.MapDisjointUnion#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |restricted_left#2@@1| |restricted_right#2@@1|))))) (= (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@5| |pivot#0@@5| |right#0@@5|) (let ((|restricted_left#2@@2| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@5| (|lambda#144| (TSeq Tclass.NativeTypes.byte) |pivot#0@@5|)))) (let ((|restricted_right#2@@2| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@5| (|lambda#145| (TSeq Tclass.NativeTypes.byte) |pivot#0@@5|)))) (Maps.__default.MapDisjointUnion (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 StartFuel_Maps._default.MapDisjointUnion |restricted_left#2@@2| |restricted_right#2@@2|)))))) :qid |unknown.0:0| :skolemid |12253| :pattern ( (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@5| |pivot#0@@5| |right#0@@5|)) ))))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 T@U) (|left#0@@6| T@U) (|pivot#0@@6| T@U) (|right#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2) TyType) (= (type |left#0@@6|) (MapType BoxType BoxType))) (= (type |pivot#0@@6|) (SeqType BoxType))) (= (type |right#0@@6|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapPivotedUnion#canCall| Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@6|) (Lit |pivot#0@@6|) (Lit |right#0@@6|)) (and (and ($Is |left#0@@6| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2)) ($Is |pivot#0@@6| (TSeq Tclass.NativeTypes.byte))) ($Is |right#0@@6| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2))))) (and (and (and (forall ((|k#6@@0| T@U) ) (!  (=> (and (= (type |k#6@@0|) (SeqType BoxType)) ($Is |k#6@@0| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lt#canCall| |k#6@@0| (Lit |pivot#0@@6|))) :qid |totalord.716:57| :skolemid |12254| :pattern ( (Lexicographic__Byte__Order.__default.lt |k#6@@0| |pivot#0@@6|)) )) (|Maps.__default.MapIRestrict#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@6|) (|lambda#144| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@6|)))) (let ((|restricted_left#3@@1| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@6|) (|lambda#144| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@6|))))) (and (and (forall ((|k#7@@0| T@U) ) (!  (=> (and (= (type |k#7@@0|) (SeqType BoxType)) ($Is |k#7@@0| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |pivot#0@@6|) |k#7@@0|)) :qid |totalord.717:59| :skolemid |12255| :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@@6| |k#7@@0|)) )) (|Maps.__default.MapIRestrict#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@6|) (|lambda#145| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@6|)))) (let ((|restricted_right#3@@1| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@6|) (|lambda#145| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@6|))))) (|Maps.__default.MapDisjointUnion#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 |restricted_left#3@@1| |restricted_right#3@@1|))))) (= (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@6|) (Lit |pivot#0@@6|) (Lit |right#0@@6|)) (let ((|restricted_left#3@@2| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@6|) (|lambda#144| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@6|))))) (let ((|restricted_right#3@@2| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@6|) (|lambda#145| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@6|))))) (Maps.__default.MapDisjointUnion (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 StartFuel_Maps._default.MapDisjointUnion |restricted_left#3@@2| |restricted_right#3@@2|)))))) :qid |unknown.0:0| :weight 3 :skolemid |12256| :pattern ( (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@6|) (Lit |pivot#0@@6|) (Lit |right#0@@6|))) ))))
(assert (forall ((arg0@@326 T@U) (arg1@@192 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.SetSuccessor arg0@@326 arg1@@192)) DatatypeTypeType) :qid |funType:Lexicographic__Byte__Order.__default.SetSuccessor| :pattern ( (Lexicographic__Byte__Order.__default.SetSuccessor arg0@@326 arg1@@192)) )))
(assert  (=> true (forall ((|m#0@@99| T@U) (|key#0@@72| T@U) ) (!  (=> (and (and (= (type |m#0@@99|) (MapType0Type BoxType boolType)) (= (type |key#0@@72|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| |m#0@@99| |key#0@@72|) (and ($Is |m#0@@99| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@72| (TSeq Tclass.NativeTypes.byte))))) ($Is (Lexicographic__Byte__Order.__default.SetSuccessor |m#0@@99| |key#0@@72|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte)))) :qid |totalord.721:25| :skolemid |12257| :pattern ( (Lexicographic__Byte__Order.__default.SetSuccessor |m#0@@99| |key#0@@72|)) ))))
(assert (forall (($Heap@@107 T@U) (|m#0@@100| T@U) (|key#0@@73| T@U) ) (!  (=> (and (and (and (= (type $Heap@@107) (MapType0Type refType MapType1Type)) (= (type |m#0@@100|) (MapType0Type BoxType boolType))) (= (type |key#0@@73|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@107) ($Is |m#0@@100| (TSet (TSeq Tclass.NativeTypes.byte)))) ($Is |key#0@@73| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.SetSuccessor#requires| |m#0@@100| |key#0@@73|) true) (=> true (|Lexicographic__Byte__Order.__default.SetSuccessor#requires| |m#0@@100| |key#0@@73|)))) :qid |totalord.721:12| :skolemid |12258| :pattern ( (|Lexicographic__Byte__Order.__default.SetSuccessor#requires| |m#0@@100| |key#0@@73|) ($IsGoodHeap $Heap@@107)) )))
(assert (forall ((arg0@@327 T@U) (arg1@@193 T@U) ) (! (= (type (|$let#13_next| arg0@@327 arg1@@193)) (SeqType BoxType)) :qid |funType:$let#13_next| :pattern ( (|$let#13_next| arg0@@327 arg1@@193)) )))
(assert (forall ((m@@50 T@U) (key@@0 T@U) ) (!  (=> (and (and (= (type m@@50) (MapType0Type BoxType boolType)) (= (type key@@0) (SeqType BoxType))) (|$let#13$canCall| m@@50 key@@0)) (and ($Is (|$let#13_next| m@@50 key@@0) (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select m@@50 ($Box (|$let#13_next| m@@50 key@@0)))) (Lexicographic__Byte__Order.__default.lt key@@0 (|$let#13_next| m@@50 key@@0))) (forall ((|other#4@@0| T@U) ) (!  (=> (and (= (type |other#4@@0|) (SeqType BoxType)) ($Is |other#4@@0| (TSeq Tclass.NativeTypes.byte))) (=> (and (and (U_2_bool (MapType0Select m@@50 ($Box |other#4@@0|))) (not (|Seq#Equal| |other#4@@0| (|$let#13_next| m@@50 key@@0)))) (Lexicographic__Byte__Order.__default.lt key@@0 |other#4@@0|)) (Lexicographic__Byte__Order.__default.lt (|$let#13_next| m@@50 key@@0) |other#4@@0|))) :qid |totalord.726:18| :skolemid |12263| :pattern ( (Lexicographic__Byte__Order.__default.lt (|$let#13_next| m@@50 key@@0) |other#4@@0|)) :pattern ( (Lexicographic__Byte__Order.__default.lt key@@0 |other#4@@0|)) :pattern ( (MapType0Select m@@50 ($Box |other#4@@0|))) ))))) :qid |totalord.723:8| :skolemid |12264| :pattern ( (|$let#13_next| m@@50 key@@0)) )))
(assert  (=> true (forall (($Heap@@108 T@U) (|m#0@@101| T@U) (|key#0@@74| T@U) ) (!  (=> (and (and (and (= (type $Heap@@108) (MapType0Type refType MapType1Type)) (= (type |m#0@@101|) (MapType0Type BoxType boolType))) (= (type |key#0@@74|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| |m#0@@101| |key#0@@74|) (and (and ($IsGoodHeap $Heap@@108) ($Is |m#0@@101| (TSet (TSeq Tclass.NativeTypes.byte)))) ($Is |key#0@@74| (TSeq Tclass.NativeTypes.byte))))) (and (and (forall ((|next#4@@2| T@U) ) (!  (=> (and (= (type |next#4@@2|) (SeqType BoxType)) ($Is |next#4@@2| (TSeq Tclass.NativeTypes.byte))) (and (=> (U_2_bool (MapType0Select |m#0@@101| ($Box |next#4@@2|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@74| |next#4@@2|)) (=> (and (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@74| |next#4@@2|) (Lexicographic__Byte__Order.__default.lt |key#0@@74| |next#4@@2|)) (forall ((|other#3@@2| T@U) ) (!  (=> (and (= (type |other#3@@2|) (SeqType BoxType)) ($Is |other#3@@2| (TSeq Tclass.NativeTypes.byte))) (and (=> (not (|Seq#Equal| |other#3@@2| |next#4@@2|)) (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@74| |other#3@@2|)) (=> (and (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@74| |other#3@@2|) (Lexicographic__Byte__Order.__default.lt |key#0@@74| |other#3@@2|)) (|Lexicographic__Byte__Order.__default.lt#canCall| |next#4@@2| |other#3@@2|)))) :qid |totalord.726:18| :skolemid |12259| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#4@@2| |other#3@@2|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@74| |other#3@@2|)) :pattern ( (MapType0Select |m#0@@101| ($Box |other#3@@2|))) ))))) :qid |totalord.723:8| :skolemid |12260| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@74| |next#4@@2|)) :pattern ( (MapType0Select |m#0@@101| ($Box |next#4@@2|))) )) (=> (exists ((|next#4@@3| T@U) ) (!  (and (= (type |next#4@@3|) (SeqType BoxType)) (and ($Is |next#4@@3| (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select |m#0@@101| ($Box |next#4@@3|))) (Lexicographic__Byte__Order.__default.lt |key#0@@74| |next#4@@3|)) (forall ((|other#3@@3| T@U) ) (!  (=> (and (= (type |other#3@@3|) (SeqType BoxType)) ($Is |other#3@@3| (TSeq Tclass.NativeTypes.byte))) (=> (and (and (U_2_bool (MapType0Select |m#0@@101| ($Box |other#3@@3|))) (not (|Seq#Equal| |other#3@@3| |next#4@@3|))) (Lexicographic__Byte__Order.__default.lt |key#0@@74| |other#3@@3|)) (Lexicographic__Byte__Order.__default.lt |next#4@@3| |other#3@@3|))) :qid |totalord.726:18| :skolemid |12261| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#4@@3| |other#3@@3|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@74| |other#3@@3|)) :pattern ( (MapType0Select |m#0@@101| ($Box |other#3@@3|))) ))))) :qid |totalord.723:8| :skolemid |12262| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@74| |next#4@@3|)) :pattern ( (MapType0Select |m#0@@101| ($Box |next#4@@3|))) )) (|$let#13$canCall| |m#0@@101| |key#0@@74|))) (= (Lexicographic__Byte__Order.__default.SetSuccessor |m#0@@101| |key#0@@74|) (ite (exists ((|next#4@@4| T@U) ) (!  (and (= (type |next#4@@4|) (SeqType BoxType)) (and ($Is |next#4@@4| (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select |m#0@@101| ($Box |next#4@@4|))) (Lexicographic__Byte__Order.__default.lt |key#0@@74| |next#4@@4|)) (forall ((|other#3@@4| T@U) ) (!  (=> (and (= (type |other#3@@4|) (SeqType BoxType)) ($Is |other#3@@4| (TSeq Tclass.NativeTypes.byte))) (=> (and (and (U_2_bool (MapType0Select |m#0@@101| ($Box |other#3@@4|))) (not (|Seq#Equal| |other#3@@4| |next#4@@4|))) (Lexicographic__Byte__Order.__default.lt |key#0@@74| |other#3@@4|)) (Lexicographic__Byte__Order.__default.lt |next#4@@4| |other#3@@4|))) :qid |totalord.726:18| :skolemid |12265| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#4@@4| |other#3@@4|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@74| |other#3@@4|)) :pattern ( (MapType0Select |m#0@@101| ($Box |other#3@@4|))) ))))) :qid |totalord.723:8| :skolemid |12266| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@74| |next#4@@4|)) :pattern ( (MapType0Select |m#0@@101| ($Box |next#4@@4|))) )) (let ((|next#5@@0| (|$let#13_next| |m#0@@101| |key#0@@74|))) (|#Options.Option.Some| ($Box |next#5@@0|))) |#Options.Option.None|)))) :qid |totalord.721:12| :skolemid |12267| :pattern ( (Lexicographic__Byte__Order.__default.SetSuccessor |m#0@@101| |key#0@@74|) ($IsGoodHeap $Heap@@108)) ))))
(assert  (=> true (forall (($Heap@@109 T@U) (|m#0@@102| T@U) (|key#0@@75| T@U) ) (!  (=> (and (and (and (= (type $Heap@@109) (MapType0Type refType MapType1Type)) (= (type |m#0@@102|) (MapType0Type BoxType boolType))) (= (type |key#0@@75|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (Lit |m#0@@102|) (Lit |key#0@@75|)) (and (and ($IsGoodHeap $Heap@@109) ($Is |m#0@@102| (TSet (TSeq Tclass.NativeTypes.byte)))) ($Is |key#0@@75| (TSeq Tclass.NativeTypes.byte))))) (and (and (forall ((|next#6@@2| T@U) ) (!  (=> (and (= (type |next#6@@2|) (SeqType BoxType)) ($Is |next#6@@2| (TSeq Tclass.NativeTypes.byte))) (and (=> (U_2_bool (MapType0Select (Lit |m#0@@102|) ($Box |next#6@@2|))) (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |key#0@@75|) |next#6@@2|)) (=> (and (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |key#0@@75|) |next#6@@2|) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@75|) |next#6@@2|)) (forall ((|other#5@@2| T@U) ) (!  (=> (and (= (type |other#5@@2|) (SeqType BoxType)) ($Is |other#5@@2| (TSeq Tclass.NativeTypes.byte))) (and (=> (not (|Seq#Equal| |other#5@@2| |next#6@@2|)) (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |key#0@@75|) |other#5@@2|)) (=> (and (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |key#0@@75|) |other#5@@2|) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@75|) |other#5@@2|)) (|Lexicographic__Byte__Order.__default.lt#canCall| |next#6@@2| |other#5@@2|)))) :qid |totalord.726:18| :skolemid |12268| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#6@@2| |other#5@@2|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@75| |other#5@@2|)) :pattern ( (MapType0Select |m#0@@102| ($Box |other#5@@2|))) ))))) :qid |totalord.723:8| :skolemid |12269| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@75| |next#6@@2|)) :pattern ( (MapType0Select |m#0@@102| ($Box |next#6@@2|))) )) (=> (exists ((|next#6@@3| T@U) ) (!  (and (= (type |next#6@@3|) (SeqType BoxType)) (and ($Is |next#6@@3| (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select (Lit |m#0@@102|) ($Box |next#6@@3|))) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@75|) |next#6@@3|)) (forall ((|other#5@@3| T@U) ) (!  (=> (and (= (type |other#5@@3|) (SeqType BoxType)) ($Is |other#5@@3| (TSeq Tclass.NativeTypes.byte))) (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@102|) ($Box |other#5@@3|))) (not (|Seq#Equal| |other#5@@3| |next#6@@3|))) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@75|) |other#5@@3|)) (Lexicographic__Byte__Order.__default.lt |next#6@@3| |other#5@@3|))) :qid |totalord.726:18| :skolemid |12270| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#6@@3| |other#5@@3|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@75| |other#5@@3|)) :pattern ( (MapType0Select |m#0@@102| ($Box |other#5@@3|))) ))))) :qid |totalord.723:8| :skolemid |12271| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@75| |next#6@@3|)) :pattern ( (MapType0Select |m#0@@102| ($Box |next#6@@3|))) )) (|$let#13$canCall| (Lit |m#0@@102|) (Lit |key#0@@75|)))) (= (Lexicographic__Byte__Order.__default.SetSuccessor (Lit |m#0@@102|) (Lit |key#0@@75|)) (ite (exists ((|next#6@@4| T@U) ) (!  (and (= (type |next#6@@4|) (SeqType BoxType)) (and ($Is |next#6@@4| (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select (Lit |m#0@@102|) ($Box |next#6@@4|))) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@75|) |next#6@@4|)) (forall ((|other#5@@4| T@U) ) (!  (=> (and (= (type |other#5@@4|) (SeqType BoxType)) ($Is |other#5@@4| (TSeq Tclass.NativeTypes.byte))) (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@102|) ($Box |other#5@@4|))) (not (|Seq#Equal| |other#5@@4| |next#6@@4|))) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@75|) |other#5@@4|)) (Lexicographic__Byte__Order.__default.lt |next#6@@4| |other#5@@4|))) :qid |totalord.726:18| :skolemid |12272| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#6@@4| |other#5@@4|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@75| |other#5@@4|)) :pattern ( (MapType0Select |m#0@@102| ($Box |other#5@@4|))) ))))) :qid |totalord.723:8| :skolemid |12273| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@75| |next#6@@4|)) :pattern ( (MapType0Select |m#0@@102| ($Box |next#6@@4|))) )) (let ((|next#7@@0| (|$let#13_next| (Lit |m#0@@102|) (Lit |key#0@@75|)))) (|#Options.Option.Some| ($Box |next#7@@0|))) |#Options.Option.None|)))) :qid |totalord.721:12| :weight 3 :skolemid |12274| :pattern ( (Lexicographic__Byte__Order.__default.SetSuccessor (Lit |m#0@@102|) (Lit |key#0@@75|)) ($IsGoodHeap $Heap@@109)) ))))
(assert (forall ((arg0@@328 T@U) (arg1@@194 T@U) (arg2@@127 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.MapSuccessor arg0@@328 arg1@@194 arg2@@127)) DatatypeTypeType) :qid |funType:Lexicographic__Byte__Order.__default.MapSuccessor| :pattern ( (Lexicographic__Byte__Order.__default.MapSuccessor arg0@@328 arg1@@194 arg2@@127)) )))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapSuccessor$V T@U) (|m#0@@103| T@U) (|key#0@@76| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.MapSuccessor$V) TyType) (= (type |m#0@@103|) (MapType BoxType BoxType))) (= (type |key#0@@76|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapSuccessor#canCall| Lexicographic_Byte_Order._default.MapSuccessor$V |m#0@@103| |key#0@@76|) (and ($Is |m#0@@103| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapSuccessor$V)) ($Is |key#0@@76| (TSeq Tclass.NativeTypes.byte))))) ($Is (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V |m#0@@103| |key#0@@76|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte)))) :qid |unknown.0:0| :skolemid |12275| :pattern ( (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V |m#0@@103| |key#0@@76|)) ))))
(assert (forall ((Lexicographic_Byte_Order._default.MapSuccessor$V@@0 T@U) (|m#0@@104| T@U) (|key#0@@77| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.MapSuccessor$V@@0) TyType) (= (type |m#0@@104|) (MapType BoxType BoxType))) (= (type |key#0@@77|) (SeqType BoxType))) (and ($Is |m#0@@104| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapSuccessor$V@@0)) ($Is |key#0@@77| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.MapSuccessor#requires| Lexicographic_Byte_Order._default.MapSuccessor$V@@0 |m#0@@104| |key#0@@77|) true) (=> true (|Lexicographic__Byte__Order.__default.MapSuccessor#requires| Lexicographic_Byte_Order._default.MapSuccessor$V@@0 |m#0@@104| |key#0@@77|)))) :qid |unknown.0:0| :skolemid |12276| :pattern ( (|Lexicographic__Byte__Order.__default.MapSuccessor#requires| Lexicographic_Byte_Order._default.MapSuccessor$V@@0 |m#0@@104| |key#0@@77|)) )))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapSuccessor$V@@1 T@U) (|m#0@@105| T@U) (|key#0@@78| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.MapSuccessor$V@@1) TyType) (= (type |m#0@@105|) (MapType BoxType BoxType))) (= (type |key#0@@78|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapSuccessor#canCall| Lexicographic_Byte_Order._default.MapSuccessor$V@@1 |m#0@@105| |key#0@@78|) (and ($Is |m#0@@105| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapSuccessor$V@@1)) ($Is |key#0@@78| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (|Map#Domain| |m#0@@105|) |key#0@@78|) (= (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V@@1 |m#0@@105| |key#0@@78|) (Lexicographic__Byte__Order.__default.SetSuccessor (|Map#Domain| |m#0@@105|) |key#0@@78|)))) :qid |unknown.0:0| :skolemid |12277| :pattern ( (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V@@1 |m#0@@105| |key#0@@78|)) ))))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapSuccessor$V@@2 T@U) (|m#0@@106| T@U) (|key#0@@79| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.MapSuccessor$V@@2) TyType) (= (type |m#0@@106|) (MapType BoxType BoxType))) (= (type |key#0@@79|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapSuccessor#canCall| Lexicographic_Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@106|) (Lit |key#0@@79|)) (and ($Is |m#0@@106| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapSuccessor$V@@2)) ($Is |key#0@@79| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (Lit (|Map#Domain| (Lit |m#0@@106|))) (Lit |key#0@@79|)) (= (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@106|) (Lit |key#0@@79|)) (Lit (Lexicographic__Byte__Order.__default.SetSuccessor (Lit (|Map#Domain| (Lit |m#0@@106|))) (Lit |key#0@@79|)))))) :qid |unknown.0:0| :weight 3 :skolemid |12278| :pattern ( (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@106|) (Lit |key#0@@79|))) ))))
(assert (forall ((arg0@@329 T@U) (arg1@@195 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.SeqSuccessor arg0@@329 arg1@@195)) DatatypeTypeType) :qid |funType:Lexicographic__Byte__Order.__default.SeqSuccessor| :pattern ( (Lexicographic__Byte__Order.__default.SeqSuccessor arg0@@329 arg1@@195)) )))
(assert  (=> true (forall ((|m#0@@107| T@U) (|key#0@@80| T@U) ) (!  (=> (and (and (= (type |m#0@@107|) (SeqType BoxType)) (= (type |key#0@@80|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SeqSuccessor#canCall| |m#0@@107| |key#0@@80|) (and ($Is |m#0@@107| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@80| (TSeq Tclass.NativeTypes.byte))))) ($Is (Lexicographic__Byte__Order.__default.SeqSuccessor |m#0@@107| |key#0@@80|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte)))) :qid |totalord.737:25| :skolemid |12279| :pattern ( (Lexicographic__Byte__Order.__default.SeqSuccessor |m#0@@107| |key#0@@80|)) ))))
(assert (forall ((|m#0@@108| T@U) (|key#0@@81| T@U) ) (!  (=> (and (and (= (type |m#0@@108|) (SeqType BoxType)) (= (type |key#0@@81|) (SeqType BoxType))) (and ($Is |m#0@@108| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@81| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.SeqSuccessor#requires| |m#0@@108| |key#0@@81|) true) (=> true (|Lexicographic__Byte__Order.__default.SeqSuccessor#requires| |m#0@@108| |key#0@@81|)))) :qid |totalord.737:25| :skolemid |12280| :pattern ( (|Lexicographic__Byte__Order.__default.SeqSuccessor#requires| |m#0@@108| |key#0@@81|)) )))
(assert  (=> true (forall ((|m#0@@109| T@U) (|key#0@@82| T@U) ) (!  (=> (and (and (= (type |m#0@@109|) (SeqType BoxType)) (= (type |key#0@@82|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SeqSuccessor#canCall| |m#0@@109| |key#0@@82|) (and ($Is |m#0@@109| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@82| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (|lambda#140| (TSeq Tclass.NativeTypes.byte) |m#0@@109|) |key#0@@82|) (= (Lexicographic__Byte__Order.__default.SeqSuccessor |m#0@@109| |key#0@@82|) (Lexicographic__Byte__Order.__default.SetSuccessor (|lambda#140| (TSeq Tclass.NativeTypes.byte) |m#0@@109|) |key#0@@82|)))) :qid |totalord.737:25| :skolemid |12281| :pattern ( (Lexicographic__Byte__Order.__default.SeqSuccessor |m#0@@109| |key#0@@82|)) ))))
(assert  (=> true (forall ((|m#0@@110| T@U) (|key#0@@83| T@U) ) (!  (=> (and (and (= (type |m#0@@110|) (SeqType BoxType)) (= (type |key#0@@83|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SeqSuccessor#canCall| (Lit |m#0@@110|) (Lit |key#0@@83|)) (and ($Is |m#0@@110| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@83| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (|lambda#140| (TSeq Tclass.NativeTypes.byte) |m#0@@110|) (Lit |key#0@@83|)) (= (Lexicographic__Byte__Order.__default.SeqSuccessor (Lit |m#0@@110|) (Lit |key#0@@83|)) (Lexicographic__Byte__Order.__default.SetSuccessor (|lambda#140| (TSeq Tclass.NativeTypes.byte) |m#0@@110|) (Lit |key#0@@83|))))) :qid |totalord.737:25| :weight 3 :skolemid |12282| :pattern ( (Lexicographic__Byte__Order.__default.SeqSuccessor (Lit |m#0@@110|) (Lit |key#0@@83|))) ))))
(assert (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V T@U) ($ly@@480 T@U) (|s#0@@120| T@U) (|m#0@@111| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V) TyType) (= (type $ly@@480) LayerTypeType)) (= (type |s#0@@120|) (SeqType BoxType))) (= (type |m#0@@111|) (MapType BoxType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V ($LS $ly@@480) |s#0@@120| |m#0@@111|) (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V $ly@@480 |s#0@@120| |m#0@@111|)) (=> (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V $ly@@480 |s#0@@120| |m#0@@111|) (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V ($LS $ly@@480) |s#0@@120| |m#0@@111|)))) :qid |unknown.0:0| :skolemid |12283| :pattern ( (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V ($LS $ly@@480) |s#0@@120| |m#0@@111|)) )))
(assert (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 T@U) ($ly@@481 T@U) (|s#0@@121| T@U) (|m#0@@112| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0) TyType) (= (type $ly@@481) LayerTypeType)) (= (type |s#0@@121|) (SeqType BoxType))) (= (type |m#0@@112|) (MapType BoxType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 $ly@@481 |s#0@@121| |m#0@@112|) (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 $LZ |s#0@@121| |m#0@@112|)) (=> (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 $LZ |s#0@@121| |m#0@@112|) (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 $ly@@481 |s#0@@121| |m#0@@112|)))) :qid |unknown.0:0| :skolemid |12284| :pattern ( (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 (AsFuelBottom $ly@@481) |s#0@@121| |m#0@@112|)) )))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1 T@U) ($ly@@482 T@U) (|s#0@@122| T@U) (|m#0@@113| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1) TyType) (= (type $ly@@482) LayerTypeType)) (= (type |s#0@@122|) (SeqType BoxType))) (= (type |m#0@@113|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.SortedSeqForMap#canCall| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1 |s#0@@122| |m#0@@113|) (and ($Is |s#0@@122| (TSeq (Tclass._System.Tuple2 (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1))) ($Is |m#0@@113| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1))))) true) :qid |unknown.0:0| :skolemid |12285| :pattern ( (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1 $ly@@482 |s#0@@122| |m#0@@113|)) ))))
(assert (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2 T@U) ($ly@@483 T@U) (|s#0@@123| T@U) (|m#0@@114| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2) TyType) (= (type $ly@@483) LayerTypeType)) (= (type |s#0@@123|) (SeqType BoxType))) (= (type |m#0@@114|) (MapType BoxType BoxType))) (and ($Is |s#0@@123| (TSeq (Tclass._System.Tuple2 (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2))) ($Is |m#0@@114| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2)))) (and (=> (|Lexicographic__Byte__Order.__default.SortedSeqForMap#requires| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2 $ly@@483 |s#0@@123| |m#0@@114|) true) (=> true (|Lexicographic__Byte__Order.__default.SortedSeqForMap#requires| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2 $ly@@483 |s#0@@123| |m#0@@114|)))) :qid |unknown.0:0| :skolemid |12286| :pattern ( (|Lexicographic__Byte__Order.__default.SortedSeqForMap#requires| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2 $ly@@483 |s#0@@123| |m#0@@114|)) )))
(assert (= (type StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted) LayerTypeType))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 T@U) ($ly@@484 T@U) (|s#0@@124| T@U) (|m#0@@115| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3) TyType) (= (type $ly@@484) LayerTypeType)) (= (type |s#0@@124|) (SeqType BoxType))) (= (type |m#0@@115|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.SortedSeqForMap#canCall| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 |s#0@@124| |m#0@@115|) (and ($Is |s#0@@124| (TSeq (Tclass._System.Tuple2 (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3))) ($Is |m#0@@115| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3))))) (and (and (and (and (and (|Sequences.__default.Unzip#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 |s#0@@124|) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@124|))) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@124|))))) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@124|)))) (forall ((|i#4@@12| Int) ) (!  (and (=> (< |i#4@@12| (|Seq#Length| |s#0@@124|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#4@@12|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#4@@12|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@115|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#4@@12|)))))) (=> (< |i#4@@12| (|Seq#Length| |s#0@@124|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#4@@12|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#4@@12|))))))) :qid |totalord.761:16| :skolemid |12287| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#4@@12|))) )))) (=> (and (forall ((|i#4@@13| Int) ) (!  (and (=> (< |i#4@@13| (|Seq#Length| |s#0@@124|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#4@@13|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#4@@13|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@115|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#4@@13|)))))) (=> (< |i#4@@13| (|Seq#Length| |s#0@@124|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#4@@13|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#4@@13|))))))) :qid |totalord.761:16| :skolemid |12290| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#4@@13|))) )) (forall ((|i#4@@14| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#4@@14|) (< |i#4@@14| (|Seq#Length| |s#0@@124|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@115|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#4@@14|)))))) (=> (and (<= (LitInt 0) |i#4@@14|) (< |i#4@@14| (|Seq#Length| |s#0@@124|))) (= (MapType0Select (|Map#Elements| |m#0@@115|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#4@@14|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#4@@14|))))))) :qid |totalord.761:16| :skolemid |12291| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#4@@14|))) ))) (forall ((|key#2@@8| T@U) ) (!  (=> (and (and (= (type |key#2@@8|) (SeqType BoxType)) ($Is |key#2@@8| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@115|) ($Box |key#2@@8|)))) (forall ((|i#5@@11| Int) ) (!  (and (=> (< |i#5@@11| (|Seq#Length| |s#0@@124|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#5@@11|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#5@@11|))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#5@@11|)))) |key#2@@8|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#5@@11|))))) :qid |totalord.762:44| :skolemid |12288| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#5@@11|))) ))) :qid |totalord.762:16| :skolemid |12289| :pattern ( (MapType0Select (|Map#Elements| |m#0@@115|) ($Box |key#2@@8|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@115|) ($Box |key#2@@8|))) )))) (and (=> (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@484) |s#0@@124| |m#0@@115|) (and (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@124|)))) (forall ((|i#4@@15| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#4@@15|) (< |i#4@@15| (|Seq#Length| |s#0@@124|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@115|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#4@@15|)))))) (=> (and (<= (LitInt 0) |i#4@@15|) (< |i#4@@15| (|Seq#Length| |s#0@@124|))) (= (MapType0Select (|Map#Elements| |m#0@@115|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#4@@15|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#4@@15|))))))) :qid |totalord.761:16| :skolemid |12292| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#4@@15|))) ))) (forall ((|key#2@@9| T@U) ) (!  (=> (and (and (= (type |key#2@@9|) (SeqType BoxType)) ($Is |key#2@@9| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@115|) ($Box |key#2@@9|)))) (exists ((|i#5@@12| Int) ) (!  (and (and (and (<= (LitInt 0) |i#5@@12|) (< |i#5@@12| (|Seq#Length| |s#0@@124|))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#5@@12|)))) |key#2@@9|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#5@@12|))) (MapType0Select (|Map#Elements| |m#0@@115|) ($Box |key#2@@9|)))) :qid |totalord.762:44| :skolemid |12293| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#5@@12|))) ))) :qid |totalord.762:16| :skolemid |12294| :pattern ( (MapType0Select (|Map#Elements| |m#0@@115|) ($Box |key#2@@9|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@115|) ($Box |key#2@@9|))) )))) (=> (and (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@124|)))) (forall ((|i#4@@16| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#4@@16|) (< |i#4@@16| (|Seq#Length| |s#0@@124|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@115|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#4@@16|)))))) (=> (and (<= (LitInt 0) |i#4@@16|) (< |i#4@@16| (|Seq#Length| |s#0@@124|))) (= (MapType0Select (|Map#Elements| |m#0@@115|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#4@@16|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#4@@16|))))))) :qid |totalord.761:16| :skolemid |12292| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#4@@16|))) ))) (forall ((|key#2@@10| T@U) ) (!  (=> (and (and (= (type |key#2@@10|) (SeqType BoxType)) ($Is |key#2@@10| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@115|) ($Box |key#2@@10|)))) (exists ((|i#5@@13| Int) ) (!  (and (and (and (<= (LitInt 0) |i#5@@13|) (< |i#5@@13| (|Seq#Length| |s#0@@124|))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#5@@13|)))) |key#2@@10|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#5@@13|))) (MapType0Select (|Map#Elements| |m#0@@115|) ($Box |key#2@@10|)))) :qid |totalord.762:44| :skolemid |12293| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#5@@13|))) ))) :qid |totalord.762:16| :skolemid |12294| :pattern ( (MapType0Select (|Map#Elements| |m#0@@115|) ($Box |key#2@@10|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@115|) ($Box |key#2@@10|))) ))) (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@484) |s#0@@124| |m#0@@115|))))) :qid |unknown.0:0| :skolemid |12295| :pattern ( (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@484) |s#0@@124| |m#0@@115|)) ))))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 T@U) ($ly@@485 T@U) (|s#0@@125| T@U) (|m#0@@116| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4) TyType) (= (type $ly@@485) LayerTypeType)) (= (type |s#0@@125|) (SeqType BoxType))) (= (type |m#0@@116|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.SortedSeqForMap#canCall| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@125|) (Lit |m#0@@116|)) (and ($Is |s#0@@125| (TSeq (Tclass._System.Tuple2 (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4))) ($Is |m#0@@116| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4))))) (and (and (and (and (and (|Sequences.__default.Unzip#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@125|)) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@125|)))) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@125|)))))) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@125|))))) (forall ((|i#6@@13| Int) ) (!  (and (=> (< |i#6@@13| (|Seq#Length| (Lit |s#0@@125|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#6@@13|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#6@@13|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@116|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#6@@13|)))))) (=> (< |i#6@@13| (|Seq#Length| (Lit |s#0@@125|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#6@@13|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#6@@13|))))))) :qid |totalord.761:16| :skolemid |12296| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@125| |i#6@@13|))) )))) (=> (and (forall ((|i#6@@14| Int) ) (!  (and (=> (< |i#6@@14| (|Seq#Length| (Lit |s#0@@125|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#6@@14|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#6@@14|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@116|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#6@@14|)))))) (=> (< |i#6@@14| (|Seq#Length| (Lit |s#0@@125|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#6@@14|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#6@@14|))))))) :qid |totalord.761:16| :skolemid |12299| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@125| |i#6@@14|))) )) (forall ((|i#6@@15| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#6@@15|) (< |i#6@@15| (|Seq#Length| (Lit |s#0@@125|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@116|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#6@@15|)))))) (=> (and (<= (LitInt 0) |i#6@@15|) (< |i#6@@15| (|Seq#Length| (Lit |s#0@@125|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@116|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#6@@15|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#6@@15|))))))) :qid |totalord.761:16| :skolemid |12300| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@125| |i#6@@15|))) ))) (forall ((|key#3@@8| T@U) ) (!  (=> (and (and (= (type |key#3@@8|) (SeqType BoxType)) ($Is |key#3@@8| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@116|) ($Box |key#3@@8|)))) (forall ((|i#7@@2| Int) ) (!  (and (=> (< |i#7@@2| (|Seq#Length| (Lit |s#0@@125|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#7@@2|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#7@@2|))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#7@@2|)))) |key#3@@8|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#7@@2|))))) :qid |totalord.762:44| :skolemid |12297| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@125| |i#7@@2|))) ))) :qid |totalord.762:16| :skolemid |12298| :pattern ( (MapType0Select (|Map#Elements| |m#0@@116|) ($Box |key#3@@8|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@116|) ($Box |key#3@@8|))) )))) (and (=> (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@485) (Lit |s#0@@125|) (Lit |m#0@@116|)) (and (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@125|))))) (forall ((|i#6@@16| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#6@@16|) (< |i#6@@16| (|Seq#Length| (Lit |s#0@@125|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@116|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#6@@16|)))))) (=> (and (<= (LitInt 0) |i#6@@16|) (< |i#6@@16| (|Seq#Length| (Lit |s#0@@125|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@116|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#6@@16|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#6@@16|))))))) :qid |totalord.761:16| :skolemid |12301| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@125| |i#6@@16|))) ))) (forall ((|key#3@@9| T@U) ) (!  (=> (and (and (= (type |key#3@@9|) (SeqType BoxType)) ($Is |key#3@@9| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@116|) ($Box |key#3@@9|)))) (exists ((|i#7@@3| Int) ) (!  (and (and (and (<= (LitInt 0) |i#7@@3|) (< |i#7@@3| (|Seq#Length| (Lit |s#0@@125|)))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#7@@3|)))) |key#3@@9|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#7@@3|))) (MapType0Select (|Map#Elements| (Lit |m#0@@116|)) ($Box |key#3@@9|)))) :qid |totalord.762:44| :skolemid |12302| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@125| |i#7@@3|))) ))) :qid |totalord.762:16| :skolemid |12303| :pattern ( (MapType0Select (|Map#Elements| |m#0@@116|) ($Box |key#3@@9|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@116|) ($Box |key#3@@9|))) )))) (=> (and (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@125|))))) (forall ((|i#6@@17| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#6@@17|) (< |i#6@@17| (|Seq#Length| (Lit |s#0@@125|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@116|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#6@@17|)))))) (=> (and (<= (LitInt 0) |i#6@@17|) (< |i#6@@17| (|Seq#Length| (Lit |s#0@@125|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@116|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#6@@17|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#6@@17|))))))) :qid |totalord.761:16| :skolemid |12301| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@125| |i#6@@17|))) ))) (forall ((|key#3@@10| T@U) ) (!  (=> (and (and (= (type |key#3@@10|) (SeqType BoxType)) ($Is |key#3@@10| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@116|) ($Box |key#3@@10|)))) (exists ((|i#7@@4| Int) ) (!  (and (and (and (<= (LitInt 0) |i#7@@4|) (< |i#7@@4| (|Seq#Length| (Lit |s#0@@125|)))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#7@@4|)))) |key#3@@10|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#7@@4|))) (MapType0Select (|Map#Elements| (Lit |m#0@@116|)) ($Box |key#3@@10|)))) :qid |totalord.762:44| :skolemid |12302| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@125| |i#7@@4|))) ))) :qid |totalord.762:16| :skolemid |12303| :pattern ( (MapType0Select (|Map#Elements| |m#0@@116|) ($Box |key#3@@10|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@116|) ($Box |key#3@@10|))) ))) (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@485) (Lit |s#0@@125|) (Lit |m#0@@116|)))))) :qid |unknown.0:0| :weight 3 :skolemid |12304| :pattern ( (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@485) (Lit |s#0@@125|) (Lit |m#0@@116|))) ))))
(assert (forall ((arg0@@330 T@U) (arg1@@196 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.minimum arg0@@330 arg1@@196)) (SeqType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.minimum| :pattern ( (Lexicographic__Byte__Order.__default.minimum arg0@@330 arg1@@196)) )))
(assert (forall (($ly@@486 T@U) (|s#0@@126| T@U) ) (!  (=> (and (= (type $ly@@486) LayerTypeType) (= (type |s#0@@126|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@486) |s#0@@126|) (Lexicographic__Byte__Order.__default.minimum $ly@@486 |s#0@@126|))) :qid |totalord.765:22| :skolemid |12305| :pattern ( (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@486) |s#0@@126|)) )))
(assert (forall (($ly@@487 T@U) (|s#0@@127| T@U) ) (!  (=> (and (= (type $ly@@487) LayerTypeType) (= (type |s#0@@127|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.minimum $ly@@487 |s#0@@127|) (Lexicographic__Byte__Order.__default.minimum $LZ |s#0@@127|))) :qid |totalord.765:22| :skolemid |12306| :pattern ( (Lexicographic__Byte__Order.__default.minimum (AsFuelBottom $ly@@487) |s#0@@127|)) )))
(assert  (=> true (forall (($ly@@488 T@U) (|s#0@@128| T@U) ) (!  (=> (and (and (= (type $ly@@488) LayerTypeType) (= (type |s#0@@128|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimum#canCall| |s#0@@128|) (and ($Is |s#0@@128| (TSet (TSeq Tclass.NativeTypes.byte))) (>= (|Set#Card| |s#0@@128|) (LitInt 1))))) (and (and (U_2_bool (MapType0Select |s#0@@128| ($Box (Lexicographic__Byte__Order.__default.minimum $ly@@488 |s#0@@128|)))) (forall ((|y#1@@3| T@U) ) (!  (=> (= (type |y#1@@3|) (SeqType BoxType)) (=> (and ($Is |y#1@@3| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select |s#0@@128| ($Box |y#1@@3|)))) (Lexicographic__Byte__Order.__default.lte (Lexicographic__Byte__Order.__default.minimum $ly@@488 |s#0@@128|) |y#1@@3|))) :qid |totalord.768:18| :skolemid |12307| :pattern ( (Lexicographic__Byte__Order.__default.lte (Lexicographic__Byte__Order.__default.minimum $ly@@488 |s#0@@128|) |y#1@@3|)) :pattern ( (MapType0Select |s#0@@128| ($Box |y#1@@3|))) ))) ($Is (Lexicographic__Byte__Order.__default.minimum $ly@@488 |s#0@@128|) (TSeq Tclass.NativeTypes.byte)))) :qid |totalord.765:22| :skolemid |12308| :pattern ( (Lexicographic__Byte__Order.__default.minimum $ly@@488 |s#0@@128|)) ))))
(assert (forall (($ly@@489 T@U) ($Heap@@110 T@U) (|s#0@@129| T@U) ) (!  (=> (and (and (and (= (type $ly@@489) LayerTypeType) (= (type $Heap@@110) (MapType0Type refType MapType1Type))) (= (type |s#0@@129|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@110) ($Is |s#0@@129| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (|Lexicographic__Byte__Order.__default.minimum#requires| $ly@@489 |s#0@@129|) (>= (|Set#Card| |s#0@@129|) (LitInt 1))) (=> (>= (|Set#Card| |s#0@@129|) (LitInt 1)) (|Lexicographic__Byte__Order.__default.minimum#requires| $ly@@489 |s#0@@129|)))) :qid |totalord.765:22| :skolemid |12309| :pattern ( (|Lexicographic__Byte__Order.__default.minimum#requires| $ly@@489 |s#0@@129|) ($IsGoodHeap $Heap@@110)) )))
(assert (forall ((arg0@@331 T@U) ) (! (= (type (|$let#16_a| arg0@@331)) (SeqType BoxType)) :qid |funType:$let#16_a| :pattern ( (|$let#16_a| arg0@@331)) )))
(assert (forall ((s@@48 T@U) ) (!  (=> (and (= (type s@@48) (MapType0Type BoxType boolType)) (|$let#16$canCall| s@@48)) (and ($Is (|$let#16_a| s@@48) (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select s@@48 ($Box (|$let#16_a| s@@48)))))) :qid |totalord.772:5| :skolemid |12310| :pattern ( (|$let#16_a| s@@48)) )))
(assert  (=> true (forall (($ly@@490 T@U) ($Heap@@111 T@U) (|s#0@@130| T@U) ) (!  (=> (and (and (and (= (type $ly@@490) LayerTypeType) (= (type $Heap@@111) (MapType0Type refType MapType1Type))) (= (type |s#0@@130|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimum#canCall| |s#0@@130|) (and (and ($IsGoodHeap $Heap@@111) ($Is |s#0@@130| (TSet (TSeq Tclass.NativeTypes.byte)))) (>= (|Set#Card| |s#0@@130|) (LitInt 1))))) (and (and (|$let#16$canCall| |s#0@@130|) (let ((|s'#4@@1| (|Set#Difference| |s#0@@130| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#16_a| |s#0@@130|)))))) (=> (not (|Set#Equal| |s'#4@@1| (|Set#Empty| BoxType))) (and (|Lexicographic__Byte__Order.__default.minimum#canCall| |s'#4@@1|) (let ((|m'#4@@2| (Lexicographic__Byte__Order.__default.minimum $ly@@490 |s'#4@@1|))) (|Lexicographic__Byte__Order.__default.lt#canCall| (|$let#16_a| |s#0@@130|) |m'#4@@2|)))))) (= (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@490) |s#0@@130|) (let ((|a#2@@2| (|$let#16_a| |s#0@@130|))) (let ((|s'#5@@1| (|Set#Difference| |s#0@@130| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#2@@2|))))) (ite (|Set#Equal| |s'#5@@1| (|Set#Empty| BoxType)) |a#2@@2| (let ((|m'#5@@2| (Lexicographic__Byte__Order.__default.minimum $ly@@490 |s'#5@@1|))) (ite (Lexicographic__Byte__Order.__default.lt |a#2@@2| |m'#5@@2|) |a#2@@2| |m'#5@@2|)))))))) :qid |totalord.765:22| :skolemid |12311| :pattern ( (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@490) |s#0@@130|) ($IsGoodHeap $Heap@@111)) ))))
(assert  (=> true (forall (($ly@@491 T@U) ($Heap@@112 T@U) (|s#0@@131| T@U) ) (!  (=> (and (and (and (= (type $ly@@491) LayerTypeType) (= (type $Heap@@112) (MapType0Type refType MapType1Type))) (= (type |s#0@@131|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimum#canCall| (Lit |s#0@@131|)) (and (and ($IsGoodHeap $Heap@@112) ($Is |s#0@@131| (TSet (TSeq Tclass.NativeTypes.byte)))) (>= (|Set#Card| (Lit |s#0@@131|)) (LitInt 1))))) (and (and (|$let#16$canCall| (Lit |s#0@@131|)) (let ((|s'#6@@1| (|Set#Difference| |s#0@@131| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#16_a| (Lit |s#0@@131|))))))) (=> (not (|Set#Equal| |s'#6@@1| (|Set#Empty| BoxType))) (and (|Lexicographic__Byte__Order.__default.minimum#canCall| |s'#6@@1|) (let ((|m'#6@@1| (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@491) |s'#6@@1|))) (|Lexicographic__Byte__Order.__default.lt#canCall| (|$let#16_a| (Lit |s#0@@131|)) |m'#6@@1|)))))) (= (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@491) (Lit |s#0@@131|)) (let ((|a#3@@4| (|$let#16_a| (Lit |s#0@@131|)))) (let ((|s'#7@@1| (|Set#Difference| |s#0@@131| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#3@@4|))))) (ite (|Set#Equal| |s'#7@@1| (|Set#Empty| BoxType)) |a#3@@4| (let ((|m'#7@@1| (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@491) |s'#7@@1|))) (ite (Lexicographic__Byte__Order.__default.lt |a#3@@4| |m'#7@@1|) |a#3@@4| |m'#7@@1|)))))))) :qid |totalord.765:22| :weight 3 :skolemid |12312| :pattern ( (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@491) (Lit |s#0@@131|)) ($IsGoodHeap $Heap@@112)) ))))
(assert (forall ((arg0@@332 T@U) (arg1@@197 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.minimumOpt arg0@@332 arg1@@197)) DatatypeTypeType) :qid |funType:Lexicographic__Byte__Order.__default.minimumOpt| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt arg0@@332 arg1@@197)) )))
(assert (forall (($ly@@492 T@U) (|s#0@@132| T@U) ) (!  (=> (and (= (type $ly@@492) LayerTypeType) (= (type |s#0@@132|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@492) |s#0@@132|) (Lexicographic__Byte__Order.__default.minimumOpt $ly@@492 |s#0@@132|))) :qid |totalord.788:22| :skolemid |12313| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@492) |s#0@@132|)) )))
(assert (forall (($ly@@493 T@U) (|s#0@@133| T@U) ) (!  (=> (and (= (type $ly@@493) LayerTypeType) (= (type |s#0@@133|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.minimumOpt $ly@@493 |s#0@@133|) (Lexicographic__Byte__Order.__default.minimumOpt $LZ |s#0@@133|))) :qid |totalord.788:22| :skolemid |12314| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt (AsFuelBottom $ly@@493) |s#0@@133|)) )))
(assert  (=> true (forall (($ly@@494 T@U) (|s#0@@134| T@U) ) (!  (=> (and (and (= (type $ly@@494) LayerTypeType) (= (type |s#0@@134|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimumOpt#canCall| |s#0@@134|) ($Is |s#0@@134| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (and (and (=> (Options.Option.Some_q (Lexicographic__Byte__Order.__default.minimumOpt $ly@@494 |s#0@@134|)) (U_2_bool (MapType0Select |s#0@@134| (Options.Option.value (Lexicographic__Byte__Order.__default.minimumOpt $ly@@494 |s#0@@134|))))) (=> (Options.Option.Some_q (Lexicographic__Byte__Order.__default.minimumOpt $ly@@494 |s#0@@134|)) (forall ((|y#1@@4| T@U) ) (!  (=> (= (type |y#1@@4|) (SeqType BoxType)) (=> (and ($Is |y#1@@4| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select |s#0@@134| ($Box |y#1@@4|)))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Options.Option.value (Lexicographic__Byte__Order.__default.minimumOpt $ly@@494 |s#0@@134|))) |y#1@@4|))) :qid |totalord.790:30| :skolemid |12315| :pattern ( (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Options.Option.value (Lexicographic__Byte__Order.__default.minimumOpt $ly@@494 |s#0@@134|))) |y#1@@4|)) :pattern ( (MapType0Select |s#0@@134| ($Box |y#1@@4|))) )))) (=> (Options.Option.None_q (Lexicographic__Byte__Order.__default.minimumOpt $ly@@494 |s#0@@134|)) (|Set#Equal| |s#0@@134| (|Set#Empty| BoxType)))) ($Is (Lexicographic__Byte__Order.__default.minimumOpt $ly@@494 |s#0@@134|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte))))) :qid |totalord.788:22| :skolemid |12316| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt $ly@@494 |s#0@@134|)) ))))
(assert (forall (($ly@@495 T@U) (|s#0@@135| T@U) ) (!  (=> (and (and (= (type $ly@@495) LayerTypeType) (= (type |s#0@@135|) (MapType0Type BoxType boolType))) ($Is |s#0@@135| (TSet (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.minimumOpt#requires| $ly@@495 |s#0@@135|) true) (=> true (|Lexicographic__Byte__Order.__default.minimumOpt#requires| $ly@@495 |s#0@@135|)))) :qid |totalord.788:22| :skolemid |12317| :pattern ( (|Lexicographic__Byte__Order.__default.minimumOpt#requires| $ly@@495 |s#0@@135|)) )))
(assert (= (type StartFuel_Lexicographic_Byte_Order._default.minimum) LayerTypeType))
(assert  (=> true (forall (($ly@@496 T@U) (|s#0@@136| T@U) ) (!  (=> (and (and (= (type $ly@@496) LayerTypeType) (= (type |s#0@@136|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimumOpt#canCall| |s#0@@136|) ($Is |s#0@@136| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (|Set#Equal| |s#0@@136| (|Set#Empty| BoxType))) (|Lexicographic__Byte__Order.__default.minimum#canCall| |s#0@@136|)) (= (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@496) |s#0@@136|) (ite (|Set#Equal| |s#0@@136| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Lexicographic__Byte__Order.__default.minimum StartFuel_Lexicographic_Byte_Order._default.minimum |s#0@@136|))))))) :qid |totalord.788:22| :skolemid |12318| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@496) |s#0@@136|)) ))))
(assert  (=> true (forall (($ly@@497 T@U) (|s#0@@137| T@U) ) (!  (=> (and (and (= (type $ly@@497) LayerTypeType) (= (type |s#0@@137|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimumOpt#canCall| (Lit |s#0@@137|)) ($Is |s#0@@137| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (|Set#Equal| |s#0@@137| (|Set#Empty| BoxType))) (|Lexicographic__Byte__Order.__default.minimum#canCall| (Lit |s#0@@137|))) (= (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@497) (Lit |s#0@@137|)) (ite (|Set#Equal| |s#0@@137| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Lexicographic__Byte__Order.__default.minimum StartFuel_Lexicographic_Byte_Order._default.minimum (Lit |s#0@@137|)))))))) :qid |totalord.788:22| :weight 3 :skolemid |12319| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@497) (Lit |s#0@@137|))) ))))
(assert (forall ((arg0@@333 T@U) (arg1@@198 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.maximum arg0@@333 arg1@@198)) (SeqType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.maximum| :pattern ( (Lexicographic__Byte__Order.__default.maximum arg0@@333 arg1@@198)) )))
(assert (forall (($ly@@498 T@U) (|s#0@@138| T@U) ) (!  (=> (and (= (type $ly@@498) LayerTypeType) (= (type |s#0@@138|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@498) |s#0@@138|) (Lexicographic__Byte__Order.__default.maximum $ly@@498 |s#0@@138|))) :qid |totalord.796:22| :skolemid |12320| :pattern ( (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@498) |s#0@@138|)) )))
(assert (forall (($ly@@499 T@U) (|s#0@@139| T@U) ) (!  (=> (and (= (type $ly@@499) LayerTypeType) (= (type |s#0@@139|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.maximum $ly@@499 |s#0@@139|) (Lexicographic__Byte__Order.__default.maximum $LZ |s#0@@139|))) :qid |totalord.796:22| :skolemid |12321| :pattern ( (Lexicographic__Byte__Order.__default.maximum (AsFuelBottom $ly@@499) |s#0@@139|)) )))
(assert  (=> true (forall (($ly@@500 T@U) (|s#0@@140| T@U) ) (!  (=> (and (and (= (type $ly@@500) LayerTypeType) (= (type |s#0@@140|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximum#canCall| |s#0@@140|) (and ($Is |s#0@@140| (TSet (TSeq Tclass.NativeTypes.byte))) (>= (|Set#Card| |s#0@@140|) (LitInt 1))))) (and (and (U_2_bool (MapType0Select |s#0@@140| ($Box (Lexicographic__Byte__Order.__default.maximum $ly@@500 |s#0@@140|)))) (forall ((|y#1@@5| T@U) ) (!  (=> (= (type |y#1@@5|) (SeqType BoxType)) (=> (and ($Is |y#1@@5| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select |s#0@@140| ($Box |y#1@@5|)))) (Lexicographic__Byte__Order.__default.lte |y#1@@5| (Lexicographic__Byte__Order.__default.maximum $ly@@500 |s#0@@140|)))) :qid |totalord.799:18| :skolemid |12322| :pattern ( (Lexicographic__Byte__Order.__default.lte |y#1@@5| (Lexicographic__Byte__Order.__default.maximum $ly@@500 |s#0@@140|))) :pattern ( (MapType0Select |s#0@@140| ($Box |y#1@@5|))) ))) ($Is (Lexicographic__Byte__Order.__default.maximum $ly@@500 |s#0@@140|) (TSeq Tclass.NativeTypes.byte)))) :qid |totalord.796:22| :skolemid |12323| :pattern ( (Lexicographic__Byte__Order.__default.maximum $ly@@500 |s#0@@140|)) ))))
(assert (forall (($ly@@501 T@U) ($Heap@@113 T@U) (|s#0@@141| T@U) ) (!  (=> (and (and (and (= (type $ly@@501) LayerTypeType) (= (type $Heap@@113) (MapType0Type refType MapType1Type))) (= (type |s#0@@141|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@113) ($Is |s#0@@141| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (|Lexicographic__Byte__Order.__default.maximum#requires| $ly@@501 |s#0@@141|) (>= (|Set#Card| |s#0@@141|) (LitInt 1))) (=> (>= (|Set#Card| |s#0@@141|) (LitInt 1)) (|Lexicographic__Byte__Order.__default.maximum#requires| $ly@@501 |s#0@@141|)))) :qid |totalord.796:22| :skolemid |12324| :pattern ( (|Lexicographic__Byte__Order.__default.maximum#requires| $ly@@501 |s#0@@141|) ($IsGoodHeap $Heap@@113)) )))
(assert (forall ((arg0@@334 T@U) ) (! (= (type (|$let#19_a| arg0@@334)) (SeqType BoxType)) :qid |funType:$let#19_a| :pattern ( (|$let#19_a| arg0@@334)) )))
(assert (forall ((s@@49 T@U) ) (!  (=> (and (= (type s@@49) (MapType0Type BoxType boolType)) (|$let#19$canCall| s@@49)) (and ($Is (|$let#19_a| s@@49) (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select s@@49 ($Box (|$let#19_a| s@@49)))))) :qid |totalord.801:5| :skolemid |12325| :pattern ( (|$let#19_a| s@@49)) )))
(assert  (=> true (forall (($ly@@502 T@U) ($Heap@@114 T@U) (|s#0@@142| T@U) ) (!  (=> (and (and (and (= (type $ly@@502) LayerTypeType) (= (type $Heap@@114) (MapType0Type refType MapType1Type))) (= (type |s#0@@142|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximum#canCall| |s#0@@142|) (and (and ($IsGoodHeap $Heap@@114) ($Is |s#0@@142| (TSet (TSeq Tclass.NativeTypes.byte)))) (>= (|Set#Card| |s#0@@142|) (LitInt 1))))) (and (and (|$let#19$canCall| |s#0@@142|) (let ((|s'#4@@2| (|Set#Difference| |s#0@@142| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#19_a| |s#0@@142|)))))) (=> (not (|Set#Equal| |s'#4@@2| (|Set#Empty| BoxType))) (and (|Lexicographic__Byte__Order.__default.maximum#canCall| |s'#4@@2|) (let ((|m'#4@@3| (Lexicographic__Byte__Order.__default.maximum $ly@@502 |s'#4@@2|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |m'#4@@3| (|$let#19_a| |s#0@@142|))))))) (= (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@502) |s#0@@142|) (let ((|a#2@@3| (|$let#19_a| |s#0@@142|))) (let ((|s'#5@@2| (|Set#Difference| |s#0@@142| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#2@@3|))))) (ite (|Set#Equal| |s'#5@@2| (|Set#Empty| BoxType)) |a#2@@3| (let ((|m'#5@@3| (Lexicographic__Byte__Order.__default.maximum $ly@@502 |s'#5@@2|))) (ite (Lexicographic__Byte__Order.__default.lt |m'#5@@3| |a#2@@3|) |a#2@@3| |m'#5@@3|)))))))) :qid |totalord.796:22| :skolemid |12326| :pattern ( (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@502) |s#0@@142|) ($IsGoodHeap $Heap@@114)) ))))
(assert  (=> true (forall (($ly@@503 T@U) ($Heap@@115 T@U) (|s#0@@143| T@U) ) (!  (=> (and (and (and (= (type $ly@@503) LayerTypeType) (= (type $Heap@@115) (MapType0Type refType MapType1Type))) (= (type |s#0@@143|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximum#canCall| (Lit |s#0@@143|)) (and (and ($IsGoodHeap $Heap@@115) ($Is |s#0@@143| (TSet (TSeq Tclass.NativeTypes.byte)))) (>= (|Set#Card| (Lit |s#0@@143|)) (LitInt 1))))) (and (and (|$let#19$canCall| (Lit |s#0@@143|)) (let ((|s'#6@@2| (|Set#Difference| |s#0@@143| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#19_a| (Lit |s#0@@143|))))))) (=> (not (|Set#Equal| |s'#6@@2| (|Set#Empty| BoxType))) (and (|Lexicographic__Byte__Order.__default.maximum#canCall| |s'#6@@2|) (let ((|m'#6@@2| (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@503) |s'#6@@2|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |m'#6@@2| (|$let#19_a| (Lit |s#0@@143|)))))))) (= (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@503) (Lit |s#0@@143|)) (let ((|a#3@@5| (|$let#19_a| (Lit |s#0@@143|)))) (let ((|s'#7@@2| (|Set#Difference| |s#0@@143| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#3@@5|))))) (ite (|Set#Equal| |s'#7@@2| (|Set#Empty| BoxType)) |a#3@@5| (let ((|m'#7@@2| (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@503) |s'#7@@2|))) (ite (Lexicographic__Byte__Order.__default.lt |m'#7@@2| |a#3@@5|) |a#3@@5| |m'#7@@2|)))))))) :qid |totalord.796:22| :weight 3 :skolemid |12327| :pattern ( (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@503) (Lit |s#0@@143|)) ($IsGoodHeap $Heap@@115)) ))))
(assert (forall ((arg0@@335 T@U) (arg1@@199 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.maximumOpt arg0@@335 arg1@@199)) DatatypeTypeType) :qid |funType:Lexicographic__Byte__Order.__default.maximumOpt| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt arg0@@335 arg1@@199)) )))
(assert (forall (($ly@@504 T@U) (|s#0@@144| T@U) ) (!  (=> (and (= (type $ly@@504) LayerTypeType) (= (type |s#0@@144|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@504) |s#0@@144|) (Lexicographic__Byte__Order.__default.maximumOpt $ly@@504 |s#0@@144|))) :qid |totalord.817:22| :skolemid |12328| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@504) |s#0@@144|)) )))
(assert (forall (($ly@@505 T@U) (|s#0@@145| T@U) ) (!  (=> (and (= (type $ly@@505) LayerTypeType) (= (type |s#0@@145|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.maximumOpt $ly@@505 |s#0@@145|) (Lexicographic__Byte__Order.__default.maximumOpt $LZ |s#0@@145|))) :qid |totalord.817:22| :skolemid |12329| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt (AsFuelBottom $ly@@505) |s#0@@145|)) )))
(assert  (=> true (forall (($ly@@506 T@U) (|s#0@@146| T@U) ) (!  (=> (and (and (= (type $ly@@506) LayerTypeType) (= (type |s#0@@146|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximumOpt#canCall| |s#0@@146|) ($Is |s#0@@146| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (and (and (=> (Options.Option.Some_q (Lexicographic__Byte__Order.__default.maximumOpt $ly@@506 |s#0@@146|)) (U_2_bool (MapType0Select |s#0@@146| (Options.Option.value (Lexicographic__Byte__Order.__default.maximumOpt $ly@@506 |s#0@@146|))))) (=> (Options.Option.Some_q (Lexicographic__Byte__Order.__default.maximumOpt $ly@@506 |s#0@@146|)) (forall ((|y#1@@6| T@U) ) (!  (=> (= (type |y#1@@6|) (SeqType BoxType)) (=> (and ($Is |y#1@@6| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select |s#0@@146| ($Box |y#1@@6|)))) (Lexicographic__Byte__Order.__default.lte |y#1@@6| ($Unbox (SeqType BoxType) (Options.Option.value (Lexicographic__Byte__Order.__default.maximumOpt $ly@@506 |s#0@@146|)))))) :qid |totalord.819:30| :skolemid |12330| :pattern ( (Lexicographic__Byte__Order.__default.lte |y#1@@6| ($Unbox (SeqType BoxType) (Options.Option.value (Lexicographic__Byte__Order.__default.maximumOpt $ly@@506 |s#0@@146|))))) :pattern ( (MapType0Select |s#0@@146| ($Box |y#1@@6|))) )))) (=> (Options.Option.None_q (Lexicographic__Byte__Order.__default.maximumOpt $ly@@506 |s#0@@146|)) (|Set#Equal| |s#0@@146| (|Set#Empty| BoxType)))) ($Is (Lexicographic__Byte__Order.__default.maximumOpt $ly@@506 |s#0@@146|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte))))) :qid |totalord.817:22| :skolemid |12331| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt $ly@@506 |s#0@@146|)) ))))
(assert (forall (($ly@@507 T@U) (|s#0@@147| T@U) ) (!  (=> (and (and (= (type $ly@@507) LayerTypeType) (= (type |s#0@@147|) (MapType0Type BoxType boolType))) ($Is |s#0@@147| (TSet (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.maximumOpt#requires| $ly@@507 |s#0@@147|) true) (=> true (|Lexicographic__Byte__Order.__default.maximumOpt#requires| $ly@@507 |s#0@@147|)))) :qid |totalord.817:22| :skolemid |12332| :pattern ( (|Lexicographic__Byte__Order.__default.maximumOpt#requires| $ly@@507 |s#0@@147|)) )))
(assert (= (type StartFuel_Lexicographic_Byte_Order._default.maximum) LayerTypeType))
(assert  (=> true (forall (($ly@@508 T@U) (|s#0@@148| T@U) ) (!  (=> (and (and (= (type $ly@@508) LayerTypeType) (= (type |s#0@@148|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximumOpt#canCall| |s#0@@148|) ($Is |s#0@@148| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (|Set#Equal| |s#0@@148| (|Set#Empty| BoxType))) (|Lexicographic__Byte__Order.__default.maximum#canCall| |s#0@@148|)) (= (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@508) |s#0@@148|) (ite (|Set#Equal| |s#0@@148| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Lexicographic__Byte__Order.__default.maximum StartFuel_Lexicographic_Byte_Order._default.maximum |s#0@@148|))))))) :qid |totalord.817:22| :skolemid |12333| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@508) |s#0@@148|)) ))))
(assert  (=> true (forall (($ly@@509 T@U) (|s#0@@149| T@U) ) (!  (=> (and (and (= (type $ly@@509) LayerTypeType) (= (type |s#0@@149|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximumOpt#canCall| (Lit |s#0@@149|)) ($Is |s#0@@149| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (|Set#Equal| |s#0@@149| (|Set#Empty| BoxType))) (|Lexicographic__Byte__Order.__default.maximum#canCall| (Lit |s#0@@149|))) (= (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@509) (Lit |s#0@@149|)) (ite (|Set#Equal| |s#0@@149| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Lexicographic__Byte__Order.__default.maximum StartFuel_Lexicographic_Byte_Order._default.maximum (Lit |s#0@@149|)))))))) :qid |totalord.817:22| :weight 3 :skolemid |12334| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@509) (Lit |s#0@@149|))) ))))
(assert  (=> true (forall ((|a#0@@136| T@U) (|b#0@@98| T@U) ) (!  (=> (and (and (= (type |a#0@@136|) (SeqType BoxType)) (= (type |b#0@@98|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lt#canCall| |a#0@@136| |b#0@@98|) (and ($Is |a#0@@136| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@98| (TSeq Tclass.NativeTypes.byte))))) true) :qid |totalord.12:15| :skolemid |12335| :pattern ( (Lexicographic__Byte__Order.__default.lt |a#0@@136| |b#0@@98|)) ))))
(assert (forall ((|a#0@@137| T@U) (|b#0@@99| T@U) ) (!  (=> (and (and (= (type |a#0@@137|) (SeqType BoxType)) (= (type |b#0@@99|) (SeqType BoxType))) (and ($Is |a#0@@137| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@99| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.lt#requires| |a#0@@137| |b#0@@99|) true) (=> true (|Lexicographic__Byte__Order.__default.lt#requires| |a#0@@137| |b#0@@99|)))) :qid |totalord.12:15| :skolemid |12336| :pattern ( (|Lexicographic__Byte__Order.__default.lt#requires| |a#0@@137| |b#0@@99|)) )))
(assert  (=> true (forall ((|a#0@@138| T@U) (|b#0@@100| T@U) ) (!  (=> (and (and (= (type |a#0@@138|) (SeqType BoxType)) (= (type |b#0@@100|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lt#canCall| |a#0@@138| |b#0@@100|) (and ($Is |a#0@@138| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@100| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@138| |b#0@@100|) (and (=> (Lexicographic__Byte__Order.__default.lt |a#0@@138| |b#0@@100|) (and (Lexicographic__Byte__Order.__default.lte |a#0@@138| |b#0@@100|) (not (|Seq#Equal| |a#0@@138| |b#0@@100|)))) (=> (and (Lexicographic__Byte__Order.__default.lte |a#0@@138| |b#0@@100|) (not (|Seq#Equal| |a#0@@138| |b#0@@100|))) (Lexicographic__Byte__Order.__default.lt |a#0@@138| |b#0@@100|))))) :qid |totalord.12:15| :skolemid |12337| :pattern ( (Lexicographic__Byte__Order.__default.lt |a#0@@138| |b#0@@100|)) ))))
(assert  (=> true (forall ((|a#0@@139| T@U) (|b#0@@101| T@U) ) (!  (=> (and (and (= (type |a#0@@139|) (SeqType BoxType)) (= (type |b#0@@101|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |a#0@@139|) (Lit |b#0@@101|)) (and ($Is |a#0@@139| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@101| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |a#0@@139|) (Lit |b#0@@101|)) (and (=> (Lexicographic__Byte__Order.__default.lt (Lit |a#0@@139|) (Lit |b#0@@101|)) (and (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@139|) (Lit |b#0@@101|)) (not (|Seq#Equal| |a#0@@139| |b#0@@101|)))) (=> (and (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@139|) (Lit |b#0@@101|)) (not (|Seq#Equal| |a#0@@139| |b#0@@101|))) (Lexicographic__Byte__Order.__default.lt (Lit |a#0@@139|) (Lit |b#0@@101|)))))) :qid |totalord.12:15| :weight 3 :skolemid |12338| :pattern ( (Lexicographic__Byte__Order.__default.lt (Lit |a#0@@139|) (Lit |b#0@@101|))) ))))
(assert (forall ((arg0@@336 T@U) (arg1@@200 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.Min arg0@@336 arg1@@200)) (SeqType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.Min| :pattern ( (Lexicographic__Byte__Order.__default.Min arg0@@336 arg1@@200)) )))
(assert  (=> true (forall ((|a#0@@140| T@U) (|b#0@@102| T@U) ) (!  (=> (and (and (= (type |a#0@@140|) (SeqType BoxType)) (= (type |b#0@@102|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Min#canCall| |a#0@@140| |b#0@@102|) (and ($Is |a#0@@140| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@102| (TSeq Tclass.NativeTypes.byte))))) ($Is (Lexicographic__Byte__Order.__default.Min |a#0@@140| |b#0@@102|) (TSeq Tclass.NativeTypes.byte))) :qid |totalord.24:16| :skolemid |12339| :pattern ( (Lexicographic__Byte__Order.__default.Min |a#0@@140| |b#0@@102|)) ))))
(assert (forall ((|a#0@@141| T@U) (|b#0@@103| T@U) ) (!  (=> (and (and (= (type |a#0@@141|) (SeqType BoxType)) (= (type |b#0@@103|) (SeqType BoxType))) (and ($Is |a#0@@141| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@103| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.Min#requires| |a#0@@141| |b#0@@103|) true) (=> true (|Lexicographic__Byte__Order.__default.Min#requires| |a#0@@141| |b#0@@103|)))) :qid |totalord.24:16| :skolemid |12340| :pattern ( (|Lexicographic__Byte__Order.__default.Min#requires| |a#0@@141| |b#0@@103|)) )))
(assert  (=> true (forall ((|a#0@@142| T@U) (|b#0@@104| T@U) ) (!  (=> (and (and (= (type |a#0@@142|) (SeqType BoxType)) (= (type |b#0@@104|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Min#canCall| |a#0@@142| |b#0@@104|) (and ($Is |a#0@@142| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@104| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@142| |b#0@@104|) (= (Lexicographic__Byte__Order.__default.Min |a#0@@142| |b#0@@104|) (ite (Lexicographic__Byte__Order.__default.lte |a#0@@142| |b#0@@104|) |a#0@@142| |b#0@@104|)))) :qid |totalord.24:16| :skolemid |12341| :pattern ( (Lexicographic__Byte__Order.__default.Min |a#0@@142| |b#0@@104|)) ))))
(assert  (=> true (forall ((|a#0@@143| T@U) (|b#0@@105| T@U) ) (!  (=> (and (and (= (type |a#0@@143|) (SeqType BoxType)) (= (type |b#0@@105|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Min#canCall| (Lit |a#0@@143|) (Lit |b#0@@105|)) (and ($Is |a#0@@143| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@105| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |a#0@@143|) (Lit |b#0@@105|)) (= (Lexicographic__Byte__Order.__default.Min (Lit |a#0@@143|) (Lit |b#0@@105|)) (ite (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@143|) (Lit |b#0@@105|)) |a#0@@143| |b#0@@105|)))) :qid |totalord.24:16| :weight 3 :skolemid |12342| :pattern ( (Lexicographic__Byte__Order.__default.Min (Lit |a#0@@143|) (Lit |b#0@@105|))) ))))
(assert (forall ((arg0@@337 T@U) (arg1@@201 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.Max arg0@@337 arg1@@201)) (SeqType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.Max| :pattern ( (Lexicographic__Byte__Order.__default.Max arg0@@337 arg1@@201)) )))
(assert  (=> true (forall ((|a#0@@144| T@U) (|b#0@@106| T@U) ) (!  (=> (and (and (= (type |a#0@@144|) (SeqType BoxType)) (= (type |b#0@@106|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Max#canCall| |a#0@@144| |b#0@@106|) (and ($Is |a#0@@144| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@106| (TSeq Tclass.NativeTypes.byte))))) ($Is (Lexicographic__Byte__Order.__default.Max |a#0@@144| |b#0@@106|) (TSeq Tclass.NativeTypes.byte))) :qid |totalord.29:16| :skolemid |12343| :pattern ( (Lexicographic__Byte__Order.__default.Max |a#0@@144| |b#0@@106|)) ))))
(assert (forall ((|a#0@@145| T@U) (|b#0@@107| T@U) ) (!  (=> (and (and (= (type |a#0@@145|) (SeqType BoxType)) (= (type |b#0@@107|) (SeqType BoxType))) (and ($Is |a#0@@145| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@107| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.Max#requires| |a#0@@145| |b#0@@107|) true) (=> true (|Lexicographic__Byte__Order.__default.Max#requires| |a#0@@145| |b#0@@107|)))) :qid |totalord.29:16| :skolemid |12344| :pattern ( (|Lexicographic__Byte__Order.__default.Max#requires| |a#0@@145| |b#0@@107|)) )))
(assert  (=> true (forall ((|a#0@@146| T@U) (|b#0@@108| T@U) ) (!  (=> (and (and (= (type |a#0@@146|) (SeqType BoxType)) (= (type |b#0@@108|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Max#canCall| |a#0@@146| |b#0@@108|) (and ($Is |a#0@@146| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@108| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@146| |b#0@@108|) (= (Lexicographic__Byte__Order.__default.Max |a#0@@146| |b#0@@108|) (ite (Lexicographic__Byte__Order.__default.lte |a#0@@146| |b#0@@108|) |b#0@@108| |a#0@@146|)))) :qid |totalord.29:16| :skolemid |12345| :pattern ( (Lexicographic__Byte__Order.__default.Max |a#0@@146| |b#0@@108|)) ))))
(assert  (=> true (forall ((|a#0@@147| T@U) (|b#0@@109| T@U) ) (!  (=> (and (and (= (type |a#0@@147|) (SeqType BoxType)) (= (type |b#0@@109|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Max#canCall| (Lit |a#0@@147|) (Lit |b#0@@109|)) (and ($Is |a#0@@147| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@109| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |a#0@@147|) (Lit |b#0@@109|)) (= (Lexicographic__Byte__Order.__default.Max (Lit |a#0@@147|) (Lit |b#0@@109|)) (ite (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@147|) (Lit |b#0@@109|)) |b#0@@109| |a#0@@147|)))) :qid |totalord.29:16| :weight 3 :skolemid |12346| :pattern ( (Lexicographic__Byte__Order.__default.Max (Lit |a#0@@147|) (Lit |b#0@@109|))) ))))
(assert (forall (($ly@@510 T@U) (|run#0@@132| T@U) ) (!  (=> (and (= (type $ly@@510) LayerTypeType) (= (type |run#0@@132|) (SeqType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@510) |run#0@@132|) (Lexicographic__Byte__Order.__default.IsSorted $ly@@510 |run#0@@132|)) (=> (Lexicographic__Byte__Order.__default.IsSorted $ly@@510 |run#0@@132|) (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@510) |run#0@@132|)))) :qid |totalord.41:23| :skolemid |12347| :pattern ( (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@510) |run#0@@132|)) )))
(assert (forall (($ly@@511 T@U) (|run#0@@133| T@U) ) (!  (=> (and (= (type $ly@@511) LayerTypeType) (= (type |run#0@@133|) (SeqType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.IsSorted $ly@@511 |run#0@@133|) (Lexicographic__Byte__Order.__default.IsSorted $LZ |run#0@@133|)) (=> (Lexicographic__Byte__Order.__default.IsSorted $LZ |run#0@@133|) (Lexicographic__Byte__Order.__default.IsSorted $ly@@511 |run#0@@133|)))) :qid |totalord.41:23| :skolemid |12348| :pattern ( (Lexicographic__Byte__Order.__default.IsSorted (AsFuelBottom $ly@@511) |run#0@@133|)) )))
(assert  (=> true (forall (($ly@@512 T@U) (|run#0@@134| T@U) ) (!  (=> (and (and (= (type $ly@@512) LayerTypeType) (= (type |run#0@@134|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsSorted#canCall| |run#0@@134|) ($Is |run#0@@134| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (=> (= (|Seq#Length| |run#0@@134|) (LitInt 0)) (Lexicographic__Byte__Order.__default.IsSorted $ly@@512 |run#0@@134|)) (=> (= (|Seq#Length| |run#0@@134|) (LitInt 1)) (Lexicographic__Byte__Order.__default.IsSorted $ly@@512 |run#0@@134|)))) :qid |totalord.41:23| :skolemid |12349| :pattern ( (Lexicographic__Byte__Order.__default.IsSorted $ly@@512 |run#0@@134|)) ))))
(assert (forall (($ly@@513 T@U) (|run#0@@135| T@U) ) (!  (=> (and (and (= (type $ly@@513) LayerTypeType) (= (type |run#0@@135|) (SeqType BoxType))) ($Is |run#0@@135| (TSeq (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.IsSorted#requires| $ly@@513 |run#0@@135|) true) (=> true (|Lexicographic__Byte__Order.__default.IsSorted#requires| $ly@@513 |run#0@@135|)))) :qid |totalord.41:23| :skolemid |12350| :pattern ( (|Lexicographic__Byte__Order.__default.IsSorted#requires| $ly@@513 |run#0@@135|)) )))
(assert  (=> true (forall (($ly@@514 T@U) (|run#0@@136| T@U) ) (!  (=> (and (and (= (type $ly@@514) LayerTypeType) (= (type |run#0@@136|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsSorted#canCall| |run#0@@136|) ($Is |run#0@@136| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#2@@25| Int) (|j#2@@10| Int) ) (!  (=> (< |j#2@@10| (|Seq#Length| |run#0@@136|)) (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |i#2@@25|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |j#2@@10|)))) :qid |totalord.45:12| :skolemid |12351| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |j#2@@10|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |i#2@@25|))) )) (and (=> (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@514) |run#0@@136|) (forall ((|i#2@@26| Int) (|j#2@@11| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#2@@26|) (<= |i#2@@26| |j#2@@11|)) (< |j#2@@11| (|Seq#Length| |run#0@@136|))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |i#2@@26|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |j#2@@11|))))) :qid |totalord.45:12| :skolemid |12352| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |j#2@@11|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |i#2@@26|))) ))) (=> (forall ((|i#2@@27| Int) (|j#2@@12| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#2@@27|) (<= |i#2@@27| |j#2@@12|)) (< |j#2@@12| (|Seq#Length| |run#0@@136|))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |i#2@@27|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |j#2@@12|))))) :qid |totalord.45:12| :skolemid |12352| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |j#2@@12|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |i#2@@27|))) )) (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@514) |run#0@@136|))))) :qid |totalord.41:23| :skolemid |12353| :pattern ( (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@514) |run#0@@136|)) ))))
(assert  (=> true (forall (($ly@@515 T@U) (|run#0@@137| T@U) ) (!  (=> (and (and (= (type $ly@@515) LayerTypeType) (= (type |run#0@@137|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsSorted#canCall| (Lit |run#0@@137|)) ($Is |run#0@@137| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#3@@27| Int) (|j#3@@7| Int) ) (!  (=> (< |j#3@@7| (|Seq#Length| (Lit |run#0@@137|))) (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@137|) |i#3@@27|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@137|) |j#3@@7|)))) :qid |totalord.45:12| :skolemid |12354| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@137| |j#3@@7|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@137| |i#3@@27|))) )) (and (=> (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@515) (Lit |run#0@@137|)) (forall ((|i#3@@28| Int) (|j#3@@8| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#3@@28|) (<= |i#3@@28| |j#3@@8|)) (< |j#3@@8| (|Seq#Length| (Lit |run#0@@137|)))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@137|) |i#3@@28|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@137|) |j#3@@8|))))) :qid |totalord.45:12| :skolemid |12355| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@137| |j#3@@8|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@137| |i#3@@28|))) ))) (=> (forall ((|i#3@@29| Int) (|j#3@@9| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#3@@29|) (<= |i#3@@29| |j#3@@9|)) (< |j#3@@9| (|Seq#Length| (Lit |run#0@@137|)))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@137|) |i#3@@29|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@137|) |j#3@@9|))))) :qid |totalord.45:12| :skolemid |12355| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@137| |j#3@@9|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@137| |i#3@@29|))) )) (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@515) (Lit |run#0@@137|)))))) :qid |totalord.41:23| :weight 3 :skolemid |12356| :pattern ( (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@515) (Lit |run#0@@137|))) ))))
(assert  (=> true (forall ((|run#0@@138| T@U) ) (!  (=> (and (= (type |run#0@@138|) (SeqType BoxType)) (or (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@138|) ($Is |run#0@@138| (TSeq (TSeq Tclass.NativeTypes.byte))))) true) :qid |totalord.48:38| :skolemid |12357| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@138|)) ))))
(assert (forall ((|run#0@@139| T@U) ) (!  (=> (and (= (type |run#0@@139|) (SeqType BoxType)) ($Is |run#0@@139| (TSeq (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@139|) true) (=> true (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@139|)))) :qid |totalord.48:38| :skolemid |12358| :pattern ( (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@139|)) )))
(assert  (=> true (forall ((|run#0@@140| T@U) ) (!  (=> (and (= (type |run#0@@140|) (SeqType BoxType)) (or (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@140|) ($Is |run#0@@140| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#2@@28| Int) (|j#2@@13| Int) ) (!  (=> (< |j#2@@13| (|Seq#Length| |run#0@@140|)) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#2@@28|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |j#2@@13|)))) :qid |totalord.50:12| :skolemid |12359| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |j#2@@13|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#2@@28|))) )) (and (=> (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@140|) (forall ((|i#2@@29| Int) (|j#2@@14| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#2@@29|) (< |i#2@@29| |j#2@@14|)) (< |j#2@@14| (|Seq#Length| |run#0@@140|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#2@@29|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |j#2@@14|))))) :qid |totalord.50:12| :skolemid |12360| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |j#2@@14|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#2@@29|))) ))) (=> (forall ((|i#2@@30| Int) (|j#2@@15| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#2@@30|) (< |i#2@@30| |j#2@@15|)) (< |j#2@@15| (|Seq#Length| |run#0@@140|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#2@@30|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |j#2@@15|))))) :qid |totalord.50:12| :skolemid |12360| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |j#2@@15|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#2@@30|))) )) (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@140|))))) :qid |totalord.48:38| :skolemid |12361| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@140|)) ))))
(assert  (=> true (forall ((|run#0@@141| T@U) ) (!  (=> (and (= (type |run#0@@141|) (SeqType BoxType)) (or (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@141|)) ($Is |run#0@@141| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#3@@30| Int) (|j#3@@10| Int) ) (!  (=> (< |j#3@@10| (|Seq#Length| (Lit |run#0@@141|))) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@141|) |i#3@@30|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@141|) |j#3@@10|)))) :qid |totalord.50:12| :skolemid |12362| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@141| |j#3@@10|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@141| |i#3@@30|))) )) (and (=> (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@141|)) (forall ((|i#3@@31| Int) (|j#3@@11| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#3@@31|) (< |i#3@@31| |j#3@@11|)) (< |j#3@@11| (|Seq#Length| (Lit |run#0@@141|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@141|) |i#3@@31|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@141|) |j#3@@11|))))) :qid |totalord.50:12| :skolemid |12363| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@141| |j#3@@11|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@141| |i#3@@31|))) ))) (=> (forall ((|i#3@@32| Int) (|j#3@@12| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#3@@32|) (< |i#3@@32| |j#3@@12|)) (< |j#3@@12| (|Seq#Length| (Lit |run#0@@141|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@141|) |i#3@@32|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@141|) |j#3@@12|))))) :qid |totalord.50:12| :skolemid |12363| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@141| |j#3@@12|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@141| |i#3@@32|))) )) (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@141|)))))) :qid |totalord.48:38| :weight 3 :skolemid |12364| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@141|))) ))))
(assert (forall (($ly@@516 T@U) (|run#0@@142| T@U) ) (!  (=> (and (= (type $ly@@516) LayerTypeType) (= (type |run#0@@142|) (SeqType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@516) |run#0@@142|) (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@516 |run#0@@142|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@516 |run#0@@142|) (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@516) |run#0@@142|)))) :qid |totalord.64:23| :skolemid |12365| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@516) |run#0@@142|)) )))
(assert (forall (($ly@@517 T@U) (|run#0@@143| T@U) ) (!  (=> (and (= (type $ly@@517) LayerTypeType) (= (type |run#0@@143|) (SeqType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@517 |run#0@@143|) (Lexicographic__Byte__Order.__default.IsStrictlySorted $LZ |run#0@@143|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted $LZ |run#0@@143|) (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@517 |run#0@@143|)))) :qid |totalord.64:23| :skolemid |12366| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySorted (AsFuelBottom $ly@@517) |run#0@@143|)) )))
(assert  (=> true (forall (($ly@@518 T@U) (|run#0@@144| T@U) ) (!  (=> (and (and (= (type $ly@@518) LayerTypeType) (= (type |run#0@@144|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| |run#0@@144|) ($Is |run#0@@144| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (and (=> (= (|Seq#Length| |run#0@@144|) (LitInt 0)) (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@518 |run#0@@144|)) (=> (= (|Seq#Length| |run#0@@144|) (LitInt 1)) (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@518 |run#0@@144|))) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@518 |run#0@@144|) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@144|)))) :qid |totalord.64:23| :skolemid |12367| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@518 |run#0@@144|)) ))))
(assert (forall (($ly@@519 T@U) (|run#0@@145| T@U) ) (!  (=> (and (and (= (type $ly@@519) LayerTypeType) (= (type |run#0@@145|) (SeqType BoxType))) ($Is |run#0@@145| (TSeq (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.IsStrictlySorted#requires| $ly@@519 |run#0@@145|) true) (=> true (|Lexicographic__Byte__Order.__default.IsStrictlySorted#requires| $ly@@519 |run#0@@145|)))) :qid |totalord.64:23| :skolemid |12368| :pattern ( (|Lexicographic__Byte__Order.__default.IsStrictlySorted#requires| $ly@@519 |run#0@@145|)) )))
(assert  (=> true (forall (($ly@@520 T@U) (|run#0@@146| T@U) ) (!  (=> (and (and (= (type $ly@@520) LayerTypeType) (= (type |run#0@@146|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| |run#0@@146|) ($Is |run#0@@146| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@146|) (and (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@520) |run#0@@146|) (let ((|b#2@@8| (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@146|))) (ite |b#2@@8| |b#2@@8| |b#2@@8|))) (=> (let ((|b#2@@9| (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@146|))) (ite |b#2@@9| |b#2@@9| |b#2@@9|)) (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@520) |run#0@@146|))))) :qid |totalord.64:23| :skolemid |12369| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@520) |run#0@@146|)) ))))
(assert  (=> true (forall (($ly@@521 T@U) (|run#0@@147| T@U) ) (!  (=> (and (and (= (type $ly@@521) LayerTypeType) (= (type |run#0@@147|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (Lit |run#0@@147|)) ($Is |run#0@@147| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@147|)) (and (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@521) (Lit |run#0@@147|)) (let ((|b#3@@10| (U_2_bool (Lit (bool_2_U (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@147|))))))) (ite |b#3@@10| |b#3@@10| |b#3@@10|))) (=> (let ((|b#3@@11| (U_2_bool (Lit (bool_2_U (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@147|))))))) (ite |b#3@@11| |b#3@@11| |b#3@@11|)) (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@521) (Lit |run#0@@147|)))))) :qid |totalord.64:23| :weight 3 :skolemid |12370| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@521) (Lit |run#0@@147|))) ))))
(assert (= (type Tclass.Lexicographic__Byte__Order__Impl.__default) TyType))
(assert (= (Tag Tclass.Lexicographic__Byte__Order__Impl.__default) Tagclass.Lexicographic__Byte__Order__Impl.__default))
(assert (forall ((bx@@105 T@U) ) (!  (=> (and (= (type bx@@105) BoxType) ($IsBox bx@@105 Tclass.Lexicographic__Byte__Order__Impl.__default)) (and (= ($Box ($Unbox refType bx@@105)) bx@@105) ($Is ($Unbox refType bx@@105) Tclass.Lexicographic__Byte__Order__Impl.__default))) :qid |unknown.0:0| :skolemid |12371| :pattern ( ($IsBox bx@@105 Tclass.Lexicographic__Byte__Order__Impl.__default)) )))
(assert (forall (($o@@56 T@U) ) (!  (=> (= (type $o@@56) refType) (and (=> ($Is $o@@56 Tclass.Lexicographic__Byte__Order__Impl.__default) (or (= $o@@56 null) (= (dtype $o@@56) Tclass.Lexicographic__Byte__Order__Impl.__default))) (=> (or (= $o@@56 null) (= (dtype $o@@56) Tclass.Lexicographic__Byte__Order__Impl.__default)) ($Is $o@@56 Tclass.Lexicographic__Byte__Order__Impl.__default)))) :qid |unknown.0:0| :skolemid |12372| :pattern ( ($Is $o@@56 Tclass.Lexicographic__Byte__Order__Impl.__default)) )))
(assert (forall (($o@@57 T@U) ($h@@67 T@U) ) (!  (=> (and (= (type $o@@57) refType) (= (type $h@@67) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@57 Tclass.Lexicographic__Byte__Order__Impl.__default $h@@67) (or (= $o@@57 null) (U_2_bool (MapType1Select (MapType0Select $h@@67 $o@@57) alloc)))) (=> (or (= $o@@57 null) (U_2_bool (MapType1Select (MapType0Select $h@@67 $o@@57) alloc))) ($IsAlloc $o@@57 Tclass.Lexicographic__Byte__Order__Impl.__default $h@@67)))) :qid |unknown.0:0| :skolemid |12373| :pattern ( ($IsAlloc $o@@57 Tclass.Lexicographic__Byte__Order__Impl.__default $h@@67)) )))
(assert (= (type Tclass.Integer__Order.__default) TyType))
(assert (= (Tag Tclass.Integer__Order.__default) Tagclass.Integer__Order.__default))
(assert (forall ((bx@@106 T@U) ) (!  (=> (and (= (type bx@@106) BoxType) ($IsBox bx@@106 Tclass.Integer__Order.__default)) (and (= ($Box ($Unbox refType bx@@106)) bx@@106) ($Is ($Unbox refType bx@@106) Tclass.Integer__Order.__default))) :qid |unknown.0:0| :skolemid |12376| :pattern ( ($IsBox bx@@106 Tclass.Integer__Order.__default)) )))
(assert (forall (($o@@58 T@U) ) (!  (=> (= (type $o@@58) refType) (and (=> ($Is $o@@58 Tclass.Integer__Order.__default) (or (= $o@@58 null) (= (dtype $o@@58) Tclass.Integer__Order.__default))) (=> (or (= $o@@58 null) (= (dtype $o@@58) Tclass.Integer__Order.__default)) ($Is $o@@58 Tclass.Integer__Order.__default)))) :qid |unknown.0:0| :skolemid |12377| :pattern ( ($Is $o@@58 Tclass.Integer__Order.__default)) )))
(assert (forall (($o@@59 T@U) ($h@@68 T@U) ) (!  (=> (and (= (type $o@@59) refType) (= (type $h@@68) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@59 Tclass.Integer__Order.__default $h@@68) (or (= $o@@59 null) (U_2_bool (MapType1Select (MapType0Select $h@@68 $o@@59) alloc)))) (=> (or (= $o@@59 null) (U_2_bool (MapType1Select (MapType0Select $h@@68 $o@@59) alloc))) ($IsAlloc $o@@59 Tclass.Integer__Order.__default $h@@68)))) :qid |unknown.0:0| :skolemid |12378| :pattern ( ($IsAlloc $o@@59 Tclass.Integer__Order.__default $h@@68)) )))
(assert  (=> true (=> true true)))
(assert  (=> |Integer__Order.__default.SomeElement#requires| true))
(assert  (=> true |Integer__Order.__default.SomeElement#requires|))
(assert  (=> true (=> true (= Integer__Order.__default.SomeElement (LitInt 0)))))
(assert  (=> true (=> true (= Integer__Order.__default.SomeElement (LitInt 0)))))
(assert (= (type StartFuel_Integer_Order._default.ltedef) LayerTypeType))
(assert  (=> true (forall ((|a#0@@148| Int) (|b#0@@110| Int) ) (!  (=> true (and (and (and (and (and (and (and (=> (Integer__Order.__default.lte |a#0@@148| |b#0@@110|) (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#0@@148| |b#0@@110|)) (=> (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#0@@148| |b#0@@110|) (Integer__Order.__default.lte |a#0@@148| |b#0@@110|))) (or (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#0@@148| |b#0@@110|) (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |b#0@@110| |a#0@@148|))) (forall ((|a#3@@6| Int) (|b#3@@12| Int) (|c#2@@1| Int) ) (!  (=> true (=> (and (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#3@@6| |b#3@@12|) (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |b#3@@12| |c#2@@1|)) (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#3@@6| |c#2@@1|))) :qid |totalord.20:18| :skolemid |12379| :pattern ( (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#3@@6| |c#2@@1|) (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |b#3@@12| |c#2@@1|)) :pattern ( (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |b#3@@12| |c#2@@1|) (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#3@@6| |b#3@@12|)) ))) (and (=> (Integer__Order.__default.lte |a#0@@148| |b#0@@110|) (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#0@@148| |b#0@@110|)) (=> (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#0@@148| |b#0@@110|) (Integer__Order.__default.lte |a#0@@148| |b#0@@110|)))) (or (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#0@@148| |b#0@@110|) (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |b#0@@110| |a#0@@148|))) (=> (and (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#0@@148| |b#0@@110|) (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |b#0@@110| |a#0@@148|)) (= |a#0@@148| |b#0@@110|))) (forall ((|a#4@@1| Int) (|b#4@@1| Int) (|c#3@@1| Int) ) (!  (=> true (=> (and (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#4@@1| |b#4@@1|) (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |b#4@@1| |c#3@@1|)) (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#4@@1| |c#3@@1|))) :qid |totalord.188:18| :skolemid |12380| :pattern ( (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#4@@1| |c#3@@1|) (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |b#4@@1| |c#3@@1|)) :pattern ( (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |b#4@@1| |c#3@@1|) (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#4@@1| |b#4@@1|)) )))) :qid |totalord.17:16| :skolemid |12381| :pattern ( (Integer__Order.__default.lte |a#0@@148| |b#0@@110|)) ))))
(assert (forall ((|a#0@@149| Int) (|b#0@@111| Int) ) (!  (and (=> (|Integer__Order.__default.lte#requires| |a#0@@149| |b#0@@111|) true) (=> true (|Integer__Order.__default.lte#requires| |a#0@@149| |b#0@@111|))) :qid |totalord.17:16| :skolemid |12382| :pattern ( (|Integer__Order.__default.lte#requires| |a#0@@149| |b#0@@111|)) )))
(assert  (and (= (type MoreFuel_Integer_Order._default.ltedef2) LayerTypeType) (= (type StartFuelAssert_Integer_Order._default.ltedef) LayerTypeType)))
(assert  (=> true (forall ((|a#0@@150| Int) (|b#0@@112| Int) ) (!  (=> true (and (|Integer__Order.__default.ltedef#canCall| |a#0@@150| |b#0@@112|) (and (and (and (= StartFuel_Integer_Order._default.ltedef ($LS MoreFuel_Integer_Order._default.ltedef2)) (= StartFuelAssert_Integer_Order._default.ltedef ($LS ($LS MoreFuel_Integer_Order._default.ltedef2)))) (= (AsFuelBottom MoreFuel_Integer_Order._default.ltedef2) MoreFuel_Integer_Order._default.ltedef2)) (and (=> (Integer__Order.__default.lte |a#0@@150| |b#0@@112|) (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#0@@150| |b#0@@112|)) (=> (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#0@@150| |b#0@@112|) (Integer__Order.__default.lte |a#0@@150| |b#0@@112|)))))) :qid |totalord.17:16| :skolemid |12383| :pattern ( (Integer__Order.__default.lte |a#0@@150| |b#0@@112|)) ))))
(assert (= (type MoreFuel_Integer_Order._default.ltedef3) LayerTypeType))
(assert  (=> true (forall ((|a#0@@151| Int) (|b#0@@113| Int) ) (!  (=> true (and (|Integer__Order.__default.ltedef#canCall| (LitInt |a#0@@151|) (LitInt |b#0@@113|)) (and (and (and (= StartFuel_Integer_Order._default.ltedef ($LS MoreFuel_Integer_Order._default.ltedef3)) (= StartFuelAssert_Integer_Order._default.ltedef ($LS ($LS MoreFuel_Integer_Order._default.ltedef3)))) (= (AsFuelBottom MoreFuel_Integer_Order._default.ltedef3) MoreFuel_Integer_Order._default.ltedef3)) (and (=> (Integer__Order.__default.lte (LitInt |a#0@@151|) (LitInt |b#0@@113|)) (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef (LitInt |a#0@@151|) (LitInt |b#0@@113|))) (=> (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef (LitInt |a#0@@151|) (LitInt |b#0@@113|)) (Integer__Order.__default.lte (LitInt |a#0@@151|) (LitInt |b#0@@113|))))))) :qid |totalord.17:16| :weight 3 :skolemid |12384| :pattern ( (Integer__Order.__default.lte (LitInt |a#0@@151|) (LitInt |b#0@@113|))) ))))
(assert (forall (($ly@@522 T@U) (|a#0@@152| Int) (|b#0@@114| Int) ) (!  (=> (= (type $ly@@522) LayerTypeType) (and (=> (Integer__Order.__default.ltedef ($LS $ly@@522) |a#0@@152| |b#0@@114|) (Integer__Order.__default.ltedef $ly@@522 |a#0@@152| |b#0@@114|)) (=> (Integer__Order.__default.ltedef $ly@@522 |a#0@@152| |b#0@@114|) (Integer__Order.__default.ltedef ($LS $ly@@522) |a#0@@152| |b#0@@114|)))) :qid |totalord.856:23| :skolemid |12385| :pattern ( (Integer__Order.__default.ltedef ($LS $ly@@522) |a#0@@152| |b#0@@114|)) )))
(assert (forall (($ly@@523 T@U) (|a#0@@153| Int) (|b#0@@115| Int) ) (!  (=> (= (type $ly@@523) LayerTypeType) (and (=> (Integer__Order.__default.ltedef $ly@@523 |a#0@@153| |b#0@@115|) (Integer__Order.__default.ltedef $LZ |a#0@@153| |b#0@@115|)) (=> (Integer__Order.__default.ltedef $LZ |a#0@@153| |b#0@@115|) (Integer__Order.__default.ltedef $ly@@523 |a#0@@153| |b#0@@115|)))) :qid |totalord.856:23| :skolemid |12386| :pattern ( (Integer__Order.__default.ltedef (AsFuelBottom $ly@@523) |a#0@@153| |b#0@@115|)) )))
(assert  (=> true (forall (($ly@@524 T@U) (|a#0@@154| Int) (|b#0@@116| Int) ) (!  (=> (and (= (type $ly@@524) LayerTypeType) true) true) :qid |totalord.856:23| :skolemid |12387| :pattern ( (Integer__Order.__default.ltedef $ly@@524 |a#0@@154| |b#0@@116|)) ))))
(assert (forall (($ly@@525 T@U) (|a#0@@155| Int) (|b#0@@117| Int) ) (!  (=> (= (type $ly@@525) LayerTypeType) (and (=> (|Integer__Order.__default.ltedef#requires| $ly@@525 |a#0@@155| |b#0@@117|) true) (=> true (|Integer__Order.__default.ltedef#requires| $ly@@525 |a#0@@155| |b#0@@117|)))) :qid |totalord.856:23| :skolemid |12388| :pattern ( (|Integer__Order.__default.ltedef#requires| $ly@@525 |a#0@@155| |b#0@@117|)) )))
(assert  (=> true (forall (($ly@@526 T@U) (|a#0@@156| Int) (|b#0@@118| Int) ) (!  (=> (and (= (type $ly@@526) LayerTypeType) true) (and (=> (Integer__Order.__default.ltedef ($LS $ly@@526) |a#0@@156| |b#0@@118|) (<= |a#0@@156| |b#0@@118|)) (=> (<= |a#0@@156| |b#0@@118|) (Integer__Order.__default.ltedef ($LS $ly@@526) |a#0@@156| |b#0@@118|)))) :qid |totalord.856:23| :skolemid |12389| :pattern ( (Integer__Order.__default.ltedef ($LS $ly@@526) |a#0@@156| |b#0@@118|)) ))))
(assert  (=> true (forall (($ly@@527 T@U) (|a#0@@157| Int) (|b#0@@119| Int) ) (!  (=> (and (= (type $ly@@527) LayerTypeType) true) (and (=> (Integer__Order.__default.ltedef ($LS $ly@@527) (LitInt |a#0@@157|) (LitInt |b#0@@119|)) (<= (LitInt |a#0@@157|) (LitInt |b#0@@119|))) (=> (<= (LitInt |a#0@@157|) (LitInt |b#0@@119|)) (Integer__Order.__default.ltedef ($LS $ly@@527) (LitInt |a#0@@157|) (LitInt |b#0@@119|))))) :qid |totalord.856:23| :weight 3 :skolemid |12390| :pattern ( (Integer__Order.__default.ltedef ($LS $ly@@527) (LitInt |a#0@@157|) (LitInt |b#0@@119|))) ))))
(assert (forall (($ly@@528 T@U) (|run#0@@148| T@U) (|needle#0@@61| Int) ) (!  (=> (and (= (type $ly@@528) LayerTypeType) (= (type |run#0@@148|) (SeqType BoxType))) (= (Integer__Order.__default.LargestLte ($LS $ly@@528) |run#0@@148| |needle#0@@61|) (Integer__Order.__default.LargestLte $ly@@528 |run#0@@148| |needle#0@@61|))) :qid |totalord.253:12| :skolemid |12391| :pattern ( (Integer__Order.__default.LargestLte ($LS $ly@@528) |run#0@@148| |needle#0@@61|)) )))
(assert (forall (($ly@@529 T@U) (|run#0@@149| T@U) (|needle#0@@62| Int) ) (!  (=> (and (= (type $ly@@529) LayerTypeType) (= (type |run#0@@149|) (SeqType BoxType))) (= (Integer__Order.__default.LargestLte $ly@@529 |run#0@@149| |needle#0@@62|) (Integer__Order.__default.LargestLte $LZ |run#0@@149| |needle#0@@62|))) :qid |totalord.253:12| :skolemid |12392| :pattern ( (Integer__Order.__default.LargestLte (AsFuelBottom $ly@@529) |run#0@@149| |needle#0@@62|)) )))
(assert (= (type StartFuel_Integer_Order._default.IsSorted) LayerTypeType))
(assert  (=> true (forall (($ly@@530 T@U) (|run#0@@150| T@U) (|needle#0@@63| Int) ) (!  (=> (and (and (= (type $ly@@530) LayerTypeType) (= (type |run#0@@150|) (SeqType BoxType))) (or (|Integer__Order.__default.LargestLte#canCall| |run#0@@150| |needle#0@@63|) (and ($Is |run#0@@150| (TSeq TInt)) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@150|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Integer__Order.__default.LargestLte $ly@@530 |run#0@@150| |needle#0@@63|)) (< (Integer__Order.__default.LargestLte $ly@@530 |run#0@@150| |needle#0@@63|) (|Seq#Length| |run#0@@150|))) (forall ((|i#2@@31| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@31|) (<= |i#2@@31| (Integer__Order.__default.LargestLte $ly@@530 |run#0@@150| |needle#0@@63|))) (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@150| |i#2@@31|))) |needle#0@@63|))) :qid |totalord.256:20| :skolemid |12393| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@150| |i#2@@31|))) ))) (forall ((|i#3@@33| Int) ) (!  (=> true (=> (and (< (Integer__Order.__default.LargestLte $ly@@530 |run#0@@150| |needle#0@@63|) |i#3@@33|) (< |i#3@@33| (|Seq#Length| |run#0@@150|))) (Integer__Order.__default.lt |needle#0@@63| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@150| |i#3@@33|)))))) :qid |totalord.257:20| :skolemid |12394| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@150| |i#3@@33|))) ))) (=> (|Seq#Contains| |run#0@@150| ($Box (int_2_U |needle#0@@63|))) (and (<= (LitInt 0) (Integer__Order.__default.LargestLte $ly@@530 |run#0@@150| |needle#0@@63|)) (= (U_2_int ($Unbox intType (|Seq#Index| |run#0@@150| (Integer__Order.__default.LargestLte $ly@@530 |run#0@@150| |needle#0@@63|)))) |needle#0@@63|))))) :qid |totalord.253:12| :skolemid |12395| :pattern ( (Integer__Order.__default.LargestLte $ly@@530 |run#0@@150| |needle#0@@63|)) ))))
(assert (forall (($ly@@531 T@U) (|run#0@@151| T@U) (|needle#0@@64| Int) ) (!  (=> (and (and (= (type $ly@@531) LayerTypeType) (= (type |run#0@@151|) (SeqType BoxType))) ($Is |run#0@@151| (TSeq TInt))) (and (=> (|Integer__Order.__default.LargestLte#requires| $ly@@531 |run#0@@151| |needle#0@@64|) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@151|)) (=> (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@151|) (|Integer__Order.__default.LargestLte#requires| $ly@@531 |run#0@@151| |needle#0@@64|)))) :qid |totalord.253:12| :skolemid |12396| :pattern ( (|Integer__Order.__default.LargestLte#requires| $ly@@531 |run#0@@151| |needle#0@@64|)) )))
(assert  (and (= (type MoreFuel_Integer_Order._default.IsSorted8) LayerTypeType) (= (type StartFuelAssert_Integer_Order._default.IsSorted) LayerTypeType)))
(assert  (=> true (forall (($ly@@532 T@U) (|run#0@@152| T@U) (|needle#0@@65| Int) ) (!  (=> (and (and (= (type $ly@@532) LayerTypeType) (= (type |run#0@@152|) (SeqType BoxType))) (or (|Integer__Order.__default.LargestLte#canCall| |run#0@@152| |needle#0@@65|) (and ($Is |run#0@@152| (TSeq TInt)) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@152|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@152|) (LitInt 0))) (|Integer__Order.__default.lt#canCall| |needle#0@@65| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@152| (LitInt 0)))))) (=> (not (or (= (|Seq#Length| |run#0@@152|) (LitInt 0)) (Integer__Order.__default.lt |needle#0@@65| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@152| (LitInt 0))))))) (|Integer__Order.__default.LargestLte#canCall| (|Seq#Drop| |run#0@@152| (LitInt 1)) |needle#0@@65|))) (and (and (and (= StartFuel_Integer_Order._default.IsSorted ($LS MoreFuel_Integer_Order._default.IsSorted8)) (= StartFuelAssert_Integer_Order._default.IsSorted ($LS ($LS MoreFuel_Integer_Order._default.IsSorted8)))) (= (AsFuelBottom MoreFuel_Integer_Order._default.IsSorted8) MoreFuel_Integer_Order._default.IsSorted8)) (= (Integer__Order.__default.LargestLte ($LS $ly@@532) |run#0@@152| |needle#0@@65|) (ite  (or (= (|Seq#Length| |run#0@@152|) (LitInt 0)) (Integer__Order.__default.lt |needle#0@@65| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@152| (LitInt 0)))))) (- 0 1) (+ 1 (Integer__Order.__default.LargestLte $ly@@532 (|Seq#Drop| |run#0@@152| (LitInt 1)) |needle#0@@65|))))))) :qid |totalord.253:12| :skolemid |12397| :pattern ( (Integer__Order.__default.LargestLte ($LS $ly@@532) |run#0@@152| |needle#0@@65|)) ))))
(assert (= (type MoreFuel_Integer_Order._default.IsSorted9) LayerTypeType))
(assert  (=> true (forall (($ly@@533 T@U) (|run#0@@153| T@U) (|needle#0@@66| Int) ) (!  (=> (and (and (= (type $ly@@533) LayerTypeType) (= (type |run#0@@153|) (SeqType BoxType))) (or (|Integer__Order.__default.LargestLte#canCall| (Lit |run#0@@153|) (LitInt |needle#0@@66|)) (and ($Is |run#0@@153| (TSeq TInt)) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted (Lit |run#0@@153|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@153|)) (LitInt 0))) (|Integer__Order.__default.lt#canCall| (LitInt |needle#0@@66|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@153|) (LitInt 0)))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@153|)) (LitInt 0)) (Integer__Order.__default.lt (LitInt |needle#0@@66|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@153|) (LitInt 0))))))) (|Integer__Order.__default.LargestLte#canCall| (Lit (|Seq#Drop| (Lit |run#0@@153|) (LitInt 1))) (LitInt |needle#0@@66|)))) (and (and (and (= StartFuel_Integer_Order._default.IsSorted ($LS MoreFuel_Integer_Order._default.IsSorted9)) (= StartFuelAssert_Integer_Order._default.IsSorted ($LS ($LS MoreFuel_Integer_Order._default.IsSorted9)))) (= (AsFuelBottom MoreFuel_Integer_Order._default.IsSorted9) MoreFuel_Integer_Order._default.IsSorted9)) (= (Integer__Order.__default.LargestLte ($LS $ly@@533) (Lit |run#0@@153|) (LitInt |needle#0@@66|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@153|)) (LitInt 0)) (Integer__Order.__default.lt (LitInt |needle#0@@66|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@153|) (LitInt 0)))))) (- 0 1) (+ 1 (Integer__Order.__default.LargestLte ($LS $ly@@533) (Lit (|Seq#Drop| (Lit |run#0@@153|) (LitInt 1))) (LitInt |needle#0@@66|)))))))) :qid |totalord.253:12| :weight 3 :skolemid |12398| :pattern ( (Integer__Order.__default.LargestLte ($LS $ly@@533) (Lit |run#0@@153|) (LitInt |needle#0@@66|))) ))))
(assert (forall (($ly@@534 T@U) (|run#0@@154| T@U) (|needle#0@@67| Int) ) (!  (=> (and (= (type $ly@@534) LayerTypeType) (= (type |run#0@@154|) (SeqType BoxType))) (= (Integer__Order.__default.LargestLt ($LS $ly@@534) |run#0@@154| |needle#0@@67|) (Integer__Order.__default.LargestLt $ly@@534 |run#0@@154| |needle#0@@67|))) :qid |totalord.356:12| :skolemid |12399| :pattern ( (Integer__Order.__default.LargestLt ($LS $ly@@534) |run#0@@154| |needle#0@@67|)) )))
(assert (forall (($ly@@535 T@U) (|run#0@@155| T@U) (|needle#0@@68| Int) ) (!  (=> (and (= (type $ly@@535) LayerTypeType) (= (type |run#0@@155|) (SeqType BoxType))) (= (Integer__Order.__default.LargestLt $ly@@535 |run#0@@155| |needle#0@@68|) (Integer__Order.__default.LargestLt $LZ |run#0@@155| |needle#0@@68|))) :qid |totalord.356:12| :skolemid |12400| :pattern ( (Integer__Order.__default.LargestLt (AsFuelBottom $ly@@535) |run#0@@155| |needle#0@@68|)) )))
(assert  (=> true (forall (($ly@@536 T@U) (|run#0@@156| T@U) (|needle#0@@69| Int) ) (!  (=> (and (and (= (type $ly@@536) LayerTypeType) (= (type |run#0@@156|) (SeqType BoxType))) (or (|Integer__Order.__default.LargestLt#canCall| |run#0@@156| |needle#0@@69|) (and ($Is |run#0@@156| (TSeq TInt)) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@156|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Integer__Order.__default.LargestLt $ly@@536 |run#0@@156| |needle#0@@69|)) (< (Integer__Order.__default.LargestLt $ly@@536 |run#0@@156| |needle#0@@69|) (|Seq#Length| |run#0@@156|))) (forall ((|i#2@@32| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@32|) (<= |i#2@@32| (Integer__Order.__default.LargestLt $ly@@536 |run#0@@156| |needle#0@@69|))) (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@156| |i#2@@32|))) |needle#0@@69|))) :qid |totalord.359:20| :skolemid |12401| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@156| |i#2@@32|))) ))) (forall ((|i#3@@34| Int) ) (!  (=> true (=> (and (< (Integer__Order.__default.LargestLt $ly@@536 |run#0@@156| |needle#0@@69|) |i#3@@34|) (< |i#3@@34| (|Seq#Length| |run#0@@156|))) (Integer__Order.__default.lte |needle#0@@69| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@156| |i#3@@34|)))))) :qid |totalord.360:20| :skolemid |12402| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@156| |i#3@@34|))) ))) (=> (|Seq#Contains| |run#0@@156| ($Box (int_2_U |needle#0@@69|))) (and (< (+ (Integer__Order.__default.LargestLt $ly@@536 |run#0@@156| |needle#0@@69|) 1) (|Seq#Length| |run#0@@156|)) (= (U_2_int ($Unbox intType (|Seq#Index| |run#0@@156| (+ (Integer__Order.__default.LargestLt $ly@@536 |run#0@@156| |needle#0@@69|) 1)))) |needle#0@@69|))))) :qid |totalord.356:12| :skolemid |12403| :pattern ( (Integer__Order.__default.LargestLt $ly@@536 |run#0@@156| |needle#0@@69|)) ))))
(assert (forall (($ly@@537 T@U) (|run#0@@157| T@U) (|needle#0@@70| Int) ) (!  (=> (and (and (= (type $ly@@537) LayerTypeType) (= (type |run#0@@157|) (SeqType BoxType))) ($Is |run#0@@157| (TSeq TInt))) (and (=> (|Integer__Order.__default.LargestLt#requires| $ly@@537 |run#0@@157| |needle#0@@70|) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@157|)) (=> (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@157|) (|Integer__Order.__default.LargestLt#requires| $ly@@537 |run#0@@157| |needle#0@@70|)))) :qid |totalord.356:12| :skolemid |12404| :pattern ( (|Integer__Order.__default.LargestLt#requires| $ly@@537 |run#0@@157| |needle#0@@70|)) )))
(assert (= (type MoreFuel_Integer_Order._default.IsSorted10) LayerTypeType))
(assert  (=> true (forall (($ly@@538 T@U) (|run#0@@158| T@U) (|needle#0@@71| Int) ) (!  (=> (and (and (= (type $ly@@538) LayerTypeType) (= (type |run#0@@158|) (SeqType BoxType))) (or (|Integer__Order.__default.LargestLt#canCall| |run#0@@158| |needle#0@@71|) (and ($Is |run#0@@158| (TSeq TInt)) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@158|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@158|) (LitInt 0))) (|Integer__Order.__default.lte#canCall| |needle#0@@71| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@158| (LitInt 0)))))) (=> (not (or (= (|Seq#Length| |run#0@@158|) (LitInt 0)) (Integer__Order.__default.lte |needle#0@@71| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@158| (LitInt 0))))))) (|Integer__Order.__default.LargestLt#canCall| (|Seq#Drop| |run#0@@158| (LitInt 1)) |needle#0@@71|))) (and (and (and (= StartFuel_Integer_Order._default.IsSorted ($LS MoreFuel_Integer_Order._default.IsSorted10)) (= StartFuelAssert_Integer_Order._default.IsSorted ($LS ($LS MoreFuel_Integer_Order._default.IsSorted10)))) (= (AsFuelBottom MoreFuel_Integer_Order._default.IsSorted10) MoreFuel_Integer_Order._default.IsSorted10)) (= (Integer__Order.__default.LargestLt ($LS $ly@@538) |run#0@@158| |needle#0@@71|) (ite  (or (= (|Seq#Length| |run#0@@158|) (LitInt 0)) (Integer__Order.__default.lte |needle#0@@71| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@158| (LitInt 0)))))) (- 0 1) (+ 1 (Integer__Order.__default.LargestLt $ly@@538 (|Seq#Drop| |run#0@@158| (LitInt 1)) |needle#0@@71|))))))) :qid |totalord.356:12| :skolemid |12405| :pattern ( (Integer__Order.__default.LargestLt ($LS $ly@@538) |run#0@@158| |needle#0@@71|)) ))))
(assert (= (type MoreFuel_Integer_Order._default.IsSorted11) LayerTypeType))
(assert  (=> true (forall (($ly@@539 T@U) (|run#0@@159| T@U) (|needle#0@@72| Int) ) (!  (=> (and (and (= (type $ly@@539) LayerTypeType) (= (type |run#0@@159|) (SeqType BoxType))) (or (|Integer__Order.__default.LargestLt#canCall| (Lit |run#0@@159|) (LitInt |needle#0@@72|)) (and ($Is |run#0@@159| (TSeq TInt)) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted (Lit |run#0@@159|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@159|)) (LitInt 0))) (|Integer__Order.__default.lte#canCall| (LitInt |needle#0@@72|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@159|) (LitInt 0)))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@159|)) (LitInt 0)) (Integer__Order.__default.lte (LitInt |needle#0@@72|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@159|) (LitInt 0))))))) (|Integer__Order.__default.LargestLt#canCall| (Lit (|Seq#Drop| (Lit |run#0@@159|) (LitInt 1))) (LitInt |needle#0@@72|)))) (and (and (and (= StartFuel_Integer_Order._default.IsSorted ($LS MoreFuel_Integer_Order._default.IsSorted11)) (= StartFuelAssert_Integer_Order._default.IsSorted ($LS ($LS MoreFuel_Integer_Order._default.IsSorted11)))) (= (AsFuelBottom MoreFuel_Integer_Order._default.IsSorted11) MoreFuel_Integer_Order._default.IsSorted11)) (= (Integer__Order.__default.LargestLt ($LS $ly@@539) (Lit |run#0@@159|) (LitInt |needle#0@@72|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@159|)) (LitInt 0)) (Integer__Order.__default.lte (LitInt |needle#0@@72|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@159|) (LitInt 0)))))) (- 0 1) (+ 1 (Integer__Order.__default.LargestLt ($LS $ly@@539) (Lit (|Seq#Drop| (Lit |run#0@@159|) (LitInt 1))) (LitInt |needle#0@@72|)))))))) :qid |totalord.356:12| :weight 3 :skolemid |12406| :pattern ( (Integer__Order.__default.LargestLt ($LS $ly@@539) (Lit |run#0@@159|) (LitInt |needle#0@@72|))) ))))
(assert (forall (($ly@@540 T@U) (|run#0@@160| T@U) (|needle#0@@73| Int) ) (!  (=> (and (= (type $ly@@540) LayerTypeType) (= (type |run#0@@160|) (SeqType BoxType))) (= (Integer__Order.__default.IndexOfFirstGte ($LS $ly@@540) |run#0@@160| |needle#0@@73|) (Integer__Order.__default.IndexOfFirstGte $ly@@540 |run#0@@160| |needle#0@@73|))) :qid |totalord.388:12| :skolemid |12407| :pattern ( (Integer__Order.__default.IndexOfFirstGte ($LS $ly@@540) |run#0@@160| |needle#0@@73|)) )))
(assert (forall (($ly@@541 T@U) (|run#0@@161| T@U) (|needle#0@@74| Int) ) (!  (=> (and (= (type $ly@@541) LayerTypeType) (= (type |run#0@@161|) (SeqType BoxType))) (= (Integer__Order.__default.IndexOfFirstGte $ly@@541 |run#0@@161| |needle#0@@74|) (Integer__Order.__default.IndexOfFirstGte $LZ |run#0@@161| |needle#0@@74|))) :qid |totalord.388:12| :skolemid |12408| :pattern ( (Integer__Order.__default.IndexOfFirstGte (AsFuelBottom $ly@@541) |run#0@@161| |needle#0@@74|)) )))
(assert  (=> true (forall (($ly@@542 T@U) (|run#0@@162| T@U) (|needle#0@@75| Int) ) (!  (=> (and (and (= (type $ly@@542) LayerTypeType) (= (type |run#0@@162|) (SeqType BoxType))) (or (|Integer__Order.__default.IndexOfFirstGte#canCall| |run#0@@162| |needle#0@@75|) (and ($Is |run#0@@162| (TSeq TInt)) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@162|)))) (and (and (and (<= (Integer__Order.__default.IndexOfFirstGte $ly@@542 |run#0@@162| |needle#0@@75|) (|Seq#Length| |run#0@@162|)) (forall ((|i#2@@33| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@33|) (< |i#2@@33| (Integer__Order.__default.IndexOfFirstGte $ly@@542 |run#0@@162| |needle#0@@75|))) (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@162| |i#2@@33|))) |needle#0@@75|)) :qid |totalord.391:20| :skolemid |12409| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@162| |i#2@@33|))) ))) (forall ((|i#3@@35| Int) ) (!  (=> (and (<= (Integer__Order.__default.IndexOfFirstGte $ly@@542 |run#0@@162| |needle#0@@75|) |i#3@@35|) (< |i#3@@35| (|Seq#Length| |run#0@@162|))) (Integer__Order.__default.lte |needle#0@@75| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@162| |i#3@@35|))))) :qid |totalord.392:20| :skolemid |12410| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@162| |i#3@@35|))) ))) (<= (LitInt 0) (Integer__Order.__default.IndexOfFirstGte $ly@@542 |run#0@@162| |needle#0@@75|)))) :qid |totalord.388:12| :skolemid |12411| :pattern ( (Integer__Order.__default.IndexOfFirstGte $ly@@542 |run#0@@162| |needle#0@@75|)) ))))
(assert (forall (($ly@@543 T@U) (|run#0@@163| T@U) (|needle#0@@76| Int) ) (!  (=> (and (and (= (type $ly@@543) LayerTypeType) (= (type |run#0@@163|) (SeqType BoxType))) ($Is |run#0@@163| (TSeq TInt))) (and (=> (|Integer__Order.__default.IndexOfFirstGte#requires| $ly@@543 |run#0@@163| |needle#0@@76|) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@163|)) (=> (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@163|) (|Integer__Order.__default.IndexOfFirstGte#requires| $ly@@543 |run#0@@163| |needle#0@@76|)))) :qid |totalord.388:12| :skolemid |12412| :pattern ( (|Integer__Order.__default.IndexOfFirstGte#requires| $ly@@543 |run#0@@163| |needle#0@@76|)) )))
(assert (= (type MoreFuel_Integer_Order._default.IsSorted12) LayerTypeType))
(assert  (=> true (forall (($ly@@544 T@U) (|run#0@@164| T@U) (|needle#0@@77| Int) ) (!  (=> (and (and (= (type $ly@@544) LayerTypeType) (= (type |run#0@@164|) (SeqType BoxType))) (or (|Integer__Order.__default.IndexOfFirstGte#canCall| |run#0@@164| |needle#0@@77|) (and ($Is |run#0@@164| (TSeq TInt)) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@164|)))) (and (=> (not (= (|Seq#Length| |run#0@@164|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| TInt |run#0@@164|) (|Integer__Order.__default.lt#canCall| (U_2_int ($Unbox intType (Sequences.__default.Last TInt |run#0@@164|))) |needle#0@@77|)) (=> (not (Integer__Order.__default.lt (U_2_int ($Unbox intType (Sequences.__default.Last TInt |run#0@@164|))) |needle#0@@77|)) (and (|Sequences.__default.DropLast#canCall| TInt |run#0@@164|) (|Integer__Order.__default.IndexOfFirstGte#canCall| (Sequences.__default.DropLast TInt |run#0@@164|) |needle#0@@77|))))) (and (and (and (= StartFuel_Integer_Order._default.IsSorted ($LS MoreFuel_Integer_Order._default.IsSorted12)) (= StartFuelAssert_Integer_Order._default.IsSorted ($LS ($LS MoreFuel_Integer_Order._default.IsSorted12)))) (= (AsFuelBottom MoreFuel_Integer_Order._default.IsSorted12) MoreFuel_Integer_Order._default.IsSorted12)) (= (Integer__Order.__default.IndexOfFirstGte ($LS $ly@@544) |run#0@@164| |needle#0@@77|) (ite (= (|Seq#Length| |run#0@@164|) (LitInt 0)) 0 (ite (Integer__Order.__default.lt (U_2_int ($Unbox intType (Sequences.__default.Last TInt |run#0@@164|))) |needle#0@@77|) (|Seq#Length| |run#0@@164|) (Integer__Order.__default.IndexOfFirstGte $ly@@544 (Sequences.__default.DropLast TInt |run#0@@164|) |needle#0@@77|))))))) :qid |totalord.388:12| :skolemid |12413| :pattern ( (Integer__Order.__default.IndexOfFirstGte ($LS $ly@@544) |run#0@@164| |needle#0@@77|)) ))))
(assert (= (type MoreFuel_Integer_Order._default.IsSorted13) LayerTypeType))
(assert  (=> true (forall (($ly@@545 T@U) (|run#0@@165| T@U) (|needle#0@@78| Int) ) (!  (=> (and (and (= (type $ly@@545) LayerTypeType) (= (type |run#0@@165|) (SeqType BoxType))) (or (|Integer__Order.__default.IndexOfFirstGte#canCall| (Lit |run#0@@165|) (LitInt |needle#0@@78|)) (and ($Is |run#0@@165| (TSeq TInt)) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted (Lit |run#0@@165|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@165|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| TInt (Lit |run#0@@165|)) (|Integer__Order.__default.lt#canCall| (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last TInt (Lit |run#0@@165|))))) (LitInt |needle#0@@78|))) (=> (not (U_2_bool (Lit (bool_2_U (Integer__Order.__default.lt (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last TInt (Lit |run#0@@165|))))) (LitInt |needle#0@@78|)))))) (and (|Sequences.__default.DropLast#canCall| TInt (Lit |run#0@@165|)) (|Integer__Order.__default.IndexOfFirstGte#canCall| (Lit (Sequences.__default.DropLast TInt (Lit |run#0@@165|))) (LitInt |needle#0@@78|)))))) (and (and (and (= StartFuel_Integer_Order._default.IsSorted ($LS MoreFuel_Integer_Order._default.IsSorted13)) (= StartFuelAssert_Integer_Order._default.IsSorted ($LS ($LS MoreFuel_Integer_Order._default.IsSorted13)))) (= (AsFuelBottom MoreFuel_Integer_Order._default.IsSorted13) MoreFuel_Integer_Order._default.IsSorted13)) (= (Integer__Order.__default.IndexOfFirstGte ($LS $ly@@545) (Lit |run#0@@165|) (LitInt |needle#0@@78|)) (ite (= (|Seq#Length| (Lit |run#0@@165|)) (LitInt 0)) 0 (ite (Integer__Order.__default.lt (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last TInt (Lit |run#0@@165|))))) (LitInt |needle#0@@78|)) (|Seq#Length| (Lit |run#0@@165|)) (Integer__Order.__default.IndexOfFirstGte ($LS $ly@@545) (Lit (Sequences.__default.DropLast TInt (Lit |run#0@@165|))) (LitInt |needle#0@@78|)))))))) :qid |totalord.388:12| :weight 3 :skolemid |12414| :pattern ( (Integer__Order.__default.IndexOfFirstGte ($LS $ly@@545) (Lit |run#0@@165|) (LitInt |needle#0@@78|))) ))))
(assert (forall (($ly@@546 T@U) (|s#0@@150| T@U) (|key#0@@84| Int) (|lo#0@@27| Int) (|hi#0@@27| Int) ) (!  (=> (and (= (type $ly@@546) LayerTypeType) (= (type |s#0@@150|) (SeqType BoxType))) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@546) |s#0@@150| |key#0@@84| |lo#0@@27| |hi#0@@27|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@546 |s#0@@150| |key#0@@84| |lo#0@@27| |hi#0@@27|))) :qid |totalord.421:12| :skolemid |12415| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@546) |s#0@@150| |key#0@@84| |lo#0@@27| |hi#0@@27|)) )))
(assert (forall (($ly@@547 T@U) (|s#0@@151| T@U) (|key#0@@85| Int) (|lo#0@@28| Int) (|hi#0@@28| Int) ) (!  (=> (and (= (type $ly@@547) LayerTypeType) (= (type |s#0@@151|) (SeqType BoxType))) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@547 |s#0@@151| |key#0@@85| |lo#0@@28| |hi#0@@28|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter $LZ |s#0@@151| |key#0@@85| |lo#0@@28| |hi#0@@28|))) :qid |totalord.421:12| :skolemid |12416| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter (AsFuelBottom $ly@@547) |s#0@@151| |key#0@@85| |lo#0@@28| |hi#0@@28|)) )))
(assert  (=> true (forall (($ly@@548 T@U) (|s#0@@152| T@U) (|key#0@@86| Int) (|lo#0@@29| Int) (|hi#0@@29| Int) ) (!  (=> (and (and (= (type $ly@@548) LayerTypeType) (= (type |s#0@@152|) (SeqType BoxType))) (or (|Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@152| |key#0@@86| |lo#0@@29| |hi#0@@29|) (and ($Is |s#0@@152| (TSeq TInt)) (and (and (and (and (<= (LitInt 0) |lo#0@@29|) (< |lo#0@@29| |hi#0@@29|)) (<= |hi#0@@29| (+ (|Seq#Length| |s#0@@152|) 1))) (=> (> |lo#0@@29| 0) (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@152| (- |lo#0@@29| 1)))) |key#0@@86|))) (=> (<= |hi#0@@29| (|Seq#Length| |s#0@@152|)) (Integer__Order.__default.lte |key#0@@86| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@152| (- |hi#0@@29| 1)))))))))) (and (and (and (<= (LitInt 0) (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@548 |s#0@@152| |key#0@@86| |lo#0@@29| |hi#0@@29|)) (<= (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@548 |s#0@@152| |key#0@@86| |lo#0@@29| |hi#0@@29|) (|Seq#Length| |s#0@@152|))) (=> (> (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@548 |s#0@@152| |key#0@@86| |lo#0@@29| |hi#0@@29|) 0) (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@152| (- (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@548 |s#0@@152| |key#0@@86| |lo#0@@29| |hi#0@@29|) 1)))) |key#0@@86|))) (=> (< (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@548 |s#0@@152| |key#0@@86| |lo#0@@29| |hi#0@@29|) (|Seq#Length| |s#0@@152|)) (Integer__Order.__default.lte |key#0@@86| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@152| (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@548 |s#0@@152| |key#0@@86| |lo#0@@29| |hi#0@@29|)))))))) :qid |totalord.421:12| :skolemid |12417| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@548 |s#0@@152| |key#0@@86| |lo#0@@29| |hi#0@@29|)) ))))
(assert (forall (($ly@@549 T@U) (|s#0@@153| T@U) (|key#0@@87| Int) (|lo#0@@30| Int) (|hi#0@@30| Int) ) (!  (=> (and (and (= (type $ly@@549) LayerTypeType) (= (type |s#0@@153|) (SeqType BoxType))) ($Is |s#0@@153| (TSeq TInt))) (and (=> (|Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@549 |s#0@@153| |key#0@@87| |lo#0@@30| |hi#0@@30|) (and (and (and (and (<= (LitInt 0) |lo#0@@30|) (< |lo#0@@30| |hi#0@@30|)) (<= |hi#0@@30| (+ (|Seq#Length| |s#0@@153|) 1))) (=> (> |lo#0@@30| 0) (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@153| (- |lo#0@@30| 1)))) |key#0@@87|))) (=> (<= |hi#0@@30| (|Seq#Length| |s#0@@153|)) (Integer__Order.__default.lte |key#0@@87| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@153| (- |hi#0@@30| 1)))))))) (=> (and (and (and (and (<= (LitInt 0) |lo#0@@30|) (< |lo#0@@30| |hi#0@@30|)) (<= |hi#0@@30| (+ (|Seq#Length| |s#0@@153|) 1))) (=> (> |lo#0@@30| 0) (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@153| (- |lo#0@@30| 1)))) |key#0@@87|))) (=> (<= |hi#0@@30| (|Seq#Length| |s#0@@153|)) (Integer__Order.__default.lte |key#0@@87| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@153| (- |hi#0@@30| 1))))))) (|Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@549 |s#0@@153| |key#0@@87| |lo#0@@30| |hi#0@@30|)))) :qid |totalord.421:12| :skolemid |12418| :pattern ( (|Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@549 |s#0@@153| |key#0@@87| |lo#0@@30| |hi#0@@30|)) )))
(assert  (=> true (forall (($ly@@550 T@U) (|s#0@@154| T@U) (|key#0@@88| Int) (|lo#0@@31| Int) (|hi#0@@31| Int) ) (!  (=> (and (and (= (type $ly@@550) LayerTypeType) (= (type |s#0@@154|) (SeqType BoxType))) (or (|Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@154| |key#0@@88| |lo#0@@31| |hi#0@@31|) (and ($Is |s#0@@154| (TSeq TInt)) (and (and (and (and (<= (LitInt 0) |lo#0@@31|) (< |lo#0@@31| |hi#0@@31|)) (<= |hi#0@@31| (+ (|Seq#Length| |s#0@@154|) 1))) (=> (> |lo#0@@31| 0) (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@154| (- |lo#0@@31| 1)))) |key#0@@88|))) (=> (<= |hi#0@@31| (|Seq#Length| |s#0@@154|)) (Integer__Order.__default.lte |key#0@@88| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@154| (- |hi#0@@31| 1)))))))))) (and (=> (< (+ |lo#0@@31| 1) |hi#0@@31|) (let ((|mid#3@@7| (Div (+ |lo#0@@31| |hi#0@@31|) (LitInt 2)))) (and (and (|Integer__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@154| (- |mid#3@@7| 1)))) |key#0@@88|) (=> (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@154| (- |mid#3@@7| 1)))) |key#0@@88|) (|Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@154| |key#0@@88| |mid#3@@7| |hi#0@@31|))) (=> (not (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@154| (- |mid#3@@7| 1)))) |key#0@@88|)) (|Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@154| |key#0@@88| |lo#0@@31| |mid#3@@7|))))) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@550) |s#0@@154| |key#0@@88| |lo#0@@31| |hi#0@@31|) (ite (< (+ |lo#0@@31| 1) |hi#0@@31|) (let ((|mid#3@@8| (Div (+ |lo#0@@31| |hi#0@@31|) (LitInt 2)))) (ite (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@154| (- |mid#3@@8| 1)))) |key#0@@88|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@550 |s#0@@154| |key#0@@88| |mid#3@@8| |hi#0@@31|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@550 |s#0@@154| |key#0@@88| |lo#0@@31| |mid#3@@8|))) |lo#0@@31|)))) :qid |totalord.421:12| :skolemid |12419| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@550) |s#0@@154| |key#0@@88| |lo#0@@31| |hi#0@@31|)) ))))
(assert  (=> true (forall (($ly@@551 T@U) (|s#0@@155| T@U) (|key#0@@89| Int) (|lo#0@@32| Int) (|hi#0@@32| Int) ) (!  (=> (and (and (= (type $ly@@551) LayerTypeType) (= (type |s#0@@155|) (SeqType BoxType))) (or (|Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@155| |key#0@@89| (LitInt |lo#0@@32|) (LitInt |hi#0@@32|)) (and ($Is |s#0@@155| (TSeq TInt)) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@32|)) (< |lo#0@@32| |hi#0@@32|)) (<= (LitInt |hi#0@@32|) (+ (|Seq#Length| |s#0@@155|) 1))) (=> (> |lo#0@@32| 0) (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@155| (LitInt (- |lo#0@@32| 1))))) |key#0@@89|))) (=> (<= (LitInt |hi#0@@32|) (|Seq#Length| |s#0@@155|)) (Integer__Order.__default.lte |key#0@@89| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@155| (LitInt (- |hi#0@@32| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@32| 1) |hi#0@@32|)))) (let ((|mid#4@@7| (LitInt (Div (+ |lo#0@@32| |hi#0@@32|) (LitInt 2))))) (and (and (|Integer__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@155| (- |mid#4@@7| 1)))) |key#0@@89|) (=> (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@155| (- |mid#4@@7| 1)))) |key#0@@89|) (|Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@155| |key#0@@89| |mid#4@@7| (LitInt |hi#0@@32|)))) (=> (not (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@155| (- |mid#4@@7| 1)))) |key#0@@89|)) (|Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@155| |key#0@@89| (LitInt |lo#0@@32|) |mid#4@@7|))))) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@551) |s#0@@155| |key#0@@89| (LitInt |lo#0@@32|) (LitInt |hi#0@@32|)) (ite (< (+ |lo#0@@32| 1) |hi#0@@32|) (let ((|mid#4@@8| (LitInt (Div (+ |lo#0@@32| |hi#0@@32|) (LitInt 2))))) (ite (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@155| (LitInt (- |mid#4@@8| 1))))) |key#0@@89|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@551) |s#0@@155| |key#0@@89| |mid#4@@8| (LitInt |hi#0@@32|)) (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@551) |s#0@@155| |key#0@@89| (LitInt |lo#0@@32|) |mid#4@@8|))) |lo#0@@32|)))) :qid |totalord.421:12| :weight 3 :skolemid |12420| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@551) |s#0@@155| |key#0@@89| (LitInt |lo#0@@32|) (LitInt |hi#0@@32|))) ))))
(assert  (=> true (forall (($ly@@552 T@U) (|s#0@@156| T@U) (|key#0@@90| Int) (|lo#0@@33| Int) (|hi#0@@33| Int) ) (!  (=> (and (and (= (type $ly@@552) LayerTypeType) (= (type |s#0@@156|) (SeqType BoxType))) (or (|Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@156|) (LitInt |key#0@@90|) (LitInt |lo#0@@33|) (LitInt |hi#0@@33|)) (and ($Is |s#0@@156| (TSeq TInt)) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@33|)) (< |lo#0@@33| |hi#0@@33|)) (<= (LitInt |hi#0@@33|) (+ (|Seq#Length| (Lit |s#0@@156|)) 1))) (=> (> |lo#0@@33| 0) (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@156|) (LitInt (- |lo#0@@33| 1))))) (LitInt |key#0@@90|)))) (=> (<= (LitInt |hi#0@@33|) (|Seq#Length| (Lit |s#0@@156|))) (Integer__Order.__default.lte (LitInt |key#0@@90|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@156|) (LitInt (- |hi#0@@33| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@33| 1) |hi#0@@33|)))) (let ((|mid#5@@7| (LitInt (Div (+ |lo#0@@33| |hi#0@@33|) (LitInt 2))))) (and (and (|Integer__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@156|) (- |mid#5@@7| 1)))) (LitInt |key#0@@90|)) (=> (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@156|) (- |mid#5@@7| 1)))) (LitInt |key#0@@90|)) (|Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@156|) (LitInt |key#0@@90|) |mid#5@@7| (LitInt |hi#0@@33|)))) (=> (not (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@156|) (- |mid#5@@7| 1)))) (LitInt |key#0@@90|))) (|Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@156|) (LitInt |key#0@@90|) (LitInt |lo#0@@33|) |mid#5@@7|))))) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@552) (Lit |s#0@@156|) (LitInt |key#0@@90|) (LitInt |lo#0@@33|) (LitInt |hi#0@@33|)) (ite (< (+ |lo#0@@33| 1) |hi#0@@33|) (let ((|mid#5@@8| (LitInt (Div (+ |lo#0@@33| |hi#0@@33|) (LitInt 2))))) (ite (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@156|) (LitInt (- |mid#5@@8| 1))))) (LitInt |key#0@@90|)) (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@552) (Lit |s#0@@156|) (LitInt |key#0@@90|) |mid#5@@8| (LitInt |hi#0@@33|)) (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@552) (Lit |s#0@@156|) (LitInt |key#0@@90|) (LitInt |lo#0@@33|) |mid#5@@8|))) |lo#0@@33|)))) :qid |totalord.421:12| :weight 3 :skolemid |12421| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@552) (Lit |s#0@@156|) (LitInt |key#0@@90|) (LitInt |lo#0@@33|) (LitInt |hi#0@@33|))) ))))
(assert (forall (($ly@@553 T@U) (|s#0@@157| T@U) (|key#0@@91| Int) ) (!  (=> (and (= (type $ly@@553) LayerTypeType) (= (type |s#0@@157|) (SeqType BoxType))) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@553) |s#0@@157| |key#0@@91|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@553 |s#0@@157| |key#0@@91|))) :qid |totalord.441:22| :skolemid |12422| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@553) |s#0@@157| |key#0@@91|)) )))
(assert (forall (($ly@@554 T@U) (|s#0@@158| T@U) (|key#0@@92| Int) ) (!  (=> (and (= (type $ly@@554) LayerTypeType) (= (type |s#0@@158|) (SeqType BoxType))) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@554 |s#0@@158| |key#0@@92|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGte $LZ |s#0@@158| |key#0@@92|))) :qid |totalord.441:22| :skolemid |12423| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGte (AsFuelBottom $ly@@554) |s#0@@158| |key#0@@92|)) )))
(assert  (=> true (forall (($ly@@555 T@U) (|s#0@@159| T@U) (|key#0@@93| Int) ) (!  (=> (and (and (= (type $ly@@555) LayerTypeType) (= (type |s#0@@159|) (SeqType BoxType))) (or (|Integer__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@159| |key#0@@93|) ($Is |s#0@@159| (TSeq TInt)))) (and (and (and (<= (LitInt 0) (Integer__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@555 |s#0@@159| |key#0@@93|)) (<= (Integer__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@555 |s#0@@159| |key#0@@93|) (|Seq#Length| |s#0@@159|))) (=> (> (Integer__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@555 |s#0@@159| |key#0@@93|) 0) (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@159| (- (Integer__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@555 |s#0@@159| |key#0@@93|) 1)))) |key#0@@93|))) (=> (< (Integer__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@555 |s#0@@159| |key#0@@93|) (|Seq#Length| |s#0@@159|)) (Integer__Order.__default.lte |key#0@@93| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@159| (Integer__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@555 |s#0@@159| |key#0@@93|)))))))) :qid |totalord.441:22| :skolemid |12424| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@555 |s#0@@159| |key#0@@93|)) ))))
(assert (forall (($ly@@556 T@U) (|s#0@@160| T@U) (|key#0@@94| Int) ) (!  (=> (and (and (= (type $ly@@556) LayerTypeType) (= (type |s#0@@160|) (SeqType BoxType))) ($Is |s#0@@160| (TSeq TInt))) (and (=> (|Integer__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@556 |s#0@@160| |key#0@@94|) true) (=> true (|Integer__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@556 |s#0@@160| |key#0@@94|)))) :qid |totalord.441:22| :skolemid |12425| :pattern ( (|Integer__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@556 |s#0@@160| |key#0@@94|)) )))
(assert  (=> true (forall (($ly@@557 T@U) (|s#0@@161| T@U) (|key#0@@95| Int) ) (!  (=> (and (and (= (type $ly@@557) LayerTypeType) (= (type |s#0@@161|) (SeqType BoxType))) (or (|Integer__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@161| |key#0@@95|) ($Is |s#0@@161| (TSeq TInt)))) (and (|Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@161| |key#0@@95| (LitInt 0) (+ (|Seq#Length| |s#0@@161|) 1)) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@557) |s#0@@161| |key#0@@95|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) |s#0@@161| |key#0@@95| (LitInt 0) (+ (|Seq#Length| |s#0@@161|) 1))))) :qid |totalord.441:22| :skolemid |12426| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@557) |s#0@@161| |key#0@@95|)) ))))
(assert  (=> true (forall (($ly@@558 T@U) (|s#0@@162| T@U) (|key#0@@96| Int) ) (!  (=> (and (and (= (type $ly@@558) LayerTypeType) (= (type |s#0@@162|) (SeqType BoxType))) (or (|Integer__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (Lit |s#0@@162|) (LitInt |key#0@@96|)) ($Is |s#0@@162| (TSeq TInt)))) (and (|Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@162|) (LitInt |key#0@@96|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@162|)) 1)) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@558) (Lit |s#0@@162|) (LitInt |key#0@@96|)) (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) (Lit |s#0@@162|) (LitInt |key#0@@96|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@162|)) 1))))) :qid |totalord.441:22| :weight 3 :skolemid |12427| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@558) (Lit |s#0@@162|) (LitInt |key#0@@96|))) ))))
(assert (forall (($ly@@559 T@U) (|run#0@@166| T@U) (|needle#0@@79| Int) ) (!  (=> (and (= (type $ly@@559) LayerTypeType) (= (type |run#0@@166|) (SeqType BoxType))) (= (Integer__Order.__default.IndexOfFirstGt ($LS $ly@@559) |run#0@@166| |needle#0@@79|) (Integer__Order.__default.IndexOfFirstGt $ly@@559 |run#0@@166| |needle#0@@79|))) :qid |totalord.449:12| :skolemid |12428| :pattern ( (Integer__Order.__default.IndexOfFirstGt ($LS $ly@@559) |run#0@@166| |needle#0@@79|)) )))
(assert (forall (($ly@@560 T@U) (|run#0@@167| T@U) (|needle#0@@80| Int) ) (!  (=> (and (= (type $ly@@560) LayerTypeType) (= (type |run#0@@167|) (SeqType BoxType))) (= (Integer__Order.__default.IndexOfFirstGt $ly@@560 |run#0@@167| |needle#0@@80|) (Integer__Order.__default.IndexOfFirstGt $LZ |run#0@@167| |needle#0@@80|))) :qid |totalord.449:12| :skolemid |12429| :pattern ( (Integer__Order.__default.IndexOfFirstGt (AsFuelBottom $ly@@560) |run#0@@167| |needle#0@@80|)) )))
(assert  (=> true (forall (($ly@@561 T@U) (|run#0@@168| T@U) (|needle#0@@81| Int) ) (!  (=> (and (and (= (type $ly@@561) LayerTypeType) (= (type |run#0@@168|) (SeqType BoxType))) (or (|Integer__Order.__default.IndexOfFirstGt#canCall| |run#0@@168| |needle#0@@81|) (and ($Is |run#0@@168| (TSeq TInt)) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@168|)))) (and (and (and (<= (Integer__Order.__default.IndexOfFirstGt $ly@@561 |run#0@@168| |needle#0@@81|) (|Seq#Length| |run#0@@168|)) (forall ((|i#2@@34| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@34|) (< |i#2@@34| (Integer__Order.__default.IndexOfFirstGt $ly@@561 |run#0@@168| |needle#0@@81|))) (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@168| |i#2@@34|))) |needle#0@@81|)) :qid |totalord.452:20| :skolemid |12430| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@168| |i#2@@34|))) ))) (forall ((|i#3@@36| Int) ) (!  (=> (and (<= (Integer__Order.__default.IndexOfFirstGt $ly@@561 |run#0@@168| |needle#0@@81|) |i#3@@36|) (< |i#3@@36| (|Seq#Length| |run#0@@168|))) (Integer__Order.__default.lt |needle#0@@81| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@168| |i#3@@36|))))) :qid |totalord.453:20| :skolemid |12431| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@168| |i#3@@36|))) ))) (<= (LitInt 0) (Integer__Order.__default.IndexOfFirstGt $ly@@561 |run#0@@168| |needle#0@@81|)))) :qid |totalord.449:12| :skolemid |12432| :pattern ( (Integer__Order.__default.IndexOfFirstGt $ly@@561 |run#0@@168| |needle#0@@81|)) ))))
(assert (forall (($ly@@562 T@U) (|run#0@@169| T@U) (|needle#0@@82| Int) ) (!  (=> (and (and (= (type $ly@@562) LayerTypeType) (= (type |run#0@@169|) (SeqType BoxType))) ($Is |run#0@@169| (TSeq TInt))) (and (=> (|Integer__Order.__default.IndexOfFirstGt#requires| $ly@@562 |run#0@@169| |needle#0@@82|) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@169|)) (=> (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@169|) (|Integer__Order.__default.IndexOfFirstGt#requires| $ly@@562 |run#0@@169| |needle#0@@82|)))) :qid |totalord.449:12| :skolemid |12433| :pattern ( (|Integer__Order.__default.IndexOfFirstGt#requires| $ly@@562 |run#0@@169| |needle#0@@82|)) )))
(assert (= (type MoreFuel_Integer_Order._default.IsSorted14) LayerTypeType))
(assert  (=> true (forall (($ly@@563 T@U) (|run#0@@170| T@U) (|needle#0@@83| Int) ) (!  (=> (and (and (= (type $ly@@563) LayerTypeType) (= (type |run#0@@170|) (SeqType BoxType))) (or (|Integer__Order.__default.IndexOfFirstGt#canCall| |run#0@@170| |needle#0@@83|) (and ($Is |run#0@@170| (TSeq TInt)) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@170|)))) (and (=> (not (= (|Seq#Length| |run#0@@170|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| TInt |run#0@@170|) (|Integer__Order.__default.lte#canCall| (U_2_int ($Unbox intType (Sequences.__default.Last TInt |run#0@@170|))) |needle#0@@83|)) (=> (not (Integer__Order.__default.lte (U_2_int ($Unbox intType (Sequences.__default.Last TInt |run#0@@170|))) |needle#0@@83|)) (and (|Sequences.__default.DropLast#canCall| TInt |run#0@@170|) (|Integer__Order.__default.IndexOfFirstGt#canCall| (Sequences.__default.DropLast TInt |run#0@@170|) |needle#0@@83|))))) (and (and (and (= StartFuel_Integer_Order._default.IsSorted ($LS MoreFuel_Integer_Order._default.IsSorted14)) (= StartFuelAssert_Integer_Order._default.IsSorted ($LS ($LS MoreFuel_Integer_Order._default.IsSorted14)))) (= (AsFuelBottom MoreFuel_Integer_Order._default.IsSorted14) MoreFuel_Integer_Order._default.IsSorted14)) (= (Integer__Order.__default.IndexOfFirstGt ($LS $ly@@563) |run#0@@170| |needle#0@@83|) (ite (= (|Seq#Length| |run#0@@170|) (LitInt 0)) 0 (ite (Integer__Order.__default.lte (U_2_int ($Unbox intType (Sequences.__default.Last TInt |run#0@@170|))) |needle#0@@83|) (|Seq#Length| |run#0@@170|) (Integer__Order.__default.IndexOfFirstGt $ly@@563 (Sequences.__default.DropLast TInt |run#0@@170|) |needle#0@@83|))))))) :qid |totalord.449:12| :skolemid |12434| :pattern ( (Integer__Order.__default.IndexOfFirstGt ($LS $ly@@563) |run#0@@170| |needle#0@@83|)) ))))
(assert (= (type MoreFuel_Integer_Order._default.IsSorted15) LayerTypeType))
(assert  (=> true (forall (($ly@@564 T@U) (|run#0@@171| T@U) (|needle#0@@84| Int) ) (!  (=> (and (and (= (type $ly@@564) LayerTypeType) (= (type |run#0@@171|) (SeqType BoxType))) (or (|Integer__Order.__default.IndexOfFirstGt#canCall| (Lit |run#0@@171|) (LitInt |needle#0@@84|)) (and ($Is |run#0@@171| (TSeq TInt)) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted (Lit |run#0@@171|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@171|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| TInt (Lit |run#0@@171|)) (|Integer__Order.__default.lte#canCall| (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last TInt (Lit |run#0@@171|))))) (LitInt |needle#0@@84|))) (=> (not (U_2_bool (Lit (bool_2_U (Integer__Order.__default.lte (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last TInt (Lit |run#0@@171|))))) (LitInt |needle#0@@84|)))))) (and (|Sequences.__default.DropLast#canCall| TInt (Lit |run#0@@171|)) (|Integer__Order.__default.IndexOfFirstGt#canCall| (Lit (Sequences.__default.DropLast TInt (Lit |run#0@@171|))) (LitInt |needle#0@@84|)))))) (and (and (and (= StartFuel_Integer_Order._default.IsSorted ($LS MoreFuel_Integer_Order._default.IsSorted15)) (= StartFuelAssert_Integer_Order._default.IsSorted ($LS ($LS MoreFuel_Integer_Order._default.IsSorted15)))) (= (AsFuelBottom MoreFuel_Integer_Order._default.IsSorted15) MoreFuel_Integer_Order._default.IsSorted15)) (= (Integer__Order.__default.IndexOfFirstGt ($LS $ly@@564) (Lit |run#0@@171|) (LitInt |needle#0@@84|)) (ite (= (|Seq#Length| (Lit |run#0@@171|)) (LitInt 0)) 0 (ite (Integer__Order.__default.lte (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last TInt (Lit |run#0@@171|))))) (LitInt |needle#0@@84|)) (|Seq#Length| (Lit |run#0@@171|)) (Integer__Order.__default.IndexOfFirstGt ($LS $ly@@564) (Lit (Sequences.__default.DropLast TInt (Lit |run#0@@171|))) (LitInt |needle#0@@84|)))))))) :qid |totalord.449:12| :weight 3 :skolemid |12435| :pattern ( (Integer__Order.__default.IndexOfFirstGt ($LS $ly@@564) (Lit |run#0@@171|) (LitInt |needle#0@@84|))) ))))
(assert (forall (($ly@@565 T@U) (|s#0@@163| T@U) (|key#0@@97| Int) (|lo#0@@34| Int) (|hi#0@@34| Int) ) (!  (=> (and (= (type $ly@@565) LayerTypeType) (= (type |s#0@@163|) (SeqType BoxType))) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@565) |s#0@@163| |key#0@@97| |lo#0@@34| |hi#0@@34|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@565 |s#0@@163| |key#0@@97| |lo#0@@34| |hi#0@@34|))) :qid |totalord.482:12| :skolemid |12436| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@565) |s#0@@163| |key#0@@97| |lo#0@@34| |hi#0@@34|)) )))
(assert (forall (($ly@@566 T@U) (|s#0@@164| T@U) (|key#0@@98| Int) (|lo#0@@35| Int) (|hi#0@@35| Int) ) (!  (=> (and (= (type $ly@@566) LayerTypeType) (= (type |s#0@@164|) (SeqType BoxType))) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@566 |s#0@@164| |key#0@@98| |lo#0@@35| |hi#0@@35|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter $LZ |s#0@@164| |key#0@@98| |lo#0@@35| |hi#0@@35|))) :qid |totalord.482:12| :skolemid |12437| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter (AsFuelBottom $ly@@566) |s#0@@164| |key#0@@98| |lo#0@@35| |hi#0@@35|)) )))
(assert  (=> true (forall (($ly@@567 T@U) (|s#0@@165| T@U) (|key#0@@99| Int) (|lo#0@@36| Int) (|hi#0@@36| Int) ) (!  (=> (and (and (= (type $ly@@567) LayerTypeType) (= (type |s#0@@165|) (SeqType BoxType))) (or (|Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@165| |key#0@@99| |lo#0@@36| |hi#0@@36|) (and ($Is |s#0@@165| (TSeq TInt)) (and (and (and (and (<= (LitInt 0) |lo#0@@36|) (< |lo#0@@36| |hi#0@@36|)) (<= |hi#0@@36| (+ (|Seq#Length| |s#0@@165|) 1))) (=> (> |lo#0@@36| 0) (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@165| (- |lo#0@@36| 1)))) |key#0@@99|))) (=> (<= |hi#0@@36| (|Seq#Length| |s#0@@165|)) (Integer__Order.__default.lt |key#0@@99| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@165| (- |hi#0@@36| 1)))))))))) (and (and (and (<= (LitInt 0) (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@567 |s#0@@165| |key#0@@99| |lo#0@@36| |hi#0@@36|)) (<= (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@567 |s#0@@165| |key#0@@99| |lo#0@@36| |hi#0@@36|) (|Seq#Length| |s#0@@165|))) (=> (> (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@567 |s#0@@165| |key#0@@99| |lo#0@@36| |hi#0@@36|) 0) (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@165| (- (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@567 |s#0@@165| |key#0@@99| |lo#0@@36| |hi#0@@36|) 1)))) |key#0@@99|))) (=> (< (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@567 |s#0@@165| |key#0@@99| |lo#0@@36| |hi#0@@36|) (|Seq#Length| |s#0@@165|)) (Integer__Order.__default.lt |key#0@@99| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@165| (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@567 |s#0@@165| |key#0@@99| |lo#0@@36| |hi#0@@36|)))))))) :qid |totalord.482:12| :skolemid |12438| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@567 |s#0@@165| |key#0@@99| |lo#0@@36| |hi#0@@36|)) ))))
(assert (forall (($ly@@568 T@U) (|s#0@@166| T@U) (|key#0@@100| Int) (|lo#0@@37| Int) (|hi#0@@37| Int) ) (!  (=> (and (and (= (type $ly@@568) LayerTypeType) (= (type |s#0@@166|) (SeqType BoxType))) ($Is |s#0@@166| (TSeq TInt))) (and (=> (|Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@568 |s#0@@166| |key#0@@100| |lo#0@@37| |hi#0@@37|) (and (and (and (and (<= (LitInt 0) |lo#0@@37|) (< |lo#0@@37| |hi#0@@37|)) (<= |hi#0@@37| (+ (|Seq#Length| |s#0@@166|) 1))) (=> (> |lo#0@@37| 0) (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@166| (- |lo#0@@37| 1)))) |key#0@@100|))) (=> (<= |hi#0@@37| (|Seq#Length| |s#0@@166|)) (Integer__Order.__default.lt |key#0@@100| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@166| (- |hi#0@@37| 1)))))))) (=> (and (and (and (and (<= (LitInt 0) |lo#0@@37|) (< |lo#0@@37| |hi#0@@37|)) (<= |hi#0@@37| (+ (|Seq#Length| |s#0@@166|) 1))) (=> (> |lo#0@@37| 0) (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@166| (- |lo#0@@37| 1)))) |key#0@@100|))) (=> (<= |hi#0@@37| (|Seq#Length| |s#0@@166|)) (Integer__Order.__default.lt |key#0@@100| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@166| (- |hi#0@@37| 1))))))) (|Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@568 |s#0@@166| |key#0@@100| |lo#0@@37| |hi#0@@37|)))) :qid |totalord.482:12| :skolemid |12439| :pattern ( (|Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@568 |s#0@@166| |key#0@@100| |lo#0@@37| |hi#0@@37|)) )))
(assert  (=> true (forall (($ly@@569 T@U) (|s#0@@167| T@U) (|key#0@@101| Int) (|lo#0@@38| Int) (|hi#0@@38| Int) ) (!  (=> (and (and (= (type $ly@@569) LayerTypeType) (= (type |s#0@@167|) (SeqType BoxType))) (or (|Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@167| |key#0@@101| |lo#0@@38| |hi#0@@38|) (and ($Is |s#0@@167| (TSeq TInt)) (and (and (and (and (<= (LitInt 0) |lo#0@@38|) (< |lo#0@@38| |hi#0@@38|)) (<= |hi#0@@38| (+ (|Seq#Length| |s#0@@167|) 1))) (=> (> |lo#0@@38| 0) (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@167| (- |lo#0@@38| 1)))) |key#0@@101|))) (=> (<= |hi#0@@38| (|Seq#Length| |s#0@@167|)) (Integer__Order.__default.lt |key#0@@101| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@167| (- |hi#0@@38| 1)))))))))) (and (=> (< (+ |lo#0@@38| 1) |hi#0@@38|) (let ((|mid#3@@9| (Div (+ |lo#0@@38| |hi#0@@38|) (LitInt 2)))) (and (and (|Integer__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@167| (- |mid#3@@9| 1)))) |key#0@@101|) (=> (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@167| (- |mid#3@@9| 1)))) |key#0@@101|) (|Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@167| |key#0@@101| |mid#3@@9| |hi#0@@38|))) (=> (not (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@167| (- |mid#3@@9| 1)))) |key#0@@101|)) (|Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@167| |key#0@@101| |lo#0@@38| |mid#3@@9|))))) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@569) |s#0@@167| |key#0@@101| |lo#0@@38| |hi#0@@38|) (ite (< (+ |lo#0@@38| 1) |hi#0@@38|) (let ((|mid#3@@10| (Div (+ |lo#0@@38| |hi#0@@38|) (LitInt 2)))) (ite (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@167| (- |mid#3@@10| 1)))) |key#0@@101|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@569 |s#0@@167| |key#0@@101| |mid#3@@10| |hi#0@@38|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@569 |s#0@@167| |key#0@@101| |lo#0@@38| |mid#3@@10|))) |lo#0@@38|)))) :qid |totalord.482:12| :skolemid |12440| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@569) |s#0@@167| |key#0@@101| |lo#0@@38| |hi#0@@38|)) ))))
(assert  (=> true (forall (($ly@@570 T@U) (|s#0@@168| T@U) (|key#0@@102| Int) (|lo#0@@39| Int) (|hi#0@@39| Int) ) (!  (=> (and (and (= (type $ly@@570) LayerTypeType) (= (type |s#0@@168|) (SeqType BoxType))) (or (|Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@168| |key#0@@102| (LitInt |lo#0@@39|) (LitInt |hi#0@@39|)) (and ($Is |s#0@@168| (TSeq TInt)) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@39|)) (< |lo#0@@39| |hi#0@@39|)) (<= (LitInt |hi#0@@39|) (+ (|Seq#Length| |s#0@@168|) 1))) (=> (> |lo#0@@39| 0) (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@168| (LitInt (- |lo#0@@39| 1))))) |key#0@@102|))) (=> (<= (LitInt |hi#0@@39|) (|Seq#Length| |s#0@@168|)) (Integer__Order.__default.lt |key#0@@102| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@168| (LitInt (- |hi#0@@39| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@39| 1) |hi#0@@39|)))) (let ((|mid#4@@9| (LitInt (Div (+ |lo#0@@39| |hi#0@@39|) (LitInt 2))))) (and (and (|Integer__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@168| (- |mid#4@@9| 1)))) |key#0@@102|) (=> (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@168| (- |mid#4@@9| 1)))) |key#0@@102|) (|Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@168| |key#0@@102| |mid#4@@9| (LitInt |hi#0@@39|)))) (=> (not (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@168| (- |mid#4@@9| 1)))) |key#0@@102|)) (|Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@168| |key#0@@102| (LitInt |lo#0@@39|) |mid#4@@9|))))) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@570) |s#0@@168| |key#0@@102| (LitInt |lo#0@@39|) (LitInt |hi#0@@39|)) (ite (< (+ |lo#0@@39| 1) |hi#0@@39|) (let ((|mid#4@@10| (LitInt (Div (+ |lo#0@@39| |hi#0@@39|) (LitInt 2))))) (ite (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@168| (LitInt (- |mid#4@@10| 1))))) |key#0@@102|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@570) |s#0@@168| |key#0@@102| |mid#4@@10| (LitInt |hi#0@@39|)) (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@570) |s#0@@168| |key#0@@102| (LitInt |lo#0@@39|) |mid#4@@10|))) |lo#0@@39|)))) :qid |totalord.482:12| :weight 3 :skolemid |12441| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@570) |s#0@@168| |key#0@@102| (LitInt |lo#0@@39|) (LitInt |hi#0@@39|))) ))))
(assert  (=> true (forall (($ly@@571 T@U) (|s#0@@169| T@U) (|key#0@@103| Int) (|lo#0@@40| Int) (|hi#0@@40| Int) ) (!  (=> (and (and (= (type $ly@@571) LayerTypeType) (= (type |s#0@@169|) (SeqType BoxType))) (or (|Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@169|) (LitInt |key#0@@103|) (LitInt |lo#0@@40|) (LitInt |hi#0@@40|)) (and ($Is |s#0@@169| (TSeq TInt)) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@40|)) (< |lo#0@@40| |hi#0@@40|)) (<= (LitInt |hi#0@@40|) (+ (|Seq#Length| (Lit |s#0@@169|)) 1))) (=> (> |lo#0@@40| 0) (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@169|) (LitInt (- |lo#0@@40| 1))))) (LitInt |key#0@@103|)))) (=> (<= (LitInt |hi#0@@40|) (|Seq#Length| (Lit |s#0@@169|))) (Integer__Order.__default.lt (LitInt |key#0@@103|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@169|) (LitInt (- |hi#0@@40| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@40| 1) |hi#0@@40|)))) (let ((|mid#5@@9| (LitInt (Div (+ |lo#0@@40| |hi#0@@40|) (LitInt 2))))) (and (and (|Integer__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@169|) (- |mid#5@@9| 1)))) (LitInt |key#0@@103|)) (=> (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@169|) (- |mid#5@@9| 1)))) (LitInt |key#0@@103|)) (|Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@169|) (LitInt |key#0@@103|) |mid#5@@9| (LitInt |hi#0@@40|)))) (=> (not (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@169|) (- |mid#5@@9| 1)))) (LitInt |key#0@@103|))) (|Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@169|) (LitInt |key#0@@103|) (LitInt |lo#0@@40|) |mid#5@@9|))))) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@571) (Lit |s#0@@169|) (LitInt |key#0@@103|) (LitInt |lo#0@@40|) (LitInt |hi#0@@40|)) (ite (< (+ |lo#0@@40| 1) |hi#0@@40|) (let ((|mid#5@@10| (LitInt (Div (+ |lo#0@@40| |hi#0@@40|) (LitInt 2))))) (ite (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@169|) (LitInt (- |mid#5@@10| 1))))) (LitInt |key#0@@103|)) (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@571) (Lit |s#0@@169|) (LitInt |key#0@@103|) |mid#5@@10| (LitInt |hi#0@@40|)) (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@571) (Lit |s#0@@169|) (LitInt |key#0@@103|) (LitInt |lo#0@@40|) |mid#5@@10|))) |lo#0@@40|)))) :qid |totalord.482:12| :weight 3 :skolemid |12442| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@571) (Lit |s#0@@169|) (LitInt |key#0@@103|) (LitInt |lo#0@@40|) (LitInt |hi#0@@40|))) ))))
(assert (forall (($ly@@572 T@U) (|s#0@@170| T@U) (|key#0@@104| Int) ) (!  (=> (and (= (type $ly@@572) LayerTypeType) (= (type |s#0@@170|) (SeqType BoxType))) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@572) |s#0@@170| |key#0@@104|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@572 |s#0@@170| |key#0@@104|))) :qid |totalord.502:22| :skolemid |12443| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@572) |s#0@@170| |key#0@@104|)) )))
(assert (forall (($ly@@573 T@U) (|s#0@@171| T@U) (|key#0@@105| Int) ) (!  (=> (and (= (type $ly@@573) LayerTypeType) (= (type |s#0@@171|) (SeqType BoxType))) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@573 |s#0@@171| |key#0@@105|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGt $LZ |s#0@@171| |key#0@@105|))) :qid |totalord.502:22| :skolemid |12444| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGt (AsFuelBottom $ly@@573) |s#0@@171| |key#0@@105|)) )))
(assert  (=> true (forall (($ly@@574 T@U) (|s#0@@172| T@U) (|key#0@@106| Int) ) (!  (=> (and (and (= (type $ly@@574) LayerTypeType) (= (type |s#0@@172|) (SeqType BoxType))) (or (|Integer__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@172| |key#0@@106|) ($Is |s#0@@172| (TSeq TInt)))) (and (and (and (<= (LitInt 0) (Integer__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@574 |s#0@@172| |key#0@@106|)) (<= (Integer__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@574 |s#0@@172| |key#0@@106|) (|Seq#Length| |s#0@@172|))) (=> (> (Integer__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@574 |s#0@@172| |key#0@@106|) 0) (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@172| (- (Integer__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@574 |s#0@@172| |key#0@@106|) 1)))) |key#0@@106|))) (=> (< (Integer__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@574 |s#0@@172| |key#0@@106|) (|Seq#Length| |s#0@@172|)) (Integer__Order.__default.lt |key#0@@106| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@172| (Integer__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@574 |s#0@@172| |key#0@@106|)))))))) :qid |totalord.502:22| :skolemid |12445| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@574 |s#0@@172| |key#0@@106|)) ))))
(assert (forall (($ly@@575 T@U) (|s#0@@173| T@U) (|key#0@@107| Int) ) (!  (=> (and (and (= (type $ly@@575) LayerTypeType) (= (type |s#0@@173|) (SeqType BoxType))) ($Is |s#0@@173| (TSeq TInt))) (and (=> (|Integer__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@575 |s#0@@173| |key#0@@107|) true) (=> true (|Integer__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@575 |s#0@@173| |key#0@@107|)))) :qid |totalord.502:22| :skolemid |12446| :pattern ( (|Integer__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@575 |s#0@@173| |key#0@@107|)) )))
(assert  (=> true (forall (($ly@@576 T@U) (|s#0@@174| T@U) (|key#0@@108| Int) ) (!  (=> (and (and (= (type $ly@@576) LayerTypeType) (= (type |s#0@@174|) (SeqType BoxType))) (or (|Integer__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@174| |key#0@@108|) ($Is |s#0@@174| (TSeq TInt)))) (and (|Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@174| |key#0@@108| (LitInt 0) (+ (|Seq#Length| |s#0@@174|) 1)) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@576) |s#0@@174| |key#0@@108|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) |s#0@@174| |key#0@@108| (LitInt 0) (+ (|Seq#Length| |s#0@@174|) 1))))) :qid |totalord.502:22| :skolemid |12447| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@576) |s#0@@174| |key#0@@108|)) ))))
(assert  (=> true (forall (($ly@@577 T@U) (|s#0@@175| T@U) (|key#0@@109| Int) ) (!  (=> (and (and (= (type $ly@@577) LayerTypeType) (= (type |s#0@@175|) (SeqType BoxType))) (or (|Integer__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (Lit |s#0@@175|) (LitInt |key#0@@109|)) ($Is |s#0@@175| (TSeq TInt)))) (and (|Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@175|) (LitInt |key#0@@109|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@175|)) 1)) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@577) (Lit |s#0@@175|) (LitInt |key#0@@109|)) (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) (Lit |s#0@@175|) (LitInt |key#0@@109|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@175|)) 1))))) :qid |totalord.502:22| :weight 3 :skolemid |12448| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@577) (Lit |s#0@@175|) (LitInt |key#0@@109|))) ))))
(assert  (=> true (forall ((|a#0@@158| T@U) (|b#0@@120| T@U) ) (!  (=> (and (and (= (type |a#0@@158|) (MapType0Type BoxType boolType)) (= (type |b#0@@120|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.SetAllLte#canCall| |a#0@@158| |b#0@@120|) (and ($Is |a#0@@158| (TSet TInt)) ($Is |b#0@@120| (TSet TInt))))) true) :qid |totalord.675:23| :skolemid |12449| :pattern ( (Integer__Order.__default.SetAllLte |a#0@@158| |b#0@@120|)) ))))
(assert (forall ((|a#0@@159| T@U) (|b#0@@121| T@U) ) (!  (=> (and (and (= (type |a#0@@159|) (MapType0Type BoxType boolType)) (= (type |b#0@@121|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@159| (TSet TInt)) ($Is |b#0@@121| (TSet TInt)))) (and (=> (|Integer__Order.__default.SetAllLte#requires| |a#0@@159| |b#0@@121|) true) (=> true (|Integer__Order.__default.SetAllLte#requires| |a#0@@159| |b#0@@121|)))) :qid |totalord.675:23| :skolemid |12450| :pattern ( (|Integer__Order.__default.SetAllLte#requires| |a#0@@159| |b#0@@121|)) )))
(assert  (=> true (forall ((|a#0@@160| T@U) (|b#0@@122| T@U) ) (!  (=> (and (and (= (type |a#0@@160|) (MapType0Type BoxType boolType)) (= (type |b#0@@122|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.SetAllLte#canCall| |a#0@@160| |b#0@@122|) (and ($Is |a#0@@160| (TSet TInt)) ($Is |b#0@@122| (TSet TInt))))) (and (forall ((|x#2@@11| Int) (|y#2@@11| Int) ) (!  (=> (U_2_bool (MapType0Select |b#0@@122| ($Box (int_2_U |y#2@@11|)))) (|Integer__Order.__default.lte#canCall| |x#2@@11| |y#2@@11|)) :qid |totalord.676:12| :skolemid |12451| :pattern ( (Integer__Order.__default.lte |x#2@@11| |y#2@@11|)) :pattern ( (MapType0Select |b#0@@122| ($Box (int_2_U |y#2@@11|))) (MapType0Select |a#0@@160| ($Box (int_2_U |x#2@@11|)))) )) (and (=> (Integer__Order.__default.SetAllLte |a#0@@160| |b#0@@122|) (forall ((|x#2@@12| Int) (|y#2@@12| Int) ) (!  (=> true (=> (and (U_2_bool (MapType0Select |a#0@@160| ($Box (int_2_U |x#2@@12|)))) (U_2_bool (MapType0Select |b#0@@122| ($Box (int_2_U |y#2@@12|))))) (Integer__Order.__default.lte |x#2@@12| |y#2@@12|))) :qid |totalord.676:12| :skolemid |12452| :pattern ( (Integer__Order.__default.lte |x#2@@12| |y#2@@12|)) :pattern ( (MapType0Select |b#0@@122| ($Box (int_2_U |y#2@@12|))) (MapType0Select |a#0@@160| ($Box (int_2_U |x#2@@12|)))) ))) (=> (forall ((|x#2@@13| Int) (|y#2@@13| Int) ) (!  (=> true (=> (and (U_2_bool (MapType0Select |a#0@@160| ($Box (int_2_U |x#2@@13|)))) (U_2_bool (MapType0Select |b#0@@122| ($Box (int_2_U |y#2@@13|))))) (Integer__Order.__default.lte |x#2@@13| |y#2@@13|))) :qid |totalord.676:12| :skolemid |12452| :pattern ( (Integer__Order.__default.lte |x#2@@13| |y#2@@13|)) :pattern ( (MapType0Select |b#0@@122| ($Box (int_2_U |y#2@@13|))) (MapType0Select |a#0@@160| ($Box (int_2_U |x#2@@13|)))) )) (Integer__Order.__default.SetAllLte |a#0@@160| |b#0@@122|))))) :qid |totalord.675:23| :skolemid |12453| :pattern ( (Integer__Order.__default.SetAllLte |a#0@@160| |b#0@@122|)) ))))
(assert  (=> true (forall ((|a#0@@161| T@U) (|b#0@@123| T@U) ) (!  (=> (and (and (= (type |a#0@@161|) (MapType0Type BoxType boolType)) (= (type |b#0@@123|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.SetAllLte#canCall| (Lit |a#0@@161|) (Lit |b#0@@123|)) (and ($Is |a#0@@161| (TSet TInt)) ($Is |b#0@@123| (TSet TInt))))) (and (forall ((|x#3@@11| Int) (|y#3@@11| Int) ) (!  (=> (U_2_bool (MapType0Select (Lit |b#0@@123|) ($Box (int_2_U |y#3@@11|)))) (|Integer__Order.__default.lte#canCall| |x#3@@11| |y#3@@11|)) :qid |totalord.676:12| :skolemid |12454| :pattern ( (Integer__Order.__default.lte |x#3@@11| |y#3@@11|)) :pattern ( (MapType0Select |b#0@@123| ($Box (int_2_U |y#3@@11|))) (MapType0Select |a#0@@161| ($Box (int_2_U |x#3@@11|)))) )) (and (=> (Integer__Order.__default.SetAllLte (Lit |a#0@@161|) (Lit |b#0@@123|)) (forall ((|x#3@@12| Int) (|y#3@@12| Int) ) (!  (=> true (=> (and (U_2_bool (MapType0Select (Lit |a#0@@161|) ($Box (int_2_U |x#3@@12|)))) (U_2_bool (MapType0Select (Lit |b#0@@123|) ($Box (int_2_U |y#3@@12|))))) (Integer__Order.__default.lte |x#3@@12| |y#3@@12|))) :qid |totalord.676:12| :skolemid |12455| :pattern ( (Integer__Order.__default.lte |x#3@@12| |y#3@@12|)) :pattern ( (MapType0Select |b#0@@123| ($Box (int_2_U |y#3@@12|))) (MapType0Select |a#0@@161| ($Box (int_2_U |x#3@@12|)))) ))) (=> (forall ((|x#3@@13| Int) (|y#3@@13| Int) ) (!  (=> true (=> (and (U_2_bool (MapType0Select (Lit |a#0@@161|) ($Box (int_2_U |x#3@@13|)))) (U_2_bool (MapType0Select (Lit |b#0@@123|) ($Box (int_2_U |y#3@@13|))))) (Integer__Order.__default.lte |x#3@@13| |y#3@@13|))) :qid |totalord.676:12| :skolemid |12455| :pattern ( (Integer__Order.__default.lte |x#3@@13| |y#3@@13|)) :pattern ( (MapType0Select |b#0@@123| ($Box (int_2_U |y#3@@13|))) (MapType0Select |a#0@@161| ($Box (int_2_U |x#3@@13|)))) )) (Integer__Order.__default.SetAllLte (Lit |a#0@@161|) (Lit |b#0@@123|)))))) :qid |totalord.675:23| :weight 3 :skolemid |12456| :pattern ( (Integer__Order.__default.SetAllLte (Lit |a#0@@161|) (Lit |b#0@@123|))) ))))
(assert  (=> true (forall ((|a#0@@162| T@U) (|b#0@@124| T@U) ) (!  (=> (and (and (= (type |a#0@@162|) (MapType0Type BoxType boolType)) (= (type |b#0@@124|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.SetAllLt#canCall| |a#0@@162| |b#0@@124|) (and ($Is |a#0@@162| (TSet TInt)) ($Is |b#0@@124| (TSet TInt))))) true) :qid |totalord.679:22| :skolemid |12457| :pattern ( (Integer__Order.__default.SetAllLt |a#0@@162| |b#0@@124|)) ))))
(assert (forall ((|a#0@@163| T@U) (|b#0@@125| T@U) ) (!  (=> (and (and (= (type |a#0@@163|) (MapType0Type BoxType boolType)) (= (type |b#0@@125|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@163| (TSet TInt)) ($Is |b#0@@125| (TSet TInt)))) (and (=> (|Integer__Order.__default.SetAllLt#requires| |a#0@@163| |b#0@@125|) true) (=> true (|Integer__Order.__default.SetAllLt#requires| |a#0@@163| |b#0@@125|)))) :qid |totalord.679:22| :skolemid |12458| :pattern ( (|Integer__Order.__default.SetAllLt#requires| |a#0@@163| |b#0@@125|)) )))
(assert  (=> true (forall ((|a#0@@164| T@U) (|b#0@@126| T@U) ) (!  (=> (and (and (= (type |a#0@@164|) (MapType0Type BoxType boolType)) (= (type |b#0@@126|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.SetAllLt#canCall| |a#0@@164| |b#0@@126|) (and ($Is |a#0@@164| (TSet TInt)) ($Is |b#0@@126| (TSet TInt))))) (and (forall ((|x#2@@14| Int) (|y#2@@14| Int) ) (!  (=> (U_2_bool (MapType0Select |b#0@@126| ($Box (int_2_U |y#2@@14|)))) (|Integer__Order.__default.lt#canCall| |x#2@@14| |y#2@@14|)) :qid |totalord.680:12| :skolemid |12459| :pattern ( (Integer__Order.__default.lt |x#2@@14| |y#2@@14|)) :pattern ( (MapType0Select |b#0@@126| ($Box (int_2_U |y#2@@14|))) (MapType0Select |a#0@@164| ($Box (int_2_U |x#2@@14|)))) )) (and (=> (Integer__Order.__default.SetAllLt |a#0@@164| |b#0@@126|) (forall ((|x#2@@15| Int) (|y#2@@15| Int) ) (!  (=> true (=> (and (U_2_bool (MapType0Select |a#0@@164| ($Box (int_2_U |x#2@@15|)))) (U_2_bool (MapType0Select |b#0@@126| ($Box (int_2_U |y#2@@15|))))) (Integer__Order.__default.lt |x#2@@15| |y#2@@15|))) :qid |totalord.680:12| :skolemid |12460| :pattern ( (Integer__Order.__default.lt |x#2@@15| |y#2@@15|)) :pattern ( (MapType0Select |b#0@@126| ($Box (int_2_U |y#2@@15|))) (MapType0Select |a#0@@164| ($Box (int_2_U |x#2@@15|)))) ))) (=> (forall ((|x#2@@16| Int) (|y#2@@16| Int) ) (!  (=> true (=> (and (U_2_bool (MapType0Select |a#0@@164| ($Box (int_2_U |x#2@@16|)))) (U_2_bool (MapType0Select |b#0@@126| ($Box (int_2_U |y#2@@16|))))) (Integer__Order.__default.lt |x#2@@16| |y#2@@16|))) :qid |totalord.680:12| :skolemid |12460| :pattern ( (Integer__Order.__default.lt |x#2@@16| |y#2@@16|)) :pattern ( (MapType0Select |b#0@@126| ($Box (int_2_U |y#2@@16|))) (MapType0Select |a#0@@164| ($Box (int_2_U |x#2@@16|)))) )) (Integer__Order.__default.SetAllLt |a#0@@164| |b#0@@126|))))) :qid |totalord.679:22| :skolemid |12461| :pattern ( (Integer__Order.__default.SetAllLt |a#0@@164| |b#0@@126|)) ))))
(assert  (=> true (forall ((|a#0@@165| T@U) (|b#0@@127| T@U) ) (!  (=> (and (and (= (type |a#0@@165|) (MapType0Type BoxType boolType)) (= (type |b#0@@127|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.SetAllLt#canCall| (Lit |a#0@@165|) (Lit |b#0@@127|)) (and ($Is |a#0@@165| (TSet TInt)) ($Is |b#0@@127| (TSet TInt))))) (and (forall ((|x#3@@14| Int) (|y#3@@14| Int) ) (!  (=> (U_2_bool (MapType0Select (Lit |b#0@@127|) ($Box (int_2_U |y#3@@14|)))) (|Integer__Order.__default.lt#canCall| |x#3@@14| |y#3@@14|)) :qid |totalord.680:12| :skolemid |12462| :pattern ( (Integer__Order.__default.lt |x#3@@14| |y#3@@14|)) :pattern ( (MapType0Select |b#0@@127| ($Box (int_2_U |y#3@@14|))) (MapType0Select |a#0@@165| ($Box (int_2_U |x#3@@14|)))) )) (and (=> (Integer__Order.__default.SetAllLt (Lit |a#0@@165|) (Lit |b#0@@127|)) (forall ((|x#3@@15| Int) (|y#3@@15| Int) ) (!  (=> true (=> (and (U_2_bool (MapType0Select (Lit |a#0@@165|) ($Box (int_2_U |x#3@@15|)))) (U_2_bool (MapType0Select (Lit |b#0@@127|) ($Box (int_2_U |y#3@@15|))))) (Integer__Order.__default.lt |x#3@@15| |y#3@@15|))) :qid |totalord.680:12| :skolemid |12463| :pattern ( (Integer__Order.__default.lt |x#3@@15| |y#3@@15|)) :pattern ( (MapType0Select |b#0@@127| ($Box (int_2_U |y#3@@15|))) (MapType0Select |a#0@@165| ($Box (int_2_U |x#3@@15|)))) ))) (=> (forall ((|x#3@@16| Int) (|y#3@@16| Int) ) (!  (=> true (=> (and (U_2_bool (MapType0Select (Lit |a#0@@165|) ($Box (int_2_U |x#3@@16|)))) (U_2_bool (MapType0Select (Lit |b#0@@127|) ($Box (int_2_U |y#3@@16|))))) (Integer__Order.__default.lt |x#3@@16| |y#3@@16|))) :qid |totalord.680:12| :skolemid |12463| :pattern ( (Integer__Order.__default.lt |x#3@@16| |y#3@@16|)) :pattern ( (MapType0Select |b#0@@127| ($Box (int_2_U |y#3@@16|))) (MapType0Select |a#0@@165| ($Box (int_2_U |x#3@@16|)))) )) (Integer__Order.__default.SetAllLt (Lit |a#0@@165|) (Lit |b#0@@127|)))))) :qid |totalord.679:22| :weight 3 :skolemid |12464| :pattern ( (Integer__Order.__default.SetAllLt (Lit |a#0@@165|) (Lit |b#0@@127|))) ))))
(assert (forall (($ly@@578 T@U) (|a#0@@166| Int) ) (!  (=> (= (type $ly@@578) LayerTypeType) (and (=> (Integer__Order.__default.NotMinimum ($LS $ly@@578) |a#0@@166|) (Integer__Order.__default.NotMinimum $ly@@578 |a#0@@166|)) (=> (Integer__Order.__default.NotMinimum $ly@@578 |a#0@@166|) (Integer__Order.__default.NotMinimum ($LS $ly@@578) |a#0@@166|)))) :qid |totalord.696:23| :skolemid |12465| :pattern ( (Integer__Order.__default.NotMinimum ($LS $ly@@578) |a#0@@166|)) )))
(assert (forall (($ly@@579 T@U) (|a#0@@167| Int) ) (!  (=> (= (type $ly@@579) LayerTypeType) (and (=> (Integer__Order.__default.NotMinimum $ly@@579 |a#0@@167|) (Integer__Order.__default.NotMinimum $LZ |a#0@@167|)) (=> (Integer__Order.__default.NotMinimum $LZ |a#0@@167|) (Integer__Order.__default.NotMinimum $ly@@579 |a#0@@167|)))) :qid |totalord.696:23| :skolemid |12466| :pattern ( (Integer__Order.__default.NotMinimum (AsFuelBottom $ly@@579) |a#0@@167|)) )))
(assert  (=> true (forall (($ly@@580 T@U) (|a#0@@168| Int) ) (!  (=> (and (= (type $ly@@580) LayerTypeType) true) true) :qid |totalord.696:23| :skolemid |12467| :pattern ( (Integer__Order.__default.NotMinimum $ly@@580 |a#0@@168|)) ))))
(assert (forall (($ly@@581 T@U) (|a#0@@169| Int) ) (!  (=> (= (type $ly@@581) LayerTypeType) (and (=> (|Integer__Order.__default.NotMinimum#requires| $ly@@581 |a#0@@169|) true) (=> true (|Integer__Order.__default.NotMinimum#requires| $ly@@581 |a#0@@169|)))) :qid |totalord.696:23| :skolemid |12468| :pattern ( (|Integer__Order.__default.NotMinimum#requires| $ly@@581 |a#0@@169|)) )))
(assert  (=> true (forall (($ly@@582 T@U) (|a#0@@170| Int) ) (!  (=> (and (= (type $ly@@582) LayerTypeType) true) (and (forall ((|b#2@@10| Int) ) (! (|Integer__Order.__default.lt#canCall| |b#2@@10| |a#0@@170|) :qid |totalord.697:12| :skolemid |12469| :pattern ( (Integer__Order.__default.lt |b#2@@10| |a#0@@170|)) )) (and (=> (Integer__Order.__default.NotMinimum ($LS $ly@@582) |a#0@@170|) (exists ((|b#2@@11| Int) ) (! (Integer__Order.__default.lt |b#2@@11| |a#0@@170|) :qid |totalord.697:12| :skolemid |12470| :pattern ( (Integer__Order.__default.lt |b#2@@11| |a#0@@170|)) ))) (=> (exists ((|b#2@@12| Int) ) (! (Integer__Order.__default.lt |b#2@@12| |a#0@@170|) :qid |totalord.697:12| :skolemid |12470| :pattern ( (Integer__Order.__default.lt |b#2@@12| |a#0@@170|)) )) (Integer__Order.__default.NotMinimum ($LS $ly@@582) |a#0@@170|))))) :qid |totalord.696:23| :skolemid |12471| :pattern ( (Integer__Order.__default.NotMinimum ($LS $ly@@582) |a#0@@170|)) ))))
(assert  (=> true (forall (($ly@@583 T@U) (|a#0@@171| Int) ) (!  (=> (and (= (type $ly@@583) LayerTypeType) true) (and (forall ((|b#3@@13| Int) ) (! (|Integer__Order.__default.lt#canCall| |b#3@@13| (LitInt |a#0@@171|)) :qid |totalord.697:12| :skolemid |12472| :pattern ( (Integer__Order.__default.lt |b#3@@13| |a#0@@171|)) )) (and (=> (Integer__Order.__default.NotMinimum ($LS $ly@@583) (LitInt |a#0@@171|)) (exists ((|b#3@@14| Int) ) (! (Integer__Order.__default.lt |b#3@@14| (LitInt |a#0@@171|)) :qid |totalord.697:12| :skolemid |12473| :pattern ( (Integer__Order.__default.lt |b#3@@14| |a#0@@171|)) ))) (=> (exists ((|b#3@@15| Int) ) (! (Integer__Order.__default.lt |b#3@@15| (LitInt |a#0@@171|)) :qid |totalord.697:12| :skolemid |12473| :pattern ( (Integer__Order.__default.lt |b#3@@15| |a#0@@171|)) )) (Integer__Order.__default.NotMinimum ($LS $ly@@583) (LitInt |a#0@@171|)))))) :qid |totalord.696:23| :weight 3 :skolemid |12474| :pattern ( (Integer__Order.__default.NotMinimum ($LS $ly@@583) (LitInt |a#0@@171|))) ))))
(assert (forall ((arg0@@338 T@U) (arg1@@202 T@U) (arg2@@128 Int) (arg3@@88 T@U) ) (! (= (type (Integer__Order.__default.MapPivotedUnion arg0@@338 arg1@@202 arg2@@128 arg3@@88)) (MapType BoxType BoxType)) :qid |funType:Integer__Order.__default.MapPivotedUnion| :pattern ( (Integer__Order.__default.MapPivotedUnion arg0@@338 arg1@@202 arg2@@128 arg3@@88)) )))
(assert  (=> true (forall ((Integer_Order._default.MapPivotedUnion$Value T@U) (|left#0@@7| T@U) (|pivot#0@@7| Int) (|right#0@@7| T@U) ) (!  (=> (and (and (and (= (type Integer_Order._default.MapPivotedUnion$Value) TyType) (= (type |left#0@@7|) (MapType BoxType BoxType))) (= (type |right#0@@7|) (MapType BoxType BoxType))) (or (|Integer__Order.__default.MapPivotedUnion#canCall| Integer_Order._default.MapPivotedUnion$Value |left#0@@7| |pivot#0@@7| |right#0@@7|) (and ($Is |left#0@@7| (TMap TInt Integer_Order._default.MapPivotedUnion$Value)) ($Is |right#0@@7| (TMap TInt Integer_Order._default.MapPivotedUnion$Value))))) ($Is (Integer__Order.__default.MapPivotedUnion Integer_Order._default.MapPivotedUnion$Value |left#0@@7| |pivot#0@@7| |right#0@@7|) (TMap TInt Integer_Order._default.MapPivotedUnion$Value))) :qid |unknown.0:0| :skolemid |12475| :pattern ( (Integer__Order.__default.MapPivotedUnion Integer_Order._default.MapPivotedUnion$Value |left#0@@7| |pivot#0@@7| |right#0@@7|)) ))))
(assert (forall ((Integer_Order._default.MapPivotedUnion$Value@@0 T@U) (|left#0@@8| T@U) (|pivot#0@@8| Int) (|right#0@@8| T@U) ) (!  (=> (and (and (and (= (type Integer_Order._default.MapPivotedUnion$Value@@0) TyType) (= (type |left#0@@8|) (MapType BoxType BoxType))) (= (type |right#0@@8|) (MapType BoxType BoxType))) (and ($Is |left#0@@8| (TMap TInt Integer_Order._default.MapPivotedUnion$Value@@0)) ($Is |right#0@@8| (TMap TInt Integer_Order._default.MapPivotedUnion$Value@@0)))) (and (=> (|Integer__Order.__default.MapPivotedUnion#requires| Integer_Order._default.MapPivotedUnion$Value@@0 |left#0@@8| |pivot#0@@8| |right#0@@8|) true) (=> true (|Integer__Order.__default.MapPivotedUnion#requires| Integer_Order._default.MapPivotedUnion$Value@@0 |left#0@@8| |pivot#0@@8| |right#0@@8|)))) :qid |unknown.0:0| :skolemid |12476| :pattern ( (|Integer__Order.__default.MapPivotedUnion#requires| Integer_Order._default.MapPivotedUnion$Value@@0 |left#0@@8| |pivot#0@@8| |right#0@@8|)) )))
(assert  (and (forall ((arg0@@339 T@U) (arg1@@203 Int) ) (! (= (type (|lambda#160| arg0@@339 arg1@@203)) (MapType0Type BoxType boolType)) :qid |funType:lambda#160| :pattern ( (|lambda#160| arg0@@339 arg1@@203)) )) (forall ((arg0@@340 T@U) (arg1@@204 Int) ) (! (= (type (|lambda#161| arg0@@340 arg1@@204)) (MapType0Type BoxType boolType)) :qid |funType:lambda#161| :pattern ( (|lambda#161| arg0@@340 arg1@@204)) ))))
(assert  (=> true (forall ((Integer_Order._default.MapPivotedUnion$Value@@1 T@U) (|left#0@@9| T@U) (|pivot#0@@9| Int) (|right#0@@9| T@U) ) (!  (=> (and (and (and (= (type Integer_Order._default.MapPivotedUnion$Value@@1) TyType) (= (type |left#0@@9|) (MapType BoxType BoxType))) (= (type |right#0@@9|) (MapType BoxType BoxType))) (or (|Integer__Order.__default.MapPivotedUnion#canCall| Integer_Order._default.MapPivotedUnion$Value@@1 |left#0@@9| |pivot#0@@9| |right#0@@9|) (and ($Is |left#0@@9| (TMap TInt Integer_Order._default.MapPivotedUnion$Value@@1)) ($Is |right#0@@9| (TMap TInt Integer_Order._default.MapPivotedUnion$Value@@1))))) (and (and (and (forall ((|k#4@@8| Int) ) (! (|Integer__Order.__default.lt#canCall| |k#4@@8| |pivot#0@@9|) :qid |totalord.716:57| :skolemid |12477| :pattern ( (Integer__Order.__default.lt |k#4@@8| |pivot#0@@9|)) )) (|Maps.__default.MapIRestrict#canCall| TInt Integer_Order._default.MapPivotedUnion$Value@@1 |left#0@@9| (|lambda#160| TInt |pivot#0@@9|))) (let ((|restricted_left#2@@3| (Maps.__default.MapIRestrict TInt Integer_Order._default.MapPivotedUnion$Value@@1 |left#0@@9| (|lambda#160| TInt |pivot#0@@9|)))) (and (and (forall ((|k#5@@8| Int) ) (! (|Integer__Order.__default.lte#canCall| |pivot#0@@9| |k#5@@8|) :qid |totalord.717:59| :skolemid |12478| :pattern ( (Integer__Order.__default.lte |pivot#0@@9| |k#5@@8|)) )) (|Maps.__default.MapIRestrict#canCall| TInt Integer_Order._default.MapPivotedUnion$Value@@1 |right#0@@9| (|lambda#161| TInt |pivot#0@@9|))) (let ((|restricted_right#2@@3| (Maps.__default.MapIRestrict TInt Integer_Order._default.MapPivotedUnion$Value@@1 |right#0@@9| (|lambda#161| TInt |pivot#0@@9|)))) (|Maps.__default.MapDisjointUnion#canCall| TInt Integer_Order._default.MapPivotedUnion$Value@@1 |restricted_left#2@@3| |restricted_right#2@@3|))))) (= (Integer__Order.__default.MapPivotedUnion Integer_Order._default.MapPivotedUnion$Value@@1 |left#0@@9| |pivot#0@@9| |right#0@@9|) (let ((|restricted_left#2@@4| (Maps.__default.MapIRestrict TInt Integer_Order._default.MapPivotedUnion$Value@@1 |left#0@@9| (|lambda#160| TInt |pivot#0@@9|)))) (let ((|restricted_right#2@@4| (Maps.__default.MapIRestrict TInt Integer_Order._default.MapPivotedUnion$Value@@1 |right#0@@9| (|lambda#161| TInt |pivot#0@@9|)))) (Maps.__default.MapDisjointUnion TInt Integer_Order._default.MapPivotedUnion$Value@@1 StartFuel_Maps._default.MapDisjointUnion |restricted_left#2@@4| |restricted_right#2@@4|)))))) :qid |unknown.0:0| :skolemid |12479| :pattern ( (Integer__Order.__default.MapPivotedUnion Integer_Order._default.MapPivotedUnion$Value@@1 |left#0@@9| |pivot#0@@9| |right#0@@9|)) ))))
(assert  (=> true (forall ((Integer_Order._default.MapPivotedUnion$Value@@2 T@U) (|left#0@@10| T@U) (|pivot#0@@10| Int) (|right#0@@10| T@U) ) (!  (=> (and (and (and (= (type Integer_Order._default.MapPivotedUnion$Value@@2) TyType) (= (type |left#0@@10|) (MapType BoxType BoxType))) (= (type |right#0@@10|) (MapType BoxType BoxType))) (or (|Integer__Order.__default.MapPivotedUnion#canCall| Integer_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@10|) (LitInt |pivot#0@@10|) (Lit |right#0@@10|)) (and ($Is |left#0@@10| (TMap TInt Integer_Order._default.MapPivotedUnion$Value@@2)) ($Is |right#0@@10| (TMap TInt Integer_Order._default.MapPivotedUnion$Value@@2))))) (and (and (and (forall ((|k#6@@1| Int) ) (! (|Integer__Order.__default.lt#canCall| |k#6@@1| (LitInt |pivot#0@@10|)) :qid |totalord.716:57| :skolemid |12480| :pattern ( (Integer__Order.__default.lt |k#6@@1| |pivot#0@@10|)) )) (|Maps.__default.MapIRestrict#canCall| TInt Integer_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@10|) (|lambda#160| TInt (LitInt |pivot#0@@10|)))) (let ((|restricted_left#3@@3| (Maps.__default.MapIRestrict TInt Integer_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@10|) (|lambda#160| TInt (LitInt |pivot#0@@10|))))) (and (and (forall ((|k#7@@1| Int) ) (! (|Integer__Order.__default.lte#canCall| (LitInt |pivot#0@@10|) |k#7@@1|) :qid |totalord.717:59| :skolemid |12481| :pattern ( (Integer__Order.__default.lte |pivot#0@@10| |k#7@@1|)) )) (|Maps.__default.MapIRestrict#canCall| TInt Integer_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@10|) (|lambda#161| TInt (LitInt |pivot#0@@10|)))) (let ((|restricted_right#3@@3| (Maps.__default.MapIRestrict TInt Integer_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@10|) (|lambda#161| TInt (LitInt |pivot#0@@10|))))) (|Maps.__default.MapDisjointUnion#canCall| TInt Integer_Order._default.MapPivotedUnion$Value@@2 |restricted_left#3@@3| |restricted_right#3@@3|))))) (= (Integer__Order.__default.MapPivotedUnion Integer_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@10|) (LitInt |pivot#0@@10|) (Lit |right#0@@10|)) (let ((|restricted_left#3@@4| (Maps.__default.MapIRestrict TInt Integer_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@10|) (|lambda#160| TInt (LitInt |pivot#0@@10|))))) (let ((|restricted_right#3@@4| (Maps.__default.MapIRestrict TInt Integer_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@10|) (|lambda#161| TInt (LitInt |pivot#0@@10|))))) (Maps.__default.MapDisjointUnion TInt Integer_Order._default.MapPivotedUnion$Value@@2 StartFuel_Maps._default.MapDisjointUnion |restricted_left#3@@4| |restricted_right#3@@4|)))))) :qid |unknown.0:0| :weight 3 :skolemid |12482| :pattern ( (Integer__Order.__default.MapPivotedUnion Integer_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@10|) (LitInt |pivot#0@@10|) (Lit |right#0@@10|))) ))))
(assert (forall ((arg0@@341 T@U) (arg1@@205 Int) ) (! (= (type (Integer__Order.__default.SetSuccessor arg0@@341 arg1@@205)) DatatypeTypeType) :qid |funType:Integer__Order.__default.SetSuccessor| :pattern ( (Integer__Order.__default.SetSuccessor arg0@@341 arg1@@205)) )))
(assert  (=> true (forall ((|m#0@@117| T@U) (|key#0@@110| Int) ) (!  (=> (and (= (type |m#0@@117|) (MapType0Type BoxType boolType)) (or (|Integer__Order.__default.SetSuccessor#canCall| |m#0@@117| |key#0@@110|) ($Is |m#0@@117| (TSet TInt)))) ($Is (Integer__Order.__default.SetSuccessor |m#0@@117| |key#0@@110|) (Tclass.Options.Option TInt))) :qid |totalord.721:25| :skolemid |12483| :pattern ( (Integer__Order.__default.SetSuccessor |m#0@@117| |key#0@@110|)) ))))
(assert (forall (($Heap@@116 T@U) (|m#0@@118| T@U) (|key#0@@111| Int) ) (!  (=> (and (and (= (type $Heap@@116) (MapType0Type refType MapType1Type)) (= (type |m#0@@118|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@116) ($Is |m#0@@118| (TSet TInt)))) (and (=> (|Integer__Order.__default.SetSuccessor#requires| |m#0@@118| |key#0@@111|) true) (=> true (|Integer__Order.__default.SetSuccessor#requires| |m#0@@118| |key#0@@111|)))) :qid |totalord.721:12| :skolemid |12484| :pattern ( (|Integer__Order.__default.SetSuccessor#requires| |m#0@@118| |key#0@@111|) ($IsGoodHeap $Heap@@116)) )))
(assert (forall ((m@@51 T@U) (key@@1 Int) ) (!  (=> (and (= (type m@@51) (MapType0Type BoxType boolType)) (|$let#22$canCall| m@@51 key@@1)) (and (and (U_2_bool (MapType0Select m@@51 ($Box (int_2_U (|$let#22_next| m@@51 key@@1))))) (Integer__Order.__default.lt key@@1 (|$let#22_next| m@@51 key@@1))) (forall ((|other#4@@1| Int) ) (!  (=> true (=> (and (and (U_2_bool (MapType0Select m@@51 ($Box (int_2_U |other#4@@1|)))) (not (= |other#4@@1| (|$let#22_next| m@@51 key@@1)))) (Integer__Order.__default.lt key@@1 |other#4@@1|)) (Integer__Order.__default.lt (|$let#22_next| m@@51 key@@1) |other#4@@1|))) :qid |totalord.726:18| :skolemid |12489| :pattern ( (Integer__Order.__default.lt (|$let#22_next| m@@51 key@@1) |other#4@@1|)) :pattern ( (Integer__Order.__default.lt key@@1 |other#4@@1|)) :pattern ( (MapType0Select m@@51 ($Box (int_2_U |other#4@@1|)))) )))) :qid |totalord.723:8| :skolemid |12490| :pattern ( (|$let#22_next| m@@51 key@@1)) )))
(assert  (=> true (forall (($Heap@@117 T@U) (|m#0@@119| T@U) (|key#0@@112| Int) ) (!  (=> (and (and (= (type $Heap@@117) (MapType0Type refType MapType1Type)) (= (type |m#0@@119|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.SetSuccessor#canCall| |m#0@@119| |key#0@@112|) (and ($IsGoodHeap $Heap@@117) ($Is |m#0@@119| (TSet TInt))))) (and (and (forall ((|next#4@@5| Int) ) (!  (and (=> (U_2_bool (MapType0Select |m#0@@119| ($Box (int_2_U |next#4@@5|)))) (|Integer__Order.__default.lt#canCall| |key#0@@112| |next#4@@5|)) (=> (and (|Integer__Order.__default.lt#canCall| |key#0@@112| |next#4@@5|) (Integer__Order.__default.lt |key#0@@112| |next#4@@5|)) (forall ((|other#3@@5| Int) ) (!  (and (=> (not (= |other#3@@5| |next#4@@5|)) (|Integer__Order.__default.lt#canCall| |key#0@@112| |other#3@@5|)) (=> (and (|Integer__Order.__default.lt#canCall| |key#0@@112| |other#3@@5|) (Integer__Order.__default.lt |key#0@@112| |other#3@@5|)) (|Integer__Order.__default.lt#canCall| |next#4@@5| |other#3@@5|))) :qid |totalord.726:18| :skolemid |12485| :pattern ( (Integer__Order.__default.lt |next#4@@5| |other#3@@5|)) :pattern ( (Integer__Order.__default.lt |key#0@@112| |other#3@@5|)) :pattern ( (MapType0Select |m#0@@119| ($Box (int_2_U |other#3@@5|)))) )))) :qid |totalord.723:8| :skolemid |12486| :pattern ( (Integer__Order.__default.lt |key#0@@112| |next#4@@5|)) :pattern ( (MapType0Select |m#0@@119| ($Box (int_2_U |next#4@@5|)))) )) (=> (exists ((|next#4@@6| Int) ) (!  (and (and (U_2_bool (MapType0Select |m#0@@119| ($Box (int_2_U |next#4@@6|)))) (Integer__Order.__default.lt |key#0@@112| |next#4@@6|)) (forall ((|other#3@@6| Int) ) (!  (=> true (=> (and (and (U_2_bool (MapType0Select |m#0@@119| ($Box (int_2_U |other#3@@6|)))) (not (= |other#3@@6| |next#4@@6|))) (Integer__Order.__default.lt |key#0@@112| |other#3@@6|)) (Integer__Order.__default.lt |next#4@@6| |other#3@@6|))) :qid |totalord.726:18| :skolemid |12487| :pattern ( (Integer__Order.__default.lt |next#4@@6| |other#3@@6|)) :pattern ( (Integer__Order.__default.lt |key#0@@112| |other#3@@6|)) :pattern ( (MapType0Select |m#0@@119| ($Box (int_2_U |other#3@@6|)))) ))) :qid |totalord.723:8| :skolemid |12488| :pattern ( (Integer__Order.__default.lt |key#0@@112| |next#4@@6|)) :pattern ( (MapType0Select |m#0@@119| ($Box (int_2_U |next#4@@6|)))) )) (|$let#22$canCall| |m#0@@119| |key#0@@112|))) (= (Integer__Order.__default.SetSuccessor |m#0@@119| |key#0@@112|) (ite (exists ((|next#4@@7| Int) ) (!  (and (and (U_2_bool (MapType0Select |m#0@@119| ($Box (int_2_U |next#4@@7|)))) (Integer__Order.__default.lt |key#0@@112| |next#4@@7|)) (forall ((|other#3@@7| Int) ) (!  (=> true (=> (and (and (U_2_bool (MapType0Select |m#0@@119| ($Box (int_2_U |other#3@@7|)))) (not (= |other#3@@7| |next#4@@7|))) (Integer__Order.__default.lt |key#0@@112| |other#3@@7|)) (Integer__Order.__default.lt |next#4@@7| |other#3@@7|))) :qid |totalord.726:18| :skolemid |12491| :pattern ( (Integer__Order.__default.lt |next#4@@7| |other#3@@7|)) :pattern ( (Integer__Order.__default.lt |key#0@@112| |other#3@@7|)) :pattern ( (MapType0Select |m#0@@119| ($Box (int_2_U |other#3@@7|)))) ))) :qid |totalord.723:8| :skolemid |12492| :pattern ( (Integer__Order.__default.lt |key#0@@112| |next#4@@7|)) :pattern ( (MapType0Select |m#0@@119| ($Box (int_2_U |next#4@@7|)))) )) (let ((|next#5@@1| (|$let#22_next| |m#0@@119| |key#0@@112|))) (|#Options.Option.Some| ($Box (int_2_U |next#5@@1|)))) |#Options.Option.None|)))) :qid |totalord.721:12| :skolemid |12493| :pattern ( (Integer__Order.__default.SetSuccessor |m#0@@119| |key#0@@112|) ($IsGoodHeap $Heap@@117)) ))))
(assert  (=> true (forall (($Heap@@118 T@U) (|m#0@@120| T@U) (|key#0@@113| Int) ) (!  (=> (and (and (= (type $Heap@@118) (MapType0Type refType MapType1Type)) (= (type |m#0@@120|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.SetSuccessor#canCall| (Lit |m#0@@120|) (LitInt |key#0@@113|)) (and ($IsGoodHeap $Heap@@118) ($Is |m#0@@120| (TSet TInt))))) (and (and (forall ((|next#6@@5| Int) ) (!  (and (=> (U_2_bool (MapType0Select (Lit |m#0@@120|) ($Box (int_2_U |next#6@@5|)))) (|Integer__Order.__default.lt#canCall| (LitInt |key#0@@113|) |next#6@@5|)) (=> (and (|Integer__Order.__default.lt#canCall| (LitInt |key#0@@113|) |next#6@@5|) (Integer__Order.__default.lt (LitInt |key#0@@113|) |next#6@@5|)) (forall ((|other#5@@5| Int) ) (!  (and (=> (not (= |other#5@@5| |next#6@@5|)) (|Integer__Order.__default.lt#canCall| (LitInt |key#0@@113|) |other#5@@5|)) (=> (and (|Integer__Order.__default.lt#canCall| (LitInt |key#0@@113|) |other#5@@5|) (Integer__Order.__default.lt (LitInt |key#0@@113|) |other#5@@5|)) (|Integer__Order.__default.lt#canCall| |next#6@@5| |other#5@@5|))) :qid |totalord.726:18| :skolemid |12494| :pattern ( (Integer__Order.__default.lt |next#6@@5| |other#5@@5|)) :pattern ( (Integer__Order.__default.lt |key#0@@113| |other#5@@5|)) :pattern ( (MapType0Select |m#0@@120| ($Box (int_2_U |other#5@@5|)))) )))) :qid |totalord.723:8| :skolemid |12495| :pattern ( (Integer__Order.__default.lt |key#0@@113| |next#6@@5|)) :pattern ( (MapType0Select |m#0@@120| ($Box (int_2_U |next#6@@5|)))) )) (=> (exists ((|next#6@@6| Int) ) (!  (and (and (U_2_bool (MapType0Select (Lit |m#0@@120|) ($Box (int_2_U |next#6@@6|)))) (Integer__Order.__default.lt (LitInt |key#0@@113|) |next#6@@6|)) (forall ((|other#5@@6| Int) ) (!  (=> true (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@120|) ($Box (int_2_U |other#5@@6|)))) (not (= |other#5@@6| |next#6@@6|))) (Integer__Order.__default.lt (LitInt |key#0@@113|) |other#5@@6|)) (Integer__Order.__default.lt |next#6@@6| |other#5@@6|))) :qid |totalord.726:18| :skolemid |12496| :pattern ( (Integer__Order.__default.lt |next#6@@6| |other#5@@6|)) :pattern ( (Integer__Order.__default.lt |key#0@@113| |other#5@@6|)) :pattern ( (MapType0Select |m#0@@120| ($Box (int_2_U |other#5@@6|)))) ))) :qid |totalord.723:8| :skolemid |12497| :pattern ( (Integer__Order.__default.lt |key#0@@113| |next#6@@6|)) :pattern ( (MapType0Select |m#0@@120| ($Box (int_2_U |next#6@@6|)))) )) (|$let#22$canCall| (Lit |m#0@@120|) (LitInt |key#0@@113|)))) (= (Integer__Order.__default.SetSuccessor (Lit |m#0@@120|) (LitInt |key#0@@113|)) (ite (exists ((|next#6@@7| Int) ) (!  (and (and (U_2_bool (MapType0Select (Lit |m#0@@120|) ($Box (int_2_U |next#6@@7|)))) (Integer__Order.__default.lt (LitInt |key#0@@113|) |next#6@@7|)) (forall ((|other#5@@7| Int) ) (!  (=> true (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@120|) ($Box (int_2_U |other#5@@7|)))) (not (= |other#5@@7| |next#6@@7|))) (Integer__Order.__default.lt (LitInt |key#0@@113|) |other#5@@7|)) (Integer__Order.__default.lt |next#6@@7| |other#5@@7|))) :qid |totalord.726:18| :skolemid |12498| :pattern ( (Integer__Order.__default.lt |next#6@@7| |other#5@@7|)) :pattern ( (Integer__Order.__default.lt |key#0@@113| |other#5@@7|)) :pattern ( (MapType0Select |m#0@@120| ($Box (int_2_U |other#5@@7|)))) ))) :qid |totalord.723:8| :skolemid |12499| :pattern ( (Integer__Order.__default.lt |key#0@@113| |next#6@@7|)) :pattern ( (MapType0Select |m#0@@120| ($Box (int_2_U |next#6@@7|)))) )) (let ((|next#7@@1| (|$let#22_next| (Lit |m#0@@120|) (LitInt |key#0@@113|)))) (|#Options.Option.Some| ($Box (int_2_U |next#7@@1|)))) |#Options.Option.None|)))) :qid |totalord.721:12| :weight 3 :skolemid |12500| :pattern ( (Integer__Order.__default.SetSuccessor (Lit |m#0@@120|) (LitInt |key#0@@113|)) ($IsGoodHeap $Heap@@118)) ))))
(assert (forall ((arg0@@342 T@U) (arg1@@206 T@U) (arg2@@129 Int) ) (! (= (type (Integer__Order.__default.MapSuccessor arg0@@342 arg1@@206 arg2@@129)) DatatypeTypeType) :qid |funType:Integer__Order.__default.MapSuccessor| :pattern ( (Integer__Order.__default.MapSuccessor arg0@@342 arg1@@206 arg2@@129)) )))
(assert  (=> true (forall ((Integer_Order._default.MapSuccessor$V T@U) (|m#0@@121| T@U) (|key#0@@114| Int) ) (!  (=> (and (and (= (type Integer_Order._default.MapSuccessor$V) TyType) (= (type |m#0@@121|) (MapType BoxType BoxType))) (or (|Integer__Order.__default.MapSuccessor#canCall| Integer_Order._default.MapSuccessor$V |m#0@@121| |key#0@@114|) ($Is |m#0@@121| (TMap TInt Integer_Order._default.MapSuccessor$V)))) ($Is (Integer__Order.__default.MapSuccessor Integer_Order._default.MapSuccessor$V |m#0@@121| |key#0@@114|) (Tclass.Options.Option TInt))) :qid |unknown.0:0| :skolemid |12501| :pattern ( (Integer__Order.__default.MapSuccessor Integer_Order._default.MapSuccessor$V |m#0@@121| |key#0@@114|)) ))))
(assert (forall ((Integer_Order._default.MapSuccessor$V@@0 T@U) (|m#0@@122| T@U) (|key#0@@115| Int) ) (!  (=> (and (and (= (type Integer_Order._default.MapSuccessor$V@@0) TyType) (= (type |m#0@@122|) (MapType BoxType BoxType))) ($Is |m#0@@122| (TMap TInt Integer_Order._default.MapSuccessor$V@@0))) (and (=> (|Integer__Order.__default.MapSuccessor#requires| Integer_Order._default.MapSuccessor$V@@0 |m#0@@122| |key#0@@115|) true) (=> true (|Integer__Order.__default.MapSuccessor#requires| Integer_Order._default.MapSuccessor$V@@0 |m#0@@122| |key#0@@115|)))) :qid |unknown.0:0| :skolemid |12502| :pattern ( (|Integer__Order.__default.MapSuccessor#requires| Integer_Order._default.MapSuccessor$V@@0 |m#0@@122| |key#0@@115|)) )))
(assert  (=> true (forall ((Integer_Order._default.MapSuccessor$V@@1 T@U) (|m#0@@123| T@U) (|key#0@@116| Int) ) (!  (=> (and (and (= (type Integer_Order._default.MapSuccessor$V@@1) TyType) (= (type |m#0@@123|) (MapType BoxType BoxType))) (or (|Integer__Order.__default.MapSuccessor#canCall| Integer_Order._default.MapSuccessor$V@@1 |m#0@@123| |key#0@@116|) ($Is |m#0@@123| (TMap TInt Integer_Order._default.MapSuccessor$V@@1)))) (and (|Integer__Order.__default.SetSuccessor#canCall| (|Map#Domain| |m#0@@123|) |key#0@@116|) (= (Integer__Order.__default.MapSuccessor Integer_Order._default.MapSuccessor$V@@1 |m#0@@123| |key#0@@116|) (Integer__Order.__default.SetSuccessor (|Map#Domain| |m#0@@123|) |key#0@@116|)))) :qid |unknown.0:0| :skolemid |12503| :pattern ( (Integer__Order.__default.MapSuccessor Integer_Order._default.MapSuccessor$V@@1 |m#0@@123| |key#0@@116|)) ))))
(assert  (=> true (forall ((Integer_Order._default.MapSuccessor$V@@2 T@U) (|m#0@@124| T@U) (|key#0@@117| Int) ) (!  (=> (and (and (= (type Integer_Order._default.MapSuccessor$V@@2) TyType) (= (type |m#0@@124|) (MapType BoxType BoxType))) (or (|Integer__Order.__default.MapSuccessor#canCall| Integer_Order._default.MapSuccessor$V@@2 (Lit |m#0@@124|) (LitInt |key#0@@117|)) ($Is |m#0@@124| (TMap TInt Integer_Order._default.MapSuccessor$V@@2)))) (and (|Integer__Order.__default.SetSuccessor#canCall| (Lit (|Map#Domain| (Lit |m#0@@124|))) (LitInt |key#0@@117|)) (= (Integer__Order.__default.MapSuccessor Integer_Order._default.MapSuccessor$V@@2 (Lit |m#0@@124|) (LitInt |key#0@@117|)) (Lit (Integer__Order.__default.SetSuccessor (Lit (|Map#Domain| (Lit |m#0@@124|))) (LitInt |key#0@@117|)))))) :qid |unknown.0:0| :weight 3 :skolemid |12504| :pattern ( (Integer__Order.__default.MapSuccessor Integer_Order._default.MapSuccessor$V@@2 (Lit |m#0@@124|) (LitInt |key#0@@117|))) ))))
(assert (forall ((arg0@@343 T@U) (arg1@@207 Int) ) (! (= (type (Integer__Order.__default.SeqSuccessor arg0@@343 arg1@@207)) DatatypeTypeType) :qid |funType:Integer__Order.__default.SeqSuccessor| :pattern ( (Integer__Order.__default.SeqSuccessor arg0@@343 arg1@@207)) )))
(assert  (=> true (forall ((|m#0@@125| T@U) (|key#0@@118| Int) ) (!  (=> (and (= (type |m#0@@125|) (SeqType BoxType)) (or (|Integer__Order.__default.SeqSuccessor#canCall| |m#0@@125| |key#0@@118|) ($Is |m#0@@125| (TSeq TInt)))) ($Is (Integer__Order.__default.SeqSuccessor |m#0@@125| |key#0@@118|) (Tclass.Options.Option TInt))) :qid |totalord.737:25| :skolemid |12505| :pattern ( (Integer__Order.__default.SeqSuccessor |m#0@@125| |key#0@@118|)) ))))
(assert (forall ((|m#0@@126| T@U) (|key#0@@119| Int) ) (!  (=> (and (= (type |m#0@@126|) (SeqType BoxType)) ($Is |m#0@@126| (TSeq TInt))) (and (=> (|Integer__Order.__default.SeqSuccessor#requires| |m#0@@126| |key#0@@119|) true) (=> true (|Integer__Order.__default.SeqSuccessor#requires| |m#0@@126| |key#0@@119|)))) :qid |totalord.737:25| :skolemid |12506| :pattern ( (|Integer__Order.__default.SeqSuccessor#requires| |m#0@@126| |key#0@@119|)) )))
(assert  (=> true (forall ((|m#0@@127| T@U) (|key#0@@120| Int) ) (!  (=> (and (= (type |m#0@@127|) (SeqType BoxType)) (or (|Integer__Order.__default.SeqSuccessor#canCall| |m#0@@127| |key#0@@120|) ($Is |m#0@@127| (TSeq TInt)))) (and (|Integer__Order.__default.SetSuccessor#canCall| (|lambda#140| TInt |m#0@@127|) |key#0@@120|) (= (Integer__Order.__default.SeqSuccessor |m#0@@127| |key#0@@120|) (Integer__Order.__default.SetSuccessor (|lambda#140| TInt |m#0@@127|) |key#0@@120|)))) :qid |totalord.737:25| :skolemid |12507| :pattern ( (Integer__Order.__default.SeqSuccessor |m#0@@127| |key#0@@120|)) ))))
(assert  (=> true (forall ((|m#0@@128| T@U) (|key#0@@121| Int) ) (!  (=> (and (= (type |m#0@@128|) (SeqType BoxType)) (or (|Integer__Order.__default.SeqSuccessor#canCall| (Lit |m#0@@128|) (LitInt |key#0@@121|)) ($Is |m#0@@128| (TSeq TInt)))) (and (|Integer__Order.__default.SetSuccessor#canCall| (|lambda#140| TInt |m#0@@128|) (LitInt |key#0@@121|)) (= (Integer__Order.__default.SeqSuccessor (Lit |m#0@@128|) (LitInt |key#0@@121|)) (Integer__Order.__default.SetSuccessor (|lambda#140| TInt |m#0@@128|) (LitInt |key#0@@121|))))) :qid |totalord.737:25| :weight 3 :skolemid |12508| :pattern ( (Integer__Order.__default.SeqSuccessor (Lit |m#0@@128|) (LitInt |key#0@@121|))) ))))
(assert (forall ((Integer_Order._default.SortedSeqForMap$V T@U) ($ly@@584 T@U) (|s#0@@176| T@U) (|m#0@@129| T@U) ) (!  (=> (and (and (and (= (type Integer_Order._default.SortedSeqForMap$V) TyType) (= (type $ly@@584) LayerTypeType)) (= (type |s#0@@176|) (SeqType BoxType))) (= (type |m#0@@129|) (MapType BoxType BoxType))) (and (=> (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V ($LS $ly@@584) |s#0@@176| |m#0@@129|) (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V $ly@@584 |s#0@@176| |m#0@@129|)) (=> (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V $ly@@584 |s#0@@176| |m#0@@129|) (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V ($LS $ly@@584) |s#0@@176| |m#0@@129|)))) :qid |unknown.0:0| :skolemid |12509| :pattern ( (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V ($LS $ly@@584) |s#0@@176| |m#0@@129|)) )))
(assert (forall ((Integer_Order._default.SortedSeqForMap$V@@0 T@U) ($ly@@585 T@U) (|s#0@@177| T@U) (|m#0@@130| T@U) ) (!  (=> (and (and (and (= (type Integer_Order._default.SortedSeqForMap$V@@0) TyType) (= (type $ly@@585) LayerTypeType)) (= (type |s#0@@177|) (SeqType BoxType))) (= (type |m#0@@130|) (MapType BoxType BoxType))) (and (=> (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V@@0 $ly@@585 |s#0@@177| |m#0@@130|) (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V@@0 $LZ |s#0@@177| |m#0@@130|)) (=> (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V@@0 $LZ |s#0@@177| |m#0@@130|) (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V@@0 $ly@@585 |s#0@@177| |m#0@@130|)))) :qid |unknown.0:0| :skolemid |12510| :pattern ( (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V@@0 (AsFuelBottom $ly@@585) |s#0@@177| |m#0@@130|)) )))
(assert  (=> true (forall ((Integer_Order._default.SortedSeqForMap$V@@1 T@U) ($ly@@586 T@U) (|s#0@@178| T@U) (|m#0@@131| T@U) ) (!  (=> (and (and (and (and (= (type Integer_Order._default.SortedSeqForMap$V@@1) TyType) (= (type $ly@@586) LayerTypeType)) (= (type |s#0@@178|) (SeqType BoxType))) (= (type |m#0@@131|) (MapType BoxType BoxType))) (or (|Integer__Order.__default.SortedSeqForMap#canCall| Integer_Order._default.SortedSeqForMap$V@@1 |s#0@@178| |m#0@@131|) (and ($Is |s#0@@178| (TSeq (Tclass._System.Tuple2 TInt Integer_Order._default.SortedSeqForMap$V@@1))) ($Is |m#0@@131| (TMap TInt Integer_Order._default.SortedSeqForMap$V@@1))))) true) :qid |unknown.0:0| :skolemid |12511| :pattern ( (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V@@1 $ly@@586 |s#0@@178| |m#0@@131|)) ))))
(assert (forall ((Integer_Order._default.SortedSeqForMap$V@@2 T@U) ($ly@@587 T@U) (|s#0@@179| T@U) (|m#0@@132| T@U) ) (!  (=> (and (and (and (and (= (type Integer_Order._default.SortedSeqForMap$V@@2) TyType) (= (type $ly@@587) LayerTypeType)) (= (type |s#0@@179|) (SeqType BoxType))) (= (type |m#0@@132|) (MapType BoxType BoxType))) (and ($Is |s#0@@179| (TSeq (Tclass._System.Tuple2 TInt Integer_Order._default.SortedSeqForMap$V@@2))) ($Is |m#0@@132| (TMap TInt Integer_Order._default.SortedSeqForMap$V@@2)))) (and (=> (|Integer__Order.__default.SortedSeqForMap#requires| Integer_Order._default.SortedSeqForMap$V@@2 $ly@@587 |s#0@@179| |m#0@@132|) true) (=> true (|Integer__Order.__default.SortedSeqForMap#requires| Integer_Order._default.SortedSeqForMap$V@@2 $ly@@587 |s#0@@179| |m#0@@132|)))) :qid |unknown.0:0| :skolemid |12512| :pattern ( (|Integer__Order.__default.SortedSeqForMap#requires| Integer_Order._default.SortedSeqForMap$V@@2 $ly@@587 |s#0@@179| |m#0@@132|)) )))
(assert (= (type StartFuel_Integer_Order._default.IsStrictlySorted) LayerTypeType))
(assert  (=> true (forall ((Integer_Order._default.SortedSeqForMap$V@@3 T@U) ($ly@@588 T@U) (|s#0@@180| T@U) (|m#0@@133| T@U) ) (!  (=> (and (and (and (and (= (type Integer_Order._default.SortedSeqForMap$V@@3) TyType) (= (type $ly@@588) LayerTypeType)) (= (type |s#0@@180|) (SeqType BoxType))) (= (type |m#0@@133|) (MapType BoxType BoxType))) (or (|Integer__Order.__default.SortedSeqForMap#canCall| Integer_Order._default.SortedSeqForMap$V@@3 |s#0@@180| |m#0@@133|) (and ($Is |s#0@@180| (TSeq (Tclass._System.Tuple2 TInt Integer_Order._default.SortedSeqForMap$V@@3))) ($Is |m#0@@133| (TMap TInt Integer_Order._default.SortedSeqForMap$V@@3))))) (and (and (and (and (and (|Sequences.__default.Unzip#canCall| TInt Integer_Order._default.SortedSeqForMap$V@@3 |s#0@@180|) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip TInt Integer_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@180|))) (|Integer__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip TInt Integer_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@180|))))) (=> (Integer__Order.__default.IsStrictlySorted StartFuel_Integer_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip TInt Integer_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@180|)))) (forall ((|i#4@@17| Int) ) (!  (and (=> (< |i#4@@17| (|Seq#Length| |s#0@@180|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#4@@17|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#4@@17|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@133|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#4@@17|)))))) (=> (< |i#4@@17| (|Seq#Length| |s#0@@180|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#4@@17|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#4@@17|))))))) :qid |totalord.761:16| :skolemid |12513| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#4@@17|))) )))) (=> (and (forall ((|i#4@@18| Int) ) (!  (and (=> (< |i#4@@18| (|Seq#Length| |s#0@@180|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#4@@18|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#4@@18|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@133|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#4@@18|)))))) (=> (< |i#4@@18| (|Seq#Length| |s#0@@180|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#4@@18|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#4@@18|))))))) :qid |totalord.761:16| :skolemid |12516| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#4@@18|))) )) (forall ((|i#4@@19| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#4@@19|) (< |i#4@@19| (|Seq#Length| |s#0@@180|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@133|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#4@@19|)))))) (=> (and (<= (LitInt 0) |i#4@@19|) (< |i#4@@19| (|Seq#Length| |s#0@@180|))) (= (MapType0Select (|Map#Elements| |m#0@@133|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#4@@19|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#4@@19|))))))) :qid |totalord.761:16| :skolemid |12517| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#4@@19|))) ))) (forall ((|key#2@@11| T@U) ) (!  (=> (and (= (type |key#2@@11|) intType) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@133|) ($Box |key#2@@11|)))) (forall ((|i#5@@14| Int) ) (!  (and (=> (< |i#5@@14| (|Seq#Length| |s#0@@180|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#5@@14|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#5@@14|))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#5@@14|))))) (U_2_int |key#2@@11|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#5@@14|))))) :qid |totalord.762:44| :skolemid |12514| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#5@@14|))) ))) :qid |totalord.762:16| :skolemid |12515| :pattern ( (MapType0Select (|Map#Elements| |m#0@@133|) ($Box |key#2@@11|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@133|) ($Box |key#2@@11|))) )))) (and (=> (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@588) |s#0@@180| |m#0@@133|) (and (and (Integer__Order.__default.IsStrictlySorted StartFuel_Integer_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip TInt Integer_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@180|)))) (forall ((|i#4@@20| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#4@@20|) (< |i#4@@20| (|Seq#Length| |s#0@@180|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@133|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#4@@20|)))))) (=> (and (<= (LitInt 0) |i#4@@20|) (< |i#4@@20| (|Seq#Length| |s#0@@180|))) (= (MapType0Select (|Map#Elements| |m#0@@133|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#4@@20|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#4@@20|))))))) :qid |totalord.761:16| :skolemid |12518| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#4@@20|))) ))) (forall ((|key#2@@12| T@U) ) (!  (=> (and (and (= (type |key#2@@12|) intType) true) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@133|) ($Box |key#2@@12|)))) (exists ((|i#5@@15| Int) ) (!  (and (and (and (<= (LitInt 0) |i#5@@15|) (< |i#5@@15| (|Seq#Length| |s#0@@180|))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#5@@15|))))) (U_2_int |key#2@@12|))) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#5@@15|))) (MapType0Select (|Map#Elements| |m#0@@133|) ($Box |key#2@@12|)))) :qid |totalord.762:44| :skolemid |12519| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#5@@15|))) ))) :qid |totalord.762:16| :skolemid |12520| :pattern ( (MapType0Select (|Map#Elements| |m#0@@133|) ($Box |key#2@@12|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@133|) ($Box |key#2@@12|))) )))) (=> (and (and (Integer__Order.__default.IsStrictlySorted StartFuel_Integer_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip TInt Integer_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@180|)))) (forall ((|i#4@@21| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#4@@21|) (< |i#4@@21| (|Seq#Length| |s#0@@180|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@133|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#4@@21|)))))) (=> (and (<= (LitInt 0) |i#4@@21|) (< |i#4@@21| (|Seq#Length| |s#0@@180|))) (= (MapType0Select (|Map#Elements| |m#0@@133|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#4@@21|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#4@@21|))))))) :qid |totalord.761:16| :skolemid |12518| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#4@@21|))) ))) (forall ((|key#2@@13| Int) ) (!  (=> true (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@133|) ($Box (int_2_U |key#2@@13|)))) (exists ((|i#5@@16| Int) ) (!  (and (and (and (<= (LitInt 0) |i#5@@16|) (< |i#5@@16| (|Seq#Length| |s#0@@180|))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#5@@16|))))) |key#2@@13|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#5@@16|))) (MapType0Select (|Map#Elements| |m#0@@133|) ($Box (int_2_U |key#2@@13|))))) :qid |totalord.762:44| :skolemid |12519| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#5@@16|))) )))) :qid |totalord.762:16| :skolemid |12520| :pattern ( (MapType0Select (|Map#Elements| |m#0@@133|) ($Box (int_2_U |key#2@@13|)))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@133|) ($Box (int_2_U |key#2@@13|)))) ))) (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@588) |s#0@@180| |m#0@@133|))))) :qid |unknown.0:0| :skolemid |12521| :pattern ( (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@588) |s#0@@180| |m#0@@133|)) ))))
(assert  (=> true (forall ((Integer_Order._default.SortedSeqForMap$V@@4 T@U) ($ly@@589 T@U) (|s#0@@181| T@U) (|m#0@@134| T@U) ) (!  (=> (and (and (and (and (= (type Integer_Order._default.SortedSeqForMap$V@@4) TyType) (= (type $ly@@589) LayerTypeType)) (= (type |s#0@@181|) (SeqType BoxType))) (= (type |m#0@@134|) (MapType BoxType BoxType))) (or (|Integer__Order.__default.SortedSeqForMap#canCall| Integer_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@181|) (Lit |m#0@@134|)) (and ($Is |s#0@@181| (TSeq (Tclass._System.Tuple2 TInt Integer_Order._default.SortedSeqForMap$V@@4))) ($Is |m#0@@134| (TMap TInt Integer_Order._default.SortedSeqForMap$V@@4))))) (and (and (and (and (and (|Sequences.__default.Unzip#canCall| TInt Integer_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@181|)) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip TInt Integer_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@181|)))) (|Integer__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip TInt Integer_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@181|)))))) (=> (Integer__Order.__default.IsStrictlySorted StartFuel_Integer_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip TInt Integer_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@181|))))) (forall ((|i#6@@18| Int) ) (!  (and (=> (< |i#6@@18| (|Seq#Length| (Lit |s#0@@181|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#6@@18|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#6@@18|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@134|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#6@@18|)))))) (=> (< |i#6@@18| (|Seq#Length| (Lit |s#0@@181|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#6@@18|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#6@@18|))))))) :qid |totalord.761:16| :skolemid |12522| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@181| |i#6@@18|))) )))) (=> (and (forall ((|i#6@@19| Int) ) (!  (and (=> (< |i#6@@19| (|Seq#Length| (Lit |s#0@@181|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#6@@19|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#6@@19|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@134|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#6@@19|)))))) (=> (< |i#6@@19| (|Seq#Length| (Lit |s#0@@181|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#6@@19|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#6@@19|))))))) :qid |totalord.761:16| :skolemid |12525| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@181| |i#6@@19|))) )) (forall ((|i#6@@20| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#6@@20|) (< |i#6@@20| (|Seq#Length| (Lit |s#0@@181|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@134|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#6@@20|)))))) (=> (and (<= (LitInt 0) |i#6@@20|) (< |i#6@@20| (|Seq#Length| (Lit |s#0@@181|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@134|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#6@@20|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#6@@20|))))))) :qid |totalord.761:16| :skolemid |12526| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@181| |i#6@@20|))) ))) (forall ((|key#3@@11| T@U) ) (!  (=> (and (= (type |key#3@@11|) intType) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@134|) ($Box |key#3@@11|)))) (forall ((|i#7@@5| Int) ) (!  (and (=> (< |i#7@@5| (|Seq#Length| (Lit |s#0@@181|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#7@@5|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#7@@5|))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#7@@5|))))) (U_2_int |key#3@@11|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#7@@5|))))) :qid |totalord.762:44| :skolemid |12523| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@181| |i#7@@5|))) ))) :qid |totalord.762:16| :skolemid |12524| :pattern ( (MapType0Select (|Map#Elements| |m#0@@134|) ($Box |key#3@@11|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@134|) ($Box |key#3@@11|))) )))) (and (=> (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@589) (Lit |s#0@@181|) (Lit |m#0@@134|)) (and (and (Integer__Order.__default.IsStrictlySorted StartFuel_Integer_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip TInt Integer_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@181|))))) (forall ((|i#6@@21| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#6@@21|) (< |i#6@@21| (|Seq#Length| (Lit |s#0@@181|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@134|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#6@@21|)))))) (=> (and (<= (LitInt 0) |i#6@@21|) (< |i#6@@21| (|Seq#Length| (Lit |s#0@@181|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@134|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#6@@21|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#6@@21|))))))) :qid |totalord.761:16| :skolemid |12527| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@181| |i#6@@21|))) ))) (forall ((|key#3@@12| T@U) ) (!  (=> (and (and (= (type |key#3@@12|) intType) true) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@134|) ($Box |key#3@@12|)))) (exists ((|i#7@@6| Int) ) (!  (and (and (and (<= (LitInt 0) |i#7@@6|) (< |i#7@@6| (|Seq#Length| (Lit |s#0@@181|)))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#7@@6|))))) (U_2_int |key#3@@12|))) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#7@@6|))) (MapType0Select (|Map#Elements| (Lit |m#0@@134|)) ($Box |key#3@@12|)))) :qid |totalord.762:44| :skolemid |12528| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@181| |i#7@@6|))) ))) :qid |totalord.762:16| :skolemid |12529| :pattern ( (MapType0Select (|Map#Elements| |m#0@@134|) ($Box |key#3@@12|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@134|) ($Box |key#3@@12|))) )))) (=> (and (and (Integer__Order.__default.IsStrictlySorted StartFuel_Integer_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip TInt Integer_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@181|))))) (forall ((|i#6@@22| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#6@@22|) (< |i#6@@22| (|Seq#Length| (Lit |s#0@@181|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@134|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#6@@22|)))))) (=> (and (<= (LitInt 0) |i#6@@22|) (< |i#6@@22| (|Seq#Length| (Lit |s#0@@181|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@134|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#6@@22|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#6@@22|))))))) :qid |totalord.761:16| :skolemid |12527| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@181| |i#6@@22|))) ))) (forall ((|key#3@@13| Int) ) (!  (=> true (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@134|) ($Box (int_2_U |key#3@@13|)))) (exists ((|i#7@@7| Int) ) (!  (and (and (and (<= (LitInt 0) |i#7@@7|) (< |i#7@@7| (|Seq#Length| (Lit |s#0@@181|)))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#7@@7|))))) |key#3@@13|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#7@@7|))) (MapType0Select (|Map#Elements| (Lit |m#0@@134|)) ($Box (int_2_U |key#3@@13|))))) :qid |totalord.762:44| :skolemid |12528| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@181| |i#7@@7|))) )))) :qid |totalord.762:16| :skolemid |12529| :pattern ( (MapType0Select (|Map#Elements| |m#0@@134|) ($Box (int_2_U |key#3@@13|)))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@134|) ($Box (int_2_U |key#3@@13|)))) ))) (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@589) (Lit |s#0@@181|) (Lit |m#0@@134|)))))) :qid |unknown.0:0| :weight 3 :skolemid |12530| :pattern ( (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@589) (Lit |s#0@@181|) (Lit |m#0@@134|))) ))))
(assert (forall (($ly@@590 T@U) (|s#0@@182| T@U) ) (!  (=> (and (= (type $ly@@590) LayerTypeType) (= (type |s#0@@182|) (MapType0Type BoxType boolType))) (= (Integer__Order.__default.minimum ($LS $ly@@590) |s#0@@182|) (Integer__Order.__default.minimum $ly@@590 |s#0@@182|))) :qid |totalord.765:22| :skolemid |12531| :pattern ( (Integer__Order.__default.minimum ($LS $ly@@590) |s#0@@182|)) )))
(assert (forall (($ly@@591 T@U) (|s#0@@183| T@U) ) (!  (=> (and (= (type $ly@@591) LayerTypeType) (= (type |s#0@@183|) (MapType0Type BoxType boolType))) (= (Integer__Order.__default.minimum $ly@@591 |s#0@@183|) (Integer__Order.__default.minimum $LZ |s#0@@183|))) :qid |totalord.765:22| :skolemid |12532| :pattern ( (Integer__Order.__default.minimum (AsFuelBottom $ly@@591) |s#0@@183|)) )))
(assert  (=> true (forall (($ly@@592 T@U) (|s#0@@184| T@U) ) (!  (=> (and (and (= (type $ly@@592) LayerTypeType) (= (type |s#0@@184|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.minimum#canCall| |s#0@@184|) (and ($Is |s#0@@184| (TSet TInt)) (>= (|Set#Card| |s#0@@184|) (LitInt 1))))) (and (U_2_bool (MapType0Select |s#0@@184| ($Box (int_2_U (Integer__Order.__default.minimum $ly@@592 |s#0@@184|))))) (forall ((|y#1@@7| Int) ) (!  (=> (U_2_bool (MapType0Select |s#0@@184| ($Box (int_2_U |y#1@@7|)))) (Integer__Order.__default.lte (Integer__Order.__default.minimum $ly@@592 |s#0@@184|) |y#1@@7|)) :qid |totalord.768:18| :skolemid |12533| :pattern ( (Integer__Order.__default.lte (Integer__Order.__default.minimum $ly@@592 |s#0@@184|) |y#1@@7|)) :pattern ( (MapType0Select |s#0@@184| ($Box (int_2_U |y#1@@7|)))) )))) :qid |totalord.765:22| :skolemid |12534| :pattern ( (Integer__Order.__default.minimum $ly@@592 |s#0@@184|)) ))))
(assert (forall (($ly@@593 T@U) ($Heap@@119 T@U) (|s#0@@185| T@U) ) (!  (=> (and (and (and (= (type $ly@@593) LayerTypeType) (= (type $Heap@@119) (MapType0Type refType MapType1Type))) (= (type |s#0@@185|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@119) ($Is |s#0@@185| (TSet TInt)))) (and (=> (|Integer__Order.__default.minimum#requires| $ly@@593 |s#0@@185|) (>= (|Set#Card| |s#0@@185|) (LitInt 1))) (=> (>= (|Set#Card| |s#0@@185|) (LitInt 1)) (|Integer__Order.__default.minimum#requires| $ly@@593 |s#0@@185|)))) :qid |totalord.765:22| :skolemid |12535| :pattern ( (|Integer__Order.__default.minimum#requires| $ly@@593 |s#0@@185|) ($IsGoodHeap $Heap@@119)) )))
(assert (forall ((s@@50 T@U) ) (!  (=> (and (= (type s@@50) (MapType0Type BoxType boolType)) (|$let#25$canCall| s@@50)) (U_2_bool (MapType0Select s@@50 ($Box (int_2_U (|$let#25_a| s@@50)))))) :qid |totalord.772:5| :skolemid |12536| :pattern ( (|$let#25_a| s@@50)) )))
(assert  (=> true (forall (($ly@@594 T@U) ($Heap@@120 T@U) (|s#0@@186| T@U) ) (!  (=> (and (and (and (= (type $ly@@594) LayerTypeType) (= (type $Heap@@120) (MapType0Type refType MapType1Type))) (= (type |s#0@@186|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.minimum#canCall| |s#0@@186|) (and (and ($IsGoodHeap $Heap@@120) ($Is |s#0@@186| (TSet TInt))) (>= (|Set#Card| |s#0@@186|) (LitInt 1))))) (and (and (|$let#25$canCall| |s#0@@186|) (let ((|s'#4@@3| (|Set#Difference| |s#0@@186| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#25_a| |s#0@@186|))))))) (=> (not (|Set#Equal| |s'#4@@3| (|Set#Empty| BoxType))) (and (|Integer__Order.__default.minimum#canCall| |s'#4@@3|) (let ((|m'#4@@4| (Integer__Order.__default.minimum $ly@@594 |s'#4@@3|))) (|Integer__Order.__default.lt#canCall| (|$let#25_a| |s#0@@186|) |m'#4@@4|)))))) (= (Integer__Order.__default.minimum ($LS $ly@@594) |s#0@@186|) (let ((|a#2@@4| (|$let#25_a| |s#0@@186|))) (let ((|s'#5@@3| (|Set#Difference| |s#0@@186| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#2@@4|)))))) (ite (|Set#Equal| |s'#5@@3| (|Set#Empty| BoxType)) |a#2@@4| (let ((|m'#5@@4| (Integer__Order.__default.minimum $ly@@594 |s'#5@@3|))) (ite (Integer__Order.__default.lt |a#2@@4| |m'#5@@4|) |a#2@@4| |m'#5@@4|)))))))) :qid |totalord.765:22| :skolemid |12537| :pattern ( (Integer__Order.__default.minimum ($LS $ly@@594) |s#0@@186|) ($IsGoodHeap $Heap@@120)) ))))
(assert  (=> true (forall (($ly@@595 T@U) ($Heap@@121 T@U) (|s#0@@187| T@U) ) (!  (=> (and (and (and (= (type $ly@@595) LayerTypeType) (= (type $Heap@@121) (MapType0Type refType MapType1Type))) (= (type |s#0@@187|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.minimum#canCall| (Lit |s#0@@187|)) (and (and ($IsGoodHeap $Heap@@121) ($Is |s#0@@187| (TSet TInt))) (>= (|Set#Card| (Lit |s#0@@187|)) (LitInt 1))))) (and (and (|$let#25$canCall| (Lit |s#0@@187|)) (let ((|s'#6@@3| (|Set#Difference| |s#0@@187| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#25_a| (Lit |s#0@@187|)))))))) (=> (not (|Set#Equal| |s'#6@@3| (|Set#Empty| BoxType))) (and (|Integer__Order.__default.minimum#canCall| |s'#6@@3|) (let ((|m'#6@@3| (Integer__Order.__default.minimum ($LS $ly@@595) |s'#6@@3|))) (|Integer__Order.__default.lt#canCall| (|$let#25_a| (Lit |s#0@@187|)) |m'#6@@3|)))))) (= (Integer__Order.__default.minimum ($LS $ly@@595) (Lit |s#0@@187|)) (let ((|a#3@@7| (|$let#25_a| (Lit |s#0@@187|)))) (let ((|s'#7@@3| (|Set#Difference| |s#0@@187| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#3@@7|)))))) (ite (|Set#Equal| |s'#7@@3| (|Set#Empty| BoxType)) |a#3@@7| (let ((|m'#7@@3| (Integer__Order.__default.minimum ($LS $ly@@595) |s'#7@@3|))) (ite (Integer__Order.__default.lt |a#3@@7| |m'#7@@3|) |a#3@@7| |m'#7@@3|)))))))) :qid |totalord.765:22| :weight 3 :skolemid |12538| :pattern ( (Integer__Order.__default.minimum ($LS $ly@@595) (Lit |s#0@@187|)) ($IsGoodHeap $Heap@@121)) ))))
(assert (forall ((arg0@@344 T@U) (arg1@@208 T@U) ) (! (= (type (Integer__Order.__default.minimumOpt arg0@@344 arg1@@208)) DatatypeTypeType) :qid |funType:Integer__Order.__default.minimumOpt| :pattern ( (Integer__Order.__default.minimumOpt arg0@@344 arg1@@208)) )))
(assert (forall (($ly@@596 T@U) (|s#0@@188| T@U) ) (!  (=> (and (= (type $ly@@596) LayerTypeType) (= (type |s#0@@188|) (MapType0Type BoxType boolType))) (= (Integer__Order.__default.minimumOpt ($LS $ly@@596) |s#0@@188|) (Integer__Order.__default.minimumOpt $ly@@596 |s#0@@188|))) :qid |totalord.788:22| :skolemid |12539| :pattern ( (Integer__Order.__default.minimumOpt ($LS $ly@@596) |s#0@@188|)) )))
(assert (forall (($ly@@597 T@U) (|s#0@@189| T@U) ) (!  (=> (and (= (type $ly@@597) LayerTypeType) (= (type |s#0@@189|) (MapType0Type BoxType boolType))) (= (Integer__Order.__default.minimumOpt $ly@@597 |s#0@@189|) (Integer__Order.__default.minimumOpt $LZ |s#0@@189|))) :qid |totalord.788:22| :skolemid |12540| :pattern ( (Integer__Order.__default.minimumOpt (AsFuelBottom $ly@@597) |s#0@@189|)) )))
(assert  (=> true (forall (($ly@@598 T@U) (|s#0@@190| T@U) ) (!  (=> (and (and (= (type $ly@@598) LayerTypeType) (= (type |s#0@@190|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.minimumOpt#canCall| |s#0@@190|) ($Is |s#0@@190| (TSet TInt)))) (and (and (and (=> (Options.Option.Some_q (Integer__Order.__default.minimumOpt $ly@@598 |s#0@@190|)) (U_2_bool (MapType0Select |s#0@@190| (Options.Option.value (Integer__Order.__default.minimumOpt $ly@@598 |s#0@@190|))))) (=> (Options.Option.Some_q (Integer__Order.__default.minimumOpt $ly@@598 |s#0@@190|)) (forall ((|y#1@@8| Int) ) (!  (=> (U_2_bool (MapType0Select |s#0@@190| ($Box (int_2_U |y#1@@8|)))) (Integer__Order.__default.lte (U_2_int ($Unbox intType (Options.Option.value (Integer__Order.__default.minimumOpt $ly@@598 |s#0@@190|)))) |y#1@@8|)) :qid |totalord.790:30| :skolemid |12541| :pattern ( (Integer__Order.__default.lte (U_2_int ($Unbox intType (Options.Option.value (Integer__Order.__default.minimumOpt $ly@@598 |s#0@@190|)))) |y#1@@8|)) :pattern ( (MapType0Select |s#0@@190| ($Box (int_2_U |y#1@@8|)))) )))) (=> (Options.Option.None_q (Integer__Order.__default.minimumOpt $ly@@598 |s#0@@190|)) (|Set#Equal| |s#0@@190| (|Set#Empty| BoxType)))) ($Is (Integer__Order.__default.minimumOpt $ly@@598 |s#0@@190|) (Tclass.Options.Option TInt)))) :qid |totalord.788:22| :skolemid |12542| :pattern ( (Integer__Order.__default.minimumOpt $ly@@598 |s#0@@190|)) ))))
(assert (forall (($ly@@599 T@U) (|s#0@@191| T@U) ) (!  (=> (and (and (= (type $ly@@599) LayerTypeType) (= (type |s#0@@191|) (MapType0Type BoxType boolType))) ($Is |s#0@@191| (TSet TInt))) (and (=> (|Integer__Order.__default.minimumOpt#requires| $ly@@599 |s#0@@191|) true) (=> true (|Integer__Order.__default.minimumOpt#requires| $ly@@599 |s#0@@191|)))) :qid |totalord.788:22| :skolemid |12543| :pattern ( (|Integer__Order.__default.minimumOpt#requires| $ly@@599 |s#0@@191|)) )))
(assert (= (type StartFuel_Integer_Order._default.minimum) LayerTypeType))
(assert  (=> true (forall (($ly@@600 T@U) (|s#0@@192| T@U) ) (!  (=> (and (and (= (type $ly@@600) LayerTypeType) (= (type |s#0@@192|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.minimumOpt#canCall| |s#0@@192|) ($Is |s#0@@192| (TSet TInt)))) (and (=> (not (|Set#Equal| |s#0@@192| (|Set#Empty| BoxType))) (|Integer__Order.__default.minimum#canCall| |s#0@@192|)) (= (Integer__Order.__default.minimumOpt ($LS $ly@@600) |s#0@@192|) (ite (|Set#Equal| |s#0@@192| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Integer__Order.__default.minimum StartFuel_Integer_Order._default.minimum |s#0@@192|)))))))) :qid |totalord.788:22| :skolemid |12544| :pattern ( (Integer__Order.__default.minimumOpt ($LS $ly@@600) |s#0@@192|)) ))))
(assert  (=> true (forall (($ly@@601 T@U) (|s#0@@193| T@U) ) (!  (=> (and (and (= (type $ly@@601) LayerTypeType) (= (type |s#0@@193|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.minimumOpt#canCall| (Lit |s#0@@193|)) ($Is |s#0@@193| (TSet TInt)))) (and (=> (not (|Set#Equal| |s#0@@193| (|Set#Empty| BoxType))) (|Integer__Order.__default.minimum#canCall| (Lit |s#0@@193|))) (= (Integer__Order.__default.minimumOpt ($LS $ly@@601) (Lit |s#0@@193|)) (ite (|Set#Equal| |s#0@@193| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Integer__Order.__default.minimum StartFuel_Integer_Order._default.minimum (Lit |s#0@@193|))))))))) :qid |totalord.788:22| :weight 3 :skolemid |12545| :pattern ( (Integer__Order.__default.minimumOpt ($LS $ly@@601) (Lit |s#0@@193|))) ))))
(assert (forall (($ly@@602 T@U) (|s#0@@194| T@U) ) (!  (=> (and (= (type $ly@@602) LayerTypeType) (= (type |s#0@@194|) (MapType0Type BoxType boolType))) (= (Integer__Order.__default.maximum ($LS $ly@@602) |s#0@@194|) (Integer__Order.__default.maximum $ly@@602 |s#0@@194|))) :qid |totalord.796:22| :skolemid |12546| :pattern ( (Integer__Order.__default.maximum ($LS $ly@@602) |s#0@@194|)) )))
(assert (forall (($ly@@603 T@U) (|s#0@@195| T@U) ) (!  (=> (and (= (type $ly@@603) LayerTypeType) (= (type |s#0@@195|) (MapType0Type BoxType boolType))) (= (Integer__Order.__default.maximum $ly@@603 |s#0@@195|) (Integer__Order.__default.maximum $LZ |s#0@@195|))) :qid |totalord.796:22| :skolemid |12547| :pattern ( (Integer__Order.__default.maximum (AsFuelBottom $ly@@603) |s#0@@195|)) )))
(assert  (=> true (forall (($ly@@604 T@U) (|s#0@@196| T@U) ) (!  (=> (and (and (= (type $ly@@604) LayerTypeType) (= (type |s#0@@196|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.maximum#canCall| |s#0@@196|) (and ($Is |s#0@@196| (TSet TInt)) (>= (|Set#Card| |s#0@@196|) (LitInt 1))))) (and (U_2_bool (MapType0Select |s#0@@196| ($Box (int_2_U (Integer__Order.__default.maximum $ly@@604 |s#0@@196|))))) (forall ((|y#1@@9| Int) ) (!  (=> (U_2_bool (MapType0Select |s#0@@196| ($Box (int_2_U |y#1@@9|)))) (Integer__Order.__default.lte |y#1@@9| (Integer__Order.__default.maximum $ly@@604 |s#0@@196|))) :qid |totalord.799:18| :skolemid |12548| :pattern ( (Integer__Order.__default.lte |y#1@@9| (Integer__Order.__default.maximum $ly@@604 |s#0@@196|))) :pattern ( (MapType0Select |s#0@@196| ($Box (int_2_U |y#1@@9|)))) )))) :qid |totalord.796:22| :skolemid |12549| :pattern ( (Integer__Order.__default.maximum $ly@@604 |s#0@@196|)) ))))
(assert (forall (($ly@@605 T@U) ($Heap@@122 T@U) (|s#0@@197| T@U) ) (!  (=> (and (and (and (= (type $ly@@605) LayerTypeType) (= (type $Heap@@122) (MapType0Type refType MapType1Type))) (= (type |s#0@@197|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@122) ($Is |s#0@@197| (TSet TInt)))) (and (=> (|Integer__Order.__default.maximum#requires| $ly@@605 |s#0@@197|) (>= (|Set#Card| |s#0@@197|) (LitInt 1))) (=> (>= (|Set#Card| |s#0@@197|) (LitInt 1)) (|Integer__Order.__default.maximum#requires| $ly@@605 |s#0@@197|)))) :qid |totalord.796:22| :skolemid |12550| :pattern ( (|Integer__Order.__default.maximum#requires| $ly@@605 |s#0@@197|) ($IsGoodHeap $Heap@@122)) )))
(assert (forall ((s@@51 T@U) ) (!  (=> (and (= (type s@@51) (MapType0Type BoxType boolType)) (|$let#28$canCall| s@@51)) (U_2_bool (MapType0Select s@@51 ($Box (int_2_U (|$let#28_a| s@@51)))))) :qid |totalord.801:5| :skolemid |12551| :pattern ( (|$let#28_a| s@@51)) )))
(assert  (=> true (forall (($ly@@606 T@U) ($Heap@@123 T@U) (|s#0@@198| T@U) ) (!  (=> (and (and (and (= (type $ly@@606) LayerTypeType) (= (type $Heap@@123) (MapType0Type refType MapType1Type))) (= (type |s#0@@198|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.maximum#canCall| |s#0@@198|) (and (and ($IsGoodHeap $Heap@@123) ($Is |s#0@@198| (TSet TInt))) (>= (|Set#Card| |s#0@@198|) (LitInt 1))))) (and (and (|$let#28$canCall| |s#0@@198|) (let ((|s'#4@@4| (|Set#Difference| |s#0@@198| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#28_a| |s#0@@198|))))))) (=> (not (|Set#Equal| |s'#4@@4| (|Set#Empty| BoxType))) (and (|Integer__Order.__default.maximum#canCall| |s'#4@@4|) (let ((|m'#4@@5| (Integer__Order.__default.maximum $ly@@606 |s'#4@@4|))) (|Integer__Order.__default.lt#canCall| |m'#4@@5| (|$let#28_a| |s#0@@198|))))))) (= (Integer__Order.__default.maximum ($LS $ly@@606) |s#0@@198|) (let ((|a#2@@5| (|$let#28_a| |s#0@@198|))) (let ((|s'#5@@4| (|Set#Difference| |s#0@@198| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#2@@5|)))))) (ite (|Set#Equal| |s'#5@@4| (|Set#Empty| BoxType)) |a#2@@5| (let ((|m'#5@@5| (Integer__Order.__default.maximum $ly@@606 |s'#5@@4|))) (ite (Integer__Order.__default.lt |m'#5@@5| |a#2@@5|) |a#2@@5| |m'#5@@5|)))))))) :qid |totalord.796:22| :skolemid |12552| :pattern ( (Integer__Order.__default.maximum ($LS $ly@@606) |s#0@@198|) ($IsGoodHeap $Heap@@123)) ))))
(assert  (=> true (forall (($ly@@607 T@U) ($Heap@@124 T@U) (|s#0@@199| T@U) ) (!  (=> (and (and (and (= (type $ly@@607) LayerTypeType) (= (type $Heap@@124) (MapType0Type refType MapType1Type))) (= (type |s#0@@199|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.maximum#canCall| (Lit |s#0@@199|)) (and (and ($IsGoodHeap $Heap@@124) ($Is |s#0@@199| (TSet TInt))) (>= (|Set#Card| (Lit |s#0@@199|)) (LitInt 1))))) (and (and (|$let#28$canCall| (Lit |s#0@@199|)) (let ((|s'#6@@4| (|Set#Difference| |s#0@@199| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#28_a| (Lit |s#0@@199|)))))))) (=> (not (|Set#Equal| |s'#6@@4| (|Set#Empty| BoxType))) (and (|Integer__Order.__default.maximum#canCall| |s'#6@@4|) (let ((|m'#6@@4| (Integer__Order.__default.maximum ($LS $ly@@607) |s'#6@@4|))) (|Integer__Order.__default.lt#canCall| |m'#6@@4| (|$let#28_a| (Lit |s#0@@199|)))))))) (= (Integer__Order.__default.maximum ($LS $ly@@607) (Lit |s#0@@199|)) (let ((|a#3@@8| (|$let#28_a| (Lit |s#0@@199|)))) (let ((|s'#7@@4| (|Set#Difference| |s#0@@199| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#3@@8|)))))) (ite (|Set#Equal| |s'#7@@4| (|Set#Empty| BoxType)) |a#3@@8| (let ((|m'#7@@4| (Integer__Order.__default.maximum ($LS $ly@@607) |s'#7@@4|))) (ite (Integer__Order.__default.lt |m'#7@@4| |a#3@@8|) |a#3@@8| |m'#7@@4|)))))))) :qid |totalord.796:22| :weight 3 :skolemid |12553| :pattern ( (Integer__Order.__default.maximum ($LS $ly@@607) (Lit |s#0@@199|)) ($IsGoodHeap $Heap@@124)) ))))
(assert (forall ((arg0@@345 T@U) (arg1@@209 T@U) ) (! (= (type (Integer__Order.__default.maximumOpt arg0@@345 arg1@@209)) DatatypeTypeType) :qid |funType:Integer__Order.__default.maximumOpt| :pattern ( (Integer__Order.__default.maximumOpt arg0@@345 arg1@@209)) )))
(assert (forall (($ly@@608 T@U) (|s#0@@200| T@U) ) (!  (=> (and (= (type $ly@@608) LayerTypeType) (= (type |s#0@@200|) (MapType0Type BoxType boolType))) (= (Integer__Order.__default.maximumOpt ($LS $ly@@608) |s#0@@200|) (Integer__Order.__default.maximumOpt $ly@@608 |s#0@@200|))) :qid |totalord.817:22| :skolemid |12554| :pattern ( (Integer__Order.__default.maximumOpt ($LS $ly@@608) |s#0@@200|)) )))
(assert (forall (($ly@@609 T@U) (|s#0@@201| T@U) ) (!  (=> (and (= (type $ly@@609) LayerTypeType) (= (type |s#0@@201|) (MapType0Type BoxType boolType))) (= (Integer__Order.__default.maximumOpt $ly@@609 |s#0@@201|) (Integer__Order.__default.maximumOpt $LZ |s#0@@201|))) :qid |totalord.817:22| :skolemid |12555| :pattern ( (Integer__Order.__default.maximumOpt (AsFuelBottom $ly@@609) |s#0@@201|)) )))
(assert  (=> true (forall (($ly@@610 T@U) (|s#0@@202| T@U) ) (!  (=> (and (and (= (type $ly@@610) LayerTypeType) (= (type |s#0@@202|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.maximumOpt#canCall| |s#0@@202|) ($Is |s#0@@202| (TSet TInt)))) (and (and (and (=> (Options.Option.Some_q (Integer__Order.__default.maximumOpt $ly@@610 |s#0@@202|)) (U_2_bool (MapType0Select |s#0@@202| (Options.Option.value (Integer__Order.__default.maximumOpt $ly@@610 |s#0@@202|))))) (=> (Options.Option.Some_q (Integer__Order.__default.maximumOpt $ly@@610 |s#0@@202|)) (forall ((|y#1@@10| Int) ) (!  (=> (U_2_bool (MapType0Select |s#0@@202| ($Box (int_2_U |y#1@@10|)))) (Integer__Order.__default.lte |y#1@@10| (U_2_int ($Unbox intType (Options.Option.value (Integer__Order.__default.maximumOpt $ly@@610 |s#0@@202|)))))) :qid |totalord.819:30| :skolemid |12556| :pattern ( (Integer__Order.__default.lte |y#1@@10| (U_2_int ($Unbox intType (Options.Option.value (Integer__Order.__default.maximumOpt $ly@@610 |s#0@@202|)))))) :pattern ( (MapType0Select |s#0@@202| ($Box (int_2_U |y#1@@10|)))) )))) (=> (Options.Option.None_q (Integer__Order.__default.maximumOpt $ly@@610 |s#0@@202|)) (|Set#Equal| |s#0@@202| (|Set#Empty| BoxType)))) ($Is (Integer__Order.__default.maximumOpt $ly@@610 |s#0@@202|) (Tclass.Options.Option TInt)))) :qid |totalord.817:22| :skolemid |12557| :pattern ( (Integer__Order.__default.maximumOpt $ly@@610 |s#0@@202|)) ))))
(assert (forall (($ly@@611 T@U) (|s#0@@203| T@U) ) (!  (=> (and (and (= (type $ly@@611) LayerTypeType) (= (type |s#0@@203|) (MapType0Type BoxType boolType))) ($Is |s#0@@203| (TSet TInt))) (and (=> (|Integer__Order.__default.maximumOpt#requires| $ly@@611 |s#0@@203|) true) (=> true (|Integer__Order.__default.maximumOpt#requires| $ly@@611 |s#0@@203|)))) :qid |totalord.817:22| :skolemid |12558| :pattern ( (|Integer__Order.__default.maximumOpt#requires| $ly@@611 |s#0@@203|)) )))
(assert (= (type StartFuel_Integer_Order._default.maximum) LayerTypeType))
(assert  (=> true (forall (($ly@@612 T@U) (|s#0@@204| T@U) ) (!  (=> (and (and (= (type $ly@@612) LayerTypeType) (= (type |s#0@@204|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.maximumOpt#canCall| |s#0@@204|) ($Is |s#0@@204| (TSet TInt)))) (and (=> (not (|Set#Equal| |s#0@@204| (|Set#Empty| BoxType))) (|Integer__Order.__default.maximum#canCall| |s#0@@204|)) (= (Integer__Order.__default.maximumOpt ($LS $ly@@612) |s#0@@204|) (ite (|Set#Equal| |s#0@@204| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Integer__Order.__default.maximum StartFuel_Integer_Order._default.maximum |s#0@@204|)))))))) :qid |totalord.817:22| :skolemid |12559| :pattern ( (Integer__Order.__default.maximumOpt ($LS $ly@@612) |s#0@@204|)) ))))
(assert  (=> true (forall (($ly@@613 T@U) (|s#0@@205| T@U) ) (!  (=> (and (and (= (type $ly@@613) LayerTypeType) (= (type |s#0@@205|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.maximumOpt#canCall| (Lit |s#0@@205|)) ($Is |s#0@@205| (TSet TInt)))) (and (=> (not (|Set#Equal| |s#0@@205| (|Set#Empty| BoxType))) (|Integer__Order.__default.maximum#canCall| (Lit |s#0@@205|))) (= (Integer__Order.__default.maximumOpt ($LS $ly@@613) (Lit |s#0@@205|)) (ite (|Set#Equal| |s#0@@205| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Integer__Order.__default.maximum StartFuel_Integer_Order._default.maximum (Lit |s#0@@205|))))))))) :qid |totalord.817:22| :weight 3 :skolemid |12560| :pattern ( (Integer__Order.__default.maximumOpt ($LS $ly@@613) (Lit |s#0@@205|))) ))))
(assert  (=> true (forall ((|a#0@@172| Int) (|b#0@@128| Int) ) (!  (=> true true) :qid |totalord.12:15| :skolemid |12561| :pattern ( (Integer__Order.__default.lt |a#0@@172| |b#0@@128|)) ))))
(assert (forall ((|a#0@@173| Int) (|b#0@@129| Int) ) (!  (and (=> (|Integer__Order.__default.lt#requires| |a#0@@173| |b#0@@129|) true) (=> true (|Integer__Order.__default.lt#requires| |a#0@@173| |b#0@@129|))) :qid |totalord.12:15| :skolemid |12562| :pattern ( (|Integer__Order.__default.lt#requires| |a#0@@173| |b#0@@129|)) )))
(assert  (=> true (forall ((|a#0@@174| Int) (|b#0@@130| Int) ) (!  (=> true (and (|Integer__Order.__default.lte#canCall| |a#0@@174| |b#0@@130|) (and (=> (Integer__Order.__default.lt |a#0@@174| |b#0@@130|) (and (Integer__Order.__default.lte |a#0@@174| |b#0@@130|) (not (= |a#0@@174| |b#0@@130|)))) (=> (and (Integer__Order.__default.lte |a#0@@174| |b#0@@130|) (not (= |a#0@@174| |b#0@@130|))) (Integer__Order.__default.lt |a#0@@174| |b#0@@130|))))) :qid |totalord.12:15| :skolemid |12563| :pattern ( (Integer__Order.__default.lt |a#0@@174| |b#0@@130|)) ))))
(assert  (=> true (forall ((|a#0@@175| Int) (|b#0@@131| Int) ) (!  (=> true (and (|Integer__Order.__default.lte#canCall| (LitInt |a#0@@175|) (LitInt |b#0@@131|)) (and (=> (Integer__Order.__default.lt (LitInt |a#0@@175|) (LitInt |b#0@@131|)) (U_2_bool (Lit (bool_2_U  (and (Integer__Order.__default.lte (LitInt |a#0@@175|) (LitInt |b#0@@131|)) (not (= |a#0@@175| |b#0@@131|))))))) (=> (U_2_bool (Lit (bool_2_U  (and (Integer__Order.__default.lte (LitInt |a#0@@175|) (LitInt |b#0@@131|)) (not (= |a#0@@175| |b#0@@131|)))))) (Integer__Order.__default.lt (LitInt |a#0@@175|) (LitInt |b#0@@131|)))))) :qid |totalord.12:15| :weight 3 :skolemid |12564| :pattern ( (Integer__Order.__default.lt (LitInt |a#0@@175|) (LitInt |b#0@@131|))) ))))
(assert  (=> true (forall ((|a#0@@176| Int) (|b#0@@132| Int) ) (!  (=> true true) :qid |totalord.24:16| :skolemid |12565| :pattern ( (Integer__Order.__default.Min |a#0@@176| |b#0@@132|)) ))))
(assert (forall ((|a#0@@177| Int) (|b#0@@133| Int) ) (!  (and (=> (|Integer__Order.__default.Min#requires| |a#0@@177| |b#0@@133|) true) (=> true (|Integer__Order.__default.Min#requires| |a#0@@177| |b#0@@133|))) :qid |totalord.24:16| :skolemid |12566| :pattern ( (|Integer__Order.__default.Min#requires| |a#0@@177| |b#0@@133|)) )))
(assert  (=> true (forall ((|a#0@@178| Int) (|b#0@@134| Int) ) (!  (=> true (and (|Integer__Order.__default.lte#canCall| |a#0@@178| |b#0@@134|) (= (Integer__Order.__default.Min |a#0@@178| |b#0@@134|) (ite (Integer__Order.__default.lte |a#0@@178| |b#0@@134|) |a#0@@178| |b#0@@134|)))) :qid |totalord.24:16| :skolemid |12567| :pattern ( (Integer__Order.__default.Min |a#0@@178| |b#0@@134|)) ))))
(assert  (=> true (forall ((|a#0@@179| Int) (|b#0@@135| Int) ) (!  (=> true (and (|Integer__Order.__default.lte#canCall| (LitInt |a#0@@179|) (LitInt |b#0@@135|)) (= (Integer__Order.__default.Min (LitInt |a#0@@179|) (LitInt |b#0@@135|)) (ite (Integer__Order.__default.lte (LitInt |a#0@@179|) (LitInt |b#0@@135|)) |a#0@@179| |b#0@@135|)))) :qid |totalord.24:16| :weight 3 :skolemid |12568| :pattern ( (Integer__Order.__default.Min (LitInt |a#0@@179|) (LitInt |b#0@@135|))) ))))
(assert  (=> true (forall ((|a#0@@180| Int) (|b#0@@136| Int) ) (!  (=> true true) :qid |totalord.29:16| :skolemid |12569| :pattern ( (Integer__Order.__default.Max |a#0@@180| |b#0@@136|)) ))))
(assert (forall ((|a#0@@181| Int) (|b#0@@137| Int) ) (!  (and (=> (|Integer__Order.__default.Max#requires| |a#0@@181| |b#0@@137|) true) (=> true (|Integer__Order.__default.Max#requires| |a#0@@181| |b#0@@137|))) :qid |totalord.29:16| :skolemid |12570| :pattern ( (|Integer__Order.__default.Max#requires| |a#0@@181| |b#0@@137|)) )))
(assert  (=> true (forall ((|a#0@@182| Int) (|b#0@@138| Int) ) (!  (=> true (and (|Integer__Order.__default.lte#canCall| |a#0@@182| |b#0@@138|) (= (Integer__Order.__default.Max |a#0@@182| |b#0@@138|) (ite (Integer__Order.__default.lte |a#0@@182| |b#0@@138|) |b#0@@138| |a#0@@182|)))) :qid |totalord.29:16| :skolemid |12571| :pattern ( (Integer__Order.__default.Max |a#0@@182| |b#0@@138|)) ))))
(assert  (=> true (forall ((|a#0@@183| Int) (|b#0@@139| Int) ) (!  (=> true (and (|Integer__Order.__default.lte#canCall| (LitInt |a#0@@183|) (LitInt |b#0@@139|)) (= (Integer__Order.__default.Max (LitInt |a#0@@183|) (LitInt |b#0@@139|)) (ite (Integer__Order.__default.lte (LitInt |a#0@@183|) (LitInt |b#0@@139|)) |b#0@@139| |a#0@@183|)))) :qid |totalord.29:16| :weight 3 :skolemid |12572| :pattern ( (Integer__Order.__default.Max (LitInt |a#0@@183|) (LitInt |b#0@@139|))) ))))
(assert (forall (($ly@@614 T@U) (|run#0@@172| T@U) ) (!  (=> (and (= (type $ly@@614) LayerTypeType) (= (type |run#0@@172|) (SeqType BoxType))) (and (=> (Integer__Order.__default.IsSorted ($LS $ly@@614) |run#0@@172|) (Integer__Order.__default.IsSorted $ly@@614 |run#0@@172|)) (=> (Integer__Order.__default.IsSorted $ly@@614 |run#0@@172|) (Integer__Order.__default.IsSorted ($LS $ly@@614) |run#0@@172|)))) :qid |totalord.41:23| :skolemid |12573| :pattern ( (Integer__Order.__default.IsSorted ($LS $ly@@614) |run#0@@172|)) )))
(assert (forall (($ly@@615 T@U) (|run#0@@173| T@U) ) (!  (=> (and (= (type $ly@@615) LayerTypeType) (= (type |run#0@@173|) (SeqType BoxType))) (and (=> (Integer__Order.__default.IsSorted $ly@@615 |run#0@@173|) (Integer__Order.__default.IsSorted $LZ |run#0@@173|)) (=> (Integer__Order.__default.IsSorted $LZ |run#0@@173|) (Integer__Order.__default.IsSorted $ly@@615 |run#0@@173|)))) :qid |totalord.41:23| :skolemid |12574| :pattern ( (Integer__Order.__default.IsSorted (AsFuelBottom $ly@@615) |run#0@@173|)) )))
(assert  (=> true (forall (($ly@@616 T@U) (|run#0@@174| T@U) ) (!  (=> (and (and (= (type $ly@@616) LayerTypeType) (= (type |run#0@@174|) (SeqType BoxType))) (or (|Integer__Order.__default.IsSorted#canCall| |run#0@@174|) ($Is |run#0@@174| (TSeq TInt)))) (and (=> (= (|Seq#Length| |run#0@@174|) (LitInt 0)) (Integer__Order.__default.IsSorted $ly@@616 |run#0@@174|)) (=> (= (|Seq#Length| |run#0@@174|) (LitInt 1)) (Integer__Order.__default.IsSorted $ly@@616 |run#0@@174|)))) :qid |totalord.41:23| :skolemid |12575| :pattern ( (Integer__Order.__default.IsSorted $ly@@616 |run#0@@174|)) ))))
(assert (forall (($ly@@617 T@U) (|run#0@@175| T@U) ) (!  (=> (and (and (= (type $ly@@617) LayerTypeType) (= (type |run#0@@175|) (SeqType BoxType))) ($Is |run#0@@175| (TSeq TInt))) (and (=> (|Integer__Order.__default.IsSorted#requires| $ly@@617 |run#0@@175|) true) (=> true (|Integer__Order.__default.IsSorted#requires| $ly@@617 |run#0@@175|)))) :qid |totalord.41:23| :skolemid |12576| :pattern ( (|Integer__Order.__default.IsSorted#requires| $ly@@617 |run#0@@175|)) )))
(assert  (=> true (forall (($ly@@618 T@U) (|run#0@@176| T@U) ) (!  (=> (and (and (= (type $ly@@618) LayerTypeType) (= (type |run#0@@176|) (SeqType BoxType))) (or (|Integer__Order.__default.IsSorted#canCall| |run#0@@176|) ($Is |run#0@@176| (TSeq TInt)))) (and (forall ((|i#2@@35| Int) (|j#2@@16| Int) ) (!  (=> (< |j#2@@16| (|Seq#Length| |run#0@@176|)) (|Integer__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@176| |i#2@@35|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@176| |j#2@@16|))))) :qid |totalord.45:12| :skolemid |12577| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@176| |j#2@@16|)) ($Unbox intType (|Seq#Index| |run#0@@176| |i#2@@35|))) )) (and (=> (Integer__Order.__default.IsSorted ($LS $ly@@618) |run#0@@176|) (forall ((|i#2@@36| Int) (|j#2@@17| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#2@@36|) (<= |i#2@@36| |j#2@@17|)) (< |j#2@@17| (|Seq#Length| |run#0@@176|))) (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@176| |i#2@@36|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@176| |j#2@@17|)))))) :qid |totalord.45:12| :skolemid |12578| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@176| |j#2@@17|)) ($Unbox intType (|Seq#Index| |run#0@@176| |i#2@@36|))) ))) (=> (forall ((|i#2@@37| Int) (|j#2@@18| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#2@@37|) (<= |i#2@@37| |j#2@@18|)) (< |j#2@@18| (|Seq#Length| |run#0@@176|))) (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@176| |i#2@@37|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@176| |j#2@@18|)))))) :qid |totalord.45:12| :skolemid |12578| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@176| |j#2@@18|)) ($Unbox intType (|Seq#Index| |run#0@@176| |i#2@@37|))) )) (Integer__Order.__default.IsSorted ($LS $ly@@618) |run#0@@176|))))) :qid |totalord.41:23| :skolemid |12579| :pattern ( (Integer__Order.__default.IsSorted ($LS $ly@@618) |run#0@@176|)) ))))
(assert  (=> true (forall (($ly@@619 T@U) (|run#0@@177| T@U) ) (!  (=> (and (and (= (type $ly@@619) LayerTypeType) (= (type |run#0@@177|) (SeqType BoxType))) (or (|Integer__Order.__default.IsSorted#canCall| (Lit |run#0@@177|)) ($Is |run#0@@177| (TSeq TInt)))) (and (forall ((|i#3@@37| Int) (|j#3@@13| Int) ) (!  (=> (< |j#3@@13| (|Seq#Length| (Lit |run#0@@177|))) (|Integer__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@177|) |i#3@@37|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@177|) |j#3@@13|))))) :qid |totalord.45:12| :skolemid |12580| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@177| |j#3@@13|)) ($Unbox intType (|Seq#Index| |run#0@@177| |i#3@@37|))) )) (and (=> (Integer__Order.__default.IsSorted ($LS $ly@@619) (Lit |run#0@@177|)) (forall ((|i#3@@38| Int) (|j#3@@14| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#3@@38|) (<= |i#3@@38| |j#3@@14|)) (< |j#3@@14| (|Seq#Length| (Lit |run#0@@177|)))) (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@177|) |i#3@@38|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@177|) |j#3@@14|)))))) :qid |totalord.45:12| :skolemid |12581| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@177| |j#3@@14|)) ($Unbox intType (|Seq#Index| |run#0@@177| |i#3@@38|))) ))) (=> (forall ((|i#3@@39| Int) (|j#3@@15| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#3@@39|) (<= |i#3@@39| |j#3@@15|)) (< |j#3@@15| (|Seq#Length| (Lit |run#0@@177|)))) (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@177|) |i#3@@39|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@177|) |j#3@@15|)))))) :qid |totalord.45:12| :skolemid |12581| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@177| |j#3@@15|)) ($Unbox intType (|Seq#Index| |run#0@@177| |i#3@@39|))) )) (Integer__Order.__default.IsSorted ($LS $ly@@619) (Lit |run#0@@177|)))))) :qid |totalord.41:23| :weight 3 :skolemid |12582| :pattern ( (Integer__Order.__default.IsSorted ($LS $ly@@619) (Lit |run#0@@177|))) ))))
(assert  (=> true (forall ((|run#0@@178| T@U) ) (!  (=> (and (= (type |run#0@@178|) (SeqType BoxType)) (or (|Integer__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@178|) ($Is |run#0@@178| (TSeq TInt)))) true) :qid |totalord.48:38| :skolemid |12583| :pattern ( (Integer__Order.__default.IsStrictlySortedInternal |run#0@@178|)) ))))
(assert (forall ((|run#0@@179| T@U) ) (!  (=> (and (= (type |run#0@@179|) (SeqType BoxType)) ($Is |run#0@@179| (TSeq TInt))) (and (=> (|Integer__Order.__default.IsStrictlySortedInternal#requires| |run#0@@179|) true) (=> true (|Integer__Order.__default.IsStrictlySortedInternal#requires| |run#0@@179|)))) :qid |totalord.48:38| :skolemid |12584| :pattern ( (|Integer__Order.__default.IsStrictlySortedInternal#requires| |run#0@@179|)) )))
(assert  (=> true (forall ((|run#0@@180| T@U) ) (!  (=> (and (= (type |run#0@@180|) (SeqType BoxType)) (or (|Integer__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@180|) ($Is |run#0@@180| (TSeq TInt)))) (and (forall ((|i#2@@38| Int) (|j#2@@19| Int) ) (!  (=> (< |j#2@@19| (|Seq#Length| |run#0@@180|)) (|Integer__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@180| |i#2@@38|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@180| |j#2@@19|))))) :qid |totalord.50:12| :skolemid |12585| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@180| |j#2@@19|)) ($Unbox intType (|Seq#Index| |run#0@@180| |i#2@@38|))) )) (and (=> (Integer__Order.__default.IsStrictlySortedInternal |run#0@@180|) (forall ((|i#2@@39| Int) (|j#2@@20| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#2@@39|) (< |i#2@@39| |j#2@@20|)) (< |j#2@@20| (|Seq#Length| |run#0@@180|))) (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@180| |i#2@@39|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@180| |j#2@@20|)))))) :qid |totalord.50:12| :skolemid |12586| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@180| |j#2@@20|)) ($Unbox intType (|Seq#Index| |run#0@@180| |i#2@@39|))) ))) (=> (forall ((|i#2@@40| Int) (|j#2@@21| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#2@@40|) (< |i#2@@40| |j#2@@21|)) (< |j#2@@21| (|Seq#Length| |run#0@@180|))) (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@180| |i#2@@40|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@180| |j#2@@21|)))))) :qid |totalord.50:12| :skolemid |12586| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@180| |j#2@@21|)) ($Unbox intType (|Seq#Index| |run#0@@180| |i#2@@40|))) )) (Integer__Order.__default.IsStrictlySortedInternal |run#0@@180|))))) :qid |totalord.48:38| :skolemid |12587| :pattern ( (Integer__Order.__default.IsStrictlySortedInternal |run#0@@180|)) ))))
(assert  (=> true (forall ((|run#0@@181| T@U) ) (!  (=> (and (= (type |run#0@@181|) (SeqType BoxType)) (or (|Integer__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@181|)) ($Is |run#0@@181| (TSeq TInt)))) (and (forall ((|i#3@@40| Int) (|j#3@@16| Int) ) (!  (=> (< |j#3@@16| (|Seq#Length| (Lit |run#0@@181|))) (|Integer__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@181|) |i#3@@40|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@181|) |j#3@@16|))))) :qid |totalord.50:12| :skolemid |12588| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@181| |j#3@@16|)) ($Unbox intType (|Seq#Index| |run#0@@181| |i#3@@40|))) )) (and (=> (Integer__Order.__default.IsStrictlySortedInternal (Lit |run#0@@181|)) (forall ((|i#3@@41| Int) (|j#3@@17| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#3@@41|) (< |i#3@@41| |j#3@@17|)) (< |j#3@@17| (|Seq#Length| (Lit |run#0@@181|)))) (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@181|) |i#3@@41|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@181|) |j#3@@17|)))))) :qid |totalord.50:12| :skolemid |12589| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@181| |j#3@@17|)) ($Unbox intType (|Seq#Index| |run#0@@181| |i#3@@41|))) ))) (=> (forall ((|i#3@@42| Int) (|j#3@@18| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#3@@42|) (< |i#3@@42| |j#3@@18|)) (< |j#3@@18| (|Seq#Length| (Lit |run#0@@181|)))) (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@181|) |i#3@@42|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@181|) |j#3@@18|)))))) :qid |totalord.50:12| :skolemid |12589| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@181| |j#3@@18|)) ($Unbox intType (|Seq#Index| |run#0@@181| |i#3@@42|))) )) (Integer__Order.__default.IsStrictlySortedInternal (Lit |run#0@@181|)))))) :qid |totalord.48:38| :weight 3 :skolemid |12590| :pattern ( (Integer__Order.__default.IsStrictlySortedInternal (Lit |run#0@@181|))) ))))
(assert (forall (($ly@@620 T@U) (|run#0@@182| T@U) ) (!  (=> (and (= (type $ly@@620) LayerTypeType) (= (type |run#0@@182|) (SeqType BoxType))) (and (=> (Integer__Order.__default.IsStrictlySorted ($LS $ly@@620) |run#0@@182|) (Integer__Order.__default.IsStrictlySorted $ly@@620 |run#0@@182|)) (=> (Integer__Order.__default.IsStrictlySorted $ly@@620 |run#0@@182|) (Integer__Order.__default.IsStrictlySorted ($LS $ly@@620) |run#0@@182|)))) :qid |totalord.64:23| :skolemid |12591| :pattern ( (Integer__Order.__default.IsStrictlySorted ($LS $ly@@620) |run#0@@182|)) )))
(assert (forall (($ly@@621 T@U) (|run#0@@183| T@U) ) (!  (=> (and (= (type $ly@@621) LayerTypeType) (= (type |run#0@@183|) (SeqType BoxType))) (and (=> (Integer__Order.__default.IsStrictlySorted $ly@@621 |run#0@@183|) (Integer__Order.__default.IsStrictlySorted $LZ |run#0@@183|)) (=> (Integer__Order.__default.IsStrictlySorted $LZ |run#0@@183|) (Integer__Order.__default.IsStrictlySorted $ly@@621 |run#0@@183|)))) :qid |totalord.64:23| :skolemid |12592| :pattern ( (Integer__Order.__default.IsStrictlySorted (AsFuelBottom $ly@@621) |run#0@@183|)) )))
(assert  (=> true (forall (($ly@@622 T@U) (|run#0@@184| T@U) ) (!  (=> (and (and (= (type $ly@@622) LayerTypeType) (= (type |run#0@@184|) (SeqType BoxType))) (or (|Integer__Order.__default.IsStrictlySorted#canCall| |run#0@@184|) ($Is |run#0@@184| (TSeq TInt)))) (and (and (=> (= (|Seq#Length| |run#0@@184|) (LitInt 0)) (Integer__Order.__default.IsStrictlySorted $ly@@622 |run#0@@184|)) (=> (= (|Seq#Length| |run#0@@184|) (LitInt 1)) (Integer__Order.__default.IsStrictlySorted $ly@@622 |run#0@@184|))) (=> (Integer__Order.__default.IsStrictlySorted $ly@@622 |run#0@@184|) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@184|)))) :qid |totalord.64:23| :skolemid |12593| :pattern ( (Integer__Order.__default.IsStrictlySorted $ly@@622 |run#0@@184|)) ))))
(assert (forall (($ly@@623 T@U) (|run#0@@185| T@U) ) (!  (=> (and (and (= (type $ly@@623) LayerTypeType) (= (type |run#0@@185|) (SeqType BoxType))) ($Is |run#0@@185| (TSeq TInt))) (and (=> (|Integer__Order.__default.IsStrictlySorted#requires| $ly@@623 |run#0@@185|) true) (=> true (|Integer__Order.__default.IsStrictlySorted#requires| $ly@@623 |run#0@@185|)))) :qid |totalord.64:23| :skolemid |12594| :pattern ( (|Integer__Order.__default.IsStrictlySorted#requires| $ly@@623 |run#0@@185|)) )))
(assert  (=> true (forall (($ly@@624 T@U) (|run#0@@186| T@U) ) (!  (=> (and (and (= (type $ly@@624) LayerTypeType) (= (type |run#0@@186|) (SeqType BoxType))) (or (|Integer__Order.__default.IsStrictlySorted#canCall| |run#0@@186|) ($Is |run#0@@186| (TSeq TInt)))) (and (|Integer__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@186|) (and (=> (Integer__Order.__default.IsStrictlySorted ($LS $ly@@624) |run#0@@186|) (let ((|b#2@@13| (Integer__Order.__default.IsStrictlySortedInternal |run#0@@186|))) (ite |b#2@@13| |b#2@@13| |b#2@@13|))) (=> (let ((|b#2@@14| (Integer__Order.__default.IsStrictlySortedInternal |run#0@@186|))) (ite |b#2@@14| |b#2@@14| |b#2@@14|)) (Integer__Order.__default.IsStrictlySorted ($LS $ly@@624) |run#0@@186|))))) :qid |totalord.64:23| :skolemid |12595| :pattern ( (Integer__Order.__default.IsStrictlySorted ($LS $ly@@624) |run#0@@186|)) ))))
(assert  (=> true (forall (($ly@@625 T@U) (|run#0@@187| T@U) ) (!  (=> (and (and (= (type $ly@@625) LayerTypeType) (= (type |run#0@@187|) (SeqType BoxType))) (or (|Integer__Order.__default.IsStrictlySorted#canCall| (Lit |run#0@@187|)) ($Is |run#0@@187| (TSeq TInt)))) (and (|Integer__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@187|)) (and (=> (Integer__Order.__default.IsStrictlySorted ($LS $ly@@625) (Lit |run#0@@187|)) (let ((|b#3@@16| (U_2_bool (Lit (bool_2_U (Integer__Order.__default.IsStrictlySortedInternal (Lit |run#0@@187|))))))) (ite |b#3@@16| |b#3@@16| |b#3@@16|))) (=> (let ((|b#3@@17| (U_2_bool (Lit (bool_2_U (Integer__Order.__default.IsStrictlySortedInternal (Lit |run#0@@187|))))))) (ite |b#3@@17| |b#3@@17| |b#3@@17|)) (Integer__Order.__default.IsStrictlySorted ($LS $ly@@625) (Lit |run#0@@187|)))))) :qid |totalord.64:23| :weight 3 :skolemid |12596| :pattern ( (Integer__Order.__default.IsStrictlySorted ($LS $ly@@625) (Lit |run#0@@187|))) ))))
(assert (= (type Tclass.Mathematics.__default) TyType))
(assert (= (Tag Tclass.Mathematics.__default) Tagclass.Mathematics.__default))
(assert (forall ((bx@@107 T@U) ) (!  (=> (and (= (type bx@@107) BoxType) ($IsBox bx@@107 Tclass.Mathematics.__default)) (and (= ($Box ($Unbox refType bx@@107)) bx@@107) ($Is ($Unbox refType bx@@107) Tclass.Mathematics.__default))) :qid |unknown.0:0| :skolemid |12597| :pattern ( ($IsBox bx@@107 Tclass.Mathematics.__default)) )))
(assert (forall (($o@@60 T@U) ) (!  (=> (= (type $o@@60) refType) (and (=> ($Is $o@@60 Tclass.Mathematics.__default) (or (= $o@@60 null) (= (dtype $o@@60) Tclass.Mathematics.__default))) (=> (or (= $o@@60 null) (= (dtype $o@@60) Tclass.Mathematics.__default)) ($Is $o@@60 Tclass.Mathematics.__default)))) :qid |unknown.0:0| :skolemid |12598| :pattern ( ($Is $o@@60 Tclass.Mathematics.__default)) )))
(assert (forall (($o@@61 T@U) ($h@@69 T@U) ) (!  (=> (and (= (type $o@@61) refType) (= (type $h@@69) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@61 Tclass.Mathematics.__default $h@@69) (or (= $o@@61 null) (U_2_bool (MapType1Select (MapType0Select $h@@69 $o@@61) alloc)))) (=> (or (= $o@@61 null) (U_2_bool (MapType1Select (MapType0Select $h@@69 $o@@61) alloc))) ($IsAlloc $o@@61 Tclass.Mathematics.__default $h@@69)))) :qid |unknown.0:0| :skolemid |12599| :pattern ( ($IsAlloc $o@@61 Tclass.Mathematics.__default $h@@69)) )))
(assert  (=> true (forall ((|a#0@@184| Int) (|b#0@@140| Int) ) (!  (=> true true) :qid |mathemat.3:15| :skolemid |12600| :pattern ( (Mathematics.__default.min |a#0@@184| |b#0@@140|)) ))))
(assert (forall ((|a#0@@185| Int) (|b#0@@141| Int) ) (!  (and (=> (|Mathematics.__default.min#requires| |a#0@@185| |b#0@@141|) true) (=> true (|Mathematics.__default.min#requires| |a#0@@185| |b#0@@141|))) :qid |mathemat.3:15| :skolemid |12601| :pattern ( (|Mathematics.__default.min#requires| |a#0@@185| |b#0@@141|)) )))
(assert  (=> true (forall ((|a#0@@186| Int) (|b#0@@142| Int) ) (!  (=> true (= (Mathematics.__default.min |a#0@@186| |b#0@@142|) (ite (< |a#0@@186| |b#0@@142|) |a#0@@186| |b#0@@142|))) :qid |mathemat.3:15| :skolemid |12602| :pattern ( (Mathematics.__default.min |a#0@@186| |b#0@@142|)) ))))
(assert  (=> true (forall ((|a#0@@187| Int) (|b#0@@143| Int) ) (!  (=> true (= (Mathematics.__default.min (LitInt |a#0@@187|) (LitInt |b#0@@143|)) (ite (< |a#0@@187| |b#0@@143|) |a#0@@187| |b#0@@143|))) :qid |mathemat.3:15| :weight 3 :skolemid |12603| :pattern ( (Mathematics.__default.min (LitInt |a#0@@187|) (LitInt |b#0@@143|))) ))))
(assert  (=> true (forall ((|a#0@@188| Int) (|b#0@@144| Int) ) (!  (=> true true) :qid |mathemat.11:15| :skolemid |12604| :pattern ( (Mathematics.__default.max |a#0@@188| |b#0@@144|)) ))))
(assert (forall ((|a#0@@189| Int) (|b#0@@145| Int) ) (!  (and (=> (|Mathematics.__default.max#requires| |a#0@@189| |b#0@@145|) true) (=> true (|Mathematics.__default.max#requires| |a#0@@189| |b#0@@145|))) :qid |mathemat.11:15| :skolemid |12605| :pattern ( (|Mathematics.__default.max#requires| |a#0@@189| |b#0@@145|)) )))
(assert  (=> true (forall ((|a#0@@190| Int) (|b#0@@146| Int) ) (!  (=> true (= (Mathematics.__default.max |a#0@@190| |b#0@@146|) (ite (< |a#0@@190| |b#0@@146|) |b#0@@146| |a#0@@190|))) :qid |mathemat.11:15| :skolemid |12606| :pattern ( (Mathematics.__default.max |a#0@@190| |b#0@@146|)) ))))
(assert  (=> true (forall ((|a#0@@191| Int) (|b#0@@147| Int) ) (!  (=> true (= (Mathematics.__default.max (LitInt |a#0@@191|) (LitInt |b#0@@147|)) (ite (< |a#0@@191| |b#0@@147|) |b#0@@147| |a#0@@191|))) :qid |mathemat.11:15| :weight 3 :skolemid |12607| :pattern ( (Mathematics.__default.max (LitInt |a#0@@191|) (LitInt |b#0@@147|))) ))))
(assert (forall ((arg0@@346 T@U) (arg1@@210 T@U) ) (! (= (type (Mathematics.__default.Set arg0@@346 arg1@@210)) (MapType0Type BoxType boolType)) :qid |funType:Mathematics.__default.Set| :pattern ( (Mathematics.__default.Set arg0@@346 arg1@@210)) )))
(assert  (=> true (forall ((Mathematics._default.Set$T T@U) (|ms#0| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T) TyType) (= (type |ms#0|) (MapType0Type BoxType intType))) (or (|Mathematics.__default.Set#canCall| Mathematics._default.Set$T |ms#0|) ($Is |ms#0| (TMultiSet Mathematics._default.Set$T)))) ($Is (Mathematics.__default.Set Mathematics._default.Set$T |ms#0|) (TSet Mathematics._default.Set$T))) :qid |unknown.0:0| :skolemid |12608| :pattern ( (Mathematics.__default.Set Mathematics._default.Set$T |ms#0|)) ))))
(assert (forall ((Mathematics._default.Set$T@@0 T@U) (|ms#0@@0| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T@@0) TyType) (= (type |ms#0@@0|) (MapType0Type BoxType intType))) ($Is |ms#0@@0| (TMultiSet Mathematics._default.Set$T@@0))) (and (=> (|Mathematics.__default.Set#requires| Mathematics._default.Set$T@@0 |ms#0@@0|) true) (=> true (|Mathematics.__default.Set#requires| Mathematics._default.Set$T@@0 |ms#0@@0|)))) :qid |unknown.0:0| :skolemid |12609| :pattern ( (|Mathematics.__default.Set#requires| Mathematics._default.Set$T@@0 |ms#0@@0|)) )))
(assert  (=> true (forall ((Mathematics._default.Set$T@@1 T@U) (|ms#0@@1| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T@@1) TyType) (= (type |ms#0@@1|) (MapType0Type BoxType intType))) (or (|Mathematics.__default.Set#canCall| Mathematics._default.Set$T@@1 |ms#0@@1|) ($Is |ms#0@@1| (TMultiSet Mathematics._default.Set$T@@1)))) (= (Mathematics.__default.Set Mathematics._default.Set$T@@1 |ms#0@@1|) (|lambda#64| Mathematics._default.Set$T@@1 |ms#0@@1| 0))) :qid |unknown.0:0| :skolemid |12610| :pattern ( (Mathematics.__default.Set Mathematics._default.Set$T@@1 |ms#0@@1|)) ))))
(assert  (=> true (forall ((Mathematics._default.Set$T@@2 T@U) (|ms#0@@2| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T@@2) TyType) (= (type |ms#0@@2|) (MapType0Type BoxType intType))) (or (|Mathematics.__default.Set#canCall| Mathematics._default.Set$T@@2 (Lit |ms#0@@2|)) ($Is |ms#0@@2| (TMultiSet Mathematics._default.Set$T@@2)))) (= (Mathematics.__default.Set Mathematics._default.Set$T@@2 (Lit |ms#0@@2|)) (|lambda#64| Mathematics._default.Set$T@@2 (Lit |ms#0@@2|) 0))) :qid |unknown.0:0| :weight 3 :skolemid |12611| :pattern ( (Mathematics.__default.Set Mathematics._default.Set$T@@2 (Lit |ms#0@@2|))) ))))
(assert (forall ((arg0@@347 T@U) (arg1@@211 T@U) ) (! (= (type (Mathematics.__default.ISet arg0@@347 arg1@@211)) (MapType0Type BoxType boolType)) :qid |funType:Mathematics.__default.ISet| :pattern ( (Mathematics.__default.ISet arg0@@347 arg1@@211)) )))
(assert  (=> true (forall ((Mathematics._default.ISet$T T@U) (|ms#0@@3| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T) TyType) (= (type |ms#0@@3|) (MapType0Type BoxType boolType))) (or (|Mathematics.__default.ISet#canCall| Mathematics._default.ISet$T |ms#0@@3|) ($Is |ms#0@@3| (TSet Mathematics._default.ISet$T)))) ($Is (Mathematics.__default.ISet Mathematics._default.ISet$T |ms#0@@3|) (TISet Mathematics._default.ISet$T))) :qid |unknown.0:0| :skolemid |12612| :pattern ( (Mathematics.__default.ISet Mathematics._default.ISet$T |ms#0@@3|)) ))))
(assert (forall ((Mathematics._default.ISet$T@@0 T@U) (|ms#0@@4| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T@@0) TyType) (= (type |ms#0@@4|) (MapType0Type BoxType boolType))) ($Is |ms#0@@4| (TSet Mathematics._default.ISet$T@@0))) (and (=> (|Mathematics.__default.ISet#requires| Mathematics._default.ISet$T@@0 |ms#0@@4|) true) (=> true (|Mathematics.__default.ISet#requires| Mathematics._default.ISet$T@@0 |ms#0@@4|)))) :qid |unknown.0:0| :skolemid |12613| :pattern ( (|Mathematics.__default.ISet#requires| Mathematics._default.ISet$T@@0 |ms#0@@4|)) )))
(assert  (=> true (forall ((Mathematics._default.ISet$T@@1 T@U) (|ms#0@@5| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T@@1) TyType) (= (type |ms#0@@5|) (MapType0Type BoxType boolType))) (or (|Mathematics.__default.ISet#canCall| Mathematics._default.ISet$T@@1 |ms#0@@5|) ($Is |ms#0@@5| (TSet Mathematics._default.ISet$T@@1)))) (= (Mathematics.__default.ISet Mathematics._default.ISet$T@@1 |ms#0@@5|) (|lambda#124| Mathematics._default.ISet$T@@1 |ms#0@@5|))) :qid |unknown.0:0| :skolemid |12614| :pattern ( (Mathematics.__default.ISet Mathematics._default.ISet$T@@1 |ms#0@@5|)) ))))
(assert  (=> true (forall ((Mathematics._default.ISet$T@@2 T@U) (|ms#0@@6| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T@@2) TyType) (= (type |ms#0@@6|) (MapType0Type BoxType boolType))) (or (|Mathematics.__default.ISet#canCall| Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|)) ($Is |ms#0@@6| (TSet Mathematics._default.ISet$T@@2)))) (= (Mathematics.__default.ISet Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|)) (|lambda#124| Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|)))) :qid |unknown.0:0| :weight 3 :skolemid |12615| :pattern ( (Mathematics.__default.ISet Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|))) ))))
(assert (= (type Tclass.ValueType.Value) TyType))
(assert (= (Tag Tclass.ValueType.Value) Tagclass.ValueType.Value))
(assert (forall ((bx@@108 T@U) ) (!  (=> (and (= (type bx@@108) BoxType) ($IsBox bx@@108 Tclass.ValueType.Value)) (and (= ($Box ($Unbox (SeqType BoxType) bx@@108)) bx@@108) ($Is ($Unbox (SeqType BoxType) bx@@108) Tclass.ValueType.Value))) :qid |unknown.0:0| :skolemid |12616| :pattern ( ($IsBox bx@@108 Tclass.ValueType.Value)) )))
(assert (forall ((|s#0@@206| T@U) ) (!  (=> (= (type |s#0@@206|) (SeqType BoxType)) (and (=> ($Is |s#0@@206| Tclass.ValueType.Value) (and ($Is |s#0@@206| (TSeq Tclass.NativeTypes.byte)) (<= (|Seq#Length| |s#0@@206|) (LitInt 1024)))) (=> (and ($Is |s#0@@206| (TSeq Tclass.NativeTypes.byte)) (<= (|Seq#Length| |s#0@@206|) (LitInt 1024))) ($Is |s#0@@206| Tclass.ValueType.Value)))) :qid |unknown.0:0| :skolemid |12617| :pattern ( ($Is |s#0@@206| Tclass.ValueType.Value)) )))
(assert (forall ((|s#0@@207| T@U) ($h@@70 T@U) ) (!  (=> (and (= (type |s#0@@207|) (SeqType BoxType)) (= (type $h@@70) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |s#0@@207| Tclass.ValueType.Value $h@@70) ($IsAlloc |s#0@@207| (TSeq Tclass.NativeTypes.byte) $h@@70)) (=> ($IsAlloc |s#0@@207| (TSeq Tclass.NativeTypes.byte) $h@@70) ($IsAlloc |s#0@@207| Tclass.ValueType.Value $h@@70)))) :qid |unknown.0:0| :skolemid |12618| :pattern ( ($IsAlloc |s#0@@207| Tclass.ValueType.Value $h@@70)) )))
(assert (= (type Tclass.ValueType.__default) TyType))
(assert (= (Tag Tclass.ValueType.__default) Tagclass.ValueType.__default))
(assert (forall ((bx@@109 T@U) ) (!  (=> (and (= (type bx@@109) BoxType) ($IsBox bx@@109 Tclass.ValueType.__default)) (and (= ($Box ($Unbox refType bx@@109)) bx@@109) ($Is ($Unbox refType bx@@109) Tclass.ValueType.__default))) :qid |unknown.0:0| :skolemid |12619| :pattern ( ($IsBox bx@@109 Tclass.ValueType.__default)) )))
(assert (forall (($o@@62 T@U) ) (!  (=> (= (type $o@@62) refType) (and (=> ($Is $o@@62 Tclass.ValueType.__default) (or (= $o@@62 null) (= (dtype $o@@62) Tclass.ValueType.__default))) (=> (or (= $o@@62 null) (= (dtype $o@@62) Tclass.ValueType.__default)) ($Is $o@@62 Tclass.ValueType.__default)))) :qid |unknown.0:0| :skolemid |12620| :pattern ( ($Is $o@@62 Tclass.ValueType.__default)) )))
(assert (forall (($o@@63 T@U) ($h@@71 T@U) ) (!  (=> (and (= (type $o@@63) refType) (= (type $h@@71) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@63 Tclass.ValueType.__default $h@@71) (or (= $o@@63 null) (U_2_bool (MapType1Select (MapType0Select $h@@71 $o@@63) alloc)))) (=> (or (= $o@@63 null) (U_2_bool (MapType1Select (MapType0Select $h@@71 $o@@63) alloc))) ($IsAlloc $o@@63 Tclass.ValueType.__default $h@@71)))) :qid |unknown.0:0| :skolemid |12621| :pattern ( ($IsAlloc $o@@63 Tclass.ValueType.__default $h@@71)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) ValueType.__default.MaxLen) (< ValueType.__default.MaxLen 18446744073709551616)))))
(assert  (=> |ValueType.__default.MaxLen#requires| true))
(assert  (=> true |ValueType.__default.MaxLen#requires|))
(assert  (=> true (=> true (= ValueType.__default.MaxLen (LitInt 1024)))))
(assert  (=> true (=> true (= ValueType.__default.MaxLen (LitInt 1024)))))
(assert (= (type ValueType.__default.DefaultValue) (SeqType BoxType)))
(assert  (=> true (=> true ($Is ValueType.__default.DefaultValue Tclass.ValueType.Value))))
(assert  (=> |ValueType.__default.DefaultValue#requires| true))
(assert  (=> true |ValueType.__default.DefaultValue#requires|))
(assert  (=> true (=> true (= ValueType.__default.DefaultValue (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (=> true (= ValueType.__default.DefaultValue (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (forall ((|v#0@@15| T@U) ) (!  (=> (and (= (type |v#0@@15|) (SeqType BoxType)) (or (|ValueType.__default.Len#canCall| |v#0@@15|) ($Is |v#0@@15| Tclass.ValueType.Value))) (<= (LitInt 0) (ValueType.__default.Len |v#0@@15|))) :qid |KeyTypes.17:15| :skolemid |12622| :pattern ( (ValueType.__default.Len |v#0@@15|)) ))))
(assert (forall ((|v#0@@16| T@U) ) (!  (=> (and (= (type |v#0@@16|) (SeqType BoxType)) ($Is |v#0@@16| Tclass.ValueType.Value)) (and (=> (|ValueType.__default.Len#requires| |v#0@@16|) true) (=> true (|ValueType.__default.Len#requires| |v#0@@16|)))) :qid |KeyTypes.17:15| :skolemid |12623| :pattern ( (|ValueType.__default.Len#requires| |v#0@@16|)) )))
(assert  (=> true (forall ((|v#0@@17| T@U) ) (!  (=> (and (= (type |v#0@@17|) (SeqType BoxType)) (or (|ValueType.__default.Len#canCall| |v#0@@17|) ($Is |v#0@@17| Tclass.ValueType.Value))) (= (ValueType.__default.Len |v#0@@17|) (|Seq#Length| |v#0@@17|))) :qid |KeyTypes.17:15| :skolemid |12624| :pattern ( (ValueType.__default.Len |v#0@@17|)) ))))
(assert  (=> true (forall ((|v#0@@18| T@U) ) (!  (=> (and (= (type |v#0@@18|) (SeqType BoxType)) (or (|ValueType.__default.Len#canCall| (Lit |v#0@@18|)) ($Is |v#0@@18| Tclass.ValueType.Value))) (= (ValueType.__default.Len (Lit |v#0@@18|)) (|Seq#Length| (Lit |v#0@@18|)))) :qid |KeyTypes.17:15| :weight 3 :skolemid |12625| :pattern ( (ValueType.__default.Len (Lit |v#0@@18|))) ))))
(assert  (=> true (forall ((|s#0@@208| T@U) ) (!  (=> (and (= (type |s#0@@208|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestring#canCall| |s#0@@208|) ($Is |s#0@@208| (TSeq Tclass.NativeTypes.byte)))) true) :qid |KeyTypes.19:36| :skolemid |12626| :pattern ( (ValueType.__default.ValidMessageBytestring |s#0@@208|)) ))))
(assert (forall ((|s#0@@209| T@U) ) (!  (=> (and (= (type |s#0@@209|) (SeqType BoxType)) ($Is |s#0@@209| (TSeq Tclass.NativeTypes.byte))) (and (=> (|ValueType.__default.ValidMessageBytestring#requires| |s#0@@209|) true) (=> true (|ValueType.__default.ValidMessageBytestring#requires| |s#0@@209|)))) :qid |KeyTypes.19:36| :skolemid |12627| :pattern ( (|ValueType.__default.ValidMessageBytestring#requires| |s#0@@209|)) )))
(assert  (=> true (forall ((|s#0@@210| T@U) ) (!  (=> (and (= (type |s#0@@210|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestring#canCall| |s#0@@210|) ($Is |s#0@@210| (TSeq Tclass.NativeTypes.byte)))) (and |ValueType.__default.MaxLen#canCall| (and (=> (ValueType.__default.ValidMessageBytestring |s#0@@210|) (<= (|Seq#Length| |s#0@@210|) (LitInt ValueType.__default.MaxLen))) (=> (<= (|Seq#Length| |s#0@@210|) (LitInt ValueType.__default.MaxLen)) (ValueType.__default.ValidMessageBytestring |s#0@@210|))))) :qid |KeyTypes.19:36| :skolemid |12628| :pattern ( (ValueType.__default.ValidMessageBytestring |s#0@@210|)) ))))
(assert  (=> true (forall ((|s#0@@211| T@U) ) (!  (=> (and (= (type |s#0@@211|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestring#canCall| (Lit |s#0@@211|)) ($Is |s#0@@211| (TSeq Tclass.NativeTypes.byte)))) (and |ValueType.__default.MaxLen#canCall| (and (=> (ValueType.__default.ValidMessageBytestring (Lit |s#0@@211|)) (<= (|Seq#Length| (Lit |s#0@@211|)) (LitInt ValueType.__default.MaxLen))) (=> (<= (|Seq#Length| (Lit |s#0@@211|)) (LitInt ValueType.__default.MaxLen)) (ValueType.__default.ValidMessageBytestring (Lit |s#0@@211|)))))) :qid |KeyTypes.19:36| :weight 3 :skolemid |12629| :pattern ( (ValueType.__default.ValidMessageBytestring (Lit |s#0@@211|))) ))))
(assert  (=> true (forall ((|strs#0| T@U) ) (!  (=> (and (= (type |strs#0|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestrings#canCall| |strs#0|) ($Is |strs#0| (TSeq (TSeq Tclass.NativeTypes.byte))))) true) :qid |KeyTypes.24:37| :skolemid |12630| :pattern ( (ValueType.__default.ValidMessageBytestrings |strs#0|)) ))))
(assert (forall ((|strs#0@@0| T@U) ) (!  (=> (and (= (type |strs#0@@0|) (SeqType BoxType)) ($Is |strs#0@@0| (TSeq (TSeq Tclass.NativeTypes.byte)))) (and (=> (|ValueType.__default.ValidMessageBytestrings#requires| |strs#0@@0|) true) (=> true (|ValueType.__default.ValidMessageBytestrings#requires| |strs#0@@0|)))) :qid |KeyTypes.24:37| :skolemid |12631| :pattern ( (|ValueType.__default.ValidMessageBytestrings#requires| |strs#0@@0|)) )))
(assert  (=> true (forall ((|strs#0@@1| T@U) ) (!  (=> (and (= (type |strs#0@@1|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestrings#canCall| |strs#0@@1|) ($Is |strs#0@@1| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#2@@41| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@41|) (< |i#2@@41| (|Seq#Length| |strs#0@@1|))) (|ValueType.__default.ValidMessageBytestring#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#2@@41|)))) :qid |KeyTypes.26:12| :skolemid |12632| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#2@@41|))) )) (and (=> (ValueType.__default.ValidMessageBytestrings |strs#0@@1|) (forall ((|i#2@@42| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@42|) (< |i#2@@42| (|Seq#Length| |strs#0@@1|))) (ValueType.__default.ValidMessageBytestring ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#2@@42|)))) :qid |KeyTypes.26:12| :skolemid |12633| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#2@@42|))) ))) (=> (forall ((|i#2@@43| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@43|) (< |i#2@@43| (|Seq#Length| |strs#0@@1|))) (ValueType.__default.ValidMessageBytestring ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#2@@43|)))) :qid |KeyTypes.26:12| :skolemid |12633| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#2@@43|))) )) (ValueType.__default.ValidMessageBytestrings |strs#0@@1|))))) :qid |KeyTypes.24:37| :skolemid |12634| :pattern ( (ValueType.__default.ValidMessageBytestrings |strs#0@@1|)) ))))
(assert  (=> true (forall ((|strs#0@@2| T@U) ) (!  (=> (and (= (type |strs#0@@2|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestrings#canCall| (Lit |strs#0@@2|)) ($Is |strs#0@@2| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#3@@43| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@43|) (< |i#3@@43| (|Seq#Length| (Lit |strs#0@@2|)))) (|ValueType.__default.ValidMessageBytestring#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |strs#0@@2|) |i#3@@43|)))) :qid |KeyTypes.26:12| :skolemid |12635| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@2| |i#3@@43|))) )) (and (=> (ValueType.__default.ValidMessageBytestrings (Lit |strs#0@@2|)) (forall ((|i#3@@44| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@44|) (< |i#3@@44| (|Seq#Length| (Lit |strs#0@@2|)))) (ValueType.__default.ValidMessageBytestring ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |strs#0@@2|) |i#3@@44|)))) :qid |KeyTypes.26:12| :skolemid |12636| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@2| |i#3@@44|))) ))) (=> (forall ((|i#3@@45| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@45|) (< |i#3@@45| (|Seq#Length| (Lit |strs#0@@2|)))) (ValueType.__default.ValidMessageBytestring ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |strs#0@@2|) |i#3@@45|)))) :qid |KeyTypes.26:12| :skolemid |12636| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@2| |i#3@@45|))) )) (ValueType.__default.ValidMessageBytestrings (Lit |strs#0@@2|)))))) :qid |KeyTypes.24:37| :weight 3 :skolemid |12637| :pattern ( (ValueType.__default.ValidMessageBytestrings (Lit |strs#0@@2|))) ))))
(assert (= (type |#ValueMessage.Delta.NoDelta|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#ValueMessage.Delta.NoDelta|) |##ValueMessage.Delta.NoDelta|))
(assert (forall ((d@@37 T@U) ) (!  (=> (= (type d@@37) DatatypeTypeType) (and (=> (ValueMessage.Delta.NoDelta_q d@@37) (= (DatatypeCtorId d@@37) |##ValueMessage.Delta.NoDelta|)) (=> (= (DatatypeCtorId d@@37) |##ValueMessage.Delta.NoDelta|) (ValueMessage.Delta.NoDelta_q d@@37)))) :qid |unknown.0:0| :skolemid |12638| :pattern ( (ValueMessage.Delta.NoDelta_q d@@37)) )))
(assert (forall ((d@@38 T@U) ) (!  (=> (and (= (type d@@38) DatatypeTypeType) (ValueMessage.Delta.NoDelta_q d@@38)) (= d@@38 |#ValueMessage.Delta.NoDelta|)) :qid |unknown.0:0| :skolemid |12639| :pattern ( (ValueMessage.Delta.NoDelta_q d@@38)) )))
(assert (= (type Tclass.ValueMessage.Delta) TyType))
(assert (= (Tag Tclass.ValueMessage.Delta) Tagclass.ValueMessage.Delta))
(assert (forall ((bx@@110 T@U) ) (!  (=> (and (= (type bx@@110) BoxType) ($IsBox bx@@110 Tclass.ValueMessage.Delta)) (and (= ($Box ($Unbox DatatypeTypeType bx@@110)) bx@@110) ($Is ($Unbox DatatypeTypeType bx@@110) Tclass.ValueMessage.Delta))) :qid |unknown.0:0| :skolemid |12640| :pattern ( ($IsBox bx@@110 Tclass.ValueMessage.Delta)) )))
(assert ($Is |#ValueMessage.Delta.NoDelta| Tclass.ValueMessage.Delta))
(assert (forall (($h@@72 T@U) ) (!  (=> (and (= (type $h@@72) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@72)) ($IsAlloc |#ValueMessage.Delta.NoDelta| Tclass.ValueMessage.Delta $h@@72)) :qid |DafnyPre.521:12| :skolemid |12641| :pattern ( ($IsAlloc |#ValueMessage.Delta.NoDelta| Tclass.ValueMessage.Delta $h@@72)) )))
(assert (= |#ValueMessage.Delta.NoDelta| (Lit |#ValueMessage.Delta.NoDelta|)))
(assert (forall ((d@@39 T@U) ) (!  (=> (and (= (type d@@39) DatatypeTypeType) (|$IsA#ValueMessage.Delta| d@@39)) (ValueMessage.Delta.NoDelta_q d@@39)) :qid |unknown.0:0| :skolemid |12642| :pattern ( (|$IsA#ValueMessage.Delta| d@@39)) )))
(assert (forall ((d@@40 T@U) ) (!  (=> (and (= (type d@@40) DatatypeTypeType) ($Is d@@40 Tclass.ValueMessage.Delta)) (ValueMessage.Delta.NoDelta_q d@@40)) :qid |unknown.0:0| :skolemid |12643| :pattern ( (ValueMessage.Delta.NoDelta_q d@@40) ($Is d@@40 Tclass.ValueMessage.Delta)) )))
(assert (forall ((a@@124 T@U) (b@@73 T@U) ) (!  (=> (and (and (= (type a@@124) DatatypeTypeType) (= (type b@@73) DatatypeTypeType)) true) (and (=> (|ValueMessage.Delta#Equal| a@@124 b@@73) true) (=> true (|ValueMessage.Delta#Equal| a@@124 b@@73)))) :qid |unknown.0:0| :skolemid |12644| :pattern ( (|ValueMessage.Delta#Equal| a@@124 b@@73)) )))
(assert (forall ((a@@125 T@U) (b@@74 T@U) ) (!  (=> (and (= (type a@@125) DatatypeTypeType) (= (type b@@74) DatatypeTypeType)) (and (=> (|ValueMessage.Delta#Equal| a@@125 b@@74) (= a@@125 b@@74)) (=> (= a@@125 b@@74) (|ValueMessage.Delta#Equal| a@@125 b@@74)))) :qid |unknown.0:0| :skolemid |12645| :pattern ( (|ValueMessage.Delta#Equal| a@@125 b@@74)) )))
(assert (= (type Tclass.ValueMessage.__default) TyType))
(assert (= (Tag Tclass.ValueMessage.__default) Tagclass.ValueMessage.__default))
(assert (forall ((bx@@111 T@U) ) (!  (=> (and (= (type bx@@111) BoxType) ($IsBox bx@@111 Tclass.ValueMessage.__default)) (and (= ($Box ($Unbox refType bx@@111)) bx@@111) ($Is ($Unbox refType bx@@111) Tclass.ValueMessage.__default))) :qid |unknown.0:0| :skolemid |12646| :pattern ( ($IsBox bx@@111 Tclass.ValueMessage.__default)) )))
(assert (forall (($o@@64 T@U) ) (!  (=> (= (type $o@@64) refType) (and (=> ($Is $o@@64 Tclass.ValueMessage.__default) (or (= $o@@64 null) (= (dtype $o@@64) Tclass.ValueMessage.__default))) (=> (or (= $o@@64 null) (= (dtype $o@@64) Tclass.ValueMessage.__default)) ($Is $o@@64 Tclass.ValueMessage.__default)))) :qid |unknown.0:0| :skolemid |12647| :pattern ( ($Is $o@@64 Tclass.ValueMessage.__default)) )))
(assert (forall (($o@@65 T@U) ($h@@73 T@U) ) (!  (=> (and (= (type $o@@65) refType) (= (type $h@@73) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@65 Tclass.ValueMessage.__default $h@@73) (or (= $o@@65 null) (U_2_bool (MapType1Select (MapType0Select $h@@73 $o@@65) alloc)))) (=> (or (= $o@@65 null) (U_2_bool (MapType1Select (MapType0Select $h@@73 $o@@65) alloc))) ($IsAlloc $o@@65 Tclass.ValueMessage.__default $h@@73)))) :qid |unknown.0:0| :skolemid |12648| :pattern ( ($IsAlloc $o@@65 Tclass.ValueMessage.__default $h@@73)) )))
(assert (= (type ValueMessage.__default.NopDelta) DatatypeTypeType))
(assert  (=> true (=> true ($Is ValueMessage.__default.NopDelta Tclass.ValueMessage.Delta))))
(assert  (=> |ValueMessage.__default.NopDelta#requires| true))
(assert  (=> true |ValueMessage.__default.NopDelta#requires|))
(assert  (=> true (=> true (= ValueMessage.__default.NopDelta (Lit |#ValueMessage.Delta.NoDelta|)))))
(assert  (=> true (=> true (= ValueMessage.__default.NopDelta (Lit |#ValueMessage.Delta.NoDelta|)))))
(assert (= (type ValueMessage.__default.DefaultValue) (SeqType BoxType)))
(assert  (=> true (=> true ($Is ValueMessage.__default.DefaultValue Tclass.ValueType.Value))))
(assert  (=> |ValueMessage.__default.DefaultValue#requires| true))
(assert  (=> true |ValueMessage.__default.DefaultValue#requires|))
(assert  (=> true (=> true (and |ValueType.__default.DefaultValue#canCall| (= ValueMessage.__default.DefaultValue (Lit ValueType.__default.DefaultValue))))))
(assert  (=> true (=> true (and |ValueType.__default.DefaultValue#canCall| (= ValueMessage.__default.DefaultValue (Lit ValueType.__default.DefaultValue))))))
(assert (forall ((arg0@@348 T@U) (arg1@@212 T@U) ) (! (= (type (ValueMessage.__default.CombineDeltas arg0@@348 arg1@@212)) DatatypeTypeType) :qid |funType:ValueMessage.__default.CombineDeltas| :pattern ( (ValueMessage.__default.CombineDeltas arg0@@348 arg1@@212)) )))
(assert  (=> true (forall ((|newdelta#0| T@U) (|olddelta#0| T@U) ) (!  (=> (and (and (= (type |newdelta#0|) DatatypeTypeType) (= (type |olddelta#0|) DatatypeTypeType)) (or (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#0| |olddelta#0|) (and ($Is |newdelta#0| Tclass.ValueMessage.Delta) ($Is |olddelta#0| Tclass.ValueMessage.Delta)))) (and (and (=> (|ValueMessage.Delta#Equal| |newdelta#0| ValueMessage.__default.NopDelta) (|ValueMessage.Delta#Equal| (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|) |olddelta#0|)) (=> (|ValueMessage.Delta#Equal| |olddelta#0| ValueMessage.__default.NopDelta) (|ValueMessage.Delta#Equal| (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|) |newdelta#0|))) ($Is (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|) Tclass.ValueMessage.Delta))) :qid |Messagei.25:32| :skolemid |12649| :pattern ( (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|)) ))))
(assert (forall ((|newdelta#0@@0| T@U) (|olddelta#0@@0| T@U) ) (!  (=> (and (and (= (type |newdelta#0@@0|) DatatypeTypeType) (= (type |olddelta#0@@0|) DatatypeTypeType)) (and ($Is |newdelta#0@@0| Tclass.ValueMessage.Delta) ($Is |olddelta#0@@0| Tclass.ValueMessage.Delta))) (and (=> (|ValueMessage.__default.CombineDeltas#requires| |newdelta#0@@0| |olddelta#0@@0|) true) (=> true (|ValueMessage.__default.CombineDeltas#requires| |newdelta#0@@0| |olddelta#0@@0|)))) :qid |Messagei.25:32| :skolemid |12650| :pattern ( (|ValueMessage.__default.CombineDeltas#requires| |newdelta#0@@0| |olddelta#0@@0|)) )))
(assert  (=> true (forall ((|newdelta#0@@1| T@U) (|olddelta#0@@1| T@U) ) (!  (=> (and (and (= (type |newdelta#0@@1|) DatatypeTypeType) (= (type |olddelta#0@@1|) DatatypeTypeType)) (or (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#0@@1| |olddelta#0@@1|) (and ($Is |newdelta#0@@1| Tclass.ValueMessage.Delta) ($Is |olddelta#0@@1| Tclass.ValueMessage.Delta)))) (= (ValueMessage.__default.CombineDeltas |newdelta#0@@1| |olddelta#0@@1|) (Lit |#ValueMessage.Delta.NoDelta|))) :qid |Messagei.25:32| :skolemid |12651| :pattern ( (ValueMessage.__default.CombineDeltas |newdelta#0@@1| |olddelta#0@@1|)) ))))
(assert  (=> true (forall ((|newdelta#0@@2| T@U) (|olddelta#0@@2| T@U) ) (!  (=> (and (and (= (type |newdelta#0@@2|) DatatypeTypeType) (= (type |olddelta#0@@2|) DatatypeTypeType)) (or (|ValueMessage.__default.CombineDeltas#canCall| (Lit |newdelta#0@@2|) (Lit |olddelta#0@@2|)) (and ($Is |newdelta#0@@2| Tclass.ValueMessage.Delta) ($Is |olddelta#0@@2| Tclass.ValueMessage.Delta)))) (= (ValueMessage.__default.CombineDeltas (Lit |newdelta#0@@2|) (Lit |olddelta#0@@2|)) (Lit |#ValueMessage.Delta.NoDelta|))) :qid |Messagei.25:32| :weight 3 :skolemid |12652| :pattern ( (ValueMessage.__default.CombineDeltas (Lit |newdelta#0@@2|) (Lit |olddelta#0@@2|))) ))))
(assert (forall ((arg0@@349 T@U) (arg1@@213 T@U) ) (! (= (type (ValueMessage.__default.ApplyDelta arg0@@349 arg1@@213)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.ApplyDelta| :pattern ( (ValueMessage.__default.ApplyDelta arg0@@349 arg1@@213)) )))
(assert  (=> true (forall ((|delta#0| T@U) (|value#0| T@U) ) (!  (=> (and (and (= (type |delta#0|) DatatypeTypeType) (= (type |value#0|) (SeqType BoxType))) (or (|ValueMessage.__default.ApplyDelta#canCall| |delta#0| |value#0|) (and ($Is |delta#0| Tclass.ValueMessage.Delta) ($Is |value#0| Tclass.ValueType.Value)))) (and (=> (|ValueMessage.Delta#Equal| |delta#0| ValueMessage.__default.NopDelta) (|Seq#Equal| (ValueMessage.__default.ApplyDelta |delta#0| |value#0|) |value#0|)) ($Is (ValueMessage.__default.ApplyDelta |delta#0| |value#0|) Tclass.ValueType.Value))) :qid |Messagei.29:29| :skolemid |12653| :pattern ( (ValueMessage.__default.ApplyDelta |delta#0| |value#0|)) ))))
(assert (forall ((|delta#0@@0| T@U) (|value#0@@0| T@U) ) (!  (=> (and (and (= (type |delta#0@@0|) DatatypeTypeType) (= (type |value#0@@0|) (SeqType BoxType))) (and ($Is |delta#0@@0| Tclass.ValueMessage.Delta) ($Is |value#0@@0| Tclass.ValueType.Value))) (and (=> (|ValueMessage.__default.ApplyDelta#requires| |delta#0@@0| |value#0@@0|) true) (=> true (|ValueMessage.__default.ApplyDelta#requires| |delta#0@@0| |value#0@@0|)))) :qid |Messagei.29:29| :skolemid |12654| :pattern ( (|ValueMessage.__default.ApplyDelta#requires| |delta#0@@0| |value#0@@0|)) )))
(assert  (=> true (forall ((|delta#0@@1| T@U) (|value#0@@1| T@U) ) (!  (=> (and (and (= (type |delta#0@@1|) DatatypeTypeType) (= (type |value#0@@1|) (SeqType BoxType))) (or (|ValueMessage.__default.ApplyDelta#canCall| |delta#0@@1| |value#0@@1|) (and ($Is |delta#0@@1| Tclass.ValueMessage.Delta) ($Is |value#0@@1| Tclass.ValueType.Value)))) (= (ValueMessage.__default.ApplyDelta |delta#0@@1| |value#0@@1|) |value#0@@1|)) :qid |Messagei.29:29| :skolemid |12655| :pattern ( (ValueMessage.__default.ApplyDelta |delta#0@@1| |value#0@@1|)) ))))
(assert  (=> true (forall ((|delta#0@@2| T@U) (|value#0@@2| T@U) ) (!  (=> (and (and (= (type |delta#0@@2|) DatatypeTypeType) (= (type |value#0@@2|) (SeqType BoxType))) (or (|ValueMessage.__default.ApplyDelta#canCall| (Lit |delta#0@@2|) (Lit |value#0@@2|)) (and ($Is |delta#0@@2| Tclass.ValueMessage.Delta) ($Is |value#0@@2| Tclass.ValueType.Value)))) (= (ValueMessage.__default.ApplyDelta (Lit |delta#0@@2|) (Lit |value#0@@2|)) (Lit |value#0@@2|))) :qid |Messagei.29:29| :weight 3 :skolemid |12656| :pattern ( (ValueMessage.__default.ApplyDelta (Lit |delta#0@@2|) (Lit |value#0@@2|))) ))))
(assert (forall ((arg0@@350 T@U) ) (! (= (type (ValueMessage.__default.bytestring__to__Message arg0@@350)) DatatypeTypeType) :qid |funType:ValueMessage.__default.bytestring__to__Message| :pattern ( (ValueMessage.__default.bytestring__to__Message arg0@@350)) )))
(assert  (=> true (forall ((|s#0@@212| T@U) ) (!  (=> (and (= (type |s#0@@212|) (SeqType BoxType)) (or (|ValueMessage.__default.bytestring__to__Message#canCall| |s#0@@212|) (and ($Is |s#0@@212| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| |s#0@@212|) 4294967296)))) ($Is (ValueMessage.__default.bytestring__to__Message |s#0@@212|) Tclass.ValueMessage.Message)) :qid |Messagei.100:41| :skolemid |12657| :pattern ( (ValueMessage.__default.bytestring__to__Message |s#0@@212|)) ))))
(assert (forall ((|s#0@@213| T@U) ) (!  (=> (and (= (type |s#0@@213|) (SeqType BoxType)) ($Is |s#0@@213| (TSeq Tclass.NativeTypes.byte))) (and (=> (|ValueMessage.__default.bytestring__to__Message#requires| |s#0@@213|) (< (|Seq#Length| |s#0@@213|) 4294967296)) (=> (< (|Seq#Length| |s#0@@213|) 4294967296) (|ValueMessage.__default.bytestring__to__Message#requires| |s#0@@213|)))) :qid |Messagei.100:41| :skolemid |12658| :pattern ( (|ValueMessage.__default.bytestring__to__Message#requires| |s#0@@213|)) )))
(assert (forall ((arg0@@351 T@U) ) (! (= (type (|#ValueMessage.Message.Define| arg0@@351)) DatatypeTypeType) :qid |funType:#ValueMessage.Message.Define| :pattern ( (|#ValueMessage.Message.Define| arg0@@351)) )))
(assert  (=> true (forall ((|s#0@@214| T@U) ) (!  (=> (and (= (type |s#0@@214|) (SeqType BoxType)) (or (|ValueMessage.__default.bytestring__to__Message#canCall| |s#0@@214|) (and ($Is |s#0@@214| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| |s#0@@214|) 4294967296)))) (and (and |ValueType.__default.MaxLen#canCall| (=> (< (LitInt ValueType.__default.MaxLen) (|Seq#Length| |s#0@@214|)) |ValueType.__default.DefaultValue#canCall|)) (= (ValueMessage.__default.bytestring__to__Message |s#0@@214|) (ite (<= (|Seq#Length| |s#0@@214|) (LitInt ValueType.__default.MaxLen)) (|#ValueMessage.Message.Define| |s#0@@214|) (|#ValueMessage.Message.Define| (Lit ValueType.__default.DefaultValue)))))) :qid |Messagei.100:41| :skolemid |12659| :pattern ( (ValueMessage.__default.bytestring__to__Message |s#0@@214|)) ))))
(assert  (=> true (forall ((|s#0@@215| T@U) ) (!  (=> (and (= (type |s#0@@215|) (SeqType BoxType)) (or (|ValueMessage.__default.bytestring__to__Message#canCall| (Lit |s#0@@215|)) (and ($Is |s#0@@215| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| (Lit |s#0@@215|)) 4294967296)))) (and (and |ValueType.__default.MaxLen#canCall| (=> (< (LitInt ValueType.__default.MaxLen) (|Seq#Length| (Lit |s#0@@215|))) |ValueType.__default.DefaultValue#canCall|)) (= (ValueMessage.__default.bytestring__to__Message (Lit |s#0@@215|)) (ite (<= (|Seq#Length| (Lit |s#0@@215|)) (LitInt ValueType.__default.MaxLen)) (|#ValueMessage.Message.Define| (Lit |s#0@@215|)) (|#ValueMessage.Message.Define| (Lit ValueType.__default.DefaultValue)))))) :qid |Messagei.100:41| :weight 3 :skolemid |12660| :pattern ( (ValueMessage.__default.bytestring__to__Message (Lit |s#0@@215|))) ))))
(assert  (=> true (forall ((|msg#0| T@U) ) (!  (=> (and (= (type |msg#0|) DatatypeTypeType) (or (|ValueMessage.__default.EncodableMessage#canCall| |msg#0|) ($Is |msg#0| Tclass.ValueMessage.Message))) true) :qid |Messagei.113:30| :skolemid |12661| :pattern ( (ValueMessage.__default.EncodableMessage |msg#0|)) ))))
(assert (forall ((|msg#0@@0| T@U) ) (!  (=> (and (= (type |msg#0@@0|) DatatypeTypeType) ($Is |msg#0@@0| Tclass.ValueMessage.Message)) (and (=> (|ValueMessage.__default.EncodableMessage#requires| |msg#0@@0|) true) (=> true (|ValueMessage.__default.EncodableMessage#requires| |msg#0@@0|)))) :qid |Messagei.113:30| :skolemid |12662| :pattern ( (|ValueMessage.__default.EncodableMessage#requires| |msg#0@@0|)) )))
(assert  (=> true (forall ((|msg#0@@1| T@U) ) (!  (=> (and (= (type |msg#0@@1|) DatatypeTypeType) (or (|ValueMessage.__default.EncodableMessage#canCall| |msg#0@@1|) ($Is |msg#0@@1| Tclass.ValueMessage.Message))) (and (=> (ValueMessage.__default.EncodableMessage |msg#0@@1|) (and true (ValueMessage.Message.Define_q |msg#0@@1|))) (=> (and true (ValueMessage.Message.Define_q |msg#0@@1|)) (ValueMessage.__default.EncodableMessage |msg#0@@1|)))) :qid |Messagei.113:30| :skolemid |12663| :pattern ( (ValueMessage.__default.EncodableMessage |msg#0@@1|)) ))))
(assert  (=> true (forall ((|msg#0@@2| T@U) ) (!  (=> (and (= (type |msg#0@@2|) DatatypeTypeType) (or (|ValueMessage.__default.EncodableMessage#canCall| (Lit |msg#0@@2|)) ($Is |msg#0@@2| Tclass.ValueMessage.Message))) (and (=> (ValueMessage.__default.EncodableMessage (Lit |msg#0@@2|)) (U_2_bool (Lit (bool_2_U  (and true (ValueMessage.Message.Define_q (Lit |msg#0@@2|))))))) (=> (U_2_bool (Lit (bool_2_U  (and true (ValueMessage.Message.Define_q (Lit |msg#0@@2|)))))) (ValueMessage.__default.EncodableMessage (Lit |msg#0@@2|))))) :qid |Messagei.113:30| :weight 3 :skolemid |12664| :pattern ( (ValueMessage.__default.EncodableMessage (Lit |msg#0@@2|))) ))))
(assert  (=> true (forall ((|msgs#0| T@U) ) (!  (=> (and (= (type |msgs#0|) (SeqType BoxType)) (or (|ValueMessage.__default.EncodableMessageSeq#canCall| |msgs#0|) ($Is |msgs#0| (TSeq Tclass.ValueMessage.Message)))) true) :qid |Messagei.118:33| :skolemid |12665| :pattern ( (ValueMessage.__default.EncodableMessageSeq |msgs#0|)) ))))
(assert (forall ((|msgs#0@@0| T@U) ) (!  (=> (and (= (type |msgs#0@@0|) (SeqType BoxType)) ($Is |msgs#0@@0| (TSeq Tclass.ValueMessage.Message))) (and (=> (|ValueMessage.__default.EncodableMessageSeq#requires| |msgs#0@@0|) true) (=> true (|ValueMessage.__default.EncodableMessageSeq#requires| |msgs#0@@0|)))) :qid |Messagei.118:33| :skolemid |12666| :pattern ( (|ValueMessage.__default.EncodableMessageSeq#requires| |msgs#0@@0|)) )))
(assert  (=> true (forall ((|msgs#0@@1| T@U) ) (!  (=> (and (= (type |msgs#0@@1|) (SeqType BoxType)) (or (|ValueMessage.__default.EncodableMessageSeq#canCall| |msgs#0@@1|) ($Is |msgs#0@@1| (TSeq Tclass.ValueMessage.Message)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|i#2@@44| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@44|) (< |i#2@@44| (|Seq#Length| |msgs#0@@1|))) (|ValueMessage.__default.EncodableMessage#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@1| |i#2@@44|)))) :qid |Messagei.120:16| :skolemid |12667| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@1| |i#2@@44|))) ))) (and (=> (ValueMessage.__default.EncodableMessageSeq |msgs#0@@1|) (and true (forall ((|i#2@@45| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@45|) (< |i#2@@45| (|Seq#Length| |msgs#0@@1|))) (ValueMessage.__default.EncodableMessage ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@1| |i#2@@45|)))) :qid |Messagei.120:16| :skolemid |12668| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@1| |i#2@@45|))) )))) (=> (and true (forall ((|i#2@@46| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@46|) (< |i#2@@46| (|Seq#Length| |msgs#0@@1|))) (ValueMessage.__default.EncodableMessage ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@1| |i#2@@46|)))) :qid |Messagei.120:16| :skolemid |12668| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@1| |i#2@@46|))) ))) (ValueMessage.__default.EncodableMessageSeq |msgs#0@@1|))))) :qid |Messagei.118:33| :skolemid |12669| :pattern ( (ValueMessage.__default.EncodableMessageSeq |msgs#0@@1|)) ))))
(assert  (=> true (forall ((|msgs#0@@2| T@U) ) (!  (=> (and (= (type |msgs#0@@2|) (SeqType BoxType)) (or (|ValueMessage.__default.EncodableMessageSeq#canCall| (Lit |msgs#0@@2|)) ($Is |msgs#0@@2| (TSeq Tclass.ValueMessage.Message)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|i#3@@46| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@46|) (< |i#3@@46| (|Seq#Length| (Lit |msgs#0@@2|)))) (|ValueMessage.__default.EncodableMessage#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |msgs#0@@2|) |i#3@@46|)))) :qid |Messagei.120:16| :skolemid |12670| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@2| |i#3@@46|))) ))) (and (=> (ValueMessage.__default.EncodableMessageSeq (Lit |msgs#0@@2|)) (and true (forall ((|i#3@@47| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@47|) (< |i#3@@47| (|Seq#Length| (Lit |msgs#0@@2|)))) (ValueMessage.__default.EncodableMessage ($Unbox DatatypeTypeType (|Seq#Index| (Lit |msgs#0@@2|) |i#3@@47|)))) :qid |Messagei.120:16| :skolemid |12671| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@2| |i#3@@47|))) )))) (=> (and true (forall ((|i#3@@48| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@48|) (< |i#3@@48| (|Seq#Length| (Lit |msgs#0@@2|)))) (ValueMessage.__default.EncodableMessage ($Unbox DatatypeTypeType (|Seq#Index| (Lit |msgs#0@@2|) |i#3@@48|)))) :qid |Messagei.120:16| :skolemid |12671| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@2| |i#3@@48|))) ))) (ValueMessage.__default.EncodableMessageSeq (Lit |msgs#0@@2|)))))) :qid |Messagei.118:33| :weight 3 :skolemid |12672| :pattern ( (ValueMessage.__default.EncodableMessageSeq (Lit |msgs#0@@2|))) ))))
(assert (forall ((arg0@@352 T@U) ) (! (= (type (ValueMessage.__default.Message__to__bytestring arg0@@352)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.Message__to__bytestring| :pattern ( (ValueMessage.__default.Message__to__bytestring arg0@@352)) )))
(assert  (=> true (forall ((|msg#0@@3| T@U) ) (!  (=> (and (= (type |msg#0@@3|) DatatypeTypeType) (or (|ValueMessage.__default.Message__to__bytestring#canCall| |msg#0@@3|) (and ($Is |msg#0@@3| Tclass.ValueMessage.Message) (ValueMessage.Message.Define_q |msg#0@@3|)))) ($Is (ValueMessage.__default.Message__to__bytestring |msg#0@@3|) (TSeq Tclass.NativeTypes.byte))) :qid |Messagei.123:41| :skolemid |12673| :pattern ( (ValueMessage.__default.Message__to__bytestring |msg#0@@3|)) ))))
(assert (forall ((|msg#0@@4| T@U) ) (!  (=> (and (= (type |msg#0@@4|) DatatypeTypeType) ($Is |msg#0@@4| Tclass.ValueMessage.Message)) (and (=> (|ValueMessage.__default.Message__to__bytestring#requires| |msg#0@@4|) (ValueMessage.Message.Define_q |msg#0@@4|)) (=> (ValueMessage.Message.Define_q |msg#0@@4|) (|ValueMessage.__default.Message__to__bytestring#requires| |msg#0@@4|)))) :qid |Messagei.123:41| :skolemid |12674| :pattern ( (|ValueMessage.__default.Message__to__bytestring#requires| |msg#0@@4|)) )))
(assert (forall ((arg0@@353 T@U) ) (! (= (type (ValueMessage.Message.value arg0@@353)) (SeqType BoxType)) :qid |funType:ValueMessage.Message.value| :pattern ( (ValueMessage.Message.value arg0@@353)) )))
(assert  (=> true (forall ((|msg#0@@5| T@U) ) (!  (=> (and (= (type |msg#0@@5|) DatatypeTypeType) (or (|ValueMessage.__default.Message__to__bytestring#canCall| |msg#0@@5|) (and ($Is |msg#0@@5| Tclass.ValueMessage.Message) (ValueMessage.Message.Define_q |msg#0@@5|)))) (= (ValueMessage.__default.Message__to__bytestring |msg#0@@5|) (ValueMessage.Message.value |msg#0@@5|))) :qid |Messagei.123:41| :skolemid |12675| :pattern ( (ValueMessage.__default.Message__to__bytestring |msg#0@@5|)) ))))
(assert  (=> true (forall ((|msg#0@@6| T@U) ) (!  (=> (and (= (type |msg#0@@6|) DatatypeTypeType) (or (|ValueMessage.__default.Message__to__bytestring#canCall| (Lit |msg#0@@6|)) (and ($Is |msg#0@@6| Tclass.ValueMessage.Message) (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit |msg#0@@6|)))))))) (= (ValueMessage.__default.Message__to__bytestring (Lit |msg#0@@6|)) (Lit (ValueMessage.Message.value (Lit |msg#0@@6|))))) :qid |Messagei.123:41| :weight 3 :skolemid |12676| :pattern ( (ValueMessage.__default.Message__to__bytestring (Lit |msg#0@@6|))) ))))
(assert (forall ((arg0@@354 T@U) (arg1@@214 T@U) ) (! (= (type (ValueMessage.__default.messageSeq__to__bytestringSeq arg0@@354 arg1@@214)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.messageSeq__to__bytestringSeq| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq arg0@@354 arg1@@214)) )))
(assert (forall (($ly@@626 T@U) (|msgs#0@@3| T@U) ) (!  (=> (and (= (type $ly@@626) LayerTypeType) (= (type |msgs#0@@3|) (SeqType BoxType))) (= (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@626) |msgs#0@@3|) (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@626 |msgs#0@@3|))) :qid |Messagei.129:12| :skolemid |12677| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@626) |msgs#0@@3|)) )))
(assert (forall (($ly@@627 T@U) (|msgs#0@@4| T@U) ) (!  (=> (and (= (type $ly@@627) LayerTypeType) (= (type |msgs#0@@4|) (SeqType BoxType))) (= (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@627 |msgs#0@@4|) (ValueMessage.__default.messageSeq__to__bytestringSeq $LZ |msgs#0@@4|))) :qid |Messagei.129:12| :skolemid |12678| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq (AsFuelBottom $ly@@627) |msgs#0@@4|)) )))
(assert  (=> true (forall (($ly@@628 T@U) (|msgs#0@@5| T@U) ) (!  (=> (and (and (= (type $ly@@628) LayerTypeType) (= (type |msgs#0@@5|) (SeqType BoxType))) (or (|ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| |msgs#0@@5|) (and ($Is |msgs#0@@5| (TSeq Tclass.ValueMessage.Message)) (ValueMessage.__default.EncodableMessageSeq |msgs#0@@5|)))) (and (and (= (|Seq#Length| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@628 |msgs#0@@5|)) (|Seq#Length| |msgs#0@@5|)) (forall ((|i#1@@13| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@13|) (< |i#1@@13| (|Seq#Length| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@628 |msgs#0@@5|)))) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@628 |msgs#0@@5|) |i#1@@13|)) (ValueMessage.__default.Message__to__bytestring ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@5| |i#1@@13|))))) :qid |Messagei.132:20| :skolemid |12679| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@5| |i#1@@13|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@628 |msgs#0@@5|) |i#1@@13|))) ))) ($Is (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@628 |msgs#0@@5|) (TSeq (TSeq Tclass.NativeTypes.byte))))) :qid |Messagei.129:12| :skolemid |12680| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@628 |msgs#0@@5|)) ))))
(assert (forall (($ly@@629 T@U) (|msgs#0@@6| T@U) ) (!  (=> (and (and (= (type $ly@@629) LayerTypeType) (= (type |msgs#0@@6|) (SeqType BoxType))) ($Is |msgs#0@@6| (TSeq Tclass.ValueMessage.Message))) (and (=> (|ValueMessage.__default.messageSeq__to__bytestringSeq#requires| $ly@@629 |msgs#0@@6|) (ValueMessage.__default.EncodableMessageSeq |msgs#0@@6|)) (=> (ValueMessage.__default.EncodableMessageSeq |msgs#0@@6|) (|ValueMessage.__default.messageSeq__to__bytestringSeq#requires| $ly@@629 |msgs#0@@6|)))) :qid |Messagei.129:12| :skolemid |12681| :pattern ( (|ValueMessage.__default.messageSeq__to__bytestringSeq#requires| $ly@@629 |msgs#0@@6|)) )))
(assert  (=> true (forall (($ly@@630 T@U) (|msgs#0@@7| T@U) ) (!  (=> (and (and (= (type $ly@@630) LayerTypeType) (= (type |msgs#0@@7|) (SeqType BoxType))) (or (|ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| |msgs#0@@7|) (and ($Is |msgs#0@@7| (TSeq Tclass.ValueMessage.Message)) (ValueMessage.__default.EncodableMessageSeq |msgs#0@@7|)))) (and (=> (not (= (|Seq#Length| |msgs#0@@7|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.ValueMessage.Message |msgs#0@@7|) (|ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| (Sequences.__default.DropLast Tclass.ValueMessage.Message |msgs#0@@7|))) (and (|Sequences.__default.Last#canCall| Tclass.ValueMessage.Message |msgs#0@@7|) (|ValueMessage.__default.Message__to__bytestring#canCall| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.ValueMessage.Message |msgs#0@@7|)))))) (= (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@630) |msgs#0@@7|) (ite (= (|Seq#Length| |msgs#0@@7|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@630 (Sequences.__default.DropLast Tclass.ValueMessage.Message |msgs#0@@7|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (ValueMessage.__default.Message__to__bytestring ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.ValueMessage.Message |msgs#0@@7|)))))))))) :qid |Messagei.129:12| :skolemid |12682| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@630) |msgs#0@@7|)) ))))
(assert  (=> true (forall (($ly@@631 T@U) (|msgs#0@@8| T@U) ) (!  (=> (and (and (= (type $ly@@631) LayerTypeType) (= (type |msgs#0@@8|) (SeqType BoxType))) (or (|ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| (Lit |msgs#0@@8|)) (and ($Is |msgs#0@@8| (TSeq Tclass.ValueMessage.Message)) (U_2_bool (Lit (bool_2_U (ValueMessage.__default.EncodableMessageSeq (Lit |msgs#0@@8|)))))))) (and (=> (not (= (|Seq#Length| (Lit |msgs#0@@8|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.ValueMessage.Message (Lit |msgs#0@@8|)) (|ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| (Lit (Sequences.__default.DropLast Tclass.ValueMessage.Message (Lit |msgs#0@@8|))))) (and (|Sequences.__default.Last#canCall| Tclass.ValueMessage.Message (Lit |msgs#0@@8|)) (|ValueMessage.__default.Message__to__bytestring#canCall| (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.ValueMessage.Message (Lit |msgs#0@@8|)))))))) (= (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@631) (Lit |msgs#0@@8|)) (ite (= (|Seq#Length| (Lit |msgs#0@@8|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@631) (Lit (Sequences.__default.DropLast Tclass.ValueMessage.Message (Lit |msgs#0@@8|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (ValueMessage.__default.Message__to__bytestring (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.ValueMessage.Message (Lit |msgs#0@@8|))))))))))))) :qid |Messagei.129:12| :weight 3 :skolemid |12683| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@631) (Lit |msgs#0@@8|))) ))))
(assert (forall ((arg0@@355 T@U) (arg1@@215 T@U) ) (! (= (type (ValueMessage.__default.bytestringSeq__to__MessageSeq arg0@@355 arg1@@215)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.bytestringSeq__to__MessageSeq| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq arg0@@355 arg1@@215)) )))
(assert (forall (($ly@@632 T@U) (|strings#0| T@U) ) (!  (=> (and (= (type $ly@@632) LayerTypeType) (= (type |strings#0|) (SeqType BoxType))) (= (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@632) |strings#0|) (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@632 |strings#0|))) :qid |Messagei.140:12| :skolemid |12684| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@632) |strings#0|)) )))
(assert (forall (($ly@@633 T@U) (|strings#0@@0| T@U) ) (!  (=> (and (= (type $ly@@633) LayerTypeType) (= (type |strings#0@@0|) (SeqType BoxType))) (= (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@633 |strings#0@@0|) (ValueMessage.__default.bytestringSeq__to__MessageSeq $LZ |strings#0@@0|))) :qid |Messagei.140:12| :skolemid |12685| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq (AsFuelBottom $ly@@633) |strings#0@@0|)) )))
(assert  (=> true (forall (($ly@@634 T@U) (|strings#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@634) LayerTypeType) (= (type |strings#0@@1|) (SeqType BoxType))) (or (|ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| |strings#0@@1|) (and ($Is |strings#0@@1| (TSeq (TSeq Tclass.NativeTypes.byte))) (forall ((|i#4@@22| Int) ) (!  (=> (and (<= (LitInt 0) |i#4@@22|) (< |i#4@@22| (|Seq#Length| |strings#0@@1|))) (< (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#4@@22|))) 4294967296)) :qid |Messagei.141:21| :skolemid |12686| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#4@@22|))) ))))) (and (and (= (|Seq#Length| (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@634 |strings#0@@1|)) (|Seq#Length| |strings#0@@1|)) (forall ((|i#5@@17| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@17|) (< |i#5@@17| (|Seq#Length| |strings#0@@1|))) (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@634 |strings#0@@1|) |i#5@@17|)) (ValueMessage.__default.bytestring__to__Message ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#5@@17|))))) :qid |Messagei.143:20| :skolemid |12687| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#5@@17|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@634 |strings#0@@1|) |i#5@@17|))) ))) ($Is (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@634 |strings#0@@1|) (TSeq Tclass.ValueMessage.Message)))) :qid |Messagei.140:12| :skolemid |12688| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@634 |strings#0@@1|)) ))))
(assert (forall (($ly@@635 T@U) (|strings#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@635) LayerTypeType) (= (type |strings#0@@2|) (SeqType BoxType))) ($Is |strings#0@@2| (TSeq (TSeq Tclass.NativeTypes.byte)))) (and (=> (|ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| $ly@@635 |strings#0@@2|) (forall ((|i#6@@23| Int) ) (!  (=> (and (<= (LitInt 0) |i#6@@23|) (< |i#6@@23| (|Seq#Length| |strings#0@@2|))) (< (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@2| |i#6@@23|))) 4294967296)) :qid |Messagei.141:21| :skolemid |12689| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@2| |i#6@@23|))) ))) (=> (forall ((|i#6@@24| Int) ) (!  (=> (and (<= (LitInt 0) |i#6@@24|) (< |i#6@@24| (|Seq#Length| |strings#0@@2|))) (< (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@2| |i#6@@24|))) 4294967296)) :qid |Messagei.141:21| :skolemid |12689| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@2| |i#6@@24|))) )) (|ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| $ly@@635 |strings#0@@2|)))) :qid |Messagei.140:12| :skolemid |12690| :pattern ( (|ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| $ly@@635 |strings#0@@2|)) )))
(assert  (=> true (forall (($ly@@636 T@U) (|strings#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@636) LayerTypeType) (= (type |strings#0@@3|) (SeqType BoxType))) (or (|ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| |strings#0@@3|) (and ($Is |strings#0@@3| (TSeq (TSeq Tclass.NativeTypes.byte))) (forall ((|i#6@@25| Int) ) (!  (=> (and (<= (LitInt 0) |i#6@@25|) (< |i#6@@25| (|Seq#Length| |strings#0@@3|))) (< (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@3| |i#6@@25|))) 4294967296)) :qid |Messagei.141:21| :skolemid |12689| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@3| |i#6@@25|))) ))))) (and (=> (not (= (|Seq#Length| |strings#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) |strings#0@@3|) (|ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |strings#0@@3|))) (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) |strings#0@@3|) (|ValueMessage.__default.bytestring__to__Message#canCall| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |strings#0@@3|)))))) (= (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@636) |strings#0@@3|) (ite (= (|Seq#Length| |strings#0@@3|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@636 (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |strings#0@@3|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (ValueMessage.__default.bytestring__to__Message ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |strings#0@@3|)))))))))) :qid |Messagei.140:12| :skolemid |12691| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@636) |strings#0@@3|)) ))))
(assert  (=> true (forall (($ly@@637 T@U) (|strings#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@637) LayerTypeType) (= (type |strings#0@@4|) (SeqType BoxType))) (or (|ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| (Lit |strings#0@@4|)) (and ($Is |strings#0@@4| (TSeq (TSeq Tclass.NativeTypes.byte))) (forall ((|i#7@@8| Int) ) (!  (=> (and (<= (LitInt 0) |i#7@@8|) (< |i#7@@8| (|Seq#Length| (Lit |strings#0@@4|)))) (< (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |strings#0@@4|) |i#7@@8|))) 4294967296)) :qid |Messagei.141:21| :skolemid |12692| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@4| |i#7@@8|))) ))))) (and (=> (not (= (|Seq#Length| (Lit |strings#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |strings#0@@4|)) (|ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |strings#0@@4|))))) (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |strings#0@@4|)) (|ValueMessage.__default.bytestring__to__Message#canCall| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |strings#0@@4|)))))))) (= (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@637) (Lit |strings#0@@4|)) (ite (= (|Seq#Length| (Lit |strings#0@@4|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@637) (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |strings#0@@4|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (ValueMessage.__default.bytestring__to__Message (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |strings#0@@4|))))))))))))) :qid |Messagei.140:12| :weight 3 :skolemid |12693| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@637) (Lit |strings#0@@4|))) ))))
(assert (forall ((arg0@@356 T@U) (arg1@@216 T@U) ) (! (= (type (ValueMessage.__default.Merge arg0@@356 arg1@@216)) DatatypeTypeType) :qid |funType:ValueMessage.__default.Merge| :pattern ( (ValueMessage.__default.Merge arg0@@356 arg1@@216)) )))
(assert  (=> true (forall ((|newmessage#0| T@U) (|oldmessage#0| T@U) ) (!  (=> (and (and (= (type |newmessage#0|) DatatypeTypeType) (= (type |oldmessage#0|) DatatypeTypeType)) (or (|ValueMessage.__default.Merge#canCall| |newmessage#0| |oldmessage#0|) (and ($Is |newmessage#0| Tclass.ValueMessage.Message) ($Is |oldmessage#0| Tclass.ValueMessage.Message)))) ($Is (ValueMessage.__default.Merge |newmessage#0| |oldmessage#0|) Tclass.ValueMessage.Message)) :qid |Messagei.32:24| :skolemid |12694| :pattern ( (ValueMessage.__default.Merge |newmessage#0| |oldmessage#0|)) ))))
(assert (forall ((|newmessage#0@@0| T@U) (|oldmessage#0@@0| T@U) ) (!  (=> (and (and (= (type |newmessage#0@@0|) DatatypeTypeType) (= (type |oldmessage#0@@0|) DatatypeTypeType)) (and ($Is |newmessage#0@@0| Tclass.ValueMessage.Message) ($Is |oldmessage#0@@0| Tclass.ValueMessage.Message))) (and (=> (|ValueMessage.__default.Merge#requires| |newmessage#0@@0| |oldmessage#0@@0|) true) (=> true (|ValueMessage.__default.Merge#requires| |newmessage#0@@0| |oldmessage#0@@0|)))) :qid |Messagei.32:24| :skolemid |12695| :pattern ( (|ValueMessage.__default.Merge#requires| |newmessage#0@@0| |oldmessage#0@@0|)) )))
(assert  (and (forall ((arg0@@357 T@U) ) (! (= (type (ValueMessage.Message.delta arg0@@357)) DatatypeTypeType) :qid |funType:ValueMessage.Message.delta| :pattern ( (ValueMessage.Message.delta arg0@@357)) )) (forall ((arg0@@358 T@U) ) (! (= (type (|#ValueMessage.Message.Update| arg0@@358)) DatatypeTypeType) :qid |funType:#ValueMessage.Message.Update| :pattern ( (|#ValueMessage.Message.Update| arg0@@358)) ))))
(assert  (=> true (forall ((|newmessage#0@@1| T@U) (|oldmessage#0@@1| T@U) ) (!  (=> (and (and (= (type |newmessage#0@@1|) DatatypeTypeType) (= (type |oldmessage#0@@1|) DatatypeTypeType)) (or (|ValueMessage.__default.Merge#canCall| |newmessage#0@@1| |oldmessage#0@@1|) (and ($Is |newmessage#0@@1| Tclass.ValueMessage.Message) ($Is |oldmessage#0@@1| Tclass.ValueMessage.Message)))) (and (and (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (=> (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (=> (not (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|)))))) (and (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (=> (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|value#4| (ValueMessage.Message.value ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|delta#4| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|ValueMessage.__default.ApplyDelta#canCall| |delta#4| |value#4|))))))) (=> (not (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|)))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|olddelta#4| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|newdelta#4| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#4| |olddelta#4|))))))))) (= (ValueMessage.__default.Merge |newmessage#0@@1| |oldmessage#0@@1|) (ite (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (let ((|newvalue#5| (ValueMessage.Message.value ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|#ValueMessage.Message.Define| |newvalue#5|)) (ite (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (let ((|value#5| (ValueMessage.Message.value ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (let ((|delta#5| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|#ValueMessage.Message.Define| (ValueMessage.__default.ApplyDelta |delta#5| |value#5|)))) (let ((|olddelta#5| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (let ((|newdelta#5| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|#ValueMessage.Message.Update| (ValueMessage.__default.CombineDeltas |newdelta#5| |olddelta#5|))))))))) :qid |Messagei.32:24| :skolemid |12696| :pattern ( (ValueMessage.__default.Merge |newmessage#0@@1| |oldmessage#0@@1|)) ))))
(assert  (=> true (forall ((|newmessage#0@@2| T@U) (|oldmessage#0@@2| T@U) ) (!  (=> (and (and (= (type |newmessage#0@@2|) DatatypeTypeType) (= (type |oldmessage#0@@2|) DatatypeTypeType)) (or (|ValueMessage.__default.Merge#canCall| (Lit |newmessage#0@@2|) (Lit |oldmessage#0@@2|)) (and ($Is |newmessage#0@@2| Tclass.ValueMessage.Message) ($Is |oldmessage#0@@2| Tclass.ValueMessage.Message)))) (and (and (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))) (=> (not (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))))))) (and (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|value#6| (Lit (ValueMessage.Message.value (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|delta#6| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (|ValueMessage.__default.ApplyDelta#canCall| |delta#6| |value#6|))))))) (=> (not (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|olddelta#6| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|newdelta#6| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#6| |olddelta#6|))))))))) (= (ValueMessage.__default.Merge (Lit |newmessage#0@@2|) (Lit |oldmessage#0@@2|)) (ite (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))) (let ((|newvalue#7| (Lit (ValueMessage.Message.value (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (Lit (|#ValueMessage.Message.Define| |newvalue#7|))) (ite (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))) (let ((|value#7| (Lit (ValueMessage.Message.value (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (let ((|delta#7| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (Lit (|#ValueMessage.Message.Define| (Lit (ValueMessage.__default.ApplyDelta |delta#7| |value#7|)))))) (let ((|olddelta#7| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (let ((|newdelta#7| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (Lit (|#ValueMessage.Message.Update| (Lit (ValueMessage.__default.CombineDeltas |newdelta#7| |olddelta#7|))))))))))) :qid |Messagei.32:24| :weight 3 :skolemid |12697| :pattern ( (ValueMessage.__default.Merge (Lit |newmessage#0@@2|) (Lit |oldmessage#0@@2|))) ))))
(assert (= (type ValueMessage.__default.IdentityMessage) DatatypeTypeType))
(assert  (=> true (=> true ($Is ValueMessage.__default.IdentityMessage Tclass.ValueMessage.Message))))
(assert  (=> |ValueMessage.__default.IdentityMessage#requires| true))
(assert  (=> true |ValueMessage.__default.IdentityMessage#requires|))
(assert  (=> true (=> true (and |ValueMessage.__default.NopDelta#canCall| (= ValueMessage.__default.IdentityMessage (Lit (|#ValueMessage.Message.Update| (Lit ValueMessage.__default.NopDelta))))))))
(assert  (=> true (=> true (and |ValueMessage.__default.NopDelta#canCall| (= ValueMessage.__default.IdentityMessage (Lit (|#ValueMessage.Message.Update| (Lit ValueMessage.__default.NopDelta))))))))
(assert  (=> true (=> true ($Is ValueMessage.__default.DefineDefault Tclass.ValueMessage.Message))))
(assert  (=> |ValueMessage.__default.DefineDefault#requires| true))
(assert  (=> true |ValueMessage.__default.DefineDefault#requires|))
(assert  (=> true (=> true (and |ValueMessage.__default.DefaultValue#canCall| (= ValueMessage.__default.DefineDefault (Lit (|#ValueMessage.Message.Define| (Lit ValueMessage.__default.DefaultValue))))))))
(assert  (=> true (=> true (and |ValueMessage.__default.DefaultValue#canCall| (= ValueMessage.__default.DefineDefault (Lit (|#ValueMessage.Message.Define| (Lit ValueMessage.__default.DefaultValue))))))))
(assert (forall ((|a#0#0#0@@1| T@U) ) (!  (=> (= (type |a#0#0#0@@1|) (SeqType BoxType)) (= (DatatypeCtorId (|#ValueMessage.Message.Define| |a#0#0#0@@1|)) |##ValueMessage.Message.Define|)) :qid |Messagei.22:13| :skolemid |12698| :pattern ( (|#ValueMessage.Message.Define| |a#0#0#0@@1|)) )))
(assert (forall ((d@@41 T@U) ) (!  (=> (= (type d@@41) DatatypeTypeType) (and (=> (ValueMessage.Message.Define_q d@@41) (= (DatatypeCtorId d@@41) |##ValueMessage.Message.Define|)) (=> (= (DatatypeCtorId d@@41) |##ValueMessage.Message.Define|) (ValueMessage.Message.Define_q d@@41)))) :qid |unknown.0:0| :skolemid |12699| :pattern ( (ValueMessage.Message.Define_q d@@41)) )))
(assert (forall ((d@@42 T@U) ) (!  (=> (and (= (type d@@42) DatatypeTypeType) (ValueMessage.Message.Define_q d@@42)) (exists ((|a#1#0#0@@1| T@U) ) (!  (and (= (type |a#1#0#0@@1|) (SeqType BoxType)) (= d@@42 (|#ValueMessage.Message.Define| |a#1#0#0@@1|))) :qid |Messagei.22:13| :skolemid |12700| :no-pattern (type |a#1#0#0@@1|) :no-pattern (U_2_int |a#1#0#0@@1|) :no-pattern (U_2_bool |a#1#0#0@@1|) ))) :qid |unknown.0:0| :skolemid |12701| :pattern ( (ValueMessage.Message.Define_q d@@42)) )))
(assert (forall ((|a#2#0#0@@1| T@U) ) (!  (=> (= (type |a#2#0#0@@1|) (SeqType BoxType)) (and (=> ($Is (|#ValueMessage.Message.Define| |a#2#0#0@@1|) Tclass.ValueMessage.Message) ($Is |a#2#0#0@@1| Tclass.ValueType.Value)) (=> ($Is |a#2#0#0@@1| Tclass.ValueType.Value) ($Is (|#ValueMessage.Message.Define| |a#2#0#0@@1|) Tclass.ValueMessage.Message)))) :qid |Messagei.22:13| :skolemid |12702| :pattern ( ($Is (|#ValueMessage.Message.Define| |a#2#0#0@@1|) Tclass.ValueMessage.Message)) )))
(assert (forall ((|a#3#0#0@@1| T@U) ($h@@74 T@U) ) (!  (=> (and (and (= (type |a#3#0#0@@1|) (SeqType BoxType)) (= (type $h@@74) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@74)) (and (=> ($IsAlloc (|#ValueMessage.Message.Define| |a#3#0#0@@1|) Tclass.ValueMessage.Message $h@@74) ($IsAlloc |a#3#0#0@@1| Tclass.ValueType.Value $h@@74)) (=> ($IsAlloc |a#3#0#0@@1| Tclass.ValueType.Value $h@@74) ($IsAlloc (|#ValueMessage.Message.Define| |a#3#0#0@@1|) Tclass.ValueMessage.Message $h@@74)))) :qid |Messagei.22:13| :skolemid |12703| :pattern ( ($IsAlloc (|#ValueMessage.Message.Define| |a#3#0#0@@1|) Tclass.ValueMessage.Message $h@@74)) )))
(assert (forall ((d@@43 T@U) ($h@@75 T@U) ) (!  (=> (and (and (= (type d@@43) DatatypeTypeType) (= (type $h@@75) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@75) (and (ValueMessage.Message.Define_q d@@43) ($IsAlloc d@@43 Tclass.ValueMessage.Message $h@@75)))) ($IsAlloc (ValueMessage.Message.value d@@43) Tclass.ValueType.Value $h@@75)) :qid |unknown.0:0| :skolemid |12704| :pattern ( ($IsAlloc (ValueMessage.Message.value d@@43) Tclass.ValueType.Value $h@@75)) )))
(assert (forall ((|a#4#0#0@@1| T@U) ) (!  (=> (= (type |a#4#0#0@@1|) (SeqType BoxType)) (= (|#ValueMessage.Message.Define| (Lit |a#4#0#0@@1|)) (Lit (|#ValueMessage.Message.Define| |a#4#0#0@@1|)))) :qid |Messagei.22:13| :skolemid |12705| :pattern ( (|#ValueMessage.Message.Define| (Lit |a#4#0#0@@1|))) )))
(assert (forall ((|a#5#0#0@@1| T@U) ) (!  (=> (= (type |a#5#0#0@@1|) (SeqType BoxType)) (= (ValueMessage.Message.value (|#ValueMessage.Message.Define| |a#5#0#0@@1|)) |a#5#0#0@@1|)) :qid |Messagei.22:13| :skolemid |12706| :pattern ( (|#ValueMessage.Message.Define| |a#5#0#0@@1|)) )))
(assert (forall ((|a#6#0#0@@1| T@U) ) (!  (=> (= (type |a#6#0#0@@1|) DatatypeTypeType) (= (DatatypeCtorId (|#ValueMessage.Message.Update| |a#6#0#0@@1|)) |##ValueMessage.Message.Update|)) :qid |Messagei.23:13| :skolemid |12707| :pattern ( (|#ValueMessage.Message.Update| |a#6#0#0@@1|)) )))
(assert (forall ((d@@44 T@U) ) (!  (=> (= (type d@@44) DatatypeTypeType) (and (=> (ValueMessage.Message.Update_q d@@44) (= (DatatypeCtorId d@@44) |##ValueMessage.Message.Update|)) (=> (= (DatatypeCtorId d@@44) |##ValueMessage.Message.Update|) (ValueMessage.Message.Update_q d@@44)))) :qid |unknown.0:0| :skolemid |12708| :pattern ( (ValueMessage.Message.Update_q d@@44)) )))
(assert (forall ((d@@45 T@U) ) (!  (=> (and (= (type d@@45) DatatypeTypeType) (ValueMessage.Message.Update_q d@@45)) (exists ((|a#7#0#0@@1| T@U) ) (!  (and (= (type |a#7#0#0@@1|) DatatypeTypeType) (= d@@45 (|#ValueMessage.Message.Update| |a#7#0#0@@1|))) :qid |Messagei.23:13| :skolemid |12709| :no-pattern (type |a#7#0#0@@1|) :no-pattern (U_2_int |a#7#0#0@@1|) :no-pattern (U_2_bool |a#7#0#0@@1|) ))) :qid |unknown.0:0| :skolemid |12710| :pattern ( (ValueMessage.Message.Update_q d@@45)) )))
(assert (forall ((|a#8#0#0@@1| T@U) ) (!  (=> (= (type |a#8#0#0@@1|) DatatypeTypeType) (and (=> ($Is (|#ValueMessage.Message.Update| |a#8#0#0@@1|) Tclass.ValueMessage.Message) ($Is |a#8#0#0@@1| Tclass.ValueMessage.Delta)) (=> ($Is |a#8#0#0@@1| Tclass.ValueMessage.Delta) ($Is (|#ValueMessage.Message.Update| |a#8#0#0@@1|) Tclass.ValueMessage.Message)))) :qid |Messagei.23:13| :skolemid |12711| :pattern ( ($Is (|#ValueMessage.Message.Update| |a#8#0#0@@1|) Tclass.ValueMessage.Message)) )))
(assert (forall ((|a#9#0#0@@1| T@U) ($h@@76 T@U) ) (!  (=> (and (and (= (type |a#9#0#0@@1|) DatatypeTypeType) (= (type $h@@76) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@76)) (and (=> ($IsAlloc (|#ValueMessage.Message.Update| |a#9#0#0@@1|) Tclass.ValueMessage.Message $h@@76) ($IsAlloc |a#9#0#0@@1| Tclass.ValueMessage.Delta $h@@76)) (=> ($IsAlloc |a#9#0#0@@1| Tclass.ValueMessage.Delta $h@@76) ($IsAlloc (|#ValueMessage.Message.Update| |a#9#0#0@@1|) Tclass.ValueMessage.Message $h@@76)))) :qid |Messagei.23:13| :skolemid |12712| :pattern ( ($IsAlloc (|#ValueMessage.Message.Update| |a#9#0#0@@1|) Tclass.ValueMessage.Message $h@@76)) )))
(assert (forall ((d@@46 T@U) ($h@@77 T@U) ) (!  (=> (and (and (= (type d@@46) DatatypeTypeType) (= (type $h@@77) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@77) (and (ValueMessage.Message.Update_q d@@46) ($IsAlloc d@@46 Tclass.ValueMessage.Message $h@@77)))) ($IsAlloc (ValueMessage.Message.delta d@@46) Tclass.ValueMessage.Delta $h@@77)) :qid |unknown.0:0| :skolemid |12713| :pattern ( ($IsAlloc (ValueMessage.Message.delta d@@46) Tclass.ValueMessage.Delta $h@@77)) )))
(assert (forall ((|a#10#0#0@@1| T@U) ) (!  (=> (= (type |a#10#0#0@@1|) DatatypeTypeType) (= (|#ValueMessage.Message.Update| (Lit |a#10#0#0@@1|)) (Lit (|#ValueMessage.Message.Update| |a#10#0#0@@1|)))) :qid |Messagei.23:13| :skolemid |12714| :pattern ( (|#ValueMessage.Message.Update| (Lit |a#10#0#0@@1|))) )))
(assert (forall ((|a#11#0#0@@1| T@U) ) (!  (=> (= (type |a#11#0#0@@1|) DatatypeTypeType) (= (ValueMessage.Message.delta (|#ValueMessage.Message.Update| |a#11#0#0@@1|)) |a#11#0#0@@1|)) :qid |Messagei.23:13| :skolemid |12715| :pattern ( (|#ValueMessage.Message.Update| |a#11#0#0@@1|)) )))
(assert (forall ((|a#12#0#0@@1| T@U) ) (!  (=> (= (type |a#12#0#0@@1|) DatatypeTypeType) (< (DtRank |a#12#0#0@@1|) (DtRank (|#ValueMessage.Message.Update| |a#12#0#0@@1|)))) :qid |Messagei.23:13| :skolemid |12716| :pattern ( (|#ValueMessage.Message.Update| |a#12#0#0@@1|)) )))
(assert (forall ((d@@47 T@U) ) (!  (=> (and (= (type d@@47) DatatypeTypeType) (|$IsA#ValueMessage.Message| d@@47)) (or (ValueMessage.Message.Define_q d@@47) (ValueMessage.Message.Update_q d@@47))) :qid |unknown.0:0| :skolemid |12717| :pattern ( (|$IsA#ValueMessage.Message| d@@47)) )))
(assert (forall ((d@@48 T@U) ) (!  (=> (and (= (type d@@48) DatatypeTypeType) ($Is d@@48 Tclass.ValueMessage.Message)) (or (ValueMessage.Message.Define_q d@@48) (ValueMessage.Message.Update_q d@@48))) :qid |unknown.0:0| :skolemid |12718| :pattern ( (ValueMessage.Message.Update_q d@@48) ($Is d@@48 Tclass.ValueMessage.Message)) :pattern ( (ValueMessage.Message.Define_q d@@48) ($Is d@@48 Tclass.ValueMessage.Message)) )))
(assert (forall ((a@@126 T@U) (b@@75 T@U) ) (!  (=> (and (and (= (type a@@126) DatatypeTypeType) (= (type b@@75) DatatypeTypeType)) (and (ValueMessage.Message.Define_q a@@126) (ValueMessage.Message.Define_q b@@75))) (and (=> (|ValueMessage.Message#Equal| a@@126 b@@75) (|Seq#Equal| (ValueMessage.Message.value a@@126) (ValueMessage.Message.value b@@75))) (=> (|Seq#Equal| (ValueMessage.Message.value a@@126) (ValueMessage.Message.value b@@75)) (|ValueMessage.Message#Equal| a@@126 b@@75)))) :qid |unknown.0:0| :skolemid |12719| :pattern ( (|ValueMessage.Message#Equal| a@@126 b@@75) (ValueMessage.Message.Define_q a@@126)) :pattern ( (|ValueMessage.Message#Equal| a@@126 b@@75) (ValueMessage.Message.Define_q b@@75)) )))
(assert (forall ((a@@127 T@U) (b@@76 T@U) ) (!  (=> (and (and (= (type a@@127) DatatypeTypeType) (= (type b@@76) DatatypeTypeType)) (and (ValueMessage.Message.Update_q a@@127) (ValueMessage.Message.Update_q b@@76))) (and (=> (|ValueMessage.Message#Equal| a@@127 b@@76) (|ValueMessage.Delta#Equal| (ValueMessage.Message.delta a@@127) (ValueMessage.Message.delta b@@76))) (=> (|ValueMessage.Delta#Equal| (ValueMessage.Message.delta a@@127) (ValueMessage.Message.delta b@@76)) (|ValueMessage.Message#Equal| a@@127 b@@76)))) :qid |unknown.0:0| :skolemid |12720| :pattern ( (|ValueMessage.Message#Equal| a@@127 b@@76) (ValueMessage.Message.Update_q a@@127)) :pattern ( (|ValueMessage.Message#Equal| a@@127 b@@76) (ValueMessage.Message.Update_q b@@76)) )))
(assert (forall ((a@@128 T@U) (b@@77 T@U) ) (!  (=> (and (= (type a@@128) DatatypeTypeType) (= (type b@@77) DatatypeTypeType)) (and (=> (|ValueMessage.Message#Equal| a@@128 b@@77) (= a@@128 b@@77)) (=> (= a@@128 b@@77) (|ValueMessage.Message#Equal| a@@128 b@@77)))) :qid |unknown.0:0| :skolemid |12721| :pattern ( (|ValueMessage.Message#Equal| a@@128 b@@77)) )))
(assert (= (type Tclass.KMBtreeModel.__default) TyType))
(assert (= (Tag Tclass.KMBtreeModel.__default) Tagclass.KMBtreeModel.__default))
(assert (forall ((bx@@112 T@U) ) (!  (=> (and (= (type bx@@112) BoxType) ($IsBox bx@@112 Tclass.KMBtreeModel.__default)) (and (= ($Box ($Unbox refType bx@@112)) bx@@112) ($Is ($Unbox refType bx@@112) Tclass.KMBtreeModel.__default))) :qid |unknown.0:0| :skolemid |12722| :pattern ( ($IsBox bx@@112 Tclass.KMBtreeModel.__default)) )))
(assert (forall (($o@@66 T@U) ) (!  (=> (= (type $o@@66) refType) (and (=> ($Is $o@@66 Tclass.KMBtreeModel.__default) (or (= $o@@66 null) (= (dtype $o@@66) Tclass.KMBtreeModel.__default))) (=> (or (= $o@@66 null) (= (dtype $o@@66) Tclass.KMBtreeModel.__default)) ($Is $o@@66 Tclass.KMBtreeModel.__default)))) :qid |unknown.0:0| :skolemid |12723| :pattern ( ($Is $o@@66 Tclass.KMBtreeModel.__default)) )))
(assert (forall (($o@@67 T@U) ($h@@78 T@U) ) (!  (=> (and (= (type $o@@67) refType) (= (type $h@@78) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@67 Tclass.KMBtreeModel.__default $h@@78) (or (= $o@@67 null) (U_2_bool (MapType1Select (MapType0Select $h@@78 $o@@67) alloc)))) (=> (or (= $o@@67 null) (U_2_bool (MapType1Select (MapType0Select $h@@78 $o@@67) alloc))) ($IsAlloc $o@@67 Tclass.KMBtreeModel.__default $h@@78)))) :qid |unknown.0:0| :skolemid |12724| :pattern ( ($IsAlloc $o@@67 Tclass.KMBtreeModel.__default $h@@78)) )))
(assert (forall ((arg0@@359 T@U) (arg1@@217 T@U) ) (! (= (type (KMBtreeModel.__default.AllKeys arg0@@359 arg1@@217)) (MapType0Type BoxType boolType)) :qid |funType:KMBtreeModel.__default.AllKeys| :pattern ( (KMBtreeModel.__default.AllKeys arg0@@359 arg1@@217)) )))
(assert (forall (($ly@@638 T@U) (|node#0@@35| T@U) ) (!  (=> (and (= (type $ly@@638) LayerTypeType) (= (type |node#0@@35|) DatatypeTypeType)) (= (KMBtreeModel.__default.AllKeys ($LS $ly@@638) |node#0@@35|) (KMBtreeModel.__default.AllKeys $ly@@638 |node#0@@35|))) :qid |BtreeMod.21:22| :skolemid |12725| :pattern ( (KMBtreeModel.__default.AllKeys ($LS $ly@@638) |node#0@@35|)) )))
(assert (forall (($ly@@639 T@U) (|node#0@@36| T@U) ) (!  (=> (and (= (type $ly@@639) LayerTypeType) (= (type |node#0@@36|) DatatypeTypeType)) (= (KMBtreeModel.__default.AllKeys $ly@@639 |node#0@@36|) (KMBtreeModel.__default.AllKeys $LZ |node#0@@36|))) :qid |BtreeMod.21:22| :skolemid |12726| :pattern ( (KMBtreeModel.__default.AllKeys (AsFuelBottom $ly@@639) |node#0@@36|)) )))
(assert  (=> true (forall (($ly@@640 T@U) (|node#0@@37| T@U) ) (!  (=> (and (and (= (type $ly@@640) LayerTypeType) (= (type |node#0@@37|) DatatypeTypeType)) (or (|KMBtreeModel.__default.AllKeys#canCall| |node#0@@37|) ($Is |node#0@@37| Tclass.KMBtreeModel.Node))) (and (and (=> (and (KMBtreeModel.Node.Leaf_q |node#0@@37|) (< 0 (|Seq#Length| (KMBtreeModel.Node.keys |node#0@@37|)))) (not (|Set#Equal| (KMBtreeModel.__default.AllKeys $ly@@640 |node#0@@37|) (|Set#Empty| BoxType)))) (=> (and (KMBtreeModel.Node.Index_q |node#0@@37|) (< 0 (|Seq#Length| (KMBtreeModel.Node.pivots |node#0@@37|)))) (not (|Set#Equal| (KMBtreeModel.__default.AllKeys $ly@@640 |node#0@@37|) (|Set#Empty| BoxType))))) ($Is (KMBtreeModel.__default.AllKeys $ly@@640 |node#0@@37|) (TSet (TSeq Tclass.NativeTypes.byte))))) :qid |BtreeMod.21:22| :skolemid |12727| :pattern ( (KMBtreeModel.__default.AllKeys $ly@@640 |node#0@@37|)) ))))
(assert (forall (($ly@@641 T@U) (|node#0@@38| T@U) ) (!  (=> (and (and (= (type $ly@@641) LayerTypeType) (= (type |node#0@@38|) DatatypeTypeType)) ($Is |node#0@@38| Tclass.KMBtreeModel.Node)) (and (=> (|KMBtreeModel.__default.AllKeys#requires| $ly@@641 |node#0@@38|) true) (=> true (|KMBtreeModel.__default.AllKeys#requires| $ly@@641 |node#0@@38|)))) :qid |BtreeMod.21:22| :skolemid |12728| :pattern ( (|KMBtreeModel.__default.AllKeys#requires| $ly@@641 |node#0@@38|)) )))
(assert (forall ((arg0@@360 T@U) (arg1@@218 Int) (arg2@@130 Int) (arg3@@89 T@U) (arg4@@59 T@U) (arg5@@23 T@U) (arg6@@7 T@U) ) (! (= (type (|lambda#182| arg0@@360 arg1@@218 arg2@@130 arg3@@89 arg4@@59 arg5@@23 arg6@@7)) (MapType0Type BoxType boolType)) :qid |funType:lambda#182| :pattern ( (|lambda#182| arg0@@360 arg1@@218 arg2@@130 arg3@@89 arg4@@59 arg5@@23 arg6@@7)) )))
(assert  (=> true (forall (($ly@@642 T@U) (|node#0@@39| T@U) ) (!  (=> (and (and (= (type $ly@@642) LayerTypeType) (= (type |node#0@@39|) DatatypeTypeType)) (or (|KMBtreeModel.__default.AllKeys#canCall| |node#0@@39|) ($Is |node#0@@39| Tclass.KMBtreeModel.Node))) (and (=> (not (KMBtreeModel.Node.Leaf_q |node#0@@39|)) (let ((|children#5| (KMBtreeModel.Node.children |node#0@@39|))) (forall ((|i#6@@26| Int) (|k#16| T@U) ) (!  (=> (and (and (= (type |k#16|) (SeqType BoxType)) ($Is |k#16| (TSeq Tclass.NativeTypes.byte))) (< |i#6@@26| (|Seq#Length| |children#5|))) (|KMBtreeModel.__default.AllKeys#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |children#5| |i#6@@26|)))) :qid |BtreeMod.37:14| :skolemid |12729| :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys $ly@@642 ($Unbox DatatypeTypeType (|Seq#Index| |children#5| |i#6@@26|))) ($Box |k#16|))) )))) (= (KMBtreeModel.__default.AllKeys ($LS $ly@@642) |node#0@@39|) (ite (KMBtreeModel.Node.Leaf_q |node#0@@39|) (let ((|keys#6| (KMBtreeModel.Node.keys |node#0@@39|))) (let ((|result#12| (|lambda#140| (TSeq Tclass.NativeTypes.byte) |keys#6|))) (ite (< 0 (|Seq#Length| (KMBtreeModel.Node.keys |node#0@@39|))) |result#12| |result#12|))) (let ((|children#6| (KMBtreeModel.Node.children |node#0@@39|))) (let ((|pivots#6| (KMBtreeModel.Node.pivots |node#0@@39|))) (let ((|result#13| (|Set#Union| (|lambda#140| (TSeq Tclass.NativeTypes.byte) |pivots#6|) (|lambda#182| (TSeq Tclass.NativeTypes.byte) (LitInt 0) (|Seq#Length| |children#6|) $ly@@642 |children#6| $ly@@642 |children#6|)))) (ite (< 0 (|Seq#Length| (KMBtreeModel.Node.pivots |node#0@@39|))) |result#13| |result#13|)))))))) :qid |BtreeMod.21:22| :skolemid |12732| :pattern ( (KMBtreeModel.__default.AllKeys ($LS $ly@@642) |node#0@@39|)) ))))
(assert  (=> true (forall (($ly@@643 T@U) (|node#0@@40| T@U) ) (!  (=> (and (and (= (type $ly@@643) LayerTypeType) (= (type |node#0@@40|) DatatypeTypeType)) (or (|KMBtreeModel.__default.AllKeys#canCall| (Lit |node#0@@40|)) ($Is |node#0@@40| Tclass.KMBtreeModel.Node))) (and (=> (not (U_2_bool (Lit (bool_2_U (KMBtreeModel.Node.Leaf_q (Lit |node#0@@40|)))))) (let ((|children#7| (Lit (KMBtreeModel.Node.children (Lit |node#0@@40|))))) (forall ((|i#8| Int) (|k#20| T@U) ) (!  (=> (and (and (= (type |k#20|) (SeqType BoxType)) ($Is |k#20| (TSeq Tclass.NativeTypes.byte))) (< |i#8| (|Seq#Length| |children#7|))) (|KMBtreeModel.__default.AllKeys#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |children#7| |i#8|)))) :qid |BtreeMod.37:14| :skolemid |12733| :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys ($LS $ly@@643) ($Unbox DatatypeTypeType (|Seq#Index| |children#7| |i#8|))) ($Box |k#20|))) )))) (= (KMBtreeModel.__default.AllKeys ($LS $ly@@643) (Lit |node#0@@40|)) (ite (KMBtreeModel.Node.Leaf_q (Lit |node#0@@40|)) (let ((|keys#8| (Lit (KMBtreeModel.Node.keys (Lit |node#0@@40|))))) (let ((|result#16| (|lambda#140| (TSeq Tclass.NativeTypes.byte) |keys#8|))) (ite (< 0 (|Seq#Length| (Lit (KMBtreeModel.Node.keys (Lit |node#0@@40|))))) |result#16| |result#16|))) (let ((|children#8| (Lit (KMBtreeModel.Node.children (Lit |node#0@@40|))))) (let ((|pivots#8| (Lit (KMBtreeModel.Node.pivots (Lit |node#0@@40|))))) (let ((|result#17| (|Set#Union| (|lambda#140| (TSeq Tclass.NativeTypes.byte) |pivots#8|) (|lambda#182| (TSeq Tclass.NativeTypes.byte) (LitInt 0) (|Seq#Length| |children#8|) ($LS $ly@@643) |children#8| ($LS $ly@@643) |children#8|)))) (ite (< 0 (|Seq#Length| (Lit (KMBtreeModel.Node.pivots (Lit |node#0@@40|))))) |result#17| |result#17|)))))))) :qid |BtreeMod.21:22| :weight 3 :skolemid |12736| :pattern ( (KMBtreeModel.__default.AllKeys ($LS $ly@@643) (Lit |node#0@@40|))) ))))
(assert  (=> true (forall ((|node#0@@41| T@U) (|i#0@@75| Int) ) (!  (=> (and (= (type |node#0@@41|) DatatypeTypeType) (or (|KMBtreeModel.__default.AllKeysBelowBound#canCall| |node#0@@41| |i#0@@75|) (and ($Is |node#0@@41| Tclass.KMBtreeModel.Node) (and (and (KMBtreeModel.Node.Index_q |node#0@@41|) (and (<= (LitInt 0) |i#0@@75|) (< |i#0@@75| (- (|Seq#Length| (KMBtreeModel.Node.children |node#0@@41|)) 1)))) (and (<= (LitInt 0) |i#0@@75|) (< |i#0@@75| (|Seq#Length| (KMBtreeModel.Node.pivots |node#0@@41|)))))))) true) :qid |BtreeMod.46:31| :skolemid |12737| :pattern ( (KMBtreeModel.__default.AllKeysBelowBound |node#0@@41| |i#0@@75|)) ))))
(assert (forall ((|node#0@@42| T@U) (|i#0@@76| Int) ) (!  (=> (and (= (type |node#0@@42|) DatatypeTypeType) ($Is |node#0@@42| Tclass.KMBtreeModel.Node)) (and (=> (|KMBtreeModel.__default.AllKeysBelowBound#requires| |node#0@@42| |i#0@@76|) (and (and (KMBtreeModel.Node.Index_q |node#0@@42|) (and (<= (LitInt 0) |i#0@@76|) (< |i#0@@76| (- (|Seq#Length| (KMBtreeModel.Node.children |node#0@@42|)) 1)))) (and (<= (LitInt 0) |i#0@@76|) (< |i#0@@76| (|Seq#Length| (KMBtreeModel.Node.pivots |node#0@@42|)))))) (=> (and (and (KMBtreeModel.Node.Index_q |node#0@@42|) (and (<= (LitInt 0) |i#0@@76|) (< |i#0@@76| (- (|Seq#Length| (KMBtreeModel.Node.children |node#0@@42|)) 1)))) (and (<= (LitInt 0) |i#0@@76|) (< |i#0@@76| (|Seq#Length| (KMBtreeModel.Node.pivots |node#0@@42|))))) (|KMBtreeModel.__default.AllKeysBelowBound#requires| |node#0@@42| |i#0@@76|)))) :qid |BtreeMod.46:31| :skolemid |12738| :pattern ( (|KMBtreeModel.__default.AllKeysBelowBound#requires| |node#0@@42| |i#0@@76|)) )))
(assert (= (type StartFuel_KMBtreeModel._default.AllKeys) LayerTypeType))
(assert  (=> true (forall ((|node#0@@43| T@U) (|i#0@@77| Int) ) (!  (=> (and (= (type |node#0@@43|) DatatypeTypeType) (or (|KMBtreeModel.__default.AllKeysBelowBound#canCall| |node#0@@43| |i#0@@77|) (and ($Is |node#0@@43| Tclass.KMBtreeModel.Node) (and (and (KMBtreeModel.Node.Index_q |node#0@@43|) (and (<= (LitInt 0) |i#0@@77|) (< |i#0@@77| (- (|Seq#Length| (KMBtreeModel.Node.children |node#0@@43|)) 1)))) (and (<= (LitInt 0) |i#0@@77|) (< |i#0@@77| (|Seq#Length| (KMBtreeModel.Node.pivots |node#0@@43|)))))))) (and (forall ((|key#4| T@U) ) (!  (=> (and (= (type |key#4|) (SeqType BoxType)) ($Is |key#4| (TSeq Tclass.NativeTypes.byte))) (and (|KMBtreeModel.__default.AllKeys#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@43|) |i#0@@77|))) (=> (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@43|) |i#0@@77|))) ($Box |key#4|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |key#4| ($Unbox (SeqType BoxType) (|Seq#Index| (KMBtreeModel.Node.pivots |node#0@@43|) |i#0@@77|)))))) :qid |BtreeMod.51:12| :skolemid |12739| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#4| ($Unbox (SeqType BoxType) (|Seq#Index| (KMBtreeModel.Node.pivots |node#0@@43|) |i#0@@77|)))) :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@43|) |i#0@@77|))) ($Box |key#4|))) )) (and (=> (KMBtreeModel.__default.AllKeysBelowBound |node#0@@43| |i#0@@77|) (forall ((|key#4@@0| T@U) ) (!  (=> (and (and (= (type |key#4@@0|) (SeqType BoxType)) ($Is |key#4@@0| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@43|) |i#0@@77|))) ($Box |key#4@@0|)))) (Lexicographic__Byte__Order.__default.lt |key#4@@0| ($Unbox (SeqType BoxType) (|Seq#Index| (KMBtreeModel.Node.pivots |node#0@@43|) |i#0@@77|)))) :qid |BtreeMod.51:12| :skolemid |12740| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#4@@0| ($Unbox (SeqType BoxType) (|Seq#Index| (KMBtreeModel.Node.pivots |node#0@@43|) |i#0@@77|)))) :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@43|) |i#0@@77|))) ($Box |key#4@@0|))) ))) (=> (forall ((|key#4@@1| T@U) ) (!  (=> (and (and (= (type |key#4@@1|) (SeqType BoxType)) ($Is |key#4@@1| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@43|) |i#0@@77|))) ($Box |key#4@@1|)))) (Lexicographic__Byte__Order.__default.lt |key#4@@1| ($Unbox (SeqType BoxType) (|Seq#Index| (KMBtreeModel.Node.pivots |node#0@@43|) |i#0@@77|)))) :qid |BtreeMod.51:12| :skolemid |12740| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#4@@1| ($Unbox (SeqType BoxType) (|Seq#Index| (KMBtreeModel.Node.pivots |node#0@@43|) |i#0@@77|)))) :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@43|) |i#0@@77|))) ($Box |key#4@@1|))) )) (KMBtreeModel.__default.AllKeysBelowBound |node#0@@43| |i#0@@77|))))) :qid |BtreeMod.46:31| :skolemid |12741| :pattern ( (KMBtreeModel.__default.AllKeysBelowBound |node#0@@43| |i#0@@77|)) ))))
(assert  (=> true (forall ((|node#0@@44| T@U) (|i#0@@78| Int) ) (!  (=> (and (= (type |node#0@@44|) DatatypeTypeType) (or (|KMBtreeModel.__default.AllKeysBelowBound#canCall| (Lit |node#0@@44|) (LitInt |i#0@@78|)) (and ($Is |node#0@@44| Tclass.KMBtreeModel.Node) (and (and (U_2_bool (Lit (bool_2_U (KMBtreeModel.Node.Index_q (Lit |node#0@@44|))))) (and (<= (LitInt 0) (LitInt |i#0@@78|)) (< |i#0@@78| (- (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |node#0@@44|)))) 1)))) (and (<= (LitInt 0) (LitInt |i#0@@78|)) (< |i#0@@78| (|Seq#Length| (Lit (KMBtreeModel.Node.pivots (Lit |node#0@@44|)))))))))) (and (forall ((|key#5| T@U) ) (!  (=> (and (= (type |key#5|) (SeqType BoxType)) ($Is |key#5| (TSeq Tclass.NativeTypes.byte))) (and (|KMBtreeModel.__default.AllKeys#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |node#0@@44|))) (LitInt |i#0@@78|)))) (=> (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |node#0@@44|))) (LitInt |i#0@@78|)))) ($Box |key#5|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |key#5| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (KMBtreeModel.Node.pivots (Lit |node#0@@44|))) (LitInt |i#0@@78|))))))) :qid |BtreeMod.51:12| :skolemid |12742| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#5| ($Unbox (SeqType BoxType) (|Seq#Index| (KMBtreeModel.Node.pivots |node#0@@44|) |i#0@@78|)))) :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@44|) |i#0@@78|))) ($Box |key#5|))) )) (and (=> (KMBtreeModel.__default.AllKeysBelowBound (Lit |node#0@@44|) (LitInt |i#0@@78|)) (forall ((|key#5@@0| T@U) ) (!  (=> (and (and (= (type |key#5@@0|) (SeqType BoxType)) ($Is |key#5@@0| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |node#0@@44|))) (LitInt |i#0@@78|)))) ($Box |key#5@@0|)))) (Lexicographic__Byte__Order.__default.lt |key#5@@0| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (KMBtreeModel.Node.pivots (Lit |node#0@@44|))) (LitInt |i#0@@78|))))) :qid |BtreeMod.51:12| :skolemid |12743| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#5@@0| ($Unbox (SeqType BoxType) (|Seq#Index| (KMBtreeModel.Node.pivots |node#0@@44|) |i#0@@78|)))) :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@44|) |i#0@@78|))) ($Box |key#5@@0|))) ))) (=> (forall ((|key#5@@1| T@U) ) (!  (=> (and (and (= (type |key#5@@1|) (SeqType BoxType)) ($Is |key#5@@1| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |node#0@@44|))) (LitInt |i#0@@78|)))) ($Box |key#5@@1|)))) (Lexicographic__Byte__Order.__default.lt |key#5@@1| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (KMBtreeModel.Node.pivots (Lit |node#0@@44|))) (LitInt |i#0@@78|))))) :qid |BtreeMod.51:12| :skolemid |12743| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#5@@1| ($Unbox (SeqType BoxType) (|Seq#Index| (KMBtreeModel.Node.pivots |node#0@@44|) |i#0@@78|)))) :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@44|) |i#0@@78|))) ($Box |key#5@@1|))) )) (KMBtreeModel.__default.AllKeysBelowBound (Lit |node#0@@44|) (LitInt |i#0@@78|)))))) :qid |BtreeMod.46:31| :weight 3 :skolemid |12744| :pattern ( (KMBtreeModel.__default.AllKeysBelowBound (Lit |node#0@@44|) (LitInt |i#0@@78|))) ))))
(assert  (=> true (forall ((|node#0@@45| T@U) (|i#0@@79| Int) ) (!  (=> (and (= (type |node#0@@45|) DatatypeTypeType) (or (|KMBtreeModel.__default.AllKeysAboveBound#canCall| |node#0@@45| |i#0@@79|) (and ($Is |node#0@@45| Tclass.KMBtreeModel.Node) (and (and (KMBtreeModel.Node.Index_q |node#0@@45|) (and (<= (LitInt 0) |i#0@@79|) (< |i#0@@79| (|Seq#Length| (KMBtreeModel.Node.children |node#0@@45|))))) (and (<= (LitInt 0) (- |i#0@@79| 1)) (< (- |i#0@@79| 1) (|Seq#Length| (KMBtreeModel.Node.pivots |node#0@@45|)))))))) true) :qid |BtreeMod.54:31| :skolemid |12745| :pattern ( (KMBtreeModel.__default.AllKeysAboveBound |node#0@@45| |i#0@@79|)) ))))
(assert (forall ((|node#0@@46| T@U) (|i#0@@80| Int) ) (!  (=> (and (= (type |node#0@@46|) DatatypeTypeType) ($Is |node#0@@46| Tclass.KMBtreeModel.Node)) (and (=> (|KMBtreeModel.__default.AllKeysAboveBound#requires| |node#0@@46| |i#0@@80|) (and (and (KMBtreeModel.Node.Index_q |node#0@@46|) (and (<= (LitInt 0) |i#0@@80|) (< |i#0@@80| (|Seq#Length| (KMBtreeModel.Node.children |node#0@@46|))))) (and (<= (LitInt 0) (- |i#0@@80| 1)) (< (- |i#0@@80| 1) (|Seq#Length| (KMBtreeModel.Node.pivots |node#0@@46|)))))) (=> (and (and (KMBtreeModel.Node.Index_q |node#0@@46|) (and (<= (LitInt 0) |i#0@@80|) (< |i#0@@80| (|Seq#Length| (KMBtreeModel.Node.children |node#0@@46|))))) (and (<= (LitInt 0) (- |i#0@@80| 1)) (< (- |i#0@@80| 1) (|Seq#Length| (KMBtreeModel.Node.pivots |node#0@@46|))))) (|KMBtreeModel.__default.AllKeysAboveBound#requires| |node#0@@46| |i#0@@80|)))) :qid |BtreeMod.54:31| :skolemid |12746| :pattern ( (|KMBtreeModel.__default.AllKeysAboveBound#requires| |node#0@@46| |i#0@@80|)) )))
(assert  (=> true (forall ((|node#0@@47| T@U) (|i#0@@81| Int) ) (!  (=> (and (= (type |node#0@@47|) DatatypeTypeType) (or (|KMBtreeModel.__default.AllKeysAboveBound#canCall| |node#0@@47| |i#0@@81|) (and ($Is |node#0@@47| Tclass.KMBtreeModel.Node) (and (and (KMBtreeModel.Node.Index_q |node#0@@47|) (and (<= (LitInt 0) |i#0@@81|) (< |i#0@@81| (|Seq#Length| (KMBtreeModel.Node.children |node#0@@47|))))) (and (<= (LitInt 0) (- |i#0@@81| 1)) (< (- |i#0@@81| 1) (|Seq#Length| (KMBtreeModel.Node.pivots |node#0@@47|)))))))) (and (forall ((|key#4@@2| T@U) ) (!  (=> (and (= (type |key#4@@2|) (SeqType BoxType)) ($Is |key#4@@2| (TSeq Tclass.NativeTypes.byte))) (and (|KMBtreeModel.__default.AllKeys#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@47|) |i#0@@81|))) (=> (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@47|) |i#0@@81|))) ($Box |key#4@@2|))) (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (KMBtreeModel.Node.pivots |node#0@@47|) (- |i#0@@81| 1))) |key#4@@2|)))) :qid |BtreeMod.59:12| :skolemid |12747| :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@47|) |i#0@@81|))) ($Box |key#4@@2|))) )) (and (=> (KMBtreeModel.__default.AllKeysAboveBound |node#0@@47| |i#0@@81|) (forall ((|key#4@@3| T@U) ) (!  (=> (and (and (= (type |key#4@@3|) (SeqType BoxType)) ($Is |key#4@@3| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@47|) |i#0@@81|))) ($Box |key#4@@3|)))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (KMBtreeModel.Node.pivots |node#0@@47|) (- |i#0@@81| 1))) |key#4@@3|)) :qid |BtreeMod.59:12| :skolemid |12748| :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@47|) |i#0@@81|))) ($Box |key#4@@3|))) ))) (=> (forall ((|key#4@@4| T@U) ) (!  (=> (and (and (= (type |key#4@@4|) (SeqType BoxType)) ($Is |key#4@@4| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@47|) |i#0@@81|))) ($Box |key#4@@4|)))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (KMBtreeModel.Node.pivots |node#0@@47|) (- |i#0@@81| 1))) |key#4@@4|)) :qid |BtreeMod.59:12| :skolemid |12748| :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@47|) |i#0@@81|))) ($Box |key#4@@4|))) )) (KMBtreeModel.__default.AllKeysAboveBound |node#0@@47| |i#0@@81|))))) :qid |BtreeMod.54:31| :skolemid |12749| :pattern ( (KMBtreeModel.__default.AllKeysAboveBound |node#0@@47| |i#0@@81|)) ))))
(assert  (=> true (forall ((|node#0@@48| T@U) (|i#0@@82| Int) ) (!  (=> (and (= (type |node#0@@48|) DatatypeTypeType) (or (|KMBtreeModel.__default.AllKeysAboveBound#canCall| (Lit |node#0@@48|) (LitInt |i#0@@82|)) (and ($Is |node#0@@48| Tclass.KMBtreeModel.Node) (and (and (U_2_bool (Lit (bool_2_U (KMBtreeModel.Node.Index_q (Lit |node#0@@48|))))) (and (<= (LitInt 0) (LitInt |i#0@@82|)) (< |i#0@@82| (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |node#0@@48|))))))) (and (<= (LitInt 0) (LitInt (- |i#0@@82| 1))) (< (- |i#0@@82| 1) (|Seq#Length| (Lit (KMBtreeModel.Node.pivots (Lit |node#0@@48|)))))))))) (and (forall ((|key#5@@2| T@U) ) (!  (=> (and (= (type |key#5@@2|) (SeqType BoxType)) ($Is |key#5@@2| (TSeq Tclass.NativeTypes.byte))) (and (|KMBtreeModel.__default.AllKeys#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |node#0@@48|))) (LitInt |i#0@@82|)))) (=> (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |node#0@@48|))) (LitInt |i#0@@82|)))) ($Box |key#5@@2|))) (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (KMBtreeModel.Node.pivots (Lit |node#0@@48|))) (LitInt (- |i#0@@82| 1)))) |key#5@@2|)))) :qid |BtreeMod.59:12| :skolemid |12750| :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@48|) |i#0@@82|))) ($Box |key#5@@2|))) )) (and (=> (KMBtreeModel.__default.AllKeysAboveBound (Lit |node#0@@48|) (LitInt |i#0@@82|)) (forall ((|key#5@@3| T@U) ) (!  (=> (and (and (= (type |key#5@@3|) (SeqType BoxType)) ($Is |key#5@@3| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |node#0@@48|))) (LitInt |i#0@@82|)))) ($Box |key#5@@3|)))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (KMBtreeModel.Node.pivots (Lit |node#0@@48|))) (LitInt (- |i#0@@82| 1)))) |key#5@@3|)) :qid |BtreeMod.59:12| :skolemid |12751| :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@48|) |i#0@@82|))) ($Box |key#5@@3|))) ))) (=> (forall ((|key#5@@4| T@U) ) (!  (=> (and (and (= (type |key#5@@4|) (SeqType BoxType)) ($Is |key#5@@4| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |node#0@@48|))) (LitInt |i#0@@82|)))) ($Box |key#5@@4|)))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (KMBtreeModel.Node.pivots (Lit |node#0@@48|))) (LitInt (- |i#0@@82| 1)))) |key#5@@4|)) :qid |BtreeMod.59:12| :skolemid |12751| :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@48|) |i#0@@82|))) ($Box |key#5@@4|))) )) (KMBtreeModel.__default.AllKeysAboveBound (Lit |node#0@@48|) (LitInt |i#0@@82|)))))) :qid |BtreeMod.54:31| :weight 3 :skolemid |12752| :pattern ( (KMBtreeModel.__default.AllKeysAboveBound (Lit |node#0@@48|) (LitInt |i#0@@82|))) ))))
(assert (forall (($ly@@644 T@U) (|node#0@@49| T@U) ) (!  (=> (and (= (type $ly@@644) LayerTypeType) (= (type |node#0@@49|) DatatypeTypeType)) (and (=> (KMBtreeModel.__default.WF ($LS $ly@@644) |node#0@@49|) (KMBtreeModel.__default.WF $ly@@644 |node#0@@49|)) (=> (KMBtreeModel.__default.WF $ly@@644 |node#0@@49|) (KMBtreeModel.__default.WF ($LS $ly@@644) |node#0@@49|)))) :qid |BtreeMod.62:13| :skolemid |12753| :pattern ( (KMBtreeModel.__default.WF ($LS $ly@@644) |node#0@@49|)) )))
(assert (forall (($ly@@645 T@U) (|node#0@@50| T@U) ) (!  (=> (and (= (type $ly@@645) LayerTypeType) (= (type |node#0@@50|) DatatypeTypeType)) (and (=> (KMBtreeModel.__default.WF $ly@@645 |node#0@@50|) (KMBtreeModel.__default.WF $LZ |node#0@@50|)) (=> (KMBtreeModel.__default.WF $LZ |node#0@@50|) (KMBtreeModel.__default.WF $ly@@645 |node#0@@50|)))) :qid |BtreeMod.62:13| :skolemid |12754| :pattern ( (KMBtreeModel.__default.WF (AsFuelBottom $ly@@645) |node#0@@50|)) )))
(assert  (=> true (forall (($ly@@646 T@U) (|node#0@@51| T@U) ) (!  (=> (and (and (= (type $ly@@646) LayerTypeType) (= (type |node#0@@51|) DatatypeTypeType)) (or (|KMBtreeModel.__default.WF#canCall| |node#0@@51|) ($Is |node#0@@51| Tclass.KMBtreeModel.Node))) true) :qid |BtreeMod.62:13| :skolemid |12755| :pattern ( (KMBtreeModel.__default.WF $ly@@646 |node#0@@51|)) ))))
(assert (forall (($ly@@647 T@U) (|node#0@@52| T@U) ) (!  (=> (and (and (= (type $ly@@647) LayerTypeType) (= (type |node#0@@52|) DatatypeTypeType)) ($Is |node#0@@52| Tclass.KMBtreeModel.Node)) (and (=> (|KMBtreeModel.__default.WF#requires| $ly@@647 |node#0@@52|) true) (=> true (|KMBtreeModel.__default.WF#requires| $ly@@647 |node#0@@52|)))) :qid |BtreeMod.62:13| :skolemid |12756| :pattern ( (|KMBtreeModel.__default.WF#requires| $ly@@647 |node#0@@52|)) )))
(assert  (=> true (forall (($ly@@648 T@U) (|node#0@@53| T@U) ) (!  (=> (and (and (= (type $ly@@648) LayerTypeType) (= (type |node#0@@53|) DatatypeTypeType)) (or (|KMBtreeModel.__default.WF#canCall| |node#0@@53|) ($Is |node#0@@53| Tclass.KMBtreeModel.Node))) (and (and (=> (KMBtreeModel.Node.Leaf_q |node#0@@53|) (=> (= (|Seq#Length| (KMBtreeModel.Node.keys |node#0@@53|)) (|Seq#Length| (KMBtreeModel.Node.values |node#0@@53|))) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (KMBtreeModel.Node.keys |node#0@@53|)))) (=> (not (KMBtreeModel.Node.Leaf_q |node#0@@53|)) (and (and (and (and (=> (= (|Seq#Length| (KMBtreeModel.Node.pivots |node#0@@53|)) (- (|Seq#Length| (KMBtreeModel.Node.children |node#0@@53|)) 1)) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (KMBtreeModel.Node.pivots |node#0@@53|))) (=> (and (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (KMBtreeModel.Node.pivots |node#0@@53|)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (KMBtreeModel.Node.pivots |node#0@@53|))) (forall ((|i#16| Int) ) (!  (=> (< |i#16| (|Seq#Length| (KMBtreeModel.Node.children |node#0@@53|))) (|KMBtreeModel.__default.WF#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@53|) |i#16|)))) :qid |BtreeMod.71:18| :skolemid |12757| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@53|) |i#16|))) )))) (=> (and (forall ((|i#16@@0| Int) ) (!  (=> (< |i#16@@0| (|Seq#Length| (KMBtreeModel.Node.children |node#0@@53|))) (|KMBtreeModel.__default.WF#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@53|) |i#16@@0|)))) :qid |BtreeMod.71:18| :skolemid |12759| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@53|) |i#16@@0|))) )) (forall ((|i#16@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#16@@1|) (< |i#16@@1| (|Seq#Length| (KMBtreeModel.Node.children |node#0@@53|)))) (KMBtreeModel.__default.WF $ly@@648 ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@53|) |i#16@@1|))))) :qid |BtreeMod.71:18| :skolemid |12760| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@53|) |i#16@@1|))) ))) (forall ((|i#17| Int) ) (!  (=> (< |i#17| (|Seq#Length| (KMBtreeModel.Node.children |node#0@@53|))) (|KMBtreeModel.__default.AllKeys#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@53|) |i#17|)))) :qid |BtreeMod.72:18| :skolemid |12758| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@53|) |i#17|))) )))) (=> (and (forall ((|i#17@@0| Int) ) (!  (=> (< |i#17@@0| (|Seq#Length| (KMBtreeModel.Node.children |node#0@@53|))) (|KMBtreeModel.__default.AllKeys#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@53|) |i#17@@0|)))) :qid |BtreeMod.72:18| :skolemid |12762| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@53|) |i#17@@0|))) )) (forall ((|i#17@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#17@@1|) (< |i#17@@1| (|Seq#Length| (KMBtreeModel.Node.children |node#0@@53|)))) (not (|Set#Equal| (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@53|) |i#17@@1|))) (|Set#Empty| BoxType))))) :qid |BtreeMod.72:18| :skolemid |12763| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@53|) |i#17@@1|))) ))) (forall ((|i#18| Int) ) (!  (=> (< |i#18| (- (|Seq#Length| (KMBtreeModel.Node.children |node#0@@53|)) 1)) (|KMBtreeModel.__default.AllKeysBelowBound#canCall| |node#0@@53| |i#18|)) :qid |BtreeMod.73:18| :skolemid |12761| :pattern ( (KMBtreeModel.__default.AllKeysBelowBound |node#0@@53| |i#18|)) )))) (=> (and (forall ((|i#18@@0| Int) ) (!  (=> (< |i#18@@0| (- (|Seq#Length| (KMBtreeModel.Node.children |node#0@@53|)) 1)) (|KMBtreeModel.__default.AllKeysBelowBound#canCall| |node#0@@53| |i#18@@0|)) :qid |BtreeMod.73:18| :skolemid |12765| :pattern ( (KMBtreeModel.__default.AllKeysBelowBound |node#0@@53| |i#18@@0|)) )) (forall ((|i#18@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#18@@1|) (< |i#18@@1| (- (|Seq#Length| (KMBtreeModel.Node.children |node#0@@53|)) 1))) (KMBtreeModel.__default.AllKeysBelowBound |node#0@@53| |i#18@@1|))) :qid |BtreeMod.73:18| :skolemid |12766| :pattern ( (KMBtreeModel.__default.AllKeysBelowBound |node#0@@53| |i#18@@1|)) ))) (forall ((|i#19| Int) ) (!  (=> (< |i#19| (|Seq#Length| (KMBtreeModel.Node.children |node#0@@53|))) (|KMBtreeModel.__default.AllKeysAboveBound#canCall| |node#0@@53| |i#19|)) :qid |BtreeMod.74:18| :skolemid |12764| :pattern ( (KMBtreeModel.__default.AllKeysAboveBound |node#0@@53| |i#19|)) )))))) (and (=> (KMBtreeModel.__default.WF ($LS $ly@@648) |node#0@@53|) (ite (KMBtreeModel.Node.Leaf_q |node#0@@53|)  (and (= (|Seq#Length| (KMBtreeModel.Node.keys |node#0@@53|)) (|Seq#Length| (KMBtreeModel.Node.values |node#0@@53|))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (KMBtreeModel.Node.keys |node#0@@53|)))  (and (and (and (and (and (= (|Seq#Length| (KMBtreeModel.Node.pivots |node#0@@53|)) (- (|Seq#Length| (KMBtreeModel.Node.children |node#0@@53|)) 1)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (KMBtreeModel.Node.pivots |node#0@@53|))) (forall ((|i#16@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#16@@2|) (< |i#16@@2| (|Seq#Length| (KMBtreeModel.Node.children |node#0@@53|)))) (KMBtreeModel.__default.WF $ly@@648 ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@53|) |i#16@@2|))))) :qid |BtreeMod.71:18| :skolemid |12767| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@53|) |i#16@@2|))) ))) (forall ((|i#17@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#17@@2|) (< |i#17@@2| (|Seq#Length| (KMBtreeModel.Node.children |node#0@@53|)))) (not (|Set#Equal| (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@53|) |i#17@@2|))) (|Set#Empty| BoxType))))) :qid |BtreeMod.72:18| :skolemid |12768| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@53|) |i#17@@2|))) ))) (forall ((|i#18@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#18@@2|) (< |i#18@@2| (- (|Seq#Length| (KMBtreeModel.Node.children |node#0@@53|)) 1))) (KMBtreeModel.__default.AllKeysBelowBound |node#0@@53| |i#18@@2|))) :qid |BtreeMod.73:18| :skolemid |12769| :pattern ( (KMBtreeModel.__default.AllKeysBelowBound |node#0@@53| |i#18@@2|)) ))) (forall ((|i#19@@0| Int) ) (!  (=> true (=> (and (< 0 |i#19@@0|) (< |i#19@@0| (|Seq#Length| (KMBtreeModel.Node.children |node#0@@53|)))) (KMBtreeModel.__default.AllKeysAboveBound |node#0@@53| |i#19@@0|))) :qid |BtreeMod.74:18| :skolemid |12770| :pattern ( (KMBtreeModel.__default.AllKeysAboveBound |node#0@@53| |i#19@@0|)) ))))) (=> (ite (KMBtreeModel.Node.Leaf_q |node#0@@53|)  (and (= (|Seq#Length| (KMBtreeModel.Node.keys |node#0@@53|)) (|Seq#Length| (KMBtreeModel.Node.values |node#0@@53|))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (KMBtreeModel.Node.keys |node#0@@53|)))  (and (and (and (and (and (= (|Seq#Length| (KMBtreeModel.Node.pivots |node#0@@53|)) (- (|Seq#Length| (KMBtreeModel.Node.children |node#0@@53|)) 1)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (KMBtreeModel.Node.pivots |node#0@@53|))) (forall ((|i#16@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#16@@3|) (< |i#16@@3| (|Seq#Length| (KMBtreeModel.Node.children |node#0@@53|)))) (KMBtreeModel.__default.WF $ly@@648 ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@53|) |i#16@@3|))))) :qid |BtreeMod.71:18| :skolemid |12767| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@53|) |i#16@@3|))) ))) (forall ((|i#17@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#17@@3|) (< |i#17@@3| (|Seq#Length| (KMBtreeModel.Node.children |node#0@@53|)))) (not (|Set#Equal| (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@53|) |i#17@@3|))) (|Set#Empty| BoxType))))) :qid |BtreeMod.72:18| :skolemid |12768| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@53|) |i#17@@3|))) ))) (forall ((|i#18@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#18@@3|) (< |i#18@@3| (- (|Seq#Length| (KMBtreeModel.Node.children |node#0@@53|)) 1))) (KMBtreeModel.__default.AllKeysBelowBound |node#0@@53| |i#18@@3|))) :qid |BtreeMod.73:18| :skolemid |12769| :pattern ( (KMBtreeModel.__default.AllKeysBelowBound |node#0@@53| |i#18@@3|)) ))) (forall ((|i#19@@1| Int) ) (!  (=> true (=> (and (< 0 |i#19@@1|) (< |i#19@@1| (|Seq#Length| (KMBtreeModel.Node.children |node#0@@53|)))) (KMBtreeModel.__default.AllKeysAboveBound |node#0@@53| |i#19@@1|))) :qid |BtreeMod.74:18| :skolemid |12770| :pattern ( (KMBtreeModel.__default.AllKeysAboveBound |node#0@@53| |i#19@@1|)) )))) (KMBtreeModel.__default.WF ($LS $ly@@648) |node#0@@53|))))) :qid |BtreeMod.62:13| :skolemid |12771| :pattern ( (KMBtreeModel.__default.WF ($LS $ly@@648) |node#0@@53|)) ))))
(assert  (=> true (forall (($ly@@649 T@U) (|node#0@@54| T@U) ) (!  (=> (and (and (= (type $ly@@649) LayerTypeType) (= (type |node#0@@54|) DatatypeTypeType)) (or (|KMBtreeModel.__default.WF#canCall| (Lit |node#0@@54|)) ($Is |node#0@@54| Tclass.KMBtreeModel.Node))) (and (and (=> (U_2_bool (Lit (bool_2_U (KMBtreeModel.Node.Leaf_q (Lit |node#0@@54|))))) (=> (= (|Seq#Length| (Lit (KMBtreeModel.Node.keys (Lit |node#0@@54|)))) (|Seq#Length| (Lit (KMBtreeModel.Node.values (Lit |node#0@@54|))))) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (Lit (KMBtreeModel.Node.keys (Lit |node#0@@54|)))))) (=> (not (U_2_bool (Lit (bool_2_U (KMBtreeModel.Node.Leaf_q (Lit |node#0@@54|)))))) (and (and (and (and (=> (= (|Seq#Length| (Lit (KMBtreeModel.Node.pivots (Lit |node#0@@54|)))) (- (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |node#0@@54|)))) 1)) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (Lit (KMBtreeModel.Node.pivots (Lit |node#0@@54|))))) (=> (and (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (Lit (KMBtreeModel.Node.pivots (Lit |node#0@@54|)))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (Lit (KMBtreeModel.Node.pivots (Lit |node#0@@54|))))) (forall ((|i#20| Int) ) (!  (=> (< |i#20| (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |node#0@@54|))))) (|KMBtreeModel.__default.WF#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |node#0@@54|))) |i#20|)))) :qid |BtreeMod.71:18| :skolemid |12772| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@54|) |i#20|))) )))) (=> (and (forall ((|i#20@@0| Int) ) (!  (=> (< |i#20@@0| (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |node#0@@54|))))) (|KMBtreeModel.__default.WF#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |node#0@@54|))) |i#20@@0|)))) :qid |BtreeMod.71:18| :skolemid |12774| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@54|) |i#20@@0|))) )) (forall ((|i#20@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#20@@1|) (< |i#20@@1| (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |node#0@@54|)))))) (KMBtreeModel.__default.WF ($LS $ly@@649) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |node#0@@54|))) |i#20@@1|))))) :qid |BtreeMod.71:18| :skolemid |12775| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@54|) |i#20@@1|))) ))) (forall ((|i#21| Int) ) (!  (=> (< |i#21| (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |node#0@@54|))))) (|KMBtreeModel.__default.AllKeys#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |node#0@@54|))) |i#21|)))) :qid |BtreeMod.72:18| :skolemid |12773| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@54|) |i#21|))) )))) (=> (and (forall ((|i#21@@0| Int) ) (!  (=> (< |i#21@@0| (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |node#0@@54|))))) (|KMBtreeModel.__default.AllKeys#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |node#0@@54|))) |i#21@@0|)))) :qid |BtreeMod.72:18| :skolemid |12777| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@54|) |i#21@@0|))) )) (forall ((|i#21@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#21@@1|) (< |i#21@@1| (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |node#0@@54|)))))) (not (|Set#Equal| (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |node#0@@54|))) |i#21@@1|))) (|Set#Empty| BoxType))))) :qid |BtreeMod.72:18| :skolemid |12778| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@54|) |i#21@@1|))) ))) (forall ((|i#22| Int) ) (!  (=> (< |i#22| (- (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |node#0@@54|)))) 1)) (|KMBtreeModel.__default.AllKeysBelowBound#canCall| (Lit |node#0@@54|) |i#22|)) :qid |BtreeMod.73:18| :skolemid |12776| :pattern ( (KMBtreeModel.__default.AllKeysBelowBound |node#0@@54| |i#22|)) )))) (=> (and (forall ((|i#22@@0| Int) ) (!  (=> (< |i#22@@0| (- (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |node#0@@54|)))) 1)) (|KMBtreeModel.__default.AllKeysBelowBound#canCall| (Lit |node#0@@54|) |i#22@@0|)) :qid |BtreeMod.73:18| :skolemid |12780| :pattern ( (KMBtreeModel.__default.AllKeysBelowBound |node#0@@54| |i#22@@0|)) )) (forall ((|i#22@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#22@@1|) (< |i#22@@1| (- (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |node#0@@54|)))) 1))) (KMBtreeModel.__default.AllKeysBelowBound (Lit |node#0@@54|) |i#22@@1|))) :qid |BtreeMod.73:18| :skolemid |12781| :pattern ( (KMBtreeModel.__default.AllKeysBelowBound |node#0@@54| |i#22@@1|)) ))) (forall ((|i#23| Int) ) (!  (=> (< |i#23| (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |node#0@@54|))))) (|KMBtreeModel.__default.AllKeysAboveBound#canCall| (Lit |node#0@@54|) |i#23|)) :qid |BtreeMod.74:18| :skolemid |12779| :pattern ( (KMBtreeModel.__default.AllKeysAboveBound |node#0@@54| |i#23|)) )))))) (and (=> (KMBtreeModel.__default.WF ($LS $ly@@649) (Lit |node#0@@54|)) (ite (KMBtreeModel.Node.Leaf_q (Lit |node#0@@54|))  (and (= (|Seq#Length| (Lit (KMBtreeModel.Node.keys (Lit |node#0@@54|)))) (|Seq#Length| (Lit (KMBtreeModel.Node.values (Lit |node#0@@54|))))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (Lit (KMBtreeModel.Node.keys (Lit |node#0@@54|)))))  (and (and (and (and (and (= (|Seq#Length| (Lit (KMBtreeModel.Node.pivots (Lit |node#0@@54|)))) (- (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |node#0@@54|)))) 1)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (Lit (KMBtreeModel.Node.pivots (Lit |node#0@@54|))))) (forall ((|i#20@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#20@@2|) (< |i#20@@2| (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |node#0@@54|)))))) (KMBtreeModel.__default.WF ($LS $ly@@649) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |node#0@@54|))) |i#20@@2|))))) :qid |BtreeMod.71:18| :skolemid |12782| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@54|) |i#20@@2|))) ))) (forall ((|i#21@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#21@@2|) (< |i#21@@2| (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |node#0@@54|)))))) (not (|Set#Equal| (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |node#0@@54|))) |i#21@@2|))) (|Set#Empty| BoxType))))) :qid |BtreeMod.72:18| :skolemid |12783| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@54|) |i#21@@2|))) ))) (forall ((|i#22@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#22@@2|) (< |i#22@@2| (- (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |node#0@@54|)))) 1))) (KMBtreeModel.__default.AllKeysBelowBound (Lit |node#0@@54|) |i#22@@2|))) :qid |BtreeMod.73:18| :skolemid |12784| :pattern ( (KMBtreeModel.__default.AllKeysBelowBound |node#0@@54| |i#22@@2|)) ))) (forall ((|i#23@@0| Int) ) (!  (=> true (=> (and (< 0 |i#23@@0|) (< |i#23@@0| (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |node#0@@54|)))))) (KMBtreeModel.__default.AllKeysAboveBound (Lit |node#0@@54|) |i#23@@0|))) :qid |BtreeMod.74:18| :skolemid |12785| :pattern ( (KMBtreeModel.__default.AllKeysAboveBound |node#0@@54| |i#23@@0|)) ))))) (=> (ite (KMBtreeModel.Node.Leaf_q (Lit |node#0@@54|))  (and (= (|Seq#Length| (Lit (KMBtreeModel.Node.keys (Lit |node#0@@54|)))) (|Seq#Length| (Lit (KMBtreeModel.Node.values (Lit |node#0@@54|))))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (Lit (KMBtreeModel.Node.keys (Lit |node#0@@54|)))))  (and (and (and (and (and (= (|Seq#Length| (Lit (KMBtreeModel.Node.pivots (Lit |node#0@@54|)))) (- (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |node#0@@54|)))) 1)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (Lit (KMBtreeModel.Node.pivots (Lit |node#0@@54|))))) (forall ((|i#20@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#20@@3|) (< |i#20@@3| (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |node#0@@54|)))))) (KMBtreeModel.__default.WF ($LS $ly@@649) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |node#0@@54|))) |i#20@@3|))))) :qid |BtreeMod.71:18| :skolemid |12782| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@54|) |i#20@@3|))) ))) (forall ((|i#21@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#21@@3|) (< |i#21@@3| (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |node#0@@54|)))))) (not (|Set#Equal| (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |node#0@@54|))) |i#21@@3|))) (|Set#Empty| BoxType))))) :qid |BtreeMod.72:18| :skolemid |12783| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@54|) |i#21@@3|))) ))) (forall ((|i#22@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#22@@3|) (< |i#22@@3| (- (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |node#0@@54|)))) 1))) (KMBtreeModel.__default.AllKeysBelowBound (Lit |node#0@@54|) |i#22@@3|))) :qid |BtreeMod.73:18| :skolemid |12784| :pattern ( (KMBtreeModel.__default.AllKeysBelowBound |node#0@@54| |i#22@@3|)) ))) (forall ((|i#23@@1| Int) ) (!  (=> true (=> (and (< 0 |i#23@@1|) (< |i#23@@1| (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |node#0@@54|)))))) (KMBtreeModel.__default.AllKeysAboveBound (Lit |node#0@@54|) |i#23@@1|))) :qid |BtreeMod.74:18| :skolemid |12785| :pattern ( (KMBtreeModel.__default.AllKeysAboveBound |node#0@@54| |i#23@@1|)) )))) (KMBtreeModel.__default.WF ($LS $ly@@649) (Lit |node#0@@54|)))))) :qid |BtreeMod.62:13| :weight 3 :skolemid |12786| :pattern ( (KMBtreeModel.__default.WF ($LS $ly@@649) (Lit |node#0@@54|))) ))))
(assert (forall (($ly@@650 T@U) (|node#0@@55| T@U) ) (!  (=> (and (= (type $ly@@650) LayerTypeType) (= (type |node#0@@55|) DatatypeTypeType)) (= (KMBtreeModel.__default.Interpretation ($LS $ly@@650) |node#0@@55|) (KMBtreeModel.__default.Interpretation $ly@@650 |node#0@@55|))) :qid |BtreeMod.86:22| :skolemid |12787| :pattern ( (KMBtreeModel.__default.Interpretation ($LS $ly@@650) |node#0@@55|)) )))
(assert (forall (($ly@@651 T@U) (|node#0@@56| T@U) ) (!  (=> (and (= (type $ly@@651) LayerTypeType) (= (type |node#0@@56|) DatatypeTypeType)) (= (KMBtreeModel.__default.Interpretation $ly@@651 |node#0@@56|) (KMBtreeModel.__default.Interpretation $LZ |node#0@@56|))) :qid |BtreeMod.86:22| :skolemid |12788| :pattern ( (KMBtreeModel.__default.Interpretation (AsFuelBottom $ly@@651) |node#0@@56|)) )))
(assert  (=> true (forall (($ly@@652 T@U) (|node#0@@57| T@U) ) (!  (=> (and (and (= (type $ly@@652) LayerTypeType) (= (type |node#0@@57|) DatatypeTypeType)) (or (|KMBtreeModel.__default.Interpretation#canCall| |node#0@@57|) (and ($Is |node#0@@57| Tclass.KMBtreeModel.Node) (KMBtreeModel.__default.WF ($LS $LZ) |node#0@@57|)))) ($Is (KMBtreeModel.__default.Interpretation $ly@@652 |node#0@@57|) (TMap (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message))) :qid |BtreeMod.86:22| :skolemid |12789| :pattern ( (KMBtreeModel.__default.Interpretation $ly@@652 |node#0@@57|)) ))))
(assert (forall (($ly@@653 T@U) (|node#0@@58| T@U) ) (!  (=> (and (and (= (type $ly@@653) LayerTypeType) (= (type |node#0@@58|) DatatypeTypeType)) ($Is |node#0@@58| Tclass.KMBtreeModel.Node)) (and (=> (|KMBtreeModel.__default.Interpretation#requires| $ly@@653 |node#0@@58|) (KMBtreeModel.__default.WF ($LS $LZ) |node#0@@58|)) (=> (KMBtreeModel.__default.WF ($LS $LZ) |node#0@@58|) (|KMBtreeModel.__default.Interpretation#requires| $ly@@653 |node#0@@58|)))) :qid |BtreeMod.86:22| :skolemid |12790| :pattern ( (|KMBtreeModel.__default.Interpretation#requires| $ly@@653 |node#0@@58|)) )))
(assert  (and (and (and (forall ((arg0@@361 T@U) (arg1@@219 T@U) ) (! (= (type (|lambda#186| arg0@@361 arg1@@219)) (MapType0Type BoxType boolType)) :qid |funType:lambda#186| :pattern ( (|lambda#186| arg0@@361 arg1@@219)) )) (forall ((arg0@@362 T@U) (arg1@@220 T@U) (arg2@@131 T@U) ) (! (= (type (|lambda#187| arg0@@362 arg1@@220 arg2@@131)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#187| :pattern ( (|lambda#187| arg0@@362 arg1@@220 arg2@@131)) ))) (forall ((arg0@@363 T@U) (arg1@@221 T@U) (arg2@@132 T@U) (arg3@@90 T@U) (arg4@@60 T@U) (arg5@@24 T@U) (arg6@@8 Int) ) (! (= (type (|lambda#188| arg0@@363 arg1@@221 arg2@@132 arg3@@90 arg4@@60 arg5@@24 arg6@@8)) (MapType0Type BoxType boolType)) :qid |funType:lambda#188| :pattern ( (|lambda#188| arg0@@363 arg1@@221 arg2@@132 arg3@@90 arg4@@60 arg5@@24 arg6@@8)) ))) (forall ((arg0@@364 T@U) (arg1@@222 T@U) (arg2@@133 T@U) (arg3@@91 T@U) (arg4@@61 Int) ) (! (= (type (|lambda#189| arg0@@364 arg1@@222 arg2@@133 arg3@@91 arg4@@61)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#189| :pattern ( (|lambda#189| arg0@@364 arg1@@222 arg2@@133 arg3@@91 arg4@@61)) ))))
(assert  (=> true (forall (($ly@@654 T@U) (|node#0@@59| T@U) ) (!  (=> (and (and (= (type $ly@@654) LayerTypeType) (= (type |node#0@@59|) DatatypeTypeType)) (or (|KMBtreeModel.__default.Interpretation#canCall| |node#0@@59|) (and ($Is |node#0@@59| Tclass.KMBtreeModel.Node) (KMBtreeModel.__default.WF ($LS $LZ) |node#0@@59|)))) (and (and (=> (KMBtreeModel.Node.Leaf_q |node#0@@59|) (forall ((|k#0@@37| T@U) ) (!  (=> (and (and (= (type |k#0@@37|) (SeqType BoxType)) ($Is |k#0@@37| (TSeq Tclass.NativeTypes.byte))) (|Seq#Contains| (KMBtreeModel.Node.keys |node#0@@59|) ($Box |k#0@@37|))) (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (KMBtreeModel.Node.keys |node#0@@59|) |k#0@@37|)) :qid |BtreeMod.92:11| :skolemid |12791| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (KMBtreeModel.Node.keys |node#0@@59|) |k#0@@37|)) :pattern ( (|Seq#Contains| (KMBtreeModel.Node.keys |node#0@@59|) ($Box |k#0@@37|))) ))) (=> (not (KMBtreeModel.Node.Leaf_q |node#0@@59|)) (forall ((|key#0@@122| T@U) ) (!  (=> (and (= (type |key#0@@122|) (SeqType BoxType)) ($Is |key#0@@122| (TSeq Tclass.NativeTypes.byte))) (and (and (|KMBtreeModel.__default.AllKeys#canCall| |node#0@@59|) (=> (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys |node#0@@59|) ($Box |key#0@@122|))) (and (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (KMBtreeModel.Node.pivots |node#0@@59|) |key#0@@122|) (|KMBtreeModel.__default.Interpretation#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@59|) (+ (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (KMBtreeModel.Node.pivots |node#0@@59|) |key#0@@122|) 1))))))) (=> (and (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys |node#0@@59|) ($Box |key#0@@122|))) (U_2_bool (MapType0Select (|Map#Domain| (KMBtreeModel.__default.Interpretation $ly@@654 ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@59|) (+ (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (KMBtreeModel.Node.pivots |node#0@@59|) |key#0@@122|) 1))))) ($Box |key#0@@122|)))) (and (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (KMBtreeModel.Node.pivots |node#0@@59|) |key#0@@122|) (|KMBtreeModel.__default.Interpretation#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@59|) (+ (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (KMBtreeModel.Node.pivots |node#0@@59|) |key#0@@122|) 1)))))))) :qid |BtreeMod.94:11| :skolemid |12792| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (KMBtreeModel.Node.pivots |node#0@@59|) |key#0@@122|)) :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys |node#0@@59|) ($Box |key#0@@122|))) )))) (= (KMBtreeModel.__default.Interpretation ($LS $ly@@654) |node#0@@59|) (ite (KMBtreeModel.Node.Leaf_q |node#0@@59|) (|Map#Glue| (|lambda#186| (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.keys |node#0@@59|)) (|lambda#187| (KMBtreeModel.Node.values |node#0@@59|) ($LS $LZ) (KMBtreeModel.Node.keys |node#0@@59|)) (TMap (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message)) (|Map#Glue| (|lambda#188| (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys |node#0@@59|) $ly@@654 (KMBtreeModel.Node.children |node#0@@59|) ($LS $LZ) (KMBtreeModel.Node.pivots |node#0@@59|) 1) (|lambda#189| $ly@@654 (KMBtreeModel.Node.children |node#0@@59|) ($LS $LZ) (KMBtreeModel.Node.pivots |node#0@@59|) 1) (TMap (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message)))))) :qid |BtreeMod.86:22| :skolemid |12793| :pattern ( (KMBtreeModel.__default.Interpretation ($LS $ly@@654) |node#0@@59|)) ))))
(assert  (=> true (forall (($ly@@655 T@U) (|node#0@@60| T@U) ) (!  (=> (and (and (= (type $ly@@655) LayerTypeType) (= (type |node#0@@60|) DatatypeTypeType)) (or (|KMBtreeModel.__default.Interpretation#canCall| (Lit |node#0@@60|)) (and ($Is |node#0@@60| Tclass.KMBtreeModel.Node) (U_2_bool (Lit (bool_2_U (KMBtreeModel.__default.WF ($LS $LZ) (Lit |node#0@@60|)))))))) (and (and (=> (U_2_bool (Lit (bool_2_U (KMBtreeModel.Node.Leaf_q (Lit |node#0@@60|))))) (forall ((|k#0@@38| T@U) ) (!  (=> (and (and (= (type |k#0@@38|) (SeqType BoxType)) ($Is |k#0@@38| (TSeq Tclass.NativeTypes.byte))) (|Seq#Contains| (KMBtreeModel.Node.keys (Lit |node#0@@60|)) ($Box |k#0@@38|))) (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (Lit (KMBtreeModel.Node.keys (Lit |node#0@@60|))) |k#0@@38|)) :qid |BtreeMod.92:11| :skolemid |12794| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (KMBtreeModel.Node.keys |node#0@@60|) |k#0@@38|)) :pattern ( (|Seq#Contains| (KMBtreeModel.Node.keys |node#0@@60|) ($Box |k#0@@38|))) ))) (=> (not (U_2_bool (Lit (bool_2_U (KMBtreeModel.Node.Leaf_q (Lit |node#0@@60|)))))) (forall ((|key#0@@123| T@U) ) (!  (=> (and (= (type |key#0@@123|) (SeqType BoxType)) ($Is |key#0@@123| (TSeq Tclass.NativeTypes.byte))) (and (and (|KMBtreeModel.__default.AllKeys#canCall| (Lit |node#0@@60|)) (=> (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys (Lit |node#0@@60|)) ($Box |key#0@@123|))) (and (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (Lit (KMBtreeModel.Node.pivots (Lit |node#0@@60|))) |key#0@@123|) (|KMBtreeModel.__default.Interpretation#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |node#0@@60|))) (+ (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (Lit (KMBtreeModel.Node.pivots (Lit |node#0@@60|))) |key#0@@123|) 1))))))) (=> (and (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys (Lit |node#0@@60|)) ($Box |key#0@@123|))) (U_2_bool (MapType0Select (|Map#Domain| (KMBtreeModel.__default.Interpretation ($LS $ly@@655) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |node#0@@60|))) (+ (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (Lit (KMBtreeModel.Node.pivots (Lit |node#0@@60|))) |key#0@@123|) 1))))) ($Box |key#0@@123|)))) (and (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (Lit (KMBtreeModel.Node.pivots (Lit |node#0@@60|))) |key#0@@123|) (|KMBtreeModel.__default.Interpretation#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |node#0@@60|))) (+ (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (Lit (KMBtreeModel.Node.pivots (Lit |node#0@@60|))) |key#0@@123|) 1)))))))) :qid |BtreeMod.94:11| :skolemid |12795| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (KMBtreeModel.Node.pivots |node#0@@60|) |key#0@@123|)) :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys |node#0@@60|) ($Box |key#0@@123|))) )))) (= (KMBtreeModel.__default.Interpretation ($LS $ly@@655) (Lit |node#0@@60|)) (ite (KMBtreeModel.Node.Leaf_q (Lit |node#0@@60|)) (|Map#Glue| (|lambda#186| (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.keys (Lit |node#0@@60|))) (|lambda#187| (Lit (KMBtreeModel.Node.values (Lit |node#0@@60|))) ($LS $LZ) (Lit (KMBtreeModel.Node.keys (Lit |node#0@@60|)))) (TMap (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message)) (|Map#Glue| (|lambda#188| (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys (Lit |node#0@@60|)) ($LS $ly@@655) (Lit (KMBtreeModel.Node.children (Lit |node#0@@60|))) ($LS $LZ) (Lit (KMBtreeModel.Node.pivots (Lit |node#0@@60|))) 1) (|lambda#189| ($LS $ly@@655) (Lit (KMBtreeModel.Node.children (Lit |node#0@@60|))) ($LS $LZ) (Lit (KMBtreeModel.Node.pivots (Lit |node#0@@60|))) 1) (TMap (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message)))))) :qid |BtreeMod.86:22| :weight 3 :skolemid |12796| :pattern ( (KMBtreeModel.__default.Interpretation ($LS $ly@@655) (Lit |node#0@@60|))) ))))
(assert (forall ((arg0@@365 T@U) (arg1@@223 T@U) ) (! (= (type (KMBtreeModel.__default.MinKey arg0@@365 arg1@@223)) (SeqType BoxType)) :qid |funType:KMBtreeModel.__default.MinKey| :pattern ( (KMBtreeModel.__default.MinKey arg0@@365 arg1@@223)) )))
(assert (forall (($ly@@656 T@U) (|node#0@@61| T@U) ) (!  (=> (and (= (type $ly@@656) LayerTypeType) (= (type |node#0@@61|) DatatypeTypeType)) (= (KMBtreeModel.__default.MinKey ($LS $ly@@656) |node#0@@61|) (KMBtreeModel.__default.MinKey $ly@@656 |node#0@@61|))) :qid |BtreeMod.210:12| :skolemid |12827| :pattern ( (KMBtreeModel.__default.MinKey ($LS $ly@@656) |node#0@@61|)) )))
(assert (forall (($ly@@657 T@U) (|node#0@@62| T@U) ) (!  (=> (and (= (type $ly@@657) LayerTypeType) (= (type |node#0@@62|) DatatypeTypeType)) (= (KMBtreeModel.__default.MinKey $ly@@657 |node#0@@62|) (KMBtreeModel.__default.MinKey $LZ |node#0@@62|))) :qid |BtreeMod.210:12| :skolemid |12828| :pattern ( (KMBtreeModel.__default.MinKey (AsFuelBottom $ly@@657) |node#0@@62|)) )))
(assert  (=> true (forall (($ly@@658 T@U) (|node#0@@63| T@U) ) (!  (=> (and (and (= (type $ly@@658) LayerTypeType) (= (type |node#0@@63|) DatatypeTypeType)) (or (|KMBtreeModel.__default.MinKey#canCall| |node#0@@63|) (and ($Is |node#0@@63| Tclass.KMBtreeModel.Node) (and (KMBtreeModel.__default.WF ($LS $LZ) |node#0@@63|) (< 0 (|Map#Card| (KMBtreeModel.__default.Interpretation StartFuel_KMBtreeModel._default.Interpretation |node#0@@63|))))))) ($Is (KMBtreeModel.__default.MinKey $ly@@658 |node#0@@63|) (TSeq Tclass.NativeTypes.byte))) :qid |BtreeMod.210:12| :skolemid |12829| :pattern ( (KMBtreeModel.__default.MinKey $ly@@658 |node#0@@63|)) ))))
(assert (forall (($ly@@659 T@U) (|node#0@@64| T@U) ) (!  (=> (and (and (= (type $ly@@659) LayerTypeType) (= (type |node#0@@64|) DatatypeTypeType)) ($Is |node#0@@64| Tclass.KMBtreeModel.Node)) (and (=> (|KMBtreeModel.__default.MinKey#requires| $ly@@659 |node#0@@64|) (and (KMBtreeModel.__default.WF ($LS $LZ) |node#0@@64|) (< 0 (|Map#Card| (KMBtreeModel.__default.Interpretation StartFuel_KMBtreeModel._default.Interpretation |node#0@@64|))))) (=> (and (KMBtreeModel.__default.WF ($LS $LZ) |node#0@@64|) (< 0 (|Map#Card| (KMBtreeModel.__default.Interpretation StartFuel_KMBtreeModel._default.Interpretation |node#0@@64|)))) (|KMBtreeModel.__default.MinKey#requires| $ly@@659 |node#0@@64|)))) :qid |BtreeMod.210:12| :skolemid |12830| :pattern ( (|KMBtreeModel.__default.MinKey#requires| $ly@@659 |node#0@@64|)) )))
(assert  (=> true (forall (($ly@@660 T@U) (|node#0@@65| T@U) ) (!  (=> (and (and (= (type $ly@@660) LayerTypeType) (= (type |node#0@@65|) DatatypeTypeType)) (or (|KMBtreeModel.__default.MinKey#canCall| |node#0@@65|) (and ($Is |node#0@@65| Tclass.KMBtreeModel.Node) (and (KMBtreeModel.__default.WF ($LS $LZ) |node#0@@65|) (< 0 (|Map#Card| (KMBtreeModel.__default.Interpretation StartFuel_KMBtreeModel._default.Interpretation |node#0@@65|))))))) (and (=> (not (KMBtreeModel.Node.Leaf_q |node#0@@65|)) (|KMBtreeModel.__default.MinKey#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@65|) (LitInt 0))))) (= (KMBtreeModel.__default.MinKey ($LS $ly@@660) |node#0@@65|) (ite (KMBtreeModel.Node.Leaf_q |node#0@@65|) ($Unbox (SeqType BoxType) (|Seq#Index| (KMBtreeModel.Node.keys |node#0@@65|) (LitInt 0))) (KMBtreeModel.__default.MinKey $ly@@660 ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |node#0@@65|) (LitInt 0)))))))) :qid |BtreeMod.210:12| :skolemid |12831| :pattern ( (KMBtreeModel.__default.MinKey ($LS $ly@@660) |node#0@@65|)) ))))
(assert  (=> true (forall (($ly@@661 T@U) (|node#0@@66| T@U) ) (!  (=> (and (and (= (type $ly@@661) LayerTypeType) (= (type |node#0@@66|) DatatypeTypeType)) (or (|KMBtreeModel.__default.MinKey#canCall| (Lit |node#0@@66|)) (and ($Is |node#0@@66| Tclass.KMBtreeModel.Node) (and (U_2_bool (Lit (bool_2_U (KMBtreeModel.__default.WF ($LS $LZ) (Lit |node#0@@66|))))) (< 0 (|Map#Card| (KMBtreeModel.__default.Interpretation StartFuel_KMBtreeModel._default.Interpretation (Lit |node#0@@66|)))))))) (and (=> (not (U_2_bool (Lit (bool_2_U (KMBtreeModel.Node.Leaf_q (Lit |node#0@@66|)))))) (|KMBtreeModel.__default.MinKey#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |node#0@@66|))) (LitInt 0))))) (= (KMBtreeModel.__default.MinKey ($LS $ly@@661) (Lit |node#0@@66|)) (ite (KMBtreeModel.Node.Leaf_q (Lit |node#0@@66|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (KMBtreeModel.Node.keys (Lit |node#0@@66|))) (LitInt 0))) (KMBtreeModel.__default.MinKey ($LS $ly@@661) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |node#0@@66|))) (LitInt 0)))))))) :qid |BtreeMod.210:12| :weight 3 :skolemid |12832| :pattern ( (KMBtreeModel.__default.MinKey ($LS $ly@@661) (Lit |node#0@@66|))) ))))
(assert (forall ((arg0@@366 T@U) (arg1@@224 T@U) ) (! (= (type (KMBtreeModel.__default.MaxKey arg0@@366 arg1@@224)) (SeqType BoxType)) :qid |funType:KMBtreeModel.__default.MaxKey| :pattern ( (KMBtreeModel.__default.MaxKey arg0@@366 arg1@@224)) )))
(assert (forall (($ly@@662 T@U) (|node#0@@67| T@U) ) (!  (=> (and (= (type $ly@@662) LayerTypeType) (= (type |node#0@@67|) DatatypeTypeType)) (= (KMBtreeModel.__default.MaxKey ($LS $ly@@662) |node#0@@67|) (KMBtreeModel.__default.MaxKey $ly@@662 |node#0@@67|))) :qid |BtreeMod.261:12| :skolemid |12846| :pattern ( (KMBtreeModel.__default.MaxKey ($LS $ly@@662) |node#0@@67|)) )))
(assert (forall (($ly@@663 T@U) (|node#0@@68| T@U) ) (!  (=> (and (= (type $ly@@663) LayerTypeType) (= (type |node#0@@68|) DatatypeTypeType)) (= (KMBtreeModel.__default.MaxKey $ly@@663 |node#0@@68|) (KMBtreeModel.__default.MaxKey $LZ |node#0@@68|))) :qid |BtreeMod.261:12| :skolemid |12847| :pattern ( (KMBtreeModel.__default.MaxKey (AsFuelBottom $ly@@663) |node#0@@68|)) )))
(assert  (=> true (forall (($ly@@664 T@U) (|node#0@@69| T@U) ) (!  (=> (and (and (= (type $ly@@664) LayerTypeType) (= (type |node#0@@69|) DatatypeTypeType)) (or (|KMBtreeModel.__default.MaxKey#canCall| |node#0@@69|) (and ($Is |node#0@@69| Tclass.KMBtreeModel.Node) (and (KMBtreeModel.__default.WF ($LS $LZ) |node#0@@69|) (< 0 (|Map#Card| (KMBtreeModel.__default.Interpretation StartFuel_KMBtreeModel._default.Interpretation |node#0@@69|))))))) ($Is (KMBtreeModel.__default.MaxKey $ly@@664 |node#0@@69|) (TSeq Tclass.NativeTypes.byte))) :qid |BtreeMod.261:12| :skolemid |12848| :pattern ( (KMBtreeModel.__default.MaxKey $ly@@664 |node#0@@69|)) ))))
(assert (forall (($ly@@665 T@U) (|node#0@@70| T@U) ) (!  (=> (and (and (= (type $ly@@665) LayerTypeType) (= (type |node#0@@70|) DatatypeTypeType)) ($Is |node#0@@70| Tclass.KMBtreeModel.Node)) (and (=> (|KMBtreeModel.__default.MaxKey#requires| $ly@@665 |node#0@@70|) (and (KMBtreeModel.__default.WF ($LS $LZ) |node#0@@70|) (< 0 (|Map#Card| (KMBtreeModel.__default.Interpretation StartFuel_KMBtreeModel._default.Interpretation |node#0@@70|))))) (=> (and (KMBtreeModel.__default.WF ($LS $LZ) |node#0@@70|) (< 0 (|Map#Card| (KMBtreeModel.__default.Interpretation StartFuel_KMBtreeModel._default.Interpretation |node#0@@70|)))) (|KMBtreeModel.__default.MaxKey#requires| $ly@@665 |node#0@@70|)))) :qid |BtreeMod.261:12| :skolemid |12849| :pattern ( (|KMBtreeModel.__default.MaxKey#requires| $ly@@665 |node#0@@70|)) )))
(assert  (=> true (forall (($ly@@666 T@U) (|node#0@@71| T@U) ) (!  (=> (and (and (= (type $ly@@666) LayerTypeType) (= (type |node#0@@71|) DatatypeTypeType)) (or (|KMBtreeModel.__default.MaxKey#canCall| |node#0@@71|) (and ($Is |node#0@@71| Tclass.KMBtreeModel.Node) (and (KMBtreeModel.__default.WF ($LS $LZ) |node#0@@71|) (< 0 (|Map#Card| (KMBtreeModel.__default.Interpretation StartFuel_KMBtreeModel._default.Interpretation |node#0@@71|))))))) (and (and (=> (KMBtreeModel.Node.Leaf_q |node#0@@71|) (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.keys |node#0@@71|))) (=> (not (KMBtreeModel.Node.Leaf_q |node#0@@71|)) (and (|Sequences.__default.Last#canCall| Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children |node#0@@71|)) (|KMBtreeModel.__default.MaxKey#canCall| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children |node#0@@71|))))))) (= (KMBtreeModel.__default.MaxKey ($LS $ly@@666) |node#0@@71|) (ite (KMBtreeModel.Node.Leaf_q |node#0@@71|) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.keys |node#0@@71|))) (KMBtreeModel.__default.MaxKey $ly@@666 ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children |node#0@@71|)))))))) :qid |BtreeMod.261:12| :skolemid |12850| :pattern ( (KMBtreeModel.__default.MaxKey ($LS $ly@@666) |node#0@@71|)) ))))
(assert  (=> true (forall (($ly@@667 T@U) (|node#0@@72| T@U) ) (!  (=> (and (and (= (type $ly@@667) LayerTypeType) (= (type |node#0@@72|) DatatypeTypeType)) (or (|KMBtreeModel.__default.MaxKey#canCall| (Lit |node#0@@72|)) (and ($Is |node#0@@72| Tclass.KMBtreeModel.Node) (and (U_2_bool (Lit (bool_2_U (KMBtreeModel.__default.WF ($LS $LZ) (Lit |node#0@@72|))))) (< 0 (|Map#Card| (KMBtreeModel.__default.Interpretation StartFuel_KMBtreeModel._default.Interpretation (Lit |node#0@@72|)))))))) (and (and (=> (U_2_bool (Lit (bool_2_U (KMBtreeModel.Node.Leaf_q (Lit |node#0@@72|))))) (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit (KMBtreeModel.Node.keys (Lit |node#0@@72|))))) (=> (not (U_2_bool (Lit (bool_2_U (KMBtreeModel.Node.Leaf_q (Lit |node#0@@72|)))))) (and (|Sequences.__default.Last#canCall| Tclass.KMBtreeModel.Node (Lit (KMBtreeModel.Node.children (Lit |node#0@@72|)))) (|KMBtreeModel.__default.MaxKey#canCall| (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (Lit (KMBtreeModel.Node.children (Lit |node#0@@72|)))))))))) (= (KMBtreeModel.__default.MaxKey ($LS $ly@@667) (Lit |node#0@@72|)) (ite (KMBtreeModel.Node.Leaf_q (Lit |node#0@@72|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (KMBtreeModel.Node.keys (Lit |node#0@@72|))))) (KMBtreeModel.__default.MaxKey ($LS $ly@@667) (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (Lit (KMBtreeModel.Node.children (Lit |node#0@@72|))))))))))) :qid |BtreeMod.261:12| :weight 3 :skolemid |12851| :pattern ( (KMBtreeModel.__default.MaxKey ($LS $ly@@667) (Lit |node#0@@72|))) ))))
(assert  (=> true (forall ((|oldleaf#0| T@U) (|leftleaf#0| T@U) (|rightleaf#0| T@U) (|pivot#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type |oldleaf#0|) DatatypeTypeType) (= (type |leftleaf#0|) DatatypeTypeType)) (= (type |rightleaf#0|) DatatypeTypeType)) (= (type |pivot#0@@11|) (SeqType BoxType))) (or (|KMBtreeModel.__default.SplitLeaf#canCall| |oldleaf#0| |leftleaf#0| |rightleaf#0| |pivot#0@@11|) (and (and (and ($Is |oldleaf#0| Tclass.KMBtreeModel.Node) ($Is |leftleaf#0| Tclass.KMBtreeModel.Node)) ($Is |rightleaf#0| Tclass.KMBtreeModel.Node)) ($Is |pivot#0@@11| (TSeq Tclass.NativeTypes.byte))))) true) :qid |BtreeMod.312:23| :skolemid |12865| :pattern ( (KMBtreeModel.__default.SplitLeaf |oldleaf#0| |leftleaf#0| |rightleaf#0| |pivot#0@@11|)) ))))
(assert (forall ((|oldleaf#0@@0| T@U) (|leftleaf#0@@0| T@U) (|rightleaf#0@@0| T@U) (|pivot#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type |oldleaf#0@@0|) DatatypeTypeType) (= (type |leftleaf#0@@0|) DatatypeTypeType)) (= (type |rightleaf#0@@0|) DatatypeTypeType)) (= (type |pivot#0@@12|) (SeqType BoxType))) (and (and (and ($Is |oldleaf#0@@0| Tclass.KMBtreeModel.Node) ($Is |leftleaf#0@@0| Tclass.KMBtreeModel.Node)) ($Is |rightleaf#0@@0| Tclass.KMBtreeModel.Node)) ($Is |pivot#0@@12| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|KMBtreeModel.__default.SplitLeaf#requires| |oldleaf#0@@0| |leftleaf#0@@0| |rightleaf#0@@0| |pivot#0@@12|) true) (=> true (|KMBtreeModel.__default.SplitLeaf#requires| |oldleaf#0@@0| |leftleaf#0@@0| |rightleaf#0@@0| |pivot#0@@12|)))) :qid |BtreeMod.312:23| :skolemid |12866| :pattern ( (|KMBtreeModel.__default.SplitLeaf#requires| |oldleaf#0@@0| |leftleaf#0@@0| |rightleaf#0@@0| |pivot#0@@12|)) )))
(assert  (=> true (forall ((|oldleaf#0@@1| T@U) (|leftleaf#0@@1| T@U) (|rightleaf#0@@1| T@U) (|pivot#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type |oldleaf#0@@1|) DatatypeTypeType) (= (type |leftleaf#0@@1|) DatatypeTypeType)) (= (type |rightleaf#0@@1|) DatatypeTypeType)) (= (type |pivot#0@@13|) (SeqType BoxType))) (or (|KMBtreeModel.__default.SplitLeaf#canCall| |oldleaf#0@@1| |leftleaf#0@@1| |rightleaf#0@@1| |pivot#0@@13|) (and (and (and ($Is |oldleaf#0@@1| Tclass.KMBtreeModel.Node) ($Is |leftleaf#0@@1| Tclass.KMBtreeModel.Node)) ($Is |rightleaf#0@@1| Tclass.KMBtreeModel.Node)) ($Is |pivot#0@@13| (TSeq Tclass.NativeTypes.byte))))) (and (and (=> (|Seq#Equal| (KMBtreeModel.Node.values |oldleaf#0@@1|) (|Seq#Append| (KMBtreeModel.Node.values |leftleaf#0@@1|) (KMBtreeModel.Node.values |rightleaf#0@@1|))) (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.keys |leftleaf#0@@1|)) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.keys |leftleaf#0@@1|))) |pivot#0@@13|))) (=> (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.keys |leftleaf#0@@1|)) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.keys |leftleaf#0@@1|))) |pivot#0@@13|)) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.keys |leftleaf#0@@1|))) |pivot#0@@13|)) (|Lexicographic__Byte__Order.__default.lte#canCall| |pivot#0@@13| ($Unbox (SeqType BoxType) (|Seq#Index| (KMBtreeModel.Node.keys |rightleaf#0@@1|) (LitInt 0)))))) (and (=> (KMBtreeModel.__default.SplitLeaf |oldleaf#0@@1| |leftleaf#0@@1| |rightleaf#0@@1| |pivot#0@@13|) (and (and (and (and (and (and (and (and (KMBtreeModel.Node.Leaf_q |oldleaf#0@@1|) (KMBtreeModel.Node.Leaf_q |leftleaf#0@@1|)) (KMBtreeModel.Node.Leaf_q |rightleaf#0@@1|)) (and (< 0 (|Seq#Length| (KMBtreeModel.Node.keys |leftleaf#0@@1|))) (= (|Seq#Length| (KMBtreeModel.Node.keys |leftleaf#0@@1|)) (|Seq#Length| (KMBtreeModel.Node.values |leftleaf#0@@1|))))) (and (< 0 (|Seq#Length| (KMBtreeModel.Node.keys |rightleaf#0@@1|))) (= (|Seq#Length| (KMBtreeModel.Node.keys |rightleaf#0@@1|)) (|Seq#Length| (KMBtreeModel.Node.values |rightleaf#0@@1|))))) (|Seq#Equal| (KMBtreeModel.Node.keys |oldleaf#0@@1|) (|Seq#Append| (KMBtreeModel.Node.keys |leftleaf#0@@1|) (KMBtreeModel.Node.keys |rightleaf#0@@1|)))) (|Seq#Equal| (KMBtreeModel.Node.values |oldleaf#0@@1|) (|Seq#Append| (KMBtreeModel.Node.values |leftleaf#0@@1|) (KMBtreeModel.Node.values |rightleaf#0@@1|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.keys |leftleaf#0@@1|))) |pivot#0@@13|)) (Lexicographic__Byte__Order.__default.lte |pivot#0@@13| ($Unbox (SeqType BoxType) (|Seq#Index| (KMBtreeModel.Node.keys |rightleaf#0@@1|) (LitInt 0)))))) (=> (and (and (and (and (and (and (and (and (KMBtreeModel.Node.Leaf_q |oldleaf#0@@1|) (KMBtreeModel.Node.Leaf_q |leftleaf#0@@1|)) (KMBtreeModel.Node.Leaf_q |rightleaf#0@@1|)) (and (< 0 (|Seq#Length| (KMBtreeModel.Node.keys |leftleaf#0@@1|))) (= (|Seq#Length| (KMBtreeModel.Node.keys |leftleaf#0@@1|)) (|Seq#Length| (KMBtreeModel.Node.values |leftleaf#0@@1|))))) (and (< 0 (|Seq#Length| (KMBtreeModel.Node.keys |rightleaf#0@@1|))) (= (|Seq#Length| (KMBtreeModel.Node.keys |rightleaf#0@@1|)) (|Seq#Length| (KMBtreeModel.Node.values |rightleaf#0@@1|))))) (|Seq#Equal| (KMBtreeModel.Node.keys |oldleaf#0@@1|) (|Seq#Append| (KMBtreeModel.Node.keys |leftleaf#0@@1|) (KMBtreeModel.Node.keys |rightleaf#0@@1|)))) (|Seq#Equal| (KMBtreeModel.Node.values |oldleaf#0@@1|) (|Seq#Append| (KMBtreeModel.Node.values |leftleaf#0@@1|) (KMBtreeModel.Node.values |rightleaf#0@@1|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.keys |leftleaf#0@@1|))) |pivot#0@@13|)) (Lexicographic__Byte__Order.__default.lte |pivot#0@@13| ($Unbox (SeqType BoxType) (|Seq#Index| (KMBtreeModel.Node.keys |rightleaf#0@@1|) (LitInt 0))))) (KMBtreeModel.__default.SplitLeaf |oldleaf#0@@1| |leftleaf#0@@1| |rightleaf#0@@1| |pivot#0@@13|))))) :qid |BtreeMod.312:23| :skolemid |12867| :pattern ( (KMBtreeModel.__default.SplitLeaf |oldleaf#0@@1| |leftleaf#0@@1| |rightleaf#0@@1| |pivot#0@@13|)) ))))
(assert  (=> true (forall ((|oldleaf#0@@2| T@U) (|leftleaf#0@@2| T@U) (|rightleaf#0@@2| T@U) (|pivot#0@@14| T@U) ) (!  (=> (and (and (and (and (= (type |oldleaf#0@@2|) DatatypeTypeType) (= (type |leftleaf#0@@2|) DatatypeTypeType)) (= (type |rightleaf#0@@2|) DatatypeTypeType)) (= (type |pivot#0@@14|) (SeqType BoxType))) (or (|KMBtreeModel.__default.SplitLeaf#canCall| (Lit |oldleaf#0@@2|) (Lit |leftleaf#0@@2|) (Lit |rightleaf#0@@2|) (Lit |pivot#0@@14|)) (and (and (and ($Is |oldleaf#0@@2| Tclass.KMBtreeModel.Node) ($Is |leftleaf#0@@2| Tclass.KMBtreeModel.Node)) ($Is |rightleaf#0@@2| Tclass.KMBtreeModel.Node)) ($Is |pivot#0@@14| (TSeq Tclass.NativeTypes.byte))))) (and (and (=> (|Seq#Equal| (KMBtreeModel.Node.values (Lit |oldleaf#0@@2|)) (|Seq#Append| (KMBtreeModel.Node.values (Lit |leftleaf#0@@2|)) (KMBtreeModel.Node.values (Lit |rightleaf#0@@2|)))) (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit (KMBtreeModel.Node.keys (Lit |leftleaf#0@@2|)))) (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (KMBtreeModel.Node.keys (Lit |leftleaf#0@@2|)))))) (Lit |pivot#0@@14|)))) (=> (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit (KMBtreeModel.Node.keys (Lit |leftleaf#0@@2|)))) (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (KMBtreeModel.Node.keys (Lit |leftleaf#0@@2|)))))) (Lit |pivot#0@@14|))) (U_2_bool (Lit (bool_2_U (Lexicographic__Byte__Order.__default.lt (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (KMBtreeModel.Node.keys (Lit |leftleaf#0@@2|)))))) (Lit |pivot#0@@14|)))))) (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |pivot#0@@14|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (KMBtreeModel.Node.keys (Lit |rightleaf#0@@2|))) (LitInt 0)))))) (and (=> (KMBtreeModel.__default.SplitLeaf (Lit |oldleaf#0@@2|) (Lit |leftleaf#0@@2|) (Lit |rightleaf#0@@2|) (Lit |pivot#0@@14|)) (and (and (and (and (and (and (and (and (KMBtreeModel.Node.Leaf_q (Lit |oldleaf#0@@2|)) (KMBtreeModel.Node.Leaf_q (Lit |leftleaf#0@@2|))) (KMBtreeModel.Node.Leaf_q (Lit |rightleaf#0@@2|))) (and (< 0 (|Seq#Length| (Lit (KMBtreeModel.Node.keys (Lit |leftleaf#0@@2|))))) (= (|Seq#Length| (Lit (KMBtreeModel.Node.keys (Lit |leftleaf#0@@2|)))) (|Seq#Length| (Lit (KMBtreeModel.Node.values (Lit |leftleaf#0@@2|))))))) (and (< 0 (|Seq#Length| (Lit (KMBtreeModel.Node.keys (Lit |rightleaf#0@@2|))))) (= (|Seq#Length| (Lit (KMBtreeModel.Node.keys (Lit |rightleaf#0@@2|)))) (|Seq#Length| (Lit (KMBtreeModel.Node.values (Lit |rightleaf#0@@2|))))))) (|Seq#Equal| (KMBtreeModel.Node.keys (Lit |oldleaf#0@@2|)) (|Seq#Append| (KMBtreeModel.Node.keys (Lit |leftleaf#0@@2|)) (KMBtreeModel.Node.keys (Lit |rightleaf#0@@2|))))) (|Seq#Equal| (KMBtreeModel.Node.values (Lit |oldleaf#0@@2|)) (|Seq#Append| (KMBtreeModel.Node.values (Lit |leftleaf#0@@2|)) (KMBtreeModel.Node.values (Lit |rightleaf#0@@2|))))) (Lexicographic__Byte__Order.__default.lt (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (KMBtreeModel.Node.keys (Lit |leftleaf#0@@2|)))))) (Lit |pivot#0@@14|))) (Lexicographic__Byte__Order.__default.lte (Lit |pivot#0@@14|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (KMBtreeModel.Node.keys (Lit |rightleaf#0@@2|))) (LitInt 0)))))) (=> (and (and (and (and (and (and (and (and (KMBtreeModel.Node.Leaf_q (Lit |oldleaf#0@@2|)) (KMBtreeModel.Node.Leaf_q (Lit |leftleaf#0@@2|))) (KMBtreeModel.Node.Leaf_q (Lit |rightleaf#0@@2|))) (and (< 0 (|Seq#Length| (Lit (KMBtreeModel.Node.keys (Lit |leftleaf#0@@2|))))) (= (|Seq#Length| (Lit (KMBtreeModel.Node.keys (Lit |leftleaf#0@@2|)))) (|Seq#Length| (Lit (KMBtreeModel.Node.values (Lit |leftleaf#0@@2|))))))) (and (< 0 (|Seq#Length| (Lit (KMBtreeModel.Node.keys (Lit |rightleaf#0@@2|))))) (= (|Seq#Length| (Lit (KMBtreeModel.Node.keys (Lit |rightleaf#0@@2|)))) (|Seq#Length| (Lit (KMBtreeModel.Node.values (Lit |rightleaf#0@@2|))))))) (|Seq#Equal| (KMBtreeModel.Node.keys (Lit |oldleaf#0@@2|)) (|Seq#Append| (KMBtreeModel.Node.keys (Lit |leftleaf#0@@2|)) (KMBtreeModel.Node.keys (Lit |rightleaf#0@@2|))))) (|Seq#Equal| (KMBtreeModel.Node.values (Lit |oldleaf#0@@2|)) (|Seq#Append| (KMBtreeModel.Node.values (Lit |leftleaf#0@@2|)) (KMBtreeModel.Node.values (Lit |rightleaf#0@@2|))))) (Lexicographic__Byte__Order.__default.lt (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (KMBtreeModel.Node.keys (Lit |leftleaf#0@@2|)))))) (Lit |pivot#0@@14|))) (Lexicographic__Byte__Order.__default.lte (Lit |pivot#0@@14|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (KMBtreeModel.Node.keys (Lit |rightleaf#0@@2|))) (LitInt 0))))) (KMBtreeModel.__default.SplitLeaf (Lit |oldleaf#0@@2|) (Lit |leftleaf#0@@2|) (Lit |rightleaf#0@@2|) (Lit |pivot#0@@14|)))))) :qid |BtreeMod.312:23| :weight 3 :skolemid |12868| :pattern ( (KMBtreeModel.__default.SplitLeaf (Lit |oldleaf#0@@2|) (Lit |leftleaf#0@@2|) (Lit |rightleaf#0@@2|) (Lit |pivot#0@@14|))) ))))
(assert (forall ((arg0@@367 T@U) (arg1@@225 Int) (arg2@@134 Int) ) (! (= (type (KMBtreeModel.__default.SubIndex arg0@@367 arg1@@225 arg2@@134)) DatatypeTypeType) :qid |funType:KMBtreeModel.__default.SubIndex| :pattern ( (KMBtreeModel.__default.SubIndex arg0@@367 arg1@@225 arg2@@134)) )))
(assert  (=> true (forall ((|node#0@@73| T@U) (|from#0@@3| Int) (|to#0@@3| Int) ) (!  (=> (and (= (type |node#0@@73|) DatatypeTypeType) (or (|KMBtreeModel.__default.SubIndex#canCall| |node#0@@73| |from#0@@3| |to#0@@3|) (and ($Is |node#0@@73| Tclass.KMBtreeModel.Node) (and (and (KMBtreeModel.Node.Index_q |node#0@@73|) (= (|Seq#Length| (KMBtreeModel.Node.children |node#0@@73|)) (+ (|Seq#Length| (KMBtreeModel.Node.pivots |node#0@@73|)) 1))) (and (and (<= (LitInt 0) |from#0@@3|) (< |from#0@@3| |to#0@@3|)) (<= |to#0@@3| (|Seq#Length| (KMBtreeModel.Node.children |node#0@@73|)))))))) ($Is (KMBtreeModel.__default.SubIndex |node#0@@73| |from#0@@3| |to#0@@3|) Tclass.KMBtreeModel.Node)) :qid |BtreeMod.400:21| :skolemid |12869| :pattern ( (KMBtreeModel.__default.SubIndex |node#0@@73| |from#0@@3| |to#0@@3|)) ))))
(assert (forall ((|node#0@@74| T@U) (|from#0@@4| Int) (|to#0@@4| Int) ) (!  (=> (and (= (type |node#0@@74|) DatatypeTypeType) ($Is |node#0@@74| Tclass.KMBtreeModel.Node)) (and (=> (|KMBtreeModel.__default.SubIndex#requires| |node#0@@74| |from#0@@4| |to#0@@4|) (and (and (KMBtreeModel.Node.Index_q |node#0@@74|) (= (|Seq#Length| (KMBtreeModel.Node.children |node#0@@74|)) (+ (|Seq#Length| (KMBtreeModel.Node.pivots |node#0@@74|)) 1))) (and (and (<= (LitInt 0) |from#0@@4|) (< |from#0@@4| |to#0@@4|)) (<= |to#0@@4| (|Seq#Length| (KMBtreeModel.Node.children |node#0@@74|)))))) (=> (and (and (KMBtreeModel.Node.Index_q |node#0@@74|) (= (|Seq#Length| (KMBtreeModel.Node.children |node#0@@74|)) (+ (|Seq#Length| (KMBtreeModel.Node.pivots |node#0@@74|)) 1))) (and (and (<= (LitInt 0) |from#0@@4|) (< |from#0@@4| |to#0@@4|)) (<= |to#0@@4| (|Seq#Length| (KMBtreeModel.Node.children |node#0@@74|))))) (|KMBtreeModel.__default.SubIndex#requires| |node#0@@74| |from#0@@4| |to#0@@4|)))) :qid |BtreeMod.400:21| :skolemid |12870| :pattern ( (|KMBtreeModel.__default.SubIndex#requires| |node#0@@74| |from#0@@4| |to#0@@4|)) )))
(assert  (=> true (forall ((|node#0@@75| T@U) (|from#0@@5| Int) (|to#0@@5| Int) ) (!  (=> (and (= (type |node#0@@75|) DatatypeTypeType) (or (|KMBtreeModel.__default.SubIndex#canCall| |node#0@@75| |from#0@@5| |to#0@@5|) (and ($Is |node#0@@75| Tclass.KMBtreeModel.Node) (and (and (KMBtreeModel.Node.Index_q |node#0@@75|) (= (|Seq#Length| (KMBtreeModel.Node.children |node#0@@75|)) (+ (|Seq#Length| (KMBtreeModel.Node.pivots |node#0@@75|)) 1))) (and (and (<= (LitInt 0) |from#0@@5|) (< |from#0@@5| |to#0@@5|)) (<= |to#0@@5| (|Seq#Length| (KMBtreeModel.Node.children |node#0@@75|)))))))) (= (KMBtreeModel.__default.SubIndex |node#0@@75| |from#0@@5| |to#0@@5|) (|#KMBtreeModel.Node.Index| (|Seq#Drop| (|Seq#Take| (KMBtreeModel.Node.pivots |node#0@@75|) (- |to#0@@5| 1)) |from#0@@5|) (|Seq#Drop| (|Seq#Take| (KMBtreeModel.Node.children |node#0@@75|) |to#0@@5|) |from#0@@5|)))) :qid |BtreeMod.400:21| :skolemid |12871| :pattern ( (KMBtreeModel.__default.SubIndex |node#0@@75| |from#0@@5| |to#0@@5|)) ))))
(assert  (=> true (forall ((|node#0@@76| T@U) (|from#0@@6| Int) (|to#0@@6| Int) ) (!  (=> (and (= (type |node#0@@76|) DatatypeTypeType) (or (|KMBtreeModel.__default.SubIndex#canCall| (Lit |node#0@@76|) (LitInt |from#0@@6|) (LitInt |to#0@@6|)) (and ($Is |node#0@@76| Tclass.KMBtreeModel.Node) (and (and (U_2_bool (Lit (bool_2_U (KMBtreeModel.Node.Index_q (Lit |node#0@@76|))))) (= (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |node#0@@76|)))) (+ (|Seq#Length| (Lit (KMBtreeModel.Node.pivots (Lit |node#0@@76|)))) 1))) (and (and (<= (LitInt 0) (LitInt |from#0@@6|)) (< |from#0@@6| |to#0@@6|)) (<= (LitInt |to#0@@6|) (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |node#0@@76|)))))))))) (= (KMBtreeModel.__default.SubIndex (Lit |node#0@@76|) (LitInt |from#0@@6|) (LitInt |to#0@@6|)) (Lit (|#KMBtreeModel.Node.Index| (Lit (|Seq#Drop| (|Seq#Take| (Lit (KMBtreeModel.Node.pivots (Lit |node#0@@76|))) (LitInt (- |to#0@@6| 1))) (LitInt |from#0@@6|))) (Lit (|Seq#Drop| (|Seq#Take| (Lit (KMBtreeModel.Node.children (Lit |node#0@@76|))) (LitInt |to#0@@6|)) (LitInt |from#0@@6|))))))) :qid |BtreeMod.400:21| :weight 3 :skolemid |12872| :pattern ( (KMBtreeModel.__default.SubIndex (Lit |node#0@@76|) (LitInt |from#0@@6|) (LitInt |to#0@@6|))) ))))
(assert  (=> true (forall ((|oldindex#0| T@U) (|leftindex#0| T@U) (|rightindex#0| T@U) (|pivot#0@@15| T@U) ) (!  (=> (and (and (and (and (= (type |oldindex#0|) DatatypeTypeType) (= (type |leftindex#0|) DatatypeTypeType)) (= (type |rightindex#0|) DatatypeTypeType)) (= (type |pivot#0@@15|) (SeqType BoxType))) (or (|KMBtreeModel.__default.SplitIndex#canCall| |oldindex#0| |leftindex#0| |rightindex#0| |pivot#0@@15|) (and (and (and ($Is |oldindex#0| Tclass.KMBtreeModel.Node) ($Is |leftindex#0| Tclass.KMBtreeModel.Node)) ($Is |rightindex#0| Tclass.KMBtreeModel.Node)) ($Is |pivot#0@@15| (TSeq Tclass.NativeTypes.byte))))) true) :qid |BtreeMod.428:24| :skolemid |12873| :pattern ( (KMBtreeModel.__default.SplitIndex |oldindex#0| |leftindex#0| |rightindex#0| |pivot#0@@15|)) ))))
(assert (forall ((|oldindex#0@@0| T@U) (|leftindex#0@@0| T@U) (|rightindex#0@@0| T@U) (|pivot#0@@16| T@U) ) (!  (=> (and (and (and (and (= (type |oldindex#0@@0|) DatatypeTypeType) (= (type |leftindex#0@@0|) DatatypeTypeType)) (= (type |rightindex#0@@0|) DatatypeTypeType)) (= (type |pivot#0@@16|) (SeqType BoxType))) (and (and (and ($Is |oldindex#0@@0| Tclass.KMBtreeModel.Node) ($Is |leftindex#0@@0| Tclass.KMBtreeModel.Node)) ($Is |rightindex#0@@0| Tclass.KMBtreeModel.Node)) ($Is |pivot#0@@16| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|KMBtreeModel.__default.SplitIndex#requires| |oldindex#0@@0| |leftindex#0@@0| |rightindex#0@@0| |pivot#0@@16|) true) (=> true (|KMBtreeModel.__default.SplitIndex#requires| |oldindex#0@@0| |leftindex#0@@0| |rightindex#0@@0| |pivot#0@@16|)))) :qid |BtreeMod.428:24| :skolemid |12874| :pattern ( (|KMBtreeModel.__default.SplitIndex#requires| |oldindex#0@@0| |leftindex#0@@0| |rightindex#0@@0| |pivot#0@@16|)) )))
(assert  (=> true (forall ((|oldindex#0@@1| T@U) (|leftindex#0@@1| T@U) (|rightindex#0@@1| T@U) (|pivot#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type |oldindex#0@@1|) DatatypeTypeType) (= (type |leftindex#0@@1|) DatatypeTypeType)) (= (type |rightindex#0@@1|) DatatypeTypeType)) (= (type |pivot#0@@17|) (SeqType BoxType))) (or (|KMBtreeModel.__default.SplitIndex#canCall| |oldindex#0@@1| |leftindex#0@@1| |rightindex#0@@1| |pivot#0@@17|) (and (and (and ($Is |oldindex#0@@1| Tclass.KMBtreeModel.Node) ($Is |leftindex#0@@1| Tclass.KMBtreeModel.Node)) ($Is |rightindex#0@@1| Tclass.KMBtreeModel.Node)) ($Is |pivot#0@@17| (TSeq Tclass.NativeTypes.byte))))) (and (and (and (and (=> (= (|Seq#Length| (KMBtreeModel.Node.children |oldindex#0@@1|)) (+ (|Seq#Length| (KMBtreeModel.Node.pivots |oldindex#0@@1|)) 1)) (and (and (|$IsA#KMBtreeModel.Node| |leftindex#0@@1|) (|$IsA#KMBtreeModel.Node| (KMBtreeModel.__default.SubIndex |oldindex#0@@1| (LitInt 0) (|Seq#Length| (KMBtreeModel.Node.children |leftindex#0@@1|))))) (|KMBtreeModel.__default.SubIndex#canCall| |oldindex#0@@1| (LitInt 0) (|Seq#Length| (KMBtreeModel.Node.children |leftindex#0@@1|))))) (=> (and (and (and (|$IsA#KMBtreeModel.Node| |leftindex#0@@1|) (|$IsA#KMBtreeModel.Node| (KMBtreeModel.__default.SubIndex |oldindex#0@@1| (LitInt 0) (|Seq#Length| (KMBtreeModel.Node.children |leftindex#0@@1|))))) (|KMBtreeModel.__default.SubIndex#canCall| |oldindex#0@@1| (LitInt 0) (|Seq#Length| (KMBtreeModel.Node.children |leftindex#0@@1|)))) (|KMBtreeModel.Node#Equal| |leftindex#0@@1| (KMBtreeModel.__default.SubIndex |oldindex#0@@1| (LitInt 0) (|Seq#Length| (KMBtreeModel.Node.children |leftindex#0@@1|))))) (and (and (|$IsA#KMBtreeModel.Node| |rightindex#0@@1|) (|$IsA#KMBtreeModel.Node| (KMBtreeModel.__default.SubIndex |oldindex#0@@1| (|Seq#Length| (KMBtreeModel.Node.children |leftindex#0@@1|)) (|Seq#Length| (KMBtreeModel.Node.children |oldindex#0@@1|))))) (|KMBtreeModel.__default.SubIndex#canCall| |oldindex#0@@1| (|Seq#Length| (KMBtreeModel.Node.children |leftindex#0@@1|)) (|Seq#Length| (KMBtreeModel.Node.children |oldindex#0@@1|)))))) (=> (and (and (and (|$IsA#KMBtreeModel.Node| |rightindex#0@@1|) (|$IsA#KMBtreeModel.Node| (KMBtreeModel.__default.SubIndex |oldindex#0@@1| (|Seq#Length| (KMBtreeModel.Node.children |leftindex#0@@1|)) (|Seq#Length| (KMBtreeModel.Node.children |oldindex#0@@1|))))) (|KMBtreeModel.__default.SubIndex#canCall| |oldindex#0@@1| (|Seq#Length| (KMBtreeModel.Node.children |leftindex#0@@1|)) (|Seq#Length| (KMBtreeModel.Node.children |oldindex#0@@1|)))) (|KMBtreeModel.Node#Equal| |rightindex#0@@1| (KMBtreeModel.__default.SubIndex |oldindex#0@@1| (|Seq#Length| (KMBtreeModel.Node.children |leftindex#0@@1|)) (|Seq#Length| (KMBtreeModel.Node.children |oldindex#0@@1|))))) (forall ((|key#8| T@U) ) (!  (=> (and (= (type |key#8|) (SeqType BoxType)) ($Is |key#8| (TSeq Tclass.NativeTypes.byte))) (and (and (|Sequences.__default.Last#canCall| Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children |leftindex#0@@1|)) (|KMBtreeModel.__default.AllKeys#canCall| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children |leftindex#0@@1|))))) (=> (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children |leftindex#0@@1|)))) ($Box |key#8|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |key#8| |pivot#0@@17|)))) :qid |BtreeMod.437:16| :skolemid |12875| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#8| |pivot#0@@17|)) :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children |leftindex#0@@1|)))) ($Box |key#8|))) )))) (=> (and (forall ((|key#8@@0| T@U) ) (!  (=> (and (= (type |key#8@@0|) (SeqType BoxType)) ($Is |key#8@@0| (TSeq Tclass.NativeTypes.byte))) (and (and (|Sequences.__default.Last#canCall| Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children |leftindex#0@@1|)) (|KMBtreeModel.__default.AllKeys#canCall| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children |leftindex#0@@1|))))) (=> (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children |leftindex#0@@1|)))) ($Box |key#8@@0|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |key#8@@0| |pivot#0@@17|)))) :qid |BtreeMod.437:16| :skolemid |12877| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#8@@0| |pivot#0@@17|)) :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children |leftindex#0@@1|)))) ($Box |key#8@@0|))) )) (forall ((|key#8@@1| T@U) ) (!  (=> (and (and (= (type |key#8@@1|) (SeqType BoxType)) ($Is |key#8@@1| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children |leftindex#0@@1|)))) ($Box |key#8@@1|)))) (Lexicographic__Byte__Order.__default.lt |key#8@@1| |pivot#0@@17|)) :qid |BtreeMod.437:16| :skolemid |12878| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#8@@1| |pivot#0@@17|)) :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children |leftindex#0@@1|)))) ($Box |key#8@@1|))) ))) (forall ((|key#9| T@U) ) (!  (=> (and (= (type |key#9|) (SeqType BoxType)) ($Is |key#9| (TSeq Tclass.NativeTypes.byte))) (and (|KMBtreeModel.__default.AllKeys#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |rightindex#0@@1|) (LitInt 0)))) (=> (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |rightindex#0@@1|) (LitInt 0)))) ($Box |key#9|))) (|Lexicographic__Byte__Order.__default.lte#canCall| |pivot#0@@17| |key#9|)))) :qid |BtreeMod.438:16| :skolemid |12876| :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@@17| |key#9|)) :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |rightindex#0@@1|) 0))) ($Box |key#9|))) )))) (and (=> (KMBtreeModel.__default.SplitIndex |oldindex#0@@1| |leftindex#0@@1| |rightindex#0@@1| |pivot#0@@17|) (and (and (and (and (and (and (and (and (and (KMBtreeModel.Node.Index_q |oldindex#0@@1|) (KMBtreeModel.Node.Index_q |leftindex#0@@1|)) (KMBtreeModel.Node.Index_q |rightindex#0@@1|)) (and (< 0 (|Seq#Length| (KMBtreeModel.Node.children |leftindex#0@@1|))) (< (|Seq#Length| (KMBtreeModel.Node.children |leftindex#0@@1|)) (|Seq#Length| (KMBtreeModel.Node.children |oldindex#0@@1|))))) (= (|Seq#Length| (KMBtreeModel.Node.children |oldindex#0@@1|)) (+ (|Seq#Length| (KMBtreeModel.Node.pivots |oldindex#0@@1|)) 1))) (|KMBtreeModel.Node#Equal| |leftindex#0@@1| (KMBtreeModel.__default.SubIndex |oldindex#0@@1| (LitInt 0) (|Seq#Length| (KMBtreeModel.Node.children |leftindex#0@@1|))))) (|KMBtreeModel.Node#Equal| |rightindex#0@@1| (KMBtreeModel.__default.SubIndex |oldindex#0@@1| (|Seq#Length| (KMBtreeModel.Node.children |leftindex#0@@1|)) (|Seq#Length| (KMBtreeModel.Node.children |oldindex#0@@1|))))) (forall ((|key#8@@2| T@U) ) (!  (=> (and (and (= (type |key#8@@2|) (SeqType BoxType)) ($Is |key#8@@2| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children |leftindex#0@@1|)))) ($Box |key#8@@2|)))) (Lexicographic__Byte__Order.__default.lt |key#8@@2| |pivot#0@@17|)) :qid |BtreeMod.437:16| :skolemid |12881| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#8@@2| |pivot#0@@17|)) :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children |leftindex#0@@1|)))) ($Box |key#8@@2|))) ))) (forall ((|key#9@@0| T@U) ) (!  (=> (and (and (= (type |key#9@@0|) (SeqType BoxType)) ($Is |key#9@@0| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |rightindex#0@@1|) (LitInt 0)))) ($Box |key#9@@0|)))) (Lexicographic__Byte__Order.__default.lte |pivot#0@@17| |key#9@@0|)) :qid |BtreeMod.438:16| :skolemid |12882| :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@@17| |key#9@@0|)) :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |rightindex#0@@1|) 0))) ($Box |key#9@@0|))) ))) (|Seq#Equal| |pivot#0@@17| ($Unbox (SeqType BoxType) (|Seq#Index| (KMBtreeModel.Node.pivots |oldindex#0@@1|) (|Seq#Length| (KMBtreeModel.Node.pivots |leftindex#0@@1|))))))) (=> (and (and (and (and (and (and (and (and (and (KMBtreeModel.Node.Index_q |oldindex#0@@1|) (KMBtreeModel.Node.Index_q |leftindex#0@@1|)) (KMBtreeModel.Node.Index_q |rightindex#0@@1|)) (and (< 0 (|Seq#Length| (KMBtreeModel.Node.children |leftindex#0@@1|))) (< (|Seq#Length| (KMBtreeModel.Node.children |leftindex#0@@1|)) (|Seq#Length| (KMBtreeModel.Node.children |oldindex#0@@1|))))) (= (|Seq#Length| (KMBtreeModel.Node.children |oldindex#0@@1|)) (+ (|Seq#Length| (KMBtreeModel.Node.pivots |oldindex#0@@1|)) 1))) (|KMBtreeModel.Node#Equal| |leftindex#0@@1| (KMBtreeModel.__default.SubIndex |oldindex#0@@1| (LitInt 0) (|Seq#Length| (KMBtreeModel.Node.children |leftindex#0@@1|))))) (|KMBtreeModel.Node#Equal| |rightindex#0@@1| (KMBtreeModel.__default.SubIndex |oldindex#0@@1| (|Seq#Length| (KMBtreeModel.Node.children |leftindex#0@@1|)) (|Seq#Length| (KMBtreeModel.Node.children |oldindex#0@@1|))))) (forall ((|key#8@@3| T@U) ) (!  (=> (and (and (= (type |key#8@@3|) (SeqType BoxType)) ($Is |key#8@@3| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children |leftindex#0@@1|)))) ($Box |key#8@@3|)))) (Lexicographic__Byte__Order.__default.lt |key#8@@3| |pivot#0@@17|)) :qid |BtreeMod.437:16| :skolemid |12881| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#8@@3| |pivot#0@@17|)) :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children |leftindex#0@@1|)))) ($Box |key#8@@3|))) ))) (forall ((|key#9@@1| T@U) ) (!  (=> (and (and (= (type |key#9@@1|) (SeqType BoxType)) ($Is |key#9@@1| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |rightindex#0@@1|) (LitInt 0)))) ($Box |key#9@@1|)))) (Lexicographic__Byte__Order.__default.lte |pivot#0@@17| |key#9@@1|)) :qid |BtreeMod.438:16| :skolemid |12882| :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@@17| |key#9@@1|)) :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |rightindex#0@@1|) 0))) ($Box |key#9@@1|))) ))) (|Seq#Equal| |pivot#0@@17| ($Unbox (SeqType BoxType) (|Seq#Index| (KMBtreeModel.Node.pivots |oldindex#0@@1|) (|Seq#Length| (KMBtreeModel.Node.pivots |leftindex#0@@1|)))))) (KMBtreeModel.__default.SplitIndex |oldindex#0@@1| |leftindex#0@@1| |rightindex#0@@1| |pivot#0@@17|))))) :qid |BtreeMod.428:24| :skolemid |12883| :pattern ( (KMBtreeModel.__default.SplitIndex |oldindex#0@@1| |leftindex#0@@1| |rightindex#0@@1| |pivot#0@@17|)) ))))
(assert  (=> true (forall ((|oldindex#0@@2| T@U) (|leftindex#0@@2| T@U) (|rightindex#0@@2| T@U) (|pivot#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type |oldindex#0@@2|) DatatypeTypeType) (= (type |leftindex#0@@2|) DatatypeTypeType)) (= (type |rightindex#0@@2|) DatatypeTypeType)) (= (type |pivot#0@@18|) (SeqType BoxType))) (or (|KMBtreeModel.__default.SplitIndex#canCall| (Lit |oldindex#0@@2|) (Lit |leftindex#0@@2|) (Lit |rightindex#0@@2|) (Lit |pivot#0@@18|)) (and (and (and ($Is |oldindex#0@@2| Tclass.KMBtreeModel.Node) ($Is |leftindex#0@@2| Tclass.KMBtreeModel.Node)) ($Is |rightindex#0@@2| Tclass.KMBtreeModel.Node)) ($Is |pivot#0@@18| (TSeq Tclass.NativeTypes.byte))))) (and (and (and (and (=> (= (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |oldindex#0@@2|)))) (+ (|Seq#Length| (Lit (KMBtreeModel.Node.pivots (Lit |oldindex#0@@2|)))) 1)) (and (and (|$IsA#KMBtreeModel.Node| (Lit |leftindex#0@@2|)) (|$IsA#KMBtreeModel.Node| (KMBtreeModel.__default.SubIndex (Lit |oldindex#0@@2|) (LitInt 0) (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |leftindex#0@@2|))))))) (|KMBtreeModel.__default.SubIndex#canCall| (Lit |oldindex#0@@2|) (LitInt 0) (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |leftindex#0@@2|))))))) (=> (and (and (and (|$IsA#KMBtreeModel.Node| (Lit |leftindex#0@@2|)) (|$IsA#KMBtreeModel.Node| (KMBtreeModel.__default.SubIndex (Lit |oldindex#0@@2|) (LitInt 0) (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |leftindex#0@@2|))))))) (|KMBtreeModel.__default.SubIndex#canCall| (Lit |oldindex#0@@2|) (LitInt 0) (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |leftindex#0@@2|)))))) (|KMBtreeModel.Node#Equal| |leftindex#0@@2| (KMBtreeModel.__default.SubIndex (Lit |oldindex#0@@2|) (LitInt 0) (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |leftindex#0@@2|))))))) (and (and (|$IsA#KMBtreeModel.Node| (Lit |rightindex#0@@2|)) (|$IsA#KMBtreeModel.Node| (KMBtreeModel.__default.SubIndex (Lit |oldindex#0@@2|) (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |leftindex#0@@2|)))) (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |oldindex#0@@2|))))))) (|KMBtreeModel.__default.SubIndex#canCall| (Lit |oldindex#0@@2|) (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |leftindex#0@@2|)))) (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |oldindex#0@@2|)))))))) (=> (and (and (and (|$IsA#KMBtreeModel.Node| (Lit |rightindex#0@@2|)) (|$IsA#KMBtreeModel.Node| (KMBtreeModel.__default.SubIndex (Lit |oldindex#0@@2|) (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |leftindex#0@@2|)))) (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |oldindex#0@@2|))))))) (|KMBtreeModel.__default.SubIndex#canCall| (Lit |oldindex#0@@2|) (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |leftindex#0@@2|)))) (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |oldindex#0@@2|)))))) (|KMBtreeModel.Node#Equal| |rightindex#0@@2| (KMBtreeModel.__default.SubIndex (Lit |oldindex#0@@2|) (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |leftindex#0@@2|)))) (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |oldindex#0@@2|))))))) (forall ((|key#10| T@U) ) (!  (=> (and (= (type |key#10|) (SeqType BoxType)) ($Is |key#10| (TSeq Tclass.NativeTypes.byte))) (and (and (|Sequences.__default.Last#canCall| Tclass.KMBtreeModel.Node (Lit (KMBtreeModel.Node.children (Lit |leftindex#0@@2|)))) (|KMBtreeModel.__default.AllKeys#canCall| (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (Lit (KMBtreeModel.Node.children (Lit |leftindex#0@@2|)))))))) (=> (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (Lit (KMBtreeModel.Node.children (Lit |leftindex#0@@2|))))))) ($Box |key#10|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |key#10| (Lit |pivot#0@@18|))))) :qid |BtreeMod.437:16| :skolemid |12884| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#10| |pivot#0@@18|)) :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children |leftindex#0@@2|)))) ($Box |key#10|))) )))) (=> (and (forall ((|key#10@@0| T@U) ) (!  (=> (and (= (type |key#10@@0|) (SeqType BoxType)) ($Is |key#10@@0| (TSeq Tclass.NativeTypes.byte))) (and (and (|Sequences.__default.Last#canCall| Tclass.KMBtreeModel.Node (Lit (KMBtreeModel.Node.children (Lit |leftindex#0@@2|)))) (|KMBtreeModel.__default.AllKeys#canCall| (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (Lit (KMBtreeModel.Node.children (Lit |leftindex#0@@2|)))))))) (=> (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (Lit (KMBtreeModel.Node.children (Lit |leftindex#0@@2|))))))) ($Box |key#10@@0|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |key#10@@0| (Lit |pivot#0@@18|))))) :qid |BtreeMod.437:16| :skolemid |12886| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#10@@0| |pivot#0@@18|)) :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children |leftindex#0@@2|)))) ($Box |key#10@@0|))) )) (forall ((|key#10@@1| T@U) ) (!  (=> (and (and (= (type |key#10@@1|) (SeqType BoxType)) ($Is |key#10@@1| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (Lit (KMBtreeModel.Node.children (Lit |leftindex#0@@2|))))))) ($Box |key#10@@1|)))) (Lexicographic__Byte__Order.__default.lt |key#10@@1| (Lit |pivot#0@@18|))) :qid |BtreeMod.437:16| :skolemid |12887| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#10@@1| |pivot#0@@18|)) :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children |leftindex#0@@2|)))) ($Box |key#10@@1|))) ))) (forall ((|key#11| T@U) ) (!  (=> (and (= (type |key#11|) (SeqType BoxType)) ($Is |key#11| (TSeq Tclass.NativeTypes.byte))) (and (|KMBtreeModel.__default.AllKeys#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |rightindex#0@@2|))) (LitInt 0)))) (=> (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |rightindex#0@@2|))) (LitInt 0)))) ($Box |key#11|))) (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |pivot#0@@18|) |key#11|)))) :qid |BtreeMod.438:16| :skolemid |12885| :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@@18| |key#11|)) :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |rightindex#0@@2|) 0))) ($Box |key#11|))) )))) (and (=> (KMBtreeModel.__default.SplitIndex (Lit |oldindex#0@@2|) (Lit |leftindex#0@@2|) (Lit |rightindex#0@@2|) (Lit |pivot#0@@18|)) (and (and (and (and (and (and (and (and (and (KMBtreeModel.Node.Index_q (Lit |oldindex#0@@2|)) (KMBtreeModel.Node.Index_q (Lit |leftindex#0@@2|))) (KMBtreeModel.Node.Index_q (Lit |rightindex#0@@2|))) (and (< 0 (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |leftindex#0@@2|))))) (< (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |leftindex#0@@2|)))) (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |oldindex#0@@2|))))))) (= (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |oldindex#0@@2|)))) (+ (|Seq#Length| (Lit (KMBtreeModel.Node.pivots (Lit |oldindex#0@@2|)))) 1))) (|KMBtreeModel.Node#Equal| |leftindex#0@@2| (KMBtreeModel.__default.SubIndex (Lit |oldindex#0@@2|) (LitInt 0) (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |leftindex#0@@2|))))))) (|KMBtreeModel.Node#Equal| |rightindex#0@@2| (KMBtreeModel.__default.SubIndex (Lit |oldindex#0@@2|) (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |leftindex#0@@2|)))) (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |oldindex#0@@2|))))))) (forall ((|key#10@@2| T@U) ) (!  (=> (and (and (= (type |key#10@@2|) (SeqType BoxType)) ($Is |key#10@@2| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (Lit (KMBtreeModel.Node.children (Lit |leftindex#0@@2|))))))) ($Box |key#10@@2|)))) (Lexicographic__Byte__Order.__default.lt |key#10@@2| (Lit |pivot#0@@18|))) :qid |BtreeMod.437:16| :skolemid |12890| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#10@@2| |pivot#0@@18|)) :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children |leftindex#0@@2|)))) ($Box |key#10@@2|))) ))) (forall ((|key#11@@0| T@U) ) (!  (=> (and (and (= (type |key#11@@0|) (SeqType BoxType)) ($Is |key#11@@0| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |rightindex#0@@2|))) (LitInt 0)))) ($Box |key#11@@0|)))) (Lexicographic__Byte__Order.__default.lte (Lit |pivot#0@@18|) |key#11@@0|)) :qid |BtreeMod.438:16| :skolemid |12891| :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@@18| |key#11@@0|)) :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |rightindex#0@@2|) 0))) ($Box |key#11@@0|))) ))) (|Seq#Equal| |pivot#0@@18| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (KMBtreeModel.Node.pivots (Lit |oldindex#0@@2|))) (|Seq#Length| (Lit (KMBtreeModel.Node.pivots (Lit |leftindex#0@@2|))))))))) (=> (and (and (and (and (and (and (and (and (and (KMBtreeModel.Node.Index_q (Lit |oldindex#0@@2|)) (KMBtreeModel.Node.Index_q (Lit |leftindex#0@@2|))) (KMBtreeModel.Node.Index_q (Lit |rightindex#0@@2|))) (and (< 0 (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |leftindex#0@@2|))))) (< (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |leftindex#0@@2|)))) (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |oldindex#0@@2|))))))) (= (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |oldindex#0@@2|)))) (+ (|Seq#Length| (Lit (KMBtreeModel.Node.pivots (Lit |oldindex#0@@2|)))) 1))) (|KMBtreeModel.Node#Equal| |leftindex#0@@2| (KMBtreeModel.__default.SubIndex (Lit |oldindex#0@@2|) (LitInt 0) (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |leftindex#0@@2|))))))) (|KMBtreeModel.Node#Equal| |rightindex#0@@2| (KMBtreeModel.__default.SubIndex (Lit |oldindex#0@@2|) (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |leftindex#0@@2|)))) (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |oldindex#0@@2|))))))) (forall ((|key#10@@3| T@U) ) (!  (=> (and (and (= (type |key#10@@3|) (SeqType BoxType)) ($Is |key#10@@3| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (Lit (KMBtreeModel.Node.children (Lit |leftindex#0@@2|))))))) ($Box |key#10@@3|)))) (Lexicographic__Byte__Order.__default.lt |key#10@@3| (Lit |pivot#0@@18|))) :qid |BtreeMod.437:16| :skolemid |12890| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#10@@3| |pivot#0@@18|)) :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children |leftindex#0@@2|)))) ($Box |key#10@@3|))) ))) (forall ((|key#11@@1| T@U) ) (!  (=> (and (and (= (type |key#11@@1|) (SeqType BoxType)) ($Is |key#11@@1| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |rightindex#0@@2|))) (LitInt 0)))) ($Box |key#11@@1|)))) (Lexicographic__Byte__Order.__default.lte (Lit |pivot#0@@18|) |key#11@@1|)) :qid |BtreeMod.438:16| :skolemid |12891| :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@@18| |key#11@@1|)) :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuel_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |rightindex#0@@2|) 0))) ($Box |key#11@@1|))) ))) (|Seq#Equal| |pivot#0@@18| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (KMBtreeModel.Node.pivots (Lit |oldindex#0@@2|))) (|Seq#Length| (Lit (KMBtreeModel.Node.pivots (Lit |leftindex#0@@2|)))))))) (KMBtreeModel.__default.SplitIndex (Lit |oldindex#0@@2|) (Lit |leftindex#0@@2|) (Lit |rightindex#0@@2|) (Lit |pivot#0@@18|)))))) :qid |BtreeMod.428:24| :weight 3 :skolemid |12892| :pattern ( (KMBtreeModel.__default.SplitIndex (Lit |oldindex#0@@2|) (Lit |leftindex#0@@2|) (Lit |rightindex#0@@2|) (Lit |pivot#0@@18|))) ))))
(assert  (=> true (forall ((|oldnode#0| T@U) (|leftnode#0| T@U) (|rightnode#0| T@U) (|pivot#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type |oldnode#0|) DatatypeTypeType) (= (type |leftnode#0|) DatatypeTypeType)) (= (type |rightnode#0|) DatatypeTypeType)) (= (type |pivot#0@@19|) (SeqType BoxType))) (or (|KMBtreeModel.__default.SplitNode#canCall| |oldnode#0| |leftnode#0| |rightnode#0| |pivot#0@@19|) (and (and (and ($Is |oldnode#0| Tclass.KMBtreeModel.Node) ($Is |leftnode#0| Tclass.KMBtreeModel.Node)) ($Is |rightnode#0| Tclass.KMBtreeModel.Node)) ($Is |pivot#0@@19| (TSeq Tclass.NativeTypes.byte))))) true) :qid |BtreeMod.589:23| :skolemid |12893| :pattern ( (KMBtreeModel.__default.SplitNode |oldnode#0| |leftnode#0| |rightnode#0| |pivot#0@@19|)) ))))
(assert (forall ((|oldnode#0@@0| T@U) (|leftnode#0@@0| T@U) (|rightnode#0@@0| T@U) (|pivot#0@@20| T@U) ) (!  (=> (and (and (and (and (= (type |oldnode#0@@0|) DatatypeTypeType) (= (type |leftnode#0@@0|) DatatypeTypeType)) (= (type |rightnode#0@@0|) DatatypeTypeType)) (= (type |pivot#0@@20|) (SeqType BoxType))) (and (and (and ($Is |oldnode#0@@0| Tclass.KMBtreeModel.Node) ($Is |leftnode#0@@0| Tclass.KMBtreeModel.Node)) ($Is |rightnode#0@@0| Tclass.KMBtreeModel.Node)) ($Is |pivot#0@@20| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|KMBtreeModel.__default.SplitNode#requires| |oldnode#0@@0| |leftnode#0@@0| |rightnode#0@@0| |pivot#0@@20|) true) (=> true (|KMBtreeModel.__default.SplitNode#requires| |oldnode#0@@0| |leftnode#0@@0| |rightnode#0@@0| |pivot#0@@20|)))) :qid |BtreeMod.589:23| :skolemid |12894| :pattern ( (|KMBtreeModel.__default.SplitNode#requires| |oldnode#0@@0| |leftnode#0@@0| |rightnode#0@@0| |pivot#0@@20|)) )))
(assert  (=> true (forall ((|oldnode#0@@1| T@U) (|leftnode#0@@1| T@U) (|rightnode#0@@1| T@U) (|pivot#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type |oldnode#0@@1|) DatatypeTypeType) (= (type |leftnode#0@@1|) DatatypeTypeType)) (= (type |rightnode#0@@1|) DatatypeTypeType)) (= (type |pivot#0@@21|) (SeqType BoxType))) (or (|KMBtreeModel.__default.SplitNode#canCall| |oldnode#0@@1| |leftnode#0@@1| |rightnode#0@@1| |pivot#0@@21|) (and (and (and ($Is |oldnode#0@@1| Tclass.KMBtreeModel.Node) ($Is |leftnode#0@@1| Tclass.KMBtreeModel.Node)) ($Is |rightnode#0@@1| Tclass.KMBtreeModel.Node)) ($Is |pivot#0@@21| (TSeq Tclass.NativeTypes.byte))))) (and (and (|KMBtreeModel.__default.SplitLeaf#canCall| |oldnode#0@@1| |leftnode#0@@1| |rightnode#0@@1| |pivot#0@@21|) (=> (not (KMBtreeModel.__default.SplitLeaf |oldnode#0@@1| |leftnode#0@@1| |rightnode#0@@1| |pivot#0@@21|)) (|KMBtreeModel.__default.SplitIndex#canCall| |oldnode#0@@1| |leftnode#0@@1| |rightnode#0@@1| |pivot#0@@21|))) (and (=> (KMBtreeModel.__default.SplitNode |oldnode#0@@1| |leftnode#0@@1| |rightnode#0@@1| |pivot#0@@21|) (or (KMBtreeModel.__default.SplitLeaf |oldnode#0@@1| |leftnode#0@@1| |rightnode#0@@1| |pivot#0@@21|) (KMBtreeModel.__default.SplitIndex |oldnode#0@@1| |leftnode#0@@1| |rightnode#0@@1| |pivot#0@@21|))) (=> (or (KMBtreeModel.__default.SplitLeaf |oldnode#0@@1| |leftnode#0@@1| |rightnode#0@@1| |pivot#0@@21|) (KMBtreeModel.__default.SplitIndex |oldnode#0@@1| |leftnode#0@@1| |rightnode#0@@1| |pivot#0@@21|)) (KMBtreeModel.__default.SplitNode |oldnode#0@@1| |leftnode#0@@1| |rightnode#0@@1| |pivot#0@@21|))))) :qid |BtreeMod.589:23| :skolemid |12895| :pattern ( (KMBtreeModel.__default.SplitNode |oldnode#0@@1| |leftnode#0@@1| |rightnode#0@@1| |pivot#0@@21|)) ))))
(assert  (=> true (forall ((|oldnode#0@@2| T@U) (|leftnode#0@@2| T@U) (|rightnode#0@@2| T@U) (|pivot#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type |oldnode#0@@2|) DatatypeTypeType) (= (type |leftnode#0@@2|) DatatypeTypeType)) (= (type |rightnode#0@@2|) DatatypeTypeType)) (= (type |pivot#0@@22|) (SeqType BoxType))) (or (|KMBtreeModel.__default.SplitNode#canCall| (Lit |oldnode#0@@2|) (Lit |leftnode#0@@2|) (Lit |rightnode#0@@2|) (Lit |pivot#0@@22|)) (and (and (and ($Is |oldnode#0@@2| Tclass.KMBtreeModel.Node) ($Is |leftnode#0@@2| Tclass.KMBtreeModel.Node)) ($Is |rightnode#0@@2| Tclass.KMBtreeModel.Node)) ($Is |pivot#0@@22| (TSeq Tclass.NativeTypes.byte))))) (and (and (|KMBtreeModel.__default.SplitLeaf#canCall| (Lit |oldnode#0@@2|) (Lit |leftnode#0@@2|) (Lit |rightnode#0@@2|) (Lit |pivot#0@@22|)) (=> (not (U_2_bool (Lit (bool_2_U (KMBtreeModel.__default.SplitLeaf (Lit |oldnode#0@@2|) (Lit |leftnode#0@@2|) (Lit |rightnode#0@@2|) (Lit |pivot#0@@22|)))))) (|KMBtreeModel.__default.SplitIndex#canCall| (Lit |oldnode#0@@2|) (Lit |leftnode#0@@2|) (Lit |rightnode#0@@2|) (Lit |pivot#0@@22|)))) (and (=> (KMBtreeModel.__default.SplitNode (Lit |oldnode#0@@2|) (Lit |leftnode#0@@2|) (Lit |rightnode#0@@2|) (Lit |pivot#0@@22|)) (U_2_bool (Lit (bool_2_U  (or (KMBtreeModel.__default.SplitLeaf (Lit |oldnode#0@@2|) (Lit |leftnode#0@@2|) (Lit |rightnode#0@@2|) (Lit |pivot#0@@22|)) (KMBtreeModel.__default.SplitIndex (Lit |oldnode#0@@2|) (Lit |leftnode#0@@2|) (Lit |rightnode#0@@2|) (Lit |pivot#0@@22|))))))) (=> (U_2_bool (Lit (bool_2_U  (or (KMBtreeModel.__default.SplitLeaf (Lit |oldnode#0@@2|) (Lit |leftnode#0@@2|) (Lit |rightnode#0@@2|) (Lit |pivot#0@@22|)) (KMBtreeModel.__default.SplitIndex (Lit |oldnode#0@@2|) (Lit |leftnode#0@@2|) (Lit |rightnode#0@@2|) (Lit |pivot#0@@22|)))))) (KMBtreeModel.__default.SplitNode (Lit |oldnode#0@@2|) (Lit |leftnode#0@@2|) (Lit |rightnode#0@@2|) (Lit |pivot#0@@22|)))))) :qid |BtreeMod.589:23| :weight 3 :skolemid |12896| :pattern ( (KMBtreeModel.__default.SplitNode (Lit |oldnode#0@@2|) (Lit |leftnode#0@@2|) (Lit |rightnode#0@@2|) (Lit |pivot#0@@22|))) ))))
(assert  (=> true (forall ((|oldindex#0@@3| T@U) (|newindex#0| T@U) (|childidx#0| Int) ) (!  (=> (and (and (= (type |oldindex#0@@3|) DatatypeTypeType) (= (type |newindex#0|) DatatypeTypeType)) (or (|KMBtreeModel.__default.SplitChildOfIndex#canCall| |oldindex#0@@3| |newindex#0| |childidx#0|) (and ($Is |oldindex#0@@3| Tclass.KMBtreeModel.Node) ($Is |newindex#0| Tclass.KMBtreeModel.Node)))) true) :qid |BtreeMod.723:31| :skolemid |12897| :pattern ( (KMBtreeModel.__default.SplitChildOfIndex |oldindex#0@@3| |newindex#0| |childidx#0|)) ))))
(assert (forall ((|oldindex#0@@4| T@U) (|newindex#0@@0| T@U) (|childidx#0@@0| Int) ) (!  (=> (and (and (= (type |oldindex#0@@4|) DatatypeTypeType) (= (type |newindex#0@@0|) DatatypeTypeType)) (and ($Is |oldindex#0@@4| Tclass.KMBtreeModel.Node) ($Is |newindex#0@@0| Tclass.KMBtreeModel.Node))) (and (=> (|KMBtreeModel.__default.SplitChildOfIndex#requires| |oldindex#0@@4| |newindex#0@@0| |childidx#0@@0|) true) (=> true (|KMBtreeModel.__default.SplitChildOfIndex#requires| |oldindex#0@@4| |newindex#0@@0| |childidx#0@@0|)))) :qid |BtreeMod.723:31| :skolemid |12898| :pattern ( (|KMBtreeModel.__default.SplitChildOfIndex#requires| |oldindex#0@@4| |newindex#0@@0| |childidx#0@@0|)) )))
(assert  (and (= (type StartFuel_Sequences._default.insert) LayerTypeType) (= (type StartFuel_Sequences._default.replace1with2) LayerTypeType)))
(assert  (=> true (forall ((|oldindex#0@@5| T@U) (|newindex#0@@1| T@U) (|childidx#0@@1| Int) ) (!  (=> (and (and (= (type |oldindex#0@@5|) DatatypeTypeType) (= (type |newindex#0@@1|) DatatypeTypeType)) (or (|KMBtreeModel.__default.SplitChildOfIndex#canCall| |oldindex#0@@5| |newindex#0@@1| |childidx#0@@1|) (and ($Is |oldindex#0@@5| Tclass.KMBtreeModel.Node) ($Is |newindex#0@@1| Tclass.KMBtreeModel.Node)))) (and (and (and (=> (= (|Seq#Length| (KMBtreeModel.Node.pivots |oldindex#0@@5|)) (- (|Seq#Length| (KMBtreeModel.Node.children |oldindex#0@@5|)) 1)) (|KMBtreeModel.__default.SplitNode#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |oldindex#0@@5|) |childidx#0@@1|)) ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |newindex#0@@1|) |childidx#0@@1|)) ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |newindex#0@@1|) (+ |childidx#0@@1| 1))) ($Unbox (SeqType BoxType) (|Seq#Index| (KMBtreeModel.Node.pivots |newindex#0@@1|) |childidx#0@@1|)))) (=> (and (|KMBtreeModel.__default.SplitNode#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |oldindex#0@@5|) |childidx#0@@1|)) ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |newindex#0@@1|) |childidx#0@@1|)) ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |newindex#0@@1|) (+ |childidx#0@@1| 1))) ($Unbox (SeqType BoxType) (|Seq#Index| (KMBtreeModel.Node.pivots |newindex#0@@1|) |childidx#0@@1|))) (KMBtreeModel.__default.SplitNode ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |oldindex#0@@5|) |childidx#0@@1|)) ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |newindex#0@@1|) |childidx#0@@1|)) ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |newindex#0@@1|) (+ |childidx#0@@1| 1))) ($Unbox (SeqType BoxType) (|Seq#Index| (KMBtreeModel.Node.pivots |newindex#0@@1|) |childidx#0@@1|)))) (|Sequences.__default.insert#canCall| (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.pivots |oldindex#0@@5|) (|Seq#Index| (KMBtreeModel.Node.pivots |newindex#0@@1|) |childidx#0@@1|) |childidx#0@@1|))) (=> (and (|Sequences.__default.insert#canCall| (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.pivots |oldindex#0@@5|) (|Seq#Index| (KMBtreeModel.Node.pivots |newindex#0@@1|) |childidx#0@@1|) |childidx#0@@1|) (|Seq#Equal| (KMBtreeModel.Node.pivots |newindex#0@@1|) (Sequences.__default.insert (TSeq Tclass.NativeTypes.byte) StartFuel_Sequences._default.insert (KMBtreeModel.Node.pivots |oldindex#0@@5|) (|Seq#Index| (KMBtreeModel.Node.pivots |newindex#0@@1|) |childidx#0@@1|) |childidx#0@@1|))) (|Sequences.__default.replace1with2#canCall| Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children |oldindex#0@@5|) (|Seq#Index| (KMBtreeModel.Node.children |newindex#0@@1|) |childidx#0@@1|) (|Seq#Index| (KMBtreeModel.Node.children |newindex#0@@1|) (+ |childidx#0@@1| 1)) |childidx#0@@1|))) (and (=> (KMBtreeModel.__default.SplitChildOfIndex |oldindex#0@@5| |newindex#0@@1| |childidx#0@@1|) (and (and (and (and (and (and (and (and (KMBtreeModel.Node.Index_q |oldindex#0@@5|) (KMBtreeModel.Node.Index_q |newindex#0@@1|)) (and (<= (LitInt 0) |childidx#0@@1|) (< |childidx#0@@1| (|Seq#Length| (KMBtreeModel.Node.children |oldindex#0@@5|))))) (= (|Seq#Length| (KMBtreeModel.Node.children |newindex#0@@1|)) (+ (|Seq#Length| (KMBtreeModel.Node.children |oldindex#0@@5|)) 1))) (= (|Seq#Length| (KMBtreeModel.Node.pivots |newindex#0@@1|)) (+ (|Seq#Length| (KMBtreeModel.Node.pivots |oldindex#0@@5|)) 1))) (= (|Seq#Length| (KMBtreeModel.Node.pivots |oldindex#0@@5|)) (- (|Seq#Length| (KMBtreeModel.Node.children |oldindex#0@@5|)) 1))) (KMBtreeModel.__default.SplitNode ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |oldindex#0@@5|) |childidx#0@@1|)) ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |newindex#0@@1|) |childidx#0@@1|)) ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |newindex#0@@1|) (+ |childidx#0@@1| 1))) ($Unbox (SeqType BoxType) (|Seq#Index| (KMBtreeModel.Node.pivots |newindex#0@@1|) |childidx#0@@1|)))) (|Seq#Equal| (KMBtreeModel.Node.pivots |newindex#0@@1|) (Sequences.__default.insert (TSeq Tclass.NativeTypes.byte) StartFuel_Sequences._default.insert (KMBtreeModel.Node.pivots |oldindex#0@@5|) (|Seq#Index| (KMBtreeModel.Node.pivots |newindex#0@@1|) |childidx#0@@1|) |childidx#0@@1|))) (|Seq#Equal| (KMBtreeModel.Node.children |newindex#0@@1|) (Sequences.__default.replace1with2 Tclass.KMBtreeModel.Node StartFuel_Sequences._default.replace1with2 (KMBtreeModel.Node.children |oldindex#0@@5|) (|Seq#Index| (KMBtreeModel.Node.children |newindex#0@@1|) |childidx#0@@1|) (|Seq#Index| (KMBtreeModel.Node.children |newindex#0@@1|) (+ |childidx#0@@1| 1)) |childidx#0@@1|)))) (=> (and (and (and (and (and (and (and (and (KMBtreeModel.Node.Index_q |oldindex#0@@5|) (KMBtreeModel.Node.Index_q |newindex#0@@1|)) (and (<= (LitInt 0) |childidx#0@@1|) (< |childidx#0@@1| (|Seq#Length| (KMBtreeModel.Node.children |oldindex#0@@5|))))) (= (|Seq#Length| (KMBtreeModel.Node.children |newindex#0@@1|)) (+ (|Seq#Length| (KMBtreeModel.Node.children |oldindex#0@@5|)) 1))) (= (|Seq#Length| (KMBtreeModel.Node.pivots |newindex#0@@1|)) (+ (|Seq#Length| (KMBtreeModel.Node.pivots |oldindex#0@@5|)) 1))) (= (|Seq#Length| (KMBtreeModel.Node.pivots |oldindex#0@@5|)) (- (|Seq#Length| (KMBtreeModel.Node.children |oldindex#0@@5|)) 1))) (KMBtreeModel.__default.SplitNode ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |oldindex#0@@5|) |childidx#0@@1|)) ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |newindex#0@@1|) |childidx#0@@1|)) ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |newindex#0@@1|) (+ |childidx#0@@1| 1))) ($Unbox (SeqType BoxType) (|Seq#Index| (KMBtreeModel.Node.pivots |newindex#0@@1|) |childidx#0@@1|)))) (|Seq#Equal| (KMBtreeModel.Node.pivots |newindex#0@@1|) (Sequences.__default.insert (TSeq Tclass.NativeTypes.byte) StartFuel_Sequences._default.insert (KMBtreeModel.Node.pivots |oldindex#0@@5|) (|Seq#Index| (KMBtreeModel.Node.pivots |newindex#0@@1|) |childidx#0@@1|) |childidx#0@@1|))) (|Seq#Equal| (KMBtreeModel.Node.children |newindex#0@@1|) (Sequences.__default.replace1with2 Tclass.KMBtreeModel.Node StartFuel_Sequences._default.replace1with2 (KMBtreeModel.Node.children |oldindex#0@@5|) (|Seq#Index| (KMBtreeModel.Node.children |newindex#0@@1|) |childidx#0@@1|) (|Seq#Index| (KMBtreeModel.Node.children |newindex#0@@1|) (+ |childidx#0@@1| 1)) |childidx#0@@1|))) (KMBtreeModel.__default.SplitChildOfIndex |oldindex#0@@5| |newindex#0@@1| |childidx#0@@1|))))) :qid |BtreeMod.723:31| :skolemid |12899| :pattern ( (KMBtreeModel.__default.SplitChildOfIndex |oldindex#0@@5| |newindex#0@@1| |childidx#0@@1|)) ))))
(assert  (=> true (forall ((|oldindex#0@@6| T@U) (|newindex#0@@2| T@U) (|childidx#0@@2| Int) ) (!  (=> (and (and (= (type |oldindex#0@@6|) DatatypeTypeType) (= (type |newindex#0@@2|) DatatypeTypeType)) (or (|KMBtreeModel.__default.SplitChildOfIndex#canCall| (Lit |oldindex#0@@6|) (Lit |newindex#0@@2|) (LitInt |childidx#0@@2|)) (and ($Is |oldindex#0@@6| Tclass.KMBtreeModel.Node) ($Is |newindex#0@@2| Tclass.KMBtreeModel.Node)))) (and (and (and (=> (= (|Seq#Length| (Lit (KMBtreeModel.Node.pivots (Lit |oldindex#0@@6|)))) (- (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |oldindex#0@@6|)))) 1)) (|KMBtreeModel.__default.SplitNode#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |oldindex#0@@6|))) (LitInt |childidx#0@@2|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |newindex#0@@2|))) (LitInt (+ |childidx#0@@2| 1)))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (KMBtreeModel.Node.pivots (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|))))) (=> (and (|KMBtreeModel.__default.SplitNode#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |oldindex#0@@6|))) (LitInt |childidx#0@@2|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |newindex#0@@2|))) (LitInt (+ |childidx#0@@2| 1)))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (KMBtreeModel.Node.pivots (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|)))) (KMBtreeModel.__default.SplitNode ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |oldindex#0@@6|))) (LitInt |childidx#0@@2|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |newindex#0@@2|))) (LitInt (+ |childidx#0@@2| 1)))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (KMBtreeModel.Node.pivots (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|))))) (|Sequences.__default.insert#canCall| (TSeq Tclass.NativeTypes.byte) (Lit (KMBtreeModel.Node.pivots (Lit |oldindex#0@@6|))) (|Seq#Index| (Lit (KMBtreeModel.Node.pivots (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|)) (LitInt |childidx#0@@2|)))) (=> (and (|Sequences.__default.insert#canCall| (TSeq Tclass.NativeTypes.byte) (Lit (KMBtreeModel.Node.pivots (Lit |oldindex#0@@6|))) (|Seq#Index| (Lit (KMBtreeModel.Node.pivots (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|)) (LitInt |childidx#0@@2|)) (|Seq#Equal| (KMBtreeModel.Node.pivots (Lit |newindex#0@@2|)) (Sequences.__default.insert (TSeq Tclass.NativeTypes.byte) StartFuel_Sequences._default.insert (Lit (KMBtreeModel.Node.pivots (Lit |oldindex#0@@6|))) (|Seq#Index| (Lit (KMBtreeModel.Node.pivots (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|)) (LitInt |childidx#0@@2|)))) (|Sequences.__default.replace1with2#canCall| Tclass.KMBtreeModel.Node (Lit (KMBtreeModel.Node.children (Lit |oldindex#0@@6|))) (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|)) (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |newindex#0@@2|))) (LitInt (+ |childidx#0@@2| 1))) (LitInt |childidx#0@@2|)))) (and (=> (KMBtreeModel.__default.SplitChildOfIndex (Lit |oldindex#0@@6|) (Lit |newindex#0@@2|) (LitInt |childidx#0@@2|)) (and (and (and (and (and (and (and (and (KMBtreeModel.Node.Index_q (Lit |oldindex#0@@6|)) (KMBtreeModel.Node.Index_q (Lit |newindex#0@@2|))) (and (<= (LitInt 0) (LitInt |childidx#0@@2|)) (< |childidx#0@@2| (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |oldindex#0@@6|))))))) (= (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |newindex#0@@2|)))) (+ (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |oldindex#0@@6|)))) 1))) (= (|Seq#Length| (Lit (KMBtreeModel.Node.pivots (Lit |newindex#0@@2|)))) (+ (|Seq#Length| (Lit (KMBtreeModel.Node.pivots (Lit |oldindex#0@@6|)))) 1))) (= (|Seq#Length| (Lit (KMBtreeModel.Node.pivots (Lit |oldindex#0@@6|)))) (- (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |oldindex#0@@6|)))) 1))) (KMBtreeModel.__default.SplitNode ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |oldindex#0@@6|))) (LitInt |childidx#0@@2|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |newindex#0@@2|))) (LitInt (+ |childidx#0@@2| 1)))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (KMBtreeModel.Node.pivots (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|))))) (|Seq#Equal| (KMBtreeModel.Node.pivots (Lit |newindex#0@@2|)) (Sequences.__default.insert (TSeq Tclass.NativeTypes.byte) StartFuel_Sequences._default.insert (Lit (KMBtreeModel.Node.pivots (Lit |oldindex#0@@6|))) (|Seq#Index| (Lit (KMBtreeModel.Node.pivots (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|)) (LitInt |childidx#0@@2|)))) (|Seq#Equal| (KMBtreeModel.Node.children (Lit |newindex#0@@2|)) (Sequences.__default.replace1with2 Tclass.KMBtreeModel.Node StartFuel_Sequences._default.replace1with2 (Lit (KMBtreeModel.Node.children (Lit |oldindex#0@@6|))) (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|)) (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |newindex#0@@2|))) (LitInt (+ |childidx#0@@2| 1))) (LitInt |childidx#0@@2|))))) (=> (and (and (and (and (and (and (and (and (KMBtreeModel.Node.Index_q (Lit |oldindex#0@@6|)) (KMBtreeModel.Node.Index_q (Lit |newindex#0@@2|))) (and (<= (LitInt 0) (LitInt |childidx#0@@2|)) (< |childidx#0@@2| (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |oldindex#0@@6|))))))) (= (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |newindex#0@@2|)))) (+ (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |oldindex#0@@6|)))) 1))) (= (|Seq#Length| (Lit (KMBtreeModel.Node.pivots (Lit |newindex#0@@2|)))) (+ (|Seq#Length| (Lit (KMBtreeModel.Node.pivots (Lit |oldindex#0@@6|)))) 1))) (= (|Seq#Length| (Lit (KMBtreeModel.Node.pivots (Lit |oldindex#0@@6|)))) (- (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |oldindex#0@@6|)))) 1))) (KMBtreeModel.__default.SplitNode ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |oldindex#0@@6|))) (LitInt |childidx#0@@2|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |newindex#0@@2|))) (LitInt (+ |childidx#0@@2| 1)))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (KMBtreeModel.Node.pivots (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|))))) (|Seq#Equal| (KMBtreeModel.Node.pivots (Lit |newindex#0@@2|)) (Sequences.__default.insert (TSeq Tclass.NativeTypes.byte) StartFuel_Sequences._default.insert (Lit (KMBtreeModel.Node.pivots (Lit |oldindex#0@@6|))) (|Seq#Index| (Lit (KMBtreeModel.Node.pivots (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|)) (LitInt |childidx#0@@2|)))) (|Seq#Equal| (KMBtreeModel.Node.children (Lit |newindex#0@@2|)) (Sequences.__default.replace1with2 Tclass.KMBtreeModel.Node StartFuel_Sequences._default.replace1with2 (Lit (KMBtreeModel.Node.children (Lit |oldindex#0@@6|))) (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|)) (|Seq#Index| (Lit (KMBtreeModel.Node.children (Lit |newindex#0@@2|))) (LitInt (+ |childidx#0@@2| 1))) (LitInt |childidx#0@@2|)))) (KMBtreeModel.__default.SplitChildOfIndex (Lit |oldindex#0@@6|) (Lit |newindex#0@@2|) (LitInt |childidx#0@@2|)))))) :qid |BtreeMod.723:31| :weight 3 :skolemid |12900| :pattern ( (KMBtreeModel.__default.SplitChildOfIndex (Lit |oldindex#0@@6|) (Lit |newindex#0@@2|) (LitInt |childidx#0@@2|))) ))))
(assert (forall ((arg0@@368 T@U) (arg1@@226 T@U) (arg2@@135 T@U) ) (! (= (type (KMBtreeModel.__default.InsertLeaf arg0@@368 arg1@@226 arg2@@135)) DatatypeTypeType) :qid |funType:KMBtreeModel.__default.InsertLeaf| :pattern ( (KMBtreeModel.__default.InsertLeaf arg0@@368 arg1@@226 arg2@@135)) )))
(assert  (=> true (forall ((|leaf#0| T@U) (|key#0@@124| T@U) (|value#0@@3| T@U) ) (!  (=> (and (and (and (= (type |leaf#0|) DatatypeTypeType) (= (type |key#0@@124|) (SeqType BoxType))) (= (type |value#0@@3|) DatatypeTypeType)) (or (|KMBtreeModel.__default.InsertLeaf#canCall| |leaf#0| |key#0@@124| |value#0@@3|) (and (and (and ($Is |leaf#0| Tclass.KMBtreeModel.Node) ($Is |key#0@@124| (TSeq Tclass.NativeTypes.byte))) ($Is |value#0@@3| Tclass.ValueMessage.Message)) (and (KMBtreeModel.Node.Leaf_q |leaf#0|) (KMBtreeModel.__default.WF ($LS $LZ) |leaf#0|))))) (and (and (KMBtreeModel.Node.Leaf_q (KMBtreeModel.__default.InsertLeaf |leaf#0| |key#0@@124| |value#0@@3|)) (KMBtreeModel.__default.WF ($LS $LZ) (KMBtreeModel.__default.InsertLeaf |leaf#0| |key#0@@124| |value#0@@3|))) ($Is (KMBtreeModel.__default.InsertLeaf |leaf#0| |key#0@@124| |value#0@@3|) Tclass.KMBtreeModel.Node))) :qid |BtreeMod.1001:23| :skolemid |12961| :pattern ( (KMBtreeModel.__default.InsertLeaf |leaf#0| |key#0@@124| |value#0@@3|)) ))))
(assert (forall ((|leaf#0@@0| T@U) (|key#0@@125| T@U) (|value#0@@4| T@U) ) (!  (=> (and (and (and (= (type |leaf#0@@0|) DatatypeTypeType) (= (type |key#0@@125|) (SeqType BoxType))) (= (type |value#0@@4|) DatatypeTypeType)) (and (and ($Is |leaf#0@@0| Tclass.KMBtreeModel.Node) ($Is |key#0@@125| (TSeq Tclass.NativeTypes.byte))) ($Is |value#0@@4| Tclass.ValueMessage.Message))) (and (=> (|KMBtreeModel.__default.InsertLeaf#requires| |leaf#0@@0| |key#0@@125| |value#0@@4|) (and (KMBtreeModel.Node.Leaf_q |leaf#0@@0|) (KMBtreeModel.__default.WF ($LS $LZ) |leaf#0@@0|))) (=> (and (KMBtreeModel.Node.Leaf_q |leaf#0@@0|) (KMBtreeModel.__default.WF ($LS $LZ) |leaf#0@@0|)) (|KMBtreeModel.__default.InsertLeaf#requires| |leaf#0@@0| |key#0@@125| |value#0@@4|)))) :qid |BtreeMod.1001:23| :skolemid |12962| :pattern ( (|KMBtreeModel.__default.InsertLeaf#requires| |leaf#0@@0| |key#0@@125| |value#0@@4|)) )))
(assert  (=> true (forall ((|leaf#0@@1| T@U) (|key#0@@126| T@U) (|value#0@@5| T@U) ) (!  (=> (and (and (and (= (type |leaf#0@@1|) DatatypeTypeType) (= (type |key#0@@126|) (SeqType BoxType))) (= (type |value#0@@5|) DatatypeTypeType)) (or (|KMBtreeModel.__default.InsertLeaf#canCall| |leaf#0@@1| |key#0@@126| |value#0@@5|) (and (and (and ($Is |leaf#0@@1| Tclass.KMBtreeModel.Node) ($Is |key#0@@126| (TSeq Tclass.NativeTypes.byte))) ($Is |value#0@@5| Tclass.ValueMessage.Message)) (and (KMBtreeModel.Node.Leaf_q |leaf#0@@1|) (KMBtreeModel.__default.WF ($LS $LZ) |leaf#0@@1|))))) (and (and (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (KMBtreeModel.Node.keys |leaf#0@@1|) |key#0@@126|) (let ((|llte#3| (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (KMBtreeModel.Node.keys |leaf#0@@1|) |key#0@@126|))) (=> (not (and (<= (LitInt 0) |llte#3|) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (KMBtreeModel.Node.keys |leaf#0@@1|) |llte#3|)) |key#0@@126|))) (and (|Sequences.__default.insert#canCall| (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.keys |leaf#0@@1|) ($Box |key#0@@126|) (+ |llte#3| 1)) (|Sequences.__default.insert#canCall| Tclass.ValueMessage.Message (KMBtreeModel.Node.values |leaf#0@@1|) ($Box |value#0@@5|) (+ |llte#3| 1)))))) (= (KMBtreeModel.__default.InsertLeaf |leaf#0@@1| |key#0@@126| |value#0@@5|) (let ((|llte#3@@0| (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (KMBtreeModel.Node.keys |leaf#0@@1|) |key#0@@126|))) (ite  (and (<= (LitInt 0) |llte#3@@0|) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (KMBtreeModel.Node.keys |leaf#0@@1|) |llte#3@@0|)) |key#0@@126|)) (|#KMBtreeModel.Node.Leaf| (KMBtreeModel.Node.keys |leaf#0@@1|) (|Seq#Update| (KMBtreeModel.Node.values |leaf#0@@1|) |llte#3@@0| ($Box |value#0@@5|))) (|#KMBtreeModel.Node.Leaf| (Sequences.__default.insert (TSeq Tclass.NativeTypes.byte) StartFuel_Sequences._default.insert (KMBtreeModel.Node.keys |leaf#0@@1|) ($Box |key#0@@126|) (+ |llte#3@@0| 1)) (Sequences.__default.insert Tclass.ValueMessage.Message StartFuel_Sequences._default.insert (KMBtreeModel.Node.values |leaf#0@@1|) ($Box |value#0@@5|) (+ |llte#3@@0| 1)))))))) :qid |BtreeMod.1001:23| :skolemid |12963| :pattern ( (KMBtreeModel.__default.InsertLeaf |leaf#0@@1| |key#0@@126| |value#0@@5|)) ))))
(assert  (=> true (forall ((|leaf#0@@2| T@U) (|key#0@@127| T@U) (|value#0@@6| T@U) ) (!  (=> (and (and (and (= (type |leaf#0@@2|) DatatypeTypeType) (= (type |key#0@@127|) (SeqType BoxType))) (= (type |value#0@@6|) DatatypeTypeType)) (or (|KMBtreeModel.__default.InsertLeaf#canCall| (Lit |leaf#0@@2|) (Lit |key#0@@127|) (Lit |value#0@@6|)) (and (and (and ($Is |leaf#0@@2| Tclass.KMBtreeModel.Node) ($Is |key#0@@127| (TSeq Tclass.NativeTypes.byte))) ($Is |value#0@@6| Tclass.ValueMessage.Message)) (and (U_2_bool (Lit (bool_2_U (KMBtreeModel.Node.Leaf_q (Lit |leaf#0@@2|))))) (U_2_bool (Lit (bool_2_U (KMBtreeModel.__default.WF ($LS $LZ) (Lit |leaf#0@@2|))))))))) (and (and (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (Lit (KMBtreeModel.Node.keys (Lit |leaf#0@@2|))) (Lit |key#0@@127|)) (let ((|llte#4| (LitInt (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (Lit (KMBtreeModel.Node.keys (Lit |leaf#0@@2|))) (Lit |key#0@@127|))))) (=> (not (and (<= (LitInt 0) |llte#4|) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (KMBtreeModel.Node.keys (Lit |leaf#0@@2|))) |llte#4|)) |key#0@@127|))) (and (|Sequences.__default.insert#canCall| (TSeq Tclass.NativeTypes.byte) (Lit (KMBtreeModel.Node.keys (Lit |leaf#0@@2|))) ($Box (Lit |key#0@@127|)) (+ |llte#4| 1)) (|Sequences.__default.insert#canCall| Tclass.ValueMessage.Message (Lit (KMBtreeModel.Node.values (Lit |leaf#0@@2|))) ($Box (Lit |value#0@@6|)) (+ |llte#4| 1)))))) (= (KMBtreeModel.__default.InsertLeaf (Lit |leaf#0@@2|) (Lit |key#0@@127|) (Lit |value#0@@6|)) (let ((|llte#4@@0| (LitInt (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (Lit (KMBtreeModel.Node.keys (Lit |leaf#0@@2|))) (Lit |key#0@@127|))))) (ite  (and (<= (LitInt 0) |llte#4@@0|) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (KMBtreeModel.Node.keys (Lit |leaf#0@@2|))) |llte#4@@0|)) |key#0@@127|)) (|#KMBtreeModel.Node.Leaf| (Lit (KMBtreeModel.Node.keys (Lit |leaf#0@@2|))) (|Seq#Update| (Lit (KMBtreeModel.Node.values (Lit |leaf#0@@2|))) |llte#4@@0| ($Box (Lit |value#0@@6|)))) (|#KMBtreeModel.Node.Leaf| (Sequences.__default.insert (TSeq Tclass.NativeTypes.byte) StartFuel_Sequences._default.insert (Lit (KMBtreeModel.Node.keys (Lit |leaf#0@@2|))) ($Box (Lit |key#0@@127|)) (LitInt (+ |llte#4@@0| 1))) (Sequences.__default.insert Tclass.ValueMessage.Message StartFuel_Sequences._default.insert (Lit (KMBtreeModel.Node.values (Lit |leaf#0@@2|))) ($Box (Lit |value#0@@6|)) (LitInt (+ |llte#4@@0| 1))))))))) :qid |BtreeMod.1001:23| :weight 3 :skolemid |12964| :pattern ( (KMBtreeModel.__default.InsertLeaf (Lit |leaf#0@@2|) (Lit |key#0@@127|) (Lit |value#0@@6|))) ))))
(assert (forall ((arg0@@369 T@U) ) (! (= (type (KMBtreeModel.__default.Grow arg0@@369)) DatatypeTypeType) :qid |funType:KMBtreeModel.__default.Grow| :pattern ( (KMBtreeModel.__default.Grow arg0@@369)) )))
(assert  (=> true (forall ((|node#0@@77| T@U) ) (!  (=> (and (= (type |node#0@@77|) DatatypeTypeType) (or (|KMBtreeModel.__default.Grow#canCall| |node#0@@77|) ($Is |node#0@@77| Tclass.KMBtreeModel.Node))) ($Is (KMBtreeModel.__default.Grow |node#0@@77|) Tclass.KMBtreeModel.Node)) :qid |BtreeMod.1134:17| :skolemid |13005| :pattern ( (KMBtreeModel.__default.Grow |node#0@@77|)) ))))
(assert (forall ((|node#0@@78| T@U) ) (!  (=> (and (= (type |node#0@@78|) DatatypeTypeType) ($Is |node#0@@78| Tclass.KMBtreeModel.Node)) (and (=> (|KMBtreeModel.__default.Grow#requires| |node#0@@78|) true) (=> true (|KMBtreeModel.__default.Grow#requires| |node#0@@78|)))) :qid |BtreeMod.1134:17| :skolemid |13006| :pattern ( (|KMBtreeModel.__default.Grow#requires| |node#0@@78|)) )))
(assert  (=> true (forall ((|node#0@@79| T@U) ) (!  (=> (and (= (type |node#0@@79|) DatatypeTypeType) (or (|KMBtreeModel.__default.Grow#canCall| |node#0@@79|) ($Is |node#0@@79| Tclass.KMBtreeModel.Node))) (= (KMBtreeModel.__default.Grow |node#0@@79|) (|#KMBtreeModel.Node.Index| (Lit (|Seq#Empty| BoxType)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box |node#0@@79|))))) :qid |BtreeMod.1134:17| :skolemid |13007| :pattern ( (KMBtreeModel.__default.Grow |node#0@@79|)) ))))
(assert  (=> true (forall ((|node#0@@80| T@U) ) (!  (=> (and (= (type |node#0@@80|) DatatypeTypeType) (or (|KMBtreeModel.__default.Grow#canCall| (Lit |node#0@@80|)) ($Is |node#0@@80| Tclass.KMBtreeModel.Node))) (= (KMBtreeModel.__default.Grow (Lit |node#0@@80|)) (Lit (|#KMBtreeModel.Node.Index| (Lit (|Seq#Empty| BoxType)) (Lit (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit |node#0@@80|)))))))) :qid |BtreeMod.1134:17| :weight 3 :skolemid |13008| :pattern ( (KMBtreeModel.__default.Grow (Lit |node#0@@80|))) ))))
(assert (forall ((arg0@@370 T@U) (arg1@@227 Int) (arg2@@136 T@U) ) (! (= (type (KMBtreeModel.__default.ReplacePivot arg0@@370 arg1@@227 arg2@@136)) DatatypeTypeType) :qid |funType:KMBtreeModel.__default.ReplacePivot| :pattern ( (KMBtreeModel.__default.ReplacePivot arg0@@370 arg1@@227 arg2@@136)) )))
(assert  (=> true (forall ((|node#0@@81| T@U) (|pivotidx#0| Int) (|pivot#0@@23| T@U) ) (!  (=> (and (and (= (type |node#0@@81|) DatatypeTypeType) (= (type |pivot#0@@23|) (SeqType BoxType))) (or (|KMBtreeModel.__default.ReplacePivot#canCall| |node#0@@81| |pivotidx#0| |pivot#0@@23|) (and (and ($Is |node#0@@81| Tclass.KMBtreeModel.Node) ($Is |pivot#0@@23| (TSeq Tclass.NativeTypes.byte))) (and (and (KMBtreeModel.__default.WF ($LS $LZ) |node#0@@81|) (KMBtreeModel.Node.Index_q |node#0@@81|)) (and (<= (LitInt 0) |pivotidx#0|) (< |pivotidx#0| (|Seq#Length| (KMBtreeModel.Node.pivots |node#0@@81|)))))))) ($Is (KMBtreeModel.__default.ReplacePivot |node#0@@81| |pivotidx#0| |pivot#0@@23|) Tclass.KMBtreeModel.Node)) :qid |BtreeMod.1175:25| :skolemid |13049| :pattern ( (KMBtreeModel.__default.ReplacePivot |node#0@@81| |pivotidx#0| |pivot#0@@23|)) ))))
(assert (forall ((|node#0@@82| T@U) (|pivotidx#0@@0| Int) (|pivot#0@@24| T@U) ) (!  (=> (and (and (= (type |node#0@@82|) DatatypeTypeType) (= (type |pivot#0@@24|) (SeqType BoxType))) (and ($Is |node#0@@82| Tclass.KMBtreeModel.Node) ($Is |pivot#0@@24| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|KMBtreeModel.__default.ReplacePivot#requires| |node#0@@82| |pivotidx#0@@0| |pivot#0@@24|) (and (and (KMBtreeModel.__default.WF ($LS $LZ) |node#0@@82|) (KMBtreeModel.Node.Index_q |node#0@@82|)) (and (<= (LitInt 0) |pivotidx#0@@0|) (< |pivotidx#0@@0| (|Seq#Length| (KMBtreeModel.Node.pivots |node#0@@82|)))))) (=> (and (and (KMBtreeModel.__default.WF ($LS $LZ) |node#0@@82|) (KMBtreeModel.Node.Index_q |node#0@@82|)) (and (<= (LitInt 0) |pivotidx#0@@0|) (< |pivotidx#0@@0| (|Seq#Length| (KMBtreeModel.Node.pivots |node#0@@82|))))) (|KMBtreeModel.__default.ReplacePivot#requires| |node#0@@82| |pivotidx#0@@0| |pivot#0@@24|)))) :qid |BtreeMod.1175:25| :skolemid |13050| :pattern ( (|KMBtreeModel.__default.ReplacePivot#requires| |node#0@@82| |pivotidx#0@@0| |pivot#0@@24|)) )))
(assert  (=> true (forall ((|node#0@@83| T@U) (|pivotidx#0@@1| Int) (|pivot#0@@25| T@U) ) (!  (=> (and (and (= (type |node#0@@83|) DatatypeTypeType) (= (type |pivot#0@@25|) (SeqType BoxType))) (or (|KMBtreeModel.__default.ReplacePivot#canCall| |node#0@@83| |pivotidx#0@@1| |pivot#0@@25|) (and (and ($Is |node#0@@83| Tclass.KMBtreeModel.Node) ($Is |pivot#0@@25| (TSeq Tclass.NativeTypes.byte))) (and (and (KMBtreeModel.__default.WF ($LS $LZ) |node#0@@83|) (KMBtreeModel.Node.Index_q |node#0@@83|)) (and (<= (LitInt 0) |pivotidx#0@@1|) (< |pivotidx#0@@1| (|Seq#Length| (KMBtreeModel.Node.pivots |node#0@@83|)))))))) (= (KMBtreeModel.__default.ReplacePivot |node#0@@83| |pivotidx#0@@1| |pivot#0@@25|) (let ((|dt_update_tmp#0#3| |node#0@@83|)) (let ((|dt_update#pivots#0#3| (|Seq#Update| (KMBtreeModel.Node.pivots |node#0@@83|) |pivotidx#0@@1| ($Box |pivot#0@@25|)))) (|#KMBtreeModel.Node.Index| |dt_update#pivots#0#3| (KMBtreeModel.Node.children |dt_update_tmp#0#3|)))))) :qid |BtreeMod.1175:25| :skolemid |13051| :pattern ( (KMBtreeModel.__default.ReplacePivot |node#0@@83| |pivotidx#0@@1| |pivot#0@@25|)) ))))
(assert  (=> true (forall ((|node#0@@84| T@U) (|pivotidx#0@@2| Int) (|pivot#0@@26| T@U) ) (!  (=> (and (and (= (type |node#0@@84|) DatatypeTypeType) (= (type |pivot#0@@26|) (SeqType BoxType))) (or (|KMBtreeModel.__default.ReplacePivot#canCall| (Lit |node#0@@84|) (LitInt |pivotidx#0@@2|) (Lit |pivot#0@@26|)) (and (and ($Is |node#0@@84| Tclass.KMBtreeModel.Node) ($Is |pivot#0@@26| (TSeq Tclass.NativeTypes.byte))) (and (and (U_2_bool (Lit (bool_2_U (KMBtreeModel.__default.WF ($LS $LZ) (Lit |node#0@@84|))))) (U_2_bool (Lit (bool_2_U (KMBtreeModel.Node.Index_q (Lit |node#0@@84|)))))) (and (<= (LitInt 0) (LitInt |pivotidx#0@@2|)) (< |pivotidx#0@@2| (|Seq#Length| (Lit (KMBtreeModel.Node.pivots (Lit |node#0@@84|)))))))))) (= (KMBtreeModel.__default.ReplacePivot (Lit |node#0@@84|) (LitInt |pivotidx#0@@2|) (Lit |pivot#0@@26|)) (let ((|dt_update_tmp#0#4| (Lit |node#0@@84|))) (let ((|dt_update#pivots#0#4| (|Seq#Update| (Lit (KMBtreeModel.Node.pivots (Lit |node#0@@84|))) (LitInt |pivotidx#0@@2|) ($Box (Lit |pivot#0@@26|))))) (|#KMBtreeModel.Node.Index| |dt_update#pivots#0#4| (Lit (KMBtreeModel.Node.children |dt_update_tmp#0#4|))))))) :qid |BtreeMod.1175:25| :weight 3 :skolemid |13052| :pattern ( (KMBtreeModel.__default.ReplacePivot (Lit |node#0@@84|) (LitInt |pivotidx#0@@2|) (Lit |pivot#0@@26|))) ))))
(assert  (=> true (forall ((|oldparent#0| T@U) (|newparent#0| T@U) ) (!  (=> (and (and (= (type |oldparent#0|) DatatypeTypeType) (= (type |newparent#0|) DatatypeTypeType)) (or (|KMBtreeModel.__default.AppendChild#canCall| |oldparent#0| |newparent#0|) (and ($Is |oldparent#0| Tclass.KMBtreeModel.Node) ($Is |newparent#0| Tclass.KMBtreeModel.Node)))) true) :qid |BtreeMod.1286:25| :skolemid |13053| :pattern ( (KMBtreeModel.__default.AppendChild |oldparent#0| |newparent#0|)) ))))
(assert (forall ((|oldparent#0@@0| T@U) (|newparent#0@@0| T@U) ) (!  (=> (and (and (= (type |oldparent#0@@0|) DatatypeTypeType) (= (type |newparent#0@@0|) DatatypeTypeType)) (and ($Is |oldparent#0@@0| Tclass.KMBtreeModel.Node) ($Is |newparent#0@@0| Tclass.KMBtreeModel.Node))) (and (=> (|KMBtreeModel.__default.AppendChild#requires| |oldparent#0@@0| |newparent#0@@0|) true) (=> true (|KMBtreeModel.__default.AppendChild#requires| |oldparent#0@@0| |newparent#0@@0|)))) :qid |BtreeMod.1286:25| :skolemid |13054| :pattern ( (|KMBtreeModel.__default.AppendChild#requires| |oldparent#0@@0| |newparent#0@@0|)) )))
(assert  (=> true (forall ((|oldparent#0@@1| T@U) (|newparent#0@@1| T@U) ) (!  (=> (and (and (= (type |oldparent#0@@1|) DatatypeTypeType) (= (type |newparent#0@@1|) DatatypeTypeType)) (or (|KMBtreeModel.__default.AppendChild#canCall| |oldparent#0@@1| |newparent#0@@1|) (and ($Is |oldparent#0@@1| Tclass.KMBtreeModel.Node) ($Is |newparent#0@@1| Tclass.KMBtreeModel.Node)))) (and (and (and (and (and (=> (and (< 1 (|Seq#Length| (KMBtreeModel.Node.children |newparent#0@@1|))) (= (|Seq#Length| (KMBtreeModel.Node.children |newparent#0@@1|)) (+ (|Seq#Length| (KMBtreeModel.Node.pivots |newparent#0@@1|)) 1))) (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.pivots |newparent#0@@1|))) (=> (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.pivots |newparent#0@@1|)) (|Seq#Equal| (KMBtreeModel.Node.pivots |newparent#0@@1|) (|Seq#Append| (KMBtreeModel.Node.pivots |oldparent#0@@1|) (|Seq#Build| (|Seq#Empty| BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.pivots |newparent#0@@1|)))))) (|Sequences.__default.Last#canCall| Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children |newparent#0@@1|)))) (=> (and (|Sequences.__default.Last#canCall| Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children |newparent#0@@1|)) (|Seq#Equal| (KMBtreeModel.Node.children |newparent#0@@1|) (|Seq#Append| (KMBtreeModel.Node.children |oldparent#0@@1|) (|Seq#Build| (|Seq#Empty| BoxType) (Sequences.__default.Last Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children |newparent#0@@1|)))))) (=> (< 0 (|Seq#Length| (KMBtreeModel.Node.pivots |oldparent#0@@1|))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.pivots |oldparent#0@@1|)) (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.pivots |newparent#0@@1|))) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.pivots |oldparent#0@@1|))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.pivots |newparent#0@@1|)))))))) (=> (and (=> (< 0 (|Seq#Length| (KMBtreeModel.Node.pivots |oldparent#0@@1|))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.pivots |oldparent#0@@1|)) (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.pivots |newparent#0@@1|))) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.pivots |oldparent#0@@1|))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.pivots |newparent#0@@1|)))))) (=> (< 0 (|Seq#Length| (KMBtreeModel.Node.pivots |oldparent#0@@1|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.pivots |oldparent#0@@1|))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.pivots |newparent#0@@1|)))))) (|KMBtreeModel.__default.AllKeysBelowBound#canCall| |newparent#0@@1| (- (|Seq#Length| (KMBtreeModel.Node.children |newparent#0@@1|)) 2)))) (=> (and (|KMBtreeModel.__default.AllKeysBelowBound#canCall| |newparent#0@@1| (- (|Seq#Length| (KMBtreeModel.Node.children |newparent#0@@1|)) 2)) (KMBtreeModel.__default.AllKeysBelowBound |newparent#0@@1| (- (|Seq#Length| (KMBtreeModel.Node.children |newparent#0@@1|)) 2))) (|KMBtreeModel.__default.AllKeysAboveBound#canCall| |newparent#0@@1| (- (|Seq#Length| (KMBtreeModel.Node.children |newparent#0@@1|)) 1)))) (and (=> (KMBtreeModel.__default.AppendChild |oldparent#0@@1| |newparent#0@@1|) (and (and (and (and (and (and (and (KMBtreeModel.Node.Index_q |oldparent#0@@1|) (KMBtreeModel.Node.Index_q |newparent#0@@1|)) (and (< 1 (|Seq#Length| (KMBtreeModel.Node.children |newparent#0@@1|))) (= (|Seq#Length| (KMBtreeModel.Node.children |newparent#0@@1|)) (+ (|Seq#Length| (KMBtreeModel.Node.pivots |newparent#0@@1|)) 1)))) (|Seq#Equal| (KMBtreeModel.Node.pivots |newparent#0@@1|) (|Seq#Append| (KMBtreeModel.Node.pivots |oldparent#0@@1|) (|Seq#Build| (|Seq#Empty| BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.pivots |newparent#0@@1|)))))) (|Seq#Equal| (KMBtreeModel.Node.children |newparent#0@@1|) (|Seq#Append| (KMBtreeModel.Node.children |oldparent#0@@1|) (|Seq#Build| (|Seq#Empty| BoxType) (Sequences.__default.Last Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children |newparent#0@@1|)))))) (=> (< 0 (|Seq#Length| (KMBtreeModel.Node.pivots |oldparent#0@@1|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.pivots |oldparent#0@@1|))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.pivots |newparent#0@@1|)))))) (KMBtreeModel.__default.AllKeysBelowBound |newparent#0@@1| (- (|Seq#Length| (KMBtreeModel.Node.children |newparent#0@@1|)) 2))) (KMBtreeModel.__default.AllKeysAboveBound |newparent#0@@1| (- (|Seq#Length| (KMBtreeModel.Node.children |newparent#0@@1|)) 1)))) (=> (and (and (and (and (and (and (and (KMBtreeModel.Node.Index_q |oldparent#0@@1|) (KMBtreeModel.Node.Index_q |newparent#0@@1|)) (and (< 1 (|Seq#Length| (KMBtreeModel.Node.children |newparent#0@@1|))) (= (|Seq#Length| (KMBtreeModel.Node.children |newparent#0@@1|)) (+ (|Seq#Length| (KMBtreeModel.Node.pivots |newparent#0@@1|)) 1)))) (|Seq#Equal| (KMBtreeModel.Node.pivots |newparent#0@@1|) (|Seq#Append| (KMBtreeModel.Node.pivots |oldparent#0@@1|) (|Seq#Build| (|Seq#Empty| BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.pivots |newparent#0@@1|)))))) (|Seq#Equal| (KMBtreeModel.Node.children |newparent#0@@1|) (|Seq#Append| (KMBtreeModel.Node.children |oldparent#0@@1|) (|Seq#Build| (|Seq#Empty| BoxType) (Sequences.__default.Last Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children |newparent#0@@1|)))))) (=> (< 0 (|Seq#Length| (KMBtreeModel.Node.pivots |oldparent#0@@1|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.pivots |oldparent#0@@1|))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (KMBtreeModel.Node.pivots |newparent#0@@1|)))))) (KMBtreeModel.__default.AllKeysBelowBound |newparent#0@@1| (- (|Seq#Length| (KMBtreeModel.Node.children |newparent#0@@1|)) 2))) (KMBtreeModel.__default.AllKeysAboveBound |newparent#0@@1| (- (|Seq#Length| (KMBtreeModel.Node.children |newparent#0@@1|)) 1))) (KMBtreeModel.__default.AppendChild |oldparent#0@@1| |newparent#0@@1|))))) :qid |BtreeMod.1286:25| :skolemid |13055| :pattern ( (KMBtreeModel.__default.AppendChild |oldparent#0@@1| |newparent#0@@1|)) ))))
(assert  (=> true (forall ((|oldparent#0@@2| T@U) (|newparent#0@@2| T@U) ) (!  (=> (and (and (= (type |oldparent#0@@2|) DatatypeTypeType) (= (type |newparent#0@@2|) DatatypeTypeType)) (or (|KMBtreeModel.__default.AppendChild#canCall| (Lit |oldparent#0@@2|) (Lit |newparent#0@@2|)) (and ($Is |oldparent#0@@2| Tclass.KMBtreeModel.Node) ($Is |newparent#0@@2| Tclass.KMBtreeModel.Node)))) (and (and (and (and (and (=> (and (< 1 (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |newparent#0@@2|))))) (= (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |newparent#0@@2|)))) (+ (|Seq#Length| (Lit (KMBtreeModel.Node.pivots (Lit |newparent#0@@2|)))) 1))) (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit (KMBtreeModel.Node.pivots (Lit |newparent#0@@2|))))) (=> (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit (KMBtreeModel.Node.pivots (Lit |newparent#0@@2|)))) (|Seq#Equal| (KMBtreeModel.Node.pivots (Lit |newparent#0@@2|)) (|Seq#Append| (KMBtreeModel.Node.pivots (Lit |oldparent#0@@2|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (KMBtreeModel.Node.pivots (Lit |newparent#0@@2|))))))))))) (|Sequences.__default.Last#canCall| Tclass.KMBtreeModel.Node (Lit (KMBtreeModel.Node.children (Lit |newparent#0@@2|)))))) (=> (and (|Sequences.__default.Last#canCall| Tclass.KMBtreeModel.Node (Lit (KMBtreeModel.Node.children (Lit |newparent#0@@2|)))) (|Seq#Equal| (KMBtreeModel.Node.children (Lit |newparent#0@@2|)) (|Seq#Append| (KMBtreeModel.Node.children (Lit |oldparent#0@@2|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (Lit (KMBtreeModel.Node.children (Lit |newparent#0@@2|))))))))))) (=> (< 0 (|Seq#Length| (Lit (KMBtreeModel.Node.pivots (Lit |oldparent#0@@2|))))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit (KMBtreeModel.Node.pivots (Lit |oldparent#0@@2|)))) (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit (KMBtreeModel.Node.pivots (Lit |newparent#0@@2|))))) (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (KMBtreeModel.Node.pivots (Lit |oldparent#0@@2|)))))) (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (KMBtreeModel.Node.pivots (Lit |newparent#0@@2|))))))))))) (=> (and (=> (< 0 (|Seq#Length| (Lit (KMBtreeModel.Node.pivots (Lit |oldparent#0@@2|))))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit (KMBtreeModel.Node.pivots (Lit |oldparent#0@@2|)))) (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit (KMBtreeModel.Node.pivots (Lit |newparent#0@@2|))))) (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (KMBtreeModel.Node.pivots (Lit |oldparent#0@@2|)))))) (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (KMBtreeModel.Node.pivots (Lit |newparent#0@@2|))))))))) (=> (< 0 (|Seq#Length| (Lit (KMBtreeModel.Node.pivots (Lit |oldparent#0@@2|))))) (Lexicographic__Byte__Order.__default.lt (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (KMBtreeModel.Node.pivots (Lit |oldparent#0@@2|)))))) (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (KMBtreeModel.Node.pivots (Lit |newparent#0@@2|))))))))) (|KMBtreeModel.__default.AllKeysBelowBound#canCall| (Lit |newparent#0@@2|) (- (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |newparent#0@@2|)))) 2)))) (=> (and (|KMBtreeModel.__default.AllKeysBelowBound#canCall| (Lit |newparent#0@@2|) (- (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |newparent#0@@2|)))) 2)) (KMBtreeModel.__default.AllKeysBelowBound (Lit |newparent#0@@2|) (- (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |newparent#0@@2|)))) 2))) (|KMBtreeModel.__default.AllKeysAboveBound#canCall| (Lit |newparent#0@@2|) (- (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |newparent#0@@2|)))) 1)))) (and (=> (KMBtreeModel.__default.AppendChild (Lit |oldparent#0@@2|) (Lit |newparent#0@@2|)) (and (and (and (and (and (and (and (KMBtreeModel.Node.Index_q (Lit |oldparent#0@@2|)) (KMBtreeModel.Node.Index_q (Lit |newparent#0@@2|))) (and (< 1 (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |newparent#0@@2|))))) (= (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |newparent#0@@2|)))) (+ (|Seq#Length| (Lit (KMBtreeModel.Node.pivots (Lit |newparent#0@@2|)))) 1)))) (|Seq#Equal| (KMBtreeModel.Node.pivots (Lit |newparent#0@@2|)) (|Seq#Append| (KMBtreeModel.Node.pivots (Lit |oldparent#0@@2|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (KMBtreeModel.Node.pivots (Lit |newparent#0@@2|))))))))))) (|Seq#Equal| (KMBtreeModel.Node.children (Lit |newparent#0@@2|)) (|Seq#Append| (KMBtreeModel.Node.children (Lit |oldparent#0@@2|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (Lit (KMBtreeModel.Node.children (Lit |newparent#0@@2|))))))))))) (=> (< 0 (|Seq#Length| (Lit (KMBtreeModel.Node.pivots (Lit |oldparent#0@@2|))))) (Lexicographic__Byte__Order.__default.lt (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (KMBtreeModel.Node.pivots (Lit |oldparent#0@@2|)))))) (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (KMBtreeModel.Node.pivots (Lit |newparent#0@@2|))))))))) (KMBtreeModel.__default.AllKeysBelowBound (Lit |newparent#0@@2|) (- (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |newparent#0@@2|)))) 2))) (KMBtreeModel.__default.AllKeysAboveBound (Lit |newparent#0@@2|) (- (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |newparent#0@@2|)))) 1)))) (=> (and (and (and (and (and (and (and (KMBtreeModel.Node.Index_q (Lit |oldparent#0@@2|)) (KMBtreeModel.Node.Index_q (Lit |newparent#0@@2|))) (and (< 1 (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |newparent#0@@2|))))) (= (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |newparent#0@@2|)))) (+ (|Seq#Length| (Lit (KMBtreeModel.Node.pivots (Lit |newparent#0@@2|)))) 1)))) (|Seq#Equal| (KMBtreeModel.Node.pivots (Lit |newparent#0@@2|)) (|Seq#Append| (KMBtreeModel.Node.pivots (Lit |oldparent#0@@2|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (KMBtreeModel.Node.pivots (Lit |newparent#0@@2|))))))))))) (|Seq#Equal| (KMBtreeModel.Node.children (Lit |newparent#0@@2|)) (|Seq#Append| (KMBtreeModel.Node.children (Lit |oldparent#0@@2|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (Lit (KMBtreeModel.Node.children (Lit |newparent#0@@2|))))))))))) (=> (< 0 (|Seq#Length| (Lit (KMBtreeModel.Node.pivots (Lit |oldparent#0@@2|))))) (Lexicographic__Byte__Order.__default.lt (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (KMBtreeModel.Node.pivots (Lit |oldparent#0@@2|)))))) (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (KMBtreeModel.Node.pivots (Lit |newparent#0@@2|))))))))) (KMBtreeModel.__default.AllKeysBelowBound (Lit |newparent#0@@2|) (- (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |newparent#0@@2|)))) 2))) (KMBtreeModel.__default.AllKeysAboveBound (Lit |newparent#0@@2|) (- (|Seq#Length| (Lit (KMBtreeModel.Node.children (Lit |newparent#0@@2|)))) 1))) (KMBtreeModel.__default.AppendChild (Lit |oldparent#0@@2|) (Lit |newparent#0@@2|)))))) :qid |BtreeMod.1286:25| :weight 3 :skolemid |13056| :pattern ( (KMBtreeModel.__default.AppendChild (Lit |oldparent#0@@2|) (Lit |newparent#0@@2|))) ))))
(assert (forall (($ly@@668 T@U) (|nodes#0@@37| T@U) ) (!  (=> (and (= (type $ly@@668) LayerTypeType) (= (type |nodes#0@@37|) (SeqType BoxType))) (= (KMBtreeModel.__default.NumElementsOfChildren ($LS $ly@@668) |nodes#0@@37|) (KMBtreeModel.__default.NumElementsOfChildren $ly@@668 |nodes#0@@37|))) :qid |BtreeMod.1428:12| :skolemid |13057| :pattern ( (KMBtreeModel.__default.NumElementsOfChildren ($LS $ly@@668) |nodes#0@@37|)) )))
(assert (forall (($ly@@669 T@U) (|nodes#0@@38| T@U) ) (!  (=> (and (= (type $ly@@669) LayerTypeType) (= (type |nodes#0@@38|) (SeqType BoxType))) (= (KMBtreeModel.__default.NumElementsOfChildren $ly@@669 |nodes#0@@38|) (KMBtreeModel.__default.NumElementsOfChildren $LZ |nodes#0@@38|))) :qid |BtreeMod.1428:12| :skolemid |13058| :pattern ( (KMBtreeModel.__default.NumElementsOfChildren (AsFuelBottom $ly@@669) |nodes#0@@38|)) )))
(assert  (=> true (forall (($ly@@670 T@U) (|nodes#0@@39| T@U) ) (!  (=> (and (and (= (type $ly@@670) LayerTypeType) (= (type |nodes#0@@39|) (SeqType BoxType))) (or (|KMBtreeModel.__default.NumElementsOfChildren#canCall| |nodes#0@@39|) (and ($Is |nodes#0@@39| (TSeq Tclass.KMBtreeModel.Node)) (forall ((|i#10| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#10|) (< |i#10| (|Seq#Length| |nodes#0@@39|))) (KMBtreeModel.__default.WF ($LS $LZ) ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@39| |i#10|))))) :qid |BtreeMod.1429:21| :skolemid |13059| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@39| |i#10|))) ))))) (<= (LitInt 0) (KMBtreeModel.__default.NumElementsOfChildren $ly@@670 |nodes#0@@39|))) :qid |BtreeMod.1428:12| :skolemid |13060| :pattern ( (KMBtreeModel.__default.NumElementsOfChildren $ly@@670 |nodes#0@@39|)) ))))
(assert (forall (($ly@@671 T@U) (|nodes#0@@40| T@U) ) (!  (=> (and (and (= (type $ly@@671) LayerTypeType) (= (type |nodes#0@@40|) (SeqType BoxType))) ($Is |nodes#0@@40| (TSeq Tclass.KMBtreeModel.Node))) (and (=> (|KMBtreeModel.__default.NumElementsOfChildren#requires| $ly@@671 |nodes#0@@40|) (forall ((|i#11| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#11|) (< |i#11| (|Seq#Length| |nodes#0@@40|))) (KMBtreeModel.__default.WF ($LS $LZ) ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@40| |i#11|))))) :qid |BtreeMod.1429:21| :skolemid |13061| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@40| |i#11|))) ))) (=> (forall ((|i#11@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#11@@0|) (< |i#11@@0| (|Seq#Length| |nodes#0@@40|))) (KMBtreeModel.__default.WF ($LS $LZ) ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@40| |i#11@@0|))))) :qid |BtreeMod.1429:21| :skolemid |13061| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@40| |i#11@@0|))) )) (|KMBtreeModel.__default.NumElementsOfChildren#requires| $ly@@671 |nodes#0@@40|)))) :qid |BtreeMod.1428:12| :skolemid |13062| :pattern ( (|KMBtreeModel.__default.NumElementsOfChildren#requires| $ly@@671 |nodes#0@@40|)) )))
(assert  (=> true (forall (($ly@@672 T@U) (|nodes#0@@41| T@U) ) (!  (=> (and (and (= (type $ly@@672) LayerTypeType) (= (type |nodes#0@@41|) (SeqType BoxType))) (or (|KMBtreeModel.__default.NumElementsOfChildren#canCall| |nodes#0@@41|) (and ($Is |nodes#0@@41| (TSeq Tclass.KMBtreeModel.Node)) (forall ((|i#11@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#11@@1|) (< |i#11@@1| (|Seq#Length| |nodes#0@@41|))) (KMBtreeModel.__default.WF ($LS $LZ) ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@41| |i#11@@1|))))) :qid |BtreeMod.1429:21| :skolemid |13061| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@41| |i#11@@1|))) ))))) (and (=> (not (= (|Seq#Length| |nodes#0@@41|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.KMBtreeModel.Node |nodes#0@@41|) (|KMBtreeModel.__default.NumElementsOfChildren#canCall| (Sequences.__default.DropLast Tclass.KMBtreeModel.Node |nodes#0@@41|))) (and (|Sequences.__default.Last#canCall| Tclass.KMBtreeModel.Node |nodes#0@@41|) (|KMBtreeModel.__default.NumElements#canCall| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node |nodes#0@@41|)))))) (= (KMBtreeModel.__default.NumElementsOfChildren ($LS $ly@@672) |nodes#0@@41|) (ite (= (|Seq#Length| |nodes#0@@41|) (LitInt 0)) 0 (+ (KMBtreeModel.__default.NumElementsOfChildren $ly@@672 (Sequences.__default.DropLast Tclass.KMBtreeModel.Node |nodes#0@@41|)) (KMBtreeModel.__default.NumElements $ly@@672 ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node |nodes#0@@41|)))))))) :qid |BtreeMod.1428:12| :skolemid |13063| :pattern ( (KMBtreeModel.__default.NumElementsOfChildren ($LS $ly@@672) |nodes#0@@41|)) ))))
(assert  (=> true (forall (($ly@@673 T@U) (|nodes#0@@42| T@U) ) (!  (=> (and (and (= (type $ly@@673) LayerTypeType) (= (type |nodes#0@@42|) (SeqType BoxType))) (or (|KMBtreeModel.__default.NumElementsOfChildren#canCall| (Lit |nodes#0@@42|)) (and ($Is |nodes#0@@42| (TSeq Tclass.KMBtreeModel.Node)) (forall ((|i#12| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#12|) (< |i#12| (|Seq#Length| (Lit |nodes#0@@42|)))) (KMBtreeModel.__default.WF ($LS $LZ) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |nodes#0@@42|) |i#12|))))) :qid |BtreeMod.1429:21| :skolemid |13064| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@42| |i#12|))) ))))) (and (=> (not (= (|Seq#Length| (Lit |nodes#0@@42|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.KMBtreeModel.Node (Lit |nodes#0@@42|)) (|KMBtreeModel.__default.NumElementsOfChildren#canCall| (Lit (Sequences.__default.DropLast Tclass.KMBtreeModel.Node (Lit |nodes#0@@42|))))) (and (|Sequences.__default.Last#canCall| Tclass.KMBtreeModel.Node (Lit |nodes#0@@42|)) (|KMBtreeModel.__default.NumElements#canCall| (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (Lit |nodes#0@@42|)))))))) (= (KMBtreeModel.__default.NumElementsOfChildren ($LS $ly@@673) (Lit |nodes#0@@42|)) (ite (= (|Seq#Length| (Lit |nodes#0@@42|)) (LitInt 0)) 0 (+ (KMBtreeModel.__default.NumElementsOfChildren ($LS $ly@@673) (Lit (Sequences.__default.DropLast Tclass.KMBtreeModel.Node (Lit |nodes#0@@42|)))) (KMBtreeModel.__default.NumElements ($LS $ly@@673) (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (Lit |nodes#0@@42|)))))))))) :qid |BtreeMod.1428:12| :weight 3 :skolemid |13065| :pattern ( (KMBtreeModel.__default.NumElementsOfChildren ($LS $ly@@673) (Lit |nodes#0@@42|))) ))))
(assert (forall (($ly@@674 T@U) (|node#0@@85| T@U) ) (!  (=> (and (= (type $ly@@674) LayerTypeType) (= (type |node#0@@85|) DatatypeTypeType)) (= (KMBtreeModel.__default.NumElements ($LS $ly@@674) |node#0@@85|) (KMBtreeModel.__default.NumElements $ly@@674 |node#0@@85|))) :qid |BtreeMod.1435:12| :skolemid |13066| :pattern ( (KMBtreeModel.__default.NumElements ($LS $ly@@674) |node#0@@85|)) )))
(assert (forall (($ly@@675 T@U) (|node#0@@86| T@U) ) (!  (=> (and (= (type $ly@@675) LayerTypeType) (= (type |node#0@@86|) DatatypeTypeType)) (= (KMBtreeModel.__default.NumElements $ly@@675 |node#0@@86|) (KMBtreeModel.__default.NumElements $LZ |node#0@@86|))) :qid |BtreeMod.1435:12| :skolemid |13067| :pattern ( (KMBtreeModel.__default.NumElements (AsFuelBottom $ly@@675) |node#0@@86|)) )))
(assert  (=> true (forall (($ly@@676 T@U) (|node#0@@87| T@U) ) (!  (=> (and (and (= (type $ly@@676) LayerTypeType) (= (type |node#0@@87|) DatatypeTypeType)) (or (|KMBtreeModel.__default.NumElements#canCall| |node#0@@87|) (and ($Is |node#0@@87| Tclass.KMBtreeModel.Node) (KMBtreeModel.__default.WF ($LS $LZ) |node#0@@87|)))) (<= (LitInt 0) (KMBtreeModel.__default.NumElements $ly@@676 |node#0@@87|))) :qid |BtreeMod.1435:12| :skolemid |13068| :pattern ( (KMBtreeModel.__default.NumElements $ly@@676 |node#0@@87|)) ))))
(assert (forall (($ly@@677 T@U) (|node#0@@88| T@U) ) (!  (=> (and (and (= (type $ly@@677) LayerTypeType) (= (type |node#0@@88|) DatatypeTypeType)) ($Is |node#0@@88| Tclass.KMBtreeModel.Node)) (and (=> (|KMBtreeModel.__default.NumElements#requires| $ly@@677 |node#0@@88|) (KMBtreeModel.__default.WF ($LS $LZ) |node#0@@88|)) (=> (KMBtreeModel.__default.WF ($LS $LZ) |node#0@@88|) (|KMBtreeModel.__default.NumElements#requires| $ly@@677 |node#0@@88|)))) :qid |BtreeMod.1435:12| :skolemid |13069| :pattern ( (|KMBtreeModel.__default.NumElements#requires| $ly@@677 |node#0@@88|)) )))
(assert  (=> true (forall (($ly@@678 T@U) (|node#0@@89| T@U) ) (!  (=> (and (and (= (type $ly@@678) LayerTypeType) (= (type |node#0@@89|) DatatypeTypeType)) (or (|KMBtreeModel.__default.NumElements#canCall| |node#0@@89|) (and ($Is |node#0@@89| Tclass.KMBtreeModel.Node) (KMBtreeModel.__default.WF ($LS $LZ) |node#0@@89|)))) (and (=> (not (KMBtreeModel.Node.Leaf_q |node#0@@89|)) (|KMBtreeModel.__default.NumElementsOfChildren#canCall| (KMBtreeModel.Node.children |node#0@@89|))) (= (KMBtreeModel.__default.NumElements ($LS $ly@@678) |node#0@@89|) (ite (KMBtreeModel.Node.Leaf_q |node#0@@89|) (|Seq#Length| (KMBtreeModel.Node.keys |node#0@@89|)) (KMBtreeModel.__default.NumElementsOfChildren $ly@@678 (KMBtreeModel.Node.children |node#0@@89|)))))) :qid |BtreeMod.1435:12| :skolemid |13070| :pattern ( (KMBtreeModel.__default.NumElements ($LS $ly@@678) |node#0@@89|)) ))))
(assert  (=> true (forall (($ly@@679 T@U) (|node#0@@90| T@U) ) (!  (=> (and (and (= (type $ly@@679) LayerTypeType) (= (type |node#0@@90|) DatatypeTypeType)) (or (|KMBtreeModel.__default.NumElements#canCall| (Lit |node#0@@90|)) (and ($Is |node#0@@90| Tclass.KMBtreeModel.Node) (U_2_bool (Lit (bool_2_U (KMBtreeModel.__default.WF ($LS $LZ) (Lit |node#0@@90|)))))))) (and (=> (not (U_2_bool (Lit (bool_2_U (KMBtreeModel.Node.Leaf_q (Lit |node#0@@90|)))))) (|KMBtreeModel.__default.NumElementsOfChildren#canCall| (Lit (KMBtreeModel.Node.children (Lit |node#0@@90|))))) (= (KMBtreeModel.__default.NumElements ($LS $ly@@679) (Lit |node#0@@90|)) (ite (KMBtreeModel.Node.Leaf_q (Lit |node#0@@90|)) (|Seq#Length| (Lit (KMBtreeModel.Node.keys (Lit |node#0@@90|)))) (KMBtreeModel.__default.NumElementsOfChildren ($LS $ly@@679) (Lit (KMBtreeModel.Node.children (Lit |node#0@@90|)))))))) :qid |BtreeMod.1435:12| :weight 3 :skolemid |13071| :pattern ( (KMBtreeModel.__default.NumElements ($LS $ly@@679) (Lit |node#0@@90|))) ))))
(assert (forall ((arg0@@371 T@U) (arg1@@228 T@U) ) (! (= (type (KMBtreeModel.__default.ToSeqChildren arg0@@371 arg1@@228)) DatatypeTypeType) :qid |funType:KMBtreeModel.__default.ToSeqChildren| :pattern ( (KMBtreeModel.__default.ToSeqChildren arg0@@371 arg1@@228)) )))
(assert (forall (($ly@@680 T@U) (|nodes#0@@43| T@U) ) (!  (=> (and (= (type $ly@@680) LayerTypeType) (= (type |nodes#0@@43|) (SeqType BoxType))) (= (KMBtreeModel.__default.ToSeqChildren ($LS $ly@@680) |nodes#0@@43|) (KMBtreeModel.__default.ToSeqChildren $ly@@680 |nodes#0@@43|))) :qid |BtreeMod.1627:12| :skolemid |13072| :pattern ( (KMBtreeModel.__default.ToSeqChildren ($LS $ly@@680) |nodes#0@@43|)) )))
(assert (forall (($ly@@681 T@U) (|nodes#0@@44| T@U) ) (!  (=> (and (= (type $ly@@681) LayerTypeType) (= (type |nodes#0@@44|) (SeqType BoxType))) (= (KMBtreeModel.__default.ToSeqChildren $ly@@681 |nodes#0@@44|) (KMBtreeModel.__default.ToSeqChildren $LZ |nodes#0@@44|))) :qid |BtreeMod.1627:12| :skolemid |13073| :pattern ( (KMBtreeModel.__default.ToSeqChildren (AsFuelBottom $ly@@681) |nodes#0@@44|)) )))
(assert  (=> true (forall (($ly@@682 T@U) (|nodes#0@@45| T@U) ) (!  (=> (and (and (= (type $ly@@682) LayerTypeType) (= (type |nodes#0@@45|) (SeqType BoxType))) (or (|KMBtreeModel.__default.ToSeqChildren#canCall| |nodes#0@@45|) (and ($Is |nodes#0@@45| (TSeq Tclass.KMBtreeModel.Node)) (forall ((|i#17@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#17@@4|) (< |i#17@@4| (|Seq#Length| |nodes#0@@45|))) (KMBtreeModel.__default.WF ($LS $LZ) ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@45| |i#17@@4|))))) :qid |BtreeMod.1628:21| :skolemid |13074| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@45| |i#17@@4|))) ))))) (and (and (and (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (KMBtreeModel.__default.ToSeqChildren $ly@@682 |nodes#0@@45|)))) (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (KMBtreeModel.__default.ToSeqChildren $ly@@682 |nodes#0@@45|))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (KMBtreeModel.__default.ToSeqChildren $ly@@682 |nodes#0@@45|)))) (|Seq#Length| |nodes#0@@45|))) (forall ((|i#18@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#18@@4|) (< |i#18@@4| (|Seq#Length| |nodes#0@@45|))) (|_System.Tuple2#Equal| (|#_System._tuple#2._#Make2| (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (KMBtreeModel.__default.ToSeqChildren $ly@@682 |nodes#0@@45|))) |i#18@@4|) (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (KMBtreeModel.__default.ToSeqChildren $ly@@682 |nodes#0@@45|))) |i#18@@4|)) (KMBtreeModel.__default.ToSeq StartFuel_KMBtreeModel._default.ToSeq ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@45| |i#18@@4|)))))) :qid |BtreeMod.1630:20| :skolemid |13075| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@45| |i#18@@4|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (KMBtreeModel.__default.ToSeqChildren $ly@@682 |nodes#0@@45|))) |i#18@@4|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (KMBtreeModel.__default.ToSeqChildren $ly@@682 |nodes#0@@45|))) |i#18@@4|))) ))) (|Seq#Equal| (Sequences.__default.FlattenShape (TSeq Tclass.NativeTypes.byte) StartFuel_Sequences._default.FlattenShape ($Unbox (SeqType BoxType) (_System.Tuple2._0 (KMBtreeModel.__default.ToSeqChildren $ly@@682 |nodes#0@@45|)))) (Sequences.__default.FlattenShape Tclass.ValueMessage.Message StartFuel_Sequences._default.FlattenShape ($Unbox (SeqType BoxType) (_System.Tuple2._1 (KMBtreeModel.__default.ToSeqChildren $ly@@682 |nodes#0@@45|)))))) ($Is (KMBtreeModel.__default.ToSeqChildren $ly@@682 |nodes#0@@45|) (Tclass._System.Tuple2 (TSeq (TSeq (TSeq Tclass.NativeTypes.byte))) (TSeq (TSeq Tclass.ValueMessage.Message)))))) :qid |BtreeMod.1627:12| :skolemid |13076| :pattern ( (KMBtreeModel.__default.ToSeqChildren $ly@@682 |nodes#0@@45|)) ))))
(assert (forall (($ly@@683 T@U) (|nodes#0@@46| T@U) ) (!  (=> (and (and (= (type $ly@@683) LayerTypeType) (= (type |nodes#0@@46|) (SeqType BoxType))) ($Is |nodes#0@@46| (TSeq Tclass.KMBtreeModel.Node))) (and (=> (|KMBtreeModel.__default.ToSeqChildren#requires| $ly@@683 |nodes#0@@46|) (forall ((|i#19@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#19@@2|) (< |i#19@@2| (|Seq#Length| |nodes#0@@46|))) (KMBtreeModel.__default.WF ($LS $LZ) ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@46| |i#19@@2|))))) :qid |BtreeMod.1628:21| :skolemid |13077| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@46| |i#19@@2|))) ))) (=> (forall ((|i#19@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#19@@3|) (< |i#19@@3| (|Seq#Length| |nodes#0@@46|))) (KMBtreeModel.__default.WF ($LS $LZ) ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@46| |i#19@@3|))))) :qid |BtreeMod.1628:21| :skolemid |13077| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@46| |i#19@@3|))) )) (|KMBtreeModel.__default.ToSeqChildren#requires| $ly@@683 |nodes#0@@46|)))) :qid |BtreeMod.1627:12| :skolemid |13078| :pattern ( (|KMBtreeModel.__default.ToSeqChildren#requires| $ly@@683 |nodes#0@@46|)) )))
(assert  (=> true (forall (($ly@@684 T@U) (|nodes#0@@47| T@U) ) (!  (=> (and (and (= (type $ly@@684) LayerTypeType) (= (type |nodes#0@@47|) (SeqType BoxType))) (or (|KMBtreeModel.__default.ToSeqChildren#canCall| |nodes#0@@47|) (and ($Is |nodes#0@@47| (TSeq Tclass.KMBtreeModel.Node)) (forall ((|i#19@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#19@@4|) (< |i#19@@4| (|Seq#Length| |nodes#0@@47|))) (KMBtreeModel.__default.WF ($LS $LZ) ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@47| |i#19@@4|))))) :qid |BtreeMod.1628:21| :skolemid |13077| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@47| |i#19@@4|))) ))))) (and (=> (not (= (|Seq#Length| |nodes#0@@47|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.KMBtreeModel.Node |nodes#0@@47|) (|KMBtreeModel.__default.ToSeqChildren#canCall| (Sequences.__default.DropLast Tclass.KMBtreeModel.Node |nodes#0@@47|))) (let ((|kv1#3| (KMBtreeModel.__default.ToSeqChildren $ly@@684 (Sequences.__default.DropLast Tclass.KMBtreeModel.Node |nodes#0@@47|)))) (and (and (|Sequences.__default.Last#canCall| Tclass.KMBtreeModel.Node |nodes#0@@47|) (|KMBtreeModel.__default.ToSeq#canCall| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node |nodes#0@@47|)))) (let ((|kv2#3| (KMBtreeModel.__default.ToSeq $ly@@684 ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node |nodes#0@@47|))))) (and (and (_System.Tuple2.___hMake2_q |kv1#3|) (_System.Tuple2.___hMake2_q |kv2#3|)) (and (_System.Tuple2.___hMake2_q |kv1#3|) (_System.Tuple2.___hMake2_q |kv2#3|)))))))) (= (KMBtreeModel.__default.ToSeqChildren ($LS $ly@@684) |nodes#0@@47|) (ite (= (|Seq#Length| |nodes#0@@47|) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|kv1#3@@0| (KMBtreeModel.__default.ToSeqChildren $ly@@684 (Sequences.__default.DropLast Tclass.KMBtreeModel.Node |nodes#0@@47|)))) (let ((|kv2#3@@0| (KMBtreeModel.__default.ToSeq $ly@@684 ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node |nodes#0@@47|))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| ($Unbox (SeqType BoxType) (_System.Tuple2._0 |kv1#3@@0|)) (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._0 |kv2#3@@0|)))) ($Box (|Seq#Append| ($Unbox (SeqType BoxType) (_System.Tuple2._1 |kv1#3@@0|)) (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._1 |kv2#3@@0|))))))))))) :qid |BtreeMod.1627:12| :skolemid |13079| :pattern ( (KMBtreeModel.__default.ToSeqChildren ($LS $ly@@684) |nodes#0@@47|)) ))))
(assert  (=> true (forall (($ly@@685 T@U) (|nodes#0@@48| T@U) ) (!  (=> (and (and (= (type $ly@@685) LayerTypeType) (= (type |nodes#0@@48|) (SeqType BoxType))) (or (|KMBtreeModel.__default.ToSeqChildren#canCall| (Lit |nodes#0@@48|)) (and ($Is |nodes#0@@48| (TSeq Tclass.KMBtreeModel.Node)) (forall ((|i#20@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#20@@4|) (< |i#20@@4| (|Seq#Length| (Lit |nodes#0@@48|)))) (KMBtreeModel.__default.WF ($LS $LZ) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |nodes#0@@48|) |i#20@@4|))))) :qid |BtreeMod.1628:21| :skolemid |13080| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@48| |i#20@@4|))) ))))) (and (=> (not (= (|Seq#Length| (Lit |nodes#0@@48|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.KMBtreeModel.Node (Lit |nodes#0@@48|)) (|KMBtreeModel.__default.ToSeqChildren#canCall| (Lit (Sequences.__default.DropLast Tclass.KMBtreeModel.Node (Lit |nodes#0@@48|))))) (let ((|kv1#4| (Lit (KMBtreeModel.__default.ToSeqChildren ($LS $ly@@685) (Lit (Sequences.__default.DropLast Tclass.KMBtreeModel.Node (Lit |nodes#0@@48|))))))) (and (and (|Sequences.__default.Last#canCall| Tclass.KMBtreeModel.Node (Lit |nodes#0@@48|)) (|KMBtreeModel.__default.ToSeq#canCall| (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (Lit |nodes#0@@48|)))))) (let ((|kv2#4| (KMBtreeModel.__default.ToSeq ($LS $ly@@685) (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (Lit |nodes#0@@48|))))))) (and (and (_System.Tuple2.___hMake2_q |kv1#4|) (_System.Tuple2.___hMake2_q |kv2#4|)) (and (_System.Tuple2.___hMake2_q |kv1#4|) (_System.Tuple2.___hMake2_q |kv2#4|)))))))) (= (KMBtreeModel.__default.ToSeqChildren ($LS $ly@@685) (Lit |nodes#0@@48|)) (ite (= (|Seq#Length| (Lit |nodes#0@@48|)) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|kv1#4@@0| (Lit (KMBtreeModel.__default.ToSeqChildren ($LS $ly@@685) (Lit (Sequences.__default.DropLast Tclass.KMBtreeModel.Node (Lit |nodes#0@@48|))))))) (let ((|kv2#4@@0| (KMBtreeModel.__default.ToSeq ($LS $ly@@685) (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (Lit |nodes#0@@48|))))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| ($Unbox (SeqType BoxType) (_System.Tuple2._0 |kv1#4@@0|)) (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._0 |kv2#4@@0|)))) ($Box (|Seq#Append| ($Unbox (SeqType BoxType) (_System.Tuple2._1 |kv1#4@@0|)) (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._1 |kv2#4@@0|))))))))))) :qid |BtreeMod.1627:12| :weight 3 :skolemid |13081| :pattern ( (KMBtreeModel.__default.ToSeqChildren ($LS $ly@@685) (Lit |nodes#0@@48|))) ))))
(assert (forall (($ly@@686 T@U) (|node#0@@91| T@U) ) (!  (=> (and (= (type $ly@@686) LayerTypeType) (= (type |node#0@@91|) DatatypeTypeType)) (= (KMBtreeModel.__default.ToSeq ($LS $ly@@686) |node#0@@91|) (KMBtreeModel.__default.ToSeq $ly@@686 |node#0@@91|))) :qid |BtreeMod.1640:22| :skolemid |13082| :pattern ( (KMBtreeModel.__default.ToSeq ($LS $ly@@686) |node#0@@91|)) )))
(assert (forall (($ly@@687 T@U) (|node#0@@92| T@U) ) (!  (=> (and (= (type $ly@@687) LayerTypeType) (= (type |node#0@@92|) DatatypeTypeType)) (= (KMBtreeModel.__default.ToSeq $ly@@687 |node#0@@92|) (KMBtreeModel.__default.ToSeq $LZ |node#0@@92|))) :qid |BtreeMod.1640:22| :skolemid |13083| :pattern ( (KMBtreeModel.__default.ToSeq (AsFuelBottom $ly@@687) |node#0@@92|)) )))
(assert  (=> true (forall (($ly@@688 T@U) (|node#0@@93| T@U) ) (!  (=> (and (and (= (type $ly@@688) LayerTypeType) (= (type |node#0@@93|) DatatypeTypeType)) (or (|KMBtreeModel.__default.ToSeq#canCall| |node#0@@93|) (and ($Is |node#0@@93| Tclass.KMBtreeModel.Node) (KMBtreeModel.__default.WF ($LS $LZ) |node#0@@93|)))) (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (KMBtreeModel.__default.ToSeq $ly@@688 |node#0@@93|)))) (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (KMBtreeModel.__default.ToSeq $ly@@688 |node#0@@93|))))) ($Is (KMBtreeModel.__default.ToSeq $ly@@688 |node#0@@93|) (Tclass._System.Tuple2 (TSeq (TSeq Tclass.NativeTypes.byte)) (TSeq Tclass.ValueMessage.Message))))) :qid |BtreeMod.1640:22| :skolemid |13084| :pattern ( (KMBtreeModel.__default.ToSeq $ly@@688 |node#0@@93|)) ))))
(assert (forall (($ly@@689 T@U) (|node#0@@94| T@U) ) (!  (=> (and (and (= (type $ly@@689) LayerTypeType) (= (type |node#0@@94|) DatatypeTypeType)) ($Is |node#0@@94| Tclass.KMBtreeModel.Node)) (and (=> (|KMBtreeModel.__default.ToSeq#requires| $ly@@689 |node#0@@94|) (KMBtreeModel.__default.WF ($LS $LZ) |node#0@@94|)) (=> (KMBtreeModel.__default.WF ($LS $LZ) |node#0@@94|) (|KMBtreeModel.__default.ToSeq#requires| $ly@@689 |node#0@@94|)))) :qid |BtreeMod.1640:22| :skolemid |13085| :pattern ( (|KMBtreeModel.__default.ToSeq#requires| $ly@@689 |node#0@@94|)) )))
(assert (= (type StartFuel_Sequences._default.Flatten) LayerTypeType))
(assert  (=> true (forall (($ly@@690 T@U) (|node#0@@95| T@U) ) (!  (=> (and (and (= (type $ly@@690) LayerTypeType) (= (type |node#0@@95|) DatatypeTypeType)) (or (|KMBtreeModel.__default.ToSeq#canCall| |node#0@@95|) (and ($Is |node#0@@95| Tclass.KMBtreeModel.Node) (KMBtreeModel.__default.WF ($LS $LZ) |node#0@@95|)))) (and (=> (not (KMBtreeModel.Node.Leaf_q |node#0@@95|)) (and (|KMBtreeModel.__default.ToSeqChildren#canCall| (KMBtreeModel.Node.children |node#0@@95|)) (let ((|valuelists#3| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (KMBtreeModel.__default.ToSeqChildren $ly@@690 (KMBtreeModel.Node.children |node#0@@95|)))))) (let ((|keylists#3| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (KMBtreeModel.__default.ToSeqChildren $ly@@690 (KMBtreeModel.Node.children |node#0@@95|)))))) (and (|Sequences.__default.Flatten#canCall| (TSeq Tclass.NativeTypes.byte) |keylists#3|) (|Sequences.__default.Flatten#canCall| Tclass.ValueMessage.Message |valuelists#3|)))))) (= (KMBtreeModel.__default.ToSeq ($LS $ly@@690) |node#0@@95|) (ite (KMBtreeModel.Node.Leaf_q |node#0@@95|) (|#_System._tuple#2._#Make2| ($Box (KMBtreeModel.Node.keys |node#0@@95|)) ($Box (KMBtreeModel.Node.values |node#0@@95|))) (let ((|valuelists#3@@0| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (KMBtreeModel.__default.ToSeqChildren $ly@@690 (KMBtreeModel.Node.children |node#0@@95|)))))) (let ((|keylists#3@@0| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (KMBtreeModel.__default.ToSeqChildren $ly@@690 (KMBtreeModel.Node.children |node#0@@95|)))))) (|#_System._tuple#2._#Make2| ($Box (Sequences.__default.Flatten (TSeq Tclass.NativeTypes.byte) StartFuel_Sequences._default.Flatten |keylists#3@@0|)) ($Box (Sequences.__default.Flatten Tclass.ValueMessage.Message StartFuel_Sequences._default.Flatten |valuelists#3@@0|))))))))) :qid |BtreeMod.1640:22| :skolemid |13086| :pattern ( (KMBtreeModel.__default.ToSeq ($LS $ly@@690) |node#0@@95|)) ))))
(assert  (=> true (forall (($ly@@691 T@U) (|node#0@@96| T@U) ) (!  (=> (and (and (= (type $ly@@691) LayerTypeType) (= (type |node#0@@96|) DatatypeTypeType)) (or (|KMBtreeModel.__default.ToSeq#canCall| (Lit |node#0@@96|)) (and ($Is |node#0@@96| Tclass.KMBtreeModel.Node) (U_2_bool (Lit (bool_2_U (KMBtreeModel.__default.WF ($LS $LZ) (Lit |node#0@@96|)))))))) (and (=> (not (U_2_bool (Lit (bool_2_U (KMBtreeModel.Node.Leaf_q (Lit |node#0@@96|)))))) (and (|KMBtreeModel.__default.ToSeqChildren#canCall| (Lit (KMBtreeModel.Node.children (Lit |node#0@@96|)))) (let ((|valuelists#4| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Lit (KMBtreeModel.__default.ToSeqChildren ($LS $ly@@691) (Lit (KMBtreeModel.Node.children (Lit |node#0@@96|))))))))) (let ((|keylists#4| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Lit (KMBtreeModel.__default.ToSeqChildren ($LS $ly@@691) (Lit (KMBtreeModel.Node.children (Lit |node#0@@96|))))))))) (and (|Sequences.__default.Flatten#canCall| (TSeq Tclass.NativeTypes.byte) |keylists#4|) (|Sequences.__default.Flatten#canCall| Tclass.ValueMessage.Message |valuelists#4|)))))) (= (KMBtreeModel.__default.ToSeq ($LS $ly@@691) (Lit |node#0@@96|)) (ite (KMBtreeModel.Node.Leaf_q (Lit |node#0@@96|)) (|#_System._tuple#2._#Make2| ($Box (Lit (KMBtreeModel.Node.keys (Lit |node#0@@96|)))) ($Box (Lit (KMBtreeModel.Node.values (Lit |node#0@@96|))))) (let ((|valuelists#4@@0| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Lit (KMBtreeModel.__default.ToSeqChildren ($LS $ly@@691) (Lit (KMBtreeModel.Node.children (Lit |node#0@@96|))))))))) (let ((|keylists#4@@0| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Lit (KMBtreeModel.__default.ToSeqChildren ($LS $ly@@691) (Lit (KMBtreeModel.Node.children (Lit |node#0@@96|))))))))) (|#_System._tuple#2._#Make2| ($Box (Sequences.__default.Flatten (TSeq Tclass.NativeTypes.byte) StartFuel_Sequences._default.Flatten |keylists#4@@0|)) ($Box (Sequences.__default.Flatten Tclass.ValueMessage.Message StartFuel_Sequences._default.Flatten |valuelists#4@@0|))))))))) :qid |BtreeMod.1640:22| :weight 3 :skolemid |13087| :pattern ( (KMBtreeModel.__default.ToSeq ($LS $ly@@691) (Lit |node#0@@96|))) ))))
(assert (forall ((|a#0#0#0@@2| T@U) (|a#0#1#0@@1| T@U) ) (!  (=> (and (= (type |a#0#0#0@@2|) (SeqType BoxType)) (= (type |a#0#1#0@@1|) (SeqType BoxType))) (= (DatatypeCtorId (|#KMBtreeModel.Node.Leaf| |a#0#0#0@@2| |a#0#1#0@@1|)) |##KMBtreeModel.Node.Leaf|)) :qid |BtreeMod.18:12| :skolemid |13088| :pattern ( (|#KMBtreeModel.Node.Leaf| |a#0#0#0@@2| |a#0#1#0@@1|)) )))
(assert (forall ((d@@49 T@U) ) (!  (=> (= (type d@@49) DatatypeTypeType) (and (=> (KMBtreeModel.Node.Leaf_q d@@49) (= (DatatypeCtorId d@@49) |##KMBtreeModel.Node.Leaf|)) (=> (= (DatatypeCtorId d@@49) |##KMBtreeModel.Node.Leaf|) (KMBtreeModel.Node.Leaf_q d@@49)))) :qid |unknown.0:0| :skolemid |13089| :pattern ( (KMBtreeModel.Node.Leaf_q d@@49)) )))
(assert (forall ((d@@50 T@U) ) (!  (=> (and (= (type d@@50) DatatypeTypeType) (KMBtreeModel.Node.Leaf_q d@@50)) (exists ((|a#1#0#0@@2| T@U) (|a#1#1#0@@1| T@U) ) (!  (and (and (= (type |a#1#0#0@@2|) (SeqType BoxType)) (= (type |a#1#1#0@@1|) (SeqType BoxType))) (= d@@50 (|#KMBtreeModel.Node.Leaf| |a#1#0#0@@2| |a#1#1#0@@1|))) :qid |BtreeMod.18:12| :skolemid |13090| :no-pattern (type |a#1#0#0@@2|) :no-pattern (type |a#1#1#0@@1|) :no-pattern (U_2_int |a#1#0#0@@2|) :no-pattern (U_2_bool |a#1#0#0@@2|) :no-pattern (U_2_int |a#1#1#0@@1|) :no-pattern (U_2_bool |a#1#1#0@@1|) ))) :qid |unknown.0:0| :skolemid |13091| :pattern ( (KMBtreeModel.Node.Leaf_q d@@50)) )))
(assert (forall ((|a#2#0#0@@2| T@U) (|a#2#1#0@@1| T@U) ) (!  (=> (and (= (type |a#2#0#0@@2|) (SeqType BoxType)) (= (type |a#2#1#0@@1|) (SeqType BoxType))) (and (=> ($Is (|#KMBtreeModel.Node.Leaf| |a#2#0#0@@2| |a#2#1#0@@1|) Tclass.KMBtreeModel.Node) (and ($Is |a#2#0#0@@2| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |a#2#1#0@@1| (TSeq Tclass.ValueMessage.Message)))) (=> (and ($Is |a#2#0#0@@2| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |a#2#1#0@@1| (TSeq Tclass.ValueMessage.Message))) ($Is (|#KMBtreeModel.Node.Leaf| |a#2#0#0@@2| |a#2#1#0@@1|) Tclass.KMBtreeModel.Node)))) :qid |BtreeMod.18:12| :skolemid |13092| :pattern ( ($Is (|#KMBtreeModel.Node.Leaf| |a#2#0#0@@2| |a#2#1#0@@1|) Tclass.KMBtreeModel.Node)) )))
(assert (forall ((|a#3#0#0@@2| T@U) (|a#3#1#0@@1| T@U) ($h@@79 T@U) ) (!  (=> (and (and (and (= (type |a#3#0#0@@2|) (SeqType BoxType)) (= (type |a#3#1#0@@1|) (SeqType BoxType))) (= (type $h@@79) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@79)) (and (=> ($IsAlloc (|#KMBtreeModel.Node.Leaf| |a#3#0#0@@2| |a#3#1#0@@1|) Tclass.KMBtreeModel.Node $h@@79) (and ($IsAlloc |a#3#0#0@@2| (TSeq (TSeq Tclass.NativeTypes.byte)) $h@@79) ($IsAlloc |a#3#1#0@@1| (TSeq Tclass.ValueMessage.Message) $h@@79))) (=> (and ($IsAlloc |a#3#0#0@@2| (TSeq (TSeq Tclass.NativeTypes.byte)) $h@@79) ($IsAlloc |a#3#1#0@@1| (TSeq Tclass.ValueMessage.Message) $h@@79)) ($IsAlloc (|#KMBtreeModel.Node.Leaf| |a#3#0#0@@2| |a#3#1#0@@1|) Tclass.KMBtreeModel.Node $h@@79)))) :qid |BtreeMod.18:12| :skolemid |13093| :pattern ( ($IsAlloc (|#KMBtreeModel.Node.Leaf| |a#3#0#0@@2| |a#3#1#0@@1|) Tclass.KMBtreeModel.Node $h@@79)) )))
(assert (forall ((d@@51 T@U) ($h@@80 T@U) ) (!  (=> (and (and (= (type d@@51) DatatypeTypeType) (= (type $h@@80) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@80) (and (KMBtreeModel.Node.Leaf_q d@@51) ($IsAlloc d@@51 Tclass.KMBtreeModel.Node $h@@80)))) ($IsAlloc (KMBtreeModel.Node.keys d@@51) (TSeq (TSeq Tclass.NativeTypes.byte)) $h@@80)) :qid |unknown.0:0| :skolemid |13094| :pattern ( ($IsAlloc (KMBtreeModel.Node.keys d@@51) (TSeq (TSeq Tclass.NativeTypes.byte)) $h@@80)) )))
(assert (forall ((d@@52 T@U) ($h@@81 T@U) ) (!  (=> (and (and (= (type d@@52) DatatypeTypeType) (= (type $h@@81) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@81) (and (KMBtreeModel.Node.Leaf_q d@@52) ($IsAlloc d@@52 Tclass.KMBtreeModel.Node $h@@81)))) ($IsAlloc (KMBtreeModel.Node.values d@@52) (TSeq Tclass.ValueMessage.Message) $h@@81)) :qid |unknown.0:0| :skolemid |13095| :pattern ( ($IsAlloc (KMBtreeModel.Node.values d@@52) (TSeq Tclass.ValueMessage.Message) $h@@81)) )))
(assert (forall ((|a#4#0#0@@2| T@U) (|a#4#1#0@@1| T@U) ) (!  (=> (and (= (type |a#4#0#0@@2|) (SeqType BoxType)) (= (type |a#4#1#0@@1|) (SeqType BoxType))) (= (|#KMBtreeModel.Node.Leaf| (Lit |a#4#0#0@@2|) (Lit |a#4#1#0@@1|)) (Lit (|#KMBtreeModel.Node.Leaf| |a#4#0#0@@2| |a#4#1#0@@1|)))) :qid |BtreeMod.18:12| :skolemid |13096| :pattern ( (|#KMBtreeModel.Node.Leaf| (Lit |a#4#0#0@@2|) (Lit |a#4#1#0@@1|))) )))
(assert (forall ((|a#5#0#0@@2| T@U) (|a#5#1#0@@1| T@U) ) (!  (=> (and (= (type |a#5#0#0@@2|) (SeqType BoxType)) (= (type |a#5#1#0@@1|) (SeqType BoxType))) (= (KMBtreeModel.Node.keys (|#KMBtreeModel.Node.Leaf| |a#5#0#0@@2| |a#5#1#0@@1|)) |a#5#0#0@@2|)) :qid |BtreeMod.18:12| :skolemid |13097| :pattern ( (|#KMBtreeModel.Node.Leaf| |a#5#0#0@@2| |a#5#1#0@@1|)) )))
(assert (forall ((|a#6#0#0@@2| T@U) (|a#6#1#0@@1| T@U) (i@@31 Int) ) (!  (=> (and (and (= (type |a#6#0#0@@2|) (SeqType BoxType)) (= (type |a#6#1#0@@1|) (SeqType BoxType))) (and (<= 0 i@@31) (< i@@31 (|Seq#Length| |a#6#0#0@@2|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#6#0#0@@2| i@@31))) (DtRank (|#KMBtreeModel.Node.Leaf| |a#6#0#0@@2| |a#6#1#0@@1|)))) :qid |BtreeMod.18:12| :skolemid |13098| :pattern ( (|Seq#Index| |a#6#0#0@@2| i@@31) (|#KMBtreeModel.Node.Leaf| |a#6#0#0@@2| |a#6#1#0@@1|)) )))
(assert (forall ((|a#7#0#0@@2| T@U) (|a#7#1#0@@1| T@U) ) (!  (=> (and (= (type |a#7#0#0@@2|) (SeqType BoxType)) (= (type |a#7#1#0@@1|) (SeqType BoxType))) (< (|Seq#Rank| |a#7#0#0@@2|) (DtRank (|#KMBtreeModel.Node.Leaf| |a#7#0#0@@2| |a#7#1#0@@1|)))) :qid |BtreeMod.18:12| :skolemid |13099| :pattern ( (|#KMBtreeModel.Node.Leaf| |a#7#0#0@@2| |a#7#1#0@@1|)) )))
(assert (forall ((|a#8#0#0@@2| T@U) (|a#8#1#0@@1| T@U) ) (!  (=> (and (= (type |a#8#0#0@@2|) (SeqType BoxType)) (= (type |a#8#1#0@@1|) (SeqType BoxType))) (= (KMBtreeModel.Node.values (|#KMBtreeModel.Node.Leaf| |a#8#0#0@@2| |a#8#1#0@@1|)) |a#8#1#0@@1|)) :qid |BtreeMod.18:12| :skolemid |13100| :pattern ( (|#KMBtreeModel.Node.Leaf| |a#8#0#0@@2| |a#8#1#0@@1|)) )))
(assert (forall ((|a#9#0#0@@2| T@U) (|a#9#1#0@@1| T@U) (i@@32 Int) ) (!  (=> (and (and (= (type |a#9#0#0@@2|) (SeqType BoxType)) (= (type |a#9#1#0@@1|) (SeqType BoxType))) (and (<= 0 i@@32) (< i@@32 (|Seq#Length| |a#9#1#0@@1|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#9#1#0@@1| i@@32))) (DtRank (|#KMBtreeModel.Node.Leaf| |a#9#0#0@@2| |a#9#1#0@@1|)))) :qid |BtreeMod.18:12| :skolemid |13101| :pattern ( (|Seq#Index| |a#9#1#0@@1| i@@32) (|#KMBtreeModel.Node.Leaf| |a#9#0#0@@2| |a#9#1#0@@1|)) )))
(assert (forall ((|a#10#0#0@@2| T@U) (|a#10#1#0@@1| T@U) ) (!  (=> (and (= (type |a#10#0#0@@2|) (SeqType BoxType)) (= (type |a#10#1#0@@1|) (SeqType BoxType))) (< (|Seq#Rank| |a#10#1#0@@1|) (DtRank (|#KMBtreeModel.Node.Leaf| |a#10#0#0@@2| |a#10#1#0@@1|)))) :qid |BtreeMod.18:12| :skolemid |13102| :pattern ( (|#KMBtreeModel.Node.Leaf| |a#10#0#0@@2| |a#10#1#0@@1|)) )))
(assert (forall ((|a#11#0#0@@2| T@U) (|a#11#1#0@@1| T@U) ) (!  (=> (and (= (type |a#11#0#0@@2|) (SeqType BoxType)) (= (type |a#11#1#0@@1|) (SeqType BoxType))) (= (DatatypeCtorId (|#KMBtreeModel.Node.Index| |a#11#0#0@@2| |a#11#1#0@@1|)) |##KMBtreeModel.Node.Index|)) :qid |BtreeMod.19:13| :skolemid |13103| :pattern ( (|#KMBtreeModel.Node.Index| |a#11#0#0@@2| |a#11#1#0@@1|)) )))
(assert (forall ((d@@53 T@U) ) (!  (=> (= (type d@@53) DatatypeTypeType) (and (=> (KMBtreeModel.Node.Index_q d@@53) (= (DatatypeCtorId d@@53) |##KMBtreeModel.Node.Index|)) (=> (= (DatatypeCtorId d@@53) |##KMBtreeModel.Node.Index|) (KMBtreeModel.Node.Index_q d@@53)))) :qid |unknown.0:0| :skolemid |13104| :pattern ( (KMBtreeModel.Node.Index_q d@@53)) )))
(assert (forall ((d@@54 T@U) ) (!  (=> (and (= (type d@@54) DatatypeTypeType) (KMBtreeModel.Node.Index_q d@@54)) (exists ((|a#12#0#0@@2| T@U) (|a#12#1#0@@1| T@U) ) (!  (and (and (= (type |a#12#0#0@@2|) (SeqType BoxType)) (= (type |a#12#1#0@@1|) (SeqType BoxType))) (= d@@54 (|#KMBtreeModel.Node.Index| |a#12#0#0@@2| |a#12#1#0@@1|))) :qid |BtreeMod.19:13| :skolemid |13105| :no-pattern (type |a#12#0#0@@2|) :no-pattern (type |a#12#1#0@@1|) :no-pattern (U_2_int |a#12#0#0@@2|) :no-pattern (U_2_bool |a#12#0#0@@2|) :no-pattern (U_2_int |a#12#1#0@@1|) :no-pattern (U_2_bool |a#12#1#0@@1|) ))) :qid |unknown.0:0| :skolemid |13106| :pattern ( (KMBtreeModel.Node.Index_q d@@54)) )))
(assert (forall ((|a#13#0#0@@1| T@U) (|a#13#1#0@@1| T@U) ) (!  (=> (and (= (type |a#13#0#0@@1|) (SeqType BoxType)) (= (type |a#13#1#0@@1|) (SeqType BoxType))) (and (=> ($Is (|#KMBtreeModel.Node.Index| |a#13#0#0@@1| |a#13#1#0@@1|) Tclass.KMBtreeModel.Node) (and ($Is |a#13#0#0@@1| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |a#13#1#0@@1| (TSeq Tclass.KMBtreeModel.Node)))) (=> (and ($Is |a#13#0#0@@1| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |a#13#1#0@@1| (TSeq Tclass.KMBtreeModel.Node))) ($Is (|#KMBtreeModel.Node.Index| |a#13#0#0@@1| |a#13#1#0@@1|) Tclass.KMBtreeModel.Node)))) :qid |BtreeMod.19:13| :skolemid |13107| :pattern ( ($Is (|#KMBtreeModel.Node.Index| |a#13#0#0@@1| |a#13#1#0@@1|) Tclass.KMBtreeModel.Node)) )))
(assert (forall ((|a#14#0#0@@1| T@U) (|a#14#1#0@@1| T@U) ($h@@82 T@U) ) (!  (=> (and (and (and (= (type |a#14#0#0@@1|) (SeqType BoxType)) (= (type |a#14#1#0@@1|) (SeqType BoxType))) (= (type $h@@82) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@82)) (and (=> ($IsAlloc (|#KMBtreeModel.Node.Index| |a#14#0#0@@1| |a#14#1#0@@1|) Tclass.KMBtreeModel.Node $h@@82) (and ($IsAlloc |a#14#0#0@@1| (TSeq (TSeq Tclass.NativeTypes.byte)) $h@@82) ($IsAlloc |a#14#1#0@@1| (TSeq Tclass.KMBtreeModel.Node) $h@@82))) (=> (and ($IsAlloc |a#14#0#0@@1| (TSeq (TSeq Tclass.NativeTypes.byte)) $h@@82) ($IsAlloc |a#14#1#0@@1| (TSeq Tclass.KMBtreeModel.Node) $h@@82)) ($IsAlloc (|#KMBtreeModel.Node.Index| |a#14#0#0@@1| |a#14#1#0@@1|) Tclass.KMBtreeModel.Node $h@@82)))) :qid |BtreeMod.19:13| :skolemid |13108| :pattern ( ($IsAlloc (|#KMBtreeModel.Node.Index| |a#14#0#0@@1| |a#14#1#0@@1|) Tclass.KMBtreeModel.Node $h@@82)) )))
(assert (forall ((d@@55 T@U) ($h@@83 T@U) ) (!  (=> (and (and (= (type d@@55) DatatypeTypeType) (= (type $h@@83) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@83) (and (KMBtreeModel.Node.Index_q d@@55) ($IsAlloc d@@55 Tclass.KMBtreeModel.Node $h@@83)))) ($IsAlloc (KMBtreeModel.Node.pivots d@@55) (TSeq (TSeq Tclass.NativeTypes.byte)) $h@@83)) :qid |unknown.0:0| :skolemid |13109| :pattern ( ($IsAlloc (KMBtreeModel.Node.pivots d@@55) (TSeq (TSeq Tclass.NativeTypes.byte)) $h@@83)) )))
(assert (forall ((d@@56 T@U) ($h@@84 T@U) ) (!  (=> (and (and (= (type d@@56) DatatypeTypeType) (= (type $h@@84) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@84) (and (KMBtreeModel.Node.Index_q d@@56) ($IsAlloc d@@56 Tclass.KMBtreeModel.Node $h@@84)))) ($IsAlloc (KMBtreeModel.Node.children d@@56) (TSeq Tclass.KMBtreeModel.Node) $h@@84)) :qid |unknown.0:0| :skolemid |13110| :pattern ( ($IsAlloc (KMBtreeModel.Node.children d@@56) (TSeq Tclass.KMBtreeModel.Node) $h@@84)) )))
(assert (forall ((|a#15#0#0@@1| T@U) (|a#15#1#0@@1| T@U) ) (!  (=> (and (= (type |a#15#0#0@@1|) (SeqType BoxType)) (= (type |a#15#1#0@@1|) (SeqType BoxType))) (= (|#KMBtreeModel.Node.Index| (Lit |a#15#0#0@@1|) (Lit |a#15#1#0@@1|)) (Lit (|#KMBtreeModel.Node.Index| |a#15#0#0@@1| |a#15#1#0@@1|)))) :qid |BtreeMod.19:13| :skolemid |13111| :pattern ( (|#KMBtreeModel.Node.Index| (Lit |a#15#0#0@@1|) (Lit |a#15#1#0@@1|))) )))
(assert (forall ((|a#16#0#0@@0| T@U) (|a#16#1#0@@0| T@U) ) (!  (=> (and (= (type |a#16#0#0@@0|) (SeqType BoxType)) (= (type |a#16#1#0@@0|) (SeqType BoxType))) (= (KMBtreeModel.Node.pivots (|#KMBtreeModel.Node.Index| |a#16#0#0@@0| |a#16#1#0@@0|)) |a#16#0#0@@0|)) :qid |BtreeMod.19:13| :skolemid |13112| :pattern ( (|#KMBtreeModel.Node.Index| |a#16#0#0@@0| |a#16#1#0@@0|)) )))
(assert (forall ((|a#17#0#0@@0| T@U) (|a#17#1#0@@0| T@U) (i@@33 Int) ) (!  (=> (and (and (= (type |a#17#0#0@@0|) (SeqType BoxType)) (= (type |a#17#1#0@@0|) (SeqType BoxType))) (and (<= 0 i@@33) (< i@@33 (|Seq#Length| |a#17#0#0@@0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#17#0#0@@0| i@@33))) (DtRank (|#KMBtreeModel.Node.Index| |a#17#0#0@@0| |a#17#1#0@@0|)))) :qid |BtreeMod.19:13| :skolemid |13113| :pattern ( (|Seq#Index| |a#17#0#0@@0| i@@33) (|#KMBtreeModel.Node.Index| |a#17#0#0@@0| |a#17#1#0@@0|)) )))
(assert (forall ((|a#18#0#0@@0| T@U) (|a#18#1#0@@0| T@U) ) (!  (=> (and (= (type |a#18#0#0@@0|) (SeqType BoxType)) (= (type |a#18#1#0@@0|) (SeqType BoxType))) (< (|Seq#Rank| |a#18#0#0@@0|) (DtRank (|#KMBtreeModel.Node.Index| |a#18#0#0@@0| |a#18#1#0@@0|)))) :qid |BtreeMod.19:13| :skolemid |13114| :pattern ( (|#KMBtreeModel.Node.Index| |a#18#0#0@@0| |a#18#1#0@@0|)) )))
(assert (forall ((|a#19#0#0@@0| T@U) (|a#19#1#0@@0| T@U) ) (!  (=> (and (= (type |a#19#0#0@@0|) (SeqType BoxType)) (= (type |a#19#1#0@@0|) (SeqType BoxType))) (= (KMBtreeModel.Node.children (|#KMBtreeModel.Node.Index| |a#19#0#0@@0| |a#19#1#0@@0|)) |a#19#1#0@@0|)) :qid |BtreeMod.19:13| :skolemid |13115| :pattern ( (|#KMBtreeModel.Node.Index| |a#19#0#0@@0| |a#19#1#0@@0|)) )))
(assert (forall ((|a#20#0#0@@0| T@U) (|a#20#1#0@@0| T@U) (i@@34 Int) ) (!  (=> (and (and (= (type |a#20#0#0@@0|) (SeqType BoxType)) (= (type |a#20#1#0@@0|) (SeqType BoxType))) (and (<= 0 i@@34) (< i@@34 (|Seq#Length| |a#20#1#0@@0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#20#1#0@@0| i@@34))) (DtRank (|#KMBtreeModel.Node.Index| |a#20#0#0@@0| |a#20#1#0@@0|)))) :qid |BtreeMod.19:13| :skolemid |13116| :pattern ( (|Seq#Index| |a#20#1#0@@0| i@@34) (|#KMBtreeModel.Node.Index| |a#20#0#0@@0| |a#20#1#0@@0|)) )))
(assert (forall ((|a#21#0#0@@1| T@U) (|a#21#1#0@@0| T@U) ) (!  (=> (and (= (type |a#21#0#0@@1|) (SeqType BoxType)) (= (type |a#21#1#0@@0|) (SeqType BoxType))) (< (|Seq#Rank| |a#21#1#0@@0|) (DtRank (|#KMBtreeModel.Node.Index| |a#21#0#0@@1| |a#21#1#0@@0|)))) :qid |BtreeMod.19:13| :skolemid |13117| :pattern ( (|#KMBtreeModel.Node.Index| |a#21#0#0@@1| |a#21#1#0@@0|)) )))
(assert (forall ((d@@57 T@U) ) (!  (=> (and (= (type d@@57) DatatypeTypeType) (|$IsA#KMBtreeModel.Node| d@@57)) (or (KMBtreeModel.Node.Leaf_q d@@57) (KMBtreeModel.Node.Index_q d@@57))) :qid |unknown.0:0| :skolemid |13118| :pattern ( (|$IsA#KMBtreeModel.Node| d@@57)) )))
(assert (forall ((d@@58 T@U) ) (!  (=> (and (= (type d@@58) DatatypeTypeType) ($Is d@@58 Tclass.KMBtreeModel.Node)) (or (KMBtreeModel.Node.Leaf_q d@@58) (KMBtreeModel.Node.Index_q d@@58))) :qid |unknown.0:0| :skolemid |13119| :pattern ( (KMBtreeModel.Node.Index_q d@@58) ($Is d@@58 Tclass.KMBtreeModel.Node)) :pattern ( (KMBtreeModel.Node.Leaf_q d@@58) ($Is d@@58 Tclass.KMBtreeModel.Node)) )))
(assert (forall ((a@@129 T@U) (b@@78 T@U) ) (!  (=> (and (and (= (type a@@129) DatatypeTypeType) (= (type b@@78) DatatypeTypeType)) (and (KMBtreeModel.Node.Leaf_q a@@129) (KMBtreeModel.Node.Leaf_q b@@78))) (and (=> (|KMBtreeModel.Node#Equal| a@@129 b@@78) (and (|Seq#Equal| (KMBtreeModel.Node.keys a@@129) (KMBtreeModel.Node.keys b@@78)) (|Seq#Equal| (KMBtreeModel.Node.values a@@129) (KMBtreeModel.Node.values b@@78)))) (=> (and (|Seq#Equal| (KMBtreeModel.Node.keys a@@129) (KMBtreeModel.Node.keys b@@78)) (|Seq#Equal| (KMBtreeModel.Node.values a@@129) (KMBtreeModel.Node.values b@@78))) (|KMBtreeModel.Node#Equal| a@@129 b@@78)))) :qid |unknown.0:0| :skolemid |13120| :pattern ( (|KMBtreeModel.Node#Equal| a@@129 b@@78) (KMBtreeModel.Node.Leaf_q a@@129)) :pattern ( (|KMBtreeModel.Node#Equal| a@@129 b@@78) (KMBtreeModel.Node.Leaf_q b@@78)) )))
(assert (forall ((a@@130 T@U) (b@@79 T@U) ) (!  (=> (and (and (= (type a@@130) DatatypeTypeType) (= (type b@@79) DatatypeTypeType)) (and (KMBtreeModel.Node.Index_q a@@130) (KMBtreeModel.Node.Index_q b@@79))) (and (=> (|KMBtreeModel.Node#Equal| a@@130 b@@79) (and (|Seq#Equal| (KMBtreeModel.Node.pivots a@@130) (KMBtreeModel.Node.pivots b@@79)) (|Seq#Equal| (KMBtreeModel.Node.children a@@130) (KMBtreeModel.Node.children b@@79)))) (=> (and (|Seq#Equal| (KMBtreeModel.Node.pivots a@@130) (KMBtreeModel.Node.pivots b@@79)) (|Seq#Equal| (KMBtreeModel.Node.children a@@130) (KMBtreeModel.Node.children b@@79))) (|KMBtreeModel.Node#Equal| a@@130 b@@79)))) :qid |unknown.0:0| :skolemid |13121| :pattern ( (|KMBtreeModel.Node#Equal| a@@130 b@@79) (KMBtreeModel.Node.Index_q a@@130)) :pattern ( (|KMBtreeModel.Node#Equal| a@@130 b@@79) (KMBtreeModel.Node.Index_q b@@79)) )))
(assert (forall ((a@@131 T@U) (b@@80 T@U) ) (!  (=> (and (= (type a@@131) DatatypeTypeType) (= (type b@@80) DatatypeTypeType)) (and (=> (|KMBtreeModel.Node#Equal| a@@131 b@@80) (= a@@131 b@@80)) (=> (= a@@131 b@@80) (|KMBtreeModel.Node#Equal| a@@131 b@@80)))) :qid |unknown.0:0| :skolemid |13122| :pattern ( (|KMBtreeModel.Node#Equal| a@@131 b@@80)) )))
(assert (= (type Tclass.Arrays.__default) TyType))
(assert (= (Tag Tclass.Arrays.__default) Tagclass.Arrays.__default))
(assert (forall ((bx@@113 T@U) ) (!  (=> (and (= (type bx@@113) BoxType) ($IsBox bx@@113 Tclass.Arrays.__default)) (and (= ($Box ($Unbox refType bx@@113)) bx@@113) ($Is ($Unbox refType bx@@113) Tclass.Arrays.__default))) :qid |unknown.0:0| :skolemid |13123| :pattern ( ($IsBox bx@@113 Tclass.Arrays.__default)) )))
(assert (forall (($o@@68 T@U) ) (!  (=> (= (type $o@@68) refType) (and (=> ($Is $o@@68 Tclass.Arrays.__default) (or (= $o@@68 null) (= (dtype $o@@68) Tclass.Arrays.__default))) (=> (or (= $o@@68 null) (= (dtype $o@@68) Tclass.Arrays.__default)) ($Is $o@@68 Tclass.Arrays.__default)))) :qid |unknown.0:0| :skolemid |13124| :pattern ( ($Is $o@@68 Tclass.Arrays.__default)) )))
(assert (forall (($o@@69 T@U) ($h@@85 T@U) ) (!  (=> (and (= (type $o@@69) refType) (= (type $h@@85) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@69 Tclass.Arrays.__default $h@@85) (or (= $o@@69 null) (U_2_bool (MapType1Select (MapType0Select $h@@85 $o@@69) alloc)))) (=> (or (= $o@@69 null) (U_2_bool (MapType1Select (MapType0Select $h@@85 $o@@69) alloc))) ($IsAlloc $o@@69 Tclass.Arrays.__default $h@@85)))) :qid |unknown.0:0| :skolemid |13125| :pattern ( ($IsAlloc $o@@69 Tclass.Arrays.__default $h@@85)) )))
(assert  (=> true (forall ((Arrays._default.Aliases$T T@U) (Arrays._default.Aliases$U T@U) (|a1#0| T@U) (|a2#0| T@U) ) (!  (=> (and (and (and (and (= (type Arrays._default.Aliases$T) TyType) (= (type Arrays._default.Aliases$U) TyType)) (= (type |a1#0|) refType)) (= (type |a2#0|) refType)) (or (|Arrays.__default.Aliases#canCall| Arrays._default.Aliases$T Arrays._default.Aliases$U |a1#0| |a2#0|) (and ($Is |a1#0| (Tclass._System.array Arrays._default.Aliases$T)) ($Is |a2#0| (Tclass._System.array Arrays._default.Aliases$U))))) true) :qid |unknown.0:0| :skolemid |13126| :pattern ( (Arrays.__default.Aliases Arrays._default.Aliases$T Arrays._default.Aliases$U |a1#0| |a2#0|)) ))))
(assert (forall ((Arrays._default.Aliases$T@@0 T@U) (Arrays._default.Aliases$U@@0 T@U) (|a1#0@@0| T@U) (|a2#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Arrays._default.Aliases$T@@0) TyType) (= (type Arrays._default.Aliases$U@@0) TyType)) (= (type |a1#0@@0|) refType)) (= (type |a2#0@@0|) refType)) (and ($Is |a1#0@@0| (Tclass._System.array Arrays._default.Aliases$T@@0)) ($Is |a2#0@@0| (Tclass._System.array Arrays._default.Aliases$U@@0)))) (and (=> (|Arrays.__default.Aliases#requires| Arrays._default.Aliases$T@@0 Arrays._default.Aliases$U@@0 |a1#0@@0| |a2#0@@0|) true) (=> true (|Arrays.__default.Aliases#requires| Arrays._default.Aliases$T@@0 Arrays._default.Aliases$U@@0 |a1#0@@0| |a2#0@@0|)))) :qid |unknown.0:0| :skolemid |13127| :pattern ( (|Arrays.__default.Aliases#requires| Arrays._default.Aliases$T@@0 Arrays._default.Aliases$U@@0 |a1#0@@0| |a2#0@@0|)) )))
(assert  (=> true (forall ((Arrays._default.Aliases$T@@1 T@U) (Arrays._default.Aliases$U@@1 T@U) (|a1#0@@1| T@U) (|a2#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Arrays._default.Aliases$T@@1) TyType) (= (type Arrays._default.Aliases$U@@1) TyType)) (= (type |a1#0@@1|) refType)) (= (type |a2#0@@1|) refType)) (or (|Arrays.__default.Aliases#canCall| Arrays._default.Aliases$T@@1 Arrays._default.Aliases$U@@1 |a1#0@@1| |a2#0@@1|) (and ($Is |a1#0@@1| (Tclass._System.array Arrays._default.Aliases$T@@1)) ($Is |a2#0@@1| (Tclass._System.array Arrays._default.Aliases$U@@1))))) (and (=> (Arrays.__default.Aliases Arrays._default.Aliases$T@@1 Arrays._default.Aliases$U@@1 |a1#0@@1| |a2#0@@1|) (= |a1#0@@1| |a2#0@@1|)) (=> (= |a1#0@@1| |a2#0@@1|) (Arrays.__default.Aliases Arrays._default.Aliases$T@@1 Arrays._default.Aliases$U@@1 |a1#0@@1| |a2#0@@1|)))) :qid |unknown.0:0| :skolemid |13128| :pattern ( (Arrays.__default.Aliases Arrays._default.Aliases$T@@1 Arrays._default.Aliases$U@@1 |a1#0@@1| |a2#0@@1|)) ))))
(assert  (=> true (forall ((Arrays._default.Aliases$T@@2 T@U) (Arrays._default.Aliases$U@@2 T@U) (|a1#0@@2| T@U) (|a2#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Arrays._default.Aliases$T@@2) TyType) (= (type Arrays._default.Aliases$U@@2) TyType)) (= (type |a1#0@@2|) refType)) (= (type |a2#0@@2|) refType)) (or (|Arrays.__default.Aliases#canCall| Arrays._default.Aliases$T@@2 Arrays._default.Aliases$U@@2 (Lit |a1#0@@2|) (Lit |a2#0@@2|)) (and ($Is |a1#0@@2| (Tclass._System.array Arrays._default.Aliases$T@@2)) ($Is |a2#0@@2| (Tclass._System.array Arrays._default.Aliases$U@@2))))) (and (=> (Arrays.__default.Aliases Arrays._default.Aliases$T@@2 Arrays._default.Aliases$U@@2 (Lit |a1#0@@2|) (Lit |a2#0@@2|)) (= (Lit |a1#0@@2|) (Lit |a2#0@@2|))) (=> (= (Lit |a1#0@@2|) (Lit |a2#0@@2|)) (Arrays.__default.Aliases Arrays._default.Aliases$T@@2 Arrays._default.Aliases$U@@2 (Lit |a1#0@@2|) (Lit |a2#0@@2|))))) :qid |unknown.0:0| :weight 3 :skolemid |13129| :pattern ( (Arrays.__default.Aliases Arrays._default.Aliases$T@@2 Arrays._default.Aliases$U@@2 (Lit |a1#0@@2|) (Lit |a2#0@@2|))) ))))
(assert  (and (and (and (and (and (and (and (forall ((arg0@@372 T@T) (arg1@@229 T@T) ) (! (= (Ctor (MapType6Type arg0@@372 arg1@@229)) 25) :qid |ctor:MapType6Type| )) (forall ((arg0@@373 T@T) (arg1@@230 T@T) ) (! (= (MapType6TypeInv0 (MapType6Type arg0@@373 arg1@@230)) arg0@@373) :qid |typeInv:MapType6TypeInv0| :pattern ( (MapType6Type arg0@@373 arg1@@230)) ))) (forall ((arg0@@374 T@T) (arg1@@231 T@T) ) (! (= (MapType6TypeInv1 (MapType6Type arg0@@374 arg1@@231)) arg1@@231) :qid |typeInv:MapType6TypeInv1| :pattern ( (MapType6Type arg0@@374 arg1@@231)) ))) (forall ((arg0@@375 T@U) (arg1@@232 T@U) (arg2@@137 T@U) ) (! (let ((aVar1@@6 (MapType6TypeInv1 (type arg0@@375)))) (= (type (MapType6Select arg0@@375 arg1@@232 arg2@@137)) aVar1@@6)) :qid |funType:MapType6Select| :pattern ( (MapType6Select arg0@@375 arg1@@232 arg2@@137)) ))) (forall ((arg0@@376 T@U) (arg1@@233 T@U) (arg2@@138 T@U) (arg3@@92 T@U) ) (! (let ((aVar1@@7 (type arg3@@92))) (let ((aVar0@@4 (type arg1@@233))) (= (type (MapType6Store arg0@@376 arg1@@233 arg2@@138 arg3@@92)) (MapType6Type aVar0@@4 aVar1@@7)))) :qid |funType:MapType6Store| :pattern ( (MapType6Store arg0@@376 arg1@@233 arg2@@138 arg3@@92)) ))) (forall ((m@@52 T@U) (x0@@27 T@U) (x1@@21 T@U) (val@@28 T@U) ) (! (let ((aVar1@@8 (MapType6TypeInv1 (type m@@52)))) (=> (= (type val@@28) aVar1@@8) (= (MapType6Select (MapType6Store m@@52 x0@@27 x1@@21 val@@28) x0@@27 x1@@21) val@@28))) :qid |mapAx0:MapType6Select| :weight 0 ))) (and (and (forall ((val@@29 T@U) (m@@53 T@U) (x0@@28 T@U) (x1@@22 T@U) (y0@@21 T@U) (y1@@17 T@U) ) (!  (or (= x0@@28 y0@@21) (= (MapType6Select (MapType6Store m@@53 x0@@28 x1@@22 val@@29) y0@@21 y1@@17) (MapType6Select m@@53 y0@@21 y1@@17))) :qid |mapAx1:MapType6Select:0| :weight 0 )) (forall ((val@@30 T@U) (m@@54 T@U) (x0@@29 T@U) (x1@@23 T@U) (y0@@22 T@U) (y1@@18 T@U) ) (!  (or (= x1@@23 y1@@18) (= (MapType6Select (MapType6Store m@@54 x0@@29 x1@@23 val@@30) y0@@22 y1@@18) (MapType6Select m@@54 y0@@22 y1@@18))) :qid |mapAx1:MapType6Select:1| :weight 0 ))) (forall ((val@@31 T@U) (m@@55 T@U) (x0@@30 T@U) (x1@@24 T@U) (y0@@23 T@U) (y1@@19 T@U) ) (!  (or true (= (MapType6Select (MapType6Store m@@55 x0@@30 x1@@24 val@@31) y0@@23 y1@@19) (MapType6Select m@@55 y0@@23 y1@@19))) :qid |mapAx2:MapType6Select| :weight 0 )))) (forall ((arg0@@377 T@U) (arg1@@234 T@U) (arg2@@139 T@U) (arg3@@93 Bool) ) (! (= (type (|lambda#0| arg0@@377 arg1@@234 arg2@@139 arg3@@93)) (MapType6Type refType boolType)) :qid |funType:lambda#0| :pattern ( (|lambda#0| arg0@@377 arg1@@234 arg2@@139 arg3@@93)) ))))
(assert (forall (($o@@70 T@U) ($f@@20 T@U) (|l#0@@0| T@U) (|l#1@@2| T@U) (|l#2| T@U) (|l#3| Bool) ) (! (let ((alpha@@27 (FieldTypeInv0 (type $f@@20)))) (=> (and (and (and (and (= (type $o@@70) refType) (= (type $f@@20) (FieldType alpha@@27))) (= (type |l#0@@0|) refType)) (= (type |l#1@@2|) (MapType0Type refType MapType1Type))) (= (type |l#2|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#0| |l#0@@0| |l#1@@2| |l#2| |l#3|) $o@@70 $f@@20))  (=> (and (not (= $o@@70 |l#0@@0|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@2| $o@@70) |l#2|))) |l#3|)))) :qid |KMBtreei.13:19| :skolemid |13131| :pattern ( (MapType6Select (|lambda#0| |l#0@@0| |l#1@@2| |l#2| |l#3|) $o@@70 $f@@20)) )))
(assert (forall ((arg0@@378 T@U) (arg1@@235 T@U) (arg2@@140 T@U) (arg3@@94 Bool) ) (! (= (type (|lambda#1| arg0@@378 arg1@@235 arg2@@140 arg3@@94)) (MapType6Type refType boolType)) :qid |funType:lambda#1| :pattern ( (|lambda#1| arg0@@378 arg1@@235 arg2@@140 arg3@@94)) )))
(assert (forall (($o@@71 T@U) ($f@@21 T@U) (|l#0@@1| T@U) (|l#1@@3| T@U) (|l#2@@0| T@U) (|l#3@@0| Bool) ) (! (let ((alpha@@28 (FieldTypeInv0 (type $f@@21)))) (=> (and (and (and (and (= (type $o@@71) refType) (= (type $f@@21) (FieldType alpha@@28))) (= (type |l#0@@1|) refType)) (= (type |l#1@@3|) (MapType0Type refType MapType1Type))) (= (type |l#2@@0|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#1| |l#0@@1| |l#1@@3| |l#2@@0| |l#3@@0|) $o@@71 $f@@21))  (=> (and (not (= $o@@71 |l#0@@1|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@3| $o@@71) |l#2@@0|))) |l#3@@0|)))) :qid |KMBtreei.13:19| :skolemid |13132| :pattern ( (MapType6Select (|lambda#1| |l#0@@1| |l#1@@3| |l#2@@0| |l#3@@0|) $o@@71 $f@@21)) )))
(assert (forall ((arg0@@379 T@U) (arg1@@236 T@U) (arg2@@141 T@U) (arg3@@95 Bool) ) (! (= (type (|lambda#2| arg0@@379 arg1@@236 arg2@@141 arg3@@95)) (MapType6Type refType boolType)) :qid |funType:lambda#2| :pattern ( (|lambda#2| arg0@@379 arg1@@236 arg2@@141 arg3@@95)) )))
(assert (forall (($o@@72 T@U) ($f@@22 T@U) (|l#0@@2| T@U) (|l#1@@4| T@U) (|l#2@@1| T@U) (|l#3@@1| Bool) ) (! (let ((alpha@@29 (FieldTypeInv0 (type $f@@22)))) (=> (and (and (and (and (= (type $o@@72) refType) (= (type $f@@22) (FieldType alpha@@29))) (= (type |l#0@@2|) refType)) (= (type |l#1@@4|) (MapType0Type refType MapType1Type))) (= (type |l#2@@1|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#2| |l#0@@2| |l#1@@4| |l#2@@1| |l#3@@1|) $o@@72 $f@@22))  (=> (and (not (= $o@@72 |l#0@@2|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@4| $o@@72) |l#2@@1|))) |l#3@@1|)))) :qid |KMBtreei.14:19| :skolemid |13133| :pattern ( (MapType6Select (|lambda#2| |l#0@@2| |l#1@@4| |l#2@@1| |l#3@@1|) $o@@72 $f@@22)) )))
(assert (forall ((arg0@@380 T@U) (arg1@@237 T@U) (arg2@@142 T@U) (arg3@@96 Bool) ) (! (= (type (|lambda#3| arg0@@380 arg1@@237 arg2@@142 arg3@@96)) (MapType6Type refType boolType)) :qid |funType:lambda#3| :pattern ( (|lambda#3| arg0@@380 arg1@@237 arg2@@142 arg3@@96)) )))
(assert (forall (($o@@73 T@U) ($f@@23 T@U) (|l#0@@3| T@U) (|l#1@@5| T@U) (|l#2@@2| T@U) (|l#3@@2| Bool) ) (! (let ((alpha@@30 (FieldTypeInv0 (type $f@@23)))) (=> (and (and (and (and (= (type $o@@73) refType) (= (type $f@@23) (FieldType alpha@@30))) (= (type |l#0@@3|) refType)) (= (type |l#1@@5|) (MapType0Type refType MapType1Type))) (= (type |l#2@@2|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#3| |l#0@@3| |l#1@@5| |l#2@@2| |l#3@@2|) $o@@73 $f@@23))  (=> (and (not (= $o@@73 |l#0@@3|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@5| $o@@73) |l#2@@2|))) |l#3@@2|)))) :qid |KMBtreei.14:19| :skolemid |13134| :pattern ( (MapType6Select (|lambda#3| |l#0@@3| |l#1@@5| |l#2@@2| |l#3@@2|) $o@@73 $f@@23)) )))
(assert (forall ((arg0@@381 T@U) (arg1@@238 T@U) (arg2@@143 T@U) (arg3@@97 Bool) ) (! (= (type (|lambda#4| arg0@@381 arg1@@238 arg2@@143 arg3@@97)) (MapType6Type refType boolType)) :qid |funType:lambda#4| :pattern ( (|lambda#4| arg0@@381 arg1@@238 arg2@@143 arg3@@97)) )))
(assert (forall (($o@@74 T@U) ($f@@24 T@U) (|l#0@@4| T@U) (|l#1@@6| T@U) (|l#2@@3| T@U) (|l#3@@3| Bool) ) (! (let ((alpha@@31 (FieldTypeInv0 (type $f@@24)))) (=> (and (and (and (and (= (type $o@@74) refType) (= (type $f@@24) (FieldType alpha@@31))) (= (type |l#0@@4|) refType)) (= (type |l#1@@6|) (MapType0Type refType MapType1Type))) (= (type |l#2@@3|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#4| |l#0@@4| |l#1@@6| |l#2@@3| |l#3@@3|) $o@@74 $f@@24))  (=> (and (not (= $o@@74 |l#0@@4|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@6| $o@@74) |l#2@@3|))) |l#3@@3|)))) :qid |KMBtreei.16:19| :skolemid |13135| :pattern ( (MapType6Select (|lambda#4| |l#0@@4| |l#1@@6| |l#2@@3| |l#3@@3|) $o@@74 $f@@24)) )))
(assert (forall ((arg0@@382 T@U) (arg1@@239 T@U) (arg2@@144 T@U) (arg3@@98 Bool) ) (! (= (type (|lambda#5| arg0@@382 arg1@@239 arg2@@144 arg3@@98)) (MapType6Type refType boolType)) :qid |funType:lambda#5| :pattern ( (|lambda#5| arg0@@382 arg1@@239 arg2@@144 arg3@@98)) )))
(assert (forall (($o@@75 T@U) ($f@@25 T@U) (|l#0@@5| T@U) (|l#1@@7| T@U) (|l#2@@4| T@U) (|l#3@@4| Bool) ) (! (let ((alpha@@32 (FieldTypeInv0 (type $f@@25)))) (=> (and (and (and (and (= (type $o@@75) refType) (= (type $f@@25) (FieldType alpha@@32))) (= (type |l#0@@5|) refType)) (= (type |l#1@@7|) (MapType0Type refType MapType1Type))) (= (type |l#2@@4|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#5| |l#0@@5| |l#1@@7| |l#2@@4| |l#3@@4|) $o@@75 $f@@25))  (=> (and (not (= $o@@75 |l#0@@5|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@7| $o@@75) |l#2@@4|))) |l#3@@4|)))) :qid |KMBtreei.16:19| :skolemid |13136| :pattern ( (MapType6Select (|lambda#5| |l#0@@5| |l#1@@7| |l#2@@4| |l#3@@4|) $o@@75 $f@@25)) )))
(assert (forall ((arg0@@383 T@U) (arg1@@240 T@U) (arg2@@145 T@U) (arg3@@99 Bool) ) (! (= (type (|lambda#6| arg0@@383 arg1@@240 arg2@@145 arg3@@99)) (MapType6Type refType boolType)) :qid |funType:lambda#6| :pattern ( (|lambda#6| arg0@@383 arg1@@240 arg2@@145 arg3@@99)) )))
(assert (forall (($o@@76 T@U) ($f@@26 T@U) (|l#0@@6| T@U) (|l#1@@8| T@U) (|l#2@@5| T@U) (|l#3@@5| Bool) ) (! (let ((alpha@@33 (FieldTypeInv0 (type $f@@26)))) (=> (and (and (and (and (= (type $o@@76) refType) (= (type $f@@26) (FieldType alpha@@33))) (= (type |l#0@@6|) refType)) (= (type |l#1@@8|) (MapType0Type refType MapType1Type))) (= (type |l#2@@5|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#6| |l#0@@6| |l#1@@8| |l#2@@5| |l#3@@5|) $o@@76 $f@@26))  (=> (and (not (= $o@@76 |l#0@@6|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@8| $o@@76) |l#2@@5|))) |l#3@@5|)))) :qid |MutableB.52:9| :skolemid |13137| :pattern ( (MapType6Select (|lambda#6| |l#0@@6| |l#1@@8| |l#2@@5| |l#3@@5|) $o@@76 $f@@26)) )))
(assert (forall ((|$y#0| T@U) (|l#0@@7| T@U) (|l#1@@9| Int) (|l#2@@6| Int) (|l#3@@6| T@U) (|l#4| T@U) (|l#5| T@U) (|l#6| T@U) (|l#7| T@U) (|l#8| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |$y#0|) BoxType) (= (type |l#0@@7|) TyType)) (= (type |l#3@@6|) (MapType0Type refType MapType1Type))) (= (type |l#4|) (SeqType BoxType))) (= (type |l#5|) (FieldType (MapType0Type BoxType boolType)))) (= (type |l#6|) (MapType0Type refType MapType1Type))) (= (type |l#7|) (SeqType BoxType))) (= (type |l#8|) (FieldType (MapType0Type BoxType boolType)))) (= (U_2_bool (MapType0Select (|lambda#7| |l#0@@7| |l#1@@9| |l#2@@6| |l#3@@6| |l#4| |l#5| |l#6| |l#7| |l#8|) |$y#0|)) (exists ((|i#1@@14| Int) (|o#0@@7| T@U) ) (!  (and (= (type |o#0@@7|) refType) (and (and ($Is |o#0@@7| |l#0@@7|) (and (and (<= |l#1@@9| |i#1@@14|) (< |i#1@@14| |l#2@@6|)) (U_2_bool (MapType0Select (MapType1Select (MapType0Select |l#3@@6| ($Unbox refType (|Seq#Index| |l#4| |i#1@@14|))) |l#5|) ($Box |o#0@@7|))))) (= |$y#0| ($Box |o#0@@7|)))) :qid |MutableB.80:9| :skolemid |7337| :pattern ( (MapType0Select (MapType1Select (MapType0Select |l#6| ($Unbox refType (|Seq#Index| |l#7| |i#1@@14|))) |l#8|) ($Box |o#0@@7|))) )))) :qid |MutableB.80:5| :skolemid |13138| :pattern ( (MapType0Select (|lambda#7| |l#0@@7| |l#1@@9| |l#2@@6| |l#3@@6| |l#4| |l#5| |l#6| |l#7| |l#8|) |$y#0|)) )))
(assert (forall ((arg0@@384 T@U) (arg1@@241 T@U) (arg2@@146 T@U) (arg3@@100 Bool) ) (! (= (type (|lambda#8| arg0@@384 arg1@@241 arg2@@146 arg3@@100)) (MapType6Type refType boolType)) :qid |funType:lambda#8| :pattern ( (|lambda#8| arg0@@384 arg1@@241 arg2@@146 arg3@@100)) )))
(assert (forall (($o@@77 T@U) ($f@@27 T@U) (|l#0@@8| T@U) (|l#1@@10| T@U) (|l#2@@7| T@U) (|l#3@@7| Bool) ) (! (let ((alpha@@34 (FieldTypeInv0 (type $f@@27)))) (=> (and (and (and (and (= (type $o@@77) refType) (= (type $f@@27) (FieldType alpha@@34))) (= (type |l#0@@8|) refType)) (= (type |l#1@@10|) (MapType0Type refType MapType1Type))) (= (type |l#2@@7|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#8| |l#0@@8| |l#1@@10| |l#2@@7| |l#3@@7|) $o@@77 $f@@27))  (=> (and (not (= $o@@77 |l#0@@8|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@10| $o@@77) |l#2@@7|))) |l#3@@7|)))) :qid |MutableB.104:9| :skolemid |13139| :pattern ( (MapType6Select (|lambda#8| |l#0@@8| |l#1@@10| |l#2@@7| |l#3@@7|) $o@@77 $f@@27)) )))
(assert (forall ((arg0@@385 T@U) (arg1@@242 T@U) (arg2@@147 T@U) (arg3@@101 Bool) ) (! (= (type (|lambda#9| arg0@@385 arg1@@242 arg2@@147 arg3@@101)) (MapType6Type refType boolType)) :qid |funType:lambda#9| :pattern ( (|lambda#9| arg0@@385 arg1@@242 arg2@@147 arg3@@101)) )))
(assert (forall (($o@@78 T@U) ($f@@28 T@U) (|l#0@@9| T@U) (|l#1@@11| T@U) (|l#2@@8| T@U) (|l#3@@8| Bool) ) (! (let ((alpha@@35 (FieldTypeInv0 (type $f@@28)))) (=> (and (and (and (and (= (type $o@@78) refType) (= (type $f@@28) (FieldType alpha@@35))) (= (type |l#0@@9|) refType)) (= (type |l#1@@11|) (MapType0Type refType MapType1Type))) (= (type |l#2@@8|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#9| |l#0@@9| |l#1@@11| |l#2@@8| |l#3@@8|) $o@@78 $f@@28))  (=> (and (not (= $o@@78 |l#0@@9|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@11| $o@@78) |l#2@@8|))) |l#3@@8|)))) :qid |MutableB.127:9| :skolemid |13140| :pattern ( (MapType6Select (|lambda#9| |l#0@@9| |l#1@@11| |l#2@@8| |l#3@@8|) $o@@78 $f@@28)) )))
(assert (forall ((arg0@@386 T@U) (arg1@@243 T@U) (arg2@@148 T@U) (arg3@@102 Int) (arg4@@62 Int) (arg5@@25 T@U) (arg6@@9 T@U) (arg7@@4 T@U) (arg8@@4 Int) (arg9@@1 Int) (arg10@@1 T@U) (arg11 T@U) (arg12 T@U) (arg13 T@U) (arg14 T@U) (arg15 T@U) ) (! (= (type (|lambda#10| arg0@@386 arg1@@243 arg2@@148 arg3@@102 arg4@@62 arg5@@25 arg6@@9 arg7@@4 arg8@@4 arg9@@1 arg10@@1 arg11 arg12 arg13 arg14 arg15)) (MapType6Type refType boolType)) :qid |funType:lambda#10| :pattern ( (|lambda#10| arg0@@386 arg1@@243 arg2@@148 arg3@@102 arg4@@62 arg5@@25 arg6@@9 arg7@@4 arg8@@4 arg9@@1 arg10@@1 arg11 arg12 arg13 arg14 arg15)) )))
(assert (forall (($o@@79 T@U) ($f@@29 T@U) (|l#0@@10| T@U) (|l#1@@12| T@U) (|l#2@@9| T@U) (|l#3@@9| Int) (|l#4@@0| Int) (|l#5@@0| T@U) (|l#6@@0| T@U) (|l#7@@0| T@U) (|l#8@@0| Int) (|l#9| Int) (|l#10| T@U) (|l#11| T@U) (|l#12| T@U) (|l#13| T@U) (|l#14| T@U) (|l#15| T@U) ) (! (let ((alpha@@36 (FieldTypeInv0 (type $f@@29)))) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type $o@@79) refType) (= (type $f@@29) (FieldType alpha@@36))) (= (type |l#0@@10|) refType)) (= (type |l#1@@12|) (MapType0Type refType MapType1Type))) (= (type |l#2@@9|) (FieldType boolType))) (= (type |l#5@@0|) (SeqType BoxType))) (= (type |l#6@@0|) (SeqType BoxType))) (= (type |l#7@@0|) TyType)) (= (type |l#10|) (MapType0Type refType MapType1Type))) (= (type |l#11|) (SeqType BoxType))) (= (type |l#12|) (FieldType (MapType0Type BoxType boolType)))) (= (type |l#13|) (MapType0Type refType MapType1Type))) (= (type |l#14|) (SeqType BoxType))) (= (type |l#15|) (FieldType (MapType0Type BoxType boolType)))) (= (U_2_bool (MapType6Select (|lambda#10| |l#0@@10| |l#1@@12| |l#2@@9| |l#3@@9| |l#4@@0| |l#5@@0| |l#6@@0| |l#7@@0| |l#8@@0| |l#9| |l#10| |l#11| |l#12| |l#13| |l#14| |l#15|) $o@@79 $f@@29))  (=> (and (not (= $o@@79 |l#0@@10|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@12| $o@@79) |l#2@@9|))) (or (exists ((|i#0@@83| Int) ) (!  (and (and (<= |l#3@@9| |i#0@@83|) (< |i#0@@83| |l#4@@0|)) (= ($Box $o@@79) (|Seq#Index| |l#5@@0| |i#0@@83|))) :qid |MutableB.198:15| :skolemid |7448| :pattern ( ($Unbox refType (|Seq#Index| |l#6@@0| |i#0@@83|))) )) (exists ((|i#1@@15| Int) (|o#0@@8| T@U) ) (!  (and (= (type |o#0@@8|) refType) (and (and ($Is |o#0@@8| |l#7@@0|) (and (and (<= |l#8@@0| |i#1@@15|) (< |i#1@@15| |l#9|)) (U_2_bool (MapType0Select (MapType1Select (MapType0Select |l#10| ($Unbox refType (|Seq#Index| |l#11| |i#1@@15|))) |l#12|) ($Box |o#0@@8|))))) (= ($Box $o@@79) ($Box |o#0@@8|)))) :qid |MutableB.199:15| :skolemid |7449| :pattern ( (MapType0Select (MapType1Select (MapType0Select |l#13| ($Unbox refType (|Seq#Index| |l#14| |i#1@@15|))) |l#15|) ($Box |o#0@@8|))) ))))))) :qid |MutableB.193:12| :skolemid |13141| :pattern ( (MapType6Select (|lambda#10| |l#0@@10| |l#1@@12| |l#2@@9| |l#3@@9| |l#4@@0| |l#5@@0| |l#6@@0| |l#7@@0| |l#8@@0| |l#9| |l#10| |l#11| |l#12| |l#13| |l#14| |l#15|) $o@@79 $f@@29)) )))
(assert (forall ((arg0@@387 T@U) (arg1@@244 T@U) (arg2@@149 T@U) (arg3@@103 Int) (arg4@@63 Int) (arg5@@26 T@U) (arg6@@10 T@U) (arg7@@5 T@U) (arg8@@5 Int) (arg9@@2 Int) (arg10@@2 T@U) (arg11@@0 T@U) (arg12@@0 T@U) (arg13@@0 T@U) (arg14@@0 T@U) (arg15@@0 T@U) ) (! (= (type (|lambda#11| arg0@@387 arg1@@244 arg2@@149 arg3@@103 arg4@@63 arg5@@26 arg6@@10 arg7@@5 arg8@@5 arg9@@2 arg10@@2 arg11@@0 arg12@@0 arg13@@0 arg14@@0 arg15@@0)) (MapType6Type refType boolType)) :qid |funType:lambda#11| :pattern ( (|lambda#11| arg0@@387 arg1@@244 arg2@@149 arg3@@103 arg4@@63 arg5@@26 arg6@@10 arg7@@5 arg8@@5 arg9@@2 arg10@@2 arg11@@0 arg12@@0 arg13@@0 arg14@@0 arg15@@0)) )))
(assert (forall (($o@@80 T@U) ($f@@30 T@U) (|l#0@@11| T@U) (|l#1@@13| T@U) (|l#2@@10| T@U) (|l#3@@10| Int) (|l#4@@1| Int) (|l#5@@1| T@U) (|l#6@@1| T@U) (|l#7@@1| T@U) (|l#8@@1| Int) (|l#9@@0| Int) (|l#10@@0| T@U) (|l#11@@0| T@U) (|l#12@@0| T@U) (|l#13@@0| T@U) (|l#14@@0| T@U) (|l#15@@0| T@U) ) (! (let ((alpha@@37 (FieldTypeInv0 (type $f@@30)))) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type $o@@80) refType) (= (type $f@@30) (FieldType alpha@@37))) (= (type |l#0@@11|) refType)) (= (type |l#1@@13|) (MapType0Type refType MapType1Type))) (= (type |l#2@@10|) (FieldType boolType))) (= (type |l#5@@1|) (SeqType BoxType))) (= (type |l#6@@1|) (SeqType BoxType))) (= (type |l#7@@1|) TyType)) (= (type |l#10@@0|) (MapType0Type refType MapType1Type))) (= (type |l#11@@0|) (SeqType BoxType))) (= (type |l#12@@0|) (FieldType (MapType0Type BoxType boolType)))) (= (type |l#13@@0|) (MapType0Type refType MapType1Type))) (= (type |l#14@@0|) (SeqType BoxType))) (= (type |l#15@@0|) (FieldType (MapType0Type BoxType boolType)))) (= (U_2_bool (MapType6Select (|lambda#11| |l#0@@11| |l#1@@13| |l#2@@10| |l#3@@10| |l#4@@1| |l#5@@1| |l#6@@1| |l#7@@1| |l#8@@1| |l#9@@0| |l#10@@0| |l#11@@0| |l#12@@0| |l#13@@0| |l#14@@0| |l#15@@0|) $o@@80 $f@@30))  (=> (and (not (= $o@@80 |l#0@@11|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@13| $o@@80) |l#2@@10|))) (or (exists ((|i#0@@84| Int) ) (!  (and (and (<= |l#3@@10| |i#0@@84|) (< |i#0@@84| |l#4@@1|)) (= ($Box $o@@80) (|Seq#Index| |l#5@@1| |i#0@@84|))) :qid |MutableB.198:15| :skolemid |7463| :pattern ( ($Unbox refType (|Seq#Index| |l#6@@1| |i#0@@84|))) )) (exists ((|i#1@@16| Int) (|o#0@@9| T@U) ) (!  (and (= (type |o#0@@9|) refType) (and (and ($Is |o#0@@9| |l#7@@1|) (and (and (<= |l#8@@1| |i#1@@16|) (< |i#1@@16| |l#9@@0|)) (U_2_bool (MapType0Select (MapType1Select (MapType0Select |l#10@@0| ($Unbox refType (|Seq#Index| |l#11@@0| |i#1@@16|))) |l#12@@0|) ($Box |o#0@@9|))))) (= ($Box $o@@80) ($Box |o#0@@9|)))) :qid |MutableB.199:15| :skolemid |7464| :pattern ( (MapType0Select (MapType1Select (MapType0Select |l#13@@0| ($Unbox refType (|Seq#Index| |l#14@@0| |i#1@@16|))) |l#15@@0|) ($Box |o#0@@9|))) ))))))) :qid |MutableB.193:12| :skolemid |13142| :pattern ( (MapType6Select (|lambda#11| |l#0@@11| |l#1@@13| |l#2@@10| |l#3@@10| |l#4@@1| |l#5@@1| |l#6@@1| |l#7@@1| |l#8@@1| |l#9@@0| |l#10@@0| |l#11@@0| |l#12@@0| |l#13@@0| |l#14@@0| |l#15@@0|) $o@@80 $f@@30)) )))
(assert (forall ((arg0@@388 T@U) (arg1@@245 T@U) (arg2@@150 T@U) (arg3@@104 Bool) ) (! (= (type (|lambda#12| arg0@@388 arg1@@245 arg2@@150 arg3@@104)) (MapType6Type refType boolType)) :qid |funType:lambda#12| :pattern ( (|lambda#12| arg0@@388 arg1@@245 arg2@@150 arg3@@104)) )))
(assert (forall (($o@@81 T@U) ($f@@31 T@U) (|l#0@@12| T@U) (|l#1@@14| T@U) (|l#2@@11| T@U) (|l#3@@11| Bool) ) (! (let ((alpha@@38 (FieldTypeInv0 (type $f@@31)))) (=> (and (and (and (and (= (type $o@@81) refType) (= (type $f@@31) (FieldType alpha@@38))) (= (type |l#0@@12|) refType)) (= (type |l#1@@14|) (MapType0Type refType MapType1Type))) (= (type |l#2@@11|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#12| |l#0@@12| |l#1@@14| |l#2@@11| |l#3@@11|) $o@@81 $f@@31))  (=> (and (not (= $o@@81 |l#0@@12|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@14| $o@@81) |l#2@@11|))) |l#3@@11|)))) :qid |MutableB.225:9| :skolemid |13143| :pattern ( (MapType6Select (|lambda#12| |l#0@@12| |l#1@@14| |l#2@@11| |l#3@@11|) $o@@81 $f@@31)) )))
(assert (forall ((arg0@@389 T@U) (arg1@@246 T@U) (arg2@@151 T@U) (arg3@@105 T@U) ) (! (= (type (|lambda#13| arg0@@389 arg1@@246 arg2@@151 arg3@@105)) (MapType6Type refType boolType)) :qid |funType:lambda#13| :pattern ( (|lambda#13| arg0@@389 arg1@@246 arg2@@151 arg3@@105)) )))
(assert (forall (($o@@82 T@U) ($f@@32 T@U) (|l#0@@13| T@U) (|l#1@@15| T@U) (|l#2@@12| T@U) (|l#3@@12| T@U) ) (! (let ((alpha@@39 (FieldTypeInv0 (type $f@@32)))) (=> (and (and (and (and (and (= (type $o@@82) refType) (= (type $f@@32) (FieldType alpha@@39))) (= (type |l#0@@13|) refType)) (= (type |l#1@@15|) (MapType0Type refType MapType1Type))) (= (type |l#2@@12|) (FieldType boolType))) (= (type |l#3@@12|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType6Select (|lambda#13| |l#0@@13| |l#1@@15| |l#2@@12| |l#3@@12|) $o@@82 $f@@32))  (=> (and (not (= $o@@82 |l#0@@13|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@15| $o@@82) |l#2@@12|))) (U_2_bool (MapType0Select |l#3@@12| ($Box $o@@82))))))) :qid |MutableB.255:12| :skolemid |13144| :pattern ( (MapType6Select (|lambda#13| |l#0@@13| |l#1@@15| |l#2@@12| |l#3@@12|) $o@@82 $f@@32)) )))
(assert (forall ((arg0@@390 T@U) (arg1@@247 T@U) (arg2@@152 T@U) (arg3@@106 T@U) ) (! (= (type (|lambda#14| arg0@@390 arg1@@247 arg2@@152 arg3@@106)) (MapType6Type refType boolType)) :qid |funType:lambda#14| :pattern ( (|lambda#14| arg0@@390 arg1@@247 arg2@@152 arg3@@106)) )))
(assert (forall (($o@@83 T@U) ($f@@33 T@U) (|l#0@@14| T@U) (|l#1@@16| T@U) (|l#2@@13| T@U) (|l#3@@13| T@U) ) (! (let ((alpha@@40 (FieldTypeInv0 (type $f@@33)))) (=> (and (and (and (and (and (= (type $o@@83) refType) (= (type $f@@33) (FieldType alpha@@40))) (= (type |l#0@@14|) refType)) (= (type |l#1@@16|) (MapType0Type refType MapType1Type))) (= (type |l#2@@13|) (FieldType boolType))) (= (type |l#3@@13|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType6Select (|lambda#14| |l#0@@14| |l#1@@16| |l#2@@13| |l#3@@13|) $o@@83 $f@@33))  (=> (and (not (= $o@@83 |l#0@@14|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@16| $o@@83) |l#2@@13|))) (U_2_bool (MapType0Select |l#3@@13| ($Box $o@@83))))))) :qid |MutableB.255:12| :skolemid |13145| :pattern ( (MapType6Select (|lambda#14| |l#0@@14| |l#1@@16| |l#2@@13| |l#3@@13|) $o@@83 $f@@33)) )))
(assert (forall ((arg0@@391 T@U) (arg1@@248 T@U) (arg2@@153 T@U) (arg3@@107 T@U) ) (! (= (type (|lambda#15| arg0@@391 arg1@@248 arg2@@153 arg3@@107)) (MapType6Type refType boolType)) :qid |funType:lambda#15| :pattern ( (|lambda#15| arg0@@391 arg1@@248 arg2@@153 arg3@@107)) )))
(assert (forall (($o@@84 T@U) ($f@@34 T@U) (|l#0@@15| T@U) (|l#1@@17| T@U) (|l#2@@14| T@U) (|l#3@@14| T@U) ) (! (let ((alpha@@41 (FieldTypeInv0 (type $f@@34)))) (=> (and (and (and (and (and (= (type $o@@84) refType) (= (type $f@@34) (FieldType alpha@@41))) (= (type |l#0@@15|) refType)) (= (type |l#1@@17|) (MapType0Type refType MapType1Type))) (= (type |l#2@@14|) (FieldType boolType))) (= (type |l#3@@14|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType6Select (|lambda#15| |l#0@@15| |l#1@@17| |l#2@@14| |l#3@@14|) $o@@84 $f@@34))  (=> (and (not (= $o@@84 |l#0@@15|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@17| $o@@84) |l#2@@14|))) (U_2_bool (MapType0Select |l#3@@14| ($Box $o@@84))))))) :qid |MutableB.262:12| :skolemid |13146| :pattern ( (MapType6Select (|lambda#15| |l#0@@15| |l#1@@17| |l#2@@14| |l#3@@14|) $o@@84 $f@@34)) )))
(assert (forall ((arg0@@392 T@U) (arg1@@249 T@U) (arg2@@154 T@U) (arg3@@108 T@U) ) (! (= (type (|lambda#16| arg0@@392 arg1@@249 arg2@@154 arg3@@108)) (MapType6Type refType boolType)) :qid |funType:lambda#16| :pattern ( (|lambda#16| arg0@@392 arg1@@249 arg2@@154 arg3@@108)) )))
(assert (forall (($o@@85 T@U) ($f@@35 T@U) (|l#0@@16| T@U) (|l#1@@18| T@U) (|l#2@@15| T@U) (|l#3@@15| T@U) ) (! (let ((alpha@@42 (FieldTypeInv0 (type $f@@35)))) (=> (and (and (and (and (and (= (type $o@@85) refType) (= (type $f@@35) (FieldType alpha@@42))) (= (type |l#0@@16|) refType)) (= (type |l#1@@18|) (MapType0Type refType MapType1Type))) (= (type |l#2@@15|) (FieldType boolType))) (= (type |l#3@@15|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType6Select (|lambda#16| |l#0@@16| |l#1@@18| |l#2@@15| |l#3@@15|) $o@@85 $f@@35))  (=> (and (not (= $o@@85 |l#0@@16|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@18| $o@@85) |l#2@@15|))) (U_2_bool (MapType0Select |l#3@@15| ($Box $o@@85))))))) :qid |MutableB.262:12| :skolemid |13147| :pattern ( (MapType6Select (|lambda#16| |l#0@@16| |l#1@@18| |l#2@@15| |l#3@@15|) $o@@85 $f@@35)) )))
(assert (forall ((arg0@@393 T@U) (arg1@@250 T@U) (arg2@@155 T@U) (arg3@@109 Bool) ) (! (= (type (|lambda#17| arg0@@393 arg1@@250 arg2@@155 arg3@@109)) (MapType6Type refType boolType)) :qid |funType:lambda#17| :pattern ( (|lambda#17| arg0@@393 arg1@@250 arg2@@155 arg3@@109)) )))
(assert (forall (($o@@86 T@U) ($f@@36 T@U) (|l#0@@17| T@U) (|l#1@@19| T@U) (|l#2@@16| T@U) (|l#3@@16| Bool) ) (! (let ((alpha@@43 (FieldTypeInv0 (type $f@@36)))) (=> (and (and (and (and (= (type $o@@86) refType) (= (type $f@@36) (FieldType alpha@@43))) (= (type |l#0@@17|) refType)) (= (type |l#1@@19|) (MapType0Type refType MapType1Type))) (= (type |l#2@@16|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#17| |l#0@@17| |l#1@@19| |l#2@@16| |l#3@@16|) $o@@86 $f@@36))  (=> (and (not (= $o@@86 |l#0@@17|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@19| $o@@86) |l#2@@16|))) |l#3@@16|)))) :qid |MutableB.269:10| :skolemid |13148| :pattern ( (MapType6Select (|lambda#17| |l#0@@17| |l#1@@19| |l#2@@16| |l#3@@16|) $o@@86 $f@@36)) )))
(assert (forall ((arg0@@394 T@U) (arg1@@251 T@U) (arg2@@156 T@U) (arg3@@110 Bool) ) (! (= (type (|lambda#18| arg0@@394 arg1@@251 arg2@@156 arg3@@110)) (MapType6Type refType boolType)) :qid |funType:lambda#18| :pattern ( (|lambda#18| arg0@@394 arg1@@251 arg2@@156 arg3@@110)) )))
(assert (forall (($o@@87 T@U) ($f@@37 T@U) (|l#0@@18| T@U) (|l#1@@20| T@U) (|l#2@@17| T@U) (|l#3@@17| Bool) ) (! (let ((alpha@@44 (FieldTypeInv0 (type $f@@37)))) (=> (and (and (and (and (= (type $o@@87) refType) (= (type $f@@37) (FieldType alpha@@44))) (= (type |l#0@@18|) refType)) (= (type |l#1@@20|) (MapType0Type refType MapType1Type))) (= (type |l#2@@17|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#18| |l#0@@18| |l#1@@20| |l#2@@17| |l#3@@17|) $o@@87 $f@@37))  (=> (and (not (= $o@@87 |l#0@@18|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@20| $o@@87) |l#2@@17|))) |l#3@@17|)))) :qid |MutableB.269:10| :skolemid |13149| :pattern ( (MapType6Select (|lambda#18| |l#0@@18| |l#1@@20| |l#2@@17| |l#3@@17|) $o@@87 $f@@37)) )))
(assert (forall ((arg0@@395 T@U) (arg1@@252 T@U) (arg2@@157 T@U) (arg3@@111 Bool) ) (! (= (type (|lambda#19| arg0@@395 arg1@@252 arg2@@157 arg3@@111)) (MapType6Type refType boolType)) :qid |funType:lambda#19| :pattern ( (|lambda#19| arg0@@395 arg1@@252 arg2@@157 arg3@@111)) )))
(assert (forall (($o@@88 T@U) ($f@@38 T@U) (|l#0@@19| T@U) (|l#1@@21| T@U) (|l#2@@18| T@U) (|l#3@@18| Bool) ) (! (let ((alpha@@45 (FieldTypeInv0 (type $f@@38)))) (=> (and (and (and (and (= (type $o@@88) refType) (= (type $f@@38) (FieldType alpha@@45))) (= (type |l#0@@19|) refType)) (= (type |l#1@@21|) (MapType0Type refType MapType1Type))) (= (type |l#2@@18|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#19| |l#0@@19| |l#1@@21| |l#2@@18| |l#3@@18|) $o@@88 $f@@38))  (=> (and (not (= $o@@88 |l#0@@19|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@21| $o@@88) |l#2@@18|))) |l#3@@18|)))) :qid |MutableB.285:10| :skolemid |13150| :pattern ( (MapType6Select (|lambda#19| |l#0@@19| |l#1@@21| |l#2@@18| |l#3@@18|) $o@@88 $f@@38)) )))
(assert (forall ((arg0@@396 T@U) (arg1@@253 T@U) (arg2@@158 T@U) (arg3@@112 Bool) ) (! (= (type (|lambda#20| arg0@@396 arg1@@253 arg2@@158 arg3@@112)) (MapType6Type refType boolType)) :qid |funType:lambda#20| :pattern ( (|lambda#20| arg0@@396 arg1@@253 arg2@@158 arg3@@112)) )))
(assert (forall (($o@@89 T@U) ($f@@39 T@U) (|l#0@@20| T@U) (|l#1@@22| T@U) (|l#2@@19| T@U) (|l#3@@19| Bool) ) (! (let ((alpha@@46 (FieldTypeInv0 (type $f@@39)))) (=> (and (and (and (and (= (type $o@@89) refType) (= (type $f@@39) (FieldType alpha@@46))) (= (type |l#0@@20|) refType)) (= (type |l#1@@22|) (MapType0Type refType MapType1Type))) (= (type |l#2@@19|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#20| |l#0@@20| |l#1@@22| |l#2@@19| |l#3@@19|) $o@@89 $f@@39))  (=> (and (not (= $o@@89 |l#0@@20|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@22| $o@@89) |l#2@@19|))) |l#3@@19|)))) :qid |MutableB.285:10| :skolemid |13151| :pattern ( (MapType6Select (|lambda#20| |l#0@@20| |l#1@@22| |l#2@@19| |l#3@@19|) $o@@89 $f@@39)) )))
(assert (forall ((arg0@@397 T@U) (arg1@@254 T@U) (arg2@@159 T@U) (arg3@@113 Bool) ) (! (= (type (|lambda#21| arg0@@397 arg1@@254 arg2@@159 arg3@@113)) (MapType6Type refType boolType)) :qid |funType:lambda#21| :pattern ( (|lambda#21| arg0@@397 arg1@@254 arg2@@159 arg3@@113)) )))
(assert (forall (($o@@90 T@U) ($f@@40 T@U) (|l#0@@21| T@U) (|l#1@@23| T@U) (|l#2@@20| T@U) (|l#3@@20| Bool) ) (! (let ((alpha@@47 (FieldTypeInv0 (type $f@@40)))) (=> (and (and (and (and (= (type $o@@90) refType) (= (type $f@@40) (FieldType alpha@@47))) (= (type |l#0@@21|) refType)) (= (type |l#1@@23|) (MapType0Type refType MapType1Type))) (= (type |l#2@@20|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#21| |l#0@@21| |l#1@@23| |l#2@@20| |l#3@@20|) $o@@90 $f@@40))  (=> (and (not (= $o@@90 |l#0@@21|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@23| $o@@90) |l#2@@20|))) |l#3@@20|)))) :qid |MutableB.302:10| :skolemid |13152| :pattern ( (MapType6Select (|lambda#21| |l#0@@21| |l#1@@23| |l#2@@20| |l#3@@20|) $o@@90 $f@@40)) )))
(assert (forall ((arg0@@398 T@U) (arg1@@255 T@U) (arg2@@160 T@U) (arg3@@114 Bool) ) (! (= (type (|lambda#22| arg0@@398 arg1@@255 arg2@@160 arg3@@114)) (MapType6Type refType boolType)) :qid |funType:lambda#22| :pattern ( (|lambda#22| arg0@@398 arg1@@255 arg2@@160 arg3@@114)) )))
(assert (forall (($o@@91 T@U) ($f@@41 T@U) (|l#0@@22| T@U) (|l#1@@24| T@U) (|l#2@@21| T@U) (|l#3@@21| Bool) ) (! (let ((alpha@@48 (FieldTypeInv0 (type $f@@41)))) (=> (and (and (and (and (= (type $o@@91) refType) (= (type $f@@41) (FieldType alpha@@48))) (= (type |l#0@@22|) refType)) (= (type |l#1@@24|) (MapType0Type refType MapType1Type))) (= (type |l#2@@21|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#22| |l#0@@22| |l#1@@24| |l#2@@21| |l#3@@21|) $o@@91 $f@@41))  (=> (and (not (= $o@@91 |l#0@@22|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@24| $o@@91) |l#2@@21|))) |l#3@@21|)))) :qid |MutableB.302:10| :skolemid |13153| :pattern ( (MapType6Select (|lambda#22| |l#0@@22| |l#1@@24| |l#2@@21| |l#3@@21|) $o@@91 $f@@41)) )))
(assert (forall ((arg0@@399 T@U) (arg1@@256 T@U) (arg2@@161 T@U) (arg3@@115 Bool) ) (! (= (type (|lambda#23| arg0@@399 arg1@@256 arg2@@161 arg3@@115)) (MapType6Type refType boolType)) :qid |funType:lambda#23| :pattern ( (|lambda#23| arg0@@399 arg1@@256 arg2@@161 arg3@@115)) )))
(assert (forall (($o@@92 T@U) ($f@@42 T@U) (|l#0@@23| T@U) (|l#1@@25| T@U) (|l#2@@22| T@U) (|l#3@@22| Bool) ) (! (let ((alpha@@49 (FieldTypeInv0 (type $f@@42)))) (=> (and (and (and (and (= (type $o@@92) refType) (= (type $f@@42) (FieldType alpha@@49))) (= (type |l#0@@23|) refType)) (= (type |l#1@@25|) (MapType0Type refType MapType1Type))) (= (type |l#2@@22|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#23| |l#0@@23| |l#1@@25| |l#2@@22| |l#3@@22|) $o@@92 $f@@42))  (=> (and (not (= $o@@92 |l#0@@23|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@25| $o@@92) |l#2@@22|))) |l#3@@22|)))) :qid |MutableB.313:10| :skolemid |13154| :pattern ( (MapType6Select (|lambda#23| |l#0@@23| |l#1@@25| |l#2@@22| |l#3@@22|) $o@@92 $f@@42)) )))
(assert (forall ((arg0@@400 T@U) (arg1@@257 T@U) (arg2@@162 T@U) (arg3@@116 Bool) ) (! (= (type (|lambda#24| arg0@@400 arg1@@257 arg2@@162 arg3@@116)) (MapType6Type refType boolType)) :qid |funType:lambda#24| :pattern ( (|lambda#24| arg0@@400 arg1@@257 arg2@@162 arg3@@116)) )))
(assert (forall (($o@@93 T@U) ($f@@43 T@U) (|l#0@@24| T@U) (|l#1@@26| T@U) (|l#2@@23| T@U) (|l#3@@23| Bool) ) (! (let ((alpha@@50 (FieldTypeInv0 (type $f@@43)))) (=> (and (and (and (and (= (type $o@@93) refType) (= (type $f@@43) (FieldType alpha@@50))) (= (type |l#0@@24|) refType)) (= (type |l#1@@26|) (MapType0Type refType MapType1Type))) (= (type |l#2@@23|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#24| |l#0@@24| |l#1@@26| |l#2@@23| |l#3@@23|) $o@@93 $f@@43))  (=> (and (not (= $o@@93 |l#0@@24|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@26| $o@@93) |l#2@@23|))) |l#3@@23|)))) :qid |MutableB.313:10| :skolemid |13155| :pattern ( (MapType6Select (|lambda#24| |l#0@@24| |l#1@@26| |l#2@@23| |l#3@@23|) $o@@93 $f@@43)) )))
(assert (forall ((arg0@@401 T@U) (arg1@@258 T@U) (arg2@@163 T@U) (arg3@@117 Bool) ) (! (= (type (|lambda#25| arg0@@401 arg1@@258 arg2@@163 arg3@@117)) (MapType6Type refType boolType)) :qid |funType:lambda#25| :pattern ( (|lambda#25| arg0@@401 arg1@@258 arg2@@163 arg3@@117)) )))
(assert (forall (($o@@94 T@U) ($f@@44 T@U) (|l#0@@25| T@U) (|l#1@@27| T@U) (|l#2@@24| T@U) (|l#3@@24| Bool) ) (! (let ((alpha@@51 (FieldTypeInv0 (type $f@@44)))) (=> (and (and (and (and (= (type $o@@94) refType) (= (type $f@@44) (FieldType alpha@@51))) (= (type |l#0@@25|) refType)) (= (type |l#1@@27|) (MapType0Type refType MapType1Type))) (= (type |l#2@@24|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#25| |l#0@@25| |l#1@@27| |l#2@@24| |l#3@@24|) $o@@94 $f@@44))  (=> (and (not (= $o@@94 |l#0@@25|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@27| $o@@94) |l#2@@24|))) |l#3@@24|)))) :qid |MutableB.327:10| :skolemid |13156| :pattern ( (MapType6Select (|lambda#25| |l#0@@25| |l#1@@27| |l#2@@24| |l#3@@24|) $o@@94 $f@@44)) )))
(assert (forall ((arg0@@402 T@U) (arg1@@259 T@U) (arg2@@164 T@U) (arg3@@118 Bool) ) (! (= (type (|lambda#26| arg0@@402 arg1@@259 arg2@@164 arg3@@118)) (MapType6Type refType boolType)) :qid |funType:lambda#26| :pattern ( (|lambda#26| arg0@@402 arg1@@259 arg2@@164 arg3@@118)) )))
(assert (forall (($o@@95 T@U) ($f@@45 T@U) (|l#0@@26| T@U) (|l#1@@28| T@U) (|l#2@@25| T@U) (|l#3@@25| Bool) ) (! (let ((alpha@@52 (FieldTypeInv0 (type $f@@45)))) (=> (and (and (and (and (= (type $o@@95) refType) (= (type $f@@45) (FieldType alpha@@52))) (= (type |l#0@@26|) refType)) (= (type |l#1@@28|) (MapType0Type refType MapType1Type))) (= (type |l#2@@25|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#26| |l#0@@26| |l#1@@28| |l#2@@25| |l#3@@25|) $o@@95 $f@@45))  (=> (and (not (= $o@@95 |l#0@@26|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@28| $o@@95) |l#2@@25|))) |l#3@@25|)))) :qid |MutableB.327:10| :skolemid |13157| :pattern ( (MapType6Select (|lambda#26| |l#0@@26| |l#1@@28| |l#2@@25| |l#3@@25|) $o@@95 $f@@45)) )))
(assert (forall ((arg0@@403 T@U) (arg1@@260 T@U) (arg2@@165 T@U) (arg3@@119 Bool) ) (! (= (type (|lambda#27| arg0@@403 arg1@@260 arg2@@165 arg3@@119)) (MapType6Type refType boolType)) :qid |funType:lambda#27| :pattern ( (|lambda#27| arg0@@403 arg1@@260 arg2@@165 arg3@@119)) )))
(assert (forall (($o@@96 T@U) ($f@@46 T@U) (|l#0@@27| T@U) (|l#1@@29| T@U) (|l#2@@26| T@U) (|l#3@@26| Bool) ) (! (let ((alpha@@53 (FieldTypeInv0 (type $f@@46)))) (=> (and (and (and (and (= (type $o@@96) refType) (= (type $f@@46) (FieldType alpha@@53))) (= (type |l#0@@27|) refType)) (= (type |l#1@@29|) (MapType0Type refType MapType1Type))) (= (type |l#2@@26|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#27| |l#0@@27| |l#1@@29| |l#2@@26| |l#3@@26|) $o@@96 $f@@46))  (=> (and (not (= $o@@96 |l#0@@27|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@29| $o@@96) |l#2@@26|))) |l#3@@26|)))) :qid |MutableB.351:10| :skolemid |13158| :pattern ( (MapType6Select (|lambda#27| |l#0@@27| |l#1@@29| |l#2@@26| |l#3@@26|) $o@@96 $f@@46)) )))
(assert (forall ((arg0@@404 T@U) (arg1@@261 T@U) (arg2@@166 T@U) (arg3@@120 Bool) ) (! (= (type (|lambda#28| arg0@@404 arg1@@261 arg2@@166 arg3@@120)) (MapType6Type refType boolType)) :qid |funType:lambda#28| :pattern ( (|lambda#28| arg0@@404 arg1@@261 arg2@@166 arg3@@120)) )))
(assert (forall (($o@@97 T@U) ($f@@47 T@U) (|l#0@@28| T@U) (|l#1@@30| T@U) (|l#2@@27| T@U) (|l#3@@27| Bool) ) (! (let ((alpha@@54 (FieldTypeInv0 (type $f@@47)))) (=> (and (and (and (and (= (type $o@@97) refType) (= (type $f@@47) (FieldType alpha@@54))) (= (type |l#0@@28|) refType)) (= (type |l#1@@30|) (MapType0Type refType MapType1Type))) (= (type |l#2@@27|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#28| |l#0@@28| |l#1@@30| |l#2@@27| |l#3@@27|) $o@@97 $f@@47))  (=> (and (not (= $o@@97 |l#0@@28|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@30| $o@@97) |l#2@@27|))) |l#3@@27|)))) :qid |MutableB.351:10| :skolemid |13159| :pattern ( (MapType6Select (|lambda#28| |l#0@@28| |l#1@@30| |l#2@@27| |l#3@@27|) $o@@97 $f@@47)) )))
(assert (forall ((arg0@@405 T@U) (arg1@@262 T@U) (arg2@@167 T@U) (arg3@@121 Bool) ) (! (= (type (|lambda#29| arg0@@405 arg1@@262 arg2@@167 arg3@@121)) (MapType6Type refType boolType)) :qid |funType:lambda#29| :pattern ( (|lambda#29| arg0@@405 arg1@@262 arg2@@167 arg3@@121)) )))
(assert (forall (($o@@98 T@U) ($f@@48 T@U) (|l#0@@29| T@U) (|l#1@@31| T@U) (|l#2@@28| T@U) (|l#3@@28| Bool) ) (! (let ((alpha@@55 (FieldTypeInv0 (type $f@@48)))) (=> (and (and (and (and (= (type $o@@98) refType) (= (type $f@@48) (FieldType alpha@@55))) (= (type |l#0@@29|) refType)) (= (type |l#1@@31|) (MapType0Type refType MapType1Type))) (= (type |l#2@@28|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#29| |l#0@@29| |l#1@@31| |l#2@@28| |l#3@@28|) $o@@98 $f@@48))  (=> (and (not (= $o@@98 |l#0@@29|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@31| $o@@98) |l#2@@28|))) |l#3@@28|)))) :qid |MutableB.361:10| :skolemid |13160| :pattern ( (MapType6Select (|lambda#29| |l#0@@29| |l#1@@31| |l#2@@28| |l#3@@28|) $o@@98 $f@@48)) )))
(assert (forall ((arg0@@406 T@U) (arg1@@263 T@U) (arg2@@168 T@U) (arg3@@122 Bool) ) (! (= (type (|lambda#30| arg0@@406 arg1@@263 arg2@@168 arg3@@122)) (MapType6Type refType boolType)) :qid |funType:lambda#30| :pattern ( (|lambda#30| arg0@@406 arg1@@263 arg2@@168 arg3@@122)) )))
(assert (forall (($o@@99 T@U) ($f@@49 T@U) (|l#0@@30| T@U) (|l#1@@32| T@U) (|l#2@@29| T@U) (|l#3@@29| Bool) ) (! (let ((alpha@@56 (FieldTypeInv0 (type $f@@49)))) (=> (and (and (and (and (= (type $o@@99) refType) (= (type $f@@49) (FieldType alpha@@56))) (= (type |l#0@@30|) refType)) (= (type |l#1@@32|) (MapType0Type refType MapType1Type))) (= (type |l#2@@29|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#30| |l#0@@30| |l#1@@32| |l#2@@29| |l#3@@29|) $o@@99 $f@@49))  (=> (and (not (= $o@@99 |l#0@@30|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@32| $o@@99) |l#2@@29|))) |l#3@@29|)))) :qid |MutableB.361:10| :skolemid |13161| :pattern ( (MapType6Select (|lambda#30| |l#0@@30| |l#1@@32| |l#2@@29| |l#3@@29|) $o@@99 $f@@49)) )))
(assert (forall ((arg0@@407 T@U) (arg1@@264 T@U) (arg2@@169 T@U) (arg3@@123 Bool) ) (! (= (type (|lambda#31| arg0@@407 arg1@@264 arg2@@169 arg3@@123)) (MapType6Type refType boolType)) :qid |funType:lambda#31| :pattern ( (|lambda#31| arg0@@407 arg1@@264 arg2@@169 arg3@@123)) )))
(assert (forall (($o@@100 T@U) ($f@@50 T@U) (|l#0@@31| T@U) (|l#1@@33| T@U) (|l#2@@30| T@U) (|l#3@@30| Bool) ) (! (let ((alpha@@57 (FieldTypeInv0 (type $f@@50)))) (=> (and (and (and (and (= (type $o@@100) refType) (= (type $f@@50) (FieldType alpha@@57))) (= (type |l#0@@31|) refType)) (= (type |l#1@@33|) (MapType0Type refType MapType1Type))) (= (type |l#2@@30|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#31| |l#0@@31| |l#1@@33| |l#2@@30| |l#3@@30|) $o@@100 $f@@50))  (=> (and (not (= $o@@100 |l#0@@31|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@33| $o@@100) |l#2@@30|))) |l#3@@30|)))) :qid |MutableB.387:10| :skolemid |13162| :pattern ( (MapType6Select (|lambda#31| |l#0@@31| |l#1@@33| |l#2@@30| |l#3@@30|) $o@@100 $f@@50)) )))
(assert (forall ((arg0@@408 T@U) (arg1@@265 T@U) (arg2@@170 T@U) (arg3@@124 Bool) ) (! (= (type (|lambda#32| arg0@@408 arg1@@265 arg2@@170 arg3@@124)) (MapType6Type refType boolType)) :qid |funType:lambda#32| :pattern ( (|lambda#32| arg0@@408 arg1@@265 arg2@@170 arg3@@124)) )))
(assert (forall (($o@@101 T@U) ($f@@51 T@U) (|l#0@@32| T@U) (|l#1@@34| T@U) (|l#2@@31| T@U) (|l#3@@31| Bool) ) (! (let ((alpha@@58 (FieldTypeInv0 (type $f@@51)))) (=> (and (and (and (and (= (type $o@@101) refType) (= (type $f@@51) (FieldType alpha@@58))) (= (type |l#0@@32|) refType)) (= (type |l#1@@34|) (MapType0Type refType MapType1Type))) (= (type |l#2@@31|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#32| |l#0@@32| |l#1@@34| |l#2@@31| |l#3@@31|) $o@@101 $f@@51))  (=> (and (not (= $o@@101 |l#0@@32|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@34| $o@@101) |l#2@@31|))) |l#3@@31|)))) :qid |MutableB.387:10| :skolemid |13163| :pattern ( (MapType6Select (|lambda#32| |l#0@@32| |l#1@@34| |l#2@@31| |l#3@@31|) $o@@101 $f@@51)) )))
(assert (forall ((arg0@@409 T@U) (arg1@@266 T@U) (arg2@@171 T@U) (arg3@@125 Bool) ) (! (= (type (|lambda#33| arg0@@409 arg1@@266 arg2@@171 arg3@@125)) (MapType6Type refType boolType)) :qid |funType:lambda#33| :pattern ( (|lambda#33| arg0@@409 arg1@@266 arg2@@171 arg3@@125)) )))
(assert (forall (($o@@102 T@U) ($f@@52 T@U) (|l#0@@33| T@U) (|l#1@@35| T@U) (|l#2@@32| T@U) (|l#3@@32| Bool) ) (! (let ((alpha@@59 (FieldTypeInv0 (type $f@@52)))) (=> (and (and (and (and (= (type $o@@102) refType) (= (type $f@@52) (FieldType alpha@@59))) (= (type |l#0@@33|) refType)) (= (type |l#1@@35|) (MapType0Type refType MapType1Type))) (= (type |l#2@@32|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#33| |l#0@@33| |l#1@@35| |l#2@@32| |l#3@@32|) $o@@102 $f@@52))  (=> (and (not (= $o@@102 |l#0@@33|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@35| $o@@102) |l#2@@32|))) |l#3@@32|)))) :qid |MutableB.397:10| :skolemid |13164| :pattern ( (MapType6Select (|lambda#33| |l#0@@33| |l#1@@35| |l#2@@32| |l#3@@32|) $o@@102 $f@@52)) )))
(assert (forall ((arg0@@410 T@U) (arg1@@267 T@U) (arg2@@172 T@U) (arg3@@126 Bool) ) (! (= (type (|lambda#34| arg0@@410 arg1@@267 arg2@@172 arg3@@126)) (MapType6Type refType boolType)) :qid |funType:lambda#34| :pattern ( (|lambda#34| arg0@@410 arg1@@267 arg2@@172 arg3@@126)) )))
(assert (forall (($o@@103 T@U) ($f@@53 T@U) (|l#0@@34| T@U) (|l#1@@36| T@U) (|l#2@@33| T@U) (|l#3@@33| Bool) ) (! (let ((alpha@@60 (FieldTypeInv0 (type $f@@53)))) (=> (and (and (and (and (= (type $o@@103) refType) (= (type $f@@53) (FieldType alpha@@60))) (= (type |l#0@@34|) refType)) (= (type |l#1@@36|) (MapType0Type refType MapType1Type))) (= (type |l#2@@33|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#34| |l#0@@34| |l#1@@36| |l#2@@33| |l#3@@33|) $o@@103 $f@@53))  (=> (and (not (= $o@@103 |l#0@@34|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@36| $o@@103) |l#2@@33|))) |l#3@@33|)))) :qid |MutableB.397:10| :skolemid |13165| :pattern ( (MapType6Select (|lambda#34| |l#0@@34| |l#1@@36| |l#2@@33| |l#3@@33|) $o@@103 $f@@53)) )))
(assert (forall ((arg0@@411 T@U) (arg1@@268 T@U) (arg2@@173 T@U) (arg3@@127 Bool) ) (! (= (type (|lambda#35| arg0@@411 arg1@@268 arg2@@173 arg3@@127)) (MapType6Type refType boolType)) :qid |funType:lambda#35| :pattern ( (|lambda#35| arg0@@411 arg1@@268 arg2@@173 arg3@@127)) )))
(assert (forall (($o@@104 T@U) ($f@@54 T@U) (|l#0@@35| T@U) (|l#1@@37| T@U) (|l#2@@34| T@U) (|l#3@@34| Bool) ) (! (let ((alpha@@61 (FieldTypeInv0 (type $f@@54)))) (=> (and (and (and (and (= (type $o@@104) refType) (= (type $f@@54) (FieldType alpha@@61))) (= (type |l#0@@35|) refType)) (= (type |l#1@@37|) (MapType0Type refType MapType1Type))) (= (type |l#2@@34|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#35| |l#0@@35| |l#1@@37| |l#2@@34| |l#3@@34|) $o@@104 $f@@54))  (=> (and (not (= $o@@104 |l#0@@35|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@37| $o@@104) |l#2@@34|))) |l#3@@34|)))) :qid |MutableB.413:10| :skolemid |13166| :pattern ( (MapType6Select (|lambda#35| |l#0@@35| |l#1@@37| |l#2@@34| |l#3@@34|) $o@@104 $f@@54)) )))
(assert (forall ((arg0@@412 T@U) (arg1@@269 T@U) (arg2@@174 T@U) (arg3@@128 Bool) ) (! (= (type (|lambda#36| arg0@@412 arg1@@269 arg2@@174 arg3@@128)) (MapType6Type refType boolType)) :qid |funType:lambda#36| :pattern ( (|lambda#36| arg0@@412 arg1@@269 arg2@@174 arg3@@128)) )))
(assert (forall (($o@@105 T@U) ($f@@55 T@U) (|l#0@@36| T@U) (|l#1@@38| T@U) (|l#2@@35| T@U) (|l#3@@35| Bool) ) (! (let ((alpha@@62 (FieldTypeInv0 (type $f@@55)))) (=> (and (and (and (and (= (type $o@@105) refType) (= (type $f@@55) (FieldType alpha@@62))) (= (type |l#0@@36|) refType)) (= (type |l#1@@38|) (MapType0Type refType MapType1Type))) (= (type |l#2@@35|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#36| |l#0@@36| |l#1@@38| |l#2@@35| |l#3@@35|) $o@@105 $f@@55))  (=> (and (not (= $o@@105 |l#0@@36|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@38| $o@@105) |l#2@@35|))) |l#3@@35|)))) :qid |MutableB.429:10| :skolemid |13167| :pattern ( (MapType6Select (|lambda#36| |l#0@@36| |l#1@@38| |l#2@@35| |l#3@@35|) $o@@105 $f@@55)) )))
(assert (forall ((arg0@@413 T@U) (arg1@@270 T@U) (arg2@@175 T@U) (arg3@@129 T@U) ) (! (= (type (|lambda#37| arg0@@413 arg1@@270 arg2@@175 arg3@@129)) (MapType6Type refType boolType)) :qid |funType:lambda#37| :pattern ( (|lambda#37| arg0@@413 arg1@@270 arg2@@175 arg3@@129)) )))
(assert (forall (($o@@106 T@U) ($f@@56 T@U) (|l#0@@37| T@U) (|l#1@@39| T@U) (|l#2@@36| T@U) (|l#3@@36| T@U) ) (! (let ((alpha@@63 (FieldTypeInv0 (type $f@@56)))) (=> (and (and (and (and (and (= (type $o@@106) refType) (= (type $f@@56) (FieldType alpha@@63))) (= (type |l#0@@37|) refType)) (= (type |l#1@@39|) (MapType0Type refType MapType1Type))) (= (type |l#2@@36|) (FieldType boolType))) (= (type |l#3@@36|) refType)) (= (U_2_bool (MapType6Select (|lambda#37| |l#0@@37| |l#1@@39| |l#2@@36| |l#3@@36|) $o@@106 $f@@56))  (=> (and (not (= $o@@106 |l#0@@37|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@39| $o@@106) |l#2@@36|))) (= $o@@106 |l#3@@36|))))) :qid |MutableB.463:10| :skolemid |13168| :pattern ( (MapType6Select (|lambda#37| |l#0@@37| |l#1@@39| |l#2@@36| |l#3@@36|) $o@@106 $f@@56)) )))
(assert (forall ((arg0@@414 T@U) (arg1@@271 T@U) (arg2@@176 T@U) (arg3@@130 Bool) ) (! (= (type (|lambda#38| arg0@@414 arg1@@271 arg2@@176 arg3@@130)) (MapType6Type refType boolType)) :qid |funType:lambda#38| :pattern ( (|lambda#38| arg0@@414 arg1@@271 arg2@@176 arg3@@130)) )))
(assert (forall (($o@@107 T@U) ($f@@57 T@U) (|l#0@@38| T@U) (|l#1@@40| T@U) (|l#2@@37| T@U) (|l#3@@37| Bool) ) (! (let ((alpha@@64 (FieldTypeInv0 (type $f@@57)))) (=> (and (and (and (and (= (type $o@@107) refType) (= (type $f@@57) (FieldType alpha@@64))) (= (type |l#0@@38|) refType)) (= (type |l#1@@40|) (MapType0Type refType MapType1Type))) (= (type |l#2@@37|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#38| |l#0@@38| |l#1@@40| |l#2@@37| |l#3@@37|) $o@@107 $f@@57))  (=> (and (not (= $o@@107 |l#0@@38|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@40| $o@@107) |l#2@@37|))) |l#3@@37|)))) :qid |MutableB.520:9| :skolemid |13169| :pattern ( (MapType6Select (|lambda#38| |l#0@@38| |l#1@@40| |l#2@@37| |l#3@@37|) $o@@107 $f@@57)) )))
(assert (forall ((arg0@@415 T@U) (arg1@@272 T@U) (arg2@@177 T@U) (arg3@@131 Bool) ) (! (= (type (|lambda#39| arg0@@415 arg1@@272 arg2@@177 arg3@@131)) (MapType6Type refType boolType)) :qid |funType:lambda#39| :pattern ( (|lambda#39| arg0@@415 arg1@@272 arg2@@177 arg3@@131)) )))
(assert (forall (($o@@108 T@U) ($f@@58 T@U) (|l#0@@39| T@U) (|l#1@@41| T@U) (|l#2@@38| T@U) (|l#3@@38| Bool) ) (! (let ((alpha@@65 (FieldTypeInv0 (type $f@@58)))) (=> (and (and (and (and (= (type $o@@108) refType) (= (type $f@@58) (FieldType alpha@@65))) (= (type |l#0@@39|) refType)) (= (type |l#1@@41|) (MapType0Type refType MapType1Type))) (= (type |l#2@@38|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#39| |l#0@@39| |l#1@@41| |l#2@@38| |l#3@@38|) $o@@108 $f@@58))  (=> (and (not (= $o@@108 |l#0@@39|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@41| $o@@108) |l#2@@38|))) |l#3@@38|)))) :qid |MutableB.536:9| :skolemid |13170| :pattern ( (MapType6Select (|lambda#39| |l#0@@39| |l#1@@41| |l#2@@38| |l#3@@38|) $o@@108 $f@@58)) )))
(assert (forall ((arg0@@416 T@U) (arg1@@273 T@U) (arg2@@178 T@U) (arg3@@132 Bool) ) (! (= (type (|lambda#40| arg0@@416 arg1@@273 arg2@@178 arg3@@132)) (MapType6Type refType boolType)) :qid |funType:lambda#40| :pattern ( (|lambda#40| arg0@@416 arg1@@273 arg2@@178 arg3@@132)) )))
(assert (forall (($o@@109 T@U) ($f@@59 T@U) (|l#0@@40| T@U) (|l#1@@42| T@U) (|l#2@@39| T@U) (|l#3@@39| Bool) ) (! (let ((alpha@@66 (FieldTypeInv0 (type $f@@59)))) (=> (and (and (and (and (= (type $o@@109) refType) (= (type $f@@59) (FieldType alpha@@66))) (= (type |l#0@@40|) refType)) (= (type |l#1@@42|) (MapType0Type refType MapType1Type))) (= (type |l#2@@39|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#40| |l#0@@40| |l#1@@42| |l#2@@39| |l#3@@39|) $o@@109 $f@@59))  (=> (and (not (= $o@@109 |l#0@@40|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@42| $o@@109) |l#2@@39|))) |l#3@@39|)))) :qid |MutableB.600:9| :skolemid |13171| :pattern ( (MapType6Select (|lambda#40| |l#0@@40| |l#1@@42| |l#2@@39| |l#3@@39|) $o@@109 $f@@59)) )))
(assert (forall ((arg0@@417 T@U) (arg1@@274 T@U) (arg2@@179 T@U) (arg3@@133 T@U) ) (! (= (type (|lambda#41| arg0@@417 arg1@@274 arg2@@179 arg3@@133)) (MapType6Type refType boolType)) :qid |funType:lambda#41| :pattern ( (|lambda#41| arg0@@417 arg1@@274 arg2@@179 arg3@@133)) )))
(assert (forall (($o@@110 T@U) ($f@@60 T@U) (|l#0@@41| T@U) (|l#1@@43| T@U) (|l#2@@40| T@U) (|l#3@@40| T@U) ) (! (let ((alpha@@67 (FieldTypeInv0 (type $f@@60)))) (=> (and (and (and (and (and (= (type $o@@110) refType) (= (type $f@@60) (FieldType alpha@@67))) (= (type |l#0@@41|) refType)) (= (type |l#1@@43|) (MapType0Type refType MapType1Type))) (= (type |l#2@@40|) (FieldType boolType))) (= (type |l#3@@40|) refType)) (= (U_2_bool (MapType6Select (|lambda#41| |l#0@@41| |l#1@@43| |l#2@@40| |l#3@@40|) $o@@110 $f@@60))  (=> (and (not (= $o@@110 |l#0@@41|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@43| $o@@110) |l#2@@40|))) (= $o@@110 |l#3@@40|))))) :qid |MutableB.637:10| :skolemid |13172| :pattern ( (MapType6Select (|lambda#41| |l#0@@41| |l#1@@43| |l#2@@40| |l#3@@40|) $o@@110 $f@@60)) )))
(assert (forall ((arg0@@418 T@U) (arg1@@275 T@U) (arg2@@180 T@U) (arg3@@134 T@U) ) (! (= (type (|lambda#42| arg0@@418 arg1@@275 arg2@@180 arg3@@134)) (MapType6Type refType boolType)) :qid |funType:lambda#42| :pattern ( (|lambda#42| arg0@@418 arg1@@275 arg2@@180 arg3@@134)) )))
(assert (forall (($o@@111 T@U) ($f@@61 T@U) (|l#0@@42| T@U) (|l#1@@44| T@U) (|l#2@@41| T@U) (|l#3@@41| T@U) ) (! (let ((alpha@@68 (FieldTypeInv0 (type $f@@61)))) (=> (and (and (and (and (and (= (type $o@@111) refType) (= (type $f@@61) (FieldType alpha@@68))) (= (type |l#0@@42|) refType)) (= (type |l#1@@44|) (MapType0Type refType MapType1Type))) (= (type |l#2@@41|) (FieldType boolType))) (= (type |l#3@@41|) refType)) (= (U_2_bool (MapType6Select (|lambda#42| |l#0@@42| |l#1@@44| |l#2@@41| |l#3@@41|) $o@@111 $f@@61))  (=> (and (not (= $o@@111 |l#0@@42|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@44| $o@@111) |l#2@@41|))) (= $o@@111 |l#3@@41|))))) :qid |MutableB.637:10| :skolemid |13173| :pattern ( (MapType6Select (|lambda#42| |l#0@@42| |l#1@@44| |l#2@@41| |l#3@@41|) $o@@111 $f@@61)) )))
(assert (forall ((arg0@@419 T@U) (arg1@@276 T@U) (arg2@@181 T@U) (arg3@@135 Bool) ) (! (= (type (|lambda#43| arg0@@419 arg1@@276 arg2@@181 arg3@@135)) (MapType6Type refType boolType)) :qid |funType:lambda#43| :pattern ( (|lambda#43| arg0@@419 arg1@@276 arg2@@181 arg3@@135)) )))
(assert (forall (($o@@112 T@U) ($f@@62 T@U) (|l#0@@43| T@U) (|l#1@@45| T@U) (|l#2@@42| T@U) (|l#3@@42| Bool) ) (! (let ((alpha@@69 (FieldTypeInv0 (type $f@@62)))) (=> (and (and (and (and (= (type $o@@112) refType) (= (type $f@@62) (FieldType alpha@@69))) (= (type |l#0@@43|) refType)) (= (type |l#1@@45|) (MapType0Type refType MapType1Type))) (= (type |l#2@@42|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#43| |l#0@@43| |l#1@@45| |l#2@@42| |l#3@@42|) $o@@112 $f@@62))  (=> (and (not (= $o@@112 |l#0@@43|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@45| $o@@112) |l#2@@42|))) |l#3@@42|)))) :qid |MutableB.669:10| :skolemid |13174| :pattern ( (MapType6Select (|lambda#43| |l#0@@43| |l#1@@45| |l#2@@42| |l#3@@42|) $o@@112 $f@@62)) )))
(assert (forall ((arg0@@420 T@U) (arg1@@277 T@U) (arg2@@182 T@U) (arg3@@136 Bool) ) (! (= (type (|lambda#44| arg0@@420 arg1@@277 arg2@@182 arg3@@136)) (MapType6Type refType boolType)) :qid |funType:lambda#44| :pattern ( (|lambda#44| arg0@@420 arg1@@277 arg2@@182 arg3@@136)) )))
(assert (forall (($o@@113 T@U) ($f@@63 T@U) (|l#0@@44| T@U) (|l#1@@46| T@U) (|l#2@@43| T@U) (|l#3@@43| Bool) ) (! (let ((alpha@@70 (FieldTypeInv0 (type $f@@63)))) (=> (and (and (and (and (= (type $o@@113) refType) (= (type $f@@63) (FieldType alpha@@70))) (= (type |l#0@@44|) refType)) (= (type |l#1@@46|) (MapType0Type refType MapType1Type))) (= (type |l#2@@43|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#44| |l#0@@44| |l#1@@46| |l#2@@43| |l#3@@43|) $o@@113 $f@@63))  (=> (and (not (= $o@@113 |l#0@@44|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@46| $o@@113) |l#2@@43|))) |l#3@@43|)))) :qid |MutableB.669:10| :skolemid |13175| :pattern ( (MapType6Select (|lambda#44| |l#0@@44| |l#1@@46| |l#2@@43| |l#3@@43|) $o@@113 $f@@63)) )))
(assert (forall ((arg0@@421 T@U) (arg1@@278 T@U) (arg2@@183 T@U) (arg3@@137 T@U) ) (! (= (type (|lambda#45| arg0@@421 arg1@@278 arg2@@183 arg3@@137)) (MapType6Type refType boolType)) :qid |funType:lambda#45| :pattern ( (|lambda#45| arg0@@421 arg1@@278 arg2@@183 arg3@@137)) )))
(assert (forall (($o@@114 T@U) ($f@@64 T@U) (|l#0@@45| T@U) (|l#1@@47| T@U) (|l#2@@44| T@U) (|l#3@@44| T@U) ) (! (let ((alpha@@71 (FieldTypeInv0 (type $f@@64)))) (=> (and (and (and (and (and (= (type $o@@114) refType) (= (type $f@@64) (FieldType alpha@@71))) (= (type |l#0@@45|) refType)) (= (type |l#1@@47|) (MapType0Type refType MapType1Type))) (= (type |l#2@@44|) (FieldType boolType))) (= (type |l#3@@44|) refType)) (= (U_2_bool (MapType6Select (|lambda#45| |l#0@@45| |l#1@@47| |l#2@@44| |l#3@@44|) $o@@114 $f@@64))  (=> (and (not (= $o@@114 |l#0@@45|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@47| $o@@114) |l#2@@44|))) (= $o@@114 |l#3@@44|))))) :qid |MutableB.707:10| :skolemid |13176| :pattern ( (MapType6Select (|lambda#45| |l#0@@45| |l#1@@47| |l#2@@44| |l#3@@44|) $o@@114 $f@@64)) )))
(assert (forall ((arg0@@422 T@U) (arg1@@279 T@U) (arg2@@184 T@U) (arg3@@138 T@U) ) (! (= (type (|lambda#46| arg0@@422 arg1@@279 arg2@@184 arg3@@138)) (MapType6Type refType boolType)) :qid |funType:lambda#46| :pattern ( (|lambda#46| arg0@@422 arg1@@279 arg2@@184 arg3@@138)) )))
(assert (forall (($o@@115 T@U) ($f@@65 T@U) (|l#0@@46| T@U) (|l#1@@48| T@U) (|l#2@@45| T@U) (|l#3@@45| T@U) ) (! (let ((alpha@@72 (FieldTypeInv0 (type $f@@65)))) (=> (and (and (and (and (and (= (type $o@@115) refType) (= (type $f@@65) (FieldType alpha@@72))) (= (type |l#0@@46|) refType)) (= (type |l#1@@48|) (MapType0Type refType MapType1Type))) (= (type |l#2@@45|) (FieldType boolType))) (= (type |l#3@@45|) refType)) (= (U_2_bool (MapType6Select (|lambda#46| |l#0@@46| |l#1@@48| |l#2@@45| |l#3@@45|) $o@@115 $f@@65))  (=> (and (not (= $o@@115 |l#0@@46|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@48| $o@@115) |l#2@@45|))) (= $o@@115 |l#3@@45|))))) :qid |MutableB.740:10| :skolemid |13177| :pattern ( (MapType6Select (|lambda#46| |l#0@@46| |l#1@@48| |l#2@@45| |l#3@@45|) $o@@115 $f@@65)) )))
(assert (forall ((arg0@@423 T@U) (arg1@@280 T@U) (arg2@@185 T@U) (arg3@@139 Bool) ) (! (= (type (|lambda#47| arg0@@423 arg1@@280 arg2@@185 arg3@@139)) (MapType6Type refType boolType)) :qid |funType:lambda#47| :pattern ( (|lambda#47| arg0@@423 arg1@@280 arg2@@185 arg3@@139)) )))
(assert (forall (($o@@116 T@U) ($f@@66 T@U) (|l#0@@47| T@U) (|l#1@@49| T@U) (|l#2@@46| T@U) (|l#3@@46| Bool) ) (! (let ((alpha@@73 (FieldTypeInv0 (type $f@@66)))) (=> (and (and (and (and (= (type $o@@116) refType) (= (type $f@@66) (FieldType alpha@@73))) (= (type |l#0@@47|) refType)) (= (type |l#1@@49|) (MapType0Type refType MapType1Type))) (= (type |l#2@@46|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#47| |l#0@@47| |l#1@@49| |l#2@@46| |l#3@@46|) $o@@116 $f@@66))  (=> (and (not (= $o@@116 |l#0@@47|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@49| $o@@116) |l#2@@46|))) |l#3@@46|)))) :qid |MutableB.807:18| :skolemid |13178| :pattern ( (MapType6Select (|lambda#47| |l#0@@47| |l#1@@49| |l#2@@46| |l#3@@46|) $o@@116 $f@@66)) )))
(assert (forall ((arg0@@424 T@U) (arg1@@281 T@U) (arg2@@186 T@U) (arg3@@140 T@U) (arg4@@64 T@U) (arg5@@27 T@U) (arg6@@11 T@U) ) (! (= (type (|lambda#48| arg0@@424 arg1@@281 arg2@@186 arg3@@140 arg4@@64 arg5@@27 arg6@@11)) (MapType6Type refType boolType)) :qid |funType:lambda#48| :pattern ( (|lambda#48| arg0@@424 arg1@@281 arg2@@186 arg3@@140 arg4@@64 arg5@@27 arg6@@11)) )))
(assert (forall (($o@@117 T@U) ($f@@67 T@U) (|l#0@@48| T@U) (|l#1@@50| T@U) (|l#2@@47| T@U) (|l#3@@47| T@U) (|l#4@@2| T@U) (|l#5@@2| T@U) (|l#6@@2| T@U) ) (! (let ((alpha@@74 (FieldTypeInv0 (type $f@@67)))) (=> (and (and (and (and (and (and (and (and (= (type $o@@117) refType) (= (type $f@@67) (FieldType alpha@@74))) (= (type |l#0@@48|) refType)) (= (type |l#1@@50|) (MapType0Type refType MapType1Type))) (= (type |l#2@@47|) (FieldType boolType))) (= (type |l#3@@47|) refType)) (= (type |l#4@@2|) refType)) (= (type |l#5@@2|) refType)) (= (type |l#6@@2|) refType)) (= (U_2_bool (MapType6Select (|lambda#48| |l#0@@48| |l#1@@50| |l#2@@47| |l#3@@47| |l#4@@2| |l#5@@2| |l#6@@2|) $o@@117 $f@@67))  (=> (and (not (= $o@@117 |l#0@@48|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@50| $o@@117) |l#2@@47|))) (or (or (or (= $o@@117 |l#3@@47|) (= $o@@117 |l#4@@2|)) (= $o@@117 |l#5@@2|)) (= $o@@117 |l#6@@2|)))))) :qid |MutableB.901:10| :skolemid |13179| :pattern ( (MapType6Select (|lambda#48| |l#0@@48| |l#1@@50| |l#2@@47| |l#3@@47| |l#4@@2| |l#5@@2| |l#6@@2|) $o@@117 $f@@67)) )))
(assert (forall ((arg0@@425 T@U) (arg1@@282 T@U) (arg2@@187 T@U) (arg3@@141 T@U) (arg4@@65 T@U) (arg5@@28 T@U) ) (! (= (type (|lambda#49| arg0@@425 arg1@@282 arg2@@187 arg3@@141 arg4@@65 arg5@@28)) (MapType6Type refType boolType)) :qid |funType:lambda#49| :pattern ( (|lambda#49| arg0@@425 arg1@@282 arg2@@187 arg3@@141 arg4@@65 arg5@@28)) )))
(assert (forall (($o@@118 T@U) ($f@@68 T@U) (|l#0@@49| T@U) (|l#1@@51| T@U) (|l#2@@48| T@U) (|l#3@@48| T@U) (|l#4@@3| T@U) (|l#5@@3| T@U) ) (! (let ((alpha@@75 (FieldTypeInv0 (type $f@@68)))) (=> (and (and (and (and (and (and (and (= (type $o@@118) refType) (= (type $f@@68) (FieldType alpha@@75))) (= (type |l#0@@49|) refType)) (= (type |l#1@@51|) (MapType0Type refType MapType1Type))) (= (type |l#2@@48|) (FieldType boolType))) (= (type |l#3@@48|) refType)) (= (type |l#4@@3|) refType)) (= (type |l#5@@3|) refType)) (= (U_2_bool (MapType6Select (|lambda#49| |l#0@@49| |l#1@@51| |l#2@@48| |l#3@@48| |l#4@@3| |l#5@@3|) $o@@118 $f@@68))  (=> (and (not (= $o@@118 |l#0@@49|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@51| $o@@118) |l#2@@48|))) (or (or (= $o@@118 |l#3@@48|) (= $o@@118 |l#4@@3|)) (= $o@@118 |l#5@@3|)))))) :qid |MutableB.957:10| :skolemid |13180| :pattern ( (MapType6Select (|lambda#49| |l#0@@49| |l#1@@51| |l#2@@48| |l#3@@48| |l#4@@3| |l#5@@3|) $o@@118 $f@@68)) )))
(assert (forall ((arg0@@426 T@U) (arg1@@283 T@U) (arg2@@188 T@U) (arg3@@142 T@U) (arg4@@66 T@U) (arg5@@29 T@U) ) (! (= (type (|lambda#50| arg0@@426 arg1@@283 arg2@@188 arg3@@142 arg4@@66 arg5@@29)) (MapType6Type refType boolType)) :qid |funType:lambda#50| :pattern ( (|lambda#50| arg0@@426 arg1@@283 arg2@@188 arg3@@142 arg4@@66 arg5@@29)) )))
(assert (forall (($o@@119 T@U) ($f@@69 T@U) (|l#0@@50| T@U) (|l#1@@52| T@U) (|l#2@@49| T@U) (|l#3@@49| T@U) (|l#4@@4| T@U) (|l#5@@4| T@U) ) (! (let ((alpha@@76 (FieldTypeInv0 (type $f@@69)))) (=> (and (and (and (and (and (and (and (= (type $o@@119) refType) (= (type $f@@69) (FieldType alpha@@76))) (= (type |l#0@@50|) refType)) (= (type |l#1@@52|) (MapType0Type refType MapType1Type))) (= (type |l#2@@49|) (FieldType boolType))) (= (type |l#3@@49|) refType)) (= (type |l#4@@4|) refType)) (= (type |l#5@@4|) refType)) (= (U_2_bool (MapType6Select (|lambda#50| |l#0@@50| |l#1@@52| |l#2@@49| |l#3@@49| |l#4@@4| |l#5@@4|) $o@@119 $f@@69))  (=> (and (not (= $o@@119 |l#0@@50|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@52| $o@@119) |l#2@@49|))) (or (or (= $o@@119 |l#3@@49|) (= $o@@119 |l#4@@4|)) (= $o@@119 |l#5@@4|)))))) :qid |MutableB.957:10| :skolemid |13181| :pattern ( (MapType6Select (|lambda#50| |l#0@@50| |l#1@@52| |l#2@@49| |l#3@@49| |l#4@@4| |l#5@@4|) $o@@119 $f@@69)) )))
(assert (forall ((arg0@@427 T@U) (arg1@@284 T@U) (arg2@@189 T@U) (arg3@@143 Bool) ) (! (= (type (|lambda#51| arg0@@427 arg1@@284 arg2@@189 arg3@@143)) (MapType6Type refType boolType)) :qid |funType:lambda#51| :pattern ( (|lambda#51| arg0@@427 arg1@@284 arg2@@189 arg3@@143)) )))
(assert (forall (($o@@120 T@U) ($f@@70 T@U) (|l#0@@51| T@U) (|l#1@@53| T@U) (|l#2@@50| T@U) (|l#3@@50| Bool) ) (! (let ((alpha@@77 (FieldTypeInv0 (type $f@@70)))) (=> (and (and (and (and (= (type $o@@120) refType) (= (type $f@@70) (FieldType alpha@@77))) (= (type |l#0@@51|) refType)) (= (type |l#1@@53|) (MapType0Type refType MapType1Type))) (= (type |l#2@@50|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#51| |l#0@@51| |l#1@@53| |l#2@@50| |l#3@@50|) $o@@120 $f@@70))  (=> (and (not (= $o@@120 |l#0@@51|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@53| $o@@120) |l#2@@50|))) |l#3@@50|)))) :qid |MutableB.986:18| :skolemid |13182| :pattern ( (MapType6Select (|lambda#51| |l#0@@51| |l#1@@53| |l#2@@50| |l#3@@50|) $o@@120 $f@@70)) )))
(assert (forall ((arg0@@428 T@U) (arg1@@285 T@U) (arg2@@190 T@U) (arg3@@144 T@U) (arg4@@67 T@U) (arg5@@30 T@U) ) (! (= (type (|lambda#52| arg0@@428 arg1@@285 arg2@@190 arg3@@144 arg4@@67 arg5@@30)) (MapType6Type refType boolType)) :qid |funType:lambda#52| :pattern ( (|lambda#52| arg0@@428 arg1@@285 arg2@@190 arg3@@144 arg4@@67 arg5@@30)) )))
(assert (forall (($o@@121 T@U) ($f@@71 T@U) (|l#0@@52| T@U) (|l#1@@54| T@U) (|l#2@@51| T@U) (|l#3@@51| T@U) (|l#4@@5| T@U) (|l#5@@5| T@U) ) (! (let ((alpha@@78 (FieldTypeInv0 (type $f@@71)))) (=> (and (and (and (and (and (and (and (= (type $o@@121) refType) (= (type $f@@71) (FieldType alpha@@78))) (= (type |l#0@@52|) refType)) (= (type |l#1@@54|) (MapType0Type refType MapType1Type))) (= (type |l#2@@51|) (FieldType boolType))) (= (type |l#3@@51|) refType)) (= (type |l#4@@5|) refType)) (= (type |l#5@@5|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType6Select (|lambda#52| |l#0@@52| |l#1@@54| |l#2@@51| |l#3@@51| |l#4@@5| |l#5@@5|) $o@@121 $f@@71))  (=> (and (not (= $o@@121 |l#0@@52|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@54| $o@@121) |l#2@@51|))) (or (or (= $o@@121 |l#3@@51|) (= $o@@121 |l#4@@5|)) (U_2_bool (MapType0Select |l#5@@5| ($Box $o@@121)))))))) :qid |MutableB.1049:10| :skolemid |13183| :pattern ( (MapType6Select (|lambda#52| |l#0@@52| |l#1@@54| |l#2@@51| |l#3@@51| |l#4@@5| |l#5@@5|) $o@@121 $f@@71)) )))
(assert (forall ((arg0@@429 T@U) (arg1@@286 T@U) (arg2@@191 T@U) (arg3@@145 T@U) (arg4@@68 T@U) (arg5@@31 T@U) ) (! (= (type (|lambda#53| arg0@@429 arg1@@286 arg2@@191 arg3@@145 arg4@@68 arg5@@31)) (MapType6Type refType boolType)) :qid |funType:lambda#53| :pattern ( (|lambda#53| arg0@@429 arg1@@286 arg2@@191 arg3@@145 arg4@@68 arg5@@31)) )))
(assert (forall (($o@@122 T@U) ($f@@72 T@U) (|l#0@@53| T@U) (|l#1@@55| T@U) (|l#2@@52| T@U) (|l#3@@52| T@U) (|l#4@@6| T@U) (|l#5@@6| T@U) ) (! (let ((alpha@@79 (FieldTypeInv0 (type $f@@72)))) (=> (and (and (and (and (and (and (and (= (type $o@@122) refType) (= (type $f@@72) (FieldType alpha@@79))) (= (type |l#0@@53|) refType)) (= (type |l#1@@55|) (MapType0Type refType MapType1Type))) (= (type |l#2@@52|) (FieldType boolType))) (= (type |l#3@@52|) refType)) (= (type |l#4@@6|) refType)) (= (type |l#5@@6|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType6Select (|lambda#53| |l#0@@53| |l#1@@55| |l#2@@52| |l#3@@52| |l#4@@6| |l#5@@6|) $o@@122 $f@@72))  (=> (and (not (= $o@@122 |l#0@@53|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@55| $o@@122) |l#2@@52|))) (or (or (= $o@@122 |l#3@@52|) (= $o@@122 |l#4@@6|)) (U_2_bool (MapType0Select |l#5@@6| ($Box $o@@122)))))))) :qid |MutableB.1049:10| :skolemid |13184| :pattern ( (MapType6Select (|lambda#53| |l#0@@53| |l#1@@55| |l#2@@52| |l#3@@52| |l#4@@6| |l#5@@6|) $o@@122 $f@@72)) )))
(assert (forall ((arg0@@430 T@U) (arg1@@287 T@U) (arg2@@192 T@U) (arg3@@146 T@U) (arg4@@69 T@U) ) (! (= (type (|lambda#54| arg0@@430 arg1@@287 arg2@@192 arg3@@146 arg4@@69)) (MapType6Type refType boolType)) :qid |funType:lambda#54| :pattern ( (|lambda#54| arg0@@430 arg1@@287 arg2@@192 arg3@@146 arg4@@69)) )))
(assert (forall (($o@@123 T@U) ($f@@73 T@U) (|l#0@@54| T@U) (|l#1@@56| T@U) (|l#2@@53| T@U) (|l#3@@53| T@U) (|l#4@@7| T@U) ) (! (let ((alpha@@80 (FieldTypeInv0 (type $f@@73)))) (=> (and (and (and (and (and (and (= (type $o@@123) refType) (= (type $f@@73) (FieldType alpha@@80))) (= (type |l#0@@54|) refType)) (= (type |l#1@@56|) (MapType0Type refType MapType1Type))) (= (type |l#2@@53|) (FieldType boolType))) (= (type |l#3@@53|) refType)) (= (type |l#4@@7|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType6Select (|lambda#54| |l#0@@54| |l#1@@56| |l#2@@53| |l#3@@53| |l#4@@7|) $o@@123 $f@@73))  (=> (and (not (= $o@@123 |l#0@@54|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@56| $o@@123) |l#2@@53|))) (or (= $o@@123 |l#3@@53|) (U_2_bool (MapType0Select |l#4@@7| ($Box $o@@123)))))))) :qid |MutableB.1106:10| :skolemid |13185| :pattern ( (MapType6Select (|lambda#54| |l#0@@54| |l#1@@56| |l#2@@53| |l#3@@53| |l#4@@7|) $o@@123 $f@@73)) )))
(assert (forall ((arg0@@431 T@U) (arg1@@288 T@U) (arg2@@193 T@U) (arg3@@147 T@U) (arg4@@70 T@U) ) (! (= (type (|lambda#55| arg0@@431 arg1@@288 arg2@@193 arg3@@147 arg4@@70)) (MapType6Type refType boolType)) :qid |funType:lambda#55| :pattern ( (|lambda#55| arg0@@431 arg1@@288 arg2@@193 arg3@@147 arg4@@70)) )))
(assert (forall (($o@@124 T@U) ($f@@74 T@U) (|l#0@@55| T@U) (|l#1@@57| T@U) (|l#2@@54| T@U) (|l#3@@54| T@U) (|l#4@@8| T@U) ) (! (let ((alpha@@81 (FieldTypeInv0 (type $f@@74)))) (=> (and (and (and (and (and (and (= (type $o@@124) refType) (= (type $f@@74) (FieldType alpha@@81))) (= (type |l#0@@55|) refType)) (= (type |l#1@@57|) (MapType0Type refType MapType1Type))) (= (type |l#2@@54|) (FieldType boolType))) (= (type |l#3@@54|) refType)) (= (type |l#4@@8|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType6Select (|lambda#55| |l#0@@55| |l#1@@57| |l#2@@54| |l#3@@54| |l#4@@8|) $o@@124 $f@@74))  (=> (and (not (= $o@@124 |l#0@@55|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@57| $o@@124) |l#2@@54|))) (or (= $o@@124 |l#3@@54|) (U_2_bool (MapType0Select |l#4@@8| ($Box $o@@124)))))))) :qid |MutableB.1106:10| :skolemid |13186| :pattern ( (MapType6Select (|lambda#55| |l#0@@55| |l#1@@57| |l#2@@54| |l#3@@54| |l#4@@8|) $o@@124 $f@@74)) )))
(assert (forall ((arg0@@432 T@U) (arg1@@289 T@U) (arg2@@194 T@U) (arg3@@148 T@U) (arg4@@71 T@U) ) (! (= (type (|lambda#56| arg0@@432 arg1@@289 arg2@@194 arg3@@148 arg4@@71)) (MapType6Type refType boolType)) :qid |funType:lambda#56| :pattern ( (|lambda#56| arg0@@432 arg1@@289 arg2@@194 arg3@@148 arg4@@71)) )))
(assert (forall (($o@@125 T@U) ($f@@75 T@U) (|l#0@@56| T@U) (|l#1@@58| T@U) (|l#2@@55| T@U) (|l#3@@55| T@U) (|l#4@@9| T@U) ) (! (let ((alpha@@82 (FieldTypeInv0 (type $f@@75)))) (=> (and (and (and (and (and (and (= (type $o@@125) refType) (= (type $f@@75) (FieldType alpha@@82))) (= (type |l#0@@56|) refType)) (= (type |l#1@@58|) (MapType0Type refType MapType1Type))) (= (type |l#2@@55|) (FieldType boolType))) (= (type |l#3@@55|) refType)) (= (type |l#4@@9|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType6Select (|lambda#56| |l#0@@56| |l#1@@58| |l#2@@55| |l#3@@55| |l#4@@9|) $o@@125 $f@@75))  (=> (and (not (= $o@@125 |l#0@@56|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@58| $o@@125) |l#2@@55|))) (or (= $o@@125 |l#3@@55|) (U_2_bool (MapType0Select |l#4@@9| ($Box $o@@125)))))))) :qid |MutableB.1147:10| :skolemid |13187| :pattern ( (MapType6Select (|lambda#56| |l#0@@56| |l#1@@58| |l#2@@55| |l#3@@55| |l#4@@9|) $o@@125 $f@@75)) )))
(assert (forall ((arg0@@433 T@U) (arg1@@290 T@U) (arg2@@195 T@U) (arg3@@149 T@U) (arg4@@72 T@U) ) (! (= (type (|lambda#57| arg0@@433 arg1@@290 arg2@@195 arg3@@149 arg4@@72)) (MapType6Type refType boolType)) :qid |funType:lambda#57| :pattern ( (|lambda#57| arg0@@433 arg1@@290 arg2@@195 arg3@@149 arg4@@72)) )))
(assert (forall (($o@@126 T@U) ($f@@76 T@U) (|l#0@@57| T@U) (|l#1@@59| T@U) (|l#2@@56| T@U) (|l#3@@56| T@U) (|l#4@@10| T@U) ) (! (let ((alpha@@83 (FieldTypeInv0 (type $f@@76)))) (=> (and (and (and (and (and (and (= (type $o@@126) refType) (= (type $f@@76) (FieldType alpha@@83))) (= (type |l#0@@57|) refType)) (= (type |l#1@@59|) (MapType0Type refType MapType1Type))) (= (type |l#2@@56|) (FieldType boolType))) (= (type |l#3@@56|) refType)) (= (type |l#4@@10|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType6Select (|lambda#57| |l#0@@57| |l#1@@59| |l#2@@56| |l#3@@56| |l#4@@10|) $o@@126 $f@@76))  (=> (and (not (= $o@@126 |l#0@@57|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@59| $o@@126) |l#2@@56|))) (or (= $o@@126 |l#3@@56|) (U_2_bool (MapType0Select |l#4@@10| ($Box $o@@126)))))))) :qid |MutableB.1147:10| :skolemid |13188| :pattern ( (MapType6Select (|lambda#57| |l#0@@57| |l#1@@59| |l#2@@56| |l#3@@56| |l#4@@10|) $o@@126 $f@@76)) )))
(assert (forall ((arg0@@434 T@U) (arg1@@291 T@U) (arg2@@196 T@U) (arg3@@150 T@U) (arg4@@73 T@U) ) (! (= (type (|lambda#58| arg0@@434 arg1@@291 arg2@@196 arg3@@150 arg4@@73)) (MapType6Type refType boolType)) :qid |funType:lambda#58| :pattern ( (|lambda#58| arg0@@434 arg1@@291 arg2@@196 arg3@@150 arg4@@73)) )))
(assert (forall (($o@@127 T@U) ($f@@77 T@U) (|l#0@@58| T@U) (|l#1@@60| T@U) (|l#2@@57| T@U) (|l#3@@57| T@U) (|l#4@@11| T@U) ) (! (let ((alpha@@84 (FieldTypeInv0 (type $f@@77)))) (=> (and (and (and (and (and (and (= (type $o@@127) refType) (= (type $f@@77) (FieldType alpha@@84))) (= (type |l#0@@58|) refType)) (= (type |l#1@@60|) (MapType0Type refType MapType1Type))) (= (type |l#2@@57|) (FieldType boolType))) (= (type |l#3@@57|) refType)) (= (type |l#4@@11|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType6Select (|lambda#58| |l#0@@58| |l#1@@60| |l#2@@57| |l#3@@57| |l#4@@11|) $o@@127 $f@@77))  (=> (and (not (= $o@@127 |l#0@@58|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@60| $o@@127) |l#2@@57|))) (or (= $o@@127 |l#3@@57|) (U_2_bool (MapType0Select |l#4@@11| ($Box $o@@127)))))))) :qid |MutableB.1165:10| :skolemid |13189| :pattern ( (MapType6Select (|lambda#58| |l#0@@58| |l#1@@60| |l#2@@57| |l#3@@57| |l#4@@11|) $o@@127 $f@@77)) )))
(assert (forall ((arg0@@435 T@U) (arg1@@292 T@U) (arg2@@197 T@U) (arg3@@151 T@U) (arg4@@74 T@U) ) (! (= (type (|lambda#59| arg0@@435 arg1@@292 arg2@@197 arg3@@151 arg4@@74)) (MapType6Type refType boolType)) :qid |funType:lambda#59| :pattern ( (|lambda#59| arg0@@435 arg1@@292 arg2@@197 arg3@@151 arg4@@74)) )))
(assert (forall (($o@@128 T@U) ($f@@78 T@U) (|l#0@@59| T@U) (|l#1@@61| T@U) (|l#2@@58| T@U) (|l#3@@58| T@U) (|l#4@@12| T@U) ) (! (let ((alpha@@85 (FieldTypeInv0 (type $f@@78)))) (=> (and (and (and (and (and (and (= (type $o@@128) refType) (= (type $f@@78) (FieldType alpha@@85))) (= (type |l#0@@59|) refType)) (= (type |l#1@@61|) (MapType0Type refType MapType1Type))) (= (type |l#2@@58|) (FieldType boolType))) (= (type |l#3@@58|) refType)) (= (type |l#4@@12|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType6Select (|lambda#59| |l#0@@59| |l#1@@61| |l#2@@58| |l#3@@58| |l#4@@12|) $o@@128 $f@@78))  (=> (and (not (= $o@@128 |l#0@@59|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@61| $o@@128) |l#2@@58|))) (or (= $o@@128 |l#3@@58|) (U_2_bool (MapType0Select |l#4@@12| ($Box $o@@128)))))))) :qid |MutableB.1165:10| :skolemid |13190| :pattern ( (MapType6Select (|lambda#59| |l#0@@59| |l#1@@61| |l#2@@58| |l#3@@58| |l#4@@12|) $o@@128 $f@@78)) )))
(assert (forall ((arg0@@436 T@U) (arg1@@293 T@U) (arg2@@198 T@U) (arg3@@152 Bool) ) (! (= (type (|lambda#60| arg0@@436 arg1@@293 arg2@@198 arg3@@152)) (MapType6Type refType boolType)) :qid |funType:lambda#60| :pattern ( (|lambda#60| arg0@@436 arg1@@293 arg2@@198 arg3@@152)) )))
(assert (forall (($o@@129 T@U) ($f@@79 T@U) (|l#0@@60| T@U) (|l#1@@62| T@U) (|l#2@@59| T@U) (|l#3@@59| Bool) ) (! (let ((alpha@@86 (FieldTypeInv0 (type $f@@79)))) (=> (and (and (and (and (= (type $o@@129) refType) (= (type $f@@79) (FieldType alpha@@86))) (= (type |l#0@@60|) refType)) (= (type |l#1@@62|) (MapType0Type refType MapType1Type))) (= (type |l#2@@59|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#60| |l#0@@60| |l#1@@62| |l#2@@59| |l#3@@59|) $o@@129 $f@@79))  (=> (and (not (= $o@@129 |l#0@@60|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@62| $o@@129) |l#2@@59|))) |l#3@@59|)))) :qid |MutableB.1185:10| :skolemid |13191| :pattern ( (MapType6Select (|lambda#60| |l#0@@60| |l#1@@62| |l#2@@59| |l#3@@59|) $o@@129 $f@@79)) )))
(assert (forall ((arg0@@437 T@U) (arg1@@294 T@U) (arg2@@199 T@U) (arg3@@153 Bool) ) (! (= (type (|lambda#61| arg0@@437 arg1@@294 arg2@@199 arg3@@153)) (MapType6Type refType boolType)) :qid |funType:lambda#61| :pattern ( (|lambda#61| arg0@@437 arg1@@294 arg2@@199 arg3@@153)) )))
(assert (forall (($o@@130 T@U) ($f@@80 T@U) (|l#0@@61| T@U) (|l#1@@63| T@U) (|l#2@@60| T@U) (|l#3@@60| Bool) ) (! (let ((alpha@@87 (FieldTypeInv0 (type $f@@80)))) (=> (and (and (and (and (= (type $o@@130) refType) (= (type $f@@80) (FieldType alpha@@87))) (= (type |l#0@@61|) refType)) (= (type |l#1@@63|) (MapType0Type refType MapType1Type))) (= (type |l#2@@60|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#61| |l#0@@61| |l#1@@63| |l#2@@60| |l#3@@60|) $o@@130 $f@@80))  (=> (and (not (= $o@@130 |l#0@@61|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@63| $o@@130) |l#2@@60|))) |l#3@@60|)))) :qid |MutableB.1209:9| :skolemid |13192| :pattern ( (MapType6Select (|lambda#61| |l#0@@61| |l#1@@63| |l#2@@60| |l#3@@60|) $o@@130 $f@@80)) )))
(assert (forall ((arg0@@438 T@U) (arg1@@295 T@U) (arg2@@200 T@U) (arg3@@154 T@U) ) (! (= (type (|lambda#62| arg0@@438 arg1@@295 arg2@@200 arg3@@154)) (MapType6Type refType boolType)) :qid |funType:lambda#62| :pattern ( (|lambda#62| arg0@@438 arg1@@295 arg2@@200 arg3@@154)) )))
(assert (forall (($o@@131 T@U) ($f@@81 T@U) (|l#0@@62| T@U) (|l#1@@64| T@U) (|l#2@@61| T@U) (|l#3@@61| T@U) ) (! (let ((alpha@@88 (FieldTypeInv0 (type $f@@81)))) (=> (and (and (and (and (and (= (type $o@@131) refType) (= (type $f@@81) (FieldType alpha@@88))) (= (type |l#0@@62|) refType)) (= (type |l#1@@64|) (MapType0Type refType MapType1Type))) (= (type |l#2@@61|) (FieldType boolType))) (= (type |l#3@@61|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType6Select (|lambda#62| |l#0@@62| |l#1@@64| |l#2@@61| |l#3@@61|) $o@@131 $f@@81))  (=> (and (not (= $o@@131 |l#0@@62|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@64| $o@@131) |l#2@@61|))) (U_2_bool (MapType0Select |l#3@@61| ($Box $o@@131))))))) :qid |MutableB.1222:10| :skolemid |13193| :pattern ( (MapType6Select (|lambda#62| |l#0@@62| |l#1@@64| |l#2@@61| |l#3@@61|) $o@@131 $f@@81)) )))
(assert (forall ((arg0@@439 T@U) (arg1@@296 T@U) (arg2@@201 T@U) (arg3@@155 T@U) ) (! (= (type (|lambda#63| arg0@@439 arg1@@296 arg2@@201 arg3@@155)) (MapType6Type refType boolType)) :qid |funType:lambda#63| :pattern ( (|lambda#63| arg0@@439 arg1@@296 arg2@@201 arg3@@155)) )))
(assert (forall (($o@@132 T@U) ($f@@82 T@U) (|l#0@@63| T@U) (|l#1@@65| T@U) (|l#2@@62| T@U) (|l#3@@62| T@U) ) (! (let ((alpha@@89 (FieldTypeInv0 (type $f@@82)))) (=> (and (and (and (and (and (= (type $o@@132) refType) (= (type $f@@82) (FieldType alpha@@89))) (= (type |l#0@@63|) refType)) (= (type |l#1@@65|) (MapType0Type refType MapType1Type))) (= (type |l#2@@62|) (FieldType boolType))) (= (type |l#3@@62|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType6Select (|lambda#63| |l#0@@63| |l#1@@65| |l#2@@62| |l#3@@62|) $o@@132 $f@@82))  (=> (and (not (= $o@@132 |l#0@@63|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@65| $o@@132) |l#2@@62|))) (U_2_bool (MapType0Select |l#3@@62| ($Box $o@@132))))))) :qid |MutableB.1222:10| :skolemid |13194| :pattern ( (MapType6Select (|lambda#63| |l#0@@63| |l#1@@65| |l#2@@62| |l#3@@62|) $o@@132 $f@@82)) )))
(assert (forall ((|$y#2| T@U) (|l#0@@64| T@U) (|l#1@@66| T@U) (|l#2@@63| Int) ) (!  (=> (and (and (= (type |$y#2|) BoxType) (= (type |l#0@@64|) TyType)) (= (type |l#1@@66|) (MapType0Type BoxType intType))) (= (U_2_bool (MapType0Select (|lambda#64| |l#0@@64| |l#1@@66| |l#2@@63|) |$y#2|))  (and ($IsBox |$y#2| |l#0@@64|) (> (U_2_int (MapType0Select |l#1@@66| |$y#2|)) |l#2@@63|)))) :qid |sequence.28:5| :skolemid |13195| :pattern ( (MapType0Select (|lambda#64| |l#0@@64| |l#1@@66| |l#2@@63|) |$y#2|)) )))
(assert (forall ((|$w#5| T@U) (|l#0@@65| T@U) (|l#1@@67| T@U) (|l#2@@64| T@U) ) (!  (=> (and (and (and (= (type |$w#5|) BoxType) (= (type |l#0@@65|) TyType)) (= (type |l#1@@67|) (MapType0Type BoxType boolType))) (= (type |l#2@@64|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#68| |l#0@@65| |l#1@@67| |l#2@@64|) |$w#5|))  (and ($IsBox |$w#5| |l#0@@65|) (and (U_2_bool (MapType0Select |l#1@@67| |$w#5|)) (not (U_2_bool (MapType0Select |l#2@@64| |$w#5|))))))) :qid |Mapssdfy.43:14| :skolemid |13196| :pattern ( (MapType0Select (|lambda#68| |l#0@@65| |l#1@@67| |l#2@@64|) |$w#5|)) )))
(assert (forall ((|$w#5@@0| T@U) (|l#0@@66| T@U) ) (!  (=> (and (= (type |$w#5@@0|) BoxType) (= (type |l#0@@66|) (MapType0Type BoxType BoxType))) (= (MapType0Select (|lambda#69| |l#0@@66|) |$w#5@@0|) (MapType0Select |l#0@@66| |$w#5@@0|))) :qid |Mapssdfy.43:14| :skolemid |13197| :pattern ( (MapType0Select (|lambda#69| |l#0@@66|) |$w#5@@0|)) )))
(assert (forall ((|$w#7| T@U) (|l#0@@67| T@U) (|l#1@@68| T@U) (|l#2@@65| T@U) ) (!  (=> (and (and (and (= (type |$w#7|) BoxType) (= (type |l#0@@67|) TyType)) (= (type |l#1@@68|) (MapType0Type BoxType boolType))) (= (type |l#2@@65|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#72| |l#0@@67| |l#1@@68| |l#2@@65|) |$w#7|))  (and ($IsBox |$w#7| |l#0@@67|) (and (U_2_bool (MapType0Select |l#1@@68| |$w#7|)) (not (= |$w#7| |l#2@@65|)))))) :qid |Mapssdfy.66:15| :skolemid |13198| :pattern ( (MapType0Select (|lambda#72| |l#0@@67| |l#1@@68| |l#2@@65|) |$w#7|)) )))
(assert (forall ((|$w#2| T@U) (|l#0@@68| T@U) (|l#1@@69| T@U) (|l#2@@66| T@U) ) (!  (=> (and (and (and (= (type |$w#2|) BoxType) (= (type |l#0@@68|) TyType)) (= (type |l#1@@69|) (MapType0Type BoxType boolType))) (= (type |l#2@@66|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#86| |l#0@@68| |l#1@@69| |l#2@@66|) |$w#2|))  (and ($IsBox |$w#2| |l#0@@68|) (and (U_2_bool (MapType0Select |l#1@@69| |$w#2|)) (U_2_bool (MapType0Select |l#2@@66| |$w#2|)))))) :qid |Mapssdfy.99:5| :skolemid |13199| :pattern ( (MapType0Select (|lambda#86| |l#0@@68| |l#1@@69| |l#2@@66|) |$w#2|)) )))
(assert (forall ((|$w#2@@0| T@U) (|l#0@@69| T@U) (|l#1@@70| T@U) (|l#2@@67| T@U) ) (!  (=> (and (and (and (= (type |$w#2@@0|) BoxType) (= (type |l#0@@69|) TyType)) (= (type |l#1@@70|) (MapType0Type BoxType boolType))) (= (type |l#2@@67|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#100| |l#0@@69| |l#1@@70| |l#2@@67|) |$w#2@@0|))  (and ($IsBox |$w#2@@0| |l#0@@69|) (or (U_2_bool (MapType0Select |l#1@@70| |$w#2@@0|)) (U_2_bool (MapType0Select |l#2@@67| |$w#2@@0|)))))) :qid |Mapssdfy.117:3| :skolemid |13200| :pattern ( (MapType0Select (|lambda#100| |l#0@@69| |l#1@@70| |l#2@@67|) |$w#2@@0|)) )))
(assert (forall ((|$w#2@@1| T@U) (|l#0@@70| T@U) (|l#1@@71| T@U) (|l#2@@68| T@U) ) (!  (=> (and (and (and (= (type |$w#2@@1|) BoxType) (= (type |l#0@@70|) (MapType0Type BoxType boolType))) (= (type |l#1@@71|) (MapType0Type BoxType BoxType))) (= (type |l#2@@68|) (MapType0Type BoxType BoxType))) (= (MapType0Select (|lambda#101| |l#0@@70| |l#1@@71| |l#2@@68|) |$w#2@@1|) (ite (U_2_bool (MapType0Select |l#0@@70| |$w#2@@1|)) (MapType0Select |l#1@@71| |$w#2@@1|) (MapType0Select |l#2@@68| |$w#2@@1|)))) :qid |Mapssdfy.117:3| :skolemid |13201| :pattern ( (MapType0Select (|lambda#101| |l#0@@70| |l#1@@71| |l#2@@68|) |$w#2@@1|)) )))
(assert (forall ((|$w#2@@2| T@U) (|l#0@@71| T@U) (|l#1@@72| T@U) (|l#2@@69| T@U) (|l#3@@63| T@U) ) (!  (=> (and (and (and (and (= (type |$w#2@@2|) BoxType) (= (type |l#0@@71|) TyType)) (= (type |l#1@@72|) (MapType0Type BoxType boolType))) (= (type |l#2@@69|) (MapType0Type BoxType boolType))) (= (type |l#3@@63|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#120| |l#0@@71| |l#1@@72| |l#2@@69| |l#3@@63|) |$w#2@@2|))  (and ($IsBox |$w#2@@2| |l#0@@71|) (or (or (U_2_bool (MapType0Select |l#1@@72| |$w#2@@2|)) (U_2_bool (MapType0Select |l#2@@69| |$w#2@@2|))) (U_2_bool (MapType0Select |l#3@@63| |$w#2@@2|)))))) :qid |Mapssdfy.191:3| :skolemid |13202| :pattern ( (MapType0Select (|lambda#120| |l#0@@71| |l#1@@72| |l#2@@69| |l#3@@63|) |$w#2@@2|)) )))
(assert (forall ((|$w#2@@3| T@U) (|l#0@@72| T@U) (|l#1@@73| T@U) (|l#2@@70| T@U) (|l#3@@64| T@U) (|l#4@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type |$w#2@@3|) BoxType) (= (type |l#0@@72|) (MapType0Type BoxType boolType))) (= (type |l#1@@73|) (MapType0Type BoxType BoxType))) (= (type |l#2@@70|) (MapType0Type BoxType boolType))) (= (type |l#3@@64|) (MapType0Type BoxType BoxType))) (= (type |l#4@@13|) (MapType0Type BoxType BoxType))) (= (MapType0Select (|lambda#121| |l#0@@72| |l#1@@73| |l#2@@70| |l#3@@64| |l#4@@13|) |$w#2@@3|) (ite (U_2_bool (MapType0Select |l#0@@72| |$w#2@@3|)) (MapType0Select |l#1@@73| |$w#2@@3|) (ite (U_2_bool (MapType0Select |l#2@@70| |$w#2@@3|)) (MapType0Select |l#3@@64| |$w#2@@3|) (MapType0Select |l#4@@13| |$w#2@@3|))))) :qid |Mapssdfy.191:3| :skolemid |13203| :pattern ( (MapType0Select (|lambda#121| |l#0@@72| |l#1@@73| |l#2@@70| |l#3@@64| |l#4@@13|) |$w#2@@3|)) )))
(assert (forall ((|$w#2@@4| T@U) (|l#0@@73| T@U) (|l#1@@74| T@U) ) (!  (=> (and (and (= (type |$w#2@@4|) BoxType) (= (type |l#0@@73|) TyType)) (= (type |l#1@@74|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#124| |l#0@@73| |l#1@@74|) |$w#2@@4|))  (and ($IsBox |$w#2@@4| |l#0@@73|) (U_2_bool (MapType0Select |l#1@@74| |$w#2@@4|))))) :qid |Mapssdfy.198:4| :skolemid |13204| :pattern ( (MapType0Select (|lambda#124| |l#0@@73| |l#1@@74|) |$w#2@@4|)) )))
(assert (forall ((|$y#12| T@U) (|l#0@@74| T@U) (|l#1@@75| Int) ) (!  (=> (and (= (type |$y#12|) BoxType) (= (type |l#0@@74|) TyType)) (= (U_2_bool (MapType0Select (|lambda#128| |l#0@@74| |l#1@@75|) |$y#12|))  (and ($IsBox |$y#12| |l#0@@74|) (Byte__Order.__default.lt (U_2_int ($Unbox intType |$y#12|)) |l#1@@75|)))) :qid |totalord.716:52| :skolemid |13205| :pattern ( (MapType0Select (|lambda#128| |l#0@@74| |l#1@@75|) |$y#12|)) )))
(assert (forall ((|$y#13| T@U) (|l#0@@75| T@U) (|l#1@@76| T@U) (|l#2@@71| Int) ) (!  (=> (and (and (= (type |$y#13|) BoxType) (= (type |l#0@@75|) TyType)) (= (type |l#1@@76|) LayerTypeType)) (= (U_2_bool (MapType0Select (|lambda#129| |l#0@@75| |l#1@@76| |l#2@@71|) |$y#13|))  (and ($IsBox |$y#13| |l#0@@75|) (Byte__Order.__default.lte |l#1@@76| |l#2@@71| (U_2_int ($Unbox intType |$y#13|)))))) :qid |totalord.717:54| :skolemid |13206| :pattern ( (MapType0Select (|lambda#129| |l#0@@75| |l#1@@76| |l#2@@71|) |$y#13|)) )))
(assert (forall ((|$y#4| T@U) (|l#0@@76| T@U) (|l#1@@77| T@U) ) (!  (=> (and (and (= (type |$y#4|) BoxType) (= (type |l#0@@76|) TyType)) (= (type |l#1@@77|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#140| |l#0@@76| |l#1@@77|) |$y#4|))  (and ($IsBox |$y#4| |l#0@@76|) (|Seq#Contains| |l#1@@77| |$y#4|)))) :qid |totalord.739:18| :skolemid |13207| :pattern ( (MapType0Select (|lambda#140| |l#0@@76| |l#1@@77|) |$y#4|)) )))
(assert (forall ((|$y#12@@0| T@U) (|l#0@@77| T@U) (|l#1@@78| T@U) ) (!  (=> (and (and (= (type |$y#12@@0|) BoxType) (= (type |l#0@@77|) TyType)) (= (type |l#1@@78|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#144| |l#0@@77| |l#1@@78|) |$y#12@@0|))  (and ($IsBox |$y#12@@0| |l#0@@77|) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) |$y#12@@0|) |l#1@@78|)))) :qid |totalord.716:52| :skolemid |13208| :pattern ( (MapType0Select (|lambda#144| |l#0@@77| |l#1@@78|) |$y#12@@0|)) )))
(assert (forall ((|$y#13@@0| T@U) (|l#0@@78| T@U) (|l#1@@79| T@U) ) (!  (=> (and (and (= (type |$y#13@@0|) BoxType) (= (type |l#0@@78|) TyType)) (= (type |l#1@@79|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#145| |l#0@@78| |l#1@@79|) |$y#13@@0|))  (and ($IsBox |$y#13@@0| |l#0@@78|) (Lexicographic__Byte__Order.__default.lte |l#1@@79| ($Unbox (SeqType BoxType) |$y#13@@0|))))) :qid |totalord.717:54| :skolemid |13209| :pattern ( (MapType0Select (|lambda#145| |l#0@@78| |l#1@@79|) |$y#13@@0|)) )))
(assert (forall ((|$y#12@@1| T@U) (|l#0@@79| T@U) (|l#1@@80| Int) ) (!  (=> (and (= (type |$y#12@@1|) BoxType) (= (type |l#0@@79|) TyType)) (= (U_2_bool (MapType0Select (|lambda#160| |l#0@@79| |l#1@@80|) |$y#12@@1|))  (and ($IsBox |$y#12@@1| |l#0@@79|) (Integer__Order.__default.lt (U_2_int ($Unbox intType |$y#12@@1|)) |l#1@@80|)))) :qid |totalord.716:52| :skolemid |13210| :pattern ( (MapType0Select (|lambda#160| |l#0@@79| |l#1@@80|) |$y#12@@1|)) )))
(assert (forall ((|$y#13@@1| T@U) (|l#0@@80| T@U) (|l#1@@81| Int) ) (!  (=> (and (= (type |$y#13@@1|) BoxType) (= (type |l#0@@80|) TyType)) (= (U_2_bool (MapType0Select (|lambda#161| |l#0@@80| |l#1@@81|) |$y#13@@1|))  (and ($IsBox |$y#13@@1| |l#0@@80|) (Integer__Order.__default.lte |l#1@@81| (U_2_int ($Unbox intType |$y#13@@1|)))))) :qid |totalord.717:54| :skolemid |13211| :pattern ( (MapType0Select (|lambda#161| |l#0@@80| |l#1@@81|) |$y#13@@1|)) )))
(assert (forall ((|$y#20| T@U) (|l#0@@81| T@U) (|l#1@@82| Int) (|l#2@@72| Int) (|l#3@@65| T@U) (|l#4@@14| T@U) (|l#5@@7| T@U) (|l#6@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type |$y#20|) BoxType) (= (type |l#0@@81|) TyType)) (= (type |l#3@@65|) LayerTypeType)) (= (type |l#4@@14|) (SeqType BoxType))) (= (type |l#5@@7|) LayerTypeType)) (= (type |l#6@@3|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#182| |l#0@@81| |l#1@@82| |l#2@@72| |l#3@@65| |l#4@@14| |l#5@@7| |l#6@@3|) |$y#20|)) (exists ((|i#7@@9| Int) (|k#17| T@U) ) (!  (and (= (type |k#17|) (SeqType BoxType)) (and (and ($Is |k#17| |l#0@@81|) (and (and (<= |l#1@@82| |i#7@@9|) (< |i#7@@9| |l#2@@72|)) (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys |l#3@@65| ($Unbox DatatypeTypeType (|Seq#Index| |l#4@@14| |i#7@@9|))) ($Box |k#17|))))) (= |$y#20| ($Box |k#17|)))) :qid |BtreeMod.37:14| :skolemid |12731| :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys |l#5@@7| ($Unbox DatatypeTypeType (|Seq#Index| |l#6@@3| |i#7@@9|))) ($Box |k#17|))) )))) :qid |BtreeMod.37:10| :skolemid |13212| :pattern ( (MapType0Select (|lambda#182| |l#0@@81| |l#1@@82| |l#2@@72| |l#3@@65| |l#4@@14| |l#5@@7| |l#6@@3|) |$y#20|)) )))
(assert (forall ((|$w#6| T@U) (|l#0@@82| T@U) (|l#1@@83| T@U) ) (!  (=> (and (and (= (type |$w#6|) BoxType) (= (type |l#0@@82|) TyType)) (= (type |l#1@@83|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#186| |l#0@@82| |l#1@@83|) |$w#6|))  (and ($Is ($Unbox (SeqType BoxType) |$w#6|) |l#0@@82|) (|Seq#Contains| |l#1@@83| |$w#6|)))) :qid |BtreeMod.92:7| :skolemid |13213| :pattern ( (MapType0Select (|lambda#186| |l#0@@82| |l#1@@83|) |$w#6|)) )))
(assert (forall ((|$w#6@@0| T@U) (|l#0@@83| T@U) (|l#1@@84| T@U) (|l#2@@73| T@U) ) (!  (=> (and (and (and (= (type |$w#6@@0|) BoxType) (= (type |l#0@@83|) (SeqType BoxType))) (= (type |l#1@@84|) LayerTypeType)) (= (type |l#2@@73|) (SeqType BoxType))) (= (MapType0Select (|lambda#187| |l#0@@83| |l#1@@84| |l#2@@73|) |$w#6@@0|) (|Seq#Index| |l#0@@83| (Lexicographic__Byte__Order.__default.LargestLte |l#1@@84| |l#2@@73| ($Unbox (SeqType BoxType) |$w#6@@0|))))) :qid |BtreeMod.92:7| :skolemid |13214| :pattern ( (MapType0Select (|lambda#187| |l#0@@83| |l#1@@84| |l#2@@73|) |$w#6@@0|)) )))
(assert (forall ((|$w#7@@0| T@U) (|l#0@@84| T@U) (|l#1@@85| T@U) (|l#2@@74| T@U) (|l#3@@66| T@U) (|l#4@@15| T@U) (|l#5@@8| T@U) (|l#6@@4| Int) ) (!  (=> (and (and (and (and (and (and (= (type |$w#7@@0|) BoxType) (= (type |l#0@@84|) TyType)) (= (type |l#1@@85|) (MapType0Type BoxType boolType))) (= (type |l#2@@74|) LayerTypeType)) (= (type |l#3@@66|) (SeqType BoxType))) (= (type |l#4@@15|) LayerTypeType)) (= (type |l#5@@8|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#188| |l#0@@84| |l#1@@85| |l#2@@74| |l#3@@66| |l#4@@15| |l#5@@8| |l#6@@4|) |$w#7@@0|))  (and ($Is ($Unbox (SeqType BoxType) |$w#7@@0|) |l#0@@84|) (and (U_2_bool (MapType0Select |l#1@@85| |$w#7@@0|)) (U_2_bool (MapType0Select (|Map#Domain| (KMBtreeModel.__default.Interpretation |l#2@@74| ($Unbox DatatypeTypeType (|Seq#Index| |l#3@@66| (+ (Lexicographic__Byte__Order.__default.LargestLte |l#4@@15| |l#5@@8| ($Unbox (SeqType BoxType) |$w#7@@0|)) |l#6@@4|))))) |$w#7@@0|)))))) :qid |BtreeMod.94:7| :skolemid |13215| :pattern ( (MapType0Select (|lambda#188| |l#0@@84| |l#1@@85| |l#2@@74| |l#3@@66| |l#4@@15| |l#5@@8| |l#6@@4|) |$w#7@@0|)) )))
(assert (forall ((|$w#7@@1| T@U) (|l#0@@85| T@U) (|l#1@@86| T@U) (|l#2@@75| T@U) (|l#3@@67| T@U) (|l#4@@16| Int) ) (!  (=> (and (and (and (and (= (type |$w#7@@1|) BoxType) (= (type |l#0@@85|) LayerTypeType)) (= (type |l#1@@86|) (SeqType BoxType))) (= (type |l#2@@75|) LayerTypeType)) (= (type |l#3@@67|) (SeqType BoxType))) (= (MapType0Select (|lambda#189| |l#0@@85| |l#1@@86| |l#2@@75| |l#3@@67| |l#4@@16|) |$w#7@@1|) (MapType0Select (|Map#Elements| (KMBtreeModel.__default.Interpretation |l#0@@85| ($Unbox DatatypeTypeType (|Seq#Index| |l#1@@86| (+ (Lexicographic__Byte__Order.__default.LargestLte |l#2@@75| |l#3@@67| ($Unbox (SeqType BoxType) |$w#7@@1|)) |l#4@@16|))))) |$w#7@@1|))) :qid |BtreeMod.94:7| :skolemid |13216| :pattern ( (MapType0Select (|lambda#189| |l#0@@85| |l#1@@86| |l#2@@75| |l#3@@67| |l#4@@16|) |$w#7@@1|)) )))
(declare-fun StartFuel_Sequences._default.NoDupes () T@U)
(declare-fun StartFuelAssert_Sequences._default.NoDupes () T@U)
(declare-fun StartFuel_Sequences._default.Range () T@U)
(declare-fun StartFuelAssert_Sequences._default.Range () T@U)
(declare-fun StartFuel_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuelAssert_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuel_Sequences._default.remove () T@U)
(declare-fun StartFuelAssert_Sequences._default.remove () T@U)
(declare-fun StartFuelAssert_Sequences._default.insert () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuel_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuel_Sequences._default.concat () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat () T@U)
(declare-fun StartFuel_Sequences._default.concat3 () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat3 () T@U)
(declare-fun StartFuel_Sequences._default.concatSeq () T@U)
(declare-fun StartFuelAssert_Sequences._default.concatSeq () T@U)
(declare-fun StartFuel_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuel_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexIterate () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuel_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuel_Sequences._default.Zip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Zip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Unzip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Flatten () T@U)
(declare-fun StartFuel_Sequences._default.fill () T@U)
(declare-fun StartFuelAssert_Sequences._default.fill () T@U)
(declare-fun StartFuel_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuel_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuel_Maps._default.IMapRemove () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove () T@U)
(declare-fun StartFuel_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuel_Maps._default.MapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuel_Maps._default.IMapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnion () T@U)
(declare-fun StartFuel_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuelAssert_SeqComparison._default.lte () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.lte () T@U)
(declare-fun StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuel_Byte_Order._default.NotMinimum () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.NotMinimum () T@U)
(declare-fun StartFuel_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.minimum () T@U)
(declare-fun StartFuel_Byte_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.maximum () T@U)
(declare-fun StartFuel_Byte_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.NotMinimum () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.minimum () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.maximum () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun StartFuel_Integer_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuelAssert_Integer_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuel_Integer_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuelAssert_Integer_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuel_Integer_Order._default.NotMinimum () T@U)
(declare-fun StartFuelAssert_Integer_Order._default.NotMinimum () T@U)
(declare-fun StartFuel_Integer_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Integer_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Integer_Order._default.minimum () T@U)
(declare-fun StartFuel_Integer_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Integer_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Integer_Order._default.maximum () T@U)
(declare-fun StartFuel_Integer_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Integer_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Integer_Order._default.IsStrictlySorted () T@U)
(declare-fun StartFuelAssert_KMBtreeModel._default.AllKeys () T@U)
(declare-fun StartFuelAssert_KMBtreeModel._default.Interpretation () T@U)
(declare-fun StartFuelAssert_KMBtreeModel._default.ToSeq () T@U)
(declare-fun StartFuelAssert_KMBtree._default.SeqRepr () T@U)
(declare-fun StartFuelAssert_KMBtree._default.I () T@U)
(declare-fun $_Frame@0 () T@U)
(declare-fun $Heap@@125 () T@U)
(declare-fun |node#0@@97| () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun |##node#7@0| () T@U)
(declare-fun |##node#9@0| () T@U)
(declare-fun |call5formal@subnode#0| () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun |call5formal@subnode#0@0| () T@U)
(declare-fun |pivot#0@0| () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun $Heap@5 () T@U)
(declare-fun |inode#0@0| () T@U)
(declare-fun |iright#0@0| () T@U)
(declare-fun |run##0@0| () T@U)
(declare-fun $Heap@6 () T@U)
(declare-fun $Heap@7 () T@U)
(declare-fun MoreFuel_KMBtree._default.I0 () T@U)
(declare-fun |right#0@@11| () T@U)
(declare-fun |pivot#0@@27| () T@U)
(declare-fun |$rhs##0| () T@U)
(declare-fun |inode#0| () T@U)
(declare-fun |iright#0| () T@U)
(declare-fun %lbl%+0 () Bool)
(declare-fun |from1##0@0| () Int)
(declare-fun |to2##0@0| () Int)
(declare-fun %lbl%@1 () Bool)
(declare-fun %lbl%@2 () Bool)
(declare-fun %lbl%@3 () Bool)
(declare-fun %lbl%@4 () Bool)
(declare-fun %lbl%@5 () Bool)
(declare-fun %lbl%@6 () Bool)
(declare-fun %lbl%@7 () Bool)
(declare-fun %lbl%@8 () Bool)
(declare-fun %lbl%@9 () Bool)
(declare-fun %lbl%@10 () Bool)
(declare-fun %lbl%@11 () Bool)
(declare-fun %lbl%@12 () Bool)
(declare-fun %lbl%@13 () Bool)
(declare-fun %lbl%@14 () Bool)
(declare-fun %lbl%@15 () Bool)
(declare-fun %lbl%@16 () Bool)
(declare-fun %lbl%@17 () Bool)
(declare-fun %lbl%@18 () Bool)
(declare-fun %lbl%@19 () Bool)
(declare-fun %lbl%@20 () Bool)
(declare-fun %lbl%@21 () Bool)
(declare-fun %lbl%@22 () Bool)
(declare-fun %lbl%@23 () Bool)
(declare-fun |nleft#0| () Int)
(declare-fun %lbl%@24 () Bool)
(declare-fun %lbl%@25 () Bool)
(declare-fun %lbl%@26 () Bool)
(declare-fun |from##0@0| () Int)
(declare-fun %lbl%@27 () Bool)
(declare-fun %lbl%@28 () Bool)
(declare-fun %lbl%@29 () Bool)
(declare-fun %lbl%@30 () Bool)
(declare-fun %lbl%@31 () Bool)
(declare-fun %lbl%@32 () Bool)
(declare-fun %lbl%@33 () Bool)
(declare-fun %lbl%@34 () Bool)
(declare-fun %lbl%@35 () Bool)
(declare-fun %lbl%@36 () Bool)
(declare-fun %lbl%@37 () Bool)
(declare-fun %lbl%@38 () Bool)
(declare-fun %lbl%@39 () Bool)
(declare-fun %lbl%@40 () Bool)
(declare-fun %lbl%@41 () Bool)
(declare-fun %lbl%@42 () Bool)
(declare-fun %lbl%@43 () Bool)
(declare-fun %lbl%@44 () Bool)
(declare-fun %lbl%@45 () Bool)
(declare-fun %lbl%@46 () Bool)
(declare-fun %lbl%@47 () Bool)
(declare-fun %lbl%@48 () Bool)
(declare-fun %lbl%@49 () Bool)
(declare-fun %lbl%@50 () Bool)
(declare-fun %lbl%@51 () Bool)
(declare-fun |to##1@0| () Int)
(declare-fun %lbl%@52 () Bool)
(declare-fun %lbl%@53 () Bool)
(declare-fun %lbl%@54 () Bool)
(declare-fun %lbl%@55 () Bool)
(declare-fun %lbl%@56 () Bool)
(declare-fun %lbl%@57 () Bool)
(declare-fun %lbl%@58 () Bool)
(declare-fun %lbl%@59 () Bool)
(declare-fun %lbl%@60 () Bool)
(declare-fun %lbl%@61 () Bool)
(declare-fun %lbl%@62 () Bool)
(declare-fun %lbl%@63 () Bool)
(declare-fun %lbl%@64 () Bool)
(declare-fun %lbl%@65 () Bool)
(declare-fun %lbl%@66 () Bool)
(declare-fun %lbl%@67 () Bool)
(declare-fun %lbl%@68 () Bool)
(declare-fun %lbl%@69 () Bool)
(declare-fun %lbl%@70 () Bool)
(declare-fun %lbl%@71 () Bool)
(declare-fun %lbl%@72 () Bool)
(declare-fun %lbl%@73 () Bool)
(declare-fun %lbl%@74 () Bool)
(declare-fun %lbl%@75 () Bool)
(declare-fun %lbl%@76 () Bool)
(declare-fun |##i#0@0| () Int)
(declare-fun %lbl%@77 () Bool)
(declare-fun %lbl%@78 () Bool)
(declare-fun %lbl%@79 () Bool)
(declare-fun %lbl%@80 () Bool)
(declare-fun %lbl%@81 () Bool)
(declare-fun %lbl%@82 () Bool)
(declare-fun %lbl%@83 () Bool)
(declare-fun %lbl%@84 () Bool)
(declare-fun %lbl%@85 () Bool)
(declare-fun %lbl%@86 () Bool)
(declare-fun |to##2@0| () Int)
(declare-fun %lbl%@87 () Bool)
(declare-fun %lbl%@88 () Bool)
(declare-fun %lbl%@89 () Bool)
(declare-fun %lbl%@90 () Bool)
(declare-fun %lbl%@91 () Bool)
(declare-fun %lbl%@92 () Bool)
(declare-fun %lbl%@93 () Bool)
(declare-fun %lbl%@94 () Bool)
(declare-fun %lbl%@95 () Bool)
(declare-fun %lbl%@96 () Bool)
(declare-fun %lbl%@97 () Bool)
(declare-fun %lbl%@98 () Bool)
(declare-fun %lbl%@99 () Bool)
(declare-fun %lbl%@100 () Bool)
(declare-fun %lbl%@101 () Bool)
(declare-fun %lbl%@102 () Bool)
(declare-fun %lbl%@103 () Bool)
(declare-fun %lbl%@104 () Bool)
(declare-fun %lbl%@105 () Bool)
(declare-fun %lbl%@106 () Bool)
(declare-fun %lbl%@107 () Bool)
(declare-fun %lbl%@108 () Bool)
(declare-fun %lbl%@109 () Bool)
(declare-fun %lbl%@110 () Bool)
(declare-fun %lbl%@111 () Bool)
(declare-fun %lbl%@112 () Bool)
(declare-fun %lbl%@113 () Bool)
(declare-fun %lbl%@114 () Bool)
(declare-fun %lbl%@115 () Bool)
(declare-fun %lbl%@116 () Bool)
(declare-fun %lbl%@117 () Bool)
(declare-fun %lbl%@118 () Bool)
(declare-fun %lbl%@119 () Bool)
(declare-fun |newtype$check#4@0| () Int)
(declare-fun |newtype$check#5@0| () Int)
(declare-fun |childidx##0@0| () Int)
(declare-fun %lbl%@120 () Bool)
(declare-fun %lbl%@121 () Bool)
(declare-fun %lbl%@122 () Bool)
(declare-fun %lbl%@123 () Bool)
(declare-fun %lbl%@124 () Bool)
(declare-fun %lbl%@125 () Bool)
(declare-fun %lbl%@126 () Bool)
(declare-fun %lbl%@127 () Bool)
(declare-fun %lbl%@128 () Bool)
(declare-fun %lbl%@129 () Bool)
(declare-fun %lbl%@130 () Bool)
(declare-fun %lbl%@131 () Bool)
(declare-fun %lbl%@132 () Bool)
(declare-fun %lbl%@133 () Bool)
(declare-fun %lbl%@134 () Bool)
(declare-fun %lbl%@135 () Bool)
(declare-fun %lbl%@136 () Bool)
(declare-fun %lbl%@137 () Bool)
(declare-fun %lbl%@138 () Bool)
(declare-fun %lbl%@139 () Bool)
(declare-fun %lbl%@140 () Bool)
(declare-fun %lbl%@141 () Bool)
(declare-fun %lbl%@142 () Bool)
(declare-fun %lbl%@143 () Bool)
(declare-fun %lbl%@144 () Bool)
(declare-fun %lbl%@145 () Bool)
(declare-fun %lbl%@146 () Bool)
(declare-fun %lbl%@147 () Bool)
(declare-fun %lbl%@148 () Bool)
(declare-fun %lbl%@149 () Bool)
(declare-fun %lbl%@150 () Bool)
(declare-fun %lbl%@151 () Bool)
(declare-fun %lbl%@152 () Bool)
(declare-fun %lbl%@153 () Bool)
(declare-fun %lbl%@154 () Bool)
(declare-fun %lbl%@155 () Bool)
(declare-fun %lbl%@156 () Bool)
(declare-fun %lbl%@157 () Bool)
(declare-fun %lbl%@158 () Bool)
(declare-fun %lbl%@159 () Bool)
(declare-fun %lbl%@160 () Bool)
(declare-fun %lbl%@161 () Bool)
(declare-fun %lbl%@162 () Bool)
(declare-fun %lbl%@163 () Bool)
(declare-fun %lbl%@164 () Bool)
(declare-fun %lbl%@165 () Bool)
(declare-fun %lbl%@166 () Bool)
(declare-fun %lbl%@167 () Bool)
(declare-fun %lbl%@168 () Bool)
(declare-fun %lbl%@169 () Bool)
(declare-fun %lbl%@170 () Bool)
(declare-fun %lbl%@171 () Bool)
(declare-fun %lbl%@172 () Bool)
(declare-fun %lbl%@173 () Bool)
(declare-fun %lbl%@174 () Bool)
(declare-fun |##i#2@0| () Int)
(declare-fun %lbl%@175 () Bool)
(declare-fun %lbl%@176 () Bool)
(declare-fun %lbl%@177 () Bool)
(declare-fun %lbl%@178 () Bool)
(declare-fun %lbl%@179 () Bool)
(declare-fun |i##0@0| () Int)
(declare-fun |newtype$check#6@0| () Int)
(declare-fun |newtype$check#7@0| () Int)
(declare-fun |j##0@0| () Int)
(declare-fun %lbl%@180 () Bool)
(declare-fun %lbl%@181 () Bool)
(declare-fun %lbl%@182 () Bool)
(declare-fun %lbl%@183 () Bool)
(declare-fun %lbl%@184 () Bool)
(declare-fun %lbl%@185 () Bool)
(declare-fun %lbl%@186 () Bool)
(declare-fun %lbl%@187 () Bool)
(declare-fun %lbl%@188 () Bool)
(declare-fun %lbl%@189 () Bool)
(declare-fun %lbl%@190 () Bool)
(declare-fun %lbl%@191 () Bool)
(declare-fun %lbl%@192 () Bool)
(declare-fun %lbl%@193 () Bool)
(declare-fun %lbl%@194 () Bool)
(declare-fun %lbl%@195 () Bool)
(declare-fun %lbl%@196 () Bool)
(declare-fun %lbl%@197 () Bool)
(declare-fun %lbl%@198 () Bool)
(declare-fun %lbl%@199 () Bool)
(declare-fun %lbl%@200 () Bool)
(declare-fun %lbl%@201 () Bool)
(declare-fun %lbl%@202 () Bool)
(declare-fun %lbl%@203 () Bool)
(declare-fun %lbl%@204 () Bool)
(declare-fun %lbl%@205 () Bool)
(declare-fun %lbl%@206 () Bool)
(declare-fun %lbl%@207 () Bool)
(declare-fun %lbl%@208 () Bool)
(declare-fun %lbl%@209 () Bool)
(declare-fun %lbl%@210 () Bool)
(declare-fun %lbl%@211 () Bool)
(declare-fun %lbl%@212 () Bool)
(declare-fun %lbl%@213 () Bool)
(declare-fun %lbl%@214 () Bool)
(declare-fun %lbl%@215 () Bool)
(declare-fun %lbl%@216 () Bool)
(declare-fun %lbl%@217 () Bool)
(declare-fun %lbl%@218 () Bool)
(declare-fun %lbl%@219 () Bool)
(declare-fun %lbl%@220 () Bool)
(declare-fun %lbl%@221 () Bool)
(declare-fun %lbl%@222 () Bool)
(declare-fun %lbl%@223 () Bool)
(declare-fun %lbl%@224 () Bool)
(declare-fun %lbl%@225 () Bool)
(declare-fun %lbl%@226 () Bool)
(declare-fun %lbl%@227 () Bool)
(declare-fun %lbl%@228 () Bool)
(declare-fun %lbl%@229 () Bool)
(declare-fun %lbl%@230 () Bool)
(declare-fun %lbl%@231 () Bool)
(declare-fun %lbl%@232 () Bool)
(declare-fun %lbl%@233 () Bool)
(declare-fun %lbl%@234 () Bool)
(declare-fun %lbl%@235 () Bool)
(declare-fun %lbl%@236 () Bool)
(declare-fun %lbl%@237 () Bool)
(declare-fun %lbl%+238 () Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type StartFuel_Sequences._default.NoDupes) LayerTypeType) (= (type StartFuelAssert_Sequences._default.NoDupes) LayerTypeType)) (= (type StartFuel_Sequences._default.Range) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Range) LayerTypeType)) (= (type StartFuel_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuel_Sequences._default.remove) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.remove) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.insert) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace1with2) LayerTypeType)) (= (type StartFuel_Sequences._default.replace2with1) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace2with1) LayerTypeType)) (= (type StartFuel_Sequences._default.concat) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat) LayerTypeType)) (= (type StartFuel_Sequences._default.concat3) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat3) LayerTypeType)) (= (type StartFuel_Sequences._default.concatSeq) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concatSeq) LayerTypeType)) (= (type StartFuel_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuel_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexIterate) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuel_Sequences._default.Zip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Zip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Unzip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Flatten) LayerTypeType)) (= (type StartFuel_Sequences._default.fill) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.fill) LayerTypeType)) (= (type StartFuel_Maps._default.MapRemoveStrong) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemoveStrong) LayerTypeType)) (= (type StartFuel_Maps._default.MapRemove1Strong) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemove1Strong) LayerTypeType)) (= (type StartFuel_Maps._default.IMapRemove) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapRemove) LayerTypeType)) (= (type StartFuel_Maps._default.IMapRemove1) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapRemove1) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapDisjointUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnionPreferA) LayerTypeType)) (= (type StartFuel_Maps._default.MapUnionPreferB) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnionPreferB) LayerTypeType)) (= (type StartFuel_Maps._default.MapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnionPreferA) LayerTypeType)) (= (type StartFuel_Maps._default.IMapUnionPreferB) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnionPreferB) LayerTypeType)) (= (type StartFuel_Maps._default.IMapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnion) LayerTypeType)) (= (type StartFuel_Maps._default.MapDisjointUnion3) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapDisjointUnion3) LayerTypeType)) (= (type StartFuelAssert_SeqComparison._default.lte) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.lte) LayerTypeType)) (= (type StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuel_Byte_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuel_Byte_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.minimum) LayerTypeType)) (= (type StartFuel_Byte_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.maximum) LayerTypeType)) (= (type StartFuel_Byte_Order._default.maximumOpt) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.maximumOpt) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.IsStrictlySorted) LayerTypeType)) (= (type StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuel_Lexicographic_Byte_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuel_Lexicographic_Byte_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.minimum) LayerTypeType)) (= (type StartFuel_Lexicographic_Byte_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.maximum) LayerTypeType)) (= (type StartFuel_Lexicographic_Byte_Order._default.maximumOpt) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.maximumOpt) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted) LayerTypeType)) (= (type StartFuel_Integer_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuelAssert_Integer_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuel_Integer_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuelAssert_Integer_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuel_Integer_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuelAssert_Integer_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuel_Integer_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Integer_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Integer_Order._default.minimum) LayerTypeType)) (= (type StartFuel_Integer_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Integer_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Integer_Order._default.maximum) LayerTypeType)) (= (type StartFuel_Integer_Order._default.maximumOpt) LayerTypeType)) (= (type StartFuelAssert_Integer_Order._default.maximumOpt) LayerTypeType)) (= (type StartFuelAssert_Integer_Order._default.IsStrictlySorted) LayerTypeType)) (= (type StartFuelAssert_KMBtreeModel._default.AllKeys) LayerTypeType)) (= (type StartFuelAssert_KMBtreeModel._default.Interpretation) LayerTypeType)) (= (type StartFuelAssert_KMBtreeModel._default.ToSeq) LayerTypeType)) (= (type StartFuelAssert_KMBtree._default.SeqRepr) LayerTypeType)) (= (type StartFuelAssert_KMBtree._default.I) LayerTypeType)) (= (type $_Frame@0) (MapType6Type refType boolType))) (= (type $Heap@@125) (MapType0Type refType MapType1Type))) (= (type |node#0@@97|) refType)) (= (type $Heap@0) (MapType0Type refType MapType1Type))) (= (type $Heap@1) (MapType0Type refType MapType1Type))) (= (type $Heap@2) (MapType0Type refType MapType1Type))) (= (type |##node#7@0|) DatatypeTypeType)) (= (type |##node#9@0|) DatatypeTypeType)) (= (type |call5formal@subnode#0|) refType)) (= (type $Heap@3) (MapType0Type refType MapType1Type))) (= (type |call5formal@subnode#0@0|) refType)) (= (type |pivot#0@0|) (SeqType BoxType))) (= (type $Heap@4) (MapType0Type refType MapType1Type))) (= (type $Heap@5) (MapType0Type refType MapType1Type))) (= (type |inode#0@0|) DatatypeTypeType)) (= (type |iright#0@0|) DatatypeTypeType)) (= (type |run##0@0|) (SeqType BoxType))) (= (type $Heap@6) (MapType0Type refType MapType1Type))) (= (type $Heap@7) (MapType0Type refType MapType1Type))) (= (type MoreFuel_KMBtree._default.I0) LayerTypeType)) (= (type |right#0@@11|) refType)) (= (type |pivot#0@@27|) (SeqType BoxType))) (= (type |$rhs##0|) refType)) (= (type |inode#0|) DatatypeTypeType)) (= (type |iright#0|) DatatypeTypeType)))
(push 1)
(set-info :boogie-vc-id Impl$$KMBtree.__default.SplitIndex)
(assert (not (let ((anon0_correct  (=> (! (and %lbl%+0 true) :lblpos +0) (=> (and (and (= (AsFuelBottom StartFuel_Sequences._default.NoDupes) StartFuel_Sequences._default.NoDupes) (= (AsFuelBottom StartFuelAssert_Sequences._default.NoDupes) StartFuelAssert_Sequences._default.NoDupes)) (and (= (AsFuelBottom StartFuel_Sequences._default.Range) StartFuel_Sequences._default.Range) (= (AsFuelBottom StartFuelAssert_Sequences._default.Range) StartFuelAssert_Sequences._default.Range))) (=> (and (and (and (= (AsFuelBottom StartFuel_Sequences._default.ApplyOpaque) StartFuel_Sequences._default.ApplyOpaque) (= (AsFuelBottom StartFuelAssert_Sequences._default.ApplyOpaque) StartFuelAssert_Sequences._default.ApplyOpaque)) (and (= (AsFuelBottom StartFuel_Sequences._default.remove) StartFuel_Sequences._default.remove) (= (AsFuelBottom StartFuelAssert_Sequences._default.remove) StartFuelAssert_Sequences._default.remove))) (and (and (= (AsFuelBottom StartFuel_Sequences._default.insert) StartFuel_Sequences._default.insert) (= (AsFuelBottom StartFuelAssert_Sequences._default.insert) StartFuelAssert_Sequences._default.insert)) (and (= (AsFuelBottom StartFuel_Sequences._default.replace1with2) StartFuel_Sequences._default.replace1with2) (= (AsFuelBottom StartFuelAssert_Sequences._default.replace1with2) StartFuelAssert_Sequences._default.replace1with2)))) (=> (and (and (and (and (= (AsFuelBottom StartFuel_Sequences._default.replace2with1) StartFuel_Sequences._default.replace2with1) (= (AsFuelBottom StartFuelAssert_Sequences._default.replace2with1) StartFuelAssert_Sequences._default.replace2with1)) (and (= (AsFuelBottom StartFuel_Sequences._default.concat) StartFuel_Sequences._default.concat) (= (AsFuelBottom StartFuelAssert_Sequences._default.concat) StartFuelAssert_Sequences._default.concat))) (and (and (= (AsFuelBottom StartFuel_Sequences._default.concat3) StartFuel_Sequences._default.concat3) (= (AsFuelBottom StartFuelAssert_Sequences._default.concat3) StartFuelAssert_Sequences._default.concat3)) (and (= (AsFuelBottom StartFuel_Sequences._default.concatSeq) StartFuel_Sequences._default.concatSeq) (= (AsFuelBottom StartFuelAssert_Sequences._default.concatSeq) StartFuelAssert_Sequences._default.concatSeq)))) (and (and (and (= (AsFuelBottom StartFuel_Sequences._default.IsPrefix) StartFuel_Sequences._default.IsPrefix) (= (AsFuelBottom StartFuelAssert_Sequences._default.IsPrefix) StartFuelAssert_Sequences._default.IsPrefix)) (and (= (AsFuelBottom StartFuel_Sequences._default.IsSuffix) StartFuel_Sequences._default.IsSuffix) (= (AsFuelBottom StartFuelAssert_Sequences._default.IsSuffix) StartFuelAssert_Sequences._default.IsSuffix))) (and (and (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexIterate) StartFuel_Sequences._default.SeqIndexIterate) (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexIterate) StartFuelAssert_Sequences._default.SeqIndexIterate)) (and (= (AsFuelBottom StartFuel_Sequences._default.SeqIndex) StartFuel_Sequences._default.SeqIndex) (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndex) StartFuelAssert_Sequences._default.SeqIndex))))) (=> (and (and (and (and (and (and (and (= (AsFuelBottom StartFuel_Sequences._default.SeqOfLength) StartFuel_Sequences._default.SeqOfLength) (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqOfLength) StartFuelAssert_Sequences._default.SeqOfLength)) (and (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexUpdate) StartFuel_Sequences._default.SeqIndexUpdate) (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexUpdate) StartFuelAssert_Sequences._default.SeqIndexUpdate))) (and (and (= (AsFuelBottom StartFuel_Sequences._default.Zip) StartFuel_Sequences._default.Zip) (= (AsFuelBottom StartFuelAssert_Sequences._default.Zip) StartFuelAssert_Sequences._default.Zip)) (and (= (AsFuelBottom StartFuel_Sequences._default.Unzip) StartFuel_Sequences._default.Unzip) (= (AsFuelBottom StartFuelAssert_Sequences._default.Unzip) StartFuelAssert_Sequences._default.Unzip)))) (and (and (and (= (AsFuelBottom StartFuel_Sequences._default.FlattenShape) StartFuel_Sequences._default.FlattenShape) (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenShape) StartFuelAssert_Sequences._default.FlattenShape)) (and (= (AsFuelBottom StartFuel_Sequences._default.FlattenLength) StartFuel_Sequences._default.FlattenLength) (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenLength) StartFuelAssert_Sequences._default.FlattenLength))) (and (and (= (AsFuelBottom StartFuel_Sequences._default.Flatten) StartFuel_Sequences._default.Flatten) (= (AsFuelBottom StartFuelAssert_Sequences._default.Flatten) StartFuelAssert_Sequences._default.Flatten)) (and (= (AsFuelBottom StartFuel_Sequences._default.fill) StartFuel_Sequences._default.fill) (= (AsFuelBottom StartFuelAssert_Sequences._default.fill) StartFuelAssert_Sequences._default.fill))))) (and (and (and (and (= (AsFuelBottom StartFuel_Maps._default.MapRemove) StartFuel_Maps._default.MapRemove) (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove) StartFuelAssert_Maps._default.MapRemove)) (and (= (AsFuelBottom StartFuel_Maps._default.MapRemoveStrong) StartFuel_Maps._default.MapRemoveStrong) (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemoveStrong) StartFuelAssert_Maps._default.MapRemoveStrong))) (and (and (= (AsFuelBottom StartFuel_Maps._default.MapRemove1) StartFuel_Maps._default.MapRemove1) (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove1) StartFuelAssert_Maps._default.MapRemove1)) (and (= (AsFuelBottom StartFuel_Maps._default.MapRemove1Strong) StartFuel_Maps._default.MapRemove1Strong) (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove1Strong) StartFuelAssert_Maps._default.MapRemove1Strong)))) (and (and (and (= (AsFuelBottom StartFuel_Maps._default.IMapRemove) StartFuel_Maps._default.IMapRemove) (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove) StartFuelAssert_Maps._default.IMapRemove)) (and (= (AsFuelBottom StartFuel_Maps._default.IMapRemove1) StartFuel_Maps._default.IMapRemove1) (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove1) StartFuelAssert_Maps._default.IMapRemove1))) (and (and (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion) StartFuel_Maps._default.MapDisjointUnion) (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion) StartFuelAssert_Maps._default.MapDisjointUnion)) (and (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferA) StartFuel_Maps._default.MapUnionPreferA) (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferA) StartFuelAssert_Maps._default.MapUnionPreferA)))))) (and (and (and (and (and (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferB) StartFuel_Maps._default.MapUnionPreferB) (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferB) StartFuelAssert_Maps._default.MapUnionPreferB)) (and (= (AsFuelBottom StartFuel_Maps._default.MapUnion) StartFuel_Maps._default.MapUnion) (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnion) StartFuelAssert_Maps._default.MapUnion))) (and (and (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferA) StartFuel_Maps._default.IMapUnionPreferA) (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferA) StartFuelAssert_Maps._default.IMapUnionPreferA)) (and (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferB) StartFuel_Maps._default.IMapUnionPreferB) (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferB) StartFuelAssert_Maps._default.IMapUnionPreferB)))) (and (and (and (= (AsFuelBottom StartFuel_Maps._default.IMapUnion) StartFuel_Maps._default.IMapUnion) (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnion) StartFuelAssert_Maps._default.IMapUnion)) (and (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion3) StartFuel_Maps._default.MapDisjointUnion3) (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion3) StartFuelAssert_Maps._default.MapDisjointUnion3))) (and (and (= (AsFuelBottom StartFuel_SeqComparison._default.lte) StartFuel_SeqComparison._default.lte) (= (AsFuelBottom StartFuelAssert_SeqComparison._default.lte) StartFuelAssert_SeqComparison._default.lte)) (and (= (AsFuelBottom StartFuel_Byte_Order._default.lte) StartFuel_Byte_Order._default.lte) (= (AsFuelBottom StartFuelAssert_Byte_Order._default.lte) StartFuelAssert_Byte_Order._default.lte))))) (and (and (and (and (= (AsFuelBottom StartFuel_Byte_Order._default.ltedef) StartFuel_Byte_Order._default.ltedef) (= (AsFuelBottom StartFuelAssert_Byte_Order._default.ltedef) StartFuelAssert_Byte_Order._default.ltedef)) (and (= (AsFuelBottom StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGte) StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGte) (= (AsFuelBottom StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGte) StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGte))) (and (and (= (AsFuelBottom StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGt) StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGt) (= (AsFuelBottom StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGt) StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGt)) (and (= (AsFuelBottom StartFuel_Byte_Order._default.NotMinimum) StartFuel_Byte_Order._default.NotMinimum) (= (AsFuelBottom StartFuelAssert_Byte_Order._default.NotMinimum) StartFuelAssert_Byte_Order._default.NotMinimum)))) (and (and (and (= (AsFuelBottom StartFuel_Byte_Order._default.SortedSeqForMap) StartFuel_Byte_Order._default.SortedSeqForMap) (= (AsFuelBottom StartFuelAssert_Byte_Order._default.SortedSeqForMap) StartFuelAssert_Byte_Order._default.SortedSeqForMap)) (and (= (AsFuelBottom StartFuel_Byte_Order._default.minimum) StartFuel_Byte_Order._default.minimum) (= (AsFuelBottom StartFuelAssert_Byte_Order._default.minimum) StartFuelAssert_Byte_Order._default.minimum))) (and (and (= (AsFuelBottom StartFuel_Byte_Order._default.minimumOpt) StartFuel_Byte_Order._default.minimumOpt) (= (AsFuelBottom StartFuelAssert_Byte_Order._default.minimumOpt) StartFuelAssert_Byte_Order._default.minimumOpt)) (and (= (AsFuelBottom StartFuel_Byte_Order._default.maximum) StartFuel_Byte_Order._default.maximum) (= (AsFuelBottom StartFuelAssert_Byte_Order._default.maximum) StartFuelAssert_Byte_Order._default.maximum))))))) (and (and (and (and (and (and (= (AsFuelBottom StartFuel_Byte_Order._default.maximumOpt) StartFuel_Byte_Order._default.maximumOpt) (= (AsFuelBottom StartFuelAssert_Byte_Order._default.maximumOpt) StartFuelAssert_Byte_Order._default.maximumOpt)) (and (= (AsFuelBottom StartFuel_Byte_Order._default.IsSorted) StartFuel_Byte_Order._default.IsSorted) (= (AsFuelBottom StartFuelAssert_Byte_Order._default.IsSorted) StartFuelAssert_Byte_Order._default.IsSorted))) (and (and (= (AsFuelBottom StartFuel_Byte_Order._default.IsStrictlySorted) StartFuel_Byte_Order._default.IsStrictlySorted) (= (AsFuelBottom StartFuelAssert_Byte_Order._default.IsStrictlySorted) StartFuelAssert_Byte_Order._default.IsStrictlySorted)) (and (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte)))) (and (and (and (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt)) (and (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.NotMinimum) StartFuel_Lexicographic_Byte_Order._default.NotMinimum) (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum) StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum))) (and (and (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.SortedSeqForMap) StartFuel_Lexicographic_Byte_Order._default.SortedSeqForMap) (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.SortedSeqForMap) StartFuelAssert_Lexicographic_Byte_Order._default.SortedSeqForMap)) (and (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.minimum) StartFuel_Lexicographic_Byte_Order._default.minimum) (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.minimum) StartFuelAssert_Lexicographic_Byte_Order._default.minimum))))) (and (and (and (and (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.minimumOpt) StartFuel_Lexicographic_Byte_Order._default.minimumOpt) (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.minimumOpt) StartFuelAssert_Lexicographic_Byte_Order._default.minimumOpt)) (and (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.maximum) StartFuel_Lexicographic_Byte_Order._default.maximum) (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.maximum) StartFuelAssert_Lexicographic_Byte_Order._default.maximum))) (and (and (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.maximumOpt) StartFuel_Lexicographic_Byte_Order._default.maximumOpt) (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.maximumOpt) StartFuelAssert_Lexicographic_Byte_Order._default.maximumOpt)) (and (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.IsSorted) StartFuel_Lexicographic_Byte_Order._default.IsSorted) (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted) StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted)))) (and (and (and (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted) StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted) (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted) StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted)) (and (= (AsFuelBottom StartFuel_Integer_Order._default.ltedef) StartFuel_Integer_Order._default.ltedef) (= (AsFuelBottom StartFuelAssert_Integer_Order._default.ltedef) StartFuelAssert_Integer_Order._default.ltedef))) (and (and (= (AsFuelBottom StartFuel_Integer_Order._default.binarySearchIndexOfFirstKeyGte) StartFuel_Integer_Order._default.binarySearchIndexOfFirstKeyGte) (= (AsFuelBottom StartFuelAssert_Integer_Order._default.binarySearchIndexOfFirstKeyGte) StartFuelAssert_Integer_Order._default.binarySearchIndexOfFirstKeyGte)) (and (= (AsFuelBottom StartFuel_Integer_Order._default.binarySearchIndexOfFirstKeyGt) StartFuel_Integer_Order._default.binarySearchIndexOfFirstKeyGt) (= (AsFuelBottom StartFuelAssert_Integer_Order._default.binarySearchIndexOfFirstKeyGt) StartFuelAssert_Integer_Order._default.binarySearchIndexOfFirstKeyGt)))))) (and (and (and (and (and (= (AsFuelBottom StartFuel_Integer_Order._default.NotMinimum) StartFuel_Integer_Order._default.NotMinimum) (= (AsFuelBottom StartFuelAssert_Integer_Order._default.NotMinimum) StartFuelAssert_Integer_Order._default.NotMinimum)) (and (= (AsFuelBottom StartFuel_Integer_Order._default.SortedSeqForMap) StartFuel_Integer_Order._default.SortedSeqForMap) (= (AsFuelBottom StartFuelAssert_Integer_Order._default.SortedSeqForMap) StartFuelAssert_Integer_Order._default.SortedSeqForMap))) (and (and (= (AsFuelBottom StartFuel_Integer_Order._default.minimum) StartFuel_Integer_Order._default.minimum) (= (AsFuelBottom StartFuelAssert_Integer_Order._default.minimum) StartFuelAssert_Integer_Order._default.minimum)) (and (= (AsFuelBottom StartFuel_Integer_Order._default.minimumOpt) StartFuel_Integer_Order._default.minimumOpt) (= (AsFuelBottom StartFuelAssert_Integer_Order._default.minimumOpt) StartFuelAssert_Integer_Order._default.minimumOpt)))) (and (and (and (= (AsFuelBottom StartFuel_Integer_Order._default.maximum) StartFuel_Integer_Order._default.maximum) (= (AsFuelBottom StartFuelAssert_Integer_Order._default.maximum) StartFuelAssert_Integer_Order._default.maximum)) (and (= (AsFuelBottom StartFuel_Integer_Order._default.maximumOpt) StartFuel_Integer_Order._default.maximumOpt) (= (AsFuelBottom StartFuelAssert_Integer_Order._default.maximumOpt) StartFuelAssert_Integer_Order._default.maximumOpt))) (and (and (= (AsFuelBottom StartFuel_Integer_Order._default.IsSorted) StartFuel_Integer_Order._default.IsSorted) (= (AsFuelBottom StartFuelAssert_Integer_Order._default.IsSorted) StartFuelAssert_Integer_Order._default.IsSorted)) (and (= (AsFuelBottom StartFuel_Integer_Order._default.IsStrictlySorted) StartFuel_Integer_Order._default.IsStrictlySorted) (= (AsFuelBottom StartFuelAssert_Integer_Order._default.IsStrictlySorted) StartFuelAssert_Integer_Order._default.IsStrictlySorted))))) (and (and (and (and (= (AsFuelBottom StartFuel_KMBtreeModel._default.AllKeys) StartFuel_KMBtreeModel._default.AllKeys) (= (AsFuelBottom StartFuelAssert_KMBtreeModel._default.AllKeys) StartFuelAssert_KMBtreeModel._default.AllKeys)) (and (= (AsFuelBottom StartFuel_KMBtreeModel._default.Interpretation) StartFuel_KMBtreeModel._default.Interpretation) (= (AsFuelBottom StartFuelAssert_KMBtreeModel._default.Interpretation) StartFuelAssert_KMBtreeModel._default.Interpretation))) (and (and (= (AsFuelBottom StartFuel_KMBtreeModel._default.ToSeq) StartFuel_KMBtreeModel._default.ToSeq) (= (AsFuelBottom StartFuelAssert_KMBtreeModel._default.ToSeq) StartFuelAssert_KMBtreeModel._default.ToSeq)) (and (= (AsFuelBottom StartFuel_KMBtree._default.SeqRepr) StartFuel_KMBtree._default.SeqRepr) (= (AsFuelBottom StartFuelAssert_KMBtree._default.SeqRepr) StartFuelAssert_KMBtree._default.SeqRepr)))) (and (and (and (= (AsFuelBottom StartFuel_KMBtree._default.I) StartFuel_KMBtree._default.I) (= (AsFuelBottom StartFuelAssert_KMBtree._default.I) StartFuelAssert_KMBtree._default.I)) (and (= $_Frame@0 (|lambda#45| null $Heap@@125 alloc |node#0@@97|)) (= |from1##0@0| (LitInt 0)))) (and (and (not (= |node#0@@97| null)) (KMBtree.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (and (= |to2##0@0| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (forall (($o@@133 T@U) ($f@@83 T@U) ) (! (let ((alpha@@90 (FieldTypeInv0 (type $f@@83)))) (=> (and (and (= (type $o@@133) refType) (= (type $f@@83) (FieldType alpha@@90))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@133 $f@@83)))) :qid |MutableB.723:21| :skolemid |9328| :no-pattern (type $o@@133) :no-pattern (type $f@@83) :no-pattern (U_2_int $o@@133) :no-pattern (U_2_bool $o@@133) :no-pattern (U_2_int $f@@83) :no-pattern (U_2_bool $f@@83) ))))))))) (and (! (or %lbl%@1  (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)) (|Set#Equal| (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))))))))) :lblneg @1) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)) (|Set#Equal| (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))))))) (and (! (or %lbl%@2  (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)) (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))))))) :lblneg @2) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)) (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))))))) (and (! (or %lbl%@3  (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)) (= (U_2_int (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.height)) (LitInt 0)))))) :lblneg @3) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)) (= (U_2_int (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.height)) (LitInt 0))))) (and (! (or %lbl%@4  (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)) (<= (LitInt 0) (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))))))) :lblneg @4) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)) (<= (LitInt 0) (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))))) (and (! (or %lbl%@5  (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)) (<= (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)) (LitInt KMBtree.__default.MaxKeysPerLeaf)))))) :lblneg @5) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)) (<= (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)) (LitInt KMBtree.__default.MaxKeysPerLeaf))))) (and (! (or %lbl%@6  (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)) (= (LitInt KMBtree.__default.MaxKeysPerLeaf) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))))))) :lblneg @6) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)) (= (LitInt KMBtree.__default.MaxKeysPerLeaf) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))))))) (and (! (or %lbl%@7  (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)) (= (_System.array.Length (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))))))) :lblneg @7) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)) (= (_System.array.Length (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))))))) (and (! (or %lbl%@8  (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) :lblneg @8) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true)))))) (and (! (or %lbl%@9  (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) :lblneg @9) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true)))))) (and (! (or %lbl%@10  (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#2| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) ($Box |children#2|)) (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.repr))))))) :lblneg @10) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#2@@0| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) ($Box |children#2@@0|)) (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.repr)))))) (and (! (or %lbl%@11  (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (< 0 |nchildren#2|)))))) :lblneg @11) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@0| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (< 0 |nchildren#2@@0|))))) (and (! (or %lbl%@12  (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@1| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (<= |nchildren#2@@1| (LitInt KMBtree.__default.MaxChildren))))))) :lblneg @12) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@2| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (<= |nchildren#2@@2| (LitInt KMBtree.__default.MaxChildren)))))) (and (! (or %lbl%@13  (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#2@@1| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (= (LitInt KMBtree.__default.MaxChildren) (_System.array.Length |children#2@@1|))))))) :lblneg @13) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#2@@2| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (= (LitInt KMBtree.__default.MaxChildren) (_System.array.Length |children#2@@2|)))))) (and (! (or %lbl%@14  (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (= (_System.array.Length (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (LitInt (- KMBtree.__default.MaxChildren 1))))))) :lblneg @14) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (= (_System.array.Length (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (LitInt (- KMBtree.__default.MaxChildren 1)))))) (and (! (or %lbl%@15  (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@3| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@3| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#10@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#10@@0|) (< |i#10@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#10@@0|) (< |i#10@@0| |nchildren#2@@3|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@@125 |children#2@@3|) (IndexField |i#10@@0|))) null)))) :qid |MutableB.178:18| :skolemid |8800| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@125 |children#2@@3|) (IndexField |i#10@@0|)))) )))))))) :lblneg @15) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@4| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@4| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#10@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#10@@1|) (< |i#10@@1| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#10@@1|) (< |i#10@@1| |nchildren#2@@4|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@@125 |children#2@@4|) (IndexField |i#10@@1|))) null)))) :qid |MutableB.178:18| :skolemid |8800| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@125 |children#2@@4|) (IndexField |i#10@@1|)))) ))))))) (and (! (or %lbl%@16  (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@5| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@5| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (KMBtree.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@@125 (|Seq#Take| (|Seq#FromArray| $Heap@@125 |children#2@@5|) |nchildren#2@@5|) (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.height))))))))) :lblneg @16) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@6| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@6| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (KMBtree.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@@125 (|Seq#Take| (|Seq#FromArray| $Heap@@125 |children#2@@6|) |nchildren#2@@6|) (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.height)))))))) (and (! (or %lbl%@17  (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@7| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@7| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#11@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#11@@2|) (< |i#11@@2| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#11@@2|) (< |i#11@@2| |nchildren#2@@7|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@125 ($Unbox refType (MapType1Select (MapType0Select $Heap@@125 |children#2@@7|) (IndexField |i#11@@2|)))) KMBtree.Node.repr) ($Box |node#0@@97|)))))) :qid |MutableB.180:18| :skolemid |8801| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@125 |children#2@@7|) (IndexField |i#11@@2|)))) )))))))) :lblneg @17) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@8| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@8| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#11@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#11@@3|) (< |i#11@@3| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#11@@3|) (< |i#11@@3| |nchildren#2@@8|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@125 ($Unbox refType (MapType1Select (MapType0Select $Heap@@125 |children#2@@8|) (IndexField |i#11@@3|)))) KMBtree.Node.repr) ($Box |node#0@@97|)))))) :qid |MutableB.180:18| :skolemid |8801| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@125 |children#2@@8|) (IndexField |i#11@@3|)))) ))))))) (and (! (or %lbl%@18  (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@9| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@9| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#12@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#12@@0|) (< |i#12@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#12@@0|) (< |i#12@@0| |nchildren#2@@9|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@125 ($Unbox refType (MapType1Select (MapType0Select $Heap@@125 |children#2@@9|) (IndexField |i#12@@0|)))) KMBtree.Node.repr) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |8802| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@125 |children#2@@9|) (IndexField |i#12@@0|)))) )))))))) :lblneg @18) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@10| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@10| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#12@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#12@@1|) (< |i#12@@1| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#12@@1|) (< |i#12@@1| |nchildren#2@@10|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@125 ($Unbox refType (MapType1Select (MapType0Select $Heap@@125 |children#2@@10|) (IndexField |i#12@@1|)))) KMBtree.Node.repr) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |8802| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@125 |children#2@@10|) (IndexField |i#12@@1|)))) ))))))) (and (! (or %lbl%@19  (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@11| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@11| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#13| Int) ) (!  (=> (and (<= (LitInt 0) |i#13|) (< |i#13| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#13|) (< |i#13| |nchildren#2@@11|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@@125 |children#2@@11|) (IndexField |i#13|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@@125 |children#2@@11|) |nchildren#2@@11|) |i#13|))))) :qid |MutableB.182:24| :skolemid |8803| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@@125 |children#2@@11|) |nchildren#2@@11|) |i#13|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@125 |children#2@@11|) (IndexField |i#13|)))) )) (U_2_bool (Lit (bool_2_U true)))))))))) :lblneg @19) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@12| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@12| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#13@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#13@@0|) (< |i#13@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#13@@0|) (< |i#13@@0| |nchildren#2@@12|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@@125 |children#2@@12|) (IndexField |i#13@@0|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@@125 |children#2@@12|) |nchildren#2@@12|) |i#13@@0|))))) :qid |MutableB.182:24| :skolemid |8803| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@@125 |children#2@@12|) |nchildren#2@@12|) |i#13@@0|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@125 |children#2@@12|) (IndexField |i#13@@0|)))) )) (U_2_bool (Lit (bool_2_U true))))))))) (and (! (or %lbl%@20  (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@13| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@13| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#13@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#13@@1|) (< |i#13@@1| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#13@@1|) (< |i#13@@1| |nchildren#2@@13|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@@125 |children#2@@13|) (IndexField |i#13@@1|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@@125 |children#2@@13|) |nchildren#2@@13|) |i#13@@1|))))) :qid |MutableB.182:24| :skolemid |8803| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@@125 |children#2@@13|) |nchildren#2@@13|) |i#13@@1|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@125 |children#2@@13|) (IndexField |i#13@@1|)))) )) (forall ((|i#14| Int) ) (!  (=> (and (<= (LitInt 0) |i#14|) (< |i#14| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#14|) (< |i#14| |nchildren#2@@13|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@125 ($Unbox refType (MapType1Select (MapType0Select $Heap@@125 |children#2@@13|) (IndexField |i#14|)))) KMBtree.Node.repr) ($Box |children#2@@13|)))))) :qid |MutableB.183:18| :skolemid |8804| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@125 |children#2@@13|) (IndexField |i#14|)))) ))))))))) :lblneg @20) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@@125 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@14| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@14| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#13@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#13@@2|) (< |i#13@@2| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#13@@2|) (< |i#13@@2| |nchildren#2@@14|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@@125 |children#2@@14|) (IndexField |i#13@@2|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@@125 |children#2@@14|) |nchildren#2@@14|) |i#13@@2|))))) :qid |MutableB.182:24| :skolemid |8803| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@@125 |children#2@@14|) |nchildren#2@@14|) |i#13@@2|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@125 |children#2@@14|) (IndexField |i#13@@2|)))) )) (forall ((|i#14@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#14@@0|) (< |i#14@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#14@@0|) (< |i#14@@0| |nchildren#2@@14|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@125 ($Unbox refType (MapType1Select (MapType0Select $Heap@@125 |children#2@@14|) (IndexField |i#14@@0|)))) KMBtree.Node.repr) ($Box |children#2@@14|)))))) :qid |MutableB.183:18| :skolemid |8804| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@125 |children#2@@14|) (IndexField |i#14@@0|)))) )))))))) (and (! (or %lbl%@21 (KMBtree.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) :lblneg @21) (=> (KMBtree.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)) (and (! (or %lbl%@22 (<= (LitInt 0) |from1##0@0|)) :lblneg @22) (=> (<= (LitInt 0) |from1##0@0|) (and (! (or %lbl%@23 (<= |from1##0@0| |nleft#0|)) :lblneg @23) (=> (<= |from1##0@0| |nleft#0|) (and (! (or %lbl%@24 (<= |nleft#0| |nleft#0|)) :lblneg @24) (=> (<= |nleft#0| |nleft#0|) (and (! (or %lbl%@25 (<= |nleft#0| |to2##0@0|)) :lblneg @25) (=> (<= |nleft#0| |to2##0@0|) (and (! (or %lbl%@26 (<= |to2##0@0| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) :lblneg @26) (=> (<= |to2##0@0| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (=> (and (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (|KMBtree.__default.SubRepr#canCall| $Heap@0 |node#0@@97| |from1##0@0| |nleft#0|) (|KMBtree.__default.SubRepr#canCall| $Heap@0 |node#0@@97| |nleft#0| |to2##0@0|))) (and (and (|Set#Disjoint| (KMBtree.__default.SubRepr $Heap@0 |node#0@@97| |from1##0@0| |nleft#0|) (KMBtree.__default.SubRepr $Heap@0 |node#0@@97| |nleft#0| |to2##0@0|)) (= $Heap@@125 $Heap@0)) (and (= |from##0@0| (LitInt 0)) (forall (($o@@134 T@U) ($f@@84 T@U) ) (! (let ((alpha@@91 (FieldTypeInv0 (type $f@@84)))) (=> (and (and (= (type $o@@134) refType) (= (type $f@@84) (FieldType alpha@@91))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@134 $f@@84)))) :qid |MutableB.724:22| :skolemid |9329| :no-pattern (type $o@@134) :no-pattern (type $f@@84) :no-pattern (U_2_int $o@@134) :no-pattern (U_2_bool $o@@134) :no-pattern (U_2_int $f@@84) :no-pattern (U_2_bool $f@@84) ))))) (and (! (or %lbl%@27  (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)) (|Set#Equal| (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))))))))) :lblneg @27) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)) (|Set#Equal| (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))))))) (and (! (or %lbl%@28  (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)) (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))))))) :lblneg @28) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)) (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))))))) (and (! (or %lbl%@29  (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)) (= (U_2_int (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.height)) (LitInt 0)))))) :lblneg @29) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)) (= (U_2_int (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.height)) (LitInt 0))))) (and (! (or %lbl%@30  (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)) (<= (LitInt 0) (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))))))) :lblneg @30) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)) (<= (LitInt 0) (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))))) (and (! (or %lbl%@31  (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)) (<= (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)) (LitInt KMBtree.__default.MaxKeysPerLeaf)))))) :lblneg @31) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)) (<= (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)) (LitInt KMBtree.__default.MaxKeysPerLeaf))))) (and (! (or %lbl%@32  (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)) (= (LitInt KMBtree.__default.MaxKeysPerLeaf) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))))))) :lblneg @32) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)) (= (LitInt KMBtree.__default.MaxKeysPerLeaf) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))))))) (and (! (or %lbl%@33  (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)) (= (_System.array.Length (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))))))) :lblneg @33) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)) (= (_System.array.Length (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))))))) (and (! (or %lbl%@34  (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) :lblneg @34) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true)))))) (and (! (or %lbl%@35  (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) :lblneg @35) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true)))))) (and (! (or %lbl%@36  (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#2@@15| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) ($Box |children#2@@15|)) (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.repr))))))) :lblneg @36) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#2@@16| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) ($Box |children#2@@16|)) (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.repr)))))) (and (! (or %lbl%@37  (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@15| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (< 0 |nchildren#2@@15|)))))) :lblneg @37) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@16| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (< 0 |nchildren#2@@16|))))) (and (! (or %lbl%@38  (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@17| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (<= |nchildren#2@@17| (LitInt KMBtree.__default.MaxChildren))))))) :lblneg @38) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@18| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (<= |nchildren#2@@18| (LitInt KMBtree.__default.MaxChildren)))))) (and (! (or %lbl%@39  (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#2@@17| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (= (LitInt KMBtree.__default.MaxChildren) (_System.array.Length |children#2@@17|))))))) :lblneg @39) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#2@@18| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (= (LitInt KMBtree.__default.MaxChildren) (_System.array.Length |children#2@@18|)))))) (and (! (or %lbl%@40  (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (= (_System.array.Length (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (LitInt (- KMBtree.__default.MaxChildren 1))))))) :lblneg @40) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (= (_System.array.Length (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (LitInt (- KMBtree.__default.MaxChildren 1)))))) (and (! (or %lbl%@41  (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@19| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@19| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#10@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#10@@2|) (< |i#10@@2| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#10@@2|) (< |i#10@@2| |nchildren#2@@19|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@0 |children#2@@19|) (IndexField |i#10@@2|))) null)))) :qid |MutableB.178:18| :skolemid |8843| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@0 |children#2@@19|) (IndexField |i#10@@2|)))) )))))))) :lblneg @41) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@20| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@20| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#10@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#10@@3|) (< |i#10@@3| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#10@@3|) (< |i#10@@3| |nchildren#2@@20|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@0 |children#2@@20|) (IndexField |i#10@@3|))) null)))) :qid |MutableB.178:18| :skolemid |8843| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@0 |children#2@@20|) (IndexField |i#10@@3|)))) ))))))) (and (! (or %lbl%@42  (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@21| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@21| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (KMBtree.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@0 (|Seq#Take| (|Seq#FromArray| $Heap@0 |children#2@@21|) |nchildren#2@@21|) (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.height))))))))) :lblneg @42) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@22| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@22| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (KMBtree.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@0 (|Seq#Take| (|Seq#FromArray| $Heap@0 |children#2@@22|) |nchildren#2@@22|) (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.height)))))))) (and (! (or %lbl%@43  (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@23| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@23| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#11@@4| Int) ) (!  (=> (and (<= (LitInt 0) |i#11@@4|) (< |i#11@@4| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#11@@4|) (< |i#11@@4| |nchildren#2@@23|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@0 ($Unbox refType (MapType1Select (MapType0Select $Heap@0 |children#2@@23|) (IndexField |i#11@@4|)))) KMBtree.Node.repr) ($Box |node#0@@97|)))))) :qid |MutableB.180:18| :skolemid |8844| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@0 |children#2@@23|) (IndexField |i#11@@4|)))) )))))))) :lblneg @43) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@24| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@24| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#11@@5| Int) ) (!  (=> (and (<= (LitInt 0) |i#11@@5|) (< |i#11@@5| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#11@@5|) (< |i#11@@5| |nchildren#2@@24|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@0 ($Unbox refType (MapType1Select (MapType0Select $Heap@0 |children#2@@24|) (IndexField |i#11@@5|)))) KMBtree.Node.repr) ($Box |node#0@@97|)))))) :qid |MutableB.180:18| :skolemid |8844| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@0 |children#2@@24|) (IndexField |i#11@@5|)))) ))))))) (and (! (or %lbl%@44  (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@25| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@25| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#12@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#12@@2|) (< |i#12@@2| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#12@@2|) (< |i#12@@2| |nchildren#2@@25|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@0 ($Unbox refType (MapType1Select (MapType0Select $Heap@0 |children#2@@25|) (IndexField |i#12@@2|)))) KMBtree.Node.repr) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |8845| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@0 |children#2@@25|) (IndexField |i#12@@2|)))) )))))))) :lblneg @44) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@26| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@26| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#12@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#12@@3|) (< |i#12@@3| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#12@@3|) (< |i#12@@3| |nchildren#2@@26|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@0 ($Unbox refType (MapType1Select (MapType0Select $Heap@0 |children#2@@26|) (IndexField |i#12@@3|)))) KMBtree.Node.repr) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |8845| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@0 |children#2@@26|) (IndexField |i#12@@3|)))) ))))))) (and (! (or %lbl%@45  (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@27| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@27| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#13@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#13@@3|) (< |i#13@@3| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#13@@3|) (< |i#13@@3| |nchildren#2@@27|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@0 |children#2@@27|) (IndexField |i#13@@3|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@0 |children#2@@27|) |nchildren#2@@27|) |i#13@@3|))))) :qid |MutableB.182:24| :skolemid |8846| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@0 |children#2@@27|) |nchildren#2@@27|) |i#13@@3|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@0 |children#2@@27|) (IndexField |i#13@@3|)))) )) (U_2_bool (Lit (bool_2_U true)))))))))) :lblneg @45) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@28| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@28| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#13@@4| Int) ) (!  (=> (and (<= (LitInt 0) |i#13@@4|) (< |i#13@@4| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#13@@4|) (< |i#13@@4| |nchildren#2@@28|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@0 |children#2@@28|) (IndexField |i#13@@4|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@0 |children#2@@28|) |nchildren#2@@28|) |i#13@@4|))))) :qid |MutableB.182:24| :skolemid |8846| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@0 |children#2@@28|) |nchildren#2@@28|) |i#13@@4|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@0 |children#2@@28|) (IndexField |i#13@@4|)))) )) (U_2_bool (Lit (bool_2_U true))))))))) (and (! (or %lbl%@46  (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@29| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@29| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#13@@5| Int) ) (!  (=> (and (<= (LitInt 0) |i#13@@5|) (< |i#13@@5| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#13@@5|) (< |i#13@@5| |nchildren#2@@29|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@0 |children#2@@29|) (IndexField |i#13@@5|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@0 |children#2@@29|) |nchildren#2@@29|) |i#13@@5|))))) :qid |MutableB.182:24| :skolemid |8846| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@0 |children#2@@29|) |nchildren#2@@29|) |i#13@@5|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@0 |children#2@@29|) (IndexField |i#13@@5|)))) )) (forall ((|i#14@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#14@@1|) (< |i#14@@1| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#14@@1|) (< |i#14@@1| |nchildren#2@@29|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@0 ($Unbox refType (MapType1Select (MapType0Select $Heap@0 |children#2@@29|) (IndexField |i#14@@1|)))) KMBtree.Node.repr) ($Box |children#2@@29|)))))) :qid |MutableB.183:18| :skolemid |8847| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@0 |children#2@@29|) (IndexField |i#14@@1|)))) ))))))))) :lblneg @46) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@0 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@0 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@30| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@30| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#13@@6| Int) ) (!  (=> (and (<= (LitInt 0) |i#13@@6|) (< |i#13@@6| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#13@@6|) (< |i#13@@6| |nchildren#2@@30|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@0 |children#2@@30|) (IndexField |i#13@@6|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@0 |children#2@@30|) |nchildren#2@@30|) |i#13@@6|))))) :qid |MutableB.182:24| :skolemid |8846| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@0 |children#2@@30|) |nchildren#2@@30|) |i#13@@6|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@0 |children#2@@30|) (IndexField |i#13@@6|)))) )) (forall ((|i#14@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#14@@2|) (< |i#14@@2| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#14@@2|) (< |i#14@@2| |nchildren#2@@30|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@0 ($Unbox refType (MapType1Select (MapType0Select $Heap@0 |children#2@@30|) (IndexField |i#14@@2|)))) KMBtree.Node.repr) ($Box |children#2@@30|)))))) :qid |MutableB.183:18| :skolemid |8847| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@0 |children#2@@30|) (IndexField |i#14@@2|)))) )))))))) (and (! (or %lbl%@47 (KMBtree.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) :lblneg @47) (=> (KMBtree.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)) (and (! (or %lbl%@48 (< 1 (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) :lblneg @48) (=> (< 1 (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (and (! (or %lbl%@49 (<= (LitInt 0) |from##0@0|)) :lblneg @49) (=> (<= (LitInt 0) |from##0@0|) (and (! (or %lbl%@50 (<= |from##0@0| |nleft#0|)) :lblneg @50) (=> (<= |from##0@0| |nleft#0|) (and (! (or %lbl%@51 (<= |nleft#0| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents)))) :lblneg @51) (=> (<= |nleft#0| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@0 |node#0@@97|) KMBtree.Node.contents))) (=> (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (|KMBtree.__default.SubRepr#canCall| $Heap@1 |node#0@@97| |from##0@0| |nleft#0|)) (=> (and (and (and (|Set#Subset| (KMBtree.__default.SubRepr $Heap@1 |node#0@@97| |from##0@0| |nleft#0|) (|Set#Difference| (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))))) (=> (< (- |nleft#0| |from##0@0|) (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (|KMBtree.__default.SubRepr#canCall| $Heap@1 |node#0@@97| |from##0@0| |nleft#0|))) (and (=> (< (- |nleft#0| |from##0@0|) (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (and (|Set#Subset| (KMBtree.__default.SubRepr $Heap@1 |node#0@@97| |from##0@0| |nleft#0|) (|Set#Difference| (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))))) (not (|Set#Subset| (|Set#Difference| (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))))) (KMBtree.__default.SubRepr $Heap@1 |node#0@@97| |from##0@0| |nleft#0|))))) (= $Heap@0 $Heap@1))) (and (and (not (= |node#0@@97| null)) (KMBtree.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (and (= |to##1@0| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (forall (($o@@135 T@U) ($f@@85 T@U) ) (! (let ((alpha@@92 (FieldTypeInv0 (type $f@@85)))) (=> (and (and (= (type $o@@135) refType) (= (type $f@@85) (FieldType alpha@@92))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@135 $f@@85)))) :qid |MutableB.725:22| :skolemid |9330| :no-pattern (type $o@@135) :no-pattern (type $f@@85) :no-pattern (U_2_int $o@@135) :no-pattern (U_2_bool $o@@135) :no-pattern (U_2_int $f@@85) :no-pattern (U_2_bool $f@@85) ))))) (and (! (or %lbl%@52  (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)) (|Set#Equal| (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))))))))) :lblneg @52) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)) (|Set#Equal| (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))))))) (and (! (or %lbl%@53  (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)) (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))))))) :lblneg @53) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)) (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))))))) (and (! (or %lbl%@54  (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)) (= (U_2_int (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.height)) (LitInt 0)))))) :lblneg @54) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)) (= (U_2_int (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.height)) (LitInt 0))))) (and (! (or %lbl%@55  (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)) (<= (LitInt 0) (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))))))) :lblneg @55) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)) (<= (LitInt 0) (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))))) (and (! (or %lbl%@56  (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)) (<= (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)) (LitInt KMBtree.__default.MaxKeysPerLeaf)))))) :lblneg @56) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)) (<= (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)) (LitInt KMBtree.__default.MaxKeysPerLeaf))))) (and (! (or %lbl%@57  (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)) (= (LitInt KMBtree.__default.MaxKeysPerLeaf) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))))))) :lblneg @57) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)) (= (LitInt KMBtree.__default.MaxKeysPerLeaf) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))))))) (and (! (or %lbl%@58  (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)) (= (_System.array.Length (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))))))) :lblneg @58) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)) (= (_System.array.Length (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))))))) (and (! (or %lbl%@59  (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) :lblneg @59) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true)))))) (and (! (or %lbl%@60  (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) :lblneg @60) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true)))))) (and (! (or %lbl%@61  (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#2@@31| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) ($Box |children#2@@31|)) (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.repr))))))) :lblneg @61) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#2@@32| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) ($Box |children#2@@32|)) (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.repr)))))) (and (! (or %lbl%@62  (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@31| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (< 0 |nchildren#2@@31|)))))) :lblneg @62) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@32| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (< 0 |nchildren#2@@32|))))) (and (! (or %lbl%@63  (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@33| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (<= |nchildren#2@@33| (LitInt KMBtree.__default.MaxChildren))))))) :lblneg @63) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@34| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (<= |nchildren#2@@34| (LitInt KMBtree.__default.MaxChildren)))))) (and (! (or %lbl%@64  (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#2@@33| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (= (LitInt KMBtree.__default.MaxChildren) (_System.array.Length |children#2@@33|))))))) :lblneg @64) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#2@@34| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (= (LitInt KMBtree.__default.MaxChildren) (_System.array.Length |children#2@@34|)))))) (and (! (or %lbl%@65  (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (= (_System.array.Length (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (LitInt (- KMBtree.__default.MaxChildren 1))))))) :lblneg @65) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (= (_System.array.Length (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (LitInt (- KMBtree.__default.MaxChildren 1)))))) (and (! (or %lbl%@66  (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@35| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@35| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#10@@4| Int) ) (!  (=> (and (<= (LitInt 0) |i#10@@4|) (< |i#10@@4| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#10@@4|) (< |i#10@@4| |nchildren#2@@35|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@1 |children#2@@35|) (IndexField |i#10@@4|))) null)))) :qid |MutableB.178:18| :skolemid |8843| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@1 |children#2@@35|) (IndexField |i#10@@4|)))) )))))))) :lblneg @66) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@36| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@36| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#10@@5| Int) ) (!  (=> (and (<= (LitInt 0) |i#10@@5|) (< |i#10@@5| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#10@@5|) (< |i#10@@5| |nchildren#2@@36|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@1 |children#2@@36|) (IndexField |i#10@@5|))) null)))) :qid |MutableB.178:18| :skolemid |8843| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@1 |children#2@@36|) (IndexField |i#10@@5|)))) ))))))) (and (! (or %lbl%@67  (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@37| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@37| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (KMBtree.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@1 (|Seq#Take| (|Seq#FromArray| $Heap@1 |children#2@@37|) |nchildren#2@@37|) (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.height))))))))) :lblneg @67) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@38| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@38| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (KMBtree.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@1 (|Seq#Take| (|Seq#FromArray| $Heap@1 |children#2@@38|) |nchildren#2@@38|) (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.height)))))))) (and (! (or %lbl%@68  (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@39| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@39| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#11@@6| Int) ) (!  (=> (and (<= (LitInt 0) |i#11@@6|) (< |i#11@@6| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#11@@6|) (< |i#11@@6| |nchildren#2@@39|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@1 ($Unbox refType (MapType1Select (MapType0Select $Heap@1 |children#2@@39|) (IndexField |i#11@@6|)))) KMBtree.Node.repr) ($Box |node#0@@97|)))))) :qid |MutableB.180:18| :skolemid |8844| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@1 |children#2@@39|) (IndexField |i#11@@6|)))) )))))))) :lblneg @68) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@40| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@40| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#11@@7| Int) ) (!  (=> (and (<= (LitInt 0) |i#11@@7|) (< |i#11@@7| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#11@@7|) (< |i#11@@7| |nchildren#2@@40|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@1 ($Unbox refType (MapType1Select (MapType0Select $Heap@1 |children#2@@40|) (IndexField |i#11@@7|)))) KMBtree.Node.repr) ($Box |node#0@@97|)))))) :qid |MutableB.180:18| :skolemid |8844| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@1 |children#2@@40|) (IndexField |i#11@@7|)))) ))))))) (and (! (or %lbl%@69  (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@41| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@41| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#12@@4| Int) ) (!  (=> (and (<= (LitInt 0) |i#12@@4|) (< |i#12@@4| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#12@@4|) (< |i#12@@4| |nchildren#2@@41|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@1 ($Unbox refType (MapType1Select (MapType0Select $Heap@1 |children#2@@41|) (IndexField |i#12@@4|)))) KMBtree.Node.repr) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |8845| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@1 |children#2@@41|) (IndexField |i#12@@4|)))) )))))))) :lblneg @69) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@42| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@42| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#12@@5| Int) ) (!  (=> (and (<= (LitInt 0) |i#12@@5|) (< |i#12@@5| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#12@@5|) (< |i#12@@5| |nchildren#2@@42|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@1 ($Unbox refType (MapType1Select (MapType0Select $Heap@1 |children#2@@42|) (IndexField |i#12@@5|)))) KMBtree.Node.repr) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |8845| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@1 |children#2@@42|) (IndexField |i#12@@5|)))) ))))))) (and (! (or %lbl%@70  (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@43| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@43| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#13@@7| Int) ) (!  (=> (and (<= (LitInt 0) |i#13@@7|) (< |i#13@@7| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#13@@7|) (< |i#13@@7| |nchildren#2@@43|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@1 |children#2@@43|) (IndexField |i#13@@7|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@1 |children#2@@43|) |nchildren#2@@43|) |i#13@@7|))))) :qid |MutableB.182:24| :skolemid |8846| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@1 |children#2@@43|) |nchildren#2@@43|) |i#13@@7|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@1 |children#2@@43|) (IndexField |i#13@@7|)))) )) (U_2_bool (Lit (bool_2_U true)))))))))) :lblneg @70) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@44| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@44| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#13@@8| Int) ) (!  (=> (and (<= (LitInt 0) |i#13@@8|) (< |i#13@@8| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#13@@8|) (< |i#13@@8| |nchildren#2@@44|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@1 |children#2@@44|) (IndexField |i#13@@8|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@1 |children#2@@44|) |nchildren#2@@44|) |i#13@@8|))))) :qid |MutableB.182:24| :skolemid |8846| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@1 |children#2@@44|) |nchildren#2@@44|) |i#13@@8|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@1 |children#2@@44|) (IndexField |i#13@@8|)))) )) (U_2_bool (Lit (bool_2_U true))))))))) (and (! (or %lbl%@71  (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@45| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@45| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#13@@9| Int) ) (!  (=> (and (<= (LitInt 0) |i#13@@9|) (< |i#13@@9| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#13@@9|) (< |i#13@@9| |nchildren#2@@45|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@1 |children#2@@45|) (IndexField |i#13@@9|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@1 |children#2@@45|) |nchildren#2@@45|) |i#13@@9|))))) :qid |MutableB.182:24| :skolemid |8846| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@1 |children#2@@45|) |nchildren#2@@45|) |i#13@@9|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@1 |children#2@@45|) (IndexField |i#13@@9|)))) )) (forall ((|i#14@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#14@@3|) (< |i#14@@3| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#14@@3|) (< |i#14@@3| |nchildren#2@@45|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@1 ($Unbox refType (MapType1Select (MapType0Select $Heap@1 |children#2@@45|) (IndexField |i#14@@3|)))) KMBtree.Node.repr) ($Box |children#2@@45|)))))) :qid |MutableB.183:18| :skolemid |8847| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@1 |children#2@@45|) (IndexField |i#14@@3|)))) ))))))))) :lblneg @71) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@1 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@1 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@46| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@46| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#13@@10| Int) ) (!  (=> (and (<= (LitInt 0) |i#13@@10|) (< |i#13@@10| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#13@@10|) (< |i#13@@10| |nchildren#2@@46|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@1 |children#2@@46|) (IndexField |i#13@@10|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@1 |children#2@@46|) |nchildren#2@@46|) |i#13@@10|))))) :qid |MutableB.182:24| :skolemid |8846| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@1 |children#2@@46|) |nchildren#2@@46|) |i#13@@10|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@1 |children#2@@46|) (IndexField |i#13@@10|)))) )) (forall ((|i#14@@4| Int) ) (!  (=> (and (<= (LitInt 0) |i#14@@4|) (< |i#14@@4| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#14@@4|) (< |i#14@@4| |nchildren#2@@46|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@1 ($Unbox refType (MapType1Select (MapType0Select $Heap@1 |children#2@@46|) (IndexField |i#14@@4|)))) KMBtree.Node.repr) ($Box |children#2@@46|)))))) :qid |MutableB.183:18| :skolemid |8847| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@1 |children#2@@46|) (IndexField |i#14@@4|)))) )))))))) (and (! (or %lbl%@72 (KMBtree.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) :lblneg @72) (=> (KMBtree.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)) (and (! (or %lbl%@73 (< 1 (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) :lblneg @73) (=> (< 1 (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (and (! (or %lbl%@74 (<= (LitInt 0) |nleft#0|)) :lblneg @74) (=> (<= (LitInt 0) |nleft#0|) (and (! (or %lbl%@75 (<= |nleft#0| |to##1@0|)) :lblneg @75) (=> (<= |nleft#0| |to##1@0|) (and (! (or %lbl%@76 (<= |to##1@0| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents)))) :lblneg @76) (=> (<= |to##1@0| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@1 |node#0@@97|) KMBtree.Node.contents))) (=> (and (and (and (and (and (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (|KMBtree.__default.SubRepr#canCall| $Heap@2 |node#0@@97| |nleft#0| |to##1@0|)) (and (|Set#Subset| (KMBtree.__default.SubRepr $Heap@2 |node#0@@97| |nleft#0| |to##1@0|) (|Set#Difference| (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))))) (=> (< (- |to##1@0| |nleft#0|) (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (|KMBtree.__default.SubRepr#canCall| $Heap@2 |node#0@@97| |nleft#0| |to##1@0|)))) (and (and (=> (< (- |to##1@0| |nleft#0|) (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (and (|Set#Subset| (KMBtree.__default.SubRepr $Heap@2 |node#0@@97| |nleft#0| |to##1@0|) (|Set#Difference| (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))))) (not (|Set#Subset| (|Set#Difference| (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))))) (KMBtree.__default.SubRepr $Heap@2 |node#0@@97| |nleft#0| |to##1@0|))))) (= $Heap@1 $Heap@2)) (and ($IsAlloc |node#0@@97| Tclass.KMBtree.Node $Heap@2) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (|Set#Equal| (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))))))))))) (and (and (and (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))))))) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (= (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.height)) (LitInt 0)))))) (and (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (<= (LitInt 0) (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))))) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (<= (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (LitInt KMBtree.__default.MaxKeysPerLeaf))))))) (and (and (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (= (LitInt KMBtree.__default.MaxKeysPerLeaf) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))))))) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (= (_System.array.Length (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))))))) (and (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true)))))) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true)))))))))) (and (and (and (and (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#9| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) ($Box |children#9|)) (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.repr)))))) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#9| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (< 0 |nchildren#9|)))))) (and (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#9@@0| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (<= |nchildren#9@@0| (LitInt KMBtree.__default.MaxChildren)))))) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#9@@0| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (= (LitInt KMBtree.__default.MaxChildren) (_System.array.Length |children#9@@0|)))))))) (and (and (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (= (_System.array.Length (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (LitInt (- KMBtree.__default.MaxChildren 1)))))) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#9@@1| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#9@@1| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#53| Int) ) (!  (=> (and (<= (LitInt 0) |i#53|) (< |i#53| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#53|) (< |i#53| |nchildren#9@@1|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#9@@1|) (IndexField |i#53|))) null)))) :qid |MutableB.178:18| :skolemid |9331| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#9@@1|) (IndexField |i#53|)))) )))))))) (and (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#9@@2| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#9@@2| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (KMBtree.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@2 (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#9@@2|) |nchildren#9@@2|) (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.height)))))))) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#9@@3| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#9@@3| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#54| Int) ) (!  (=> (and (<= (LitInt 0) |i#54|) (< |i#54| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#54|) (< |i#54| |nchildren#9@@3|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#9@@3|) (IndexField |i#54|)))) KMBtree.Node.repr) ($Box |node#0@@97|)))))) :qid |MutableB.180:18| :skolemid |9332| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#9@@3|) (IndexField |i#54|)))) )))))))))) (and (and (and (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#9@@4| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#9@@4| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#55| Int) ) (!  (=> (and (<= (LitInt 0) |i#55|) (< |i#55| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#55|) (< |i#55| |nchildren#9@@4|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#9@@4|) (IndexField |i#55|)))) KMBtree.Node.repr) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |9333| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#9@@4|) (IndexField |i#55|)))) ))))))) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#9@@5| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#9@@5| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#56| Int) ) (!  (=> (and (<= (LitInt 0) |i#56|) (< |i#56| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#56|) (< |i#56| |nchildren#9@@5|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#9@@5|) (IndexField |i#56|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#9@@5|) |nchildren#9@@5|) |i#56|))))) :qid |MutableB.182:24| :skolemid |9334| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#9@@5|) |nchildren#9@@5|) |i#56|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#9@@5|) (IndexField |i#56|)))) )) (U_2_bool (Lit (bool_2_U true)))))))))) (and (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#9@@6| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#9@@6| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#56@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#56@@0|) (< |i#56@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#56@@0|) (< |i#56@@0| |nchildren#9@@6|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#9@@6|) (IndexField |i#56@@0|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#9@@6|) |nchildren#9@@6|) |i#56@@0|))))) :qid |MutableB.182:24| :skolemid |9334| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#9@@6|) |nchildren#9@@6|) |i#56@@0|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#9@@6|) (IndexField |i#56@@0|)))) )) (forall ((|i#57| Int) ) (!  (=> (and (<= (LitInt 0) |i#57|) (< |i#57| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#57|) (< |i#57| |nchildren#9@@6|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#9@@6|) (IndexField |i#57|)))) KMBtree.Node.repr) ($Box |children#9@@6|)))))) :qid |MutableB.183:18| :skolemid |9335| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#9@@6|) (IndexField |i#57|)))) )))))))) (|KMBtree.__default.I#canCall| $Heap@2 |node#0@@97|))) (and (and (= |##node#7@0| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) ($IsAlloc |##node#7@0| Tclass.KMBtreeModel.Node $Heap@2)) (and (= |##i#0@0| (- |nleft#0| 1)) ($IsAlloc (int_2_U |##i#0@0|) TInt $Heap@2)))))) (and (! (or %lbl%@77 (KMBtreeModel.Node.Index_q |##node#7@0|)) :lblneg @77) (and (! (or %lbl%@78 (<= (LitInt 0) |##i#0@0|)) :lblneg @78) (and (! (or %lbl%@79 (< |##i#0@0| (- (|Seq#Length| (KMBtreeModel.Node.children |##node#7@0|)) 1))) :lblneg @79) (and (! (or %lbl%@80 (<= (LitInt 0) |##i#0@0|)) :lblneg @80) (and (! (or %lbl%@81 (< |##i#0@0| (|Seq#Length| (KMBtreeModel.Node.pivots |##node#7@0|)))) :lblneg @81) (=> (|KMBtreeModel.__default.AllKeysBelowBound#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|) (- |nleft#0| 1)) (=> (and (and (|KMBtree.__default.I#canCall| $Heap@2 |node#0@@97|) (|KMBtreeModel.__default.AllKeysBelowBound#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|) (- |nleft#0| 1))) (and (KMBtreeModel.__default.AllKeysBelowBound (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|) (- |nleft#0| 1)) ($IsAlloc |node#0@@97| Tclass.KMBtree.Node $Heap@2))) (=> (and (and (and (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (|Set#Equal| (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))))))) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))))))) (and (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (= (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.height)) (LitInt 0))))) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (<= (LitInt 0) (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))))))) (and (and (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (<= (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (LitInt KMBtree.__default.MaxKeysPerLeaf))))) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (= (LitInt KMBtree.__default.MaxKeysPerLeaf) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))))))) (and (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (= (_System.array.Length (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))))))) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))))) (=> (and (and (and (and (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true)))))) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#10| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) ($Box |children#10|)) (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.repr))))))) (and (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#10| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (< 0 |nchildren#10|))))) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#10@@0| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (<= |nchildren#10@@0| (LitInt KMBtree.__default.MaxChildren)))))))) (and (and (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#10@@0| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (= (LitInt KMBtree.__default.MaxChildren) (_System.array.Length |children#10@@0|)))))) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (= (_System.array.Length (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (LitInt (- KMBtree.__default.MaxChildren 1))))))) (and (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#10@@1| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#10@@1| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#58| Int) ) (!  (=> (and (<= (LitInt 0) |i#58|) (< |i#58| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#58|) (< |i#58| |nchildren#10@@1|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#10@@1|) (IndexField |i#58|))) null)))) :qid |MutableB.178:18| :skolemid |9340| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#10@@1|) (IndexField |i#58|)))) ))))))) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#10@@2| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#10@@2| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (KMBtree.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@2 (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#10@@2|) |nchildren#10@@2|) (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.height))))))))))) (and (and (and (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#10@@3| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#10@@3| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#59| Int) ) (!  (=> (and (<= (LitInt 0) |i#59|) (< |i#59| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#59|) (< |i#59| |nchildren#10@@3|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#10@@3|) (IndexField |i#59|)))) KMBtree.Node.repr) ($Box |node#0@@97|)))))) :qid |MutableB.180:18| :skolemid |9341| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#10@@3|) (IndexField |i#59|)))) ))))))) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#10@@4| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#10@@4| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#60| Int) ) (!  (=> (and (<= (LitInt 0) |i#60|) (< |i#60| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#60|) (< |i#60| |nchildren#10@@4|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#10@@4|) (IndexField |i#60|)))) KMBtree.Node.repr) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |9342| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#10@@4|) (IndexField |i#60|)))) )))))))) (and (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#10@@5| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#10@@5| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#61| Int) ) (!  (=> (and (<= (LitInt 0) |i#61|) (< |i#61| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#61|) (< |i#61| |nchildren#10@@5|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#10@@5|) (IndexField |i#61|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#10@@5|) |nchildren#10@@5|) |i#61|))))) :qid |MutableB.182:24| :skolemid |9343| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#10@@5|) |nchildren#10@@5|) |i#61|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#10@@5|) (IndexField |i#61|)))) )) (U_2_bool (Lit (bool_2_U true))))))))) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#10@@6| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#10@@6| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#61@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#61@@0|) (< |i#61@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#61@@0|) (< |i#61@@0| |nchildren#10@@6|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#10@@6|) (IndexField |i#61@@0|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#10@@6|) |nchildren#10@@6|) |i#61@@0|))))) :qid |MutableB.182:24| :skolemid |9343| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#10@@6|) |nchildren#10@@6|) |i#61@@0|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#10@@6|) (IndexField |i#61@@0|)))) )) (forall ((|i#62| Int) ) (!  (=> (and (<= (LitInt 0) |i#62|) (< |i#62| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#62|) (< |i#62| |nchildren#10@@6|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#10@@6|) (IndexField |i#62|)))) KMBtree.Node.repr) ($Box |children#10@@6|)))))) :qid |MutableB.183:18| :skolemid |9344| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#10@@6|) (IndexField |i#62|)))) )))))))))) (and (and (|KMBtree.__default.I#canCall| $Heap@2 |node#0@@97|) (= |##node#9@0| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|))) (and ($IsAlloc |##node#9@0| Tclass.KMBtreeModel.Node $Heap@2) ($IsAlloc (int_2_U |nleft#0|) TInt $Heap@2))))) (and (! (or %lbl%@82 (KMBtreeModel.Node.Index_q |##node#9@0|)) :lblneg @82) (and (! (or %lbl%@83 (<= (LitInt 0) |nleft#0|)) :lblneg @83) (and (! (or %lbl%@84 (< |nleft#0| (|Seq#Length| (KMBtreeModel.Node.children |##node#9@0|)))) :lblneg @84) (and (! (or %lbl%@85 (<= (LitInt 0) (- |nleft#0| 1))) :lblneg @85) (and (! (or %lbl%@86 (< (- |nleft#0| 1) (|Seq#Length| (KMBtreeModel.Node.pivots |##node#9@0|)))) :lblneg @86) (=> (|KMBtreeModel.__default.AllKeysAboveBound#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|) |nleft#0|) (=> (and (and (and (and (|KMBtree.__default.I#canCall| $Heap@2 |node#0@@97|) (|KMBtreeModel.__default.AllKeysAboveBound#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|) |nleft#0|)) (KMBtreeModel.__default.AllKeysAboveBound (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|) |nleft#0|)) (and (not (= |node#0@@97| null)) (KMBtree.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (and (and (= |to##2@0| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (forall (($o@@136 T@U) ($f@@86 T@U) ) (! (let ((alpha@@93 (FieldTypeInv0 (type $f@@86)))) (=> (and (and (= (type $o@@136) refType) (= (type $f@@86) (FieldType alpha@@93))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@136 $f@@86)))) :qid |MutableB.728:22| :skolemid |9349| :no-pattern (type $o@@136) :no-pattern (type $f@@86) :no-pattern (U_2_int $o@@136) :no-pattern (U_2_bool $o@@136) :no-pattern (U_2_int $f@@86) :no-pattern (U_2_bool $f@@86) ))) (and ($Is |call5formal@subnode#0| Tclass.KMBtree.Node) ($IsAlloc |call5formal@subnode#0| Tclass.KMBtree.Node $Heap@@125)))) (and (! (or %lbl%@87  (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (|Set#Equal| (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))))))))))) :lblneg @87) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (|Set#Equal| (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))))))))) (and (! (or %lbl%@88  (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))))))))) :lblneg @88) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))))))))) (and (! (or %lbl%@89  (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (= (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.height)) (LitInt 0)))))))) :lblneg @89) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (= (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.height)) (LitInt 0))))))) (and (! (or %lbl%@90  (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (<= (LitInt 0) (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))))))))) :lblneg @90) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (<= (LitInt 0) (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))))))) (and (! (or %lbl%@91  (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (<= (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (LitInt KMBtree.__default.MaxKeysPerLeaf)))))))) :lblneg @91) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (<= (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (LitInt KMBtree.__default.MaxKeysPerLeaf))))))) (and (! (or %lbl%@92  (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (= (LitInt KMBtree.__default.MaxKeysPerLeaf) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))))))))) :lblneg @92) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (= (LitInt KMBtree.__default.MaxKeysPerLeaf) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))))))))) (and (! (or %lbl%@93  (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (= (_System.array.Length (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))))))))) :lblneg @93) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (= (_System.array.Length (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))))))))) (and (! (or %lbl%@94  (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))))) :lblneg @94) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true)))))))) (and (! (or %lbl%@95  (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))))) :lblneg @95) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true)))))))) (and (! (or %lbl%@96  (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#3| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) ($Box |children#3|)) (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.repr))))))))) :lblneg @96) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#3@@0| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) ($Box |children#3@@0|)) (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.repr)))))))) (and (! (or %lbl%@97  (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (< 0 |nchildren#3|)))))))) :lblneg @97) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3@@0| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (< 0 |nchildren#3@@0|))))))) (and (! (or %lbl%@98  (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3@@1| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (<= |nchildren#3@@1| (LitInt KMBtree.__default.MaxChildren))))))))) :lblneg @98) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3@@2| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (<= |nchildren#3@@2| (LitInt KMBtree.__default.MaxChildren)))))))) (and (! (or %lbl%@99  (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#3@@1| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (= (LitInt KMBtree.__default.MaxChildren) (_System.array.Length |children#3@@1|))))))))) :lblneg @99) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#3@@2| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (= (LitInt KMBtree.__default.MaxChildren) (_System.array.Length |children#3@@2|)))))))) (and (! (or %lbl%@100  (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (= (_System.array.Length (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (LitInt (- KMBtree.__default.MaxChildren 1))))))))) :lblneg @100) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (= (_System.array.Length (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (LitInt (- KMBtree.__default.MaxChildren 1)))))))) (and (! (or %lbl%@101  (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3@@3| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#3@@3| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#15| Int) ) (!  (=> (and (<= (LitInt 0) |i#15|) (< |i#15| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#15|) (< |i#15| |nchildren#3@@3|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#3@@3|) (IndexField |i#15|))) null)))) :qid |MutableB.178:18| :skolemid |9116| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#3@@3|) (IndexField |i#15|)))) )))))))))) :lblneg @101) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3@@4| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#3@@4| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#15@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#15@@0|) (< |i#15@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#15@@0|) (< |i#15@@0| |nchildren#3@@4|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#3@@4|) (IndexField |i#15@@0|))) null)))) :qid |MutableB.178:18| :skolemid |9116| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#3@@4|) (IndexField |i#15@@0|)))) ))))))))) (and (! (or %lbl%@102  (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3@@5| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#3@@5| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (KMBtree.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@2 (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#3@@5|) |nchildren#3@@5|) (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.height))))))))))) :lblneg @102) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3@@6| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#3@@6| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (KMBtree.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@2 (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#3@@6|) |nchildren#3@@6|) (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.height)))))))))) (and (! (or %lbl%@103  (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3@@7| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#3@@7| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#16@@4| Int) ) (!  (=> (and (<= (LitInt 0) |i#16@@4|) (< |i#16@@4| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#16@@4|) (< |i#16@@4| |nchildren#3@@7|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#3@@7|) (IndexField |i#16@@4|)))) KMBtree.Node.repr) ($Box |node#0@@97|)))))) :qid |MutableB.180:18| :skolemid |9117| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#3@@7|) (IndexField |i#16@@4|)))) )))))))))) :lblneg @103) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3@@8| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#3@@8| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#16@@5| Int) ) (!  (=> (and (<= (LitInt 0) |i#16@@5|) (< |i#16@@5| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#16@@5|) (< |i#16@@5| |nchildren#3@@8|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#3@@8|) (IndexField |i#16@@5|)))) KMBtree.Node.repr) ($Box |node#0@@97|)))))) :qid |MutableB.180:18| :skolemid |9117| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#3@@8|) (IndexField |i#16@@5|)))) ))))))))) (and (! (or %lbl%@104  (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3@@9| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#3@@9| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#17@@5| Int) ) (!  (=> (and (<= (LitInt 0) |i#17@@5|) (< |i#17@@5| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#17@@5|) (< |i#17@@5| |nchildren#3@@9|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#3@@9|) (IndexField |i#17@@5|)))) KMBtree.Node.repr) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |9118| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#3@@9|) (IndexField |i#17@@5|)))) )))))))))) :lblneg @104) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3@@10| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#3@@10| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#17@@6| Int) ) (!  (=> (and (<= (LitInt 0) |i#17@@6|) (< |i#17@@6| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#17@@6|) (< |i#17@@6| |nchildren#3@@10|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#3@@10|) (IndexField |i#17@@6|)))) KMBtree.Node.repr) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |9118| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#3@@10|) (IndexField |i#17@@6|)))) ))))))))) (and (! (or %lbl%@105  (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3@@11| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#3@@11| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#18@@5| Int) ) (!  (=> (and (<= (LitInt 0) |i#18@@5|) (< |i#18@@5| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#18@@5|) (< |i#18@@5| |nchildren#3@@11|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#3@@11|) (IndexField |i#18@@5|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#3@@11|) |nchildren#3@@11|) |i#18@@5|))))) :qid |MutableB.182:24| :skolemid |9119| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#3@@11|) |nchildren#3@@11|) |i#18@@5|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#3@@11|) (IndexField |i#18@@5|)))) )) (U_2_bool (Lit (bool_2_U true)))))))))))) :lblneg @105) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3@@12| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#3@@12| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#18@@6| Int) ) (!  (=> (and (<= (LitInt 0) |i#18@@6|) (< |i#18@@6| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#18@@6|) (< |i#18@@6| |nchildren#3@@12|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#3@@12|) (IndexField |i#18@@6|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#3@@12|) |nchildren#3@@12|) |i#18@@6|))))) :qid |MutableB.182:24| :skolemid |9119| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#3@@12|) |nchildren#3@@12|) |i#18@@6|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#3@@12|) (IndexField |i#18@@6|)))) )) (U_2_bool (Lit (bool_2_U true))))))))))) (and (! (or %lbl%@106  (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3@@13| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#3@@13| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#18@@7| Int) ) (!  (=> (and (<= (LitInt 0) |i#18@@7|) (< |i#18@@7| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#18@@7|) (< |i#18@@7| |nchildren#3@@13|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#3@@13|) (IndexField |i#18@@7|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#3@@13|) |nchildren#3@@13|) |i#18@@7|))))) :qid |MutableB.182:24| :skolemid |9119| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#3@@13|) |nchildren#3@@13|) |i#18@@7|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#3@@13|) (IndexField |i#18@@7|)))) )) (forall ((|i#19@@5| Int) ) (!  (=> (and (<= (LitInt 0) |i#19@@5|) (< |i#19@@5| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#19@@5|) (< |i#19@@5| |nchildren#3@@13|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#3@@13|) (IndexField |i#19@@5|)))) KMBtree.Node.repr) ($Box |children#3@@13|)))))) :qid |MutableB.183:18| :skolemid |9120| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#3@@13|) (IndexField |i#19@@5|)))) ))))))))))) :lblneg @106) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3@@14| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#3@@14| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#18@@8| Int) ) (!  (=> (and (<= (LitInt 0) |i#18@@8|) (< |i#18@@8| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#18@@8|) (< |i#18@@8| |nchildren#3@@14|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#3@@14|) (IndexField |i#18@@8|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#3@@14|) |nchildren#3@@14|) |i#18@@8|))))) :qid |MutableB.182:24| :skolemid |9119| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#3@@14|) |nchildren#3@@14|) |i#18@@8|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#3@@14|) (IndexField |i#18@@8|)))) )) (forall ((|i#19@@6| Int) ) (!  (=> (and (<= (LitInt 0) |i#19@@6|) (< |i#19@@6| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#19@@6|) (< |i#19@@6| |nchildren#3@@14|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#3@@14|) (IndexField |i#19@@6|)))) KMBtree.Node.repr) ($Box |children#3@@14|)))))) :qid |MutableB.183:18| :skolemid |9120| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#3@@14|) (IndexField |i#19@@6|)))) )))))))))) (and (! (or %lbl%@107  (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (=> (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (= (|Seq#Length| (KMBtreeModel.Node.keys (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|))) (|Seq#Length| (KMBtreeModel.Node.values (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|)))))))))) :lblneg @107) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (=> (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (= (|Seq#Length| (KMBtreeModel.Node.keys (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|))) (|Seq#Length| (KMBtreeModel.Node.values (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|))))))))) (and (! (or %lbl%@108  (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (=> (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (KMBtreeModel.Node.keys (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|))))))))) :lblneg @108) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (=> (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (KMBtreeModel.Node.keys (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|)))))))) (and (! (or %lbl%@109  (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (=> (not (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|))) (= (|Seq#Length| (KMBtreeModel.Node.pivots (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|))) (- (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|))) 1)))))))) :lblneg @109) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (=> (not (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|))) (= (|Seq#Length| (KMBtreeModel.Node.pivots (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|))) (- (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|))) 1))))))) (and (! (or %lbl%@110  (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (=> (not (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (KMBtreeModel.Node.pivots (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|))))))))) :lblneg @110) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (=> (not (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (KMBtreeModel.Node.pivots (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|)))))))) (and (! (or %lbl%@111  (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (=> (not (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|))) (forall ((|i#20@@5| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#20@@5|) (< |i#20@@5| (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|))))) (KMBtreeModel.__default.WF ($LS ($LS $LZ)) ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|)) |i#20@@5|))))) :qid |BtreeMod.71:18| :skolemid |9125| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|)) |i#20@@5|))) )))))))) :lblneg @111) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (=> (not (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|))) (forall ((|i#20@@6| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#20@@6|) (< |i#20@@6| (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|))))) (KMBtreeModel.__default.WF ($LS ($LS $LZ)) ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|)) |i#20@@6|))))) :qid |BtreeMod.71:18| :skolemid |9125| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|)) |i#20@@6|))) ))))))) (and (! (or %lbl%@112  (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (=> (not (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|))) (forall ((|i#21@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#21@@4|) (< |i#21@@4| (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|))))) (not (|Set#Equal| (KMBtreeModel.__default.AllKeys StartFuelAssert_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|)) |i#21@@4|))) (|Set#Empty| BoxType))))) :qid |BtreeMod.72:18| :skolemid |9127| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|)) |i#21@@4|))) )))))))) :lblneg @112) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (=> (not (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|))) (forall ((|i#21@@5| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#21@@5|) (< |i#21@@5| (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|))))) (not (|Set#Equal| (KMBtreeModel.__default.AllKeys StartFuelAssert_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|)) |i#21@@5|))) (|Set#Empty| BoxType))))) :qid |BtreeMod.72:18| :skolemid |9127| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|)) |i#21@@5|))) ))))))) (and (! (or %lbl%@113  (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (=> (not (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|))) (forall ((|i#22@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#22@@4|) (< |i#22@@4| (- (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|))) 1))) (KMBtreeModel.__default.AllKeysBelowBound (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|) |i#22@@4|))) :qid |BtreeMod.73:18| :skolemid |9129| :pattern ( (KMBtreeModel.__default.AllKeysBelowBound (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|) |i#22@@4|)) )))))))) :lblneg @113) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (=> (not (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|))) (forall ((|i#22@@5| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#22@@5|) (< |i#22@@5| (- (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|))) 1))) (KMBtreeModel.__default.AllKeysBelowBound (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|) |i#22@@5|))) :qid |BtreeMod.73:18| :skolemid |9129| :pattern ( (KMBtreeModel.__default.AllKeysBelowBound (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|) |i#22@@5|)) ))))))) (and (! (or %lbl%@114  (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (=> (not (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|))) (forall ((|i#23@@2| Int) ) (!  (=> true (=> (and (< 0 |i#23@@2|) (< |i#23@@2| (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|))))) (KMBtreeModel.__default.AllKeysAboveBound (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|) |i#23@@2|))) :qid |BtreeMod.74:18| :skolemid |9131| :pattern ( (KMBtreeModel.__default.AllKeysAboveBound (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|) |i#23@@2|)) )))))))) :lblneg @114) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@2 |node#0@@97|) (or (KMBtree.__default.WF $Heap@2 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|)) (=> (not (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@2 |node#0@@97|))) (forall ((|i#23@@3| Int) ) (!  (=> true (=> (and (< 0 |i#23@@3|) (< |i#23@@3| (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|))))) (KMBtreeModel.__default.AllKeysAboveBound (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|) |i#23@@3|))) :qid |BtreeMod.74:18| :skolemid |9131| :pattern ( (KMBtreeModel.__default.AllKeysAboveBound (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@2 |node#0@@97|) |i#23@@3|)) ))))))) (and (! (or %lbl%@115 (KMBtree.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) :lblneg @115) (=> (KMBtree.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)) (and (! (or %lbl%@116 (< 1 (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) :lblneg @116) (=> (< 1 (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (and (! (or %lbl%@117 (<= (LitInt 0) |nleft#0|)) :lblneg @117) (=> (<= (LitInt 0) |nleft#0|) (and (! (or %lbl%@118 (< |nleft#0| |to##2@0|)) :lblneg @118) (=> (< |nleft#0| |to##2@0|) (and (! (or %lbl%@119 (<= |to##2@0| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents)))) :lblneg @119) (=> (<= |to##2@0| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@97|) KMBtree.Node.contents))) (=> (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (=> (and (and (and (and ($Is |call5formal@subnode#0@0| Tclass.KMBtree.Node) ($IsAlloc |call5formal@subnode#0@0| Tclass.KMBtree.Node $Heap@3)) (|KMBtree.__default.WFShape#canCall| $Heap@3 |call5formal@subnode#0@0|)) (and (|KMBtree.__default.WFShape#canCall| $Heap@3 |call5formal@subnode#0@0|) (and (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |call5formal@subnode#0@0|) (ite (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |call5formal@subnode#0@0|) KMBtree.Node.contents))  (and (and (and (and (|Set#Equal| (MapType1Select (MapType0Select $Heap@3 |call5formal@subnode#0@0|) KMBtree.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |call5formal@subnode#0@0|)) ($Box (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@3 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@3 |call5formal@subnode#0@0|) KMBtree.Node.contents))))) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@3 |call5formal@subnode#0@0|) KMBtree.Node.contents)) (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@3 |call5formal@subnode#0@0|) KMBtree.Node.contents))))) (= (U_2_int (MapType1Select (MapType0Select $Heap@3 |call5formal@subnode#0@0|) KMBtree.Node.height)) (LitInt 0))) (and (and (<= (LitInt 0) (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@3 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (<= (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@3 |call5formal@subnode#0@0|) KMBtree.Node.contents)) (LitInt KMBtree.__default.MaxKeysPerLeaf))) (= (LitInt KMBtree.__default.MaxKeysPerLeaf) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@3 |call5formal@subnode#0@0|) KMBtree.Node.contents)))))) (= (_System.array.Length (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@3 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@3 |call5formal@subnode#0@0|) KMBtree.Node.contents)))))  (and true (let ((|nchildren#4| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@3 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (and true (let ((|children#4| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@3 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (and (and (and (and (and (and (and (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |call5formal@subnode#0@0|)) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@3 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) ($Box |children#4|)) (MapType1Select (MapType0Select $Heap@3 |call5formal@subnode#0@0|) KMBtree.Node.repr)) (and (and (< 0 |nchildren#4|) (<= |nchildren#4| (LitInt KMBtree.__default.MaxChildren))) (= (LitInt KMBtree.__default.MaxChildren) (_System.array.Length |children#4|)))) (= (_System.array.Length (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@3 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (LitInt (- KMBtree.__default.MaxChildren 1)))) (forall ((|i#24| Int) ) (!  (=> (and (<= (LitInt 0) |i#24|) (< |i#24| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#24|) (< |i#24| |nchildren#4|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#4|) (IndexField |i#24|))) null)))) :qid |MutableB.178:18| :skolemid |9142| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#4|) (IndexField |i#24|)))) ))) (KMBtree.__default.WFShapeChildren ($LS $LZ) $Heap@3 (|Seq#Take| (|Seq#FromArray| $Heap@3 |children#4|) |nchildren#4|) (MapType1Select (MapType0Select $Heap@3 |call5formal@subnode#0@0|) KMBtree.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@3 |call5formal@subnode#0@0|) KMBtree.Node.height)))) (forall ((|i#25| Int) ) (!  (=> (and (<= (LitInt 0) |i#25|) (< |i#25| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#25|) (< |i#25| |nchildren#4|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@3 ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#4|) (IndexField |i#25|)))) KMBtree.Node.repr) ($Box |call5formal@subnode#0@0|)))))) :qid |MutableB.180:18| :skolemid |9143| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#4|) (IndexField |i#25|)))) ))) (forall ((|i#26| Int) ) (!  (=> (and (<= (LitInt 0) |i#26|) (< |i#26| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#26|) (< |i#26| |nchildren#4|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@3 ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#4|) (IndexField |i#26|)))) KMBtree.Node.repr) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@3 |call5formal@subnode#0@0|) KMBtree.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |9144| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#4|) (IndexField |i#26|)))) ))) (and true (forall ((|i#28| Int) ) (!  (=> (and (<= (LitInt 0) |i#28|) (< |i#28| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#28|) (< |i#28| |nchildren#4|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@3 ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#4|) (IndexField |i#28|)))) KMBtree.Node.repr) ($Box |children#4|)))))) :qid |MutableB.183:18| :skolemid |9145| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#4|) (IndexField |i#28|)))) )))))))))))) (and (and (KMBtree.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@3 |call5formal@subnode#0@0|) KMBtree.Node.contents)) (|KMBtree.__default.SubRepr#canCall| $Heap@3 |node#0@@97| |nleft#0| |to##2@0|)) (and (|Set#Equal| (MapType1Select (MapType0Select $Heap@3 |call5formal@subnode#0@0|) KMBtree.Node.repr) (|Set#Union| (KMBtree.__default.SubRepr $Heap@3 |node#0@@97| |nleft#0| |to##2@0|) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |call5formal@subnode#0@0|)) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@3 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@3 |call5formal@subnode#0@0|) KMBtree.Node.contents)))))) (= (U_2_int (MapType1Select (MapType0Select $Heap@3 |call5formal@subnode#0@0|) KMBtree.Node.height)) (U_2_int (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.height)))))) (=> (and (and (and (and (and (and (|$IsA#KMBtreeModel.Node| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@3 |call5formal@subnode#0@0|)) (|$IsA#KMBtreeModel.Node| (KMBtreeModel.__default.SubIndex (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@3 |node#0@@97|) |nleft#0| |to##2@0|))) (and (|KMBtree.__default.I#canCall| $Heap@3 |call5formal@subnode#0@0|) (and (|KMBtree.__default.I#canCall| $Heap@3 |node#0@@97|) (|KMBtreeModel.__default.SubIndex#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@3 |node#0@@97|) |nleft#0| |to##2@0|)))) (|KMBtreeModel.Node#Equal| (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@3 |call5formal@subnode#0@0|) (KMBtreeModel.__default.SubIndex (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@3 |node#0@@97|) |nleft#0| |to##2@0|))) (and (and (not (= |call5formal@subnode#0@0| null)) (not (U_2_bool (MapType1Select (MapType0Select $Heap@2 |call5formal@subnode#0@0|) alloc)))) (and (not (= (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@3 |call5formal@subnode#0@0|) KMBtree.Node.contents)) null)) (not (U_2_bool (MapType1Select (MapType0Select $Heap@2 (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@3 |call5formal@subnode#0@0|) KMBtree.Node.contents))) alloc)))))) (and (and (and (not (= (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@3 |call5formal@subnode#0@0|) KMBtree.Node.contents)) null)) (not (U_2_bool (MapType1Select (MapType0Select $Heap@2 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@3 |call5formal@subnode#0@0|) KMBtree.Node.contents))) alloc)))) (and (forall (($o@@137 T@U) ) (!  (=> (= (type $o@@137) refType) (=> (and (not (= $o@@137 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@2 $o@@137) alloc))) (= (MapType0Select $Heap@3 $o@@137) (MapType0Select $Heap@2 $o@@137)))) :qid |MutableB.669:10| :skolemid |9146| :pattern ( (MapType0Select $Heap@3 $o@@137)) )) ($HeapSucc $Heap@2 $Heap@3))) (and (and (not (= |node#0@@97| null)) (KMBtree.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (and (not (= (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)) null)) (= |newtype$check#4@0| (LitInt 1)))))) (and (and (and (and (<= (LitInt 0) |newtype$check#4@0|) (< |newtype$check#4@0| 18446744073709551616)) (= |newtype$check#5@0| (- |nleft#0| 1))) (and (<= (LitInt 0) |newtype$check#5@0|) (< |newtype$check#5@0| 18446744073709551616))) (and (and (and (<= 0 (- |nleft#0| 1)) (< (- |nleft#0| 1) (_System.array.Length (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))))) (= |pivot#0@0| ($Unbox (SeqType BoxType) (MapType1Select (MapType0Select $Heap@3 (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (IndexField (- |nleft#0| 1)))))) (and (= |childidx##0@0| (LitInt 0)) (forall (($o@@138 T@U) ($f@@87 T@U) ) (! (let ((alpha@@94 (FieldTypeInv0 (type $f@@87)))) (=> (and (and (= (type $o@@138) refType) (= (type $f@@87) (FieldType alpha@@94))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@138 $f@@87)))) :qid |MutableB.730:13| :skolemid |9350| :no-pattern (type $o@@138) :no-pattern (type $f@@87) :no-pattern (U_2_int $o@@138) :no-pattern (U_2_bool $o@@138) :no-pattern (U_2_int $f@@87) :no-pattern (U_2_bool $f@@87) )))))) (and (! (or %lbl%@120  (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)) (|Set#Equal| (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))))))))) :lblneg @120) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)) (|Set#Equal| (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))))))) (and (! (or %lbl%@121  (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)) (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))))))) :lblneg @121) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)) (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))))))) (and (! (or %lbl%@122  (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)) (= (U_2_int (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.height)) (LitInt 0)))))) :lblneg @122) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)) (= (U_2_int (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.height)) (LitInt 0))))) (and (! (or %lbl%@123  (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)) (<= (LitInt 0) (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))))))) :lblneg @123) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)) (<= (LitInt 0) (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))))) (and (! (or %lbl%@124  (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)) (<= (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)) (LitInt KMBtree.__default.MaxKeysPerLeaf)))))) :lblneg @124) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)) (<= (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)) (LitInt KMBtree.__default.MaxKeysPerLeaf))))) (and (! (or %lbl%@125  (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)) (= (LitInt KMBtree.__default.MaxKeysPerLeaf) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))))))) :lblneg @125) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)) (= (LitInt KMBtree.__default.MaxKeysPerLeaf) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))))))) (and (! (or %lbl%@126  (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)) (= (_System.array.Length (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))))))) :lblneg @126) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)) (= (_System.array.Length (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))))))) (and (! (or %lbl%@127  (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) :lblneg @127) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true)))))) (and (! (or %lbl%@128  (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) :lblneg @128) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true)))))) (and (! (or %lbl%@129  (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#2@@47| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) ($Box |children#2@@47|)) (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.repr))))))) :lblneg @129) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#2@@48| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) ($Box |children#2@@48|)) (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.repr)))))) (and (! (or %lbl%@130  (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@47| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (< 0 |nchildren#2@@47|)))))) :lblneg @130) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@48| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (< 0 |nchildren#2@@48|))))) (and (! (or %lbl%@131  (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@49| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (<= |nchildren#2@@49| (LitInt KMBtree.__default.MaxChildren))))))) :lblneg @131) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@50| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (<= |nchildren#2@@50| (LitInt KMBtree.__default.MaxChildren)))))) (and (! (or %lbl%@132  (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#2@@49| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (= (LitInt KMBtree.__default.MaxChildren) (_System.array.Length |children#2@@49|))))))) :lblneg @132) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#2@@50| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (= (LitInt KMBtree.__default.MaxChildren) (_System.array.Length |children#2@@50|)))))) (and (! (or %lbl%@133  (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (= (_System.array.Length (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (LitInt (- KMBtree.__default.MaxChildren 1))))))) :lblneg @133) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (= (_System.array.Length (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (LitInt (- KMBtree.__default.MaxChildren 1)))))) (and (! (or %lbl%@134  (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@51| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@51| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#10@@6| Int) ) (!  (=> (and (<= (LitInt 0) |i#10@@6|) (< |i#10@@6| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#10@@6|) (< |i#10@@6| |nchildren#2@@51|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#2@@51|) (IndexField |i#10@@6|))) null)))) :qid |MutableB.178:18| :skolemid |7570| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#2@@51|) (IndexField |i#10@@6|)))) )))))))) :lblneg @134) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@52| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@52| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#10@@7| Int) ) (!  (=> (and (<= (LitInt 0) |i#10@@7|) (< |i#10@@7| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#10@@7|) (< |i#10@@7| |nchildren#2@@52|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#2@@52|) (IndexField |i#10@@7|))) null)))) :qid |MutableB.178:18| :skolemid |7570| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#2@@52|) (IndexField |i#10@@7|)))) ))))))) (and (! (or %lbl%@135  (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@53| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@53| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (KMBtree.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@3 (|Seq#Take| (|Seq#FromArray| $Heap@3 |children#2@@53|) |nchildren#2@@53|) (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.height))))))))) :lblneg @135) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@54| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@54| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (KMBtree.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@3 (|Seq#Take| (|Seq#FromArray| $Heap@3 |children#2@@54|) |nchildren#2@@54|) (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.height)))))))) (and (! (or %lbl%@136  (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@55| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@55| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#11@@8| Int) ) (!  (=> (and (<= (LitInt 0) |i#11@@8|) (< |i#11@@8| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#11@@8|) (< |i#11@@8| |nchildren#2@@55|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@3 ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#2@@55|) (IndexField |i#11@@8|)))) KMBtree.Node.repr) ($Box |node#0@@97|)))))) :qid |MutableB.180:18| :skolemid |7571| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#2@@55|) (IndexField |i#11@@8|)))) )))))))) :lblneg @136) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@56| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@56| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#11@@9| Int) ) (!  (=> (and (<= (LitInt 0) |i#11@@9|) (< |i#11@@9| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#11@@9|) (< |i#11@@9| |nchildren#2@@56|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@3 ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#2@@56|) (IndexField |i#11@@9|)))) KMBtree.Node.repr) ($Box |node#0@@97|)))))) :qid |MutableB.180:18| :skolemid |7571| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#2@@56|) (IndexField |i#11@@9|)))) ))))))) (and (! (or %lbl%@137  (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@57| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@57| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#12@@6| Int) ) (!  (=> (and (<= (LitInt 0) |i#12@@6|) (< |i#12@@6| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#12@@6|) (< |i#12@@6| |nchildren#2@@57|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@3 ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#2@@57|) (IndexField |i#12@@6|)))) KMBtree.Node.repr) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |7572| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#2@@57|) (IndexField |i#12@@6|)))) )))))))) :lblneg @137) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@58| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@58| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#12@@7| Int) ) (!  (=> (and (<= (LitInt 0) |i#12@@7|) (< |i#12@@7| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#12@@7|) (< |i#12@@7| |nchildren#2@@58|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@3 ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#2@@58|) (IndexField |i#12@@7|)))) KMBtree.Node.repr) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |7572| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#2@@58|) (IndexField |i#12@@7|)))) ))))))) (and (! (or %lbl%@138  (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@59| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@59| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#13@@11| Int) ) (!  (=> (and (<= (LitInt 0) |i#13@@11|) (< |i#13@@11| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#13@@11|) (< |i#13@@11| |nchildren#2@@59|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#2@@59|) (IndexField |i#13@@11|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@3 |children#2@@59|) |nchildren#2@@59|) |i#13@@11|))))) :qid |MutableB.182:24| :skolemid |7573| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@3 |children#2@@59|) |nchildren#2@@59|) |i#13@@11|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#2@@59|) (IndexField |i#13@@11|)))) )) (U_2_bool (Lit (bool_2_U true)))))))))) :lblneg @138) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@60| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@60| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#13@@12| Int) ) (!  (=> (and (<= (LitInt 0) |i#13@@12|) (< |i#13@@12| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#13@@12|) (< |i#13@@12| |nchildren#2@@60|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#2@@60|) (IndexField |i#13@@12|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@3 |children#2@@60|) |nchildren#2@@60|) |i#13@@12|))))) :qid |MutableB.182:24| :skolemid |7573| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@3 |children#2@@60|) |nchildren#2@@60|) |i#13@@12|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#2@@60|) (IndexField |i#13@@12|)))) )) (U_2_bool (Lit (bool_2_U true))))))))) (and (! (or %lbl%@139  (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@61| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@61| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#13@@13| Int) ) (!  (=> (and (<= (LitInt 0) |i#13@@13|) (< |i#13@@13| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#13@@13|) (< |i#13@@13| |nchildren#2@@61|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#2@@61|) (IndexField |i#13@@13|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@3 |children#2@@61|) |nchildren#2@@61|) |i#13@@13|))))) :qid |MutableB.182:24| :skolemid |7573| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@3 |children#2@@61|) |nchildren#2@@61|) |i#13@@13|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#2@@61|) (IndexField |i#13@@13|)))) )) (forall ((|i#14@@5| Int) ) (!  (=> (and (<= (LitInt 0) |i#14@@5|) (< |i#14@@5| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#14@@5|) (< |i#14@@5| |nchildren#2@@61|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@3 ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#2@@61|) (IndexField |i#14@@5|)))) KMBtree.Node.repr) ($Box |children#2@@61|)))))) :qid |MutableB.183:18| :skolemid |7574| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#2@@61|) (IndexField |i#14@@5|)))) ))))))))) :lblneg @139) (=> (=> (|KMBtree.__default.WFShape#canCall| $Heap@3 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@3 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#2@@62| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#2@@62| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#13@@14| Int) ) (!  (=> (and (<= (LitInt 0) |i#13@@14|) (< |i#13@@14| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#13@@14|) (< |i#13@@14| |nchildren#2@@62|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#2@@62|) (IndexField |i#13@@14|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@3 |children#2@@62|) |nchildren#2@@62|) |i#13@@14|))))) :qid |MutableB.182:24| :skolemid |7573| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@3 |children#2@@62|) |nchildren#2@@62|) |i#13@@14|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#2@@62|) (IndexField |i#13@@14|)))) )) (forall ((|i#14@@6| Int) ) (!  (=> (and (<= (LitInt 0) |i#14@@6|) (< |i#14@@6| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#14@@6|) (< |i#14@@6| |nchildren#2@@62|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@3 ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#2@@62|) (IndexField |i#14@@6|)))) KMBtree.Node.repr) ($Box |children#2@@62|)))))) :qid |MutableB.183:18| :skolemid |7574| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@3 |children#2@@62|) (IndexField |i#14@@6|)))) )))))))) (and (! (or %lbl%@140 (KMBtree.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) :lblneg @140) (=> (KMBtree.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)) (and (! (or %lbl%@141 (<= (LitInt 0) |childidx##0@0|)) :lblneg @141) (=> (<= (LitInt 0) |childidx##0@0|) (and (! (or %lbl%@142 (< |childidx##0@0| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents)))) :lblneg @142) (=> (< |childidx##0@0| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@3 |node#0@@97|) KMBtree.Node.contents))) (=> (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (=> (and (and (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@4 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (IndexField |childidx##0@0|))) null)) (|KMBtree.__default.WFShape#canCall| $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (IndexField |childidx##0@0|))))) (and (|KMBtree.__default.WFShape#canCall| $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (IndexField |childidx##0@0|)))) (and (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (IndexField |childidx##0@0|)))) (ite (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (IndexField |childidx##0@0|)))) KMBtree.Node.contents))  (and (and (and (and (|Set#Equal| (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (IndexField |childidx##0@0|)))) KMBtree.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) (MapType1Select (MapType0Select $Heap@4 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (IndexField |childidx##0@0|))) ($Box (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (IndexField |childidx##0@0|)))) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (IndexField |childidx##0@0|)))) KMBtree.Node.contents))))) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (IndexField |childidx##0@0|)))) KMBtree.Node.contents)) (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (IndexField |childidx##0@0|)))) KMBtree.Node.contents))))) (= (U_2_int (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (IndexField |childidx##0@0|)))) KMBtree.Node.height)) (LitInt 0))) (and (and (<= (LitInt 0) (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (IndexField |childidx##0@0|)))) KMBtree.Node.contents))) (<= (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (IndexField |childidx##0@0|)))) KMBtree.Node.contents)) (LitInt KMBtree.__default.MaxKeysPerLeaf))) (= (LitInt KMBtree.__default.MaxKeysPerLeaf) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (IndexField |childidx##0@0|)))) KMBtree.Node.contents)))))) (= (_System.array.Length (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (IndexField |childidx##0@0|)))) KMBtree.Node.contents))) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (IndexField |childidx##0@0|)))) KMBtree.Node.contents)))))  (and true (let ((|nchildren#3@@15| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (IndexField |childidx##0@0|)))) KMBtree.Node.contents)))) (and true (let ((|children#3@@15| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (IndexField |childidx##0@0|)))) KMBtree.Node.contents)))) (and (and (and (and (and (and (and (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) (MapType1Select (MapType0Select $Heap@4 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (IndexField |childidx##0@0|))) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (IndexField |childidx##0@0|)))) KMBtree.Node.contents)))) ($Box |children#3@@15|)) (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (IndexField |childidx##0@0|)))) KMBtree.Node.repr)) (and (and (< 0 |nchildren#3@@15|) (<= |nchildren#3@@15| (LitInt KMBtree.__default.MaxChildren))) (= (LitInt KMBtree.__default.MaxChildren) (_System.array.Length |children#3@@15|)))) (= (_System.array.Length (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (IndexField |childidx##0@0|)))) KMBtree.Node.contents))) (LitInt (- KMBtree.__default.MaxChildren 1)))) (forall ((|i#15@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#15@@1|) (< |i#15@@1| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#15@@1|) (< |i#15@@1| |nchildren#3@@15|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@15|) (IndexField |i#15@@1|))) null)))) :qid |MutableB.178:18| :skolemid |7584| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@15|) (IndexField |i#15@@1|)))) ))) (KMBtree.__default.WFShapeChildren ($LS $LZ) $Heap@4 (|Seq#Take| (|Seq#FromArray| $Heap@4 |children#3@@15|) |nchildren#3@@15|) (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (IndexField |childidx##0@0|)))) KMBtree.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (IndexField |childidx##0@0|)))) KMBtree.Node.height)))) (forall ((|i#16@@6| Int) ) (!  (=> (and (<= (LitInt 0) |i#16@@6|) (< |i#16@@6| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#16@@6|) (< |i#16@@6| |nchildren#3@@15|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@15|) (IndexField |i#16@@6|)))) KMBtree.Node.repr) (MapType1Select (MapType0Select $Heap@4 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (IndexField |childidx##0@0|))))))) :qid |MutableB.180:18| :skolemid |7585| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@15|) (IndexField |i#16@@6|)))) ))) (forall ((|i#17@@7| Int) ) (!  (=> (and (<= (LitInt 0) |i#17@@7|) (< |i#17@@7| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#17@@7|) (< |i#17@@7| |nchildren#3@@15|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@15|) (IndexField |i#17@@7|)))) KMBtree.Node.repr) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (IndexField |childidx##0@0|)))) KMBtree.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |7586| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@15|) (IndexField |i#17@@7|)))) ))) (and true (forall ((|i#19@@7| Int) ) (!  (=> (and (<= (LitInt 0) |i#19@@7|) (< |i#19@@7| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#19@@7|) (< |i#19@@7| |nchildren#3@@15|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@15|) (IndexField |i#19@@7|)))) KMBtree.Node.repr) ($Box |children#3@@15|)))))) :qid |MutableB.183:18| :skolemid |7587| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@15|) (IndexField |i#19@@7|)))) )))))))))))) (=> (and (and (and (and (|$IsA#KMBtreeModel.Node| ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) |childidx##0@0|))) (|$IsA#KMBtreeModel.Node| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (IndexField |childidx##0@0|)))))) (and (|KMBtree.__default.I#canCall| $Heap@4 |node#0@@97|) (|KMBtree.__default.I#canCall| $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (IndexField |childidx##0@0|)))))) (|KMBtreeModel.Node#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|)) |childidx##0@0|)) (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (IndexField |childidx##0@0|)))))) (and (= $Heap@3 $Heap@4) (forall (($o@@139 T@U) ($f@@88 T@U) ) (! (let ((alpha@@95 (FieldTypeInv0 (type $f@@88)))) (=> (and (= (type $o@@139) refType) (= (type $f@@88) (FieldType alpha@@95))) (=> (and (and (not (= $o@@139 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@4 $o@@139) alloc))) (= $o@@139 |node#0@@97|)) (U_2_bool (MapType6Select $_Frame@0 $o@@139 $f@@88))))) :qid |MutableB.731:16| :skolemid |9351| :no-pattern (type $o@@139) :no-pattern (type $f@@88) :no-pattern (U_2_int $o@@139) :no-pattern (U_2_bool $o@@139) :no-pattern (U_2_int $f@@88) :no-pattern (U_2_bool $f@@88) )))) (and (! (or %lbl%@143  (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)) (|Set#Equal| (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))))))))))) :lblneg @143) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)) (|Set#Equal| (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))))))))) (and (! (or %lbl%@144  (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)) (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))))))))) :lblneg @144) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)) (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))))))))) (and (! (or %lbl%@145  (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)) (= (U_2_int (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.height)) (LitInt 0)))))))) :lblneg @145) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)) (= (U_2_int (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.height)) (LitInt 0))))))) (and (! (or %lbl%@146  (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)) (<= (LitInt 0) (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))))))))) :lblneg @146) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)) (<= (LitInt 0) (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))))))) (and (! (or %lbl%@147  (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)) (<= (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)) (LitInt KMBtree.__default.MaxKeysPerLeaf)))))))) :lblneg @147) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)) (<= (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)) (LitInt KMBtree.__default.MaxKeysPerLeaf))))))) (and (! (or %lbl%@148  (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)) (= (LitInt KMBtree.__default.MaxKeysPerLeaf) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))))))))) :lblneg @148) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)) (= (LitInt KMBtree.__default.MaxKeysPerLeaf) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))))))))) (and (! (or %lbl%@149  (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)) (= (_System.array.Length (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))))))))) :lblneg @149) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)) (= (_System.array.Length (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))))))))) (and (! (or %lbl%@150  (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))))) :lblneg @150) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true)))))))) (and (! (or %lbl%@151  (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))))) :lblneg @151) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true)))))))) (and (! (or %lbl%@152  (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#3@@16| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) ($Box |children#3@@16|)) (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.repr))))))))) :lblneg @152) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#3@@17| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) ($Box |children#3@@17|)) (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.repr)))))))) (and (! (or %lbl%@153  (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3@@16| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (< 0 |nchildren#3@@16|)))))))) :lblneg @153) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3@@17| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (< 0 |nchildren#3@@17|))))))) (and (! (or %lbl%@154  (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3@@18| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (<= |nchildren#3@@18| (LitInt KMBtree.__default.MaxChildren))))))))) :lblneg @154) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3@@19| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (<= |nchildren#3@@19| (LitInt KMBtree.__default.MaxChildren)))))))) (and (! (or %lbl%@155  (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#3@@18| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (= (LitInt KMBtree.__default.MaxChildren) (_System.array.Length |children#3@@18|))))))))) :lblneg @155) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#3@@19| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (= (LitInt KMBtree.__default.MaxChildren) (_System.array.Length |children#3@@19|)))))))) (and (! (or %lbl%@156  (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (= (_System.array.Length (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (LitInt (- KMBtree.__default.MaxChildren 1))))))))) :lblneg @156) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (= (_System.array.Length (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (LitInt (- KMBtree.__default.MaxChildren 1)))))))) (and (! (or %lbl%@157  (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3@@20| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#3@@20| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#15@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#15@@2|) (< |i#15@@2| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#15@@2|) (< |i#15@@2| |nchildren#3@@20|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@20|) (IndexField |i#15@@2|))) null)))) :qid |MutableB.178:18| :skolemid |8981| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@20|) (IndexField |i#15@@2|)))) )))))))))) :lblneg @157) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3@@21| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#3@@21| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#15@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#15@@3|) (< |i#15@@3| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#15@@3|) (< |i#15@@3| |nchildren#3@@21|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@21|) (IndexField |i#15@@3|))) null)))) :qid |MutableB.178:18| :skolemid |8981| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@21|) (IndexField |i#15@@3|)))) ))))))))) (and (! (or %lbl%@158  (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3@@22| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#3@@22| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (KMBtree.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@4 (|Seq#Take| (|Seq#FromArray| $Heap@4 |children#3@@22|) |nchildren#3@@22|) (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.height))))))))))) :lblneg @158) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3@@23| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#3@@23| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (KMBtree.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@4 (|Seq#Take| (|Seq#FromArray| $Heap@4 |children#3@@23|) |nchildren#3@@23|) (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.height)))))))))) (and (! (or %lbl%@159  (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3@@24| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#3@@24| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#16@@7| Int) ) (!  (=> (and (<= (LitInt 0) |i#16@@7|) (< |i#16@@7| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#16@@7|) (< |i#16@@7| |nchildren#3@@24|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@24|) (IndexField |i#16@@7|)))) KMBtree.Node.repr) ($Box |node#0@@97|)))))) :qid |MutableB.180:18| :skolemid |8982| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@24|) (IndexField |i#16@@7|)))) )))))))))) :lblneg @159) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3@@25| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#3@@25| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#16@@8| Int) ) (!  (=> (and (<= (LitInt 0) |i#16@@8|) (< |i#16@@8| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#16@@8|) (< |i#16@@8| |nchildren#3@@25|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@25|) (IndexField |i#16@@8|)))) KMBtree.Node.repr) ($Box |node#0@@97|)))))) :qid |MutableB.180:18| :skolemid |8982| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@25|) (IndexField |i#16@@8|)))) ))))))))) (and (! (or %lbl%@160  (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3@@26| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#3@@26| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#17@@8| Int) ) (!  (=> (and (<= (LitInt 0) |i#17@@8|) (< |i#17@@8| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#17@@8|) (< |i#17@@8| |nchildren#3@@26|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@26|) (IndexField |i#17@@8|)))) KMBtree.Node.repr) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |8983| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@26|) (IndexField |i#17@@8|)))) )))))))))) :lblneg @160) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3@@27| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#3@@27| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#17@@9| Int) ) (!  (=> (and (<= (LitInt 0) |i#17@@9|) (< |i#17@@9| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#17@@9|) (< |i#17@@9| |nchildren#3@@27|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@27|) (IndexField |i#17@@9|)))) KMBtree.Node.repr) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |8983| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@27|) (IndexField |i#17@@9|)))) ))))))))) (and (! (or %lbl%@161  (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3@@28| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#3@@28| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#18@@9| Int) ) (!  (=> (and (<= (LitInt 0) |i#18@@9|) (< |i#18@@9| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#18@@9|) (< |i#18@@9| |nchildren#3@@28|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@28|) (IndexField |i#18@@9|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@4 |children#3@@28|) |nchildren#3@@28|) |i#18@@9|))))) :qid |MutableB.182:24| :skolemid |8984| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@4 |children#3@@28|) |nchildren#3@@28|) |i#18@@9|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@28|) (IndexField |i#18@@9|)))) )) (U_2_bool (Lit (bool_2_U true)))))))))))) :lblneg @161) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3@@29| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#3@@29| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#18@@10| Int) ) (!  (=> (and (<= (LitInt 0) |i#18@@10|) (< |i#18@@10| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#18@@10|) (< |i#18@@10| |nchildren#3@@29|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@29|) (IndexField |i#18@@10|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@4 |children#3@@29|) |nchildren#3@@29|) |i#18@@10|))))) :qid |MutableB.182:24| :skolemid |8984| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@4 |children#3@@29|) |nchildren#3@@29|) |i#18@@10|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@29|) (IndexField |i#18@@10|)))) )) (U_2_bool (Lit (bool_2_U true))))))))))) (and (! (or %lbl%@162  (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3@@30| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#3@@30| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#18@@11| Int) ) (!  (=> (and (<= (LitInt 0) |i#18@@11|) (< |i#18@@11| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#18@@11|) (< |i#18@@11| |nchildren#3@@30|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@30|) (IndexField |i#18@@11|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@4 |children#3@@30|) |nchildren#3@@30|) |i#18@@11|))))) :qid |MutableB.182:24| :skolemid |8984| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@4 |children#3@@30|) |nchildren#3@@30|) |i#18@@11|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@30|) (IndexField |i#18@@11|)))) )) (forall ((|i#19@@8| Int) ) (!  (=> (and (<= (LitInt 0) |i#19@@8|) (< |i#19@@8| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#19@@8|) (< |i#19@@8| |nchildren#3@@30|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@30|) (IndexField |i#19@@8|)))) KMBtree.Node.repr) ($Box |children#3@@30|)))))) :qid |MutableB.183:18| :skolemid |8985| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@30|) (IndexField |i#19@@8|)))) ))))))))))) :lblneg @162) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtree.__default.WFShape#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#3@@31| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#3@@31| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#18@@12| Int) ) (!  (=> (and (<= (LitInt 0) |i#18@@12|) (< |i#18@@12| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#18@@12|) (< |i#18@@12| |nchildren#3@@31|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@31|) (IndexField |i#18@@12|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@4 |children#3@@31|) |nchildren#3@@31|) |i#18@@12|))))) :qid |MutableB.182:24| :skolemid |8984| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@4 |children#3@@31|) |nchildren#3@@31|) |i#18@@12|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@31|) (IndexField |i#18@@12|)))) )) (forall ((|i#19@@9| Int) ) (!  (=> (and (<= (LitInt 0) |i#19@@9|) (< |i#19@@9| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#19@@9|) (< |i#19@@9| |nchildren#3@@31|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@31|) (IndexField |i#19@@9|)))) KMBtree.Node.repr) ($Box |children#3@@31|)))))) :qid |MutableB.183:18| :skolemid |8985| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#3@@31|) (IndexField |i#19@@9|)))) )))))))))) (and (! (or %lbl%@163  (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (=> (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (= (|Seq#Length| (KMBtreeModel.Node.keys (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|))) (|Seq#Length| (KMBtreeModel.Node.values (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|)))))))))) :lblneg @163) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (=> (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (= (|Seq#Length| (KMBtreeModel.Node.keys (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|))) (|Seq#Length| (KMBtreeModel.Node.values (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|))))))))) (and (! (or %lbl%@164  (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (=> (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (KMBtreeModel.Node.keys (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|))))))))) :lblneg @164) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (=> (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (KMBtreeModel.Node.keys (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|)))))))) (and (! (or %lbl%@165  (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (=> (not (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|))) (= (|Seq#Length| (KMBtreeModel.Node.pivots (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|))) (- (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|))) 1)))))))) :lblneg @165) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (=> (not (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|))) (= (|Seq#Length| (KMBtreeModel.Node.pivots (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|))) (- (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|))) 1))))))) (and (! (or %lbl%@166  (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (=> (not (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (KMBtreeModel.Node.pivots (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|))))))))) :lblneg @166) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (=> (not (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (KMBtreeModel.Node.pivots (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|)))))))) (and (! (or %lbl%@167  (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (=> (not (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|))) (forall ((|i#20@@7| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#20@@7|) (< |i#20@@7| (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|))))) (KMBtreeModel.__default.WF ($LS ($LS $LZ)) ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|)) |i#20@@7|))))) :qid |BtreeMod.71:18| :skolemid |8990| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|)) |i#20@@7|))) )))))))) :lblneg @167) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (=> (not (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|))) (forall ((|i#20@@8| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#20@@8|) (< |i#20@@8| (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|))))) (KMBtreeModel.__default.WF ($LS ($LS $LZ)) ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|)) |i#20@@8|))))) :qid |BtreeMod.71:18| :skolemid |8990| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|)) |i#20@@8|))) ))))))) (and (! (or %lbl%@168  (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (=> (not (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|))) (forall ((|i#21@@6| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#21@@6|) (< |i#21@@6| (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|))))) (not (|Set#Equal| (KMBtreeModel.__default.AllKeys StartFuelAssert_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|)) |i#21@@6|))) (|Set#Empty| BoxType))))) :qid |BtreeMod.72:18| :skolemid |8992| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|)) |i#21@@6|))) )))))))) :lblneg @168) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (=> (not (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|))) (forall ((|i#21@@7| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#21@@7|) (< |i#21@@7| (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|))))) (not (|Set#Equal| (KMBtreeModel.__default.AllKeys StartFuelAssert_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|)) |i#21@@7|))) (|Set#Empty| BoxType))))) :qid |BtreeMod.72:18| :skolemid |8992| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|)) |i#21@@7|))) ))))))) (and (! (or %lbl%@169  (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (=> (not (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|))) (forall ((|i#22@@6| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#22@@6|) (< |i#22@@6| (- (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|))) 1))) (KMBtreeModel.__default.AllKeysBelowBound (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|) |i#22@@6|))) :qid |BtreeMod.73:18| :skolemid |8994| :pattern ( (KMBtreeModel.__default.AllKeysBelowBound (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|) |i#22@@6|)) )))))))) :lblneg @169) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (=> (not (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|))) (forall ((|i#22@@7| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#22@@7|) (< |i#22@@7| (- (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|))) 1))) (KMBtreeModel.__default.AllKeysBelowBound (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|) |i#22@@7|))) :qid |BtreeMod.73:18| :skolemid |8994| :pattern ( (KMBtreeModel.__default.AllKeysBelowBound (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|) |i#22@@7|)) ))))))) (and (! (or %lbl%@170  (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (=> (not (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|))) (forall ((|i#23@@4| Int) ) (!  (=> true (=> (and (< 0 |i#23@@4|) (< |i#23@@4| (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|))))) (KMBtreeModel.__default.AllKeysAboveBound (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|) |i#23@@4|))) :qid |BtreeMod.74:18| :skolemid |8996| :pattern ( (KMBtreeModel.__default.AllKeysAboveBound (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|) |i#23@@4|)) )))))))) :lblneg @170) (=> (=> (|KMBtree.__default.WF#canCall| $Heap@4 |node#0@@97|) (or (KMBtree.__default.WF $Heap@4 |node#0@@97|) (=> (|KMBtreeModel.__default.WF#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (or (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|)) (=> (not (KMBtreeModel.Node.Leaf_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|))) (forall ((|i#23@@5| Int) ) (!  (=> true (=> (and (< 0 |i#23@@5|) (< |i#23@@5| (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|))))) (KMBtreeModel.__default.AllKeysAboveBound (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|) |i#23@@5|))) :qid |BtreeMod.74:18| :skolemid |8996| :pattern ( (KMBtreeModel.__default.AllKeysAboveBound (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|) |i#23@@5|)) ))))))) (and (! (or %lbl%@171 (KMBtree.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) :lblneg @171) (=> (KMBtree.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)) (and (! (or %lbl%@172 (<= (LitInt 1) |nleft#0|)) :lblneg @172) (=> (<= (LitInt 1) |nleft#0|) (and (! (or %lbl%@173 (<= (LitInt 0) |nleft#0|)) :lblneg @173) (=> (<= (LitInt 0) |nleft#0|) (and (! (or %lbl%@174 (<= |nleft#0| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) :lblneg @174) (=> (<= |nleft#0| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents))) (=> (and (and ($IsGoodHeap $Heap@5) ($IsHeapAnchor $Heap@5)) (|KMBtree.__default.WFShape#canCall| $Heap@5 |node#0@@97|)) (=> (and (and (and (and (and (|KMBtree.__default.WFShape#canCall| $Heap@5 |node#0@@97|) (and (KMBtree.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@97|) (ite (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@97|) KMBtree.Node.contents))  (and (and (and (and (|Set#Equal| (MapType1Select (MapType0Select $Heap@5 |node#0@@97|) KMBtree.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@5 |node#0@@97|) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@5 |node#0@@97|) KMBtree.Node.contents))))) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@5 |node#0@@97|) KMBtree.Node.contents)) (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@5 |node#0@@97|) KMBtree.Node.contents))))) (= (U_2_int (MapType1Select (MapType0Select $Heap@5 |node#0@@97|) KMBtree.Node.height)) (LitInt 0))) (and (and (<= (LitInt 0) (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@5 |node#0@@97|) KMBtree.Node.contents))) (<= (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@5 |node#0@@97|) KMBtree.Node.contents)) (LitInt KMBtree.__default.MaxKeysPerLeaf))) (= (LitInt KMBtree.__default.MaxKeysPerLeaf) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@5 |node#0@@97|) KMBtree.Node.contents)))))) (= (_System.array.Length (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@5 |node#0@@97|) KMBtree.Node.contents))) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@5 |node#0@@97|) KMBtree.Node.contents)))))  (and true (let ((|nchildren#4@@0| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@5 |node#0@@97|) KMBtree.Node.contents)))) (and true (let ((|children#4@@0| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@5 |node#0@@97|) KMBtree.Node.contents)))) (and (and (and (and (and (and (and (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@5 |node#0@@97|) KMBtree.Node.contents)))) ($Box |children#4@@0|)) (MapType1Select (MapType0Select $Heap@5 |node#0@@97|) KMBtree.Node.repr)) (and (and (< 0 |nchildren#4@@0|) (<= |nchildren#4@@0| (LitInt KMBtree.__default.MaxChildren))) (= (LitInt KMBtree.__default.MaxChildren) (_System.array.Length |children#4@@0|)))) (= (_System.array.Length (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@5 |node#0@@97|) KMBtree.Node.contents))) (LitInt (- KMBtree.__default.MaxChildren 1)))) (forall ((|i#24@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#24@@0|) (< |i#24@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#24@@0|) (< |i#24@@0| |nchildren#4@@0|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#4@@0|) (IndexField |i#24@@0|))) null)))) :qid |MutableB.178:18| :skolemid |9007| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#4@@0|) (IndexField |i#24@@0|)))) ))) (KMBtree.__default.WFShapeChildren ($LS $LZ) $Heap@5 (|Seq#Take| (|Seq#FromArray| $Heap@5 |children#4@@0|) |nchildren#4@@0|) (MapType1Select (MapType0Select $Heap@5 |node#0@@97|) KMBtree.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@5 |node#0@@97|) KMBtree.Node.height)))) (forall ((|i#25@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#25@@0|) (< |i#25@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#25@@0|) (< |i#25@@0| |nchildren#4@@0|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@5 ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#4@@0|) (IndexField |i#25@@0|)))) KMBtree.Node.repr) ($Box |node#0@@97|)))))) :qid |MutableB.180:18| :skolemid |9008| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#4@@0|) (IndexField |i#25@@0|)))) ))) (forall ((|i#26@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#26@@0|) (< |i#26@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#26@@0|) (< |i#26@@0| |nchildren#4@@0|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@5 ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#4@@0|) (IndexField |i#26@@0|)))) KMBtree.Node.repr) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@5 |node#0@@97|) KMBtree.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |9009| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#4@@0|) (IndexField |i#26@@0|)))) ))) (and true (forall ((|i#28@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#28@@0|) (< |i#28@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#28@@0|) (< |i#28@@0| |nchildren#4@@0|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@5 ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#4@@0|) (IndexField |i#28@@0|)))) KMBtree.Node.repr) ($Box |children#4@@0|)))))) :qid |MutableB.183:18| :skolemid |9010| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#4@@0|) (IndexField |i#28@@0|)))) ))))))))))) (|KMBtree.__default.SubRepr#canCall| $Heap@4 |node#0@@97| (LitInt 0) |nleft#0|)) (and (|Set#Equal| (MapType1Select (MapType0Select $Heap@5 |node#0@@97|) KMBtree.Node.repr) (|Set#Union| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.contents)))) (KMBtree.__default.SubRepr $Heap@4 |node#0@@97| (LitInt 0) |nleft#0|))) (= (U_2_int (MapType1Select (MapType0Select $Heap@5 |node#0@@97|) KMBtree.Node.height)) (U_2_int (MapType1Select (MapType0Select $Heap@4 |node#0@@97|) KMBtree.Node.height))))) (and (and (|$IsA#KMBtreeModel.Node| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@5 |node#0@@97|)) (|$IsA#KMBtreeModel.Node| (KMBtreeModel.__default.SubIndex (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|) (LitInt 0) |nleft#0|))) (and (|KMBtree.__default.I#canCall| $Heap@5 |node#0@@97|) (and (|KMBtree.__default.I#canCall| $Heap@4 |node#0@@97|) (|KMBtreeModel.__default.SubIndex#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@4 |node#0@@97|) (LitInt 0) |nleft#0|))))) (and (and (and (and (|KMBtreeModel.Node#Equal| (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@5 |node#0@@97|) (KMBtreeModel.__default.SubIndex (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@4 |node#0@@97|) (LitInt 0) |nleft#0|)) (forall (($o@@140 T@U) ) (!  (=> (= (type $o@@140) refType) (=> (and (not (= $o@@140 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@4 $o@@140) alloc))) (or (= (MapType0Select $Heap@5 $o@@140) (MapType0Select $Heap@4 $o@@140)) (= $o@@140 |node#0@@97|)))) :qid |MutableB.637:10| :skolemid |9011| :pattern ( (MapType0Select $Heap@5 $o@@140)) ))) (and ($HeapSucc $Heap@4 $Heap@5) ($IsAlloc |node#0@@97| Tclass.KMBtree.Node $Heap@@125))) (and (and (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (|KMBtree.__default.I#canCall| $Heap@@125 |node#0@@97|)) (and (|KMBtree.__default.I#canCall| $Heap@@125 |node#0@@97|) (= |inode#0@0| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|))))) (and (and (and ($IsAlloc |call5formal@subnode#0@0| Tclass.KMBtree.Node $Heap@5) (KMBtree.__default.WFShape ($LS $LZ) $Heap@5 |call5formal@subnode#0@0|)) (and (|KMBtree.__default.I#canCall| $Heap@5 |call5formal@subnode#0@0|) (|KMBtree.__default.I#canCall| $Heap@5 |call5formal@subnode#0@0|))) (and (and (= |iright#0@0| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@5 |call5formal@subnode#0@0|)) ($IsAlloc |inode#0@0| Tclass.KMBtreeModel.Node $Heap@5)) (and (= |##i#2@0| (LitInt 0)) ($IsAlloc (int_2_U |##i#2@0|) TInt $Heap@5)))))) (and (! (or %lbl%@175 (KMBtreeModel.Node.Index_q |inode#0@0|)) :lblneg @175) (and (! (or %lbl%@176 (<= (LitInt 0) |##i#2@0|)) :lblneg @176) (and (! (or %lbl%@177 (< |##i#2@0| (- (|Seq#Length| (KMBtreeModel.Node.children |inode#0@0|)) 1))) :lblneg @177) (and (! (or %lbl%@178 (<= (LitInt 0) |##i#2@0|)) :lblneg @178) (and (! (or %lbl%@179 (< |##i#2@0| (|Seq#Length| (KMBtreeModel.Node.pivots |inode#0@0|)))) :lblneg @179) (=> (and (and (|KMBtreeModel.__default.AllKeysBelowBound#canCall| |inode#0@0| (LitInt 0)) (|KMBtreeModel.__default.AllKeysBelowBound#canCall| |inode#0@0| (LitInt 0))) (and (KMBtreeModel.__default.AllKeysBelowBound |inode#0@0| (LitInt 0)) (KMBtreeModel.Node.Index_q |iright#0@0|))) (=> (and (and (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| (KMBtreeModel.Node.children |iright#0@0|)))) (KMBtreeModel.Node.Index_q |inode#0@0|)) (and (<= 0 |nleft#0|) (< |nleft#0| (|Seq#Length| (KMBtreeModel.Node.children |inode#0@0|))))) (=> (and (and (and (and (and (|$IsA#KMBtreeModel.Node| ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |iright#0@0|) (LitInt 0)))) (|$IsA#KMBtreeModel.Node| ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |inode#0@0|) |nleft#0|)))) (|KMBtreeModel.Node#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |iright#0@0|) (LitInt 0))) ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children |inode#0@0|) |nleft#0|)))) (and (and ($IsAlloc |node#0@@97| Tclass.KMBtree.Node $Heap@@125) (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|)) (and (|KMBtree.__default.I#canCall| $Heap@@125 |node#0@@97|) (KMBtreeModel.Node.Index_q (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|))))) (and (and (and (|KMBtree.__default.I#canCall| $Heap@@125 |node#0@@97|) (= |run##0@0| (KMBtreeModel.Node.pivots (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|)))) (and (= |i##0@0| (LitInt 0)) (= |newtype$check#6@0| (LitInt 1)))) (and (and (<= (LitInt 0) |newtype$check#6@0|) (< |newtype$check#6@0| 18446744073709551616)) (= |newtype$check#7@0| (- |nleft#0| 1))))) (and (and (and (and (<= (LitInt 0) |newtype$check#7@0|) (< |newtype$check#7@0| 18446744073709551616)) (and (= |j##0@0| (- |nleft#0| 1)) (forall (($o@@141 T@U) ($f@@89 T@U) ) (! (let ((alpha@@96 (FieldTypeInv0 (type $f@@89)))) (=> (and (and (= (type $o@@141) refType) (= (type $f@@89) (FieldType alpha@@96))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@141 $f@@89)))) :qid |MutableB.736:42| :skolemid |9382| :no-pattern (type $o@@141) :no-pattern (type $f@@89) :no-pattern (U_2_int $o@@141) :no-pattern (U_2_bool $o@@141) :no-pattern (U_2_int $f@@89) :no-pattern (U_2_bool $f@@89) )))) (and (and ($IsGoodHeap $Heap@6) ($IsHeapAnchor $Heap@6)) (and (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |run##0@0| |i##0@0|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run##0@0| |j##0@0|))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |run##0@0| |i##0@0|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run##0@0| |j##0@0|)))))) (and (and (and (= $Heap@5 $Heap@6) (forall (($o@@142 T@U) ($f@@90 T@U) ) (! (let ((alpha@@97 (FieldTypeInv0 (type $f@@90)))) (=> (and (and (= (type $o@@142) refType) (= (type $f@@90) (FieldType alpha@@97))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@142 $f@@90)))) :qid |MutableB.737:13| :skolemid |9383| :no-pattern (type $o@@142) :no-pattern (type $f@@90) :no-pattern (U_2_int $o@@142) :no-pattern (U_2_bool $o@@142) :no-pattern (U_2_int $f@@90) :no-pattern (U_2_bool $f@@90) ))) (and ($IsGoodHeap $Heap@7) ($IsHeapAnchor $Heap@7))) (and (and (= $Heap@6 $Heap@7) (= StartFuel_KMBtree._default.I ($LS MoreFuel_KMBtree._default.I0))) (and (= StartFuelAssert_KMBtree._default.I ($LS ($LS MoreFuel_KMBtree._default.I0))) (= (AsFuelBottom MoreFuel_KMBtree._default.I0) MoreFuel_KMBtree._default.I0)))))) (and (! (or %lbl%@180  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)) (|Set#Equal| (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))))))))) :lblneg @180) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)) (|Set#Equal| (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))))))))) (and (! (or %lbl%@181  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)) (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))))))))) :lblneg @181) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)) (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))))))) (and (! (or %lbl%@182  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)) (= (U_2_int (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.height)) (LitInt 0))))))) :lblneg @182) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)) (= (U_2_int (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.height)) (LitInt 0)))))) (and (! (or %lbl%@183  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)) (<= (LitInt 0) (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))))))) :lblneg @183) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)) (<= (LitInt 0) (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))))))) (and (! (or %lbl%@184  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)) (<= (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)) (LitInt KMBtree.__default.MaxKeysPerLeaf))))))) :lblneg @184) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)) (<= (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)) (LitInt KMBtree.__default.MaxKeysPerLeaf)))))) (and (! (or %lbl%@185  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)) (= (LitInt KMBtree.__default.MaxKeysPerLeaf) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))))))))) :lblneg @185) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)) (= (LitInt KMBtree.__default.MaxKeysPerLeaf) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))))))) (and (! (or %lbl%@186  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)) (= (_System.array.Length (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))))))))) :lblneg @186) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)) (= (_System.array.Length (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))))))) (and (! (or %lbl%@187  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true)))))))) :lblneg @187) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) (and (! (or %lbl%@188  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true)))))))) :lblneg @188) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) (and (! (or %lbl%@189  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#7@@0| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) ($Box |children#7@@0|)) (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.repr)))))))) :lblneg @189) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#7@@1| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@97|)) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) ($Box |children#7@@1|)) (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.repr))))))) (and (! (or %lbl%@190  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#7| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (< 0 |nchildren#7|))))))) :lblneg @190) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#7@@0| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (< 0 |nchildren#7@@0|)))))) (and (! (or %lbl%@191  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#7@@1| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (<= |nchildren#7@@1| (LitInt KMBtree.__default.MaxChildren)))))))) :lblneg @191) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#7@@2| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (<= |nchildren#7@@2| (LitInt KMBtree.__default.MaxChildren))))))) (and (! (or %lbl%@192  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#7@@2| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (= (LitInt KMBtree.__default.MaxChildren) (_System.array.Length |children#7@@2|)))))))) :lblneg @192) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))) (let ((|children#7@@3| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (= (LitInt KMBtree.__default.MaxChildren) (_System.array.Length |children#7@@3|))))))) (and (! (or %lbl%@193  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))) (= (_System.array.Length (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))) (LitInt (- KMBtree.__default.MaxChildren 1)))))))) :lblneg @193) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))) (= (_System.array.Length (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))) (LitInt (- KMBtree.__default.MaxChildren 1))))))) (and (! (or %lbl%@194  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#7@@3| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#7@@4| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#43| Int) ) (!  (=> (and (<= (LitInt 0) |i#43|) (< |i#43| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#43|) (< |i#43| |nchildren#7@@3|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#7@@4|) (IndexField |i#43|))) null)))) :qid |MutableB.178:18| :skolemid |9302| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#7@@4|) (IndexField |i#43|)))) ))))))))) :lblneg @194) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#7@@4| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#7@@5| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#43@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#43@@0|) (< |i#43@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#43@@0|) (< |i#43@@0| |nchildren#7@@4|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#7@@5|) (IndexField |i#43@@0|))) null)))) :qid |MutableB.178:18| :skolemid |9302| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#7@@5|) (IndexField |i#43@@0|)))) )))))))) (and (! (or %lbl%@195  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#7@@5| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#7@@6| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (KMBtree.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@7 (|Seq#Take| (|Seq#FromArray| $Heap@7 |children#7@@6|) |nchildren#7@@5|) (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.height)))))))))) :lblneg @195) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#7@@6| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#7@@7| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (KMBtree.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@7 (|Seq#Take| (|Seq#FromArray| $Heap@7 |children#7@@7|) |nchildren#7@@6|) (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.height))))))))) (and (! (or %lbl%@196  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#7@@7| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#7@@8| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#44| Int) ) (!  (=> (and (<= (LitInt 0) |i#44|) (< |i#44| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#44|) (< |i#44| |nchildren#7@@7|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@7 ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#7@@8|) (IndexField |i#44|)))) KMBtree.Node.repr) ($Box |node#0@@97|)))))) :qid |MutableB.180:18| :skolemid |9303| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#7@@8|) (IndexField |i#44|)))) ))))))))) :lblneg @196) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#7@@8| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#7@@9| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#44@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#44@@0|) (< |i#44@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#44@@0|) (< |i#44@@0| |nchildren#7@@8|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@7 ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#7@@9|) (IndexField |i#44@@0|)))) KMBtree.Node.repr) ($Box |node#0@@97|)))))) :qid |MutableB.180:18| :skolemid |9303| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#7@@9|) (IndexField |i#44@@0|)))) )))))))) (and (! (or %lbl%@197  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#7@@9| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#7@@10| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#45| Int) ) (!  (=> (and (<= (LitInt 0) |i#45|) (< |i#45| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#45|) (< |i#45| |nchildren#7@@9|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@7 ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#7@@10|) (IndexField |i#45|)))) KMBtree.Node.repr) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |9304| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#7@@10|) (IndexField |i#45|)))) ))))))))) :lblneg @197) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#7@@10| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#7@@11| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (forall ((|i#45@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#45@@0|) (< |i#45@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#45@@0|) (< |i#45@@0| |nchildren#7@@10|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@7 ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#7@@11|) (IndexField |i#45@@0|)))) KMBtree.Node.repr) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |9304| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#7@@11|) (IndexField |i#45@@0|)))) )))))))) (and (! (or %lbl%@198  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#7@@11| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#7@@12| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#46| Int) ) (!  (=> (and (<= (LitInt 0) |i#46|) (< |i#46| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#46|) (< |i#46| |nchildren#7@@11|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#7@@12|) (IndexField |i#46|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@7 |children#7@@12|) |nchildren#7@@11|) |i#46|))))) :qid |MutableB.182:24| :skolemid |9305| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@7 |children#7@@12|) |nchildren#7@@11|) |i#46|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#7@@12|) (IndexField |i#46|)))) )) (U_2_bool (Lit (bool_2_U true))))))))))) :lblneg @198) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#7@@12| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#7@@13| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#46@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#46@@0|) (< |i#46@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#46@@0|) (< |i#46@@0| |nchildren#7@@12|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#7@@13|) (IndexField |i#46@@0|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@7 |children#7@@13|) |nchildren#7@@12|) |i#46@@0|))))) :qid |MutableB.182:24| :skolemid |9305| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@7 |children#7@@13|) |nchildren#7@@12|) |i#46@@0|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#7@@13|) (IndexField |i#46@@0|)))) )) (U_2_bool (Lit (bool_2_U true)))))))))) (and (! (or %lbl%@199  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#7@@13| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#7@@14| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#46@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#46@@1|) (< |i#46@@1| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#46@@1|) (< |i#46@@1| |nchildren#7@@13|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#7@@14|) (IndexField |i#46@@1|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@7 |children#7@@14|) |nchildren#7@@13|) |i#46@@1|))))) :qid |MutableB.182:24| :skolemid |9305| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@7 |children#7@@14|) |nchildren#7@@13|) |i#46@@1|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#7@@14|) (IndexField |i#46@@1|)))) )) (forall ((|i#47| Int) ) (!  (=> (and (<= (LitInt 0) |i#47|) (< |i#47| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#47|) (< |i#47| |nchildren#7@@13|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@7 ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#7@@14|) (IndexField |i#47|)))) KMBtree.Node.repr) ($Box |children#7@@14|)))))) :qid |MutableB.183:18| :skolemid |9306| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#7@@14|) (IndexField |i#47|)))) )))))))))) :lblneg @199) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |node#0@@97|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |node#0@@97|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents))) (let ((|nchildren#7@@14| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (let ((|children#7@@15| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)))) (=> (forall ((|i#46@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#46@@2|) (< |i#46@@2| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#46@@2|) (< |i#46@@2| |nchildren#7@@14|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#7@@15|) (IndexField |i#46@@2|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@7 |children#7@@15|) |nchildren#7@@14|) |i#46@@2|))))) :qid |MutableB.182:24| :skolemid |9305| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@7 |children#7@@15|) |nchildren#7@@14|) |i#46@@2|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#7@@15|) (IndexField |i#46@@2|)))) )) (forall ((|i#47@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#47@@0|) (< |i#47@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#47@@0|) (< |i#47@@0| |nchildren#7@@14|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@7 ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#7@@15|) (IndexField |i#47@@0|)))) KMBtree.Node.repr) ($Box |children#7@@15|)))))) :qid |MutableB.183:18| :skolemid |9306| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#7@@15|) (IndexField |i#47@@0|)))) ))))))))) (and (! (or %lbl%@200  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)) (|Set#Equal| (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |call5formal@subnode#0@0|)) ($Box (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))))))))) :lblneg @200) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)) (|Set#Equal| (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |call5formal@subnode#0@0|)) ($Box (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) ($Box (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))))))))) (and (! (or %lbl%@201  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)) (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))))))))) :lblneg @201) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)) (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))))))) (and (! (or %lbl%@202  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)) (= (U_2_int (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.height)) (LitInt 0))))))) :lblneg @202) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)) (= (U_2_int (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.height)) (LitInt 0)))))) (and (! (or %lbl%@203  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)) (<= (LitInt 0) (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))))))) :lblneg @203) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)) (<= (LitInt 0) (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))))))) (and (! (or %lbl%@204  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)) (<= (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)) (LitInt KMBtree.__default.MaxKeysPerLeaf))))))) :lblneg @204) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)) (<= (KMBtree.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)) (LitInt KMBtree.__default.MaxKeysPerLeaf)))))) (and (! (or %lbl%@205  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)) (= (LitInt KMBtree.__default.MaxKeysPerLeaf) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))))))))) :lblneg @205) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)) (= (LitInt KMBtree.__default.MaxKeysPerLeaf) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))))))) (and (! (or %lbl%@206  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)) (= (_System.array.Length (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))))))))) :lblneg @206) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)) (= (_System.array.Length (KMBtree.NodeContents.values (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (_System.array.Length (KMBtree.NodeContents.keys (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))))))) (and (! (or %lbl%@207  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true)))))))) :lblneg @207) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) (and (! (or %lbl%@208  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true)))))))) :lblneg @208) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) (and (! (or %lbl%@209  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (let ((|children#8@@0| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |call5formal@subnode#0@0|)) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) ($Box |children#8@@0|)) (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.repr)))))))) :lblneg @209) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (let ((|children#8@@1| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |call5formal@subnode#0@0|)) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) ($Box |children#8@@1|)) (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.repr))))))) (and (! (or %lbl%@210  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (let ((|nchildren#8| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (< 0 |nchildren#8|))))))) :lblneg @210) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (let ((|nchildren#8@@0| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (< 0 |nchildren#8@@0|)))))) (and (! (or %lbl%@211  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (let ((|nchildren#8@@1| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (<= |nchildren#8@@1| (LitInt KMBtree.__default.MaxChildren)))))))) :lblneg @211) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (let ((|nchildren#8@@2| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (<= |nchildren#8@@2| (LitInt KMBtree.__default.MaxChildren))))))) (and (! (or %lbl%@212  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (let ((|children#8@@2| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (= (LitInt KMBtree.__default.MaxChildren) (_System.array.Length |children#8@@2|)))))))) :lblneg @212) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (let ((|children#8@@3| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (= (LitInt KMBtree.__default.MaxChildren) (_System.array.Length |children#8@@3|))))))) (and (! (or %lbl%@213  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (= (_System.array.Length (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (LitInt (- KMBtree.__default.MaxChildren 1)))))))) :lblneg @213) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (= (_System.array.Length (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (LitInt (- KMBtree.__default.MaxChildren 1))))))) (and (! (or %lbl%@214  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (let ((|nchildren#8@@3| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (let ((|children#8@@4| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (forall ((|i#48| Int) ) (!  (=> (and (<= (LitInt 0) |i#48|) (< |i#48| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#48|) (< |i#48| |nchildren#8@@3|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#8@@4|) (IndexField |i#48|))) null)))) :qid |MutableB.178:18| :skolemid |9311| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#8@@4|) (IndexField |i#48|)))) ))))))))) :lblneg @214) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (let ((|nchildren#8@@4| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (let ((|children#8@@5| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (forall ((|i#48@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#48@@0|) (< |i#48@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#48@@0|) (< |i#48@@0| |nchildren#8@@4|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#8@@5|) (IndexField |i#48@@0|))) null)))) :qid |MutableB.178:18| :skolemid |9311| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#8@@5|) (IndexField |i#48@@0|)))) )))))))) (and (! (or %lbl%@215  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (let ((|nchildren#8@@5| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (let ((|children#8@@6| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (KMBtree.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@7 (|Seq#Take| (|Seq#FromArray| $Heap@7 |children#8@@6|) |nchildren#8@@5|) (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.height)))))))))) :lblneg @215) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (let ((|nchildren#8@@6| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (let ((|children#8@@7| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (KMBtree.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@7 (|Seq#Take| (|Seq#FromArray| $Heap@7 |children#8@@7|) |nchildren#8@@6|) (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.height))))))))) (and (! (or %lbl%@216  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (let ((|nchildren#8@@7| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (let ((|children#8@@8| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (forall ((|i#49| Int) ) (!  (=> (and (<= (LitInt 0) |i#49|) (< |i#49| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#49|) (< |i#49| |nchildren#8@@7|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@7 ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#8@@8|) (IndexField |i#49|)))) KMBtree.Node.repr) ($Box |call5formal@subnode#0@0|)))))) :qid |MutableB.180:18| :skolemid |9312| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#8@@8|) (IndexField |i#49|)))) ))))))))) :lblneg @216) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (let ((|nchildren#8@@8| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (let ((|children#8@@9| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (forall ((|i#49@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#49@@0|) (< |i#49@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#49@@0|) (< |i#49@@0| |nchildren#8@@8|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@7 ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#8@@9|) (IndexField |i#49@@0|)))) KMBtree.Node.repr) ($Box |call5formal@subnode#0@0|)))))) :qid |MutableB.180:18| :skolemid |9312| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#8@@9|) (IndexField |i#49@@0|)))) )))))))) (and (! (or %lbl%@217  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (let ((|nchildren#8@@9| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (let ((|children#8@@10| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (forall ((|i#50| Int) ) (!  (=> (and (<= (LitInt 0) |i#50|) (< |i#50| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#50|) (< |i#50| |nchildren#8@@9|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@7 ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#8@@10|) (IndexField |i#50|)))) KMBtree.Node.repr) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |9313| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#8@@10|) (IndexField |i#50|)))) ))))))))) :lblneg @217) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (let ((|nchildren#8@@10| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (let ((|children#8@@11| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (forall ((|i#50@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#50@@0|) (< |i#50@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#50@@0|) (< |i#50@@0| |nchildren#8@@10|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@7 ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#8@@11|) (IndexField |i#50@@0|)))) KMBtree.Node.repr) ($Box (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |9313| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#8@@11|) (IndexField |i#50@@0|)))) )))))))) (and (! (or %lbl%@218  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (let ((|nchildren#8@@11| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (let ((|children#8@@12| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (=> (forall ((|i#51| Int) ) (!  (=> (and (<= (LitInt 0) |i#51|) (< |i#51| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#51|) (< |i#51| |nchildren#8@@11|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#8@@12|) (IndexField |i#51|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@7 |children#8@@12|) |nchildren#8@@11|) |i#51|))))) :qid |MutableB.182:24| :skolemid |9314| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@7 |children#8@@12|) |nchildren#8@@11|) |i#51|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#8@@12|) (IndexField |i#51|)))) )) (U_2_bool (Lit (bool_2_U true))))))))))) :lblneg @218) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (let ((|nchildren#8@@12| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (let ((|children#8@@13| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (=> (forall ((|i#51@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#51@@0|) (< |i#51@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#51@@0|) (< |i#51@@0| |nchildren#8@@12|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#8@@13|) (IndexField |i#51@@0|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@7 |children#8@@13|) |nchildren#8@@12|) |i#51@@0|))))) :qid |MutableB.182:24| :skolemid |9314| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@7 |children#8@@13|) |nchildren#8@@12|) |i#51@@0|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#8@@13|) (IndexField |i#51@@0|)))) )) (U_2_bool (Lit (bool_2_U true)))))))))) (and (! (or %lbl%@219  (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (let ((|nchildren#8@@13| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (let ((|children#8@@14| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (=> (forall ((|i#51@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#51@@1|) (< |i#51@@1| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#51@@1|) (< |i#51@@1| |nchildren#8@@13|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#8@@14|) (IndexField |i#51@@1|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@7 |children#8@@14|) |nchildren#8@@13|) |i#51@@1|))))) :qid |MutableB.182:24| :skolemid |9314| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@7 |children#8@@14|) |nchildren#8@@13|) |i#51@@1|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#8@@14|) (IndexField |i#51@@1|)))) )) (forall ((|i#52| Int) ) (!  (=> (and (<= (LitInt 0) |i#52|) (< |i#52| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#52|) (< |i#52| |nchildren#8@@13|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@7 ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#8@@14|) (IndexField |i#52|)))) KMBtree.Node.repr) ($Box |children#8@@14|)))))) :qid |MutableB.183:18| :skolemid |9315| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#8@@14|) (IndexField |i#52|)))) )))))))))) :lblneg @219) (=> (=> false (=> (|KMBtree.__default.WFShape#canCall| $Heap@7 |call5formal@subnode#0@0|) (or (KMBtree.__default.WFShape ($LS $LZ) $Heap@7 |call5formal@subnode#0@0|) (=> (not (KMBtree.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents))) (let ((|nchildren#8@@14| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (let ((|children#8@@15| (KMBtree.NodeContents.children (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.contents)))) (=> (forall ((|i#51@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#51@@2|) (< |i#51@@2| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#51@@2|) (< |i#51@@2| |nchildren#8@@14|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#8@@15|) (IndexField |i#51@@2|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@7 |children#8@@15|) |nchildren#8@@14|) |i#51@@2|))))) :qid |MutableB.182:24| :skolemid |9314| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@7 |children#8@@15|) |nchildren#8@@14|) |i#51@@2|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#8@@15|) (IndexField |i#51@@2|)))) )) (forall ((|i#52@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#52@@0|) (< |i#52@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#52@@0|) (< |i#52@@0| |nchildren#8@@14|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@7 ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#8@@15|) (IndexField |i#52@@0|)))) KMBtree.Node.repr) ($Box |children#8@@15|)))))) :qid |MutableB.183:18| :skolemid |9315| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@7 |children#8@@15|) (IndexField |i#52@@0|)))) ))))))))) (and (! (or %lbl%@220  (=> false (|Set#Subset| (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.repr) (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.repr)))) :lblneg @220) (=> (=> false (|Set#Subset| (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.repr) (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.repr))) (and (! (or %lbl%@221  (=> false (|Set#Disjoint| (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.repr) (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.repr)))) :lblneg @221) (=> (=> false (|Set#Disjoint| (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.repr) (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.repr))) (and (! (or %lbl%@222  (=> false (forall (($o@@143 T@U) ) (!  (=> (= (type $o@@143) refType) (=> (and (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.repr) ($Box $o@@143))) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.repr) ($Box $o@@143))))) (and (not (= $o@@143 null)) (not (U_2_bool (MapType1Select (MapType0Select $Heap@@125 $o@@143) alloc)))))) :qid |MutableB.716:13| :skolemid |9320| :pattern ( (MapType1Select (MapType0Select $Heap@@125 $o@@143) alloc)) )))) :lblneg @222) (=> (=> false (forall (($o@@144 T@U) ) (!  (=> (= (type $o@@144) refType) (=> (and (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.repr) ($Box $o@@144))) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.repr) ($Box $o@@144))))) (and (not (= $o@@144 null)) (not (U_2_bool (MapType1Select (MapType0Select $Heap@@125 $o@@144) alloc)))))) :qid |MutableB.716:13| :skolemid |9320| :pattern ( (MapType1Select (MapType0Select $Heap@@125 $o@@144) alloc)) ))) (and (! (or %lbl%@223  (=> false (= (U_2_int (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.height)) (U_2_int (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.height))))) :lblneg @223) (=> (=> false (= (U_2_int (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.height)) (U_2_int (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.height)))) (and (! (or %lbl%@224  (=> false (= (U_2_int (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.height)) (U_2_int (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.height))))) :lblneg @224) (=> (=> false (= (U_2_int (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.height)) (U_2_int (MapType1Select (MapType0Select $Heap@7 |call5formal@subnode#0@0|) KMBtree.Node.height)))) (and (! (or %lbl%@225  (=> (|KMBtreeModel.__default.SplitIndex#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (or (KMBtreeModel.__default.SplitIndex (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (KMBtreeModel.Node.Index_q (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@@125 |node#0@@97|))))) :lblneg @225) (=> (=> (|KMBtreeModel.__default.SplitIndex#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (or (KMBtreeModel.__default.SplitIndex (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (KMBtreeModel.Node.Index_q (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@@125 |node#0@@97|)))) (and (! (or %lbl%@226  (=> (|KMBtreeModel.__default.SplitIndex#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (or (KMBtreeModel.__default.SplitIndex (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (KMBtreeModel.Node.Index_q (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@7 |node#0@@97|))))) :lblneg @226) (=> (=> (|KMBtreeModel.__default.SplitIndex#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (or (KMBtreeModel.__default.SplitIndex (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (KMBtreeModel.Node.Index_q (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@7 |node#0@@97|)))) (and (! (or %lbl%@227  (=> (|KMBtreeModel.__default.SplitIndex#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (or (KMBtreeModel.__default.SplitIndex (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (KMBtreeModel.Node.Index_q (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|))))) :lblneg @227) (=> (=> (|KMBtreeModel.__default.SplitIndex#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (or (KMBtreeModel.__default.SplitIndex (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (KMBtreeModel.Node.Index_q (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|)))) (and (! (or %lbl%@228  (=> (|KMBtreeModel.__default.SplitIndex#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (or (KMBtreeModel.__default.SplitIndex (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (< 0 (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@7 |node#0@@97|))))))) :lblneg @228) (=> (=> (|KMBtreeModel.__default.SplitIndex#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (or (KMBtreeModel.__default.SplitIndex (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (< 0 (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@7 |node#0@@97|)))))) (and (! (or %lbl%@229  (=> (|KMBtreeModel.__default.SplitIndex#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (or (KMBtreeModel.__default.SplitIndex (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (< (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@7 |node#0@@97|))) (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@@125 |node#0@@97|))))))) :lblneg @229) (=> (=> (|KMBtreeModel.__default.SplitIndex#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (or (KMBtreeModel.__default.SplitIndex (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (< (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@7 |node#0@@97|))) (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@@125 |node#0@@97|)))))) (and (! (or %lbl%@230  (=> (|KMBtreeModel.__default.SplitIndex#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (or (KMBtreeModel.__default.SplitIndex (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (= (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@@125 |node#0@@97|))) (+ (|Seq#Length| (KMBtreeModel.Node.pivots (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@@125 |node#0@@97|))) 1))))) :lblneg @230) (=> (=> (|KMBtreeModel.__default.SplitIndex#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (or (KMBtreeModel.__default.SplitIndex (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (= (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@@125 |node#0@@97|))) (+ (|Seq#Length| (KMBtreeModel.Node.pivots (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@@125 |node#0@@97|))) 1)))) (and (! (or %lbl%@231  (=> (|KMBtreeModel.__default.SplitIndex#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (or (KMBtreeModel.__default.SplitIndex (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (|KMBtreeModel.Node#Equal| (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtreeModel.__default.SubIndex (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@@125 |node#0@@97|) (LitInt 0) (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@7 |node#0@@97|)))))))) :lblneg @231) (=> (=> (|KMBtreeModel.__default.SplitIndex#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (or (KMBtreeModel.__default.SplitIndex (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (|KMBtreeModel.Node#Equal| (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtreeModel.__default.SubIndex (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@@125 |node#0@@97|) (LitInt 0) (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@7 |node#0@@97|))))))) (and (! (or %lbl%@232  (=> (|KMBtreeModel.__default.SplitIndex#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (or (KMBtreeModel.__default.SplitIndex (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (|KMBtreeModel.Node#Equal| (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) (KMBtreeModel.__default.SubIndex (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@@125 |node#0@@97|) (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@7 |node#0@@97|))) (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@@125 |node#0@@97|)))))))) :lblneg @232) (=> (=> (|KMBtreeModel.__default.SplitIndex#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (or (KMBtreeModel.__default.SplitIndex (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (|KMBtreeModel.Node#Equal| (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) (KMBtreeModel.__default.SubIndex (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@@125 |node#0@@97|) (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@7 |node#0@@97|))) (|Seq#Length| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@@125 |node#0@@97|))))))) (and (! (or %lbl%@233  (=> (|KMBtreeModel.__default.SplitIndex#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (or (KMBtreeModel.__default.SplitIndex (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (forall ((|key#2@@14| T@U) ) (!  (=> (and (and (= (type |key#2@@14|) (SeqType BoxType)) ($Is |key#2@@14| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuelAssert_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@7 |node#0@@97|))))) ($Box |key#2@@14|)))) (Lexicographic__Byte__Order.__default.lt |key#2@@14| |pivot#0@0|)) :qid |BtreeMod.437:16| :skolemid |9321| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#2@@14| |pivot#0@0|)) :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuelAssert_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@7 |node#0@@97|))))) ($Box |key#2@@14|))) ))))) :lblneg @233) (=> (=> (|KMBtreeModel.__default.SplitIndex#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (or (KMBtreeModel.__default.SplitIndex (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (forall ((|key#2@@15| T@U) ) (!  (=> (and (and (= (type |key#2@@15|) (SeqType BoxType)) ($Is |key#2@@15| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuelAssert_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@7 |node#0@@97|))))) ($Box |key#2@@15|)))) (Lexicographic__Byte__Order.__default.lt |key#2@@15| |pivot#0@0|)) :qid |BtreeMod.437:16| :skolemid |9321| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#2@@15| |pivot#0@0|)) :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuelAssert_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.KMBtreeModel.Node (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@7 |node#0@@97|))))) ($Box |key#2@@15|))) )))) (and (! (or %lbl%@234  (=> (|KMBtreeModel.__default.SplitIndex#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (or (KMBtreeModel.__default.SplitIndex (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (forall ((|key#3@@14| T@U) ) (!  (=> (and (and (= (type |key#3@@14|) (SeqType BoxType)) ($Is |key#3@@14| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuelAssert_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|)) (LitInt 0)))) ($Box |key#3@@14|)))) (Lexicographic__Byte__Order.__default.lte |pivot#0@0| |key#3@@14|)) :qid |BtreeMod.438:16| :skolemid |9323| :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@0| |key#3@@14|)) :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuelAssert_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|)) 0))) ($Box |key#3@@14|))) ))))) :lblneg @234) (=> (=> (|KMBtreeModel.__default.SplitIndex#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (or (KMBtreeModel.__default.SplitIndex (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (forall ((|key#3@@15| T@U) ) (!  (=> (and (and (= (type |key#3@@15|) (SeqType BoxType)) ($Is |key#3@@15| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (KMBtreeModel.__default.AllKeys StartFuelAssert_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|)) (LitInt 0)))) ($Box |key#3@@15|)))) (Lexicographic__Byte__Order.__default.lte |pivot#0@0| |key#3@@15|)) :qid |BtreeMod.438:16| :skolemid |9323| :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@0| |key#3@@15|)) :pattern ( (MapType0Select (KMBtreeModel.__default.AllKeys StartFuelAssert_KMBtreeModel._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (KMBtreeModel.Node.children (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|)) 0))) ($Box |key#3@@15|))) )))) (and (! (or %lbl%@235  (=> (|KMBtreeModel.__default.SplitIndex#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (or (KMBtreeModel.__default.SplitIndex (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (|Seq#Equal| |pivot#0@0| ($Unbox (SeqType BoxType) (|Seq#Index| (KMBtreeModel.Node.pivots (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@@125 |node#0@@97|)) (|Seq#Length| (KMBtreeModel.Node.pivots (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@7 |node#0@@97|))))))))) :lblneg @235) (=> (=> (|KMBtreeModel.__default.SplitIndex#canCall| (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (or (KMBtreeModel.__default.SplitIndex (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |node#0@@97|) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@7 |call5formal@subnode#0@0|) |pivot#0@0|) (|Seq#Equal| |pivot#0@0| ($Unbox (SeqType BoxType) (|Seq#Index| (KMBtreeModel.Node.pivots (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@@125 |node#0@@97|)) (|Seq#Length| (KMBtreeModel.Node.pivots (KMBtree.__default.I StartFuelAssert_KMBtree._default.I $Heap@7 |node#0@@97|)))))))) (and (! (or %lbl%@236  (=> false (= (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)) |nleft#0|))) :lblneg @236) (=> (=> false (= (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@7 |node#0@@97|) KMBtree.Node.contents)) |nleft#0|)) (! (or %lbl%@237  (=> false (|Seq#Equal| |pivot#0@0| ($Unbox (SeqType BoxType) (MapType1Select (MapType0Select $Heap@@125 (KMBtree.NodeContents.pivots (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents))) (IndexField (- |nleft#0| 1))))))) :lblneg @237)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (let ((PreconditionGeneratedEntry_correct  (=> (! (and %lbl%+238 true) :lblpos +238) (=> (and ($IsGoodHeap $Heap@@125) ($IsHeapAnchor $Heap@@125)) (=> (and (and ($Is |node#0@@97| Tclass.KMBtree.Node) ($IsAlloc |node#0@@97| Tclass.KMBtree.Node $Heap@@125)) (and (<= (LitInt 0) |nleft#0|) (< |nleft#0| 18446744073709551616))) (=> (and (and (and ($Is |right#0@@11| Tclass.KMBtree.Node) ($IsAlloc |right#0@@11| Tclass.KMBtree.Node $Heap@@125)) (and ($Is |pivot#0@@27| (TSeq Tclass.NativeTypes.byte)) ($IsAlloc |pivot#0@@27| (TSeq Tclass.NativeTypes.byte) $Heap@@125))) (and (and ($Is |$rhs##0| Tclass.KMBtree.Node) ($IsAlloc |$rhs##0| Tclass.KMBtree.Node $Heap@@125)) (and ($Is |inode#0| Tclass.KMBtreeModel.Node) ($IsAlloc |inode#0| Tclass.KMBtreeModel.Node $Heap@@125)))) (=> (and (and (and (and ($Is |iright#0| Tclass.KMBtreeModel.Node) ($IsAlloc |iright#0| Tclass.KMBtreeModel.Node $Heap@@125)) (= 50 $FunctionContextHeight)) (and (|KMBtree.__default.WF#canCall| $Heap@@125 |node#0@@97|) (and (KMBtree.__default.WF $Heap@@125 |node#0@@97|) (and (KMBtree.__default.WFShape ($LS $LZ) $Heap@@125 |node#0@@97|) (KMBtreeModel.__default.WF ($LS $LZ) (KMBtree.__default.I StartFuel_KMBtree._default.I $Heap@@125 |node#0@@97|)))))) (and (and (KMBtree.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)) (<= (LitInt 2) (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))) (and (< 0 |nleft#0|) (< |nleft#0| (KMBtree.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@125 |node#0@@97|) KMBtree.Node.contents)))))) anon0_correct))))))) PreconditionGeneratedEntry_correct)) ))
(check-sat)
